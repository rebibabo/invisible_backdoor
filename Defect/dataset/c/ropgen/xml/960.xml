<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/960.c" pos:tabs="8"><function pos:start="1:1" pos:end="8131:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">abi_long</name></type> <name pos:start="1:10" pos:end="1:19">do_syscall</name><parameter_list pos:start="1:20" pos:end="7:34">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:24">void</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:33">cpu_env</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:42"><decl pos:start="1:36" pos:end="1:42"><type pos:start="1:36" pos:end="1:42"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:42">num</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:57"><decl pos:start="1:45" pos:end="1:57"><type pos:start="1:45" pos:end="1:57"><name pos:start="1:45" pos:end="1:52">abi_long</name></type> <name pos:start="1:54" pos:end="1:57">arg1</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:33"><decl pos:start="3:21" pos:end="3:33"><type pos:start="3:21" pos:end="3:33"><name pos:start="3:21" pos:end="3:28">abi_long</name></type> <name pos:start="3:30" pos:end="3:33">arg2</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:48"><decl pos:start="3:36" pos:end="3:48"><type pos:start="3:36" pos:end="3:48"><name pos:start="3:36" pos:end="3:43">abi_long</name></type> <name pos:start="3:45" pos:end="3:48">arg3</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:63"><decl pos:start="3:51" pos:end="3:63"><type pos:start="3:51" pos:end="3:63"><name pos:start="3:51" pos:end="3:58">abi_long</name></type> <name pos:start="3:60" pos:end="3:63">arg4</name></decl></parameter>,

                    <parameter pos:start="5:21" pos:end="5:33"><decl pos:start="5:21" pos:end="5:33"><type pos:start="5:21" pos:end="5:33"><name pos:start="5:21" pos:end="5:28">abi_long</name></type> <name pos:start="5:30" pos:end="5:33">arg5</name></decl></parameter>, <parameter pos:start="5:36" pos:end="5:48"><decl pos:start="5:36" pos:end="5:48"><type pos:start="5:36" pos:end="5:48"><name pos:start="5:36" pos:end="5:43">abi_long</name></type> <name pos:start="5:45" pos:end="5:48">arg6</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:63"><decl pos:start="5:51" pos:end="5:63"><type pos:start="5:51" pos:end="5:63"><name pos:start="5:51" pos:end="5:58">abi_long</name></type> <name pos:start="5:60" pos:end="5:63">arg7</name></decl></parameter>,

                    <parameter pos:start="7:21" pos:end="7:33"><decl pos:start="7:21" pos:end="7:33"><type pos:start="7:21" pos:end="7:33"><name pos:start="7:21" pos:end="7:28">abi_long</name></type> <name pos:start="7:30" pos:end="7:33">arg8</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="8131:1">{<block_content pos:start="11:5" pos:end="8129:14">

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">cpu</name> <init pos:start="11:19" pos:end="11:40">= <expr pos:start="11:21" pos:end="11:40"><call pos:start="11:21" pos:end="11:40"><name pos:start="11:21" pos:end="11:31">ENV_GET_CPU</name><argument_list pos:start="11:32" pos:end="11:40">(<argument pos:start="11:33" pos:end="11:39"><expr pos:start="11:33" pos:end="11:39"><name pos:start="11:33" pos:end="11:39">cpu_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">abi_long</name></type> <name pos:start="13:14" pos:end="13:16">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:15">stat</name></name></type> <name pos:start="15:17" pos:end="15:18">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:17">statfs</name></name></type> <name pos:start="17:19" pos:end="17:22">stfs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="24:0"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">void</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:11">p</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="23:1" pos:end="23:12">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:31"><call pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:12">gemu_log</name><argument_list pos:start="25:13" pos:end="25:31">(<argument pos:start="25:14" pos:end="25:25"><expr pos:start="25:14" pos:end="25:25"><literal type="string" pos:start="25:14" pos:end="25:25">"syscall %d"</literal></expr></argument>, <argument pos:start="25:28" pos:end="25:30"><expr pos:start="25:28" pos:end="25:30"><name pos:start="25:28" pos:end="25:30">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="29:5" pos:end="31:63"><if pos:start="29:5" pos:end="31:63">if<condition pos:start="29:7" pos:end="29:17">(<expr pos:start="29:8" pos:end="29:16"><name pos:start="29:8" pos:end="29:16">do_strace</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:63"><block_content pos:start="31:9" pos:end="31:63">

        <expr_stmt pos:start="31:9" pos:end="31:63"><expr pos:start="31:9" pos:end="31:62"><call pos:start="31:9" pos:end="31:62"><name pos:start="31:9" pos:end="31:21">print_syscall</name><argument_list pos:start="31:22" pos:end="31:62">(<argument pos:start="31:23" pos:end="31:25"><expr pos:start="31:23" pos:end="31:25"><name pos:start="31:23" pos:end="31:25">num</name></expr></argument>, <argument pos:start="31:28" pos:end="31:31"><expr pos:start="31:28" pos:end="31:31"><name pos:start="31:28" pos:end="31:31">arg1</name></expr></argument>, <argument pos:start="31:34" pos:end="31:37"><expr pos:start="31:34" pos:end="31:37"><name pos:start="31:34" pos:end="31:37">arg2</name></expr></argument>, <argument pos:start="31:40" pos:end="31:43"><expr pos:start="31:40" pos:end="31:43"><name pos:start="31:40" pos:end="31:43">arg3</name></expr></argument>, <argument pos:start="31:46" pos:end="31:49"><expr pos:start="31:46" pos:end="31:49"><name pos:start="31:46" pos:end="31:49">arg4</name></expr></argument>, <argument pos:start="31:52" pos:end="31:55"><expr pos:start="31:52" pos:end="31:55"><name pos:start="31:52" pos:end="31:55">arg5</name></expr></argument>, <argument pos:start="31:58" pos:end="31:61"><expr pos:start="31:58" pos:end="31:61"><name pos:start="31:58" pos:end="31:61">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <switch pos:start="35:5" pos:end="8109:5">switch<condition pos:start="35:11" pos:end="35:15">(<expr pos:start="35:12" pos:end="35:14"><name pos:start="35:12" pos:end="35:14">num</name></expr>)</condition> <block pos:start="35:17" pos:end="8109:5">{<block_content pos:start="37:5" pos:end="8107:14">

    <case pos:start="37:5" pos:end="37:24">case <expr pos:start="37:10" pos:end="37:23"><name pos:start="37:10" pos:end="37:23">TARGET_NR_exit</name></expr>:</case>

        <comment type="block" pos:start="39:9" pos:end="45:69">/* In old applications this may be used to implement _exit(2).

           However in threaded applictions it is used for thread termination,

           and _exit_group is used for application termination.

           Do thread termination if we have more then one thread.  */</comment>

        <comment type="block" pos:start="47:9" pos:end="49:36">/* FIXME: This probably breaks if a signal arrives.  We should probably

           be disabling signals.  */</comment>

        <if_stmt pos:start="51:9" pos:end="88:0"><if pos:start="51:9" pos:end="88:0">if <condition pos:start="51:12" pos:end="51:32">(<expr pos:start="51:13" pos:end="51:31"><call pos:start="51:13" pos:end="51:31"><name pos:start="51:13" pos:end="51:20">CPU_NEXT</name><argument_list pos:start="51:21" pos:end="51:31">(<argument pos:start="51:22" pos:end="51:30"><expr pos:start="51:22" pos:end="51:30"><name pos:start="51:22" pos:end="51:30">first_cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:34" pos:end="88:0">{<block_content pos:start="53:13" pos:end="83:31">

            <decl_stmt pos:start="53:13" pos:end="53:26"><decl pos:start="53:13" pos:end="53:25"><type pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:21">TaskState</name> <modifier pos:start="53:23" pos:end="53:23">*</modifier></type><name pos:start="53:24" pos:end="53:25">ts</name></decl>;</decl_stmt>



            <expr_stmt pos:start="57:13" pos:end="57:28"><expr pos:start="57:13" pos:end="57:27"><call pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:25">cpu_list_lock</name><argument_list pos:start="57:26" pos:end="57:27">()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="59:13" pos:end="59:48">/* Remove the CPU from the list.  */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:44"><expr pos:start="61:13" pos:end="61:43"><call pos:start="61:13" pos:end="61:43"><name pos:start="61:13" pos:end="61:25">QTAILQ_REMOVE</name><argument_list pos:start="61:26" pos:end="61:43">(<argument pos:start="61:27" pos:end="61:31"><expr pos:start="61:27" pos:end="61:31"><operator pos:start="61:27" pos:end="61:27">&amp;</operator><name pos:start="61:28" pos:end="61:31">cpus</name></expr></argument>, <argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><name pos:start="61:34" pos:end="61:36">cpu</name></expr></argument>, <argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><name pos:start="61:39" pos:end="61:42">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:30"><expr pos:start="63:13" pos:end="63:29"><call pos:start="63:13" pos:end="63:29"><name pos:start="63:13" pos:end="63:27">cpu_list_unlock</name><argument_list pos:start="63:28" pos:end="63:29">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:29"><expr pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:14">ts</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <name pos:start="65:18" pos:end="65:28"><name pos:start="65:18" pos:end="65:20">cpu</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:28">opaque</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="75:13"><if pos:start="67:13" pos:end="75:13">if <condition pos:start="67:16" pos:end="67:33">(<expr pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:18">ts</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:32">child_tidptr</name></name></expr>)</condition> <block pos:start="67:35" pos:end="75:13">{<block_content pos:start="69:17" pos:end="73:41">

                <expr_stmt pos:start="69:17" pos:end="69:50"><expr pos:start="69:17" pos:end="69:49"><call pos:start="69:17" pos:end="69:49"><name pos:start="69:17" pos:end="69:28">put_user_u32</name><argument_list pos:start="69:29" pos:end="69:49">(<argument pos:start="69:30" pos:end="69:30"><expr pos:start="69:30" pos:end="69:30"><literal type="number" pos:start="69:30" pos:end="69:30">0</literal></expr></argument>, <argument pos:start="69:33" pos:end="69:48"><expr pos:start="69:33" pos:end="69:48"><name pos:start="69:33" pos:end="69:48"><name pos:start="69:33" pos:end="69:34">ts</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:48">child_tidptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="73:41"><expr pos:start="71:17" pos:end="73:40"><call pos:start="71:17" pos:end="73:40"><name pos:start="71:17" pos:end="71:25">sys_futex</name><argument_list pos:start="71:26" pos:end="73:40">(<argument pos:start="71:27" pos:end="71:47"><expr pos:start="71:27" pos:end="71:47"><call pos:start="71:27" pos:end="71:47"><name pos:start="71:27" pos:end="71:29">g2h</name><argument_list pos:start="71:30" pos:end="71:47">(<argument pos:start="71:31" pos:end="71:46"><expr pos:start="71:31" pos:end="71:46"><name pos:start="71:31" pos:end="71:46"><name pos:start="71:31" pos:end="71:32">ts</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:46">child_tidptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:50" pos:end="71:59"><expr pos:start="71:50" pos:end="71:59"><name pos:start="71:50" pos:end="71:59">FUTEX_WAKE</name></expr></argument>, <argument pos:start="71:62" pos:end="71:68"><expr pos:start="71:62" pos:end="71:68"><name pos:start="71:62" pos:end="71:68">INT_MAX</name></expr></argument>,

                          <argument pos:start="73:27" pos:end="73:30"><expr pos:start="73:27" pos:end="73:30"><name pos:start="73:27" pos:end="73:30">NULL</name></expr></argument>, <argument pos:start="73:33" pos:end="73:36"><expr pos:start="73:33" pos:end="73:36"><name pos:start="73:33" pos:end="73:36">NULL</name></expr></argument>, <argument pos:start="73:39" pos:end="73:39"><expr pos:start="73:39" pos:end="73:39"><literal type="number" pos:start="73:39" pos:end="73:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:30"><expr pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:22">thread_cpu</name> <operator pos:start="77:24" pos:end="77:24">=</operator> <name pos:start="77:26" pos:end="77:29">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:38"><expr pos:start="79:13" pos:end="79:37"><call pos:start="79:13" pos:end="79:37"><name pos:start="79:13" pos:end="79:24">object_unref</name><argument_list pos:start="79:25" pos:end="79:37">(<argument pos:start="79:26" pos:end="79:36"><expr pos:start="79:26" pos:end="79:36"><call pos:start="79:26" pos:end="79:36"><name pos:start="79:26" pos:end="79:31">OBJECT</name><argument_list pos:start="79:32" pos:end="79:36">(<argument pos:start="79:33" pos:end="79:35"><expr pos:start="79:33" pos:end="79:35"><name pos:start="79:33" pos:end="79:35">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:23"><expr pos:start="81:13" pos:end="81:22"><call pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:18">g_free</name><argument_list pos:start="81:19" pos:end="81:22">(<argument pos:start="81:20" pos:end="81:21"><expr pos:start="81:20" pos:end="81:21"><name pos:start="81:20" pos:end="81:21">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:31"><expr pos:start="83:13" pos:end="83:30"><call pos:start="83:13" pos:end="83:30"><name pos:start="83:13" pos:end="83:24">pthread_exit</name><argument_list pos:start="83:25" pos:end="83:30">(<argument pos:start="83:26" pos:end="83:29"><expr pos:start="83:26" pos:end="83:29"><name pos:start="83:26" pos:end="83:29">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="87:1" pos:end="87:19">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:19">TARGET_GPROF</name></cpp:ifdef>

        <expr_stmt pos:start="89:9" pos:end="92:0"><expr pos:start="89:9" pos:end="89:19"><call pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:17">_mcleanup</name><argument_list pos:start="89:18" pos:end="89:19">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="93:9" pos:end="93:32"><expr pos:start="93:9" pos:end="93:31"><call pos:start="93:9" pos:end="93:31"><name pos:start="93:9" pos:end="93:16">gdb_exit</name><argument_list pos:start="93:17" pos:end="93:31">(<argument pos:start="93:18" pos:end="93:24"><expr pos:start="93:18" pos:end="93:24"><name pos:start="93:18" pos:end="93:24">cpu_env</name></expr></argument>, <argument pos:start="93:27" pos:end="93:30"><expr pos:start="93:27" pos:end="93:30"><name pos:start="93:27" pos:end="93:30">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:20"><expr pos:start="95:9" pos:end="95:19"><call pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:13">_exit</name><argument_list pos:start="95:14" pos:end="95:19">(<argument pos:start="95:15" pos:end="95:18"><expr pos:start="95:15" pos:end="95:18"><name pos:start="95:15" pos:end="95:18">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:16"><expr pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <literal type="number" pos:start="97:15" pos:end="97:15">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="97:18" pos:end="97:36">/* avoid warning */</comment>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <case pos:start="101:5" pos:end="101:24">case <expr pos:start="101:10" pos:end="101:23"><name pos:start="101:10" pos:end="101:23">TARGET_NR_read</name></expr>:</case>

        <if_stmt pos:start="103:9" pos:end="116:9"><if pos:start="103:9" pos:end="116:9">if <condition pos:start="103:12" pos:end="103:22">(<expr pos:start="103:13" pos:end="103:21"><name pos:start="103:13" pos:end="103:16">arg3</name> <operator pos:start="103:18" pos:end="103:19">==</operator> <literal type="number" pos:start="103:21" pos:end="103:21">0</literal></expr>)</condition><block type="pseudo" pos:start="106:9" pos:end="116:9"><block_content pos:start="106:9" pos:end="116:9">


        <if_stmt pos:start="106:9" pos:end="116:9"><else pos:start="106:9" pos:end="116:9">else <block pos:start="106:14" pos:end="116:9">{<block_content pos:start="108:13" pos:end="114:38">

            <if_stmt pos:start="108:13" pos:end="110:28"><if pos:start="108:13" pos:end="110:28">if <condition pos:start="108:16" pos:end="108:62">(<expr pos:start="108:17" pos:end="108:61"><operator pos:start="108:17" pos:end="108:17">!</operator><operator pos:start="108:18" pos:end="108:18">(</operator><name pos:start="108:19" pos:end="108:19">p</name> <operator pos:start="108:21" pos:end="108:21">=</operator> <call pos:start="108:23" pos:end="108:60"><name pos:start="108:23" pos:end="108:31">lock_user</name><argument_list pos:start="108:32" pos:end="108:60">(<argument pos:start="108:33" pos:end="108:44"><expr pos:start="108:33" pos:end="108:44"><name pos:start="108:33" pos:end="108:44">VERIFY_WRITE</name></expr></argument>, <argument pos:start="108:47" pos:end="108:50"><expr pos:start="108:47" pos:end="108:50"><name pos:start="108:47" pos:end="108:50">arg2</name></expr></argument>, <argument pos:start="108:53" pos:end="108:56"><expr pos:start="108:53" pos:end="108:56"><name pos:start="108:53" pos:end="108:56">arg3</name></expr></argument>, <argument pos:start="108:59" pos:end="108:59"><expr pos:start="108:59" pos:end="108:59"><literal type="number" pos:start="108:59" pos:end="108:59">0</literal></expr></argument>)</argument_list></call><operator pos:start="108:61" pos:end="108:61">)</operator></expr>)</condition><block type="pseudo" pos:start="110:17" pos:end="110:28"><block_content pos:start="110:17" pos:end="110:28">

                <goto pos:start="110:17" pos:end="110:28">goto <name pos:start="110:22" pos:end="110:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="112:13" pos:end="112:49"><expr pos:start="112:13" pos:end="112:48"><name pos:start="112:13" pos:end="112:15">ret</name> <operator pos:start="112:17" pos:end="112:17">=</operator> <call pos:start="112:19" pos:end="112:48"><name pos:start="112:19" pos:end="112:27">get_errno</name><argument_list pos:start="112:28" pos:end="112:48">(<argument pos:start="112:29" pos:end="112:47"><expr pos:start="112:29" pos:end="112:47"><call pos:start="112:29" pos:end="112:47"><name pos:start="112:29" pos:end="112:32">read</name><argument_list pos:start="112:33" pos:end="112:47">(<argument pos:start="112:34" pos:end="112:37"><expr pos:start="112:34" pos:end="112:37"><name pos:start="112:34" pos:end="112:37">arg1</name></expr></argument>, <argument pos:start="112:40" pos:end="112:40"><expr pos:start="112:40" pos:end="112:40"><name pos:start="112:40" pos:end="112:40">p</name></expr></argument>, <argument pos:start="112:43" pos:end="112:46"><expr pos:start="112:43" pos:end="112:46"><name pos:start="112:43" pos:end="112:46">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="114:13" pos:end="114:38"><expr pos:start="114:13" pos:end="114:37"><call pos:start="114:13" pos:end="114:37"><name pos:start="114:13" pos:end="114:23">unlock_user</name><argument_list pos:start="114:24" pos:end="114:37">(<argument pos:start="114:25" pos:end="114:25"><expr pos:start="114:25" pos:end="114:25"><name pos:start="114:25" pos:end="114:25">p</name></expr></argument>, <argument pos:start="114:28" pos:end="114:31"><expr pos:start="114:28" pos:end="114:31"><name pos:start="114:28" pos:end="114:31">arg2</name></expr></argument>, <argument pos:start="114:34" pos:end="114:36"><expr pos:start="114:34" pos:end="114:36"><name pos:start="114:34" pos:end="114:36">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

        <break pos:start="118:9" pos:end="118:14">break;</break>

    <case pos:start="120:5" pos:end="120:25">case <expr pos:start="120:10" pos:end="120:24"><name pos:start="120:10" pos:end="120:24">TARGET_NR_write</name></expr>:</case>

        <if_stmt pos:start="122:9" pos:end="124:24"><if pos:start="122:9" pos:end="124:24">if <condition pos:start="122:12" pos:end="122:57">(<expr pos:start="122:13" pos:end="122:56"><operator pos:start="122:13" pos:end="122:13">!</operator><operator pos:start="122:14" pos:end="122:14">(</operator><name pos:start="122:15" pos:end="122:15">p</name> <operator pos:start="122:17" pos:end="122:17">=</operator> <call pos:start="122:19" pos:end="122:55"><name pos:start="122:19" pos:end="122:27">lock_user</name><argument_list pos:start="122:28" pos:end="122:55">(<argument pos:start="122:29" pos:end="122:39"><expr pos:start="122:29" pos:end="122:39"><name pos:start="122:29" pos:end="122:39">VERIFY_READ</name></expr></argument>, <argument pos:start="122:42" pos:end="122:45"><expr pos:start="122:42" pos:end="122:45"><name pos:start="122:42" pos:end="122:45">arg2</name></expr></argument>, <argument pos:start="122:48" pos:end="122:51"><expr pos:start="122:48" pos:end="122:51"><name pos:start="122:48" pos:end="122:51">arg3</name></expr></argument>, <argument pos:start="122:54" pos:end="122:54"><expr pos:start="122:54" pos:end="122:54"><literal type="number" pos:start="122:54" pos:end="122:54">1</literal></expr></argument>)</argument_list></call><operator pos:start="122:56" pos:end="122:56">)</operator></expr>)</condition><block type="pseudo" pos:start="124:13" pos:end="124:24"><block_content pos:start="124:13" pos:end="124:24">

            <goto pos:start="124:13" pos:end="124:24">goto <name pos:start="124:18" pos:end="124:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="126:9" pos:end="126:46"><expr pos:start="126:9" pos:end="126:45"><name pos:start="126:9" pos:end="126:11">ret</name> <operator pos:start="126:13" pos:end="126:13">=</operator> <call pos:start="126:15" pos:end="126:45"><name pos:start="126:15" pos:end="126:23">get_errno</name><argument_list pos:start="126:24" pos:end="126:45">(<argument pos:start="126:25" pos:end="126:44"><expr pos:start="126:25" pos:end="126:44"><call pos:start="126:25" pos:end="126:44"><name pos:start="126:25" pos:end="126:29">write</name><argument_list pos:start="126:30" pos:end="126:44">(<argument pos:start="126:31" pos:end="126:34"><expr pos:start="126:31" pos:end="126:34"><name pos:start="126:31" pos:end="126:34">arg1</name></expr></argument>, <argument pos:start="126:37" pos:end="126:37"><expr pos:start="126:37" pos:end="126:37"><name pos:start="126:37" pos:end="126:37">p</name></expr></argument>, <argument pos:start="126:40" pos:end="126:43"><expr pos:start="126:40" pos:end="126:43"><name pos:start="126:40" pos:end="126:43">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="128:9" pos:end="128:32"><expr pos:start="128:9" pos:end="128:31"><call pos:start="128:9" pos:end="128:31"><name pos:start="128:9" pos:end="128:19">unlock_user</name><argument_list pos:start="128:20" pos:end="128:31">(<argument pos:start="128:21" pos:end="128:21"><expr pos:start="128:21" pos:end="128:21"><name pos:start="128:21" pos:end="128:21">p</name></expr></argument>, <argument pos:start="128:24" pos:end="128:27"><expr pos:start="128:24" pos:end="128:27"><name pos:start="128:24" pos:end="128:27">arg2</name></expr></argument>, <argument pos:start="128:30" pos:end="128:30"><expr pos:start="128:30" pos:end="128:30"><literal type="number" pos:start="128:30" pos:end="128:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="130:9" pos:end="130:14">break;</break>

    <case pos:start="132:5" pos:end="132:24">case <expr pos:start="132:10" pos:end="132:23"><name pos:start="132:10" pos:end="132:23">TARGET_NR_open</name></expr>:</case>

        <if_stmt pos:start="134:9" pos:end="136:24"><if pos:start="134:9" pos:end="136:24">if <condition pos:start="134:12" pos:end="134:42">(<expr pos:start="134:13" pos:end="134:41"><operator pos:start="134:13" pos:end="134:13">!</operator><operator pos:start="134:14" pos:end="134:14">(</operator><name pos:start="134:15" pos:end="134:15">p</name> <operator pos:start="134:17" pos:end="134:17">=</operator> <call pos:start="134:19" pos:end="134:40"><name pos:start="134:19" pos:end="134:34">lock_user_string</name><argument_list pos:start="134:35" pos:end="134:40">(<argument pos:start="134:36" pos:end="134:39"><expr pos:start="134:36" pos:end="134:39"><name pos:start="134:36" pos:end="134:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="134:41" pos:end="134:41">)</operator></expr>)</condition><block type="pseudo" pos:start="136:13" pos:end="136:24"><block_content pos:start="136:13" pos:end="136:24">

            <goto pos:start="136:13" pos:end="136:24">goto <name pos:start="136:18" pos:end="136:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="138:9" pos:end="142:39"><expr pos:start="138:9" pos:end="142:38"><name pos:start="138:9" pos:end="138:11">ret</name> <operator pos:start="138:13" pos:end="138:13">=</operator> <call pos:start="138:15" pos:end="142:38"><name pos:start="138:15" pos:end="138:23">get_errno</name><argument_list pos:start="138:24" pos:end="142:38">(<argument pos:start="138:25" pos:end="142:37"><expr pos:start="138:25" pos:end="142:37"><call pos:start="138:25" pos:end="142:37"><name pos:start="138:25" pos:end="138:31">do_open</name><argument_list pos:start="138:32" pos:end="142:37">(<argument pos:start="138:33" pos:end="138:39"><expr pos:start="138:33" pos:end="138:39"><name pos:start="138:33" pos:end="138:39">cpu_env</name></expr></argument>, <argument pos:start="138:42" pos:end="138:42"><expr pos:start="138:42" pos:end="138:42"><name pos:start="138:42" pos:end="138:42">p</name></expr></argument>,

                                <argument pos:start="140:33" pos:end="140:77"><expr pos:start="140:33" pos:end="140:77"><call pos:start="140:33" pos:end="140:77"><name pos:start="140:33" pos:end="140:54">target_to_host_bitmask</name><argument_list pos:start="140:55" pos:end="140:77">(<argument pos:start="140:56" pos:end="140:59"><expr pos:start="140:56" pos:end="140:59"><name pos:start="140:56" pos:end="140:59">arg2</name></expr></argument>, <argument pos:start="140:62" pos:end="140:76"><expr pos:start="140:62" pos:end="140:76"><name pos:start="140:62" pos:end="140:76">fcntl_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="142:33" pos:end="142:36"><expr pos:start="142:33" pos:end="142:36"><name pos:start="142:33" pos:end="142:36">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="144:9" pos:end="144:32"><expr pos:start="144:9" pos:end="144:31"><call pos:start="144:9" pos:end="144:31"><name pos:start="144:9" pos:end="144:19">unlock_user</name><argument_list pos:start="144:20" pos:end="144:31">(<argument pos:start="144:21" pos:end="144:21"><expr pos:start="144:21" pos:end="144:21"><name pos:start="144:21" pos:end="144:21">p</name></expr></argument>, <argument pos:start="144:24" pos:end="144:27"><expr pos:start="144:24" pos:end="144:27"><name pos:start="144:24" pos:end="144:27">arg1</name></expr></argument>, <argument pos:start="144:30" pos:end="144:30"><expr pos:start="144:30" pos:end="144:30"><literal type="number" pos:start="144:30" pos:end="144:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="146:9" pos:end="149:0">break;</break>

<cpp:if pos:start="148:1" pos:end="148:53">#<cpp:directive pos:start="148:2" pos:end="148:3">if</cpp:directive> <expr pos:start="148:5" pos:end="148:53"><call pos:start="148:5" pos:end="148:29"><name pos:start="148:5" pos:end="148:11">defined</name><argument_list pos:start="148:12" pos:end="148:29">(<argument pos:start="148:13" pos:end="148:28"><expr pos:start="148:13" pos:end="148:28"><name pos:start="148:13" pos:end="148:28">TARGET_NR_openat</name></expr></argument>)</argument_list></call> <operator pos:start="148:31" pos:end="148:32">&amp;&amp;</operator> <call pos:start="148:34" pos:end="148:53"><name pos:start="148:34" pos:end="148:40">defined</name><argument_list pos:start="148:41" pos:end="148:53">(<argument pos:start="148:42" pos:end="148:52"><expr pos:start="148:42" pos:end="148:52"><name pos:start="148:42" pos:end="148:52">__NR_openat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="150:5" pos:end="150:26">case <expr pos:start="150:10" pos:end="150:25"><name pos:start="150:10" pos:end="150:25">TARGET_NR_openat</name></expr>:</case>

        <if_stmt pos:start="152:9" pos:end="154:24"><if pos:start="152:9" pos:end="154:24">if <condition pos:start="152:12" pos:end="152:42">(<expr pos:start="152:13" pos:end="152:41"><operator pos:start="152:13" pos:end="152:13">!</operator><operator pos:start="152:14" pos:end="152:14">(</operator><name pos:start="152:15" pos:end="152:15">p</name> <operator pos:start="152:17" pos:end="152:17">=</operator> <call pos:start="152:19" pos:end="152:40"><name pos:start="152:19" pos:end="152:34">lock_user_string</name><argument_list pos:start="152:35" pos:end="152:40">(<argument pos:start="152:36" pos:end="152:39"><expr pos:start="152:36" pos:end="152:39"><name pos:start="152:36" pos:end="152:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="152:41" pos:end="152:41">)</operator></expr>)</condition><block type="pseudo" pos:start="154:13" pos:end="154:24"><block_content pos:start="154:13" pos:end="154:24">

            <goto pos:start="154:13" pos:end="154:24">goto <name pos:start="154:18" pos:end="154:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="156:9" pos:end="162:42"><expr pos:start="156:9" pos:end="162:41"><name pos:start="156:9" pos:end="156:11">ret</name> <operator pos:start="156:13" pos:end="156:13">=</operator> <call pos:start="156:15" pos:end="162:41"><name pos:start="156:15" pos:end="156:23">get_errno</name><argument_list pos:start="156:24" pos:end="162:41">(<argument pos:start="156:25" pos:end="162:40"><expr pos:start="156:25" pos:end="162:40"><call pos:start="156:25" pos:end="162:40"><name pos:start="156:25" pos:end="156:34">sys_openat</name><argument_list pos:start="156:35" pos:end="162:40">(<argument pos:start="156:36" pos:end="156:39"><expr pos:start="156:36" pos:end="156:39"><name pos:start="156:36" pos:end="156:39">arg1</name></expr></argument>,

                                   <argument pos:start="158:36" pos:end="158:42"><expr pos:start="158:36" pos:end="158:42"><call pos:start="158:36" pos:end="158:42"><name pos:start="158:36" pos:end="158:39">path</name><argument_list pos:start="158:40" pos:end="158:42">(<argument pos:start="158:41" pos:end="158:41"><expr pos:start="158:41" pos:end="158:41"><name pos:start="158:41" pos:end="158:41">p</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="160:36" pos:end="160:80"><expr pos:start="160:36" pos:end="160:80"><call pos:start="160:36" pos:end="160:80"><name pos:start="160:36" pos:end="160:57">target_to_host_bitmask</name><argument_list pos:start="160:58" pos:end="160:80">(<argument pos:start="160:59" pos:end="160:62"><expr pos:start="160:59" pos:end="160:62"><name pos:start="160:59" pos:end="160:62">arg3</name></expr></argument>, <argument pos:start="160:65" pos:end="160:79"><expr pos:start="160:65" pos:end="160:79"><name pos:start="160:65" pos:end="160:79">fcntl_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="162:36" pos:end="162:39"><expr pos:start="162:36" pos:end="162:39"><name pos:start="162:36" pos:end="162:39">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="164:9" pos:end="164:32"><expr pos:start="164:9" pos:end="164:31"><call pos:start="164:9" pos:end="164:31"><name pos:start="164:9" pos:end="164:19">unlock_user</name><argument_list pos:start="164:20" pos:end="164:31">(<argument pos:start="164:21" pos:end="164:21"><expr pos:start="164:21" pos:end="164:21"><name pos:start="164:21" pos:end="164:21">p</name></expr></argument>, <argument pos:start="164:24" pos:end="164:27"><expr pos:start="164:24" pos:end="164:27"><name pos:start="164:24" pos:end="164:27">arg2</name></expr></argument>, <argument pos:start="164:30" pos:end="164:30"><expr pos:start="164:30" pos:end="164:30"><literal type="number" pos:start="164:30" pos:end="164:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="166:9" pos:end="169:0">break;</break>

<cpp:endif pos:start="168:1" pos:end="168:6">#<cpp:directive pos:start="168:2" pos:end="168:6">endif</cpp:directive></cpp:endif>

    <case pos:start="170:5" pos:end="170:25">case <expr pos:start="170:10" pos:end="170:24"><name pos:start="170:10" pos:end="170:24">TARGET_NR_close</name></expr>:</case>

        <expr_stmt pos:start="172:9" pos:end="172:37"><expr pos:start="172:9" pos:end="172:36"><name pos:start="172:9" pos:end="172:11">ret</name> <operator pos:start="172:13" pos:end="172:13">=</operator> <call pos:start="172:15" pos:end="172:36"><name pos:start="172:15" pos:end="172:23">get_errno</name><argument_list pos:start="172:24" pos:end="172:36">(<argument pos:start="172:25" pos:end="172:35"><expr pos:start="172:25" pos:end="172:35"><call pos:start="172:25" pos:end="172:35"><name pos:start="172:25" pos:end="172:29">close</name><argument_list pos:start="172:30" pos:end="172:35">(<argument pos:start="172:31" pos:end="172:34"><expr pos:start="172:31" pos:end="172:34"><name pos:start="172:31" pos:end="172:34">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="174:9" pos:end="174:14">break;</break>

    <case pos:start="176:5" pos:end="176:23">case <expr pos:start="176:10" pos:end="176:22"><name pos:start="176:10" pos:end="176:22">TARGET_NR_brk</name></expr>:</case>

        <expr_stmt pos:start="178:9" pos:end="178:27"><expr pos:start="178:9" pos:end="178:26"><name pos:start="178:9" pos:end="178:11">ret</name> <operator pos:start="178:13" pos:end="178:13">=</operator> <call pos:start="178:15" pos:end="178:26"><name pos:start="178:15" pos:end="178:20">do_brk</name><argument_list pos:start="178:21" pos:end="178:26">(<argument pos:start="178:22" pos:end="178:25"><expr pos:start="178:22" pos:end="178:25"><name pos:start="178:22" pos:end="178:25">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="180:9" pos:end="180:14">break;</break>

    <case pos:start="182:5" pos:end="182:24">case <expr pos:start="182:10" pos:end="182:23"><name pos:start="182:10" pos:end="182:23">TARGET_NR_fork</name></expr>:</case>

        <expr_stmt pos:start="184:9" pos:end="184:63"><expr pos:start="184:9" pos:end="184:62"><name pos:start="184:9" pos:end="184:11">ret</name> <operator pos:start="184:13" pos:end="184:13">=</operator> <call pos:start="184:15" pos:end="184:62"><name pos:start="184:15" pos:end="184:23">get_errno</name><argument_list pos:start="184:24" pos:end="184:62">(<argument pos:start="184:25" pos:end="184:61"><expr pos:start="184:25" pos:end="184:61"><call pos:start="184:25" pos:end="184:61"><name pos:start="184:25" pos:end="184:31">do_fork</name><argument_list pos:start="184:32" pos:end="184:61">(<argument pos:start="184:33" pos:end="184:39"><expr pos:start="184:33" pos:end="184:39"><name pos:start="184:33" pos:end="184:39">cpu_env</name></expr></argument>, <argument pos:start="184:42" pos:end="184:48"><expr pos:start="184:42" pos:end="184:48"><name pos:start="184:42" pos:end="184:48">SIGCHLD</name></expr></argument>, <argument pos:start="184:51" pos:end="184:51"><expr pos:start="184:51" pos:end="184:51"><literal type="number" pos:start="184:51" pos:end="184:51">0</literal></expr></argument>, <argument pos:start="184:54" pos:end="184:54"><expr pos:start="184:54" pos:end="184:54"><literal type="number" pos:start="184:54" pos:end="184:54">0</literal></expr></argument>, <argument pos:start="184:57" pos:end="184:57"><expr pos:start="184:57" pos:end="184:57"><literal type="number" pos:start="184:57" pos:end="184:57">0</literal></expr></argument>, <argument pos:start="184:60" pos:end="184:60"><expr pos:start="184:60" pos:end="184:60"><literal type="number" pos:start="184:60" pos:end="184:60">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="186:9" pos:end="189:0">break;</break>

<cpp:ifdef pos:start="188:1" pos:end="188:24">#<cpp:directive pos:start="188:2" pos:end="188:6">ifdef</cpp:directive> <name pos:start="188:8" pos:end="188:24">TARGET_NR_waitpid</name></cpp:ifdef>

    <case pos:start="190:5" pos:end="190:27">case <expr pos:start="190:10" pos:end="190:26"><name pos:start="190:10" pos:end="190:26">TARGET_NR_waitpid</name></expr>:</case>

        <block pos:start="192:9" pos:end="204:9">{<block_content pos:start="194:13" pos:end="202:28">

            <decl_stmt pos:start="194:13" pos:end="194:23"><decl pos:start="194:13" pos:end="194:22"><type pos:start="194:13" pos:end="194:15"><name pos:start="194:13" pos:end="194:15">int</name></type> <name pos:start="194:17" pos:end="194:22">status</name></decl>;</decl_stmt>

            <expr_stmt pos:start="196:13" pos:end="196:58"><expr pos:start="196:13" pos:end="196:57"><name pos:start="196:13" pos:end="196:15">ret</name> <operator pos:start="196:17" pos:end="196:17">=</operator> <call pos:start="196:19" pos:end="196:57"><name pos:start="196:19" pos:end="196:27">get_errno</name><argument_list pos:start="196:28" pos:end="196:57">(<argument pos:start="196:29" pos:end="196:56"><expr pos:start="196:29" pos:end="196:56"><call pos:start="196:29" pos:end="196:56"><name pos:start="196:29" pos:end="196:35">waitpid</name><argument_list pos:start="196:36" pos:end="196:56">(<argument pos:start="196:37" pos:end="196:40"><expr pos:start="196:37" pos:end="196:40"><name pos:start="196:37" pos:end="196:40">arg1</name></expr></argument>, <argument pos:start="196:43" pos:end="196:49"><expr pos:start="196:43" pos:end="196:49"><operator pos:start="196:43" pos:end="196:43">&amp;</operator><name pos:start="196:44" pos:end="196:49">status</name></expr></argument>, <argument pos:start="196:52" pos:end="196:55"><expr pos:start="196:52" pos:end="196:55"><name pos:start="196:52" pos:end="196:55">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="198:13" pos:end="202:28"><if pos:start="198:13" pos:end="202:28">if <condition pos:start="198:16" pos:end="200:73">(<expr pos:start="198:17" pos:end="200:72"><operator pos:start="198:17" pos:end="198:17">!</operator><call pos:start="198:18" pos:end="198:30"><name pos:start="198:18" pos:end="198:25">is_error</name><argument_list pos:start="198:26" pos:end="198:30">(<argument pos:start="198:27" pos:end="198:29"><expr pos:start="198:27" pos:end="198:29"><name pos:start="198:27" pos:end="198:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="198:32" pos:end="198:33">&amp;&amp;</operator> <name pos:start="198:35" pos:end="198:38">arg2</name> <operator pos:start="198:40" pos:end="198:41">&amp;&amp;</operator> <name pos:start="198:43" pos:end="198:45">ret</name>

                <operator pos:start="200:17" pos:end="200:18">&amp;&amp;</operator> <call pos:start="200:20" pos:end="200:72"><name pos:start="200:20" pos:end="200:31">put_user_s32</name><argument_list pos:start="200:32" pos:end="200:72">(<argument pos:start="200:33" pos:end="200:65"><expr pos:start="200:33" pos:end="200:65"><call pos:start="200:33" pos:end="200:65"><name pos:start="200:33" pos:end="200:57">host_to_target_waitstatus</name><argument_list pos:start="200:58" pos:end="200:65">(<argument pos:start="200:59" pos:end="200:64"><expr pos:start="200:59" pos:end="200:64"><name pos:start="200:59" pos:end="200:64">status</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="200:68" pos:end="200:71"><expr pos:start="200:68" pos:end="200:71"><name pos:start="200:68" pos:end="200:71">arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="202:17" pos:end="202:28"><block_content pos:start="202:17" pos:end="202:28">

                <goto pos:start="202:17" pos:end="202:28">goto <name pos:start="202:22" pos:end="202:27">efault</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="206:9" pos:end="211:0">break;</break>

<cpp:endif pos:start="208:1" pos:end="208:6">#<cpp:directive pos:start="208:2" pos:end="208:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="210:1" pos:end="210:23">#<cpp:directive pos:start="210:2" pos:end="210:6">ifdef</cpp:directive> <name pos:start="210:8" pos:end="210:23">TARGET_NR_waitid</name></cpp:ifdef>

    <case pos:start="212:5" pos:end="212:26">case <expr pos:start="212:10" pos:end="212:25"><name pos:start="212:10" pos:end="212:25">TARGET_NR_waitid</name></expr>:</case>

        <block pos:start="214:9" pos:end="234:9">{<block_content pos:start="216:13" pos:end="232:13">

            <decl_stmt pos:start="216:13" pos:end="216:27"><decl pos:start="216:13" pos:end="216:26"><type pos:start="216:13" pos:end="216:21"><name pos:start="216:13" pos:end="216:21">siginfo_t</name></type> <name pos:start="216:23" pos:end="216:26">info</name></decl>;</decl_stmt>

            <expr_stmt pos:start="218:13" pos:end="218:28"><expr pos:start="218:13" pos:end="218:27"><name pos:start="218:13" pos:end="218:23"><name pos:start="218:13" pos:end="218:16">info</name><operator pos:start="218:17" pos:end="218:17">.</operator><name pos:start="218:18" pos:end="218:23">si_pid</name></name> <operator pos:start="218:25" pos:end="218:25">=</operator> <literal type="number" pos:start="218:27" pos:end="218:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="220:13" pos:end="220:61"><expr pos:start="220:13" pos:end="220:60"><name pos:start="220:13" pos:end="220:15">ret</name> <operator pos:start="220:17" pos:end="220:17">=</operator> <call pos:start="220:19" pos:end="220:60"><name pos:start="220:19" pos:end="220:27">get_errno</name><argument_list pos:start="220:28" pos:end="220:60">(<argument pos:start="220:29" pos:end="220:59"><expr pos:start="220:29" pos:end="220:59"><call pos:start="220:29" pos:end="220:59"><name pos:start="220:29" pos:end="220:34">waitid</name><argument_list pos:start="220:35" pos:end="220:59">(<argument pos:start="220:36" pos:end="220:39"><expr pos:start="220:36" pos:end="220:39"><name pos:start="220:36" pos:end="220:39">arg1</name></expr></argument>, <argument pos:start="220:42" pos:end="220:45"><expr pos:start="220:42" pos:end="220:45"><name pos:start="220:42" pos:end="220:45">arg2</name></expr></argument>, <argument pos:start="220:48" pos:end="220:52"><expr pos:start="220:48" pos:end="220:52"><operator pos:start="220:48" pos:end="220:48">&amp;</operator><name pos:start="220:49" pos:end="220:52">info</name></expr></argument>, <argument pos:start="220:55" pos:end="220:58"><expr pos:start="220:55" pos:end="220:58"><name pos:start="220:55" pos:end="220:58">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="222:13" pos:end="232:13"><if pos:start="222:13" pos:end="232:13">if <condition pos:start="222:16" pos:end="222:59">(<expr pos:start="222:17" pos:end="222:58"><operator pos:start="222:17" pos:end="222:17">!</operator><call pos:start="222:18" pos:end="222:30"><name pos:start="222:18" pos:end="222:25">is_error</name><argument_list pos:start="222:26" pos:end="222:30">(<argument pos:start="222:27" pos:end="222:29"><expr pos:start="222:27" pos:end="222:29"><name pos:start="222:27" pos:end="222:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="222:32" pos:end="222:33">&amp;&amp;</operator> <name pos:start="222:35" pos:end="222:38">arg3</name> <operator pos:start="222:40" pos:end="222:41">&amp;&amp;</operator> <name pos:start="222:43" pos:end="222:53"><name pos:start="222:43" pos:end="222:46">info</name><operator pos:start="222:47" pos:end="222:47">.</operator><name pos:start="222:48" pos:end="222:53">si_pid</name></name> <operator pos:start="222:55" pos:end="222:56">!=</operator> <literal type="number" pos:start="222:58" pos:end="222:58">0</literal></expr>)</condition> <block pos:start="222:61" pos:end="232:13">{<block_content pos:start="224:17" pos:end="230:63">

                <if_stmt pos:start="224:17" pos:end="226:32"><if pos:start="224:17" pos:end="226:32">if <condition pos:start="224:20" pos:end="224:86">(<expr pos:start="224:21" pos:end="224:85"><operator pos:start="224:21" pos:end="224:21">!</operator><operator pos:start="224:22" pos:end="224:22">(</operator><name pos:start="224:23" pos:end="224:23">p</name> <operator pos:start="224:25" pos:end="224:25">=</operator> <call pos:start="224:27" pos:end="224:84"><name pos:start="224:27" pos:end="224:35">lock_user</name><argument_list pos:start="224:36" pos:end="224:84">(<argument pos:start="224:37" pos:end="224:48"><expr pos:start="224:37" pos:end="224:48"><name pos:start="224:37" pos:end="224:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="224:51" pos:end="224:54"><expr pos:start="224:51" pos:end="224:54"><name pos:start="224:51" pos:end="224:54">arg3</name></expr></argument>, <argument pos:start="224:57" pos:end="224:80"><expr pos:start="224:57" pos:end="224:80"><sizeof pos:start="224:57" pos:end="224:80">sizeof<argument_list pos:start="224:63" pos:end="224:80">(<argument pos:start="224:64" pos:end="224:79"><expr pos:start="224:64" pos:end="224:79"><name pos:start="224:64" pos:end="224:79">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="224:83" pos:end="224:83"><expr pos:start="224:83" pos:end="224:83"><literal type="number" pos:start="224:83" pos:end="224:83">0</literal></expr></argument>)</argument_list></call><operator pos:start="224:85" pos:end="224:85">)</operator></expr>)</condition><block type="pseudo" pos:start="226:21" pos:end="226:32"><block_content pos:start="226:21" pos:end="226:32">

                    <goto pos:start="226:21" pos:end="226:32">goto <name pos:start="226:26" pos:end="226:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="228:17" pos:end="228:49"><expr pos:start="228:17" pos:end="228:48"><call pos:start="228:17" pos:end="228:48"><name pos:start="228:17" pos:end="228:38">host_to_target_siginfo</name><argument_list pos:start="228:39" pos:end="228:48">(<argument pos:start="228:40" pos:end="228:40"><expr pos:start="228:40" pos:end="228:40"><name pos:start="228:40" pos:end="228:40">p</name></expr></argument>, <argument pos:start="228:43" pos:end="228:47"><expr pos:start="228:43" pos:end="228:47"><operator pos:start="228:43" pos:end="228:43">&amp;</operator><name pos:start="228:44" pos:end="228:47">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="230:17" pos:end="230:63"><expr pos:start="230:17" pos:end="230:62"><call pos:start="230:17" pos:end="230:62"><name pos:start="230:17" pos:end="230:27">unlock_user</name><argument_list pos:start="230:28" pos:end="230:62">(<argument pos:start="230:29" pos:end="230:29"><expr pos:start="230:29" pos:end="230:29"><name pos:start="230:29" pos:end="230:29">p</name></expr></argument>, <argument pos:start="230:32" pos:end="230:35"><expr pos:start="230:32" pos:end="230:35"><name pos:start="230:32" pos:end="230:35">arg3</name></expr></argument>, <argument pos:start="230:38" pos:end="230:61"><expr pos:start="230:38" pos:end="230:61"><sizeof pos:start="230:38" pos:end="230:61">sizeof<argument_list pos:start="230:44" pos:end="230:61">(<argument pos:start="230:45" pos:end="230:60"><expr pos:start="230:45" pos:end="230:60"><name pos:start="230:45" pos:end="230:60">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="236:9" pos:end="241:0">break;</break>

<cpp:endif pos:start="238:1" pos:end="238:6">#<cpp:directive pos:start="238:2" pos:end="238:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="240:1" pos:end="240:22">#<cpp:directive pos:start="240:2" pos:end="240:6">ifdef</cpp:directive> <name pos:start="240:8" pos:end="240:22">TARGET_NR_creat</name></cpp:ifdef> <comment type="block" pos:start="240:24" pos:end="240:41">/* not on alpha */</comment>

    <case pos:start="242:5" pos:end="242:25">case <expr pos:start="242:10" pos:end="242:24"><name pos:start="242:10" pos:end="242:24">TARGET_NR_creat</name></expr>:</case>

        <if_stmt pos:start="244:9" pos:end="246:24"><if pos:start="244:9" pos:end="246:24">if <condition pos:start="244:12" pos:end="244:42">(<expr pos:start="244:13" pos:end="244:41"><operator pos:start="244:13" pos:end="244:13">!</operator><operator pos:start="244:14" pos:end="244:14">(</operator><name pos:start="244:15" pos:end="244:15">p</name> <operator pos:start="244:17" pos:end="244:17">=</operator> <call pos:start="244:19" pos:end="244:40"><name pos:start="244:19" pos:end="244:34">lock_user_string</name><argument_list pos:start="244:35" pos:end="244:40">(<argument pos:start="244:36" pos:end="244:39"><expr pos:start="244:36" pos:end="244:39"><name pos:start="244:36" pos:end="244:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="244:41" pos:end="244:41">)</operator></expr>)</condition><block type="pseudo" pos:start="246:13" pos:end="246:24"><block_content pos:start="246:13" pos:end="246:24">

            <goto pos:start="246:13" pos:end="246:24">goto <name pos:start="246:18" pos:end="246:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="248:9" pos:end="248:40"><expr pos:start="248:9" pos:end="248:39"><name pos:start="248:9" pos:end="248:11">ret</name> <operator pos:start="248:13" pos:end="248:13">=</operator> <call pos:start="248:15" pos:end="248:39"><name pos:start="248:15" pos:end="248:23">get_errno</name><argument_list pos:start="248:24" pos:end="248:39">(<argument pos:start="248:25" pos:end="248:38"><expr pos:start="248:25" pos:end="248:38"><call pos:start="248:25" pos:end="248:38"><name pos:start="248:25" pos:end="248:29">creat</name><argument_list pos:start="248:30" pos:end="248:38">(<argument pos:start="248:31" pos:end="248:31"><expr pos:start="248:31" pos:end="248:31"><name pos:start="248:31" pos:end="248:31">p</name></expr></argument>, <argument pos:start="248:34" pos:end="248:37"><expr pos:start="248:34" pos:end="248:37"><name pos:start="248:34" pos:end="248:37">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="250:9" pos:end="250:32"><expr pos:start="250:9" pos:end="250:31"><call pos:start="250:9" pos:end="250:31"><name pos:start="250:9" pos:end="250:19">unlock_user</name><argument_list pos:start="250:20" pos:end="250:31">(<argument pos:start="250:21" pos:end="250:21"><expr pos:start="250:21" pos:end="250:21"><name pos:start="250:21" pos:end="250:21">p</name></expr></argument>, <argument pos:start="250:24" pos:end="250:27"><expr pos:start="250:24" pos:end="250:27"><name pos:start="250:24" pos:end="250:27">arg1</name></expr></argument>, <argument pos:start="250:30" pos:end="250:30"><expr pos:start="250:30" pos:end="250:30"><literal type="number" pos:start="250:30" pos:end="250:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="252:9" pos:end="255:0">break;</break>

<cpp:endif pos:start="254:1" pos:end="254:6">#<cpp:directive pos:start="254:2" pos:end="254:6">endif</cpp:directive></cpp:endif>

    <case pos:start="256:5" pos:end="256:24">case <expr pos:start="256:10" pos:end="256:23"><name pos:start="256:10" pos:end="256:23">TARGET_NR_link</name></expr>:</case>

        <block pos:start="258:9" pos:end="278:9">{<block_content pos:start="260:13" pos:end="276:36">

            <decl_stmt pos:start="260:13" pos:end="260:22"><decl pos:start="260:13" pos:end="260:21"><type pos:start="260:13" pos:end="260:18"><name pos:start="260:13" pos:end="260:16">void</name> <modifier pos:start="260:18" pos:end="260:18">*</modifier></type> <name pos:start="260:20" pos:end="260:21">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="262:13" pos:end="262:39"><expr pos:start="262:13" pos:end="262:38"><name pos:start="262:13" pos:end="262:13">p</name> <operator pos:start="262:15" pos:end="262:15">=</operator> <call pos:start="262:17" pos:end="262:38"><name pos:start="262:17" pos:end="262:32">lock_user_string</name><argument_list pos:start="262:33" pos:end="262:38">(<argument pos:start="262:34" pos:end="262:37"><expr pos:start="262:34" pos:end="262:37"><name pos:start="262:34" pos:end="262:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="264:13" pos:end="264:40"><expr pos:start="264:13" pos:end="264:39"><name pos:start="264:13" pos:end="264:14">p2</name> <operator pos:start="264:16" pos:end="264:16">=</operator> <call pos:start="264:18" pos:end="264:39"><name pos:start="264:18" pos:end="264:33">lock_user_string</name><argument_list pos:start="264:34" pos:end="264:39">(<argument pos:start="264:35" pos:end="264:38"><expr pos:start="264:35" pos:end="264:38"><name pos:start="264:35" pos:end="264:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="266:13" pos:end="272:45"><if pos:start="266:13" pos:end="268:37">if <condition pos:start="266:16" pos:end="266:26">(<expr pos:start="266:17" pos:end="266:25"><operator pos:start="266:17" pos:end="266:17">!</operator><name pos:start="266:18" pos:end="266:18">p</name> <operator pos:start="266:20" pos:end="266:21">||</operator> <operator pos:start="266:23" pos:end="266:23">!</operator><name pos:start="266:24" pos:end="266:25">p2</name></expr>)</condition><block type="pseudo" pos:start="268:17" pos:end="268:37"><block_content pos:start="268:17" pos:end="268:37">

                <expr_stmt pos:start="268:17" pos:end="268:37"><expr pos:start="268:17" pos:end="268:36"><name pos:start="268:17" pos:end="268:19">ret</name> <operator pos:start="268:21" pos:end="268:21">=</operator> <operator pos:start="268:23" pos:end="268:23">-</operator><name pos:start="268:24" pos:end="268:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="270:13" pos:end="272:45">else<block type="pseudo" pos:start="272:17" pos:end="272:45"><block_content pos:start="272:17" pos:end="272:45">

                <expr_stmt pos:start="272:17" pos:end="272:45"><expr pos:start="272:17" pos:end="272:44"><name pos:start="272:17" pos:end="272:19">ret</name> <operator pos:start="272:21" pos:end="272:21">=</operator> <call pos:start="272:23" pos:end="272:44"><name pos:start="272:23" pos:end="272:31">get_errno</name><argument_list pos:start="272:32" pos:end="272:44">(<argument pos:start="272:33" pos:end="272:43"><expr pos:start="272:33" pos:end="272:43"><call pos:start="272:33" pos:end="272:43"><name pos:start="272:33" pos:end="272:36">link</name><argument_list pos:start="272:37" pos:end="272:43">(<argument pos:start="272:38" pos:end="272:38"><expr pos:start="272:38" pos:end="272:38"><name pos:start="272:38" pos:end="272:38">p</name></expr></argument>, <argument pos:start="272:41" pos:end="272:42"><expr pos:start="272:41" pos:end="272:42"><name pos:start="272:41" pos:end="272:42">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="274:13" pos:end="274:37"><expr pos:start="274:13" pos:end="274:36"><call pos:start="274:13" pos:end="274:36"><name pos:start="274:13" pos:end="274:23">unlock_user</name><argument_list pos:start="274:24" pos:end="274:36">(<argument pos:start="274:25" pos:end="274:26"><expr pos:start="274:25" pos:end="274:26"><name pos:start="274:25" pos:end="274:26">p2</name></expr></argument>, <argument pos:start="274:29" pos:end="274:32"><expr pos:start="274:29" pos:end="274:32"><name pos:start="274:29" pos:end="274:32">arg2</name></expr></argument>, <argument pos:start="274:35" pos:end="274:35"><expr pos:start="274:35" pos:end="274:35"><literal type="number" pos:start="274:35" pos:end="274:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="276:13" pos:end="276:36"><expr pos:start="276:13" pos:end="276:35"><call pos:start="276:13" pos:end="276:35"><name pos:start="276:13" pos:end="276:23">unlock_user</name><argument_list pos:start="276:24" pos:end="276:35">(<argument pos:start="276:25" pos:end="276:25"><expr pos:start="276:25" pos:end="276:25"><name pos:start="276:25" pos:end="276:25">p</name></expr></argument>, <argument pos:start="276:28" pos:end="276:31"><expr pos:start="276:28" pos:end="276:31"><name pos:start="276:28" pos:end="276:31">arg1</name></expr></argument>, <argument pos:start="276:34" pos:end="276:34"><expr pos:start="276:34" pos:end="276:34"><literal type="number" pos:start="276:34" pos:end="276:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="280:9" pos:end="283:0">break;</break>

<cpp:if pos:start="282:1" pos:end="282:29">#<cpp:directive pos:start="282:2" pos:end="282:3">if</cpp:directive> <expr pos:start="282:5" pos:end="282:29"><call pos:start="282:5" pos:end="282:29"><name pos:start="282:5" pos:end="282:11">defined</name><argument_list pos:start="282:12" pos:end="282:29">(<argument pos:start="282:13" pos:end="282:28"><expr pos:start="282:13" pos:end="282:28"><name pos:start="282:13" pos:end="282:28">TARGET_NR_linkat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="284:5" pos:end="284:26">case <expr pos:start="284:10" pos:end="284:25"><name pos:start="284:10" pos:end="284:25">TARGET_NR_linkat</name></expr>:</case>

        <block pos:start="286:9" pos:end="310:9">{<block_content pos:start="288:13" pos:end="308:37">

            <decl_stmt pos:start="288:13" pos:end="288:29"><decl pos:start="288:13" pos:end="288:28"><type pos:start="288:13" pos:end="288:18"><name pos:start="288:13" pos:end="288:16">void</name> <modifier pos:start="288:18" pos:end="288:18">*</modifier></type> <name pos:start="288:20" pos:end="288:21">p2</name> <init pos:start="288:23" pos:end="288:28">= <expr pos:start="288:25" pos:end="288:28"><name pos:start="288:25" pos:end="288:28">NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="290:13" pos:end="292:28"><if pos:start="290:13" pos:end="292:28">if <condition pos:start="290:16" pos:end="290:31">(<expr pos:start="290:17" pos:end="290:30"><operator pos:start="290:17" pos:end="290:17">!</operator><name pos:start="290:18" pos:end="290:21">arg2</name> <operator pos:start="290:23" pos:end="290:24">||</operator> <operator pos:start="290:26" pos:end="290:26">!</operator><name pos:start="290:27" pos:end="290:30">arg4</name></expr>)</condition><block type="pseudo" pos:start="292:17" pos:end="292:28"><block_content pos:start="292:17" pos:end="292:28">

                <goto pos:start="292:17" pos:end="292:28">goto <name pos:start="292:22" pos:end="292:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="294:13" pos:end="294:40"><expr pos:start="294:13" pos:end="294:39"><name pos:start="294:13" pos:end="294:13">p</name>  <operator pos:start="294:16" pos:end="294:16">=</operator> <call pos:start="294:18" pos:end="294:39"><name pos:start="294:18" pos:end="294:33">lock_user_string</name><argument_list pos:start="294:34" pos:end="294:39">(<argument pos:start="294:35" pos:end="294:38"><expr pos:start="294:35" pos:end="294:38"><name pos:start="294:35" pos:end="294:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="296:13" pos:end="296:40"><expr pos:start="296:13" pos:end="296:39"><name pos:start="296:13" pos:end="296:14">p2</name> <operator pos:start="296:16" pos:end="296:16">=</operator> <call pos:start="296:18" pos:end="296:39"><name pos:start="296:18" pos:end="296:33">lock_user_string</name><argument_list pos:start="296:34" pos:end="296:39">(<argument pos:start="296:35" pos:end="296:38"><expr pos:start="296:35" pos:end="296:38"><name pos:start="296:35" pos:end="296:38">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="298:13" pos:end="304:65"><if pos:start="298:13" pos:end="300:37">if <condition pos:start="298:16" pos:end="298:26">(<expr pos:start="298:17" pos:end="298:25"><operator pos:start="298:17" pos:end="298:17">!</operator><name pos:start="298:18" pos:end="298:18">p</name> <operator pos:start="298:20" pos:end="298:21">||</operator> <operator pos:start="298:23" pos:end="298:23">!</operator><name pos:start="298:24" pos:end="298:25">p2</name></expr>)</condition><block type="pseudo" pos:start="300:17" pos:end="300:37"><block_content pos:start="300:17" pos:end="300:37">

                <expr_stmt pos:start="300:17" pos:end="300:37"><expr pos:start="300:17" pos:end="300:36"><name pos:start="300:17" pos:end="300:19">ret</name> <operator pos:start="300:21" pos:end="300:21">=</operator> <operator pos:start="300:23" pos:end="300:23">-</operator><name pos:start="300:24" pos:end="300:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="302:13" pos:end="304:65">else<block type="pseudo" pos:start="304:17" pos:end="304:65"><block_content pos:start="304:17" pos:end="304:65">

                <expr_stmt pos:start="304:17" pos:end="304:65"><expr pos:start="304:17" pos:end="304:64"><name pos:start="304:17" pos:end="304:19">ret</name> <operator pos:start="304:21" pos:end="304:21">=</operator> <call pos:start="304:23" pos:end="304:64"><name pos:start="304:23" pos:end="304:31">get_errno</name><argument_list pos:start="304:32" pos:end="304:64">(<argument pos:start="304:33" pos:end="304:63"><expr pos:start="304:33" pos:end="304:63"><call pos:start="304:33" pos:end="304:63"><name pos:start="304:33" pos:end="304:38">linkat</name><argument_list pos:start="304:39" pos:end="304:63">(<argument pos:start="304:40" pos:end="304:43"><expr pos:start="304:40" pos:end="304:43"><name pos:start="304:40" pos:end="304:43">arg1</name></expr></argument>, <argument pos:start="304:46" pos:end="304:46"><expr pos:start="304:46" pos:end="304:46"><name pos:start="304:46" pos:end="304:46">p</name></expr></argument>, <argument pos:start="304:49" pos:end="304:52"><expr pos:start="304:49" pos:end="304:52"><name pos:start="304:49" pos:end="304:52">arg3</name></expr></argument>, <argument pos:start="304:55" pos:end="304:56"><expr pos:start="304:55" pos:end="304:56"><name pos:start="304:55" pos:end="304:56">p2</name></expr></argument>, <argument pos:start="304:59" pos:end="304:62"><expr pos:start="304:59" pos:end="304:62"><name pos:start="304:59" pos:end="304:62">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="306:13" pos:end="306:36"><expr pos:start="306:13" pos:end="306:35"><call pos:start="306:13" pos:end="306:35"><name pos:start="306:13" pos:end="306:23">unlock_user</name><argument_list pos:start="306:24" pos:end="306:35">(<argument pos:start="306:25" pos:end="306:25"><expr pos:start="306:25" pos:end="306:25"><name pos:start="306:25" pos:end="306:25">p</name></expr></argument>, <argument pos:start="306:28" pos:end="306:31"><expr pos:start="306:28" pos:end="306:31"><name pos:start="306:28" pos:end="306:31">arg2</name></expr></argument>, <argument pos:start="306:34" pos:end="306:34"><expr pos:start="306:34" pos:end="306:34"><literal type="number" pos:start="306:34" pos:end="306:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="308:13" pos:end="308:37"><expr pos:start="308:13" pos:end="308:36"><call pos:start="308:13" pos:end="308:36"><name pos:start="308:13" pos:end="308:23">unlock_user</name><argument_list pos:start="308:24" pos:end="308:36">(<argument pos:start="308:25" pos:end="308:26"><expr pos:start="308:25" pos:end="308:26"><name pos:start="308:25" pos:end="308:26">p2</name></expr></argument>, <argument pos:start="308:29" pos:end="308:32"><expr pos:start="308:29" pos:end="308:32"><name pos:start="308:29" pos:end="308:32">arg4</name></expr></argument>, <argument pos:start="308:35" pos:end="308:35"><expr pos:start="308:35" pos:end="308:35"><literal type="number" pos:start="308:35" pos:end="308:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="312:9" pos:end="315:0">break;</break>

<cpp:endif pos:start="314:1" pos:end="314:6">#<cpp:directive pos:start="314:2" pos:end="314:6">endif</cpp:directive></cpp:endif>

    <case pos:start="316:5" pos:end="316:26">case <expr pos:start="316:10" pos:end="316:25"><name pos:start="316:10" pos:end="316:25">TARGET_NR_unlink</name></expr>:</case>

        <if_stmt pos:start="318:9" pos:end="320:24"><if pos:start="318:9" pos:end="320:24">if <condition pos:start="318:12" pos:end="318:42">(<expr pos:start="318:13" pos:end="318:41"><operator pos:start="318:13" pos:end="318:13">!</operator><operator pos:start="318:14" pos:end="318:14">(</operator><name pos:start="318:15" pos:end="318:15">p</name> <operator pos:start="318:17" pos:end="318:17">=</operator> <call pos:start="318:19" pos:end="318:40"><name pos:start="318:19" pos:end="318:34">lock_user_string</name><argument_list pos:start="318:35" pos:end="318:40">(<argument pos:start="318:36" pos:end="318:39"><expr pos:start="318:36" pos:end="318:39"><name pos:start="318:36" pos:end="318:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="318:41" pos:end="318:41">)</operator></expr>)</condition><block type="pseudo" pos:start="320:13" pos:end="320:24"><block_content pos:start="320:13" pos:end="320:24">

            <goto pos:start="320:13" pos:end="320:24">goto <name pos:start="320:18" pos:end="320:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="322:9" pos:end="322:35"><expr pos:start="322:9" pos:end="322:34"><name pos:start="322:9" pos:end="322:11">ret</name> <operator pos:start="322:13" pos:end="322:13">=</operator> <call pos:start="322:15" pos:end="322:34"><name pos:start="322:15" pos:end="322:23">get_errno</name><argument_list pos:start="322:24" pos:end="322:34">(<argument pos:start="322:25" pos:end="322:33"><expr pos:start="322:25" pos:end="322:33"><call pos:start="322:25" pos:end="322:33"><name pos:start="322:25" pos:end="322:30">unlink</name><argument_list pos:start="322:31" pos:end="322:33">(<argument pos:start="322:32" pos:end="322:32"><expr pos:start="322:32" pos:end="322:32"><name pos:start="322:32" pos:end="322:32">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="324:9" pos:end="324:32"><expr pos:start="324:9" pos:end="324:31"><call pos:start="324:9" pos:end="324:31"><name pos:start="324:9" pos:end="324:19">unlock_user</name><argument_list pos:start="324:20" pos:end="324:31">(<argument pos:start="324:21" pos:end="324:21"><expr pos:start="324:21" pos:end="324:21"><name pos:start="324:21" pos:end="324:21">p</name></expr></argument>, <argument pos:start="324:24" pos:end="324:27"><expr pos:start="324:24" pos:end="324:27"><name pos:start="324:24" pos:end="324:27">arg1</name></expr></argument>, <argument pos:start="324:30" pos:end="324:30"><expr pos:start="324:30" pos:end="324:30"><literal type="number" pos:start="324:30" pos:end="324:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="326:9" pos:end="329:0">break;</break>

<cpp:if pos:start="328:1" pos:end="328:31">#<cpp:directive pos:start="328:2" pos:end="328:3">if</cpp:directive> <expr pos:start="328:5" pos:end="328:31"><call pos:start="328:5" pos:end="328:31"><name pos:start="328:5" pos:end="328:11">defined</name><argument_list pos:start="328:12" pos:end="328:31">(<argument pos:start="328:13" pos:end="328:30"><expr pos:start="328:13" pos:end="328:30"><name pos:start="328:13" pos:end="328:30">TARGET_NR_unlinkat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="330:5" pos:end="330:28">case <expr pos:start="330:10" pos:end="330:27"><name pos:start="330:10" pos:end="330:27">TARGET_NR_unlinkat</name></expr>:</case>

        <if_stmt pos:start="332:9" pos:end="334:24"><if pos:start="332:9" pos:end="334:24">if <condition pos:start="332:12" pos:end="332:42">(<expr pos:start="332:13" pos:end="332:41"><operator pos:start="332:13" pos:end="332:13">!</operator><operator pos:start="332:14" pos:end="332:14">(</operator><name pos:start="332:15" pos:end="332:15">p</name> <operator pos:start="332:17" pos:end="332:17">=</operator> <call pos:start="332:19" pos:end="332:40"><name pos:start="332:19" pos:end="332:34">lock_user_string</name><argument_list pos:start="332:35" pos:end="332:40">(<argument pos:start="332:36" pos:end="332:39"><expr pos:start="332:36" pos:end="332:39"><name pos:start="332:36" pos:end="332:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="332:41" pos:end="332:41">)</operator></expr>)</condition><block type="pseudo" pos:start="334:13" pos:end="334:24"><block_content pos:start="334:13" pos:end="334:24">

            <goto pos:start="334:13" pos:end="334:24">goto <name pos:start="334:18" pos:end="334:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="336:9" pos:end="336:49"><expr pos:start="336:9" pos:end="336:48"><name pos:start="336:9" pos:end="336:11">ret</name> <operator pos:start="336:13" pos:end="336:13">=</operator> <call pos:start="336:15" pos:end="336:48"><name pos:start="336:15" pos:end="336:23">get_errno</name><argument_list pos:start="336:24" pos:end="336:48">(<argument pos:start="336:25" pos:end="336:47"><expr pos:start="336:25" pos:end="336:47"><call pos:start="336:25" pos:end="336:47"><name pos:start="336:25" pos:end="336:32">unlinkat</name><argument_list pos:start="336:33" pos:end="336:47">(<argument pos:start="336:34" pos:end="336:37"><expr pos:start="336:34" pos:end="336:37"><name pos:start="336:34" pos:end="336:37">arg1</name></expr></argument>, <argument pos:start="336:40" pos:end="336:40"><expr pos:start="336:40" pos:end="336:40"><name pos:start="336:40" pos:end="336:40">p</name></expr></argument>, <argument pos:start="336:43" pos:end="336:46"><expr pos:start="336:43" pos:end="336:46"><name pos:start="336:43" pos:end="336:46">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="338:9" pos:end="338:32"><expr pos:start="338:9" pos:end="338:31"><call pos:start="338:9" pos:end="338:31"><name pos:start="338:9" pos:end="338:19">unlock_user</name><argument_list pos:start="338:20" pos:end="338:31">(<argument pos:start="338:21" pos:end="338:21"><expr pos:start="338:21" pos:end="338:21"><name pos:start="338:21" pos:end="338:21">p</name></expr></argument>, <argument pos:start="338:24" pos:end="338:27"><expr pos:start="338:24" pos:end="338:27"><name pos:start="338:24" pos:end="338:27">arg2</name></expr></argument>, <argument pos:start="338:30" pos:end="338:30"><expr pos:start="338:30" pos:end="338:30"><literal type="number" pos:start="338:30" pos:end="338:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="340:9" pos:end="343:0">break;</break>

<cpp:endif pos:start="342:1" pos:end="342:6">#<cpp:directive pos:start="342:2" pos:end="342:6">endif</cpp:directive></cpp:endif>

    <case pos:start="344:5" pos:end="344:26">case <expr pos:start="344:10" pos:end="344:25"><name pos:start="344:10" pos:end="344:25">TARGET_NR_execve</name></expr>:</case>

        <block pos:start="346:9" pos:end="520:9">{<block_content pos:start="348:13" pos:end="518:13">

            <decl_stmt pos:start="348:13" pos:end="348:32"><decl pos:start="348:13" pos:end="348:23"><type pos:start="348:13" pos:end="348:19"><name pos:start="348:13" pos:end="348:16">char</name> <modifier pos:start="348:18" pos:end="348:18">*</modifier><modifier pos:start="348:19" pos:end="348:19">*</modifier></type><name pos:start="348:20" pos:end="348:23">argp</name></decl>, <decl pos:start="348:26" pos:end="348:31"><type ref="prev" pos:start="348:13" pos:end="348:19"><modifier pos:start="348:26" pos:end="348:26">*</modifier><modifier pos:start="348:27" pos:end="348:27">*</modifier></type><name pos:start="348:28" pos:end="348:31">envp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="350:13" pos:end="350:27"><decl pos:start="350:13" pos:end="350:20"><type pos:start="350:13" pos:end="350:15"><name pos:start="350:13" pos:end="350:15">int</name></type> <name pos:start="350:17" pos:end="350:20">argc</name></decl>, <decl pos:start="350:23" pos:end="350:26"><type ref="prev" pos:start="350:13" pos:end="350:15"/><name pos:start="350:23" pos:end="350:26">envc</name></decl>;</decl_stmt>

            <decl_stmt pos:start="352:13" pos:end="352:25"><decl pos:start="352:13" pos:end="352:24"><type pos:start="352:13" pos:end="352:21"><name pos:start="352:13" pos:end="352:21">abi_ulong</name></type> <name pos:start="352:23" pos:end="352:24">gp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="354:13" pos:end="354:33"><decl pos:start="354:13" pos:end="354:32"><type pos:start="354:13" pos:end="354:21"><name pos:start="354:13" pos:end="354:21">abi_ulong</name></type> <name pos:start="354:23" pos:end="354:32">guest_argp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="356:13" pos:end="356:33"><decl pos:start="356:13" pos:end="356:32"><type pos:start="356:13" pos:end="356:21"><name pos:start="356:13" pos:end="356:21">abi_ulong</name></type> <name pos:start="356:23" pos:end="356:32">guest_envp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="358:13" pos:end="358:27"><decl pos:start="358:13" pos:end="358:26"><type pos:start="358:13" pos:end="358:21"><name pos:start="358:13" pos:end="358:21">abi_ulong</name></type> <name pos:start="358:23" pos:end="358:26">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="360:13" pos:end="360:21"><decl pos:start="360:13" pos:end="360:20"><type pos:start="360:13" pos:end="360:19"><name pos:start="360:13" pos:end="360:16">char</name> <modifier pos:start="360:18" pos:end="360:18">*</modifier><modifier pos:start="360:19" pos:end="360:19">*</modifier></type><name pos:start="360:20" pos:end="360:20">q</name></decl>;</decl_stmt>

            <decl_stmt pos:start="362:13" pos:end="362:31"><decl pos:start="362:13" pos:end="362:30"><type pos:start="362:13" pos:end="362:15"><name pos:start="362:13" pos:end="362:15">int</name></type> <name pos:start="362:17" pos:end="362:26">total_size</name> <init pos:start="362:28" pos:end="362:30">= <expr pos:start="362:30" pos:end="362:30"><literal type="number" pos:start="362:30" pos:end="362:30">0</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="366:13" pos:end="366:21"><expr pos:start="366:13" pos:end="366:20"><name pos:start="366:13" pos:end="366:16">argc</name> <operator pos:start="366:18" pos:end="366:18">=</operator> <literal type="number" pos:start="366:20" pos:end="366:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="368:13" pos:end="368:30"><expr pos:start="368:13" pos:end="368:29"><name pos:start="368:13" pos:end="368:22">guest_argp</name> <operator pos:start="368:24" pos:end="368:24">=</operator> <name pos:start="368:26" pos:end="368:29">arg2</name></expr>;</expr_stmt>

            <for pos:start="370:13" pos:end="382:13">for <control pos:start="370:17" pos:end="370:62">(<init pos:start="370:18" pos:end="370:33"><expr pos:start="370:18" pos:end="370:32"><name pos:start="370:18" pos:end="370:19">gp</name> <operator pos:start="370:21" pos:end="370:21">=</operator> <name pos:start="370:23" pos:end="370:32">guest_argp</name></expr>;</init> <condition pos:start="370:35" pos:end="370:37"><expr pos:start="370:35" pos:end="370:36"><name pos:start="370:35" pos:end="370:36">gp</name></expr>;</condition> <incr pos:start="370:39" pos:end="370:61"><expr pos:start="370:39" pos:end="370:61"><name pos:start="370:39" pos:end="370:40">gp</name> <operator pos:start="370:42" pos:end="370:43">+=</operator> <sizeof pos:start="370:45" pos:end="370:61">sizeof<argument_list pos:start="370:51" pos:end="370:61">(<argument pos:start="370:52" pos:end="370:60"><expr pos:start="370:52" pos:end="370:60"><name pos:start="370:52" pos:end="370:60">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block pos:start="370:64" pos:end="382:13">{<block_content pos:start="372:17" pos:end="380:23">

                <if_stmt pos:start="372:17" pos:end="374:32"><if pos:start="372:17" pos:end="374:32">if <condition pos:start="372:20" pos:end="372:43">(<expr pos:start="372:21" pos:end="372:42"><call pos:start="372:21" pos:end="372:42"><name pos:start="372:21" pos:end="372:32">get_user_ual</name><argument_list pos:start="372:33" pos:end="372:42">(<argument pos:start="372:34" pos:end="372:37"><expr pos:start="372:34" pos:end="372:37"><name pos:start="372:34" pos:end="372:37">addr</name></expr></argument>, <argument pos:start="372:40" pos:end="372:41"><expr pos:start="372:40" pos:end="372:41"><name pos:start="372:40" pos:end="372:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="374:21" pos:end="374:32"><block_content pos:start="374:21" pos:end="374:32">

                    <goto pos:start="374:21" pos:end="374:32">goto <name pos:start="374:26" pos:end="374:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="376:17" pos:end="378:26"><if pos:start="376:17" pos:end="378:26">if <condition pos:start="376:20" pos:end="376:26">(<expr pos:start="376:21" pos:end="376:25"><operator pos:start="376:21" pos:end="376:21">!</operator><name pos:start="376:22" pos:end="376:25">addr</name></expr>)</condition><block type="pseudo" pos:start="378:21" pos:end="378:26"><block_content pos:start="378:21" pos:end="378:26">

                    <break pos:start="378:21" pos:end="378:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="380:17" pos:end="380:23"><expr pos:start="380:17" pos:end="380:22"><name pos:start="380:17" pos:end="380:20">argc</name><operator pos:start="380:21" pos:end="380:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="384:13" pos:end="384:21"><expr pos:start="384:13" pos:end="384:20"><name pos:start="384:13" pos:end="384:16">envc</name> <operator pos:start="384:18" pos:end="384:18">=</operator> <literal type="number" pos:start="384:20" pos:end="384:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="386:13" pos:end="386:30"><expr pos:start="386:13" pos:end="386:29"><name pos:start="386:13" pos:end="386:22">guest_envp</name> <operator pos:start="386:24" pos:end="386:24">=</operator> <name pos:start="386:26" pos:end="386:29">arg3</name></expr>;</expr_stmt>

            <for pos:start="388:13" pos:end="400:13">for <control pos:start="388:17" pos:end="388:62">(<init pos:start="388:18" pos:end="388:33"><expr pos:start="388:18" pos:end="388:32"><name pos:start="388:18" pos:end="388:19">gp</name> <operator pos:start="388:21" pos:end="388:21">=</operator> <name pos:start="388:23" pos:end="388:32">guest_envp</name></expr>;</init> <condition pos:start="388:35" pos:end="388:37"><expr pos:start="388:35" pos:end="388:36"><name pos:start="388:35" pos:end="388:36">gp</name></expr>;</condition> <incr pos:start="388:39" pos:end="388:61"><expr pos:start="388:39" pos:end="388:61"><name pos:start="388:39" pos:end="388:40">gp</name> <operator pos:start="388:42" pos:end="388:43">+=</operator> <sizeof pos:start="388:45" pos:end="388:61">sizeof<argument_list pos:start="388:51" pos:end="388:61">(<argument pos:start="388:52" pos:end="388:60"><expr pos:start="388:52" pos:end="388:60"><name pos:start="388:52" pos:end="388:60">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block pos:start="388:64" pos:end="400:13">{<block_content pos:start="390:17" pos:end="398:23">

                <if_stmt pos:start="390:17" pos:end="392:32"><if pos:start="390:17" pos:end="392:32">if <condition pos:start="390:20" pos:end="390:43">(<expr pos:start="390:21" pos:end="390:42"><call pos:start="390:21" pos:end="390:42"><name pos:start="390:21" pos:end="390:32">get_user_ual</name><argument_list pos:start="390:33" pos:end="390:42">(<argument pos:start="390:34" pos:end="390:37"><expr pos:start="390:34" pos:end="390:37"><name pos:start="390:34" pos:end="390:37">addr</name></expr></argument>, <argument pos:start="390:40" pos:end="390:41"><expr pos:start="390:40" pos:end="390:41"><name pos:start="390:40" pos:end="390:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="392:21" pos:end="392:32"><block_content pos:start="392:21" pos:end="392:32">

                    <goto pos:start="392:21" pos:end="392:32">goto <name pos:start="392:26" pos:end="392:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="394:17" pos:end="396:26"><if pos:start="394:17" pos:end="396:26">if <condition pos:start="394:20" pos:end="394:26">(<expr pos:start="394:21" pos:end="394:25"><operator pos:start="394:21" pos:end="394:21">!</operator><name pos:start="394:22" pos:end="394:25">addr</name></expr>)</condition><block type="pseudo" pos:start="396:21" pos:end="396:26"><block_content pos:start="396:21" pos:end="396:26">

                    <break pos:start="396:21" pos:end="396:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="398:17" pos:end="398:23"><expr pos:start="398:17" pos:end="398:22"><name pos:start="398:17" pos:end="398:20">envc</name><operator pos:start="398:21" pos:end="398:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="404:13" pos:end="404:55"><expr pos:start="404:13" pos:end="404:54"><name pos:start="404:13" pos:end="404:16">argp</name> <operator pos:start="404:18" pos:end="404:18">=</operator> <call pos:start="404:20" pos:end="404:54"><name pos:start="404:20" pos:end="404:25">alloca</name><argument_list pos:start="404:26" pos:end="404:54">(<argument pos:start="404:27" pos:end="404:53"><expr pos:start="404:27" pos:end="404:53"><operator pos:start="404:27" pos:end="404:27">(</operator><name pos:start="404:28" pos:end="404:31">argc</name> <operator pos:start="404:33" pos:end="404:33">+</operator> <literal type="number" pos:start="404:35" pos:end="404:35">1</literal><operator pos:start="404:36" pos:end="404:36">)</operator> <operator pos:start="404:38" pos:end="404:38">*</operator> <sizeof pos:start="404:40" pos:end="404:53">sizeof<argument_list pos:start="404:46" pos:end="404:53">(<argument pos:start="404:47" pos:end="404:52"><expr pos:start="404:47" pos:end="404:52"><name pos:start="404:47" pos:end="404:50">void</name> <operator pos:start="404:52" pos:end="404:52">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="406:13" pos:end="406:55"><expr pos:start="406:13" pos:end="406:54"><name pos:start="406:13" pos:end="406:16">envp</name> <operator pos:start="406:18" pos:end="406:18">=</operator> <call pos:start="406:20" pos:end="406:54"><name pos:start="406:20" pos:end="406:25">alloca</name><argument_list pos:start="406:26" pos:end="406:54">(<argument pos:start="406:27" pos:end="406:53"><expr pos:start="406:27" pos:end="406:53"><operator pos:start="406:27" pos:end="406:27">(</operator><name pos:start="406:28" pos:end="406:31">envc</name> <operator pos:start="406:33" pos:end="406:33">+</operator> <literal type="number" pos:start="406:35" pos:end="406:35">1</literal><operator pos:start="406:36" pos:end="406:36">)</operator> <operator pos:start="406:38" pos:end="406:38">*</operator> <sizeof pos:start="406:40" pos:end="406:53">sizeof<argument_list pos:start="406:46" pos:end="406:53">(<argument pos:start="406:47" pos:end="406:52"><expr pos:start="406:47" pos:end="406:52"><name pos:start="406:47" pos:end="406:50">void</name> <operator pos:start="406:52" pos:end="406:52">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="410:13" pos:end="428:13">for <control pos:start="410:17" pos:end="412:47">(<init pos:start="410:18" pos:end="410:43"><expr pos:start="410:18" pos:end="410:32"><name pos:start="410:18" pos:end="410:19">gp</name> <operator pos:start="410:21" pos:end="410:21">=</operator> <name pos:start="410:23" pos:end="410:32">guest_argp</name></expr><operator pos:start="410:33" pos:end="410:33">,</operator> <expr pos:start="410:35" pos:end="410:42"><name pos:start="410:35" pos:end="410:35">q</name> <operator pos:start="410:37" pos:end="410:37">=</operator> <name pos:start="410:39" pos:end="410:42">argp</name></expr>;</init> <condition pos:start="410:45" pos:end="410:47"><expr pos:start="410:45" pos:end="410:46"><name pos:start="410:45" pos:end="410:46">gp</name></expr>;</condition>

                  <incr pos:start="412:19" pos:end="412:46"><expr pos:start="412:19" pos:end="412:41"><name pos:start="412:19" pos:end="412:20">gp</name> <operator pos:start="412:22" pos:end="412:23">+=</operator> <sizeof pos:start="412:25" pos:end="412:41">sizeof<argument_list pos:start="412:31" pos:end="412:41">(<argument pos:start="412:32" pos:end="412:40"><expr pos:start="412:32" pos:end="412:40"><name pos:start="412:32" pos:end="412:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="412:42" pos:end="412:42">,</operator> <expr pos:start="412:44" pos:end="412:46"><name pos:start="412:44" pos:end="412:44">q</name><operator pos:start="412:45" pos:end="412:46">++</operator></expr></incr>)</control> <block pos:start="412:49" pos:end="428:13">{<block_content pos:start="414:17" pos:end="426:45">

                <if_stmt pos:start="414:17" pos:end="416:39"><if pos:start="414:17" pos:end="416:39">if <condition pos:start="414:20" pos:end="414:43">(<expr pos:start="414:21" pos:end="414:42"><call pos:start="414:21" pos:end="414:42"><name pos:start="414:21" pos:end="414:32">get_user_ual</name><argument_list pos:start="414:33" pos:end="414:42">(<argument pos:start="414:34" pos:end="414:37"><expr pos:start="414:34" pos:end="414:37"><name pos:start="414:34" pos:end="414:37">addr</name></expr></argument>, <argument pos:start="414:40" pos:end="414:41"><expr pos:start="414:40" pos:end="414:41"><name pos:start="414:40" pos:end="414:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="416:21" pos:end="416:39"><block_content pos:start="416:21" pos:end="416:39">

                    <goto pos:start="416:21" pos:end="416:39">goto <name pos:start="416:26" pos:end="416:38">execve_efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="418:17" pos:end="420:26"><if pos:start="418:17" pos:end="420:26">if <condition pos:start="418:20" pos:end="418:26">(<expr pos:start="418:21" pos:end="418:25"><operator pos:start="418:21" pos:end="418:21">!</operator><name pos:start="418:22" pos:end="418:25">addr</name></expr>)</condition><block type="pseudo" pos:start="420:21" pos:end="420:26"><block_content pos:start="420:21" pos:end="420:26">

                    <break pos:start="420:21" pos:end="420:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="422:17" pos:end="424:39"><if pos:start="422:17" pos:end="424:39">if <condition pos:start="422:20" pos:end="422:51">(<expr pos:start="422:21" pos:end="422:50"><operator pos:start="422:21" pos:end="422:21">!</operator><operator pos:start="422:22" pos:end="422:22">(</operator><operator pos:start="422:23" pos:end="422:23">*</operator><name pos:start="422:24" pos:end="422:24">q</name> <operator pos:start="422:26" pos:end="422:26">=</operator> <call pos:start="422:28" pos:end="422:49"><name pos:start="422:28" pos:end="422:43">lock_user_string</name><argument_list pos:start="422:44" pos:end="422:49">(<argument pos:start="422:45" pos:end="422:48"><expr pos:start="422:45" pos:end="422:48"><name pos:start="422:45" pos:end="422:48">addr</name></expr></argument>)</argument_list></call><operator pos:start="422:50" pos:end="422:50">)</operator></expr>)</condition><block type="pseudo" pos:start="424:21" pos:end="424:39"><block_content pos:start="424:21" pos:end="424:39">

                    <goto pos:start="424:21" pos:end="424:39">goto <name pos:start="424:26" pos:end="424:38">execve_efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="426:17" pos:end="426:45"><expr pos:start="426:17" pos:end="426:44"><name pos:start="426:17" pos:end="426:26">total_size</name> <operator pos:start="426:28" pos:end="426:29">+=</operator> <call pos:start="426:31" pos:end="426:40"><name pos:start="426:31" pos:end="426:36">strlen</name><argument_list pos:start="426:37" pos:end="426:40">(<argument pos:start="426:38" pos:end="426:39"><expr pos:start="426:38" pos:end="426:39"><operator pos:start="426:38" pos:end="426:38">*</operator><name pos:start="426:39" pos:end="426:39">q</name></expr></argument>)</argument_list></call> <operator pos:start="426:42" pos:end="426:42">+</operator> <literal type="number" pos:start="426:44" pos:end="426:44">1</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="430:13" pos:end="430:22"><expr pos:start="430:13" pos:end="430:21"><operator pos:start="430:13" pos:end="430:13">*</operator><name pos:start="430:14" pos:end="430:14">q</name> <operator pos:start="430:16" pos:end="430:16">=</operator> <name pos:start="430:18" pos:end="430:21">NULL</name></expr>;</expr_stmt>



            <for pos:start="434:13" pos:end="452:13">for <control pos:start="434:17" pos:end="436:47">(<init pos:start="434:18" pos:end="434:43"><expr pos:start="434:18" pos:end="434:32"><name pos:start="434:18" pos:end="434:19">gp</name> <operator pos:start="434:21" pos:end="434:21">=</operator> <name pos:start="434:23" pos:end="434:32">guest_envp</name></expr><operator pos:start="434:33" pos:end="434:33">,</operator> <expr pos:start="434:35" pos:end="434:42"><name pos:start="434:35" pos:end="434:35">q</name> <operator pos:start="434:37" pos:end="434:37">=</operator> <name pos:start="434:39" pos:end="434:42">envp</name></expr>;</init> <condition pos:start="434:45" pos:end="434:47"><expr pos:start="434:45" pos:end="434:46"><name pos:start="434:45" pos:end="434:46">gp</name></expr>;</condition>

                  <incr pos:start="436:19" pos:end="436:46"><expr pos:start="436:19" pos:end="436:41"><name pos:start="436:19" pos:end="436:20">gp</name> <operator pos:start="436:22" pos:end="436:23">+=</operator> <sizeof pos:start="436:25" pos:end="436:41">sizeof<argument_list pos:start="436:31" pos:end="436:41">(<argument pos:start="436:32" pos:end="436:40"><expr pos:start="436:32" pos:end="436:40"><name pos:start="436:32" pos:end="436:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="436:42" pos:end="436:42">,</operator> <expr pos:start="436:44" pos:end="436:46"><name pos:start="436:44" pos:end="436:44">q</name><operator pos:start="436:45" pos:end="436:46">++</operator></expr></incr>)</control> <block pos:start="436:49" pos:end="452:13">{<block_content pos:start="438:17" pos:end="450:45">

                <if_stmt pos:start="438:17" pos:end="440:39"><if pos:start="438:17" pos:end="440:39">if <condition pos:start="438:20" pos:end="438:43">(<expr pos:start="438:21" pos:end="438:42"><call pos:start="438:21" pos:end="438:42"><name pos:start="438:21" pos:end="438:32">get_user_ual</name><argument_list pos:start="438:33" pos:end="438:42">(<argument pos:start="438:34" pos:end="438:37"><expr pos:start="438:34" pos:end="438:37"><name pos:start="438:34" pos:end="438:37">addr</name></expr></argument>, <argument pos:start="438:40" pos:end="438:41"><expr pos:start="438:40" pos:end="438:41"><name pos:start="438:40" pos:end="438:41">gp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="440:21" pos:end="440:39"><block_content pos:start="440:21" pos:end="440:39">

                    <goto pos:start="440:21" pos:end="440:39">goto <name pos:start="440:26" pos:end="440:38">execve_efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="442:17" pos:end="444:26"><if pos:start="442:17" pos:end="444:26">if <condition pos:start="442:20" pos:end="442:26">(<expr pos:start="442:21" pos:end="442:25"><operator pos:start="442:21" pos:end="442:21">!</operator><name pos:start="442:22" pos:end="442:25">addr</name></expr>)</condition><block type="pseudo" pos:start="444:21" pos:end="444:26"><block_content pos:start="444:21" pos:end="444:26">

                    <break pos:start="444:21" pos:end="444:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="446:17" pos:end="448:39"><if pos:start="446:17" pos:end="448:39">if <condition pos:start="446:20" pos:end="446:51">(<expr pos:start="446:21" pos:end="446:50"><operator pos:start="446:21" pos:end="446:21">!</operator><operator pos:start="446:22" pos:end="446:22">(</operator><operator pos:start="446:23" pos:end="446:23">*</operator><name pos:start="446:24" pos:end="446:24">q</name> <operator pos:start="446:26" pos:end="446:26">=</operator> <call pos:start="446:28" pos:end="446:49"><name pos:start="446:28" pos:end="446:43">lock_user_string</name><argument_list pos:start="446:44" pos:end="446:49">(<argument pos:start="446:45" pos:end="446:48"><expr pos:start="446:45" pos:end="446:48"><name pos:start="446:45" pos:end="446:48">addr</name></expr></argument>)</argument_list></call><operator pos:start="446:50" pos:end="446:50">)</operator></expr>)</condition><block type="pseudo" pos:start="448:21" pos:end="448:39"><block_content pos:start="448:21" pos:end="448:39">

                    <goto pos:start="448:21" pos:end="448:39">goto <name pos:start="448:26" pos:end="448:38">execve_efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="450:17" pos:end="450:45"><expr pos:start="450:17" pos:end="450:44"><name pos:start="450:17" pos:end="450:26">total_size</name> <operator pos:start="450:28" pos:end="450:29">+=</operator> <call pos:start="450:31" pos:end="450:40"><name pos:start="450:31" pos:end="450:36">strlen</name><argument_list pos:start="450:37" pos:end="450:40">(<argument pos:start="450:38" pos:end="450:39"><expr pos:start="450:38" pos:end="450:39"><operator pos:start="450:38" pos:end="450:38">*</operator><name pos:start="450:39" pos:end="450:39">q</name></expr></argument>)</argument_list></call> <operator pos:start="450:42" pos:end="450:42">+</operator> <literal type="number" pos:start="450:44" pos:end="450:44">1</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="454:13" pos:end="454:22"><expr pos:start="454:13" pos:end="454:21"><operator pos:start="454:13" pos:end="454:13">*</operator><name pos:start="454:14" pos:end="454:14">q</name> <operator pos:start="454:16" pos:end="454:16">=</operator> <name pos:start="454:18" pos:end="454:21">NULL</name></expr>;</expr_stmt>



            <comment type="block" pos:start="458:13" pos:end="460:56">/* This case will not be caught by the host's execve() if its

               page size is bigger than the target's. */</comment>

            <if_stmt pos:start="462:13" pos:end="468:13"><if pos:start="462:13" pos:end="468:13">if <condition pos:start="462:16" pos:end="462:62">(<expr pos:start="462:17" pos:end="462:61"><name pos:start="462:17" pos:end="462:26">total_size</name> <operator pos:start="462:28" pos:end="462:28">&gt;</operator> <name pos:start="462:30" pos:end="462:42">MAX_ARG_PAGES</name> <operator pos:start="462:44" pos:end="462:44">*</operator> <name pos:start="462:46" pos:end="462:61">TARGET_PAGE_SIZE</name></expr>)</condition> <block pos:start="462:64" pos:end="468:13">{<block_content pos:start="464:17" pos:end="466:32">

                <expr_stmt pos:start="464:17" pos:end="464:36"><expr pos:start="464:17" pos:end="464:35"><name pos:start="464:17" pos:end="464:19">ret</name> <operator pos:start="464:21" pos:end="464:21">=</operator> <operator pos:start="464:23" pos:end="464:23">-</operator><name pos:start="464:24" pos:end="464:35">TARGET_E2BIG</name></expr>;</expr_stmt>

                <goto pos:start="466:17" pos:end="466:32">goto <name pos:start="466:22" pos:end="466:31">execve_end</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="470:13" pos:end="472:35"><if pos:start="470:13" pos:end="472:35">if <condition pos:start="470:16" pos:end="470:46">(<expr pos:start="470:17" pos:end="470:45"><operator pos:start="470:17" pos:end="470:17">!</operator><operator pos:start="470:18" pos:end="470:18">(</operator><name pos:start="470:19" pos:end="470:19">p</name> <operator pos:start="470:21" pos:end="470:21">=</operator> <call pos:start="470:23" pos:end="470:44"><name pos:start="470:23" pos:end="470:38">lock_user_string</name><argument_list pos:start="470:39" pos:end="470:44">(<argument pos:start="470:40" pos:end="470:43"><expr pos:start="470:40" pos:end="470:43"><name pos:start="470:40" pos:end="470:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="470:45" pos:end="470:45">)</operator></expr>)</condition><block type="pseudo" pos:start="472:17" pos:end="472:35"><block_content pos:start="472:17" pos:end="472:35">

                <goto pos:start="472:17" pos:end="472:35">goto <name pos:start="472:22" pos:end="472:34">execve_efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="474:13" pos:end="474:51"><expr pos:start="474:13" pos:end="474:50"><name pos:start="474:13" pos:end="474:15">ret</name> <operator pos:start="474:17" pos:end="474:17">=</operator> <call pos:start="474:19" pos:end="474:50"><name pos:start="474:19" pos:end="474:27">get_errno</name><argument_list pos:start="474:28" pos:end="474:50">(<argument pos:start="474:29" pos:end="474:49"><expr pos:start="474:29" pos:end="474:49"><call pos:start="474:29" pos:end="474:49"><name pos:start="474:29" pos:end="474:34">execve</name><argument_list pos:start="474:35" pos:end="474:49">(<argument pos:start="474:36" pos:end="474:36"><expr pos:start="474:36" pos:end="474:36"><name pos:start="474:36" pos:end="474:36">p</name></expr></argument>, <argument pos:start="474:39" pos:end="474:42"><expr pos:start="474:39" pos:end="474:42"><name pos:start="474:39" pos:end="474:42">argp</name></expr></argument>, <argument pos:start="474:45" pos:end="474:48"><expr pos:start="474:45" pos:end="474:48"><name pos:start="474:45" pos:end="474:48">envp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="476:13" pos:end="476:36"><expr pos:start="476:13" pos:end="476:35"><call pos:start="476:13" pos:end="476:35"><name pos:start="476:13" pos:end="476:23">unlock_user</name><argument_list pos:start="476:24" pos:end="476:35">(<argument pos:start="476:25" pos:end="476:25"><expr pos:start="476:25" pos:end="476:25"><name pos:start="476:25" pos:end="476:25">p</name></expr></argument>, <argument pos:start="476:28" pos:end="476:31"><expr pos:start="476:28" pos:end="476:31"><name pos:start="476:28" pos:end="476:31">arg1</name></expr></argument>, <argument pos:start="476:34" pos:end="476:34"><expr pos:start="476:34" pos:end="476:34"><literal type="number" pos:start="476:34" pos:end="476:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <goto pos:start="480:13" pos:end="480:28">goto <name pos:start="480:18" pos:end="480:27">execve_end</name>;</goto>



        <label pos:start="484:9" pos:end="484:22"><name pos:start="484:9" pos:end="484:21">execve_efault</name>:</label>

            <expr_stmt pos:start="486:13" pos:end="486:33"><expr pos:start="486:13" pos:end="486:32"><name pos:start="486:13" pos:end="486:15">ret</name> <operator pos:start="486:17" pos:end="486:17">=</operator> <operator pos:start="486:19" pos:end="486:19">-</operator><name pos:start="486:20" pos:end="486:32">TARGET_EFAULT</name></expr>;</expr_stmt>



        <label pos:start="490:9" pos:end="490:19"><name pos:start="490:9" pos:end="490:18">execve_end</name>:</label>

            <for pos:start="492:13" pos:end="504:13">for <control pos:start="492:17" pos:end="494:47">(<init pos:start="492:18" pos:end="492:43"><expr pos:start="492:18" pos:end="492:32"><name pos:start="492:18" pos:end="492:19">gp</name> <operator pos:start="492:21" pos:end="492:21">=</operator> <name pos:start="492:23" pos:end="492:32">guest_argp</name></expr><operator pos:start="492:33" pos:end="492:33">,</operator> <expr pos:start="492:35" pos:end="492:42"><name pos:start="492:35" pos:end="492:35">q</name> <operator pos:start="492:37" pos:end="492:37">=</operator> <name pos:start="492:39" pos:end="492:42">argp</name></expr>;</init> <condition pos:start="492:45" pos:end="492:47"><expr pos:start="492:45" pos:end="492:46"><operator pos:start="492:45" pos:end="492:45">*</operator><name pos:start="492:46" pos:end="492:46">q</name></expr>;</condition>

                  <incr pos:start="494:19" pos:end="494:46"><expr pos:start="494:19" pos:end="494:41"><name pos:start="494:19" pos:end="494:20">gp</name> <operator pos:start="494:22" pos:end="494:23">+=</operator> <sizeof pos:start="494:25" pos:end="494:41">sizeof<argument_list pos:start="494:31" pos:end="494:41">(<argument pos:start="494:32" pos:end="494:40"><expr pos:start="494:32" pos:end="494:40"><name pos:start="494:32" pos:end="494:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="494:42" pos:end="494:42">,</operator> <expr pos:start="494:44" pos:end="494:46"><name pos:start="494:44" pos:end="494:44">q</name><operator pos:start="494:45" pos:end="494:46">++</operator></expr></incr>)</control> <block pos:start="494:49" pos:end="504:13">{<block_content pos:start="496:17" pos:end="502:41">

                <if_stmt pos:start="496:17" pos:end="500:26"><if pos:start="496:17" pos:end="500:26">if <condition pos:start="496:20" pos:end="498:29">(<expr pos:start="496:21" pos:end="498:28"><call pos:start="496:21" pos:end="496:42"><name pos:start="496:21" pos:end="496:32">get_user_ual</name><argument_list pos:start="496:33" pos:end="496:42">(<argument pos:start="496:34" pos:end="496:37"><expr pos:start="496:34" pos:end="496:37"><name pos:start="496:34" pos:end="496:37">addr</name></expr></argument>, <argument pos:start="496:40" pos:end="496:41"><expr pos:start="496:40" pos:end="496:41"><name pos:start="496:40" pos:end="496:41">gp</name></expr></argument>)</argument_list></call>

                    <operator pos:start="498:21" pos:end="498:22">||</operator> <operator pos:start="498:24" pos:end="498:24">!</operator><name pos:start="498:25" pos:end="498:28">addr</name></expr>)</condition><block type="pseudo" pos:start="500:21" pos:end="500:26"><block_content pos:start="500:21" pos:end="500:26">

                    <break pos:start="500:21" pos:end="500:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="502:17" pos:end="502:41"><expr pos:start="502:17" pos:end="502:40"><call pos:start="502:17" pos:end="502:40"><name pos:start="502:17" pos:end="502:27">unlock_user</name><argument_list pos:start="502:28" pos:end="502:40">(<argument pos:start="502:29" pos:end="502:30"><expr pos:start="502:29" pos:end="502:30"><operator pos:start="502:29" pos:end="502:29">*</operator><name pos:start="502:30" pos:end="502:30">q</name></expr></argument>, <argument pos:start="502:33" pos:end="502:36"><expr pos:start="502:33" pos:end="502:36"><name pos:start="502:33" pos:end="502:36">addr</name></expr></argument>, <argument pos:start="502:39" pos:end="502:39"><expr pos:start="502:39" pos:end="502:39"><literal type="number" pos:start="502:39" pos:end="502:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <for pos:start="506:13" pos:end="518:13">for <control pos:start="506:17" pos:end="508:47">(<init pos:start="506:18" pos:end="506:43"><expr pos:start="506:18" pos:end="506:32"><name pos:start="506:18" pos:end="506:19">gp</name> <operator pos:start="506:21" pos:end="506:21">=</operator> <name pos:start="506:23" pos:end="506:32">guest_envp</name></expr><operator pos:start="506:33" pos:end="506:33">,</operator> <expr pos:start="506:35" pos:end="506:42"><name pos:start="506:35" pos:end="506:35">q</name> <operator pos:start="506:37" pos:end="506:37">=</operator> <name pos:start="506:39" pos:end="506:42">envp</name></expr>;</init> <condition pos:start="506:45" pos:end="506:47"><expr pos:start="506:45" pos:end="506:46"><operator pos:start="506:45" pos:end="506:45">*</operator><name pos:start="506:46" pos:end="506:46">q</name></expr>;</condition>

                  <incr pos:start="508:19" pos:end="508:46"><expr pos:start="508:19" pos:end="508:41"><name pos:start="508:19" pos:end="508:20">gp</name> <operator pos:start="508:22" pos:end="508:23">+=</operator> <sizeof pos:start="508:25" pos:end="508:41">sizeof<argument_list pos:start="508:31" pos:end="508:41">(<argument pos:start="508:32" pos:end="508:40"><expr pos:start="508:32" pos:end="508:40"><name pos:start="508:32" pos:end="508:40">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="508:42" pos:end="508:42">,</operator> <expr pos:start="508:44" pos:end="508:46"><name pos:start="508:44" pos:end="508:44">q</name><operator pos:start="508:45" pos:end="508:46">++</operator></expr></incr>)</control> <block pos:start="508:49" pos:end="518:13">{<block_content pos:start="510:17" pos:end="516:41">

                <if_stmt pos:start="510:17" pos:end="514:26"><if pos:start="510:17" pos:end="514:26">if <condition pos:start="510:20" pos:end="512:29">(<expr pos:start="510:21" pos:end="512:28"><call pos:start="510:21" pos:end="510:42"><name pos:start="510:21" pos:end="510:32">get_user_ual</name><argument_list pos:start="510:33" pos:end="510:42">(<argument pos:start="510:34" pos:end="510:37"><expr pos:start="510:34" pos:end="510:37"><name pos:start="510:34" pos:end="510:37">addr</name></expr></argument>, <argument pos:start="510:40" pos:end="510:41"><expr pos:start="510:40" pos:end="510:41"><name pos:start="510:40" pos:end="510:41">gp</name></expr></argument>)</argument_list></call>

                    <operator pos:start="512:21" pos:end="512:22">||</operator> <operator pos:start="512:24" pos:end="512:24">!</operator><name pos:start="512:25" pos:end="512:28">addr</name></expr>)</condition><block type="pseudo" pos:start="514:21" pos:end="514:26"><block_content pos:start="514:21" pos:end="514:26">

                    <break pos:start="514:21" pos:end="514:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="516:17" pos:end="516:41"><expr pos:start="516:17" pos:end="516:40"><call pos:start="516:17" pos:end="516:40"><name pos:start="516:17" pos:end="516:27">unlock_user</name><argument_list pos:start="516:28" pos:end="516:40">(<argument pos:start="516:29" pos:end="516:30"><expr pos:start="516:29" pos:end="516:30"><operator pos:start="516:29" pos:end="516:29">*</operator><name pos:start="516:30" pos:end="516:30">q</name></expr></argument>, <argument pos:start="516:33" pos:end="516:36"><expr pos:start="516:33" pos:end="516:36"><name pos:start="516:33" pos:end="516:36">addr</name></expr></argument>, <argument pos:start="516:39" pos:end="516:39"><expr pos:start="516:39" pos:end="516:39"><literal type="number" pos:start="516:39" pos:end="516:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block>

        <break pos:start="522:9" pos:end="522:14">break;</break>

    <case pos:start="524:5" pos:end="524:25">case <expr pos:start="524:10" pos:end="524:24"><name pos:start="524:10" pos:end="524:24">TARGET_NR_chdir</name></expr>:</case>

        <if_stmt pos:start="526:9" pos:end="528:24"><if pos:start="526:9" pos:end="528:24">if <condition pos:start="526:12" pos:end="526:42">(<expr pos:start="526:13" pos:end="526:41"><operator pos:start="526:13" pos:end="526:13">!</operator><operator pos:start="526:14" pos:end="526:14">(</operator><name pos:start="526:15" pos:end="526:15">p</name> <operator pos:start="526:17" pos:end="526:17">=</operator> <call pos:start="526:19" pos:end="526:40"><name pos:start="526:19" pos:end="526:34">lock_user_string</name><argument_list pos:start="526:35" pos:end="526:40">(<argument pos:start="526:36" pos:end="526:39"><expr pos:start="526:36" pos:end="526:39"><name pos:start="526:36" pos:end="526:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="526:41" pos:end="526:41">)</operator></expr>)</condition><block type="pseudo" pos:start="528:13" pos:end="528:24"><block_content pos:start="528:13" pos:end="528:24">

            <goto pos:start="528:13" pos:end="528:24">goto <name pos:start="528:18" pos:end="528:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="530:9" pos:end="530:34"><expr pos:start="530:9" pos:end="530:33"><name pos:start="530:9" pos:end="530:11">ret</name> <operator pos:start="530:13" pos:end="530:13">=</operator> <call pos:start="530:15" pos:end="530:33"><name pos:start="530:15" pos:end="530:23">get_errno</name><argument_list pos:start="530:24" pos:end="530:33">(<argument pos:start="530:25" pos:end="530:32"><expr pos:start="530:25" pos:end="530:32"><call pos:start="530:25" pos:end="530:32"><name pos:start="530:25" pos:end="530:29">chdir</name><argument_list pos:start="530:30" pos:end="530:32">(<argument pos:start="530:31" pos:end="530:31"><expr pos:start="530:31" pos:end="530:31"><name pos:start="530:31" pos:end="530:31">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="532:9" pos:end="532:32"><expr pos:start="532:9" pos:end="532:31"><call pos:start="532:9" pos:end="532:31"><name pos:start="532:9" pos:end="532:19">unlock_user</name><argument_list pos:start="532:20" pos:end="532:31">(<argument pos:start="532:21" pos:end="532:21"><expr pos:start="532:21" pos:end="532:21"><name pos:start="532:21" pos:end="532:21">p</name></expr></argument>, <argument pos:start="532:24" pos:end="532:27"><expr pos:start="532:24" pos:end="532:27"><name pos:start="532:24" pos:end="532:27">arg1</name></expr></argument>, <argument pos:start="532:30" pos:end="532:30"><expr pos:start="532:30" pos:end="532:30"><literal type="number" pos:start="532:30" pos:end="532:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="534:9" pos:end="537:0">break;</break>

<cpp:ifdef pos:start="536:1" pos:end="536:21">#<cpp:directive pos:start="536:2" pos:end="536:6">ifdef</cpp:directive> <name pos:start="536:8" pos:end="536:21">TARGET_NR_time</name></cpp:ifdef>

    <case pos:start="538:5" pos:end="538:24">case <expr pos:start="538:10" pos:end="538:23"><name pos:start="538:10" pos:end="538:23">TARGET_NR_time</name></expr>:</case>

        <block pos:start="540:9" pos:end="554:9">{<block_content pos:start="542:13" pos:end="552:28">

            <decl_stmt pos:start="542:13" pos:end="542:29"><decl pos:start="542:13" pos:end="542:28"><type pos:start="542:13" pos:end="542:18"><name pos:start="542:13" pos:end="542:18">time_t</name></type> <name pos:start="542:20" pos:end="542:28">host_time</name></decl>;</decl_stmt>

            <expr_stmt pos:start="544:13" pos:end="544:46"><expr pos:start="544:13" pos:end="544:45"><name pos:start="544:13" pos:end="544:15">ret</name> <operator pos:start="544:17" pos:end="544:17">=</operator> <call pos:start="544:19" pos:end="544:45"><name pos:start="544:19" pos:end="544:27">get_errno</name><argument_list pos:start="544:28" pos:end="544:45">(<argument pos:start="544:29" pos:end="544:44"><expr pos:start="544:29" pos:end="544:44"><call pos:start="544:29" pos:end="544:44"><name pos:start="544:29" pos:end="544:32">time</name><argument_list pos:start="544:33" pos:end="544:44">(<argument pos:start="544:34" pos:end="544:43"><expr pos:start="544:34" pos:end="544:43"><operator pos:start="544:34" pos:end="544:34">&amp;</operator><name pos:start="544:35" pos:end="544:43">host_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="546:13" pos:end="552:28"><if pos:start="546:13" pos:end="552:28">if <condition pos:start="546:16" pos:end="550:49">(<expr pos:start="546:17" pos:end="550:48"><operator pos:start="546:17" pos:end="546:17">!</operator><call pos:start="546:18" pos:end="546:30"><name pos:start="546:18" pos:end="546:25">is_error</name><argument_list pos:start="546:26" pos:end="546:30">(<argument pos:start="546:27" pos:end="546:29"><expr pos:start="546:27" pos:end="546:29"><name pos:start="546:27" pos:end="546:29">ret</name></expr></argument>)</argument_list></call>

                <operator pos:start="548:17" pos:end="548:18">&amp;&amp;</operator> <name pos:start="548:20" pos:end="548:23">arg1</name>

                <operator pos:start="550:17" pos:end="550:18">&amp;&amp;</operator> <call pos:start="550:20" pos:end="550:48"><name pos:start="550:20" pos:end="550:31">put_user_sal</name><argument_list pos:start="550:32" pos:end="550:48">(<argument pos:start="550:33" pos:end="550:41"><expr pos:start="550:33" pos:end="550:41"><name pos:start="550:33" pos:end="550:41">host_time</name></expr></argument>, <argument pos:start="550:44" pos:end="550:47"><expr pos:start="550:44" pos:end="550:47"><name pos:start="550:44" pos:end="550:47">arg1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="552:17" pos:end="552:28"><block_content pos:start="552:17" pos:end="552:28">

                <goto pos:start="552:17" pos:end="552:28">goto <name pos:start="552:22" pos:end="552:27">efault</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="556:9" pos:end="559:0">break;</break>

<cpp:endif pos:start="558:1" pos:end="558:6">#<cpp:directive pos:start="558:2" pos:end="558:6">endif</cpp:directive></cpp:endif>

    <case pos:start="560:5" pos:end="560:25">case <expr pos:start="560:10" pos:end="560:24"><name pos:start="560:10" pos:end="560:24">TARGET_NR_mknod</name></expr>:</case>

        <if_stmt pos:start="562:9" pos:end="564:24"><if pos:start="562:9" pos:end="564:24">if <condition pos:start="562:12" pos:end="562:42">(<expr pos:start="562:13" pos:end="562:41"><operator pos:start="562:13" pos:end="562:13">!</operator><operator pos:start="562:14" pos:end="562:14">(</operator><name pos:start="562:15" pos:end="562:15">p</name> <operator pos:start="562:17" pos:end="562:17">=</operator> <call pos:start="562:19" pos:end="562:40"><name pos:start="562:19" pos:end="562:34">lock_user_string</name><argument_list pos:start="562:35" pos:end="562:40">(<argument pos:start="562:36" pos:end="562:39"><expr pos:start="562:36" pos:end="562:39"><name pos:start="562:36" pos:end="562:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="562:41" pos:end="562:41">)</operator></expr>)</condition><block type="pseudo" pos:start="564:13" pos:end="564:24"><block_content pos:start="564:13" pos:end="564:24">

            <goto pos:start="564:13" pos:end="564:24">goto <name pos:start="564:18" pos:end="564:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="566:9" pos:end="566:46"><expr pos:start="566:9" pos:end="566:45"><name pos:start="566:9" pos:end="566:11">ret</name> <operator pos:start="566:13" pos:end="566:13">=</operator> <call pos:start="566:15" pos:end="566:45"><name pos:start="566:15" pos:end="566:23">get_errno</name><argument_list pos:start="566:24" pos:end="566:45">(<argument pos:start="566:25" pos:end="566:44"><expr pos:start="566:25" pos:end="566:44"><call pos:start="566:25" pos:end="566:44"><name pos:start="566:25" pos:end="566:29">mknod</name><argument_list pos:start="566:30" pos:end="566:44">(<argument pos:start="566:31" pos:end="566:31"><expr pos:start="566:31" pos:end="566:31"><name pos:start="566:31" pos:end="566:31">p</name></expr></argument>, <argument pos:start="566:34" pos:end="566:37"><expr pos:start="566:34" pos:end="566:37"><name pos:start="566:34" pos:end="566:37">arg2</name></expr></argument>, <argument pos:start="566:40" pos:end="566:43"><expr pos:start="566:40" pos:end="566:43"><name pos:start="566:40" pos:end="566:43">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="568:9" pos:end="568:32"><expr pos:start="568:9" pos:end="568:31"><call pos:start="568:9" pos:end="568:31"><name pos:start="568:9" pos:end="568:19">unlock_user</name><argument_list pos:start="568:20" pos:end="568:31">(<argument pos:start="568:21" pos:end="568:21"><expr pos:start="568:21" pos:end="568:21"><name pos:start="568:21" pos:end="568:21">p</name></expr></argument>, <argument pos:start="568:24" pos:end="568:27"><expr pos:start="568:24" pos:end="568:27"><name pos:start="568:24" pos:end="568:27">arg1</name></expr></argument>, <argument pos:start="568:30" pos:end="568:30"><expr pos:start="568:30" pos:end="568:30"><literal type="number" pos:start="568:30" pos:end="568:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="570:9" pos:end="573:0">break;</break>

<cpp:if pos:start="572:1" pos:end="572:30">#<cpp:directive pos:start="572:2" pos:end="572:3">if</cpp:directive> <expr pos:start="572:5" pos:end="572:30"><call pos:start="572:5" pos:end="572:30"><name pos:start="572:5" pos:end="572:11">defined</name><argument_list pos:start="572:12" pos:end="572:30">(<argument pos:start="572:13" pos:end="572:29"><expr pos:start="572:13" pos:end="572:29"><name pos:start="572:13" pos:end="572:29">TARGET_NR_mknodat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="574:5" pos:end="574:27">case <expr pos:start="574:10" pos:end="574:26"><name pos:start="574:10" pos:end="574:26">TARGET_NR_mknodat</name></expr>:</case>

        <if_stmt pos:start="576:9" pos:end="578:24"><if pos:start="576:9" pos:end="578:24">if <condition pos:start="576:12" pos:end="576:42">(<expr pos:start="576:13" pos:end="576:41"><operator pos:start="576:13" pos:end="576:13">!</operator><operator pos:start="576:14" pos:end="576:14">(</operator><name pos:start="576:15" pos:end="576:15">p</name> <operator pos:start="576:17" pos:end="576:17">=</operator> <call pos:start="576:19" pos:end="576:40"><name pos:start="576:19" pos:end="576:34">lock_user_string</name><argument_list pos:start="576:35" pos:end="576:40">(<argument pos:start="576:36" pos:end="576:39"><expr pos:start="576:36" pos:end="576:39"><name pos:start="576:36" pos:end="576:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="576:41" pos:end="576:41">)</operator></expr>)</condition><block type="pseudo" pos:start="578:13" pos:end="578:24"><block_content pos:start="578:13" pos:end="578:24">

            <goto pos:start="578:13" pos:end="578:24">goto <name pos:start="578:18" pos:end="578:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="580:9" pos:end="580:54"><expr pos:start="580:9" pos:end="580:53"><name pos:start="580:9" pos:end="580:11">ret</name> <operator pos:start="580:13" pos:end="580:13">=</operator> <call pos:start="580:15" pos:end="580:53"><name pos:start="580:15" pos:end="580:23">get_errno</name><argument_list pos:start="580:24" pos:end="580:53">(<argument pos:start="580:25" pos:end="580:52"><expr pos:start="580:25" pos:end="580:52"><call pos:start="580:25" pos:end="580:52"><name pos:start="580:25" pos:end="580:31">mknodat</name><argument_list pos:start="580:32" pos:end="580:52">(<argument pos:start="580:33" pos:end="580:36"><expr pos:start="580:33" pos:end="580:36"><name pos:start="580:33" pos:end="580:36">arg1</name></expr></argument>, <argument pos:start="580:39" pos:end="580:39"><expr pos:start="580:39" pos:end="580:39"><name pos:start="580:39" pos:end="580:39">p</name></expr></argument>, <argument pos:start="580:42" pos:end="580:45"><expr pos:start="580:42" pos:end="580:45"><name pos:start="580:42" pos:end="580:45">arg3</name></expr></argument>, <argument pos:start="580:48" pos:end="580:51"><expr pos:start="580:48" pos:end="580:51"><name pos:start="580:48" pos:end="580:51">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="582:9" pos:end="582:32"><expr pos:start="582:9" pos:end="582:31"><call pos:start="582:9" pos:end="582:31"><name pos:start="582:9" pos:end="582:19">unlock_user</name><argument_list pos:start="582:20" pos:end="582:31">(<argument pos:start="582:21" pos:end="582:21"><expr pos:start="582:21" pos:end="582:21"><name pos:start="582:21" pos:end="582:21">p</name></expr></argument>, <argument pos:start="582:24" pos:end="582:27"><expr pos:start="582:24" pos:end="582:27"><name pos:start="582:24" pos:end="582:27">arg2</name></expr></argument>, <argument pos:start="582:30" pos:end="582:30"><expr pos:start="582:30" pos:end="582:30"><literal type="number" pos:start="582:30" pos:end="582:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="584:9" pos:end="587:0">break;</break>

<cpp:endif pos:start="586:1" pos:end="586:6">#<cpp:directive pos:start="586:2" pos:end="586:6">endif</cpp:directive></cpp:endif>

    <case pos:start="588:5" pos:end="588:25">case <expr pos:start="588:10" pos:end="588:24"><name pos:start="588:10" pos:end="588:24">TARGET_NR_chmod</name></expr>:</case>

        <if_stmt pos:start="590:9" pos:end="592:24"><if pos:start="590:9" pos:end="592:24">if <condition pos:start="590:12" pos:end="590:42">(<expr pos:start="590:13" pos:end="590:41"><operator pos:start="590:13" pos:end="590:13">!</operator><operator pos:start="590:14" pos:end="590:14">(</operator><name pos:start="590:15" pos:end="590:15">p</name> <operator pos:start="590:17" pos:end="590:17">=</operator> <call pos:start="590:19" pos:end="590:40"><name pos:start="590:19" pos:end="590:34">lock_user_string</name><argument_list pos:start="590:35" pos:end="590:40">(<argument pos:start="590:36" pos:end="590:39"><expr pos:start="590:36" pos:end="590:39"><name pos:start="590:36" pos:end="590:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="590:41" pos:end="590:41">)</operator></expr>)</condition><block type="pseudo" pos:start="592:13" pos:end="592:24"><block_content pos:start="592:13" pos:end="592:24">

            <goto pos:start="592:13" pos:end="592:24">goto <name pos:start="592:18" pos:end="592:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="594:9" pos:end="594:40"><expr pos:start="594:9" pos:end="594:39"><name pos:start="594:9" pos:end="594:11">ret</name> <operator pos:start="594:13" pos:end="594:13">=</operator> <call pos:start="594:15" pos:end="594:39"><name pos:start="594:15" pos:end="594:23">get_errno</name><argument_list pos:start="594:24" pos:end="594:39">(<argument pos:start="594:25" pos:end="594:38"><expr pos:start="594:25" pos:end="594:38"><call pos:start="594:25" pos:end="594:38"><name pos:start="594:25" pos:end="594:29">chmod</name><argument_list pos:start="594:30" pos:end="594:38">(<argument pos:start="594:31" pos:end="594:31"><expr pos:start="594:31" pos:end="594:31"><name pos:start="594:31" pos:end="594:31">p</name></expr></argument>, <argument pos:start="594:34" pos:end="594:37"><expr pos:start="594:34" pos:end="594:37"><name pos:start="594:34" pos:end="594:37">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="596:9" pos:end="596:32"><expr pos:start="596:9" pos:end="596:31"><call pos:start="596:9" pos:end="596:31"><name pos:start="596:9" pos:end="596:19">unlock_user</name><argument_list pos:start="596:20" pos:end="596:31">(<argument pos:start="596:21" pos:end="596:21"><expr pos:start="596:21" pos:end="596:21"><name pos:start="596:21" pos:end="596:21">p</name></expr></argument>, <argument pos:start="596:24" pos:end="596:27"><expr pos:start="596:24" pos:end="596:27"><name pos:start="596:24" pos:end="596:27">arg1</name></expr></argument>, <argument pos:start="596:30" pos:end="596:30"><expr pos:start="596:30" pos:end="596:30"><literal type="number" pos:start="596:30" pos:end="596:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="598:9" pos:end="601:0">break;</break>

<cpp:ifdef pos:start="600:1" pos:end="600:22">#<cpp:directive pos:start="600:2" pos:end="600:6">ifdef</cpp:directive> <name pos:start="600:8" pos:end="600:22">TARGET_NR_break</name></cpp:ifdef>

    <case pos:start="602:5" pos:end="602:25">case <expr pos:start="602:10" pos:end="602:24"><name pos:start="602:10" pos:end="602:24">TARGET_NR_break</name></expr>:</case>

        <goto pos:start="604:9" pos:end="609:0">goto <name pos:start="604:14" pos:end="604:26">unimplemented</name>;</goto>

<cpp:endif pos:start="606:1" pos:end="606:6">#<cpp:directive pos:start="606:2" pos:end="606:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="608:1" pos:end="608:24">#<cpp:directive pos:start="608:2" pos:end="608:6">ifdef</cpp:directive> <name pos:start="608:8" pos:end="608:24">TARGET_NR_oldstat</name></cpp:ifdef>

    <case pos:start="610:5" pos:end="610:27">case <expr pos:start="610:10" pos:end="610:26"><name pos:start="610:10" pos:end="610:26">TARGET_NR_oldstat</name></expr>:</case>

        <goto pos:start="612:9" pos:end="615:0">goto <name pos:start="612:14" pos:end="612:26">unimplemented</name>;</goto>

<cpp:endif pos:start="614:1" pos:end="614:6">#<cpp:directive pos:start="614:2" pos:end="614:6">endif</cpp:directive></cpp:endif>

    <case pos:start="616:5" pos:end="616:25">case <expr pos:start="616:10" pos:end="616:24"><name pos:start="616:10" pos:end="616:24">TARGET_NR_lseek</name></expr>:</case>

        <expr_stmt pos:start="618:9" pos:end="618:49"><expr pos:start="618:9" pos:end="618:48"><name pos:start="618:9" pos:end="618:11">ret</name> <operator pos:start="618:13" pos:end="618:13">=</operator> <call pos:start="618:15" pos:end="618:48"><name pos:start="618:15" pos:end="618:23">get_errno</name><argument_list pos:start="618:24" pos:end="618:48">(<argument pos:start="618:25" pos:end="618:47"><expr pos:start="618:25" pos:end="618:47"><call pos:start="618:25" pos:end="618:47"><name pos:start="618:25" pos:end="618:29">lseek</name><argument_list pos:start="618:30" pos:end="618:47">(<argument pos:start="618:31" pos:end="618:34"><expr pos:start="618:31" pos:end="618:34"><name pos:start="618:31" pos:end="618:34">arg1</name></expr></argument>, <argument pos:start="618:37" pos:end="618:40"><expr pos:start="618:37" pos:end="618:40"><name pos:start="618:37" pos:end="618:40">arg2</name></expr></argument>, <argument pos:start="618:43" pos:end="618:46"><expr pos:start="618:43" pos:end="618:46"><name pos:start="618:43" pos:end="618:46">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="620:9" pos:end="623:0">break;</break>

<cpp:if pos:start="622:1" pos:end="622:55">#<cpp:directive pos:start="622:2" pos:end="622:3">if</cpp:directive> <expr pos:start="622:5" pos:end="622:55"><call pos:start="622:5" pos:end="622:30"><name pos:start="622:5" pos:end="622:11">defined</name><argument_list pos:start="622:12" pos:end="622:30">(<argument pos:start="622:13" pos:end="622:29"><expr pos:start="622:13" pos:end="622:29"><name pos:start="622:13" pos:end="622:29">TARGET_NR_getxpid</name></expr></argument>)</argument_list></call> <operator pos:start="622:32" pos:end="622:33">&amp;&amp;</operator> <call pos:start="622:35" pos:end="622:55"><name pos:start="622:35" pos:end="622:41">defined</name><argument_list pos:start="622:42" pos:end="622:55">(<argument pos:start="622:43" pos:end="622:54"><expr pos:start="622:43" pos:end="622:54"><name pos:start="622:43" pos:end="622:54">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="624:5" pos:end="624:24">/* Alpha specific */</comment>

    <case pos:start="626:5" pos:end="626:27">case <expr pos:start="626:10" pos:end="626:26"><name pos:start="626:10" pos:end="626:26">TARGET_NR_getxpid</name></expr>:</case>

        <expr_stmt pos:start="628:9" pos:end="628:58"><expr pos:start="628:9" pos:end="628:57"><operator pos:start="628:9" pos:end="628:9">(</operator><operator pos:start="628:10" pos:end="628:10">(</operator><name pos:start="628:11" pos:end="628:23">CPUAlphaState</name> <operator pos:start="628:25" pos:end="628:25">*</operator><operator pos:start="628:26" pos:end="628:26">)</operator><name pos:start="628:27" pos:end="628:33">cpu_env</name><operator pos:start="628:34" pos:end="628:34">)</operator><operator pos:start="628:35" pos:end="628:36">-&gt;</operator><name pos:start="628:37" pos:end="628:45"><name pos:start="628:37" pos:end="628:38">ir</name><index pos:start="628:39" pos:end="628:45">[<expr pos:start="628:40" pos:end="628:44"><name pos:start="628:40" pos:end="628:44">IR_A4</name></expr>]</index></name> <operator pos:start="628:47" pos:end="628:47">=</operator> <call pos:start="628:49" pos:end="628:57"><name pos:start="628:49" pos:end="628:55">getppid</name><argument_list pos:start="628:56" pos:end="628:57">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="630:9" pos:end="630:34"><expr pos:start="630:9" pos:end="630:33"><name pos:start="630:9" pos:end="630:11">ret</name> <operator pos:start="630:13" pos:end="630:13">=</operator> <call pos:start="630:15" pos:end="630:33"><name pos:start="630:15" pos:end="630:23">get_errno</name><argument_list pos:start="630:24" pos:end="630:33">(<argument pos:start="630:25" pos:end="630:32"><expr pos:start="630:25" pos:end="630:32"><call pos:start="630:25" pos:end="630:32"><name pos:start="630:25" pos:end="630:30">getpid</name><argument_list pos:start="630:31" pos:end="630:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="632:9" pos:end="637:0">break;</break>

<cpp:endif pos:start="634:1" pos:end="634:6">#<cpp:directive pos:start="634:2" pos:end="634:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="636:1" pos:end="636:23">#<cpp:directive pos:start="636:2" pos:end="636:6">ifdef</cpp:directive> <name pos:start="636:8" pos:end="636:23">TARGET_NR_getpid</name></cpp:ifdef>

    <case pos:start="638:5" pos:end="638:26">case <expr pos:start="638:10" pos:end="638:25"><name pos:start="638:10" pos:end="638:25">TARGET_NR_getpid</name></expr>:</case>

        <expr_stmt pos:start="640:9" pos:end="640:34"><expr pos:start="640:9" pos:end="640:33"><name pos:start="640:9" pos:end="640:11">ret</name> <operator pos:start="640:13" pos:end="640:13">=</operator> <call pos:start="640:15" pos:end="640:33"><name pos:start="640:15" pos:end="640:23">get_errno</name><argument_list pos:start="640:24" pos:end="640:33">(<argument pos:start="640:25" pos:end="640:32"><expr pos:start="640:25" pos:end="640:32"><call pos:start="640:25" pos:end="640:32"><name pos:start="640:25" pos:end="640:30">getpid</name><argument_list pos:start="640:31" pos:end="640:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="642:9" pos:end="645:0">break;</break>

<cpp:endif pos:start="644:1" pos:end="644:6">#<cpp:directive pos:start="644:2" pos:end="644:6">endif</cpp:directive></cpp:endif>

    <case pos:start="646:5" pos:end="646:25">case <expr pos:start="646:10" pos:end="646:24"><name pos:start="646:10" pos:end="646:24">TARGET_NR_mount</name></expr>:</case>

		<block pos:start="648:17" pos:end="695:0">{<block_content pos:start="652:25" pos:end="690:30">

			<comment type="block" pos:start="650:25" pos:end="650:60">/* need to look at the data field */</comment>

			<decl_stmt pos:start="652:25" pos:end="652:38"><decl pos:start="652:25" pos:end="652:32"><type pos:start="652:25" pos:end="652:30"><name pos:start="652:25" pos:end="652:28">void</name> <modifier pos:start="652:30" pos:end="652:30">*</modifier></type><name pos:start="652:31" pos:end="652:32">p2</name></decl>, <decl pos:start="652:35" pos:end="652:37"><type ref="prev" pos:start="652:25" pos:end="652:30"><modifier pos:start="652:35" pos:end="652:35">*</modifier></type><name pos:start="652:36" pos:end="652:37">p3</name></decl>;</decl_stmt>

			<expr_stmt pos:start="654:25" pos:end="654:51"><expr pos:start="654:25" pos:end="654:50"><name pos:start="654:25" pos:end="654:25">p</name> <operator pos:start="654:27" pos:end="654:27">=</operator> <call pos:start="654:29" pos:end="654:50"><name pos:start="654:29" pos:end="654:44">lock_user_string</name><argument_list pos:start="654:45" pos:end="654:50">(<argument pos:start="654:46" pos:end="654:49"><expr pos:start="654:46" pos:end="654:49"><name pos:start="654:46" pos:end="654:49">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="656:25" pos:end="656:52"><expr pos:start="656:25" pos:end="656:51"><name pos:start="656:25" pos:end="656:26">p2</name> <operator pos:start="656:28" pos:end="656:28">=</operator> <call pos:start="656:30" pos:end="656:51"><name pos:start="656:30" pos:end="656:45">lock_user_string</name><argument_list pos:start="656:46" pos:end="656:51">(<argument pos:start="656:47" pos:end="656:50"><expr pos:start="656:47" pos:end="656:50"><name pos:start="656:47" pos:end="656:50">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="658:25" pos:end="658:52"><expr pos:start="658:25" pos:end="658:51"><name pos:start="658:25" pos:end="658:26">p3</name> <operator pos:start="658:28" pos:end="658:28">=</operator> <call pos:start="658:30" pos:end="658:51"><name pos:start="658:30" pos:end="658:45">lock_user_string</name><argument_list pos:start="658:46" pos:end="658:51">(<argument pos:start="658:47" pos:end="658:50"><expr pos:start="658:47" pos:end="658:50"><name pos:start="658:47" pos:end="658:50">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="660:25" pos:end="682:25"><if pos:start="660:25" pos:end="662:49">if <condition pos:start="660:28" pos:end="660:45">(<expr pos:start="660:29" pos:end="660:44"><operator pos:start="660:29" pos:end="660:29">!</operator><name pos:start="660:30" pos:end="660:30">p</name> <operator pos:start="660:32" pos:end="660:33">||</operator> <operator pos:start="660:35" pos:end="660:35">!</operator><name pos:start="660:36" pos:end="660:37">p2</name> <operator pos:start="660:39" pos:end="660:40">||</operator> <operator pos:start="660:42" pos:end="660:42">!</operator><name pos:start="660:43" pos:end="660:44">p3</name></expr>)</condition><block type="pseudo" pos:start="662:29" pos:end="662:49"><block_content pos:start="662:29" pos:end="662:49">

                            <expr_stmt pos:start="662:29" pos:end="662:49"><expr pos:start="662:29" pos:end="662:48"><name pos:start="662:29" pos:end="662:31">ret</name> <operator pos:start="662:33" pos:end="662:33">=</operator> <operator pos:start="662:35" pos:end="662:35">-</operator><name pos:start="662:36" pos:end="662:48">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="664:25" pos:end="682:25">else <block pos:start="664:30" pos:end="682:25">{<block_content pos:start="674:29" pos:end="680:98">

                            <comment type="block" pos:start="666:29" pos:end="672:31">/* FIXME - arg5 should be locked, but it isn't clear how to

                             * do that since it's not guaranteed to be a NULL-terminated

                             * string.

                             */</comment>

                            <if_stmt pos:start="674:29" pos:end="680:98"><if pos:start="674:29" pos:end="676:93">if <condition pos:start="674:32" pos:end="674:41">( <expr pos:start="674:34" pos:end="674:39"><operator pos:start="674:34" pos:end="674:34">!</operator> <name pos:start="674:36" pos:end="674:39">arg5</name></expr> )</condition><block type="pseudo" pos:start="676:33" pos:end="676:93"><block_content pos:start="676:33" pos:end="676:93">

                                <expr_stmt pos:start="676:33" pos:end="676:93"><expr pos:start="676:33" pos:end="676:92"><name pos:start="676:33" pos:end="676:35">ret</name> <operator pos:start="676:37" pos:end="676:37">=</operator> <call pos:start="676:39" pos:end="676:92"><name pos:start="676:39" pos:end="676:47">get_errno</name><argument_list pos:start="676:48" pos:end="676:92">(<argument pos:start="676:49" pos:end="676:91"><expr pos:start="676:49" pos:end="676:91"><call pos:start="676:49" pos:end="676:91"><name pos:start="676:49" pos:end="676:53">mount</name><argument_list pos:start="676:54" pos:end="676:91">(<argument pos:start="676:55" pos:end="676:55"><expr pos:start="676:55" pos:end="676:55"><name pos:start="676:55" pos:end="676:55">p</name></expr></argument>, <argument pos:start="676:58" pos:end="676:59"><expr pos:start="676:58" pos:end="676:59"><name pos:start="676:58" pos:end="676:59">p2</name></expr></argument>, <argument pos:start="676:62" pos:end="676:63"><expr pos:start="676:62" pos:end="676:63"><name pos:start="676:62" pos:end="676:63">p3</name></expr></argument>, <argument pos:start="676:66" pos:end="676:84"><expr pos:start="676:66" pos:end="676:84"><operator pos:start="676:66" pos:end="676:66">(</operator><name pos:start="676:67" pos:end="676:74">unsigned</name> <name pos:start="676:76" pos:end="676:79">long</name><operator pos:start="676:80" pos:end="676:80">)</operator><name pos:start="676:81" pos:end="676:84">arg4</name></expr></argument>, <argument pos:start="676:87" pos:end="676:90"><expr pos:start="676:87" pos:end="676:90"><name pos:start="676:87" pos:end="676:90">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="678:29" pos:end="680:98">else<block type="pseudo" pos:start="680:33" pos:end="680:98"><block_content pos:start="680:33" pos:end="680:98">

                                <expr_stmt pos:start="680:33" pos:end="680:98"><expr pos:start="680:33" pos:end="680:97"><name pos:start="680:33" pos:end="680:35">ret</name> <operator pos:start="680:37" pos:end="680:37">=</operator> <call pos:start="680:39" pos:end="680:97"><name pos:start="680:39" pos:end="680:47">get_errno</name><argument_list pos:start="680:48" pos:end="680:97">(<argument pos:start="680:49" pos:end="680:96"><expr pos:start="680:49" pos:end="680:96"><call pos:start="680:49" pos:end="680:96"><name pos:start="680:49" pos:end="680:53">mount</name><argument_list pos:start="680:54" pos:end="680:96">(<argument pos:start="680:55" pos:end="680:55"><expr pos:start="680:55" pos:end="680:55"><name pos:start="680:55" pos:end="680:55">p</name></expr></argument>, <argument pos:start="680:58" pos:end="680:59"><expr pos:start="680:58" pos:end="680:59"><name pos:start="680:58" pos:end="680:59">p2</name></expr></argument>, <argument pos:start="680:62" pos:end="680:63"><expr pos:start="680:62" pos:end="680:63"><name pos:start="680:62" pos:end="680:63">p3</name></expr></argument>, <argument pos:start="680:66" pos:end="680:84"><expr pos:start="680:66" pos:end="680:84"><operator pos:start="680:66" pos:end="680:66">(</operator><name pos:start="680:67" pos:end="680:74">unsigned</name> <name pos:start="680:76" pos:end="680:79">long</name><operator pos:start="680:80" pos:end="680:80">)</operator><name pos:start="680:81" pos:end="680:84">arg4</name></expr></argument>, <argument pos:start="680:87" pos:end="680:95"><expr pos:start="680:87" pos:end="680:95"><call pos:start="680:87" pos:end="680:95"><name pos:start="680:87" pos:end="680:89">g2h</name><argument_list pos:start="680:90" pos:end="680:95">(<argument pos:start="680:91" pos:end="680:94"><expr pos:start="680:91" pos:end="680:94"><name pos:start="680:91" pos:end="680:94">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="684:25" pos:end="684:48"><expr pos:start="684:25" pos:end="684:47"><call pos:start="684:25" pos:end="684:47"><name pos:start="684:25" pos:end="684:35">unlock_user</name><argument_list pos:start="684:36" pos:end="684:47">(<argument pos:start="684:37" pos:end="684:37"><expr pos:start="684:37" pos:end="684:37"><name pos:start="684:37" pos:end="684:37">p</name></expr></argument>, <argument pos:start="684:40" pos:end="684:43"><expr pos:start="684:40" pos:end="684:43"><name pos:start="684:40" pos:end="684:43">arg1</name></expr></argument>, <argument pos:start="684:46" pos:end="684:46"><expr pos:start="684:46" pos:end="684:46"><literal type="number" pos:start="684:46" pos:end="684:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="686:25" pos:end="686:49"><expr pos:start="686:25" pos:end="686:48"><call pos:start="686:25" pos:end="686:48"><name pos:start="686:25" pos:end="686:35">unlock_user</name><argument_list pos:start="686:36" pos:end="686:48">(<argument pos:start="686:37" pos:end="686:38"><expr pos:start="686:37" pos:end="686:38"><name pos:start="686:37" pos:end="686:38">p2</name></expr></argument>, <argument pos:start="686:41" pos:end="686:44"><expr pos:start="686:41" pos:end="686:44"><name pos:start="686:41" pos:end="686:44">arg2</name></expr></argument>, <argument pos:start="686:47" pos:end="686:47"><expr pos:start="686:47" pos:end="686:47"><literal type="number" pos:start="686:47" pos:end="686:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="688:25" pos:end="688:49"><expr pos:start="688:25" pos:end="688:48"><call pos:start="688:25" pos:end="688:48"><name pos:start="688:25" pos:end="688:35">unlock_user</name><argument_list pos:start="688:36" pos:end="688:48">(<argument pos:start="688:37" pos:end="688:38"><expr pos:start="688:37" pos:end="688:38"><name pos:start="688:37" pos:end="688:38">p3</name></expr></argument>, <argument pos:start="688:41" pos:end="688:44"><expr pos:start="688:41" pos:end="688:44"><name pos:start="688:41" pos:end="688:44">arg3</name></expr></argument>, <argument pos:start="688:47" pos:end="688:47"><expr pos:start="688:47" pos:end="688:47"><literal type="number" pos:start="688:47" pos:end="688:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="690:25" pos:end="690:30">break;</break>

		</block_content>}</block>

<cpp:ifdef pos:start="694:1" pos:end="694:23">#<cpp:directive pos:start="694:2" pos:end="694:6">ifdef</cpp:directive> <name pos:start="694:8" pos:end="694:23">TARGET_NR_umount</name></cpp:ifdef>

    <case pos:start="696:5" pos:end="696:26">case <expr pos:start="696:10" pos:end="696:25"><name pos:start="696:10" pos:end="696:25">TARGET_NR_umount</name></expr>:</case>

        <if_stmt pos:start="698:9" pos:end="700:24"><if pos:start="698:9" pos:end="700:24">if <condition pos:start="698:12" pos:end="698:42">(<expr pos:start="698:13" pos:end="698:41"><operator pos:start="698:13" pos:end="698:13">!</operator><operator pos:start="698:14" pos:end="698:14">(</operator><name pos:start="698:15" pos:end="698:15">p</name> <operator pos:start="698:17" pos:end="698:17">=</operator> <call pos:start="698:19" pos:end="698:40"><name pos:start="698:19" pos:end="698:34">lock_user_string</name><argument_list pos:start="698:35" pos:end="698:40">(<argument pos:start="698:36" pos:end="698:39"><expr pos:start="698:36" pos:end="698:39"><name pos:start="698:36" pos:end="698:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="698:41" pos:end="698:41">)</operator></expr>)</condition><block type="pseudo" pos:start="700:13" pos:end="700:24"><block_content pos:start="700:13" pos:end="700:24">

            <goto pos:start="700:13" pos:end="700:24">goto <name pos:start="700:18" pos:end="700:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="702:9" pos:end="702:35"><expr pos:start="702:9" pos:end="702:34"><name pos:start="702:9" pos:end="702:11">ret</name> <operator pos:start="702:13" pos:end="702:13">=</operator> <call pos:start="702:15" pos:end="702:34"><name pos:start="702:15" pos:end="702:23">get_errno</name><argument_list pos:start="702:24" pos:end="702:34">(<argument pos:start="702:25" pos:end="702:33"><expr pos:start="702:25" pos:end="702:33"><call pos:start="702:25" pos:end="702:33"><name pos:start="702:25" pos:end="702:30">umount</name><argument_list pos:start="702:31" pos:end="702:33">(<argument pos:start="702:32" pos:end="702:32"><expr pos:start="702:32" pos:end="702:32"><name pos:start="702:32" pos:end="702:32">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="704:9" pos:end="704:32"><expr pos:start="704:9" pos:end="704:31"><call pos:start="704:9" pos:end="704:31"><name pos:start="704:9" pos:end="704:19">unlock_user</name><argument_list pos:start="704:20" pos:end="704:31">(<argument pos:start="704:21" pos:end="704:21"><expr pos:start="704:21" pos:end="704:21"><name pos:start="704:21" pos:end="704:21">p</name></expr></argument>, <argument pos:start="704:24" pos:end="704:27"><expr pos:start="704:24" pos:end="704:27"><name pos:start="704:24" pos:end="704:27">arg1</name></expr></argument>, <argument pos:start="704:30" pos:end="704:30"><expr pos:start="704:30" pos:end="704:30"><literal type="number" pos:start="704:30" pos:end="704:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="706:9" pos:end="711:0">break;</break>

<cpp:endif pos:start="708:1" pos:end="708:6">#<cpp:directive pos:start="708:2" pos:end="708:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="710:1" pos:end="710:22">#<cpp:directive pos:start="710:2" pos:end="710:6">ifdef</cpp:directive> <name pos:start="710:8" pos:end="710:22">TARGET_NR_stime</name></cpp:ifdef> <comment type="block" pos:start="710:24" pos:end="710:41">/* not on alpha */</comment>

    <case pos:start="712:5" pos:end="712:25">case <expr pos:start="712:10" pos:end="712:24"><name pos:start="712:10" pos:end="712:24">TARGET_NR_stime</name></expr>:</case>

        <block pos:start="714:9" pos:end="724:9">{<block_content pos:start="716:13" pos:end="722:47">

            <decl_stmt pos:start="716:13" pos:end="716:29"><decl pos:start="716:13" pos:end="716:28"><type pos:start="716:13" pos:end="716:18"><name pos:start="716:13" pos:end="716:18">time_t</name></type> <name pos:start="716:20" pos:end="716:28">host_time</name></decl>;</decl_stmt>

            <if_stmt pos:start="718:13" pos:end="720:28"><if pos:start="718:13" pos:end="720:28">if <condition pos:start="718:16" pos:end="718:46">(<expr pos:start="718:17" pos:end="718:45"><call pos:start="718:17" pos:end="718:45"><name pos:start="718:17" pos:end="718:28">get_user_sal</name><argument_list pos:start="718:29" pos:end="718:45">(<argument pos:start="718:30" pos:end="718:38"><expr pos:start="718:30" pos:end="718:38"><name pos:start="718:30" pos:end="718:38">host_time</name></expr></argument>, <argument pos:start="718:41" pos:end="718:44"><expr pos:start="718:41" pos:end="718:44"><name pos:start="718:41" pos:end="718:44">arg1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="720:17" pos:end="720:28"><block_content pos:start="720:17" pos:end="720:28">

                <goto pos:start="720:17" pos:end="720:28">goto <name pos:start="720:22" pos:end="720:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="722:13" pos:end="722:47"><expr pos:start="722:13" pos:end="722:46"><name pos:start="722:13" pos:end="722:15">ret</name> <operator pos:start="722:17" pos:end="722:17">=</operator> <call pos:start="722:19" pos:end="722:46"><name pos:start="722:19" pos:end="722:27">get_errno</name><argument_list pos:start="722:28" pos:end="722:46">(<argument pos:start="722:29" pos:end="722:45"><expr pos:start="722:29" pos:end="722:45"><call pos:start="722:29" pos:end="722:45"><name pos:start="722:29" pos:end="722:33">stime</name><argument_list pos:start="722:34" pos:end="722:45">(<argument pos:start="722:35" pos:end="722:44"><expr pos:start="722:35" pos:end="722:44"><operator pos:start="722:35" pos:end="722:35">&amp;</operator><name pos:start="722:36" pos:end="722:44">host_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="726:9" pos:end="729:0">break;</break>

<cpp:endif pos:start="728:1" pos:end="728:6">#<cpp:directive pos:start="728:2" pos:end="728:6">endif</cpp:directive></cpp:endif>

    <case pos:start="730:5" pos:end="730:26">case <expr pos:start="730:10" pos:end="730:25"><name pos:start="730:10" pos:end="730:25">TARGET_NR_ptrace</name></expr>:</case>

        <goto pos:start="732:9" pos:end="735:0">goto <name pos:start="732:14" pos:end="732:26">unimplemented</name>;</goto>

<cpp:ifdef pos:start="734:1" pos:end="734:22">#<cpp:directive pos:start="734:2" pos:end="734:6">ifdef</cpp:directive> <name pos:start="734:8" pos:end="734:22">TARGET_NR_alarm</name></cpp:ifdef> <comment type="block" pos:start="734:24" pos:end="734:41">/* not on alpha */</comment>

    <case pos:start="736:5" pos:end="736:25">case <expr pos:start="736:10" pos:end="736:24"><name pos:start="736:10" pos:end="736:24">TARGET_NR_alarm</name></expr>:</case>

        <expr_stmt pos:start="738:9" pos:end="738:26"><expr pos:start="738:9" pos:end="738:25"><name pos:start="738:9" pos:end="738:11">ret</name> <operator pos:start="738:13" pos:end="738:13">=</operator> <call pos:start="738:15" pos:end="738:25"><name pos:start="738:15" pos:end="738:19">alarm</name><argument_list pos:start="738:20" pos:end="738:25">(<argument pos:start="738:21" pos:end="738:24"><expr pos:start="738:21" pos:end="738:24"><name pos:start="738:21" pos:end="738:24">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="740:9" pos:end="745:0">break;</break>

<cpp:endif pos:start="742:1" pos:end="742:6">#<cpp:directive pos:start="742:2" pos:end="742:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="744:1" pos:end="744:25">#<cpp:directive pos:start="744:2" pos:end="744:6">ifdef</cpp:directive> <name pos:start="744:8" pos:end="744:25">TARGET_NR_oldfstat</name></cpp:ifdef>

    <case pos:start="746:5" pos:end="746:28">case <expr pos:start="746:10" pos:end="746:27"><name pos:start="746:10" pos:end="746:27">TARGET_NR_oldfstat</name></expr>:</case>

        <goto pos:start="748:9" pos:end="753:0">goto <name pos:start="748:14" pos:end="748:26">unimplemented</name>;</goto>

<cpp:endif pos:start="750:1" pos:end="750:6">#<cpp:directive pos:start="750:2" pos:end="750:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="752:1" pos:end="752:22">#<cpp:directive pos:start="752:2" pos:end="752:6">ifdef</cpp:directive> <name pos:start="752:8" pos:end="752:22">TARGET_NR_pause</name></cpp:ifdef> <comment type="block" pos:start="752:24" pos:end="752:41">/* not on alpha */</comment>

    <case pos:start="754:5" pos:end="754:25">case <expr pos:start="754:10" pos:end="754:24"><name pos:start="754:10" pos:end="754:24">TARGET_NR_pause</name></expr>:</case>

        <expr_stmt pos:start="756:9" pos:end="756:33"><expr pos:start="756:9" pos:end="756:32"><name pos:start="756:9" pos:end="756:11">ret</name> <operator pos:start="756:13" pos:end="756:13">=</operator> <call pos:start="756:15" pos:end="756:32"><name pos:start="756:15" pos:end="756:23">get_errno</name><argument_list pos:start="756:24" pos:end="756:32">(<argument pos:start="756:25" pos:end="756:31"><expr pos:start="756:25" pos:end="756:31"><call pos:start="756:25" pos:end="756:31"><name pos:start="756:25" pos:end="756:29">pause</name><argument_list pos:start="756:30" pos:end="756:31">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="758:9" pos:end="763:0">break;</break>

<cpp:endif pos:start="760:1" pos:end="760:6">#<cpp:directive pos:start="760:2" pos:end="760:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="762:1" pos:end="762:22">#<cpp:directive pos:start="762:2" pos:end="762:6">ifdef</cpp:directive> <name pos:start="762:8" pos:end="762:22">TARGET_NR_utime</name></cpp:ifdef>

    <case pos:start="764:5" pos:end="764:25">case <expr pos:start="764:10" pos:end="764:24"><name pos:start="764:10" pos:end="764:24">TARGET_NR_utime</name></expr>:</case>

        <block pos:start="766:9" pos:end="800:9">{<block_content pos:start="768:13" pos:end="798:36">

            <decl_stmt pos:start="768:13" pos:end="768:44"><decl pos:start="768:13" pos:end="768:31"><type pos:start="768:13" pos:end="768:26"><name pos:start="768:13" pos:end="768:26"><name pos:start="768:13" pos:end="768:18">struct</name> <name pos:start="768:20" pos:end="768:26">utimbuf</name></name></type> <name pos:start="768:28" pos:end="768:31">tbuf</name></decl>, <decl pos:start="768:34" pos:end="768:43"><type ref="prev" pos:start="768:13" pos:end="768:26"><modifier pos:start="768:34" pos:end="768:34">*</modifier></type><name pos:start="768:35" pos:end="768:43">host_tbuf</name></decl>;</decl_stmt>

            <decl_stmt pos:start="770:13" pos:end="770:47"><decl pos:start="770:13" pos:end="770:46"><type pos:start="770:13" pos:end="770:35"><name pos:start="770:13" pos:end="770:33"><name pos:start="770:13" pos:end="770:18">struct</name> <name pos:start="770:20" pos:end="770:33">target_utimbuf</name></name> <modifier pos:start="770:35" pos:end="770:35">*</modifier></type><name pos:start="770:36" pos:end="770:46">target_tbuf</name></decl>;</decl_stmt>

            <if_stmt pos:start="772:13" pos:end="790:13"><if pos:start="772:13" pos:end="786:13">if <condition pos:start="772:16" pos:end="772:21">(<expr pos:start="772:17" pos:end="772:20"><name pos:start="772:17" pos:end="772:20">arg2</name></expr>)</condition> <block pos:start="772:23" pos:end="786:13">{<block_content pos:start="774:17" pos:end="784:34">

                <if_stmt pos:start="774:17" pos:end="776:32"><if pos:start="774:17" pos:end="776:32">if <condition pos:start="774:20" pos:end="774:73">(<expr pos:start="774:21" pos:end="774:72"><operator pos:start="774:21" pos:end="774:21">!</operator><call pos:start="774:22" pos:end="774:72"><name pos:start="774:22" pos:end="774:37">lock_user_struct</name><argument_list pos:start="774:38" pos:end="774:72">(<argument pos:start="774:39" pos:end="774:49"><expr pos:start="774:39" pos:end="774:49"><name pos:start="774:39" pos:end="774:49">VERIFY_READ</name></expr></argument>, <argument pos:start="774:52" pos:end="774:62"><expr pos:start="774:52" pos:end="774:62"><name pos:start="774:52" pos:end="774:62">target_tbuf</name></expr></argument>, <argument pos:start="774:65" pos:end="774:68"><expr pos:start="774:65" pos:end="774:68"><name pos:start="774:65" pos:end="774:68">arg2</name></expr></argument>, <argument pos:start="774:71" pos:end="774:71"><expr pos:start="774:71" pos:end="774:71"><literal type="number" pos:start="774:71" pos:end="774:71">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="776:21" pos:end="776:32"><block_content pos:start="776:21" pos:end="776:32">

                    <goto pos:start="776:21" pos:end="776:32">goto <name pos:start="776:26" pos:end="776:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="778:17" pos:end="778:59"><expr pos:start="778:17" pos:end="778:58"><name pos:start="778:17" pos:end="778:27"><name pos:start="778:17" pos:end="778:20">tbuf</name><operator pos:start="778:21" pos:end="778:21">.</operator><name pos:start="778:22" pos:end="778:27">actime</name></name> <operator pos:start="778:29" pos:end="778:29">=</operator> <call pos:start="778:31" pos:end="778:58"><name pos:start="778:31" pos:end="778:37">tswapal</name><argument_list pos:start="778:38" pos:end="778:58">(<argument pos:start="778:39" pos:end="778:57"><expr pos:start="778:39" pos:end="778:57"><name pos:start="778:39" pos:end="778:57"><name pos:start="778:39" pos:end="778:49">target_tbuf</name><operator pos:start="778:50" pos:end="778:51">-&gt;</operator><name pos:start="778:52" pos:end="778:57">actime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="780:17" pos:end="780:61"><expr pos:start="780:17" pos:end="780:60"><name pos:start="780:17" pos:end="780:28"><name pos:start="780:17" pos:end="780:20">tbuf</name><operator pos:start="780:21" pos:end="780:21">.</operator><name pos:start="780:22" pos:end="780:28">modtime</name></name> <operator pos:start="780:30" pos:end="780:30">=</operator> <call pos:start="780:32" pos:end="780:60"><name pos:start="780:32" pos:end="780:38">tswapal</name><argument_list pos:start="780:39" pos:end="780:60">(<argument pos:start="780:40" pos:end="780:59"><expr pos:start="780:40" pos:end="780:59"><name pos:start="780:40" pos:end="780:59"><name pos:start="780:40" pos:end="780:50">target_tbuf</name><operator pos:start="780:51" pos:end="780:52">-&gt;</operator><name pos:start="780:53" pos:end="780:59">modtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="782:17" pos:end="782:57"><expr pos:start="782:17" pos:end="782:56"><call pos:start="782:17" pos:end="782:56"><name pos:start="782:17" pos:end="782:34">unlock_user_struct</name><argument_list pos:start="782:35" pos:end="782:56">(<argument pos:start="782:36" pos:end="782:46"><expr pos:start="782:36" pos:end="782:46"><name pos:start="782:36" pos:end="782:46">target_tbuf</name></expr></argument>, <argument pos:start="782:49" pos:end="782:52"><expr pos:start="782:49" pos:end="782:52"><name pos:start="782:49" pos:end="782:52">arg2</name></expr></argument>, <argument pos:start="782:55" pos:end="782:55"><expr pos:start="782:55" pos:end="782:55"><literal type="number" pos:start="782:55" pos:end="782:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="784:17" pos:end="784:34"><expr pos:start="784:17" pos:end="784:33"><name pos:start="784:17" pos:end="784:25">host_tbuf</name> <operator pos:start="784:27" pos:end="784:27">=</operator> <operator pos:start="784:29" pos:end="784:29">&amp;</operator><name pos:start="784:30" pos:end="784:33">tbuf</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="786:15" pos:end="790:13">else <block pos:start="786:20" pos:end="790:13">{<block_content pos:start="788:17" pos:end="788:33">

                <expr_stmt pos:start="788:17" pos:end="788:33"><expr pos:start="788:17" pos:end="788:32"><name pos:start="788:17" pos:end="788:25">host_tbuf</name> <operator pos:start="788:27" pos:end="788:27">=</operator> <name pos:start="788:29" pos:end="788:32">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="792:13" pos:end="794:28"><if pos:start="792:13" pos:end="794:28">if <condition pos:start="792:16" pos:end="792:46">(<expr pos:start="792:17" pos:end="792:45"><operator pos:start="792:17" pos:end="792:17">!</operator><operator pos:start="792:18" pos:end="792:18">(</operator><name pos:start="792:19" pos:end="792:19">p</name> <operator pos:start="792:21" pos:end="792:21">=</operator> <call pos:start="792:23" pos:end="792:44"><name pos:start="792:23" pos:end="792:38">lock_user_string</name><argument_list pos:start="792:39" pos:end="792:44">(<argument pos:start="792:40" pos:end="792:43"><expr pos:start="792:40" pos:end="792:43"><name pos:start="792:40" pos:end="792:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="792:45" pos:end="792:45">)</operator></expr>)</condition><block type="pseudo" pos:start="794:17" pos:end="794:28"><block_content pos:start="794:17" pos:end="794:28">

                <goto pos:start="794:17" pos:end="794:28">goto <name pos:start="794:22" pos:end="794:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="796:13" pos:end="796:49"><expr pos:start="796:13" pos:end="796:48"><name pos:start="796:13" pos:end="796:15">ret</name> <operator pos:start="796:17" pos:end="796:17">=</operator> <call pos:start="796:19" pos:end="796:48"><name pos:start="796:19" pos:end="796:27">get_errno</name><argument_list pos:start="796:28" pos:end="796:48">(<argument pos:start="796:29" pos:end="796:47"><expr pos:start="796:29" pos:end="796:47"><call pos:start="796:29" pos:end="796:47"><name pos:start="796:29" pos:end="796:33">utime</name><argument_list pos:start="796:34" pos:end="796:47">(<argument pos:start="796:35" pos:end="796:35"><expr pos:start="796:35" pos:end="796:35"><name pos:start="796:35" pos:end="796:35">p</name></expr></argument>, <argument pos:start="796:38" pos:end="796:46"><expr pos:start="796:38" pos:end="796:46"><name pos:start="796:38" pos:end="796:46">host_tbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="798:13" pos:end="798:36"><expr pos:start="798:13" pos:end="798:35"><call pos:start="798:13" pos:end="798:35"><name pos:start="798:13" pos:end="798:23">unlock_user</name><argument_list pos:start="798:24" pos:end="798:35">(<argument pos:start="798:25" pos:end="798:25"><expr pos:start="798:25" pos:end="798:25"><name pos:start="798:25" pos:end="798:25">p</name></expr></argument>, <argument pos:start="798:28" pos:end="798:31"><expr pos:start="798:28" pos:end="798:31"><name pos:start="798:28" pos:end="798:31">arg1</name></expr></argument>, <argument pos:start="798:34" pos:end="798:34"><expr pos:start="798:34" pos:end="798:34"><literal type="number" pos:start="798:34" pos:end="798:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="802:9" pos:end="805:0">break;</break>

<cpp:endif pos:start="804:1" pos:end="804:6">#<cpp:directive pos:start="804:2" pos:end="804:6">endif</cpp:directive></cpp:endif>

    <case pos:start="806:5" pos:end="806:26">case <expr pos:start="806:10" pos:end="806:25"><name pos:start="806:10" pos:end="806:25">TARGET_NR_utimes</name></expr>:</case>

        <block pos:start="808:9" pos:end="838:9">{<block_content pos:start="810:13" pos:end="836:36">

            <decl_stmt pos:start="810:13" pos:end="810:39"><decl pos:start="810:13" pos:end="810:31"><type pos:start="810:13" pos:end="810:28"><name pos:start="810:13" pos:end="810:26"><name pos:start="810:13" pos:end="810:18">struct</name> <name pos:start="810:20" pos:end="810:26">timeval</name></name> <modifier pos:start="810:28" pos:end="810:28">*</modifier></type><name pos:start="810:29" pos:end="810:31">tvp</name></decl>, <decl pos:start="810:34" pos:end="810:38"><type ref="prev" pos:start="810:13" pos:end="810:28"/><name pos:start="810:34" pos:end="810:38"><name pos:start="810:34" pos:end="810:35">tv</name><index pos:start="810:36" pos:end="810:38">[<expr pos:start="810:37" pos:end="810:37"><literal type="number" pos:start="810:37" pos:end="810:37">2</literal></expr>]</index></name></decl>;</decl_stmt>

            <if_stmt pos:start="812:13" pos:end="828:13"><if pos:start="812:13" pos:end="824:13">if <condition pos:start="812:16" pos:end="812:21">(<expr pos:start="812:17" pos:end="812:20"><name pos:start="812:17" pos:end="812:20">arg2</name></expr>)</condition> <block pos:start="812:23" pos:end="824:13">{<block_content pos:start="814:17" pos:end="822:25">

                <if_stmt pos:start="814:17" pos:end="820:32"><if pos:start="814:17" pos:end="820:32">if <condition pos:start="814:20" pos:end="818:84">(<expr pos:start="814:21" pos:end="818:83"><call pos:start="814:21" pos:end="814:56"><name pos:start="814:21" pos:end="814:42">copy_from_user_timeval</name><argument_list pos:start="814:43" pos:end="814:56">(<argument pos:start="814:44" pos:end="814:49"><expr pos:start="814:44" pos:end="814:49"><operator pos:start="814:44" pos:end="814:44">&amp;</operator><name pos:start="814:45" pos:end="814:49"><name pos:start="814:45" pos:end="814:46">tv</name><index pos:start="814:47" pos:end="814:49">[<expr pos:start="814:48" pos:end="814:48"><literal type="number" pos:start="814:48" pos:end="814:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="814:52" pos:end="814:55"><expr pos:start="814:52" pos:end="814:55"><name pos:start="814:52" pos:end="814:55">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="816:21" pos:end="816:22">||</operator> <call pos:start="816:24" pos:end="818:83"><name pos:start="816:24" pos:end="816:45">copy_from_user_timeval</name><argument_list pos:start="816:46" pos:end="818:83">(<argument pos:start="816:47" pos:end="816:52"><expr pos:start="816:47" pos:end="816:52"><operator pos:start="816:47" pos:end="816:47">&amp;</operator><name pos:start="816:48" pos:end="816:52"><name pos:start="816:48" pos:end="816:49">tv</name><index pos:start="816:50" pos:end="816:52">[<expr pos:start="816:51" pos:end="816:51"><literal type="number" pos:start="816:51" pos:end="816:51">1</literal></expr>]</index></name></expr></argument>,

                                              <argument pos:start="818:47" pos:end="818:82"><expr pos:start="818:47" pos:end="818:82"><name pos:start="818:47" pos:end="818:50">arg2</name> <operator pos:start="818:52" pos:end="818:52">+</operator> <sizeof pos:start="818:54" pos:end="818:82">sizeof<argument_list pos:start="818:60" pos:end="818:82">(<argument pos:start="818:61" pos:end="818:81"><expr pos:start="818:61" pos:end="818:81">struct <name pos:start="818:68" pos:end="818:81">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="820:21" pos:end="820:32"><block_content pos:start="820:21" pos:end="820:32">

                    <goto pos:start="820:21" pos:end="820:32">goto <name pos:start="820:26" pos:end="820:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="822:17" pos:end="822:25"><expr pos:start="822:17" pos:end="822:24"><name pos:start="822:17" pos:end="822:19">tvp</name> <operator pos:start="822:21" pos:end="822:21">=</operator> <name pos:start="822:23" pos:end="822:24">tv</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="824:15" pos:end="828:13">else <block pos:start="824:20" pos:end="828:13">{<block_content pos:start="826:17" pos:end="826:27">

                <expr_stmt pos:start="826:17" pos:end="826:27"><expr pos:start="826:17" pos:end="826:26"><name pos:start="826:17" pos:end="826:19">tvp</name> <operator pos:start="826:21" pos:end="826:21">=</operator> <name pos:start="826:23" pos:end="826:26">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="830:13" pos:end="832:28"><if pos:start="830:13" pos:end="832:28">if <condition pos:start="830:16" pos:end="830:46">(<expr pos:start="830:17" pos:end="830:45"><operator pos:start="830:17" pos:end="830:17">!</operator><operator pos:start="830:18" pos:end="830:18">(</operator><name pos:start="830:19" pos:end="830:19">p</name> <operator pos:start="830:21" pos:end="830:21">=</operator> <call pos:start="830:23" pos:end="830:44"><name pos:start="830:23" pos:end="830:38">lock_user_string</name><argument_list pos:start="830:39" pos:end="830:44">(<argument pos:start="830:40" pos:end="830:43"><expr pos:start="830:40" pos:end="830:43"><name pos:start="830:40" pos:end="830:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="830:45" pos:end="830:45">)</operator></expr>)</condition><block type="pseudo" pos:start="832:17" pos:end="832:28"><block_content pos:start="832:17" pos:end="832:28">

                <goto pos:start="832:17" pos:end="832:28">goto <name pos:start="832:22" pos:end="832:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="834:13" pos:end="834:44"><expr pos:start="834:13" pos:end="834:43"><name pos:start="834:13" pos:end="834:15">ret</name> <operator pos:start="834:17" pos:end="834:17">=</operator> <call pos:start="834:19" pos:end="834:43"><name pos:start="834:19" pos:end="834:27">get_errno</name><argument_list pos:start="834:28" pos:end="834:43">(<argument pos:start="834:29" pos:end="834:42"><expr pos:start="834:29" pos:end="834:42"><call pos:start="834:29" pos:end="834:42"><name pos:start="834:29" pos:end="834:34">utimes</name><argument_list pos:start="834:35" pos:end="834:42">(<argument pos:start="834:36" pos:end="834:36"><expr pos:start="834:36" pos:end="834:36"><name pos:start="834:36" pos:end="834:36">p</name></expr></argument>, <argument pos:start="834:39" pos:end="834:41"><expr pos:start="834:39" pos:end="834:41"><name pos:start="834:39" pos:end="834:41">tvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="836:13" pos:end="836:36"><expr pos:start="836:13" pos:end="836:35"><call pos:start="836:13" pos:end="836:35"><name pos:start="836:13" pos:end="836:23">unlock_user</name><argument_list pos:start="836:24" pos:end="836:35">(<argument pos:start="836:25" pos:end="836:25"><expr pos:start="836:25" pos:end="836:25"><name pos:start="836:25" pos:end="836:25">p</name></expr></argument>, <argument pos:start="836:28" pos:end="836:31"><expr pos:start="836:28" pos:end="836:31"><name pos:start="836:28" pos:end="836:31">arg1</name></expr></argument>, <argument pos:start="836:34" pos:end="836:34"><expr pos:start="836:34" pos:end="836:34"><literal type="number" pos:start="836:34" pos:end="836:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="840:9" pos:end="843:0">break;</break>

<cpp:if pos:start="842:1" pos:end="842:32">#<cpp:directive pos:start="842:2" pos:end="842:3">if</cpp:directive> <expr pos:start="842:5" pos:end="842:32"><call pos:start="842:5" pos:end="842:32"><name pos:start="842:5" pos:end="842:11">defined</name><argument_list pos:start="842:12" pos:end="842:32">(<argument pos:start="842:13" pos:end="842:31"><expr pos:start="842:13" pos:end="842:31"><name pos:start="842:13" pos:end="842:31">TARGET_NR_futimesat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="844:5" pos:end="844:29">case <expr pos:start="844:10" pos:end="844:28"><name pos:start="844:10" pos:end="844:28">TARGET_NR_futimesat</name></expr>:</case>

        <block pos:start="846:9" pos:end="876:9">{<block_content pos:start="848:13" pos:end="874:36">

            <decl_stmt pos:start="848:13" pos:end="848:39"><decl pos:start="848:13" pos:end="848:31"><type pos:start="848:13" pos:end="848:28"><name pos:start="848:13" pos:end="848:26"><name pos:start="848:13" pos:end="848:18">struct</name> <name pos:start="848:20" pos:end="848:26">timeval</name></name> <modifier pos:start="848:28" pos:end="848:28">*</modifier></type><name pos:start="848:29" pos:end="848:31">tvp</name></decl>, <decl pos:start="848:34" pos:end="848:38"><type ref="prev" pos:start="848:13" pos:end="848:28"/><name pos:start="848:34" pos:end="848:38"><name pos:start="848:34" pos:end="848:35">tv</name><index pos:start="848:36" pos:end="848:38">[<expr pos:start="848:37" pos:end="848:37"><literal type="number" pos:start="848:37" pos:end="848:37">2</literal></expr>]</index></name></decl>;</decl_stmt>

            <if_stmt pos:start="850:13" pos:end="866:13"><if pos:start="850:13" pos:end="862:13">if <condition pos:start="850:16" pos:end="850:21">(<expr pos:start="850:17" pos:end="850:20"><name pos:start="850:17" pos:end="850:20">arg3</name></expr>)</condition> <block pos:start="850:23" pos:end="862:13">{<block_content pos:start="852:17" pos:end="860:25">

                <if_stmt pos:start="852:17" pos:end="858:32"><if pos:start="852:17" pos:end="858:32">if <condition pos:start="852:20" pos:end="856:84">(<expr pos:start="852:21" pos:end="856:83"><call pos:start="852:21" pos:end="852:56"><name pos:start="852:21" pos:end="852:42">copy_from_user_timeval</name><argument_list pos:start="852:43" pos:end="852:56">(<argument pos:start="852:44" pos:end="852:49"><expr pos:start="852:44" pos:end="852:49"><operator pos:start="852:44" pos:end="852:44">&amp;</operator><name pos:start="852:45" pos:end="852:49"><name pos:start="852:45" pos:end="852:46">tv</name><index pos:start="852:47" pos:end="852:49">[<expr pos:start="852:48" pos:end="852:48"><literal type="number" pos:start="852:48" pos:end="852:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="852:52" pos:end="852:55"><expr pos:start="852:52" pos:end="852:55"><name pos:start="852:52" pos:end="852:55">arg3</name></expr></argument>)</argument_list></call>

                    <operator pos:start="854:21" pos:end="854:22">||</operator> <call pos:start="854:24" pos:end="856:83"><name pos:start="854:24" pos:end="854:45">copy_from_user_timeval</name><argument_list pos:start="854:46" pos:end="856:83">(<argument pos:start="854:47" pos:end="854:52"><expr pos:start="854:47" pos:end="854:52"><operator pos:start="854:47" pos:end="854:47">&amp;</operator><name pos:start="854:48" pos:end="854:52"><name pos:start="854:48" pos:end="854:49">tv</name><index pos:start="854:50" pos:end="854:52">[<expr pos:start="854:51" pos:end="854:51"><literal type="number" pos:start="854:51" pos:end="854:51">1</literal></expr>]</index></name></expr></argument>,

                                              <argument pos:start="856:47" pos:end="856:82"><expr pos:start="856:47" pos:end="856:82"><name pos:start="856:47" pos:end="856:50">arg3</name> <operator pos:start="856:52" pos:end="856:52">+</operator> <sizeof pos:start="856:54" pos:end="856:82">sizeof<argument_list pos:start="856:60" pos:end="856:82">(<argument pos:start="856:61" pos:end="856:81"><expr pos:start="856:61" pos:end="856:81">struct <name pos:start="856:68" pos:end="856:81">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="858:21" pos:end="858:32"><block_content pos:start="858:21" pos:end="858:32">

                    <goto pos:start="858:21" pos:end="858:32">goto <name pos:start="858:26" pos:end="858:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="860:17" pos:end="860:25"><expr pos:start="860:17" pos:end="860:24"><name pos:start="860:17" pos:end="860:19">tvp</name> <operator pos:start="860:21" pos:end="860:21">=</operator> <name pos:start="860:23" pos:end="860:24">tv</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="862:15" pos:end="866:13">else <block pos:start="862:20" pos:end="866:13">{<block_content pos:start="864:17" pos:end="864:27">

                <expr_stmt pos:start="864:17" pos:end="864:27"><expr pos:start="864:17" pos:end="864:26"><name pos:start="864:17" pos:end="864:19">tvp</name> <operator pos:start="864:21" pos:end="864:21">=</operator> <name pos:start="864:23" pos:end="864:26">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="868:13" pos:end="870:28"><if pos:start="868:13" pos:end="870:28">if <condition pos:start="868:16" pos:end="868:46">(<expr pos:start="868:17" pos:end="868:45"><operator pos:start="868:17" pos:end="868:17">!</operator><operator pos:start="868:18" pos:end="868:18">(</operator><name pos:start="868:19" pos:end="868:19">p</name> <operator pos:start="868:21" pos:end="868:21">=</operator> <call pos:start="868:23" pos:end="868:44"><name pos:start="868:23" pos:end="868:38">lock_user_string</name><argument_list pos:start="868:39" pos:end="868:44">(<argument pos:start="868:40" pos:end="868:43"><expr pos:start="868:40" pos:end="868:43"><name pos:start="868:40" pos:end="868:43">arg2</name></expr></argument>)</argument_list></call><operator pos:start="868:45" pos:end="868:45">)</operator></expr>)</condition><block type="pseudo" pos:start="870:17" pos:end="870:28"><block_content pos:start="870:17" pos:end="870:28">

                <goto pos:start="870:17" pos:end="870:28">goto <name pos:start="870:22" pos:end="870:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="872:13" pos:end="872:59"><expr pos:start="872:13" pos:end="872:58"><name pos:start="872:13" pos:end="872:15">ret</name> <operator pos:start="872:17" pos:end="872:17">=</operator> <call pos:start="872:19" pos:end="872:58"><name pos:start="872:19" pos:end="872:27">get_errno</name><argument_list pos:start="872:28" pos:end="872:58">(<argument pos:start="872:29" pos:end="872:57"><expr pos:start="872:29" pos:end="872:57"><call pos:start="872:29" pos:end="872:57"><name pos:start="872:29" pos:end="872:37">futimesat</name><argument_list pos:start="872:38" pos:end="872:57">(<argument pos:start="872:39" pos:end="872:42"><expr pos:start="872:39" pos:end="872:42"><name pos:start="872:39" pos:end="872:42">arg1</name></expr></argument>, <argument pos:start="872:45" pos:end="872:51"><expr pos:start="872:45" pos:end="872:51"><call pos:start="872:45" pos:end="872:51"><name pos:start="872:45" pos:end="872:48">path</name><argument_list pos:start="872:49" pos:end="872:51">(<argument pos:start="872:50" pos:end="872:50"><expr pos:start="872:50" pos:end="872:50"><name pos:start="872:50" pos:end="872:50">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="872:54" pos:end="872:56"><expr pos:start="872:54" pos:end="872:56"><name pos:start="872:54" pos:end="872:56">tvp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="874:13" pos:end="874:36"><expr pos:start="874:13" pos:end="874:35"><call pos:start="874:13" pos:end="874:35"><name pos:start="874:13" pos:end="874:23">unlock_user</name><argument_list pos:start="874:24" pos:end="874:35">(<argument pos:start="874:25" pos:end="874:25"><expr pos:start="874:25" pos:end="874:25"><name pos:start="874:25" pos:end="874:25">p</name></expr></argument>, <argument pos:start="874:28" pos:end="874:31"><expr pos:start="874:28" pos:end="874:31"><name pos:start="874:28" pos:end="874:31">arg2</name></expr></argument>, <argument pos:start="874:34" pos:end="874:34"><expr pos:start="874:34" pos:end="874:34"><literal type="number" pos:start="874:34" pos:end="874:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="878:9" pos:end="883:0">break;</break>

<cpp:endif pos:start="880:1" pos:end="880:6">#<cpp:directive pos:start="880:2" pos:end="880:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="882:1" pos:end="882:21">#<cpp:directive pos:start="882:2" pos:end="882:6">ifdef</cpp:directive> <name pos:start="882:8" pos:end="882:21">TARGET_NR_stty</name></cpp:ifdef>

    <case pos:start="884:5" pos:end="884:24">case <expr pos:start="884:10" pos:end="884:23"><name pos:start="884:10" pos:end="884:23">TARGET_NR_stty</name></expr>:</case>

        <goto pos:start="886:9" pos:end="891:0">goto <name pos:start="886:14" pos:end="886:26">unimplemented</name>;</goto>

<cpp:endif pos:start="888:1" pos:end="888:6">#<cpp:directive pos:start="888:2" pos:end="888:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="890:1" pos:end="890:21">#<cpp:directive pos:start="890:2" pos:end="890:6">ifdef</cpp:directive> <name pos:start="890:8" pos:end="890:21">TARGET_NR_gtty</name></cpp:ifdef>

    <case pos:start="892:5" pos:end="892:24">case <expr pos:start="892:10" pos:end="892:23"><name pos:start="892:10" pos:end="892:23">TARGET_NR_gtty</name></expr>:</case>

        <goto pos:start="894:9" pos:end="897:0">goto <name pos:start="894:14" pos:end="894:26">unimplemented</name>;</goto>

<cpp:endif pos:start="896:1" pos:end="896:6">#<cpp:directive pos:start="896:2" pos:end="896:6">endif</cpp:directive></cpp:endif>

    <case pos:start="898:5" pos:end="898:26">case <expr pos:start="898:10" pos:end="898:25"><name pos:start="898:10" pos:end="898:25">TARGET_NR_access</name></expr>:</case>

        <if_stmt pos:start="900:9" pos:end="902:24"><if pos:start="900:9" pos:end="902:24">if <condition pos:start="900:12" pos:end="900:42">(<expr pos:start="900:13" pos:end="900:41"><operator pos:start="900:13" pos:end="900:13">!</operator><operator pos:start="900:14" pos:end="900:14">(</operator><name pos:start="900:15" pos:end="900:15">p</name> <operator pos:start="900:17" pos:end="900:17">=</operator> <call pos:start="900:19" pos:end="900:40"><name pos:start="900:19" pos:end="900:34">lock_user_string</name><argument_list pos:start="900:35" pos:end="900:40">(<argument pos:start="900:36" pos:end="900:39"><expr pos:start="900:36" pos:end="900:39"><name pos:start="900:36" pos:end="900:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="900:41" pos:end="900:41">)</operator></expr>)</condition><block type="pseudo" pos:start="902:13" pos:end="902:24"><block_content pos:start="902:13" pos:end="902:24">

            <goto pos:start="902:13" pos:end="902:24">goto <name pos:start="902:18" pos:end="902:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="904:9" pos:end="904:47"><expr pos:start="904:9" pos:end="904:46"><name pos:start="904:9" pos:end="904:11">ret</name> <operator pos:start="904:13" pos:end="904:13">=</operator> <call pos:start="904:15" pos:end="904:46"><name pos:start="904:15" pos:end="904:23">get_errno</name><argument_list pos:start="904:24" pos:end="904:46">(<argument pos:start="904:25" pos:end="904:45"><expr pos:start="904:25" pos:end="904:45"><call pos:start="904:25" pos:end="904:45"><name pos:start="904:25" pos:end="904:30">access</name><argument_list pos:start="904:31" pos:end="904:45">(<argument pos:start="904:32" pos:end="904:38"><expr pos:start="904:32" pos:end="904:38"><call pos:start="904:32" pos:end="904:38"><name pos:start="904:32" pos:end="904:35">path</name><argument_list pos:start="904:36" pos:end="904:38">(<argument pos:start="904:37" pos:end="904:37"><expr pos:start="904:37" pos:end="904:37"><name pos:start="904:37" pos:end="904:37">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="904:41" pos:end="904:44"><expr pos:start="904:41" pos:end="904:44"><name pos:start="904:41" pos:end="904:44">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="906:9" pos:end="906:32"><expr pos:start="906:9" pos:end="906:31"><call pos:start="906:9" pos:end="906:31"><name pos:start="906:9" pos:end="906:19">unlock_user</name><argument_list pos:start="906:20" pos:end="906:31">(<argument pos:start="906:21" pos:end="906:21"><expr pos:start="906:21" pos:end="906:21"><name pos:start="906:21" pos:end="906:21">p</name></expr></argument>, <argument pos:start="906:24" pos:end="906:27"><expr pos:start="906:24" pos:end="906:27"><name pos:start="906:24" pos:end="906:27">arg1</name></expr></argument>, <argument pos:start="906:30" pos:end="906:30"><expr pos:start="906:30" pos:end="906:30"><literal type="number" pos:start="906:30" pos:end="906:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="908:9" pos:end="911:0">break;</break>

<cpp:if pos:start="910:1" pos:end="910:59">#<cpp:directive pos:start="910:2" pos:end="910:3">if</cpp:directive> <expr pos:start="910:5" pos:end="910:59"><call pos:start="910:5" pos:end="910:32"><name pos:start="910:5" pos:end="910:11">defined</name><argument_list pos:start="910:12" pos:end="910:32">(<argument pos:start="910:13" pos:end="910:31"><expr pos:start="910:13" pos:end="910:31"><name pos:start="910:13" pos:end="910:31">TARGET_NR_faccessat</name></expr></argument>)</argument_list></call> <operator pos:start="910:34" pos:end="910:35">&amp;&amp;</operator> <call pos:start="910:37" pos:end="910:59"><name pos:start="910:37" pos:end="910:43">defined</name><argument_list pos:start="910:44" pos:end="910:59">(<argument pos:start="910:45" pos:end="910:58"><expr pos:start="910:45" pos:end="910:58"><name pos:start="910:45" pos:end="910:58">__NR_faccessat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="912:5" pos:end="912:29">case <expr pos:start="912:10" pos:end="912:28"><name pos:start="912:10" pos:end="912:28">TARGET_NR_faccessat</name></expr>:</case>

        <if_stmt pos:start="914:9" pos:end="916:24"><if pos:start="914:9" pos:end="916:24">if <condition pos:start="914:12" pos:end="914:42">(<expr pos:start="914:13" pos:end="914:41"><operator pos:start="914:13" pos:end="914:13">!</operator><operator pos:start="914:14" pos:end="914:14">(</operator><name pos:start="914:15" pos:end="914:15">p</name> <operator pos:start="914:17" pos:end="914:17">=</operator> <call pos:start="914:19" pos:end="914:40"><name pos:start="914:19" pos:end="914:34">lock_user_string</name><argument_list pos:start="914:35" pos:end="914:40">(<argument pos:start="914:36" pos:end="914:39"><expr pos:start="914:36" pos:end="914:39"><name pos:start="914:36" pos:end="914:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="914:41" pos:end="914:41">)</operator></expr>)</condition><block type="pseudo" pos:start="916:13" pos:end="916:24"><block_content pos:start="916:13" pos:end="916:24">

            <goto pos:start="916:13" pos:end="916:24">goto <name pos:start="916:18" pos:end="916:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="918:9" pos:end="918:53"><expr pos:start="918:9" pos:end="918:52"><name pos:start="918:9" pos:end="918:11">ret</name> <operator pos:start="918:13" pos:end="918:13">=</operator> <call pos:start="918:15" pos:end="918:52"><name pos:start="918:15" pos:end="918:23">get_errno</name><argument_list pos:start="918:24" pos:end="918:52">(<argument pos:start="918:25" pos:end="918:51"><expr pos:start="918:25" pos:end="918:51"><call pos:start="918:25" pos:end="918:51"><name pos:start="918:25" pos:end="918:33">faccessat</name><argument_list pos:start="918:34" pos:end="918:51">(<argument pos:start="918:35" pos:end="918:38"><expr pos:start="918:35" pos:end="918:38"><name pos:start="918:35" pos:end="918:38">arg1</name></expr></argument>, <argument pos:start="918:41" pos:end="918:41"><expr pos:start="918:41" pos:end="918:41"><name pos:start="918:41" pos:end="918:41">p</name></expr></argument>, <argument pos:start="918:44" pos:end="918:47"><expr pos:start="918:44" pos:end="918:47"><name pos:start="918:44" pos:end="918:47">arg3</name></expr></argument>, <argument pos:start="918:50" pos:end="918:50"><expr pos:start="918:50" pos:end="918:50"><literal type="number" pos:start="918:50" pos:end="918:50">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="920:9" pos:end="920:32"><expr pos:start="920:9" pos:end="920:31"><call pos:start="920:9" pos:end="920:31"><name pos:start="920:9" pos:end="920:19">unlock_user</name><argument_list pos:start="920:20" pos:end="920:31">(<argument pos:start="920:21" pos:end="920:21"><expr pos:start="920:21" pos:end="920:21"><name pos:start="920:21" pos:end="920:21">p</name></expr></argument>, <argument pos:start="920:24" pos:end="920:27"><expr pos:start="920:24" pos:end="920:27"><name pos:start="920:24" pos:end="920:27">arg2</name></expr></argument>, <argument pos:start="920:30" pos:end="920:30"><expr pos:start="920:30" pos:end="920:30"><literal type="number" pos:start="920:30" pos:end="920:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="922:9" pos:end="927:0">break;</break>

<cpp:endif pos:start="924:1" pos:end="924:6">#<cpp:directive pos:start="924:2" pos:end="924:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="926:1" pos:end="926:21">#<cpp:directive pos:start="926:2" pos:end="926:6">ifdef</cpp:directive> <name pos:start="926:8" pos:end="926:21">TARGET_NR_nice</name></cpp:ifdef> <comment type="block" pos:start="926:23" pos:end="926:40">/* not on alpha */</comment>

    <case pos:start="928:5" pos:end="928:24">case <expr pos:start="928:10" pos:end="928:23"><name pos:start="928:10" pos:end="928:23">TARGET_NR_nice</name></expr>:</case>

        <expr_stmt pos:start="930:9" pos:end="930:36"><expr pos:start="930:9" pos:end="930:35"><name pos:start="930:9" pos:end="930:11">ret</name> <operator pos:start="930:13" pos:end="930:13">=</operator> <call pos:start="930:15" pos:end="930:35"><name pos:start="930:15" pos:end="930:23">get_errno</name><argument_list pos:start="930:24" pos:end="930:35">(<argument pos:start="930:25" pos:end="930:34"><expr pos:start="930:25" pos:end="930:34"><call pos:start="930:25" pos:end="930:34"><name pos:start="930:25" pos:end="930:28">nice</name><argument_list pos:start="930:29" pos:end="930:34">(<argument pos:start="930:30" pos:end="930:33"><expr pos:start="930:30" pos:end="930:33"><name pos:start="930:30" pos:end="930:33">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="932:9" pos:end="937:0">break;</break>

<cpp:endif pos:start="934:1" pos:end="934:6">#<cpp:directive pos:start="934:2" pos:end="934:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="936:1" pos:end="936:22">#<cpp:directive pos:start="936:2" pos:end="936:6">ifdef</cpp:directive> <name pos:start="936:8" pos:end="936:22">TARGET_NR_ftime</name></cpp:ifdef>

    <case pos:start="938:5" pos:end="938:25">case <expr pos:start="938:10" pos:end="938:24"><name pos:start="938:10" pos:end="938:24">TARGET_NR_ftime</name></expr>:</case>

        <goto pos:start="940:9" pos:end="943:0">goto <name pos:start="940:14" pos:end="940:26">unimplemented</name>;</goto>

<cpp:endif pos:start="942:1" pos:end="942:6">#<cpp:directive pos:start="942:2" pos:end="942:6">endif</cpp:directive></cpp:endif>

    <case pos:start="944:5" pos:end="944:24">case <expr pos:start="944:10" pos:end="944:23"><name pos:start="944:10" pos:end="944:23">TARGET_NR_sync</name></expr>:</case>

        <expr_stmt pos:start="946:9" pos:end="946:15"><expr pos:start="946:9" pos:end="946:14"><call pos:start="946:9" pos:end="946:14"><name pos:start="946:9" pos:end="946:12">sync</name><argument_list pos:start="946:13" pos:end="946:14">()</argument_list></call></expr>;</expr_stmt>


        <break pos:start="949:9" pos:end="949:14">break;</break>

    <case pos:start="951:5" pos:end="951:24">case <expr pos:start="951:10" pos:end="951:23"><name pos:start="951:10" pos:end="951:23">TARGET_NR_kill</name></expr>:</case>

        <expr_stmt pos:start="953:9" pos:end="953:65"><expr pos:start="953:9" pos:end="953:64"><name pos:start="953:9" pos:end="953:11">ret</name> <operator pos:start="953:13" pos:end="953:13">=</operator> <call pos:start="953:15" pos:end="953:64"><name pos:start="953:15" pos:end="953:23">get_errno</name><argument_list pos:start="953:24" pos:end="953:64">(<argument pos:start="953:25" pos:end="953:63"><expr pos:start="953:25" pos:end="953:63"><call pos:start="953:25" pos:end="953:63"><name pos:start="953:25" pos:end="953:28">kill</name><argument_list pos:start="953:29" pos:end="953:63">(<argument pos:start="953:30" pos:end="953:33"><expr pos:start="953:30" pos:end="953:33"><name pos:start="953:30" pos:end="953:33">arg1</name></expr></argument>, <argument pos:start="953:36" pos:end="953:62"><expr pos:start="953:36" pos:end="953:62"><call pos:start="953:36" pos:end="953:62"><name pos:start="953:36" pos:end="953:56">target_to_host_signal</name><argument_list pos:start="953:57" pos:end="953:62">(<argument pos:start="953:58" pos:end="953:61"><expr pos:start="953:58" pos:end="953:61"><name pos:start="953:58" pos:end="953:61">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="955:9" pos:end="955:14">break;</break>

    <case pos:start="957:5" pos:end="957:26">case <expr pos:start="957:10" pos:end="957:25"><name pos:start="957:10" pos:end="957:25">TARGET_NR_rename</name></expr>:</case>

        <block pos:start="959:9" pos:end="979:9">{<block_content pos:start="961:13" pos:end="977:36">

            <decl_stmt pos:start="961:13" pos:end="961:21"><decl pos:start="961:13" pos:end="961:20"><type pos:start="961:13" pos:end="961:18"><name pos:start="961:13" pos:end="961:16">void</name> <modifier pos:start="961:18" pos:end="961:18">*</modifier></type><name pos:start="961:19" pos:end="961:20">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="963:13" pos:end="963:39"><expr pos:start="963:13" pos:end="963:38"><name pos:start="963:13" pos:end="963:13">p</name> <operator pos:start="963:15" pos:end="963:15">=</operator> <call pos:start="963:17" pos:end="963:38"><name pos:start="963:17" pos:end="963:32">lock_user_string</name><argument_list pos:start="963:33" pos:end="963:38">(<argument pos:start="963:34" pos:end="963:37"><expr pos:start="963:34" pos:end="963:37"><name pos:start="963:34" pos:end="963:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="965:13" pos:end="965:40"><expr pos:start="965:13" pos:end="965:39"><name pos:start="965:13" pos:end="965:14">p2</name> <operator pos:start="965:16" pos:end="965:16">=</operator> <call pos:start="965:18" pos:end="965:39"><name pos:start="965:18" pos:end="965:33">lock_user_string</name><argument_list pos:start="965:34" pos:end="965:39">(<argument pos:start="965:35" pos:end="965:38"><expr pos:start="965:35" pos:end="965:38"><name pos:start="965:35" pos:end="965:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="967:13" pos:end="973:47"><if pos:start="967:13" pos:end="969:37">if <condition pos:start="967:16" pos:end="967:26">(<expr pos:start="967:17" pos:end="967:25"><operator pos:start="967:17" pos:end="967:17">!</operator><name pos:start="967:18" pos:end="967:18">p</name> <operator pos:start="967:20" pos:end="967:21">||</operator> <operator pos:start="967:23" pos:end="967:23">!</operator><name pos:start="967:24" pos:end="967:25">p2</name></expr>)</condition><block type="pseudo" pos:start="969:17" pos:end="969:37"><block_content pos:start="969:17" pos:end="969:37">

                <expr_stmt pos:start="969:17" pos:end="969:37"><expr pos:start="969:17" pos:end="969:36"><name pos:start="969:17" pos:end="969:19">ret</name> <operator pos:start="969:21" pos:end="969:21">=</operator> <operator pos:start="969:23" pos:end="969:23">-</operator><name pos:start="969:24" pos:end="969:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="971:13" pos:end="973:47">else<block type="pseudo" pos:start="973:17" pos:end="973:47"><block_content pos:start="973:17" pos:end="973:47">

                <expr_stmt pos:start="973:17" pos:end="973:47"><expr pos:start="973:17" pos:end="973:46"><name pos:start="973:17" pos:end="973:19">ret</name> <operator pos:start="973:21" pos:end="973:21">=</operator> <call pos:start="973:23" pos:end="973:46"><name pos:start="973:23" pos:end="973:31">get_errno</name><argument_list pos:start="973:32" pos:end="973:46">(<argument pos:start="973:33" pos:end="973:45"><expr pos:start="973:33" pos:end="973:45"><call pos:start="973:33" pos:end="973:45"><name pos:start="973:33" pos:end="973:38">rename</name><argument_list pos:start="973:39" pos:end="973:45">(<argument pos:start="973:40" pos:end="973:40"><expr pos:start="973:40" pos:end="973:40"><name pos:start="973:40" pos:end="973:40">p</name></expr></argument>, <argument pos:start="973:43" pos:end="973:44"><expr pos:start="973:43" pos:end="973:44"><name pos:start="973:43" pos:end="973:44">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="975:13" pos:end="975:37"><expr pos:start="975:13" pos:end="975:36"><call pos:start="975:13" pos:end="975:36"><name pos:start="975:13" pos:end="975:23">unlock_user</name><argument_list pos:start="975:24" pos:end="975:36">(<argument pos:start="975:25" pos:end="975:26"><expr pos:start="975:25" pos:end="975:26"><name pos:start="975:25" pos:end="975:26">p2</name></expr></argument>, <argument pos:start="975:29" pos:end="975:32"><expr pos:start="975:29" pos:end="975:32"><name pos:start="975:29" pos:end="975:32">arg2</name></expr></argument>, <argument pos:start="975:35" pos:end="975:35"><expr pos:start="975:35" pos:end="975:35"><literal type="number" pos:start="975:35" pos:end="975:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="977:13" pos:end="977:36"><expr pos:start="977:13" pos:end="977:35"><call pos:start="977:13" pos:end="977:35"><name pos:start="977:13" pos:end="977:23">unlock_user</name><argument_list pos:start="977:24" pos:end="977:35">(<argument pos:start="977:25" pos:end="977:25"><expr pos:start="977:25" pos:end="977:25"><name pos:start="977:25" pos:end="977:25">p</name></expr></argument>, <argument pos:start="977:28" pos:end="977:31"><expr pos:start="977:28" pos:end="977:31"><name pos:start="977:28" pos:end="977:31">arg1</name></expr></argument>, <argument pos:start="977:34" pos:end="977:34"><expr pos:start="977:34" pos:end="977:34"><literal type="number" pos:start="977:34" pos:end="977:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="981:9" pos:end="984:0">break;</break>

<cpp:if pos:start="983:1" pos:end="983:31">#<cpp:directive pos:start="983:2" pos:end="983:3">if</cpp:directive> <expr pos:start="983:5" pos:end="983:31"><call pos:start="983:5" pos:end="983:31"><name pos:start="983:5" pos:end="983:11">defined</name><argument_list pos:start="983:12" pos:end="983:31">(<argument pos:start="983:13" pos:end="983:30"><expr pos:start="983:13" pos:end="983:30"><name pos:start="983:13" pos:end="983:30">TARGET_NR_renameat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="985:5" pos:end="985:28">case <expr pos:start="985:10" pos:end="985:27"><name pos:start="985:10" pos:end="985:27">TARGET_NR_renameat</name></expr>:</case>

        <block pos:start="987:9" pos:end="1007:9">{<block_content pos:start="989:13" pos:end="1005:36">

            <decl_stmt pos:start="989:13" pos:end="989:21"><decl pos:start="989:13" pos:end="989:20"><type pos:start="989:13" pos:end="989:18"><name pos:start="989:13" pos:end="989:16">void</name> <modifier pos:start="989:18" pos:end="989:18">*</modifier></type><name pos:start="989:19" pos:end="989:20">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="991:13" pos:end="991:40"><expr pos:start="991:13" pos:end="991:39"><name pos:start="991:13" pos:end="991:13">p</name>  <operator pos:start="991:16" pos:end="991:16">=</operator> <call pos:start="991:18" pos:end="991:39"><name pos:start="991:18" pos:end="991:33">lock_user_string</name><argument_list pos:start="991:34" pos:end="991:39">(<argument pos:start="991:35" pos:end="991:38"><expr pos:start="991:35" pos:end="991:38"><name pos:start="991:35" pos:end="991:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="993:13" pos:end="993:40"><expr pos:start="993:13" pos:end="993:39"><name pos:start="993:13" pos:end="993:14">p2</name> <operator pos:start="993:16" pos:end="993:16">=</operator> <call pos:start="993:18" pos:end="993:39"><name pos:start="993:18" pos:end="993:33">lock_user_string</name><argument_list pos:start="993:34" pos:end="993:39">(<argument pos:start="993:35" pos:end="993:38"><expr pos:start="993:35" pos:end="993:38"><name pos:start="993:35" pos:end="993:38">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="995:13" pos:end="1001:61"><if pos:start="995:13" pos:end="997:37">if <condition pos:start="995:16" pos:end="995:26">(<expr pos:start="995:17" pos:end="995:25"><operator pos:start="995:17" pos:end="995:17">!</operator><name pos:start="995:18" pos:end="995:18">p</name> <operator pos:start="995:20" pos:end="995:21">||</operator> <operator pos:start="995:23" pos:end="995:23">!</operator><name pos:start="995:24" pos:end="995:25">p2</name></expr>)</condition><block type="pseudo" pos:start="997:17" pos:end="997:37"><block_content pos:start="997:17" pos:end="997:37">

                <expr_stmt pos:start="997:17" pos:end="997:37"><expr pos:start="997:17" pos:end="997:36"><name pos:start="997:17" pos:end="997:19">ret</name> <operator pos:start="997:21" pos:end="997:21">=</operator> <operator pos:start="997:23" pos:end="997:23">-</operator><name pos:start="997:24" pos:end="997:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="999:13" pos:end="1001:61">else<block type="pseudo" pos:start="1001:17" pos:end="1001:61"><block_content pos:start="1001:17" pos:end="1001:61">

                <expr_stmt pos:start="1001:17" pos:end="1001:61"><expr pos:start="1001:17" pos:end="1001:60"><name pos:start="1001:17" pos:end="1001:19">ret</name> <operator pos:start="1001:21" pos:end="1001:21">=</operator> <call pos:start="1001:23" pos:end="1001:60"><name pos:start="1001:23" pos:end="1001:31">get_errno</name><argument_list pos:start="1001:32" pos:end="1001:60">(<argument pos:start="1001:33" pos:end="1001:59"><expr pos:start="1001:33" pos:end="1001:59"><call pos:start="1001:33" pos:end="1001:59"><name pos:start="1001:33" pos:end="1001:40">renameat</name><argument_list pos:start="1001:41" pos:end="1001:59">(<argument pos:start="1001:42" pos:end="1001:45"><expr pos:start="1001:42" pos:end="1001:45"><name pos:start="1001:42" pos:end="1001:45">arg1</name></expr></argument>, <argument pos:start="1001:48" pos:end="1001:48"><expr pos:start="1001:48" pos:end="1001:48"><name pos:start="1001:48" pos:end="1001:48">p</name></expr></argument>, <argument pos:start="1001:51" pos:end="1001:54"><expr pos:start="1001:51" pos:end="1001:54"><name pos:start="1001:51" pos:end="1001:54">arg3</name></expr></argument>, <argument pos:start="1001:57" pos:end="1001:58"><expr pos:start="1001:57" pos:end="1001:58"><name pos:start="1001:57" pos:end="1001:58">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1003:13" pos:end="1003:37"><expr pos:start="1003:13" pos:end="1003:36"><call pos:start="1003:13" pos:end="1003:36"><name pos:start="1003:13" pos:end="1003:23">unlock_user</name><argument_list pos:start="1003:24" pos:end="1003:36">(<argument pos:start="1003:25" pos:end="1003:26"><expr pos:start="1003:25" pos:end="1003:26"><name pos:start="1003:25" pos:end="1003:26">p2</name></expr></argument>, <argument pos:start="1003:29" pos:end="1003:32"><expr pos:start="1003:29" pos:end="1003:32"><name pos:start="1003:29" pos:end="1003:32">arg4</name></expr></argument>, <argument pos:start="1003:35" pos:end="1003:35"><expr pos:start="1003:35" pos:end="1003:35"><literal type="number" pos:start="1003:35" pos:end="1003:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1005:13" pos:end="1005:36"><expr pos:start="1005:13" pos:end="1005:35"><call pos:start="1005:13" pos:end="1005:35"><name pos:start="1005:13" pos:end="1005:23">unlock_user</name><argument_list pos:start="1005:24" pos:end="1005:35">(<argument pos:start="1005:25" pos:end="1005:25"><expr pos:start="1005:25" pos:end="1005:25"><name pos:start="1005:25" pos:end="1005:25">p</name></expr></argument>, <argument pos:start="1005:28" pos:end="1005:31"><expr pos:start="1005:28" pos:end="1005:31"><name pos:start="1005:28" pos:end="1005:31">arg2</name></expr></argument>, <argument pos:start="1005:34" pos:end="1005:34"><expr pos:start="1005:34" pos:end="1005:34"><literal type="number" pos:start="1005:34" pos:end="1005:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1009:9" pos:end="1012:0">break;</break>

<cpp:endif pos:start="1011:1" pos:end="1011:6">#<cpp:directive pos:start="1011:2" pos:end="1011:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1013:5" pos:end="1013:25">case <expr pos:start="1013:10" pos:end="1013:24"><name pos:start="1013:10" pos:end="1013:24">TARGET_NR_mkdir</name></expr>:</case>

        <if_stmt pos:start="1015:9" pos:end="1017:24"><if pos:start="1015:9" pos:end="1017:24">if <condition pos:start="1015:12" pos:end="1015:42">(<expr pos:start="1015:13" pos:end="1015:41"><operator pos:start="1015:13" pos:end="1015:13">!</operator><operator pos:start="1015:14" pos:end="1015:14">(</operator><name pos:start="1015:15" pos:end="1015:15">p</name> <operator pos:start="1015:17" pos:end="1015:17">=</operator> <call pos:start="1015:19" pos:end="1015:40"><name pos:start="1015:19" pos:end="1015:34">lock_user_string</name><argument_list pos:start="1015:35" pos:end="1015:40">(<argument pos:start="1015:36" pos:end="1015:39"><expr pos:start="1015:36" pos:end="1015:39"><name pos:start="1015:36" pos:end="1015:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1015:41" pos:end="1015:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1017:13" pos:end="1017:24"><block_content pos:start="1017:13" pos:end="1017:24">

            <goto pos:start="1017:13" pos:end="1017:24">goto <name pos:start="1017:18" pos:end="1017:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1019:9" pos:end="1019:40"><expr pos:start="1019:9" pos:end="1019:39"><name pos:start="1019:9" pos:end="1019:11">ret</name> <operator pos:start="1019:13" pos:end="1019:13">=</operator> <call pos:start="1019:15" pos:end="1019:39"><name pos:start="1019:15" pos:end="1019:23">get_errno</name><argument_list pos:start="1019:24" pos:end="1019:39">(<argument pos:start="1019:25" pos:end="1019:38"><expr pos:start="1019:25" pos:end="1019:38"><call pos:start="1019:25" pos:end="1019:38"><name pos:start="1019:25" pos:end="1019:29">mkdir</name><argument_list pos:start="1019:30" pos:end="1019:38">(<argument pos:start="1019:31" pos:end="1019:31"><expr pos:start="1019:31" pos:end="1019:31"><name pos:start="1019:31" pos:end="1019:31">p</name></expr></argument>, <argument pos:start="1019:34" pos:end="1019:37"><expr pos:start="1019:34" pos:end="1019:37"><name pos:start="1019:34" pos:end="1019:37">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1021:9" pos:end="1021:32"><expr pos:start="1021:9" pos:end="1021:31"><call pos:start="1021:9" pos:end="1021:31"><name pos:start="1021:9" pos:end="1021:19">unlock_user</name><argument_list pos:start="1021:20" pos:end="1021:31">(<argument pos:start="1021:21" pos:end="1021:21"><expr pos:start="1021:21" pos:end="1021:21"><name pos:start="1021:21" pos:end="1021:21">p</name></expr></argument>, <argument pos:start="1021:24" pos:end="1021:27"><expr pos:start="1021:24" pos:end="1021:27"><name pos:start="1021:24" pos:end="1021:27">arg1</name></expr></argument>, <argument pos:start="1021:30" pos:end="1021:30"><expr pos:start="1021:30" pos:end="1021:30"><literal type="number" pos:start="1021:30" pos:end="1021:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1023:9" pos:end="1026:0">break;</break>

<cpp:if pos:start="1025:1" pos:end="1025:30">#<cpp:directive pos:start="1025:2" pos:end="1025:3">if</cpp:directive> <expr pos:start="1025:5" pos:end="1025:30"><call pos:start="1025:5" pos:end="1025:30"><name pos:start="1025:5" pos:end="1025:11">defined</name><argument_list pos:start="1025:12" pos:end="1025:30">(<argument pos:start="1025:13" pos:end="1025:29"><expr pos:start="1025:13" pos:end="1025:29"><name pos:start="1025:13" pos:end="1025:29">TARGET_NR_mkdirat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="1027:5" pos:end="1027:27">case <expr pos:start="1027:10" pos:end="1027:26"><name pos:start="1027:10" pos:end="1027:26">TARGET_NR_mkdirat</name></expr>:</case>

        <if_stmt pos:start="1029:9" pos:end="1031:24"><if pos:start="1029:9" pos:end="1031:24">if <condition pos:start="1029:12" pos:end="1029:42">(<expr pos:start="1029:13" pos:end="1029:41"><operator pos:start="1029:13" pos:end="1029:13">!</operator><operator pos:start="1029:14" pos:end="1029:14">(</operator><name pos:start="1029:15" pos:end="1029:15">p</name> <operator pos:start="1029:17" pos:end="1029:17">=</operator> <call pos:start="1029:19" pos:end="1029:40"><name pos:start="1029:19" pos:end="1029:34">lock_user_string</name><argument_list pos:start="1029:35" pos:end="1029:40">(<argument pos:start="1029:36" pos:end="1029:39"><expr pos:start="1029:36" pos:end="1029:39"><name pos:start="1029:36" pos:end="1029:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="1029:41" pos:end="1029:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1031:13" pos:end="1031:24"><block_content pos:start="1031:13" pos:end="1031:24">

            <goto pos:start="1031:13" pos:end="1031:24">goto <name pos:start="1031:18" pos:end="1031:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1033:9" pos:end="1033:48"><expr pos:start="1033:9" pos:end="1033:47"><name pos:start="1033:9" pos:end="1033:11">ret</name> <operator pos:start="1033:13" pos:end="1033:13">=</operator> <call pos:start="1033:15" pos:end="1033:47"><name pos:start="1033:15" pos:end="1033:23">get_errno</name><argument_list pos:start="1033:24" pos:end="1033:47">(<argument pos:start="1033:25" pos:end="1033:46"><expr pos:start="1033:25" pos:end="1033:46"><call pos:start="1033:25" pos:end="1033:46"><name pos:start="1033:25" pos:end="1033:31">mkdirat</name><argument_list pos:start="1033:32" pos:end="1033:46">(<argument pos:start="1033:33" pos:end="1033:36"><expr pos:start="1033:33" pos:end="1033:36"><name pos:start="1033:33" pos:end="1033:36">arg1</name></expr></argument>, <argument pos:start="1033:39" pos:end="1033:39"><expr pos:start="1033:39" pos:end="1033:39"><name pos:start="1033:39" pos:end="1033:39">p</name></expr></argument>, <argument pos:start="1033:42" pos:end="1033:45"><expr pos:start="1033:42" pos:end="1033:45"><name pos:start="1033:42" pos:end="1033:45">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1035:9" pos:end="1035:32"><expr pos:start="1035:9" pos:end="1035:31"><call pos:start="1035:9" pos:end="1035:31"><name pos:start="1035:9" pos:end="1035:19">unlock_user</name><argument_list pos:start="1035:20" pos:end="1035:31">(<argument pos:start="1035:21" pos:end="1035:21"><expr pos:start="1035:21" pos:end="1035:21"><name pos:start="1035:21" pos:end="1035:21">p</name></expr></argument>, <argument pos:start="1035:24" pos:end="1035:27"><expr pos:start="1035:24" pos:end="1035:27"><name pos:start="1035:24" pos:end="1035:27">arg2</name></expr></argument>, <argument pos:start="1035:30" pos:end="1035:30"><expr pos:start="1035:30" pos:end="1035:30"><literal type="number" pos:start="1035:30" pos:end="1035:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1037:9" pos:end="1040:0">break;</break>

<cpp:endif pos:start="1039:1" pos:end="1039:6">#<cpp:directive pos:start="1039:2" pos:end="1039:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1041:5" pos:end="1041:25">case <expr pos:start="1041:10" pos:end="1041:24"><name pos:start="1041:10" pos:end="1041:24">TARGET_NR_rmdir</name></expr>:</case>

        <if_stmt pos:start="1043:9" pos:end="1045:24"><if pos:start="1043:9" pos:end="1045:24">if <condition pos:start="1043:12" pos:end="1043:42">(<expr pos:start="1043:13" pos:end="1043:41"><operator pos:start="1043:13" pos:end="1043:13">!</operator><operator pos:start="1043:14" pos:end="1043:14">(</operator><name pos:start="1043:15" pos:end="1043:15">p</name> <operator pos:start="1043:17" pos:end="1043:17">=</operator> <call pos:start="1043:19" pos:end="1043:40"><name pos:start="1043:19" pos:end="1043:34">lock_user_string</name><argument_list pos:start="1043:35" pos:end="1043:40">(<argument pos:start="1043:36" pos:end="1043:39"><expr pos:start="1043:36" pos:end="1043:39"><name pos:start="1043:36" pos:end="1043:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1043:41" pos:end="1043:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1045:13" pos:end="1045:24"><block_content pos:start="1045:13" pos:end="1045:24">

            <goto pos:start="1045:13" pos:end="1045:24">goto <name pos:start="1045:18" pos:end="1045:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1047:9" pos:end="1047:34"><expr pos:start="1047:9" pos:end="1047:33"><name pos:start="1047:9" pos:end="1047:11">ret</name> <operator pos:start="1047:13" pos:end="1047:13">=</operator> <call pos:start="1047:15" pos:end="1047:33"><name pos:start="1047:15" pos:end="1047:23">get_errno</name><argument_list pos:start="1047:24" pos:end="1047:33">(<argument pos:start="1047:25" pos:end="1047:32"><expr pos:start="1047:25" pos:end="1047:32"><call pos:start="1047:25" pos:end="1047:32"><name pos:start="1047:25" pos:end="1047:29">rmdir</name><argument_list pos:start="1047:30" pos:end="1047:32">(<argument pos:start="1047:31" pos:end="1047:31"><expr pos:start="1047:31" pos:end="1047:31"><name pos:start="1047:31" pos:end="1047:31">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1049:9" pos:end="1049:32"><expr pos:start="1049:9" pos:end="1049:31"><call pos:start="1049:9" pos:end="1049:31"><name pos:start="1049:9" pos:end="1049:19">unlock_user</name><argument_list pos:start="1049:20" pos:end="1049:31">(<argument pos:start="1049:21" pos:end="1049:21"><expr pos:start="1049:21" pos:end="1049:21"><name pos:start="1049:21" pos:end="1049:21">p</name></expr></argument>, <argument pos:start="1049:24" pos:end="1049:27"><expr pos:start="1049:24" pos:end="1049:27"><name pos:start="1049:24" pos:end="1049:27">arg1</name></expr></argument>, <argument pos:start="1049:30" pos:end="1049:30"><expr pos:start="1049:30" pos:end="1049:30"><literal type="number" pos:start="1049:30" pos:end="1049:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1051:9" pos:end="1051:14">break;</break>

    <case pos:start="1053:5" pos:end="1053:23">case <expr pos:start="1053:10" pos:end="1053:22"><name pos:start="1053:10" pos:end="1053:22">TARGET_NR_dup</name></expr>:</case>

        <expr_stmt pos:start="1055:9" pos:end="1055:35"><expr pos:start="1055:9" pos:end="1055:34"><name pos:start="1055:9" pos:end="1055:11">ret</name> <operator pos:start="1055:13" pos:end="1055:13">=</operator> <call pos:start="1055:15" pos:end="1055:34"><name pos:start="1055:15" pos:end="1055:23">get_errno</name><argument_list pos:start="1055:24" pos:end="1055:34">(<argument pos:start="1055:25" pos:end="1055:33"><expr pos:start="1055:25" pos:end="1055:33"><call pos:start="1055:25" pos:end="1055:33"><name pos:start="1055:25" pos:end="1055:27">dup</name><argument_list pos:start="1055:28" pos:end="1055:33">(<argument pos:start="1055:29" pos:end="1055:32"><expr pos:start="1055:29" pos:end="1055:32"><name pos:start="1055:29" pos:end="1055:32">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1057:9" pos:end="1057:14">break;</break>

    <case pos:start="1059:5" pos:end="1059:24">case <expr pos:start="1059:10" pos:end="1059:23"><name pos:start="1059:10" pos:end="1059:23">TARGET_NR_pipe</name></expr>:</case>

        <expr_stmt pos:start="1061:9" pos:end="1061:43"><expr pos:start="1061:9" pos:end="1061:42"><name pos:start="1061:9" pos:end="1061:11">ret</name> <operator pos:start="1061:13" pos:end="1061:13">=</operator> <call pos:start="1061:15" pos:end="1061:42"><name pos:start="1061:15" pos:end="1061:21">do_pipe</name><argument_list pos:start="1061:22" pos:end="1061:42">(<argument pos:start="1061:23" pos:end="1061:29"><expr pos:start="1061:23" pos:end="1061:29"><name pos:start="1061:23" pos:end="1061:29">cpu_env</name></expr></argument>, <argument pos:start="1061:32" pos:end="1061:35"><expr pos:start="1061:32" pos:end="1061:35"><name pos:start="1061:32" pos:end="1061:35">arg1</name></expr></argument>, <argument pos:start="1061:38" pos:end="1061:38"><expr pos:start="1061:38" pos:end="1061:38"><literal type="number" pos:start="1061:38" pos:end="1061:38">0</literal></expr></argument>, <argument pos:start="1061:41" pos:end="1061:41"><expr pos:start="1061:41" pos:end="1061:41"><literal type="number" pos:start="1061:41" pos:end="1061:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1063:9" pos:end="1066:0">break;</break>

<cpp:ifdef pos:start="1065:1" pos:end="1065:22">#<cpp:directive pos:start="1065:2" pos:end="1065:6">ifdef</cpp:directive> <name pos:start="1065:8" pos:end="1065:22">TARGET_NR_pipe2</name></cpp:ifdef>

    <case pos:start="1067:5" pos:end="1067:25">case <expr pos:start="1067:10" pos:end="1067:24"><name pos:start="1067:10" pos:end="1067:24">TARGET_NR_pipe2</name></expr>:</case>

        <expr_stmt pos:start="1069:9" pos:end="1071:72"><expr pos:start="1069:9" pos:end="1071:71"><name pos:start="1069:9" pos:end="1069:11">ret</name> <operator pos:start="1069:13" pos:end="1069:13">=</operator> <call pos:start="1069:15" pos:end="1071:71"><name pos:start="1069:15" pos:end="1069:21">do_pipe</name><argument_list pos:start="1069:22" pos:end="1071:71">(<argument pos:start="1069:23" pos:end="1069:29"><expr pos:start="1069:23" pos:end="1069:29"><name pos:start="1069:23" pos:end="1069:29">cpu_env</name></expr></argument>, <argument pos:start="1069:32" pos:end="1069:35"><expr pos:start="1069:32" pos:end="1069:35"><name pos:start="1069:32" pos:end="1069:35">arg1</name></expr></argument>,

                      <argument pos:start="1071:23" pos:end="1071:67"><expr pos:start="1071:23" pos:end="1071:67"><call pos:start="1071:23" pos:end="1071:67"><name pos:start="1071:23" pos:end="1071:44">target_to_host_bitmask</name><argument_list pos:start="1071:45" pos:end="1071:67">(<argument pos:start="1071:46" pos:end="1071:49"><expr pos:start="1071:46" pos:end="1071:49"><name pos:start="1071:46" pos:end="1071:49">arg2</name></expr></argument>, <argument pos:start="1071:52" pos:end="1071:66"><expr pos:start="1071:52" pos:end="1071:66"><name pos:start="1071:52" pos:end="1071:66">fcntl_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1071:70" pos:end="1071:70"><expr pos:start="1071:70" pos:end="1071:70"><literal type="number" pos:start="1071:70" pos:end="1071:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1073:9" pos:end="1076:0">break;</break>

<cpp:endif pos:start="1075:1" pos:end="1075:6">#<cpp:directive pos:start="1075:2" pos:end="1075:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1077:5" pos:end="1077:25">case <expr pos:start="1077:10" pos:end="1077:24"><name pos:start="1077:10" pos:end="1077:24">TARGET_NR_times</name></expr>:</case>

        <block pos:start="1079:9" pos:end="1109:9">{<block_content pos:start="1081:13" pos:end="1107:50">

            <decl_stmt pos:start="1081:13" pos:end="1081:36"><decl pos:start="1081:13" pos:end="1081:35"><type pos:start="1081:13" pos:end="1081:31"><name pos:start="1081:13" pos:end="1081:29"><name pos:start="1081:13" pos:end="1081:18">struct</name> <name pos:start="1081:20" pos:end="1081:29">target_tms</name></name> <modifier pos:start="1081:31" pos:end="1081:31">*</modifier></type><name pos:start="1081:32" pos:end="1081:35">tmsp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1083:13" pos:end="1083:27"><decl pos:start="1083:13" pos:end="1083:26"><type pos:start="1083:13" pos:end="1083:22"><name pos:start="1083:13" pos:end="1083:22"><name pos:start="1083:13" pos:end="1083:18">struct</name> <name pos:start="1083:20" pos:end="1083:22">tms</name></name></type> <name pos:start="1083:24" pos:end="1083:26">tms</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1085:13" pos:end="1085:41"><expr pos:start="1085:13" pos:end="1085:40"><name pos:start="1085:13" pos:end="1085:15">ret</name> <operator pos:start="1085:17" pos:end="1085:17">=</operator> <call pos:start="1085:19" pos:end="1085:40"><name pos:start="1085:19" pos:end="1085:27">get_errno</name><argument_list pos:start="1085:28" pos:end="1085:40">(<argument pos:start="1085:29" pos:end="1085:39"><expr pos:start="1085:29" pos:end="1085:39"><call pos:start="1085:29" pos:end="1085:39"><name pos:start="1085:29" pos:end="1085:33">times</name><argument_list pos:start="1085:34" pos:end="1085:39">(<argument pos:start="1085:35" pos:end="1085:38"><expr pos:start="1085:35" pos:end="1085:38"><operator pos:start="1085:35" pos:end="1085:35">&amp;</operator><name pos:start="1085:36" pos:end="1085:38">tms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1087:13" pos:end="1103:13"><if pos:start="1087:13" pos:end="1103:13">if <condition pos:start="1087:16" pos:end="1087:21">(<expr pos:start="1087:17" pos:end="1087:20"><name pos:start="1087:17" pos:end="1087:20">arg1</name></expr>)</condition> <block pos:start="1087:23" pos:end="1103:13">{<block_content pos:start="1089:17" pos:end="1101:83">

                <expr_stmt pos:start="1089:17" pos:end="1089:83"><expr pos:start="1089:17" pos:end="1089:82"><name pos:start="1089:17" pos:end="1089:20">tmsp</name> <operator pos:start="1089:22" pos:end="1089:22">=</operator> <call pos:start="1089:24" pos:end="1089:82"><name pos:start="1089:24" pos:end="1089:32">lock_user</name><argument_list pos:start="1089:33" pos:end="1089:82">(<argument pos:start="1089:34" pos:end="1089:45"><expr pos:start="1089:34" pos:end="1089:45"><name pos:start="1089:34" pos:end="1089:45">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1089:48" pos:end="1089:51"><expr pos:start="1089:48" pos:end="1089:51"><name pos:start="1089:48" pos:end="1089:51">arg1</name></expr></argument>, <argument pos:start="1089:54" pos:end="1089:78"><expr pos:start="1089:54" pos:end="1089:78"><sizeof pos:start="1089:54" pos:end="1089:78">sizeof<argument_list pos:start="1089:60" pos:end="1089:78">(<argument pos:start="1089:61" pos:end="1089:77"><expr pos:start="1089:61" pos:end="1089:77">struct <name pos:start="1089:68" pos:end="1089:77">target_tms</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1089:81" pos:end="1089:81"><expr pos:start="1089:81" pos:end="1089:81"><literal type="number" pos:start="1089:81" pos:end="1089:81">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1091:17" pos:end="1093:32"><if pos:start="1091:17" pos:end="1093:32">if <condition pos:start="1091:20" pos:end="1091:26">(<expr pos:start="1091:21" pos:end="1091:25"><operator pos:start="1091:21" pos:end="1091:21">!</operator><name pos:start="1091:22" pos:end="1091:25">tmsp</name></expr>)</condition><block type="pseudo" pos:start="1093:21" pos:end="1093:32"><block_content pos:start="1093:21" pos:end="1093:32">

                    <goto pos:start="1093:21" pos:end="1093:32">goto <name pos:start="1093:26" pos:end="1093:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1095:17" pos:end="1095:81"><expr pos:start="1095:17" pos:end="1095:80"><name pos:start="1095:17" pos:end="1095:31"><name pos:start="1095:17" pos:end="1095:20">tmsp</name><operator pos:start="1095:21" pos:end="1095:22">-&gt;</operator><name pos:start="1095:23" pos:end="1095:31">tms_utime</name></name> <operator pos:start="1095:33" pos:end="1095:33">=</operator> <call pos:start="1095:35" pos:end="1095:80"><name pos:start="1095:35" pos:end="1095:41">tswapal</name><argument_list pos:start="1095:42" pos:end="1095:80">(<argument pos:start="1095:43" pos:end="1095:79"><expr pos:start="1095:43" pos:end="1095:79"><call pos:start="1095:43" pos:end="1095:79"><name pos:start="1095:43" pos:end="1095:64">host_to_target_clock_t</name><argument_list pos:start="1095:65" pos:end="1095:79">(<argument pos:start="1095:66" pos:end="1095:78"><expr pos:start="1095:66" pos:end="1095:78"><name pos:start="1095:66" pos:end="1095:78"><name pos:start="1095:66" pos:end="1095:68">tms</name><operator pos:start="1095:69" pos:end="1095:69">.</operator><name pos:start="1095:70" pos:end="1095:78">tms_utime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1097:17" pos:end="1097:81"><expr pos:start="1097:17" pos:end="1097:80"><name pos:start="1097:17" pos:end="1097:31"><name pos:start="1097:17" pos:end="1097:20">tmsp</name><operator pos:start="1097:21" pos:end="1097:22">-&gt;</operator><name pos:start="1097:23" pos:end="1097:31">tms_stime</name></name> <operator pos:start="1097:33" pos:end="1097:33">=</operator> <call pos:start="1097:35" pos:end="1097:80"><name pos:start="1097:35" pos:end="1097:41">tswapal</name><argument_list pos:start="1097:42" pos:end="1097:80">(<argument pos:start="1097:43" pos:end="1097:79"><expr pos:start="1097:43" pos:end="1097:79"><call pos:start="1097:43" pos:end="1097:79"><name pos:start="1097:43" pos:end="1097:64">host_to_target_clock_t</name><argument_list pos:start="1097:65" pos:end="1097:79">(<argument pos:start="1097:66" pos:end="1097:78"><expr pos:start="1097:66" pos:end="1097:78"><name pos:start="1097:66" pos:end="1097:78"><name pos:start="1097:66" pos:end="1097:68">tms</name><operator pos:start="1097:69" pos:end="1097:69">.</operator><name pos:start="1097:70" pos:end="1097:78">tms_stime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1099:17" pos:end="1099:83"><expr pos:start="1099:17" pos:end="1099:82"><name pos:start="1099:17" pos:end="1099:32"><name pos:start="1099:17" pos:end="1099:20">tmsp</name><operator pos:start="1099:21" pos:end="1099:22">-&gt;</operator><name pos:start="1099:23" pos:end="1099:32">tms_cutime</name></name> <operator pos:start="1099:34" pos:end="1099:34">=</operator> <call pos:start="1099:36" pos:end="1099:82"><name pos:start="1099:36" pos:end="1099:42">tswapal</name><argument_list pos:start="1099:43" pos:end="1099:82">(<argument pos:start="1099:44" pos:end="1099:81"><expr pos:start="1099:44" pos:end="1099:81"><call pos:start="1099:44" pos:end="1099:81"><name pos:start="1099:44" pos:end="1099:65">host_to_target_clock_t</name><argument_list pos:start="1099:66" pos:end="1099:81">(<argument pos:start="1099:67" pos:end="1099:80"><expr pos:start="1099:67" pos:end="1099:80"><name pos:start="1099:67" pos:end="1099:80"><name pos:start="1099:67" pos:end="1099:69">tms</name><operator pos:start="1099:70" pos:end="1099:70">.</operator><name pos:start="1099:71" pos:end="1099:80">tms_cutime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1101:17" pos:end="1101:83"><expr pos:start="1101:17" pos:end="1101:82"><name pos:start="1101:17" pos:end="1101:32"><name pos:start="1101:17" pos:end="1101:20">tmsp</name><operator pos:start="1101:21" pos:end="1101:22">-&gt;</operator><name pos:start="1101:23" pos:end="1101:32">tms_cstime</name></name> <operator pos:start="1101:34" pos:end="1101:34">=</operator> <call pos:start="1101:36" pos:end="1101:82"><name pos:start="1101:36" pos:end="1101:42">tswapal</name><argument_list pos:start="1101:43" pos:end="1101:82">(<argument pos:start="1101:44" pos:end="1101:81"><expr pos:start="1101:44" pos:end="1101:81"><call pos:start="1101:44" pos:end="1101:81"><name pos:start="1101:44" pos:end="1101:65">host_to_target_clock_t</name><argument_list pos:start="1101:66" pos:end="1101:81">(<argument pos:start="1101:67" pos:end="1101:80"><expr pos:start="1101:67" pos:end="1101:80"><name pos:start="1101:67" pos:end="1101:80"><name pos:start="1101:67" pos:end="1101:69">tms</name><operator pos:start="1101:70" pos:end="1101:70">.</operator><name pos:start="1101:71" pos:end="1101:80">tms_cstime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1105:13" pos:end="1107:50"><if pos:start="1105:13" pos:end="1107:50">if <condition pos:start="1105:16" pos:end="1105:31">(<expr pos:start="1105:17" pos:end="1105:30"><operator pos:start="1105:17" pos:end="1105:17">!</operator><call pos:start="1105:18" pos:end="1105:30"><name pos:start="1105:18" pos:end="1105:25">is_error</name><argument_list pos:start="1105:26" pos:end="1105:30">(<argument pos:start="1105:27" pos:end="1105:29"><expr pos:start="1105:27" pos:end="1105:29"><name pos:start="1105:27" pos:end="1105:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1107:17" pos:end="1107:50"><block_content pos:start="1107:17" pos:end="1107:50">

                <expr_stmt pos:start="1107:17" pos:end="1107:50"><expr pos:start="1107:17" pos:end="1107:49"><name pos:start="1107:17" pos:end="1107:19">ret</name> <operator pos:start="1107:21" pos:end="1107:21">=</operator> <call pos:start="1107:23" pos:end="1107:49"><name pos:start="1107:23" pos:end="1107:44">host_to_target_clock_t</name><argument_list pos:start="1107:45" pos:end="1107:49">(<argument pos:start="1107:46" pos:end="1107:48"><expr pos:start="1107:46" pos:end="1107:48"><name pos:start="1107:46" pos:end="1107:48">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1111:9" pos:end="1114:0">break;</break>

<cpp:ifdef pos:start="1113:1" pos:end="1113:21">#<cpp:directive pos:start="1113:2" pos:end="1113:6">ifdef</cpp:directive> <name pos:start="1113:8" pos:end="1113:21">TARGET_NR_prof</name></cpp:ifdef>

    <case pos:start="1115:5" pos:end="1115:24">case <expr pos:start="1115:10" pos:end="1115:23"><name pos:start="1115:10" pos:end="1115:23">TARGET_NR_prof</name></expr>:</case>

        <goto pos:start="1117:9" pos:end="1122:0">goto <name pos:start="1117:14" pos:end="1117:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1119:1" pos:end="1119:6">#<cpp:directive pos:start="1119:2" pos:end="1119:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1121:1" pos:end="1121:23">#<cpp:directive pos:start="1121:2" pos:end="1121:6">ifdef</cpp:directive> <name pos:start="1121:8" pos:end="1121:23">TARGET_NR_signal</name></cpp:ifdef>

    <case pos:start="1123:5" pos:end="1123:26">case <expr pos:start="1123:10" pos:end="1123:25"><name pos:start="1123:10" pos:end="1123:25">TARGET_NR_signal</name></expr>:</case>

        <goto pos:start="1125:9" pos:end="1128:0">goto <name pos:start="1125:14" pos:end="1125:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1127:1" pos:end="1127:6">#<cpp:directive pos:start="1127:2" pos:end="1127:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1129:5" pos:end="1129:24">case <expr pos:start="1129:10" pos:end="1129:23"><name pos:start="1129:10" pos:end="1129:23">TARGET_NR_acct</name></expr>:</case>

        <if_stmt pos:start="1131:9" pos:end="1145:9"><if pos:start="1131:9" pos:end="1135:9">if <condition pos:start="1131:12" pos:end="1131:22">(<expr pos:start="1131:13" pos:end="1131:21"><name pos:start="1131:13" pos:end="1131:16">arg1</name> <operator pos:start="1131:18" pos:end="1131:19">==</operator> <literal type="number" pos:start="1131:21" pos:end="1131:21">0</literal></expr>)</condition> <block pos:start="1131:24" pos:end="1135:9">{<block_content pos:start="1133:13" pos:end="1133:40">

            <expr_stmt pos:start="1133:13" pos:end="1133:40"><expr pos:start="1133:13" pos:end="1133:39"><name pos:start="1133:13" pos:end="1133:15">ret</name> <operator pos:start="1133:17" pos:end="1133:17">=</operator> <call pos:start="1133:19" pos:end="1133:39"><name pos:start="1133:19" pos:end="1133:27">get_errno</name><argument_list pos:start="1133:28" pos:end="1133:39">(<argument pos:start="1133:29" pos:end="1133:38"><expr pos:start="1133:29" pos:end="1133:38"><call pos:start="1133:29" pos:end="1133:38"><name pos:start="1133:29" pos:end="1133:32">acct</name><argument_list pos:start="1133:33" pos:end="1133:38">(<argument pos:start="1133:34" pos:end="1133:37"><expr pos:start="1133:34" pos:end="1133:37"><name pos:start="1133:34" pos:end="1133:37">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1135:11" pos:end="1145:9">else <block pos:start="1135:16" pos:end="1145:9">{<block_content pos:start="1137:13" pos:end="1143:36">

            <if_stmt pos:start="1137:13" pos:end="1139:28"><if pos:start="1137:13" pos:end="1139:28">if <condition pos:start="1137:16" pos:end="1137:46">(<expr pos:start="1137:17" pos:end="1137:45"><operator pos:start="1137:17" pos:end="1137:17">!</operator><operator pos:start="1137:18" pos:end="1137:18">(</operator><name pos:start="1137:19" pos:end="1137:19">p</name> <operator pos:start="1137:21" pos:end="1137:21">=</operator> <call pos:start="1137:23" pos:end="1137:44"><name pos:start="1137:23" pos:end="1137:38">lock_user_string</name><argument_list pos:start="1137:39" pos:end="1137:44">(<argument pos:start="1137:40" pos:end="1137:43"><expr pos:start="1137:40" pos:end="1137:43"><name pos:start="1137:40" pos:end="1137:43">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1137:45" pos:end="1137:45">)</operator></expr>)</condition><block type="pseudo" pos:start="1139:17" pos:end="1139:28"><block_content pos:start="1139:17" pos:end="1139:28">

                <goto pos:start="1139:17" pos:end="1139:28">goto <name pos:start="1139:22" pos:end="1139:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1141:13" pos:end="1141:43"><expr pos:start="1141:13" pos:end="1141:42"><name pos:start="1141:13" pos:end="1141:15">ret</name> <operator pos:start="1141:17" pos:end="1141:17">=</operator> <call pos:start="1141:19" pos:end="1141:42"><name pos:start="1141:19" pos:end="1141:27">get_errno</name><argument_list pos:start="1141:28" pos:end="1141:42">(<argument pos:start="1141:29" pos:end="1141:41"><expr pos:start="1141:29" pos:end="1141:41"><call pos:start="1141:29" pos:end="1141:41"><name pos:start="1141:29" pos:end="1141:32">acct</name><argument_list pos:start="1141:33" pos:end="1141:41">(<argument pos:start="1141:34" pos:end="1141:40"><expr pos:start="1141:34" pos:end="1141:40"><call pos:start="1141:34" pos:end="1141:40"><name pos:start="1141:34" pos:end="1141:37">path</name><argument_list pos:start="1141:38" pos:end="1141:40">(<argument pos:start="1141:39" pos:end="1141:39"><expr pos:start="1141:39" pos:end="1141:39"><name pos:start="1141:39" pos:end="1141:39">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1143:13" pos:end="1143:36"><expr pos:start="1143:13" pos:end="1143:35"><call pos:start="1143:13" pos:end="1143:35"><name pos:start="1143:13" pos:end="1143:23">unlock_user</name><argument_list pos:start="1143:24" pos:end="1143:35">(<argument pos:start="1143:25" pos:end="1143:25"><expr pos:start="1143:25" pos:end="1143:25"><name pos:start="1143:25" pos:end="1143:25">p</name></expr></argument>, <argument pos:start="1143:28" pos:end="1143:31"><expr pos:start="1143:28" pos:end="1143:31"><name pos:start="1143:28" pos:end="1143:31">arg1</name></expr></argument>, <argument pos:start="1143:34" pos:end="1143:34"><expr pos:start="1143:34" pos:end="1143:34"><literal type="number" pos:start="1143:34" pos:end="1143:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1147:9" pos:end="1150:0">break;</break>

<cpp:ifdef pos:start="1149:1" pos:end="1149:24">#<cpp:directive pos:start="1149:2" pos:end="1149:6">ifdef</cpp:directive> <name pos:start="1149:8" pos:end="1149:24">TARGET_NR_umount2</name></cpp:ifdef>

    <case pos:start="1151:5" pos:end="1151:27">case <expr pos:start="1151:10" pos:end="1151:26"><name pos:start="1151:10" pos:end="1151:26">TARGET_NR_umount2</name></expr>:</case>

        <if_stmt pos:start="1153:9" pos:end="1155:24"><if pos:start="1153:9" pos:end="1155:24">if <condition pos:start="1153:12" pos:end="1153:42">(<expr pos:start="1153:13" pos:end="1153:41"><operator pos:start="1153:13" pos:end="1153:13">!</operator><operator pos:start="1153:14" pos:end="1153:14">(</operator><name pos:start="1153:15" pos:end="1153:15">p</name> <operator pos:start="1153:17" pos:end="1153:17">=</operator> <call pos:start="1153:19" pos:end="1153:40"><name pos:start="1153:19" pos:end="1153:34">lock_user_string</name><argument_list pos:start="1153:35" pos:end="1153:40">(<argument pos:start="1153:36" pos:end="1153:39"><expr pos:start="1153:36" pos:end="1153:39"><name pos:start="1153:36" pos:end="1153:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1153:41" pos:end="1153:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1155:13" pos:end="1155:24"><block_content pos:start="1155:13" pos:end="1155:24">

            <goto pos:start="1155:13" pos:end="1155:24">goto <name pos:start="1155:18" pos:end="1155:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1157:9" pos:end="1157:42"><expr pos:start="1157:9" pos:end="1157:41"><name pos:start="1157:9" pos:end="1157:11">ret</name> <operator pos:start="1157:13" pos:end="1157:13">=</operator> <call pos:start="1157:15" pos:end="1157:41"><name pos:start="1157:15" pos:end="1157:23">get_errno</name><argument_list pos:start="1157:24" pos:end="1157:41">(<argument pos:start="1157:25" pos:end="1157:40"><expr pos:start="1157:25" pos:end="1157:40"><call pos:start="1157:25" pos:end="1157:40"><name pos:start="1157:25" pos:end="1157:31">umount2</name><argument_list pos:start="1157:32" pos:end="1157:40">(<argument pos:start="1157:33" pos:end="1157:33"><expr pos:start="1157:33" pos:end="1157:33"><name pos:start="1157:33" pos:end="1157:33">p</name></expr></argument>, <argument pos:start="1157:36" pos:end="1157:39"><expr pos:start="1157:36" pos:end="1157:39"><name pos:start="1157:36" pos:end="1157:39">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1159:9" pos:end="1159:32"><expr pos:start="1159:9" pos:end="1159:31"><call pos:start="1159:9" pos:end="1159:31"><name pos:start="1159:9" pos:end="1159:19">unlock_user</name><argument_list pos:start="1159:20" pos:end="1159:31">(<argument pos:start="1159:21" pos:end="1159:21"><expr pos:start="1159:21" pos:end="1159:21"><name pos:start="1159:21" pos:end="1159:21">p</name></expr></argument>, <argument pos:start="1159:24" pos:end="1159:27"><expr pos:start="1159:24" pos:end="1159:27"><name pos:start="1159:24" pos:end="1159:27">arg1</name></expr></argument>, <argument pos:start="1159:30" pos:end="1159:30"><expr pos:start="1159:30" pos:end="1159:30"><literal type="number" pos:start="1159:30" pos:end="1159:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1161:9" pos:end="1166:0">break;</break>

<cpp:endif pos:start="1163:1" pos:end="1163:6">#<cpp:directive pos:start="1163:2" pos:end="1163:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1165:1" pos:end="1165:21">#<cpp:directive pos:start="1165:2" pos:end="1165:6">ifdef</cpp:directive> <name pos:start="1165:8" pos:end="1165:21">TARGET_NR_lock</name></cpp:ifdef>

    <case pos:start="1167:5" pos:end="1167:24">case <expr pos:start="1167:10" pos:end="1167:23"><name pos:start="1167:10" pos:end="1167:23">TARGET_NR_lock</name></expr>:</case>

        <goto pos:start="1169:9" pos:end="1172:0">goto <name pos:start="1169:14" pos:end="1169:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1171:1" pos:end="1171:6">#<cpp:directive pos:start="1171:2" pos:end="1171:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1173:5" pos:end="1173:25">case <expr pos:start="1173:10" pos:end="1173:24"><name pos:start="1173:10" pos:end="1173:24">TARGET_NR_ioctl</name></expr>:</case>

        <expr_stmt pos:start="1175:9" pos:end="1175:41"><expr pos:start="1175:9" pos:end="1175:40"><name pos:start="1175:9" pos:end="1175:11">ret</name> <operator pos:start="1175:13" pos:end="1175:13">=</operator> <call pos:start="1175:15" pos:end="1175:40"><name pos:start="1175:15" pos:end="1175:22">do_ioctl</name><argument_list pos:start="1175:23" pos:end="1175:40">(<argument pos:start="1175:24" pos:end="1175:27"><expr pos:start="1175:24" pos:end="1175:27"><name pos:start="1175:24" pos:end="1175:27">arg1</name></expr></argument>, <argument pos:start="1175:30" pos:end="1175:33"><expr pos:start="1175:30" pos:end="1175:33"><name pos:start="1175:30" pos:end="1175:33">arg2</name></expr></argument>, <argument pos:start="1175:36" pos:end="1175:39"><expr pos:start="1175:36" pos:end="1175:39"><name pos:start="1175:36" pos:end="1175:39">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1177:9" pos:end="1177:14">break;</break>

    <case pos:start="1179:5" pos:end="1179:25">case <expr pos:start="1179:10" pos:end="1179:24"><name pos:start="1179:10" pos:end="1179:24">TARGET_NR_fcntl</name></expr>:</case>

        <expr_stmt pos:start="1181:9" pos:end="1181:41"><expr pos:start="1181:9" pos:end="1181:40"><name pos:start="1181:9" pos:end="1181:11">ret</name> <operator pos:start="1181:13" pos:end="1181:13">=</operator> <call pos:start="1181:15" pos:end="1181:40"><name pos:start="1181:15" pos:end="1181:22">do_fcntl</name><argument_list pos:start="1181:23" pos:end="1181:40">(<argument pos:start="1181:24" pos:end="1181:27"><expr pos:start="1181:24" pos:end="1181:27"><name pos:start="1181:24" pos:end="1181:27">arg1</name></expr></argument>, <argument pos:start="1181:30" pos:end="1181:33"><expr pos:start="1181:30" pos:end="1181:33"><name pos:start="1181:30" pos:end="1181:33">arg2</name></expr></argument>, <argument pos:start="1181:36" pos:end="1181:39"><expr pos:start="1181:36" pos:end="1181:39"><name pos:start="1181:36" pos:end="1181:39">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1183:9" pos:end="1186:0">break;</break>

<cpp:ifdef pos:start="1185:1" pos:end="1185:20">#<cpp:directive pos:start="1185:2" pos:end="1185:6">ifdef</cpp:directive> <name pos:start="1185:8" pos:end="1185:20">TARGET_NR_mpx</name></cpp:ifdef>

    <case pos:start="1187:5" pos:end="1187:23">case <expr pos:start="1187:10" pos:end="1187:22"><name pos:start="1187:10" pos:end="1187:22">TARGET_NR_mpx</name></expr>:</case>

        <goto pos:start="1189:9" pos:end="1192:0">goto <name pos:start="1189:14" pos:end="1189:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1191:1" pos:end="1191:6">#<cpp:directive pos:start="1191:2" pos:end="1191:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1193:5" pos:end="1193:27">case <expr pos:start="1193:10" pos:end="1193:26"><name pos:start="1193:10" pos:end="1193:26">TARGET_NR_setpgid</name></expr>:</case>

        <expr_stmt pos:start="1195:9" pos:end="1195:45"><expr pos:start="1195:9" pos:end="1195:44"><name pos:start="1195:9" pos:end="1195:11">ret</name> <operator pos:start="1195:13" pos:end="1195:13">=</operator> <call pos:start="1195:15" pos:end="1195:44"><name pos:start="1195:15" pos:end="1195:23">get_errno</name><argument_list pos:start="1195:24" pos:end="1195:44">(<argument pos:start="1195:25" pos:end="1195:43"><expr pos:start="1195:25" pos:end="1195:43"><call pos:start="1195:25" pos:end="1195:43"><name pos:start="1195:25" pos:end="1195:31">setpgid</name><argument_list pos:start="1195:32" pos:end="1195:43">(<argument pos:start="1195:33" pos:end="1195:36"><expr pos:start="1195:33" pos:end="1195:36"><name pos:start="1195:33" pos:end="1195:36">arg1</name></expr></argument>, <argument pos:start="1195:39" pos:end="1195:42"><expr pos:start="1195:39" pos:end="1195:42"><name pos:start="1195:39" pos:end="1195:42">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1197:9" pos:end="1200:0">break;</break>

<cpp:ifdef pos:start="1199:1" pos:end="1199:23">#<cpp:directive pos:start="1199:2" pos:end="1199:6">ifdef</cpp:directive> <name pos:start="1199:8" pos:end="1199:23">TARGET_NR_ulimit</name></cpp:ifdef>

    <case pos:start="1201:5" pos:end="1201:26">case <expr pos:start="1201:10" pos:end="1201:25"><name pos:start="1201:10" pos:end="1201:25">TARGET_NR_ulimit</name></expr>:</case>

        <goto pos:start="1203:9" pos:end="1208:0">goto <name pos:start="1203:14" pos:end="1203:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1205:1" pos:end="1205:6">#<cpp:directive pos:start="1205:2" pos:end="1205:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1207:1" pos:end="1207:28">#<cpp:directive pos:start="1207:2" pos:end="1207:6">ifdef</cpp:directive> <name pos:start="1207:8" pos:end="1207:28">TARGET_NR_oldolduname</name></cpp:ifdef>

    <case pos:start="1209:5" pos:end="1209:31">case <expr pos:start="1209:10" pos:end="1209:30"><name pos:start="1209:10" pos:end="1209:30">TARGET_NR_oldolduname</name></expr>:</case>

        <goto pos:start="1211:9" pos:end="1214:0">goto <name pos:start="1211:14" pos:end="1211:26">unimplemented</name>;</goto>

<cpp:endif pos:start="1213:1" pos:end="1213:6">#<cpp:directive pos:start="1213:2" pos:end="1213:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1215:5" pos:end="1215:25">case <expr pos:start="1215:10" pos:end="1215:24"><name pos:start="1215:10" pos:end="1215:24">TARGET_NR_umask</name></expr>:</case>

        <expr_stmt pos:start="1217:9" pos:end="1217:37"><expr pos:start="1217:9" pos:end="1217:36"><name pos:start="1217:9" pos:end="1217:11">ret</name> <operator pos:start="1217:13" pos:end="1217:13">=</operator> <call pos:start="1217:15" pos:end="1217:36"><name pos:start="1217:15" pos:end="1217:23">get_errno</name><argument_list pos:start="1217:24" pos:end="1217:36">(<argument pos:start="1217:25" pos:end="1217:35"><expr pos:start="1217:25" pos:end="1217:35"><call pos:start="1217:25" pos:end="1217:35"><name pos:start="1217:25" pos:end="1217:29">umask</name><argument_list pos:start="1217:30" pos:end="1217:35">(<argument pos:start="1217:31" pos:end="1217:34"><expr pos:start="1217:31" pos:end="1217:34"><name pos:start="1217:31" pos:end="1217:34">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1219:9" pos:end="1219:14">break;</break>

    <case pos:start="1221:5" pos:end="1221:26">case <expr pos:start="1221:10" pos:end="1221:25"><name pos:start="1221:10" pos:end="1221:25">TARGET_NR_chroot</name></expr>:</case>

        <if_stmt pos:start="1223:9" pos:end="1225:24"><if pos:start="1223:9" pos:end="1225:24">if <condition pos:start="1223:12" pos:end="1223:42">(<expr pos:start="1223:13" pos:end="1223:41"><operator pos:start="1223:13" pos:end="1223:13">!</operator><operator pos:start="1223:14" pos:end="1223:14">(</operator><name pos:start="1223:15" pos:end="1223:15">p</name> <operator pos:start="1223:17" pos:end="1223:17">=</operator> <call pos:start="1223:19" pos:end="1223:40"><name pos:start="1223:19" pos:end="1223:34">lock_user_string</name><argument_list pos:start="1223:35" pos:end="1223:40">(<argument pos:start="1223:36" pos:end="1223:39"><expr pos:start="1223:36" pos:end="1223:39"><name pos:start="1223:36" pos:end="1223:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="1223:41" pos:end="1223:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1225:13" pos:end="1225:24"><block_content pos:start="1225:13" pos:end="1225:24">

            <goto pos:start="1225:13" pos:end="1225:24">goto <name pos:start="1225:18" pos:end="1225:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1227:9" pos:end="1227:35"><expr pos:start="1227:9" pos:end="1227:34"><name pos:start="1227:9" pos:end="1227:11">ret</name> <operator pos:start="1227:13" pos:end="1227:13">=</operator> <call pos:start="1227:15" pos:end="1227:34"><name pos:start="1227:15" pos:end="1227:23">get_errno</name><argument_list pos:start="1227:24" pos:end="1227:34">(<argument pos:start="1227:25" pos:end="1227:33"><expr pos:start="1227:25" pos:end="1227:33"><call pos:start="1227:25" pos:end="1227:33"><name pos:start="1227:25" pos:end="1227:30">chroot</name><argument_list pos:start="1227:31" pos:end="1227:33">(<argument pos:start="1227:32" pos:end="1227:32"><expr pos:start="1227:32" pos:end="1227:32"><name pos:start="1227:32" pos:end="1227:32">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1229:9" pos:end="1229:32"><expr pos:start="1229:9" pos:end="1229:31"><call pos:start="1229:9" pos:end="1229:31"><name pos:start="1229:9" pos:end="1229:19">unlock_user</name><argument_list pos:start="1229:20" pos:end="1229:31">(<argument pos:start="1229:21" pos:end="1229:21"><expr pos:start="1229:21" pos:end="1229:21"><name pos:start="1229:21" pos:end="1229:21">p</name></expr></argument>, <argument pos:start="1229:24" pos:end="1229:27"><expr pos:start="1229:24" pos:end="1229:27"><name pos:start="1229:24" pos:end="1229:27">arg1</name></expr></argument>, <argument pos:start="1229:30" pos:end="1229:30"><expr pos:start="1229:30" pos:end="1229:30"><literal type="number" pos:start="1229:30" pos:end="1229:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1231:9" pos:end="1231:14">break;</break>

    <case pos:start="1233:5" pos:end="1233:25">case <expr pos:start="1233:10" pos:end="1233:24"><name pos:start="1233:10" pos:end="1233:24">TARGET_NR_ustat</name></expr>:</case>

        <goto pos:start="1235:9" pos:end="1235:27">goto <name pos:start="1235:14" pos:end="1235:26">unimplemented</name>;</goto>

    <case pos:start="1237:5" pos:end="1237:24">case <expr pos:start="1237:10" pos:end="1237:23"><name pos:start="1237:10" pos:end="1237:23">TARGET_NR_dup2</name></expr>:</case>

        <expr_stmt pos:start="1239:9" pos:end="1239:42"><expr pos:start="1239:9" pos:end="1239:41"><name pos:start="1239:9" pos:end="1239:11">ret</name> <operator pos:start="1239:13" pos:end="1239:13">=</operator> <call pos:start="1239:15" pos:end="1239:41"><name pos:start="1239:15" pos:end="1239:23">get_errno</name><argument_list pos:start="1239:24" pos:end="1239:41">(<argument pos:start="1239:25" pos:end="1239:40"><expr pos:start="1239:25" pos:end="1239:40"><call pos:start="1239:25" pos:end="1239:40"><name pos:start="1239:25" pos:end="1239:28">dup2</name><argument_list pos:start="1239:29" pos:end="1239:40">(<argument pos:start="1239:30" pos:end="1239:33"><expr pos:start="1239:30" pos:end="1239:33"><name pos:start="1239:30" pos:end="1239:33">arg1</name></expr></argument>, <argument pos:start="1239:36" pos:end="1239:39"><expr pos:start="1239:36" pos:end="1239:39"><name pos:start="1239:36" pos:end="1239:39">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1241:9" pos:end="1244:0">break;</break>

<cpp:if pos:start="1243:1" pos:end="1243:51">#<cpp:directive pos:start="1243:2" pos:end="1243:3">if</cpp:directive> <expr pos:start="1243:5" pos:end="1243:51"><call pos:start="1243:5" pos:end="1243:24"><name pos:start="1243:5" pos:end="1243:11">defined</name><argument_list pos:start="1243:12" pos:end="1243:24">(<argument pos:start="1243:13" pos:end="1243:23"><expr pos:start="1243:13" pos:end="1243:23"><name pos:start="1243:13" pos:end="1243:23">CONFIG_DUP3</name></expr></argument>)</argument_list></call> <operator pos:start="1243:26" pos:end="1243:27">&amp;&amp;</operator> <call pos:start="1243:29" pos:end="1243:51"><name pos:start="1243:29" pos:end="1243:35">defined</name><argument_list pos:start="1243:36" pos:end="1243:51">(<argument pos:start="1243:37" pos:end="1243:50"><expr pos:start="1243:37" pos:end="1243:50"><name pos:start="1243:37" pos:end="1243:50">TARGET_NR_dup3</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="1245:5" pos:end="1245:24">case <expr pos:start="1245:10" pos:end="1245:23"><name pos:start="1245:10" pos:end="1245:23">TARGET_NR_dup3</name></expr>:</case>

        <expr_stmt pos:start="1247:9" pos:end="1247:48"><expr pos:start="1247:9" pos:end="1247:47"><name pos:start="1247:9" pos:end="1247:11">ret</name> <operator pos:start="1247:13" pos:end="1247:13">=</operator> <call pos:start="1247:15" pos:end="1247:47"><name pos:start="1247:15" pos:end="1247:23">get_errno</name><argument_list pos:start="1247:24" pos:end="1247:47">(<argument pos:start="1247:25" pos:end="1247:46"><expr pos:start="1247:25" pos:end="1247:46"><call pos:start="1247:25" pos:end="1247:46"><name pos:start="1247:25" pos:end="1247:28">dup3</name><argument_list pos:start="1247:29" pos:end="1247:46">(<argument pos:start="1247:30" pos:end="1247:33"><expr pos:start="1247:30" pos:end="1247:33"><name pos:start="1247:30" pos:end="1247:33">arg1</name></expr></argument>, <argument pos:start="1247:36" pos:end="1247:39"><expr pos:start="1247:36" pos:end="1247:39"><name pos:start="1247:36" pos:end="1247:39">arg2</name></expr></argument>, <argument pos:start="1247:42" pos:end="1247:45"><expr pos:start="1247:42" pos:end="1247:45"><name pos:start="1247:42" pos:end="1247:45">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1249:9" pos:end="1254:0">break;</break>

<cpp:endif pos:start="1251:1" pos:end="1251:6">#<cpp:directive pos:start="1251:2" pos:end="1251:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1253:1" pos:end="1253:24">#<cpp:directive pos:start="1253:2" pos:end="1253:6">ifdef</cpp:directive> <name pos:start="1253:8" pos:end="1253:24">TARGET_NR_getppid</name></cpp:ifdef> <comment type="block" pos:start="1253:26" pos:end="1253:43">/* not on alpha */</comment>

    <case pos:start="1255:5" pos:end="1255:27">case <expr pos:start="1255:10" pos:end="1255:26"><name pos:start="1255:10" pos:end="1255:26">TARGET_NR_getppid</name></expr>:</case>

        <expr_stmt pos:start="1257:9" pos:end="1257:35"><expr pos:start="1257:9" pos:end="1257:34"><name pos:start="1257:9" pos:end="1257:11">ret</name> <operator pos:start="1257:13" pos:end="1257:13">=</operator> <call pos:start="1257:15" pos:end="1257:34"><name pos:start="1257:15" pos:end="1257:23">get_errno</name><argument_list pos:start="1257:24" pos:end="1257:34">(<argument pos:start="1257:25" pos:end="1257:33"><expr pos:start="1257:25" pos:end="1257:33"><call pos:start="1257:25" pos:end="1257:33"><name pos:start="1257:25" pos:end="1257:31">getppid</name><argument_list pos:start="1257:32" pos:end="1257:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1259:9" pos:end="1262:0">break;</break>

<cpp:endif pos:start="1261:1" pos:end="1261:6">#<cpp:directive pos:start="1261:2" pos:end="1261:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1263:5" pos:end="1263:27">case <expr pos:start="1263:10" pos:end="1263:26"><name pos:start="1263:10" pos:end="1263:26">TARGET_NR_getpgrp</name></expr>:</case>

        <expr_stmt pos:start="1265:9" pos:end="1265:35"><expr pos:start="1265:9" pos:end="1265:34"><name pos:start="1265:9" pos:end="1265:11">ret</name> <operator pos:start="1265:13" pos:end="1265:13">=</operator> <call pos:start="1265:15" pos:end="1265:34"><name pos:start="1265:15" pos:end="1265:23">get_errno</name><argument_list pos:start="1265:24" pos:end="1265:34">(<argument pos:start="1265:25" pos:end="1265:33"><expr pos:start="1265:25" pos:end="1265:33"><call pos:start="1265:25" pos:end="1265:33"><name pos:start="1265:25" pos:end="1265:31">getpgrp</name><argument_list pos:start="1265:32" pos:end="1265:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1267:9" pos:end="1267:14">break;</break>

    <case pos:start="1269:5" pos:end="1269:26">case <expr pos:start="1269:10" pos:end="1269:25"><name pos:start="1269:10" pos:end="1269:25">TARGET_NR_setsid</name></expr>:</case>

        <expr_stmt pos:start="1271:9" pos:end="1271:34"><expr pos:start="1271:9" pos:end="1271:33"><name pos:start="1271:9" pos:end="1271:11">ret</name> <operator pos:start="1271:13" pos:end="1271:13">=</operator> <call pos:start="1271:15" pos:end="1271:33"><name pos:start="1271:15" pos:end="1271:23">get_errno</name><argument_list pos:start="1271:24" pos:end="1271:33">(<argument pos:start="1271:25" pos:end="1271:32"><expr pos:start="1271:25" pos:end="1271:32"><call pos:start="1271:25" pos:end="1271:32"><name pos:start="1271:25" pos:end="1271:30">setsid</name><argument_list pos:start="1271:31" pos:end="1271:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1273:9" pos:end="1276:0">break;</break>

<cpp:ifdef pos:start="1275:1" pos:end="1275:26">#<cpp:directive pos:start="1275:2" pos:end="1275:6">ifdef</cpp:directive> <name pos:start="1275:8" pos:end="1275:26">TARGET_NR_sigaction</name></cpp:ifdef>

    <case pos:start="1277:5" pos:end="1277:29">case <expr pos:start="1277:10" pos:end="1277:28"><name pos:start="1277:10" pos:end="1277:28">TARGET_NR_sigaction</name></expr>:</case>

        <block pos:start="1279:9" pos:end="1433:9">{<block_content pos:start="1283:13" pos:end="1432:0">

<cpp:if pos:start="1281:1" pos:end="1281:25">#<cpp:directive pos:start="1281:2" pos:end="1281:3">if</cpp:directive> <expr pos:start="1281:5" pos:end="1281:25"><call pos:start="1281:5" pos:end="1281:25"><name pos:start="1281:5" pos:end="1281:11">defined</name><argument_list pos:start="1281:12" pos:end="1281:25">(<argument pos:start="1281:13" pos:end="1281:24"><expr pos:start="1281:13" pos:end="1281:24"><name pos:start="1281:13" pos:end="1281:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <decl_stmt pos:start="1283:13" pos:end="1283:57"><decl pos:start="1283:13" pos:end="1283:39"><type pos:start="1283:13" pos:end="1283:35"><name pos:start="1283:13" pos:end="1283:35"><name pos:start="1283:13" pos:end="1283:18">struct</name> <name pos:start="1283:20" pos:end="1283:35">target_sigaction</name></name></type> <name pos:start="1283:37" pos:end="1283:39">act</name></decl>, <decl pos:start="1283:42" pos:end="1283:45"><type ref="prev" pos:start="1283:13" pos:end="1283:35"/><name pos:start="1283:42" pos:end="1283:45">oact</name></decl>, <decl pos:start="1283:48" pos:end="1283:56"><type ref="prev" pos:start="1283:13" pos:end="1283:35"><modifier pos:start="1283:48" pos:end="1283:48">*</modifier></type><name pos:start="1283:49" pos:end="1283:52">pact</name> <init pos:start="1283:54" pos:end="1283:56">= <expr pos:start="1283:56" pos:end="1283:56"><literal type="number" pos:start="1283:56" pos:end="1283:56">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="1285:13" pos:end="1285:49"><decl pos:start="1285:13" pos:end="1285:48"><type pos:start="1285:13" pos:end="1285:41"><name pos:start="1285:13" pos:end="1285:39"><name pos:start="1285:13" pos:end="1285:18">struct</name> <name pos:start="1285:20" pos:end="1285:39">target_old_sigaction</name></name> <modifier pos:start="1285:41" pos:end="1285:41">*</modifier></type><name pos:start="1285:42" pos:end="1285:48">old_act</name></decl>;</decl_stmt>

            <if_stmt pos:start="1287:13" pos:end="1305:13"><if pos:start="1287:13" pos:end="1305:13">if <condition pos:start="1287:16" pos:end="1287:21">(<expr pos:start="1287:17" pos:end="1287:20"><name pos:start="1287:17" pos:end="1287:20">arg2</name></expr>)</condition> <block pos:start="1287:23" pos:end="1305:13">{<block_content pos:start="1289:17" pos:end="1303:28">

                <if_stmt pos:start="1289:17" pos:end="1291:32"><if pos:start="1289:17" pos:end="1291:32">if <condition pos:start="1289:20" pos:end="1289:69">(<expr pos:start="1289:21" pos:end="1289:68"><operator pos:start="1289:21" pos:end="1289:21">!</operator><call pos:start="1289:22" pos:end="1289:68"><name pos:start="1289:22" pos:end="1289:37">lock_user_struct</name><argument_list pos:start="1289:38" pos:end="1289:68">(<argument pos:start="1289:39" pos:end="1289:49"><expr pos:start="1289:39" pos:end="1289:49"><name pos:start="1289:39" pos:end="1289:49">VERIFY_READ</name></expr></argument>, <argument pos:start="1289:52" pos:end="1289:58"><expr pos:start="1289:52" pos:end="1289:58"><name pos:start="1289:52" pos:end="1289:58">old_act</name></expr></argument>, <argument pos:start="1289:61" pos:end="1289:64"><expr pos:start="1289:61" pos:end="1289:64"><name pos:start="1289:61" pos:end="1289:64">arg2</name></expr></argument>, <argument pos:start="1289:67" pos:end="1289:67"><expr pos:start="1289:67" pos:end="1289:67"><literal type="number" pos:start="1289:67" pos:end="1289:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1291:21" pos:end="1291:32"><block_content pos:start="1291:21" pos:end="1291:32">

                    <goto pos:start="1291:21" pos:end="1291:32">goto <name pos:start="1291:26" pos:end="1291:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1293:17" pos:end="1293:55"><expr pos:start="1293:17" pos:end="1293:54"><name pos:start="1293:17" pos:end="1293:31"><name pos:start="1293:17" pos:end="1293:19">act</name><operator pos:start="1293:20" pos:end="1293:20">.</operator><name pos:start="1293:21" pos:end="1293:31">_sa_handler</name></name> <operator pos:start="1293:33" pos:end="1293:33">=</operator> <name pos:start="1293:35" pos:end="1293:54"><name pos:start="1293:35" pos:end="1293:41">old_act</name><operator pos:start="1293:42" pos:end="1293:43">-&gt;</operator><name pos:start="1293:44" pos:end="1293:54">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1295:17" pos:end="1295:66"><expr pos:start="1295:17" pos:end="1295:65"><call pos:start="1295:17" pos:end="1295:65"><name pos:start="1295:17" pos:end="1295:33">target_siginitset</name><argument_list pos:start="1295:34" pos:end="1295:65">(<argument pos:start="1295:35" pos:end="1295:46"><expr pos:start="1295:35" pos:end="1295:46"><operator pos:start="1295:35" pos:end="1295:35">&amp;</operator><name pos:start="1295:36" pos:end="1295:46"><name pos:start="1295:36" pos:end="1295:38">act</name><operator pos:start="1295:39" pos:end="1295:39">.</operator><name pos:start="1295:40" pos:end="1295:46">sa_mask</name></name></expr></argument>, <argument pos:start="1295:49" pos:end="1295:64"><expr pos:start="1295:49" pos:end="1295:64"><name pos:start="1295:49" pos:end="1295:64"><name pos:start="1295:49" pos:end="1295:55">old_act</name><operator pos:start="1295:56" pos:end="1295:57">-&gt;</operator><name pos:start="1295:58" pos:end="1295:64">sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1297:17" pos:end="1297:49"><expr pos:start="1297:17" pos:end="1297:48"><name pos:start="1297:17" pos:end="1297:28"><name pos:start="1297:17" pos:end="1297:19">act</name><operator pos:start="1297:20" pos:end="1297:20">.</operator><name pos:start="1297:21" pos:end="1297:28">sa_flags</name></name> <operator pos:start="1297:30" pos:end="1297:30">=</operator> <name pos:start="1297:32" pos:end="1297:48"><name pos:start="1297:32" pos:end="1297:38">old_act</name><operator pos:start="1297:39" pos:end="1297:40">-&gt;</operator><name pos:start="1297:41" pos:end="1297:48">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1299:17" pos:end="1299:36"><expr pos:start="1299:17" pos:end="1299:35"><name pos:start="1299:17" pos:end="1299:31"><name pos:start="1299:17" pos:end="1299:19">act</name><operator pos:start="1299:20" pos:end="1299:20">.</operator><name pos:start="1299:21" pos:end="1299:31">sa_restorer</name></name> <operator pos:start="1299:33" pos:end="1299:33">=</operator> <literal type="number" pos:start="1299:35" pos:end="1299:35">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1301:17" pos:end="1301:53"><expr pos:start="1301:17" pos:end="1301:52"><call pos:start="1301:17" pos:end="1301:52"><name pos:start="1301:17" pos:end="1301:34">unlock_user_struct</name><argument_list pos:start="1301:35" pos:end="1301:52">(<argument pos:start="1301:36" pos:end="1301:42"><expr pos:start="1301:36" pos:end="1301:42"><name pos:start="1301:36" pos:end="1301:42">old_act</name></expr></argument>, <argument pos:start="1301:45" pos:end="1301:48"><expr pos:start="1301:45" pos:end="1301:48"><name pos:start="1301:45" pos:end="1301:48">arg2</name></expr></argument>, <argument pos:start="1301:51" pos:end="1301:51"><expr pos:start="1301:51" pos:end="1301:51"><literal type="number" pos:start="1301:51" pos:end="1301:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1303:17" pos:end="1303:28"><expr pos:start="1303:17" pos:end="1303:27"><name pos:start="1303:17" pos:end="1303:20">pact</name> <operator pos:start="1303:22" pos:end="1303:22">=</operator> <operator pos:start="1303:24" pos:end="1303:24">&amp;</operator><name pos:start="1303:25" pos:end="1303:27">act</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1307:13" pos:end="1307:61"><expr pos:start="1307:13" pos:end="1307:60"><name pos:start="1307:13" pos:end="1307:15">ret</name> <operator pos:start="1307:17" pos:end="1307:17">=</operator> <call pos:start="1307:19" pos:end="1307:60"><name pos:start="1307:19" pos:end="1307:27">get_errno</name><argument_list pos:start="1307:28" pos:end="1307:60">(<argument pos:start="1307:29" pos:end="1307:59"><expr pos:start="1307:29" pos:end="1307:59"><call pos:start="1307:29" pos:end="1307:59"><name pos:start="1307:29" pos:end="1307:40">do_sigaction</name><argument_list pos:start="1307:41" pos:end="1307:59">(<argument pos:start="1307:42" pos:end="1307:45"><expr pos:start="1307:42" pos:end="1307:45"><name pos:start="1307:42" pos:end="1307:45">arg1</name></expr></argument>, <argument pos:start="1307:48" pos:end="1307:51"><expr pos:start="1307:48" pos:end="1307:51"><name pos:start="1307:48" pos:end="1307:51">pact</name></expr></argument>, <argument pos:start="1307:54" pos:end="1307:58"><expr pos:start="1307:54" pos:end="1307:58"><operator pos:start="1307:54" pos:end="1307:54">&amp;</operator><name pos:start="1307:55" pos:end="1307:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1309:13" pos:end="1326:0"><if pos:start="1309:13" pos:end="1326:0">if <condition pos:start="1309:16" pos:end="1309:39">(<expr pos:start="1309:17" pos:end="1309:38"><operator pos:start="1309:17" pos:end="1309:17">!</operator><call pos:start="1309:18" pos:end="1309:30"><name pos:start="1309:18" pos:end="1309:25">is_error</name><argument_list pos:start="1309:26" pos:end="1309:30">(<argument pos:start="1309:27" pos:end="1309:29"><expr pos:start="1309:27" pos:end="1309:29"><name pos:start="1309:27" pos:end="1309:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1309:32" pos:end="1309:33">&amp;&amp;</operator> <name pos:start="1309:35" pos:end="1309:38">arg3</name></expr>)</condition> <block pos:start="1309:41" pos:end="1326:0">{<block_content pos:start="1311:17" pos:end="1321:53">

                <if_stmt pos:start="1311:17" pos:end="1313:32"><if pos:start="1311:17" pos:end="1313:32">if <condition pos:start="1311:20" pos:end="1311:70">(<expr pos:start="1311:21" pos:end="1311:69"><operator pos:start="1311:21" pos:end="1311:21">!</operator><call pos:start="1311:22" pos:end="1311:69"><name pos:start="1311:22" pos:end="1311:37">lock_user_struct</name><argument_list pos:start="1311:38" pos:end="1311:69">(<argument pos:start="1311:39" pos:end="1311:50"><expr pos:start="1311:39" pos:end="1311:50"><name pos:start="1311:39" pos:end="1311:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1311:53" pos:end="1311:59"><expr pos:start="1311:53" pos:end="1311:59"><name pos:start="1311:53" pos:end="1311:59">old_act</name></expr></argument>, <argument pos:start="1311:62" pos:end="1311:65"><expr pos:start="1311:62" pos:end="1311:65"><name pos:start="1311:62" pos:end="1311:65">arg3</name></expr></argument>, <argument pos:start="1311:68" pos:end="1311:68"><expr pos:start="1311:68" pos:end="1311:68"><literal type="number" pos:start="1311:68" pos:end="1311:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1313:21" pos:end="1313:32"><block_content pos:start="1313:21" pos:end="1313:32">

                    <goto pos:start="1313:21" pos:end="1313:32">goto <name pos:start="1313:26" pos:end="1313:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1315:17" pos:end="1315:56"><expr pos:start="1315:17" pos:end="1315:55"><name pos:start="1315:17" pos:end="1315:36"><name pos:start="1315:17" pos:end="1315:23">old_act</name><operator pos:start="1315:24" pos:end="1315:25">-&gt;</operator><name pos:start="1315:26" pos:end="1315:36">_sa_handler</name></name> <operator pos:start="1315:38" pos:end="1315:38">=</operator> <name pos:start="1315:40" pos:end="1315:55"><name pos:start="1315:40" pos:end="1315:43">oact</name><operator pos:start="1315:44" pos:end="1315:44">.</operator><name pos:start="1315:45" pos:end="1315:55">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1317:17" pos:end="1317:55"><expr pos:start="1317:17" pos:end="1317:54"><name pos:start="1317:17" pos:end="1317:32"><name pos:start="1317:17" pos:end="1317:23">old_act</name><operator pos:start="1317:24" pos:end="1317:25">-&gt;</operator><name pos:start="1317:26" pos:end="1317:32">sa_mask</name></name> <operator pos:start="1317:34" pos:end="1317:34">=</operator> <name pos:start="1317:36" pos:end="1317:54"><name pos:start="1317:36" pos:end="1317:39">oact</name><operator pos:start="1317:40" pos:end="1317:40">.</operator><name pos:start="1317:41" pos:end="1317:47">sa_mask</name><operator pos:start="1317:48" pos:end="1317:48">.</operator><name pos:start="1317:49" pos:end="1317:51">sig</name><index pos:start="1317:52" pos:end="1317:54">[<expr pos:start="1317:53" pos:end="1317:53"><literal type="number" pos:start="1317:53" pos:end="1317:53">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1319:17" pos:end="1319:50"><expr pos:start="1319:17" pos:end="1319:49"><name pos:start="1319:17" pos:end="1319:33"><name pos:start="1319:17" pos:end="1319:23">old_act</name><operator pos:start="1319:24" pos:end="1319:25">-&gt;</operator><name pos:start="1319:26" pos:end="1319:33">sa_flags</name></name> <operator pos:start="1319:35" pos:end="1319:35">=</operator> <name pos:start="1319:37" pos:end="1319:49"><name pos:start="1319:37" pos:end="1319:40">oact</name><operator pos:start="1319:41" pos:end="1319:41">.</operator><name pos:start="1319:42" pos:end="1319:49">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1321:17" pos:end="1321:53"><expr pos:start="1321:17" pos:end="1321:52"><call pos:start="1321:17" pos:end="1321:52"><name pos:start="1321:17" pos:end="1321:34">unlock_user_struct</name><argument_list pos:start="1321:35" pos:end="1321:52">(<argument pos:start="1321:36" pos:end="1321:42"><expr pos:start="1321:36" pos:end="1321:42"><name pos:start="1321:36" pos:end="1321:42">old_act</name></expr></argument>, <argument pos:start="1321:45" pos:end="1321:48"><expr pos:start="1321:45" pos:end="1321:48"><name pos:start="1321:45" pos:end="1321:48">arg3</name></expr></argument>, <argument pos:start="1321:51" pos:end="1321:51"><expr pos:start="1321:51" pos:end="1321:51"><literal type="number" pos:start="1321:51" pos:end="1321:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="1325:1" pos:end="1325:26">#<cpp:directive pos:start="1325:2" pos:end="1325:5">elif</cpp:directive> <expr pos:start="1325:7" pos:end="1325:26"><call pos:start="1325:7" pos:end="1325:26"><name pos:start="1325:7" pos:end="1325:13">defined</name><argument_list pos:start="1325:14" pos:end="1325:26">(<argument pos:start="1325:15" pos:end="1325:25"><expr pos:start="1325:15" pos:end="1325:25"><name pos:start="1325:15" pos:end="1325:25">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

	    <decl_stmt pos:start="1327:13" pos:end="1327:63"><decl pos:start="1327:13" pos:end="1327:39"><type pos:start="1327:13" pos:end="1327:35"><name pos:start="1327:13" pos:end="1327:35"><name pos:start="1327:13" pos:end="1327:18">struct</name> <name pos:start="1327:20" pos:end="1327:35">target_sigaction</name></name></type> <name pos:start="1327:37" pos:end="1327:39">act</name></decl>, <decl pos:start="1327:42" pos:end="1327:45"><type ref="prev" pos:start="1327:13" pos:end="1327:35"/><name pos:start="1327:42" pos:end="1327:45">oact</name></decl>, <decl pos:start="1327:48" pos:end="1327:52"><type ref="prev" pos:start="1327:13" pos:end="1327:35"><modifier pos:start="1327:48" pos:end="1327:48">*</modifier></type><name pos:start="1327:49" pos:end="1327:52">pact</name></decl>, <decl pos:start="1327:55" pos:end="1327:62"><type ref="prev" pos:start="1327:13" pos:end="1327:35"><modifier pos:start="1327:55" pos:end="1327:55">*</modifier></type><name pos:start="1327:56" pos:end="1327:62">old_act</name></decl>;</decl_stmt>



	    <if_stmt pos:start="1331:13" pos:end="1351:13"><if pos:start="1331:13" pos:end="1347:13">if <condition pos:start="1331:16" pos:end="1331:21">(<expr pos:start="1331:17" pos:end="1331:20"><name pos:start="1331:17" pos:end="1331:20">arg2</name></expr>)</condition> <block pos:start="1331:23" pos:end="1347:13">{<block_content pos:start="1333:17" pos:end="1345:28">

                <if_stmt pos:start="1333:17" pos:end="1335:32"><if pos:start="1333:17" pos:end="1335:32">if <condition pos:start="1333:20" pos:end="1333:69">(<expr pos:start="1333:21" pos:end="1333:68"><operator pos:start="1333:21" pos:end="1333:21">!</operator><call pos:start="1333:22" pos:end="1333:68"><name pos:start="1333:22" pos:end="1333:37">lock_user_struct</name><argument_list pos:start="1333:38" pos:end="1333:68">(<argument pos:start="1333:39" pos:end="1333:49"><expr pos:start="1333:39" pos:end="1333:49"><name pos:start="1333:39" pos:end="1333:49">VERIFY_READ</name></expr></argument>, <argument pos:start="1333:52" pos:end="1333:58"><expr pos:start="1333:52" pos:end="1333:58"><name pos:start="1333:52" pos:end="1333:58">old_act</name></expr></argument>, <argument pos:start="1333:61" pos:end="1333:64"><expr pos:start="1333:61" pos:end="1333:64"><name pos:start="1333:61" pos:end="1333:64">arg2</name></expr></argument>, <argument pos:start="1333:67" pos:end="1333:67"><expr pos:start="1333:67" pos:end="1333:67"><literal type="number" pos:start="1333:67" pos:end="1333:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1335:21" pos:end="1335:32"><block_content pos:start="1335:21" pos:end="1335:32">

                    <goto pos:start="1335:21" pos:end="1335:32">goto <name pos:start="1335:26" pos:end="1335:31">efault</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt pos:start="1337:17" pos:end="1337:55"><expr pos:start="1337:17" pos:end="1337:54"><name pos:start="1337:17" pos:end="1337:31"><name pos:start="1337:17" pos:end="1337:19">act</name><operator pos:start="1337:20" pos:end="1337:20">.</operator><name pos:start="1337:21" pos:end="1337:31">_sa_handler</name></name> <operator pos:start="1337:33" pos:end="1337:33">=</operator> <name pos:start="1337:35" pos:end="1337:54"><name pos:start="1337:35" pos:end="1337:41">old_act</name><operator pos:start="1337:42" pos:end="1337:43">-&gt;</operator><name pos:start="1337:44" pos:end="1337:54">_sa_handler</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1339:17" pos:end="1339:73"><expr pos:start="1339:17" pos:end="1339:72"><call pos:start="1339:17" pos:end="1339:72"><name pos:start="1339:17" pos:end="1339:33">target_siginitset</name><argument_list pos:start="1339:34" pos:end="1339:72">(<argument pos:start="1339:35" pos:end="1339:46"><expr pos:start="1339:35" pos:end="1339:46"><operator pos:start="1339:35" pos:end="1339:35">&amp;</operator><name pos:start="1339:36" pos:end="1339:46"><name pos:start="1339:36" pos:end="1339:38">act</name><operator pos:start="1339:39" pos:end="1339:39">.</operator><name pos:start="1339:40" pos:end="1339:46">sa_mask</name></name></expr></argument>, <argument pos:start="1339:49" pos:end="1339:71"><expr pos:start="1339:49" pos:end="1339:71"><name pos:start="1339:49" pos:end="1339:71"><name pos:start="1339:49" pos:end="1339:55">old_act</name><operator pos:start="1339:56" pos:end="1339:57">-&gt;</operator><name pos:start="1339:58" pos:end="1339:64">sa_mask</name><operator pos:start="1339:65" pos:end="1339:65">.</operator><name pos:start="1339:66" pos:end="1339:68">sig</name><index pos:start="1339:69" pos:end="1339:71">[<expr pos:start="1339:70" pos:end="1339:70"><literal type="number" pos:start="1339:70" pos:end="1339:70">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="1341:17" pos:end="1341:49"><expr pos:start="1341:17" pos:end="1341:48"><name pos:start="1341:17" pos:end="1341:28"><name pos:start="1341:17" pos:end="1341:19">act</name><operator pos:start="1341:20" pos:end="1341:20">.</operator><name pos:start="1341:21" pos:end="1341:28">sa_flags</name></name> <operator pos:start="1341:30" pos:end="1341:30">=</operator> <name pos:start="1341:32" pos:end="1341:48"><name pos:start="1341:32" pos:end="1341:38">old_act</name><operator pos:start="1341:39" pos:end="1341:40">-&gt;</operator><name pos:start="1341:41" pos:end="1341:48">sa_flags</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1343:17" pos:end="1343:53"><expr pos:start="1343:17" pos:end="1343:52"><call pos:start="1343:17" pos:end="1343:52"><name pos:start="1343:17" pos:end="1343:34">unlock_user_struct</name><argument_list pos:start="1343:35" pos:end="1343:52">(<argument pos:start="1343:36" pos:end="1343:42"><expr pos:start="1343:36" pos:end="1343:42"><name pos:start="1343:36" pos:end="1343:42">old_act</name></expr></argument>, <argument pos:start="1343:45" pos:end="1343:48"><expr pos:start="1343:45" pos:end="1343:48"><name pos:start="1343:45" pos:end="1343:48">arg2</name></expr></argument>, <argument pos:start="1343:51" pos:end="1343:51"><expr pos:start="1343:51" pos:end="1343:51"><literal type="number" pos:start="1343:51" pos:end="1343:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="1345:17" pos:end="1345:28"><expr pos:start="1345:17" pos:end="1345:27"><name pos:start="1345:17" pos:end="1345:20">pact</name> <operator pos:start="1345:22" pos:end="1345:22">=</operator> <operator pos:start="1345:24" pos:end="1345:24">&amp;</operator><name pos:start="1345:25" pos:end="1345:27">act</name></expr>;</expr_stmt>

	    </block_content>}</block></if> <else pos:start="1347:15" pos:end="1351:13">else <block pos:start="1347:20" pos:end="1351:13">{<block_content pos:start="1349:17" pos:end="1349:28">

		<expr_stmt pos:start="1349:17" pos:end="1349:28"><expr pos:start="1349:17" pos:end="1349:27"><name pos:start="1349:17" pos:end="1349:20">pact</name> <operator pos:start="1349:22" pos:end="1349:22">=</operator> <name pos:start="1349:24" pos:end="1349:27">NULL</name></expr>;</expr_stmt>

	    </block_content>}</block></else></if_stmt>



	    <expr_stmt pos:start="1355:13" pos:end="1355:61"><expr pos:start="1355:13" pos:end="1355:60"><name pos:start="1355:13" pos:end="1355:15">ret</name> <operator pos:start="1355:17" pos:end="1355:17">=</operator> <call pos:start="1355:19" pos:end="1355:60"><name pos:start="1355:19" pos:end="1355:27">get_errno</name><argument_list pos:start="1355:28" pos:end="1355:60">(<argument pos:start="1355:29" pos:end="1355:59"><expr pos:start="1355:29" pos:end="1355:59"><call pos:start="1355:29" pos:end="1355:59"><name pos:start="1355:29" pos:end="1355:40">do_sigaction</name><argument_list pos:start="1355:41" pos:end="1355:59">(<argument pos:start="1355:42" pos:end="1355:45"><expr pos:start="1355:42" pos:end="1355:45"><name pos:start="1355:42" pos:end="1355:45">arg1</name></expr></argument>, <argument pos:start="1355:48" pos:end="1355:51"><expr pos:start="1355:48" pos:end="1355:51"><name pos:start="1355:48" pos:end="1355:51">pact</name></expr></argument>, <argument pos:start="1355:54" pos:end="1355:58"><expr pos:start="1355:54" pos:end="1355:58"><operator pos:start="1355:54" pos:end="1355:54">&amp;</operator><name pos:start="1355:55" pos:end="1355:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	    <if_stmt pos:start="1359:13" pos:end="1382:0"><if pos:start="1359:13" pos:end="1382:0">if <condition pos:start="1359:16" pos:end="1359:39">(<expr pos:start="1359:17" pos:end="1359:38"><operator pos:start="1359:17" pos:end="1359:17">!</operator><call pos:start="1359:18" pos:end="1359:30"><name pos:start="1359:18" pos:end="1359:25">is_error</name><argument_list pos:start="1359:26" pos:end="1359:30">(<argument pos:start="1359:27" pos:end="1359:29"><expr pos:start="1359:27" pos:end="1359:29"><name pos:start="1359:27" pos:end="1359:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1359:32" pos:end="1359:33">&amp;&amp;</operator> <name pos:start="1359:35" pos:end="1359:38">arg3</name></expr>)</condition> <block pos:start="1359:41" pos:end="1382:0">{<block_content pos:start="1361:17" pos:end="1377:53">

                <if_stmt pos:start="1361:17" pos:end="1363:32"><if pos:start="1361:17" pos:end="1363:32">if <condition pos:start="1361:20" pos:end="1361:70">(<expr pos:start="1361:21" pos:end="1361:69"><operator pos:start="1361:21" pos:end="1361:21">!</operator><call pos:start="1361:22" pos:end="1361:69"><name pos:start="1361:22" pos:end="1361:37">lock_user_struct</name><argument_list pos:start="1361:38" pos:end="1361:69">(<argument pos:start="1361:39" pos:end="1361:50"><expr pos:start="1361:39" pos:end="1361:50"><name pos:start="1361:39" pos:end="1361:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1361:53" pos:end="1361:59"><expr pos:start="1361:53" pos:end="1361:59"><name pos:start="1361:53" pos:end="1361:59">old_act</name></expr></argument>, <argument pos:start="1361:62" pos:end="1361:65"><expr pos:start="1361:62" pos:end="1361:65"><name pos:start="1361:62" pos:end="1361:65">arg3</name></expr></argument>, <argument pos:start="1361:68" pos:end="1361:68"><expr pos:start="1361:68" pos:end="1361:68"><literal type="number" pos:start="1361:68" pos:end="1361:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1363:21" pos:end="1363:32"><block_content pos:start="1363:21" pos:end="1363:32">

                    <goto pos:start="1363:21" pos:end="1363:32">goto <name pos:start="1363:26" pos:end="1363:31">efault</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt pos:start="1365:17" pos:end="1365:56"><expr pos:start="1365:17" pos:end="1365:55"><name pos:start="1365:17" pos:end="1365:36"><name pos:start="1365:17" pos:end="1365:23">old_act</name><operator pos:start="1365:24" pos:end="1365:25">-&gt;</operator><name pos:start="1365:26" pos:end="1365:36">_sa_handler</name></name> <operator pos:start="1365:38" pos:end="1365:38">=</operator> <name pos:start="1365:40" pos:end="1365:55"><name pos:start="1365:40" pos:end="1365:43">oact</name><operator pos:start="1365:44" pos:end="1365:44">.</operator><name pos:start="1365:45" pos:end="1365:55">_sa_handler</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1367:17" pos:end="1367:50"><expr pos:start="1367:17" pos:end="1367:49"><name pos:start="1367:17" pos:end="1367:33"><name pos:start="1367:17" pos:end="1367:23">old_act</name><operator pos:start="1367:24" pos:end="1367:25">-&gt;</operator><name pos:start="1367:26" pos:end="1367:33">sa_flags</name></name> <operator pos:start="1367:35" pos:end="1367:35">=</operator> <name pos:start="1367:37" pos:end="1367:49"><name pos:start="1367:37" pos:end="1367:40">oact</name><operator pos:start="1367:41" pos:end="1367:41">.</operator><name pos:start="1367:42" pos:end="1367:49">sa_flags</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1369:17" pos:end="1369:62"><expr pos:start="1369:17" pos:end="1369:61"><name pos:start="1369:17" pos:end="1369:39"><name pos:start="1369:17" pos:end="1369:23">old_act</name><operator pos:start="1369:24" pos:end="1369:25">-&gt;</operator><name pos:start="1369:26" pos:end="1369:32">sa_mask</name><operator pos:start="1369:33" pos:end="1369:33">.</operator><name pos:start="1369:34" pos:end="1369:36">sig</name><index pos:start="1369:37" pos:end="1369:39">[<expr pos:start="1369:38" pos:end="1369:38"><literal type="number" pos:start="1369:38" pos:end="1369:38">0</literal></expr>]</index></name> <operator pos:start="1369:41" pos:end="1369:41">=</operator> <name pos:start="1369:43" pos:end="1369:61"><name pos:start="1369:43" pos:end="1369:46">oact</name><operator pos:start="1369:47" pos:end="1369:47">.</operator><name pos:start="1369:48" pos:end="1369:54">sa_mask</name><operator pos:start="1369:55" pos:end="1369:55">.</operator><name pos:start="1369:56" pos:end="1369:58">sig</name><index pos:start="1369:59" pos:end="1369:61">[<expr pos:start="1369:60" pos:end="1369:60"><literal type="number" pos:start="1369:60" pos:end="1369:60">0</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1371:17" pos:end="1371:44"><expr pos:start="1371:17" pos:end="1371:43"><name pos:start="1371:17" pos:end="1371:39"><name pos:start="1371:17" pos:end="1371:23">old_act</name><operator pos:start="1371:24" pos:end="1371:25">-&gt;</operator><name pos:start="1371:26" pos:end="1371:32">sa_mask</name><operator pos:start="1371:33" pos:end="1371:33">.</operator><name pos:start="1371:34" pos:end="1371:36">sig</name><index pos:start="1371:37" pos:end="1371:39">[<expr pos:start="1371:38" pos:end="1371:38"><literal type="number" pos:start="1371:38" pos:end="1371:38">1</literal></expr>]</index></name> <operator pos:start="1371:41" pos:end="1371:41">=</operator> <literal type="number" pos:start="1371:43" pos:end="1371:43">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="1373:17" pos:end="1373:44"><expr pos:start="1373:17" pos:end="1373:43"><name pos:start="1373:17" pos:end="1373:39"><name pos:start="1373:17" pos:end="1373:23">old_act</name><operator pos:start="1373:24" pos:end="1373:25">-&gt;</operator><name pos:start="1373:26" pos:end="1373:32">sa_mask</name><operator pos:start="1373:33" pos:end="1373:33">.</operator><name pos:start="1373:34" pos:end="1373:36">sig</name><index pos:start="1373:37" pos:end="1373:39">[<expr pos:start="1373:38" pos:end="1373:38"><literal type="number" pos:start="1373:38" pos:end="1373:38">2</literal></expr>]</index></name> <operator pos:start="1373:41" pos:end="1373:41">=</operator> <literal type="number" pos:start="1373:43" pos:end="1373:43">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="1375:17" pos:end="1375:44"><expr pos:start="1375:17" pos:end="1375:43"><name pos:start="1375:17" pos:end="1375:39"><name pos:start="1375:17" pos:end="1375:23">old_act</name><operator pos:start="1375:24" pos:end="1375:25">-&gt;</operator><name pos:start="1375:26" pos:end="1375:32">sa_mask</name><operator pos:start="1375:33" pos:end="1375:33">.</operator><name pos:start="1375:34" pos:end="1375:36">sig</name><index pos:start="1375:37" pos:end="1375:39">[<expr pos:start="1375:38" pos:end="1375:38"><literal type="number" pos:start="1375:38" pos:end="1375:38">3</literal></expr>]</index></name> <operator pos:start="1375:41" pos:end="1375:41">=</operator> <literal type="number" pos:start="1375:43" pos:end="1375:43">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="1377:17" pos:end="1377:53"><expr pos:start="1377:17" pos:end="1377:52"><call pos:start="1377:17" pos:end="1377:52"><name pos:start="1377:17" pos:end="1377:34">unlock_user_struct</name><argument_list pos:start="1377:35" pos:end="1377:52">(<argument pos:start="1377:36" pos:end="1377:42"><expr pos:start="1377:36" pos:end="1377:42"><name pos:start="1377:36" pos:end="1377:42">old_act</name></expr></argument>, <argument pos:start="1377:45" pos:end="1377:48"><expr pos:start="1377:45" pos:end="1377:48"><name pos:start="1377:45" pos:end="1377:48">arg3</name></expr></argument>, <argument pos:start="1377:51" pos:end="1377:51"><expr pos:start="1377:51" pos:end="1377:51"><literal type="number" pos:start="1377:51" pos:end="1377:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="1381:1" pos:end="1381:5">#<cpp:directive pos:start="1381:2" pos:end="1381:5">else</cpp:directive></cpp:else>

            <decl_stmt pos:start="1383:13" pos:end="1383:49"><decl pos:start="1383:13" pos:end="1383:48"><type pos:start="1383:13" pos:end="1383:41"><name pos:start="1383:13" pos:end="1383:39"><name pos:start="1383:13" pos:end="1383:18">struct</name> <name pos:start="1383:20" pos:end="1383:39">target_old_sigaction</name></name> <modifier pos:start="1383:41" pos:end="1383:41">*</modifier></type><name pos:start="1383:42" pos:end="1383:48">old_act</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1385:13" pos:end="1385:53"><decl pos:start="1385:13" pos:end="1385:39"><type pos:start="1385:13" pos:end="1385:35"><name pos:start="1385:13" pos:end="1385:35"><name pos:start="1385:13" pos:end="1385:18">struct</name> <name pos:start="1385:20" pos:end="1385:35">target_sigaction</name></name></type> <name pos:start="1385:37" pos:end="1385:39">act</name></decl>, <decl pos:start="1385:42" pos:end="1385:45"><type ref="prev" pos:start="1385:13" pos:end="1385:35"/><name pos:start="1385:42" pos:end="1385:45">oact</name></decl>, <decl pos:start="1385:48" pos:end="1385:52"><type ref="prev" pos:start="1385:13" pos:end="1385:35"><modifier pos:start="1385:48" pos:end="1385:48">*</modifier></type><name pos:start="1385:49" pos:end="1385:52">pact</name></decl>;</decl_stmt>

            <if_stmt pos:start="1387:13" pos:end="1409:13"><if pos:start="1387:13" pos:end="1405:13">if <condition pos:start="1387:16" pos:end="1387:21">(<expr pos:start="1387:17" pos:end="1387:20"><name pos:start="1387:17" pos:end="1387:20">arg2</name></expr>)</condition> <block pos:start="1387:23" pos:end="1405:13">{<block_content pos:start="1389:17" pos:end="1403:28">

                <if_stmt pos:start="1389:17" pos:end="1391:32"><if pos:start="1389:17" pos:end="1391:32">if <condition pos:start="1389:20" pos:end="1389:69">(<expr pos:start="1389:21" pos:end="1389:68"><operator pos:start="1389:21" pos:end="1389:21">!</operator><call pos:start="1389:22" pos:end="1389:68"><name pos:start="1389:22" pos:end="1389:37">lock_user_struct</name><argument_list pos:start="1389:38" pos:end="1389:68">(<argument pos:start="1389:39" pos:end="1389:49"><expr pos:start="1389:39" pos:end="1389:49"><name pos:start="1389:39" pos:end="1389:49">VERIFY_READ</name></expr></argument>, <argument pos:start="1389:52" pos:end="1389:58"><expr pos:start="1389:52" pos:end="1389:58"><name pos:start="1389:52" pos:end="1389:58">old_act</name></expr></argument>, <argument pos:start="1389:61" pos:end="1389:64"><expr pos:start="1389:61" pos:end="1389:64"><name pos:start="1389:61" pos:end="1389:64">arg2</name></expr></argument>, <argument pos:start="1389:67" pos:end="1389:67"><expr pos:start="1389:67" pos:end="1389:67"><literal type="number" pos:start="1389:67" pos:end="1389:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1391:21" pos:end="1391:32"><block_content pos:start="1391:21" pos:end="1391:32">

                    <goto pos:start="1391:21" pos:end="1391:32">goto <name pos:start="1391:26" pos:end="1391:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1393:17" pos:end="1393:55"><expr pos:start="1393:17" pos:end="1393:54"><name pos:start="1393:17" pos:end="1393:31"><name pos:start="1393:17" pos:end="1393:19">act</name><operator pos:start="1393:20" pos:end="1393:20">.</operator><name pos:start="1393:21" pos:end="1393:31">_sa_handler</name></name> <operator pos:start="1393:33" pos:end="1393:33">=</operator> <name pos:start="1393:35" pos:end="1393:54"><name pos:start="1393:35" pos:end="1393:41">old_act</name><operator pos:start="1393:42" pos:end="1393:43">-&gt;</operator><name pos:start="1393:44" pos:end="1393:54">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1395:17" pos:end="1395:66"><expr pos:start="1395:17" pos:end="1395:65"><call pos:start="1395:17" pos:end="1395:65"><name pos:start="1395:17" pos:end="1395:33">target_siginitset</name><argument_list pos:start="1395:34" pos:end="1395:65">(<argument pos:start="1395:35" pos:end="1395:46"><expr pos:start="1395:35" pos:end="1395:46"><operator pos:start="1395:35" pos:end="1395:35">&amp;</operator><name pos:start="1395:36" pos:end="1395:46"><name pos:start="1395:36" pos:end="1395:38">act</name><operator pos:start="1395:39" pos:end="1395:39">.</operator><name pos:start="1395:40" pos:end="1395:46">sa_mask</name></name></expr></argument>, <argument pos:start="1395:49" pos:end="1395:64"><expr pos:start="1395:49" pos:end="1395:64"><name pos:start="1395:49" pos:end="1395:64"><name pos:start="1395:49" pos:end="1395:55">old_act</name><operator pos:start="1395:56" pos:end="1395:57">-&gt;</operator><name pos:start="1395:58" pos:end="1395:64">sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1397:17" pos:end="1397:49"><expr pos:start="1397:17" pos:end="1397:48"><name pos:start="1397:17" pos:end="1397:28"><name pos:start="1397:17" pos:end="1397:19">act</name><operator pos:start="1397:20" pos:end="1397:20">.</operator><name pos:start="1397:21" pos:end="1397:28">sa_flags</name></name> <operator pos:start="1397:30" pos:end="1397:30">=</operator> <name pos:start="1397:32" pos:end="1397:48"><name pos:start="1397:32" pos:end="1397:38">old_act</name><operator pos:start="1397:39" pos:end="1397:40">-&gt;</operator><name pos:start="1397:41" pos:end="1397:48">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1399:17" pos:end="1399:55"><expr pos:start="1399:17" pos:end="1399:54"><name pos:start="1399:17" pos:end="1399:31"><name pos:start="1399:17" pos:end="1399:19">act</name><operator pos:start="1399:20" pos:end="1399:20">.</operator><name pos:start="1399:21" pos:end="1399:31">sa_restorer</name></name> <operator pos:start="1399:33" pos:end="1399:33">=</operator> <name pos:start="1399:35" pos:end="1399:54"><name pos:start="1399:35" pos:end="1399:41">old_act</name><operator pos:start="1399:42" pos:end="1399:43">-&gt;</operator><name pos:start="1399:44" pos:end="1399:54">sa_restorer</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1401:17" pos:end="1401:53"><expr pos:start="1401:17" pos:end="1401:52"><call pos:start="1401:17" pos:end="1401:52"><name pos:start="1401:17" pos:end="1401:34">unlock_user_struct</name><argument_list pos:start="1401:35" pos:end="1401:52">(<argument pos:start="1401:36" pos:end="1401:42"><expr pos:start="1401:36" pos:end="1401:42"><name pos:start="1401:36" pos:end="1401:42">old_act</name></expr></argument>, <argument pos:start="1401:45" pos:end="1401:48"><expr pos:start="1401:45" pos:end="1401:48"><name pos:start="1401:45" pos:end="1401:48">arg2</name></expr></argument>, <argument pos:start="1401:51" pos:end="1401:51"><expr pos:start="1401:51" pos:end="1401:51"><literal type="number" pos:start="1401:51" pos:end="1401:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1403:17" pos:end="1403:28"><expr pos:start="1403:17" pos:end="1403:27"><name pos:start="1403:17" pos:end="1403:20">pact</name> <operator pos:start="1403:22" pos:end="1403:22">=</operator> <operator pos:start="1403:24" pos:end="1403:24">&amp;</operator><name pos:start="1403:25" pos:end="1403:27">act</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1405:15" pos:end="1409:13">else <block pos:start="1405:20" pos:end="1409:13">{<block_content pos:start="1407:17" pos:end="1407:28">

                <expr_stmt pos:start="1407:17" pos:end="1407:28"><expr pos:start="1407:17" pos:end="1407:27"><name pos:start="1407:17" pos:end="1407:20">pact</name> <operator pos:start="1407:22" pos:end="1407:22">=</operator> <name pos:start="1407:24" pos:end="1407:27">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1411:13" pos:end="1411:61"><expr pos:start="1411:13" pos:end="1411:60"><name pos:start="1411:13" pos:end="1411:15">ret</name> <operator pos:start="1411:17" pos:end="1411:17">=</operator> <call pos:start="1411:19" pos:end="1411:60"><name pos:start="1411:19" pos:end="1411:27">get_errno</name><argument_list pos:start="1411:28" pos:end="1411:60">(<argument pos:start="1411:29" pos:end="1411:59"><expr pos:start="1411:29" pos:end="1411:59"><call pos:start="1411:29" pos:end="1411:59"><name pos:start="1411:29" pos:end="1411:40">do_sigaction</name><argument_list pos:start="1411:41" pos:end="1411:59">(<argument pos:start="1411:42" pos:end="1411:45"><expr pos:start="1411:42" pos:end="1411:45"><name pos:start="1411:42" pos:end="1411:45">arg1</name></expr></argument>, <argument pos:start="1411:48" pos:end="1411:51"><expr pos:start="1411:48" pos:end="1411:51"><name pos:start="1411:48" pos:end="1411:51">pact</name></expr></argument>, <argument pos:start="1411:54" pos:end="1411:58"><expr pos:start="1411:54" pos:end="1411:58"><operator pos:start="1411:54" pos:end="1411:54">&amp;</operator><name pos:start="1411:55" pos:end="1411:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1413:13" pos:end="1432:0"><if pos:start="1413:13" pos:end="1432:0">if <condition pos:start="1413:16" pos:end="1413:39">(<expr pos:start="1413:17" pos:end="1413:38"><operator pos:start="1413:17" pos:end="1413:17">!</operator><call pos:start="1413:18" pos:end="1413:30"><name pos:start="1413:18" pos:end="1413:25">is_error</name><argument_list pos:start="1413:26" pos:end="1413:30">(<argument pos:start="1413:27" pos:end="1413:29"><expr pos:start="1413:27" pos:end="1413:29"><name pos:start="1413:27" pos:end="1413:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1413:32" pos:end="1413:33">&amp;&amp;</operator> <name pos:start="1413:35" pos:end="1413:38">arg3</name></expr>)</condition> <block pos:start="1413:41" pos:end="1432:0">{<block_content pos:start="1415:17" pos:end="1427:53">

                <if_stmt pos:start="1415:17" pos:end="1417:32"><if pos:start="1415:17" pos:end="1417:32">if <condition pos:start="1415:20" pos:end="1415:70">(<expr pos:start="1415:21" pos:end="1415:69"><operator pos:start="1415:21" pos:end="1415:21">!</operator><call pos:start="1415:22" pos:end="1415:69"><name pos:start="1415:22" pos:end="1415:37">lock_user_struct</name><argument_list pos:start="1415:38" pos:end="1415:69">(<argument pos:start="1415:39" pos:end="1415:50"><expr pos:start="1415:39" pos:end="1415:50"><name pos:start="1415:39" pos:end="1415:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1415:53" pos:end="1415:59"><expr pos:start="1415:53" pos:end="1415:59"><name pos:start="1415:53" pos:end="1415:59">old_act</name></expr></argument>, <argument pos:start="1415:62" pos:end="1415:65"><expr pos:start="1415:62" pos:end="1415:65"><name pos:start="1415:62" pos:end="1415:65">arg3</name></expr></argument>, <argument pos:start="1415:68" pos:end="1415:68"><expr pos:start="1415:68" pos:end="1415:68"><literal type="number" pos:start="1415:68" pos:end="1415:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1417:21" pos:end="1417:32"><block_content pos:start="1417:21" pos:end="1417:32">

                    <goto pos:start="1417:21" pos:end="1417:32">goto <name pos:start="1417:26" pos:end="1417:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1419:17" pos:end="1419:56"><expr pos:start="1419:17" pos:end="1419:55"><name pos:start="1419:17" pos:end="1419:36"><name pos:start="1419:17" pos:end="1419:23">old_act</name><operator pos:start="1419:24" pos:end="1419:25">-&gt;</operator><name pos:start="1419:26" pos:end="1419:36">_sa_handler</name></name> <operator pos:start="1419:38" pos:end="1419:38">=</operator> <name pos:start="1419:40" pos:end="1419:55"><name pos:start="1419:40" pos:end="1419:43">oact</name><operator pos:start="1419:44" pos:end="1419:44">.</operator><name pos:start="1419:45" pos:end="1419:55">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1421:17" pos:end="1421:55"><expr pos:start="1421:17" pos:end="1421:54"><name pos:start="1421:17" pos:end="1421:32"><name pos:start="1421:17" pos:end="1421:23">old_act</name><operator pos:start="1421:24" pos:end="1421:25">-&gt;</operator><name pos:start="1421:26" pos:end="1421:32">sa_mask</name></name> <operator pos:start="1421:34" pos:end="1421:34">=</operator> <name pos:start="1421:36" pos:end="1421:54"><name pos:start="1421:36" pos:end="1421:39">oact</name><operator pos:start="1421:40" pos:end="1421:40">.</operator><name pos:start="1421:41" pos:end="1421:47">sa_mask</name><operator pos:start="1421:48" pos:end="1421:48">.</operator><name pos:start="1421:49" pos:end="1421:51">sig</name><index pos:start="1421:52" pos:end="1421:54">[<expr pos:start="1421:53" pos:end="1421:53"><literal type="number" pos:start="1421:53" pos:end="1421:53">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1423:17" pos:end="1423:50"><expr pos:start="1423:17" pos:end="1423:49"><name pos:start="1423:17" pos:end="1423:33"><name pos:start="1423:17" pos:end="1423:23">old_act</name><operator pos:start="1423:24" pos:end="1423:25">-&gt;</operator><name pos:start="1423:26" pos:end="1423:33">sa_flags</name></name> <operator pos:start="1423:35" pos:end="1423:35">=</operator> <name pos:start="1423:37" pos:end="1423:49"><name pos:start="1423:37" pos:end="1423:40">oact</name><operator pos:start="1423:41" pos:end="1423:41">.</operator><name pos:start="1423:42" pos:end="1423:49">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1425:17" pos:end="1425:56"><expr pos:start="1425:17" pos:end="1425:55"><name pos:start="1425:17" pos:end="1425:36"><name pos:start="1425:17" pos:end="1425:23">old_act</name><operator pos:start="1425:24" pos:end="1425:25">-&gt;</operator><name pos:start="1425:26" pos:end="1425:36">sa_restorer</name></name> <operator pos:start="1425:38" pos:end="1425:38">=</operator> <name pos:start="1425:40" pos:end="1425:55"><name pos:start="1425:40" pos:end="1425:43">oact</name><operator pos:start="1425:44" pos:end="1425:44">.</operator><name pos:start="1425:45" pos:end="1425:55">sa_restorer</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1427:17" pos:end="1427:53"><expr pos:start="1427:17" pos:end="1427:52"><call pos:start="1427:17" pos:end="1427:52"><name pos:start="1427:17" pos:end="1427:34">unlock_user_struct</name><argument_list pos:start="1427:35" pos:end="1427:52">(<argument pos:start="1427:36" pos:end="1427:42"><expr pos:start="1427:36" pos:end="1427:42"><name pos:start="1427:36" pos:end="1427:42">old_act</name></expr></argument>, <argument pos:start="1427:45" pos:end="1427:48"><expr pos:start="1427:45" pos:end="1427:48"><name pos:start="1427:45" pos:end="1427:48">arg3</name></expr></argument>, <argument pos:start="1427:51" pos:end="1427:51"><expr pos:start="1427:51" pos:end="1427:51"><literal type="number" pos:start="1427:51" pos:end="1427:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="1431:1" pos:end="1431:6">#<cpp:directive pos:start="1431:2" pos:end="1431:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block>

        <break pos:start="1435:9" pos:end="1438:0">break;</break>

<cpp:endif pos:start="1437:1" pos:end="1437:6">#<cpp:directive pos:start="1437:2" pos:end="1437:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1439:5" pos:end="1439:32">case <expr pos:start="1439:10" pos:end="1439:31"><name pos:start="1439:10" pos:end="1439:31">TARGET_NR_rt_sigaction</name></expr>:</case>

        <block pos:start="1441:9" pos:end="1535:9">{<block_content pos:start="1445:13" pos:end="1534:0">

<cpp:if pos:start="1443:1" pos:end="1443:25">#<cpp:directive pos:start="1443:2" pos:end="1443:3">if</cpp:directive> <expr pos:start="1443:5" pos:end="1443:25"><call pos:start="1443:5" pos:end="1443:25"><name pos:start="1443:5" pos:end="1443:11">defined</name><argument_list pos:start="1443:12" pos:end="1443:25">(<argument pos:start="1443:13" pos:end="1443:24"><expr pos:start="1443:13" pos:end="1443:24"><name pos:start="1443:13" pos:end="1443:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <decl_stmt pos:start="1445:13" pos:end="1445:57"><decl pos:start="1445:13" pos:end="1445:39"><type pos:start="1445:13" pos:end="1445:35"><name pos:start="1445:13" pos:end="1445:35"><name pos:start="1445:13" pos:end="1445:18">struct</name> <name pos:start="1445:20" pos:end="1445:35">target_sigaction</name></name></type> <name pos:start="1445:37" pos:end="1445:39">act</name></decl>, <decl pos:start="1445:42" pos:end="1445:45"><type ref="prev" pos:start="1445:13" pos:end="1445:35"/><name pos:start="1445:42" pos:end="1445:45">oact</name></decl>, <decl pos:start="1445:48" pos:end="1445:56"><type ref="prev" pos:start="1445:13" pos:end="1445:35"><modifier pos:start="1445:48" pos:end="1445:48">*</modifier></type><name pos:start="1445:49" pos:end="1445:52">pact</name> <init pos:start="1445:54" pos:end="1445:56">= <expr pos:start="1445:56" pos:end="1445:56"><literal type="number" pos:start="1445:56" pos:end="1445:56">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="1447:13" pos:end="1447:47"><decl pos:start="1447:13" pos:end="1447:46"><type pos:start="1447:13" pos:end="1447:40"><name pos:start="1447:13" pos:end="1447:38"><name pos:start="1447:13" pos:end="1447:18">struct</name> <name pos:start="1447:20" pos:end="1447:38">target_rt_sigaction</name></name> <modifier pos:start="1447:40" pos:end="1447:40">*</modifier></type><name pos:start="1447:41" pos:end="1447:46">rt_act</name></decl>;</decl_stmt>

            <comment type="block" pos:start="1449:13" pos:end="1449:48">/* ??? arg4 == sizeof(sigset_t).  */</comment>

            <if_stmt pos:start="1451:13" pos:end="1469:13"><if pos:start="1451:13" pos:end="1469:13">if <condition pos:start="1451:16" pos:end="1451:21">(<expr pos:start="1451:17" pos:end="1451:20"><name pos:start="1451:17" pos:end="1451:20">arg2</name></expr>)</condition> <block pos:start="1451:23" pos:end="1469:13">{<block_content pos:start="1453:17" pos:end="1467:28">

                <if_stmt pos:start="1453:17" pos:end="1455:32"><if pos:start="1453:17" pos:end="1455:32">if <condition pos:start="1453:20" pos:end="1453:68">(<expr pos:start="1453:21" pos:end="1453:67"><operator pos:start="1453:21" pos:end="1453:21">!</operator><call pos:start="1453:22" pos:end="1453:67"><name pos:start="1453:22" pos:end="1453:37">lock_user_struct</name><argument_list pos:start="1453:38" pos:end="1453:67">(<argument pos:start="1453:39" pos:end="1453:49"><expr pos:start="1453:39" pos:end="1453:49"><name pos:start="1453:39" pos:end="1453:49">VERIFY_READ</name></expr></argument>, <argument pos:start="1453:52" pos:end="1453:57"><expr pos:start="1453:52" pos:end="1453:57"><name pos:start="1453:52" pos:end="1453:57">rt_act</name></expr></argument>, <argument pos:start="1453:60" pos:end="1453:63"><expr pos:start="1453:60" pos:end="1453:63"><name pos:start="1453:60" pos:end="1453:63">arg2</name></expr></argument>, <argument pos:start="1453:66" pos:end="1453:66"><expr pos:start="1453:66" pos:end="1453:66"><literal type="number" pos:start="1453:66" pos:end="1453:66">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1455:21" pos:end="1455:32"><block_content pos:start="1455:21" pos:end="1455:32">

                    <goto pos:start="1455:21" pos:end="1455:32">goto <name pos:start="1455:26" pos:end="1455:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1457:17" pos:end="1457:54"><expr pos:start="1457:17" pos:end="1457:53"><name pos:start="1457:17" pos:end="1457:31"><name pos:start="1457:17" pos:end="1457:19">act</name><operator pos:start="1457:20" pos:end="1457:20">.</operator><name pos:start="1457:21" pos:end="1457:31">_sa_handler</name></name> <operator pos:start="1457:33" pos:end="1457:33">=</operator> <name pos:start="1457:35" pos:end="1457:53"><name pos:start="1457:35" pos:end="1457:40">rt_act</name><operator pos:start="1457:41" pos:end="1457:42">-&gt;</operator><name pos:start="1457:43" pos:end="1457:53">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1459:17" pos:end="1459:46"><expr pos:start="1459:17" pos:end="1459:45"><name pos:start="1459:17" pos:end="1459:27"><name pos:start="1459:17" pos:end="1459:19">act</name><operator pos:start="1459:20" pos:end="1459:20">.</operator><name pos:start="1459:21" pos:end="1459:27">sa_mask</name></name> <operator pos:start="1459:29" pos:end="1459:29">=</operator> <name pos:start="1459:31" pos:end="1459:45"><name pos:start="1459:31" pos:end="1459:36">rt_act</name><operator pos:start="1459:37" pos:end="1459:38">-&gt;</operator><name pos:start="1459:39" pos:end="1459:45">sa_mask</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1461:17" pos:end="1461:48"><expr pos:start="1461:17" pos:end="1461:47"><name pos:start="1461:17" pos:end="1461:28"><name pos:start="1461:17" pos:end="1461:19">act</name><operator pos:start="1461:20" pos:end="1461:20">.</operator><name pos:start="1461:21" pos:end="1461:28">sa_flags</name></name> <operator pos:start="1461:30" pos:end="1461:30">=</operator> <name pos:start="1461:32" pos:end="1461:47"><name pos:start="1461:32" pos:end="1461:37">rt_act</name><operator pos:start="1461:38" pos:end="1461:39">-&gt;</operator><name pos:start="1461:40" pos:end="1461:47">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1463:17" pos:end="1463:39"><expr pos:start="1463:17" pos:end="1463:38"><name pos:start="1463:17" pos:end="1463:31"><name pos:start="1463:17" pos:end="1463:19">act</name><operator pos:start="1463:20" pos:end="1463:20">.</operator><name pos:start="1463:21" pos:end="1463:31">sa_restorer</name></name> <operator pos:start="1463:33" pos:end="1463:33">=</operator> <name pos:start="1463:35" pos:end="1463:38">arg5</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1465:17" pos:end="1465:52"><expr pos:start="1465:17" pos:end="1465:51"><call pos:start="1465:17" pos:end="1465:51"><name pos:start="1465:17" pos:end="1465:34">unlock_user_struct</name><argument_list pos:start="1465:35" pos:end="1465:51">(<argument pos:start="1465:36" pos:end="1465:41"><expr pos:start="1465:36" pos:end="1465:41"><name pos:start="1465:36" pos:end="1465:41">rt_act</name></expr></argument>, <argument pos:start="1465:44" pos:end="1465:47"><expr pos:start="1465:44" pos:end="1465:47"><name pos:start="1465:44" pos:end="1465:47">arg2</name></expr></argument>, <argument pos:start="1465:50" pos:end="1465:50"><expr pos:start="1465:50" pos:end="1465:50"><literal type="number" pos:start="1465:50" pos:end="1465:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1467:17" pos:end="1467:28"><expr pos:start="1467:17" pos:end="1467:27"><name pos:start="1467:17" pos:end="1467:20">pact</name> <operator pos:start="1467:22" pos:end="1467:22">=</operator> <operator pos:start="1467:24" pos:end="1467:24">&amp;</operator><name pos:start="1467:25" pos:end="1467:27">act</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1471:13" pos:end="1471:61"><expr pos:start="1471:13" pos:end="1471:60"><name pos:start="1471:13" pos:end="1471:15">ret</name> <operator pos:start="1471:17" pos:end="1471:17">=</operator> <call pos:start="1471:19" pos:end="1471:60"><name pos:start="1471:19" pos:end="1471:27">get_errno</name><argument_list pos:start="1471:28" pos:end="1471:60">(<argument pos:start="1471:29" pos:end="1471:59"><expr pos:start="1471:29" pos:end="1471:59"><call pos:start="1471:29" pos:end="1471:59"><name pos:start="1471:29" pos:end="1471:40">do_sigaction</name><argument_list pos:start="1471:41" pos:end="1471:59">(<argument pos:start="1471:42" pos:end="1471:45"><expr pos:start="1471:42" pos:end="1471:45"><name pos:start="1471:42" pos:end="1471:45">arg1</name></expr></argument>, <argument pos:start="1471:48" pos:end="1471:51"><expr pos:start="1471:48" pos:end="1471:51"><name pos:start="1471:48" pos:end="1471:51">pact</name></expr></argument>, <argument pos:start="1471:54" pos:end="1471:58"><expr pos:start="1471:54" pos:end="1471:58"><operator pos:start="1471:54" pos:end="1471:54">&amp;</operator><name pos:start="1471:55" pos:end="1471:58">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1473:13" pos:end="1490:0"><if pos:start="1473:13" pos:end="1490:0">if <condition pos:start="1473:16" pos:end="1473:39">(<expr pos:start="1473:17" pos:end="1473:38"><operator pos:start="1473:17" pos:end="1473:17">!</operator><call pos:start="1473:18" pos:end="1473:30"><name pos:start="1473:18" pos:end="1473:25">is_error</name><argument_list pos:start="1473:26" pos:end="1473:30">(<argument pos:start="1473:27" pos:end="1473:29"><expr pos:start="1473:27" pos:end="1473:29"><name pos:start="1473:27" pos:end="1473:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1473:32" pos:end="1473:33">&amp;&amp;</operator> <name pos:start="1473:35" pos:end="1473:38">arg3</name></expr>)</condition> <block pos:start="1473:41" pos:end="1490:0">{<block_content pos:start="1475:17" pos:end="1485:52">

                <if_stmt pos:start="1475:17" pos:end="1477:32"><if pos:start="1475:17" pos:end="1477:32">if <condition pos:start="1475:20" pos:end="1475:69">(<expr pos:start="1475:21" pos:end="1475:68"><operator pos:start="1475:21" pos:end="1475:21">!</operator><call pos:start="1475:22" pos:end="1475:68"><name pos:start="1475:22" pos:end="1475:37">lock_user_struct</name><argument_list pos:start="1475:38" pos:end="1475:68">(<argument pos:start="1475:39" pos:end="1475:50"><expr pos:start="1475:39" pos:end="1475:50"><name pos:start="1475:39" pos:end="1475:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1475:53" pos:end="1475:58"><expr pos:start="1475:53" pos:end="1475:58"><name pos:start="1475:53" pos:end="1475:58">rt_act</name></expr></argument>, <argument pos:start="1475:61" pos:end="1475:64"><expr pos:start="1475:61" pos:end="1475:64"><name pos:start="1475:61" pos:end="1475:64">arg3</name></expr></argument>, <argument pos:start="1475:67" pos:end="1475:67"><expr pos:start="1475:67" pos:end="1475:67"><literal type="number" pos:start="1475:67" pos:end="1475:67">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1477:21" pos:end="1477:32"><block_content pos:start="1477:21" pos:end="1477:32">

                    <goto pos:start="1477:21" pos:end="1477:32">goto <name pos:start="1477:26" pos:end="1477:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1479:17" pos:end="1479:55"><expr pos:start="1479:17" pos:end="1479:54"><name pos:start="1479:17" pos:end="1479:35"><name pos:start="1479:17" pos:end="1479:22">rt_act</name><operator pos:start="1479:23" pos:end="1479:24">-&gt;</operator><name pos:start="1479:25" pos:end="1479:35">_sa_handler</name></name> <operator pos:start="1479:37" pos:end="1479:37">=</operator> <name pos:start="1479:39" pos:end="1479:54"><name pos:start="1479:39" pos:end="1479:42">oact</name><operator pos:start="1479:43" pos:end="1479:43">.</operator><name pos:start="1479:44" pos:end="1479:54">_sa_handler</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1481:17" pos:end="1481:47"><expr pos:start="1481:17" pos:end="1481:46"><name pos:start="1481:17" pos:end="1481:31"><name pos:start="1481:17" pos:end="1481:22">rt_act</name><operator pos:start="1481:23" pos:end="1481:24">-&gt;</operator><name pos:start="1481:25" pos:end="1481:31">sa_mask</name></name> <operator pos:start="1481:33" pos:end="1481:33">=</operator> <name pos:start="1481:35" pos:end="1481:46"><name pos:start="1481:35" pos:end="1481:38">oact</name><operator pos:start="1481:39" pos:end="1481:39">.</operator><name pos:start="1481:40" pos:end="1481:46">sa_mask</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1483:17" pos:end="1483:49"><expr pos:start="1483:17" pos:end="1483:48"><name pos:start="1483:17" pos:end="1483:32"><name pos:start="1483:17" pos:end="1483:22">rt_act</name><operator pos:start="1483:23" pos:end="1483:24">-&gt;</operator><name pos:start="1483:25" pos:end="1483:32">sa_flags</name></name> <operator pos:start="1483:34" pos:end="1483:34">=</operator> <name pos:start="1483:36" pos:end="1483:48"><name pos:start="1483:36" pos:end="1483:39">oact</name><operator pos:start="1483:40" pos:end="1483:40">.</operator><name pos:start="1483:41" pos:end="1483:48">sa_flags</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1485:17" pos:end="1485:52"><expr pos:start="1485:17" pos:end="1485:51"><call pos:start="1485:17" pos:end="1485:51"><name pos:start="1485:17" pos:end="1485:34">unlock_user_struct</name><argument_list pos:start="1485:35" pos:end="1485:51">(<argument pos:start="1485:36" pos:end="1485:41"><expr pos:start="1485:36" pos:end="1485:41"><name pos:start="1485:36" pos:end="1485:41">rt_act</name></expr></argument>, <argument pos:start="1485:44" pos:end="1485:47"><expr pos:start="1485:44" pos:end="1485:47"><name pos:start="1485:44" pos:end="1485:47">arg3</name></expr></argument>, <argument pos:start="1485:50" pos:end="1485:50"><expr pos:start="1485:50" pos:end="1485:50"><literal type="number" pos:start="1485:50" pos:end="1485:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:else pos:start="1489:1" pos:end="1489:5">#<cpp:directive pos:start="1489:2" pos:end="1489:5">else</cpp:directive></cpp:else>

            <decl_stmt pos:start="1491:13" pos:end="1491:41"><decl pos:start="1491:13" pos:end="1491:40"><type pos:start="1491:13" pos:end="1491:37"><name pos:start="1491:13" pos:end="1491:35"><name pos:start="1491:13" pos:end="1491:18">struct</name> <name pos:start="1491:20" pos:end="1491:35">target_sigaction</name></name> <modifier pos:start="1491:37" pos:end="1491:37">*</modifier></type><name pos:start="1491:38" pos:end="1491:40">act</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1493:13" pos:end="1493:42"><decl pos:start="1493:13" pos:end="1493:41"><type pos:start="1493:13" pos:end="1493:37"><name pos:start="1493:13" pos:end="1493:35"><name pos:start="1493:13" pos:end="1493:18">struct</name> <name pos:start="1493:20" pos:end="1493:35">target_sigaction</name></name> <modifier pos:start="1493:37" pos:end="1493:37">*</modifier></type><name pos:start="1493:38" pos:end="1493:41">oact</name></decl>;</decl_stmt>



            <if_stmt pos:start="1497:13" pos:end="1505:27"><if pos:start="1497:13" pos:end="1503:13">if <condition pos:start="1497:16" pos:end="1497:21">(<expr pos:start="1497:17" pos:end="1497:20"><name pos:start="1497:17" pos:end="1497:20">arg2</name></expr>)</condition> <block pos:start="1497:23" pos:end="1503:13">{<block_content pos:start="1499:17" pos:end="1501:32">

                <if_stmt pos:start="1499:17" pos:end="1501:32"><if pos:start="1499:17" pos:end="1501:32">if <condition pos:start="1499:20" pos:end="1499:65">(<expr pos:start="1499:21" pos:end="1499:64"><operator pos:start="1499:21" pos:end="1499:21">!</operator><call pos:start="1499:22" pos:end="1499:64"><name pos:start="1499:22" pos:end="1499:37">lock_user_struct</name><argument_list pos:start="1499:38" pos:end="1499:64">(<argument pos:start="1499:39" pos:end="1499:49"><expr pos:start="1499:39" pos:end="1499:49"><name pos:start="1499:39" pos:end="1499:49">VERIFY_READ</name></expr></argument>, <argument pos:start="1499:52" pos:end="1499:54"><expr pos:start="1499:52" pos:end="1499:54"><name pos:start="1499:52" pos:end="1499:54">act</name></expr></argument>, <argument pos:start="1499:57" pos:end="1499:60"><expr pos:start="1499:57" pos:end="1499:60"><name pos:start="1499:57" pos:end="1499:60">arg2</name></expr></argument>, <argument pos:start="1499:63" pos:end="1499:63"><expr pos:start="1499:63" pos:end="1499:63"><literal type="number" pos:start="1499:63" pos:end="1499:63">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1501:21" pos:end="1501:32"><block_content pos:start="1501:21" pos:end="1501:32">

                    <goto pos:start="1501:21" pos:end="1501:32">goto <name pos:start="1501:26" pos:end="1501:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="1503:15" pos:end="1505:27">else<block type="pseudo" pos:start="1505:17" pos:end="1505:27"><block_content pos:start="1505:17" pos:end="1505:27">

                <expr_stmt pos:start="1505:17" pos:end="1505:27"><expr pos:start="1505:17" pos:end="1505:26"><name pos:start="1505:17" pos:end="1505:19">act</name> <operator pos:start="1505:21" pos:end="1505:21">=</operator> <name pos:start="1505:23" pos:end="1505:26">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="1507:13" pos:end="1519:28"><if pos:start="1507:13" pos:end="1517:13">if <condition pos:start="1507:16" pos:end="1507:21">(<expr pos:start="1507:17" pos:end="1507:20"><name pos:start="1507:17" pos:end="1507:20">arg3</name></expr>)</condition> <block pos:start="1507:23" pos:end="1517:13">{<block_content pos:start="1509:17" pos:end="1515:17">

                <if_stmt pos:start="1509:17" pos:end="1515:17"><if pos:start="1509:17" pos:end="1515:17">if <condition pos:start="1509:20" pos:end="1509:67">(<expr pos:start="1509:21" pos:end="1509:66"><operator pos:start="1509:21" pos:end="1509:21">!</operator><call pos:start="1509:22" pos:end="1509:66"><name pos:start="1509:22" pos:end="1509:37">lock_user_struct</name><argument_list pos:start="1509:38" pos:end="1509:66">(<argument pos:start="1509:39" pos:end="1509:50"><expr pos:start="1509:39" pos:end="1509:50"><name pos:start="1509:39" pos:end="1509:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1509:53" pos:end="1509:56"><expr pos:start="1509:53" pos:end="1509:56"><name pos:start="1509:53" pos:end="1509:56">oact</name></expr></argument>, <argument pos:start="1509:59" pos:end="1509:62"><expr pos:start="1509:59" pos:end="1509:62"><name pos:start="1509:59" pos:end="1509:62">arg3</name></expr></argument>, <argument pos:start="1509:65" pos:end="1509:65"><expr pos:start="1509:65" pos:end="1509:65"><literal type="number" pos:start="1509:65" pos:end="1509:65">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1509:69" pos:end="1515:17">{<block_content pos:start="1511:21" pos:end="1513:43">

                    <expr_stmt pos:start="1511:21" pos:end="1511:41"><expr pos:start="1511:21" pos:end="1511:40"><name pos:start="1511:21" pos:end="1511:23">ret</name> <operator pos:start="1511:25" pos:end="1511:25">=</operator> <operator pos:start="1511:27" pos:end="1511:27">-</operator><name pos:start="1511:28" pos:end="1511:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <goto pos:start="1513:21" pos:end="1513:43">goto <name pos:start="1513:26" pos:end="1513:42">rt_sigaction_fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="1517:15" pos:end="1519:28">else<block type="pseudo" pos:start="1519:17" pos:end="1519:28"><block_content pos:start="1519:17" pos:end="1519:28">

                <expr_stmt pos:start="1519:17" pos:end="1519:28"><expr pos:start="1519:17" pos:end="1519:27"><name pos:start="1519:17" pos:end="1519:20">oact</name> <operator pos:start="1519:22" pos:end="1519:22">=</operator> <name pos:start="1519:24" pos:end="1519:27">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1521:13" pos:end="1521:59"><expr pos:start="1521:13" pos:end="1521:58"><name pos:start="1521:13" pos:end="1521:15">ret</name> <operator pos:start="1521:17" pos:end="1521:17">=</operator> <call pos:start="1521:19" pos:end="1521:58"><name pos:start="1521:19" pos:end="1521:27">get_errno</name><argument_list pos:start="1521:28" pos:end="1521:58">(<argument pos:start="1521:29" pos:end="1521:57"><expr pos:start="1521:29" pos:end="1521:57"><call pos:start="1521:29" pos:end="1521:57"><name pos:start="1521:29" pos:end="1521:40">do_sigaction</name><argument_list pos:start="1521:41" pos:end="1521:57">(<argument pos:start="1521:42" pos:end="1521:45"><expr pos:start="1521:42" pos:end="1521:45"><name pos:start="1521:42" pos:end="1521:45">arg1</name></expr></argument>, <argument pos:start="1521:48" pos:end="1521:50"><expr pos:start="1521:48" pos:end="1521:50"><name pos:start="1521:48" pos:end="1521:50">act</name></expr></argument>, <argument pos:start="1521:53" pos:end="1521:56"><expr pos:start="1521:53" pos:end="1521:56"><name pos:start="1521:53" pos:end="1521:56">oact</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<label pos:start="1523:9" pos:end="1523:26"><name pos:start="1523:9" pos:end="1523:25">rt_sigaction_fail</name>:</label>

            <if_stmt pos:start="1525:13" pos:end="1527:49"><if pos:start="1525:13" pos:end="1527:49">if <condition pos:start="1525:16" pos:end="1525:20">(<expr pos:start="1525:17" pos:end="1525:19"><name pos:start="1525:17" pos:end="1525:19">act</name></expr>)</condition><block type="pseudo" pos:start="1527:17" pos:end="1527:49"><block_content pos:start="1527:17" pos:end="1527:49">

                <expr_stmt pos:start="1527:17" pos:end="1527:49"><expr pos:start="1527:17" pos:end="1527:48"><call pos:start="1527:17" pos:end="1527:48"><name pos:start="1527:17" pos:end="1527:34">unlock_user_struct</name><argument_list pos:start="1527:35" pos:end="1527:48">(<argument pos:start="1527:36" pos:end="1527:38"><expr pos:start="1527:36" pos:end="1527:38"><name pos:start="1527:36" pos:end="1527:38">act</name></expr></argument>, <argument pos:start="1527:41" pos:end="1527:44"><expr pos:start="1527:41" pos:end="1527:44"><name pos:start="1527:41" pos:end="1527:44">arg2</name></expr></argument>, <argument pos:start="1527:47" pos:end="1527:47"><expr pos:start="1527:47" pos:end="1527:47"><literal type="number" pos:start="1527:47" pos:end="1527:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="1529:13" pos:end="1534:0"><if pos:start="1529:13" pos:end="1534:0">if <condition pos:start="1529:16" pos:end="1529:21">(<expr pos:start="1529:17" pos:end="1529:20"><name pos:start="1529:17" pos:end="1529:20">oact</name></expr>)</condition><block type="pseudo" pos:start="1531:17" pos:end="1534:0"><block_content pos:start="1531:17" pos:end="1534:0">

                <expr_stmt pos:start="1531:17" pos:end="1534:0"><expr pos:start="1531:17" pos:end="1531:49"><call pos:start="1531:17" pos:end="1531:49"><name pos:start="1531:17" pos:end="1531:34">unlock_user_struct</name><argument_list pos:start="1531:35" pos:end="1531:49">(<argument pos:start="1531:36" pos:end="1531:39"><expr pos:start="1531:36" pos:end="1531:39"><name pos:start="1531:36" pos:end="1531:39">oact</name></expr></argument>, <argument pos:start="1531:42" pos:end="1531:45"><expr pos:start="1531:42" pos:end="1531:45"><name pos:start="1531:42" pos:end="1531:45">arg3</name></expr></argument>, <argument pos:start="1531:48" pos:end="1531:48"><expr pos:start="1531:48" pos:end="1531:48"><literal type="number" pos:start="1531:48" pos:end="1531:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="1533:1" pos:end="1533:6">#<cpp:directive pos:start="1533:2" pos:end="1533:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block>

        <break pos:start="1537:9" pos:end="1540:0">break;</break>

<cpp:ifdef pos:start="1539:1" pos:end="1539:25">#<cpp:directive pos:start="1539:2" pos:end="1539:6">ifdef</cpp:directive> <name pos:start="1539:8" pos:end="1539:25">TARGET_NR_sgetmask</name></cpp:ifdef> <comment type="block" pos:start="1539:27" pos:end="1539:44">/* not on alpha */</comment>

    <case pos:start="1541:5" pos:end="1541:28">case <expr pos:start="1541:10" pos:end="1541:27"><name pos:start="1541:10" pos:end="1541:27">TARGET_NR_sgetmask</name></expr>:</case>

        <block pos:start="1543:9" pos:end="1555:9">{<block_content pos:start="1545:13" pos:end="1553:29">

            <decl_stmt pos:start="1545:13" pos:end="1545:29"><decl pos:start="1545:13" pos:end="1545:28"><type pos:start="1545:13" pos:end="1545:20"><name pos:start="1545:13" pos:end="1545:20">sigset_t</name></type> <name pos:start="1545:22" pos:end="1545:28">cur_set</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1547:13" pos:end="1547:33"><decl pos:start="1547:13" pos:end="1547:32"><type pos:start="1547:13" pos:end="1547:21"><name pos:start="1547:13" pos:end="1547:21">abi_ulong</name></type> <name pos:start="1547:23" pos:end="1547:32">target_set</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1549:13" pos:end="1549:43"><expr pos:start="1549:13" pos:end="1549:42"><call pos:start="1549:13" pos:end="1549:42"><name pos:start="1549:13" pos:end="1549:23">sigprocmask</name><argument_list pos:start="1549:24" pos:end="1549:42">(<argument pos:start="1549:25" pos:end="1549:25"><expr pos:start="1549:25" pos:end="1549:25"><literal type="number" pos:start="1549:25" pos:end="1549:25">0</literal></expr></argument>, <argument pos:start="1549:28" pos:end="1549:31"><expr pos:start="1549:28" pos:end="1549:31"><name pos:start="1549:28" pos:end="1549:31">NULL</name></expr></argument>, <argument pos:start="1549:34" pos:end="1549:41"><expr pos:start="1549:34" pos:end="1549:41"><operator pos:start="1549:34" pos:end="1549:34">&amp;</operator><name pos:start="1549:35" pos:end="1549:41">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1551:13" pos:end="1551:61"><expr pos:start="1551:13" pos:end="1551:60"><call pos:start="1551:13" pos:end="1551:60"><name pos:start="1551:13" pos:end="1551:37">host_to_target_old_sigset</name><argument_list pos:start="1551:38" pos:end="1551:60">(<argument pos:start="1551:39" pos:end="1551:49"><expr pos:start="1551:39" pos:end="1551:49"><operator pos:start="1551:39" pos:end="1551:39">&amp;</operator><name pos:start="1551:40" pos:end="1551:49">target_set</name></expr></argument>, <argument pos:start="1551:52" pos:end="1551:59"><expr pos:start="1551:52" pos:end="1551:59"><operator pos:start="1551:52" pos:end="1551:52">&amp;</operator><name pos:start="1551:53" pos:end="1551:59">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1553:13" pos:end="1553:29"><expr pos:start="1553:13" pos:end="1553:28"><name pos:start="1553:13" pos:end="1553:15">ret</name> <operator pos:start="1553:17" pos:end="1553:17">=</operator> <name pos:start="1553:19" pos:end="1553:28">target_set</name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1557:9" pos:end="1562:0">break;</break>

<cpp:endif pos:start="1559:1" pos:end="1559:6">#<cpp:directive pos:start="1559:2" pos:end="1559:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1561:1" pos:end="1561:25">#<cpp:directive pos:start="1561:2" pos:end="1561:6">ifdef</cpp:directive> <name pos:start="1561:8" pos:end="1561:25">TARGET_NR_ssetmask</name></cpp:ifdef> <comment type="block" pos:start="1561:27" pos:end="1561:44">/* not on alpha */</comment>

    <case pos:start="1563:5" pos:end="1563:28">case <expr pos:start="1563:10" pos:end="1563:27"><name pos:start="1563:10" pos:end="1563:27">TARGET_NR_ssetmask</name></expr>:</case>

        <block pos:start="1565:9" pos:end="1583:9">{<block_content pos:start="1567:13" pos:end="1581:29">

            <decl_stmt pos:start="1567:13" pos:end="1567:40"><decl pos:start="1567:13" pos:end="1567:24"><type pos:start="1567:13" pos:end="1567:20"><name pos:start="1567:13" pos:end="1567:20">sigset_t</name></type> <name pos:start="1567:22" pos:end="1567:24">set</name></decl>, <decl pos:start="1567:27" pos:end="1567:30"><type ref="prev" pos:start="1567:13" pos:end="1567:20"/><name pos:start="1567:27" pos:end="1567:30">oset</name></decl>, <decl pos:start="1567:33" pos:end="1567:39"><type ref="prev" pos:start="1567:13" pos:end="1567:20"/><name pos:start="1567:33" pos:end="1567:39">cur_set</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1569:13" pos:end="1569:40"><decl pos:start="1569:13" pos:end="1569:39"><type pos:start="1569:13" pos:end="1569:21"><name pos:start="1569:13" pos:end="1569:21">abi_ulong</name></type> <name pos:start="1569:23" pos:end="1569:32">target_set</name> <init pos:start="1569:34" pos:end="1569:39">= <expr pos:start="1569:36" pos:end="1569:39"><name pos:start="1569:36" pos:end="1569:39">arg1</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="1571:13" pos:end="1571:43"><expr pos:start="1571:13" pos:end="1571:42"><call pos:start="1571:13" pos:end="1571:42"><name pos:start="1571:13" pos:end="1571:23">sigprocmask</name><argument_list pos:start="1571:24" pos:end="1571:42">(<argument pos:start="1571:25" pos:end="1571:25"><expr pos:start="1571:25" pos:end="1571:25"><literal type="number" pos:start="1571:25" pos:end="1571:25">0</literal></expr></argument>, <argument pos:start="1571:28" pos:end="1571:31"><expr pos:start="1571:28" pos:end="1571:31"><name pos:start="1571:28" pos:end="1571:31">NULL</name></expr></argument>, <argument pos:start="1571:34" pos:end="1571:41"><expr pos:start="1571:34" pos:end="1571:41"><operator pos:start="1571:34" pos:end="1571:34">&amp;</operator><name pos:start="1571:35" pos:end="1571:41">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1573:13" pos:end="1573:57"><expr pos:start="1573:13" pos:end="1573:56"><call pos:start="1573:13" pos:end="1573:56"><name pos:start="1573:13" pos:end="1573:37">target_to_host_old_sigset</name><argument_list pos:start="1573:38" pos:end="1573:56">(<argument pos:start="1573:39" pos:end="1573:42"><expr pos:start="1573:39" pos:end="1573:42"><operator pos:start="1573:39" pos:end="1573:39">&amp;</operator><name pos:start="1573:40" pos:end="1573:42">set</name></expr></argument>, <argument pos:start="1573:45" pos:end="1573:55"><expr pos:start="1573:45" pos:end="1573:55"><operator pos:start="1573:45" pos:end="1573:45">&amp;</operator><name pos:start="1573:46" pos:end="1573:55">target_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1575:13" pos:end="1575:43"><expr pos:start="1575:13" pos:end="1575:42"><call pos:start="1575:13" pos:end="1575:42"><name pos:start="1575:13" pos:end="1575:20">sigorset</name><argument_list pos:start="1575:21" pos:end="1575:42">(<argument pos:start="1575:22" pos:end="1575:25"><expr pos:start="1575:22" pos:end="1575:25"><operator pos:start="1575:22" pos:end="1575:22">&amp;</operator><name pos:start="1575:23" pos:end="1575:25">set</name></expr></argument>, <argument pos:start="1575:28" pos:end="1575:31"><expr pos:start="1575:28" pos:end="1575:31"><operator pos:start="1575:28" pos:end="1575:28">&amp;</operator><name pos:start="1575:29" pos:end="1575:31">set</name></expr></argument>, <argument pos:start="1575:34" pos:end="1575:41"><expr pos:start="1575:34" pos:end="1575:41"><operator pos:start="1575:34" pos:end="1575:34">&amp;</operator><name pos:start="1575:35" pos:end="1575:41">cur_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1577:13" pos:end="1577:50"><expr pos:start="1577:13" pos:end="1577:49"><call pos:start="1577:13" pos:end="1577:49"><name pos:start="1577:13" pos:end="1577:23">sigprocmask</name><argument_list pos:start="1577:24" pos:end="1577:49">(<argument pos:start="1577:25" pos:end="1577:35"><expr pos:start="1577:25" pos:end="1577:35"><name pos:start="1577:25" pos:end="1577:35">SIG_SETMASK</name></expr></argument>, <argument pos:start="1577:38" pos:end="1577:41"><expr pos:start="1577:38" pos:end="1577:41"><operator pos:start="1577:38" pos:end="1577:38">&amp;</operator><name pos:start="1577:39" pos:end="1577:41">set</name></expr></argument>, <argument pos:start="1577:44" pos:end="1577:48"><expr pos:start="1577:44" pos:end="1577:48"><operator pos:start="1577:44" pos:end="1577:44">&amp;</operator><name pos:start="1577:45" pos:end="1577:48">oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1579:13" pos:end="1579:58"><expr pos:start="1579:13" pos:end="1579:57"><call pos:start="1579:13" pos:end="1579:57"><name pos:start="1579:13" pos:end="1579:37">host_to_target_old_sigset</name><argument_list pos:start="1579:38" pos:end="1579:57">(<argument pos:start="1579:39" pos:end="1579:49"><expr pos:start="1579:39" pos:end="1579:49"><operator pos:start="1579:39" pos:end="1579:39">&amp;</operator><name pos:start="1579:40" pos:end="1579:49">target_set</name></expr></argument>, <argument pos:start="1579:52" pos:end="1579:56"><expr pos:start="1579:52" pos:end="1579:56"><operator pos:start="1579:52" pos:end="1579:52">&amp;</operator><name pos:start="1579:53" pos:end="1579:56">oset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1581:13" pos:end="1581:29"><expr pos:start="1581:13" pos:end="1581:28"><name pos:start="1581:13" pos:end="1581:15">ret</name> <operator pos:start="1581:17" pos:end="1581:17">=</operator> <name pos:start="1581:19" pos:end="1581:28">target_set</name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1585:9" pos:end="1590:0">break;</break>

<cpp:endif pos:start="1587:1" pos:end="1587:6">#<cpp:directive pos:start="1587:2" pos:end="1587:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="1589:1" pos:end="1589:28">#<cpp:directive pos:start="1589:2" pos:end="1589:6">ifdef</cpp:directive> <name pos:start="1589:8" pos:end="1589:28">TARGET_NR_sigprocmask</name></cpp:ifdef>

    <case pos:start="1591:5" pos:end="1591:31">case <expr pos:start="1591:10" pos:end="1591:30"><name pos:start="1591:10" pos:end="1591:30">TARGET_NR_sigprocmask</name></expr>:</case>

        <block pos:start="1593:9" pos:end="1723:9">{<block_content pos:start="1597:13" pos:end="1722:0">

<cpp:if pos:start="1595:1" pos:end="1595:25">#<cpp:directive pos:start="1595:2" pos:end="1595:3">if</cpp:directive> <expr pos:start="1595:5" pos:end="1595:25"><call pos:start="1595:5" pos:end="1595:25"><name pos:start="1595:5" pos:end="1595:11">defined</name><argument_list pos:start="1595:12" pos:end="1595:25">(<argument pos:start="1595:13" pos:end="1595:24"><expr pos:start="1595:13" pos:end="1595:24"><name pos:start="1595:13" pos:end="1595:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <decl_stmt pos:start="1597:13" pos:end="1597:33"><decl pos:start="1597:13" pos:end="1597:24"><type pos:start="1597:13" pos:end="1597:20"><name pos:start="1597:13" pos:end="1597:20">sigset_t</name></type> <name pos:start="1597:22" pos:end="1597:24">set</name></decl>, <decl pos:start="1597:27" pos:end="1597:32"><type ref="prev" pos:start="1597:13" pos:end="1597:20"/><name pos:start="1597:27" pos:end="1597:32">oldset</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1599:13" pos:end="1599:27"><decl pos:start="1599:13" pos:end="1599:26"><type pos:start="1599:13" pos:end="1599:21"><name pos:start="1599:13" pos:end="1599:21">abi_ulong</name></type> <name pos:start="1599:23" pos:end="1599:26">mask</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1601:13" pos:end="1601:20"><decl pos:start="1601:13" pos:end="1601:19"><type pos:start="1601:13" pos:end="1601:15"><name pos:start="1601:13" pos:end="1601:15">int</name></type> <name pos:start="1601:17" pos:end="1601:19">how</name></decl>;</decl_stmt>



            <switch pos:start="1605:13" pos:end="1631:13">switch <condition pos:start="1605:20" pos:end="1605:25">(<expr pos:start="1605:21" pos:end="1605:24"><name pos:start="1605:21" pos:end="1605:24">arg1</name></expr>)</condition> <block pos:start="1605:27" pos:end="1631:13">{<block_content pos:start="1607:13" pos:end="1629:26">

            <case pos:start="1607:13" pos:end="1607:34">case <expr pos:start="1607:18" pos:end="1607:33"><name pos:start="1607:18" pos:end="1607:33">TARGET_SIG_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="1609:17" pos:end="1609:32"><expr pos:start="1609:17" pos:end="1609:31"><name pos:start="1609:17" pos:end="1609:19">how</name> <operator pos:start="1609:21" pos:end="1609:21">=</operator> <name pos:start="1609:23" pos:end="1609:31">SIG_BLOCK</name></expr>;</expr_stmt>

                <break pos:start="1611:17" pos:end="1611:22">break;</break>

            <case pos:start="1613:13" pos:end="1613:36">case <expr pos:start="1613:18" pos:end="1613:35"><name pos:start="1613:18" pos:end="1613:35">TARGET_SIG_UNBLOCK</name></expr>:</case>

                <expr_stmt pos:start="1615:17" pos:end="1615:34"><expr pos:start="1615:17" pos:end="1615:33"><name pos:start="1615:17" pos:end="1615:19">how</name> <operator pos:start="1615:21" pos:end="1615:21">=</operator> <name pos:start="1615:23" pos:end="1615:33">SIG_UNBLOCK</name></expr>;</expr_stmt>

                <break pos:start="1617:17" pos:end="1617:22">break;</break>

            <case pos:start="1619:13" pos:end="1619:36">case <expr pos:start="1619:18" pos:end="1619:35"><name pos:start="1619:18" pos:end="1619:35">TARGET_SIG_SETMASK</name></expr>:</case>

                <expr_stmt pos:start="1621:17" pos:end="1621:34"><expr pos:start="1621:17" pos:end="1621:33"><name pos:start="1621:17" pos:end="1621:19">how</name> <operator pos:start="1621:21" pos:end="1621:21">=</operator> <name pos:start="1621:23" pos:end="1621:33">SIG_SETMASK</name></expr>;</expr_stmt>

                <break pos:start="1623:17" pos:end="1623:22">break;</break>

            <default pos:start="1625:13" pos:end="1625:20">default:</default>

                <expr_stmt pos:start="1627:17" pos:end="1627:37"><expr pos:start="1627:17" pos:end="1627:36"><name pos:start="1627:17" pos:end="1627:19">ret</name> <operator pos:start="1627:21" pos:end="1627:21">=</operator> <operator pos:start="1627:23" pos:end="1627:23">-</operator><name pos:start="1627:24" pos:end="1627:36">TARGET_EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="1629:17" pos:end="1629:26">goto <name pos:start="1629:22" pos:end="1629:25">fail</name>;</goto>

            </block_content>}</block></switch>

            <expr_stmt pos:start="1633:13" pos:end="1633:24"><expr pos:start="1633:13" pos:end="1633:23"><name pos:start="1633:13" pos:end="1633:16">mask</name> <operator pos:start="1633:18" pos:end="1633:18">=</operator> <name pos:start="1633:20" pos:end="1633:23">arg2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1635:13" pos:end="1635:51"><expr pos:start="1635:13" pos:end="1635:50"><call pos:start="1635:13" pos:end="1635:50"><name pos:start="1635:13" pos:end="1635:37">target_to_host_old_sigset</name><argument_list pos:start="1635:38" pos:end="1635:50">(<argument pos:start="1635:39" pos:end="1635:42"><expr pos:start="1635:39" pos:end="1635:42"><operator pos:start="1635:39" pos:end="1635:39">&amp;</operator><name pos:start="1635:40" pos:end="1635:42">set</name></expr></argument>, <argument pos:start="1635:45" pos:end="1635:49"><expr pos:start="1635:45" pos:end="1635:49"><operator pos:start="1635:45" pos:end="1635:45">&amp;</operator><name pos:start="1635:46" pos:end="1635:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="1639:13" pos:end="1639:61"><expr pos:start="1639:13" pos:end="1639:60"><name pos:start="1639:13" pos:end="1639:15">ret</name> <operator pos:start="1639:17" pos:end="1639:17">=</operator> <call pos:start="1639:19" pos:end="1639:60"><name pos:start="1639:19" pos:end="1639:27">get_errno</name><argument_list pos:start="1639:28" pos:end="1639:60">(<argument pos:start="1639:29" pos:end="1639:59"><expr pos:start="1639:29" pos:end="1639:59"><call pos:start="1639:29" pos:end="1639:59"><name pos:start="1639:29" pos:end="1639:39">sigprocmask</name><argument_list pos:start="1639:40" pos:end="1639:59">(<argument pos:start="1639:41" pos:end="1639:43"><expr pos:start="1639:41" pos:end="1639:43"><name pos:start="1639:41" pos:end="1639:43">how</name></expr></argument>, <argument pos:start="1639:46" pos:end="1639:49"><expr pos:start="1639:46" pos:end="1639:49"><operator pos:start="1639:46" pos:end="1639:46">&amp;</operator><name pos:start="1639:47" pos:end="1639:49">set</name></expr></argument>, <argument pos:start="1639:52" pos:end="1639:58"><expr pos:start="1639:52" pos:end="1639:58"><operator pos:start="1639:52" pos:end="1639:52">&amp;</operator><name pos:start="1639:53" pos:end="1639:58">oldset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1641:13" pos:end="1652:0"><if pos:start="1641:13" pos:end="1652:0">if <condition pos:start="1641:16" pos:end="1641:31">(<expr pos:start="1641:17" pos:end="1641:30"><operator pos:start="1641:17" pos:end="1641:17">!</operator><call pos:start="1641:18" pos:end="1641:30"><name pos:start="1641:18" pos:end="1641:25">is_error</name><argument_list pos:start="1641:26" pos:end="1641:30">(<argument pos:start="1641:27" pos:end="1641:29"><expr pos:start="1641:27" pos:end="1641:29"><name pos:start="1641:27" pos:end="1641:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1641:33" pos:end="1652:0">{<block_content pos:start="1643:17" pos:end="1647:58">

                <expr_stmt pos:start="1643:17" pos:end="1643:58"><expr pos:start="1643:17" pos:end="1643:57"><call pos:start="1643:17" pos:end="1643:57"><name pos:start="1643:17" pos:end="1643:41">host_to_target_old_sigset</name><argument_list pos:start="1643:42" pos:end="1643:57">(<argument pos:start="1643:43" pos:end="1643:47"><expr pos:start="1643:43" pos:end="1643:47"><operator pos:start="1643:43" pos:end="1643:43">&amp;</operator><name pos:start="1643:44" pos:end="1643:47">mask</name></expr></argument>, <argument pos:start="1643:50" pos:end="1643:56"><expr pos:start="1643:50" pos:end="1643:56"><operator pos:start="1643:50" pos:end="1643:50">&amp;</operator><name pos:start="1643:51" pos:end="1643:56">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1645:17" pos:end="1645:27"><expr pos:start="1645:17" pos:end="1645:26"><name pos:start="1645:17" pos:end="1645:19">ret</name> <operator pos:start="1645:21" pos:end="1645:21">=</operator> <name pos:start="1645:23" pos:end="1645:26">mask</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1647:17" pos:end="1647:58"><expr pos:start="1647:17" pos:end="1647:57"><operator pos:start="1647:17" pos:end="1647:17">(</operator><operator pos:start="1647:18" pos:end="1647:18">(</operator><name pos:start="1647:19" pos:end="1647:31">CPUAlphaState</name> <operator pos:start="1647:33" pos:end="1647:33">*</operator><operator pos:start="1647:34" pos:end="1647:34">)</operator><name pos:start="1647:35" pos:end="1647:41">cpu_env</name><operator pos:start="1647:42" pos:end="1647:42">)</operator><operator pos:start="1647:43" pos:end="1647:44">-&gt;</operator><name pos:start="1647:45" pos:end="1647:53"><name pos:start="1647:45" pos:end="1647:46">ir</name><index pos:start="1647:47" pos:end="1647:53">[<expr pos:start="1647:48" pos:end="1647:52"><name pos:start="1647:48" pos:end="1647:52">IR_V0</name></expr>]</index></name> <operator pos:start="1647:55" pos:end="1647:55">=</operator> <literal type="number" pos:start="1647:57" pos:end="1647:57">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="1647:60" pos:end="1647:79">/* force no error */</comment>

            </block_content>}</block></if></if_stmt>

<cpp:else pos:start="1651:1" pos:end="1651:5">#<cpp:directive pos:start="1651:2" pos:end="1651:5">else</cpp:directive></cpp:else>

            <decl_stmt pos:start="1653:13" pos:end="1653:43"><decl pos:start="1653:13" pos:end="1653:24"><type pos:start="1653:13" pos:end="1653:20"><name pos:start="1653:13" pos:end="1653:20">sigset_t</name></type> <name pos:start="1653:22" pos:end="1653:24">set</name></decl>, <decl pos:start="1653:27" pos:end="1653:32"><type ref="prev" pos:start="1653:13" pos:end="1653:20"/><name pos:start="1653:27" pos:end="1653:32">oldset</name></decl>, <decl pos:start="1653:35" pos:end="1653:42"><type ref="prev" pos:start="1653:13" pos:end="1653:20"><modifier pos:start="1653:35" pos:end="1653:35">*</modifier></type><name pos:start="1653:36" pos:end="1653:42">set_ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1655:13" pos:end="1655:20"><decl pos:start="1655:13" pos:end="1655:19"><type pos:start="1655:13" pos:end="1655:15"><name pos:start="1655:13" pos:end="1655:15">int</name></type> <name pos:start="1655:17" pos:end="1655:19">how</name></decl>;</decl_stmt>



            <if_stmt pos:start="1659:13" pos:end="1705:13"><if pos:start="1659:13" pos:end="1699:13">if <condition pos:start="1659:16" pos:end="1659:21">(<expr pos:start="1659:17" pos:end="1659:20"><name pos:start="1659:17" pos:end="1659:20">arg2</name></expr>)</condition> <block pos:start="1659:23" pos:end="1699:13">{<block_content pos:start="1661:17" pos:end="1697:31">

                <switch pos:start="1661:17" pos:end="1687:17">switch <condition pos:start="1661:24" pos:end="1661:29">(<expr pos:start="1661:25" pos:end="1661:28"><name pos:start="1661:25" pos:end="1661:28">arg1</name></expr>)</condition> <block pos:start="1661:31" pos:end="1687:17">{<block_content pos:start="1663:17" pos:end="1685:30">

                <case pos:start="1663:17" pos:end="1663:38">case <expr pos:start="1663:22" pos:end="1663:37"><name pos:start="1663:22" pos:end="1663:37">TARGET_SIG_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="1665:21" pos:end="1665:36"><expr pos:start="1665:21" pos:end="1665:35"><name pos:start="1665:21" pos:end="1665:23">how</name> <operator pos:start="1665:25" pos:end="1665:25">=</operator> <name pos:start="1665:27" pos:end="1665:35">SIG_BLOCK</name></expr>;</expr_stmt>

                    <break pos:start="1667:21" pos:end="1667:26">break;</break>

                <case pos:start="1669:17" pos:end="1669:40">case <expr pos:start="1669:22" pos:end="1669:39"><name pos:start="1669:22" pos:end="1669:39">TARGET_SIG_UNBLOCK</name></expr>:</case>

                    <expr_stmt pos:start="1671:21" pos:end="1671:38"><expr pos:start="1671:21" pos:end="1671:37"><name pos:start="1671:21" pos:end="1671:23">how</name> <operator pos:start="1671:25" pos:end="1671:25">=</operator> <name pos:start="1671:27" pos:end="1671:37">SIG_UNBLOCK</name></expr>;</expr_stmt>

                    <break pos:start="1673:21" pos:end="1673:26">break;</break>

                <case pos:start="1675:17" pos:end="1675:40">case <expr pos:start="1675:22" pos:end="1675:39"><name pos:start="1675:22" pos:end="1675:39">TARGET_SIG_SETMASK</name></expr>:</case>

                    <expr_stmt pos:start="1677:21" pos:end="1677:38"><expr pos:start="1677:21" pos:end="1677:37"><name pos:start="1677:21" pos:end="1677:23">how</name> <operator pos:start="1677:25" pos:end="1677:25">=</operator> <name pos:start="1677:27" pos:end="1677:37">SIG_SETMASK</name></expr>;</expr_stmt>

                    <break pos:start="1679:21" pos:end="1679:26">break;</break>

                <default pos:start="1681:17" pos:end="1681:24">default:</default>

                    <expr_stmt pos:start="1683:21" pos:end="1683:41"><expr pos:start="1683:21" pos:end="1683:40"><name pos:start="1683:21" pos:end="1683:23">ret</name> <operator pos:start="1683:25" pos:end="1683:25">=</operator> <operator pos:start="1683:27" pos:end="1683:27">-</operator><name pos:start="1683:28" pos:end="1683:40">TARGET_EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="1685:21" pos:end="1685:30">goto <name pos:start="1685:26" pos:end="1685:29">fail</name>;</goto>

                </block_content>}</block></switch>

                <if_stmt pos:start="1689:17" pos:end="1691:32"><if pos:start="1689:17" pos:end="1691:32">if <condition pos:start="1689:20" pos:end="1689:84">(<expr pos:start="1689:21" pos:end="1689:83"><operator pos:start="1689:21" pos:end="1689:21">!</operator><operator pos:start="1689:22" pos:end="1689:22">(</operator><name pos:start="1689:23" pos:end="1689:23">p</name> <operator pos:start="1689:25" pos:end="1689:25">=</operator> <call pos:start="1689:27" pos:end="1689:82"><name pos:start="1689:27" pos:end="1689:35">lock_user</name><argument_list pos:start="1689:36" pos:end="1689:82">(<argument pos:start="1689:37" pos:end="1689:47"><expr pos:start="1689:37" pos:end="1689:47"><name pos:start="1689:37" pos:end="1689:47">VERIFY_READ</name></expr></argument>, <argument pos:start="1689:50" pos:end="1689:53"><expr pos:start="1689:50" pos:end="1689:53"><name pos:start="1689:50" pos:end="1689:53">arg2</name></expr></argument>, <argument pos:start="1689:56" pos:end="1689:78"><expr pos:start="1689:56" pos:end="1689:78"><sizeof pos:start="1689:56" pos:end="1689:78">sizeof<argument_list pos:start="1689:62" pos:end="1689:78">(<argument pos:start="1689:63" pos:end="1689:77"><expr pos:start="1689:63" pos:end="1689:77"><name pos:start="1689:63" pos:end="1689:77">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1689:81" pos:end="1689:81"><expr pos:start="1689:81" pos:end="1689:81"><literal type="number" pos:start="1689:81" pos:end="1689:81">1</literal></expr></argument>)</argument_list></call><operator pos:start="1689:83" pos:end="1689:83">)</operator></expr>)</condition><block type="pseudo" pos:start="1691:21" pos:end="1691:32"><block_content pos:start="1691:21" pos:end="1691:32">

                    <goto pos:start="1691:21" pos:end="1691:32">goto <name pos:start="1691:26" pos:end="1691:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1693:17" pos:end="1693:51"><expr pos:start="1693:17" pos:end="1693:50"><call pos:start="1693:17" pos:end="1693:50"><name pos:start="1693:17" pos:end="1693:41">target_to_host_old_sigset</name><argument_list pos:start="1693:42" pos:end="1693:50">(<argument pos:start="1693:43" pos:end="1693:46"><expr pos:start="1693:43" pos:end="1693:46"><operator pos:start="1693:43" pos:end="1693:43">&amp;</operator><name pos:start="1693:44" pos:end="1693:46">set</name></expr></argument>, <argument pos:start="1693:49" pos:end="1693:49"><expr pos:start="1693:49" pos:end="1693:49"><name pos:start="1693:49" pos:end="1693:49">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1695:17" pos:end="1695:40"><expr pos:start="1695:17" pos:end="1695:39"><call pos:start="1695:17" pos:end="1695:39"><name pos:start="1695:17" pos:end="1695:27">unlock_user</name><argument_list pos:start="1695:28" pos:end="1695:39">(<argument pos:start="1695:29" pos:end="1695:29"><expr pos:start="1695:29" pos:end="1695:29"><name pos:start="1695:29" pos:end="1695:29">p</name></expr></argument>, <argument pos:start="1695:32" pos:end="1695:35"><expr pos:start="1695:32" pos:end="1695:35"><name pos:start="1695:32" pos:end="1695:35">arg2</name></expr></argument>, <argument pos:start="1695:38" pos:end="1695:38"><expr pos:start="1695:38" pos:end="1695:38"><literal type="number" pos:start="1695:38" pos:end="1695:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1697:17" pos:end="1697:31"><expr pos:start="1697:17" pos:end="1697:30"><name pos:start="1697:17" pos:end="1697:23">set_ptr</name> <operator pos:start="1697:25" pos:end="1697:25">=</operator> <operator pos:start="1697:27" pos:end="1697:27">&amp;</operator><name pos:start="1697:28" pos:end="1697:30">set</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1699:15" pos:end="1705:13">else <block pos:start="1699:20" pos:end="1705:13">{<block_content pos:start="1701:17" pos:end="1703:31">

                <expr_stmt pos:start="1701:17" pos:end="1701:24"><expr pos:start="1701:17" pos:end="1701:23"><name pos:start="1701:17" pos:end="1701:19">how</name> <operator pos:start="1701:21" pos:end="1701:21">=</operator> <literal type="number" pos:start="1701:23" pos:end="1701:23">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1703:17" pos:end="1703:31"><expr pos:start="1703:17" pos:end="1703:30"><name pos:start="1703:17" pos:end="1703:23">set_ptr</name> <operator pos:start="1703:25" pos:end="1703:25">=</operator> <name pos:start="1703:27" pos:end="1703:30">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1707:13" pos:end="1707:64"><expr pos:start="1707:13" pos:end="1707:63"><name pos:start="1707:13" pos:end="1707:15">ret</name> <operator pos:start="1707:17" pos:end="1707:17">=</operator> <call pos:start="1707:19" pos:end="1707:63"><name pos:start="1707:19" pos:end="1707:27">get_errno</name><argument_list pos:start="1707:28" pos:end="1707:63">(<argument pos:start="1707:29" pos:end="1707:62"><expr pos:start="1707:29" pos:end="1707:62"><call pos:start="1707:29" pos:end="1707:62"><name pos:start="1707:29" pos:end="1707:39">sigprocmask</name><argument_list pos:start="1707:40" pos:end="1707:62">(<argument pos:start="1707:41" pos:end="1707:43"><expr pos:start="1707:41" pos:end="1707:43"><name pos:start="1707:41" pos:end="1707:43">how</name></expr></argument>, <argument pos:start="1707:46" pos:end="1707:52"><expr pos:start="1707:46" pos:end="1707:52"><name pos:start="1707:46" pos:end="1707:52">set_ptr</name></expr></argument>, <argument pos:start="1707:55" pos:end="1707:61"><expr pos:start="1707:55" pos:end="1707:61"><operator pos:start="1707:55" pos:end="1707:55">&amp;</operator><name pos:start="1707:56" pos:end="1707:61">oldset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1709:13" pos:end="1722:0"><if pos:start="1709:13" pos:end="1722:0">if <condition pos:start="1709:16" pos:end="1709:39">(<expr pos:start="1709:17" pos:end="1709:38"><operator pos:start="1709:17" pos:end="1709:17">!</operator><call pos:start="1709:18" pos:end="1709:30"><name pos:start="1709:18" pos:end="1709:25">is_error</name><argument_list pos:start="1709:26" pos:end="1709:30">(<argument pos:start="1709:27" pos:end="1709:29"><expr pos:start="1709:27" pos:end="1709:29"><name pos:start="1709:27" pos:end="1709:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1709:32" pos:end="1709:33">&amp;&amp;</operator> <name pos:start="1709:35" pos:end="1709:38">arg3</name></expr>)</condition> <block pos:start="1709:41" pos:end="1722:0">{<block_content pos:start="1711:17" pos:end="1717:62">

                <if_stmt pos:start="1711:17" pos:end="1713:32"><if pos:start="1711:17" pos:end="1713:32">if <condition pos:start="1711:20" pos:end="1711:85">(<expr pos:start="1711:21" pos:end="1711:84"><operator pos:start="1711:21" pos:end="1711:21">!</operator><operator pos:start="1711:22" pos:end="1711:22">(</operator><name pos:start="1711:23" pos:end="1711:23">p</name> <operator pos:start="1711:25" pos:end="1711:25">=</operator> <call pos:start="1711:27" pos:end="1711:83"><name pos:start="1711:27" pos:end="1711:35">lock_user</name><argument_list pos:start="1711:36" pos:end="1711:83">(<argument pos:start="1711:37" pos:end="1711:48"><expr pos:start="1711:37" pos:end="1711:48"><name pos:start="1711:37" pos:end="1711:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1711:51" pos:end="1711:54"><expr pos:start="1711:51" pos:end="1711:54"><name pos:start="1711:51" pos:end="1711:54">arg3</name></expr></argument>, <argument pos:start="1711:57" pos:end="1711:79"><expr pos:start="1711:57" pos:end="1711:79"><sizeof pos:start="1711:57" pos:end="1711:79">sizeof<argument_list pos:start="1711:63" pos:end="1711:79">(<argument pos:start="1711:64" pos:end="1711:78"><expr pos:start="1711:64" pos:end="1711:78"><name pos:start="1711:64" pos:end="1711:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1711:82" pos:end="1711:82"><expr pos:start="1711:82" pos:end="1711:82"><literal type="number" pos:start="1711:82" pos:end="1711:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="1711:84" pos:end="1711:84">)</operator></expr>)</condition><block type="pseudo" pos:start="1713:21" pos:end="1713:32"><block_content pos:start="1713:21" pos:end="1713:32">

                    <goto pos:start="1713:21" pos:end="1713:32">goto <name pos:start="1713:26" pos:end="1713:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1715:17" pos:end="1715:54"><expr pos:start="1715:17" pos:end="1715:53"><call pos:start="1715:17" pos:end="1715:53"><name pos:start="1715:17" pos:end="1715:41">host_to_target_old_sigset</name><argument_list pos:start="1715:42" pos:end="1715:53">(<argument pos:start="1715:43" pos:end="1715:43"><expr pos:start="1715:43" pos:end="1715:43"><name pos:start="1715:43" pos:end="1715:43">p</name></expr></argument>, <argument pos:start="1715:46" pos:end="1715:52"><expr pos:start="1715:46" pos:end="1715:52"><operator pos:start="1715:46" pos:end="1715:46">&amp;</operator><name pos:start="1715:47" pos:end="1715:52">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1717:17" pos:end="1717:62"><expr pos:start="1717:17" pos:end="1717:61"><call pos:start="1717:17" pos:end="1717:61"><name pos:start="1717:17" pos:end="1717:27">unlock_user</name><argument_list pos:start="1717:28" pos:end="1717:61">(<argument pos:start="1717:29" pos:end="1717:29"><expr pos:start="1717:29" pos:end="1717:29"><name pos:start="1717:29" pos:end="1717:29">p</name></expr></argument>, <argument pos:start="1717:32" pos:end="1717:35"><expr pos:start="1717:32" pos:end="1717:35"><name pos:start="1717:32" pos:end="1717:35">arg3</name></expr></argument>, <argument pos:start="1717:38" pos:end="1717:60"><expr pos:start="1717:38" pos:end="1717:60"><sizeof pos:start="1717:38" pos:end="1717:60">sizeof<argument_list pos:start="1717:44" pos:end="1717:60">(<argument pos:start="1717:45" pos:end="1717:59"><expr pos:start="1717:45" pos:end="1717:59"><name pos:start="1717:45" pos:end="1717:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="1721:1" pos:end="1721:6">#<cpp:directive pos:start="1721:2" pos:end="1721:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block>

        <break pos:start="1725:9" pos:end="1728:0">break;</break>

<cpp:endif pos:start="1727:1" pos:end="1727:6">#<cpp:directive pos:start="1727:2" pos:end="1727:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1729:5" pos:end="1729:34">case <expr pos:start="1729:10" pos:end="1729:33"><name pos:start="1729:10" pos:end="1729:33">TARGET_NR_rt_sigprocmask</name></expr>:</case>

        <block pos:start="1731:9" pos:end="1801:9">{<block_content pos:start="1733:13" pos:end="1799:13">

            <decl_stmt pos:start="1733:13" pos:end="1733:27"><decl pos:start="1733:13" pos:end="1733:26"><type pos:start="1733:13" pos:end="1733:15"><name pos:start="1733:13" pos:end="1733:15">int</name></type> <name pos:start="1733:17" pos:end="1733:19">how</name> <init pos:start="1733:21" pos:end="1733:26">= <expr pos:start="1733:23" pos:end="1733:26"><name pos:start="1733:23" pos:end="1733:26">arg1</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="1735:13" pos:end="1735:43"><decl pos:start="1735:13" pos:end="1735:24"><type pos:start="1735:13" pos:end="1735:20"><name pos:start="1735:13" pos:end="1735:20">sigset_t</name></type> <name pos:start="1735:22" pos:end="1735:24">set</name></decl>, <decl pos:start="1735:27" pos:end="1735:32"><type ref="prev" pos:start="1735:13" pos:end="1735:20"/><name pos:start="1735:27" pos:end="1735:32">oldset</name></decl>, <decl pos:start="1735:35" pos:end="1735:42"><type ref="prev" pos:start="1735:13" pos:end="1735:20"><modifier pos:start="1735:35" pos:end="1735:35">*</modifier></type><name pos:start="1735:36" pos:end="1735:42">set_ptr</name></decl>;</decl_stmt>



            <if_stmt pos:start="1739:13" pos:end="1785:13"><if pos:start="1739:13" pos:end="1779:13">if <condition pos:start="1739:16" pos:end="1739:21">(<expr pos:start="1739:17" pos:end="1739:20"><name pos:start="1739:17" pos:end="1739:20">arg2</name></expr>)</condition> <block pos:start="1739:23" pos:end="1779:13">{<block_content pos:start="1741:17" pos:end="1777:31">

                <switch pos:start="1741:17" pos:end="1767:17">switch<condition pos:start="1741:23" pos:end="1741:27">(<expr pos:start="1741:24" pos:end="1741:26"><name pos:start="1741:24" pos:end="1741:26">how</name></expr>)</condition> <block pos:start="1741:29" pos:end="1767:17">{<block_content pos:start="1743:17" pos:end="1765:30">

                <case pos:start="1743:17" pos:end="1743:38">case <expr pos:start="1743:22" pos:end="1743:37"><name pos:start="1743:22" pos:end="1743:37">TARGET_SIG_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="1745:21" pos:end="1745:36"><expr pos:start="1745:21" pos:end="1745:35"><name pos:start="1745:21" pos:end="1745:23">how</name> <operator pos:start="1745:25" pos:end="1745:25">=</operator> <name pos:start="1745:27" pos:end="1745:35">SIG_BLOCK</name></expr>;</expr_stmt>

                    <break pos:start="1747:21" pos:end="1747:26">break;</break>

                <case pos:start="1749:17" pos:end="1749:40">case <expr pos:start="1749:22" pos:end="1749:39"><name pos:start="1749:22" pos:end="1749:39">TARGET_SIG_UNBLOCK</name></expr>:</case>

                    <expr_stmt pos:start="1751:21" pos:end="1751:38"><expr pos:start="1751:21" pos:end="1751:37"><name pos:start="1751:21" pos:end="1751:23">how</name> <operator pos:start="1751:25" pos:end="1751:25">=</operator> <name pos:start="1751:27" pos:end="1751:37">SIG_UNBLOCK</name></expr>;</expr_stmt>

                    <break pos:start="1753:21" pos:end="1753:26">break;</break>

                <case pos:start="1755:17" pos:end="1755:40">case <expr pos:start="1755:22" pos:end="1755:39"><name pos:start="1755:22" pos:end="1755:39">TARGET_SIG_SETMASK</name></expr>:</case>

                    <expr_stmt pos:start="1757:21" pos:end="1757:38"><expr pos:start="1757:21" pos:end="1757:37"><name pos:start="1757:21" pos:end="1757:23">how</name> <operator pos:start="1757:25" pos:end="1757:25">=</operator> <name pos:start="1757:27" pos:end="1757:37">SIG_SETMASK</name></expr>;</expr_stmt>

                    <break pos:start="1759:21" pos:end="1759:26">break;</break>

                <default pos:start="1761:17" pos:end="1761:24">default:</default>

                    <expr_stmt pos:start="1763:21" pos:end="1763:41"><expr pos:start="1763:21" pos:end="1763:40"><name pos:start="1763:21" pos:end="1763:23">ret</name> <operator pos:start="1763:25" pos:end="1763:25">=</operator> <operator pos:start="1763:27" pos:end="1763:27">-</operator><name pos:start="1763:28" pos:end="1763:40">TARGET_EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="1765:21" pos:end="1765:30">goto <name pos:start="1765:26" pos:end="1765:29">fail</name>;</goto>

                </block_content>}</block></switch>

                <if_stmt pos:start="1769:17" pos:end="1771:32"><if pos:start="1769:17" pos:end="1771:32">if <condition pos:start="1769:20" pos:end="1769:84">(<expr pos:start="1769:21" pos:end="1769:83"><operator pos:start="1769:21" pos:end="1769:21">!</operator><operator pos:start="1769:22" pos:end="1769:22">(</operator><name pos:start="1769:23" pos:end="1769:23">p</name> <operator pos:start="1769:25" pos:end="1769:25">=</operator> <call pos:start="1769:27" pos:end="1769:82"><name pos:start="1769:27" pos:end="1769:35">lock_user</name><argument_list pos:start="1769:36" pos:end="1769:82">(<argument pos:start="1769:37" pos:end="1769:47"><expr pos:start="1769:37" pos:end="1769:47"><name pos:start="1769:37" pos:end="1769:47">VERIFY_READ</name></expr></argument>, <argument pos:start="1769:50" pos:end="1769:53"><expr pos:start="1769:50" pos:end="1769:53"><name pos:start="1769:50" pos:end="1769:53">arg2</name></expr></argument>, <argument pos:start="1769:56" pos:end="1769:78"><expr pos:start="1769:56" pos:end="1769:78"><sizeof pos:start="1769:56" pos:end="1769:78">sizeof<argument_list pos:start="1769:62" pos:end="1769:78">(<argument pos:start="1769:63" pos:end="1769:77"><expr pos:start="1769:63" pos:end="1769:77"><name pos:start="1769:63" pos:end="1769:77">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1769:81" pos:end="1769:81"><expr pos:start="1769:81" pos:end="1769:81"><literal type="number" pos:start="1769:81" pos:end="1769:81">1</literal></expr></argument>)</argument_list></call><operator pos:start="1769:83" pos:end="1769:83">)</operator></expr>)</condition><block type="pseudo" pos:start="1771:21" pos:end="1771:32"><block_content pos:start="1771:21" pos:end="1771:32">

                    <goto pos:start="1771:21" pos:end="1771:32">goto <name pos:start="1771:26" pos:end="1771:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1773:17" pos:end="1773:47"><expr pos:start="1773:17" pos:end="1773:46"><call pos:start="1773:17" pos:end="1773:46"><name pos:start="1773:17" pos:end="1773:37">target_to_host_sigset</name><argument_list pos:start="1773:38" pos:end="1773:46">(<argument pos:start="1773:39" pos:end="1773:42"><expr pos:start="1773:39" pos:end="1773:42"><operator pos:start="1773:39" pos:end="1773:39">&amp;</operator><name pos:start="1773:40" pos:end="1773:42">set</name></expr></argument>, <argument pos:start="1773:45" pos:end="1773:45"><expr pos:start="1773:45" pos:end="1773:45"><name pos:start="1773:45" pos:end="1773:45">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1775:17" pos:end="1775:40"><expr pos:start="1775:17" pos:end="1775:39"><call pos:start="1775:17" pos:end="1775:39"><name pos:start="1775:17" pos:end="1775:27">unlock_user</name><argument_list pos:start="1775:28" pos:end="1775:39">(<argument pos:start="1775:29" pos:end="1775:29"><expr pos:start="1775:29" pos:end="1775:29"><name pos:start="1775:29" pos:end="1775:29">p</name></expr></argument>, <argument pos:start="1775:32" pos:end="1775:35"><expr pos:start="1775:32" pos:end="1775:35"><name pos:start="1775:32" pos:end="1775:35">arg2</name></expr></argument>, <argument pos:start="1775:38" pos:end="1775:38"><expr pos:start="1775:38" pos:end="1775:38"><literal type="number" pos:start="1775:38" pos:end="1775:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1777:17" pos:end="1777:31"><expr pos:start="1777:17" pos:end="1777:30"><name pos:start="1777:17" pos:end="1777:23">set_ptr</name> <operator pos:start="1777:25" pos:end="1777:25">=</operator> <operator pos:start="1777:27" pos:end="1777:27">&amp;</operator><name pos:start="1777:28" pos:end="1777:30">set</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1779:15" pos:end="1785:13">else <block pos:start="1779:20" pos:end="1785:13">{<block_content pos:start="1781:17" pos:end="1783:31">

                <expr_stmt pos:start="1781:17" pos:end="1781:24"><expr pos:start="1781:17" pos:end="1781:23"><name pos:start="1781:17" pos:end="1781:19">how</name> <operator pos:start="1781:21" pos:end="1781:21">=</operator> <literal type="number" pos:start="1781:23" pos:end="1781:23">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1783:17" pos:end="1783:31"><expr pos:start="1783:17" pos:end="1783:30"><name pos:start="1783:17" pos:end="1783:23">set_ptr</name> <operator pos:start="1783:25" pos:end="1783:25">=</operator> <name pos:start="1783:27" pos:end="1783:30">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1787:13" pos:end="1787:64"><expr pos:start="1787:13" pos:end="1787:63"><name pos:start="1787:13" pos:end="1787:15">ret</name> <operator pos:start="1787:17" pos:end="1787:17">=</operator> <call pos:start="1787:19" pos:end="1787:63"><name pos:start="1787:19" pos:end="1787:27">get_errno</name><argument_list pos:start="1787:28" pos:end="1787:63">(<argument pos:start="1787:29" pos:end="1787:62"><expr pos:start="1787:29" pos:end="1787:62"><call pos:start="1787:29" pos:end="1787:62"><name pos:start="1787:29" pos:end="1787:39">sigprocmask</name><argument_list pos:start="1787:40" pos:end="1787:62">(<argument pos:start="1787:41" pos:end="1787:43"><expr pos:start="1787:41" pos:end="1787:43"><name pos:start="1787:41" pos:end="1787:43">how</name></expr></argument>, <argument pos:start="1787:46" pos:end="1787:52"><expr pos:start="1787:46" pos:end="1787:52"><name pos:start="1787:46" pos:end="1787:52">set_ptr</name></expr></argument>, <argument pos:start="1787:55" pos:end="1787:61"><expr pos:start="1787:55" pos:end="1787:61"><operator pos:start="1787:55" pos:end="1787:55">&amp;</operator><name pos:start="1787:56" pos:end="1787:61">oldset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1789:13" pos:end="1799:13"><if pos:start="1789:13" pos:end="1799:13">if <condition pos:start="1789:16" pos:end="1789:39">(<expr pos:start="1789:17" pos:end="1789:38"><operator pos:start="1789:17" pos:end="1789:17">!</operator><call pos:start="1789:18" pos:end="1789:30"><name pos:start="1789:18" pos:end="1789:25">is_error</name><argument_list pos:start="1789:26" pos:end="1789:30">(<argument pos:start="1789:27" pos:end="1789:29"><expr pos:start="1789:27" pos:end="1789:29"><name pos:start="1789:27" pos:end="1789:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="1789:32" pos:end="1789:33">&amp;&amp;</operator> <name pos:start="1789:35" pos:end="1789:38">arg3</name></expr>)</condition> <block pos:start="1789:41" pos:end="1799:13">{<block_content pos:start="1791:17" pos:end="1797:62">

                <if_stmt pos:start="1791:17" pos:end="1793:32"><if pos:start="1791:17" pos:end="1793:32">if <condition pos:start="1791:20" pos:end="1791:85">(<expr pos:start="1791:21" pos:end="1791:84"><operator pos:start="1791:21" pos:end="1791:21">!</operator><operator pos:start="1791:22" pos:end="1791:22">(</operator><name pos:start="1791:23" pos:end="1791:23">p</name> <operator pos:start="1791:25" pos:end="1791:25">=</operator> <call pos:start="1791:27" pos:end="1791:83"><name pos:start="1791:27" pos:end="1791:35">lock_user</name><argument_list pos:start="1791:36" pos:end="1791:83">(<argument pos:start="1791:37" pos:end="1791:48"><expr pos:start="1791:37" pos:end="1791:48"><name pos:start="1791:37" pos:end="1791:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1791:51" pos:end="1791:54"><expr pos:start="1791:51" pos:end="1791:54"><name pos:start="1791:51" pos:end="1791:54">arg3</name></expr></argument>, <argument pos:start="1791:57" pos:end="1791:79"><expr pos:start="1791:57" pos:end="1791:79"><sizeof pos:start="1791:57" pos:end="1791:79">sizeof<argument_list pos:start="1791:63" pos:end="1791:79">(<argument pos:start="1791:64" pos:end="1791:78"><expr pos:start="1791:64" pos:end="1791:78"><name pos:start="1791:64" pos:end="1791:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1791:82" pos:end="1791:82"><expr pos:start="1791:82" pos:end="1791:82"><literal type="number" pos:start="1791:82" pos:end="1791:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="1791:84" pos:end="1791:84">)</operator></expr>)</condition><block type="pseudo" pos:start="1793:21" pos:end="1793:32"><block_content pos:start="1793:21" pos:end="1793:32">

                    <goto pos:start="1793:21" pos:end="1793:32">goto <name pos:start="1793:26" pos:end="1793:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1795:17" pos:end="1795:50"><expr pos:start="1795:17" pos:end="1795:49"><call pos:start="1795:17" pos:end="1795:49"><name pos:start="1795:17" pos:end="1795:37">host_to_target_sigset</name><argument_list pos:start="1795:38" pos:end="1795:49">(<argument pos:start="1795:39" pos:end="1795:39"><expr pos:start="1795:39" pos:end="1795:39"><name pos:start="1795:39" pos:end="1795:39">p</name></expr></argument>, <argument pos:start="1795:42" pos:end="1795:48"><expr pos:start="1795:42" pos:end="1795:48"><operator pos:start="1795:42" pos:end="1795:42">&amp;</operator><name pos:start="1795:43" pos:end="1795:48">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1797:17" pos:end="1797:62"><expr pos:start="1797:17" pos:end="1797:61"><call pos:start="1797:17" pos:end="1797:61"><name pos:start="1797:17" pos:end="1797:27">unlock_user</name><argument_list pos:start="1797:28" pos:end="1797:61">(<argument pos:start="1797:29" pos:end="1797:29"><expr pos:start="1797:29" pos:end="1797:29"><name pos:start="1797:29" pos:end="1797:29">p</name></expr></argument>, <argument pos:start="1797:32" pos:end="1797:35"><expr pos:start="1797:32" pos:end="1797:35"><name pos:start="1797:32" pos:end="1797:35">arg3</name></expr></argument>, <argument pos:start="1797:38" pos:end="1797:60"><expr pos:start="1797:38" pos:end="1797:60"><sizeof pos:start="1797:38" pos:end="1797:60">sizeof<argument_list pos:start="1797:44" pos:end="1797:60">(<argument pos:start="1797:45" pos:end="1797:59"><expr pos:start="1797:45" pos:end="1797:59"><name pos:start="1797:45" pos:end="1797:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1803:9" pos:end="1806:0">break;</break>

<cpp:ifdef pos:start="1805:1" pos:end="1805:27">#<cpp:directive pos:start="1805:2" pos:end="1805:6">ifdef</cpp:directive> <name pos:start="1805:8" pos:end="1805:27">TARGET_NR_sigpending</name></cpp:ifdef>

    <case pos:start="1807:5" pos:end="1807:30">case <expr pos:start="1807:10" pos:end="1807:29"><name pos:start="1807:10" pos:end="1807:29">TARGET_NR_sigpending</name></expr>:</case>

        <block pos:start="1809:9" pos:end="1827:9">{<block_content pos:start="1811:13" pos:end="1825:13">

            <decl_stmt pos:start="1811:13" pos:end="1811:25"><decl pos:start="1811:13" pos:end="1811:24"><type pos:start="1811:13" pos:end="1811:20"><name pos:start="1811:13" pos:end="1811:20">sigset_t</name></type> <name pos:start="1811:22" pos:end="1811:24">set</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1813:13" pos:end="1813:46"><expr pos:start="1813:13" pos:end="1813:45"><name pos:start="1813:13" pos:end="1813:15">ret</name> <operator pos:start="1813:17" pos:end="1813:17">=</operator> <call pos:start="1813:19" pos:end="1813:45"><name pos:start="1813:19" pos:end="1813:27">get_errno</name><argument_list pos:start="1813:28" pos:end="1813:45">(<argument pos:start="1813:29" pos:end="1813:44"><expr pos:start="1813:29" pos:end="1813:44"><call pos:start="1813:29" pos:end="1813:44"><name pos:start="1813:29" pos:end="1813:38">sigpending</name><argument_list pos:start="1813:39" pos:end="1813:44">(<argument pos:start="1813:40" pos:end="1813:43"><expr pos:start="1813:40" pos:end="1813:43"><operator pos:start="1813:40" pos:end="1813:40">&amp;</operator><name pos:start="1813:41" pos:end="1813:43">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1815:13" pos:end="1825:13"><if pos:start="1815:13" pos:end="1825:13">if <condition pos:start="1815:16" pos:end="1815:31">(<expr pos:start="1815:17" pos:end="1815:30"><operator pos:start="1815:17" pos:end="1815:17">!</operator><call pos:start="1815:18" pos:end="1815:30"><name pos:start="1815:18" pos:end="1815:25">is_error</name><argument_list pos:start="1815:26" pos:end="1815:30">(<argument pos:start="1815:27" pos:end="1815:29"><expr pos:start="1815:27" pos:end="1815:29"><name pos:start="1815:27" pos:end="1815:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1815:33" pos:end="1825:13">{<block_content pos:start="1817:17" pos:end="1823:62">

                <if_stmt pos:start="1817:17" pos:end="1819:32"><if pos:start="1817:17" pos:end="1819:32">if <condition pos:start="1817:20" pos:end="1817:85">(<expr pos:start="1817:21" pos:end="1817:84"><operator pos:start="1817:21" pos:end="1817:21">!</operator><operator pos:start="1817:22" pos:end="1817:22">(</operator><name pos:start="1817:23" pos:end="1817:23">p</name> <operator pos:start="1817:25" pos:end="1817:25">=</operator> <call pos:start="1817:27" pos:end="1817:83"><name pos:start="1817:27" pos:end="1817:35">lock_user</name><argument_list pos:start="1817:36" pos:end="1817:83">(<argument pos:start="1817:37" pos:end="1817:48"><expr pos:start="1817:37" pos:end="1817:48"><name pos:start="1817:37" pos:end="1817:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1817:51" pos:end="1817:54"><expr pos:start="1817:51" pos:end="1817:54"><name pos:start="1817:51" pos:end="1817:54">arg1</name></expr></argument>, <argument pos:start="1817:57" pos:end="1817:79"><expr pos:start="1817:57" pos:end="1817:79"><sizeof pos:start="1817:57" pos:end="1817:79">sizeof<argument_list pos:start="1817:63" pos:end="1817:79">(<argument pos:start="1817:64" pos:end="1817:78"><expr pos:start="1817:64" pos:end="1817:78"><name pos:start="1817:64" pos:end="1817:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1817:82" pos:end="1817:82"><expr pos:start="1817:82" pos:end="1817:82"><literal type="number" pos:start="1817:82" pos:end="1817:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="1817:84" pos:end="1817:84">)</operator></expr>)</condition><block type="pseudo" pos:start="1819:21" pos:end="1819:32"><block_content pos:start="1819:21" pos:end="1819:32">

                    <goto pos:start="1819:21" pos:end="1819:32">goto <name pos:start="1819:26" pos:end="1819:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1821:17" pos:end="1821:51"><expr pos:start="1821:17" pos:end="1821:50"><call pos:start="1821:17" pos:end="1821:50"><name pos:start="1821:17" pos:end="1821:41">host_to_target_old_sigset</name><argument_list pos:start="1821:42" pos:end="1821:50">(<argument pos:start="1821:43" pos:end="1821:43"><expr pos:start="1821:43" pos:end="1821:43"><name pos:start="1821:43" pos:end="1821:43">p</name></expr></argument>, <argument pos:start="1821:46" pos:end="1821:49"><expr pos:start="1821:46" pos:end="1821:49"><operator pos:start="1821:46" pos:end="1821:46">&amp;</operator><name pos:start="1821:47" pos:end="1821:49">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1823:17" pos:end="1823:62"><expr pos:start="1823:17" pos:end="1823:61"><call pos:start="1823:17" pos:end="1823:61"><name pos:start="1823:17" pos:end="1823:27">unlock_user</name><argument_list pos:start="1823:28" pos:end="1823:61">(<argument pos:start="1823:29" pos:end="1823:29"><expr pos:start="1823:29" pos:end="1823:29"><name pos:start="1823:29" pos:end="1823:29">p</name></expr></argument>, <argument pos:start="1823:32" pos:end="1823:35"><expr pos:start="1823:32" pos:end="1823:35"><name pos:start="1823:32" pos:end="1823:35">arg1</name></expr></argument>, <argument pos:start="1823:38" pos:end="1823:60"><expr pos:start="1823:38" pos:end="1823:60"><sizeof pos:start="1823:38" pos:end="1823:60">sizeof<argument_list pos:start="1823:44" pos:end="1823:60">(<argument pos:start="1823:45" pos:end="1823:59"><expr pos:start="1823:45" pos:end="1823:59"><name pos:start="1823:45" pos:end="1823:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1829:9" pos:end="1832:0">break;</break>

<cpp:endif pos:start="1831:1" pos:end="1831:6">#<cpp:directive pos:start="1831:2" pos:end="1831:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1833:5" pos:end="1833:33">case <expr pos:start="1833:10" pos:end="1833:32"><name pos:start="1833:10" pos:end="1833:32">TARGET_NR_rt_sigpending</name></expr>:</case>

        <block pos:start="1835:9" pos:end="1853:9">{<block_content pos:start="1837:13" pos:end="1851:13">

            <decl_stmt pos:start="1837:13" pos:end="1837:25"><decl pos:start="1837:13" pos:end="1837:24"><type pos:start="1837:13" pos:end="1837:20"><name pos:start="1837:13" pos:end="1837:20">sigset_t</name></type> <name pos:start="1837:22" pos:end="1837:24">set</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1839:13" pos:end="1839:46"><expr pos:start="1839:13" pos:end="1839:45"><name pos:start="1839:13" pos:end="1839:15">ret</name> <operator pos:start="1839:17" pos:end="1839:17">=</operator> <call pos:start="1839:19" pos:end="1839:45"><name pos:start="1839:19" pos:end="1839:27">get_errno</name><argument_list pos:start="1839:28" pos:end="1839:45">(<argument pos:start="1839:29" pos:end="1839:44"><expr pos:start="1839:29" pos:end="1839:44"><call pos:start="1839:29" pos:end="1839:44"><name pos:start="1839:29" pos:end="1839:38">sigpending</name><argument_list pos:start="1839:39" pos:end="1839:44">(<argument pos:start="1839:40" pos:end="1839:43"><expr pos:start="1839:40" pos:end="1839:43"><operator pos:start="1839:40" pos:end="1839:40">&amp;</operator><name pos:start="1839:41" pos:end="1839:43">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1841:13" pos:end="1851:13"><if pos:start="1841:13" pos:end="1851:13">if <condition pos:start="1841:16" pos:end="1841:31">(<expr pos:start="1841:17" pos:end="1841:30"><operator pos:start="1841:17" pos:end="1841:17">!</operator><call pos:start="1841:18" pos:end="1841:30"><name pos:start="1841:18" pos:end="1841:25">is_error</name><argument_list pos:start="1841:26" pos:end="1841:30">(<argument pos:start="1841:27" pos:end="1841:29"><expr pos:start="1841:27" pos:end="1841:29"><name pos:start="1841:27" pos:end="1841:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1841:33" pos:end="1851:13">{<block_content pos:start="1843:17" pos:end="1849:62">

                <if_stmt pos:start="1843:17" pos:end="1845:32"><if pos:start="1843:17" pos:end="1845:32">if <condition pos:start="1843:20" pos:end="1843:85">(<expr pos:start="1843:21" pos:end="1843:84"><operator pos:start="1843:21" pos:end="1843:21">!</operator><operator pos:start="1843:22" pos:end="1843:22">(</operator><name pos:start="1843:23" pos:end="1843:23">p</name> <operator pos:start="1843:25" pos:end="1843:25">=</operator> <call pos:start="1843:27" pos:end="1843:83"><name pos:start="1843:27" pos:end="1843:35">lock_user</name><argument_list pos:start="1843:36" pos:end="1843:83">(<argument pos:start="1843:37" pos:end="1843:48"><expr pos:start="1843:37" pos:end="1843:48"><name pos:start="1843:37" pos:end="1843:48">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1843:51" pos:end="1843:54"><expr pos:start="1843:51" pos:end="1843:54"><name pos:start="1843:51" pos:end="1843:54">arg1</name></expr></argument>, <argument pos:start="1843:57" pos:end="1843:79"><expr pos:start="1843:57" pos:end="1843:79"><sizeof pos:start="1843:57" pos:end="1843:79">sizeof<argument_list pos:start="1843:63" pos:end="1843:79">(<argument pos:start="1843:64" pos:end="1843:78"><expr pos:start="1843:64" pos:end="1843:78"><name pos:start="1843:64" pos:end="1843:78">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1843:82" pos:end="1843:82"><expr pos:start="1843:82" pos:end="1843:82"><literal type="number" pos:start="1843:82" pos:end="1843:82">0</literal></expr></argument>)</argument_list></call><operator pos:start="1843:84" pos:end="1843:84">)</operator></expr>)</condition><block type="pseudo" pos:start="1845:21" pos:end="1845:32"><block_content pos:start="1845:21" pos:end="1845:32">

                    <goto pos:start="1845:21" pos:end="1845:32">goto <name pos:start="1845:26" pos:end="1845:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1847:17" pos:end="1847:47"><expr pos:start="1847:17" pos:end="1847:46"><call pos:start="1847:17" pos:end="1847:46"><name pos:start="1847:17" pos:end="1847:37">host_to_target_sigset</name><argument_list pos:start="1847:38" pos:end="1847:46">(<argument pos:start="1847:39" pos:end="1847:39"><expr pos:start="1847:39" pos:end="1847:39"><name pos:start="1847:39" pos:end="1847:39">p</name></expr></argument>, <argument pos:start="1847:42" pos:end="1847:45"><expr pos:start="1847:42" pos:end="1847:45"><operator pos:start="1847:42" pos:end="1847:42">&amp;</operator><name pos:start="1847:43" pos:end="1847:45">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1849:17" pos:end="1849:62"><expr pos:start="1849:17" pos:end="1849:61"><call pos:start="1849:17" pos:end="1849:61"><name pos:start="1849:17" pos:end="1849:27">unlock_user</name><argument_list pos:start="1849:28" pos:end="1849:61">(<argument pos:start="1849:29" pos:end="1849:29"><expr pos:start="1849:29" pos:end="1849:29"><name pos:start="1849:29" pos:end="1849:29">p</name></expr></argument>, <argument pos:start="1849:32" pos:end="1849:35"><expr pos:start="1849:32" pos:end="1849:35"><name pos:start="1849:32" pos:end="1849:35">arg1</name></expr></argument>, <argument pos:start="1849:38" pos:end="1849:60"><expr pos:start="1849:38" pos:end="1849:60"><sizeof pos:start="1849:38" pos:end="1849:60">sizeof<argument_list pos:start="1849:44" pos:end="1849:60">(<argument pos:start="1849:45" pos:end="1849:59"><expr pos:start="1849:45" pos:end="1849:59"><name pos:start="1849:45" pos:end="1849:59">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1855:9" pos:end="1858:0">break;</break>

<cpp:ifdef pos:start="1857:1" pos:end="1857:27">#<cpp:directive pos:start="1857:2" pos:end="1857:6">ifdef</cpp:directive> <name pos:start="1857:8" pos:end="1857:27">TARGET_NR_sigsuspend</name></cpp:ifdef>

    <case pos:start="1859:5" pos:end="1859:30">case <expr pos:start="1859:10" pos:end="1859:29"><name pos:start="1859:10" pos:end="1859:29">TARGET_NR_sigsuspend</name></expr>:</case>

        <block pos:start="1861:9" pos:end="1885:9">{<block_content pos:start="1863:13" pos:end="1883:46">

            <decl_stmt pos:start="1863:13" pos:end="1866:0"><decl pos:start="1863:13" pos:end="1863:24"><type pos:start="1863:13" pos:end="1863:20"><name pos:start="1863:13" pos:end="1863:20">sigset_t</name></type> <name pos:start="1863:22" pos:end="1863:24">set</name></decl>;</decl_stmt>

<cpp:if pos:start="1865:1" pos:end="1865:25">#<cpp:directive pos:start="1865:2" pos:end="1865:3">if</cpp:directive> <expr pos:start="1865:5" pos:end="1865:25"><call pos:start="1865:5" pos:end="1865:25"><name pos:start="1865:5" pos:end="1865:11">defined</name><argument_list pos:start="1865:12" pos:end="1865:25">(<argument pos:start="1865:13" pos:end="1865:24"><expr pos:start="1865:13" pos:end="1865:24"><name pos:start="1865:13" pos:end="1865:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <decl_stmt pos:start="1867:13" pos:end="1867:34"><decl pos:start="1867:13" pos:end="1867:33"><type pos:start="1867:13" pos:end="1867:21"><name pos:start="1867:13" pos:end="1867:21">abi_ulong</name></type> <name pos:start="1867:23" pos:end="1867:26">mask</name> <init pos:start="1867:28" pos:end="1867:33">= <expr pos:start="1867:30" pos:end="1867:33"><name pos:start="1867:30" pos:end="1867:33">arg1</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="1869:13" pos:end="1872:0"><expr pos:start="1869:13" pos:end="1869:50"><call pos:start="1869:13" pos:end="1869:50"><name pos:start="1869:13" pos:end="1869:37">target_to_host_old_sigset</name><argument_list pos:start="1869:38" pos:end="1869:50">(<argument pos:start="1869:39" pos:end="1869:42"><expr pos:start="1869:39" pos:end="1869:42"><operator pos:start="1869:39" pos:end="1869:39">&amp;</operator><name pos:start="1869:40" pos:end="1869:42">set</name></expr></argument>, <argument pos:start="1869:45" pos:end="1869:49"><expr pos:start="1869:45" pos:end="1869:49"><operator pos:start="1869:45" pos:end="1869:45">&amp;</operator><name pos:start="1869:46" pos:end="1869:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1871:1" pos:end="1871:5">#<cpp:directive pos:start="1871:2" pos:end="1871:5">else</cpp:directive></cpp:else>

            <if_stmt pos:start="1873:13" pos:end="1875:28"><if pos:start="1873:13" pos:end="1875:28">if <condition pos:start="1873:16" pos:end="1873:80">(<expr pos:start="1873:17" pos:end="1873:79"><operator pos:start="1873:17" pos:end="1873:17">!</operator><operator pos:start="1873:18" pos:end="1873:18">(</operator><name pos:start="1873:19" pos:end="1873:19">p</name> <operator pos:start="1873:21" pos:end="1873:21">=</operator> <call pos:start="1873:23" pos:end="1873:78"><name pos:start="1873:23" pos:end="1873:31">lock_user</name><argument_list pos:start="1873:32" pos:end="1873:78">(<argument pos:start="1873:33" pos:end="1873:43"><expr pos:start="1873:33" pos:end="1873:43"><name pos:start="1873:33" pos:end="1873:43">VERIFY_READ</name></expr></argument>, <argument pos:start="1873:46" pos:end="1873:49"><expr pos:start="1873:46" pos:end="1873:49"><name pos:start="1873:46" pos:end="1873:49">arg1</name></expr></argument>, <argument pos:start="1873:52" pos:end="1873:74"><expr pos:start="1873:52" pos:end="1873:74"><sizeof pos:start="1873:52" pos:end="1873:74">sizeof<argument_list pos:start="1873:58" pos:end="1873:74">(<argument pos:start="1873:59" pos:end="1873:73"><expr pos:start="1873:59" pos:end="1873:73"><name pos:start="1873:59" pos:end="1873:73">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1873:77" pos:end="1873:77"><expr pos:start="1873:77" pos:end="1873:77"><literal type="number" pos:start="1873:77" pos:end="1873:77">1</literal></expr></argument>)</argument_list></call><operator pos:start="1873:79" pos:end="1873:79">)</operator></expr>)</condition><block type="pseudo" pos:start="1875:17" pos:end="1875:28"><block_content pos:start="1875:17" pos:end="1875:28">

                <goto pos:start="1875:17" pos:end="1875:28">goto <name pos:start="1875:22" pos:end="1875:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1877:13" pos:end="1877:47"><expr pos:start="1877:13" pos:end="1877:46"><call pos:start="1877:13" pos:end="1877:46"><name pos:start="1877:13" pos:end="1877:37">target_to_host_old_sigset</name><argument_list pos:start="1877:38" pos:end="1877:46">(<argument pos:start="1877:39" pos:end="1877:42"><expr pos:start="1877:39" pos:end="1877:42"><operator pos:start="1877:39" pos:end="1877:39">&amp;</operator><name pos:start="1877:40" pos:end="1877:42">set</name></expr></argument>, <argument pos:start="1877:45" pos:end="1877:45"><expr pos:start="1877:45" pos:end="1877:45"><name pos:start="1877:45" pos:end="1877:45">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1879:13" pos:end="1882:0"><expr pos:start="1879:13" pos:end="1879:35"><call pos:start="1879:13" pos:end="1879:35"><name pos:start="1879:13" pos:end="1879:23">unlock_user</name><argument_list pos:start="1879:24" pos:end="1879:35">(<argument pos:start="1879:25" pos:end="1879:25"><expr pos:start="1879:25" pos:end="1879:25"><name pos:start="1879:25" pos:end="1879:25">p</name></expr></argument>, <argument pos:start="1879:28" pos:end="1879:31"><expr pos:start="1879:28" pos:end="1879:31"><name pos:start="1879:28" pos:end="1879:31">arg1</name></expr></argument>, <argument pos:start="1879:34" pos:end="1879:34"><expr pos:start="1879:34" pos:end="1879:34"><literal type="number" pos:start="1879:34" pos:end="1879:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1881:1" pos:end="1881:6">#<cpp:directive pos:start="1881:2" pos:end="1881:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1883:13" pos:end="1883:46"><expr pos:start="1883:13" pos:end="1883:45"><name pos:start="1883:13" pos:end="1883:15">ret</name> <operator pos:start="1883:17" pos:end="1883:17">=</operator> <call pos:start="1883:19" pos:end="1883:45"><name pos:start="1883:19" pos:end="1883:27">get_errno</name><argument_list pos:start="1883:28" pos:end="1883:45">(<argument pos:start="1883:29" pos:end="1883:44"><expr pos:start="1883:29" pos:end="1883:44"><call pos:start="1883:29" pos:end="1883:44"><name pos:start="1883:29" pos:end="1883:38">sigsuspend</name><argument_list pos:start="1883:39" pos:end="1883:44">(<argument pos:start="1883:40" pos:end="1883:43"><expr pos:start="1883:40" pos:end="1883:43"><operator pos:start="1883:40" pos:end="1883:40">&amp;</operator><name pos:start="1883:41" pos:end="1883:43">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1887:9" pos:end="1890:0">break;</break>

<cpp:endif pos:start="1889:1" pos:end="1889:6">#<cpp:directive pos:start="1889:2" pos:end="1889:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1891:5" pos:end="1891:33">case <expr pos:start="1891:10" pos:end="1891:32"><name pos:start="1891:10" pos:end="1891:32">TARGET_NR_rt_sigsuspend</name></expr>:</case>

        <block pos:start="1893:9" pos:end="1907:9">{<block_content pos:start="1895:13" pos:end="1905:46">

            <decl_stmt pos:start="1895:13" pos:end="1895:25"><decl pos:start="1895:13" pos:end="1895:24"><type pos:start="1895:13" pos:end="1895:20"><name pos:start="1895:13" pos:end="1895:20">sigset_t</name></type> <name pos:start="1895:22" pos:end="1895:24">set</name></decl>;</decl_stmt>

            <if_stmt pos:start="1897:13" pos:end="1899:28"><if pos:start="1897:13" pos:end="1899:28">if <condition pos:start="1897:16" pos:end="1897:80">(<expr pos:start="1897:17" pos:end="1897:79"><operator pos:start="1897:17" pos:end="1897:17">!</operator><operator pos:start="1897:18" pos:end="1897:18">(</operator><name pos:start="1897:19" pos:end="1897:19">p</name> <operator pos:start="1897:21" pos:end="1897:21">=</operator> <call pos:start="1897:23" pos:end="1897:78"><name pos:start="1897:23" pos:end="1897:31">lock_user</name><argument_list pos:start="1897:32" pos:end="1897:78">(<argument pos:start="1897:33" pos:end="1897:43"><expr pos:start="1897:33" pos:end="1897:43"><name pos:start="1897:33" pos:end="1897:43">VERIFY_READ</name></expr></argument>, <argument pos:start="1897:46" pos:end="1897:49"><expr pos:start="1897:46" pos:end="1897:49"><name pos:start="1897:46" pos:end="1897:49">arg1</name></expr></argument>, <argument pos:start="1897:52" pos:end="1897:74"><expr pos:start="1897:52" pos:end="1897:74"><sizeof pos:start="1897:52" pos:end="1897:74">sizeof<argument_list pos:start="1897:58" pos:end="1897:74">(<argument pos:start="1897:59" pos:end="1897:73"><expr pos:start="1897:59" pos:end="1897:73"><name pos:start="1897:59" pos:end="1897:73">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1897:77" pos:end="1897:77"><expr pos:start="1897:77" pos:end="1897:77"><literal type="number" pos:start="1897:77" pos:end="1897:77">1</literal></expr></argument>)</argument_list></call><operator pos:start="1897:79" pos:end="1897:79">)</operator></expr>)</condition><block type="pseudo" pos:start="1899:17" pos:end="1899:28"><block_content pos:start="1899:17" pos:end="1899:28">

                <goto pos:start="1899:17" pos:end="1899:28">goto <name pos:start="1899:22" pos:end="1899:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1901:13" pos:end="1901:43"><expr pos:start="1901:13" pos:end="1901:42"><call pos:start="1901:13" pos:end="1901:42"><name pos:start="1901:13" pos:end="1901:33">target_to_host_sigset</name><argument_list pos:start="1901:34" pos:end="1901:42">(<argument pos:start="1901:35" pos:end="1901:38"><expr pos:start="1901:35" pos:end="1901:38"><operator pos:start="1901:35" pos:end="1901:35">&amp;</operator><name pos:start="1901:36" pos:end="1901:38">set</name></expr></argument>, <argument pos:start="1901:41" pos:end="1901:41"><expr pos:start="1901:41" pos:end="1901:41"><name pos:start="1901:41" pos:end="1901:41">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1903:13" pos:end="1903:36"><expr pos:start="1903:13" pos:end="1903:35"><call pos:start="1903:13" pos:end="1903:35"><name pos:start="1903:13" pos:end="1903:23">unlock_user</name><argument_list pos:start="1903:24" pos:end="1903:35">(<argument pos:start="1903:25" pos:end="1903:25"><expr pos:start="1903:25" pos:end="1903:25"><name pos:start="1903:25" pos:end="1903:25">p</name></expr></argument>, <argument pos:start="1903:28" pos:end="1903:31"><expr pos:start="1903:28" pos:end="1903:31"><name pos:start="1903:28" pos:end="1903:31">arg1</name></expr></argument>, <argument pos:start="1903:34" pos:end="1903:34"><expr pos:start="1903:34" pos:end="1903:34"><literal type="number" pos:start="1903:34" pos:end="1903:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1905:13" pos:end="1905:46"><expr pos:start="1905:13" pos:end="1905:45"><name pos:start="1905:13" pos:end="1905:15">ret</name> <operator pos:start="1905:17" pos:end="1905:17">=</operator> <call pos:start="1905:19" pos:end="1905:45"><name pos:start="1905:19" pos:end="1905:27">get_errno</name><argument_list pos:start="1905:28" pos:end="1905:45">(<argument pos:start="1905:29" pos:end="1905:44"><expr pos:start="1905:29" pos:end="1905:44"><call pos:start="1905:29" pos:end="1905:44"><name pos:start="1905:29" pos:end="1905:38">sigsuspend</name><argument_list pos:start="1905:39" pos:end="1905:44">(<argument pos:start="1905:40" pos:end="1905:43"><expr pos:start="1905:40" pos:end="1905:43"><operator pos:start="1905:40" pos:end="1905:40">&amp;</operator><name pos:start="1905:41" pos:end="1905:43">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1909:9" pos:end="1909:14">break;</break>

    <case pos:start="1911:5" pos:end="1911:35">case <expr pos:start="1911:10" pos:end="1911:34"><name pos:start="1911:10" pos:end="1911:34">TARGET_NR_rt_sigtimedwait</name></expr>:</case>

        <block pos:start="1913:9" pos:end="1969:9">{<block_content pos:start="1915:13" pos:end="1967:13">

            <decl_stmt pos:start="1915:13" pos:end="1915:25"><decl pos:start="1915:13" pos:end="1915:24"><type pos:start="1915:13" pos:end="1915:20"><name pos:start="1915:13" pos:end="1915:20">sigset_t</name></type> <name pos:start="1915:22" pos:end="1915:24">set</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1917:13" pos:end="1917:39"><decl pos:start="1917:13" pos:end="1917:31"><type pos:start="1917:13" pos:end="1917:27"><name pos:start="1917:13" pos:end="1917:27"><name pos:start="1917:13" pos:end="1917:18">struct</name> <name pos:start="1917:20" pos:end="1917:27">timespec</name></name></type> <name pos:start="1917:29" pos:end="1917:31">uts</name></decl>, <decl pos:start="1917:34" pos:end="1917:38"><type ref="prev" pos:start="1917:13" pos:end="1917:27"><modifier pos:start="1917:34" pos:end="1917:34">*</modifier></type><name pos:start="1917:35" pos:end="1917:38">puts</name></decl>;</decl_stmt>

            <decl_stmt pos:start="1919:13" pos:end="1919:28"><decl pos:start="1919:13" pos:end="1919:27"><type pos:start="1919:13" pos:end="1919:21"><name pos:start="1919:13" pos:end="1919:21">siginfo_t</name></type> <name pos:start="1919:23" pos:end="1919:27">uinfo</name></decl>;</decl_stmt>



            <if_stmt pos:start="1923:13" pos:end="1925:28"><if pos:start="1923:13" pos:end="1925:28">if <condition pos:start="1923:16" pos:end="1923:80">(<expr pos:start="1923:17" pos:end="1923:79"><operator pos:start="1923:17" pos:end="1923:17">!</operator><operator pos:start="1923:18" pos:end="1923:18">(</operator><name pos:start="1923:19" pos:end="1923:19">p</name> <operator pos:start="1923:21" pos:end="1923:21">=</operator> <call pos:start="1923:23" pos:end="1923:78"><name pos:start="1923:23" pos:end="1923:31">lock_user</name><argument_list pos:start="1923:32" pos:end="1923:78">(<argument pos:start="1923:33" pos:end="1923:43"><expr pos:start="1923:33" pos:end="1923:43"><name pos:start="1923:33" pos:end="1923:43">VERIFY_READ</name></expr></argument>, <argument pos:start="1923:46" pos:end="1923:49"><expr pos:start="1923:46" pos:end="1923:49"><name pos:start="1923:46" pos:end="1923:49">arg1</name></expr></argument>, <argument pos:start="1923:52" pos:end="1923:74"><expr pos:start="1923:52" pos:end="1923:74"><sizeof pos:start="1923:52" pos:end="1923:74">sizeof<argument_list pos:start="1923:58" pos:end="1923:74">(<argument pos:start="1923:59" pos:end="1923:73"><expr pos:start="1923:59" pos:end="1923:73"><name pos:start="1923:59" pos:end="1923:73">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1923:77" pos:end="1923:77"><expr pos:start="1923:77" pos:end="1923:77"><literal type="number" pos:start="1923:77" pos:end="1923:77">1</literal></expr></argument>)</argument_list></call><operator pos:start="1923:79" pos:end="1923:79">)</operator></expr>)</condition><block type="pseudo" pos:start="1925:17" pos:end="1925:28"><block_content pos:start="1925:17" pos:end="1925:28">

                <goto pos:start="1925:17" pos:end="1925:28">goto <name pos:start="1925:22" pos:end="1925:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1927:13" pos:end="1927:43"><expr pos:start="1927:13" pos:end="1927:42"><call pos:start="1927:13" pos:end="1927:42"><name pos:start="1927:13" pos:end="1927:33">target_to_host_sigset</name><argument_list pos:start="1927:34" pos:end="1927:42">(<argument pos:start="1927:35" pos:end="1927:38"><expr pos:start="1927:35" pos:end="1927:38"><operator pos:start="1927:35" pos:end="1927:35">&amp;</operator><name pos:start="1927:36" pos:end="1927:38">set</name></expr></argument>, <argument pos:start="1927:41" pos:end="1927:41"><expr pos:start="1927:41" pos:end="1927:41"><name pos:start="1927:41" pos:end="1927:41">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1929:13" pos:end="1929:36"><expr pos:start="1929:13" pos:end="1929:35"><call pos:start="1929:13" pos:end="1929:35"><name pos:start="1929:13" pos:end="1929:23">unlock_user</name><argument_list pos:start="1929:24" pos:end="1929:35">(<argument pos:start="1929:25" pos:end="1929:25"><expr pos:start="1929:25" pos:end="1929:25"><name pos:start="1929:25" pos:end="1929:25">p</name></expr></argument>, <argument pos:start="1929:28" pos:end="1929:31"><expr pos:start="1929:28" pos:end="1929:31"><name pos:start="1929:28" pos:end="1929:31">arg1</name></expr></argument>, <argument pos:start="1929:34" pos:end="1929:34"><expr pos:start="1929:34" pos:end="1929:34"><literal type="number" pos:start="1929:34" pos:end="1929:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1931:13" pos:end="1941:13"><if pos:start="1931:13" pos:end="1937:13">if <condition pos:start="1931:16" pos:end="1931:21">(<expr pos:start="1931:17" pos:end="1931:20"><name pos:start="1931:17" pos:end="1931:20">arg3</name></expr>)</condition> <block pos:start="1931:23" pos:end="1937:13">{<block_content pos:start="1933:17" pos:end="1935:52">

                <expr_stmt pos:start="1933:17" pos:end="1933:28"><expr pos:start="1933:17" pos:end="1933:27"><name pos:start="1933:17" pos:end="1933:20">puts</name> <operator pos:start="1933:22" pos:end="1933:22">=</operator> <operator pos:start="1933:24" pos:end="1933:24">&amp;</operator><name pos:start="1933:25" pos:end="1933:27">uts</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1935:17" pos:end="1935:52"><expr pos:start="1935:17" pos:end="1935:51"><call pos:start="1935:17" pos:end="1935:51"><name pos:start="1935:17" pos:end="1935:39">target_to_host_timespec</name><argument_list pos:start="1935:40" pos:end="1935:51">(<argument pos:start="1935:41" pos:end="1935:44"><expr pos:start="1935:41" pos:end="1935:44"><name pos:start="1935:41" pos:end="1935:44">puts</name></expr></argument>, <argument pos:start="1935:47" pos:end="1935:50"><expr pos:start="1935:47" pos:end="1935:50"><name pos:start="1935:47" pos:end="1935:50">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1937:15" pos:end="1941:13">else <block pos:start="1937:20" pos:end="1941:13">{<block_content pos:start="1939:17" pos:end="1939:28">

                <expr_stmt pos:start="1939:17" pos:end="1939:28"><expr pos:start="1939:17" pos:end="1939:27"><name pos:start="1939:17" pos:end="1939:20">puts</name> <operator pos:start="1939:22" pos:end="1939:22">=</operator> <name pos:start="1939:24" pos:end="1939:27">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1943:13" pos:end="1943:62"><expr pos:start="1943:13" pos:end="1943:61"><name pos:start="1943:13" pos:end="1943:15">ret</name> <operator pos:start="1943:17" pos:end="1943:17">=</operator> <call pos:start="1943:19" pos:end="1943:61"><name pos:start="1943:19" pos:end="1943:27">get_errno</name><argument_list pos:start="1943:28" pos:end="1943:61">(<argument pos:start="1943:29" pos:end="1943:60"><expr pos:start="1943:29" pos:end="1943:60"><call pos:start="1943:29" pos:end="1943:60"><name pos:start="1943:29" pos:end="1943:40">sigtimedwait</name><argument_list pos:start="1943:41" pos:end="1943:60">(<argument pos:start="1943:42" pos:end="1943:45"><expr pos:start="1943:42" pos:end="1943:45"><operator pos:start="1943:42" pos:end="1943:42">&amp;</operator><name pos:start="1943:43" pos:end="1943:45">set</name></expr></argument>, <argument pos:start="1943:48" pos:end="1943:53"><expr pos:start="1943:48" pos:end="1943:53"><operator pos:start="1943:48" pos:end="1943:48">&amp;</operator><name pos:start="1943:49" pos:end="1943:53">uinfo</name></expr></argument>, <argument pos:start="1943:56" pos:end="1943:59"><expr pos:start="1943:56" pos:end="1943:59"><name pos:start="1943:56" pos:end="1943:59">puts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1945:13" pos:end="1967:13"><if pos:start="1945:13" pos:end="1967:13">if <condition pos:start="1945:16" pos:end="1945:31">(<expr pos:start="1945:17" pos:end="1945:30"><operator pos:start="1945:17" pos:end="1945:17">!</operator><call pos:start="1945:18" pos:end="1945:30"><name pos:start="1945:18" pos:end="1945:25">is_error</name><argument_list pos:start="1945:26" pos:end="1945:30">(<argument pos:start="1945:27" pos:end="1945:29"><expr pos:start="1945:27" pos:end="1945:29"><name pos:start="1945:27" pos:end="1945:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1945:33" pos:end="1967:13">{<block_content pos:start="1947:17" pos:end="1965:49">

                <if_stmt pos:start="1947:17" pos:end="1963:17"><if pos:start="1947:17" pos:end="1963:17">if <condition pos:start="1947:20" pos:end="1947:25">(<expr pos:start="1947:21" pos:end="1947:24"><name pos:start="1947:21" pos:end="1947:24">arg2</name></expr>)</condition> <block pos:start="1947:27" pos:end="1963:17">{<block_content pos:start="1949:21" pos:end="1961:67">

                    <expr_stmt pos:start="1949:21" pos:end="1951:37"><expr pos:start="1949:21" pos:end="1951:36"><name pos:start="1949:21" pos:end="1949:21">p</name> <operator pos:start="1949:23" pos:end="1949:23">=</operator> <call pos:start="1949:25" pos:end="1951:36"><name pos:start="1949:25" pos:end="1949:33">lock_user</name><argument_list pos:start="1949:34" pos:end="1951:36">(<argument pos:start="1949:35" pos:end="1949:46"><expr pos:start="1949:35" pos:end="1949:46"><name pos:start="1949:35" pos:end="1949:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="1949:49" pos:end="1949:52"><expr pos:start="1949:49" pos:end="1949:52"><name pos:start="1949:49" pos:end="1949:52">arg2</name></expr></argument>, <argument pos:start="1949:55" pos:end="1949:78"><expr pos:start="1949:55" pos:end="1949:78"><sizeof pos:start="1949:55" pos:end="1949:78">sizeof<argument_list pos:start="1949:61" pos:end="1949:78">(<argument pos:start="1949:62" pos:end="1949:77"><expr pos:start="1949:62" pos:end="1949:77"><name pos:start="1949:62" pos:end="1949:77">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                  <argument pos:start="1951:35" pos:end="1951:35"><expr pos:start="1951:35" pos:end="1951:35"><literal type="number" pos:start="1951:35" pos:end="1951:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1953:21" pos:end="1957:21"><if pos:start="1953:21" pos:end="1957:21">if <condition pos:start="1953:24" pos:end="1953:27">(<expr pos:start="1953:25" pos:end="1953:26"><operator pos:start="1953:25" pos:end="1953:25">!</operator><name pos:start="1953:26" pos:end="1953:26">p</name></expr>)</condition> <block pos:start="1953:29" pos:end="1957:21">{<block_content pos:start="1955:25" pos:end="1955:36">

                        <goto pos:start="1955:25" pos:end="1955:36">goto <name pos:start="1955:30" pos:end="1955:35">efault</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="1959:21" pos:end="1959:54"><expr pos:start="1959:21" pos:end="1959:53"><call pos:start="1959:21" pos:end="1959:53"><name pos:start="1959:21" pos:end="1959:42">host_to_target_siginfo</name><argument_list pos:start="1959:43" pos:end="1959:53">(<argument pos:start="1959:44" pos:end="1959:44"><expr pos:start="1959:44" pos:end="1959:44"><name pos:start="1959:44" pos:end="1959:44">p</name></expr></argument>, <argument pos:start="1959:47" pos:end="1959:52"><expr pos:start="1959:47" pos:end="1959:52"><operator pos:start="1959:47" pos:end="1959:47">&amp;</operator><name pos:start="1959:48" pos:end="1959:52">uinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1961:21" pos:end="1961:67"><expr pos:start="1961:21" pos:end="1961:66"><call pos:start="1961:21" pos:end="1961:66"><name pos:start="1961:21" pos:end="1961:31">unlock_user</name><argument_list pos:start="1961:32" pos:end="1961:66">(<argument pos:start="1961:33" pos:end="1961:33"><expr pos:start="1961:33" pos:end="1961:33"><name pos:start="1961:33" pos:end="1961:33">p</name></expr></argument>, <argument pos:start="1961:36" pos:end="1961:39"><expr pos:start="1961:36" pos:end="1961:39"><name pos:start="1961:36" pos:end="1961:39">arg2</name></expr></argument>, <argument pos:start="1961:42" pos:end="1961:65"><expr pos:start="1961:42" pos:end="1961:65"><sizeof pos:start="1961:42" pos:end="1961:65">sizeof<argument_list pos:start="1961:48" pos:end="1961:65">(<argument pos:start="1961:49" pos:end="1961:64"><expr pos:start="1961:49" pos:end="1961:64"><name pos:start="1961:49" pos:end="1961:64">target_siginfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1965:17" pos:end="1965:49"><expr pos:start="1965:17" pos:end="1965:48"><name pos:start="1965:17" pos:end="1965:19">ret</name> <operator pos:start="1965:21" pos:end="1965:21">=</operator> <call pos:start="1965:23" pos:end="1965:48"><name pos:start="1965:23" pos:end="1965:43">host_to_target_signal</name><argument_list pos:start="1965:44" pos:end="1965:48">(<argument pos:start="1965:45" pos:end="1965:47"><expr pos:start="1965:45" pos:end="1965:47"><name pos:start="1965:45" pos:end="1965:47">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1971:9" pos:end="1971:14">break;</break>

    <case pos:start="1973:5" pos:end="1973:35">case <expr pos:start="1973:10" pos:end="1973:34"><name pos:start="1973:10" pos:end="1973:34">TARGET_NR_rt_sigqueueinfo</name></expr>:</case>

        <block pos:start="1975:9" pos:end="1989:9">{<block_content pos:start="1977:13" pos:end="1987:69">

            <decl_stmt pos:start="1977:13" pos:end="1977:28"><decl pos:start="1977:13" pos:end="1977:27"><type pos:start="1977:13" pos:end="1977:21"><name pos:start="1977:13" pos:end="1977:21">siginfo_t</name></type> <name pos:start="1977:23" pos:end="1977:27">uinfo</name></decl>;</decl_stmt>

            <if_stmt pos:start="1979:13" pos:end="1981:28"><if pos:start="1979:13" pos:end="1981:28">if <condition pos:start="1979:16" pos:end="1979:80">(<expr pos:start="1979:17" pos:end="1979:79"><operator pos:start="1979:17" pos:end="1979:17">!</operator><operator pos:start="1979:18" pos:end="1979:18">(</operator><name pos:start="1979:19" pos:end="1979:19">p</name> <operator pos:start="1979:21" pos:end="1979:21">=</operator> <call pos:start="1979:23" pos:end="1979:78"><name pos:start="1979:23" pos:end="1979:31">lock_user</name><argument_list pos:start="1979:32" pos:end="1979:78">(<argument pos:start="1979:33" pos:end="1979:43"><expr pos:start="1979:33" pos:end="1979:43"><name pos:start="1979:33" pos:end="1979:43">VERIFY_READ</name></expr></argument>, <argument pos:start="1979:46" pos:end="1979:49"><expr pos:start="1979:46" pos:end="1979:49"><name pos:start="1979:46" pos:end="1979:49">arg3</name></expr></argument>, <argument pos:start="1979:52" pos:end="1979:74"><expr pos:start="1979:52" pos:end="1979:74"><sizeof pos:start="1979:52" pos:end="1979:74">sizeof<argument_list pos:start="1979:58" pos:end="1979:74">(<argument pos:start="1979:59" pos:end="1979:73"><expr pos:start="1979:59" pos:end="1979:73"><name pos:start="1979:59" pos:end="1979:73">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1979:77" pos:end="1979:77"><expr pos:start="1979:77" pos:end="1979:77"><literal type="number" pos:start="1979:77" pos:end="1979:77">1</literal></expr></argument>)</argument_list></call><operator pos:start="1979:79" pos:end="1979:79">)</operator></expr>)</condition><block type="pseudo" pos:start="1981:17" pos:end="1981:28"><block_content pos:start="1981:17" pos:end="1981:28">

                <goto pos:start="1981:17" pos:end="1981:28">goto <name pos:start="1981:22" pos:end="1981:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1983:13" pos:end="1983:46"><expr pos:start="1983:13" pos:end="1983:45"><call pos:start="1983:13" pos:end="1983:45"><name pos:start="1983:13" pos:end="1983:34">target_to_host_siginfo</name><argument_list pos:start="1983:35" pos:end="1983:45">(<argument pos:start="1983:36" pos:end="1983:41"><expr pos:start="1983:36" pos:end="1983:41"><operator pos:start="1983:36" pos:end="1983:36">&amp;</operator><name pos:start="1983:37" pos:end="1983:41">uinfo</name></expr></argument>, <argument pos:start="1983:44" pos:end="1983:44"><expr pos:start="1983:44" pos:end="1983:44"><name pos:start="1983:44" pos:end="1983:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1985:13" pos:end="1985:36"><expr pos:start="1985:13" pos:end="1985:35"><call pos:start="1985:13" pos:end="1985:35"><name pos:start="1985:13" pos:end="1985:23">unlock_user</name><argument_list pos:start="1985:24" pos:end="1985:35">(<argument pos:start="1985:25" pos:end="1985:25"><expr pos:start="1985:25" pos:end="1985:25"><name pos:start="1985:25" pos:end="1985:25">p</name></expr></argument>, <argument pos:start="1985:28" pos:end="1985:31"><expr pos:start="1985:28" pos:end="1985:31"><name pos:start="1985:28" pos:end="1985:31">arg1</name></expr></argument>, <argument pos:start="1985:34" pos:end="1985:34"><expr pos:start="1985:34" pos:end="1985:34"><literal type="number" pos:start="1985:34" pos:end="1985:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1987:13" pos:end="1987:69"><expr pos:start="1987:13" pos:end="1987:68"><name pos:start="1987:13" pos:end="1987:15">ret</name> <operator pos:start="1987:17" pos:end="1987:17">=</operator> <call pos:start="1987:19" pos:end="1987:68"><name pos:start="1987:19" pos:end="1987:27">get_errno</name><argument_list pos:start="1987:28" pos:end="1987:68">(<argument pos:start="1987:29" pos:end="1987:67"><expr pos:start="1987:29" pos:end="1987:67"><call pos:start="1987:29" pos:end="1987:67"><name pos:start="1987:29" pos:end="1987:47">sys_rt_sigqueueinfo</name><argument_list pos:start="1987:48" pos:end="1987:67">(<argument pos:start="1987:49" pos:end="1987:52"><expr pos:start="1987:49" pos:end="1987:52"><name pos:start="1987:49" pos:end="1987:52">arg1</name></expr></argument>, <argument pos:start="1987:55" pos:end="1987:58"><expr pos:start="1987:55" pos:end="1987:58"><name pos:start="1987:55" pos:end="1987:58">arg2</name></expr></argument>, <argument pos:start="1987:61" pos:end="1987:66"><expr pos:start="1987:61" pos:end="1987:66"><operator pos:start="1987:61" pos:end="1987:61">&amp;</operator><name pos:start="1987:62" pos:end="1987:66">uinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1991:9" pos:end="1994:0">break;</break>

<cpp:ifdef pos:start="1993:1" pos:end="1993:26">#<cpp:directive pos:start="1993:2" pos:end="1993:6">ifdef</cpp:directive> <name pos:start="1993:8" pos:end="1993:26">TARGET_NR_sigreturn</name></cpp:ifdef>

    <case pos:start="1995:5" pos:end="1995:29">case <expr pos:start="1995:10" pos:end="1995:28"><name pos:start="1995:10" pos:end="1995:28">TARGET_NR_sigreturn</name></expr>:</case>

        <comment type="block" pos:start="1997:9" pos:end="1997:63">/* NOTE: ret is eax, so not transcoding must be done */</comment>

        <expr_stmt pos:start="1999:9" pos:end="1999:36"><expr pos:start="1999:9" pos:end="1999:35"><name pos:start="1999:9" pos:end="1999:11">ret</name> <operator pos:start="1999:13" pos:end="1999:13">=</operator> <call pos:start="1999:15" pos:end="1999:35"><name pos:start="1999:15" pos:end="1999:26">do_sigreturn</name><argument_list pos:start="1999:27" pos:end="1999:35">(<argument pos:start="1999:28" pos:end="1999:34"><expr pos:start="1999:28" pos:end="1999:34"><name pos:start="1999:28" pos:end="1999:34">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2001:9" pos:end="2004:0">break;</break>

<cpp:endif pos:start="2003:1" pos:end="2003:6">#<cpp:directive pos:start="2003:2" pos:end="2003:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2005:5" pos:end="2005:32">case <expr pos:start="2005:10" pos:end="2005:31"><name pos:start="2005:10" pos:end="2005:31">TARGET_NR_rt_sigreturn</name></expr>:</case>

        <comment type="block" pos:start="2007:9" pos:end="2007:63">/* NOTE: ret is eax, so not transcoding must be done */</comment>

        <expr_stmt pos:start="2009:9" pos:end="2009:39"><expr pos:start="2009:9" pos:end="2009:38"><name pos:start="2009:9" pos:end="2009:11">ret</name> <operator pos:start="2009:13" pos:end="2009:13">=</operator> <call pos:start="2009:15" pos:end="2009:38"><name pos:start="2009:15" pos:end="2009:29">do_rt_sigreturn</name><argument_list pos:start="2009:30" pos:end="2009:38">(<argument pos:start="2009:31" pos:end="2009:37"><expr pos:start="2009:31" pos:end="2009:37"><name pos:start="2009:31" pos:end="2009:37">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2011:9" pos:end="2011:14">break;</break>

    <case pos:start="2013:5" pos:end="2013:31">case <expr pos:start="2013:10" pos:end="2013:30"><name pos:start="2013:10" pos:end="2013:30">TARGET_NR_sethostname</name></expr>:</case>

        <if_stmt pos:start="2015:9" pos:end="2017:24"><if pos:start="2015:9" pos:end="2017:24">if <condition pos:start="2015:12" pos:end="2015:42">(<expr pos:start="2015:13" pos:end="2015:41"><operator pos:start="2015:13" pos:end="2015:13">!</operator><operator pos:start="2015:14" pos:end="2015:14">(</operator><name pos:start="2015:15" pos:end="2015:15">p</name> <operator pos:start="2015:17" pos:end="2015:17">=</operator> <call pos:start="2015:19" pos:end="2015:40"><name pos:start="2015:19" pos:end="2015:34">lock_user_string</name><argument_list pos:start="2015:35" pos:end="2015:40">(<argument pos:start="2015:36" pos:end="2015:39"><expr pos:start="2015:36" pos:end="2015:39"><name pos:start="2015:36" pos:end="2015:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2015:41" pos:end="2015:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2017:13" pos:end="2017:24"><block_content pos:start="2017:13" pos:end="2017:24">

            <goto pos:start="2017:13" pos:end="2017:24">goto <name pos:start="2017:18" pos:end="2017:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2019:9" pos:end="2019:46"><expr pos:start="2019:9" pos:end="2019:45"><name pos:start="2019:9" pos:end="2019:11">ret</name> <operator pos:start="2019:13" pos:end="2019:13">=</operator> <call pos:start="2019:15" pos:end="2019:45"><name pos:start="2019:15" pos:end="2019:23">get_errno</name><argument_list pos:start="2019:24" pos:end="2019:45">(<argument pos:start="2019:25" pos:end="2019:44"><expr pos:start="2019:25" pos:end="2019:44"><call pos:start="2019:25" pos:end="2019:44"><name pos:start="2019:25" pos:end="2019:35">sethostname</name><argument_list pos:start="2019:36" pos:end="2019:44">(<argument pos:start="2019:37" pos:end="2019:37"><expr pos:start="2019:37" pos:end="2019:37"><name pos:start="2019:37" pos:end="2019:37">p</name></expr></argument>, <argument pos:start="2019:40" pos:end="2019:43"><expr pos:start="2019:40" pos:end="2019:43"><name pos:start="2019:40" pos:end="2019:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2021:9" pos:end="2021:32"><expr pos:start="2021:9" pos:end="2021:31"><call pos:start="2021:9" pos:end="2021:31"><name pos:start="2021:9" pos:end="2021:19">unlock_user</name><argument_list pos:start="2021:20" pos:end="2021:31">(<argument pos:start="2021:21" pos:end="2021:21"><expr pos:start="2021:21" pos:end="2021:21"><name pos:start="2021:21" pos:end="2021:21">p</name></expr></argument>, <argument pos:start="2021:24" pos:end="2021:27"><expr pos:start="2021:24" pos:end="2021:27"><name pos:start="2021:24" pos:end="2021:27">arg1</name></expr></argument>, <argument pos:start="2021:30" pos:end="2021:30"><expr pos:start="2021:30" pos:end="2021:30"><literal type="number" pos:start="2021:30" pos:end="2021:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2023:9" pos:end="2023:14">break;</break>

    <case pos:start="2025:5" pos:end="2025:29">case <expr pos:start="2025:10" pos:end="2025:28"><name pos:start="2025:10" pos:end="2025:28">TARGET_NR_setrlimit</name></expr>:</case>

        <block pos:start="2027:9" pos:end="2047:9">{<block_content pos:start="2029:13" pos:end="2045:56">

            <decl_stmt pos:start="2029:13" pos:end="2029:57"><decl pos:start="2029:13" pos:end="2029:56"><type pos:start="2029:13" pos:end="2029:15"><name pos:start="2029:13" pos:end="2029:15">int</name></type> <name pos:start="2029:17" pos:end="2029:24">resource</name> <init pos:start="2029:26" pos:end="2029:56">= <expr pos:start="2029:28" pos:end="2029:56"><call pos:start="2029:28" pos:end="2029:56"><name pos:start="2029:28" pos:end="2029:50">target_to_host_resource</name><argument_list pos:start="2029:51" pos:end="2029:56">(<argument pos:start="2029:52" pos:end="2029:55"><expr pos:start="2029:52" pos:end="2029:55"><name pos:start="2029:52" pos:end="2029:55">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="2031:13" pos:end="2031:46"><decl pos:start="2031:13" pos:end="2031:45"><type pos:start="2031:13" pos:end="2031:34"><name pos:start="2031:13" pos:end="2031:32"><name pos:start="2031:13" pos:end="2031:18">struct</name> <name pos:start="2031:20" pos:end="2031:32">target_rlimit</name></name> <modifier pos:start="2031:34" pos:end="2031:34">*</modifier></type><name pos:start="2031:35" pos:end="2031:45">target_rlim</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2033:13" pos:end="2033:31"><decl pos:start="2033:13" pos:end="2033:30"><type pos:start="2033:13" pos:end="2033:25"><name pos:start="2033:13" pos:end="2033:25"><name pos:start="2033:13" pos:end="2033:18">struct</name> <name pos:start="2033:20" pos:end="2033:25">rlimit</name></name></type> <name pos:start="2033:27" pos:end="2033:30">rlim</name></decl>;</decl_stmt>

            <if_stmt pos:start="2035:13" pos:end="2037:28"><if pos:start="2035:13" pos:end="2037:28">if <condition pos:start="2035:16" pos:end="2035:69">(<expr pos:start="2035:17" pos:end="2035:68"><operator pos:start="2035:17" pos:end="2035:17">!</operator><call pos:start="2035:18" pos:end="2035:68"><name pos:start="2035:18" pos:end="2035:33">lock_user_struct</name><argument_list pos:start="2035:34" pos:end="2035:68">(<argument pos:start="2035:35" pos:end="2035:45"><expr pos:start="2035:35" pos:end="2035:45"><name pos:start="2035:35" pos:end="2035:45">VERIFY_READ</name></expr></argument>, <argument pos:start="2035:48" pos:end="2035:58"><expr pos:start="2035:48" pos:end="2035:58"><name pos:start="2035:48" pos:end="2035:58">target_rlim</name></expr></argument>, <argument pos:start="2035:61" pos:end="2035:64"><expr pos:start="2035:61" pos:end="2035:64"><name pos:start="2035:61" pos:end="2035:64">arg2</name></expr></argument>, <argument pos:start="2035:67" pos:end="2035:67"><expr pos:start="2035:67" pos:end="2035:67"><literal type="number" pos:start="2035:67" pos:end="2035:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2037:17" pos:end="2037:28"><block_content pos:start="2037:17" pos:end="2037:28">

                <goto pos:start="2037:17" pos:end="2037:28">goto <name pos:start="2037:22" pos:end="2037:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2039:13" pos:end="2039:71"><expr pos:start="2039:13" pos:end="2039:70"><name pos:start="2039:13" pos:end="2039:25"><name pos:start="2039:13" pos:end="2039:16">rlim</name><operator pos:start="2039:17" pos:end="2039:17">.</operator><name pos:start="2039:18" pos:end="2039:25">rlim_cur</name></name> <operator pos:start="2039:27" pos:end="2039:27">=</operator> <call pos:start="2039:29" pos:end="2039:70"><name pos:start="2039:29" pos:end="2039:47">target_to_host_rlim</name><argument_list pos:start="2039:48" pos:end="2039:70">(<argument pos:start="2039:49" pos:end="2039:69"><expr pos:start="2039:49" pos:end="2039:69"><name pos:start="2039:49" pos:end="2039:69"><name pos:start="2039:49" pos:end="2039:59">target_rlim</name><operator pos:start="2039:60" pos:end="2039:61">-&gt;</operator><name pos:start="2039:62" pos:end="2039:69">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2041:13" pos:end="2041:71"><expr pos:start="2041:13" pos:end="2041:70"><name pos:start="2041:13" pos:end="2041:25"><name pos:start="2041:13" pos:end="2041:16">rlim</name><operator pos:start="2041:17" pos:end="2041:17">.</operator><name pos:start="2041:18" pos:end="2041:25">rlim_max</name></name> <operator pos:start="2041:27" pos:end="2041:27">=</operator> <call pos:start="2041:29" pos:end="2041:70"><name pos:start="2041:29" pos:end="2041:47">target_to_host_rlim</name><argument_list pos:start="2041:48" pos:end="2041:70">(<argument pos:start="2041:49" pos:end="2041:69"><expr pos:start="2041:49" pos:end="2041:69"><name pos:start="2041:49" pos:end="2041:69"><name pos:start="2041:49" pos:end="2041:59">target_rlim</name><operator pos:start="2041:60" pos:end="2041:61">-&gt;</operator><name pos:start="2041:62" pos:end="2041:69">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2043:13" pos:end="2043:53"><expr pos:start="2043:13" pos:end="2043:52"><call pos:start="2043:13" pos:end="2043:52"><name pos:start="2043:13" pos:end="2043:30">unlock_user_struct</name><argument_list pos:start="2043:31" pos:end="2043:52">(<argument pos:start="2043:32" pos:end="2043:42"><expr pos:start="2043:32" pos:end="2043:42"><name pos:start="2043:32" pos:end="2043:42">target_rlim</name></expr></argument>, <argument pos:start="2043:45" pos:end="2043:48"><expr pos:start="2043:45" pos:end="2043:48"><name pos:start="2043:45" pos:end="2043:48">arg2</name></expr></argument>, <argument pos:start="2043:51" pos:end="2043:51"><expr pos:start="2043:51" pos:end="2043:51"><literal type="number" pos:start="2043:51" pos:end="2043:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2045:13" pos:end="2045:56"><expr pos:start="2045:13" pos:end="2045:55"><name pos:start="2045:13" pos:end="2045:15">ret</name> <operator pos:start="2045:17" pos:end="2045:17">=</operator> <call pos:start="2045:19" pos:end="2045:55"><name pos:start="2045:19" pos:end="2045:27">get_errno</name><argument_list pos:start="2045:28" pos:end="2045:55">(<argument pos:start="2045:29" pos:end="2045:54"><expr pos:start="2045:29" pos:end="2045:54"><call pos:start="2045:29" pos:end="2045:54"><name pos:start="2045:29" pos:end="2045:37">setrlimit</name><argument_list pos:start="2045:38" pos:end="2045:54">(<argument pos:start="2045:39" pos:end="2045:46"><expr pos:start="2045:39" pos:end="2045:46"><name pos:start="2045:39" pos:end="2045:46">resource</name></expr></argument>, <argument pos:start="2045:49" pos:end="2045:53"><expr pos:start="2045:49" pos:end="2045:53"><operator pos:start="2045:49" pos:end="2045:49">&amp;</operator><name pos:start="2045:50" pos:end="2045:53">rlim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2049:9" pos:end="2049:14">break;</break>

    <case pos:start="2051:5" pos:end="2051:29">case <expr pos:start="2051:10" pos:end="2051:28"><name pos:start="2051:10" pos:end="2051:28">TARGET_NR_getrlimit</name></expr>:</case>

        <block pos:start="2053:9" pos:end="2079:9">{<block_content pos:start="2055:13" pos:end="2077:13">

            <decl_stmt pos:start="2055:13" pos:end="2055:57"><decl pos:start="2055:13" pos:end="2055:56"><type pos:start="2055:13" pos:end="2055:15"><name pos:start="2055:13" pos:end="2055:15">int</name></type> <name pos:start="2055:17" pos:end="2055:24">resource</name> <init pos:start="2055:26" pos:end="2055:56">= <expr pos:start="2055:28" pos:end="2055:56"><call pos:start="2055:28" pos:end="2055:56"><name pos:start="2055:28" pos:end="2055:50">target_to_host_resource</name><argument_list pos:start="2055:51" pos:end="2055:56">(<argument pos:start="2055:52" pos:end="2055:55"><expr pos:start="2055:52" pos:end="2055:55"><name pos:start="2055:52" pos:end="2055:55">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="2057:13" pos:end="2057:46"><decl pos:start="2057:13" pos:end="2057:45"><type pos:start="2057:13" pos:end="2057:34"><name pos:start="2057:13" pos:end="2057:32"><name pos:start="2057:13" pos:end="2057:18">struct</name> <name pos:start="2057:20" pos:end="2057:32">target_rlimit</name></name> <modifier pos:start="2057:34" pos:end="2057:34">*</modifier></type><name pos:start="2057:35" pos:end="2057:45">target_rlim</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2059:13" pos:end="2059:31"><decl pos:start="2059:13" pos:end="2059:30"><type pos:start="2059:13" pos:end="2059:25"><name pos:start="2059:13" pos:end="2059:25"><name pos:start="2059:13" pos:end="2059:18">struct</name> <name pos:start="2059:20" pos:end="2059:25">rlimit</name></name></type> <name pos:start="2059:27" pos:end="2059:30">rlim</name></decl>;</decl_stmt>



            <expr_stmt pos:start="2063:13" pos:end="2063:56"><expr pos:start="2063:13" pos:end="2063:55"><name pos:start="2063:13" pos:end="2063:15">ret</name> <operator pos:start="2063:17" pos:end="2063:17">=</operator> <call pos:start="2063:19" pos:end="2063:55"><name pos:start="2063:19" pos:end="2063:27">get_errno</name><argument_list pos:start="2063:28" pos:end="2063:55">(<argument pos:start="2063:29" pos:end="2063:54"><expr pos:start="2063:29" pos:end="2063:54"><call pos:start="2063:29" pos:end="2063:54"><name pos:start="2063:29" pos:end="2063:37">getrlimit</name><argument_list pos:start="2063:38" pos:end="2063:54">(<argument pos:start="2063:39" pos:end="2063:46"><expr pos:start="2063:39" pos:end="2063:46"><name pos:start="2063:39" pos:end="2063:46">resource</name></expr></argument>, <argument pos:start="2063:49" pos:end="2063:53"><expr pos:start="2063:49" pos:end="2063:53"><operator pos:start="2063:49" pos:end="2063:49">&amp;</operator><name pos:start="2063:50" pos:end="2063:53">rlim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2065:13" pos:end="2077:13"><if pos:start="2065:13" pos:end="2077:13">if <condition pos:start="2065:16" pos:end="2065:31">(<expr pos:start="2065:17" pos:end="2065:30"><operator pos:start="2065:17" pos:end="2065:17">!</operator><call pos:start="2065:18" pos:end="2065:30"><name pos:start="2065:18" pos:end="2065:25">is_error</name><argument_list pos:start="2065:26" pos:end="2065:30">(<argument pos:start="2065:27" pos:end="2065:29"><expr pos:start="2065:27" pos:end="2065:29"><name pos:start="2065:27" pos:end="2065:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2065:33" pos:end="2077:13">{<block_content pos:start="2067:17" pos:end="2075:57">

                <if_stmt pos:start="2067:17" pos:end="2069:32"><if pos:start="2067:17" pos:end="2069:32">if <condition pos:start="2067:20" pos:end="2067:74">(<expr pos:start="2067:21" pos:end="2067:73"><operator pos:start="2067:21" pos:end="2067:21">!</operator><call pos:start="2067:22" pos:end="2067:73"><name pos:start="2067:22" pos:end="2067:37">lock_user_struct</name><argument_list pos:start="2067:38" pos:end="2067:73">(<argument pos:start="2067:39" pos:end="2067:50"><expr pos:start="2067:39" pos:end="2067:50"><name pos:start="2067:39" pos:end="2067:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2067:53" pos:end="2067:63"><expr pos:start="2067:53" pos:end="2067:63"><name pos:start="2067:53" pos:end="2067:63">target_rlim</name></expr></argument>, <argument pos:start="2067:66" pos:end="2067:69"><expr pos:start="2067:66" pos:end="2067:69"><name pos:start="2067:66" pos:end="2067:69">arg2</name></expr></argument>, <argument pos:start="2067:72" pos:end="2067:72"><expr pos:start="2067:72" pos:end="2067:72"><literal type="number" pos:start="2067:72" pos:end="2067:72">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2069:21" pos:end="2069:32"><block_content pos:start="2069:21" pos:end="2069:32">

                    <goto pos:start="2069:21" pos:end="2069:32">goto <name pos:start="2069:26" pos:end="2069:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="2071:17" pos:end="2071:75"><expr pos:start="2071:17" pos:end="2071:74"><name pos:start="2071:17" pos:end="2071:37"><name pos:start="2071:17" pos:end="2071:27">target_rlim</name><operator pos:start="2071:28" pos:end="2071:29">-&gt;</operator><name pos:start="2071:30" pos:end="2071:37">rlim_cur</name></name> <operator pos:start="2071:39" pos:end="2071:39">=</operator> <call pos:start="2071:41" pos:end="2071:74"><name pos:start="2071:41" pos:end="2071:59">host_to_target_rlim</name><argument_list pos:start="2071:60" pos:end="2071:74">(<argument pos:start="2071:61" pos:end="2071:73"><expr pos:start="2071:61" pos:end="2071:73"><name pos:start="2071:61" pos:end="2071:73"><name pos:start="2071:61" pos:end="2071:64">rlim</name><operator pos:start="2071:65" pos:end="2071:65">.</operator><name pos:start="2071:66" pos:end="2071:73">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2073:17" pos:end="2073:75"><expr pos:start="2073:17" pos:end="2073:74"><name pos:start="2073:17" pos:end="2073:37"><name pos:start="2073:17" pos:end="2073:27">target_rlim</name><operator pos:start="2073:28" pos:end="2073:29">-&gt;</operator><name pos:start="2073:30" pos:end="2073:37">rlim_max</name></name> <operator pos:start="2073:39" pos:end="2073:39">=</operator> <call pos:start="2073:41" pos:end="2073:74"><name pos:start="2073:41" pos:end="2073:59">host_to_target_rlim</name><argument_list pos:start="2073:60" pos:end="2073:74">(<argument pos:start="2073:61" pos:end="2073:73"><expr pos:start="2073:61" pos:end="2073:73"><name pos:start="2073:61" pos:end="2073:73"><name pos:start="2073:61" pos:end="2073:64">rlim</name><operator pos:start="2073:65" pos:end="2073:65">.</operator><name pos:start="2073:66" pos:end="2073:73">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2075:17" pos:end="2075:57"><expr pos:start="2075:17" pos:end="2075:56"><call pos:start="2075:17" pos:end="2075:56"><name pos:start="2075:17" pos:end="2075:34">unlock_user_struct</name><argument_list pos:start="2075:35" pos:end="2075:56">(<argument pos:start="2075:36" pos:end="2075:46"><expr pos:start="2075:36" pos:end="2075:46"><name pos:start="2075:36" pos:end="2075:46">target_rlim</name></expr></argument>, <argument pos:start="2075:49" pos:end="2075:52"><expr pos:start="2075:49" pos:end="2075:52"><name pos:start="2075:49" pos:end="2075:52">arg2</name></expr></argument>, <argument pos:start="2075:55" pos:end="2075:55"><expr pos:start="2075:55" pos:end="2075:55"><literal type="number" pos:start="2075:55" pos:end="2075:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="2081:9" pos:end="2081:14">break;</break>

    <case pos:start="2083:5" pos:end="2083:29">case <expr pos:start="2083:10" pos:end="2083:28"><name pos:start="2083:10" pos:end="2083:28">TARGET_NR_getrusage</name></expr>:</case>

        <block pos:start="2085:9" pos:end="2097:9">{<block_content pos:start="2087:13" pos:end="2095:13">

            <decl_stmt pos:start="2087:13" pos:end="2087:33"><decl pos:start="2087:13" pos:end="2087:32"><type pos:start="2087:13" pos:end="2087:25"><name pos:start="2087:13" pos:end="2087:25"><name pos:start="2087:13" pos:end="2087:18">struct</name> <name pos:start="2087:20" pos:end="2087:25">rusage</name></name></type> <name pos:start="2087:27" pos:end="2087:32">rusage</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2089:13" pos:end="2089:54"><expr pos:start="2089:13" pos:end="2089:53"><name pos:start="2089:13" pos:end="2089:15">ret</name> <operator pos:start="2089:17" pos:end="2089:17">=</operator> <call pos:start="2089:19" pos:end="2089:53"><name pos:start="2089:19" pos:end="2089:27">get_errno</name><argument_list pos:start="2089:28" pos:end="2089:53">(<argument pos:start="2089:29" pos:end="2089:52"><expr pos:start="2089:29" pos:end="2089:52"><call pos:start="2089:29" pos:end="2089:52"><name pos:start="2089:29" pos:end="2089:37">getrusage</name><argument_list pos:start="2089:38" pos:end="2089:52">(<argument pos:start="2089:39" pos:end="2089:42"><expr pos:start="2089:39" pos:end="2089:42"><name pos:start="2089:39" pos:end="2089:42">arg1</name></expr></argument>, <argument pos:start="2089:45" pos:end="2089:51"><expr pos:start="2089:45" pos:end="2089:51"><operator pos:start="2089:45" pos:end="2089:45">&amp;</operator><name pos:start="2089:46" pos:end="2089:51">rusage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2091:13" pos:end="2095:13"><if pos:start="2091:13" pos:end="2095:13">if <condition pos:start="2091:16" pos:end="2091:31">(<expr pos:start="2091:17" pos:end="2091:30"><operator pos:start="2091:17" pos:end="2091:17">!</operator><call pos:start="2091:18" pos:end="2091:30"><name pos:start="2091:18" pos:end="2091:25">is_error</name><argument_list pos:start="2091:26" pos:end="2091:30">(<argument pos:start="2091:27" pos:end="2091:29"><expr pos:start="2091:27" pos:end="2091:29"><name pos:start="2091:27" pos:end="2091:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2091:33" pos:end="2095:13">{<block_content pos:start="2093:17" pos:end="2093:53">

                <expr_stmt pos:start="2093:17" pos:end="2093:53"><expr pos:start="2093:17" pos:end="2093:52"><call pos:start="2093:17" pos:end="2093:52"><name pos:start="2093:17" pos:end="2093:37">host_to_target_rusage</name><argument_list pos:start="2093:38" pos:end="2093:52">(<argument pos:start="2093:39" pos:end="2093:42"><expr pos:start="2093:39" pos:end="2093:42"><name pos:start="2093:39" pos:end="2093:42">arg2</name></expr></argument>, <argument pos:start="2093:45" pos:end="2093:51"><expr pos:start="2093:45" pos:end="2093:51"><operator pos:start="2093:45" pos:end="2093:45">&amp;</operator><name pos:start="2093:46" pos:end="2093:51">rusage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="2099:9" pos:end="2099:14">break;</break>

    <case pos:start="2101:5" pos:end="2101:32">case <expr pos:start="2101:10" pos:end="2101:31"><name pos:start="2101:10" pos:end="2101:31">TARGET_NR_gettimeofday</name></expr>:</case>

        <block pos:start="2103:9" pos:end="2117:9">{<block_content pos:start="2105:13" pos:end="2115:13">

            <decl_stmt pos:start="2105:13" pos:end="2105:30"><decl pos:start="2105:13" pos:end="2105:29"><type pos:start="2105:13" pos:end="2105:26"><name pos:start="2105:13" pos:end="2105:26"><name pos:start="2105:13" pos:end="2105:18">struct</name> <name pos:start="2105:20" pos:end="2105:26">timeval</name></name></type> <name pos:start="2105:28" pos:end="2105:29">tv</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2107:13" pos:end="2107:53"><expr pos:start="2107:13" pos:end="2107:52"><name pos:start="2107:13" pos:end="2107:15">ret</name> <operator pos:start="2107:17" pos:end="2107:17">=</operator> <call pos:start="2107:19" pos:end="2107:52"><name pos:start="2107:19" pos:end="2107:27">get_errno</name><argument_list pos:start="2107:28" pos:end="2107:52">(<argument pos:start="2107:29" pos:end="2107:51"><expr pos:start="2107:29" pos:end="2107:51"><call pos:start="2107:29" pos:end="2107:51"><name pos:start="2107:29" pos:end="2107:40">gettimeofday</name><argument_list pos:start="2107:41" pos:end="2107:51">(<argument pos:start="2107:42" pos:end="2107:44"><expr pos:start="2107:42" pos:end="2107:44"><operator pos:start="2107:42" pos:end="2107:42">&amp;</operator><name pos:start="2107:43" pos:end="2107:44">tv</name></expr></argument>, <argument pos:start="2107:47" pos:end="2107:50"><expr pos:start="2107:47" pos:end="2107:50"><name pos:start="2107:47" pos:end="2107:50">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2109:13" pos:end="2115:13"><if pos:start="2109:13" pos:end="2115:13">if <condition pos:start="2109:16" pos:end="2109:31">(<expr pos:start="2109:17" pos:end="2109:30"><operator pos:start="2109:17" pos:end="2109:17">!</operator><call pos:start="2109:18" pos:end="2109:30"><name pos:start="2109:18" pos:end="2109:25">is_error</name><argument_list pos:start="2109:26" pos:end="2109:30">(<argument pos:start="2109:27" pos:end="2109:29"><expr pos:start="2109:27" pos:end="2109:29"><name pos:start="2109:27" pos:end="2109:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2109:33" pos:end="2115:13">{<block_content pos:start="2111:17" pos:end="2113:32">

                <if_stmt pos:start="2111:17" pos:end="2113:32"><if pos:start="2111:17" pos:end="2113:32">if <condition pos:start="2111:20" pos:end="2111:52">(<expr pos:start="2111:21" pos:end="2111:51"><call pos:start="2111:21" pos:end="2111:51"><name pos:start="2111:21" pos:end="2111:40">copy_to_user_timeval</name><argument_list pos:start="2111:41" pos:end="2111:51">(<argument pos:start="2111:42" pos:end="2111:45"><expr pos:start="2111:42" pos:end="2111:45"><name pos:start="2111:42" pos:end="2111:45">arg1</name></expr></argument>, <argument pos:start="2111:48" pos:end="2111:50"><expr pos:start="2111:48" pos:end="2111:50"><operator pos:start="2111:48" pos:end="2111:48">&amp;</operator><name pos:start="2111:49" pos:end="2111:50">tv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2113:21" pos:end="2113:32"><block_content pos:start="2113:21" pos:end="2113:32">

                    <goto pos:start="2113:21" pos:end="2113:32">goto <name pos:start="2113:26" pos:end="2113:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="2119:9" pos:end="2119:14">break;</break>

    <case pos:start="2121:5" pos:end="2121:32">case <expr pos:start="2121:10" pos:end="2121:31"><name pos:start="2121:10" pos:end="2121:31">TARGET_NR_settimeofday</name></expr>:</case>

        <block pos:start="2123:9" pos:end="2133:9">{<block_content pos:start="2125:13" pos:end="2131:53">

            <decl_stmt pos:start="2125:13" pos:end="2125:30"><decl pos:start="2125:13" pos:end="2125:29"><type pos:start="2125:13" pos:end="2125:26"><name pos:start="2125:13" pos:end="2125:26"><name pos:start="2125:13" pos:end="2125:18">struct</name> <name pos:start="2125:20" pos:end="2125:26">timeval</name></name></type> <name pos:start="2125:28" pos:end="2125:29">tv</name></decl>;</decl_stmt>

            <if_stmt pos:start="2127:13" pos:end="2129:28"><if pos:start="2127:13" pos:end="2129:28">if <condition pos:start="2127:16" pos:end="2127:50">(<expr pos:start="2127:17" pos:end="2127:49"><call pos:start="2127:17" pos:end="2127:49"><name pos:start="2127:17" pos:end="2127:38">copy_from_user_timeval</name><argument_list pos:start="2127:39" pos:end="2127:49">(<argument pos:start="2127:40" pos:end="2127:42"><expr pos:start="2127:40" pos:end="2127:42"><operator pos:start="2127:40" pos:end="2127:40">&amp;</operator><name pos:start="2127:41" pos:end="2127:42">tv</name></expr></argument>, <argument pos:start="2127:45" pos:end="2127:48"><expr pos:start="2127:45" pos:end="2127:48"><name pos:start="2127:45" pos:end="2127:48">arg1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2129:17" pos:end="2129:28"><block_content pos:start="2129:17" pos:end="2129:28">

                <goto pos:start="2129:17" pos:end="2129:28">goto <name pos:start="2129:22" pos:end="2129:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2131:13" pos:end="2131:53"><expr pos:start="2131:13" pos:end="2131:52"><name pos:start="2131:13" pos:end="2131:15">ret</name> <operator pos:start="2131:17" pos:end="2131:17">=</operator> <call pos:start="2131:19" pos:end="2131:52"><name pos:start="2131:19" pos:end="2131:27">get_errno</name><argument_list pos:start="2131:28" pos:end="2131:52">(<argument pos:start="2131:29" pos:end="2131:51"><expr pos:start="2131:29" pos:end="2131:51"><call pos:start="2131:29" pos:end="2131:51"><name pos:start="2131:29" pos:end="2131:40">settimeofday</name><argument_list pos:start="2131:41" pos:end="2131:51">(<argument pos:start="2131:42" pos:end="2131:44"><expr pos:start="2131:42" pos:end="2131:44"><operator pos:start="2131:42" pos:end="2131:42">&amp;</operator><name pos:start="2131:43" pos:end="2131:44">tv</name></expr></argument>, <argument pos:start="2131:47" pos:end="2131:50"><expr pos:start="2131:47" pos:end="2131:50"><name pos:start="2131:47" pos:end="2131:50">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2135:9" pos:end="2138:0">break;</break>

<cpp:if pos:start="2137:1" pos:end="2137:29">#<cpp:directive pos:start="2137:2" pos:end="2137:3">if</cpp:directive> <expr pos:start="2137:5" pos:end="2137:29"><call pos:start="2137:5" pos:end="2137:29"><name pos:start="2137:5" pos:end="2137:11">defined</name><argument_list pos:start="2137:12" pos:end="2137:29">(<argument pos:start="2137:13" pos:end="2137:28"><expr pos:start="2137:13" pos:end="2137:28"><name pos:start="2137:13" pos:end="2137:28">TARGET_NR_select</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="2139:5" pos:end="2142:0">case <expr pos:start="2139:10" pos:end="2139:25"><name pos:start="2139:10" pos:end="2139:25">TARGET_NR_select</name></expr>:</case>

<cpp:if pos:start="2141:1" pos:end="2141:50">#<cpp:directive pos:start="2141:2" pos:end="2141:3">if</cpp:directive> <expr pos:start="2141:5" pos:end="2141:50"><call pos:start="2141:5" pos:end="2141:25"><name pos:start="2141:5" pos:end="2141:11">defined</name><argument_list pos:start="2141:12" pos:end="2141:25">(<argument pos:start="2141:13" pos:end="2141:24"><expr pos:start="2141:13" pos:end="2141:24"><name pos:start="2141:13" pos:end="2141:24">TARGET_S390X</name></expr></argument>)</argument_list></call> <operator pos:start="2141:27" pos:end="2141:28">||</operator> <call pos:start="2141:30" pos:end="2141:50"><name pos:start="2141:30" pos:end="2141:36">defined</name><argument_list pos:start="2141:37" pos:end="2141:50">(<argument pos:start="2141:38" pos:end="2141:49"><expr pos:start="2141:38" pos:end="2141:49"><name pos:start="2141:38" pos:end="2141:49">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="2143:9" pos:end="2146:0"><expr pos:start="2143:9" pos:end="2143:53"><name pos:start="2143:9" pos:end="2143:11">ret</name> <operator pos:start="2143:13" pos:end="2143:13">=</operator> <call pos:start="2143:15" pos:end="2143:53"><name pos:start="2143:15" pos:end="2143:23">do_select</name><argument_list pos:start="2143:24" pos:end="2143:53">(<argument pos:start="2143:25" pos:end="2143:28"><expr pos:start="2143:25" pos:end="2143:28"><name pos:start="2143:25" pos:end="2143:28">arg1</name></expr></argument>, <argument pos:start="2143:31" pos:end="2143:34"><expr pos:start="2143:31" pos:end="2143:34"><name pos:start="2143:31" pos:end="2143:34">arg2</name></expr></argument>, <argument pos:start="2143:37" pos:end="2143:40"><expr pos:start="2143:37" pos:end="2143:40"><name pos:start="2143:37" pos:end="2143:40">arg3</name></expr></argument>, <argument pos:start="2143:43" pos:end="2143:46"><expr pos:start="2143:43" pos:end="2143:46"><name pos:start="2143:43" pos:end="2143:46">arg4</name></expr></argument>, <argument pos:start="2143:49" pos:end="2143:52"><expr pos:start="2143:49" pos:end="2143:52"><name pos:start="2143:49" pos:end="2143:52">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="2145:1" pos:end="2145:5">#<cpp:directive pos:start="2145:2" pos:end="2145:5">else</cpp:directive></cpp:else>

        <block pos:start="2147:9" pos:end="2178:0">{<block_content pos:start="2149:13" pos:end="2173:55">

            <decl_stmt pos:start="2149:13" pos:end="2149:46"><decl pos:start="2149:13" pos:end="2149:45"><type pos:start="2149:13" pos:end="2149:42"><name pos:start="2149:13" pos:end="2149:40"><name pos:start="2149:13" pos:end="2149:18">struct</name> <name pos:start="2149:20" pos:end="2149:40">target_sel_arg_struct</name></name> <modifier pos:start="2149:42" pos:end="2149:42">*</modifier></type><name pos:start="2149:43" pos:end="2149:45">sel</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2151:13" pos:end="2151:42"><decl pos:start="2151:13" pos:end="2151:25"><type pos:start="2151:13" pos:end="2151:21"><name pos:start="2151:13" pos:end="2151:21">abi_ulong</name></type> <name pos:start="2151:23" pos:end="2151:25">inp</name></decl>, <decl pos:start="2151:28" pos:end="2151:31"><type ref="prev" pos:start="2151:13" pos:end="2151:21"/><name pos:start="2151:28" pos:end="2151:31">outp</name></decl>, <decl pos:start="2151:34" pos:end="2151:36"><type ref="prev" pos:start="2151:13" pos:end="2151:21"/><name pos:start="2151:34" pos:end="2151:36">exp</name></decl>, <decl pos:start="2151:39" pos:end="2151:41"><type ref="prev" pos:start="2151:13" pos:end="2151:21"/><name pos:start="2151:39" pos:end="2151:41">tvp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2153:13" pos:end="2153:22"><decl pos:start="2153:13" pos:end="2153:21"><type pos:start="2153:13" pos:end="2153:16"><name pos:start="2153:13" pos:end="2153:16">long</name></type> <name pos:start="2153:18" pos:end="2153:21">nsel</name></decl>;</decl_stmt>



            <if_stmt pos:start="2157:13" pos:end="2159:28"><if pos:start="2157:13" pos:end="2159:28">if <condition pos:start="2157:16" pos:end="2157:61">(<expr pos:start="2157:17" pos:end="2157:60"><operator pos:start="2157:17" pos:end="2157:17">!</operator><call pos:start="2157:18" pos:end="2157:60"><name pos:start="2157:18" pos:end="2157:33">lock_user_struct</name><argument_list pos:start="2157:34" pos:end="2157:60">(<argument pos:start="2157:35" pos:end="2157:45"><expr pos:start="2157:35" pos:end="2157:45"><name pos:start="2157:35" pos:end="2157:45">VERIFY_READ</name></expr></argument>, <argument pos:start="2157:48" pos:end="2157:50"><expr pos:start="2157:48" pos:end="2157:50"><name pos:start="2157:48" pos:end="2157:50">sel</name></expr></argument>, <argument pos:start="2157:53" pos:end="2157:56"><expr pos:start="2157:53" pos:end="2157:56"><name pos:start="2157:53" pos:end="2157:56">arg1</name></expr></argument>, <argument pos:start="2157:59" pos:end="2157:59"><expr pos:start="2157:59" pos:end="2157:59"><literal type="number" pos:start="2157:59" pos:end="2157:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2159:17" pos:end="2159:28"><block_content pos:start="2159:17" pos:end="2159:28">

                <goto pos:start="2159:17" pos:end="2159:28">goto <name pos:start="2159:22" pos:end="2159:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2161:13" pos:end="2161:35"><expr pos:start="2161:13" pos:end="2161:34"><name pos:start="2161:13" pos:end="2161:16">nsel</name> <operator pos:start="2161:18" pos:end="2161:18">=</operator> <call pos:start="2161:20" pos:end="2161:34"><name pos:start="2161:20" pos:end="2161:26">tswapal</name><argument_list pos:start="2161:27" pos:end="2161:34">(<argument pos:start="2161:28" pos:end="2161:33"><expr pos:start="2161:28" pos:end="2161:33"><name pos:start="2161:28" pos:end="2161:33"><name pos:start="2161:28" pos:end="2161:30">sel</name><operator pos:start="2161:31" pos:end="2161:32">-&gt;</operator><name pos:start="2161:33" pos:end="2161:33">n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2163:13" pos:end="2163:36"><expr pos:start="2163:13" pos:end="2163:35"><name pos:start="2163:13" pos:end="2163:15">inp</name> <operator pos:start="2163:17" pos:end="2163:17">=</operator> <call pos:start="2163:19" pos:end="2163:35"><name pos:start="2163:19" pos:end="2163:25">tswapal</name><argument_list pos:start="2163:26" pos:end="2163:35">(<argument pos:start="2163:27" pos:end="2163:34"><expr pos:start="2163:27" pos:end="2163:34"><name pos:start="2163:27" pos:end="2163:34"><name pos:start="2163:27" pos:end="2163:29">sel</name><operator pos:start="2163:30" pos:end="2163:31">-&gt;</operator><name pos:start="2163:32" pos:end="2163:34">inp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2165:13" pos:end="2165:38"><expr pos:start="2165:13" pos:end="2165:37"><name pos:start="2165:13" pos:end="2165:16">outp</name> <operator pos:start="2165:18" pos:end="2165:18">=</operator> <call pos:start="2165:20" pos:end="2165:37"><name pos:start="2165:20" pos:end="2165:26">tswapal</name><argument_list pos:start="2165:27" pos:end="2165:37">(<argument pos:start="2165:28" pos:end="2165:36"><expr pos:start="2165:28" pos:end="2165:36"><name pos:start="2165:28" pos:end="2165:36"><name pos:start="2165:28" pos:end="2165:30">sel</name><operator pos:start="2165:31" pos:end="2165:32">-&gt;</operator><name pos:start="2165:33" pos:end="2165:36">outp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2167:13" pos:end="2167:36"><expr pos:start="2167:13" pos:end="2167:35"><name pos:start="2167:13" pos:end="2167:15">exp</name> <operator pos:start="2167:17" pos:end="2167:17">=</operator> <call pos:start="2167:19" pos:end="2167:35"><name pos:start="2167:19" pos:end="2167:25">tswapal</name><argument_list pos:start="2167:26" pos:end="2167:35">(<argument pos:start="2167:27" pos:end="2167:34"><expr pos:start="2167:27" pos:end="2167:34"><name pos:start="2167:27" pos:end="2167:34"><name pos:start="2167:27" pos:end="2167:29">sel</name><operator pos:start="2167:30" pos:end="2167:31">-&gt;</operator><name pos:start="2167:32" pos:end="2167:34">exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2169:13" pos:end="2169:36"><expr pos:start="2169:13" pos:end="2169:35"><name pos:start="2169:13" pos:end="2169:15">tvp</name> <operator pos:start="2169:17" pos:end="2169:17">=</operator> <call pos:start="2169:19" pos:end="2169:35"><name pos:start="2169:19" pos:end="2169:25">tswapal</name><argument_list pos:start="2169:26" pos:end="2169:35">(<argument pos:start="2169:27" pos:end="2169:34"><expr pos:start="2169:27" pos:end="2169:34"><name pos:start="2169:27" pos:end="2169:34"><name pos:start="2169:27" pos:end="2169:29">sel</name><operator pos:start="2169:30" pos:end="2169:31">-&gt;</operator><name pos:start="2169:32" pos:end="2169:34">tvp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2171:13" pos:end="2171:45"><expr pos:start="2171:13" pos:end="2171:44"><call pos:start="2171:13" pos:end="2171:44"><name pos:start="2171:13" pos:end="2171:30">unlock_user_struct</name><argument_list pos:start="2171:31" pos:end="2171:44">(<argument pos:start="2171:32" pos:end="2171:34"><expr pos:start="2171:32" pos:end="2171:34"><name pos:start="2171:32" pos:end="2171:34">sel</name></expr></argument>, <argument pos:start="2171:37" pos:end="2171:40"><expr pos:start="2171:37" pos:end="2171:40"><name pos:start="2171:37" pos:end="2171:40">arg1</name></expr></argument>, <argument pos:start="2171:43" pos:end="2171:43"><expr pos:start="2171:43" pos:end="2171:43"><literal type="number" pos:start="2171:43" pos:end="2171:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2173:13" pos:end="2173:55"><expr pos:start="2173:13" pos:end="2173:54"><name pos:start="2173:13" pos:end="2173:15">ret</name> <operator pos:start="2173:17" pos:end="2173:17">=</operator> <call pos:start="2173:19" pos:end="2173:54"><name pos:start="2173:19" pos:end="2173:27">do_select</name><argument_list pos:start="2173:28" pos:end="2173:54">(<argument pos:start="2173:29" pos:end="2173:32"><expr pos:start="2173:29" pos:end="2173:32"><name pos:start="2173:29" pos:end="2173:32">nsel</name></expr></argument>, <argument pos:start="2173:35" pos:end="2173:37"><expr pos:start="2173:35" pos:end="2173:37"><name pos:start="2173:35" pos:end="2173:37">inp</name></expr></argument>, <argument pos:start="2173:40" pos:end="2173:43"><expr pos:start="2173:40" pos:end="2173:43"><name pos:start="2173:40" pos:end="2173:43">outp</name></expr></argument>, <argument pos:start="2173:46" pos:end="2173:48"><expr pos:start="2173:46" pos:end="2173:48"><name pos:start="2173:46" pos:end="2173:48">exp</name></expr></argument>, <argument pos:start="2173:51" pos:end="2173:53"><expr pos:start="2173:51" pos:end="2173:53"><name pos:start="2173:51" pos:end="2173:53">tvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:endif pos:start="2177:1" pos:end="2177:6">#<cpp:directive pos:start="2177:2" pos:end="2177:6">endif</cpp:directive></cpp:endif>

        <break pos:start="2179:9" pos:end="2184:0">break;</break>

<cpp:endif pos:start="2181:1" pos:end="2181:6">#<cpp:directive pos:start="2181:2" pos:end="2181:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2183:1" pos:end="2183:25">#<cpp:directive pos:start="2183:2" pos:end="2183:6">ifdef</cpp:directive> <name pos:start="2183:8" pos:end="2183:25">TARGET_NR_pselect6</name></cpp:ifdef>

    <case pos:start="2185:5" pos:end="2185:28">case <expr pos:start="2185:10" pos:end="2185:27"><name pos:start="2185:10" pos:end="2185:27">TARGET_NR_pselect6</name></expr>:</case>

        <block pos:start="2187:9" pos:end="2385:9">{<block_content pos:start="2189:13" pos:end="2383:13">

            <decl_stmt pos:start="2189:13" pos:end="2189:62"><decl pos:start="2189:13" pos:end="2189:29"><type pos:start="2189:13" pos:end="2189:20"><name pos:start="2189:13" pos:end="2189:20">abi_long</name></type> <name pos:start="2189:22" pos:end="2189:29">rfd_addr</name></decl>, <decl pos:start="2189:32" pos:end="2189:39"><type ref="prev" pos:start="2189:13" pos:end="2189:20"/><name pos:start="2189:32" pos:end="2189:39">wfd_addr</name></decl>, <decl pos:start="2189:42" pos:end="2189:49"><type ref="prev" pos:start="2189:13" pos:end="2189:20"/><name pos:start="2189:42" pos:end="2189:49">efd_addr</name></decl>, <decl pos:start="2189:52" pos:end="2189:52"><type ref="prev" pos:start="2189:13" pos:end="2189:20"/><name pos:start="2189:52" pos:end="2189:52">n</name></decl>, <decl pos:start="2189:55" pos:end="2189:61"><type ref="prev" pos:start="2189:13" pos:end="2189:20"/><name pos:start="2189:55" pos:end="2189:61">ts_addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2191:13" pos:end="2191:36"><decl pos:start="2191:13" pos:end="2191:23"><type pos:start="2191:13" pos:end="2191:18"><name pos:start="2191:13" pos:end="2191:18">fd_set</name></type> <name pos:start="2191:20" pos:end="2191:23">rfds</name></decl>, <decl pos:start="2191:26" pos:end="2191:29"><type ref="prev" pos:start="2191:13" pos:end="2191:18"/><name pos:start="2191:26" pos:end="2191:29">wfds</name></decl>, <decl pos:start="2191:32" pos:end="2191:35"><type ref="prev" pos:start="2191:13" pos:end="2191:18"/><name pos:start="2191:32" pos:end="2191:35">efds</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2193:13" pos:end="2193:51"><decl pos:start="2193:13" pos:end="2193:28"><type pos:start="2193:13" pos:end="2193:20"><name pos:start="2193:13" pos:end="2193:18">fd_set</name> <modifier pos:start="2193:20" pos:end="2193:20">*</modifier></type><name pos:start="2193:21" pos:end="2193:28">rfds_ptr</name></decl>, <decl pos:start="2193:31" pos:end="2193:39"><type ref="prev" pos:start="2193:13" pos:end="2193:20"><modifier pos:start="2193:31" pos:end="2193:31">*</modifier></type><name pos:start="2193:32" pos:end="2193:39">wfds_ptr</name></decl>, <decl pos:start="2193:42" pos:end="2193:50"><type ref="prev" pos:start="2193:13" pos:end="2193:20"><modifier pos:start="2193:42" pos:end="2193:42">*</modifier></type><name pos:start="2193:43" pos:end="2193:50">efds_ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2195:13" pos:end="2195:40"><decl pos:start="2195:13" pos:end="2195:30"><type pos:start="2195:13" pos:end="2195:27"><name pos:start="2195:13" pos:end="2195:27"><name pos:start="2195:13" pos:end="2195:18">struct</name> <name pos:start="2195:20" pos:end="2195:27">timespec</name></name></type> <name pos:start="2195:29" pos:end="2195:30">ts</name></decl>, <decl pos:start="2195:33" pos:end="2195:39"><type ref="prev" pos:start="2195:13" pos:end="2195:27"><modifier pos:start="2195:33" pos:end="2195:33">*</modifier></type><name pos:start="2195:34" pos:end="2195:39">ts_ptr</name></decl>;</decl_stmt>



            <comment type="block" pos:start="2199:13" pos:end="2205:15">/*

             * The 6th arg is actually two args smashed together,

             * so we cannot use the C library.

             */</comment>

            <decl_stmt pos:start="2207:13" pos:end="2207:25"><decl pos:start="2207:13" pos:end="2207:24"><type pos:start="2207:13" pos:end="2207:20"><name pos:start="2207:13" pos:end="2207:20">sigset_t</name></type> <name pos:start="2207:22" pos:end="2207:24">set</name></decl>;</decl_stmt>

            <struct pos:start="2209:13" pos:end="2215:28">struct <block pos:start="2209:20" pos:end="2215:13">{

                <decl_stmt pos:start="2211:17" pos:end="2211:30"><decl pos:start="2211:17" pos:end="2211:29"><type pos:start="2211:17" pos:end="2211:26"><name pos:start="2211:17" pos:end="2211:24">sigset_t</name> <modifier pos:start="2211:26" pos:end="2211:26">*</modifier></type><name pos:start="2211:27" pos:end="2211:29">set</name></decl>;</decl_stmt>

                <decl_stmt pos:start="2213:17" pos:end="2213:28"><decl pos:start="2213:17" pos:end="2213:27"><type pos:start="2213:17" pos:end="2213:22"><name pos:start="2213:17" pos:end="2213:22">size_t</name></type> <name pos:start="2213:24" pos:end="2213:27">size</name></decl>;</decl_stmt>

            }</block> <decl pos:start="2215:15" pos:end="2215:17"><name pos:start="2215:15" pos:end="2215:17">sig</name></decl>, <decl pos:start="2215:20" pos:end="2215:27"><type ref="prev" pos:start="2213:17" pos:end="2213:22"><modifier pos:start="2215:20" pos:end="2215:20">*</modifier></type><name pos:start="2215:21" pos:end="2215:27">sig_ptr</name></decl>;</struct>



            <decl_stmt pos:start="2219:13" pos:end="2219:53"><decl pos:start="2219:13" pos:end="2219:32"><type pos:start="2219:13" pos:end="2219:21"><name pos:start="2219:13" pos:end="2219:21">abi_ulong</name></type> <name pos:start="2219:23" pos:end="2219:32">arg_sigset</name></decl>, <decl pos:start="2219:35" pos:end="2219:45"><type ref="prev" pos:start="2219:13" pos:end="2219:21"/><name pos:start="2219:35" pos:end="2219:45">arg_sigsize</name></decl>, <decl pos:start="2219:48" pos:end="2219:52"><type ref="prev" pos:start="2219:13" pos:end="2219:21"><modifier pos:start="2219:48" pos:end="2219:48">*</modifier></type><name pos:start="2219:49" pos:end="2219:52">arg7</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2221:13" pos:end="2221:43"><decl pos:start="2221:13" pos:end="2221:42"><type pos:start="2221:13" pos:end="2221:29"><name pos:start="2221:13" pos:end="2221:27">target_sigset_t</name> <modifier pos:start="2221:29" pos:end="2221:29">*</modifier></type><name pos:start="2221:30" pos:end="2221:42">target_sigset</name></decl>;</decl_stmt>



            <expr_stmt pos:start="2225:13" pos:end="2225:21"><expr pos:start="2225:13" pos:end="2225:20"><name pos:start="2225:13" pos:end="2225:13">n</name> <operator pos:start="2225:15" pos:end="2225:15">=</operator> <name pos:start="2225:17" pos:end="2225:20">arg1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2227:13" pos:end="2227:28"><expr pos:start="2227:13" pos:end="2227:27"><name pos:start="2227:13" pos:end="2227:20">rfd_addr</name> <operator pos:start="2227:22" pos:end="2227:22">=</operator> <name pos:start="2227:24" pos:end="2227:27">arg2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2229:13" pos:end="2229:28"><expr pos:start="2229:13" pos:end="2229:27"><name pos:start="2229:13" pos:end="2229:20">wfd_addr</name> <operator pos:start="2229:22" pos:end="2229:22">=</operator> <name pos:start="2229:24" pos:end="2229:27">arg3</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2231:13" pos:end="2231:28"><expr pos:start="2231:13" pos:end="2231:27"><name pos:start="2231:13" pos:end="2231:20">efd_addr</name> <operator pos:start="2231:22" pos:end="2231:22">=</operator> <name pos:start="2231:24" pos:end="2231:27">arg4</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2233:13" pos:end="2233:27"><expr pos:start="2233:13" pos:end="2233:26"><name pos:start="2233:13" pos:end="2233:19">ts_addr</name> <operator pos:start="2233:21" pos:end="2233:21">=</operator> <name pos:start="2233:23" pos:end="2233:26">arg5</name></expr>;</expr_stmt>



            <expr_stmt pos:start="2237:13" pos:end="2237:74"><expr pos:start="2237:13" pos:end="2237:73"><name pos:start="2237:13" pos:end="2237:15">ret</name> <operator pos:start="2237:17" pos:end="2237:17">=</operator> <call pos:start="2237:19" pos:end="2237:73"><name pos:start="2237:19" pos:end="2237:42">copy_from_user_fdset_ptr</name><argument_list pos:start="2237:43" pos:end="2237:73">(<argument pos:start="2237:44" pos:end="2237:48"><expr pos:start="2237:44" pos:end="2237:48"><operator pos:start="2237:44" pos:end="2237:44">&amp;</operator><name pos:start="2237:45" pos:end="2237:48">rfds</name></expr></argument>, <argument pos:start="2237:51" pos:end="2237:59"><expr pos:start="2237:51" pos:end="2237:59"><operator pos:start="2237:51" pos:end="2237:51">&amp;</operator><name pos:start="2237:52" pos:end="2237:59">rfds_ptr</name></expr></argument>, <argument pos:start="2237:62" pos:end="2237:69"><expr pos:start="2237:62" pos:end="2237:69"><name pos:start="2237:62" pos:end="2237:69">rfd_addr</name></expr></argument>, <argument pos:start="2237:72" pos:end="2237:72"><expr pos:start="2237:72" pos:end="2237:72"><name pos:start="2237:72" pos:end="2237:72">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2239:13" pos:end="2243:13"><if pos:start="2239:13" pos:end="2243:13">if <condition pos:start="2239:16" pos:end="2239:20">(<expr pos:start="2239:17" pos:end="2239:19"><name pos:start="2239:17" pos:end="2239:19">ret</name></expr>)</condition> <block pos:start="2239:22" pos:end="2243:13">{<block_content pos:start="2241:17" pos:end="2241:26">

                <goto pos:start="2241:17" pos:end="2241:26">goto <name pos:start="2241:22" pos:end="2241:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="2245:13" pos:end="2245:74"><expr pos:start="2245:13" pos:end="2245:73"><name pos:start="2245:13" pos:end="2245:15">ret</name> <operator pos:start="2245:17" pos:end="2245:17">=</operator> <call pos:start="2245:19" pos:end="2245:73"><name pos:start="2245:19" pos:end="2245:42">copy_from_user_fdset_ptr</name><argument_list pos:start="2245:43" pos:end="2245:73">(<argument pos:start="2245:44" pos:end="2245:48"><expr pos:start="2245:44" pos:end="2245:48"><operator pos:start="2245:44" pos:end="2245:44">&amp;</operator><name pos:start="2245:45" pos:end="2245:48">wfds</name></expr></argument>, <argument pos:start="2245:51" pos:end="2245:59"><expr pos:start="2245:51" pos:end="2245:59"><operator pos:start="2245:51" pos:end="2245:51">&amp;</operator><name pos:start="2245:52" pos:end="2245:59">wfds_ptr</name></expr></argument>, <argument pos:start="2245:62" pos:end="2245:69"><expr pos:start="2245:62" pos:end="2245:69"><name pos:start="2245:62" pos:end="2245:69">wfd_addr</name></expr></argument>, <argument pos:start="2245:72" pos:end="2245:72"><expr pos:start="2245:72" pos:end="2245:72"><name pos:start="2245:72" pos:end="2245:72">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2247:13" pos:end="2251:13"><if pos:start="2247:13" pos:end="2251:13">if <condition pos:start="2247:16" pos:end="2247:20">(<expr pos:start="2247:17" pos:end="2247:19"><name pos:start="2247:17" pos:end="2247:19">ret</name></expr>)</condition> <block pos:start="2247:22" pos:end="2251:13">{<block_content pos:start="2249:17" pos:end="2249:26">

                <goto pos:start="2249:17" pos:end="2249:26">goto <name pos:start="2249:22" pos:end="2249:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="2253:13" pos:end="2253:74"><expr pos:start="2253:13" pos:end="2253:73"><name pos:start="2253:13" pos:end="2253:15">ret</name> <operator pos:start="2253:17" pos:end="2253:17">=</operator> <call pos:start="2253:19" pos:end="2253:73"><name pos:start="2253:19" pos:end="2253:42">copy_from_user_fdset_ptr</name><argument_list pos:start="2253:43" pos:end="2253:73">(<argument pos:start="2253:44" pos:end="2253:48"><expr pos:start="2253:44" pos:end="2253:48"><operator pos:start="2253:44" pos:end="2253:44">&amp;</operator><name pos:start="2253:45" pos:end="2253:48">efds</name></expr></argument>, <argument pos:start="2253:51" pos:end="2253:59"><expr pos:start="2253:51" pos:end="2253:59"><operator pos:start="2253:51" pos:end="2253:51">&amp;</operator><name pos:start="2253:52" pos:end="2253:59">efds_ptr</name></expr></argument>, <argument pos:start="2253:62" pos:end="2253:69"><expr pos:start="2253:62" pos:end="2253:69"><name pos:start="2253:62" pos:end="2253:69">efd_addr</name></expr></argument>, <argument pos:start="2253:72" pos:end="2253:72"><expr pos:start="2253:72" pos:end="2253:72"><name pos:start="2253:72" pos:end="2253:72">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2255:13" pos:end="2259:13"><if pos:start="2255:13" pos:end="2259:13">if <condition pos:start="2255:16" pos:end="2255:20">(<expr pos:start="2255:17" pos:end="2255:19"><name pos:start="2255:17" pos:end="2255:19">ret</name></expr>)</condition> <block pos:start="2255:22" pos:end="2259:13">{<block_content pos:start="2257:17" pos:end="2257:26">

                <goto pos:start="2257:17" pos:end="2257:26">goto <name pos:start="2257:22" pos:end="2257:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="2263:13" pos:end="2269:15">/*

             * This takes a timespec, and not a timeval, so we cannot

             * use the do_select() helper ...

             */</comment>

            <if_stmt pos:start="2271:13" pos:end="2285:13"><if pos:start="2271:13" pos:end="2281:13">if <condition pos:start="2271:16" pos:end="2271:24">(<expr pos:start="2271:17" pos:end="2271:23"><name pos:start="2271:17" pos:end="2271:23">ts_addr</name></expr>)</condition> <block pos:start="2271:26" pos:end="2281:13">{<block_content pos:start="2273:17" pos:end="2279:29">

                <if_stmt pos:start="2273:17" pos:end="2277:17"><if pos:start="2273:17" pos:end="2277:17">if <condition pos:start="2273:20" pos:end="2273:58">(<expr pos:start="2273:21" pos:end="2273:57"><call pos:start="2273:21" pos:end="2273:57"><name pos:start="2273:21" pos:end="2273:43">target_to_host_timespec</name><argument_list pos:start="2273:44" pos:end="2273:57">(<argument pos:start="2273:45" pos:end="2273:47"><expr pos:start="2273:45" pos:end="2273:47"><operator pos:start="2273:45" pos:end="2273:45">&amp;</operator><name pos:start="2273:46" pos:end="2273:47">ts</name></expr></argument>, <argument pos:start="2273:50" pos:end="2273:56"><expr pos:start="2273:50" pos:end="2273:56"><name pos:start="2273:50" pos:end="2273:56">ts_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2273:60" pos:end="2277:17">{<block_content pos:start="2275:21" pos:end="2275:32">

                    <goto pos:start="2275:21" pos:end="2275:32">goto <name pos:start="2275:26" pos:end="2275:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2279:17" pos:end="2279:29"><expr pos:start="2279:17" pos:end="2279:28"><name pos:start="2279:17" pos:end="2279:22">ts_ptr</name> <operator pos:start="2279:24" pos:end="2279:24">=</operator> <operator pos:start="2279:26" pos:end="2279:26">&amp;</operator><name pos:start="2279:27" pos:end="2279:28">ts</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2281:15" pos:end="2285:13">else <block pos:start="2281:20" pos:end="2285:13">{<block_content pos:start="2283:17" pos:end="2283:30">

                <expr_stmt pos:start="2283:17" pos:end="2283:30"><expr pos:start="2283:17" pos:end="2283:29"><name pos:start="2283:17" pos:end="2283:22">ts_ptr</name> <operator pos:start="2283:24" pos:end="2283:24">=</operator> <name pos:start="2283:26" pos:end="2283:29">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="2289:13" pos:end="2289:60">/* Extract the two packed args for the sigset */</comment>

            <if_stmt pos:start="2291:13" pos:end="2353:13"><if pos:start="2291:13" pos:end="2349:13">if <condition pos:start="2291:16" pos:end="2291:21">(<expr pos:start="2291:17" pos:end="2291:20"><name pos:start="2291:17" pos:end="2291:20">arg6</name></expr>)</condition> <block pos:start="2291:23" pos:end="2349:13">{<block_content pos:start="2293:17" pos:end="2347:17">

                <expr_stmt pos:start="2293:17" pos:end="2293:31"><expr pos:start="2293:17" pos:end="2293:30"><name pos:start="2293:17" pos:end="2293:23">sig_ptr</name> <operator pos:start="2293:25" pos:end="2293:25">=</operator> <operator pos:start="2293:27" pos:end="2293:27">&amp;</operator><name pos:start="2293:28" pos:end="2293:30">sig</name></expr>;</expr_stmt>

                <expr_stmt pos:start="2295:17" pos:end="2295:37"><expr pos:start="2295:17" pos:end="2295:36"><name pos:start="2295:17" pos:end="2295:24"><name pos:start="2295:17" pos:end="2295:19">sig</name><operator pos:start="2295:20" pos:end="2295:20">.</operator><name pos:start="2295:21" pos:end="2295:24">size</name></name> <operator pos:start="2295:26" pos:end="2295:26">=</operator> <name pos:start="2295:28" pos:end="2295:32">_NSIG</name> <operator pos:start="2295:34" pos:end="2295:34">/</operator> <literal type="number" pos:start="2295:36" pos:end="2295:36">8</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="2299:17" pos:end="2299:74"><expr pos:start="2299:17" pos:end="2299:73"><name pos:start="2299:17" pos:end="2299:20">arg7</name> <operator pos:start="2299:22" pos:end="2299:22">=</operator> <call pos:start="2299:24" pos:end="2299:73"><name pos:start="2299:24" pos:end="2299:32">lock_user</name><argument_list pos:start="2299:33" pos:end="2299:73">(<argument pos:start="2299:34" pos:end="2299:44"><expr pos:start="2299:34" pos:end="2299:44"><name pos:start="2299:34" pos:end="2299:44">VERIFY_READ</name></expr></argument>, <argument pos:start="2299:47" pos:end="2299:50"><expr pos:start="2299:47" pos:end="2299:50"><name pos:start="2299:47" pos:end="2299:50">arg6</name></expr></argument>, <argument pos:start="2299:53" pos:end="2299:69"><expr pos:start="2299:53" pos:end="2299:69"><sizeof pos:start="2299:53" pos:end="2299:65">sizeof<argument_list pos:start="2299:59" pos:end="2299:65">(<argument pos:start="2299:60" pos:end="2299:64"><expr pos:start="2299:60" pos:end="2299:64"><operator pos:start="2299:60" pos:end="2299:60">*</operator><name pos:start="2299:61" pos:end="2299:64">arg7</name></expr></argument>)</argument_list></sizeof> <operator pos:start="2299:67" pos:end="2299:67">*</operator> <literal type="number" pos:start="2299:69" pos:end="2299:69">2</literal></expr></argument>, <argument pos:start="2299:72" pos:end="2299:72"><expr pos:start="2299:72" pos:end="2299:72"><literal type="number" pos:start="2299:72" pos:end="2299:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2301:17" pos:end="2305:17"><if pos:start="2301:17" pos:end="2305:17">if <condition pos:start="2301:20" pos:end="2301:26">(<expr pos:start="2301:21" pos:end="2301:25"><operator pos:start="2301:21" pos:end="2301:21">!</operator><name pos:start="2301:22" pos:end="2301:25">arg7</name></expr>)</condition> <block pos:start="2301:28" pos:end="2305:17">{<block_content pos:start="2303:21" pos:end="2303:32">

                    <goto pos:start="2303:21" pos:end="2303:32">goto <name pos:start="2303:26" pos:end="2303:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2307:17" pos:end="2307:46"><expr pos:start="2307:17" pos:end="2307:45"><name pos:start="2307:17" pos:end="2307:26">arg_sigset</name> <operator pos:start="2307:28" pos:end="2307:28">=</operator> <call pos:start="2307:30" pos:end="2307:45"><name pos:start="2307:30" pos:end="2307:36">tswapal</name><argument_list pos:start="2307:37" pos:end="2307:45">(<argument pos:start="2307:38" pos:end="2307:44"><expr pos:start="2307:38" pos:end="2307:44"><name pos:start="2307:38" pos:end="2307:44"><name pos:start="2307:38" pos:end="2307:41">arg7</name><index pos:start="2307:42" pos:end="2307:44">[<expr pos:start="2307:43" pos:end="2307:43"><literal type="number" pos:start="2307:43" pos:end="2307:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2309:17" pos:end="2309:47"><expr pos:start="2309:17" pos:end="2309:46"><name pos:start="2309:17" pos:end="2309:27">arg_sigsize</name> <operator pos:start="2309:29" pos:end="2309:29">=</operator> <call pos:start="2309:31" pos:end="2309:46"><name pos:start="2309:31" pos:end="2309:37">tswapal</name><argument_list pos:start="2309:38" pos:end="2309:46">(<argument pos:start="2309:39" pos:end="2309:45"><expr pos:start="2309:39" pos:end="2309:45"><name pos:start="2309:39" pos:end="2309:45"><name pos:start="2309:39" pos:end="2309:42">arg7</name><index pos:start="2309:43" pos:end="2309:45">[<expr pos:start="2309:44" pos:end="2309:44"><literal type="number" pos:start="2309:44" pos:end="2309:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2311:17" pos:end="2311:43"><expr pos:start="2311:17" pos:end="2311:42"><call pos:start="2311:17" pos:end="2311:42"><name pos:start="2311:17" pos:end="2311:27">unlock_user</name><argument_list pos:start="2311:28" pos:end="2311:42">(<argument pos:start="2311:29" pos:end="2311:32"><expr pos:start="2311:29" pos:end="2311:32"><name pos:start="2311:29" pos:end="2311:32">arg7</name></expr></argument>, <argument pos:start="2311:35" pos:end="2311:38"><expr pos:start="2311:35" pos:end="2311:38"><name pos:start="2311:35" pos:end="2311:38">arg6</name></expr></argument>, <argument pos:start="2311:41" pos:end="2311:41"><expr pos:start="2311:41" pos:end="2311:41"><literal type="number" pos:start="2311:41" pos:end="2311:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="2315:17" pos:end="2347:17"><if pos:start="2315:17" pos:end="2343:17">if <condition pos:start="2315:20" pos:end="2315:31">(<expr pos:start="2315:21" pos:end="2315:30"><name pos:start="2315:21" pos:end="2315:30">arg_sigset</name></expr>)</condition> <block pos:start="2315:33" pos:end="2343:17">{<block_content pos:start="2317:21" pos:end="2341:62">

                    <expr_stmt pos:start="2317:21" pos:end="2317:35"><expr pos:start="2317:21" pos:end="2317:34"><name pos:start="2317:21" pos:end="2317:27"><name pos:start="2317:21" pos:end="2317:23">sig</name><operator pos:start="2317:24" pos:end="2317:24">.</operator><name pos:start="2317:25" pos:end="2317:27">set</name></name> <operator pos:start="2317:29" pos:end="2317:29">=</operator> <operator pos:start="2317:31" pos:end="2317:31">&amp;</operator><name pos:start="2317:32" pos:end="2317:34">set</name></expr>;</expr_stmt>

                    <if_stmt pos:start="2319:21" pos:end="2327:21"><if pos:start="2319:21" pos:end="2327:21">if <condition pos:start="2319:24" pos:end="2319:62">(<expr pos:start="2319:25" pos:end="2319:61"><name pos:start="2319:25" pos:end="2319:35">arg_sigsize</name> <operator pos:start="2319:37" pos:end="2319:38">!=</operator> <sizeof pos:start="2319:40" pos:end="2319:61">sizeof<argument_list pos:start="2319:46" pos:end="2319:61">(<argument pos:start="2319:47" pos:end="2319:60"><expr pos:start="2319:47" pos:end="2319:60"><operator pos:start="2319:47" pos:end="2319:47">*</operator><name pos:start="2319:48" pos:end="2319:60">target_sigset</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="2319:64" pos:end="2327:21">{<block_content pos:start="2323:25" pos:end="2325:34">

                        <comment type="block" pos:start="2321:25" pos:end="2321:78">/* Like the kernel, we enforce correct size sigsets */</comment>

                        <expr_stmt pos:start="2323:25" pos:end="2323:45"><expr pos:start="2323:25" pos:end="2323:44"><name pos:start="2323:25" pos:end="2323:27">ret</name> <operator pos:start="2323:29" pos:end="2323:29">=</operator> <operator pos:start="2323:31" pos:end="2323:31">-</operator><name pos:start="2323:32" pos:end="2323:44">TARGET_EINVAL</name></expr>;</expr_stmt>

                        <goto pos:start="2325:25" pos:end="2325:34">goto <name pos:start="2325:30" pos:end="2325:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2329:21" pos:end="2331:73"><expr pos:start="2329:21" pos:end="2331:72"><name pos:start="2329:21" pos:end="2329:33">target_sigset</name> <operator pos:start="2329:35" pos:end="2329:35">=</operator> <call pos:start="2329:37" pos:end="2331:72"><name pos:start="2329:37" pos:end="2329:45">lock_user</name><argument_list pos:start="2329:46" pos:end="2331:72">(<argument pos:start="2329:47" pos:end="2329:57"><expr pos:start="2329:47" pos:end="2329:57"><name pos:start="2329:47" pos:end="2329:57">VERIFY_READ</name></expr></argument>, <argument pos:start="2329:60" pos:end="2329:69"><expr pos:start="2329:60" pos:end="2329:69"><name pos:start="2329:60" pos:end="2329:69">arg_sigset</name></expr></argument>,

                                              <argument pos:start="2331:47" pos:end="2331:68"><expr pos:start="2331:47" pos:end="2331:68"><sizeof pos:start="2331:47" pos:end="2331:68">sizeof<argument_list pos:start="2331:53" pos:end="2331:68">(<argument pos:start="2331:54" pos:end="2331:67"><expr pos:start="2331:54" pos:end="2331:67"><operator pos:start="2331:54" pos:end="2331:54">*</operator><name pos:start="2331:55" pos:end="2331:67">target_sigset</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2331:71" pos:end="2331:71"><expr pos:start="2331:71" pos:end="2331:71"><literal type="number" pos:start="2331:71" pos:end="2331:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2333:21" pos:end="2337:21"><if pos:start="2333:21" pos:end="2337:21">if <condition pos:start="2333:24" pos:end="2333:39">(<expr pos:start="2333:25" pos:end="2333:38"><operator pos:start="2333:25" pos:end="2333:25">!</operator><name pos:start="2333:26" pos:end="2333:38">target_sigset</name></expr>)</condition> <block pos:start="2333:41" pos:end="2337:21">{<block_content pos:start="2335:25" pos:end="2335:36">

                        <goto pos:start="2335:25" pos:end="2335:36">goto <name pos:start="2335:30" pos:end="2335:35">efault</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2339:21" pos:end="2339:63"><expr pos:start="2339:21" pos:end="2339:62"><call pos:start="2339:21" pos:end="2339:62"><name pos:start="2339:21" pos:end="2339:41">target_to_host_sigset</name><argument_list pos:start="2339:42" pos:end="2339:62">(<argument pos:start="2339:43" pos:end="2339:46"><expr pos:start="2339:43" pos:end="2339:46"><operator pos:start="2339:43" pos:end="2339:43">&amp;</operator><name pos:start="2339:44" pos:end="2339:46">set</name></expr></argument>, <argument pos:start="2339:49" pos:end="2339:61"><expr pos:start="2339:49" pos:end="2339:61"><name pos:start="2339:49" pos:end="2339:61">target_sigset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2341:21" pos:end="2341:62"><expr pos:start="2341:21" pos:end="2341:61"><call pos:start="2341:21" pos:end="2341:61"><name pos:start="2341:21" pos:end="2341:31">unlock_user</name><argument_list pos:start="2341:32" pos:end="2341:61">(<argument pos:start="2341:33" pos:end="2341:45"><expr pos:start="2341:33" pos:end="2341:45"><name pos:start="2341:33" pos:end="2341:45">target_sigset</name></expr></argument>, <argument pos:start="2341:48" pos:end="2341:57"><expr pos:start="2341:48" pos:end="2341:57"><name pos:start="2341:48" pos:end="2341:57">arg_sigset</name></expr></argument>, <argument pos:start="2341:60" pos:end="2341:60"><expr pos:start="2341:60" pos:end="2341:60"><literal type="number" pos:start="2341:60" pos:end="2341:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2343:19" pos:end="2347:17">else <block pos:start="2343:24" pos:end="2347:17">{<block_content pos:start="2345:21" pos:end="2345:35">

                    <expr_stmt pos:start="2345:21" pos:end="2345:35"><expr pos:start="2345:21" pos:end="2345:34"><name pos:start="2345:21" pos:end="2345:27"><name pos:start="2345:21" pos:end="2345:23">sig</name><operator pos:start="2345:24" pos:end="2345:24">.</operator><name pos:start="2345:25" pos:end="2345:27">set</name></name> <operator pos:start="2345:29" pos:end="2345:29">=</operator> <name pos:start="2345:31" pos:end="2345:34">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="2349:15" pos:end="2353:13">else <block pos:start="2349:20" pos:end="2353:13">{<block_content pos:start="2351:17" pos:end="2351:31">

                <expr_stmt pos:start="2351:17" pos:end="2351:31"><expr pos:start="2351:17" pos:end="2351:30"><name pos:start="2351:17" pos:end="2351:23">sig_ptr</name> <operator pos:start="2351:25" pos:end="2351:25">=</operator> <name pos:start="2351:27" pos:end="2351:30">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="2357:13" pos:end="2359:59"><expr pos:start="2357:13" pos:end="2359:58"><name pos:start="2357:13" pos:end="2357:15">ret</name> <operator pos:start="2357:17" pos:end="2357:17">=</operator> <call pos:start="2357:19" pos:end="2359:58"><name pos:start="2357:19" pos:end="2357:27">get_errno</name><argument_list pos:start="2357:28" pos:end="2359:58">(<argument pos:start="2357:29" pos:end="2359:57"><expr pos:start="2357:29" pos:end="2359:57"><call pos:start="2357:29" pos:end="2359:57"><name pos:start="2357:29" pos:end="2357:40">sys_pselect6</name><argument_list pos:start="2357:41" pos:end="2359:57">(<argument pos:start="2357:42" pos:end="2357:42"><expr pos:start="2357:42" pos:end="2357:42"><name pos:start="2357:42" pos:end="2357:42">n</name></expr></argument>, <argument pos:start="2357:45" pos:end="2357:52"><expr pos:start="2357:45" pos:end="2357:52"><name pos:start="2357:45" pos:end="2357:52">rfds_ptr</name></expr></argument>, <argument pos:start="2357:55" pos:end="2357:62"><expr pos:start="2357:55" pos:end="2357:62"><name pos:start="2357:55" pos:end="2357:62">wfds_ptr</name></expr></argument>, <argument pos:start="2357:65" pos:end="2357:72"><expr pos:start="2357:65" pos:end="2357:72"><name pos:start="2357:65" pos:end="2357:72">efds_ptr</name></expr></argument>,

                                         <argument pos:start="2359:42" pos:end="2359:47"><expr pos:start="2359:42" pos:end="2359:47"><name pos:start="2359:42" pos:end="2359:47">ts_ptr</name></expr></argument>, <argument pos:start="2359:50" pos:end="2359:56"><expr pos:start="2359:50" pos:end="2359:56"><name pos:start="2359:50" pos:end="2359:56">sig_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="2363:13" pos:end="2383:13"><if pos:start="2363:13" pos:end="2383:13">if <condition pos:start="2363:16" pos:end="2363:31">(<expr pos:start="2363:17" pos:end="2363:30"><operator pos:start="2363:17" pos:end="2363:17">!</operator><call pos:start="2363:18" pos:end="2363:30"><name pos:start="2363:18" pos:end="2363:25">is_error</name><argument_list pos:start="2363:26" pos:end="2363:30">(<argument pos:start="2363:27" pos:end="2363:29"><expr pos:start="2363:27" pos:end="2363:29"><name pos:start="2363:27" pos:end="2363:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2363:33" pos:end="2383:13">{<block_content pos:start="2365:17" pos:end="2381:32">

                <if_stmt pos:start="2365:17" pos:end="2367:32"><if pos:start="2365:17" pos:end="2367:32">if <condition pos:start="2365:20" pos:end="2365:71">(<expr pos:start="2365:21" pos:end="2365:70"><name pos:start="2365:21" pos:end="2365:28">rfd_addr</name> <operator pos:start="2365:30" pos:end="2365:31">&amp;&amp;</operator> <call pos:start="2365:33" pos:end="2365:70"><name pos:start="2365:33" pos:end="2365:50">copy_to_user_fdset</name><argument_list pos:start="2365:51" pos:end="2365:70">(<argument pos:start="2365:52" pos:end="2365:59"><expr pos:start="2365:52" pos:end="2365:59"><name pos:start="2365:52" pos:end="2365:59">rfd_addr</name></expr></argument>, <argument pos:start="2365:62" pos:end="2365:66"><expr pos:start="2365:62" pos:end="2365:66"><operator pos:start="2365:62" pos:end="2365:62">&amp;</operator><name pos:start="2365:63" pos:end="2365:66">rfds</name></expr></argument>, <argument pos:start="2365:69" pos:end="2365:69"><expr pos:start="2365:69" pos:end="2365:69"><name pos:start="2365:69" pos:end="2365:69">n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2367:21" pos:end="2367:32"><block_content pos:start="2367:21" pos:end="2367:32">

                    <goto pos:start="2367:21" pos:end="2367:32">goto <name pos:start="2367:26" pos:end="2367:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="2369:17" pos:end="2371:32"><if pos:start="2369:17" pos:end="2371:32">if <condition pos:start="2369:20" pos:end="2369:71">(<expr pos:start="2369:21" pos:end="2369:70"><name pos:start="2369:21" pos:end="2369:28">wfd_addr</name> <operator pos:start="2369:30" pos:end="2369:31">&amp;&amp;</operator> <call pos:start="2369:33" pos:end="2369:70"><name pos:start="2369:33" pos:end="2369:50">copy_to_user_fdset</name><argument_list pos:start="2369:51" pos:end="2369:70">(<argument pos:start="2369:52" pos:end="2369:59"><expr pos:start="2369:52" pos:end="2369:59"><name pos:start="2369:52" pos:end="2369:59">wfd_addr</name></expr></argument>, <argument pos:start="2369:62" pos:end="2369:66"><expr pos:start="2369:62" pos:end="2369:66"><operator pos:start="2369:62" pos:end="2369:62">&amp;</operator><name pos:start="2369:63" pos:end="2369:66">wfds</name></expr></argument>, <argument pos:start="2369:69" pos:end="2369:69"><expr pos:start="2369:69" pos:end="2369:69"><name pos:start="2369:69" pos:end="2369:69">n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2371:21" pos:end="2371:32"><block_content pos:start="2371:21" pos:end="2371:32">

                    <goto pos:start="2371:21" pos:end="2371:32">goto <name pos:start="2371:26" pos:end="2371:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="2373:17" pos:end="2375:32"><if pos:start="2373:17" pos:end="2375:32">if <condition pos:start="2373:20" pos:end="2373:71">(<expr pos:start="2373:21" pos:end="2373:70"><name pos:start="2373:21" pos:end="2373:28">efd_addr</name> <operator pos:start="2373:30" pos:end="2373:31">&amp;&amp;</operator> <call pos:start="2373:33" pos:end="2373:70"><name pos:start="2373:33" pos:end="2373:50">copy_to_user_fdset</name><argument_list pos:start="2373:51" pos:end="2373:70">(<argument pos:start="2373:52" pos:end="2373:59"><expr pos:start="2373:52" pos:end="2373:59"><name pos:start="2373:52" pos:end="2373:59">efd_addr</name></expr></argument>, <argument pos:start="2373:62" pos:end="2373:66"><expr pos:start="2373:62" pos:end="2373:66"><operator pos:start="2373:62" pos:end="2373:62">&amp;</operator><name pos:start="2373:63" pos:end="2373:66">efds</name></expr></argument>, <argument pos:start="2373:69" pos:end="2373:69"><expr pos:start="2373:69" pos:end="2373:69"><name pos:start="2373:69" pos:end="2373:69">n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2375:21" pos:end="2375:32"><block_content pos:start="2375:21" pos:end="2375:32">

                    <goto pos:start="2375:21" pos:end="2375:32">goto <name pos:start="2375:26" pos:end="2375:31">efault</name>;</goto></block_content></block></if></if_stmt>



                <if_stmt pos:start="2379:17" pos:end="2381:32"><if pos:start="2379:17" pos:end="2381:32">if <condition pos:start="2379:20" pos:end="2379:69">(<expr pos:start="2379:21" pos:end="2379:68"><name pos:start="2379:21" pos:end="2379:27">ts_addr</name> <operator pos:start="2379:29" pos:end="2379:30">&amp;&amp;</operator> <call pos:start="2379:32" pos:end="2379:68"><name pos:start="2379:32" pos:end="2379:54">host_to_target_timespec</name><argument_list pos:start="2379:55" pos:end="2379:68">(<argument pos:start="2379:56" pos:end="2379:62"><expr pos:start="2379:56" pos:end="2379:62"><name pos:start="2379:56" pos:end="2379:62">ts_addr</name></expr></argument>, <argument pos:start="2379:65" pos:end="2379:67"><expr pos:start="2379:65" pos:end="2379:67"><operator pos:start="2379:65" pos:end="2379:65">&amp;</operator><name pos:start="2379:66" pos:end="2379:67">ts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2381:21" pos:end="2381:32"><block_content pos:start="2381:21" pos:end="2381:32">

                    <goto pos:start="2381:21" pos:end="2381:32">goto <name pos:start="2381:26" pos:end="2381:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="2387:9" pos:end="2390:0">break;</break>

<cpp:endif pos:start="2389:1" pos:end="2389:6">#<cpp:directive pos:start="2389:2" pos:end="2389:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2391:5" pos:end="2391:27">case <expr pos:start="2391:10" pos:end="2391:26"><name pos:start="2391:10" pos:end="2391:26">TARGET_NR_symlink</name></expr>:</case>

        <block pos:start="2393:9" pos:end="2413:9">{<block_content pos:start="2395:13" pos:end="2411:36">

            <decl_stmt pos:start="2395:13" pos:end="2395:21"><decl pos:start="2395:13" pos:end="2395:20"><type pos:start="2395:13" pos:end="2395:18"><name pos:start="2395:13" pos:end="2395:16">void</name> <modifier pos:start="2395:18" pos:end="2395:18">*</modifier></type><name pos:start="2395:19" pos:end="2395:20">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2397:13" pos:end="2397:39"><expr pos:start="2397:13" pos:end="2397:38"><name pos:start="2397:13" pos:end="2397:13">p</name> <operator pos:start="2397:15" pos:end="2397:15">=</operator> <call pos:start="2397:17" pos:end="2397:38"><name pos:start="2397:17" pos:end="2397:32">lock_user_string</name><argument_list pos:start="2397:33" pos:end="2397:38">(<argument pos:start="2397:34" pos:end="2397:37"><expr pos:start="2397:34" pos:end="2397:37"><name pos:start="2397:34" pos:end="2397:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2399:13" pos:end="2399:40"><expr pos:start="2399:13" pos:end="2399:39"><name pos:start="2399:13" pos:end="2399:14">p2</name> <operator pos:start="2399:16" pos:end="2399:16">=</operator> <call pos:start="2399:18" pos:end="2399:39"><name pos:start="2399:18" pos:end="2399:33">lock_user_string</name><argument_list pos:start="2399:34" pos:end="2399:39">(<argument pos:start="2399:35" pos:end="2399:38"><expr pos:start="2399:35" pos:end="2399:38"><name pos:start="2399:35" pos:end="2399:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2401:13" pos:end="2407:48"><if pos:start="2401:13" pos:end="2403:37">if <condition pos:start="2401:16" pos:end="2401:26">(<expr pos:start="2401:17" pos:end="2401:25"><operator pos:start="2401:17" pos:end="2401:17">!</operator><name pos:start="2401:18" pos:end="2401:18">p</name> <operator pos:start="2401:20" pos:end="2401:21">||</operator> <operator pos:start="2401:23" pos:end="2401:23">!</operator><name pos:start="2401:24" pos:end="2401:25">p2</name></expr>)</condition><block type="pseudo" pos:start="2403:17" pos:end="2403:37"><block_content pos:start="2403:17" pos:end="2403:37">

                <expr_stmt pos:start="2403:17" pos:end="2403:37"><expr pos:start="2403:17" pos:end="2403:36"><name pos:start="2403:17" pos:end="2403:19">ret</name> <operator pos:start="2403:21" pos:end="2403:21">=</operator> <operator pos:start="2403:23" pos:end="2403:23">-</operator><name pos:start="2403:24" pos:end="2403:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2405:13" pos:end="2407:48">else<block type="pseudo" pos:start="2407:17" pos:end="2407:48"><block_content pos:start="2407:17" pos:end="2407:48">

                <expr_stmt pos:start="2407:17" pos:end="2407:48"><expr pos:start="2407:17" pos:end="2407:47"><name pos:start="2407:17" pos:end="2407:19">ret</name> <operator pos:start="2407:21" pos:end="2407:21">=</operator> <call pos:start="2407:23" pos:end="2407:47"><name pos:start="2407:23" pos:end="2407:31">get_errno</name><argument_list pos:start="2407:32" pos:end="2407:47">(<argument pos:start="2407:33" pos:end="2407:46"><expr pos:start="2407:33" pos:end="2407:46"><call pos:start="2407:33" pos:end="2407:46"><name pos:start="2407:33" pos:end="2407:39">symlink</name><argument_list pos:start="2407:40" pos:end="2407:46">(<argument pos:start="2407:41" pos:end="2407:41"><expr pos:start="2407:41" pos:end="2407:41"><name pos:start="2407:41" pos:end="2407:41">p</name></expr></argument>, <argument pos:start="2407:44" pos:end="2407:45"><expr pos:start="2407:44" pos:end="2407:45"><name pos:start="2407:44" pos:end="2407:45">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2409:13" pos:end="2409:37"><expr pos:start="2409:13" pos:end="2409:36"><call pos:start="2409:13" pos:end="2409:36"><name pos:start="2409:13" pos:end="2409:23">unlock_user</name><argument_list pos:start="2409:24" pos:end="2409:36">(<argument pos:start="2409:25" pos:end="2409:26"><expr pos:start="2409:25" pos:end="2409:26"><name pos:start="2409:25" pos:end="2409:26">p2</name></expr></argument>, <argument pos:start="2409:29" pos:end="2409:32"><expr pos:start="2409:29" pos:end="2409:32"><name pos:start="2409:29" pos:end="2409:32">arg2</name></expr></argument>, <argument pos:start="2409:35" pos:end="2409:35"><expr pos:start="2409:35" pos:end="2409:35"><literal type="number" pos:start="2409:35" pos:end="2409:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2411:13" pos:end="2411:36"><expr pos:start="2411:13" pos:end="2411:35"><call pos:start="2411:13" pos:end="2411:35"><name pos:start="2411:13" pos:end="2411:23">unlock_user</name><argument_list pos:start="2411:24" pos:end="2411:35">(<argument pos:start="2411:25" pos:end="2411:25"><expr pos:start="2411:25" pos:end="2411:25"><name pos:start="2411:25" pos:end="2411:25">p</name></expr></argument>, <argument pos:start="2411:28" pos:end="2411:31"><expr pos:start="2411:28" pos:end="2411:31"><name pos:start="2411:28" pos:end="2411:31">arg1</name></expr></argument>, <argument pos:start="2411:34" pos:end="2411:34"><expr pos:start="2411:34" pos:end="2411:34"><literal type="number" pos:start="2411:34" pos:end="2411:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2415:9" pos:end="2418:0">break;</break>

<cpp:if pos:start="2417:1" pos:end="2417:32">#<cpp:directive pos:start="2417:2" pos:end="2417:3">if</cpp:directive> <expr pos:start="2417:5" pos:end="2417:32"><call pos:start="2417:5" pos:end="2417:32"><name pos:start="2417:5" pos:end="2417:11">defined</name><argument_list pos:start="2417:12" pos:end="2417:32">(<argument pos:start="2417:13" pos:end="2417:31"><expr pos:start="2417:13" pos:end="2417:31"><name pos:start="2417:13" pos:end="2417:31">TARGET_NR_symlinkat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="2419:5" pos:end="2419:29">case <expr pos:start="2419:10" pos:end="2419:28"><name pos:start="2419:10" pos:end="2419:28">TARGET_NR_symlinkat</name></expr>:</case>

        <block pos:start="2421:9" pos:end="2441:9">{<block_content pos:start="2423:13" pos:end="2439:36">

            <decl_stmt pos:start="2423:13" pos:end="2423:21"><decl pos:start="2423:13" pos:end="2423:20"><type pos:start="2423:13" pos:end="2423:18"><name pos:start="2423:13" pos:end="2423:16">void</name> <modifier pos:start="2423:18" pos:end="2423:18">*</modifier></type><name pos:start="2423:19" pos:end="2423:20">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2425:13" pos:end="2425:40"><expr pos:start="2425:13" pos:end="2425:39"><name pos:start="2425:13" pos:end="2425:13">p</name>  <operator pos:start="2425:16" pos:end="2425:16">=</operator> <call pos:start="2425:18" pos:end="2425:39"><name pos:start="2425:18" pos:end="2425:33">lock_user_string</name><argument_list pos:start="2425:34" pos:end="2425:39">(<argument pos:start="2425:35" pos:end="2425:38"><expr pos:start="2425:35" pos:end="2425:38"><name pos:start="2425:35" pos:end="2425:38">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2427:13" pos:end="2427:40"><expr pos:start="2427:13" pos:end="2427:39"><name pos:start="2427:13" pos:end="2427:14">p2</name> <operator pos:start="2427:16" pos:end="2427:16">=</operator> <call pos:start="2427:18" pos:end="2427:39"><name pos:start="2427:18" pos:end="2427:33">lock_user_string</name><argument_list pos:start="2427:34" pos:end="2427:39">(<argument pos:start="2427:35" pos:end="2427:38"><expr pos:start="2427:35" pos:end="2427:38"><name pos:start="2427:35" pos:end="2427:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2429:13" pos:end="2435:56"><if pos:start="2429:13" pos:end="2431:37">if <condition pos:start="2429:16" pos:end="2429:26">(<expr pos:start="2429:17" pos:end="2429:25"><operator pos:start="2429:17" pos:end="2429:17">!</operator><name pos:start="2429:18" pos:end="2429:18">p</name> <operator pos:start="2429:20" pos:end="2429:21">||</operator> <operator pos:start="2429:23" pos:end="2429:23">!</operator><name pos:start="2429:24" pos:end="2429:25">p2</name></expr>)</condition><block type="pseudo" pos:start="2431:17" pos:end="2431:37"><block_content pos:start="2431:17" pos:end="2431:37">

                <expr_stmt pos:start="2431:17" pos:end="2431:37"><expr pos:start="2431:17" pos:end="2431:36"><name pos:start="2431:17" pos:end="2431:19">ret</name> <operator pos:start="2431:21" pos:end="2431:21">=</operator> <operator pos:start="2431:23" pos:end="2431:23">-</operator><name pos:start="2431:24" pos:end="2431:36">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2433:13" pos:end="2435:56">else<block type="pseudo" pos:start="2435:17" pos:end="2435:56"><block_content pos:start="2435:17" pos:end="2435:56">

                <expr_stmt pos:start="2435:17" pos:end="2435:56"><expr pos:start="2435:17" pos:end="2435:55"><name pos:start="2435:17" pos:end="2435:19">ret</name> <operator pos:start="2435:21" pos:end="2435:21">=</operator> <call pos:start="2435:23" pos:end="2435:55"><name pos:start="2435:23" pos:end="2435:31">get_errno</name><argument_list pos:start="2435:32" pos:end="2435:55">(<argument pos:start="2435:33" pos:end="2435:54"><expr pos:start="2435:33" pos:end="2435:54"><call pos:start="2435:33" pos:end="2435:54"><name pos:start="2435:33" pos:end="2435:41">symlinkat</name><argument_list pos:start="2435:42" pos:end="2435:54">(<argument pos:start="2435:43" pos:end="2435:43"><expr pos:start="2435:43" pos:end="2435:43"><name pos:start="2435:43" pos:end="2435:43">p</name></expr></argument>, <argument pos:start="2435:46" pos:end="2435:49"><expr pos:start="2435:46" pos:end="2435:49"><name pos:start="2435:46" pos:end="2435:49">arg2</name></expr></argument>, <argument pos:start="2435:52" pos:end="2435:53"><expr pos:start="2435:52" pos:end="2435:53"><name pos:start="2435:52" pos:end="2435:53">p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2437:13" pos:end="2437:37"><expr pos:start="2437:13" pos:end="2437:36"><call pos:start="2437:13" pos:end="2437:36"><name pos:start="2437:13" pos:end="2437:23">unlock_user</name><argument_list pos:start="2437:24" pos:end="2437:36">(<argument pos:start="2437:25" pos:end="2437:26"><expr pos:start="2437:25" pos:end="2437:26"><name pos:start="2437:25" pos:end="2437:26">p2</name></expr></argument>, <argument pos:start="2437:29" pos:end="2437:32"><expr pos:start="2437:29" pos:end="2437:32"><name pos:start="2437:29" pos:end="2437:32">arg3</name></expr></argument>, <argument pos:start="2437:35" pos:end="2437:35"><expr pos:start="2437:35" pos:end="2437:35"><literal type="number" pos:start="2437:35" pos:end="2437:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2439:13" pos:end="2439:36"><expr pos:start="2439:13" pos:end="2439:35"><call pos:start="2439:13" pos:end="2439:35"><name pos:start="2439:13" pos:end="2439:23">unlock_user</name><argument_list pos:start="2439:24" pos:end="2439:35">(<argument pos:start="2439:25" pos:end="2439:25"><expr pos:start="2439:25" pos:end="2439:25"><name pos:start="2439:25" pos:end="2439:25">p</name></expr></argument>, <argument pos:start="2439:28" pos:end="2439:31"><expr pos:start="2439:28" pos:end="2439:31"><name pos:start="2439:28" pos:end="2439:31">arg1</name></expr></argument>, <argument pos:start="2439:34" pos:end="2439:34"><expr pos:start="2439:34" pos:end="2439:34"><literal type="number" pos:start="2439:34" pos:end="2439:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2443:9" pos:end="2448:0">break;</break>

<cpp:endif pos:start="2445:1" pos:end="2445:6">#<cpp:directive pos:start="2445:2" pos:end="2445:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2447:1" pos:end="2447:25">#<cpp:directive pos:start="2447:2" pos:end="2447:6">ifdef</cpp:directive> <name pos:start="2447:8" pos:end="2447:25">TARGET_NR_oldlstat</name></cpp:ifdef>

    <case pos:start="2449:5" pos:end="2449:28">case <expr pos:start="2449:10" pos:end="2449:27"><name pos:start="2449:10" pos:end="2449:27">TARGET_NR_oldlstat</name></expr>:</case>

        <goto pos:start="2451:9" pos:end="2454:0">goto <name pos:start="2451:14" pos:end="2451:26">unimplemented</name>;</goto>

<cpp:endif pos:start="2453:1" pos:end="2453:6">#<cpp:directive pos:start="2453:2" pos:end="2453:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2455:5" pos:end="2455:28">case <expr pos:start="2455:10" pos:end="2455:27"><name pos:start="2455:10" pos:end="2455:27">TARGET_NR_readlink</name></expr>:</case>

        <block pos:start="2457:9" pos:end="2489:9">{<block_content pos:start="2459:13" pos:end="2487:36">

            <decl_stmt pos:start="2459:13" pos:end="2459:21"><decl pos:start="2459:13" pos:end="2459:20"><type pos:start="2459:13" pos:end="2459:18"><name pos:start="2459:13" pos:end="2459:16">void</name> <modifier pos:start="2459:18" pos:end="2459:18">*</modifier></type><name pos:start="2459:19" pos:end="2459:20">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2461:13" pos:end="2461:39"><expr pos:start="2461:13" pos:end="2461:38"><name pos:start="2461:13" pos:end="2461:13">p</name> <operator pos:start="2461:15" pos:end="2461:15">=</operator> <call pos:start="2461:17" pos:end="2461:38"><name pos:start="2461:17" pos:end="2461:32">lock_user_string</name><argument_list pos:start="2461:33" pos:end="2461:38">(<argument pos:start="2461:34" pos:end="2461:37"><expr pos:start="2461:34" pos:end="2461:37"><name pos:start="2461:34" pos:end="2461:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2463:13" pos:end="2463:56"><expr pos:start="2463:13" pos:end="2463:55"><name pos:start="2463:13" pos:end="2463:14">p2</name> <operator pos:start="2463:16" pos:end="2463:16">=</operator> <call pos:start="2463:18" pos:end="2463:55"><name pos:start="2463:18" pos:end="2463:26">lock_user</name><argument_list pos:start="2463:27" pos:end="2463:55">(<argument pos:start="2463:28" pos:end="2463:39"><expr pos:start="2463:28" pos:end="2463:39"><name pos:start="2463:28" pos:end="2463:39">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2463:42" pos:end="2463:45"><expr pos:start="2463:42" pos:end="2463:45"><name pos:start="2463:42" pos:end="2463:45">arg2</name></expr></argument>, <argument pos:start="2463:48" pos:end="2463:51"><expr pos:start="2463:48" pos:end="2463:51"><name pos:start="2463:48" pos:end="2463:51">arg3</name></expr></argument>, <argument pos:start="2463:54" pos:end="2463:54"><expr pos:start="2463:54" pos:end="2463:54"><literal type="number" pos:start="2463:54" pos:end="2463:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2465:13" pos:end="2483:13"><if pos:start="2465:13" pos:end="2469:13">if <condition pos:start="2465:16" pos:end="2465:26">(<expr pos:start="2465:17" pos:end="2465:25"><operator pos:start="2465:17" pos:end="2465:17">!</operator><name pos:start="2465:18" pos:end="2465:18">p</name> <operator pos:start="2465:20" pos:end="2465:21">||</operator> <operator pos:start="2465:23" pos:end="2465:23">!</operator><name pos:start="2465:24" pos:end="2465:25">p2</name></expr>)</condition> <block pos:start="2465:28" pos:end="2469:13">{<block_content pos:start="2467:17" pos:end="2467:37">

                <expr_stmt pos:start="2467:17" pos:end="2467:37"><expr pos:start="2467:17" pos:end="2467:36"><name pos:start="2467:17" pos:end="2467:19">ret</name> <operator pos:start="2467:21" pos:end="2467:21">=</operator> <operator pos:start="2467:23" pos:end="2467:23">-</operator><name pos:start="2467:24" pos:end="2467:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="2469:15" pos:end="2479:13">else if <condition pos:start="2469:23" pos:end="2469:62">(<expr pos:start="2469:24" pos:end="2469:61"><call pos:start="2469:24" pos:end="2469:61"><name pos:start="2469:24" pos:end="2469:37">is_proc_myself</name><argument_list pos:start="2469:38" pos:end="2469:61">(<argument pos:start="2469:39" pos:end="2469:53"><expr pos:start="2469:39" pos:end="2469:53"><operator pos:start="2469:39" pos:end="2469:39">(</operator><specifier pos:start="2469:40" pos:end="2469:44">const</specifier> <name pos:start="2469:46" pos:end="2469:49">char</name> <operator pos:start="2469:51" pos:end="2469:51">*</operator><operator pos:start="2469:52" pos:end="2469:52">)</operator><name pos:start="2469:53" pos:end="2469:53">p</name></expr></argument>, <argument pos:start="2469:56" pos:end="2469:60"><expr pos:start="2469:56" pos:end="2469:60"><literal type="string" pos:start="2469:56" pos:end="2469:60">"exe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2469:64" pos:end="2479:13">{<block_content pos:start="2471:17" pos:end="2477:55">

                <decl_stmt pos:start="2471:17" pos:end="2471:43"><decl pos:start="2471:17" pos:end="2471:35"><type pos:start="2471:17" pos:end="2471:20"><name pos:start="2471:17" pos:end="2471:20">char</name></type> <name pos:start="2471:22" pos:end="2471:35"><name pos:start="2471:22" pos:end="2471:25">real</name><index pos:start="2471:26" pos:end="2471:35">[<expr pos:start="2471:27" pos:end="2471:34"><name pos:start="2471:27" pos:end="2471:34">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="2471:38" pos:end="2471:42"><type ref="prev" pos:start="2471:17" pos:end="2471:20"><modifier pos:start="2471:38" pos:end="2471:38">*</modifier></type><name pos:start="2471:39" pos:end="2471:42">temp</name></decl>;</decl_stmt>

                <expr_stmt pos:start="2473:17" pos:end="2473:49"><expr pos:start="2473:17" pos:end="2473:48"><name pos:start="2473:17" pos:end="2473:20">temp</name> <operator pos:start="2473:22" pos:end="2473:22">=</operator> <call pos:start="2473:24" pos:end="2473:48"><name pos:start="2473:24" pos:end="2473:31">realpath</name><argument_list pos:start="2473:32" pos:end="2473:48">(<argument pos:start="2473:33" pos:end="2473:41"><expr pos:start="2473:33" pos:end="2473:41"><name pos:start="2473:33" pos:end="2473:41">exec_path</name></expr></argument>, <argument pos:start="2473:44" pos:end="2473:47"><expr pos:start="2473:44" pos:end="2473:47"><name pos:start="2473:44" pos:end="2473:47">real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2475:17" pos:end="2475:67"><expr pos:start="2475:17" pos:end="2475:65"><name pos:start="2475:17" pos:end="2475:19">ret</name> <operator pos:start="2475:21" pos:end="2475:21">=</operator> <ternary pos:start="2475:23" pos:end="2475:65"><condition pos:start="2475:23" pos:end="2475:36"><expr pos:start="2475:23" pos:end="2475:34"><name pos:start="2475:23" pos:end="2475:26">temp</name> <operator pos:start="2475:28" pos:end="2475:29">==</operator> <name pos:start="2475:31" pos:end="2475:34">NULL</name></expr> ?</condition><then pos:start="2475:38" pos:end="2475:50"> <expr pos:start="2475:38" pos:end="2475:50"><call pos:start="2475:38" pos:end="2475:50"><name pos:start="2475:38" pos:end="2475:46">get_errno</name><argument_list pos:start="2475:47" pos:end="2475:50">(<argument pos:start="2475:48" pos:end="2475:49"><expr pos:start="2475:48" pos:end="2475:49"><operator pos:start="2475:48" pos:end="2475:48">-</operator><literal type="number" pos:start="2475:49" pos:end="2475:49">1</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="2475:52" pos:end="2475:65">: <expr pos:start="2475:54" pos:end="2475:65"><call pos:start="2475:54" pos:end="2475:65"><name pos:start="2475:54" pos:end="2475:59">strlen</name><argument_list pos:start="2475:60" pos:end="2475:65">(<argument pos:start="2475:61" pos:end="2475:64"><expr pos:start="2475:61" pos:end="2475:64"><name pos:start="2475:61" pos:end="2475:64">real</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>

                <expr_stmt pos:start="2477:17" pos:end="2477:55"><expr pos:start="2477:17" pos:end="2477:54"><call pos:start="2477:17" pos:end="2477:54"><name pos:start="2477:17" pos:end="2477:24">snprintf</name><argument_list pos:start="2477:25" pos:end="2477:54">(<argument pos:start="2477:26" pos:end="2477:35"><expr pos:start="2477:26" pos:end="2477:35"><operator pos:start="2477:26" pos:end="2477:26">(</operator><name pos:start="2477:27" pos:end="2477:30">char</name> <operator pos:start="2477:32" pos:end="2477:32">*</operator><operator pos:start="2477:33" pos:end="2477:33">)</operator><name pos:start="2477:34" pos:end="2477:35">p2</name></expr></argument>, <argument pos:start="2477:38" pos:end="2477:41"><expr pos:start="2477:38" pos:end="2477:41"><name pos:start="2477:38" pos:end="2477:41">arg3</name></expr></argument>, <argument pos:start="2477:44" pos:end="2477:47"><expr pos:start="2477:44" pos:end="2477:47"><literal type="string" pos:start="2477:44" pos:end="2477:47">"%s"</literal></expr></argument>, <argument pos:start="2477:50" pos:end="2477:53"><expr pos:start="2477:50" pos:end="2477:53"><name pos:start="2477:50" pos:end="2477:53">real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2479:15" pos:end="2483:13">else <block pos:start="2479:20" pos:end="2483:13">{<block_content pos:start="2481:17" pos:end="2481:61">

                <expr_stmt pos:start="2481:17" pos:end="2481:61"><expr pos:start="2481:17" pos:end="2481:60"><name pos:start="2481:17" pos:end="2481:19">ret</name> <operator pos:start="2481:21" pos:end="2481:21">=</operator> <call pos:start="2481:23" pos:end="2481:60"><name pos:start="2481:23" pos:end="2481:31">get_errno</name><argument_list pos:start="2481:32" pos:end="2481:60">(<argument pos:start="2481:33" pos:end="2481:59"><expr pos:start="2481:33" pos:end="2481:59"><call pos:start="2481:33" pos:end="2481:59"><name pos:start="2481:33" pos:end="2481:40">readlink</name><argument_list pos:start="2481:41" pos:end="2481:59">(<argument pos:start="2481:42" pos:end="2481:48"><expr pos:start="2481:42" pos:end="2481:48"><call pos:start="2481:42" pos:end="2481:48"><name pos:start="2481:42" pos:end="2481:45">path</name><argument_list pos:start="2481:46" pos:end="2481:48">(<argument pos:start="2481:47" pos:end="2481:47"><expr pos:start="2481:47" pos:end="2481:47"><name pos:start="2481:47" pos:end="2481:47">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2481:51" pos:end="2481:52"><expr pos:start="2481:51" pos:end="2481:52"><name pos:start="2481:51" pos:end="2481:52">p2</name></expr></argument>, <argument pos:start="2481:55" pos:end="2481:58"><expr pos:start="2481:55" pos:end="2481:58"><name pos:start="2481:55" pos:end="2481:58">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="2485:13" pos:end="2485:39"><expr pos:start="2485:13" pos:end="2485:38"><call pos:start="2485:13" pos:end="2485:38"><name pos:start="2485:13" pos:end="2485:23">unlock_user</name><argument_list pos:start="2485:24" pos:end="2485:38">(<argument pos:start="2485:25" pos:end="2485:26"><expr pos:start="2485:25" pos:end="2485:26"><name pos:start="2485:25" pos:end="2485:26">p2</name></expr></argument>, <argument pos:start="2485:29" pos:end="2485:32"><expr pos:start="2485:29" pos:end="2485:32"><name pos:start="2485:29" pos:end="2485:32">arg2</name></expr></argument>, <argument pos:start="2485:35" pos:end="2485:37"><expr pos:start="2485:35" pos:end="2485:37"><name pos:start="2485:35" pos:end="2485:37">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2487:13" pos:end="2487:36"><expr pos:start="2487:13" pos:end="2487:35"><call pos:start="2487:13" pos:end="2487:35"><name pos:start="2487:13" pos:end="2487:23">unlock_user</name><argument_list pos:start="2487:24" pos:end="2487:35">(<argument pos:start="2487:25" pos:end="2487:25"><expr pos:start="2487:25" pos:end="2487:25"><name pos:start="2487:25" pos:end="2487:25">p</name></expr></argument>, <argument pos:start="2487:28" pos:end="2487:31"><expr pos:start="2487:28" pos:end="2487:31"><name pos:start="2487:28" pos:end="2487:31">arg1</name></expr></argument>, <argument pos:start="2487:34" pos:end="2487:34"><expr pos:start="2487:34" pos:end="2487:34"><literal type="number" pos:start="2487:34" pos:end="2487:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2491:9" pos:end="2494:0">break;</break>

<cpp:if pos:start="2493:1" pos:end="2493:33">#<cpp:directive pos:start="2493:2" pos:end="2493:3">if</cpp:directive> <expr pos:start="2493:5" pos:end="2493:33"><call pos:start="2493:5" pos:end="2493:33"><name pos:start="2493:5" pos:end="2493:11">defined</name><argument_list pos:start="2493:12" pos:end="2493:33">(<argument pos:start="2493:13" pos:end="2493:32"><expr pos:start="2493:13" pos:end="2493:32"><name pos:start="2493:13" pos:end="2493:32">TARGET_NR_readlinkat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="2495:5" pos:end="2495:30">case <expr pos:start="2495:10" pos:end="2495:29"><name pos:start="2495:10" pos:end="2495:29">TARGET_NR_readlinkat</name></expr>:</case>

        <block pos:start="2497:9" pos:end="2529:9">{<block_content pos:start="2499:13" pos:end="2527:36">

            <decl_stmt pos:start="2499:13" pos:end="2499:21"><decl pos:start="2499:13" pos:end="2499:20"><type pos:start="2499:13" pos:end="2499:18"><name pos:start="2499:13" pos:end="2499:16">void</name> <modifier pos:start="2499:18" pos:end="2499:18">*</modifier></type><name pos:start="2499:19" pos:end="2499:20">p2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="2501:13" pos:end="2501:40"><expr pos:start="2501:13" pos:end="2501:39"><name pos:start="2501:13" pos:end="2501:13">p</name>  <operator pos:start="2501:16" pos:end="2501:16">=</operator> <call pos:start="2501:18" pos:end="2501:39"><name pos:start="2501:18" pos:end="2501:33">lock_user_string</name><argument_list pos:start="2501:34" pos:end="2501:39">(<argument pos:start="2501:35" pos:end="2501:38"><expr pos:start="2501:35" pos:end="2501:38"><name pos:start="2501:35" pos:end="2501:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2503:13" pos:end="2503:56"><expr pos:start="2503:13" pos:end="2503:55"><name pos:start="2503:13" pos:end="2503:14">p2</name> <operator pos:start="2503:16" pos:end="2503:16">=</operator> <call pos:start="2503:18" pos:end="2503:55"><name pos:start="2503:18" pos:end="2503:26">lock_user</name><argument_list pos:start="2503:27" pos:end="2503:55">(<argument pos:start="2503:28" pos:end="2503:39"><expr pos:start="2503:28" pos:end="2503:39"><name pos:start="2503:28" pos:end="2503:39">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2503:42" pos:end="2503:45"><expr pos:start="2503:42" pos:end="2503:45"><name pos:start="2503:42" pos:end="2503:45">arg3</name></expr></argument>, <argument pos:start="2503:48" pos:end="2503:51"><expr pos:start="2503:48" pos:end="2503:51"><name pos:start="2503:48" pos:end="2503:51">arg4</name></expr></argument>, <argument pos:start="2503:54" pos:end="2503:54"><expr pos:start="2503:54" pos:end="2503:54"><literal type="number" pos:start="2503:54" pos:end="2503:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2505:13" pos:end="2523:13"><if pos:start="2505:13" pos:end="2509:13">if <condition pos:start="2505:16" pos:end="2505:26">(<expr pos:start="2505:17" pos:end="2505:25"><operator pos:start="2505:17" pos:end="2505:17">!</operator><name pos:start="2505:18" pos:end="2505:18">p</name> <operator pos:start="2505:20" pos:end="2505:21">||</operator> <operator pos:start="2505:23" pos:end="2505:23">!</operator><name pos:start="2505:24" pos:end="2505:25">p2</name></expr>)</condition> <block pos:start="2505:28" pos:end="2509:13">{<block_content pos:start="2507:17" pos:end="2507:37">

                <expr_stmt pos:start="2507:17" pos:end="2507:37"><expr pos:start="2507:17" pos:end="2507:36"><name pos:start="2507:17" pos:end="2507:19">ret</name> <operator pos:start="2507:21" pos:end="2507:21">=</operator> <operator pos:start="2507:23" pos:end="2507:23">-</operator><name pos:start="2507:24" pos:end="2507:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="2509:15" pos:end="2519:13">else if <condition pos:start="2509:23" pos:end="2509:62">(<expr pos:start="2509:24" pos:end="2509:61"><call pos:start="2509:24" pos:end="2509:61"><name pos:start="2509:24" pos:end="2509:37">is_proc_myself</name><argument_list pos:start="2509:38" pos:end="2509:61">(<argument pos:start="2509:39" pos:end="2509:53"><expr pos:start="2509:39" pos:end="2509:53"><operator pos:start="2509:39" pos:end="2509:39">(</operator><specifier pos:start="2509:40" pos:end="2509:44">const</specifier> <name pos:start="2509:46" pos:end="2509:49">char</name> <operator pos:start="2509:51" pos:end="2509:51">*</operator><operator pos:start="2509:52" pos:end="2509:52">)</operator><name pos:start="2509:53" pos:end="2509:53">p</name></expr></argument>, <argument pos:start="2509:56" pos:end="2509:60"><expr pos:start="2509:56" pos:end="2509:60"><literal type="string" pos:start="2509:56" pos:end="2509:60">"exe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2509:64" pos:end="2519:13">{<block_content pos:start="2511:17" pos:end="2517:55">

                <decl_stmt pos:start="2511:17" pos:end="2511:43"><decl pos:start="2511:17" pos:end="2511:35"><type pos:start="2511:17" pos:end="2511:20"><name pos:start="2511:17" pos:end="2511:20">char</name></type> <name pos:start="2511:22" pos:end="2511:35"><name pos:start="2511:22" pos:end="2511:25">real</name><index pos:start="2511:26" pos:end="2511:35">[<expr pos:start="2511:27" pos:end="2511:34"><name pos:start="2511:27" pos:end="2511:34">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="2511:38" pos:end="2511:42"><type ref="prev" pos:start="2511:17" pos:end="2511:20"><modifier pos:start="2511:38" pos:end="2511:38">*</modifier></type><name pos:start="2511:39" pos:end="2511:42">temp</name></decl>;</decl_stmt>

                <expr_stmt pos:start="2513:17" pos:end="2513:49"><expr pos:start="2513:17" pos:end="2513:48"><name pos:start="2513:17" pos:end="2513:20">temp</name> <operator pos:start="2513:22" pos:end="2513:22">=</operator> <call pos:start="2513:24" pos:end="2513:48"><name pos:start="2513:24" pos:end="2513:31">realpath</name><argument_list pos:start="2513:32" pos:end="2513:48">(<argument pos:start="2513:33" pos:end="2513:41"><expr pos:start="2513:33" pos:end="2513:41"><name pos:start="2513:33" pos:end="2513:41">exec_path</name></expr></argument>, <argument pos:start="2513:44" pos:end="2513:47"><expr pos:start="2513:44" pos:end="2513:47"><name pos:start="2513:44" pos:end="2513:47">real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2515:17" pos:end="2515:67"><expr pos:start="2515:17" pos:end="2515:65"><name pos:start="2515:17" pos:end="2515:19">ret</name> <operator pos:start="2515:21" pos:end="2515:21">=</operator> <ternary pos:start="2515:23" pos:end="2515:65"><condition pos:start="2515:23" pos:end="2515:36"><expr pos:start="2515:23" pos:end="2515:34"><name pos:start="2515:23" pos:end="2515:26">temp</name> <operator pos:start="2515:28" pos:end="2515:29">==</operator> <name pos:start="2515:31" pos:end="2515:34">NULL</name></expr> ?</condition><then pos:start="2515:38" pos:end="2515:50"> <expr pos:start="2515:38" pos:end="2515:50"><call pos:start="2515:38" pos:end="2515:50"><name pos:start="2515:38" pos:end="2515:46">get_errno</name><argument_list pos:start="2515:47" pos:end="2515:50">(<argument pos:start="2515:48" pos:end="2515:49"><expr pos:start="2515:48" pos:end="2515:49"><operator pos:start="2515:48" pos:end="2515:48">-</operator><literal type="number" pos:start="2515:49" pos:end="2515:49">1</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="2515:52" pos:end="2515:65">: <expr pos:start="2515:54" pos:end="2515:65"><call pos:start="2515:54" pos:end="2515:65"><name pos:start="2515:54" pos:end="2515:59">strlen</name><argument_list pos:start="2515:60" pos:end="2515:65">(<argument pos:start="2515:61" pos:end="2515:64"><expr pos:start="2515:61" pos:end="2515:64"><name pos:start="2515:61" pos:end="2515:64">real</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>

                <expr_stmt pos:start="2517:17" pos:end="2517:55"><expr pos:start="2517:17" pos:end="2517:54"><call pos:start="2517:17" pos:end="2517:54"><name pos:start="2517:17" pos:end="2517:24">snprintf</name><argument_list pos:start="2517:25" pos:end="2517:54">(<argument pos:start="2517:26" pos:end="2517:35"><expr pos:start="2517:26" pos:end="2517:35"><operator pos:start="2517:26" pos:end="2517:26">(</operator><name pos:start="2517:27" pos:end="2517:30">char</name> <operator pos:start="2517:32" pos:end="2517:32">*</operator><operator pos:start="2517:33" pos:end="2517:33">)</operator><name pos:start="2517:34" pos:end="2517:35">p2</name></expr></argument>, <argument pos:start="2517:38" pos:end="2517:41"><expr pos:start="2517:38" pos:end="2517:41"><name pos:start="2517:38" pos:end="2517:41">arg4</name></expr></argument>, <argument pos:start="2517:44" pos:end="2517:47"><expr pos:start="2517:44" pos:end="2517:47"><literal type="string" pos:start="2517:44" pos:end="2517:47">"%s"</literal></expr></argument>, <argument pos:start="2517:50" pos:end="2517:53"><expr pos:start="2517:50" pos:end="2517:53"><name pos:start="2517:50" pos:end="2517:53">real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2519:15" pos:end="2523:13">else <block pos:start="2519:20" pos:end="2523:13">{<block_content pos:start="2521:17" pos:end="2521:69">

                <expr_stmt pos:start="2521:17" pos:end="2521:69"><expr pos:start="2521:17" pos:end="2521:68"><name pos:start="2521:17" pos:end="2521:19">ret</name> <operator pos:start="2521:21" pos:end="2521:21">=</operator> <call pos:start="2521:23" pos:end="2521:68"><name pos:start="2521:23" pos:end="2521:31">get_errno</name><argument_list pos:start="2521:32" pos:end="2521:68">(<argument pos:start="2521:33" pos:end="2521:67"><expr pos:start="2521:33" pos:end="2521:67"><call pos:start="2521:33" pos:end="2521:67"><name pos:start="2521:33" pos:end="2521:42">readlinkat</name><argument_list pos:start="2521:43" pos:end="2521:67">(<argument pos:start="2521:44" pos:end="2521:47"><expr pos:start="2521:44" pos:end="2521:47"><name pos:start="2521:44" pos:end="2521:47">arg1</name></expr></argument>, <argument pos:start="2521:50" pos:end="2521:56"><expr pos:start="2521:50" pos:end="2521:56"><call pos:start="2521:50" pos:end="2521:56"><name pos:start="2521:50" pos:end="2521:53">path</name><argument_list pos:start="2521:54" pos:end="2521:56">(<argument pos:start="2521:55" pos:end="2521:55"><expr pos:start="2521:55" pos:end="2521:55"><name pos:start="2521:55" pos:end="2521:55">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2521:59" pos:end="2521:60"><expr pos:start="2521:59" pos:end="2521:60"><name pos:start="2521:59" pos:end="2521:60">p2</name></expr></argument>, <argument pos:start="2521:63" pos:end="2521:66"><expr pos:start="2521:63" pos:end="2521:66"><name pos:start="2521:63" pos:end="2521:66">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="2525:13" pos:end="2525:39"><expr pos:start="2525:13" pos:end="2525:38"><call pos:start="2525:13" pos:end="2525:38"><name pos:start="2525:13" pos:end="2525:23">unlock_user</name><argument_list pos:start="2525:24" pos:end="2525:38">(<argument pos:start="2525:25" pos:end="2525:26"><expr pos:start="2525:25" pos:end="2525:26"><name pos:start="2525:25" pos:end="2525:26">p2</name></expr></argument>, <argument pos:start="2525:29" pos:end="2525:32"><expr pos:start="2525:29" pos:end="2525:32"><name pos:start="2525:29" pos:end="2525:32">arg3</name></expr></argument>, <argument pos:start="2525:35" pos:end="2525:37"><expr pos:start="2525:35" pos:end="2525:37"><name pos:start="2525:35" pos:end="2525:37">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2527:13" pos:end="2527:36"><expr pos:start="2527:13" pos:end="2527:35"><call pos:start="2527:13" pos:end="2527:35"><name pos:start="2527:13" pos:end="2527:23">unlock_user</name><argument_list pos:start="2527:24" pos:end="2527:35">(<argument pos:start="2527:25" pos:end="2527:25"><expr pos:start="2527:25" pos:end="2527:25"><name pos:start="2527:25" pos:end="2527:25">p</name></expr></argument>, <argument pos:start="2527:28" pos:end="2527:31"><expr pos:start="2527:28" pos:end="2527:31"><name pos:start="2527:28" pos:end="2527:31">arg2</name></expr></argument>, <argument pos:start="2527:34" pos:end="2527:34"><expr pos:start="2527:34" pos:end="2527:34"><literal type="number" pos:start="2527:34" pos:end="2527:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="2531:9" pos:end="2536:0">break;</break>

<cpp:endif pos:start="2533:1" pos:end="2533:6">#<cpp:directive pos:start="2533:2" pos:end="2533:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2535:1" pos:end="2535:23">#<cpp:directive pos:start="2535:2" pos:end="2535:6">ifdef</cpp:directive> <name pos:start="2535:8" pos:end="2535:23">TARGET_NR_uselib</name></cpp:ifdef>

    <case pos:start="2537:5" pos:end="2537:26">case <expr pos:start="2537:10" pos:end="2537:25"><name pos:start="2537:10" pos:end="2537:25">TARGET_NR_uselib</name></expr>:</case>

        <goto pos:start="2539:9" pos:end="2544:0">goto <name pos:start="2539:14" pos:end="2539:26">unimplemented</name>;</goto>

<cpp:endif pos:start="2541:1" pos:end="2541:6">#<cpp:directive pos:start="2541:2" pos:end="2541:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2543:1" pos:end="2543:23">#<cpp:directive pos:start="2543:2" pos:end="2543:6">ifdef</cpp:directive> <name pos:start="2543:8" pos:end="2543:23">TARGET_NR_swapon</name></cpp:ifdef>

    <case pos:start="2545:5" pos:end="2545:26">case <expr pos:start="2545:10" pos:end="2545:25"><name pos:start="2545:10" pos:end="2545:25">TARGET_NR_swapon</name></expr>:</case>

        <if_stmt pos:start="2547:9" pos:end="2549:24"><if pos:start="2547:9" pos:end="2549:24">if <condition pos:start="2547:12" pos:end="2547:42">(<expr pos:start="2547:13" pos:end="2547:41"><operator pos:start="2547:13" pos:end="2547:13">!</operator><operator pos:start="2547:14" pos:end="2547:14">(</operator><name pos:start="2547:15" pos:end="2547:15">p</name> <operator pos:start="2547:17" pos:end="2547:17">=</operator> <call pos:start="2547:19" pos:end="2547:40"><name pos:start="2547:19" pos:end="2547:34">lock_user_string</name><argument_list pos:start="2547:35" pos:end="2547:40">(<argument pos:start="2547:36" pos:end="2547:39"><expr pos:start="2547:36" pos:end="2547:39"><name pos:start="2547:36" pos:end="2547:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2547:41" pos:end="2547:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2549:13" pos:end="2549:24"><block_content pos:start="2549:13" pos:end="2549:24">

            <goto pos:start="2549:13" pos:end="2549:24">goto <name pos:start="2549:18" pos:end="2549:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2551:9" pos:end="2551:41"><expr pos:start="2551:9" pos:end="2551:40"><name pos:start="2551:9" pos:end="2551:11">ret</name> <operator pos:start="2551:13" pos:end="2551:13">=</operator> <call pos:start="2551:15" pos:end="2551:40"><name pos:start="2551:15" pos:end="2551:23">get_errno</name><argument_list pos:start="2551:24" pos:end="2551:40">(<argument pos:start="2551:25" pos:end="2551:39"><expr pos:start="2551:25" pos:end="2551:39"><call pos:start="2551:25" pos:end="2551:39"><name pos:start="2551:25" pos:end="2551:30">swapon</name><argument_list pos:start="2551:31" pos:end="2551:39">(<argument pos:start="2551:32" pos:end="2551:32"><expr pos:start="2551:32" pos:end="2551:32"><name pos:start="2551:32" pos:end="2551:32">p</name></expr></argument>, <argument pos:start="2551:35" pos:end="2551:38"><expr pos:start="2551:35" pos:end="2551:38"><name pos:start="2551:35" pos:end="2551:38">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2553:9" pos:end="2553:32"><expr pos:start="2553:9" pos:end="2553:31"><call pos:start="2553:9" pos:end="2553:31"><name pos:start="2553:9" pos:end="2553:19">unlock_user</name><argument_list pos:start="2553:20" pos:end="2553:31">(<argument pos:start="2553:21" pos:end="2553:21"><expr pos:start="2553:21" pos:end="2553:21"><name pos:start="2553:21" pos:end="2553:21">p</name></expr></argument>, <argument pos:start="2553:24" pos:end="2553:27"><expr pos:start="2553:24" pos:end="2553:27"><name pos:start="2553:24" pos:end="2553:27">arg1</name></expr></argument>, <argument pos:start="2553:30" pos:end="2553:30"><expr pos:start="2553:30" pos:end="2553:30"><literal type="number" pos:start="2553:30" pos:end="2553:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2555:9" pos:end="2558:0">break;</break>

<cpp:endif pos:start="2557:1" pos:end="2557:6">#<cpp:directive pos:start="2557:2" pos:end="2557:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2559:5" pos:end="2559:26">case <expr pos:start="2559:10" pos:end="2559:25"><name pos:start="2559:10" pos:end="2559:25">TARGET_NR_reboot</name></expr>:</case>

        <if_stmt pos:start="2561:9" pos:end="2581:9"><if pos:start="2561:9" pos:end="2577:9">if <condition pos:start="2561:12" pos:end="2561:46">(<expr pos:start="2561:13" pos:end="2561:45"><name pos:start="2561:13" pos:end="2561:16">arg3</name> <operator pos:start="2561:18" pos:end="2561:19">==</operator> <name pos:start="2561:21" pos:end="2561:45">LINUX_REBOOT_CMD_RESTART2</name></expr>)</condition> <block pos:start="2561:48" pos:end="2577:9">{<block_content pos:start="2565:12" pos:end="2575:35">

           <comment type="block" pos:start="2563:12" pos:end="2563:56">/* arg4 must be ignored in all other cases */</comment>

           <expr_stmt pos:start="2565:12" pos:end="2565:38"><expr pos:start="2565:12" pos:end="2565:37"><name pos:start="2565:12" pos:end="2565:12">p</name> <operator pos:start="2565:14" pos:end="2565:14">=</operator> <call pos:start="2565:16" pos:end="2565:37"><name pos:start="2565:16" pos:end="2565:31">lock_user_string</name><argument_list pos:start="2565:32" pos:end="2565:37">(<argument pos:start="2565:33" pos:end="2565:36"><expr pos:start="2565:33" pos:end="2565:36"><name pos:start="2565:33" pos:end="2565:36">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <if_stmt pos:start="2567:12" pos:end="2571:12"><if pos:start="2567:12" pos:end="2571:12">if <condition pos:start="2567:15" pos:end="2567:18">(<expr pos:start="2567:16" pos:end="2567:17"><operator pos:start="2567:16" pos:end="2567:16">!</operator><name pos:start="2567:17" pos:end="2567:17">p</name></expr>)</condition> <block pos:start="2567:20" pos:end="2571:12">{<block_content pos:start="2569:15" pos:end="2569:26">

              <goto pos:start="2569:15" pos:end="2569:26">goto <name pos:start="2569:20" pos:end="2569:25">efault</name>;</goto>

           </block_content>}</block></if></if_stmt>

           <expr_stmt pos:start="2573:12" pos:end="2573:56"><expr pos:start="2573:12" pos:end="2573:55"><name pos:start="2573:12" pos:end="2573:14">ret</name> <operator pos:start="2573:16" pos:end="2573:16">=</operator> <call pos:start="2573:18" pos:end="2573:55"><name pos:start="2573:18" pos:end="2573:26">get_errno</name><argument_list pos:start="2573:27" pos:end="2573:55">(<argument pos:start="2573:28" pos:end="2573:54"><expr pos:start="2573:28" pos:end="2573:54"><call pos:start="2573:28" pos:end="2573:54"><name pos:start="2573:28" pos:end="2573:33">reboot</name><argument_list pos:start="2573:34" pos:end="2573:54">(<argument pos:start="2573:35" pos:end="2573:38"><expr pos:start="2573:35" pos:end="2573:38"><name pos:start="2573:35" pos:end="2573:38">arg1</name></expr></argument>, <argument pos:start="2573:41" pos:end="2573:44"><expr pos:start="2573:41" pos:end="2573:44"><name pos:start="2573:41" pos:end="2573:44">arg2</name></expr></argument>, <argument pos:start="2573:47" pos:end="2573:50"><expr pos:start="2573:47" pos:end="2573:50"><name pos:start="2573:47" pos:end="2573:50">arg3</name></expr></argument>, <argument pos:start="2573:53" pos:end="2573:53"><expr pos:start="2573:53" pos:end="2573:53"><name pos:start="2573:53" pos:end="2573:53">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="2575:12" pos:end="2575:35"><expr pos:start="2575:12" pos:end="2575:34"><call pos:start="2575:12" pos:end="2575:34"><name pos:start="2575:12" pos:end="2575:22">unlock_user</name><argument_list pos:start="2575:23" pos:end="2575:34">(<argument pos:start="2575:24" pos:end="2575:24"><expr pos:start="2575:24" pos:end="2575:24"><name pos:start="2575:24" pos:end="2575:24">p</name></expr></argument>, <argument pos:start="2575:27" pos:end="2575:30"><expr pos:start="2575:27" pos:end="2575:30"><name pos:start="2575:27" pos:end="2575:30">arg4</name></expr></argument>, <argument pos:start="2575:33" pos:end="2575:33"><expr pos:start="2575:33" pos:end="2575:33"><literal type="number" pos:start="2575:33" pos:end="2575:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2577:11" pos:end="2581:9">else <block pos:start="2577:16" pos:end="2581:9">{<block_content pos:start="2579:12" pos:end="2579:59">

           <expr_stmt pos:start="2579:12" pos:end="2579:59"><expr pos:start="2579:12" pos:end="2579:58"><name pos:start="2579:12" pos:end="2579:14">ret</name> <operator pos:start="2579:16" pos:end="2579:16">=</operator> <call pos:start="2579:18" pos:end="2579:58"><name pos:start="2579:18" pos:end="2579:26">get_errno</name><argument_list pos:start="2579:27" pos:end="2579:58">(<argument pos:start="2579:28" pos:end="2579:57"><expr pos:start="2579:28" pos:end="2579:57"><call pos:start="2579:28" pos:end="2579:57"><name pos:start="2579:28" pos:end="2579:33">reboot</name><argument_list pos:start="2579:34" pos:end="2579:57">(<argument pos:start="2579:35" pos:end="2579:38"><expr pos:start="2579:35" pos:end="2579:38"><name pos:start="2579:35" pos:end="2579:38">arg1</name></expr></argument>, <argument pos:start="2579:41" pos:end="2579:44"><expr pos:start="2579:41" pos:end="2579:44"><name pos:start="2579:41" pos:end="2579:44">arg2</name></expr></argument>, <argument pos:start="2579:47" pos:end="2579:50"><expr pos:start="2579:47" pos:end="2579:50"><name pos:start="2579:47" pos:end="2579:50">arg3</name></expr></argument>, <argument pos:start="2579:53" pos:end="2579:56"><expr pos:start="2579:53" pos:end="2579:56"><name pos:start="2579:53" pos:end="2579:56">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2583:9" pos:end="2586:0">break;</break>

<cpp:ifdef pos:start="2585:1" pos:end="2585:24">#<cpp:directive pos:start="2585:2" pos:end="2585:6">ifdef</cpp:directive> <name pos:start="2585:8" pos:end="2585:24">TARGET_NR_readdir</name></cpp:ifdef>

    <case pos:start="2587:5" pos:end="2587:27">case <expr pos:start="2587:10" pos:end="2587:26"><name pos:start="2587:10" pos:end="2587:26">TARGET_NR_readdir</name></expr>:</case>

        <goto pos:start="2589:9" pos:end="2594:0">goto <name pos:start="2589:14" pos:end="2589:26">unimplemented</name>;</goto>

<cpp:endif pos:start="2591:1" pos:end="2591:6">#<cpp:directive pos:start="2591:2" pos:end="2591:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2593:1" pos:end="2593:21">#<cpp:directive pos:start="2593:2" pos:end="2593:6">ifdef</cpp:directive> <name pos:start="2593:8" pos:end="2593:21">TARGET_NR_mmap</name></cpp:ifdef>

    <case pos:start="2595:5" pos:end="2604:0">case <expr pos:start="2595:10" pos:end="2595:23"><name pos:start="2595:10" pos:end="2595:23">TARGET_NR_mmap</name></expr>:</case>

<cpp:if pos:start="2597:1" pos:end="2603:28">#<cpp:directive pos:start="2597:2" pos:end="2597:3">if</cpp:directive> <expr pos:start="2597:5" pos:end="2603:28"><operator pos:start="2597:5" pos:end="2597:5">(</operator><call pos:start="2597:6" pos:end="2597:25"><name pos:start="2597:6" pos:end="2597:12">defined</name><argument_list pos:start="2597:13" pos:end="2597:25">(<argument pos:start="2597:14" pos:end="2597:24"><expr pos:start="2597:14" pos:end="2597:24"><name pos:start="2597:14" pos:end="2597:24">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="2597:27" pos:end="2597:28">&amp;&amp;</operator> <call pos:start="2597:30" pos:end="2597:50"><name pos:start="2597:30" pos:end="2597:36">defined</name><argument_list pos:start="2597:37" pos:end="2597:50">(<argument pos:start="2597:38" pos:end="2597:49"><expr pos:start="2597:38" pos:end="2597:49"><name pos:start="2597:38" pos:end="2597:49">TARGET_ABI32</name></expr></argument>)</argument_list></call><operator pos:start="2597:51" pos:end="2597:51">)</operator> <operator pos:start="2597:53" pos:end="2597:54">||</operator> \

    <operator pos:start="2599:5" pos:end="2599:5">(</operator><call pos:start="2599:6" pos:end="2599:24"><name pos:start="2599:6" pos:end="2599:12">defined</name><argument_list pos:start="2599:13" pos:end="2599:24">(<argument pos:start="2599:14" pos:end="2599:23"><expr pos:start="2599:14" pos:end="2599:23"><name pos:start="2599:14" pos:end="2599:23">TARGET_ARM</name></expr></argument>)</argument_list></call> <operator pos:start="2599:26" pos:end="2599:27">&amp;&amp;</operator> <call pos:start="2599:29" pos:end="2599:49"><name pos:start="2599:29" pos:end="2599:35">defined</name><argument_list pos:start="2599:36" pos:end="2599:49">(<argument pos:start="2599:37" pos:end="2599:48"><expr pos:start="2599:37" pos:end="2599:48"><name pos:start="2599:37" pos:end="2599:48">TARGET_ABI32</name></expr></argument>)</argument_list></call><operator pos:start="2599:50" pos:end="2599:50">)</operator> <operator pos:start="2599:52" pos:end="2599:53">||</operator> \

    <call pos:start="2601:5" pos:end="2601:24"><name pos:start="2601:5" pos:end="2601:11">defined</name><argument_list pos:start="2601:12" pos:end="2601:24">(<argument pos:start="2601:13" pos:end="2601:23"><expr pos:start="2601:13" pos:end="2601:23"><name pos:start="2601:13" pos:end="2601:23">TARGET_M68K</name></expr></argument>)</argument_list></call> <operator pos:start="2601:26" pos:end="2601:27">||</operator> <call pos:start="2601:29" pos:end="2601:48"><name pos:start="2601:29" pos:end="2601:35">defined</name><argument_list pos:start="2601:36" pos:end="2601:48">(<argument pos:start="2601:37" pos:end="2601:47"><expr pos:start="2601:37" pos:end="2601:47"><name pos:start="2601:37" pos:end="2601:47">TARGET_CRIS</name></expr></argument>)</argument_list></call> <operator pos:start="2601:50" pos:end="2601:51">||</operator> <call pos:start="2601:53" pos:end="2601:78"><name pos:start="2601:53" pos:end="2601:59">defined</name><argument_list pos:start="2601:60" pos:end="2601:78">(<argument pos:start="2601:61" pos:end="2601:77"><expr pos:start="2601:61" pos:end="2601:77"><name pos:start="2601:61" pos:end="2601:77">TARGET_MICROBLAZE</name></expr></argument>)</argument_list></call> \

    <operator pos:start="2603:5" pos:end="2603:6">||</operator> <call pos:start="2603:8" pos:end="2603:28"><name pos:start="2603:8" pos:end="2603:14">defined</name><argument_list pos:start="2603:15" pos:end="2603:28">(<argument pos:start="2603:16" pos:end="2603:27"><expr pos:start="2603:16" pos:end="2603:27"><name pos:start="2603:16" pos:end="2603:27">TARGET_S390X</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <block pos:start="2605:9" pos:end="2638:0">{<block_content pos:start="2607:13" pos:end="2633:49">

            <decl_stmt pos:start="2607:13" pos:end="2607:25"><decl pos:start="2607:13" pos:end="2607:24"><type pos:start="2607:13" pos:end="2607:23"><name pos:start="2607:13" pos:end="2607:21">abi_ulong</name> <modifier pos:start="2607:23" pos:end="2607:23">*</modifier></type><name pos:start="2607:24" pos:end="2607:24">v</name></decl>;</decl_stmt>

            <decl_stmt pos:start="2609:13" pos:end="2609:45"><decl pos:start="2609:13" pos:end="2609:24"><type pos:start="2609:13" pos:end="2609:21"><name pos:start="2609:13" pos:end="2609:21">abi_ulong</name></type> <name pos:start="2609:23" pos:end="2609:24">v1</name></decl>, <decl pos:start="2609:27" pos:end="2609:28"><type ref="prev" pos:start="2609:13" pos:end="2609:21"/><name pos:start="2609:27" pos:end="2609:28">v2</name></decl>, <decl pos:start="2609:31" pos:end="2609:32"><type ref="prev" pos:start="2609:13" pos:end="2609:21"/><name pos:start="2609:31" pos:end="2609:32">v3</name></decl>, <decl pos:start="2609:35" pos:end="2609:36"><type ref="prev" pos:start="2609:13" pos:end="2609:21"/><name pos:start="2609:35" pos:end="2609:36">v4</name></decl>, <decl pos:start="2609:39" pos:end="2609:40"><type ref="prev" pos:start="2609:13" pos:end="2609:21"/><name pos:start="2609:39" pos:end="2609:40">v5</name></decl>, <decl pos:start="2609:43" pos:end="2609:44"><type ref="prev" pos:start="2609:13" pos:end="2609:21"/><name pos:start="2609:43" pos:end="2609:44">v6</name></decl>;</decl_stmt>

            <if_stmt pos:start="2611:13" pos:end="2613:28"><if pos:start="2611:13" pos:end="2613:28">if <condition pos:start="2611:16" pos:end="2611:78">(<expr pos:start="2611:17" pos:end="2611:77"><operator pos:start="2611:17" pos:end="2611:17">!</operator><operator pos:start="2611:18" pos:end="2611:18">(</operator><name pos:start="2611:19" pos:end="2611:19">v</name> <operator pos:start="2611:21" pos:end="2611:21">=</operator> <call pos:start="2611:23" pos:end="2611:76"><name pos:start="2611:23" pos:end="2611:31">lock_user</name><argument_list pos:start="2611:32" pos:end="2611:76">(<argument pos:start="2611:33" pos:end="2611:43"><expr pos:start="2611:33" pos:end="2611:43"><name pos:start="2611:33" pos:end="2611:43">VERIFY_READ</name></expr></argument>, <argument pos:start="2611:46" pos:end="2611:49"><expr pos:start="2611:46" pos:end="2611:49"><name pos:start="2611:46" pos:end="2611:49">arg1</name></expr></argument>, <argument pos:start="2611:52" pos:end="2611:72"><expr pos:start="2611:52" pos:end="2611:72"><literal type="number" pos:start="2611:52" pos:end="2611:52">6</literal> <operator pos:start="2611:54" pos:end="2611:54">*</operator> <sizeof pos:start="2611:56" pos:end="2611:72">sizeof<argument_list pos:start="2611:62" pos:end="2611:72">(<argument pos:start="2611:63" pos:end="2611:71"><expr pos:start="2611:63" pos:end="2611:71"><name pos:start="2611:63" pos:end="2611:71">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="2611:75" pos:end="2611:75"><expr pos:start="2611:75" pos:end="2611:75"><literal type="number" pos:start="2611:75" pos:end="2611:75">1</literal></expr></argument>)</argument_list></call><operator pos:start="2611:77" pos:end="2611:77">)</operator></expr>)</condition><block type="pseudo" pos:start="2613:17" pos:end="2613:28"><block_content pos:start="2613:17" pos:end="2613:28">

                <goto pos:start="2613:17" pos:end="2613:28">goto <name pos:start="2613:22" pos:end="2613:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2615:13" pos:end="2615:31"><expr pos:start="2615:13" pos:end="2615:30"><name pos:start="2615:13" pos:end="2615:14">v1</name> <operator pos:start="2615:16" pos:end="2615:16">=</operator> <call pos:start="2615:18" pos:end="2615:30"><name pos:start="2615:18" pos:end="2615:24">tswapal</name><argument_list pos:start="2615:25" pos:end="2615:30">(<argument pos:start="2615:26" pos:end="2615:29"><expr pos:start="2615:26" pos:end="2615:29"><name pos:start="2615:26" pos:end="2615:29"><name pos:start="2615:26" pos:end="2615:26">v</name><index pos:start="2615:27" pos:end="2615:29">[<expr pos:start="2615:28" pos:end="2615:28"><literal type="number" pos:start="2615:28" pos:end="2615:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2617:13" pos:end="2617:31"><expr pos:start="2617:13" pos:end="2617:30"><name pos:start="2617:13" pos:end="2617:14">v2</name> <operator pos:start="2617:16" pos:end="2617:16">=</operator> <call pos:start="2617:18" pos:end="2617:30"><name pos:start="2617:18" pos:end="2617:24">tswapal</name><argument_list pos:start="2617:25" pos:end="2617:30">(<argument pos:start="2617:26" pos:end="2617:29"><expr pos:start="2617:26" pos:end="2617:29"><name pos:start="2617:26" pos:end="2617:29"><name pos:start="2617:26" pos:end="2617:26">v</name><index pos:start="2617:27" pos:end="2617:29">[<expr pos:start="2617:28" pos:end="2617:28"><literal type="number" pos:start="2617:28" pos:end="2617:28">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2619:13" pos:end="2619:31"><expr pos:start="2619:13" pos:end="2619:30"><name pos:start="2619:13" pos:end="2619:14">v3</name> <operator pos:start="2619:16" pos:end="2619:16">=</operator> <call pos:start="2619:18" pos:end="2619:30"><name pos:start="2619:18" pos:end="2619:24">tswapal</name><argument_list pos:start="2619:25" pos:end="2619:30">(<argument pos:start="2619:26" pos:end="2619:29"><expr pos:start="2619:26" pos:end="2619:29"><name pos:start="2619:26" pos:end="2619:29"><name pos:start="2619:26" pos:end="2619:26">v</name><index pos:start="2619:27" pos:end="2619:29">[<expr pos:start="2619:28" pos:end="2619:28"><literal type="number" pos:start="2619:28" pos:end="2619:28">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2621:13" pos:end="2621:31"><expr pos:start="2621:13" pos:end="2621:30"><name pos:start="2621:13" pos:end="2621:14">v4</name> <operator pos:start="2621:16" pos:end="2621:16">=</operator> <call pos:start="2621:18" pos:end="2621:30"><name pos:start="2621:18" pos:end="2621:24">tswapal</name><argument_list pos:start="2621:25" pos:end="2621:30">(<argument pos:start="2621:26" pos:end="2621:29"><expr pos:start="2621:26" pos:end="2621:29"><name pos:start="2621:26" pos:end="2621:29"><name pos:start="2621:26" pos:end="2621:26">v</name><index pos:start="2621:27" pos:end="2621:29">[<expr pos:start="2621:28" pos:end="2621:28"><literal type="number" pos:start="2621:28" pos:end="2621:28">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2623:13" pos:end="2623:31"><expr pos:start="2623:13" pos:end="2623:30"><name pos:start="2623:13" pos:end="2623:14">v5</name> <operator pos:start="2623:16" pos:end="2623:16">=</operator> <call pos:start="2623:18" pos:end="2623:30"><name pos:start="2623:18" pos:end="2623:24">tswapal</name><argument_list pos:start="2623:25" pos:end="2623:30">(<argument pos:start="2623:26" pos:end="2623:29"><expr pos:start="2623:26" pos:end="2623:29"><name pos:start="2623:26" pos:end="2623:29"><name pos:start="2623:26" pos:end="2623:26">v</name><index pos:start="2623:27" pos:end="2623:29">[<expr pos:start="2623:28" pos:end="2623:28"><literal type="number" pos:start="2623:28" pos:end="2623:28">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2625:13" pos:end="2625:31"><expr pos:start="2625:13" pos:end="2625:30"><name pos:start="2625:13" pos:end="2625:14">v6</name> <operator pos:start="2625:16" pos:end="2625:16">=</operator> <call pos:start="2625:18" pos:end="2625:30"><name pos:start="2625:18" pos:end="2625:24">tswapal</name><argument_list pos:start="2625:25" pos:end="2625:30">(<argument pos:start="2625:26" pos:end="2625:29"><expr pos:start="2625:26" pos:end="2625:29"><name pos:start="2625:26" pos:end="2625:29"><name pos:start="2625:26" pos:end="2625:26">v</name><index pos:start="2625:27" pos:end="2625:29">[<expr pos:start="2625:28" pos:end="2625:28"><literal type="number" pos:start="2625:28" pos:end="2625:28">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2627:13" pos:end="2627:36"><expr pos:start="2627:13" pos:end="2627:35"><call pos:start="2627:13" pos:end="2627:35"><name pos:start="2627:13" pos:end="2627:23">unlock_user</name><argument_list pos:start="2627:24" pos:end="2627:35">(<argument pos:start="2627:25" pos:end="2627:25"><expr pos:start="2627:25" pos:end="2627:25"><name pos:start="2627:25" pos:end="2627:25">v</name></expr></argument>, <argument pos:start="2627:28" pos:end="2627:31"><expr pos:start="2627:28" pos:end="2627:31"><name pos:start="2627:28" pos:end="2627:31">arg1</name></expr></argument>, <argument pos:start="2627:34" pos:end="2627:34"><expr pos:start="2627:34" pos:end="2627:34"><literal type="number" pos:start="2627:34" pos:end="2627:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2629:13" pos:end="2633:49"><expr pos:start="2629:13" pos:end="2633:48"><name pos:start="2629:13" pos:end="2629:15">ret</name> <operator pos:start="2629:17" pos:end="2629:17">=</operator> <call pos:start="2629:19" pos:end="2633:48"><name pos:start="2629:19" pos:end="2629:27">get_errno</name><argument_list pos:start="2629:28" pos:end="2633:48">(<argument pos:start="2629:29" pos:end="2633:47"><expr pos:start="2629:29" pos:end="2633:47"><call pos:start="2629:29" pos:end="2633:47"><name pos:start="2629:29" pos:end="2629:39">target_mmap</name><argument_list pos:start="2629:40" pos:end="2633:47">(<argument pos:start="2629:41" pos:end="2629:42"><expr pos:start="2629:41" pos:end="2629:42"><name pos:start="2629:41" pos:end="2629:42">v1</name></expr></argument>, <argument pos:start="2629:45" pos:end="2629:46"><expr pos:start="2629:45" pos:end="2629:46"><name pos:start="2629:45" pos:end="2629:46">v2</name></expr></argument>, <argument pos:start="2629:49" pos:end="2629:50"><expr pos:start="2629:49" pos:end="2629:50"><name pos:start="2629:49" pos:end="2629:50">v3</name></expr></argument>,

                                        <argument pos:start="2631:41" pos:end="2631:82"><expr pos:start="2631:41" pos:end="2631:82"><call pos:start="2631:41" pos:end="2631:82"><name pos:start="2631:41" pos:end="2631:62">target_to_host_bitmask</name><argument_list pos:start="2631:63" pos:end="2631:82">(<argument pos:start="2631:64" pos:end="2631:65"><expr pos:start="2631:64" pos:end="2631:65"><name pos:start="2631:64" pos:end="2631:65">v4</name></expr></argument>, <argument pos:start="2631:68" pos:end="2631:81"><expr pos:start="2631:68" pos:end="2631:81"><name pos:start="2631:68" pos:end="2631:81">mmap_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="2633:41" pos:end="2633:42"><expr pos:start="2633:41" pos:end="2633:42"><name pos:start="2633:41" pos:end="2633:42">v5</name></expr></argument>, <argument pos:start="2633:45" pos:end="2633:46"><expr pos:start="2633:45" pos:end="2633:46"><name pos:start="2633:45" pos:end="2633:46">v6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:else pos:start="2637:1" pos:end="2637:5">#<cpp:directive pos:start="2637:2" pos:end="2637:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="2639:9" pos:end="2648:0"><expr pos:start="2639:9" pos:end="2645:42"><name pos:start="2639:9" pos:end="2639:11">ret</name> <operator pos:start="2639:13" pos:end="2639:13">=</operator> <call pos:start="2639:15" pos:end="2645:42"><name pos:start="2639:15" pos:end="2639:23">get_errno</name><argument_list pos:start="2639:24" pos:end="2645:42">(<argument pos:start="2639:25" pos:end="2645:41"><expr pos:start="2639:25" pos:end="2645:41"><call pos:start="2639:25" pos:end="2645:41"><name pos:start="2639:25" pos:end="2639:35">target_mmap</name><argument_list pos:start="2639:36" pos:end="2645:41">(<argument pos:start="2639:37" pos:end="2639:40"><expr pos:start="2639:37" pos:end="2639:40"><name pos:start="2639:37" pos:end="2639:40">arg1</name></expr></argument>, <argument pos:start="2639:43" pos:end="2639:46"><expr pos:start="2639:43" pos:end="2639:46"><name pos:start="2639:43" pos:end="2639:46">arg2</name></expr></argument>, <argument pos:start="2639:49" pos:end="2639:52"><expr pos:start="2639:49" pos:end="2639:52"><name pos:start="2639:49" pos:end="2639:52">arg3</name></expr></argument>,

                                    <argument pos:start="2641:37" pos:end="2641:80"><expr pos:start="2641:37" pos:end="2641:80"><call pos:start="2641:37" pos:end="2641:80"><name pos:start="2641:37" pos:end="2641:58">target_to_host_bitmask</name><argument_list pos:start="2641:59" pos:end="2641:80">(<argument pos:start="2641:60" pos:end="2641:63"><expr pos:start="2641:60" pos:end="2641:63"><name pos:start="2641:60" pos:end="2641:63">arg4</name></expr></argument>, <argument pos:start="2641:66" pos:end="2641:79"><expr pos:start="2641:66" pos:end="2641:79"><name pos:start="2641:66" pos:end="2641:79">mmap_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="2643:37" pos:end="2643:40"><expr pos:start="2643:37" pos:end="2643:40"><name pos:start="2643:37" pos:end="2643:40">arg5</name></expr></argument>,

                                    <argument pos:start="2645:37" pos:end="2645:40"><expr pos:start="2645:37" pos:end="2645:40"><name pos:start="2645:37" pos:end="2645:40">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="2647:1" pos:end="2647:6">#<cpp:directive pos:start="2647:2" pos:end="2647:6">endif</cpp:directive></cpp:endif>

        <break pos:start="2649:9" pos:end="2654:0">break;</break>

<cpp:endif pos:start="2651:1" pos:end="2651:6">#<cpp:directive pos:start="2651:2" pos:end="2651:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2653:1" pos:end="2653:22">#<cpp:directive pos:start="2653:2" pos:end="2653:6">ifdef</cpp:directive> <name pos:start="2653:8" pos:end="2653:22">TARGET_NR_mmap2</name></cpp:ifdef>

    <case pos:start="2655:5" pos:end="2662:0">case <expr pos:start="2655:10" pos:end="2655:24"><name pos:start="2655:10" pos:end="2655:24">TARGET_NR_mmap2</name></expr>:</case>

<cpp:ifndef pos:start="2657:1" pos:end="2657:18">#<cpp:directive pos:start="2657:2" pos:end="2657:7">ifndef</cpp:directive> <name pos:start="2657:9" pos:end="2657:18">MMAP_SHIFT</name></cpp:ifndef>

<cpp:define pos:start="2659:1" pos:end="2659:21">#<cpp:directive pos:start="2659:2" pos:end="2659:7">define</cpp:directive> <cpp:macro pos:start="2659:9" pos:end="2659:18"><name pos:start="2659:9" pos:end="2659:18">MMAP_SHIFT</name></cpp:macro> <cpp:value pos:start="2659:20" pos:end="2659:21">12</cpp:value></cpp:define>

<cpp:endif pos:start="2661:1" pos:end="2661:6">#<cpp:directive pos:start="2661:2" pos:end="2661:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="2663:9" pos:end="2669:57"><expr pos:start="2663:9" pos:end="2669:56"><name pos:start="2663:9" pos:end="2663:11">ret</name> <operator pos:start="2663:13" pos:end="2663:13">=</operator> <call pos:start="2663:15" pos:end="2669:56"><name pos:start="2663:15" pos:end="2663:23">get_errno</name><argument_list pos:start="2663:24" pos:end="2669:56">(<argument pos:start="2663:25" pos:end="2669:55"><expr pos:start="2663:25" pos:end="2669:55"><call pos:start="2663:25" pos:end="2669:55"><name pos:start="2663:25" pos:end="2663:35">target_mmap</name><argument_list pos:start="2663:36" pos:end="2669:55">(<argument pos:start="2663:37" pos:end="2663:40"><expr pos:start="2663:37" pos:end="2663:40"><name pos:start="2663:37" pos:end="2663:40">arg1</name></expr></argument>, <argument pos:start="2663:43" pos:end="2663:46"><expr pos:start="2663:43" pos:end="2663:46"><name pos:start="2663:43" pos:end="2663:46">arg2</name></expr></argument>, <argument pos:start="2663:49" pos:end="2663:52"><expr pos:start="2663:49" pos:end="2663:52"><name pos:start="2663:49" pos:end="2663:52">arg3</name></expr></argument>,

                                    <argument pos:start="2665:37" pos:end="2665:80"><expr pos:start="2665:37" pos:end="2665:80"><call pos:start="2665:37" pos:end="2665:80"><name pos:start="2665:37" pos:end="2665:58">target_to_host_bitmask</name><argument_list pos:start="2665:59" pos:end="2665:80">(<argument pos:start="2665:60" pos:end="2665:63"><expr pos:start="2665:60" pos:end="2665:63"><name pos:start="2665:60" pos:end="2665:63">arg4</name></expr></argument>, <argument pos:start="2665:66" pos:end="2665:79"><expr pos:start="2665:66" pos:end="2665:79"><name pos:start="2665:66" pos:end="2665:79">mmap_flags_tbl</name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="2667:37" pos:end="2667:40"><expr pos:start="2667:37" pos:end="2667:40"><name pos:start="2667:37" pos:end="2667:40">arg5</name></expr></argument>,

                                    <argument pos:start="2669:37" pos:end="2669:54"><expr pos:start="2669:37" pos:end="2669:54"><name pos:start="2669:37" pos:end="2669:40">arg6</name> <operator pos:start="2669:42" pos:end="2669:43">&lt;&lt;</operator> <name pos:start="2669:45" pos:end="2669:54">MMAP_SHIFT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2671:9" pos:end="2674:0">break;</break>

<cpp:endif pos:start="2673:1" pos:end="2673:6">#<cpp:directive pos:start="2673:2" pos:end="2673:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2675:5" pos:end="2675:26">case <expr pos:start="2675:10" pos:end="2675:25"><name pos:start="2675:10" pos:end="2675:25">TARGET_NR_munmap</name></expr>:</case>

        <expr_stmt pos:start="2677:9" pos:end="2677:51"><expr pos:start="2677:9" pos:end="2677:50"><name pos:start="2677:9" pos:end="2677:11">ret</name> <operator pos:start="2677:13" pos:end="2677:13">=</operator> <call pos:start="2677:15" pos:end="2677:50"><name pos:start="2677:15" pos:end="2677:23">get_errno</name><argument_list pos:start="2677:24" pos:end="2677:50">(<argument pos:start="2677:25" pos:end="2677:49"><expr pos:start="2677:25" pos:end="2677:49"><call pos:start="2677:25" pos:end="2677:49"><name pos:start="2677:25" pos:end="2677:37">target_munmap</name><argument_list pos:start="2677:38" pos:end="2677:49">(<argument pos:start="2677:39" pos:end="2677:42"><expr pos:start="2677:39" pos:end="2677:42"><name pos:start="2677:39" pos:end="2677:42">arg1</name></expr></argument>, <argument pos:start="2677:45" pos:end="2677:48"><expr pos:start="2677:45" pos:end="2677:48"><name pos:start="2677:45" pos:end="2677:48">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2679:9" pos:end="2679:14">break;</break>

    <case pos:start="2681:5" pos:end="2681:28">case <expr pos:start="2681:10" pos:end="2681:27"><name pos:start="2681:10" pos:end="2681:27">TARGET_NR_mprotect</name></expr>:</case>

        <block pos:start="2683:9" pos:end="2703:9">{<block_content pos:start="2685:13" pos:end="2701:13">

            <decl_stmt pos:start="2685:13" pos:end="2685:40"><decl pos:start="2685:13" pos:end="2685:39"><type pos:start="2685:13" pos:end="2685:23"><name pos:start="2685:13" pos:end="2685:21">TaskState</name> <modifier pos:start="2685:23" pos:end="2685:23">*</modifier></type><name pos:start="2685:24" pos:end="2685:25">ts</name> <init pos:start="2685:27" pos:end="2685:39">= <expr pos:start="2685:29" pos:end="2685:39"><name pos:start="2685:29" pos:end="2685:39"><name pos:start="2685:29" pos:end="2685:31">cpu</name><operator pos:start="2685:32" pos:end="2685:33">-&gt;</operator><name pos:start="2685:34" pos:end="2685:39">opaque</name></name></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="2687:13" pos:end="2687:75">/* Special hack to detect libc making the stack executable.  */</comment>

            <if_stmt pos:start="2689:13" pos:end="2701:13"><if pos:start="2689:13" pos:end="2701:13">if <condition pos:start="2689:16" pos:end="2693:49">(<expr pos:start="2689:17" pos:end="2693:48"><operator pos:start="2689:17" pos:end="2689:17">(</operator><name pos:start="2689:18" pos:end="2689:21">arg3</name> <operator pos:start="2689:23" pos:end="2689:23">&amp;</operator> <name pos:start="2689:25" pos:end="2689:38">PROT_GROWSDOWN</name><operator pos:start="2689:39" pos:end="2689:39">)</operator>

                <operator pos:start="2691:17" pos:end="2691:18">&amp;&amp;</operator> <name pos:start="2691:20" pos:end="2691:23">arg1</name> <operator pos:start="2691:25" pos:end="2691:26">&gt;=</operator> <name pos:start="2691:28" pos:end="2691:48"><name pos:start="2691:28" pos:end="2691:29">ts</name><operator pos:start="2691:30" pos:end="2691:31">-&gt;</operator><name pos:start="2691:32" pos:end="2691:35">info</name><operator pos:start="2691:36" pos:end="2691:37">-&gt;</operator><name pos:start="2691:38" pos:end="2691:48">stack_limit</name></name>

                <operator pos:start="2693:17" pos:end="2693:18">&amp;&amp;</operator> <name pos:start="2693:20" pos:end="2693:23">arg1</name> <operator pos:start="2693:25" pos:end="2693:26">&lt;=</operator> <name pos:start="2693:28" pos:end="2693:48"><name pos:start="2693:28" pos:end="2693:29">ts</name><operator pos:start="2693:30" pos:end="2693:31">-&gt;</operator><name pos:start="2693:32" pos:end="2693:35">info</name><operator pos:start="2693:36" pos:end="2693:37">-&gt;</operator><name pos:start="2693:38" pos:end="2693:48">start_stack</name></name></expr>)</condition> <block pos:start="2693:51" pos:end="2701:13">{<block_content pos:start="2695:17" pos:end="2699:45">

                <expr_stmt pos:start="2695:17" pos:end="2695:40"><expr pos:start="2695:17" pos:end="2695:39"><name pos:start="2695:17" pos:end="2695:20">arg3</name> <operator pos:start="2695:22" pos:end="2695:23">&amp;=</operator> <operator pos:start="2695:25" pos:end="2695:25">~</operator><name pos:start="2695:26" pos:end="2695:39">PROT_GROWSDOWN</name></expr>;</expr_stmt>

                <expr_stmt pos:start="2697:17" pos:end="2697:59"><expr pos:start="2697:17" pos:end="2697:58"><name pos:start="2697:17" pos:end="2697:20">arg2</name> <operator pos:start="2697:22" pos:end="2697:22">=</operator> <name pos:start="2697:24" pos:end="2697:27">arg2</name> <operator pos:start="2697:29" pos:end="2697:29">+</operator> <name pos:start="2697:31" pos:end="2697:34">arg1</name> <operator pos:start="2697:36" pos:end="2697:36">-</operator> <name pos:start="2697:38" pos:end="2697:58"><name pos:start="2697:38" pos:end="2697:39">ts</name><operator pos:start="2697:40" pos:end="2697:41">-&gt;</operator><name pos:start="2697:42" pos:end="2697:45">info</name><operator pos:start="2697:46" pos:end="2697:47">-&gt;</operator><name pos:start="2697:48" pos:end="2697:58">stack_limit</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="2699:17" pos:end="2699:45"><expr pos:start="2699:17" pos:end="2699:44"><name pos:start="2699:17" pos:end="2699:20">arg1</name> <operator pos:start="2699:22" pos:end="2699:22">=</operator> <name pos:start="2699:24" pos:end="2699:44"><name pos:start="2699:24" pos:end="2699:25">ts</name><operator pos:start="2699:26" pos:end="2699:27">-&gt;</operator><name pos:start="2699:28" pos:end="2699:31">info</name><operator pos:start="2699:32" pos:end="2699:33">-&gt;</operator><name pos:start="2699:34" pos:end="2699:44">stack_limit</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="2705:9" pos:end="2705:59"><expr pos:start="2705:9" pos:end="2705:58"><name pos:start="2705:9" pos:end="2705:11">ret</name> <operator pos:start="2705:13" pos:end="2705:13">=</operator> <call pos:start="2705:15" pos:end="2705:58"><name pos:start="2705:15" pos:end="2705:23">get_errno</name><argument_list pos:start="2705:24" pos:end="2705:58">(<argument pos:start="2705:25" pos:end="2705:57"><expr pos:start="2705:25" pos:end="2705:57"><call pos:start="2705:25" pos:end="2705:57"><name pos:start="2705:25" pos:end="2705:39">target_mprotect</name><argument_list pos:start="2705:40" pos:end="2705:57">(<argument pos:start="2705:41" pos:end="2705:44"><expr pos:start="2705:41" pos:end="2705:44"><name pos:start="2705:41" pos:end="2705:44">arg1</name></expr></argument>, <argument pos:start="2705:47" pos:end="2705:50"><expr pos:start="2705:47" pos:end="2705:50"><name pos:start="2705:47" pos:end="2705:50">arg2</name></expr></argument>, <argument pos:start="2705:53" pos:end="2705:56"><expr pos:start="2705:53" pos:end="2705:56"><name pos:start="2705:53" pos:end="2705:56">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2707:9" pos:end="2710:0">break;</break>

<cpp:ifdef pos:start="2709:1" pos:end="2709:23">#<cpp:directive pos:start="2709:2" pos:end="2709:6">ifdef</cpp:directive> <name pos:start="2709:8" pos:end="2709:23">TARGET_NR_mremap</name></cpp:ifdef>

    <case pos:start="2711:5" pos:end="2711:26">case <expr pos:start="2711:10" pos:end="2711:25"><name pos:start="2711:10" pos:end="2711:25">TARGET_NR_mremap</name></expr>:</case>

        <expr_stmt pos:start="2713:9" pos:end="2713:69"><expr pos:start="2713:9" pos:end="2713:68"><name pos:start="2713:9" pos:end="2713:11">ret</name> <operator pos:start="2713:13" pos:end="2713:13">=</operator> <call pos:start="2713:15" pos:end="2713:68"><name pos:start="2713:15" pos:end="2713:23">get_errno</name><argument_list pos:start="2713:24" pos:end="2713:68">(<argument pos:start="2713:25" pos:end="2713:67"><expr pos:start="2713:25" pos:end="2713:67"><call pos:start="2713:25" pos:end="2713:67"><name pos:start="2713:25" pos:end="2713:37">target_mremap</name><argument_list pos:start="2713:38" pos:end="2713:67">(<argument pos:start="2713:39" pos:end="2713:42"><expr pos:start="2713:39" pos:end="2713:42"><name pos:start="2713:39" pos:end="2713:42">arg1</name></expr></argument>, <argument pos:start="2713:45" pos:end="2713:48"><expr pos:start="2713:45" pos:end="2713:48"><name pos:start="2713:45" pos:end="2713:48">arg2</name></expr></argument>, <argument pos:start="2713:51" pos:end="2713:54"><expr pos:start="2713:51" pos:end="2713:54"><name pos:start="2713:51" pos:end="2713:54">arg3</name></expr></argument>, <argument pos:start="2713:57" pos:end="2713:60"><expr pos:start="2713:57" pos:end="2713:60"><name pos:start="2713:57" pos:end="2713:60">arg4</name></expr></argument>, <argument pos:start="2713:63" pos:end="2713:66"><expr pos:start="2713:63" pos:end="2713:66"><name pos:start="2713:63" pos:end="2713:66">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2715:9" pos:end="2722:0">break;</break>

<cpp:endif pos:start="2717:1" pos:end="2717:6">#<cpp:directive pos:start="2717:2" pos:end="2717:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="2719:9" pos:end="2719:62">/* ??? msync/mlock/munlock are broken for softmmu.  */</comment>

<cpp:ifdef pos:start="2721:1" pos:end="2721:22">#<cpp:directive pos:start="2721:2" pos:end="2721:6">ifdef</cpp:directive> <name pos:start="2721:8" pos:end="2721:22">TARGET_NR_msync</name></cpp:ifdef>

    <case pos:start="2723:5" pos:end="2723:25">case <expr pos:start="2723:10" pos:end="2723:24"><name pos:start="2723:10" pos:end="2723:24">TARGET_NR_msync</name></expr>:</case>

        <expr_stmt pos:start="2725:9" pos:end="2725:54"><expr pos:start="2725:9" pos:end="2725:53"><name pos:start="2725:9" pos:end="2725:11">ret</name> <operator pos:start="2725:13" pos:end="2725:13">=</operator> <call pos:start="2725:15" pos:end="2725:53"><name pos:start="2725:15" pos:end="2725:23">get_errno</name><argument_list pos:start="2725:24" pos:end="2725:53">(<argument pos:start="2725:25" pos:end="2725:52"><expr pos:start="2725:25" pos:end="2725:52"><call pos:start="2725:25" pos:end="2725:52"><name pos:start="2725:25" pos:end="2725:29">msync</name><argument_list pos:start="2725:30" pos:end="2725:52">(<argument pos:start="2725:31" pos:end="2725:39"><expr pos:start="2725:31" pos:end="2725:39"><call pos:start="2725:31" pos:end="2725:39"><name pos:start="2725:31" pos:end="2725:33">g2h</name><argument_list pos:start="2725:34" pos:end="2725:39">(<argument pos:start="2725:35" pos:end="2725:38"><expr pos:start="2725:35" pos:end="2725:38"><name pos:start="2725:35" pos:end="2725:38">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2725:42" pos:end="2725:45"><expr pos:start="2725:42" pos:end="2725:45"><name pos:start="2725:42" pos:end="2725:45">arg2</name></expr></argument>, <argument pos:start="2725:48" pos:end="2725:51"><expr pos:start="2725:48" pos:end="2725:51"><name pos:start="2725:48" pos:end="2725:51">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2727:9" pos:end="2732:0">break;</break>

<cpp:endif pos:start="2729:1" pos:end="2729:6">#<cpp:directive pos:start="2729:2" pos:end="2729:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2731:1" pos:end="2731:22">#<cpp:directive pos:start="2731:2" pos:end="2731:6">ifdef</cpp:directive> <name pos:start="2731:8" pos:end="2731:22">TARGET_NR_mlock</name></cpp:ifdef>

    <case pos:start="2733:5" pos:end="2733:25">case <expr pos:start="2733:10" pos:end="2733:24"><name pos:start="2733:10" pos:end="2733:24">TARGET_NR_mlock</name></expr>:</case>

        <expr_stmt pos:start="2735:9" pos:end="2735:48"><expr pos:start="2735:9" pos:end="2735:47"><name pos:start="2735:9" pos:end="2735:11">ret</name> <operator pos:start="2735:13" pos:end="2735:13">=</operator> <call pos:start="2735:15" pos:end="2735:47"><name pos:start="2735:15" pos:end="2735:23">get_errno</name><argument_list pos:start="2735:24" pos:end="2735:47">(<argument pos:start="2735:25" pos:end="2735:46"><expr pos:start="2735:25" pos:end="2735:46"><call pos:start="2735:25" pos:end="2735:46"><name pos:start="2735:25" pos:end="2735:29">mlock</name><argument_list pos:start="2735:30" pos:end="2735:46">(<argument pos:start="2735:31" pos:end="2735:39"><expr pos:start="2735:31" pos:end="2735:39"><call pos:start="2735:31" pos:end="2735:39"><name pos:start="2735:31" pos:end="2735:33">g2h</name><argument_list pos:start="2735:34" pos:end="2735:39">(<argument pos:start="2735:35" pos:end="2735:38"><expr pos:start="2735:35" pos:end="2735:38"><name pos:start="2735:35" pos:end="2735:38">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2735:42" pos:end="2735:45"><expr pos:start="2735:42" pos:end="2735:45"><name pos:start="2735:42" pos:end="2735:45">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2737:9" pos:end="2742:0">break;</break>

<cpp:endif pos:start="2739:1" pos:end="2739:6">#<cpp:directive pos:start="2739:2" pos:end="2739:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2741:1" pos:end="2741:24">#<cpp:directive pos:start="2741:2" pos:end="2741:6">ifdef</cpp:directive> <name pos:start="2741:8" pos:end="2741:24">TARGET_NR_munlock</name></cpp:ifdef>

    <case pos:start="2743:5" pos:end="2743:27">case <expr pos:start="2743:10" pos:end="2743:26"><name pos:start="2743:10" pos:end="2743:26">TARGET_NR_munlock</name></expr>:</case>

        <expr_stmt pos:start="2745:9" pos:end="2745:50"><expr pos:start="2745:9" pos:end="2745:49"><name pos:start="2745:9" pos:end="2745:11">ret</name> <operator pos:start="2745:13" pos:end="2745:13">=</operator> <call pos:start="2745:15" pos:end="2745:49"><name pos:start="2745:15" pos:end="2745:23">get_errno</name><argument_list pos:start="2745:24" pos:end="2745:49">(<argument pos:start="2745:25" pos:end="2745:48"><expr pos:start="2745:25" pos:end="2745:48"><call pos:start="2745:25" pos:end="2745:48"><name pos:start="2745:25" pos:end="2745:31">munlock</name><argument_list pos:start="2745:32" pos:end="2745:48">(<argument pos:start="2745:33" pos:end="2745:41"><expr pos:start="2745:33" pos:end="2745:41"><call pos:start="2745:33" pos:end="2745:41"><name pos:start="2745:33" pos:end="2745:35">g2h</name><argument_list pos:start="2745:36" pos:end="2745:41">(<argument pos:start="2745:37" pos:end="2745:40"><expr pos:start="2745:37" pos:end="2745:40"><name pos:start="2745:37" pos:end="2745:40">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2745:44" pos:end="2745:47"><expr pos:start="2745:44" pos:end="2745:47"><name pos:start="2745:44" pos:end="2745:47">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2747:9" pos:end="2752:0">break;</break>

<cpp:endif pos:start="2749:1" pos:end="2749:6">#<cpp:directive pos:start="2749:2" pos:end="2749:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2751:1" pos:end="2751:25">#<cpp:directive pos:start="2751:2" pos:end="2751:6">ifdef</cpp:directive> <name pos:start="2751:8" pos:end="2751:25">TARGET_NR_mlockall</name></cpp:ifdef>

    <case pos:start="2753:5" pos:end="2753:28">case <expr pos:start="2753:10" pos:end="2753:27"><name pos:start="2753:10" pos:end="2753:27">TARGET_NR_mlockall</name></expr>:</case>

        <expr_stmt pos:start="2755:9" pos:end="2755:40"><expr pos:start="2755:9" pos:end="2755:39"><name pos:start="2755:9" pos:end="2755:11">ret</name> <operator pos:start="2755:13" pos:end="2755:13">=</operator> <call pos:start="2755:15" pos:end="2755:39"><name pos:start="2755:15" pos:end="2755:23">get_errno</name><argument_list pos:start="2755:24" pos:end="2755:39">(<argument pos:start="2755:25" pos:end="2755:38"><expr pos:start="2755:25" pos:end="2755:38"><call pos:start="2755:25" pos:end="2755:38"><name pos:start="2755:25" pos:end="2755:32">mlockall</name><argument_list pos:start="2755:33" pos:end="2755:38">(<argument pos:start="2755:34" pos:end="2755:37"><expr pos:start="2755:34" pos:end="2755:37"><name pos:start="2755:34" pos:end="2755:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2757:9" pos:end="2762:0">break;</break>

<cpp:endif pos:start="2759:1" pos:end="2759:6">#<cpp:directive pos:start="2759:2" pos:end="2759:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2761:1" pos:end="2761:27">#<cpp:directive pos:start="2761:2" pos:end="2761:6">ifdef</cpp:directive> <name pos:start="2761:8" pos:end="2761:27">TARGET_NR_munlockall</name></cpp:ifdef>

    <case pos:start="2763:5" pos:end="2763:30">case <expr pos:start="2763:10" pos:end="2763:29"><name pos:start="2763:10" pos:end="2763:29">TARGET_NR_munlockall</name></expr>:</case>

        <expr_stmt pos:start="2765:9" pos:end="2765:38"><expr pos:start="2765:9" pos:end="2765:37"><name pos:start="2765:9" pos:end="2765:11">ret</name> <operator pos:start="2765:13" pos:end="2765:13">=</operator> <call pos:start="2765:15" pos:end="2765:37"><name pos:start="2765:15" pos:end="2765:23">get_errno</name><argument_list pos:start="2765:24" pos:end="2765:37">(<argument pos:start="2765:25" pos:end="2765:36"><expr pos:start="2765:25" pos:end="2765:36"><call pos:start="2765:25" pos:end="2765:36"><name pos:start="2765:25" pos:end="2765:34">munlockall</name><argument_list pos:start="2765:35" pos:end="2765:36">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2767:9" pos:end="2770:0">break;</break>

<cpp:endif pos:start="2769:1" pos:end="2769:6">#<cpp:directive pos:start="2769:2" pos:end="2769:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2771:5" pos:end="2771:28">case <expr pos:start="2771:10" pos:end="2771:27"><name pos:start="2771:10" pos:end="2771:27">TARGET_NR_truncate</name></expr>:</case>

        <if_stmt pos:start="2773:9" pos:end="2775:24"><if pos:start="2773:9" pos:end="2775:24">if <condition pos:start="2773:12" pos:end="2773:42">(<expr pos:start="2773:13" pos:end="2773:41"><operator pos:start="2773:13" pos:end="2773:13">!</operator><operator pos:start="2773:14" pos:end="2773:14">(</operator><name pos:start="2773:15" pos:end="2773:15">p</name> <operator pos:start="2773:17" pos:end="2773:17">=</operator> <call pos:start="2773:19" pos:end="2773:40"><name pos:start="2773:19" pos:end="2773:34">lock_user_string</name><argument_list pos:start="2773:35" pos:end="2773:40">(<argument pos:start="2773:36" pos:end="2773:39"><expr pos:start="2773:36" pos:end="2773:39"><name pos:start="2773:36" pos:end="2773:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2773:41" pos:end="2773:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2775:13" pos:end="2775:24"><block_content pos:start="2775:13" pos:end="2775:24">

            <goto pos:start="2775:13" pos:end="2775:24">goto <name pos:start="2775:18" pos:end="2775:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2777:9" pos:end="2777:43"><expr pos:start="2777:9" pos:end="2777:42"><name pos:start="2777:9" pos:end="2777:11">ret</name> <operator pos:start="2777:13" pos:end="2777:13">=</operator> <call pos:start="2777:15" pos:end="2777:42"><name pos:start="2777:15" pos:end="2777:23">get_errno</name><argument_list pos:start="2777:24" pos:end="2777:42">(<argument pos:start="2777:25" pos:end="2777:41"><expr pos:start="2777:25" pos:end="2777:41"><call pos:start="2777:25" pos:end="2777:41"><name pos:start="2777:25" pos:end="2777:32">truncate</name><argument_list pos:start="2777:33" pos:end="2777:41">(<argument pos:start="2777:34" pos:end="2777:34"><expr pos:start="2777:34" pos:end="2777:34"><name pos:start="2777:34" pos:end="2777:34">p</name></expr></argument>, <argument pos:start="2777:37" pos:end="2777:40"><expr pos:start="2777:37" pos:end="2777:40"><name pos:start="2777:37" pos:end="2777:40">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2779:9" pos:end="2779:32"><expr pos:start="2779:9" pos:end="2779:31"><call pos:start="2779:9" pos:end="2779:31"><name pos:start="2779:9" pos:end="2779:19">unlock_user</name><argument_list pos:start="2779:20" pos:end="2779:31">(<argument pos:start="2779:21" pos:end="2779:21"><expr pos:start="2779:21" pos:end="2779:21"><name pos:start="2779:21" pos:end="2779:21">p</name></expr></argument>, <argument pos:start="2779:24" pos:end="2779:27"><expr pos:start="2779:24" pos:end="2779:27"><name pos:start="2779:24" pos:end="2779:27">arg1</name></expr></argument>, <argument pos:start="2779:30" pos:end="2779:30"><expr pos:start="2779:30" pos:end="2779:30"><literal type="number" pos:start="2779:30" pos:end="2779:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2781:9" pos:end="2781:14">break;</break>

    <case pos:start="2783:5" pos:end="2783:29">case <expr pos:start="2783:10" pos:end="2783:28"><name pos:start="2783:10" pos:end="2783:28">TARGET_NR_ftruncate</name></expr>:</case>

        <expr_stmt pos:start="2785:9" pos:end="2785:47"><expr pos:start="2785:9" pos:end="2785:46"><name pos:start="2785:9" pos:end="2785:11">ret</name> <operator pos:start="2785:13" pos:end="2785:13">=</operator> <call pos:start="2785:15" pos:end="2785:46"><name pos:start="2785:15" pos:end="2785:23">get_errno</name><argument_list pos:start="2785:24" pos:end="2785:46">(<argument pos:start="2785:25" pos:end="2785:45"><expr pos:start="2785:25" pos:end="2785:45"><call pos:start="2785:25" pos:end="2785:45"><name pos:start="2785:25" pos:end="2785:33">ftruncate</name><argument_list pos:start="2785:34" pos:end="2785:45">(<argument pos:start="2785:35" pos:end="2785:38"><expr pos:start="2785:35" pos:end="2785:38"><name pos:start="2785:35" pos:end="2785:38">arg1</name></expr></argument>, <argument pos:start="2785:41" pos:end="2785:44"><expr pos:start="2785:41" pos:end="2785:44"><name pos:start="2785:41" pos:end="2785:44">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2787:9" pos:end="2787:14">break;</break>

    <case pos:start="2789:5" pos:end="2789:26">case <expr pos:start="2789:10" pos:end="2789:25"><name pos:start="2789:10" pos:end="2789:25">TARGET_NR_fchmod</name></expr>:</case>

        <expr_stmt pos:start="2791:9" pos:end="2791:44"><expr pos:start="2791:9" pos:end="2791:43"><name pos:start="2791:9" pos:end="2791:11">ret</name> <operator pos:start="2791:13" pos:end="2791:13">=</operator> <call pos:start="2791:15" pos:end="2791:43"><name pos:start="2791:15" pos:end="2791:23">get_errno</name><argument_list pos:start="2791:24" pos:end="2791:43">(<argument pos:start="2791:25" pos:end="2791:42"><expr pos:start="2791:25" pos:end="2791:42"><call pos:start="2791:25" pos:end="2791:42"><name pos:start="2791:25" pos:end="2791:30">fchmod</name><argument_list pos:start="2791:31" pos:end="2791:42">(<argument pos:start="2791:32" pos:end="2791:35"><expr pos:start="2791:32" pos:end="2791:35"><name pos:start="2791:32" pos:end="2791:35">arg1</name></expr></argument>, <argument pos:start="2791:38" pos:end="2791:41"><expr pos:start="2791:38" pos:end="2791:41"><name pos:start="2791:38" pos:end="2791:41">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2793:9" pos:end="2796:0">break;</break>

<cpp:if pos:start="2795:1" pos:end="2795:31">#<cpp:directive pos:start="2795:2" pos:end="2795:3">if</cpp:directive> <expr pos:start="2795:5" pos:end="2795:31"><call pos:start="2795:5" pos:end="2795:31"><name pos:start="2795:5" pos:end="2795:11">defined</name><argument_list pos:start="2795:12" pos:end="2795:31">(<argument pos:start="2795:13" pos:end="2795:30"><expr pos:start="2795:13" pos:end="2795:30"><name pos:start="2795:13" pos:end="2795:30">TARGET_NR_fchmodat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="2797:5" pos:end="2797:28">case <expr pos:start="2797:10" pos:end="2797:27"><name pos:start="2797:10" pos:end="2797:27">TARGET_NR_fchmodat</name></expr>:</case>

        <if_stmt pos:start="2799:9" pos:end="2801:24"><if pos:start="2799:9" pos:end="2801:24">if <condition pos:start="2799:12" pos:end="2799:42">(<expr pos:start="2799:13" pos:end="2799:41"><operator pos:start="2799:13" pos:end="2799:13">!</operator><operator pos:start="2799:14" pos:end="2799:14">(</operator><name pos:start="2799:15" pos:end="2799:15">p</name> <operator pos:start="2799:17" pos:end="2799:17">=</operator> <call pos:start="2799:19" pos:end="2799:40"><name pos:start="2799:19" pos:end="2799:34">lock_user_string</name><argument_list pos:start="2799:35" pos:end="2799:40">(<argument pos:start="2799:36" pos:end="2799:39"><expr pos:start="2799:36" pos:end="2799:39"><name pos:start="2799:36" pos:end="2799:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="2799:41" pos:end="2799:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2801:13" pos:end="2801:24"><block_content pos:start="2801:13" pos:end="2801:24">

            <goto pos:start="2801:13" pos:end="2801:24">goto <name pos:start="2801:18" pos:end="2801:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2803:9" pos:end="2803:52"><expr pos:start="2803:9" pos:end="2803:51"><name pos:start="2803:9" pos:end="2803:11">ret</name> <operator pos:start="2803:13" pos:end="2803:13">=</operator> <call pos:start="2803:15" pos:end="2803:51"><name pos:start="2803:15" pos:end="2803:23">get_errno</name><argument_list pos:start="2803:24" pos:end="2803:51">(<argument pos:start="2803:25" pos:end="2803:50"><expr pos:start="2803:25" pos:end="2803:50"><call pos:start="2803:25" pos:end="2803:50"><name pos:start="2803:25" pos:end="2803:32">fchmodat</name><argument_list pos:start="2803:33" pos:end="2803:50">(<argument pos:start="2803:34" pos:end="2803:37"><expr pos:start="2803:34" pos:end="2803:37"><name pos:start="2803:34" pos:end="2803:37">arg1</name></expr></argument>, <argument pos:start="2803:40" pos:end="2803:40"><expr pos:start="2803:40" pos:end="2803:40"><name pos:start="2803:40" pos:end="2803:40">p</name></expr></argument>, <argument pos:start="2803:43" pos:end="2803:46"><expr pos:start="2803:43" pos:end="2803:46"><name pos:start="2803:43" pos:end="2803:46">arg3</name></expr></argument>, <argument pos:start="2803:49" pos:end="2803:49"><expr pos:start="2803:49" pos:end="2803:49"><literal type="number" pos:start="2803:49" pos:end="2803:49">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2805:9" pos:end="2805:32"><expr pos:start="2805:9" pos:end="2805:31"><call pos:start="2805:9" pos:end="2805:31"><name pos:start="2805:9" pos:end="2805:19">unlock_user</name><argument_list pos:start="2805:20" pos:end="2805:31">(<argument pos:start="2805:21" pos:end="2805:21"><expr pos:start="2805:21" pos:end="2805:21"><name pos:start="2805:21" pos:end="2805:21">p</name></expr></argument>, <argument pos:start="2805:24" pos:end="2805:27"><expr pos:start="2805:24" pos:end="2805:27"><name pos:start="2805:24" pos:end="2805:27">arg2</name></expr></argument>, <argument pos:start="2805:30" pos:end="2805:30"><expr pos:start="2805:30" pos:end="2805:30"><literal type="number" pos:start="2805:30" pos:end="2805:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2807:9" pos:end="2810:0">break;</break>

<cpp:endif pos:start="2809:1" pos:end="2809:6">#<cpp:directive pos:start="2809:2" pos:end="2809:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2811:5" pos:end="2811:31">case <expr pos:start="2811:10" pos:end="2811:30"><name pos:start="2811:10" pos:end="2811:30">TARGET_NR_getpriority</name></expr>:</case>

        <comment type="block" pos:start="2813:9" pos:end="2815:53">/* Note that negative values are valid for getpriority, so we must

           differentiate based on errno settings.  */</comment>

        <expr_stmt pos:start="2817:9" pos:end="2817:18"><expr pos:start="2817:9" pos:end="2817:17"><name pos:start="2817:9" pos:end="2817:13">errno</name> <operator pos:start="2817:15" pos:end="2817:15">=</operator> <literal type="number" pos:start="2817:17" pos:end="2817:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2819:9" pos:end="2819:38"><expr pos:start="2819:9" pos:end="2819:37"><name pos:start="2819:9" pos:end="2819:11">ret</name> <operator pos:start="2819:13" pos:end="2819:13">=</operator> <call pos:start="2819:15" pos:end="2819:37"><name pos:start="2819:15" pos:end="2819:25">getpriority</name><argument_list pos:start="2819:26" pos:end="2819:37">(<argument pos:start="2819:27" pos:end="2819:30"><expr pos:start="2819:27" pos:end="2819:30"><name pos:start="2819:27" pos:end="2819:30">arg1</name></expr></argument>, <argument pos:start="2819:33" pos:end="2819:36"><expr pos:start="2819:33" pos:end="2819:36"><name pos:start="2819:33" pos:end="2819:36">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2821:9" pos:end="2830:0"><if pos:start="2821:9" pos:end="2830:0">if <condition pos:start="2821:12" pos:end="2821:36">(<expr pos:start="2821:13" pos:end="2821:35"><name pos:start="2821:13" pos:end="2821:15">ret</name> <operator pos:start="2821:17" pos:end="2821:18">==</operator> <operator pos:start="2821:20" pos:end="2821:20">-</operator><literal type="number" pos:start="2821:21" pos:end="2821:21">1</literal> <operator pos:start="2821:23" pos:end="2821:24">&amp;&amp;</operator> <name pos:start="2821:26" pos:end="2821:30">errno</name> <operator pos:start="2821:32" pos:end="2821:33">!=</operator> <literal type="number" pos:start="2821:35" pos:end="2821:35">0</literal></expr>)</condition> <block pos:start="2821:38" pos:end="2830:0">{<block_content pos:start="2823:13" pos:end="2825:18">

            <expr_stmt pos:start="2823:13" pos:end="2823:47"><expr pos:start="2823:13" pos:end="2823:46"><name pos:start="2823:13" pos:end="2823:15">ret</name> <operator pos:start="2823:17" pos:end="2823:17">=</operator> <operator pos:start="2823:19" pos:end="2823:19">-</operator><call pos:start="2823:20" pos:end="2823:46"><name pos:start="2823:20" pos:end="2823:39">host_to_target_errno</name><argument_list pos:start="2823:40" pos:end="2823:46">(<argument pos:start="2823:41" pos:end="2823:45"><expr pos:start="2823:41" pos:end="2823:45"><name pos:start="2823:41" pos:end="2823:45">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2825:13" pos:end="2825:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="2829:1" pos:end="2829:19">#<cpp:directive pos:start="2829:2" pos:end="2829:6">ifdef</cpp:directive> <name pos:start="2829:8" pos:end="2829:19">TARGET_ALPHA</name></cpp:ifdef>

        <comment type="block" pos:start="2831:9" pos:end="2831:71">/* Return value is the unbiased priority.  Signal no error.  */</comment>

        <expr_stmt pos:start="2833:9" pos:end="2836:0"><expr pos:start="2833:9" pos:end="2833:49"><operator pos:start="2833:9" pos:end="2833:9">(</operator><operator pos:start="2833:10" pos:end="2833:10">(</operator><name pos:start="2833:11" pos:end="2833:23">CPUAlphaState</name> <operator pos:start="2833:25" pos:end="2833:25">*</operator><operator pos:start="2833:26" pos:end="2833:26">)</operator><name pos:start="2833:27" pos:end="2833:33">cpu_env</name><operator pos:start="2833:34" pos:end="2833:34">)</operator><operator pos:start="2833:35" pos:end="2833:36">-&gt;</operator><name pos:start="2833:37" pos:end="2833:45"><name pos:start="2833:37" pos:end="2833:38">ir</name><index pos:start="2833:39" pos:end="2833:45">[<expr pos:start="2833:40" pos:end="2833:44"><name pos:start="2833:40" pos:end="2833:44">IR_V0</name></expr>]</index></name> <operator pos:start="2833:47" pos:end="2833:47">=</operator> <literal type="number" pos:start="2833:49" pos:end="2833:49">0</literal></expr>;</expr_stmt>

<cpp:else pos:start="2835:1" pos:end="2835:5">#<cpp:directive pos:start="2835:2" pos:end="2835:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="2837:9" pos:end="2837:75">/* Return value is a biased priority to avoid negative numbers.  */</comment>

        <expr_stmt pos:start="2839:9" pos:end="2842:0"><expr pos:start="2839:9" pos:end="2839:22"><name pos:start="2839:9" pos:end="2839:11">ret</name> <operator pos:start="2839:13" pos:end="2839:13">=</operator> <literal type="number" pos:start="2839:15" pos:end="2839:18">20</literal> <operator pos:start="2839:18" pos:end="2839:18">-</operator> <name pos:start="2839:20" pos:end="2839:22">ret</name></expr>;</expr_stmt>

<cpp:endif pos:start="2841:1" pos:end="2841:6">#<cpp:directive pos:start="2841:2" pos:end="2841:6">endif</cpp:directive></cpp:endif>

        <break pos:start="2843:9" pos:end="2843:14">break;</break>

    <case pos:start="2845:5" pos:end="2845:31">case <expr pos:start="2845:10" pos:end="2845:30"><name pos:start="2845:10" pos:end="2845:30">TARGET_NR_setpriority</name></expr>:</case>

        <expr_stmt pos:start="2847:9" pos:end="2847:55"><expr pos:start="2847:9" pos:end="2847:54"><name pos:start="2847:9" pos:end="2847:11">ret</name> <operator pos:start="2847:13" pos:end="2847:13">=</operator> <call pos:start="2847:15" pos:end="2847:54"><name pos:start="2847:15" pos:end="2847:23">get_errno</name><argument_list pos:start="2847:24" pos:end="2847:54">(<argument pos:start="2847:25" pos:end="2847:53"><expr pos:start="2847:25" pos:end="2847:53"><call pos:start="2847:25" pos:end="2847:53"><name pos:start="2847:25" pos:end="2847:35">setpriority</name><argument_list pos:start="2847:36" pos:end="2847:53">(<argument pos:start="2847:37" pos:end="2847:40"><expr pos:start="2847:37" pos:end="2847:40"><name pos:start="2847:37" pos:end="2847:40">arg1</name></expr></argument>, <argument pos:start="2847:43" pos:end="2847:46"><expr pos:start="2847:43" pos:end="2847:46"><name pos:start="2847:43" pos:end="2847:46">arg2</name></expr></argument>, <argument pos:start="2847:49" pos:end="2847:52"><expr pos:start="2847:49" pos:end="2847:52"><name pos:start="2847:49" pos:end="2847:52">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2849:9" pos:end="2852:0">break;</break>

<cpp:ifdef pos:start="2851:1" pos:end="2851:23">#<cpp:directive pos:start="2851:2" pos:end="2851:6">ifdef</cpp:directive> <name pos:start="2851:8" pos:end="2851:23">TARGET_NR_profil</name></cpp:ifdef>

    <case pos:start="2853:5" pos:end="2853:26">case <expr pos:start="2853:10" pos:end="2853:25"><name pos:start="2853:10" pos:end="2853:25">TARGET_NR_profil</name></expr>:</case>

        <goto pos:start="2855:9" pos:end="2858:0">goto <name pos:start="2855:14" pos:end="2855:26">unimplemented</name>;</goto>

<cpp:endif pos:start="2857:1" pos:end="2857:6">#<cpp:directive pos:start="2857:2" pos:end="2857:6">endif</cpp:directive></cpp:endif>

    <case pos:start="2859:5" pos:end="2859:26">case <expr pos:start="2859:10" pos:end="2859:25"><name pos:start="2859:10" pos:end="2859:25">TARGET_NR_statfs</name></expr>:</case>

        <if_stmt pos:start="2861:9" pos:end="2863:24"><if pos:start="2861:9" pos:end="2863:24">if <condition pos:start="2861:12" pos:end="2861:42">(<expr pos:start="2861:13" pos:end="2861:41"><operator pos:start="2861:13" pos:end="2861:13">!</operator><operator pos:start="2861:14" pos:end="2861:14">(</operator><name pos:start="2861:15" pos:end="2861:15">p</name> <operator pos:start="2861:17" pos:end="2861:17">=</operator> <call pos:start="2861:19" pos:end="2861:40"><name pos:start="2861:19" pos:end="2861:34">lock_user_string</name><argument_list pos:start="2861:35" pos:end="2861:40">(<argument pos:start="2861:36" pos:end="2861:39"><expr pos:start="2861:36" pos:end="2861:39"><name pos:start="2861:36" pos:end="2861:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2861:41" pos:end="2861:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2863:13" pos:end="2863:24"><block_content pos:start="2863:13" pos:end="2863:24">

            <goto pos:start="2863:13" pos:end="2863:24">goto <name pos:start="2863:18" pos:end="2863:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2865:9" pos:end="2865:48"><expr pos:start="2865:9" pos:end="2865:47"><name pos:start="2865:9" pos:end="2865:11">ret</name> <operator pos:start="2865:13" pos:end="2865:13">=</operator> <call pos:start="2865:15" pos:end="2865:47"><name pos:start="2865:15" pos:end="2865:23">get_errno</name><argument_list pos:start="2865:24" pos:end="2865:47">(<argument pos:start="2865:25" pos:end="2865:46"><expr pos:start="2865:25" pos:end="2865:46"><call pos:start="2865:25" pos:end="2865:46"><name pos:start="2865:25" pos:end="2865:30">statfs</name><argument_list pos:start="2865:31" pos:end="2865:46">(<argument pos:start="2865:32" pos:end="2865:38"><expr pos:start="2865:32" pos:end="2865:38"><call pos:start="2865:32" pos:end="2865:38"><name pos:start="2865:32" pos:end="2865:35">path</name><argument_list pos:start="2865:36" pos:end="2865:38">(<argument pos:start="2865:37" pos:end="2865:37"><expr pos:start="2865:37" pos:end="2865:37"><name pos:start="2865:37" pos:end="2865:37">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2865:41" pos:end="2865:45"><expr pos:start="2865:41" pos:end="2865:45"><operator pos:start="2865:41" pos:end="2865:41">&amp;</operator><name pos:start="2865:42" pos:end="2865:45">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2867:9" pos:end="2867:32"><expr pos:start="2867:9" pos:end="2867:31"><call pos:start="2867:9" pos:end="2867:31"><name pos:start="2867:9" pos:end="2867:19">unlock_user</name><argument_list pos:start="2867:20" pos:end="2867:31">(<argument pos:start="2867:21" pos:end="2867:21"><expr pos:start="2867:21" pos:end="2867:21"><name pos:start="2867:21" pos:end="2867:21">p</name></expr></argument>, <argument pos:start="2867:24" pos:end="2867:27"><expr pos:start="2867:24" pos:end="2867:27"><name pos:start="2867:24" pos:end="2867:27">arg1</name></expr></argument>, <argument pos:start="2867:30" pos:end="2867:30"><expr pos:start="2867:30" pos:end="2867:30"><literal type="number" pos:start="2867:30" pos:end="2867:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="2869:5" pos:end="2869:19"><name pos:start="2869:5" pos:end="2869:18">convert_statfs</name>:</label>

        <if_stmt pos:start="2871:9" pos:end="2907:9"><if pos:start="2871:9" pos:end="2907:9">if <condition pos:start="2871:12" pos:end="2871:27">(<expr pos:start="2871:13" pos:end="2871:26"><operator pos:start="2871:13" pos:end="2871:13">!</operator><call pos:start="2871:14" pos:end="2871:26"><name pos:start="2871:14" pos:end="2871:21">is_error</name><argument_list pos:start="2871:22" pos:end="2871:26">(<argument pos:start="2871:23" pos:end="2871:25"><expr pos:start="2871:23" pos:end="2871:25"><name pos:start="2871:23" pos:end="2871:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2871:29" pos:end="2907:9">{<block_content pos:start="2873:13" pos:end="2905:53">

            <decl_stmt pos:start="2873:13" pos:end="2873:46"><decl pos:start="2873:13" pos:end="2873:45"><type pos:start="2873:13" pos:end="2873:34"><name pos:start="2873:13" pos:end="2873:32"><name pos:start="2873:13" pos:end="2873:18">struct</name> <name pos:start="2873:20" pos:end="2873:32">target_statfs</name></name> <modifier pos:start="2873:34" pos:end="2873:34">*</modifier></type><name pos:start="2873:35" pos:end="2873:45">target_stfs</name></decl>;</decl_stmt>



            <if_stmt pos:start="2877:13" pos:end="2879:28"><if pos:start="2877:13" pos:end="2879:28">if <condition pos:start="2877:16" pos:end="2877:70">(<expr pos:start="2877:17" pos:end="2877:69"><operator pos:start="2877:17" pos:end="2877:17">!</operator><call pos:start="2877:18" pos:end="2877:69"><name pos:start="2877:18" pos:end="2877:33">lock_user_struct</name><argument_list pos:start="2877:34" pos:end="2877:69">(<argument pos:start="2877:35" pos:end="2877:46"><expr pos:start="2877:35" pos:end="2877:46"><name pos:start="2877:35" pos:end="2877:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2877:49" pos:end="2877:59"><expr pos:start="2877:49" pos:end="2877:59"><name pos:start="2877:49" pos:end="2877:59">target_stfs</name></expr></argument>, <argument pos:start="2877:62" pos:end="2877:65"><expr pos:start="2877:62" pos:end="2877:65"><name pos:start="2877:62" pos:end="2877:65">arg2</name></expr></argument>, <argument pos:start="2877:68" pos:end="2877:68"><expr pos:start="2877:68" pos:end="2877:68"><literal type="number" pos:start="2877:68" pos:end="2877:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2879:17" pos:end="2879:28"><block_content pos:start="2879:17" pos:end="2879:28">

                <goto pos:start="2879:17" pos:end="2879:28">goto <name pos:start="2879:22" pos:end="2879:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2881:13" pos:end="2881:58"><expr pos:start="2881:13" pos:end="2881:57"><call pos:start="2881:13" pos:end="2881:57"><name pos:start="2881:13" pos:end="2881:22">__put_user</name><argument_list pos:start="2881:23" pos:end="2881:57">(<argument pos:start="2881:24" pos:end="2881:34"><expr pos:start="2881:24" pos:end="2881:34"><name pos:start="2881:24" pos:end="2881:34"><name pos:start="2881:24" pos:end="2881:27">stfs</name><operator pos:start="2881:28" pos:end="2881:28">.</operator><name pos:start="2881:29" pos:end="2881:34">f_type</name></name></expr></argument>, <argument pos:start="2881:37" pos:end="2881:56"><expr pos:start="2881:37" pos:end="2881:56"><operator pos:start="2881:37" pos:end="2881:37">&amp;</operator><name pos:start="2881:38" pos:end="2881:56"><name pos:start="2881:38" pos:end="2881:48">target_stfs</name><operator pos:start="2881:49" pos:end="2881:50">-&gt;</operator><name pos:start="2881:51" pos:end="2881:56">f_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2883:13" pos:end="2883:60"><expr pos:start="2883:13" pos:end="2883:59"><call pos:start="2883:13" pos:end="2883:59"><name pos:start="2883:13" pos:end="2883:22">__put_user</name><argument_list pos:start="2883:23" pos:end="2883:59">(<argument pos:start="2883:24" pos:end="2883:35"><expr pos:start="2883:24" pos:end="2883:35"><name pos:start="2883:24" pos:end="2883:35"><name pos:start="2883:24" pos:end="2883:27">stfs</name><operator pos:start="2883:28" pos:end="2883:28">.</operator><name pos:start="2883:29" pos:end="2883:35">f_bsize</name></name></expr></argument>, <argument pos:start="2883:38" pos:end="2883:58"><expr pos:start="2883:38" pos:end="2883:58"><operator pos:start="2883:38" pos:end="2883:38">&amp;</operator><name pos:start="2883:39" pos:end="2883:58"><name pos:start="2883:39" pos:end="2883:49">target_stfs</name><operator pos:start="2883:50" pos:end="2883:51">-&gt;</operator><name pos:start="2883:52" pos:end="2883:58">f_bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2885:13" pos:end="2885:62"><expr pos:start="2885:13" pos:end="2885:61"><call pos:start="2885:13" pos:end="2885:61"><name pos:start="2885:13" pos:end="2885:22">__put_user</name><argument_list pos:start="2885:23" pos:end="2885:61">(<argument pos:start="2885:24" pos:end="2885:36"><expr pos:start="2885:24" pos:end="2885:36"><name pos:start="2885:24" pos:end="2885:36"><name pos:start="2885:24" pos:end="2885:27">stfs</name><operator pos:start="2885:28" pos:end="2885:28">.</operator><name pos:start="2885:29" pos:end="2885:36">f_blocks</name></name></expr></argument>, <argument pos:start="2885:39" pos:end="2885:60"><expr pos:start="2885:39" pos:end="2885:60"><operator pos:start="2885:39" pos:end="2885:39">&amp;</operator><name pos:start="2885:40" pos:end="2885:60"><name pos:start="2885:40" pos:end="2885:50">target_stfs</name><operator pos:start="2885:51" pos:end="2885:52">-&gt;</operator><name pos:start="2885:53" pos:end="2885:60">f_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2887:13" pos:end="2887:60"><expr pos:start="2887:13" pos:end="2887:59"><call pos:start="2887:13" pos:end="2887:59"><name pos:start="2887:13" pos:end="2887:22">__put_user</name><argument_list pos:start="2887:23" pos:end="2887:59">(<argument pos:start="2887:24" pos:end="2887:35"><expr pos:start="2887:24" pos:end="2887:35"><name pos:start="2887:24" pos:end="2887:35"><name pos:start="2887:24" pos:end="2887:27">stfs</name><operator pos:start="2887:28" pos:end="2887:28">.</operator><name pos:start="2887:29" pos:end="2887:35">f_bfree</name></name></expr></argument>, <argument pos:start="2887:38" pos:end="2887:58"><expr pos:start="2887:38" pos:end="2887:58"><operator pos:start="2887:38" pos:end="2887:38">&amp;</operator><name pos:start="2887:39" pos:end="2887:58"><name pos:start="2887:39" pos:end="2887:49">target_stfs</name><operator pos:start="2887:50" pos:end="2887:51">-&gt;</operator><name pos:start="2887:52" pos:end="2887:58">f_bfree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2889:13" pos:end="2889:62"><expr pos:start="2889:13" pos:end="2889:61"><call pos:start="2889:13" pos:end="2889:61"><name pos:start="2889:13" pos:end="2889:22">__put_user</name><argument_list pos:start="2889:23" pos:end="2889:61">(<argument pos:start="2889:24" pos:end="2889:36"><expr pos:start="2889:24" pos:end="2889:36"><name pos:start="2889:24" pos:end="2889:36"><name pos:start="2889:24" pos:end="2889:27">stfs</name><operator pos:start="2889:28" pos:end="2889:28">.</operator><name pos:start="2889:29" pos:end="2889:36">f_bavail</name></name></expr></argument>, <argument pos:start="2889:39" pos:end="2889:60"><expr pos:start="2889:39" pos:end="2889:60"><operator pos:start="2889:39" pos:end="2889:39">&amp;</operator><name pos:start="2889:40" pos:end="2889:60"><name pos:start="2889:40" pos:end="2889:50">target_stfs</name><operator pos:start="2889:51" pos:end="2889:52">-&gt;</operator><name pos:start="2889:53" pos:end="2889:60">f_bavail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2891:13" pos:end="2891:60"><expr pos:start="2891:13" pos:end="2891:59"><call pos:start="2891:13" pos:end="2891:59"><name pos:start="2891:13" pos:end="2891:22">__put_user</name><argument_list pos:start="2891:23" pos:end="2891:59">(<argument pos:start="2891:24" pos:end="2891:35"><expr pos:start="2891:24" pos:end="2891:35"><name pos:start="2891:24" pos:end="2891:35"><name pos:start="2891:24" pos:end="2891:27">stfs</name><operator pos:start="2891:28" pos:end="2891:28">.</operator><name pos:start="2891:29" pos:end="2891:35">f_files</name></name></expr></argument>, <argument pos:start="2891:38" pos:end="2891:58"><expr pos:start="2891:38" pos:end="2891:58"><operator pos:start="2891:38" pos:end="2891:38">&amp;</operator><name pos:start="2891:39" pos:end="2891:58"><name pos:start="2891:39" pos:end="2891:49">target_stfs</name><operator pos:start="2891:50" pos:end="2891:51">-&gt;</operator><name pos:start="2891:52" pos:end="2891:58">f_files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2893:13" pos:end="2893:60"><expr pos:start="2893:13" pos:end="2893:59"><call pos:start="2893:13" pos:end="2893:59"><name pos:start="2893:13" pos:end="2893:22">__put_user</name><argument_list pos:start="2893:23" pos:end="2893:59">(<argument pos:start="2893:24" pos:end="2893:35"><expr pos:start="2893:24" pos:end="2893:35"><name pos:start="2893:24" pos:end="2893:35"><name pos:start="2893:24" pos:end="2893:27">stfs</name><operator pos:start="2893:28" pos:end="2893:28">.</operator><name pos:start="2893:29" pos:end="2893:35">f_ffree</name></name></expr></argument>, <argument pos:start="2893:38" pos:end="2893:58"><expr pos:start="2893:38" pos:end="2893:58"><operator pos:start="2893:38" pos:end="2893:38">&amp;</operator><name pos:start="2893:39" pos:end="2893:58"><name pos:start="2893:39" pos:end="2893:49">target_stfs</name><operator pos:start="2893:50" pos:end="2893:51">-&gt;</operator><name pos:start="2893:52" pos:end="2893:58">f_ffree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2895:13" pos:end="2895:74"><expr pos:start="2895:13" pos:end="2895:73"><call pos:start="2895:13" pos:end="2895:73"><name pos:start="2895:13" pos:end="2895:22">__put_user</name><argument_list pos:start="2895:23" pos:end="2895:73">(<argument pos:start="2895:24" pos:end="2895:43"><expr pos:start="2895:24" pos:end="2895:43"><name pos:start="2895:24" pos:end="2895:43"><name pos:start="2895:24" pos:end="2895:27">stfs</name><operator pos:start="2895:28" pos:end="2895:28">.</operator><name pos:start="2895:29" pos:end="2895:34">f_fsid</name><operator pos:start="2895:35" pos:end="2895:35">.</operator><name pos:start="2895:36" pos:end="2895:40">__val</name><index pos:start="2895:41" pos:end="2895:43">[<expr pos:start="2895:42" pos:end="2895:42"><literal type="number" pos:start="2895:42" pos:end="2895:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2895:46" pos:end="2895:72"><expr pos:start="2895:46" pos:end="2895:72"><operator pos:start="2895:46" pos:end="2895:46">&amp;</operator><name pos:start="2895:47" pos:end="2895:72"><name pos:start="2895:47" pos:end="2895:57">target_stfs</name><operator pos:start="2895:58" pos:end="2895:59">-&gt;</operator><name pos:start="2895:60" pos:end="2895:65">f_fsid</name><operator pos:start="2895:66" pos:end="2895:66">.</operator><name pos:start="2895:67" pos:end="2895:69">val</name><index pos:start="2895:70" pos:end="2895:72">[<expr pos:start="2895:71" pos:end="2895:71"><literal type="number" pos:start="2895:71" pos:end="2895:71">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2897:13" pos:end="2897:74"><expr pos:start="2897:13" pos:end="2897:73"><call pos:start="2897:13" pos:end="2897:73"><name pos:start="2897:13" pos:end="2897:22">__put_user</name><argument_list pos:start="2897:23" pos:end="2897:73">(<argument pos:start="2897:24" pos:end="2897:43"><expr pos:start="2897:24" pos:end="2897:43"><name pos:start="2897:24" pos:end="2897:43"><name pos:start="2897:24" pos:end="2897:27">stfs</name><operator pos:start="2897:28" pos:end="2897:28">.</operator><name pos:start="2897:29" pos:end="2897:34">f_fsid</name><operator pos:start="2897:35" pos:end="2897:35">.</operator><name pos:start="2897:36" pos:end="2897:40">__val</name><index pos:start="2897:41" pos:end="2897:43">[<expr pos:start="2897:42" pos:end="2897:42"><literal type="number" pos:start="2897:42" pos:end="2897:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2897:46" pos:end="2897:72"><expr pos:start="2897:46" pos:end="2897:72"><operator pos:start="2897:46" pos:end="2897:46">&amp;</operator><name pos:start="2897:47" pos:end="2897:72"><name pos:start="2897:47" pos:end="2897:57">target_stfs</name><operator pos:start="2897:58" pos:end="2897:59">-&gt;</operator><name pos:start="2897:60" pos:end="2897:65">f_fsid</name><operator pos:start="2897:66" pos:end="2897:66">.</operator><name pos:start="2897:67" pos:end="2897:69">val</name><index pos:start="2897:70" pos:end="2897:72">[<expr pos:start="2897:71" pos:end="2897:71"><literal type="number" pos:start="2897:71" pos:end="2897:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2899:13" pos:end="2899:64"><expr pos:start="2899:13" pos:end="2899:63"><call pos:start="2899:13" pos:end="2899:63"><name pos:start="2899:13" pos:end="2899:22">__put_user</name><argument_list pos:start="2899:23" pos:end="2899:63">(<argument pos:start="2899:24" pos:end="2899:37"><expr pos:start="2899:24" pos:end="2899:37"><name pos:start="2899:24" pos:end="2899:37"><name pos:start="2899:24" pos:end="2899:27">stfs</name><operator pos:start="2899:28" pos:end="2899:28">.</operator><name pos:start="2899:29" pos:end="2899:37">f_namelen</name></name></expr></argument>, <argument pos:start="2899:40" pos:end="2899:62"><expr pos:start="2899:40" pos:end="2899:62"><operator pos:start="2899:40" pos:end="2899:40">&amp;</operator><name pos:start="2899:41" pos:end="2899:62"><name pos:start="2899:41" pos:end="2899:51">target_stfs</name><operator pos:start="2899:52" pos:end="2899:53">-&gt;</operator><name pos:start="2899:54" pos:end="2899:62">f_namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2901:13" pos:end="2901:62"><expr pos:start="2901:13" pos:end="2901:61"><call pos:start="2901:13" pos:end="2901:61"><name pos:start="2901:13" pos:end="2901:22">__put_user</name><argument_list pos:start="2901:23" pos:end="2901:61">(<argument pos:start="2901:24" pos:end="2901:36"><expr pos:start="2901:24" pos:end="2901:36"><name pos:start="2901:24" pos:end="2901:36"><name pos:start="2901:24" pos:end="2901:27">stfs</name><operator pos:start="2901:28" pos:end="2901:28">.</operator><name pos:start="2901:29" pos:end="2901:36">f_frsize</name></name></expr></argument>, <argument pos:start="2901:39" pos:end="2901:60"><expr pos:start="2901:39" pos:end="2901:60"><operator pos:start="2901:39" pos:end="2901:39">&amp;</operator><name pos:start="2901:40" pos:end="2901:60"><name pos:start="2901:40" pos:end="2901:50">target_stfs</name><operator pos:start="2901:51" pos:end="2901:52">-&gt;</operator><name pos:start="2901:53" pos:end="2901:60">f_frsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2903:13" pos:end="2903:74"><expr pos:start="2903:13" pos:end="2903:73"><call pos:start="2903:13" pos:end="2903:73"><name pos:start="2903:13" pos:end="2903:18">memset</name><argument_list pos:start="2903:19" pos:end="2903:73">(<argument pos:start="2903:20" pos:end="2903:39"><expr pos:start="2903:20" pos:end="2903:39"><name pos:start="2903:20" pos:end="2903:39"><name pos:start="2903:20" pos:end="2903:30">target_stfs</name><operator pos:start="2903:31" pos:end="2903:32">-&gt;</operator><name pos:start="2903:33" pos:end="2903:39">f_spare</name></name></expr></argument>, <argument pos:start="2903:42" pos:end="2903:42"><expr pos:start="2903:42" pos:end="2903:42"><literal type="number" pos:start="2903:42" pos:end="2903:42">0</literal></expr></argument>, <argument pos:start="2903:45" pos:end="2903:72"><expr pos:start="2903:45" pos:end="2903:72"><sizeof pos:start="2903:45" pos:end="2903:72">sizeof<argument_list pos:start="2903:51" pos:end="2903:72">(<argument pos:start="2903:52" pos:end="2903:71"><expr pos:start="2903:52" pos:end="2903:71"><name pos:start="2903:52" pos:end="2903:71"><name pos:start="2903:52" pos:end="2903:62">target_stfs</name><operator pos:start="2903:63" pos:end="2903:64">-&gt;</operator><name pos:start="2903:65" pos:end="2903:71">f_spare</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2905:13" pos:end="2905:53"><expr pos:start="2905:13" pos:end="2905:52"><call pos:start="2905:13" pos:end="2905:52"><name pos:start="2905:13" pos:end="2905:30">unlock_user_struct</name><argument_list pos:start="2905:31" pos:end="2905:52">(<argument pos:start="2905:32" pos:end="2905:42"><expr pos:start="2905:32" pos:end="2905:42"><name pos:start="2905:32" pos:end="2905:42">target_stfs</name></expr></argument>, <argument pos:start="2905:45" pos:end="2905:48"><expr pos:start="2905:45" pos:end="2905:48"><name pos:start="2905:45" pos:end="2905:48">arg2</name></expr></argument>, <argument pos:start="2905:51" pos:end="2905:51"><expr pos:start="2905:51" pos:end="2905:51"><literal type="number" pos:start="2905:51" pos:end="2905:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2909:9" pos:end="2909:14">break;</break>

    <case pos:start="2911:5" pos:end="2911:27">case <expr pos:start="2911:10" pos:end="2911:26"><name pos:start="2911:10" pos:end="2911:26">TARGET_NR_fstatfs</name></expr>:</case>

        <expr_stmt pos:start="2913:9" pos:end="2913:46"><expr pos:start="2913:9" pos:end="2913:45"><name pos:start="2913:9" pos:end="2913:11">ret</name> <operator pos:start="2913:13" pos:end="2913:13">=</operator> <call pos:start="2913:15" pos:end="2913:45"><name pos:start="2913:15" pos:end="2913:23">get_errno</name><argument_list pos:start="2913:24" pos:end="2913:45">(<argument pos:start="2913:25" pos:end="2913:44"><expr pos:start="2913:25" pos:end="2913:44"><call pos:start="2913:25" pos:end="2913:44"><name pos:start="2913:25" pos:end="2913:31">fstatfs</name><argument_list pos:start="2913:32" pos:end="2913:44">(<argument pos:start="2913:33" pos:end="2913:36"><expr pos:start="2913:33" pos:end="2913:36"><name pos:start="2913:33" pos:end="2913:36">arg1</name></expr></argument>, <argument pos:start="2913:39" pos:end="2913:43"><expr pos:start="2913:39" pos:end="2913:43"><operator pos:start="2913:39" pos:end="2913:39">&amp;</operator><name pos:start="2913:40" pos:end="2913:43">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="2915:9" pos:end="2918:0">goto <name pos:start="2915:14" pos:end="2915:27">convert_statfs</name>;</goto>

<cpp:ifdef pos:start="2917:1" pos:end="2917:25">#<cpp:directive pos:start="2917:2" pos:end="2917:6">ifdef</cpp:directive> <name pos:start="2917:8" pos:end="2917:25">TARGET_NR_statfs64</name></cpp:ifdef>

    <case pos:start="2919:5" pos:end="2919:28">case <expr pos:start="2919:10" pos:end="2919:27"><name pos:start="2919:10" pos:end="2919:27">TARGET_NR_statfs64</name></expr>:</case>

        <if_stmt pos:start="2921:9" pos:end="2923:24"><if pos:start="2921:9" pos:end="2923:24">if <condition pos:start="2921:12" pos:end="2921:42">(<expr pos:start="2921:13" pos:end="2921:41"><operator pos:start="2921:13" pos:end="2921:13">!</operator><operator pos:start="2921:14" pos:end="2921:14">(</operator><name pos:start="2921:15" pos:end="2921:15">p</name> <operator pos:start="2921:17" pos:end="2921:17">=</operator> <call pos:start="2921:19" pos:end="2921:40"><name pos:start="2921:19" pos:end="2921:34">lock_user_string</name><argument_list pos:start="2921:35" pos:end="2921:40">(<argument pos:start="2921:36" pos:end="2921:39"><expr pos:start="2921:36" pos:end="2921:39"><name pos:start="2921:36" pos:end="2921:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="2921:41" pos:end="2921:41">)</operator></expr>)</condition><block type="pseudo" pos:start="2923:13" pos:end="2923:24"><block_content pos:start="2923:13" pos:end="2923:24">

            <goto pos:start="2923:13" pos:end="2923:24">goto <name pos:start="2923:18" pos:end="2923:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2925:9" pos:end="2925:48"><expr pos:start="2925:9" pos:end="2925:47"><name pos:start="2925:9" pos:end="2925:11">ret</name> <operator pos:start="2925:13" pos:end="2925:13">=</operator> <call pos:start="2925:15" pos:end="2925:47"><name pos:start="2925:15" pos:end="2925:23">get_errno</name><argument_list pos:start="2925:24" pos:end="2925:47">(<argument pos:start="2925:25" pos:end="2925:46"><expr pos:start="2925:25" pos:end="2925:46"><call pos:start="2925:25" pos:end="2925:46"><name pos:start="2925:25" pos:end="2925:30">statfs</name><argument_list pos:start="2925:31" pos:end="2925:46">(<argument pos:start="2925:32" pos:end="2925:38"><expr pos:start="2925:32" pos:end="2925:38"><call pos:start="2925:32" pos:end="2925:38"><name pos:start="2925:32" pos:end="2925:35">path</name><argument_list pos:start="2925:36" pos:end="2925:38">(<argument pos:start="2925:37" pos:end="2925:37"><expr pos:start="2925:37" pos:end="2925:37"><name pos:start="2925:37" pos:end="2925:37">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2925:41" pos:end="2925:45"><expr pos:start="2925:41" pos:end="2925:45"><operator pos:start="2925:41" pos:end="2925:41">&amp;</operator><name pos:start="2925:42" pos:end="2925:45">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2927:9" pos:end="2927:32"><expr pos:start="2927:9" pos:end="2927:31"><call pos:start="2927:9" pos:end="2927:31"><name pos:start="2927:9" pos:end="2927:19">unlock_user</name><argument_list pos:start="2927:20" pos:end="2927:31">(<argument pos:start="2927:21" pos:end="2927:21"><expr pos:start="2927:21" pos:end="2927:21"><name pos:start="2927:21" pos:end="2927:21">p</name></expr></argument>, <argument pos:start="2927:24" pos:end="2927:27"><expr pos:start="2927:24" pos:end="2927:27"><name pos:start="2927:24" pos:end="2927:27">arg1</name></expr></argument>, <argument pos:start="2927:30" pos:end="2927:30"><expr pos:start="2927:30" pos:end="2927:30"><literal type="number" pos:start="2927:30" pos:end="2927:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="2929:5" pos:end="2929:21"><name pos:start="2929:5" pos:end="2929:20">convert_statfs64</name>:</label>

        <if_stmt pos:start="2931:9" pos:end="2967:9"><if pos:start="2931:9" pos:end="2967:9">if <condition pos:start="2931:12" pos:end="2931:27">(<expr pos:start="2931:13" pos:end="2931:26"><operator pos:start="2931:13" pos:end="2931:13">!</operator><call pos:start="2931:14" pos:end="2931:26"><name pos:start="2931:14" pos:end="2931:21">is_error</name><argument_list pos:start="2931:22" pos:end="2931:26">(<argument pos:start="2931:23" pos:end="2931:25"><expr pos:start="2931:23" pos:end="2931:25"><name pos:start="2931:23" pos:end="2931:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2931:29" pos:end="2967:9">{<block_content pos:start="2933:13" pos:end="2965:53">

            <decl_stmt pos:start="2933:13" pos:end="2933:48"><decl pos:start="2933:13" pos:end="2933:47"><type pos:start="2933:13" pos:end="2933:36"><name pos:start="2933:13" pos:end="2933:34"><name pos:start="2933:13" pos:end="2933:18">struct</name> <name pos:start="2933:20" pos:end="2933:34">target_statfs64</name></name> <modifier pos:start="2933:36" pos:end="2933:36">*</modifier></type><name pos:start="2933:37" pos:end="2933:47">target_stfs</name></decl>;</decl_stmt>



            <if_stmt pos:start="2937:13" pos:end="2939:28"><if pos:start="2937:13" pos:end="2939:28">if <condition pos:start="2937:16" pos:end="2937:70">(<expr pos:start="2937:17" pos:end="2937:69"><operator pos:start="2937:17" pos:end="2937:17">!</operator><call pos:start="2937:18" pos:end="2937:69"><name pos:start="2937:18" pos:end="2937:33">lock_user_struct</name><argument_list pos:start="2937:34" pos:end="2937:69">(<argument pos:start="2937:35" pos:end="2937:46"><expr pos:start="2937:35" pos:end="2937:46"><name pos:start="2937:35" pos:end="2937:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="2937:49" pos:end="2937:59"><expr pos:start="2937:49" pos:end="2937:59"><name pos:start="2937:49" pos:end="2937:59">target_stfs</name></expr></argument>, <argument pos:start="2937:62" pos:end="2937:65"><expr pos:start="2937:62" pos:end="2937:65"><name pos:start="2937:62" pos:end="2937:65">arg3</name></expr></argument>, <argument pos:start="2937:68" pos:end="2937:68"><expr pos:start="2937:68" pos:end="2937:68"><literal type="number" pos:start="2937:68" pos:end="2937:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2939:17" pos:end="2939:28"><block_content pos:start="2939:17" pos:end="2939:28">

                <goto pos:start="2939:17" pos:end="2939:28">goto <name pos:start="2939:22" pos:end="2939:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2941:13" pos:end="2941:58"><expr pos:start="2941:13" pos:end="2941:57"><call pos:start="2941:13" pos:end="2941:57"><name pos:start="2941:13" pos:end="2941:22">__put_user</name><argument_list pos:start="2941:23" pos:end="2941:57">(<argument pos:start="2941:24" pos:end="2941:34"><expr pos:start="2941:24" pos:end="2941:34"><name pos:start="2941:24" pos:end="2941:34"><name pos:start="2941:24" pos:end="2941:27">stfs</name><operator pos:start="2941:28" pos:end="2941:28">.</operator><name pos:start="2941:29" pos:end="2941:34">f_type</name></name></expr></argument>, <argument pos:start="2941:37" pos:end="2941:56"><expr pos:start="2941:37" pos:end="2941:56"><operator pos:start="2941:37" pos:end="2941:37">&amp;</operator><name pos:start="2941:38" pos:end="2941:56"><name pos:start="2941:38" pos:end="2941:48">target_stfs</name><operator pos:start="2941:49" pos:end="2941:50">-&gt;</operator><name pos:start="2941:51" pos:end="2941:56">f_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2943:13" pos:end="2943:60"><expr pos:start="2943:13" pos:end="2943:59"><call pos:start="2943:13" pos:end="2943:59"><name pos:start="2943:13" pos:end="2943:22">__put_user</name><argument_list pos:start="2943:23" pos:end="2943:59">(<argument pos:start="2943:24" pos:end="2943:35"><expr pos:start="2943:24" pos:end="2943:35"><name pos:start="2943:24" pos:end="2943:35"><name pos:start="2943:24" pos:end="2943:27">stfs</name><operator pos:start="2943:28" pos:end="2943:28">.</operator><name pos:start="2943:29" pos:end="2943:35">f_bsize</name></name></expr></argument>, <argument pos:start="2943:38" pos:end="2943:58"><expr pos:start="2943:38" pos:end="2943:58"><operator pos:start="2943:38" pos:end="2943:38">&amp;</operator><name pos:start="2943:39" pos:end="2943:58"><name pos:start="2943:39" pos:end="2943:49">target_stfs</name><operator pos:start="2943:50" pos:end="2943:51">-&gt;</operator><name pos:start="2943:52" pos:end="2943:58">f_bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2945:13" pos:end="2945:62"><expr pos:start="2945:13" pos:end="2945:61"><call pos:start="2945:13" pos:end="2945:61"><name pos:start="2945:13" pos:end="2945:22">__put_user</name><argument_list pos:start="2945:23" pos:end="2945:61">(<argument pos:start="2945:24" pos:end="2945:36"><expr pos:start="2945:24" pos:end="2945:36"><name pos:start="2945:24" pos:end="2945:36"><name pos:start="2945:24" pos:end="2945:27">stfs</name><operator pos:start="2945:28" pos:end="2945:28">.</operator><name pos:start="2945:29" pos:end="2945:36">f_blocks</name></name></expr></argument>, <argument pos:start="2945:39" pos:end="2945:60"><expr pos:start="2945:39" pos:end="2945:60"><operator pos:start="2945:39" pos:end="2945:39">&amp;</operator><name pos:start="2945:40" pos:end="2945:60"><name pos:start="2945:40" pos:end="2945:50">target_stfs</name><operator pos:start="2945:51" pos:end="2945:52">-&gt;</operator><name pos:start="2945:53" pos:end="2945:60">f_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2947:13" pos:end="2947:60"><expr pos:start="2947:13" pos:end="2947:59"><call pos:start="2947:13" pos:end="2947:59"><name pos:start="2947:13" pos:end="2947:22">__put_user</name><argument_list pos:start="2947:23" pos:end="2947:59">(<argument pos:start="2947:24" pos:end="2947:35"><expr pos:start="2947:24" pos:end="2947:35"><name pos:start="2947:24" pos:end="2947:35"><name pos:start="2947:24" pos:end="2947:27">stfs</name><operator pos:start="2947:28" pos:end="2947:28">.</operator><name pos:start="2947:29" pos:end="2947:35">f_bfree</name></name></expr></argument>, <argument pos:start="2947:38" pos:end="2947:58"><expr pos:start="2947:38" pos:end="2947:58"><operator pos:start="2947:38" pos:end="2947:38">&amp;</operator><name pos:start="2947:39" pos:end="2947:58"><name pos:start="2947:39" pos:end="2947:49">target_stfs</name><operator pos:start="2947:50" pos:end="2947:51">-&gt;</operator><name pos:start="2947:52" pos:end="2947:58">f_bfree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2949:13" pos:end="2949:62"><expr pos:start="2949:13" pos:end="2949:61"><call pos:start="2949:13" pos:end="2949:61"><name pos:start="2949:13" pos:end="2949:22">__put_user</name><argument_list pos:start="2949:23" pos:end="2949:61">(<argument pos:start="2949:24" pos:end="2949:36"><expr pos:start="2949:24" pos:end="2949:36"><name pos:start="2949:24" pos:end="2949:36"><name pos:start="2949:24" pos:end="2949:27">stfs</name><operator pos:start="2949:28" pos:end="2949:28">.</operator><name pos:start="2949:29" pos:end="2949:36">f_bavail</name></name></expr></argument>, <argument pos:start="2949:39" pos:end="2949:60"><expr pos:start="2949:39" pos:end="2949:60"><operator pos:start="2949:39" pos:end="2949:39">&amp;</operator><name pos:start="2949:40" pos:end="2949:60"><name pos:start="2949:40" pos:end="2949:50">target_stfs</name><operator pos:start="2949:51" pos:end="2949:52">-&gt;</operator><name pos:start="2949:53" pos:end="2949:60">f_bavail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2951:13" pos:end="2951:60"><expr pos:start="2951:13" pos:end="2951:59"><call pos:start="2951:13" pos:end="2951:59"><name pos:start="2951:13" pos:end="2951:22">__put_user</name><argument_list pos:start="2951:23" pos:end="2951:59">(<argument pos:start="2951:24" pos:end="2951:35"><expr pos:start="2951:24" pos:end="2951:35"><name pos:start="2951:24" pos:end="2951:35"><name pos:start="2951:24" pos:end="2951:27">stfs</name><operator pos:start="2951:28" pos:end="2951:28">.</operator><name pos:start="2951:29" pos:end="2951:35">f_files</name></name></expr></argument>, <argument pos:start="2951:38" pos:end="2951:58"><expr pos:start="2951:38" pos:end="2951:58"><operator pos:start="2951:38" pos:end="2951:38">&amp;</operator><name pos:start="2951:39" pos:end="2951:58"><name pos:start="2951:39" pos:end="2951:49">target_stfs</name><operator pos:start="2951:50" pos:end="2951:51">-&gt;</operator><name pos:start="2951:52" pos:end="2951:58">f_files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2953:13" pos:end="2953:60"><expr pos:start="2953:13" pos:end="2953:59"><call pos:start="2953:13" pos:end="2953:59"><name pos:start="2953:13" pos:end="2953:22">__put_user</name><argument_list pos:start="2953:23" pos:end="2953:59">(<argument pos:start="2953:24" pos:end="2953:35"><expr pos:start="2953:24" pos:end="2953:35"><name pos:start="2953:24" pos:end="2953:35"><name pos:start="2953:24" pos:end="2953:27">stfs</name><operator pos:start="2953:28" pos:end="2953:28">.</operator><name pos:start="2953:29" pos:end="2953:35">f_ffree</name></name></expr></argument>, <argument pos:start="2953:38" pos:end="2953:58"><expr pos:start="2953:38" pos:end="2953:58"><operator pos:start="2953:38" pos:end="2953:38">&amp;</operator><name pos:start="2953:39" pos:end="2953:58"><name pos:start="2953:39" pos:end="2953:49">target_stfs</name><operator pos:start="2953:50" pos:end="2953:51">-&gt;</operator><name pos:start="2953:52" pos:end="2953:58">f_ffree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2955:13" pos:end="2955:74"><expr pos:start="2955:13" pos:end="2955:73"><call pos:start="2955:13" pos:end="2955:73"><name pos:start="2955:13" pos:end="2955:22">__put_user</name><argument_list pos:start="2955:23" pos:end="2955:73">(<argument pos:start="2955:24" pos:end="2955:43"><expr pos:start="2955:24" pos:end="2955:43"><name pos:start="2955:24" pos:end="2955:43"><name pos:start="2955:24" pos:end="2955:27">stfs</name><operator pos:start="2955:28" pos:end="2955:28">.</operator><name pos:start="2955:29" pos:end="2955:34">f_fsid</name><operator pos:start="2955:35" pos:end="2955:35">.</operator><name pos:start="2955:36" pos:end="2955:40">__val</name><index pos:start="2955:41" pos:end="2955:43">[<expr pos:start="2955:42" pos:end="2955:42"><literal type="number" pos:start="2955:42" pos:end="2955:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2955:46" pos:end="2955:72"><expr pos:start="2955:46" pos:end="2955:72"><operator pos:start="2955:46" pos:end="2955:46">&amp;</operator><name pos:start="2955:47" pos:end="2955:72"><name pos:start="2955:47" pos:end="2955:57">target_stfs</name><operator pos:start="2955:58" pos:end="2955:59">-&gt;</operator><name pos:start="2955:60" pos:end="2955:65">f_fsid</name><operator pos:start="2955:66" pos:end="2955:66">.</operator><name pos:start="2955:67" pos:end="2955:69">val</name><index pos:start="2955:70" pos:end="2955:72">[<expr pos:start="2955:71" pos:end="2955:71"><literal type="number" pos:start="2955:71" pos:end="2955:71">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2957:13" pos:end="2957:74"><expr pos:start="2957:13" pos:end="2957:73"><call pos:start="2957:13" pos:end="2957:73"><name pos:start="2957:13" pos:end="2957:22">__put_user</name><argument_list pos:start="2957:23" pos:end="2957:73">(<argument pos:start="2957:24" pos:end="2957:43"><expr pos:start="2957:24" pos:end="2957:43"><name pos:start="2957:24" pos:end="2957:43"><name pos:start="2957:24" pos:end="2957:27">stfs</name><operator pos:start="2957:28" pos:end="2957:28">.</operator><name pos:start="2957:29" pos:end="2957:34">f_fsid</name><operator pos:start="2957:35" pos:end="2957:35">.</operator><name pos:start="2957:36" pos:end="2957:40">__val</name><index pos:start="2957:41" pos:end="2957:43">[<expr pos:start="2957:42" pos:end="2957:42"><literal type="number" pos:start="2957:42" pos:end="2957:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2957:46" pos:end="2957:72"><expr pos:start="2957:46" pos:end="2957:72"><operator pos:start="2957:46" pos:end="2957:46">&amp;</operator><name pos:start="2957:47" pos:end="2957:72"><name pos:start="2957:47" pos:end="2957:57">target_stfs</name><operator pos:start="2957:58" pos:end="2957:59">-&gt;</operator><name pos:start="2957:60" pos:end="2957:65">f_fsid</name><operator pos:start="2957:66" pos:end="2957:66">.</operator><name pos:start="2957:67" pos:end="2957:69">val</name><index pos:start="2957:70" pos:end="2957:72">[<expr pos:start="2957:71" pos:end="2957:71"><literal type="number" pos:start="2957:71" pos:end="2957:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2959:13" pos:end="2959:64"><expr pos:start="2959:13" pos:end="2959:63"><call pos:start="2959:13" pos:end="2959:63"><name pos:start="2959:13" pos:end="2959:22">__put_user</name><argument_list pos:start="2959:23" pos:end="2959:63">(<argument pos:start="2959:24" pos:end="2959:37"><expr pos:start="2959:24" pos:end="2959:37"><name pos:start="2959:24" pos:end="2959:37"><name pos:start="2959:24" pos:end="2959:27">stfs</name><operator pos:start="2959:28" pos:end="2959:28">.</operator><name pos:start="2959:29" pos:end="2959:37">f_namelen</name></name></expr></argument>, <argument pos:start="2959:40" pos:end="2959:62"><expr pos:start="2959:40" pos:end="2959:62"><operator pos:start="2959:40" pos:end="2959:40">&amp;</operator><name pos:start="2959:41" pos:end="2959:62"><name pos:start="2959:41" pos:end="2959:51">target_stfs</name><operator pos:start="2959:52" pos:end="2959:53">-&gt;</operator><name pos:start="2959:54" pos:end="2959:62">f_namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2961:13" pos:end="2961:62"><expr pos:start="2961:13" pos:end="2961:61"><call pos:start="2961:13" pos:end="2961:61"><name pos:start="2961:13" pos:end="2961:22">__put_user</name><argument_list pos:start="2961:23" pos:end="2961:61">(<argument pos:start="2961:24" pos:end="2961:36"><expr pos:start="2961:24" pos:end="2961:36"><name pos:start="2961:24" pos:end="2961:36"><name pos:start="2961:24" pos:end="2961:27">stfs</name><operator pos:start="2961:28" pos:end="2961:28">.</operator><name pos:start="2961:29" pos:end="2961:36">f_frsize</name></name></expr></argument>, <argument pos:start="2961:39" pos:end="2961:60"><expr pos:start="2961:39" pos:end="2961:60"><operator pos:start="2961:39" pos:end="2961:39">&amp;</operator><name pos:start="2961:40" pos:end="2961:60"><name pos:start="2961:40" pos:end="2961:50">target_stfs</name><operator pos:start="2961:51" pos:end="2961:52">-&gt;</operator><name pos:start="2961:53" pos:end="2961:60">f_frsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2963:13" pos:end="2963:74"><expr pos:start="2963:13" pos:end="2963:73"><call pos:start="2963:13" pos:end="2963:73"><name pos:start="2963:13" pos:end="2963:18">memset</name><argument_list pos:start="2963:19" pos:end="2963:73">(<argument pos:start="2963:20" pos:end="2963:39"><expr pos:start="2963:20" pos:end="2963:39"><name pos:start="2963:20" pos:end="2963:39"><name pos:start="2963:20" pos:end="2963:30">target_stfs</name><operator pos:start="2963:31" pos:end="2963:32">-&gt;</operator><name pos:start="2963:33" pos:end="2963:39">f_spare</name></name></expr></argument>, <argument pos:start="2963:42" pos:end="2963:42"><expr pos:start="2963:42" pos:end="2963:42"><literal type="number" pos:start="2963:42" pos:end="2963:42">0</literal></expr></argument>, <argument pos:start="2963:45" pos:end="2963:72"><expr pos:start="2963:45" pos:end="2963:72"><sizeof pos:start="2963:45" pos:end="2963:72">sizeof<argument_list pos:start="2963:51" pos:end="2963:72">(<argument pos:start="2963:52" pos:end="2963:71"><expr pos:start="2963:52" pos:end="2963:71"><name pos:start="2963:52" pos:end="2963:71"><name pos:start="2963:52" pos:end="2963:62">target_stfs</name><operator pos:start="2963:63" pos:end="2963:64">-&gt;</operator><name pos:start="2963:65" pos:end="2963:71">f_spare</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2965:13" pos:end="2965:53"><expr pos:start="2965:13" pos:end="2965:52"><call pos:start="2965:13" pos:end="2965:52"><name pos:start="2965:13" pos:end="2965:30">unlock_user_struct</name><argument_list pos:start="2965:31" pos:end="2965:52">(<argument pos:start="2965:32" pos:end="2965:42"><expr pos:start="2965:32" pos:end="2965:42"><name pos:start="2965:32" pos:end="2965:42">target_stfs</name></expr></argument>, <argument pos:start="2965:45" pos:end="2965:48"><expr pos:start="2965:45" pos:end="2965:48"><name pos:start="2965:45" pos:end="2965:48">arg3</name></expr></argument>, <argument pos:start="2965:51" pos:end="2965:51"><expr pos:start="2965:51" pos:end="2965:51"><literal type="number" pos:start="2965:51" pos:end="2965:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2969:9" pos:end="2969:14">break;</break>

    <case pos:start="2971:5" pos:end="2971:29">case <expr pos:start="2971:10" pos:end="2971:28"><name pos:start="2971:10" pos:end="2971:28">TARGET_NR_fstatfs64</name></expr>:</case>

        <expr_stmt pos:start="2973:9" pos:end="2973:46"><expr pos:start="2973:9" pos:end="2973:45"><name pos:start="2973:9" pos:end="2973:11">ret</name> <operator pos:start="2973:13" pos:end="2973:13">=</operator> <call pos:start="2973:15" pos:end="2973:45"><name pos:start="2973:15" pos:end="2973:23">get_errno</name><argument_list pos:start="2973:24" pos:end="2973:45">(<argument pos:start="2973:25" pos:end="2973:44"><expr pos:start="2973:25" pos:end="2973:44"><call pos:start="2973:25" pos:end="2973:44"><name pos:start="2973:25" pos:end="2973:31">fstatfs</name><argument_list pos:start="2973:32" pos:end="2973:44">(<argument pos:start="2973:33" pos:end="2973:36"><expr pos:start="2973:33" pos:end="2973:36"><name pos:start="2973:33" pos:end="2973:36">arg1</name></expr></argument>, <argument pos:start="2973:39" pos:end="2973:43"><expr pos:start="2973:39" pos:end="2973:43"><operator pos:start="2973:39" pos:end="2973:39">&amp;</operator><name pos:start="2973:40" pos:end="2973:43">stfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="2975:9" pos:end="2980:0">goto <name pos:start="2975:14" pos:end="2975:29">convert_statfs64</name>;</goto>

<cpp:endif pos:start="2977:1" pos:end="2977:6">#<cpp:directive pos:start="2977:2" pos:end="2977:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2979:1" pos:end="2979:23">#<cpp:directive pos:start="2979:2" pos:end="2979:6">ifdef</cpp:directive> <name pos:start="2979:8" pos:end="2979:23">TARGET_NR_ioperm</name></cpp:ifdef>

    <case pos:start="2981:5" pos:end="2981:26">case <expr pos:start="2981:10" pos:end="2981:25"><name pos:start="2981:10" pos:end="2981:25">TARGET_NR_ioperm</name></expr>:</case>

        <goto pos:start="2983:9" pos:end="2988:0">goto <name pos:start="2983:14" pos:end="2983:26">unimplemented</name>;</goto>

<cpp:endif pos:start="2985:1" pos:end="2985:6">#<cpp:directive pos:start="2985:2" pos:end="2985:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2987:1" pos:end="2987:27">#<cpp:directive pos:start="2987:2" pos:end="2987:6">ifdef</cpp:directive> <name pos:start="2987:8" pos:end="2987:27">TARGET_NR_socketcall</name></cpp:ifdef>

    <case pos:start="2989:5" pos:end="2989:30">case <expr pos:start="2989:10" pos:end="2989:29"><name pos:start="2989:10" pos:end="2989:29">TARGET_NR_socketcall</name></expr>:</case>

        <expr_stmt pos:start="2991:9" pos:end="2991:40"><expr pos:start="2991:9" pos:end="2991:39"><name pos:start="2991:9" pos:end="2991:11">ret</name> <operator pos:start="2991:13" pos:end="2991:13">=</operator> <call pos:start="2991:15" pos:end="2991:39"><name pos:start="2991:15" pos:end="2991:27">do_socketcall</name><argument_list pos:start="2991:28" pos:end="2991:39">(<argument pos:start="2991:29" pos:end="2991:32"><expr pos:start="2991:29" pos:end="2991:32"><name pos:start="2991:29" pos:end="2991:32">arg1</name></expr></argument>, <argument pos:start="2991:35" pos:end="2991:38"><expr pos:start="2991:35" pos:end="2991:38"><name pos:start="2991:35" pos:end="2991:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2993:9" pos:end="2998:0">break;</break>

<cpp:endif pos:start="2995:1" pos:end="2995:6">#<cpp:directive pos:start="2995:2" pos:end="2995:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2997:1" pos:end="2997:23">#<cpp:directive pos:start="2997:2" pos:end="2997:6">ifdef</cpp:directive> <name pos:start="2997:8" pos:end="2997:23">TARGET_NR_accept</name></cpp:ifdef>

    <case pos:start="2999:5" pos:end="2999:26">case <expr pos:start="2999:10" pos:end="2999:25"><name pos:start="2999:10" pos:end="2999:25">TARGET_NR_accept</name></expr>:</case>

        <expr_stmt pos:start="3001:9" pos:end="3001:46"><expr pos:start="3001:9" pos:end="3001:45"><name pos:start="3001:9" pos:end="3001:11">ret</name> <operator pos:start="3001:13" pos:end="3001:13">=</operator> <call pos:start="3001:15" pos:end="3001:45"><name pos:start="3001:15" pos:end="3001:24">do_accept4</name><argument_list pos:start="3001:25" pos:end="3001:45">(<argument pos:start="3001:26" pos:end="3001:29"><expr pos:start="3001:26" pos:end="3001:29"><name pos:start="3001:26" pos:end="3001:29">arg1</name></expr></argument>, <argument pos:start="3001:32" pos:end="3001:35"><expr pos:start="3001:32" pos:end="3001:35"><name pos:start="3001:32" pos:end="3001:35">arg2</name></expr></argument>, <argument pos:start="3001:38" pos:end="3001:41"><expr pos:start="3001:38" pos:end="3001:41"><name pos:start="3001:38" pos:end="3001:41">arg3</name></expr></argument>, <argument pos:start="3001:44" pos:end="3001:44"><expr pos:start="3001:44" pos:end="3001:44"><literal type="number" pos:start="3001:44" pos:end="3001:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3003:9" pos:end="3008:0">break;</break>

<cpp:endif pos:start="3005:1" pos:end="3005:6">#<cpp:directive pos:start="3005:2" pos:end="3005:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3007:1" pos:end="3007:24">#<cpp:directive pos:start="3007:2" pos:end="3007:6">ifdef</cpp:directive> <name pos:start="3007:8" pos:end="3007:24">TARGET_NR_accept4</name></cpp:ifdef>

    <case pos:start="3009:5" pos:end="3012:0">case <expr pos:start="3009:10" pos:end="3009:26"><name pos:start="3009:10" pos:end="3009:26">TARGET_NR_accept4</name></expr>:</case>

<cpp:ifdef pos:start="3011:1" pos:end="3011:21">#<cpp:directive pos:start="3011:2" pos:end="3011:6">ifdef</cpp:directive> <name pos:start="3011:8" pos:end="3011:21">CONFIG_ACCEPT4</name></cpp:ifdef>

        <expr_stmt pos:start="3013:9" pos:end="3016:0"><expr pos:start="3013:9" pos:end="3013:48"><name pos:start="3013:9" pos:end="3013:11">ret</name> <operator pos:start="3013:13" pos:end="3013:13">=</operator> <call pos:start="3013:15" pos:end="3013:48"><name pos:start="3013:15" pos:end="3013:24">do_accept4</name><argument_list pos:start="3013:25" pos:end="3013:48">(<argument pos:start="3013:26" pos:end="3013:29"><expr pos:start="3013:26" pos:end="3013:29"><name pos:start="3013:26" pos:end="3013:29">arg1</name></expr></argument>, <argument pos:start="3013:32" pos:end="3013:35"><expr pos:start="3013:32" pos:end="3013:35"><name pos:start="3013:32" pos:end="3013:35">arg2</name></expr></argument>, <argument pos:start="3013:38" pos:end="3013:41"><expr pos:start="3013:38" pos:end="3013:41"><name pos:start="3013:38" pos:end="3013:41">arg3</name></expr></argument>, <argument pos:start="3013:44" pos:end="3013:47"><expr pos:start="3013:44" pos:end="3013:47"><name pos:start="3013:44" pos:end="3013:47">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="3015:1" pos:end="3015:5">#<cpp:directive pos:start="3015:2" pos:end="3015:5">else</cpp:directive></cpp:else>

        <goto pos:start="3017:9" pos:end="3020:0">goto <name pos:start="3017:14" pos:end="3017:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3019:1" pos:end="3019:6">#<cpp:directive pos:start="3019:2" pos:end="3019:6">endif</cpp:directive></cpp:endif>

        <break pos:start="3021:9" pos:end="3026:0">break;</break>

<cpp:endif pos:start="3023:1" pos:end="3023:6">#<cpp:directive pos:start="3023:2" pos:end="3023:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3025:1" pos:end="3025:21">#<cpp:directive pos:start="3025:2" pos:end="3025:6">ifdef</cpp:directive> <name pos:start="3025:8" pos:end="3025:21">TARGET_NR_bind</name></cpp:ifdef>

    <case pos:start="3027:5" pos:end="3027:24">case <expr pos:start="3027:10" pos:end="3027:23"><name pos:start="3027:10" pos:end="3027:23">TARGET_NR_bind</name></expr>:</case>

        <expr_stmt pos:start="3029:9" pos:end="3029:40"><expr pos:start="3029:9" pos:end="3029:39"><name pos:start="3029:9" pos:end="3029:11">ret</name> <operator pos:start="3029:13" pos:end="3029:13">=</operator> <call pos:start="3029:15" pos:end="3029:39"><name pos:start="3029:15" pos:end="3029:21">do_bind</name><argument_list pos:start="3029:22" pos:end="3029:39">(<argument pos:start="3029:23" pos:end="3029:26"><expr pos:start="3029:23" pos:end="3029:26"><name pos:start="3029:23" pos:end="3029:26">arg1</name></expr></argument>, <argument pos:start="3029:29" pos:end="3029:32"><expr pos:start="3029:29" pos:end="3029:32"><name pos:start="3029:29" pos:end="3029:32">arg2</name></expr></argument>, <argument pos:start="3029:35" pos:end="3029:38"><expr pos:start="3029:35" pos:end="3029:38"><name pos:start="3029:35" pos:end="3029:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3031:9" pos:end="3036:0">break;</break>

<cpp:endif pos:start="3033:1" pos:end="3033:6">#<cpp:directive pos:start="3033:2" pos:end="3033:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3035:1" pos:end="3035:24">#<cpp:directive pos:start="3035:2" pos:end="3035:6">ifdef</cpp:directive> <name pos:start="3035:8" pos:end="3035:24">TARGET_NR_connect</name></cpp:ifdef>

    <case pos:start="3037:5" pos:end="3037:27">case <expr pos:start="3037:10" pos:end="3037:26"><name pos:start="3037:10" pos:end="3037:26">TARGET_NR_connect</name></expr>:</case>

        <expr_stmt pos:start="3039:9" pos:end="3039:43"><expr pos:start="3039:9" pos:end="3039:42"><name pos:start="3039:9" pos:end="3039:11">ret</name> <operator pos:start="3039:13" pos:end="3039:13">=</operator> <call pos:start="3039:15" pos:end="3039:42"><name pos:start="3039:15" pos:end="3039:24">do_connect</name><argument_list pos:start="3039:25" pos:end="3039:42">(<argument pos:start="3039:26" pos:end="3039:29"><expr pos:start="3039:26" pos:end="3039:29"><name pos:start="3039:26" pos:end="3039:29">arg1</name></expr></argument>, <argument pos:start="3039:32" pos:end="3039:35"><expr pos:start="3039:32" pos:end="3039:35"><name pos:start="3039:32" pos:end="3039:35">arg2</name></expr></argument>, <argument pos:start="3039:38" pos:end="3039:41"><expr pos:start="3039:38" pos:end="3039:41"><name pos:start="3039:38" pos:end="3039:41">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3041:9" pos:end="3046:0">break;</break>

<cpp:endif pos:start="3043:1" pos:end="3043:6">#<cpp:directive pos:start="3043:2" pos:end="3043:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3045:1" pos:end="3045:28">#<cpp:directive pos:start="3045:2" pos:end="3045:6">ifdef</cpp:directive> <name pos:start="3045:8" pos:end="3045:28">TARGET_NR_getpeername</name></cpp:ifdef>

    <case pos:start="3047:5" pos:end="3047:31">case <expr pos:start="3047:10" pos:end="3047:30"><name pos:start="3047:10" pos:end="3047:30">TARGET_NR_getpeername</name></expr>:</case>

        <expr_stmt pos:start="3049:9" pos:end="3049:47"><expr pos:start="3049:9" pos:end="3049:46"><name pos:start="3049:9" pos:end="3049:11">ret</name> <operator pos:start="3049:13" pos:end="3049:13">=</operator> <call pos:start="3049:15" pos:end="3049:46"><name pos:start="3049:15" pos:end="3049:28">do_getpeername</name><argument_list pos:start="3049:29" pos:end="3049:46">(<argument pos:start="3049:30" pos:end="3049:33"><expr pos:start="3049:30" pos:end="3049:33"><name pos:start="3049:30" pos:end="3049:33">arg1</name></expr></argument>, <argument pos:start="3049:36" pos:end="3049:39"><expr pos:start="3049:36" pos:end="3049:39"><name pos:start="3049:36" pos:end="3049:39">arg2</name></expr></argument>, <argument pos:start="3049:42" pos:end="3049:45"><expr pos:start="3049:42" pos:end="3049:45"><name pos:start="3049:42" pos:end="3049:45">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3051:9" pos:end="3056:0">break;</break>

<cpp:endif pos:start="3053:1" pos:end="3053:6">#<cpp:directive pos:start="3053:2" pos:end="3053:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3055:1" pos:end="3055:28">#<cpp:directive pos:start="3055:2" pos:end="3055:6">ifdef</cpp:directive> <name pos:start="3055:8" pos:end="3055:28">TARGET_NR_getsockname</name></cpp:ifdef>

    <case pos:start="3057:5" pos:end="3057:31">case <expr pos:start="3057:10" pos:end="3057:30"><name pos:start="3057:10" pos:end="3057:30">TARGET_NR_getsockname</name></expr>:</case>

        <expr_stmt pos:start="3059:9" pos:end="3059:47"><expr pos:start="3059:9" pos:end="3059:46"><name pos:start="3059:9" pos:end="3059:11">ret</name> <operator pos:start="3059:13" pos:end="3059:13">=</operator> <call pos:start="3059:15" pos:end="3059:46"><name pos:start="3059:15" pos:end="3059:28">do_getsockname</name><argument_list pos:start="3059:29" pos:end="3059:46">(<argument pos:start="3059:30" pos:end="3059:33"><expr pos:start="3059:30" pos:end="3059:33"><name pos:start="3059:30" pos:end="3059:33">arg1</name></expr></argument>, <argument pos:start="3059:36" pos:end="3059:39"><expr pos:start="3059:36" pos:end="3059:39"><name pos:start="3059:36" pos:end="3059:39">arg2</name></expr></argument>, <argument pos:start="3059:42" pos:end="3059:45"><expr pos:start="3059:42" pos:end="3059:45"><name pos:start="3059:42" pos:end="3059:45">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3061:9" pos:end="3066:0">break;</break>

<cpp:endif pos:start="3063:1" pos:end="3063:6">#<cpp:directive pos:start="3063:2" pos:end="3063:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3065:1" pos:end="3065:27">#<cpp:directive pos:start="3065:2" pos:end="3065:6">ifdef</cpp:directive> <name pos:start="3065:8" pos:end="3065:27">TARGET_NR_getsockopt</name></cpp:ifdef>

    <case pos:start="3067:5" pos:end="3067:30">case <expr pos:start="3067:10" pos:end="3067:29"><name pos:start="3067:10" pos:end="3067:29">TARGET_NR_getsockopt</name></expr>:</case>

        <expr_stmt pos:start="3069:9" pos:end="3069:58"><expr pos:start="3069:9" pos:end="3069:57"><name pos:start="3069:9" pos:end="3069:11">ret</name> <operator pos:start="3069:13" pos:end="3069:13">=</operator> <call pos:start="3069:15" pos:end="3069:57"><name pos:start="3069:15" pos:end="3069:27">do_getsockopt</name><argument_list pos:start="3069:28" pos:end="3069:57">(<argument pos:start="3069:29" pos:end="3069:32"><expr pos:start="3069:29" pos:end="3069:32"><name pos:start="3069:29" pos:end="3069:32">arg1</name></expr></argument>, <argument pos:start="3069:35" pos:end="3069:38"><expr pos:start="3069:35" pos:end="3069:38"><name pos:start="3069:35" pos:end="3069:38">arg2</name></expr></argument>, <argument pos:start="3069:41" pos:end="3069:44"><expr pos:start="3069:41" pos:end="3069:44"><name pos:start="3069:41" pos:end="3069:44">arg3</name></expr></argument>, <argument pos:start="3069:47" pos:end="3069:50"><expr pos:start="3069:47" pos:end="3069:50"><name pos:start="3069:47" pos:end="3069:50">arg4</name></expr></argument>, <argument pos:start="3069:53" pos:end="3069:56"><expr pos:start="3069:53" pos:end="3069:56"><name pos:start="3069:53" pos:end="3069:56">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3071:9" pos:end="3076:0">break;</break>

<cpp:endif pos:start="3073:1" pos:end="3073:6">#<cpp:directive pos:start="3073:2" pos:end="3073:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3075:1" pos:end="3075:23">#<cpp:directive pos:start="3075:2" pos:end="3075:6">ifdef</cpp:directive> <name pos:start="3075:8" pos:end="3075:23">TARGET_NR_listen</name></cpp:ifdef>

    <case pos:start="3077:5" pos:end="3077:26">case <expr pos:start="3077:10" pos:end="3077:25"><name pos:start="3077:10" pos:end="3077:25">TARGET_NR_listen</name></expr>:</case>

        <expr_stmt pos:start="3079:9" pos:end="3079:44"><expr pos:start="3079:9" pos:end="3079:43"><name pos:start="3079:9" pos:end="3079:11">ret</name> <operator pos:start="3079:13" pos:end="3079:13">=</operator> <call pos:start="3079:15" pos:end="3079:43"><name pos:start="3079:15" pos:end="3079:23">get_errno</name><argument_list pos:start="3079:24" pos:end="3079:43">(<argument pos:start="3079:25" pos:end="3079:42"><expr pos:start="3079:25" pos:end="3079:42"><call pos:start="3079:25" pos:end="3079:42"><name pos:start="3079:25" pos:end="3079:30">listen</name><argument_list pos:start="3079:31" pos:end="3079:42">(<argument pos:start="3079:32" pos:end="3079:35"><expr pos:start="3079:32" pos:end="3079:35"><name pos:start="3079:32" pos:end="3079:35">arg1</name></expr></argument>, <argument pos:start="3079:38" pos:end="3079:41"><expr pos:start="3079:38" pos:end="3079:41"><name pos:start="3079:38" pos:end="3079:41">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3081:9" pos:end="3086:0">break;</break>

<cpp:endif pos:start="3083:1" pos:end="3083:6">#<cpp:directive pos:start="3083:2" pos:end="3083:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3085:1" pos:end="3085:21">#<cpp:directive pos:start="3085:2" pos:end="3085:6">ifdef</cpp:directive> <name pos:start="3085:8" pos:end="3085:21">TARGET_NR_recv</name></cpp:ifdef>

    <case pos:start="3087:5" pos:end="3087:24">case <expr pos:start="3087:10" pos:end="3087:23"><name pos:start="3087:10" pos:end="3087:23">TARGET_NR_recv</name></expr>:</case>

        <expr_stmt pos:start="3089:9" pos:end="3089:56"><expr pos:start="3089:9" pos:end="3089:55"><name pos:start="3089:9" pos:end="3089:11">ret</name> <operator pos:start="3089:13" pos:end="3089:13">=</operator> <call pos:start="3089:15" pos:end="3089:55"><name pos:start="3089:15" pos:end="3089:25">do_recvfrom</name><argument_list pos:start="3089:26" pos:end="3089:55">(<argument pos:start="3089:27" pos:end="3089:30"><expr pos:start="3089:27" pos:end="3089:30"><name pos:start="3089:27" pos:end="3089:30">arg1</name></expr></argument>, <argument pos:start="3089:33" pos:end="3089:36"><expr pos:start="3089:33" pos:end="3089:36"><name pos:start="3089:33" pos:end="3089:36">arg2</name></expr></argument>, <argument pos:start="3089:39" pos:end="3089:42"><expr pos:start="3089:39" pos:end="3089:42"><name pos:start="3089:39" pos:end="3089:42">arg3</name></expr></argument>, <argument pos:start="3089:45" pos:end="3089:48"><expr pos:start="3089:45" pos:end="3089:48"><name pos:start="3089:45" pos:end="3089:48">arg4</name></expr></argument>, <argument pos:start="3089:51" pos:end="3089:51"><expr pos:start="3089:51" pos:end="3089:51"><literal type="number" pos:start="3089:51" pos:end="3089:51">0</literal></expr></argument>, <argument pos:start="3089:54" pos:end="3089:54"><expr pos:start="3089:54" pos:end="3089:54"><literal type="number" pos:start="3089:54" pos:end="3089:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3091:9" pos:end="3096:0">break;</break>

<cpp:endif pos:start="3093:1" pos:end="3093:6">#<cpp:directive pos:start="3093:2" pos:end="3093:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3095:1" pos:end="3095:25">#<cpp:directive pos:start="3095:2" pos:end="3095:6">ifdef</cpp:directive> <name pos:start="3095:8" pos:end="3095:25">TARGET_NR_recvfrom</name></cpp:ifdef>

    <case pos:start="3097:5" pos:end="3097:28">case <expr pos:start="3097:10" pos:end="3097:27"><name pos:start="3097:10" pos:end="3097:27">TARGET_NR_recvfrom</name></expr>:</case>

        <expr_stmt pos:start="3099:9" pos:end="3099:62"><expr pos:start="3099:9" pos:end="3099:61"><name pos:start="3099:9" pos:end="3099:11">ret</name> <operator pos:start="3099:13" pos:end="3099:13">=</operator> <call pos:start="3099:15" pos:end="3099:61"><name pos:start="3099:15" pos:end="3099:25">do_recvfrom</name><argument_list pos:start="3099:26" pos:end="3099:61">(<argument pos:start="3099:27" pos:end="3099:30"><expr pos:start="3099:27" pos:end="3099:30"><name pos:start="3099:27" pos:end="3099:30">arg1</name></expr></argument>, <argument pos:start="3099:33" pos:end="3099:36"><expr pos:start="3099:33" pos:end="3099:36"><name pos:start="3099:33" pos:end="3099:36">arg2</name></expr></argument>, <argument pos:start="3099:39" pos:end="3099:42"><expr pos:start="3099:39" pos:end="3099:42"><name pos:start="3099:39" pos:end="3099:42">arg3</name></expr></argument>, <argument pos:start="3099:45" pos:end="3099:48"><expr pos:start="3099:45" pos:end="3099:48"><name pos:start="3099:45" pos:end="3099:48">arg4</name></expr></argument>, <argument pos:start="3099:51" pos:end="3099:54"><expr pos:start="3099:51" pos:end="3099:54"><name pos:start="3099:51" pos:end="3099:54">arg5</name></expr></argument>, <argument pos:start="3099:57" pos:end="3099:60"><expr pos:start="3099:57" pos:end="3099:60"><name pos:start="3099:57" pos:end="3099:60">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3101:9" pos:end="3106:0">break;</break>

<cpp:endif pos:start="3103:1" pos:end="3103:6">#<cpp:directive pos:start="3103:2" pos:end="3103:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3105:1" pos:end="3105:24">#<cpp:directive pos:start="3105:2" pos:end="3105:6">ifdef</cpp:directive> <name pos:start="3105:8" pos:end="3105:24">TARGET_NR_recvmsg</name></cpp:ifdef>

    <case pos:start="3107:5" pos:end="3107:27">case <expr pos:start="3107:10" pos:end="3107:26"><name pos:start="3107:10" pos:end="3107:26">TARGET_NR_recvmsg</name></expr>:</case>

        <expr_stmt pos:start="3109:9" pos:end="3109:50"><expr pos:start="3109:9" pos:end="3109:49"><name pos:start="3109:9" pos:end="3109:11">ret</name> <operator pos:start="3109:13" pos:end="3109:13">=</operator> <call pos:start="3109:15" pos:end="3109:49"><name pos:start="3109:15" pos:end="3109:28">do_sendrecvmsg</name><argument_list pos:start="3109:29" pos:end="3109:49">(<argument pos:start="3109:30" pos:end="3109:33"><expr pos:start="3109:30" pos:end="3109:33"><name pos:start="3109:30" pos:end="3109:33">arg1</name></expr></argument>, <argument pos:start="3109:36" pos:end="3109:39"><expr pos:start="3109:36" pos:end="3109:39"><name pos:start="3109:36" pos:end="3109:39">arg2</name></expr></argument>, <argument pos:start="3109:42" pos:end="3109:45"><expr pos:start="3109:42" pos:end="3109:45"><name pos:start="3109:42" pos:end="3109:45">arg3</name></expr></argument>, <argument pos:start="3109:48" pos:end="3109:48"><expr pos:start="3109:48" pos:end="3109:48"><literal type="number" pos:start="3109:48" pos:end="3109:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3111:9" pos:end="3116:0">break;</break>

<cpp:endif pos:start="3113:1" pos:end="3113:6">#<cpp:directive pos:start="3113:2" pos:end="3113:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3115:1" pos:end="3115:21">#<cpp:directive pos:start="3115:2" pos:end="3115:6">ifdef</cpp:directive> <name pos:start="3115:8" pos:end="3115:21">TARGET_NR_send</name></cpp:ifdef>

    <case pos:start="3117:5" pos:end="3117:24">case <expr pos:start="3117:10" pos:end="3117:23"><name pos:start="3117:10" pos:end="3117:23">TARGET_NR_send</name></expr>:</case>

        <expr_stmt pos:start="3119:9" pos:end="3119:54"><expr pos:start="3119:9" pos:end="3119:53"><name pos:start="3119:9" pos:end="3119:11">ret</name> <operator pos:start="3119:13" pos:end="3119:13">=</operator> <call pos:start="3119:15" pos:end="3119:53"><name pos:start="3119:15" pos:end="3119:23">do_sendto</name><argument_list pos:start="3119:24" pos:end="3119:53">(<argument pos:start="3119:25" pos:end="3119:28"><expr pos:start="3119:25" pos:end="3119:28"><name pos:start="3119:25" pos:end="3119:28">arg1</name></expr></argument>, <argument pos:start="3119:31" pos:end="3119:34"><expr pos:start="3119:31" pos:end="3119:34"><name pos:start="3119:31" pos:end="3119:34">arg2</name></expr></argument>, <argument pos:start="3119:37" pos:end="3119:40"><expr pos:start="3119:37" pos:end="3119:40"><name pos:start="3119:37" pos:end="3119:40">arg3</name></expr></argument>, <argument pos:start="3119:43" pos:end="3119:46"><expr pos:start="3119:43" pos:end="3119:46"><name pos:start="3119:43" pos:end="3119:46">arg4</name></expr></argument>, <argument pos:start="3119:49" pos:end="3119:49"><expr pos:start="3119:49" pos:end="3119:49"><literal type="number" pos:start="3119:49" pos:end="3119:49">0</literal></expr></argument>, <argument pos:start="3119:52" pos:end="3119:52"><expr pos:start="3119:52" pos:end="3119:52"><literal type="number" pos:start="3119:52" pos:end="3119:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3121:9" pos:end="3126:0">break;</break>

<cpp:endif pos:start="3123:1" pos:end="3123:6">#<cpp:directive pos:start="3123:2" pos:end="3123:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3125:1" pos:end="3125:24">#<cpp:directive pos:start="3125:2" pos:end="3125:6">ifdef</cpp:directive> <name pos:start="3125:8" pos:end="3125:24">TARGET_NR_sendmsg</name></cpp:ifdef>

    <case pos:start="3127:5" pos:end="3127:27">case <expr pos:start="3127:10" pos:end="3127:26"><name pos:start="3127:10" pos:end="3127:26">TARGET_NR_sendmsg</name></expr>:</case>

        <expr_stmt pos:start="3129:9" pos:end="3129:50"><expr pos:start="3129:9" pos:end="3129:49"><name pos:start="3129:9" pos:end="3129:11">ret</name> <operator pos:start="3129:13" pos:end="3129:13">=</operator> <call pos:start="3129:15" pos:end="3129:49"><name pos:start="3129:15" pos:end="3129:28">do_sendrecvmsg</name><argument_list pos:start="3129:29" pos:end="3129:49">(<argument pos:start="3129:30" pos:end="3129:33"><expr pos:start="3129:30" pos:end="3129:33"><name pos:start="3129:30" pos:end="3129:33">arg1</name></expr></argument>, <argument pos:start="3129:36" pos:end="3129:39"><expr pos:start="3129:36" pos:end="3129:39"><name pos:start="3129:36" pos:end="3129:39">arg2</name></expr></argument>, <argument pos:start="3129:42" pos:end="3129:45"><expr pos:start="3129:42" pos:end="3129:45"><name pos:start="3129:42" pos:end="3129:45">arg3</name></expr></argument>, <argument pos:start="3129:48" pos:end="3129:48"><expr pos:start="3129:48" pos:end="3129:48"><literal type="number" pos:start="3129:48" pos:end="3129:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3131:9" pos:end="3136:0">break;</break>

<cpp:endif pos:start="3133:1" pos:end="3133:6">#<cpp:directive pos:start="3133:2" pos:end="3133:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3135:1" pos:end="3135:25">#<cpp:directive pos:start="3135:2" pos:end="3135:6">ifdef</cpp:directive> <name pos:start="3135:8" pos:end="3135:25">TARGET_NR_sendmmsg</name></cpp:ifdef>

    <case pos:start="3137:5" pos:end="3137:28">case <expr pos:start="3137:10" pos:end="3137:27"><name pos:start="3137:10" pos:end="3137:27">TARGET_NR_sendmmsg</name></expr>:</case>

        <expr_stmt pos:start="3139:9" pos:end="3139:57"><expr pos:start="3139:9" pos:end="3139:56"><name pos:start="3139:9" pos:end="3139:11">ret</name> <operator pos:start="3139:13" pos:end="3139:13">=</operator> <call pos:start="3139:15" pos:end="3139:56"><name pos:start="3139:15" pos:end="3139:29">do_sendrecvmmsg</name><argument_list pos:start="3139:30" pos:end="3139:56">(<argument pos:start="3139:31" pos:end="3139:34"><expr pos:start="3139:31" pos:end="3139:34"><name pos:start="3139:31" pos:end="3139:34">arg1</name></expr></argument>, <argument pos:start="3139:37" pos:end="3139:40"><expr pos:start="3139:37" pos:end="3139:40"><name pos:start="3139:37" pos:end="3139:40">arg2</name></expr></argument>, <argument pos:start="3139:43" pos:end="3139:46"><expr pos:start="3139:43" pos:end="3139:46"><name pos:start="3139:43" pos:end="3139:46">arg3</name></expr></argument>, <argument pos:start="3139:49" pos:end="3139:52"><expr pos:start="3139:49" pos:end="3139:52"><name pos:start="3139:49" pos:end="3139:52">arg4</name></expr></argument>, <argument pos:start="3139:55" pos:end="3139:55"><expr pos:start="3139:55" pos:end="3139:55"><literal type="number" pos:start="3139:55" pos:end="3139:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3141:9" pos:end="3141:14">break;</break>

    <case pos:start="3143:5" pos:end="3143:28">case <expr pos:start="3143:10" pos:end="3143:27"><name pos:start="3143:10" pos:end="3143:27">TARGET_NR_recvmmsg</name></expr>:</case>

        <expr_stmt pos:start="3145:9" pos:end="3145:57"><expr pos:start="3145:9" pos:end="3145:56"><name pos:start="3145:9" pos:end="3145:11">ret</name> <operator pos:start="3145:13" pos:end="3145:13">=</operator> <call pos:start="3145:15" pos:end="3145:56"><name pos:start="3145:15" pos:end="3145:29">do_sendrecvmmsg</name><argument_list pos:start="3145:30" pos:end="3145:56">(<argument pos:start="3145:31" pos:end="3145:34"><expr pos:start="3145:31" pos:end="3145:34"><name pos:start="3145:31" pos:end="3145:34">arg1</name></expr></argument>, <argument pos:start="3145:37" pos:end="3145:40"><expr pos:start="3145:37" pos:end="3145:40"><name pos:start="3145:37" pos:end="3145:40">arg2</name></expr></argument>, <argument pos:start="3145:43" pos:end="3145:46"><expr pos:start="3145:43" pos:end="3145:46"><name pos:start="3145:43" pos:end="3145:46">arg3</name></expr></argument>, <argument pos:start="3145:49" pos:end="3145:52"><expr pos:start="3145:49" pos:end="3145:52"><name pos:start="3145:49" pos:end="3145:52">arg4</name></expr></argument>, <argument pos:start="3145:55" pos:end="3145:55"><expr pos:start="3145:55" pos:end="3145:55"><literal type="number" pos:start="3145:55" pos:end="3145:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3147:9" pos:end="3152:0">break;</break>

<cpp:endif pos:start="3149:1" pos:end="3149:6">#<cpp:directive pos:start="3149:2" pos:end="3149:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3151:1" pos:end="3151:23">#<cpp:directive pos:start="3151:2" pos:end="3151:6">ifdef</cpp:directive> <name pos:start="3151:8" pos:end="3151:23">TARGET_NR_sendto</name></cpp:ifdef>

    <case pos:start="3153:5" pos:end="3153:26">case <expr pos:start="3153:10" pos:end="3153:25"><name pos:start="3153:10" pos:end="3153:25">TARGET_NR_sendto</name></expr>:</case>

        <expr_stmt pos:start="3155:9" pos:end="3155:60"><expr pos:start="3155:9" pos:end="3155:59"><name pos:start="3155:9" pos:end="3155:11">ret</name> <operator pos:start="3155:13" pos:end="3155:13">=</operator> <call pos:start="3155:15" pos:end="3155:59"><name pos:start="3155:15" pos:end="3155:23">do_sendto</name><argument_list pos:start="3155:24" pos:end="3155:59">(<argument pos:start="3155:25" pos:end="3155:28"><expr pos:start="3155:25" pos:end="3155:28"><name pos:start="3155:25" pos:end="3155:28">arg1</name></expr></argument>, <argument pos:start="3155:31" pos:end="3155:34"><expr pos:start="3155:31" pos:end="3155:34"><name pos:start="3155:31" pos:end="3155:34">arg2</name></expr></argument>, <argument pos:start="3155:37" pos:end="3155:40"><expr pos:start="3155:37" pos:end="3155:40"><name pos:start="3155:37" pos:end="3155:40">arg3</name></expr></argument>, <argument pos:start="3155:43" pos:end="3155:46"><expr pos:start="3155:43" pos:end="3155:46"><name pos:start="3155:43" pos:end="3155:46">arg4</name></expr></argument>, <argument pos:start="3155:49" pos:end="3155:52"><expr pos:start="3155:49" pos:end="3155:52"><name pos:start="3155:49" pos:end="3155:52">arg5</name></expr></argument>, <argument pos:start="3155:55" pos:end="3155:58"><expr pos:start="3155:55" pos:end="3155:58"><name pos:start="3155:55" pos:end="3155:58">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3157:9" pos:end="3162:0">break;</break>

<cpp:endif pos:start="3159:1" pos:end="3159:6">#<cpp:directive pos:start="3159:2" pos:end="3159:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3161:1" pos:end="3161:25">#<cpp:directive pos:start="3161:2" pos:end="3161:6">ifdef</cpp:directive> <name pos:start="3161:8" pos:end="3161:25">TARGET_NR_shutdown</name></cpp:ifdef>

    <case pos:start="3163:5" pos:end="3163:28">case <expr pos:start="3163:10" pos:end="3163:27"><name pos:start="3163:10" pos:end="3163:27">TARGET_NR_shutdown</name></expr>:</case>

        <expr_stmt pos:start="3165:9" pos:end="3165:46"><expr pos:start="3165:9" pos:end="3165:45"><name pos:start="3165:9" pos:end="3165:11">ret</name> <operator pos:start="3165:13" pos:end="3165:13">=</operator> <call pos:start="3165:15" pos:end="3165:45"><name pos:start="3165:15" pos:end="3165:23">get_errno</name><argument_list pos:start="3165:24" pos:end="3165:45">(<argument pos:start="3165:25" pos:end="3165:44"><expr pos:start="3165:25" pos:end="3165:44"><call pos:start="3165:25" pos:end="3165:44"><name pos:start="3165:25" pos:end="3165:32">shutdown</name><argument_list pos:start="3165:33" pos:end="3165:44">(<argument pos:start="3165:34" pos:end="3165:37"><expr pos:start="3165:34" pos:end="3165:37"><name pos:start="3165:34" pos:end="3165:37">arg1</name></expr></argument>, <argument pos:start="3165:40" pos:end="3165:43"><expr pos:start="3165:40" pos:end="3165:43"><name pos:start="3165:40" pos:end="3165:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3167:9" pos:end="3172:0">break;</break>

<cpp:endif pos:start="3169:1" pos:end="3169:6">#<cpp:directive pos:start="3169:2" pos:end="3169:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3171:1" pos:end="3171:23">#<cpp:directive pos:start="3171:2" pos:end="3171:6">ifdef</cpp:directive> <name pos:start="3171:8" pos:end="3171:23">TARGET_NR_socket</name></cpp:ifdef>

    <case pos:start="3173:5" pos:end="3173:26">case <expr pos:start="3173:10" pos:end="3173:25"><name pos:start="3173:10" pos:end="3173:25">TARGET_NR_socket</name></expr>:</case>

        <expr_stmt pos:start="3175:9" pos:end="3175:42"><expr pos:start="3175:9" pos:end="3175:41"><name pos:start="3175:9" pos:end="3175:11">ret</name> <operator pos:start="3175:13" pos:end="3175:13">=</operator> <call pos:start="3175:15" pos:end="3175:41"><name pos:start="3175:15" pos:end="3175:23">do_socket</name><argument_list pos:start="3175:24" pos:end="3175:41">(<argument pos:start="3175:25" pos:end="3175:28"><expr pos:start="3175:25" pos:end="3175:28"><name pos:start="3175:25" pos:end="3175:28">arg1</name></expr></argument>, <argument pos:start="3175:31" pos:end="3175:34"><expr pos:start="3175:31" pos:end="3175:34"><name pos:start="3175:31" pos:end="3175:34">arg2</name></expr></argument>, <argument pos:start="3175:37" pos:end="3175:40"><expr pos:start="3175:37" pos:end="3175:40"><name pos:start="3175:37" pos:end="3175:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3177:9" pos:end="3182:0">break;</break>

<cpp:endif pos:start="3179:1" pos:end="3179:6">#<cpp:directive pos:start="3179:2" pos:end="3179:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3181:1" pos:end="3181:27">#<cpp:directive pos:start="3181:2" pos:end="3181:6">ifdef</cpp:directive> <name pos:start="3181:8" pos:end="3181:27">TARGET_NR_socketpair</name></cpp:ifdef>

    <case pos:start="3183:5" pos:end="3183:30">case <expr pos:start="3183:10" pos:end="3183:29"><name pos:start="3183:10" pos:end="3183:29">TARGET_NR_socketpair</name></expr>:</case>

        <expr_stmt pos:start="3185:9" pos:end="3185:52"><expr pos:start="3185:9" pos:end="3185:51"><name pos:start="3185:9" pos:end="3185:11">ret</name> <operator pos:start="3185:13" pos:end="3185:13">=</operator> <call pos:start="3185:15" pos:end="3185:51"><name pos:start="3185:15" pos:end="3185:27">do_socketpair</name><argument_list pos:start="3185:28" pos:end="3185:51">(<argument pos:start="3185:29" pos:end="3185:32"><expr pos:start="3185:29" pos:end="3185:32"><name pos:start="3185:29" pos:end="3185:32">arg1</name></expr></argument>, <argument pos:start="3185:35" pos:end="3185:38"><expr pos:start="3185:35" pos:end="3185:38"><name pos:start="3185:35" pos:end="3185:38">arg2</name></expr></argument>, <argument pos:start="3185:41" pos:end="3185:44"><expr pos:start="3185:41" pos:end="3185:44"><name pos:start="3185:41" pos:end="3185:44">arg3</name></expr></argument>, <argument pos:start="3185:47" pos:end="3185:50"><expr pos:start="3185:47" pos:end="3185:50"><name pos:start="3185:47" pos:end="3185:50">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3187:9" pos:end="3192:0">break;</break>

<cpp:endif pos:start="3189:1" pos:end="3189:6">#<cpp:directive pos:start="3189:2" pos:end="3189:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3191:1" pos:end="3191:27">#<cpp:directive pos:start="3191:2" pos:end="3191:6">ifdef</cpp:directive> <name pos:start="3191:8" pos:end="3191:27">TARGET_NR_setsockopt</name></cpp:ifdef>

    <case pos:start="3193:5" pos:end="3193:30">case <expr pos:start="3193:10" pos:end="3193:29"><name pos:start="3193:10" pos:end="3193:29">TARGET_NR_setsockopt</name></expr>:</case>

        <expr_stmt pos:start="3195:9" pos:end="3195:70"><expr pos:start="3195:9" pos:end="3195:69"><name pos:start="3195:9" pos:end="3195:11">ret</name> <operator pos:start="3195:13" pos:end="3195:13">=</operator> <call pos:start="3195:15" pos:end="3195:69"><name pos:start="3195:15" pos:end="3195:27">do_setsockopt</name><argument_list pos:start="3195:28" pos:end="3195:69">(<argument pos:start="3195:29" pos:end="3195:32"><expr pos:start="3195:29" pos:end="3195:32"><name pos:start="3195:29" pos:end="3195:32">arg1</name></expr></argument>, <argument pos:start="3195:35" pos:end="3195:38"><expr pos:start="3195:35" pos:end="3195:38"><name pos:start="3195:35" pos:end="3195:38">arg2</name></expr></argument>, <argument pos:start="3195:41" pos:end="3195:44"><expr pos:start="3195:41" pos:end="3195:44"><name pos:start="3195:41" pos:end="3195:44">arg3</name></expr></argument>, <argument pos:start="3195:47" pos:end="3195:50"><expr pos:start="3195:47" pos:end="3195:50"><name pos:start="3195:47" pos:end="3195:50">arg4</name></expr></argument>, <argument pos:start="3195:53" pos:end="3195:68"><expr pos:start="3195:53" pos:end="3195:68"><operator pos:start="3195:53" pos:end="3195:53">(</operator><name pos:start="3195:54" pos:end="3195:62">socklen_t</name><operator pos:start="3195:63" pos:end="3195:63">)</operator> <name pos:start="3195:65" pos:end="3195:68">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3197:9" pos:end="3200:0">break;</break>

<cpp:endif pos:start="3199:1" pos:end="3199:6">#<cpp:directive pos:start="3199:2" pos:end="3199:6">endif</cpp:directive></cpp:endif>



    <case pos:start="3203:5" pos:end="3203:26">case <expr pos:start="3203:10" pos:end="3203:25"><name pos:start="3203:10" pos:end="3203:25">TARGET_NR_syslog</name></expr>:</case>

        <if_stmt pos:start="3205:9" pos:end="3207:24"><if pos:start="3205:9" pos:end="3207:24">if <condition pos:start="3205:12" pos:end="3205:42">(<expr pos:start="3205:13" pos:end="3205:41"><operator pos:start="3205:13" pos:end="3205:13">!</operator><operator pos:start="3205:14" pos:end="3205:14">(</operator><name pos:start="3205:15" pos:end="3205:15">p</name> <operator pos:start="3205:17" pos:end="3205:17">=</operator> <call pos:start="3205:19" pos:end="3205:40"><name pos:start="3205:19" pos:end="3205:34">lock_user_string</name><argument_list pos:start="3205:35" pos:end="3205:40">(<argument pos:start="3205:36" pos:end="3205:39"><expr pos:start="3205:36" pos:end="3205:39"><name pos:start="3205:36" pos:end="3205:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="3205:41" pos:end="3205:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3207:13" pos:end="3207:24"><block_content pos:start="3207:13" pos:end="3207:24">

            <goto pos:start="3207:13" pos:end="3207:24">goto <name pos:start="3207:18" pos:end="3207:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3209:9" pos:end="3209:61"><expr pos:start="3209:9" pos:end="3209:60"><name pos:start="3209:9" pos:end="3209:11">ret</name> <operator pos:start="3209:13" pos:end="3209:13">=</operator> <call pos:start="3209:15" pos:end="3209:60"><name pos:start="3209:15" pos:end="3209:23">get_errno</name><argument_list pos:start="3209:24" pos:end="3209:60">(<argument pos:start="3209:25" pos:end="3209:59"><expr pos:start="3209:25" pos:end="3209:59"><call pos:start="3209:25" pos:end="3209:59"><name pos:start="3209:25" pos:end="3209:34">sys_syslog</name><argument_list pos:start="3209:35" pos:end="3209:59">(<argument pos:start="3209:36" pos:end="3209:44"><expr pos:start="3209:36" pos:end="3209:44"><operator pos:start="3209:36" pos:end="3209:36">(</operator><name pos:start="3209:37" pos:end="3209:39">int</name><operator pos:start="3209:40" pos:end="3209:40">)</operator><name pos:start="3209:41" pos:end="3209:44">arg1</name></expr></argument>, <argument pos:start="3209:47" pos:end="3209:47"><expr pos:start="3209:47" pos:end="3209:47"><name pos:start="3209:47" pos:end="3209:47">p</name></expr></argument>, <argument pos:start="3209:50" pos:end="3209:58"><expr pos:start="3209:50" pos:end="3209:58"><operator pos:start="3209:50" pos:end="3209:50">(</operator><name pos:start="3209:51" pos:end="3209:53">int</name><operator pos:start="3209:54" pos:end="3209:54">)</operator><name pos:start="3209:55" pos:end="3209:58">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3211:9" pos:end="3211:32"><expr pos:start="3211:9" pos:end="3211:31"><call pos:start="3211:9" pos:end="3211:31"><name pos:start="3211:9" pos:end="3211:19">unlock_user</name><argument_list pos:start="3211:20" pos:end="3211:31">(<argument pos:start="3211:21" pos:end="3211:21"><expr pos:start="3211:21" pos:end="3211:21"><name pos:start="3211:21" pos:end="3211:21">p</name></expr></argument>, <argument pos:start="3211:24" pos:end="3211:27"><expr pos:start="3211:24" pos:end="3211:27"><name pos:start="3211:24" pos:end="3211:27">arg2</name></expr></argument>, <argument pos:start="3211:30" pos:end="3211:30"><expr pos:start="3211:30" pos:end="3211:30"><literal type="number" pos:start="3211:30" pos:end="3211:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3213:9" pos:end="3213:14">break;</break>



    <case pos:start="3217:5" pos:end="3217:29">case <expr pos:start="3217:10" pos:end="3217:28"><name pos:start="3217:10" pos:end="3217:28">TARGET_NR_setitimer</name></expr>:</case>

        <block pos:start="3219:9" pos:end="3259:9">{<block_content pos:start="3221:13" pos:end="3257:13">

            <decl_stmt pos:start="3221:13" pos:end="3221:52"><decl pos:start="3221:13" pos:end="3221:34"><type pos:start="3221:13" pos:end="3221:28"><name pos:start="3221:13" pos:end="3221:28"><name pos:start="3221:13" pos:end="3221:18">struct</name> <name pos:start="3221:20" pos:end="3221:28">itimerval</name></name></type> <name pos:start="3221:30" pos:end="3221:34">value</name></decl>, <decl pos:start="3221:37" pos:end="3221:42"><type ref="prev" pos:start="3221:13" pos:end="3221:28"/><name pos:start="3221:37" pos:end="3221:42">ovalue</name></decl>, <decl pos:start="3221:45" pos:end="3221:51"><type ref="prev" pos:start="3221:13" pos:end="3221:28"><modifier pos:start="3221:45" pos:end="3221:45">*</modifier></type><name pos:start="3221:46" pos:end="3221:51">pvalue</name></decl>;</decl_stmt>



            <if_stmt pos:start="3225:13" pos:end="3241:13"><if pos:start="3225:13" pos:end="3237:13">if <condition pos:start="3225:16" pos:end="3225:21">(<expr pos:start="3225:17" pos:end="3225:20"><name pos:start="3225:17" pos:end="3225:20">arg2</name></expr>)</condition> <block pos:start="3225:23" pos:end="3237:13">{<block_content pos:start="3227:17" pos:end="3235:32">

                <expr_stmt pos:start="3227:17" pos:end="3227:32"><expr pos:start="3227:17" pos:end="3227:31"><name pos:start="3227:17" pos:end="3227:22">pvalue</name> <operator pos:start="3227:24" pos:end="3227:24">=</operator> <operator pos:start="3227:26" pos:end="3227:26">&amp;</operator><name pos:start="3227:27" pos:end="3227:31">value</name></expr>;</expr_stmt>

                <if_stmt pos:start="3229:17" pos:end="3235:32"><if pos:start="3229:17" pos:end="3235:32">if <condition pos:start="3229:20" pos:end="3233:84">(<expr pos:start="3229:21" pos:end="3233:83"><call pos:start="3229:21" pos:end="3229:70"><name pos:start="3229:21" pos:end="3229:42">copy_from_user_timeval</name><argument_list pos:start="3229:43" pos:end="3229:70">(<argument pos:start="3229:44" pos:end="3229:63"><expr pos:start="3229:44" pos:end="3229:63"><operator pos:start="3229:44" pos:end="3229:44">&amp;</operator><name pos:start="3229:45" pos:end="3229:63"><name pos:start="3229:45" pos:end="3229:50">pvalue</name><operator pos:start="3229:51" pos:end="3229:52">-&gt;</operator><name pos:start="3229:53" pos:end="3229:63">it_interval</name></name></expr></argument>, <argument pos:start="3229:66" pos:end="3229:69"><expr pos:start="3229:66" pos:end="3229:69"><name pos:start="3229:66" pos:end="3229:69">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="3231:21" pos:end="3231:22">||</operator> <call pos:start="3231:24" pos:end="3233:83"><name pos:start="3231:24" pos:end="3231:45">copy_from_user_timeval</name><argument_list pos:start="3231:46" pos:end="3233:83">(<argument pos:start="3231:47" pos:end="3231:63"><expr pos:start="3231:47" pos:end="3231:63"><operator pos:start="3231:47" pos:end="3231:47">&amp;</operator><name pos:start="3231:48" pos:end="3231:63"><name pos:start="3231:48" pos:end="3231:53">pvalue</name><operator pos:start="3231:54" pos:end="3231:55">-&gt;</operator><name pos:start="3231:56" pos:end="3231:63">it_value</name></name></expr></argument>,

                                              <argument pos:start="3233:47" pos:end="3233:82"><expr pos:start="3233:47" pos:end="3233:82"><name pos:start="3233:47" pos:end="3233:50">arg2</name> <operator pos:start="3233:52" pos:end="3233:52">+</operator> <sizeof pos:start="3233:54" pos:end="3233:82">sizeof<argument_list pos:start="3233:60" pos:end="3233:82">(<argument pos:start="3233:61" pos:end="3233:81"><expr pos:start="3233:61" pos:end="3233:81">struct <name pos:start="3233:68" pos:end="3233:81">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3235:21" pos:end="3235:32"><block_content pos:start="3235:21" pos:end="3235:32">

                    <goto pos:start="3235:21" pos:end="3235:32">goto <name pos:start="3235:26" pos:end="3235:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="3237:15" pos:end="3241:13">else <block pos:start="3237:20" pos:end="3241:13">{<block_content pos:start="3239:17" pos:end="3239:30">

                <expr_stmt pos:start="3239:17" pos:end="3239:30"><expr pos:start="3239:17" pos:end="3239:29"><name pos:start="3239:17" pos:end="3239:22">pvalue</name> <operator pos:start="3239:24" pos:end="3239:24">=</operator> <name pos:start="3239:26" pos:end="3239:29">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="3243:13" pos:end="3243:62"><expr pos:start="3243:13" pos:end="3243:61"><name pos:start="3243:13" pos:end="3243:15">ret</name> <operator pos:start="3243:17" pos:end="3243:17">=</operator> <call pos:start="3243:19" pos:end="3243:61"><name pos:start="3243:19" pos:end="3243:27">get_errno</name><argument_list pos:start="3243:28" pos:end="3243:61">(<argument pos:start="3243:29" pos:end="3243:60"><expr pos:start="3243:29" pos:end="3243:60"><call pos:start="3243:29" pos:end="3243:60"><name pos:start="3243:29" pos:end="3243:37">setitimer</name><argument_list pos:start="3243:38" pos:end="3243:60">(<argument pos:start="3243:39" pos:end="3243:42"><expr pos:start="3243:39" pos:end="3243:42"><name pos:start="3243:39" pos:end="3243:42">arg1</name></expr></argument>, <argument pos:start="3243:45" pos:end="3243:50"><expr pos:start="3243:45" pos:end="3243:50"><name pos:start="3243:45" pos:end="3243:50">pvalue</name></expr></argument>, <argument pos:start="3243:53" pos:end="3243:59"><expr pos:start="3243:53" pos:end="3243:59"><operator pos:start="3243:53" pos:end="3243:53">&amp;</operator><name pos:start="3243:54" pos:end="3243:59">ovalue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3245:13" pos:end="3257:13"><if pos:start="3245:13" pos:end="3257:13">if <condition pos:start="3245:16" pos:end="3245:39">(<expr pos:start="3245:17" pos:end="3245:38"><operator pos:start="3245:17" pos:end="3245:17">!</operator><call pos:start="3245:18" pos:end="3245:30"><name pos:start="3245:18" pos:end="3245:25">is_error</name><argument_list pos:start="3245:26" pos:end="3245:30">(<argument pos:start="3245:27" pos:end="3245:29"><expr pos:start="3245:27" pos:end="3245:29"><name pos:start="3245:27" pos:end="3245:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="3245:32" pos:end="3245:33">&amp;&amp;</operator> <name pos:start="3245:35" pos:end="3245:38">arg3</name></expr>)</condition> <block pos:start="3245:41" pos:end="3257:13">{<block_content pos:start="3247:17" pos:end="3255:32">

                <if_stmt pos:start="3247:17" pos:end="3255:32"><if pos:start="3247:17" pos:end="3255:32">if <condition pos:start="3247:20" pos:end="3253:62">(<expr pos:start="3247:21" pos:end="3253:61"><call pos:start="3247:21" pos:end="3249:61"><name pos:start="3247:21" pos:end="3247:40">copy_to_user_timeval</name><argument_list pos:start="3247:41" pos:end="3249:61">(<argument pos:start="3247:42" pos:end="3247:45"><expr pos:start="3247:42" pos:end="3247:45"><name pos:start="3247:42" pos:end="3247:45">arg3</name></expr></argument>,

                                         <argument pos:start="3249:42" pos:end="3249:60"><expr pos:start="3249:42" pos:end="3249:60"><operator pos:start="3249:42" pos:end="3249:42">&amp;</operator><name pos:start="3249:43" pos:end="3249:60"><name pos:start="3249:43" pos:end="3249:48">ovalue</name><operator pos:start="3249:49" pos:end="3249:49">.</operator><name pos:start="3249:50" pos:end="3249:60">it_interval</name></name></expr></argument>)</argument_list></call>

                    <operator pos:start="3251:21" pos:end="3251:22">||</operator> <call pos:start="3251:24" pos:end="3253:61"><name pos:start="3251:24" pos:end="3251:43">copy_to_user_timeval</name><argument_list pos:start="3251:44" pos:end="3253:61">(<argument pos:start="3251:45" pos:end="3251:80"><expr pos:start="3251:45" pos:end="3251:80"><name pos:start="3251:45" pos:end="3251:48">arg3</name> <operator pos:start="3251:50" pos:end="3251:50">+</operator> <sizeof pos:start="3251:52" pos:end="3251:80">sizeof<argument_list pos:start="3251:58" pos:end="3251:80">(<argument pos:start="3251:59" pos:end="3251:79"><expr pos:start="3251:59" pos:end="3251:79">struct <name pos:start="3251:66" pos:end="3251:79">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                            <argument pos:start="3253:45" pos:end="3253:60"><expr pos:start="3253:45" pos:end="3253:60"><operator pos:start="3253:45" pos:end="3253:45">&amp;</operator><name pos:start="3253:46" pos:end="3253:60"><name pos:start="3253:46" pos:end="3253:51">ovalue</name><operator pos:start="3253:52" pos:end="3253:52">.</operator><name pos:start="3253:53" pos:end="3253:60">it_value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3255:21" pos:end="3255:32"><block_content pos:start="3255:21" pos:end="3255:32">

                    <goto pos:start="3255:21" pos:end="3255:32">goto <name pos:start="3255:26" pos:end="3255:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3261:9" pos:end="3261:14">break;</break>

    <case pos:start="3263:5" pos:end="3263:29">case <expr pos:start="3263:10" pos:end="3263:28"><name pos:start="3263:10" pos:end="3263:28">TARGET_NR_getitimer</name></expr>:</case>

        <block pos:start="3265:9" pos:end="3287:9">{<block_content pos:start="3267:13" pos:end="3285:13">

            <decl_stmt pos:start="3267:13" pos:end="3267:35"><decl pos:start="3267:13" pos:end="3267:34"><type pos:start="3267:13" pos:end="3267:28"><name pos:start="3267:13" pos:end="3267:28"><name pos:start="3267:13" pos:end="3267:18">struct</name> <name pos:start="3267:20" pos:end="3267:28">itimerval</name></name></type> <name pos:start="3267:30" pos:end="3267:34">value</name></decl>;</decl_stmt>



            <expr_stmt pos:start="3271:13" pos:end="3271:53"><expr pos:start="3271:13" pos:end="3271:52"><name pos:start="3271:13" pos:end="3271:15">ret</name> <operator pos:start="3271:17" pos:end="3271:17">=</operator> <call pos:start="3271:19" pos:end="3271:52"><name pos:start="3271:19" pos:end="3271:27">get_errno</name><argument_list pos:start="3271:28" pos:end="3271:52">(<argument pos:start="3271:29" pos:end="3271:51"><expr pos:start="3271:29" pos:end="3271:51"><call pos:start="3271:29" pos:end="3271:51"><name pos:start="3271:29" pos:end="3271:37">getitimer</name><argument_list pos:start="3271:38" pos:end="3271:51">(<argument pos:start="3271:39" pos:end="3271:42"><expr pos:start="3271:39" pos:end="3271:42"><name pos:start="3271:39" pos:end="3271:42">arg1</name></expr></argument>, <argument pos:start="3271:45" pos:end="3271:50"><expr pos:start="3271:45" pos:end="3271:50"><operator pos:start="3271:45" pos:end="3271:45">&amp;</operator><name pos:start="3271:46" pos:end="3271:50">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3273:13" pos:end="3285:13"><if pos:start="3273:13" pos:end="3285:13">if <condition pos:start="3273:16" pos:end="3273:39">(<expr pos:start="3273:17" pos:end="3273:38"><operator pos:start="3273:17" pos:end="3273:17">!</operator><call pos:start="3273:18" pos:end="3273:30"><name pos:start="3273:18" pos:end="3273:25">is_error</name><argument_list pos:start="3273:26" pos:end="3273:30">(<argument pos:start="3273:27" pos:end="3273:29"><expr pos:start="3273:27" pos:end="3273:29"><name pos:start="3273:27" pos:end="3273:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="3273:32" pos:end="3273:33">&amp;&amp;</operator> <name pos:start="3273:35" pos:end="3273:38">arg2</name></expr>)</condition> <block pos:start="3273:41" pos:end="3285:13">{<block_content pos:start="3275:17" pos:end="3283:32">

                <if_stmt pos:start="3275:17" pos:end="3283:32"><if pos:start="3275:17" pos:end="3283:32">if <condition pos:start="3275:20" pos:end="3281:61">(<expr pos:start="3275:21" pos:end="3281:60"><call pos:start="3275:21" pos:end="3277:60"><name pos:start="3275:21" pos:end="3275:40">copy_to_user_timeval</name><argument_list pos:start="3275:41" pos:end="3277:60">(<argument pos:start="3275:42" pos:end="3275:45"><expr pos:start="3275:42" pos:end="3275:45"><name pos:start="3275:42" pos:end="3275:45">arg2</name></expr></argument>,

                                         <argument pos:start="3277:42" pos:end="3277:59"><expr pos:start="3277:42" pos:end="3277:59"><operator pos:start="3277:42" pos:end="3277:42">&amp;</operator><name pos:start="3277:43" pos:end="3277:59"><name pos:start="3277:43" pos:end="3277:47">value</name><operator pos:start="3277:48" pos:end="3277:48">.</operator><name pos:start="3277:49" pos:end="3277:59">it_interval</name></name></expr></argument>)</argument_list></call>

                    <operator pos:start="3279:21" pos:end="3279:22">||</operator> <call pos:start="3279:24" pos:end="3281:60"><name pos:start="3279:24" pos:end="3279:43">copy_to_user_timeval</name><argument_list pos:start="3279:44" pos:end="3281:60">(<argument pos:start="3279:45" pos:end="3279:80"><expr pos:start="3279:45" pos:end="3279:80"><name pos:start="3279:45" pos:end="3279:48">arg2</name> <operator pos:start="3279:50" pos:end="3279:50">+</operator> <sizeof pos:start="3279:52" pos:end="3279:80">sizeof<argument_list pos:start="3279:58" pos:end="3279:80">(<argument pos:start="3279:59" pos:end="3279:79"><expr pos:start="3279:59" pos:end="3279:79">struct <name pos:start="3279:66" pos:end="3279:79">target_timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                            <argument pos:start="3281:45" pos:end="3281:59"><expr pos:start="3281:45" pos:end="3281:59"><operator pos:start="3281:45" pos:end="3281:45">&amp;</operator><name pos:start="3281:46" pos:end="3281:59"><name pos:start="3281:46" pos:end="3281:50">value</name><operator pos:start="3281:51" pos:end="3281:51">.</operator><name pos:start="3281:52" pos:end="3281:59">it_value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3283:21" pos:end="3283:32"><block_content pos:start="3283:21" pos:end="3283:32">

                    <goto pos:start="3283:21" pos:end="3283:32">goto <name pos:start="3283:26" pos:end="3283:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3289:9" pos:end="3289:14">break;</break>

    <case pos:start="3291:5" pos:end="3291:24">case <expr pos:start="3291:10" pos:end="3291:23"><name pos:start="3291:10" pos:end="3291:23">TARGET_NR_stat</name></expr>:</case>

        <if_stmt pos:start="3293:9" pos:end="3295:24"><if pos:start="3293:9" pos:end="3295:24">if <condition pos:start="3293:12" pos:end="3293:42">(<expr pos:start="3293:13" pos:end="3293:41"><operator pos:start="3293:13" pos:end="3293:13">!</operator><operator pos:start="3293:14" pos:end="3293:14">(</operator><name pos:start="3293:15" pos:end="3293:15">p</name> <operator pos:start="3293:17" pos:end="3293:17">=</operator> <call pos:start="3293:19" pos:end="3293:40"><name pos:start="3293:19" pos:end="3293:34">lock_user_string</name><argument_list pos:start="3293:35" pos:end="3293:40">(<argument pos:start="3293:36" pos:end="3293:39"><expr pos:start="3293:36" pos:end="3293:39"><name pos:start="3293:36" pos:end="3293:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="3293:41" pos:end="3293:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3295:13" pos:end="3295:24"><block_content pos:start="3295:13" pos:end="3295:24">

            <goto pos:start="3295:13" pos:end="3295:24">goto <name pos:start="3295:18" pos:end="3295:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3297:9" pos:end="3297:44"><expr pos:start="3297:9" pos:end="3297:43"><name pos:start="3297:9" pos:end="3297:11">ret</name> <operator pos:start="3297:13" pos:end="3297:13">=</operator> <call pos:start="3297:15" pos:end="3297:43"><name pos:start="3297:15" pos:end="3297:23">get_errno</name><argument_list pos:start="3297:24" pos:end="3297:43">(<argument pos:start="3297:25" pos:end="3297:42"><expr pos:start="3297:25" pos:end="3297:42"><call pos:start="3297:25" pos:end="3297:42"><name pos:start="3297:25" pos:end="3297:28">stat</name><argument_list pos:start="3297:29" pos:end="3297:42">(<argument pos:start="3297:30" pos:end="3297:36"><expr pos:start="3297:30" pos:end="3297:36"><call pos:start="3297:30" pos:end="3297:36"><name pos:start="3297:30" pos:end="3297:33">path</name><argument_list pos:start="3297:34" pos:end="3297:36">(<argument pos:start="3297:35" pos:end="3297:35"><expr pos:start="3297:35" pos:end="3297:35"><name pos:start="3297:35" pos:end="3297:35">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3297:39" pos:end="3297:41"><expr pos:start="3297:39" pos:end="3297:41"><operator pos:start="3297:39" pos:end="3297:39">&amp;</operator><name pos:start="3297:40" pos:end="3297:41">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3299:9" pos:end="3299:32"><expr pos:start="3299:9" pos:end="3299:31"><call pos:start="3299:9" pos:end="3299:31"><name pos:start="3299:9" pos:end="3299:19">unlock_user</name><argument_list pos:start="3299:20" pos:end="3299:31">(<argument pos:start="3299:21" pos:end="3299:21"><expr pos:start="3299:21" pos:end="3299:21"><name pos:start="3299:21" pos:end="3299:21">p</name></expr></argument>, <argument pos:start="3299:24" pos:end="3299:27"><expr pos:start="3299:24" pos:end="3299:27"><name pos:start="3299:24" pos:end="3299:27">arg1</name></expr></argument>, <argument pos:start="3299:30" pos:end="3299:30"><expr pos:start="3299:30" pos:end="3299:30"><literal type="number" pos:start="3299:30" pos:end="3299:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="3301:9" pos:end="3301:21">goto <name pos:start="3301:14" pos:end="3301:20">do_stat</name>;</goto>

    <case pos:start="3303:5" pos:end="3303:25">case <expr pos:start="3303:10" pos:end="3303:24"><name pos:start="3303:10" pos:end="3303:24">TARGET_NR_lstat</name></expr>:</case>

        <if_stmt pos:start="3305:9" pos:end="3307:24"><if pos:start="3305:9" pos:end="3307:24">if <condition pos:start="3305:12" pos:end="3305:42">(<expr pos:start="3305:13" pos:end="3305:41"><operator pos:start="3305:13" pos:end="3305:13">!</operator><operator pos:start="3305:14" pos:end="3305:14">(</operator><name pos:start="3305:15" pos:end="3305:15">p</name> <operator pos:start="3305:17" pos:end="3305:17">=</operator> <call pos:start="3305:19" pos:end="3305:40"><name pos:start="3305:19" pos:end="3305:34">lock_user_string</name><argument_list pos:start="3305:35" pos:end="3305:40">(<argument pos:start="3305:36" pos:end="3305:39"><expr pos:start="3305:36" pos:end="3305:39"><name pos:start="3305:36" pos:end="3305:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="3305:41" pos:end="3305:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3307:13" pos:end="3307:24"><block_content pos:start="3307:13" pos:end="3307:24">

            <goto pos:start="3307:13" pos:end="3307:24">goto <name pos:start="3307:18" pos:end="3307:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3309:9" pos:end="3309:45"><expr pos:start="3309:9" pos:end="3309:44"><name pos:start="3309:9" pos:end="3309:11">ret</name> <operator pos:start="3309:13" pos:end="3309:13">=</operator> <call pos:start="3309:15" pos:end="3309:44"><name pos:start="3309:15" pos:end="3309:23">get_errno</name><argument_list pos:start="3309:24" pos:end="3309:44">(<argument pos:start="3309:25" pos:end="3309:43"><expr pos:start="3309:25" pos:end="3309:43"><call pos:start="3309:25" pos:end="3309:43"><name pos:start="3309:25" pos:end="3309:29">lstat</name><argument_list pos:start="3309:30" pos:end="3309:43">(<argument pos:start="3309:31" pos:end="3309:37"><expr pos:start="3309:31" pos:end="3309:37"><call pos:start="3309:31" pos:end="3309:37"><name pos:start="3309:31" pos:end="3309:34">path</name><argument_list pos:start="3309:35" pos:end="3309:37">(<argument pos:start="3309:36" pos:end="3309:36"><expr pos:start="3309:36" pos:end="3309:36"><name pos:start="3309:36" pos:end="3309:36">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="3309:40" pos:end="3309:42"><expr pos:start="3309:40" pos:end="3309:42"><operator pos:start="3309:40" pos:end="3309:40">&amp;</operator><name pos:start="3309:41" pos:end="3309:42">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3311:9" pos:end="3311:32"><expr pos:start="3311:9" pos:end="3311:31"><call pos:start="3311:9" pos:end="3311:31"><name pos:start="3311:9" pos:end="3311:19">unlock_user</name><argument_list pos:start="3311:20" pos:end="3311:31">(<argument pos:start="3311:21" pos:end="3311:21"><expr pos:start="3311:21" pos:end="3311:21"><name pos:start="3311:21" pos:end="3311:21">p</name></expr></argument>, <argument pos:start="3311:24" pos:end="3311:27"><expr pos:start="3311:24" pos:end="3311:27"><name pos:start="3311:24" pos:end="3311:27">arg1</name></expr></argument>, <argument pos:start="3311:30" pos:end="3311:30"><expr pos:start="3311:30" pos:end="3311:30"><literal type="number" pos:start="3311:30" pos:end="3311:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="3313:9" pos:end="3313:21">goto <name pos:start="3313:14" pos:end="3313:20">do_stat</name>;</goto>

    <case pos:start="3315:5" pos:end="3315:25">case <expr pos:start="3315:10" pos:end="3315:24"><name pos:start="3315:10" pos:end="3315:24">TARGET_NR_fstat</name></expr>:</case>

        <block pos:start="3317:9" pos:end="3365:9">{<block_content pos:start="3319:13" pos:end="3363:13">

            <expr_stmt pos:start="3319:13" pos:end="3319:46"><expr pos:start="3319:13" pos:end="3319:45"><name pos:start="3319:13" pos:end="3319:15">ret</name> <operator pos:start="3319:17" pos:end="3319:17">=</operator> <call pos:start="3319:19" pos:end="3319:45"><name pos:start="3319:19" pos:end="3319:27">get_errno</name><argument_list pos:start="3319:28" pos:end="3319:45">(<argument pos:start="3319:29" pos:end="3319:44"><expr pos:start="3319:29" pos:end="3319:44"><call pos:start="3319:29" pos:end="3319:44"><name pos:start="3319:29" pos:end="3319:33">fstat</name><argument_list pos:start="3319:34" pos:end="3319:44">(<argument pos:start="3319:35" pos:end="3319:38"><expr pos:start="3319:35" pos:end="3319:38"><name pos:start="3319:35" pos:end="3319:38">arg1</name></expr></argument>, <argument pos:start="3319:41" pos:end="3319:43"><expr pos:start="3319:41" pos:end="3319:43"><operator pos:start="3319:41" pos:end="3319:41">&amp;</operator><name pos:start="3319:42" pos:end="3319:43">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="3321:9" pos:end="3321:16"><name pos:start="3321:9" pos:end="3321:15">do_stat</name>:</label>

            <if_stmt pos:start="3323:13" pos:end="3363:13"><if pos:start="3323:13" pos:end="3363:13">if <condition pos:start="3323:16" pos:end="3323:31">(<expr pos:start="3323:17" pos:end="3323:30"><operator pos:start="3323:17" pos:end="3323:17">!</operator><call pos:start="3323:18" pos:end="3323:30"><name pos:start="3323:18" pos:end="3323:25">is_error</name><argument_list pos:start="3323:26" pos:end="3323:30">(<argument pos:start="3323:27" pos:end="3323:29"><expr pos:start="3323:27" pos:end="3323:29"><name pos:start="3323:27" pos:end="3323:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3323:33" pos:end="3363:13">{<block_content pos:start="3325:17" pos:end="3361:55">

                <decl_stmt pos:start="3325:17" pos:end="3325:46"><decl pos:start="3325:17" pos:end="3325:45"><type pos:start="3325:17" pos:end="3325:36"><name pos:start="3325:17" pos:end="3325:34"><name pos:start="3325:17" pos:end="3325:22">struct</name> <name pos:start="3325:24" pos:end="3325:34">target_stat</name></name> <modifier pos:start="3325:36" pos:end="3325:36">*</modifier></type><name pos:start="3325:37" pos:end="3325:45">target_st</name></decl>;</decl_stmt>



                <if_stmt pos:start="3329:17" pos:end="3331:32"><if pos:start="3329:17" pos:end="3331:32">if <condition pos:start="3329:20" pos:end="3329:72">(<expr pos:start="3329:21" pos:end="3329:71"><operator pos:start="3329:21" pos:end="3329:21">!</operator><call pos:start="3329:22" pos:end="3329:71"><name pos:start="3329:22" pos:end="3329:37">lock_user_struct</name><argument_list pos:start="3329:38" pos:end="3329:71">(<argument pos:start="3329:39" pos:end="3329:50"><expr pos:start="3329:39" pos:end="3329:50"><name pos:start="3329:39" pos:end="3329:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3329:53" pos:end="3329:61"><expr pos:start="3329:53" pos:end="3329:61"><name pos:start="3329:53" pos:end="3329:61">target_st</name></expr></argument>, <argument pos:start="3329:64" pos:end="3329:67"><expr pos:start="3329:64" pos:end="3329:67"><name pos:start="3329:64" pos:end="3329:67">arg2</name></expr></argument>, <argument pos:start="3329:70" pos:end="3329:70"><expr pos:start="3329:70" pos:end="3329:70"><literal type="number" pos:start="3329:70" pos:end="3329:70">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3331:21" pos:end="3331:32"><block_content pos:start="3331:21" pos:end="3331:32">

                    <goto pos:start="3331:21" pos:end="3331:32">goto <name pos:start="3331:26" pos:end="3331:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3333:17" pos:end="3333:57"><expr pos:start="3333:17" pos:end="3333:56"><call pos:start="3333:17" pos:end="3333:56"><name pos:start="3333:17" pos:end="3333:22">memset</name><argument_list pos:start="3333:23" pos:end="3333:56">(<argument pos:start="3333:24" pos:end="3333:32"><expr pos:start="3333:24" pos:end="3333:32"><name pos:start="3333:24" pos:end="3333:32">target_st</name></expr></argument>, <argument pos:start="3333:35" pos:end="3333:35"><expr pos:start="3333:35" pos:end="3333:35"><literal type="number" pos:start="3333:35" pos:end="3333:35">0</literal></expr></argument>, <argument pos:start="3333:38" pos:end="3333:55"><expr pos:start="3333:38" pos:end="3333:55"><sizeof pos:start="3333:38" pos:end="3333:55">sizeof<argument_list pos:start="3333:44" pos:end="3333:55">(<argument pos:start="3333:45" pos:end="3333:54"><expr pos:start="3333:45" pos:end="3333:54"><operator pos:start="3333:45" pos:end="3333:45">*</operator><name pos:start="3333:46" pos:end="3333:54">target_st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3335:17" pos:end="3335:58"><expr pos:start="3335:17" pos:end="3335:57"><call pos:start="3335:17" pos:end="3335:57"><name pos:start="3335:17" pos:end="3335:26">__put_user</name><argument_list pos:start="3335:27" pos:end="3335:57">(<argument pos:start="3335:28" pos:end="3335:36"><expr pos:start="3335:28" pos:end="3335:36"><name pos:start="3335:28" pos:end="3335:36"><name pos:start="3335:28" pos:end="3335:29">st</name><operator pos:start="3335:30" pos:end="3335:30">.</operator><name pos:start="3335:31" pos:end="3335:36">st_dev</name></name></expr></argument>, <argument pos:start="3335:39" pos:end="3335:56"><expr pos:start="3335:39" pos:end="3335:56"><operator pos:start="3335:39" pos:end="3335:39">&amp;</operator><name pos:start="3335:40" pos:end="3335:56"><name pos:start="3335:40" pos:end="3335:48">target_st</name><operator pos:start="3335:49" pos:end="3335:50">-&gt;</operator><name pos:start="3335:51" pos:end="3335:56">st_dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3337:17" pos:end="3337:58"><expr pos:start="3337:17" pos:end="3337:57"><call pos:start="3337:17" pos:end="3337:57"><name pos:start="3337:17" pos:end="3337:26">__put_user</name><argument_list pos:start="3337:27" pos:end="3337:57">(<argument pos:start="3337:28" pos:end="3337:36"><expr pos:start="3337:28" pos:end="3337:36"><name pos:start="3337:28" pos:end="3337:36"><name pos:start="3337:28" pos:end="3337:29">st</name><operator pos:start="3337:30" pos:end="3337:30">.</operator><name pos:start="3337:31" pos:end="3337:36">st_ino</name></name></expr></argument>, <argument pos:start="3337:39" pos:end="3337:56"><expr pos:start="3337:39" pos:end="3337:56"><operator pos:start="3337:39" pos:end="3337:39">&amp;</operator><name pos:start="3337:40" pos:end="3337:56"><name pos:start="3337:40" pos:end="3337:48">target_st</name><operator pos:start="3337:49" pos:end="3337:50">-&gt;</operator><name pos:start="3337:51" pos:end="3337:56">st_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3339:17" pos:end="3339:60"><expr pos:start="3339:17" pos:end="3339:59"><call pos:start="3339:17" pos:end="3339:59"><name pos:start="3339:17" pos:end="3339:26">__put_user</name><argument_list pos:start="3339:27" pos:end="3339:59">(<argument pos:start="3339:28" pos:end="3339:37"><expr pos:start="3339:28" pos:end="3339:37"><name pos:start="3339:28" pos:end="3339:37"><name pos:start="3339:28" pos:end="3339:29">st</name><operator pos:start="3339:30" pos:end="3339:30">.</operator><name pos:start="3339:31" pos:end="3339:37">st_mode</name></name></expr></argument>, <argument pos:start="3339:40" pos:end="3339:58"><expr pos:start="3339:40" pos:end="3339:58"><operator pos:start="3339:40" pos:end="3339:40">&amp;</operator><name pos:start="3339:41" pos:end="3339:58"><name pos:start="3339:41" pos:end="3339:49">target_st</name><operator pos:start="3339:50" pos:end="3339:51">-&gt;</operator><name pos:start="3339:52" pos:end="3339:58">st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3341:17" pos:end="3341:58"><expr pos:start="3341:17" pos:end="3341:57"><call pos:start="3341:17" pos:end="3341:57"><name pos:start="3341:17" pos:end="3341:26">__put_user</name><argument_list pos:start="3341:27" pos:end="3341:57">(<argument pos:start="3341:28" pos:end="3341:36"><expr pos:start="3341:28" pos:end="3341:36"><name pos:start="3341:28" pos:end="3341:36"><name pos:start="3341:28" pos:end="3341:29">st</name><operator pos:start="3341:30" pos:end="3341:30">.</operator><name pos:start="3341:31" pos:end="3341:36">st_uid</name></name></expr></argument>, <argument pos:start="3341:39" pos:end="3341:56"><expr pos:start="3341:39" pos:end="3341:56"><operator pos:start="3341:39" pos:end="3341:39">&amp;</operator><name pos:start="3341:40" pos:end="3341:56"><name pos:start="3341:40" pos:end="3341:48">target_st</name><operator pos:start="3341:49" pos:end="3341:50">-&gt;</operator><name pos:start="3341:51" pos:end="3341:56">st_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3343:17" pos:end="3343:58"><expr pos:start="3343:17" pos:end="3343:57"><call pos:start="3343:17" pos:end="3343:57"><name pos:start="3343:17" pos:end="3343:26">__put_user</name><argument_list pos:start="3343:27" pos:end="3343:57">(<argument pos:start="3343:28" pos:end="3343:36"><expr pos:start="3343:28" pos:end="3343:36"><name pos:start="3343:28" pos:end="3343:36"><name pos:start="3343:28" pos:end="3343:29">st</name><operator pos:start="3343:30" pos:end="3343:30">.</operator><name pos:start="3343:31" pos:end="3343:36">st_gid</name></name></expr></argument>, <argument pos:start="3343:39" pos:end="3343:56"><expr pos:start="3343:39" pos:end="3343:56"><operator pos:start="3343:39" pos:end="3343:39">&amp;</operator><name pos:start="3343:40" pos:end="3343:56"><name pos:start="3343:40" pos:end="3343:48">target_st</name><operator pos:start="3343:49" pos:end="3343:50">-&gt;</operator><name pos:start="3343:51" pos:end="3343:56">st_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3345:17" pos:end="3345:62"><expr pos:start="3345:17" pos:end="3345:61"><call pos:start="3345:17" pos:end="3345:61"><name pos:start="3345:17" pos:end="3345:26">__put_user</name><argument_list pos:start="3345:27" pos:end="3345:61">(<argument pos:start="3345:28" pos:end="3345:38"><expr pos:start="3345:28" pos:end="3345:38"><name pos:start="3345:28" pos:end="3345:38"><name pos:start="3345:28" pos:end="3345:29">st</name><operator pos:start="3345:30" pos:end="3345:30">.</operator><name pos:start="3345:31" pos:end="3345:38">st_nlink</name></name></expr></argument>, <argument pos:start="3345:41" pos:end="3345:60"><expr pos:start="3345:41" pos:end="3345:60"><operator pos:start="3345:41" pos:end="3345:41">&amp;</operator><name pos:start="3345:42" pos:end="3345:60"><name pos:start="3345:42" pos:end="3345:50">target_st</name><operator pos:start="3345:51" pos:end="3345:52">-&gt;</operator><name pos:start="3345:53" pos:end="3345:60">st_nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3347:17" pos:end="3347:60"><expr pos:start="3347:17" pos:end="3347:59"><call pos:start="3347:17" pos:end="3347:59"><name pos:start="3347:17" pos:end="3347:26">__put_user</name><argument_list pos:start="3347:27" pos:end="3347:59">(<argument pos:start="3347:28" pos:end="3347:37"><expr pos:start="3347:28" pos:end="3347:37"><name pos:start="3347:28" pos:end="3347:37"><name pos:start="3347:28" pos:end="3347:29">st</name><operator pos:start="3347:30" pos:end="3347:30">.</operator><name pos:start="3347:31" pos:end="3347:37">st_rdev</name></name></expr></argument>, <argument pos:start="3347:40" pos:end="3347:58"><expr pos:start="3347:40" pos:end="3347:58"><operator pos:start="3347:40" pos:end="3347:40">&amp;</operator><name pos:start="3347:41" pos:end="3347:58"><name pos:start="3347:41" pos:end="3347:49">target_st</name><operator pos:start="3347:50" pos:end="3347:51">-&gt;</operator><name pos:start="3347:52" pos:end="3347:58">st_rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3349:17" pos:end="3349:60"><expr pos:start="3349:17" pos:end="3349:59"><call pos:start="3349:17" pos:end="3349:59"><name pos:start="3349:17" pos:end="3349:26">__put_user</name><argument_list pos:start="3349:27" pos:end="3349:59">(<argument pos:start="3349:28" pos:end="3349:37"><expr pos:start="3349:28" pos:end="3349:37"><name pos:start="3349:28" pos:end="3349:37"><name pos:start="3349:28" pos:end="3349:29">st</name><operator pos:start="3349:30" pos:end="3349:30">.</operator><name pos:start="3349:31" pos:end="3349:37">st_size</name></name></expr></argument>, <argument pos:start="3349:40" pos:end="3349:58"><expr pos:start="3349:40" pos:end="3349:58"><operator pos:start="3349:40" pos:end="3349:40">&amp;</operator><name pos:start="3349:41" pos:end="3349:58"><name pos:start="3349:41" pos:end="3349:49">target_st</name><operator pos:start="3349:50" pos:end="3349:51">-&gt;</operator><name pos:start="3349:52" pos:end="3349:58">st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3351:17" pos:end="3351:66"><expr pos:start="3351:17" pos:end="3351:65"><call pos:start="3351:17" pos:end="3351:65"><name pos:start="3351:17" pos:end="3351:26">__put_user</name><argument_list pos:start="3351:27" pos:end="3351:65">(<argument pos:start="3351:28" pos:end="3351:40"><expr pos:start="3351:28" pos:end="3351:40"><name pos:start="3351:28" pos:end="3351:40"><name pos:start="3351:28" pos:end="3351:29">st</name><operator pos:start="3351:30" pos:end="3351:30">.</operator><name pos:start="3351:31" pos:end="3351:40">st_blksize</name></name></expr></argument>, <argument pos:start="3351:43" pos:end="3351:64"><expr pos:start="3351:43" pos:end="3351:64"><operator pos:start="3351:43" pos:end="3351:43">&amp;</operator><name pos:start="3351:44" pos:end="3351:64"><name pos:start="3351:44" pos:end="3351:52">target_st</name><operator pos:start="3351:53" pos:end="3351:54">-&gt;</operator><name pos:start="3351:55" pos:end="3351:64">st_blksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3353:17" pos:end="3353:64"><expr pos:start="3353:17" pos:end="3353:63"><call pos:start="3353:17" pos:end="3353:63"><name pos:start="3353:17" pos:end="3353:26">__put_user</name><argument_list pos:start="3353:27" pos:end="3353:63">(<argument pos:start="3353:28" pos:end="3353:39"><expr pos:start="3353:28" pos:end="3353:39"><name pos:start="3353:28" pos:end="3353:39"><name pos:start="3353:28" pos:end="3353:29">st</name><operator pos:start="3353:30" pos:end="3353:30">.</operator><name pos:start="3353:31" pos:end="3353:39">st_blocks</name></name></expr></argument>, <argument pos:start="3353:42" pos:end="3353:62"><expr pos:start="3353:42" pos:end="3353:62"><operator pos:start="3353:42" pos:end="3353:42">&amp;</operator><name pos:start="3353:43" pos:end="3353:62"><name pos:start="3353:43" pos:end="3353:51">target_st</name><operator pos:start="3353:52" pos:end="3353:53">-&gt;</operator><name pos:start="3353:54" pos:end="3353:62">st_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3355:17" pos:end="3355:69"><expr pos:start="3355:17" pos:end="3355:68"><call pos:start="3355:17" pos:end="3355:68"><name pos:start="3355:17" pos:end="3355:26">__put_user</name><argument_list pos:start="3355:27" pos:end="3355:68">(<argument pos:start="3355:28" pos:end="3355:38"><expr pos:start="3355:28" pos:end="3355:38"><name pos:start="3355:28" pos:end="3355:38"><name pos:start="3355:28" pos:end="3355:29">st</name><operator pos:start="3355:30" pos:end="3355:30">.</operator><name pos:start="3355:31" pos:end="3355:38">st_atime</name></name></expr></argument>, <argument pos:start="3355:41" pos:end="3355:67"><expr pos:start="3355:41" pos:end="3355:67"><operator pos:start="3355:41" pos:end="3355:41">&amp;</operator><name pos:start="3355:42" pos:end="3355:67"><name pos:start="3355:42" pos:end="3355:50">target_st</name><operator pos:start="3355:51" pos:end="3355:52">-&gt;</operator><name pos:start="3355:53" pos:end="3355:67">target_st_atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3357:17" pos:end="3357:69"><expr pos:start="3357:17" pos:end="3357:68"><call pos:start="3357:17" pos:end="3357:68"><name pos:start="3357:17" pos:end="3357:26">__put_user</name><argument_list pos:start="3357:27" pos:end="3357:68">(<argument pos:start="3357:28" pos:end="3357:38"><expr pos:start="3357:28" pos:end="3357:38"><name pos:start="3357:28" pos:end="3357:38"><name pos:start="3357:28" pos:end="3357:29">st</name><operator pos:start="3357:30" pos:end="3357:30">.</operator><name pos:start="3357:31" pos:end="3357:38">st_mtime</name></name></expr></argument>, <argument pos:start="3357:41" pos:end="3357:67"><expr pos:start="3357:41" pos:end="3357:67"><operator pos:start="3357:41" pos:end="3357:41">&amp;</operator><name pos:start="3357:42" pos:end="3357:67"><name pos:start="3357:42" pos:end="3357:50">target_st</name><operator pos:start="3357:51" pos:end="3357:52">-&gt;</operator><name pos:start="3357:53" pos:end="3357:67">target_st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3359:17" pos:end="3359:69"><expr pos:start="3359:17" pos:end="3359:68"><call pos:start="3359:17" pos:end="3359:68"><name pos:start="3359:17" pos:end="3359:26">__put_user</name><argument_list pos:start="3359:27" pos:end="3359:68">(<argument pos:start="3359:28" pos:end="3359:38"><expr pos:start="3359:28" pos:end="3359:38"><name pos:start="3359:28" pos:end="3359:38"><name pos:start="3359:28" pos:end="3359:29">st</name><operator pos:start="3359:30" pos:end="3359:30">.</operator><name pos:start="3359:31" pos:end="3359:38">st_ctime</name></name></expr></argument>, <argument pos:start="3359:41" pos:end="3359:67"><expr pos:start="3359:41" pos:end="3359:67"><operator pos:start="3359:41" pos:end="3359:41">&amp;</operator><name pos:start="3359:42" pos:end="3359:67"><name pos:start="3359:42" pos:end="3359:50">target_st</name><operator pos:start="3359:51" pos:end="3359:52">-&gt;</operator><name pos:start="3359:53" pos:end="3359:67">target_st_ctime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3361:17" pos:end="3361:55"><expr pos:start="3361:17" pos:end="3361:54"><call pos:start="3361:17" pos:end="3361:54"><name pos:start="3361:17" pos:end="3361:34">unlock_user_struct</name><argument_list pos:start="3361:35" pos:end="3361:54">(<argument pos:start="3361:36" pos:end="3361:44"><expr pos:start="3361:36" pos:end="3361:44"><name pos:start="3361:36" pos:end="3361:44">target_st</name></expr></argument>, <argument pos:start="3361:47" pos:end="3361:50"><expr pos:start="3361:47" pos:end="3361:50"><name pos:start="3361:47" pos:end="3361:50">arg2</name></expr></argument>, <argument pos:start="3361:53" pos:end="3361:53"><expr pos:start="3361:53" pos:end="3361:53"><literal type="number" pos:start="3361:53" pos:end="3361:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3367:9" pos:end="3370:0">break;</break>

<cpp:ifdef pos:start="3369:1" pos:end="3369:25">#<cpp:directive pos:start="3369:2" pos:end="3369:6">ifdef</cpp:directive> <name pos:start="3369:8" pos:end="3369:25">TARGET_NR_olduname</name></cpp:ifdef>

    <case pos:start="3371:5" pos:end="3371:28">case <expr pos:start="3371:10" pos:end="3371:27"><name pos:start="3371:10" pos:end="3371:27">TARGET_NR_olduname</name></expr>:</case>

        <goto pos:start="3373:9" pos:end="3378:0">goto <name pos:start="3373:14" pos:end="3373:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3375:1" pos:end="3375:6">#<cpp:directive pos:start="3375:2" pos:end="3375:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3377:1" pos:end="3377:21">#<cpp:directive pos:start="3377:2" pos:end="3377:6">ifdef</cpp:directive> <name pos:start="3377:8" pos:end="3377:21">TARGET_NR_iopl</name></cpp:ifdef>

    <case pos:start="3379:5" pos:end="3379:24">case <expr pos:start="3379:10" pos:end="3379:23"><name pos:start="3379:10" pos:end="3379:23">TARGET_NR_iopl</name></expr>:</case>

        <goto pos:start="3381:9" pos:end="3384:0">goto <name pos:start="3381:14" pos:end="3381:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3383:1" pos:end="3383:6">#<cpp:directive pos:start="3383:2" pos:end="3383:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3385:5" pos:end="3385:27">case <expr pos:start="3385:10" pos:end="3385:26"><name pos:start="3385:10" pos:end="3385:26">TARGET_NR_vhangup</name></expr>:</case>

        <expr_stmt pos:start="3387:9" pos:end="3387:35"><expr pos:start="3387:9" pos:end="3387:34"><name pos:start="3387:9" pos:end="3387:11">ret</name> <operator pos:start="3387:13" pos:end="3387:13">=</operator> <call pos:start="3387:15" pos:end="3387:34"><name pos:start="3387:15" pos:end="3387:23">get_errno</name><argument_list pos:start="3387:24" pos:end="3387:34">(<argument pos:start="3387:25" pos:end="3387:33"><expr pos:start="3387:25" pos:end="3387:33"><call pos:start="3387:25" pos:end="3387:33"><name pos:start="3387:25" pos:end="3387:31">vhangup</name><argument_list pos:start="3387:32" pos:end="3387:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3389:9" pos:end="3392:0">break;</break>

<cpp:ifdef pos:start="3391:1" pos:end="3391:21">#<cpp:directive pos:start="3391:2" pos:end="3391:6">ifdef</cpp:directive> <name pos:start="3391:8" pos:end="3391:21">TARGET_NR_idle</name></cpp:ifdef>

    <case pos:start="3393:5" pos:end="3393:24">case <expr pos:start="3393:10" pos:end="3393:23"><name pos:start="3393:10" pos:end="3393:23">TARGET_NR_idle</name></expr>:</case>

        <goto pos:start="3395:9" pos:end="3400:0">goto <name pos:start="3395:14" pos:end="3395:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3397:1" pos:end="3397:6">#<cpp:directive pos:start="3397:2" pos:end="3397:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3399:1" pos:end="3399:24">#<cpp:directive pos:start="3399:2" pos:end="3399:6">ifdef</cpp:directive> <name pos:start="3399:8" pos:end="3399:24">TARGET_NR_syscall</name></cpp:ifdef>

    <case pos:start="3401:5" pos:end="3401:27">case <expr pos:start="3401:10" pos:end="3401:26"><name pos:start="3401:10" pos:end="3401:26">TARGET_NR_syscall</name></expr>:</case>

        <expr_stmt pos:start="3403:9" pos:end="3405:46"><expr pos:start="3403:9" pos:end="3405:45"><name pos:start="3403:9" pos:end="3403:11">ret</name> <operator pos:start="3403:13" pos:end="3403:13">=</operator> <call pos:start="3403:15" pos:end="3405:45"><name pos:start="3403:15" pos:end="3403:24">do_syscall</name><argument_list pos:start="3403:25" pos:end="3405:45">(<argument pos:start="3403:26" pos:end="3403:32"><expr pos:start="3403:26" pos:end="3403:32"><name pos:start="3403:26" pos:end="3403:32">cpu_env</name></expr></argument>, <argument pos:start="3403:35" pos:end="3403:47"><expr pos:start="3403:35" pos:end="3403:47"><name pos:start="3403:35" pos:end="3403:38">arg1</name> <operator pos:start="3403:40" pos:end="3403:40">&amp;</operator> <literal type="number" pos:start="3403:42" pos:end="3403:47">0xffff</literal></expr></argument>, <argument pos:start="3403:50" pos:end="3403:53"><expr pos:start="3403:50" pos:end="3403:53"><name pos:start="3403:50" pos:end="3403:53">arg2</name></expr></argument>, <argument pos:start="3403:56" pos:end="3403:59"><expr pos:start="3403:56" pos:end="3403:59"><name pos:start="3403:56" pos:end="3403:59">arg3</name></expr></argument>, <argument pos:start="3403:62" pos:end="3403:65"><expr pos:start="3403:62" pos:end="3403:65"><name pos:start="3403:62" pos:end="3403:65">arg4</name></expr></argument>, <argument pos:start="3403:68" pos:end="3403:71"><expr pos:start="3403:68" pos:end="3403:71"><name pos:start="3403:68" pos:end="3403:71">arg5</name></expr></argument>,

                         <argument pos:start="3405:26" pos:end="3405:29"><expr pos:start="3405:26" pos:end="3405:29"><name pos:start="3405:26" pos:end="3405:29">arg6</name></expr></argument>, <argument pos:start="3405:32" pos:end="3405:35"><expr pos:start="3405:32" pos:end="3405:35"><name pos:start="3405:32" pos:end="3405:35">arg7</name></expr></argument>, <argument pos:start="3405:38" pos:end="3405:41"><expr pos:start="3405:38" pos:end="3405:41"><name pos:start="3405:38" pos:end="3405:41">arg8</name></expr></argument>, <argument pos:start="3405:44" pos:end="3405:44"><expr pos:start="3405:44" pos:end="3405:44"><literal type="number" pos:start="3405:44" pos:end="3405:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3407:9" pos:end="3410:0">break;</break>

<cpp:endif pos:start="3409:1" pos:end="3409:6">#<cpp:directive pos:start="3409:2" pos:end="3409:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3411:5" pos:end="3411:25">case <expr pos:start="3411:10" pos:end="3411:24"><name pos:start="3411:10" pos:end="3411:24">TARGET_NR_wait4</name></expr>:</case>

        <block pos:start="3413:9" pos:end="3451:9">{<block_content pos:start="3415:13" pos:end="3449:13">

            <decl_stmt pos:start="3415:13" pos:end="3415:23"><decl pos:start="3415:13" pos:end="3415:22"><type pos:start="3415:13" pos:end="3415:15"><name pos:start="3415:13" pos:end="3415:15">int</name></type> <name pos:start="3415:17" pos:end="3415:22">status</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3417:13" pos:end="3417:39"><decl pos:start="3417:13" pos:end="3417:38"><type pos:start="3417:13" pos:end="3417:20"><name pos:start="3417:13" pos:end="3417:20">abi_long</name></type> <name pos:start="3417:22" pos:end="3417:31">status_ptr</name> <init pos:start="3417:33" pos:end="3417:38">= <expr pos:start="3417:35" pos:end="3417:38"><name pos:start="3417:35" pos:end="3417:38">arg2</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="3419:13" pos:end="3419:46"><decl pos:start="3419:13" pos:end="3419:32"><type pos:start="3419:13" pos:end="3419:25"><name pos:start="3419:13" pos:end="3419:25"><name pos:start="3419:13" pos:end="3419:18">struct</name> <name pos:start="3419:20" pos:end="3419:25">rusage</name></name></type> <name pos:start="3419:27" pos:end="3419:32">rusage</name></decl>, <decl pos:start="3419:35" pos:end="3419:45"><type ref="prev" pos:start="3419:13" pos:end="3419:25"><modifier pos:start="3419:35" pos:end="3419:35">*</modifier></type><name pos:start="3419:36" pos:end="3419:45">rusage_ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3421:13" pos:end="3421:43"><decl pos:start="3421:13" pos:end="3421:42"><type pos:start="3421:13" pos:end="3421:21"><name pos:start="3421:13" pos:end="3421:21">abi_ulong</name></type> <name pos:start="3421:23" pos:end="3421:35">target_rusage</name> <init pos:start="3421:37" pos:end="3421:42">= <expr pos:start="3421:39" pos:end="3421:42"><name pos:start="3421:39" pos:end="3421:42">arg4</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="3423:13" pos:end="3429:34"><if pos:start="3423:13" pos:end="3425:37">if <condition pos:start="3423:16" pos:end="3423:30">(<expr pos:start="3423:17" pos:end="3423:29"><name pos:start="3423:17" pos:end="3423:29">target_rusage</name></expr>)</condition><block type="pseudo" pos:start="3425:17" pos:end="3425:37"><block_content pos:start="3425:17" pos:end="3425:37">

                <expr_stmt pos:start="3425:17" pos:end="3425:37"><expr pos:start="3425:17" pos:end="3425:36"><name pos:start="3425:17" pos:end="3425:26">rusage_ptr</name> <operator pos:start="3425:28" pos:end="3425:28">=</operator> <operator pos:start="3425:30" pos:end="3425:30">&amp;</operator><name pos:start="3425:31" pos:end="3425:36">rusage</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3427:13" pos:end="3429:34">else<block type="pseudo" pos:start="3429:17" pos:end="3429:34"><block_content pos:start="3429:17" pos:end="3429:34">

                <expr_stmt pos:start="3429:17" pos:end="3429:34"><expr pos:start="3429:17" pos:end="3429:33"><name pos:start="3429:17" pos:end="3429:26">rusage_ptr</name> <operator pos:start="3429:28" pos:end="3429:28">=</operator> <name pos:start="3429:30" pos:end="3429:33">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="3431:13" pos:end="3431:68"><expr pos:start="3431:13" pos:end="3431:67"><name pos:start="3431:13" pos:end="3431:15">ret</name> <operator pos:start="3431:17" pos:end="3431:17">=</operator> <call pos:start="3431:19" pos:end="3431:67"><name pos:start="3431:19" pos:end="3431:27">get_errno</name><argument_list pos:start="3431:28" pos:end="3431:67">(<argument pos:start="3431:29" pos:end="3431:66"><expr pos:start="3431:29" pos:end="3431:66"><call pos:start="3431:29" pos:end="3431:66"><name pos:start="3431:29" pos:end="3431:33">wait4</name><argument_list pos:start="3431:34" pos:end="3431:66">(<argument pos:start="3431:35" pos:end="3431:38"><expr pos:start="3431:35" pos:end="3431:38"><name pos:start="3431:35" pos:end="3431:38">arg1</name></expr></argument>, <argument pos:start="3431:41" pos:end="3431:47"><expr pos:start="3431:41" pos:end="3431:47"><operator pos:start="3431:41" pos:end="3431:41">&amp;</operator><name pos:start="3431:42" pos:end="3431:47">status</name></expr></argument>, <argument pos:start="3431:50" pos:end="3431:53"><expr pos:start="3431:50" pos:end="3431:53"><name pos:start="3431:50" pos:end="3431:53">arg3</name></expr></argument>, <argument pos:start="3431:56" pos:end="3431:65"><expr pos:start="3431:56" pos:end="3431:65"><name pos:start="3431:56" pos:end="3431:65">rusage_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3433:13" pos:end="3449:13"><if pos:start="3433:13" pos:end="3449:13">if <condition pos:start="3433:16" pos:end="3433:31">(<expr pos:start="3433:17" pos:end="3433:30"><operator pos:start="3433:17" pos:end="3433:17">!</operator><call pos:start="3433:18" pos:end="3433:30"><name pos:start="3433:18" pos:end="3433:25">is_error</name><argument_list pos:start="3433:26" pos:end="3433:30">(<argument pos:start="3433:27" pos:end="3433:29"><expr pos:start="3433:27" pos:end="3433:29"><name pos:start="3433:27" pos:end="3433:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3433:33" pos:end="3449:13">{<block_content pos:start="3435:17" pos:end="3447:66">

                <if_stmt pos:start="3435:17" pos:end="3443:17"><if pos:start="3435:17" pos:end="3443:17">if <condition pos:start="3435:20" pos:end="3435:38">(<expr pos:start="3435:21" pos:end="3435:37"><name pos:start="3435:21" pos:end="3435:30">status_ptr</name> <operator pos:start="3435:32" pos:end="3435:33">&amp;&amp;</operator> <name pos:start="3435:35" pos:end="3435:37">ret</name></expr>)</condition> <block pos:start="3435:40" pos:end="3443:17">{<block_content pos:start="3437:21" pos:end="3441:36">

                    <expr_stmt pos:start="3437:21" pos:end="3437:63"><expr pos:start="3437:21" pos:end="3437:62"><name pos:start="3437:21" pos:end="3437:26">status</name> <operator pos:start="3437:28" pos:end="3437:28">=</operator> <call pos:start="3437:30" pos:end="3437:62"><name pos:start="3437:30" pos:end="3437:54">host_to_target_waitstatus</name><argument_list pos:start="3437:55" pos:end="3437:62">(<argument pos:start="3437:56" pos:end="3437:61"><expr pos:start="3437:56" pos:end="3437:61"><name pos:start="3437:56" pos:end="3437:61">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="3439:21" pos:end="3441:36"><if pos:start="3439:21" pos:end="3441:36">if <condition pos:start="3439:24" pos:end="3439:57">(<expr pos:start="3439:25" pos:end="3439:56"><call pos:start="3439:25" pos:end="3439:56"><name pos:start="3439:25" pos:end="3439:36">put_user_s32</name><argument_list pos:start="3439:37" pos:end="3439:56">(<argument pos:start="3439:38" pos:end="3439:43"><expr pos:start="3439:38" pos:end="3439:43"><name pos:start="3439:38" pos:end="3439:43">status</name></expr></argument>, <argument pos:start="3439:46" pos:end="3439:55"><expr pos:start="3439:46" pos:end="3439:55"><name pos:start="3439:46" pos:end="3439:55">status_ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3441:25" pos:end="3441:36"><block_content pos:start="3441:25" pos:end="3441:36">

                        <goto pos:start="3441:25" pos:end="3441:36">goto <name pos:start="3441:30" pos:end="3441:35">efault</name>;</goto></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="3445:17" pos:end="3447:66"><if pos:start="3445:17" pos:end="3447:66">if <condition pos:start="3445:20" pos:end="3445:34">(<expr pos:start="3445:21" pos:end="3445:33"><name pos:start="3445:21" pos:end="3445:33">target_rusage</name></expr>)</condition><block type="pseudo" pos:start="3447:21" pos:end="3447:66"><block_content pos:start="3447:21" pos:end="3447:66">

                    <expr_stmt pos:start="3447:21" pos:end="3447:66"><expr pos:start="3447:21" pos:end="3447:65"><call pos:start="3447:21" pos:end="3447:65"><name pos:start="3447:21" pos:end="3447:41">host_to_target_rusage</name><argument_list pos:start="3447:42" pos:end="3447:65">(<argument pos:start="3447:43" pos:end="3447:55"><expr pos:start="3447:43" pos:end="3447:55"><name pos:start="3447:43" pos:end="3447:55">target_rusage</name></expr></argument>, <argument pos:start="3447:58" pos:end="3447:64"><expr pos:start="3447:58" pos:end="3447:64"><operator pos:start="3447:58" pos:end="3447:58">&amp;</operator><name pos:start="3447:59" pos:end="3447:64">rusage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3453:9" pos:end="3456:0">break;</break>

<cpp:ifdef pos:start="3455:1" pos:end="3455:24">#<cpp:directive pos:start="3455:2" pos:end="3455:6">ifdef</cpp:directive> <name pos:start="3455:8" pos:end="3455:24">TARGET_NR_swapoff</name></cpp:ifdef>

    <case pos:start="3457:5" pos:end="3457:27">case <expr pos:start="3457:10" pos:end="3457:26"><name pos:start="3457:10" pos:end="3457:26">TARGET_NR_swapoff</name></expr>:</case>

        <if_stmt pos:start="3459:9" pos:end="3461:24"><if pos:start="3459:9" pos:end="3461:24">if <condition pos:start="3459:12" pos:end="3459:42">(<expr pos:start="3459:13" pos:end="3459:41"><operator pos:start="3459:13" pos:end="3459:13">!</operator><operator pos:start="3459:14" pos:end="3459:14">(</operator><name pos:start="3459:15" pos:end="3459:15">p</name> <operator pos:start="3459:17" pos:end="3459:17">=</operator> <call pos:start="3459:19" pos:end="3459:40"><name pos:start="3459:19" pos:end="3459:34">lock_user_string</name><argument_list pos:start="3459:35" pos:end="3459:40">(<argument pos:start="3459:36" pos:end="3459:39"><expr pos:start="3459:36" pos:end="3459:39"><name pos:start="3459:36" pos:end="3459:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="3459:41" pos:end="3459:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3461:13" pos:end="3461:24"><block_content pos:start="3461:13" pos:end="3461:24">

            <goto pos:start="3461:13" pos:end="3461:24">goto <name pos:start="3461:18" pos:end="3461:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3463:9" pos:end="3463:36"><expr pos:start="3463:9" pos:end="3463:35"><name pos:start="3463:9" pos:end="3463:11">ret</name> <operator pos:start="3463:13" pos:end="3463:13">=</operator> <call pos:start="3463:15" pos:end="3463:35"><name pos:start="3463:15" pos:end="3463:23">get_errno</name><argument_list pos:start="3463:24" pos:end="3463:35">(<argument pos:start="3463:25" pos:end="3463:34"><expr pos:start="3463:25" pos:end="3463:34"><call pos:start="3463:25" pos:end="3463:34"><name pos:start="3463:25" pos:end="3463:31">swapoff</name><argument_list pos:start="3463:32" pos:end="3463:34">(<argument pos:start="3463:33" pos:end="3463:33"><expr pos:start="3463:33" pos:end="3463:33"><name pos:start="3463:33" pos:end="3463:33">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3465:9" pos:end="3465:32"><expr pos:start="3465:9" pos:end="3465:31"><call pos:start="3465:9" pos:end="3465:31"><name pos:start="3465:9" pos:end="3465:19">unlock_user</name><argument_list pos:start="3465:20" pos:end="3465:31">(<argument pos:start="3465:21" pos:end="3465:21"><expr pos:start="3465:21" pos:end="3465:21"><name pos:start="3465:21" pos:end="3465:21">p</name></expr></argument>, <argument pos:start="3465:24" pos:end="3465:27"><expr pos:start="3465:24" pos:end="3465:27"><name pos:start="3465:24" pos:end="3465:27">arg1</name></expr></argument>, <argument pos:start="3465:30" pos:end="3465:30"><expr pos:start="3465:30" pos:end="3465:30"><literal type="number" pos:start="3465:30" pos:end="3465:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3467:9" pos:end="3470:0">break;</break>

<cpp:endif pos:start="3469:1" pos:end="3469:6">#<cpp:directive pos:start="3469:2" pos:end="3469:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3471:5" pos:end="3471:27">case <expr pos:start="3471:10" pos:end="3471:26"><name pos:start="3471:10" pos:end="3471:26">TARGET_NR_sysinfo</name></expr>:</case>

        <block pos:start="3473:9" pos:end="3521:9">{<block_content pos:start="3475:13" pos:end="3519:13">

            <decl_stmt pos:start="3475:13" pos:end="3475:48"><decl pos:start="3475:13" pos:end="3475:47"><type pos:start="3475:13" pos:end="3475:35"><name pos:start="3475:13" pos:end="3475:33"><name pos:start="3475:13" pos:end="3475:18">struct</name> <name pos:start="3475:20" pos:end="3475:33">target_sysinfo</name></name> <modifier pos:start="3475:35" pos:end="3475:35">*</modifier></type><name pos:start="3475:36" pos:end="3475:47">target_value</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3477:13" pos:end="3477:33"><decl pos:start="3477:13" pos:end="3477:32"><type pos:start="3477:13" pos:end="3477:26"><name pos:start="3477:13" pos:end="3477:26"><name pos:start="3477:13" pos:end="3477:18">struct</name> <name pos:start="3477:20" pos:end="3477:26">sysinfo</name></name></type> <name pos:start="3477:28" pos:end="3477:32">value</name></decl>;</decl_stmt>

            <expr_stmt pos:start="3479:13" pos:end="3479:45"><expr pos:start="3479:13" pos:end="3479:44"><name pos:start="3479:13" pos:end="3479:15">ret</name> <operator pos:start="3479:17" pos:end="3479:17">=</operator> <call pos:start="3479:19" pos:end="3479:44"><name pos:start="3479:19" pos:end="3479:27">get_errno</name><argument_list pos:start="3479:28" pos:end="3479:44">(<argument pos:start="3479:29" pos:end="3479:43"><expr pos:start="3479:29" pos:end="3479:43"><call pos:start="3479:29" pos:end="3479:43"><name pos:start="3479:29" pos:end="3479:35">sysinfo</name><argument_list pos:start="3479:36" pos:end="3479:43">(<argument pos:start="3479:37" pos:end="3479:42"><expr pos:start="3479:37" pos:end="3479:42"><operator pos:start="3479:37" pos:end="3479:37">&amp;</operator><name pos:start="3479:38" pos:end="3479:42">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3481:13" pos:end="3519:13"><if pos:start="3481:13" pos:end="3519:13">if <condition pos:start="3481:16" pos:end="3481:39">(<expr pos:start="3481:17" pos:end="3481:38"><operator pos:start="3481:17" pos:end="3481:17">!</operator><call pos:start="3481:18" pos:end="3481:30"><name pos:start="3481:18" pos:end="3481:25">is_error</name><argument_list pos:start="3481:26" pos:end="3481:30">(<argument pos:start="3481:27" pos:end="3481:29"><expr pos:start="3481:27" pos:end="3481:29"><name pos:start="3481:27" pos:end="3481:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="3481:32" pos:end="3481:33">&amp;&amp;</operator> <name pos:start="3481:35" pos:end="3481:38">arg1</name></expr>)</condition>

            <block pos:start="3483:13" pos:end="3519:13">{<block_content pos:start="3485:17" pos:end="3517:58">

                <if_stmt pos:start="3485:17" pos:end="3487:32"><if pos:start="3485:17" pos:end="3487:32">if <condition pos:start="3485:20" pos:end="3485:75">(<expr pos:start="3485:21" pos:end="3485:74"><operator pos:start="3485:21" pos:end="3485:21">!</operator><call pos:start="3485:22" pos:end="3485:74"><name pos:start="3485:22" pos:end="3485:37">lock_user_struct</name><argument_list pos:start="3485:38" pos:end="3485:74">(<argument pos:start="3485:39" pos:end="3485:50"><expr pos:start="3485:39" pos:end="3485:50"><name pos:start="3485:39" pos:end="3485:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3485:53" pos:end="3485:64"><expr pos:start="3485:53" pos:end="3485:64"><name pos:start="3485:53" pos:end="3485:64">target_value</name></expr></argument>, <argument pos:start="3485:67" pos:end="3485:70"><expr pos:start="3485:67" pos:end="3485:70"><name pos:start="3485:67" pos:end="3485:70">arg1</name></expr></argument>, <argument pos:start="3485:73" pos:end="3485:73"><expr pos:start="3485:73" pos:end="3485:73"><literal type="number" pos:start="3485:73" pos:end="3485:73">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3487:21" pos:end="3487:32"><block_content pos:start="3487:21" pos:end="3487:32">

                    <goto pos:start="3487:21" pos:end="3487:32">goto <name pos:start="3487:26" pos:end="3487:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="3489:17" pos:end="3489:64"><expr pos:start="3489:17" pos:end="3489:63"><call pos:start="3489:17" pos:end="3489:63"><name pos:start="3489:17" pos:end="3489:26">__put_user</name><argument_list pos:start="3489:27" pos:end="3489:63">(<argument pos:start="3489:28" pos:end="3489:39"><expr pos:start="3489:28" pos:end="3489:39"><name pos:start="3489:28" pos:end="3489:39"><name pos:start="3489:28" pos:end="3489:32">value</name><operator pos:start="3489:33" pos:end="3489:33">.</operator><name pos:start="3489:34" pos:end="3489:39">uptime</name></name></expr></argument>, <argument pos:start="3489:42" pos:end="3489:62"><expr pos:start="3489:42" pos:end="3489:62"><operator pos:start="3489:42" pos:end="3489:42">&amp;</operator><name pos:start="3489:43" pos:end="3489:62"><name pos:start="3489:43" pos:end="3489:54">target_value</name><operator pos:start="3489:55" pos:end="3489:56">-&gt;</operator><name pos:start="3489:57" pos:end="3489:62">uptime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3491:17" pos:end="3491:68"><expr pos:start="3491:17" pos:end="3491:67"><call pos:start="3491:17" pos:end="3491:67"><name pos:start="3491:17" pos:end="3491:26">__put_user</name><argument_list pos:start="3491:27" pos:end="3491:67">(<argument pos:start="3491:28" pos:end="3491:41"><expr pos:start="3491:28" pos:end="3491:41"><name pos:start="3491:28" pos:end="3491:41"><name pos:start="3491:28" pos:end="3491:32">value</name><operator pos:start="3491:33" pos:end="3491:33">.</operator><name pos:start="3491:34" pos:end="3491:38">loads</name><index pos:start="3491:39" pos:end="3491:41">[<expr pos:start="3491:40" pos:end="3491:40"><literal type="number" pos:start="3491:40" pos:end="3491:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="3491:44" pos:end="3491:66"><expr pos:start="3491:44" pos:end="3491:66"><operator pos:start="3491:44" pos:end="3491:44">&amp;</operator><name pos:start="3491:45" pos:end="3491:66"><name pos:start="3491:45" pos:end="3491:56">target_value</name><operator pos:start="3491:57" pos:end="3491:58">-&gt;</operator><name pos:start="3491:59" pos:end="3491:63">loads</name><index pos:start="3491:64" pos:end="3491:66">[<expr pos:start="3491:65" pos:end="3491:65"><literal type="number" pos:start="3491:65" pos:end="3491:65">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3493:17" pos:end="3493:68"><expr pos:start="3493:17" pos:end="3493:67"><call pos:start="3493:17" pos:end="3493:67"><name pos:start="3493:17" pos:end="3493:26">__put_user</name><argument_list pos:start="3493:27" pos:end="3493:67">(<argument pos:start="3493:28" pos:end="3493:41"><expr pos:start="3493:28" pos:end="3493:41"><name pos:start="3493:28" pos:end="3493:41"><name pos:start="3493:28" pos:end="3493:32">value</name><operator pos:start="3493:33" pos:end="3493:33">.</operator><name pos:start="3493:34" pos:end="3493:38">loads</name><index pos:start="3493:39" pos:end="3493:41">[<expr pos:start="3493:40" pos:end="3493:40"><literal type="number" pos:start="3493:40" pos:end="3493:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="3493:44" pos:end="3493:66"><expr pos:start="3493:44" pos:end="3493:66"><operator pos:start="3493:44" pos:end="3493:44">&amp;</operator><name pos:start="3493:45" pos:end="3493:66"><name pos:start="3493:45" pos:end="3493:56">target_value</name><operator pos:start="3493:57" pos:end="3493:58">-&gt;</operator><name pos:start="3493:59" pos:end="3493:63">loads</name><index pos:start="3493:64" pos:end="3493:66">[<expr pos:start="3493:65" pos:end="3493:65"><literal type="number" pos:start="3493:65" pos:end="3493:65">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3495:17" pos:end="3495:68"><expr pos:start="3495:17" pos:end="3495:67"><call pos:start="3495:17" pos:end="3495:67"><name pos:start="3495:17" pos:end="3495:26">__put_user</name><argument_list pos:start="3495:27" pos:end="3495:67">(<argument pos:start="3495:28" pos:end="3495:41"><expr pos:start="3495:28" pos:end="3495:41"><name pos:start="3495:28" pos:end="3495:41"><name pos:start="3495:28" pos:end="3495:32">value</name><operator pos:start="3495:33" pos:end="3495:33">.</operator><name pos:start="3495:34" pos:end="3495:38">loads</name><index pos:start="3495:39" pos:end="3495:41">[<expr pos:start="3495:40" pos:end="3495:40"><literal type="number" pos:start="3495:40" pos:end="3495:40">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="3495:44" pos:end="3495:66"><expr pos:start="3495:44" pos:end="3495:66"><operator pos:start="3495:44" pos:end="3495:44">&amp;</operator><name pos:start="3495:45" pos:end="3495:66"><name pos:start="3495:45" pos:end="3495:56">target_value</name><operator pos:start="3495:57" pos:end="3495:58">-&gt;</operator><name pos:start="3495:59" pos:end="3495:63">loads</name><index pos:start="3495:64" pos:end="3495:66">[<expr pos:start="3495:65" pos:end="3495:65"><literal type="number" pos:start="3495:65" pos:end="3495:65">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3497:17" pos:end="3497:68"><expr pos:start="3497:17" pos:end="3497:67"><call pos:start="3497:17" pos:end="3497:67"><name pos:start="3497:17" pos:end="3497:26">__put_user</name><argument_list pos:start="3497:27" pos:end="3497:67">(<argument pos:start="3497:28" pos:end="3497:41"><expr pos:start="3497:28" pos:end="3497:41"><name pos:start="3497:28" pos:end="3497:41"><name pos:start="3497:28" pos:end="3497:32">value</name><operator pos:start="3497:33" pos:end="3497:33">.</operator><name pos:start="3497:34" pos:end="3497:41">totalram</name></name></expr></argument>, <argument pos:start="3497:44" pos:end="3497:66"><expr pos:start="3497:44" pos:end="3497:66"><operator pos:start="3497:44" pos:end="3497:44">&amp;</operator><name pos:start="3497:45" pos:end="3497:66"><name pos:start="3497:45" pos:end="3497:56">target_value</name><operator pos:start="3497:57" pos:end="3497:58">-&gt;</operator><name pos:start="3497:59" pos:end="3497:66">totalram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3499:17" pos:end="3499:66"><expr pos:start="3499:17" pos:end="3499:65"><call pos:start="3499:17" pos:end="3499:65"><name pos:start="3499:17" pos:end="3499:26">__put_user</name><argument_list pos:start="3499:27" pos:end="3499:65">(<argument pos:start="3499:28" pos:end="3499:40"><expr pos:start="3499:28" pos:end="3499:40"><name pos:start="3499:28" pos:end="3499:40"><name pos:start="3499:28" pos:end="3499:32">value</name><operator pos:start="3499:33" pos:end="3499:33">.</operator><name pos:start="3499:34" pos:end="3499:40">freeram</name></name></expr></argument>, <argument pos:start="3499:43" pos:end="3499:64"><expr pos:start="3499:43" pos:end="3499:64"><operator pos:start="3499:43" pos:end="3499:43">&amp;</operator><name pos:start="3499:44" pos:end="3499:64"><name pos:start="3499:44" pos:end="3499:55">target_value</name><operator pos:start="3499:56" pos:end="3499:57">-&gt;</operator><name pos:start="3499:58" pos:end="3499:64">freeram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3501:17" pos:end="3501:70"><expr pos:start="3501:17" pos:end="3501:69"><call pos:start="3501:17" pos:end="3501:69"><name pos:start="3501:17" pos:end="3501:26">__put_user</name><argument_list pos:start="3501:27" pos:end="3501:69">(<argument pos:start="3501:28" pos:end="3501:42"><expr pos:start="3501:28" pos:end="3501:42"><name pos:start="3501:28" pos:end="3501:42"><name pos:start="3501:28" pos:end="3501:32">value</name><operator pos:start="3501:33" pos:end="3501:33">.</operator><name pos:start="3501:34" pos:end="3501:42">sharedram</name></name></expr></argument>, <argument pos:start="3501:45" pos:end="3501:68"><expr pos:start="3501:45" pos:end="3501:68"><operator pos:start="3501:45" pos:end="3501:45">&amp;</operator><name pos:start="3501:46" pos:end="3501:68"><name pos:start="3501:46" pos:end="3501:57">target_value</name><operator pos:start="3501:58" pos:end="3501:59">-&gt;</operator><name pos:start="3501:60" pos:end="3501:68">sharedram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3503:17" pos:end="3503:70"><expr pos:start="3503:17" pos:end="3503:69"><call pos:start="3503:17" pos:end="3503:69"><name pos:start="3503:17" pos:end="3503:26">__put_user</name><argument_list pos:start="3503:27" pos:end="3503:69">(<argument pos:start="3503:28" pos:end="3503:42"><expr pos:start="3503:28" pos:end="3503:42"><name pos:start="3503:28" pos:end="3503:42"><name pos:start="3503:28" pos:end="3503:32">value</name><operator pos:start="3503:33" pos:end="3503:33">.</operator><name pos:start="3503:34" pos:end="3503:42">bufferram</name></name></expr></argument>, <argument pos:start="3503:45" pos:end="3503:68"><expr pos:start="3503:45" pos:end="3503:68"><operator pos:start="3503:45" pos:end="3503:45">&amp;</operator><name pos:start="3503:46" pos:end="3503:68"><name pos:start="3503:46" pos:end="3503:57">target_value</name><operator pos:start="3503:58" pos:end="3503:59">-&gt;</operator><name pos:start="3503:60" pos:end="3503:68">bufferram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3505:17" pos:end="3505:70"><expr pos:start="3505:17" pos:end="3505:69"><call pos:start="3505:17" pos:end="3505:69"><name pos:start="3505:17" pos:end="3505:26">__put_user</name><argument_list pos:start="3505:27" pos:end="3505:69">(<argument pos:start="3505:28" pos:end="3505:42"><expr pos:start="3505:28" pos:end="3505:42"><name pos:start="3505:28" pos:end="3505:42"><name pos:start="3505:28" pos:end="3505:32">value</name><operator pos:start="3505:33" pos:end="3505:33">.</operator><name pos:start="3505:34" pos:end="3505:42">totalswap</name></name></expr></argument>, <argument pos:start="3505:45" pos:end="3505:68"><expr pos:start="3505:45" pos:end="3505:68"><operator pos:start="3505:45" pos:end="3505:45">&amp;</operator><name pos:start="3505:46" pos:end="3505:68"><name pos:start="3505:46" pos:end="3505:57">target_value</name><operator pos:start="3505:58" pos:end="3505:59">-&gt;</operator><name pos:start="3505:60" pos:end="3505:68">totalswap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3507:17" pos:end="3507:68"><expr pos:start="3507:17" pos:end="3507:67"><call pos:start="3507:17" pos:end="3507:67"><name pos:start="3507:17" pos:end="3507:26">__put_user</name><argument_list pos:start="3507:27" pos:end="3507:67">(<argument pos:start="3507:28" pos:end="3507:41"><expr pos:start="3507:28" pos:end="3507:41"><name pos:start="3507:28" pos:end="3507:41"><name pos:start="3507:28" pos:end="3507:32">value</name><operator pos:start="3507:33" pos:end="3507:33">.</operator><name pos:start="3507:34" pos:end="3507:41">freeswap</name></name></expr></argument>, <argument pos:start="3507:44" pos:end="3507:66"><expr pos:start="3507:44" pos:end="3507:66"><operator pos:start="3507:44" pos:end="3507:44">&amp;</operator><name pos:start="3507:45" pos:end="3507:66"><name pos:start="3507:45" pos:end="3507:56">target_value</name><operator pos:start="3507:57" pos:end="3507:58">-&gt;</operator><name pos:start="3507:59" pos:end="3507:66">freeswap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3509:17" pos:end="3509:62"><expr pos:start="3509:17" pos:end="3509:61"><call pos:start="3509:17" pos:end="3509:61"><name pos:start="3509:17" pos:end="3509:26">__put_user</name><argument_list pos:start="3509:27" pos:end="3509:61">(<argument pos:start="3509:28" pos:end="3509:38"><expr pos:start="3509:28" pos:end="3509:38"><name pos:start="3509:28" pos:end="3509:38"><name pos:start="3509:28" pos:end="3509:32">value</name><operator pos:start="3509:33" pos:end="3509:33">.</operator><name pos:start="3509:34" pos:end="3509:38">procs</name></name></expr></argument>, <argument pos:start="3509:41" pos:end="3509:60"><expr pos:start="3509:41" pos:end="3509:60"><operator pos:start="3509:41" pos:end="3509:41">&amp;</operator><name pos:start="3509:42" pos:end="3509:60"><name pos:start="3509:42" pos:end="3509:53">target_value</name><operator pos:start="3509:54" pos:end="3509:55">-&gt;</operator><name pos:start="3509:56" pos:end="3509:60">procs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3511:17" pos:end="3511:70"><expr pos:start="3511:17" pos:end="3511:69"><call pos:start="3511:17" pos:end="3511:69"><name pos:start="3511:17" pos:end="3511:26">__put_user</name><argument_list pos:start="3511:27" pos:end="3511:69">(<argument pos:start="3511:28" pos:end="3511:42"><expr pos:start="3511:28" pos:end="3511:42"><name pos:start="3511:28" pos:end="3511:42"><name pos:start="3511:28" pos:end="3511:32">value</name><operator pos:start="3511:33" pos:end="3511:33">.</operator><name pos:start="3511:34" pos:end="3511:42">totalhigh</name></name></expr></argument>, <argument pos:start="3511:45" pos:end="3511:68"><expr pos:start="3511:45" pos:end="3511:68"><operator pos:start="3511:45" pos:end="3511:45">&amp;</operator><name pos:start="3511:46" pos:end="3511:68"><name pos:start="3511:46" pos:end="3511:57">target_value</name><operator pos:start="3511:58" pos:end="3511:59">-&gt;</operator><name pos:start="3511:60" pos:end="3511:68">totalhigh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3513:17" pos:end="3513:68"><expr pos:start="3513:17" pos:end="3513:67"><call pos:start="3513:17" pos:end="3513:67"><name pos:start="3513:17" pos:end="3513:26">__put_user</name><argument_list pos:start="3513:27" pos:end="3513:67">(<argument pos:start="3513:28" pos:end="3513:41"><expr pos:start="3513:28" pos:end="3513:41"><name pos:start="3513:28" pos:end="3513:41"><name pos:start="3513:28" pos:end="3513:32">value</name><operator pos:start="3513:33" pos:end="3513:33">.</operator><name pos:start="3513:34" pos:end="3513:41">freehigh</name></name></expr></argument>, <argument pos:start="3513:44" pos:end="3513:66"><expr pos:start="3513:44" pos:end="3513:66"><operator pos:start="3513:44" pos:end="3513:44">&amp;</operator><name pos:start="3513:45" pos:end="3513:66"><name pos:start="3513:45" pos:end="3513:56">target_value</name><operator pos:start="3513:57" pos:end="3513:58">-&gt;</operator><name pos:start="3513:59" pos:end="3513:66">freehigh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3515:17" pos:end="3515:68"><expr pos:start="3515:17" pos:end="3515:67"><call pos:start="3515:17" pos:end="3515:67"><name pos:start="3515:17" pos:end="3515:26">__put_user</name><argument_list pos:start="3515:27" pos:end="3515:67">(<argument pos:start="3515:28" pos:end="3515:41"><expr pos:start="3515:28" pos:end="3515:41"><name pos:start="3515:28" pos:end="3515:41"><name pos:start="3515:28" pos:end="3515:32">value</name><operator pos:start="3515:33" pos:end="3515:33">.</operator><name pos:start="3515:34" pos:end="3515:41">mem_unit</name></name></expr></argument>, <argument pos:start="3515:44" pos:end="3515:66"><expr pos:start="3515:44" pos:end="3515:66"><operator pos:start="3515:44" pos:end="3515:44">&amp;</operator><name pos:start="3515:45" pos:end="3515:66"><name pos:start="3515:45" pos:end="3515:56">target_value</name><operator pos:start="3515:57" pos:end="3515:58">-&gt;</operator><name pos:start="3515:59" pos:end="3515:66">mem_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3517:17" pos:end="3517:58"><expr pos:start="3517:17" pos:end="3517:57"><call pos:start="3517:17" pos:end="3517:57"><name pos:start="3517:17" pos:end="3517:34">unlock_user_struct</name><argument_list pos:start="3517:35" pos:end="3517:57">(<argument pos:start="3517:36" pos:end="3517:47"><expr pos:start="3517:36" pos:end="3517:47"><name pos:start="3517:36" pos:end="3517:47">target_value</name></expr></argument>, <argument pos:start="3517:50" pos:end="3517:53"><expr pos:start="3517:50" pos:end="3517:53"><name pos:start="3517:50" pos:end="3517:53">arg1</name></expr></argument>, <argument pos:start="3517:56" pos:end="3517:56"><expr pos:start="3517:56" pos:end="3517:56"><literal type="number" pos:start="3517:56" pos:end="3517:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3523:9" pos:end="3526:0">break;</break>

<cpp:ifdef pos:start="3525:1" pos:end="3525:20">#<cpp:directive pos:start="3525:2" pos:end="3525:6">ifdef</cpp:directive> <name pos:start="3525:8" pos:end="3525:20">TARGET_NR_ipc</name></cpp:ifdef>

    <case pos:start="3527:5" pos:end="3527:23">case <expr pos:start="3527:10" pos:end="3527:22"><name pos:start="3527:10" pos:end="3527:22">TARGET_NR_ipc</name></expr>:</case>

	<expr_stmt pos:start="3529:9" pos:end="3529:57"><expr pos:start="3529:9" pos:end="3529:56"><name pos:start="3529:9" pos:end="3529:11">ret</name> <operator pos:start="3529:13" pos:end="3529:13">=</operator> <call pos:start="3529:15" pos:end="3529:56"><name pos:start="3529:15" pos:end="3529:20">do_ipc</name><argument_list pos:start="3529:21" pos:end="3529:56">(<argument pos:start="3529:22" pos:end="3529:25"><expr pos:start="3529:22" pos:end="3529:25"><name pos:start="3529:22" pos:end="3529:25">arg1</name></expr></argument>, <argument pos:start="3529:28" pos:end="3529:31"><expr pos:start="3529:28" pos:end="3529:31"><name pos:start="3529:28" pos:end="3529:31">arg2</name></expr></argument>, <argument pos:start="3529:34" pos:end="3529:37"><expr pos:start="3529:34" pos:end="3529:37"><name pos:start="3529:34" pos:end="3529:37">arg3</name></expr></argument>, <argument pos:start="3529:40" pos:end="3529:43"><expr pos:start="3529:40" pos:end="3529:43"><name pos:start="3529:40" pos:end="3529:43">arg4</name></expr></argument>, <argument pos:start="3529:46" pos:end="3529:49"><expr pos:start="3529:46" pos:end="3529:49"><name pos:start="3529:46" pos:end="3529:49">arg5</name></expr></argument>, <argument pos:start="3529:52" pos:end="3529:55"><expr pos:start="3529:52" pos:end="3529:55"><name pos:start="3529:52" pos:end="3529:55">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="3531:9" pos:end="3536:0">break;</break>

<cpp:endif pos:start="3533:1" pos:end="3533:6">#<cpp:directive pos:start="3533:2" pos:end="3533:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3535:1" pos:end="3535:23">#<cpp:directive pos:start="3535:2" pos:end="3535:6">ifdef</cpp:directive> <name pos:start="3535:8" pos:end="3535:23">TARGET_NR_semget</name></cpp:ifdef>

    <case pos:start="3537:5" pos:end="3537:26">case <expr pos:start="3537:10" pos:end="3537:25"><name pos:start="3537:10" pos:end="3537:25">TARGET_NR_semget</name></expr>:</case>

        <expr_stmt pos:start="3539:9" pos:end="3539:50"><expr pos:start="3539:9" pos:end="3539:49"><name pos:start="3539:9" pos:end="3539:11">ret</name> <operator pos:start="3539:13" pos:end="3539:13">=</operator> <call pos:start="3539:15" pos:end="3539:49"><name pos:start="3539:15" pos:end="3539:23">get_errno</name><argument_list pos:start="3539:24" pos:end="3539:49">(<argument pos:start="3539:25" pos:end="3539:48"><expr pos:start="3539:25" pos:end="3539:48"><call pos:start="3539:25" pos:end="3539:48"><name pos:start="3539:25" pos:end="3539:30">semget</name><argument_list pos:start="3539:31" pos:end="3539:48">(<argument pos:start="3539:32" pos:end="3539:35"><expr pos:start="3539:32" pos:end="3539:35"><name pos:start="3539:32" pos:end="3539:35">arg1</name></expr></argument>, <argument pos:start="3539:38" pos:end="3539:41"><expr pos:start="3539:38" pos:end="3539:41"><name pos:start="3539:38" pos:end="3539:41">arg2</name></expr></argument>, <argument pos:start="3539:44" pos:end="3539:47"><expr pos:start="3539:44" pos:end="3539:47"><name pos:start="3539:44" pos:end="3539:47">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3541:9" pos:end="3546:0">break;</break>

<cpp:endif pos:start="3543:1" pos:end="3543:6">#<cpp:directive pos:start="3543:2" pos:end="3543:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3545:1" pos:end="3545:22">#<cpp:directive pos:start="3545:2" pos:end="3545:6">ifdef</cpp:directive> <name pos:start="3545:8" pos:end="3545:22">TARGET_NR_semop</name></cpp:ifdef>

    <case pos:start="3547:5" pos:end="3547:25">case <expr pos:start="3547:10" pos:end="3547:24"><name pos:start="3547:10" pos:end="3547:24">TARGET_NR_semop</name></expr>:</case>

        <expr_stmt pos:start="3549:9" pos:end="3549:41"><expr pos:start="3549:9" pos:end="3549:40"><name pos:start="3549:9" pos:end="3549:11">ret</name> <operator pos:start="3549:13" pos:end="3549:13">=</operator> <call pos:start="3549:15" pos:end="3549:40"><name pos:start="3549:15" pos:end="3549:22">do_semop</name><argument_list pos:start="3549:23" pos:end="3549:40">(<argument pos:start="3549:24" pos:end="3549:27"><expr pos:start="3549:24" pos:end="3549:27"><name pos:start="3549:24" pos:end="3549:27">arg1</name></expr></argument>, <argument pos:start="3549:30" pos:end="3549:33"><expr pos:start="3549:30" pos:end="3549:33"><name pos:start="3549:30" pos:end="3549:33">arg2</name></expr></argument>, <argument pos:start="3549:36" pos:end="3549:39"><expr pos:start="3549:36" pos:end="3549:39"><name pos:start="3549:36" pos:end="3549:39">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3551:9" pos:end="3556:0">break;</break>

<cpp:endif pos:start="3553:1" pos:end="3553:6">#<cpp:directive pos:start="3553:2" pos:end="3553:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3555:1" pos:end="3555:23">#<cpp:directive pos:start="3555:2" pos:end="3555:6">ifdef</cpp:directive> <name pos:start="3555:8" pos:end="3555:23">TARGET_NR_semctl</name></cpp:ifdef>

    <case pos:start="3557:5" pos:end="3557:26">case <expr pos:start="3557:10" pos:end="3557:25"><name pos:start="3557:10" pos:end="3557:25">TARGET_NR_semctl</name></expr>:</case>

        <expr_stmt pos:start="3559:9" pos:end="3559:79"><expr pos:start="3559:9" pos:end="3559:78"><name pos:start="3559:9" pos:end="3559:11">ret</name> <operator pos:start="3559:13" pos:end="3559:13">=</operator> <call pos:start="3559:15" pos:end="3559:78"><name pos:start="3559:15" pos:end="3559:23">do_semctl</name><argument_list pos:start="3559:24" pos:end="3559:78">(<argument pos:start="3559:25" pos:end="3559:28"><expr pos:start="3559:25" pos:end="3559:28"><name pos:start="3559:25" pos:end="3559:28">arg1</name></expr></argument>, <argument pos:start="3559:31" pos:end="3559:34"><expr pos:start="3559:31" pos:end="3559:34"><name pos:start="3559:31" pos:end="3559:34">arg2</name></expr></argument>, <argument pos:start="3559:37" pos:end="3559:40"><expr pos:start="3559:37" pos:end="3559:40"><name pos:start="3559:37" pos:end="3559:40">arg3</name></expr></argument>, <argument pos:start="3559:43" pos:end="3559:77"><expr pos:start="3559:43" pos:end="3559:77"><operator pos:start="3559:43" pos:end="3559:43">(</operator>union <name pos:start="3559:50" pos:end="3559:61">target_semun</name><operator pos:start="3559:62" pos:end="3559:62">)</operator><operator pos:start="3559:63" pos:end="3559:63">(</operator><name pos:start="3559:64" pos:end="3559:72">abi_ulong</name><operator pos:start="3559:73" pos:end="3559:73">)</operator><name pos:start="3559:74" pos:end="3559:77">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3561:9" pos:end="3566:0">break;</break>

<cpp:endif pos:start="3563:1" pos:end="3563:6">#<cpp:directive pos:start="3563:2" pos:end="3563:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3565:1" pos:end="3565:23">#<cpp:directive pos:start="3565:2" pos:end="3565:6">ifdef</cpp:directive> <name pos:start="3565:8" pos:end="3565:23">TARGET_NR_msgctl</name></cpp:ifdef>

    <case pos:start="3567:5" pos:end="3567:26">case <expr pos:start="3567:10" pos:end="3567:25"><name pos:start="3567:10" pos:end="3567:25">TARGET_NR_msgctl</name></expr>:</case>

        <expr_stmt pos:start="3569:9" pos:end="3569:42"><expr pos:start="3569:9" pos:end="3569:41"><name pos:start="3569:9" pos:end="3569:11">ret</name> <operator pos:start="3569:13" pos:end="3569:13">=</operator> <call pos:start="3569:15" pos:end="3569:41"><name pos:start="3569:15" pos:end="3569:23">do_msgctl</name><argument_list pos:start="3569:24" pos:end="3569:41">(<argument pos:start="3569:25" pos:end="3569:28"><expr pos:start="3569:25" pos:end="3569:28"><name pos:start="3569:25" pos:end="3569:28">arg1</name></expr></argument>, <argument pos:start="3569:31" pos:end="3569:34"><expr pos:start="3569:31" pos:end="3569:34"><name pos:start="3569:31" pos:end="3569:34">arg2</name></expr></argument>, <argument pos:start="3569:37" pos:end="3569:40"><expr pos:start="3569:37" pos:end="3569:40"><name pos:start="3569:37" pos:end="3569:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3571:9" pos:end="3576:0">break;</break>

<cpp:endif pos:start="3573:1" pos:end="3573:6">#<cpp:directive pos:start="3573:2" pos:end="3573:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3575:1" pos:end="3575:23">#<cpp:directive pos:start="3575:2" pos:end="3575:6">ifdef</cpp:directive> <name pos:start="3575:8" pos:end="3575:23">TARGET_NR_msgget</name></cpp:ifdef>

    <case pos:start="3577:5" pos:end="3577:26">case <expr pos:start="3577:10" pos:end="3577:25"><name pos:start="3577:10" pos:end="3577:25">TARGET_NR_msgget</name></expr>:</case>

        <expr_stmt pos:start="3579:9" pos:end="3579:44"><expr pos:start="3579:9" pos:end="3579:43"><name pos:start="3579:9" pos:end="3579:11">ret</name> <operator pos:start="3579:13" pos:end="3579:13">=</operator> <call pos:start="3579:15" pos:end="3579:43"><name pos:start="3579:15" pos:end="3579:23">get_errno</name><argument_list pos:start="3579:24" pos:end="3579:43">(<argument pos:start="3579:25" pos:end="3579:42"><expr pos:start="3579:25" pos:end="3579:42"><call pos:start="3579:25" pos:end="3579:42"><name pos:start="3579:25" pos:end="3579:30">msgget</name><argument_list pos:start="3579:31" pos:end="3579:42">(<argument pos:start="3579:32" pos:end="3579:35"><expr pos:start="3579:32" pos:end="3579:35"><name pos:start="3579:32" pos:end="3579:35">arg1</name></expr></argument>, <argument pos:start="3579:38" pos:end="3579:41"><expr pos:start="3579:38" pos:end="3579:41"><name pos:start="3579:38" pos:end="3579:41">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3581:9" pos:end="3586:0">break;</break>

<cpp:endif pos:start="3583:1" pos:end="3583:6">#<cpp:directive pos:start="3583:2" pos:end="3583:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3585:1" pos:end="3585:23">#<cpp:directive pos:start="3585:2" pos:end="3585:6">ifdef</cpp:directive> <name pos:start="3585:8" pos:end="3585:23">TARGET_NR_msgrcv</name></cpp:ifdef>

    <case pos:start="3587:5" pos:end="3587:26">case <expr pos:start="3587:10" pos:end="3587:25"><name pos:start="3587:10" pos:end="3587:25">TARGET_NR_msgrcv</name></expr>:</case>

        <expr_stmt pos:start="3589:9" pos:end="3589:54"><expr pos:start="3589:9" pos:end="3589:53"><name pos:start="3589:9" pos:end="3589:11">ret</name> <operator pos:start="3589:13" pos:end="3589:13">=</operator> <call pos:start="3589:15" pos:end="3589:53"><name pos:start="3589:15" pos:end="3589:23">do_msgrcv</name><argument_list pos:start="3589:24" pos:end="3589:53">(<argument pos:start="3589:25" pos:end="3589:28"><expr pos:start="3589:25" pos:end="3589:28"><name pos:start="3589:25" pos:end="3589:28">arg1</name></expr></argument>, <argument pos:start="3589:31" pos:end="3589:34"><expr pos:start="3589:31" pos:end="3589:34"><name pos:start="3589:31" pos:end="3589:34">arg2</name></expr></argument>, <argument pos:start="3589:37" pos:end="3589:40"><expr pos:start="3589:37" pos:end="3589:40"><name pos:start="3589:37" pos:end="3589:40">arg3</name></expr></argument>, <argument pos:start="3589:43" pos:end="3589:46"><expr pos:start="3589:43" pos:end="3589:46"><name pos:start="3589:43" pos:end="3589:46">arg4</name></expr></argument>, <argument pos:start="3589:49" pos:end="3589:52"><expr pos:start="3589:49" pos:end="3589:52"><name pos:start="3589:49" pos:end="3589:52">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3591:9" pos:end="3596:0">break;</break>

<cpp:endif pos:start="3593:1" pos:end="3593:6">#<cpp:directive pos:start="3593:2" pos:end="3593:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3595:1" pos:end="3595:23">#<cpp:directive pos:start="3595:2" pos:end="3595:6">ifdef</cpp:directive> <name pos:start="3595:8" pos:end="3595:23">TARGET_NR_msgsnd</name></cpp:ifdef>

    <case pos:start="3597:5" pos:end="3597:26">case <expr pos:start="3597:10" pos:end="3597:25"><name pos:start="3597:10" pos:end="3597:25">TARGET_NR_msgsnd</name></expr>:</case>

        <expr_stmt pos:start="3599:9" pos:end="3599:48"><expr pos:start="3599:9" pos:end="3599:47"><name pos:start="3599:9" pos:end="3599:11">ret</name> <operator pos:start="3599:13" pos:end="3599:13">=</operator> <call pos:start="3599:15" pos:end="3599:47"><name pos:start="3599:15" pos:end="3599:23">do_msgsnd</name><argument_list pos:start="3599:24" pos:end="3599:47">(<argument pos:start="3599:25" pos:end="3599:28"><expr pos:start="3599:25" pos:end="3599:28"><name pos:start="3599:25" pos:end="3599:28">arg1</name></expr></argument>, <argument pos:start="3599:31" pos:end="3599:34"><expr pos:start="3599:31" pos:end="3599:34"><name pos:start="3599:31" pos:end="3599:34">arg2</name></expr></argument>, <argument pos:start="3599:37" pos:end="3599:40"><expr pos:start="3599:37" pos:end="3599:40"><name pos:start="3599:37" pos:end="3599:40">arg3</name></expr></argument>, <argument pos:start="3599:43" pos:end="3599:46"><expr pos:start="3599:43" pos:end="3599:46"><name pos:start="3599:43" pos:end="3599:46">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3601:9" pos:end="3606:0">break;</break>

<cpp:endif pos:start="3603:1" pos:end="3603:6">#<cpp:directive pos:start="3603:2" pos:end="3603:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3605:1" pos:end="3605:23">#<cpp:directive pos:start="3605:2" pos:end="3605:6">ifdef</cpp:directive> <name pos:start="3605:8" pos:end="3605:23">TARGET_NR_shmget</name></cpp:ifdef>

    <case pos:start="3607:5" pos:end="3607:26">case <expr pos:start="3607:10" pos:end="3607:25"><name pos:start="3607:10" pos:end="3607:25">TARGET_NR_shmget</name></expr>:</case>

        <expr_stmt pos:start="3609:9" pos:end="3609:50"><expr pos:start="3609:9" pos:end="3609:49"><name pos:start="3609:9" pos:end="3609:11">ret</name> <operator pos:start="3609:13" pos:end="3609:13">=</operator> <call pos:start="3609:15" pos:end="3609:49"><name pos:start="3609:15" pos:end="3609:23">get_errno</name><argument_list pos:start="3609:24" pos:end="3609:49">(<argument pos:start="3609:25" pos:end="3609:48"><expr pos:start="3609:25" pos:end="3609:48"><call pos:start="3609:25" pos:end="3609:48"><name pos:start="3609:25" pos:end="3609:30">shmget</name><argument_list pos:start="3609:31" pos:end="3609:48">(<argument pos:start="3609:32" pos:end="3609:35"><expr pos:start="3609:32" pos:end="3609:35"><name pos:start="3609:32" pos:end="3609:35">arg1</name></expr></argument>, <argument pos:start="3609:38" pos:end="3609:41"><expr pos:start="3609:38" pos:end="3609:41"><name pos:start="3609:38" pos:end="3609:41">arg2</name></expr></argument>, <argument pos:start="3609:44" pos:end="3609:47"><expr pos:start="3609:44" pos:end="3609:47"><name pos:start="3609:44" pos:end="3609:47">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3611:9" pos:end="3616:0">break;</break>

<cpp:endif pos:start="3613:1" pos:end="3613:6">#<cpp:directive pos:start="3613:2" pos:end="3613:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3615:1" pos:end="3615:23">#<cpp:directive pos:start="3615:2" pos:end="3615:6">ifdef</cpp:directive> <name pos:start="3615:8" pos:end="3615:23">TARGET_NR_shmctl</name></cpp:ifdef>

    <case pos:start="3617:5" pos:end="3617:26">case <expr pos:start="3617:10" pos:end="3617:25"><name pos:start="3617:10" pos:end="3617:25">TARGET_NR_shmctl</name></expr>:</case>

        <expr_stmt pos:start="3619:9" pos:end="3619:42"><expr pos:start="3619:9" pos:end="3619:41"><name pos:start="3619:9" pos:end="3619:11">ret</name> <operator pos:start="3619:13" pos:end="3619:13">=</operator> <call pos:start="3619:15" pos:end="3619:41"><name pos:start="3619:15" pos:end="3619:23">do_shmctl</name><argument_list pos:start="3619:24" pos:end="3619:41">(<argument pos:start="3619:25" pos:end="3619:28"><expr pos:start="3619:25" pos:end="3619:28"><name pos:start="3619:25" pos:end="3619:28">arg1</name></expr></argument>, <argument pos:start="3619:31" pos:end="3619:34"><expr pos:start="3619:31" pos:end="3619:34"><name pos:start="3619:31" pos:end="3619:34">arg2</name></expr></argument>, <argument pos:start="3619:37" pos:end="3619:40"><expr pos:start="3619:37" pos:end="3619:40"><name pos:start="3619:37" pos:end="3619:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3621:9" pos:end="3626:0">break;</break>

<cpp:endif pos:start="3623:1" pos:end="3623:6">#<cpp:directive pos:start="3623:2" pos:end="3623:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3625:1" pos:end="3625:22">#<cpp:directive pos:start="3625:2" pos:end="3625:6">ifdef</cpp:directive> <name pos:start="3625:8" pos:end="3625:22">TARGET_NR_shmat</name></cpp:ifdef>

    <case pos:start="3627:5" pos:end="3627:25">case <expr pos:start="3627:10" pos:end="3627:24"><name pos:start="3627:10" pos:end="3627:24">TARGET_NR_shmat</name></expr>:</case>

        <expr_stmt pos:start="3629:9" pos:end="3629:41"><expr pos:start="3629:9" pos:end="3629:40"><name pos:start="3629:9" pos:end="3629:11">ret</name> <operator pos:start="3629:13" pos:end="3629:13">=</operator> <call pos:start="3629:15" pos:end="3629:40"><name pos:start="3629:15" pos:end="3629:22">do_shmat</name><argument_list pos:start="3629:23" pos:end="3629:40">(<argument pos:start="3629:24" pos:end="3629:27"><expr pos:start="3629:24" pos:end="3629:27"><name pos:start="3629:24" pos:end="3629:27">arg1</name></expr></argument>, <argument pos:start="3629:30" pos:end="3629:33"><expr pos:start="3629:30" pos:end="3629:33"><name pos:start="3629:30" pos:end="3629:33">arg2</name></expr></argument>, <argument pos:start="3629:36" pos:end="3629:39"><expr pos:start="3629:36" pos:end="3629:39"><name pos:start="3629:36" pos:end="3629:39">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3631:9" pos:end="3636:0">break;</break>

<cpp:endif pos:start="3633:1" pos:end="3633:6">#<cpp:directive pos:start="3633:2" pos:end="3633:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3635:1" pos:end="3635:22">#<cpp:directive pos:start="3635:2" pos:end="3635:6">ifdef</cpp:directive> <name pos:start="3635:8" pos:end="3635:22">TARGET_NR_shmdt</name></cpp:ifdef>

    <case pos:start="3637:5" pos:end="3637:25">case <expr pos:start="3637:10" pos:end="3637:24"><name pos:start="3637:10" pos:end="3637:24">TARGET_NR_shmdt</name></expr>:</case>

        <expr_stmt pos:start="3639:9" pos:end="3639:29"><expr pos:start="3639:9" pos:end="3639:28"><name pos:start="3639:9" pos:end="3639:11">ret</name> <operator pos:start="3639:13" pos:end="3639:13">=</operator> <call pos:start="3639:15" pos:end="3639:28"><name pos:start="3639:15" pos:end="3639:22">do_shmdt</name><argument_list pos:start="3639:23" pos:end="3639:28">(<argument pos:start="3639:24" pos:end="3639:27"><expr pos:start="3639:24" pos:end="3639:27"><name pos:start="3639:24" pos:end="3639:27">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3641:9" pos:end="3644:0">break;</break>

<cpp:endif pos:start="3643:1" pos:end="3643:6">#<cpp:directive pos:start="3643:2" pos:end="3643:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3645:5" pos:end="3645:25">case <expr pos:start="3645:10" pos:end="3645:24"><name pos:start="3645:10" pos:end="3645:24">TARGET_NR_fsync</name></expr>:</case>

        <expr_stmt pos:start="3647:9" pos:end="3647:37"><expr pos:start="3647:9" pos:end="3647:36"><name pos:start="3647:9" pos:end="3647:11">ret</name> <operator pos:start="3647:13" pos:end="3647:13">=</operator> <call pos:start="3647:15" pos:end="3647:36"><name pos:start="3647:15" pos:end="3647:23">get_errno</name><argument_list pos:start="3647:24" pos:end="3647:36">(<argument pos:start="3647:25" pos:end="3647:35"><expr pos:start="3647:25" pos:end="3647:35"><call pos:start="3647:25" pos:end="3647:35"><name pos:start="3647:25" pos:end="3647:29">fsync</name><argument_list pos:start="3647:30" pos:end="3647:35">(<argument pos:start="3647:31" pos:end="3647:34"><expr pos:start="3647:31" pos:end="3647:34"><name pos:start="3647:31" pos:end="3647:34">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3649:9" pos:end="3649:14">break;</break>

    <case pos:start="3651:5" pos:end="3666:0">case <expr pos:start="3651:10" pos:end="3651:24"><name pos:start="3651:10" pos:end="3651:24">TARGET_NR_clone</name></expr>:</case>

        <comment type="block" pos:start="3653:9" pos:end="3663:11">/* Linux manages to have three different orderings for its

         * arguments to clone(); the BACKWARDS and BACKWARDS2 defines

         * match the kernel's CONFIG_CLONE_* settings.

         * Microblaze is further special in that it uses a sixth

         * implicit argument to clone for the TLS pointer.

         */</comment>

<cpp:if pos:start="3665:1" pos:end="3665:30">#<cpp:directive pos:start="3665:2" pos:end="3665:3">if</cpp:directive> <expr pos:start="3665:5" pos:end="3665:30"><call pos:start="3665:5" pos:end="3665:30"><name pos:start="3665:5" pos:end="3665:11">defined</name><argument_list pos:start="3665:12" pos:end="3665:30">(<argument pos:start="3665:13" pos:end="3665:29"><expr pos:start="3665:13" pos:end="3665:29"><name pos:start="3665:13" pos:end="3665:29">TARGET_MICROBLAZE</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="3667:9" pos:end="3670:0"><expr pos:start="3667:9" pos:end="3667:71"><name pos:start="3667:9" pos:end="3667:11">ret</name> <operator pos:start="3667:13" pos:end="3667:13">=</operator> <call pos:start="3667:15" pos:end="3667:71"><name pos:start="3667:15" pos:end="3667:23">get_errno</name><argument_list pos:start="3667:24" pos:end="3667:71">(<argument pos:start="3667:25" pos:end="3667:70"><expr pos:start="3667:25" pos:end="3667:70"><call pos:start="3667:25" pos:end="3667:70"><name pos:start="3667:25" pos:end="3667:31">do_fork</name><argument_list pos:start="3667:32" pos:end="3667:70">(<argument pos:start="3667:33" pos:end="3667:39"><expr pos:start="3667:33" pos:end="3667:39"><name pos:start="3667:33" pos:end="3667:39">cpu_env</name></expr></argument>, <argument pos:start="3667:42" pos:end="3667:45"><expr pos:start="3667:42" pos:end="3667:45"><name pos:start="3667:42" pos:end="3667:45">arg1</name></expr></argument>, <argument pos:start="3667:48" pos:end="3667:51"><expr pos:start="3667:48" pos:end="3667:51"><name pos:start="3667:48" pos:end="3667:51">arg2</name></expr></argument>, <argument pos:start="3667:54" pos:end="3667:57"><expr pos:start="3667:54" pos:end="3667:57"><name pos:start="3667:54" pos:end="3667:57">arg4</name></expr></argument>, <argument pos:start="3667:60" pos:end="3667:63"><expr pos:start="3667:60" pos:end="3667:63"><name pos:start="3667:60" pos:end="3667:63">arg6</name></expr></argument>, <argument pos:start="3667:66" pos:end="3667:69"><expr pos:start="3667:66" pos:end="3667:69"><name pos:start="3667:66" pos:end="3667:69">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="3669:1" pos:end="3669:37">#<cpp:directive pos:start="3669:2" pos:end="3669:5">elif</cpp:directive> <expr pos:start="3669:7" pos:end="3669:37"><call pos:start="3669:7" pos:end="3669:37"><name pos:start="3669:7" pos:end="3669:13">defined</name><argument_list pos:start="3669:14" pos:end="3669:37">(<argument pos:start="3669:15" pos:end="3669:36"><expr pos:start="3669:15" pos:end="3669:36"><name pos:start="3669:15" pos:end="3669:36">TARGET_CLONE_BACKWARDS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <expr_stmt pos:start="3671:9" pos:end="3674:0"><expr pos:start="3671:9" pos:end="3671:71"><name pos:start="3671:9" pos:end="3671:11">ret</name> <operator pos:start="3671:13" pos:end="3671:13">=</operator> <call pos:start="3671:15" pos:end="3671:71"><name pos:start="3671:15" pos:end="3671:23">get_errno</name><argument_list pos:start="3671:24" pos:end="3671:71">(<argument pos:start="3671:25" pos:end="3671:70"><expr pos:start="3671:25" pos:end="3671:70"><call pos:start="3671:25" pos:end="3671:70"><name pos:start="3671:25" pos:end="3671:31">do_fork</name><argument_list pos:start="3671:32" pos:end="3671:70">(<argument pos:start="3671:33" pos:end="3671:39"><expr pos:start="3671:33" pos:end="3671:39"><name pos:start="3671:33" pos:end="3671:39">cpu_env</name></expr></argument>, <argument pos:start="3671:42" pos:end="3671:45"><expr pos:start="3671:42" pos:end="3671:45"><name pos:start="3671:42" pos:end="3671:45">arg1</name></expr></argument>, <argument pos:start="3671:48" pos:end="3671:51"><expr pos:start="3671:48" pos:end="3671:51"><name pos:start="3671:48" pos:end="3671:51">arg2</name></expr></argument>, <argument pos:start="3671:54" pos:end="3671:57"><expr pos:start="3671:54" pos:end="3671:57"><name pos:start="3671:54" pos:end="3671:57">arg3</name></expr></argument>, <argument pos:start="3671:60" pos:end="3671:63"><expr pos:start="3671:60" pos:end="3671:63"><name pos:start="3671:60" pos:end="3671:63">arg4</name></expr></argument>, <argument pos:start="3671:66" pos:end="3671:69"><expr pos:start="3671:66" pos:end="3671:69"><name pos:start="3671:66" pos:end="3671:69">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="3673:1" pos:end="3673:38">#<cpp:directive pos:start="3673:2" pos:end="3673:5">elif</cpp:directive> <expr pos:start="3673:7" pos:end="3673:38"><call pos:start="3673:7" pos:end="3673:38"><name pos:start="3673:7" pos:end="3673:13">defined</name><argument_list pos:start="3673:14" pos:end="3673:38">(<argument pos:start="3673:15" pos:end="3673:37"><expr pos:start="3673:15" pos:end="3673:37"><name pos:start="3673:15" pos:end="3673:37">TARGET_CLONE_BACKWARDS2</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <expr_stmt pos:start="3675:9" pos:end="3678:0"><expr pos:start="3675:9" pos:end="3675:71"><name pos:start="3675:9" pos:end="3675:11">ret</name> <operator pos:start="3675:13" pos:end="3675:13">=</operator> <call pos:start="3675:15" pos:end="3675:71"><name pos:start="3675:15" pos:end="3675:23">get_errno</name><argument_list pos:start="3675:24" pos:end="3675:71">(<argument pos:start="3675:25" pos:end="3675:70"><expr pos:start="3675:25" pos:end="3675:70"><call pos:start="3675:25" pos:end="3675:70"><name pos:start="3675:25" pos:end="3675:31">do_fork</name><argument_list pos:start="3675:32" pos:end="3675:70">(<argument pos:start="3675:33" pos:end="3675:39"><expr pos:start="3675:33" pos:end="3675:39"><name pos:start="3675:33" pos:end="3675:39">cpu_env</name></expr></argument>, <argument pos:start="3675:42" pos:end="3675:45"><expr pos:start="3675:42" pos:end="3675:45"><name pos:start="3675:42" pos:end="3675:45">arg2</name></expr></argument>, <argument pos:start="3675:48" pos:end="3675:51"><expr pos:start="3675:48" pos:end="3675:51"><name pos:start="3675:48" pos:end="3675:51">arg1</name></expr></argument>, <argument pos:start="3675:54" pos:end="3675:57"><expr pos:start="3675:54" pos:end="3675:57"><name pos:start="3675:54" pos:end="3675:57">arg3</name></expr></argument>, <argument pos:start="3675:60" pos:end="3675:63"><expr pos:start="3675:60" pos:end="3675:63"><name pos:start="3675:60" pos:end="3675:63">arg5</name></expr></argument>, <argument pos:start="3675:66" pos:end="3675:69"><expr pos:start="3675:66" pos:end="3675:69"><name pos:start="3675:66" pos:end="3675:69">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="3677:1" pos:end="3677:5">#<cpp:directive pos:start="3677:2" pos:end="3677:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="3679:9" pos:end="3682:0"><expr pos:start="3679:9" pos:end="3679:71"><name pos:start="3679:9" pos:end="3679:11">ret</name> <operator pos:start="3679:13" pos:end="3679:13">=</operator> <call pos:start="3679:15" pos:end="3679:71"><name pos:start="3679:15" pos:end="3679:23">get_errno</name><argument_list pos:start="3679:24" pos:end="3679:71">(<argument pos:start="3679:25" pos:end="3679:70"><expr pos:start="3679:25" pos:end="3679:70"><call pos:start="3679:25" pos:end="3679:70"><name pos:start="3679:25" pos:end="3679:31">do_fork</name><argument_list pos:start="3679:32" pos:end="3679:70">(<argument pos:start="3679:33" pos:end="3679:39"><expr pos:start="3679:33" pos:end="3679:39"><name pos:start="3679:33" pos:end="3679:39">cpu_env</name></expr></argument>, <argument pos:start="3679:42" pos:end="3679:45"><expr pos:start="3679:42" pos:end="3679:45"><name pos:start="3679:42" pos:end="3679:45">arg1</name></expr></argument>, <argument pos:start="3679:48" pos:end="3679:51"><expr pos:start="3679:48" pos:end="3679:51"><name pos:start="3679:48" pos:end="3679:51">arg2</name></expr></argument>, <argument pos:start="3679:54" pos:end="3679:57"><expr pos:start="3679:54" pos:end="3679:57"><name pos:start="3679:54" pos:end="3679:57">arg3</name></expr></argument>, <argument pos:start="3679:60" pos:end="3679:63"><expr pos:start="3679:60" pos:end="3679:63"><name pos:start="3679:60" pos:end="3679:63">arg5</name></expr></argument>, <argument pos:start="3679:66" pos:end="3679:69"><expr pos:start="3679:66" pos:end="3679:69"><name pos:start="3679:66" pos:end="3679:69">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="3681:1" pos:end="3681:6">#<cpp:directive pos:start="3681:2" pos:end="3681:6">endif</cpp:directive></cpp:endif>

        <break pos:start="3683:9" pos:end="3686:0">break;</break>

<cpp:ifdef pos:start="3685:1" pos:end="3685:22">#<cpp:directive pos:start="3685:2" pos:end="3685:6">ifdef</cpp:directive> <name pos:start="3685:8" pos:end="3685:22">__NR_exit_group</name></cpp:ifdef>

        <comment type="block" pos:start="3687:9" pos:end="3687:30">/* new thread calls */</comment>

    <case pos:start="3689:5" pos:end="3692:0">case <expr pos:start="3689:10" pos:end="3689:29"><name pos:start="3689:10" pos:end="3689:29">TARGET_NR_exit_group</name></expr>:</case>

<cpp:ifdef pos:start="3691:1" pos:end="3691:19">#<cpp:directive pos:start="3691:2" pos:end="3691:6">ifdef</cpp:directive> <name pos:start="3691:8" pos:end="3691:19">TARGET_GPROF</name></cpp:ifdef>

        <expr_stmt pos:start="3693:9" pos:end="3696:0"><expr pos:start="3693:9" pos:end="3693:19"><call pos:start="3693:9" pos:end="3693:19"><name pos:start="3693:9" pos:end="3693:17">_mcleanup</name><argument_list pos:start="3693:18" pos:end="3693:19">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="3695:1" pos:end="3695:6">#<cpp:directive pos:start="3695:2" pos:end="3695:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="3697:9" pos:end="3697:32"><expr pos:start="3697:9" pos:end="3697:31"><call pos:start="3697:9" pos:end="3697:31"><name pos:start="3697:9" pos:end="3697:16">gdb_exit</name><argument_list pos:start="3697:17" pos:end="3697:31">(<argument pos:start="3697:18" pos:end="3697:24"><expr pos:start="3697:18" pos:end="3697:24"><name pos:start="3697:18" pos:end="3697:24">cpu_env</name></expr></argument>, <argument pos:start="3697:27" pos:end="3697:30"><expr pos:start="3697:27" pos:end="3697:30"><name pos:start="3697:27" pos:end="3697:30">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3699:9" pos:end="3699:42"><expr pos:start="3699:9" pos:end="3699:41"><name pos:start="3699:9" pos:end="3699:11">ret</name> <operator pos:start="3699:13" pos:end="3699:13">=</operator> <call pos:start="3699:15" pos:end="3699:41"><name pos:start="3699:15" pos:end="3699:23">get_errno</name><argument_list pos:start="3699:24" pos:end="3699:41">(<argument pos:start="3699:25" pos:end="3699:40"><expr pos:start="3699:25" pos:end="3699:40"><call pos:start="3699:25" pos:end="3699:40"><name pos:start="3699:25" pos:end="3699:34">exit_group</name><argument_list pos:start="3699:35" pos:end="3699:40">(<argument pos:start="3699:36" pos:end="3699:39"><expr pos:start="3699:36" pos:end="3699:39"><name pos:start="3699:36" pos:end="3699:39">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3701:9" pos:end="3704:0">break;</break>

<cpp:endif pos:start="3703:1" pos:end="3703:6">#<cpp:directive pos:start="3703:2" pos:end="3703:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3705:5" pos:end="3705:33">case <expr pos:start="3705:10" pos:end="3705:32"><name pos:start="3705:10" pos:end="3705:32">TARGET_NR_setdomainname</name></expr>:</case>

        <if_stmt pos:start="3707:9" pos:end="3709:24"><if pos:start="3707:9" pos:end="3709:24">if <condition pos:start="3707:12" pos:end="3707:42">(<expr pos:start="3707:13" pos:end="3707:41"><operator pos:start="3707:13" pos:end="3707:13">!</operator><operator pos:start="3707:14" pos:end="3707:14">(</operator><name pos:start="3707:15" pos:end="3707:15">p</name> <operator pos:start="3707:17" pos:end="3707:17">=</operator> <call pos:start="3707:19" pos:end="3707:40"><name pos:start="3707:19" pos:end="3707:34">lock_user_string</name><argument_list pos:start="3707:35" pos:end="3707:40">(<argument pos:start="3707:36" pos:end="3707:39"><expr pos:start="3707:36" pos:end="3707:39"><name pos:start="3707:36" pos:end="3707:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="3707:41" pos:end="3707:41">)</operator></expr>)</condition><block type="pseudo" pos:start="3709:13" pos:end="3709:24"><block_content pos:start="3709:13" pos:end="3709:24">

            <goto pos:start="3709:13" pos:end="3709:24">goto <name pos:start="3709:18" pos:end="3709:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3711:9" pos:end="3711:48"><expr pos:start="3711:9" pos:end="3711:47"><name pos:start="3711:9" pos:end="3711:11">ret</name> <operator pos:start="3711:13" pos:end="3711:13">=</operator> <call pos:start="3711:15" pos:end="3711:47"><name pos:start="3711:15" pos:end="3711:23">get_errno</name><argument_list pos:start="3711:24" pos:end="3711:47">(<argument pos:start="3711:25" pos:end="3711:46"><expr pos:start="3711:25" pos:end="3711:46"><call pos:start="3711:25" pos:end="3711:46"><name pos:start="3711:25" pos:end="3711:37">setdomainname</name><argument_list pos:start="3711:38" pos:end="3711:46">(<argument pos:start="3711:39" pos:end="3711:39"><expr pos:start="3711:39" pos:end="3711:39"><name pos:start="3711:39" pos:end="3711:39">p</name></expr></argument>, <argument pos:start="3711:42" pos:end="3711:45"><expr pos:start="3711:42" pos:end="3711:45"><name pos:start="3711:42" pos:end="3711:45">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3713:9" pos:end="3713:32"><expr pos:start="3713:9" pos:end="3713:31"><call pos:start="3713:9" pos:end="3713:31"><name pos:start="3713:9" pos:end="3713:19">unlock_user</name><argument_list pos:start="3713:20" pos:end="3713:31">(<argument pos:start="3713:21" pos:end="3713:21"><expr pos:start="3713:21" pos:end="3713:21"><name pos:start="3713:21" pos:end="3713:21">p</name></expr></argument>, <argument pos:start="3713:24" pos:end="3713:27"><expr pos:start="3713:24" pos:end="3713:27"><name pos:start="3713:24" pos:end="3713:27">arg1</name></expr></argument>, <argument pos:start="3713:30" pos:end="3713:30"><expr pos:start="3713:30" pos:end="3713:30"><literal type="number" pos:start="3713:30" pos:end="3713:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3715:9" pos:end="3715:14">break;</break>

    <case pos:start="3717:5" pos:end="3717:25">case <expr pos:start="3717:10" pos:end="3717:24"><name pos:start="3717:10" pos:end="3717:24">TARGET_NR_uname</name></expr>:</case>

        <comment type="block" pos:start="3719:9" pos:end="3719:67">/* no need to transcode because we use the linux syscall */</comment>

        <block pos:start="3721:9" pos:end="3751:9">{<block_content pos:start="3723:13" pos:end="3749:45">

            <decl_stmt pos:start="3723:13" pos:end="3723:37"><decl pos:start="3723:13" pos:end="3723:36"><type pos:start="3723:13" pos:end="3723:32"><name pos:start="3723:13" pos:end="3723:30"><name pos:start="3723:13" pos:end="3723:18">struct</name> <name pos:start="3723:20" pos:end="3723:30">new_utsname</name></name> <modifier pos:start="3723:32" pos:end="3723:32">*</modifier></type> <name pos:start="3723:34" pos:end="3723:36">buf</name></decl>;</decl_stmt>



            <if_stmt pos:start="3727:13" pos:end="3729:28"><if pos:start="3727:13" pos:end="3729:28">if <condition pos:start="3727:16" pos:end="3727:62">(<expr pos:start="3727:17" pos:end="3727:61"><operator pos:start="3727:17" pos:end="3727:17">!</operator><call pos:start="3727:18" pos:end="3727:61"><name pos:start="3727:18" pos:end="3727:33">lock_user_struct</name><argument_list pos:start="3727:34" pos:end="3727:61">(<argument pos:start="3727:35" pos:end="3727:46"><expr pos:start="3727:35" pos:end="3727:46"><name pos:start="3727:35" pos:end="3727:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3727:49" pos:end="3727:51"><expr pos:start="3727:49" pos:end="3727:51"><name pos:start="3727:49" pos:end="3727:51">buf</name></expr></argument>, <argument pos:start="3727:54" pos:end="3727:57"><expr pos:start="3727:54" pos:end="3727:57"><name pos:start="3727:54" pos:end="3727:57">arg1</name></expr></argument>, <argument pos:start="3727:60" pos:end="3727:60"><expr pos:start="3727:60" pos:end="3727:60"><literal type="number" pos:start="3727:60" pos:end="3727:60">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="3729:17" pos:end="3729:28"><block_content pos:start="3729:17" pos:end="3729:28">

                <goto pos:start="3729:17" pos:end="3729:28">goto <name pos:start="3729:22" pos:end="3729:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3731:13" pos:end="3731:44"><expr pos:start="3731:13" pos:end="3731:43"><name pos:start="3731:13" pos:end="3731:15">ret</name> <operator pos:start="3731:17" pos:end="3731:17">=</operator> <call pos:start="3731:19" pos:end="3731:43"><name pos:start="3731:19" pos:end="3731:27">get_errno</name><argument_list pos:start="3731:28" pos:end="3731:43">(<argument pos:start="3731:29" pos:end="3731:42"><expr pos:start="3731:29" pos:end="3731:42"><call pos:start="3731:29" pos:end="3731:42"><name pos:start="3731:29" pos:end="3731:37">sys_uname</name><argument_list pos:start="3731:38" pos:end="3731:42">(<argument pos:start="3731:39" pos:end="3731:41"><expr pos:start="3731:39" pos:end="3731:41"><name pos:start="3731:39" pos:end="3731:41">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3733:13" pos:end="3747:13"><if pos:start="3733:13" pos:end="3747:13">if <condition pos:start="3733:16" pos:end="3733:31">(<expr pos:start="3733:17" pos:end="3733:30"><operator pos:start="3733:17" pos:end="3733:17">!</operator><call pos:start="3733:18" pos:end="3733:30"><name pos:start="3733:18" pos:end="3733:25">is_error</name><argument_list pos:start="3733:26" pos:end="3733:30">(<argument pos:start="3733:27" pos:end="3733:29"><expr pos:start="3733:27" pos:end="3733:29"><name pos:start="3733:27" pos:end="3733:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3733:33" pos:end="3747:13">{<block_content pos:start="3739:17" pos:end="3745:60">

                <comment type="block" pos:start="3735:17" pos:end="3737:31">/* Overrite the native machine name with whatever is being

                   emulated. */</comment>

                <expr_stmt pos:start="3739:17" pos:end="3739:69"><expr pos:start="3739:17" pos:end="3739:68"><call pos:start="3739:17" pos:end="3739:68"><name pos:start="3739:17" pos:end="3739:22">strcpy</name> <argument_list pos:start="3739:24" pos:end="3739:68">(<argument pos:start="3739:25" pos:end="3739:36"><expr pos:start="3739:25" pos:end="3739:36"><name pos:start="3739:25" pos:end="3739:36"><name pos:start="3739:25" pos:end="3739:27">buf</name><operator pos:start="3739:28" pos:end="3739:29">-&gt;</operator><name pos:start="3739:30" pos:end="3739:36">machine</name></name></expr></argument>, <argument pos:start="3739:39" pos:end="3739:67"><expr pos:start="3739:39" pos:end="3739:67"><call pos:start="3739:39" pos:end="3739:67"><name pos:start="3739:39" pos:end="3739:58">cpu_to_uname_machine</name><argument_list pos:start="3739:59" pos:end="3739:67">(<argument pos:start="3739:60" pos:end="3739:66"><expr pos:start="3739:60" pos:end="3739:66"><name pos:start="3739:60" pos:end="3739:66">cpu_env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="3741:17" pos:end="3741:71">/* Allow the user to override the reported release.  */</comment>

                <if_stmt pos:start="3743:17" pos:end="3745:60"><if pos:start="3743:17" pos:end="3745:60">if <condition pos:start="3743:20" pos:end="3743:62">(<expr pos:start="3743:21" pos:end="3743:61"><name pos:start="3743:21" pos:end="3743:38">qemu_uname_release</name> <operator pos:start="3743:40" pos:end="3743:41">&amp;&amp;</operator> <operator pos:start="3743:43" pos:end="3743:43">*</operator><name pos:start="3743:44" pos:end="3743:61">qemu_uname_release</name></expr>)</condition><block type="pseudo" pos:start="3745:19" pos:end="3745:60"><block_content pos:start="3745:19" pos:end="3745:60">

                  <expr_stmt pos:start="3745:19" pos:end="3745:60"><expr pos:start="3745:19" pos:end="3745:59"><call pos:start="3745:19" pos:end="3745:59"><name pos:start="3745:19" pos:end="3745:24">strcpy</name> <argument_list pos:start="3745:26" pos:end="3745:59">(<argument pos:start="3745:27" pos:end="3745:38"><expr pos:start="3745:27" pos:end="3745:38"><name pos:start="3745:27" pos:end="3745:38"><name pos:start="3745:27" pos:end="3745:29">buf</name><operator pos:start="3745:30" pos:end="3745:31">-&gt;</operator><name pos:start="3745:32" pos:end="3745:38">release</name></name></expr></argument>, <argument pos:start="3745:41" pos:end="3745:58"><expr pos:start="3745:41" pos:end="3745:58"><name pos:start="3745:41" pos:end="3745:58">qemu_uname_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="3749:13" pos:end="3749:45"><expr pos:start="3749:13" pos:end="3749:44"><call pos:start="3749:13" pos:end="3749:44"><name pos:start="3749:13" pos:end="3749:30">unlock_user_struct</name><argument_list pos:start="3749:31" pos:end="3749:44">(<argument pos:start="3749:32" pos:end="3749:34"><expr pos:start="3749:32" pos:end="3749:34"><name pos:start="3749:32" pos:end="3749:34">buf</name></expr></argument>, <argument pos:start="3749:37" pos:end="3749:40"><expr pos:start="3749:37" pos:end="3749:40"><name pos:start="3749:37" pos:end="3749:40">arg1</name></expr></argument>, <argument pos:start="3749:43" pos:end="3749:43"><expr pos:start="3749:43" pos:end="3749:43"><literal type="number" pos:start="3749:43" pos:end="3749:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="3753:9" pos:end="3756:0">break;</break>

<cpp:ifdef pos:start="3755:1" pos:end="3755:18">#<cpp:directive pos:start="3755:2" pos:end="3755:6">ifdef</cpp:directive> <name pos:start="3755:8" pos:end="3755:18">TARGET_I386</name></cpp:ifdef>

    <case pos:start="3757:5" pos:end="3757:30">case <expr pos:start="3757:10" pos:end="3757:29"><name pos:start="3757:10" pos:end="3757:29">TARGET_NR_modify_ldt</name></expr>:</case>

        <expr_stmt pos:start="3759:9" pos:end="3759:55"><expr pos:start="3759:9" pos:end="3759:54"><name pos:start="3759:9" pos:end="3759:11">ret</name> <operator pos:start="3759:13" pos:end="3759:13">=</operator> <call pos:start="3759:15" pos:end="3759:54"><name pos:start="3759:15" pos:end="3759:27">do_modify_ldt</name><argument_list pos:start="3759:28" pos:end="3759:54">(<argument pos:start="3759:29" pos:end="3759:35"><expr pos:start="3759:29" pos:end="3759:35"><name pos:start="3759:29" pos:end="3759:35">cpu_env</name></expr></argument>, <argument pos:start="3759:38" pos:end="3759:41"><expr pos:start="3759:38" pos:end="3759:41"><name pos:start="3759:38" pos:end="3759:41">arg1</name></expr></argument>, <argument pos:start="3759:44" pos:end="3759:47"><expr pos:start="3759:44" pos:end="3759:47"><name pos:start="3759:44" pos:end="3759:47">arg2</name></expr></argument>, <argument pos:start="3759:50" pos:end="3759:53"><expr pos:start="3759:50" pos:end="3759:53"><name pos:start="3759:50" pos:end="3759:53">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3761:9" pos:end="3764:0">break;</break>

<cpp:if pos:start="3763:1" pos:end="3763:27">#<cpp:directive pos:start="3763:2" pos:end="3763:3">if</cpp:directive> <expr pos:start="3763:5" pos:end="3763:27"><operator pos:start="3763:5" pos:end="3763:5">!</operator><call pos:start="3763:6" pos:end="3763:27"><name pos:start="3763:6" pos:end="3763:12">defined</name><argument_list pos:start="3763:13" pos:end="3763:27">(<argument pos:start="3763:14" pos:end="3763:26"><expr pos:start="3763:14" pos:end="3763:26"><name pos:start="3763:14" pos:end="3763:26">TARGET_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="3765:5" pos:end="3765:27">case <expr pos:start="3765:10" pos:end="3765:26"><name pos:start="3765:10" pos:end="3765:26">TARGET_NR_vm86old</name></expr>:</case>

        <goto pos:start="3767:9" pos:end="3767:27">goto <name pos:start="3767:14" pos:end="3767:26">unimplemented</name>;</goto>

    <case pos:start="3769:5" pos:end="3769:24">case <expr pos:start="3769:10" pos:end="3769:23"><name pos:start="3769:10" pos:end="3769:23">TARGET_NR_vm86</name></expr>:</case>

        <expr_stmt pos:start="3771:9" pos:end="3771:43"><expr pos:start="3771:9" pos:end="3771:42"><name pos:start="3771:9" pos:end="3771:11">ret</name> <operator pos:start="3771:13" pos:end="3771:13">=</operator> <call pos:start="3771:15" pos:end="3771:42"><name pos:start="3771:15" pos:end="3771:21">do_vm86</name><argument_list pos:start="3771:22" pos:end="3771:42">(<argument pos:start="3771:23" pos:end="3771:29"><expr pos:start="3771:23" pos:end="3771:29"><name pos:start="3771:23" pos:end="3771:29">cpu_env</name></expr></argument>, <argument pos:start="3771:32" pos:end="3771:35"><expr pos:start="3771:32" pos:end="3771:35"><name pos:start="3771:32" pos:end="3771:35">arg1</name></expr></argument>, <argument pos:start="3771:38" pos:end="3771:41"><expr pos:start="3771:38" pos:end="3771:41"><name pos:start="3771:38" pos:end="3771:41">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3773:9" pos:end="3778:0">break;</break>

<cpp:endif pos:start="3775:1" pos:end="3775:6">#<cpp:directive pos:start="3775:2" pos:end="3775:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="3777:1" pos:end="3777:6">#<cpp:directive pos:start="3777:2" pos:end="3777:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3779:5" pos:end="3779:28">case <expr pos:start="3779:10" pos:end="3779:27"><name pos:start="3779:10" pos:end="3779:27">TARGET_NR_adjtimex</name></expr>:</case>

        <goto pos:start="3781:9" pos:end="3784:0">goto <name pos:start="3781:14" pos:end="3781:26">unimplemented</name>;</goto>

<cpp:ifdef pos:start="3783:1" pos:end="3783:30">#<cpp:directive pos:start="3783:2" pos:end="3783:6">ifdef</cpp:directive> <name pos:start="3783:8" pos:end="3783:30">TARGET_NR_create_module</name></cpp:ifdef>

    <case pos:start="3785:5" pos:end="3788:0">case <expr pos:start="3785:10" pos:end="3785:32"><name pos:start="3785:10" pos:end="3785:32">TARGET_NR_create_module</name></expr>:</case>

<cpp:endif pos:start="3787:1" pos:end="3787:6">#<cpp:directive pos:start="3787:2" pos:end="3787:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3789:5" pos:end="3789:31">case <expr pos:start="3789:10" pos:end="3789:30"><name pos:start="3789:10" pos:end="3789:30">TARGET_NR_init_module</name></expr>:</case>

    <case pos:start="3791:5" pos:end="3794:0">case <expr pos:start="3791:10" pos:end="3791:32"><name pos:start="3791:10" pos:end="3791:32">TARGET_NR_delete_module</name></expr>:</case>

<cpp:ifdef pos:start="3793:1" pos:end="3793:32">#<cpp:directive pos:start="3793:2" pos:end="3793:6">ifdef</cpp:directive> <name pos:start="3793:8" pos:end="3793:32">TARGET_NR_get_kernel_syms</name></cpp:ifdef>

    <case pos:start="3795:5" pos:end="3798:0">case <expr pos:start="3795:10" pos:end="3795:34"><name pos:start="3795:10" pos:end="3795:34">TARGET_NR_get_kernel_syms</name></expr>:</case>

<cpp:endif pos:start="3797:1" pos:end="3797:6">#<cpp:directive pos:start="3797:2" pos:end="3797:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="3799:9" pos:end="3799:27">goto <name pos:start="3799:14" pos:end="3799:26">unimplemented</name>;</goto>

    <case pos:start="3801:5" pos:end="3801:28">case <expr pos:start="3801:10" pos:end="3801:27"><name pos:start="3801:10" pos:end="3801:27">TARGET_NR_quotactl</name></expr>:</case>

        <goto pos:start="3803:9" pos:end="3803:27">goto <name pos:start="3803:14" pos:end="3803:26">unimplemented</name>;</goto>

    <case pos:start="3805:5" pos:end="3805:27">case <expr pos:start="3805:10" pos:end="3805:26"><name pos:start="3805:10" pos:end="3805:26">TARGET_NR_getpgid</name></expr>:</case>

        <expr_stmt pos:start="3807:9" pos:end="3807:39"><expr pos:start="3807:9" pos:end="3807:38"><name pos:start="3807:9" pos:end="3807:11">ret</name> <operator pos:start="3807:13" pos:end="3807:13">=</operator> <call pos:start="3807:15" pos:end="3807:38"><name pos:start="3807:15" pos:end="3807:23">get_errno</name><argument_list pos:start="3807:24" pos:end="3807:38">(<argument pos:start="3807:25" pos:end="3807:37"><expr pos:start="3807:25" pos:end="3807:37"><call pos:start="3807:25" pos:end="3807:37"><name pos:start="3807:25" pos:end="3807:31">getpgid</name><argument_list pos:start="3807:32" pos:end="3807:37">(<argument pos:start="3807:33" pos:end="3807:36"><expr pos:start="3807:33" pos:end="3807:36"><name pos:start="3807:33" pos:end="3807:36">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3809:9" pos:end="3809:14">break;</break>

    <case pos:start="3811:5" pos:end="3811:26">case <expr pos:start="3811:10" pos:end="3811:25"><name pos:start="3811:10" pos:end="3811:25">TARGET_NR_fchdir</name></expr>:</case>

        <expr_stmt pos:start="3813:9" pos:end="3813:38"><expr pos:start="3813:9" pos:end="3813:37"><name pos:start="3813:9" pos:end="3813:11">ret</name> <operator pos:start="3813:13" pos:end="3813:13">=</operator> <call pos:start="3813:15" pos:end="3813:37"><name pos:start="3813:15" pos:end="3813:23">get_errno</name><argument_list pos:start="3813:24" pos:end="3813:37">(<argument pos:start="3813:25" pos:end="3813:36"><expr pos:start="3813:25" pos:end="3813:36"><call pos:start="3813:25" pos:end="3813:36"><name pos:start="3813:25" pos:end="3813:30">fchdir</name><argument_list pos:start="3813:31" pos:end="3813:36">(<argument pos:start="3813:32" pos:end="3813:35"><expr pos:start="3813:32" pos:end="3813:35"><name pos:start="3813:32" pos:end="3813:35">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3815:9" pos:end="3818:0">break;</break>

<cpp:ifdef pos:start="3817:1" pos:end="3817:24">#<cpp:directive pos:start="3817:2" pos:end="3817:6">ifdef</cpp:directive> <name pos:start="3817:8" pos:end="3817:24">TARGET_NR_bdflush</name></cpp:ifdef> <comment type="block" pos:start="3817:26" pos:end="3817:44">/* not on x86_64 */</comment>

    <case pos:start="3819:5" pos:end="3819:27">case <expr pos:start="3819:10" pos:end="3819:26"><name pos:start="3819:10" pos:end="3819:26">TARGET_NR_bdflush</name></expr>:</case>

        <goto pos:start="3821:9" pos:end="3826:0">goto <name pos:start="3821:14" pos:end="3821:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3823:1" pos:end="3823:6">#<cpp:directive pos:start="3823:2" pos:end="3823:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3825:1" pos:end="3825:22">#<cpp:directive pos:start="3825:2" pos:end="3825:6">ifdef</cpp:directive> <name pos:start="3825:8" pos:end="3825:22">TARGET_NR_sysfs</name></cpp:ifdef>

    <case pos:start="3827:5" pos:end="3827:25">case <expr pos:start="3827:10" pos:end="3827:24"><name pos:start="3827:10" pos:end="3827:24">TARGET_NR_sysfs</name></expr>:</case>

        <goto pos:start="3829:9" pos:end="3832:0">goto <name pos:start="3829:14" pos:end="3829:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3831:1" pos:end="3831:6">#<cpp:directive pos:start="3831:2" pos:end="3831:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3833:5" pos:end="3833:31">case <expr pos:start="3833:10" pos:end="3833:30"><name pos:start="3833:10" pos:end="3833:30">TARGET_NR_personality</name></expr>:</case>

        <expr_stmt pos:start="3835:9" pos:end="3835:43"><expr pos:start="3835:9" pos:end="3835:42"><name pos:start="3835:9" pos:end="3835:11">ret</name> <operator pos:start="3835:13" pos:end="3835:13">=</operator> <call pos:start="3835:15" pos:end="3835:42"><name pos:start="3835:15" pos:end="3835:23">get_errno</name><argument_list pos:start="3835:24" pos:end="3835:42">(<argument pos:start="3835:25" pos:end="3835:41"><expr pos:start="3835:25" pos:end="3835:41"><call pos:start="3835:25" pos:end="3835:41"><name pos:start="3835:25" pos:end="3835:35">personality</name><argument_list pos:start="3835:36" pos:end="3835:41">(<argument pos:start="3835:37" pos:end="3835:40"><expr pos:start="3835:37" pos:end="3835:40"><name pos:start="3835:37" pos:end="3835:40">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3837:9" pos:end="3840:0">break;</break>

<cpp:ifdef pos:start="3839:1" pos:end="3839:28">#<cpp:directive pos:start="3839:2" pos:end="3839:6">ifdef</cpp:directive> <name pos:start="3839:8" pos:end="3839:28">TARGET_NR_afs_syscall</name></cpp:ifdef>

    <case pos:start="3841:5" pos:end="3841:31">case <expr pos:start="3841:10" pos:end="3841:30"><name pos:start="3841:10" pos:end="3841:30">TARGET_NR_afs_syscall</name></expr>:</case>

        <goto pos:start="3843:9" pos:end="3848:0">goto <name pos:start="3843:14" pos:end="3843:26">unimplemented</name>;</goto>

<cpp:endif pos:start="3845:1" pos:end="3845:6">#<cpp:directive pos:start="3845:2" pos:end="3845:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3847:1" pos:end="3847:24">#<cpp:directive pos:start="3847:2" pos:end="3847:6">ifdef</cpp:directive> <name pos:start="3847:8" pos:end="3847:24">TARGET_NR__llseek</name></cpp:ifdef> <comment type="block" pos:start="3847:26" pos:end="3847:43">/* Not on alpha */</comment>

    <case pos:start="3849:5" pos:end="3849:27">case <expr pos:start="3849:10" pos:end="3849:26"><name pos:start="3849:10" pos:end="3849:26">TARGET_NR__llseek</name></expr>:</case>

        <block pos:start="3851:9" pos:end="3880:9">{<block_content pos:start="3853:13" pos:end="3878:13">

            <decl_stmt pos:start="3853:13" pos:end="3856:0"><decl pos:start="3853:13" pos:end="3853:23"><type pos:start="3853:13" pos:end="3853:19"><name pos:start="3853:13" pos:end="3853:19">int64_t</name></type> <name pos:start="3853:21" pos:end="3853:23">res</name></decl>;</decl_stmt>

<cpp:if pos:start="3855:1" pos:end="3855:25">#<cpp:directive pos:start="3855:2" pos:end="3855:3">if</cpp:directive> <expr pos:start="3855:5" pos:end="3855:25"><operator pos:start="3855:5" pos:end="3855:5">!</operator><call pos:start="3855:6" pos:end="3855:25"><name pos:start="3855:6" pos:end="3855:12">defined</name><argument_list pos:start="3855:13" pos:end="3855:25">(<argument pos:start="3855:14" pos:end="3855:24"><expr pos:start="3855:14" pos:end="3855:24"><name pos:start="3855:14" pos:end="3855:24">__NR_llseek</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="3857:13" pos:end="3857:67"><expr pos:start="3857:13" pos:end="3857:66"><name pos:start="3857:13" pos:end="3857:15">res</name> <operator pos:start="3857:17" pos:end="3857:17">=</operator> <call pos:start="3857:19" pos:end="3857:66"><name pos:start="3857:19" pos:end="3857:23">lseek</name><argument_list pos:start="3857:24" pos:end="3857:66">(<argument pos:start="3857:25" pos:end="3857:28"><expr pos:start="3857:25" pos:end="3857:28"><name pos:start="3857:25" pos:end="3857:28">arg1</name></expr></argument>, <argument pos:start="3857:31" pos:end="3857:59"><expr pos:start="3857:31" pos:end="3857:59"><operator pos:start="3857:31" pos:end="3857:31">(</operator><operator pos:start="3857:32" pos:end="3857:32">(</operator><name pos:start="3857:33" pos:end="3857:40">uint64_t</name><operator pos:start="3857:41" pos:end="3857:41">)</operator><name pos:start="3857:42" pos:end="3857:45">arg2</name> <operator pos:start="3857:47" pos:end="3857:48">&lt;&lt;</operator> <literal type="number" pos:start="3857:50" pos:end="3857:51">32</literal><operator pos:start="3857:52" pos:end="3857:52">)</operator> <operator pos:start="3857:54" pos:end="3857:54">|</operator> <name pos:start="3857:56" pos:end="3857:59">arg3</name></expr></argument>, <argument pos:start="3857:62" pos:end="3857:65"><expr pos:start="3857:62" pos:end="3857:65"><name pos:start="3857:62" pos:end="3857:65">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3859:13" pos:end="3869:0"><if pos:start="3859:13" pos:end="3863:13">if <condition pos:start="3859:16" pos:end="3859:26">(<expr pos:start="3859:17" pos:end="3859:25"><name pos:start="3859:17" pos:end="3859:19">res</name> <operator pos:start="3859:21" pos:end="3859:22">==</operator> <operator pos:start="3859:24" pos:end="3859:24">-</operator><literal type="number" pos:start="3859:25" pos:end="3859:25">1</literal></expr>)</condition> <block pos:start="3859:28" pos:end="3863:13">{<block_content pos:start="3861:17" pos:end="3861:37">

                <expr_stmt pos:start="3861:17" pos:end="3861:37"><expr pos:start="3861:17" pos:end="3861:36"><name pos:start="3861:17" pos:end="3861:19">ret</name> <operator pos:start="3861:21" pos:end="3861:21">=</operator> <call pos:start="3861:23" pos:end="3861:36"><name pos:start="3861:23" pos:end="3861:31">get_errno</name><argument_list pos:start="3861:32" pos:end="3861:36">(<argument pos:start="3861:33" pos:end="3861:35"><expr pos:start="3861:33" pos:end="3861:35"><name pos:start="3861:33" pos:end="3861:35">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="3863:15" pos:end="3869:0">else <block pos:start="3863:20" pos:end="3869:0">{<block_content>


            </block_content>}</block></else></if_stmt>

<cpp:else pos:start="3868:1" pos:end="3868:5">#<cpp:directive pos:start="3868:2" pos:end="3868:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="3870:13" pos:end="3873:0"><expr pos:start="3870:13" pos:end="3870:66"><name pos:start="3870:13" pos:end="3870:15">ret</name> <operator pos:start="3870:17" pos:end="3870:17">=</operator> <call pos:start="3870:19" pos:end="3870:66"><name pos:start="3870:19" pos:end="3870:27">get_errno</name><argument_list pos:start="3870:28" pos:end="3870:66">(<argument pos:start="3870:29" pos:end="3870:65"><expr pos:start="3870:29" pos:end="3870:65"><call pos:start="3870:29" pos:end="3870:65"><name pos:start="3870:29" pos:end="3870:35">_llseek</name><argument_list pos:start="3870:36" pos:end="3870:65">(<argument pos:start="3870:37" pos:end="3870:40"><expr pos:start="3870:37" pos:end="3870:40"><name pos:start="3870:37" pos:end="3870:40">arg1</name></expr></argument>, <argument pos:start="3870:43" pos:end="3870:46"><expr pos:start="3870:43" pos:end="3870:46"><name pos:start="3870:43" pos:end="3870:46">arg2</name></expr></argument>, <argument pos:start="3870:49" pos:end="3870:52"><expr pos:start="3870:49" pos:end="3870:52"><name pos:start="3870:49" pos:end="3870:52">arg3</name></expr></argument>, <argument pos:start="3870:55" pos:end="3870:58"><expr pos:start="3870:55" pos:end="3870:58"><operator pos:start="3870:55" pos:end="3870:55">&amp;</operator><name pos:start="3870:56" pos:end="3870:58">res</name></expr></argument>, <argument pos:start="3870:61" pos:end="3870:64"><expr pos:start="3870:61" pos:end="3870:64"><name pos:start="3870:61" pos:end="3870:64">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="3872:1" pos:end="3872:6">#<cpp:directive pos:start="3872:2" pos:end="3872:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="3874:13" pos:end="3878:13"><if pos:start="3874:13" pos:end="3878:13">if <condition pos:start="3874:16" pos:end="3874:54">(<expr pos:start="3874:17" pos:end="3874:53"><operator pos:start="3874:17" pos:end="3874:17">(</operator><name pos:start="3874:18" pos:end="3874:20">ret</name> <operator pos:start="3874:22" pos:end="3874:23">==</operator> <literal type="number" pos:start="3874:25" pos:end="3874:25">0</literal><operator pos:start="3874:26" pos:end="3874:26">)</operator> <operator pos:start="3874:28" pos:end="3874:29">&amp;&amp;</operator> <call pos:start="3874:31" pos:end="3874:53"><name pos:start="3874:31" pos:end="3874:42">put_user_s64</name><argument_list pos:start="3874:43" pos:end="3874:53">(<argument pos:start="3874:44" pos:end="3874:46"><expr pos:start="3874:44" pos:end="3874:46"><name pos:start="3874:44" pos:end="3874:46">res</name></expr></argument>, <argument pos:start="3874:49" pos:end="3874:52"><expr pos:start="3874:49" pos:end="3874:52"><name pos:start="3874:49" pos:end="3874:52">arg4</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3874:56" pos:end="3878:13">{<block_content pos:start="3876:17" pos:end="3876:28">

                <goto pos:start="3876:17" pos:end="3876:28">goto <name pos:start="3876:22" pos:end="3876:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="3882:9" pos:end="3885:0">break;</break>

<cpp:endif pos:start="3884:1" pos:end="3884:6">#<cpp:directive pos:start="3884:2" pos:end="3884:6">endif</cpp:directive></cpp:endif>

    <case pos:start="3886:5" pos:end="3891:0">case <expr pos:start="3886:10" pos:end="3886:27"><name pos:start="3886:10" pos:end="3886:27">TARGET_NR_getdents</name></expr>:</case>

<cpp:ifdef pos:start="3888:1" pos:end="3888:20">#<cpp:directive pos:start="3888:2" pos:end="3888:6">ifdef</cpp:directive> <name pos:start="3888:8" pos:end="3888:20">__NR_getdents</name></cpp:ifdef>

<cpp:if pos:start="3890:1" pos:end="3890:49">#<cpp:directive pos:start="3890:2" pos:end="3890:3">if</cpp:directive> <expr pos:start="3890:5" pos:end="3890:49"><name pos:start="3890:5" pos:end="3890:19">TARGET_ABI_BITS</name> <operator pos:start="3890:21" pos:end="3890:22">==</operator> <literal type="number" pos:start="3890:24" pos:end="3890:25">32</literal> <operator pos:start="3890:27" pos:end="3890:28">&amp;&amp;</operator> <name pos:start="3890:30" pos:end="3890:43">HOST_LONG_BITS</name> <operator pos:start="3890:45" pos:end="3890:46">==</operator> <literal type="number" pos:start="3890:48" pos:end="3890:49">64</literal></expr></cpp:if>

        <block pos:start="3892:9" pos:end="3981:0">{<block_content pos:start="3894:13" pos:end="3976:23">

            <decl_stmt pos:start="3894:13" pos:end="3894:46"><decl pos:start="3894:13" pos:end="3894:45"><type pos:start="3894:13" pos:end="3894:34"><name pos:start="3894:13" pos:end="3894:32"><name pos:start="3894:13" pos:end="3894:18">struct</name> <name pos:start="3894:20" pos:end="3894:32">target_dirent</name></name> <modifier pos:start="3894:34" pos:end="3894:34">*</modifier></type><name pos:start="3894:35" pos:end="3894:45">target_dirp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3896:13" pos:end="3896:38"><decl pos:start="3896:13" pos:end="3896:37"><type pos:start="3896:13" pos:end="3896:33"><name pos:start="3896:13" pos:end="3896:31"><name pos:start="3896:13" pos:end="3896:18">struct</name> <name pos:start="3896:20" pos:end="3896:31">linux_dirent</name></name> <modifier pos:start="3896:33" pos:end="3896:33">*</modifier></type><name pos:start="3896:34" pos:end="3896:37">dirp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3898:13" pos:end="3898:34"><decl pos:start="3898:13" pos:end="3898:33"><type pos:start="3898:13" pos:end="3898:20"><name pos:start="3898:13" pos:end="3898:20">abi_long</name></type> <name pos:start="3898:22" pos:end="3898:26">count</name> <init pos:start="3898:28" pos:end="3898:33">= <expr pos:start="3898:30" pos:end="3898:33"><name pos:start="3898:30" pos:end="3898:33">arg3</name></expr></init></decl>;</decl_stmt>



	    <expr_stmt pos:start="3902:13" pos:end="3902:33"><expr pos:start="3902:13" pos:end="3902:32"><name pos:start="3902:13" pos:end="3902:16">dirp</name> <operator pos:start="3902:18" pos:end="3902:18">=</operator> <call pos:start="3902:20" pos:end="3902:32"><name pos:start="3902:20" pos:end="3902:25">malloc</name><argument_list pos:start="3902:26" pos:end="3902:32">(<argument pos:start="3902:27" pos:end="3902:31"><expr pos:start="3902:27" pos:end="3902:31"><name pos:start="3902:27" pos:end="3902:31">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="3904:13" pos:end="3910:13"><if pos:start="3904:13" pos:end="3910:13">if <condition pos:start="3904:16" pos:end="3904:22">(<expr pos:start="3904:17" pos:end="3904:21"><operator pos:start="3904:17" pos:end="3904:17">!</operator><name pos:start="3904:18" pos:end="3904:21">dirp</name></expr>)</condition> <block pos:start="3904:24" pos:end="3910:13">{<block_content pos:start="3906:17" pos:end="3908:26">

                <expr_stmt pos:start="3906:17" pos:end="3906:37"><expr pos:start="3906:17" pos:end="3906:36"><name pos:start="3906:17" pos:end="3906:19">ret</name> <operator pos:start="3906:21" pos:end="3906:21">=</operator> <operator pos:start="3906:23" pos:end="3906:23">-</operator><name pos:start="3906:24" pos:end="3906:36">TARGET_ENOMEM</name></expr>;</expr_stmt>

                <goto pos:start="3908:17" pos:end="3908:26">goto <name pos:start="3908:22" pos:end="3908:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="3914:13" pos:end="3914:61"><expr pos:start="3914:13" pos:end="3914:60"><name pos:start="3914:13" pos:end="3914:15">ret</name> <operator pos:start="3914:17" pos:end="3914:17">=</operator> <call pos:start="3914:19" pos:end="3914:60"><name pos:start="3914:19" pos:end="3914:27">get_errno</name><argument_list pos:start="3914:28" pos:end="3914:60">(<argument pos:start="3914:29" pos:end="3914:59"><expr pos:start="3914:29" pos:end="3914:59"><call pos:start="3914:29" pos:end="3914:59"><name pos:start="3914:29" pos:end="3914:40">sys_getdents</name><argument_list pos:start="3914:41" pos:end="3914:59">(<argument pos:start="3914:42" pos:end="3914:45"><expr pos:start="3914:42" pos:end="3914:45"><name pos:start="3914:42" pos:end="3914:45">arg1</name></expr></argument>, <argument pos:start="3914:48" pos:end="3914:51"><expr pos:start="3914:48" pos:end="3914:51"><name pos:start="3914:48" pos:end="3914:51">dirp</name></expr></argument>, <argument pos:start="3914:54" pos:end="3914:58"><expr pos:start="3914:54" pos:end="3914:58"><name pos:start="3914:54" pos:end="3914:58">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3916:13" pos:end="3974:13"><if pos:start="3916:13" pos:end="3974:13">if <condition pos:start="3916:16" pos:end="3916:31">(<expr pos:start="3916:17" pos:end="3916:30"><operator pos:start="3916:17" pos:end="3916:17">!</operator><call pos:start="3916:18" pos:end="3916:30"><name pos:start="3916:18" pos:end="3916:25">is_error</name><argument_list pos:start="3916:26" pos:end="3916:30">(<argument pos:start="3916:27" pos:end="3916:29"><expr pos:start="3916:27" pos:end="3916:29"><name pos:start="3916:27" pos:end="3916:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3916:33" pos:end="3974:13">{<block_content pos:start="3918:17" pos:end="3972:52">

                <decl_stmt pos:start="3918:17" pos:end="3918:40"><decl pos:start="3918:17" pos:end="3918:39"><type pos:start="3918:17" pos:end="3918:37"><name pos:start="3918:17" pos:end="3918:35"><name pos:start="3918:17" pos:end="3918:22">struct</name> <name pos:start="3918:24" pos:end="3918:35">linux_dirent</name></name> <modifier pos:start="3918:37" pos:end="3918:37">*</modifier></type><name pos:start="3918:38" pos:end="3918:39">de</name></decl>;</decl_stmt>

		<decl_stmt pos:start="3920:17" pos:end="3920:42"><decl pos:start="3920:17" pos:end="3920:41"><type pos:start="3920:17" pos:end="3920:38"><name pos:start="3920:17" pos:end="3920:36"><name pos:start="3920:17" pos:end="3920:22">struct</name> <name pos:start="3920:24" pos:end="3920:36">target_dirent</name></name> <modifier pos:start="3920:38" pos:end="3920:38">*</modifier></type><name pos:start="3920:39" pos:end="3920:41">tde</name></decl>;</decl_stmt>

                <decl_stmt pos:start="3922:17" pos:end="3922:30"><decl pos:start="3922:17" pos:end="3922:29"><type pos:start="3922:17" pos:end="3922:19"><name pos:start="3922:17" pos:end="3922:19">int</name></type> <name pos:start="3922:21" pos:end="3922:23">len</name> <init pos:start="3922:25" pos:end="3922:29">= <expr pos:start="3922:27" pos:end="3922:29"><name pos:start="3922:27" pos:end="3922:29">ret</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="3924:17" pos:end="3924:36"><decl pos:start="3924:17" pos:end="3924:26"><type pos:start="3924:17" pos:end="3924:19"><name pos:start="3924:17" pos:end="3924:19">int</name></type> <name pos:start="3924:21" pos:end="3924:26">reclen</name></decl>, <decl pos:start="3924:29" pos:end="3924:35"><type ref="prev" pos:start="3924:17" pos:end="3924:19"/><name pos:start="3924:29" pos:end="3924:35">treclen</name></decl>;</decl_stmt>

		<decl_stmt pos:start="3926:17" pos:end="3926:37"><decl pos:start="3926:17" pos:end="3926:26"><type pos:start="3926:17" pos:end="3926:19"><name pos:start="3926:17" pos:end="3926:19">int</name></type> <name pos:start="3926:21" pos:end="3926:26">count1</name></decl>, <decl pos:start="3926:29" pos:end="3926:36"><type ref="prev" pos:start="3926:17" pos:end="3926:19"/><name pos:start="3926:29" pos:end="3926:36">tnamelen</name></decl>;</decl_stmt>



		<expr_stmt pos:start="3930:17" pos:end="3930:27"><expr pos:start="3930:17" pos:end="3930:26"><name pos:start="3930:17" pos:end="3930:22">count1</name> <operator pos:start="3930:24" pos:end="3930:24">=</operator> <literal type="number" pos:start="3930:26" pos:end="3930:26">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="3932:17" pos:end="3932:26"><expr pos:start="3932:17" pos:end="3932:25"><name pos:start="3932:17" pos:end="3932:18">de</name> <operator pos:start="3932:20" pos:end="3932:20">=</operator> <name pos:start="3932:22" pos:end="3932:25">dirp</name></expr>;</expr_stmt>

                <if_stmt pos:start="3934:17" pos:end="3936:32"><if pos:start="3934:17" pos:end="3936:32">if <condition pos:start="3934:20" pos:end="3934:77">(<expr pos:start="3934:21" pos:end="3934:76"><operator pos:start="3934:21" pos:end="3934:21">!</operator><operator pos:start="3934:22" pos:end="3934:22">(</operator><name pos:start="3934:23" pos:end="3934:33">target_dirp</name> <operator pos:start="3934:35" pos:end="3934:35">=</operator> <call pos:start="3934:37" pos:end="3934:75"><name pos:start="3934:37" pos:end="3934:45">lock_user</name><argument_list pos:start="3934:46" pos:end="3934:75">(<argument pos:start="3934:47" pos:end="3934:58"><expr pos:start="3934:47" pos:end="3934:58"><name pos:start="3934:47" pos:end="3934:58">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3934:61" pos:end="3934:64"><expr pos:start="3934:61" pos:end="3934:64"><name pos:start="3934:61" pos:end="3934:64">arg2</name></expr></argument>, <argument pos:start="3934:67" pos:end="3934:71"><expr pos:start="3934:67" pos:end="3934:71"><name pos:start="3934:67" pos:end="3934:71">count</name></expr></argument>, <argument pos:start="3934:74" pos:end="3934:74"><expr pos:start="3934:74" pos:end="3934:74"><literal type="number" pos:start="3934:74" pos:end="3934:74">0</literal></expr></argument>)</argument_list></call><operator pos:start="3934:76" pos:end="3934:76">)</operator></expr>)</condition><block type="pseudo" pos:start="3936:21" pos:end="3936:32"><block_content pos:start="3936:21" pos:end="3936:32">

                    <goto pos:start="3936:21" pos:end="3936:32">goto <name pos:start="3936:26" pos:end="3936:31">efault</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt pos:start="3938:17" pos:end="3938:34"><expr pos:start="3938:17" pos:end="3938:33"><name pos:start="3938:17" pos:end="3938:19">tde</name> <operator pos:start="3938:21" pos:end="3938:21">=</operator> <name pos:start="3938:23" pos:end="3938:33">target_dirp</name></expr>;</expr_stmt>

                <while pos:start="3940:17" pos:end="3968:17">while <condition pos:start="3940:23" pos:end="3940:31">(<expr pos:start="3940:24" pos:end="3940:30"><name pos:start="3940:24" pos:end="3940:26">len</name> <operator pos:start="3940:28" pos:end="3940:28">&gt;</operator> <literal type="number" pos:start="3940:30" pos:end="3940:30">0</literal></expr>)</condition> <block pos:start="3940:33" pos:end="3968:17">{<block_content pos:start="3942:21" pos:end="3966:38">

                    <expr_stmt pos:start="3942:21" pos:end="3942:42"><expr pos:start="3942:21" pos:end="3942:41"><name pos:start="3942:21" pos:end="3942:26">reclen</name> <operator pos:start="3942:28" pos:end="3942:28">=</operator> <name pos:start="3942:30" pos:end="3942:41"><name pos:start="3942:30" pos:end="3942:31">de</name><operator pos:start="3942:32" pos:end="3942:33">-&gt;</operator><name pos:start="3942:34" pos:end="3942:41">d_reclen</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="3944:21" pos:end="3944:78"><expr pos:start="3944:21" pos:end="3944:77"><name pos:start="3944:21" pos:end="3944:28">tnamelen</name> <operator pos:start="3944:30" pos:end="3944:30">=</operator> <name pos:start="3944:32" pos:end="3944:37">reclen</name> <operator pos:start="3944:39" pos:end="3944:39">-</operator> <call pos:start="3944:41" pos:end="3944:77"><name pos:start="3944:41" pos:end="3944:48">offsetof</name><argument_list pos:start="3944:49" pos:end="3944:77">(<argument pos:start="3944:50" pos:end="3944:68"><expr pos:start="3944:50" pos:end="3944:68">struct <name pos:start="3944:57" pos:end="3944:68">linux_dirent</name></expr></argument>, <argument pos:start="3944:71" pos:end="3944:76"><expr pos:start="3944:71" pos:end="3944:76"><name pos:start="3944:71" pos:end="3944:76">d_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3946:21" pos:end="3946:42"><expr pos:start="3946:21" pos:end="3946:41"><call pos:start="3946:21" pos:end="3946:41"><name pos:start="3946:21" pos:end="3946:26">assert</name><argument_list pos:start="3946:27" pos:end="3946:41">(<argument pos:start="3946:28" pos:end="3946:40"><expr pos:start="3946:28" pos:end="3946:40"><name pos:start="3946:28" pos:end="3946:35">tnamelen</name> <operator pos:start="3946:37" pos:end="3946:38">&gt;=</operator> <literal type="number" pos:start="3946:40" pos:end="3946:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3948:21" pos:end="3948:80"><expr pos:start="3948:21" pos:end="3948:79"><name pos:start="3948:21" pos:end="3948:27">treclen</name> <operator pos:start="3948:29" pos:end="3948:29">=</operator> <name pos:start="3948:31" pos:end="3948:38">tnamelen</name> <operator pos:start="3948:40" pos:end="3948:40">+</operator> <call pos:start="3948:42" pos:end="3948:79"><name pos:start="3948:42" pos:end="3948:49">offsetof</name><argument_list pos:start="3948:50" pos:end="3948:79">(<argument pos:start="3948:51" pos:end="3948:70"><expr pos:start="3948:51" pos:end="3948:70">struct <name pos:start="3948:58" pos:end="3948:70">target_dirent</name></expr></argument>, <argument pos:start="3948:73" pos:end="3948:78"><expr pos:start="3948:73" pos:end="3948:78"><name pos:start="3948:73" pos:end="3948:78">d_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3950:21" pos:end="3950:54"><expr pos:start="3950:21" pos:end="3950:53"><call pos:start="3950:21" pos:end="3950:53"><name pos:start="3950:21" pos:end="3950:26">assert</name><argument_list pos:start="3950:27" pos:end="3950:53">(<argument pos:start="3950:28" pos:end="3950:52"><expr pos:start="3950:28" pos:end="3950:52"><name pos:start="3950:28" pos:end="3950:33">count1</name> <operator pos:start="3950:35" pos:end="3950:35">+</operator> <name pos:start="3950:37" pos:end="3950:43">treclen</name> <operator pos:start="3950:45" pos:end="3950:46">&lt;=</operator> <name pos:start="3950:48" pos:end="3950:52">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3952:21" pos:end="3952:53"><expr pos:start="3952:21" pos:end="3952:52"><name pos:start="3952:21" pos:end="3952:33"><name pos:start="3952:21" pos:end="3952:23">tde</name><operator pos:start="3952:24" pos:end="3952:25">-&gt;</operator><name pos:start="3952:26" pos:end="3952:33">d_reclen</name></name> <operator pos:start="3952:35" pos:end="3952:35">=</operator> <call pos:start="3952:37" pos:end="3952:52"><name pos:start="3952:37" pos:end="3952:43">tswap16</name><argument_list pos:start="3952:44" pos:end="3952:52">(<argument pos:start="3952:45" pos:end="3952:51"><expr pos:start="3952:45" pos:end="3952:51"><name pos:start="3952:45" pos:end="3952:51">treclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3954:21" pos:end="3954:52"><expr pos:start="3954:21" pos:end="3954:51"><name pos:start="3954:21" pos:end="3954:30"><name pos:start="3954:21" pos:end="3954:23">tde</name><operator pos:start="3954:24" pos:end="3954:25">-&gt;</operator><name pos:start="3954:26" pos:end="3954:30">d_ino</name></name> <operator pos:start="3954:32" pos:end="3954:32">=</operator> <call pos:start="3954:34" pos:end="3954:51"><name pos:start="3954:34" pos:end="3954:40">tswapal</name><argument_list pos:start="3954:41" pos:end="3954:51">(<argument pos:start="3954:42" pos:end="3954:50"><expr pos:start="3954:42" pos:end="3954:50"><name pos:start="3954:42" pos:end="3954:50"><name pos:start="3954:42" pos:end="3954:43">de</name><operator pos:start="3954:44" pos:end="3954:45">-&gt;</operator><name pos:start="3954:46" pos:end="3954:50">d_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3956:21" pos:end="3956:52"><expr pos:start="3956:21" pos:end="3956:51"><name pos:start="3956:21" pos:end="3956:30"><name pos:start="3956:21" pos:end="3956:23">tde</name><operator pos:start="3956:24" pos:end="3956:25">-&gt;</operator><name pos:start="3956:26" pos:end="3956:30">d_off</name></name> <operator pos:start="3956:32" pos:end="3956:32">=</operator> <call pos:start="3956:34" pos:end="3956:51"><name pos:start="3956:34" pos:end="3956:40">tswapal</name><argument_list pos:start="3956:41" pos:end="3956:51">(<argument pos:start="3956:42" pos:end="3956:50"><expr pos:start="3956:42" pos:end="3956:50"><name pos:start="3956:42" pos:end="3956:50"><name pos:start="3956:42" pos:end="3956:43">de</name><operator pos:start="3956:44" pos:end="3956:45">-&gt;</operator><name pos:start="3956:46" pos:end="3956:50">d_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3958:21" pos:end="3958:62"><expr pos:start="3958:21" pos:end="3958:61"><call pos:start="3958:21" pos:end="3958:61"><name pos:start="3958:21" pos:end="3958:26">memcpy</name><argument_list pos:start="3958:27" pos:end="3958:61">(<argument pos:start="3958:28" pos:end="3958:38"><expr pos:start="3958:28" pos:end="3958:38"><name pos:start="3958:28" pos:end="3958:38"><name pos:start="3958:28" pos:end="3958:30">tde</name><operator pos:start="3958:31" pos:end="3958:32">-&gt;</operator><name pos:start="3958:33" pos:end="3958:38">d_name</name></name></expr></argument>, <argument pos:start="3958:41" pos:end="3958:50"><expr pos:start="3958:41" pos:end="3958:50"><name pos:start="3958:41" pos:end="3958:50"><name pos:start="3958:41" pos:end="3958:42">de</name><operator pos:start="3958:43" pos:end="3958:44">-&gt;</operator><name pos:start="3958:45" pos:end="3958:50">d_name</name></name></expr></argument>, <argument pos:start="3958:53" pos:end="3958:60"><expr pos:start="3958:53" pos:end="3958:60"><name pos:start="3958:53" pos:end="3958:60">tnamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3960:21" pos:end="3960:70"><expr pos:start="3960:21" pos:end="3960:69"><name pos:start="3960:21" pos:end="3960:22">de</name> <operator pos:start="3960:24" pos:end="3960:24">=</operator> <operator pos:start="3960:26" pos:end="3960:26">(</operator>struct <name pos:start="3960:34" pos:end="3960:45">linux_dirent</name> <operator pos:start="3960:47" pos:end="3960:47">*</operator><operator pos:start="3960:48" pos:end="3960:48">)</operator><operator pos:start="3960:49" pos:end="3960:49">(</operator><operator pos:start="3960:50" pos:end="3960:50">(</operator><name pos:start="3960:51" pos:end="3960:54">char</name> <operator pos:start="3960:56" pos:end="3960:56">*</operator><operator pos:start="3960:57" pos:end="3960:57">)</operator><name pos:start="3960:58" pos:end="3960:59">de</name> <operator pos:start="3960:61" pos:end="3960:61">+</operator> <name pos:start="3960:63" pos:end="3960:68">reclen</name><operator pos:start="3960:69" pos:end="3960:69">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="3962:21" pos:end="3962:34"><expr pos:start="3962:21" pos:end="3962:33"><name pos:start="3962:21" pos:end="3962:23">len</name> <operator pos:start="3962:25" pos:end="3962:26">-=</operator> <name pos:start="3962:28" pos:end="3962:33">reclen</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="3964:21" pos:end="3964:74"><expr pos:start="3964:21" pos:end="3964:73"><name pos:start="3964:21" pos:end="3964:23">tde</name> <operator pos:start="3964:25" pos:end="3964:25">=</operator> <operator pos:start="3964:27" pos:end="3964:27">(</operator>struct <name pos:start="3964:35" pos:end="3964:47">target_dirent</name> <operator pos:start="3964:49" pos:end="3964:49">*</operator><operator pos:start="3964:50" pos:end="3964:50">)</operator><operator pos:start="3964:51" pos:end="3964:51">(</operator><operator pos:start="3964:52" pos:end="3964:52">(</operator><name pos:start="3964:53" pos:end="3964:56">char</name> <operator pos:start="3964:58" pos:end="3964:58">*</operator><operator pos:start="3964:59" pos:end="3964:59">)</operator><name pos:start="3964:60" pos:end="3964:62">tde</name> <operator pos:start="3964:64" pos:end="3964:64">+</operator> <name pos:start="3964:66" pos:end="3964:72">treclen</name><operator pos:start="3964:73" pos:end="3964:73">)</operator></expr>;</expr_stmt>

		    <expr_stmt pos:start="3966:21" pos:end="3966:38"><expr pos:start="3966:21" pos:end="3966:37"><name pos:start="3966:21" pos:end="3966:26">count1</name> <operator pos:start="3966:28" pos:end="3966:29">+=</operator> <name pos:start="3966:31" pos:end="3966:37">treclen</name></expr>;</expr_stmt>

                </block_content>}</block></while>

		<expr_stmt pos:start="3970:17" pos:end="3970:29"><expr pos:start="3970:17" pos:end="3970:28"><name pos:start="3970:17" pos:end="3970:19">ret</name> <operator pos:start="3970:21" pos:end="3970:21">=</operator> <name pos:start="3970:23" pos:end="3970:28">count1</name></expr>;</expr_stmt>

                <expr_stmt pos:start="3972:17" pos:end="3972:52"><expr pos:start="3972:17" pos:end="3972:51"><call pos:start="3972:17" pos:end="3972:51"><name pos:start="3972:17" pos:end="3972:27">unlock_user</name><argument_list pos:start="3972:28" pos:end="3972:51">(<argument pos:start="3972:29" pos:end="3972:39"><expr pos:start="3972:29" pos:end="3972:39"><name pos:start="3972:29" pos:end="3972:39">target_dirp</name></expr></argument>, <argument pos:start="3972:42" pos:end="3972:45"><expr pos:start="3972:42" pos:end="3972:45"><name pos:start="3972:42" pos:end="3972:45">arg2</name></expr></argument>, <argument pos:start="3972:48" pos:end="3972:50"><expr pos:start="3972:48" pos:end="3972:50"><name pos:start="3972:48" pos:end="3972:50">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="3976:13" pos:end="3976:23"><expr pos:start="3976:13" pos:end="3976:22"><call pos:start="3976:13" pos:end="3976:22"><name pos:start="3976:13" pos:end="3976:16">free</name><argument_list pos:start="3976:17" pos:end="3976:22">(<argument pos:start="3976:18" pos:end="3976:21"><expr pos:start="3976:18" pos:end="3976:21"><name pos:start="3976:18" pos:end="3976:21">dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:else pos:start="3980:1" pos:end="3980:5">#<cpp:directive pos:start="3980:2" pos:end="3980:5">else</cpp:directive></cpp:else>

        <block pos:start="3982:9" pos:end="4035:0">{<block_content pos:start="3984:13" pos:end="4028:41">

            <decl_stmt pos:start="3984:13" pos:end="3984:38"><decl pos:start="3984:13" pos:end="3984:37"><type pos:start="3984:13" pos:end="3984:33"><name pos:start="3984:13" pos:end="3984:31"><name pos:start="3984:13" pos:end="3984:18">struct</name> <name pos:start="3984:20" pos:end="3984:31">linux_dirent</name></name> <modifier pos:start="3984:33" pos:end="3984:33">*</modifier></type><name pos:start="3984:34" pos:end="3984:37">dirp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="3986:13" pos:end="3986:34"><decl pos:start="3986:13" pos:end="3986:33"><type pos:start="3986:13" pos:end="3986:20"><name pos:start="3986:13" pos:end="3986:20">abi_long</name></type> <name pos:start="3986:22" pos:end="3986:26">count</name> <init pos:start="3986:28" pos:end="3986:33">= <expr pos:start="3986:30" pos:end="3986:33"><name pos:start="3986:30" pos:end="3986:33">arg3</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="3990:13" pos:end="3992:28"><if pos:start="3990:13" pos:end="3992:28">if <condition pos:start="3990:16" pos:end="3990:66">(<expr pos:start="3990:17" pos:end="3990:65"><operator pos:start="3990:17" pos:end="3990:17">!</operator><operator pos:start="3990:18" pos:end="3990:18">(</operator><name pos:start="3990:19" pos:end="3990:22">dirp</name> <operator pos:start="3990:24" pos:end="3990:24">=</operator> <call pos:start="3990:26" pos:end="3990:64"><name pos:start="3990:26" pos:end="3990:34">lock_user</name><argument_list pos:start="3990:35" pos:end="3990:64">(<argument pos:start="3990:36" pos:end="3990:47"><expr pos:start="3990:36" pos:end="3990:47"><name pos:start="3990:36" pos:end="3990:47">VERIFY_WRITE</name></expr></argument>, <argument pos:start="3990:50" pos:end="3990:53"><expr pos:start="3990:50" pos:end="3990:53"><name pos:start="3990:50" pos:end="3990:53">arg2</name></expr></argument>, <argument pos:start="3990:56" pos:end="3990:60"><expr pos:start="3990:56" pos:end="3990:60"><name pos:start="3990:56" pos:end="3990:60">count</name></expr></argument>, <argument pos:start="3990:63" pos:end="3990:63"><expr pos:start="3990:63" pos:end="3990:63"><literal type="number" pos:start="3990:63" pos:end="3990:63">0</literal></expr></argument>)</argument_list></call><operator pos:start="3990:65" pos:end="3990:65">)</operator></expr>)</condition><block type="pseudo" pos:start="3992:17" pos:end="3992:28"><block_content pos:start="3992:17" pos:end="3992:28">

                <goto pos:start="3992:17" pos:end="3992:28">goto <name pos:start="3992:22" pos:end="3992:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3994:13" pos:end="3994:61"><expr pos:start="3994:13" pos:end="3994:60"><name pos:start="3994:13" pos:end="3994:15">ret</name> <operator pos:start="3994:17" pos:end="3994:17">=</operator> <call pos:start="3994:19" pos:end="3994:60"><name pos:start="3994:19" pos:end="3994:27">get_errno</name><argument_list pos:start="3994:28" pos:end="3994:60">(<argument pos:start="3994:29" pos:end="3994:59"><expr pos:start="3994:29" pos:end="3994:59"><call pos:start="3994:29" pos:end="3994:59"><name pos:start="3994:29" pos:end="3994:40">sys_getdents</name><argument_list pos:start="3994:41" pos:end="3994:59">(<argument pos:start="3994:42" pos:end="3994:45"><expr pos:start="3994:42" pos:end="3994:45"><name pos:start="3994:42" pos:end="3994:45">arg1</name></expr></argument>, <argument pos:start="3994:48" pos:end="3994:51"><expr pos:start="3994:48" pos:end="3994:51"><name pos:start="3994:48" pos:end="3994:51">dirp</name></expr></argument>, <argument pos:start="3994:54" pos:end="3994:58"><expr pos:start="3994:54" pos:end="3994:58"><name pos:start="3994:54" pos:end="3994:58">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3996:13" pos:end="4026:13"><if pos:start="3996:13" pos:end="4026:13">if <condition pos:start="3996:16" pos:end="3996:31">(<expr pos:start="3996:17" pos:end="3996:30"><operator pos:start="3996:17" pos:end="3996:17">!</operator><call pos:start="3996:18" pos:end="3996:30"><name pos:start="3996:18" pos:end="3996:25">is_error</name><argument_list pos:start="3996:26" pos:end="3996:30">(<argument pos:start="3996:27" pos:end="3996:29"><expr pos:start="3996:27" pos:end="3996:29"><name pos:start="3996:27" pos:end="3996:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3996:33" pos:end="4026:13">{<block_content pos:start="3998:17" pos:end="4024:17">

                <decl_stmt pos:start="3998:17" pos:end="3998:40"><decl pos:start="3998:17" pos:end="3998:39"><type pos:start="3998:17" pos:end="3998:37"><name pos:start="3998:17" pos:end="3998:35"><name pos:start="3998:17" pos:end="3998:22">struct</name> <name pos:start="3998:24" pos:end="3998:35">linux_dirent</name></name> <modifier pos:start="3998:37" pos:end="3998:37">*</modifier></type><name pos:start="3998:38" pos:end="3998:39">de</name></decl>;</decl_stmt>

                <decl_stmt pos:start="4000:17" pos:end="4000:30"><decl pos:start="4000:17" pos:end="4000:29"><type pos:start="4000:17" pos:end="4000:19"><name pos:start="4000:17" pos:end="4000:19">int</name></type> <name pos:start="4000:21" pos:end="4000:23">len</name> <init pos:start="4000:25" pos:end="4000:29">= <expr pos:start="4000:27" pos:end="4000:29"><name pos:start="4000:27" pos:end="4000:29">ret</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="4002:17" pos:end="4002:27"><decl pos:start="4002:17" pos:end="4002:26"><type pos:start="4002:17" pos:end="4002:19"><name pos:start="4002:17" pos:end="4002:19">int</name></type> <name pos:start="4002:21" pos:end="4002:26">reclen</name></decl>;</decl_stmt>

                <expr_stmt pos:start="4004:17" pos:end="4004:26"><expr pos:start="4004:17" pos:end="4004:25"><name pos:start="4004:17" pos:end="4004:18">de</name> <operator pos:start="4004:20" pos:end="4004:20">=</operator> <name pos:start="4004:22" pos:end="4004:25">dirp</name></expr>;</expr_stmt>

                <while pos:start="4006:17" pos:end="4024:17">while <condition pos:start="4006:23" pos:end="4006:31">(<expr pos:start="4006:24" pos:end="4006:30"><name pos:start="4006:24" pos:end="4006:26">len</name> <operator pos:start="4006:28" pos:end="4006:28">&gt;</operator> <literal type="number" pos:start="4006:30" pos:end="4006:30">0</literal></expr>)</condition> <block pos:start="4006:33" pos:end="4024:17">{<block_content pos:start="4008:21" pos:end="4022:34">

                    <expr_stmt pos:start="4008:21" pos:end="4008:42"><expr pos:start="4008:21" pos:end="4008:41"><name pos:start="4008:21" pos:end="4008:26">reclen</name> <operator pos:start="4008:28" pos:end="4008:28">=</operator> <name pos:start="4008:30" pos:end="4008:41"><name pos:start="4008:30" pos:end="4008:31">de</name><operator pos:start="4008:32" pos:end="4008:33">-&gt;</operator><name pos:start="4008:34" pos:end="4008:41">d_reclen</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="4010:21" pos:end="4012:30"><if pos:start="4010:21" pos:end="4012:30">if <condition pos:start="4010:24" pos:end="4010:37">(<expr pos:start="4010:25" pos:end="4010:36"><name pos:start="4010:25" pos:end="4010:30">reclen</name> <operator pos:start="4010:32" pos:end="4010:32">&gt;</operator> <name pos:start="4010:34" pos:end="4010:36">len</name></expr>)</condition><block type="pseudo" pos:start="4012:25" pos:end="4012:30"><block_content pos:start="4012:25" pos:end="4012:30">

                        <break pos:start="4012:25" pos:end="4012:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="4014:21" pos:end="4014:51"><expr pos:start="4014:21" pos:end="4014:50"><name pos:start="4014:21" pos:end="4014:32"><name pos:start="4014:21" pos:end="4014:22">de</name><operator pos:start="4014:23" pos:end="4014:24">-&gt;</operator><name pos:start="4014:25" pos:end="4014:32">d_reclen</name></name> <operator pos:start="4014:34" pos:end="4014:34">=</operator> <call pos:start="4014:36" pos:end="4014:50"><name pos:start="4014:36" pos:end="4014:42">tswap16</name><argument_list pos:start="4014:43" pos:end="4014:50">(<argument pos:start="4014:44" pos:end="4014:49"><expr pos:start="4014:44" pos:end="4014:49"><name pos:start="4014:44" pos:end="4014:49">reclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4016:21" pos:end="4016:40"><expr pos:start="4016:21" pos:end="4016:39"><call pos:start="4016:21" pos:end="4016:39"><name pos:start="4016:21" pos:end="4016:27">tswapls</name><argument_list pos:start="4016:28" pos:end="4016:39">(<argument pos:start="4016:29" pos:end="4016:38"><expr pos:start="4016:29" pos:end="4016:38"><operator pos:start="4016:29" pos:end="4016:29">&amp;</operator><name pos:start="4016:30" pos:end="4016:38"><name pos:start="4016:30" pos:end="4016:31">de</name><operator pos:start="4016:32" pos:end="4016:33">-&gt;</operator><name pos:start="4016:34" pos:end="4016:38">d_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4018:21" pos:end="4018:40"><expr pos:start="4018:21" pos:end="4018:39"><call pos:start="4018:21" pos:end="4018:39"><name pos:start="4018:21" pos:end="4018:27">tswapls</name><argument_list pos:start="4018:28" pos:end="4018:39">(<argument pos:start="4018:29" pos:end="4018:38"><expr pos:start="4018:29" pos:end="4018:38"><operator pos:start="4018:29" pos:end="4018:29">&amp;</operator><name pos:start="4018:30" pos:end="4018:38"><name pos:start="4018:30" pos:end="4018:31">de</name><operator pos:start="4018:32" pos:end="4018:33">-&gt;</operator><name pos:start="4018:34" pos:end="4018:38">d_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4020:21" pos:end="4020:70"><expr pos:start="4020:21" pos:end="4020:69"><name pos:start="4020:21" pos:end="4020:22">de</name> <operator pos:start="4020:24" pos:end="4020:24">=</operator> <operator pos:start="4020:26" pos:end="4020:26">(</operator>struct <name pos:start="4020:34" pos:end="4020:45">linux_dirent</name> <operator pos:start="4020:47" pos:end="4020:47">*</operator><operator pos:start="4020:48" pos:end="4020:48">)</operator><operator pos:start="4020:49" pos:end="4020:49">(</operator><operator pos:start="4020:50" pos:end="4020:50">(</operator><name pos:start="4020:51" pos:end="4020:54">char</name> <operator pos:start="4020:56" pos:end="4020:56">*</operator><operator pos:start="4020:57" pos:end="4020:57">)</operator><name pos:start="4020:58" pos:end="4020:59">de</name> <operator pos:start="4020:61" pos:end="4020:61">+</operator> <name pos:start="4020:63" pos:end="4020:68">reclen</name><operator pos:start="4020:69" pos:end="4020:69">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="4022:21" pos:end="4022:34"><expr pos:start="4022:21" pos:end="4022:33"><name pos:start="4022:21" pos:end="4022:23">len</name> <operator pos:start="4022:25" pos:end="4022:26">-=</operator> <name pos:start="4022:28" pos:end="4022:33">reclen</name></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4028:13" pos:end="4028:41"><expr pos:start="4028:13" pos:end="4028:40"><call pos:start="4028:13" pos:end="4028:40"><name pos:start="4028:13" pos:end="4028:23">unlock_user</name><argument_list pos:start="4028:24" pos:end="4028:40">(<argument pos:start="4028:25" pos:end="4028:28"><expr pos:start="4028:25" pos:end="4028:28"><name pos:start="4028:25" pos:end="4028:28">dirp</name></expr></argument>, <argument pos:start="4028:31" pos:end="4028:34"><expr pos:start="4028:31" pos:end="4028:34"><name pos:start="4028:31" pos:end="4028:34">arg2</name></expr></argument>, <argument pos:start="4028:37" pos:end="4028:39"><expr pos:start="4028:37" pos:end="4028:39"><name pos:start="4028:37" pos:end="4028:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:endif pos:start="4032:1" pos:end="4032:6">#<cpp:directive pos:start="4032:2" pos:end="4032:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="4034:1" pos:end="4034:5">#<cpp:directive pos:start="4034:2" pos:end="4034:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="4036:9" pos:end="4036:55">/* Implement getdents in terms of getdents64 */</comment>

        <block pos:start="4038:9" pos:end="4143:0">{<block_content pos:start="4040:13" pos:end="4138:41">

            <decl_stmt pos:start="4040:13" pos:end="4040:40"><decl pos:start="4040:13" pos:end="4040:39"><type pos:start="4040:13" pos:end="4040:35"><name pos:start="4040:13" pos:end="4040:33"><name pos:start="4040:13" pos:end="4040:18">struct</name> <name pos:start="4040:20" pos:end="4040:33">linux_dirent64</name></name> <modifier pos:start="4040:35" pos:end="4040:35">*</modifier></type><name pos:start="4040:36" pos:end="4040:39">dirp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4042:13" pos:end="4042:34"><decl pos:start="4042:13" pos:end="4042:33"><type pos:start="4042:13" pos:end="4042:20"><name pos:start="4042:13" pos:end="4042:20">abi_long</name></type> <name pos:start="4042:22" pos:end="4042:26">count</name> <init pos:start="4042:28" pos:end="4042:33">= <expr pos:start="4042:30" pos:end="4042:33"><name pos:start="4042:30" pos:end="4042:33">arg3</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="4046:13" pos:end="4046:59"><expr pos:start="4046:13" pos:end="4046:58"><name pos:start="4046:13" pos:end="4046:16">dirp</name> <operator pos:start="4046:18" pos:end="4046:18">=</operator> <call pos:start="4046:20" pos:end="4046:58"><name pos:start="4046:20" pos:end="4046:28">lock_user</name><argument_list pos:start="4046:29" pos:end="4046:58">(<argument pos:start="4046:30" pos:end="4046:41"><expr pos:start="4046:30" pos:end="4046:41"><name pos:start="4046:30" pos:end="4046:41">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4046:44" pos:end="4046:47"><expr pos:start="4046:44" pos:end="4046:47"><name pos:start="4046:44" pos:end="4046:47">arg2</name></expr></argument>, <argument pos:start="4046:50" pos:end="4046:54"><expr pos:start="4046:50" pos:end="4046:54"><name pos:start="4046:50" pos:end="4046:54">count</name></expr></argument>, <argument pos:start="4046:57" pos:end="4046:57"><expr pos:start="4046:57" pos:end="4046:57"><literal type="number" pos:start="4046:57" pos:end="4046:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4048:13" pos:end="4052:13"><if pos:start="4048:13" pos:end="4052:13">if <condition pos:start="4048:16" pos:end="4048:22">(<expr pos:start="4048:17" pos:end="4048:21"><operator pos:start="4048:17" pos:end="4048:17">!</operator><name pos:start="4048:18" pos:end="4048:21">dirp</name></expr>)</condition> <block pos:start="4048:24" pos:end="4052:13">{<block_content pos:start="4050:17" pos:end="4050:28">

                <goto pos:start="4050:17" pos:end="4050:28">goto <name pos:start="4050:22" pos:end="4050:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4054:13" pos:end="4054:63"><expr pos:start="4054:13" pos:end="4054:62"><name pos:start="4054:13" pos:end="4054:15">ret</name> <operator pos:start="4054:17" pos:end="4054:17">=</operator> <call pos:start="4054:19" pos:end="4054:62"><name pos:start="4054:19" pos:end="4054:27">get_errno</name><argument_list pos:start="4054:28" pos:end="4054:62">(<argument pos:start="4054:29" pos:end="4054:61"><expr pos:start="4054:29" pos:end="4054:61"><call pos:start="4054:29" pos:end="4054:61"><name pos:start="4054:29" pos:end="4054:42">sys_getdents64</name><argument_list pos:start="4054:43" pos:end="4054:61">(<argument pos:start="4054:44" pos:end="4054:47"><expr pos:start="4054:44" pos:end="4054:47"><name pos:start="4054:44" pos:end="4054:47">arg1</name></expr></argument>, <argument pos:start="4054:50" pos:end="4054:53"><expr pos:start="4054:50" pos:end="4054:53"><name pos:start="4054:50" pos:end="4054:53">dirp</name></expr></argument>, <argument pos:start="4054:56" pos:end="4054:60"><expr pos:start="4054:56" pos:end="4054:60"><name pos:start="4054:56" pos:end="4054:60">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4056:13" pos:end="4136:13"><if pos:start="4056:13" pos:end="4136:13">if <condition pos:start="4056:16" pos:end="4056:31">(<expr pos:start="4056:17" pos:end="4056:30"><operator pos:start="4056:17" pos:end="4056:17">!</operator><call pos:start="4056:18" pos:end="4056:30"><name pos:start="4056:18" pos:end="4056:25">is_error</name><argument_list pos:start="4056:26" pos:end="4056:30">(<argument pos:start="4056:27" pos:end="4056:29"><expr pos:start="4056:27" pos:end="4056:29"><name pos:start="4056:27" pos:end="4056:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4056:33" pos:end="4136:13">{<block_content pos:start="4068:17" pos:end="4134:27">

                <comment type="block" pos:start="4058:17" pos:end="4066:19">/* Convert the dirent64 structs to target dirent.  We do this

                 * in-place, since we can guarantee that a target_dirent is no

                 * larger than a dirent64; however this means we have to be

                 * careful to read everything before writing in the new format.

                 */</comment>

                <decl_stmt pos:start="4068:17" pos:end="4068:42"><decl pos:start="4068:17" pos:end="4068:41"><type pos:start="4068:17" pos:end="4068:39"><name pos:start="4068:17" pos:end="4068:37"><name pos:start="4068:17" pos:end="4068:22">struct</name> <name pos:start="4068:24" pos:end="4068:37">linux_dirent64</name></name> <modifier pos:start="4068:39" pos:end="4068:39">*</modifier></type><name pos:start="4068:40" pos:end="4068:41">de</name></decl>;</decl_stmt>

                <decl_stmt pos:start="4070:17" pos:end="4070:42"><decl pos:start="4070:17" pos:end="4070:41"><type pos:start="4070:17" pos:end="4070:38"><name pos:start="4070:17" pos:end="4070:36"><name pos:start="4070:17" pos:end="4070:22">struct</name> <name pos:start="4070:24" pos:end="4070:36">target_dirent</name></name> <modifier pos:start="4070:38" pos:end="4070:38">*</modifier></type><name pos:start="4070:39" pos:end="4070:41">tde</name></decl>;</decl_stmt>

                <decl_stmt pos:start="4072:17" pos:end="4072:30"><decl pos:start="4072:17" pos:end="4072:29"><type pos:start="4072:17" pos:end="4072:19"><name pos:start="4072:17" pos:end="4072:19">int</name></type> <name pos:start="4072:21" pos:end="4072:23">len</name> <init pos:start="4072:25" pos:end="4072:29">= <expr pos:start="4072:27" pos:end="4072:29"><name pos:start="4072:27" pos:end="4072:29">ret</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="4074:17" pos:end="4074:29"><decl pos:start="4074:17" pos:end="4074:28"><type pos:start="4074:17" pos:end="4074:19"><name pos:start="4074:17" pos:end="4074:19">int</name></type> <name pos:start="4074:21" pos:end="4074:24">tlen</name> <init pos:start="4074:26" pos:end="4074:28">= <expr pos:start="4074:28" pos:end="4074:28"><literal type="number" pos:start="4074:28" pos:end="4074:28">0</literal></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="4078:17" pos:end="4078:26"><expr pos:start="4078:17" pos:end="4078:25"><name pos:start="4078:17" pos:end="4078:18">de</name> <operator pos:start="4078:20" pos:end="4078:20">=</operator> <name pos:start="4078:22" pos:end="4078:25">dirp</name></expr>;</expr_stmt>

                <expr_stmt pos:start="4080:17" pos:end="4080:51"><expr pos:start="4080:17" pos:end="4080:50"><name pos:start="4080:17" pos:end="4080:19">tde</name> <operator pos:start="4080:21" pos:end="4080:21">=</operator> <operator pos:start="4080:23" pos:end="4080:23">(</operator>struct <name pos:start="4080:31" pos:end="4080:43">target_dirent</name> <operator pos:start="4080:45" pos:end="4080:45">*</operator><operator pos:start="4080:46" pos:end="4080:46">)</operator><name pos:start="4080:47" pos:end="4080:50">dirp</name></expr>;</expr_stmt>

                <while pos:start="4082:17" pos:end="4132:17">while <condition pos:start="4082:23" pos:end="4082:31">(<expr pos:start="4082:24" pos:end="4082:30"><name pos:start="4082:24" pos:end="4082:26">len</name> <operator pos:start="4082:28" pos:end="4082:28">&gt;</operator> <literal type="number" pos:start="4082:30" pos:end="4082:30">0</literal></expr>)</condition> <block pos:start="4082:33" pos:end="4132:17">{<block_content pos:start="4084:21" pos:end="4130:36">

                    <decl_stmt pos:start="4084:21" pos:end="4084:41"><decl pos:start="4084:21" pos:end="4084:31"><type pos:start="4084:21" pos:end="4084:23"><name pos:start="4084:21" pos:end="4084:23">int</name></type> <name pos:start="4084:25" pos:end="4084:31">namelen</name></decl>, <decl pos:start="4084:34" pos:end="4084:40"><type ref="prev" pos:start="4084:21" pos:end="4084:23"/><name pos:start="4084:34" pos:end="4084:40">treclen</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="4086:21" pos:end="4086:46"><decl pos:start="4086:21" pos:end="4086:45"><type pos:start="4086:21" pos:end="4086:23"><name pos:start="4086:21" pos:end="4086:23">int</name></type> <name pos:start="4086:25" pos:end="4086:30">reclen</name> <init pos:start="4086:32" pos:end="4086:45">= <expr pos:start="4086:34" pos:end="4086:45"><name pos:start="4086:34" pos:end="4086:45"><name pos:start="4086:34" pos:end="4086:35">de</name><operator pos:start="4086:36" pos:end="4086:37">-&gt;</operator><name pos:start="4086:38" pos:end="4086:45">d_reclen</name></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="4088:21" pos:end="4088:45"><decl pos:start="4088:21" pos:end="4088:44"><type pos:start="4088:21" pos:end="4088:28"><name pos:start="4088:21" pos:end="4088:28">uint64_t</name></type> <name pos:start="4088:30" pos:end="4088:32">ino</name> <init pos:start="4088:34" pos:end="4088:44">= <expr pos:start="4088:36" pos:end="4088:44"><name pos:start="4088:36" pos:end="4088:44"><name pos:start="4088:36" pos:end="4088:37">de</name><operator pos:start="4088:38" pos:end="4088:39">-&gt;</operator><name pos:start="4088:40" pos:end="4088:44">d_ino</name></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="4090:21" pos:end="4090:44"><decl pos:start="4090:21" pos:end="4090:43"><type pos:start="4090:21" pos:end="4090:27"><name pos:start="4090:21" pos:end="4090:27">int64_t</name></type> <name pos:start="4090:29" pos:end="4090:31">off</name> <init pos:start="4090:33" pos:end="4090:43">= <expr pos:start="4090:35" pos:end="4090:43"><name pos:start="4090:35" pos:end="4090:43"><name pos:start="4090:35" pos:end="4090:36">de</name><operator pos:start="4090:37" pos:end="4090:38">-&gt;</operator><name pos:start="4090:39" pos:end="4090:43">d_off</name></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="4092:21" pos:end="4092:46"><decl pos:start="4092:21" pos:end="4092:45"><type pos:start="4092:21" pos:end="4092:27"><name pos:start="4092:21" pos:end="4092:27">uint8_t</name></type> <name pos:start="4092:29" pos:end="4092:32">type</name> <init pos:start="4092:34" pos:end="4092:45">= <expr pos:start="4092:36" pos:end="4092:45"><name pos:start="4092:36" pos:end="4092:45"><name pos:start="4092:36" pos:end="4092:37">de</name><operator pos:start="4092:38" pos:end="4092:39">-&gt;</operator><name pos:start="4092:40" pos:end="4092:45">d_type</name></name></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="4096:21" pos:end="4096:49"><expr pos:start="4096:21" pos:end="4096:48"><name pos:start="4096:21" pos:end="4096:27">namelen</name> <operator pos:start="4096:29" pos:end="4096:29">=</operator> <call pos:start="4096:31" pos:end="4096:48"><name pos:start="4096:31" pos:end="4096:36">strlen</name><argument_list pos:start="4096:37" pos:end="4096:48">(<argument pos:start="4096:38" pos:end="4096:47"><expr pos:start="4096:38" pos:end="4096:47"><name pos:start="4096:38" pos:end="4096:47"><name pos:start="4096:38" pos:end="4096:39">de</name><operator pos:start="4096:40" pos:end="4096:41">-&gt;</operator><name pos:start="4096:42" pos:end="4096:47">d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4098:21" pos:end="4100:38"><expr pos:start="4098:21" pos:end="4100:37"><name pos:start="4098:21" pos:end="4098:27">treclen</name> <operator pos:start="4098:29" pos:end="4098:29">=</operator> <call pos:start="4098:31" pos:end="4098:68"><name pos:start="4098:31" pos:end="4098:38">offsetof</name><argument_list pos:start="4098:39" pos:end="4098:68">(<argument pos:start="4098:40" pos:end="4098:59"><expr pos:start="4098:40" pos:end="4098:59">struct <name pos:start="4098:47" pos:end="4098:59">target_dirent</name></expr></argument>, <argument pos:start="4098:62" pos:end="4098:67"><expr pos:start="4098:62" pos:end="4098:67"><name pos:start="4098:62" pos:end="4098:67">d_name</name></expr></argument>)</argument_list></call>

                        <operator pos:start="4100:25" pos:end="4100:25">+</operator> <name pos:start="4100:27" pos:end="4100:33">namelen</name> <operator pos:start="4100:35" pos:end="4100:35">+</operator> <literal type="number" pos:start="4100:37" pos:end="4100:37">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="4102:21" pos:end="4102:71"><expr pos:start="4102:21" pos:end="4102:70"><name pos:start="4102:21" pos:end="4102:27">treclen</name> <operator pos:start="4102:29" pos:end="4102:29">=</operator> <call pos:start="4102:31" pos:end="4102:70"><name pos:start="4102:31" pos:end="4102:43">QEMU_ALIGN_UP</name><argument_list pos:start="4102:44" pos:end="4102:70">(<argument pos:start="4102:45" pos:end="4102:51"><expr pos:start="4102:45" pos:end="4102:51"><name pos:start="4102:45" pos:end="4102:51">treclen</name></expr></argument>, <argument pos:start="4102:54" pos:end="4102:69"><expr pos:start="4102:54" pos:end="4102:69"><sizeof pos:start="4102:54" pos:end="4102:69">sizeof<argument_list pos:start="4102:60" pos:end="4102:69">(<argument pos:start="4102:61" pos:end="4102:68"><expr pos:start="4102:61" pos:end="4102:68"><name pos:start="4102:61" pos:end="4102:68">abi_long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="4106:21" pos:end="4106:66"><expr pos:start="4106:21" pos:end="4106:65"><call pos:start="4106:21" pos:end="4106:65"><name pos:start="4106:21" pos:end="4106:27">memmove</name><argument_list pos:start="4106:28" pos:end="4106:65">(<argument pos:start="4106:29" pos:end="4106:39"><expr pos:start="4106:29" pos:end="4106:39"><name pos:start="4106:29" pos:end="4106:39"><name pos:start="4106:29" pos:end="4106:31">tde</name><operator pos:start="4106:32" pos:end="4106:33">-&gt;</operator><name pos:start="4106:34" pos:end="4106:39">d_name</name></name></expr></argument>, <argument pos:start="4106:42" pos:end="4106:51"><expr pos:start="4106:42" pos:end="4106:51"><name pos:start="4106:42" pos:end="4106:51"><name pos:start="4106:42" pos:end="4106:43">de</name><operator pos:start="4106:44" pos:end="4106:45">-&gt;</operator><name pos:start="4106:46" pos:end="4106:51">d_name</name></name></expr></argument>, <argument pos:start="4106:54" pos:end="4106:64"><expr pos:start="4106:54" pos:end="4106:64"><name pos:start="4106:54" pos:end="4106:60">namelen</name> <operator pos:start="4106:62" pos:end="4106:62">+</operator> <literal type="number" pos:start="4106:64" pos:end="4106:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4108:21" pos:end="4108:46"><expr pos:start="4108:21" pos:end="4108:45"><name pos:start="4108:21" pos:end="4108:30"><name pos:start="4108:21" pos:end="4108:23">tde</name><operator pos:start="4108:24" pos:end="4108:25">-&gt;</operator><name pos:start="4108:26" pos:end="4108:30">d_ino</name></name> <operator pos:start="4108:32" pos:end="4108:32">=</operator> <call pos:start="4108:34" pos:end="4108:45"><name pos:start="4108:34" pos:end="4108:40">tswapal</name><argument_list pos:start="4108:41" pos:end="4108:45">(<argument pos:start="4108:42" pos:end="4108:44"><expr pos:start="4108:42" pos:end="4108:44"><name pos:start="4108:42" pos:end="4108:44">ino</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4110:21" pos:end="4110:46"><expr pos:start="4110:21" pos:end="4110:45"><name pos:start="4110:21" pos:end="4110:30"><name pos:start="4110:21" pos:end="4110:23">tde</name><operator pos:start="4110:24" pos:end="4110:25">-&gt;</operator><name pos:start="4110:26" pos:end="4110:30">d_off</name></name> <operator pos:start="4110:32" pos:end="4110:32">=</operator> <call pos:start="4110:34" pos:end="4110:45"><name pos:start="4110:34" pos:end="4110:40">tswapal</name><argument_list pos:start="4110:41" pos:end="4110:45">(<argument pos:start="4110:42" pos:end="4110:44"><expr pos:start="4110:42" pos:end="4110:44"><name pos:start="4110:42" pos:end="4110:44">off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4112:21" pos:end="4112:53"><expr pos:start="4112:21" pos:end="4112:52"><name pos:start="4112:21" pos:end="4112:33"><name pos:start="4112:21" pos:end="4112:23">tde</name><operator pos:start="4112:24" pos:end="4112:25">-&gt;</operator><name pos:start="4112:26" pos:end="4112:33">d_reclen</name></name> <operator pos:start="4112:35" pos:end="4112:35">=</operator> <call pos:start="4112:37" pos:end="4112:52"><name pos:start="4112:37" pos:end="4112:43">tswap16</name><argument_list pos:start="4112:44" pos:end="4112:52">(<argument pos:start="4112:45" pos:end="4112:51"><expr pos:start="4112:45" pos:end="4112:51"><name pos:start="4112:45" pos:end="4112:51">treclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="4114:21" pos:end="4118:23">/* The target_dirent type is in what was formerly a padding

                     * byte at the end of the structure:

                     */</comment>

                    <expr_stmt pos:start="4120:21" pos:end="4120:58"><expr pos:start="4120:21" pos:end="4120:57"><operator pos:start="4120:21" pos:end="4120:21">*</operator><operator pos:start="4120:22" pos:end="4120:22">(</operator><operator pos:start="4120:23" pos:end="4120:23">(</operator><operator pos:start="4120:24" pos:end="4120:24">(</operator><name pos:start="4120:25" pos:end="4120:28">char</name> <operator pos:start="4120:30" pos:end="4120:30">*</operator><operator pos:start="4120:31" pos:end="4120:31">)</operator><name pos:start="4120:32" pos:end="4120:34">tde</name><operator pos:start="4120:35" pos:end="4120:35">)</operator> <operator pos:start="4120:37" pos:end="4120:37">+</operator> <name pos:start="4120:39" pos:end="4120:45">treclen</name> <operator pos:start="4120:47" pos:end="4120:47">-</operator> <literal type="number" pos:start="4120:49" pos:end="4120:49">1</literal><operator pos:start="4120:50" pos:end="4120:50">)</operator> <operator pos:start="4120:52" pos:end="4120:52">=</operator> <name pos:start="4120:54" pos:end="4120:57">type</name></expr>;</expr_stmt>



                    <expr_stmt pos:start="4124:21" pos:end="4124:72"><expr pos:start="4124:21" pos:end="4124:71"><name pos:start="4124:21" pos:end="4124:22">de</name> <operator pos:start="4124:24" pos:end="4124:24">=</operator> <operator pos:start="4124:26" pos:end="4124:26">(</operator>struct <name pos:start="4124:34" pos:end="4124:47">linux_dirent64</name> <operator pos:start="4124:49" pos:end="4124:49">*</operator><operator pos:start="4124:50" pos:end="4124:50">)</operator><operator pos:start="4124:51" pos:end="4124:51">(</operator><operator pos:start="4124:52" pos:end="4124:52">(</operator><name pos:start="4124:53" pos:end="4124:56">char</name> <operator pos:start="4124:58" pos:end="4124:58">*</operator><operator pos:start="4124:59" pos:end="4124:59">)</operator><name pos:start="4124:60" pos:end="4124:61">de</name> <operator pos:start="4124:63" pos:end="4124:63">+</operator> <name pos:start="4124:65" pos:end="4124:70">reclen</name><operator pos:start="4124:71" pos:end="4124:71">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="4126:21" pos:end="4126:74"><expr pos:start="4126:21" pos:end="4126:73"><name pos:start="4126:21" pos:end="4126:23">tde</name> <operator pos:start="4126:25" pos:end="4126:25">=</operator> <operator pos:start="4126:27" pos:end="4126:27">(</operator>struct <name pos:start="4126:35" pos:end="4126:47">target_dirent</name> <operator pos:start="4126:49" pos:end="4126:49">*</operator><operator pos:start="4126:50" pos:end="4126:50">)</operator><operator pos:start="4126:51" pos:end="4126:51">(</operator><operator pos:start="4126:52" pos:end="4126:52">(</operator><name pos:start="4126:53" pos:end="4126:56">char</name> <operator pos:start="4126:58" pos:end="4126:58">*</operator><operator pos:start="4126:59" pos:end="4126:59">)</operator><name pos:start="4126:60" pos:end="4126:62">tde</name> <operator pos:start="4126:64" pos:end="4126:64">+</operator> <name pos:start="4126:66" pos:end="4126:72">treclen</name><operator pos:start="4126:73" pos:end="4126:73">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="4128:21" pos:end="4128:34"><expr pos:start="4128:21" pos:end="4128:33"><name pos:start="4128:21" pos:end="4128:23">len</name> <operator pos:start="4128:25" pos:end="4128:26">-=</operator> <name pos:start="4128:28" pos:end="4128:33">reclen</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="4130:21" pos:end="4130:36"><expr pos:start="4130:21" pos:end="4130:35"><name pos:start="4130:21" pos:end="4130:24">tlen</name> <operator pos:start="4130:26" pos:end="4130:27">+=</operator> <name pos:start="4130:29" pos:end="4130:35">treclen</name></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="4134:17" pos:end="4134:27"><expr pos:start="4134:17" pos:end="4134:26"><name pos:start="4134:17" pos:end="4134:19">ret</name> <operator pos:start="4134:21" pos:end="4134:21">=</operator> <name pos:start="4134:23" pos:end="4134:26">tlen</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4138:13" pos:end="4138:41"><expr pos:start="4138:13" pos:end="4138:40"><call pos:start="4138:13" pos:end="4138:40"><name pos:start="4138:13" pos:end="4138:23">unlock_user</name><argument_list pos:start="4138:24" pos:end="4138:40">(<argument pos:start="4138:25" pos:end="4138:28"><expr pos:start="4138:25" pos:end="4138:28"><name pos:start="4138:25" pos:end="4138:28">dirp</name></expr></argument>, <argument pos:start="4138:31" pos:end="4138:34"><expr pos:start="4138:31" pos:end="4138:34"><name pos:start="4138:31" pos:end="4138:34">arg2</name></expr></argument>, <argument pos:start="4138:37" pos:end="4138:39"><expr pos:start="4138:37" pos:end="4138:39"><name pos:start="4138:37" pos:end="4138:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:endif pos:start="4142:1" pos:end="4142:6">#<cpp:directive pos:start="4142:2" pos:end="4142:6">endif</cpp:directive></cpp:endif>

        <break pos:start="4144:9" pos:end="4147:0">break;</break>

<cpp:if pos:start="4146:1" pos:end="4146:61">#<cpp:directive pos:start="4146:2" pos:end="4146:3">if</cpp:directive> <expr pos:start="4146:5" pos:end="4146:61"><call pos:start="4146:5" pos:end="4146:33"><name pos:start="4146:5" pos:end="4146:11">defined</name><argument_list pos:start="4146:12" pos:end="4146:33">(<argument pos:start="4146:13" pos:end="4146:32"><expr pos:start="4146:13" pos:end="4146:32"><name pos:start="4146:13" pos:end="4146:32">TARGET_NR_getdents64</name></expr></argument>)</argument_list></call> <operator pos:start="4146:35" pos:end="4146:36">&amp;&amp;</operator> <call pos:start="4146:38" pos:end="4146:61"><name pos:start="4146:38" pos:end="4146:44">defined</name><argument_list pos:start="4146:45" pos:end="4146:61">(<argument pos:start="4146:46" pos:end="4146:60"><expr pos:start="4146:46" pos:end="4146:60"><name pos:start="4146:46" pos:end="4146:60">__NR_getdents64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="4148:5" pos:end="4148:30">case <expr pos:start="4148:10" pos:end="4148:29"><name pos:start="4148:10" pos:end="4148:29">TARGET_NR_getdents64</name></expr>:</case>

        <block pos:start="4150:9" pos:end="4196:9">{<block_content pos:start="4152:13" pos:end="4194:41">

            <decl_stmt pos:start="4152:13" pos:end="4152:40"><decl pos:start="4152:13" pos:end="4152:39"><type pos:start="4152:13" pos:end="4152:35"><name pos:start="4152:13" pos:end="4152:33"><name pos:start="4152:13" pos:end="4152:18">struct</name> <name pos:start="4152:20" pos:end="4152:33">linux_dirent64</name></name> <modifier pos:start="4152:35" pos:end="4152:35">*</modifier></type><name pos:start="4152:36" pos:end="4152:39">dirp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4154:13" pos:end="4154:34"><decl pos:start="4154:13" pos:end="4154:33"><type pos:start="4154:13" pos:end="4154:20"><name pos:start="4154:13" pos:end="4154:20">abi_long</name></type> <name pos:start="4154:22" pos:end="4154:26">count</name> <init pos:start="4154:28" pos:end="4154:33">= <expr pos:start="4154:30" pos:end="4154:33"><name pos:start="4154:30" pos:end="4154:33">arg3</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="4156:13" pos:end="4158:28"><if pos:start="4156:13" pos:end="4158:28">if <condition pos:start="4156:16" pos:end="4156:66">(<expr pos:start="4156:17" pos:end="4156:65"><operator pos:start="4156:17" pos:end="4156:17">!</operator><operator pos:start="4156:18" pos:end="4156:18">(</operator><name pos:start="4156:19" pos:end="4156:22">dirp</name> <operator pos:start="4156:24" pos:end="4156:24">=</operator> <call pos:start="4156:26" pos:end="4156:64"><name pos:start="4156:26" pos:end="4156:34">lock_user</name><argument_list pos:start="4156:35" pos:end="4156:64">(<argument pos:start="4156:36" pos:end="4156:47"><expr pos:start="4156:36" pos:end="4156:47"><name pos:start="4156:36" pos:end="4156:47">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4156:50" pos:end="4156:53"><expr pos:start="4156:50" pos:end="4156:53"><name pos:start="4156:50" pos:end="4156:53">arg2</name></expr></argument>, <argument pos:start="4156:56" pos:end="4156:60"><expr pos:start="4156:56" pos:end="4156:60"><name pos:start="4156:56" pos:end="4156:60">count</name></expr></argument>, <argument pos:start="4156:63" pos:end="4156:63"><expr pos:start="4156:63" pos:end="4156:63"><literal type="number" pos:start="4156:63" pos:end="4156:63">0</literal></expr></argument>)</argument_list></call><operator pos:start="4156:65" pos:end="4156:65">)</operator></expr>)</condition><block type="pseudo" pos:start="4158:17" pos:end="4158:28"><block_content pos:start="4158:17" pos:end="4158:28">

                <goto pos:start="4158:17" pos:end="4158:28">goto <name pos:start="4158:22" pos:end="4158:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4160:13" pos:end="4160:63"><expr pos:start="4160:13" pos:end="4160:62"><name pos:start="4160:13" pos:end="4160:15">ret</name> <operator pos:start="4160:17" pos:end="4160:17">=</operator> <call pos:start="4160:19" pos:end="4160:62"><name pos:start="4160:19" pos:end="4160:27">get_errno</name><argument_list pos:start="4160:28" pos:end="4160:62">(<argument pos:start="4160:29" pos:end="4160:61"><expr pos:start="4160:29" pos:end="4160:61"><call pos:start="4160:29" pos:end="4160:61"><name pos:start="4160:29" pos:end="4160:42">sys_getdents64</name><argument_list pos:start="4160:43" pos:end="4160:61">(<argument pos:start="4160:44" pos:end="4160:47"><expr pos:start="4160:44" pos:end="4160:47"><name pos:start="4160:44" pos:end="4160:47">arg1</name></expr></argument>, <argument pos:start="4160:50" pos:end="4160:53"><expr pos:start="4160:50" pos:end="4160:53"><name pos:start="4160:50" pos:end="4160:53">dirp</name></expr></argument>, <argument pos:start="4160:56" pos:end="4160:60"><expr pos:start="4160:56" pos:end="4160:60"><name pos:start="4160:56" pos:end="4160:60">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4162:13" pos:end="4192:13"><if pos:start="4162:13" pos:end="4192:13">if <condition pos:start="4162:16" pos:end="4162:31">(<expr pos:start="4162:17" pos:end="4162:30"><operator pos:start="4162:17" pos:end="4162:17">!</operator><call pos:start="4162:18" pos:end="4162:30"><name pos:start="4162:18" pos:end="4162:25">is_error</name><argument_list pos:start="4162:26" pos:end="4162:30">(<argument pos:start="4162:27" pos:end="4162:29"><expr pos:start="4162:27" pos:end="4162:29"><name pos:start="4162:27" pos:end="4162:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4162:33" pos:end="4192:13">{<block_content pos:start="4164:17" pos:end="4190:17">

                <decl_stmt pos:start="4164:17" pos:end="4164:42"><decl pos:start="4164:17" pos:end="4164:41"><type pos:start="4164:17" pos:end="4164:39"><name pos:start="4164:17" pos:end="4164:37"><name pos:start="4164:17" pos:end="4164:22">struct</name> <name pos:start="4164:24" pos:end="4164:37">linux_dirent64</name></name> <modifier pos:start="4164:39" pos:end="4164:39">*</modifier></type><name pos:start="4164:40" pos:end="4164:41">de</name></decl>;</decl_stmt>

                <decl_stmt pos:start="4166:17" pos:end="4166:30"><decl pos:start="4166:17" pos:end="4166:29"><type pos:start="4166:17" pos:end="4166:19"><name pos:start="4166:17" pos:end="4166:19">int</name></type> <name pos:start="4166:21" pos:end="4166:23">len</name> <init pos:start="4166:25" pos:end="4166:29">= <expr pos:start="4166:27" pos:end="4166:29"><name pos:start="4166:27" pos:end="4166:29">ret</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="4168:17" pos:end="4168:27"><decl pos:start="4168:17" pos:end="4168:26"><type pos:start="4168:17" pos:end="4168:19"><name pos:start="4168:17" pos:end="4168:19">int</name></type> <name pos:start="4168:21" pos:end="4168:26">reclen</name></decl>;</decl_stmt>

                <expr_stmt pos:start="4170:17" pos:end="4170:26"><expr pos:start="4170:17" pos:end="4170:25"><name pos:start="4170:17" pos:end="4170:18">de</name> <operator pos:start="4170:20" pos:end="4170:20">=</operator> <name pos:start="4170:22" pos:end="4170:25">dirp</name></expr>;</expr_stmt>

                <while pos:start="4172:17" pos:end="4190:17">while <condition pos:start="4172:23" pos:end="4172:31">(<expr pos:start="4172:24" pos:end="4172:30"><name pos:start="4172:24" pos:end="4172:26">len</name> <operator pos:start="4172:28" pos:end="4172:28">&gt;</operator> <literal type="number" pos:start="4172:30" pos:end="4172:30">0</literal></expr>)</condition> <block pos:start="4172:33" pos:end="4190:17">{<block_content pos:start="4174:21" pos:end="4188:34">

                    <expr_stmt pos:start="4174:21" pos:end="4174:42"><expr pos:start="4174:21" pos:end="4174:41"><name pos:start="4174:21" pos:end="4174:26">reclen</name> <operator pos:start="4174:28" pos:end="4174:28">=</operator> <name pos:start="4174:30" pos:end="4174:41"><name pos:start="4174:30" pos:end="4174:31">de</name><operator pos:start="4174:32" pos:end="4174:33">-&gt;</operator><name pos:start="4174:34" pos:end="4174:41">d_reclen</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="4176:21" pos:end="4178:30"><if pos:start="4176:21" pos:end="4178:30">if <condition pos:start="4176:24" pos:end="4176:37">(<expr pos:start="4176:25" pos:end="4176:36"><name pos:start="4176:25" pos:end="4176:30">reclen</name> <operator pos:start="4176:32" pos:end="4176:32">&gt;</operator> <name pos:start="4176:34" pos:end="4176:36">len</name></expr>)</condition><block type="pseudo" pos:start="4178:25" pos:end="4178:30"><block_content pos:start="4178:25" pos:end="4178:30">

                        <break pos:start="4178:25" pos:end="4178:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="4180:21" pos:end="4180:51"><expr pos:start="4180:21" pos:end="4180:50"><name pos:start="4180:21" pos:end="4180:32"><name pos:start="4180:21" pos:end="4180:22">de</name><operator pos:start="4180:23" pos:end="4180:24">-&gt;</operator><name pos:start="4180:25" pos:end="4180:32">d_reclen</name></name> <operator pos:start="4180:34" pos:end="4180:34">=</operator> <call pos:start="4180:36" pos:end="4180:50"><name pos:start="4180:36" pos:end="4180:42">tswap16</name><argument_list pos:start="4180:43" pos:end="4180:50">(<argument pos:start="4180:44" pos:end="4180:49"><expr pos:start="4180:44" pos:end="4180:49"><name pos:start="4180:44" pos:end="4180:49">reclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4182:21" pos:end="4182:53"><expr pos:start="4182:21" pos:end="4182:52"><call pos:start="4182:21" pos:end="4182:52"><name pos:start="4182:21" pos:end="4182:28">tswap64s</name><argument_list pos:start="4182:29" pos:end="4182:52">(<argument pos:start="4182:30" pos:end="4182:51"><expr pos:start="4182:30" pos:end="4182:51"><operator pos:start="4182:30" pos:end="4182:30">(</operator><name pos:start="4182:31" pos:end="4182:38">uint64_t</name> <operator pos:start="4182:40" pos:end="4182:40">*</operator><operator pos:start="4182:41" pos:end="4182:41">)</operator><operator pos:start="4182:42" pos:end="4182:42">&amp;</operator><name pos:start="4182:43" pos:end="4182:51"><name pos:start="4182:43" pos:end="4182:44">de</name><operator pos:start="4182:45" pos:end="4182:46">-&gt;</operator><name pos:start="4182:47" pos:end="4182:51">d_ino</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4184:21" pos:end="4184:53"><expr pos:start="4184:21" pos:end="4184:52"><call pos:start="4184:21" pos:end="4184:52"><name pos:start="4184:21" pos:end="4184:28">tswap64s</name><argument_list pos:start="4184:29" pos:end="4184:52">(<argument pos:start="4184:30" pos:end="4184:51"><expr pos:start="4184:30" pos:end="4184:51"><operator pos:start="4184:30" pos:end="4184:30">(</operator><name pos:start="4184:31" pos:end="4184:38">uint64_t</name> <operator pos:start="4184:40" pos:end="4184:40">*</operator><operator pos:start="4184:41" pos:end="4184:41">)</operator><operator pos:start="4184:42" pos:end="4184:42">&amp;</operator><name pos:start="4184:43" pos:end="4184:51"><name pos:start="4184:43" pos:end="4184:44">de</name><operator pos:start="4184:45" pos:end="4184:46">-&gt;</operator><name pos:start="4184:47" pos:end="4184:51">d_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4186:21" pos:end="4186:72"><expr pos:start="4186:21" pos:end="4186:71"><name pos:start="4186:21" pos:end="4186:22">de</name> <operator pos:start="4186:24" pos:end="4186:24">=</operator> <operator pos:start="4186:26" pos:end="4186:26">(</operator>struct <name pos:start="4186:34" pos:end="4186:47">linux_dirent64</name> <operator pos:start="4186:49" pos:end="4186:49">*</operator><operator pos:start="4186:50" pos:end="4186:50">)</operator><operator pos:start="4186:51" pos:end="4186:51">(</operator><operator pos:start="4186:52" pos:end="4186:52">(</operator><name pos:start="4186:53" pos:end="4186:56">char</name> <operator pos:start="4186:58" pos:end="4186:58">*</operator><operator pos:start="4186:59" pos:end="4186:59">)</operator><name pos:start="4186:60" pos:end="4186:61">de</name> <operator pos:start="4186:63" pos:end="4186:63">+</operator> <name pos:start="4186:65" pos:end="4186:70">reclen</name><operator pos:start="4186:71" pos:end="4186:71">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="4188:21" pos:end="4188:34"><expr pos:start="4188:21" pos:end="4188:33"><name pos:start="4188:21" pos:end="4188:23">len</name> <operator pos:start="4188:25" pos:end="4188:26">-=</operator> <name pos:start="4188:28" pos:end="4188:33">reclen</name></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4194:13" pos:end="4194:41"><expr pos:start="4194:13" pos:end="4194:40"><call pos:start="4194:13" pos:end="4194:40"><name pos:start="4194:13" pos:end="4194:23">unlock_user</name><argument_list pos:start="4194:24" pos:end="4194:40">(<argument pos:start="4194:25" pos:end="4194:28"><expr pos:start="4194:25" pos:end="4194:28"><name pos:start="4194:25" pos:end="4194:28">dirp</name></expr></argument>, <argument pos:start="4194:31" pos:end="4194:34"><expr pos:start="4194:31" pos:end="4194:34"><name pos:start="4194:31" pos:end="4194:34">arg2</name></expr></argument>, <argument pos:start="4194:37" pos:end="4194:39"><expr pos:start="4194:37" pos:end="4194:39"><name pos:start="4194:37" pos:end="4194:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4198:9" pos:end="4203:0">break;</break>

<cpp:endif pos:start="4200:1" pos:end="4200:6">#<cpp:directive pos:start="4200:2" pos:end="4200:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="4200:8" pos:end="4200:33">/* TARGET_NR_getdents64 */</comment>

<cpp:if pos:start="4202:1" pos:end="4202:33">#<cpp:directive pos:start="4202:2" pos:end="4202:3">if</cpp:directive> <expr pos:start="4202:5" pos:end="4202:33"><call pos:start="4202:5" pos:end="4202:33"><name pos:start="4202:5" pos:end="4202:11">defined</name><argument_list pos:start="4202:12" pos:end="4202:33">(<argument pos:start="4202:13" pos:end="4202:32"><expr pos:start="4202:13" pos:end="4202:32"><name pos:start="4202:13" pos:end="4202:32">TARGET_NR__newselect</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="4204:5" pos:end="4204:30">case <expr pos:start="4204:10" pos:end="4204:29"><name pos:start="4204:10" pos:end="4204:29">TARGET_NR__newselect</name></expr>:</case>

        <expr_stmt pos:start="4206:9" pos:end="4206:54"><expr pos:start="4206:9" pos:end="4206:53"><name pos:start="4206:9" pos:end="4206:11">ret</name> <operator pos:start="4206:13" pos:end="4206:13">=</operator> <call pos:start="4206:15" pos:end="4206:53"><name pos:start="4206:15" pos:end="4206:23">do_select</name><argument_list pos:start="4206:24" pos:end="4206:53">(<argument pos:start="4206:25" pos:end="4206:28"><expr pos:start="4206:25" pos:end="4206:28"><name pos:start="4206:25" pos:end="4206:28">arg1</name></expr></argument>, <argument pos:start="4206:31" pos:end="4206:34"><expr pos:start="4206:31" pos:end="4206:34"><name pos:start="4206:31" pos:end="4206:34">arg2</name></expr></argument>, <argument pos:start="4206:37" pos:end="4206:40"><expr pos:start="4206:37" pos:end="4206:40"><name pos:start="4206:37" pos:end="4206:40">arg3</name></expr></argument>, <argument pos:start="4206:43" pos:end="4206:46"><expr pos:start="4206:43" pos:end="4206:46"><name pos:start="4206:43" pos:end="4206:46">arg4</name></expr></argument>, <argument pos:start="4206:49" pos:end="4206:52"><expr pos:start="4206:49" pos:end="4206:52"><name pos:start="4206:49" pos:end="4206:52">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4208:9" pos:end="4215:0">break;</break>

<cpp:endif pos:start="4210:1" pos:end="4210:6">#<cpp:directive pos:start="4210:2" pos:end="4210:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="4212:1" pos:end="4212:55">#<cpp:directive pos:start="4212:2" pos:end="4212:3">if</cpp:directive> <expr pos:start="4212:5" pos:end="4212:55"><call pos:start="4212:5" pos:end="4212:27"><name pos:start="4212:5" pos:end="4212:11">defined</name><argument_list pos:start="4212:12" pos:end="4212:27">(<argument pos:start="4212:13" pos:end="4212:26"><expr pos:start="4212:13" pos:end="4212:26"><name pos:start="4212:13" pos:end="4212:26">TARGET_NR_poll</name></expr></argument>)</argument_list></call> <operator pos:start="4212:29" pos:end="4212:30">||</operator> <call pos:start="4212:32" pos:end="4212:55"><name pos:start="4212:32" pos:end="4212:38">defined</name><argument_list pos:start="4212:39" pos:end="4212:55">(<argument pos:start="4212:40" pos:end="4212:54"><expr pos:start="4212:40" pos:end="4212:54"><name pos:start="4212:40" pos:end="4212:54">TARGET_NR_ppoll</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef pos:start="4214:1" pos:end="4214:22"># <cpp:directive pos:start="4214:3" pos:end="4214:7">ifdef</cpp:directive> <name pos:start="4214:9" pos:end="4214:22">TARGET_NR_poll</name></cpp:ifdef>

    <case pos:start="4216:5" pos:end="4221:0">case <expr pos:start="4216:10" pos:end="4216:23"><name pos:start="4216:10" pos:end="4216:23">TARGET_NR_poll</name></expr>:</case>

<cpp:endif pos:start="4218:1" pos:end="4218:7"># <cpp:directive pos:start="4218:3" pos:end="4218:7">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4220:1" pos:end="4220:23"># <cpp:directive pos:start="4220:3" pos:end="4220:7">ifdef</cpp:directive> <name pos:start="4220:9" pos:end="4220:23">TARGET_NR_ppoll</name></cpp:ifdef>

    <case pos:start="4222:5" pos:end="4225:0">case <expr pos:start="4222:10" pos:end="4222:24"><name pos:start="4222:10" pos:end="4222:24">TARGET_NR_ppoll</name></expr>:</case>

<cpp:endif pos:start="4224:1" pos:end="4224:7"># <cpp:directive pos:start="4224:3" pos:end="4224:7">endif</cpp:directive></cpp:endif>

        <block pos:start="4226:9" pos:end="4348:9">{<block_content pos:start="4228:13" pos:end="4346:79">

            <decl_stmt pos:start="4228:13" pos:end="4228:45"><decl pos:start="4228:13" pos:end="4228:44"><type pos:start="4228:13" pos:end="4228:34"><name pos:start="4228:13" pos:end="4228:32"><name pos:start="4228:13" pos:end="4228:18">struct</name> <name pos:start="4228:20" pos:end="4228:32">target_pollfd</name></name> <modifier pos:start="4228:34" pos:end="4228:34">*</modifier></type><name pos:start="4228:35" pos:end="4228:44">target_pfd</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4230:13" pos:end="4230:37"><decl pos:start="4230:13" pos:end="4230:36"><type pos:start="4230:13" pos:end="4230:24"><name pos:start="4230:13" pos:end="4230:20">unsigned</name> <name pos:start="4230:22" pos:end="4230:24">int</name></type> <name pos:start="4230:26" pos:end="4230:29">nfds</name> <init pos:start="4230:31" pos:end="4230:36">= <expr pos:start="4230:33" pos:end="4230:36"><name pos:start="4230:33" pos:end="4230:36">arg2</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="4232:13" pos:end="4232:31"><decl pos:start="4232:13" pos:end="4232:30"><type pos:start="4232:13" pos:end="4232:15"><name pos:start="4232:13" pos:end="4232:15">int</name></type> <name pos:start="4232:17" pos:end="4232:23">timeout</name> <init pos:start="4232:25" pos:end="4232:30">= <expr pos:start="4232:27" pos:end="4232:30"><name pos:start="4232:27" pos:end="4232:30">arg3</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="4234:13" pos:end="4234:31"><decl pos:start="4234:13" pos:end="4234:30"><type pos:start="4234:13" pos:end="4234:27"><name pos:start="4234:13" pos:end="4234:25"><name pos:start="4234:13" pos:end="4234:18">struct</name> <name pos:start="4234:20" pos:end="4234:25">pollfd</name></name> <modifier pos:start="4234:27" pos:end="4234:27">*</modifier></type><name pos:start="4234:28" pos:end="4234:30">pfd</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4236:13" pos:end="4236:27"><decl pos:start="4236:13" pos:end="4236:26"><type pos:start="4236:13" pos:end="4236:24"><name pos:start="4236:13" pos:end="4236:20">unsigned</name> <name pos:start="4236:22" pos:end="4236:24">int</name></type> <name pos:start="4236:26" pos:end="4236:26">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="4240:13" pos:end="4240:95"><expr pos:start="4240:13" pos:end="4240:94"><name pos:start="4240:13" pos:end="4240:22">target_pfd</name> <operator pos:start="4240:24" pos:end="4240:24">=</operator> <call pos:start="4240:26" pos:end="4240:94"><name pos:start="4240:26" pos:end="4240:34">lock_user</name><argument_list pos:start="4240:35" pos:end="4240:94">(<argument pos:start="4240:36" pos:end="4240:47"><expr pos:start="4240:36" pos:end="4240:47"><name pos:start="4240:36" pos:end="4240:47">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4240:50" pos:end="4240:53"><expr pos:start="4240:50" pos:end="4240:53"><name pos:start="4240:50" pos:end="4240:53">arg1</name></expr></argument>, <argument pos:start="4240:56" pos:end="4240:90"><expr pos:start="4240:56" pos:end="4240:90"><sizeof pos:start="4240:56" pos:end="4240:83">sizeof<argument_list pos:start="4240:62" pos:end="4240:83">(<argument pos:start="4240:63" pos:end="4240:82"><expr pos:start="4240:63" pos:end="4240:82">struct <name pos:start="4240:70" pos:end="4240:82">target_pollfd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4240:85" pos:end="4240:85">*</operator> <name pos:start="4240:87" pos:end="4240:90">nfds</name></expr></argument>, <argument pos:start="4240:93" pos:end="4240:93"><expr pos:start="4240:93" pos:end="4240:93"><literal type="number" pos:start="4240:93" pos:end="4240:93">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4242:13" pos:end="4244:28"><if pos:start="4242:13" pos:end="4244:28">if <condition pos:start="4242:16" pos:end="4242:28">(<expr pos:start="4242:17" pos:end="4242:27"><operator pos:start="4242:17" pos:end="4242:17">!</operator><name pos:start="4242:18" pos:end="4242:27">target_pfd</name></expr>)</condition><block type="pseudo" pos:start="4244:17" pos:end="4244:28"><block_content pos:start="4244:17" pos:end="4244:28">

                <goto pos:start="4244:17" pos:end="4244:28">goto <name pos:start="4244:22" pos:end="4244:27">efault</name>;</goto></block_content></block></if></if_stmt>



            <expr_stmt pos:start="4248:13" pos:end="4248:55"><expr pos:start="4248:13" pos:end="4248:54"><name pos:start="4248:13" pos:end="4248:15">pfd</name> <operator pos:start="4248:17" pos:end="4248:17">=</operator> <call pos:start="4248:19" pos:end="4248:54"><name pos:start="4248:19" pos:end="4248:24">alloca</name><argument_list pos:start="4248:25" pos:end="4248:54">(<argument pos:start="4248:26" pos:end="4248:53"><expr pos:start="4248:26" pos:end="4248:53"><sizeof pos:start="4248:26" pos:end="4248:46">sizeof<argument_list pos:start="4248:32" pos:end="4248:46">(<argument pos:start="4248:33" pos:end="4248:45"><expr pos:start="4248:33" pos:end="4248:45">struct <name pos:start="4248:40" pos:end="4248:45">pollfd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4248:48" pos:end="4248:48">*</operator> <name pos:start="4248:50" pos:end="4248:53">nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="4250:13" pos:end="4261:0">for<control pos:start="4250:16" pos:end="4250:37">(<init pos:start="4250:17" pos:end="4250:22"><expr pos:start="4250:17" pos:end="4250:21"><name pos:start="4250:17" pos:end="4250:17">i</name> <operator pos:start="4250:19" pos:end="4250:19">=</operator> <literal type="number" pos:start="4250:21" pos:end="4250:21">0</literal></expr>;</init> <condition pos:start="4250:24" pos:end="4250:32"><expr pos:start="4250:24" pos:end="4250:31"><name pos:start="4250:24" pos:end="4250:24">i</name> <operator pos:start="4250:26" pos:end="4250:26">&lt;</operator> <name pos:start="4250:28" pos:end="4250:31">nfds</name></expr>;</condition> <incr pos:start="4250:34" pos:end="4250:36"><expr pos:start="4250:34" pos:end="4250:36"><name pos:start="4250:34" pos:end="4250:34">i</name><operator pos:start="4250:35" pos:end="4250:36">++</operator></expr></incr>)</control> <block pos:start="4250:39" pos:end="4261:0">{<block_content pos:start="4252:17" pos:end="4254:62">

                <expr_stmt pos:start="4252:17" pos:end="4252:54"><expr pos:start="4252:17" pos:end="4252:53"><name pos:start="4252:17" pos:end="4252:22"><name pos:start="4252:17" pos:end="4252:19">pfd</name><index pos:start="4252:20" pos:end="4252:22">[<expr pos:start="4252:21" pos:end="4252:21"><name pos:start="4252:21" pos:end="4252:21">i</name></expr>]</index></name><operator pos:start="4252:23" pos:end="4252:23">.</operator><name pos:start="4252:24" pos:end="4252:25">fd</name> <operator pos:start="4252:27" pos:end="4252:27">=</operator> <call pos:start="4252:29" pos:end="4252:53"><name pos:start="4252:29" pos:end="4252:35">tswap32</name><argument_list pos:start="4252:36" pos:end="4252:53">(<argument pos:start="4252:37" pos:end="4252:52"><expr pos:start="4252:37" pos:end="4252:52"><name pos:start="4252:37" pos:end="4252:49"><name pos:start="4252:37" pos:end="4252:46">target_pfd</name><index pos:start="4252:47" pos:end="4252:49">[<expr pos:start="4252:48" pos:end="4252:48"><name pos:start="4252:48" pos:end="4252:48">i</name></expr>]</index></name><operator pos:start="4252:50" pos:end="4252:50">.</operator><name pos:start="4252:51" pos:end="4252:52">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4254:17" pos:end="4254:62"><expr pos:start="4254:17" pos:end="4254:61"><name pos:start="4254:17" pos:end="4254:22"><name pos:start="4254:17" pos:end="4254:19">pfd</name><index pos:start="4254:20" pos:end="4254:22">[<expr pos:start="4254:21" pos:end="4254:21"><name pos:start="4254:21" pos:end="4254:21">i</name></expr>]</index></name><operator pos:start="4254:23" pos:end="4254:23">.</operator><name pos:start="4254:24" pos:end="4254:29">events</name> <operator pos:start="4254:31" pos:end="4254:31">=</operator> <call pos:start="4254:33" pos:end="4254:61"><name pos:start="4254:33" pos:end="4254:39">tswap16</name><argument_list pos:start="4254:40" pos:end="4254:61">(<argument pos:start="4254:41" pos:end="4254:60"><expr pos:start="4254:41" pos:end="4254:60"><name pos:start="4254:41" pos:end="4254:53"><name pos:start="4254:41" pos:end="4254:50">target_pfd</name><index pos:start="4254:51" pos:end="4254:53">[<expr pos:start="4254:52" pos:end="4254:52"><name pos:start="4254:52" pos:end="4254:52">i</name></expr>]</index></name><operator pos:start="4254:54" pos:end="4254:54">.</operator><name pos:start="4254:55" pos:end="4254:60">events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



<cpp:ifdef pos:start="4260:1" pos:end="4260:23"># <cpp:directive pos:start="4260:3" pos:end="4260:7">ifdef</cpp:directive> <name pos:start="4260:9" pos:end="4260:23">TARGET_NR_ppoll</name></cpp:ifdef>

            <if_stmt pos:start="4262:13" pos:end="4332:58"><if pos:start="4262:13" pos:end="4328:13">if <condition pos:start="4262:16" pos:end="4262:39">(<expr pos:start="4262:17" pos:end="4262:38"><name pos:start="4262:17" pos:end="4262:19">num</name> <operator pos:start="4262:21" pos:end="4262:22">==</operator> <name pos:start="4262:24" pos:end="4262:38">TARGET_NR_ppoll</name></expr>)</condition> <block pos:start="4262:41" pos:end="4328:13">{<block_content pos:start="4264:17" pos:end="4326:17">

                <decl_stmt pos:start="4264:17" pos:end="4264:72"><decl pos:start="4264:17" pos:end="4264:43"><type pos:start="4264:17" pos:end="4264:31"><name pos:start="4264:17" pos:end="4264:31"><name pos:start="4264:17" pos:end="4264:22">struct</name> <name pos:start="4264:24" pos:end="4264:31">timespec</name></name></type> <name pos:start="4264:33" pos:end="4264:43">_timeout_ts</name></decl>, <decl pos:start="4264:46" pos:end="4264:71"><type ref="prev" pos:start="4264:17" pos:end="4264:31"><modifier pos:start="4264:46" pos:end="4264:46">*</modifier></type><name pos:start="4264:47" pos:end="4264:56">timeout_ts</name> <init pos:start="4264:58" pos:end="4264:71">= <expr pos:start="4264:60" pos:end="4264:71"><operator pos:start="4264:60" pos:end="4264:60">&amp;</operator><name pos:start="4264:61" pos:end="4264:71">_timeout_ts</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="4266:17" pos:end="4266:44"><decl pos:start="4266:17" pos:end="4266:43"><type pos:start="4266:17" pos:end="4266:33"><name pos:start="4266:17" pos:end="4266:31">target_sigset_t</name> <modifier pos:start="4266:33" pos:end="4266:33">*</modifier></type><name pos:start="4266:34" pos:end="4266:43">target_set</name></decl>;</decl_stmt>

                <decl_stmt pos:start="4268:17" pos:end="4268:44"><decl pos:start="4268:17" pos:end="4268:29"><type pos:start="4268:17" pos:end="4268:24"><name pos:start="4268:17" pos:end="4268:24">sigset_t</name></type> <name pos:start="4268:26" pos:end="4268:29">_set</name></decl>, <decl pos:start="4268:32" pos:end="4268:43"><type ref="prev" pos:start="4268:17" pos:end="4268:24"><modifier pos:start="4268:32" pos:end="4268:32">*</modifier></type><name pos:start="4268:33" pos:end="4268:35">set</name> <init pos:start="4268:37" pos:end="4268:43">= <expr pos:start="4268:39" pos:end="4268:43"><operator pos:start="4268:39" pos:end="4268:39">&amp;</operator><name pos:start="4268:40" pos:end="4268:43">_set</name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="4272:17" pos:end="4286:17"><if pos:start="4272:17" pos:end="4282:17">if <condition pos:start="4272:20" pos:end="4272:25">(<expr pos:start="4272:21" pos:end="4272:24"><name pos:start="4272:21" pos:end="4272:24">arg3</name></expr>)</condition> <block pos:start="4272:27" pos:end="4282:17">{<block_content pos:start="4274:21" pos:end="4280:21">

                    <if_stmt pos:start="4274:21" pos:end="4280:21"><if pos:start="4274:21" pos:end="4280:21">if <condition pos:start="4274:24" pos:end="4274:66">(<expr pos:start="4274:25" pos:end="4274:65"><call pos:start="4274:25" pos:end="4274:65"><name pos:start="4274:25" pos:end="4274:47">target_to_host_timespec</name><argument_list pos:start="4274:48" pos:end="4274:65">(<argument pos:start="4274:49" pos:end="4274:58"><expr pos:start="4274:49" pos:end="4274:58"><name pos:start="4274:49" pos:end="4274:58">timeout_ts</name></expr></argument>, <argument pos:start="4274:61" pos:end="4274:64"><expr pos:start="4274:61" pos:end="4274:64"><name pos:start="4274:61" pos:end="4274:64">arg3</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4274:68" pos:end="4280:21">{<block_content pos:start="4276:25" pos:end="4278:36">

                        <expr_stmt pos:start="4276:25" pos:end="4276:57"><expr pos:start="4276:25" pos:end="4276:56"><call pos:start="4276:25" pos:end="4276:56"><name pos:start="4276:25" pos:end="4276:35">unlock_user</name><argument_list pos:start="4276:36" pos:end="4276:56">(<argument pos:start="4276:37" pos:end="4276:46"><expr pos:start="4276:37" pos:end="4276:46"><name pos:start="4276:37" pos:end="4276:46">target_pfd</name></expr></argument>, <argument pos:start="4276:49" pos:end="4276:52"><expr pos:start="4276:49" pos:end="4276:52"><name pos:start="4276:49" pos:end="4276:52">arg1</name></expr></argument>, <argument pos:start="4276:55" pos:end="4276:55"><expr pos:start="4276:55" pos:end="4276:55"><literal type="number" pos:start="4276:55" pos:end="4276:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="4278:25" pos:end="4278:36">goto <name pos:start="4278:30" pos:end="4278:35">efault</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="4282:19" pos:end="4286:17">else <block pos:start="4282:24" pos:end="4286:17">{<block_content pos:start="4284:21" pos:end="4284:38">

                    <expr_stmt pos:start="4284:21" pos:end="4284:38"><expr pos:start="4284:21" pos:end="4284:37"><name pos:start="4284:21" pos:end="4284:30">timeout_ts</name> <operator pos:start="4284:32" pos:end="4284:32">=</operator> <name pos:start="4284:34" pos:end="4284:37">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <if_stmt pos:start="4290:17" pos:end="4308:17"><if pos:start="4290:17" pos:end="4304:17">if <condition pos:start="4290:20" pos:end="4290:25">(<expr pos:start="4290:21" pos:end="4290:24"><name pos:start="4290:21" pos:end="4290:24">arg4</name></expr>)</condition> <block pos:start="4290:27" pos:end="4304:17">{<block_content pos:start="4292:21" pos:end="4302:59">

                    <expr_stmt pos:start="4292:21" pos:end="4292:90"><expr pos:start="4292:21" pos:end="4292:89"><name pos:start="4292:21" pos:end="4292:30">target_set</name> <operator pos:start="4292:32" pos:end="4292:32">=</operator> <call pos:start="4292:34" pos:end="4292:89"><name pos:start="4292:34" pos:end="4292:42">lock_user</name><argument_list pos:start="4292:43" pos:end="4292:89">(<argument pos:start="4292:44" pos:end="4292:54"><expr pos:start="4292:44" pos:end="4292:54"><name pos:start="4292:44" pos:end="4292:54">VERIFY_READ</name></expr></argument>, <argument pos:start="4292:57" pos:end="4292:60"><expr pos:start="4292:57" pos:end="4292:60"><name pos:start="4292:57" pos:end="4292:60">arg4</name></expr></argument>, <argument pos:start="4292:63" pos:end="4292:85"><expr pos:start="4292:63" pos:end="4292:85"><sizeof pos:start="4292:63" pos:end="4292:85">sizeof<argument_list pos:start="4292:69" pos:end="4292:85">(<argument pos:start="4292:70" pos:end="4292:84"><expr pos:start="4292:70" pos:end="4292:84"><name pos:start="4292:70" pos:end="4292:84">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="4292:88" pos:end="4292:88"><expr pos:start="4292:88" pos:end="4292:88"><literal type="number" pos:start="4292:88" pos:end="4292:88">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="4294:21" pos:end="4300:21"><if pos:start="4294:21" pos:end="4300:21">if <condition pos:start="4294:24" pos:end="4294:36">(<expr pos:start="4294:25" pos:end="4294:35"><operator pos:start="4294:25" pos:end="4294:25">!</operator><name pos:start="4294:26" pos:end="4294:35">target_set</name></expr>)</condition> <block pos:start="4294:38" pos:end="4300:21">{<block_content pos:start="4296:25" pos:end="4298:36">

                        <expr_stmt pos:start="4296:25" pos:end="4296:57"><expr pos:start="4296:25" pos:end="4296:56"><call pos:start="4296:25" pos:end="4296:56"><name pos:start="4296:25" pos:end="4296:35">unlock_user</name><argument_list pos:start="4296:36" pos:end="4296:56">(<argument pos:start="4296:37" pos:end="4296:46"><expr pos:start="4296:37" pos:end="4296:46"><name pos:start="4296:37" pos:end="4296:46">target_pfd</name></expr></argument>, <argument pos:start="4296:49" pos:end="4296:52"><expr pos:start="4296:49" pos:end="4296:52"><name pos:start="4296:49" pos:end="4296:52">arg1</name></expr></argument>, <argument pos:start="4296:55" pos:end="4296:55"><expr pos:start="4296:55" pos:end="4296:55"><literal type="number" pos:start="4296:55" pos:end="4296:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="4298:25" pos:end="4298:36">goto <name pos:start="4298:30" pos:end="4298:35">efault</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="4302:21" pos:end="4302:59"><expr pos:start="4302:21" pos:end="4302:58"><call pos:start="4302:21" pos:end="4302:58"><name pos:start="4302:21" pos:end="4302:41">target_to_host_sigset</name><argument_list pos:start="4302:42" pos:end="4302:58">(<argument pos:start="4302:43" pos:end="4302:45"><expr pos:start="4302:43" pos:end="4302:45"><name pos:start="4302:43" pos:end="4302:45">set</name></expr></argument>, <argument pos:start="4302:48" pos:end="4302:57"><expr pos:start="4302:48" pos:end="4302:57"><name pos:start="4302:48" pos:end="4302:57">target_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4304:19" pos:end="4308:17">else <block pos:start="4304:24" pos:end="4308:17">{<block_content pos:start="4306:21" pos:end="4306:31">

                    <expr_stmt pos:start="4306:21" pos:end="4306:31"><expr pos:start="4306:21" pos:end="4306:30"><name pos:start="4306:21" pos:end="4306:23">set</name> <operator pos:start="4306:25" pos:end="4306:25">=</operator> <name pos:start="4306:27" pos:end="4306:30">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="4312:17" pos:end="4312:80"><expr pos:start="4312:17" pos:end="4312:79"><name pos:start="4312:17" pos:end="4312:19">ret</name> <operator pos:start="4312:21" pos:end="4312:21">=</operator> <call pos:start="4312:23" pos:end="4312:79"><name pos:start="4312:23" pos:end="4312:31">get_errno</name><argument_list pos:start="4312:32" pos:end="4312:79">(<argument pos:start="4312:33" pos:end="4312:78"><expr pos:start="4312:33" pos:end="4312:78"><call pos:start="4312:33" pos:end="4312:78"><name pos:start="4312:33" pos:end="4312:41">sys_ppoll</name><argument_list pos:start="4312:42" pos:end="4312:78">(<argument pos:start="4312:43" pos:end="4312:45"><expr pos:start="4312:43" pos:end="4312:45"><name pos:start="4312:43" pos:end="4312:45">pfd</name></expr></argument>, <argument pos:start="4312:48" pos:end="4312:51"><expr pos:start="4312:48" pos:end="4312:51"><name pos:start="4312:48" pos:end="4312:51">nfds</name></expr></argument>, <argument pos:start="4312:54" pos:end="4312:63"><expr pos:start="4312:54" pos:end="4312:63"><name pos:start="4312:54" pos:end="4312:63">timeout_ts</name></expr></argument>, <argument pos:start="4312:66" pos:end="4312:68"><expr pos:start="4312:66" pos:end="4312:68"><name pos:start="4312:66" pos:end="4312:68">set</name></expr></argument>, <argument pos:start="4312:71" pos:end="4312:77"><expr pos:start="4312:71" pos:end="4312:77"><name pos:start="4312:71" pos:end="4312:75">_NSIG</name><operator pos:start="4312:76" pos:end="4312:76">/</operator><literal type="number" pos:start="4312:77" pos:end="4312:77">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="4316:17" pos:end="4320:17"><if pos:start="4316:17" pos:end="4320:17">if <condition pos:start="4316:20" pos:end="4316:43">(<expr pos:start="4316:21" pos:end="4316:42"><operator pos:start="4316:21" pos:end="4316:21">!</operator><call pos:start="4316:22" pos:end="4316:34"><name pos:start="4316:22" pos:end="4316:29">is_error</name><argument_list pos:start="4316:30" pos:end="4316:34">(<argument pos:start="4316:31" pos:end="4316:33"><expr pos:start="4316:31" pos:end="4316:33"><name pos:start="4316:31" pos:end="4316:33">ret</name></expr></argument>)</argument_list></call> <operator pos:start="4316:36" pos:end="4316:37">&amp;&amp;</operator> <name pos:start="4316:39" pos:end="4316:42">arg3</name></expr>)</condition> <block pos:start="4316:45" pos:end="4320:17">{<block_content pos:start="4318:21" pos:end="4318:62">

                    <expr_stmt pos:start="4318:21" pos:end="4318:62"><expr pos:start="4318:21" pos:end="4318:61"><call pos:start="4318:21" pos:end="4318:61"><name pos:start="4318:21" pos:end="4318:43">host_to_target_timespec</name><argument_list pos:start="4318:44" pos:end="4318:61">(<argument pos:start="4318:45" pos:end="4318:48"><expr pos:start="4318:45" pos:end="4318:48"><name pos:start="4318:45" pos:end="4318:48">arg3</name></expr></argument>, <argument pos:start="4318:51" pos:end="4318:60"><expr pos:start="4318:51" pos:end="4318:60"><name pos:start="4318:51" pos:end="4318:60">timeout_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="4322:17" pos:end="4326:17"><if pos:start="4322:17" pos:end="4326:17">if <condition pos:start="4322:20" pos:end="4322:25">(<expr pos:start="4322:21" pos:end="4322:24"><name pos:start="4322:21" pos:end="4322:24">arg4</name></expr>)</condition> <block pos:start="4322:27" pos:end="4326:17">{<block_content pos:start="4324:21" pos:end="4324:53">

                    <expr_stmt pos:start="4324:21" pos:end="4324:53"><expr pos:start="4324:21" pos:end="4324:52"><call pos:start="4324:21" pos:end="4324:52"><name pos:start="4324:21" pos:end="4324:31">unlock_user</name><argument_list pos:start="4324:32" pos:end="4324:52">(<argument pos:start="4324:33" pos:end="4324:42"><expr pos:start="4324:33" pos:end="4324:42"><name pos:start="4324:33" pos:end="4324:42">target_set</name></expr></argument>, <argument pos:start="4324:45" pos:end="4324:48"><expr pos:start="4324:45" pos:end="4324:48"><name pos:start="4324:45" pos:end="4324:48">arg4</name></expr></argument>, <argument pos:start="4324:51" pos:end="4324:51"><expr pos:start="4324:51" pos:end="4324:51"><literal type="number" pos:start="4324:51" pos:end="4324:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="4328:15" pos:end="4332:58">else<block type="pseudo" pos:start="4332:17" pos:end="4332:58"><block_content pos:start="4332:17" pos:end="4332:58">

<cpp:endif pos:start="4330:1" pos:end="4330:7"># <cpp:directive pos:start="4330:3" pos:end="4330:7">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="4332:17" pos:end="4332:58"><expr pos:start="4332:17" pos:end="4332:57"><name pos:start="4332:17" pos:end="4332:19">ret</name> <operator pos:start="4332:21" pos:end="4332:21">=</operator> <call pos:start="4332:23" pos:end="4332:57"><name pos:start="4332:23" pos:end="4332:31">get_errno</name><argument_list pos:start="4332:32" pos:end="4332:57">(<argument pos:start="4332:33" pos:end="4332:56"><expr pos:start="4332:33" pos:end="4332:56"><call pos:start="4332:33" pos:end="4332:56"><name pos:start="4332:33" pos:end="4332:36">poll</name><argument_list pos:start="4332:37" pos:end="4332:56">(<argument pos:start="4332:38" pos:end="4332:40"><expr pos:start="4332:38" pos:end="4332:40"><name pos:start="4332:38" pos:end="4332:40">pfd</name></expr></argument>, <argument pos:start="4332:43" pos:end="4332:46"><expr pos:start="4332:43" pos:end="4332:46"><name pos:start="4332:43" pos:end="4332:46">nfds</name></expr></argument>, <argument pos:start="4332:49" pos:end="4332:55"><expr pos:start="4332:49" pos:end="4332:55"><name pos:start="4332:49" pos:end="4332:55">timeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <if_stmt pos:start="4336:13" pos:end="4344:13"><if pos:start="4336:13" pos:end="4344:13">if <condition pos:start="4336:16" pos:end="4336:31">(<expr pos:start="4336:17" pos:end="4336:30"><operator pos:start="4336:17" pos:end="4336:17">!</operator><call pos:start="4336:18" pos:end="4336:30"><name pos:start="4336:18" pos:end="4336:25">is_error</name><argument_list pos:start="4336:26" pos:end="4336:30">(<argument pos:start="4336:27" pos:end="4336:29"><expr pos:start="4336:27" pos:end="4336:29"><name pos:start="4336:27" pos:end="4336:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4336:33" pos:end="4344:13">{<block_content pos:start="4338:17" pos:end="4342:17">

                <for pos:start="4338:17" pos:end="4342:17">for<control pos:start="4338:20" pos:end="4338:41">(<init pos:start="4338:21" pos:end="4338:26"><expr pos:start="4338:21" pos:end="4338:25"><name pos:start="4338:21" pos:end="4338:21">i</name> <operator pos:start="4338:23" pos:end="4338:23">=</operator> <literal type="number" pos:start="4338:25" pos:end="4338:25">0</literal></expr>;</init> <condition pos:start="4338:28" pos:end="4338:36"><expr pos:start="4338:28" pos:end="4338:35"><name pos:start="4338:28" pos:end="4338:28">i</name> <operator pos:start="4338:30" pos:end="4338:30">&lt;</operator> <name pos:start="4338:32" pos:end="4338:35">nfds</name></expr>;</condition> <incr pos:start="4338:38" pos:end="4338:40"><expr pos:start="4338:38" pos:end="4338:40"><name pos:start="4338:38" pos:end="4338:38">i</name><operator pos:start="4338:39" pos:end="4338:40">++</operator></expr></incr>)</control> <block pos:start="4338:43" pos:end="4342:17">{<block_content pos:start="4340:21" pos:end="4340:68">

                    <expr_stmt pos:start="4340:21" pos:end="4340:68"><expr pos:start="4340:21" pos:end="4340:67"><name pos:start="4340:21" pos:end="4340:33"><name pos:start="4340:21" pos:end="4340:30">target_pfd</name><index pos:start="4340:31" pos:end="4340:33">[<expr pos:start="4340:32" pos:end="4340:32"><name pos:start="4340:32" pos:end="4340:32">i</name></expr>]</index></name><operator pos:start="4340:34" pos:end="4340:34">.</operator><name pos:start="4340:35" pos:end="4340:41">revents</name> <operator pos:start="4340:43" pos:end="4340:43">=</operator> <call pos:start="4340:45" pos:end="4340:67"><name pos:start="4340:45" pos:end="4340:51">tswap16</name><argument_list pos:start="4340:52" pos:end="4340:67">(<argument pos:start="4340:53" pos:end="4340:66"><expr pos:start="4340:53" pos:end="4340:66"><name pos:start="4340:53" pos:end="4340:58"><name pos:start="4340:53" pos:end="4340:55">pfd</name><index pos:start="4340:56" pos:end="4340:58">[<expr pos:start="4340:57" pos:end="4340:57"><name pos:start="4340:57" pos:end="4340:57">i</name></expr>]</index></name><operator pos:start="4340:59" pos:end="4340:59">.</operator><name pos:start="4340:60" pos:end="4340:66">revents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4346:13" pos:end="4346:79"><expr pos:start="4346:13" pos:end="4346:78"><call pos:start="4346:13" pos:end="4346:78"><name pos:start="4346:13" pos:end="4346:23">unlock_user</name><argument_list pos:start="4346:24" pos:end="4346:78">(<argument pos:start="4346:25" pos:end="4346:34"><expr pos:start="4346:25" pos:end="4346:34"><name pos:start="4346:25" pos:end="4346:34">target_pfd</name></expr></argument>, <argument pos:start="4346:37" pos:end="4346:40"><expr pos:start="4346:37" pos:end="4346:40"><name pos:start="4346:37" pos:end="4346:40">arg1</name></expr></argument>, <argument pos:start="4346:43" pos:end="4346:77"><expr pos:start="4346:43" pos:end="4346:77"><sizeof pos:start="4346:43" pos:end="4346:70">sizeof<argument_list pos:start="4346:49" pos:end="4346:70">(<argument pos:start="4346:50" pos:end="4346:69"><expr pos:start="4346:50" pos:end="4346:69">struct <name pos:start="4346:57" pos:end="4346:69">target_pollfd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4346:72" pos:end="4346:72">*</operator> <name pos:start="4346:74" pos:end="4346:77">nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4350:9" pos:end="4353:0">break;</break>

<cpp:endif pos:start="4352:1" pos:end="4352:6">#<cpp:directive pos:start="4352:2" pos:end="4352:6">endif</cpp:directive></cpp:endif>

    <case pos:start="4354:5" pos:end="4354:25">case <expr pos:start="4354:10" pos:end="4354:24"><name pos:start="4354:10" pos:end="4354:24">TARGET_NR_flock</name></expr>:</case>

        <comment type="block" pos:start="4356:9" pos:end="4358:28">/* NOTE: the flock constant seems to be the same for every

           Linux platform */</comment>

        <expr_stmt pos:start="4360:9" pos:end="4360:43"><expr pos:start="4360:9" pos:end="4360:42"><name pos:start="4360:9" pos:end="4360:11">ret</name> <operator pos:start="4360:13" pos:end="4360:13">=</operator> <call pos:start="4360:15" pos:end="4360:42"><name pos:start="4360:15" pos:end="4360:23">get_errno</name><argument_list pos:start="4360:24" pos:end="4360:42">(<argument pos:start="4360:25" pos:end="4360:41"><expr pos:start="4360:25" pos:end="4360:41"><call pos:start="4360:25" pos:end="4360:41"><name pos:start="4360:25" pos:end="4360:29">flock</name><argument_list pos:start="4360:30" pos:end="4360:41">(<argument pos:start="4360:31" pos:end="4360:34"><expr pos:start="4360:31" pos:end="4360:34"><name pos:start="4360:31" pos:end="4360:34">arg1</name></expr></argument>, <argument pos:start="4360:37" pos:end="4360:40"><expr pos:start="4360:37" pos:end="4360:40"><name pos:start="4360:37" pos:end="4360:40">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4362:9" pos:end="4362:14">break;</break>

    <case pos:start="4364:5" pos:end="4364:25">case <expr pos:start="4364:10" pos:end="4364:24"><name pos:start="4364:10" pos:end="4364:24">TARGET_NR_readv</name></expr>:</case>

        <block pos:start="4366:9" pos:end="4382:9">{<block_content pos:start="4368:13" pos:end="4380:13">

            <decl_stmt pos:start="4368:13" pos:end="4368:72"><decl pos:start="4368:13" pos:end="4368:71"><type pos:start="4368:13" pos:end="4368:26"><name pos:start="4368:13" pos:end="4368:24"><name pos:start="4368:13" pos:end="4368:18">struct</name> <name pos:start="4368:20" pos:end="4368:24">iovec</name></name> <modifier pos:start="4368:26" pos:end="4368:26">*</modifier></type><name pos:start="4368:27" pos:end="4368:29">vec</name> <init pos:start="4368:31" pos:end="4368:71">= <expr pos:start="4368:33" pos:end="4368:71"><call pos:start="4368:33" pos:end="4368:71"><name pos:start="4368:33" pos:end="4368:42">lock_iovec</name><argument_list pos:start="4368:43" pos:end="4368:71">(<argument pos:start="4368:44" pos:end="4368:55"><expr pos:start="4368:44" pos:end="4368:55"><name pos:start="4368:44" pos:end="4368:55">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4368:58" pos:end="4368:61"><expr pos:start="4368:58" pos:end="4368:61"><name pos:start="4368:58" pos:end="4368:61">arg2</name></expr></argument>, <argument pos:start="4368:64" pos:end="4368:67"><expr pos:start="4368:64" pos:end="4368:67"><name pos:start="4368:64" pos:end="4368:67">arg3</name></expr></argument>, <argument pos:start="4368:70" pos:end="4368:70"><expr pos:start="4368:70" pos:end="4368:70"><literal type="number" pos:start="4368:70" pos:end="4368:70">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="4370:13" pos:end="4380:13"><if pos:start="4370:13" pos:end="4376:13">if <condition pos:start="4370:16" pos:end="4370:28">(<expr pos:start="4370:17" pos:end="4370:27"><name pos:start="4370:17" pos:end="4370:19">vec</name> <operator pos:start="4370:21" pos:end="4370:22">!=</operator> <name pos:start="4370:24" pos:end="4370:27">NULL</name></expr>)</condition> <block pos:start="4370:30" pos:end="4376:13">{<block_content pos:start="4372:17" pos:end="4374:49">

                <expr_stmt pos:start="4372:17" pos:end="4372:56"><expr pos:start="4372:17" pos:end="4372:55"><name pos:start="4372:17" pos:end="4372:19">ret</name> <operator pos:start="4372:21" pos:end="4372:21">=</operator> <call pos:start="4372:23" pos:end="4372:55"><name pos:start="4372:23" pos:end="4372:31">get_errno</name><argument_list pos:start="4372:32" pos:end="4372:55">(<argument pos:start="4372:33" pos:end="4372:54"><expr pos:start="4372:33" pos:end="4372:54"><call pos:start="4372:33" pos:end="4372:54"><name pos:start="4372:33" pos:end="4372:37">readv</name><argument_list pos:start="4372:38" pos:end="4372:54">(<argument pos:start="4372:39" pos:end="4372:42"><expr pos:start="4372:39" pos:end="4372:42"><name pos:start="4372:39" pos:end="4372:42">arg1</name></expr></argument>, <argument pos:start="4372:45" pos:end="4372:47"><expr pos:start="4372:45" pos:end="4372:47"><name pos:start="4372:45" pos:end="4372:47">vec</name></expr></argument>, <argument pos:start="4372:50" pos:end="4372:53"><expr pos:start="4372:50" pos:end="4372:53"><name pos:start="4372:50" pos:end="4372:53">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4374:17" pos:end="4374:49"><expr pos:start="4374:17" pos:end="4374:48"><call pos:start="4374:17" pos:end="4374:48"><name pos:start="4374:17" pos:end="4374:28">unlock_iovec</name><argument_list pos:start="4374:29" pos:end="4374:48">(<argument pos:start="4374:30" pos:end="4374:32"><expr pos:start="4374:30" pos:end="4374:32"><name pos:start="4374:30" pos:end="4374:32">vec</name></expr></argument>, <argument pos:start="4374:35" pos:end="4374:38"><expr pos:start="4374:35" pos:end="4374:38"><name pos:start="4374:35" pos:end="4374:38">arg2</name></expr></argument>, <argument pos:start="4374:41" pos:end="4374:44"><expr pos:start="4374:41" pos:end="4374:44"><name pos:start="4374:41" pos:end="4374:44">arg3</name></expr></argument>, <argument pos:start="4374:47" pos:end="4374:47"><expr pos:start="4374:47" pos:end="4374:47"><literal type="number" pos:start="4374:47" pos:end="4374:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4376:15" pos:end="4380:13">else <block pos:start="4376:20" pos:end="4380:13">{<block_content pos:start="4378:17" pos:end="4378:51">

                <expr_stmt pos:start="4378:17" pos:end="4378:51"><expr pos:start="4378:17" pos:end="4378:50"><name pos:start="4378:17" pos:end="4378:19">ret</name> <operator pos:start="4378:21" pos:end="4378:21">=</operator> <operator pos:start="4378:23" pos:end="4378:23">-</operator><call pos:start="4378:24" pos:end="4378:50"><name pos:start="4378:24" pos:end="4378:43">host_to_target_errno</name><argument_list pos:start="4378:44" pos:end="4378:50">(<argument pos:start="4378:45" pos:end="4378:49"><expr pos:start="4378:45" pos:end="4378:49"><name pos:start="4378:45" pos:end="4378:49">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="4384:9" pos:end="4384:14">break;</break>

    <case pos:start="4386:5" pos:end="4386:26">case <expr pos:start="4386:10" pos:end="4386:25"><name pos:start="4386:10" pos:end="4386:25">TARGET_NR_writev</name></expr>:</case>

        <block pos:start="4388:9" pos:end="4404:9">{<block_content pos:start="4390:13" pos:end="4402:13">

            <decl_stmt pos:start="4390:13" pos:end="4390:71"><decl pos:start="4390:13" pos:end="4390:70"><type pos:start="4390:13" pos:end="4390:26"><name pos:start="4390:13" pos:end="4390:24"><name pos:start="4390:13" pos:end="4390:18">struct</name> <name pos:start="4390:20" pos:end="4390:24">iovec</name></name> <modifier pos:start="4390:26" pos:end="4390:26">*</modifier></type><name pos:start="4390:27" pos:end="4390:29">vec</name> <init pos:start="4390:31" pos:end="4390:70">= <expr pos:start="4390:33" pos:end="4390:70"><call pos:start="4390:33" pos:end="4390:70"><name pos:start="4390:33" pos:end="4390:42">lock_iovec</name><argument_list pos:start="4390:43" pos:end="4390:70">(<argument pos:start="4390:44" pos:end="4390:54"><expr pos:start="4390:44" pos:end="4390:54"><name pos:start="4390:44" pos:end="4390:54">VERIFY_READ</name></expr></argument>, <argument pos:start="4390:57" pos:end="4390:60"><expr pos:start="4390:57" pos:end="4390:60"><name pos:start="4390:57" pos:end="4390:60">arg2</name></expr></argument>, <argument pos:start="4390:63" pos:end="4390:66"><expr pos:start="4390:63" pos:end="4390:66"><name pos:start="4390:63" pos:end="4390:66">arg3</name></expr></argument>, <argument pos:start="4390:69" pos:end="4390:69"><expr pos:start="4390:69" pos:end="4390:69"><literal type="number" pos:start="4390:69" pos:end="4390:69">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="4392:13" pos:end="4402:13"><if pos:start="4392:13" pos:end="4398:13">if <condition pos:start="4392:16" pos:end="4392:28">(<expr pos:start="4392:17" pos:end="4392:27"><name pos:start="4392:17" pos:end="4392:19">vec</name> <operator pos:start="4392:21" pos:end="4392:22">!=</operator> <name pos:start="4392:24" pos:end="4392:27">NULL</name></expr>)</condition> <block pos:start="4392:30" pos:end="4398:13">{<block_content pos:start="4394:17" pos:end="4396:49">

                <expr_stmt pos:start="4394:17" pos:end="4394:57"><expr pos:start="4394:17" pos:end="4394:56"><name pos:start="4394:17" pos:end="4394:19">ret</name> <operator pos:start="4394:21" pos:end="4394:21">=</operator> <call pos:start="4394:23" pos:end="4394:56"><name pos:start="4394:23" pos:end="4394:31">get_errno</name><argument_list pos:start="4394:32" pos:end="4394:56">(<argument pos:start="4394:33" pos:end="4394:55"><expr pos:start="4394:33" pos:end="4394:55"><call pos:start="4394:33" pos:end="4394:55"><name pos:start="4394:33" pos:end="4394:38">writev</name><argument_list pos:start="4394:39" pos:end="4394:55">(<argument pos:start="4394:40" pos:end="4394:43"><expr pos:start="4394:40" pos:end="4394:43"><name pos:start="4394:40" pos:end="4394:43">arg1</name></expr></argument>, <argument pos:start="4394:46" pos:end="4394:48"><expr pos:start="4394:46" pos:end="4394:48"><name pos:start="4394:46" pos:end="4394:48">vec</name></expr></argument>, <argument pos:start="4394:51" pos:end="4394:54"><expr pos:start="4394:51" pos:end="4394:54"><name pos:start="4394:51" pos:end="4394:54">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4396:17" pos:end="4396:49"><expr pos:start="4396:17" pos:end="4396:48"><call pos:start="4396:17" pos:end="4396:48"><name pos:start="4396:17" pos:end="4396:28">unlock_iovec</name><argument_list pos:start="4396:29" pos:end="4396:48">(<argument pos:start="4396:30" pos:end="4396:32"><expr pos:start="4396:30" pos:end="4396:32"><name pos:start="4396:30" pos:end="4396:32">vec</name></expr></argument>, <argument pos:start="4396:35" pos:end="4396:38"><expr pos:start="4396:35" pos:end="4396:38"><name pos:start="4396:35" pos:end="4396:38">arg2</name></expr></argument>, <argument pos:start="4396:41" pos:end="4396:44"><expr pos:start="4396:41" pos:end="4396:44"><name pos:start="4396:41" pos:end="4396:44">arg3</name></expr></argument>, <argument pos:start="4396:47" pos:end="4396:47"><expr pos:start="4396:47" pos:end="4396:47"><literal type="number" pos:start="4396:47" pos:end="4396:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4398:15" pos:end="4402:13">else <block pos:start="4398:20" pos:end="4402:13">{<block_content pos:start="4400:17" pos:end="4400:51">

                <expr_stmt pos:start="4400:17" pos:end="4400:51"><expr pos:start="4400:17" pos:end="4400:50"><name pos:start="4400:17" pos:end="4400:19">ret</name> <operator pos:start="4400:21" pos:end="4400:21">=</operator> <operator pos:start="4400:23" pos:end="4400:23">-</operator><call pos:start="4400:24" pos:end="4400:50"><name pos:start="4400:24" pos:end="4400:43">host_to_target_errno</name><argument_list pos:start="4400:44" pos:end="4400:50">(<argument pos:start="4400:45" pos:end="4400:49"><expr pos:start="4400:45" pos:end="4400:49"><name pos:start="4400:45" pos:end="4400:49">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="4406:9" pos:end="4406:14">break;</break>

    <case pos:start="4408:5" pos:end="4408:26">case <expr pos:start="4408:10" pos:end="4408:25"><name pos:start="4408:10" pos:end="4408:25">TARGET_NR_getsid</name></expr>:</case>

        <expr_stmt pos:start="4410:9" pos:end="4410:38"><expr pos:start="4410:9" pos:end="4410:37"><name pos:start="4410:9" pos:end="4410:11">ret</name> <operator pos:start="4410:13" pos:end="4410:13">=</operator> <call pos:start="4410:15" pos:end="4410:37"><name pos:start="4410:15" pos:end="4410:23">get_errno</name><argument_list pos:start="4410:24" pos:end="4410:37">(<argument pos:start="4410:25" pos:end="4410:36"><expr pos:start="4410:25" pos:end="4410:36"><call pos:start="4410:25" pos:end="4410:36"><name pos:start="4410:25" pos:end="4410:30">getsid</name><argument_list pos:start="4410:31" pos:end="4410:36">(<argument pos:start="4410:32" pos:end="4410:35"><expr pos:start="4410:32" pos:end="4410:35"><name pos:start="4410:32" pos:end="4410:35">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4412:9" pos:end="4415:0">break;</break>

<cpp:if pos:start="4414:1" pos:end="4414:32">#<cpp:directive pos:start="4414:2" pos:end="4414:3">if</cpp:directive> <expr pos:start="4414:5" pos:end="4414:32"><call pos:start="4414:5" pos:end="4414:32"><name pos:start="4414:5" pos:end="4414:11">defined</name><argument_list pos:start="4414:12" pos:end="4414:32">(<argument pos:start="4414:13" pos:end="4414:31"><expr pos:start="4414:13" pos:end="4414:31"><name pos:start="4414:13" pos:end="4414:31">TARGET_NR_fdatasync</name></expr></argument>)</argument_list></call></expr></cpp:if> <comment type="block" pos:start="4414:34" pos:end="4414:68">/* Not on alpha (osf_datasync ?) */</comment>

    <case pos:start="4416:5" pos:end="4416:29">case <expr pos:start="4416:10" pos:end="4416:28"><name pos:start="4416:10" pos:end="4416:28">TARGET_NR_fdatasync</name></expr>:</case>

        <expr_stmt pos:start="4418:9" pos:end="4418:41"><expr pos:start="4418:9" pos:end="4418:40"><name pos:start="4418:9" pos:end="4418:11">ret</name> <operator pos:start="4418:13" pos:end="4418:13">=</operator> <call pos:start="4418:15" pos:end="4418:40"><name pos:start="4418:15" pos:end="4418:23">get_errno</name><argument_list pos:start="4418:24" pos:end="4418:40">(<argument pos:start="4418:25" pos:end="4418:39"><expr pos:start="4418:25" pos:end="4418:39"><call pos:start="4418:25" pos:end="4418:39"><name pos:start="4418:25" pos:end="4418:33">fdatasync</name><argument_list pos:start="4418:34" pos:end="4418:39">(<argument pos:start="4418:35" pos:end="4418:38"><expr pos:start="4418:35" pos:end="4418:38"><name pos:start="4418:35" pos:end="4418:38">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4420:9" pos:end="4423:0">break;</break>

<cpp:endif pos:start="4422:1" pos:end="4422:6">#<cpp:directive pos:start="4422:2" pos:end="4422:6">endif</cpp:directive></cpp:endif>

    <case pos:start="4424:5" pos:end="4424:27">case <expr pos:start="4424:10" pos:end="4424:26"><name pos:start="4424:10" pos:end="4424:26">TARGET_NR__sysctl</name></expr>:</case>

        <comment type="block" pos:start="4426:9" pos:end="4428:27">/* We don't implement this, but ENOTDIR is always a safe

           return value. */</comment>

        <expr_stmt pos:start="4430:9" pos:end="4430:30"><expr pos:start="4430:9" pos:end="4430:29"><name pos:start="4430:9" pos:end="4430:11">ret</name> <operator pos:start="4430:13" pos:end="4430:13">=</operator> <operator pos:start="4430:15" pos:end="4430:15">-</operator><name pos:start="4430:16" pos:end="4430:29">TARGET_ENOTDIR</name></expr>;</expr_stmt>

        <break pos:start="4432:9" pos:end="4432:14">break;</break>

    <case pos:start="4434:5" pos:end="4434:37">case <expr pos:start="4434:10" pos:end="4434:36"><name pos:start="4434:10" pos:end="4434:36">TARGET_NR_sched_getaffinity</name></expr>:</case>

        <block pos:start="4436:9" pos:end="4480:9">{<block_content pos:start="4438:13" pos:end="4478:13">

            <decl_stmt pos:start="4438:13" pos:end="4438:35"><decl pos:start="4438:13" pos:end="4438:34"><type pos:start="4438:13" pos:end="4438:24"><name pos:start="4438:13" pos:end="4438:20">unsigned</name> <name pos:start="4438:22" pos:end="4438:24">int</name></type> <name pos:start="4438:26" pos:end="4438:34">mask_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4440:13" pos:end="4440:32"><decl pos:start="4440:13" pos:end="4440:31"><type pos:start="4440:13" pos:end="4440:27"><name pos:start="4440:13" pos:end="4440:20">unsigned</name> <name pos:start="4440:22" pos:end="4440:25">long</name> <modifier pos:start="4440:27" pos:end="4440:27">*</modifier></type><name pos:start="4440:28" pos:end="4440:31">mask</name></decl>;</decl_stmt>



            <comment type="block" pos:start="4444:13" pos:end="4450:15">/*

             * sched_getaffinity needs multiples of ulong, so need to take

             * care of mismatches between target ulong and host ulong sizes.

             */</comment>

            <if_stmt pos:start="4452:13" pos:end="4458:13"><if pos:start="4452:13" pos:end="4458:13">if <condition pos:start="4452:16" pos:end="4452:47">(<expr pos:start="4452:17" pos:end="4452:46"><name pos:start="4452:17" pos:end="4452:20">arg2</name> <operator pos:start="4452:22" pos:end="4452:22">&amp;</operator> <operator pos:start="4452:24" pos:end="4452:24">(</operator><sizeof pos:start="4452:25" pos:end="4452:41">sizeof<argument_list pos:start="4452:31" pos:end="4452:41">(<argument pos:start="4452:32" pos:end="4452:40"><expr pos:start="4452:32" pos:end="4452:40"><name pos:start="4452:32" pos:end="4452:40">abi_ulong</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4452:43" pos:end="4452:43">-</operator> <literal type="number" pos:start="4452:45" pos:end="4452:45">1</literal><operator pos:start="4452:46" pos:end="4452:46">)</operator></expr>)</condition> <block pos:start="4452:49" pos:end="4458:13">{<block_content pos:start="4454:17" pos:end="4456:22">

                <expr_stmt pos:start="4454:17" pos:end="4454:37"><expr pos:start="4454:17" pos:end="4454:36"><name pos:start="4454:17" pos:end="4454:19">ret</name> <operator pos:start="4454:21" pos:end="4454:21">=</operator> <operator pos:start="4454:23" pos:end="4454:23">-</operator><name pos:start="4454:24" pos:end="4454:36">TARGET_EINVAL</name></expr>;</expr_stmt>

                <break pos:start="4456:17" pos:end="4456:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4460:13" pos:end="4460:76"><expr pos:start="4460:13" pos:end="4460:75"><name pos:start="4460:13" pos:end="4460:21">mask_size</name> <operator pos:start="4460:23" pos:end="4460:23">=</operator> <operator pos:start="4460:25" pos:end="4460:25">(</operator><name pos:start="4460:26" pos:end="4460:29">arg2</name> <operator pos:start="4460:31" pos:end="4460:31">+</operator> <operator pos:start="4460:33" pos:end="4460:33">(</operator><sizeof pos:start="4460:34" pos:end="4460:46">sizeof<argument_list pos:start="4460:40" pos:end="4460:46">(<argument pos:start="4460:41" pos:end="4460:45"><expr pos:start="4460:41" pos:end="4460:45"><operator pos:start="4460:41" pos:end="4460:41">*</operator><name pos:start="4460:42" pos:end="4460:45">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4460:48" pos:end="4460:48">-</operator> <literal type="number" pos:start="4460:50" pos:end="4460:50">1</literal><operator pos:start="4460:51" pos:end="4460:51">)</operator><operator pos:start="4460:52" pos:end="4460:52">)</operator> <operator pos:start="4460:54" pos:end="4460:54">&amp;</operator> <operator pos:start="4460:56" pos:end="4460:56">~</operator><operator pos:start="4460:57" pos:end="4460:57">(</operator><sizeof pos:start="4460:58" pos:end="4460:70">sizeof<argument_list pos:start="4460:64" pos:end="4460:70">(<argument pos:start="4460:65" pos:end="4460:69"><expr pos:start="4460:65" pos:end="4460:69"><operator pos:start="4460:65" pos:end="4460:65">*</operator><name pos:start="4460:66" pos:end="4460:69">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4460:72" pos:end="4460:72">-</operator> <literal type="number" pos:start="4460:74" pos:end="4460:74">1</literal><operator pos:start="4460:75" pos:end="4460:75">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="4464:13" pos:end="4464:37"><expr pos:start="4464:13" pos:end="4464:36"><name pos:start="4464:13" pos:end="4464:16">mask</name> <operator pos:start="4464:18" pos:end="4464:18">=</operator> <call pos:start="4464:20" pos:end="4464:36"><name pos:start="4464:20" pos:end="4464:25">alloca</name><argument_list pos:start="4464:26" pos:end="4464:36">(<argument pos:start="4464:27" pos:end="4464:35"><expr pos:start="4464:27" pos:end="4464:35"><name pos:start="4464:27" pos:end="4464:35">mask_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4466:13" pos:end="4466:74"><expr pos:start="4466:13" pos:end="4466:73"><name pos:start="4466:13" pos:end="4466:15">ret</name> <operator pos:start="4466:17" pos:end="4466:17">=</operator> <call pos:start="4466:19" pos:end="4466:73"><name pos:start="4466:19" pos:end="4466:27">get_errno</name><argument_list pos:start="4466:28" pos:end="4466:73">(<argument pos:start="4466:29" pos:end="4466:72"><expr pos:start="4466:29" pos:end="4466:72"><call pos:start="4466:29" pos:end="4466:72"><name pos:start="4466:29" pos:end="4466:49">sys_sched_getaffinity</name><argument_list pos:start="4466:50" pos:end="4466:72">(<argument pos:start="4466:51" pos:end="4466:54"><expr pos:start="4466:51" pos:end="4466:54"><name pos:start="4466:51" pos:end="4466:54">arg1</name></expr></argument>, <argument pos:start="4466:57" pos:end="4466:65"><expr pos:start="4466:57" pos:end="4466:65"><name pos:start="4466:57" pos:end="4466:65">mask_size</name></expr></argument>, <argument pos:start="4466:68" pos:end="4466:71"><expr pos:start="4466:68" pos:end="4466:71"><name pos:start="4466:68" pos:end="4466:71">mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="4470:13" pos:end="4478:13"><if pos:start="4470:13" pos:end="4478:13">if <condition pos:start="4470:16" pos:end="4470:31">(<expr pos:start="4470:17" pos:end="4470:30"><operator pos:start="4470:17" pos:end="4470:17">!</operator><call pos:start="4470:18" pos:end="4470:30"><name pos:start="4470:18" pos:end="4470:25">is_error</name><argument_list pos:start="4470:26" pos:end="4470:30">(<argument pos:start="4470:27" pos:end="4470:29"><expr pos:start="4470:27" pos:end="4470:29"><name pos:start="4470:27" pos:end="4470:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4470:33" pos:end="4478:13">{<block_content pos:start="4472:17" pos:end="4476:17">

                <if_stmt pos:start="4472:17" pos:end="4476:17"><if pos:start="4472:17" pos:end="4476:17">if <condition pos:start="4472:20" pos:end="4472:50">(<expr pos:start="4472:21" pos:end="4472:49"><call pos:start="4472:21" pos:end="4472:49"><name pos:start="4472:21" pos:end="4472:32">copy_to_user</name><argument_list pos:start="4472:33" pos:end="4472:49">(<argument pos:start="4472:34" pos:end="4472:37"><expr pos:start="4472:34" pos:end="4472:37"><name pos:start="4472:34" pos:end="4472:37">arg3</name></expr></argument>, <argument pos:start="4472:40" pos:end="4472:43"><expr pos:start="4472:40" pos:end="4472:43"><name pos:start="4472:40" pos:end="4472:43">mask</name></expr></argument>, <argument pos:start="4472:46" pos:end="4472:48"><expr pos:start="4472:46" pos:end="4472:48"><name pos:start="4472:46" pos:end="4472:48">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4472:52" pos:end="4476:17">{<block_content pos:start="4474:21" pos:end="4474:32">

                    <goto pos:start="4474:21" pos:end="4474:32">goto <name pos:start="4474:26" pos:end="4474:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="4482:9" pos:end="4482:14">break;</break>

    <case pos:start="4484:5" pos:end="4484:37">case <expr pos:start="4484:10" pos:end="4484:36"><name pos:start="4484:10" pos:end="4484:36">TARGET_NR_sched_setaffinity</name></expr>:</case>

        <block pos:start="4486:9" pos:end="4530:9">{<block_content pos:start="4488:13" pos:end="4528:74">

            <decl_stmt pos:start="4488:13" pos:end="4488:35"><decl pos:start="4488:13" pos:end="4488:34"><type pos:start="4488:13" pos:end="4488:24"><name pos:start="4488:13" pos:end="4488:20">unsigned</name> <name pos:start="4488:22" pos:end="4488:24">int</name></type> <name pos:start="4488:26" pos:end="4488:34">mask_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4490:13" pos:end="4490:32"><decl pos:start="4490:13" pos:end="4490:31"><type pos:start="4490:13" pos:end="4490:27"><name pos:start="4490:13" pos:end="4490:20">unsigned</name> <name pos:start="4490:22" pos:end="4490:25">long</name> <modifier pos:start="4490:27" pos:end="4490:27">*</modifier></type><name pos:start="4490:28" pos:end="4490:31">mask</name></decl>;</decl_stmt>



            <comment type="block" pos:start="4494:13" pos:end="4500:15">/*

             * sched_setaffinity needs multiples of ulong, so need to take

             * care of mismatches between target ulong and host ulong sizes.

             */</comment>

            <if_stmt pos:start="4502:13" pos:end="4508:13"><if pos:start="4502:13" pos:end="4508:13">if <condition pos:start="4502:16" pos:end="4502:47">(<expr pos:start="4502:17" pos:end="4502:46"><name pos:start="4502:17" pos:end="4502:20">arg2</name> <operator pos:start="4502:22" pos:end="4502:22">&amp;</operator> <operator pos:start="4502:24" pos:end="4502:24">(</operator><sizeof pos:start="4502:25" pos:end="4502:41">sizeof<argument_list pos:start="4502:31" pos:end="4502:41">(<argument pos:start="4502:32" pos:end="4502:40"><expr pos:start="4502:32" pos:end="4502:40"><name pos:start="4502:32" pos:end="4502:40">abi_ulong</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4502:43" pos:end="4502:43">-</operator> <literal type="number" pos:start="4502:45" pos:end="4502:45">1</literal><operator pos:start="4502:46" pos:end="4502:46">)</operator></expr>)</condition> <block pos:start="4502:49" pos:end="4508:13">{<block_content pos:start="4504:17" pos:end="4506:22">

                <expr_stmt pos:start="4504:17" pos:end="4504:37"><expr pos:start="4504:17" pos:end="4504:36"><name pos:start="4504:17" pos:end="4504:19">ret</name> <operator pos:start="4504:21" pos:end="4504:21">=</operator> <operator pos:start="4504:23" pos:end="4504:23">-</operator><name pos:start="4504:24" pos:end="4504:36">TARGET_EINVAL</name></expr>;</expr_stmt>

                <break pos:start="4506:17" pos:end="4506:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4510:13" pos:end="4510:76"><expr pos:start="4510:13" pos:end="4510:75"><name pos:start="4510:13" pos:end="4510:21">mask_size</name> <operator pos:start="4510:23" pos:end="4510:23">=</operator> <operator pos:start="4510:25" pos:end="4510:25">(</operator><name pos:start="4510:26" pos:end="4510:29">arg2</name> <operator pos:start="4510:31" pos:end="4510:31">+</operator> <operator pos:start="4510:33" pos:end="4510:33">(</operator><sizeof pos:start="4510:34" pos:end="4510:46">sizeof<argument_list pos:start="4510:40" pos:end="4510:46">(<argument pos:start="4510:41" pos:end="4510:45"><expr pos:start="4510:41" pos:end="4510:45"><operator pos:start="4510:41" pos:end="4510:41">*</operator><name pos:start="4510:42" pos:end="4510:45">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4510:48" pos:end="4510:48">-</operator> <literal type="number" pos:start="4510:50" pos:end="4510:50">1</literal><operator pos:start="4510:51" pos:end="4510:51">)</operator><operator pos:start="4510:52" pos:end="4510:52">)</operator> <operator pos:start="4510:54" pos:end="4510:54">&amp;</operator> <operator pos:start="4510:56" pos:end="4510:56">~</operator><operator pos:start="4510:57" pos:end="4510:57">(</operator><sizeof pos:start="4510:58" pos:end="4510:70">sizeof<argument_list pos:start="4510:64" pos:end="4510:70">(<argument pos:start="4510:65" pos:end="4510:69"><expr pos:start="4510:65" pos:end="4510:69"><operator pos:start="4510:65" pos:end="4510:65">*</operator><name pos:start="4510:66" pos:end="4510:69">mask</name></expr></argument>)</argument_list></sizeof> <operator pos:start="4510:72" pos:end="4510:72">-</operator> <literal type="number" pos:start="4510:74" pos:end="4510:74">1</literal><operator pos:start="4510:75" pos:end="4510:75">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="4514:13" pos:end="4514:37"><expr pos:start="4514:13" pos:end="4514:36"><name pos:start="4514:13" pos:end="4514:16">mask</name> <operator pos:start="4514:18" pos:end="4514:18">=</operator> <call pos:start="4514:20" pos:end="4514:36"><name pos:start="4514:20" pos:end="4514:25">alloca</name><argument_list pos:start="4514:26" pos:end="4514:36">(<argument pos:start="4514:27" pos:end="4514:35"><expr pos:start="4514:27" pos:end="4514:35"><name pos:start="4514:27" pos:end="4514:35">mask_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4516:13" pos:end="4520:13"><if pos:start="4516:13" pos:end="4520:13">if <condition pos:start="4516:16" pos:end="4516:59">(<expr pos:start="4516:17" pos:end="4516:58"><operator pos:start="4516:17" pos:end="4516:17">!</operator><call pos:start="4516:18" pos:end="4516:58"><name pos:start="4516:18" pos:end="4516:33">lock_user_struct</name><argument_list pos:start="4516:34" pos:end="4516:58">(<argument pos:start="4516:35" pos:end="4516:45"><expr pos:start="4516:35" pos:end="4516:45"><name pos:start="4516:35" pos:end="4516:45">VERIFY_READ</name></expr></argument>, <argument pos:start="4516:48" pos:end="4516:48"><expr pos:start="4516:48" pos:end="4516:48"><name pos:start="4516:48" pos:end="4516:48">p</name></expr></argument>, <argument pos:start="4516:51" pos:end="4516:54"><expr pos:start="4516:51" pos:end="4516:54"><name pos:start="4516:51" pos:end="4516:54">arg3</name></expr></argument>, <argument pos:start="4516:57" pos:end="4516:57"><expr pos:start="4516:57" pos:end="4516:57"><literal type="number" pos:start="4516:57" pos:end="4516:57">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4516:61" pos:end="4520:13">{<block_content pos:start="4518:17" pos:end="4518:28">

                <goto pos:start="4518:17" pos:end="4518:28">goto <name pos:start="4518:22" pos:end="4518:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4522:13" pos:end="4522:34"><expr pos:start="4522:13" pos:end="4522:33"><call pos:start="4522:13" pos:end="4522:33"><name pos:start="4522:13" pos:end="4522:18">memcpy</name><argument_list pos:start="4522:19" pos:end="4522:33">(<argument pos:start="4522:20" pos:end="4522:23"><expr pos:start="4522:20" pos:end="4522:23"><name pos:start="4522:20" pos:end="4522:23">mask</name></expr></argument>, <argument pos:start="4522:26" pos:end="4522:26"><expr pos:start="4522:26" pos:end="4522:26"><name pos:start="4522:26" pos:end="4522:26">p</name></expr></argument>, <argument pos:start="4522:29" pos:end="4522:32"><expr pos:start="4522:29" pos:end="4522:32"><name pos:start="4522:29" pos:end="4522:32">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4524:13" pos:end="4524:43"><expr pos:start="4524:13" pos:end="4524:42"><call pos:start="4524:13" pos:end="4524:42"><name pos:start="4524:13" pos:end="4524:30">unlock_user_struct</name><argument_list pos:start="4524:31" pos:end="4524:42">(<argument pos:start="4524:32" pos:end="4524:32"><expr pos:start="4524:32" pos:end="4524:32"><name pos:start="4524:32" pos:end="4524:32">p</name></expr></argument>, <argument pos:start="4524:35" pos:end="4524:38"><expr pos:start="4524:35" pos:end="4524:38"><name pos:start="4524:35" pos:end="4524:38">arg2</name></expr></argument>, <argument pos:start="4524:41" pos:end="4524:41"><expr pos:start="4524:41" pos:end="4524:41"><literal type="number" pos:start="4524:41" pos:end="4524:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="4528:13" pos:end="4528:74"><expr pos:start="4528:13" pos:end="4528:73"><name pos:start="4528:13" pos:end="4528:15">ret</name> <operator pos:start="4528:17" pos:end="4528:17">=</operator> <call pos:start="4528:19" pos:end="4528:73"><name pos:start="4528:19" pos:end="4528:27">get_errno</name><argument_list pos:start="4528:28" pos:end="4528:73">(<argument pos:start="4528:29" pos:end="4528:72"><expr pos:start="4528:29" pos:end="4528:72"><call pos:start="4528:29" pos:end="4528:72"><name pos:start="4528:29" pos:end="4528:49">sys_sched_setaffinity</name><argument_list pos:start="4528:50" pos:end="4528:72">(<argument pos:start="4528:51" pos:end="4528:54"><expr pos:start="4528:51" pos:end="4528:54"><name pos:start="4528:51" pos:end="4528:54">arg1</name></expr></argument>, <argument pos:start="4528:57" pos:end="4528:65"><expr pos:start="4528:57" pos:end="4528:65"><name pos:start="4528:57" pos:end="4528:65">mask_size</name></expr></argument>, <argument pos:start="4528:68" pos:end="4528:71"><expr pos:start="4528:68" pos:end="4528:71"><name pos:start="4528:68" pos:end="4528:71">mask</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4532:9" pos:end="4532:14">break;</break>

    <case pos:start="4534:5" pos:end="4534:34">case <expr pos:start="4534:10" pos:end="4534:33"><name pos:start="4534:10" pos:end="4534:33">TARGET_NR_sched_setparam</name></expr>:</case>

        <block pos:start="4536:9" pos:end="4554:9">{<block_content pos:start="4538:13" pos:end="4552:57">

            <decl_stmt pos:start="4538:13" pos:end="4538:44"><decl pos:start="4538:13" pos:end="4538:43"><type pos:start="4538:13" pos:end="4538:32"><name pos:start="4538:13" pos:end="4538:30"><name pos:start="4538:13" pos:end="4538:18">struct</name> <name pos:start="4538:20" pos:end="4538:30">sched_param</name></name> <modifier pos:start="4538:32" pos:end="4538:32">*</modifier></type><name pos:start="4538:33" pos:end="4538:43">target_schp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4540:13" pos:end="4540:36"><decl pos:start="4540:13" pos:end="4540:35"><type pos:start="4540:13" pos:end="4540:30"><name pos:start="4540:13" pos:end="4540:30"><name pos:start="4540:13" pos:end="4540:18">struct</name> <name pos:start="4540:20" pos:end="4540:30">sched_param</name></name></type> <name pos:start="4540:32" pos:end="4540:35">schp</name></decl>;</decl_stmt>



            <if_stmt pos:start="4544:13" pos:end="4546:28"><if pos:start="4544:13" pos:end="4546:28">if <condition pos:start="4544:16" pos:end="4544:69">(<expr pos:start="4544:17" pos:end="4544:68"><operator pos:start="4544:17" pos:end="4544:17">!</operator><call pos:start="4544:18" pos:end="4544:68"><name pos:start="4544:18" pos:end="4544:33">lock_user_struct</name><argument_list pos:start="4544:34" pos:end="4544:68">(<argument pos:start="4544:35" pos:end="4544:45"><expr pos:start="4544:35" pos:end="4544:45"><name pos:start="4544:35" pos:end="4544:45">VERIFY_READ</name></expr></argument>, <argument pos:start="4544:48" pos:end="4544:58"><expr pos:start="4544:48" pos:end="4544:58"><name pos:start="4544:48" pos:end="4544:58">target_schp</name></expr></argument>, <argument pos:start="4544:61" pos:end="4544:64"><expr pos:start="4544:61" pos:end="4544:64"><name pos:start="4544:61" pos:end="4544:64">arg2</name></expr></argument>, <argument pos:start="4544:67" pos:end="4544:67"><expr pos:start="4544:67" pos:end="4544:67"><literal type="number" pos:start="4544:67" pos:end="4544:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4546:17" pos:end="4546:28"><block_content pos:start="4546:17" pos:end="4546:28">

                <goto pos:start="4546:17" pos:end="4546:28">goto <name pos:start="4546:22" pos:end="4546:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4548:13" pos:end="4548:71"><expr pos:start="4548:13" pos:end="4548:70"><name pos:start="4548:13" pos:end="4548:31"><name pos:start="4548:13" pos:end="4548:16">schp</name><operator pos:start="4548:17" pos:end="4548:17">.</operator><name pos:start="4548:18" pos:end="4548:31">sched_priority</name></name> <operator pos:start="4548:33" pos:end="4548:33">=</operator> <call pos:start="4548:35" pos:end="4548:70"><name pos:start="4548:35" pos:end="4548:41">tswap32</name><argument_list pos:start="4548:42" pos:end="4548:70">(<argument pos:start="4548:43" pos:end="4548:69"><expr pos:start="4548:43" pos:end="4548:69"><name pos:start="4548:43" pos:end="4548:69"><name pos:start="4548:43" pos:end="4548:53">target_schp</name><operator pos:start="4548:54" pos:end="4548:55">-&gt;</operator><name pos:start="4548:56" pos:end="4548:69">sched_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4550:13" pos:end="4550:53"><expr pos:start="4550:13" pos:end="4550:52"><call pos:start="4550:13" pos:end="4550:52"><name pos:start="4550:13" pos:end="4550:30">unlock_user_struct</name><argument_list pos:start="4550:31" pos:end="4550:52">(<argument pos:start="4550:32" pos:end="4550:42"><expr pos:start="4550:32" pos:end="4550:42"><name pos:start="4550:32" pos:end="4550:42">target_schp</name></expr></argument>, <argument pos:start="4550:45" pos:end="4550:48"><expr pos:start="4550:45" pos:end="4550:48"><name pos:start="4550:45" pos:end="4550:48">arg2</name></expr></argument>, <argument pos:start="4550:51" pos:end="4550:51"><expr pos:start="4550:51" pos:end="4550:51"><literal type="number" pos:start="4550:51" pos:end="4550:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4552:13" pos:end="4552:57"><expr pos:start="4552:13" pos:end="4552:56"><name pos:start="4552:13" pos:end="4552:15">ret</name> <operator pos:start="4552:17" pos:end="4552:17">=</operator> <call pos:start="4552:19" pos:end="4552:56"><name pos:start="4552:19" pos:end="4552:27">get_errno</name><argument_list pos:start="4552:28" pos:end="4552:56">(<argument pos:start="4552:29" pos:end="4552:55"><expr pos:start="4552:29" pos:end="4552:55"><call pos:start="4552:29" pos:end="4552:55"><name pos:start="4552:29" pos:end="4552:42">sched_setparam</name><argument_list pos:start="4552:43" pos:end="4552:55">(<argument pos:start="4552:44" pos:end="4552:47"><expr pos:start="4552:44" pos:end="4552:47"><name pos:start="4552:44" pos:end="4552:47">arg1</name></expr></argument>, <argument pos:start="4552:50" pos:end="4552:54"><expr pos:start="4552:50" pos:end="4552:54"><operator pos:start="4552:50" pos:end="4552:50">&amp;</operator><name pos:start="4552:51" pos:end="4552:54">schp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4556:9" pos:end="4556:14">break;</break>

    <case pos:start="4558:5" pos:end="4558:34">case <expr pos:start="4558:10" pos:end="4558:33"><name pos:start="4558:10" pos:end="4558:33">TARGET_NR_sched_getparam</name></expr>:</case>

        <block pos:start="4560:9" pos:end="4580:9">{<block_content pos:start="4562:13" pos:end="4578:13">

            <decl_stmt pos:start="4562:13" pos:end="4562:44"><decl pos:start="4562:13" pos:end="4562:43"><type pos:start="4562:13" pos:end="4562:32"><name pos:start="4562:13" pos:end="4562:30"><name pos:start="4562:13" pos:end="4562:18">struct</name> <name pos:start="4562:20" pos:end="4562:30">sched_param</name></name> <modifier pos:start="4562:32" pos:end="4562:32">*</modifier></type><name pos:start="4562:33" pos:end="4562:43">target_schp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4564:13" pos:end="4564:36"><decl pos:start="4564:13" pos:end="4564:35"><type pos:start="4564:13" pos:end="4564:30"><name pos:start="4564:13" pos:end="4564:30"><name pos:start="4564:13" pos:end="4564:18">struct</name> <name pos:start="4564:20" pos:end="4564:30">sched_param</name></name></type> <name pos:start="4564:32" pos:end="4564:35">schp</name></decl>;</decl_stmt>

            <expr_stmt pos:start="4566:13" pos:end="4566:57"><expr pos:start="4566:13" pos:end="4566:56"><name pos:start="4566:13" pos:end="4566:15">ret</name> <operator pos:start="4566:17" pos:end="4566:17">=</operator> <call pos:start="4566:19" pos:end="4566:56"><name pos:start="4566:19" pos:end="4566:27">get_errno</name><argument_list pos:start="4566:28" pos:end="4566:56">(<argument pos:start="4566:29" pos:end="4566:55"><expr pos:start="4566:29" pos:end="4566:55"><call pos:start="4566:29" pos:end="4566:55"><name pos:start="4566:29" pos:end="4566:42">sched_getparam</name><argument_list pos:start="4566:43" pos:end="4566:55">(<argument pos:start="4566:44" pos:end="4566:47"><expr pos:start="4566:44" pos:end="4566:47"><name pos:start="4566:44" pos:end="4566:47">arg1</name></expr></argument>, <argument pos:start="4566:50" pos:end="4566:54"><expr pos:start="4566:50" pos:end="4566:54"><operator pos:start="4566:50" pos:end="4566:50">&amp;</operator><name pos:start="4566:51" pos:end="4566:54">schp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4568:13" pos:end="4578:13"><if pos:start="4568:13" pos:end="4578:13">if <condition pos:start="4568:16" pos:end="4568:31">(<expr pos:start="4568:17" pos:end="4568:30"><operator pos:start="4568:17" pos:end="4568:17">!</operator><call pos:start="4568:18" pos:end="4568:30"><name pos:start="4568:18" pos:end="4568:25">is_error</name><argument_list pos:start="4568:26" pos:end="4568:30">(<argument pos:start="4568:27" pos:end="4568:29"><expr pos:start="4568:27" pos:end="4568:29"><name pos:start="4568:27" pos:end="4568:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4568:33" pos:end="4578:13">{<block_content pos:start="4570:17" pos:end="4576:57">

                <if_stmt pos:start="4570:17" pos:end="4572:32"><if pos:start="4570:17" pos:end="4572:32">if <condition pos:start="4570:20" pos:end="4570:74">(<expr pos:start="4570:21" pos:end="4570:73"><operator pos:start="4570:21" pos:end="4570:21">!</operator><call pos:start="4570:22" pos:end="4570:73"><name pos:start="4570:22" pos:end="4570:37">lock_user_struct</name><argument_list pos:start="4570:38" pos:end="4570:73">(<argument pos:start="4570:39" pos:end="4570:50"><expr pos:start="4570:39" pos:end="4570:50"><name pos:start="4570:39" pos:end="4570:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4570:53" pos:end="4570:63"><expr pos:start="4570:53" pos:end="4570:63"><name pos:start="4570:53" pos:end="4570:63">target_schp</name></expr></argument>, <argument pos:start="4570:66" pos:end="4570:69"><expr pos:start="4570:66" pos:end="4570:69"><name pos:start="4570:66" pos:end="4570:69">arg2</name></expr></argument>, <argument pos:start="4570:72" pos:end="4570:72"><expr pos:start="4570:72" pos:end="4570:72"><literal type="number" pos:start="4570:72" pos:end="4570:72">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4572:21" pos:end="4572:32"><block_content pos:start="4572:21" pos:end="4572:32">

                    <goto pos:start="4572:21" pos:end="4572:32">goto <name pos:start="4572:26" pos:end="4572:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="4574:17" pos:end="4574:75"><expr pos:start="4574:17" pos:end="4574:74"><name pos:start="4574:17" pos:end="4574:43"><name pos:start="4574:17" pos:end="4574:27">target_schp</name><operator pos:start="4574:28" pos:end="4574:29">-&gt;</operator><name pos:start="4574:30" pos:end="4574:43">sched_priority</name></name> <operator pos:start="4574:45" pos:end="4574:45">=</operator> <call pos:start="4574:47" pos:end="4574:74"><name pos:start="4574:47" pos:end="4574:53">tswap32</name><argument_list pos:start="4574:54" pos:end="4574:74">(<argument pos:start="4574:55" pos:end="4574:73"><expr pos:start="4574:55" pos:end="4574:73"><name pos:start="4574:55" pos:end="4574:73"><name pos:start="4574:55" pos:end="4574:58">schp</name><operator pos:start="4574:59" pos:end="4574:59">.</operator><name pos:start="4574:60" pos:end="4574:73">sched_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4576:17" pos:end="4576:57"><expr pos:start="4576:17" pos:end="4576:56"><call pos:start="4576:17" pos:end="4576:56"><name pos:start="4576:17" pos:end="4576:34">unlock_user_struct</name><argument_list pos:start="4576:35" pos:end="4576:56">(<argument pos:start="4576:36" pos:end="4576:46"><expr pos:start="4576:36" pos:end="4576:46"><name pos:start="4576:36" pos:end="4576:46">target_schp</name></expr></argument>, <argument pos:start="4576:49" pos:end="4576:52"><expr pos:start="4576:49" pos:end="4576:52"><name pos:start="4576:49" pos:end="4576:52">arg2</name></expr></argument>, <argument pos:start="4576:55" pos:end="4576:55"><expr pos:start="4576:55" pos:end="4576:55"><literal type="number" pos:start="4576:55" pos:end="4576:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="4582:9" pos:end="4582:14">break;</break>

    <case pos:start="4584:5" pos:end="4584:38">case <expr pos:start="4584:10" pos:end="4584:37"><name pos:start="4584:10" pos:end="4584:37">TARGET_NR_sched_setscheduler</name></expr>:</case>

        <block pos:start="4586:9" pos:end="4602:9">{<block_content pos:start="4588:13" pos:end="4600:67">

            <decl_stmt pos:start="4588:13" pos:end="4588:44"><decl pos:start="4588:13" pos:end="4588:43"><type pos:start="4588:13" pos:end="4588:32"><name pos:start="4588:13" pos:end="4588:30"><name pos:start="4588:13" pos:end="4588:18">struct</name> <name pos:start="4588:20" pos:end="4588:30">sched_param</name></name> <modifier pos:start="4588:32" pos:end="4588:32">*</modifier></type><name pos:start="4588:33" pos:end="4588:43">target_schp</name></decl>;</decl_stmt>

            <decl_stmt pos:start="4590:13" pos:end="4590:36"><decl pos:start="4590:13" pos:end="4590:35"><type pos:start="4590:13" pos:end="4590:30"><name pos:start="4590:13" pos:end="4590:30"><name pos:start="4590:13" pos:end="4590:18">struct</name> <name pos:start="4590:20" pos:end="4590:30">sched_param</name></name></type> <name pos:start="4590:32" pos:end="4590:35">schp</name></decl>;</decl_stmt>

            <if_stmt pos:start="4592:13" pos:end="4594:28"><if pos:start="4592:13" pos:end="4594:28">if <condition pos:start="4592:16" pos:end="4592:69">(<expr pos:start="4592:17" pos:end="4592:68"><operator pos:start="4592:17" pos:end="4592:17">!</operator><call pos:start="4592:18" pos:end="4592:68"><name pos:start="4592:18" pos:end="4592:33">lock_user_struct</name><argument_list pos:start="4592:34" pos:end="4592:68">(<argument pos:start="4592:35" pos:end="4592:45"><expr pos:start="4592:35" pos:end="4592:45"><name pos:start="4592:35" pos:end="4592:45">VERIFY_READ</name></expr></argument>, <argument pos:start="4592:48" pos:end="4592:58"><expr pos:start="4592:48" pos:end="4592:58"><name pos:start="4592:48" pos:end="4592:58">target_schp</name></expr></argument>, <argument pos:start="4592:61" pos:end="4592:64"><expr pos:start="4592:61" pos:end="4592:64"><name pos:start="4592:61" pos:end="4592:64">arg3</name></expr></argument>, <argument pos:start="4592:67" pos:end="4592:67"><expr pos:start="4592:67" pos:end="4592:67"><literal type="number" pos:start="4592:67" pos:end="4592:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4594:17" pos:end="4594:28"><block_content pos:start="4594:17" pos:end="4594:28">

                <goto pos:start="4594:17" pos:end="4594:28">goto <name pos:start="4594:22" pos:end="4594:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4596:13" pos:end="4596:71"><expr pos:start="4596:13" pos:end="4596:70"><name pos:start="4596:13" pos:end="4596:31"><name pos:start="4596:13" pos:end="4596:16">schp</name><operator pos:start="4596:17" pos:end="4596:17">.</operator><name pos:start="4596:18" pos:end="4596:31">sched_priority</name></name> <operator pos:start="4596:33" pos:end="4596:33">=</operator> <call pos:start="4596:35" pos:end="4596:70"><name pos:start="4596:35" pos:end="4596:41">tswap32</name><argument_list pos:start="4596:42" pos:end="4596:70">(<argument pos:start="4596:43" pos:end="4596:69"><expr pos:start="4596:43" pos:end="4596:69"><name pos:start="4596:43" pos:end="4596:69"><name pos:start="4596:43" pos:end="4596:53">target_schp</name><operator pos:start="4596:54" pos:end="4596:55">-&gt;</operator><name pos:start="4596:56" pos:end="4596:69">sched_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4598:13" pos:end="4598:53"><expr pos:start="4598:13" pos:end="4598:52"><call pos:start="4598:13" pos:end="4598:52"><name pos:start="4598:13" pos:end="4598:30">unlock_user_struct</name><argument_list pos:start="4598:31" pos:end="4598:52">(<argument pos:start="4598:32" pos:end="4598:42"><expr pos:start="4598:32" pos:end="4598:42"><name pos:start="4598:32" pos:end="4598:42">target_schp</name></expr></argument>, <argument pos:start="4598:45" pos:end="4598:48"><expr pos:start="4598:45" pos:end="4598:48"><name pos:start="4598:45" pos:end="4598:48">arg3</name></expr></argument>, <argument pos:start="4598:51" pos:end="4598:51"><expr pos:start="4598:51" pos:end="4598:51"><literal type="number" pos:start="4598:51" pos:end="4598:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4600:13" pos:end="4600:67"><expr pos:start="4600:13" pos:end="4600:66"><name pos:start="4600:13" pos:end="4600:15">ret</name> <operator pos:start="4600:17" pos:end="4600:17">=</operator> <call pos:start="4600:19" pos:end="4600:66"><name pos:start="4600:19" pos:end="4600:27">get_errno</name><argument_list pos:start="4600:28" pos:end="4600:66">(<argument pos:start="4600:29" pos:end="4600:65"><expr pos:start="4600:29" pos:end="4600:65"><call pos:start="4600:29" pos:end="4600:65"><name pos:start="4600:29" pos:end="4600:46">sched_setscheduler</name><argument_list pos:start="4600:47" pos:end="4600:65">(<argument pos:start="4600:48" pos:end="4600:51"><expr pos:start="4600:48" pos:end="4600:51"><name pos:start="4600:48" pos:end="4600:51">arg1</name></expr></argument>, <argument pos:start="4600:54" pos:end="4600:57"><expr pos:start="4600:54" pos:end="4600:57"><name pos:start="4600:54" pos:end="4600:57">arg2</name></expr></argument>, <argument pos:start="4600:60" pos:end="4600:64"><expr pos:start="4600:60" pos:end="4600:64"><operator pos:start="4600:60" pos:end="4600:60">&amp;</operator><name pos:start="4600:61" pos:end="4600:64">schp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="4604:9" pos:end="4604:14">break;</break>

    <case pos:start="4606:5" pos:end="4606:38">case <expr pos:start="4606:10" pos:end="4606:37"><name pos:start="4606:10" pos:end="4606:37">TARGET_NR_sched_getscheduler</name></expr>:</case>

        <expr_stmt pos:start="4608:9" pos:end="4608:50"><expr pos:start="4608:9" pos:end="4608:49"><name pos:start="4608:9" pos:end="4608:11">ret</name> <operator pos:start="4608:13" pos:end="4608:13">=</operator> <call pos:start="4608:15" pos:end="4608:49"><name pos:start="4608:15" pos:end="4608:23">get_errno</name><argument_list pos:start="4608:24" pos:end="4608:49">(<argument pos:start="4608:25" pos:end="4608:48"><expr pos:start="4608:25" pos:end="4608:48"><call pos:start="4608:25" pos:end="4608:48"><name pos:start="4608:25" pos:end="4608:42">sched_getscheduler</name><argument_list pos:start="4608:43" pos:end="4608:48">(<argument pos:start="4608:44" pos:end="4608:47"><expr pos:start="4608:44" pos:end="4608:47"><name pos:start="4608:44" pos:end="4608:47">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4610:9" pos:end="4610:14">break;</break>

    <case pos:start="4612:5" pos:end="4612:31">case <expr pos:start="4612:10" pos:end="4612:30"><name pos:start="4612:10" pos:end="4612:30">TARGET_NR_sched_yield</name></expr>:</case>

        <expr_stmt pos:start="4614:9" pos:end="4614:39"><expr pos:start="4614:9" pos:end="4614:38"><name pos:start="4614:9" pos:end="4614:11">ret</name> <operator pos:start="4614:13" pos:end="4614:13">=</operator> <call pos:start="4614:15" pos:end="4614:38"><name pos:start="4614:15" pos:end="4614:23">get_errno</name><argument_list pos:start="4614:24" pos:end="4614:38">(<argument pos:start="4614:25" pos:end="4614:37"><expr pos:start="4614:25" pos:end="4614:37"><call pos:start="4614:25" pos:end="4614:37"><name pos:start="4614:25" pos:end="4614:35">sched_yield</name><argument_list pos:start="4614:36" pos:end="4614:37">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4616:9" pos:end="4616:14">break;</break>

    <case pos:start="4618:5" pos:end="4618:42">case <expr pos:start="4618:10" pos:end="4618:41"><name pos:start="4618:10" pos:end="4618:41">TARGET_NR_sched_get_priority_max</name></expr>:</case>

        <expr_stmt pos:start="4620:9" pos:end="4620:54"><expr pos:start="4620:9" pos:end="4620:53"><name pos:start="4620:9" pos:end="4620:11">ret</name> <operator pos:start="4620:13" pos:end="4620:13">=</operator> <call pos:start="4620:15" pos:end="4620:53"><name pos:start="4620:15" pos:end="4620:23">get_errno</name><argument_list pos:start="4620:24" pos:end="4620:53">(<argument pos:start="4620:25" pos:end="4620:52"><expr pos:start="4620:25" pos:end="4620:52"><call pos:start="4620:25" pos:end="4620:52"><name pos:start="4620:25" pos:end="4620:46">sched_get_priority_max</name><argument_list pos:start="4620:47" pos:end="4620:52">(<argument pos:start="4620:48" pos:end="4620:51"><expr pos:start="4620:48" pos:end="4620:51"><name pos:start="4620:48" pos:end="4620:51">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4622:9" pos:end="4622:14">break;</break>

    <case pos:start="4624:5" pos:end="4624:42">case <expr pos:start="4624:10" pos:end="4624:41"><name pos:start="4624:10" pos:end="4624:41">TARGET_NR_sched_get_priority_min</name></expr>:</case>

        <expr_stmt pos:start="4626:9" pos:end="4626:54"><expr pos:start="4626:9" pos:end="4626:53"><name pos:start="4626:9" pos:end="4626:11">ret</name> <operator pos:start="4626:13" pos:end="4626:13">=</operator> <call pos:start="4626:15" pos:end="4626:53"><name pos:start="4626:15" pos:end="4626:23">get_errno</name><argument_list pos:start="4626:24" pos:end="4626:53">(<argument pos:start="4626:25" pos:end="4626:52"><expr pos:start="4626:25" pos:end="4626:52"><call pos:start="4626:25" pos:end="4626:52"><name pos:start="4626:25" pos:end="4626:46">sched_get_priority_min</name><argument_list pos:start="4626:47" pos:end="4626:52">(<argument pos:start="4626:48" pos:end="4626:51"><expr pos:start="4626:48" pos:end="4626:51"><name pos:start="4626:48" pos:end="4626:51">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4628:9" pos:end="4628:14">break;</break>

    <case pos:start="4630:5" pos:end="4630:41">case <expr pos:start="4630:10" pos:end="4630:40"><name pos:start="4630:10" pos:end="4630:40">TARGET_NR_sched_rr_get_interval</name></expr>:</case>

        <block pos:start="4632:9" pos:end="4644:9">{<block_content pos:start="4634:13" pos:end="4642:13">

            <decl_stmt pos:start="4634:13" pos:end="4634:31"><decl pos:start="4634:13" pos:end="4634:30"><type pos:start="4634:13" pos:end="4634:27"><name pos:start="4634:13" pos:end="4634:27"><name pos:start="4634:13" pos:end="4634:18">struct</name> <name pos:start="4634:20" pos:end="4634:27">timespec</name></name></type> <name pos:start="4634:29" pos:end="4634:30">ts</name></decl>;</decl_stmt>

            <expr_stmt pos:start="4636:13" pos:end="4636:62"><expr pos:start="4636:13" pos:end="4636:61"><name pos:start="4636:13" pos:end="4636:15">ret</name> <operator pos:start="4636:17" pos:end="4636:17">=</operator> <call pos:start="4636:19" pos:end="4636:61"><name pos:start="4636:19" pos:end="4636:27">get_errno</name><argument_list pos:start="4636:28" pos:end="4636:61">(<argument pos:start="4636:29" pos:end="4636:60"><expr pos:start="4636:29" pos:end="4636:60"><call pos:start="4636:29" pos:end="4636:60"><name pos:start="4636:29" pos:end="4636:49">sched_rr_get_interval</name><argument_list pos:start="4636:50" pos:end="4636:60">(<argument pos:start="4636:51" pos:end="4636:54"><expr pos:start="4636:51" pos:end="4636:54"><name pos:start="4636:51" pos:end="4636:54">arg1</name></expr></argument>, <argument pos:start="4636:57" pos:end="4636:59"><expr pos:start="4636:57" pos:end="4636:59"><operator pos:start="4636:57" pos:end="4636:57">&amp;</operator><name pos:start="4636:58" pos:end="4636:59">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4638:13" pos:end="4642:13"><if pos:start="4638:13" pos:end="4642:13">if <condition pos:start="4638:16" pos:end="4638:31">(<expr pos:start="4638:17" pos:end="4638:30"><operator pos:start="4638:17" pos:end="4638:17">!</operator><call pos:start="4638:18" pos:end="4638:30"><name pos:start="4638:18" pos:end="4638:25">is_error</name><argument_list pos:start="4638:26" pos:end="4638:30">(<argument pos:start="4638:27" pos:end="4638:29"><expr pos:start="4638:27" pos:end="4638:29"><name pos:start="4638:27" pos:end="4638:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4638:33" pos:end="4642:13">{<block_content pos:start="4640:17" pos:end="4640:51">

                <expr_stmt pos:start="4640:17" pos:end="4640:51"><expr pos:start="4640:17" pos:end="4640:50"><call pos:start="4640:17" pos:end="4640:50"><name pos:start="4640:17" pos:end="4640:39">host_to_target_timespec</name><argument_list pos:start="4640:40" pos:end="4640:50">(<argument pos:start="4640:41" pos:end="4640:44"><expr pos:start="4640:41" pos:end="4640:44"><name pos:start="4640:41" pos:end="4640:44">arg2</name></expr></argument>, <argument pos:start="4640:47" pos:end="4640:49"><expr pos:start="4640:47" pos:end="4640:49"><operator pos:start="4640:47" pos:end="4640:47">&amp;</operator><name pos:start="4640:48" pos:end="4640:49">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="4646:9" pos:end="4646:14">break;</break>

    <case pos:start="4648:5" pos:end="4648:29">case <expr pos:start="4648:10" pos:end="4648:28"><name pos:start="4648:10" pos:end="4648:28">TARGET_NR_nanosleep</name></expr>:</case>

        <block pos:start="4650:9" pos:end="4664:9">{<block_content pos:start="4652:13" pos:end="4662:13">

            <decl_stmt pos:start="4652:13" pos:end="4652:37"><decl pos:start="4652:13" pos:end="4652:31"><type pos:start="4652:13" pos:end="4652:27"><name pos:start="4652:13" pos:end="4652:27"><name pos:start="4652:13" pos:end="4652:18">struct</name> <name pos:start="4652:20" pos:end="4652:27">timespec</name></name></type> <name pos:start="4652:29" pos:end="4652:31">req</name></decl>, <decl pos:start="4652:34" pos:end="4652:36"><type ref="prev" pos:start="4652:13" pos:end="4652:27"/><name pos:start="4652:34" pos:end="4652:36">rem</name></decl>;</decl_stmt>

            <expr_stmt pos:start="4654:13" pos:end="4654:48"><expr pos:start="4654:13" pos:end="4654:47"><call pos:start="4654:13" pos:end="4654:47"><name pos:start="4654:13" pos:end="4654:35">target_to_host_timespec</name><argument_list pos:start="4654:36" pos:end="4654:47">(<argument pos:start="4654:37" pos:end="4654:40"><expr pos:start="4654:37" pos:end="4654:40"><operator pos:start="4654:37" pos:end="4654:37">&amp;</operator><name pos:start="4654:38" pos:end="4654:40">req</name></expr></argument>, <argument pos:start="4654:43" pos:end="4654:46"><expr pos:start="4654:43" pos:end="4654:46"><name pos:start="4654:43" pos:end="4654:46">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4656:13" pos:end="4656:51"><expr pos:start="4656:13" pos:end="4656:50"><name pos:start="4656:13" pos:end="4656:15">ret</name> <operator pos:start="4656:17" pos:end="4656:17">=</operator> <call pos:start="4656:19" pos:end="4656:50"><name pos:start="4656:19" pos:end="4656:27">get_errno</name><argument_list pos:start="4656:28" pos:end="4656:50">(<argument pos:start="4656:29" pos:end="4656:49"><expr pos:start="4656:29" pos:end="4656:49"><call pos:start="4656:29" pos:end="4656:49"><name pos:start="4656:29" pos:end="4656:37">nanosleep</name><argument_list pos:start="4656:38" pos:end="4656:49">(<argument pos:start="4656:39" pos:end="4656:42"><expr pos:start="4656:39" pos:end="4656:42"><operator pos:start="4656:39" pos:end="4656:39">&amp;</operator><name pos:start="4656:40" pos:end="4656:42">req</name></expr></argument>, <argument pos:start="4656:45" pos:end="4656:48"><expr pos:start="4656:45" pos:end="4656:48"><operator pos:start="4656:45" pos:end="4656:45">&amp;</operator><name pos:start="4656:46" pos:end="4656:48">rem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4658:13" pos:end="4662:13"><if pos:start="4658:13" pos:end="4662:13">if <condition pos:start="4658:16" pos:end="4658:38">(<expr pos:start="4658:17" pos:end="4658:37"><call pos:start="4658:17" pos:end="4658:29"><name pos:start="4658:17" pos:end="4658:24">is_error</name><argument_list pos:start="4658:25" pos:end="4658:29">(<argument pos:start="4658:26" pos:end="4658:28"><expr pos:start="4658:26" pos:end="4658:28"><name pos:start="4658:26" pos:end="4658:28">ret</name></expr></argument>)</argument_list></call> <operator pos:start="4658:31" pos:end="4658:32">&amp;&amp;</operator> <name pos:start="4658:34" pos:end="4658:37">arg2</name></expr>)</condition> <block pos:start="4658:40" pos:end="4662:13">{<block_content pos:start="4660:17" pos:end="4660:52">

                <expr_stmt pos:start="4660:17" pos:end="4660:52"><expr pos:start="4660:17" pos:end="4660:51"><call pos:start="4660:17" pos:end="4660:51"><name pos:start="4660:17" pos:end="4660:39">host_to_target_timespec</name><argument_list pos:start="4660:40" pos:end="4660:51">(<argument pos:start="4660:41" pos:end="4660:44"><expr pos:start="4660:41" pos:end="4660:44"><name pos:start="4660:41" pos:end="4660:44">arg2</name></expr></argument>, <argument pos:start="4660:47" pos:end="4660:50"><expr pos:start="4660:47" pos:end="4660:50"><operator pos:start="4660:47" pos:end="4660:47">&amp;</operator><name pos:start="4660:48" pos:end="4660:50">rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="4666:9" pos:end="4669:0">break;</break>

<cpp:ifdef pos:start="4668:1" pos:end="4668:29">#<cpp:directive pos:start="4668:2" pos:end="4668:6">ifdef</cpp:directive> <name pos:start="4668:8" pos:end="4668:29">TARGET_NR_query_module</name></cpp:ifdef>

    <case pos:start="4670:5" pos:end="4670:32">case <expr pos:start="4670:10" pos:end="4670:31"><name pos:start="4670:10" pos:end="4670:31">TARGET_NR_query_module</name></expr>:</case>

        <goto pos:start="4672:9" pos:end="4677:0">goto <name pos:start="4672:14" pos:end="4672:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4674:1" pos:end="4674:6">#<cpp:directive pos:start="4674:2" pos:end="4674:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4676:1" pos:end="4676:27">#<cpp:directive pos:start="4676:2" pos:end="4676:6">ifdef</cpp:directive> <name pos:start="4676:8" pos:end="4676:27">TARGET_NR_nfsservctl</name></cpp:ifdef>

    <case pos:start="4678:5" pos:end="4678:30">case <expr pos:start="4678:10" pos:end="4678:29"><name pos:start="4678:10" pos:end="4678:29">TARGET_NR_nfsservctl</name></expr>:</case>

        <goto pos:start="4680:9" pos:end="4683:0">goto <name pos:start="4680:14" pos:end="4680:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4682:1" pos:end="4682:6">#<cpp:directive pos:start="4682:2" pos:end="4682:6">endif</cpp:directive></cpp:endif>

    <case pos:start="4684:5" pos:end="4684:25">case <expr pos:start="4684:10" pos:end="4684:24"><name pos:start="4684:10" pos:end="4684:24">TARGET_NR_prctl</name></expr>:</case>

        <switch pos:start="4686:9" pos:end="4764:9">switch <condition pos:start="4686:16" pos:end="4686:21">(<expr pos:start="4686:17" pos:end="4686:20"><name pos:start="4686:17" pos:end="4686:20">arg1</name></expr>)</condition> <block pos:start="4686:23" pos:end="4764:9">{<block_content pos:start="4688:9" pos:end="4762:18">

        <case pos:start="4688:9" pos:end="4688:30">case <expr pos:start="4688:14" pos:end="4688:29"><name pos:start="4688:14" pos:end="4688:29">PR_GET_PDEATHSIG</name></expr>:</case>

        <block pos:start="4690:9" pos:end="4709:0">{<block_content pos:start="4692:13" pos:end="4704:18">

            <decl_stmt pos:start="4692:13" pos:end="4692:25"><decl pos:start="4692:13" pos:end="4692:24"><type pos:start="4692:13" pos:end="4692:15"><name pos:start="4692:13" pos:end="4692:15">int</name></type> <name pos:start="4692:17" pos:end="4692:24">deathsig</name></decl>;</decl_stmt>

            <expr_stmt pos:start="4694:13" pos:end="4694:70"><expr pos:start="4694:13" pos:end="4694:69"><name pos:start="4694:13" pos:end="4694:15">ret</name> <operator pos:start="4694:17" pos:end="4694:17">=</operator> <call pos:start="4694:19" pos:end="4694:69"><name pos:start="4694:19" pos:end="4694:27">get_errno</name><argument_list pos:start="4694:28" pos:end="4694:69">(<argument pos:start="4694:29" pos:end="4694:68"><expr pos:start="4694:29" pos:end="4694:68"><call pos:start="4694:29" pos:end="4694:68"><name pos:start="4694:29" pos:end="4694:33">prctl</name><argument_list pos:start="4694:34" pos:end="4694:68">(<argument pos:start="4694:35" pos:end="4694:38"><expr pos:start="4694:35" pos:end="4694:38"><name pos:start="4694:35" pos:end="4694:38">arg1</name></expr></argument>, <argument pos:start="4694:41" pos:end="4694:49"><expr pos:start="4694:41" pos:end="4694:49"><operator pos:start="4694:41" pos:end="4694:41">&amp;</operator><name pos:start="4694:42" pos:end="4694:49">deathsig</name></expr></argument>, <argument pos:start="4694:52" pos:end="4694:55"><expr pos:start="4694:52" pos:end="4694:55"><name pos:start="4694:52" pos:end="4694:55">arg3</name></expr></argument>, <argument pos:start="4694:58" pos:end="4694:61"><expr pos:start="4694:58" pos:end="4694:61"><name pos:start="4694:58" pos:end="4694:61">arg4</name></expr></argument>, <argument pos:start="4694:64" pos:end="4694:67"><expr pos:start="4694:64" pos:end="4694:67"><name pos:start="4694:64" pos:end="4694:67">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4696:13" pos:end="4702:13"><if pos:start="4696:13" pos:end="4702:13">if <condition pos:start="4696:16" pos:end="4698:48">(<expr pos:start="4696:17" pos:end="4698:47"><operator pos:start="4696:17" pos:end="4696:17">!</operator><call pos:start="4696:18" pos:end="4696:30"><name pos:start="4696:18" pos:end="4696:25">is_error</name><argument_list pos:start="4696:26" pos:end="4696:30">(<argument pos:start="4696:27" pos:end="4696:29"><expr pos:start="4696:27" pos:end="4696:29"><name pos:start="4696:27" pos:end="4696:29">ret</name></expr></argument>)</argument_list></call> <operator pos:start="4696:32" pos:end="4696:33">&amp;&amp;</operator> <name pos:start="4696:35" pos:end="4696:38">arg2</name>

                <operator pos:start="4698:17" pos:end="4698:18">&amp;&amp;</operator> <call pos:start="4698:20" pos:end="4698:47"><name pos:start="4698:20" pos:end="4698:31">put_user_ual</name><argument_list pos:start="4698:32" pos:end="4698:47">(<argument pos:start="4698:33" pos:end="4698:40"><expr pos:start="4698:33" pos:end="4698:40"><name pos:start="4698:33" pos:end="4698:40">deathsig</name></expr></argument>, <argument pos:start="4698:43" pos:end="4698:46"><expr pos:start="4698:43" pos:end="4698:46"><name pos:start="4698:43" pos:end="4698:46">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4698:50" pos:end="4702:13">{<block_content pos:start="4700:17" pos:end="4700:28">

                <goto pos:start="4700:17" pos:end="4700:28">goto <name pos:start="4700:22" pos:end="4700:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="4704:13" pos:end="4704:18">break;</break>

        </block_content>}</block>

<cpp:ifdef pos:start="4708:1" pos:end="4708:18">#<cpp:directive pos:start="4708:2" pos:end="4708:6">ifdef</cpp:directive> <name pos:start="4708:8" pos:end="4708:18">PR_GET_NAME</name></cpp:ifdef>

        <case pos:start="4710:9" pos:end="4710:25">case <expr pos:start="4710:14" pos:end="4710:24"><name pos:start="4710:14" pos:end="4710:24">PR_GET_NAME</name></expr>:</case>

        <block pos:start="4712:9" pos:end="4730:9">{<block_content pos:start="4714:13" pos:end="4728:18">

            <decl_stmt pos:start="4714:13" pos:end="4714:62"><decl pos:start="4714:13" pos:end="4714:61"><type pos:start="4714:13" pos:end="4714:18"><name pos:start="4714:13" pos:end="4714:16">void</name> <modifier pos:start="4714:18" pos:end="4714:18">*</modifier></type><name pos:start="4714:19" pos:end="4714:22">name</name> <init pos:start="4714:24" pos:end="4714:61">= <expr pos:start="4714:26" pos:end="4714:61"><call pos:start="4714:26" pos:end="4714:61"><name pos:start="4714:26" pos:end="4714:34">lock_user</name><argument_list pos:start="4714:35" pos:end="4714:61">(<argument pos:start="4714:36" pos:end="4714:47"><expr pos:start="4714:36" pos:end="4714:47"><name pos:start="4714:36" pos:end="4714:47">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4714:50" pos:end="4714:53"><expr pos:start="4714:50" pos:end="4714:53"><name pos:start="4714:50" pos:end="4714:53">arg2</name></expr></argument>, <argument pos:start="4714:56" pos:end="4714:57"><expr pos:start="4714:56" pos:end="4714:57"><literal type="number" pos:start="4714:56" pos:end="4714:57">16</literal></expr></argument>, <argument pos:start="4714:60" pos:end="4714:60"><expr pos:start="4714:60" pos:end="4714:60"><literal type="number" pos:start="4714:60" pos:end="4714:60">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="4716:13" pos:end="4720:13"><if pos:start="4716:13" pos:end="4720:13">if <condition pos:start="4716:16" pos:end="4716:22">(<expr pos:start="4716:17" pos:end="4716:21"><operator pos:start="4716:17" pos:end="4716:17">!</operator><name pos:start="4716:18" pos:end="4716:21">name</name></expr>)</condition> <block pos:start="4716:24" pos:end="4720:13">{<block_content pos:start="4718:17" pos:end="4718:28">

                <goto pos:start="4718:17" pos:end="4718:28">goto <name pos:start="4718:22" pos:end="4718:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4722:13" pos:end="4724:53"><expr pos:start="4722:13" pos:end="4724:52"><name pos:start="4722:13" pos:end="4722:15">ret</name> <operator pos:start="4722:17" pos:end="4722:17">=</operator> <call pos:start="4722:19" pos:end="4724:52"><name pos:start="4722:19" pos:end="4722:27">get_errno</name><argument_list pos:start="4722:28" pos:end="4724:52">(<argument pos:start="4722:29" pos:end="4724:51"><expr pos:start="4722:29" pos:end="4724:51"><call pos:start="4722:29" pos:end="4724:51"><name pos:start="4722:29" pos:end="4722:33">prctl</name><argument_list pos:start="4722:34" pos:end="4724:51">(<argument pos:start="4722:35" pos:end="4722:38"><expr pos:start="4722:35" pos:end="4722:38"><name pos:start="4722:35" pos:end="4722:38">arg1</name></expr></argument>, <argument pos:start="4722:41" pos:end="4722:59"><expr pos:start="4722:41" pos:end="4722:59"><operator pos:start="4722:41" pos:end="4722:41">(</operator><name pos:start="4722:42" pos:end="4722:49">unsigned</name> <name pos:start="4722:51" pos:end="4722:54">long</name><operator pos:start="4722:55" pos:end="4722:55">)</operator><name pos:start="4722:56" pos:end="4722:59">name</name></expr></argument>,

                                  <argument pos:start="4724:35" pos:end="4724:38"><expr pos:start="4724:35" pos:end="4724:38"><name pos:start="4724:35" pos:end="4724:38">arg3</name></expr></argument>, <argument pos:start="4724:41" pos:end="4724:44"><expr pos:start="4724:41" pos:end="4724:44"><name pos:start="4724:41" pos:end="4724:44">arg4</name></expr></argument>, <argument pos:start="4724:47" pos:end="4724:50"><expr pos:start="4724:47" pos:end="4724:50"><name pos:start="4724:47" pos:end="4724:50">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4726:13" pos:end="4726:40"><expr pos:start="4726:13" pos:end="4726:39"><call pos:start="4726:13" pos:end="4726:39"><name pos:start="4726:13" pos:end="4726:23">unlock_user</name><argument_list pos:start="4726:24" pos:end="4726:39">(<argument pos:start="4726:25" pos:end="4726:28"><expr pos:start="4726:25" pos:end="4726:28"><name pos:start="4726:25" pos:end="4726:28">name</name></expr></argument>, <argument pos:start="4726:31" pos:end="4726:34"><expr pos:start="4726:31" pos:end="4726:34"><name pos:start="4726:31" pos:end="4726:34">arg2</name></expr></argument>, <argument pos:start="4726:37" pos:end="4726:38"><expr pos:start="4726:37" pos:end="4726:38"><literal type="number" pos:start="4726:37" pos:end="4726:38">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4728:13" pos:end="4728:18">break;</break>

        </block_content>}</block>

        <case pos:start="4732:9" pos:end="4732:25">case <expr pos:start="4732:14" pos:end="4732:24"><name pos:start="4732:14" pos:end="4732:24">PR_SET_NAME</name></expr>:</case>

        <block pos:start="4734:9" pos:end="4755:0">{<block_content pos:start="4736:13" pos:end="4750:18">

            <decl_stmt pos:start="4736:13" pos:end="4736:61"><decl pos:start="4736:13" pos:end="4736:60"><type pos:start="4736:13" pos:end="4736:18"><name pos:start="4736:13" pos:end="4736:16">void</name> <modifier pos:start="4736:18" pos:end="4736:18">*</modifier></type><name pos:start="4736:19" pos:end="4736:22">name</name> <init pos:start="4736:24" pos:end="4736:60">= <expr pos:start="4736:26" pos:end="4736:60"><call pos:start="4736:26" pos:end="4736:60"><name pos:start="4736:26" pos:end="4736:34">lock_user</name><argument_list pos:start="4736:35" pos:end="4736:60">(<argument pos:start="4736:36" pos:end="4736:46"><expr pos:start="4736:36" pos:end="4736:46"><name pos:start="4736:36" pos:end="4736:46">VERIFY_READ</name></expr></argument>, <argument pos:start="4736:49" pos:end="4736:52"><expr pos:start="4736:49" pos:end="4736:52"><name pos:start="4736:49" pos:end="4736:52">arg2</name></expr></argument>, <argument pos:start="4736:55" pos:end="4736:56"><expr pos:start="4736:55" pos:end="4736:56"><literal type="number" pos:start="4736:55" pos:end="4736:56">16</literal></expr></argument>, <argument pos:start="4736:59" pos:end="4736:59"><expr pos:start="4736:59" pos:end="4736:59"><literal type="number" pos:start="4736:59" pos:end="4736:59">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="4738:13" pos:end="4742:13"><if pos:start="4738:13" pos:end="4742:13">if <condition pos:start="4738:16" pos:end="4738:22">(<expr pos:start="4738:17" pos:end="4738:21"><operator pos:start="4738:17" pos:end="4738:17">!</operator><name pos:start="4738:18" pos:end="4738:21">name</name></expr>)</condition> <block pos:start="4738:24" pos:end="4742:13">{<block_content pos:start="4740:17" pos:end="4740:28">

                <goto pos:start="4740:17" pos:end="4740:28">goto <name pos:start="4740:22" pos:end="4740:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4744:13" pos:end="4746:53"><expr pos:start="4744:13" pos:end="4746:52"><name pos:start="4744:13" pos:end="4744:15">ret</name> <operator pos:start="4744:17" pos:end="4744:17">=</operator> <call pos:start="4744:19" pos:end="4746:52"><name pos:start="4744:19" pos:end="4744:27">get_errno</name><argument_list pos:start="4744:28" pos:end="4746:52">(<argument pos:start="4744:29" pos:end="4746:51"><expr pos:start="4744:29" pos:end="4746:51"><call pos:start="4744:29" pos:end="4746:51"><name pos:start="4744:29" pos:end="4744:33">prctl</name><argument_list pos:start="4744:34" pos:end="4746:51">(<argument pos:start="4744:35" pos:end="4744:38"><expr pos:start="4744:35" pos:end="4744:38"><name pos:start="4744:35" pos:end="4744:38">arg1</name></expr></argument>, <argument pos:start="4744:41" pos:end="4744:59"><expr pos:start="4744:41" pos:end="4744:59"><operator pos:start="4744:41" pos:end="4744:41">(</operator><name pos:start="4744:42" pos:end="4744:49">unsigned</name> <name pos:start="4744:51" pos:end="4744:54">long</name><operator pos:start="4744:55" pos:end="4744:55">)</operator><name pos:start="4744:56" pos:end="4744:59">name</name></expr></argument>,

                                  <argument pos:start="4746:35" pos:end="4746:38"><expr pos:start="4746:35" pos:end="4746:38"><name pos:start="4746:35" pos:end="4746:38">arg3</name></expr></argument>, <argument pos:start="4746:41" pos:end="4746:44"><expr pos:start="4746:41" pos:end="4746:44"><name pos:start="4746:41" pos:end="4746:44">arg4</name></expr></argument>, <argument pos:start="4746:47" pos:end="4746:50"><expr pos:start="4746:47" pos:end="4746:50"><name pos:start="4746:47" pos:end="4746:50">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4748:13" pos:end="4748:39"><expr pos:start="4748:13" pos:end="4748:38"><call pos:start="4748:13" pos:end="4748:38"><name pos:start="4748:13" pos:end="4748:23">unlock_user</name><argument_list pos:start="4748:24" pos:end="4748:38">(<argument pos:start="4748:25" pos:end="4748:28"><expr pos:start="4748:25" pos:end="4748:28"><name pos:start="4748:25" pos:end="4748:28">name</name></expr></argument>, <argument pos:start="4748:31" pos:end="4748:34"><expr pos:start="4748:31" pos:end="4748:34"><name pos:start="4748:31" pos:end="4748:34">arg2</name></expr></argument>, <argument pos:start="4748:37" pos:end="4748:37"><expr pos:start="4748:37" pos:end="4748:37"><literal type="number" pos:start="4748:37" pos:end="4748:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4750:13" pos:end="4750:18">break;</break>

        </block_content>}</block>

<cpp:endif pos:start="4754:1" pos:end="4754:6">#<cpp:directive pos:start="4754:2" pos:end="4754:6">endif</cpp:directive></cpp:endif>

        <default pos:start="4756:9" pos:end="4756:16">default:</default>

            <comment type="block" pos:start="4758:13" pos:end="4758:62">/* Most prctl options have no pointer arguments */</comment>

            <expr_stmt pos:start="4760:13" pos:end="4760:65"><expr pos:start="4760:13" pos:end="4760:64"><name pos:start="4760:13" pos:end="4760:15">ret</name> <operator pos:start="4760:17" pos:end="4760:17">=</operator> <call pos:start="4760:19" pos:end="4760:64"><name pos:start="4760:19" pos:end="4760:27">get_errno</name><argument_list pos:start="4760:28" pos:end="4760:64">(<argument pos:start="4760:29" pos:end="4760:63"><expr pos:start="4760:29" pos:end="4760:63"><call pos:start="4760:29" pos:end="4760:63"><name pos:start="4760:29" pos:end="4760:33">prctl</name><argument_list pos:start="4760:34" pos:end="4760:63">(<argument pos:start="4760:35" pos:end="4760:38"><expr pos:start="4760:35" pos:end="4760:38"><name pos:start="4760:35" pos:end="4760:38">arg1</name></expr></argument>, <argument pos:start="4760:41" pos:end="4760:44"><expr pos:start="4760:41" pos:end="4760:44"><name pos:start="4760:41" pos:end="4760:44">arg2</name></expr></argument>, <argument pos:start="4760:47" pos:end="4760:50"><expr pos:start="4760:47" pos:end="4760:50"><name pos:start="4760:47" pos:end="4760:50">arg3</name></expr></argument>, <argument pos:start="4760:53" pos:end="4760:56"><expr pos:start="4760:53" pos:end="4760:56"><name pos:start="4760:53" pos:end="4760:56">arg4</name></expr></argument>, <argument pos:start="4760:59" pos:end="4760:62"><expr pos:start="4760:59" pos:end="4760:62"><name pos:start="4760:59" pos:end="4760:62">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4762:13" pos:end="4762:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="4766:9" pos:end="4769:0">break;</break>

<cpp:ifdef pos:start="4768:1" pos:end="4768:27">#<cpp:directive pos:start="4768:2" pos:end="4768:6">ifdef</cpp:directive> <name pos:start="4768:8" pos:end="4768:27">TARGET_NR_arch_prctl</name></cpp:ifdef>

    <case pos:start="4770:5" pos:end="4773:0">case <expr pos:start="4770:10" pos:end="4770:29"><name pos:start="4770:10" pos:end="4770:29">TARGET_NR_arch_prctl</name></expr>:</case>

<cpp:if pos:start="4772:1" pos:end="4772:50">#<cpp:directive pos:start="4772:2" pos:end="4772:3">if</cpp:directive> <expr pos:start="4772:5" pos:end="4772:50"><call pos:start="4772:5" pos:end="4772:24"><name pos:start="4772:5" pos:end="4772:11">defined</name><argument_list pos:start="4772:12" pos:end="4772:24">(<argument pos:start="4772:13" pos:end="4772:23"><expr pos:start="4772:13" pos:end="4772:23"><name pos:start="4772:13" pos:end="4772:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="4772:26" pos:end="4772:27">&amp;&amp;</operator> <operator pos:start="4772:29" pos:end="4772:29">!</operator><call pos:start="4772:30" pos:end="4772:50"><name pos:start="4772:30" pos:end="4772:36">defined</name><argument_list pos:start="4772:37" pos:end="4772:50">(<argument pos:start="4772:38" pos:end="4772:49"><expr pos:start="4772:38" pos:end="4772:49"><name pos:start="4772:38" pos:end="4772:49">TARGET_ABI32</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="4774:9" pos:end="4774:49"><expr pos:start="4774:9" pos:end="4774:48"><name pos:start="4774:9" pos:end="4774:11">ret</name> <operator pos:start="4774:13" pos:end="4774:13">=</operator> <call pos:start="4774:15" pos:end="4774:48"><name pos:start="4774:15" pos:end="4774:27">do_arch_prctl</name><argument_list pos:start="4774:28" pos:end="4774:48">(<argument pos:start="4774:29" pos:end="4774:35"><expr pos:start="4774:29" pos:end="4774:35"><name pos:start="4774:29" pos:end="4774:35">cpu_env</name></expr></argument>, <argument pos:start="4774:38" pos:end="4774:41"><expr pos:start="4774:38" pos:end="4774:41"><name pos:start="4774:38" pos:end="4774:41">arg1</name></expr></argument>, <argument pos:start="4774:44" pos:end="4774:47"><expr pos:start="4774:44" pos:end="4774:47"><name pos:start="4774:44" pos:end="4774:47">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4776:9" pos:end="4779:0">break;</break>

<cpp:else pos:start="4778:1" pos:end="4778:5">#<cpp:directive pos:start="4778:2" pos:end="4778:5">else</cpp:directive></cpp:else>

        <goto pos:start="4780:9" pos:end="4787:0">goto <name pos:start="4780:14" pos:end="4780:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4782:1" pos:end="4782:6">#<cpp:directive pos:start="4782:2" pos:end="4782:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="4784:1" pos:end="4784:6">#<cpp:directive pos:start="4784:2" pos:end="4784:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4786:1" pos:end="4786:24">#<cpp:directive pos:start="4786:2" pos:end="4786:6">ifdef</cpp:directive> <name pos:start="4786:8" pos:end="4786:24">TARGET_NR_pread64</name></cpp:ifdef>

    <case pos:start="4788:5" pos:end="4788:27">case <expr pos:start="4788:10" pos:end="4788:26"><name pos:start="4788:10" pos:end="4788:26">TARGET_NR_pread64</name></expr>:</case>

        <if_stmt pos:start="4790:9" pos:end="4796:9"><if pos:start="4790:9" pos:end="4796:9">if <condition pos:start="4790:12" pos:end="4790:38">(<expr pos:start="4790:13" pos:end="4790:37"><call pos:start="4790:13" pos:end="4790:37"><name pos:start="4790:13" pos:end="4790:28">regpairs_aligned</name><argument_list pos:start="4790:29" pos:end="4790:37">(<argument pos:start="4790:30" pos:end="4790:36"><expr pos:start="4790:30" pos:end="4790:36"><name pos:start="4790:30" pos:end="4790:36">cpu_env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4790:40" pos:end="4796:9">{<block_content pos:start="4792:13" pos:end="4794:24">

            <expr_stmt pos:start="4792:13" pos:end="4792:24"><expr pos:start="4792:13" pos:end="4792:23"><name pos:start="4792:13" pos:end="4792:16">arg4</name> <operator pos:start="4792:18" pos:end="4792:18">=</operator> <name pos:start="4792:20" pos:end="4792:23">arg5</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4794:13" pos:end="4794:24"><expr pos:start="4794:13" pos:end="4794:23"><name pos:start="4794:13" pos:end="4794:16">arg5</name> <operator pos:start="4794:18" pos:end="4794:18">=</operator> <name pos:start="4794:20" pos:end="4794:23">arg6</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="4798:9" pos:end="4800:24"><if pos:start="4798:9" pos:end="4800:24">if <condition pos:start="4798:12" pos:end="4798:58">(<expr pos:start="4798:13" pos:end="4798:57"><operator pos:start="4798:13" pos:end="4798:13">!</operator><operator pos:start="4798:14" pos:end="4798:14">(</operator><name pos:start="4798:15" pos:end="4798:15">p</name> <operator pos:start="4798:17" pos:end="4798:17">=</operator> <call pos:start="4798:19" pos:end="4798:56"><name pos:start="4798:19" pos:end="4798:27">lock_user</name><argument_list pos:start="4798:28" pos:end="4798:56">(<argument pos:start="4798:29" pos:end="4798:40"><expr pos:start="4798:29" pos:end="4798:40"><name pos:start="4798:29" pos:end="4798:40">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4798:43" pos:end="4798:46"><expr pos:start="4798:43" pos:end="4798:46"><name pos:start="4798:43" pos:end="4798:46">arg2</name></expr></argument>, <argument pos:start="4798:49" pos:end="4798:52"><expr pos:start="4798:49" pos:end="4798:52"><name pos:start="4798:49" pos:end="4798:52">arg3</name></expr></argument>, <argument pos:start="4798:55" pos:end="4798:55"><expr pos:start="4798:55" pos:end="4798:55"><literal type="number" pos:start="4798:55" pos:end="4798:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="4798:57" pos:end="4798:57">)</operator></expr>)</condition><block type="pseudo" pos:start="4800:13" pos:end="4800:24"><block_content pos:start="4800:13" pos:end="4800:24">

            <goto pos:start="4800:13" pos:end="4800:24">goto <name pos:start="4800:18" pos:end="4800:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4802:9" pos:end="4802:77"><expr pos:start="4802:9" pos:end="4802:76"><name pos:start="4802:9" pos:end="4802:11">ret</name> <operator pos:start="4802:13" pos:end="4802:13">=</operator> <call pos:start="4802:15" pos:end="4802:76"><name pos:start="4802:15" pos:end="4802:23">get_errno</name><argument_list pos:start="4802:24" pos:end="4802:76">(<argument pos:start="4802:25" pos:end="4802:75"><expr pos:start="4802:25" pos:end="4802:75"><call pos:start="4802:25" pos:end="4802:75"><name pos:start="4802:25" pos:end="4802:31">pread64</name><argument_list pos:start="4802:32" pos:end="4802:75">(<argument pos:start="4802:33" pos:end="4802:36"><expr pos:start="4802:33" pos:end="4802:36"><name pos:start="4802:33" pos:end="4802:36">arg1</name></expr></argument>, <argument pos:start="4802:39" pos:end="4802:39"><expr pos:start="4802:39" pos:end="4802:39"><name pos:start="4802:39" pos:end="4802:39">p</name></expr></argument>, <argument pos:start="4802:42" pos:end="4802:45"><expr pos:start="4802:42" pos:end="4802:45"><name pos:start="4802:42" pos:end="4802:45">arg3</name></expr></argument>, <argument pos:start="4802:48" pos:end="4802:74"><expr pos:start="4802:48" pos:end="4802:74"><call pos:start="4802:48" pos:end="4802:74"><name pos:start="4802:48" pos:end="4802:62">target_offset64</name><argument_list pos:start="4802:63" pos:end="4802:74">(<argument pos:start="4802:64" pos:end="4802:67"><expr pos:start="4802:64" pos:end="4802:67"><name pos:start="4802:64" pos:end="4802:67">arg4</name></expr></argument>, <argument pos:start="4802:70" pos:end="4802:73"><expr pos:start="4802:70" pos:end="4802:73"><name pos:start="4802:70" pos:end="4802:73">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4804:9" pos:end="4804:34"><expr pos:start="4804:9" pos:end="4804:33"><call pos:start="4804:9" pos:end="4804:33"><name pos:start="4804:9" pos:end="4804:19">unlock_user</name><argument_list pos:start="4804:20" pos:end="4804:33">(<argument pos:start="4804:21" pos:end="4804:21"><expr pos:start="4804:21" pos:end="4804:21"><name pos:start="4804:21" pos:end="4804:21">p</name></expr></argument>, <argument pos:start="4804:24" pos:end="4804:27"><expr pos:start="4804:24" pos:end="4804:27"><name pos:start="4804:24" pos:end="4804:27">arg2</name></expr></argument>, <argument pos:start="4804:30" pos:end="4804:32"><expr pos:start="4804:30" pos:end="4804:32"><name pos:start="4804:30" pos:end="4804:32">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4806:9" pos:end="4806:14">break;</break>

    <case pos:start="4808:5" pos:end="4808:28">case <expr pos:start="4808:10" pos:end="4808:27"><name pos:start="4808:10" pos:end="4808:27">TARGET_NR_pwrite64</name></expr>:</case>

        <if_stmt pos:start="4810:9" pos:end="4816:9"><if pos:start="4810:9" pos:end="4816:9">if <condition pos:start="4810:12" pos:end="4810:38">(<expr pos:start="4810:13" pos:end="4810:37"><call pos:start="4810:13" pos:end="4810:37"><name pos:start="4810:13" pos:end="4810:28">regpairs_aligned</name><argument_list pos:start="4810:29" pos:end="4810:37">(<argument pos:start="4810:30" pos:end="4810:36"><expr pos:start="4810:30" pos:end="4810:36"><name pos:start="4810:30" pos:end="4810:36">cpu_env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4810:40" pos:end="4816:9">{<block_content pos:start="4812:13" pos:end="4814:24">

            <expr_stmt pos:start="4812:13" pos:end="4812:24"><expr pos:start="4812:13" pos:end="4812:23"><name pos:start="4812:13" pos:end="4812:16">arg4</name> <operator pos:start="4812:18" pos:end="4812:18">=</operator> <name pos:start="4812:20" pos:end="4812:23">arg5</name></expr>;</expr_stmt>

            <expr_stmt pos:start="4814:13" pos:end="4814:24"><expr pos:start="4814:13" pos:end="4814:23"><name pos:start="4814:13" pos:end="4814:16">arg5</name> <operator pos:start="4814:18" pos:end="4814:18">=</operator> <name pos:start="4814:20" pos:end="4814:23">arg6</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="4818:9" pos:end="4820:24"><if pos:start="4818:9" pos:end="4820:24">if <condition pos:start="4818:12" pos:end="4818:57">(<expr pos:start="4818:13" pos:end="4818:56"><operator pos:start="4818:13" pos:end="4818:13">!</operator><operator pos:start="4818:14" pos:end="4818:14">(</operator><name pos:start="4818:15" pos:end="4818:15">p</name> <operator pos:start="4818:17" pos:end="4818:17">=</operator> <call pos:start="4818:19" pos:end="4818:55"><name pos:start="4818:19" pos:end="4818:27">lock_user</name><argument_list pos:start="4818:28" pos:end="4818:55">(<argument pos:start="4818:29" pos:end="4818:39"><expr pos:start="4818:29" pos:end="4818:39"><name pos:start="4818:29" pos:end="4818:39">VERIFY_READ</name></expr></argument>, <argument pos:start="4818:42" pos:end="4818:45"><expr pos:start="4818:42" pos:end="4818:45"><name pos:start="4818:42" pos:end="4818:45">arg2</name></expr></argument>, <argument pos:start="4818:48" pos:end="4818:51"><expr pos:start="4818:48" pos:end="4818:51"><name pos:start="4818:48" pos:end="4818:51">arg3</name></expr></argument>, <argument pos:start="4818:54" pos:end="4818:54"><expr pos:start="4818:54" pos:end="4818:54"><literal type="number" pos:start="4818:54" pos:end="4818:54">1</literal></expr></argument>)</argument_list></call><operator pos:start="4818:56" pos:end="4818:56">)</operator></expr>)</condition><block type="pseudo" pos:start="4820:13" pos:end="4820:24"><block_content pos:start="4820:13" pos:end="4820:24">

            <goto pos:start="4820:13" pos:end="4820:24">goto <name pos:start="4820:18" pos:end="4820:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4822:9" pos:end="4822:78"><expr pos:start="4822:9" pos:end="4822:77"><name pos:start="4822:9" pos:end="4822:11">ret</name> <operator pos:start="4822:13" pos:end="4822:13">=</operator> <call pos:start="4822:15" pos:end="4822:77"><name pos:start="4822:15" pos:end="4822:23">get_errno</name><argument_list pos:start="4822:24" pos:end="4822:77">(<argument pos:start="4822:25" pos:end="4822:76"><expr pos:start="4822:25" pos:end="4822:76"><call pos:start="4822:25" pos:end="4822:76"><name pos:start="4822:25" pos:end="4822:32">pwrite64</name><argument_list pos:start="4822:33" pos:end="4822:76">(<argument pos:start="4822:34" pos:end="4822:37"><expr pos:start="4822:34" pos:end="4822:37"><name pos:start="4822:34" pos:end="4822:37">arg1</name></expr></argument>, <argument pos:start="4822:40" pos:end="4822:40"><expr pos:start="4822:40" pos:end="4822:40"><name pos:start="4822:40" pos:end="4822:40">p</name></expr></argument>, <argument pos:start="4822:43" pos:end="4822:46"><expr pos:start="4822:43" pos:end="4822:46"><name pos:start="4822:43" pos:end="4822:46">arg3</name></expr></argument>, <argument pos:start="4822:49" pos:end="4822:75"><expr pos:start="4822:49" pos:end="4822:75"><call pos:start="4822:49" pos:end="4822:75"><name pos:start="4822:49" pos:end="4822:63">target_offset64</name><argument_list pos:start="4822:64" pos:end="4822:75">(<argument pos:start="4822:65" pos:end="4822:68"><expr pos:start="4822:65" pos:end="4822:68"><name pos:start="4822:65" pos:end="4822:68">arg4</name></expr></argument>, <argument pos:start="4822:71" pos:end="4822:74"><expr pos:start="4822:71" pos:end="4822:74"><name pos:start="4822:71" pos:end="4822:74">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4824:9" pos:end="4824:32"><expr pos:start="4824:9" pos:end="4824:31"><call pos:start="4824:9" pos:end="4824:31"><name pos:start="4824:9" pos:end="4824:19">unlock_user</name><argument_list pos:start="4824:20" pos:end="4824:31">(<argument pos:start="4824:21" pos:end="4824:21"><expr pos:start="4824:21" pos:end="4824:21"><name pos:start="4824:21" pos:end="4824:21">p</name></expr></argument>, <argument pos:start="4824:24" pos:end="4824:27"><expr pos:start="4824:24" pos:end="4824:27"><name pos:start="4824:24" pos:end="4824:27">arg2</name></expr></argument>, <argument pos:start="4824:30" pos:end="4824:30"><expr pos:start="4824:30" pos:end="4824:30"><literal type="number" pos:start="4824:30" pos:end="4824:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4826:9" pos:end="4829:0">break;</break>

<cpp:endif pos:start="4828:1" pos:end="4828:6">#<cpp:directive pos:start="4828:2" pos:end="4828:6">endif</cpp:directive></cpp:endif>

    <case pos:start="4830:5" pos:end="4830:26">case <expr pos:start="4830:10" pos:end="4830:25"><name pos:start="4830:10" pos:end="4830:25">TARGET_NR_getcwd</name></expr>:</case>

        <if_stmt pos:start="4832:9" pos:end="4834:24"><if pos:start="4832:9" pos:end="4834:24">if <condition pos:start="4832:12" pos:end="4832:58">(<expr pos:start="4832:13" pos:end="4832:57"><operator pos:start="4832:13" pos:end="4832:13">!</operator><operator pos:start="4832:14" pos:end="4832:14">(</operator><name pos:start="4832:15" pos:end="4832:15">p</name> <operator pos:start="4832:17" pos:end="4832:17">=</operator> <call pos:start="4832:19" pos:end="4832:56"><name pos:start="4832:19" pos:end="4832:27">lock_user</name><argument_list pos:start="4832:28" pos:end="4832:56">(<argument pos:start="4832:29" pos:end="4832:40"><expr pos:start="4832:29" pos:end="4832:40"><name pos:start="4832:29" pos:end="4832:40">VERIFY_WRITE</name></expr></argument>, <argument pos:start="4832:43" pos:end="4832:46"><expr pos:start="4832:43" pos:end="4832:46"><name pos:start="4832:43" pos:end="4832:46">arg1</name></expr></argument>, <argument pos:start="4832:49" pos:end="4832:52"><expr pos:start="4832:49" pos:end="4832:52"><name pos:start="4832:49" pos:end="4832:52">arg2</name></expr></argument>, <argument pos:start="4832:55" pos:end="4832:55"><expr pos:start="4832:55" pos:end="4832:55"><literal type="number" pos:start="4832:55" pos:end="4832:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="4832:57" pos:end="4832:57">)</operator></expr>)</condition><block type="pseudo" pos:start="4834:13" pos:end="4834:24"><block_content pos:start="4834:13" pos:end="4834:24">

            <goto pos:start="4834:13" pos:end="4834:24">goto <name pos:start="4834:18" pos:end="4834:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4836:9" pos:end="4836:46"><expr pos:start="4836:9" pos:end="4836:45"><name pos:start="4836:9" pos:end="4836:11">ret</name> <operator pos:start="4836:13" pos:end="4836:13">=</operator> <call pos:start="4836:15" pos:end="4836:45"><name pos:start="4836:15" pos:end="4836:23">get_errno</name><argument_list pos:start="4836:24" pos:end="4836:45">(<argument pos:start="4836:25" pos:end="4836:44"><expr pos:start="4836:25" pos:end="4836:44"><call pos:start="4836:25" pos:end="4836:44"><name pos:start="4836:25" pos:end="4836:35">sys_getcwd1</name><argument_list pos:start="4836:36" pos:end="4836:44">(<argument pos:start="4836:37" pos:end="4836:37"><expr pos:start="4836:37" pos:end="4836:37"><name pos:start="4836:37" pos:end="4836:37">p</name></expr></argument>, <argument pos:start="4836:40" pos:end="4836:43"><expr pos:start="4836:40" pos:end="4836:43"><name pos:start="4836:40" pos:end="4836:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4838:9" pos:end="4838:34"><expr pos:start="4838:9" pos:end="4838:33"><call pos:start="4838:9" pos:end="4838:33"><name pos:start="4838:9" pos:end="4838:19">unlock_user</name><argument_list pos:start="4838:20" pos:end="4838:33">(<argument pos:start="4838:21" pos:end="4838:21"><expr pos:start="4838:21" pos:end="4838:21"><name pos:start="4838:21" pos:end="4838:21">p</name></expr></argument>, <argument pos:start="4838:24" pos:end="4838:27"><expr pos:start="4838:24" pos:end="4838:27"><name pos:start="4838:24" pos:end="4838:27">arg1</name></expr></argument>, <argument pos:start="4838:30" pos:end="4838:32"><expr pos:start="4838:30" pos:end="4838:32"><name pos:start="4838:30" pos:end="4838:32">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4840:9" pos:end="4840:14">break;</break>

    <case pos:start="4842:5" pos:end="4842:26">case <expr pos:start="4842:10" pos:end="4842:25"><name pos:start="4842:10" pos:end="4842:25">TARGET_NR_capget</name></expr>:</case>

        <goto pos:start="4844:9" pos:end="4844:27">goto <name pos:start="4844:14" pos:end="4844:26">unimplemented</name>;</goto>

    <case pos:start="4846:5" pos:end="4846:26">case <expr pos:start="4846:10" pos:end="4846:25"><name pos:start="4846:10" pos:end="4846:25">TARGET_NR_capset</name></expr>:</case>

        <goto pos:start="4848:9" pos:end="4848:27">goto <name pos:start="4848:14" pos:end="4848:26">unimplemented</name>;</goto>

    <case pos:start="4850:5" pos:end="4857:0">case <expr pos:start="4850:10" pos:end="4850:30"><name pos:start="4850:10" pos:end="4850:30">TARGET_NR_sigaltstack</name></expr>:</case>

<cpp:if pos:start="4852:1" pos:end="4856:77">#<cpp:directive pos:start="4852:2" pos:end="4852:3">if</cpp:directive> <expr pos:start="4852:5" pos:end="4856:77"><call pos:start="4852:5" pos:end="4852:24"><name pos:start="4852:5" pos:end="4852:11">defined</name><argument_list pos:start="4852:12" pos:end="4852:24">(<argument pos:start="4852:13" pos:end="4852:23"><expr pos:start="4852:13" pos:end="4852:23"><name pos:start="4852:13" pos:end="4852:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="4852:26" pos:end="4852:27">||</operator> <call pos:start="4852:29" pos:end="4852:47"><name pos:start="4852:29" pos:end="4852:35">defined</name><argument_list pos:start="4852:36" pos:end="4852:47">(<argument pos:start="4852:37" pos:end="4852:46"><expr pos:start="4852:37" pos:end="4852:46"><name pos:start="4852:37" pos:end="4852:46">TARGET_ARM</name></expr></argument>)</argument_list></call> <operator pos:start="4852:49" pos:end="4852:50">||</operator> <call pos:start="4852:52" pos:end="4852:71"><name pos:start="4852:52" pos:end="4852:58">defined</name><argument_list pos:start="4852:59" pos:end="4852:71">(<argument pos:start="4852:60" pos:end="4852:70"><expr pos:start="4852:60" pos:end="4852:70"><name pos:start="4852:60" pos:end="4852:70">TARGET_MIPS</name></expr></argument>)</argument_list></call> <operator pos:start="4852:73" pos:end="4852:74">||</operator> \

    <call pos:start="4854:5" pos:end="4854:25"><name pos:start="4854:5" pos:end="4854:11">defined</name><argument_list pos:start="4854:12" pos:end="4854:25">(<argument pos:start="4854:13" pos:end="4854:24"><expr pos:start="4854:13" pos:end="4854:24"><name pos:start="4854:13" pos:end="4854:24">TARGET_SPARC</name></expr></argument>)</argument_list></call> <operator pos:start="4854:27" pos:end="4854:28">||</operator> <call pos:start="4854:30" pos:end="4854:48"><name pos:start="4854:30" pos:end="4854:36">defined</name><argument_list pos:start="4854:37" pos:end="4854:48">(<argument pos:start="4854:38" pos:end="4854:47"><expr pos:start="4854:38" pos:end="4854:47"><name pos:start="4854:38" pos:end="4854:47">TARGET_PPC</name></expr></argument>)</argument_list></call> <operator pos:start="4854:50" pos:end="4854:51">||</operator> <call pos:start="4854:53" pos:end="4854:73"><name pos:start="4854:53" pos:end="4854:59">defined</name><argument_list pos:start="4854:60" pos:end="4854:73">(<argument pos:start="4854:61" pos:end="4854:72"><expr pos:start="4854:61" pos:end="4854:72"><name pos:start="4854:61" pos:end="4854:72">TARGET_ALPHA</name></expr></argument>)</argument_list></call> <operator pos:start="4854:75" pos:end="4854:76">||</operator> \

    <call pos:start="4856:5" pos:end="4856:24"><name pos:start="4856:5" pos:end="4856:11">defined</name><argument_list pos:start="4856:12" pos:end="4856:24">(<argument pos:start="4856:13" pos:end="4856:23"><expr pos:start="4856:13" pos:end="4856:23"><name pos:start="4856:13" pos:end="4856:23">TARGET_M68K</name></expr></argument>)</argument_list></call> <operator pos:start="4856:26" pos:end="4856:27">||</operator> <call pos:start="4856:29" pos:end="4856:49"><name pos:start="4856:29" pos:end="4856:35">defined</name><argument_list pos:start="4856:36" pos:end="4856:49">(<argument pos:start="4856:37" pos:end="4856:48"><expr pos:start="4856:37" pos:end="4856:48"><name pos:start="4856:37" pos:end="4856:48">TARGET_S390X</name></expr></argument>)</argument_list></call> <operator pos:start="4856:51" pos:end="4856:52">||</operator> <call pos:start="4856:54" pos:end="4856:77"><name pos:start="4856:54" pos:end="4856:60">defined</name><argument_list pos:start="4856:61" pos:end="4856:77">(<argument pos:start="4856:62" pos:end="4856:76"><expr pos:start="4856:62" pos:end="4856:76"><name pos:start="4856:62" pos:end="4856:76">TARGET_OPENRISC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="4858:9" pos:end="4858:88"><expr pos:start="4858:9" pos:end="4858:87"><name pos:start="4858:9" pos:end="4858:11">ret</name> <operator pos:start="4858:13" pos:end="4858:13">=</operator> <call pos:start="4858:15" pos:end="4858:87"><name pos:start="4858:15" pos:end="4858:28">do_sigaltstack</name><argument_list pos:start="4858:29" pos:end="4858:87">(<argument pos:start="4858:30" pos:end="4858:33"><expr pos:start="4858:30" pos:end="4858:33"><name pos:start="4858:30" pos:end="4858:33">arg1</name></expr></argument>, <argument pos:start="4858:36" pos:end="4858:39"><expr pos:start="4858:36" pos:end="4858:39"><name pos:start="4858:36" pos:end="4858:39">arg2</name></expr></argument>, <argument pos:start="4858:42" pos:end="4858:86"><expr pos:start="4858:42" pos:end="4858:86"><call pos:start="4858:42" pos:end="4858:86"><name pos:start="4858:42" pos:end="4858:61">get_sp_from_cpustate</name><argument_list pos:start="4858:62" pos:end="4858:86">(<argument pos:start="4858:63" pos:end="4858:85"><expr pos:start="4858:63" pos:end="4858:85"><operator pos:start="4858:63" pos:end="4858:63">(</operator><name pos:start="4858:64" pos:end="4858:75">CPUArchState</name> <operator pos:start="4858:77" pos:end="4858:77">*</operator><operator pos:start="4858:78" pos:end="4858:78">)</operator><name pos:start="4858:79" pos:end="4858:85">cpu_env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4860:9" pos:end="4863:0">break;</break>

<cpp:else pos:start="4862:1" pos:end="4862:5">#<cpp:directive pos:start="4862:2" pos:end="4862:5">else</cpp:directive></cpp:else>

        <goto pos:start="4864:9" pos:end="4871:0">goto <name pos:start="4864:14" pos:end="4864:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4866:1" pos:end="4866:6">#<cpp:directive pos:start="4866:2" pos:end="4866:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="4870:1" pos:end="4870:22">#<cpp:directive pos:start="4870:2" pos:end="4870:6">ifdef</cpp:directive> <name pos:start="4870:8" pos:end="4870:22">CONFIG_SENDFILE</name></cpp:ifdef>

    <case pos:start="4872:5" pos:end="4872:28">case <expr pos:start="4872:10" pos:end="4872:27"><name pos:start="4872:10" pos:end="4872:27">TARGET_NR_sendfile</name></expr>:</case>

    <block pos:start="4874:5" pos:end="4913:0">{<block_content pos:start="4876:9" pos:end="4908:14">

        <decl_stmt pos:start="4876:9" pos:end="4876:27"><decl pos:start="4876:9" pos:end="4876:26"><type pos:start="4876:9" pos:end="4876:15"><name pos:start="4876:9" pos:end="4876:13">off_t</name> <modifier pos:start="4876:15" pos:end="4876:15">*</modifier></type><name pos:start="4876:16" pos:end="4876:19">offp</name> <init pos:start="4876:21" pos:end="4876:26">= <expr pos:start="4876:23" pos:end="4876:26"><name pos:start="4876:23" pos:end="4876:26">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="4878:9" pos:end="4878:18"><decl pos:start="4878:9" pos:end="4878:17"><type pos:start="4878:9" pos:end="4878:13"><name pos:start="4878:9" pos:end="4878:13">off_t</name></type> <name pos:start="4878:15" pos:end="4878:17">off</name></decl>;</decl_stmt>

        <if_stmt pos:start="4880:9" pos:end="4892:9"><if pos:start="4880:9" pos:end="4892:9">if <condition pos:start="4880:12" pos:end="4880:17">(<expr pos:start="4880:13" pos:end="4880:16"><name pos:start="4880:13" pos:end="4880:16">arg3</name></expr>)</condition> <block pos:start="4880:19" pos:end="4892:9">{<block_content pos:start="4882:13" pos:end="4890:24">

            <expr_stmt pos:start="4882:13" pos:end="4882:42"><expr pos:start="4882:13" pos:end="4882:41"><name pos:start="4882:13" pos:end="4882:15">ret</name> <operator pos:start="4882:17" pos:end="4882:17">=</operator> <call pos:start="4882:19" pos:end="4882:41"><name pos:start="4882:19" pos:end="4882:30">get_user_sal</name><argument_list pos:start="4882:31" pos:end="4882:41">(<argument pos:start="4882:32" pos:end="4882:34"><expr pos:start="4882:32" pos:end="4882:34"><name pos:start="4882:32" pos:end="4882:34">off</name></expr></argument>, <argument pos:start="4882:37" pos:end="4882:40"><expr pos:start="4882:37" pos:end="4882:40"><name pos:start="4882:37" pos:end="4882:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4884:13" pos:end="4888:13"><if pos:start="4884:13" pos:end="4888:13">if <condition pos:start="4884:16" pos:end="4884:30">(<expr pos:start="4884:17" pos:end="4884:29"><call pos:start="4884:17" pos:end="4884:29"><name pos:start="4884:17" pos:end="4884:24">is_error</name><argument_list pos:start="4884:25" pos:end="4884:29">(<argument pos:start="4884:26" pos:end="4884:28"><expr pos:start="4884:26" pos:end="4884:28"><name pos:start="4884:26" pos:end="4884:28">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4884:32" pos:end="4888:13">{<block_content pos:start="4886:17" pos:end="4886:22">

                <break pos:start="4886:17" pos:end="4886:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4890:13" pos:end="4890:24"><expr pos:start="4890:13" pos:end="4890:23"><name pos:start="4890:13" pos:end="4890:16">offp</name> <operator pos:start="4890:18" pos:end="4890:18">=</operator> <operator pos:start="4890:20" pos:end="4890:20">&amp;</operator><name pos:start="4890:21" pos:end="4890:23">off</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="4894:9" pos:end="4894:58"><expr pos:start="4894:9" pos:end="4894:57"><name pos:start="4894:9" pos:end="4894:11">ret</name> <operator pos:start="4894:13" pos:end="4894:13">=</operator> <call pos:start="4894:15" pos:end="4894:57"><name pos:start="4894:15" pos:end="4894:23">get_errno</name><argument_list pos:start="4894:24" pos:end="4894:57">(<argument pos:start="4894:25" pos:end="4894:56"><expr pos:start="4894:25" pos:end="4894:56"><call pos:start="4894:25" pos:end="4894:56"><name pos:start="4894:25" pos:end="4894:32">sendfile</name><argument_list pos:start="4894:33" pos:end="4894:56">(<argument pos:start="4894:34" pos:end="4894:37"><expr pos:start="4894:34" pos:end="4894:37"><name pos:start="4894:34" pos:end="4894:37">arg1</name></expr></argument>, <argument pos:start="4894:40" pos:end="4894:43"><expr pos:start="4894:40" pos:end="4894:43"><name pos:start="4894:40" pos:end="4894:43">arg2</name></expr></argument>, <argument pos:start="4894:46" pos:end="4894:49"><expr pos:start="4894:46" pos:end="4894:49"><name pos:start="4894:46" pos:end="4894:49">offp</name></expr></argument>, <argument pos:start="4894:52" pos:end="4894:55"><expr pos:start="4894:52" pos:end="4894:55"><name pos:start="4894:52" pos:end="4894:55">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4896:9" pos:end="4906:9"><if pos:start="4896:9" pos:end="4906:9">if <condition pos:start="4896:12" pos:end="4896:35">(<expr pos:start="4896:13" pos:end="4896:34"><operator pos:start="4896:13" pos:end="4896:13">!</operator><call pos:start="4896:14" pos:end="4896:26"><name pos:start="4896:14" pos:end="4896:21">is_error</name><argument_list pos:start="4896:22" pos:end="4896:26">(<argument pos:start="4896:23" pos:end="4896:25"><expr pos:start="4896:23" pos:end="4896:25"><name pos:start="4896:23" pos:end="4896:25">ret</name></expr></argument>)</argument_list></call> <operator pos:start="4896:28" pos:end="4896:29">&amp;&amp;</operator> <name pos:start="4896:31" pos:end="4896:34">arg3</name></expr>)</condition> <block pos:start="4896:37" pos:end="4906:9">{<block_content pos:start="4898:13" pos:end="4904:13">

            <decl_stmt pos:start="4898:13" pos:end="4898:52"><decl pos:start="4898:13" pos:end="4898:51"><type pos:start="4898:13" pos:end="4898:20"><name pos:start="4898:13" pos:end="4898:20">abi_long</name></type> <name pos:start="4898:22" pos:end="4898:25">ret2</name> <init pos:start="4898:27" pos:end="4898:51">= <expr pos:start="4898:29" pos:end="4898:51"><call pos:start="4898:29" pos:end="4898:51"><name pos:start="4898:29" pos:end="4898:40">put_user_sal</name><argument_list pos:start="4898:41" pos:end="4898:51">(<argument pos:start="4898:42" pos:end="4898:44"><expr pos:start="4898:42" pos:end="4898:44"><name pos:start="4898:42" pos:end="4898:44">off</name></expr></argument>, <argument pos:start="4898:47" pos:end="4898:50"><expr pos:start="4898:47" pos:end="4898:50"><name pos:start="4898:47" pos:end="4898:50">arg3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="4900:13" pos:end="4904:13"><if pos:start="4900:13" pos:end="4904:13">if <condition pos:start="4900:16" pos:end="4900:31">(<expr pos:start="4900:17" pos:end="4900:30"><call pos:start="4900:17" pos:end="4900:30"><name pos:start="4900:17" pos:end="4900:24">is_error</name><argument_list pos:start="4900:25" pos:end="4900:30">(<argument pos:start="4900:26" pos:end="4900:29"><expr pos:start="4900:26" pos:end="4900:29"><name pos:start="4900:26" pos:end="4900:29">ret2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4900:33" pos:end="4904:13">{<block_content pos:start="4902:17" pos:end="4902:27">

                <expr_stmt pos:start="4902:17" pos:end="4902:27"><expr pos:start="4902:17" pos:end="4902:26"><name pos:start="4902:17" pos:end="4902:19">ret</name> <operator pos:start="4902:21" pos:end="4902:21">=</operator> <name pos:start="4902:23" pos:end="4902:26">ret2</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4908:9" pos:end="4908:14">break;</break>

    </block_content>}</block>

<cpp:ifdef pos:start="4912:1" pos:end="4912:27">#<cpp:directive pos:start="4912:2" pos:end="4912:6">ifdef</cpp:directive> <name pos:start="4912:8" pos:end="4912:27">TARGET_NR_sendfile64</name></cpp:ifdef>

    <case pos:start="4914:5" pos:end="4914:30">case <expr pos:start="4914:10" pos:end="4914:29"><name pos:start="4914:10" pos:end="4914:29">TARGET_NR_sendfile64</name></expr>:</case>

    <block pos:start="4916:5" pos:end="4957:0">{<block_content pos:start="4918:9" pos:end="4950:14">

        <decl_stmt pos:start="4918:9" pos:end="4918:27"><decl pos:start="4918:9" pos:end="4918:26"><type pos:start="4918:9" pos:end="4918:15"><name pos:start="4918:9" pos:end="4918:13">off_t</name> <modifier pos:start="4918:15" pos:end="4918:15">*</modifier></type><name pos:start="4918:16" pos:end="4918:19">offp</name> <init pos:start="4918:21" pos:end="4918:26">= <expr pos:start="4918:23" pos:end="4918:26"><name pos:start="4918:23" pos:end="4918:26">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="4920:9" pos:end="4920:18"><decl pos:start="4920:9" pos:end="4920:17"><type pos:start="4920:9" pos:end="4920:13"><name pos:start="4920:9" pos:end="4920:13">off_t</name></type> <name pos:start="4920:15" pos:end="4920:17">off</name></decl>;</decl_stmt>

        <if_stmt pos:start="4922:9" pos:end="4934:9"><if pos:start="4922:9" pos:end="4934:9">if <condition pos:start="4922:12" pos:end="4922:17">(<expr pos:start="4922:13" pos:end="4922:16"><name pos:start="4922:13" pos:end="4922:16">arg3</name></expr>)</condition> <block pos:start="4922:19" pos:end="4934:9">{<block_content pos:start="4924:13" pos:end="4932:24">

            <expr_stmt pos:start="4924:13" pos:end="4924:42"><expr pos:start="4924:13" pos:end="4924:41"><name pos:start="4924:13" pos:end="4924:15">ret</name> <operator pos:start="4924:17" pos:end="4924:17">=</operator> <call pos:start="4924:19" pos:end="4924:41"><name pos:start="4924:19" pos:end="4924:30">get_user_s64</name><argument_list pos:start="4924:31" pos:end="4924:41">(<argument pos:start="4924:32" pos:end="4924:34"><expr pos:start="4924:32" pos:end="4924:34"><name pos:start="4924:32" pos:end="4924:34">off</name></expr></argument>, <argument pos:start="4924:37" pos:end="4924:40"><expr pos:start="4924:37" pos:end="4924:40"><name pos:start="4924:37" pos:end="4924:40">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4926:13" pos:end="4930:13"><if pos:start="4926:13" pos:end="4930:13">if <condition pos:start="4926:16" pos:end="4926:30">(<expr pos:start="4926:17" pos:end="4926:29"><call pos:start="4926:17" pos:end="4926:29"><name pos:start="4926:17" pos:end="4926:24">is_error</name><argument_list pos:start="4926:25" pos:end="4926:29">(<argument pos:start="4926:26" pos:end="4926:28"><expr pos:start="4926:26" pos:end="4926:28"><name pos:start="4926:26" pos:end="4926:28">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4926:32" pos:end="4930:13">{<block_content pos:start="4928:17" pos:end="4928:22">

                <break pos:start="4928:17" pos:end="4928:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="4932:13" pos:end="4932:24"><expr pos:start="4932:13" pos:end="4932:23"><name pos:start="4932:13" pos:end="4932:16">offp</name> <operator pos:start="4932:18" pos:end="4932:18">=</operator> <operator pos:start="4932:20" pos:end="4932:20">&amp;</operator><name pos:start="4932:21" pos:end="4932:23">off</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="4936:9" pos:end="4936:58"><expr pos:start="4936:9" pos:end="4936:57"><name pos:start="4936:9" pos:end="4936:11">ret</name> <operator pos:start="4936:13" pos:end="4936:13">=</operator> <call pos:start="4936:15" pos:end="4936:57"><name pos:start="4936:15" pos:end="4936:23">get_errno</name><argument_list pos:start="4936:24" pos:end="4936:57">(<argument pos:start="4936:25" pos:end="4936:56"><expr pos:start="4936:25" pos:end="4936:56"><call pos:start="4936:25" pos:end="4936:56"><name pos:start="4936:25" pos:end="4936:32">sendfile</name><argument_list pos:start="4936:33" pos:end="4936:56">(<argument pos:start="4936:34" pos:end="4936:37"><expr pos:start="4936:34" pos:end="4936:37"><name pos:start="4936:34" pos:end="4936:37">arg1</name></expr></argument>, <argument pos:start="4936:40" pos:end="4936:43"><expr pos:start="4936:40" pos:end="4936:43"><name pos:start="4936:40" pos:end="4936:43">arg2</name></expr></argument>, <argument pos:start="4936:46" pos:end="4936:49"><expr pos:start="4936:46" pos:end="4936:49"><name pos:start="4936:46" pos:end="4936:49">offp</name></expr></argument>, <argument pos:start="4936:52" pos:end="4936:55"><expr pos:start="4936:52" pos:end="4936:55"><name pos:start="4936:52" pos:end="4936:55">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4938:9" pos:end="4948:9"><if pos:start="4938:9" pos:end="4948:9">if <condition pos:start="4938:12" pos:end="4938:35">(<expr pos:start="4938:13" pos:end="4938:34"><operator pos:start="4938:13" pos:end="4938:13">!</operator><call pos:start="4938:14" pos:end="4938:26"><name pos:start="4938:14" pos:end="4938:21">is_error</name><argument_list pos:start="4938:22" pos:end="4938:26">(<argument pos:start="4938:23" pos:end="4938:25"><expr pos:start="4938:23" pos:end="4938:25"><name pos:start="4938:23" pos:end="4938:25">ret</name></expr></argument>)</argument_list></call> <operator pos:start="4938:28" pos:end="4938:29">&amp;&amp;</operator> <name pos:start="4938:31" pos:end="4938:34">arg3</name></expr>)</condition> <block pos:start="4938:37" pos:end="4948:9">{<block_content pos:start="4940:13" pos:end="4946:13">

            <decl_stmt pos:start="4940:13" pos:end="4940:52"><decl pos:start="4940:13" pos:end="4940:51"><type pos:start="4940:13" pos:end="4940:20"><name pos:start="4940:13" pos:end="4940:20">abi_long</name></type> <name pos:start="4940:22" pos:end="4940:25">ret2</name> <init pos:start="4940:27" pos:end="4940:51">= <expr pos:start="4940:29" pos:end="4940:51"><call pos:start="4940:29" pos:end="4940:51"><name pos:start="4940:29" pos:end="4940:40">put_user_s64</name><argument_list pos:start="4940:41" pos:end="4940:51">(<argument pos:start="4940:42" pos:end="4940:44"><expr pos:start="4940:42" pos:end="4940:44"><name pos:start="4940:42" pos:end="4940:44">off</name></expr></argument>, <argument pos:start="4940:47" pos:end="4940:50"><expr pos:start="4940:47" pos:end="4940:50"><name pos:start="4940:47" pos:end="4940:50">arg3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="4942:13" pos:end="4946:13"><if pos:start="4942:13" pos:end="4946:13">if <condition pos:start="4942:16" pos:end="4942:31">(<expr pos:start="4942:17" pos:end="4942:30"><call pos:start="4942:17" pos:end="4942:30"><name pos:start="4942:17" pos:end="4942:24">is_error</name><argument_list pos:start="4942:25" pos:end="4942:30">(<argument pos:start="4942:26" pos:end="4942:29"><expr pos:start="4942:26" pos:end="4942:29"><name pos:start="4942:26" pos:end="4942:29">ret2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4942:33" pos:end="4946:13">{<block_content pos:start="4944:17" pos:end="4944:27">

                <expr_stmt pos:start="4944:17" pos:end="4944:27"><expr pos:start="4944:17" pos:end="4944:26"><name pos:start="4944:17" pos:end="4944:19">ret</name> <operator pos:start="4944:21" pos:end="4944:21">=</operator> <name pos:start="4944:23" pos:end="4944:26">ret2</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="4950:9" pos:end="4950:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="4954:1" pos:end="4954:6">#<cpp:directive pos:start="4954:2" pos:end="4954:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="4956:1" pos:end="4956:5">#<cpp:directive pos:start="4956:2" pos:end="4956:5">else</cpp:directive></cpp:else>

    <case pos:start="4958:5" pos:end="4961:0">case <expr pos:start="4958:10" pos:end="4958:27"><name pos:start="4958:10" pos:end="4958:27">TARGET_NR_sendfile</name></expr>:</case>

<cpp:ifdef pos:start="4960:1" pos:end="4960:27">#<cpp:directive pos:start="4960:2" pos:end="4960:6">ifdef</cpp:directive> <name pos:start="4960:8" pos:end="4960:27">TARGET_NR_sendfile64</name></cpp:ifdef>

    <case pos:start="4962:5" pos:end="4965:0">case <expr pos:start="4962:10" pos:end="4962:29"><name pos:start="4962:10" pos:end="4962:29">TARGET_NR_sendfile64</name></expr>:</case>

<cpp:endif pos:start="4964:1" pos:end="4964:6">#<cpp:directive pos:start="4964:2" pos:end="4964:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="4966:9" pos:end="4973:0">goto <name pos:start="4966:14" pos:end="4966:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4968:1" pos:end="4968:6">#<cpp:directive pos:start="4968:2" pos:end="4968:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="4972:1" pos:end="4972:24">#<cpp:directive pos:start="4972:2" pos:end="4972:6">ifdef</cpp:directive> <name pos:start="4972:8" pos:end="4972:24">TARGET_NR_getpmsg</name></cpp:ifdef>

    <case pos:start="4974:5" pos:end="4974:27">case <expr pos:start="4974:10" pos:end="4974:26"><name pos:start="4974:10" pos:end="4974:26">TARGET_NR_getpmsg</name></expr>:</case>

        <goto pos:start="4976:9" pos:end="4981:0">goto <name pos:start="4976:14" pos:end="4976:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4978:1" pos:end="4978:6">#<cpp:directive pos:start="4978:2" pos:end="4978:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4980:1" pos:end="4980:24">#<cpp:directive pos:start="4980:2" pos:end="4980:6">ifdef</cpp:directive> <name pos:start="4980:8" pos:end="4980:24">TARGET_NR_putpmsg</name></cpp:ifdef>

    <case pos:start="4982:5" pos:end="4982:27">case <expr pos:start="4982:10" pos:end="4982:26"><name pos:start="4982:10" pos:end="4982:26">TARGET_NR_putpmsg</name></expr>:</case>

        <goto pos:start="4984:9" pos:end="4989:0">goto <name pos:start="4984:14" pos:end="4984:26">unimplemented</name>;</goto>

<cpp:endif pos:start="4986:1" pos:end="4986:6">#<cpp:directive pos:start="4986:2" pos:end="4986:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4988:1" pos:end="4988:22">#<cpp:directive pos:start="4988:2" pos:end="4988:6">ifdef</cpp:directive> <name pos:start="4988:8" pos:end="4988:22">TARGET_NR_vfork</name></cpp:ifdef>

    <case pos:start="4990:5" pos:end="4990:25">case <expr pos:start="4990:10" pos:end="4990:24"><name pos:start="4990:10" pos:end="4990:24">TARGET_NR_vfork</name></expr>:</case>

        <expr_stmt pos:start="4992:9" pos:end="4994:37"><expr pos:start="4992:9" pos:end="4994:36"><name pos:start="4992:9" pos:end="4992:11">ret</name> <operator pos:start="4992:13" pos:end="4992:13">=</operator> <call pos:start="4992:15" pos:end="4994:36"><name pos:start="4992:15" pos:end="4992:23">get_errno</name><argument_list pos:start="4992:24" pos:end="4994:36">(<argument pos:start="4992:25" pos:end="4994:35"><expr pos:start="4992:25" pos:end="4994:35"><call pos:start="4992:25" pos:end="4994:35"><name pos:start="4992:25" pos:end="4992:31">do_fork</name><argument_list pos:start="4992:32" pos:end="4994:35">(<argument pos:start="4992:33" pos:end="4992:39"><expr pos:start="4992:33" pos:end="4992:39"><name pos:start="4992:33" pos:end="4992:39">cpu_env</name></expr></argument>, <argument pos:start="4992:42" pos:end="4992:73"><expr pos:start="4992:42" pos:end="4992:73"><name pos:start="4992:42" pos:end="4992:52">CLONE_VFORK</name> <operator pos:start="4992:54" pos:end="4992:54">|</operator> <name pos:start="4992:56" pos:end="4992:63">CLONE_VM</name> <operator pos:start="4992:65" pos:end="4992:65">|</operator> <name pos:start="4992:67" pos:end="4992:73">SIGCHLD</name></expr></argument>,

                        <argument pos:start="4994:25" pos:end="4994:25"><expr pos:start="4994:25" pos:end="4994:25"><literal type="number" pos:start="4994:25" pos:end="4994:25">0</literal></expr></argument>, <argument pos:start="4994:28" pos:end="4994:28"><expr pos:start="4994:28" pos:end="4994:28"><literal type="number" pos:start="4994:28" pos:end="4994:28">0</literal></expr></argument>, <argument pos:start="4994:31" pos:end="4994:31"><expr pos:start="4994:31" pos:end="4994:31"><literal type="number" pos:start="4994:31" pos:end="4994:31">0</literal></expr></argument>, <argument pos:start="4994:34" pos:end="4994:34"><expr pos:start="4994:34" pos:end="4994:34"><literal type="number" pos:start="4994:34" pos:end="4994:34">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4996:9" pos:end="5001:0">break;</break>

<cpp:endif pos:start="4998:1" pos:end="4998:6">#<cpp:directive pos:start="4998:2" pos:end="4998:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5000:1" pos:end="5000:27">#<cpp:directive pos:start="5000:2" pos:end="5000:6">ifdef</cpp:directive> <name pos:start="5000:8" pos:end="5000:27">TARGET_NR_ugetrlimit</name></cpp:ifdef>

    <case pos:start="5002:5" pos:end="5002:30">case <expr pos:start="5002:10" pos:end="5002:29"><name pos:start="5002:10" pos:end="5002:29">TARGET_NR_ugetrlimit</name></expr>:</case>

    <block pos:start="5004:5" pos:end="5035:0">{<block_content pos:start="5006:9" pos:end="5028:14">

	<decl_stmt pos:start="5006:9" pos:end="5006:27"><decl pos:start="5006:9" pos:end="5006:26"><type pos:start="5006:9" pos:end="5006:21"><name pos:start="5006:9" pos:end="5006:21"><name pos:start="5006:9" pos:end="5006:14">struct</name> <name pos:start="5006:16" pos:end="5006:21">rlimit</name></name></type> <name pos:start="5006:23" pos:end="5006:26">rlim</name></decl>;</decl_stmt>

	<decl_stmt pos:start="5008:9" pos:end="5008:53"><decl pos:start="5008:9" pos:end="5008:52"><type pos:start="5008:9" pos:end="5008:11"><name pos:start="5008:9" pos:end="5008:11">int</name></type> <name pos:start="5008:13" pos:end="5008:20">resource</name> <init pos:start="5008:22" pos:end="5008:52">= <expr pos:start="5008:24" pos:end="5008:52"><call pos:start="5008:24" pos:end="5008:52"><name pos:start="5008:24" pos:end="5008:46">target_to_host_resource</name><argument_list pos:start="5008:47" pos:end="5008:52">(<argument pos:start="5008:48" pos:end="5008:51"><expr pos:start="5008:48" pos:end="5008:51"><name pos:start="5008:48" pos:end="5008:51">arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt pos:start="5010:9" pos:end="5010:52"><expr pos:start="5010:9" pos:end="5010:51"><name pos:start="5010:9" pos:end="5010:11">ret</name> <operator pos:start="5010:13" pos:end="5010:13">=</operator> <call pos:start="5010:15" pos:end="5010:51"><name pos:start="5010:15" pos:end="5010:23">get_errno</name><argument_list pos:start="5010:24" pos:end="5010:51">(<argument pos:start="5010:25" pos:end="5010:50"><expr pos:start="5010:25" pos:end="5010:50"><call pos:start="5010:25" pos:end="5010:50"><name pos:start="5010:25" pos:end="5010:33">getrlimit</name><argument_list pos:start="5010:34" pos:end="5010:50">(<argument pos:start="5010:35" pos:end="5010:42"><expr pos:start="5010:35" pos:end="5010:42"><name pos:start="5010:35" pos:end="5010:42">resource</name></expr></argument>, <argument pos:start="5010:45" pos:end="5010:49"><expr pos:start="5010:45" pos:end="5010:49"><operator pos:start="5010:45" pos:end="5010:45">&amp;</operator><name pos:start="5010:46" pos:end="5010:49">rlim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="5012:9" pos:end="5026:9"><if pos:start="5012:9" pos:end="5026:9">if <condition pos:start="5012:12" pos:end="5012:27">(<expr pos:start="5012:13" pos:end="5012:26"><operator pos:start="5012:13" pos:end="5012:13">!</operator><call pos:start="5012:14" pos:end="5012:26"><name pos:start="5012:14" pos:end="5012:21">is_error</name><argument_list pos:start="5012:22" pos:end="5012:26">(<argument pos:start="5012:23" pos:end="5012:25"><expr pos:start="5012:23" pos:end="5012:25"><name pos:start="5012:23" pos:end="5012:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5012:29" pos:end="5026:9">{<block_content pos:start="5014:13" pos:end="5024:53">

	    <decl_stmt pos:start="5014:13" pos:end="5014:46"><decl pos:start="5014:13" pos:end="5014:45"><type pos:start="5014:13" pos:end="5014:34"><name pos:start="5014:13" pos:end="5014:32"><name pos:start="5014:13" pos:end="5014:18">struct</name> <name pos:start="5014:20" pos:end="5014:32">target_rlimit</name></name> <modifier pos:start="5014:34" pos:end="5014:34">*</modifier></type><name pos:start="5014:35" pos:end="5014:45">target_rlim</name></decl>;</decl_stmt>

            <if_stmt pos:start="5016:13" pos:end="5018:28"><if pos:start="5016:13" pos:end="5018:28">if <condition pos:start="5016:16" pos:end="5016:70">(<expr pos:start="5016:17" pos:end="5016:69"><operator pos:start="5016:17" pos:end="5016:17">!</operator><call pos:start="5016:18" pos:end="5016:69"><name pos:start="5016:18" pos:end="5016:33">lock_user_struct</name><argument_list pos:start="5016:34" pos:end="5016:69">(<argument pos:start="5016:35" pos:end="5016:46"><expr pos:start="5016:35" pos:end="5016:46"><name pos:start="5016:35" pos:end="5016:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="5016:49" pos:end="5016:59"><expr pos:start="5016:49" pos:end="5016:59"><name pos:start="5016:49" pos:end="5016:59">target_rlim</name></expr></argument>, <argument pos:start="5016:62" pos:end="5016:65"><expr pos:start="5016:62" pos:end="5016:65"><name pos:start="5016:62" pos:end="5016:65">arg2</name></expr></argument>, <argument pos:start="5016:68" pos:end="5016:68"><expr pos:start="5016:68" pos:end="5016:68"><literal type="number" pos:start="5016:68" pos:end="5016:68">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5018:17" pos:end="5018:28"><block_content pos:start="5018:17" pos:end="5018:28">

                <goto pos:start="5018:17" pos:end="5018:28">goto <name pos:start="5018:22" pos:end="5018:27">efault</name>;</goto></block_content></block></if></if_stmt>

	    <expr_stmt pos:start="5020:13" pos:end="5020:71"><expr pos:start="5020:13" pos:end="5020:70"><name pos:start="5020:13" pos:end="5020:33"><name pos:start="5020:13" pos:end="5020:23">target_rlim</name><operator pos:start="5020:24" pos:end="5020:25">-&gt;</operator><name pos:start="5020:26" pos:end="5020:33">rlim_cur</name></name> <operator pos:start="5020:35" pos:end="5020:35">=</operator> <call pos:start="5020:37" pos:end="5020:70"><name pos:start="5020:37" pos:end="5020:55">host_to_target_rlim</name><argument_list pos:start="5020:56" pos:end="5020:70">(<argument pos:start="5020:57" pos:end="5020:69"><expr pos:start="5020:57" pos:end="5020:69"><name pos:start="5020:57" pos:end="5020:69"><name pos:start="5020:57" pos:end="5020:60">rlim</name><operator pos:start="5020:61" pos:end="5020:61">.</operator><name pos:start="5020:62" pos:end="5020:69">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="5022:13" pos:end="5022:71"><expr pos:start="5022:13" pos:end="5022:70"><name pos:start="5022:13" pos:end="5022:33"><name pos:start="5022:13" pos:end="5022:23">target_rlim</name><operator pos:start="5022:24" pos:end="5022:25">-&gt;</operator><name pos:start="5022:26" pos:end="5022:33">rlim_max</name></name> <operator pos:start="5022:35" pos:end="5022:35">=</operator> <call pos:start="5022:37" pos:end="5022:70"><name pos:start="5022:37" pos:end="5022:55">host_to_target_rlim</name><argument_list pos:start="5022:56" pos:end="5022:70">(<argument pos:start="5022:57" pos:end="5022:69"><expr pos:start="5022:57" pos:end="5022:69"><name pos:start="5022:57" pos:end="5022:69"><name pos:start="5022:57" pos:end="5022:60">rlim</name><operator pos:start="5022:61" pos:end="5022:61">.</operator><name pos:start="5022:62" pos:end="5022:69">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5024:13" pos:end="5024:53"><expr pos:start="5024:13" pos:end="5024:52"><call pos:start="5024:13" pos:end="5024:52"><name pos:start="5024:13" pos:end="5024:30">unlock_user_struct</name><argument_list pos:start="5024:31" pos:end="5024:52">(<argument pos:start="5024:32" pos:end="5024:42"><expr pos:start="5024:32" pos:end="5024:42"><name pos:start="5024:32" pos:end="5024:42">target_rlim</name></expr></argument>, <argument pos:start="5024:45" pos:end="5024:48"><expr pos:start="5024:45" pos:end="5024:48"><name pos:start="5024:45" pos:end="5024:48">arg2</name></expr></argument>, <argument pos:start="5024:51" pos:end="5024:51"><expr pos:start="5024:51" pos:end="5024:51"><literal type="number" pos:start="5024:51" pos:end="5024:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<break pos:start="5028:9" pos:end="5028:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="5032:1" pos:end="5032:6">#<cpp:directive pos:start="5032:2" pos:end="5032:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5034:1" pos:end="5034:27">#<cpp:directive pos:start="5034:2" pos:end="5034:6">ifdef</cpp:directive> <name pos:start="5034:8" pos:end="5034:27">TARGET_NR_truncate64</name></cpp:ifdef>

    <case pos:start="5036:5" pos:end="5036:30">case <expr pos:start="5036:10" pos:end="5036:29"><name pos:start="5036:10" pos:end="5036:29">TARGET_NR_truncate64</name></expr>:</case>

        <if_stmt pos:start="5038:9" pos:end="5040:24"><if pos:start="5038:9" pos:end="5040:24">if <condition pos:start="5038:12" pos:end="5038:42">(<expr pos:start="5038:13" pos:end="5038:41"><operator pos:start="5038:13" pos:end="5038:13">!</operator><operator pos:start="5038:14" pos:end="5038:14">(</operator><name pos:start="5038:15" pos:end="5038:15">p</name> <operator pos:start="5038:17" pos:end="5038:17">=</operator> <call pos:start="5038:19" pos:end="5038:40"><name pos:start="5038:19" pos:end="5038:34">lock_user_string</name><argument_list pos:start="5038:35" pos:end="5038:40">(<argument pos:start="5038:36" pos:end="5038:39"><expr pos:start="5038:36" pos:end="5038:39"><name pos:start="5038:36" pos:end="5038:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="5038:41" pos:end="5038:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5040:13" pos:end="5040:24"><block_content pos:start="5040:13" pos:end="5040:24">

            <goto pos:start="5040:13" pos:end="5040:24">goto <name pos:start="5040:18" pos:end="5040:23">efault</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt pos:start="5042:9" pos:end="5042:62"><expr pos:start="5042:9" pos:end="5042:61"><name pos:start="5042:9" pos:end="5042:11">ret</name> <operator pos:start="5042:13" pos:end="5042:13">=</operator> <call pos:start="5042:15" pos:end="5042:61"><name pos:start="5042:15" pos:end="5042:31">target_truncate64</name><argument_list pos:start="5042:32" pos:end="5042:61">(<argument pos:start="5042:33" pos:end="5042:39"><expr pos:start="5042:33" pos:end="5042:39"><name pos:start="5042:33" pos:end="5042:39">cpu_env</name></expr></argument>, <argument pos:start="5042:42" pos:end="5042:42"><expr pos:start="5042:42" pos:end="5042:42"><name pos:start="5042:42" pos:end="5042:42">p</name></expr></argument>, <argument pos:start="5042:45" pos:end="5042:48"><expr pos:start="5042:45" pos:end="5042:48"><name pos:start="5042:45" pos:end="5042:48">arg2</name></expr></argument>, <argument pos:start="5042:51" pos:end="5042:54"><expr pos:start="5042:51" pos:end="5042:54"><name pos:start="5042:51" pos:end="5042:54">arg3</name></expr></argument>, <argument pos:start="5042:57" pos:end="5042:60"><expr pos:start="5042:57" pos:end="5042:60"><name pos:start="5042:57" pos:end="5042:60">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5044:9" pos:end="5044:32"><expr pos:start="5044:9" pos:end="5044:31"><call pos:start="5044:9" pos:end="5044:31"><name pos:start="5044:9" pos:end="5044:19">unlock_user</name><argument_list pos:start="5044:20" pos:end="5044:31">(<argument pos:start="5044:21" pos:end="5044:21"><expr pos:start="5044:21" pos:end="5044:21"><name pos:start="5044:21" pos:end="5044:21">p</name></expr></argument>, <argument pos:start="5044:24" pos:end="5044:27"><expr pos:start="5044:24" pos:end="5044:27"><name pos:start="5044:24" pos:end="5044:27">arg1</name></expr></argument>, <argument pos:start="5044:30" pos:end="5044:30"><expr pos:start="5044:30" pos:end="5044:30"><literal type="number" pos:start="5044:30" pos:end="5044:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="5046:9" pos:end="5051:0">break;</break>

<cpp:endif pos:start="5048:1" pos:end="5048:6">#<cpp:directive pos:start="5048:2" pos:end="5048:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5050:1" pos:end="5050:28">#<cpp:directive pos:start="5050:2" pos:end="5050:6">ifdef</cpp:directive> <name pos:start="5050:8" pos:end="5050:28">TARGET_NR_ftruncate64</name></cpp:ifdef>

    <case pos:start="5052:5" pos:end="5052:31">case <expr pos:start="5052:10" pos:end="5052:30"><name pos:start="5052:10" pos:end="5052:30">TARGET_NR_ftruncate64</name></expr>:</case>

	<expr_stmt pos:start="5054:9" pos:end="5054:66"><expr pos:start="5054:9" pos:end="5054:65"><name pos:start="5054:9" pos:end="5054:11">ret</name> <operator pos:start="5054:13" pos:end="5054:13">=</operator> <call pos:start="5054:15" pos:end="5054:65"><name pos:start="5054:15" pos:end="5054:32">target_ftruncate64</name><argument_list pos:start="5054:33" pos:end="5054:65">(<argument pos:start="5054:34" pos:end="5054:40"><expr pos:start="5054:34" pos:end="5054:40"><name pos:start="5054:34" pos:end="5054:40">cpu_env</name></expr></argument>, <argument pos:start="5054:43" pos:end="5054:46"><expr pos:start="5054:43" pos:end="5054:46"><name pos:start="5054:43" pos:end="5054:46">arg1</name></expr></argument>, <argument pos:start="5054:49" pos:end="5054:52"><expr pos:start="5054:49" pos:end="5054:52"><name pos:start="5054:49" pos:end="5054:52">arg2</name></expr></argument>, <argument pos:start="5054:55" pos:end="5054:58"><expr pos:start="5054:55" pos:end="5054:58"><name pos:start="5054:55" pos:end="5054:58">arg3</name></expr></argument>, <argument pos:start="5054:61" pos:end="5054:64"><expr pos:start="5054:61" pos:end="5054:64"><name pos:start="5054:61" pos:end="5054:64">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="5056:9" pos:end="5061:0">break;</break>

<cpp:endif pos:start="5058:1" pos:end="5058:6">#<cpp:directive pos:start="5058:2" pos:end="5058:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5060:1" pos:end="5060:23">#<cpp:directive pos:start="5060:2" pos:end="5060:6">ifdef</cpp:directive> <name pos:start="5060:8" pos:end="5060:23">TARGET_NR_stat64</name></cpp:ifdef>

    <case pos:start="5062:5" pos:end="5062:26">case <expr pos:start="5062:10" pos:end="5062:25"><name pos:start="5062:10" pos:end="5062:25">TARGET_NR_stat64</name></expr>:</case>

        <if_stmt pos:start="5064:9" pos:end="5066:24"><if pos:start="5064:9" pos:end="5066:24">if <condition pos:start="5064:12" pos:end="5064:42">(<expr pos:start="5064:13" pos:end="5064:41"><operator pos:start="5064:13" pos:end="5064:13">!</operator><operator pos:start="5064:14" pos:end="5064:14">(</operator><name pos:start="5064:15" pos:end="5064:15">p</name> <operator pos:start="5064:17" pos:end="5064:17">=</operator> <call pos:start="5064:19" pos:end="5064:40"><name pos:start="5064:19" pos:end="5064:34">lock_user_string</name><argument_list pos:start="5064:35" pos:end="5064:40">(<argument pos:start="5064:36" pos:end="5064:39"><expr pos:start="5064:36" pos:end="5064:39"><name pos:start="5064:36" pos:end="5064:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="5064:41" pos:end="5064:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5066:13" pos:end="5066:24"><block_content pos:start="5066:13" pos:end="5066:24">

            <goto pos:start="5066:13" pos:end="5066:24">goto <name pos:start="5066:18" pos:end="5066:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5068:9" pos:end="5068:44"><expr pos:start="5068:9" pos:end="5068:43"><name pos:start="5068:9" pos:end="5068:11">ret</name> <operator pos:start="5068:13" pos:end="5068:13">=</operator> <call pos:start="5068:15" pos:end="5068:43"><name pos:start="5068:15" pos:end="5068:23">get_errno</name><argument_list pos:start="5068:24" pos:end="5068:43">(<argument pos:start="5068:25" pos:end="5068:42"><expr pos:start="5068:25" pos:end="5068:42"><call pos:start="5068:25" pos:end="5068:42"><name pos:start="5068:25" pos:end="5068:28">stat</name><argument_list pos:start="5068:29" pos:end="5068:42">(<argument pos:start="5068:30" pos:end="5068:36"><expr pos:start="5068:30" pos:end="5068:36"><call pos:start="5068:30" pos:end="5068:36"><name pos:start="5068:30" pos:end="5068:33">path</name><argument_list pos:start="5068:34" pos:end="5068:36">(<argument pos:start="5068:35" pos:end="5068:35"><expr pos:start="5068:35" pos:end="5068:35"><name pos:start="5068:35" pos:end="5068:35">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5068:39" pos:end="5068:41"><expr pos:start="5068:39" pos:end="5068:41"><operator pos:start="5068:39" pos:end="5068:39">&amp;</operator><name pos:start="5068:40" pos:end="5068:41">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5070:9" pos:end="5070:32"><expr pos:start="5070:9" pos:end="5070:31"><call pos:start="5070:9" pos:end="5070:31"><name pos:start="5070:9" pos:end="5070:19">unlock_user</name><argument_list pos:start="5070:20" pos:end="5070:31">(<argument pos:start="5070:21" pos:end="5070:21"><expr pos:start="5070:21" pos:end="5070:21"><name pos:start="5070:21" pos:end="5070:21">p</name></expr></argument>, <argument pos:start="5070:24" pos:end="5070:27"><expr pos:start="5070:24" pos:end="5070:27"><name pos:start="5070:24" pos:end="5070:27">arg1</name></expr></argument>, <argument pos:start="5070:30" pos:end="5070:30"><expr pos:start="5070:30" pos:end="5070:30"><literal type="number" pos:start="5070:30" pos:end="5070:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5072:9" pos:end="5074:60"><if pos:start="5072:9" pos:end="5074:60">if <condition pos:start="5072:12" pos:end="5072:27">(<expr pos:start="5072:13" pos:end="5072:26"><operator pos:start="5072:13" pos:end="5072:13">!</operator><call pos:start="5072:14" pos:end="5072:26"><name pos:start="5072:14" pos:end="5072:21">is_error</name><argument_list pos:start="5072:22" pos:end="5072:26">(<argument pos:start="5072:23" pos:end="5072:25"><expr pos:start="5072:23" pos:end="5072:25"><name pos:start="5072:23" pos:end="5072:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5074:13" pos:end="5074:60"><block_content pos:start="5074:13" pos:end="5074:60">

            <expr_stmt pos:start="5074:13" pos:end="5074:60"><expr pos:start="5074:13" pos:end="5074:59"><name pos:start="5074:13" pos:end="5074:15">ret</name> <operator pos:start="5074:17" pos:end="5074:17">=</operator> <call pos:start="5074:19" pos:end="5074:59"><name pos:start="5074:19" pos:end="5074:39">host_to_target_stat64</name><argument_list pos:start="5074:40" pos:end="5074:59">(<argument pos:start="5074:41" pos:end="5074:47"><expr pos:start="5074:41" pos:end="5074:47"><name pos:start="5074:41" pos:end="5074:47">cpu_env</name></expr></argument>, <argument pos:start="5074:50" pos:end="5074:53"><expr pos:start="5074:50" pos:end="5074:53"><name pos:start="5074:50" pos:end="5074:53">arg2</name></expr></argument>, <argument pos:start="5074:56" pos:end="5074:58"><expr pos:start="5074:56" pos:end="5074:58"><operator pos:start="5074:56" pos:end="5074:56">&amp;</operator><name pos:start="5074:57" pos:end="5074:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="5076:9" pos:end="5081:0">break;</break>

<cpp:endif pos:start="5078:1" pos:end="5078:6">#<cpp:directive pos:start="5078:2" pos:end="5078:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5080:1" pos:end="5080:24">#<cpp:directive pos:start="5080:2" pos:end="5080:6">ifdef</cpp:directive> <name pos:start="5080:8" pos:end="5080:24">TARGET_NR_lstat64</name></cpp:ifdef>

    <case pos:start="5082:5" pos:end="5082:27">case <expr pos:start="5082:10" pos:end="5082:26"><name pos:start="5082:10" pos:end="5082:26">TARGET_NR_lstat64</name></expr>:</case>

        <if_stmt pos:start="5084:9" pos:end="5086:24"><if pos:start="5084:9" pos:end="5086:24">if <condition pos:start="5084:12" pos:end="5084:42">(<expr pos:start="5084:13" pos:end="5084:41"><operator pos:start="5084:13" pos:end="5084:13">!</operator><operator pos:start="5084:14" pos:end="5084:14">(</operator><name pos:start="5084:15" pos:end="5084:15">p</name> <operator pos:start="5084:17" pos:end="5084:17">=</operator> <call pos:start="5084:19" pos:end="5084:40"><name pos:start="5084:19" pos:end="5084:34">lock_user_string</name><argument_list pos:start="5084:35" pos:end="5084:40">(<argument pos:start="5084:36" pos:end="5084:39"><expr pos:start="5084:36" pos:end="5084:39"><name pos:start="5084:36" pos:end="5084:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="5084:41" pos:end="5084:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5086:13" pos:end="5086:24"><block_content pos:start="5086:13" pos:end="5086:24">

            <goto pos:start="5086:13" pos:end="5086:24">goto <name pos:start="5086:18" pos:end="5086:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5088:9" pos:end="5088:45"><expr pos:start="5088:9" pos:end="5088:44"><name pos:start="5088:9" pos:end="5088:11">ret</name> <operator pos:start="5088:13" pos:end="5088:13">=</operator> <call pos:start="5088:15" pos:end="5088:44"><name pos:start="5088:15" pos:end="5088:23">get_errno</name><argument_list pos:start="5088:24" pos:end="5088:44">(<argument pos:start="5088:25" pos:end="5088:43"><expr pos:start="5088:25" pos:end="5088:43"><call pos:start="5088:25" pos:end="5088:43"><name pos:start="5088:25" pos:end="5088:29">lstat</name><argument_list pos:start="5088:30" pos:end="5088:43">(<argument pos:start="5088:31" pos:end="5088:37"><expr pos:start="5088:31" pos:end="5088:37"><call pos:start="5088:31" pos:end="5088:37"><name pos:start="5088:31" pos:end="5088:34">path</name><argument_list pos:start="5088:35" pos:end="5088:37">(<argument pos:start="5088:36" pos:end="5088:36"><expr pos:start="5088:36" pos:end="5088:36"><name pos:start="5088:36" pos:end="5088:36">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5088:40" pos:end="5088:42"><expr pos:start="5088:40" pos:end="5088:42"><operator pos:start="5088:40" pos:end="5088:40">&amp;</operator><name pos:start="5088:41" pos:end="5088:42">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5090:9" pos:end="5090:32"><expr pos:start="5090:9" pos:end="5090:31"><call pos:start="5090:9" pos:end="5090:31"><name pos:start="5090:9" pos:end="5090:19">unlock_user</name><argument_list pos:start="5090:20" pos:end="5090:31">(<argument pos:start="5090:21" pos:end="5090:21"><expr pos:start="5090:21" pos:end="5090:21"><name pos:start="5090:21" pos:end="5090:21">p</name></expr></argument>, <argument pos:start="5090:24" pos:end="5090:27"><expr pos:start="5090:24" pos:end="5090:27"><name pos:start="5090:24" pos:end="5090:27">arg1</name></expr></argument>, <argument pos:start="5090:30" pos:end="5090:30"><expr pos:start="5090:30" pos:end="5090:30"><literal type="number" pos:start="5090:30" pos:end="5090:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5092:9" pos:end="5094:60"><if pos:start="5092:9" pos:end="5094:60">if <condition pos:start="5092:12" pos:end="5092:27">(<expr pos:start="5092:13" pos:end="5092:26"><operator pos:start="5092:13" pos:end="5092:13">!</operator><call pos:start="5092:14" pos:end="5092:26"><name pos:start="5092:14" pos:end="5092:21">is_error</name><argument_list pos:start="5092:22" pos:end="5092:26">(<argument pos:start="5092:23" pos:end="5092:25"><expr pos:start="5092:23" pos:end="5092:25"><name pos:start="5092:23" pos:end="5092:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5094:13" pos:end="5094:60"><block_content pos:start="5094:13" pos:end="5094:60">

            <expr_stmt pos:start="5094:13" pos:end="5094:60"><expr pos:start="5094:13" pos:end="5094:59"><name pos:start="5094:13" pos:end="5094:15">ret</name> <operator pos:start="5094:17" pos:end="5094:17">=</operator> <call pos:start="5094:19" pos:end="5094:59"><name pos:start="5094:19" pos:end="5094:39">host_to_target_stat64</name><argument_list pos:start="5094:40" pos:end="5094:59">(<argument pos:start="5094:41" pos:end="5094:47"><expr pos:start="5094:41" pos:end="5094:47"><name pos:start="5094:41" pos:end="5094:47">cpu_env</name></expr></argument>, <argument pos:start="5094:50" pos:end="5094:53"><expr pos:start="5094:50" pos:end="5094:53"><name pos:start="5094:50" pos:end="5094:53">arg2</name></expr></argument>, <argument pos:start="5094:56" pos:end="5094:58"><expr pos:start="5094:56" pos:end="5094:58"><operator pos:start="5094:56" pos:end="5094:56">&amp;</operator><name pos:start="5094:57" pos:end="5094:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="5096:9" pos:end="5101:0">break;</break>

<cpp:endif pos:start="5098:1" pos:end="5098:6">#<cpp:directive pos:start="5098:2" pos:end="5098:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5100:1" pos:end="5100:24">#<cpp:directive pos:start="5100:2" pos:end="5100:6">ifdef</cpp:directive> <name pos:start="5100:8" pos:end="5100:24">TARGET_NR_fstat64</name></cpp:ifdef>

    <case pos:start="5102:5" pos:end="5102:27">case <expr pos:start="5102:10" pos:end="5102:26"><name pos:start="5102:10" pos:end="5102:26">TARGET_NR_fstat64</name></expr>:</case>

        <expr_stmt pos:start="5104:9" pos:end="5104:42"><expr pos:start="5104:9" pos:end="5104:41"><name pos:start="5104:9" pos:end="5104:11">ret</name> <operator pos:start="5104:13" pos:end="5104:13">=</operator> <call pos:start="5104:15" pos:end="5104:41"><name pos:start="5104:15" pos:end="5104:23">get_errno</name><argument_list pos:start="5104:24" pos:end="5104:41">(<argument pos:start="5104:25" pos:end="5104:40"><expr pos:start="5104:25" pos:end="5104:40"><call pos:start="5104:25" pos:end="5104:40"><name pos:start="5104:25" pos:end="5104:29">fstat</name><argument_list pos:start="5104:30" pos:end="5104:40">(<argument pos:start="5104:31" pos:end="5104:34"><expr pos:start="5104:31" pos:end="5104:34"><name pos:start="5104:31" pos:end="5104:34">arg1</name></expr></argument>, <argument pos:start="5104:37" pos:end="5104:39"><expr pos:start="5104:37" pos:end="5104:39"><operator pos:start="5104:37" pos:end="5104:37">&amp;</operator><name pos:start="5104:38" pos:end="5104:39">st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5106:9" pos:end="5108:60"><if pos:start="5106:9" pos:end="5108:60">if <condition pos:start="5106:12" pos:end="5106:27">(<expr pos:start="5106:13" pos:end="5106:26"><operator pos:start="5106:13" pos:end="5106:13">!</operator><call pos:start="5106:14" pos:end="5106:26"><name pos:start="5106:14" pos:end="5106:21">is_error</name><argument_list pos:start="5106:22" pos:end="5106:26">(<argument pos:start="5106:23" pos:end="5106:25"><expr pos:start="5106:23" pos:end="5106:25"><name pos:start="5106:23" pos:end="5106:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5108:13" pos:end="5108:60"><block_content pos:start="5108:13" pos:end="5108:60">

            <expr_stmt pos:start="5108:13" pos:end="5108:60"><expr pos:start="5108:13" pos:end="5108:59"><name pos:start="5108:13" pos:end="5108:15">ret</name> <operator pos:start="5108:17" pos:end="5108:17">=</operator> <call pos:start="5108:19" pos:end="5108:59"><name pos:start="5108:19" pos:end="5108:39">host_to_target_stat64</name><argument_list pos:start="5108:40" pos:end="5108:59">(<argument pos:start="5108:41" pos:end="5108:47"><expr pos:start="5108:41" pos:end="5108:47"><name pos:start="5108:41" pos:end="5108:47">cpu_env</name></expr></argument>, <argument pos:start="5108:50" pos:end="5108:53"><expr pos:start="5108:50" pos:end="5108:53"><name pos:start="5108:50" pos:end="5108:53">arg2</name></expr></argument>, <argument pos:start="5108:56" pos:end="5108:58"><expr pos:start="5108:56" pos:end="5108:58"><operator pos:start="5108:56" pos:end="5108:56">&amp;</operator><name pos:start="5108:57" pos:end="5108:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="5110:9" pos:end="5117:0">break;</break>

<cpp:endif pos:start="5112:1" pos:end="5112:6">#<cpp:directive pos:start="5112:2" pos:end="5112:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="5114:1" pos:end="5114:67">#<cpp:directive pos:start="5114:2" pos:end="5114:3">if</cpp:directive> <expr pos:start="5114:5" pos:end="5114:67"><operator pos:start="5114:5" pos:end="5114:5">(</operator><call pos:start="5114:6" pos:end="5114:33"><name pos:start="5114:6" pos:end="5114:12">defined</name><argument_list pos:start="5114:13" pos:end="5114:33">(<argument pos:start="5114:14" pos:end="5114:32"><expr pos:start="5114:14" pos:end="5114:32"><name pos:start="5114:14" pos:end="5114:32">TARGET_NR_fstatat64</name></expr></argument>)</argument_list></call> <operator pos:start="5114:35" pos:end="5114:36">||</operator> <call pos:start="5114:38" pos:end="5114:66"><name pos:start="5114:38" pos:end="5114:44">defined</name><argument_list pos:start="5114:45" pos:end="5114:66">(<argument pos:start="5114:46" pos:end="5114:65"><expr pos:start="5114:46" pos:end="5114:65"><name pos:start="5114:46" pos:end="5114:65">TARGET_NR_newfstatat</name></expr></argument>)</argument_list></call><operator pos:start="5114:67" pos:end="5114:67">)</operator></expr></cpp:if>

<cpp:ifdef pos:start="5116:1" pos:end="5116:26">#<cpp:directive pos:start="5116:2" pos:end="5116:6">ifdef</cpp:directive> <name pos:start="5116:8" pos:end="5116:26">TARGET_NR_fstatat64</name></cpp:ifdef>

    <case pos:start="5118:5" pos:end="5123:0">case <expr pos:start="5118:10" pos:end="5118:28"><name pos:start="5118:10" pos:end="5118:28">TARGET_NR_fstatat64</name></expr>:</case>

<cpp:endif pos:start="5120:1" pos:end="5120:6">#<cpp:directive pos:start="5120:2" pos:end="5120:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5122:1" pos:end="5122:27">#<cpp:directive pos:start="5122:2" pos:end="5122:6">ifdef</cpp:directive> <name pos:start="5122:8" pos:end="5122:27">TARGET_NR_newfstatat</name></cpp:ifdef>

    <case pos:start="5124:5" pos:end="5127:0">case <expr pos:start="5124:10" pos:end="5124:29"><name pos:start="5124:10" pos:end="5124:29">TARGET_NR_newfstatat</name></expr>:</case>

<cpp:endif pos:start="5126:1" pos:end="5126:6">#<cpp:directive pos:start="5126:2" pos:end="5126:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="5128:9" pos:end="5130:24"><if pos:start="5128:9" pos:end="5130:24">if <condition pos:start="5128:12" pos:end="5128:42">(<expr pos:start="5128:13" pos:end="5128:41"><operator pos:start="5128:13" pos:end="5128:13">!</operator><operator pos:start="5128:14" pos:end="5128:14">(</operator><name pos:start="5128:15" pos:end="5128:15">p</name> <operator pos:start="5128:17" pos:end="5128:17">=</operator> <call pos:start="5128:19" pos:end="5128:40"><name pos:start="5128:19" pos:end="5128:34">lock_user_string</name><argument_list pos:start="5128:35" pos:end="5128:40">(<argument pos:start="5128:36" pos:end="5128:39"><expr pos:start="5128:36" pos:end="5128:39"><name pos:start="5128:36" pos:end="5128:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="5128:41" pos:end="5128:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5130:13" pos:end="5130:24"><block_content pos:start="5130:13" pos:end="5130:24">

            <goto pos:start="5130:13" pos:end="5130:24">goto <name pos:start="5130:18" pos:end="5130:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5132:9" pos:end="5132:59"><expr pos:start="5132:9" pos:end="5132:58"><name pos:start="5132:9" pos:end="5132:11">ret</name> <operator pos:start="5132:13" pos:end="5132:13">=</operator> <call pos:start="5132:15" pos:end="5132:58"><name pos:start="5132:15" pos:end="5132:23">get_errno</name><argument_list pos:start="5132:24" pos:end="5132:58">(<argument pos:start="5132:25" pos:end="5132:57"><expr pos:start="5132:25" pos:end="5132:57"><call pos:start="5132:25" pos:end="5132:57"><name pos:start="5132:25" pos:end="5132:31">fstatat</name><argument_list pos:start="5132:32" pos:end="5132:57">(<argument pos:start="5132:33" pos:end="5132:36"><expr pos:start="5132:33" pos:end="5132:36"><name pos:start="5132:33" pos:end="5132:36">arg1</name></expr></argument>, <argument pos:start="5132:39" pos:end="5132:45"><expr pos:start="5132:39" pos:end="5132:45"><call pos:start="5132:39" pos:end="5132:45"><name pos:start="5132:39" pos:end="5132:42">path</name><argument_list pos:start="5132:43" pos:end="5132:45">(<argument pos:start="5132:44" pos:end="5132:44"><expr pos:start="5132:44" pos:end="5132:44"><name pos:start="5132:44" pos:end="5132:44">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5132:48" pos:end="5132:50"><expr pos:start="5132:48" pos:end="5132:50"><operator pos:start="5132:48" pos:end="5132:48">&amp;</operator><name pos:start="5132:49" pos:end="5132:50">st</name></expr></argument>, <argument pos:start="5132:53" pos:end="5132:56"><expr pos:start="5132:53" pos:end="5132:56"><name pos:start="5132:53" pos:end="5132:56">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="5134:9" pos:end="5136:60"><if pos:start="5134:9" pos:end="5136:60">if <condition pos:start="5134:12" pos:end="5134:27">(<expr pos:start="5134:13" pos:end="5134:26"><operator pos:start="5134:13" pos:end="5134:13">!</operator><call pos:start="5134:14" pos:end="5134:26"><name pos:start="5134:14" pos:end="5134:21">is_error</name><argument_list pos:start="5134:22" pos:end="5134:26">(<argument pos:start="5134:23" pos:end="5134:25"><expr pos:start="5134:23" pos:end="5134:25"><name pos:start="5134:23" pos:end="5134:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5136:13" pos:end="5136:60"><block_content pos:start="5136:13" pos:end="5136:60">

            <expr_stmt pos:start="5136:13" pos:end="5136:60"><expr pos:start="5136:13" pos:end="5136:59"><name pos:start="5136:13" pos:end="5136:15">ret</name> <operator pos:start="5136:17" pos:end="5136:17">=</operator> <call pos:start="5136:19" pos:end="5136:59"><name pos:start="5136:19" pos:end="5136:39">host_to_target_stat64</name><argument_list pos:start="5136:40" pos:end="5136:59">(<argument pos:start="5136:41" pos:end="5136:47"><expr pos:start="5136:41" pos:end="5136:47"><name pos:start="5136:41" pos:end="5136:47">cpu_env</name></expr></argument>, <argument pos:start="5136:50" pos:end="5136:53"><expr pos:start="5136:50" pos:end="5136:53"><name pos:start="5136:50" pos:end="5136:53">arg3</name></expr></argument>, <argument pos:start="5136:56" pos:end="5136:58"><expr pos:start="5136:56" pos:end="5136:58"><operator pos:start="5136:56" pos:end="5136:56">&amp;</operator><name pos:start="5136:57" pos:end="5136:58">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="5138:9" pos:end="5141:0">break;</break>

<cpp:endif pos:start="5140:1" pos:end="5140:6">#<cpp:directive pos:start="5140:2" pos:end="5140:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5142:5" pos:end="5142:26">case <expr pos:start="5142:10" pos:end="5142:25"><name pos:start="5142:10" pos:end="5142:25">TARGET_NR_lchown</name></expr>:</case>

        <if_stmt pos:start="5144:9" pos:end="5146:24"><if pos:start="5144:9" pos:end="5146:24">if <condition pos:start="5144:12" pos:end="5144:42">(<expr pos:start="5144:13" pos:end="5144:41"><operator pos:start="5144:13" pos:end="5144:13">!</operator><operator pos:start="5144:14" pos:end="5144:14">(</operator><name pos:start="5144:15" pos:end="5144:15">p</name> <operator pos:start="5144:17" pos:end="5144:17">=</operator> <call pos:start="5144:19" pos:end="5144:40"><name pos:start="5144:19" pos:end="5144:34">lock_user_string</name><argument_list pos:start="5144:35" pos:end="5144:40">(<argument pos:start="5144:36" pos:end="5144:39"><expr pos:start="5144:36" pos:end="5144:39"><name pos:start="5144:36" pos:end="5144:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="5144:41" pos:end="5144:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5146:13" pos:end="5146:24"><block_content pos:start="5146:13" pos:end="5146:24">

            <goto pos:start="5146:13" pos:end="5146:24">goto <name pos:start="5146:18" pos:end="5146:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5148:9" pos:end="5148:73"><expr pos:start="5148:9" pos:end="5148:72"><name pos:start="5148:9" pos:end="5148:11">ret</name> <operator pos:start="5148:13" pos:end="5148:13">=</operator> <call pos:start="5148:15" pos:end="5148:72"><name pos:start="5148:15" pos:end="5148:23">get_errno</name><argument_list pos:start="5148:24" pos:end="5148:72">(<argument pos:start="5148:25" pos:end="5148:71"><expr pos:start="5148:25" pos:end="5148:71"><call pos:start="5148:25" pos:end="5148:71"><name pos:start="5148:25" pos:end="5148:30">lchown</name><argument_list pos:start="5148:31" pos:end="5148:71">(<argument pos:start="5148:32" pos:end="5148:32"><expr pos:start="5148:32" pos:end="5148:32"><name pos:start="5148:32" pos:end="5148:32">p</name></expr></argument>, <argument pos:start="5148:35" pos:end="5148:51"><expr pos:start="5148:35" pos:end="5148:51"><call pos:start="5148:35" pos:end="5148:51"><name pos:start="5148:35" pos:end="5148:45">low2highuid</name><argument_list pos:start="5148:46" pos:end="5148:51">(<argument pos:start="5148:47" pos:end="5148:50"><expr pos:start="5148:47" pos:end="5148:50"><name pos:start="5148:47" pos:end="5148:50">arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5148:54" pos:end="5148:70"><expr pos:start="5148:54" pos:end="5148:70"><call pos:start="5148:54" pos:end="5148:70"><name pos:start="5148:54" pos:end="5148:64">low2highgid</name><argument_list pos:start="5148:65" pos:end="5148:70">(<argument pos:start="5148:66" pos:end="5148:69"><expr pos:start="5148:66" pos:end="5148:69"><name pos:start="5148:66" pos:end="5148:69">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5150:9" pos:end="5150:32"><expr pos:start="5150:9" pos:end="5150:31"><call pos:start="5150:9" pos:end="5150:31"><name pos:start="5150:9" pos:end="5150:19">unlock_user</name><argument_list pos:start="5150:20" pos:end="5150:31">(<argument pos:start="5150:21" pos:end="5150:21"><expr pos:start="5150:21" pos:end="5150:21"><name pos:start="5150:21" pos:end="5150:21">p</name></expr></argument>, <argument pos:start="5150:24" pos:end="5150:27"><expr pos:start="5150:24" pos:end="5150:27"><name pos:start="5150:24" pos:end="5150:27">arg1</name></expr></argument>, <argument pos:start="5150:30" pos:end="5150:30"><expr pos:start="5150:30" pos:end="5150:30"><literal type="number" pos:start="5150:30" pos:end="5150:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5152:9" pos:end="5155:0">break;</break>

<cpp:ifdef pos:start="5154:1" pos:end="5154:23">#<cpp:directive pos:start="5154:2" pos:end="5154:6">ifdef</cpp:directive> <name pos:start="5154:8" pos:end="5154:23">TARGET_NR_getuid</name></cpp:ifdef>

    <case pos:start="5156:5" pos:end="5156:26">case <expr pos:start="5156:10" pos:end="5156:25"><name pos:start="5156:10" pos:end="5156:25">TARGET_NR_getuid</name></expr>:</case>

        <expr_stmt pos:start="5158:9" pos:end="5158:47"><expr pos:start="5158:9" pos:end="5158:46"><name pos:start="5158:9" pos:end="5158:11">ret</name> <operator pos:start="5158:13" pos:end="5158:13">=</operator> <call pos:start="5158:15" pos:end="5158:46"><name pos:start="5158:15" pos:end="5158:23">get_errno</name><argument_list pos:start="5158:24" pos:end="5158:46">(<argument pos:start="5158:25" pos:end="5158:45"><expr pos:start="5158:25" pos:end="5158:45"><call pos:start="5158:25" pos:end="5158:45"><name pos:start="5158:25" pos:end="5158:35">high2lowuid</name><argument_list pos:start="5158:36" pos:end="5158:45">(<argument pos:start="5158:37" pos:end="5158:44"><expr pos:start="5158:37" pos:end="5158:44"><call pos:start="5158:37" pos:end="5158:44"><name pos:start="5158:37" pos:end="5158:42">getuid</name><argument_list pos:start="5158:43" pos:end="5158:44">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5160:9" pos:end="5165:0">break;</break>

<cpp:endif pos:start="5162:1" pos:end="5162:6">#<cpp:directive pos:start="5162:2" pos:end="5162:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5164:1" pos:end="5164:23">#<cpp:directive pos:start="5164:2" pos:end="5164:6">ifdef</cpp:directive> <name pos:start="5164:8" pos:end="5164:23">TARGET_NR_getgid</name></cpp:ifdef>

    <case pos:start="5166:5" pos:end="5166:26">case <expr pos:start="5166:10" pos:end="5166:25"><name pos:start="5166:10" pos:end="5166:25">TARGET_NR_getgid</name></expr>:</case>

        <expr_stmt pos:start="5168:9" pos:end="5168:47"><expr pos:start="5168:9" pos:end="5168:46"><name pos:start="5168:9" pos:end="5168:11">ret</name> <operator pos:start="5168:13" pos:end="5168:13">=</operator> <call pos:start="5168:15" pos:end="5168:46"><name pos:start="5168:15" pos:end="5168:23">get_errno</name><argument_list pos:start="5168:24" pos:end="5168:46">(<argument pos:start="5168:25" pos:end="5168:45"><expr pos:start="5168:25" pos:end="5168:45"><call pos:start="5168:25" pos:end="5168:45"><name pos:start="5168:25" pos:end="5168:35">high2lowgid</name><argument_list pos:start="5168:36" pos:end="5168:45">(<argument pos:start="5168:37" pos:end="5168:44"><expr pos:start="5168:37" pos:end="5168:44"><call pos:start="5168:37" pos:end="5168:44"><name pos:start="5168:37" pos:end="5168:42">getgid</name><argument_list pos:start="5168:43" pos:end="5168:44">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5170:9" pos:end="5175:0">break;</break>

<cpp:endif pos:start="5172:1" pos:end="5172:6">#<cpp:directive pos:start="5172:2" pos:end="5172:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5174:1" pos:end="5174:24">#<cpp:directive pos:start="5174:2" pos:end="5174:6">ifdef</cpp:directive> <name pos:start="5174:8" pos:end="5174:24">TARGET_NR_geteuid</name></cpp:ifdef>

    <case pos:start="5176:5" pos:end="5176:27">case <expr pos:start="5176:10" pos:end="5176:26"><name pos:start="5176:10" pos:end="5176:26">TARGET_NR_geteuid</name></expr>:</case>

        <expr_stmt pos:start="5178:9" pos:end="5178:48"><expr pos:start="5178:9" pos:end="5178:47"><name pos:start="5178:9" pos:end="5178:11">ret</name> <operator pos:start="5178:13" pos:end="5178:13">=</operator> <call pos:start="5178:15" pos:end="5178:47"><name pos:start="5178:15" pos:end="5178:23">get_errno</name><argument_list pos:start="5178:24" pos:end="5178:47">(<argument pos:start="5178:25" pos:end="5178:46"><expr pos:start="5178:25" pos:end="5178:46"><call pos:start="5178:25" pos:end="5178:46"><name pos:start="5178:25" pos:end="5178:35">high2lowuid</name><argument_list pos:start="5178:36" pos:end="5178:46">(<argument pos:start="5178:37" pos:end="5178:45"><expr pos:start="5178:37" pos:end="5178:45"><call pos:start="5178:37" pos:end="5178:45"><name pos:start="5178:37" pos:end="5178:43">geteuid</name><argument_list pos:start="5178:44" pos:end="5178:45">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5180:9" pos:end="5185:0">break;</break>

<cpp:endif pos:start="5182:1" pos:end="5182:6">#<cpp:directive pos:start="5182:2" pos:end="5182:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5184:1" pos:end="5184:24">#<cpp:directive pos:start="5184:2" pos:end="5184:6">ifdef</cpp:directive> <name pos:start="5184:8" pos:end="5184:24">TARGET_NR_getegid</name></cpp:ifdef>

    <case pos:start="5186:5" pos:end="5186:27">case <expr pos:start="5186:10" pos:end="5186:26"><name pos:start="5186:10" pos:end="5186:26">TARGET_NR_getegid</name></expr>:</case>

        <expr_stmt pos:start="5188:9" pos:end="5188:48"><expr pos:start="5188:9" pos:end="5188:47"><name pos:start="5188:9" pos:end="5188:11">ret</name> <operator pos:start="5188:13" pos:end="5188:13">=</operator> <call pos:start="5188:15" pos:end="5188:47"><name pos:start="5188:15" pos:end="5188:23">get_errno</name><argument_list pos:start="5188:24" pos:end="5188:47">(<argument pos:start="5188:25" pos:end="5188:46"><expr pos:start="5188:25" pos:end="5188:46"><call pos:start="5188:25" pos:end="5188:46"><name pos:start="5188:25" pos:end="5188:35">high2lowgid</name><argument_list pos:start="5188:36" pos:end="5188:46">(<argument pos:start="5188:37" pos:end="5188:45"><expr pos:start="5188:37" pos:end="5188:45"><call pos:start="5188:37" pos:end="5188:45"><name pos:start="5188:37" pos:end="5188:43">getegid</name><argument_list pos:start="5188:44" pos:end="5188:45">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5190:9" pos:end="5193:0">break;</break>

<cpp:endif pos:start="5192:1" pos:end="5192:6">#<cpp:directive pos:start="5192:2" pos:end="5192:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5194:5" pos:end="5194:28">case <expr pos:start="5194:10" pos:end="5194:27"><name pos:start="5194:10" pos:end="5194:27">TARGET_NR_setreuid</name></expr>:</case>

        <expr_stmt pos:start="5196:9" pos:end="5196:72"><expr pos:start="5196:9" pos:end="5196:71"><name pos:start="5196:9" pos:end="5196:11">ret</name> <operator pos:start="5196:13" pos:end="5196:13">=</operator> <call pos:start="5196:15" pos:end="5196:71"><name pos:start="5196:15" pos:end="5196:23">get_errno</name><argument_list pos:start="5196:24" pos:end="5196:71">(<argument pos:start="5196:25" pos:end="5196:70"><expr pos:start="5196:25" pos:end="5196:70"><call pos:start="5196:25" pos:end="5196:70"><name pos:start="5196:25" pos:end="5196:32">setreuid</name><argument_list pos:start="5196:33" pos:end="5196:70">(<argument pos:start="5196:34" pos:end="5196:50"><expr pos:start="5196:34" pos:end="5196:50"><call pos:start="5196:34" pos:end="5196:50"><name pos:start="5196:34" pos:end="5196:44">low2highuid</name><argument_list pos:start="5196:45" pos:end="5196:50">(<argument pos:start="5196:46" pos:end="5196:49"><expr pos:start="5196:46" pos:end="5196:49"><name pos:start="5196:46" pos:end="5196:49">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5196:53" pos:end="5196:69"><expr pos:start="5196:53" pos:end="5196:69"><call pos:start="5196:53" pos:end="5196:69"><name pos:start="5196:53" pos:end="5196:63">low2highuid</name><argument_list pos:start="5196:64" pos:end="5196:69">(<argument pos:start="5196:65" pos:end="5196:68"><expr pos:start="5196:65" pos:end="5196:68"><name pos:start="5196:65" pos:end="5196:68">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5198:9" pos:end="5198:14">break;</break>

    <case pos:start="5200:5" pos:end="5200:28">case <expr pos:start="5200:10" pos:end="5200:27"><name pos:start="5200:10" pos:end="5200:27">TARGET_NR_setregid</name></expr>:</case>

        <expr_stmt pos:start="5202:9" pos:end="5202:72"><expr pos:start="5202:9" pos:end="5202:71"><name pos:start="5202:9" pos:end="5202:11">ret</name> <operator pos:start="5202:13" pos:end="5202:13">=</operator> <call pos:start="5202:15" pos:end="5202:71"><name pos:start="5202:15" pos:end="5202:23">get_errno</name><argument_list pos:start="5202:24" pos:end="5202:71">(<argument pos:start="5202:25" pos:end="5202:70"><expr pos:start="5202:25" pos:end="5202:70"><call pos:start="5202:25" pos:end="5202:70"><name pos:start="5202:25" pos:end="5202:32">setregid</name><argument_list pos:start="5202:33" pos:end="5202:70">(<argument pos:start="5202:34" pos:end="5202:50"><expr pos:start="5202:34" pos:end="5202:50"><call pos:start="5202:34" pos:end="5202:50"><name pos:start="5202:34" pos:end="5202:44">low2highgid</name><argument_list pos:start="5202:45" pos:end="5202:50">(<argument pos:start="5202:46" pos:end="5202:49"><expr pos:start="5202:46" pos:end="5202:49"><name pos:start="5202:46" pos:end="5202:49">arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5202:53" pos:end="5202:69"><expr pos:start="5202:53" pos:end="5202:69"><call pos:start="5202:53" pos:end="5202:69"><name pos:start="5202:53" pos:end="5202:63">low2highgid</name><argument_list pos:start="5202:64" pos:end="5202:69">(<argument pos:start="5202:65" pos:end="5202:68"><expr pos:start="5202:65" pos:end="5202:68"><name pos:start="5202:65" pos:end="5202:68">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5204:9" pos:end="5204:14">break;</break>

    <case pos:start="5206:5" pos:end="5206:29">case <expr pos:start="5206:10" pos:end="5206:28"><name pos:start="5206:10" pos:end="5206:28">TARGET_NR_getgroups</name></expr>:</case>

        <block pos:start="5208:9" pos:end="5244:9">{<block_content pos:start="5210:13" pos:end="5242:13">

            <decl_stmt pos:start="5210:13" pos:end="5210:34"><decl pos:start="5210:13" pos:end="5210:33"><type pos:start="5210:13" pos:end="5210:15"><name pos:start="5210:13" pos:end="5210:15">int</name></type> <name pos:start="5210:17" pos:end="5210:26">gidsetsize</name> <init pos:start="5210:28" pos:end="5210:33">= <expr pos:start="5210:30" pos:end="5210:33"><name pos:start="5210:30" pos:end="5210:33">arg1</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="5212:13" pos:end="5212:40"><decl pos:start="5212:13" pos:end="5212:39"><type pos:start="5212:13" pos:end="5212:23"><name pos:start="5212:13" pos:end="5212:21">target_id</name> <modifier pos:start="5212:23" pos:end="5212:23">*</modifier></type><name pos:start="5212:24" pos:end="5212:39">target_grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5214:13" pos:end="5214:29"><decl pos:start="5214:13" pos:end="5214:28"><type pos:start="5214:13" pos:end="5214:19"><name pos:start="5214:13" pos:end="5214:17">gid_t</name> <modifier pos:start="5214:19" pos:end="5214:19">*</modifier></type><name pos:start="5214:20" pos:end="5214:28">grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5216:13" pos:end="5216:18"><decl pos:start="5216:13" pos:end="5216:17"><type pos:start="5216:13" pos:end="5216:15"><name pos:start="5216:13" pos:end="5216:15">int</name></type> <name pos:start="5216:17" pos:end="5216:17">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5220:13" pos:end="5220:59"><expr pos:start="5220:13" pos:end="5220:58"><name pos:start="5220:13" pos:end="5220:21">grouplist</name> <operator pos:start="5220:23" pos:end="5220:23">=</operator> <call pos:start="5220:25" pos:end="5220:58"><name pos:start="5220:25" pos:end="5220:30">alloca</name><argument_list pos:start="5220:31" pos:end="5220:58">(<argument pos:start="5220:32" pos:end="5220:57"><expr pos:start="5220:32" pos:end="5220:57"><name pos:start="5220:32" pos:end="5220:41">gidsetsize</name> <operator pos:start="5220:43" pos:end="5220:43">*</operator> <sizeof pos:start="5220:45" pos:end="5220:57">sizeof<argument_list pos:start="5220:51" pos:end="5220:57">(<argument pos:start="5220:52" pos:end="5220:56"><expr pos:start="5220:52" pos:end="5220:56"><name pos:start="5220:52" pos:end="5220:56">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5222:13" pos:end="5222:62"><expr pos:start="5222:13" pos:end="5222:61"><name pos:start="5222:13" pos:end="5222:15">ret</name> <operator pos:start="5222:17" pos:end="5222:17">=</operator> <call pos:start="5222:19" pos:end="5222:61"><name pos:start="5222:19" pos:end="5222:27">get_errno</name><argument_list pos:start="5222:28" pos:end="5222:61">(<argument pos:start="5222:29" pos:end="5222:60"><expr pos:start="5222:29" pos:end="5222:60"><call pos:start="5222:29" pos:end="5222:60"><name pos:start="5222:29" pos:end="5222:37">getgroups</name><argument_list pos:start="5222:38" pos:end="5222:60">(<argument pos:start="5222:39" pos:end="5222:48"><expr pos:start="5222:39" pos:end="5222:48"><name pos:start="5222:39" pos:end="5222:48">gidsetsize</name></expr></argument>, <argument pos:start="5222:51" pos:end="5222:59"><expr pos:start="5222:51" pos:end="5222:59"><name pos:start="5222:51" pos:end="5222:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5224:13" pos:end="5226:22"><if pos:start="5224:13" pos:end="5226:22">if <condition pos:start="5224:16" pos:end="5224:32">(<expr pos:start="5224:17" pos:end="5224:31"><name pos:start="5224:17" pos:end="5224:26">gidsetsize</name> <operator pos:start="5224:28" pos:end="5224:29">==</operator> <literal type="number" pos:start="5224:31" pos:end="5224:31">0</literal></expr>)</condition><block type="pseudo" pos:start="5226:17" pos:end="5226:22"><block_content pos:start="5226:17" pos:end="5226:22">

                <break pos:start="5226:17" pos:end="5226:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="5228:13" pos:end="5242:13"><if pos:start="5228:13" pos:end="5242:13">if <condition pos:start="5228:16" pos:end="5228:31">(<expr pos:start="5228:17" pos:end="5228:30"><operator pos:start="5228:17" pos:end="5228:17">!</operator><call pos:start="5228:18" pos:end="5228:30"><name pos:start="5228:18" pos:end="5228:25">is_error</name><argument_list pos:start="5228:26" pos:end="5228:30">(<argument pos:start="5228:27" pos:end="5228:29"><expr pos:start="5228:27" pos:end="5228:29"><name pos:start="5228:27" pos:end="5228:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5228:33" pos:end="5242:13">{<block_content pos:start="5230:17" pos:end="5240:84">

                <expr_stmt pos:start="5230:17" pos:end="5230:100"><expr pos:start="5230:17" pos:end="5230:99"><name pos:start="5230:17" pos:end="5230:32">target_grouplist</name> <operator pos:start="5230:34" pos:end="5230:34">=</operator> <call pos:start="5230:36" pos:end="5230:99"><name pos:start="5230:36" pos:end="5230:44">lock_user</name><argument_list pos:start="5230:45" pos:end="5230:99">(<argument pos:start="5230:46" pos:end="5230:57"><expr pos:start="5230:46" pos:end="5230:57"><name pos:start="5230:46" pos:end="5230:57">VERIFY_WRITE</name></expr></argument>, <argument pos:start="5230:60" pos:end="5230:63"><expr pos:start="5230:60" pos:end="5230:63"><name pos:start="5230:60" pos:end="5230:63">arg2</name></expr></argument>, <argument pos:start="5230:66" pos:end="5230:95"><expr pos:start="5230:66" pos:end="5230:95"><name pos:start="5230:66" pos:end="5230:75">gidsetsize</name> <operator pos:start="5230:77" pos:end="5230:77">*</operator> <sizeof pos:start="5230:79" pos:end="5230:95">sizeof<argument_list pos:start="5230:85" pos:end="5230:95">(<argument pos:start="5230:86" pos:end="5230:94"><expr pos:start="5230:86" pos:end="5230:94"><name pos:start="5230:86" pos:end="5230:94">target_id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="5230:98" pos:end="5230:98"><expr pos:start="5230:98" pos:end="5230:98"><literal type="number" pos:start="5230:98" pos:end="5230:98">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="5232:17" pos:end="5234:32"><if pos:start="5232:17" pos:end="5234:32">if <condition pos:start="5232:20" pos:end="5232:38">(<expr pos:start="5232:21" pos:end="5232:37"><operator pos:start="5232:21" pos:end="5232:21">!</operator><name pos:start="5232:22" pos:end="5232:37">target_grouplist</name></expr>)</condition><block type="pseudo" pos:start="5234:21" pos:end="5234:32"><block_content pos:start="5234:21" pos:end="5234:32">

                    <goto pos:start="5234:21" pos:end="5234:32">goto <name pos:start="5234:26" pos:end="5234:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <for pos:start="5236:17" pos:end="5238:77">for<control pos:start="5236:20" pos:end="5236:39">(<init pos:start="5236:21" pos:end="5236:26"><expr pos:start="5236:21" pos:end="5236:25"><name pos:start="5236:21" pos:end="5236:21">i</name> <operator pos:start="5236:23" pos:end="5236:23">=</operator> <literal type="number" pos:start="5236:25" pos:end="5236:25">0</literal></expr>;</init><condition pos:start="5236:27" pos:end="5236:34"><expr pos:start="5236:27" pos:end="5236:33"><name pos:start="5236:27" pos:end="5236:27">i</name> <operator pos:start="5236:29" pos:end="5236:29">&lt;</operator> <name pos:start="5236:31" pos:end="5236:33">ret</name></expr>;</condition> <incr pos:start="5236:36" pos:end="5236:38"><expr pos:start="5236:36" pos:end="5236:38"><name pos:start="5236:36" pos:end="5236:36">i</name><operator pos:start="5236:37" pos:end="5236:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="5238:21" pos:end="5238:77"><block_content pos:start="5238:21" pos:end="5238:77">

                    <expr_stmt pos:start="5238:21" pos:end="5238:77"><expr pos:start="5238:21" pos:end="5238:76"><name pos:start="5238:21" pos:end="5238:39"><name pos:start="5238:21" pos:end="5238:36">target_grouplist</name><index pos:start="5238:37" pos:end="5238:39">[<expr pos:start="5238:38" pos:end="5238:38"><name pos:start="5238:38" pos:end="5238:38">i</name></expr>]</index></name> <operator pos:start="5238:41" pos:end="5238:41">=</operator> <call pos:start="5238:43" pos:end="5238:76"><name pos:start="5238:43" pos:end="5238:49">tswapid</name><argument_list pos:start="5238:50" pos:end="5238:76">(<argument pos:start="5238:51" pos:end="5238:75"><expr pos:start="5238:51" pos:end="5238:75"><call pos:start="5238:51" pos:end="5238:75"><name pos:start="5238:51" pos:end="5238:61">high2lowgid</name><argument_list pos:start="5238:62" pos:end="5238:75">(<argument pos:start="5238:63" pos:end="5238:74"><expr pos:start="5238:63" pos:end="5238:74"><name pos:start="5238:63" pos:end="5238:74"><name pos:start="5238:63" pos:end="5238:71">grouplist</name><index pos:start="5238:72" pos:end="5238:74">[<expr pos:start="5238:73" pos:end="5238:73"><name pos:start="5238:73" pos:end="5238:73">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="5240:17" pos:end="5240:84"><expr pos:start="5240:17" pos:end="5240:83"><call pos:start="5240:17" pos:end="5240:83"><name pos:start="5240:17" pos:end="5240:27">unlock_user</name><argument_list pos:start="5240:28" pos:end="5240:83">(<argument pos:start="5240:29" pos:end="5240:44"><expr pos:start="5240:29" pos:end="5240:44"><name pos:start="5240:29" pos:end="5240:44">target_grouplist</name></expr></argument>, <argument pos:start="5240:47" pos:end="5240:50"><expr pos:start="5240:47" pos:end="5240:50"><name pos:start="5240:47" pos:end="5240:50">arg2</name></expr></argument>, <argument pos:start="5240:53" pos:end="5240:82"><expr pos:start="5240:53" pos:end="5240:82"><name pos:start="5240:53" pos:end="5240:62">gidsetsize</name> <operator pos:start="5240:64" pos:end="5240:64">*</operator> <sizeof pos:start="5240:66" pos:end="5240:82">sizeof<argument_list pos:start="5240:72" pos:end="5240:82">(<argument pos:start="5240:73" pos:end="5240:81"><expr pos:start="5240:73" pos:end="5240:81"><name pos:start="5240:73" pos:end="5240:81">target_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="5246:9" pos:end="5246:14">break;</break>

    <case pos:start="5248:5" pos:end="5248:29">case <expr pos:start="5248:10" pos:end="5248:28"><name pos:start="5248:10" pos:end="5248:28">TARGET_NR_setgroups</name></expr>:</case>

        <block pos:start="5250:9" pos:end="5286:9">{<block_content pos:start="5252:13" pos:end="5284:62">

            <decl_stmt pos:start="5252:13" pos:end="5252:34"><decl pos:start="5252:13" pos:end="5252:33"><type pos:start="5252:13" pos:end="5252:15"><name pos:start="5252:13" pos:end="5252:15">int</name></type> <name pos:start="5252:17" pos:end="5252:26">gidsetsize</name> <init pos:start="5252:28" pos:end="5252:33">= <expr pos:start="5252:30" pos:end="5252:33"><name pos:start="5252:30" pos:end="5252:33">arg1</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="5254:13" pos:end="5254:40"><decl pos:start="5254:13" pos:end="5254:39"><type pos:start="5254:13" pos:end="5254:23"><name pos:start="5254:13" pos:end="5254:21">target_id</name> <modifier pos:start="5254:23" pos:end="5254:23">*</modifier></type><name pos:start="5254:24" pos:end="5254:39">target_grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5256:13" pos:end="5256:36"><decl pos:start="5256:13" pos:end="5256:35"><type pos:start="5256:13" pos:end="5256:19"><name pos:start="5256:13" pos:end="5256:17">gid_t</name> <modifier pos:start="5256:19" pos:end="5256:19">*</modifier></type><name pos:start="5256:20" pos:end="5256:28">grouplist</name> <init pos:start="5256:30" pos:end="5256:35">= <expr pos:start="5256:32" pos:end="5256:35"><name pos:start="5256:32" pos:end="5256:35">NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="5258:13" pos:end="5258:18"><decl pos:start="5258:13" pos:end="5258:17"><type pos:start="5258:13" pos:end="5258:15"><name pos:start="5258:13" pos:end="5258:15">int</name></type> <name pos:start="5258:17" pos:end="5258:17">i</name></decl>;</decl_stmt>

            <if_stmt pos:start="5260:13" pos:end="5282:13"><if pos:start="5260:13" pos:end="5282:13">if <condition pos:start="5260:16" pos:end="5260:27">(<expr pos:start="5260:17" pos:end="5260:26"><name pos:start="5260:17" pos:end="5260:26">gidsetsize</name></expr>)</condition> <block pos:start="5260:29" pos:end="5282:13">{<block_content pos:start="5262:17" pos:end="5280:55">

                <expr_stmt pos:start="5262:17" pos:end="5262:63"><expr pos:start="5262:17" pos:end="5262:62"><name pos:start="5262:17" pos:end="5262:25">grouplist</name> <operator pos:start="5262:27" pos:end="5262:27">=</operator> <call pos:start="5262:29" pos:end="5262:62"><name pos:start="5262:29" pos:end="5262:34">alloca</name><argument_list pos:start="5262:35" pos:end="5262:62">(<argument pos:start="5262:36" pos:end="5262:61"><expr pos:start="5262:36" pos:end="5262:61"><name pos:start="5262:36" pos:end="5262:45">gidsetsize</name> <operator pos:start="5262:47" pos:end="5262:47">*</operator> <sizeof pos:start="5262:49" pos:end="5262:61">sizeof<argument_list pos:start="5262:55" pos:end="5262:61">(<argument pos:start="5262:56" pos:end="5262:60"><expr pos:start="5262:56" pos:end="5262:60"><name pos:start="5262:56" pos:end="5262:60">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5264:17" pos:end="5264:99"><expr pos:start="5264:17" pos:end="5264:98"><name pos:start="5264:17" pos:end="5264:32">target_grouplist</name> <operator pos:start="5264:34" pos:end="5264:34">=</operator> <call pos:start="5264:36" pos:end="5264:98"><name pos:start="5264:36" pos:end="5264:44">lock_user</name><argument_list pos:start="5264:45" pos:end="5264:98">(<argument pos:start="5264:46" pos:end="5264:56"><expr pos:start="5264:46" pos:end="5264:56"><name pos:start="5264:46" pos:end="5264:56">VERIFY_READ</name></expr></argument>, <argument pos:start="5264:59" pos:end="5264:62"><expr pos:start="5264:59" pos:end="5264:62"><name pos:start="5264:59" pos:end="5264:62">arg2</name></expr></argument>, <argument pos:start="5264:65" pos:end="5264:94"><expr pos:start="5264:65" pos:end="5264:94"><name pos:start="5264:65" pos:end="5264:74">gidsetsize</name> <operator pos:start="5264:76" pos:end="5264:76">*</operator> <sizeof pos:start="5264:78" pos:end="5264:94">sizeof<argument_list pos:start="5264:84" pos:end="5264:94">(<argument pos:start="5264:85" pos:end="5264:93"><expr pos:start="5264:85" pos:end="5264:93"><name pos:start="5264:85" pos:end="5264:93">target_id</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="5264:97" pos:end="5264:97"><expr pos:start="5264:97" pos:end="5264:97"><literal type="number" pos:start="5264:97" pos:end="5264:97">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="5266:17" pos:end="5272:17"><if pos:start="5266:17" pos:end="5272:17">if <condition pos:start="5266:20" pos:end="5266:38">(<expr pos:start="5266:21" pos:end="5266:37"><operator pos:start="5266:21" pos:end="5266:21">!</operator><name pos:start="5266:22" pos:end="5266:37">target_grouplist</name></expr>)</condition> <block pos:start="5266:40" pos:end="5272:17">{<block_content pos:start="5268:21" pos:end="5270:30">

                    <expr_stmt pos:start="5268:21" pos:end="5268:41"><expr pos:start="5268:21" pos:end="5268:40"><name pos:start="5268:21" pos:end="5268:23">ret</name> <operator pos:start="5268:25" pos:end="5268:25">=</operator> <operator pos:start="5268:27" pos:end="5268:27">-</operator><name pos:start="5268:28" pos:end="5268:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <goto pos:start="5270:21" pos:end="5270:30">goto <name pos:start="5270:26" pos:end="5270:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <for pos:start="5274:17" pos:end="5278:17">for <control pos:start="5274:21" pos:end="5274:48">(<init pos:start="5274:22" pos:end="5274:27"><expr pos:start="5274:22" pos:end="5274:26"><name pos:start="5274:22" pos:end="5274:22">i</name> <operator pos:start="5274:24" pos:end="5274:24">=</operator> <literal type="number" pos:start="5274:26" pos:end="5274:26">0</literal></expr>;</init> <condition pos:start="5274:29" pos:end="5274:43"><expr pos:start="5274:29" pos:end="5274:42"><name pos:start="5274:29" pos:end="5274:29">i</name> <operator pos:start="5274:31" pos:end="5274:31">&lt;</operator> <name pos:start="5274:33" pos:end="5274:42">gidsetsize</name></expr>;</condition> <incr pos:start="5274:45" pos:end="5274:47"><expr pos:start="5274:45" pos:end="5274:47"><name pos:start="5274:45" pos:end="5274:45">i</name><operator pos:start="5274:46" pos:end="5274:47">++</operator></expr></incr>)</control> <block pos:start="5274:50" pos:end="5278:17">{<block_content pos:start="5276:21" pos:end="5276:77">

                    <expr_stmt pos:start="5276:21" pos:end="5276:77"><expr pos:start="5276:21" pos:end="5276:76"><name pos:start="5276:21" pos:end="5276:32"><name pos:start="5276:21" pos:end="5276:29">grouplist</name><index pos:start="5276:30" pos:end="5276:32">[<expr pos:start="5276:31" pos:end="5276:31"><name pos:start="5276:31" pos:end="5276:31">i</name></expr>]</index></name> <operator pos:start="5276:34" pos:end="5276:34">=</operator> <call pos:start="5276:36" pos:end="5276:76"><name pos:start="5276:36" pos:end="5276:46">low2highgid</name><argument_list pos:start="5276:47" pos:end="5276:76">(<argument pos:start="5276:48" pos:end="5276:75"><expr pos:start="5276:48" pos:end="5276:75"><call pos:start="5276:48" pos:end="5276:75"><name pos:start="5276:48" pos:end="5276:54">tswapid</name><argument_list pos:start="5276:55" pos:end="5276:75">(<argument pos:start="5276:56" pos:end="5276:74"><expr pos:start="5276:56" pos:end="5276:74"><name pos:start="5276:56" pos:end="5276:74"><name pos:start="5276:56" pos:end="5276:71">target_grouplist</name><index pos:start="5276:72" pos:end="5276:74">[<expr pos:start="5276:73" pos:end="5276:73"><name pos:start="5276:73" pos:end="5276:73">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="5280:17" pos:end="5280:55"><expr pos:start="5280:17" pos:end="5280:54"><call pos:start="5280:17" pos:end="5280:54"><name pos:start="5280:17" pos:end="5280:27">unlock_user</name><argument_list pos:start="5280:28" pos:end="5280:54">(<argument pos:start="5280:29" pos:end="5280:44"><expr pos:start="5280:29" pos:end="5280:44"><name pos:start="5280:29" pos:end="5280:44">target_grouplist</name></expr></argument>, <argument pos:start="5280:47" pos:end="5280:50"><expr pos:start="5280:47" pos:end="5280:50"><name pos:start="5280:47" pos:end="5280:50">arg2</name></expr></argument>, <argument pos:start="5280:53" pos:end="5280:53"><expr pos:start="5280:53" pos:end="5280:53"><literal type="number" pos:start="5280:53" pos:end="5280:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="5284:13" pos:end="5284:62"><expr pos:start="5284:13" pos:end="5284:61"><name pos:start="5284:13" pos:end="5284:15">ret</name> <operator pos:start="5284:17" pos:end="5284:17">=</operator> <call pos:start="5284:19" pos:end="5284:61"><name pos:start="5284:19" pos:end="5284:27">get_errno</name><argument_list pos:start="5284:28" pos:end="5284:61">(<argument pos:start="5284:29" pos:end="5284:60"><expr pos:start="5284:29" pos:end="5284:60"><call pos:start="5284:29" pos:end="5284:60"><name pos:start="5284:29" pos:end="5284:37">setgroups</name><argument_list pos:start="5284:38" pos:end="5284:60">(<argument pos:start="5284:39" pos:end="5284:48"><expr pos:start="5284:39" pos:end="5284:48"><name pos:start="5284:39" pos:end="5284:48">gidsetsize</name></expr></argument>, <argument pos:start="5284:51" pos:end="5284:59"><expr pos:start="5284:51" pos:end="5284:59"><name pos:start="5284:51" pos:end="5284:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5288:9" pos:end="5288:14">break;</break>

    <case pos:start="5290:5" pos:end="5290:26">case <expr pos:start="5290:10" pos:end="5290:25"><name pos:start="5290:10" pos:end="5290:25">TARGET_NR_fchown</name></expr>:</case>

        <expr_stmt pos:start="5292:9" pos:end="5292:76"><expr pos:start="5292:9" pos:end="5292:75"><name pos:start="5292:9" pos:end="5292:11">ret</name> <operator pos:start="5292:13" pos:end="5292:13">=</operator> <call pos:start="5292:15" pos:end="5292:75"><name pos:start="5292:15" pos:end="5292:23">get_errno</name><argument_list pos:start="5292:24" pos:end="5292:75">(<argument pos:start="5292:25" pos:end="5292:74"><expr pos:start="5292:25" pos:end="5292:74"><call pos:start="5292:25" pos:end="5292:74"><name pos:start="5292:25" pos:end="5292:30">fchown</name><argument_list pos:start="5292:31" pos:end="5292:74">(<argument pos:start="5292:32" pos:end="5292:35"><expr pos:start="5292:32" pos:end="5292:35"><name pos:start="5292:32" pos:end="5292:35">arg1</name></expr></argument>, <argument pos:start="5292:38" pos:end="5292:54"><expr pos:start="5292:38" pos:end="5292:54"><call pos:start="5292:38" pos:end="5292:54"><name pos:start="5292:38" pos:end="5292:48">low2highuid</name><argument_list pos:start="5292:49" pos:end="5292:54">(<argument pos:start="5292:50" pos:end="5292:53"><expr pos:start="5292:50" pos:end="5292:53"><name pos:start="5292:50" pos:end="5292:53">arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5292:57" pos:end="5292:73"><expr pos:start="5292:57" pos:end="5292:73"><call pos:start="5292:57" pos:end="5292:73"><name pos:start="5292:57" pos:end="5292:67">low2highgid</name><argument_list pos:start="5292:68" pos:end="5292:73">(<argument pos:start="5292:69" pos:end="5292:72"><expr pos:start="5292:69" pos:end="5292:72"><name pos:start="5292:69" pos:end="5292:72">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5294:9" pos:end="5297:0">break;</break>

<cpp:if pos:start="5296:1" pos:end="5296:31">#<cpp:directive pos:start="5296:2" pos:end="5296:3">if</cpp:directive> <expr pos:start="5296:5" pos:end="5296:31"><call pos:start="5296:5" pos:end="5296:31"><name pos:start="5296:5" pos:end="5296:11">defined</name><argument_list pos:start="5296:12" pos:end="5296:31">(<argument pos:start="5296:13" pos:end="5296:30"><expr pos:start="5296:13" pos:end="5296:30"><name pos:start="5296:13" pos:end="5296:30">TARGET_NR_fchownat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="5298:5" pos:end="5298:28">case <expr pos:start="5298:10" pos:end="5298:27"><name pos:start="5298:10" pos:end="5298:27">TARGET_NR_fchownat</name></expr>:</case>

        <if_stmt pos:start="5300:9" pos:end="5302:24"><if pos:start="5300:9" pos:end="5302:24">if <condition pos:start="5300:12" pos:end="5300:42">(<expr pos:start="5300:13" pos:end="5300:41"><operator pos:start="5300:13" pos:end="5300:13">!</operator><operator pos:start="5300:14" pos:end="5300:14">(</operator><name pos:start="5300:15" pos:end="5300:15">p</name> <operator pos:start="5300:17" pos:end="5300:17">=</operator> <call pos:start="5300:19" pos:end="5300:40"><name pos:start="5300:19" pos:end="5300:34">lock_user_string</name><argument_list pos:start="5300:35" pos:end="5300:40">(<argument pos:start="5300:36" pos:end="5300:39"><expr pos:start="5300:36" pos:end="5300:39"><name pos:start="5300:36" pos:end="5300:39">arg2</name></expr></argument>)</argument_list></call><operator pos:start="5300:41" pos:end="5300:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5302:13" pos:end="5302:24"><block_content pos:start="5302:13" pos:end="5302:24"> 

            <goto pos:start="5302:13" pos:end="5302:24">goto <name pos:start="5302:18" pos:end="5302:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5304:9" pos:end="5306:59"><expr pos:start="5304:9" pos:end="5306:58"><name pos:start="5304:9" pos:end="5304:11">ret</name> <operator pos:start="5304:13" pos:end="5304:13">=</operator> <call pos:start="5304:15" pos:end="5306:58"><name pos:start="5304:15" pos:end="5304:23">get_errno</name><argument_list pos:start="5304:24" pos:end="5306:58">(<argument pos:start="5304:25" pos:end="5306:57"><expr pos:start="5304:25" pos:end="5306:57"><call pos:start="5304:25" pos:end="5306:57"><name pos:start="5304:25" pos:end="5304:32">fchownat</name><argument_list pos:start="5304:33" pos:end="5306:57">(<argument pos:start="5304:34" pos:end="5304:37"><expr pos:start="5304:34" pos:end="5304:37"><name pos:start="5304:34" pos:end="5304:37">arg1</name></expr></argument>, <argument pos:start="5304:40" pos:end="5304:40"><expr pos:start="5304:40" pos:end="5304:40"><name pos:start="5304:40" pos:end="5304:40">p</name></expr></argument>, <argument pos:start="5304:43" pos:end="5304:59"><expr pos:start="5304:43" pos:end="5304:59"><call pos:start="5304:43" pos:end="5304:59"><name pos:start="5304:43" pos:end="5304:53">low2highuid</name><argument_list pos:start="5304:54" pos:end="5304:59">(<argument pos:start="5304:55" pos:end="5304:58"><expr pos:start="5304:55" pos:end="5304:58"><name pos:start="5304:55" pos:end="5304:58">arg3</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="5306:34" pos:end="5306:50"><expr pos:start="5306:34" pos:end="5306:50"><call pos:start="5306:34" pos:end="5306:50"><name pos:start="5306:34" pos:end="5306:44">low2highgid</name><argument_list pos:start="5306:45" pos:end="5306:50">(<argument pos:start="5306:46" pos:end="5306:49"><expr pos:start="5306:46" pos:end="5306:49"><name pos:start="5306:46" pos:end="5306:49">arg4</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5306:53" pos:end="5306:56"><expr pos:start="5306:53" pos:end="5306:56"><name pos:start="5306:53" pos:end="5306:56">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5308:9" pos:end="5308:32"><expr pos:start="5308:9" pos:end="5308:31"><call pos:start="5308:9" pos:end="5308:31"><name pos:start="5308:9" pos:end="5308:19">unlock_user</name><argument_list pos:start="5308:20" pos:end="5308:31">(<argument pos:start="5308:21" pos:end="5308:21"><expr pos:start="5308:21" pos:end="5308:21"><name pos:start="5308:21" pos:end="5308:21">p</name></expr></argument>, <argument pos:start="5308:24" pos:end="5308:27"><expr pos:start="5308:24" pos:end="5308:27"><name pos:start="5308:24" pos:end="5308:27">arg2</name></expr></argument>, <argument pos:start="5308:30" pos:end="5308:30"><expr pos:start="5308:30" pos:end="5308:30"><literal type="number" pos:start="5308:30" pos:end="5308:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5310:9" pos:end="5315:0">break;</break>

<cpp:endif pos:start="5312:1" pos:end="5312:6">#<cpp:directive pos:start="5312:2" pos:end="5312:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5314:1" pos:end="5314:26">#<cpp:directive pos:start="5314:2" pos:end="5314:6">ifdef</cpp:directive> <name pos:start="5314:8" pos:end="5314:26">TARGET_NR_setresuid</name></cpp:ifdef>

    <case pos:start="5316:5" pos:end="5316:29">case <expr pos:start="5316:10" pos:end="5316:28"><name pos:start="5316:10" pos:end="5316:28">TARGET_NR_setresuid</name></expr>:</case>

        <expr_stmt pos:start="5318:9" pos:end="5322:54"><expr pos:start="5318:9" pos:end="5322:53"><name pos:start="5318:9" pos:end="5318:11">ret</name> <operator pos:start="5318:13" pos:end="5318:13">=</operator> <call pos:start="5318:15" pos:end="5322:53"><name pos:start="5318:15" pos:end="5318:23">get_errno</name><argument_list pos:start="5318:24" pos:end="5322:53">(<argument pos:start="5318:25" pos:end="5322:52"><expr pos:start="5318:25" pos:end="5322:52"><call pos:start="5318:25" pos:end="5322:52"><name pos:start="5318:25" pos:end="5318:33">setresuid</name><argument_list pos:start="5318:34" pos:end="5322:52">(<argument pos:start="5318:35" pos:end="5318:51"><expr pos:start="5318:35" pos:end="5318:51"><call pos:start="5318:35" pos:end="5318:51"><name pos:start="5318:35" pos:end="5318:45">low2highuid</name><argument_list pos:start="5318:46" pos:end="5318:51">(<argument pos:start="5318:47" pos:end="5318:50"><expr pos:start="5318:47" pos:end="5318:50"><name pos:start="5318:47" pos:end="5318:50">arg1</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="5320:35" pos:end="5320:51"><expr pos:start="5320:35" pos:end="5320:51"><call pos:start="5320:35" pos:end="5320:51"><name pos:start="5320:35" pos:end="5320:45">low2highuid</name><argument_list pos:start="5320:46" pos:end="5320:51">(<argument pos:start="5320:47" pos:end="5320:50"><expr pos:start="5320:47" pos:end="5320:50"><name pos:start="5320:47" pos:end="5320:50">arg2</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="5322:35" pos:end="5322:51"><expr pos:start="5322:35" pos:end="5322:51"><call pos:start="5322:35" pos:end="5322:51"><name pos:start="5322:35" pos:end="5322:45">low2highuid</name><argument_list pos:start="5322:46" pos:end="5322:51">(<argument pos:start="5322:47" pos:end="5322:50"><expr pos:start="5322:47" pos:end="5322:50"><name pos:start="5322:47" pos:end="5322:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5324:9" pos:end="5329:0">break;</break>

<cpp:endif pos:start="5326:1" pos:end="5326:6">#<cpp:directive pos:start="5326:2" pos:end="5326:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5328:1" pos:end="5328:26">#<cpp:directive pos:start="5328:2" pos:end="5328:6">ifdef</cpp:directive> <name pos:start="5328:8" pos:end="5328:26">TARGET_NR_getresuid</name></cpp:ifdef>

    <case pos:start="5330:5" pos:end="5330:29">case <expr pos:start="5330:10" pos:end="5330:28"><name pos:start="5330:10" pos:end="5330:28">TARGET_NR_getresuid</name></expr>:</case>

        <block pos:start="5332:9" pos:end="5350:9">{<block_content pos:start="5334:13" pos:end="5348:13">

            <decl_stmt pos:start="5334:13" pos:end="5334:35"><decl pos:start="5334:13" pos:end="5334:22"><type pos:start="5334:13" pos:end="5334:17"><name pos:start="5334:13" pos:end="5334:17">uid_t</name></type> <name pos:start="5334:19" pos:end="5334:22">ruid</name></decl>, <decl pos:start="5334:25" pos:end="5334:28"><type ref="prev" pos:start="5334:13" pos:end="5334:17"/><name pos:start="5334:25" pos:end="5334:28">euid</name></decl>, <decl pos:start="5334:31" pos:end="5334:34"><type ref="prev" pos:start="5334:13" pos:end="5334:17"/><name pos:start="5334:31" pos:end="5334:34">suid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5336:13" pos:end="5336:60"><expr pos:start="5336:13" pos:end="5336:59"><name pos:start="5336:13" pos:end="5336:15">ret</name> <operator pos:start="5336:17" pos:end="5336:17">=</operator> <call pos:start="5336:19" pos:end="5336:59"><name pos:start="5336:19" pos:end="5336:27">get_errno</name><argument_list pos:start="5336:28" pos:end="5336:59">(<argument pos:start="5336:29" pos:end="5336:58"><expr pos:start="5336:29" pos:end="5336:58"><call pos:start="5336:29" pos:end="5336:58"><name pos:start="5336:29" pos:end="5336:37">getresuid</name><argument_list pos:start="5336:38" pos:end="5336:58">(<argument pos:start="5336:39" pos:end="5336:43"><expr pos:start="5336:39" pos:end="5336:43"><operator pos:start="5336:39" pos:end="5336:39">&amp;</operator><name pos:start="5336:40" pos:end="5336:43">ruid</name></expr></argument>, <argument pos:start="5336:46" pos:end="5336:50"><expr pos:start="5336:46" pos:end="5336:50"><operator pos:start="5336:46" pos:end="5336:46">&amp;</operator><name pos:start="5336:47" pos:end="5336:50">euid</name></expr></argument>, <argument pos:start="5336:53" pos:end="5336:57"><expr pos:start="5336:53" pos:end="5336:57"><operator pos:start="5336:53" pos:end="5336:53">&amp;</operator><name pos:start="5336:54" pos:end="5336:57">suid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5338:13" pos:end="5348:13"><if pos:start="5338:13" pos:end="5348:13">if <condition pos:start="5338:16" pos:end="5338:31">(<expr pos:start="5338:17" pos:end="5338:30"><operator pos:start="5338:17" pos:end="5338:17">!</operator><call pos:start="5338:18" pos:end="5338:30"><name pos:start="5338:18" pos:end="5338:25">is_error</name><argument_list pos:start="5338:26" pos:end="5338:30">(<argument pos:start="5338:27" pos:end="5338:29"><expr pos:start="5338:27" pos:end="5338:29"><name pos:start="5338:27" pos:end="5338:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5338:33" pos:end="5348:13">{<block_content pos:start="5340:17" pos:end="5346:32">

                <if_stmt pos:start="5340:17" pos:end="5346:32"><if pos:start="5340:17" pos:end="5346:32">if <condition pos:start="5340:20" pos:end="5344:60">(<expr pos:start="5340:21" pos:end="5344:59"><call pos:start="5340:21" pos:end="5340:56"><name pos:start="5340:21" pos:end="5340:31">put_user_id</name><argument_list pos:start="5340:32" pos:end="5340:56">(<argument pos:start="5340:33" pos:end="5340:49"><expr pos:start="5340:33" pos:end="5340:49"><call pos:start="5340:33" pos:end="5340:49"><name pos:start="5340:33" pos:end="5340:43">high2lowuid</name><argument_list pos:start="5340:44" pos:end="5340:49">(<argument pos:start="5340:45" pos:end="5340:48"><expr pos:start="5340:45" pos:end="5340:48"><name pos:start="5340:45" pos:end="5340:48">ruid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5340:52" pos:end="5340:55"><expr pos:start="5340:52" pos:end="5340:55"><name pos:start="5340:52" pos:end="5340:55">arg1</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5342:21" pos:end="5342:22">||</operator> <call pos:start="5342:24" pos:end="5342:59"><name pos:start="5342:24" pos:end="5342:34">put_user_id</name><argument_list pos:start="5342:35" pos:end="5342:59">(<argument pos:start="5342:36" pos:end="5342:52"><expr pos:start="5342:36" pos:end="5342:52"><call pos:start="5342:36" pos:end="5342:52"><name pos:start="5342:36" pos:end="5342:46">high2lowuid</name><argument_list pos:start="5342:47" pos:end="5342:52">(<argument pos:start="5342:48" pos:end="5342:51"><expr pos:start="5342:48" pos:end="5342:51"><name pos:start="5342:48" pos:end="5342:51">euid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5342:55" pos:end="5342:58"><expr pos:start="5342:55" pos:end="5342:58"><name pos:start="5342:55" pos:end="5342:58">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5344:21" pos:end="5344:22">||</operator> <call pos:start="5344:24" pos:end="5344:59"><name pos:start="5344:24" pos:end="5344:34">put_user_id</name><argument_list pos:start="5344:35" pos:end="5344:59">(<argument pos:start="5344:36" pos:end="5344:52"><expr pos:start="5344:36" pos:end="5344:52"><call pos:start="5344:36" pos:end="5344:52"><name pos:start="5344:36" pos:end="5344:46">high2lowuid</name><argument_list pos:start="5344:47" pos:end="5344:52">(<argument pos:start="5344:48" pos:end="5344:51"><expr pos:start="5344:48" pos:end="5344:51"><name pos:start="5344:48" pos:end="5344:51">suid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5344:55" pos:end="5344:58"><expr pos:start="5344:55" pos:end="5344:58"><name pos:start="5344:55" pos:end="5344:58">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5346:21" pos:end="5346:32"><block_content pos:start="5346:21" pos:end="5346:32">

                    <goto pos:start="5346:21" pos:end="5346:32">goto <name pos:start="5346:26" pos:end="5346:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="5352:9" pos:end="5357:0">break;</break>

<cpp:endif pos:start="5354:1" pos:end="5354:6">#<cpp:directive pos:start="5354:2" pos:end="5354:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5356:1" pos:end="5356:26">#<cpp:directive pos:start="5356:2" pos:end="5356:6">ifdef</cpp:directive> <name pos:start="5356:8" pos:end="5356:26">TARGET_NR_getresgid</name></cpp:ifdef>

    <case pos:start="5358:5" pos:end="5358:29">case <expr pos:start="5358:10" pos:end="5358:28"><name pos:start="5358:10" pos:end="5358:28">TARGET_NR_setresgid</name></expr>:</case>

        <expr_stmt pos:start="5360:9" pos:end="5364:54"><expr pos:start="5360:9" pos:end="5364:53"><name pos:start="5360:9" pos:end="5360:11">ret</name> <operator pos:start="5360:13" pos:end="5360:13">=</operator> <call pos:start="5360:15" pos:end="5364:53"><name pos:start="5360:15" pos:end="5360:23">get_errno</name><argument_list pos:start="5360:24" pos:end="5364:53">(<argument pos:start="5360:25" pos:end="5364:52"><expr pos:start="5360:25" pos:end="5364:52"><call pos:start="5360:25" pos:end="5364:52"><name pos:start="5360:25" pos:end="5360:33">setresgid</name><argument_list pos:start="5360:34" pos:end="5364:52">(<argument pos:start="5360:35" pos:end="5360:51"><expr pos:start="5360:35" pos:end="5360:51"><call pos:start="5360:35" pos:end="5360:51"><name pos:start="5360:35" pos:end="5360:45">low2highgid</name><argument_list pos:start="5360:46" pos:end="5360:51">(<argument pos:start="5360:47" pos:end="5360:50"><expr pos:start="5360:47" pos:end="5360:50"><name pos:start="5360:47" pos:end="5360:50">arg1</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="5362:35" pos:end="5362:51"><expr pos:start="5362:35" pos:end="5362:51"><call pos:start="5362:35" pos:end="5362:51"><name pos:start="5362:35" pos:end="5362:45">low2highgid</name><argument_list pos:start="5362:46" pos:end="5362:51">(<argument pos:start="5362:47" pos:end="5362:50"><expr pos:start="5362:47" pos:end="5362:50"><name pos:start="5362:47" pos:end="5362:50">arg2</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="5364:35" pos:end="5364:51"><expr pos:start="5364:35" pos:end="5364:51"><call pos:start="5364:35" pos:end="5364:51"><name pos:start="5364:35" pos:end="5364:45">low2highgid</name><argument_list pos:start="5364:46" pos:end="5364:51">(<argument pos:start="5364:47" pos:end="5364:50"><expr pos:start="5364:47" pos:end="5364:50"><name pos:start="5364:47" pos:end="5364:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5366:9" pos:end="5371:0">break;</break>

<cpp:endif pos:start="5368:1" pos:end="5368:6">#<cpp:directive pos:start="5368:2" pos:end="5368:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5370:1" pos:end="5370:26">#<cpp:directive pos:start="5370:2" pos:end="5370:6">ifdef</cpp:directive> <name pos:start="5370:8" pos:end="5370:26">TARGET_NR_getresgid</name></cpp:ifdef>

    <case pos:start="5372:5" pos:end="5372:29">case <expr pos:start="5372:10" pos:end="5372:28"><name pos:start="5372:10" pos:end="5372:28">TARGET_NR_getresgid</name></expr>:</case>

        <block pos:start="5374:9" pos:end="5392:9">{<block_content pos:start="5376:13" pos:end="5390:13">

            <decl_stmt pos:start="5376:13" pos:end="5376:35"><decl pos:start="5376:13" pos:end="5376:22"><type pos:start="5376:13" pos:end="5376:17"><name pos:start="5376:13" pos:end="5376:17">gid_t</name></type> <name pos:start="5376:19" pos:end="5376:22">rgid</name></decl>, <decl pos:start="5376:25" pos:end="5376:28"><type ref="prev" pos:start="5376:13" pos:end="5376:17"/><name pos:start="5376:25" pos:end="5376:28">egid</name></decl>, <decl pos:start="5376:31" pos:end="5376:34"><type ref="prev" pos:start="5376:13" pos:end="5376:17"/><name pos:start="5376:31" pos:end="5376:34">sgid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5378:13" pos:end="5378:60"><expr pos:start="5378:13" pos:end="5378:59"><name pos:start="5378:13" pos:end="5378:15">ret</name> <operator pos:start="5378:17" pos:end="5378:17">=</operator> <call pos:start="5378:19" pos:end="5378:59"><name pos:start="5378:19" pos:end="5378:27">get_errno</name><argument_list pos:start="5378:28" pos:end="5378:59">(<argument pos:start="5378:29" pos:end="5378:58"><expr pos:start="5378:29" pos:end="5378:58"><call pos:start="5378:29" pos:end="5378:58"><name pos:start="5378:29" pos:end="5378:37">getresgid</name><argument_list pos:start="5378:38" pos:end="5378:58">(<argument pos:start="5378:39" pos:end="5378:43"><expr pos:start="5378:39" pos:end="5378:43"><operator pos:start="5378:39" pos:end="5378:39">&amp;</operator><name pos:start="5378:40" pos:end="5378:43">rgid</name></expr></argument>, <argument pos:start="5378:46" pos:end="5378:50"><expr pos:start="5378:46" pos:end="5378:50"><operator pos:start="5378:46" pos:end="5378:46">&amp;</operator><name pos:start="5378:47" pos:end="5378:50">egid</name></expr></argument>, <argument pos:start="5378:53" pos:end="5378:57"><expr pos:start="5378:53" pos:end="5378:57"><operator pos:start="5378:53" pos:end="5378:53">&amp;</operator><name pos:start="5378:54" pos:end="5378:57">sgid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5380:13" pos:end="5390:13"><if pos:start="5380:13" pos:end="5390:13">if <condition pos:start="5380:16" pos:end="5380:31">(<expr pos:start="5380:17" pos:end="5380:30"><operator pos:start="5380:17" pos:end="5380:17">!</operator><call pos:start="5380:18" pos:end="5380:30"><name pos:start="5380:18" pos:end="5380:25">is_error</name><argument_list pos:start="5380:26" pos:end="5380:30">(<argument pos:start="5380:27" pos:end="5380:29"><expr pos:start="5380:27" pos:end="5380:29"><name pos:start="5380:27" pos:end="5380:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5380:33" pos:end="5390:13">{<block_content pos:start="5382:17" pos:end="5388:32">

                <if_stmt pos:start="5382:17" pos:end="5388:32"><if pos:start="5382:17" pos:end="5388:32">if <condition pos:start="5382:20" pos:end="5386:60">(<expr pos:start="5382:21" pos:end="5386:59"><call pos:start="5382:21" pos:end="5382:56"><name pos:start="5382:21" pos:end="5382:31">put_user_id</name><argument_list pos:start="5382:32" pos:end="5382:56">(<argument pos:start="5382:33" pos:end="5382:49"><expr pos:start="5382:33" pos:end="5382:49"><call pos:start="5382:33" pos:end="5382:49"><name pos:start="5382:33" pos:end="5382:43">high2lowgid</name><argument_list pos:start="5382:44" pos:end="5382:49">(<argument pos:start="5382:45" pos:end="5382:48"><expr pos:start="5382:45" pos:end="5382:48"><name pos:start="5382:45" pos:end="5382:48">rgid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5382:52" pos:end="5382:55"><expr pos:start="5382:52" pos:end="5382:55"><name pos:start="5382:52" pos:end="5382:55">arg1</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5384:21" pos:end="5384:22">||</operator> <call pos:start="5384:24" pos:end="5384:59"><name pos:start="5384:24" pos:end="5384:34">put_user_id</name><argument_list pos:start="5384:35" pos:end="5384:59">(<argument pos:start="5384:36" pos:end="5384:52"><expr pos:start="5384:36" pos:end="5384:52"><call pos:start="5384:36" pos:end="5384:52"><name pos:start="5384:36" pos:end="5384:46">high2lowgid</name><argument_list pos:start="5384:47" pos:end="5384:52">(<argument pos:start="5384:48" pos:end="5384:51"><expr pos:start="5384:48" pos:end="5384:51"><name pos:start="5384:48" pos:end="5384:51">egid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5384:55" pos:end="5384:58"><expr pos:start="5384:55" pos:end="5384:58"><name pos:start="5384:55" pos:end="5384:58">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5386:21" pos:end="5386:22">||</operator> <call pos:start="5386:24" pos:end="5386:59"><name pos:start="5386:24" pos:end="5386:34">put_user_id</name><argument_list pos:start="5386:35" pos:end="5386:59">(<argument pos:start="5386:36" pos:end="5386:52"><expr pos:start="5386:36" pos:end="5386:52"><call pos:start="5386:36" pos:end="5386:52"><name pos:start="5386:36" pos:end="5386:46">high2lowgid</name><argument_list pos:start="5386:47" pos:end="5386:52">(<argument pos:start="5386:48" pos:end="5386:51"><expr pos:start="5386:48" pos:end="5386:51"><name pos:start="5386:48" pos:end="5386:51">sgid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5386:55" pos:end="5386:58"><expr pos:start="5386:55" pos:end="5386:58"><name pos:start="5386:55" pos:end="5386:58">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5388:21" pos:end="5388:32"><block_content pos:start="5388:21" pos:end="5388:32">

                    <goto pos:start="5388:21" pos:end="5388:32">goto <name pos:start="5388:26" pos:end="5388:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="5394:9" pos:end="5397:0">break;</break>

<cpp:endif pos:start="5396:1" pos:end="5396:6">#<cpp:directive pos:start="5396:2" pos:end="5396:6">endif</cpp:directive></cpp:endif>

    <case pos:start="5398:5" pos:end="5398:25">case <expr pos:start="5398:10" pos:end="5398:24"><name pos:start="5398:10" pos:end="5398:24">TARGET_NR_chown</name></expr>:</case>

        <if_stmt pos:start="5400:9" pos:end="5402:24"><if pos:start="5400:9" pos:end="5402:24">if <condition pos:start="5400:12" pos:end="5400:42">(<expr pos:start="5400:13" pos:end="5400:41"><operator pos:start="5400:13" pos:end="5400:13">!</operator><operator pos:start="5400:14" pos:end="5400:14">(</operator><name pos:start="5400:15" pos:end="5400:15">p</name> <operator pos:start="5400:17" pos:end="5400:17">=</operator> <call pos:start="5400:19" pos:end="5400:40"><name pos:start="5400:19" pos:end="5400:34">lock_user_string</name><argument_list pos:start="5400:35" pos:end="5400:40">(<argument pos:start="5400:36" pos:end="5400:39"><expr pos:start="5400:36" pos:end="5400:39"><name pos:start="5400:36" pos:end="5400:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="5400:41" pos:end="5400:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5402:13" pos:end="5402:24"><block_content pos:start="5402:13" pos:end="5402:24">

            <goto pos:start="5402:13" pos:end="5402:24">goto <name pos:start="5402:18" pos:end="5402:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5404:9" pos:end="5404:72"><expr pos:start="5404:9" pos:end="5404:71"><name pos:start="5404:9" pos:end="5404:11">ret</name> <operator pos:start="5404:13" pos:end="5404:13">=</operator> <call pos:start="5404:15" pos:end="5404:71"><name pos:start="5404:15" pos:end="5404:23">get_errno</name><argument_list pos:start="5404:24" pos:end="5404:71">(<argument pos:start="5404:25" pos:end="5404:70"><expr pos:start="5404:25" pos:end="5404:70"><call pos:start="5404:25" pos:end="5404:70"><name pos:start="5404:25" pos:end="5404:29">chown</name><argument_list pos:start="5404:30" pos:end="5404:70">(<argument pos:start="5404:31" pos:end="5404:31"><expr pos:start="5404:31" pos:end="5404:31"><name pos:start="5404:31" pos:end="5404:31">p</name></expr></argument>, <argument pos:start="5404:34" pos:end="5404:50"><expr pos:start="5404:34" pos:end="5404:50"><call pos:start="5404:34" pos:end="5404:50"><name pos:start="5404:34" pos:end="5404:44">low2highuid</name><argument_list pos:start="5404:45" pos:end="5404:50">(<argument pos:start="5404:46" pos:end="5404:49"><expr pos:start="5404:46" pos:end="5404:49"><name pos:start="5404:46" pos:end="5404:49">arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="5404:53" pos:end="5404:69"><expr pos:start="5404:53" pos:end="5404:69"><call pos:start="5404:53" pos:end="5404:69"><name pos:start="5404:53" pos:end="5404:63">low2highgid</name><argument_list pos:start="5404:64" pos:end="5404:69">(<argument pos:start="5404:65" pos:end="5404:68"><expr pos:start="5404:65" pos:end="5404:68"><name pos:start="5404:65" pos:end="5404:68">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5406:9" pos:end="5406:32"><expr pos:start="5406:9" pos:end="5406:31"><call pos:start="5406:9" pos:end="5406:31"><name pos:start="5406:9" pos:end="5406:19">unlock_user</name><argument_list pos:start="5406:20" pos:end="5406:31">(<argument pos:start="5406:21" pos:end="5406:21"><expr pos:start="5406:21" pos:end="5406:21"><name pos:start="5406:21" pos:end="5406:21">p</name></expr></argument>, <argument pos:start="5406:24" pos:end="5406:27"><expr pos:start="5406:24" pos:end="5406:27"><name pos:start="5406:24" pos:end="5406:27">arg1</name></expr></argument>, <argument pos:start="5406:30" pos:end="5406:30"><expr pos:start="5406:30" pos:end="5406:30"><literal type="number" pos:start="5406:30" pos:end="5406:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5408:9" pos:end="5408:14">break;</break>

    <case pos:start="5410:5" pos:end="5410:26">case <expr pos:start="5410:10" pos:end="5410:25"><name pos:start="5410:10" pos:end="5410:25">TARGET_NR_setuid</name></expr>:</case>

        <expr_stmt pos:start="5412:9" pos:end="5412:51"><expr pos:start="5412:9" pos:end="5412:50"><name pos:start="5412:9" pos:end="5412:11">ret</name> <operator pos:start="5412:13" pos:end="5412:13">=</operator> <call pos:start="5412:15" pos:end="5412:50"><name pos:start="5412:15" pos:end="5412:23">get_errno</name><argument_list pos:start="5412:24" pos:end="5412:50">(<argument pos:start="5412:25" pos:end="5412:49"><expr pos:start="5412:25" pos:end="5412:49"><call pos:start="5412:25" pos:end="5412:49"><name pos:start="5412:25" pos:end="5412:30">setuid</name><argument_list pos:start="5412:31" pos:end="5412:49">(<argument pos:start="5412:32" pos:end="5412:48"><expr pos:start="5412:32" pos:end="5412:48"><call pos:start="5412:32" pos:end="5412:48"><name pos:start="5412:32" pos:end="5412:42">low2highuid</name><argument_list pos:start="5412:43" pos:end="5412:48">(<argument pos:start="5412:44" pos:end="5412:47"><expr pos:start="5412:44" pos:end="5412:47"><name pos:start="5412:44" pos:end="5412:47">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5414:9" pos:end="5414:14">break;</break>

    <case pos:start="5416:5" pos:end="5416:26">case <expr pos:start="5416:10" pos:end="5416:25"><name pos:start="5416:10" pos:end="5416:25">TARGET_NR_setgid</name></expr>:</case>

        <expr_stmt pos:start="5418:9" pos:end="5418:51"><expr pos:start="5418:9" pos:end="5418:50"><name pos:start="5418:9" pos:end="5418:11">ret</name> <operator pos:start="5418:13" pos:end="5418:13">=</operator> <call pos:start="5418:15" pos:end="5418:50"><name pos:start="5418:15" pos:end="5418:23">get_errno</name><argument_list pos:start="5418:24" pos:end="5418:50">(<argument pos:start="5418:25" pos:end="5418:49"><expr pos:start="5418:25" pos:end="5418:49"><call pos:start="5418:25" pos:end="5418:49"><name pos:start="5418:25" pos:end="5418:30">setgid</name><argument_list pos:start="5418:31" pos:end="5418:49">(<argument pos:start="5418:32" pos:end="5418:48"><expr pos:start="5418:32" pos:end="5418:48"><call pos:start="5418:32" pos:end="5418:48"><name pos:start="5418:32" pos:end="5418:42">low2highgid</name><argument_list pos:start="5418:43" pos:end="5418:48">(<argument pos:start="5418:44" pos:end="5418:47"><expr pos:start="5418:44" pos:end="5418:47"><name pos:start="5418:44" pos:end="5418:47">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5420:9" pos:end="5420:14">break;</break>

    <case pos:start="5422:5" pos:end="5422:28">case <expr pos:start="5422:10" pos:end="5422:27"><name pos:start="5422:10" pos:end="5422:27">TARGET_NR_setfsuid</name></expr>:</case>

        <expr_stmt pos:start="5424:9" pos:end="5424:40"><expr pos:start="5424:9" pos:end="5424:39"><name pos:start="5424:9" pos:end="5424:11">ret</name> <operator pos:start="5424:13" pos:end="5424:13">=</operator> <call pos:start="5424:15" pos:end="5424:39"><name pos:start="5424:15" pos:end="5424:23">get_errno</name><argument_list pos:start="5424:24" pos:end="5424:39">(<argument pos:start="5424:25" pos:end="5424:38"><expr pos:start="5424:25" pos:end="5424:38"><call pos:start="5424:25" pos:end="5424:38"><name pos:start="5424:25" pos:end="5424:32">setfsuid</name><argument_list pos:start="5424:33" pos:end="5424:38">(<argument pos:start="5424:34" pos:end="5424:37"><expr pos:start="5424:34" pos:end="5424:37"><name pos:start="5424:34" pos:end="5424:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5426:9" pos:end="5426:14">break;</break>

    <case pos:start="5428:5" pos:end="5428:28">case <expr pos:start="5428:10" pos:end="5428:27"><name pos:start="5428:10" pos:end="5428:27">TARGET_NR_setfsgid</name></expr>:</case>

        <expr_stmt pos:start="5430:9" pos:end="5430:40"><expr pos:start="5430:9" pos:end="5430:39"><name pos:start="5430:9" pos:end="5430:11">ret</name> <operator pos:start="5430:13" pos:end="5430:13">=</operator> <call pos:start="5430:15" pos:end="5430:39"><name pos:start="5430:15" pos:end="5430:23">get_errno</name><argument_list pos:start="5430:24" pos:end="5430:39">(<argument pos:start="5430:25" pos:end="5430:38"><expr pos:start="5430:25" pos:end="5430:38"><call pos:start="5430:25" pos:end="5430:38"><name pos:start="5430:25" pos:end="5430:32">setfsgid</name><argument_list pos:start="5430:33" pos:end="5430:38">(<argument pos:start="5430:34" pos:end="5430:37"><expr pos:start="5430:34" pos:end="5430:37"><name pos:start="5430:34" pos:end="5430:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5432:9" pos:end="5437:0">break;</break>



<cpp:ifdef pos:start="5436:1" pos:end="5436:25">#<cpp:directive pos:start="5436:2" pos:end="5436:6">ifdef</cpp:directive> <name pos:start="5436:8" pos:end="5436:25">TARGET_NR_lchown32</name></cpp:ifdef>

    <case pos:start="5438:5" pos:end="5438:28">case <expr pos:start="5438:10" pos:end="5438:27"><name pos:start="5438:10" pos:end="5438:27">TARGET_NR_lchown32</name></expr>:</case>

        <if_stmt pos:start="5440:9" pos:end="5442:24"><if pos:start="5440:9" pos:end="5442:24">if <condition pos:start="5440:12" pos:end="5440:42">(<expr pos:start="5440:13" pos:end="5440:41"><operator pos:start="5440:13" pos:end="5440:13">!</operator><operator pos:start="5440:14" pos:end="5440:14">(</operator><name pos:start="5440:15" pos:end="5440:15">p</name> <operator pos:start="5440:17" pos:end="5440:17">=</operator> <call pos:start="5440:19" pos:end="5440:40"><name pos:start="5440:19" pos:end="5440:34">lock_user_string</name><argument_list pos:start="5440:35" pos:end="5440:40">(<argument pos:start="5440:36" pos:end="5440:39"><expr pos:start="5440:36" pos:end="5440:39"><name pos:start="5440:36" pos:end="5440:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="5440:41" pos:end="5440:41">)</operator></expr>)</condition><block type="pseudo" pos:start="5442:13" pos:end="5442:24"><block_content pos:start="5442:13" pos:end="5442:24">

            <goto pos:start="5442:13" pos:end="5442:24">goto <name pos:start="5442:18" pos:end="5442:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="5444:9" pos:end="5444:47"><expr pos:start="5444:9" pos:end="5444:46"><name pos:start="5444:9" pos:end="5444:11">ret</name> <operator pos:start="5444:13" pos:end="5444:13">=</operator> <call pos:start="5444:15" pos:end="5444:46"><name pos:start="5444:15" pos:end="5444:23">get_errno</name><argument_list pos:start="5444:24" pos:end="5444:46">(<argument pos:start="5444:25" pos:end="5444:45"><expr pos:start="5444:25" pos:end="5444:45"><call pos:start="5444:25" pos:end="5444:45"><name pos:start="5444:25" pos:end="5444:30">lchown</name><argument_list pos:start="5444:31" pos:end="5444:45">(<argument pos:start="5444:32" pos:end="5444:32"><expr pos:start="5444:32" pos:end="5444:32"><name pos:start="5444:32" pos:end="5444:32">p</name></expr></argument>, <argument pos:start="5444:35" pos:end="5444:38"><expr pos:start="5444:35" pos:end="5444:38"><name pos:start="5444:35" pos:end="5444:38">arg2</name></expr></argument>, <argument pos:start="5444:41" pos:end="5444:44"><expr pos:start="5444:41" pos:end="5444:44"><name pos:start="5444:41" pos:end="5444:44">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5446:9" pos:end="5446:32"><expr pos:start="5446:9" pos:end="5446:31"><call pos:start="5446:9" pos:end="5446:31"><name pos:start="5446:9" pos:end="5446:19">unlock_user</name><argument_list pos:start="5446:20" pos:end="5446:31">(<argument pos:start="5446:21" pos:end="5446:21"><expr pos:start="5446:21" pos:end="5446:21"><name pos:start="5446:21" pos:end="5446:21">p</name></expr></argument>, <argument pos:start="5446:24" pos:end="5446:27"><expr pos:start="5446:24" pos:end="5446:27"><name pos:start="5446:24" pos:end="5446:27">arg1</name></expr></argument>, <argument pos:start="5446:30" pos:end="5446:30"><expr pos:start="5446:30" pos:end="5446:30"><literal type="number" pos:start="5446:30" pos:end="5446:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5448:9" pos:end="5453:0">break;</break>

<cpp:endif pos:start="5450:1" pos:end="5450:6">#<cpp:directive pos:start="5450:2" pos:end="5450:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5452:1" pos:end="5452:25">#<cpp:directive pos:start="5452:2" pos:end="5452:6">ifdef</cpp:directive> <name pos:start="5452:8" pos:end="5452:25">TARGET_NR_getuid32</name></cpp:ifdef>

    <case pos:start="5454:5" pos:end="5454:28">case <expr pos:start="5454:10" pos:end="5454:27"><name pos:start="5454:10" pos:end="5454:27">TARGET_NR_getuid32</name></expr>:</case>

        <expr_stmt pos:start="5456:9" pos:end="5456:34"><expr pos:start="5456:9" pos:end="5456:33"><name pos:start="5456:9" pos:end="5456:11">ret</name> <operator pos:start="5456:13" pos:end="5456:13">=</operator> <call pos:start="5456:15" pos:end="5456:33"><name pos:start="5456:15" pos:end="5456:23">get_errno</name><argument_list pos:start="5456:24" pos:end="5456:33">(<argument pos:start="5456:25" pos:end="5456:32"><expr pos:start="5456:25" pos:end="5456:32"><call pos:start="5456:25" pos:end="5456:32"><name pos:start="5456:25" pos:end="5456:30">getuid</name><argument_list pos:start="5456:31" pos:end="5456:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5458:9" pos:end="5465:0">break;</break>

<cpp:endif pos:start="5460:1" pos:end="5460:6">#<cpp:directive pos:start="5460:2" pos:end="5460:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="5464:1" pos:end="5464:55">#<cpp:directive pos:start="5464:2" pos:end="5464:3">if</cpp:directive> <expr pos:start="5464:5" pos:end="5464:55"><call pos:start="5464:5" pos:end="5464:30"><name pos:start="5464:5" pos:end="5464:11">defined</name><argument_list pos:start="5464:12" pos:end="5464:30">(<argument pos:start="5464:13" pos:end="5464:29"><expr pos:start="5464:13" pos:end="5464:29"><name pos:start="5464:13" pos:end="5464:29">TARGET_NR_getxuid</name></expr></argument>)</argument_list></call> <operator pos:start="5464:32" pos:end="5464:33">&amp;&amp;</operator> <call pos:start="5464:35" pos:end="5464:55"><name pos:start="5464:35" pos:end="5464:41">defined</name><argument_list pos:start="5464:42" pos:end="5464:55">(<argument pos:start="5464:43" pos:end="5464:54"><expr pos:start="5464:43" pos:end="5464:54"><name pos:start="5464:43" pos:end="5464:54">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

   <comment type="block" pos:start="5466:4" pos:end="5466:23">/* Alpha specific */</comment>

    <case pos:start="5468:5" pos:end="5468:27">case <expr pos:start="5468:10" pos:end="5468:26"><name pos:start="5468:10" pos:end="5468:26">TARGET_NR_getxuid</name></expr>:</case>

         <block pos:start="5470:10" pos:end="5478:10">{<block_content pos:start="5472:13" pos:end="5476:55">

            <decl_stmt pos:start="5472:13" pos:end="5472:23"><decl pos:start="5472:13" pos:end="5472:22"><type pos:start="5472:13" pos:end="5472:17"><name pos:start="5472:13" pos:end="5472:17">uid_t</name></type> <name pos:start="5472:19" pos:end="5472:22">euid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5474:13" pos:end="5474:27"><expr pos:start="5474:13" pos:end="5474:26"><name pos:start="5474:13" pos:end="5474:16">euid</name><operator pos:start="5474:17" pos:end="5474:17">=</operator><call pos:start="5474:18" pos:end="5474:26"><name pos:start="5474:18" pos:end="5474:24">geteuid</name><argument_list pos:start="5474:25" pos:end="5474:26">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5476:13" pos:end="5476:55"><expr pos:start="5476:13" pos:end="5476:54"><operator pos:start="5476:13" pos:end="5476:13">(</operator><operator pos:start="5476:14" pos:end="5476:14">(</operator><name pos:start="5476:15" pos:end="5476:27">CPUAlphaState</name> <operator pos:start="5476:29" pos:end="5476:29">*</operator><operator pos:start="5476:30" pos:end="5476:30">)</operator><name pos:start="5476:31" pos:end="5476:37">cpu_env</name><operator pos:start="5476:38" pos:end="5476:38">)</operator><operator pos:start="5476:39" pos:end="5476:40">-&gt;</operator><name pos:start="5476:41" pos:end="5476:49"><name pos:start="5476:41" pos:end="5476:42">ir</name><index pos:start="5476:43" pos:end="5476:49">[<expr pos:start="5476:44" pos:end="5476:48"><name pos:start="5476:44" pos:end="5476:48">IR_A4</name></expr>]</index></name><operator pos:start="5476:50" pos:end="5476:50">=</operator><name pos:start="5476:51" pos:end="5476:54">euid</name></expr>;</expr_stmt>

         </block_content>}</block>

        <expr_stmt pos:start="5480:9" pos:end="5480:34"><expr pos:start="5480:9" pos:end="5480:33"><name pos:start="5480:9" pos:end="5480:11">ret</name> <operator pos:start="5480:13" pos:end="5480:13">=</operator> <call pos:start="5480:15" pos:end="5480:33"><name pos:start="5480:15" pos:end="5480:23">get_errno</name><argument_list pos:start="5480:24" pos:end="5480:33">(<argument pos:start="5480:25" pos:end="5480:32"><expr pos:start="5480:25" pos:end="5480:32"><call pos:start="5480:25" pos:end="5480:32"><name pos:start="5480:25" pos:end="5480:30">getuid</name><argument_list pos:start="5480:31" pos:end="5480:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5482:9" pos:end="5487:0">break;</break>

<cpp:endif pos:start="5484:1" pos:end="5484:6">#<cpp:directive pos:start="5484:2" pos:end="5484:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="5486:1" pos:end="5486:55">#<cpp:directive pos:start="5486:2" pos:end="5486:3">if</cpp:directive> <expr pos:start="5486:5" pos:end="5486:55"><call pos:start="5486:5" pos:end="5486:30"><name pos:start="5486:5" pos:end="5486:11">defined</name><argument_list pos:start="5486:12" pos:end="5486:30">(<argument pos:start="5486:13" pos:end="5486:29"><expr pos:start="5486:13" pos:end="5486:29"><name pos:start="5486:13" pos:end="5486:29">TARGET_NR_getxgid</name></expr></argument>)</argument_list></call> <operator pos:start="5486:32" pos:end="5486:33">&amp;&amp;</operator> <call pos:start="5486:35" pos:end="5486:55"><name pos:start="5486:35" pos:end="5486:41">defined</name><argument_list pos:start="5486:42" pos:end="5486:55">(<argument pos:start="5486:43" pos:end="5486:54"><expr pos:start="5486:43" pos:end="5486:54"><name pos:start="5486:43" pos:end="5486:54">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

   <comment type="block" pos:start="5488:4" pos:end="5488:23">/* Alpha specific */</comment>

    <case pos:start="5490:5" pos:end="5490:27">case <expr pos:start="5490:10" pos:end="5490:26"><name pos:start="5490:10" pos:end="5490:26">TARGET_NR_getxgid</name></expr>:</case>

         <block pos:start="5492:10" pos:end="5500:10">{<block_content pos:start="5494:13" pos:end="5498:55">

            <decl_stmt pos:start="5494:13" pos:end="5494:23"><decl pos:start="5494:13" pos:end="5494:22"><type pos:start="5494:13" pos:end="5494:17"><name pos:start="5494:13" pos:end="5494:17">uid_t</name></type> <name pos:start="5494:19" pos:end="5494:22">egid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5496:13" pos:end="5496:27"><expr pos:start="5496:13" pos:end="5496:26"><name pos:start="5496:13" pos:end="5496:16">egid</name><operator pos:start="5496:17" pos:end="5496:17">=</operator><call pos:start="5496:18" pos:end="5496:26"><name pos:start="5496:18" pos:end="5496:24">getegid</name><argument_list pos:start="5496:25" pos:end="5496:26">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5498:13" pos:end="5498:55"><expr pos:start="5498:13" pos:end="5498:54"><operator pos:start="5498:13" pos:end="5498:13">(</operator><operator pos:start="5498:14" pos:end="5498:14">(</operator><name pos:start="5498:15" pos:end="5498:27">CPUAlphaState</name> <operator pos:start="5498:29" pos:end="5498:29">*</operator><operator pos:start="5498:30" pos:end="5498:30">)</operator><name pos:start="5498:31" pos:end="5498:37">cpu_env</name><operator pos:start="5498:38" pos:end="5498:38">)</operator><operator pos:start="5498:39" pos:end="5498:40">-&gt;</operator><name pos:start="5498:41" pos:end="5498:49"><name pos:start="5498:41" pos:end="5498:42">ir</name><index pos:start="5498:43" pos:end="5498:49">[<expr pos:start="5498:44" pos:end="5498:48"><name pos:start="5498:44" pos:end="5498:48">IR_A4</name></expr>]</index></name><operator pos:start="5498:50" pos:end="5498:50">=</operator><name pos:start="5498:51" pos:end="5498:54">egid</name></expr>;</expr_stmt>

         </block_content>}</block>

        <expr_stmt pos:start="5502:9" pos:end="5502:34"><expr pos:start="5502:9" pos:end="5502:33"><name pos:start="5502:9" pos:end="5502:11">ret</name> <operator pos:start="5502:13" pos:end="5502:13">=</operator> <call pos:start="5502:15" pos:end="5502:33"><name pos:start="5502:15" pos:end="5502:23">get_errno</name><argument_list pos:start="5502:24" pos:end="5502:33">(<argument pos:start="5502:25" pos:end="5502:32"><expr pos:start="5502:25" pos:end="5502:32"><call pos:start="5502:25" pos:end="5502:32"><name pos:start="5502:25" pos:end="5502:30">getgid</name><argument_list pos:start="5502:31" pos:end="5502:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5504:9" pos:end="5509:0">break;</break>

<cpp:endif pos:start="5506:1" pos:end="5506:6">#<cpp:directive pos:start="5506:2" pos:end="5506:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="5508:1" pos:end="5508:62">#<cpp:directive pos:start="5508:2" pos:end="5508:3">if</cpp:directive> <expr pos:start="5508:5" pos:end="5508:62"><call pos:start="5508:5" pos:end="5508:37"><name pos:start="5508:5" pos:end="5508:11">defined</name><argument_list pos:start="5508:12" pos:end="5508:37">(<argument pos:start="5508:13" pos:end="5508:36"><expr pos:start="5508:13" pos:end="5508:36"><name pos:start="5508:13" pos:end="5508:36">TARGET_NR_osf_getsysinfo</name></expr></argument>)</argument_list></call> <operator pos:start="5508:39" pos:end="5508:40">&amp;&amp;</operator> <call pos:start="5508:42" pos:end="5508:62"><name pos:start="5508:42" pos:end="5508:48">defined</name><argument_list pos:start="5508:49" pos:end="5508:62">(<argument pos:start="5508:50" pos:end="5508:61"><expr pos:start="5508:50" pos:end="5508:61"><name pos:start="5508:50" pos:end="5508:61">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="5510:5" pos:end="5510:24">/* Alpha specific */</comment>

    <case pos:start="5512:5" pos:end="5512:34">case <expr pos:start="5512:10" pos:end="5512:33"><name pos:start="5512:10" pos:end="5512:33">TARGET_NR_osf_getsysinfo</name></expr>:</case>

        <expr_stmt pos:start="5514:9" pos:end="5514:33"><expr pos:start="5514:9" pos:end="5514:32"><name pos:start="5514:9" pos:end="5514:11">ret</name> <operator pos:start="5514:13" pos:end="5514:13">=</operator> <operator pos:start="5514:15" pos:end="5514:15">-</operator><name pos:start="5514:16" pos:end="5514:32">TARGET_EOPNOTSUPP</name></expr>;</expr_stmt>

        <switch pos:start="5516:9" pos:end="5577:9">switch <condition pos:start="5516:16" pos:end="5516:21">(<expr pos:start="5516:17" pos:end="5516:20"><name pos:start="5516:17" pos:end="5516:20">arg1</name></expr>)</condition> <block pos:start="5516:23" pos:end="5577:9">{<block_content pos:start="5518:11" pos:end="5555:18">

          <case pos:start="5518:11" pos:end="5518:42">case <expr pos:start="5518:16" pos:end="5518:41"><name pos:start="5518:16" pos:end="5518:41">TARGET_GSI_IEEE_FP_CONTROL</name></expr>:</case>

            <block pos:start="5520:13" pos:end="5553:13">{<block_content pos:start="5522:17" pos:end="5550:36">

                <decl_stmt pos:start="5522:17" pos:end="5522:68"><decl pos:start="5522:17" pos:end="5522:29"><type pos:start="5522:17" pos:end="5522:24"><name pos:start="5522:17" pos:end="5522:24">uint64_t</name></type> <name pos:start="5522:26" pos:end="5522:29">swcr</name></decl>, <decl pos:start="5522:32" pos:end="5522:67"><type ref="prev" pos:start="5522:17" pos:end="5522:24"/><name pos:start="5522:32" pos:end="5522:35">fpcr</name> <init pos:start="5522:37" pos:end="5522:67">= <expr pos:start="5522:39" pos:end="5522:67"><call pos:start="5522:39" pos:end="5522:67"><name pos:start="5522:39" pos:end="5522:57">cpu_alpha_load_fpcr</name> <argument_list pos:start="5522:59" pos:end="5522:67">(<argument pos:start="5522:60" pos:end="5522:66"><expr pos:start="5522:60" pos:end="5522:66"><name pos:start="5522:60" pos:end="5522:66">cpu_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <comment type="block" pos:start="5526:17" pos:end="5526:59">/* Copied from linux ieee_fpcr_to_swcr.  */</comment>

                <expr_stmt pos:start="5528:17" pos:end="5528:55"><expr pos:start="5528:17" pos:end="5528:54"><name pos:start="5528:17" pos:end="5528:20">swcr</name> <operator pos:start="5528:22" pos:end="5528:22">=</operator> <operator pos:start="5528:24" pos:end="5528:24">(</operator><name pos:start="5528:25" pos:end="5528:28">fpcr</name> <operator pos:start="5528:30" pos:end="5528:31">&gt;&gt;</operator> <literal type="number" pos:start="5528:33" pos:end="5528:34">35</literal><operator pos:start="5528:35" pos:end="5528:35">)</operator> <operator pos:start="5528:37" pos:end="5528:37">&amp;</operator> <name pos:start="5528:39" pos:end="5528:54">SWCR_STATUS_MASK</name></expr>;</expr_stmt>

                <expr_stmt pos:start="5530:17" pos:end="5530:52"><expr pos:start="5530:17" pos:end="5530:51"><name pos:start="5530:17" pos:end="5530:20">swcr</name> <operator pos:start="5530:22" pos:end="5530:23">|=</operator> <operator pos:start="5530:25" pos:end="5530:25">(</operator><name pos:start="5530:26" pos:end="5530:29">fpcr</name> <operator pos:start="5530:31" pos:end="5530:32">&gt;&gt;</operator> <literal type="number" pos:start="5530:34" pos:end="5530:35">36</literal><operator pos:start="5530:36" pos:end="5530:36">)</operator> <operator pos:start="5530:38" pos:end="5530:38">&amp;</operator> <name pos:start="5530:40" pos:end="5530:51">SWCR_MAP_DMZ</name></expr>;</expr_stmt>

                <expr_stmt pos:start="5532:17" pos:end="5536:64"><expr pos:start="5532:17" pos:end="5536:63"><name pos:start="5532:17" pos:end="5532:20">swcr</name> <operator pos:start="5532:22" pos:end="5532:23">|=</operator> <operator pos:start="5532:25" pos:end="5532:25">(</operator><operator pos:start="5532:26" pos:end="5532:26">~</operator><name pos:start="5532:27" pos:end="5532:30">fpcr</name> <operator pos:start="5532:32" pos:end="5532:33">&gt;&gt;</operator> <literal type="number" pos:start="5532:35" pos:end="5532:36">48</literal><operator pos:start="5532:37" pos:end="5532:37">)</operator> <operator pos:start="5532:39" pos:end="5532:39">&amp;</operator> <operator pos:start="5532:41" pos:end="5532:41">(</operator><name pos:start="5532:42" pos:end="5532:61">SWCR_TRAP_ENABLE_INV</name>

                                        <operator pos:start="5534:41" pos:end="5534:41">|</operator> <name pos:start="5534:43" pos:end="5534:62">SWCR_TRAP_ENABLE_DZE</name>

                                        <operator pos:start="5536:41" pos:end="5536:41">|</operator> <name pos:start="5536:43" pos:end="5536:62">SWCR_TRAP_ENABLE_OVF</name><operator pos:start="5536:63" pos:end="5536:63">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="5538:17" pos:end="5540:64"><expr pos:start="5538:17" pos:end="5540:63"><name pos:start="5538:17" pos:end="5538:20">swcr</name> <operator pos:start="5538:22" pos:end="5538:23">|=</operator> <operator pos:start="5538:25" pos:end="5538:25">(</operator><operator pos:start="5538:26" pos:end="5538:26">~</operator><name pos:start="5538:27" pos:end="5538:30">fpcr</name> <operator pos:start="5538:32" pos:end="5538:33">&gt;&gt;</operator> <literal type="number" pos:start="5538:35" pos:end="5538:36">57</literal><operator pos:start="5538:37" pos:end="5538:37">)</operator> <operator pos:start="5538:39" pos:end="5538:39">&amp;</operator> <operator pos:start="5538:41" pos:end="5538:41">(</operator><name pos:start="5538:42" pos:end="5538:61">SWCR_TRAP_ENABLE_UNF</name>

                                        <operator pos:start="5540:41" pos:end="5540:41">|</operator> <name pos:start="5540:43" pos:end="5540:62">SWCR_TRAP_ENABLE_INE</name><operator pos:start="5540:63" pos:end="5540:63">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="5542:17" pos:end="5542:52"><expr pos:start="5542:17" pos:end="5542:51"><name pos:start="5542:17" pos:end="5542:20">swcr</name> <operator pos:start="5542:22" pos:end="5542:23">|=</operator> <operator pos:start="5542:25" pos:end="5542:25">(</operator><name pos:start="5542:26" pos:end="5542:29">fpcr</name> <operator pos:start="5542:31" pos:end="5542:32">&gt;&gt;</operator> <literal type="number" pos:start="5542:34" pos:end="5542:35">47</literal><operator pos:start="5542:36" pos:end="5542:36">)</operator> <operator pos:start="5542:38" pos:end="5542:38">&amp;</operator> <name pos:start="5542:40" pos:end="5542:51">SWCR_MAP_UMZ</name></expr>;</expr_stmt>

                <expr_stmt pos:start="5544:17" pos:end="5544:61"><expr pos:start="5544:17" pos:end="5544:60"><name pos:start="5544:17" pos:end="5544:20">swcr</name> <operator pos:start="5544:22" pos:end="5544:23">|=</operator> <operator pos:start="5544:25" pos:end="5544:25">(</operator><operator pos:start="5544:26" pos:end="5544:26">~</operator><name pos:start="5544:27" pos:end="5544:30">fpcr</name> <operator pos:start="5544:32" pos:end="5544:33">&gt;&gt;</operator> <literal type="number" pos:start="5544:35" pos:end="5544:36">41</literal><operator pos:start="5544:37" pos:end="5544:37">)</operator> <operator pos:start="5544:39" pos:end="5544:39">&amp;</operator> <name pos:start="5544:41" pos:end="5544:60">SWCR_TRAP_ENABLE_DNO</name></expr>;</expr_stmt>



                <if_stmt pos:start="5548:17" pos:end="5550:36"><if pos:start="5548:17" pos:end="5550:36">if <condition pos:start="5548:20" pos:end="5548:46">(<expr pos:start="5548:21" pos:end="5548:45"><call pos:start="5548:21" pos:end="5548:45"><name pos:start="5548:21" pos:end="5548:32">put_user_u64</name> <argument_list pos:start="5548:34" pos:end="5548:45">(<argument pos:start="5548:35" pos:end="5548:38"><expr pos:start="5548:35" pos:end="5548:38"><name pos:start="5548:35" pos:end="5548:38">swcr</name></expr></argument>, <argument pos:start="5548:41" pos:end="5548:44"><expr pos:start="5548:41" pos:end="5548:44"><name pos:start="5548:41" pos:end="5548:44">arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5550:25" pos:end="5550:36"><block_content pos:start="5550:25" pos:end="5550:36">

                        <goto pos:start="5550:25" pos:end="5550:36">goto <name pos:start="5550:30" pos:end="5550:35">efault</name>;</goto></block_content></block></if></if_stmt>


            </block_content>}</block>

            <break pos:start="5555:13" pos:end="5555:18">break;</break>



          <comment type="block" pos:start="5559:11" pos:end="5575:12">/* case GSI_IEEE_STATE_AT_SIGNAL:

             -- Not implemented in linux kernel.

             case GSI_UACPROC:

             -- Retrieves current unaligned access state; not much used.

             case GSI_PROC_TYPE:

             -- Retrieves implver information; surely not used.

             case GSI_GET_HWRPB:

             -- Grabs a copy of the HWRPB; surely not used.

          */</comment>

        </block_content>}</block></switch>

        <break pos:start="5579:9" pos:end="5584:0">break;</break>

<cpp:endif pos:start="5581:1" pos:end="5581:6">#<cpp:directive pos:start="5581:2" pos:end="5581:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="5583:1" pos:end="5583:62">#<cpp:directive pos:start="5583:2" pos:end="5583:3">if</cpp:directive> <expr pos:start="5583:5" pos:end="5583:62"><call pos:start="5583:5" pos:end="5583:37"><name pos:start="5583:5" pos:end="5583:11">defined</name><argument_list pos:start="5583:12" pos:end="5583:37">(<argument pos:start="5583:13" pos:end="5583:36"><expr pos:start="5583:13" pos:end="5583:36"><name pos:start="5583:13" pos:end="5583:36">TARGET_NR_osf_setsysinfo</name></expr></argument>)</argument_list></call> <operator pos:start="5583:39" pos:end="5583:40">&amp;&amp;</operator> <call pos:start="5583:42" pos:end="5583:62"><name pos:start="5583:42" pos:end="5583:48">defined</name><argument_list pos:start="5583:49" pos:end="5583:62">(<argument pos:start="5583:50" pos:end="5583:61"><expr pos:start="5583:50" pos:end="5583:61"><name pos:start="5583:50" pos:end="5583:61">TARGET_ALPHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="5585:5" pos:end="5585:24">/* Alpha specific */</comment>

    <case pos:start="5587:5" pos:end="5587:34">case <expr pos:start="5587:10" pos:end="5587:33"><name pos:start="5587:10" pos:end="5587:33">TARGET_NR_osf_setsysinfo</name></expr>:</case>

        <expr_stmt pos:start="5589:9" pos:end="5589:33"><expr pos:start="5589:9" pos:end="5589:32"><name pos:start="5589:9" pos:end="5589:11">ret</name> <operator pos:start="5589:13" pos:end="5589:13">=</operator> <operator pos:start="5589:15" pos:end="5589:15">-</operator><name pos:start="5589:16" pos:end="5589:32">TARGET_EOPNOTSUPP</name></expr>;</expr_stmt>

        <switch pos:start="5591:9" pos:end="5755:9">switch <condition pos:start="5591:16" pos:end="5591:21">(<expr pos:start="5591:17" pos:end="5591:20"><name pos:start="5591:17" pos:end="5591:20">arg1</name></expr>)</condition> <block pos:start="5591:23" pos:end="5755:9">{<block_content pos:start="5593:11" pos:end="5739:18">

          <case pos:start="5593:11" pos:end="5593:42">case <expr pos:start="5593:16" pos:end="5593:41"><name pos:start="5593:16" pos:end="5593:41">TARGET_SSI_IEEE_FP_CONTROL</name></expr>:</case>

            <block pos:start="5595:13" pos:end="5638:13">{<block_content pos:start="5597:17" pos:end="5635:52">

                <decl_stmt pos:start="5597:17" pos:end="5597:47"><decl pos:start="5597:17" pos:end="5597:29"><type pos:start="5597:17" pos:end="5597:24"><name pos:start="5597:17" pos:end="5597:24">uint64_t</name></type> <name pos:start="5597:26" pos:end="5597:29">swcr</name></decl>, <decl pos:start="5597:32" pos:end="5597:35"><type ref="prev" pos:start="5597:17" pos:end="5597:24"/><name pos:start="5597:32" pos:end="5597:35">fpcr</name></decl>, <decl pos:start="5597:38" pos:end="5597:46"><type ref="prev" pos:start="5597:17" pos:end="5597:24"/><name pos:start="5597:38" pos:end="5597:46">orig_fpcr</name></decl>;</decl_stmt>



                <if_stmt pos:start="5601:17" pos:end="5605:17"><if pos:start="5601:17" pos:end="5605:17">if <condition pos:start="5601:20" pos:end="5601:46">(<expr pos:start="5601:21" pos:end="5601:45"><call pos:start="5601:21" pos:end="5601:45"><name pos:start="5601:21" pos:end="5601:32">get_user_u64</name> <argument_list pos:start="5601:34" pos:end="5601:45">(<argument pos:start="5601:35" pos:end="5601:38"><expr pos:start="5601:35" pos:end="5601:38"><name pos:start="5601:35" pos:end="5601:38">swcr</name></expr></argument>, <argument pos:start="5601:41" pos:end="5601:44"><expr pos:start="5601:41" pos:end="5601:44"><name pos:start="5601:41" pos:end="5601:44">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5601:48" pos:end="5605:17">{<block_content pos:start="5603:21" pos:end="5603:32">

                    <goto pos:start="5603:21" pos:end="5603:32">goto <name pos:start="5603:26" pos:end="5603:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="5607:17" pos:end="5607:57"><expr pos:start="5607:17" pos:end="5607:56"><name pos:start="5607:17" pos:end="5607:25">orig_fpcr</name> <operator pos:start="5607:27" pos:end="5607:27">=</operator> <call pos:start="5607:29" pos:end="5607:56"><name pos:start="5607:29" pos:end="5607:47">cpu_alpha_load_fpcr</name><argument_list pos:start="5607:48" pos:end="5607:56">(<argument pos:start="5607:49" pos:end="5607:55"><expr pos:start="5607:49" pos:end="5607:55"><name pos:start="5607:49" pos:end="5607:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="5609:17" pos:end="5609:49"><expr pos:start="5609:17" pos:end="5609:48"><name pos:start="5609:17" pos:end="5609:20">fpcr</name> <operator pos:start="5609:22" pos:end="5609:22">=</operator> <name pos:start="5609:24" pos:end="5609:32">orig_fpcr</name> <operator pos:start="5609:34" pos:end="5609:34">&amp;</operator> <name pos:start="5609:36" pos:end="5609:48">FPCR_DYN_MASK</name></expr>;</expr_stmt>



                <comment type="block" pos:start="5613:17" pos:end="5613:59">/* Copied from linux ieee_swcr_to_fpcr.  */</comment>

                <expr_stmt pos:start="5615:17" pos:end="5615:56"><expr pos:start="5615:17" pos:end="5615:55"><name pos:start="5615:17" pos:end="5615:20">fpcr</name> <operator pos:start="5615:22" pos:end="5615:23">|=</operator> <operator pos:start="5615:25" pos:end="5615:25">(</operator><name pos:start="5615:26" pos:end="5615:29">swcr</name> <operator pos:start="5615:31" pos:end="5615:31">&amp;</operator> <name pos:start="5615:33" pos:end="5615:48">SWCR_STATUS_MASK</name><operator pos:start="5615:49" pos:end="5615:49">)</operator> <operator pos:start="5615:51" pos:end="5615:52">&lt;&lt;</operator> <literal type="number" pos:start="5615:54" pos:end="5615:55">35</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="5617:17" pos:end="5617:52"><expr pos:start="5617:17" pos:end="5617:51"><name pos:start="5617:17" pos:end="5617:20">fpcr</name> <operator pos:start="5617:22" pos:end="5617:23">|=</operator> <operator pos:start="5617:25" pos:end="5617:25">(</operator><name pos:start="5617:26" pos:end="5617:29">swcr</name> <operator pos:start="5617:31" pos:end="5617:31">&amp;</operator> <name pos:start="5617:33" pos:end="5617:44">SWCR_MAP_DMZ</name><operator pos:start="5617:45" pos:end="5617:45">)</operator> <operator pos:start="5617:47" pos:end="5617:48">&lt;&lt;</operator> <literal type="number" pos:start="5617:50" pos:end="5617:51">36</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="5619:17" pos:end="5623:65"><expr pos:start="5619:17" pos:end="5623:64"><name pos:start="5619:17" pos:end="5619:20">fpcr</name> <operator pos:start="5619:22" pos:end="5619:23">|=</operator> <operator pos:start="5619:25" pos:end="5619:25">(</operator><operator pos:start="5619:26" pos:end="5619:26">~</operator><name pos:start="5619:27" pos:end="5619:30">swcr</name> <operator pos:start="5619:32" pos:end="5619:32">&amp;</operator> <operator pos:start="5619:34" pos:end="5619:34">(</operator><name pos:start="5619:35" pos:end="5619:54">SWCR_TRAP_ENABLE_INV</name>

                                  <operator pos:start="5621:35" pos:end="5621:35">|</operator> <name pos:start="5621:37" pos:end="5621:56">SWCR_TRAP_ENABLE_DZE</name>

                                  <operator pos:start="5623:35" pos:end="5623:35">|</operator> <name pos:start="5623:37" pos:end="5623:56">SWCR_TRAP_ENABLE_OVF</name><operator pos:start="5623:57" pos:end="5623:57">)</operator><operator pos:start="5623:58" pos:end="5623:58">)</operator> <operator pos:start="5623:60" pos:end="5623:61">&lt;&lt;</operator> <literal type="number" pos:start="5623:63" pos:end="5623:64">48</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="5625:17" pos:end="5627:65"><expr pos:start="5625:17" pos:end="5627:64"><name pos:start="5625:17" pos:end="5625:20">fpcr</name> <operator pos:start="5625:22" pos:end="5625:23">|=</operator> <operator pos:start="5625:25" pos:end="5625:25">(</operator><operator pos:start="5625:26" pos:end="5625:26">~</operator><name pos:start="5625:27" pos:end="5625:30">swcr</name> <operator pos:start="5625:32" pos:end="5625:32">&amp;</operator> <operator pos:start="5625:34" pos:end="5625:34">(</operator><name pos:start="5625:35" pos:end="5625:54">SWCR_TRAP_ENABLE_UNF</name>

                                  <operator pos:start="5627:35" pos:end="5627:35">|</operator> <name pos:start="5627:37" pos:end="5627:56">SWCR_TRAP_ENABLE_INE</name><operator pos:start="5627:57" pos:end="5627:57">)</operator><operator pos:start="5627:58" pos:end="5627:58">)</operator> <operator pos:start="5627:60" pos:end="5627:61">&lt;&lt;</operator> <literal type="number" pos:start="5627:63" pos:end="5627:64">57</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="5629:17" pos:end="5629:74"><expr pos:start="5629:17" pos:end="5629:73"><name pos:start="5629:17" pos:end="5629:20">fpcr</name> <operator pos:start="5629:22" pos:end="5629:23">|=</operator> <operator pos:start="5629:25" pos:end="5629:25">(</operator><ternary pos:start="5629:26" pos:end="5629:72"><condition pos:start="5629:26" pos:end="5629:46"><expr pos:start="5629:26" pos:end="5629:44"><name pos:start="5629:26" pos:end="5629:29">swcr</name> <operator pos:start="5629:31" pos:end="5629:31">&amp;</operator> <name pos:start="5629:33" pos:end="5629:44">SWCR_MAP_UMZ</name></expr> ?</condition><then pos:start="5629:48" pos:end="5629:68"> <expr pos:start="5629:48" pos:end="5629:68"><name pos:start="5629:48" pos:end="5629:56">FPCR_UNDZ</name> <operator pos:start="5629:58" pos:end="5629:58">|</operator> <name pos:start="5629:60" pos:end="5629:68">FPCR_UNFD</name></expr> </then><else pos:start="5629:70" pos:end="5629:72">: <expr pos:start="5629:72" pos:end="5629:72"><literal type="number" pos:start="5629:72" pos:end="5629:72">0</literal></expr></else></ternary><operator pos:start="5629:73" pos:end="5629:73">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="5631:17" pos:end="5631:61"><expr pos:start="5631:17" pos:end="5631:60"><name pos:start="5631:17" pos:end="5631:20">fpcr</name> <operator pos:start="5631:22" pos:end="5631:23">|=</operator> <operator pos:start="5631:25" pos:end="5631:25">(</operator><operator pos:start="5631:26" pos:end="5631:26">~</operator><name pos:start="5631:27" pos:end="5631:30">swcr</name> <operator pos:start="5631:32" pos:end="5631:32">&amp;</operator> <name pos:start="5631:34" pos:end="5631:53">SWCR_TRAP_ENABLE_DNO</name><operator pos:start="5631:54" pos:end="5631:54">)</operator> <operator pos:start="5631:56" pos:end="5631:57">&lt;&lt;</operator> <literal type="number" pos:start="5631:59" pos:end="5631:60">41</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="5635:17" pos:end="5635:52"><expr pos:start="5635:17" pos:end="5635:51"><call pos:start="5635:17" pos:end="5635:51"><name pos:start="5635:17" pos:end="5635:36">cpu_alpha_store_fpcr</name><argument_list pos:start="5635:37" pos:end="5635:51">(<argument pos:start="5635:38" pos:end="5635:44"><expr pos:start="5635:38" pos:end="5635:44"><name pos:start="5635:38" pos:end="5635:44">cpu_env</name></expr></argument>, <argument pos:start="5635:47" pos:end="5635:50"><expr pos:start="5635:47" pos:end="5635:50"><name pos:start="5635:47" pos:end="5635:50">fpcr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            </block_content>}</block>

            <break pos:start="5640:13" pos:end="5640:18">break;</break>



          <case pos:start="5644:11" pos:end="5644:47">case <expr pos:start="5644:16" pos:end="5644:46"><name pos:start="5644:16" pos:end="5644:46">TARGET_SSI_IEEE_RAISE_EXCEPTION</name></expr>:</case>

            <block pos:start="5646:13" pos:end="5737:13">{<block_content pos:start="5648:17" pos:end="5735:17">

                <decl_stmt pos:start="5648:17" pos:end="5648:46"><decl pos:start="5648:17" pos:end="5648:28"><type pos:start="5648:17" pos:end="5648:24"><name pos:start="5648:17" pos:end="5648:24">uint64_t</name></type> <name pos:start="5648:26" pos:end="5648:28">exc</name></decl>, <decl pos:start="5648:31" pos:end="5648:34"><type ref="prev" pos:start="5648:17" pos:end="5648:24"/><name pos:start="5648:31" pos:end="5648:34">fpcr</name></decl>, <decl pos:start="5648:37" pos:end="5648:45"><type ref="prev" pos:start="5648:17" pos:end="5648:24"/><name pos:start="5648:37" pos:end="5648:45">orig_fpcr</name></decl>;</decl_stmt>

                <decl_stmt pos:start="5650:17" pos:end="5650:28"><decl pos:start="5650:17" pos:end="5650:27"><type pos:start="5650:17" pos:end="5650:19"><name pos:start="5650:17" pos:end="5650:19">int</name></type> <name pos:start="5650:21" pos:end="5650:27">si_code</name></decl>;</decl_stmt>



                <if_stmt pos:start="5654:17" pos:end="5658:17"><if pos:start="5654:17" pos:end="5658:17">if <condition pos:start="5654:20" pos:end="5654:44">(<expr pos:start="5654:21" pos:end="5654:43"><call pos:start="5654:21" pos:end="5654:43"><name pos:start="5654:21" pos:end="5654:32">get_user_u64</name><argument_list pos:start="5654:33" pos:end="5654:43">(<argument pos:start="5654:34" pos:end="5654:36"><expr pos:start="5654:34" pos:end="5654:36"><name pos:start="5654:34" pos:end="5654:36">exc</name></expr></argument>, <argument pos:start="5654:39" pos:end="5654:42"><expr pos:start="5654:39" pos:end="5654:42"><name pos:start="5654:39" pos:end="5654:42">arg2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5654:46" pos:end="5658:17">{<block_content pos:start="5656:21" pos:end="5656:32">

                    <goto pos:start="5656:21" pos:end="5656:32">goto <name pos:start="5656:26" pos:end="5656:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="5662:17" pos:end="5662:57"><expr pos:start="5662:17" pos:end="5662:56"><name pos:start="5662:17" pos:end="5662:25">orig_fpcr</name> <operator pos:start="5662:27" pos:end="5662:27">=</operator> <call pos:start="5662:29" pos:end="5662:56"><name pos:start="5662:29" pos:end="5662:47">cpu_alpha_load_fpcr</name><argument_list pos:start="5662:48" pos:end="5662:56">(<argument pos:start="5662:49" pos:end="5662:55"><expr pos:start="5662:49" pos:end="5662:55"><name pos:start="5662:49" pos:end="5662:55">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="5666:17" pos:end="5666:64">/* We only add to the exception status here.  */</comment>

                <expr_stmt pos:start="5668:17" pos:end="5668:68"><expr pos:start="5668:17" pos:end="5668:67"><name pos:start="5668:17" pos:end="5668:20">fpcr</name> <operator pos:start="5668:22" pos:end="5668:22">=</operator> <name pos:start="5668:24" pos:end="5668:32">orig_fpcr</name> <operator pos:start="5668:34" pos:end="5668:34">|</operator> <operator pos:start="5668:36" pos:end="5668:36">(</operator><operator pos:start="5668:37" pos:end="5668:37">(</operator><name pos:start="5668:38" pos:end="5668:40">exc</name> <operator pos:start="5668:42" pos:end="5668:42">&amp;</operator> <name pos:start="5668:44" pos:end="5668:59">SWCR_STATUS_MASK</name><operator pos:start="5668:60" pos:end="5668:60">)</operator> <operator pos:start="5668:62" pos:end="5668:63">&lt;&lt;</operator> <literal type="number" pos:start="5668:65" pos:end="5668:66">35</literal><operator pos:start="5668:67" pos:end="5668:67">)</operator></expr>;</expr_stmt>



                <expr_stmt pos:start="5672:17" pos:end="5672:52"><expr pos:start="5672:17" pos:end="5672:51"><call pos:start="5672:17" pos:end="5672:51"><name pos:start="5672:17" pos:end="5672:36">cpu_alpha_store_fpcr</name><argument_list pos:start="5672:37" pos:end="5672:51">(<argument pos:start="5672:38" pos:end="5672:44"><expr pos:start="5672:38" pos:end="5672:44"><name pos:start="5672:38" pos:end="5672:44">cpu_env</name></expr></argument>, <argument pos:start="5672:47" pos:end="5672:50"><expr pos:start="5672:47" pos:end="5672:50"><name pos:start="5672:47" pos:end="5672:50">fpcr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




                <comment type="block" pos:start="5677:17" pos:end="5677:55">/* Old exceptions are not signaled.  */</comment>

                <expr_stmt pos:start="5679:17" pos:end="5679:56"><expr pos:start="5679:17" pos:end="5679:55"><name pos:start="5679:17" pos:end="5679:20">fpcr</name> <operator pos:start="5679:22" pos:end="5679:23">&amp;=</operator> <operator pos:start="5679:25" pos:end="5679:25">~</operator><operator pos:start="5679:26" pos:end="5679:26">(</operator><name pos:start="5679:27" pos:end="5679:35">orig_fpcr</name> <operator pos:start="5679:37" pos:end="5679:37">&amp;</operator> <name pos:start="5679:39" pos:end="5679:54">FPCR_STATUS_MASK</name><operator pos:start="5679:55" pos:end="5679:55">)</operator></expr>;</expr_stmt>



                <comment type="block" pos:start="5683:17" pos:end="5685:55">/* If any exceptions set by this call,

                   and are unmasked, send a signal.  */</comment>

                <expr_stmt pos:start="5687:17" pos:end="5687:28"><expr pos:start="5687:17" pos:end="5687:27"><name pos:start="5687:17" pos:end="5687:23">si_code</name> <operator pos:start="5687:25" pos:end="5687:25">=</operator> <literal type="number" pos:start="5687:27" pos:end="5687:27">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="5689:17" pos:end="5693:17"><if pos:start="5689:17" pos:end="5693:17">if <condition pos:start="5689:20" pos:end="5689:64">(<expr pos:start="5689:21" pos:end="5689:63"><operator pos:start="5689:21" pos:end="5689:21">(</operator><name pos:start="5689:22" pos:end="5689:25">fpcr</name> <operator pos:start="5689:27" pos:end="5689:27">&amp;</operator> <operator pos:start="5689:29" pos:end="5689:29">(</operator><name pos:start="5689:30" pos:end="5689:37">FPCR_INE</name> <operator pos:start="5689:39" pos:end="5689:39">|</operator> <name pos:start="5689:41" pos:end="5689:49">FPCR_INED</name><operator pos:start="5689:50" pos:end="5689:50">)</operator><operator pos:start="5689:51" pos:end="5689:51">)</operator> <operator pos:start="5689:53" pos:end="5689:54">==</operator> <name pos:start="5689:56" pos:end="5689:63">FPCR_INE</name></expr>)</condition> <block pos:start="5689:66" pos:end="5693:17">{<block_content pos:start="5691:21" pos:end="5691:48">

                    <expr_stmt pos:start="5691:21" pos:end="5691:48"><expr pos:start="5691:21" pos:end="5691:47"><name pos:start="5691:21" pos:end="5691:27">si_code</name> <operator pos:start="5691:29" pos:end="5691:29">=</operator> <name pos:start="5691:31" pos:end="5691:47">TARGET_FPE_FLTRES</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="5695:17" pos:end="5699:17"><if pos:start="5695:17" pos:end="5699:17">if <condition pos:start="5695:20" pos:end="5695:64">(<expr pos:start="5695:21" pos:end="5695:63"><operator pos:start="5695:21" pos:end="5695:21">(</operator><name pos:start="5695:22" pos:end="5695:25">fpcr</name> <operator pos:start="5695:27" pos:end="5695:27">&amp;</operator> <operator pos:start="5695:29" pos:end="5695:29">(</operator><name pos:start="5695:30" pos:end="5695:37">FPCR_UNF</name> <operator pos:start="5695:39" pos:end="5695:39">|</operator> <name pos:start="5695:41" pos:end="5695:49">FPCR_UNFD</name><operator pos:start="5695:50" pos:end="5695:50">)</operator><operator pos:start="5695:51" pos:end="5695:51">)</operator> <operator pos:start="5695:53" pos:end="5695:54">==</operator> <name pos:start="5695:56" pos:end="5695:63">FPCR_UNF</name></expr>)</condition> <block pos:start="5695:66" pos:end="5699:17">{<block_content pos:start="5697:21" pos:end="5697:48">

                    <expr_stmt pos:start="5697:21" pos:end="5697:48"><expr pos:start="5697:21" pos:end="5697:47"><name pos:start="5697:21" pos:end="5697:27">si_code</name> <operator pos:start="5697:29" pos:end="5697:29">=</operator> <name pos:start="5697:31" pos:end="5697:47">TARGET_FPE_FLTUND</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="5701:17" pos:end="5705:17"><if pos:start="5701:17" pos:end="5705:17">if <condition pos:start="5701:20" pos:end="5701:64">(<expr pos:start="5701:21" pos:end="5701:63"><operator pos:start="5701:21" pos:end="5701:21">(</operator><name pos:start="5701:22" pos:end="5701:25">fpcr</name> <operator pos:start="5701:27" pos:end="5701:27">&amp;</operator> <operator pos:start="5701:29" pos:end="5701:29">(</operator><name pos:start="5701:30" pos:end="5701:37">FPCR_OVF</name> <operator pos:start="5701:39" pos:end="5701:39">|</operator> <name pos:start="5701:41" pos:end="5701:49">FPCR_OVFD</name><operator pos:start="5701:50" pos:end="5701:50">)</operator><operator pos:start="5701:51" pos:end="5701:51">)</operator> <operator pos:start="5701:53" pos:end="5701:54">==</operator> <name pos:start="5701:56" pos:end="5701:63">FPCR_OVF</name></expr>)</condition> <block pos:start="5701:66" pos:end="5705:17">{<block_content pos:start="5703:21" pos:end="5703:48">

                    <expr_stmt pos:start="5703:21" pos:end="5703:48"><expr pos:start="5703:21" pos:end="5703:47"><name pos:start="5703:21" pos:end="5703:27">si_code</name> <operator pos:start="5703:29" pos:end="5703:29">=</operator> <name pos:start="5703:31" pos:end="5703:47">TARGET_FPE_FLTOVF</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="5707:17" pos:end="5711:17"><if pos:start="5707:17" pos:end="5711:17">if <condition pos:start="5707:20" pos:end="5707:64">(<expr pos:start="5707:21" pos:end="5707:63"><operator pos:start="5707:21" pos:end="5707:21">(</operator><name pos:start="5707:22" pos:end="5707:25">fpcr</name> <operator pos:start="5707:27" pos:end="5707:27">&amp;</operator> <operator pos:start="5707:29" pos:end="5707:29">(</operator><name pos:start="5707:30" pos:end="5707:37">FPCR_DZE</name> <operator pos:start="5707:39" pos:end="5707:39">|</operator> <name pos:start="5707:41" pos:end="5707:49">FPCR_DZED</name><operator pos:start="5707:50" pos:end="5707:50">)</operator><operator pos:start="5707:51" pos:end="5707:51">)</operator> <operator pos:start="5707:53" pos:end="5707:54">==</operator> <name pos:start="5707:56" pos:end="5707:63">FPCR_DZE</name></expr>)</condition> <block pos:start="5707:66" pos:end="5711:17">{<block_content pos:start="5709:21" pos:end="5709:48">

                    <expr_stmt pos:start="5709:21" pos:end="5709:48"><expr pos:start="5709:21" pos:end="5709:47"><name pos:start="5709:21" pos:end="5709:27">si_code</name> <operator pos:start="5709:29" pos:end="5709:29">=</operator> <name pos:start="5709:31" pos:end="5709:47">TARGET_FPE_FLTDIV</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="5713:17" pos:end="5717:17"><if pos:start="5713:17" pos:end="5717:17">if <condition pos:start="5713:20" pos:end="5713:64">(<expr pos:start="5713:21" pos:end="5713:63"><operator pos:start="5713:21" pos:end="5713:21">(</operator><name pos:start="5713:22" pos:end="5713:25">fpcr</name> <operator pos:start="5713:27" pos:end="5713:27">&amp;</operator> <operator pos:start="5713:29" pos:end="5713:29">(</operator><name pos:start="5713:30" pos:end="5713:37">FPCR_INV</name> <operator pos:start="5713:39" pos:end="5713:39">|</operator> <name pos:start="5713:41" pos:end="5713:49">FPCR_INVD</name><operator pos:start="5713:50" pos:end="5713:50">)</operator><operator pos:start="5713:51" pos:end="5713:51">)</operator> <operator pos:start="5713:53" pos:end="5713:54">==</operator> <name pos:start="5713:56" pos:end="5713:63">FPCR_INV</name></expr>)</condition> <block pos:start="5713:66" pos:end="5717:17">{<block_content pos:start="5715:21" pos:end="5715:48">

                    <expr_stmt pos:start="5715:21" pos:end="5715:48"><expr pos:start="5715:21" pos:end="5715:47"><name pos:start="5715:21" pos:end="5715:27">si_code</name> <operator pos:start="5715:29" pos:end="5715:29">=</operator> <name pos:start="5715:31" pos:end="5715:47">TARGET_FPE_FLTINV</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="5719:17" pos:end="5735:17"><if pos:start="5719:17" pos:end="5735:17">if <condition pos:start="5719:20" pos:end="5719:33">(<expr pos:start="5719:21" pos:end="5719:32"><name pos:start="5719:21" pos:end="5719:27">si_code</name> <operator pos:start="5719:29" pos:end="5719:30">!=</operator> <literal type="number" pos:start="5719:32" pos:end="5719:32">0</literal></expr>)</condition> <block pos:start="5719:35" pos:end="5735:17">{<block_content pos:start="5721:21" pos:end="5733:80">

                    <decl_stmt pos:start="5721:21" pos:end="5721:42"><decl pos:start="5721:21" pos:end="5721:41"><type pos:start="5721:21" pos:end="5721:36"><name pos:start="5721:21" pos:end="5721:36">target_siginfo_t</name></type> <name pos:start="5721:38" pos:end="5721:41">info</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="5723:21" pos:end="5723:43"><expr pos:start="5723:21" pos:end="5723:42"><name pos:start="5723:21" pos:end="5723:33"><name pos:start="5723:21" pos:end="5723:24">info</name><operator pos:start="5723:25" pos:end="5723:25">.</operator><name pos:start="5723:26" pos:end="5723:33">si_signo</name></name> <operator pos:start="5723:35" pos:end="5723:35">=</operator> <name pos:start="5723:37" pos:end="5723:42">SIGFPE</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="5725:21" pos:end="5725:38"><expr pos:start="5725:21" pos:end="5725:37"><name pos:start="5725:21" pos:end="5725:33"><name pos:start="5725:21" pos:end="5725:24">info</name><operator pos:start="5725:25" pos:end="5725:25">.</operator><name pos:start="5725:26" pos:end="5725:33">si_errno</name></name> <operator pos:start="5725:35" pos:end="5725:35">=</operator> <literal type="number" pos:start="5725:37" pos:end="5725:37">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="5727:21" pos:end="5727:43"><expr pos:start="5727:21" pos:end="5727:42"><name pos:start="5727:21" pos:end="5727:32"><name pos:start="5727:21" pos:end="5727:24">info</name><operator pos:start="5727:25" pos:end="5727:25">.</operator><name pos:start="5727:26" pos:end="5727:32">si_code</name></name> <operator pos:start="5727:34" pos:end="5727:34">=</operator> <name pos:start="5727:36" pos:end="5727:42">si_code</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="5729:21" pos:end="5731:56"><expr pos:start="5729:21" pos:end="5731:55"><name pos:start="5729:21" pos:end="5729:50"><name pos:start="5729:21" pos:end="5729:24">info</name><operator pos:start="5729:25" pos:end="5729:25">.</operator><name pos:start="5729:26" pos:end="5729:34">_sifields</name><operator pos:start="5729:35" pos:end="5729:35">.</operator><name pos:start="5729:36" pos:end="5729:44">_sigfault</name><operator pos:start="5729:45" pos:end="5729:45">.</operator><name pos:start="5729:46" pos:end="5729:50">_addr</name></name>

                        <operator pos:start="5731:25" pos:end="5731:25">=</operator> <operator pos:start="5731:27" pos:end="5731:27">(</operator><operator pos:start="5731:28" pos:end="5731:28">(</operator><name pos:start="5731:29" pos:end="5731:40">CPUArchState</name> <operator pos:start="5731:42" pos:end="5731:42">*</operator><operator pos:start="5731:43" pos:end="5731:43">)</operator><name pos:start="5731:44" pos:end="5731:50">cpu_env</name><operator pos:start="5731:51" pos:end="5731:51">)</operator><operator pos:start="5731:52" pos:end="5731:53">-&gt;</operator><name pos:start="5731:54" pos:end="5731:55">pc</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="5733:21" pos:end="5733:80"><expr pos:start="5733:21" pos:end="5733:79"><call pos:start="5733:21" pos:end="5733:79"><name pos:start="5733:21" pos:end="5733:32">queue_signal</name><argument_list pos:start="5733:33" pos:end="5733:79">(<argument pos:start="5733:34" pos:end="5733:56"><expr pos:start="5733:34" pos:end="5733:56"><operator pos:start="5733:34" pos:end="5733:34">(</operator><name pos:start="5733:35" pos:end="5733:46">CPUArchState</name> <operator pos:start="5733:48" pos:end="5733:48">*</operator><operator pos:start="5733:49" pos:end="5733:49">)</operator><name pos:start="5733:50" pos:end="5733:56">cpu_env</name></expr></argument>, <argument pos:start="5733:59" pos:end="5733:71"><expr pos:start="5733:59" pos:end="5733:71"><name pos:start="5733:59" pos:end="5733:71"><name pos:start="5733:59" pos:end="5733:62">info</name><operator pos:start="5733:63" pos:end="5733:63">.</operator><name pos:start="5733:64" pos:end="5733:71">si_signo</name></name></expr></argument>, <argument pos:start="5733:74" pos:end="5733:78"><expr pos:start="5733:74" pos:end="5733:78"><operator pos:start="5733:74" pos:end="5733:74">&amp;</operator><name pos:start="5733:75" pos:end="5733:78">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <break pos:start="5739:13" pos:end="5739:18">break;</break>



          <comment type="block" pos:start="5743:11" pos:end="5753:12">/* case SSI_NVPAIRS:

             -- Used with SSIN_UACPROC to enable unaligned accesses.

             case SSI_IEEE_STATE_AT_SIGNAL:

             case SSI_IEEE_IGNORE_STATE_AT_SIGNAL:

             -- Not implemented in linux kernel

          */</comment>

        </block_content>}</block></switch>

        <break pos:start="5757:9" pos:end="5762:0">break;</break>

<cpp:endif pos:start="5759:1" pos:end="5759:6">#<cpp:directive pos:start="5759:2" pos:end="5759:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5761:1" pos:end="5761:32">#<cpp:directive pos:start="5761:2" pos:end="5761:6">ifdef</cpp:directive> <name pos:start="5761:8" pos:end="5761:32">TARGET_NR_osf_sigprocmask</name></cpp:ifdef>

    <comment type="block" pos:start="5763:5" pos:end="5763:26">/* Alpha specific.  */</comment>

    <case pos:start="5765:5" pos:end="5765:35">case <expr pos:start="5765:10" pos:end="5765:34"><name pos:start="5765:10" pos:end="5765:34">TARGET_NR_osf_sigprocmask</name></expr>:</case>

        <block pos:start="5767:9" pos:end="5815:9">{<block_content pos:start="5769:13" pos:end="5813:23">

            <decl_stmt pos:start="5769:13" pos:end="5769:27"><decl pos:start="5769:13" pos:end="5769:26"><type pos:start="5769:13" pos:end="5769:21"><name pos:start="5769:13" pos:end="5769:21">abi_ulong</name></type> <name pos:start="5769:23" pos:end="5769:26">mask</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5771:13" pos:end="5771:20"><decl pos:start="5771:13" pos:end="5771:19"><type pos:start="5771:13" pos:end="5771:15"><name pos:start="5771:13" pos:end="5771:15">int</name></type> <name pos:start="5771:17" pos:end="5771:19">how</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5773:13" pos:end="5773:33"><decl pos:start="5773:13" pos:end="5773:24"><type pos:start="5773:13" pos:end="5773:20"><name pos:start="5773:13" pos:end="5773:20">sigset_t</name></type> <name pos:start="5773:22" pos:end="5773:24">set</name></decl>, <decl pos:start="5773:27" pos:end="5773:32"><type ref="prev" pos:start="5773:13" pos:end="5773:20"/><name pos:start="5773:27" pos:end="5773:32">oldset</name></decl>;</decl_stmt>



            <switch pos:start="5777:13" pos:end="5803:13">switch<condition pos:start="5777:19" pos:end="5777:24">(<expr pos:start="5777:20" pos:end="5777:23"><name pos:start="5777:20" pos:end="5777:23">arg1</name></expr>)</condition> <block pos:start="5777:26" pos:end="5803:13">{<block_content pos:start="5779:13" pos:end="5801:26">

            <case pos:start="5779:13" pos:end="5779:34">case <expr pos:start="5779:18" pos:end="5779:33"><name pos:start="5779:18" pos:end="5779:33">TARGET_SIG_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="5781:17" pos:end="5781:32"><expr pos:start="5781:17" pos:end="5781:31"><name pos:start="5781:17" pos:end="5781:19">how</name> <operator pos:start="5781:21" pos:end="5781:21">=</operator> <name pos:start="5781:23" pos:end="5781:31">SIG_BLOCK</name></expr>;</expr_stmt>

                <break pos:start="5783:17" pos:end="5783:22">break;</break>

            <case pos:start="5785:13" pos:end="5785:36">case <expr pos:start="5785:18" pos:end="5785:35"><name pos:start="5785:18" pos:end="5785:35">TARGET_SIG_UNBLOCK</name></expr>:</case>

                <expr_stmt pos:start="5787:17" pos:end="5787:34"><expr pos:start="5787:17" pos:end="5787:33"><name pos:start="5787:17" pos:end="5787:19">how</name> <operator pos:start="5787:21" pos:end="5787:21">=</operator> <name pos:start="5787:23" pos:end="5787:33">SIG_UNBLOCK</name></expr>;</expr_stmt>

                <break pos:start="5789:17" pos:end="5789:22">break;</break>

            <case pos:start="5791:13" pos:end="5791:36">case <expr pos:start="5791:18" pos:end="5791:35"><name pos:start="5791:18" pos:end="5791:35">TARGET_SIG_SETMASK</name></expr>:</case>

                <expr_stmt pos:start="5793:17" pos:end="5793:34"><expr pos:start="5793:17" pos:end="5793:33"><name pos:start="5793:17" pos:end="5793:19">how</name> <operator pos:start="5793:21" pos:end="5793:21">=</operator> <name pos:start="5793:23" pos:end="5793:33">SIG_SETMASK</name></expr>;</expr_stmt>

                <break pos:start="5795:17" pos:end="5795:22">break;</break>

            <default pos:start="5797:13" pos:end="5797:20">default:</default>

                <expr_stmt pos:start="5799:17" pos:end="5799:37"><expr pos:start="5799:17" pos:end="5799:36"><name pos:start="5799:17" pos:end="5799:19">ret</name> <operator pos:start="5799:21" pos:end="5799:21">=</operator> <operator pos:start="5799:23" pos:end="5799:23">-</operator><name pos:start="5799:24" pos:end="5799:36">TARGET_EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="5801:17" pos:end="5801:26">goto <name pos:start="5801:22" pos:end="5801:25">fail</name>;</goto>

            </block_content>}</block></switch>

            <expr_stmt pos:start="5805:13" pos:end="5805:24"><expr pos:start="5805:13" pos:end="5805:23"><name pos:start="5805:13" pos:end="5805:16">mask</name> <operator pos:start="5805:18" pos:end="5805:18">=</operator> <name pos:start="5805:20" pos:end="5805:23">arg2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="5807:13" pos:end="5807:51"><expr pos:start="5807:13" pos:end="5807:50"><call pos:start="5807:13" pos:end="5807:50"><name pos:start="5807:13" pos:end="5807:37">target_to_host_old_sigset</name><argument_list pos:start="5807:38" pos:end="5807:50">(<argument pos:start="5807:39" pos:end="5807:42"><expr pos:start="5807:39" pos:end="5807:42"><operator pos:start="5807:39" pos:end="5807:39">&amp;</operator><name pos:start="5807:40" pos:end="5807:42">set</name></expr></argument>, <argument pos:start="5807:45" pos:end="5807:49"><expr pos:start="5807:45" pos:end="5807:49"><operator pos:start="5807:45" pos:end="5807:45">&amp;</operator><name pos:start="5807:46" pos:end="5807:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5809:13" pos:end="5809:44"><expr pos:start="5809:13" pos:end="5809:43"><call pos:start="5809:13" pos:end="5809:43"><name pos:start="5809:13" pos:end="5809:23">sigprocmask</name><argument_list pos:start="5809:24" pos:end="5809:43">(<argument pos:start="5809:25" pos:end="5809:27"><expr pos:start="5809:25" pos:end="5809:27"><name pos:start="5809:25" pos:end="5809:27">how</name></expr></argument>, <argument pos:start="5809:30" pos:end="5809:33"><expr pos:start="5809:30" pos:end="5809:33"><operator pos:start="5809:30" pos:end="5809:30">&amp;</operator><name pos:start="5809:31" pos:end="5809:33">set</name></expr></argument>, <argument pos:start="5809:36" pos:end="5809:42"><expr pos:start="5809:36" pos:end="5809:42"><operator pos:start="5809:36" pos:end="5809:36">&amp;</operator><name pos:start="5809:37" pos:end="5809:42">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5811:13" pos:end="5811:54"><expr pos:start="5811:13" pos:end="5811:53"><call pos:start="5811:13" pos:end="5811:53"><name pos:start="5811:13" pos:end="5811:37">host_to_target_old_sigset</name><argument_list pos:start="5811:38" pos:end="5811:53">(<argument pos:start="5811:39" pos:end="5811:43"><expr pos:start="5811:39" pos:end="5811:43"><operator pos:start="5811:39" pos:end="5811:39">&amp;</operator><name pos:start="5811:40" pos:end="5811:43">mask</name></expr></argument>, <argument pos:start="5811:46" pos:end="5811:52"><expr pos:start="5811:46" pos:end="5811:52"><operator pos:start="5811:46" pos:end="5811:46">&amp;</operator><name pos:start="5811:47" pos:end="5811:52">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5813:13" pos:end="5813:23"><expr pos:start="5813:13" pos:end="5813:22"><name pos:start="5813:13" pos:end="5813:15">ret</name> <operator pos:start="5813:17" pos:end="5813:17">=</operator> <name pos:start="5813:19" pos:end="5813:22">mask</name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5817:9" pos:end="5824:0">break;</break>

<cpp:endif pos:start="5819:1" pos:end="5819:6">#<cpp:directive pos:start="5819:2" pos:end="5819:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="5823:1" pos:end="5823:25">#<cpp:directive pos:start="5823:2" pos:end="5823:6">ifdef</cpp:directive> <name pos:start="5823:8" pos:end="5823:25">TARGET_NR_getgid32</name></cpp:ifdef>

    <case pos:start="5825:5" pos:end="5825:28">case <expr pos:start="5825:10" pos:end="5825:27"><name pos:start="5825:10" pos:end="5825:27">TARGET_NR_getgid32</name></expr>:</case>

        <expr_stmt pos:start="5827:9" pos:end="5827:34"><expr pos:start="5827:9" pos:end="5827:33"><name pos:start="5827:9" pos:end="5827:11">ret</name> <operator pos:start="5827:13" pos:end="5827:13">=</operator> <call pos:start="5827:15" pos:end="5827:33"><name pos:start="5827:15" pos:end="5827:23">get_errno</name><argument_list pos:start="5827:24" pos:end="5827:33">(<argument pos:start="5827:25" pos:end="5827:32"><expr pos:start="5827:25" pos:end="5827:32"><call pos:start="5827:25" pos:end="5827:32"><name pos:start="5827:25" pos:end="5827:30">getgid</name><argument_list pos:start="5827:31" pos:end="5827:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5829:9" pos:end="5834:0">break;</break>

<cpp:endif pos:start="5831:1" pos:end="5831:6">#<cpp:directive pos:start="5831:2" pos:end="5831:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5833:1" pos:end="5833:26">#<cpp:directive pos:start="5833:2" pos:end="5833:6">ifdef</cpp:directive> <name pos:start="5833:8" pos:end="5833:26">TARGET_NR_geteuid32</name></cpp:ifdef>

    <case pos:start="5835:5" pos:end="5835:29">case <expr pos:start="5835:10" pos:end="5835:28"><name pos:start="5835:10" pos:end="5835:28">TARGET_NR_geteuid32</name></expr>:</case>

        <expr_stmt pos:start="5837:9" pos:end="5837:35"><expr pos:start="5837:9" pos:end="5837:34"><name pos:start="5837:9" pos:end="5837:11">ret</name> <operator pos:start="5837:13" pos:end="5837:13">=</operator> <call pos:start="5837:15" pos:end="5837:34"><name pos:start="5837:15" pos:end="5837:23">get_errno</name><argument_list pos:start="5837:24" pos:end="5837:34">(<argument pos:start="5837:25" pos:end="5837:33"><expr pos:start="5837:25" pos:end="5837:33"><call pos:start="5837:25" pos:end="5837:33"><name pos:start="5837:25" pos:end="5837:31">geteuid</name><argument_list pos:start="5837:32" pos:end="5837:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5839:9" pos:end="5844:0">break;</break>

<cpp:endif pos:start="5841:1" pos:end="5841:6">#<cpp:directive pos:start="5841:2" pos:end="5841:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5843:1" pos:end="5843:26">#<cpp:directive pos:start="5843:2" pos:end="5843:6">ifdef</cpp:directive> <name pos:start="5843:8" pos:end="5843:26">TARGET_NR_getegid32</name></cpp:ifdef>

    <case pos:start="5845:5" pos:end="5845:29">case <expr pos:start="5845:10" pos:end="5845:28"><name pos:start="5845:10" pos:end="5845:28">TARGET_NR_getegid32</name></expr>:</case>

        <expr_stmt pos:start="5847:9" pos:end="5847:35"><expr pos:start="5847:9" pos:end="5847:34"><name pos:start="5847:9" pos:end="5847:11">ret</name> <operator pos:start="5847:13" pos:end="5847:13">=</operator> <call pos:start="5847:15" pos:end="5847:34"><name pos:start="5847:15" pos:end="5847:23">get_errno</name><argument_list pos:start="5847:24" pos:end="5847:34">(<argument pos:start="5847:25" pos:end="5847:33"><expr pos:start="5847:25" pos:end="5847:33"><call pos:start="5847:25" pos:end="5847:33"><name pos:start="5847:25" pos:end="5847:31">getegid</name><argument_list pos:start="5847:32" pos:end="5847:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5849:9" pos:end="5854:0">break;</break>

<cpp:endif pos:start="5851:1" pos:end="5851:6">#<cpp:directive pos:start="5851:2" pos:end="5851:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5853:1" pos:end="5853:27">#<cpp:directive pos:start="5853:2" pos:end="5853:6">ifdef</cpp:directive> <name pos:start="5853:8" pos:end="5853:27">TARGET_NR_setreuid32</name></cpp:ifdef>

    <case pos:start="5855:5" pos:end="5855:30">case <expr pos:start="5855:10" pos:end="5855:29"><name pos:start="5855:10" pos:end="5855:29">TARGET_NR_setreuid32</name></expr>:</case>

        <expr_stmt pos:start="5857:9" pos:end="5857:46"><expr pos:start="5857:9" pos:end="5857:45"><name pos:start="5857:9" pos:end="5857:11">ret</name> <operator pos:start="5857:13" pos:end="5857:13">=</operator> <call pos:start="5857:15" pos:end="5857:45"><name pos:start="5857:15" pos:end="5857:23">get_errno</name><argument_list pos:start="5857:24" pos:end="5857:45">(<argument pos:start="5857:25" pos:end="5857:44"><expr pos:start="5857:25" pos:end="5857:44"><call pos:start="5857:25" pos:end="5857:44"><name pos:start="5857:25" pos:end="5857:32">setreuid</name><argument_list pos:start="5857:33" pos:end="5857:44">(<argument pos:start="5857:34" pos:end="5857:37"><expr pos:start="5857:34" pos:end="5857:37"><name pos:start="5857:34" pos:end="5857:37">arg1</name></expr></argument>, <argument pos:start="5857:40" pos:end="5857:43"><expr pos:start="5857:40" pos:end="5857:43"><name pos:start="5857:40" pos:end="5857:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5859:9" pos:end="5864:0">break;</break>

<cpp:endif pos:start="5861:1" pos:end="5861:6">#<cpp:directive pos:start="5861:2" pos:end="5861:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5863:1" pos:end="5863:27">#<cpp:directive pos:start="5863:2" pos:end="5863:6">ifdef</cpp:directive> <name pos:start="5863:8" pos:end="5863:27">TARGET_NR_setregid32</name></cpp:ifdef>

    <case pos:start="5865:5" pos:end="5865:30">case <expr pos:start="5865:10" pos:end="5865:29"><name pos:start="5865:10" pos:end="5865:29">TARGET_NR_setregid32</name></expr>:</case>

        <expr_stmt pos:start="5867:9" pos:end="5867:46"><expr pos:start="5867:9" pos:end="5867:45"><name pos:start="5867:9" pos:end="5867:11">ret</name> <operator pos:start="5867:13" pos:end="5867:13">=</operator> <call pos:start="5867:15" pos:end="5867:45"><name pos:start="5867:15" pos:end="5867:23">get_errno</name><argument_list pos:start="5867:24" pos:end="5867:45">(<argument pos:start="5867:25" pos:end="5867:44"><expr pos:start="5867:25" pos:end="5867:44"><call pos:start="5867:25" pos:end="5867:44"><name pos:start="5867:25" pos:end="5867:32">setregid</name><argument_list pos:start="5867:33" pos:end="5867:44">(<argument pos:start="5867:34" pos:end="5867:37"><expr pos:start="5867:34" pos:end="5867:37"><name pos:start="5867:34" pos:end="5867:37">arg1</name></expr></argument>, <argument pos:start="5867:40" pos:end="5867:43"><expr pos:start="5867:40" pos:end="5867:43"><name pos:start="5867:40" pos:end="5867:43">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5869:9" pos:end="5874:0">break;</break>

<cpp:endif pos:start="5871:1" pos:end="5871:6">#<cpp:directive pos:start="5871:2" pos:end="5871:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5873:1" pos:end="5873:28">#<cpp:directive pos:start="5873:2" pos:end="5873:6">ifdef</cpp:directive> <name pos:start="5873:8" pos:end="5873:28">TARGET_NR_getgroups32</name></cpp:ifdef>

    <case pos:start="5875:5" pos:end="5875:31">case <expr pos:start="5875:10" pos:end="5875:30"><name pos:start="5875:10" pos:end="5875:30">TARGET_NR_getgroups32</name></expr>:</case>

        <block pos:start="5877:9" pos:end="5917:9">{<block_content pos:start="5879:13" pos:end="5915:13">

            <decl_stmt pos:start="5879:13" pos:end="5879:34"><decl pos:start="5879:13" pos:end="5879:33"><type pos:start="5879:13" pos:end="5879:15"><name pos:start="5879:13" pos:end="5879:15">int</name></type> <name pos:start="5879:17" pos:end="5879:26">gidsetsize</name> <init pos:start="5879:28" pos:end="5879:33">= <expr pos:start="5879:30" pos:end="5879:33"><name pos:start="5879:30" pos:end="5879:33">arg1</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="5881:13" pos:end="5881:39"><decl pos:start="5881:13" pos:end="5881:38"><type pos:start="5881:13" pos:end="5881:22"><name pos:start="5881:13" pos:end="5881:20">uint32_t</name> <modifier pos:start="5881:22" pos:end="5881:22">*</modifier></type><name pos:start="5881:23" pos:end="5881:38">target_grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5883:13" pos:end="5883:29"><decl pos:start="5883:13" pos:end="5883:28"><type pos:start="5883:13" pos:end="5883:19"><name pos:start="5883:13" pos:end="5883:17">gid_t</name> <modifier pos:start="5883:19" pos:end="5883:19">*</modifier></type><name pos:start="5883:20" pos:end="5883:28">grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5885:13" pos:end="5885:18"><decl pos:start="5885:13" pos:end="5885:17"><type pos:start="5885:13" pos:end="5885:15"><name pos:start="5885:13" pos:end="5885:15">int</name></type> <name pos:start="5885:17" pos:end="5885:17">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5889:13" pos:end="5889:59"><expr pos:start="5889:13" pos:end="5889:58"><name pos:start="5889:13" pos:end="5889:21">grouplist</name> <operator pos:start="5889:23" pos:end="5889:23">=</operator> <call pos:start="5889:25" pos:end="5889:58"><name pos:start="5889:25" pos:end="5889:30">alloca</name><argument_list pos:start="5889:31" pos:end="5889:58">(<argument pos:start="5889:32" pos:end="5889:57"><expr pos:start="5889:32" pos:end="5889:57"><name pos:start="5889:32" pos:end="5889:41">gidsetsize</name> <operator pos:start="5889:43" pos:end="5889:43">*</operator> <sizeof pos:start="5889:45" pos:end="5889:57">sizeof<argument_list pos:start="5889:51" pos:end="5889:57">(<argument pos:start="5889:52" pos:end="5889:56"><expr pos:start="5889:52" pos:end="5889:56"><name pos:start="5889:52" pos:end="5889:56">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5891:13" pos:end="5891:62"><expr pos:start="5891:13" pos:end="5891:61"><name pos:start="5891:13" pos:end="5891:15">ret</name> <operator pos:start="5891:17" pos:end="5891:17">=</operator> <call pos:start="5891:19" pos:end="5891:61"><name pos:start="5891:19" pos:end="5891:27">get_errno</name><argument_list pos:start="5891:28" pos:end="5891:61">(<argument pos:start="5891:29" pos:end="5891:60"><expr pos:start="5891:29" pos:end="5891:60"><call pos:start="5891:29" pos:end="5891:60"><name pos:start="5891:29" pos:end="5891:37">getgroups</name><argument_list pos:start="5891:38" pos:end="5891:60">(<argument pos:start="5891:39" pos:end="5891:48"><expr pos:start="5891:39" pos:end="5891:48"><name pos:start="5891:39" pos:end="5891:48">gidsetsize</name></expr></argument>, <argument pos:start="5891:51" pos:end="5891:59"><expr pos:start="5891:51" pos:end="5891:59"><name pos:start="5891:51" pos:end="5891:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5893:13" pos:end="5895:22"><if pos:start="5893:13" pos:end="5895:22">if <condition pos:start="5893:16" pos:end="5893:32">(<expr pos:start="5893:17" pos:end="5893:31"><name pos:start="5893:17" pos:end="5893:26">gidsetsize</name> <operator pos:start="5893:28" pos:end="5893:29">==</operator> <literal type="number" pos:start="5893:31" pos:end="5893:31">0</literal></expr>)</condition><block type="pseudo" pos:start="5895:17" pos:end="5895:22"><block_content pos:start="5895:17" pos:end="5895:22">

                <break pos:start="5895:17" pos:end="5895:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="5897:13" pos:end="5915:13"><if pos:start="5897:13" pos:end="5915:13">if <condition pos:start="5897:16" pos:end="5897:31">(<expr pos:start="5897:17" pos:end="5897:30"><operator pos:start="5897:17" pos:end="5897:17">!</operator><call pos:start="5897:18" pos:end="5897:30"><name pos:start="5897:18" pos:end="5897:25">is_error</name><argument_list pos:start="5897:26" pos:end="5897:30">(<argument pos:start="5897:27" pos:end="5897:29"><expr pos:start="5897:27" pos:end="5897:29"><name pos:start="5897:27" pos:end="5897:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5897:33" pos:end="5915:13">{<block_content pos:start="5899:17" pos:end="5913:68">

                <expr_stmt pos:start="5899:17" pos:end="5899:84"><expr pos:start="5899:17" pos:end="5899:83"><name pos:start="5899:17" pos:end="5899:32">target_grouplist</name> <operator pos:start="5899:34" pos:end="5899:34">=</operator> <call pos:start="5899:36" pos:end="5899:83"><name pos:start="5899:36" pos:end="5899:44">lock_user</name><argument_list pos:start="5899:45" pos:end="5899:83">(<argument pos:start="5899:46" pos:end="5899:57"><expr pos:start="5899:46" pos:end="5899:57"><name pos:start="5899:46" pos:end="5899:57">VERIFY_WRITE</name></expr></argument>, <argument pos:start="5899:60" pos:end="5899:63"><expr pos:start="5899:60" pos:end="5899:63"><name pos:start="5899:60" pos:end="5899:63">arg2</name></expr></argument>, <argument pos:start="5899:66" pos:end="5899:79"><expr pos:start="5899:66" pos:end="5899:79"><name pos:start="5899:66" pos:end="5899:75">gidsetsize</name> <operator pos:start="5899:77" pos:end="5899:77">*</operator> <literal type="number" pos:start="5899:79" pos:end="5899:79">4</literal></expr></argument>, <argument pos:start="5899:82" pos:end="5899:82"><expr pos:start="5899:82" pos:end="5899:82"><literal type="number" pos:start="5899:82" pos:end="5899:82">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="5901:17" pos:end="5907:17"><if pos:start="5901:17" pos:end="5907:17">if <condition pos:start="5901:20" pos:end="5901:38">(<expr pos:start="5901:21" pos:end="5901:37"><operator pos:start="5901:21" pos:end="5901:21">!</operator><name pos:start="5901:22" pos:end="5901:37">target_grouplist</name></expr>)</condition> <block pos:start="5901:40" pos:end="5907:17">{<block_content pos:start="5903:21" pos:end="5905:30">

                    <expr_stmt pos:start="5903:21" pos:end="5903:41"><expr pos:start="5903:21" pos:end="5903:40"><name pos:start="5903:21" pos:end="5903:23">ret</name> <operator pos:start="5903:25" pos:end="5903:25">=</operator> <operator pos:start="5903:27" pos:end="5903:27">-</operator><name pos:start="5903:28" pos:end="5903:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <goto pos:start="5905:21" pos:end="5905:30">goto <name pos:start="5905:26" pos:end="5905:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <for pos:start="5909:17" pos:end="5911:64">for<control pos:start="5909:20" pos:end="5909:39">(<init pos:start="5909:21" pos:end="5909:26"><expr pos:start="5909:21" pos:end="5909:25"><name pos:start="5909:21" pos:end="5909:21">i</name> <operator pos:start="5909:23" pos:end="5909:23">=</operator> <literal type="number" pos:start="5909:25" pos:end="5909:25">0</literal></expr>;</init><condition pos:start="5909:27" pos:end="5909:34"><expr pos:start="5909:27" pos:end="5909:33"><name pos:start="5909:27" pos:end="5909:27">i</name> <operator pos:start="5909:29" pos:end="5909:29">&lt;</operator> <name pos:start="5909:31" pos:end="5909:33">ret</name></expr>;</condition> <incr pos:start="5909:36" pos:end="5909:38"><expr pos:start="5909:36" pos:end="5909:38"><name pos:start="5909:36" pos:end="5909:36">i</name><operator pos:start="5909:37" pos:end="5909:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="5911:21" pos:end="5911:64"><block_content pos:start="5911:21" pos:end="5911:64">

                    <expr_stmt pos:start="5911:21" pos:end="5911:64"><expr pos:start="5911:21" pos:end="5911:63"><name pos:start="5911:21" pos:end="5911:39"><name pos:start="5911:21" pos:end="5911:36">target_grouplist</name><index pos:start="5911:37" pos:end="5911:39">[<expr pos:start="5911:38" pos:end="5911:38"><name pos:start="5911:38" pos:end="5911:38">i</name></expr>]</index></name> <operator pos:start="5911:41" pos:end="5911:41">=</operator> <call pos:start="5911:43" pos:end="5911:63"><name pos:start="5911:43" pos:end="5911:49">tswap32</name><argument_list pos:start="5911:50" pos:end="5911:63">(<argument pos:start="5911:51" pos:end="5911:62"><expr pos:start="5911:51" pos:end="5911:62"><name pos:start="5911:51" pos:end="5911:62"><name pos:start="5911:51" pos:end="5911:59">grouplist</name><index pos:start="5911:60" pos:end="5911:62">[<expr pos:start="5911:61" pos:end="5911:61"><name pos:start="5911:61" pos:end="5911:61">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="5913:17" pos:end="5913:68"><expr pos:start="5913:17" pos:end="5913:67"><call pos:start="5913:17" pos:end="5913:67"><name pos:start="5913:17" pos:end="5913:27">unlock_user</name><argument_list pos:start="5913:28" pos:end="5913:67">(<argument pos:start="5913:29" pos:end="5913:44"><expr pos:start="5913:29" pos:end="5913:44"><name pos:start="5913:29" pos:end="5913:44">target_grouplist</name></expr></argument>, <argument pos:start="5913:47" pos:end="5913:50"><expr pos:start="5913:47" pos:end="5913:50"><name pos:start="5913:47" pos:end="5913:50">arg2</name></expr></argument>, <argument pos:start="5913:53" pos:end="5913:66"><expr pos:start="5913:53" pos:end="5913:66"><name pos:start="5913:53" pos:end="5913:62">gidsetsize</name> <operator pos:start="5913:64" pos:end="5913:64">*</operator> <literal type="number" pos:start="5913:66" pos:end="5913:66">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="5919:9" pos:end="5924:0">break;</break>

<cpp:endif pos:start="5921:1" pos:end="5921:6">#<cpp:directive pos:start="5921:2" pos:end="5921:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5923:1" pos:end="5923:28">#<cpp:directive pos:start="5923:2" pos:end="5923:6">ifdef</cpp:directive> <name pos:start="5923:8" pos:end="5923:28">TARGET_NR_setgroups32</name></cpp:ifdef>

    <case pos:start="5925:5" pos:end="5925:31">case <expr pos:start="5925:10" pos:end="5925:30"><name pos:start="5925:10" pos:end="5925:30">TARGET_NR_setgroups32</name></expr>:</case>

        <block pos:start="5927:9" pos:end="5959:9">{<block_content pos:start="5929:13" pos:end="5957:62">

            <decl_stmt pos:start="5929:13" pos:end="5929:34"><decl pos:start="5929:13" pos:end="5929:33"><type pos:start="5929:13" pos:end="5929:15"><name pos:start="5929:13" pos:end="5929:15">int</name></type> <name pos:start="5929:17" pos:end="5929:26">gidsetsize</name> <init pos:start="5929:28" pos:end="5929:33">= <expr pos:start="5929:30" pos:end="5929:33"><name pos:start="5929:30" pos:end="5929:33">arg1</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="5931:13" pos:end="5931:39"><decl pos:start="5931:13" pos:end="5931:38"><type pos:start="5931:13" pos:end="5931:22"><name pos:start="5931:13" pos:end="5931:20">uint32_t</name> <modifier pos:start="5931:22" pos:end="5931:22">*</modifier></type><name pos:start="5931:23" pos:end="5931:38">target_grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5933:13" pos:end="5933:29"><decl pos:start="5933:13" pos:end="5933:28"><type pos:start="5933:13" pos:end="5933:19"><name pos:start="5933:13" pos:end="5933:17">gid_t</name> <modifier pos:start="5933:19" pos:end="5933:19">*</modifier></type><name pos:start="5933:20" pos:end="5933:28">grouplist</name></decl>;</decl_stmt>

            <decl_stmt pos:start="5935:13" pos:end="5935:18"><decl pos:start="5935:13" pos:end="5935:17"><type pos:start="5935:13" pos:end="5935:15"><name pos:start="5935:13" pos:end="5935:15">int</name></type> <name pos:start="5935:17" pos:end="5935:17">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="5939:13" pos:end="5939:59"><expr pos:start="5939:13" pos:end="5939:58"><name pos:start="5939:13" pos:end="5939:21">grouplist</name> <operator pos:start="5939:23" pos:end="5939:23">=</operator> <call pos:start="5939:25" pos:end="5939:58"><name pos:start="5939:25" pos:end="5939:30">alloca</name><argument_list pos:start="5939:31" pos:end="5939:58">(<argument pos:start="5939:32" pos:end="5939:57"><expr pos:start="5939:32" pos:end="5939:57"><name pos:start="5939:32" pos:end="5939:41">gidsetsize</name> <operator pos:start="5939:43" pos:end="5939:43">*</operator> <sizeof pos:start="5939:45" pos:end="5939:57">sizeof<argument_list pos:start="5939:51" pos:end="5939:57">(<argument pos:start="5939:52" pos:end="5939:56"><expr pos:start="5939:52" pos:end="5939:56"><name pos:start="5939:52" pos:end="5939:56">gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5941:13" pos:end="5941:79"><expr pos:start="5941:13" pos:end="5941:78"><name pos:start="5941:13" pos:end="5941:28">target_grouplist</name> <operator pos:start="5941:30" pos:end="5941:30">=</operator> <call pos:start="5941:32" pos:end="5941:78"><name pos:start="5941:32" pos:end="5941:40">lock_user</name><argument_list pos:start="5941:41" pos:end="5941:78">(<argument pos:start="5941:42" pos:end="5941:52"><expr pos:start="5941:42" pos:end="5941:52"><name pos:start="5941:42" pos:end="5941:52">VERIFY_READ</name></expr></argument>, <argument pos:start="5941:55" pos:end="5941:58"><expr pos:start="5941:55" pos:end="5941:58"><name pos:start="5941:55" pos:end="5941:58">arg2</name></expr></argument>, <argument pos:start="5941:61" pos:end="5941:74"><expr pos:start="5941:61" pos:end="5941:74"><name pos:start="5941:61" pos:end="5941:70">gidsetsize</name> <operator pos:start="5941:72" pos:end="5941:72">*</operator> <literal type="number" pos:start="5941:74" pos:end="5941:74">4</literal></expr></argument>, <argument pos:start="5941:77" pos:end="5941:77"><expr pos:start="5941:77" pos:end="5941:77"><literal type="number" pos:start="5941:77" pos:end="5941:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5943:13" pos:end="5949:13"><if pos:start="5943:13" pos:end="5949:13">if <condition pos:start="5943:16" pos:end="5943:34">(<expr pos:start="5943:17" pos:end="5943:33"><operator pos:start="5943:17" pos:end="5943:17">!</operator><name pos:start="5943:18" pos:end="5943:33">target_grouplist</name></expr>)</condition> <block pos:start="5943:36" pos:end="5949:13">{<block_content pos:start="5945:17" pos:end="5947:26">

                <expr_stmt pos:start="5945:17" pos:end="5945:37"><expr pos:start="5945:17" pos:end="5945:36"><name pos:start="5945:17" pos:end="5945:19">ret</name> <operator pos:start="5945:21" pos:end="5945:21">=</operator> <operator pos:start="5945:23" pos:end="5945:23">-</operator><name pos:start="5945:24" pos:end="5945:36">TARGET_EFAULT</name></expr>;</expr_stmt>

                <goto pos:start="5947:17" pos:end="5947:26">goto <name pos:start="5947:22" pos:end="5947:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <for pos:start="5951:13" pos:end="5953:60">for<control pos:start="5951:16" pos:end="5951:42">(<init pos:start="5951:17" pos:end="5951:22"><expr pos:start="5951:17" pos:end="5951:21"><name pos:start="5951:17" pos:end="5951:17">i</name> <operator pos:start="5951:19" pos:end="5951:19">=</operator> <literal type="number" pos:start="5951:21" pos:end="5951:21">0</literal></expr>;</init><condition pos:start="5951:23" pos:end="5951:37"><expr pos:start="5951:23" pos:end="5951:36"><name pos:start="5951:23" pos:end="5951:23">i</name> <operator pos:start="5951:25" pos:end="5951:25">&lt;</operator> <name pos:start="5951:27" pos:end="5951:36">gidsetsize</name></expr>;</condition> <incr pos:start="5951:39" pos:end="5951:41"><expr pos:start="5951:39" pos:end="5951:41"><name pos:start="5951:39" pos:end="5951:39">i</name><operator pos:start="5951:40" pos:end="5951:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="5953:17" pos:end="5953:60"><block_content pos:start="5953:17" pos:end="5953:60">

                <expr_stmt pos:start="5953:17" pos:end="5953:60"><expr pos:start="5953:17" pos:end="5953:59"><name pos:start="5953:17" pos:end="5953:28"><name pos:start="5953:17" pos:end="5953:25">grouplist</name><index pos:start="5953:26" pos:end="5953:28">[<expr pos:start="5953:27" pos:end="5953:27"><name pos:start="5953:27" pos:end="5953:27">i</name></expr>]</index></name> <operator pos:start="5953:30" pos:end="5953:30">=</operator> <call pos:start="5953:32" pos:end="5953:59"><name pos:start="5953:32" pos:end="5953:38">tswap32</name><argument_list pos:start="5953:39" pos:end="5953:59">(<argument pos:start="5953:40" pos:end="5953:58"><expr pos:start="5953:40" pos:end="5953:58"><name pos:start="5953:40" pos:end="5953:58"><name pos:start="5953:40" pos:end="5953:55">target_grouplist</name><index pos:start="5953:56" pos:end="5953:58">[<expr pos:start="5953:57" pos:end="5953:57"><name pos:start="5953:57" pos:end="5953:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="5955:13" pos:end="5955:51"><expr pos:start="5955:13" pos:end="5955:50"><call pos:start="5955:13" pos:end="5955:50"><name pos:start="5955:13" pos:end="5955:23">unlock_user</name><argument_list pos:start="5955:24" pos:end="5955:50">(<argument pos:start="5955:25" pos:end="5955:40"><expr pos:start="5955:25" pos:end="5955:40"><name pos:start="5955:25" pos:end="5955:40">target_grouplist</name></expr></argument>, <argument pos:start="5955:43" pos:end="5955:46"><expr pos:start="5955:43" pos:end="5955:46"><name pos:start="5955:43" pos:end="5955:46">arg2</name></expr></argument>, <argument pos:start="5955:49" pos:end="5955:49"><expr pos:start="5955:49" pos:end="5955:49"><literal type="number" pos:start="5955:49" pos:end="5955:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="5957:13" pos:end="5957:62"><expr pos:start="5957:13" pos:end="5957:61"><name pos:start="5957:13" pos:end="5957:15">ret</name> <operator pos:start="5957:17" pos:end="5957:17">=</operator> <call pos:start="5957:19" pos:end="5957:61"><name pos:start="5957:19" pos:end="5957:27">get_errno</name><argument_list pos:start="5957:28" pos:end="5957:61">(<argument pos:start="5957:29" pos:end="5957:60"><expr pos:start="5957:29" pos:end="5957:60"><call pos:start="5957:29" pos:end="5957:60"><name pos:start="5957:29" pos:end="5957:37">setgroups</name><argument_list pos:start="5957:38" pos:end="5957:60">(<argument pos:start="5957:39" pos:end="5957:48"><expr pos:start="5957:39" pos:end="5957:48"><name pos:start="5957:39" pos:end="5957:48">gidsetsize</name></expr></argument>, <argument pos:start="5957:51" pos:end="5957:59"><expr pos:start="5957:51" pos:end="5957:59"><name pos:start="5957:51" pos:end="5957:59">grouplist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="5961:9" pos:end="5966:0">break;</break>

<cpp:endif pos:start="5963:1" pos:end="5963:6">#<cpp:directive pos:start="5963:2" pos:end="5963:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5965:1" pos:end="5965:25">#<cpp:directive pos:start="5965:2" pos:end="5965:6">ifdef</cpp:directive> <name pos:start="5965:8" pos:end="5965:25">TARGET_NR_fchown32</name></cpp:ifdef>

    <case pos:start="5967:5" pos:end="5967:28">case <expr pos:start="5967:10" pos:end="5967:27"><name pos:start="5967:10" pos:end="5967:27">TARGET_NR_fchown32</name></expr>:</case>

        <expr_stmt pos:start="5969:9" pos:end="5969:50"><expr pos:start="5969:9" pos:end="5969:49"><name pos:start="5969:9" pos:end="5969:11">ret</name> <operator pos:start="5969:13" pos:end="5969:13">=</operator> <call pos:start="5969:15" pos:end="5969:49"><name pos:start="5969:15" pos:end="5969:23">get_errno</name><argument_list pos:start="5969:24" pos:end="5969:49">(<argument pos:start="5969:25" pos:end="5969:48"><expr pos:start="5969:25" pos:end="5969:48"><call pos:start="5969:25" pos:end="5969:48"><name pos:start="5969:25" pos:end="5969:30">fchown</name><argument_list pos:start="5969:31" pos:end="5969:48">(<argument pos:start="5969:32" pos:end="5969:35"><expr pos:start="5969:32" pos:end="5969:35"><name pos:start="5969:32" pos:end="5969:35">arg1</name></expr></argument>, <argument pos:start="5969:38" pos:end="5969:41"><expr pos:start="5969:38" pos:end="5969:41"><name pos:start="5969:38" pos:end="5969:41">arg2</name></expr></argument>, <argument pos:start="5969:44" pos:end="5969:47"><expr pos:start="5969:44" pos:end="5969:47"><name pos:start="5969:44" pos:end="5969:47">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5971:9" pos:end="5976:0">break;</break>

<cpp:endif pos:start="5973:1" pos:end="5973:6">#<cpp:directive pos:start="5973:2" pos:end="5973:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5975:1" pos:end="5975:28">#<cpp:directive pos:start="5975:2" pos:end="5975:6">ifdef</cpp:directive> <name pos:start="5975:8" pos:end="5975:28">TARGET_NR_setresuid32</name></cpp:ifdef>

    <case pos:start="5977:5" pos:end="5977:31">case <expr pos:start="5977:10" pos:end="5977:30"><name pos:start="5977:10" pos:end="5977:30">TARGET_NR_setresuid32</name></expr>:</case>

        <expr_stmt pos:start="5979:9" pos:end="5979:53"><expr pos:start="5979:9" pos:end="5979:52"><name pos:start="5979:9" pos:end="5979:11">ret</name> <operator pos:start="5979:13" pos:end="5979:13">=</operator> <call pos:start="5979:15" pos:end="5979:52"><name pos:start="5979:15" pos:end="5979:23">get_errno</name><argument_list pos:start="5979:24" pos:end="5979:52">(<argument pos:start="5979:25" pos:end="5979:51"><expr pos:start="5979:25" pos:end="5979:51"><call pos:start="5979:25" pos:end="5979:51"><name pos:start="5979:25" pos:end="5979:33">setresuid</name><argument_list pos:start="5979:34" pos:end="5979:51">(<argument pos:start="5979:35" pos:end="5979:38"><expr pos:start="5979:35" pos:end="5979:38"><name pos:start="5979:35" pos:end="5979:38">arg1</name></expr></argument>, <argument pos:start="5979:41" pos:end="5979:44"><expr pos:start="5979:41" pos:end="5979:44"><name pos:start="5979:41" pos:end="5979:44">arg2</name></expr></argument>, <argument pos:start="5979:47" pos:end="5979:50"><expr pos:start="5979:47" pos:end="5979:50"><name pos:start="5979:47" pos:end="5979:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="5981:9" pos:end="5986:0">break;</break>

<cpp:endif pos:start="5983:1" pos:end="5983:6">#<cpp:directive pos:start="5983:2" pos:end="5983:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="5985:1" pos:end="5985:28">#<cpp:directive pos:start="5985:2" pos:end="5985:6">ifdef</cpp:directive> <name pos:start="5985:8" pos:end="5985:28">TARGET_NR_getresuid32</name></cpp:ifdef>

    <case pos:start="5987:5" pos:end="5987:31">case <expr pos:start="5987:10" pos:end="5987:30"><name pos:start="5987:10" pos:end="5987:30">TARGET_NR_getresuid32</name></expr>:</case>

        <block pos:start="5989:9" pos:end="6007:9">{<block_content pos:start="5991:13" pos:end="6005:13">

            <decl_stmt pos:start="5991:13" pos:end="5991:35"><decl pos:start="5991:13" pos:end="5991:22"><type pos:start="5991:13" pos:end="5991:17"><name pos:start="5991:13" pos:end="5991:17">uid_t</name></type> <name pos:start="5991:19" pos:end="5991:22">ruid</name></decl>, <decl pos:start="5991:25" pos:end="5991:28"><type ref="prev" pos:start="5991:13" pos:end="5991:17"/><name pos:start="5991:25" pos:end="5991:28">euid</name></decl>, <decl pos:start="5991:31" pos:end="5991:34"><type ref="prev" pos:start="5991:13" pos:end="5991:17"/><name pos:start="5991:31" pos:end="5991:34">suid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="5993:13" pos:end="5993:60"><expr pos:start="5993:13" pos:end="5993:59"><name pos:start="5993:13" pos:end="5993:15">ret</name> <operator pos:start="5993:17" pos:end="5993:17">=</operator> <call pos:start="5993:19" pos:end="5993:59"><name pos:start="5993:19" pos:end="5993:27">get_errno</name><argument_list pos:start="5993:28" pos:end="5993:59">(<argument pos:start="5993:29" pos:end="5993:58"><expr pos:start="5993:29" pos:end="5993:58"><call pos:start="5993:29" pos:end="5993:58"><name pos:start="5993:29" pos:end="5993:37">getresuid</name><argument_list pos:start="5993:38" pos:end="5993:58">(<argument pos:start="5993:39" pos:end="5993:43"><expr pos:start="5993:39" pos:end="5993:43"><operator pos:start="5993:39" pos:end="5993:39">&amp;</operator><name pos:start="5993:40" pos:end="5993:43">ruid</name></expr></argument>, <argument pos:start="5993:46" pos:end="5993:50"><expr pos:start="5993:46" pos:end="5993:50"><operator pos:start="5993:46" pos:end="5993:46">&amp;</operator><name pos:start="5993:47" pos:end="5993:50">euid</name></expr></argument>, <argument pos:start="5993:53" pos:end="5993:57"><expr pos:start="5993:53" pos:end="5993:57"><operator pos:start="5993:53" pos:end="5993:53">&amp;</operator><name pos:start="5993:54" pos:end="5993:57">suid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="5995:13" pos:end="6005:13"><if pos:start="5995:13" pos:end="6005:13">if <condition pos:start="5995:16" pos:end="5995:31">(<expr pos:start="5995:17" pos:end="5995:30"><operator pos:start="5995:17" pos:end="5995:17">!</operator><call pos:start="5995:18" pos:end="5995:30"><name pos:start="5995:18" pos:end="5995:25">is_error</name><argument_list pos:start="5995:26" pos:end="5995:30">(<argument pos:start="5995:27" pos:end="5995:29"><expr pos:start="5995:27" pos:end="5995:29"><name pos:start="5995:27" pos:end="5995:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5995:33" pos:end="6005:13">{<block_content pos:start="5997:17" pos:end="6003:32">

                <if_stmt pos:start="5997:17" pos:end="6003:32"><if pos:start="5997:17" pos:end="6003:32">if <condition pos:start="5997:20" pos:end="6001:48">(<expr pos:start="5997:21" pos:end="6001:47"><call pos:start="5997:21" pos:end="5997:44"><name pos:start="5997:21" pos:end="5997:32">put_user_u32</name><argument_list pos:start="5997:33" pos:end="5997:44">(<argument pos:start="5997:34" pos:end="5997:37"><expr pos:start="5997:34" pos:end="5997:37"><name pos:start="5997:34" pos:end="5997:37">ruid</name></expr></argument>, <argument pos:start="5997:40" pos:end="5997:43"><expr pos:start="5997:40" pos:end="5997:43"><name pos:start="5997:40" pos:end="5997:43">arg1</name></expr></argument>)</argument_list></call>

                    <operator pos:start="5999:21" pos:end="5999:22">||</operator> <call pos:start="5999:24" pos:end="5999:47"><name pos:start="5999:24" pos:end="5999:35">put_user_u32</name><argument_list pos:start="5999:36" pos:end="5999:47">(<argument pos:start="5999:37" pos:end="5999:40"><expr pos:start="5999:37" pos:end="5999:40"><name pos:start="5999:37" pos:end="5999:40">euid</name></expr></argument>, <argument pos:start="5999:43" pos:end="5999:46"><expr pos:start="5999:43" pos:end="5999:46"><name pos:start="5999:43" pos:end="5999:46">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="6001:21" pos:end="6001:22">||</operator> <call pos:start="6001:24" pos:end="6001:47"><name pos:start="6001:24" pos:end="6001:35">put_user_u32</name><argument_list pos:start="6001:36" pos:end="6001:47">(<argument pos:start="6001:37" pos:end="6001:40"><expr pos:start="6001:37" pos:end="6001:40"><name pos:start="6001:37" pos:end="6001:40">suid</name></expr></argument>, <argument pos:start="6001:43" pos:end="6001:46"><expr pos:start="6001:43" pos:end="6001:46"><name pos:start="6001:43" pos:end="6001:46">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6003:21" pos:end="6003:32"><block_content pos:start="6003:21" pos:end="6003:32">

                    <goto pos:start="6003:21" pos:end="6003:32">goto <name pos:start="6003:26" pos:end="6003:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="6009:9" pos:end="6014:0">break;</break>

<cpp:endif pos:start="6011:1" pos:end="6011:6">#<cpp:directive pos:start="6011:2" pos:end="6011:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6013:1" pos:end="6013:28">#<cpp:directive pos:start="6013:2" pos:end="6013:6">ifdef</cpp:directive> <name pos:start="6013:8" pos:end="6013:28">TARGET_NR_setresgid32</name></cpp:ifdef>

    <case pos:start="6015:5" pos:end="6015:31">case <expr pos:start="6015:10" pos:end="6015:30"><name pos:start="6015:10" pos:end="6015:30">TARGET_NR_setresgid32</name></expr>:</case>

        <expr_stmt pos:start="6017:9" pos:end="6017:53"><expr pos:start="6017:9" pos:end="6017:52"><name pos:start="6017:9" pos:end="6017:11">ret</name> <operator pos:start="6017:13" pos:end="6017:13">=</operator> <call pos:start="6017:15" pos:end="6017:52"><name pos:start="6017:15" pos:end="6017:23">get_errno</name><argument_list pos:start="6017:24" pos:end="6017:52">(<argument pos:start="6017:25" pos:end="6017:51"><expr pos:start="6017:25" pos:end="6017:51"><call pos:start="6017:25" pos:end="6017:51"><name pos:start="6017:25" pos:end="6017:33">setresgid</name><argument_list pos:start="6017:34" pos:end="6017:51">(<argument pos:start="6017:35" pos:end="6017:38"><expr pos:start="6017:35" pos:end="6017:38"><name pos:start="6017:35" pos:end="6017:38">arg1</name></expr></argument>, <argument pos:start="6017:41" pos:end="6017:44"><expr pos:start="6017:41" pos:end="6017:44"><name pos:start="6017:41" pos:end="6017:44">arg2</name></expr></argument>, <argument pos:start="6017:47" pos:end="6017:50"><expr pos:start="6017:47" pos:end="6017:50"><name pos:start="6017:47" pos:end="6017:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6019:9" pos:end="6024:0">break;</break>

<cpp:endif pos:start="6021:1" pos:end="6021:6">#<cpp:directive pos:start="6021:2" pos:end="6021:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6023:1" pos:end="6023:28">#<cpp:directive pos:start="6023:2" pos:end="6023:6">ifdef</cpp:directive> <name pos:start="6023:8" pos:end="6023:28">TARGET_NR_getresgid32</name></cpp:ifdef>

    <case pos:start="6025:5" pos:end="6025:31">case <expr pos:start="6025:10" pos:end="6025:30"><name pos:start="6025:10" pos:end="6025:30">TARGET_NR_getresgid32</name></expr>:</case>

        <block pos:start="6027:9" pos:end="6045:9">{<block_content pos:start="6029:13" pos:end="6043:13">

            <decl_stmt pos:start="6029:13" pos:end="6029:35"><decl pos:start="6029:13" pos:end="6029:22"><type pos:start="6029:13" pos:end="6029:17"><name pos:start="6029:13" pos:end="6029:17">gid_t</name></type> <name pos:start="6029:19" pos:end="6029:22">rgid</name></decl>, <decl pos:start="6029:25" pos:end="6029:28"><type ref="prev" pos:start="6029:13" pos:end="6029:17"/><name pos:start="6029:25" pos:end="6029:28">egid</name></decl>, <decl pos:start="6029:31" pos:end="6029:34"><type ref="prev" pos:start="6029:13" pos:end="6029:17"/><name pos:start="6029:31" pos:end="6029:34">sgid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="6031:13" pos:end="6031:60"><expr pos:start="6031:13" pos:end="6031:59"><name pos:start="6031:13" pos:end="6031:15">ret</name> <operator pos:start="6031:17" pos:end="6031:17">=</operator> <call pos:start="6031:19" pos:end="6031:59"><name pos:start="6031:19" pos:end="6031:27">get_errno</name><argument_list pos:start="6031:28" pos:end="6031:59">(<argument pos:start="6031:29" pos:end="6031:58"><expr pos:start="6031:29" pos:end="6031:58"><call pos:start="6031:29" pos:end="6031:58"><name pos:start="6031:29" pos:end="6031:37">getresgid</name><argument_list pos:start="6031:38" pos:end="6031:58">(<argument pos:start="6031:39" pos:end="6031:43"><expr pos:start="6031:39" pos:end="6031:43"><operator pos:start="6031:39" pos:end="6031:39">&amp;</operator><name pos:start="6031:40" pos:end="6031:43">rgid</name></expr></argument>, <argument pos:start="6031:46" pos:end="6031:50"><expr pos:start="6031:46" pos:end="6031:50"><operator pos:start="6031:46" pos:end="6031:46">&amp;</operator><name pos:start="6031:47" pos:end="6031:50">egid</name></expr></argument>, <argument pos:start="6031:53" pos:end="6031:57"><expr pos:start="6031:53" pos:end="6031:57"><operator pos:start="6031:53" pos:end="6031:53">&amp;</operator><name pos:start="6031:54" pos:end="6031:57">sgid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6033:13" pos:end="6043:13"><if pos:start="6033:13" pos:end="6043:13">if <condition pos:start="6033:16" pos:end="6033:31">(<expr pos:start="6033:17" pos:end="6033:30"><operator pos:start="6033:17" pos:end="6033:17">!</operator><call pos:start="6033:18" pos:end="6033:30"><name pos:start="6033:18" pos:end="6033:25">is_error</name><argument_list pos:start="6033:26" pos:end="6033:30">(<argument pos:start="6033:27" pos:end="6033:29"><expr pos:start="6033:27" pos:end="6033:29"><name pos:start="6033:27" pos:end="6033:29">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6033:33" pos:end="6043:13">{<block_content pos:start="6035:17" pos:end="6041:32">

                <if_stmt pos:start="6035:17" pos:end="6041:32"><if pos:start="6035:17" pos:end="6041:32">if <condition pos:start="6035:20" pos:end="6039:48">(<expr pos:start="6035:21" pos:end="6039:47"><call pos:start="6035:21" pos:end="6035:44"><name pos:start="6035:21" pos:end="6035:32">put_user_u32</name><argument_list pos:start="6035:33" pos:end="6035:44">(<argument pos:start="6035:34" pos:end="6035:37"><expr pos:start="6035:34" pos:end="6035:37"><name pos:start="6035:34" pos:end="6035:37">rgid</name></expr></argument>, <argument pos:start="6035:40" pos:end="6035:43"><expr pos:start="6035:40" pos:end="6035:43"><name pos:start="6035:40" pos:end="6035:43">arg1</name></expr></argument>)</argument_list></call>

                    <operator pos:start="6037:21" pos:end="6037:22">||</operator> <call pos:start="6037:24" pos:end="6037:47"><name pos:start="6037:24" pos:end="6037:35">put_user_u32</name><argument_list pos:start="6037:36" pos:end="6037:47">(<argument pos:start="6037:37" pos:end="6037:40"><expr pos:start="6037:37" pos:end="6037:40"><name pos:start="6037:37" pos:end="6037:40">egid</name></expr></argument>, <argument pos:start="6037:43" pos:end="6037:46"><expr pos:start="6037:43" pos:end="6037:46"><name pos:start="6037:43" pos:end="6037:46">arg2</name></expr></argument>)</argument_list></call>

                    <operator pos:start="6039:21" pos:end="6039:22">||</operator> <call pos:start="6039:24" pos:end="6039:47"><name pos:start="6039:24" pos:end="6039:35">put_user_u32</name><argument_list pos:start="6039:36" pos:end="6039:47">(<argument pos:start="6039:37" pos:end="6039:40"><expr pos:start="6039:37" pos:end="6039:40"><name pos:start="6039:37" pos:end="6039:40">sgid</name></expr></argument>, <argument pos:start="6039:43" pos:end="6039:46"><expr pos:start="6039:43" pos:end="6039:46"><name pos:start="6039:43" pos:end="6039:46">arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6041:21" pos:end="6041:32"><block_content pos:start="6041:21" pos:end="6041:32">

                    <goto pos:start="6041:21" pos:end="6041:32">goto <name pos:start="6041:26" pos:end="6041:31">efault</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="6047:9" pos:end="6052:0">break;</break>

<cpp:endif pos:start="6049:1" pos:end="6049:6">#<cpp:directive pos:start="6049:2" pos:end="6049:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6051:1" pos:end="6051:24">#<cpp:directive pos:start="6051:2" pos:end="6051:6">ifdef</cpp:directive> <name pos:start="6051:8" pos:end="6051:24">TARGET_NR_chown32</name></cpp:ifdef>

    <case pos:start="6053:5" pos:end="6053:27">case <expr pos:start="6053:10" pos:end="6053:26"><name pos:start="6053:10" pos:end="6053:26">TARGET_NR_chown32</name></expr>:</case>

        <if_stmt pos:start="6055:9" pos:end="6057:24"><if pos:start="6055:9" pos:end="6057:24">if <condition pos:start="6055:12" pos:end="6055:42">(<expr pos:start="6055:13" pos:end="6055:41"><operator pos:start="6055:13" pos:end="6055:13">!</operator><operator pos:start="6055:14" pos:end="6055:14">(</operator><name pos:start="6055:15" pos:end="6055:15">p</name> <operator pos:start="6055:17" pos:end="6055:17">=</operator> <call pos:start="6055:19" pos:end="6055:40"><name pos:start="6055:19" pos:end="6055:34">lock_user_string</name><argument_list pos:start="6055:35" pos:end="6055:40">(<argument pos:start="6055:36" pos:end="6055:39"><expr pos:start="6055:36" pos:end="6055:39"><name pos:start="6055:36" pos:end="6055:39">arg1</name></expr></argument>)</argument_list></call><operator pos:start="6055:41" pos:end="6055:41">)</operator></expr>)</condition><block type="pseudo" pos:start="6057:13" pos:end="6057:24"><block_content pos:start="6057:13" pos:end="6057:24">

            <goto pos:start="6057:13" pos:end="6057:24">goto <name pos:start="6057:18" pos:end="6057:23">efault</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="6059:9" pos:end="6059:46"><expr pos:start="6059:9" pos:end="6059:45"><name pos:start="6059:9" pos:end="6059:11">ret</name> <operator pos:start="6059:13" pos:end="6059:13">=</operator> <call pos:start="6059:15" pos:end="6059:45"><name pos:start="6059:15" pos:end="6059:23">get_errno</name><argument_list pos:start="6059:24" pos:end="6059:45">(<argument pos:start="6059:25" pos:end="6059:44"><expr pos:start="6059:25" pos:end="6059:44"><call pos:start="6059:25" pos:end="6059:44"><name pos:start="6059:25" pos:end="6059:29">chown</name><argument_list pos:start="6059:30" pos:end="6059:44">(<argument pos:start="6059:31" pos:end="6059:31"><expr pos:start="6059:31" pos:end="6059:31"><name pos:start="6059:31" pos:end="6059:31">p</name></expr></argument>, <argument pos:start="6059:34" pos:end="6059:37"><expr pos:start="6059:34" pos:end="6059:37"><name pos:start="6059:34" pos:end="6059:37">arg2</name></expr></argument>, <argument pos:start="6059:40" pos:end="6059:43"><expr pos:start="6059:40" pos:end="6059:43"><name pos:start="6059:40" pos:end="6059:43">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6061:9" pos:end="6061:32"><expr pos:start="6061:9" pos:end="6061:31"><call pos:start="6061:9" pos:end="6061:31"><name pos:start="6061:9" pos:end="6061:19">unlock_user</name><argument_list pos:start="6061:20" pos:end="6061:31">(<argument pos:start="6061:21" pos:end="6061:21"><expr pos:start="6061:21" pos:end="6061:21"><name pos:start="6061:21" pos:end="6061:21">p</name></expr></argument>, <argument pos:start="6061:24" pos:end="6061:27"><expr pos:start="6061:24" pos:end="6061:27"><name pos:start="6061:24" pos:end="6061:27">arg1</name></expr></argument>, <argument pos:start="6061:30" pos:end="6061:30"><expr pos:start="6061:30" pos:end="6061:30"><literal type="number" pos:start="6061:30" pos:end="6061:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6063:9" pos:end="6068:0">break;</break>

<cpp:endif pos:start="6065:1" pos:end="6065:6">#<cpp:directive pos:start="6065:2" pos:end="6065:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6067:1" pos:end="6067:25">#<cpp:directive pos:start="6067:2" pos:end="6067:6">ifdef</cpp:directive> <name pos:start="6067:8" pos:end="6067:25">TARGET_NR_setuid32</name></cpp:ifdef>

    <case pos:start="6069:5" pos:end="6069:28">case <expr pos:start="6069:10" pos:end="6069:27"><name pos:start="6069:10" pos:end="6069:27">TARGET_NR_setuid32</name></expr>:</case>

        <expr_stmt pos:start="6071:9" pos:end="6071:38"><expr pos:start="6071:9" pos:end="6071:37"><name pos:start="6071:9" pos:end="6071:11">ret</name> <operator pos:start="6071:13" pos:end="6071:13">=</operator> <call pos:start="6071:15" pos:end="6071:37"><name pos:start="6071:15" pos:end="6071:23">get_errno</name><argument_list pos:start="6071:24" pos:end="6071:37">(<argument pos:start="6071:25" pos:end="6071:36"><expr pos:start="6071:25" pos:end="6071:36"><call pos:start="6071:25" pos:end="6071:36"><name pos:start="6071:25" pos:end="6071:30">setuid</name><argument_list pos:start="6071:31" pos:end="6071:36">(<argument pos:start="6071:32" pos:end="6071:35"><expr pos:start="6071:32" pos:end="6071:35"><name pos:start="6071:32" pos:end="6071:35">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6073:9" pos:end="6078:0">break;</break>

<cpp:endif pos:start="6075:1" pos:end="6075:6">#<cpp:directive pos:start="6075:2" pos:end="6075:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6077:1" pos:end="6077:25">#<cpp:directive pos:start="6077:2" pos:end="6077:6">ifdef</cpp:directive> <name pos:start="6077:8" pos:end="6077:25">TARGET_NR_setgid32</name></cpp:ifdef>

    <case pos:start="6079:5" pos:end="6079:28">case <expr pos:start="6079:10" pos:end="6079:27"><name pos:start="6079:10" pos:end="6079:27">TARGET_NR_setgid32</name></expr>:</case>

        <expr_stmt pos:start="6081:9" pos:end="6081:38"><expr pos:start="6081:9" pos:end="6081:37"><name pos:start="6081:9" pos:end="6081:11">ret</name> <operator pos:start="6081:13" pos:end="6081:13">=</operator> <call pos:start="6081:15" pos:end="6081:37"><name pos:start="6081:15" pos:end="6081:23">get_errno</name><argument_list pos:start="6081:24" pos:end="6081:37">(<argument pos:start="6081:25" pos:end="6081:36"><expr pos:start="6081:25" pos:end="6081:36"><call pos:start="6081:25" pos:end="6081:36"><name pos:start="6081:25" pos:end="6081:30">setgid</name><argument_list pos:start="6081:31" pos:end="6081:36">(<argument pos:start="6081:32" pos:end="6081:35"><expr pos:start="6081:32" pos:end="6081:35"><name pos:start="6081:32" pos:end="6081:35">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6083:9" pos:end="6088:0">break;</break>

<cpp:endif pos:start="6085:1" pos:end="6085:6">#<cpp:directive pos:start="6085:2" pos:end="6085:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6087:1" pos:end="6087:27">#<cpp:directive pos:start="6087:2" pos:end="6087:6">ifdef</cpp:directive> <name pos:start="6087:8" pos:end="6087:27">TARGET_NR_setfsuid32</name></cpp:ifdef>

    <case pos:start="6089:5" pos:end="6089:30">case <expr pos:start="6089:10" pos:end="6089:29"><name pos:start="6089:10" pos:end="6089:29">TARGET_NR_setfsuid32</name></expr>:</case>

        <expr_stmt pos:start="6091:9" pos:end="6091:40"><expr pos:start="6091:9" pos:end="6091:39"><name pos:start="6091:9" pos:end="6091:11">ret</name> <operator pos:start="6091:13" pos:end="6091:13">=</operator> <call pos:start="6091:15" pos:end="6091:39"><name pos:start="6091:15" pos:end="6091:23">get_errno</name><argument_list pos:start="6091:24" pos:end="6091:39">(<argument pos:start="6091:25" pos:end="6091:38"><expr pos:start="6091:25" pos:end="6091:38"><call pos:start="6091:25" pos:end="6091:38"><name pos:start="6091:25" pos:end="6091:32">setfsuid</name><argument_list pos:start="6091:33" pos:end="6091:38">(<argument pos:start="6091:34" pos:end="6091:37"><expr pos:start="6091:34" pos:end="6091:37"><name pos:start="6091:34" pos:end="6091:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6093:9" pos:end="6098:0">break;</break>

<cpp:endif pos:start="6095:1" pos:end="6095:6">#<cpp:directive pos:start="6095:2" pos:end="6095:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6097:1" pos:end="6097:27">#<cpp:directive pos:start="6097:2" pos:end="6097:6">ifdef</cpp:directive> <name pos:start="6097:8" pos:end="6097:27">TARGET_NR_setfsgid32</name></cpp:ifdef>

    <case pos:start="6099:5" pos:end="6099:30">case <expr pos:start="6099:10" pos:end="6099:29"><name pos:start="6099:10" pos:end="6099:29">TARGET_NR_setfsgid32</name></expr>:</case>

        <expr_stmt pos:start="6101:9" pos:end="6101:40"><expr pos:start="6101:9" pos:end="6101:39"><name pos:start="6101:9" pos:end="6101:11">ret</name> <operator pos:start="6101:13" pos:end="6101:13">=</operator> <call pos:start="6101:15" pos:end="6101:39"><name pos:start="6101:15" pos:end="6101:23">get_errno</name><argument_list pos:start="6101:24" pos:end="6101:39">(<argument pos:start="6101:25" pos:end="6101:38"><expr pos:start="6101:25" pos:end="6101:38"><call pos:start="6101:25" pos:end="6101:38"><name pos:start="6101:25" pos:end="6101:32">setfsgid</name><argument_list pos:start="6101:33" pos:end="6101:38">(<argument pos:start="6101:34" pos:end="6101:37"><expr pos:start="6101:34" pos:end="6101:37"><name pos:start="6101:34" pos:end="6101:37">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6103:9" pos:end="6106:0">break;</break>

<cpp:endif pos:start="6105:1" pos:end="6105:6">#<cpp:directive pos:start="6105:2" pos:end="6105:6">endif</cpp:directive></cpp:endif>



    <case pos:start="6109:5" pos:end="6109:30">case <expr pos:start="6109:10" pos:end="6109:29"><name pos:start="6109:10" pos:end="6109:29">TARGET_NR_pivot_root</name></expr>:</case>

        <goto pos:start="6111:9" pos:end="6114:0">goto <name pos:start="6111:14" pos:end="6111:26">unimplemented</name>;</goto>

<cpp:ifdef pos:start="6113:1" pos:end="6113:24">#<cpp:directive pos:start="6113:2" pos:end="6113:6">ifdef</cpp:directive> <name pos:start="6113:8" pos:end="6113:24">TARGET_NR_mincore</name></cpp:ifdef>

    <case pos:start="6115:5" pos:end="6115:27">case <expr pos:start="6115:10" pos:end="6115:26"><name pos:start="6115:10" pos:end="6115:26">TARGET_NR_mincore</name></expr>:</case>

        <block pos:start="6117:9" pos:end="6139:9">{<block_content pos:start="6119:13" pos:end="6137:36">

            <decl_stmt pos:start="6119:13" pos:end="6119:20"><decl pos:start="6119:13" pos:end="6119:19"><type pos:start="6119:13" pos:end="6119:18"><name pos:start="6119:13" pos:end="6119:16">void</name> <modifier pos:start="6119:18" pos:end="6119:18">*</modifier></type><name pos:start="6119:19" pos:end="6119:19">a</name></decl>;</decl_stmt>

            <expr_stmt pos:start="6121:13" pos:end="6121:33"><expr pos:start="6121:13" pos:end="6121:32"><name pos:start="6121:13" pos:end="6121:15">ret</name> <operator pos:start="6121:17" pos:end="6121:17">=</operator> <operator pos:start="6121:19" pos:end="6121:19">-</operator><name pos:start="6121:20" pos:end="6121:32">TARGET_EFAULT</name></expr>;</expr_stmt>

            <if_stmt pos:start="6123:13" pos:end="6125:28"><if pos:start="6123:13" pos:end="6125:28">if <condition pos:start="6123:16" pos:end="6123:60">(<expr pos:start="6123:17" pos:end="6123:59"><operator pos:start="6123:17" pos:end="6123:17">!</operator><operator pos:start="6123:18" pos:end="6123:18">(</operator><name pos:start="6123:19" pos:end="6123:19">a</name> <operator pos:start="6123:21" pos:end="6123:21">=</operator> <call pos:start="6123:23" pos:end="6123:58"><name pos:start="6123:23" pos:end="6123:31">lock_user</name><argument_list pos:start="6123:32" pos:end="6123:58">(<argument pos:start="6123:33" pos:end="6123:43"><expr pos:start="6123:33" pos:end="6123:43"><name pos:start="6123:33" pos:end="6123:43">VERIFY_READ</name></expr></argument>, <argument pos:start="6123:46" pos:end="6123:49"><expr pos:start="6123:46" pos:end="6123:49"><name pos:start="6123:46" pos:end="6123:49">arg1</name></expr></argument>,<argument pos:start="6123:51" pos:end="6123:54"><expr pos:start="6123:51" pos:end="6123:54"><name pos:start="6123:51" pos:end="6123:54">arg2</name></expr></argument>, <argument pos:start="6123:57" pos:end="6123:57"><expr pos:start="6123:57" pos:end="6123:57"><literal type="number" pos:start="6123:57" pos:end="6123:57">0</literal></expr></argument>)</argument_list></call><operator pos:start="6123:59" pos:end="6123:59">)</operator></expr>)</condition><block type="pseudo" pos:start="6125:17" pos:end="6125:28"><block_content pos:start="6125:17" pos:end="6125:28">

                <goto pos:start="6125:17" pos:end="6125:28">goto <name pos:start="6125:22" pos:end="6125:27">efault</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="6127:13" pos:end="6129:34"><if pos:start="6127:13" pos:end="6129:34">if <condition pos:start="6127:16" pos:end="6127:46">(<expr pos:start="6127:17" pos:end="6127:45"><operator pos:start="6127:17" pos:end="6127:17">!</operator><operator pos:start="6127:18" pos:end="6127:18">(</operator><name pos:start="6127:19" pos:end="6127:19">p</name> <operator pos:start="6127:21" pos:end="6127:21">=</operator> <call pos:start="6127:23" pos:end="6127:44"><name pos:start="6127:23" pos:end="6127:38">lock_user_string</name><argument_list pos:start="6127:39" pos:end="6127:44">(<argument pos:start="6127:40" pos:end="6127:43"><expr pos:start="6127:40" pos:end="6127:43"><name pos:start="6127:40" pos:end="6127:43">arg3</name></expr></argument>)</argument_list></call><operator pos:start="6127:45" pos:end="6127:45">)</operator></expr>)</condition><block type="pseudo" pos:start="6129:17" pos:end="6129:34"><block_content pos:start="6129:17" pos:end="6129:34">

                <goto pos:start="6129:17" pos:end="6129:34">goto <name pos:start="6129:22" pos:end="6129:33">mincore_fail</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="6131:13" pos:end="6131:49"><expr pos:start="6131:13" pos:end="6131:48"><name pos:start="6131:13" pos:end="6131:15">ret</name> <operator pos:start="6131:17" pos:end="6131:17">=</operator> <call pos:start="6131:19" pos:end="6131:48"><name pos:start="6131:19" pos:end="6131:27">get_errno</name><argument_list pos:start="6131:28" pos:end="6131:48">(<argument pos:start="6131:29" pos:end="6131:47"><expr pos:start="6131:29" pos:end="6131:47"><call pos:start="6131:29" pos:end="6131:47"><name pos:start="6131:29" pos:end="6131:35">mincore</name><argument_list pos:start="6131:36" pos:end="6131:47">(<argument pos:start="6131:37" pos:end="6131:37"><expr pos:start="6131:37" pos:end="6131:37"><name pos:start="6131:37" pos:end="6131:37">a</name></expr></argument>, <argument pos:start="6131:40" pos:end="6131:43"><expr pos:start="6131:40" pos:end="6131:43"><name pos:start="6131:40" pos:end="6131:43">arg2</name></expr></argument>, <argument pos:start="6131:46" pos:end="6131:46"><expr pos:start="6131:46" pos:end="6131:46"><name pos:start="6131:46" pos:end="6131:46">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6133:13" pos:end="6133:38"><expr pos:start="6133:13" pos:end="6133:37"><call pos:start="6133:13" pos:end="6133:37"><name pos:start="6133:13" pos:end="6133:23">unlock_user</name><argument_list pos:start="6133:24" pos:end="6133:37">(<argument pos:start="6133:25" pos:end="6133:25"><expr pos:start="6133:25" pos:end="6133:25"><name pos:start="6133:25" pos:end="6133:25">p</name></expr></argument>, <argument pos:start="6133:28" pos:end="6133:31"><expr pos:start="6133:28" pos:end="6133:31"><name pos:start="6133:28" pos:end="6133:31">arg3</name></expr></argument>, <argument pos:start="6133:34" pos:end="6133:36"><expr pos:start="6133:34" pos:end="6133:36"><name pos:start="6133:34" pos:end="6133:36">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <label pos:start="6135:13" pos:end="6135:25"><name pos:start="6135:13" pos:end="6135:24">mincore_fail</name>:</label>

            <expr_stmt pos:start="6137:13" pos:end="6137:36"><expr pos:start="6137:13" pos:end="6137:35"><call pos:start="6137:13" pos:end="6137:35"><name pos:start="6137:13" pos:end="6137:23">unlock_user</name><argument_list pos:start="6137:24" pos:end="6137:35">(<argument pos:start="6137:25" pos:end="6137:25"><expr pos:start="6137:25" pos:end="6137:25"><name pos:start="6137:25" pos:end="6137:25">a</name></expr></argument>, <argument pos:start="6137:28" pos:end="6137:31"><expr pos:start="6137:28" pos:end="6137:31"><name pos:start="6137:28" pos:end="6137:31">arg1</name></expr></argument>, <argument pos:start="6137:34" pos:end="6137:34"><expr pos:start="6137:34" pos:end="6137:34"><literal type="number" pos:start="6137:34" pos:end="6137:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6141:9" pos:end="6146:0">break;</break>

<cpp:endif pos:start="6143:1" pos:end="6143:6">#<cpp:directive pos:start="6143:2" pos:end="6143:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6145:1" pos:end="6145:33">#<cpp:directive pos:start="6145:2" pos:end="6145:6">ifdef</cpp:directive> <name pos:start="6145:8" pos:end="6145:33">TARGET_NR_arm_fadvise64_64</name></cpp:ifdef>

    <case pos:start="6147:5" pos:end="6147:36">case <expr pos:start="6147:10" pos:end="6147:35"><name pos:start="6147:10" pos:end="6147:35">TARGET_NR_arm_fadvise64_64</name></expr>:</case>

	<block pos:start="6149:9" pos:end="6174:0">{<block_content pos:start="6159:17" pos:end="6165:28">

		<comment type="block" pos:start="6151:17" pos:end="6157:19">/*

		 * arm_fadvise64_64 looks like fadvise64_64 but

		 * with different argument order

		 */</comment>

		<decl_stmt pos:start="6159:17" pos:end="6159:30"><decl pos:start="6159:17" pos:end="6159:29"><type pos:start="6159:17" pos:end="6159:24"><name pos:start="6159:17" pos:end="6159:24">abi_long</name></type> <name pos:start="6159:26" pos:end="6159:29">temp</name></decl>;</decl_stmt>

		<expr_stmt pos:start="6161:17" pos:end="6161:28"><expr pos:start="6161:17" pos:end="6161:27"><name pos:start="6161:17" pos:end="6161:20">temp</name> <operator pos:start="6161:22" pos:end="6161:22">=</operator> <name pos:start="6161:24" pos:end="6161:27">arg3</name></expr>;</expr_stmt>

		<expr_stmt pos:start="6163:17" pos:end="6163:28"><expr pos:start="6163:17" pos:end="6163:27"><name pos:start="6163:17" pos:end="6163:20">arg3</name> <operator pos:start="6163:22" pos:end="6163:22">=</operator> <name pos:start="6163:24" pos:end="6163:27">arg4</name></expr>;</expr_stmt>

		<expr_stmt pos:start="6165:17" pos:end="6165:28"><expr pos:start="6165:17" pos:end="6165:27"><name pos:start="6165:17" pos:end="6165:20">arg4</name> <operator pos:start="6165:22" pos:end="6165:22">=</operator> <name pos:start="6165:24" pos:end="6165:27">temp</name></expr>;</expr_stmt>

	</block_content>}</block>

<cpp:endif pos:start="6169:1" pos:end="6169:6">#<cpp:directive pos:start="6169:2" pos:end="6169:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="6171:1" pos:end="6171:106">#<cpp:directive pos:start="6171:2" pos:end="6171:3">if</cpp:directive> <expr pos:start="6171:5" pos:end="6171:106"><call pos:start="6171:5" pos:end="6171:35"><name pos:start="6171:5" pos:end="6171:11">defined</name><argument_list pos:start="6171:12" pos:end="6171:35">(<argument pos:start="6171:13" pos:end="6171:34"><expr pos:start="6171:13" pos:end="6171:34"><name pos:start="6171:13" pos:end="6171:34">TARGET_NR_fadvise64_64</name></expr></argument>)</argument_list></call> <operator pos:start="6171:37" pos:end="6171:38">||</operator> <call pos:start="6171:40" pos:end="6171:74"><name pos:start="6171:40" pos:end="6171:46">defined</name><argument_list pos:start="6171:47" pos:end="6171:74">(<argument pos:start="6171:48" pos:end="6171:73"><expr pos:start="6171:48" pos:end="6171:73"><name pos:start="6171:48" pos:end="6171:73">TARGET_NR_arm_fadvise64_64</name></expr></argument>)</argument_list></call> <operator pos:start="6171:76" pos:end="6171:77">||</operator> <call pos:start="6171:79" pos:end="6171:106"><name pos:start="6171:79" pos:end="6171:85">defined</name><argument_list pos:start="6171:86" pos:end="6171:106">(<argument pos:start="6171:87" pos:end="6171:105"><expr pos:start="6171:87" pos:end="6171:105"><name pos:start="6171:87" pos:end="6171:105">TARGET_NR_fadvise64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef pos:start="6173:1" pos:end="6173:29">#<cpp:directive pos:start="6173:2" pos:end="6173:6">ifdef</cpp:directive> <name pos:start="6173:8" pos:end="6173:29">TARGET_NR_fadvise64_64</name></cpp:ifdef>

    <case pos:start="6175:5" pos:end="6180:0">case <expr pos:start="6175:10" pos:end="6175:31"><name pos:start="6175:10" pos:end="6175:31">TARGET_NR_fadvise64_64</name></expr>:</case>

<cpp:endif pos:start="6177:1" pos:end="6177:6">#<cpp:directive pos:start="6177:2" pos:end="6177:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6179:1" pos:end="6179:26">#<cpp:directive pos:start="6179:2" pos:end="6179:6">ifdef</cpp:directive> <name pos:start="6179:8" pos:end="6179:26">TARGET_NR_fadvise64</name></cpp:ifdef>

    <case pos:start="6181:5" pos:end="6186:0">case <expr pos:start="6181:10" pos:end="6181:28"><name pos:start="6181:10" pos:end="6181:28">TARGET_NR_fadvise64</name></expr>:</case>

<cpp:endif pos:start="6183:1" pos:end="6183:6">#<cpp:directive pos:start="6183:2" pos:end="6183:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6185:1" pos:end="6185:19">#<cpp:directive pos:start="6185:2" pos:end="6185:6">ifdef</cpp:directive> <name pos:start="6185:8" pos:end="6185:19">TARGET_S390X</name></cpp:ifdef>

        <switch pos:start="6187:9" pos:end="6202:0">switch <condition pos:start="6187:16" pos:end="6187:21">(<expr pos:start="6187:17" pos:end="6187:20"><name pos:start="6187:17" pos:end="6187:20">arg4</name></expr>)</condition> <block pos:start="6187:23" pos:end="6202:0">{<block_content pos:start="6189:9" pos:end="6197:23">

        <case pos:start="6189:9" pos:end="6189:15">case <expr pos:start="6189:14" pos:end="6189:14"><literal type="number" pos:start="6189:14" pos:end="6189:14">4</literal></expr>:</case> <expr_stmt pos:start="6189:17" pos:end="6189:46"><expr pos:start="6189:17" pos:end="6189:45"><name pos:start="6189:17" pos:end="6189:20">arg4</name> <operator pos:start="6189:22" pos:end="6189:22">=</operator> <name pos:start="6189:24" pos:end="6189:41">POSIX_FADV_NOREUSE</name> <operator pos:start="6189:43" pos:end="6189:43">+</operator> <literal type="number" pos:start="6189:45" pos:end="6189:45">1</literal></expr>;</expr_stmt> <break pos:start="6189:48" pos:end="6189:53">break;</break> <comment type="block" pos:start="6189:55" pos:end="6189:91">/* make sure it's an invalid value */</comment>

        <case pos:start="6191:9" pos:end="6191:15">case <expr pos:start="6191:14" pos:end="6191:14"><literal type="number" pos:start="6191:14" pos:end="6191:14">5</literal></expr>:</case> <expr_stmt pos:start="6191:17" pos:end="6191:46"><expr pos:start="6191:17" pos:end="6191:45"><name pos:start="6191:17" pos:end="6191:20">arg4</name> <operator pos:start="6191:22" pos:end="6191:22">=</operator> <name pos:start="6191:24" pos:end="6191:41">POSIX_FADV_NOREUSE</name> <operator pos:start="6191:43" pos:end="6191:43">+</operator> <literal type="number" pos:start="6191:45" pos:end="6191:45">2</literal></expr>;</expr_stmt> <break pos:start="6191:48" pos:end="6191:53">break;</break> <comment type="block" pos:start="6191:55" pos:end="6191:65">/* ditto */</comment>

        <case pos:start="6193:9" pos:end="6193:15">case <expr pos:start="6193:14" pos:end="6193:14"><literal type="number" pos:start="6193:14" pos:end="6193:14">6</literal></expr>:</case> <expr_stmt pos:start="6193:17" pos:end="6193:43"><expr pos:start="6193:17" pos:end="6193:42"><name pos:start="6193:17" pos:end="6193:20">arg4</name> <operator pos:start="6193:22" pos:end="6193:22">=</operator> <name pos:start="6193:24" pos:end="6193:42">POSIX_FADV_DONTNEED</name></expr>;</expr_stmt> <break pos:start="6193:45" pos:end="6193:50">break;</break>

        <case pos:start="6195:9" pos:end="6195:15">case <expr pos:start="6195:14" pos:end="6195:14"><literal type="number" pos:start="6195:14" pos:end="6195:14">7</literal></expr>:</case> <expr_stmt pos:start="6195:17" pos:end="6195:42"><expr pos:start="6195:17" pos:end="6195:41"><name pos:start="6195:17" pos:end="6195:20">arg4</name> <operator pos:start="6195:22" pos:end="6195:22">=</operator> <name pos:start="6195:24" pos:end="6195:41">POSIX_FADV_NOREUSE</name></expr>;</expr_stmt> <break pos:start="6195:44" pos:end="6195:49">break;</break>

        <default pos:start="6197:9" pos:end="6197:16">default:</default> <break pos:start="6197:18" pos:end="6197:23">break;</break>

        </block_content>}</block></switch>

<cpp:endif pos:start="6201:1" pos:end="6201:6">#<cpp:directive pos:start="6201:2" pos:end="6201:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="6203:9" pos:end="6203:53"><expr pos:start="6203:9" pos:end="6203:52"><name pos:start="6203:9" pos:end="6203:11">ret</name> <operator pos:start="6203:13" pos:end="6203:13">=</operator> <operator pos:start="6203:15" pos:end="6203:15">-</operator><call pos:start="6203:16" pos:end="6203:52"><name pos:start="6203:16" pos:end="6203:28">posix_fadvise</name><argument_list pos:start="6203:29" pos:end="6203:52">(<argument pos:start="6203:30" pos:end="6203:33"><expr pos:start="6203:30" pos:end="6203:33"><name pos:start="6203:30" pos:end="6203:33">arg1</name></expr></argument>, <argument pos:start="6203:36" pos:end="6203:39"><expr pos:start="6203:36" pos:end="6203:39"><name pos:start="6203:36" pos:end="6203:39">arg2</name></expr></argument>, <argument pos:start="6203:42" pos:end="6203:45"><expr pos:start="6203:42" pos:end="6203:45"><name pos:start="6203:42" pos:end="6203:45">arg3</name></expr></argument>, <argument pos:start="6203:48" pos:end="6203:51"><expr pos:start="6203:48" pos:end="6203:51"><name pos:start="6203:48" pos:end="6203:51">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="6205:9" pos:end="6210:0">break;</break>

<cpp:endif pos:start="6207:1" pos:end="6207:6">#<cpp:directive pos:start="6207:2" pos:end="6207:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6209:1" pos:end="6209:24">#<cpp:directive pos:start="6209:2" pos:end="6209:6">ifdef</cpp:directive> <name pos:start="6209:8" pos:end="6209:24">TARGET_NR_madvise</name></cpp:ifdef>

    <case pos:start="6211:5" pos:end="6211:27">case <expr pos:start="6211:10" pos:end="6211:26"><name pos:start="6211:10" pos:end="6211:26">TARGET_NR_madvise</name></expr>:</case>

        <comment type="block" pos:start="6213:9" pos:end="6219:71">/* A straight passthrough may not be safe because qemu sometimes

           turns private file-backed mappings into anonymous mappings.

           This will break MADV_DONTNEED.

           This is a hint, so ignoring and returning success is ok.  */</comment>

        <expr_stmt pos:start="6221:9" pos:end="6221:27"><expr pos:start="6221:9" pos:end="6221:26"><name pos:start="6221:9" pos:end="6221:11">ret</name> <operator pos:start="6221:13" pos:end="6221:13">=</operator> <call pos:start="6221:15" pos:end="6221:26"><name pos:start="6221:15" pos:end="6221:23">get_errno</name><argument_list pos:start="6221:24" pos:end="6221:26">(<argument pos:start="6221:25" pos:end="6221:25"><expr pos:start="6221:25" pos:end="6221:25"><literal type="number" pos:start="6221:25" pos:end="6221:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6223:9" pos:end="6228:0">break;</break>

<cpp:endif pos:start="6225:1" pos:end="6225:6">#<cpp:directive pos:start="6225:2" pos:end="6225:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="6227:1" pos:end="6227:25">#<cpp:directive pos:start="6227:2" pos:end="6227:3">if</cpp:directive> <expr pos:start="6227:5" pos:end="6227:25"><name pos:start="6227:5" pos:end="6227:19">TARGET_ABI_BITS</name> <operator pos:start="6227:21" pos:end="6227:22">==</operator> <literal type="number" pos:start="6227:24" pos:end="6227:25">32</literal></expr></cpp:if>

    <case pos:start="6229:5" pos:end="6229:27">case <expr pos:start="6229:10" pos:end="6229:26"><name pos:start="6229:10" pos:end="6229:26">TARGET_NR_fcntl64</name></expr>:</case>

    <block pos:start="6231:5" pos:end="6428:0">{<block_content pos:start="6233:9" pos:end="6421:14">

	<decl_stmt pos:start="6233:9" pos:end="6233:16"><decl pos:start="6233:9" pos:end="6233:15"><type pos:start="6233:9" pos:end="6233:11"><name pos:start="6233:9" pos:end="6233:11">int</name></type> <name pos:start="6233:13" pos:end="6233:15">cmd</name></decl>;</decl_stmt>

	<decl_stmt pos:start="6235:9" pos:end="6235:26"><decl pos:start="6235:9" pos:end="6235:25"><type pos:start="6235:9" pos:end="6235:22"><name pos:start="6235:9" pos:end="6235:22"><name pos:start="6235:9" pos:end="6235:14">struct</name> <name pos:start="6235:16" pos:end="6235:22">flock64</name></name></type> <name pos:start="6235:24" pos:end="6235:25">fl</name></decl>;</decl_stmt>

	<decl_stmt pos:start="6237:9" pos:end="6240:0"><decl pos:start="6237:9" pos:end="6237:40"><type pos:start="6237:9" pos:end="6237:31"><name pos:start="6237:9" pos:end="6237:29"><name pos:start="6237:9" pos:end="6237:14">struct</name> <name pos:start="6237:16" pos:end="6237:29">target_flock64</name></name> <modifier pos:start="6237:31" pos:end="6237:31">*</modifier></type><name pos:start="6237:32" pos:end="6237:40">target_fl</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="6239:1" pos:end="6239:17">#<cpp:directive pos:start="6239:2" pos:end="6239:6">ifdef</cpp:directive> <name pos:start="6239:8" pos:end="6239:17">TARGET_ARM</name></cpp:ifdef>

	<decl_stmt pos:start="6241:9" pos:end="6244:0"><decl pos:start="6241:9" pos:end="6241:46"><type pos:start="6241:9" pos:end="6241:36"><name pos:start="6241:9" pos:end="6241:34"><name pos:start="6241:9" pos:end="6241:14">struct</name> <name pos:start="6241:16" pos:end="6241:34">target_eabi_flock64</name></name> <modifier pos:start="6241:36" pos:end="6241:36">*</modifier></type><name pos:start="6241:37" pos:end="6241:46">target_efl</name></decl>;</decl_stmt>

<cpp:endif pos:start="6243:1" pos:end="6243:6">#<cpp:directive pos:start="6243:2" pos:end="6243:6">endif</cpp:directive></cpp:endif>



	<expr_stmt pos:start="6247:9" pos:end="6247:45"><expr pos:start="6247:9" pos:end="6247:44"><name pos:start="6247:9" pos:end="6247:11">cmd</name> <operator pos:start="6247:13" pos:end="6247:13">=</operator> <call pos:start="6247:15" pos:end="6247:44"><name pos:start="6247:15" pos:end="6247:38">target_to_host_fcntl_cmd</name><argument_list pos:start="6247:39" pos:end="6247:44">(<argument pos:start="6247:40" pos:end="6247:43"><expr pos:start="6247:40" pos:end="6247:43"><name pos:start="6247:40" pos:end="6247:43">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6249:9" pos:end="6255:9"><if pos:start="6249:9" pos:end="6255:9">if <condition pos:start="6249:12" pos:end="6249:34">(<expr pos:start="6249:13" pos:end="6249:33"><name pos:start="6249:13" pos:end="6249:15">cmd</name> <operator pos:start="6249:17" pos:end="6249:18">==</operator> <operator pos:start="6249:20" pos:end="6249:20">-</operator><name pos:start="6249:21" pos:end="6249:33">TARGET_EINVAL</name></expr>)</condition> <block pos:start="6249:36" pos:end="6255:9">{<block_content pos:start="6251:13" pos:end="6253:18">

            <expr_stmt pos:start="6251:13" pos:end="6251:22"><expr pos:start="6251:13" pos:end="6251:21"><name pos:start="6251:13" pos:end="6251:15">ret</name> <operator pos:start="6251:17" pos:end="6251:17">=</operator> <name pos:start="6251:19" pos:end="6251:21">cmd</name></expr>;</expr_stmt>

            <break pos:start="6253:13" pos:end="6253:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="6259:9" pos:end="6419:9">switch<condition pos:start="6259:15" pos:end="6259:20">(<expr pos:start="6259:16" pos:end="6259:19"><name pos:start="6259:16" pos:end="6259:19">arg2</name></expr>)</condition> <block pos:start="6259:22" pos:end="6419:9">{<block_content pos:start="6261:9" pos:end="6417:18">

        <case pos:start="6261:9" pos:end="6264:0">case <expr pos:start="6261:14" pos:end="6261:29"><name pos:start="6261:14" pos:end="6261:29">TARGET_F_GETLK64</name></expr>:</case>

<cpp:ifdef pos:start="6263:1" pos:end="6263:17">#<cpp:directive pos:start="6263:2" pos:end="6263:6">ifdef</cpp:directive> <name pos:start="6263:8" pos:end="6263:17">TARGET_ARM</name></cpp:ifdef>

            <if_stmt pos:start="6265:13" pos:end="6305:13"><if pos:start="6265:13" pos:end="6283:13">if <condition pos:start="6265:16" pos:end="6265:47">(<expr pos:start="6265:17" pos:end="6265:46"><operator pos:start="6265:17" pos:end="6265:17">(</operator><operator pos:start="6265:18" pos:end="6265:18">(</operator><name pos:start="6265:19" pos:end="6265:29">CPUARMState</name> <operator pos:start="6265:31" pos:end="6265:31">*</operator><operator pos:start="6265:32" pos:end="6265:32">)</operator><name pos:start="6265:33" pos:end="6265:39">cpu_env</name><operator pos:start="6265:40" pos:end="6265:40">)</operator><operator pos:start="6265:41" pos:end="6265:42">-&gt;</operator><name pos:start="6265:43" pos:end="6265:46">eabi</name></expr>)</condition> <block pos:start="6265:49" pos:end="6283:13">{<block_content pos:start="6267:17" pos:end="6281:56">

                <if_stmt pos:start="6267:17" pos:end="6269:32"><if pos:start="6267:17" pos:end="6269:32">if <condition pos:start="6267:20" pos:end="6267:72">(<expr pos:start="6267:21" pos:end="6267:71"><operator pos:start="6267:21" pos:end="6267:21">!</operator><call pos:start="6267:22" pos:end="6267:71"><name pos:start="6267:22" pos:end="6267:37">lock_user_struct</name><argument_list pos:start="6267:38" pos:end="6267:71">(<argument pos:start="6267:39" pos:end="6267:49"><expr pos:start="6267:39" pos:end="6267:49"><name pos:start="6267:39" pos:end="6267:49">VERIFY_READ</name></expr></argument>, <argument pos:start="6267:52" pos:end="6267:61"><expr pos:start="6267:52" pos:end="6267:61"><name pos:start="6267:52" pos:end="6267:61">target_efl</name></expr></argument>, <argument pos:start="6267:64" pos:end="6267:67"><expr pos:start="6267:64" pos:end="6267:67"><name pos:start="6267:64" pos:end="6267:67">arg3</name></expr></argument>, <argument pos:start="6267:70" pos:end="6267:70"><expr pos:start="6267:70" pos:end="6267:70"><literal type="number" pos:start="6267:70" pos:end="6267:70">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6269:21" pos:end="6269:32"><block_content pos:start="6269:21" pos:end="6269:32"> 

                    <goto pos:start="6269:21" pos:end="6269:32">goto <name pos:start="6269:26" pos:end="6269:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6271:17" pos:end="6271:56"><expr pos:start="6271:17" pos:end="6271:55"><name pos:start="6271:17" pos:end="6271:25"><name pos:start="6271:17" pos:end="6271:18">fl</name><operator pos:start="6271:19" pos:end="6271:19">.</operator><name pos:start="6271:20" pos:end="6271:25">l_type</name></name> <operator pos:start="6271:27" pos:end="6271:27">=</operator> <call pos:start="6271:29" pos:end="6271:55"><name pos:start="6271:29" pos:end="6271:35">tswap16</name><argument_list pos:start="6271:36" pos:end="6271:55">(<argument pos:start="6271:37" pos:end="6271:54"><expr pos:start="6271:37" pos:end="6271:54"><name pos:start="6271:37" pos:end="6271:54"><name pos:start="6271:37" pos:end="6271:46">target_efl</name><operator pos:start="6271:47" pos:end="6271:48">-&gt;</operator><name pos:start="6271:49" pos:end="6271:54">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6273:17" pos:end="6273:60"><expr pos:start="6273:17" pos:end="6273:59"><name pos:start="6273:17" pos:end="6273:27"><name pos:start="6273:17" pos:end="6273:18">fl</name><operator pos:start="6273:19" pos:end="6273:19">.</operator><name pos:start="6273:20" pos:end="6273:27">l_whence</name></name> <operator pos:start="6273:29" pos:end="6273:29">=</operator> <call pos:start="6273:31" pos:end="6273:59"><name pos:start="6273:31" pos:end="6273:37">tswap16</name><argument_list pos:start="6273:38" pos:end="6273:59">(<argument pos:start="6273:39" pos:end="6273:58"><expr pos:start="6273:39" pos:end="6273:58"><name pos:start="6273:39" pos:end="6273:58"><name pos:start="6273:39" pos:end="6273:48">target_efl</name><operator pos:start="6273:49" pos:end="6273:50">-&gt;</operator><name pos:start="6273:51" pos:end="6273:58">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6275:17" pos:end="6275:58"><expr pos:start="6275:17" pos:end="6275:57"><name pos:start="6275:17" pos:end="6275:26"><name pos:start="6275:17" pos:end="6275:18">fl</name><operator pos:start="6275:19" pos:end="6275:19">.</operator><name pos:start="6275:20" pos:end="6275:26">l_start</name></name> <operator pos:start="6275:28" pos:end="6275:28">=</operator> <call pos:start="6275:30" pos:end="6275:57"><name pos:start="6275:30" pos:end="6275:36">tswap64</name><argument_list pos:start="6275:37" pos:end="6275:57">(<argument pos:start="6275:38" pos:end="6275:56"><expr pos:start="6275:38" pos:end="6275:56"><name pos:start="6275:38" pos:end="6275:56"><name pos:start="6275:38" pos:end="6275:47">target_efl</name><operator pos:start="6275:48" pos:end="6275:49">-&gt;</operator><name pos:start="6275:50" pos:end="6275:56">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6277:17" pos:end="6277:54"><expr pos:start="6277:17" pos:end="6277:53"><name pos:start="6277:17" pos:end="6277:24"><name pos:start="6277:17" pos:end="6277:18">fl</name><operator pos:start="6277:19" pos:end="6277:19">.</operator><name pos:start="6277:20" pos:end="6277:24">l_len</name></name> <operator pos:start="6277:26" pos:end="6277:26">=</operator> <call pos:start="6277:28" pos:end="6277:53"><name pos:start="6277:28" pos:end="6277:34">tswap64</name><argument_list pos:start="6277:35" pos:end="6277:53">(<argument pos:start="6277:36" pos:end="6277:52"><expr pos:start="6277:36" pos:end="6277:52"><name pos:start="6277:36" pos:end="6277:52"><name pos:start="6277:36" pos:end="6277:45">target_efl</name><operator pos:start="6277:46" pos:end="6277:47">-&gt;</operator><name pos:start="6277:48" pos:end="6277:52">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6279:17" pos:end="6279:54"><expr pos:start="6279:17" pos:end="6279:53"><name pos:start="6279:17" pos:end="6279:24"><name pos:start="6279:17" pos:end="6279:18">fl</name><operator pos:start="6279:19" pos:end="6279:19">.</operator><name pos:start="6279:20" pos:end="6279:24">l_pid</name></name> <operator pos:start="6279:26" pos:end="6279:26">=</operator> <call pos:start="6279:28" pos:end="6279:53"><name pos:start="6279:28" pos:end="6279:34">tswap32</name><argument_list pos:start="6279:35" pos:end="6279:53">(<argument pos:start="6279:36" pos:end="6279:52"><expr pos:start="6279:36" pos:end="6279:52"><name pos:start="6279:36" pos:end="6279:52"><name pos:start="6279:36" pos:end="6279:45">target_efl</name><operator pos:start="6279:46" pos:end="6279:47">-&gt;</operator><name pos:start="6279:48" pos:end="6279:52">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6281:17" pos:end="6281:56"><expr pos:start="6281:17" pos:end="6281:55"><call pos:start="6281:17" pos:end="6281:55"><name pos:start="6281:17" pos:end="6281:34">unlock_user_struct</name><argument_list pos:start="6281:35" pos:end="6281:55">(<argument pos:start="6281:36" pos:end="6281:45"><expr pos:start="6281:36" pos:end="6281:45"><name pos:start="6281:36" pos:end="6281:45">target_efl</name></expr></argument>, <argument pos:start="6281:48" pos:end="6281:51"><expr pos:start="6281:48" pos:end="6281:51"><name pos:start="6281:48" pos:end="6281:51">arg3</name></expr></argument>, <argument pos:start="6281:54" pos:end="6281:54"><expr pos:start="6281:54" pos:end="6281:54"><literal type="number" pos:start="6281:54" pos:end="6281:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6283:15" pos:end="6305:13">else

<cpp:endif pos:start="6285:1" pos:end="6285:6">#<cpp:directive pos:start="6285:2" pos:end="6285:6">endif</cpp:directive></cpp:endif>

            <block pos:start="6287:13" pos:end="6305:13">{<block_content pos:start="6289:17" pos:end="6303:55">

                <if_stmt pos:start="6289:17" pos:end="6291:32"><if pos:start="6289:17" pos:end="6291:32">if <condition pos:start="6289:20" pos:end="6289:71">(<expr pos:start="6289:21" pos:end="6289:70"><operator pos:start="6289:21" pos:end="6289:21">!</operator><call pos:start="6289:22" pos:end="6289:70"><name pos:start="6289:22" pos:end="6289:37">lock_user_struct</name><argument_list pos:start="6289:38" pos:end="6289:70">(<argument pos:start="6289:39" pos:end="6289:49"><expr pos:start="6289:39" pos:end="6289:49"><name pos:start="6289:39" pos:end="6289:49">VERIFY_READ</name></expr></argument>, <argument pos:start="6289:52" pos:end="6289:60"><expr pos:start="6289:52" pos:end="6289:60"><name pos:start="6289:52" pos:end="6289:60">target_fl</name></expr></argument>, <argument pos:start="6289:63" pos:end="6289:66"><expr pos:start="6289:63" pos:end="6289:66"><name pos:start="6289:63" pos:end="6289:66">arg3</name></expr></argument>, <argument pos:start="6289:69" pos:end="6289:69"><expr pos:start="6289:69" pos:end="6289:69"><literal type="number" pos:start="6289:69" pos:end="6289:69">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6291:21" pos:end="6291:32"><block_content pos:start="6291:21" pos:end="6291:32"> 

                    <goto pos:start="6291:21" pos:end="6291:32">goto <name pos:start="6291:26" pos:end="6291:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6293:17" pos:end="6293:55"><expr pos:start="6293:17" pos:end="6293:54"><name pos:start="6293:17" pos:end="6293:25"><name pos:start="6293:17" pos:end="6293:18">fl</name><operator pos:start="6293:19" pos:end="6293:19">.</operator><name pos:start="6293:20" pos:end="6293:25">l_type</name></name> <operator pos:start="6293:27" pos:end="6293:27">=</operator> <call pos:start="6293:29" pos:end="6293:54"><name pos:start="6293:29" pos:end="6293:35">tswap16</name><argument_list pos:start="6293:36" pos:end="6293:54">(<argument pos:start="6293:37" pos:end="6293:53"><expr pos:start="6293:37" pos:end="6293:53"><name pos:start="6293:37" pos:end="6293:53"><name pos:start="6293:37" pos:end="6293:45">target_fl</name><operator pos:start="6293:46" pos:end="6293:47">-&gt;</operator><name pos:start="6293:48" pos:end="6293:53">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6295:17" pos:end="6295:59"><expr pos:start="6295:17" pos:end="6295:58"><name pos:start="6295:17" pos:end="6295:27"><name pos:start="6295:17" pos:end="6295:18">fl</name><operator pos:start="6295:19" pos:end="6295:19">.</operator><name pos:start="6295:20" pos:end="6295:27">l_whence</name></name> <operator pos:start="6295:29" pos:end="6295:29">=</operator> <call pos:start="6295:31" pos:end="6295:58"><name pos:start="6295:31" pos:end="6295:37">tswap16</name><argument_list pos:start="6295:38" pos:end="6295:58">(<argument pos:start="6295:39" pos:end="6295:57"><expr pos:start="6295:39" pos:end="6295:57"><name pos:start="6295:39" pos:end="6295:57"><name pos:start="6295:39" pos:end="6295:47">target_fl</name><operator pos:start="6295:48" pos:end="6295:49">-&gt;</operator><name pos:start="6295:50" pos:end="6295:57">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6297:17" pos:end="6297:57"><expr pos:start="6297:17" pos:end="6297:56"><name pos:start="6297:17" pos:end="6297:26"><name pos:start="6297:17" pos:end="6297:18">fl</name><operator pos:start="6297:19" pos:end="6297:19">.</operator><name pos:start="6297:20" pos:end="6297:26">l_start</name></name> <operator pos:start="6297:28" pos:end="6297:28">=</operator> <call pos:start="6297:30" pos:end="6297:56"><name pos:start="6297:30" pos:end="6297:36">tswap64</name><argument_list pos:start="6297:37" pos:end="6297:56">(<argument pos:start="6297:38" pos:end="6297:55"><expr pos:start="6297:38" pos:end="6297:55"><name pos:start="6297:38" pos:end="6297:55"><name pos:start="6297:38" pos:end="6297:46">target_fl</name><operator pos:start="6297:47" pos:end="6297:48">-&gt;</operator><name pos:start="6297:49" pos:end="6297:55">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6299:17" pos:end="6299:53"><expr pos:start="6299:17" pos:end="6299:52"><name pos:start="6299:17" pos:end="6299:24"><name pos:start="6299:17" pos:end="6299:18">fl</name><operator pos:start="6299:19" pos:end="6299:19">.</operator><name pos:start="6299:20" pos:end="6299:24">l_len</name></name> <operator pos:start="6299:26" pos:end="6299:26">=</operator> <call pos:start="6299:28" pos:end="6299:52"><name pos:start="6299:28" pos:end="6299:34">tswap64</name><argument_list pos:start="6299:35" pos:end="6299:52">(<argument pos:start="6299:36" pos:end="6299:51"><expr pos:start="6299:36" pos:end="6299:51"><name pos:start="6299:36" pos:end="6299:51"><name pos:start="6299:36" pos:end="6299:44">target_fl</name><operator pos:start="6299:45" pos:end="6299:46">-&gt;</operator><name pos:start="6299:47" pos:end="6299:51">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6301:17" pos:end="6301:53"><expr pos:start="6301:17" pos:end="6301:52"><name pos:start="6301:17" pos:end="6301:24"><name pos:start="6301:17" pos:end="6301:18">fl</name><operator pos:start="6301:19" pos:end="6301:19">.</operator><name pos:start="6301:20" pos:end="6301:24">l_pid</name></name> <operator pos:start="6301:26" pos:end="6301:26">=</operator> <call pos:start="6301:28" pos:end="6301:52"><name pos:start="6301:28" pos:end="6301:34">tswap32</name><argument_list pos:start="6301:35" pos:end="6301:52">(<argument pos:start="6301:36" pos:end="6301:51"><expr pos:start="6301:36" pos:end="6301:51"><name pos:start="6301:36" pos:end="6301:51"><name pos:start="6301:36" pos:end="6301:44">target_fl</name><operator pos:start="6301:45" pos:end="6301:46">-&gt;</operator><name pos:start="6301:47" pos:end="6301:51">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6303:17" pos:end="6303:55"><expr pos:start="6303:17" pos:end="6303:54"><call pos:start="6303:17" pos:end="6303:54"><name pos:start="6303:17" pos:end="6303:34">unlock_user_struct</name><argument_list pos:start="6303:35" pos:end="6303:54">(<argument pos:start="6303:36" pos:end="6303:44"><expr pos:start="6303:36" pos:end="6303:44"><name pos:start="6303:36" pos:end="6303:44">target_fl</name></expr></argument>, <argument pos:start="6303:47" pos:end="6303:50"><expr pos:start="6303:47" pos:end="6303:50"><name pos:start="6303:47" pos:end="6303:50">arg3</name></expr></argument>, <argument pos:start="6303:53" pos:end="6303:53"><expr pos:start="6303:53" pos:end="6303:53"><literal type="number" pos:start="6303:53" pos:end="6303:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6307:13" pos:end="6307:51"><expr pos:start="6307:13" pos:end="6307:50"><name pos:start="6307:13" pos:end="6307:15">ret</name> <operator pos:start="6307:17" pos:end="6307:17">=</operator> <call pos:start="6307:19" pos:end="6307:50"><name pos:start="6307:19" pos:end="6307:27">get_errno</name><argument_list pos:start="6307:28" pos:end="6307:50">(<argument pos:start="6307:29" pos:end="6307:49"><expr pos:start="6307:29" pos:end="6307:49"><call pos:start="6307:29" pos:end="6307:49"><name pos:start="6307:29" pos:end="6307:33">fcntl</name><argument_list pos:start="6307:34" pos:end="6307:49">(<argument pos:start="6307:35" pos:end="6307:38"><expr pos:start="6307:35" pos:end="6307:38"><name pos:start="6307:35" pos:end="6307:38">arg1</name></expr></argument>, <argument pos:start="6307:41" pos:end="6307:43"><expr pos:start="6307:41" pos:end="6307:43"><name pos:start="6307:41" pos:end="6307:43">cmd</name></expr></argument>, <argument pos:start="6307:46" pos:end="6307:48"><expr pos:start="6307:46" pos:end="6307:48"><operator pos:start="6307:46" pos:end="6307:46">&amp;</operator><name pos:start="6307:47" pos:end="6307:48">fl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="6309:13" pos:end="6355:13"><if pos:start="6309:13" pos:end="6355:13">if <condition pos:start="6309:16" pos:end="6309:25">(<expr pos:start="6309:17" pos:end="6309:24"><name pos:start="6309:17" pos:end="6309:19">ret</name> <operator pos:start="6309:21" pos:end="6309:22">==</operator> <literal type="number" pos:start="6309:24" pos:end="6309:24">0</literal></expr>)</condition> <block pos:start="6309:27" pos:end="6355:13">{<block_content pos:start="6313:17" pos:end="6353:17">

<cpp:ifdef pos:start="6311:1" pos:end="6311:17">#<cpp:directive pos:start="6311:2" pos:end="6311:6">ifdef</cpp:directive> <name pos:start="6311:8" pos:end="6311:17">TARGET_ARM</name></cpp:ifdef>

                <if_stmt pos:start="6313:17" pos:end="6353:17"><if pos:start="6313:17" pos:end="6331:17">if <condition pos:start="6313:20" pos:end="6313:51">(<expr pos:start="6313:21" pos:end="6313:50"><operator pos:start="6313:21" pos:end="6313:21">(</operator><operator pos:start="6313:22" pos:end="6313:22">(</operator><name pos:start="6313:23" pos:end="6313:33">CPUARMState</name> <operator pos:start="6313:35" pos:end="6313:35">*</operator><operator pos:start="6313:36" pos:end="6313:36">)</operator><name pos:start="6313:37" pos:end="6313:43">cpu_env</name><operator pos:start="6313:44" pos:end="6313:44">)</operator><operator pos:start="6313:45" pos:end="6313:46">-&gt;</operator><name pos:start="6313:47" pos:end="6313:50">eabi</name></expr>)</condition> <block pos:start="6313:53" pos:end="6331:17">{<block_content pos:start="6315:21" pos:end="6329:60">

                    <if_stmt pos:start="6315:21" pos:end="6317:36"><if pos:start="6315:21" pos:end="6317:36">if <condition pos:start="6315:24" pos:end="6315:77">(<expr pos:start="6315:25" pos:end="6315:76"><operator pos:start="6315:25" pos:end="6315:25">!</operator><call pos:start="6315:26" pos:end="6315:76"><name pos:start="6315:26" pos:end="6315:41">lock_user_struct</name><argument_list pos:start="6315:42" pos:end="6315:76">(<argument pos:start="6315:43" pos:end="6315:54"><expr pos:start="6315:43" pos:end="6315:54"><name pos:start="6315:43" pos:end="6315:54">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6315:57" pos:end="6315:66"><expr pos:start="6315:57" pos:end="6315:66"><name pos:start="6315:57" pos:end="6315:66">target_efl</name></expr></argument>, <argument pos:start="6315:69" pos:end="6315:72"><expr pos:start="6315:69" pos:end="6315:72"><name pos:start="6315:69" pos:end="6315:72">arg3</name></expr></argument>, <argument pos:start="6315:75" pos:end="6315:75"><expr pos:start="6315:75" pos:end="6315:75"><literal type="number" pos:start="6315:75" pos:end="6315:75">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6317:25" pos:end="6317:36"><block_content pos:start="6317:25" pos:end="6317:36"> 

                        <goto pos:start="6317:25" pos:end="6317:36">goto <name pos:start="6317:30" pos:end="6317:35">efault</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6319:21" pos:end="6319:60"><expr pos:start="6319:21" pos:end="6319:59"><name pos:start="6319:21" pos:end="6319:38"><name pos:start="6319:21" pos:end="6319:30">target_efl</name><operator pos:start="6319:31" pos:end="6319:32">-&gt;</operator><name pos:start="6319:33" pos:end="6319:38">l_type</name></name> <operator pos:start="6319:40" pos:end="6319:40">=</operator> <call pos:start="6319:42" pos:end="6319:59"><name pos:start="6319:42" pos:end="6319:48">tswap16</name><argument_list pos:start="6319:49" pos:end="6319:59">(<argument pos:start="6319:50" pos:end="6319:58"><expr pos:start="6319:50" pos:end="6319:58"><name pos:start="6319:50" pos:end="6319:58"><name pos:start="6319:50" pos:end="6319:51">fl</name><operator pos:start="6319:52" pos:end="6319:52">.</operator><name pos:start="6319:53" pos:end="6319:58">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6321:21" pos:end="6321:64"><expr pos:start="6321:21" pos:end="6321:63"><name pos:start="6321:21" pos:end="6321:40"><name pos:start="6321:21" pos:end="6321:30">target_efl</name><operator pos:start="6321:31" pos:end="6321:32">-&gt;</operator><name pos:start="6321:33" pos:end="6321:40">l_whence</name></name> <operator pos:start="6321:42" pos:end="6321:42">=</operator> <call pos:start="6321:44" pos:end="6321:63"><name pos:start="6321:44" pos:end="6321:50">tswap16</name><argument_list pos:start="6321:51" pos:end="6321:63">(<argument pos:start="6321:52" pos:end="6321:62"><expr pos:start="6321:52" pos:end="6321:62"><name pos:start="6321:52" pos:end="6321:62"><name pos:start="6321:52" pos:end="6321:53">fl</name><operator pos:start="6321:54" pos:end="6321:54">.</operator><name pos:start="6321:55" pos:end="6321:62">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6323:21" pos:end="6323:62"><expr pos:start="6323:21" pos:end="6323:61"><name pos:start="6323:21" pos:end="6323:39"><name pos:start="6323:21" pos:end="6323:30">target_efl</name><operator pos:start="6323:31" pos:end="6323:32">-&gt;</operator><name pos:start="6323:33" pos:end="6323:39">l_start</name></name> <operator pos:start="6323:41" pos:end="6323:41">=</operator> <call pos:start="6323:43" pos:end="6323:61"><name pos:start="6323:43" pos:end="6323:49">tswap64</name><argument_list pos:start="6323:50" pos:end="6323:61">(<argument pos:start="6323:51" pos:end="6323:60"><expr pos:start="6323:51" pos:end="6323:60"><name pos:start="6323:51" pos:end="6323:60"><name pos:start="6323:51" pos:end="6323:52">fl</name><operator pos:start="6323:53" pos:end="6323:53">.</operator><name pos:start="6323:54" pos:end="6323:60">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6325:21" pos:end="6325:58"><expr pos:start="6325:21" pos:end="6325:57"><name pos:start="6325:21" pos:end="6325:37"><name pos:start="6325:21" pos:end="6325:30">target_efl</name><operator pos:start="6325:31" pos:end="6325:32">-&gt;</operator><name pos:start="6325:33" pos:end="6325:37">l_len</name></name> <operator pos:start="6325:39" pos:end="6325:39">=</operator> <call pos:start="6325:41" pos:end="6325:57"><name pos:start="6325:41" pos:end="6325:47">tswap64</name><argument_list pos:start="6325:48" pos:end="6325:57">(<argument pos:start="6325:49" pos:end="6325:56"><expr pos:start="6325:49" pos:end="6325:56"><name pos:start="6325:49" pos:end="6325:56"><name pos:start="6325:49" pos:end="6325:50">fl</name><operator pos:start="6325:51" pos:end="6325:51">.</operator><name pos:start="6325:52" pos:end="6325:56">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6327:21" pos:end="6327:58"><expr pos:start="6327:21" pos:end="6327:57"><name pos:start="6327:21" pos:end="6327:37"><name pos:start="6327:21" pos:end="6327:30">target_efl</name><operator pos:start="6327:31" pos:end="6327:32">-&gt;</operator><name pos:start="6327:33" pos:end="6327:37">l_pid</name></name> <operator pos:start="6327:39" pos:end="6327:39">=</operator> <call pos:start="6327:41" pos:end="6327:57"><name pos:start="6327:41" pos:end="6327:47">tswap32</name><argument_list pos:start="6327:48" pos:end="6327:57">(<argument pos:start="6327:49" pos:end="6327:56"><expr pos:start="6327:49" pos:end="6327:56"><name pos:start="6327:49" pos:end="6327:56"><name pos:start="6327:49" pos:end="6327:50">fl</name><operator pos:start="6327:51" pos:end="6327:51">.</operator><name pos:start="6327:52" pos:end="6327:56">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6329:21" pos:end="6329:60"><expr pos:start="6329:21" pos:end="6329:59"><call pos:start="6329:21" pos:end="6329:59"><name pos:start="6329:21" pos:end="6329:38">unlock_user_struct</name><argument_list pos:start="6329:39" pos:end="6329:59">(<argument pos:start="6329:40" pos:end="6329:49"><expr pos:start="6329:40" pos:end="6329:49"><name pos:start="6329:40" pos:end="6329:49">target_efl</name></expr></argument>, <argument pos:start="6329:52" pos:end="6329:55"><expr pos:start="6329:52" pos:end="6329:55"><name pos:start="6329:52" pos:end="6329:55">arg3</name></expr></argument>, <argument pos:start="6329:58" pos:end="6329:58"><expr pos:start="6329:58" pos:end="6329:58"><literal type="number" pos:start="6329:58" pos:end="6329:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6331:19" pos:end="6353:17">else

<cpp:endif pos:start="6333:1" pos:end="6333:6">#<cpp:directive pos:start="6333:2" pos:end="6333:6">endif</cpp:directive></cpp:endif>

                <block pos:start="6335:17" pos:end="6353:17">{<block_content pos:start="6337:21" pos:end="6351:59">

                    <if_stmt pos:start="6337:21" pos:end="6339:36"><if pos:start="6337:21" pos:end="6339:36">if <condition pos:start="6337:24" pos:end="6337:76">(<expr pos:start="6337:25" pos:end="6337:75"><operator pos:start="6337:25" pos:end="6337:25">!</operator><call pos:start="6337:26" pos:end="6337:75"><name pos:start="6337:26" pos:end="6337:41">lock_user_struct</name><argument_list pos:start="6337:42" pos:end="6337:75">(<argument pos:start="6337:43" pos:end="6337:54"><expr pos:start="6337:43" pos:end="6337:54"><name pos:start="6337:43" pos:end="6337:54">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6337:57" pos:end="6337:65"><expr pos:start="6337:57" pos:end="6337:65"><name pos:start="6337:57" pos:end="6337:65">target_fl</name></expr></argument>, <argument pos:start="6337:68" pos:end="6337:71"><expr pos:start="6337:68" pos:end="6337:71"><name pos:start="6337:68" pos:end="6337:71">arg3</name></expr></argument>, <argument pos:start="6337:74" pos:end="6337:74"><expr pos:start="6337:74" pos:end="6337:74"><literal type="number" pos:start="6337:74" pos:end="6337:74">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6339:25" pos:end="6339:36"><block_content pos:start="6339:25" pos:end="6339:36"> 

                        <goto pos:start="6339:25" pos:end="6339:36">goto <name pos:start="6339:30" pos:end="6339:35">efault</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="6341:21" pos:end="6341:59"><expr pos:start="6341:21" pos:end="6341:58"><name pos:start="6341:21" pos:end="6341:37"><name pos:start="6341:21" pos:end="6341:29">target_fl</name><operator pos:start="6341:30" pos:end="6341:31">-&gt;</operator><name pos:start="6341:32" pos:end="6341:37">l_type</name></name> <operator pos:start="6341:39" pos:end="6341:39">=</operator> <call pos:start="6341:41" pos:end="6341:58"><name pos:start="6341:41" pos:end="6341:47">tswap16</name><argument_list pos:start="6341:48" pos:end="6341:58">(<argument pos:start="6341:49" pos:end="6341:57"><expr pos:start="6341:49" pos:end="6341:57"><name pos:start="6341:49" pos:end="6341:57"><name pos:start="6341:49" pos:end="6341:50">fl</name><operator pos:start="6341:51" pos:end="6341:51">.</operator><name pos:start="6341:52" pos:end="6341:57">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6343:21" pos:end="6343:63"><expr pos:start="6343:21" pos:end="6343:62"><name pos:start="6343:21" pos:end="6343:39"><name pos:start="6343:21" pos:end="6343:29">target_fl</name><operator pos:start="6343:30" pos:end="6343:31">-&gt;</operator><name pos:start="6343:32" pos:end="6343:39">l_whence</name></name> <operator pos:start="6343:41" pos:end="6343:41">=</operator> <call pos:start="6343:43" pos:end="6343:62"><name pos:start="6343:43" pos:end="6343:49">tswap16</name><argument_list pos:start="6343:50" pos:end="6343:62">(<argument pos:start="6343:51" pos:end="6343:61"><expr pos:start="6343:51" pos:end="6343:61"><name pos:start="6343:51" pos:end="6343:61"><name pos:start="6343:51" pos:end="6343:52">fl</name><operator pos:start="6343:53" pos:end="6343:53">.</operator><name pos:start="6343:54" pos:end="6343:61">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6345:21" pos:end="6345:61"><expr pos:start="6345:21" pos:end="6345:60"><name pos:start="6345:21" pos:end="6345:38"><name pos:start="6345:21" pos:end="6345:29">target_fl</name><operator pos:start="6345:30" pos:end="6345:31">-&gt;</operator><name pos:start="6345:32" pos:end="6345:38">l_start</name></name> <operator pos:start="6345:40" pos:end="6345:40">=</operator> <call pos:start="6345:42" pos:end="6345:60"><name pos:start="6345:42" pos:end="6345:48">tswap64</name><argument_list pos:start="6345:49" pos:end="6345:60">(<argument pos:start="6345:50" pos:end="6345:59"><expr pos:start="6345:50" pos:end="6345:59"><name pos:start="6345:50" pos:end="6345:59"><name pos:start="6345:50" pos:end="6345:51">fl</name><operator pos:start="6345:52" pos:end="6345:52">.</operator><name pos:start="6345:53" pos:end="6345:59">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6347:21" pos:end="6347:57"><expr pos:start="6347:21" pos:end="6347:56"><name pos:start="6347:21" pos:end="6347:36"><name pos:start="6347:21" pos:end="6347:29">target_fl</name><operator pos:start="6347:30" pos:end="6347:31">-&gt;</operator><name pos:start="6347:32" pos:end="6347:36">l_len</name></name> <operator pos:start="6347:38" pos:end="6347:38">=</operator> <call pos:start="6347:40" pos:end="6347:56"><name pos:start="6347:40" pos:end="6347:46">tswap64</name><argument_list pos:start="6347:47" pos:end="6347:56">(<argument pos:start="6347:48" pos:end="6347:55"><expr pos:start="6347:48" pos:end="6347:55"><name pos:start="6347:48" pos:end="6347:55"><name pos:start="6347:48" pos:end="6347:49">fl</name><operator pos:start="6347:50" pos:end="6347:50">.</operator><name pos:start="6347:51" pos:end="6347:55">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6349:21" pos:end="6349:57"><expr pos:start="6349:21" pos:end="6349:56"><name pos:start="6349:21" pos:end="6349:36"><name pos:start="6349:21" pos:end="6349:29">target_fl</name><operator pos:start="6349:30" pos:end="6349:31">-&gt;</operator><name pos:start="6349:32" pos:end="6349:36">l_pid</name></name> <operator pos:start="6349:38" pos:end="6349:38">=</operator> <call pos:start="6349:40" pos:end="6349:56"><name pos:start="6349:40" pos:end="6349:46">tswap32</name><argument_list pos:start="6349:47" pos:end="6349:56">(<argument pos:start="6349:48" pos:end="6349:55"><expr pos:start="6349:48" pos:end="6349:55"><name pos:start="6349:48" pos:end="6349:55"><name pos:start="6349:48" pos:end="6349:49">fl</name><operator pos:start="6349:50" pos:end="6349:50">.</operator><name pos:start="6349:51" pos:end="6349:55">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="6351:21" pos:end="6351:59"><expr pos:start="6351:21" pos:end="6351:58"><call pos:start="6351:21" pos:end="6351:58"><name pos:start="6351:21" pos:end="6351:38">unlock_user_struct</name><argument_list pos:start="6351:39" pos:end="6351:58">(<argument pos:start="6351:40" pos:end="6351:48"><expr pos:start="6351:40" pos:end="6351:48"><name pos:start="6351:40" pos:end="6351:48">target_fl</name></expr></argument>, <argument pos:start="6351:51" pos:end="6351:54"><expr pos:start="6351:51" pos:end="6351:54"><name pos:start="6351:51" pos:end="6351:54">arg3</name></expr></argument>, <argument pos:start="6351:57" pos:end="6351:57"><expr pos:start="6351:57" pos:end="6351:57"><literal type="number" pos:start="6351:57" pos:end="6351:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

	    </block_content>}</block></if></if_stmt>

	    <break pos:start="6357:13" pos:end="6357:18">break;</break>



        <case pos:start="6361:9" pos:end="6361:30">case <expr pos:start="6361:14" pos:end="6361:29"><name pos:start="6361:14" pos:end="6361:29">TARGET_F_SETLK64</name></expr>:</case>

        <case pos:start="6363:9" pos:end="6366:0">case <expr pos:start="6363:14" pos:end="6363:30"><name pos:start="6363:14" pos:end="6363:30">TARGET_F_SETLKW64</name></expr>:</case>

<cpp:ifdef pos:start="6365:1" pos:end="6365:17">#<cpp:directive pos:start="6365:2" pos:end="6365:6">ifdef</cpp:directive> <name pos:start="6365:8" pos:end="6365:17">TARGET_ARM</name></cpp:ifdef>

            <if_stmt pos:start="6367:13" pos:end="6407:13"><if pos:start="6367:13" pos:end="6385:13">if <condition pos:start="6367:16" pos:end="6367:47">(<expr pos:start="6367:17" pos:end="6367:46"><operator pos:start="6367:17" pos:end="6367:17">(</operator><operator pos:start="6367:18" pos:end="6367:18">(</operator><name pos:start="6367:19" pos:end="6367:29">CPUARMState</name> <operator pos:start="6367:31" pos:end="6367:31">*</operator><operator pos:start="6367:32" pos:end="6367:32">)</operator><name pos:start="6367:33" pos:end="6367:39">cpu_env</name><operator pos:start="6367:40" pos:end="6367:40">)</operator><operator pos:start="6367:41" pos:end="6367:42">-&gt;</operator><name pos:start="6367:43" pos:end="6367:46">eabi</name></expr>)</condition> <block pos:start="6367:49" pos:end="6385:13">{<block_content pos:start="6369:17" pos:end="6383:56">

                <if_stmt pos:start="6369:17" pos:end="6371:32"><if pos:start="6369:17" pos:end="6371:32">if <condition pos:start="6369:20" pos:end="6369:72">(<expr pos:start="6369:21" pos:end="6369:71"><operator pos:start="6369:21" pos:end="6369:21">!</operator><call pos:start="6369:22" pos:end="6369:71"><name pos:start="6369:22" pos:end="6369:37">lock_user_struct</name><argument_list pos:start="6369:38" pos:end="6369:71">(<argument pos:start="6369:39" pos:end="6369:49"><expr pos:start="6369:39" pos:end="6369:49"><name pos:start="6369:39" pos:end="6369:49">VERIFY_READ</name></expr></argument>, <argument pos:start="6369:52" pos:end="6369:61"><expr pos:start="6369:52" pos:end="6369:61"><name pos:start="6369:52" pos:end="6369:61">target_efl</name></expr></argument>, <argument pos:start="6369:64" pos:end="6369:67"><expr pos:start="6369:64" pos:end="6369:67"><name pos:start="6369:64" pos:end="6369:67">arg3</name></expr></argument>, <argument pos:start="6369:70" pos:end="6369:70"><expr pos:start="6369:70" pos:end="6369:70"><literal type="number" pos:start="6369:70" pos:end="6369:70">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6371:21" pos:end="6371:32"><block_content pos:start="6371:21" pos:end="6371:32"> 

                    <goto pos:start="6371:21" pos:end="6371:32">goto <name pos:start="6371:26" pos:end="6371:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6373:17" pos:end="6373:56"><expr pos:start="6373:17" pos:end="6373:55"><name pos:start="6373:17" pos:end="6373:25"><name pos:start="6373:17" pos:end="6373:18">fl</name><operator pos:start="6373:19" pos:end="6373:19">.</operator><name pos:start="6373:20" pos:end="6373:25">l_type</name></name> <operator pos:start="6373:27" pos:end="6373:27">=</operator> <call pos:start="6373:29" pos:end="6373:55"><name pos:start="6373:29" pos:end="6373:35">tswap16</name><argument_list pos:start="6373:36" pos:end="6373:55">(<argument pos:start="6373:37" pos:end="6373:54"><expr pos:start="6373:37" pos:end="6373:54"><name pos:start="6373:37" pos:end="6373:54"><name pos:start="6373:37" pos:end="6373:46">target_efl</name><operator pos:start="6373:47" pos:end="6373:48">-&gt;</operator><name pos:start="6373:49" pos:end="6373:54">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6375:17" pos:end="6375:60"><expr pos:start="6375:17" pos:end="6375:59"><name pos:start="6375:17" pos:end="6375:27"><name pos:start="6375:17" pos:end="6375:18">fl</name><operator pos:start="6375:19" pos:end="6375:19">.</operator><name pos:start="6375:20" pos:end="6375:27">l_whence</name></name> <operator pos:start="6375:29" pos:end="6375:29">=</operator> <call pos:start="6375:31" pos:end="6375:59"><name pos:start="6375:31" pos:end="6375:37">tswap16</name><argument_list pos:start="6375:38" pos:end="6375:59">(<argument pos:start="6375:39" pos:end="6375:58"><expr pos:start="6375:39" pos:end="6375:58"><name pos:start="6375:39" pos:end="6375:58"><name pos:start="6375:39" pos:end="6375:48">target_efl</name><operator pos:start="6375:49" pos:end="6375:50">-&gt;</operator><name pos:start="6375:51" pos:end="6375:58">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6377:17" pos:end="6377:58"><expr pos:start="6377:17" pos:end="6377:57"><name pos:start="6377:17" pos:end="6377:26"><name pos:start="6377:17" pos:end="6377:18">fl</name><operator pos:start="6377:19" pos:end="6377:19">.</operator><name pos:start="6377:20" pos:end="6377:26">l_start</name></name> <operator pos:start="6377:28" pos:end="6377:28">=</operator> <call pos:start="6377:30" pos:end="6377:57"><name pos:start="6377:30" pos:end="6377:36">tswap64</name><argument_list pos:start="6377:37" pos:end="6377:57">(<argument pos:start="6377:38" pos:end="6377:56"><expr pos:start="6377:38" pos:end="6377:56"><name pos:start="6377:38" pos:end="6377:56"><name pos:start="6377:38" pos:end="6377:47">target_efl</name><operator pos:start="6377:48" pos:end="6377:49">-&gt;</operator><name pos:start="6377:50" pos:end="6377:56">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6379:17" pos:end="6379:54"><expr pos:start="6379:17" pos:end="6379:53"><name pos:start="6379:17" pos:end="6379:24"><name pos:start="6379:17" pos:end="6379:18">fl</name><operator pos:start="6379:19" pos:end="6379:19">.</operator><name pos:start="6379:20" pos:end="6379:24">l_len</name></name> <operator pos:start="6379:26" pos:end="6379:26">=</operator> <call pos:start="6379:28" pos:end="6379:53"><name pos:start="6379:28" pos:end="6379:34">tswap64</name><argument_list pos:start="6379:35" pos:end="6379:53">(<argument pos:start="6379:36" pos:end="6379:52"><expr pos:start="6379:36" pos:end="6379:52"><name pos:start="6379:36" pos:end="6379:52"><name pos:start="6379:36" pos:end="6379:45">target_efl</name><operator pos:start="6379:46" pos:end="6379:47">-&gt;</operator><name pos:start="6379:48" pos:end="6379:52">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6381:17" pos:end="6381:54"><expr pos:start="6381:17" pos:end="6381:53"><name pos:start="6381:17" pos:end="6381:24"><name pos:start="6381:17" pos:end="6381:18">fl</name><operator pos:start="6381:19" pos:end="6381:19">.</operator><name pos:start="6381:20" pos:end="6381:24">l_pid</name></name> <operator pos:start="6381:26" pos:end="6381:26">=</operator> <call pos:start="6381:28" pos:end="6381:53"><name pos:start="6381:28" pos:end="6381:34">tswap32</name><argument_list pos:start="6381:35" pos:end="6381:53">(<argument pos:start="6381:36" pos:end="6381:52"><expr pos:start="6381:36" pos:end="6381:52"><name pos:start="6381:36" pos:end="6381:52"><name pos:start="6381:36" pos:end="6381:45">target_efl</name><operator pos:start="6381:46" pos:end="6381:47">-&gt;</operator><name pos:start="6381:48" pos:end="6381:52">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6383:17" pos:end="6383:56"><expr pos:start="6383:17" pos:end="6383:55"><call pos:start="6383:17" pos:end="6383:55"><name pos:start="6383:17" pos:end="6383:34">unlock_user_struct</name><argument_list pos:start="6383:35" pos:end="6383:55">(<argument pos:start="6383:36" pos:end="6383:45"><expr pos:start="6383:36" pos:end="6383:45"><name pos:start="6383:36" pos:end="6383:45">target_efl</name></expr></argument>, <argument pos:start="6383:48" pos:end="6383:51"><expr pos:start="6383:48" pos:end="6383:51"><name pos:start="6383:48" pos:end="6383:51">arg3</name></expr></argument>, <argument pos:start="6383:54" pos:end="6383:54"><expr pos:start="6383:54" pos:end="6383:54"><literal type="number" pos:start="6383:54" pos:end="6383:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6385:15" pos:end="6407:13">else

<cpp:endif pos:start="6387:1" pos:end="6387:6">#<cpp:directive pos:start="6387:2" pos:end="6387:6">endif</cpp:directive></cpp:endif>

            <block pos:start="6389:13" pos:end="6407:13">{<block_content pos:start="6391:17" pos:end="6405:55">

                <if_stmt pos:start="6391:17" pos:end="6393:32"><if pos:start="6391:17" pos:end="6393:32">if <condition pos:start="6391:20" pos:end="6391:71">(<expr pos:start="6391:21" pos:end="6391:70"><operator pos:start="6391:21" pos:end="6391:21">!</operator><call pos:start="6391:22" pos:end="6391:70"><name pos:start="6391:22" pos:end="6391:37">lock_user_struct</name><argument_list pos:start="6391:38" pos:end="6391:70">(<argument pos:start="6391:39" pos:end="6391:49"><expr pos:start="6391:39" pos:end="6391:49"><name pos:start="6391:39" pos:end="6391:49">VERIFY_READ</name></expr></argument>, <argument pos:start="6391:52" pos:end="6391:60"><expr pos:start="6391:52" pos:end="6391:60"><name pos:start="6391:52" pos:end="6391:60">target_fl</name></expr></argument>, <argument pos:start="6391:63" pos:end="6391:66"><expr pos:start="6391:63" pos:end="6391:66"><name pos:start="6391:63" pos:end="6391:66">arg3</name></expr></argument>, <argument pos:start="6391:69" pos:end="6391:69"><expr pos:start="6391:69" pos:end="6391:69"><literal type="number" pos:start="6391:69" pos:end="6391:69">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6393:21" pos:end="6393:32"><block_content pos:start="6393:21" pos:end="6393:32"> 

                    <goto pos:start="6393:21" pos:end="6393:32">goto <name pos:start="6393:26" pos:end="6393:31">efault</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="6395:17" pos:end="6395:55"><expr pos:start="6395:17" pos:end="6395:54"><name pos:start="6395:17" pos:end="6395:25"><name pos:start="6395:17" pos:end="6395:18">fl</name><operator pos:start="6395:19" pos:end="6395:19">.</operator><name pos:start="6395:20" pos:end="6395:25">l_type</name></name> <operator pos:start="6395:27" pos:end="6395:27">=</operator> <call pos:start="6395:29" pos:end="6395:54"><name pos:start="6395:29" pos:end="6395:35">tswap16</name><argument_list pos:start="6395:36" pos:end="6395:54">(<argument pos:start="6395:37" pos:end="6395:53"><expr pos:start="6395:37" pos:end="6395:53"><name pos:start="6395:37" pos:end="6395:53"><name pos:start="6395:37" pos:end="6395:45">target_fl</name><operator pos:start="6395:46" pos:end="6395:47">-&gt;</operator><name pos:start="6395:48" pos:end="6395:53">l_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6397:17" pos:end="6397:59"><expr pos:start="6397:17" pos:end="6397:58"><name pos:start="6397:17" pos:end="6397:27"><name pos:start="6397:17" pos:end="6397:18">fl</name><operator pos:start="6397:19" pos:end="6397:19">.</operator><name pos:start="6397:20" pos:end="6397:27">l_whence</name></name> <operator pos:start="6397:29" pos:end="6397:29">=</operator> <call pos:start="6397:31" pos:end="6397:58"><name pos:start="6397:31" pos:end="6397:37">tswap16</name><argument_list pos:start="6397:38" pos:end="6397:58">(<argument pos:start="6397:39" pos:end="6397:57"><expr pos:start="6397:39" pos:end="6397:57"><name pos:start="6397:39" pos:end="6397:57"><name pos:start="6397:39" pos:end="6397:47">target_fl</name><operator pos:start="6397:48" pos:end="6397:49">-&gt;</operator><name pos:start="6397:50" pos:end="6397:57">l_whence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6399:17" pos:end="6399:57"><expr pos:start="6399:17" pos:end="6399:56"><name pos:start="6399:17" pos:end="6399:26"><name pos:start="6399:17" pos:end="6399:18">fl</name><operator pos:start="6399:19" pos:end="6399:19">.</operator><name pos:start="6399:20" pos:end="6399:26">l_start</name></name> <operator pos:start="6399:28" pos:end="6399:28">=</operator> <call pos:start="6399:30" pos:end="6399:56"><name pos:start="6399:30" pos:end="6399:36">tswap64</name><argument_list pos:start="6399:37" pos:end="6399:56">(<argument pos:start="6399:38" pos:end="6399:55"><expr pos:start="6399:38" pos:end="6399:55"><name pos:start="6399:38" pos:end="6399:55"><name pos:start="6399:38" pos:end="6399:46">target_fl</name><operator pos:start="6399:47" pos:end="6399:48">-&gt;</operator><name pos:start="6399:49" pos:end="6399:55">l_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6401:17" pos:end="6401:53"><expr pos:start="6401:17" pos:end="6401:52"><name pos:start="6401:17" pos:end="6401:24"><name pos:start="6401:17" pos:end="6401:18">fl</name><operator pos:start="6401:19" pos:end="6401:19">.</operator><name pos:start="6401:20" pos:end="6401:24">l_len</name></name> <operator pos:start="6401:26" pos:end="6401:26">=</operator> <call pos:start="6401:28" pos:end="6401:52"><name pos:start="6401:28" pos:end="6401:34">tswap64</name><argument_list pos:start="6401:35" pos:end="6401:52">(<argument pos:start="6401:36" pos:end="6401:51"><expr pos:start="6401:36" pos:end="6401:51"><name pos:start="6401:36" pos:end="6401:51"><name pos:start="6401:36" pos:end="6401:44">target_fl</name><operator pos:start="6401:45" pos:end="6401:46">-&gt;</operator><name pos:start="6401:47" pos:end="6401:51">l_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6403:17" pos:end="6403:53"><expr pos:start="6403:17" pos:end="6403:52"><name pos:start="6403:17" pos:end="6403:24"><name pos:start="6403:17" pos:end="6403:18">fl</name><operator pos:start="6403:19" pos:end="6403:19">.</operator><name pos:start="6403:20" pos:end="6403:24">l_pid</name></name> <operator pos:start="6403:26" pos:end="6403:26">=</operator> <call pos:start="6403:28" pos:end="6403:52"><name pos:start="6403:28" pos:end="6403:34">tswap32</name><argument_list pos:start="6403:35" pos:end="6403:52">(<argument pos:start="6403:36" pos:end="6403:51"><expr pos:start="6403:36" pos:end="6403:51"><name pos:start="6403:36" pos:end="6403:51"><name pos:start="6403:36" pos:end="6403:44">target_fl</name><operator pos:start="6403:45" pos:end="6403:46">-&gt;</operator><name pos:start="6403:47" pos:end="6403:51">l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="6405:17" pos:end="6405:55"><expr pos:start="6405:17" pos:end="6405:54"><call pos:start="6405:17" pos:end="6405:54"><name pos:start="6405:17" pos:end="6405:34">unlock_user_struct</name><argument_list pos:start="6405:35" pos:end="6405:54">(<argument pos:start="6405:36" pos:end="6405:44"><expr pos:start="6405:36" pos:end="6405:44"><name pos:start="6405:36" pos:end="6405:44">target_fl</name></expr></argument>, <argument pos:start="6405:47" pos:end="6405:50"><expr pos:start="6405:47" pos:end="6405:50"><name pos:start="6405:47" pos:end="6405:50">arg3</name></expr></argument>, <argument pos:start="6405:53" pos:end="6405:53"><expr pos:start="6405:53" pos:end="6405:53"><literal type="number" pos:start="6405:53" pos:end="6405:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6409:13" pos:end="6409:51"><expr pos:start="6409:13" pos:end="6409:50"><name pos:start="6409:13" pos:end="6409:15">ret</name> <operator pos:start="6409:17" pos:end="6409:17">=</operator> <call pos:start="6409:19" pos:end="6409:50"><name pos:start="6409:19" pos:end="6409:27">get_errno</name><argument_list pos:start="6409:28" pos:end="6409:50">(<argument pos:start="6409:29" pos:end="6409:49"><expr pos:start="6409:29" pos:end="6409:49"><call pos:start="6409:29" pos:end="6409:49"><name pos:start="6409:29" pos:end="6409:33">fcntl</name><argument_list pos:start="6409:34" pos:end="6409:49">(<argument pos:start="6409:35" pos:end="6409:38"><expr pos:start="6409:35" pos:end="6409:38"><name pos:start="6409:35" pos:end="6409:38">arg1</name></expr></argument>, <argument pos:start="6409:41" pos:end="6409:43"><expr pos:start="6409:41" pos:end="6409:43"><name pos:start="6409:41" pos:end="6409:43">cmd</name></expr></argument>, <argument pos:start="6409:46" pos:end="6409:48"><expr pos:start="6409:46" pos:end="6409:48"><operator pos:start="6409:46" pos:end="6409:46">&amp;</operator><name pos:start="6409:47" pos:end="6409:48">fl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <break pos:start="6411:13" pos:end="6411:18">break;</break>

        <default pos:start="6413:9" pos:end="6413:16">default:</default>

            <expr_stmt pos:start="6415:13" pos:end="6415:45"><expr pos:start="6415:13" pos:end="6415:44"><name pos:start="6415:13" pos:end="6415:15">ret</name> <operator pos:start="6415:17" pos:end="6415:17">=</operator> <call pos:start="6415:19" pos:end="6415:44"><name pos:start="6415:19" pos:end="6415:26">do_fcntl</name><argument_list pos:start="6415:27" pos:end="6415:44">(<argument pos:start="6415:28" pos:end="6415:31"><expr pos:start="6415:28" pos:end="6415:31"><name pos:start="6415:28" pos:end="6415:31">arg1</name></expr></argument>, <argument pos:start="6415:34" pos:end="6415:37"><expr pos:start="6415:34" pos:end="6415:37"><name pos:start="6415:34" pos:end="6415:37">arg2</name></expr></argument>, <argument pos:start="6415:40" pos:end="6415:43"><expr pos:start="6415:40" pos:end="6415:43"><name pos:start="6415:40" pos:end="6415:43">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="6417:13" pos:end="6417:18">break;</break>

        </block_content>}</block></switch>

	<break pos:start="6421:9" pos:end="6421:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="6425:1" pos:end="6425:6">#<cpp:directive pos:start="6425:2" pos:end="6425:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6427:1" pos:end="6427:27">#<cpp:directive pos:start="6427:2" pos:end="6427:6">ifdef</cpp:directive> <name pos:start="6427:8" pos:end="6427:27">TARGET_NR_cacheflush</name></cpp:ifdef>

    <case pos:start="6429:5" pos:end="6429:30">case <expr pos:start="6429:10" pos:end="6429:29"><name pos:start="6429:10" pos:end="6429:29">TARGET_NR_cacheflush</name></expr>:</case>

        <comment type="block" pos:start="6431:9" pos:end="6431:77">/* self-modifying code is handled automatically, so nothing needed */</comment>


        <break pos:start="6434:9" pos:end="6439:0">break;</break>

<cpp:endif pos:start="6436:1" pos:end="6436:6">#<cpp:directive pos:start="6436:2" pos:end="6436:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6438:1" pos:end="6438:25">#<cpp:directive pos:start="6438:2" pos:end="6438:6">ifdef</cpp:directive> <name pos:start="6438:8" pos:end="6438:25">TARGET_NR_security</name></cpp:ifdef>

    <case pos:start="6440:5" pos:end="6440:28">case <expr pos:start="6440:10" pos:end="6440:27"><name pos:start="6440:10" pos:end="6440:27">TARGET_NR_security</name></expr>:</case>

        <goto pos:start="6442:9" pos:end="6447:0">goto <name pos:start="6442:14" pos:end="6442:26">unimplemented</name>;</goto>

<cpp:endif pos:start="6444:1" pos:end="6444:6">#<cpp:directive pos:start="6444:2" pos:end="6444:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6446:1" pos:end="6446:28">#<cpp:directive pos:start="6446:2" pos:end="6446:6">ifdef</cpp:directive> <name pos:start="6446:8" pos:end="6446:28">TARGET_NR_getpagesize</name></cpp:ifdef>

    <case pos:start="6448:5" pos:end="6448:31">case <expr pos:start="6448:10" pos:end="6448:30"><name pos:start="6448:10" pos:end="6448:30">TARGET_NR_getpagesize</name></expr>:</case>

        <expr_stmt pos:start="6450:9" pos:end="6450:31"><expr pos:start="6450:9" pos:end="6450:30"><name pos:start="6450:9" pos:end="6450:11">ret</name> <operator pos:start="6450:13" pos:end="6450:13">=</operator> <name pos:start="6450:15" pos:end="6450:30">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

        <break pos:start="6452:9" pos:end="6455:0">break;</break>

<cpp:endif pos:start="6454:1" pos:end="6454:6">#<cpp:directive pos:start="6454:2" pos:end="6454:6">endif</cpp:directive></cpp:endif>

    <case pos:start="6456:5" pos:end="6456:26">case <expr pos:start="6456:10" pos:end="6456:25"><name pos:start="6456:10" pos:end="6456:25">TARGET_NR_gettid</name></expr>:</case>

        <expr_stmt pos:start="6458:9" pos:end="6458:34"><expr pos:start="6458:9" pos:end="6458:33"><name pos:start="6458:9" pos:end="6458:11">ret</name> <operator pos:start="6458:13" pos:end="6458:13">=</operator> <call pos:start="6458:15" pos:end="6458:33"><name pos:start="6458:15" pos:end="6458:23">get_errno</name><argument_list pos:start="6458:24" pos:end="6458:33">(<argument pos:start="6458:25" pos:end="6458:32"><expr pos:start="6458:25" pos:end="6458:32"><call pos:start="6458:25" pos:end="6458:32"><name pos:start="6458:25" pos:end="6458:30">gettid</name><argument_list pos:start="6458:31" pos:end="6458:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6460:9" pos:end="6463:0">break;</break>

<cpp:ifdef pos:start="6462:1" pos:end="6462:26">#<cpp:directive pos:start="6462:2" pos:end="6462:6">ifdef</cpp:directive> <name pos:start="6462:8" pos:end="6462:26">TARGET_NR_readahead</name></cpp:ifdef>

    <case pos:start="6464:5" pos:end="6467:0">case <expr pos:start="6464:10" pos:end="6464:28"><name pos:start="6464:10" pos:end="6464:28">TARGET_NR_readahead</name></expr>:</case>

<cpp:if pos:start="6466:1" pos:end="6466:25">#<cpp:directive pos:start="6466:2" pos:end="6466:3">if</cpp:directive> <expr pos:start="6466:5" pos:end="6466:25"><name pos:start="6466:5" pos:end="6466:19">TARGET_ABI_BITS</name> <operator pos:start="6466:21" pos:end="6466:22">==</operator> <literal type="number" pos:start="6466:24" pos:end="6466:25">32</literal></expr></cpp:if>

        <if_stmt pos:start="6468:9" pos:end="6476:9"><if pos:start="6468:9" pos:end="6476:9">if <condition pos:start="6468:12" pos:end="6468:38">(<expr pos:start="6468:13" pos:end="6468:37"><call pos:start="6468:13" pos:end="6468:37"><name pos:start="6468:13" pos:end="6468:28">regpairs_aligned</name><argument_list pos:start="6468:29" pos:end="6468:37">(<argument pos:start="6468:30" pos:end="6468:36"><expr pos:start="6468:30" pos:end="6468:36"><name pos:start="6468:30" pos:end="6468:36">cpu_env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6468:40" pos:end="6476:9">{<block_content pos:start="6470:13" pos:end="6474:24">

            <expr_stmt pos:start="6470:13" pos:end="6470:24"><expr pos:start="6470:13" pos:end="6470:23"><name pos:start="6470:13" pos:end="6470:16">arg2</name> <operator pos:start="6470:18" pos:end="6470:18">=</operator> <name pos:start="6470:20" pos:end="6470:23">arg3</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6472:13" pos:end="6472:24"><expr pos:start="6472:13" pos:end="6472:23"><name pos:start="6472:13" pos:end="6472:16">arg3</name> <operator pos:start="6472:18" pos:end="6472:18">=</operator> <name pos:start="6472:20" pos:end="6472:23">arg4</name></expr>;</expr_stmt>

            <expr_stmt pos:start="6474:13" pos:end="6474:24"><expr pos:start="6474:13" pos:end="6474:23"><name pos:start="6474:13" pos:end="6474:16">arg4</name> <operator pos:start="6474:18" pos:end="6474:18">=</operator> <name pos:start="6474:20" pos:end="6474:23">arg5</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="6478:9" pos:end="6481:0"><expr pos:start="6478:9" pos:end="6478:76"><name pos:start="6478:9" pos:end="6478:11">ret</name> <operator pos:start="6478:13" pos:end="6478:13">=</operator> <call pos:start="6478:15" pos:end="6478:76"><name pos:start="6478:15" pos:end="6478:23">get_errno</name><argument_list pos:start="6478:24" pos:end="6478:76">(<argument pos:start="6478:25" pos:end="6478:75"><expr pos:start="6478:25" pos:end="6478:75"><call pos:start="6478:25" pos:end="6478:75"><name pos:start="6478:25" pos:end="6478:33">readahead</name><argument_list pos:start="6478:34" pos:end="6478:75">(<argument pos:start="6478:35" pos:end="6478:38"><expr pos:start="6478:35" pos:end="6478:38"><name pos:start="6478:35" pos:end="6478:38">arg1</name></expr></argument>, <argument pos:start="6478:41" pos:end="6478:68"><expr pos:start="6478:41" pos:end="6478:68"><operator pos:start="6478:41" pos:end="6478:41">(</operator><operator pos:start="6478:42" pos:end="6478:42">(</operator><name pos:start="6478:43" pos:end="6478:49">off64_t</name><operator pos:start="6478:50" pos:end="6478:50">)</operator><name pos:start="6478:51" pos:end="6478:54">arg3</name> <operator pos:start="6478:56" pos:end="6478:57">&lt;&lt;</operator> <literal type="number" pos:start="6478:59" pos:end="6478:60">32</literal><operator pos:start="6478:61" pos:end="6478:61">)</operator> <operator pos:start="6478:63" pos:end="6478:63">|</operator> <name pos:start="6478:65" pos:end="6478:68">arg2</name></expr></argument>, <argument pos:start="6478:71" pos:end="6478:74"><expr pos:start="6478:71" pos:end="6478:74"><name pos:start="6478:71" pos:end="6478:74">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="6480:1" pos:end="6480:5">#<cpp:directive pos:start="6480:2" pos:end="6480:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="6482:9" pos:end="6485:0"><expr pos:start="6482:9" pos:end="6482:52"><name pos:start="6482:9" pos:end="6482:11">ret</name> <operator pos:start="6482:13" pos:end="6482:13">=</operator> <call pos:start="6482:15" pos:end="6482:52"><name pos:start="6482:15" pos:end="6482:23">get_errno</name><argument_list pos:start="6482:24" pos:end="6482:52">(<argument pos:start="6482:25" pos:end="6482:51"><expr pos:start="6482:25" pos:end="6482:51"><call pos:start="6482:25" pos:end="6482:51"><name pos:start="6482:25" pos:end="6482:33">readahead</name><argument_list pos:start="6482:34" pos:end="6482:51">(<argument pos:start="6482:35" pos:end="6482:38"><expr pos:start="6482:35" pos:end="6482:38"><name pos:start="6482:35" pos:end="6482:38">arg1</name></expr></argument>, <argument pos:start="6482:41" pos:end="6482:44"><expr pos:start="6482:41" pos:end="6482:44"><name pos:start="6482:41" pos:end="6482:44">arg2</name></expr></argument>, <argument pos:start="6482:47" pos:end="6482:50"><expr pos:start="6482:47" pos:end="6482:50"><name pos:start="6482:47" pos:end="6482:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="6484:1" pos:end="6484:6">#<cpp:directive pos:start="6484:2" pos:end="6484:6">endif</cpp:directive></cpp:endif>

        <break pos:start="6486:9" pos:end="6493:0">break;</break>

<cpp:endif pos:start="6488:1" pos:end="6488:6">#<cpp:directive pos:start="6488:2" pos:end="6488:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6490:1" pos:end="6490:18">#<cpp:directive pos:start="6490:2" pos:end="6490:6">ifdef</cpp:directive> <name pos:start="6490:8" pos:end="6490:18">CONFIG_ATTR</name></cpp:ifdef>

<cpp:ifdef pos:start="6492:1" pos:end="6492:25">#<cpp:directive pos:start="6492:2" pos:end="6492:6">ifdef</cpp:directive> <name pos:start="6492:8" pos:end="6492:25">TARGET_NR_setxattr</name></cpp:ifdef>

    <case pos:start="6494:5" pos:end="6494:29">case <expr pos:start="6494:10" pos:end="6494:28"><name pos:start="6494:10" pos:end="6494:28">TARGET_NR_listxattr</name></expr>:</case>

    <case pos:start="6496:5" pos:end="6496:30">case <expr pos:start="6496:10" pos:end="6496:29"><name pos:start="6496:10" pos:end="6496:29">TARGET_NR_llistxattr</name></expr>:</case>

    <block pos:start="6498:5" pos:end="6542:5">{<block_content pos:start="6500:9" pos:end="6540:14">

        <decl_stmt pos:start="6500:9" pos:end="6500:24"><decl pos:start="6500:9" pos:end="6500:15"><type pos:start="6500:9" pos:end="6500:14"><name pos:start="6500:9" pos:end="6500:12">void</name> <modifier pos:start="6500:14" pos:end="6500:14">*</modifier></type><name pos:start="6500:15" pos:end="6500:15">p</name></decl>, <decl pos:start="6500:18" pos:end="6500:23"><type ref="prev" pos:start="6500:9" pos:end="6500:14"><modifier pos:start="6500:18" pos:end="6500:18">*</modifier></type><name pos:start="6500:19" pos:end="6500:19">b</name> <init pos:start="6500:21" pos:end="6500:23">= <expr pos:start="6500:23" pos:end="6500:23"><literal type="number" pos:start="6500:23" pos:end="6500:23">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="6502:9" pos:end="6514:9"><if pos:start="6502:9" pos:end="6514:9">if <condition pos:start="6502:12" pos:end="6502:17">(<expr pos:start="6502:13" pos:end="6502:16"><name pos:start="6502:13" pos:end="6502:16">arg2</name></expr>)</condition> <block pos:start="6502:19" pos:end="6514:9">{<block_content pos:start="6504:13" pos:end="6512:13">

            <expr_stmt pos:start="6504:13" pos:end="6504:55"><expr pos:start="6504:13" pos:end="6504:54"><name pos:start="6504:13" pos:end="6504:13">b</name> <operator pos:start="6504:15" pos:end="6504:15">=</operator> <call pos:start="6504:17" pos:end="6504:54"><name pos:start="6504:17" pos:end="6504:25">lock_user</name><argument_list pos:start="6504:26" pos:end="6504:54">(<argument pos:start="6504:27" pos:end="6504:38"><expr pos:start="6504:27" pos:end="6504:38"><name pos:start="6504:27" pos:end="6504:38">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6504:41" pos:end="6504:44"><expr pos:start="6504:41" pos:end="6504:44"><name pos:start="6504:41" pos:end="6504:44">arg2</name></expr></argument>, <argument pos:start="6504:47" pos:end="6504:50"><expr pos:start="6504:47" pos:end="6504:50"><name pos:start="6504:47" pos:end="6504:50">arg3</name></expr></argument>, <argument pos:start="6504:53" pos:end="6504:53"><expr pos:start="6504:53" pos:end="6504:53"><literal type="number" pos:start="6504:53" pos:end="6504:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6506:13" pos:end="6512:13"><if pos:start="6506:13" pos:end="6512:13">if <condition pos:start="6506:16" pos:end="6506:19">(<expr pos:start="6506:17" pos:end="6506:18"><operator pos:start="6506:17" pos:end="6506:17">!</operator><name pos:start="6506:18" pos:end="6506:18">b</name></expr>)</condition> <block pos:start="6506:21" pos:end="6512:13">{<block_content pos:start="6508:17" pos:end="6510:22">

                <expr_stmt pos:start="6508:17" pos:end="6508:37"><expr pos:start="6508:17" pos:end="6508:36"><name pos:start="6508:17" pos:end="6508:19">ret</name> <operator pos:start="6508:21" pos:end="6508:21">=</operator> <operator pos:start="6508:23" pos:end="6508:23">-</operator><name pos:start="6508:24" pos:end="6508:36">TARGET_EFAULT</name></expr>;</expr_stmt>

                <break pos:start="6510:17" pos:end="6510:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="6516:9" pos:end="6516:35"><expr pos:start="6516:9" pos:end="6516:34"><name pos:start="6516:9" pos:end="6516:9">p</name> <operator pos:start="6516:11" pos:end="6516:11">=</operator> <call pos:start="6516:13" pos:end="6516:34"><name pos:start="6516:13" pos:end="6516:28">lock_user_string</name><argument_list pos:start="6516:29" pos:end="6516:34">(<argument pos:start="6516:30" pos:end="6516:33"><expr pos:start="6516:30" pos:end="6516:33"><name pos:start="6516:30" pos:end="6516:33">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6518:9" pos:end="6534:9"><if pos:start="6518:9" pos:end="6530:9">if <condition pos:start="6518:12" pos:end="6518:14">(<expr pos:start="6518:13" pos:end="6518:13"><name pos:start="6518:13" pos:end="6518:13">p</name></expr>)</condition> <block pos:start="6518:16" pos:end="6530:9">{<block_content pos:start="6520:13" pos:end="6528:13">

            <if_stmt pos:start="6520:13" pos:end="6528:13"><if pos:start="6520:13" pos:end="6524:13">if <condition pos:start="6520:16" pos:end="6520:43">(<expr pos:start="6520:17" pos:end="6520:42"><name pos:start="6520:17" pos:end="6520:19">num</name> <operator pos:start="6520:21" pos:end="6520:22">==</operator> <name pos:start="6520:24" pos:end="6520:42">TARGET_NR_listxattr</name></expr>)</condition> <block pos:start="6520:45" pos:end="6524:13">{<block_content pos:start="6522:17" pos:end="6522:55">

                <expr_stmt pos:start="6522:17" pos:end="6522:55"><expr pos:start="6522:17" pos:end="6522:54"><name pos:start="6522:17" pos:end="6522:19">ret</name> <operator pos:start="6522:21" pos:end="6522:21">=</operator> <call pos:start="6522:23" pos:end="6522:54"><name pos:start="6522:23" pos:end="6522:31">get_errno</name><argument_list pos:start="6522:32" pos:end="6522:54">(<argument pos:start="6522:33" pos:end="6522:53"><expr pos:start="6522:33" pos:end="6522:53"><call pos:start="6522:33" pos:end="6522:53"><name pos:start="6522:33" pos:end="6522:41">listxattr</name><argument_list pos:start="6522:42" pos:end="6522:53">(<argument pos:start="6522:43" pos:end="6522:43"><expr pos:start="6522:43" pos:end="6522:43"><name pos:start="6522:43" pos:end="6522:43">p</name></expr></argument>, <argument pos:start="6522:46" pos:end="6522:46"><expr pos:start="6522:46" pos:end="6522:46"><name pos:start="6522:46" pos:end="6522:46">b</name></expr></argument>, <argument pos:start="6522:49" pos:end="6522:52"><expr pos:start="6522:49" pos:end="6522:52"><name pos:start="6522:49" pos:end="6522:52">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6524:15" pos:end="6528:13">else <block pos:start="6524:20" pos:end="6528:13">{<block_content pos:start="6526:17" pos:end="6526:56">

                <expr_stmt pos:start="6526:17" pos:end="6526:56"><expr pos:start="6526:17" pos:end="6526:55"><name pos:start="6526:17" pos:end="6526:19">ret</name> <operator pos:start="6526:21" pos:end="6526:21">=</operator> <call pos:start="6526:23" pos:end="6526:55"><name pos:start="6526:23" pos:end="6526:31">get_errno</name><argument_list pos:start="6526:32" pos:end="6526:55">(<argument pos:start="6526:33" pos:end="6526:54"><expr pos:start="6526:33" pos:end="6526:54"><call pos:start="6526:33" pos:end="6526:54"><name pos:start="6526:33" pos:end="6526:42">llistxattr</name><argument_list pos:start="6526:43" pos:end="6526:54">(<argument pos:start="6526:44" pos:end="6526:44"><expr pos:start="6526:44" pos:end="6526:44"><name pos:start="6526:44" pos:end="6526:44">p</name></expr></argument>, <argument pos:start="6526:47" pos:end="6526:47"><expr pos:start="6526:47" pos:end="6526:47"><name pos:start="6526:47" pos:end="6526:47">b</name></expr></argument>, <argument pos:start="6526:50" pos:end="6526:53"><expr pos:start="6526:50" pos:end="6526:53"><name pos:start="6526:50" pos:end="6526:53">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="6530:11" pos:end="6534:9">else <block pos:start="6530:16" pos:end="6534:9">{<block_content pos:start="6532:13" pos:end="6532:33">

            <expr_stmt pos:start="6532:13" pos:end="6532:33"><expr pos:start="6532:13" pos:end="6532:32"><name pos:start="6532:13" pos:end="6532:15">ret</name> <operator pos:start="6532:17" pos:end="6532:17">=</operator> <operator pos:start="6532:19" pos:end="6532:19">-</operator><name pos:start="6532:20" pos:end="6532:32">TARGET_EFAULT</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="6536:9" pos:end="6536:32"><expr pos:start="6536:9" pos:end="6536:31"><call pos:start="6536:9" pos:end="6536:31"><name pos:start="6536:9" pos:end="6536:19">unlock_user</name><argument_list pos:start="6536:20" pos:end="6536:31">(<argument pos:start="6536:21" pos:end="6536:21"><expr pos:start="6536:21" pos:end="6536:21"><name pos:start="6536:21" pos:end="6536:21">p</name></expr></argument>, <argument pos:start="6536:24" pos:end="6536:27"><expr pos:start="6536:24" pos:end="6536:27"><name pos:start="6536:24" pos:end="6536:27">arg1</name></expr></argument>, <argument pos:start="6536:30" pos:end="6536:30"><expr pos:start="6536:30" pos:end="6536:30"><literal type="number" pos:start="6536:30" pos:end="6536:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6538:9" pos:end="6538:35"><expr pos:start="6538:9" pos:end="6538:34"><call pos:start="6538:9" pos:end="6538:34"><name pos:start="6538:9" pos:end="6538:19">unlock_user</name><argument_list pos:start="6538:20" pos:end="6538:34">(<argument pos:start="6538:21" pos:end="6538:21"><expr pos:start="6538:21" pos:end="6538:21"><name pos:start="6538:21" pos:end="6538:21">b</name></expr></argument>, <argument pos:start="6538:24" pos:end="6538:27"><expr pos:start="6538:24" pos:end="6538:27"><name pos:start="6538:24" pos:end="6538:27">arg2</name></expr></argument>, <argument pos:start="6538:30" pos:end="6538:33"><expr pos:start="6538:30" pos:end="6538:33"><name pos:start="6538:30" pos:end="6538:33">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6540:9" pos:end="6540:14">break;</break>

    </block_content>}</block>

    <case pos:start="6544:5" pos:end="6544:30">case <expr pos:start="6544:10" pos:end="6544:29"><name pos:start="6544:10" pos:end="6544:29">TARGET_NR_flistxattr</name></expr>:</case>

    <block pos:start="6546:5" pos:end="6570:5">{<block_content pos:start="6548:9" pos:end="6568:14">

        <decl_stmt pos:start="6548:9" pos:end="6548:20"><decl pos:start="6548:9" pos:end="6548:19"><type pos:start="6548:9" pos:end="6548:14"><name pos:start="6548:9" pos:end="6548:12">void</name> <modifier pos:start="6548:14" pos:end="6548:14">*</modifier></type><name pos:start="6548:15" pos:end="6548:15">b</name> <init pos:start="6548:17" pos:end="6548:19">= <expr pos:start="6548:19" pos:end="6548:19"><literal type="number" pos:start="6548:19" pos:end="6548:19">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="6550:9" pos:end="6562:9"><if pos:start="6550:9" pos:end="6562:9">if <condition pos:start="6550:12" pos:end="6550:17">(<expr pos:start="6550:13" pos:end="6550:16"><name pos:start="6550:13" pos:end="6550:16">arg2</name></expr>)</condition> <block pos:start="6550:19" pos:end="6562:9">{<block_content pos:start="6552:13" pos:end="6560:13">

            <expr_stmt pos:start="6552:13" pos:end="6552:55"><expr pos:start="6552:13" pos:end="6552:54"><name pos:start="6552:13" pos:end="6552:13">b</name> <operator pos:start="6552:15" pos:end="6552:15">=</operator> <call pos:start="6552:17" pos:end="6552:54"><name pos:start="6552:17" pos:end="6552:25">lock_user</name><argument_list pos:start="6552:26" pos:end="6552:54">(<argument pos:start="6552:27" pos:end="6552:38"><expr pos:start="6552:27" pos:end="6552:38"><name pos:start="6552:27" pos:end="6552:38">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6552:41" pos:end="6552:44"><expr pos:start="6552:41" pos:end="6552:44"><name pos:start="6552:41" pos:end="6552:44">arg2</name></expr></argument>, <argument pos:start="6552:47" pos:end="6552:50"><expr pos:start="6552:47" pos:end="6552:50"><name pos:start="6552:47" pos:end="6552:50">arg3</name></expr></argument>, <argument pos:start="6552:53" pos:end="6552:53"><expr pos:start="6552:53" pos:end="6552:53"><literal type="number" pos:start="6552:53" pos:end="6552:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6554:13" pos:end="6560:13"><if pos:start="6554:13" pos:end="6560:13">if <condition pos:start="6554:16" pos:end="6554:19">(<expr pos:start="6554:17" pos:end="6554:18"><operator pos:start="6554:17" pos:end="6554:17">!</operator><name pos:start="6554:18" pos:end="6554:18">b</name></expr>)</condition> <block pos:start="6554:21" pos:end="6560:13">{<block_content pos:start="6556:17" pos:end="6558:22">

                <expr_stmt pos:start="6556:17" pos:end="6556:37"><expr pos:start="6556:17" pos:end="6556:36"><name pos:start="6556:17" pos:end="6556:19">ret</name> <operator pos:start="6556:21" pos:end="6556:21">=</operator> <operator pos:start="6556:23" pos:end="6556:23">-</operator><name pos:start="6556:24" pos:end="6556:36">TARGET_EFAULT</name></expr>;</expr_stmt>

                <break pos:start="6558:17" pos:end="6558:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="6564:9" pos:end="6564:51"><expr pos:start="6564:9" pos:end="6564:50"><name pos:start="6564:9" pos:end="6564:11">ret</name> <operator pos:start="6564:13" pos:end="6564:13">=</operator> <call pos:start="6564:15" pos:end="6564:50"><name pos:start="6564:15" pos:end="6564:23">get_errno</name><argument_list pos:start="6564:24" pos:end="6564:50">(<argument pos:start="6564:25" pos:end="6564:49"><expr pos:start="6564:25" pos:end="6564:49"><call pos:start="6564:25" pos:end="6564:49"><name pos:start="6564:25" pos:end="6564:34">flistxattr</name><argument_list pos:start="6564:35" pos:end="6564:49">(<argument pos:start="6564:36" pos:end="6564:39"><expr pos:start="6564:36" pos:end="6564:39"><name pos:start="6564:36" pos:end="6564:39">arg1</name></expr></argument>, <argument pos:start="6564:42" pos:end="6564:42"><expr pos:start="6564:42" pos:end="6564:42"><name pos:start="6564:42" pos:end="6564:42">b</name></expr></argument>, <argument pos:start="6564:45" pos:end="6564:48"><expr pos:start="6564:45" pos:end="6564:48"><name pos:start="6564:45" pos:end="6564:48">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6566:9" pos:end="6566:35"><expr pos:start="6566:9" pos:end="6566:34"><call pos:start="6566:9" pos:end="6566:34"><name pos:start="6566:9" pos:end="6566:19">unlock_user</name><argument_list pos:start="6566:20" pos:end="6566:34">(<argument pos:start="6566:21" pos:end="6566:21"><expr pos:start="6566:21" pos:end="6566:21"><name pos:start="6566:21" pos:end="6566:21">b</name></expr></argument>, <argument pos:start="6566:24" pos:end="6566:27"><expr pos:start="6566:24" pos:end="6566:27"><name pos:start="6566:24" pos:end="6566:27">arg2</name></expr></argument>, <argument pos:start="6566:30" pos:end="6566:33"><expr pos:start="6566:30" pos:end="6566:33"><name pos:start="6566:30" pos:end="6566:33">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6568:9" pos:end="6568:14">break;</break>

    </block_content>}</block>

    <case pos:start="6572:5" pos:end="6572:28">case <expr pos:start="6572:10" pos:end="6572:27"><name pos:start="6572:10" pos:end="6572:27">TARGET_NR_setxattr</name></expr>:</case>

    <case pos:start="6574:5" pos:end="6574:29">case <expr pos:start="6574:10" pos:end="6574:28"><name pos:start="6574:10" pos:end="6574:28">TARGET_NR_lsetxattr</name></expr>:</case>

        <block pos:start="6576:9" pos:end="6622:9">{<block_content pos:start="6578:13" pos:end="6620:36">

            <decl_stmt pos:start="6578:13" pos:end="6578:32"><decl pos:start="6578:13" pos:end="6578:19"><type pos:start="6578:13" pos:end="6578:18"><name pos:start="6578:13" pos:end="6578:16">void</name> <modifier pos:start="6578:18" pos:end="6578:18">*</modifier></type><name pos:start="6578:19" pos:end="6578:19">p</name></decl>, <decl pos:start="6578:22" pos:end="6578:23"><type ref="prev" pos:start="6578:13" pos:end="6578:18"><modifier pos:start="6578:22" pos:end="6578:22">*</modifier></type><name pos:start="6578:23" pos:end="6578:23">n</name></decl>, <decl pos:start="6578:26" pos:end="6578:31"><type ref="prev" pos:start="6578:13" pos:end="6578:18"><modifier pos:start="6578:26" pos:end="6578:26">*</modifier></type><name pos:start="6578:27" pos:end="6578:27">v</name> <init pos:start="6578:29" pos:end="6578:31">= <expr pos:start="6578:31" pos:end="6578:31"><literal type="number" pos:start="6578:31" pos:end="6578:31">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="6580:13" pos:end="6592:13"><if pos:start="6580:13" pos:end="6592:13">if <condition pos:start="6580:16" pos:end="6580:21">(<expr pos:start="6580:17" pos:end="6580:20"><name pos:start="6580:17" pos:end="6580:20">arg3</name></expr>)</condition> <block pos:start="6580:23" pos:end="6592:13">{<block_content pos:start="6582:17" pos:end="6590:17">

                <expr_stmt pos:start="6582:17" pos:end="6582:58"><expr pos:start="6582:17" pos:end="6582:57"><name pos:start="6582:17" pos:end="6582:17">v</name> <operator pos:start="6582:19" pos:end="6582:19">=</operator> <call pos:start="6582:21" pos:end="6582:57"><name pos:start="6582:21" pos:end="6582:29">lock_user</name><argument_list pos:start="6582:30" pos:end="6582:57">(<argument pos:start="6582:31" pos:end="6582:41"><expr pos:start="6582:31" pos:end="6582:41"><name pos:start="6582:31" pos:end="6582:41">VERIFY_READ</name></expr></argument>, <argument pos:start="6582:44" pos:end="6582:47"><expr pos:start="6582:44" pos:end="6582:47"><name pos:start="6582:44" pos:end="6582:47">arg3</name></expr></argument>, <argument pos:start="6582:50" pos:end="6582:53"><expr pos:start="6582:50" pos:end="6582:53"><name pos:start="6582:50" pos:end="6582:53">arg4</name></expr></argument>, <argument pos:start="6582:56" pos:end="6582:56"><expr pos:start="6582:56" pos:end="6582:56"><literal type="number" pos:start="6582:56" pos:end="6582:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6584:17" pos:end="6590:17"><if pos:start="6584:17" pos:end="6590:17">if <condition pos:start="6584:20" pos:end="6584:23">(<expr pos:start="6584:21" pos:end="6584:22"><operator pos:start="6584:21" pos:end="6584:21">!</operator><name pos:start="6584:22" pos:end="6584:22">v</name></expr>)</condition> <block pos:start="6584:25" pos:end="6590:17">{<block_content pos:start="6586:21" pos:end="6588:26">

                    <expr_stmt pos:start="6586:21" pos:end="6586:41"><expr pos:start="6586:21" pos:end="6586:40"><name pos:start="6586:21" pos:end="6586:23">ret</name> <operator pos:start="6586:25" pos:end="6586:25">=</operator> <operator pos:start="6586:27" pos:end="6586:27">-</operator><name pos:start="6586:28" pos:end="6586:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <break pos:start="6588:21" pos:end="6588:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6594:13" pos:end="6594:39"><expr pos:start="6594:13" pos:end="6594:38"><name pos:start="6594:13" pos:end="6594:13">p</name> <operator pos:start="6594:15" pos:end="6594:15">=</operator> <call pos:start="6594:17" pos:end="6594:38"><name pos:start="6594:17" pos:end="6594:32">lock_user_string</name><argument_list pos:start="6594:33" pos:end="6594:38">(<argument pos:start="6594:34" pos:end="6594:37"><expr pos:start="6594:34" pos:end="6594:37"><name pos:start="6594:34" pos:end="6594:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6596:13" pos:end="6596:39"><expr pos:start="6596:13" pos:end="6596:38"><name pos:start="6596:13" pos:end="6596:13">n</name> <operator pos:start="6596:15" pos:end="6596:15">=</operator> <call pos:start="6596:17" pos:end="6596:38"><name pos:start="6596:17" pos:end="6596:32">lock_user_string</name><argument_list pos:start="6596:33" pos:end="6596:38">(<argument pos:start="6596:34" pos:end="6596:37"><expr pos:start="6596:34" pos:end="6596:37"><name pos:start="6596:34" pos:end="6596:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6598:13" pos:end="6614:13"><if pos:start="6598:13" pos:end="6610:13">if <condition pos:start="6598:16" pos:end="6598:23">(<expr pos:start="6598:17" pos:end="6598:22"><name pos:start="6598:17" pos:end="6598:17">p</name> <operator pos:start="6598:19" pos:end="6598:20">&amp;&amp;</operator> <name pos:start="6598:22" pos:end="6598:22">n</name></expr>)</condition> <block pos:start="6598:25" pos:end="6610:13">{<block_content pos:start="6600:17" pos:end="6608:17">

                <if_stmt pos:start="6600:17" pos:end="6608:17"><if pos:start="6600:17" pos:end="6604:17">if <condition pos:start="6600:20" pos:end="6600:46">(<expr pos:start="6600:21" pos:end="6600:45"><name pos:start="6600:21" pos:end="6600:23">num</name> <operator pos:start="6600:25" pos:end="6600:26">==</operator> <name pos:start="6600:28" pos:end="6600:45">TARGET_NR_setxattr</name></expr>)</condition> <block pos:start="6600:48" pos:end="6604:17">{<block_content pos:start="6602:21" pos:end="6602:67">

                    <expr_stmt pos:start="6602:21" pos:end="6602:67"><expr pos:start="6602:21" pos:end="6602:66"><name pos:start="6602:21" pos:end="6602:23">ret</name> <operator pos:start="6602:25" pos:end="6602:25">=</operator> <call pos:start="6602:27" pos:end="6602:66"><name pos:start="6602:27" pos:end="6602:35">get_errno</name><argument_list pos:start="6602:36" pos:end="6602:66">(<argument pos:start="6602:37" pos:end="6602:65"><expr pos:start="6602:37" pos:end="6602:65"><call pos:start="6602:37" pos:end="6602:65"><name pos:start="6602:37" pos:end="6602:44">setxattr</name><argument_list pos:start="6602:45" pos:end="6602:65">(<argument pos:start="6602:46" pos:end="6602:46"><expr pos:start="6602:46" pos:end="6602:46"><name pos:start="6602:46" pos:end="6602:46">p</name></expr></argument>, <argument pos:start="6602:49" pos:end="6602:49"><expr pos:start="6602:49" pos:end="6602:49"><name pos:start="6602:49" pos:end="6602:49">n</name></expr></argument>, <argument pos:start="6602:52" pos:end="6602:52"><expr pos:start="6602:52" pos:end="6602:52"><name pos:start="6602:52" pos:end="6602:52">v</name></expr></argument>, <argument pos:start="6602:55" pos:end="6602:58"><expr pos:start="6602:55" pos:end="6602:58"><name pos:start="6602:55" pos:end="6602:58">arg4</name></expr></argument>, <argument pos:start="6602:61" pos:end="6602:64"><expr pos:start="6602:61" pos:end="6602:64"><name pos:start="6602:61" pos:end="6602:64">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6604:19" pos:end="6608:17">else <block pos:start="6604:24" pos:end="6608:17">{<block_content pos:start="6606:21" pos:end="6606:68">

                    <expr_stmt pos:start="6606:21" pos:end="6606:68"><expr pos:start="6606:21" pos:end="6606:67"><name pos:start="6606:21" pos:end="6606:23">ret</name> <operator pos:start="6606:25" pos:end="6606:25">=</operator> <call pos:start="6606:27" pos:end="6606:67"><name pos:start="6606:27" pos:end="6606:35">get_errno</name><argument_list pos:start="6606:36" pos:end="6606:67">(<argument pos:start="6606:37" pos:end="6606:66"><expr pos:start="6606:37" pos:end="6606:66"><call pos:start="6606:37" pos:end="6606:66"><name pos:start="6606:37" pos:end="6606:45">lsetxattr</name><argument_list pos:start="6606:46" pos:end="6606:66">(<argument pos:start="6606:47" pos:end="6606:47"><expr pos:start="6606:47" pos:end="6606:47"><name pos:start="6606:47" pos:end="6606:47">p</name></expr></argument>, <argument pos:start="6606:50" pos:end="6606:50"><expr pos:start="6606:50" pos:end="6606:50"><name pos:start="6606:50" pos:end="6606:50">n</name></expr></argument>, <argument pos:start="6606:53" pos:end="6606:53"><expr pos:start="6606:53" pos:end="6606:53"><name pos:start="6606:53" pos:end="6606:53">v</name></expr></argument>, <argument pos:start="6606:56" pos:end="6606:59"><expr pos:start="6606:56" pos:end="6606:59"><name pos:start="6606:56" pos:end="6606:59">arg4</name></expr></argument>, <argument pos:start="6606:62" pos:end="6606:65"><expr pos:start="6606:62" pos:end="6606:65"><name pos:start="6606:62" pos:end="6606:65">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="6610:15" pos:end="6614:13">else <block pos:start="6610:20" pos:end="6614:13">{<block_content pos:start="6612:17" pos:end="6612:37">

                <expr_stmt pos:start="6612:17" pos:end="6612:37"><expr pos:start="6612:17" pos:end="6612:36"><name pos:start="6612:17" pos:end="6612:19">ret</name> <operator pos:start="6612:21" pos:end="6612:21">=</operator> <operator pos:start="6612:23" pos:end="6612:23">-</operator><name pos:start="6612:24" pos:end="6612:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6616:13" pos:end="6616:36"><expr pos:start="6616:13" pos:end="6616:35"><call pos:start="6616:13" pos:end="6616:35"><name pos:start="6616:13" pos:end="6616:23">unlock_user</name><argument_list pos:start="6616:24" pos:end="6616:35">(<argument pos:start="6616:25" pos:end="6616:25"><expr pos:start="6616:25" pos:end="6616:25"><name pos:start="6616:25" pos:end="6616:25">p</name></expr></argument>, <argument pos:start="6616:28" pos:end="6616:31"><expr pos:start="6616:28" pos:end="6616:31"><name pos:start="6616:28" pos:end="6616:31">arg1</name></expr></argument>, <argument pos:start="6616:34" pos:end="6616:34"><expr pos:start="6616:34" pos:end="6616:34"><literal type="number" pos:start="6616:34" pos:end="6616:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6618:13" pos:end="6618:36"><expr pos:start="6618:13" pos:end="6618:35"><call pos:start="6618:13" pos:end="6618:35"><name pos:start="6618:13" pos:end="6618:23">unlock_user</name><argument_list pos:start="6618:24" pos:end="6618:35">(<argument pos:start="6618:25" pos:end="6618:25"><expr pos:start="6618:25" pos:end="6618:25"><name pos:start="6618:25" pos:end="6618:25">n</name></expr></argument>, <argument pos:start="6618:28" pos:end="6618:31"><expr pos:start="6618:28" pos:end="6618:31"><name pos:start="6618:28" pos:end="6618:31">arg2</name></expr></argument>, <argument pos:start="6618:34" pos:end="6618:34"><expr pos:start="6618:34" pos:end="6618:34"><literal type="number" pos:start="6618:34" pos:end="6618:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6620:13" pos:end="6620:36"><expr pos:start="6620:13" pos:end="6620:35"><call pos:start="6620:13" pos:end="6620:35"><name pos:start="6620:13" pos:end="6620:23">unlock_user</name><argument_list pos:start="6620:24" pos:end="6620:35">(<argument pos:start="6620:25" pos:end="6620:25"><expr pos:start="6620:25" pos:end="6620:25"><name pos:start="6620:25" pos:end="6620:25">v</name></expr></argument>, <argument pos:start="6620:28" pos:end="6620:31"><expr pos:start="6620:28" pos:end="6620:31"><name pos:start="6620:28" pos:end="6620:31">arg3</name></expr></argument>, <argument pos:start="6620:34" pos:end="6620:34"><expr pos:start="6620:34" pos:end="6620:34"><literal type="number" pos:start="6620:34" pos:end="6620:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6624:9" pos:end="6624:14">break;</break>

    <case pos:start="6626:5" pos:end="6626:29">case <expr pos:start="6626:10" pos:end="6626:28"><name pos:start="6626:10" pos:end="6626:28">TARGET_NR_fsetxattr</name></expr>:</case>

        <block pos:start="6628:9" pos:end="6662:9">{<block_content pos:start="6630:13" pos:end="6660:36">

            <decl_stmt pos:start="6630:13" pos:end="6630:28"><decl pos:start="6630:13" pos:end="6630:19"><type pos:start="6630:13" pos:end="6630:18"><name pos:start="6630:13" pos:end="6630:16">void</name> <modifier pos:start="6630:18" pos:end="6630:18">*</modifier></type><name pos:start="6630:19" pos:end="6630:19">n</name></decl>, <decl pos:start="6630:22" pos:end="6630:27"><type ref="prev" pos:start="6630:13" pos:end="6630:18"><modifier pos:start="6630:22" pos:end="6630:22">*</modifier></type><name pos:start="6630:23" pos:end="6630:23">v</name> <init pos:start="6630:25" pos:end="6630:27">= <expr pos:start="6630:27" pos:end="6630:27"><literal type="number" pos:start="6630:27" pos:end="6630:27">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="6632:13" pos:end="6644:13"><if pos:start="6632:13" pos:end="6644:13">if <condition pos:start="6632:16" pos:end="6632:21">(<expr pos:start="6632:17" pos:end="6632:20"><name pos:start="6632:17" pos:end="6632:20">arg3</name></expr>)</condition> <block pos:start="6632:23" pos:end="6644:13">{<block_content pos:start="6634:17" pos:end="6642:17">

                <expr_stmt pos:start="6634:17" pos:end="6634:58"><expr pos:start="6634:17" pos:end="6634:57"><name pos:start="6634:17" pos:end="6634:17">v</name> <operator pos:start="6634:19" pos:end="6634:19">=</operator> <call pos:start="6634:21" pos:end="6634:57"><name pos:start="6634:21" pos:end="6634:29">lock_user</name><argument_list pos:start="6634:30" pos:end="6634:57">(<argument pos:start="6634:31" pos:end="6634:41"><expr pos:start="6634:31" pos:end="6634:41"><name pos:start="6634:31" pos:end="6634:41">VERIFY_READ</name></expr></argument>, <argument pos:start="6634:44" pos:end="6634:47"><expr pos:start="6634:44" pos:end="6634:47"><name pos:start="6634:44" pos:end="6634:47">arg3</name></expr></argument>, <argument pos:start="6634:50" pos:end="6634:53"><expr pos:start="6634:50" pos:end="6634:53"><name pos:start="6634:50" pos:end="6634:53">arg4</name></expr></argument>, <argument pos:start="6634:56" pos:end="6634:56"><expr pos:start="6634:56" pos:end="6634:56"><literal type="number" pos:start="6634:56" pos:end="6634:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6636:17" pos:end="6642:17"><if pos:start="6636:17" pos:end="6642:17">if <condition pos:start="6636:20" pos:end="6636:23">(<expr pos:start="6636:21" pos:end="6636:22"><operator pos:start="6636:21" pos:end="6636:21">!</operator><name pos:start="6636:22" pos:end="6636:22">v</name></expr>)</condition> <block pos:start="6636:25" pos:end="6642:17">{<block_content pos:start="6638:21" pos:end="6640:26">

                    <expr_stmt pos:start="6638:21" pos:end="6638:41"><expr pos:start="6638:21" pos:end="6638:40"><name pos:start="6638:21" pos:end="6638:23">ret</name> <operator pos:start="6638:25" pos:end="6638:25">=</operator> <operator pos:start="6638:27" pos:end="6638:27">-</operator><name pos:start="6638:28" pos:end="6638:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <break pos:start="6640:21" pos:end="6640:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6646:13" pos:end="6646:39"><expr pos:start="6646:13" pos:end="6646:38"><name pos:start="6646:13" pos:end="6646:13">n</name> <operator pos:start="6646:15" pos:end="6646:15">=</operator> <call pos:start="6646:17" pos:end="6646:38"><name pos:start="6646:17" pos:end="6646:32">lock_user_string</name><argument_list pos:start="6646:33" pos:end="6646:38">(<argument pos:start="6646:34" pos:end="6646:37"><expr pos:start="6646:34" pos:end="6646:37"><name pos:start="6646:34" pos:end="6646:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6648:13" pos:end="6656:13"><if pos:start="6648:13" pos:end="6652:13">if <condition pos:start="6648:16" pos:end="6648:18">(<expr pos:start="6648:17" pos:end="6648:17"><name pos:start="6648:17" pos:end="6648:17">n</name></expr>)</condition> <block pos:start="6648:20" pos:end="6652:13">{<block_content pos:start="6650:17" pos:end="6650:67">

                <expr_stmt pos:start="6650:17" pos:end="6650:67"><expr pos:start="6650:17" pos:end="6650:66"><name pos:start="6650:17" pos:end="6650:19">ret</name> <operator pos:start="6650:21" pos:end="6650:21">=</operator> <call pos:start="6650:23" pos:end="6650:66"><name pos:start="6650:23" pos:end="6650:31">get_errno</name><argument_list pos:start="6650:32" pos:end="6650:66">(<argument pos:start="6650:33" pos:end="6650:65"><expr pos:start="6650:33" pos:end="6650:65"><call pos:start="6650:33" pos:end="6650:65"><name pos:start="6650:33" pos:end="6650:41">fsetxattr</name><argument_list pos:start="6650:42" pos:end="6650:65">(<argument pos:start="6650:43" pos:end="6650:46"><expr pos:start="6650:43" pos:end="6650:46"><name pos:start="6650:43" pos:end="6650:46">arg1</name></expr></argument>, <argument pos:start="6650:49" pos:end="6650:49"><expr pos:start="6650:49" pos:end="6650:49"><name pos:start="6650:49" pos:end="6650:49">n</name></expr></argument>, <argument pos:start="6650:52" pos:end="6650:52"><expr pos:start="6650:52" pos:end="6650:52"><name pos:start="6650:52" pos:end="6650:52">v</name></expr></argument>, <argument pos:start="6650:55" pos:end="6650:58"><expr pos:start="6650:55" pos:end="6650:58"><name pos:start="6650:55" pos:end="6650:58">arg4</name></expr></argument>, <argument pos:start="6650:61" pos:end="6650:64"><expr pos:start="6650:61" pos:end="6650:64"><name pos:start="6650:61" pos:end="6650:64">arg5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6652:15" pos:end="6656:13">else <block pos:start="6652:20" pos:end="6656:13">{<block_content pos:start="6654:17" pos:end="6654:37">

                <expr_stmt pos:start="6654:17" pos:end="6654:37"><expr pos:start="6654:17" pos:end="6654:36"><name pos:start="6654:17" pos:end="6654:19">ret</name> <operator pos:start="6654:21" pos:end="6654:21">=</operator> <operator pos:start="6654:23" pos:end="6654:23">-</operator><name pos:start="6654:24" pos:end="6654:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6658:13" pos:end="6658:36"><expr pos:start="6658:13" pos:end="6658:35"><call pos:start="6658:13" pos:end="6658:35"><name pos:start="6658:13" pos:end="6658:23">unlock_user</name><argument_list pos:start="6658:24" pos:end="6658:35">(<argument pos:start="6658:25" pos:end="6658:25"><expr pos:start="6658:25" pos:end="6658:25"><name pos:start="6658:25" pos:end="6658:25">n</name></expr></argument>, <argument pos:start="6658:28" pos:end="6658:31"><expr pos:start="6658:28" pos:end="6658:31"><name pos:start="6658:28" pos:end="6658:31">arg2</name></expr></argument>, <argument pos:start="6658:34" pos:end="6658:34"><expr pos:start="6658:34" pos:end="6658:34"><literal type="number" pos:start="6658:34" pos:end="6658:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6660:13" pos:end="6660:36"><expr pos:start="6660:13" pos:end="6660:35"><call pos:start="6660:13" pos:end="6660:35"><name pos:start="6660:13" pos:end="6660:23">unlock_user</name><argument_list pos:start="6660:24" pos:end="6660:35">(<argument pos:start="6660:25" pos:end="6660:25"><expr pos:start="6660:25" pos:end="6660:25"><name pos:start="6660:25" pos:end="6660:25">v</name></expr></argument>, <argument pos:start="6660:28" pos:end="6660:31"><expr pos:start="6660:28" pos:end="6660:31"><name pos:start="6660:28" pos:end="6660:31">arg3</name></expr></argument>, <argument pos:start="6660:34" pos:end="6660:34"><expr pos:start="6660:34" pos:end="6660:34"><literal type="number" pos:start="6660:34" pos:end="6660:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6664:9" pos:end="6664:14">break;</break>

    <case pos:start="6666:5" pos:end="6666:28">case <expr pos:start="6666:10" pos:end="6666:27"><name pos:start="6666:10" pos:end="6666:27">TARGET_NR_getxattr</name></expr>:</case>

    <case pos:start="6668:5" pos:end="6668:29">case <expr pos:start="6668:10" pos:end="6668:28"><name pos:start="6668:10" pos:end="6668:28">TARGET_NR_lgetxattr</name></expr>:</case>

        <block pos:start="6670:9" pos:end="6716:9">{<block_content pos:start="6672:13" pos:end="6714:39">

            <decl_stmt pos:start="6672:13" pos:end="6672:32"><decl pos:start="6672:13" pos:end="6672:19"><type pos:start="6672:13" pos:end="6672:18"><name pos:start="6672:13" pos:end="6672:16">void</name> <modifier pos:start="6672:18" pos:end="6672:18">*</modifier></type><name pos:start="6672:19" pos:end="6672:19">p</name></decl>, <decl pos:start="6672:22" pos:end="6672:23"><type ref="prev" pos:start="6672:13" pos:end="6672:18"><modifier pos:start="6672:22" pos:end="6672:22">*</modifier></type><name pos:start="6672:23" pos:end="6672:23">n</name></decl>, <decl pos:start="6672:26" pos:end="6672:31"><type ref="prev" pos:start="6672:13" pos:end="6672:18"><modifier pos:start="6672:26" pos:end="6672:26">*</modifier></type><name pos:start="6672:27" pos:end="6672:27">v</name> <init pos:start="6672:29" pos:end="6672:31">= <expr pos:start="6672:31" pos:end="6672:31"><literal type="number" pos:start="6672:31" pos:end="6672:31">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="6674:13" pos:end="6686:13"><if pos:start="6674:13" pos:end="6686:13">if <condition pos:start="6674:16" pos:end="6674:21">(<expr pos:start="6674:17" pos:end="6674:20"><name pos:start="6674:17" pos:end="6674:20">arg3</name></expr>)</condition> <block pos:start="6674:23" pos:end="6686:13">{<block_content pos:start="6676:17" pos:end="6684:17">

                <expr_stmt pos:start="6676:17" pos:end="6676:59"><expr pos:start="6676:17" pos:end="6676:58"><name pos:start="6676:17" pos:end="6676:17">v</name> <operator pos:start="6676:19" pos:end="6676:19">=</operator> <call pos:start="6676:21" pos:end="6676:58"><name pos:start="6676:21" pos:end="6676:29">lock_user</name><argument_list pos:start="6676:30" pos:end="6676:58">(<argument pos:start="6676:31" pos:end="6676:42"><expr pos:start="6676:31" pos:end="6676:42"><name pos:start="6676:31" pos:end="6676:42">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6676:45" pos:end="6676:48"><expr pos:start="6676:45" pos:end="6676:48"><name pos:start="6676:45" pos:end="6676:48">arg3</name></expr></argument>, <argument pos:start="6676:51" pos:end="6676:54"><expr pos:start="6676:51" pos:end="6676:54"><name pos:start="6676:51" pos:end="6676:54">arg4</name></expr></argument>, <argument pos:start="6676:57" pos:end="6676:57"><expr pos:start="6676:57" pos:end="6676:57"><literal type="number" pos:start="6676:57" pos:end="6676:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6678:17" pos:end="6684:17"><if pos:start="6678:17" pos:end="6684:17">if <condition pos:start="6678:20" pos:end="6678:23">(<expr pos:start="6678:21" pos:end="6678:22"><operator pos:start="6678:21" pos:end="6678:21">!</operator><name pos:start="6678:22" pos:end="6678:22">v</name></expr>)</condition> <block pos:start="6678:25" pos:end="6684:17">{<block_content pos:start="6680:21" pos:end="6682:26">

                    <expr_stmt pos:start="6680:21" pos:end="6680:41"><expr pos:start="6680:21" pos:end="6680:40"><name pos:start="6680:21" pos:end="6680:23">ret</name> <operator pos:start="6680:25" pos:end="6680:25">=</operator> <operator pos:start="6680:27" pos:end="6680:27">-</operator><name pos:start="6680:28" pos:end="6680:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <break pos:start="6682:21" pos:end="6682:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6688:13" pos:end="6688:39"><expr pos:start="6688:13" pos:end="6688:38"><name pos:start="6688:13" pos:end="6688:13">p</name> <operator pos:start="6688:15" pos:end="6688:15">=</operator> <call pos:start="6688:17" pos:end="6688:38"><name pos:start="6688:17" pos:end="6688:32">lock_user_string</name><argument_list pos:start="6688:33" pos:end="6688:38">(<argument pos:start="6688:34" pos:end="6688:37"><expr pos:start="6688:34" pos:end="6688:37"><name pos:start="6688:34" pos:end="6688:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6690:13" pos:end="6690:39"><expr pos:start="6690:13" pos:end="6690:38"><name pos:start="6690:13" pos:end="6690:13">n</name> <operator pos:start="6690:15" pos:end="6690:15">=</operator> <call pos:start="6690:17" pos:end="6690:38"><name pos:start="6690:17" pos:end="6690:32">lock_user_string</name><argument_list pos:start="6690:33" pos:end="6690:38">(<argument pos:start="6690:34" pos:end="6690:37"><expr pos:start="6690:34" pos:end="6690:37"><name pos:start="6690:34" pos:end="6690:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6692:13" pos:end="6708:13"><if pos:start="6692:13" pos:end="6704:13">if <condition pos:start="6692:16" pos:end="6692:23">(<expr pos:start="6692:17" pos:end="6692:22"><name pos:start="6692:17" pos:end="6692:17">p</name> <operator pos:start="6692:19" pos:end="6692:20">&amp;&amp;</operator> <name pos:start="6692:22" pos:end="6692:22">n</name></expr>)</condition> <block pos:start="6692:25" pos:end="6704:13">{<block_content pos:start="6694:17" pos:end="6702:17">

                <if_stmt pos:start="6694:17" pos:end="6702:17"><if pos:start="6694:17" pos:end="6698:17">if <condition pos:start="6694:20" pos:end="6694:46">(<expr pos:start="6694:21" pos:end="6694:45"><name pos:start="6694:21" pos:end="6694:23">num</name> <operator pos:start="6694:25" pos:end="6694:26">==</operator> <name pos:start="6694:28" pos:end="6694:45">TARGET_NR_getxattr</name></expr>)</condition> <block pos:start="6694:48" pos:end="6698:17">{<block_content pos:start="6696:21" pos:end="6696:61">

                    <expr_stmt pos:start="6696:21" pos:end="6696:61"><expr pos:start="6696:21" pos:end="6696:60"><name pos:start="6696:21" pos:end="6696:23">ret</name> <operator pos:start="6696:25" pos:end="6696:25">=</operator> <call pos:start="6696:27" pos:end="6696:60"><name pos:start="6696:27" pos:end="6696:35">get_errno</name><argument_list pos:start="6696:36" pos:end="6696:60">(<argument pos:start="6696:37" pos:end="6696:59"><expr pos:start="6696:37" pos:end="6696:59"><call pos:start="6696:37" pos:end="6696:59"><name pos:start="6696:37" pos:end="6696:44">getxattr</name><argument_list pos:start="6696:45" pos:end="6696:59">(<argument pos:start="6696:46" pos:end="6696:46"><expr pos:start="6696:46" pos:end="6696:46"><name pos:start="6696:46" pos:end="6696:46">p</name></expr></argument>, <argument pos:start="6696:49" pos:end="6696:49"><expr pos:start="6696:49" pos:end="6696:49"><name pos:start="6696:49" pos:end="6696:49">n</name></expr></argument>, <argument pos:start="6696:52" pos:end="6696:52"><expr pos:start="6696:52" pos:end="6696:52"><name pos:start="6696:52" pos:end="6696:52">v</name></expr></argument>, <argument pos:start="6696:55" pos:end="6696:58"><expr pos:start="6696:55" pos:end="6696:58"><name pos:start="6696:55" pos:end="6696:58">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6698:19" pos:end="6702:17">else <block pos:start="6698:24" pos:end="6702:17">{<block_content pos:start="6700:21" pos:end="6700:62">

                    <expr_stmt pos:start="6700:21" pos:end="6700:62"><expr pos:start="6700:21" pos:end="6700:61"><name pos:start="6700:21" pos:end="6700:23">ret</name> <operator pos:start="6700:25" pos:end="6700:25">=</operator> <call pos:start="6700:27" pos:end="6700:61"><name pos:start="6700:27" pos:end="6700:35">get_errno</name><argument_list pos:start="6700:36" pos:end="6700:61">(<argument pos:start="6700:37" pos:end="6700:60"><expr pos:start="6700:37" pos:end="6700:60"><call pos:start="6700:37" pos:end="6700:60"><name pos:start="6700:37" pos:end="6700:45">lgetxattr</name><argument_list pos:start="6700:46" pos:end="6700:60">(<argument pos:start="6700:47" pos:end="6700:47"><expr pos:start="6700:47" pos:end="6700:47"><name pos:start="6700:47" pos:end="6700:47">p</name></expr></argument>, <argument pos:start="6700:50" pos:end="6700:50"><expr pos:start="6700:50" pos:end="6700:50"><name pos:start="6700:50" pos:end="6700:50">n</name></expr></argument>, <argument pos:start="6700:53" pos:end="6700:53"><expr pos:start="6700:53" pos:end="6700:53"><name pos:start="6700:53" pos:end="6700:53">v</name></expr></argument>, <argument pos:start="6700:56" pos:end="6700:59"><expr pos:start="6700:56" pos:end="6700:59"><name pos:start="6700:56" pos:end="6700:59">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="6704:15" pos:end="6708:13">else <block pos:start="6704:20" pos:end="6708:13">{<block_content pos:start="6706:17" pos:end="6706:37">

                <expr_stmt pos:start="6706:17" pos:end="6706:37"><expr pos:start="6706:17" pos:end="6706:36"><name pos:start="6706:17" pos:end="6706:19">ret</name> <operator pos:start="6706:21" pos:end="6706:21">=</operator> <operator pos:start="6706:23" pos:end="6706:23">-</operator><name pos:start="6706:24" pos:end="6706:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6710:13" pos:end="6710:36"><expr pos:start="6710:13" pos:end="6710:35"><call pos:start="6710:13" pos:end="6710:35"><name pos:start="6710:13" pos:end="6710:23">unlock_user</name><argument_list pos:start="6710:24" pos:end="6710:35">(<argument pos:start="6710:25" pos:end="6710:25"><expr pos:start="6710:25" pos:end="6710:25"><name pos:start="6710:25" pos:end="6710:25">p</name></expr></argument>, <argument pos:start="6710:28" pos:end="6710:31"><expr pos:start="6710:28" pos:end="6710:31"><name pos:start="6710:28" pos:end="6710:31">arg1</name></expr></argument>, <argument pos:start="6710:34" pos:end="6710:34"><expr pos:start="6710:34" pos:end="6710:34"><literal type="number" pos:start="6710:34" pos:end="6710:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6712:13" pos:end="6712:36"><expr pos:start="6712:13" pos:end="6712:35"><call pos:start="6712:13" pos:end="6712:35"><name pos:start="6712:13" pos:end="6712:23">unlock_user</name><argument_list pos:start="6712:24" pos:end="6712:35">(<argument pos:start="6712:25" pos:end="6712:25"><expr pos:start="6712:25" pos:end="6712:25"><name pos:start="6712:25" pos:end="6712:25">n</name></expr></argument>, <argument pos:start="6712:28" pos:end="6712:31"><expr pos:start="6712:28" pos:end="6712:31"><name pos:start="6712:28" pos:end="6712:31">arg2</name></expr></argument>, <argument pos:start="6712:34" pos:end="6712:34"><expr pos:start="6712:34" pos:end="6712:34"><literal type="number" pos:start="6712:34" pos:end="6712:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6714:13" pos:end="6714:39"><expr pos:start="6714:13" pos:end="6714:38"><call pos:start="6714:13" pos:end="6714:38"><name pos:start="6714:13" pos:end="6714:23">unlock_user</name><argument_list pos:start="6714:24" pos:end="6714:38">(<argument pos:start="6714:25" pos:end="6714:25"><expr pos:start="6714:25" pos:end="6714:25"><name pos:start="6714:25" pos:end="6714:25">v</name></expr></argument>, <argument pos:start="6714:28" pos:end="6714:31"><expr pos:start="6714:28" pos:end="6714:31"><name pos:start="6714:28" pos:end="6714:31">arg3</name></expr></argument>, <argument pos:start="6714:34" pos:end="6714:37"><expr pos:start="6714:34" pos:end="6714:37"><name pos:start="6714:34" pos:end="6714:37">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6718:9" pos:end="6718:14">break;</break>

    <case pos:start="6720:5" pos:end="6720:29">case <expr pos:start="6720:10" pos:end="6720:28"><name pos:start="6720:10" pos:end="6720:28">TARGET_NR_fgetxattr</name></expr>:</case>

        <block pos:start="6722:9" pos:end="6756:9">{<block_content pos:start="6724:13" pos:end="6754:39">

            <decl_stmt pos:start="6724:13" pos:end="6724:28"><decl pos:start="6724:13" pos:end="6724:19"><type pos:start="6724:13" pos:end="6724:18"><name pos:start="6724:13" pos:end="6724:16">void</name> <modifier pos:start="6724:18" pos:end="6724:18">*</modifier></type><name pos:start="6724:19" pos:end="6724:19">n</name></decl>, <decl pos:start="6724:22" pos:end="6724:27"><type ref="prev" pos:start="6724:13" pos:end="6724:18"><modifier pos:start="6724:22" pos:end="6724:22">*</modifier></type><name pos:start="6724:23" pos:end="6724:23">v</name> <init pos:start="6724:25" pos:end="6724:27">= <expr pos:start="6724:27" pos:end="6724:27"><literal type="number" pos:start="6724:27" pos:end="6724:27">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="6726:13" pos:end="6738:13"><if pos:start="6726:13" pos:end="6738:13">if <condition pos:start="6726:16" pos:end="6726:21">(<expr pos:start="6726:17" pos:end="6726:20"><name pos:start="6726:17" pos:end="6726:20">arg3</name></expr>)</condition> <block pos:start="6726:23" pos:end="6738:13">{<block_content pos:start="6728:17" pos:end="6736:17">

                <expr_stmt pos:start="6728:17" pos:end="6728:59"><expr pos:start="6728:17" pos:end="6728:58"><name pos:start="6728:17" pos:end="6728:17">v</name> <operator pos:start="6728:19" pos:end="6728:19">=</operator> <call pos:start="6728:21" pos:end="6728:58"><name pos:start="6728:21" pos:end="6728:29">lock_user</name><argument_list pos:start="6728:30" pos:end="6728:58">(<argument pos:start="6728:31" pos:end="6728:42"><expr pos:start="6728:31" pos:end="6728:42"><name pos:start="6728:31" pos:end="6728:42">VERIFY_WRITE</name></expr></argument>, <argument pos:start="6728:45" pos:end="6728:48"><expr pos:start="6728:45" pos:end="6728:48"><name pos:start="6728:45" pos:end="6728:48">arg3</name></expr></argument>, <argument pos:start="6728:51" pos:end="6728:54"><expr pos:start="6728:51" pos:end="6728:54"><name pos:start="6728:51" pos:end="6728:54">arg4</name></expr></argument>, <argument pos:start="6728:57" pos:end="6728:57"><expr pos:start="6728:57" pos:end="6728:57"><literal type="number" pos:start="6728:57" pos:end="6728:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="6730:17" pos:end="6736:17"><if pos:start="6730:17" pos:end="6736:17">if <condition pos:start="6730:20" pos:end="6730:23">(<expr pos:start="6730:21" pos:end="6730:22"><operator pos:start="6730:21" pos:end="6730:21">!</operator><name pos:start="6730:22" pos:end="6730:22">v</name></expr>)</condition> <block pos:start="6730:25" pos:end="6736:17">{<block_content pos:start="6732:21" pos:end="6734:26">

                    <expr_stmt pos:start="6732:21" pos:end="6732:41"><expr pos:start="6732:21" pos:end="6732:40"><name pos:start="6732:21" pos:end="6732:23">ret</name> <operator pos:start="6732:25" pos:end="6732:25">=</operator> <operator pos:start="6732:27" pos:end="6732:27">-</operator><name pos:start="6732:28" pos:end="6732:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <break pos:start="6734:21" pos:end="6734:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="6740:13" pos:end="6740:39"><expr pos:start="6740:13" pos:end="6740:38"><name pos:start="6740:13" pos:end="6740:13">n</name> <operator pos:start="6740:15" pos:end="6740:15">=</operator> <call pos:start="6740:17" pos:end="6740:38"><name pos:start="6740:17" pos:end="6740:32">lock_user_string</name><argument_list pos:start="6740:33" pos:end="6740:38">(<argument pos:start="6740:34" pos:end="6740:37"><expr pos:start="6740:34" pos:end="6740:37"><name pos:start="6740:34" pos:end="6740:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6742:13" pos:end="6750:13"><if pos:start="6742:13" pos:end="6746:13">if <condition pos:start="6742:16" pos:end="6742:18">(<expr pos:start="6742:17" pos:end="6742:17"><name pos:start="6742:17" pos:end="6742:17">n</name></expr>)</condition> <block pos:start="6742:20" pos:end="6746:13">{<block_content pos:start="6744:17" pos:end="6744:61">

                <expr_stmt pos:start="6744:17" pos:end="6744:61"><expr pos:start="6744:17" pos:end="6744:60"><name pos:start="6744:17" pos:end="6744:19">ret</name> <operator pos:start="6744:21" pos:end="6744:21">=</operator> <call pos:start="6744:23" pos:end="6744:60"><name pos:start="6744:23" pos:end="6744:31">get_errno</name><argument_list pos:start="6744:32" pos:end="6744:60">(<argument pos:start="6744:33" pos:end="6744:59"><expr pos:start="6744:33" pos:end="6744:59"><call pos:start="6744:33" pos:end="6744:59"><name pos:start="6744:33" pos:end="6744:41">fgetxattr</name><argument_list pos:start="6744:42" pos:end="6744:59">(<argument pos:start="6744:43" pos:end="6744:46"><expr pos:start="6744:43" pos:end="6744:46"><name pos:start="6744:43" pos:end="6744:46">arg1</name></expr></argument>, <argument pos:start="6744:49" pos:end="6744:49"><expr pos:start="6744:49" pos:end="6744:49"><name pos:start="6744:49" pos:end="6744:49">n</name></expr></argument>, <argument pos:start="6744:52" pos:end="6744:52"><expr pos:start="6744:52" pos:end="6744:52"><name pos:start="6744:52" pos:end="6744:52">v</name></expr></argument>, <argument pos:start="6744:55" pos:end="6744:58"><expr pos:start="6744:55" pos:end="6744:58"><name pos:start="6744:55" pos:end="6744:58">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6746:15" pos:end="6750:13">else <block pos:start="6746:20" pos:end="6750:13">{<block_content pos:start="6748:17" pos:end="6748:37">

                <expr_stmt pos:start="6748:17" pos:end="6748:37"><expr pos:start="6748:17" pos:end="6748:36"><name pos:start="6748:17" pos:end="6748:19">ret</name> <operator pos:start="6748:21" pos:end="6748:21">=</operator> <operator pos:start="6748:23" pos:end="6748:23">-</operator><name pos:start="6748:24" pos:end="6748:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6752:13" pos:end="6752:36"><expr pos:start="6752:13" pos:end="6752:35"><call pos:start="6752:13" pos:end="6752:35"><name pos:start="6752:13" pos:end="6752:23">unlock_user</name><argument_list pos:start="6752:24" pos:end="6752:35">(<argument pos:start="6752:25" pos:end="6752:25"><expr pos:start="6752:25" pos:end="6752:25"><name pos:start="6752:25" pos:end="6752:25">n</name></expr></argument>, <argument pos:start="6752:28" pos:end="6752:31"><expr pos:start="6752:28" pos:end="6752:31"><name pos:start="6752:28" pos:end="6752:31">arg2</name></expr></argument>, <argument pos:start="6752:34" pos:end="6752:34"><expr pos:start="6752:34" pos:end="6752:34"><literal type="number" pos:start="6752:34" pos:end="6752:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6754:13" pos:end="6754:39"><expr pos:start="6754:13" pos:end="6754:38"><call pos:start="6754:13" pos:end="6754:38"><name pos:start="6754:13" pos:end="6754:23">unlock_user</name><argument_list pos:start="6754:24" pos:end="6754:38">(<argument pos:start="6754:25" pos:end="6754:25"><expr pos:start="6754:25" pos:end="6754:25"><name pos:start="6754:25" pos:end="6754:25">v</name></expr></argument>, <argument pos:start="6754:28" pos:end="6754:31"><expr pos:start="6754:28" pos:end="6754:31"><name pos:start="6754:28" pos:end="6754:31">arg3</name></expr></argument>, <argument pos:start="6754:34" pos:end="6754:37"><expr pos:start="6754:34" pos:end="6754:37"><name pos:start="6754:34" pos:end="6754:37">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6758:9" pos:end="6758:14">break;</break>

    <case pos:start="6760:5" pos:end="6760:31">case <expr pos:start="6760:10" pos:end="6760:30"><name pos:start="6760:10" pos:end="6760:30">TARGET_NR_removexattr</name></expr>:</case>

    <case pos:start="6762:5" pos:end="6762:32">case <expr pos:start="6762:10" pos:end="6762:31"><name pos:start="6762:10" pos:end="6762:31">TARGET_NR_lremovexattr</name></expr>:</case>

        <block pos:start="6764:9" pos:end="6794:9">{<block_content pos:start="6766:13" pos:end="6792:36">

            <decl_stmt pos:start="6766:13" pos:end="6766:24"><decl pos:start="6766:13" pos:end="6766:19"><type pos:start="6766:13" pos:end="6766:18"><name pos:start="6766:13" pos:end="6766:16">void</name> <modifier pos:start="6766:18" pos:end="6766:18">*</modifier></type><name pos:start="6766:19" pos:end="6766:19">p</name></decl>, <decl pos:start="6766:22" pos:end="6766:23"><type ref="prev" pos:start="6766:13" pos:end="6766:18"><modifier pos:start="6766:22" pos:end="6766:22">*</modifier></type><name pos:start="6766:23" pos:end="6766:23">n</name></decl>;</decl_stmt>

            <expr_stmt pos:start="6768:13" pos:end="6768:39"><expr pos:start="6768:13" pos:end="6768:38"><name pos:start="6768:13" pos:end="6768:13">p</name> <operator pos:start="6768:15" pos:end="6768:15">=</operator> <call pos:start="6768:17" pos:end="6768:38"><name pos:start="6768:17" pos:end="6768:32">lock_user_string</name><argument_list pos:start="6768:33" pos:end="6768:38">(<argument pos:start="6768:34" pos:end="6768:37"><expr pos:start="6768:34" pos:end="6768:37"><name pos:start="6768:34" pos:end="6768:37">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6770:13" pos:end="6770:39"><expr pos:start="6770:13" pos:end="6770:38"><name pos:start="6770:13" pos:end="6770:13">n</name> <operator pos:start="6770:15" pos:end="6770:15">=</operator> <call pos:start="6770:17" pos:end="6770:38"><name pos:start="6770:17" pos:end="6770:32">lock_user_string</name><argument_list pos:start="6770:33" pos:end="6770:38">(<argument pos:start="6770:34" pos:end="6770:37"><expr pos:start="6770:34" pos:end="6770:37"><name pos:start="6770:34" pos:end="6770:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6772:13" pos:end="6788:13"><if pos:start="6772:13" pos:end="6784:13">if <condition pos:start="6772:16" pos:end="6772:23">(<expr pos:start="6772:17" pos:end="6772:22"><name pos:start="6772:17" pos:end="6772:17">p</name> <operator pos:start="6772:19" pos:end="6772:20">&amp;&amp;</operator> <name pos:start="6772:22" pos:end="6772:22">n</name></expr>)</condition> <block pos:start="6772:25" pos:end="6784:13">{<block_content pos:start="6774:17" pos:end="6782:17">

                <if_stmt pos:start="6774:17" pos:end="6782:17"><if pos:start="6774:17" pos:end="6778:17">if <condition pos:start="6774:20" pos:end="6774:49">(<expr pos:start="6774:21" pos:end="6774:48"><name pos:start="6774:21" pos:end="6774:23">num</name> <operator pos:start="6774:25" pos:end="6774:26">==</operator> <name pos:start="6774:28" pos:end="6774:48">TARGET_NR_removexattr</name></expr>)</condition> <block pos:start="6774:51" pos:end="6778:17">{<block_content pos:start="6776:21" pos:end="6776:55">

                    <expr_stmt pos:start="6776:21" pos:end="6776:55"><expr pos:start="6776:21" pos:end="6776:54"><name pos:start="6776:21" pos:end="6776:23">ret</name> <operator pos:start="6776:25" pos:end="6776:25">=</operator> <call pos:start="6776:27" pos:end="6776:54"><name pos:start="6776:27" pos:end="6776:35">get_errno</name><argument_list pos:start="6776:36" pos:end="6776:54">(<argument pos:start="6776:37" pos:end="6776:53"><expr pos:start="6776:37" pos:end="6776:53"><call pos:start="6776:37" pos:end="6776:53"><name pos:start="6776:37" pos:end="6776:47">removexattr</name><argument_list pos:start="6776:48" pos:end="6776:53">(<argument pos:start="6776:49" pos:end="6776:49"><expr pos:start="6776:49" pos:end="6776:49"><name pos:start="6776:49" pos:end="6776:49">p</name></expr></argument>, <argument pos:start="6776:52" pos:end="6776:52"><expr pos:start="6776:52" pos:end="6776:52"><name pos:start="6776:52" pos:end="6776:52">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="6778:19" pos:end="6782:17">else <block pos:start="6778:24" pos:end="6782:17">{<block_content pos:start="6780:21" pos:end="6780:56">

                    <expr_stmt pos:start="6780:21" pos:end="6780:56"><expr pos:start="6780:21" pos:end="6780:55"><name pos:start="6780:21" pos:end="6780:23">ret</name> <operator pos:start="6780:25" pos:end="6780:25">=</operator> <call pos:start="6780:27" pos:end="6780:55"><name pos:start="6780:27" pos:end="6780:35">get_errno</name><argument_list pos:start="6780:36" pos:end="6780:55">(<argument pos:start="6780:37" pos:end="6780:54"><expr pos:start="6780:37" pos:end="6780:54"><call pos:start="6780:37" pos:end="6780:54"><name pos:start="6780:37" pos:end="6780:48">lremovexattr</name><argument_list pos:start="6780:49" pos:end="6780:54">(<argument pos:start="6780:50" pos:end="6780:50"><expr pos:start="6780:50" pos:end="6780:50"><name pos:start="6780:50" pos:end="6780:50">p</name></expr></argument>, <argument pos:start="6780:53" pos:end="6780:53"><expr pos:start="6780:53" pos:end="6780:53"><name pos:start="6780:53" pos:end="6780:53">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="6784:15" pos:end="6788:13">else <block pos:start="6784:20" pos:end="6788:13">{<block_content pos:start="6786:17" pos:end="6786:37">

                <expr_stmt pos:start="6786:17" pos:end="6786:37"><expr pos:start="6786:17" pos:end="6786:36"><name pos:start="6786:17" pos:end="6786:19">ret</name> <operator pos:start="6786:21" pos:end="6786:21">=</operator> <operator pos:start="6786:23" pos:end="6786:23">-</operator><name pos:start="6786:24" pos:end="6786:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6790:13" pos:end="6790:36"><expr pos:start="6790:13" pos:end="6790:35"><call pos:start="6790:13" pos:end="6790:35"><name pos:start="6790:13" pos:end="6790:23">unlock_user</name><argument_list pos:start="6790:24" pos:end="6790:35">(<argument pos:start="6790:25" pos:end="6790:25"><expr pos:start="6790:25" pos:end="6790:25"><name pos:start="6790:25" pos:end="6790:25">p</name></expr></argument>, <argument pos:start="6790:28" pos:end="6790:31"><expr pos:start="6790:28" pos:end="6790:31"><name pos:start="6790:28" pos:end="6790:31">arg1</name></expr></argument>, <argument pos:start="6790:34" pos:end="6790:34"><expr pos:start="6790:34" pos:end="6790:34"><literal type="number" pos:start="6790:34" pos:end="6790:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="6792:13" pos:end="6792:36"><expr pos:start="6792:13" pos:end="6792:35"><call pos:start="6792:13" pos:end="6792:35"><name pos:start="6792:13" pos:end="6792:23">unlock_user</name><argument_list pos:start="6792:24" pos:end="6792:35">(<argument pos:start="6792:25" pos:end="6792:25"><expr pos:start="6792:25" pos:end="6792:25"><name pos:start="6792:25" pos:end="6792:25">n</name></expr></argument>, <argument pos:start="6792:28" pos:end="6792:31"><expr pos:start="6792:28" pos:end="6792:31"><name pos:start="6792:28" pos:end="6792:31">arg2</name></expr></argument>, <argument pos:start="6792:34" pos:end="6792:34"><expr pos:start="6792:34" pos:end="6792:34"><literal type="number" pos:start="6792:34" pos:end="6792:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6796:9" pos:end="6796:14">break;</break>

    <case pos:start="6798:5" pos:end="6798:32">case <expr pos:start="6798:10" pos:end="6798:31"><name pos:start="6798:10" pos:end="6798:31">TARGET_NR_fremovexattr</name></expr>:</case>

        <block pos:start="6800:9" pos:end="6818:9">{<block_content pos:start="6802:13" pos:end="6816:36">

            <decl_stmt pos:start="6802:13" pos:end="6802:20"><decl pos:start="6802:13" pos:end="6802:19"><type pos:start="6802:13" pos:end="6802:18"><name pos:start="6802:13" pos:end="6802:16">void</name> <modifier pos:start="6802:18" pos:end="6802:18">*</modifier></type><name pos:start="6802:19" pos:end="6802:19">n</name></decl>;</decl_stmt>

            <expr_stmt pos:start="6804:13" pos:end="6804:39"><expr pos:start="6804:13" pos:end="6804:38"><name pos:start="6804:13" pos:end="6804:13">n</name> <operator pos:start="6804:15" pos:end="6804:15">=</operator> <call pos:start="6804:17" pos:end="6804:38"><name pos:start="6804:17" pos:end="6804:32">lock_user_string</name><argument_list pos:start="6804:33" pos:end="6804:38">(<argument pos:start="6804:34" pos:end="6804:37"><expr pos:start="6804:34" pos:end="6804:37"><name pos:start="6804:34" pos:end="6804:37">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="6806:13" pos:end="6814:13"><if pos:start="6806:13" pos:end="6810:13">if <condition pos:start="6806:16" pos:end="6806:18">(<expr pos:start="6806:17" pos:end="6806:17"><name pos:start="6806:17" pos:end="6806:17">n</name></expr>)</condition> <block pos:start="6806:20" pos:end="6810:13">{<block_content pos:start="6808:17" pos:end="6808:55">

                <expr_stmt pos:start="6808:17" pos:end="6808:55"><expr pos:start="6808:17" pos:end="6808:54"><name pos:start="6808:17" pos:end="6808:19">ret</name> <operator pos:start="6808:21" pos:end="6808:21">=</operator> <call pos:start="6808:23" pos:end="6808:54"><name pos:start="6808:23" pos:end="6808:31">get_errno</name><argument_list pos:start="6808:32" pos:end="6808:54">(<argument pos:start="6808:33" pos:end="6808:53"><expr pos:start="6808:33" pos:end="6808:53"><call pos:start="6808:33" pos:end="6808:53"><name pos:start="6808:33" pos:end="6808:44">fremovexattr</name><argument_list pos:start="6808:45" pos:end="6808:53">(<argument pos:start="6808:46" pos:end="6808:49"><expr pos:start="6808:46" pos:end="6808:49"><name pos:start="6808:46" pos:end="6808:49">arg1</name></expr></argument>, <argument pos:start="6808:52" pos:end="6808:52"><expr pos:start="6808:52" pos:end="6808:52"><name pos:start="6808:52" pos:end="6808:52">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="6810:15" pos:end="6814:13">else <block pos:start="6810:20" pos:end="6814:13">{<block_content pos:start="6812:17" pos:end="6812:37">

                <expr_stmt pos:start="6812:17" pos:end="6812:37"><expr pos:start="6812:17" pos:end="6812:36"><name pos:start="6812:17" pos:end="6812:19">ret</name> <operator pos:start="6812:21" pos:end="6812:21">=</operator> <operator pos:start="6812:23" pos:end="6812:23">-</operator><name pos:start="6812:24" pos:end="6812:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="6816:13" pos:end="6816:36"><expr pos:start="6816:13" pos:end="6816:35"><call pos:start="6816:13" pos:end="6816:35"><name pos:start="6816:13" pos:end="6816:23">unlock_user</name><argument_list pos:start="6816:24" pos:end="6816:35">(<argument pos:start="6816:25" pos:end="6816:25"><expr pos:start="6816:25" pos:end="6816:25"><name pos:start="6816:25" pos:end="6816:25">n</name></expr></argument>, <argument pos:start="6816:28" pos:end="6816:31"><expr pos:start="6816:28" pos:end="6816:31"><name pos:start="6816:28" pos:end="6816:31">arg2</name></expr></argument>, <argument pos:start="6816:34" pos:end="6816:34"><expr pos:start="6816:34" pos:end="6816:34"><literal type="number" pos:start="6816:34" pos:end="6816:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="6820:9" pos:end="6827:0">break;</break>

<cpp:endif pos:start="6822:1" pos:end="6822:6">#<cpp:directive pos:start="6822:2" pos:end="6822:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="6824:1" pos:end="6824:6">#<cpp:directive pos:start="6824:2" pos:end="6824:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="6824:8" pos:end="6824:24">/* CONFIG_ATTR */</comment>

<cpp:ifdef pos:start="6826:1" pos:end="6826:32">#<cpp:directive pos:start="6826:2" pos:end="6826:6">ifdef</cpp:directive> <name pos:start="6826:8" pos:end="6826:32">TARGET_NR_set_thread_area</name></cpp:ifdef>

    <case pos:start="6828:5" pos:end="6831:0">case <expr pos:start="6828:10" pos:end="6828:34"><name pos:start="6828:10" pos:end="6828:34">TARGET_NR_set_thread_area</name></expr>:</case>

<cpp:if pos:start="6830:1" pos:end="6830:24">#<cpp:directive pos:start="6830:2" pos:end="6830:3">if</cpp:directive> <expr pos:start="6830:5" pos:end="6830:24"><call pos:start="6830:5" pos:end="6830:24"><name pos:start="6830:5" pos:end="6830:11">defined</name><argument_list pos:start="6830:12" pos:end="6830:24">(<argument pos:start="6830:13" pos:end="6830:23"><expr pos:start="6830:13" pos:end="6830:23"><name pos:start="6830:13" pos:end="6830:23">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

      <expr_stmt pos:start="6832:7" pos:end="6832:51"><expr pos:start="6832:7" pos:end="6832:50"><operator pos:start="6832:7" pos:end="6832:7">(</operator><operator pos:start="6832:8" pos:end="6832:8">(</operator><name pos:start="6832:9" pos:end="6832:20">CPUMIPSState</name> <operator pos:start="6832:22" pos:end="6832:22">*</operator><operator pos:start="6832:23" pos:end="6832:23">)</operator> <name pos:start="6832:25" pos:end="6832:31">cpu_env</name><operator pos:start="6832:32" pos:end="6832:32">)</operator><operator pos:start="6832:33" pos:end="6832:34">-&gt;</operator><name pos:start="6832:35" pos:end="6832:43">tls_value</name> <operator pos:start="6832:45" pos:end="6832:45">=</operator> <name pos:start="6832:47" pos:end="6832:50">arg1</name></expr>;</expr_stmt>


      <break pos:start="6835:7" pos:end="6838:0">break;</break>

<cpp:elif pos:start="6837:1" pos:end="6837:26">#<cpp:directive pos:start="6837:2" pos:end="6837:5">elif</cpp:directive> <expr pos:start="6837:7" pos:end="6837:26"><call pos:start="6837:7" pos:end="6837:26"><name pos:start="6837:7" pos:end="6837:13">defined</name><argument_list pos:start="6837:14" pos:end="6837:26">(<argument pos:start="6837:15" pos:end="6837:25"><expr pos:start="6837:15" pos:end="6837:25"><name pos:start="6837:15" pos:end="6837:25">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

      <if_stmt pos:start="6839:7" pos:end="6848:7"><if pos:start="6839:7" pos:end="6841:31">if <condition pos:start="6839:10" pos:end="6839:22">(<expr pos:start="6839:11" pos:end="6839:21"><name pos:start="6839:11" pos:end="6839:14">arg1</name> <operator pos:start="6839:16" pos:end="6839:16">&amp;</operator> <literal type="number" pos:start="6839:18" pos:end="6839:21">0xff</literal></expr>)</condition><block type="pseudo" pos:start="6841:11" pos:end="6841:31"><block_content pos:start="6841:11" pos:end="6841:31">

          <expr_stmt pos:start="6841:11" pos:end="6841:31"><expr pos:start="6841:11" pos:end="6841:30"><name pos:start="6841:11" pos:end="6841:13">ret</name> <operator pos:start="6841:15" pos:end="6841:15">=</operator> <operator pos:start="6841:17" pos:end="6841:17">-</operator><name pos:start="6841:18" pos:end="6841:30">TARGET_EINVAL</name></expr>;</expr_stmt></block_content></block></if>

      <else pos:start="6843:7" pos:end="6848:7">else <block pos:start="6843:12" pos:end="6848:7">{<block_content pos:start="6845:11" pos:end="6845:59">

          <expr_stmt pos:start="6845:11" pos:end="6845:59"><expr pos:start="6845:11" pos:end="6845:58"><operator pos:start="6845:11" pos:end="6845:11">(</operator><operator pos:start="6845:12" pos:end="6845:12">(</operator><name pos:start="6845:13" pos:end="6845:24">CPUCRISState</name> <operator pos:start="6845:26" pos:end="6845:26">*</operator><operator pos:start="6845:27" pos:end="6845:27">)</operator> <name pos:start="6845:29" pos:end="6845:35">cpu_env</name><operator pos:start="6845:36" pos:end="6845:36">)</operator><operator pos:start="6845:37" pos:end="6845:38">-&gt;</operator><name pos:start="6845:39" pos:end="6845:51"><name pos:start="6845:39" pos:end="6845:43">pregs</name><index pos:start="6845:44" pos:end="6845:51">[<expr pos:start="6845:45" pos:end="6845:50"><name pos:start="6845:45" pos:end="6845:50">PR_PID</name></expr>]</index></name> <operator pos:start="6845:53" pos:end="6845:53">=</operator> <name pos:start="6845:55" pos:end="6845:58">arg1</name></expr>;</expr_stmt>


      </block_content>}</block></else></if_stmt>

      <break pos:start="6850:7" pos:end="6853:0">break;</break>

<cpp:elif pos:start="6852:1" pos:end="6852:51">#<cpp:directive pos:start="6852:2" pos:end="6852:5">elif</cpp:directive> <expr pos:start="6852:7" pos:end="6852:51"><call pos:start="6852:7" pos:end="6852:26"><name pos:start="6852:7" pos:end="6852:13">defined</name><argument_list pos:start="6852:14" pos:end="6852:26">(<argument pos:start="6852:15" pos:end="6852:25"><expr pos:start="6852:15" pos:end="6852:25"><name pos:start="6852:15" pos:end="6852:25">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="6852:28" pos:end="6852:29">&amp;&amp;</operator> <call pos:start="6852:31" pos:end="6852:51"><name pos:start="6852:31" pos:end="6852:37">defined</name><argument_list pos:start="6852:38" pos:end="6852:51">(<argument pos:start="6852:39" pos:end="6852:50"><expr pos:start="6852:39" pos:end="6852:50"><name pos:start="6852:39" pos:end="6852:50">TARGET_ABI32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

      <expr_stmt pos:start="6854:7" pos:end="6854:46"><expr pos:start="6854:7" pos:end="6854:45"><name pos:start="6854:7" pos:end="6854:9">ret</name> <operator pos:start="6854:11" pos:end="6854:11">=</operator> <call pos:start="6854:13" pos:end="6854:45"><name pos:start="6854:13" pos:end="6854:30">do_set_thread_area</name><argument_list pos:start="6854:31" pos:end="6854:45">(<argument pos:start="6854:32" pos:end="6854:38"><expr pos:start="6854:32" pos:end="6854:38"><name pos:start="6854:32" pos:end="6854:38">cpu_env</name></expr></argument>, <argument pos:start="6854:41" pos:end="6854:44"><expr pos:start="6854:41" pos:end="6854:44"><name pos:start="6854:41" pos:end="6854:44">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="6856:7" pos:end="6859:0">break;</break>

<cpp:elif pos:start="6858:1" pos:end="6858:26">#<cpp:directive pos:start="6858:2" pos:end="6858:5">elif</cpp:directive> <expr pos:start="6858:7" pos:end="6858:26"><call pos:start="6858:7" pos:end="6858:26"><name pos:start="6858:7" pos:end="6858:13">defined</name><argument_list pos:start="6858:14" pos:end="6858:26">(<argument pos:start="6858:15" pos:end="6858:25"><expr pos:start="6858:15" pos:end="6858:25"><name pos:start="6858:15" pos:end="6858:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>

      <block pos:start="6860:7" pos:end="6872:0">{<block_content pos:start="6862:11" pos:end="6867:16">

          <decl_stmt pos:start="6862:11" pos:end="6862:38"><decl pos:start="6862:11" pos:end="6862:37"><type pos:start="6862:11" pos:end="6862:21"><name pos:start="6862:11" pos:end="6862:19">TaskState</name> <modifier pos:start="6862:21" pos:end="6862:21">*</modifier></type><name pos:start="6862:22" pos:end="6862:23">ts</name> <init pos:start="6862:25" pos:end="6862:37">= <expr pos:start="6862:27" pos:end="6862:37"><name pos:start="6862:27" pos:end="6862:37"><name pos:start="6862:27" pos:end="6862:29">cpu</name><operator pos:start="6862:30" pos:end="6862:31">-&gt;</operator><name pos:start="6862:32" pos:end="6862:37">opaque</name></name></expr></init></decl>;</decl_stmt>

          <expr_stmt pos:start="6864:11" pos:end="6864:30"><expr pos:start="6864:11" pos:end="6864:29"><name pos:start="6864:11" pos:end="6864:22"><name pos:start="6864:11" pos:end="6864:12">ts</name><operator pos:start="6864:13" pos:end="6864:14">-&gt;</operator><name pos:start="6864:15" pos:end="6864:22">tp_value</name></name> <operator pos:start="6864:24" pos:end="6864:24">=</operator> <name pos:start="6864:26" pos:end="6864:29">arg1</name></expr>;</expr_stmt>


          <break pos:start="6867:11" pos:end="6867:16">break;</break>

      </block_content>}</block>

<cpp:else pos:start="6871:1" pos:end="6871:5">#<cpp:directive pos:start="6871:2" pos:end="6871:5">else</cpp:directive></cpp:else>

      <goto pos:start="6873:7" pos:end="6880:0">goto <name pos:start="6873:12" pos:end="6873:31">unimplemented_nowarn</name>;</goto>

<cpp:endif pos:start="6875:1" pos:end="6875:6">#<cpp:directive pos:start="6875:2" pos:end="6875:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="6877:1" pos:end="6877:6">#<cpp:directive pos:start="6877:2" pos:end="6877:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6879:1" pos:end="6879:32">#<cpp:directive pos:start="6879:2" pos:end="6879:6">ifdef</cpp:directive> <name pos:start="6879:8" pos:end="6879:32">TARGET_NR_get_thread_area</name></cpp:ifdef>

    <case pos:start="6881:5" pos:end="6884:0">case <expr pos:start="6881:10" pos:end="6881:34"><name pos:start="6881:10" pos:end="6881:34">TARGET_NR_get_thread_area</name></expr>:</case>

<cpp:if pos:start="6883:1" pos:end="6883:49">#<cpp:directive pos:start="6883:2" pos:end="6883:3">if</cpp:directive> <expr pos:start="6883:5" pos:end="6883:49"><call pos:start="6883:5" pos:end="6883:24"><name pos:start="6883:5" pos:end="6883:11">defined</name><argument_list pos:start="6883:12" pos:end="6883:24">(<argument pos:start="6883:13" pos:end="6883:23"><expr pos:start="6883:13" pos:end="6883:23"><name pos:start="6883:13" pos:end="6883:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="6883:26" pos:end="6883:27">&amp;&amp;</operator> <call pos:start="6883:29" pos:end="6883:49"><name pos:start="6883:29" pos:end="6883:35">defined</name><argument_list pos:start="6883:36" pos:end="6883:49">(<argument pos:start="6883:37" pos:end="6883:48"><expr pos:start="6883:37" pos:end="6883:48"><name pos:start="6883:37" pos:end="6883:48">TARGET_ABI32</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="6885:9" pos:end="6885:48"><expr pos:start="6885:9" pos:end="6885:47"><name pos:start="6885:9" pos:end="6885:11">ret</name> <operator pos:start="6885:13" pos:end="6885:13">=</operator> <call pos:start="6885:15" pos:end="6885:47"><name pos:start="6885:15" pos:end="6885:32">do_get_thread_area</name><argument_list pos:start="6885:33" pos:end="6885:47">(<argument pos:start="6885:34" pos:end="6885:40"><expr pos:start="6885:34" pos:end="6885:40"><name pos:start="6885:34" pos:end="6885:40">cpu_env</name></expr></argument>, <argument pos:start="6885:43" pos:end="6885:46"><expr pos:start="6885:43" pos:end="6885:46"><name pos:start="6885:43" pos:end="6885:46">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6887:9" pos:end="6890:0">break;</break>

<cpp:elif pos:start="6889:1" pos:end="6889:26">#<cpp:directive pos:start="6889:2" pos:end="6889:5">elif</cpp:directive> <expr pos:start="6889:7" pos:end="6889:26"><call pos:start="6889:7" pos:end="6889:26"><name pos:start="6889:7" pos:end="6889:13">defined</name><argument_list pos:start="6889:14" pos:end="6889:26">(<argument pos:start="6889:15" pos:end="6889:25"><expr pos:start="6889:15" pos:end="6889:25"><name pos:start="6889:15" pos:end="6889:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <block pos:start="6891:9" pos:end="6902:0">{<block_content pos:start="6893:13" pos:end="6897:18">

            <decl_stmt pos:start="6893:13" pos:end="6893:40"><decl pos:start="6893:13" pos:end="6893:39"><type pos:start="6893:13" pos:end="6893:23"><name pos:start="6893:13" pos:end="6893:21">TaskState</name> <modifier pos:start="6893:23" pos:end="6893:23">*</modifier></type><name pos:start="6893:24" pos:end="6893:25">ts</name> <init pos:start="6893:27" pos:end="6893:39">= <expr pos:start="6893:29" pos:end="6893:39"><name pos:start="6893:29" pos:end="6893:39"><name pos:start="6893:29" pos:end="6893:31">cpu</name><operator pos:start="6893:32" pos:end="6893:33">-&gt;</operator><name pos:start="6893:34" pos:end="6893:39">opaque</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="6895:13" pos:end="6895:31"><expr pos:start="6895:13" pos:end="6895:30"><name pos:start="6895:13" pos:end="6895:15">ret</name> <operator pos:start="6895:17" pos:end="6895:17">=</operator> <name pos:start="6895:19" pos:end="6895:30"><name pos:start="6895:19" pos:end="6895:20">ts</name><operator pos:start="6895:21" pos:end="6895:22">-&gt;</operator><name pos:start="6895:23" pos:end="6895:30">tp_value</name></name></expr>;</expr_stmt>

            <break pos:start="6897:13" pos:end="6897:18">break;</break>

        </block_content>}</block>

<cpp:else pos:start="6901:1" pos:end="6901:5">#<cpp:directive pos:start="6901:2" pos:end="6901:5">else</cpp:directive></cpp:else>

        <goto pos:start="6903:9" pos:end="6910:0">goto <name pos:start="6903:14" pos:end="6903:33">unimplemented_nowarn</name>;</goto>

<cpp:endif pos:start="6905:1" pos:end="6905:6">#<cpp:directive pos:start="6905:2" pos:end="6905:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="6907:1" pos:end="6907:6">#<cpp:directive pos:start="6907:2" pos:end="6907:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6909:1" pos:end="6909:30">#<cpp:directive pos:start="6909:2" pos:end="6909:6">ifdef</cpp:directive> <name pos:start="6909:8" pos:end="6909:30">TARGET_NR_getdomainname</name></cpp:ifdef>

    <case pos:start="6911:5" pos:end="6911:33">case <expr pos:start="6911:10" pos:end="6911:32"><name pos:start="6911:10" pos:end="6911:32">TARGET_NR_getdomainname</name></expr>:</case>

        <goto pos:start="6913:9" pos:end="6920:0">goto <name pos:start="6913:14" pos:end="6913:33">unimplemented_nowarn</name>;</goto>

<cpp:endif pos:start="6915:1" pos:end="6915:6">#<cpp:directive pos:start="6915:2" pos:end="6915:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="6919:1" pos:end="6919:30">#<cpp:directive pos:start="6919:2" pos:end="6919:6">ifdef</cpp:directive> <name pos:start="6919:8" pos:end="6919:30">TARGET_NR_clock_gettime</name></cpp:ifdef>

    <case pos:start="6921:5" pos:end="6921:33">case <expr pos:start="6921:10" pos:end="6921:32"><name pos:start="6921:10" pos:end="6921:32">TARGET_NR_clock_gettime</name></expr>:</case>

    <block pos:start="6923:5" pos:end="6942:0">{<block_content pos:start="6925:9" pos:end="6935:14">

        <decl_stmt pos:start="6925:9" pos:end="6925:27"><decl pos:start="6925:9" pos:end="6925:26"><type pos:start="6925:9" pos:end="6925:23"><name pos:start="6925:9" pos:end="6925:23"><name pos:start="6925:9" pos:end="6925:14">struct</name> <name pos:start="6925:16" pos:end="6925:23">timespec</name></name></type> <name pos:start="6925:25" pos:end="6925:26">ts</name></decl>;</decl_stmt>

        <expr_stmt pos:start="6927:9" pos:end="6927:50"><expr pos:start="6927:9" pos:end="6927:49"><name pos:start="6927:9" pos:end="6927:11">ret</name> <operator pos:start="6927:13" pos:end="6927:13">=</operator> <call pos:start="6927:15" pos:end="6927:49"><name pos:start="6927:15" pos:end="6927:23">get_errno</name><argument_list pos:start="6927:24" pos:end="6927:49">(<argument pos:start="6927:25" pos:end="6927:48"><expr pos:start="6927:25" pos:end="6927:48"><call pos:start="6927:25" pos:end="6927:48"><name pos:start="6927:25" pos:end="6927:37">clock_gettime</name><argument_list pos:start="6927:38" pos:end="6927:48">(<argument pos:start="6927:39" pos:end="6927:42"><expr pos:start="6927:39" pos:end="6927:42"><name pos:start="6927:39" pos:end="6927:42">arg1</name></expr></argument>, <argument pos:start="6927:45" pos:end="6927:47"><expr pos:start="6927:45" pos:end="6927:47"><operator pos:start="6927:45" pos:end="6927:45">&amp;</operator><name pos:start="6927:46" pos:end="6927:47">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6929:9" pos:end="6933:9"><if pos:start="6929:9" pos:end="6933:9">if <condition pos:start="6929:12" pos:end="6929:27">(<expr pos:start="6929:13" pos:end="6929:26"><operator pos:start="6929:13" pos:end="6929:13">!</operator><call pos:start="6929:14" pos:end="6929:26"><name pos:start="6929:14" pos:end="6929:21">is_error</name><argument_list pos:start="6929:22" pos:end="6929:26">(<argument pos:start="6929:23" pos:end="6929:25"><expr pos:start="6929:23" pos:end="6929:25"><name pos:start="6929:23" pos:end="6929:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6929:29" pos:end="6933:9">{<block_content pos:start="6931:13" pos:end="6931:47">

            <expr_stmt pos:start="6931:13" pos:end="6931:47"><expr pos:start="6931:13" pos:end="6931:46"><call pos:start="6931:13" pos:end="6931:46"><name pos:start="6931:13" pos:end="6931:35">host_to_target_timespec</name><argument_list pos:start="6931:36" pos:end="6931:46">(<argument pos:start="6931:37" pos:end="6931:40"><expr pos:start="6931:37" pos:end="6931:40"><name pos:start="6931:37" pos:end="6931:40">arg2</name></expr></argument>, <argument pos:start="6931:43" pos:end="6931:45"><expr pos:start="6931:43" pos:end="6931:45"><operator pos:start="6931:43" pos:end="6931:43">&amp;</operator><name pos:start="6931:44" pos:end="6931:45">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="6935:9" pos:end="6935:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="6939:1" pos:end="6939:6">#<cpp:directive pos:start="6939:2" pos:end="6939:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6941:1" pos:end="6941:29">#<cpp:directive pos:start="6941:2" pos:end="6941:6">ifdef</cpp:directive> <name pos:start="6941:8" pos:end="6941:29">TARGET_NR_clock_getres</name></cpp:ifdef>

    <case pos:start="6943:5" pos:end="6943:32">case <expr pos:start="6943:10" pos:end="6943:31"><name pos:start="6943:10" pos:end="6943:31">TARGET_NR_clock_getres</name></expr>:</case>

    <block pos:start="6945:5" pos:end="6964:0">{<block_content pos:start="6947:9" pos:end="6957:14">

        <decl_stmt pos:start="6947:9" pos:end="6947:27"><decl pos:start="6947:9" pos:end="6947:26"><type pos:start="6947:9" pos:end="6947:23"><name pos:start="6947:9" pos:end="6947:23"><name pos:start="6947:9" pos:end="6947:14">struct</name> <name pos:start="6947:16" pos:end="6947:23">timespec</name></name></type> <name pos:start="6947:25" pos:end="6947:26">ts</name></decl>;</decl_stmt>

        <expr_stmt pos:start="6949:9" pos:end="6949:49"><expr pos:start="6949:9" pos:end="6949:48"><name pos:start="6949:9" pos:end="6949:11">ret</name> <operator pos:start="6949:13" pos:end="6949:13">=</operator> <call pos:start="6949:15" pos:end="6949:48"><name pos:start="6949:15" pos:end="6949:23">get_errno</name><argument_list pos:start="6949:24" pos:end="6949:48">(<argument pos:start="6949:25" pos:end="6949:47"><expr pos:start="6949:25" pos:end="6949:47"><call pos:start="6949:25" pos:end="6949:47"><name pos:start="6949:25" pos:end="6949:36">clock_getres</name><argument_list pos:start="6949:37" pos:end="6949:47">(<argument pos:start="6949:38" pos:end="6949:41"><expr pos:start="6949:38" pos:end="6949:41"><name pos:start="6949:38" pos:end="6949:41">arg1</name></expr></argument>, <argument pos:start="6949:44" pos:end="6949:46"><expr pos:start="6949:44" pos:end="6949:46"><operator pos:start="6949:44" pos:end="6949:44">&amp;</operator><name pos:start="6949:45" pos:end="6949:46">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6951:9" pos:end="6955:9"><if pos:start="6951:9" pos:end="6955:9">if <condition pos:start="6951:12" pos:end="6951:27">(<expr pos:start="6951:13" pos:end="6951:26"><operator pos:start="6951:13" pos:end="6951:13">!</operator><call pos:start="6951:14" pos:end="6951:26"><name pos:start="6951:14" pos:end="6951:21">is_error</name><argument_list pos:start="6951:22" pos:end="6951:26">(<argument pos:start="6951:23" pos:end="6951:25"><expr pos:start="6951:23" pos:end="6951:25"><name pos:start="6951:23" pos:end="6951:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6951:29" pos:end="6955:9">{<block_content pos:start="6953:13" pos:end="6953:47">

            <expr_stmt pos:start="6953:13" pos:end="6953:47"><expr pos:start="6953:13" pos:end="6953:46"><call pos:start="6953:13" pos:end="6953:46"><name pos:start="6953:13" pos:end="6953:35">host_to_target_timespec</name><argument_list pos:start="6953:36" pos:end="6953:46">(<argument pos:start="6953:37" pos:end="6953:40"><expr pos:start="6953:37" pos:end="6953:40"><name pos:start="6953:37" pos:end="6953:40">arg2</name></expr></argument>, <argument pos:start="6953:43" pos:end="6953:45"><expr pos:start="6953:43" pos:end="6953:45"><operator pos:start="6953:43" pos:end="6953:43">&amp;</operator><name pos:start="6953:44" pos:end="6953:45">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="6957:9" pos:end="6957:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="6961:1" pos:end="6961:6">#<cpp:directive pos:start="6961:2" pos:end="6961:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="6963:1" pos:end="6963:32">#<cpp:directive pos:start="6963:2" pos:end="6963:6">ifdef</cpp:directive> <name pos:start="6963:8" pos:end="6963:32">TARGET_NR_clock_nanosleep</name></cpp:ifdef>

    <case pos:start="6965:5" pos:end="6965:35">case <expr pos:start="6965:10" pos:end="6965:34"><name pos:start="6965:10" pos:end="6965:34">TARGET_NR_clock_nanosleep</name></expr>:</case>

    <block pos:start="6967:5" pos:end="6988:0">{<block_content pos:start="6969:9" pos:end="6979:14">

        <decl_stmt pos:start="6969:9" pos:end="6969:27"><decl pos:start="6969:9" pos:end="6969:26"><type pos:start="6969:9" pos:end="6969:23"><name pos:start="6969:9" pos:end="6969:23"><name pos:start="6969:9" pos:end="6969:14">struct</name> <name pos:start="6969:16" pos:end="6969:23">timespec</name></name></type> <name pos:start="6969:25" pos:end="6969:26">ts</name></decl>;</decl_stmt>

        <expr_stmt pos:start="6971:9" pos:end="6971:43"><expr pos:start="6971:9" pos:end="6971:42"><call pos:start="6971:9" pos:end="6971:42"><name pos:start="6971:9" pos:end="6971:31">target_to_host_timespec</name><argument_list pos:start="6971:32" pos:end="6971:42">(<argument pos:start="6971:33" pos:end="6971:35"><expr pos:start="6971:33" pos:end="6971:35"><operator pos:start="6971:33" pos:end="6971:33">&amp;</operator><name pos:start="6971:34" pos:end="6971:35">ts</name></expr></argument>, <argument pos:start="6971:38" pos:end="6971:41"><expr pos:start="6971:38" pos:end="6971:41"><name pos:start="6971:38" pos:end="6971:41">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="6973:9" pos:end="6973:77"><expr pos:start="6973:9" pos:end="6973:76"><name pos:start="6973:9" pos:end="6973:11">ret</name> <operator pos:start="6973:13" pos:end="6973:13">=</operator> <call pos:start="6973:15" pos:end="6973:76"><name pos:start="6973:15" pos:end="6973:23">get_errno</name><argument_list pos:start="6973:24" pos:end="6973:76">(<argument pos:start="6973:25" pos:end="6973:75"><expr pos:start="6973:25" pos:end="6973:75"><call pos:start="6973:25" pos:end="6973:75"><name pos:start="6973:25" pos:end="6973:39">clock_nanosleep</name><argument_list pos:start="6973:40" pos:end="6973:75">(<argument pos:start="6973:41" pos:end="6973:44"><expr pos:start="6973:41" pos:end="6973:44"><name pos:start="6973:41" pos:end="6973:44">arg1</name></expr></argument>, <argument pos:start="6973:47" pos:end="6973:50"><expr pos:start="6973:47" pos:end="6973:50"><name pos:start="6973:47" pos:end="6973:50">arg2</name></expr></argument>, <argument pos:start="6973:53" pos:end="6973:55"><expr pos:start="6973:53" pos:end="6973:55"><operator pos:start="6973:53" pos:end="6973:53">&amp;</operator><name pos:start="6973:54" pos:end="6973:55">ts</name></expr></argument>, <argument pos:start="6973:58" pos:end="6973:74"><expr pos:start="6973:58" pos:end="6973:74"><ternary pos:start="6973:58" pos:end="6973:74"><condition pos:start="6973:58" pos:end="6973:63"><expr pos:start="6973:58" pos:end="6973:61"><name pos:start="6973:58" pos:end="6973:61">arg4</name></expr> ?</condition><then pos:start="6973:65" pos:end="6973:67"> <expr pos:start="6973:65" pos:end="6973:67"><operator pos:start="6973:65" pos:end="6973:65">&amp;</operator><name pos:start="6973:66" pos:end="6973:67">ts</name></expr> </then><else pos:start="6973:69" pos:end="6973:74">: <expr pos:start="6973:71" pos:end="6973:74"><name pos:start="6973:71" pos:end="6973:74">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="6975:9" pos:end="6977:47"><if pos:start="6975:9" pos:end="6977:47">if <condition pos:start="6975:12" pos:end="6975:17">(<expr pos:start="6975:13" pos:end="6975:16"><name pos:start="6975:13" pos:end="6975:16">arg4</name></expr>)</condition><block type="pseudo" pos:start="6977:13" pos:end="6977:47"><block_content pos:start="6977:13" pos:end="6977:47">

            <expr_stmt pos:start="6977:13" pos:end="6977:47"><expr pos:start="6977:13" pos:end="6977:46"><call pos:start="6977:13" pos:end="6977:46"><name pos:start="6977:13" pos:end="6977:35">host_to_target_timespec</name><argument_list pos:start="6977:36" pos:end="6977:46">(<argument pos:start="6977:37" pos:end="6977:40"><expr pos:start="6977:37" pos:end="6977:40"><name pos:start="6977:37" pos:end="6977:40">arg4</name></expr></argument>, <argument pos:start="6977:43" pos:end="6977:45"><expr pos:start="6977:43" pos:end="6977:45"><operator pos:start="6977:43" pos:end="6977:43">&amp;</operator><name pos:start="6977:44" pos:end="6977:45">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="6979:9" pos:end="6979:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="6983:1" pos:end="6983:6">#<cpp:directive pos:start="6983:2" pos:end="6983:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="6987:1" pos:end="6987:71">#<cpp:directive pos:start="6987:2" pos:end="6987:3">if</cpp:directive> <expr pos:start="6987:5" pos:end="6987:71"><call pos:start="6987:5" pos:end="6987:38"><name pos:start="6987:5" pos:end="6987:11">defined</name><argument_list pos:start="6987:12" pos:end="6987:38">(<argument pos:start="6987:13" pos:end="6987:37"><expr pos:start="6987:13" pos:end="6987:37"><name pos:start="6987:13" pos:end="6987:37">TARGET_NR_set_tid_address</name></expr></argument>)</argument_list></call> <operator pos:start="6987:40" pos:end="6987:41">&amp;&amp;</operator> <call pos:start="6987:43" pos:end="6987:71"><name pos:start="6987:43" pos:end="6987:49">defined</name><argument_list pos:start="6987:50" pos:end="6987:71">(<argument pos:start="6987:51" pos:end="6987:70"><expr pos:start="6987:51" pos:end="6987:70"><name pos:start="6987:51" pos:end="6987:70">__NR_set_tid_address</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="6989:5" pos:end="6989:35">case <expr pos:start="6989:10" pos:end="6989:34"><name pos:start="6989:10" pos:end="6989:34">TARGET_NR_set_tid_address</name></expr>:</case>

        <expr_stmt pos:start="6991:9" pos:end="6991:59"><expr pos:start="6991:9" pos:end="6991:58"><name pos:start="6991:9" pos:end="6991:11">ret</name> <operator pos:start="6991:13" pos:end="6991:13">=</operator> <call pos:start="6991:15" pos:end="6991:58"><name pos:start="6991:15" pos:end="6991:23">get_errno</name><argument_list pos:start="6991:24" pos:end="6991:58">(<argument pos:start="6991:25" pos:end="6991:57"><expr pos:start="6991:25" pos:end="6991:57"><call pos:start="6991:25" pos:end="6991:57"><name pos:start="6991:25" pos:end="6991:39">set_tid_address</name><argument_list pos:start="6991:40" pos:end="6991:57">(<argument pos:start="6991:41" pos:end="6991:56"><expr pos:start="6991:41" pos:end="6991:56"><operator pos:start="6991:41" pos:end="6991:41">(</operator><name pos:start="6991:42" pos:end="6991:44">int</name> <operator pos:start="6991:46" pos:end="6991:46">*</operator><operator pos:start="6991:47" pos:end="6991:47">)</operator><call pos:start="6991:48" pos:end="6991:56"><name pos:start="6991:48" pos:end="6991:50">g2h</name><argument_list pos:start="6991:51" pos:end="6991:56">(<argument pos:start="6991:52" pos:end="6991:55"><expr pos:start="6991:52" pos:end="6991:55"><name pos:start="6991:52" pos:end="6991:55">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="6993:9" pos:end="7000:0">break;</break>

<cpp:endif pos:start="6995:1" pos:end="6995:6">#<cpp:directive pos:start="6995:2" pos:end="6995:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="6999:1" pos:end="6999:51">#<cpp:directive pos:start="6999:2" pos:end="6999:3">if</cpp:directive> <expr pos:start="6999:5" pos:end="6999:51"><call pos:start="6999:5" pos:end="6999:28"><name pos:start="6999:5" pos:end="6999:11">defined</name><argument_list pos:start="6999:12" pos:end="6999:28">(<argument pos:start="6999:13" pos:end="6999:27"><expr pos:start="6999:13" pos:end="6999:27"><name pos:start="6999:13" pos:end="6999:27">TARGET_NR_tkill</name></expr></argument>)</argument_list></call> <operator pos:start="6999:30" pos:end="6999:31">&amp;&amp;</operator> <call pos:start="6999:33" pos:end="6999:51"><name pos:start="6999:33" pos:end="6999:39">defined</name><argument_list pos:start="6999:40" pos:end="6999:51">(<argument pos:start="6999:41" pos:end="6999:50"><expr pos:start="6999:41" pos:end="6999:50"><name pos:start="6999:41" pos:end="6999:50">__NR_tkill</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7001:5" pos:end="7001:25">case <expr pos:start="7001:10" pos:end="7001:24"><name pos:start="7001:10" pos:end="7001:24">TARGET_NR_tkill</name></expr>:</case>

        <expr_stmt pos:start="7003:9" pos:end="7003:75"><expr pos:start="7003:9" pos:end="7003:74"><name pos:start="7003:9" pos:end="7003:11">ret</name> <operator pos:start="7003:13" pos:end="7003:13">=</operator> <call pos:start="7003:15" pos:end="7003:74"><name pos:start="7003:15" pos:end="7003:23">get_errno</name><argument_list pos:start="7003:24" pos:end="7003:74">(<argument pos:start="7003:25" pos:end="7003:73"><expr pos:start="7003:25" pos:end="7003:73"><call pos:start="7003:25" pos:end="7003:73"><name pos:start="7003:25" pos:end="7003:33">sys_tkill</name><argument_list pos:start="7003:34" pos:end="7003:73">(<argument pos:start="7003:35" pos:end="7003:43"><expr pos:start="7003:35" pos:end="7003:43"><operator pos:start="7003:35" pos:end="7003:35">(</operator><name pos:start="7003:36" pos:end="7003:38">int</name><operator pos:start="7003:39" pos:end="7003:39">)</operator><name pos:start="7003:40" pos:end="7003:43">arg1</name></expr></argument>, <argument pos:start="7003:46" pos:end="7003:72"><expr pos:start="7003:46" pos:end="7003:72"><call pos:start="7003:46" pos:end="7003:72"><name pos:start="7003:46" pos:end="7003:66">target_to_host_signal</name><argument_list pos:start="7003:67" pos:end="7003:72">(<argument pos:start="7003:68" pos:end="7003:71"><expr pos:start="7003:68" pos:end="7003:71"><name pos:start="7003:68" pos:end="7003:71">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7005:9" pos:end="7012:0">break;</break>

<cpp:endif pos:start="7007:1" pos:end="7007:6">#<cpp:directive pos:start="7007:2" pos:end="7007:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="7011:1" pos:end="7011:53">#<cpp:directive pos:start="7011:2" pos:end="7011:3">if</cpp:directive> <expr pos:start="7011:5" pos:end="7011:53"><call pos:start="7011:5" pos:end="7011:29"><name pos:start="7011:5" pos:end="7011:11">defined</name><argument_list pos:start="7011:12" pos:end="7011:29">(<argument pos:start="7011:13" pos:end="7011:28"><expr pos:start="7011:13" pos:end="7011:28"><name pos:start="7011:13" pos:end="7011:28">TARGET_NR_tgkill</name></expr></argument>)</argument_list></call> <operator pos:start="7011:31" pos:end="7011:32">&amp;&amp;</operator> <call pos:start="7011:34" pos:end="7011:53"><name pos:start="7011:34" pos:end="7011:40">defined</name><argument_list pos:start="7011:41" pos:end="7011:53">(<argument pos:start="7011:42" pos:end="7011:52"><expr pos:start="7011:42" pos:end="7011:52"><name pos:start="7011:42" pos:end="7011:52">__NR_tgkill</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7013:5" pos:end="7013:26">case <expr pos:start="7013:10" pos:end="7013:25"><name pos:start="7013:10" pos:end="7013:25">TARGET_NR_tgkill</name></expr>:</case>

	<expr_stmt pos:start="7015:9" pos:end="7017:54"><expr pos:start="7015:9" pos:end="7017:53"><name pos:start="7015:9" pos:end="7015:11">ret</name> <operator pos:start="7015:13" pos:end="7015:13">=</operator> <call pos:start="7015:15" pos:end="7017:53"><name pos:start="7015:15" pos:end="7015:23">get_errno</name><argument_list pos:start="7015:24" pos:end="7017:53">(<argument pos:start="7015:25" pos:end="7017:52"><expr pos:start="7015:25" pos:end="7017:52"><call pos:start="7015:25" pos:end="7017:52"><name pos:start="7015:25" pos:end="7015:34">sys_tgkill</name><argument_list pos:start="7015:35" pos:end="7017:52">(<argument pos:start="7015:36" pos:end="7015:44"><expr pos:start="7015:36" pos:end="7015:44"><operator pos:start="7015:36" pos:end="7015:36">(</operator><name pos:start="7015:37" pos:end="7015:39">int</name><operator pos:start="7015:40" pos:end="7015:40">)</operator><name pos:start="7015:41" pos:end="7015:44">arg1</name></expr></argument>, <argument pos:start="7015:47" pos:end="7015:55"><expr pos:start="7015:47" pos:end="7015:55"><operator pos:start="7015:47" pos:end="7015:47">(</operator><name pos:start="7015:48" pos:end="7015:50">int</name><operator pos:start="7015:51" pos:end="7015:51">)</operator><name pos:start="7015:52" pos:end="7015:55">arg2</name></expr></argument>,

                        <argument pos:start="7017:25" pos:end="7017:51"><expr pos:start="7017:25" pos:end="7017:51"><call pos:start="7017:25" pos:end="7017:51"><name pos:start="7017:25" pos:end="7017:45">target_to_host_signal</name><argument_list pos:start="7017:46" pos:end="7017:51">(<argument pos:start="7017:47" pos:end="7017:50"><expr pos:start="7017:47" pos:end="7017:50"><name pos:start="7017:47" pos:end="7017:50">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="7019:9" pos:end="7026:0">break;</break>

<cpp:endif pos:start="7021:1" pos:end="7021:6">#<cpp:directive pos:start="7021:2" pos:end="7021:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="7025:1" pos:end="7025:32">#<cpp:directive pos:start="7025:2" pos:end="7025:6">ifdef</cpp:directive> <name pos:start="7025:8" pos:end="7025:32">TARGET_NR_set_robust_list</name></cpp:ifdef>

    <case pos:start="7027:5" pos:end="7027:35">case <expr pos:start="7027:10" pos:end="7027:34"><name pos:start="7027:10" pos:end="7027:34">TARGET_NR_set_robust_list</name></expr>:</case>

    <case pos:start="7029:5" pos:end="7029:35">case <expr pos:start="7029:10" pos:end="7029:34"><name pos:start="7029:10" pos:end="7029:34">TARGET_NR_get_robust_list</name></expr>:</case>

        <comment type="block" pos:start="7031:9" pos:end="7053:11">/* The ABI for supporting robust futexes has userspace pass

         * the kernel a pointer to a linked list which is updated by

         * userspace after the syscall; the list is walked by the kernel

         * when the thread exits. Since the linked list in QEMU guest

         * memory isn't a valid linked list for the host and we have

         * no way to reliably intercept the thread-death event, we can't

         * support these. Silently return ENOSYS so that guest userspace

         * falls back to a non-robust futex implementation (which should

         * be OK except in the corner case of the guest crashing while

         * holding a mutex that is shared with another process via

         * shared memory).

         */</comment>

        <goto pos:start="7055:9" pos:end="7062:0">goto <name pos:start="7055:14" pos:end="7055:33">unimplemented_nowarn</name>;</goto>

<cpp:endif pos:start="7057:1" pos:end="7057:6">#<cpp:directive pos:start="7057:2" pos:end="7057:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="7061:1" pos:end="7061:32">#<cpp:directive pos:start="7061:2" pos:end="7061:3">if</cpp:directive> <expr pos:start="7061:5" pos:end="7061:32"><call pos:start="7061:5" pos:end="7061:32"><name pos:start="7061:5" pos:end="7061:11">defined</name><argument_list pos:start="7061:12" pos:end="7061:32">(<argument pos:start="7061:13" pos:end="7061:31"><expr pos:start="7061:13" pos:end="7061:31"><name pos:start="7061:13" pos:end="7061:31">TARGET_NR_utimensat</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7063:5" pos:end="7063:29">case <expr pos:start="7063:10" pos:end="7063:28"><name pos:start="7063:10" pos:end="7063:28">TARGET_NR_utimensat</name></expr>:</case>

        <block pos:start="7065:9" pos:end="7103:9">{<block_content pos:start="7067:13" pos:end="7101:13">

            <decl_stmt pos:start="7067:13" pos:end="7067:40"><decl pos:start="7067:13" pos:end="7067:32"><type pos:start="7067:13" pos:end="7067:29"><name pos:start="7067:13" pos:end="7067:27"><name pos:start="7067:13" pos:end="7067:18">struct</name> <name pos:start="7067:20" pos:end="7067:27">timespec</name></name> <modifier pos:start="7067:29" pos:end="7067:29">*</modifier></type><name pos:start="7067:30" pos:end="7067:32">tsp</name></decl>, <decl pos:start="7067:35" pos:end="7067:39"><type ref="prev" pos:start="7067:13" pos:end="7067:29"/><name pos:start="7067:35" pos:end="7067:39"><name pos:start="7067:35" pos:end="7067:36">ts</name><index pos:start="7067:37" pos:end="7067:39">[<expr pos:start="7067:38" pos:end="7067:38"><literal type="number" pos:start="7067:38" pos:end="7067:38">2</literal></expr>]</index></name></decl>;</decl_stmt>

            <if_stmt pos:start="7069:13" pos:end="7081:13"><if pos:start="7069:13" pos:end="7073:13">if <condition pos:start="7069:16" pos:end="7069:22">(<expr pos:start="7069:17" pos:end="7069:21"><operator pos:start="7069:17" pos:end="7069:17">!</operator><name pos:start="7069:18" pos:end="7069:21">arg3</name></expr>)</condition> <block pos:start="7069:24" pos:end="7073:13">{<block_content pos:start="7071:17" pos:end="7071:27">

                <expr_stmt pos:start="7071:17" pos:end="7071:27"><expr pos:start="7071:17" pos:end="7071:26"><name pos:start="7071:17" pos:end="7071:19">tsp</name> <operator pos:start="7071:21" pos:end="7071:21">=</operator> <name pos:start="7071:23" pos:end="7071:26">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="7073:15" pos:end="7081:13">else <block pos:start="7073:20" pos:end="7081:13">{<block_content pos:start="7075:17" pos:end="7079:25">

                <expr_stmt pos:start="7075:17" pos:end="7075:50"><expr pos:start="7075:17" pos:end="7075:49"><call pos:start="7075:17" pos:end="7075:49"><name pos:start="7075:17" pos:end="7075:39">target_to_host_timespec</name><argument_list pos:start="7075:40" pos:end="7075:49">(<argument pos:start="7075:41" pos:end="7075:42"><expr pos:start="7075:41" pos:end="7075:42"><name pos:start="7075:41" pos:end="7075:42">ts</name></expr></argument>, <argument pos:start="7075:45" pos:end="7075:48"><expr pos:start="7075:45" pos:end="7075:48"><name pos:start="7075:45" pos:end="7075:48">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7077:17" pos:end="7077:83"><expr pos:start="7077:17" pos:end="7077:82"><call pos:start="7077:17" pos:end="7077:82"><name pos:start="7077:17" pos:end="7077:39">target_to_host_timespec</name><argument_list pos:start="7077:40" pos:end="7077:82">(<argument pos:start="7077:41" pos:end="7077:44"><expr pos:start="7077:41" pos:end="7077:44"><name pos:start="7077:41" pos:end="7077:42">ts</name><operator pos:start="7077:43" pos:end="7077:43">+</operator><literal type="number" pos:start="7077:44" pos:end="7077:44">1</literal></expr></argument>, <argument pos:start="7077:47" pos:end="7077:81"><expr pos:start="7077:47" pos:end="7077:81"><name pos:start="7077:47" pos:end="7077:50">arg3</name><operator pos:start="7077:51" pos:end="7077:51">+</operator><sizeof pos:start="7077:52" pos:end="7077:81">sizeof<argument_list pos:start="7077:58" pos:end="7077:81">(<argument pos:start="7077:59" pos:end="7077:80"><expr pos:start="7077:59" pos:end="7077:80">struct <name pos:start="7077:66" pos:end="7077:80">target_timespec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7079:17" pos:end="7079:25"><expr pos:start="7079:17" pos:end="7079:24"><name pos:start="7079:17" pos:end="7079:19">tsp</name> <operator pos:start="7079:21" pos:end="7079:21">=</operator> <name pos:start="7079:23" pos:end="7079:24">ts</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="7083:13" pos:end="7101:13"><if pos:start="7083:13" pos:end="7085:70">if <condition pos:start="7083:16" pos:end="7083:22">(<expr pos:start="7083:17" pos:end="7083:21"><operator pos:start="7083:17" pos:end="7083:17">!</operator><name pos:start="7083:18" pos:end="7083:21">arg2</name></expr>)</condition><block type="pseudo" pos:start="7085:17" pos:end="7085:70"><block_content pos:start="7085:17" pos:end="7085:70">

                <expr_stmt pos:start="7085:17" pos:end="7085:70"><expr pos:start="7085:17" pos:end="7085:69"><name pos:start="7085:17" pos:end="7085:19">ret</name> <operator pos:start="7085:21" pos:end="7085:21">=</operator> <call pos:start="7085:23" pos:end="7085:69"><name pos:start="7085:23" pos:end="7085:31">get_errno</name><argument_list pos:start="7085:32" pos:end="7085:69">(<argument pos:start="7085:33" pos:end="7085:68"><expr pos:start="7085:33" pos:end="7085:68"><call pos:start="7085:33" pos:end="7085:68"><name pos:start="7085:33" pos:end="7085:45">sys_utimensat</name><argument_list pos:start="7085:46" pos:end="7085:68">(<argument pos:start="7085:47" pos:end="7085:50"><expr pos:start="7085:47" pos:end="7085:50"><name pos:start="7085:47" pos:end="7085:50">arg1</name></expr></argument>, <argument pos:start="7085:53" pos:end="7085:56"><expr pos:start="7085:53" pos:end="7085:56"><name pos:start="7085:53" pos:end="7085:56">NULL</name></expr></argument>, <argument pos:start="7085:59" pos:end="7085:61"><expr pos:start="7085:59" pos:end="7085:61"><name pos:start="7085:59" pos:end="7085:61">tsp</name></expr></argument>, <argument pos:start="7085:64" pos:end="7085:67"><expr pos:start="7085:64" pos:end="7085:67"><name pos:start="7085:64" pos:end="7085:67">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="7087:13" pos:end="7101:13">else <block pos:start="7087:18" pos:end="7101:13">{<block_content pos:start="7089:17" pos:end="7099:40">

                <if_stmt pos:start="7089:17" pos:end="7095:17"><if pos:start="7089:17" pos:end="7095:17">if <condition pos:start="7089:20" pos:end="7089:50">(<expr pos:start="7089:21" pos:end="7089:49"><operator pos:start="7089:21" pos:end="7089:21">!</operator><operator pos:start="7089:22" pos:end="7089:22">(</operator><name pos:start="7089:23" pos:end="7089:23">p</name> <operator pos:start="7089:25" pos:end="7089:25">=</operator> <call pos:start="7089:27" pos:end="7089:48"><name pos:start="7089:27" pos:end="7089:42">lock_user_string</name><argument_list pos:start="7089:43" pos:end="7089:48">(<argument pos:start="7089:44" pos:end="7089:47"><expr pos:start="7089:44" pos:end="7089:47"><name pos:start="7089:44" pos:end="7089:47">arg2</name></expr></argument>)</argument_list></call><operator pos:start="7089:49" pos:end="7089:49">)</operator></expr>)</condition> <block pos:start="7089:52" pos:end="7095:17">{<block_content pos:start="7091:21" pos:end="7093:30">

                    <expr_stmt pos:start="7091:21" pos:end="7091:41"><expr pos:start="7091:21" pos:end="7091:40"><name pos:start="7091:21" pos:end="7091:23">ret</name> <operator pos:start="7091:25" pos:end="7091:25">=</operator> <operator pos:start="7091:27" pos:end="7091:27">-</operator><name pos:start="7091:28" pos:end="7091:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <goto pos:start="7093:21" pos:end="7093:30">goto <name pos:start="7093:26" pos:end="7093:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="7097:17" pos:end="7097:73"><expr pos:start="7097:17" pos:end="7097:72"><name pos:start="7097:17" pos:end="7097:19">ret</name> <operator pos:start="7097:21" pos:end="7097:21">=</operator> <call pos:start="7097:23" pos:end="7097:72"><name pos:start="7097:23" pos:end="7097:31">get_errno</name><argument_list pos:start="7097:32" pos:end="7097:72">(<argument pos:start="7097:33" pos:end="7097:71"><expr pos:start="7097:33" pos:end="7097:71"><call pos:start="7097:33" pos:end="7097:71"><name pos:start="7097:33" pos:end="7097:45">sys_utimensat</name><argument_list pos:start="7097:46" pos:end="7097:71">(<argument pos:start="7097:47" pos:end="7097:50"><expr pos:start="7097:47" pos:end="7097:50"><name pos:start="7097:47" pos:end="7097:50">arg1</name></expr></argument>, <argument pos:start="7097:53" pos:end="7097:59"><expr pos:start="7097:53" pos:end="7097:59"><call pos:start="7097:53" pos:end="7097:59"><name pos:start="7097:53" pos:end="7097:56">path</name><argument_list pos:start="7097:57" pos:end="7097:59">(<argument pos:start="7097:58" pos:end="7097:58"><expr pos:start="7097:58" pos:end="7097:58"><name pos:start="7097:58" pos:end="7097:58">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="7097:62" pos:end="7097:64"><expr pos:start="7097:62" pos:end="7097:64"><name pos:start="7097:62" pos:end="7097:64">tsp</name></expr></argument>, <argument pos:start="7097:67" pos:end="7097:70"><expr pos:start="7097:67" pos:end="7097:70"><name pos:start="7097:67" pos:end="7097:70">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7099:17" pos:end="7099:40"><expr pos:start="7099:17" pos:end="7099:39"><call pos:start="7099:17" pos:end="7099:39"><name pos:start="7099:17" pos:end="7099:27">unlock_user</name><argument_list pos:start="7099:28" pos:end="7099:39">(<argument pos:start="7099:29" pos:end="7099:29"><expr pos:start="7099:29" pos:end="7099:29"><name pos:start="7099:29" pos:end="7099:29">p</name></expr></argument>, <argument pos:start="7099:32" pos:end="7099:35"><expr pos:start="7099:32" pos:end="7099:35"><name pos:start="7099:32" pos:end="7099:35">arg2</name></expr></argument>, <argument pos:start="7099:38" pos:end="7099:38"><expr pos:start="7099:38" pos:end="7099:38"><literal type="number" pos:start="7099:38" pos:end="7099:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

	<break pos:start="7105:9" pos:end="7108:0">break;</break>

<cpp:endif pos:start="7107:1" pos:end="7107:6">#<cpp:directive pos:start="7107:2" pos:end="7107:6">endif</cpp:directive></cpp:endif>

    <case pos:start="7109:5" pos:end="7109:25">case <expr pos:start="7109:10" pos:end="7109:24"><name pos:start="7109:10" pos:end="7109:24">TARGET_NR_futex</name></expr>:</case>

        <expr_stmt pos:start="7111:9" pos:end="7111:59"><expr pos:start="7111:9" pos:end="7111:58"><name pos:start="7111:9" pos:end="7111:11">ret</name> <operator pos:start="7111:13" pos:end="7111:13">=</operator> <call pos:start="7111:15" pos:end="7111:58"><name pos:start="7111:15" pos:end="7111:22">do_futex</name><argument_list pos:start="7111:23" pos:end="7111:58">(<argument pos:start="7111:24" pos:end="7111:27"><expr pos:start="7111:24" pos:end="7111:27"><name pos:start="7111:24" pos:end="7111:27">arg1</name></expr></argument>, <argument pos:start="7111:30" pos:end="7111:33"><expr pos:start="7111:30" pos:end="7111:33"><name pos:start="7111:30" pos:end="7111:33">arg2</name></expr></argument>, <argument pos:start="7111:36" pos:end="7111:39"><expr pos:start="7111:36" pos:end="7111:39"><name pos:start="7111:36" pos:end="7111:39">arg3</name></expr></argument>, <argument pos:start="7111:42" pos:end="7111:45"><expr pos:start="7111:42" pos:end="7111:45"><name pos:start="7111:42" pos:end="7111:45">arg4</name></expr></argument>, <argument pos:start="7111:48" pos:end="7111:51"><expr pos:start="7111:48" pos:end="7111:51"><name pos:start="7111:48" pos:end="7111:51">arg5</name></expr></argument>, <argument pos:start="7111:54" pos:end="7111:57"><expr pos:start="7111:54" pos:end="7111:57"><name pos:start="7111:54" pos:end="7111:57">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7113:9" pos:end="7116:0">break;</break>

<cpp:if pos:start="7115:1" pos:end="7115:65">#<cpp:directive pos:start="7115:2" pos:end="7115:3">if</cpp:directive> <expr pos:start="7115:5" pos:end="7115:65"><call pos:start="7115:5" pos:end="7115:35"><name pos:start="7115:5" pos:end="7115:11">defined</name><argument_list pos:start="7115:12" pos:end="7115:35">(<argument pos:start="7115:13" pos:end="7115:34"><expr pos:start="7115:13" pos:end="7115:34"><name pos:start="7115:13" pos:end="7115:34">TARGET_NR_inotify_init</name></expr></argument>)</argument_list></call> <operator pos:start="7115:37" pos:end="7115:38">&amp;&amp;</operator> <call pos:start="7115:40" pos:end="7115:65"><name pos:start="7115:40" pos:end="7115:46">defined</name><argument_list pos:start="7115:47" pos:end="7115:65">(<argument pos:start="7115:48" pos:end="7115:64"><expr pos:start="7115:48" pos:end="7115:64"><name pos:start="7115:48" pos:end="7115:64">__NR_inotify_init</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7117:5" pos:end="7117:32">case <expr pos:start="7117:10" pos:end="7117:31"><name pos:start="7117:10" pos:end="7117:31">TARGET_NR_inotify_init</name></expr>:</case>

        <expr_stmt pos:start="7119:9" pos:end="7119:44"><expr pos:start="7119:9" pos:end="7119:43"><name pos:start="7119:9" pos:end="7119:11">ret</name> <operator pos:start="7119:13" pos:end="7119:13">=</operator> <call pos:start="7119:15" pos:end="7119:43"><name pos:start="7119:15" pos:end="7119:23">get_errno</name><argument_list pos:start="7119:24" pos:end="7119:43">(<argument pos:start="7119:25" pos:end="7119:42"><expr pos:start="7119:25" pos:end="7119:42"><call pos:start="7119:25" pos:end="7119:42"><name pos:start="7119:25" pos:end="7119:40">sys_inotify_init</name><argument_list pos:start="7119:41" pos:end="7119:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7121:9" pos:end="7128:0">break;</break>

<cpp:endif pos:start="7123:1" pos:end="7123:6">#<cpp:directive pos:start="7123:2" pos:end="7123:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="7125:1" pos:end="7125:22">#<cpp:directive pos:start="7125:2" pos:end="7125:6">ifdef</cpp:directive> <name pos:start="7125:8" pos:end="7125:22">CONFIG_INOTIFY1</name></cpp:ifdef>

<cpp:if pos:start="7127:1" pos:end="7127:67">#<cpp:directive pos:start="7127:2" pos:end="7127:3">if</cpp:directive> <expr pos:start="7127:5" pos:end="7127:67"><call pos:start="7127:5" pos:end="7127:36"><name pos:start="7127:5" pos:end="7127:11">defined</name><argument_list pos:start="7127:12" pos:end="7127:36">(<argument pos:start="7127:13" pos:end="7127:35"><expr pos:start="7127:13" pos:end="7127:35"><name pos:start="7127:13" pos:end="7127:35">TARGET_NR_inotify_init1</name></expr></argument>)</argument_list></call> <operator pos:start="7127:38" pos:end="7127:39">&amp;&amp;</operator> <call pos:start="7127:41" pos:end="7127:67"><name pos:start="7127:41" pos:end="7127:47">defined</name><argument_list pos:start="7127:48" pos:end="7127:67">(<argument pos:start="7127:49" pos:end="7127:66"><expr pos:start="7127:49" pos:end="7127:66"><name pos:start="7127:49" pos:end="7127:66">__NR_inotify_init1</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7129:5" pos:end="7129:33">case <expr pos:start="7129:10" pos:end="7129:32"><name pos:start="7129:10" pos:end="7129:32">TARGET_NR_inotify_init1</name></expr>:</case>

        <expr_stmt pos:start="7131:9" pos:end="7131:49"><expr pos:start="7131:9" pos:end="7131:48"><name pos:start="7131:9" pos:end="7131:11">ret</name> <operator pos:start="7131:13" pos:end="7131:13">=</operator> <call pos:start="7131:15" pos:end="7131:48"><name pos:start="7131:15" pos:end="7131:23">get_errno</name><argument_list pos:start="7131:24" pos:end="7131:48">(<argument pos:start="7131:25" pos:end="7131:47"><expr pos:start="7131:25" pos:end="7131:47"><call pos:start="7131:25" pos:end="7131:47"><name pos:start="7131:25" pos:end="7131:41">sys_inotify_init1</name><argument_list pos:start="7131:42" pos:end="7131:47">(<argument pos:start="7131:43" pos:end="7131:46"><expr pos:start="7131:43" pos:end="7131:46"><name pos:start="7131:43" pos:end="7131:46">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7133:9" pos:end="7140:0">break;</break>

<cpp:endif pos:start="7135:1" pos:end="7135:6">#<cpp:directive pos:start="7135:2" pos:end="7135:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="7137:1" pos:end="7137:6">#<cpp:directive pos:start="7137:2" pos:end="7137:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7139:1" pos:end="7139:75">#<cpp:directive pos:start="7139:2" pos:end="7139:3">if</cpp:directive> <expr pos:start="7139:5" pos:end="7139:75"><call pos:start="7139:5" pos:end="7139:40"><name pos:start="7139:5" pos:end="7139:11">defined</name><argument_list pos:start="7139:12" pos:end="7139:40">(<argument pos:start="7139:13" pos:end="7139:39"><expr pos:start="7139:13" pos:end="7139:39"><name pos:start="7139:13" pos:end="7139:39">TARGET_NR_inotify_add_watch</name></expr></argument>)</argument_list></call> <operator pos:start="7139:42" pos:end="7139:43">&amp;&amp;</operator> <call pos:start="7139:45" pos:end="7139:75"><name pos:start="7139:45" pos:end="7139:51">defined</name><argument_list pos:start="7139:52" pos:end="7139:75">(<argument pos:start="7139:53" pos:end="7139:74"><expr pos:start="7139:53" pos:end="7139:74"><name pos:start="7139:53" pos:end="7139:74">__NR_inotify_add_watch</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7141:5" pos:end="7141:37">case <expr pos:start="7141:10" pos:end="7141:36"><name pos:start="7141:10" pos:end="7141:36">TARGET_NR_inotify_add_watch</name></expr>:</case>

        <expr_stmt pos:start="7143:9" pos:end="7143:35"><expr pos:start="7143:9" pos:end="7143:34"><name pos:start="7143:9" pos:end="7143:9">p</name> <operator pos:start="7143:11" pos:end="7143:11">=</operator> <call pos:start="7143:13" pos:end="7143:34"><name pos:start="7143:13" pos:end="7143:28">lock_user_string</name><argument_list pos:start="7143:29" pos:end="7143:34">(<argument pos:start="7143:30" pos:end="7143:33"><expr pos:start="7143:30" pos:end="7143:33"><name pos:start="7143:30" pos:end="7143:33">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7145:9" pos:end="7145:68"><expr pos:start="7145:9" pos:end="7145:67"><name pos:start="7145:9" pos:end="7145:11">ret</name> <operator pos:start="7145:13" pos:end="7145:13">=</operator> <call pos:start="7145:15" pos:end="7145:67"><name pos:start="7145:15" pos:end="7145:23">get_errno</name><argument_list pos:start="7145:24" pos:end="7145:67">(<argument pos:start="7145:25" pos:end="7145:66"><expr pos:start="7145:25" pos:end="7145:66"><call pos:start="7145:25" pos:end="7145:66"><name pos:start="7145:25" pos:end="7145:45">sys_inotify_add_watch</name><argument_list pos:start="7145:46" pos:end="7145:66">(<argument pos:start="7145:47" pos:end="7145:50"><expr pos:start="7145:47" pos:end="7145:50"><name pos:start="7145:47" pos:end="7145:50">arg1</name></expr></argument>, <argument pos:start="7145:53" pos:end="7145:59"><expr pos:start="7145:53" pos:end="7145:59"><call pos:start="7145:53" pos:end="7145:59"><name pos:start="7145:53" pos:end="7145:56">path</name><argument_list pos:start="7145:57" pos:end="7145:59">(<argument pos:start="7145:58" pos:end="7145:58"><expr pos:start="7145:58" pos:end="7145:58"><name pos:start="7145:58" pos:end="7145:58">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="7145:62" pos:end="7145:65"><expr pos:start="7145:62" pos:end="7145:65"><name pos:start="7145:62" pos:end="7145:65">arg3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7147:9" pos:end="7147:32"><expr pos:start="7147:9" pos:end="7147:31"><call pos:start="7147:9" pos:end="7147:31"><name pos:start="7147:9" pos:end="7147:19">unlock_user</name><argument_list pos:start="7147:20" pos:end="7147:31">(<argument pos:start="7147:21" pos:end="7147:21"><expr pos:start="7147:21" pos:end="7147:21"><name pos:start="7147:21" pos:end="7147:21">p</name></expr></argument>, <argument pos:start="7147:24" pos:end="7147:27"><expr pos:start="7147:24" pos:end="7147:27"><name pos:start="7147:24" pos:end="7147:27">arg2</name></expr></argument>, <argument pos:start="7147:30" pos:end="7147:30"><expr pos:start="7147:30" pos:end="7147:30"><literal type="number" pos:start="7147:30" pos:end="7147:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7149:9" pos:end="7154:0">break;</break>

<cpp:endif pos:start="7151:1" pos:end="7151:6">#<cpp:directive pos:start="7151:2" pos:end="7151:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7153:1" pos:end="7153:73">#<cpp:directive pos:start="7153:2" pos:end="7153:3">if</cpp:directive> <expr pos:start="7153:5" pos:end="7153:73"><call pos:start="7153:5" pos:end="7153:39"><name pos:start="7153:5" pos:end="7153:11">defined</name><argument_list pos:start="7153:12" pos:end="7153:39">(<argument pos:start="7153:13" pos:end="7153:38"><expr pos:start="7153:13" pos:end="7153:38"><name pos:start="7153:13" pos:end="7153:38">TARGET_NR_inotify_rm_watch</name></expr></argument>)</argument_list></call> <operator pos:start="7153:41" pos:end="7153:42">&amp;&amp;</operator> <call pos:start="7153:44" pos:end="7153:73"><name pos:start="7153:44" pos:end="7153:50">defined</name><argument_list pos:start="7153:51" pos:end="7153:73">(<argument pos:start="7153:52" pos:end="7153:72"><expr pos:start="7153:52" pos:end="7153:72"><name pos:start="7153:52" pos:end="7153:72">__NR_inotify_rm_watch</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7155:5" pos:end="7155:36">case <expr pos:start="7155:10" pos:end="7155:35"><name pos:start="7155:10" pos:end="7155:35">TARGET_NR_inotify_rm_watch</name></expr>:</case>

        <expr_stmt pos:start="7157:9" pos:end="7157:58"><expr pos:start="7157:9" pos:end="7157:57"><name pos:start="7157:9" pos:end="7157:11">ret</name> <operator pos:start="7157:13" pos:end="7157:13">=</operator> <call pos:start="7157:15" pos:end="7157:57"><name pos:start="7157:15" pos:end="7157:23">get_errno</name><argument_list pos:start="7157:24" pos:end="7157:57">(<argument pos:start="7157:25" pos:end="7157:56"><expr pos:start="7157:25" pos:end="7157:56"><call pos:start="7157:25" pos:end="7157:56"><name pos:start="7157:25" pos:end="7157:44">sys_inotify_rm_watch</name><argument_list pos:start="7157:45" pos:end="7157:56">(<argument pos:start="7157:46" pos:end="7157:49"><expr pos:start="7157:46" pos:end="7157:49"><name pos:start="7157:46" pos:end="7157:49">arg1</name></expr></argument>, <argument pos:start="7157:52" pos:end="7157:55"><expr pos:start="7157:52" pos:end="7157:55"><name pos:start="7157:52" pos:end="7157:55">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7159:9" pos:end="7166:0">break;</break>

<cpp:endif pos:start="7161:1" pos:end="7161:6">#<cpp:directive pos:start="7161:2" pos:end="7161:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="7165:1" pos:end="7165:55">#<cpp:directive pos:start="7165:2" pos:end="7165:3">if</cpp:directive> <expr pos:start="7165:5" pos:end="7165:55"><call pos:start="7165:5" pos:end="7165:30"><name pos:start="7165:5" pos:end="7165:11">defined</name><argument_list pos:start="7165:12" pos:end="7165:30">(<argument pos:start="7165:13" pos:end="7165:29"><expr pos:start="7165:13" pos:end="7165:29"><name pos:start="7165:13" pos:end="7165:29">TARGET_NR_mq_open</name></expr></argument>)</argument_list></call> <operator pos:start="7165:32" pos:end="7165:33">&amp;&amp;</operator> <call pos:start="7165:35" pos:end="7165:55"><name pos:start="7165:35" pos:end="7165:41">defined</name><argument_list pos:start="7165:42" pos:end="7165:55">(<argument pos:start="7165:43" pos:end="7165:54"><expr pos:start="7165:43" pos:end="7165:54"><name pos:start="7165:43" pos:end="7165:54">__NR_mq_open</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7167:5" pos:end="7167:27">case <expr pos:start="7167:10" pos:end="7167:26"><name pos:start="7167:10" pos:end="7167:26">TARGET_NR_mq_open</name></expr>:</case>

        <block pos:start="7169:9" pos:end="7185:9">{<block_content pos:start="7171:13" pos:end="7183:37">

            <decl_stmt pos:start="7171:13" pos:end="7171:41"><decl pos:start="7171:13" pos:end="7171:40"><type pos:start="7171:13" pos:end="7171:26"><name pos:start="7171:13" pos:end="7171:26"><name pos:start="7171:13" pos:end="7171:18">struct</name> <name pos:start="7171:20" pos:end="7171:26">mq_attr</name></name></type> <name pos:start="7171:28" pos:end="7171:40">posix_mq_attr</name></decl>;</decl_stmt>



            <expr_stmt pos:start="7175:13" pos:end="7175:43"><expr pos:start="7175:13" pos:end="7175:42"><name pos:start="7175:13" pos:end="7175:13">p</name> <operator pos:start="7175:15" pos:end="7175:15">=</operator> <call pos:start="7175:17" pos:end="7175:42"><name pos:start="7175:17" pos:end="7175:32">lock_user_string</name><argument_list pos:start="7175:33" pos:end="7175:42">(<argument pos:start="7175:34" pos:end="7175:41"><expr pos:start="7175:34" pos:end="7175:41"><name pos:start="7175:34" pos:end="7175:37">arg1</name> <operator pos:start="7175:39" pos:end="7175:39">-</operator> <literal type="number" pos:start="7175:41" pos:end="7175:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="7177:13" pos:end="7179:62"><if pos:start="7177:13" pos:end="7179:62">if <condition pos:start="7177:16" pos:end="7177:26">(<expr pos:start="7177:17" pos:end="7177:25"><name pos:start="7177:17" pos:end="7177:20">arg4</name> <operator pos:start="7177:22" pos:end="7177:23">!=</operator> <literal type="number" pos:start="7177:25" pos:end="7177:25">0</literal></expr>)</condition><block type="pseudo" pos:start="7179:17" pos:end="7179:62"><block_content pos:start="7179:17" pos:end="7179:62">

                <expr_stmt pos:start="7179:17" pos:end="7179:62"><expr pos:start="7179:17" pos:end="7179:61"><call pos:start="7179:17" pos:end="7179:61"><name pos:start="7179:17" pos:end="7179:38">copy_from_user_mq_attr</name> <argument_list pos:start="7179:40" pos:end="7179:61">(<argument pos:start="7179:41" pos:end="7179:54"><expr pos:start="7179:41" pos:end="7179:54"><operator pos:start="7179:41" pos:end="7179:41">&amp;</operator><name pos:start="7179:42" pos:end="7179:54">posix_mq_attr</name></expr></argument>, <argument pos:start="7179:57" pos:end="7179:60"><expr pos:start="7179:57" pos:end="7179:60"><name pos:start="7179:57" pos:end="7179:60">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="7181:13" pos:end="7181:68"><expr pos:start="7181:13" pos:end="7181:67"><name pos:start="7181:13" pos:end="7181:15">ret</name> <operator pos:start="7181:17" pos:end="7181:17">=</operator> <call pos:start="7181:19" pos:end="7181:67"><name pos:start="7181:19" pos:end="7181:27">get_errno</name><argument_list pos:start="7181:28" pos:end="7181:67">(<argument pos:start="7181:29" pos:end="7181:66"><expr pos:start="7181:29" pos:end="7181:66"><call pos:start="7181:29" pos:end="7181:66"><name pos:start="7181:29" pos:end="7181:35">mq_open</name><argument_list pos:start="7181:36" pos:end="7181:66">(<argument pos:start="7181:37" pos:end="7181:37"><expr pos:start="7181:37" pos:end="7181:37"><name pos:start="7181:37" pos:end="7181:37">p</name></expr></argument>, <argument pos:start="7181:40" pos:end="7181:43"><expr pos:start="7181:40" pos:end="7181:43"><name pos:start="7181:40" pos:end="7181:43">arg2</name></expr></argument>, <argument pos:start="7181:46" pos:end="7181:49"><expr pos:start="7181:46" pos:end="7181:49"><name pos:start="7181:46" pos:end="7181:49">arg3</name></expr></argument>, <argument pos:start="7181:52" pos:end="7181:65"><expr pos:start="7181:52" pos:end="7181:65"><operator pos:start="7181:52" pos:end="7181:52">&amp;</operator><name pos:start="7181:53" pos:end="7181:65">posix_mq_attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7183:13" pos:end="7183:37"><expr pos:start="7183:13" pos:end="7183:36"><call pos:start="7183:13" pos:end="7183:36"><name pos:start="7183:13" pos:end="7183:23">unlock_user</name> <argument_list pos:start="7183:25" pos:end="7183:36">(<argument pos:start="7183:26" pos:end="7183:26"><expr pos:start="7183:26" pos:end="7183:26"><name pos:start="7183:26" pos:end="7183:26">p</name></expr></argument>, <argument pos:start="7183:29" pos:end="7183:32"><expr pos:start="7183:29" pos:end="7183:32"><name pos:start="7183:29" pos:end="7183:32">arg1</name></expr></argument>, <argument pos:start="7183:35" pos:end="7183:35"><expr pos:start="7183:35" pos:end="7183:35"><literal type="number" pos:start="7183:35" pos:end="7183:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="7187:9" pos:end="7187:14">break;</break>



    <case pos:start="7191:5" pos:end="7191:29">case <expr pos:start="7191:10" pos:end="7191:28"><name pos:start="7191:10" pos:end="7191:28">TARGET_NR_mq_unlink</name></expr>:</case>

        <expr_stmt pos:start="7193:9" pos:end="7193:39"><expr pos:start="7193:9" pos:end="7193:38"><name pos:start="7193:9" pos:end="7193:9">p</name> <operator pos:start="7193:11" pos:end="7193:11">=</operator> <call pos:start="7193:13" pos:end="7193:38"><name pos:start="7193:13" pos:end="7193:28">lock_user_string</name><argument_list pos:start="7193:29" pos:end="7193:38">(<argument pos:start="7193:30" pos:end="7193:37"><expr pos:start="7193:30" pos:end="7193:37"><name pos:start="7193:30" pos:end="7193:33">arg1</name> <operator pos:start="7193:35" pos:end="7193:35">-</operator> <literal type="number" pos:start="7193:37" pos:end="7193:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7195:9" pos:end="7195:38"><expr pos:start="7195:9" pos:end="7195:37"><name pos:start="7195:9" pos:end="7195:11">ret</name> <operator pos:start="7195:13" pos:end="7195:13">=</operator> <call pos:start="7195:15" pos:end="7195:37"><name pos:start="7195:15" pos:end="7195:23">get_errno</name><argument_list pos:start="7195:24" pos:end="7195:37">(<argument pos:start="7195:25" pos:end="7195:36"><expr pos:start="7195:25" pos:end="7195:36"><call pos:start="7195:25" pos:end="7195:36"><name pos:start="7195:25" pos:end="7195:33">mq_unlink</name><argument_list pos:start="7195:34" pos:end="7195:36">(<argument pos:start="7195:35" pos:end="7195:35"><expr pos:start="7195:35" pos:end="7195:35"><name pos:start="7195:35" pos:end="7195:35">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="7197:9" pos:end="7197:33"><expr pos:start="7197:9" pos:end="7197:32"><call pos:start="7197:9" pos:end="7197:32"><name pos:start="7197:9" pos:end="7197:19">unlock_user</name> <argument_list pos:start="7197:21" pos:end="7197:32">(<argument pos:start="7197:22" pos:end="7197:22"><expr pos:start="7197:22" pos:end="7197:22"><name pos:start="7197:22" pos:end="7197:22">p</name></expr></argument>, <argument pos:start="7197:25" pos:end="7197:28"><expr pos:start="7197:25" pos:end="7197:28"><name pos:start="7197:25" pos:end="7197:28">arg1</name></expr></argument>, <argument pos:start="7197:31" pos:end="7197:31"><expr pos:start="7197:31" pos:end="7197:31"><literal type="number" pos:start="7197:31" pos:end="7197:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7199:9" pos:end="7199:14">break;</break>



    <case pos:start="7203:5" pos:end="7203:32">case <expr pos:start="7203:10" pos:end="7203:31"><name pos:start="7203:10" pos:end="7203:31">TARGET_NR_mq_timedsend</name></expr>:</case>

        <block pos:start="7205:9" pos:end="7229:9">{<block_content pos:start="7207:13" pos:end="7227:40">

            <decl_stmt pos:start="7207:13" pos:end="7207:31"><decl pos:start="7207:13" pos:end="7207:30"><type pos:start="7207:13" pos:end="7207:27"><name pos:start="7207:13" pos:end="7207:27"><name pos:start="7207:13" pos:end="7207:18">struct</name> <name pos:start="7207:20" pos:end="7207:27">timespec</name></name></type> <name pos:start="7207:29" pos:end="7207:30">ts</name></decl>;</decl_stmt>



            <expr_stmt pos:start="7211:13" pos:end="7211:55"><expr pos:start="7211:13" pos:end="7211:54"><name pos:start="7211:13" pos:end="7211:13">p</name> <operator pos:start="7211:15" pos:end="7211:15">=</operator> <call pos:start="7211:17" pos:end="7211:54"><name pos:start="7211:17" pos:end="7211:25">lock_user</name> <argument_list pos:start="7211:27" pos:end="7211:54">(<argument pos:start="7211:28" pos:end="7211:38"><expr pos:start="7211:28" pos:end="7211:38"><name pos:start="7211:28" pos:end="7211:38">VERIFY_READ</name></expr></argument>, <argument pos:start="7211:41" pos:end="7211:44"><expr pos:start="7211:41" pos:end="7211:44"><name pos:start="7211:41" pos:end="7211:44">arg2</name></expr></argument>, <argument pos:start="7211:47" pos:end="7211:50"><expr pos:start="7211:47" pos:end="7211:50"><name pos:start="7211:47" pos:end="7211:50">arg3</name></expr></argument>, <argument pos:start="7211:53" pos:end="7211:53"><expr pos:start="7211:53" pos:end="7211:53"><literal type="number" pos:start="7211:53" pos:end="7211:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="7213:13" pos:end="7225:62"><if pos:start="7213:13" pos:end="7221:13">if <condition pos:start="7213:16" pos:end="7213:26">(<expr pos:start="7213:17" pos:end="7213:25"><name pos:start="7213:17" pos:end="7213:20">arg5</name> <operator pos:start="7213:22" pos:end="7213:23">!=</operator> <literal type="number" pos:start="7213:25" pos:end="7213:25">0</literal></expr>)</condition> <block pos:start="7213:28" pos:end="7221:13">{<block_content pos:start="7215:17" pos:end="7219:51">

                <expr_stmt pos:start="7215:17" pos:end="7215:51"><expr pos:start="7215:17" pos:end="7215:50"><call pos:start="7215:17" pos:end="7215:50"><name pos:start="7215:17" pos:end="7215:39">target_to_host_timespec</name><argument_list pos:start="7215:40" pos:end="7215:50">(<argument pos:start="7215:41" pos:end="7215:43"><expr pos:start="7215:41" pos:end="7215:43"><operator pos:start="7215:41" pos:end="7215:41">&amp;</operator><name pos:start="7215:42" pos:end="7215:43">ts</name></expr></argument>, <argument pos:start="7215:46" pos:end="7215:49"><expr pos:start="7215:46" pos:end="7215:49"><name pos:start="7215:46" pos:end="7215:49">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7217:17" pos:end="7217:72"><expr pos:start="7217:17" pos:end="7217:71"><name pos:start="7217:17" pos:end="7217:19">ret</name> <operator pos:start="7217:21" pos:end="7217:21">=</operator> <call pos:start="7217:23" pos:end="7217:71"><name pos:start="7217:23" pos:end="7217:31">get_errno</name><argument_list pos:start="7217:32" pos:end="7217:71">(<argument pos:start="7217:33" pos:end="7217:70"><expr pos:start="7217:33" pos:end="7217:70"><call pos:start="7217:33" pos:end="7217:70"><name pos:start="7217:33" pos:end="7217:44">mq_timedsend</name><argument_list pos:start="7217:45" pos:end="7217:70">(<argument pos:start="7217:46" pos:end="7217:49"><expr pos:start="7217:46" pos:end="7217:49"><name pos:start="7217:46" pos:end="7217:49">arg1</name></expr></argument>, <argument pos:start="7217:52" pos:end="7217:52"><expr pos:start="7217:52" pos:end="7217:52"><name pos:start="7217:52" pos:end="7217:52">p</name></expr></argument>, <argument pos:start="7217:55" pos:end="7217:58"><expr pos:start="7217:55" pos:end="7217:58"><name pos:start="7217:55" pos:end="7217:58">arg3</name></expr></argument>, <argument pos:start="7217:61" pos:end="7217:64"><expr pos:start="7217:61" pos:end="7217:64"><name pos:start="7217:61" pos:end="7217:64">arg4</name></expr></argument>, <argument pos:start="7217:67" pos:end="7217:69"><expr pos:start="7217:67" pos:end="7217:69"><operator pos:start="7217:67" pos:end="7217:67">&amp;</operator><name pos:start="7217:68" pos:end="7217:69">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7219:17" pos:end="7219:51"><expr pos:start="7219:17" pos:end="7219:50"><call pos:start="7219:17" pos:end="7219:50"><name pos:start="7219:17" pos:end="7219:39">host_to_target_timespec</name><argument_list pos:start="7219:40" pos:end="7219:50">(<argument pos:start="7219:41" pos:end="7219:44"><expr pos:start="7219:41" pos:end="7219:44"><name pos:start="7219:41" pos:end="7219:44">arg5</name></expr></argument>, <argument pos:start="7219:47" pos:end="7219:49"><expr pos:start="7219:47" pos:end="7219:49"><operator pos:start="7219:47" pos:end="7219:47">&amp;</operator><name pos:start="7219:48" pos:end="7219:49">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if>

            <else pos:start="7223:13" pos:end="7225:62">else<block type="pseudo" pos:start="7225:17" pos:end="7225:62"><block_content pos:start="7225:17" pos:end="7225:62">

                <expr_stmt pos:start="7225:17" pos:end="7225:62"><expr pos:start="7225:17" pos:end="7225:61"><name pos:start="7225:17" pos:end="7225:19">ret</name> <operator pos:start="7225:21" pos:end="7225:21">=</operator> <call pos:start="7225:23" pos:end="7225:61"><name pos:start="7225:23" pos:end="7225:31">get_errno</name><argument_list pos:start="7225:32" pos:end="7225:61">(<argument pos:start="7225:33" pos:end="7225:60"><expr pos:start="7225:33" pos:end="7225:60"><call pos:start="7225:33" pos:end="7225:60"><name pos:start="7225:33" pos:end="7225:39">mq_send</name><argument_list pos:start="7225:40" pos:end="7225:60">(<argument pos:start="7225:41" pos:end="7225:44"><expr pos:start="7225:41" pos:end="7225:44"><name pos:start="7225:41" pos:end="7225:44">arg1</name></expr></argument>, <argument pos:start="7225:47" pos:end="7225:47"><expr pos:start="7225:47" pos:end="7225:47"><name pos:start="7225:47" pos:end="7225:47">p</name></expr></argument>, <argument pos:start="7225:50" pos:end="7225:53"><expr pos:start="7225:50" pos:end="7225:53"><name pos:start="7225:50" pos:end="7225:53">arg3</name></expr></argument>, <argument pos:start="7225:56" pos:end="7225:59"><expr pos:start="7225:56" pos:end="7225:59"><name pos:start="7225:56" pos:end="7225:59">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="7227:13" pos:end="7227:40"><expr pos:start="7227:13" pos:end="7227:39"><call pos:start="7227:13" pos:end="7227:39"><name pos:start="7227:13" pos:end="7227:23">unlock_user</name> <argument_list pos:start="7227:25" pos:end="7227:39">(<argument pos:start="7227:26" pos:end="7227:26"><expr pos:start="7227:26" pos:end="7227:26"><name pos:start="7227:26" pos:end="7227:26">p</name></expr></argument>, <argument pos:start="7227:29" pos:end="7227:32"><expr pos:start="7227:29" pos:end="7227:32"><name pos:start="7227:29" pos:end="7227:32">arg2</name></expr></argument>, <argument pos:start="7227:35" pos:end="7227:38"><expr pos:start="7227:35" pos:end="7227:38"><name pos:start="7227:35" pos:end="7227:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="7231:9" pos:end="7231:14">break;</break>



    <case pos:start="7235:5" pos:end="7235:35">case <expr pos:start="7235:10" pos:end="7235:34"><name pos:start="7235:10" pos:end="7235:34">TARGET_NR_mq_timedreceive</name></expr>:</case>

        <block pos:start="7237:9" pos:end="7267:9">{<block_content pos:start="7239:13" pos:end="7265:41">

            <decl_stmt pos:start="7239:13" pos:end="7239:31"><decl pos:start="7239:13" pos:end="7239:30"><type pos:start="7239:13" pos:end="7239:27"><name pos:start="7239:13" pos:end="7239:27"><name pos:start="7239:13" pos:end="7239:18">struct</name> <name pos:start="7239:20" pos:end="7239:27">timespec</name></name></type> <name pos:start="7239:29" pos:end="7239:30">ts</name></decl>;</decl_stmt>

            <decl_stmt pos:start="7241:13" pos:end="7241:30"><decl pos:start="7241:13" pos:end="7241:29"><type pos:start="7241:13" pos:end="7241:24"><name pos:start="7241:13" pos:end="7241:20">unsigned</name> <name pos:start="7241:22" pos:end="7241:24">int</name></type> <name pos:start="7241:26" pos:end="7241:29">prio</name></decl>;</decl_stmt>



            <expr_stmt pos:start="7245:13" pos:end="7245:55"><expr pos:start="7245:13" pos:end="7245:54"><name pos:start="7245:13" pos:end="7245:13">p</name> <operator pos:start="7245:15" pos:end="7245:15">=</operator> <call pos:start="7245:17" pos:end="7245:54"><name pos:start="7245:17" pos:end="7245:25">lock_user</name> <argument_list pos:start="7245:27" pos:end="7245:54">(<argument pos:start="7245:28" pos:end="7245:38"><expr pos:start="7245:28" pos:end="7245:38"><name pos:start="7245:28" pos:end="7245:38">VERIFY_READ</name></expr></argument>, <argument pos:start="7245:41" pos:end="7245:44"><expr pos:start="7245:41" pos:end="7245:44"><name pos:start="7245:41" pos:end="7245:44">arg2</name></expr></argument>, <argument pos:start="7245:47" pos:end="7245:50"><expr pos:start="7245:47" pos:end="7245:50"><name pos:start="7245:47" pos:end="7245:50">arg3</name></expr></argument>, <argument pos:start="7245:53" pos:end="7245:53"><expr pos:start="7245:53" pos:end="7245:53"><literal type="number" pos:start="7245:53" pos:end="7245:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="7247:13" pos:end="7259:66"><if pos:start="7247:13" pos:end="7255:13">if <condition pos:start="7247:16" pos:end="7247:26">(<expr pos:start="7247:17" pos:end="7247:25"><name pos:start="7247:17" pos:end="7247:20">arg5</name> <operator pos:start="7247:22" pos:end="7247:23">!=</operator> <literal type="number" pos:start="7247:25" pos:end="7247:25">0</literal></expr>)</condition> <block pos:start="7247:28" pos:end="7255:13">{<block_content pos:start="7249:17" pos:end="7253:51">

                <expr_stmt pos:start="7249:17" pos:end="7249:51"><expr pos:start="7249:17" pos:end="7249:50"><call pos:start="7249:17" pos:end="7249:50"><name pos:start="7249:17" pos:end="7249:39">target_to_host_timespec</name><argument_list pos:start="7249:40" pos:end="7249:50">(<argument pos:start="7249:41" pos:end="7249:43"><expr pos:start="7249:41" pos:end="7249:43"><operator pos:start="7249:41" pos:end="7249:41">&amp;</operator><name pos:start="7249:42" pos:end="7249:43">ts</name></expr></argument>, <argument pos:start="7249:46" pos:end="7249:49"><expr pos:start="7249:46" pos:end="7249:49"><name pos:start="7249:46" pos:end="7249:49">arg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7251:17" pos:end="7251:76"><expr pos:start="7251:17" pos:end="7251:75"><name pos:start="7251:17" pos:end="7251:19">ret</name> <operator pos:start="7251:21" pos:end="7251:21">=</operator> <call pos:start="7251:23" pos:end="7251:75"><name pos:start="7251:23" pos:end="7251:31">get_errno</name><argument_list pos:start="7251:32" pos:end="7251:75">(<argument pos:start="7251:33" pos:end="7251:74"><expr pos:start="7251:33" pos:end="7251:74"><call pos:start="7251:33" pos:end="7251:74"><name pos:start="7251:33" pos:end="7251:47">mq_timedreceive</name><argument_list pos:start="7251:48" pos:end="7251:74">(<argument pos:start="7251:49" pos:end="7251:52"><expr pos:start="7251:49" pos:end="7251:52"><name pos:start="7251:49" pos:end="7251:52">arg1</name></expr></argument>, <argument pos:start="7251:55" pos:end="7251:55"><expr pos:start="7251:55" pos:end="7251:55"><name pos:start="7251:55" pos:end="7251:55">p</name></expr></argument>, <argument pos:start="7251:58" pos:end="7251:61"><expr pos:start="7251:58" pos:end="7251:61"><name pos:start="7251:58" pos:end="7251:61">arg3</name></expr></argument>, <argument pos:start="7251:64" pos:end="7251:68"><expr pos:start="7251:64" pos:end="7251:68"><operator pos:start="7251:64" pos:end="7251:64">&amp;</operator><name pos:start="7251:65" pos:end="7251:68">prio</name></expr></argument>, <argument pos:start="7251:71" pos:end="7251:73"><expr pos:start="7251:71" pos:end="7251:73"><operator pos:start="7251:71" pos:end="7251:71">&amp;</operator><name pos:start="7251:72" pos:end="7251:73">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7253:17" pos:end="7253:51"><expr pos:start="7253:17" pos:end="7253:50"><call pos:start="7253:17" pos:end="7253:50"><name pos:start="7253:17" pos:end="7253:39">host_to_target_timespec</name><argument_list pos:start="7253:40" pos:end="7253:50">(<argument pos:start="7253:41" pos:end="7253:44"><expr pos:start="7253:41" pos:end="7253:44"><name pos:start="7253:41" pos:end="7253:44">arg5</name></expr></argument>, <argument pos:start="7253:47" pos:end="7253:49"><expr pos:start="7253:47" pos:end="7253:49"><operator pos:start="7253:47" pos:end="7253:47">&amp;</operator><name pos:start="7253:48" pos:end="7253:49">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if>

            <else pos:start="7257:13" pos:end="7259:66">else<block type="pseudo" pos:start="7259:17" pos:end="7259:66"><block_content pos:start="7259:17" pos:end="7259:66">

                <expr_stmt pos:start="7259:17" pos:end="7259:66"><expr pos:start="7259:17" pos:end="7259:65"><name pos:start="7259:17" pos:end="7259:19">ret</name> <operator pos:start="7259:21" pos:end="7259:21">=</operator> <call pos:start="7259:23" pos:end="7259:65"><name pos:start="7259:23" pos:end="7259:31">get_errno</name><argument_list pos:start="7259:32" pos:end="7259:65">(<argument pos:start="7259:33" pos:end="7259:64"><expr pos:start="7259:33" pos:end="7259:64"><call pos:start="7259:33" pos:end="7259:64"><name pos:start="7259:33" pos:end="7259:42">mq_receive</name><argument_list pos:start="7259:43" pos:end="7259:64">(<argument pos:start="7259:44" pos:end="7259:47"><expr pos:start="7259:44" pos:end="7259:47"><name pos:start="7259:44" pos:end="7259:47">arg1</name></expr></argument>, <argument pos:start="7259:50" pos:end="7259:50"><expr pos:start="7259:50" pos:end="7259:50"><name pos:start="7259:50" pos:end="7259:50">p</name></expr></argument>, <argument pos:start="7259:53" pos:end="7259:56"><expr pos:start="7259:53" pos:end="7259:56"><name pos:start="7259:53" pos:end="7259:56">arg3</name></expr></argument>, <argument pos:start="7259:59" pos:end="7259:63"><expr pos:start="7259:59" pos:end="7259:63"><operator pos:start="7259:59" pos:end="7259:59">&amp;</operator><name pos:start="7259:60" pos:end="7259:63">prio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="7261:13" pos:end="7261:40"><expr pos:start="7261:13" pos:end="7261:39"><call pos:start="7261:13" pos:end="7261:39"><name pos:start="7261:13" pos:end="7261:23">unlock_user</name> <argument_list pos:start="7261:25" pos:end="7261:39">(<argument pos:start="7261:26" pos:end="7261:26"><expr pos:start="7261:26" pos:end="7261:26"><name pos:start="7261:26" pos:end="7261:26">p</name></expr></argument>, <argument pos:start="7261:29" pos:end="7261:32"><expr pos:start="7261:29" pos:end="7261:32"><name pos:start="7261:29" pos:end="7261:32">arg2</name></expr></argument>, <argument pos:start="7261:35" pos:end="7261:38"><expr pos:start="7261:35" pos:end="7261:38"><name pos:start="7261:35" pos:end="7261:38">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="7263:13" pos:end="7265:41"><if pos:start="7263:13" pos:end="7265:41">if <condition pos:start="7263:16" pos:end="7263:26">(<expr pos:start="7263:17" pos:end="7263:25"><name pos:start="7263:17" pos:end="7263:20">arg4</name> <operator pos:start="7263:22" pos:end="7263:23">!=</operator> <literal type="number" pos:start="7263:25" pos:end="7263:25">0</literal></expr>)</condition><block type="pseudo" pos:start="7265:17" pos:end="7265:41"><block_content pos:start="7265:17" pos:end="7265:41">

                <expr_stmt pos:start="7265:17" pos:end="7265:41"><expr pos:start="7265:17" pos:end="7265:40"><call pos:start="7265:17" pos:end="7265:40"><name pos:start="7265:17" pos:end="7265:28">put_user_u32</name><argument_list pos:start="7265:29" pos:end="7265:40">(<argument pos:start="7265:30" pos:end="7265:33"><expr pos:start="7265:30" pos:end="7265:33"><name pos:start="7265:30" pos:end="7265:33">prio</name></expr></argument>, <argument pos:start="7265:36" pos:end="7265:39"><expr pos:start="7265:36" pos:end="7265:39"><name pos:start="7265:36" pos:end="7265:39">arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="7269:9" pos:end="7269:14">break;</break>



    <comment type="block" pos:start="7273:5" pos:end="7273:36">/* Not implemented for now... */</comment>

<comment type="block" pos:start="7275:1" pos:end="7275:35">/*     case TARGET_NR_mq_notify: */</comment>

<comment type="block" pos:start="7277:1" pos:end="7277:20">/*         break; */</comment>



    <case pos:start="7281:5" pos:end="7281:33">case <expr pos:start="7281:10" pos:end="7281:32"><name pos:start="7281:10" pos:end="7281:32">TARGET_NR_mq_getsetattr</name></expr>:</case>

        <block pos:start="7283:9" pos:end="7306:9">{<block_content pos:start="7285:13" pos:end="7302:13">

            <decl_stmt pos:start="7285:13" pos:end="7285:63"><decl pos:start="7285:13" pos:end="7285:43"><type pos:start="7285:13" pos:end="7285:26"><name pos:start="7285:13" pos:end="7285:26"><name pos:start="7285:13" pos:end="7285:18">struct</name> <name pos:start="7285:20" pos:end="7285:26">mq_attr</name></name></type> <name pos:start="7285:28" pos:end="7285:43">posix_mq_attr_in</name></decl>, <decl pos:start="7285:46" pos:end="7285:62"><type ref="prev" pos:start="7285:13" pos:end="7285:26"/><name pos:start="7285:46" pos:end="7285:62">posix_mq_attr_out</name></decl>;</decl_stmt>


            <if_stmt pos:start="7288:13" pos:end="7294:13"><if pos:start="7288:13" pos:end="7294:13">if <condition pos:start="7288:16" pos:end="7288:26">(<expr pos:start="7288:17" pos:end="7288:25"><name pos:start="7288:17" pos:end="7288:20">arg3</name> <operator pos:start="7288:22" pos:end="7288:23">!=</operator> <literal type="number" pos:start="7288:25" pos:end="7288:25">0</literal></expr>)</condition> <block pos:start="7288:28" pos:end="7294:13">{<block_content pos:start="7290:17" pos:end="7292:63">

                <expr_stmt pos:start="7290:17" pos:end="7290:59"><expr pos:start="7290:17" pos:end="7290:58"><name pos:start="7290:17" pos:end="7290:19">ret</name> <operator pos:start="7290:21" pos:end="7290:21">=</operator> <call pos:start="7290:23" pos:end="7290:58"><name pos:start="7290:23" pos:end="7290:32">mq_getattr</name><argument_list pos:start="7290:33" pos:end="7290:58">(<argument pos:start="7290:34" pos:end="7290:37"><expr pos:start="7290:34" pos:end="7290:37"><name pos:start="7290:34" pos:end="7290:37">arg1</name></expr></argument>, <argument pos:start="7290:40" pos:end="7290:57"><expr pos:start="7290:40" pos:end="7290:57"><operator pos:start="7290:40" pos:end="7290:40">&amp;</operator><name pos:start="7290:41" pos:end="7290:57">posix_mq_attr_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7292:17" pos:end="7292:63"><expr pos:start="7292:17" pos:end="7292:62"><call pos:start="7292:17" pos:end="7292:62"><name pos:start="7292:17" pos:end="7292:36">copy_to_user_mq_attr</name><argument_list pos:start="7292:37" pos:end="7292:62">(<argument pos:start="7292:38" pos:end="7292:41"><expr pos:start="7292:38" pos:end="7292:41"><name pos:start="7292:38" pos:end="7292:41">arg3</name></expr></argument>, <argument pos:start="7292:44" pos:end="7292:61"><expr pos:start="7292:44" pos:end="7292:61"><operator pos:start="7292:44" pos:end="7292:44">&amp;</operator><name pos:start="7292:45" pos:end="7292:61">posix_mq_attr_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7296:13" pos:end="7302:13"><if pos:start="7296:13" pos:end="7302:13">if <condition pos:start="7296:16" pos:end="7296:26">(<expr pos:start="7296:17" pos:end="7296:25"><name pos:start="7296:17" pos:end="7296:20">arg2</name> <operator pos:start="7296:22" pos:end="7296:23">!=</operator> <literal type="number" pos:start="7296:25" pos:end="7296:25">0</literal></expr>)</condition> <block pos:start="7296:28" pos:end="7302:13">{<block_content pos:start="7298:17" pos:end="7300:79">

                <expr_stmt pos:start="7298:17" pos:end="7298:64"><expr pos:start="7298:17" pos:end="7298:63"><call pos:start="7298:17" pos:end="7298:63"><name pos:start="7298:17" pos:end="7298:38">copy_from_user_mq_attr</name><argument_list pos:start="7298:39" pos:end="7298:63">(<argument pos:start="7298:40" pos:end="7298:56"><expr pos:start="7298:40" pos:end="7298:56"><operator pos:start="7298:40" pos:end="7298:40">&amp;</operator><name pos:start="7298:41" pos:end="7298:56">posix_mq_attr_in</name></expr></argument>, <argument pos:start="7298:59" pos:end="7298:62"><expr pos:start="7298:59" pos:end="7298:62"><name pos:start="7298:59" pos:end="7298:62">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7300:17" pos:end="7300:79"><expr pos:start="7300:17" pos:end="7300:78"><name pos:start="7300:17" pos:end="7300:19">ret</name> <operator pos:start="7300:21" pos:end="7300:22">|=</operator> <call pos:start="7300:24" pos:end="7300:78"><name pos:start="7300:24" pos:end="7300:33">mq_setattr</name><argument_list pos:start="7300:34" pos:end="7300:78">(<argument pos:start="7300:35" pos:end="7300:38"><expr pos:start="7300:35" pos:end="7300:38"><name pos:start="7300:35" pos:end="7300:38">arg1</name></expr></argument>, <argument pos:start="7300:41" pos:end="7300:57"><expr pos:start="7300:41" pos:end="7300:57"><operator pos:start="7300:41" pos:end="7300:41">&amp;</operator><name pos:start="7300:42" pos:end="7300:57">posix_mq_attr_in</name></expr></argument>, <argument pos:start="7300:60" pos:end="7300:77"><expr pos:start="7300:60" pos:end="7300:77"><operator pos:start="7300:60" pos:end="7300:60">&amp;</operator><name pos:start="7300:61" pos:end="7300:77">posix_mq_attr_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



        </block_content>}</block>

        <break pos:start="7308:9" pos:end="7317:0">break;</break>

<cpp:endif pos:start="7310:1" pos:end="7310:6">#<cpp:directive pos:start="7310:2" pos:end="7310:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="7314:1" pos:end="7314:20">#<cpp:directive pos:start="7314:2" pos:end="7314:6">ifdef</cpp:directive> <name pos:start="7314:8" pos:end="7314:20">CONFIG_SPLICE</name></cpp:ifdef>

<cpp:ifdef pos:start="7316:1" pos:end="7316:20">#<cpp:directive pos:start="7316:2" pos:end="7316:6">ifdef</cpp:directive> <name pos:start="7316:8" pos:end="7316:20">TARGET_NR_tee</name></cpp:ifdef>

    <case pos:start="7318:5" pos:end="7318:23">case <expr pos:start="7318:10" pos:end="7318:22"><name pos:start="7318:10" pos:end="7318:22">TARGET_NR_tee</name></expr>:</case>

        <block pos:start="7320:9" pos:end="7324:9">{<block_content pos:start="7322:13" pos:end="7322:54">

            <expr_stmt pos:start="7322:13" pos:end="7322:54"><expr pos:start="7322:13" pos:end="7322:53"><name pos:start="7322:13" pos:end="7322:15">ret</name> <operator pos:start="7322:17" pos:end="7322:17">=</operator> <call pos:start="7322:19" pos:end="7322:53"><name pos:start="7322:19" pos:end="7322:27">get_errno</name><argument_list pos:start="7322:28" pos:end="7322:53">(<argument pos:start="7322:29" pos:end="7322:52"><expr pos:start="7322:29" pos:end="7322:52"><call pos:start="7322:29" pos:end="7322:52"><name pos:start="7322:29" pos:end="7322:31">tee</name><argument_list pos:start="7322:32" pos:end="7322:52">(<argument pos:start="7322:33" pos:end="7322:36"><expr pos:start="7322:33" pos:end="7322:36"><name pos:start="7322:33" pos:end="7322:36">arg1</name></expr></argument>,<argument pos:start="7322:38" pos:end="7322:41"><expr pos:start="7322:38" pos:end="7322:41"><name pos:start="7322:38" pos:end="7322:41">arg2</name></expr></argument>,<argument pos:start="7322:43" pos:end="7322:46"><expr pos:start="7322:43" pos:end="7322:46"><name pos:start="7322:43" pos:end="7322:46">arg3</name></expr></argument>,<argument pos:start="7322:48" pos:end="7322:51"><expr pos:start="7322:48" pos:end="7322:51"><name pos:start="7322:48" pos:end="7322:51">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="7326:9" pos:end="7331:0">break;</break>

<cpp:endif pos:start="7328:1" pos:end="7328:6">#<cpp:directive pos:start="7328:2" pos:end="7328:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="7330:1" pos:end="7330:23">#<cpp:directive pos:start="7330:2" pos:end="7330:6">ifdef</cpp:directive> <name pos:start="7330:8" pos:end="7330:23">TARGET_NR_splice</name></cpp:ifdef>

    <case pos:start="7332:5" pos:end="7332:26">case <expr pos:start="7332:10" pos:end="7332:25"><name pos:start="7332:10" pos:end="7332:25">TARGET_NR_splice</name></expr>:</case>

        <block pos:start="7334:9" pos:end="7358:9">{<block_content pos:start="7336:13" pos:end="7356:81">

            <decl_stmt pos:start="7336:13" pos:end="7336:37"><decl pos:start="7336:13" pos:end="7336:26"><type pos:start="7336:13" pos:end="7336:18"><name pos:start="7336:13" pos:end="7336:18">loff_t</name></type> <name pos:start="7336:20" pos:end="7336:26">loff_in</name></decl>, <decl pos:start="7336:29" pos:end="7336:36"><type ref="prev" pos:start="7336:13" pos:end="7336:18"/><name pos:start="7336:29" pos:end="7336:36">loff_out</name></decl>;</decl_stmt>

            <decl_stmt pos:start="7338:13" pos:end="7338:55"><decl pos:start="7338:13" pos:end="7338:35"><type pos:start="7338:13" pos:end="7338:20"><name pos:start="7338:13" pos:end="7338:18">loff_t</name> <modifier pos:start="7338:20" pos:end="7338:20">*</modifier></type><name pos:start="7338:21" pos:end="7338:28">ploff_in</name> <init pos:start="7338:30" pos:end="7338:35">= <expr pos:start="7338:32" pos:end="7338:35"><name pos:start="7338:32" pos:end="7338:35">NULL</name></expr></init></decl>, <decl pos:start="7338:38" pos:end="7338:54"><type ref="prev" pos:start="7338:13" pos:end="7338:20"><modifier pos:start="7338:38" pos:end="7338:38">*</modifier></type><name pos:start="7338:39" pos:end="7338:47">ploff_out</name> <init pos:start="7338:49" pos:end="7338:54">= <expr pos:start="7338:51" pos:end="7338:54"><name pos:start="7338:51" pos:end="7338:54">NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="7340:13" pos:end="7346:13"><if pos:start="7340:13" pos:end="7346:13">if<condition pos:start="7340:15" pos:end="7340:20">(<expr pos:start="7340:16" pos:end="7340:19"><name pos:start="7340:16" pos:end="7340:19">arg2</name></expr>)</condition> <block pos:start="7340:22" pos:end="7346:13">{<block_content pos:start="7342:17" pos:end="7344:36">

                <expr_stmt pos:start="7342:17" pos:end="7342:44"><expr pos:start="7342:17" pos:end="7342:43"><call pos:start="7342:17" pos:end="7342:43"><name pos:start="7342:17" pos:end="7342:28">get_user_u64</name><argument_list pos:start="7342:29" pos:end="7342:43">(<argument pos:start="7342:30" pos:end="7342:36"><expr pos:start="7342:30" pos:end="7342:36"><name pos:start="7342:30" pos:end="7342:36">loff_in</name></expr></argument>, <argument pos:start="7342:39" pos:end="7342:42"><expr pos:start="7342:39" pos:end="7342:42"><name pos:start="7342:39" pos:end="7342:42">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7344:17" pos:end="7344:36"><expr pos:start="7344:17" pos:end="7344:35"><name pos:start="7344:17" pos:end="7344:24">ploff_in</name> <operator pos:start="7344:26" pos:end="7344:26">=</operator> <operator pos:start="7344:28" pos:end="7344:28">&amp;</operator><name pos:start="7344:29" pos:end="7344:35">loff_in</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="7348:13" pos:end="7354:13"><if pos:start="7348:13" pos:end="7354:13">if<condition pos:start="7348:15" pos:end="7348:20">(<expr pos:start="7348:16" pos:end="7348:19"><name pos:start="7348:16" pos:end="7348:19">arg4</name></expr>)</condition> <block pos:start="7348:22" pos:end="7354:13">{<block_content pos:start="7350:17" pos:end="7352:38">

                <expr_stmt pos:start="7350:17" pos:end="7350:45"><expr pos:start="7350:17" pos:end="7350:44"><call pos:start="7350:17" pos:end="7350:44"><name pos:start="7350:17" pos:end="7350:28">get_user_u64</name><argument_list pos:start="7350:29" pos:end="7350:44">(<argument pos:start="7350:30" pos:end="7350:37"><expr pos:start="7350:30" pos:end="7350:37"><name pos:start="7350:30" pos:end="7350:37">loff_out</name></expr></argument>, <argument pos:start="7350:40" pos:end="7350:43"><expr pos:start="7350:40" pos:end="7350:43"><name pos:start="7350:40" pos:end="7350:43">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7352:17" pos:end="7352:38"><expr pos:start="7352:17" pos:end="7352:37"><name pos:start="7352:17" pos:end="7352:25">ploff_out</name> <operator pos:start="7352:27" pos:end="7352:27">=</operator> <operator pos:start="7352:29" pos:end="7352:29">&amp;</operator><name pos:start="7352:30" pos:end="7352:37">loff_out</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7356:13" pos:end="7356:81"><expr pos:start="7356:13" pos:end="7356:80"><name pos:start="7356:13" pos:end="7356:15">ret</name> <operator pos:start="7356:17" pos:end="7356:17">=</operator> <call pos:start="7356:19" pos:end="7356:80"><name pos:start="7356:19" pos:end="7356:27">get_errno</name><argument_list pos:start="7356:28" pos:end="7356:80">(<argument pos:start="7356:29" pos:end="7356:79"><expr pos:start="7356:29" pos:end="7356:79"><call pos:start="7356:29" pos:end="7356:79"><name pos:start="7356:29" pos:end="7356:34">splice</name><argument_list pos:start="7356:35" pos:end="7356:79">(<argument pos:start="7356:36" pos:end="7356:39"><expr pos:start="7356:36" pos:end="7356:39"><name pos:start="7356:36" pos:end="7356:39">arg1</name></expr></argument>, <argument pos:start="7356:42" pos:end="7356:49"><expr pos:start="7356:42" pos:end="7356:49"><name pos:start="7356:42" pos:end="7356:49">ploff_in</name></expr></argument>, <argument pos:start="7356:52" pos:end="7356:55"><expr pos:start="7356:52" pos:end="7356:55"><name pos:start="7356:52" pos:end="7356:55">arg3</name></expr></argument>, <argument pos:start="7356:58" pos:end="7356:66"><expr pos:start="7356:58" pos:end="7356:66"><name pos:start="7356:58" pos:end="7356:66">ploff_out</name></expr></argument>, <argument pos:start="7356:69" pos:end="7356:72"><expr pos:start="7356:69" pos:end="7356:72"><name pos:start="7356:69" pos:end="7356:72">arg5</name></expr></argument>, <argument pos:start="7356:75" pos:end="7356:78"><expr pos:start="7356:75" pos:end="7356:78"><name pos:start="7356:75" pos:end="7356:78">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="7360:9" pos:end="7365:0">break;</break>

<cpp:endif pos:start="7362:1" pos:end="7362:6">#<cpp:directive pos:start="7362:2" pos:end="7362:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="7364:1" pos:end="7364:25">#<cpp:directive pos:start="7364:2" pos:end="7364:6">ifdef</cpp:directive> <name pos:start="7364:8" pos:end="7364:25">TARGET_NR_vmsplice</name></cpp:ifdef>

	<case pos:start="7366:9" pos:end="7366:32">case <expr pos:start="7366:14" pos:end="7366:31"><name pos:start="7366:14" pos:end="7366:31">TARGET_NR_vmsplice</name></expr>:</case>

        <block pos:start="7368:9" pos:end="7384:9">{<block_content pos:start="7370:13" pos:end="7382:13">

            <decl_stmt pos:start="7370:13" pos:end="7370:71"><decl pos:start="7370:13" pos:end="7370:70"><type pos:start="7370:13" pos:end="7370:26"><name pos:start="7370:13" pos:end="7370:24"><name pos:start="7370:13" pos:end="7370:18">struct</name> <name pos:start="7370:20" pos:end="7370:24">iovec</name></name> <modifier pos:start="7370:26" pos:end="7370:26">*</modifier></type><name pos:start="7370:27" pos:end="7370:29">vec</name> <init pos:start="7370:31" pos:end="7370:70">= <expr pos:start="7370:33" pos:end="7370:70"><call pos:start="7370:33" pos:end="7370:70"><name pos:start="7370:33" pos:end="7370:42">lock_iovec</name><argument_list pos:start="7370:43" pos:end="7370:70">(<argument pos:start="7370:44" pos:end="7370:54"><expr pos:start="7370:44" pos:end="7370:54"><name pos:start="7370:44" pos:end="7370:54">VERIFY_READ</name></expr></argument>, <argument pos:start="7370:57" pos:end="7370:60"><expr pos:start="7370:57" pos:end="7370:60"><name pos:start="7370:57" pos:end="7370:60">arg2</name></expr></argument>, <argument pos:start="7370:63" pos:end="7370:66"><expr pos:start="7370:63" pos:end="7370:66"><name pos:start="7370:63" pos:end="7370:66">arg3</name></expr></argument>, <argument pos:start="7370:69" pos:end="7370:69"><expr pos:start="7370:69" pos:end="7370:69"><literal type="number" pos:start="7370:69" pos:end="7370:69">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="7372:13" pos:end="7382:13"><if pos:start="7372:13" pos:end="7378:13">if <condition pos:start="7372:16" pos:end="7372:28">(<expr pos:start="7372:17" pos:end="7372:27"><name pos:start="7372:17" pos:end="7372:19">vec</name> <operator pos:start="7372:21" pos:end="7372:22">!=</operator> <name pos:start="7372:24" pos:end="7372:27">NULL</name></expr>)</condition> <block pos:start="7372:30" pos:end="7378:13">{<block_content pos:start="7374:17" pos:end="7376:49">

                <expr_stmt pos:start="7374:17" pos:end="7374:65"><expr pos:start="7374:17" pos:end="7374:64"><name pos:start="7374:17" pos:end="7374:19">ret</name> <operator pos:start="7374:21" pos:end="7374:21">=</operator> <call pos:start="7374:23" pos:end="7374:64"><name pos:start="7374:23" pos:end="7374:31">get_errno</name><argument_list pos:start="7374:32" pos:end="7374:64">(<argument pos:start="7374:33" pos:end="7374:63"><expr pos:start="7374:33" pos:end="7374:63"><call pos:start="7374:33" pos:end="7374:63"><name pos:start="7374:33" pos:end="7374:40">vmsplice</name><argument_list pos:start="7374:41" pos:end="7374:63">(<argument pos:start="7374:42" pos:end="7374:45"><expr pos:start="7374:42" pos:end="7374:45"><name pos:start="7374:42" pos:end="7374:45">arg1</name></expr></argument>, <argument pos:start="7374:48" pos:end="7374:50"><expr pos:start="7374:48" pos:end="7374:50"><name pos:start="7374:48" pos:end="7374:50">vec</name></expr></argument>, <argument pos:start="7374:53" pos:end="7374:56"><expr pos:start="7374:53" pos:end="7374:56"><name pos:start="7374:53" pos:end="7374:56">arg3</name></expr></argument>, <argument pos:start="7374:59" pos:end="7374:62"><expr pos:start="7374:59" pos:end="7374:62"><name pos:start="7374:59" pos:end="7374:62">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7376:17" pos:end="7376:49"><expr pos:start="7376:17" pos:end="7376:48"><call pos:start="7376:17" pos:end="7376:48"><name pos:start="7376:17" pos:end="7376:28">unlock_iovec</name><argument_list pos:start="7376:29" pos:end="7376:48">(<argument pos:start="7376:30" pos:end="7376:32"><expr pos:start="7376:30" pos:end="7376:32"><name pos:start="7376:30" pos:end="7376:32">vec</name></expr></argument>, <argument pos:start="7376:35" pos:end="7376:38"><expr pos:start="7376:35" pos:end="7376:38"><name pos:start="7376:35" pos:end="7376:38">arg2</name></expr></argument>, <argument pos:start="7376:41" pos:end="7376:44"><expr pos:start="7376:41" pos:end="7376:44"><name pos:start="7376:41" pos:end="7376:44">arg3</name></expr></argument>, <argument pos:start="7376:47" pos:end="7376:47"><expr pos:start="7376:47" pos:end="7376:47"><literal type="number" pos:start="7376:47" pos:end="7376:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="7378:15" pos:end="7382:13">else <block pos:start="7378:20" pos:end="7382:13">{<block_content pos:start="7380:17" pos:end="7380:51">

                <expr_stmt pos:start="7380:17" pos:end="7380:51"><expr pos:start="7380:17" pos:end="7380:50"><name pos:start="7380:17" pos:end="7380:19">ret</name> <operator pos:start="7380:21" pos:end="7380:21">=</operator> <operator pos:start="7380:23" pos:end="7380:23">-</operator><call pos:start="7380:24" pos:end="7380:50"><name pos:start="7380:24" pos:end="7380:43">host_to_target_errno</name><argument_list pos:start="7380:44" pos:end="7380:50">(<argument pos:start="7380:45" pos:end="7380:49"><expr pos:start="7380:45" pos:end="7380:49"><name pos:start="7380:45" pos:end="7380:49">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="7386:9" pos:end="7395:0">break;</break>

<cpp:endif pos:start="7388:1" pos:end="7388:6">#<cpp:directive pos:start="7388:2" pos:end="7388:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="7390:1" pos:end="7390:6">#<cpp:directive pos:start="7390:2" pos:end="7390:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="7390:8" pos:end="7390:26">/* CONFIG_SPLICE */</comment>

<cpp:ifdef pos:start="7392:1" pos:end="7392:21">#<cpp:directive pos:start="7392:2" pos:end="7392:6">ifdef</cpp:directive> <name pos:start="7392:8" pos:end="7392:21">CONFIG_EVENTFD</name></cpp:ifdef>

<cpp:if pos:start="7394:1" pos:end="7394:30">#<cpp:directive pos:start="7394:2" pos:end="7394:3">if</cpp:directive> <expr pos:start="7394:5" pos:end="7394:30"><call pos:start="7394:5" pos:end="7394:30"><name pos:start="7394:5" pos:end="7394:11">defined</name><argument_list pos:start="7394:12" pos:end="7394:30">(<argument pos:start="7394:13" pos:end="7394:29"><expr pos:start="7394:13" pos:end="7394:29"><name pos:start="7394:13" pos:end="7394:29">TARGET_NR_eventfd</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7396:5" pos:end="7396:27">case <expr pos:start="7396:10" pos:end="7396:26"><name pos:start="7396:10" pos:end="7396:26">TARGET_NR_eventfd</name></expr>:</case>

        <expr_stmt pos:start="7398:9" pos:end="7398:42"><expr pos:start="7398:9" pos:end="7398:41"><name pos:start="7398:9" pos:end="7398:11">ret</name> <operator pos:start="7398:13" pos:end="7398:13">=</operator> <call pos:start="7398:15" pos:end="7398:41"><name pos:start="7398:15" pos:end="7398:23">get_errno</name><argument_list pos:start="7398:24" pos:end="7398:41">(<argument pos:start="7398:25" pos:end="7398:40"><expr pos:start="7398:25" pos:end="7398:40"><call pos:start="7398:25" pos:end="7398:40"><name pos:start="7398:25" pos:end="7398:31">eventfd</name><argument_list pos:start="7398:32" pos:end="7398:40">(<argument pos:start="7398:33" pos:end="7398:36"><expr pos:start="7398:33" pos:end="7398:36"><name pos:start="7398:33" pos:end="7398:36">arg1</name></expr></argument>, <argument pos:start="7398:39" pos:end="7398:39"><expr pos:start="7398:39" pos:end="7398:39"><literal type="number" pos:start="7398:39" pos:end="7398:39">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7400:9" pos:end="7405:0">break;</break>

<cpp:endif pos:start="7402:1" pos:end="7402:6">#<cpp:directive pos:start="7402:2" pos:end="7402:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7404:1" pos:end="7404:31">#<cpp:directive pos:start="7404:2" pos:end="7404:3">if</cpp:directive> <expr pos:start="7404:5" pos:end="7404:31"><call pos:start="7404:5" pos:end="7404:31"><name pos:start="7404:5" pos:end="7404:11">defined</name><argument_list pos:start="7404:12" pos:end="7404:31">(<argument pos:start="7404:13" pos:end="7404:30"><expr pos:start="7404:13" pos:end="7404:30"><name pos:start="7404:13" pos:end="7404:30">TARGET_NR_eventfd2</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7406:5" pos:end="7406:28">case <expr pos:start="7406:10" pos:end="7406:27"><name pos:start="7406:10" pos:end="7406:27">TARGET_NR_eventfd2</name></expr>:</case>

    <block pos:start="7408:5" pos:end="7435:0">{<block_content pos:start="7410:9" pos:end="7426:14">

        <decl_stmt pos:start="7410:9" pos:end="7410:74"><decl pos:start="7410:9" pos:end="7410:73"><type pos:start="7410:9" pos:end="7410:11"><name pos:start="7410:9" pos:end="7410:11">int</name></type> <name pos:start="7410:13" pos:end="7410:22">host_flags</name> <init pos:start="7410:24" pos:end="7410:73">= <expr pos:start="7410:26" pos:end="7410:73"><name pos:start="7410:26" pos:end="7410:29">arg2</name> <operator pos:start="7410:31" pos:end="7410:31">&amp;</operator> <operator pos:start="7410:33" pos:end="7410:33">(</operator><operator pos:start="7410:34" pos:end="7410:34">~</operator><operator pos:start="7410:35" pos:end="7410:35">(</operator><name pos:start="7410:36" pos:end="7410:52">TARGET_O_NONBLOCK</name> <operator pos:start="7410:54" pos:end="7410:54">|</operator> <name pos:start="7410:56" pos:end="7410:71">TARGET_O_CLOEXEC</name><operator pos:start="7410:72" pos:end="7410:72">)</operator><operator pos:start="7410:73" pos:end="7410:73">)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="7412:9" pos:end="7416:9"><if pos:start="7412:9" pos:end="7416:9">if <condition pos:start="7412:12" pos:end="7412:37">(<expr pos:start="7412:13" pos:end="7412:36"><name pos:start="7412:13" pos:end="7412:16">arg2</name> <operator pos:start="7412:18" pos:end="7412:18">&amp;</operator> <name pos:start="7412:20" pos:end="7412:36">TARGET_O_NONBLOCK</name></expr>)</condition> <block pos:start="7412:39" pos:end="7416:9">{<block_content pos:start="7414:13" pos:end="7414:37">

            <expr_stmt pos:start="7414:13" pos:end="7414:37"><expr pos:start="7414:13" pos:end="7414:36"><name pos:start="7414:13" pos:end="7414:22">host_flags</name> <operator pos:start="7414:24" pos:end="7414:25">|=</operator> <name pos:start="7414:27" pos:end="7414:36">O_NONBLOCK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="7418:9" pos:end="7422:9"><if pos:start="7418:9" pos:end="7422:9">if <condition pos:start="7418:12" pos:end="7418:36">(<expr pos:start="7418:13" pos:end="7418:35"><name pos:start="7418:13" pos:end="7418:16">arg2</name> <operator pos:start="7418:18" pos:end="7418:18">&amp;</operator> <name pos:start="7418:20" pos:end="7418:35">TARGET_O_CLOEXEC</name></expr>)</condition> <block pos:start="7418:38" pos:end="7422:9">{<block_content pos:start="7420:13" pos:end="7420:36">

            <expr_stmt pos:start="7420:13" pos:end="7420:36"><expr pos:start="7420:13" pos:end="7420:35"><name pos:start="7420:13" pos:end="7420:22">host_flags</name> <operator pos:start="7420:24" pos:end="7420:25">|=</operator> <name pos:start="7420:27" pos:end="7420:35">O_CLOEXEC</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="7424:9" pos:end="7424:51"><expr pos:start="7424:9" pos:end="7424:50"><name pos:start="7424:9" pos:end="7424:11">ret</name> <operator pos:start="7424:13" pos:end="7424:13">=</operator> <call pos:start="7424:15" pos:end="7424:50"><name pos:start="7424:15" pos:end="7424:23">get_errno</name><argument_list pos:start="7424:24" pos:end="7424:50">(<argument pos:start="7424:25" pos:end="7424:49"><expr pos:start="7424:25" pos:end="7424:49"><call pos:start="7424:25" pos:end="7424:49"><name pos:start="7424:25" pos:end="7424:31">eventfd</name><argument_list pos:start="7424:32" pos:end="7424:49">(<argument pos:start="7424:33" pos:end="7424:36"><expr pos:start="7424:33" pos:end="7424:36"><name pos:start="7424:33" pos:end="7424:36">arg1</name></expr></argument>, <argument pos:start="7424:39" pos:end="7424:48"><expr pos:start="7424:39" pos:end="7424:48"><name pos:start="7424:39" pos:end="7424:48">host_flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7426:9" pos:end="7426:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7430:1" pos:end="7430:6">#<cpp:directive pos:start="7430:2" pos:end="7430:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="7432:1" pos:end="7432:6">#<cpp:directive pos:start="7432:2" pos:end="7432:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="7432:8" pos:end="7432:28">/* CONFIG_EVENTFD  */</comment>

<cpp:if pos:start="7434:1" pos:end="7434:61">#<cpp:directive pos:start="7434:2" pos:end="7434:3">if</cpp:directive> <expr pos:start="7434:5" pos:end="7434:61"><call pos:start="7434:5" pos:end="7434:29"><name pos:start="7434:5" pos:end="7434:11">defined</name><argument_list pos:start="7434:12" pos:end="7434:29">(<argument pos:start="7434:13" pos:end="7434:28"><expr pos:start="7434:13" pos:end="7434:28"><name pos:start="7434:13" pos:end="7434:28">CONFIG_FALLOCATE</name></expr></argument>)</argument_list></call> <operator pos:start="7434:31" pos:end="7434:32">&amp;&amp;</operator> <call pos:start="7434:34" pos:end="7434:61"><name pos:start="7434:34" pos:end="7434:40">defined</name><argument_list pos:start="7434:41" pos:end="7434:61">(<argument pos:start="7434:42" pos:end="7434:60"><expr pos:start="7434:42" pos:end="7434:60"><name pos:start="7434:42" pos:end="7434:60">TARGET_NR_fallocate</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7436:5" pos:end="7439:0">case <expr pos:start="7436:10" pos:end="7436:28"><name pos:start="7436:10" pos:end="7436:28">TARGET_NR_fallocate</name></expr>:</case>

<cpp:if pos:start="7438:1" pos:end="7438:25">#<cpp:directive pos:start="7438:2" pos:end="7438:3">if</cpp:directive> <expr pos:start="7438:5" pos:end="7438:25"><name pos:start="7438:5" pos:end="7438:19">TARGET_ABI_BITS</name> <operator pos:start="7438:21" pos:end="7438:22">==</operator> <literal type="number" pos:start="7438:24" pos:end="7438:25">32</literal></expr></cpp:if>

        <expr_stmt pos:start="7440:9" pos:end="7445:0"><expr pos:start="7440:9" pos:end="7442:63"><name pos:start="7440:9" pos:end="7440:11">ret</name> <operator pos:start="7440:13" pos:end="7440:13">=</operator> <call pos:start="7440:15" pos:end="7442:63"><name pos:start="7440:15" pos:end="7440:23">get_errno</name><argument_list pos:start="7440:24" pos:end="7442:63">(<argument pos:start="7440:25" pos:end="7442:62"><expr pos:start="7440:25" pos:end="7442:62"><call pos:start="7440:25" pos:end="7442:62"><name pos:start="7440:25" pos:end="7440:33">fallocate</name><argument_list pos:start="7440:34" pos:end="7442:62">(<argument pos:start="7440:35" pos:end="7440:38"><expr pos:start="7440:35" pos:end="7440:38"><name pos:start="7440:35" pos:end="7440:38">arg1</name></expr></argument>, <argument pos:start="7440:41" pos:end="7440:44"><expr pos:start="7440:41" pos:end="7440:44"><name pos:start="7440:41" pos:end="7440:44">arg2</name></expr></argument>, <argument pos:start="7440:47" pos:end="7440:73"><expr pos:start="7440:47" pos:end="7440:73"><call pos:start="7440:47" pos:end="7440:73"><name pos:start="7440:47" pos:end="7440:61">target_offset64</name><argument_list pos:start="7440:62" pos:end="7440:73">(<argument pos:start="7440:63" pos:end="7440:66"><expr pos:start="7440:63" pos:end="7440:66"><name pos:start="7440:63" pos:end="7440:66">arg3</name></expr></argument>, <argument pos:start="7440:69" pos:end="7440:72"><expr pos:start="7440:69" pos:end="7440:72"><name pos:start="7440:69" pos:end="7440:72">arg4</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="7442:35" pos:end="7442:61"><expr pos:start="7442:35" pos:end="7442:61"><call pos:start="7442:35" pos:end="7442:61"><name pos:start="7442:35" pos:end="7442:49">target_offset64</name><argument_list pos:start="7442:50" pos:end="7442:61">(<argument pos:start="7442:51" pos:end="7442:54"><expr pos:start="7442:51" pos:end="7442:54"><name pos:start="7442:51" pos:end="7442:54">arg5</name></expr></argument>, <argument pos:start="7442:57" pos:end="7442:60"><expr pos:start="7442:57" pos:end="7442:60"><name pos:start="7442:57" pos:end="7442:60">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="7444:1" pos:end="7444:5">#<cpp:directive pos:start="7444:2" pos:end="7444:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="7446:9" pos:end="7449:0"><expr pos:start="7446:9" pos:end="7446:58"><name pos:start="7446:9" pos:end="7446:11">ret</name> <operator pos:start="7446:13" pos:end="7446:13">=</operator> <call pos:start="7446:15" pos:end="7446:58"><name pos:start="7446:15" pos:end="7446:23">get_errno</name><argument_list pos:start="7446:24" pos:end="7446:58">(<argument pos:start="7446:25" pos:end="7446:57"><expr pos:start="7446:25" pos:end="7446:57"><call pos:start="7446:25" pos:end="7446:57"><name pos:start="7446:25" pos:end="7446:33">fallocate</name><argument_list pos:start="7446:34" pos:end="7446:57">(<argument pos:start="7446:35" pos:end="7446:38"><expr pos:start="7446:35" pos:end="7446:38"><name pos:start="7446:35" pos:end="7446:38">arg1</name></expr></argument>, <argument pos:start="7446:41" pos:end="7446:44"><expr pos:start="7446:41" pos:end="7446:44"><name pos:start="7446:41" pos:end="7446:44">arg2</name></expr></argument>, <argument pos:start="7446:47" pos:end="7446:50"><expr pos:start="7446:47" pos:end="7446:50"><name pos:start="7446:47" pos:end="7446:50">arg3</name></expr></argument>, <argument pos:start="7446:53" pos:end="7446:56"><expr pos:start="7446:53" pos:end="7446:56"><name pos:start="7446:53" pos:end="7446:56">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="7448:1" pos:end="7448:6">#<cpp:directive pos:start="7448:2" pos:end="7448:6">endif</cpp:directive></cpp:endif>

        <break pos:start="7450:9" pos:end="7457:0">break;</break>

<cpp:endif pos:start="7452:1" pos:end="7452:6">#<cpp:directive pos:start="7452:2" pos:end="7452:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7454:1" pos:end="7454:35">#<cpp:directive pos:start="7454:2" pos:end="7454:3">if</cpp:directive> <expr pos:start="7454:5" pos:end="7454:35"><call pos:start="7454:5" pos:end="7454:35"><name pos:start="7454:5" pos:end="7454:11">defined</name><argument_list pos:start="7454:12" pos:end="7454:35">(<argument pos:start="7454:13" pos:end="7454:34"><expr pos:start="7454:13" pos:end="7454:34"><name pos:start="7454:13" pos:end="7454:34">CONFIG_SYNC_FILE_RANGE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if pos:start="7456:1" pos:end="7456:38">#<cpp:directive pos:start="7456:2" pos:end="7456:3">if</cpp:directive> <expr pos:start="7456:5" pos:end="7456:38"><call pos:start="7456:5" pos:end="7456:38"><name pos:start="7456:5" pos:end="7456:11">defined</name><argument_list pos:start="7456:12" pos:end="7456:38">(<argument pos:start="7456:13" pos:end="7456:37"><expr pos:start="7456:13" pos:end="7456:37"><name pos:start="7456:13" pos:end="7456:37">TARGET_NR_sync_file_range</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7458:5" pos:end="7463:0">case <expr pos:start="7458:10" pos:end="7458:34"><name pos:start="7458:10" pos:end="7458:34">TARGET_NR_sync_file_range</name></expr>:</case>

<cpp:if pos:start="7460:1" pos:end="7460:25">#<cpp:directive pos:start="7460:2" pos:end="7460:3">if</cpp:directive> <expr pos:start="7460:5" pos:end="7460:25"><name pos:start="7460:5" pos:end="7460:19">TARGET_ABI_BITS</name> <operator pos:start="7460:21" pos:end="7460:22">==</operator> <literal type="number" pos:start="7460:24" pos:end="7460:25">32</literal></expr></cpp:if>

<cpp:if pos:start="7462:1" pos:end="7462:24">#<cpp:directive pos:start="7462:2" pos:end="7462:3">if</cpp:directive> <expr pos:start="7462:5" pos:end="7462:24"><call pos:start="7462:5" pos:end="7462:24"><name pos:start="7462:5" pos:end="7462:11">defined</name><argument_list pos:start="7462:12" pos:end="7462:24">(<argument pos:start="7462:13" pos:end="7462:23"><expr pos:start="7462:13" pos:end="7462:23"><name pos:start="7462:13" pos:end="7462:23">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="7464:9" pos:end="7469:0"><expr pos:start="7464:9" pos:end="7466:75"><name pos:start="7464:9" pos:end="7464:11">ret</name> <operator pos:start="7464:13" pos:end="7464:13">=</operator> <call pos:start="7464:15" pos:end="7466:75"><name pos:start="7464:15" pos:end="7464:23">get_errno</name><argument_list pos:start="7464:24" pos:end="7466:75">(<argument pos:start="7464:25" pos:end="7466:74"><expr pos:start="7464:25" pos:end="7466:74"><call pos:start="7464:25" pos:end="7466:74"><name pos:start="7464:25" pos:end="7464:39">sync_file_range</name><argument_list pos:start="7464:40" pos:end="7466:74">(<argument pos:start="7464:41" pos:end="7464:44"><expr pos:start="7464:41" pos:end="7464:44"><name pos:start="7464:41" pos:end="7464:44">arg1</name></expr></argument>, <argument pos:start="7464:47" pos:end="7464:73"><expr pos:start="7464:47" pos:end="7464:73"><call pos:start="7464:47" pos:end="7464:73"><name pos:start="7464:47" pos:end="7464:61">target_offset64</name><argument_list pos:start="7464:62" pos:end="7464:73">(<argument pos:start="7464:63" pos:end="7464:66"><expr pos:start="7464:63" pos:end="7464:66"><name pos:start="7464:63" pos:end="7464:66">arg3</name></expr></argument>, <argument pos:start="7464:69" pos:end="7464:72"><expr pos:start="7464:69" pos:end="7464:72"><name pos:start="7464:69" pos:end="7464:72">arg4</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="7466:41" pos:end="7466:67"><expr pos:start="7466:41" pos:end="7466:67"><call pos:start="7466:41" pos:end="7466:67"><name pos:start="7466:41" pos:end="7466:55">target_offset64</name><argument_list pos:start="7466:56" pos:end="7466:67">(<argument pos:start="7466:57" pos:end="7466:60"><expr pos:start="7466:57" pos:end="7466:60"><name pos:start="7466:57" pos:end="7466:60">arg5</name></expr></argument>, <argument pos:start="7466:63" pos:end="7466:66"><expr pos:start="7466:63" pos:end="7466:66"><name pos:start="7466:63" pos:end="7466:66">arg6</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="7466:70" pos:end="7466:73"><expr pos:start="7466:70" pos:end="7466:73"><name pos:start="7466:70" pos:end="7466:73">arg7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="7468:1" pos:end="7468:5">#<cpp:directive pos:start="7468:2" pos:end="7468:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="7470:9" pos:end="7477:0"><expr pos:start="7470:9" pos:end="7472:75"><name pos:start="7470:9" pos:end="7470:11">ret</name> <operator pos:start="7470:13" pos:end="7470:13">=</operator> <call pos:start="7470:15" pos:end="7472:75"><name pos:start="7470:15" pos:end="7470:23">get_errno</name><argument_list pos:start="7470:24" pos:end="7472:75">(<argument pos:start="7470:25" pos:end="7472:74"><expr pos:start="7470:25" pos:end="7472:74"><call pos:start="7470:25" pos:end="7472:74"><name pos:start="7470:25" pos:end="7470:39">sync_file_range</name><argument_list pos:start="7470:40" pos:end="7472:74">(<argument pos:start="7470:41" pos:end="7470:44"><expr pos:start="7470:41" pos:end="7470:44"><name pos:start="7470:41" pos:end="7470:44">arg1</name></expr></argument>, <argument pos:start="7470:47" pos:end="7470:73"><expr pos:start="7470:47" pos:end="7470:73"><call pos:start="7470:47" pos:end="7470:73"><name pos:start="7470:47" pos:end="7470:61">target_offset64</name><argument_list pos:start="7470:62" pos:end="7470:73">(<argument pos:start="7470:63" pos:end="7470:66"><expr pos:start="7470:63" pos:end="7470:66"><name pos:start="7470:63" pos:end="7470:66">arg2</name></expr></argument>, <argument pos:start="7470:69" pos:end="7470:72"><expr pos:start="7470:69" pos:end="7470:72"><name pos:start="7470:69" pos:end="7470:72">arg3</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="7472:41" pos:end="7472:67"><expr pos:start="7472:41" pos:end="7472:67"><call pos:start="7472:41" pos:end="7472:67"><name pos:start="7472:41" pos:end="7472:55">target_offset64</name><argument_list pos:start="7472:56" pos:end="7472:67">(<argument pos:start="7472:57" pos:end="7472:60"><expr pos:start="7472:57" pos:end="7472:60"><name pos:start="7472:57" pos:end="7472:60">arg4</name></expr></argument>, <argument pos:start="7472:63" pos:end="7472:66"><expr pos:start="7472:63" pos:end="7472:66"><name pos:start="7472:63" pos:end="7472:66">arg5</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="7472:70" pos:end="7472:73"><expr pos:start="7472:70" pos:end="7472:73"><name pos:start="7472:70" pos:end="7472:73">arg6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="7474:1" pos:end="7474:6">#<cpp:directive pos:start="7474:2" pos:end="7474:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="7474:8" pos:end="7474:25">/* !TARGET_MIPS */</comment>

<cpp:else pos:start="7476:1" pos:end="7476:5">#<cpp:directive pos:start="7476:2" pos:end="7476:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="7478:9" pos:end="7481:0"><expr pos:start="7478:9" pos:end="7478:64"><name pos:start="7478:9" pos:end="7478:11">ret</name> <operator pos:start="7478:13" pos:end="7478:13">=</operator> <call pos:start="7478:15" pos:end="7478:64"><name pos:start="7478:15" pos:end="7478:23">get_errno</name><argument_list pos:start="7478:24" pos:end="7478:64">(<argument pos:start="7478:25" pos:end="7478:63"><expr pos:start="7478:25" pos:end="7478:63"><call pos:start="7478:25" pos:end="7478:63"><name pos:start="7478:25" pos:end="7478:39">sync_file_range</name><argument_list pos:start="7478:40" pos:end="7478:63">(<argument pos:start="7478:41" pos:end="7478:44"><expr pos:start="7478:41" pos:end="7478:44"><name pos:start="7478:41" pos:end="7478:44">arg1</name></expr></argument>, <argument pos:start="7478:47" pos:end="7478:50"><expr pos:start="7478:47" pos:end="7478:50"><name pos:start="7478:47" pos:end="7478:50">arg2</name></expr></argument>, <argument pos:start="7478:53" pos:end="7478:56"><expr pos:start="7478:53" pos:end="7478:56"><name pos:start="7478:53" pos:end="7478:56">arg3</name></expr></argument>, <argument pos:start="7478:59" pos:end="7478:62"><expr pos:start="7478:59" pos:end="7478:62"><name pos:start="7478:59" pos:end="7478:62">arg4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="7480:1" pos:end="7480:6">#<cpp:directive pos:start="7480:2" pos:end="7480:6">endif</cpp:directive></cpp:endif>

        <break pos:start="7482:9" pos:end="7487:0">break;</break>

<cpp:endif pos:start="7484:1" pos:end="7484:6">#<cpp:directive pos:start="7484:2" pos:end="7484:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7486:1" pos:end="7486:39">#<cpp:directive pos:start="7486:2" pos:end="7486:3">if</cpp:directive> <expr pos:start="7486:5" pos:end="7486:39"><call pos:start="7486:5" pos:end="7486:39"><name pos:start="7486:5" pos:end="7486:11">defined</name><argument_list pos:start="7486:12" pos:end="7486:39">(<argument pos:start="7486:13" pos:end="7486:38"><expr pos:start="7486:13" pos:end="7486:38"><name pos:start="7486:13" pos:end="7486:38">TARGET_NR_sync_file_range2</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7488:5" pos:end="7493:0">case <expr pos:start="7488:10" pos:end="7488:35"><name pos:start="7488:10" pos:end="7488:35">TARGET_NR_sync_file_range2</name></expr>:</case>

        <comment type="block" pos:start="7490:9" pos:end="7490:74">/* This is like sync_file_range but the arguments are reordered */</comment>

<cpp:if pos:start="7492:1" pos:end="7492:25">#<cpp:directive pos:start="7492:2" pos:end="7492:3">if</cpp:directive> <expr pos:start="7492:5" pos:end="7492:25"><name pos:start="7492:5" pos:end="7492:19">TARGET_ABI_BITS</name> <operator pos:start="7492:21" pos:end="7492:22">==</operator> <literal type="number" pos:start="7492:24" pos:end="7492:25">32</literal></expr></cpp:if>

        <expr_stmt pos:start="7494:9" pos:end="7499:0"><expr pos:start="7494:9" pos:end="7496:75"><name pos:start="7494:9" pos:end="7494:11">ret</name> <operator pos:start="7494:13" pos:end="7494:13">=</operator> <call pos:start="7494:15" pos:end="7496:75"><name pos:start="7494:15" pos:end="7494:23">get_errno</name><argument_list pos:start="7494:24" pos:end="7496:75">(<argument pos:start="7494:25" pos:end="7496:74"><expr pos:start="7494:25" pos:end="7496:74"><call pos:start="7494:25" pos:end="7496:74"><name pos:start="7494:25" pos:end="7494:39">sync_file_range</name><argument_list pos:start="7494:40" pos:end="7496:74">(<argument pos:start="7494:41" pos:end="7494:44"><expr pos:start="7494:41" pos:end="7494:44"><name pos:start="7494:41" pos:end="7494:44">arg1</name></expr></argument>, <argument pos:start="7494:47" pos:end="7494:73"><expr pos:start="7494:47" pos:end="7494:73"><call pos:start="7494:47" pos:end="7494:73"><name pos:start="7494:47" pos:end="7494:61">target_offset64</name><argument_list pos:start="7494:62" pos:end="7494:73">(<argument pos:start="7494:63" pos:end="7494:66"><expr pos:start="7494:63" pos:end="7494:66"><name pos:start="7494:63" pos:end="7494:66">arg3</name></expr></argument>, <argument pos:start="7494:69" pos:end="7494:72"><expr pos:start="7494:69" pos:end="7494:72"><name pos:start="7494:69" pos:end="7494:72">arg4</name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="7496:41" pos:end="7496:67"><expr pos:start="7496:41" pos:end="7496:67"><call pos:start="7496:41" pos:end="7496:67"><name pos:start="7496:41" pos:end="7496:55">target_offset64</name><argument_list pos:start="7496:56" pos:end="7496:67">(<argument pos:start="7496:57" pos:end="7496:60"><expr pos:start="7496:57" pos:end="7496:60"><name pos:start="7496:57" pos:end="7496:60">arg5</name></expr></argument>, <argument pos:start="7496:63" pos:end="7496:66"><expr pos:start="7496:63" pos:end="7496:66"><name pos:start="7496:63" pos:end="7496:66">arg6</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="7496:70" pos:end="7496:73"><expr pos:start="7496:70" pos:end="7496:73"><name pos:start="7496:70" pos:end="7496:73">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="7498:1" pos:end="7498:5">#<cpp:directive pos:start="7498:2" pos:end="7498:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="7500:9" pos:end="7503:0"><expr pos:start="7500:9" pos:end="7500:64"><name pos:start="7500:9" pos:end="7500:11">ret</name> <operator pos:start="7500:13" pos:end="7500:13">=</operator> <call pos:start="7500:15" pos:end="7500:64"><name pos:start="7500:15" pos:end="7500:23">get_errno</name><argument_list pos:start="7500:24" pos:end="7500:64">(<argument pos:start="7500:25" pos:end="7500:63"><expr pos:start="7500:25" pos:end="7500:63"><call pos:start="7500:25" pos:end="7500:63"><name pos:start="7500:25" pos:end="7500:39">sync_file_range</name><argument_list pos:start="7500:40" pos:end="7500:63">(<argument pos:start="7500:41" pos:end="7500:44"><expr pos:start="7500:41" pos:end="7500:44"><name pos:start="7500:41" pos:end="7500:44">arg1</name></expr></argument>, <argument pos:start="7500:47" pos:end="7500:50"><expr pos:start="7500:47" pos:end="7500:50"><name pos:start="7500:47" pos:end="7500:50">arg3</name></expr></argument>, <argument pos:start="7500:53" pos:end="7500:56"><expr pos:start="7500:53" pos:end="7500:56"><name pos:start="7500:53" pos:end="7500:56">arg4</name></expr></argument>, <argument pos:start="7500:59" pos:end="7500:62"><expr pos:start="7500:59" pos:end="7500:62"><name pos:start="7500:59" pos:end="7500:62">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="7502:1" pos:end="7502:6">#<cpp:directive pos:start="7502:2" pos:end="7502:6">endif</cpp:directive></cpp:endif>

        <break pos:start="7504:9" pos:end="7513:0">break;</break>

<cpp:endif pos:start="7506:1" pos:end="7506:6">#<cpp:directive pos:start="7506:2" pos:end="7506:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="7508:1" pos:end="7508:6">#<cpp:directive pos:start="7508:2" pos:end="7508:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7510:1" pos:end="7510:25">#<cpp:directive pos:start="7510:2" pos:end="7510:3">if</cpp:directive> <expr pos:start="7510:5" pos:end="7510:25"><call pos:start="7510:5" pos:end="7510:25"><name pos:start="7510:5" pos:end="7510:11">defined</name><argument_list pos:start="7510:12" pos:end="7510:25">(<argument pos:start="7510:13" pos:end="7510:24"><expr pos:start="7510:13" pos:end="7510:24"><name pos:start="7510:13" pos:end="7510:24">CONFIG_EPOLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if pos:start="7512:1" pos:end="7512:35">#<cpp:directive pos:start="7512:2" pos:end="7512:3">if</cpp:directive> <expr pos:start="7512:5" pos:end="7512:35"><call pos:start="7512:5" pos:end="7512:35"><name pos:start="7512:5" pos:end="7512:11">defined</name><argument_list pos:start="7512:12" pos:end="7512:35">(<argument pos:start="7512:13" pos:end="7512:34"><expr pos:start="7512:13" pos:end="7512:34"><name pos:start="7512:13" pos:end="7512:34">TARGET_NR_epoll_create</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7514:5" pos:end="7514:32">case <expr pos:start="7514:10" pos:end="7514:31"><name pos:start="7514:10" pos:end="7514:31">TARGET_NR_epoll_create</name></expr>:</case>

        <expr_stmt pos:start="7516:9" pos:end="7516:44"><expr pos:start="7516:9" pos:end="7516:43"><name pos:start="7516:9" pos:end="7516:11">ret</name> <operator pos:start="7516:13" pos:end="7516:13">=</operator> <call pos:start="7516:15" pos:end="7516:43"><name pos:start="7516:15" pos:end="7516:23">get_errno</name><argument_list pos:start="7516:24" pos:end="7516:43">(<argument pos:start="7516:25" pos:end="7516:42"><expr pos:start="7516:25" pos:end="7516:42"><call pos:start="7516:25" pos:end="7516:42"><name pos:start="7516:25" pos:end="7516:36">epoll_create</name><argument_list pos:start="7516:37" pos:end="7516:42">(<argument pos:start="7516:38" pos:end="7516:41"><expr pos:start="7516:38" pos:end="7516:41"><name pos:start="7516:38" pos:end="7516:41">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7518:9" pos:end="7523:0">break;</break>

<cpp:endif pos:start="7520:1" pos:end="7520:6">#<cpp:directive pos:start="7520:2" pos:end="7520:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7522:1" pos:end="7522:69">#<cpp:directive pos:start="7522:2" pos:end="7522:3">if</cpp:directive> <expr pos:start="7522:5" pos:end="7522:69"><call pos:start="7522:5" pos:end="7522:36"><name pos:start="7522:5" pos:end="7522:11">defined</name><argument_list pos:start="7522:12" pos:end="7522:36">(<argument pos:start="7522:13" pos:end="7522:35"><expr pos:start="7522:13" pos:end="7522:35"><name pos:start="7522:13" pos:end="7522:35">TARGET_NR_epoll_create1</name></expr></argument>)</argument_list></call> <operator pos:start="7522:38" pos:end="7522:39">&amp;&amp;</operator> <call pos:start="7522:41" pos:end="7522:69"><name pos:start="7522:41" pos:end="7522:47">defined</name><argument_list pos:start="7522:48" pos:end="7522:69">(<argument pos:start="7522:49" pos:end="7522:68"><expr pos:start="7522:49" pos:end="7522:68"><name pos:start="7522:49" pos:end="7522:68">CONFIG_EPOLL_CREATE1</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7524:5" pos:end="7524:33">case <expr pos:start="7524:10" pos:end="7524:32"><name pos:start="7524:10" pos:end="7524:32">TARGET_NR_epoll_create1</name></expr>:</case>

        <expr_stmt pos:start="7526:9" pos:end="7526:45"><expr pos:start="7526:9" pos:end="7526:44"><name pos:start="7526:9" pos:end="7526:11">ret</name> <operator pos:start="7526:13" pos:end="7526:13">=</operator> <call pos:start="7526:15" pos:end="7526:44"><name pos:start="7526:15" pos:end="7526:23">get_errno</name><argument_list pos:start="7526:24" pos:end="7526:44">(<argument pos:start="7526:25" pos:end="7526:43"><expr pos:start="7526:25" pos:end="7526:43"><call pos:start="7526:25" pos:end="7526:43"><name pos:start="7526:25" pos:end="7526:37">epoll_create1</name><argument_list pos:start="7526:38" pos:end="7526:43">(<argument pos:start="7526:39" pos:end="7526:42"><expr pos:start="7526:39" pos:end="7526:42"><name pos:start="7526:39" pos:end="7526:42">arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7528:9" pos:end="7533:0">break;</break>

<cpp:endif pos:start="7530:1" pos:end="7530:6">#<cpp:directive pos:start="7530:2" pos:end="7530:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7532:1" pos:end="7532:32">#<cpp:directive pos:start="7532:2" pos:end="7532:3">if</cpp:directive> <expr pos:start="7532:5" pos:end="7532:32"><call pos:start="7532:5" pos:end="7532:32"><name pos:start="7532:5" pos:end="7532:11">defined</name><argument_list pos:start="7532:12" pos:end="7532:32">(<argument pos:start="7532:13" pos:end="7532:31"><expr pos:start="7532:13" pos:end="7532:31"><name pos:start="7532:13" pos:end="7532:31">TARGET_NR_epoll_ctl</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7534:5" pos:end="7534:29">case <expr pos:start="7534:10" pos:end="7534:28"><name pos:start="7534:10" pos:end="7534:28">TARGET_NR_epoll_ctl</name></expr>:</case>

    <block pos:start="7536:5" pos:end="7589:0">{<block_content pos:start="7538:9" pos:end="7572:14">

        <decl_stmt pos:start="7538:9" pos:end="7538:30"><decl pos:start="7538:9" pos:end="7538:29"><type pos:start="7538:9" pos:end="7538:26"><name pos:start="7538:9" pos:end="7538:26"><name pos:start="7538:9" pos:end="7538:14">struct</name> <name pos:start="7538:16" pos:end="7538:26">epoll_event</name></name></type> <name pos:start="7538:28" pos:end="7538:29">ep</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7540:9" pos:end="7540:36"><decl pos:start="7540:9" pos:end="7540:35"><type pos:start="7540:9" pos:end="7540:28"><name pos:start="7540:9" pos:end="7540:26"><name pos:start="7540:9" pos:end="7540:14">struct</name> <name pos:start="7540:16" pos:end="7540:26">epoll_event</name></name> <modifier pos:start="7540:28" pos:end="7540:28">*</modifier></type><name pos:start="7540:29" pos:end="7540:31">epp</name> <init pos:start="7540:33" pos:end="7540:35">= <expr pos:start="7540:35" pos:end="7540:35"><literal type="number" pos:start="7540:35" pos:end="7540:35">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="7542:9" pos:end="7568:9"><if pos:start="7542:9" pos:end="7568:9">if <condition pos:start="7542:12" pos:end="7542:17">(<expr pos:start="7542:13" pos:end="7542:16"><name pos:start="7542:13" pos:end="7542:16">arg4</name></expr>)</condition> <block pos:start="7542:19" pos:end="7568:9">{<block_content pos:start="7544:13" pos:end="7566:22">

            <decl_stmt pos:start="7544:13" pos:end="7544:49"><decl pos:start="7544:13" pos:end="7544:48"><type pos:start="7544:13" pos:end="7544:39"><name pos:start="7544:13" pos:end="7544:37"><name pos:start="7544:13" pos:end="7544:18">struct</name> <name pos:start="7544:20" pos:end="7544:37">target_epoll_event</name></name> <modifier pos:start="7544:39" pos:end="7544:39">*</modifier></type><name pos:start="7544:40" pos:end="7544:48">target_ep</name></decl>;</decl_stmt>

            <if_stmt pos:start="7546:13" pos:end="7550:13"><if pos:start="7546:13" pos:end="7550:13">if <condition pos:start="7546:16" pos:end="7546:67">(<expr pos:start="7546:17" pos:end="7546:66"><operator pos:start="7546:17" pos:end="7546:17">!</operator><call pos:start="7546:18" pos:end="7546:66"><name pos:start="7546:18" pos:end="7546:33">lock_user_struct</name><argument_list pos:start="7546:34" pos:end="7546:66">(<argument pos:start="7546:35" pos:end="7546:45"><expr pos:start="7546:35" pos:end="7546:45"><name pos:start="7546:35" pos:end="7546:45">VERIFY_READ</name></expr></argument>, <argument pos:start="7546:48" pos:end="7546:56"><expr pos:start="7546:48" pos:end="7546:56"><name pos:start="7546:48" pos:end="7546:56">target_ep</name></expr></argument>, <argument pos:start="7546:59" pos:end="7546:62"><expr pos:start="7546:59" pos:end="7546:62"><name pos:start="7546:59" pos:end="7546:62">arg4</name></expr></argument>, <argument pos:start="7546:65" pos:end="7546:65"><expr pos:start="7546:65" pos:end="7546:65"><literal type="number" pos:start="7546:65" pos:end="7546:65">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7546:69" pos:end="7550:13">{<block_content pos:start="7548:17" pos:end="7548:28">

                <goto pos:start="7548:17" pos:end="7548:28">goto <name pos:start="7548:22" pos:end="7548:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7552:13" pos:end="7552:51"><expr pos:start="7552:13" pos:end="7552:50"><name pos:start="7552:13" pos:end="7552:21"><name pos:start="7552:13" pos:end="7552:14">ep</name><operator pos:start="7552:15" pos:end="7552:15">.</operator><name pos:start="7552:16" pos:end="7552:21">events</name></name> <operator pos:start="7552:23" pos:end="7552:23">=</operator> <call pos:start="7552:25" pos:end="7552:50"><name pos:start="7552:25" pos:end="7552:31">tswap32</name><argument_list pos:start="7552:32" pos:end="7552:50">(<argument pos:start="7552:33" pos:end="7552:49"><expr pos:start="7552:33" pos:end="7552:49"><name pos:start="7552:33" pos:end="7552:49"><name pos:start="7552:33" pos:end="7552:41">target_ep</name><operator pos:start="7552:42" pos:end="7552:43">-&gt;</operator><name pos:start="7552:44" pos:end="7552:49">events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="7554:13" pos:end="7560:15">/* The epoll_data_t union is just opaque data to the kernel,

             * so we transfer all 64 bits across and need not worry what

             * actual data type it is.

             */</comment>

            <expr_stmt pos:start="7562:13" pos:end="7562:55"><expr pos:start="7562:13" pos:end="7562:54"><name pos:start="7562:13" pos:end="7562:23"><name pos:start="7562:13" pos:end="7562:14">ep</name><operator pos:start="7562:15" pos:end="7562:15">.</operator><name pos:start="7562:16" pos:end="7562:19">data</name><operator pos:start="7562:20" pos:end="7562:20">.</operator><name pos:start="7562:21" pos:end="7562:23">u64</name></name> <operator pos:start="7562:25" pos:end="7562:25">=</operator> <call pos:start="7562:27" pos:end="7562:54"><name pos:start="7562:27" pos:end="7562:33">tswap64</name><argument_list pos:start="7562:34" pos:end="7562:54">(<argument pos:start="7562:35" pos:end="7562:53"><expr pos:start="7562:35" pos:end="7562:53"><name pos:start="7562:35" pos:end="7562:53"><name pos:start="7562:35" pos:end="7562:43">target_ep</name><operator pos:start="7562:44" pos:end="7562:45">-&gt;</operator><name pos:start="7562:46" pos:end="7562:49">data</name><operator pos:start="7562:50" pos:end="7562:50">.</operator><name pos:start="7562:51" pos:end="7562:53">u64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7564:13" pos:end="7564:51"><expr pos:start="7564:13" pos:end="7564:50"><call pos:start="7564:13" pos:end="7564:50"><name pos:start="7564:13" pos:end="7564:30">unlock_user_struct</name><argument_list pos:start="7564:31" pos:end="7564:50">(<argument pos:start="7564:32" pos:end="7564:40"><expr pos:start="7564:32" pos:end="7564:40"><name pos:start="7564:32" pos:end="7564:40">target_ep</name></expr></argument>, <argument pos:start="7564:43" pos:end="7564:46"><expr pos:start="7564:43" pos:end="7564:46"><name pos:start="7564:43" pos:end="7564:46">arg4</name></expr></argument>, <argument pos:start="7564:49" pos:end="7564:49"><expr pos:start="7564:49" pos:end="7564:49"><literal type="number" pos:start="7564:49" pos:end="7564:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7566:13" pos:end="7566:22"><expr pos:start="7566:13" pos:end="7566:21"><name pos:start="7566:13" pos:end="7566:15">epp</name> <operator pos:start="7566:17" pos:end="7566:17">=</operator> <operator pos:start="7566:19" pos:end="7566:19">&amp;</operator><name pos:start="7566:20" pos:end="7566:21">ep</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="7570:9" pos:end="7570:58"><expr pos:start="7570:9" pos:end="7570:57"><name pos:start="7570:9" pos:end="7570:11">ret</name> <operator pos:start="7570:13" pos:end="7570:13">=</operator> <call pos:start="7570:15" pos:end="7570:57"><name pos:start="7570:15" pos:end="7570:23">get_errno</name><argument_list pos:start="7570:24" pos:end="7570:57">(<argument pos:start="7570:25" pos:end="7570:56"><expr pos:start="7570:25" pos:end="7570:56"><call pos:start="7570:25" pos:end="7570:56"><name pos:start="7570:25" pos:end="7570:33">epoll_ctl</name><argument_list pos:start="7570:34" pos:end="7570:56">(<argument pos:start="7570:35" pos:end="7570:38"><expr pos:start="7570:35" pos:end="7570:38"><name pos:start="7570:35" pos:end="7570:38">arg1</name></expr></argument>, <argument pos:start="7570:41" pos:end="7570:44"><expr pos:start="7570:41" pos:end="7570:44"><name pos:start="7570:41" pos:end="7570:44">arg2</name></expr></argument>, <argument pos:start="7570:47" pos:end="7570:50"><expr pos:start="7570:47" pos:end="7570:50"><name pos:start="7570:47" pos:end="7570:50">arg3</name></expr></argument>, <argument pos:start="7570:53" pos:end="7570:55"><expr pos:start="7570:53" pos:end="7570:55"><name pos:start="7570:53" pos:end="7570:55">epp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7572:9" pos:end="7572:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7576:1" pos:end="7576:6">#<cpp:directive pos:start="7576:2" pos:end="7576:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="7580:1" pos:end="7580:65">#<cpp:directive pos:start="7580:2" pos:end="7580:3">if</cpp:directive> <expr pos:start="7580:5" pos:end="7580:65"><call pos:start="7580:5" pos:end="7580:34"><name pos:start="7580:5" pos:end="7580:11">defined</name><argument_list pos:start="7580:12" pos:end="7580:34">(<argument pos:start="7580:13" pos:end="7580:33"><expr pos:start="7580:13" pos:end="7580:33"><name pos:start="7580:13" pos:end="7580:33">TARGET_NR_epoll_pwait</name></expr></argument>)</argument_list></call> <operator pos:start="7580:36" pos:end="7580:37">&amp;&amp;</operator> <call pos:start="7580:39" pos:end="7580:65"><name pos:start="7580:39" pos:end="7580:45">defined</name><argument_list pos:start="7580:46" pos:end="7580:65">(<argument pos:start="7580:47" pos:end="7580:64"><expr pos:start="7580:47" pos:end="7580:64"><name pos:start="7580:47" pos:end="7580:64">CONFIG_EPOLL_PWAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define pos:start="7582:1" pos:end="7582:29">#<cpp:directive pos:start="7582:2" pos:end="7582:7">define</cpp:directive> <cpp:macro pos:start="7582:9" pos:end="7582:29"><name pos:start="7582:9" pos:end="7582:29">IMPLEMENT_EPOLL_PWAIT</name></cpp:macro></cpp:define>

<cpp:endif pos:start="7584:1" pos:end="7584:6">#<cpp:directive pos:start="7584:2" pos:end="7584:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7586:1" pos:end="7586:67">#<cpp:directive pos:start="7586:2" pos:end="7586:3">if</cpp:directive> <expr pos:start="7586:5" pos:end="7586:67"><call pos:start="7586:5" pos:end="7586:33"><name pos:start="7586:5" pos:end="7586:11">defined</name><argument_list pos:start="7586:12" pos:end="7586:33">(<argument pos:start="7586:13" pos:end="7586:32"><expr pos:start="7586:13" pos:end="7586:32"><name pos:start="7586:13" pos:end="7586:32">TARGET_NR_epoll_wait</name></expr></argument>)</argument_list></call> <operator pos:start="7586:35" pos:end="7586:36">||</operator> <call pos:start="7586:38" pos:end="7586:67"><name pos:start="7586:38" pos:end="7586:44">defined</name><argument_list pos:start="7586:45" pos:end="7586:67">(<argument pos:start="7586:46" pos:end="7586:66"><expr pos:start="7586:46" pos:end="7586:66"><name pos:start="7586:46" pos:end="7586:66">IMPLEMENT_EPOLL_PWAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if pos:start="7588:1" pos:end="7588:33">#<cpp:directive pos:start="7588:2" pos:end="7588:3">if</cpp:directive> <expr pos:start="7588:5" pos:end="7588:33"><call pos:start="7588:5" pos:end="7588:33"><name pos:start="7588:5" pos:end="7588:11">defined</name><argument_list pos:start="7588:12" pos:end="7588:33">(<argument pos:start="7588:13" pos:end="7588:32"><expr pos:start="7588:13" pos:end="7588:32"><name pos:start="7588:13" pos:end="7588:32">TARGET_NR_epoll_wait</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7590:5" pos:end="7595:0">case <expr pos:start="7590:10" pos:end="7590:29"><name pos:start="7590:10" pos:end="7590:29">TARGET_NR_epoll_wait</name></expr>:</case>

<cpp:endif pos:start="7592:1" pos:end="7592:6">#<cpp:directive pos:start="7592:2" pos:end="7592:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7594:1" pos:end="7594:34">#<cpp:directive pos:start="7594:2" pos:end="7594:3">if</cpp:directive> <expr pos:start="7594:5" pos:end="7594:34"><call pos:start="7594:5" pos:end="7594:34"><name pos:start="7594:5" pos:end="7594:11">defined</name><argument_list pos:start="7594:12" pos:end="7594:34">(<argument pos:start="7594:13" pos:end="7594:33"><expr pos:start="7594:13" pos:end="7594:33"><name pos:start="7594:13" pos:end="7594:33">IMPLEMENT_EPOLL_PWAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="7596:5" pos:end="7599:0">case <expr pos:start="7596:10" pos:end="7596:30"><name pos:start="7596:10" pos:end="7596:30">TARGET_NR_epoll_pwait</name></expr>:</case>

<cpp:endif pos:start="7598:1" pos:end="7598:6">#<cpp:directive pos:start="7598:2" pos:end="7598:6">endif</cpp:directive></cpp:endif>

    <block pos:start="7600:5" pos:end="7719:0">{<block_content pos:start="7602:9" pos:end="7710:14">

        <decl_stmt pos:start="7602:9" pos:end="7602:45"><decl pos:start="7602:9" pos:end="7602:44"><type pos:start="7602:9" pos:end="7602:35"><name pos:start="7602:9" pos:end="7602:33"><name pos:start="7602:9" pos:end="7602:14">struct</name> <name pos:start="7602:16" pos:end="7602:33">target_epoll_event</name></name> <modifier pos:start="7602:35" pos:end="7602:35">*</modifier></type><name pos:start="7602:36" pos:end="7602:44">target_ep</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7604:9" pos:end="7604:31"><decl pos:start="7604:9" pos:end="7604:30"><type pos:start="7604:9" pos:end="7604:28"><name pos:start="7604:9" pos:end="7604:26"><name pos:start="7604:9" pos:end="7604:14">struct</name> <name pos:start="7604:16" pos:end="7604:26">epoll_event</name></name> <modifier pos:start="7604:28" pos:end="7604:28">*</modifier></type><name pos:start="7604:29" pos:end="7604:30">ep</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7606:9" pos:end="7606:24"><decl pos:start="7606:9" pos:end="7606:23"><type pos:start="7606:9" pos:end="7606:11"><name pos:start="7606:9" pos:end="7606:11">int</name></type> <name pos:start="7606:13" pos:end="7606:16">epfd</name> <init pos:start="7606:18" pos:end="7606:23">= <expr pos:start="7606:20" pos:end="7606:23"><name pos:start="7606:20" pos:end="7606:23">arg1</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="7608:9" pos:end="7608:29"><decl pos:start="7608:9" pos:end="7608:28"><type pos:start="7608:9" pos:end="7608:11"><name pos:start="7608:9" pos:end="7608:11">int</name></type> <name pos:start="7608:13" pos:end="7608:21">maxevents</name> <init pos:start="7608:23" pos:end="7608:28">= <expr pos:start="7608:25" pos:end="7608:28"><name pos:start="7608:25" pos:end="7608:28">arg3</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="7610:9" pos:end="7610:27"><decl pos:start="7610:9" pos:end="7610:26"><type pos:start="7610:9" pos:end="7610:11"><name pos:start="7610:9" pos:end="7610:11">int</name></type> <name pos:start="7610:13" pos:end="7610:19">timeout</name> <init pos:start="7610:21" pos:end="7610:26">= <expr pos:start="7610:23" pos:end="7610:26"><name pos:start="7610:23" pos:end="7610:26">arg4</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="7614:9" pos:end="7616:80"><expr pos:start="7614:9" pos:end="7616:79"><name pos:start="7614:9" pos:end="7614:17">target_ep</name> <operator pos:start="7614:19" pos:end="7614:19">=</operator> <call pos:start="7614:21" pos:end="7616:79"><name pos:start="7614:21" pos:end="7614:29">lock_user</name><argument_list pos:start="7614:30" pos:end="7616:79">(<argument pos:start="7614:31" pos:end="7614:42"><expr pos:start="7614:31" pos:end="7614:42"><name pos:start="7614:31" pos:end="7614:42">VERIFY_WRITE</name></expr></argument>, <argument pos:start="7614:45" pos:end="7614:48"><expr pos:start="7614:45" pos:end="7614:48"><name pos:start="7614:45" pos:end="7614:48">arg2</name></expr></argument>,

                              <argument pos:start="7616:31" pos:end="7616:75"><expr pos:start="7616:31" pos:end="7616:75"><name pos:start="7616:31" pos:end="7616:39">maxevents</name> <operator pos:start="7616:41" pos:end="7616:41">*</operator> <sizeof pos:start="7616:43" pos:end="7616:75">sizeof<argument_list pos:start="7616:49" pos:end="7616:75">(<argument pos:start="7616:50" pos:end="7616:74"><expr pos:start="7616:50" pos:end="7616:74">struct <name pos:start="7616:57" pos:end="7616:74">target_epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="7616:78" pos:end="7616:78"><expr pos:start="7616:78" pos:end="7616:78"><literal type="number" pos:start="7616:78" pos:end="7616:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="7618:9" pos:end="7622:9"><if pos:start="7618:9" pos:end="7622:9">if <condition pos:start="7618:12" pos:end="7618:23">(<expr pos:start="7618:13" pos:end="7618:22"><operator pos:start="7618:13" pos:end="7618:13">!</operator><name pos:start="7618:14" pos:end="7618:22">target_ep</name></expr>)</condition> <block pos:start="7618:25" pos:end="7622:9">{<block_content pos:start="7620:13" pos:end="7620:24">

            <goto pos:start="7620:13" pos:end="7620:24">goto <name pos:start="7620:18" pos:end="7620:23">efault</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="7626:9" pos:end="7626:60"><expr pos:start="7626:9" pos:end="7626:59"><name pos:start="7626:9" pos:end="7626:10">ep</name> <operator pos:start="7626:12" pos:end="7626:12">=</operator> <call pos:start="7626:14" pos:end="7626:59"><name pos:start="7626:14" pos:end="7626:19">alloca</name><argument_list pos:start="7626:20" pos:end="7626:59">(<argument pos:start="7626:21" pos:end="7626:58"><expr pos:start="7626:21" pos:end="7626:58"><name pos:start="7626:21" pos:end="7626:29">maxevents</name> <operator pos:start="7626:31" pos:end="7626:31">*</operator> <sizeof pos:start="7626:33" pos:end="7626:58">sizeof<argument_list pos:start="7626:39" pos:end="7626:58">(<argument pos:start="7626:40" pos:end="7626:57"><expr pos:start="7626:40" pos:end="7626:57">struct <name pos:start="7626:47" pos:end="7626:57">epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="7630:9" pos:end="7692:9">switch <condition pos:start="7630:16" pos:end="7630:20">(<expr pos:start="7630:17" pos:end="7630:19"><name pos:start="7630:17" pos:end="7630:19">num</name></expr>)</condition> <block pos:start="7630:22" pos:end="7692:9">{<block_content pos:start="7634:9" pos:end="7690:33">

<cpp:if pos:start="7632:1" pos:end="7632:34">#<cpp:directive pos:start="7632:2" pos:end="7632:3">if</cpp:directive> <expr pos:start="7632:5" pos:end="7632:34"><call pos:start="7632:5" pos:end="7632:34"><name pos:start="7632:5" pos:end="7632:11">defined</name><argument_list pos:start="7632:12" pos:end="7632:34">(<argument pos:start="7632:13" pos:end="7632:33"><expr pos:start="7632:13" pos:end="7632:33"><name pos:start="7632:13" pos:end="7632:33">IMPLEMENT_EPOLL_PWAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="7634:9" pos:end="7634:35">case <expr pos:start="7634:14" pos:end="7634:34"><name pos:start="7634:14" pos:end="7634:34">TARGET_NR_epoll_pwait</name></expr>:</case>

        <block pos:start="7636:9" pos:end="7679:0">{<block_content pos:start="7638:13" pos:end="7672:18">

            <decl_stmt pos:start="7638:13" pos:end="7638:40"><decl pos:start="7638:13" pos:end="7638:39"><type pos:start="7638:13" pos:end="7638:29"><name pos:start="7638:13" pos:end="7638:27">target_sigset_t</name> <modifier pos:start="7638:29" pos:end="7638:29">*</modifier></type><name pos:start="7638:30" pos:end="7638:39">target_set</name></decl>;</decl_stmt>

            <decl_stmt pos:start="7640:13" pos:end="7640:40"><decl pos:start="7640:13" pos:end="7640:25"><type pos:start="7640:13" pos:end="7640:20"><name pos:start="7640:13" pos:end="7640:20">sigset_t</name></type> <name pos:start="7640:22" pos:end="7640:25">_set</name></decl>, <decl pos:start="7640:28" pos:end="7640:39"><type ref="prev" pos:start="7640:13" pos:end="7640:20"><modifier pos:start="7640:28" pos:end="7640:28">*</modifier></type><name pos:start="7640:29" pos:end="7640:31">set</name> <init pos:start="7640:33" pos:end="7640:39">= <expr pos:start="7640:35" pos:end="7640:39"><operator pos:start="7640:35" pos:end="7640:35">&amp;</operator><name pos:start="7640:36" pos:end="7640:39">_set</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="7644:13" pos:end="7666:13"><if pos:start="7644:13" pos:end="7662:13">if <condition pos:start="7644:16" pos:end="7644:21">(<expr pos:start="7644:17" pos:end="7644:20"><name pos:start="7644:17" pos:end="7644:20">arg5</name></expr>)</condition> <block pos:start="7644:23" pos:end="7662:13">{<block_content pos:start="7646:17" pos:end="7660:49">

                <expr_stmt pos:start="7646:17" pos:end="7648:67"><expr pos:start="7646:17" pos:end="7648:66"><name pos:start="7646:17" pos:end="7646:26">target_set</name> <operator pos:start="7646:28" pos:end="7646:28">=</operator> <call pos:start="7646:30" pos:end="7648:66"><name pos:start="7646:30" pos:end="7646:38">lock_user</name><argument_list pos:start="7646:39" pos:end="7648:66">(<argument pos:start="7646:40" pos:end="7646:50"><expr pos:start="7646:40" pos:end="7646:50"><name pos:start="7646:40" pos:end="7646:50">VERIFY_READ</name></expr></argument>, <argument pos:start="7646:53" pos:end="7646:56"><expr pos:start="7646:53" pos:end="7646:56"><name pos:start="7646:53" pos:end="7646:56">arg5</name></expr></argument>,

                                       <argument pos:start="7648:40" pos:end="7648:62"><expr pos:start="7648:40" pos:end="7648:62"><sizeof pos:start="7648:40" pos:end="7648:62">sizeof<argument_list pos:start="7648:46" pos:end="7648:62">(<argument pos:start="7648:47" pos:end="7648:61"><expr pos:start="7648:47" pos:end="7648:61"><name pos:start="7648:47" pos:end="7648:61">target_sigset_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="7648:65" pos:end="7648:65"><expr pos:start="7648:65" pos:end="7648:65"><literal type="number" pos:start="7648:65" pos:end="7648:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="7650:17" pos:end="7656:17"><if pos:start="7650:17" pos:end="7656:17">if <condition pos:start="7650:20" pos:end="7650:32">(<expr pos:start="7650:21" pos:end="7650:31"><operator pos:start="7650:21" pos:end="7650:21">!</operator><name pos:start="7650:22" pos:end="7650:31">target_set</name></expr>)</condition> <block pos:start="7650:34" pos:end="7656:17">{<block_content pos:start="7652:21" pos:end="7654:32">

                    <expr_stmt pos:start="7652:21" pos:end="7652:52"><expr pos:start="7652:21" pos:end="7652:51"><call pos:start="7652:21" pos:end="7652:51"><name pos:start="7652:21" pos:end="7652:31">unlock_user</name><argument_list pos:start="7652:32" pos:end="7652:51">(<argument pos:start="7652:33" pos:end="7652:41"><expr pos:start="7652:33" pos:end="7652:41"><name pos:start="7652:33" pos:end="7652:41">target_ep</name></expr></argument>, <argument pos:start="7652:44" pos:end="7652:47"><expr pos:start="7652:44" pos:end="7652:47"><name pos:start="7652:44" pos:end="7652:47">arg2</name></expr></argument>, <argument pos:start="7652:50" pos:end="7652:50"><expr pos:start="7652:50" pos:end="7652:50"><literal type="number" pos:start="7652:50" pos:end="7652:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="7654:21" pos:end="7654:32">goto <name pos:start="7654:26" pos:end="7654:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="7658:17" pos:end="7658:55"><expr pos:start="7658:17" pos:end="7658:54"><call pos:start="7658:17" pos:end="7658:54"><name pos:start="7658:17" pos:end="7658:37">target_to_host_sigset</name><argument_list pos:start="7658:38" pos:end="7658:54">(<argument pos:start="7658:39" pos:end="7658:41"><expr pos:start="7658:39" pos:end="7658:41"><name pos:start="7658:39" pos:end="7658:41">set</name></expr></argument>, <argument pos:start="7658:44" pos:end="7658:53"><expr pos:start="7658:44" pos:end="7658:53"><name pos:start="7658:44" pos:end="7658:53">target_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7660:17" pos:end="7660:49"><expr pos:start="7660:17" pos:end="7660:48"><call pos:start="7660:17" pos:end="7660:48"><name pos:start="7660:17" pos:end="7660:27">unlock_user</name><argument_list pos:start="7660:28" pos:end="7660:48">(<argument pos:start="7660:29" pos:end="7660:38"><expr pos:start="7660:29" pos:end="7660:38"><name pos:start="7660:29" pos:end="7660:38">target_set</name></expr></argument>, <argument pos:start="7660:41" pos:end="7660:44"><expr pos:start="7660:41" pos:end="7660:44"><name pos:start="7660:41" pos:end="7660:44">arg5</name></expr></argument>, <argument pos:start="7660:47" pos:end="7660:47"><expr pos:start="7660:47" pos:end="7660:47"><literal type="number" pos:start="7660:47" pos:end="7660:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="7662:15" pos:end="7666:13">else <block pos:start="7662:20" pos:end="7666:13">{<block_content pos:start="7664:17" pos:end="7664:27">

                <expr_stmt pos:start="7664:17" pos:end="7664:27"><expr pos:start="7664:17" pos:end="7664:26"><name pos:start="7664:17" pos:end="7664:19">set</name> <operator pos:start="7664:21" pos:end="7664:21">=</operator> <name pos:start="7664:23" pos:end="7664:26">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="7670:13" pos:end="7670:76"><expr pos:start="7670:13" pos:end="7670:75"><name pos:start="7670:13" pos:end="7670:15">ret</name> <operator pos:start="7670:17" pos:end="7670:17">=</operator> <call pos:start="7670:19" pos:end="7670:75"><name pos:start="7670:19" pos:end="7670:27">get_errno</name><argument_list pos:start="7670:28" pos:end="7670:75">(<argument pos:start="7670:29" pos:end="7670:74"><expr pos:start="7670:29" pos:end="7670:74"><call pos:start="7670:29" pos:end="7670:74"><name pos:start="7670:29" pos:end="7670:39">epoll_pwait</name><argument_list pos:start="7670:40" pos:end="7670:74">(<argument pos:start="7670:41" pos:end="7670:44"><expr pos:start="7670:41" pos:end="7670:44"><name pos:start="7670:41" pos:end="7670:44">epfd</name></expr></argument>, <argument pos:start="7670:47" pos:end="7670:48"><expr pos:start="7670:47" pos:end="7670:48"><name pos:start="7670:47" pos:end="7670:48">ep</name></expr></argument>, <argument pos:start="7670:51" pos:end="7670:59"><expr pos:start="7670:51" pos:end="7670:59"><name pos:start="7670:51" pos:end="7670:59">maxevents</name></expr></argument>, <argument pos:start="7670:62" pos:end="7670:68"><expr pos:start="7670:62" pos:end="7670:68"><name pos:start="7670:62" pos:end="7670:68">timeout</name></expr></argument>, <argument pos:start="7670:71" pos:end="7670:73"><expr pos:start="7670:71" pos:end="7670:73"><name pos:start="7670:71" pos:end="7670:73">set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7672:13" pos:end="7672:18">break;</break>

        </block_content>}</block>

<cpp:endif pos:start="7676:1" pos:end="7676:6">#<cpp:directive pos:start="7676:2" pos:end="7676:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="7678:1" pos:end="7678:33">#<cpp:directive pos:start="7678:2" pos:end="7678:3">if</cpp:directive> <expr pos:start="7678:5" pos:end="7678:33"><call pos:start="7678:5" pos:end="7678:33"><name pos:start="7678:5" pos:end="7678:11">defined</name><argument_list pos:start="7678:12" pos:end="7678:33">(<argument pos:start="7678:13" pos:end="7678:32"><expr pos:start="7678:13" pos:end="7678:32"><name pos:start="7678:13" pos:end="7678:32">TARGET_NR_epoll_wait</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="7680:9" pos:end="7680:34">case <expr pos:start="7680:14" pos:end="7680:33"><name pos:start="7680:14" pos:end="7680:33">TARGET_NR_epoll_wait</name></expr>:</case>

            <expr_stmt pos:start="7682:13" pos:end="7682:70"><expr pos:start="7682:13" pos:end="7682:69"><name pos:start="7682:13" pos:end="7682:15">ret</name> <operator pos:start="7682:17" pos:end="7682:17">=</operator> <call pos:start="7682:19" pos:end="7682:69"><name pos:start="7682:19" pos:end="7682:27">get_errno</name><argument_list pos:start="7682:28" pos:end="7682:69">(<argument pos:start="7682:29" pos:end="7682:68"><expr pos:start="7682:29" pos:end="7682:68"><call pos:start="7682:29" pos:end="7682:68"><name pos:start="7682:29" pos:end="7682:38">epoll_wait</name><argument_list pos:start="7682:39" pos:end="7682:68">(<argument pos:start="7682:40" pos:end="7682:43"><expr pos:start="7682:40" pos:end="7682:43"><name pos:start="7682:40" pos:end="7682:43">epfd</name></expr></argument>, <argument pos:start="7682:46" pos:end="7682:47"><expr pos:start="7682:46" pos:end="7682:47"><name pos:start="7682:46" pos:end="7682:47">ep</name></expr></argument>, <argument pos:start="7682:50" pos:end="7682:58"><expr pos:start="7682:50" pos:end="7682:58"><name pos:start="7682:50" pos:end="7682:58">maxevents</name></expr></argument>, <argument pos:start="7682:61" pos:end="7682:67"><expr pos:start="7682:61" pos:end="7682:67"><name pos:start="7682:61" pos:end="7682:67">timeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="7684:13" pos:end="7687:0">break;</break>

<cpp:endif pos:start="7686:1" pos:end="7686:6">#<cpp:directive pos:start="7686:2" pos:end="7686:6">endif</cpp:directive></cpp:endif>

        <default pos:start="7688:9" pos:end="7688:16">default:</default>

            <expr_stmt pos:start="7690:13" pos:end="7690:33"><expr pos:start="7690:13" pos:end="7690:32"><name pos:start="7690:13" pos:end="7690:15">ret</name> <operator pos:start="7690:17" pos:end="7690:17">=</operator> <operator pos:start="7690:19" pos:end="7690:19">-</operator><name pos:start="7690:20" pos:end="7690:32">TARGET_ENOSYS</name></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <if_stmt pos:start="7694:9" pos:end="7706:9"><if pos:start="7694:9" pos:end="7706:9">if <condition pos:start="7694:12" pos:end="7694:27">(<expr pos:start="7694:13" pos:end="7694:26"><operator pos:start="7694:13" pos:end="7694:13">!</operator><call pos:start="7694:14" pos:end="7694:26"><name pos:start="7694:14" pos:end="7694:21">is_error</name><argument_list pos:start="7694:22" pos:end="7694:26">(<argument pos:start="7694:23" pos:end="7694:25"><expr pos:start="7694:23" pos:end="7694:25"><name pos:start="7694:23" pos:end="7694:25">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7694:29" pos:end="7706:9">{<block_content pos:start="7696:13" pos:end="7704:13">

            <decl_stmt pos:start="7696:13" pos:end="7696:18"><decl pos:start="7696:13" pos:end="7696:17"><type pos:start="7696:13" pos:end="7696:15"><name pos:start="7696:13" pos:end="7696:15">int</name></type> <name pos:start="7696:17" pos:end="7696:17">i</name></decl>;</decl_stmt>

            <for pos:start="7698:13" pos:end="7704:13">for <control pos:start="7698:17" pos:end="7698:37">(<init pos:start="7698:18" pos:end="7698:23"><expr pos:start="7698:18" pos:end="7698:22"><name pos:start="7698:18" pos:end="7698:18">i</name> <operator pos:start="7698:20" pos:end="7698:20">=</operator> <literal type="number" pos:start="7698:22" pos:end="7698:22">0</literal></expr>;</init> <condition pos:start="7698:25" pos:end="7698:32"><expr pos:start="7698:25" pos:end="7698:31"><name pos:start="7698:25" pos:end="7698:25">i</name> <operator pos:start="7698:27" pos:end="7698:27">&lt;</operator> <name pos:start="7698:29" pos:end="7698:31">ret</name></expr>;</condition> <incr pos:start="7698:34" pos:end="7698:36"><expr pos:start="7698:34" pos:end="7698:36"><name pos:start="7698:34" pos:end="7698:34">i</name><operator pos:start="7698:35" pos:end="7698:36">++</operator></expr></incr>)</control> <block pos:start="7698:39" pos:end="7704:13">{<block_content pos:start="7700:17" pos:end="7702:64">

                <expr_stmt pos:start="7700:17" pos:end="7700:60"><expr pos:start="7700:17" pos:end="7700:59"><name pos:start="7700:17" pos:end="7700:28"><name pos:start="7700:17" pos:end="7700:25">target_ep</name><index pos:start="7700:26" pos:end="7700:28">[<expr pos:start="7700:27" pos:end="7700:27"><name pos:start="7700:27" pos:end="7700:27">i</name></expr>]</index></name><operator pos:start="7700:29" pos:end="7700:29">.</operator><name pos:start="7700:30" pos:end="7700:35">events</name> <operator pos:start="7700:37" pos:end="7700:37">=</operator> <call pos:start="7700:39" pos:end="7700:59"><name pos:start="7700:39" pos:end="7700:45">tswap32</name><argument_list pos:start="7700:46" pos:end="7700:59">(<argument pos:start="7700:47" pos:end="7700:58"><expr pos:start="7700:47" pos:end="7700:58"><name pos:start="7700:47" pos:end="7700:51"><name pos:start="7700:47" pos:end="7700:48">ep</name><index pos:start="7700:49" pos:end="7700:51">[<expr pos:start="7700:50" pos:end="7700:50"><name pos:start="7700:50" pos:end="7700:50">i</name></expr>]</index></name><operator pos:start="7700:52" pos:end="7700:52">.</operator><name pos:start="7700:53" pos:end="7700:58">events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7702:17" pos:end="7702:64"><expr pos:start="7702:17" pos:end="7702:63"><name pos:start="7702:17" pos:end="7702:28"><name pos:start="7702:17" pos:end="7702:25">target_ep</name><index pos:start="7702:26" pos:end="7702:28">[<expr pos:start="7702:27" pos:end="7702:27"><name pos:start="7702:27" pos:end="7702:27">i</name></expr>]</index></name><operator pos:start="7702:29" pos:end="7702:29">.</operator><name pos:start="7702:30" pos:end="7702:37"><name pos:start="7702:30" pos:end="7702:33">data</name><operator pos:start="7702:34" pos:end="7702:34">.</operator><name pos:start="7702:35" pos:end="7702:37">u64</name></name> <operator pos:start="7702:39" pos:end="7702:39">=</operator> <call pos:start="7702:41" pos:end="7702:63"><name pos:start="7702:41" pos:end="7702:47">tswap64</name><argument_list pos:start="7702:48" pos:end="7702:63">(<argument pos:start="7702:49" pos:end="7702:62"><expr pos:start="7702:49" pos:end="7702:62"><name pos:start="7702:49" pos:end="7702:53"><name pos:start="7702:49" pos:end="7702:50">ep</name><index pos:start="7702:51" pos:end="7702:53">[<expr pos:start="7702:52" pos:end="7702:52"><name pos:start="7702:52" pos:end="7702:52">i</name></expr>]</index></name><operator pos:start="7702:54" pos:end="7702:54">.</operator><name pos:start="7702:55" pos:end="7702:62"><name pos:start="7702:55" pos:end="7702:58">data</name><operator pos:start="7702:59" pos:end="7702:59">.</operator><name pos:start="7702:60" pos:end="7702:62">u64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="7708:9" pos:end="7708:78"><expr pos:start="7708:9" pos:end="7708:77"><call pos:start="7708:9" pos:end="7708:77"><name pos:start="7708:9" pos:end="7708:19">unlock_user</name><argument_list pos:start="7708:20" pos:end="7708:77">(<argument pos:start="7708:21" pos:end="7708:29"><expr pos:start="7708:21" pos:end="7708:29"><name pos:start="7708:21" pos:end="7708:29">target_ep</name></expr></argument>, <argument pos:start="7708:32" pos:end="7708:35"><expr pos:start="7708:32" pos:end="7708:35"><name pos:start="7708:32" pos:end="7708:35">arg2</name></expr></argument>, <argument pos:start="7708:38" pos:end="7708:76"><expr pos:start="7708:38" pos:end="7708:76"><name pos:start="7708:38" pos:end="7708:40">ret</name> <operator pos:start="7708:42" pos:end="7708:42">*</operator> <sizeof pos:start="7708:44" pos:end="7708:76">sizeof<argument_list pos:start="7708:50" pos:end="7708:76">(<argument pos:start="7708:51" pos:end="7708:75"><expr pos:start="7708:51" pos:end="7708:75">struct <name pos:start="7708:58" pos:end="7708:75">target_epoll_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="7710:9" pos:end="7710:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7714:1" pos:end="7714:6">#<cpp:directive pos:start="7714:2" pos:end="7714:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="7716:1" pos:end="7716:6">#<cpp:directive pos:start="7716:2" pos:end="7716:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="7718:1" pos:end="7718:26">#<cpp:directive pos:start="7718:2" pos:end="7718:6">ifdef</cpp:directive> <name pos:start="7718:8" pos:end="7718:26">TARGET_NR_prlimit64</name></cpp:ifdef>

    <case pos:start="7720:5" pos:end="7720:29">case <expr pos:start="7720:10" pos:end="7720:28"><name pos:start="7720:10" pos:end="7720:28">TARGET_NR_prlimit64</name></expr>:</case>

    <block pos:start="7722:5" pos:end="7775:0">{<block_content pos:start="7726:9" pos:end="7768:14">

        <comment type="block" pos:start="7724:9" pos:end="7724:78">/* args: pid, resource number, ptr to new rlimit, ptr to old rlimit */</comment>

        <decl_stmt pos:start="7726:9" pos:end="7726:58"><decl pos:start="7726:9" pos:end="7726:43"><type pos:start="7726:9" pos:end="7726:32"><name pos:start="7726:9" pos:end="7726:30"><name pos:start="7726:9" pos:end="7726:14">struct</name> <name pos:start="7726:16" pos:end="7726:30">target_rlimit64</name></name> <modifier pos:start="7726:32" pos:end="7726:32">*</modifier></type><name pos:start="7726:33" pos:end="7726:43">target_rnew</name></decl>, <decl pos:start="7726:46" pos:end="7726:57"><type ref="prev" pos:start="7726:9" pos:end="7726:32"><modifier pos:start="7726:46" pos:end="7726:46">*</modifier></type><name pos:start="7726:47" pos:end="7726:57">target_rold</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7728:9" pos:end="7728:52"><decl pos:start="7728:9" pos:end="7728:33"><type pos:start="7728:9" pos:end="7728:28"><name pos:start="7728:9" pos:end="7728:28"><name pos:start="7728:9" pos:end="7728:14">struct</name> <name pos:start="7728:16" pos:end="7728:28">host_rlimit64</name></name></type> <name pos:start="7728:30" pos:end="7728:33">rnew</name></decl>, <decl pos:start="7728:36" pos:end="7728:39"><type ref="prev" pos:start="7728:9" pos:end="7728:28"/><name pos:start="7728:36" pos:end="7728:39">rold</name></decl>, <decl pos:start="7728:42" pos:end="7728:51"><type ref="prev" pos:start="7728:9" pos:end="7728:28"><modifier pos:start="7728:42" pos:end="7728:42">*</modifier></type><name pos:start="7728:43" pos:end="7728:47">rnewp</name> <init pos:start="7728:49" pos:end="7728:51">= <expr pos:start="7728:51" pos:end="7728:51"><literal type="number" pos:start="7728:51" pos:end="7728:51">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="7730:9" pos:end="7746:9"><if pos:start="7730:9" pos:end="7746:9">if <condition pos:start="7730:12" pos:end="7730:17">(<expr pos:start="7730:13" pos:end="7730:16"><name pos:start="7730:13" pos:end="7730:16">arg3</name></expr>)</condition> <block pos:start="7730:19" pos:end="7746:9">{<block_content pos:start="7732:13" pos:end="7744:26">

            <if_stmt pos:start="7732:13" pos:end="7736:13"><if pos:start="7732:13" pos:end="7736:13">if <condition pos:start="7732:16" pos:end="7732:69">(<expr pos:start="7732:17" pos:end="7732:68"><operator pos:start="7732:17" pos:end="7732:17">!</operator><call pos:start="7732:18" pos:end="7732:68"><name pos:start="7732:18" pos:end="7732:33">lock_user_struct</name><argument_list pos:start="7732:34" pos:end="7732:68">(<argument pos:start="7732:35" pos:end="7732:45"><expr pos:start="7732:35" pos:end="7732:45"><name pos:start="7732:35" pos:end="7732:45">VERIFY_READ</name></expr></argument>, <argument pos:start="7732:48" pos:end="7732:58"><expr pos:start="7732:48" pos:end="7732:58"><name pos:start="7732:48" pos:end="7732:58">target_rnew</name></expr></argument>, <argument pos:start="7732:61" pos:end="7732:64"><expr pos:start="7732:61" pos:end="7732:64"><name pos:start="7732:61" pos:end="7732:64">arg3</name></expr></argument>, <argument pos:start="7732:67" pos:end="7732:67"><expr pos:start="7732:67" pos:end="7732:67"><literal type="number" pos:start="7732:67" pos:end="7732:67">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7732:71" pos:end="7736:13">{<block_content pos:start="7734:17" pos:end="7734:28">

                <goto pos:start="7734:17" pos:end="7734:28">goto <name pos:start="7734:22" pos:end="7734:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7738:13" pos:end="7738:59"><expr pos:start="7738:13" pos:end="7738:58"><name pos:start="7738:13" pos:end="7738:25"><name pos:start="7738:13" pos:end="7738:16">rnew</name><operator pos:start="7738:17" pos:end="7738:17">.</operator><name pos:start="7738:18" pos:end="7738:25">rlim_cur</name></name> <operator pos:start="7738:27" pos:end="7738:27">=</operator> <call pos:start="7738:29" pos:end="7738:58"><name pos:start="7738:29" pos:end="7738:35">tswap64</name><argument_list pos:start="7738:36" pos:end="7738:58">(<argument pos:start="7738:37" pos:end="7738:57"><expr pos:start="7738:37" pos:end="7738:57"><name pos:start="7738:37" pos:end="7738:57"><name pos:start="7738:37" pos:end="7738:47">target_rnew</name><operator pos:start="7738:48" pos:end="7738:49">-&gt;</operator><name pos:start="7738:50" pos:end="7738:57">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7740:13" pos:end="7740:59"><expr pos:start="7740:13" pos:end="7740:58"><name pos:start="7740:13" pos:end="7740:25"><name pos:start="7740:13" pos:end="7740:16">rnew</name><operator pos:start="7740:17" pos:end="7740:17">.</operator><name pos:start="7740:18" pos:end="7740:25">rlim_max</name></name> <operator pos:start="7740:27" pos:end="7740:27">=</operator> <call pos:start="7740:29" pos:end="7740:58"><name pos:start="7740:29" pos:end="7740:35">tswap64</name><argument_list pos:start="7740:36" pos:end="7740:58">(<argument pos:start="7740:37" pos:end="7740:57"><expr pos:start="7740:37" pos:end="7740:57"><name pos:start="7740:37" pos:end="7740:57"><name pos:start="7740:37" pos:end="7740:47">target_rnew</name><operator pos:start="7740:48" pos:end="7740:49">-&gt;</operator><name pos:start="7740:50" pos:end="7740:57">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7742:13" pos:end="7742:53"><expr pos:start="7742:13" pos:end="7742:52"><call pos:start="7742:13" pos:end="7742:52"><name pos:start="7742:13" pos:end="7742:30">unlock_user_struct</name><argument_list pos:start="7742:31" pos:end="7742:52">(<argument pos:start="7742:32" pos:end="7742:42"><expr pos:start="7742:32" pos:end="7742:42"><name pos:start="7742:32" pos:end="7742:42">target_rnew</name></expr></argument>, <argument pos:start="7742:45" pos:end="7742:48"><expr pos:start="7742:45" pos:end="7742:48"><name pos:start="7742:45" pos:end="7742:48">arg3</name></expr></argument>, <argument pos:start="7742:51" pos:end="7742:51"><expr pos:start="7742:51" pos:end="7742:51"><literal type="number" pos:start="7742:51" pos:end="7742:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7744:13" pos:end="7744:26"><expr pos:start="7744:13" pos:end="7744:25"><name pos:start="7744:13" pos:end="7744:17">rnewp</name> <operator pos:start="7744:19" pos:end="7744:19">=</operator> <operator pos:start="7744:21" pos:end="7744:21">&amp;</operator><name pos:start="7744:22" pos:end="7744:25">rnew</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="7750:9" pos:end="7750:76"><expr pos:start="7750:9" pos:end="7750:75"><name pos:start="7750:9" pos:end="7750:11">ret</name> <operator pos:start="7750:13" pos:end="7750:13">=</operator> <call pos:start="7750:15" pos:end="7750:75"><name pos:start="7750:15" pos:end="7750:23">get_errno</name><argument_list pos:start="7750:24" pos:end="7750:75">(<argument pos:start="7750:25" pos:end="7750:74"><expr pos:start="7750:25" pos:end="7750:74"><call pos:start="7750:25" pos:end="7750:74"><name pos:start="7750:25" pos:end="7750:37">sys_prlimit64</name><argument_list pos:start="7750:38" pos:end="7750:74">(<argument pos:start="7750:39" pos:end="7750:42"><expr pos:start="7750:39" pos:end="7750:42"><name pos:start="7750:39" pos:end="7750:42">arg1</name></expr></argument>, <argument pos:start="7750:45" pos:end="7750:48"><expr pos:start="7750:45" pos:end="7750:48"><name pos:start="7750:45" pos:end="7750:48">arg2</name></expr></argument>, <argument pos:start="7750:51" pos:end="7750:55"><expr pos:start="7750:51" pos:end="7750:55"><name pos:start="7750:51" pos:end="7750:55">rnewp</name></expr></argument>, <argument pos:start="7750:58" pos:end="7750:73"><expr pos:start="7750:58" pos:end="7750:73"><ternary pos:start="7750:58" pos:end="7750:73"><condition pos:start="7750:58" pos:end="7750:63"><expr pos:start="7750:58" pos:end="7750:61"><name pos:start="7750:58" pos:end="7750:61">arg4</name></expr> ?</condition><then pos:start="7750:65" pos:end="7750:69"> <expr pos:start="7750:65" pos:end="7750:69"><operator pos:start="7750:65" pos:end="7750:65">&amp;</operator><name pos:start="7750:66" pos:end="7750:69">rold</name></expr> </then><else pos:start="7750:71" pos:end="7750:73">: <expr pos:start="7750:73" pos:end="7750:73"><literal type="number" pos:start="7750:73" pos:end="7750:73">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="7752:9" pos:end="7766:9"><if pos:start="7752:9" pos:end="7766:9">if <condition pos:start="7752:12" pos:end="7752:35">(<expr pos:start="7752:13" pos:end="7752:34"><operator pos:start="7752:13" pos:end="7752:13">!</operator><call pos:start="7752:14" pos:end="7752:26"><name pos:start="7752:14" pos:end="7752:21">is_error</name><argument_list pos:start="7752:22" pos:end="7752:26">(<argument pos:start="7752:23" pos:end="7752:25"><expr pos:start="7752:23" pos:end="7752:25"><name pos:start="7752:23" pos:end="7752:25">ret</name></expr></argument>)</argument_list></call> <operator pos:start="7752:28" pos:end="7752:29">&amp;&amp;</operator> <name pos:start="7752:31" pos:end="7752:34">arg4</name></expr>)</condition> <block pos:start="7752:37" pos:end="7766:9">{<block_content pos:start="7754:13" pos:end="7764:53">

            <if_stmt pos:start="7754:13" pos:end="7758:13"><if pos:start="7754:13" pos:end="7758:13">if <condition pos:start="7754:16" pos:end="7754:70">(<expr pos:start="7754:17" pos:end="7754:69"><operator pos:start="7754:17" pos:end="7754:17">!</operator><call pos:start="7754:18" pos:end="7754:69"><name pos:start="7754:18" pos:end="7754:33">lock_user_struct</name><argument_list pos:start="7754:34" pos:end="7754:69">(<argument pos:start="7754:35" pos:end="7754:46"><expr pos:start="7754:35" pos:end="7754:46"><name pos:start="7754:35" pos:end="7754:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="7754:49" pos:end="7754:59"><expr pos:start="7754:49" pos:end="7754:59"><name pos:start="7754:49" pos:end="7754:59">target_rold</name></expr></argument>, <argument pos:start="7754:62" pos:end="7754:65"><expr pos:start="7754:62" pos:end="7754:65"><name pos:start="7754:62" pos:end="7754:65">arg4</name></expr></argument>, <argument pos:start="7754:68" pos:end="7754:68"><expr pos:start="7754:68" pos:end="7754:68"><literal type="number" pos:start="7754:68" pos:end="7754:68">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7754:72" pos:end="7758:13">{<block_content pos:start="7756:17" pos:end="7756:28">

                <goto pos:start="7756:17" pos:end="7756:28">goto <name pos:start="7756:22" pos:end="7756:27">efault</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="7760:13" pos:end="7760:59"><expr pos:start="7760:13" pos:end="7760:58"><name pos:start="7760:13" pos:end="7760:33"><name pos:start="7760:13" pos:end="7760:23">target_rold</name><operator pos:start="7760:24" pos:end="7760:25">-&gt;</operator><name pos:start="7760:26" pos:end="7760:33">rlim_cur</name></name> <operator pos:start="7760:35" pos:end="7760:35">=</operator> <call pos:start="7760:37" pos:end="7760:58"><name pos:start="7760:37" pos:end="7760:43">tswap64</name><argument_list pos:start="7760:44" pos:end="7760:58">(<argument pos:start="7760:45" pos:end="7760:57"><expr pos:start="7760:45" pos:end="7760:57"><name pos:start="7760:45" pos:end="7760:57"><name pos:start="7760:45" pos:end="7760:48">rold</name><operator pos:start="7760:49" pos:end="7760:49">.</operator><name pos:start="7760:50" pos:end="7760:57">rlim_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7762:13" pos:end="7762:59"><expr pos:start="7762:13" pos:end="7762:58"><name pos:start="7762:13" pos:end="7762:33"><name pos:start="7762:13" pos:end="7762:23">target_rold</name><operator pos:start="7762:24" pos:end="7762:25">-&gt;</operator><name pos:start="7762:26" pos:end="7762:33">rlim_max</name></name> <operator pos:start="7762:35" pos:end="7762:35">=</operator> <call pos:start="7762:37" pos:end="7762:58"><name pos:start="7762:37" pos:end="7762:43">tswap64</name><argument_list pos:start="7762:44" pos:end="7762:58">(<argument pos:start="7762:45" pos:end="7762:57"><expr pos:start="7762:45" pos:end="7762:57"><name pos:start="7762:45" pos:end="7762:57"><name pos:start="7762:45" pos:end="7762:48">rold</name><operator pos:start="7762:49" pos:end="7762:49">.</operator><name pos:start="7762:50" pos:end="7762:57">rlim_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7764:13" pos:end="7764:53"><expr pos:start="7764:13" pos:end="7764:52"><call pos:start="7764:13" pos:end="7764:52"><name pos:start="7764:13" pos:end="7764:30">unlock_user_struct</name><argument_list pos:start="7764:31" pos:end="7764:52">(<argument pos:start="7764:32" pos:end="7764:42"><expr pos:start="7764:32" pos:end="7764:42"><name pos:start="7764:32" pos:end="7764:42">target_rold</name></expr></argument>, <argument pos:start="7764:45" pos:end="7764:48"><expr pos:start="7764:45" pos:end="7764:48"><name pos:start="7764:45" pos:end="7764:48">arg4</name></expr></argument>, <argument pos:start="7764:51" pos:end="7764:51"><expr pos:start="7764:51" pos:end="7764:51"><literal type="number" pos:start="7764:51" pos:end="7764:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="7768:9" pos:end="7768:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7772:1" pos:end="7772:6">#<cpp:directive pos:start="7772:2" pos:end="7772:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="7774:1" pos:end="7774:28">#<cpp:directive pos:start="7774:2" pos:end="7774:6">ifdef</cpp:directive> <name pos:start="7774:8" pos:end="7774:28">TARGET_NR_gethostname</name></cpp:ifdef>

    <case pos:start="7776:5" pos:end="7776:31">case <expr pos:start="7776:10" pos:end="7776:30"><name pos:start="7776:10" pos:end="7776:30">TARGET_NR_gethostname</name></expr>:</case>

    <block pos:start="7778:5" pos:end="7801:0">{<block_content pos:start="7780:9" pos:end="7794:14">

        <decl_stmt pos:start="7780:9" pos:end="7780:60"><decl pos:start="7780:9" pos:end="7780:59"><type pos:start="7780:9" pos:end="7780:14"><name pos:start="7780:9" pos:end="7780:12">char</name> <modifier pos:start="7780:14" pos:end="7780:14">*</modifier></type><name pos:start="7780:15" pos:end="7780:18">name</name> <init pos:start="7780:20" pos:end="7780:59">= <expr pos:start="7780:22" pos:end="7780:59"><call pos:start="7780:22" pos:end="7780:59"><name pos:start="7780:22" pos:end="7780:30">lock_user</name><argument_list pos:start="7780:31" pos:end="7780:59">(<argument pos:start="7780:32" pos:end="7780:43"><expr pos:start="7780:32" pos:end="7780:43"><name pos:start="7780:32" pos:end="7780:43">VERIFY_WRITE</name></expr></argument>, <argument pos:start="7780:46" pos:end="7780:49"><expr pos:start="7780:46" pos:end="7780:49"><name pos:start="7780:46" pos:end="7780:49">arg1</name></expr></argument>, <argument pos:start="7780:52" pos:end="7780:55"><expr pos:start="7780:52" pos:end="7780:55"><name pos:start="7780:52" pos:end="7780:55">arg2</name></expr></argument>, <argument pos:start="7780:58" pos:end="7780:58"><expr pos:start="7780:58" pos:end="7780:58"><literal type="number" pos:start="7780:58" pos:end="7780:58">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="7782:9" pos:end="7792:9"><if pos:start="7782:9" pos:end="7788:9">if <condition pos:start="7782:12" pos:end="7782:17">(<expr pos:start="7782:13" pos:end="7782:16"><name pos:start="7782:13" pos:end="7782:16">name</name></expr>)</condition> <block pos:start="7782:19" pos:end="7788:9">{<block_content pos:start="7784:13" pos:end="7786:42">

            <expr_stmt pos:start="7784:13" pos:end="7784:53"><expr pos:start="7784:13" pos:end="7784:52"><name pos:start="7784:13" pos:end="7784:15">ret</name> <operator pos:start="7784:17" pos:end="7784:17">=</operator> <call pos:start="7784:19" pos:end="7784:52"><name pos:start="7784:19" pos:end="7784:27">get_errno</name><argument_list pos:start="7784:28" pos:end="7784:52">(<argument pos:start="7784:29" pos:end="7784:51"><expr pos:start="7784:29" pos:end="7784:51"><call pos:start="7784:29" pos:end="7784:51"><name pos:start="7784:29" pos:end="7784:39">gethostname</name><argument_list pos:start="7784:40" pos:end="7784:51">(<argument pos:start="7784:41" pos:end="7784:44"><expr pos:start="7784:41" pos:end="7784:44"><name pos:start="7784:41" pos:end="7784:44">name</name></expr></argument>, <argument pos:start="7784:47" pos:end="7784:50"><expr pos:start="7784:47" pos:end="7784:50"><name pos:start="7784:47" pos:end="7784:50">arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7786:13" pos:end="7786:42"><expr pos:start="7786:13" pos:end="7786:41"><call pos:start="7786:13" pos:end="7786:41"><name pos:start="7786:13" pos:end="7786:23">unlock_user</name><argument_list pos:start="7786:24" pos:end="7786:41">(<argument pos:start="7786:25" pos:end="7786:28"><expr pos:start="7786:25" pos:end="7786:28"><name pos:start="7786:25" pos:end="7786:28">name</name></expr></argument>, <argument pos:start="7786:31" pos:end="7786:34"><expr pos:start="7786:31" pos:end="7786:34"><name pos:start="7786:31" pos:end="7786:34">arg1</name></expr></argument>, <argument pos:start="7786:37" pos:end="7786:40"><expr pos:start="7786:37" pos:end="7786:40"><name pos:start="7786:37" pos:end="7786:40">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="7788:11" pos:end="7792:9">else <block pos:start="7788:16" pos:end="7792:9">{<block_content pos:start="7790:13" pos:end="7790:33">

            <expr_stmt pos:start="7790:13" pos:end="7790:33"><expr pos:start="7790:13" pos:end="7790:32"><name pos:start="7790:13" pos:end="7790:15">ret</name> <operator pos:start="7790:17" pos:end="7790:17">=</operator> <operator pos:start="7790:19" pos:end="7790:19">-</operator><name pos:start="7790:20" pos:end="7790:32">TARGET_EFAULT</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="7794:9" pos:end="7794:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7798:1" pos:end="7798:6">#<cpp:directive pos:start="7798:2" pos:end="7798:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="7800:1" pos:end="7800:34">#<cpp:directive pos:start="7800:2" pos:end="7800:6">ifdef</cpp:directive> <name pos:start="7800:8" pos:end="7800:34">TARGET_NR_atomic_cmpxchg_32</name></cpp:ifdef>

    <case pos:start="7802:5" pos:end="7802:37">case <expr pos:start="7802:10" pos:end="7802:36"><name pos:start="7802:10" pos:end="7802:36">TARGET_NR_atomic_cmpxchg_32</name></expr>:</case>

    <block pos:start="7804:5" pos:end="7843:0">{<block_content pos:start="7808:9" pos:end="7836:14">

        <comment type="block" pos:start="7806:9" pos:end="7806:52">/* should use start_exclusive from main.c */</comment>

        <decl_stmt pos:start="7808:9" pos:end="7808:28"><decl pos:start="7808:9" pos:end="7808:27"><type pos:start="7808:9" pos:end="7808:17"><name pos:start="7808:9" pos:end="7808:17">abi_ulong</name></type> <name pos:start="7808:19" pos:end="7808:27">mem_value</name></decl>;</decl_stmt>

        <if_stmt pos:start="7810:9" pos:end="7828:9"><if pos:start="7810:9" pos:end="7828:9">if <condition pos:start="7810:12" pos:end="7810:42">(<expr pos:start="7810:13" pos:end="7810:41"><call pos:start="7810:13" pos:end="7810:41"><name pos:start="7810:13" pos:end="7810:24">get_user_u32</name><argument_list pos:start="7810:25" pos:end="7810:41">(<argument pos:start="7810:26" pos:end="7810:34"><expr pos:start="7810:26" pos:end="7810:34"><name pos:start="7810:26" pos:end="7810:34">mem_value</name></expr></argument>, <argument pos:start="7810:37" pos:end="7810:40"><expr pos:start="7810:37" pos:end="7810:40"><name pos:start="7810:37" pos:end="7810:40">arg6</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7810:44" pos:end="7828:9">{<block_content pos:start="7812:13" pos:end="7824:29">

            <decl_stmt pos:start="7812:13" pos:end="7812:34"><decl pos:start="7812:13" pos:end="7812:33"><type pos:start="7812:13" pos:end="7812:28"><name pos:start="7812:13" pos:end="7812:28">target_siginfo_t</name></type> <name pos:start="7812:30" pos:end="7812:33">info</name></decl>;</decl_stmt>

            <expr_stmt pos:start="7814:13" pos:end="7814:36"><expr pos:start="7814:13" pos:end="7814:35"><name pos:start="7814:13" pos:end="7814:25"><name pos:start="7814:13" pos:end="7814:16">info</name><operator pos:start="7814:17" pos:end="7814:17">.</operator><name pos:start="7814:18" pos:end="7814:25">si_signo</name></name> <operator pos:start="7814:27" pos:end="7814:27">=</operator> <name pos:start="7814:29" pos:end="7814:35">SIGSEGV</name></expr>;</expr_stmt>

            <expr_stmt pos:start="7816:13" pos:end="7816:30"><expr pos:start="7816:13" pos:end="7816:29"><name pos:start="7816:13" pos:end="7816:25"><name pos:start="7816:13" pos:end="7816:16">info</name><operator pos:start="7816:17" pos:end="7816:17">.</operator><name pos:start="7816:18" pos:end="7816:25">si_errno</name></name> <operator pos:start="7816:27" pos:end="7816:27">=</operator> <literal type="number" pos:start="7816:29" pos:end="7816:29">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="7818:13" pos:end="7818:46"><expr pos:start="7818:13" pos:end="7818:45"><name pos:start="7818:13" pos:end="7818:24"><name pos:start="7818:13" pos:end="7818:16">info</name><operator pos:start="7818:17" pos:end="7818:17">.</operator><name pos:start="7818:18" pos:end="7818:24">si_code</name></name> <operator pos:start="7818:26" pos:end="7818:26">=</operator> <name pos:start="7818:28" pos:end="7818:45">TARGET_SEGV_MAPERR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="7820:13" pos:end="7820:50"><expr pos:start="7820:13" pos:end="7820:49"><name pos:start="7820:13" pos:end="7820:42"><name pos:start="7820:13" pos:end="7820:16">info</name><operator pos:start="7820:17" pos:end="7820:17">.</operator><name pos:start="7820:18" pos:end="7820:26">_sifields</name><operator pos:start="7820:27" pos:end="7820:27">.</operator><name pos:start="7820:28" pos:end="7820:36">_sigfault</name><operator pos:start="7820:37" pos:end="7820:37">.</operator><name pos:start="7820:38" pos:end="7820:42">_addr</name></name> <operator pos:start="7820:44" pos:end="7820:44">=</operator> <name pos:start="7820:46" pos:end="7820:49">arg6</name></expr>;</expr_stmt>

            <expr_stmt pos:start="7822:13" pos:end="7822:72"><expr pos:start="7822:13" pos:end="7822:71"><call pos:start="7822:13" pos:end="7822:71"><name pos:start="7822:13" pos:end="7822:24">queue_signal</name><argument_list pos:start="7822:25" pos:end="7822:71">(<argument pos:start="7822:26" pos:end="7822:48"><expr pos:start="7822:26" pos:end="7822:48"><operator pos:start="7822:26" pos:end="7822:26">(</operator><name pos:start="7822:27" pos:end="7822:38">CPUArchState</name> <operator pos:start="7822:40" pos:end="7822:40">*</operator><operator pos:start="7822:41" pos:end="7822:41">)</operator><name pos:start="7822:42" pos:end="7822:48">cpu_env</name></expr></argument>, <argument pos:start="7822:51" pos:end="7822:63"><expr pos:start="7822:51" pos:end="7822:63"><name pos:start="7822:51" pos:end="7822:63"><name pos:start="7822:51" pos:end="7822:54">info</name><operator pos:start="7822:55" pos:end="7822:55">.</operator><name pos:start="7822:56" pos:end="7822:63">si_signo</name></name></expr></argument>, <argument pos:start="7822:66" pos:end="7822:70"><expr pos:start="7822:66" pos:end="7822:70"><operator pos:start="7822:66" pos:end="7822:66">&amp;</operator><name pos:start="7822:67" pos:end="7822:70">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7824:13" pos:end="7824:29"><expr pos:start="7824:13" pos:end="7824:28"><name pos:start="7824:13" pos:end="7824:15">ret</name> <operator pos:start="7824:17" pos:end="7824:17">=</operator> <literal type="number" pos:start="7824:19" pos:end="7824:28">0xdeadbeef</literal></expr>;</expr_stmt>



        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="7830:9" pos:end="7832:37"><if pos:start="7830:9" pos:end="7832:37">if <condition pos:start="7830:12" pos:end="7830:30">(<expr pos:start="7830:13" pos:end="7830:29"><name pos:start="7830:13" pos:end="7830:21">mem_value</name> <operator pos:start="7830:23" pos:end="7830:24">==</operator> <name pos:start="7830:26" pos:end="7830:29">arg2</name></expr>)</condition><block type="pseudo" pos:start="7832:13" pos:end="7832:37"><block_content pos:start="7832:13" pos:end="7832:37">

            <expr_stmt pos:start="7832:13" pos:end="7832:37"><expr pos:start="7832:13" pos:end="7832:36"><call pos:start="7832:13" pos:end="7832:36"><name pos:start="7832:13" pos:end="7832:24">put_user_u32</name><argument_list pos:start="7832:25" pos:end="7832:36">(<argument pos:start="7832:26" pos:end="7832:29"><expr pos:start="7832:26" pos:end="7832:29"><name pos:start="7832:26" pos:end="7832:29">arg1</name></expr></argument>, <argument pos:start="7832:32" pos:end="7832:35"><expr pos:start="7832:32" pos:end="7832:35"><name pos:start="7832:32" pos:end="7832:35">arg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="7834:9" pos:end="7834:24"><expr pos:start="7834:9" pos:end="7834:23"><name pos:start="7834:9" pos:end="7834:11">ret</name> <operator pos:start="7834:13" pos:end="7834:13">=</operator> <name pos:start="7834:15" pos:end="7834:23">mem_value</name></expr>;</expr_stmt>

        <break pos:start="7836:9" pos:end="7836:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7840:1" pos:end="7840:6">#<cpp:directive pos:start="7840:2" pos:end="7840:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="7842:1" pos:end="7842:31">#<cpp:directive pos:start="7842:2" pos:end="7842:6">ifdef</cpp:directive> <name pos:start="7842:8" pos:end="7842:31">TARGET_NR_atomic_barrier</name></cpp:ifdef>

    <case pos:start="7844:5" pos:end="7844:34">case <expr pos:start="7844:10" pos:end="7844:33"><name pos:start="7844:10" pos:end="7844:33">TARGET_NR_atomic_barrier</name></expr>:</case>

    <block pos:start="7846:5" pos:end="7860:0">{<block_content pos:start="7851:9" pos:end="7851:14">

        <comment type="block" pos:start="7848:9" pos:end="7848:82">/* Like the kernel implementation and the qemu arm barrier, no-op this? */</comment>


        <break pos:start="7851:9" pos:end="7851:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7855:1" pos:end="7855:6">#<cpp:directive pos:start="7855:2" pos:end="7855:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="7859:1" pos:end="7859:29">#<cpp:directive pos:start="7859:2" pos:end="7859:6">ifdef</cpp:directive> <name pos:start="7859:8" pos:end="7859:29">TARGET_NR_timer_create</name></cpp:ifdef>

    <case pos:start="7861:5" pos:end="7861:32">case <expr pos:start="7861:10" pos:end="7861:31"><name pos:start="7861:10" pos:end="7861:31">TARGET_NR_timer_create</name></expr>:</case>

    <block pos:start="7863:5" pos:end="7946:0">{<block_content pos:start="7869:9" pos:end="7937:14">

        <comment type="block" pos:start="7865:9" pos:end="7865:78">/* args: clockid_t clockid, struct sigevent *sevp, timer_t *timerid */</comment>



        <decl_stmt pos:start="7869:9" pos:end="7869:65"><decl pos:start="7869:9" pos:end="7869:44"><type pos:start="7869:9" pos:end="7869:23"><name pos:start="7869:9" pos:end="7869:23"><name pos:start="7869:9" pos:end="7869:14">struct</name> <name pos:start="7869:16" pos:end="7869:23">sigevent</name></name></type> <name pos:start="7869:25" pos:end="7869:33">host_sevp</name> <init pos:start="7869:35" pos:end="7869:44">= <expr pos:start="7869:37" pos:end="7869:44"><block pos:start="7869:37" pos:end="7869:44">{ <expr pos:start="7869:39" pos:end="7869:41"><block pos:start="7869:39" pos:end="7869:41">{<expr pos:start="7869:40" pos:end="7869:40"><literal type="number" pos:start="7869:40" pos:end="7869:40">0</literal></expr>}</block></expr>, }</block></expr></init></decl>, <decl pos:start="7869:47" pos:end="7869:64"><type ref="prev" pos:start="7869:9" pos:end="7869:23"><modifier pos:start="7869:47" pos:end="7869:47">*</modifier></type><name pos:start="7869:48" pos:end="7869:57">phost_sevp</name> <init pos:start="7869:59" pos:end="7869:64">= <expr pos:start="7869:61" pos:end="7869:64"><name pos:start="7869:61" pos:end="7869:64">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="7871:9" pos:end="7871:45"><decl pos:start="7871:9" pos:end="7871:44"><type pos:start="7871:9" pos:end="7871:32"><name pos:start="7871:9" pos:end="7871:30"><name pos:start="7871:9" pos:end="7871:14">struct</name> <name pos:start="7871:16" pos:end="7871:30">target_sigevent</name></name> <modifier pos:start="7871:32" pos:end="7871:32">*</modifier></type><name pos:start="7871:33" pos:end="7871:44">ptarget_sevp</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7873:9" pos:end="7873:45"><decl pos:start="7873:9" pos:end="7873:44"><type pos:start="7873:9" pos:end="7873:31"><name pos:start="7873:9" pos:end="7873:29"><name pos:start="7873:9" pos:end="7873:14">struct</name> <name pos:start="7873:16" pos:end="7873:29">target_timer_t</name></name> <modifier pos:start="7873:31" pos:end="7873:31">*</modifier></type><name pos:start="7873:32" pos:end="7873:44">ptarget_timer</name></decl>;</decl_stmt>



        <decl_stmt pos:start="7877:9" pos:end="7877:25"><decl pos:start="7877:9" pos:end="7877:24"><type pos:start="7877:9" pos:end="7877:11"><name pos:start="7877:9" pos:end="7877:11">int</name></type> <name pos:start="7877:13" pos:end="7877:17">clkid</name> <init pos:start="7877:19" pos:end="7877:24">= <expr pos:start="7877:21" pos:end="7877:24"><name pos:start="7877:21" pos:end="7877:24">arg1</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="7879:9" pos:end="7879:49"><decl pos:start="7879:9" pos:end="7879:48"><type pos:start="7879:9" pos:end="7879:11"><name pos:start="7879:9" pos:end="7879:11">int</name></type> <name pos:start="7879:13" pos:end="7879:23">timer_index</name> <init pos:start="7879:25" pos:end="7879:48">= <expr pos:start="7879:27" pos:end="7879:48"><call pos:start="7879:27" pos:end="7879:48"><name pos:start="7879:27" pos:end="7879:46">next_free_host_timer</name><argument_list pos:start="7879:47" pos:end="7879:48">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="7883:9" pos:end="7935:9"><if pos:start="7883:9" pos:end="7887:9">if <condition pos:start="7883:12" pos:end="7883:28">(<expr pos:start="7883:13" pos:end="7883:27"><name pos:start="7883:13" pos:end="7883:23">timer_index</name> <operator pos:start="7883:25" pos:end="7883:25">&lt;</operator> <literal type="number" pos:start="7883:27" pos:end="7883:27">0</literal></expr>)</condition> <block pos:start="7883:30" pos:end="7887:9">{<block_content pos:start="7885:13" pos:end="7885:33">

            <expr_stmt pos:start="7885:13" pos:end="7885:33"><expr pos:start="7885:13" pos:end="7885:32"><name pos:start="7885:13" pos:end="7885:15">ret</name> <operator pos:start="7885:17" pos:end="7885:17">=</operator> <operator pos:start="7885:19" pos:end="7885:19">-</operator><name pos:start="7885:20" pos:end="7885:32">TARGET_EAGAIN</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="7887:11" pos:end="7935:9">else <block pos:start="7887:16" pos:end="7935:9">{<block_content pos:start="7889:13" pos:end="7933:13">

            <decl_stmt pos:start="7889:13" pos:end="7889:61"><decl pos:start="7889:13" pos:end="7889:60"><type pos:start="7889:13" pos:end="7889:21"><name pos:start="7889:13" pos:end="7889:19">timer_t</name> <modifier pos:start="7889:21" pos:end="7889:21">*</modifier></type><name pos:start="7889:22" pos:end="7889:28">phtimer</name> <init pos:start="7889:30" pos:end="7889:60">= <expr pos:start="7889:32" pos:end="7889:60"><name pos:start="7889:32" pos:end="7889:45">g_posix_timers</name>  <operator pos:start="7889:48" pos:end="7889:48">+</operator> <name pos:start="7889:50" pos:end="7889:60">timer_index</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="7893:13" pos:end="7911:13"><if pos:start="7893:13" pos:end="7911:13">if <condition pos:start="7893:16" pos:end="7893:21">(<expr pos:start="7893:17" pos:end="7893:20"><name pos:start="7893:17" pos:end="7893:20">arg2</name></expr>)</condition> <block pos:start="7893:23" pos:end="7911:13">{<block_content pos:start="7895:17" pos:end="7909:40">

                <if_stmt pos:start="7895:17" pos:end="7899:17"><if pos:start="7895:17" pos:end="7899:17">if <condition pos:start="7895:20" pos:end="7895:74">(<expr pos:start="7895:21" pos:end="7895:73"><operator pos:start="7895:21" pos:end="7895:21">!</operator><call pos:start="7895:22" pos:end="7895:73"><name pos:start="7895:22" pos:end="7895:37">lock_user_struct</name><argument_list pos:start="7895:38" pos:end="7895:73">(<argument pos:start="7895:39" pos:end="7895:49"><expr pos:start="7895:39" pos:end="7895:49"><name pos:start="7895:39" pos:end="7895:49">VERIFY_READ</name></expr></argument>, <argument pos:start="7895:52" pos:end="7895:63"><expr pos:start="7895:52" pos:end="7895:63"><name pos:start="7895:52" pos:end="7895:63">ptarget_sevp</name></expr></argument>, <argument pos:start="7895:66" pos:end="7895:69"><expr pos:start="7895:66" pos:end="7895:69"><name pos:start="7895:66" pos:end="7895:69">arg2</name></expr></argument>, <argument pos:start="7895:72" pos:end="7895:72"><expr pos:start="7895:72" pos:end="7895:72"><literal type="number" pos:start="7895:72" pos:end="7895:72">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7895:76" pos:end="7899:17">{<block_content pos:start="7897:21" pos:end="7897:32">

                    <goto pos:start="7897:21" pos:end="7897:32">goto <name pos:start="7897:26" pos:end="7897:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="7903:17" pos:end="7903:75"><expr pos:start="7903:17" pos:end="7903:74"><name pos:start="7903:17" pos:end="7903:37"><name pos:start="7903:17" pos:end="7903:25">host_sevp</name><operator pos:start="7903:26" pos:end="7903:26">.</operator><name pos:start="7903:27" pos:end="7903:37">sigev_signo</name></name> <operator pos:start="7903:39" pos:end="7903:39">=</operator> <call pos:start="7903:41" pos:end="7903:74"><name pos:start="7903:41" pos:end="7903:47">tswap32</name><argument_list pos:start="7903:48" pos:end="7903:74">(<argument pos:start="7903:49" pos:end="7903:73"><expr pos:start="7903:49" pos:end="7903:73"><name pos:start="7903:49" pos:end="7903:73"><name pos:start="7903:49" pos:end="7903:60">ptarget_sevp</name><operator pos:start="7903:61" pos:end="7903:62">-&gt;</operator><name pos:start="7903:63" pos:end="7903:73">sigev_signo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7905:17" pos:end="7905:77"><expr pos:start="7905:17" pos:end="7905:76"><name pos:start="7905:17" pos:end="7905:38"><name pos:start="7905:17" pos:end="7905:25">host_sevp</name><operator pos:start="7905:26" pos:end="7905:26">.</operator><name pos:start="7905:27" pos:end="7905:38">sigev_notify</name></name> <operator pos:start="7905:40" pos:end="7905:40">=</operator> <call pos:start="7905:42" pos:end="7905:76"><name pos:start="7905:42" pos:end="7905:48">tswap32</name><argument_list pos:start="7905:49" pos:end="7905:76">(<argument pos:start="7905:50" pos:end="7905:75"><expr pos:start="7905:50" pos:end="7905:75"><name pos:start="7905:50" pos:end="7905:75"><name pos:start="7905:50" pos:end="7905:61">ptarget_sevp</name><operator pos:start="7905:62" pos:end="7905:63">-&gt;</operator><name pos:start="7905:64" pos:end="7905:75">sigev_notify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="7909:17" pos:end="7909:40"><expr pos:start="7909:17" pos:end="7909:39"><name pos:start="7909:17" pos:end="7909:26">phost_sevp</name> <operator pos:start="7909:28" pos:end="7909:28">=</operator> <operator pos:start="7909:30" pos:end="7909:30">&amp;</operator><name pos:start="7909:31" pos:end="7909:39">host_sevp</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="7915:13" pos:end="7915:70"><expr pos:start="7915:13" pos:end="7915:69"><name pos:start="7915:13" pos:end="7915:15">ret</name> <operator pos:start="7915:17" pos:end="7915:17">=</operator> <call pos:start="7915:19" pos:end="7915:69"><name pos:start="7915:19" pos:end="7915:27">get_errno</name><argument_list pos:start="7915:28" pos:end="7915:69">(<argument pos:start="7915:29" pos:end="7915:68"><expr pos:start="7915:29" pos:end="7915:68"><call pos:start="7915:29" pos:end="7915:68"><name pos:start="7915:29" pos:end="7915:40">timer_create</name><argument_list pos:start="7915:41" pos:end="7915:68">(<argument pos:start="7915:42" pos:end="7915:46"><expr pos:start="7915:42" pos:end="7915:46"><name pos:start="7915:42" pos:end="7915:46">clkid</name></expr></argument>, <argument pos:start="7915:49" pos:end="7915:58"><expr pos:start="7915:49" pos:end="7915:58"><name pos:start="7915:49" pos:end="7915:58">phost_sevp</name></expr></argument>, <argument pos:start="7915:61" pos:end="7915:67"><expr pos:start="7915:61" pos:end="7915:67"><name pos:start="7915:61" pos:end="7915:67">phtimer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="7917:13" pos:end="7933:13"><if pos:start="7917:13" pos:end="7921:13">if <condition pos:start="7917:16" pos:end="7917:20">(<expr pos:start="7917:17" pos:end="7917:19"><name pos:start="7917:17" pos:end="7917:19">ret</name></expr>)</condition> <block pos:start="7917:22" pos:end="7921:13">{<block_content pos:start="7919:17" pos:end="7919:31">

                <expr_stmt pos:start="7919:17" pos:end="7919:31"><expr pos:start="7919:17" pos:end="7919:30"><name pos:start="7919:17" pos:end="7919:23">phtimer</name> <operator pos:start="7919:25" pos:end="7919:25">=</operator> <name pos:start="7919:27" pos:end="7919:30">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="7921:15" pos:end="7933:13">else <block pos:start="7921:20" pos:end="7933:13">{<block_content pos:start="7923:17" pos:end="7931:59">

                <if_stmt pos:start="7923:17" pos:end="7927:17"><if pos:start="7923:17" pos:end="7927:17">if <condition pos:start="7923:20" pos:end="7923:76">(<expr pos:start="7923:21" pos:end="7923:75"><operator pos:start="7923:21" pos:end="7923:21">!</operator><call pos:start="7923:22" pos:end="7923:75"><name pos:start="7923:22" pos:end="7923:37">lock_user_struct</name><argument_list pos:start="7923:38" pos:end="7923:75">(<argument pos:start="7923:39" pos:end="7923:50"><expr pos:start="7923:39" pos:end="7923:50"><name pos:start="7923:39" pos:end="7923:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="7923:53" pos:end="7923:65"><expr pos:start="7923:53" pos:end="7923:65"><name pos:start="7923:53" pos:end="7923:65">ptarget_timer</name></expr></argument>, <argument pos:start="7923:68" pos:end="7923:71"><expr pos:start="7923:68" pos:end="7923:71"><name pos:start="7923:68" pos:end="7923:71">arg3</name></expr></argument>, <argument pos:start="7923:74" pos:end="7923:74"><expr pos:start="7923:74" pos:end="7923:74"><literal type="number" pos:start="7923:74" pos:end="7923:74">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7923:78" pos:end="7927:17">{<block_content pos:start="7925:21" pos:end="7925:32">

                    <goto pos:start="7925:21" pos:end="7925:32">goto <name pos:start="7925:26" pos:end="7925:31">efault</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="7929:17" pos:end="7929:71"><expr pos:start="7929:17" pos:end="7929:70"><name pos:start="7929:17" pos:end="7929:34"><name pos:start="7929:17" pos:end="7929:29">ptarget_timer</name><operator pos:start="7929:30" pos:end="7929:31">-&gt;</operator><name pos:start="7929:32" pos:end="7929:34">ptr</name></name> <operator pos:start="7929:36" pos:end="7929:36">=</operator> <call pos:start="7929:38" pos:end="7929:70"><name pos:start="7929:38" pos:end="7929:44">tswap32</name><argument_list pos:start="7929:45" pos:end="7929:70">(<argument pos:start="7929:46" pos:end="7929:69"><expr pos:start="7929:46" pos:end="7929:69"><literal type="number" pos:start="7929:46" pos:end="7929:55">0xcafe0000</literal> <operator pos:start="7929:57" pos:end="7929:57">|</operator> <name pos:start="7929:59" pos:end="7929:69">timer_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="7931:17" pos:end="7931:59"><expr pos:start="7931:17" pos:end="7931:58"><call pos:start="7931:17" pos:end="7931:58"><name pos:start="7931:17" pos:end="7931:34">unlock_user_struct</name><argument_list pos:start="7931:35" pos:end="7931:58">(<argument pos:start="7931:36" pos:end="7931:48"><expr pos:start="7931:36" pos:end="7931:48"><name pos:start="7931:36" pos:end="7931:48">ptarget_timer</name></expr></argument>, <argument pos:start="7931:51" pos:end="7931:54"><expr pos:start="7931:51" pos:end="7931:54"><name pos:start="7931:51" pos:end="7931:54">arg3</name></expr></argument>, <argument pos:start="7931:57" pos:end="7931:57"><expr pos:start="7931:57" pos:end="7931:57"><literal type="number" pos:start="7931:57" pos:end="7931:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="7937:9" pos:end="7937:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7941:1" pos:end="7941:6">#<cpp:directive pos:start="7941:2" pos:end="7941:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="7945:1" pos:end="7945:30">#<cpp:directive pos:start="7945:2" pos:end="7945:6">ifdef</cpp:directive> <name pos:start="7945:8" pos:end="7945:30">TARGET_NR_timer_settime</name></cpp:ifdef>

    <case pos:start="7947:5" pos:end="7947:33">case <expr pos:start="7947:10" pos:end="7947:32"><name pos:start="7947:10" pos:end="7947:32">TARGET_NR_timer_settime</name></expr>:</case>

    <block pos:start="7949:5" pos:end="7988:0">{<block_content pos:start="7955:9" pos:end="7979:14">

        <comment type="block" pos:start="7951:9" pos:end="7953:43">/* args: timer_t timerid, int flags, const struct itimerspec *new_value,

         * struct itimerspec * old_value */</comment>

        <expr_stmt pos:start="7955:9" pos:end="7955:23"><expr pos:start="7955:9" pos:end="7955:22"><name pos:start="7955:9" pos:end="7955:12">arg1</name> <operator pos:start="7955:14" pos:end="7955:15">&amp;=</operator> <literal type="number" pos:start="7955:17" pos:end="7955:22">0xffff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="7957:9" pos:end="7977:9"><if pos:start="7957:9" pos:end="7961:9">if <condition pos:start="7957:12" pos:end="7957:72">(<expr pos:start="7957:13" pos:end="7957:71"><name pos:start="7957:13" pos:end="7957:16">arg3</name> <operator pos:start="7957:18" pos:end="7957:19">==</operator> <literal type="number" pos:start="7957:21" pos:end="7957:21">0</literal> <operator pos:start="7957:23" pos:end="7957:24">||</operator> <name pos:start="7957:26" pos:end="7957:29">arg1</name> <operator pos:start="7957:31" pos:end="7957:31">&lt;</operator> <literal type="number" pos:start="7957:33" pos:end="7957:33">0</literal> <operator pos:start="7957:35" pos:end="7957:36">||</operator> <name pos:start="7957:38" pos:end="7957:41">arg1</name> <operator pos:start="7957:43" pos:end="7957:44">&gt;=</operator> <call pos:start="7957:46" pos:end="7957:71"><name pos:start="7957:46" pos:end="7957:55">ARRAY_SIZE</name><argument_list pos:start="7957:56" pos:end="7957:71">(<argument pos:start="7957:57" pos:end="7957:70"><expr pos:start="7957:57" pos:end="7957:70"><name pos:start="7957:57" pos:end="7957:70">g_posix_timers</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7957:74" pos:end="7961:9">{<block_content pos:start="7959:13" pos:end="7959:33">

            <expr_stmt pos:start="7959:13" pos:end="7959:33"><expr pos:start="7959:13" pos:end="7959:32"><name pos:start="7959:13" pos:end="7959:15">ret</name> <operator pos:start="7959:17" pos:end="7959:17">=</operator> <operator pos:start="7959:19" pos:end="7959:19">-</operator><name pos:start="7959:20" pos:end="7959:32">TARGET_EINVAL</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="7961:11" pos:end="7977:9">else <block pos:start="7961:16" pos:end="7977:9">{<block_content pos:start="7963:13" pos:end="7975:56">

            <decl_stmt pos:start="7963:13" pos:end="7963:50"><decl pos:start="7963:13" pos:end="7963:49"><type pos:start="7963:13" pos:end="7963:19"><name pos:start="7963:13" pos:end="7963:19">timer_t</name></type> <name pos:start="7963:21" pos:end="7963:26">htimer</name> <init pos:start="7963:28" pos:end="7963:49">= <expr pos:start="7963:30" pos:end="7963:49"><name pos:start="7963:30" pos:end="7963:49"><name pos:start="7963:30" pos:end="7963:43">g_posix_timers</name><index pos:start="7963:44" pos:end="7963:49">[<expr pos:start="7963:45" pos:end="7963:48"><name pos:start="7963:45" pos:end="7963:48">arg1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="7965:13" pos:end="7965:69"><decl pos:start="7965:13" pos:end="7965:48"><type pos:start="7965:13" pos:end="7965:29"><name pos:start="7965:13" pos:end="7965:29"><name pos:start="7965:13" pos:end="7965:18">struct</name> <name pos:start="7965:20" pos:end="7965:29">itimerspec</name></name></type> <name pos:start="7965:31" pos:end="7965:39">hspec_new</name> <init pos:start="7965:41" pos:end="7965:48">= <expr pos:start="7965:43" pos:end="7965:48"><block pos:start="7965:43" pos:end="7965:48">{<expr pos:start="7965:44" pos:end="7965:46"><block pos:start="7965:44" pos:end="7965:46">{<expr pos:start="7965:45" pos:end="7965:45"><literal type="number" pos:start="7965:45" pos:end="7965:45">0</literal></expr>}</block></expr>,}</block></expr></init></decl>, <decl pos:start="7965:51" pos:end="7965:68"><type ref="prev" pos:start="7965:13" pos:end="7965:29"/><name pos:start="7965:51" pos:end="7965:59">hspec_old</name> <init pos:start="7965:61" pos:end="7965:68">= <expr pos:start="7965:63" pos:end="7965:68"><block pos:start="7965:63" pos:end="7965:68">{<expr pos:start="7965:64" pos:end="7965:66"><block pos:start="7965:64" pos:end="7965:66">{<expr pos:start="7965:65" pos:end="7965:65"><literal type="number" pos:start="7965:65" pos:end="7965:65">0</literal></expr>}</block></expr>,}</block></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="7969:13" pos:end="7969:56"><expr pos:start="7969:13" pos:end="7969:55"><call pos:start="7969:13" pos:end="7969:55"><name pos:start="7969:13" pos:end="7969:37">target_to_host_itimerspec</name><argument_list pos:start="7969:38" pos:end="7969:55">(<argument pos:start="7969:39" pos:end="7969:48"><expr pos:start="7969:39" pos:end="7969:48"><operator pos:start="7969:39" pos:end="7969:39">&amp;</operator><name pos:start="7969:40" pos:end="7969:48">hspec_new</name></expr></argument>, <argument pos:start="7969:51" pos:end="7969:54"><expr pos:start="7969:51" pos:end="7969:54"><name pos:start="7969:51" pos:end="7969:54">arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7971:13" pos:end="7973:79"><expr pos:start="7971:13" pos:end="7973:78"><name pos:start="7971:13" pos:end="7971:15">ret</name> <operator pos:start="7971:17" pos:end="7971:17">=</operator> <call pos:start="7971:19" pos:end="7973:78"><name pos:start="7971:19" pos:end="7971:27">get_errno</name><argument_list pos:start="7971:28" pos:end="7973:78">(

                          <argument pos:start="7973:27" pos:end="7973:77"><expr pos:start="7973:27" pos:end="7973:77"><call pos:start="7973:27" pos:end="7973:77"><name pos:start="7973:27" pos:end="7973:39">timer_settime</name><argument_list pos:start="7973:40" pos:end="7973:77">(<argument pos:start="7973:41" pos:end="7973:46"><expr pos:start="7973:41" pos:end="7973:46"><name pos:start="7973:41" pos:end="7973:46">htimer</name></expr></argument>, <argument pos:start="7973:49" pos:end="7973:52"><expr pos:start="7973:49" pos:end="7973:52"><name pos:start="7973:49" pos:end="7973:52">arg2</name></expr></argument>, <argument pos:start="7973:55" pos:end="7973:64"><expr pos:start="7973:55" pos:end="7973:64"><operator pos:start="7973:55" pos:end="7973:55">&amp;</operator><name pos:start="7973:56" pos:end="7973:64">hspec_new</name></expr></argument>, <argument pos:start="7973:67" pos:end="7973:76"><expr pos:start="7973:67" pos:end="7973:76"><operator pos:start="7973:67" pos:end="7973:67">&amp;</operator><name pos:start="7973:68" pos:end="7973:76">hspec_old</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="7975:13" pos:end="7975:56"><expr pos:start="7975:13" pos:end="7975:55"><call pos:start="7975:13" pos:end="7975:55"><name pos:start="7975:13" pos:end="7975:37">host_to_target_itimerspec</name><argument_list pos:start="7975:38" pos:end="7975:55">(<argument pos:start="7975:39" pos:end="7975:42"><expr pos:start="7975:39" pos:end="7975:42"><name pos:start="7975:39" pos:end="7975:42">arg2</name></expr></argument>, <argument pos:start="7975:45" pos:end="7975:54"><expr pos:start="7975:45" pos:end="7975:54"><operator pos:start="7975:45" pos:end="7975:45">&amp;</operator><name pos:start="7975:46" pos:end="7975:54">hspec_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="7979:9" pos:end="7979:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="7983:1" pos:end="7983:6">#<cpp:directive pos:start="7983:2" pos:end="7983:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="7987:1" pos:end="7987:30">#<cpp:directive pos:start="7987:2" pos:end="7987:6">ifdef</cpp:directive> <name pos:start="7987:8" pos:end="7987:30">TARGET_NR_timer_gettime</name></cpp:ifdef>

    <case pos:start="7989:5" pos:end="7989:33">case <expr pos:start="7989:10" pos:end="7989:32"><name pos:start="7989:10" pos:end="7989:32">TARGET_NR_timer_gettime</name></expr>:</case>

    <block pos:start="7991:5" pos:end="8032:0">{<block_content pos:start="7995:9" pos:end="8023:14">

        <comment type="block" pos:start="7993:9" pos:end="7993:66">/* args: timer_t timerid, struct itimerspec *curr_value */</comment>

        <expr_stmt pos:start="7995:9" pos:end="7995:23"><expr pos:start="7995:9" pos:end="7995:22"><name pos:start="7995:9" pos:end="7995:12">arg1</name> <operator pos:start="7995:14" pos:end="7995:15">&amp;=</operator> <literal type="number" pos:start="7995:17" pos:end="7995:22">0xffff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="7997:9" pos:end="8021:9"><if pos:start="7997:9" pos:end="8001:9">if <condition pos:start="7997:12" pos:end="7997:18">(<expr pos:start="7997:13" pos:end="7997:17"><operator pos:start="7997:13" pos:end="7997:13">!</operator><name pos:start="7997:14" pos:end="7997:17">arg2</name></expr>)</condition> <block pos:start="7997:20" pos:end="8001:9">{<block_content pos:start="7999:13" pos:end="7999:34">

            <return pos:start="7999:13" pos:end="7999:34">return <expr pos:start="7999:20" pos:end="7999:33"><operator pos:start="7999:20" pos:end="7999:20">-</operator><name pos:start="7999:21" pos:end="7999:33">TARGET_EFAULT</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="8001:11" pos:end="8005:9">else if <condition pos:start="8001:19" pos:end="8001:66">(<expr pos:start="8001:20" pos:end="8001:65"><name pos:start="8001:20" pos:end="8001:23">arg1</name> <operator pos:start="8001:25" pos:end="8001:25">&lt;</operator> <literal type="number" pos:start="8001:27" pos:end="8001:27">0</literal> <operator pos:start="8001:29" pos:end="8001:30">||</operator> <name pos:start="8001:32" pos:end="8001:35">arg1</name> <operator pos:start="8001:37" pos:end="8001:38">&gt;=</operator> <call pos:start="8001:40" pos:end="8001:65"><name pos:start="8001:40" pos:end="8001:49">ARRAY_SIZE</name><argument_list pos:start="8001:50" pos:end="8001:65">(<argument pos:start="8001:51" pos:end="8001:64"><expr pos:start="8001:51" pos:end="8001:64"><name pos:start="8001:51" pos:end="8001:64">g_posix_timers</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="8001:68" pos:end="8005:9">{<block_content pos:start="8003:13" pos:end="8003:33">

            <expr_stmt pos:start="8003:13" pos:end="8003:33"><expr pos:start="8003:13" pos:end="8003:32"><name pos:start="8003:13" pos:end="8003:15">ret</name> <operator pos:start="8003:17" pos:end="8003:17">=</operator> <operator pos:start="8003:19" pos:end="8003:19">-</operator><name pos:start="8003:20" pos:end="8003:32">TARGET_EINVAL</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="8005:11" pos:end="8021:9">else <block pos:start="8005:16" pos:end="8021:9">{<block_content pos:start="8007:13" pos:end="8019:13">

            <decl_stmt pos:start="8007:13" pos:end="8007:50"><decl pos:start="8007:13" pos:end="8007:49"><type pos:start="8007:13" pos:end="8007:19"><name pos:start="8007:13" pos:end="8007:19">timer_t</name></type> <name pos:start="8007:21" pos:end="8007:26">htimer</name> <init pos:start="8007:28" pos:end="8007:49">= <expr pos:start="8007:30" pos:end="8007:49"><name pos:start="8007:30" pos:end="8007:49"><name pos:start="8007:30" pos:end="8007:43">g_posix_timers</name><index pos:start="8007:44" pos:end="8007:49">[<expr pos:start="8007:45" pos:end="8007:48"><name pos:start="8007:45" pos:end="8007:48">arg1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="8009:13" pos:end="8009:36"><decl pos:start="8009:13" pos:end="8009:35"><type pos:start="8009:13" pos:end="8009:29"><name pos:start="8009:13" pos:end="8009:29"><name pos:start="8009:13" pos:end="8009:18">struct</name> <name pos:start="8009:20" pos:end="8009:29">itimerspec</name></name></type> <name pos:start="8009:31" pos:end="8009:35">hspec</name></decl>;</decl_stmt>

            <expr_stmt pos:start="8011:13" pos:end="8011:59"><expr pos:start="8011:13" pos:end="8011:58"><name pos:start="8011:13" pos:end="8011:15">ret</name> <operator pos:start="8011:17" pos:end="8011:17">=</operator> <call pos:start="8011:19" pos:end="8011:58"><name pos:start="8011:19" pos:end="8011:27">get_errno</name><argument_list pos:start="8011:28" pos:end="8011:58">(<argument pos:start="8011:29" pos:end="8011:57"><expr pos:start="8011:29" pos:end="8011:57"><call pos:start="8011:29" pos:end="8011:57"><name pos:start="8011:29" pos:end="8011:41">timer_gettime</name><argument_list pos:start="8011:42" pos:end="8011:57">(<argument pos:start="8011:43" pos:end="8011:48"><expr pos:start="8011:43" pos:end="8011:48"><name pos:start="8011:43" pos:end="8011:48">htimer</name></expr></argument>, <argument pos:start="8011:51" pos:end="8011:56"><expr pos:start="8011:51" pos:end="8011:56"><operator pos:start="8011:51" pos:end="8011:51">&amp;</operator><name pos:start="8011:52" pos:end="8011:56">hspec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="8015:13" pos:end="8019:13"><if pos:start="8015:13" pos:end="8019:13">if <condition pos:start="8015:16" pos:end="8015:56">(<expr pos:start="8015:17" pos:end="8015:55"><call pos:start="8015:17" pos:end="8015:55"><name pos:start="8015:17" pos:end="8015:41">host_to_target_itimerspec</name><argument_list pos:start="8015:42" pos:end="8015:55">(<argument pos:start="8015:43" pos:end="8015:46"><expr pos:start="8015:43" pos:end="8015:46"><name pos:start="8015:43" pos:end="8015:46">arg2</name></expr></argument>, <argument pos:start="8015:49" pos:end="8015:54"><expr pos:start="8015:49" pos:end="8015:54"><operator pos:start="8015:49" pos:end="8015:49">&amp;</operator><name pos:start="8015:50" pos:end="8015:54">hspec</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="8015:58" pos:end="8019:13">{<block_content pos:start="8017:17" pos:end="8017:37">

                <expr_stmt pos:start="8017:17" pos:end="8017:37"><expr pos:start="8017:17" pos:end="8017:36"><name pos:start="8017:17" pos:end="8017:19">ret</name> <operator pos:start="8017:21" pos:end="8017:21">=</operator> <operator pos:start="8017:23" pos:end="8017:23">-</operator><name pos:start="8017:24" pos:end="8017:36">TARGET_EFAULT</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="8023:9" pos:end="8023:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="8027:1" pos:end="8027:6">#<cpp:directive pos:start="8027:2" pos:end="8027:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="8031:1" pos:end="8031:33">#<cpp:directive pos:start="8031:2" pos:end="8031:6">ifdef</cpp:directive> <name pos:start="8031:8" pos:end="8031:33">TARGET_NR_timer_getoverrun</name></cpp:ifdef>

    <case pos:start="8033:5" pos:end="8033:36">case <expr pos:start="8033:10" pos:end="8033:35"><name pos:start="8033:10" pos:end="8033:35">TARGET_NR_timer_getoverrun</name></expr>:</case>

    <block pos:start="8035:5" pos:end="8062:0">{<block_content pos:start="8039:9" pos:end="8053:14">

        <comment type="block" pos:start="8037:9" pos:end="8037:35">/* args: timer_t timerid */</comment>

        <expr_stmt pos:start="8039:9" pos:end="8039:23"><expr pos:start="8039:9" pos:end="8039:22"><name pos:start="8039:9" pos:end="8039:12">arg1</name> <operator pos:start="8039:14" pos:end="8039:15">&amp;=</operator> <literal type="number" pos:start="8039:17" pos:end="8039:22">0xffff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="8041:9" pos:end="8051:9"><if pos:start="8041:9" pos:end="8045:9">if <condition pos:start="8041:12" pos:end="8041:59">(<expr pos:start="8041:13" pos:end="8041:58"><name pos:start="8041:13" pos:end="8041:16">arg1</name> <operator pos:start="8041:18" pos:end="8041:18">&lt;</operator> <literal type="number" pos:start="8041:20" pos:end="8041:20">0</literal> <operator pos:start="8041:22" pos:end="8041:23">||</operator> <name pos:start="8041:25" pos:end="8041:28">arg1</name> <operator pos:start="8041:30" pos:end="8041:31">&gt;=</operator> <call pos:start="8041:33" pos:end="8041:58"><name pos:start="8041:33" pos:end="8041:42">ARRAY_SIZE</name><argument_list pos:start="8041:43" pos:end="8041:58">(<argument pos:start="8041:44" pos:end="8041:57"><expr pos:start="8041:44" pos:end="8041:57"><name pos:start="8041:44" pos:end="8041:57">g_posix_timers</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="8041:61" pos:end="8045:9">{<block_content pos:start="8043:13" pos:end="8043:33">

            <expr_stmt pos:start="8043:13" pos:end="8043:33"><expr pos:start="8043:13" pos:end="8043:32"><name pos:start="8043:13" pos:end="8043:15">ret</name> <operator pos:start="8043:17" pos:end="8043:17">=</operator> <operator pos:start="8043:19" pos:end="8043:19">-</operator><name pos:start="8043:20" pos:end="8043:32">TARGET_EINVAL</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="8045:11" pos:end="8051:9">else <block pos:start="8045:16" pos:end="8051:9">{<block_content pos:start="8047:13" pos:end="8049:54">

            <decl_stmt pos:start="8047:13" pos:end="8047:50"><decl pos:start="8047:13" pos:end="8047:49"><type pos:start="8047:13" pos:end="8047:19"><name pos:start="8047:13" pos:end="8047:19">timer_t</name></type> <name pos:start="8047:21" pos:end="8047:26">htimer</name> <init pos:start="8047:28" pos:end="8047:49">= <expr pos:start="8047:30" pos:end="8047:49"><name pos:start="8047:30" pos:end="8047:49"><name pos:start="8047:30" pos:end="8047:43">g_posix_timers</name><index pos:start="8047:44" pos:end="8047:49">[<expr pos:start="8047:45" pos:end="8047:48"><name pos:start="8047:45" pos:end="8047:48">arg1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="8049:13" pos:end="8049:54"><expr pos:start="8049:13" pos:end="8049:53"><name pos:start="8049:13" pos:end="8049:15">ret</name> <operator pos:start="8049:17" pos:end="8049:17">=</operator> <call pos:start="8049:19" pos:end="8049:53"><name pos:start="8049:19" pos:end="8049:27">get_errno</name><argument_list pos:start="8049:28" pos:end="8049:53">(<argument pos:start="8049:29" pos:end="8049:52"><expr pos:start="8049:29" pos:end="8049:52"><call pos:start="8049:29" pos:end="8049:52"><name pos:start="8049:29" pos:end="8049:44">timer_getoverrun</name><argument_list pos:start="8049:45" pos:end="8049:52">(<argument pos:start="8049:46" pos:end="8049:51"><expr pos:start="8049:46" pos:end="8049:51"><name pos:start="8049:46" pos:end="8049:51">htimer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="8053:9" pos:end="8053:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="8057:1" pos:end="8057:6">#<cpp:directive pos:start="8057:2" pos:end="8057:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="8061:1" pos:end="8061:29">#<cpp:directive pos:start="8061:2" pos:end="8061:6">ifdef</cpp:directive> <name pos:start="8061:8" pos:end="8061:29">TARGET_NR_timer_delete</name></cpp:ifdef>

    <case pos:start="8063:5" pos:end="8063:32">case <expr pos:start="8063:10" pos:end="8063:31"><name pos:start="8063:10" pos:end="8063:31">TARGET_NR_timer_delete</name></expr>:</case>

    <block pos:start="8065:5" pos:end="8090:0">{<block_content pos:start="8069:9" pos:end="8085:14">

        <comment type="block" pos:start="8067:9" pos:end="8067:35">/* args: timer_t timerid */</comment>

        <expr_stmt pos:start="8069:9" pos:end="8069:23"><expr pos:start="8069:9" pos:end="8069:22"><name pos:start="8069:9" pos:end="8069:12">arg1</name> <operator pos:start="8069:14" pos:end="8069:15">&amp;=</operator> <literal type="number" pos:start="8069:17" pos:end="8069:22">0xffff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="8071:9" pos:end="8083:9"><if pos:start="8071:9" pos:end="8075:9">if <condition pos:start="8071:12" pos:end="8071:59">(<expr pos:start="8071:13" pos:end="8071:58"><name pos:start="8071:13" pos:end="8071:16">arg1</name> <operator pos:start="8071:18" pos:end="8071:18">&lt;</operator> <literal type="number" pos:start="8071:20" pos:end="8071:20">0</literal> <operator pos:start="8071:22" pos:end="8071:23">||</operator> <name pos:start="8071:25" pos:end="8071:28">arg1</name> <operator pos:start="8071:30" pos:end="8071:31">&gt;=</operator> <call pos:start="8071:33" pos:end="8071:58"><name pos:start="8071:33" pos:end="8071:42">ARRAY_SIZE</name><argument_list pos:start="8071:43" pos:end="8071:58">(<argument pos:start="8071:44" pos:end="8071:57"><expr pos:start="8071:44" pos:end="8071:57"><name pos:start="8071:44" pos:end="8071:57">g_posix_timers</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="8071:61" pos:end="8075:9">{<block_content pos:start="8073:13" pos:end="8073:33">

            <expr_stmt pos:start="8073:13" pos:end="8073:33"><expr pos:start="8073:13" pos:end="8073:32"><name pos:start="8073:13" pos:end="8073:15">ret</name> <operator pos:start="8073:17" pos:end="8073:17">=</operator> <operator pos:start="8073:19" pos:end="8073:19">-</operator><name pos:start="8073:20" pos:end="8073:32">TARGET_EINVAL</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="8075:11" pos:end="8083:9">else <block pos:start="8075:16" pos:end="8083:9">{<block_content pos:start="8077:13" pos:end="8081:37">

            <decl_stmt pos:start="8077:13" pos:end="8077:50"><decl pos:start="8077:13" pos:end="8077:49"><type pos:start="8077:13" pos:end="8077:19"><name pos:start="8077:13" pos:end="8077:19">timer_t</name></type> <name pos:start="8077:21" pos:end="8077:26">htimer</name> <init pos:start="8077:28" pos:end="8077:49">= <expr pos:start="8077:30" pos:end="8077:49"><name pos:start="8077:30" pos:end="8077:49"><name pos:start="8077:30" pos:end="8077:43">g_posix_timers</name><index pos:start="8077:44" pos:end="8077:49">[<expr pos:start="8077:45" pos:end="8077:48"><name pos:start="8077:45" pos:end="8077:48">arg1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="8079:13" pos:end="8079:50"><expr pos:start="8079:13" pos:end="8079:49"><name pos:start="8079:13" pos:end="8079:15">ret</name> <operator pos:start="8079:17" pos:end="8079:17">=</operator> <call pos:start="8079:19" pos:end="8079:49"><name pos:start="8079:19" pos:end="8079:27">get_errno</name><argument_list pos:start="8079:28" pos:end="8079:49">(<argument pos:start="8079:29" pos:end="8079:48"><expr pos:start="8079:29" pos:end="8079:48"><call pos:start="8079:29" pos:end="8079:48"><name pos:start="8079:29" pos:end="8079:40">timer_delete</name><argument_list pos:start="8079:41" pos:end="8079:48">(<argument pos:start="8079:42" pos:end="8079:47"><expr pos:start="8079:42" pos:end="8079:47"><name pos:start="8079:42" pos:end="8079:47">htimer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="8081:13" pos:end="8081:37"><expr pos:start="8081:13" pos:end="8081:36"><name pos:start="8081:13" pos:end="8081:32"><name pos:start="8081:13" pos:end="8081:26">g_posix_timers</name><index pos:start="8081:27" pos:end="8081:32">[<expr pos:start="8081:28" pos:end="8081:31"><name pos:start="8081:28" pos:end="8081:31">arg1</name></expr>]</index></name> <operator pos:start="8081:34" pos:end="8081:34">=</operator> <literal type="number" pos:start="8081:36" pos:end="8081:36">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="8085:9" pos:end="8085:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="8089:1" pos:end="8089:6">#<cpp:directive pos:start="8089:2" pos:end="8089:6">endif</cpp:directive></cpp:endif>



    <default pos:start="8093:5" pos:end="8093:12">default:</default>

    <label pos:start="8095:5" pos:end="8095:18"><name pos:start="8095:5" pos:end="8095:17">unimplemented</name>:</label>

        <expr_stmt pos:start="8097:9" pos:end="8100:0"><expr pos:start="8097:9" pos:end="8097:56"><call pos:start="8097:9" pos:end="8097:56"><name pos:start="8097:9" pos:end="8097:16">gemu_log</name><argument_list pos:start="8097:17" pos:end="8097:56">(<argument pos:start="8097:18" pos:end="8097:50"><expr pos:start="8097:18" pos:end="8097:50"><literal type="string" pos:start="8097:18" pos:end="8097:50">"qemu: Unsupported syscall: %d\n"</literal></expr></argument>, <argument pos:start="8097:53" pos:end="8097:55"><expr pos:start="8097:53" pos:end="8097:55"><name pos:start="8097:53" pos:end="8097:55">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="8099:1" pos:end="8099:143">#<cpp:directive pos:start="8099:2" pos:end="8099:3">if</cpp:directive> <expr pos:start="8099:5" pos:end="8099:143"><call pos:start="8099:5" pos:end="8099:31"><name pos:start="8099:5" pos:end="8099:11">defined</name><argument_list pos:start="8099:12" pos:end="8099:31">(<argument pos:start="8099:13" pos:end="8099:30"><expr pos:start="8099:13" pos:end="8099:30"><name pos:start="8099:13" pos:end="8099:30">TARGET_NR_setxattr</name></expr></argument>)</argument_list></call> <operator pos:start="8099:33" pos:end="8099:34">||</operator> <call pos:start="8099:36" pos:end="8099:69"><name pos:start="8099:36" pos:end="8099:42">defined</name><argument_list pos:start="8099:43" pos:end="8099:69">(<argument pos:start="8099:44" pos:end="8099:68"><expr pos:start="8099:44" pos:end="8099:68"><name pos:start="8099:44" pos:end="8099:68">TARGET_NR_get_thread_area</name></expr></argument>)</argument_list></call> <operator pos:start="8099:71" pos:end="8099:72">||</operator> <call pos:start="8099:74" pos:end="8099:105"><name pos:start="8099:74" pos:end="8099:80">defined</name><argument_list pos:start="8099:81" pos:end="8099:105">(<argument pos:start="8099:82" pos:end="8099:104"><expr pos:start="8099:82" pos:end="8099:104"><name pos:start="8099:82" pos:end="8099:104">TARGET_NR_getdomainname</name></expr></argument>)</argument_list></call> <operator pos:start="8099:107" pos:end="8099:108">||</operator> <call pos:start="8099:110" pos:end="8099:143"><name pos:start="8099:110" pos:end="8099:116">defined</name><argument_list pos:start="8099:117" pos:end="8099:143">(<argument pos:start="8099:118" pos:end="8099:142"><expr pos:start="8099:118" pos:end="8099:142"><name pos:start="8099:118" pos:end="8099:142">TARGET_NR_set_robust_list</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <label pos:start="8101:5" pos:end="8104:0"><name pos:start="8101:5" pos:end="8101:24">unimplemented_nowarn</name>:</label>

<cpp:endif pos:start="8103:1" pos:end="8103:6">#<cpp:directive pos:start="8103:2" pos:end="8103:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="8105:9" pos:end="8105:29"><expr pos:start="8105:9" pos:end="8105:28"><name pos:start="8105:9" pos:end="8105:11">ret</name> <operator pos:start="8105:13" pos:end="8105:13">=</operator> <operator pos:start="8105:15" pos:end="8105:15">-</operator><name pos:start="8105:16" pos:end="8105:28">TARGET_ENOSYS</name></expr>;</expr_stmt>

        <break pos:start="8107:9" pos:end="8107:14">break;</break>

    </block_content>}</block></switch>

<label pos:start="8111:1" pos:end="8114:0"><name pos:start="8111:1" pos:end="8111:4">fail</name>:</label>

<cpp:ifdef pos:start="8113:1" pos:end="8113:12">#<cpp:directive pos:start="8113:2" pos:end="8113:6">ifdef</cpp:directive> <name pos:start="8113:8" pos:end="8113:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="8115:5" pos:end="8118:0"><expr pos:start="8115:5" pos:end="8115:47"><call pos:start="8115:5" pos:end="8115:47"><name pos:start="8115:5" pos:end="8115:12">gemu_log</name><argument_list pos:start="8115:13" pos:end="8115:47">(<argument pos:start="8115:14" pos:end="8115:41"><expr pos:start="8115:14" pos:end="8115:41"><literal type="string" pos:start="8115:14" pos:end="8115:18">" = "</literal> <name pos:start="8115:20" pos:end="8115:36">TARGET_ABI_FMT_ld</name> <literal type="string" pos:start="8115:38" pos:end="8115:41">"\n"</literal></expr></argument>, <argument pos:start="8115:44" pos:end="8115:46"><expr pos:start="8115:44" pos:end="8115:46"><name pos:start="8115:44" pos:end="8115:46">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="8117:1" pos:end="8117:6">#<cpp:directive pos:start="8117:2" pos:end="8117:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="8119:5" pos:end="8121:36"><if pos:start="8119:5" pos:end="8121:36">if<condition pos:start="8119:7" pos:end="8119:17">(<expr pos:start="8119:8" pos:end="8119:16"><name pos:start="8119:8" pos:end="8119:16">do_strace</name></expr>)</condition><block type="pseudo" pos:start="8121:9" pos:end="8121:36"><block_content pos:start="8121:9" pos:end="8121:36">

        <expr_stmt pos:start="8121:9" pos:end="8121:36"><expr pos:start="8121:9" pos:end="8121:35"><call pos:start="8121:9" pos:end="8121:35"><name pos:start="8121:9" pos:end="8121:25">print_syscall_ret</name><argument_list pos:start="8121:26" pos:end="8121:35">(<argument pos:start="8121:27" pos:end="8121:29"><expr pos:start="8121:27" pos:end="8121:29"><name pos:start="8121:27" pos:end="8121:29">num</name></expr></argument>, <argument pos:start="8121:32" pos:end="8121:34"><expr pos:start="8121:32" pos:end="8121:34"><name pos:start="8121:32" pos:end="8121:34">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="8123:5" pos:end="8123:15">return <expr pos:start="8123:12" pos:end="8123:14"><name pos:start="8123:12" pos:end="8123:14">ret</name></expr>;</return>

<label pos:start="8125:1" pos:end="8125:7"><name pos:start="8125:1" pos:end="8125:6">efault</name>:</label>

    <expr_stmt pos:start="8127:5" pos:end="8127:25"><expr pos:start="8127:5" pos:end="8127:24"><name pos:start="8127:5" pos:end="8127:7">ret</name> <operator pos:start="8127:9" pos:end="8127:9">=</operator> <operator pos:start="8127:11" pos:end="8127:11">-</operator><name pos:start="8127:12" pos:end="8127:24">TARGET_EFAULT</name></expr>;</expr_stmt>

    <goto pos:start="8129:5" pos:end="8129:14">goto <name pos:start="8129:10" pos:end="8129:13">fail</name>;</goto>

</block_content>}</block></function></unit>
