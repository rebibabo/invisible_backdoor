<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14737.c" pos:tabs="8"><function pos:start="1:1" pos:end="341:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">tcg_reg_alloc_op</name><parameter_list pos:start="1:29" pos:end="7:47">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:39">TCGContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, 

                             <parameter pos:start="3:30" pos:end="3:48"><decl pos:start="3:30" pos:end="3:48"><type pos:start="3:30" pos:end="3:48"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:43">TCGOpDef</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:48">def</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:63"><decl pos:start="3:51" pos:end="3:63"><type pos:start="3:51" pos:end="3:63"><name pos:start="3:51" pos:end="3:59">TCGOpcode</name></type> <name pos:start="3:61" pos:end="3:63">opc</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:47"><decl pos:start="5:30" pos:end="5:47"><type pos:start="5:30" pos:end="5:47"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:41">TCGArg</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:47">args</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:67"><decl pos:start="5:50" pos:end="5:67"><type pos:start="5:50" pos:end="5:67"><name pos:start="5:50" pos:end="5:57">uint16_t</name></type> <name pos:start="5:59" pos:end="5:67">dead_args</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:46"><decl pos:start="7:30" pos:end="7:46"><type pos:start="7:30" pos:end="7:46"><name pos:start="7:30" pos:end="7:36">uint8_t</name></type> <name pos:start="7:38" pos:end="7:46">sync_args</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="341:1">{<block_content pos:start="11:5" pos:end="339:5">

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">TCGRegSet</name></type> <name pos:start="11:15" pos:end="11:28">allocated_regs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">k</name></decl>, <decl pos:start="13:15" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:22">nb_iargs</name></decl>, <decl pos:start="13:25" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:25" pos:end="13:32">nb_oargs</name></decl>, <decl pos:start="13:35" pos:end="13:37"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:35" pos:end="13:37">reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">TCGArg</name></type> <name pos:start="15:12" pos:end="15:14">arg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:34"><type pos:start="17:5" pos:end="17:28"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:26">TCGArgConstraint</name> <modifier pos:start="17:28" pos:end="17:28">*</modifier></type><name pos:start="17:29" pos:end="17:34">arg_ct</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">TCGTemp</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:15">ts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:37"><decl pos:start="21:5" pos:end="21:36"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">TCGArg</name></type> <name pos:start="21:12" pos:end="21:36"><name pos:start="21:12" pos:end="21:19">new_args</name><index pos:start="21:20" pos:end="21:36">[<expr pos:start="21:21" pos:end="21:35"><name pos:start="21:21" pos:end="21:35">TCG_MAX_OP_ARGS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:36"><decl pos:start="23:5" pos:end="23:35"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:18">const_args</name><index pos:start="23:19" pos:end="23:35">[<expr pos:start="23:20" pos:end="23:34"><name pos:start="23:20" pos:end="23:34">TCG_MAX_OP_ARGS</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:12">nb_oargs</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:28"><name pos:start="27:16" pos:end="27:18">def</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:28">nb_oargs</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:12">nb_iargs</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <name pos:start="29:16" pos:end="29:28"><name pos:start="29:16" pos:end="29:18">def</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:28">nb_iargs</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:24">/* copy constants */</comment>

    <expr_stmt pos:start="35:5" pos:end="39:43"><expr pos:start="35:5" pos:end="39:42"><call pos:start="35:5" pos:end="39:42"><name pos:start="35:5" pos:end="35:10">memcpy</name><argument_list pos:start="35:11" pos:end="39:42">(<argument pos:start="35:12" pos:end="35:41"><expr pos:start="35:12" pos:end="35:41"><name pos:start="35:12" pos:end="35:19">new_args</name> <operator pos:start="35:21" pos:end="35:21">+</operator> <name pos:start="35:23" pos:end="35:30">nb_oargs</name> <operator pos:start="35:32" pos:end="35:32">+</operator> <name pos:start="35:34" pos:end="35:41">nb_iargs</name></expr></argument>, 

           <argument pos:start="37:12" pos:end="37:37"><expr pos:start="37:12" pos:end="37:37"><name pos:start="37:12" pos:end="37:15">args</name> <operator pos:start="37:17" pos:end="37:17">+</operator> <name pos:start="37:19" pos:end="37:26">nb_oargs</name> <operator pos:start="37:28" pos:end="37:28">+</operator> <name pos:start="37:30" pos:end="37:37">nb_iargs</name></expr></argument>, 

           <argument pos:start="39:12" pos:end="39:41"><expr pos:start="39:12" pos:end="39:41"><sizeof pos:start="39:12" pos:end="39:25">sizeof<argument_list pos:start="39:18" pos:end="39:25">(<argument pos:start="39:19" pos:end="39:24"><expr pos:start="39:19" pos:end="39:24"><name pos:start="39:19" pos:end="39:24">TCGArg</name></expr></argument>)</argument_list></sizeof> <operator pos:start="39:27" pos:end="39:27">*</operator> <name pos:start="39:29" pos:end="39:41"><name pos:start="39:29" pos:end="39:31">def</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:41">nb_cargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:35">/* satisfy input constraints */</comment> 

    <expr_stmt pos:start="45:5" pos:end="45:53"><expr pos:start="45:5" pos:end="45:52"><call pos:start="45:5" pos:end="45:52"><name pos:start="45:5" pos:end="45:18">tcg_regset_set</name><argument_list pos:start="45:19" pos:end="45:52">(<argument pos:start="45:20" pos:end="45:33"><expr pos:start="45:20" pos:end="45:33"><name pos:start="45:20" pos:end="45:33">allocated_regs</name></expr></argument>, <argument pos:start="45:36" pos:end="45:51"><expr pos:start="45:36" pos:end="45:51"><name pos:start="45:36" pos:end="45:51"><name pos:start="45:36" pos:end="45:36">s</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:51">reserved_regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="47:5" pos:end="183:5">for<control pos:start="47:8" pos:end="47:33">(<init pos:start="47:9" pos:end="47:14"><expr pos:start="47:9" pos:end="47:13"><name pos:start="47:9" pos:end="47:9">k</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <literal type="number" pos:start="47:13" pos:end="47:13">0</literal></expr>;</init> <condition pos:start="47:16" pos:end="47:28"><expr pos:start="47:16" pos:end="47:27"><name pos:start="47:16" pos:end="47:16">k</name> <operator pos:start="47:18" pos:end="47:18">&lt;</operator> <name pos:start="47:20" pos:end="47:27">nb_iargs</name></expr>;</condition> <incr pos:start="47:30" pos:end="47:32"><expr pos:start="47:30" pos:end="47:32"><name pos:start="47:30" pos:end="47:30">k</name><operator pos:start="47:31" pos:end="47:32">++</operator></expr></incr>)</control> <block pos:start="47:35" pos:end="183:5">{<block_content pos:start="49:9" pos:end="181:15">

        <expr_stmt pos:start="49:9" pos:end="49:43"><expr pos:start="49:9" pos:end="49:42"><name pos:start="49:9" pos:end="49:9">i</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <name pos:start="49:13" pos:end="49:42"><name pos:start="49:13" pos:end="49:15">def</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:28">sorted_args</name><index pos:start="49:29" pos:end="49:42">[<expr pos:start="49:30" pos:end="49:41"><name pos:start="49:30" pos:end="49:37">nb_oargs</name> <operator pos:start="49:39" pos:end="49:39">+</operator> <name pos:start="49:41" pos:end="49:41">k</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:22"><expr pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:11">arg</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <name pos:start="51:15" pos:end="51:21"><name pos:start="51:15" pos:end="51:18">args</name><index pos:start="51:19" pos:end="51:21">[<expr pos:start="51:20" pos:end="51:20"><name pos:start="51:20" pos:end="51:20">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:34"><expr pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:14">arg_ct</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <operator pos:start="53:18" pos:end="53:18">&amp;</operator><name pos:start="53:19" pos:end="53:33"><name pos:start="53:19" pos:end="53:21">def</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:30">args_ct</name><index pos:start="53:31" pos:end="53:33">[<expr pos:start="53:32" pos:end="53:32"><name pos:start="53:32" pos:end="53:32">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:28"><expr pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:10">ts</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <operator pos:start="55:14" pos:end="55:14">&amp;</operator><name pos:start="55:15" pos:end="55:27"><name pos:start="55:15" pos:end="55:15">s</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:22">temps</name><index pos:start="55:23" pos:end="55:27">[<expr pos:start="55:24" pos:end="55:26"><name pos:start="55:24" pos:end="55:26">arg</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="101:9"><if pos:start="57:9" pos:end="71:9">if <condition pos:start="57:12" pos:end="57:41">(<expr pos:start="57:13" pos:end="57:40"><name pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:14">ts</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:24">val_type</name></name> <operator pos:start="57:26" pos:end="57:27">==</operator> <name pos:start="57:29" pos:end="57:40">TEMP_VAL_MEM</name></expr>)</condition> <block pos:start="57:43" pos:end="71:9">{<block_content pos:start="59:13" pos:end="69:38">

            <expr_stmt pos:start="59:13" pos:end="59:67"><expr pos:start="59:13" pos:end="59:66"><name pos:start="59:13" pos:end="59:15">reg</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:66"><name pos:start="59:19" pos:end="59:31">tcg_reg_alloc</name><argument_list pos:start="59:32" pos:end="59:66">(<argument pos:start="59:33" pos:end="59:33"><expr pos:start="59:33" pos:end="59:33"><name pos:start="59:33" pos:end="59:33">s</name></expr></argument>, <argument pos:start="59:36" pos:end="59:49"><expr pos:start="59:36" pos:end="59:49"><name pos:start="59:36" pos:end="59:49"><name pos:start="59:36" pos:end="59:41">arg_ct</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:44">u</name><operator pos:start="59:45" pos:end="59:45">.</operator><name pos:start="59:46" pos:end="59:49">regs</name></name></expr></argument>, <argument pos:start="59:52" pos:end="59:65"><expr pos:start="59:52" pos:end="59:65"><name pos:start="59:52" pos:end="59:65">allocated_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:70"><expr pos:start="61:13" pos:end="61:69"><call pos:start="61:13" pos:end="61:69"><name pos:start="61:13" pos:end="61:22">tcg_out_ld</name><argument_list pos:start="61:23" pos:end="61:69">(<argument pos:start="61:24" pos:end="61:24"><expr pos:start="61:24" pos:end="61:24"><name pos:start="61:24" pos:end="61:24">s</name></expr></argument>, <argument pos:start="61:27" pos:end="61:34"><expr pos:start="61:27" pos:end="61:34"><name pos:start="61:27" pos:end="61:34"><name pos:start="61:27" pos:end="61:28">ts</name><operator pos:start="61:29" pos:end="61:30">-&gt;</operator><name pos:start="61:31" pos:end="61:34">type</name></name></expr></argument>, <argument pos:start="61:37" pos:end="61:39"><expr pos:start="61:37" pos:end="61:39"><name pos:start="61:37" pos:end="61:39">reg</name></expr></argument>, <argument pos:start="61:42" pos:end="61:52"><expr pos:start="61:42" pos:end="61:52"><name pos:start="61:42" pos:end="61:52"><name pos:start="61:42" pos:end="61:43">ts</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:52">mem_reg</name></name></expr></argument>, <argument pos:start="61:55" pos:end="61:68"><expr pos:start="61:55" pos:end="61:68"><name pos:start="61:55" pos:end="61:68"><name pos:start="61:55" pos:end="61:56">ts</name><operator pos:start="61:57" pos:end="61:58">-&gt;</operator><name pos:start="61:59" pos:end="61:68">mem_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:40"><expr pos:start="63:13" pos:end="63:39"><name pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:14">ts</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:24">val_type</name></name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:39">TEMP_VAL_REG</name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:26"><expr pos:start="65:13" pos:end="65:25"><name pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:14">ts</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:19">reg</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:25">reg</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:33"><expr pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:28"><name pos:start="67:13" pos:end="67:14">ts</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:28">mem_coherent</name></name> <operator pos:start="67:30" pos:end="67:30">=</operator> <literal type="number" pos:start="67:32" pos:end="67:32">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:38"><expr pos:start="69:13" pos:end="69:37"><name pos:start="69:13" pos:end="69:31"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:26">reg_to_temp</name><index pos:start="69:27" pos:end="69:31">[<expr pos:start="69:28" pos:end="69:30"><name pos:start="69:28" pos:end="69:30">reg</name></expr>]</index></name> <operator pos:start="69:33" pos:end="69:33">=</operator> <name pos:start="69:35" pos:end="69:37">arg</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="71:11" pos:end="101:9">else if <condition pos:start="71:19" pos:end="71:50">(<expr pos:start="71:20" pos:end="71:49"><name pos:start="71:20" pos:end="71:31"><name pos:start="71:20" pos:end="71:21">ts</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:31">val_type</name></name> <operator pos:start="71:33" pos:end="71:34">==</operator> <name pos:start="71:36" pos:end="71:49">TEMP_VAL_CONST</name></expr>)</condition> <block pos:start="71:52" pos:end="101:9">{<block_content pos:start="73:13" pos:end="99:13">

            <if_stmt pos:start="73:13" pos:end="99:13"><if pos:start="73:13" pos:end="83:13">if <condition pos:start="73:16" pos:end="73:66">(<expr pos:start="73:17" pos:end="73:65"><call pos:start="73:17" pos:end="73:65"><name pos:start="73:17" pos:end="73:38">tcg_target_const_match</name><argument_list pos:start="73:39" pos:end="73:65">(<argument pos:start="73:40" pos:end="73:46"><expr pos:start="73:40" pos:end="73:46"><name pos:start="73:40" pos:end="73:46"><name pos:start="73:40" pos:end="73:41">ts</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:46">val</name></name></expr></argument>, <argument pos:start="73:49" pos:end="73:56"><expr pos:start="73:49" pos:end="73:56"><name pos:start="73:49" pos:end="73:56"><name pos:start="73:49" pos:end="73:50">ts</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:56">type</name></name></expr></argument>, <argument pos:start="73:59" pos:end="73:64"><expr pos:start="73:59" pos:end="73:64"><name pos:start="73:59" pos:end="73:64">arg_ct</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:68" pos:end="83:13">{<block_content pos:start="77:17" pos:end="81:30">

                <comment type="block" pos:start="75:17" pos:end="75:52">/* constant is OK for instruction */</comment>

                <expr_stmt pos:start="77:17" pos:end="77:34"><expr pos:start="77:17" pos:end="77:33"><name pos:start="77:17" pos:end="77:29"><name pos:start="77:17" pos:end="77:26">const_args</name><index pos:start="77:27" pos:end="77:29">[<expr pos:start="77:28" pos:end="77:28"><name pos:start="77:28" pos:end="77:28">i</name></expr>]</index></name> <operator pos:start="77:31" pos:end="77:31">=</operator> <literal type="number" pos:start="77:33" pos:end="77:33">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:38"><expr pos:start="79:17" pos:end="79:37"><name pos:start="79:17" pos:end="79:27"><name pos:start="79:17" pos:end="79:24">new_args</name><index pos:start="79:25" pos:end="79:27">[<expr pos:start="79:26" pos:end="79:26"><name pos:start="79:26" pos:end="79:26">i</name></expr>]</index></name> <operator pos:start="79:29" pos:end="79:29">=</operator> <name pos:start="79:31" pos:end="79:37"><name pos:start="79:31" pos:end="79:32">ts</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:37">val</name></name></expr>;</expr_stmt>

                <goto pos:start="81:17" pos:end="81:30">goto <name pos:start="81:22" pos:end="81:29">iarg_end</name>;</goto>

            </block_content>}</block></if> <else pos:start="83:15" pos:end="99:13">else <block pos:start="83:20" pos:end="99:13">{<block_content pos:start="87:17" pos:end="97:42">

                <comment type="block" pos:start="85:17" pos:end="85:48">/* need to move to a register */</comment>

                <expr_stmt pos:start="87:17" pos:end="87:71"><expr pos:start="87:17" pos:end="87:70"><name pos:start="87:17" pos:end="87:19">reg</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <call pos:start="87:23" pos:end="87:70"><name pos:start="87:23" pos:end="87:35">tcg_reg_alloc</name><argument_list pos:start="87:36" pos:end="87:70">(<argument pos:start="87:37" pos:end="87:37"><expr pos:start="87:37" pos:end="87:37"><name pos:start="87:37" pos:end="87:37">s</name></expr></argument>, <argument pos:start="87:40" pos:end="87:53"><expr pos:start="87:40" pos:end="87:53"><name pos:start="87:40" pos:end="87:53"><name pos:start="87:40" pos:end="87:45">arg_ct</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:48">u</name><operator pos:start="87:49" pos:end="87:49">.</operator><name pos:start="87:50" pos:end="87:53">regs</name></name></expr></argument>, <argument pos:start="87:56" pos:end="87:69"><expr pos:start="87:56" pos:end="87:69"><name pos:start="87:56" pos:end="87:69">allocated_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:56"><expr pos:start="89:17" pos:end="89:55"><call pos:start="89:17" pos:end="89:55"><name pos:start="89:17" pos:end="89:28">tcg_out_movi</name><argument_list pos:start="89:29" pos:end="89:55">(<argument pos:start="89:30" pos:end="89:30"><expr pos:start="89:30" pos:end="89:30"><name pos:start="89:30" pos:end="89:30">s</name></expr></argument>, <argument pos:start="89:33" pos:end="89:40"><expr pos:start="89:33" pos:end="89:40"><name pos:start="89:33" pos:end="89:40"><name pos:start="89:33" pos:end="89:34">ts</name><operator pos:start="89:35" pos:end="89:36">-&gt;</operator><name pos:start="89:37" pos:end="89:40">type</name></name></expr></argument>, <argument pos:start="89:43" pos:end="89:45"><expr pos:start="89:43" pos:end="89:45"><name pos:start="89:43" pos:end="89:45">reg</name></expr></argument>, <argument pos:start="89:48" pos:end="89:54"><expr pos:start="89:48" pos:end="89:54"><name pos:start="89:48" pos:end="89:54"><name pos:start="89:48" pos:end="89:49">ts</name><operator pos:start="89:50" pos:end="89:51">-&gt;</operator><name pos:start="89:52" pos:end="89:54">val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:44"><expr pos:start="91:17" pos:end="91:43"><name pos:start="91:17" pos:end="91:28"><name pos:start="91:17" pos:end="91:18">ts</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:28">val_type</name></name> <operator pos:start="91:30" pos:end="91:30">=</operator> <name pos:start="91:32" pos:end="91:43">TEMP_VAL_REG</name></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:30"><expr pos:start="93:17" pos:end="93:29"><name pos:start="93:17" pos:end="93:23"><name pos:start="93:17" pos:end="93:18">ts</name><operator pos:start="93:19" pos:end="93:20">-&gt;</operator><name pos:start="93:21" pos:end="93:23">reg</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:29">reg</name></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:37"><expr pos:start="95:17" pos:end="95:36"><name pos:start="95:17" pos:end="95:32"><name pos:start="95:17" pos:end="95:18">ts</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:32">mem_coherent</name></name> <operator pos:start="95:34" pos:end="95:34">=</operator> <literal type="number" pos:start="95:36" pos:end="95:36">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:42"><expr pos:start="97:17" pos:end="97:41"><name pos:start="97:17" pos:end="97:35"><name pos:start="97:17" pos:end="97:17">s</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:30">reg_to_temp</name><index pos:start="97:31" pos:end="97:35">[<expr pos:start="97:32" pos:end="97:34"><name pos:start="97:32" pos:end="97:34">reg</name></expr>]</index></name> <operator pos:start="97:37" pos:end="97:37">=</operator> <name pos:start="97:39" pos:end="97:41">arg</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:45"><expr pos:start="103:9" pos:end="103:44"><call pos:start="103:9" pos:end="103:44"><name pos:start="103:9" pos:end="103:14">assert</name><argument_list pos:start="103:15" pos:end="103:44">(<argument pos:start="103:16" pos:end="103:43"><expr pos:start="103:16" pos:end="103:43"><name pos:start="103:16" pos:end="103:27"><name pos:start="103:16" pos:end="103:17">ts</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:27">val_type</name></name> <operator pos:start="103:29" pos:end="103:30">==</operator> <name pos:start="103:32" pos:end="103:43">TEMP_VAL_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="153:9"><if pos:start="105:9" pos:end="153:9">if <condition pos:start="105:12" pos:end="105:39">(<expr pos:start="105:13" pos:end="105:38"><name pos:start="105:13" pos:end="105:22"><name pos:start="105:13" pos:end="105:18">arg_ct</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:22">ct</name></name> <operator pos:start="105:24" pos:end="105:24">&amp;</operator> <name pos:start="105:26" pos:end="105:38">TCG_CT_IALIAS</name></expr>)</condition> <block pos:start="105:41" pos:end="153:9">{<block_content pos:start="107:13" pos:end="151:13">

            <if_stmt pos:start="107:13" pos:end="151:13"><if pos:start="107:13" pos:end="117:13">if <condition pos:start="107:16" pos:end="107:30">(<expr pos:start="107:17" pos:end="107:29"><name pos:start="107:17" pos:end="107:29"><name pos:start="107:17" pos:end="107:18">ts</name><operator pos:start="107:19" pos:end="107:20">-&gt;</operator><name pos:start="107:21" pos:end="107:29">fixed_reg</name></name></expr>)</condition> <block pos:start="107:32" pos:end="117:13">{<block_content pos:start="113:17" pos:end="115:41">

                <comment type="block" pos:start="109:17" pos:end="111:59">/* if fixed register, we must allocate a new register

                   if the alias is not the same register */</comment>

                <if_stmt pos:start="113:17" pos:end="115:41"><if pos:start="113:17" pos:end="115:41">if <condition pos:start="113:20" pos:end="113:53">(<expr pos:start="113:21" pos:end="113:52"><name pos:start="113:21" pos:end="113:23">arg</name> <operator pos:start="113:25" pos:end="113:26">!=</operator> <name pos:start="113:28" pos:end="113:52"><name pos:start="113:28" pos:end="113:31">args</name><index pos:start="113:32" pos:end="113:52">[<expr pos:start="113:33" pos:end="113:51"><name pos:start="113:33" pos:end="113:51"><name pos:start="113:33" pos:end="113:38">arg_ct</name><operator pos:start="113:39" pos:end="113:40">-&gt;</operator><name pos:start="113:41" pos:end="113:51">alias_index</name></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="115:21" pos:end="115:41"><block_content pos:start="115:21" pos:end="115:41">

                    <goto pos:start="115:21" pos:end="115:41">goto <name pos:start="115:26" pos:end="115:40">allocate_in_reg</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="117:15" pos:end="151:13">else <block pos:start="117:20" pos:end="151:13">{<block_content pos:start="125:17" pos:end="149:17">

                <comment type="block" pos:start="119:17" pos:end="123:48">/* if the input is aliased to an output and if it is

                   not dead after the instruction, we must allocate

                   a new register and move it */</comment>

                <if_stmt pos:start="125:17" pos:end="129:17"><if pos:start="125:17" pos:end="129:17">if <condition pos:start="125:20" pos:end="125:36">(<expr pos:start="125:21" pos:end="125:35"><operator pos:start="125:21" pos:end="125:21">!</operator><call pos:start="125:22" pos:end="125:35"><name pos:start="125:22" pos:end="125:32">IS_DEAD_ARG</name><argument_list pos:start="125:33" pos:end="125:35">(<argument pos:start="125:34" pos:end="125:34"><expr pos:start="125:34" pos:end="125:34"><name pos:start="125:34" pos:end="125:34">i</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:38" pos:end="129:17">{<block_content pos:start="127:21" pos:end="127:41">

                    <goto pos:start="127:21" pos:end="127:41">goto <name pos:start="127:26" pos:end="127:40">allocate_in_reg</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="131:17" pos:end="133:60">/* check if the current register has already been allocated

                   for another input aliased to an output */</comment>

                <decl_stmt pos:start="135:17" pos:end="135:27"><decl pos:start="135:17" pos:end="135:22"><type pos:start="135:17" pos:end="135:19"><name pos:start="135:17" pos:end="135:19">int</name></type> <name pos:start="135:21" pos:end="135:22">k2</name></decl>, <decl pos:start="135:25" pos:end="135:26"><type ref="prev" pos:start="135:17" pos:end="135:19"/><name pos:start="135:25" pos:end="135:26">i2</name></decl>;</decl_stmt>

                <for pos:start="137:17" pos:end="149:17">for <control pos:start="137:21" pos:end="137:44">(<init pos:start="137:22" pos:end="137:29"><expr pos:start="137:22" pos:end="137:27"><name pos:start="137:22" pos:end="137:23">k2</name> <operator pos:start="137:25" pos:end="137:25">=</operator> <literal type="number" pos:start="137:27" pos:end="137:27">0</literal></expr> ;</init> <condition pos:start="137:31" pos:end="137:38"><expr pos:start="137:31" pos:end="137:36"><name pos:start="137:31" pos:end="137:32">k2</name> <operator pos:start="137:34" pos:end="137:34">&lt;</operator> <name pos:start="137:36" pos:end="137:36">k</name></expr> ;</condition> <incr pos:start="137:40" pos:end="137:43"><expr pos:start="137:40" pos:end="137:43"><name pos:start="137:40" pos:end="137:41">k2</name><operator pos:start="137:42" pos:end="137:43">++</operator></expr></incr>)</control> <block pos:start="137:46" pos:end="149:17">{<block_content pos:start="139:21" pos:end="147:21">

                    <expr_stmt pos:start="139:21" pos:end="139:57"><expr pos:start="139:21" pos:end="139:56"><name pos:start="139:21" pos:end="139:22">i2</name> <operator pos:start="139:24" pos:end="139:24">=</operator> <name pos:start="139:26" pos:end="139:56"><name pos:start="139:26" pos:end="139:28">def</name><operator pos:start="139:29" pos:end="139:30">-&gt;</operator><name pos:start="139:31" pos:end="139:41">sorted_args</name><index pos:start="139:42" pos:end="139:56">[<expr pos:start="139:43" pos:end="139:55"><name pos:start="139:43" pos:end="139:50">nb_oargs</name> <operator pos:start="139:52" pos:end="139:52">+</operator> <name pos:start="139:54" pos:end="139:55">k2</name></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="141:21" pos:end="147:21"><if pos:start="141:21" pos:end="147:21">if <condition pos:start="141:24" pos:end="143:50">(<expr pos:start="141:25" pos:end="143:49"><operator pos:start="141:25" pos:end="141:25">(</operator><name pos:start="141:26" pos:end="141:41"><name pos:start="141:26" pos:end="141:28">def</name><operator pos:start="141:29" pos:end="141:30">-&gt;</operator><name pos:start="141:31" pos:end="141:37">args_ct</name><index pos:start="141:38" pos:end="141:41">[<expr pos:start="141:39" pos:end="141:40"><name pos:start="141:39" pos:end="141:40">i2</name></expr>]</index></name><operator pos:start="141:42" pos:end="141:42">.</operator><name pos:start="141:43" pos:end="141:44">ct</name> <operator pos:start="141:46" pos:end="141:46">&amp;</operator> <name pos:start="141:48" pos:end="141:60">TCG_CT_IALIAS</name><operator pos:start="141:61" pos:end="141:61">)</operator> <operator pos:start="141:63" pos:end="141:64">&amp;&amp;</operator>

                        <operator pos:start="143:25" pos:end="143:25">(</operator><name pos:start="143:26" pos:end="143:37"><name pos:start="143:26" pos:end="143:33">new_args</name><index pos:start="143:34" pos:end="143:37">[<expr pos:start="143:35" pos:end="143:36"><name pos:start="143:35" pos:end="143:36">i2</name></expr>]</index></name> <operator pos:start="143:39" pos:end="143:40">==</operator> <name pos:start="143:42" pos:end="143:48"><name pos:start="143:42" pos:end="143:43">ts</name><operator pos:start="143:44" pos:end="143:45">-&gt;</operator><name pos:start="143:46" pos:end="143:48">reg</name></name><operator pos:start="143:49" pos:end="143:49">)</operator></expr>)</condition> <block pos:start="143:52" pos:end="147:21">{<block_content pos:start="145:25" pos:end="145:45">

                        <goto pos:start="145:25" pos:end="145:45">goto <name pos:start="145:30" pos:end="145:44">allocate_in_reg</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:22"><expr pos:start="155:9" pos:end="155:21"><name pos:start="155:9" pos:end="155:11">reg</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <name pos:start="155:15" pos:end="155:21"><name pos:start="155:15" pos:end="155:16">ts</name><operator pos:start="155:17" pos:end="155:18">-&gt;</operator><name pos:start="155:19" pos:end="155:21">reg</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="173:9"><if pos:start="157:9" pos:end="161:9">if <condition pos:start="157:12" pos:end="157:53">(<expr pos:start="157:13" pos:end="157:52"><call pos:start="157:13" pos:end="157:52"><name pos:start="157:13" pos:end="157:31">tcg_regset_test_reg</name><argument_list pos:start="157:32" pos:end="157:52">(<argument pos:start="157:33" pos:end="157:46"><expr pos:start="157:33" pos:end="157:46"><name pos:start="157:33" pos:end="157:46"><name pos:start="157:33" pos:end="157:38">arg_ct</name><operator pos:start="157:39" pos:end="157:40">-&gt;</operator><name pos:start="157:41" pos:end="157:41">u</name><operator pos:start="157:42" pos:end="157:42">.</operator><name pos:start="157:43" pos:end="157:46">regs</name></name></expr></argument>, <argument pos:start="157:49" pos:end="157:51"><expr pos:start="157:49" pos:end="157:51"><name pos:start="157:49" pos:end="157:51">reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:55" pos:end="161:9">{<block_content>

            <comment type="block" pos:start="159:13" pos:end="159:61">/* nothing to do : the constraint is satisfied */</comment>

        </block_content>}</block></if> <else pos:start="161:11" pos:end="173:9">else <block pos:start="161:16" pos:end="173:9">{<block_content pos:start="163:9" pos:end="171:51">

        <label pos:start="163:9" pos:end="163:24"><name pos:start="163:9" pos:end="163:23">allocate_in_reg</name>:</label>

            <comment type="block" pos:start="165:13" pos:end="167:57">/* allocate a new register matching the constraint 

               and move the temporary register into it */</comment>

            <expr_stmt pos:start="169:13" pos:end="169:67"><expr pos:start="169:13" pos:end="169:66"><name pos:start="169:13" pos:end="169:15">reg</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="169:66"><name pos:start="169:19" pos:end="169:31">tcg_reg_alloc</name><argument_list pos:start="169:32" pos:end="169:66">(<argument pos:start="169:33" pos:end="169:33"><expr pos:start="169:33" pos:end="169:33"><name pos:start="169:33" pos:end="169:33">s</name></expr></argument>, <argument pos:start="169:36" pos:end="169:49"><expr pos:start="169:36" pos:end="169:49"><name pos:start="169:36" pos:end="169:49"><name pos:start="169:36" pos:end="169:41">arg_ct</name><operator pos:start="169:42" pos:end="169:43">-&gt;</operator><name pos:start="169:44" pos:end="169:44">u</name><operator pos:start="169:45" pos:end="169:45">.</operator><name pos:start="169:46" pos:end="169:49">regs</name></name></expr></argument>, <argument pos:start="169:52" pos:end="169:65"><expr pos:start="169:52" pos:end="169:65"><name pos:start="169:52" pos:end="169:65">allocated_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:51"><expr pos:start="171:13" pos:end="171:50"><call pos:start="171:13" pos:end="171:50"><name pos:start="171:13" pos:end="171:23">tcg_out_mov</name><argument_list pos:start="171:24" pos:end="171:50">(<argument pos:start="171:25" pos:end="171:25"><expr pos:start="171:25" pos:end="171:25"><name pos:start="171:25" pos:end="171:25">s</name></expr></argument>, <argument pos:start="171:28" pos:end="171:35"><expr pos:start="171:28" pos:end="171:35"><name pos:start="171:28" pos:end="171:35"><name pos:start="171:28" pos:end="171:29">ts</name><operator pos:start="171:30" pos:end="171:31">-&gt;</operator><name pos:start="171:32" pos:end="171:35">type</name></name></expr></argument>, <argument pos:start="171:38" pos:end="171:40"><expr pos:start="171:38" pos:end="171:40"><name pos:start="171:38" pos:end="171:40">reg</name></expr></argument>, <argument pos:start="171:43" pos:end="171:49"><expr pos:start="171:43" pos:end="171:49"><name pos:start="171:43" pos:end="171:49"><name pos:start="171:43" pos:end="171:44">ts</name><operator pos:start="171:45" pos:end="171:46">-&gt;</operator><name pos:start="171:47" pos:end="171:49">reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:26"><expr pos:start="175:9" pos:end="175:25"><name pos:start="175:9" pos:end="175:19"><name pos:start="175:9" pos:end="175:16">new_args</name><index pos:start="175:17" pos:end="175:19">[<expr pos:start="175:18" pos:end="175:18"><name pos:start="175:18" pos:end="175:18">i</name></expr>]</index></name> <operator pos:start="175:21" pos:end="175:21">=</operator> <name pos:start="175:23" pos:end="175:25">reg</name></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:26"><expr pos:start="177:9" pos:end="177:25"><name pos:start="177:9" pos:end="177:21"><name pos:start="177:9" pos:end="177:18">const_args</name><index pos:start="177:19" pos:end="177:21">[<expr pos:start="177:20" pos:end="177:20"><name pos:start="177:20" pos:end="177:20">i</name></expr>]</index></name> <operator pos:start="177:23" pos:end="177:23">=</operator> <literal type="number" pos:start="177:25" pos:end="177:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:48"><expr pos:start="179:9" pos:end="179:47"><call pos:start="179:9" pos:end="179:47"><name pos:start="179:9" pos:end="179:26">tcg_regset_set_reg</name><argument_list pos:start="179:27" pos:end="179:47">(<argument pos:start="179:28" pos:end="179:41"><expr pos:start="179:28" pos:end="179:41"><name pos:start="179:28" pos:end="179:41">allocated_regs</name></expr></argument>, <argument pos:start="179:44" pos:end="179:46"><expr pos:start="179:44" pos:end="179:46"><name pos:start="179:44" pos:end="179:46">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="181:5" pos:end="181:13"><name pos:start="181:5" pos:end="181:12">iarg_end</name>:</label> <empty_stmt pos:start="181:15" pos:end="181:15">;</empty_stmt>

    </block_content>}</block></for>

    

    <comment type="block" pos:start="187:5" pos:end="187:65">/* mark dead temporaries and free the associated registers */</comment>

    <for pos:start="189:5" pos:end="197:5">for <control pos:start="189:9" pos:end="189:52">(<init pos:start="189:10" pos:end="189:22"><expr pos:start="189:10" pos:end="189:21"><name pos:start="189:10" pos:end="189:10">i</name> <operator pos:start="189:12" pos:end="189:12">=</operator> <name pos:start="189:14" pos:end="189:21">nb_oargs</name></expr>;</init> <condition pos:start="189:24" pos:end="189:47"><expr pos:start="189:24" pos:end="189:46"><name pos:start="189:24" pos:end="189:24">i</name> <operator pos:start="189:26" pos:end="189:26">&lt;</operator> <name pos:start="189:28" pos:end="189:35">nb_oargs</name> <operator pos:start="189:37" pos:end="189:37">+</operator> <name pos:start="189:39" pos:end="189:46">nb_iargs</name></expr>;</condition> <incr pos:start="189:49" pos:end="189:51"><expr pos:start="189:49" pos:end="189:51"><name pos:start="189:49" pos:end="189:49">i</name><operator pos:start="189:50" pos:end="189:51">++</operator></expr></incr>)</control> <block pos:start="189:54" pos:end="197:5">{<block_content pos:start="191:9" pos:end="195:9">

        <if_stmt pos:start="191:9" pos:end="195:9"><if pos:start="191:9" pos:end="195:9">if <condition pos:start="191:12" pos:end="191:27">(<expr pos:start="191:13" pos:end="191:26"><call pos:start="191:13" pos:end="191:26"><name pos:start="191:13" pos:end="191:23">IS_DEAD_ARG</name><argument_list pos:start="191:24" pos:end="191:26">(<argument pos:start="191:25" pos:end="191:25"><expr pos:start="191:25" pos:end="191:25"><name pos:start="191:25" pos:end="191:25">i</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:29" pos:end="195:9">{<block_content pos:start="193:13" pos:end="193:34">

            <expr_stmt pos:start="193:13" pos:end="193:34"><expr pos:start="193:13" pos:end="193:33"><call pos:start="193:13" pos:end="193:33"><name pos:start="193:13" pos:end="193:21">temp_dead</name><argument_list pos:start="193:22" pos:end="193:33">(<argument pos:start="193:23" pos:end="193:23"><expr pos:start="193:23" pos:end="193:23"><name pos:start="193:23" pos:end="193:23">s</name></expr></argument>, <argument pos:start="193:26" pos:end="193:32"><expr pos:start="193:26" pos:end="193:32"><name pos:start="193:26" pos:end="193:32"><name pos:start="193:26" pos:end="193:29">args</name><index pos:start="193:30" pos:end="193:32">[<expr pos:start="193:31" pos:end="193:31"><name pos:start="193:31" pos:end="193:31">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="201:5" pos:end="303:5"><if pos:start="201:5" pos:end="205:5">if <condition pos:start="201:8" pos:end="201:36">(<expr pos:start="201:9" pos:end="201:35"><name pos:start="201:9" pos:end="201:18"><name pos:start="201:9" pos:end="201:11">def</name><operator pos:start="201:12" pos:end="201:13">-&gt;</operator><name pos:start="201:14" pos:end="201:18">flags</name></name> <operator pos:start="201:20" pos:end="201:20">&amp;</operator> <name pos:start="201:22" pos:end="201:35">TCG_OPF_BB_END</name></expr>)</condition> <block pos:start="201:38" pos:end="205:5">{<block_content pos:start="203:9" pos:end="203:48">

        <expr_stmt pos:start="203:9" pos:end="203:48"><expr pos:start="203:9" pos:end="203:47"><call pos:start="203:9" pos:end="203:47"><name pos:start="203:9" pos:end="203:28">tcg_reg_alloc_bb_end</name><argument_list pos:start="203:29" pos:end="203:47">(<argument pos:start="203:30" pos:end="203:30"><expr pos:start="203:30" pos:end="203:30"><name pos:start="203:30" pos:end="203:30">s</name></expr></argument>, <argument pos:start="203:33" pos:end="203:46"><expr pos:start="203:33" pos:end="203:46"><name pos:start="203:33" pos:end="203:46">allocated_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="205:7" pos:end="303:5">else <block pos:start="205:12" pos:end="303:5">{<block_content pos:start="207:9" pos:end="301:9">

        <if_stmt pos:start="207:9" pos:end="221:9"><if pos:start="207:9" pos:end="221:9">if <condition pos:start="207:12" pos:end="207:46">(<expr pos:start="207:13" pos:end="207:45"><name pos:start="207:13" pos:end="207:22"><name pos:start="207:13" pos:end="207:15">def</name><operator pos:start="207:16" pos:end="207:17">-&gt;</operator><name pos:start="207:18" pos:end="207:22">flags</name></name> <operator pos:start="207:24" pos:end="207:24">&amp;</operator> <name pos:start="207:26" pos:end="207:45">TCG_OPF_CALL_CLOBBER</name></expr>)</condition> <block pos:start="207:48" pos:end="221:9">{<block_content pos:start="211:13" pos:end="219:13">

            <comment type="block" pos:start="209:13" pos:end="209:61">/* XXX: permit generic clobber register list ? */</comment> 

            <for pos:start="211:13" pos:end="219:13">for<control pos:start="211:16" pos:end="211:57">(<init pos:start="211:17" pos:end="211:24"><expr pos:start="211:17" pos:end="211:23"><name pos:start="211:17" pos:end="211:19">reg</name> <operator pos:start="211:21" pos:end="211:21">=</operator> <literal type="number" pos:start="211:23" pos:end="211:23">0</literal></expr>;</init> <condition pos:start="211:26" pos:end="211:50"><expr pos:start="211:26" pos:end="211:49"><name pos:start="211:26" pos:end="211:28">reg</name> <operator pos:start="211:30" pos:end="211:30">&lt;</operator> <name pos:start="211:32" pos:end="211:49">TCG_TARGET_NB_REGS</name></expr>;</condition> <incr pos:start="211:52" pos:end="211:56"><expr pos:start="211:52" pos:end="211:56"><name pos:start="211:52" pos:end="211:54">reg</name><operator pos:start="211:55" pos:end="211:56">++</operator></expr></incr>)</control> <block pos:start="211:59" pos:end="219:13">{<block_content pos:start="213:17" pos:end="217:17">

                <if_stmt pos:start="213:17" pos:end="217:17"><if pos:start="213:17" pos:end="217:17">if <condition pos:start="213:20" pos:end="213:75">(<expr pos:start="213:21" pos:end="213:74"><call pos:start="213:21" pos:end="213:74"><name pos:start="213:21" pos:end="213:39">tcg_regset_test_reg</name><argument_list pos:start="213:40" pos:end="213:74">(<argument pos:start="213:41" pos:end="213:68"><expr pos:start="213:41" pos:end="213:68"><name pos:start="213:41" pos:end="213:68">tcg_target_call_clobber_regs</name></expr></argument>, <argument pos:start="213:71" pos:end="213:73"><expr pos:start="213:71" pos:end="213:73"><name pos:start="213:71" pos:end="213:73">reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="213:77" pos:end="217:17">{<block_content pos:start="215:21" pos:end="215:41">

                    <expr_stmt pos:start="215:21" pos:end="215:41"><expr pos:start="215:21" pos:end="215:40"><call pos:start="215:21" pos:end="215:40"><name pos:start="215:21" pos:end="215:32">tcg_reg_free</name><argument_list pos:start="215:33" pos:end="215:40">(<argument pos:start="215:34" pos:end="215:34"><expr pos:start="215:34" pos:end="215:34"><name pos:start="215:34" pos:end="215:34">s</name></expr></argument>, <argument pos:start="215:37" pos:end="215:39"><expr pos:start="215:37" pos:end="215:39"><name pos:start="215:37" pos:end="215:39">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="223:9" pos:end="231:9"><if pos:start="223:9" pos:end="231:9">if <condition pos:start="223:12" pos:end="223:46">(<expr pos:start="223:13" pos:end="223:45"><name pos:start="223:13" pos:end="223:22"><name pos:start="223:13" pos:end="223:15">def</name><operator pos:start="223:16" pos:end="223:17">-&gt;</operator><name pos:start="223:18" pos:end="223:22">flags</name></name> <operator pos:start="223:24" pos:end="223:24">&amp;</operator> <name pos:start="223:26" pos:end="223:45">TCG_OPF_SIDE_EFFECTS</name></expr>)</condition> <block pos:start="223:48" pos:end="231:9">{<block_content pos:start="229:13" pos:end="229:44">

            <comment type="block" pos:start="225:13" pos:end="227:31">/* sync globals if the op has side effects and might trigger

               an exception. */</comment>

            <expr_stmt pos:start="229:13" pos:end="229:44"><expr pos:start="229:13" pos:end="229:43"><call pos:start="229:13" pos:end="229:43"><name pos:start="229:13" pos:end="229:24">sync_globals</name><argument_list pos:start="229:25" pos:end="229:43">(<argument pos:start="229:26" pos:end="229:26"><expr pos:start="229:26" pos:end="229:26"><name pos:start="229:26" pos:end="229:26">s</name></expr></argument>, <argument pos:start="229:29" pos:end="229:42"><expr pos:start="229:29" pos:end="229:42"><name pos:start="229:29" pos:end="229:42">allocated_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        

        <comment type="block" pos:start="235:9" pos:end="235:44">/* satisfy the output constraints */</comment>

        <expr_stmt pos:start="237:9" pos:end="237:57"><expr pos:start="237:9" pos:end="237:56"><call pos:start="237:9" pos:end="237:56"><name pos:start="237:9" pos:end="237:22">tcg_regset_set</name><argument_list pos:start="237:23" pos:end="237:56">(<argument pos:start="237:24" pos:end="237:37"><expr pos:start="237:24" pos:end="237:37"><name pos:start="237:24" pos:end="237:37">allocated_regs</name></expr></argument>, <argument pos:start="237:40" pos:end="237:55"><expr pos:start="237:40" pos:end="237:55"><name pos:start="237:40" pos:end="237:55"><name pos:start="237:40" pos:end="237:40">s</name><operator pos:start="237:41" pos:end="237:42">-&gt;</operator><name pos:start="237:43" pos:end="237:55">reserved_regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="239:9" pos:end="301:9">for<control pos:start="239:12" pos:end="239:37">(<init pos:start="239:13" pos:end="239:18"><expr pos:start="239:13" pos:end="239:17"><name pos:start="239:13" pos:end="239:13">k</name> <operator pos:start="239:15" pos:end="239:15">=</operator> <literal type="number" pos:start="239:17" pos:end="239:17">0</literal></expr>;</init> <condition pos:start="239:20" pos:end="239:32"><expr pos:start="239:20" pos:end="239:31"><name pos:start="239:20" pos:end="239:20">k</name> <operator pos:start="239:22" pos:end="239:22">&lt;</operator> <name pos:start="239:24" pos:end="239:31">nb_oargs</name></expr>;</condition> <incr pos:start="239:34" pos:end="239:36"><expr pos:start="239:34" pos:end="239:36"><name pos:start="239:34" pos:end="239:34">k</name><operator pos:start="239:35" pos:end="239:36">++</operator></expr></incr>)</control> <block pos:start="239:39" pos:end="301:9">{<block_content pos:start="241:13" pos:end="299:30">

            <expr_stmt pos:start="241:13" pos:end="241:36"><expr pos:start="241:13" pos:end="241:35"><name pos:start="241:13" pos:end="241:13">i</name> <operator pos:start="241:15" pos:end="241:15">=</operator> <name pos:start="241:17" pos:end="241:35"><name pos:start="241:17" pos:end="241:19">def</name><operator pos:start="241:20" pos:end="241:21">-&gt;</operator><name pos:start="241:22" pos:end="241:32">sorted_args</name><index pos:start="241:33" pos:end="241:35">[<expr pos:start="241:34" pos:end="241:34"><name pos:start="241:34" pos:end="241:34">k</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:26"><expr pos:start="243:13" pos:end="243:25"><name pos:start="243:13" pos:end="243:15">arg</name> <operator pos:start="243:17" pos:end="243:17">=</operator> <name pos:start="243:19" pos:end="243:25"><name pos:start="243:19" pos:end="243:22">args</name><index pos:start="243:23" pos:end="243:25">[<expr pos:start="243:24" pos:end="243:24"><name pos:start="243:24" pos:end="243:24">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:38"><expr pos:start="245:13" pos:end="245:37"><name pos:start="245:13" pos:end="245:18">arg_ct</name> <operator pos:start="245:20" pos:end="245:20">=</operator> <operator pos:start="245:22" pos:end="245:22">&amp;</operator><name pos:start="245:23" pos:end="245:37"><name pos:start="245:23" pos:end="245:25">def</name><operator pos:start="245:26" pos:end="245:27">-&gt;</operator><name pos:start="245:28" pos:end="245:34">args_ct</name><index pos:start="245:35" pos:end="245:37">[<expr pos:start="245:36" pos:end="245:36"><name pos:start="245:36" pos:end="245:36">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:32"><expr pos:start="247:13" pos:end="247:31"><name pos:start="247:13" pos:end="247:14">ts</name> <operator pos:start="247:16" pos:end="247:16">=</operator> <operator pos:start="247:18" pos:end="247:18">&amp;</operator><name pos:start="247:19" pos:end="247:31"><name pos:start="247:19" pos:end="247:19">s</name><operator pos:start="247:20" pos:end="247:21">-&gt;</operator><name pos:start="247:22" pos:end="247:26">temps</name><index pos:start="247:27" pos:end="247:31">[<expr pos:start="247:28" pos:end="247:30"><name pos:start="247:28" pos:end="247:30">arg</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="249:13" pos:end="269:13"><if pos:start="249:13" pos:end="253:13">if <condition pos:start="249:16" pos:end="249:42">(<expr pos:start="249:17" pos:end="249:41"><name pos:start="249:17" pos:end="249:26"><name pos:start="249:17" pos:end="249:22">arg_ct</name><operator pos:start="249:23" pos:end="249:24">-&gt;</operator><name pos:start="249:25" pos:end="249:26">ct</name></name> <operator pos:start="249:28" pos:end="249:28">&amp;</operator> <name pos:start="249:30" pos:end="249:41">TCG_CT_ALIAS</name></expr>)</condition> <block pos:start="249:44" pos:end="253:13">{<block_content pos:start="251:17" pos:end="251:52">

                <expr_stmt pos:start="251:17" pos:end="251:52"><expr pos:start="251:17" pos:end="251:51"><name pos:start="251:17" pos:end="251:19">reg</name> <operator pos:start="251:21" pos:end="251:21">=</operator> <name pos:start="251:23" pos:end="251:51"><name pos:start="251:23" pos:end="251:30">new_args</name><index pos:start="251:31" pos:end="251:51">[<expr pos:start="251:32" pos:end="251:50"><name pos:start="251:32" pos:end="251:50"><name pos:start="251:32" pos:end="251:37">arg_ct</name><operator pos:start="251:38" pos:end="251:39">-&gt;</operator><name pos:start="251:40" pos:end="251:50">alias_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="253:15" pos:end="269:13">else <block pos:start="253:20" pos:end="269:13">{<block_content pos:start="257:17" pos:end="267:71">

                <comment type="block" pos:start="255:17" pos:end="255:57">/* if fixed register, we try to use it */</comment>

                <expr_stmt pos:start="257:17" pos:end="257:30"><expr pos:start="257:17" pos:end="257:29"><name pos:start="257:17" pos:end="257:19">reg</name> <operator pos:start="257:21" pos:end="257:21">=</operator> <name pos:start="257:23" pos:end="257:29"><name pos:start="257:23" pos:end="257:24">ts</name><operator pos:start="257:25" pos:end="257:26">-&gt;</operator><name pos:start="257:27" pos:end="257:29">reg</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="259:17" pos:end="265:17"><if pos:start="259:17" pos:end="265:17">if <condition pos:start="259:20" pos:end="261:61">(<expr pos:start="259:21" pos:end="261:60"><name pos:start="259:21" pos:end="259:33"><name pos:start="259:21" pos:end="259:22">ts</name><operator pos:start="259:23" pos:end="259:24">-&gt;</operator><name pos:start="259:25" pos:end="259:33">fixed_reg</name></name> <operator pos:start="259:35" pos:end="259:36">&amp;&amp;</operator>

                    <call pos:start="261:21" pos:end="261:60"><name pos:start="261:21" pos:end="261:39">tcg_regset_test_reg</name><argument_list pos:start="261:40" pos:end="261:60">(<argument pos:start="261:41" pos:end="261:54"><expr pos:start="261:41" pos:end="261:54"><name pos:start="261:41" pos:end="261:54"><name pos:start="261:41" pos:end="261:46">arg_ct</name><operator pos:start="261:47" pos:end="261:48">-&gt;</operator><name pos:start="261:49" pos:end="261:49">u</name><operator pos:start="261:50" pos:end="261:50">.</operator><name pos:start="261:51" pos:end="261:54">regs</name></name></expr></argument>, <argument pos:start="261:57" pos:end="261:59"><expr pos:start="261:57" pos:end="261:59"><name pos:start="261:57" pos:end="261:59">reg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="261:63" pos:end="265:17">{<block_content pos:start="263:21" pos:end="263:34">

                    <goto pos:start="263:21" pos:end="263:34">goto <name pos:start="263:26" pos:end="263:33">oarg_end</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:71"><expr pos:start="267:17" pos:end="267:70"><name pos:start="267:17" pos:end="267:19">reg</name> <operator pos:start="267:21" pos:end="267:21">=</operator> <call pos:start="267:23" pos:end="267:70"><name pos:start="267:23" pos:end="267:35">tcg_reg_alloc</name><argument_list pos:start="267:36" pos:end="267:70">(<argument pos:start="267:37" pos:end="267:37"><expr pos:start="267:37" pos:end="267:37"><name pos:start="267:37" pos:end="267:37">s</name></expr></argument>, <argument pos:start="267:40" pos:end="267:53"><expr pos:start="267:40" pos:end="267:53"><name pos:start="267:40" pos:end="267:53"><name pos:start="267:40" pos:end="267:45">arg_ct</name><operator pos:start="267:46" pos:end="267:47">-&gt;</operator><name pos:start="267:48" pos:end="267:48">u</name><operator pos:start="267:49" pos:end="267:49">.</operator><name pos:start="267:50" pos:end="267:53">regs</name></name></expr></argument>, <argument pos:start="267:56" pos:end="267:69"><expr pos:start="267:56" pos:end="267:69"><name pos:start="267:56" pos:end="267:69">allocated_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:52"><expr pos:start="271:13" pos:end="271:51"><call pos:start="271:13" pos:end="271:51"><name pos:start="271:13" pos:end="271:30">tcg_regset_set_reg</name><argument_list pos:start="271:31" pos:end="271:51">(<argument pos:start="271:32" pos:end="271:45"><expr pos:start="271:32" pos:end="271:45"><name pos:start="271:32" pos:end="271:45">allocated_regs</name></expr></argument>, <argument pos:start="271:48" pos:end="271:50"><expr pos:start="271:48" pos:end="271:50"><name pos:start="271:48" pos:end="271:50">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="273:13" pos:end="273:82">/* if a fixed register is used, then a move will be done afterwards */</comment>

            <if_stmt pos:start="275:13" pos:end="295:13"><if pos:start="275:13" pos:end="295:13">if <condition pos:start="275:16" pos:end="275:31">(<expr pos:start="275:17" pos:end="275:30"><operator pos:start="275:17" pos:end="275:17">!</operator><name pos:start="275:18" pos:end="275:30"><name pos:start="275:18" pos:end="275:19">ts</name><operator pos:start="275:20" pos:end="275:21">-&gt;</operator><name pos:start="275:22" pos:end="275:30">fixed_reg</name></name></expr>)</condition> <block pos:start="275:33" pos:end="295:13">{<block_content pos:start="277:17" pos:end="293:42">

                <if_stmt pos:start="277:17" pos:end="281:17"><if pos:start="277:17" pos:end="281:17">if <condition pos:start="277:20" pos:end="277:49">(<expr pos:start="277:21" pos:end="277:48"><name pos:start="277:21" pos:end="277:32"><name pos:start="277:21" pos:end="277:22">ts</name><operator pos:start="277:23" pos:end="277:24">-&gt;</operator><name pos:start="277:25" pos:end="277:32">val_type</name></name> <operator pos:start="277:34" pos:end="277:35">==</operator> <name pos:start="277:37" pos:end="277:48">TEMP_VAL_REG</name></expr>)</condition> <block pos:start="277:51" pos:end="281:17">{<block_content pos:start="279:21" pos:end="279:49">

                    <expr_stmt pos:start="279:21" pos:end="279:49"><expr pos:start="279:21" pos:end="279:48"><name pos:start="279:21" pos:end="279:43"><name pos:start="279:21" pos:end="279:21">s</name><operator pos:start="279:22" pos:end="279:23">-&gt;</operator><name pos:start="279:24" pos:end="279:34">reg_to_temp</name><index pos:start="279:35" pos:end="279:43">[<expr pos:start="279:36" pos:end="279:42"><name pos:start="279:36" pos:end="279:42"><name pos:start="279:36" pos:end="279:37">ts</name><operator pos:start="279:38" pos:end="279:39">-&gt;</operator><name pos:start="279:40" pos:end="279:42">reg</name></name></expr>]</index></name> <operator pos:start="279:45" pos:end="279:45">=</operator> <operator pos:start="279:47" pos:end="279:47">-</operator><literal type="number" pos:start="279:48" pos:end="279:48">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="283:17" pos:end="283:44"><expr pos:start="283:17" pos:end="283:43"><name pos:start="283:17" pos:end="283:28"><name pos:start="283:17" pos:end="283:18">ts</name><operator pos:start="283:19" pos:end="283:20">-&gt;</operator><name pos:start="283:21" pos:end="283:28">val_type</name></name> <operator pos:start="283:30" pos:end="283:30">=</operator> <name pos:start="283:32" pos:end="283:43">TEMP_VAL_REG</name></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:30"><expr pos:start="285:17" pos:end="285:29"><name pos:start="285:17" pos:end="285:23"><name pos:start="285:17" pos:end="285:18">ts</name><operator pos:start="285:19" pos:end="285:20">-&gt;</operator><name pos:start="285:21" pos:end="285:23">reg</name></name> <operator pos:start="285:25" pos:end="285:25">=</operator> <name pos:start="285:27" pos:end="285:29">reg</name></expr>;</expr_stmt>

                <comment type="block" pos:start="287:17" pos:end="289:46">/* temp value is modified, so the value kept in memory is

                   potentially not the same */</comment>

                <expr_stmt pos:start="291:17" pos:end="291:37"><expr pos:start="291:17" pos:end="291:36"><name pos:start="291:17" pos:end="291:32"><name pos:start="291:17" pos:end="291:18">ts</name><operator pos:start="291:19" pos:end="291:20">-&gt;</operator><name pos:start="291:21" pos:end="291:32">mem_coherent</name></name> <operator pos:start="291:34" pos:end="291:34">=</operator> <literal type="number" pos:start="291:36" pos:end="291:36">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:42"><expr pos:start="293:17" pos:end="293:41"><name pos:start="293:17" pos:end="293:35"><name pos:start="293:17" pos:end="293:17">s</name><operator pos:start="293:18" pos:end="293:19">-&gt;</operator><name pos:start="293:20" pos:end="293:30">reg_to_temp</name><index pos:start="293:31" pos:end="293:35">[<expr pos:start="293:32" pos:end="293:34"><name pos:start="293:32" pos:end="293:34">reg</name></expr>]</index></name> <operator pos:start="293:37" pos:end="293:37">=</operator> <name pos:start="293:39" pos:end="293:41">arg</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        <label pos:start="297:9" pos:end="297:17"><name pos:start="297:9" pos:end="297:16">oarg_end</name>:</label>

            <expr_stmt pos:start="299:13" pos:end="299:30"><expr pos:start="299:13" pos:end="299:29"><name pos:start="299:13" pos:end="299:23"><name pos:start="299:13" pos:end="299:20">new_args</name><index pos:start="299:21" pos:end="299:23">[<expr pos:start="299:22" pos:end="299:22"><name pos:start="299:22" pos:end="299:22">i</name></expr>]</index></name> <operator pos:start="299:25" pos:end="299:25">=</operator> <name pos:start="299:27" pos:end="299:29">reg</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="307:5" pos:end="307:26">/* emit instruction */</comment>

    <expr_stmt pos:start="309:5" pos:end="309:45"><expr pos:start="309:5" pos:end="309:44"><call pos:start="309:5" pos:end="309:44"><name pos:start="309:5" pos:end="309:14">tcg_out_op</name><argument_list pos:start="309:15" pos:end="309:44">(<argument pos:start="309:16" pos:end="309:16"><expr pos:start="309:16" pos:end="309:16"><name pos:start="309:16" pos:end="309:16">s</name></expr></argument>, <argument pos:start="309:19" pos:end="309:21"><expr pos:start="309:19" pos:end="309:21"><name pos:start="309:19" pos:end="309:21">opc</name></expr></argument>, <argument pos:start="309:24" pos:end="309:31"><expr pos:start="309:24" pos:end="309:31"><name pos:start="309:24" pos:end="309:31">new_args</name></expr></argument>, <argument pos:start="309:34" pos:end="309:43"><expr pos:start="309:34" pos:end="309:43"><name pos:start="309:34" pos:end="309:43">const_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <comment type="block" pos:start="313:5" pos:end="313:60">/* move the outputs in the correct register if needed */</comment>

    <for pos:start="315:5" pos:end="339:5">for<control pos:start="315:8" pos:end="315:33">(<init pos:start="315:9" pos:end="315:14"><expr pos:start="315:9" pos:end="315:13"><name pos:start="315:9" pos:end="315:9">i</name> <operator pos:start="315:11" pos:end="315:11">=</operator> <literal type="number" pos:start="315:13" pos:end="315:13">0</literal></expr>;</init> <condition pos:start="315:16" pos:end="315:28"><expr pos:start="315:16" pos:end="315:27"><name pos:start="315:16" pos:end="315:16">i</name> <operator pos:start="315:18" pos:end="315:18">&lt;</operator> <name pos:start="315:20" pos:end="315:27">nb_oargs</name></expr>;</condition> <incr pos:start="315:30" pos:end="315:32"><expr pos:start="315:30" pos:end="315:32"><name pos:start="315:30" pos:end="315:30">i</name><operator pos:start="315:31" pos:end="315:32">++</operator></expr></incr>)</control> <block pos:start="315:35" pos:end="339:5">{<block_content pos:start="317:9" pos:end="337:9">

        <expr_stmt pos:start="317:9" pos:end="317:32"><expr pos:start="317:9" pos:end="317:31"><name pos:start="317:9" pos:end="317:10">ts</name> <operator pos:start="317:12" pos:end="317:12">=</operator> <operator pos:start="317:14" pos:end="317:14">&amp;</operator><name pos:start="317:15" pos:end="317:31"><name pos:start="317:15" pos:end="317:15">s</name><operator pos:start="317:16" pos:end="317:17">-&gt;</operator><name pos:start="317:18" pos:end="317:22">temps</name><index pos:start="317:23" pos:end="317:31">[<expr pos:start="317:24" pos:end="317:30"><name pos:start="317:24" pos:end="317:30"><name pos:start="317:24" pos:end="317:27">args</name><index pos:start="317:28" pos:end="317:30">[<expr pos:start="317:29" pos:end="317:29"><name pos:start="317:29" pos:end="317:29">i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:26"><expr pos:start="319:9" pos:end="319:25"><name pos:start="319:9" pos:end="319:11">reg</name> <operator pos:start="319:13" pos:end="319:13">=</operator> <name pos:start="319:15" pos:end="319:25"><name pos:start="319:15" pos:end="319:22">new_args</name><index pos:start="319:23" pos:end="319:25">[<expr pos:start="319:24" pos:end="319:24"><name pos:start="319:24" pos:end="319:24">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="321:9" pos:end="325:9"><if pos:start="321:9" pos:end="325:9">if <condition pos:start="321:12" pos:end="321:44">(<expr pos:start="321:13" pos:end="321:43"><name pos:start="321:13" pos:end="321:25"><name pos:start="321:13" pos:end="321:14">ts</name><operator pos:start="321:15" pos:end="321:16">-&gt;</operator><name pos:start="321:17" pos:end="321:25">fixed_reg</name></name> <operator pos:start="321:27" pos:end="321:28">&amp;&amp;</operator> <name pos:start="321:30" pos:end="321:36"><name pos:start="321:30" pos:end="321:31">ts</name><operator pos:start="321:32" pos:end="321:33">-&gt;</operator><name pos:start="321:34" pos:end="321:36">reg</name></name> <operator pos:start="321:38" pos:end="321:39">!=</operator> <name pos:start="321:41" pos:end="321:43">reg</name></expr>)</condition> <block pos:start="321:46" pos:end="325:9">{<block_content pos:start="323:13" pos:end="323:51">

            <expr_stmt pos:start="323:13" pos:end="323:51"><expr pos:start="323:13" pos:end="323:50"><call pos:start="323:13" pos:end="323:50"><name pos:start="323:13" pos:end="323:23">tcg_out_mov</name><argument_list pos:start="323:24" pos:end="323:50">(<argument pos:start="323:25" pos:end="323:25"><expr pos:start="323:25" pos:end="323:25"><name pos:start="323:25" pos:end="323:25">s</name></expr></argument>, <argument pos:start="323:28" pos:end="323:35"><expr pos:start="323:28" pos:end="323:35"><name pos:start="323:28" pos:end="323:35"><name pos:start="323:28" pos:end="323:29">ts</name><operator pos:start="323:30" pos:end="323:31">-&gt;</operator><name pos:start="323:32" pos:end="323:35">type</name></name></expr></argument>, <argument pos:start="323:38" pos:end="323:44"><expr pos:start="323:38" pos:end="323:44"><name pos:start="323:38" pos:end="323:44"><name pos:start="323:38" pos:end="323:39">ts</name><operator pos:start="323:40" pos:end="323:41">-&gt;</operator><name pos:start="323:42" pos:end="323:44">reg</name></name></expr></argument>, <argument pos:start="323:47" pos:end="323:49"><expr pos:start="323:47" pos:end="323:49"><name pos:start="323:47" pos:end="323:49">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="327:9" pos:end="331:9"><if pos:start="327:9" pos:end="331:9">if <condition pos:start="327:12" pos:end="327:29">(<expr pos:start="327:13" pos:end="327:28"><call pos:start="327:13" pos:end="327:28"><name pos:start="327:13" pos:end="327:25">NEED_SYNC_ARG</name><argument_list pos:start="327:26" pos:end="327:28">(<argument pos:start="327:27" pos:end="327:27"><expr pos:start="327:27" pos:end="327:27"><name pos:start="327:27" pos:end="327:27">i</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="327:31" pos:end="331:9">{<block_content pos:start="329:13" pos:end="329:33">

            <expr_stmt pos:start="329:13" pos:end="329:33"><expr pos:start="329:13" pos:end="329:32"><call pos:start="329:13" pos:end="329:32"><name pos:start="329:13" pos:end="329:24">tcg_reg_sync</name><argument_list pos:start="329:25" pos:end="329:32">(<argument pos:start="329:26" pos:end="329:26"><expr pos:start="329:26" pos:end="329:26"><name pos:start="329:26" pos:end="329:26">s</name></expr></argument>, <argument pos:start="329:29" pos:end="329:31"><expr pos:start="329:29" pos:end="329:31"><name pos:start="329:29" pos:end="329:31">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="333:9" pos:end="337:9"><if pos:start="333:9" pos:end="337:9">if <condition pos:start="333:12" pos:end="333:27">(<expr pos:start="333:13" pos:end="333:26"><call pos:start="333:13" pos:end="333:26"><name pos:start="333:13" pos:end="333:23">IS_DEAD_ARG</name><argument_list pos:start="333:24" pos:end="333:26">(<argument pos:start="333:25" pos:end="333:25"><expr pos:start="333:25" pos:end="333:25"><name pos:start="333:25" pos:end="333:25">i</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="333:29" pos:end="337:9">{<block_content pos:start="335:13" pos:end="335:34">

            <expr_stmt pos:start="335:13" pos:end="335:34"><expr pos:start="335:13" pos:end="335:33"><call pos:start="335:13" pos:end="335:33"><name pos:start="335:13" pos:end="335:21">temp_dead</name><argument_list pos:start="335:22" pos:end="335:33">(<argument pos:start="335:23" pos:end="335:23"><expr pos:start="335:23" pos:end="335:23"><name pos:start="335:23" pos:end="335:23">s</name></expr></argument>, <argument pos:start="335:26" pos:end="335:32"><expr pos:start="335:26" pos:end="335:32"><name pos:start="335:26" pos:end="335:32"><name pos:start="335:26" pos:end="335:29">args</name><index pos:start="335:30" pos:end="335:32">[<expr pos:start="335:31" pos:end="335:31"><name pos:start="335:31" pos:end="335:31">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
