<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21809.c" pos:tabs="8"><function pos:start="1:1" pos:end="799:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">qcow2_do_open</name><parameter_list pos:start="1:25" pos:end="3:38">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:41">BlockDriverState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">bs</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:52">QDict</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:61">options</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">flags</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:37"><decl pos:start="3:26" pos:end="3:37"><type pos:start="3:26" pos:end="3:37"><name pos:start="3:26" pos:end="3:30">Error</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier><modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:37">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="799:1">{<block_content pos:start="7:5" pos:end="797:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVQcow2State</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:20">len</name></decl>, <decl pos:start="9:23" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:23" pos:end="9:23">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">QCowHeader</name></type> <name pos:start="13:16" pos:end="13:21">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:20">ext_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:30">l1_vm_state_index</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:59"><expr pos:start="23:5" pos:end="23:58"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:58"><name pos:start="23:11" pos:end="23:20">bdrv_pread</name><argument_list pos:start="23:21" pos:end="23:58">(<argument pos:start="23:22" pos:end="23:29"><expr pos:start="23:22" pos:end="23:29"><name pos:start="23:22" pos:end="23:29"><name pos:start="23:22" pos:end="23:23">bs</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:29">file</name></name></expr></argument>, <argument pos:start="23:32" pos:end="23:32"><expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr></argument>, <argument pos:start="23:35" pos:end="23:41"><expr pos:start="23:35" pos:end="23:41"><operator pos:start="23:35" pos:end="23:35">&amp;</operator><name pos:start="23:36" pos:end="23:41">header</name></expr></argument>, <argument pos:start="23:44" pos:end="23:57"><expr pos:start="23:44" pos:end="23:57"><sizeof pos:start="23:44" pos:end="23:57">sizeof<argument_list pos:start="23:50" pos:end="23:57">(<argument pos:start="23:51" pos:end="23:56"><expr pos:start="23:51" pos:end="23:56"><name pos:start="23:51" pos:end="23:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:68"><expr pos:start="27:9" pos:end="27:67"><call pos:start="27:9" pos:end="27:67"><name pos:start="27:9" pos:end="27:24">error_setg_errno</name><argument_list pos:start="27:25" pos:end="27:67">(<argument pos:start="27:26" pos:end="27:29"><expr pos:start="27:26" pos:end="27:29"><name pos:start="27:26" pos:end="27:29">errp</name></expr></argument>, <argument pos:start="27:32" pos:end="27:35"><expr pos:start="27:32" pos:end="27:35"><operator pos:start="27:32" pos:end="27:32">-</operator><name pos:start="27:33" pos:end="27:35">ret</name></expr></argument>, <argument pos:start="27:38" pos:end="27:66"><expr pos:start="27:38" pos:end="27:66"><literal type="string" pos:start="27:38" pos:end="27:66">"Could not read qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><call pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:16">be32_to_cpus</name><argument_list pos:start="33:17" pos:end="33:31">(<argument pos:start="33:18" pos:end="33:30"><expr pos:start="33:18" pos:end="33:30"><operator pos:start="33:18" pos:end="33:18">&amp;</operator><name pos:start="33:19" pos:end="33:30"><name pos:start="33:19" pos:end="33:24">header</name><operator pos:start="33:25" pos:end="33:25">.</operator><name pos:start="33:26" pos:end="33:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><call pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:16">be32_to_cpus</name><argument_list pos:start="35:17" pos:end="35:33">(<argument pos:start="35:18" pos:end="35:32"><expr pos:start="35:18" pos:end="35:32"><operator pos:start="35:18" pos:end="35:18">&amp;</operator><name pos:start="35:19" pos:end="35:32"><name pos:start="35:19" pos:end="35:24">header</name><operator pos:start="35:25" pos:end="35:25">.</operator><name pos:start="35:26" pos:end="35:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:46"><expr pos:start="37:5" pos:end="37:45"><call pos:start="37:5" pos:end="37:45"><name pos:start="37:5" pos:end="37:16">be64_to_cpus</name><argument_list pos:start="37:17" pos:end="37:45">(<argument pos:start="37:18" pos:end="37:44"><expr pos:start="37:18" pos:end="37:44"><operator pos:start="37:18" pos:end="37:18">&amp;</operator><name pos:start="37:19" pos:end="37:44"><name pos:start="37:19" pos:end="37:24">header</name><operator pos:start="37:25" pos:end="37:25">.</operator><name pos:start="37:26" pos:end="37:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:44"><expr pos:start="39:5" pos:end="39:43"><call pos:start="39:5" pos:end="39:43"><name pos:start="39:5" pos:end="39:16">be32_to_cpus</name><argument_list pos:start="39:17" pos:end="39:43">(<argument pos:start="39:18" pos:end="39:42"><expr pos:start="39:18" pos:end="39:42"><operator pos:start="39:18" pos:end="39:18">&amp;</operator><name pos:start="39:19" pos:end="39:42"><name pos:start="39:19" pos:end="39:24">header</name><operator pos:start="39:25" pos:end="39:25">.</operator><name pos:start="39:26" pos:end="39:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:31"><expr pos:start="41:5" pos:end="41:30"><call pos:start="41:5" pos:end="41:30"><name pos:start="41:5" pos:end="41:16">be64_to_cpus</name><argument_list pos:start="41:17" pos:end="41:30">(<argument pos:start="41:18" pos:end="41:29"><expr pos:start="41:18" pos:end="41:29"><operator pos:start="41:18" pos:end="41:18">&amp;</operator><name pos:start="41:19" pos:end="41:29"><name pos:start="41:19" pos:end="41:24">header</name><operator pos:start="41:25" pos:end="41:25">.</operator><name pos:start="41:26" pos:end="41:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:39"><expr pos:start="43:5" pos:end="43:38"><call pos:start="43:5" pos:end="43:38"><name pos:start="43:5" pos:end="43:16">be32_to_cpus</name><argument_list pos:start="43:17" pos:end="43:38">(<argument pos:start="43:18" pos:end="43:37"><expr pos:start="43:18" pos:end="43:37"><operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:37"><name pos:start="43:19" pos:end="43:24">header</name><operator pos:start="43:25" pos:end="43:25">.</operator><name pos:start="43:26" pos:end="43:37">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:39"><expr pos:start="45:5" pos:end="45:38"><call pos:start="45:5" pos:end="45:38"><name pos:start="45:5" pos:end="45:16">be32_to_cpus</name><argument_list pos:start="45:17" pos:end="45:38">(<argument pos:start="45:18" pos:end="45:37"><expr pos:start="45:18" pos:end="45:37"><operator pos:start="45:18" pos:end="45:18">&amp;</operator><name pos:start="45:19" pos:end="45:37"><name pos:start="45:19" pos:end="45:24">header</name><operator pos:start="45:25" pos:end="45:25">.</operator><name pos:start="45:26" pos:end="45:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:42"><expr pos:start="47:5" pos:end="47:41"><call pos:start="47:5" pos:end="47:41"><name pos:start="47:5" pos:end="47:16">be64_to_cpus</name><argument_list pos:start="47:17" pos:end="47:41">(<argument pos:start="47:18" pos:end="47:40"><expr pos:start="47:18" pos:end="47:40"><operator pos:start="47:18" pos:end="47:18">&amp;</operator><name pos:start="47:19" pos:end="47:40"><name pos:start="47:19" pos:end="47:24">header</name><operator pos:start="47:25" pos:end="47:25">.</operator><name pos:start="47:26" pos:end="47:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:34"><expr pos:start="49:5" pos:end="49:33"><call pos:start="49:5" pos:end="49:33"><name pos:start="49:5" pos:end="49:16">be32_to_cpus</name><argument_list pos:start="49:17" pos:end="49:33">(<argument pos:start="49:18" pos:end="49:32"><expr pos:start="49:18" pos:end="49:32"><operator pos:start="49:18" pos:end="49:18">&amp;</operator><name pos:start="49:19" pos:end="49:32"><name pos:start="49:19" pos:end="49:24">header</name><operator pos:start="49:25" pos:end="49:25">.</operator><name pos:start="49:26" pos:end="49:32">l1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:48"><expr pos:start="51:5" pos:end="51:47"><call pos:start="51:5" pos:end="51:47"><name pos:start="51:5" pos:end="51:16">be64_to_cpus</name><argument_list pos:start="51:17" pos:end="51:47">(<argument pos:start="51:18" pos:end="51:46"><expr pos:start="51:18" pos:end="51:46"><operator pos:start="51:18" pos:end="51:18">&amp;</operator><name pos:start="51:19" pos:end="51:46"><name pos:start="51:19" pos:end="51:24">header</name><operator pos:start="51:25" pos:end="51:25">.</operator><name pos:start="51:26" pos:end="51:46">refcount_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:50"><expr pos:start="53:5" pos:end="53:49"><call pos:start="53:5" pos:end="53:49"><name pos:start="53:5" pos:end="53:16">be32_to_cpus</name><argument_list pos:start="53:17" pos:end="53:49">(<argument pos:start="53:18" pos:end="53:48"><expr pos:start="53:18" pos:end="53:48"><operator pos:start="53:18" pos:end="53:18">&amp;</operator><name pos:start="53:19" pos:end="53:48"><name pos:start="53:19" pos:end="53:24">header</name><operator pos:start="53:25" pos:end="53:25">.</operator><name pos:start="53:26" pos:end="53:48">refcount_table_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:43"><expr pos:start="55:5" pos:end="55:42"><call pos:start="55:5" pos:end="55:42"><name pos:start="55:5" pos:end="55:16">be64_to_cpus</name><argument_list pos:start="55:17" pos:end="55:42">(<argument pos:start="55:18" pos:end="55:41"><expr pos:start="55:18" pos:end="55:41"><operator pos:start="55:18" pos:end="55:18">&amp;</operator><name pos:start="55:19" pos:end="55:41"><name pos:start="55:19" pos:end="55:24">header</name><operator pos:start="55:25" pos:end="55:25">.</operator><name pos:start="55:26" pos:end="55:41">snapshots_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:39"><expr pos:start="57:5" pos:end="57:38"><call pos:start="57:5" pos:end="57:38"><name pos:start="57:5" pos:end="57:16">be32_to_cpus</name><argument_list pos:start="57:17" pos:end="57:38">(<argument pos:start="57:18" pos:end="57:37"><expr pos:start="57:18" pos:end="57:37"><operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:37"><name pos:start="57:19" pos:end="57:24">header</name><operator pos:start="57:25" pos:end="57:25">.</operator><name pos:start="57:26" pos:end="57:37">nb_snapshots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="61:35">(<expr pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:14">header</name><operator pos:start="61:15" pos:end="61:15">.</operator><name pos:start="61:16" pos:end="61:20">magic</name></name> <operator pos:start="61:22" pos:end="61:23">!=</operator> <name pos:start="61:25" pos:end="61:34">QCOW_MAGIC</name></expr>)</condition> <block pos:start="61:37" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:18">

        <expr_stmt pos:start="63:9" pos:end="63:57"><expr pos:start="63:9" pos:end="63:56"><call pos:start="63:9" pos:end="63:56"><name pos:start="63:9" pos:end="63:18">error_setg</name><argument_list pos:start="63:19" pos:end="63:56">(<argument pos:start="63:20" pos:end="63:23"><expr pos:start="63:20" pos:end="63:23"><name pos:start="63:20" pos:end="63:23">errp</name></expr></argument>, <argument pos:start="63:26" pos:end="63:55"><expr pos:start="63:26" pos:end="63:55"><literal type="string" pos:start="63:26" pos:end="63:55">"Image is not in qcow2 format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">-</operator><name pos:start="65:16" pos:end="65:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:49">(<expr pos:start="71:9" pos:end="71:48"><name pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:14">header</name><operator pos:start="71:15" pos:end="71:15">.</operator><name pos:start="71:16" pos:end="71:22">version</name></name> <operator pos:start="71:24" pos:end="71:24">&lt;</operator> <literal type="number" pos:start="71:26" pos:end="71:26">2</literal> <operator pos:start="71:28" pos:end="71:29">||</operator> <name pos:start="71:31" pos:end="71:44"><name pos:start="71:31" pos:end="71:36">header</name><operator pos:start="71:37" pos:end="71:37">.</operator><name pos:start="71:38" pos:end="71:44">version</name></name> <operator pos:start="71:46" pos:end="71:46">&gt;</operator> <literal type="number" pos:start="71:48" pos:end="71:48">3</literal></expr>)</condition> <block pos:start="71:51" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:18">

        <expr_stmt pos:start="73:9" pos:end="73:79"><expr pos:start="73:9" pos:end="73:78"><call pos:start="73:9" pos:end="73:78"><name pos:start="73:9" pos:end="73:18">error_setg</name><argument_list pos:start="73:19" pos:end="73:78">(<argument pos:start="73:20" pos:end="73:23"><expr pos:start="73:20" pos:end="73:23"><name pos:start="73:20" pos:end="73:23">errp</name></expr></argument>, <argument pos:start="73:26" pos:end="73:61"><expr pos:start="73:26" pos:end="73:61"><literal type="string" pos:start="73:26" pos:end="73:54">"Unsupported qcow2 version %"</literal> <name pos:start="73:56" pos:end="73:61">PRIu32</name></expr></argument>, <argument pos:start="73:64" pos:end="73:77"><expr pos:start="73:64" pos:end="73:77"><name pos:start="73:64" pos:end="73:77"><name pos:start="73:64" pos:end="73:69">header</name><operator pos:start="73:70" pos:end="73:70">.</operator><name pos:start="73:71" pos:end="73:77">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:23"><expr pos:start="75:9" pos:end="75:22"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">-</operator><name pos:start="75:16" pos:end="75:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:18">goto <name pos:start="77:14" pos:end="77:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:37"><expr pos:start="83:5" pos:end="83:36"><name pos:start="83:5" pos:end="83:19"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:19">qcow_version</name></name> <operator pos:start="83:21" pos:end="83:21">=</operator> <name pos:start="83:23" pos:end="83:36"><name pos:start="83:23" pos:end="83:28">header</name><operator pos:start="83:29" pos:end="83:29">.</operator><name pos:start="83:30" pos:end="83:36">version</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:33">/* Initialise cluster size */</comment>

    <if_stmt pos:start="89:5" pos:end="101:5"><if pos:start="89:5" pos:end="101:5">if <condition pos:start="89:8" pos:end="91:47">(<expr pos:start="89:9" pos:end="91:46"><name pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:14">header</name><operator pos:start="89:15" pos:end="89:15">.</operator><name pos:start="89:16" pos:end="89:27">cluster_bits</name></name> <operator pos:start="89:29" pos:end="89:29">&lt;</operator> <name pos:start="89:31" pos:end="89:46">MIN_CLUSTER_BITS</name> <operator pos:start="89:48" pos:end="89:49">||</operator>

        <name pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:14">header</name><operator pos:start="91:15" pos:end="91:15">.</operator><name pos:start="91:16" pos:end="91:27">cluster_bits</name></name> <operator pos:start="91:29" pos:end="91:29">&gt;</operator> <name pos:start="91:31" pos:end="91:46">MAX_CLUSTER_BITS</name></expr>)</condition> <block pos:start="91:49" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:18">

        <expr_stmt pos:start="93:9" pos:end="95:40"><expr pos:start="93:9" pos:end="95:39"><call pos:start="93:9" pos:end="95:39"><name pos:start="93:9" pos:end="93:18">error_setg</name><argument_list pos:start="93:19" pos:end="95:39">(<argument pos:start="93:20" pos:end="93:23"><expr pos:start="93:20" pos:end="93:23"><name pos:start="93:20" pos:end="93:23">errp</name></expr></argument>, <argument pos:start="93:26" pos:end="93:63"><expr pos:start="93:26" pos:end="93:63"><literal type="string" pos:start="93:26" pos:end="93:56">"Unsupported cluster size: 2^%"</literal> <name pos:start="93:58" pos:end="93:63">PRIu32</name></expr></argument>,

                   <argument pos:start="95:20" pos:end="95:38"><expr pos:start="95:20" pos:end="95:38"><name pos:start="95:20" pos:end="95:38"><name pos:start="95:20" pos:end="95:25">header</name><operator pos:start="95:26" pos:end="95:26">.</operator><name pos:start="95:27" pos:end="95:38">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:22"><expr pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <operator pos:start="97:15" pos:end="97:15">-</operator><name pos:start="97:16" pos:end="97:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:18">goto <name pos:start="99:14" pos:end="99:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:42"><expr pos:start="105:5" pos:end="105:41"><name pos:start="105:5" pos:end="105:19"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:19">cluster_bits</name></name> <operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:41"><name pos:start="105:23" pos:end="105:28">header</name><operator pos:start="105:29" pos:end="105:29">.</operator><name pos:start="105:30" pos:end="105:41">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:43"><expr pos:start="107:5" pos:end="107:42"><name pos:start="107:5" pos:end="107:19"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:19">cluster_size</name></name> <operator pos:start="107:21" pos:end="107:21">=</operator> <literal type="number" pos:start="107:23" pos:end="107:23">1</literal> <operator pos:start="107:25" pos:end="107:26">&lt;&lt;</operator> <name pos:start="107:28" pos:end="107:42"><name pos:start="107:28" pos:end="107:28">s</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:42">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:52"><expr pos:start="109:5" pos:end="109:51"><name pos:start="109:5" pos:end="109:22"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:22">cluster_sectors</name></name> <operator pos:start="109:24" pos:end="109:24">=</operator> <literal type="number" pos:start="109:26" pos:end="109:26">1</literal> <operator pos:start="109:28" pos:end="109:29">&lt;&lt;</operator> <operator pos:start="109:31" pos:end="109:31">(</operator><name pos:start="109:32" pos:end="109:46"><name pos:start="109:32" pos:end="109:32">s</name><operator pos:start="109:33" pos:end="109:34">-&gt;</operator><name pos:start="109:35" pos:end="109:46">cluster_bits</name></name> <operator pos:start="109:48" pos:end="109:48">-</operator> <literal type="number" pos:start="109:50" pos:end="109:50">9</literal><operator pos:start="109:51" pos:end="109:51">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:44">/* Initialise version 3 header fields */</comment>

    <if_stmt pos:start="115:5" pos:end="151:5"><if pos:start="115:5" pos:end="127:5">if <condition pos:start="115:8" pos:end="115:28">(<expr pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:22"><name pos:start="115:9" pos:end="115:14">header</name><operator pos:start="115:15" pos:end="115:15">.</operator><name pos:start="115:16" pos:end="115:22">version</name></name> <operator pos:start="115:24" pos:end="115:25">==</operator> <literal type="number" pos:start="115:27" pos:end="115:27">2</literal></expr>)</condition> <block pos:start="115:30" pos:end="127:5">{<block_content pos:start="117:9" pos:end="125:45">

        <expr_stmt pos:start="117:9" pos:end="117:44"><expr pos:start="117:9" pos:end="117:43"><name pos:start="117:9" pos:end="117:36"><name pos:start="117:9" pos:end="117:14">header</name><operator pos:start="117:15" pos:end="117:15">.</operator><name pos:start="117:16" pos:end="117:36">incompatible_features</name></name>    <operator pos:start="117:41" pos:end="117:41">=</operator> <literal type="number" pos:start="117:43" pos:end="117:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:44"><expr pos:start="119:9" pos:end="119:43"><name pos:start="119:9" pos:end="119:34"><name pos:start="119:9" pos:end="119:14">header</name><operator pos:start="119:15" pos:end="119:15">.</operator><name pos:start="119:16" pos:end="119:34">compatible_features</name></name>      <operator pos:start="119:41" pos:end="119:41">=</operator> <literal type="number" pos:start="119:43" pos:end="119:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:44"><expr pos:start="121:9" pos:end="121:43"><name pos:start="121:9" pos:end="121:33"><name pos:start="121:9" pos:end="121:14">header</name><operator pos:start="121:15" pos:end="121:15">.</operator><name pos:start="121:16" pos:end="121:33">autoclear_features</name></name>       <operator pos:start="121:41" pos:end="121:41">=</operator> <literal type="number" pos:start="121:43" pos:end="121:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:44"><expr pos:start="123:9" pos:end="123:43"><name pos:start="123:9" pos:end="123:29"><name pos:start="123:9" pos:end="123:14">header</name><operator pos:start="123:15" pos:end="123:15">.</operator><name pos:start="123:16" pos:end="123:29">refcount_order</name></name>           <operator pos:start="123:41" pos:end="123:41">=</operator> <literal type="number" pos:start="123:43" pos:end="123:43">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:45"><expr pos:start="125:9" pos:end="125:44"><name pos:start="125:9" pos:end="125:28"><name pos:start="125:9" pos:end="125:14">header</name><operator pos:start="125:15" pos:end="125:15">.</operator><name pos:start="125:16" pos:end="125:28">header_length</name></name>            <operator pos:start="125:41" pos:end="125:41">=</operator> <literal type="number" pos:start="125:43" pos:end="125:44">72</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="127:7" pos:end="151:5">else <block pos:start="127:12" pos:end="151:5">{<block_content pos:start="129:9" pos:end="149:9">

        <expr_stmt pos:start="129:9" pos:end="129:52"><expr pos:start="129:9" pos:end="129:51"><call pos:start="129:9" pos:end="129:51"><name pos:start="129:9" pos:end="129:20">be64_to_cpus</name><argument_list pos:start="129:21" pos:end="129:51">(<argument pos:start="129:22" pos:end="129:50"><expr pos:start="129:22" pos:end="129:50"><operator pos:start="129:22" pos:end="129:22">&amp;</operator><name pos:start="129:23" pos:end="129:50"><name pos:start="129:23" pos:end="129:28">header</name><operator pos:start="129:29" pos:end="129:29">.</operator><name pos:start="129:30" pos:end="129:50">incompatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:50"><expr pos:start="131:9" pos:end="131:49"><call pos:start="131:9" pos:end="131:49"><name pos:start="131:9" pos:end="131:20">be64_to_cpus</name><argument_list pos:start="131:21" pos:end="131:49">(<argument pos:start="131:22" pos:end="131:48"><expr pos:start="131:22" pos:end="131:48"><operator pos:start="131:22" pos:end="131:22">&amp;</operator><name pos:start="131:23" pos:end="131:48"><name pos:start="131:23" pos:end="131:28">header</name><operator pos:start="131:29" pos:end="131:29">.</operator><name pos:start="131:30" pos:end="131:48">compatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:49"><expr pos:start="133:9" pos:end="133:48"><call pos:start="133:9" pos:end="133:48"><name pos:start="133:9" pos:end="133:20">be64_to_cpus</name><argument_list pos:start="133:21" pos:end="133:48">(<argument pos:start="133:22" pos:end="133:47"><expr pos:start="133:22" pos:end="133:47"><operator pos:start="133:22" pos:end="133:22">&amp;</operator><name pos:start="133:23" pos:end="133:47"><name pos:start="133:23" pos:end="133:28">header</name><operator pos:start="133:29" pos:end="133:29">.</operator><name pos:start="133:30" pos:end="133:47">autoclear_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:45"><expr pos:start="135:9" pos:end="135:44"><call pos:start="135:9" pos:end="135:44"><name pos:start="135:9" pos:end="135:20">be32_to_cpus</name><argument_list pos:start="135:21" pos:end="135:44">(<argument pos:start="135:22" pos:end="135:43"><expr pos:start="135:22" pos:end="135:43"><operator pos:start="135:22" pos:end="135:22">&amp;</operator><name pos:start="135:23" pos:end="135:43"><name pos:start="135:23" pos:end="135:28">header</name><operator pos:start="135:29" pos:end="135:29">.</operator><name pos:start="135:30" pos:end="135:43">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:44"><expr pos:start="137:9" pos:end="137:43"><call pos:start="137:9" pos:end="137:43"><name pos:start="137:9" pos:end="137:20">be32_to_cpus</name><argument_list pos:start="137:21" pos:end="137:43">(<argument pos:start="137:22" pos:end="137:42"><expr pos:start="137:22" pos:end="137:42"><operator pos:start="137:22" pos:end="137:22">&amp;</operator><name pos:start="137:23" pos:end="137:42"><name pos:start="137:23" pos:end="137:28">header</name><operator pos:start="137:29" pos:end="137:29">.</operator><name pos:start="137:30" pos:end="137:42">header_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="141:9" pos:end="149:9"><if pos:start="141:9" pos:end="149:9">if <condition pos:start="141:12" pos:end="141:39">(<expr pos:start="141:13" pos:end="141:38"><name pos:start="141:13" pos:end="141:32"><name pos:start="141:13" pos:end="141:18">header</name><operator pos:start="141:19" pos:end="141:19">.</operator><name pos:start="141:20" pos:end="141:32">header_length</name></name> <operator pos:start="141:34" pos:end="141:34">&lt;</operator> <literal type="number" pos:start="141:36" pos:end="141:38">104</literal></expr>)</condition> <block pos:start="141:41" pos:end="149:9">{<block_content pos:start="143:13" pos:end="147:22">

            <expr_stmt pos:start="143:13" pos:end="143:55"><expr pos:start="143:13" pos:end="143:54"><call pos:start="143:13" pos:end="143:54"><name pos:start="143:13" pos:end="143:22">error_setg</name><argument_list pos:start="143:23" pos:end="143:54">(<argument pos:start="143:24" pos:end="143:27"><expr pos:start="143:24" pos:end="143:27"><name pos:start="143:24" pos:end="143:27">errp</name></expr></argument>, <argument pos:start="143:30" pos:end="143:53"><expr pos:start="143:30" pos:end="143:53"><literal type="string" pos:start="143:30" pos:end="143:53">"qcow2 header too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:26"><expr pos:start="145:13" pos:end="145:25"><name pos:start="145:13" pos:end="145:15">ret</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <operator pos:start="145:19" pos:end="145:19">-</operator><name pos:start="145:20" pos:end="145:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="147:13" pos:end="147:22">goto <name pos:start="147:18" pos:end="147:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="155:5" pos:end="163:5"><if pos:start="155:5" pos:end="163:5">if <condition pos:start="155:8" pos:end="155:47">(<expr pos:start="155:9" pos:end="155:46"><name pos:start="155:9" pos:end="155:28"><name pos:start="155:9" pos:end="155:14">header</name><operator pos:start="155:15" pos:end="155:15">.</operator><name pos:start="155:16" pos:end="155:28">header_length</name></name> <operator pos:start="155:30" pos:end="155:30">&gt;</operator> <name pos:start="155:32" pos:end="155:46"><name pos:start="155:32" pos:end="155:32">s</name><operator pos:start="155:33" pos:end="155:34">-&gt;</operator><name pos:start="155:35" pos:end="155:46">cluster_size</name></name></expr>)</condition> <block pos:start="155:49" pos:end="163:5">{<block_content pos:start="157:9" pos:end="161:18">

        <expr_stmt pos:start="157:9" pos:end="157:62"><expr pos:start="157:9" pos:end="157:61"><call pos:start="157:9" pos:end="157:61"><name pos:start="157:9" pos:end="157:18">error_setg</name><argument_list pos:start="157:19" pos:end="157:61">(<argument pos:start="157:20" pos:end="157:23"><expr pos:start="157:20" pos:end="157:23"><name pos:start="157:20" pos:end="157:23">errp</name></expr></argument>, <argument pos:start="157:26" pos:end="157:60"><expr pos:start="157:26" pos:end="157:60"><literal type="string" pos:start="157:26" pos:end="157:60">"qcow2 header exceeds cluster size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:22"><expr pos:start="159:9" pos:end="159:21"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <operator pos:start="159:15" pos:end="159:15">-</operator><name pos:start="159:16" pos:end="159:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="161:9" pos:end="161:18">goto <name pos:start="161:14" pos:end="161:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="167:5" pos:end="187:5"><if pos:start="167:5" pos:end="187:5">if <condition pos:start="167:8" pos:end="167:46">(<expr pos:start="167:9" pos:end="167:45"><name pos:start="167:9" pos:end="167:28"><name pos:start="167:9" pos:end="167:14">header</name><operator pos:start="167:15" pos:end="167:15">.</operator><name pos:start="167:16" pos:end="167:28">header_length</name></name> <operator pos:start="167:30" pos:end="167:30">&gt;</operator> <sizeof pos:start="167:32" pos:end="167:45">sizeof<argument_list pos:start="167:38" pos:end="167:45">(<argument pos:start="167:39" pos:end="167:44"><expr pos:start="167:39" pos:end="167:44"><name pos:start="167:39" pos:end="167:44">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="167:48" pos:end="187:5">{<block_content pos:start="169:9" pos:end="185:9">

        <expr_stmt pos:start="169:9" pos:end="169:78"><expr pos:start="169:9" pos:end="169:77"><name pos:start="169:9" pos:end="169:37"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:37">unknown_header_fields_size</name></name> <operator pos:start="169:39" pos:end="169:39">=</operator> <name pos:start="169:41" pos:end="169:60"><name pos:start="169:41" pos:end="169:46">header</name><operator pos:start="169:47" pos:end="169:47">.</operator><name pos:start="169:48" pos:end="169:60">header_length</name></name> <operator pos:start="169:62" pos:end="169:62">-</operator> <sizeof pos:start="169:64" pos:end="169:77">sizeof<argument_list pos:start="169:70" pos:end="169:77">(<argument pos:start="169:71" pos:end="169:76"><expr pos:start="169:71" pos:end="169:76"><name pos:start="169:71" pos:end="169:76">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:75"><expr pos:start="171:9" pos:end="171:74"><name pos:start="171:9" pos:end="171:32"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:32">unknown_header_fields</name></name> <operator pos:start="171:34" pos:end="171:34">=</operator> <call pos:start="171:36" pos:end="171:74"><name pos:start="171:36" pos:end="171:43">g_malloc</name><argument_list pos:start="171:44" pos:end="171:74">(<argument pos:start="171:45" pos:end="171:73"><expr pos:start="171:45" pos:end="171:73"><name pos:start="171:45" pos:end="171:73"><name pos:start="171:45" pos:end="171:45">s</name><operator pos:start="171:46" pos:end="171:47">-&gt;</operator><name pos:start="171:48" pos:end="171:73">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="175:56"><expr pos:start="173:9" pos:end="175:55"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="175:55"><name pos:start="173:15" pos:end="173:24">bdrv_pread</name><argument_list pos:start="173:25" pos:end="175:55">(<argument pos:start="173:26" pos:end="173:33"><expr pos:start="173:26" pos:end="173:33"><name pos:start="173:26" pos:end="173:33"><name pos:start="173:26" pos:end="173:27">bs</name><operator pos:start="173:28" pos:end="173:29">-&gt;</operator><name pos:start="173:30" pos:end="173:33">file</name></name></expr></argument>, <argument pos:start="173:36" pos:end="173:49"><expr pos:start="173:36" pos:end="173:49"><sizeof pos:start="173:36" pos:end="173:49">sizeof<argument_list pos:start="173:42" pos:end="173:49">(<argument pos:start="173:43" pos:end="173:48"><expr pos:start="173:43" pos:end="173:48"><name pos:start="173:43" pos:end="173:48">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="173:52" pos:end="173:75"><expr pos:start="173:52" pos:end="173:75"><name pos:start="173:52" pos:end="173:75"><name pos:start="173:52" pos:end="173:52">s</name><operator pos:start="173:53" pos:end="173:54">-&gt;</operator><name pos:start="173:55" pos:end="173:75">unknown_header_fields</name></name></expr></argument>,

                         <argument pos:start="175:26" pos:end="175:54"><expr pos:start="175:26" pos:end="175:54"><name pos:start="175:26" pos:end="175:54"><name pos:start="175:26" pos:end="175:26">s</name><operator pos:start="175:27" pos:end="175:28">-&gt;</operator><name pos:start="175:29" pos:end="175:54">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="185:9"><if pos:start="177:9" pos:end="185:9">if <condition pos:start="177:12" pos:end="177:20">(<expr pos:start="177:13" pos:end="177:19"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">&lt;</operator> <literal type="number" pos:start="177:19" pos:end="177:19">0</literal></expr>)</condition> <block pos:start="177:22" pos:end="185:9">{<block_content pos:start="179:13" pos:end="183:22">

            <expr_stmt pos:start="179:13" pos:end="181:39"><expr pos:start="179:13" pos:end="181:38"><call pos:start="179:13" pos:end="181:38"><name pos:start="179:13" pos:end="179:28">error_setg_errno</name><argument_list pos:start="179:29" pos:end="181:38">(<argument pos:start="179:30" pos:end="179:33"><expr pos:start="179:30" pos:end="179:33"><name pos:start="179:30" pos:end="179:33">errp</name></expr></argument>, <argument pos:start="179:36" pos:end="179:39"><expr pos:start="179:36" pos:end="179:39"><operator pos:start="179:36" pos:end="179:36">-</operator><name pos:start="179:37" pos:end="179:39">ret</name></expr></argument>, <argument pos:start="179:42" pos:end="181:37"><expr pos:start="179:42" pos:end="181:37"><literal type="string" pos:start="179:42" pos:end="179:79">"Could not read unknown qcow2 header "</literal>

                             <literal type="string" pos:start="181:30" pos:end="181:37">"fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="183:13" pos:end="183:22">goto <name pos:start="183:18" pos:end="183:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="191:5" pos:end="199:5"><if pos:start="191:5" pos:end="199:5">if <condition pos:start="191:8" pos:end="191:53">(<expr pos:start="191:9" pos:end="191:52"><name pos:start="191:9" pos:end="191:34"><name pos:start="191:9" pos:end="191:14">header</name><operator pos:start="191:15" pos:end="191:15">.</operator><name pos:start="191:16" pos:end="191:34">backing_file_offset</name></name> <operator pos:start="191:36" pos:end="191:36">&gt;</operator> <name pos:start="191:38" pos:end="191:52"><name pos:start="191:38" pos:end="191:38">s</name><operator pos:start="191:39" pos:end="191:40">-&gt;</operator><name pos:start="191:41" pos:end="191:52">cluster_size</name></name></expr>)</condition> <block pos:start="191:55" pos:end="199:5">{<block_content pos:start="193:9" pos:end="197:18">

        <expr_stmt pos:start="193:9" pos:end="193:56"><expr pos:start="193:9" pos:end="193:55"><call pos:start="193:9" pos:end="193:55"><name pos:start="193:9" pos:end="193:18">error_setg</name><argument_list pos:start="193:19" pos:end="193:55">(<argument pos:start="193:20" pos:end="193:23"><expr pos:start="193:20" pos:end="193:23"><name pos:start="193:20" pos:end="193:23">errp</name></expr></argument>, <argument pos:start="193:26" pos:end="193:54"><expr pos:start="193:26" pos:end="193:54"><literal type="string" pos:start="193:26" pos:end="193:54">"Invalid backing file offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:22"><expr pos:start="195:9" pos:end="195:21"><name pos:start="195:9" pos:end="195:11">ret</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <operator pos:start="195:15" pos:end="195:15">-</operator><name pos:start="195:16" pos:end="195:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="197:9" pos:end="197:18">goto <name pos:start="197:14" pos:end="197:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="203:5" pos:end="211:5"><if pos:start="203:5" pos:end="207:5">if <condition pos:start="203:8" pos:end="203:35">(<expr pos:start="203:9" pos:end="203:34"><name pos:start="203:9" pos:end="203:34"><name pos:start="203:9" pos:end="203:14">header</name><operator pos:start="203:15" pos:end="203:15">.</operator><name pos:start="203:16" pos:end="203:34">backing_file_offset</name></name></expr>)</condition> <block pos:start="203:37" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:45">

        <expr_stmt pos:start="205:9" pos:end="205:45"><expr pos:start="205:9" pos:end="205:44"><name pos:start="205:9" pos:end="205:15">ext_end</name> <operator pos:start="205:17" pos:end="205:17">=</operator> <name pos:start="205:19" pos:end="205:44"><name pos:start="205:19" pos:end="205:24">header</name><operator pos:start="205:25" pos:end="205:25">.</operator><name pos:start="205:26" pos:end="205:44">backing_file_offset</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="207:7" pos:end="211:5">else <block pos:start="207:12" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:43">

        <expr_stmt pos:start="209:9" pos:end="209:43"><expr pos:start="209:9" pos:end="209:42"><name pos:start="209:9" pos:end="209:15">ext_end</name> <operator pos:start="209:17" pos:end="209:17">=</operator> <literal type="number" pos:start="209:19" pos:end="209:19">1</literal> <operator pos:start="209:21" pos:end="209:22">&lt;&lt;</operator> <name pos:start="209:24" pos:end="209:42"><name pos:start="209:24" pos:end="209:29">header</name><operator pos:start="209:30" pos:end="209:30">.</operator><name pos:start="209:31" pos:end="209:42">cluster_bits</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="215:5" pos:end="215:29">/* Handle feature bits */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:63"><expr pos:start="217:5" pos:end="217:62"><name pos:start="217:5" pos:end="217:28"><name pos:start="217:5" pos:end="217:5">s</name><operator pos:start="217:6" pos:end="217:7">-&gt;</operator><name pos:start="217:8" pos:end="217:28">incompatible_features</name></name>    <operator pos:start="217:33" pos:end="217:33">=</operator> <name pos:start="217:35" pos:end="217:62"><name pos:start="217:35" pos:end="217:40">header</name><operator pos:start="217:41" pos:end="217:41">.</operator><name pos:start="217:42" pos:end="217:62">incompatible_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:61"><expr pos:start="219:5" pos:end="219:60"><name pos:start="219:5" pos:end="219:26"><name pos:start="219:5" pos:end="219:5">s</name><operator pos:start="219:6" pos:end="219:7">-&gt;</operator><name pos:start="219:8" pos:end="219:26">compatible_features</name></name>      <operator pos:start="219:33" pos:end="219:33">=</operator> <name pos:start="219:35" pos:end="219:60"><name pos:start="219:35" pos:end="219:40">header</name><operator pos:start="219:41" pos:end="219:41">.</operator><name pos:start="219:42" pos:end="219:60">compatible_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:60"><expr pos:start="221:5" pos:end="221:59"><name pos:start="221:5" pos:end="221:25"><name pos:start="221:5" pos:end="221:5">s</name><operator pos:start="221:6" pos:end="221:7">-&gt;</operator><name pos:start="221:8" pos:end="221:25">autoclear_features</name></name>       <operator pos:start="221:33" pos:end="221:33">=</operator> <name pos:start="221:35" pos:end="221:59"><name pos:start="221:35" pos:end="221:40">header</name><operator pos:start="221:41" pos:end="221:41">.</operator><name pos:start="221:42" pos:end="221:59">autoclear_features</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="225:5" pos:end="245:5"><if pos:start="225:5" pos:end="245:5">if <condition pos:start="225:8" pos:end="225:56">(<expr pos:start="225:9" pos:end="225:55"><name pos:start="225:9" pos:end="225:32"><name pos:start="225:9" pos:end="225:9">s</name><operator pos:start="225:10" pos:end="225:11">-&gt;</operator><name pos:start="225:12" pos:end="225:32">incompatible_features</name></name> <operator pos:start="225:34" pos:end="225:34">&amp;</operator> <operator pos:start="225:36" pos:end="225:36">~</operator><name pos:start="225:37" pos:end="225:55">QCOW2_INCOMPAT_MASK</name></expr>)</condition> <block pos:start="225:58" pos:end="245:5">{<block_content pos:start="227:9" pos:end="243:18">

        <decl_stmt pos:start="227:9" pos:end="227:35"><decl pos:start="227:9" pos:end="227:34"><type pos:start="227:9" pos:end="227:14"><name pos:start="227:9" pos:end="227:12">void</name> <modifier pos:start="227:14" pos:end="227:14">*</modifier></type><name pos:start="227:15" pos:end="227:27">feature_table</name> <init pos:start="227:29" pos:end="227:34">= <expr pos:start="227:31" pos:end="227:34"><name pos:start="227:31" pos:end="227:34">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="229:9" pos:end="231:52"><expr pos:start="229:9" pos:end="231:51"><call pos:start="229:9" pos:end="231:51"><name pos:start="229:9" pos:end="229:29">qcow2_read_extensions</name><argument_list pos:start="229:30" pos:end="231:51">(<argument pos:start="229:31" pos:end="229:32"><expr pos:start="229:31" pos:end="229:32"><name pos:start="229:31" pos:end="229:32">bs</name></expr></argument>, <argument pos:start="229:35" pos:end="229:54"><expr pos:start="229:35" pos:end="229:54"><name pos:start="229:35" pos:end="229:54"><name pos:start="229:35" pos:end="229:40">header</name><operator pos:start="229:41" pos:end="229:41">.</operator><name pos:start="229:42" pos:end="229:54">header_length</name></name></expr></argument>, <argument pos:start="229:57" pos:end="229:63"><expr pos:start="229:57" pos:end="229:63"><name pos:start="229:57" pos:end="229:63">ext_end</name></expr></argument>,

                              <argument pos:start="231:31" pos:end="231:44"><expr pos:start="231:31" pos:end="231:44"><operator pos:start="231:31" pos:end="231:31">&amp;</operator><name pos:start="231:32" pos:end="231:44">feature_table</name></expr></argument>, <argument pos:start="231:47" pos:end="231:50"><expr pos:start="231:47" pos:end="231:50"><name pos:start="231:47" pos:end="231:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="237:57"><expr pos:start="233:9" pos:end="237:56"><call pos:start="233:9" pos:end="237:56"><name pos:start="233:9" pos:end="233:34">report_unsupported_feature</name><argument_list pos:start="233:35" pos:end="237:56">(<argument pos:start="233:36" pos:end="233:39"><expr pos:start="233:36" pos:end="233:39"><name pos:start="233:36" pos:end="233:39">errp</name></expr></argument>, <argument pos:start="233:42" pos:end="233:54"><expr pos:start="233:42" pos:end="233:54"><name pos:start="233:42" pos:end="233:54">feature_table</name></expr></argument>,

                                   <argument pos:start="235:36" pos:end="237:55"><expr pos:start="235:36" pos:end="237:55"><name pos:start="235:36" pos:end="235:59"><name pos:start="235:36" pos:end="235:36">s</name><operator pos:start="235:37" pos:end="235:38">-&gt;</operator><name pos:start="235:39" pos:end="235:59">incompatible_features</name></name> <operator pos:start="235:61" pos:end="235:61">&amp;</operator>

                                   <operator pos:start="237:36" pos:end="237:36">~</operator><name pos:start="237:37" pos:end="237:55">QCOW2_INCOMPAT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:23"><expr pos:start="239:9" pos:end="239:22"><name pos:start="239:9" pos:end="239:11">ret</name> <operator pos:start="239:13" pos:end="239:13">=</operator> <operator pos:start="239:15" pos:end="239:15">-</operator><name pos:start="239:16" pos:end="239:22">ENOTSUP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:30"><expr pos:start="241:9" pos:end="241:29"><call pos:start="241:9" pos:end="241:29"><name pos:start="241:9" pos:end="241:14">g_free</name><argument_list pos:start="241:15" pos:end="241:29">(<argument pos:start="241:16" pos:end="241:28"><expr pos:start="241:16" pos:end="241:28"><name pos:start="241:16" pos:end="241:28">feature_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="243:9" pos:end="243:18">goto <name pos:start="243:14" pos:end="243:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="249:5" pos:end="267:5"><if pos:start="249:5" pos:end="267:5">if <condition pos:start="249:8" pos:end="249:58">(<expr pos:start="249:9" pos:end="249:57"><name pos:start="249:9" pos:end="249:32"><name pos:start="249:9" pos:end="249:9">s</name><operator pos:start="249:10" pos:end="249:11">-&gt;</operator><name pos:start="249:12" pos:end="249:32">incompatible_features</name></name> <operator pos:start="249:34" pos:end="249:34">&amp;</operator> <name pos:start="249:36" pos:end="249:57">QCOW2_INCOMPAT_CORRUPT</name></expr>)</condition> <block pos:start="249:60" pos:end="267:5">{<block_content pos:start="255:9" pos:end="265:9">

        <comment type="block" pos:start="251:9" pos:end="253:11">/* Corrupt images may not be written to unless they are being repaired

         */</comment>

        <if_stmt pos:start="255:9" pos:end="265:9"><if pos:start="255:9" pos:end="265:9">if <condition pos:start="255:12" pos:end="255:61">(<expr pos:start="255:13" pos:end="255:60"><operator pos:start="255:13" pos:end="255:13">(</operator><name pos:start="255:14" pos:end="255:18">flags</name> <operator pos:start="255:20" pos:end="255:20">&amp;</operator> <name pos:start="255:22" pos:end="255:32">BDRV_O_RDWR</name><operator pos:start="255:33" pos:end="255:33">)</operator> <operator pos:start="255:35" pos:end="255:36">&amp;&amp;</operator> <operator pos:start="255:38" pos:end="255:38">!</operator><operator pos:start="255:39" pos:end="255:39">(</operator><name pos:start="255:40" pos:end="255:44">flags</name> <operator pos:start="255:46" pos:end="255:46">&amp;</operator> <name pos:start="255:48" pos:end="255:59">BDRV_O_CHECK</name><operator pos:start="255:60" pos:end="255:60">)</operator></expr>)</condition> <block pos:start="255:63" pos:end="265:9">{<block_content pos:start="257:13" pos:end="263:22">

            <expr_stmt pos:start="257:13" pos:end="259:37"><expr pos:start="257:13" pos:end="259:36"><call pos:start="257:13" pos:end="259:36"><name pos:start="257:13" pos:end="257:22">error_setg</name><argument_list pos:start="257:23" pos:end="259:36">(<argument pos:start="257:24" pos:end="257:27"><expr pos:start="257:24" pos:end="257:27"><name pos:start="257:24" pos:end="257:27">errp</name></expr></argument>, <argument pos:start="257:30" pos:end="259:35"><expr pos:start="257:30" pos:end="259:35"><literal type="string" pos:start="257:30" pos:end="257:73">"qcow2: Image is corrupt; cannot be opened "</literal>

                       <literal type="string" pos:start="259:24" pos:end="259:35">"read/write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:26"><expr pos:start="261:13" pos:end="261:25"><name pos:start="261:13" pos:end="261:15">ret</name> <operator pos:start="261:17" pos:end="261:17">=</operator> <operator pos:start="261:19" pos:end="261:19">-</operator><name pos:start="261:20" pos:end="261:25">EACCES</name></expr>;</expr_stmt>

            <goto pos:start="263:13" pos:end="263:22">goto <name pos:start="263:18" pos:end="263:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="271:5" pos:end="271:49">/* Check support for various header values */</comment>

    <if_stmt pos:start="273:5" pos:end="283:5"><if pos:start="273:5" pos:end="283:5">if <condition pos:start="273:8" pos:end="273:34">(<expr pos:start="273:9" pos:end="273:33"><name pos:start="273:9" pos:end="273:29"><name pos:start="273:9" pos:end="273:14">header</name><operator pos:start="273:15" pos:end="273:15">.</operator><name pos:start="273:16" pos:end="273:29">refcount_order</name></name> <operator pos:start="273:31" pos:end="273:31">&gt;</operator> <literal type="number" pos:start="273:33" pos:end="273:33">6</literal></expr>)</condition> <block pos:start="273:36" pos:end="283:5">{<block_content pos:start="275:9" pos:end="281:18">

        <expr_stmt pos:start="275:9" pos:end="277:37"><expr pos:start="275:9" pos:end="277:36"><call pos:start="275:9" pos:end="277:36"><name pos:start="275:9" pos:end="275:18">error_setg</name><argument_list pos:start="275:19" pos:end="277:36">(<argument pos:start="275:20" pos:end="275:23"><expr pos:start="275:20" pos:end="275:23"><name pos:start="275:20" pos:end="275:23">errp</name></expr></argument>, <argument pos:start="275:26" pos:end="277:35"><expr pos:start="275:26" pos:end="277:35"><literal type="string" pos:start="275:26" pos:end="275:74">"Reference count entry width too large; may not "</literal>

                   <literal type="string" pos:start="277:20" pos:end="277:35">"exceed 64 bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:22"><expr pos:start="279:9" pos:end="279:21"><name pos:start="279:9" pos:end="279:11">ret</name> <operator pos:start="279:13" pos:end="279:13">=</operator> <operator pos:start="279:15" pos:end="279:15">-</operator><name pos:start="279:16" pos:end="279:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="281:9" pos:end="281:18">goto <name pos:start="281:14" pos:end="281:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:46"><expr pos:start="285:5" pos:end="285:45"><name pos:start="285:5" pos:end="285:21"><name pos:start="285:5" pos:end="285:5">s</name><operator pos:start="285:6" pos:end="285:7">-&gt;</operator><name pos:start="285:8" pos:end="285:21">refcount_order</name></name> <operator pos:start="285:23" pos:end="285:23">=</operator> <name pos:start="285:25" pos:end="285:45"><name pos:start="285:25" pos:end="285:30">header</name><operator pos:start="285:31" pos:end="285:31">.</operator><name pos:start="285:32" pos:end="285:45">refcount_order</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:46"><expr pos:start="287:5" pos:end="287:45"><name pos:start="287:5" pos:end="287:20"><name pos:start="287:5" pos:end="287:5">s</name><operator pos:start="287:6" pos:end="287:7">-&gt;</operator><name pos:start="287:8" pos:end="287:20">refcount_bits</name></name> <operator pos:start="287:22" pos:end="287:22">=</operator> <literal type="number" pos:start="287:24" pos:end="287:24">1</literal> <operator pos:start="287:26" pos:end="287:27">&lt;&lt;</operator> <name pos:start="287:29" pos:end="287:45"><name pos:start="287:29" pos:end="287:29">s</name><operator pos:start="287:30" pos:end="287:31">-&gt;</operator><name pos:start="287:32" pos:end="287:45">refcount_order</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:60"><expr pos:start="289:5" pos:end="289:59"><name pos:start="289:5" pos:end="289:19"><name pos:start="289:5" pos:end="289:5">s</name><operator pos:start="289:6" pos:end="289:7">-&gt;</operator><name pos:start="289:8" pos:end="289:19">refcount_max</name></name> <operator pos:start="289:21" pos:end="289:21">=</operator> <call pos:start="289:23" pos:end="289:33"><name pos:start="289:23" pos:end="289:30">UINT64_C</name><argument_list pos:start="289:31" pos:end="289:33">(<argument pos:start="289:32" pos:end="289:32"><expr pos:start="289:32" pos:end="289:32"><literal type="number" pos:start="289:32" pos:end="289:32">1</literal></expr></argument>)</argument_list></call> <operator pos:start="289:35" pos:end="289:36">&lt;&lt;</operator> <operator pos:start="289:38" pos:end="289:38">(</operator><name pos:start="289:39" pos:end="289:54"><name pos:start="289:39" pos:end="289:39">s</name><operator pos:start="289:40" pos:end="289:41">-&gt;</operator><name pos:start="289:42" pos:end="289:54">refcount_bits</name></name> <operator pos:start="289:56" pos:end="289:56">-</operator> <literal type="number" pos:start="289:58" pos:end="289:58">1</literal><operator pos:start="289:59" pos:end="289:59">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:43"><expr pos:start="291:5" pos:end="291:42"><name pos:start="291:5" pos:end="291:19"><name pos:start="291:5" pos:end="291:5">s</name><operator pos:start="291:6" pos:end="291:7">-&gt;</operator><name pos:start="291:8" pos:end="291:19">refcount_max</name></name> <operator pos:start="291:21" pos:end="291:22">+=</operator> <name pos:start="291:24" pos:end="291:38"><name pos:start="291:24" pos:end="291:24">s</name><operator pos:start="291:25" pos:end="291:26">-&gt;</operator><name pos:start="291:27" pos:end="291:38">refcount_max</name></name> <operator pos:start="291:40" pos:end="291:40">-</operator> <literal type="number" pos:start="291:42" pos:end="291:42">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="295:5" pos:end="305:5"><if pos:start="295:5" pos:end="305:5">if <condition pos:start="295:8" pos:end="295:45">(<expr pos:start="295:9" pos:end="295:44"><name pos:start="295:9" pos:end="295:27"><name pos:start="295:9" pos:end="295:14">header</name><operator pos:start="295:15" pos:end="295:15">.</operator><name pos:start="295:16" pos:end="295:27">crypt_method</name></name> <operator pos:start="295:29" pos:end="295:29">&gt;</operator> <name pos:start="295:31" pos:end="295:44">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="295:47" pos:end="305:5">{<block_content pos:start="297:9" pos:end="303:18">

        <expr_stmt pos:start="297:9" pos:end="299:40"><expr pos:start="297:9" pos:end="299:39"><call pos:start="297:9" pos:end="299:39"><name pos:start="297:9" pos:end="297:18">error_setg</name><argument_list pos:start="297:19" pos:end="299:39">(<argument pos:start="297:20" pos:end="297:23"><expr pos:start="297:20" pos:end="297:23"><name pos:start="297:20" pos:end="297:23">errp</name></expr></argument>, <argument pos:start="297:26" pos:end="297:66"><expr pos:start="297:26" pos:end="297:66"><literal type="string" pos:start="297:26" pos:end="297:59">"Unsupported encryption method: %"</literal> <name pos:start="297:61" pos:end="297:66">PRIu32</name></expr></argument>,

                   <argument pos:start="299:20" pos:end="299:38"><expr pos:start="299:20" pos:end="299:38"><name pos:start="299:20" pos:end="299:38"><name pos:start="299:20" pos:end="299:25">header</name><operator pos:start="299:26" pos:end="299:26">.</operator><name pos:start="299:27" pos:end="299:38">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:22"><expr pos:start="301:9" pos:end="301:21"><name pos:start="301:9" pos:end="301:11">ret</name> <operator pos:start="301:13" pos:end="301:13">=</operator> <operator pos:start="301:15" pos:end="301:15">-</operator><name pos:start="301:16" pos:end="301:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="303:9" pos:end="303:18">goto <name pos:start="303:14" pos:end="303:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="307:5" pos:end="307:49"><expr pos:start="307:5" pos:end="307:48"><name pos:start="307:5" pos:end="307:26"><name pos:start="307:5" pos:end="307:5">s</name><operator pos:start="307:6" pos:end="307:7">-&gt;</operator><name pos:start="307:8" pos:end="307:26">crypt_method_header</name></name> <operator pos:start="307:28" pos:end="307:28">=</operator> <name pos:start="307:30" pos:end="307:48"><name pos:start="307:30" pos:end="307:35">header</name><operator pos:start="307:36" pos:end="307:36">.</operator><name pos:start="307:37" pos:end="307:48">crypt_method</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="309:5" pos:end="343:5"><if pos:start="309:5" pos:end="343:5">if <condition pos:start="309:8" pos:end="309:31">(<expr pos:start="309:9" pos:end="309:30"><name pos:start="309:9" pos:end="309:30"><name pos:start="309:9" pos:end="309:9">s</name><operator pos:start="309:10" pos:end="309:11">-&gt;</operator><name pos:start="309:12" pos:end="309:30">crypt_method_header</name></name></expr>)</condition> <block pos:start="309:33" pos:end="343:5">{<block_content pos:start="311:9" pos:end="341:29">

        <if_stmt pos:start="311:9" pos:end="335:9"><if pos:start="311:9" pos:end="335:9">if <condition pos:start="311:12" pos:end="313:53">(<expr pos:start="311:13" pos:end="313:52"><call pos:start="311:13" pos:end="311:33"><name pos:start="311:13" pos:end="311:31">bdrv_uses_whitelist</name><argument_list pos:start="311:32" pos:end="311:33">()</argument_list></call> <operator pos:start="311:35" pos:end="311:36">&amp;&amp;</operator>

            <name pos:start="313:13" pos:end="313:34"><name pos:start="313:13" pos:end="313:13">s</name><operator pos:start="313:14" pos:end="313:15">-&gt;</operator><name pos:start="313:16" pos:end="313:34">crypt_method_header</name></name> <operator pos:start="313:36" pos:end="313:37">==</operator> <name pos:start="313:39" pos:end="313:52">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="313:55" pos:end="335:9">{<block_content pos:start="315:13" pos:end="333:22">

            <expr_stmt pos:start="315:13" pos:end="319:56"><expr pos:start="315:13" pos:end="319:55"><call pos:start="315:13" pos:end="319:55"><name pos:start="315:13" pos:end="315:22">error_setg</name><argument_list pos:start="315:23" pos:end="319:55">(<argument pos:start="315:24" pos:end="315:27"><expr pos:start="315:24" pos:end="315:27"><name pos:start="315:24" pos:end="315:27">errp</name></expr></argument>,

                       <argument pos:start="317:24" pos:end="319:54"><expr pos:start="317:24" pos:end="319:54"><literal type="string" pos:start="317:24" pos:end="317:76">"Use of AES-CBC encrypted qcow2 images is no longer "</literal>

                       <literal type="string" pos:start="319:24" pos:end="319:54">"supported in system emulators"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="329:51"><expr pos:start="321:13" pos:end="329:50"><call pos:start="321:13" pos:end="329:50"><name pos:start="321:13" pos:end="321:29">error_append_hint</name><argument_list pos:start="321:30" pos:end="329:50">(<argument pos:start="321:31" pos:end="321:34"><expr pos:start="321:31" pos:end="321:34"><name pos:start="321:31" pos:end="321:34">errp</name></expr></argument>,

                              <argument pos:start="323:31" pos:end="329:49"><expr pos:start="323:31" pos:end="329:49"><literal type="string" pos:start="323:31" pos:end="323:79">"You can use 'qemu-img convert' to convert your "</literal>

                              <literal type="string" pos:start="325:31" pos:end="325:79">"image to an alternative supported format, such "</literal>

                              <literal type="string" pos:start="327:31" pos:end="327:75">"as unencrypted qcow2, or raw with the LUKS "</literal>

                              <literal type="string" pos:start="329:31" pos:end="329:49">"format instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:26"><expr pos:start="331:13" pos:end="331:25"><name pos:start="331:13" pos:end="331:15">ret</name> <operator pos:start="331:17" pos:end="331:17">=</operator> <operator pos:start="331:19" pos:end="331:19">-</operator><name pos:start="331:20" pos:end="331:25">ENOSYS</name></expr>;</expr_stmt>

            <goto pos:start="333:13" pos:end="333:22">goto <name pos:start="333:18" pos:end="333:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="339:9" pos:end="339:29"><expr pos:start="339:9" pos:end="339:28"><name pos:start="339:9" pos:end="339:21"><name pos:start="339:9" pos:end="339:10">bs</name><operator pos:start="339:11" pos:end="339:12">-&gt;</operator><name pos:start="339:13" pos:end="339:21">encrypted</name></name> <operator pos:start="339:23" pos:end="339:23">=</operator> <name pos:start="339:25" pos:end="339:28">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:29"><expr pos:start="341:9" pos:end="341:28"><name pos:start="341:9" pos:end="341:21"><name pos:start="341:9" pos:end="341:10">bs</name><operator pos:start="341:11" pos:end="341:12">-&gt;</operator><name pos:start="341:13" pos:end="341:21">valid_key</name></name> <operator pos:start="341:23" pos:end="341:23">=</operator> <name pos:start="341:25" pos:end="341:28">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="347:5" pos:end="347:37"><expr pos:start="347:5" pos:end="347:36"><name pos:start="347:5" pos:end="347:14"><name pos:start="347:5" pos:end="347:5">s</name><operator pos:start="347:6" pos:end="347:7">-&gt;</operator><name pos:start="347:8" pos:end="347:14">l2_bits</name></name> <operator pos:start="347:16" pos:end="347:16">=</operator> <name pos:start="347:18" pos:end="347:32"><name pos:start="347:18" pos:end="347:18">s</name><operator pos:start="347:19" pos:end="347:20">-&gt;</operator><name pos:start="347:21" pos:end="347:32">cluster_bits</name></name> <operator pos:start="347:34" pos:end="347:34">-</operator> <literal type="number" pos:start="347:36" pos:end="347:36">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="347:39" pos:end="347:68">/* L2 is always one cluster */</comment>

    <expr_stmt pos:start="349:5" pos:end="349:33"><expr pos:start="349:5" pos:end="349:32"><name pos:start="349:5" pos:end="349:14"><name pos:start="349:5" pos:end="349:5">s</name><operator pos:start="349:6" pos:end="349:7">-&gt;</operator><name pos:start="349:8" pos:end="349:14">l2_size</name></name> <operator pos:start="349:16" pos:end="349:16">=</operator> <literal type="number" pos:start="349:18" pos:end="349:18">1</literal> <operator pos:start="349:20" pos:end="349:21">&lt;&lt;</operator> <name pos:start="349:23" pos:end="349:32"><name pos:start="349:23" pos:end="349:23">s</name><operator pos:start="349:24" pos:end="349:25">-&gt;</operator><name pos:start="349:26" pos:end="349:32">l2_bits</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="351:5" pos:end="351:66">/* 2^(s-&gt;refcount_order - 3) is the refcount width in bytes */</comment>

    <expr_stmt pos:start="353:5" pos:end="353:71"><expr pos:start="353:5" pos:end="353:70"><name pos:start="353:5" pos:end="353:26"><name pos:start="353:5" pos:end="353:5">s</name><operator pos:start="353:6" pos:end="353:7">-&gt;</operator><name pos:start="353:8" pos:end="353:26">refcount_block_bits</name></name> <operator pos:start="353:28" pos:end="353:28">=</operator> <name pos:start="353:30" pos:end="353:44"><name pos:start="353:30" pos:end="353:30">s</name><operator pos:start="353:31" pos:end="353:32">-&gt;</operator><name pos:start="353:33" pos:end="353:44">cluster_bits</name></name> <operator pos:start="353:46" pos:end="353:46">-</operator> <operator pos:start="353:48" pos:end="353:48">(</operator><name pos:start="353:49" pos:end="353:65"><name pos:start="353:49" pos:end="353:49">s</name><operator pos:start="353:50" pos:end="353:51">-&gt;</operator><name pos:start="353:52" pos:end="353:65">refcount_order</name></name> <operator pos:start="353:67" pos:end="353:67">-</operator> <literal type="number" pos:start="353:69" pos:end="353:69">3</literal><operator pos:start="353:70" pos:end="353:70">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:57"><expr pos:start="355:5" pos:end="355:56"><name pos:start="355:5" pos:end="355:26"><name pos:start="355:5" pos:end="355:5">s</name><operator pos:start="355:6" pos:end="355:7">-&gt;</operator><name pos:start="355:8" pos:end="355:26">refcount_block_size</name></name> <operator pos:start="355:28" pos:end="355:28">=</operator> <literal type="number" pos:start="355:30" pos:end="355:30">1</literal> <operator pos:start="355:32" pos:end="355:33">&lt;&lt;</operator> <name pos:start="355:35" pos:end="355:56"><name pos:start="355:35" pos:end="355:35">s</name><operator pos:start="355:36" pos:end="355:37">-&gt;</operator><name pos:start="355:38" pos:end="355:56">refcount_block_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:42"><expr pos:start="357:5" pos:end="357:41"><name pos:start="357:5" pos:end="357:21"><name pos:start="357:5" pos:end="357:6">bs</name><operator pos:start="357:7" pos:end="357:8">-&gt;</operator><name pos:start="357:9" pos:end="357:21">total_sectors</name></name> <operator pos:start="357:23" pos:end="357:23">=</operator> <name pos:start="357:25" pos:end="357:35"><name pos:start="357:25" pos:end="357:30">header</name><operator pos:start="357:31" pos:end="357:31">.</operator><name pos:start="357:32" pos:end="357:35">size</name></name> <operator pos:start="357:37" pos:end="357:37">/</operator> <literal type="number" pos:start="357:39" pos:end="357:41">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:50"><expr pos:start="359:5" pos:end="359:49"><name pos:start="359:5" pos:end="359:18"><name pos:start="359:5" pos:end="359:5">s</name><operator pos:start="359:6" pos:end="359:7">-&gt;</operator><name pos:start="359:8" pos:end="359:18">csize_shift</name></name> <operator pos:start="359:20" pos:end="359:20">=</operator> <operator pos:start="359:22" pos:end="359:22">(</operator><literal type="number" pos:start="359:23" pos:end="359:26">62</literal> <operator pos:start="359:26" pos:end="359:26">-</operator> <operator pos:start="359:28" pos:end="359:28">(</operator><name pos:start="359:29" pos:end="359:43"><name pos:start="359:29" pos:end="359:29">s</name><operator pos:start="359:30" pos:end="359:31">-&gt;</operator><name pos:start="359:32" pos:end="359:43">cluster_bits</name></name> <operator pos:start="359:45" pos:end="359:45">-</operator> <literal type="number" pos:start="359:47" pos:end="359:47">8</literal><operator pos:start="359:48" pos:end="359:48">)</operator><operator pos:start="359:49" pos:end="359:49">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:53"><expr pos:start="361:5" pos:end="361:52"><name pos:start="361:5" pos:end="361:17"><name pos:start="361:5" pos:end="361:5">s</name><operator pos:start="361:6" pos:end="361:7">-&gt;</operator><name pos:start="361:8" pos:end="361:17">csize_mask</name></name> <operator pos:start="361:19" pos:end="361:19">=</operator> <operator pos:start="361:21" pos:end="361:21">(</operator><literal type="number" pos:start="361:22" pos:end="361:22">1</literal> <operator pos:start="361:24" pos:end="361:25">&lt;&lt;</operator> <operator pos:start="361:27" pos:end="361:27">(</operator><name pos:start="361:28" pos:end="361:42"><name pos:start="361:28" pos:end="361:28">s</name><operator pos:start="361:29" pos:end="361:30">-&gt;</operator><name pos:start="361:31" pos:end="361:42">cluster_bits</name></name> <operator pos:start="361:44" pos:end="361:44">-</operator> <literal type="number" pos:start="361:46" pos:end="361:46">8</literal><operator pos:start="361:47" pos:end="361:47">)</operator><operator pos:start="361:48" pos:end="361:48">)</operator> <operator pos:start="361:50" pos:end="361:50">-</operator> <literal type="number" pos:start="361:52" pos:end="361:52">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:57"><expr pos:start="363:5" pos:end="363:56"><name pos:start="363:5" pos:end="363:26"><name pos:start="363:5" pos:end="363:5">s</name><operator pos:start="363:6" pos:end="363:7">-&gt;</operator><name pos:start="363:8" pos:end="363:26">cluster_offset_mask</name></name> <operator pos:start="363:28" pos:end="363:28">=</operator> <operator pos:start="363:30" pos:end="363:30">(</operator><literal type="number" pos:start="363:31" pos:end="363:33">1LL</literal> <operator pos:start="363:35" pos:end="363:36">&lt;&lt;</operator> <name pos:start="363:38" pos:end="363:51"><name pos:start="363:38" pos:end="363:38">s</name><operator pos:start="363:39" pos:end="363:40">-&gt;</operator><name pos:start="363:41" pos:end="363:51">csize_shift</name></name><operator pos:start="363:52" pos:end="363:52">)</operator> <operator pos:start="363:54" pos:end="363:54">-</operator> <literal type="number" pos:start="363:56" pos:end="363:56">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="367:5" pos:end="367:60"><expr pos:start="367:5" pos:end="367:59"><name pos:start="367:5" pos:end="367:28"><name pos:start="367:5" pos:end="367:5">s</name><operator pos:start="367:6" pos:end="367:7">-&gt;</operator><name pos:start="367:8" pos:end="367:28">refcount_table_offset</name></name> <operator pos:start="367:30" pos:end="367:30">=</operator> <name pos:start="367:32" pos:end="367:59"><name pos:start="367:32" pos:end="367:37">header</name><operator pos:start="367:38" pos:end="367:38">.</operator><name pos:start="367:39" pos:end="367:59">refcount_table_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="371:64"><expr pos:start="369:5" pos:end="371:63"><name pos:start="369:5" pos:end="369:26"><name pos:start="369:5" pos:end="369:5">s</name><operator pos:start="369:6" pos:end="369:7">-&gt;</operator><name pos:start="369:8" pos:end="369:26">refcount_table_size</name></name> <operator pos:start="369:28" pos:end="369:28">=</operator>

        <name pos:start="371:9" pos:end="371:38"><name pos:start="371:9" pos:end="371:14">header</name><operator pos:start="371:15" pos:end="371:15">.</operator><name pos:start="371:16" pos:end="371:38">refcount_table_clusters</name></name> <operator pos:start="371:40" pos:end="371:41">&lt;&lt;</operator> <operator pos:start="371:43" pos:end="371:43">(</operator><name pos:start="371:44" pos:end="371:58"><name pos:start="371:44" pos:end="371:44">s</name><operator pos:start="371:45" pos:end="371:46">-&gt;</operator><name pos:start="371:47" pos:end="371:58">cluster_bits</name></name> <operator pos:start="371:60" pos:end="371:60">-</operator> <literal type="number" pos:start="371:62" pos:end="371:62">3</literal><operator pos:start="371:63" pos:end="371:63">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="375:5" pos:end="383:5"><if pos:start="375:5" pos:end="383:5">if <condition pos:start="375:8" pos:end="375:72">(<expr pos:start="375:9" pos:end="375:71"><name pos:start="375:9" pos:end="375:38"><name pos:start="375:9" pos:end="375:14">header</name><operator pos:start="375:15" pos:end="375:15">.</operator><name pos:start="375:16" pos:end="375:38">refcount_table_clusters</name></name> <operator pos:start="375:40" pos:end="375:40">&gt;</operator> <call pos:start="375:42" pos:end="375:71"><name pos:start="375:42" pos:end="375:68">qcow2_max_refcount_clusters</name><argument_list pos:start="375:69" pos:end="375:71">(<argument pos:start="375:70" pos:end="375:70"><expr pos:start="375:70" pos:end="375:70"><name pos:start="375:70" pos:end="375:70">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="375:74" pos:end="383:5">{<block_content pos:start="377:9" pos:end="381:18">

        <expr_stmt pos:start="377:9" pos:end="377:60"><expr pos:start="377:9" pos:end="377:59"><call pos:start="377:9" pos:end="377:59"><name pos:start="377:9" pos:end="377:18">error_setg</name><argument_list pos:start="377:19" pos:end="377:59">(<argument pos:start="377:20" pos:end="377:23"><expr pos:start="377:20" pos:end="377:23"><name pos:start="377:20" pos:end="377:23">errp</name></expr></argument>, <argument pos:start="377:26" pos:end="377:58"><expr pos:start="377:26" pos:end="377:58"><literal type="string" pos:start="377:26" pos:end="377:58">"Reference count table too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:22"><expr pos:start="379:9" pos:end="379:21"><name pos:start="379:9" pos:end="379:11">ret</name> <operator pos:start="379:13" pos:end="379:13">=</operator> <operator pos:start="379:15" pos:end="379:15">-</operator><name pos:start="379:16" pos:end="379:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="381:9" pos:end="381:18">goto <name pos:start="381:14" pos:end="381:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="387:5" pos:end="389:74"><expr pos:start="387:5" pos:end="389:73"><name pos:start="387:5" pos:end="387:7">ret</name> <operator pos:start="387:9" pos:end="387:9">=</operator> <call pos:start="387:11" pos:end="389:73"><name pos:start="387:11" pos:end="387:31">validate_table_offset</name><argument_list pos:start="387:32" pos:end="389:73">(<argument pos:start="387:33" pos:end="387:34"><expr pos:start="387:33" pos:end="387:34"><name pos:start="387:33" pos:end="387:34">bs</name></expr></argument>, <argument pos:start="387:37" pos:end="387:60"><expr pos:start="387:37" pos:end="387:60"><name pos:start="387:37" pos:end="387:60"><name pos:start="387:37" pos:end="387:37">s</name><operator pos:start="387:38" pos:end="387:39">-&gt;</operator><name pos:start="387:40" pos:end="387:60">refcount_table_offset</name></name></expr></argument>,

                                <argument pos:start="389:33" pos:end="389:54"><expr pos:start="389:33" pos:end="389:54"><name pos:start="389:33" pos:end="389:54"><name pos:start="389:33" pos:end="389:33">s</name><operator pos:start="389:34" pos:end="389:35">-&gt;</operator><name pos:start="389:36" pos:end="389:54">refcount_table_size</name></name></expr></argument>, <argument pos:start="389:57" pos:end="389:72"><expr pos:start="389:57" pos:end="389:72"><sizeof pos:start="389:57" pos:end="389:72">sizeof<argument_list pos:start="389:63" pos:end="389:72">(<argument pos:start="389:64" pos:end="389:71"><expr pos:start="389:64" pos:end="389:71"><name pos:start="389:64" pos:end="389:71">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="391:5" pos:end="397:5"><if pos:start="391:5" pos:end="397:5">if <condition pos:start="391:8" pos:end="391:16">(<expr pos:start="391:9" pos:end="391:15"><name pos:start="391:9" pos:end="391:11">ret</name> <operator pos:start="391:13" pos:end="391:13">&lt;</operator> <literal type="number" pos:start="391:15" pos:end="391:15">0</literal></expr>)</condition> <block pos:start="391:18" pos:end="397:5">{<block_content pos:start="393:9" pos:end="395:18">

        <expr_stmt pos:start="393:9" pos:end="393:65"><expr pos:start="393:9" pos:end="393:64"><call pos:start="393:9" pos:end="393:64"><name pos:start="393:9" pos:end="393:18">error_setg</name><argument_list pos:start="393:19" pos:end="393:64">(<argument pos:start="393:20" pos:end="393:23"><expr pos:start="393:20" pos:end="393:23"><name pos:start="393:20" pos:end="393:23">errp</name></expr></argument>, <argument pos:start="393:26" pos:end="393:63"><expr pos:start="393:26" pos:end="393:63"><literal type="string" pos:start="393:26" pos:end="393:63">"Invalid reference count table offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="395:9" pos:end="395:18">goto <name pos:start="395:14" pos:end="395:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="401:5" pos:end="401:38">/* Snapshot table offset/length */</comment>

    <if_stmt pos:start="403:5" pos:end="411:5"><if pos:start="403:5" pos:end="411:5">if <condition pos:start="403:8" pos:end="403:49">(<expr pos:start="403:9" pos:end="403:48"><name pos:start="403:9" pos:end="403:27"><name pos:start="403:9" pos:end="403:14">header</name><operator pos:start="403:15" pos:end="403:15">.</operator><name pos:start="403:16" pos:end="403:27">nb_snapshots</name></name> <operator pos:start="403:29" pos:end="403:29">&gt;</operator> <name pos:start="403:31" pos:end="403:48">QCOW_MAX_SNAPSHOTS</name></expr>)</condition> <block pos:start="403:51" pos:end="411:5">{<block_content pos:start="405:9" pos:end="409:18">

        <expr_stmt pos:start="405:9" pos:end="405:47"><expr pos:start="405:9" pos:end="405:46"><call pos:start="405:9" pos:end="405:46"><name pos:start="405:9" pos:end="405:18">error_setg</name><argument_list pos:start="405:19" pos:end="405:46">(<argument pos:start="405:20" pos:end="405:23"><expr pos:start="405:20" pos:end="405:23"><name pos:start="405:20" pos:end="405:23">errp</name></expr></argument>, <argument pos:start="405:26" pos:end="405:45"><expr pos:start="405:26" pos:end="405:45"><literal type="string" pos:start="405:26" pos:end="405:45">"Too many snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="407:9" pos:end="407:22"><expr pos:start="407:9" pos:end="407:21"><name pos:start="407:9" pos:end="407:11">ret</name> <operator pos:start="407:13" pos:end="407:13">=</operator> <operator pos:start="407:15" pos:end="407:15">-</operator><name pos:start="407:16" pos:end="407:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="409:9" pos:end="409:18">goto <name pos:start="409:14" pos:end="409:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="415:5" pos:end="419:60"><expr pos:start="415:5" pos:end="419:59"><name pos:start="415:5" pos:end="415:7">ret</name> <operator pos:start="415:9" pos:end="415:9">=</operator> <call pos:start="415:11" pos:end="419:59"><name pos:start="415:11" pos:end="415:31">validate_table_offset</name><argument_list pos:start="415:32" pos:end="419:59">(<argument pos:start="415:33" pos:end="415:34"><expr pos:start="415:33" pos:end="415:34"><name pos:start="415:33" pos:end="415:34">bs</name></expr></argument>, <argument pos:start="415:37" pos:end="415:59"><expr pos:start="415:37" pos:end="415:59"><name pos:start="415:37" pos:end="415:59"><name pos:start="415:37" pos:end="415:42">header</name><operator pos:start="415:43" pos:end="415:43">.</operator><name pos:start="415:44" pos:end="415:59">snapshots_offset</name></name></expr></argument>,

                                <argument pos:start="417:33" pos:end="417:51"><expr pos:start="417:33" pos:end="417:51"><name pos:start="417:33" pos:end="417:51"><name pos:start="417:33" pos:end="417:38">header</name><operator pos:start="417:39" pos:end="417:39">.</operator><name pos:start="417:40" pos:end="417:51">nb_snapshots</name></name></expr></argument>,

                                <argument pos:start="419:33" pos:end="419:58"><expr pos:start="419:33" pos:end="419:58"><sizeof pos:start="419:33" pos:end="419:58">sizeof<argument_list pos:start="419:39" pos:end="419:58">(<argument pos:start="419:40" pos:end="419:57"><expr pos:start="419:40" pos:end="419:57"><name pos:start="419:40" pos:end="419:57">QCowSnapshotHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="421:5" pos:end="427:5"><if pos:start="421:5" pos:end="427:5">if <condition pos:start="421:8" pos:end="421:16">(<expr pos:start="421:9" pos:end="421:15"><name pos:start="421:9" pos:end="421:11">ret</name> <operator pos:start="421:13" pos:end="421:13">&lt;</operator> <literal type="number" pos:start="421:15" pos:end="421:15">0</literal></expr>)</condition> <block pos:start="421:18" pos:end="427:5">{<block_content pos:start="423:9" pos:end="425:18">

        <expr_stmt pos:start="423:9" pos:end="423:58"><expr pos:start="423:9" pos:end="423:57"><call pos:start="423:9" pos:end="423:57"><name pos:start="423:9" pos:end="423:18">error_setg</name><argument_list pos:start="423:19" pos:end="423:57">(<argument pos:start="423:20" pos:end="423:23"><expr pos:start="423:20" pos:end="423:23"><name pos:start="423:20" pos:end="423:23">errp</name></expr></argument>, <argument pos:start="423:26" pos:end="423:56"><expr pos:start="423:26" pos:end="423:56"><literal type="string" pos:start="423:26" pos:end="423:56">"Invalid snapshot table offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="425:9" pos:end="425:18">goto <name pos:start="425:14" pos:end="425:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="431:5" pos:end="431:32">/* read the level 1 table */</comment>

    <if_stmt pos:start="433:5" pos:end="441:5"><if pos:start="433:5" pos:end="441:5">if <condition pos:start="433:8" pos:end="433:61">(<expr pos:start="433:9" pos:end="433:60"><name pos:start="433:9" pos:end="433:22"><name pos:start="433:9" pos:end="433:14">header</name><operator pos:start="433:15" pos:end="433:15">.</operator><name pos:start="433:16" pos:end="433:22">l1_size</name></name> <operator pos:start="433:24" pos:end="433:24">&gt;</operator> <name pos:start="433:26" pos:end="433:41">QCOW_MAX_L1_SIZE</name> <operator pos:start="433:43" pos:end="433:43">/</operator> <sizeof pos:start="433:45" pos:end="433:60">sizeof<argument_list pos:start="433:51" pos:end="433:60">(<argument pos:start="433:52" pos:end="433:59"><expr pos:start="433:52" pos:end="433:59"><name pos:start="433:52" pos:end="433:59">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="433:63" pos:end="441:5">{<block_content pos:start="435:9" pos:end="439:18">

        <expr_stmt pos:start="435:9" pos:end="435:54"><expr pos:start="435:9" pos:end="435:53"><call pos:start="435:9" pos:end="435:53"><name pos:start="435:9" pos:end="435:18">error_setg</name><argument_list pos:start="435:19" pos:end="435:53">(<argument pos:start="435:20" pos:end="435:23"><expr pos:start="435:20" pos:end="435:23"><name pos:start="435:20" pos:end="435:23">errp</name></expr></argument>, <argument pos:start="435:26" pos:end="435:52"><expr pos:start="435:26" pos:end="435:52"><literal type="string" pos:start="435:26" pos:end="435:52">"Active L1 table too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="437:9" pos:end="437:21"><expr pos:start="437:9" pos:end="437:20"><name pos:start="437:9" pos:end="437:11">ret</name> <operator pos:start="437:13" pos:end="437:13">=</operator> <operator pos:start="437:15" pos:end="437:15">-</operator><name pos:start="437:16" pos:end="437:20">EFBIG</name></expr>;</expr_stmt>

        <goto pos:start="439:9" pos:end="439:18">goto <name pos:start="439:14" pos:end="439:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="443:5" pos:end="443:32"><expr pos:start="443:5" pos:end="443:31"><name pos:start="443:5" pos:end="443:14"><name pos:start="443:5" pos:end="443:5">s</name><operator pos:start="443:6" pos:end="443:7">-&gt;</operator><name pos:start="443:8" pos:end="443:14">l1_size</name></name> <operator pos:start="443:16" pos:end="443:16">=</operator> <name pos:start="443:18" pos:end="443:31"><name pos:start="443:18" pos:end="443:23">header</name><operator pos:start="443:24" pos:end="443:24">.</operator><name pos:start="443:25" pos:end="443:31">l1_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="447:5" pos:end="447:51"><expr pos:start="447:5" pos:end="447:50"><name pos:start="447:5" pos:end="447:21">l1_vm_state_index</name> <operator pos:start="447:23" pos:end="447:23">=</operator> <call pos:start="447:25" pos:end="447:50"><name pos:start="447:25" pos:end="447:34">size_to_l1</name><argument_list pos:start="447:35" pos:end="447:50">(<argument pos:start="447:36" pos:end="447:36"><expr pos:start="447:36" pos:end="447:36"><name pos:start="447:36" pos:end="447:36">s</name></expr></argument>, <argument pos:start="447:39" pos:end="447:49"><expr pos:start="447:39" pos:end="447:49"><name pos:start="447:39" pos:end="447:49"><name pos:start="447:39" pos:end="447:44">header</name><operator pos:start="447:45" pos:end="447:45">.</operator><name pos:start="447:46" pos:end="447:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="449:5" pos:end="457:5"><if pos:start="449:5" pos:end="457:5">if <condition pos:start="449:8" pos:end="449:36">(<expr pos:start="449:9" pos:end="449:35"><name pos:start="449:9" pos:end="449:25">l1_vm_state_index</name> <operator pos:start="449:27" pos:end="449:27">&gt;</operator> <name pos:start="449:29" pos:end="449:35">INT_MAX</name></expr>)</condition> <block pos:start="449:38" pos:end="457:5">{<block_content pos:start="451:9" pos:end="455:18">

        <expr_stmt pos:start="451:9" pos:end="451:45"><expr pos:start="451:9" pos:end="451:44"><call pos:start="451:9" pos:end="451:44"><name pos:start="451:9" pos:end="451:18">error_setg</name><argument_list pos:start="451:19" pos:end="451:44">(<argument pos:start="451:20" pos:end="451:23"><expr pos:start="451:20" pos:end="451:23"><name pos:start="451:20" pos:end="451:23">errp</name></expr></argument>, <argument pos:start="451:26" pos:end="451:43"><expr pos:start="451:26" pos:end="451:43"><literal type="string" pos:start="451:26" pos:end="451:43">"Image is too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="453:9" pos:end="453:21"><expr pos:start="453:9" pos:end="453:20"><name pos:start="453:9" pos:end="453:11">ret</name> <operator pos:start="453:13" pos:end="453:13">=</operator> <operator pos:start="453:15" pos:end="453:15">-</operator><name pos:start="453:16" pos:end="453:20">EFBIG</name></expr>;</expr_stmt>

        <goto pos:start="455:9" pos:end="455:18">goto <name pos:start="455:14" pos:end="455:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="459:5" pos:end="459:45"><expr pos:start="459:5" pos:end="459:44"><name pos:start="459:5" pos:end="459:24"><name pos:start="459:5" pos:end="459:5">s</name><operator pos:start="459:6" pos:end="459:7">-&gt;</operator><name pos:start="459:8" pos:end="459:24">l1_vm_state_index</name></name> <operator pos:start="459:26" pos:end="459:26">=</operator> <name pos:start="459:28" pos:end="459:44">l1_vm_state_index</name></expr>;</expr_stmt>



    <comment type="block" pos:start="463:5" pos:end="465:27">/* the L1 table must contain at least enough entries to put

       header.size bytes */</comment>

    <if_stmt pos:start="467:5" pos:end="475:5"><if pos:start="467:5" pos:end="475:5">if <condition pos:start="467:8" pos:end="467:42">(<expr pos:start="467:9" pos:end="467:41"><name pos:start="467:9" pos:end="467:18"><name pos:start="467:9" pos:end="467:9">s</name><operator pos:start="467:10" pos:end="467:11">-&gt;</operator><name pos:start="467:12" pos:end="467:18">l1_size</name></name> <operator pos:start="467:20" pos:end="467:20">&lt;</operator> <name pos:start="467:22" pos:end="467:41"><name pos:start="467:22" pos:end="467:22">s</name><operator pos:start="467:23" pos:end="467:24">-&gt;</operator><name pos:start="467:25" pos:end="467:41">l1_vm_state_index</name></name></expr>)</condition> <block pos:start="467:44" pos:end="475:5">{<block_content pos:start="469:9" pos:end="473:18">

        <expr_stmt pos:start="469:9" pos:end="469:50"><expr pos:start="469:9" pos:end="469:49"><call pos:start="469:9" pos:end="469:49"><name pos:start="469:9" pos:end="469:18">error_setg</name><argument_list pos:start="469:19" pos:end="469:49">(<argument pos:start="469:20" pos:end="469:23"><expr pos:start="469:20" pos:end="469:23"><name pos:start="469:20" pos:end="469:23">errp</name></expr></argument>, <argument pos:start="469:26" pos:end="469:48"><expr pos:start="469:26" pos:end="469:48"><literal type="string" pos:start="469:26" pos:end="469:48">"L1 table is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="471:9" pos:end="471:22"><expr pos:start="471:9" pos:end="471:21"><name pos:start="471:9" pos:end="471:11">ret</name> <operator pos:start="471:13" pos:end="471:13">=</operator> <operator pos:start="471:15" pos:end="471:15">-</operator><name pos:start="471:16" pos:end="471:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="473:9" pos:end="473:18">goto <name pos:start="473:14" pos:end="473:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="479:5" pos:end="481:66"><expr pos:start="479:5" pos:end="481:65"><name pos:start="479:5" pos:end="479:7">ret</name> <operator pos:start="479:9" pos:end="479:9">=</operator> <call pos:start="479:11" pos:end="481:65"><name pos:start="479:11" pos:end="479:31">validate_table_offset</name><argument_list pos:start="479:32" pos:end="481:65">(<argument pos:start="479:33" pos:end="479:34"><expr pos:start="479:33" pos:end="479:34"><name pos:start="479:33" pos:end="479:34">bs</name></expr></argument>, <argument pos:start="479:37" pos:end="479:58"><expr pos:start="479:37" pos:end="479:58"><name pos:start="479:37" pos:end="479:58"><name pos:start="479:37" pos:end="479:42">header</name><operator pos:start="479:43" pos:end="479:43">.</operator><name pos:start="479:44" pos:end="479:58">l1_table_offset</name></name></expr></argument>,

                                <argument pos:start="481:33" pos:end="481:46"><expr pos:start="481:33" pos:end="481:46"><name pos:start="481:33" pos:end="481:46"><name pos:start="481:33" pos:end="481:38">header</name><operator pos:start="481:39" pos:end="481:39">.</operator><name pos:start="481:40" pos:end="481:46">l1_size</name></name></expr></argument>, <argument pos:start="481:49" pos:end="481:64"><expr pos:start="481:49" pos:end="481:64"><sizeof pos:start="481:49" pos:end="481:64">sizeof<argument_list pos:start="481:55" pos:end="481:64">(<argument pos:start="481:56" pos:end="481:63"><expr pos:start="481:56" pos:end="481:63"><name pos:start="481:56" pos:end="481:63">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="483:5" pos:end="489:5"><if pos:start="483:5" pos:end="489:5">if <condition pos:start="483:8" pos:end="483:16">(<expr pos:start="483:9" pos:end="483:15"><name pos:start="483:9" pos:end="483:11">ret</name> <operator pos:start="483:13" pos:end="483:13">&lt;</operator> <literal type="number" pos:start="483:15" pos:end="483:15">0</literal></expr>)</condition> <block pos:start="483:18" pos:end="489:5">{<block_content pos:start="485:9" pos:end="487:18">

        <expr_stmt pos:start="485:9" pos:end="485:52"><expr pos:start="485:9" pos:end="485:51"><call pos:start="485:9" pos:end="485:51"><name pos:start="485:9" pos:end="485:18">error_setg</name><argument_list pos:start="485:19" pos:end="485:51">(<argument pos:start="485:20" pos:end="485:23"><expr pos:start="485:20" pos:end="485:23"><name pos:start="485:20" pos:end="485:23">errp</name></expr></argument>, <argument pos:start="485:26" pos:end="485:50"><expr pos:start="485:26" pos:end="485:50"><literal type="string" pos:start="485:26" pos:end="485:50">"Invalid L1 table offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="487:9" pos:end="487:18">goto <name pos:start="487:14" pos:end="487:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="491:5" pos:end="491:48"><expr pos:start="491:5" pos:end="491:47"><name pos:start="491:5" pos:end="491:22"><name pos:start="491:5" pos:end="491:5">s</name><operator pos:start="491:6" pos:end="491:7">-&gt;</operator><name pos:start="491:8" pos:end="491:22">l1_table_offset</name></name> <operator pos:start="491:24" pos:end="491:24">=</operator> <name pos:start="491:26" pos:end="491:47"><name pos:start="491:26" pos:end="491:31">header</name><operator pos:start="491:32" pos:end="491:32">.</operator><name pos:start="491:33" pos:end="491:47">l1_table_offset</name></name></expr>;</expr_stmt>





    <if_stmt pos:start="497:5" pos:end="531:5"><if pos:start="497:5" pos:end="531:5">if <condition pos:start="497:8" pos:end="497:23">(<expr pos:start="497:9" pos:end="497:22"><name pos:start="497:9" pos:end="497:18"><name pos:start="497:9" pos:end="497:9">s</name><operator pos:start="497:10" pos:end="497:11">-&gt;</operator><name pos:start="497:12" pos:end="497:18">l1_size</name></name> <operator pos:start="497:20" pos:end="497:20">&gt;</operator> <literal type="number" pos:start="497:22" pos:end="497:22">0</literal></expr>)</condition> <block pos:start="497:25" pos:end="531:5">{<block_content pos:start="499:9" pos:end="529:9">

        <expr_stmt pos:start="499:9" pos:end="501:62"><expr pos:start="499:9" pos:end="501:61"><name pos:start="499:9" pos:end="499:19"><name pos:start="499:9" pos:end="499:9">s</name><operator pos:start="499:10" pos:end="499:11">-&gt;</operator><name pos:start="499:12" pos:end="499:19">l1_table</name></name> <operator pos:start="499:21" pos:end="499:21">=</operator> <call pos:start="499:23" pos:end="501:61"><name pos:start="499:23" pos:end="499:41">qemu_try_blockalign</name><argument_list pos:start="499:42" pos:end="501:61">(<argument pos:start="499:43" pos:end="499:54"><expr pos:start="499:43" pos:end="499:54"><name pos:start="499:43" pos:end="499:54"><name pos:start="499:43" pos:end="499:44">bs</name><operator pos:start="499:45" pos:end="499:46">-&gt;</operator><name pos:start="499:47" pos:end="499:50">file</name><operator pos:start="499:51" pos:end="499:52">-&gt;</operator><name pos:start="499:53" pos:end="499:54">bs</name></name></expr></argument>,

            <argument pos:start="501:13" pos:end="501:60"><expr pos:start="501:13" pos:end="501:60"><call pos:start="501:13" pos:end="501:60"><name pos:start="501:13" pos:end="501:24">align_offset</name><argument_list pos:start="501:25" pos:end="501:60">(<argument pos:start="501:26" pos:end="501:54"><expr pos:start="501:26" pos:end="501:54"><name pos:start="501:26" pos:end="501:35"><name pos:start="501:26" pos:end="501:26">s</name><operator pos:start="501:27" pos:end="501:28">-&gt;</operator><name pos:start="501:29" pos:end="501:35">l1_size</name></name> <operator pos:start="501:37" pos:end="501:37">*</operator> <sizeof pos:start="501:39" pos:end="501:54">sizeof<argument_list pos:start="501:45" pos:end="501:54">(<argument pos:start="501:46" pos:end="501:53"><expr pos:start="501:46" pos:end="501:53"><name pos:start="501:46" pos:end="501:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="501:57" pos:end="501:59"><expr pos:start="501:57" pos:end="501:59"><literal type="number" pos:start="501:57" pos:end="501:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="503:9" pos:end="511:9"><if pos:start="503:9" pos:end="511:9">if <condition pos:start="503:12" pos:end="503:32">(<expr pos:start="503:13" pos:end="503:31"><name pos:start="503:13" pos:end="503:23"><name pos:start="503:13" pos:end="503:13">s</name><operator pos:start="503:14" pos:end="503:15">-&gt;</operator><name pos:start="503:16" pos:end="503:23">l1_table</name></name> <operator pos:start="503:25" pos:end="503:26">==</operator> <name pos:start="503:28" pos:end="503:31">NULL</name></expr>)</condition> <block pos:start="503:34" pos:end="511:9">{<block_content pos:start="505:13" pos:end="509:22">

            <expr_stmt pos:start="505:13" pos:end="505:60"><expr pos:start="505:13" pos:end="505:59"><call pos:start="505:13" pos:end="505:59"><name pos:start="505:13" pos:end="505:22">error_setg</name><argument_list pos:start="505:23" pos:end="505:59">(<argument pos:start="505:24" pos:end="505:27"><expr pos:start="505:24" pos:end="505:27"><name pos:start="505:24" pos:end="505:27">errp</name></expr></argument>, <argument pos:start="505:30" pos:end="505:58"><expr pos:start="505:30" pos:end="505:58"><literal type="string" pos:start="505:30" pos:end="505:58">"Could not allocate L1 table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:26"><expr pos:start="507:13" pos:end="507:25"><name pos:start="507:13" pos:end="507:15">ret</name> <operator pos:start="507:17" pos:end="507:17">=</operator> <operator pos:start="507:19" pos:end="507:19">-</operator><name pos:start="507:20" pos:end="507:25">ENOMEM</name></expr>;</expr_stmt>

            <goto pos:start="509:13" pos:end="509:22">goto <name pos:start="509:18" pos:end="509:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="513:9" pos:end="515:56"><expr pos:start="513:9" pos:end="515:55"><name pos:start="513:9" pos:end="513:11">ret</name> <operator pos:start="513:13" pos:end="513:13">=</operator> <call pos:start="513:15" pos:end="515:55"><name pos:start="513:15" pos:end="513:24">bdrv_pread</name><argument_list pos:start="513:25" pos:end="515:55">(<argument pos:start="513:26" pos:end="513:33"><expr pos:start="513:26" pos:end="513:33"><name pos:start="513:26" pos:end="513:33"><name pos:start="513:26" pos:end="513:27">bs</name><operator pos:start="513:28" pos:end="513:29">-&gt;</operator><name pos:start="513:30" pos:end="513:33">file</name></name></expr></argument>, <argument pos:start="513:36" pos:end="513:53"><expr pos:start="513:36" pos:end="513:53"><name pos:start="513:36" pos:end="513:53"><name pos:start="513:36" pos:end="513:36">s</name><operator pos:start="513:37" pos:end="513:38">-&gt;</operator><name pos:start="513:39" pos:end="513:53">l1_table_offset</name></name></expr></argument>, <argument pos:start="513:56" pos:end="513:66"><expr pos:start="513:56" pos:end="513:66"><name pos:start="513:56" pos:end="513:66"><name pos:start="513:56" pos:end="513:56">s</name><operator pos:start="513:57" pos:end="513:58">-&gt;</operator><name pos:start="513:59" pos:end="513:66">l1_table</name></name></expr></argument>,

                         <argument pos:start="515:26" pos:end="515:54"><expr pos:start="515:26" pos:end="515:54"><name pos:start="515:26" pos:end="515:35"><name pos:start="515:26" pos:end="515:26">s</name><operator pos:start="515:27" pos:end="515:28">-&gt;</operator><name pos:start="515:29" pos:end="515:35">l1_size</name></name> <operator pos:start="515:37" pos:end="515:37">*</operator> <sizeof pos:start="515:39" pos:end="515:54">sizeof<argument_list pos:start="515:45" pos:end="515:54">(<argument pos:start="515:46" pos:end="515:53"><expr pos:start="515:46" pos:end="515:53"><name pos:start="515:46" pos:end="515:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="517:9" pos:end="523:9"><if pos:start="517:9" pos:end="523:9">if <condition pos:start="517:12" pos:end="517:20">(<expr pos:start="517:13" pos:end="517:19"><name pos:start="517:13" pos:end="517:15">ret</name> <operator pos:start="517:17" pos:end="517:17">&lt;</operator> <literal type="number" pos:start="517:19" pos:end="517:19">0</literal></expr>)</condition> <block pos:start="517:22" pos:end="523:9">{<block_content pos:start="519:13" pos:end="521:22">

            <expr_stmt pos:start="519:13" pos:end="519:68"><expr pos:start="519:13" pos:end="519:67"><call pos:start="519:13" pos:end="519:67"><name pos:start="519:13" pos:end="519:28">error_setg_errno</name><argument_list pos:start="519:29" pos:end="519:67">(<argument pos:start="519:30" pos:end="519:33"><expr pos:start="519:30" pos:end="519:33"><name pos:start="519:30" pos:end="519:33">errp</name></expr></argument>, <argument pos:start="519:36" pos:end="519:39"><expr pos:start="519:36" pos:end="519:39"><operator pos:start="519:36" pos:end="519:36">-</operator><name pos:start="519:37" pos:end="519:39">ret</name></expr></argument>, <argument pos:start="519:42" pos:end="519:66"><expr pos:start="519:42" pos:end="519:66"><literal type="string" pos:start="519:42" pos:end="519:66">"Could not read L1 table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="521:13" pos:end="521:22">goto <name pos:start="521:18" pos:end="521:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <for pos:start="525:9" pos:end="529:9">for<control pos:start="525:12" pos:end="525:38">(<init pos:start="525:13" pos:end="525:18"><expr pos:start="525:13" pos:end="525:17"><name pos:start="525:13" pos:end="525:13">i</name> <operator pos:start="525:15" pos:end="525:15">=</operator> <literal type="number" pos:start="525:17" pos:end="525:17">0</literal></expr>;</init><condition pos:start="525:19" pos:end="525:33"><expr pos:start="525:19" pos:end="525:32"><name pos:start="525:19" pos:end="525:19">i</name> <operator pos:start="525:21" pos:end="525:21">&lt;</operator> <name pos:start="525:23" pos:end="525:32"><name pos:start="525:23" pos:end="525:23">s</name><operator pos:start="525:24" pos:end="525:25">-&gt;</operator><name pos:start="525:26" pos:end="525:32">l1_size</name></name></expr>;</condition> <incr pos:start="525:35" pos:end="525:37"><expr pos:start="525:35" pos:end="525:37"><name pos:start="525:35" pos:end="525:35">i</name><operator pos:start="525:36" pos:end="525:37">++</operator></expr></incr>)</control> <block pos:start="525:40" pos:end="529:9">{<block_content pos:start="527:13" pos:end="527:42">

            <expr_stmt pos:start="527:13" pos:end="527:42"><expr pos:start="527:13" pos:end="527:41"><call pos:start="527:13" pos:end="527:41"><name pos:start="527:13" pos:end="527:24">be64_to_cpus</name><argument_list pos:start="527:25" pos:end="527:41">(<argument pos:start="527:26" pos:end="527:40"><expr pos:start="527:26" pos:end="527:40"><operator pos:start="527:26" pos:end="527:26">&amp;</operator><name pos:start="527:27" pos:end="527:40"><name pos:start="527:27" pos:end="527:27">s</name><operator pos:start="527:28" pos:end="527:29">-&gt;</operator><name pos:start="527:30" pos:end="527:37">l1_table</name><index pos:start="527:38" pos:end="527:40">[<expr pos:start="527:39" pos:end="527:39"><name pos:start="527:39" pos:end="527:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="535:5" pos:end="535:39">/* Parse driver-specific options */</comment>

    <expr_stmt pos:start="537:5" pos:end="537:57"><expr pos:start="537:5" pos:end="537:56"><name pos:start="537:5" pos:end="537:7">ret</name> <operator pos:start="537:9" pos:end="537:9">=</operator> <call pos:start="537:11" pos:end="537:56"><name pos:start="537:11" pos:end="537:30">qcow2_update_options</name><argument_list pos:start="537:31" pos:end="537:56">(<argument pos:start="537:32" pos:end="537:33"><expr pos:start="537:32" pos:end="537:33"><name pos:start="537:32" pos:end="537:33">bs</name></expr></argument>, <argument pos:start="537:36" pos:end="537:42"><expr pos:start="537:36" pos:end="537:42"><name pos:start="537:36" pos:end="537:42">options</name></expr></argument>, <argument pos:start="537:45" pos:end="537:49"><expr pos:start="537:45" pos:end="537:49"><name pos:start="537:45" pos:end="537:49">flags</name></expr></argument>, <argument pos:start="537:52" pos:end="537:55"><expr pos:start="537:52" pos:end="537:55"><name pos:start="537:52" pos:end="537:55">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="539:5" pos:end="543:5"><if pos:start="539:5" pos:end="543:5">if <condition pos:start="539:8" pos:end="539:16">(<expr pos:start="539:9" pos:end="539:15"><name pos:start="539:9" pos:end="539:11">ret</name> <operator pos:start="539:13" pos:end="539:13">&lt;</operator> <literal type="number" pos:start="539:15" pos:end="539:15">0</literal></expr>)</condition> <block pos:start="539:18" pos:end="543:5">{<block_content pos:start="541:9" pos:end="541:18">

        <goto pos:start="541:9" pos:end="541:18">goto <name pos:start="541:14" pos:end="541:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="547:5" pos:end="547:49"><expr pos:start="547:5" pos:end="547:48"><name pos:start="547:5" pos:end="547:20"><name pos:start="547:5" pos:end="547:5">s</name><operator pos:start="547:6" pos:end="547:7">-&gt;</operator><name pos:start="547:8" pos:end="547:20">cluster_cache</name></name> <operator pos:start="547:22" pos:end="547:22">=</operator> <call pos:start="547:24" pos:end="547:48"><name pos:start="547:24" pos:end="547:31">g_malloc</name><argument_list pos:start="547:32" pos:end="547:48">(<argument pos:start="547:33" pos:end="547:47"><expr pos:start="547:33" pos:end="547:47"><name pos:start="547:33" pos:end="547:47"><name pos:start="547:33" pos:end="547:33">s</name><operator pos:start="547:34" pos:end="547:35">-&gt;</operator><name pos:start="547:36" pos:end="547:47">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="549:5" pos:end="549:57">/* one more sector for decompressed data alignment */</comment>

    <expr_stmt pos:start="551:5" pos:end="553:77"><expr pos:start="551:5" pos:end="553:76"><name pos:start="551:5" pos:end="551:19"><name pos:start="551:5" pos:end="551:5">s</name><operator pos:start="551:6" pos:end="551:7">-&gt;</operator><name pos:start="551:8" pos:end="551:19">cluster_data</name></name> <operator pos:start="551:21" pos:end="551:21">=</operator> <call pos:start="551:23" pos:end="553:76"><name pos:start="551:23" pos:end="551:41">qemu_try_blockalign</name><argument_list pos:start="551:42" pos:end="553:76">(<argument pos:start="551:43" pos:end="551:54"><expr pos:start="551:43" pos:end="551:54"><name pos:start="551:43" pos:end="551:54"><name pos:start="551:43" pos:end="551:44">bs</name><operator pos:start="551:45" pos:end="551:46">-&gt;</operator><name pos:start="551:47" pos:end="551:50">file</name><operator pos:start="551:51" pos:end="551:52">-&gt;</operator><name pos:start="551:53" pos:end="551:54">bs</name></name></expr></argument>, <argument pos:start="551:57" pos:end="553:75"><expr pos:start="551:57" pos:end="553:75"><name pos:start="551:57" pos:end="551:79">QCOW_MAX_CRYPT_CLUSTERS</name>

                                                    <operator pos:start="553:53" pos:end="553:53">*</operator> <name pos:start="553:55" pos:end="553:69"><name pos:start="553:55" pos:end="553:55">s</name><operator pos:start="553:56" pos:end="553:57">-&gt;</operator><name pos:start="553:58" pos:end="553:69">cluster_size</name></name> <operator pos:start="553:71" pos:end="553:71">+</operator> <literal type="number" pos:start="553:73" pos:end="553:75">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="555:5" pos:end="563:5"><if pos:start="555:5" pos:end="563:5">if <condition pos:start="555:8" pos:end="555:32">(<expr pos:start="555:9" pos:end="555:31"><name pos:start="555:9" pos:end="555:23"><name pos:start="555:9" pos:end="555:9">s</name><operator pos:start="555:10" pos:end="555:11">-&gt;</operator><name pos:start="555:12" pos:end="555:23">cluster_data</name></name> <operator pos:start="555:25" pos:end="555:26">==</operator> <name pos:start="555:28" pos:end="555:31">NULL</name></expr>)</condition> <block pos:start="555:34" pos:end="563:5">{<block_content pos:start="557:9" pos:end="561:18">

        <expr_stmt pos:start="557:9" pos:end="557:72"><expr pos:start="557:9" pos:end="557:71"><call pos:start="557:9" pos:end="557:71"><name pos:start="557:9" pos:end="557:18">error_setg</name><argument_list pos:start="557:19" pos:end="557:71">(<argument pos:start="557:20" pos:end="557:23"><expr pos:start="557:20" pos:end="557:23"><name pos:start="557:20" pos:end="557:23">errp</name></expr></argument>, <argument pos:start="557:26" pos:end="557:70"><expr pos:start="557:26" pos:end="557:70"><literal type="string" pos:start="557:26" pos:end="557:70">"Could not allocate temporary cluster buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="559:9" pos:end="559:22"><expr pos:start="559:9" pos:end="559:21"><name pos:start="559:9" pos:end="559:11">ret</name> <operator pos:start="559:13" pos:end="559:13">=</operator> <operator pos:start="559:15" pos:end="559:15">-</operator><name pos:start="559:16" pos:end="559:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="561:9" pos:end="561:18">goto <name pos:start="561:14" pos:end="561:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="567:5" pos:end="567:33"><expr pos:start="567:5" pos:end="567:32"><name pos:start="567:5" pos:end="567:27"><name pos:start="567:5" pos:end="567:5">s</name><operator pos:start="567:6" pos:end="567:7">-&gt;</operator><name pos:start="567:8" pos:end="567:27">cluster_cache_offset</name></name> <operator pos:start="567:29" pos:end="567:29">=</operator> <operator pos:start="567:31" pos:end="567:31">-</operator><literal type="number" pos:start="567:32" pos:end="567:32">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="569:5" pos:end="569:21"><expr pos:start="569:5" pos:end="569:20"><name pos:start="569:5" pos:end="569:12"><name pos:start="569:5" pos:end="569:5">s</name><operator pos:start="569:6" pos:end="569:7">-&gt;</operator><name pos:start="569:8" pos:end="569:12">flags</name></name> <operator pos:start="569:14" pos:end="569:14">=</operator> <name pos:start="569:16" pos:end="569:20">flags</name></expr>;</expr_stmt>



    <expr_stmt pos:start="573:5" pos:end="573:34"><expr pos:start="573:5" pos:end="573:33"><name pos:start="573:5" pos:end="573:7">ret</name> <operator pos:start="573:9" pos:end="573:9">=</operator> <call pos:start="573:11" pos:end="573:33"><name pos:start="573:11" pos:end="573:29">qcow2_refcount_init</name><argument_list pos:start="573:30" pos:end="573:33">(<argument pos:start="573:31" pos:end="573:32"><expr pos:start="573:31" pos:end="573:32"><name pos:start="573:31" pos:end="573:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="575:5" pos:end="581:5"><if pos:start="575:5" pos:end="581:5">if <condition pos:start="575:8" pos:end="575:17">(<expr pos:start="575:9" pos:end="575:16"><name pos:start="575:9" pos:end="575:11">ret</name> <operator pos:start="575:13" pos:end="575:14">!=</operator> <literal type="number" pos:start="575:16" pos:end="575:16">0</literal></expr>)</condition> <block pos:start="575:19" pos:end="581:5">{<block_content pos:start="577:9" pos:end="579:18">

        <expr_stmt pos:start="577:9" pos:end="577:79"><expr pos:start="577:9" pos:end="577:78"><call pos:start="577:9" pos:end="577:78"><name pos:start="577:9" pos:end="577:24">error_setg_errno</name><argument_list pos:start="577:25" pos:end="577:78">(<argument pos:start="577:26" pos:end="577:29"><expr pos:start="577:26" pos:end="577:29"><name pos:start="577:26" pos:end="577:29">errp</name></expr></argument>, <argument pos:start="577:32" pos:end="577:35"><expr pos:start="577:32" pos:end="577:35"><operator pos:start="577:32" pos:end="577:32">-</operator><name pos:start="577:33" pos:end="577:35">ret</name></expr></argument>, <argument pos:start="577:38" pos:end="577:77"><expr pos:start="577:38" pos:end="577:77"><literal type="string" pos:start="577:38" pos:end="577:77">"Could not initialize refcount handling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="579:9" pos:end="579:18">goto <name pos:start="579:14" pos:end="579:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="585:5" pos:end="585:35"><expr pos:start="585:5" pos:end="585:34"><call pos:start="585:5" pos:end="585:34"><name pos:start="585:5" pos:end="585:14">QLIST_INIT</name><argument_list pos:start="585:15" pos:end="585:34">(<argument pos:start="585:16" pos:end="585:33"><expr pos:start="585:16" pos:end="585:33"><operator pos:start="585:16" pos:end="585:16">&amp;</operator><name pos:start="585:17" pos:end="585:33"><name pos:start="585:17" pos:end="585:17">s</name><operator pos:start="585:18" pos:end="585:19">-&gt;</operator><name pos:start="585:20" pos:end="585:33">cluster_allocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="587:5" pos:end="587:30"><expr pos:start="587:5" pos:end="587:29"><call pos:start="587:5" pos:end="587:29"><name pos:start="587:5" pos:end="587:15">QTAILQ_INIT</name><argument_list pos:start="587:16" pos:end="587:29">(<argument pos:start="587:17" pos:end="587:28"><expr pos:start="587:17" pos:end="587:28"><operator pos:start="587:17" pos:end="587:17">&amp;</operator><name pos:start="587:18" pos:end="587:28"><name pos:start="587:18" pos:end="587:18">s</name><operator pos:start="587:19" pos:end="587:20">-&gt;</operator><name pos:start="587:21" pos:end="587:28">discards</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="591:5" pos:end="591:31">/* read qcow2 extensions */</comment>

    <if_stmt pos:start="593:5" pos:end="603:5"><if pos:start="593:5" pos:end="603:5">if <condition pos:start="593:8" pos:end="595:20">(<expr pos:start="593:9" pos:end="595:19"><call pos:start="593:9" pos:end="595:19"><name pos:start="593:9" pos:end="593:29">qcow2_read_extensions</name><argument_list pos:start="593:30" pos:end="595:19">(<argument pos:start="593:31" pos:end="593:32"><expr pos:start="593:31" pos:end="593:32"><name pos:start="593:31" pos:end="593:32">bs</name></expr></argument>, <argument pos:start="593:35" pos:end="593:54"><expr pos:start="593:35" pos:end="593:54"><name pos:start="593:35" pos:end="593:54"><name pos:start="593:35" pos:end="593:40">header</name><operator pos:start="593:41" pos:end="593:41">.</operator><name pos:start="593:42" pos:end="593:54">header_length</name></name></expr></argument>, <argument pos:start="593:57" pos:end="593:63"><expr pos:start="593:57" pos:end="593:63"><name pos:start="593:57" pos:end="593:63">ext_end</name></expr></argument>, <argument pos:start="593:66" pos:end="593:69"><expr pos:start="593:66" pos:end="593:69"><name pos:start="593:66" pos:end="593:69">NULL</name></expr></argument>,

        <argument pos:start="595:9" pos:end="595:18"><expr pos:start="595:9" pos:end="595:18"><operator pos:start="595:9" pos:end="595:9">&amp;</operator><name pos:start="595:10" pos:end="595:18">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="595:22" pos:end="603:5">{<block_content pos:start="597:9" pos:end="601:18">

        <expr_stmt pos:start="597:9" pos:end="597:41"><expr pos:start="597:9" pos:end="597:40"><call pos:start="597:9" pos:end="597:40"><name pos:start="597:9" pos:end="597:23">error_propagate</name><argument_list pos:start="597:24" pos:end="597:40">(<argument pos:start="597:25" pos:end="597:28"><expr pos:start="597:25" pos:end="597:28"><name pos:start="597:25" pos:end="597:28">errp</name></expr></argument>, <argument pos:start="597:31" pos:end="597:39"><expr pos:start="597:31" pos:end="597:39"><name pos:start="597:31" pos:end="597:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:22"><expr pos:start="599:9" pos:end="599:21"><name pos:start="599:9" pos:end="599:11">ret</name> <operator pos:start="599:13" pos:end="599:13">=</operator> <operator pos:start="599:15" pos:end="599:15">-</operator><name pos:start="599:16" pos:end="599:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="601:9" pos:end="601:18">goto <name pos:start="601:14" pos:end="601:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="607:5" pos:end="629:5"><if pos:start="607:5" pos:end="629:5">if <condition pos:start="607:8" pos:end="607:49">(<expr pos:start="607:9" pos:end="607:48"><name pos:start="607:9" pos:end="607:30"><name pos:start="607:9" pos:end="607:9">s</name><operator pos:start="607:10" pos:end="607:11">-&gt;</operator><name pos:start="607:12" pos:end="607:30">crypt_method_header</name></name> <operator pos:start="607:32" pos:end="607:33">==</operator> <name pos:start="607:35" pos:end="607:48">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="607:51" pos:end="629:5">{<block_content pos:start="609:9" pos:end="627:9">

        <decl_stmt pos:start="609:9" pos:end="609:32"><decl pos:start="609:9" pos:end="609:31"><type pos:start="609:9" pos:end="609:20"><name pos:start="609:9" pos:end="609:16">unsigned</name> <name pos:start="609:18" pos:end="609:20">int</name></type> <name pos:start="609:22" pos:end="609:27">cflags</name> <init pos:start="609:29" pos:end="609:31">= <expr pos:start="609:31" pos:end="609:31"><literal type="number" pos:start="609:31" pos:end="609:31">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="611:9" pos:end="615:9"><if pos:start="611:9" pos:end="615:9">if <condition pos:start="611:12" pos:end="611:33">(<expr pos:start="611:13" pos:end="611:32"><name pos:start="611:13" pos:end="611:17">flags</name> <operator pos:start="611:19" pos:end="611:19">&amp;</operator> <name pos:start="611:21" pos:end="611:32">BDRV_O_NO_IO</name></expr>)</condition> <block pos:start="611:35" pos:end="615:9">{<block_content pos:start="613:13" pos:end="613:47">

            <expr_stmt pos:start="613:13" pos:end="613:47"><expr pos:start="613:13" pos:end="613:46"><name pos:start="613:13" pos:end="613:18">cflags</name> <operator pos:start="613:20" pos:end="613:21">|=</operator> <name pos:start="613:23" pos:end="613:46">QCRYPTO_BLOCK_OPEN_NO_IO</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="617:9" pos:end="619:53"><expr pos:start="617:9" pos:end="619:52"><name pos:start="617:9" pos:end="617:17"><name pos:start="617:9" pos:end="617:9">s</name><operator pos:start="617:10" pos:end="617:11">-&gt;</operator><name pos:start="617:12" pos:end="617:17">crypto</name></name> <operator pos:start="617:19" pos:end="617:19">=</operator> <call pos:start="617:21" pos:end="619:52"><name pos:start="617:21" pos:end="617:38">qcrypto_block_open</name><argument_list pos:start="617:39" pos:end="619:52">(<argument pos:start="617:40" pos:end="617:53"><expr pos:start="617:40" pos:end="617:53"><name pos:start="617:40" pos:end="617:53"><name pos:start="617:40" pos:end="617:40">s</name><operator pos:start="617:41" pos:end="617:42">-&gt;</operator><name pos:start="617:43" pos:end="617:53">crypto_opts</name></name></expr></argument>, <argument pos:start="617:56" pos:end="617:59"><expr pos:start="617:56" pos:end="617:59"><name pos:start="617:56" pos:end="617:59">NULL</name></expr></argument>, <argument pos:start="617:62" pos:end="617:65"><expr pos:start="617:62" pos:end="617:65"><name pos:start="617:62" pos:end="617:65">NULL</name></expr></argument>,

                                       <argument pos:start="619:40" pos:end="619:45"><expr pos:start="619:40" pos:end="619:45"><name pos:start="619:40" pos:end="619:45">cflags</name></expr></argument>, <argument pos:start="619:48" pos:end="619:51"><expr pos:start="619:48" pos:end="619:51"><name pos:start="619:48" pos:end="619:51">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="621:9" pos:end="627:9"><if pos:start="621:9" pos:end="627:9">if <condition pos:start="621:12" pos:end="621:23">(<expr pos:start="621:13" pos:end="621:22"><operator pos:start="621:13" pos:end="621:13">!</operator><name pos:start="621:14" pos:end="621:22"><name pos:start="621:14" pos:end="621:14">s</name><operator pos:start="621:15" pos:end="621:16">-&gt;</operator><name pos:start="621:17" pos:end="621:22">crypto</name></name></expr>)</condition> <block pos:start="621:25" pos:end="627:9">{<block_content pos:start="623:13" pos:end="625:22">

            <expr_stmt pos:start="623:13" pos:end="623:26"><expr pos:start="623:13" pos:end="623:25"><name pos:start="623:13" pos:end="623:15">ret</name> <operator pos:start="623:17" pos:end="623:17">=</operator> <operator pos:start="623:19" pos:end="623:19">-</operator><name pos:start="623:20" pos:end="623:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="625:13" pos:end="625:22">goto <name pos:start="625:18" pos:end="625:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="633:5" pos:end="633:36">/* read the backing file name */</comment>

    <if_stmt pos:start="635:5" pos:end="667:5"><if pos:start="635:5" pos:end="667:5">if <condition pos:start="635:8" pos:end="635:40">(<expr pos:start="635:9" pos:end="635:39"><name pos:start="635:9" pos:end="635:34"><name pos:start="635:9" pos:end="635:14">header</name><operator pos:start="635:15" pos:end="635:15">.</operator><name pos:start="635:16" pos:end="635:34">backing_file_offset</name></name> <operator pos:start="635:36" pos:end="635:37">!=</operator> <literal type="number" pos:start="635:39" pos:end="635:39">0</literal></expr>)</condition> <block pos:start="635:42" pos:end="667:5">{<block_content pos:start="637:9" pos:end="665:59">

        <expr_stmt pos:start="637:9" pos:end="637:39"><expr pos:start="637:9" pos:end="637:38"><name pos:start="637:9" pos:end="637:11">len</name> <operator pos:start="637:13" pos:end="637:13">=</operator> <name pos:start="637:15" pos:end="637:38"><name pos:start="637:15" pos:end="637:20">header</name><operator pos:start="637:21" pos:end="637:21">.</operator><name pos:start="637:22" pos:end="637:38">backing_file_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="639:9" pos:end="649:9"><if pos:start="639:9" pos:end="649:9">if <condition pos:start="639:12" pos:end="641:44">(<expr pos:start="639:13" pos:end="641:43"><name pos:start="639:13" pos:end="639:15">len</name> <operator pos:start="639:17" pos:end="639:17">&gt;</operator> <call pos:start="639:19" pos:end="639:73"><name pos:start="639:19" pos:end="639:21">MIN</name><argument_list pos:start="639:22" pos:end="639:73">(<argument pos:start="639:23" pos:end="639:26"><expr pos:start="639:23" pos:end="639:26"><literal type="number" pos:start="639:23" pos:end="639:26">1023</literal></expr></argument>, <argument pos:start="639:29" pos:end="639:72"><expr pos:start="639:29" pos:end="639:72"><name pos:start="639:29" pos:end="639:43"><name pos:start="639:29" pos:end="639:29">s</name><operator pos:start="639:30" pos:end="639:31">-&gt;</operator><name pos:start="639:32" pos:end="639:43">cluster_size</name></name> <operator pos:start="639:45" pos:end="639:45">-</operator> <name pos:start="639:47" pos:end="639:72"><name pos:start="639:47" pos:end="639:52">header</name><operator pos:start="639:53" pos:end="639:53">.</operator><name pos:start="639:54" pos:end="639:72">backing_file_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="639:75" pos:end="639:76">||</operator>

            <name pos:start="641:13" pos:end="641:15">len</name> <operator pos:start="641:17" pos:end="641:18">&gt;=</operator> <sizeof pos:start="641:20" pos:end="641:43">sizeof<argument_list pos:start="641:26" pos:end="641:43">(<argument pos:start="641:27" pos:end="641:42"><expr pos:start="641:27" pos:end="641:42"><name pos:start="641:27" pos:end="641:42"><name pos:start="641:27" pos:end="641:28">bs</name><operator pos:start="641:29" pos:end="641:30">-&gt;</operator><name pos:start="641:31" pos:end="641:42">backing_file</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="641:46" pos:end="649:9">{<block_content pos:start="643:13" pos:end="647:22">

            <expr_stmt pos:start="643:13" pos:end="643:59"><expr pos:start="643:13" pos:end="643:58"><call pos:start="643:13" pos:end="643:58"><name pos:start="643:13" pos:end="643:22">error_setg</name><argument_list pos:start="643:23" pos:end="643:58">(<argument pos:start="643:24" pos:end="643:27"><expr pos:start="643:24" pos:end="643:27"><name pos:start="643:24" pos:end="643:27">errp</name></expr></argument>, <argument pos:start="643:30" pos:end="643:57"><expr pos:start="643:30" pos:end="643:57"><literal type="string" pos:start="643:30" pos:end="643:57">"Backing file name too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="645:13" pos:end="645:26"><expr pos:start="645:13" pos:end="645:25"><name pos:start="645:13" pos:end="645:15">ret</name> <operator pos:start="645:17" pos:end="645:17">=</operator> <operator pos:start="645:19" pos:end="645:19">-</operator><name pos:start="645:20" pos:end="645:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="647:13" pos:end="647:22">goto <name pos:start="647:18" pos:end="647:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="651:9" pos:end="653:48"><expr pos:start="651:9" pos:end="653:47"><name pos:start="651:9" pos:end="651:11">ret</name> <operator pos:start="651:13" pos:end="651:13">=</operator> <call pos:start="651:15" pos:end="653:47"><name pos:start="651:15" pos:end="651:24">bdrv_pread</name><argument_list pos:start="651:25" pos:end="653:47">(<argument pos:start="651:26" pos:end="651:33"><expr pos:start="651:26" pos:end="651:33"><name pos:start="651:26" pos:end="651:33"><name pos:start="651:26" pos:end="651:27">bs</name><operator pos:start="651:28" pos:end="651:29">-&gt;</operator><name pos:start="651:30" pos:end="651:33">file</name></name></expr></argument>, <argument pos:start="651:36" pos:end="651:61"><expr pos:start="651:36" pos:end="651:61"><name pos:start="651:36" pos:end="651:61"><name pos:start="651:36" pos:end="651:41">header</name><operator pos:start="651:42" pos:end="651:42">.</operator><name pos:start="651:43" pos:end="651:61">backing_file_offset</name></name></expr></argument>,

                         <argument pos:start="653:26" pos:end="653:41"><expr pos:start="653:26" pos:end="653:41"><name pos:start="653:26" pos:end="653:41"><name pos:start="653:26" pos:end="653:27">bs</name><operator pos:start="653:28" pos:end="653:29">-&gt;</operator><name pos:start="653:30" pos:end="653:41">backing_file</name></name></expr></argument>, <argument pos:start="653:44" pos:end="653:46"><expr pos:start="653:44" pos:end="653:46"><name pos:start="653:44" pos:end="653:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="655:9" pos:end="661:9"><if pos:start="655:9" pos:end="661:9">if <condition pos:start="655:12" pos:end="655:20">(<expr pos:start="655:13" pos:end="655:19"><name pos:start="655:13" pos:end="655:15">ret</name> <operator pos:start="655:17" pos:end="655:17">&lt;</operator> <literal type="number" pos:start="655:19" pos:end="655:19">0</literal></expr>)</condition> <block pos:start="655:22" pos:end="661:9">{<block_content pos:start="657:13" pos:end="659:22">

            <expr_stmt pos:start="657:13" pos:end="657:77"><expr pos:start="657:13" pos:end="657:76"><call pos:start="657:13" pos:end="657:76"><name pos:start="657:13" pos:end="657:28">error_setg_errno</name><argument_list pos:start="657:29" pos:end="657:76">(<argument pos:start="657:30" pos:end="657:33"><expr pos:start="657:30" pos:end="657:33"><name pos:start="657:30" pos:end="657:33">errp</name></expr></argument>, <argument pos:start="657:36" pos:end="657:39"><expr pos:start="657:36" pos:end="657:39"><operator pos:start="657:36" pos:end="657:36">-</operator><name pos:start="657:37" pos:end="657:39">ret</name></expr></argument>, <argument pos:start="657:42" pos:end="657:75"><expr pos:start="657:42" pos:end="657:75"><literal type="string" pos:start="657:42" pos:end="657:75">"Could not read backing file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="659:13" pos:end="659:22">goto <name pos:start="659:18" pos:end="659:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="663:9" pos:end="663:37"><expr pos:start="663:9" pos:end="663:36"><name pos:start="663:9" pos:end="663:29"><name pos:start="663:9" pos:end="663:10">bs</name><operator pos:start="663:11" pos:end="663:12">-&gt;</operator><name pos:start="663:13" pos:end="663:24">backing_file</name><index pos:start="663:25" pos:end="663:29">[<expr pos:start="663:26" pos:end="663:28"><name pos:start="663:26" pos:end="663:28">len</name></expr>]</index></name> <operator pos:start="663:31" pos:end="663:31">=</operator> <literal type="char" pos:start="663:33" pos:end="663:36">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="665:9" pos:end="665:59"><expr pos:start="665:9" pos:end="665:58"><name pos:start="665:9" pos:end="665:29"><name pos:start="665:9" pos:end="665:9">s</name><operator pos:start="665:10" pos:end="665:11">-&gt;</operator><name pos:start="665:12" pos:end="665:29">image_backing_file</name></name> <operator pos:start="665:31" pos:end="665:31">=</operator> <call pos:start="665:33" pos:end="665:58"><name pos:start="665:33" pos:end="665:40">g_strdup</name><argument_list pos:start="665:41" pos:end="665:58">(<argument pos:start="665:42" pos:end="665:57"><expr pos:start="665:42" pos:end="665:57"><name pos:start="665:42" pos:end="665:57"><name pos:start="665:42" pos:end="665:43">bs</name><operator pos:start="665:44" pos:end="665:45">-&gt;</operator><name pos:start="665:46" pos:end="665:57">backing_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="671:5" pos:end="671:28">/* Internal snapshots */</comment>

    <expr_stmt pos:start="673:5" pos:end="673:50"><expr pos:start="673:5" pos:end="673:49"><name pos:start="673:5" pos:end="673:23"><name pos:start="673:5" pos:end="673:5">s</name><operator pos:start="673:6" pos:end="673:7">-&gt;</operator><name pos:start="673:8" pos:end="673:23">snapshots_offset</name></name> <operator pos:start="673:25" pos:end="673:25">=</operator> <name pos:start="673:27" pos:end="673:49"><name pos:start="673:27" pos:end="673:32">header</name><operator pos:start="673:33" pos:end="673:33">.</operator><name pos:start="673:34" pos:end="673:49">snapshots_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="675:5" pos:end="675:42"><expr pos:start="675:5" pos:end="675:41"><name pos:start="675:5" pos:end="675:19"><name pos:start="675:5" pos:end="675:5">s</name><operator pos:start="675:6" pos:end="675:7">-&gt;</operator><name pos:start="675:8" pos:end="675:19">nb_snapshots</name></name> <operator pos:start="675:21" pos:end="675:21">=</operator> <name pos:start="675:23" pos:end="675:41"><name pos:start="675:23" pos:end="675:28">header</name><operator pos:start="675:29" pos:end="675:29">.</operator><name pos:start="675:30" pos:end="675:41">nb_snapshots</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="679:5" pos:end="679:35"><expr pos:start="679:5" pos:end="679:34"><name pos:start="679:5" pos:end="679:7">ret</name> <operator pos:start="679:9" pos:end="679:9">=</operator> <call pos:start="679:11" pos:end="679:34"><name pos:start="679:11" pos:end="679:30">qcow2_read_snapshots</name><argument_list pos:start="679:31" pos:end="679:34">(<argument pos:start="679:32" pos:end="679:33"><expr pos:start="679:32" pos:end="679:33"><name pos:start="679:32" pos:end="679:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="681:5" pos:end="687:5"><if pos:start="681:5" pos:end="687:5">if <condition pos:start="681:8" pos:end="681:16">(<expr pos:start="681:9" pos:end="681:15"><name pos:start="681:9" pos:end="681:11">ret</name> <operator pos:start="681:13" pos:end="681:13">&lt;</operator> <literal type="number" pos:start="681:15" pos:end="681:15">0</literal></expr>)</condition> <block pos:start="681:18" pos:end="687:5">{<block_content pos:start="683:9" pos:end="685:18">

        <expr_stmt pos:start="683:9" pos:end="683:65"><expr pos:start="683:9" pos:end="683:64"><call pos:start="683:9" pos:end="683:64"><name pos:start="683:9" pos:end="683:24">error_setg_errno</name><argument_list pos:start="683:25" pos:end="683:64">(<argument pos:start="683:26" pos:end="683:29"><expr pos:start="683:26" pos:end="683:29"><name pos:start="683:26" pos:end="683:29">errp</name></expr></argument>, <argument pos:start="683:32" pos:end="683:35"><expr pos:start="683:32" pos:end="683:35"><operator pos:start="683:32" pos:end="683:32">-</operator><name pos:start="683:33" pos:end="683:35">ret</name></expr></argument>, <argument pos:start="683:38" pos:end="683:63"><expr pos:start="683:38" pos:end="683:63"><literal type="string" pos:start="683:38" pos:end="683:63">"Could not read snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="685:9" pos:end="685:18">goto <name pos:start="685:14" pos:end="685:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="691:5" pos:end="691:46">/* Clear unknown autoclear feature bits */</comment>

    <if_stmt pos:start="693:5" pos:end="707:5"><if pos:start="693:5" pos:end="707:5">if <condition pos:start="693:8" pos:end="693:78">(<expr pos:start="693:9" pos:end="693:77"><operator pos:start="693:9" pos:end="693:9">!</operator><name pos:start="693:10" pos:end="693:22"><name pos:start="693:10" pos:end="693:11">bs</name><operator pos:start="693:12" pos:end="693:13">-&gt;</operator><name pos:start="693:14" pos:end="693:22">read_only</name></name> <operator pos:start="693:24" pos:end="693:25">&amp;&amp;</operator> <operator pos:start="693:27" pos:end="693:27">!</operator><operator pos:start="693:28" pos:end="693:28">(</operator><name pos:start="693:29" pos:end="693:33">flags</name> <operator pos:start="693:35" pos:end="693:35">&amp;</operator> <name pos:start="693:37" pos:end="693:51">BDRV_O_INACTIVE</name><operator pos:start="693:52" pos:end="693:52">)</operator> <operator pos:start="693:54" pos:end="693:55">&amp;&amp;</operator> <name pos:start="693:57" pos:end="693:77"><name pos:start="693:57" pos:end="693:57">s</name><operator pos:start="693:58" pos:end="693:59">-&gt;</operator><name pos:start="693:60" pos:end="693:77">autoclear_features</name></name></expr>)</condition> <block pos:start="693:80" pos:end="707:5">{<block_content pos:start="695:9" pos:end="705:9">

        <expr_stmt pos:start="695:9" pos:end="695:34"><expr pos:start="695:9" pos:end="695:33"><name pos:start="695:9" pos:end="695:29"><name pos:start="695:9" pos:end="695:9">s</name><operator pos:start="695:10" pos:end="695:11">-&gt;</operator><name pos:start="695:12" pos:end="695:29">autoclear_features</name></name> <operator pos:start="695:31" pos:end="695:31">=</operator> <literal type="number" pos:start="695:33" pos:end="695:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="697:9" pos:end="697:38"><expr pos:start="697:9" pos:end="697:37"><name pos:start="697:9" pos:end="697:11">ret</name> <operator pos:start="697:13" pos:end="697:13">=</operator> <call pos:start="697:15" pos:end="697:37"><name pos:start="697:15" pos:end="697:33">qcow2_update_header</name><argument_list pos:start="697:34" pos:end="697:37">(<argument pos:start="697:35" pos:end="697:36"><expr pos:start="697:35" pos:end="697:36"><name pos:start="697:35" pos:end="697:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="699:9" pos:end="705:9"><if pos:start="699:9" pos:end="705:9">if <condition pos:start="699:12" pos:end="699:20">(<expr pos:start="699:13" pos:end="699:19"><name pos:start="699:13" pos:end="699:15">ret</name> <operator pos:start="699:17" pos:end="699:17">&lt;</operator> <literal type="number" pos:start="699:19" pos:end="699:19">0</literal></expr>)</condition> <block pos:start="699:22" pos:end="705:9">{<block_content pos:start="701:13" pos:end="703:22">

            <expr_stmt pos:start="701:13" pos:end="701:74"><expr pos:start="701:13" pos:end="701:73"><call pos:start="701:13" pos:end="701:73"><name pos:start="701:13" pos:end="701:28">error_setg_errno</name><argument_list pos:start="701:29" pos:end="701:73">(<argument pos:start="701:30" pos:end="701:33"><expr pos:start="701:30" pos:end="701:33"><name pos:start="701:30" pos:end="701:33">errp</name></expr></argument>, <argument pos:start="701:36" pos:end="701:39"><expr pos:start="701:36" pos:end="701:39"><operator pos:start="701:36" pos:end="701:36">-</operator><name pos:start="701:37" pos:end="701:39">ret</name></expr></argument>, <argument pos:start="701:42" pos:end="701:72"><expr pos:start="701:42" pos:end="701:72"><literal type="string" pos:start="701:42" pos:end="701:72">"Could not update qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="703:13" pos:end="703:22">goto <name pos:start="703:18" pos:end="703:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="711:5" pos:end="711:26">/* Initialise locks */</comment>

    <expr_stmt pos:start="713:5" pos:end="713:33"><expr pos:start="713:5" pos:end="713:32"><call pos:start="713:5" pos:end="713:32"><name pos:start="713:5" pos:end="713:22">qemu_co_mutex_init</name><argument_list pos:start="713:23" pos:end="713:32">(<argument pos:start="713:24" pos:end="713:31"><expr pos:start="713:24" pos:end="713:31"><operator pos:start="713:24" pos:end="713:24">&amp;</operator><name pos:start="713:25" pos:end="713:31"><name pos:start="713:25" pos:end="713:25">s</name><operator pos:start="713:26" pos:end="713:27">-&gt;</operator><name pos:start="713:28" pos:end="713:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="715:5" pos:end="715:50"><expr pos:start="715:5" pos:end="715:49"><name pos:start="715:5" pos:end="715:28"><name pos:start="715:5" pos:end="715:6">bs</name><operator pos:start="715:7" pos:end="715:8">-&gt;</operator><name pos:start="715:9" pos:end="715:28">supported_zero_flags</name></name> <operator pos:start="715:30" pos:end="715:30">=</operator> <name pos:start="715:32" pos:end="715:49">BDRV_REQ_MAY_UNMAP</name></expr>;</expr_stmt>



    <comment type="block" pos:start="719:5" pos:end="719:31">/* Repair image if dirty */</comment>

    <if_stmt pos:start="721:5" pos:end="744:0"><if pos:start="721:5" pos:end="744:0">if <condition pos:start="721:8" pos:end="723:58">(<expr pos:start="721:9" pos:end="723:57"><operator pos:start="721:9" pos:end="721:9">!</operator><operator pos:start="721:10" pos:end="721:10">(</operator><name pos:start="721:11" pos:end="721:15">flags</name> <operator pos:start="721:17" pos:end="721:17">&amp;</operator> <operator pos:start="721:19" pos:end="721:19">(</operator><name pos:start="721:20" pos:end="721:31">BDRV_O_CHECK</name> <operator pos:start="721:33" pos:end="721:33">|</operator> <name pos:start="721:35" pos:end="721:49">BDRV_O_INACTIVE</name><operator pos:start="721:50" pos:end="721:50">)</operator><operator pos:start="721:51" pos:end="721:51">)</operator> <operator pos:start="721:53" pos:end="721:54">&amp;&amp;</operator> <operator pos:start="721:56" pos:end="721:56">!</operator><name pos:start="721:57" pos:end="721:69"><name pos:start="721:57" pos:end="721:58">bs</name><operator pos:start="721:59" pos:end="721:60">-&gt;</operator><name pos:start="721:61" pos:end="721:69">read_only</name></name> <operator pos:start="721:71" pos:end="721:72">&amp;&amp;</operator>

        <operator pos:start="723:9" pos:end="723:9">(</operator><name pos:start="723:10" pos:end="723:33"><name pos:start="723:10" pos:end="723:10">s</name><operator pos:start="723:11" pos:end="723:12">-&gt;</operator><name pos:start="723:13" pos:end="723:33">incompatible_features</name></name> <operator pos:start="723:35" pos:end="723:35">&amp;</operator> <name pos:start="723:37" pos:end="723:56">QCOW2_INCOMPAT_DIRTY</name><operator pos:start="723:57" pos:end="723:57">)</operator></expr>)</condition> <block pos:start="723:60" pos:end="744:0">{<block_content pos:start="725:9" pos:end="737:9">

        <decl_stmt pos:start="725:9" pos:end="725:37"><decl pos:start="725:9" pos:end="725:36"><type pos:start="725:9" pos:end="725:23"><name pos:start="725:9" pos:end="725:23">BdrvCheckResult</name></type> <name pos:start="725:25" pos:end="725:30">result</name> <init pos:start="725:32" pos:end="725:36">= <expr pos:start="725:34" pos:end="725:36"><block pos:start="725:34" pos:end="725:36">{<expr pos:start="725:35" pos:end="725:35"><literal type="number" pos:start="725:35" pos:end="725:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="729:9" pos:end="729:73"><expr pos:start="729:9" pos:end="729:72"><name pos:start="729:9" pos:end="729:11">ret</name> <operator pos:start="729:13" pos:end="729:13">=</operator> <call pos:start="729:15" pos:end="729:72"><name pos:start="729:15" pos:end="729:25">qcow2_check</name><argument_list pos:start="729:26" pos:end="729:72">(<argument pos:start="729:27" pos:end="729:28"><expr pos:start="729:27" pos:end="729:28"><name pos:start="729:27" pos:end="729:28">bs</name></expr></argument>, <argument pos:start="729:31" pos:end="729:37"><expr pos:start="729:31" pos:end="729:37"><operator pos:start="729:31" pos:end="729:31">&amp;</operator><name pos:start="729:32" pos:end="729:37">result</name></expr></argument>, <argument pos:start="729:40" pos:end="729:71"><expr pos:start="729:40" pos:end="729:71"><name pos:start="729:40" pos:end="729:54">BDRV_FIX_ERRORS</name> <operator pos:start="729:56" pos:end="729:56">|</operator> <name pos:start="729:58" pos:end="729:71">BDRV_FIX_LEAKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="731:9" pos:end="737:9"><if pos:start="731:9" pos:end="737:9">if <condition pos:start="731:12" pos:end="731:20">(<expr pos:start="731:13" pos:end="731:19"><name pos:start="731:13" pos:end="731:15">ret</name> <operator pos:start="731:17" pos:end="731:17">&lt;</operator> <literal type="number" pos:start="731:19" pos:end="731:19">0</literal></expr>)</condition> <block pos:start="731:22" pos:end="737:9">{<block_content pos:start="733:13" pos:end="735:22">

            <expr_stmt pos:start="733:13" pos:end="733:73"><expr pos:start="733:13" pos:end="733:72"><call pos:start="733:13" pos:end="733:72"><name pos:start="733:13" pos:end="733:28">error_setg_errno</name><argument_list pos:start="733:29" pos:end="733:72">(<argument pos:start="733:30" pos:end="733:33"><expr pos:start="733:30" pos:end="733:33"><name pos:start="733:30" pos:end="733:33">errp</name></expr></argument>, <argument pos:start="733:36" pos:end="733:39"><expr pos:start="733:36" pos:end="733:39"><operator pos:start="733:36" pos:end="733:36">-</operator><name pos:start="733:37" pos:end="733:39">ret</name></expr></argument>, <argument pos:start="733:42" pos:end="733:71"><expr pos:start="733:42" pos:end="733:71"><literal type="string" pos:start="733:42" pos:end="733:71">"Could not repair dirty image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="735:13" pos:end="735:22">goto <name pos:start="735:18" pos:end="735:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="743:1" pos:end="743:18">#<cpp:directive pos:start="743:2" pos:end="743:6">ifdef</cpp:directive> <name pos:start="743:8" pos:end="743:18">DEBUG_ALLOC</name></cpp:ifdef>

    <block pos:start="745:5" pos:end="754:0">{<block_content pos:start="747:9" pos:end="749:46">

        <decl_stmt pos:start="747:9" pos:end="747:37"><decl pos:start="747:9" pos:end="747:36"><type pos:start="747:9" pos:end="747:23"><name pos:start="747:9" pos:end="747:23">BdrvCheckResult</name></type> <name pos:start="747:25" pos:end="747:30">result</name> <init pos:start="747:32" pos:end="747:36">= <expr pos:start="747:34" pos:end="747:36"><block pos:start="747:34" pos:end="747:36">{<expr pos:start="747:35" pos:end="747:35"><literal type="number" pos:start="747:35" pos:end="747:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="749:9" pos:end="749:46"><expr pos:start="749:9" pos:end="749:45"><call pos:start="749:9" pos:end="749:45"><name pos:start="749:9" pos:end="749:29">qcow2_check_refcounts</name><argument_list pos:start="749:30" pos:end="749:45">(<argument pos:start="749:31" pos:end="749:32"><expr pos:start="749:31" pos:end="749:32"><name pos:start="749:31" pos:end="749:32">bs</name></expr></argument>, <argument pos:start="749:35" pos:end="749:41"><expr pos:start="749:35" pos:end="749:41"><operator pos:start="749:35" pos:end="749:35">&amp;</operator><name pos:start="749:36" pos:end="749:41">result</name></expr></argument>, <argument pos:start="749:44" pos:end="749:44"><expr pos:start="749:44" pos:end="749:44"><literal type="number" pos:start="749:44" pos:end="749:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="753:1" pos:end="753:6">#<cpp:directive pos:start="753:2" pos:end="753:6">endif</cpp:directive></cpp:endif>

    <return pos:start="755:5" pos:end="755:15">return <expr pos:start="755:12" pos:end="755:14"><name pos:start="755:12" pos:end="755:14">ret</name></expr>;</return>



 <label pos:start="759:2" pos:end="759:6"><name pos:start="759:2" pos:end="759:5">fail</name>:</label>

    <expr_stmt pos:start="761:5" pos:end="761:37"><expr pos:start="761:5" pos:end="761:36"><call pos:start="761:5" pos:end="761:36"><name pos:start="761:5" pos:end="761:10">g_free</name><argument_list pos:start="761:11" pos:end="761:36">(<argument pos:start="761:12" pos:end="761:35"><expr pos:start="761:12" pos:end="761:35"><name pos:start="761:12" pos:end="761:35"><name pos:start="761:12" pos:end="761:12">s</name><operator pos:start="761:13" pos:end="761:14">-&gt;</operator><name pos:start="761:15" pos:end="761:35">unknown_header_fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="763:5" pos:end="763:35"><expr pos:start="763:5" pos:end="763:34"><call pos:start="763:5" pos:end="763:34"><name pos:start="763:5" pos:end="763:30">cleanup_unknown_header_ext</name><argument_list pos:start="763:31" pos:end="763:34">(<argument pos:start="763:32" pos:end="763:33"><expr pos:start="763:32" pos:end="763:33"><name pos:start="763:32" pos:end="763:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="765:5" pos:end="765:29"><expr pos:start="765:5" pos:end="765:28"><call pos:start="765:5" pos:end="765:28"><name pos:start="765:5" pos:end="765:24">qcow2_free_snapshots</name><argument_list pos:start="765:25" pos:end="765:28">(<argument pos:start="765:26" pos:end="765:27"><expr pos:start="765:26" pos:end="765:27"><name pos:start="765:26" pos:end="765:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="767:5" pos:end="767:29"><expr pos:start="767:5" pos:end="767:28"><call pos:start="767:5" pos:end="767:28"><name pos:start="767:5" pos:end="767:24">qcow2_refcount_close</name><argument_list pos:start="767:25" pos:end="767:28">(<argument pos:start="767:26" pos:end="767:27"><expr pos:start="767:26" pos:end="767:27"><name pos:start="767:26" pos:end="767:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="769:5" pos:end="769:28"><expr pos:start="769:5" pos:end="769:27"><call pos:start="769:5" pos:end="769:27"><name pos:start="769:5" pos:end="769:14">qemu_vfree</name><argument_list pos:start="769:15" pos:end="769:27">(<argument pos:start="769:16" pos:end="769:26"><expr pos:start="769:16" pos:end="769:26"><name pos:start="769:16" pos:end="769:26"><name pos:start="769:16" pos:end="769:16">s</name><operator pos:start="769:17" pos:end="769:18">-&gt;</operator><name pos:start="769:19" pos:end="769:26">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="771:5" pos:end="771:66">/* else pre-write overlap checks in cache_destroy may crash */</comment>

    <expr_stmt pos:start="773:5" pos:end="773:23"><expr pos:start="773:5" pos:end="773:22"><name pos:start="773:5" pos:end="773:15"><name pos:start="773:5" pos:end="773:5">s</name><operator pos:start="773:6" pos:end="773:7">-&gt;</operator><name pos:start="773:8" pos:end="773:15">l1_table</name></name> <operator pos:start="773:17" pos:end="773:17">=</operator> <name pos:start="773:19" pos:end="773:22">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="775:5" pos:end="775:30"><expr pos:start="775:5" pos:end="775:29"><call pos:start="775:5" pos:end="775:29"><name pos:start="775:5" pos:end="775:25">cache_clean_timer_del</name><argument_list pos:start="775:26" pos:end="775:29">(<argument pos:start="775:27" pos:end="775:28"><expr pos:start="775:27" pos:end="775:28"><name pos:start="775:27" pos:end="775:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="777:5" pos:end="781:5"><if pos:start="777:5" pos:end="781:5">if <condition pos:start="777:8" pos:end="777:26">(<expr pos:start="777:9" pos:end="777:25"><name pos:start="777:9" pos:end="777:25"><name pos:start="777:9" pos:end="777:9">s</name><operator pos:start="777:10" pos:end="777:11">-&gt;</operator><name pos:start="777:12" pos:end="777:25">l2_table_cache</name></name></expr>)</condition> <block pos:start="777:28" pos:end="781:5">{<block_content pos:start="779:9" pos:end="779:51">

        <expr_stmt pos:start="779:9" pos:end="779:51"><expr pos:start="779:9" pos:end="779:50"><call pos:start="779:9" pos:end="779:50"><name pos:start="779:9" pos:end="779:27">qcow2_cache_destroy</name><argument_list pos:start="779:28" pos:end="779:50">(<argument pos:start="779:29" pos:end="779:30"><expr pos:start="779:29" pos:end="779:30"><name pos:start="779:29" pos:end="779:30">bs</name></expr></argument>, <argument pos:start="779:33" pos:end="779:49"><expr pos:start="779:33" pos:end="779:49"><name pos:start="779:33" pos:end="779:49"><name pos:start="779:33" pos:end="779:33">s</name><operator pos:start="779:34" pos:end="779:35">-&gt;</operator><name pos:start="779:36" pos:end="779:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="783:5" pos:end="787:5"><if pos:start="783:5" pos:end="787:5">if <condition pos:start="783:8" pos:end="783:32">(<expr pos:start="783:9" pos:end="783:31"><name pos:start="783:9" pos:end="783:31"><name pos:start="783:9" pos:end="783:9">s</name><operator pos:start="783:10" pos:end="783:11">-&gt;</operator><name pos:start="783:12" pos:end="783:31">refcount_block_cache</name></name></expr>)</condition> <block pos:start="783:34" pos:end="787:5">{<block_content pos:start="785:9" pos:end="785:57">

        <expr_stmt pos:start="785:9" pos:end="785:57"><expr pos:start="785:9" pos:end="785:56"><call pos:start="785:9" pos:end="785:56"><name pos:start="785:9" pos:end="785:27">qcow2_cache_destroy</name><argument_list pos:start="785:28" pos:end="785:56">(<argument pos:start="785:29" pos:end="785:30"><expr pos:start="785:29" pos:end="785:30"><name pos:start="785:29" pos:end="785:30">bs</name></expr></argument>, <argument pos:start="785:33" pos:end="785:55"><expr pos:start="785:33" pos:end="785:55"><name pos:start="785:33" pos:end="785:55"><name pos:start="785:33" pos:end="785:33">s</name><operator pos:start="785:34" pos:end="785:35">-&gt;</operator><name pos:start="785:36" pos:end="785:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="789:5" pos:end="789:29"><expr pos:start="789:5" pos:end="789:28"><call pos:start="789:5" pos:end="789:28"><name pos:start="789:5" pos:end="789:10">g_free</name><argument_list pos:start="789:11" pos:end="789:28">(<argument pos:start="789:12" pos:end="789:27"><expr pos:start="789:12" pos:end="789:27"><name pos:start="789:12" pos:end="789:27"><name pos:start="789:12" pos:end="789:12">s</name><operator pos:start="789:13" pos:end="789:14">-&gt;</operator><name pos:start="789:15" pos:end="789:27">cluster_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="791:5" pos:end="791:32"><expr pos:start="791:5" pos:end="791:31"><call pos:start="791:5" pos:end="791:31"><name pos:start="791:5" pos:end="791:14">qemu_vfree</name><argument_list pos:start="791:15" pos:end="791:31">(<argument pos:start="791:16" pos:end="791:30"><expr pos:start="791:16" pos:end="791:30"><name pos:start="791:16" pos:end="791:30"><name pos:start="791:16" pos:end="791:16">s</name><operator pos:start="791:17" pos:end="791:18">-&gt;</operator><name pos:start="791:19" pos:end="791:30">cluster_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="793:5" pos:end="793:34"><expr pos:start="793:5" pos:end="793:33"><call pos:start="793:5" pos:end="793:33"><name pos:start="793:5" pos:end="793:22">qcrypto_block_free</name><argument_list pos:start="793:23" pos:end="793:33">(<argument pos:start="793:24" pos:end="793:32"><expr pos:start="793:24" pos:end="793:32"><name pos:start="793:24" pos:end="793:32"><name pos:start="793:24" pos:end="793:24">s</name><operator pos:start="793:25" pos:end="793:26">-&gt;</operator><name pos:start="793:27" pos:end="793:32">crypto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="795:5" pos:end="795:54"><expr pos:start="795:5" pos:end="795:53"><call pos:start="795:5" pos:end="795:53"><name pos:start="795:5" pos:end="795:37">qapi_free_QCryptoBlockOpenOptions</name><argument_list pos:start="795:38" pos:end="795:53">(<argument pos:start="795:39" pos:end="795:52"><expr pos:start="795:39" pos:end="795:52"><name pos:start="795:39" pos:end="795:52"><name pos:start="795:39" pos:end="795:39">s</name><operator pos:start="795:40" pos:end="795:41">-&gt;</operator><name pos:start="795:42" pos:end="795:52">crypto_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="797:5" pos:end="797:15">return <expr pos:start="797:12" pos:end="797:14"><name pos:start="797:12" pos:end="797:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
