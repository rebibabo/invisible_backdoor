<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23107.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">handle_dependencies</name><parameter_list pos:start="1:31" pos:end="3:30">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:74"><decl pos:start="1:54" pos:end="1:74"><type pos:start="1:54" pos:end="1:74"><name pos:start="1:54" pos:end="1:61">uint64_t</name></type> <name pos:start="1:63" pos:end="1:74">guest_offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:29"><decl pos:start="3:5" pos:end="3:29"><type pos:start="3:5" pos:end="3:29"><name pos:start="3:5" pos:end="3:12">unsigned</name> <name pos:start="3:14" pos:end="3:16">int</name> <modifier pos:start="3:18" pos:end="3:18">*</modifier></type><name pos:start="3:19" pos:end="3:29">nb_clusters</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="79:1">{<block_content pos:start="7:5" pos:end="77:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">QCowL2Meta</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:25">old_alloc</name></decl>;</decl_stmt>



    <macro pos:start="13:5" pos:end="13:64"><name pos:start="13:5" pos:end="13:17">QLIST_FOREACH</name><argument_list pos:start="13:18" pos:end="13:64">(<argument pos:start="13:19" pos:end="13:27">old_alloc</argument>, <argument pos:start="13:30" pos:end="13:47">&amp;s-&gt;cluster_allocs</argument>, <argument pos:start="13:50" pos:end="13:63">next_in_flight</argument>)</argument_list></macro> <block pos:start="13:66" pos:end="65:5">{<block_content pos:start="17:9" pos:end="63:9">



        <decl_stmt pos:start="17:9" pos:end="17:57"><decl pos:start="17:9" pos:end="17:56"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">uint64_t</name></type> <name pos:start="17:18" pos:end="17:22">start</name> <init pos:start="17:24" pos:end="17:56">= <expr pos:start="17:26" pos:end="17:56"><name pos:start="17:26" pos:end="17:37">guest_offset</name> <operator pos:start="17:39" pos:end="17:40">&gt;&gt;</operator> <name pos:start="17:42" pos:end="17:56"><name pos:start="17:42" pos:end="17:42">s</name><operator pos:start="17:43" pos:end="17:44">-&gt;</operator><name pos:start="17:45" pos:end="17:56">cluster_bits</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:44"><decl pos:start="19:9" pos:end="19:43"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint64_t</name></type> <name pos:start="19:18" pos:end="19:20">end</name> <init pos:start="19:22" pos:end="19:43">= <expr pos:start="19:24" pos:end="19:43"><name pos:start="19:24" pos:end="19:28">start</name> <operator pos:start="19:30" pos:end="19:30">+</operator> <operator pos:start="19:32" pos:end="19:32">*</operator><name pos:start="19:33" pos:end="19:43">nb_clusters</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:66"><decl pos:start="21:9" pos:end="21:65"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">uint64_t</name></type> <name pos:start="21:18" pos:end="21:26">old_start</name> <init pos:start="21:28" pos:end="21:65">= <expr pos:start="21:30" pos:end="21:65"><name pos:start="21:30" pos:end="21:46"><name pos:start="21:30" pos:end="21:38">old_alloc</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:46">offset</name></name> <operator pos:start="21:48" pos:end="21:49">&gt;&gt;</operator> <name pos:start="21:51" pos:end="21:65"><name pos:start="21:51" pos:end="21:51">s</name><operator pos:start="21:52" pos:end="21:53">-&gt;</operator><name pos:start="21:54" pos:end="21:65">cluster_bits</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:62"><decl pos:start="23:9" pos:end="23:61"><type pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">uint64_t</name></type> <name pos:start="23:18" pos:end="23:24">old_end</name> <init pos:start="23:26" pos:end="23:61">= <expr pos:start="23:28" pos:end="23:61"><name pos:start="23:28" pos:end="23:36">old_start</name> <operator pos:start="23:38" pos:end="23:38">+</operator> <name pos:start="23:40" pos:end="23:61"><name pos:start="23:40" pos:end="23:48">old_alloc</name><operator pos:start="23:49" pos:end="23:50">-&gt;</operator><name pos:start="23:51" pos:end="23:61">nb_clusters</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="27:9" pos:end="63:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:47">(<expr pos:start="27:13" pos:end="27:46"><name pos:start="27:13" pos:end="27:38"><name pos:start="27:13" pos:end="27:15">end</name> <argument_list type="generic" pos:start="27:17" pos:end="27:38">&lt; <argument pos:start="27:19" pos:end="27:36"><expr pos:start="27:19" pos:end="27:36"><name pos:start="27:19" pos:end="27:27">old_start</name> <operator pos:start="27:29" pos:end="27:30">||</operator> <name pos:start="27:32" pos:end="27:36">start</name></expr></argument> &gt;</argument_list></name> <name pos:start="27:40" pos:end="27:46">old_end</name></expr>)</condition> <block pos:start="27:49" pos:end="31:9">{<block_content>

            <comment type="block" pos:start="29:13" pos:end="29:33">/* No intersection */</comment>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="63:9">else <block pos:start="31:16" pos:end="63:9">{<block_content pos:start="33:13" pos:end="61:13">

            <if_stmt pos:start="33:13" pos:end="43:13"><if pos:start="33:13" pos:end="39:13">if <condition pos:start="33:16" pos:end="33:34">(<expr pos:start="33:17" pos:end="33:33"><name pos:start="33:17" pos:end="33:21">start</name> <operator pos:start="33:23" pos:end="33:23">&lt;</operator> <name pos:start="33:25" pos:end="33:33">old_start</name></expr>)</condition> <block pos:start="33:36" pos:end="39:13">{<block_content pos:start="37:17" pos:end="37:49">

                <comment type="block" pos:start="35:17" pos:end="35:63">/* Stop at the start of a running allocation */</comment>

                <expr_stmt pos:start="37:17" pos:end="37:49"><expr pos:start="37:17" pos:end="37:48"><operator pos:start="37:17" pos:end="37:17">*</operator><name pos:start="37:18" pos:end="37:28">nb_clusters</name> <operator pos:start="37:30" pos:end="37:30">=</operator> <name pos:start="37:32" pos:end="37:40">old_start</name> <operator pos:start="37:42" pos:end="37:42">-</operator> <name pos:start="37:44" pos:end="37:48">start</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="39:15" pos:end="43:13">else <block pos:start="39:20" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:33">

                <expr_stmt pos:start="41:17" pos:end="41:33"><expr pos:start="41:17" pos:end="41:32"><operator pos:start="41:17" pos:end="41:17">*</operator><name pos:start="41:18" pos:end="41:28">nb_clusters</name> <operator pos:start="41:30" pos:end="41:30">=</operator> <literal type="number" pos:start="41:32" pos:end="41:32">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="47:13" pos:end="61:13"><if pos:start="47:13" pos:end="61:13">if <condition pos:start="47:16" pos:end="47:34">(<expr pos:start="47:17" pos:end="47:33"><operator pos:start="47:17" pos:end="47:17">*</operator><name pos:start="47:18" pos:end="47:28">nb_clusters</name> <operator pos:start="47:30" pos:end="47:31">==</operator> <literal type="number" pos:start="47:33" pos:end="47:33">0</literal></expr>)</condition> <block pos:start="47:36" pos:end="61:13">{<block_content pos:start="53:17" pos:end="59:31">

                <comment type="block" pos:start="49:17" pos:end="51:67">/* Wait for the dependency to complete. We need to recheck

                 * the free/allocated clusters when we continue. */</comment>

                <expr_stmt pos:start="53:17" pos:end="53:47"><expr pos:start="53:17" pos:end="53:46"><call pos:start="53:17" pos:end="53:46"><name pos:start="53:17" pos:end="53:36">qemu_co_mutex_unlock</name><argument_list pos:start="53:37" pos:end="53:46">(<argument pos:start="53:38" pos:end="53:45"><expr pos:start="53:38" pos:end="53:45"><operator pos:start="53:38" pos:end="53:38">&amp;</operator><name pos:start="53:39" pos:end="53:45"><name pos:start="53:39" pos:end="53:39">s</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:45">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:67"><expr pos:start="55:17" pos:end="55:66"><call pos:start="55:17" pos:end="55:66"><name pos:start="55:17" pos:end="55:34">qemu_co_queue_wait</name><argument_list pos:start="55:35" pos:end="55:66">(<argument pos:start="55:36" pos:end="55:65"><expr pos:start="55:36" pos:end="55:65"><operator pos:start="55:36" pos:end="55:36">&amp;</operator><name pos:start="55:37" pos:end="55:65"><name pos:start="55:37" pos:end="55:45">old_alloc</name><operator pos:start="55:46" pos:end="55:47">-&gt;</operator><name pos:start="55:48" pos:end="55:65">dependent_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:45"><expr pos:start="57:17" pos:end="57:44"><call pos:start="57:17" pos:end="57:44"><name pos:start="57:17" pos:end="57:34">qemu_co_mutex_lock</name><argument_list pos:start="57:35" pos:end="57:44">(<argument pos:start="57:36" pos:end="57:43"><expr pos:start="57:36" pos:end="57:43"><operator pos:start="57:36" pos:end="57:36">&amp;</operator><name pos:start="57:37" pos:end="57:43"><name pos:start="57:37" pos:end="57:37">s</name><operator pos:start="57:38" pos:end="57:39">-&gt;</operator><name pos:start="57:40" pos:end="57:43">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="59:17" pos:end="59:31">return <expr pos:start="59:24" pos:end="59:30"><operator pos:start="59:24" pos:end="59:24">-</operator><name pos:start="59:25" pos:end="59:30">EAGAIN</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block>



    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:22">(<expr pos:start="69:9" pos:end="69:21"><operator pos:start="69:9" pos:end="69:9">!</operator><operator pos:start="69:10" pos:end="69:10">*</operator><name pos:start="69:11" pos:end="69:21">nb_clusters</name></expr>)</condition> <block pos:start="69:24" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:16">

        <expr_stmt pos:start="71:9" pos:end="71:16"><expr pos:start="71:9" pos:end="71:15"><call pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:13">abort</name><argument_list pos:start="71:14" pos:end="71:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="77:5" pos:end="77:13">return <expr pos:start="77:12" pos:end="77:12"><literal type="number" pos:start="77:12" pos:end="77:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
