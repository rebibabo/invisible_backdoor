<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8621.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">usb_serial_handle_data</name><parameter_list pos:start="1:34" pos:end="1:63">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:43">USBDevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:59">USBPacket</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:15">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">USBSerialState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:45">= <expr pos:start="5:25" pos:end="5:45"><operator pos:start="5:25" pos:end="5:25">(</operator><name pos:start="5:26" pos:end="5:39">USBSerialState</name> <operator pos:start="5:41" pos:end="5:41">*</operator><operator pos:start="5:42" pos:end="5:42">)</operator><name pos:start="5:43" pos:end="5:45">dev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">ret</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:17">devep</name> <init pos:start="9:19" pos:end="9:28">= <expr pos:start="9:21" pos:end="9:28"><name pos:start="9:21" pos:end="9:28"><name pos:start="9:21" pos:end="9:21">p</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:28">devep</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:16">iovec</name></name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:21"><name pos:start="13:13" pos:end="13:18">header</name><index pos:start="13:19" pos:end="13:21">[<expr pos:start="13:20" pos:end="13:20"><literal type="number" pos:start="13:20" pos:end="13:20">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">first_len</name></decl>, <decl pos:start="15:20" pos:end="15:22"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:20" pos:end="15:22">len</name></decl>;</decl_stmt>



    <switch pos:start="19:5" pos:end="127:5">switch <condition pos:start="19:12" pos:end="19:19">(<expr pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:13">p</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:18">pid</name></name></expr>)</condition> <block pos:start="19:21" pos:end="127:5">{<block_content pos:start="21:5" pos:end="125:14">

    <case pos:start="21:5" pos:end="21:23">case <expr pos:start="21:10" pos:end="21:22"><name pos:start="21:10" pos:end="21:22">USB_TOKEN_OUT</name></expr>:</case>

        <if_stmt pos:start="23:9" pos:end="25:22"><if pos:start="23:9" pos:end="25:22">if <condition pos:start="23:12" pos:end="23:23">(<expr pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:17">devep</name> <operator pos:start="23:19" pos:end="23:20">!=</operator> <literal type="number" pos:start="23:22" pos:end="23:22">2</literal></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:22"><block_content pos:start="25:13" pos:end="25:22">

            <goto pos:start="25:13" pos:end="25:22">goto <name pos:start="25:18" pos:end="25:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <for pos:start="27:9" pos:end="33:9">for <control pos:start="27:13" pos:end="27:41">(<init pos:start="27:14" pos:end="27:19"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">i</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>;</init> <condition pos:start="27:21" pos:end="27:36"><expr pos:start="27:21" pos:end="27:35"><name pos:start="27:21" pos:end="27:21">i</name> <operator pos:start="27:23" pos:end="27:23">&lt;</operator> <name pos:start="27:25" pos:end="27:35"><name pos:start="27:25" pos:end="27:25">p</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:30">iov</name><operator pos:start="27:31" pos:end="27:31">.</operator><name pos:start="27:32" pos:end="27:35">niov</name></name></expr>;</condition> <incr pos:start="27:38" pos:end="27:40"><expr pos:start="27:38" pos:end="27:40"><name pos:start="27:38" pos:end="27:38">i</name><operator pos:start="27:39" pos:end="27:40">++</operator></expr></incr>)</control> <block pos:start="27:43" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:66">

            <expr_stmt pos:start="29:13" pos:end="29:33"><expr pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:15">iov</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:28"><name pos:start="29:19" pos:end="29:19">p</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:24">iov</name><operator pos:start="29:25" pos:end="29:25">.</operator><name pos:start="29:26" pos:end="29:28">iov</name></name> <operator pos:start="29:30" pos:end="29:30">+</operator> <name pos:start="29:32" pos:end="29:32">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:66"><expr pos:start="31:13" pos:end="31:65"><call pos:start="31:13" pos:end="31:65"><name pos:start="31:13" pos:end="31:29">qemu_chr_fe_write</name><argument_list pos:start="31:30" pos:end="31:65">(<argument pos:start="31:31" pos:end="31:35"><expr pos:start="31:31" pos:end="31:35"><name pos:start="31:31" pos:end="31:35"><name pos:start="31:31" pos:end="31:31">s</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:35">cs</name></name></expr></argument>, <argument pos:start="31:38" pos:end="31:50"><expr pos:start="31:38" pos:end="31:50"><name pos:start="31:38" pos:end="31:50"><name pos:start="31:38" pos:end="31:40">iov</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:50">iov_base</name></name></expr></argument>, <argument pos:start="31:53" pos:end="31:64"><expr pos:start="31:53" pos:end="31:64"><name pos:start="31:53" pos:end="31:64"><name pos:start="31:53" pos:end="31:55">iov</name><operator pos:start="31:56" pos:end="31:57">-&gt;</operator><name pos:start="31:58" pos:end="31:64">iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="35:9" pos:end="35:14">break;</break>



    <case pos:start="39:5" pos:end="39:22">case <expr pos:start="39:10" pos:end="39:21"><name pos:start="39:10" pos:end="39:21">USB_TOKEN_IN</name></expr>:</case>

        <if_stmt pos:start="41:9" pos:end="43:22"><if pos:start="41:9" pos:end="43:22">if <condition pos:start="41:12" pos:end="41:23">(<expr pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:17">devep</name> <operator pos:start="41:19" pos:end="41:20">!=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">1</literal></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:22"><block_content pos:start="43:13" pos:end="43:22">

            <goto pos:start="43:13" pos:end="43:22">goto <name pos:start="43:18" pos:end="43:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:43"><expr pos:start="45:9" pos:end="45:42"><name pos:start="45:9" pos:end="45:17">first_len</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:28">RECV_BUF</name> <operator pos:start="45:30" pos:end="45:30">-</operator> <name pos:start="45:32" pos:end="45:42"><name pos:start="45:32" pos:end="45:32">s</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:42">recv_ptr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:26"><expr pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:11">len</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:25"><name pos:start="47:15" pos:end="47:15">p</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:20">iov</name><operator pos:start="47:21" pos:end="47:21">.</operator><name pos:start="47:22" pos:end="47:25">size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:21">(<expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:15">len</name> <operator pos:start="49:17" pos:end="49:18">&lt;=</operator> <literal type="number" pos:start="49:20" pos:end="49:20">2</literal></expr>)</condition> <block pos:start="49:23" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:18">

            <expr_stmt pos:start="51:13" pos:end="51:30"><expr pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:29">USB_RET_NAK</name></expr>;</expr_stmt>

            <break pos:start="53:13" pos:end="53:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:47"><expr pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:14">header</name><index pos:start="57:15" pos:end="57:17">[<expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>]</index></name> <operator pos:start="57:19" pos:end="57:19">=</operator> <call pos:start="57:21" pos:end="57:42"><name pos:start="57:21" pos:end="57:39">usb_get_modem_lines</name><argument_list pos:start="57:40" pos:end="57:42">(<argument pos:start="57:41" pos:end="57:41"><expr pos:start="57:41" pos:end="57:41"><name pos:start="57:41" pos:end="57:41">s</name></expr></argument>)</argument_list></call> <operator pos:start="57:44" pos:end="57:44">|</operator> <literal type="number" pos:start="57:46" pos:end="57:46">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="59:9" pos:end="59:45">/* We do not have the uart details */</comment>

        <comment type="block" pos:start="61:9" pos:end="61:33">/* handle serial break */</comment>

        <if_stmt pos:start="63:9" pos:end="79:9"><if pos:start="63:9" pos:end="75:9">if <condition pos:start="63:12" pos:end="63:59">(<expr pos:start="63:13" pos:end="63:58"><name pos:start="63:13" pos:end="63:28"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:28">event_trigger</name></name> <operator pos:start="63:30" pos:end="63:31">&amp;&amp;</operator> <name pos:start="63:33" pos:end="63:48"><name pos:start="63:33" pos:end="63:33">s</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:48">event_trigger</name></name> <operator pos:start="63:50" pos:end="63:50">&amp;</operator> <name pos:start="63:52" pos:end="63:58">FTDI_BI</name></expr>)</condition> <block pos:start="63:61" pos:end="75:9">{<block_content pos:start="65:13" pos:end="73:18">

            <expr_stmt pos:start="65:13" pos:end="65:41"><expr pos:start="65:13" pos:end="65:40"><name pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:28">event_trigger</name></name> <operator pos:start="65:30" pos:end="65:31">&amp;=</operator> <operator pos:start="65:33" pos:end="65:33">~</operator><name pos:start="65:34" pos:end="65:40">FTDI_BI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:32"><expr pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:18">header</name><index pos:start="67:19" pos:end="67:21">[<expr pos:start="67:20" pos:end="67:20"><literal type="number" pos:start="67:20" pos:end="67:20">1</literal></expr>]</index></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:31">FTDI_BI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:42"><expr pos:start="69:13" pos:end="69:41"><call pos:start="69:13" pos:end="69:41"><name pos:start="69:13" pos:end="69:27">usb_packet_copy</name><argument_list pos:start="69:28" pos:end="69:41">(<argument pos:start="69:29" pos:end="69:29"><expr pos:start="69:29" pos:end="69:29"><name pos:start="69:29" pos:end="69:29">p</name></expr></argument>, <argument pos:start="69:32" pos:end="69:37"><expr pos:start="69:32" pos:end="69:37"><name pos:start="69:32" pos:end="69:37">header</name></expr></argument>, <argument pos:start="69:40" pos:end="69:40"><expr pos:start="69:40" pos:end="69:40"><literal type="number" pos:start="69:40" pos:end="69:40">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:20"><expr pos:start="71:13" pos:end="71:19"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <literal type="number" pos:start="71:19" pos:end="71:19">2</literal></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="79:9">else <block pos:start="75:16" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:26">

            <expr_stmt pos:start="77:13" pos:end="77:26"><expr pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:21"><name pos:start="77:13" pos:end="77:18">header</name><index pos:start="77:19" pos:end="77:21">[<expr pos:start="77:20" pos:end="77:20"><literal type="number" pos:start="77:20" pos:end="77:20">1</literal></expr>]</index></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <literal type="number" pos:start="77:25" pos:end="77:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:17"><expr pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:11">len</name> <operator pos:start="81:13" pos:end="81:14">-=</operator> <literal type="number" pos:start="81:16" pos:end="81:16">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="85:31"><if pos:start="83:9" pos:end="85:31">if <condition pos:start="83:12" pos:end="83:31">(<expr pos:start="83:13" pos:end="83:30"><name pos:start="83:13" pos:end="83:15">len</name> <operator pos:start="83:17" pos:end="83:17">&gt;</operator> <name pos:start="83:19" pos:end="83:30"><name pos:start="83:19" pos:end="83:19">s</name><operator pos:start="83:20" pos:end="83:21">-&gt;</operator><name pos:start="83:22" pos:end="83:30">recv_used</name></name></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:31"><block_content pos:start="85:13" pos:end="85:31">

            <expr_stmt pos:start="85:13" pos:end="85:31"><expr pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:15">len</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:30"><name pos:start="85:19" pos:end="85:19">s</name><operator pos:start="85:20" pos:end="85:21">-&gt;</operator><name pos:start="85:22" pos:end="85:30">recv_used</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:17">(<expr pos:start="87:13" pos:end="87:16"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:16">len</name></expr>)</condition> <block pos:start="87:19" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:18">

            <expr_stmt pos:start="89:13" pos:end="89:30"><expr pos:start="89:13" pos:end="89:29"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <name pos:start="89:19" pos:end="89:29">USB_RET_NAK</name></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="95:9" pos:end="97:28"><if pos:start="95:9" pos:end="97:28">if <condition pos:start="95:12" pos:end="95:28">(<expr pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:21">first_len</name> <operator pos:start="95:23" pos:end="95:23">&gt;</operator> <name pos:start="95:25" pos:end="95:27">len</name></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:28"><block_content pos:start="97:13" pos:end="97:28">

            <expr_stmt pos:start="97:13" pos:end="97:28"><expr pos:start="97:13" pos:end="97:27"><name pos:start="97:13" pos:end="97:21">first_len</name> <operator pos:start="97:23" pos:end="97:23">=</operator> <name pos:start="97:25" pos:end="97:27">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:38"><expr pos:start="99:9" pos:end="99:37"><call pos:start="99:9" pos:end="99:37"><name pos:start="99:9" pos:end="99:23">usb_packet_copy</name><argument_list pos:start="99:24" pos:end="99:37">(<argument pos:start="99:25" pos:end="99:25"><expr pos:start="99:25" pos:end="99:25"><name pos:start="99:25" pos:end="99:25">p</name></expr></argument>, <argument pos:start="99:28" pos:end="99:33"><expr pos:start="99:28" pos:end="99:33"><name pos:start="99:28" pos:end="99:33">header</name></expr></argument>, <argument pos:start="99:36" pos:end="99:36"><expr pos:start="99:36" pos:end="99:36"><literal type="number" pos:start="99:36" pos:end="99:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:65"><expr pos:start="101:9" pos:end="101:64"><call pos:start="101:9" pos:end="101:64"><name pos:start="101:9" pos:end="101:23">usb_packet_copy</name><argument_list pos:start="101:24" pos:end="101:64">(<argument pos:start="101:25" pos:end="101:25"><expr pos:start="101:25" pos:end="101:25"><name pos:start="101:25" pos:end="101:25">p</name></expr></argument>, <argument pos:start="101:28" pos:end="101:52"><expr pos:start="101:28" pos:end="101:52"><name pos:start="101:28" pos:end="101:38"><name pos:start="101:28" pos:end="101:28">s</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:38">recv_buf</name></name> <operator pos:start="101:40" pos:end="101:40">+</operator> <name pos:start="101:42" pos:end="101:52"><name pos:start="101:42" pos:end="101:42">s</name><operator pos:start="101:43" pos:end="101:44">-&gt;</operator><name pos:start="101:45" pos:end="101:52">recv_ptr</name></name></expr></argument>, <argument pos:start="101:55" pos:end="101:63"><expr pos:start="101:55" pos:end="101:63"><name pos:start="101:55" pos:end="101:63">first_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="105:61"><if pos:start="103:9" pos:end="105:61">if <condition pos:start="103:12" pos:end="103:28">(<expr pos:start="103:13" pos:end="103:27"><name pos:start="103:13" pos:end="103:15">len</name> <operator pos:start="103:17" pos:end="103:17">&gt;</operator> <name pos:start="103:19" pos:end="103:27">first_len</name></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:61"><block_content pos:start="105:13" pos:end="105:61">

            <expr_stmt pos:start="105:13" pos:end="105:61"><expr pos:start="105:13" pos:end="105:60"><call pos:start="105:13" pos:end="105:60"><name pos:start="105:13" pos:end="105:27">usb_packet_copy</name><argument_list pos:start="105:28" pos:end="105:60">(<argument pos:start="105:29" pos:end="105:29"><expr pos:start="105:29" pos:end="105:29"><name pos:start="105:29" pos:end="105:29">p</name></expr></argument>, <argument pos:start="105:32" pos:end="105:42"><expr pos:start="105:32" pos:end="105:42"><name pos:start="105:32" pos:end="105:42"><name pos:start="105:32" pos:end="105:32">s</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:42">recv_buf</name></name></expr></argument>, <argument pos:start="105:45" pos:end="105:59"><expr pos:start="105:45" pos:end="105:59"><name pos:start="105:45" pos:end="105:47">len</name> <operator pos:start="105:49" pos:end="105:49">-</operator> <name pos:start="105:51" pos:end="105:59">first_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:28"><expr pos:start="107:9" pos:end="107:27"><name pos:start="107:9" pos:end="107:20"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:20">recv_used</name></name> <operator pos:start="107:22" pos:end="107:23">-=</operator> <name pos:start="107:25" pos:end="107:27">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:53"><expr pos:start="109:9" pos:end="109:52"><name pos:start="109:9" pos:end="109:19"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:19">recv_ptr</name></name> <operator pos:start="109:21" pos:end="109:21">=</operator> <operator pos:start="109:23" pos:end="109:23">(</operator><name pos:start="109:24" pos:end="109:34"><name pos:start="109:24" pos:end="109:24">s</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:34">recv_ptr</name></name> <operator pos:start="109:36" pos:end="109:36">+</operator> <name pos:start="109:38" pos:end="109:40">len</name><operator pos:start="109:41" pos:end="109:41">)</operator> <operator pos:start="109:43" pos:end="109:43">%</operator> <name pos:start="109:45" pos:end="109:52">RECV_BUF</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:22"><expr pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <name pos:start="111:15" pos:end="111:17">len</name> <operator pos:start="111:19" pos:end="111:19">+</operator> <literal type="number" pos:start="111:21" pos:end="111:21">2</literal></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>



    <default pos:start="117:5" pos:end="117:12">default:</default>

        <expr_stmt pos:start="119:9" pos:end="119:31"><expr pos:start="119:9" pos:end="119:30"><call pos:start="119:9" pos:end="119:30"><name pos:start="119:9" pos:end="119:15">DPRINTF</name><argument_list pos:start="119:16" pos:end="119:30">(<argument pos:start="119:17" pos:end="119:29"><expr pos:start="119:17" pos:end="119:29"><literal type="string" pos:start="119:17" pos:end="119:29">"Bad token\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="121:5" pos:end="121:9"><name pos:start="121:5" pos:end="121:8">fail</name>:</label>

        <expr_stmt pos:start="123:9" pos:end="123:28"><expr pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:11">ret</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <name pos:start="123:15" pos:end="123:27">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="131:5" pos:end="131:15">return <expr pos:start="131:12" pos:end="131:14"><name pos:start="131:12" pos:end="131:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
