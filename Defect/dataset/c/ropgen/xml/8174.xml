<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8174.c" pos:tabs="8"><function pos:start="1:1" pos:end="72:15"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">qcow2_grow_l1_table</name><parameter_list pos:start="1:24" pos:end="2:40">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><name pos:start="1:47" pos:end="1:54">uint64_t</name></type> <name pos:start="1:56" pos:end="1:63">min_size</name></decl></parameter>,
                        <parameter pos:start="2:25" pos:end="2:39"><decl pos:start="2:25" pos:end="2:39"><type pos:start="2:25" pos:end="2:39"><name pos:start="2:25" pos:end="2:28">bool</name></type> <name pos:start="2:30" pos:end="2:39">exact_size</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="72:15">{<block_content pos:start="4:5" pos:end="72:15">
    <decl_stmt pos:start="4:5" pos:end="4:34"><decl pos:start="4:5" pos:end="4:33"><type pos:start="4:5" pos:end="4:19"><name pos:start="4:5" pos:end="4:17">BDRVQcowState</name> <modifier pos:start="4:19" pos:end="4:19">*</modifier></type><name pos:start="4:20" pos:end="4:20">s</name> <init pos:start="4:22" pos:end="4:33">= <expr pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:25">bs</name><operator pos:start="4:26" pos:end="4:27">-&gt;</operator><name pos:start="4:28" pos:end="4:33">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20">new_l1_size2</name></decl>, <decl pos:start="5:23" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:23" pos:end="5:25">ret</name></decl>, <decl pos:start="5:28" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:28" pos:end="5:28">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:27"><decl pos:start="6:5" pos:end="6:26"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:12">uint64_t</name> <modifier pos:start="6:14" pos:end="6:14">*</modifier></type><name pos:start="6:15" pos:end="6:26">new_l1_table</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:31">old_l1_table_offset</name></decl>, <decl pos:start="7:34" pos:end="7:44"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:34" pos:end="7:44">old_l1_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:45"><decl pos:start="8:5" pos:end="8:31"><type pos:start="8:5" pos:end="8:11"><name pos:start="8:5" pos:end="8:11">int64_t</name></type> <name pos:start="8:13" pos:end="8:31">new_l1_table_offset</name></decl>, <decl pos:start="8:34" pos:end="8:44"><type ref="prev" pos:start="8:5" pos:end="8:11"/><name pos:start="8:34" pos:end="8:44">new_l1_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:20"><name pos:start="9:13" pos:end="9:16">data</name><index pos:start="9:17" pos:end="9:20">[<expr pos:start="9:18" pos:end="9:19"><literal type="number" pos:start="9:18" pos:end="9:19">12</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt pos:start="10:5" pos:end="11:17"><if pos:start="10:5" pos:end="11:17">if <condition pos:start="10:8" pos:end="10:31">(<expr pos:start="10:9" pos:end="10:30"><name pos:start="10:9" pos:end="10:16">min_size</name> <operator pos:start="10:18" pos:end="10:19">&lt;=</operator> <name pos:start="10:21" pos:end="10:30"><name pos:start="10:21" pos:end="10:21">s</name><operator pos:start="10:22" pos:end="10:23">-&gt;</operator><name pos:start="10:24" pos:end="10:30">l1_size</name></name></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:17"><block_content pos:start="11:9" pos:end="11:17">
        <return pos:start="11:9" pos:end="11:17">return <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="12:5" pos:end="72:15"><if pos:start="12:5" pos:end="14:5">if <condition pos:start="12:8" pos:end="12:19">(<expr pos:start="12:9" pos:end="12:18"><name pos:start="12:9" pos:end="12:18">exact_size</name></expr>)</condition> <block pos:start="12:21" pos:end="14:5">{<block_content pos:start="13:9" pos:end="13:31">
        <expr_stmt pos:start="13:9" pos:end="13:31"><expr pos:start="13:9" pos:end="13:30"><name pos:start="13:9" pos:end="13:19">new_l1_size</name> <operator pos:start="13:21" pos:end="13:21">=</operator> <name pos:start="13:23" pos:end="13:30">min_size</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="14:7" pos:end="72:15">else <block pos:start="14:12" pos:end="72:15">{<block_content pos:start="16:9" pos:end="72:15">
        <comment type="block" pos:start="15:9" pos:end="15:72">/* Bump size up to reduce the number of times we have to grow */</comment>
        <expr_stmt pos:start="16:9" pos:end="16:33"><expr pos:start="16:9" pos:end="16:32"><name pos:start="16:9" pos:end="16:19">new_l1_size</name> <operator pos:start="16:21" pos:end="16:21">=</operator> <name pos:start="16:23" pos:end="16:32"><name pos:start="16:23" pos:end="16:23">s</name><operator pos:start="16:24" pos:end="16:25">-&gt;</operator><name pos:start="16:26" pos:end="16:32">l1_size</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="17:9" pos:end="72:15"><if pos:start="17:9" pos:end="72:15">if <condition pos:start="17:12" pos:end="17:29">(<expr pos:start="17:13" pos:end="17:28"><name pos:start="17:13" pos:end="17:23">new_l1_size</name> <operator pos:start="17:25" pos:end="17:26">==</operator> <literal type="number" pos:start="17:28" pos:end="17:28">0</literal></expr>)</condition> <block pos:start="17:31" pos:end="72:15">{<block_content pos:start="18:13" pos:end="72:15">
            <expr_stmt pos:start="18:13" pos:end="18:28"><expr pos:start="18:13" pos:end="18:27"><name pos:start="18:13" pos:end="18:23">new_l1_size</name> <operator pos:start="18:25" pos:end="18:25">=</operator> <literal type="number" pos:start="18:27" pos:end="18:27">1</literal></expr>;</expr_stmt>
        <while pos:start="19:9" pos:end="72:15">while <condition pos:start="19:15" pos:end="19:38">(<expr pos:start="19:16" pos:end="19:37"><name pos:start="19:16" pos:end="19:23">min_size</name> <operator pos:start="19:25" pos:end="19:25">&gt;</operator> <name pos:start="19:27" pos:end="19:37">new_l1_size</name></expr>)</condition> <block pos:start="19:40" pos:end="72:15">{<block_content pos:start="20:13" pos:end="72:15">
            <expr_stmt pos:start="20:13" pos:end="20:52"><expr pos:start="20:13" pos:end="20:51"><name pos:start="20:13" pos:end="20:23">new_l1_size</name> <operator pos:start="20:25" pos:end="20:25">=</operator> <operator pos:start="20:27" pos:end="20:27">(</operator><name pos:start="20:28" pos:end="20:38">new_l1_size</name> <operator pos:start="20:40" pos:end="20:40">*</operator> <literal type="number" pos:start="20:42" pos:end="20:44">3</literal> <operator pos:start="20:44" pos:end="20:44">+</operator> <literal type="number" pos:start="20:46" pos:end="20:46">1</literal><operator pos:start="20:47" pos:end="20:47">)</operator> <operator pos:start="20:49" pos:end="20:49">/</operator> <literal type="number" pos:start="20:51" pos:end="20:51">2</literal></expr>;</expr_stmt>
    <if_stmt pos:start="21:5" pos:end="72:15"><if pos:start="21:5" pos:end="72:15">if <condition pos:start="21:8" pos:end="21:49">(<expr pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:19">new_l1_size</name> <operator pos:start="21:21" pos:end="21:21">&gt;</operator> <name pos:start="21:23" pos:end="21:29">INT_MAX</name> <operator pos:start="21:31" pos:end="21:31">/</operator> <sizeof pos:start="21:33" pos:end="21:48">sizeof<argument_list pos:start="21:39" pos:end="21:48">(<argument pos:start="21:40" pos:end="21:47"><expr pos:start="21:40" pos:end="21:47"><name pos:start="21:40" pos:end="21:47">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="21:51" pos:end="72:15">{<block_content pos:start="23:5" pos:end="72:15">
<cpp:ifdef pos:start="22:1" pos:end="22:19">#<cpp:directive pos:start="22:2" pos:end="22:6">ifdef</cpp:directive> <name pos:start="22:8" pos:end="22:19">DEBUG_ALLOC2</name></cpp:ifdef>
    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="24:36"><call pos:start="23:5" pos:end="24:36"><name pos:start="23:5" pos:end="23:11">fprintf</name><argument_list pos:start="23:12" pos:end="24:36">(<argument pos:start="23:13" pos:end="23:18"><expr pos:start="23:13" pos:end="23:18"><name pos:start="23:13" pos:end="23:18">stderr</name></expr></argument>, <argument pos:start="23:21" pos:end="23:60"><expr pos:start="23:21" pos:end="23:60"><literal type="string" pos:start="23:21" pos:end="23:48">"grow l1_table from %d to %"</literal> <name pos:start="23:50" pos:end="23:55">PRId64</name> <literal type="string" pos:start="23:57" pos:end="23:60">"\n"</literal></expr></argument>,
            <argument pos:start="24:13" pos:end="24:22"><expr pos:start="24:13" pos:end="24:22"><name pos:start="24:13" pos:end="24:22"><name pos:start="24:13" pos:end="24:13">s</name><operator pos:start="24:14" pos:end="24:15">-&gt;</operator><name pos:start="24:16" pos:end="24:22">l1_size</name></name></expr></argument>, <argument pos:start="24:25" pos:end="24:35"><expr pos:start="24:25" pos:end="24:35"><name pos:start="24:25" pos:end="24:35">new_l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="26:5" pos:end="26:50"><expr pos:start="26:5" pos:end="26:49"><name pos:start="26:5" pos:end="26:16">new_l1_size2</name> <operator pos:start="26:18" pos:end="26:18">=</operator> <sizeof pos:start="26:20" pos:end="26:35">sizeof<argument_list pos:start="26:26" pos:end="26:35">(<argument pos:start="26:27" pos:end="26:34"><expr pos:start="26:27" pos:end="26:34"><name pos:start="26:27" pos:end="26:34">uint64_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="26:37" pos:end="26:37">*</operator> <name pos:start="26:39" pos:end="26:49">new_l1_size</name></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:62"><expr pos:start="27:5" pos:end="27:61"><name pos:start="27:5" pos:end="27:16">new_l1_table</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:61"><name pos:start="27:20" pos:end="27:28">g_malloc0</name><argument_list pos:start="27:29" pos:end="27:61">(<argument pos:start="27:30" pos:end="27:60"><expr pos:start="27:30" pos:end="27:60"><call pos:start="27:30" pos:end="27:60"><name pos:start="27:30" pos:end="27:41">align_offset</name><argument_list pos:start="27:42" pos:end="27:60">(<argument pos:start="27:43" pos:end="27:54"><expr pos:start="27:43" pos:end="27:54"><name pos:start="27:43" pos:end="27:54">new_l1_size2</name></expr></argument>, <argument pos:start="27:57" pos:end="27:59"><expr pos:start="27:57" pos:end="27:59"><literal type="number" pos:start="27:57" pos:end="27:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:69"><expr pos:start="28:5" pos:end="28:68"><call pos:start="28:5" pos:end="28:68"><name pos:start="28:5" pos:end="28:10">memcpy</name><argument_list pos:start="28:11" pos:end="28:68">(<argument pos:start="28:12" pos:end="28:23"><expr pos:start="28:12" pos:end="28:23"><name pos:start="28:12" pos:end="28:23">new_l1_table</name></expr></argument>, <argument pos:start="28:26" pos:end="28:36"><expr pos:start="28:26" pos:end="28:36"><name pos:start="28:26" pos:end="28:36"><name pos:start="28:26" pos:end="28:26">s</name><operator pos:start="28:27" pos:end="28:28">-&gt;</operator><name pos:start="28:29" pos:end="28:36">l1_table</name></name></expr></argument>, <argument pos:start="28:39" pos:end="28:67"><expr pos:start="28:39" pos:end="28:67"><name pos:start="28:39" pos:end="28:48"><name pos:start="28:39" pos:end="28:39">s</name><operator pos:start="28:40" pos:end="28:41">-&gt;</operator><name pos:start="28:42" pos:end="28:48">l1_size</name></name> <operator pos:start="28:50" pos:end="28:50">*</operator> <sizeof pos:start="28:52" pos:end="28:67">sizeof<argument_list pos:start="28:58" pos:end="28:67">(<argument pos:start="28:59" pos:end="28:66"><expr pos:start="28:59" pos:end="28:66"><name pos:start="28:59" pos:end="28:66">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="29:5" pos:end="29:44">/* write new table (align to cluster) */</comment>
    <expr_stmt pos:start="30:5" pos:end="30:55"><expr pos:start="30:5" pos:end="30:54"><call pos:start="30:5" pos:end="30:54"><name pos:start="30:5" pos:end="30:16">BLKDBG_EVENT</name><argument_list pos:start="30:17" pos:end="30:54">(<argument pos:start="30:18" pos:end="30:25"><expr pos:start="30:18" pos:end="30:25"><name pos:start="30:18" pos:end="30:25"><name pos:start="30:18" pos:end="30:19">bs</name><operator pos:start="30:20" pos:end="30:21">-&gt;</operator><name pos:start="30:22" pos:end="30:25">file</name></name></expr></argument>, <argument pos:start="30:28" pos:end="30:53"><expr pos:start="30:28" pos:end="30:53"><name pos:start="30:28" pos:end="30:53">BLKDBG_L1_GROW_ALLOC_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:65"><expr pos:start="31:5" pos:end="31:64"><name pos:start="31:5" pos:end="31:23">new_l1_table_offset</name> <operator pos:start="31:25" pos:end="31:25">=</operator> <call pos:start="31:27" pos:end="31:64"><name pos:start="31:27" pos:end="31:46">qcow2_alloc_clusters</name><argument_list pos:start="31:47" pos:end="31:64">(<argument pos:start="31:48" pos:end="31:49"><expr pos:start="31:48" pos:end="31:49"><name pos:start="31:48" pos:end="31:49">bs</name></expr></argument>, <argument pos:start="31:52" pos:end="31:63"><expr pos:start="31:52" pos:end="31:63"><name pos:start="31:52" pos:end="31:63">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="32:5" pos:end="72:15"><if pos:start="32:5" pos:end="72:15">if <condition pos:start="32:8" pos:end="32:32">(<expr pos:start="32:9" pos:end="32:31"><name pos:start="32:9" pos:end="32:27">new_l1_table_offset</name> <operator pos:start="32:29" pos:end="32:29">&lt;</operator> <literal type="number" pos:start="32:31" pos:end="32:31">0</literal></expr>)</condition> <block pos:start="32:34" pos:end="72:15">{<block_content pos:start="33:9" pos:end="72:15">
        <expr_stmt pos:start="33:9" pos:end="33:29"><expr pos:start="33:9" pos:end="33:28"><call pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:14">g_free</name><argument_list pos:start="33:15" pos:end="33:28">(<argument pos:start="33:16" pos:end="33:27"><expr pos:start="33:16" pos:end="33:27"><name pos:start="33:16" pos:end="33:27">new_l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="34:9" pos:end="34:35">return <expr pos:start="34:16" pos:end="34:34"><name pos:start="34:16" pos:end="34:34">new_l1_table_offset</name></expr>;</return>
    <expr_stmt pos:start="35:5" pos:end="35:57"><expr pos:start="35:5" pos:end="35:56"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:56"><name pos:start="35:11" pos:end="35:27">qcow2_cache_flush</name><argument_list pos:start="35:28" pos:end="35:56">(<argument pos:start="35:29" pos:end="35:30"><expr pos:start="35:29" pos:end="35:30"><name pos:start="35:29" pos:end="35:30">bs</name></expr></argument>, <argument pos:start="35:33" pos:end="35:55"><expr pos:start="35:33" pos:end="35:55"><name pos:start="35:33" pos:end="35:55"><name pos:start="35:33" pos:end="35:33">s</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="36:5" pos:end="72:15"><if pos:start="36:5" pos:end="72:15">if <condition pos:start="36:8" pos:end="36:16">(<expr pos:start="36:9" pos:end="36:15"><name pos:start="36:9" pos:end="36:11">ret</name> <operator pos:start="36:13" pos:end="36:13">&lt;</operator> <literal type="number" pos:start="36:15" pos:end="36:15">0</literal></expr>)</condition> <block pos:start="36:18" pos:end="72:15">{<block_content pos:start="37:9" pos:end="72:15">
        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">fail</name>;</goto>
    <comment type="block" pos:start="38:5" pos:end="39:35">/* the L1 position has not yet been updated, so these clusters must
     * indeed be completely free */</comment>
    <expr_stmt pos:start="40:5" pos:end="41:54"><expr pos:start="40:5" pos:end="41:53"><name pos:start="40:5" pos:end="40:7">ret</name> <operator pos:start="40:9" pos:end="40:9">=</operator> <call pos:start="40:11" pos:end="41:53"><name pos:start="40:11" pos:end="40:39">qcow2_pre_write_overlap_check</name><argument_list pos:start="40:40" pos:end="41:53">(<argument pos:start="40:41" pos:end="40:42"><expr pos:start="40:41" pos:end="40:42"><name pos:start="40:41" pos:end="40:42">bs</name></expr></argument>, <argument pos:start="40:45" pos:end="40:45"><expr pos:start="40:45" pos:end="40:45"><literal type="number" pos:start="40:45" pos:end="40:45">0</literal></expr></argument>, <argument pos:start="40:48" pos:end="40:66"><expr pos:start="40:48" pos:end="40:66"><name pos:start="40:48" pos:end="40:66">new_l1_table_offset</name></expr></argument>,
                                        <argument pos:start="41:41" pos:end="41:52"><expr pos:start="41:41" pos:end="41:52"><name pos:start="41:41" pos:end="41:52">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="42:5" pos:end="72:15"><if pos:start="42:5" pos:end="72:15">if <condition pos:start="42:8" pos:end="42:16">(<expr pos:start="42:9" pos:end="42:15"><name pos:start="42:9" pos:end="42:11">ret</name> <operator pos:start="42:13" pos:end="42:13">&lt;</operator> <literal type="number" pos:start="42:15" pos:end="42:15">0</literal></expr>)</condition> <block pos:start="42:18" pos:end="72:15">{<block_content pos:start="43:9" pos:end="72:15">
        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">fail</name>;</goto>
    <expr_stmt pos:start="44:5" pos:end="44:55"><expr pos:start="44:5" pos:end="44:54"><call pos:start="44:5" pos:end="44:54"><name pos:start="44:5" pos:end="44:16">BLKDBG_EVENT</name><argument_list pos:start="44:17" pos:end="44:54">(<argument pos:start="44:18" pos:end="44:25"><expr pos:start="44:18" pos:end="44:25"><name pos:start="44:18" pos:end="44:25"><name pos:start="44:18" pos:end="44:19">bs</name><operator pos:start="44:20" pos:end="44:21">-&gt;</operator><name pos:start="44:22" pos:end="44:25">file</name></name></expr></argument>, <argument pos:start="44:28" pos:end="44:53"><expr pos:start="44:28" pos:end="44:53"><name pos:start="44:28" pos:end="44:53">BLKDBG_L1_GROW_WRITE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="45:5" pos:end="46:55">for<control pos:start="45:8" pos:end="45:35">(<init pos:start="45:9" pos:end="45:14"><expr pos:start="45:9" pos:end="45:13"><name pos:start="45:9" pos:end="45:9">i</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <literal type="number" pos:start="45:13" pos:end="45:13">0</literal></expr>;</init> <condition pos:start="45:16" pos:end="45:30"><expr pos:start="45:16" pos:end="45:29"><name pos:start="45:16" pos:end="45:16">i</name> <operator pos:start="45:18" pos:end="45:18">&lt;</operator> <name pos:start="45:20" pos:end="45:29"><name pos:start="45:20" pos:end="45:20">s</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:29">l1_size</name></name></expr>;</condition> <incr pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:32">i</name><operator pos:start="45:33" pos:end="45:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="46:9" pos:end="46:55"><block_content pos:start="46:9" pos:end="46:55">
        <expr_stmt pos:start="46:9" pos:end="46:55"><expr pos:start="46:9" pos:end="46:54"><name pos:start="46:9" pos:end="46:23"><name pos:start="46:9" pos:end="46:20">new_l1_table</name><index pos:start="46:21" pos:end="46:23">[<expr pos:start="46:22" pos:end="46:22"><name pos:start="46:22" pos:end="46:22">i</name></expr>]</index></name> <operator pos:start="46:25" pos:end="46:25">=</operator> <call pos:start="46:27" pos:end="46:54"><name pos:start="46:27" pos:end="46:37">cpu_to_be64</name><argument_list pos:start="46:38" pos:end="46:54">(<argument pos:start="46:39" pos:end="46:53"><expr pos:start="46:39" pos:end="46:53"><name pos:start="46:39" pos:end="46:53"><name pos:start="46:39" pos:end="46:50">new_l1_table</name><index pos:start="46:51" pos:end="46:53">[<expr pos:start="46:52" pos:end="46:52"><name pos:start="46:52" pos:end="46:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt pos:start="47:5" pos:end="47:86"><expr pos:start="47:5" pos:end="47:85"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:85"><name pos:start="47:11" pos:end="47:26">bdrv_pwrite_sync</name><argument_list pos:start="47:27" pos:end="47:85">(<argument pos:start="47:28" pos:end="47:35"><expr pos:start="47:28" pos:end="47:35"><name pos:start="47:28" pos:end="47:35"><name pos:start="47:28" pos:end="47:29">bs</name><operator pos:start="47:30" pos:end="47:31">-&gt;</operator><name pos:start="47:32" pos:end="47:35">file</name></name></expr></argument>, <argument pos:start="47:38" pos:end="47:56"><expr pos:start="47:38" pos:end="47:56"><name pos:start="47:38" pos:end="47:56">new_l1_table_offset</name></expr></argument>, <argument pos:start="47:59" pos:end="47:70"><expr pos:start="47:59" pos:end="47:70"><name pos:start="47:59" pos:end="47:70">new_l1_table</name></expr></argument>, <argument pos:start="47:73" pos:end="47:84"><expr pos:start="47:73" pos:end="47:84"><name pos:start="47:73" pos:end="47:84">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="48:5" pos:end="49:18"><if pos:start="48:5" pos:end="49:18">if <condition pos:start="48:8" pos:end="48:16">(<expr pos:start="48:9" pos:end="48:15"><name pos:start="48:9" pos:end="48:11">ret</name> <operator pos:start="48:13" pos:end="48:13">&lt;</operator> <literal type="number" pos:start="48:15" pos:end="48:15">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:18"><block_content pos:start="49:9" pos:end="49:18">
        <goto pos:start="49:9" pos:end="49:18">goto <name pos:start="49:14" pos:end="49:17">fail</name>;</goto></block_content></block></if></if_stmt>
    <for pos:start="50:5" pos:end="51:55">for<control pos:start="50:8" pos:end="50:35">(<init pos:start="50:9" pos:end="50:14"><expr pos:start="50:9" pos:end="50:13"><name pos:start="50:9" pos:end="50:9">i</name> <operator pos:start="50:11" pos:end="50:11">=</operator> <literal type="number" pos:start="50:13" pos:end="50:13">0</literal></expr>;</init> <condition pos:start="50:16" pos:end="50:30"><expr pos:start="50:16" pos:end="50:29"><name pos:start="50:16" pos:end="50:16">i</name> <operator pos:start="50:18" pos:end="50:18">&lt;</operator> <name pos:start="50:20" pos:end="50:29"><name pos:start="50:20" pos:end="50:20">s</name><operator pos:start="50:21" pos:end="50:22">-&gt;</operator><name pos:start="50:23" pos:end="50:29">l1_size</name></name></expr>;</condition> <incr pos:start="50:32" pos:end="50:34"><expr pos:start="50:32" pos:end="50:34"><name pos:start="50:32" pos:end="50:32">i</name><operator pos:start="50:33" pos:end="50:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="51:9" pos:end="51:55"><block_content pos:start="51:9" pos:end="51:55">
        <expr_stmt pos:start="51:9" pos:end="51:55"><expr pos:start="51:9" pos:end="51:54"><name pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:20">new_l1_table</name><index pos:start="51:21" pos:end="51:23">[<expr pos:start="51:22" pos:end="51:22"><name pos:start="51:22" pos:end="51:22">i</name></expr>]</index></name> <operator pos:start="51:25" pos:end="51:25">=</operator> <call pos:start="51:27" pos:end="51:54"><name pos:start="51:27" pos:end="51:37">be64_to_cpu</name><argument_list pos:start="51:38" pos:end="51:54">(<argument pos:start="51:39" pos:end="51:53"><expr pos:start="51:39" pos:end="51:53"><name pos:start="51:39" pos:end="51:53"><name pos:start="51:39" pos:end="51:50">new_l1_table</name><index pos:start="51:51" pos:end="51:53">[<expr pos:start="51:52" pos:end="51:52"><name pos:start="51:52" pos:end="51:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <comment type="block" pos:start="52:5" pos:end="52:23">/* set new table */</comment>
    <expr_stmt pos:start="53:5" pos:end="53:58"><expr pos:start="53:5" pos:end="53:57"><call pos:start="53:5" pos:end="53:57"><name pos:start="53:5" pos:end="53:16">BLKDBG_EVENT</name><argument_list pos:start="53:17" pos:end="53:57">(<argument pos:start="53:18" pos:end="53:25"><expr pos:start="53:18" pos:end="53:25"><name pos:start="53:18" pos:end="53:25"><name pos:start="53:18" pos:end="53:19">bs</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:25">file</name></name></expr></argument>, <argument pos:start="53:28" pos:end="53:56"><expr pos:start="53:28" pos:end="53:56"><name pos:start="53:28" pos:end="53:56">BLKDBG_L1_GROW_ACTIVATE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="54:5" pos:end="54:47"><expr pos:start="54:5" pos:end="54:46"><call pos:start="54:5" pos:end="54:46"><name pos:start="54:5" pos:end="54:16">cpu_to_be32w</name><argument_list pos:start="54:17" pos:end="54:46">(<argument pos:start="54:18" pos:end="54:32"><expr pos:start="54:18" pos:end="54:32"><operator pos:start="54:18" pos:end="54:18">(</operator><name pos:start="54:19" pos:end="54:26">uint32_t</name><operator pos:start="54:27" pos:end="54:27">*</operator><operator pos:start="54:28" pos:end="54:28">)</operator><name pos:start="54:29" pos:end="54:32">data</name></expr></argument>, <argument pos:start="54:35" pos:end="54:45"><expr pos:start="54:35" pos:end="54:45"><name pos:start="54:35" pos:end="54:45">new_l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="55:5" pos:end="55:44"><expr pos:start="55:5" pos:end="55:43"><call pos:start="55:5" pos:end="55:43"><name pos:start="55:5" pos:end="55:12">stq_be_p</name><argument_list pos:start="55:13" pos:end="55:43">(<argument pos:start="55:14" pos:end="55:21"><expr pos:start="55:14" pos:end="55:21"><name pos:start="55:14" pos:end="55:17">data</name> <operator pos:start="55:19" pos:end="55:19">+</operator> <literal type="number" pos:start="55:21" pos:end="55:21">4</literal></expr></argument>, <argument pos:start="55:24" pos:end="55:42"><expr pos:start="55:24" pos:end="55:42"><name pos:start="55:24" pos:end="55:42">new_l1_table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:87"><expr pos:start="56:5" pos:end="56:86"><name pos:start="56:5" pos:end="56:7">ret</name> <operator pos:start="56:9" pos:end="56:9">=</operator> <call pos:start="56:11" pos:end="56:86"><name pos:start="56:11" pos:end="56:26">bdrv_pwrite_sync</name><argument_list pos:start="56:27" pos:end="56:86">(<argument pos:start="56:28" pos:end="56:35"><expr pos:start="56:28" pos:end="56:35"><name pos:start="56:28" pos:end="56:35"><name pos:start="56:28" pos:end="56:29">bs</name><operator pos:start="56:30" pos:end="56:31">-&gt;</operator><name pos:start="56:32" pos:end="56:35">file</name></name></expr></argument>, <argument pos:start="56:38" pos:end="56:66"><expr pos:start="56:38" pos:end="56:66"><call pos:start="56:38" pos:end="56:66"><name pos:start="56:38" pos:end="56:45">offsetof</name><argument_list pos:start="56:46" pos:end="56:66">(<argument pos:start="56:47" pos:end="56:56"><expr pos:start="56:47" pos:end="56:56"><name pos:start="56:47" pos:end="56:56">QCowHeader</name></expr></argument>, <argument pos:start="56:59" pos:end="56:65"><expr pos:start="56:59" pos:end="56:65"><name pos:start="56:59" pos:end="56:65">l1_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="56:69" pos:end="56:72"><expr pos:start="56:69" pos:end="56:72"><name pos:start="56:69" pos:end="56:72">data</name></expr></argument>,<argument pos:start="56:74" pos:end="56:85"><expr pos:start="56:74" pos:end="56:85"><sizeof pos:start="56:74" pos:end="56:85">sizeof<argument_list pos:start="56:80" pos:end="56:85">(<argument pos:start="56:81" pos:end="56:84"><expr pos:start="56:81" pos:end="56:84"><name pos:start="56:81" pos:end="56:84">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="57:5" pos:end="72:15"><if pos:start="57:5" pos:end="72:15">if <condition pos:start="57:8" pos:end="57:16">(<expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>)</condition> <block pos:start="57:18" pos:end="72:15">{<block_content pos:start="58:9" pos:end="72:15">
        <goto pos:start="58:9" pos:end="58:18">goto <name pos:start="58:14" pos:end="58:17">fail</name>;</goto>
    <expr_stmt pos:start="59:5" pos:end="59:24"><expr pos:start="59:5" pos:end="59:23"><call pos:start="59:5" pos:end="59:23"><name pos:start="59:5" pos:end="59:10">g_free</name><argument_list pos:start="59:11" pos:end="59:23">(<argument pos:start="59:12" pos:end="59:22"><expr pos:start="59:12" pos:end="59:22"><name pos:start="59:12" pos:end="59:22"><name pos:start="59:12" pos:end="59:12">s</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="60:5" pos:end="60:45"><expr pos:start="60:5" pos:end="60:44"><name pos:start="60:5" pos:end="60:23">old_l1_table_offset</name> <operator pos:start="60:25" pos:end="60:25">=</operator> <name pos:start="60:27" pos:end="60:44"><name pos:start="60:27" pos:end="60:27">s</name><operator pos:start="60:28" pos:end="60:29">-&gt;</operator><name pos:start="60:30" pos:end="60:44">l1_table_offset</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="61:5" pos:end="61:45"><expr pos:start="61:5" pos:end="61:44"><name pos:start="61:5" pos:end="61:22"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:22">l1_table_offset</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <name pos:start="61:26" pos:end="61:44">new_l1_table_offset</name></expr>;</expr_stmt>
    <expr_stmt pos:start="62:5" pos:end="62:31"><expr pos:start="62:5" pos:end="62:30"><name pos:start="62:5" pos:end="62:15"><name pos:start="62:5" pos:end="62:5">s</name><operator pos:start="62:6" pos:end="62:7">-&gt;</operator><name pos:start="62:8" pos:end="62:15">l1_table</name></name> <operator pos:start="62:17" pos:end="62:17">=</operator> <name pos:start="62:19" pos:end="62:30">new_l1_table</name></expr>;</expr_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:29"><expr pos:start="63:5" pos:end="63:28"><name pos:start="63:5" pos:end="63:15">old_l1_size</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <name pos:start="63:19" pos:end="63:28"><name pos:start="63:19" pos:end="63:19">s</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:28">l1_size</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:29"><expr pos:start="64:5" pos:end="64:28"><name pos:start="64:5" pos:end="64:14"><name pos:start="64:5" pos:end="64:5">s</name><operator pos:start="64:6" pos:end="64:7">-&gt;</operator><name pos:start="64:8" pos:end="64:14">l1_size</name></name> <operator pos:start="64:16" pos:end="64:16">=</operator> <name pos:start="64:18" pos:end="64:28">new_l1_size</name></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="66:45"><expr pos:start="65:5" pos:end="66:44"><call pos:start="65:5" pos:end="66:44"><name pos:start="65:5" pos:end="65:23">qcow2_free_clusters</name><argument_list pos:start="65:24" pos:end="66:44">(<argument pos:start="65:25" pos:end="65:26"><expr pos:start="65:25" pos:end="65:26"><name pos:start="65:25" pos:end="65:26">bs</name></expr></argument>, <argument pos:start="65:29" pos:end="65:47"><expr pos:start="65:29" pos:end="65:47"><name pos:start="65:29" pos:end="65:47">old_l1_table_offset</name></expr></argument>, <argument pos:start="65:50" pos:end="65:79"><expr pos:start="65:50" pos:end="65:79"><name pos:start="65:50" pos:end="65:60">old_l1_size</name> <operator pos:start="65:62" pos:end="65:62">*</operator> <sizeof pos:start="65:64" pos:end="65:79">sizeof<argument_list pos:start="65:70" pos:end="65:79">(<argument pos:start="65:71" pos:end="65:78"><expr pos:start="65:71" pos:end="65:78"><name pos:start="65:71" pos:end="65:78">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                        <argument pos:start="66:25" pos:end="66:43"><expr pos:start="66:25" pos:end="66:43"><name pos:start="66:25" pos:end="66:43">QCOW2_DISCARD_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="67:5" pos:end="67:13">return <expr pos:start="67:12" pos:end="67:12"><literal type="number" pos:start="67:12" pos:end="67:12">0</literal></expr>;</return>
 <label pos:start="68:2" pos:end="68:6"><name pos:start="68:2" pos:end="68:5">fail</name>:</label>
    <expr_stmt pos:start="69:5" pos:end="69:25"><expr pos:start="69:5" pos:end="69:24"><call pos:start="69:5" pos:end="69:24"><name pos:start="69:5" pos:end="69:10">g_free</name><argument_list pos:start="69:11" pos:end="69:24">(<argument pos:start="69:12" pos:end="69:23"><expr pos:start="69:12" pos:end="69:23"><name pos:start="69:12" pos:end="69:23">new_l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="70:5" pos:end="71:45"><expr pos:start="70:5" pos:end="71:44"><call pos:start="70:5" pos:end="71:44"><name pos:start="70:5" pos:end="70:23">qcow2_free_clusters</name><argument_list pos:start="70:24" pos:end="71:44">(<argument pos:start="70:25" pos:end="70:26"><expr pos:start="70:25" pos:end="70:26"><name pos:start="70:25" pos:end="70:26">bs</name></expr></argument>, <argument pos:start="70:29" pos:end="70:47"><expr pos:start="70:29" pos:end="70:47"><name pos:start="70:29" pos:end="70:47">new_l1_table_offset</name></expr></argument>, <argument pos:start="70:50" pos:end="70:61"><expr pos:start="70:50" pos:end="70:61"><name pos:start="70:50" pos:end="70:61">new_l1_size2</name></expr></argument>,
                        <argument pos:start="71:25" pos:end="71:43"><expr pos:start="71:25" pos:end="71:43"><name pos:start="71:25" pos:end="71:43">QCOW2_DISCARD_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="72:5" pos:end="72:15">return <expr pos:start="72:12" pos:end="72:14"><name pos:start="72:12" pos:end="72:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></function></unit>
