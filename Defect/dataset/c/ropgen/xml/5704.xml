<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5704.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:16">cdsg</name>)<parameter_list pos:start="1:18" pos:end="3:43">(<parameter pos:start="1:19" pos:end="1:36"><decl pos:start="1:19" pos:end="1:36"><type pos:start="1:19" pos:end="1:36"><name pos:start="1:19" pos:end="1:31">CPUS390XState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:46">uint64_t</name></type> <name pos:start="1:48" pos:end="1:51">addr</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:29"><decl pos:start="3:19" pos:end="3:29"><type pos:start="3:19" pos:end="3:29"><name pos:start="3:19" pos:end="3:26">uint32_t</name></type> <name pos:start="3:28" pos:end="3:29">r1</name></decl></parameter>, <parameter pos:start="3:32" pos:end="3:42"><decl pos:start="3:32" pos:end="3:42"><type pos:start="3:32" pos:end="3:42"><name pos:start="3:32" pos:end="3:39">uint32_t</name></type> <name pos:start="3:41" pos:end="3:42">r3</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="79:1">{<block_content pos:start="7:5" pos:end="77:43">

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">uintptr_t</name></type> <name pos:start="7:15" pos:end="7:16">ra</name> <init pos:start="7:18" pos:end="7:26">= <expr pos:start="7:20" pos:end="7:26"><call pos:start="7:20" pos:end="7:26"><name pos:start="7:20" pos:end="7:24">GETPC</name><argument_list pos:start="7:25" pos:end="7:26">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:67"><decl pos:start="9:5" pos:end="9:66"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">Int128</name></type> <name pos:start="9:12" pos:end="9:15">cmpv</name> <init pos:start="9:17" pos:end="9:66">= <expr pos:start="9:19" pos:end="9:66"><call pos:start="9:19" pos:end="9:66"><name pos:start="9:19" pos:end="9:32">int128_make128</name><argument_list pos:start="9:33" pos:end="9:66">(<argument pos:start="9:34" pos:end="9:50"><expr pos:start="9:34" pos:end="9:50"><name pos:start="9:34" pos:end="9:50"><name pos:start="9:34" pos:end="9:36">env</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:42">regs</name><index pos:start="9:43" pos:end="9:50">[<expr pos:start="9:44" pos:end="9:49"><name pos:start="9:44" pos:end="9:45">r1</name> <operator pos:start="9:47" pos:end="9:47">+</operator> <literal type="number" pos:start="9:49" pos:end="9:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="9:53" pos:end="9:65"><expr pos:start="9:53" pos:end="9:65"><name pos:start="9:53" pos:end="9:65"><name pos:start="9:53" pos:end="9:55">env</name><operator pos:start="9:56" pos:end="9:57">-&gt;</operator><name pos:start="9:58" pos:end="9:61">regs</name><index pos:start="9:62" pos:end="9:65">[<expr pos:start="9:63" pos:end="9:64"><name pos:start="9:63" pos:end="9:64">r1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:67"><decl pos:start="11:5" pos:end="11:66"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">Int128</name></type> <name pos:start="11:12" pos:end="11:15">newv</name> <init pos:start="11:17" pos:end="11:66">= <expr pos:start="11:19" pos:end="11:66"><call pos:start="11:19" pos:end="11:66"><name pos:start="11:19" pos:end="11:32">int128_make128</name><argument_list pos:start="11:33" pos:end="11:66">(<argument pos:start="11:34" pos:end="11:50"><expr pos:start="11:34" pos:end="11:50"><name pos:start="11:34" pos:end="11:50"><name pos:start="11:34" pos:end="11:36">env</name><operator pos:start="11:37" pos:end="11:38">-&gt;</operator><name pos:start="11:39" pos:end="11:42">regs</name><index pos:start="11:43" pos:end="11:50">[<expr pos:start="11:44" pos:end="11:49"><name pos:start="11:44" pos:end="11:45">r3</name> <operator pos:start="11:47" pos:end="11:47">+</operator> <literal type="number" pos:start="11:49" pos:end="11:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="11:53" pos:end="11:65"><expr pos:start="11:53" pos:end="11:65"><name pos:start="11:53" pos:end="11:65"><name pos:start="11:53" pos:end="11:55">env</name><operator pos:start="11:56" pos:end="11:57">-&gt;</operator><name pos:start="11:58" pos:end="11:61">regs</name><index pos:start="11:62" pos:end="11:65">[<expr pos:start="11:63" pos:end="11:64"><name pos:start="11:63" pos:end="11:64">r3</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">Int128</name></type> <name pos:start="13:12" pos:end="13:15">oldv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:13">fail</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="69:5"><if pos:start="19:5" pos:end="37:5">if <condition pos:start="19:8" pos:end="19:22">(<expr pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:21">parallel_cpus</name></expr>)</condition> <block pos:start="19:24" pos:end="37:5">{<block_content pos:start="23:9" pos:end="36:0">

<cpp:ifndef pos:start="21:1" pos:end="21:24">#<cpp:directive pos:start="21:2" pos:end="21:7">ifndef</cpp:directive> <name pos:start="21:9" pos:end="21:24">CONFIG_ATOMIC128</name></cpp:ifndef>

        <expr_stmt pos:start="23:9" pos:end="26:0"><expr pos:start="23:9" pos:end="23:50"><call pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:28">cpu_loop_exit_atomic</name><argument_list pos:start="23:29" pos:end="23:50">(<argument pos:start="23:30" pos:end="23:45"><expr pos:start="23:30" pos:end="23:45"><call pos:start="23:30" pos:end="23:45"><name pos:start="23:30" pos:end="23:40">ENV_GET_CPU</name><argument_list pos:start="23:41" pos:end="23:45">(<argument pos:start="23:42" pos:end="23:44"><expr pos:start="23:42" pos:end="23:44"><name pos:start="23:42" pos:end="23:44">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="23:48" pos:end="23:49"><expr pos:start="23:48" pos:end="23:49"><name pos:start="23:48" pos:end="23:49">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="27:9" pos:end="27:48"><decl pos:start="27:9" pos:end="27:47"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:19">mem_idx</name> <init pos:start="27:21" pos:end="27:47">= <expr pos:start="27:23" pos:end="27:47"><call pos:start="27:23" pos:end="27:47"><name pos:start="27:23" pos:end="27:35">cpu_mmu_index</name><argument_list pos:start="27:36" pos:end="27:47">(<argument pos:start="27:37" pos:end="27:39"><expr pos:start="27:37" pos:end="27:39"><name pos:start="27:37" pos:end="27:39">env</name></expr></argument>, <argument pos:start="27:42" pos:end="27:46"><expr pos:start="27:42" pos:end="27:46"><name pos:start="27:42" pos:end="27:46">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:71"><decl pos:start="29:9" pos:end="29:70"><type pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:19">TCGMemOpIdx</name></type> <name pos:start="29:21" pos:end="29:22">oi</name> <init pos:start="29:24" pos:end="29:70">= <expr pos:start="29:26" pos:end="29:70"><call pos:start="29:26" pos:end="29:70"><name pos:start="29:26" pos:end="29:39">make_memop_idx</name><argument_list pos:start="29:40" pos:end="29:70">(<argument pos:start="29:41" pos:end="29:60"><expr pos:start="29:41" pos:end="29:60"><name pos:start="29:41" pos:end="29:46">MO_TEQ</name> <operator pos:start="29:48" pos:end="29:48">|</operator> <name pos:start="29:50" pos:end="29:60">MO_ALIGN_16</name></expr></argument>, <argument pos:start="29:63" pos:end="29:69"><expr pos:start="29:63" pos:end="29:69"><name pos:start="29:63" pos:end="29:69">mem_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:76"><expr pos:start="31:9" pos:end="31:75"><name pos:start="31:9" pos:end="31:12">oldv</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <call pos:start="31:16" pos:end="31:75"><name pos:start="31:16" pos:end="31:44">helper_atomic_cmpxchgo_be_mmu</name><argument_list pos:start="31:45" pos:end="31:75">(<argument pos:start="31:46" pos:end="31:48"><expr pos:start="31:46" pos:end="31:48"><name pos:start="31:46" pos:end="31:48">env</name></expr></argument>, <argument pos:start="31:51" pos:end="31:54"><expr pos:start="31:51" pos:end="31:54"><name pos:start="31:51" pos:end="31:54">addr</name></expr></argument>, <argument pos:start="31:57" pos:end="31:60"><expr pos:start="31:57" pos:end="31:60"><name pos:start="31:57" pos:end="31:60">cmpv</name></expr></argument>, <argument pos:start="31:63" pos:end="31:66"><expr pos:start="31:63" pos:end="31:66"><name pos:start="31:63" pos:end="31:66">newv</name></expr></argument>, <argument pos:start="31:69" pos:end="31:70"><expr pos:start="31:69" pos:end="31:70"><name pos:start="31:69" pos:end="31:70">oi</name></expr></argument>, <argument pos:start="31:73" pos:end="31:74"><expr pos:start="31:73" pos:end="31:74"><name pos:start="31:73" pos:end="31:74">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="36:0"><expr pos:start="33:9" pos:end="33:37"><name pos:start="33:9" pos:end="33:12">fail</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <operator pos:start="33:16" pos:end="33:16">!</operator><call pos:start="33:17" pos:end="33:37"><name pos:start="33:17" pos:end="33:25">int128_eq</name><argument_list pos:start="33:26" pos:end="33:37">(<argument pos:start="33:27" pos:end="33:30"><expr pos:start="33:27" pos:end="33:30"><name pos:start="33:27" pos:end="33:30">oldv</name></expr></argument>, <argument pos:start="33:33" pos:end="33:36"><expr pos:start="33:33" pos:end="33:36"><name pos:start="33:33" pos:end="33:36">cmpv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="69:5">else <block pos:start="37:12" pos:end="69:5">{<block_content pos:start="39:9" pos:end="67:63">

        <decl_stmt pos:start="39:9" pos:end="39:28"><decl pos:start="39:9" pos:end="39:21"><type pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:16">uint64_t</name></type> <name pos:start="39:18" pos:end="39:21">oldh</name></decl>, <decl pos:start="39:24" pos:end="39:27"><type ref="prev" pos:start="39:9" pos:end="39:16"/><name pos:start="39:24" pos:end="39:27">oldl</name></decl>;</decl_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:43"><expr pos:start="43:9" pos:end="43:42"><call pos:start="43:9" pos:end="43:42"><name pos:start="43:9" pos:end="43:23">check_alignment</name><argument_list pos:start="43:24" pos:end="43:42">(<argument pos:start="43:25" pos:end="43:27"><expr pos:start="43:25" pos:end="43:27"><name pos:start="43:25" pos:end="43:27">env</name></expr></argument>, <argument pos:start="43:30" pos:end="43:33"><expr pos:start="43:30" pos:end="43:33"><name pos:start="43:30" pos:end="43:33">addr</name></expr></argument>, <argument pos:start="43:36" pos:end="43:37"><expr pos:start="43:36" pos:end="43:37"><literal type="number" pos:start="43:36" pos:end="43:37">16</literal></expr></argument>, <argument pos:start="43:40" pos:end="43:41"><expr pos:start="43:40" pos:end="43:41"><name pos:start="43:40" pos:end="43:41">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:50"><expr pos:start="47:9" pos:end="47:49"><name pos:start="47:9" pos:end="47:12">oldh</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:49"><name pos:start="47:16" pos:end="47:30">cpu_ldq_data_ra</name><argument_list pos:start="47:31" pos:end="47:49">(<argument pos:start="47:32" pos:end="47:34"><expr pos:start="47:32" pos:end="47:34"><name pos:start="47:32" pos:end="47:34">env</name></expr></argument>, <argument pos:start="47:37" pos:end="47:44"><expr pos:start="47:37" pos:end="47:44"><name pos:start="47:37" pos:end="47:40">addr</name> <operator pos:start="47:42" pos:end="47:42">+</operator> <literal type="number" pos:start="47:44" pos:end="47:44">0</literal></expr></argument>, <argument pos:start="47:47" pos:end="47:48"><expr pos:start="47:47" pos:end="47:48"><name pos:start="47:47" pos:end="47:48">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:50"><expr pos:start="49:9" pos:end="49:49"><name pos:start="49:9" pos:end="49:12">oldl</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:49"><name pos:start="49:16" pos:end="49:30">cpu_ldq_data_ra</name><argument_list pos:start="49:31" pos:end="49:49">(<argument pos:start="49:32" pos:end="49:34"><expr pos:start="49:32" pos:end="49:34"><name pos:start="49:32" pos:end="49:34">env</name></expr></argument>, <argument pos:start="49:37" pos:end="49:44"><expr pos:start="49:37" pos:end="49:44"><name pos:start="49:37" pos:end="49:40">addr</name> <operator pos:start="49:42" pos:end="49:42">+</operator> <literal type="number" pos:start="49:44" pos:end="49:44">8</literal></expr></argument>, <argument pos:start="49:47" pos:end="49:48"><expr pos:start="49:47" pos:end="49:48"><name pos:start="49:47" pos:end="49:48">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:42"><expr pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:12">oldv</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:41"><name pos:start="53:16" pos:end="53:29">int128_make128</name><argument_list pos:start="53:30" pos:end="53:41">(<argument pos:start="53:31" pos:end="53:34"><expr pos:start="53:31" pos:end="53:34"><name pos:start="53:31" pos:end="53:34">oldl</name></expr></argument>, <argument pos:start="53:37" pos:end="53:40"><expr pos:start="53:37" pos:end="53:40"><name pos:start="53:37" pos:end="53:40">oldh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:38"><expr pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:12">fail</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <operator pos:start="55:16" pos:end="55:16">!</operator><call pos:start="55:17" pos:end="55:37"><name pos:start="55:17" pos:end="55:25">int128_eq</name><argument_list pos:start="55:26" pos:end="55:37">(<argument pos:start="55:27" pos:end="55:30"><expr pos:start="55:27" pos:end="55:30"><name pos:start="55:27" pos:end="55:30">oldv</name></expr></argument>, <argument pos:start="55:33" pos:end="55:36"><expr pos:start="55:33" pos:end="55:36"><name pos:start="55:33" pos:end="55:36">cmpv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:17">(<expr pos:start="57:13" pos:end="57:16"><name pos:start="57:13" pos:end="57:16">fail</name></expr>)</condition> <block pos:start="57:19" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:24">

            <expr_stmt pos:start="59:13" pos:end="59:24"><expr pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:16">newv</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:23">oldv</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:63"><expr pos:start="65:9" pos:end="65:62"><call pos:start="65:9" pos:end="65:62"><name pos:start="65:9" pos:end="65:23">cpu_stq_data_ra</name><argument_list pos:start="65:24" pos:end="65:62">(<argument pos:start="65:25" pos:end="65:27"><expr pos:start="65:25" pos:end="65:27"><name pos:start="65:25" pos:end="65:27">env</name></expr></argument>, <argument pos:start="65:30" pos:end="65:37"><expr pos:start="65:30" pos:end="65:37"><name pos:start="65:30" pos:end="65:33">addr</name> <operator pos:start="65:35" pos:end="65:35">+</operator> <literal type="number" pos:start="65:37" pos:end="65:37">0</literal></expr></argument>, <argument pos:start="65:40" pos:end="65:57"><expr pos:start="65:40" pos:end="65:57"><call pos:start="65:40" pos:end="65:57"><name pos:start="65:40" pos:end="65:51">int128_gethi</name><argument_list pos:start="65:52" pos:end="65:57">(<argument pos:start="65:53" pos:end="65:56"><expr pos:start="65:53" pos:end="65:56"><name pos:start="65:53" pos:end="65:56">newv</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="65:60" pos:end="65:61"><expr pos:start="65:60" pos:end="65:61"><name pos:start="65:60" pos:end="65:61">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:63"><expr pos:start="67:9" pos:end="67:62"><call pos:start="67:9" pos:end="67:62"><name pos:start="67:9" pos:end="67:23">cpu_stq_data_ra</name><argument_list pos:start="67:24" pos:end="67:62">(<argument pos:start="67:25" pos:end="67:27"><expr pos:start="67:25" pos:end="67:27"><name pos:start="67:25" pos:end="67:27">env</name></expr></argument>, <argument pos:start="67:30" pos:end="67:37"><expr pos:start="67:30" pos:end="67:37"><name pos:start="67:30" pos:end="67:33">addr</name> <operator pos:start="67:35" pos:end="67:35">+</operator> <literal type="number" pos:start="67:37" pos:end="67:37">8</literal></expr></argument>, <argument pos:start="67:40" pos:end="67:57"><expr pos:start="67:40" pos:end="67:57"><call pos:start="67:40" pos:end="67:57"><name pos:start="67:40" pos:end="67:51">int128_getlo</name><argument_list pos:start="67:52" pos:end="67:57">(<argument pos:start="67:53" pos:end="67:56"><expr pos:start="67:53" pos:end="67:56"><name pos:start="67:53" pos:end="67:56">newv</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:60" pos:end="67:61"><expr pos:start="67:60" pos:end="67:61"><name pos:start="67:60" pos:end="67:61">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:22"><expr pos:start="73:5" pos:end="73:21"><name pos:start="73:5" pos:end="73:14"><name pos:start="73:5" pos:end="73:7">env</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:14">cc_op</name></name> <operator pos:start="73:16" pos:end="73:16">=</operator> <name pos:start="73:18" pos:end="73:21">fail</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:39"><expr pos:start="75:5" pos:end="75:38"><name pos:start="75:5" pos:end="75:17"><name pos:start="75:5" pos:end="75:7">env</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:13">regs</name><index pos:start="75:14" pos:end="75:17">[<expr pos:start="75:15" pos:end="75:16"><name pos:start="75:15" pos:end="75:16">r1</name></expr>]</index></name> <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="75:38"><name pos:start="75:21" pos:end="75:32">int128_gethi</name><argument_list pos:start="75:33" pos:end="75:38">(<argument pos:start="75:34" pos:end="75:37"><expr pos:start="75:34" pos:end="75:37"><name pos:start="75:34" pos:end="75:37">oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:43"><expr pos:start="77:5" pos:end="77:42"><name pos:start="77:5" pos:end="77:21"><name pos:start="77:5" pos:end="77:7">env</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:13">regs</name><index pos:start="77:14" pos:end="77:21">[<expr pos:start="77:15" pos:end="77:20"><name pos:start="77:15" pos:end="77:16">r1</name> <operator pos:start="77:18" pos:end="77:18">+</operator> <literal type="number" pos:start="77:20" pos:end="77:20">1</literal></expr>]</index></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <call pos:start="77:25" pos:end="77:42"><name pos:start="77:25" pos:end="77:36">int128_getlo</name><argument_list pos:start="77:37" pos:end="77:42">(<argument pos:start="77:38" pos:end="77:41"><expr pos:start="77:38" pos:end="77:41"><name pos:start="77:38" pos:end="77:41">oldv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
