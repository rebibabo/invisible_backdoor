<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15255.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:45"><name pos:start="1:1" pos:end="1:10">uart_write</name><argument_list pos:start="1:11" pos:end="3:45">(<argument pos:start="1:12" pos:end="1:23">void *opaque</argument>, <argument pos:start="1:26" pos:end="1:36">hwaddr addr</argument>,

           <argument pos:start="3:12" pos:end="3:25">uint64_t val64</argument>, <argument pos:start="3:28" pos:end="3:44">unsigned int size</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:23">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">XilinxUARTLite</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><name pos:start="7:25" pos:end="7:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">value</name> <init pos:start="9:20" pos:end="9:26">= <expr pos:start="9:22" pos:end="9:26"><name pos:start="9:22" pos:end="9:26">val64</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:20">ch</name> <init pos:start="11:22" pos:end="11:28">= <expr pos:start="11:24" pos:end="11:28"><name pos:start="11:24" pos:end="11:28">value</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:15"><expr pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:8">addr</name> <operator pos:start="15:10" pos:end="15:12">&gt;&gt;=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">2</literal></expr>;</expr_stmt>

    <switch pos:start="17:5" pos:end="75:5">switch <condition pos:start="17:12" pos:end="17:17">(<expr pos:start="17:13" pos:end="17:16"><name pos:start="17:13" pos:end="17:16">addr</name></expr>)</condition>

    <block pos:start="19:5" pos:end="75:5">{<block_content pos:start="21:9" pos:end="73:18">

        <case pos:start="21:9" pos:end="21:22">case <expr pos:start="21:14" pos:end="21:21"><name pos:start="21:14" pos:end="21:21">R_STATUS</name></expr>:</case>

            <expr_stmt pos:start="23:13" pos:end="23:48"><expr pos:start="23:13" pos:end="23:47"><call pos:start="23:13" pos:end="23:47"><name pos:start="23:13" pos:end="23:20">hw_error</name><argument_list pos:start="23:21" pos:end="23:47">(<argument pos:start="23:22" pos:end="23:46"><expr pos:start="23:22" pos:end="23:46"><literal type="string" pos:start="23:22" pos:end="23:46">"write to UART STATUS?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="25:13" pos:end="25:18">break;</break>



        <case pos:start="29:9" pos:end="29:20">case <expr pos:start="29:14" pos:end="29:19"><name pos:start="29:14" pos:end="29:19">R_CTRL</name></expr>:</case>

            <if_stmt pos:start="31:13" pos:end="37:13"><if pos:start="31:13" pos:end="37:13">if <condition pos:start="31:16" pos:end="31:39">(<expr pos:start="31:17" pos:end="31:38"><name pos:start="31:17" pos:end="31:21">value</name> <operator pos:start="31:23" pos:end="31:23">&amp;</operator> <name pos:start="31:25" pos:end="31:38">CONTROL_RST_RX</name></expr>)</condition> <block pos:start="31:41" pos:end="37:13">{<block_content pos:start="33:17" pos:end="35:35">

                <expr_stmt pos:start="33:17" pos:end="33:35"><expr pos:start="33:17" pos:end="33:34"><name pos:start="33:17" pos:end="33:30"><name pos:start="33:17" pos:end="33:17">s</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:30">rx_fifo_pos</name></name> <operator pos:start="33:32" pos:end="33:32">=</operator> <literal type="number" pos:start="33:34" pos:end="33:34">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="35:17" pos:end="35:35"><expr pos:start="35:17" pos:end="35:34"><name pos:start="35:17" pos:end="35:30"><name pos:start="35:17" pos:end="35:17">s</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:30">rx_fifo_len</name></name> <operator pos:start="35:32" pos:end="35:32">=</operator> <literal type="number" pos:start="35:34" pos:end="35:34">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:34"><expr pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:19">regs</name><index pos:start="39:20" pos:end="39:25">[<expr pos:start="39:21" pos:end="39:24"><name pos:start="39:21" pos:end="39:24">addr</name></expr>]</index></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <name pos:start="39:29" pos:end="39:33">value</name></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>



        <case pos:start="45:9" pos:end="45:18">case <expr pos:start="45:14" pos:end="45:17"><name pos:start="45:14" pos:end="45:17">R_TX</name></expr>:</case>

            <if_stmt pos:start="47:13" pos:end="49:50"><if pos:start="47:13" pos:end="49:50">if <condition pos:start="47:16" pos:end="47:23">(<expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:17">s</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:22">chr</name></name></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:50"><block_content pos:start="49:17" pos:end="49:50">

                <expr_stmt pos:start="49:17" pos:end="49:50"><expr pos:start="49:17" pos:end="49:49"><call pos:start="49:17" pos:end="49:49"><name pos:start="49:17" pos:end="49:33">qemu_chr_fe_write</name><argument_list pos:start="49:34" pos:end="49:49">(<argument pos:start="49:35" pos:end="49:40"><expr pos:start="49:35" pos:end="49:40"><name pos:start="49:35" pos:end="49:40"><name pos:start="49:35" pos:end="49:35">s</name><operator pos:start="49:36" pos:end="49:37">-&gt;</operator><name pos:start="49:38" pos:end="49:40">chr</name></name></expr></argument>, <argument pos:start="49:43" pos:end="49:45"><expr pos:start="49:43" pos:end="49:45"><operator pos:start="49:43" pos:end="49:43">&amp;</operator><name pos:start="49:44" pos:end="49:45">ch</name></expr></argument>, <argument pos:start="49:48" pos:end="49:48"><expr pos:start="49:48" pos:end="49:48"><literal type="number" pos:start="49:48" pos:end="49:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="53:13" pos:end="53:34"><expr pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:19">regs</name><index pos:start="53:20" pos:end="53:25">[<expr pos:start="53:21" pos:end="53:24"><name pos:start="53:21" pos:end="53:24">addr</name></expr>]</index></name> <operator pos:start="53:27" pos:end="53:27">=</operator> <name pos:start="53:29" pos:end="53:33">value</name></expr>;</expr_stmt>



            <comment type="block" pos:start="57:13" pos:end="57:23">/* hax.  */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:43"><expr pos:start="59:13" pos:end="59:42"><name pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:19">regs</name><index pos:start="59:20" pos:end="59:29">[<expr pos:start="59:21" pos:end="59:28"><name pos:start="59:21" pos:end="59:28">R_STATUS</name></expr>]</index></name> <operator pos:start="59:31" pos:end="59:32">|=</operator> <name pos:start="59:34" pos:end="59:42">STATUS_IE</name></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>



        <default pos:start="65:9" pos:end="65:16">default:</default>

            <expr_stmt pos:start="67:13" pos:end="67:70"><expr pos:start="67:13" pos:end="67:69"><call pos:start="67:13" pos:end="67:69"><name pos:start="67:13" pos:end="67:17">DUART</name><argument_list pos:start="67:18" pos:end="67:69">(<argument pos:start="67:19" pos:end="67:68"><expr pos:start="67:19" pos:end="67:68"><call pos:start="67:19" pos:end="67:68"><name pos:start="67:19" pos:end="67:24">printf</name><argument_list pos:start="67:25" pos:end="67:68">(<argument pos:start="67:26" pos:end="67:44"><expr pos:start="67:26" pos:end="67:44"><literal type="string" pos:start="67:26" pos:end="67:44">"%s addr=%x v=%x\n"</literal></expr></argument>, <argument pos:start="67:47" pos:end="67:54"><expr pos:start="67:47" pos:end="67:54"><name pos:start="67:47" pos:end="67:54">__func__</name></expr></argument>, <argument pos:start="67:57" pos:end="67:60"><expr pos:start="67:57" pos:end="67:60"><name pos:start="67:57" pos:end="67:60">addr</name></expr></argument>, <argument pos:start="67:63" pos:end="67:67"><expr pos:start="67:63" pos:end="67:67"><name pos:start="67:63" pos:end="67:67">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="69:13" pos:end="71:38"><if pos:start="69:13" pos:end="71:38">if <condition pos:start="69:16" pos:end="69:43">(<expr pos:start="69:17" pos:end="69:42"><name pos:start="69:17" pos:end="69:20">addr</name> <operator pos:start="69:22" pos:end="69:22">&lt;</operator> <call pos:start="69:24" pos:end="69:42"><name pos:start="69:24" pos:end="69:33">ARRAY_SIZE</name><argument_list pos:start="69:34" pos:end="69:42">(<argument pos:start="69:35" pos:end="69:41"><expr pos:start="69:35" pos:end="69:41"><name pos:start="69:35" pos:end="69:41"><name pos:start="69:35" pos:end="69:35">s</name><operator pos:start="69:36" pos:end="69:37">-&gt;</operator><name pos:start="69:38" pos:end="69:41">regs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:38"><block_content pos:start="71:17" pos:end="71:38">

                <expr_stmt pos:start="71:17" pos:end="71:38"><expr pos:start="71:17" pos:end="71:37"><name pos:start="71:17" pos:end="71:29"><name pos:start="71:17" pos:end="71:17">s</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:23">regs</name><index pos:start="71:24" pos:end="71:29">[<expr pos:start="71:25" pos:end="71:28"><name pos:start="71:25" pos:end="71:28">addr</name></expr>]</index></name> <operator pos:start="71:31" pos:end="71:31">=</operator> <name pos:start="71:33" pos:end="71:37">value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="77:5" pos:end="77:26"><expr pos:start="77:5" pos:end="77:25"><call pos:start="77:5" pos:end="77:25"><name pos:start="77:5" pos:end="77:22">uart_update_status</name><argument_list pos:start="77:23" pos:end="77:25">(<argument pos:start="77:24" pos:end="77:24"><expr pos:start="77:24" pos:end="77:24"><name pos:start="77:24" pos:end="77:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:23"><expr pos:start="79:5" pos:end="79:22"><call pos:start="79:5" pos:end="79:22"><name pos:start="79:5" pos:end="79:19">uart_update_irq</name><argument_list pos:start="79:20" pos:end="79:22">(<argument pos:start="79:21" pos:end="79:21"><expr pos:start="79:21" pos:end="79:21"><name pos:start="79:21" pos:end="79:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
