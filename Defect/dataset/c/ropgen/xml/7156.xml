<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7156.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">PCIDevice</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:38">qemu_pci_hot_add_nic</name><parameter_list pos:start="1:39" pos:end="5:60">(<parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:46">Monitor</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">mon</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:58"><decl pos:start="3:40" pos:end="3:58"><type pos:start="3:40" pos:end="3:58"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:49">char</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:58">devaddr</name></decl></parameter>,

                                       <parameter pos:start="5:40" pos:end="5:59"><decl pos:start="5:40" pos:end="5:59"><type pos:start="5:40" pos:end="5:59"><specifier pos:start="5:40" pos:end="5:44">const</specifier> <name pos:start="5:46" pos:end="5:49">char</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier></type><name pos:start="5:52" pos:end="5:59">opts_str</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="89:1">{<block_content pos:start="9:5" pos:end="87:66">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">QemuOpts</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">PCIBus</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:16">root</name> <init pos:start="13:18" pos:end="13:41">= <expr pos:start="13:20" pos:end="13:41"><call pos:start="13:20" pos:end="13:41"><name pos:start="13:20" pos:end="13:39">pci_find_primary_bus</name><argument_list pos:start="13:40" pos:end="13:41">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:10">PCIBus</name> <modifier pos:start="15:12" pos:end="15:12">*</modifier></type><name pos:start="15:13" pos:end="15:15">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>, <decl pos:start="17:14" pos:end="17:18"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:14" pos:end="17:18">devfn</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:14">(<expr pos:start="21:9" pos:end="21:13"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:13">root</name></expr>)</condition> <block pos:start="21:16" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:20">

        <expr_stmt pos:start="23:9" pos:end="25:71"><expr pos:start="23:9" pos:end="25:70"><call pos:start="23:9" pos:end="25:70"><name pos:start="23:9" pos:end="23:22">monitor_printf</name><argument_list pos:start="23:23" pos:end="25:70">(<argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">mon</name></expr></argument>, <argument pos:start="23:29" pos:end="25:69"><expr pos:start="23:29" pos:end="25:69"><literal type="string" pos:start="23:29" pos:end="23:71">"no primary PCI bus (if there are multiple"</literal>

                       <literal type="string" pos:start="25:24" pos:end="25:69">" PCI roots, you must use device_add instead)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:20">return <expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:51"><expr pos:start="33:5" pos:end="33:50"><name pos:start="33:5" pos:end="33:7">bus</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:50"><name pos:start="33:11" pos:end="33:27">pci_get_bus_devfn</name><argument_list pos:start="33:28" pos:end="33:50">(<argument pos:start="33:29" pos:end="33:34"><expr pos:start="33:29" pos:end="33:34"><operator pos:start="33:29" pos:end="33:29">&amp;</operator><name pos:start="33:30" pos:end="33:34">devfn</name></expr></argument>, <argument pos:start="33:37" pos:end="33:40"><expr pos:start="33:37" pos:end="33:40"><name pos:start="33:37" pos:end="33:40">root</name></expr></argument>, <argument pos:start="33:43" pos:end="33:49"><expr pos:start="33:43" pos:end="33:49"><name pos:start="33:43" pos:end="33:49">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:13">(<expr pos:start="35:9" pos:end="35:12"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:12">bus</name></expr>)</condition> <block pos:start="35:15" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:20">

        <expr_stmt pos:start="37:9" pos:end="37:72"><expr pos:start="37:9" pos:end="37:71"><call pos:start="37:9" pos:end="37:71"><name pos:start="37:9" pos:end="37:22">monitor_printf</name><argument_list pos:start="37:23" pos:end="37:71">(<argument pos:start="37:24" pos:end="37:26"><expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:26">mon</name></expr></argument>, <argument pos:start="37:29" pos:end="37:61"><expr pos:start="37:29" pos:end="37:61"><literal type="string" pos:start="37:29" pos:end="37:61">"Invalid PCI device address %s\n"</literal></expr></argument>, <argument pos:start="37:64" pos:end="37:70"><expr pos:start="37:64" pos:end="37:70"><name pos:start="37:64" pos:end="37:70">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:20">return <expr pos:start="39:16" pos:end="39:19"><name pos:start="39:16" pos:end="39:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:40">(<expr pos:start="43:9" pos:end="43:39"><operator pos:start="43:9" pos:end="43:9">!</operator><call pos:start="43:10" pos:end="43:39"><name pos:start="43:10" pos:end="43:29">qbus_is_hotpluggable</name><argument_list pos:start="43:30" pos:end="43:39">(<argument pos:start="43:31" pos:end="43:38"><expr pos:start="43:31" pos:end="43:38"><call pos:start="43:31" pos:end="43:38"><name pos:start="43:31" pos:end="43:33">BUS</name><argument_list pos:start="43:34" pos:end="43:38">(<argument pos:start="43:35" pos:end="43:37"><expr pos:start="43:35" pos:end="43:37"><name pos:start="43:35" pos:end="43:37">bus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:42" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:20">

        <expr_stmt pos:start="45:9" pos:end="45:65"><expr pos:start="45:9" pos:end="45:64"><call pos:start="45:9" pos:end="45:64"><name pos:start="45:9" pos:end="45:22">monitor_printf</name><argument_list pos:start="45:23" pos:end="45:64">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">mon</name></expr></argument>, <argument pos:start="45:29" pos:end="45:63"><expr pos:start="45:29" pos:end="45:63"><literal type="string" pos:start="45:29" pos:end="45:63">"PCI bus doesn't support hotplug\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:20">return <expr pos:start="47:16" pos:end="47:19"><name pos:start="47:16" pos:end="47:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:79"><expr pos:start="53:5" pos:end="53:78"><name pos:start="53:5" pos:end="53:8">opts</name> <operator pos:start="53:10" pos:end="53:10">=</operator> <call pos:start="53:12" pos:end="53:78"><name pos:start="53:12" pos:end="53:26">qemu_opts_parse</name><argument_list pos:start="53:27" pos:end="53:78">(<argument pos:start="53:28" pos:end="53:48"><expr pos:start="53:28" pos:end="53:48"><call pos:start="53:28" pos:end="53:48"><name pos:start="53:28" pos:end="53:41">qemu_find_opts</name><argument_list pos:start="53:42" pos:end="53:48">(<argument pos:start="53:43" pos:end="53:47"><expr pos:start="53:43" pos:end="53:47"><literal type="string" pos:start="53:43" pos:end="53:47">"net"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:51" pos:end="53:74"><expr pos:start="53:51" pos:end="53:74"><ternary pos:start="53:51" pos:end="53:74"><condition pos:start="53:51" pos:end="53:60"><expr pos:start="53:51" pos:end="53:58"><name pos:start="53:51" pos:end="53:58">opts_str</name></expr> ?</condition><then pos:start="53:62" pos:end="53:69"> <expr pos:start="53:62" pos:end="53:69"><name pos:start="53:62" pos:end="53:69">opts_str</name></expr> </then><else pos:start="53:71" pos:end="53:74">: <expr pos:start="53:73" pos:end="53:74"><literal type="string" pos:start="53:73" pos:end="53:74">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="53:77" pos:end="53:77"><expr pos:start="53:77" pos:end="53:77"><literal type="number" pos:start="53:77" pos:end="53:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:14">(<expr pos:start="55:9" pos:end="55:13"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:13">opts</name></expr>)</condition> <block pos:start="55:16" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:20">

        <return pos:start="57:9" pos:end="57:20">return <expr pos:start="57:16" pos:end="57:19"><name pos:start="57:16" pos:end="57:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:38"><expr pos:start="63:5" pos:end="63:37"><call pos:start="63:5" pos:end="63:37"><name pos:start="63:5" pos:end="63:16">qemu_opt_set</name><argument_list pos:start="63:17" pos:end="63:37">(<argument pos:start="63:18" pos:end="63:21"><expr pos:start="63:18" pos:end="63:21"><name pos:start="63:18" pos:end="63:21">opts</name></expr></argument>, <argument pos:start="63:24" pos:end="63:29"><expr pos:start="63:24" pos:end="63:29"><literal type="string" pos:start="63:24" pos:end="63:29">"type"</literal></expr></argument>, <argument pos:start="63:32" pos:end="63:36"><expr pos:start="63:32" pos:end="63:36"><literal type="string" pos:start="63:32" pos:end="63:36">"nic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:47"><expr pos:start="67:5" pos:end="67:46"><name pos:start="67:5" pos:end="67:7">ret</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:46"><name pos:start="67:11" pos:end="67:25">net_client_init</name><argument_list pos:start="67:26" pos:end="67:46">(<argument pos:start="67:27" pos:end="67:30"><expr pos:start="67:27" pos:end="67:30"><name pos:start="67:27" pos:end="67:30">opts</name></expr></argument>, <argument pos:start="67:33" pos:end="67:33"><expr pos:start="67:33" pos:end="67:33"><literal type="number" pos:start="67:33" pos:end="67:33">0</literal></expr></argument>, <argument pos:start="67:36" pos:end="67:45"><expr pos:start="67:36" pos:end="67:45"><operator pos:start="67:36" pos:end="67:36">&amp;</operator><name pos:start="67:37" pos:end="67:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="77:5"><if pos:start="69:5" pos:end="77:5">if <condition pos:start="69:8" pos:end="69:18">(<expr pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:17">local_err</name></expr>)</condition> <block pos:start="69:20" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:20">

        <expr_stmt pos:start="71:9" pos:end="71:37"><expr pos:start="71:9" pos:end="71:36"><call pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:25">qerror_report_err</name><argument_list pos:start="71:26" pos:end="71:36">(<argument pos:start="71:27" pos:end="71:35"><expr pos:start="71:27" pos:end="71:35"><name pos:start="71:27" pos:end="71:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:30"><expr pos:start="73:9" pos:end="73:29"><call pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:18">error_free</name><argument_list pos:start="73:19" pos:end="73:29">(<argument pos:start="73:20" pos:end="73:28"><expr pos:start="73:20" pos:end="73:28"><name pos:start="73:20" pos:end="73:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:20">return <expr pos:start="75:16" pos:end="75:19"><name pos:start="75:16" pos:end="75:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:30">(<expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:16">nd_table</name><index pos:start="79:17" pos:end="79:21">[<expr pos:start="79:18" pos:end="79:20"><name pos:start="79:18" pos:end="79:20">ret</name></expr>]</index></name><operator pos:start="79:22" pos:end="79:22">.</operator><name pos:start="79:23" pos:end="79:29">devaddr</name></expr>)</condition> <block pos:start="79:32" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:20">

        <expr_stmt pos:start="81:9" pos:end="81:62"><expr pos:start="81:9" pos:end="81:61"><call pos:start="81:9" pos:end="81:61"><name pos:start="81:9" pos:end="81:22">monitor_printf</name><argument_list pos:start="81:23" pos:end="81:61">(<argument pos:start="81:24" pos:end="81:26"><expr pos:start="81:24" pos:end="81:26"><name pos:start="81:24" pos:end="81:26">mon</name></expr></argument>, <argument pos:start="81:29" pos:end="81:60"><expr pos:start="81:29" pos:end="81:60"><literal type="string" pos:start="81:29" pos:end="81:60">"Parameter addr not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:20">return <expr pos:start="83:16" pos:end="83:19"><name pos:start="83:16" pos:end="83:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="87:5" pos:end="87:66">return <expr pos:start="87:12" pos:end="87:65"><call pos:start="87:12" pos:end="87:65"><name pos:start="87:12" pos:end="87:23">pci_nic_init</name><argument_list pos:start="87:24" pos:end="87:65">(<argument pos:start="87:25" pos:end="87:38"><expr pos:start="87:25" pos:end="87:38"><operator pos:start="87:25" pos:end="87:25">&amp;</operator><name pos:start="87:26" pos:end="87:38"><name pos:start="87:26" pos:end="87:33">nd_table</name><index pos:start="87:34" pos:end="87:38">[<expr pos:start="87:35" pos:end="87:37"><name pos:start="87:35" pos:end="87:37">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="87:41" pos:end="87:44"><expr pos:start="87:41" pos:end="87:44"><name pos:start="87:41" pos:end="87:44">root</name></expr></argument>, <argument pos:start="87:47" pos:end="87:55"><expr pos:start="87:47" pos:end="87:55"><literal type="string" pos:start="87:47" pos:end="87:55">"rtl8139"</literal></expr></argument>, <argument pos:start="87:58" pos:end="87:64"><expr pos:start="87:58" pos:end="87:64"><name pos:start="87:58" pos:end="87:64">devaddr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
