<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10009.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">write_elf64_load</name><parameter_list pos:start="1:28" pos:end="3:58">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:37">DumpState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:71"><decl pos:start="1:43" pos:end="1:71"><type pos:start="1:43" pos:end="1:71"><name pos:start="1:43" pos:end="1:55">MemoryMapping</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:71">memory_mapping</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:42">phdr_index</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:50">hwaddr</name></type> <name pos:start="3:52" pos:end="3:57">offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:13">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">Elf64_Phdr</name></type> <name pos:start="7:16" pos:end="7:19">phdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">endian</name> <init pos:start="11:16" pos:end="11:38">= <expr pos:start="11:18" pos:end="11:38"><name pos:start="11:18" pos:end="11:38"><name pos:start="11:18" pos:end="11:18">s</name><operator pos:start="11:19" pos:end="11:20">-&gt;</operator><name pos:start="11:21" pos:end="11:29">dump_info</name><operator pos:start="11:30" pos:end="11:30">.</operator><name pos:start="11:31" pos:end="11:38">d_endian</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:41"><expr pos:start="15:5" pos:end="15:40"><call pos:start="15:5" pos:end="15:40"><name pos:start="15:5" pos:end="15:10">memset</name><argument_list pos:start="15:11" pos:end="15:40">(<argument pos:start="15:12" pos:end="15:16"><expr pos:start="15:12" pos:end="15:16"><operator pos:start="15:12" pos:end="15:12">&amp;</operator><name pos:start="15:13" pos:end="15:16">phdr</name></expr></argument>, <argument pos:start="15:19" pos:end="15:19"><expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr></argument>, <argument pos:start="15:22" pos:end="15:39"><expr pos:start="15:22" pos:end="15:39"><sizeof pos:start="15:22" pos:end="15:39">sizeof<argument_list pos:start="15:28" pos:end="15:39">(<argument pos:start="15:29" pos:end="15:38"><expr pos:start="15:29" pos:end="15:38"><name pos:start="15:29" pos:end="15:38">Elf64_Phdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:59"><expr pos:start="17:5" pos:end="17:58"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:8">phdr</name><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:15">p_type</name></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <call pos:start="17:19" pos:end="17:58"><name pos:start="17:19" pos:end="17:41">cpu_convert_to_target32</name><argument_list pos:start="17:42" pos:end="17:58">(<argument pos:start="17:43" pos:end="17:49"><expr pos:start="17:43" pos:end="17:49"><name pos:start="17:43" pos:end="17:49">PT_LOAD</name></expr></argument>, <argument pos:start="17:52" pos:end="17:57"><expr pos:start="17:52" pos:end="17:57"><name pos:start="17:52" pos:end="17:57">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:60"><expr pos:start="19:5" pos:end="19:59"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:8">phdr</name><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:17">p_offset</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <call pos:start="19:21" pos:end="19:59"><name pos:start="19:21" pos:end="19:43">cpu_convert_to_target64</name><argument_list pos:start="19:44" pos:end="19:59">(<argument pos:start="19:45" pos:end="19:50"><expr pos:start="19:45" pos:end="19:50"><name pos:start="19:45" pos:end="19:50">offset</name></expr></argument>, <argument pos:start="19:53" pos:end="19:58"><expr pos:start="19:53" pos:end="19:58"><name pos:start="19:53" pos:end="19:58">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:78"><expr pos:start="21:5" pos:end="21:77"><name pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:8">phdr</name><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:16">p_paddr</name></name> <operator pos:start="21:18" pos:end="21:18">=</operator> <call pos:start="21:20" pos:end="21:77"><name pos:start="21:20" pos:end="21:42">cpu_convert_to_target64</name><argument_list pos:start="21:43" pos:end="21:77">(<argument pos:start="21:44" pos:end="21:68"><expr pos:start="21:44" pos:end="21:68"><name pos:start="21:44" pos:end="21:68"><name pos:start="21:44" pos:end="21:57">memory_mapping</name><operator pos:start="21:58" pos:end="21:59">-&gt;</operator><name pos:start="21:60" pos:end="21:68">phys_addr</name></name></expr></argument>, <argument pos:start="21:71" pos:end="21:76"><expr pos:start="21:71" pos:end="21:76"><name pos:start="21:71" pos:end="21:76">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="33:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:21">(<expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:14">offset</name> <operator pos:start="23:16" pos:end="23:17">==</operator> <operator pos:start="23:19" pos:end="23:19">-</operator><literal type="number" pos:start="23:20" pos:end="23:20">1</literal></expr>)</condition> <block pos:start="23:23" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:26">

        <comment type="block" pos:start="25:9" pos:end="25:74">/* When the memory is not stored into vmcore, offset will be -1 */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:26"><expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:12">phdr</name><operator pos:start="27:13" pos:end="27:13">.</operator><name pos:start="27:14" pos:end="27:21">p_filesz</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <literal type="number" pos:start="27:25" pos:end="27:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="33:5">else <block pos:start="29:12" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:80">

        <expr_stmt pos:start="31:9" pos:end="31:80"><expr pos:start="31:9" pos:end="31:79"><name pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:12">phdr</name><operator pos:start="31:13" pos:end="31:13">.</operator><name pos:start="31:14" pos:end="31:21">p_filesz</name></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <call pos:start="31:25" pos:end="31:79"><name pos:start="31:25" pos:end="31:47">cpu_convert_to_target64</name><argument_list pos:start="31:48" pos:end="31:79">(<argument pos:start="31:49" pos:end="31:70"><expr pos:start="31:49" pos:end="31:70"><name pos:start="31:49" pos:end="31:70"><name pos:start="31:49" pos:end="31:62">memory_mapping</name><operator pos:start="31:63" pos:end="31:64">-&gt;</operator><name pos:start="31:65" pos:end="31:70">length</name></name></expr></argument>, <argument pos:start="31:73" pos:end="31:78"><expr pos:start="31:73" pos:end="31:78"><name pos:start="31:73" pos:end="31:78">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:75"><expr pos:start="35:5" pos:end="35:74"><name pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:8">phdr</name><operator pos:start="35:9" pos:end="35:9">.</operator><name pos:start="35:10" pos:end="35:16">p_memsz</name></name> <operator pos:start="35:18" pos:end="35:18">=</operator> <call pos:start="35:20" pos:end="35:74"><name pos:start="35:20" pos:end="35:42">cpu_convert_to_target64</name><argument_list pos:start="35:43" pos:end="35:74">(<argument pos:start="35:44" pos:end="35:65"><expr pos:start="35:44" pos:end="35:65"><name pos:start="35:44" pos:end="35:65"><name pos:start="35:44" pos:end="35:57">memory_mapping</name><operator pos:start="35:58" pos:end="35:59">-&gt;</operator><name pos:start="35:60" pos:end="35:65">length</name></name></expr></argument>, <argument pos:start="35:68" pos:end="35:73"><expr pos:start="35:68" pos:end="35:73"><name pos:start="35:68" pos:end="35:73">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:78"><expr pos:start="37:5" pos:end="37:77"><name pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:8">phdr</name><operator pos:start="37:9" pos:end="37:9">.</operator><name pos:start="37:10" pos:end="37:16">p_vaddr</name></name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:77"><name pos:start="37:20" pos:end="37:42">cpu_convert_to_target64</name><argument_list pos:start="37:43" pos:end="37:77">(<argument pos:start="37:44" pos:end="37:68"><expr pos:start="37:44" pos:end="37:68"><name pos:start="37:44" pos:end="37:68"><name pos:start="37:44" pos:end="37:57">memory_mapping</name><operator pos:start="37:58" pos:end="37:59">-&gt;</operator><name pos:start="37:60" pos:end="37:68">virt_addr</name></name></expr></argument>, <argument pos:start="37:71" pos:end="37:76"><expr pos:start="37:71" pos:end="37:76"><name pos:start="37:71" pos:end="37:76">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:56"><expr pos:start="41:5" pos:end="41:55"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:55"><name pos:start="41:11" pos:end="41:25">fd_write_vmcore</name><argument_list pos:start="41:26" pos:end="41:55">(<argument pos:start="41:27" pos:end="41:31"><expr pos:start="41:27" pos:end="41:31"><operator pos:start="41:27" pos:end="41:27">&amp;</operator><name pos:start="41:28" pos:end="41:31">phdr</name></expr></argument>, <argument pos:start="41:34" pos:end="41:51"><expr pos:start="41:34" pos:end="41:51"><sizeof pos:start="41:34" pos:end="41:51">sizeof<argument_list pos:start="41:40" pos:end="41:51">(<argument pos:start="41:41" pos:end="41:50"><expr pos:start="41:41" pos:end="41:50"><name pos:start="41:41" pos:end="41:50">Elf64_Phdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="41:54" pos:end="41:54"><expr pos:start="41:54" pos:end="41:54"><name pos:start="41:54" pos:end="41:54">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:18">

        <expr_stmt pos:start="45:9" pos:end="45:71"><expr pos:start="45:9" pos:end="45:70"><call pos:start="45:9" pos:end="45:70"><name pos:start="45:9" pos:end="45:18">dump_error</name><argument_list pos:start="45:19" pos:end="45:70">(<argument pos:start="45:20" pos:end="45:20"><expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">s</name></expr></argument>, <argument pos:start="45:23" pos:end="45:69"><expr pos:start="45:23" pos:end="45:69"><literal type="string" pos:start="45:23" pos:end="45:69">"dump: failed to write program header table.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="53:5" pos:end="53:13">return <expr pos:start="53:12" pos:end="53:12"><literal type="number" pos:start="53:12" pos:end="53:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
