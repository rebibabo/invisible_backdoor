<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1104.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">configure_accelerator</name><parameter_list pos:start="1:33" pos:end="1:38">(<parameter pos:start="1:34" pos:end="1:37"><decl pos:start="1:34" pos:end="1:37"><type pos:start="1:34" pos:end="1:37"><name pos:start="1:34" pos:end="1:37">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:29">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">p</name> <init pos:start="5:19" pos:end="5:24">= <expr pos:start="5:21" pos:end="5:24"><name pos:start="5:21" pos:end="5:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:16"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:16">[<expr pos:start="7:14" pos:end="7:15"><literal type="number" pos:start="7:14" pos:end="7:15">10</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:25">accel_initalised</name> <init pos:start="11:27" pos:end="11:29">= <expr pos:start="11:29" pos:end="11:29"><literal type="number" pos:start="11:29" pos:end="11:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:20">init_failed</name> <init pos:start="13:22" pos:end="13:24">= <expr pos:start="13:24" pos:end="13:24"><literal type="number" pos:start="13:24" pos:end="13:24">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:51"><decl pos:start="17:5" pos:end="17:50"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">QemuOptsList</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:22">list</name> <init pos:start="17:24" pos:end="17:50">= <expr pos:start="17:26" pos:end="17:50"><call pos:start="17:26" pos:end="17:50"><name pos:start="17:26" pos:end="17:39">qemu_find_opts</name><argument_list pos:start="17:40" pos:end="17:50">(<argument pos:start="17:41" pos:end="17:49"><expr pos:start="17:41" pos:end="17:49"><literal type="string" pos:start="17:41" pos:end="17:49">"machine"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:35">(<expr pos:start="19:9" pos:end="19:34"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:34"><name pos:start="19:10" pos:end="19:21">QTAILQ_EMPTY</name><argument_list pos:start="19:22" pos:end="19:34">(<argument pos:start="19:23" pos:end="19:33"><expr pos:start="19:23" pos:end="19:33"><operator pos:start="19:23" pos:end="19:23">&amp;</operator><name pos:start="19:24" pos:end="19:33"><name pos:start="19:24" pos:end="19:27">list</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:33">head</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:37" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:61">

        <expr_stmt pos:start="21:9" pos:end="21:61"><expr pos:start="21:9" pos:end="21:60"><name pos:start="21:9" pos:end="21:9">p</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <call pos:start="21:13" pos:end="21:60"><name pos:start="21:13" pos:end="21:24">qemu_opt_get</name><argument_list pos:start="21:25" pos:end="21:60">(<argument pos:start="21:26" pos:end="21:50"><expr pos:start="21:26" pos:end="21:50"><call pos:start="21:26" pos:end="21:50"><name pos:start="21:26" pos:end="21:37">QTAILQ_FIRST</name><argument_list pos:start="21:38" pos:end="21:50">(<argument pos:start="21:39" pos:end="21:49"><expr pos:start="21:39" pos:end="21:49"><operator pos:start="21:39" pos:end="21:39">&amp;</operator><name pos:start="21:40" pos:end="21:49"><name pos:start="21:40" pos:end="21:43">list</name><operator pos:start="21:44" pos:end="21:45">-&gt;</operator><name pos:start="21:46" pos:end="21:49">head</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:53" pos:end="21:59"><expr pos:start="21:53" pos:end="21:59"><literal type="string" pos:start="21:53" pos:end="21:59">"accel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:9">p</name> <operator pos:start="27:11" pos:end="27:12">==</operator> <name pos:start="27:14" pos:end="27:17">NULL</name></expr>)</condition> <block pos:start="27:20" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:18">

        <comment type="block" pos:start="29:9" pos:end="29:48">/* Use the default "accelerator", tcg */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:18"><expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:9">p</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <literal type="string" pos:start="31:13" pos:end="31:17">"tcg"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="37:5" pos:end="93:5">while <condition pos:start="37:11" pos:end="37:43">(<expr pos:start="37:12" pos:end="37:42"><operator pos:start="37:12" pos:end="37:12">!</operator><name pos:start="37:13" pos:end="37:28">accel_initalised</name> <operator pos:start="37:30" pos:end="37:31">&amp;&amp;</operator> <operator pos:start="37:33" pos:end="37:33">*</operator><name pos:start="37:34" pos:end="37:34">p</name> <operator pos:start="37:36" pos:end="37:37">!=</operator> <literal type="char" pos:start="37:39" pos:end="37:42">'\0'</literal></expr>)</condition> <block pos:start="37:45" pos:end="93:5">{<block_content pos:start="39:9" pos:end="91:9">

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:22">(<expr pos:start="39:13" pos:end="39:21"><operator pos:start="39:13" pos:end="39:13">*</operator><name pos:start="39:14" pos:end="39:14">p</name> <operator pos:start="39:16" pos:end="39:17">==</operator> <literal type="char" pos:start="39:19" pos:end="39:21">':'</literal></expr>)</condition> <block pos:start="39:24" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:16">

            <expr_stmt pos:start="41:13" pos:end="41:16"><expr pos:start="41:13" pos:end="41:15"><name pos:start="41:13" pos:end="41:13">p</name><operator pos:start="41:14" pos:end="41:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:9">p</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:51"><name pos:start="45:13" pos:end="45:24">get_opt_name</name><argument_list pos:start="45:25" pos:end="45:51">(<argument pos:start="45:26" pos:end="45:28"><expr pos:start="45:26" pos:end="45:28"><name pos:start="45:26" pos:end="45:28">buf</name></expr></argument>, <argument pos:start="45:31" pos:end="45:42"><expr pos:start="45:31" pos:end="45:42"><sizeof pos:start="45:31" pos:end="45:42">sizeof <argument_list pos:start="45:38" pos:end="45:42">(<argument pos:start="45:39" pos:end="45:41"><expr pos:start="45:39" pos:end="45:41"><name pos:start="45:39" pos:end="45:41">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="45:45" pos:end="45:45"><expr pos:start="45:45" pos:end="45:45"><name pos:start="45:45" pos:end="45:45">p</name></expr></argument>, <argument pos:start="45:48" pos:end="45:50"><expr pos:start="45:48" pos:end="45:50"><literal type="char" pos:start="45:48" pos:end="45:50">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="47:9" pos:end="85:9">for <control pos:start="47:13" pos:end="47:52">(<init pos:start="47:14" pos:end="47:19"><expr pos:start="47:14" pos:end="47:18"><name pos:start="47:14" pos:end="47:14">i</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr>;</init> <condition pos:start="47:21" pos:end="47:47"><expr pos:start="47:21" pos:end="47:46"><name pos:start="47:21" pos:end="47:21">i</name> <operator pos:start="47:23" pos:end="47:23">&lt;</operator> <call pos:start="47:25" pos:end="47:46"><name pos:start="47:25" pos:end="47:34">ARRAY_SIZE</name><argument_list pos:start="47:35" pos:end="47:46">(<argument pos:start="47:36" pos:end="47:45"><expr pos:start="47:36" pos:end="47:45"><name pos:start="47:36" pos:end="47:45">accel_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="47:49" pos:end="47:51"><expr pos:start="47:49" pos:end="47:51"><name pos:start="47:49" pos:end="47:49">i</name><operator pos:start="47:50" pos:end="47:51">++</operator></expr></incr>)</control> <block pos:start="47:54" pos:end="85:9">{<block_content pos:start="49:13" pos:end="83:13">

            <if_stmt pos:start="49:13" pos:end="83:13"><if pos:start="49:13" pos:end="83:13">if <condition pos:start="49:16" pos:end="49:57">(<expr pos:start="49:17" pos:end="49:56"><call pos:start="49:17" pos:end="49:51"><name pos:start="49:17" pos:end="49:22">strcmp</name><argument_list pos:start="49:23" pos:end="49:51">(<argument pos:start="49:24" pos:end="49:45"><expr pos:start="49:24" pos:end="49:45"><name pos:start="49:24" pos:end="49:36"><name pos:start="49:24" pos:end="49:33">accel_list</name><index pos:start="49:34" pos:end="49:36">[<expr pos:start="49:35" pos:end="49:35"><name pos:start="49:35" pos:end="49:35">i</name></expr>]</index></name><operator pos:start="49:37" pos:end="49:37">.</operator><name pos:start="49:38" pos:end="49:45">opt_name</name></expr></argument>, <argument pos:start="49:48" pos:end="49:50"><expr pos:start="49:48" pos:end="49:50"><name pos:start="49:48" pos:end="49:50">buf</name></expr></argument>)</argument_list></call> <operator pos:start="49:53" pos:end="49:54">==</operator> <literal type="number" pos:start="49:56" pos:end="49:56">0</literal></expr>)</condition> <block pos:start="49:59" pos:end="83:13">{<block_content pos:start="51:17" pos:end="81:22">

                <expr_stmt pos:start="51:17" pos:end="51:43"><expr pos:start="51:17" pos:end="51:42"><name pos:start="51:17" pos:end="51:19">ret</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:35"><name pos:start="51:23" pos:end="51:32">accel_list</name><index pos:start="51:33" pos:end="51:35">[<expr pos:start="51:34" pos:end="51:34"><name pos:start="51:34" pos:end="51:34">i</name></expr>]</index></name><operator pos:start="51:36" pos:end="51:36">.</operator><call pos:start="51:37" pos:end="51:42"><name pos:start="51:37" pos:end="51:40">init</name><argument_list pos:start="51:41" pos:end="51:42">()</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="53:17" pos:end="79:17"><if pos:start="53:17" pos:end="73:17">if <condition pos:start="53:20" pos:end="53:28">(<expr pos:start="53:21" pos:end="53:27"><name pos:start="53:21" pos:end="53:23">ret</name> <operator pos:start="53:25" pos:end="53:25">&lt;</operator> <literal type="number" pos:start="53:27" pos:end="53:27">0</literal></expr>)</condition> <block pos:start="53:30" pos:end="73:17">{<block_content pos:start="55:21" pos:end="71:21">

                    <expr_stmt pos:start="55:21" pos:end="55:36"><expr pos:start="55:21" pos:end="55:35"><name pos:start="55:21" pos:end="55:31">init_failed</name> <operator pos:start="55:33" pos:end="55:33">=</operator> <literal type="number" pos:start="55:35" pos:end="55:35">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="57:21" pos:end="71:21"><if pos:start="57:21" pos:end="63:21">if <condition pos:start="57:24" pos:end="57:51">(<expr pos:start="57:25" pos:end="57:50"><operator pos:start="57:25" pos:end="57:25">!</operator><name pos:start="57:26" pos:end="57:38"><name pos:start="57:26" pos:end="57:35">accel_list</name><index pos:start="57:36" pos:end="57:38">[<expr pos:start="57:37" pos:end="57:37"><name pos:start="57:37" pos:end="57:37">i</name></expr>]</index></name><operator pos:start="57:39" pos:end="57:39">.</operator><call pos:start="57:40" pos:end="57:50"><name pos:start="57:40" pos:end="57:48">available</name><argument_list pos:start="57:49" pos:end="57:50">()</argument_list></call></expr>)</condition> <block pos:start="57:53" pos:end="63:21">{<block_content pos:start="59:25" pos:end="61:51">

                        <expr_stmt pos:start="59:25" pos:end="61:51"><expr pos:start="59:25" pos:end="61:50"><call pos:start="59:25" pos:end="61:50"><name pos:start="59:25" pos:end="59:30">printf</name><argument_list pos:start="59:31" pos:end="61:50">(<argument pos:start="59:32" pos:end="59:67"><expr pos:start="59:32" pos:end="59:67"><literal type="string" pos:start="59:32" pos:end="59:67">"%s not supported for this target\n"</literal></expr></argument>,

                               <argument pos:start="61:32" pos:end="61:49"><expr pos:start="61:32" pos:end="61:49"><name pos:start="61:32" pos:end="61:44"><name pos:start="61:32" pos:end="61:41">accel_list</name><index pos:start="61:42" pos:end="61:44">[<expr pos:start="61:43" pos:end="61:43"><name pos:start="61:43" pos:end="61:43">i</name></expr>]</index></name><operator pos:start="61:45" pos:end="61:45">.</operator><name pos:start="61:46" pos:end="61:49">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="63:23" pos:end="71:21">else <block pos:start="63:28" pos:end="71:21">{<block_content pos:start="65:25" pos:end="69:48">

                        <expr_stmt pos:start="65:25" pos:end="69:48"><expr pos:start="65:25" pos:end="69:47"><call pos:start="65:25" pos:end="69:47"><name pos:start="65:25" pos:end="65:31">fprintf</name><argument_list pos:start="65:32" pos:end="69:47">(<argument pos:start="65:33" pos:end="65:38"><expr pos:start="65:33" pos:end="65:38"><name pos:start="65:33" pos:end="65:38">stderr</name></expr></argument>, <argument pos:start="65:41" pos:end="65:71"><expr pos:start="65:41" pos:end="65:71"><literal type="string" pos:start="65:41" pos:end="65:71">"failed to initialize %s: %s\n"</literal></expr></argument>,

                                <argument pos:start="67:33" pos:end="67:50"><expr pos:start="67:33" pos:end="67:50"><name pos:start="67:33" pos:end="67:45"><name pos:start="67:33" pos:end="67:42">accel_list</name><index pos:start="67:43" pos:end="67:45">[<expr pos:start="67:44" pos:end="67:44"><name pos:start="67:44" pos:end="67:44">i</name></expr>]</index></name><operator pos:start="67:46" pos:end="67:46">.</operator><name pos:start="67:47" pos:end="67:50">name</name></expr></argument>,

                                <argument pos:start="69:33" pos:end="69:46"><expr pos:start="69:33" pos:end="69:46"><call pos:start="69:33" pos:end="69:46"><name pos:start="69:33" pos:end="69:40">strerror</name><argument_list pos:start="69:41" pos:end="69:46">(<argument pos:start="69:42" pos:end="69:45"><expr pos:start="69:42" pos:end="69:45"><operator pos:start="69:42" pos:end="69:42">-</operator><name pos:start="69:43" pos:end="69:45">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="73:19" pos:end="79:17">else <block pos:start="73:24" pos:end="79:17">{<block_content pos:start="75:21" pos:end="77:49">

                    <expr_stmt pos:start="75:21" pos:end="75:41"><expr pos:start="75:21" pos:end="75:40"><name pos:start="75:21" pos:end="75:36">accel_initalised</name> <operator pos:start="75:38" pos:end="75:38">=</operator> <literal type="number" pos:start="75:40" pos:end="75:40">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="77:21" pos:end="77:49"><expr pos:start="77:21" pos:end="77:48"><operator pos:start="77:21" pos:end="77:21">*</operator><operator pos:start="77:22" pos:end="77:22">(</operator><name pos:start="77:23" pos:end="77:35"><name pos:start="77:23" pos:end="77:32">accel_list</name><index pos:start="77:33" pos:end="77:35">[<expr pos:start="77:34" pos:end="77:34"><name pos:start="77:34" pos:end="77:34">i</name></expr>]</index></name><operator pos:start="77:36" pos:end="77:36">.</operator><name pos:start="77:37" pos:end="77:43">allowed</name><operator pos:start="77:44" pos:end="77:44">)</operator> <operator pos:start="77:46" pos:end="77:46">=</operator> <literal type="number" pos:start="77:48" pos:end="77:48">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="81:17" pos:end="81:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:40">(<expr pos:start="87:13" pos:end="87:39"><name pos:start="87:13" pos:end="87:13">i</name> <operator pos:start="87:15" pos:end="87:16">==</operator> <call pos:start="87:18" pos:end="87:39"><name pos:start="87:18" pos:end="87:27">ARRAY_SIZE</name><argument_list pos:start="87:28" pos:end="87:39">(<argument pos:start="87:29" pos:end="87:38"><expr pos:start="87:29" pos:end="87:38"><name pos:start="87:29" pos:end="87:38">accel_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:42" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:73">

            <expr_stmt pos:start="89:13" pos:end="89:73"><expr pos:start="89:13" pos:end="89:72"><call pos:start="89:13" pos:end="89:72"><name pos:start="89:13" pos:end="89:19">fprintf</name><argument_list pos:start="89:20" pos:end="89:72">(<argument pos:start="89:21" pos:end="89:26"><expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26">stderr</name></expr></argument>, <argument pos:start="89:29" pos:end="89:66"><expr pos:start="89:29" pos:end="89:66"><literal type="string" pos:start="89:29" pos:end="89:66">"\"%s\" accelerator does not exist.\n"</literal></expr></argument>, <argument pos:start="89:69" pos:end="89:71"><expr pos:start="89:69" pos:end="89:71"><name pos:start="89:69" pos:end="89:71">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:26">(<expr pos:start="97:9" pos:end="97:25"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:25">accel_initalised</name></expr>)</condition> <block pos:start="97:28" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:16">

        <expr_stmt pos:start="99:9" pos:end="99:51"><expr pos:start="99:9" pos:end="99:50"><call pos:start="99:9" pos:end="99:50"><name pos:start="99:9" pos:end="99:15">fprintf</name><argument_list pos:start="99:16" pos:end="99:50">(<argument pos:start="99:17" pos:end="99:22"><expr pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:22">stderr</name></expr></argument>, <argument pos:start="99:25" pos:end="99:49"><expr pos:start="99:25" pos:end="99:49"><literal type="string" pos:start="99:25" pos:end="99:49">"No accelerator found!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:16"><expr pos:start="101:9" pos:end="101:15"><call pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:12">exit</name><argument_list pos:start="101:13" pos:end="101:15">(<argument pos:start="101:14" pos:end="101:14"><expr pos:start="101:14" pos:end="101:14"><literal type="number" pos:start="101:14" pos:end="101:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:20">(<expr pos:start="107:9" pos:end="107:19"><name pos:start="107:9" pos:end="107:19">init_failed</name></expr>)</condition> <block pos:start="107:22" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:73">

        <expr_stmt pos:start="109:9" pos:end="109:73"><expr pos:start="109:9" pos:end="109:72"><call pos:start="109:9" pos:end="109:72"><name pos:start="109:9" pos:end="109:15">fprintf</name><argument_list pos:start="109:16" pos:end="109:72">(<argument pos:start="109:17" pos:end="109:22"><expr pos:start="109:17" pos:end="109:22"><name pos:start="109:17" pos:end="109:22">stderr</name></expr></argument>, <argument pos:start="109:25" pos:end="109:51"><expr pos:start="109:25" pos:end="109:51"><literal type="string" pos:start="109:25" pos:end="109:51">"Back to %s accelerator.\n"</literal></expr></argument>, <argument pos:start="109:54" pos:end="109:71"><expr pos:start="109:54" pos:end="109:71"><name pos:start="109:54" pos:end="109:66"><name pos:start="109:54" pos:end="109:63">accel_list</name><index pos:start="109:64" pos:end="109:66">[<expr pos:start="109:65" pos:end="109:65"><name pos:start="109:65" pos:end="109:65">i</name></expr>]</index></name><operator pos:start="109:67" pos:end="109:67">.</operator><name pos:start="109:68" pos:end="109:71">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="115:5" pos:end="115:29">return <expr pos:start="115:12" pos:end="115:28"><operator pos:start="115:12" pos:end="115:12">!</operator><name pos:start="115:13" pos:end="115:28">accel_initalised</name></expr>;</return>

</block_content>}</block></function>
</unit>
