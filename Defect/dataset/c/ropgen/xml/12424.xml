<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12424.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:35">sdhci_read_dataport</name><parameter_list pos:start="1:36" pos:end="1:65">(<parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:46">SDHCIState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:59">unsigned</name></type> <name pos:start="1:61" pos:end="1:64">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:17">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:18">value</name> <init pos:start="5:20" pos:end="5:22">= <expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:78">/* first check that a valid data exists in host controller input buffer */</comment>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:47">(<expr pos:start="13:9" pos:end="13:46"><operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:18"><name pos:start="13:10" pos:end="13:10">s</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:18">prnsts</name></name> <operator pos:start="13:20" pos:end="13:20">&amp;</operator> <name pos:start="13:22" pos:end="13:40">SDHC_DATA_AVAILABLE</name><operator pos:start="13:41" pos:end="13:41">)</operator> <operator pos:start="13:43" pos:end="13:44">==</operator> <literal type="number" pos:start="13:46" pos:end="13:46">0</literal></expr>)</condition> <block pos:start="13:49" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:17">

        <expr_stmt pos:start="15:9" pos:end="15:55"><expr pos:start="15:9" pos:end="15:54"><call pos:start="15:9" pos:end="15:54"><name pos:start="15:9" pos:end="15:16">ERRPRINT</name><argument_list pos:start="15:17" pos:end="15:54">(<argument pos:start="15:18" pos:end="15:53"><expr pos:start="15:18" pos:end="15:53"><literal type="string" pos:start="15:18" pos:end="15:53">"Trying to read from empty buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="23:5" pos:end="75:5">for <control pos:start="23:9" pos:end="23:30">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:25"><expr pos:start="23:17" pos:end="23:24"><name pos:start="23:17" pos:end="23:17">i</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <name pos:start="23:21" pos:end="23:24">size</name></expr>;</condition> <incr pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:27">i</name><operator pos:start="23:28" pos:end="23:29">++</operator></expr></incr>)</control> <block pos:start="23:32" pos:end="75:5">{<block_content pos:start="25:9" pos:end="73:9">

        <expr_stmt pos:start="25:9" pos:end="25:56"><expr pos:start="25:9" pos:end="25:55"><name pos:start="25:9" pos:end="25:13">value</name> <operator pos:start="25:15" pos:end="25:16">|=</operator> <name pos:start="25:18" pos:end="25:46"><name pos:start="25:18" pos:end="25:18">s</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:31">fifo_buffer</name><index pos:start="25:32" pos:end="25:46">[<expr pos:start="25:33" pos:end="25:45"><name pos:start="25:33" pos:end="25:45"><name pos:start="25:33" pos:end="25:33">s</name><operator pos:start="25:34" pos:end="25:35">-&gt;</operator><name pos:start="25:36" pos:end="25:45">data_count</name></name></expr>]</index></name> <operator pos:start="25:48" pos:end="25:49">&lt;&lt;</operator> <name pos:start="25:51" pos:end="25:51">i</name> <operator pos:start="25:53" pos:end="25:53">*</operator> <literal type="number" pos:start="25:55" pos:end="25:55">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:24"><expr pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:21">data_count</name></name><operator pos:start="27:22" pos:end="27:23">++</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="29:9" pos:end="29:76">/* check if we've read all valid data (blksize bytes) from buffer */</comment>

        <if_stmt pos:start="31:9" pos:end="73:9"><if pos:start="31:9" pos:end="73:9">if <condition pos:start="31:12" pos:end="31:53">(<expr pos:start="31:13" pos:end="31:52"><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:26"><name pos:start="31:14" pos:end="31:14">s</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:26">data_count</name></name><operator pos:start="31:27" pos:end="31:27">)</operator> <operator pos:start="31:29" pos:end="31:30">&gt;=</operator> <operator pos:start="31:32" pos:end="31:32">(</operator><name pos:start="31:33" pos:end="31:42"><name pos:start="31:33" pos:end="31:33">s</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:42">blksize</name></name> <operator pos:start="31:44" pos:end="31:44">&amp;</operator> <literal type="number" pos:start="31:46" pos:end="31:51">0x0fff</literal><operator pos:start="31:52" pos:end="31:52">)</operator></expr>)</condition> <block pos:start="31:55" pos:end="73:9">{<block_content pos:start="33:13" pos:end="71:18">

            <expr_stmt pos:start="33:13" pos:end="35:35"><expr pos:start="33:13" pos:end="35:34"><call pos:start="33:13" pos:end="35:34"><name pos:start="33:13" pos:end="33:21">DPRINT_L2</name><argument_list pos:start="33:22" pos:end="35:34">(<argument pos:start="33:23" pos:end="33:79"><expr pos:start="33:23" pos:end="33:79"><literal type="string" pos:start="33:23" pos:end="33:79">"All %u bytes of data have been read from input buffer\n"</literal></expr></argument>,

                    <argument pos:start="35:21" pos:end="35:33"><expr pos:start="35:21" pos:end="35:33"><name pos:start="35:21" pos:end="35:33"><name pos:start="35:21" pos:end="35:21">s</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:33">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:46"><expr pos:start="37:13" pos:end="37:45"><name pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:21">prnsts</name></name> <operator pos:start="37:23" pos:end="37:24">&amp;=</operator> <operator pos:start="37:26" pos:end="37:26">~</operator><name pos:start="37:27" pos:end="37:45">SDHC_DATA_AVAILABLE</name></expr>;</expr_stmt> <comment type="block" pos:start="37:48" pos:end="37:77">/* no more data in a buffer */</comment>

            <expr_stmt pos:start="39:13" pos:end="39:30"><expr pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:25">data_count</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <literal type="number" pos:start="39:29" pos:end="39:29">0</literal></expr>;</expr_stmt>  <comment type="block" pos:start="39:33" pos:end="39:79">/* next buff read must start at position [0] */</comment>



            <if_stmt pos:start="43:13" pos:end="47:13"><if pos:start="43:13" pos:end="47:13">if <condition pos:start="43:16" pos:end="43:49">(<expr pos:start="43:17" pos:end="43:48"><name pos:start="43:17" pos:end="43:25"><name pos:start="43:17" pos:end="43:17">s</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:25">trnmod</name></name> <operator pos:start="43:27" pos:end="43:27">&amp;</operator> <name pos:start="43:29" pos:end="43:48">SDHC_TRNS_BLK_CNT_EN</name></expr>)</condition> <block pos:start="43:51" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:28">

                <expr_stmt pos:start="45:17" pos:end="45:28"><expr pos:start="45:17" pos:end="45:27"><name pos:start="45:17" pos:end="45:25"><name pos:start="45:17" pos:end="45:17">s</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:25">blkcnt</name></name><operator pos:start="45:26" pos:end="45:27">--</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="51:13" pos:end="51:52">/* if that was the last block of data */</comment>

            <if_stmt pos:start="53:13" pos:end="69:13"><if pos:start="53:13" pos:end="65:13">if <condition pos:start="53:16" pos:end="61:54">(<expr pos:start="53:17" pos:end="61:53"><operator pos:start="53:17" pos:end="53:17">(</operator><name pos:start="53:18" pos:end="53:26"><name pos:start="53:18" pos:end="53:18">s</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:26">trnmod</name></name> <operator pos:start="53:28" pos:end="53:28">&amp;</operator> <name pos:start="53:30" pos:end="53:44">SDHC_TRNS_MULTI</name><operator pos:start="53:45" pos:end="53:45">)</operator> <operator pos:start="53:47" pos:end="53:48">==</operator> <literal type="number" pos:start="53:50" pos:end="53:50">0</literal> <operator pos:start="53:52" pos:end="53:53">||</operator>

                <operator pos:start="55:17" pos:end="55:17">(</operator><operator pos:start="55:18" pos:end="55:18">(</operator><name pos:start="55:19" pos:end="55:27"><name pos:start="55:19" pos:end="55:19">s</name><operator pos:start="55:20" pos:end="55:21">-&gt;</operator><name pos:start="55:22" pos:end="55:27">trnmod</name></name> <operator pos:start="55:29" pos:end="55:29">&amp;</operator> <name pos:start="55:31" pos:end="55:50">SDHC_TRNS_BLK_CNT_EN</name><operator pos:start="55:51" pos:end="55:51">)</operator> <operator pos:start="55:53" pos:end="55:54">&amp;&amp;</operator> <operator pos:start="55:56" pos:end="55:56">(</operator><name pos:start="55:57" pos:end="55:65"><name pos:start="55:57" pos:end="55:57">s</name><operator pos:start="55:58" pos:end="55:59">-&gt;</operator><name pos:start="55:60" pos:end="55:65">blkcnt</name></name> <operator pos:start="55:67" pos:end="55:68">==</operator> <literal type="number" pos:start="55:70" pos:end="55:70">0</literal><operator pos:start="55:71" pos:end="55:71">)</operator><operator pos:start="55:72" pos:end="55:72">)</operator> <operator pos:start="55:74" pos:end="55:75">||</operator>

                 <comment type="block" pos:start="57:18" pos:end="57:42">/* stop at gap request */</comment>

                <operator pos:start="59:17" pos:end="59:17">(</operator><name pos:start="59:18" pos:end="59:33"><name pos:start="59:18" pos:end="59:18">s</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:33">stopped_state</name></name> <operator pos:start="59:35" pos:end="59:36">==</operator> <name pos:start="59:38" pos:end="59:50">sdhc_gap_read</name> <operator pos:start="59:52" pos:end="59:53">&amp;&amp;</operator>

                 <operator pos:start="61:18" pos:end="61:18">!</operator><operator pos:start="61:19" pos:end="61:19">(</operator><name pos:start="61:20" pos:end="61:28"><name pos:start="61:20" pos:end="61:20">s</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:28">prnsts</name></name> <operator pos:start="61:30" pos:end="61:30">&amp;</operator> <name pos:start="61:32" pos:end="61:51">SDHC_DAT_LINE_ACTIVE</name><operator pos:start="61:52" pos:end="61:52">)</operator><operator pos:start="61:53" pos:end="61:53">)</operator></expr>)</condition> <block pos:start="61:56" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:38">

                <expr_stmt pos:start="63:17" pos:end="63:38"><expr pos:start="63:17" pos:end="63:37"><call pos:start="63:17" pos:end="63:37"><name pos:start="63:17" pos:end="63:34">sdhci_end_transfer</name><argument_list pos:start="63:35" pos:end="63:37">(<argument pos:start="63:36" pos:end="63:36"><expr pos:start="63:36" pos:end="63:36"><name pos:start="63:36" pos:end="63:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="65:15" pos:end="69:13">else <block pos:start="65:20" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:46"> <comment type="block" pos:start="65:22" pos:end="65:76">/* if there are more data, read next block from card */</comment>

                <expr_stmt pos:start="67:17" pos:end="67:46"><expr pos:start="67:17" pos:end="67:45"><call pos:start="67:17" pos:end="67:45"><name pos:start="67:17" pos:end="67:42">sdhci_read_block_from_card</name><argument_list pos:start="67:43" pos:end="67:45">(<argument pos:start="67:44" pos:end="67:44"><expr pos:start="67:44" pos:end="67:44"><name pos:start="67:44" pos:end="67:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="79:5" pos:end="79:17">return <expr pos:start="79:12" pos:end="79:16"><name pos:start="79:12" pos:end="79:16">value</name></expr>;</return>

</block_content>}</block></function>
</unit>
