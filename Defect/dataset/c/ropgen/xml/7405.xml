<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7405.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">curl_multi_check_completion</name><parameter_list pos:start="1:40" pos:end="1:57">(<parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:53">BDRVCURLState</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:27">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:21">msgs_in_queue</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="11:23">/* Try to find done transfers, so we can free the easy

     * handle again. */</comment>

    <do pos:start="13:5" pos:end="91:27">do <block pos:start="13:8" pos:end="91:5">{<block_content pos:start="15:9" pos:end="89:9">

        <decl_stmt pos:start="15:9" pos:end="15:21"><decl pos:start="15:9" pos:end="15:20"><type pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:15">CURLMsg</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:20">msg</name></decl>;</decl_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:61"><expr pos:start="17:9" pos:end="17:60"><name pos:start="17:9" pos:end="17:11">msg</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:60"><name pos:start="17:15" pos:end="17:34">curl_multi_info_read</name><argument_list pos:start="17:35" pos:end="17:60">(<argument pos:start="17:36" pos:end="17:43"><expr pos:start="17:36" pos:end="17:43"><name pos:start="17:36" pos:end="17:43"><name pos:start="17:36" pos:end="17:36">s</name><operator pos:start="17:37" pos:end="17:38">-&gt;</operator><name pos:start="17:39" pos:end="17:43">multi</name></name></expr></argument>, <argument pos:start="17:46" pos:end="17:59"><expr pos:start="17:46" pos:end="17:59"><operator pos:start="17:46" pos:end="17:46">&amp;</operator><name pos:start="17:47" pos:end="17:59">msgs_in_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="21:9" pos:end="23:18"><if pos:start="21:9" pos:end="23:18">if <condition pos:start="21:12" pos:end="21:17">(<expr pos:start="21:13" pos:end="21:16"><operator pos:start="21:13" pos:end="21:13">!</operator><name pos:start="21:14" pos:end="21:16">msg</name></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:18"><block_content pos:start="23:13" pos:end="23:18">

            <break pos:start="23:13" pos:end="23:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="25:9" pos:end="27:18"><if pos:start="25:9" pos:end="27:18">if <condition pos:start="25:12" pos:end="25:37">(<expr pos:start="25:13" pos:end="25:36"><name pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:15">msg</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:20">msg</name></name> <operator pos:start="25:22" pos:end="25:23">==</operator> <name pos:start="25:25" pos:end="25:36">CURLMSG_NONE</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:18"><block_content pos:start="27:13" pos:end="27:18">

            <break pos:start="27:13" pos:end="27:18">break;</break></block_content></block></if></if_stmt>



        <switch pos:start="31:9" pos:end="89:9">switch <condition pos:start="31:16" pos:end="31:25">(<expr pos:start="31:17" pos:end="31:24"><name pos:start="31:17" pos:end="31:24"><name pos:start="31:17" pos:end="31:19">msg</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:24">msg</name></name></expr>)</condition> <block pos:start="31:27" pos:end="89:9">{<block_content pos:start="33:13" pos:end="87:22">

            <case pos:start="33:13" pos:end="33:30">case <expr pos:start="33:18" pos:end="33:29"><name pos:start="33:18" pos:end="33:29">CURLMSG_DONE</name></expr>:</case>

            <block pos:start="35:13" pos:end="81:13">{<block_content pos:start="37:17" pos:end="79:22">

                <decl_stmt pos:start="37:17" pos:end="37:40"><decl pos:start="37:17" pos:end="37:39"><type pos:start="37:17" pos:end="37:27"><name pos:start="37:17" pos:end="37:25">CURLState</name> <modifier pos:start="37:27" pos:end="37:27">*</modifier></type><name pos:start="37:28" pos:end="37:32">state</name> <init pos:start="37:34" pos:end="37:39">= <expr pos:start="37:36" pos:end="37:39"><name pos:start="37:36" pos:end="37:39">NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="39:17" pos:end="41:51"><expr pos:start="39:17" pos:end="41:50"><call pos:start="39:17" pos:end="41:50"><name pos:start="39:17" pos:end="39:33">curl_easy_getinfo</name><argument_list pos:start="39:34" pos:end="41:50">(<argument pos:start="39:35" pos:end="39:50"><expr pos:start="39:35" pos:end="39:50"><name pos:start="39:35" pos:end="39:50"><name pos:start="39:35" pos:end="39:37">msg</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:50">easy_handle</name></name></expr></argument>, <argument pos:start="39:53" pos:end="39:68"><expr pos:start="39:53" pos:end="39:68"><name pos:start="39:53" pos:end="39:68">CURLINFO_PRIVATE</name></expr></argument>,

                                  <argument pos:start="41:35" pos:end="41:49"><expr pos:start="41:35" pos:end="41:49"><operator pos:start="41:35" pos:end="41:35">(</operator><name pos:start="41:36" pos:end="41:39">char</name> <operator pos:start="41:41" pos:end="41:41">*</operator><operator pos:start="41:42" pos:end="41:42">*</operator><operator pos:start="41:43" pos:end="41:43">)</operator><operator pos:start="41:44" pos:end="41:44">&amp;</operator><name pos:start="41:45" pos:end="41:49">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="45:17" pos:end="45:80">/* ACBs for successful messages get completed in curl_read_cb */</comment>

                <if_stmt pos:start="47:17" pos:end="73:17"><if pos:start="47:17" pos:end="73:17">if <condition pos:start="47:20" pos:end="47:49">(<expr pos:start="47:21" pos:end="47:48"><name pos:start="47:21" pos:end="47:36"><name pos:start="47:21" pos:end="47:23">msg</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:29">data</name><operator pos:start="47:30" pos:end="47:30">.</operator><name pos:start="47:31" pos:end="47:36">result</name></name> <operator pos:start="47:38" pos:end="47:39">!=</operator> <name pos:start="47:41" pos:end="47:48">CURLE_OK</name></expr>)</condition> <block pos:start="47:51" pos:end="73:17">{<block_content pos:start="49:21" pos:end="71:21">

                    <decl_stmt pos:start="49:21" pos:end="49:26"><decl pos:start="49:21" pos:end="49:25"><type pos:start="49:21" pos:end="49:23"><name pos:start="49:21" pos:end="49:23">int</name></type> <name pos:start="49:25" pos:end="49:25">i</name></decl>;</decl_stmt>

                    <for pos:start="51:21" pos:end="71:21">for <control pos:start="51:25" pos:end="51:54">(<init pos:start="51:26" pos:end="51:31"><expr pos:start="51:26" pos:end="51:30"><name pos:start="51:26" pos:end="51:26">i</name> <operator pos:start="51:28" pos:end="51:28">=</operator> <literal type="number" pos:start="51:30" pos:end="51:30">0</literal></expr>;</init> <condition pos:start="51:33" pos:end="51:49"><expr pos:start="51:33" pos:end="51:48"><name pos:start="51:33" pos:end="51:33">i</name> <operator pos:start="51:35" pos:end="51:35">&lt;</operator> <name pos:start="51:37" pos:end="51:48">CURL_NUM_ACB</name></expr>;</condition> <incr pos:start="51:51" pos:end="51:53"><expr pos:start="51:51" pos:end="51:53"><name pos:start="51:51" pos:end="51:51">i</name><operator pos:start="51:52" pos:end="51:53">++</operator></expr></incr>)</control> <block pos:start="51:56" pos:end="71:21">{<block_content pos:start="53:25" pos:end="69:45">

                        <decl_stmt pos:start="53:25" pos:end="53:55"><decl pos:start="53:25" pos:end="53:54"><type pos:start="53:25" pos:end="53:35"><name pos:start="53:25" pos:end="53:33">CURLAIOCB</name> <modifier pos:start="53:35" pos:end="53:35">*</modifier></type><name pos:start="53:36" pos:end="53:38">acb</name> <init pos:start="53:40" pos:end="53:54">= <expr pos:start="53:42" pos:end="53:54"><name pos:start="53:42" pos:end="53:54"><name pos:start="53:42" pos:end="53:46">state</name><operator pos:start="53:47" pos:end="53:48">-&gt;</operator><name pos:start="53:49" pos:end="53:51">acb</name><index pos:start="53:52" pos:end="53:54">[<expr pos:start="53:53" pos:end="53:53"><name pos:start="53:53" pos:end="53:53">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



                        <if_stmt pos:start="57:25" pos:end="61:25"><if pos:start="57:25" pos:end="61:25">if <condition pos:start="57:28" pos:end="57:40">(<expr pos:start="57:29" pos:end="57:39"><name pos:start="57:29" pos:end="57:31">acb</name> <operator pos:start="57:33" pos:end="57:34">==</operator> <name pos:start="57:36" pos:end="57:39">NULL</name></expr>)</condition> <block pos:start="57:42" pos:end="61:25">{<block_content pos:start="59:29" pos:end="59:37">

                            <continue pos:start="59:29" pos:end="59:37">continue;</continue>

                        </block_content>}</block></if></if_stmt>



                        <expr_stmt pos:start="65:25" pos:end="65:65"><expr pos:start="65:25" pos:end="65:64"><call pos:start="65:25" pos:end="65:64"><name pos:start="65:25" pos:end="65:38"><name pos:start="65:25" pos:end="65:27">acb</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:35">common</name><operator pos:start="65:36" pos:end="65:36">.</operator><name pos:start="65:37" pos:end="65:38">cb</name></name><argument_list pos:start="65:39" pos:end="65:64">(<argument pos:start="65:40" pos:end="65:57"><expr pos:start="65:40" pos:end="65:57"><name pos:start="65:40" pos:end="65:57"><name pos:start="65:40" pos:end="65:42">acb</name><operator pos:start="65:43" pos:end="65:44">-&gt;</operator><name pos:start="65:45" pos:end="65:50">common</name><operator pos:start="65:51" pos:end="65:51">.</operator><name pos:start="65:52" pos:end="65:57">opaque</name></name></expr></argument>, <argument pos:start="65:60" pos:end="65:63"><expr pos:start="65:60" pos:end="65:63"><operator pos:start="65:60" pos:end="65:60">-</operator><name pos:start="65:61" pos:end="65:63">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="67:25" pos:end="67:46"><expr pos:start="67:25" pos:end="67:45"><call pos:start="67:25" pos:end="67:45"><name pos:start="67:25" pos:end="67:40">qemu_aio_release</name><argument_list pos:start="67:41" pos:end="67:45">(<argument pos:start="67:42" pos:end="67:44"><expr pos:start="67:42" pos:end="67:44"><name pos:start="67:42" pos:end="67:44">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="69:25" pos:end="69:45"><expr pos:start="69:25" pos:end="69:44"><name pos:start="69:25" pos:end="69:37"><name pos:start="69:25" pos:end="69:29">state</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:34">acb</name><index pos:start="69:35" pos:end="69:37">[<expr pos:start="69:36" pos:end="69:36"><name pos:start="69:36" pos:end="69:36">i</name></expr>]</index></name> <operator pos:start="69:39" pos:end="69:39">=</operator> <name pos:start="69:41" pos:end="69:44">NULL</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="77:17" pos:end="77:40"><expr pos:start="77:17" pos:end="77:39"><call pos:start="77:17" pos:end="77:39"><name pos:start="77:17" pos:end="77:32">curl_clean_state</name><argument_list pos:start="77:33" pos:end="77:39">(<argument pos:start="77:34" pos:end="77:38"><expr pos:start="77:34" pos:end="77:38"><name pos:start="77:34" pos:end="77:38">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="79:17" pos:end="79:22">break;</break>

            </block_content>}</block>

            <default pos:start="83:13" pos:end="83:20">default:</default>

                <expr_stmt pos:start="85:17" pos:end="85:34"><expr pos:start="85:17" pos:end="85:33"><name pos:start="85:17" pos:end="85:29">msgs_in_queue</name> <operator pos:start="85:31" pos:end="85:31">=</operator> <literal type="number" pos:start="85:33" pos:end="85:33">0</literal></expr>;</expr_stmt>

                <break pos:start="87:17" pos:end="87:22">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block> while<condition pos:start="91:12" pos:end="91:26">(<expr pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:25">msgs_in_queue</name></expr>)</condition>;</do>

</block_content>}</block></function>
</unit>
