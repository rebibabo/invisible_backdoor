<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19973.c" pos:tabs="8"><function pos:start="1:1" pos:end="314:1"><type pos:start="1:1" pos:end="1:21"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">BlockBackend</name> <modifier pos:start="1:21" pos:end="1:21">*</modifier></type><name pos:start="1:22" pos:end="1:34">blockdev_init</name><parameter_list pos:start="1:35" pos:end="3:48">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:45">char</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">file</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:58">QDict</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:67">bs_opts</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:47"><decl pos:start="3:36" pos:end="3:47"><type pos:start="3:36" pos:end="3:47"><name pos:start="3:36" pos:end="3:40">Error</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier><modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:47">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="314:1">{<block_content pos:start="7:5" pos:end="312:16">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">bdrv_flags</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">on_read_error</name></decl>, <decl pos:start="11:24" pos:end="11:37"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:24" pos:end="11:37">on_write_error</name></decl>;</decl_stmt>


    <decl_stmt pos:start="14:5" pos:end="14:22"><decl pos:start="14:5" pos:end="14:21"><type pos:start="14:5" pos:end="14:18"><name pos:start="14:5" pos:end="14:16">BlockBackend</name> <modifier pos:start="14:18" pos:end="14:18">*</modifier></type><name pos:start="14:19" pos:end="14:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="16:5" pos:end="16:25"><decl pos:start="16:5" pos:end="16:24"><type pos:start="16:5" pos:end="16:22"><name pos:start="16:5" pos:end="16:20">BlockDriverState</name> <modifier pos:start="16:22" pos:end="16:22">*</modifier></type><name pos:start="16:23" pos:end="16:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="18:5" pos:end="18:23"><decl pos:start="18:5" pos:end="18:22"><type pos:start="18:5" pos:end="18:18"><name pos:start="18:5" pos:end="18:18">ThrottleConfig</name></type> <name pos:start="18:20" pos:end="18:22">cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="20:5" pos:end="20:21"><decl pos:start="20:5" pos:end="20:20"><type pos:start="20:5" pos:end="20:7"><name pos:start="20:5" pos:end="20:7">int</name></type> <name pos:start="20:9" pos:end="20:16">snapshot</name> <init pos:start="20:18" pos:end="20:20">= <expr pos:start="20:20" pos:end="20:20"><literal type="number" pos:start="20:20" pos:end="20:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="22:5" pos:end="22:24"><decl pos:start="22:5" pos:end="22:23"><type pos:start="22:5" pos:end="22:11"><name pos:start="22:5" pos:end="22:9">Error</name> <modifier pos:start="22:11" pos:end="22:11">*</modifier></type><name pos:start="22:12" pos:end="22:16">error</name> <init pos:start="22:18" pos:end="22:23">= <expr pos:start="22:20" pos:end="22:23"><name pos:start="22:20" pos:end="22:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="24:5" pos:end="24:19"><decl pos:start="24:5" pos:end="24:18"><type pos:start="24:5" pos:end="24:14"><name pos:start="24:5" pos:end="24:12">QemuOpts</name> <modifier pos:start="24:14" pos:end="24:14">*</modifier></type><name pos:start="24:15" pos:end="24:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="26:5" pos:end="26:19"><decl pos:start="26:5" pos:end="26:18"><type pos:start="26:5" pos:end="26:16"><specifier pos:start="26:5" pos:end="26:9">const</specifier> <name pos:start="26:11" pos:end="26:14">char</name> <modifier pos:start="26:16" pos:end="26:16">*</modifier></type><name pos:start="26:17" pos:end="26:18">id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="28:5" pos:end="28:34"><decl pos:start="28:5" pos:end="28:33"><type pos:start="28:5" pos:end="28:8"><name pos:start="28:5" pos:end="28:8">bool</name></type> <name pos:start="28:10" pos:end="28:33">has_driver_specific_opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="30:5" pos:end="32:43"><decl pos:start="30:5" pos:end="32:42"><type pos:start="30:5" pos:end="30:31"><name pos:start="30:5" pos:end="30:31">BlockdevDetectZeroesOptions</name></type> <name pos:start="30:33" pos:end="30:45">detect_zeroes</name> <init pos:start="30:47" pos:end="32:42">=

        <expr pos:start="32:9" pos:end="32:42"><name pos:start="32:9" pos:end="32:42">BLOCKDEV_DETECT_ZEROES_OPTIONS_OFF</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="34:5" pos:end="34:40"><decl pos:start="34:5" pos:end="34:39"><type pos:start="34:5" pos:end="34:16"><specifier pos:start="34:5" pos:end="34:9">const</specifier> <name pos:start="34:11" pos:end="34:14">char</name> <modifier pos:start="34:16" pos:end="34:16">*</modifier></type><name pos:start="34:17" pos:end="34:32">throttling_group</name> <init pos:start="34:34" pos:end="34:39">= <expr pos:start="34:36" pos:end="34:39"><name pos:start="34:36" pos:end="34:39">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="38:5" pos:end="40:56">/* Check common options by copying from bs_opts to opts, all other options

     * stay in bs_opts for processing by bdrv_open(). */</comment>

    <expr_stmt pos:start="42:5" pos:end="42:42"><expr pos:start="42:5" pos:end="42:41"><name pos:start="42:5" pos:end="42:6">id</name> <operator pos:start="42:8" pos:end="42:8">=</operator> <call pos:start="42:10" pos:end="42:41"><name pos:start="42:10" pos:end="42:26">qdict_get_try_str</name><argument_list pos:start="42:27" pos:end="42:41">(<argument pos:start="42:28" pos:end="42:34"><expr pos:start="42:28" pos:end="42:34"><name pos:start="42:28" pos:end="42:34">bs_opts</name></expr></argument>, <argument pos:start="42:37" pos:end="42:40"><expr pos:start="42:37" pos:end="42:40"><literal type="string" pos:start="42:37" pos:end="42:40">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="44:5" pos:end="44:68"><expr pos:start="44:5" pos:end="44:67"><name pos:start="44:5" pos:end="44:8">opts</name> <operator pos:start="44:10" pos:end="44:10">=</operator> <call pos:start="44:12" pos:end="44:67"><name pos:start="44:12" pos:end="44:27">qemu_opts_create</name><argument_list pos:start="44:28" pos:end="44:67">(<argument pos:start="44:29" pos:end="44:51"><expr pos:start="44:29" pos:end="44:51"><operator pos:start="44:29" pos:end="44:29">&amp;</operator><name pos:start="44:30" pos:end="44:51">qemu_common_drive_opts</name></expr></argument>, <argument pos:start="44:54" pos:end="44:55"><expr pos:start="44:54" pos:end="44:55"><name pos:start="44:54" pos:end="44:55">id</name></expr></argument>, <argument pos:start="44:58" pos:end="44:58"><expr pos:start="44:58" pos:end="44:58"><literal type="number" pos:start="44:58" pos:end="44:58">1</literal></expr></argument>, <argument pos:start="44:61" pos:end="44:66"><expr pos:start="44:61" pos:end="44:66"><operator pos:start="44:61" pos:end="44:61">&amp;</operator><name pos:start="44:62" pos:end="44:66">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="46:5" pos:end="52:5"><if pos:start="46:5" pos:end="52:5">if <condition pos:start="46:8" pos:end="46:14">(<expr pos:start="46:9" pos:end="46:13"><name pos:start="46:9" pos:end="46:13">error</name></expr>)</condition> <block pos:start="46:16" pos:end="52:5">{<block_content pos:start="48:9" pos:end="50:25">

        <expr_stmt pos:start="48:9" pos:end="48:37"><expr pos:start="48:9" pos:end="48:36"><call pos:start="48:9" pos:end="48:36"><name pos:start="48:9" pos:end="48:23">error_propagate</name><argument_list pos:start="48:24" pos:end="48:36">(<argument pos:start="48:25" pos:end="48:28"><expr pos:start="48:25" pos:end="48:28"><name pos:start="48:25" pos:end="48:28">errp</name></expr></argument>, <argument pos:start="48:31" pos:end="48:35"><expr pos:start="48:31" pos:end="48:35"><name pos:start="48:31" pos:end="48:35">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="50:9" pos:end="50:25">goto <name pos:start="50:14" pos:end="50:24">err_no_opts</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="56:5" pos:end="56:50"><expr pos:start="56:5" pos:end="56:49"><call pos:start="56:5" pos:end="56:49"><name pos:start="56:5" pos:end="56:26">qemu_opts_absorb_qdict</name><argument_list pos:start="56:27" pos:end="56:49">(<argument pos:start="56:28" pos:end="56:31"><expr pos:start="56:28" pos:end="56:31"><name pos:start="56:28" pos:end="56:31">opts</name></expr></argument>, <argument pos:start="56:34" pos:end="56:40"><expr pos:start="56:34" pos:end="56:40"><name pos:start="56:34" pos:end="56:40">bs_opts</name></expr></argument>, <argument pos:start="56:43" pos:end="56:48"><expr pos:start="56:43" pos:end="56:48"><operator pos:start="56:43" pos:end="56:43">&amp;</operator><name pos:start="56:44" pos:end="56:48">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="58:5" pos:end="64:5"><if pos:start="58:5" pos:end="64:5">if <condition pos:start="58:8" pos:end="58:14">(<expr pos:start="58:9" pos:end="58:13"><name pos:start="58:9" pos:end="58:13">error</name></expr>)</condition> <block pos:start="58:16" pos:end="64:5">{<block_content pos:start="60:9" pos:end="62:23">

        <expr_stmt pos:start="60:9" pos:end="60:37"><expr pos:start="60:9" pos:end="60:36"><call pos:start="60:9" pos:end="60:36"><name pos:start="60:9" pos:end="60:23">error_propagate</name><argument_list pos:start="60:24" pos:end="60:36">(<argument pos:start="60:25" pos:end="60:28"><expr pos:start="60:25" pos:end="60:28"><name pos:start="60:25" pos:end="60:28">errp</name></expr></argument>, <argument pos:start="60:31" pos:end="60:35"><expr pos:start="60:31" pos:end="60:35"><name pos:start="60:31" pos:end="60:35">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="62:9" pos:end="62:23">goto <name pos:start="62:14" pos:end="62:22">early_err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="68:5" pos:end="72:5"><if pos:start="68:5" pos:end="72:5">if <condition pos:start="68:8" pos:end="68:11">(<expr pos:start="68:9" pos:end="68:10"><name pos:start="68:9" pos:end="68:10">id</name></expr>)</condition> <block pos:start="68:13" pos:end="72:5">{<block_content pos:start="70:9" pos:end="70:33">

        <expr_stmt pos:start="70:9" pos:end="70:33"><expr pos:start="70:9" pos:end="70:32"><call pos:start="70:9" pos:end="70:32"><name pos:start="70:9" pos:end="70:17">qdict_del</name><argument_list pos:start="70:18" pos:end="70:32">(<argument pos:start="70:19" pos:end="70:25"><expr pos:start="70:19" pos:end="70:25"><name pos:start="70:19" pos:end="70:25">bs_opts</name></expr></argument>, <argument pos:start="70:28" pos:end="70:31"><expr pos:start="70:28" pos:end="70:31"><literal type="string" pos:start="70:28" pos:end="70:31">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="76:5" pos:end="76:53"><expr pos:start="76:5" pos:end="76:52"><name pos:start="76:5" pos:end="76:28">has_driver_specific_opts</name> <operator pos:start="76:30" pos:end="76:30">=</operator> <operator pos:start="76:32" pos:end="76:32">!</operator><operator pos:start="76:33" pos:end="76:33">!</operator><call pos:start="76:34" pos:end="76:52"><name pos:start="76:34" pos:end="76:43">qdict_size</name><argument_list pos:start="76:44" pos:end="76:52">(<argument pos:start="76:45" pos:end="76:51"><expr pos:start="76:45" pos:end="76:51"><name pos:start="76:45" pos:end="76:51">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="80:5" pos:end="80:28">/* extract parameters */</comment>

    <expr_stmt pos:start="82:5" pos:end="82:54"><expr pos:start="82:5" pos:end="82:53"><name pos:start="82:5" pos:end="82:12">snapshot</name> <operator pos:start="82:14" pos:end="82:14">=</operator> <call pos:start="82:16" pos:end="82:53"><name pos:start="82:16" pos:end="82:32">qemu_opt_get_bool</name><argument_list pos:start="82:33" pos:end="82:53">(<argument pos:start="82:34" pos:end="82:37"><expr pos:start="82:34" pos:end="82:37"><name pos:start="82:34" pos:end="82:37">opts</name></expr></argument>, <argument pos:start="82:40" pos:end="82:49"><expr pos:start="82:40" pos:end="82:49"><literal type="string" pos:start="82:40" pos:end="82:49">"snapshot"</literal></expr></argument>, <argument pos:start="82:52" pos:end="82:52"><expr pos:start="82:52" pos:end="82:52"><literal type="number" pos:start="82:52" pos:end="82:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="86:5" pos:end="86:77"><expr pos:start="86:5" pos:end="86:76"><name pos:start="86:5" pos:end="86:19">account_invalid</name> <operator pos:start="86:21" pos:end="86:21">=</operator> <call pos:start="86:23" pos:end="86:76"><name pos:start="86:23" pos:end="86:39">qemu_opt_get_bool</name><argument_list pos:start="86:40" pos:end="86:76">(<argument pos:start="86:41" pos:end="86:44"><expr pos:start="86:41" pos:end="86:44"><name pos:start="86:41" pos:end="86:44">opts</name></expr></argument>, <argument pos:start="86:47" pos:end="86:69"><expr pos:start="86:47" pos:end="86:69"><literal type="string" pos:start="86:47" pos:end="86:69">"stats-account-invalid"</literal></expr></argument>, <argument pos:start="86:72" pos:end="86:75"><expr pos:start="86:72" pos:end="86:75"><name pos:start="86:72" pos:end="86:75">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="88:5" pos:end="88:75"><expr pos:start="88:5" pos:end="88:74"><name pos:start="88:5" pos:end="88:18">account_failed</name> <operator pos:start="88:20" pos:end="88:20">=</operator> <call pos:start="88:22" pos:end="88:74"><name pos:start="88:22" pos:end="88:38">qemu_opt_get_bool</name><argument_list pos:start="88:39" pos:end="88:74">(<argument pos:start="88:40" pos:end="88:43"><expr pos:start="88:40" pos:end="88:43"><name pos:start="88:40" pos:end="88:43">opts</name></expr></argument>, <argument pos:start="88:46" pos:end="88:67"><expr pos:start="88:46" pos:end="88:67"><literal type="string" pos:start="88:46" pos:end="88:67">"stats-account-failed"</literal></expr></argument>, <argument pos:start="88:70" pos:end="88:73"><expr pos:start="88:70" pos:end="88:73"><name pos:start="88:70" pos:end="88:73">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="92:5" pos:end="94:60"><expr pos:start="92:5" pos:end="94:59"><call pos:start="92:5" pos:end="94:59"><name pos:start="92:5" pos:end="92:35">extract_common_blockdev_options</name><argument_list pos:start="92:36" pos:end="94:59">(<argument pos:start="92:37" pos:end="92:40"><expr pos:start="92:37" pos:end="92:40"><name pos:start="92:37" pos:end="92:40">opts</name></expr></argument>, <argument pos:start="92:43" pos:end="92:53"><expr pos:start="92:43" pos:end="92:53"><operator pos:start="92:43" pos:end="92:43">&amp;</operator><name pos:start="92:44" pos:end="92:53">bdrv_flags</name></expr></argument>, <argument pos:start="92:56" pos:end="92:72"><expr pos:start="92:56" pos:end="92:72"><operator pos:start="92:56" pos:end="92:56">&amp;</operator><name pos:start="92:57" pos:end="92:72">throttling_group</name></expr></argument>, <argument pos:start="92:75" pos:end="92:78"><expr pos:start="92:75" pos:end="92:78"><operator pos:start="92:75" pos:end="92:75">&amp;</operator><name pos:start="92:76" pos:end="92:78">cfg</name></expr></argument>,

                                    <argument pos:start="94:37" pos:end="94:50"><expr pos:start="94:37" pos:end="94:50"><operator pos:start="94:37" pos:end="94:37">&amp;</operator><name pos:start="94:38" pos:end="94:50">detect_zeroes</name></expr></argument>, <argument pos:start="94:53" pos:end="94:58"><expr pos:start="94:53" pos:end="94:58"><operator pos:start="94:53" pos:end="94:53">&amp;</operator><name pos:start="94:54" pos:end="94:58">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="96:5" pos:end="102:5"><if pos:start="96:5" pos:end="102:5">if <condition pos:start="96:8" pos:end="96:14">(<expr pos:start="96:9" pos:end="96:13"><name pos:start="96:9" pos:end="96:13">error</name></expr>)</condition> <block pos:start="96:16" pos:end="102:5">{<block_content pos:start="98:9" pos:end="100:23">

        <expr_stmt pos:start="98:9" pos:end="98:37"><expr pos:start="98:9" pos:end="98:36"><call pos:start="98:9" pos:end="98:36"><name pos:start="98:9" pos:end="98:23">error_propagate</name><argument_list pos:start="98:24" pos:end="98:36">(<argument pos:start="98:25" pos:end="98:28"><expr pos:start="98:25" pos:end="98:28"><name pos:start="98:25" pos:end="98:28">errp</name></expr></argument>, <argument pos:start="98:31" pos:end="98:35"><expr pos:start="98:31" pos:end="98:35"><name pos:start="98:31" pos:end="98:35">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="100:9" pos:end="100:23">goto <name pos:start="100:14" pos:end="100:22">early_err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="106:5" pos:end="132:5"><if pos:start="106:5" pos:end="132:5">if <condition pos:start="106:8" pos:end="106:53">(<expr pos:start="106:9" pos:end="106:52"><operator pos:start="106:9" pos:end="106:9">(</operator><name pos:start="106:10" pos:end="106:12">buf</name> <operator pos:start="106:14" pos:end="106:14">=</operator> <call pos:start="106:16" pos:end="106:43"><name pos:start="106:16" pos:end="106:27">qemu_opt_get</name><argument_list pos:start="106:28" pos:end="106:43">(<argument pos:start="106:29" pos:end="106:32"><expr pos:start="106:29" pos:end="106:32"><name pos:start="106:29" pos:end="106:32">opts</name></expr></argument>, <argument pos:start="106:35" pos:end="106:42"><expr pos:start="106:35" pos:end="106:42"><literal type="string" pos:start="106:35" pos:end="106:42">"format"</literal></expr></argument>)</argument_list></call><operator pos:start="106:44" pos:end="106:44">)</operator> <operator pos:start="106:46" pos:end="106:47">!=</operator> <name pos:start="106:49" pos:end="106:52">NULL</name></expr>)</condition> <block pos:start="106:55" pos:end="132:5">{<block_content pos:start="108:9" pos:end="130:60">

        <if_stmt pos:start="108:9" pos:end="118:9"><if pos:start="108:9" pos:end="118:9">if <condition pos:start="108:12" pos:end="108:32">(<expr pos:start="108:13" pos:end="108:31"><call pos:start="108:13" pos:end="108:31"><name pos:start="108:13" pos:end="108:26">is_help_option</name><argument_list pos:start="108:27" pos:end="108:31">(<argument pos:start="108:28" pos:end="108:30"><expr pos:start="108:28" pos:end="108:30"><name pos:start="108:28" pos:end="108:30">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="108:34" pos:end="118:9">{<block_content pos:start="110:13" pos:end="116:27">

            <expr_stmt pos:start="110:13" pos:end="110:47"><expr pos:start="110:13" pos:end="110:46"><call pos:start="110:13" pos:end="110:46"><name pos:start="110:13" pos:end="110:24">error_printf</name><argument_list pos:start="110:25" pos:end="110:46">(<argument pos:start="110:26" pos:end="110:45"><expr pos:start="110:26" pos:end="110:45"><literal type="string" pos:start="110:26" pos:end="110:45">"Supported formats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="112:13" pos:end="112:57"><expr pos:start="112:13" pos:end="112:56"><call pos:start="112:13" pos:end="112:56"><name pos:start="112:13" pos:end="112:31">bdrv_iterate_format</name><argument_list pos:start="112:32" pos:end="112:56">(<argument pos:start="112:33" pos:end="112:49"><expr pos:start="112:33" pos:end="112:49"><name pos:start="112:33" pos:end="112:49">bdrv_format_print</name></expr></argument>, <argument pos:start="112:52" pos:end="112:55"><expr pos:start="112:52" pos:end="112:55"><name pos:start="112:52" pos:end="112:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="114:13" pos:end="114:31"><expr pos:start="114:13" pos:end="114:30"><call pos:start="114:13" pos:end="114:30"><name pos:start="114:13" pos:end="114:24">error_printf</name><argument_list pos:start="114:25" pos:end="114:30">(<argument pos:start="114:26" pos:end="114:29"><expr pos:start="114:26" pos:end="114:29"><literal type="string" pos:start="114:26" pos:end="114:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="116:13" pos:end="116:27">goto <name pos:start="116:18" pos:end="116:26">early_err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="122:9" pos:end="128:9"><if pos:start="122:9" pos:end="128:9">if <condition pos:start="122:12" pos:end="122:44">(<expr pos:start="122:13" pos:end="122:43"><call pos:start="122:13" pos:end="122:43"><name pos:start="122:13" pos:end="122:24">qdict_haskey</name><argument_list pos:start="122:25" pos:end="122:43">(<argument pos:start="122:26" pos:end="122:32"><expr pos:start="122:26" pos:end="122:32"><name pos:start="122:26" pos:end="122:32">bs_opts</name></expr></argument>, <argument pos:start="122:35" pos:end="122:42"><expr pos:start="122:35" pos:end="122:42"><literal type="string" pos:start="122:35" pos:end="122:42">"driver"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="122:46" pos:end="128:9">{<block_content pos:start="124:13" pos:end="126:27">

            <expr_stmt pos:start="124:13" pos:end="124:74"><expr pos:start="124:13" pos:end="124:73"><call pos:start="124:13" pos:end="124:73"><name pos:start="124:13" pos:end="124:22">error_setg</name><argument_list pos:start="124:23" pos:end="124:73">(<argument pos:start="124:24" pos:end="124:27"><expr pos:start="124:24" pos:end="124:27"><name pos:start="124:24" pos:end="124:27">errp</name></expr></argument>, <argument pos:start="124:30" pos:end="124:72"><expr pos:start="124:30" pos:end="124:72"><literal type="string" pos:start="124:30" pos:end="124:72">"Cannot specify both 'driver' and 'format'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="126:13" pos:end="126:27">goto <name pos:start="126:18" pos:end="126:26">early_err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="130:9" pos:end="130:60"><expr pos:start="130:9" pos:end="130:59"><call pos:start="130:9" pos:end="130:59"><name pos:start="130:9" pos:end="130:17">qdict_put</name><argument_list pos:start="130:18" pos:end="130:59">(<argument pos:start="130:19" pos:end="130:25"><expr pos:start="130:19" pos:end="130:25"><name pos:start="130:19" pos:end="130:25">bs_opts</name></expr></argument>, <argument pos:start="130:28" pos:end="130:35"><expr pos:start="130:28" pos:end="130:35"><literal type="string" pos:start="130:28" pos:end="130:35">"driver"</literal></expr></argument>, <argument pos:start="130:38" pos:end="130:58"><expr pos:start="130:38" pos:end="130:58"><call pos:start="130:38" pos:end="130:58"><name pos:start="130:38" pos:end="130:53">qstring_from_str</name><argument_list pos:start="130:54" pos:end="130:58">(<argument pos:start="130:55" pos:end="130:57"><expr pos:start="130:55" pos:end="130:57"><name pos:start="130:55" pos:end="130:57">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="136:5" pos:end="136:46"><expr pos:start="136:5" pos:end="136:45"><name pos:start="136:5" pos:end="136:18">on_write_error</name> <operator pos:start="136:20" pos:end="136:20">=</operator> <name pos:start="136:22" pos:end="136:45">BLOCKDEV_ON_ERROR_ENOSPC</name></expr>;</expr_stmt>

    <if_stmt pos:start="138:5" pos:end="150:5"><if pos:start="138:5" pos:end="150:5">if <condition pos:start="138:8" pos:end="138:53">(<expr pos:start="138:9" pos:end="138:52"><operator pos:start="138:9" pos:end="138:9">(</operator><name pos:start="138:10" pos:end="138:12">buf</name> <operator pos:start="138:14" pos:end="138:14">=</operator> <call pos:start="138:16" pos:end="138:43"><name pos:start="138:16" pos:end="138:27">qemu_opt_get</name><argument_list pos:start="138:28" pos:end="138:43">(<argument pos:start="138:29" pos:end="138:32"><expr pos:start="138:29" pos:end="138:32"><name pos:start="138:29" pos:end="138:32">opts</name></expr></argument>, <argument pos:start="138:35" pos:end="138:42"><expr pos:start="138:35" pos:end="138:42"><literal type="string" pos:start="138:35" pos:end="138:42">"werror"</literal></expr></argument>)</argument_list></call><operator pos:start="138:44" pos:end="138:44">)</operator> <operator pos:start="138:46" pos:end="138:47">!=</operator> <name pos:start="138:49" pos:end="138:52">NULL</name></expr>)</condition> <block pos:start="138:55" pos:end="150:5">{<block_content pos:start="140:9" pos:end="148:9">

        <expr_stmt pos:start="140:9" pos:end="140:66"><expr pos:start="140:9" pos:end="140:65"><name pos:start="140:9" pos:end="140:22">on_write_error</name> <operator pos:start="140:24" pos:end="140:24">=</operator> <call pos:start="140:26" pos:end="140:65"><name pos:start="140:26" pos:end="140:49">parse_block_error_action</name><argument_list pos:start="140:50" pos:end="140:65">(<argument pos:start="140:51" pos:end="140:53"><expr pos:start="140:51" pos:end="140:53"><name pos:start="140:51" pos:end="140:53">buf</name></expr></argument>, <argument pos:start="140:56" pos:end="140:56"><expr pos:start="140:56" pos:end="140:56"><literal type="number" pos:start="140:56" pos:end="140:56">0</literal></expr></argument>, <argument pos:start="140:59" pos:end="140:64"><expr pos:start="140:59" pos:end="140:64"><operator pos:start="140:59" pos:end="140:59">&amp;</operator><name pos:start="140:60" pos:end="140:64">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="142:9" pos:end="148:9"><if pos:start="142:9" pos:end="148:9">if <condition pos:start="142:12" pos:end="142:18">(<expr pos:start="142:13" pos:end="142:17"><name pos:start="142:13" pos:end="142:17">error</name></expr>)</condition> <block pos:start="142:20" pos:end="148:9">{<block_content pos:start="144:13" pos:end="146:27">

            <expr_stmt pos:start="144:13" pos:end="144:41"><expr pos:start="144:13" pos:end="144:40"><call pos:start="144:13" pos:end="144:40"><name pos:start="144:13" pos:end="144:27">error_propagate</name><argument_list pos:start="144:28" pos:end="144:40">(<argument pos:start="144:29" pos:end="144:32"><expr pos:start="144:29" pos:end="144:32"><name pos:start="144:29" pos:end="144:32">errp</name></expr></argument>, <argument pos:start="144:35" pos:end="144:39"><expr pos:start="144:35" pos:end="144:39"><name pos:start="144:35" pos:end="144:39">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="146:13" pos:end="146:27">goto <name pos:start="146:18" pos:end="146:26">early_err</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="154:5" pos:end="154:45"><expr pos:start="154:5" pos:end="154:44"><name pos:start="154:5" pos:end="154:17">on_read_error</name> <operator pos:start="154:19" pos:end="154:19">=</operator> <name pos:start="154:21" pos:end="154:44">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    <if_stmt pos:start="156:5" pos:end="168:5"><if pos:start="156:5" pos:end="168:5">if <condition pos:start="156:8" pos:end="156:53">(<expr pos:start="156:9" pos:end="156:52"><operator pos:start="156:9" pos:end="156:9">(</operator><name pos:start="156:10" pos:end="156:12">buf</name> <operator pos:start="156:14" pos:end="156:14">=</operator> <call pos:start="156:16" pos:end="156:43"><name pos:start="156:16" pos:end="156:27">qemu_opt_get</name><argument_list pos:start="156:28" pos:end="156:43">(<argument pos:start="156:29" pos:end="156:32"><expr pos:start="156:29" pos:end="156:32"><name pos:start="156:29" pos:end="156:32">opts</name></expr></argument>, <argument pos:start="156:35" pos:end="156:42"><expr pos:start="156:35" pos:end="156:42"><literal type="string" pos:start="156:35" pos:end="156:42">"rerror"</literal></expr></argument>)</argument_list></call><operator pos:start="156:44" pos:end="156:44">)</operator> <operator pos:start="156:46" pos:end="156:47">!=</operator> <name pos:start="156:49" pos:end="156:52">NULL</name></expr>)</condition> <block pos:start="156:55" pos:end="168:5">{<block_content pos:start="158:9" pos:end="166:9">

        <expr_stmt pos:start="158:9" pos:end="158:65"><expr pos:start="158:9" pos:end="158:64"><name pos:start="158:9" pos:end="158:21">on_read_error</name> <operator pos:start="158:23" pos:end="158:23">=</operator> <call pos:start="158:25" pos:end="158:64"><name pos:start="158:25" pos:end="158:48">parse_block_error_action</name><argument_list pos:start="158:49" pos:end="158:64">(<argument pos:start="158:50" pos:end="158:52"><expr pos:start="158:50" pos:end="158:52"><name pos:start="158:50" pos:end="158:52">buf</name></expr></argument>, <argument pos:start="158:55" pos:end="158:55"><expr pos:start="158:55" pos:end="158:55"><literal type="number" pos:start="158:55" pos:end="158:55">1</literal></expr></argument>, <argument pos:start="158:58" pos:end="158:63"><expr pos:start="158:58" pos:end="158:63"><operator pos:start="158:58" pos:end="158:58">&amp;</operator><name pos:start="158:59" pos:end="158:63">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="160:9" pos:end="166:9"><if pos:start="160:9" pos:end="166:9">if <condition pos:start="160:12" pos:end="160:18">(<expr pos:start="160:13" pos:end="160:17"><name pos:start="160:13" pos:end="160:17">error</name></expr>)</condition> <block pos:start="160:20" pos:end="166:9">{<block_content pos:start="162:13" pos:end="164:27">

            <expr_stmt pos:start="162:13" pos:end="162:41"><expr pos:start="162:13" pos:end="162:40"><call pos:start="162:13" pos:end="162:40"><name pos:start="162:13" pos:end="162:27">error_propagate</name><argument_list pos:start="162:28" pos:end="162:40">(<argument pos:start="162:29" pos:end="162:32"><expr pos:start="162:29" pos:end="162:32"><name pos:start="162:29" pos:end="162:32">errp</name></expr></argument>, <argument pos:start="162:35" pos:end="162:39"><expr pos:start="162:35" pos:end="162:39"><name pos:start="162:35" pos:end="162:39">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="164:13" pos:end="164:27">goto <name pos:start="164:18" pos:end="164:26">early_err</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="172:5" pos:end="180:5"><if pos:start="172:5" pos:end="180:5">if <condition pos:start="172:8" pos:end="172:17">(<expr pos:start="172:9" pos:end="172:16"><name pos:start="172:9" pos:end="172:16">snapshot</name></expr>)</condition> <block pos:start="172:19" pos:end="180:5">{<block_content pos:start="176:9" pos:end="178:72">

        <comment type="block" pos:start="174:9" pos:end="174:51">/* always use cache=unsafe with snapshot */</comment>

        <expr_stmt pos:start="176:9" pos:end="176:41"><expr pos:start="176:9" pos:end="176:40"><name pos:start="176:9" pos:end="176:18">bdrv_flags</name> <operator pos:start="176:20" pos:end="176:21">&amp;=</operator> <operator pos:start="176:23" pos:end="176:23">~</operator><name pos:start="176:24" pos:end="176:40">BDRV_O_CACHE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="178:9" pos:end="178:72"><expr pos:start="178:9" pos:end="178:71"><name pos:start="178:9" pos:end="178:18">bdrv_flags</name> <operator pos:start="178:20" pos:end="178:21">|=</operator> <operator pos:start="178:23" pos:end="178:23">(</operator><name pos:start="178:24" pos:end="178:38">BDRV_O_SNAPSHOT</name><operator pos:start="178:39" pos:end="178:39">|</operator><name pos:start="178:40" pos:end="178:54">BDRV_O_CACHE_WB</name><operator pos:start="178:55" pos:end="178:55">|</operator><name pos:start="178:56" pos:end="178:70">BDRV_O_NO_FLUSH</name><operator pos:start="178:71" pos:end="178:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="184:5" pos:end="184:14">/* init */</comment>

    <if_stmt pos:start="186:5" pos:end="288:5"><if pos:start="186:5" pos:end="232:5">if <condition pos:start="186:8" pos:end="186:55">(<expr pos:start="186:9" pos:end="186:54"><operator pos:start="186:9" pos:end="186:9">(</operator><operator pos:start="186:10" pos:end="186:10">!</operator><name pos:start="186:11" pos:end="186:14">file</name> <operator pos:start="186:16" pos:end="186:17">||</operator> <operator pos:start="186:19" pos:end="186:19">!</operator><operator pos:start="186:20" pos:end="186:20">*</operator><name pos:start="186:21" pos:end="186:24">file</name><operator pos:start="186:25" pos:end="186:25">)</operator> <operator pos:start="186:27" pos:end="186:28">&amp;&amp;</operator> <operator pos:start="186:30" pos:end="186:30">!</operator><name pos:start="186:31" pos:end="186:54">has_driver_specific_opts</name></expr>)</condition> <block pos:start="186:57" pos:end="232:5">{<block_content pos:start="188:9" pos:end="230:25">

        <decl_stmt pos:start="188:9" pos:end="188:38"><decl pos:start="188:9" pos:end="188:37"><type pos:start="188:9" pos:end="188:31"><name pos:start="188:9" pos:end="188:29">BlockBackendRootState</name> <modifier pos:start="188:31" pos:end="188:31">*</modifier></type><name pos:start="188:32" pos:end="188:37">blk_rs</name></decl>;</decl_stmt>



        <expr_stmt pos:start="192:9" pos:end="192:48"><expr pos:start="192:9" pos:end="192:47"><name pos:start="192:9" pos:end="192:11">blk</name> <operator pos:start="192:13" pos:end="192:13">=</operator> <call pos:start="192:15" pos:end="192:47"><name pos:start="192:15" pos:end="192:21">blk_new</name><argument_list pos:start="192:22" pos:end="192:47">(<argument pos:start="192:23" pos:end="192:40"><expr pos:start="192:23" pos:end="192:40"><call pos:start="192:23" pos:end="192:40"><name pos:start="192:23" pos:end="192:34">qemu_opts_id</name><argument_list pos:start="192:35" pos:end="192:40">(<argument pos:start="192:36" pos:end="192:39"><expr pos:start="192:36" pos:end="192:39"><name pos:start="192:36" pos:end="192:39">opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="192:43" pos:end="192:46"><expr pos:start="192:43" pos:end="192:46"><name pos:start="192:43" pos:end="192:46">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="194:9" pos:end="198:9"><if pos:start="194:9" pos:end="198:9">if <condition pos:start="194:12" pos:end="194:17">(<expr pos:start="194:13" pos:end="194:16"><operator pos:start="194:13" pos:end="194:13">!</operator><name pos:start="194:14" pos:end="194:16">blk</name></expr>)</condition> <block pos:start="194:19" pos:end="198:9">{<block_content pos:start="196:13" pos:end="196:27">

            <goto pos:start="196:13" pos:end="196:27">goto <name pos:start="196:18" pos:end="196:26">early_err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="202:9" pos:end="202:41"><expr pos:start="202:9" pos:end="202:40"><name pos:start="202:9" pos:end="202:14">blk_rs</name> <operator pos:start="202:16" pos:end="202:16">=</operator> <call pos:start="202:18" pos:end="202:40"><name pos:start="202:18" pos:end="202:35">blk_get_root_state</name><argument_list pos:start="202:36" pos:end="202:40">(<argument pos:start="202:37" pos:end="202:39"><expr pos:start="202:37" pos:end="202:39"><name pos:start="202:37" pos:end="202:39">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="204:9" pos:end="204:43"><expr pos:start="204:9" pos:end="204:42"><name pos:start="204:9" pos:end="204:26"><name pos:start="204:9" pos:end="204:14">blk_rs</name><operator pos:start="204:15" pos:end="204:16">-&gt;</operator><name pos:start="204:17" pos:end="204:26">open_flags</name></name>    <operator pos:start="204:31" pos:end="204:31">=</operator> <name pos:start="204:33" pos:end="204:42">bdrv_flags</name></expr>;</expr_stmt>

        <expr_stmt pos:start="206:9" pos:end="206:60"><expr pos:start="206:9" pos:end="206:59"><name pos:start="206:9" pos:end="206:25"><name pos:start="206:9" pos:end="206:14">blk_rs</name><operator pos:start="206:15" pos:end="206:16">-&gt;</operator><name pos:start="206:17" pos:end="206:25">read_only</name></name>     <operator pos:start="206:31" pos:end="206:31">=</operator> <operator pos:start="206:33" pos:end="206:33">!</operator><operator pos:start="206:34" pos:end="206:34">(</operator><name pos:start="206:35" pos:end="206:44">bdrv_flags</name> <operator pos:start="206:46" pos:end="206:46">&amp;</operator> <name pos:start="206:48" pos:end="206:58">BDRV_O_RDWR</name><operator pos:start="206:59" pos:end="206:59">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="208:9" pos:end="208:46"><expr pos:start="208:9" pos:end="208:45"><name pos:start="208:9" pos:end="208:29"><name pos:start="208:9" pos:end="208:14">blk_rs</name><operator pos:start="208:15" pos:end="208:16">-&gt;</operator><name pos:start="208:17" pos:end="208:29">detect_zeroes</name></name> <operator pos:start="208:31" pos:end="208:31">=</operator> <name pos:start="208:33" pos:end="208:45">detect_zeroes</name></expr>;</expr_stmt>



        <if_stmt pos:start="212:9" pos:end="226:9"><if pos:start="212:9" pos:end="226:9">if <condition pos:start="212:12" pos:end="212:35">(<expr pos:start="212:13" pos:end="212:34"><call pos:start="212:13" pos:end="212:34"><name pos:start="212:13" pos:end="212:28">throttle_enabled</name><argument_list pos:start="212:29" pos:end="212:34">(<argument pos:start="212:30" pos:end="212:33"><expr pos:start="212:30" pos:end="212:33"><operator pos:start="212:30" pos:end="212:30">&amp;</operator><name pos:start="212:31" pos:end="212:33">cfg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="212:37" pos:end="226:9">{<block_content pos:start="214:13" pos:end="224:46">

            <if_stmt pos:start="214:13" pos:end="218:13"><if pos:start="214:13" pos:end="218:13">if <condition pos:start="214:16" pos:end="214:34">(<expr pos:start="214:17" pos:end="214:33"><operator pos:start="214:17" pos:end="214:17">!</operator><name pos:start="214:18" pos:end="214:33">throttling_group</name></expr>)</condition> <block pos:start="214:36" pos:end="218:13">{<block_content pos:start="216:17" pos:end="216:49">

                <expr_stmt pos:start="216:17" pos:end="216:49"><expr pos:start="216:17" pos:end="216:48"><name pos:start="216:17" pos:end="216:32">throttling_group</name> <operator pos:start="216:34" pos:end="216:34">=</operator> <call pos:start="216:36" pos:end="216:48"><name pos:start="216:36" pos:end="216:43">blk_name</name><argument_list pos:start="216:44" pos:end="216:48">(<argument pos:start="216:45" pos:end="216:47"><expr pos:start="216:45" pos:end="216:47"><name pos:start="216:45" pos:end="216:47">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="220:13" pos:end="220:64"><expr pos:start="220:13" pos:end="220:63"><name pos:start="220:13" pos:end="220:34"><name pos:start="220:13" pos:end="220:18">blk_rs</name><operator pos:start="220:19" pos:end="220:20">-&gt;</operator><name pos:start="220:21" pos:end="220:34">throttle_group</name></name> <operator pos:start="220:36" pos:end="220:36">=</operator> <call pos:start="220:38" pos:end="220:63"><name pos:start="220:38" pos:end="220:45">g_strdup</name><argument_list pos:start="220:46" pos:end="220:63">(<argument pos:start="220:47" pos:end="220:62"><expr pos:start="220:47" pos:end="220:62"><name pos:start="220:47" pos:end="220:62">throttling_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="222:13" pos:end="222:77"><expr pos:start="222:13" pos:end="222:76"><name pos:start="222:13" pos:end="222:34"><name pos:start="222:13" pos:end="222:18">blk_rs</name><operator pos:start="222:19" pos:end="222:20">-&gt;</operator><name pos:start="222:21" pos:end="222:34">throttle_state</name></name> <operator pos:start="222:36" pos:end="222:36">=</operator> <call pos:start="222:38" pos:end="222:76"><name pos:start="222:38" pos:end="222:58">throttle_group_incref</name><argument_list pos:start="222:59" pos:end="222:76">(<argument pos:start="222:60" pos:end="222:75"><expr pos:start="222:60" pos:end="222:75"><name pos:start="222:60" pos:end="222:75">throttling_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="224:13" pos:end="224:46"><expr pos:start="224:13" pos:end="224:45"><name pos:start="224:13" pos:end="224:39"><name pos:start="224:13" pos:end="224:18">blk_rs</name><operator pos:start="224:19" pos:end="224:20">-&gt;</operator><name pos:start="224:21" pos:end="224:34">throttle_state</name><operator pos:start="224:35" pos:end="224:36">-&gt;</operator><name pos:start="224:37" pos:end="224:39">cfg</name></name> <operator pos:start="224:41" pos:end="224:41">=</operator> <name pos:start="224:43" pos:end="224:45">cfg</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="230:9" pos:end="230:25"><expr pos:start="230:9" pos:end="230:24"><call pos:start="230:9" pos:end="230:24"><name pos:start="230:9" pos:end="230:15">QDECREF</name><argument_list pos:start="230:16" pos:end="230:24">(<argument pos:start="230:17" pos:end="230:23"><expr pos:start="230:17" pos:end="230:23"><name pos:start="230:17" pos:end="230:23">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="232:7" pos:end="288:5">else <block pos:start="232:12" pos:end="288:5">{<block_content pos:start="234:9" pos:end="286:77">

        <if_stmt pos:start="234:9" pos:end="238:9"><if pos:start="234:9" pos:end="238:9">if <condition pos:start="234:12" pos:end="234:27">(<expr pos:start="234:13" pos:end="234:26"><name pos:start="234:13" pos:end="234:16">file</name> <operator pos:start="234:18" pos:end="234:19">&amp;&amp;</operator> <operator pos:start="234:21" pos:end="234:21">!</operator><operator pos:start="234:22" pos:end="234:22">*</operator><name pos:start="234:23" pos:end="234:26">file</name></expr>)</condition> <block pos:start="234:29" pos:end="238:9">{<block_content pos:start="236:13" pos:end="236:24">

            <expr_stmt pos:start="236:13" pos:end="236:24"><expr pos:start="236:13" pos:end="236:23"><name pos:start="236:13" pos:end="236:16">file</name> <operator pos:start="236:18" pos:end="236:18">=</operator> <name pos:start="236:20" pos:end="236:23">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="242:9" pos:end="244:33"><expr pos:start="242:9" pos:end="244:32"><name pos:start="242:9" pos:end="242:11">blk</name> <operator pos:start="242:13" pos:end="242:13">=</operator> <call pos:start="242:15" pos:end="244:32"><name pos:start="242:15" pos:end="242:26">blk_new_open</name><argument_list pos:start="242:27" pos:end="244:32">(<argument pos:start="242:28" pos:end="242:45"><expr pos:start="242:28" pos:end="242:45"><call pos:start="242:28" pos:end="242:45"><name pos:start="242:28" pos:end="242:39">qemu_opts_id</name><argument_list pos:start="242:40" pos:end="242:45">(<argument pos:start="242:41" pos:end="242:44"><expr pos:start="242:41" pos:end="242:44"><name pos:start="242:41" pos:end="242:44">opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="242:48" pos:end="242:51"><expr pos:start="242:48" pos:end="242:51"><name pos:start="242:48" pos:end="242:51">file</name></expr></argument>, <argument pos:start="242:54" pos:end="242:57"><expr pos:start="242:54" pos:end="242:57"><name pos:start="242:54" pos:end="242:57">NULL</name></expr></argument>, <argument pos:start="242:60" pos:end="242:66"><expr pos:start="242:60" pos:end="242:66"><name pos:start="242:60" pos:end="242:66">bs_opts</name></expr></argument>, <argument pos:start="242:69" pos:end="242:78"><expr pos:start="242:69" pos:end="242:78"><name pos:start="242:69" pos:end="242:78">bdrv_flags</name></expr></argument>,

                           <argument pos:start="244:28" pos:end="244:31"><expr pos:start="244:28" pos:end="244:31"><name pos:start="244:28" pos:end="244:31">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="246:9" pos:end="250:9"><if pos:start="246:9" pos:end="250:9">if <condition pos:start="246:12" pos:end="246:17">(<expr pos:start="246:13" pos:end="246:16"><operator pos:start="246:13" pos:end="246:13">!</operator><name pos:start="246:14" pos:end="246:16">blk</name></expr>)</condition> <block pos:start="246:19" pos:end="250:9">{<block_content pos:start="248:13" pos:end="248:32">

            <goto pos:start="248:13" pos:end="248:32">goto <name pos:start="248:18" pos:end="248:31">err_no_bs_opts</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="252:9" pos:end="252:25"><expr pos:start="252:9" pos:end="252:24"><name pos:start="252:9" pos:end="252:10">bs</name> <operator pos:start="252:12" pos:end="252:12">=</operator> <call pos:start="252:14" pos:end="252:24"><name pos:start="252:14" pos:end="252:19">blk_bs</name><argument_list pos:start="252:20" pos:end="252:24">(<argument pos:start="252:21" pos:end="252:23"><expr pos:start="252:21" pos:end="252:23"><name pos:start="252:21" pos:end="252:23">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="256:9" pos:end="256:42"><expr pos:start="256:9" pos:end="256:41"><name pos:start="256:9" pos:end="256:25"><name pos:start="256:9" pos:end="256:10">bs</name><operator pos:start="256:11" pos:end="256:12">-&gt;</operator><name pos:start="256:13" pos:end="256:25">detect_zeroes</name></name> <operator pos:start="256:27" pos:end="256:27">=</operator> <name pos:start="256:29" pos:end="256:41">detect_zeroes</name></expr>;</expr_stmt>



        <comment type="block" pos:start="260:9" pos:end="260:33">/* disk I/O throttling */</comment>

        <if_stmt pos:start="262:9" pos:end="274:9"><if pos:start="262:9" pos:end="274:9">if <condition pos:start="262:12" pos:end="262:35">(<expr pos:start="262:13" pos:end="262:34"><call pos:start="262:13" pos:end="262:34"><name pos:start="262:13" pos:end="262:28">throttle_enabled</name><argument_list pos:start="262:29" pos:end="262:34">(<argument pos:start="262:30" pos:end="262:33"><expr pos:start="262:30" pos:end="262:33"><operator pos:start="262:30" pos:end="262:30">&amp;</operator><name pos:start="262:31" pos:end="262:33">cfg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="262:37" pos:end="274:9">{<block_content pos:start="264:13" pos:end="272:41">

            <if_stmt pos:start="264:13" pos:end="268:13"><if pos:start="264:13" pos:end="268:13">if <condition pos:start="264:16" pos:end="264:34">(<expr pos:start="264:17" pos:end="264:33"><operator pos:start="264:17" pos:end="264:17">!</operator><name pos:start="264:18" pos:end="264:33">throttling_group</name></expr>)</condition> <block pos:start="264:36" pos:end="268:13">{<block_content pos:start="266:17" pos:end="266:49">

                <expr_stmt pos:start="266:17" pos:end="266:49"><expr pos:start="266:17" pos:end="266:48"><name pos:start="266:17" pos:end="266:32">throttling_group</name> <operator pos:start="266:34" pos:end="266:34">=</operator> <call pos:start="266:36" pos:end="266:48"><name pos:start="266:36" pos:end="266:43">blk_name</name><argument_list pos:start="266:44" pos:end="266:48">(<argument pos:start="266:45" pos:end="266:47"><expr pos:start="266:45" pos:end="266:47"><name pos:start="266:45" pos:end="266:47">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="270:13" pos:end="270:56"><expr pos:start="270:13" pos:end="270:55"><call pos:start="270:13" pos:end="270:55"><name pos:start="270:13" pos:end="270:33">bdrv_io_limits_enable</name><argument_list pos:start="270:34" pos:end="270:55">(<argument pos:start="270:35" pos:end="270:36"><expr pos:start="270:35" pos:end="270:36"><name pos:start="270:35" pos:end="270:36">bs</name></expr></argument>, <argument pos:start="270:39" pos:end="270:54"><expr pos:start="270:39" pos:end="270:54"><name pos:start="270:39" pos:end="270:54">throttling_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="272:13" pos:end="272:41"><expr pos:start="272:13" pos:end="272:40"><call pos:start="272:13" pos:end="272:40"><name pos:start="272:13" pos:end="272:30">bdrv_set_io_limits</name><argument_list pos:start="272:31" pos:end="272:40">(<argument pos:start="272:32" pos:end="272:33"><expr pos:start="272:32" pos:end="272:33"><name pos:start="272:32" pos:end="272:33">bs</name></expr></argument>, <argument pos:start="272:36" pos:end="272:39"><expr pos:start="272:36" pos:end="272:39"><operator pos:start="272:36" pos:end="272:36">&amp;</operator><name pos:start="272:37" pos:end="272:39">cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="278:9" pos:end="282:9"><if pos:start="278:9" pos:end="282:9">if <condition pos:start="278:12" pos:end="278:34">(<expr pos:start="278:13" pos:end="278:33"><call pos:start="278:13" pos:end="278:33"><name pos:start="278:13" pos:end="278:29">bdrv_key_required</name><argument_list pos:start="278:30" pos:end="278:33">(<argument pos:start="278:31" pos:end="278:32"><expr pos:start="278:31" pos:end="278:32"><name pos:start="278:31" pos:end="278:32">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="278:36" pos:end="282:9">{<block_content pos:start="280:13" pos:end="280:26">

            <expr_stmt pos:start="280:13" pos:end="280:26"><expr pos:start="280:13" pos:end="280:25"><name pos:start="280:13" pos:end="280:21">autostart</name> <operator pos:start="280:23" pos:end="280:23">=</operator> <literal type="number" pos:start="280:25" pos:end="280:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="286:9" pos:end="286:77"><expr pos:start="286:9" pos:end="286:76"><call pos:start="286:9" pos:end="286:76"><name pos:start="286:9" pos:end="286:23">block_acct_init</name><argument_list pos:start="286:24" pos:end="286:76">(<argument pos:start="286:25" pos:end="286:42"><expr pos:start="286:25" pos:end="286:42"><call pos:start="286:25" pos:end="286:42"><name pos:start="286:25" pos:end="286:37">blk_get_stats</name><argument_list pos:start="286:38" pos:end="286:42">(<argument pos:start="286:39" pos:end="286:41"><expr pos:start="286:39" pos:end="286:41"><name pos:start="286:39" pos:end="286:41">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="286:45" pos:end="286:59"><expr pos:start="286:45" pos:end="286:59"><name pos:start="286:45" pos:end="286:59">account_invalid</name></expr></argument>, <argument pos:start="286:62" pos:end="286:75"><expr pos:start="286:62" pos:end="286:75"><name pos:start="286:62" pos:end="286:75">account_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="292:5" pos:end="292:57"><expr pos:start="292:5" pos:end="292:56"><call pos:start="292:5" pos:end="292:56"><name pos:start="292:5" pos:end="292:20">blk_set_on_error</name><argument_list pos:start="292:21" pos:end="292:56">(<argument pos:start="292:22" pos:end="292:24"><expr pos:start="292:22" pos:end="292:24"><name pos:start="292:22" pos:end="292:24">blk</name></expr></argument>, <argument pos:start="292:27" pos:end="292:39"><expr pos:start="292:27" pos:end="292:39"><name pos:start="292:27" pos:end="292:39">on_read_error</name></expr></argument>, <argument pos:start="292:42" pos:end="292:55"><expr pos:start="292:42" pos:end="292:55"><name pos:start="292:42" pos:end="292:55">on_write_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="296:1" pos:end="296:15"><name pos:start="296:1" pos:end="296:14">err_no_bs_opts</name>:</label>

    <expr_stmt pos:start="298:5" pos:end="298:24"><expr pos:start="298:5" pos:end="298:23"><call pos:start="298:5" pos:end="298:23"><name pos:start="298:5" pos:end="298:17">qemu_opts_del</name><argument_list pos:start="298:18" pos:end="298:23">(<argument pos:start="298:19" pos:end="298:22"><expr pos:start="298:19" pos:end="298:22"><name pos:start="298:19" pos:end="298:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="300:5" pos:end="300:15">return <expr pos:start="300:12" pos:end="300:14"><name pos:start="300:12" pos:end="300:14">blk</name></expr>;</return>



<label pos:start="304:1" pos:end="304:10"><name pos:start="304:1" pos:end="304:9">early_err</name>:</label>

    <expr_stmt pos:start="306:5" pos:end="306:24"><expr pos:start="306:5" pos:end="306:23"><call pos:start="306:5" pos:end="306:23"><name pos:start="306:5" pos:end="306:17">qemu_opts_del</name><argument_list pos:start="306:18" pos:end="306:23">(<argument pos:start="306:19" pos:end="306:22"><expr pos:start="306:19" pos:end="306:22"><name pos:start="306:19" pos:end="306:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="308:1" pos:end="308:12"><name pos:start="308:1" pos:end="308:11">err_no_opts</name>:</label>

    <expr_stmt pos:start="310:5" pos:end="310:21"><expr pos:start="310:5" pos:end="310:20"><call pos:start="310:5" pos:end="310:20"><name pos:start="310:5" pos:end="310:11">QDECREF</name><argument_list pos:start="310:12" pos:end="310:20">(<argument pos:start="310:13" pos:end="310:19"><expr pos:start="310:13" pos:end="310:19"><name pos:start="310:13" pos:end="310:19">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="312:5" pos:end="312:16">return <expr pos:start="312:12" pos:end="312:15"><name pos:start="312:12" pos:end="312:15">NULL</name></expr>;</return>

</block_content>}</block></function></unit>
