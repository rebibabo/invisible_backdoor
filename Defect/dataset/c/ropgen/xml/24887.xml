<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24887.c" pos:tabs="8"><function pos:start="1:1" pos:end="458:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">udp_open</name><parameter_list pos:start="1:20" pos:end="1:62">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:30">URLContext</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">h</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:50"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:45">char</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">uri</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:61"><decl pos:start="1:53" pos:end="1:61"><type pos:start="1:53" pos:end="1:61"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:61">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="458:1">{<block_content pos:start="5:5" pos:end="456:24">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:23"><name pos:start="5:10" pos:end="5:17">hostname</name><index pos:start="5:18" pos:end="5:23">[<expr pos:start="5:19" pos:end="5:22"><literal type="number" pos:start="5:19" pos:end="5:22">1024</literal></expr>]</index></name></decl>, <decl pos:start="5:26" pos:end="5:45"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:26" pos:end="5:40"><name pos:start="5:26" pos:end="5:34">localaddr</name><index pos:start="5:35" pos:end="5:40">[<expr pos:start="5:36" pos:end="5:39"><literal type="number" pos:start="5:36" pos:end="5:39">1024</literal></expr>]</index></name> <init pos:start="5:42" pos:end="5:45">= <expr pos:start="5:44" pos:end="5:45"><literal type="string" pos:start="5:44" pos:end="5:45">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">port</name></decl>, <decl pos:start="7:15" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:20">udp_fd</name> <init pos:start="7:22" pos:end="7:25">= <expr pos:start="7:24" pos:end="7:25"><operator pos:start="7:24" pos:end="7:24">-</operator><literal type="number" pos:start="7:25" pos:end="7:25">1</literal></expr></init></decl>, <decl pos:start="7:28" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:28" pos:end="7:30">tmp</name></decl>, <decl pos:start="7:33" pos:end="7:45"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:33" pos:end="7:40">bind_ret</name> <init pos:start="7:42" pos:end="7:45">= <expr pos:start="7:44" pos:end="7:45"><operator pos:start="7:44" pos:end="7:44">-</operator><literal type="number" pos:start="7:45" pos:end="7:45">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">UDPContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">s</name> <init pos:start="9:19" pos:end="9:32">= <expr pos:start="9:21" pos:end="9:32"><name pos:start="9:21" pos:end="9:32"><name pos:start="9:21" pos:end="9:21">h</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">is_output</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:17"><name pos:start="15:10" pos:end="15:12">buf</name><index pos:start="15:13" pos:end="15:17">[<expr pos:start="15:14" pos:end="15:16"><literal type="number" pos:start="15:14" pos:end="15:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:27">sockaddr_storage</name></name></type> <name pos:start="17:29" pos:end="17:35">my_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:23">reuse_specified</name> <init pos:start="21:25" pos:end="21:27">= <expr pos:start="21:27" pos:end="21:27"><literal type="number" pos:start="21:27" pos:end="21:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:40"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>, <decl pos:start="23:12" pos:end="23:22"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:18">include</name> <init pos:start="23:20" pos:end="23:22">= <expr pos:start="23:22" pos:end="23:22"><literal type="number" pos:start="23:22" pos:end="23:22">0</literal></expr></init></decl>, <decl pos:start="23:25" pos:end="23:39"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:25" pos:end="23:35">num_sources</name> <init pos:start="23:37" pos:end="23:39">= <expr pos:start="23:39" pos:end="23:39"><literal type="number" pos:start="23:39" pos:end="23:39">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:8">char</name> <modifier pos:start="25:10" pos:end="25:10">*</modifier></type><name pos:start="25:11" pos:end="25:21"><name pos:start="25:11" pos:end="25:17">sources</name><index pos:start="25:18" pos:end="25:21">[<expr pos:start="25:19" pos:end="25:20"><literal type="number" pos:start="25:19" pos:end="25:20">32</literal></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:5">h</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:18">is_streamed</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <literal type="number" pos:start="29:22" pos:end="29:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:30"><expr pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:5">h</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:22">max_packet_size</name></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <literal type="number" pos:start="31:26" pos:end="31:29">1472</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:42"><expr pos:start="35:5" pos:end="35:41"><name pos:start="35:5" pos:end="35:13">is_output</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <operator pos:start="35:17" pos:end="35:17">!</operator><operator pos:start="35:18" pos:end="35:18">(</operator><name pos:start="35:19" pos:end="35:23">flags</name> <operator pos:start="35:25" pos:end="35:25">&amp;</operator> <name pos:start="35:27" pos:end="35:40">AVIO_FLAG_READ</name><operator pos:start="35:41" pos:end="35:41">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:10">ttl</name></name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:15">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:68"><expr pos:start="41:5" pos:end="41:67"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:18">buffer_size</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <ternary pos:start="41:22" pos:end="41:67"><condition pos:start="41:22" pos:end="41:32"><expr pos:start="41:22" pos:end="41:30"><name pos:start="41:22" pos:end="41:30">is_output</name></expr> ?</condition><then pos:start="41:34" pos:end="41:48"> <expr pos:start="41:34" pos:end="41:48"><name pos:start="41:34" pos:end="41:48">UDP_TX_BUF_SIZE</name></expr> </then><else pos:start="41:50" pos:end="41:67">: <expr pos:start="41:52" pos:end="41:67"><name pos:start="41:52" pos:end="41:67">UDP_MAX_PKT_SIZE</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:41"><expr pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:27">circular_buffer_size</name></name> <operator pos:start="45:29" pos:end="45:29">=</operator> <literal type="number" pos:start="45:31" pos:end="45:31">7</literal><operator pos:start="45:32" pos:end="45:32">*</operator><literal type="number" pos:start="45:33" pos:end="45:35">188</literal><operator pos:start="45:36" pos:end="45:36">*</operator><literal type="number" pos:start="45:37" pos:end="45:40">4096</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:25"><expr pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:5">p</name> <operator pos:start="49:7" pos:end="49:7">=</operator> <call pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:14">strchr</name><argument_list pos:start="49:15" pos:end="49:24">(<argument pos:start="49:16" pos:end="49:18"><expr pos:start="49:16" pos:end="49:18"><name pos:start="49:16" pos:end="49:18">uri</name></expr></argument>, <argument pos:start="49:21" pos:end="49:23"><expr pos:start="49:21" pos:end="49:23"><literal type="char" pos:start="49:21" pos:end="49:23">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="172:5"><if pos:start="51:5" pos:end="172:5">if <condition pos:start="51:8" pos:end="51:10">(<expr pos:start="51:9" pos:end="51:9"><name pos:start="51:9" pos:end="51:9">p</name></expr>)</condition> <block pos:start="51:12" pos:end="172:5">{<block_content pos:start="53:9" pos:end="170:9">

        <if_stmt pos:start="53:9" pos:end="67:9"><if pos:start="53:9" pos:end="67:9">if <condition pos:start="53:12" pos:end="53:59">(<expr pos:start="53:13" pos:end="53:58"><call pos:start="53:13" pos:end="53:58"><name pos:start="53:13" pos:end="53:28">av_find_info_tag</name><argument_list pos:start="53:29" pos:end="53:58">(<argument pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:32">buf</name></expr></argument>, <argument pos:start="53:35" pos:end="53:45"><expr pos:start="53:35" pos:end="53:45"><sizeof pos:start="53:35" pos:end="53:45">sizeof<argument_list pos:start="53:41" pos:end="53:45">(<argument pos:start="53:42" pos:end="53:44"><expr pos:start="53:42" pos:end="53:44"><name pos:start="53:42" pos:end="53:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="53:48" pos:end="53:54"><expr pos:start="53:48" pos:end="53:54"><literal type="string" pos:start="53:48" pos:end="53:54">"reuse"</literal></expr></argument>, <argument pos:start="53:57" pos:end="53:57"><expr pos:start="53:57" pos:end="53:57"><name pos:start="53:57" pos:end="53:57">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:61" pos:end="67:9">{<block_content pos:start="55:13" pos:end="65:32">

            <decl_stmt pos:start="55:13" pos:end="55:32"><decl pos:start="55:13" pos:end="55:31"><type pos:start="55:13" pos:end="55:18"><name pos:start="55:13" pos:end="55:16">char</name> <modifier pos:start="55:18" pos:end="55:18">*</modifier></type><name pos:start="55:19" pos:end="55:24">endptr</name> <init pos:start="55:26" pos:end="55:31">= <expr pos:start="55:28" pos:end="55:31"><name pos:start="55:28" pos:end="55:31">NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:55"><expr pos:start="57:13" pos:end="57:54"><name pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:27">reuse_socket</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <call pos:start="57:31" pos:end="57:54"><name pos:start="57:31" pos:end="57:36">strtol</name><argument_list pos:start="57:37" pos:end="57:54">(<argument pos:start="57:38" pos:end="57:40"><expr pos:start="57:38" pos:end="57:40"><name pos:start="57:38" pos:end="57:40">buf</name></expr></argument>, <argument pos:start="57:43" pos:end="57:49"><expr pos:start="57:43" pos:end="57:49"><operator pos:start="57:43" pos:end="57:43">&amp;</operator><name pos:start="57:44" pos:end="57:49">endptr</name></expr></argument>, <argument pos:start="57:52" pos:end="57:53"><expr pos:start="57:52" pos:end="57:53"><literal type="number" pos:start="57:52" pos:end="57:53">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="59:13" pos:end="59:77">/* assume if no digits were found it is a request to enable it */</comment>

            <if_stmt pos:start="61:13" pos:end="63:36"><if pos:start="61:13" pos:end="63:36">if <condition pos:start="61:16" pos:end="61:30">(<expr pos:start="61:17" pos:end="61:29"><name pos:start="61:17" pos:end="61:19">buf</name> <operator pos:start="61:21" pos:end="61:22">==</operator> <name pos:start="61:24" pos:end="61:29">endptr</name></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:36"><block_content pos:start="63:17" pos:end="63:36">

                <expr_stmt pos:start="63:17" pos:end="63:36"><expr pos:start="63:17" pos:end="63:35"><name pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:17">s</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:31">reuse_socket</name></name> <operator pos:start="63:33" pos:end="63:33">=</operator> <literal type="number" pos:start="63:35" pos:end="63:35">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:32"><expr pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:27">reuse_specified</name> <operator pos:start="65:29" pos:end="65:29">=</operator> <literal type="number" pos:start="65:31" pos:end="65:31">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="85:9"><if pos:start="69:9" pos:end="85:9">if <condition pos:start="69:12" pos:end="69:70">(<expr pos:start="69:13" pos:end="69:69"><call pos:start="69:13" pos:end="69:69"><name pos:start="69:13" pos:end="69:28">av_find_info_tag</name><argument_list pos:start="69:29" pos:end="69:69">(<argument pos:start="69:30" pos:end="69:32"><expr pos:start="69:30" pos:end="69:32"><name pos:start="69:30" pos:end="69:32">buf</name></expr></argument>, <argument pos:start="69:35" pos:end="69:45"><expr pos:start="69:35" pos:end="69:45"><sizeof pos:start="69:35" pos:end="69:45">sizeof<argument_list pos:start="69:41" pos:end="69:45">(<argument pos:start="69:42" pos:end="69:44"><expr pos:start="69:42" pos:end="69:44"><name pos:start="69:42" pos:end="69:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="69:48" pos:end="69:65"><expr pos:start="69:48" pos:end="69:65"><literal type="string" pos:start="69:48" pos:end="69:65">"overrun_nonfatal"</literal></expr></argument>, <argument pos:start="69:68" pos:end="69:68"><expr pos:start="69:68" pos:end="69:68"><name pos:start="69:68" pos:end="69:68">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:72" pos:end="85:9">{<block_content pos:start="71:13" pos:end="79:40">

            <decl_stmt pos:start="71:13" pos:end="71:32"><decl pos:start="71:13" pos:end="71:31"><type pos:start="71:13" pos:end="71:18"><name pos:start="71:13" pos:end="71:16">char</name> <modifier pos:start="71:18" pos:end="71:18">*</modifier></type><name pos:start="71:19" pos:end="71:24">endptr</name> <init pos:start="71:26" pos:end="71:31">= <expr pos:start="71:28" pos:end="71:31"><name pos:start="71:28" pos:end="71:31">NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:59"><expr pos:start="73:13" pos:end="73:58"><name pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:31">overrun_nonfatal</name></name> <operator pos:start="73:33" pos:end="73:33">=</operator> <call pos:start="73:35" pos:end="73:58"><name pos:start="73:35" pos:end="73:40">strtol</name><argument_list pos:start="73:41" pos:end="73:58">(<argument pos:start="73:42" pos:end="73:44"><expr pos:start="73:42" pos:end="73:44"><name pos:start="73:42" pos:end="73:44">buf</name></expr></argument>, <argument pos:start="73:47" pos:end="73:53"><expr pos:start="73:47" pos:end="73:53"><operator pos:start="73:47" pos:end="73:47">&amp;</operator><name pos:start="73:48" pos:end="73:53">endptr</name></expr></argument>, <argument pos:start="73:56" pos:end="73:57"><expr pos:start="73:56" pos:end="73:57"><literal type="number" pos:start="73:56" pos:end="73:57">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="75:13" pos:end="75:77">/* assume if no digits were found it is a request to enable it */</comment>

            <if_stmt pos:start="77:13" pos:end="79:40"><if pos:start="77:13" pos:end="79:40">if <condition pos:start="77:16" pos:end="77:30">(<expr pos:start="77:17" pos:end="77:29"><name pos:start="77:17" pos:end="77:19">buf</name> <operator pos:start="77:21" pos:end="77:22">==</operator> <name pos:start="77:24" pos:end="77:29">endptr</name></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:40"><block_content pos:start="79:17" pos:end="79:40">

                <expr_stmt pos:start="79:17" pos:end="79:40"><expr pos:start="79:17" pos:end="79:39"><name pos:start="79:17" pos:end="79:35"><name pos:start="79:17" pos:end="79:17">s</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:35">overrun_nonfatal</name></name> <operator pos:start="79:37" pos:end="79:37">=</operator> <literal type="number" pos:start="79:39" pos:end="79:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:57">(<expr pos:start="87:13" pos:end="87:56"><call pos:start="87:13" pos:end="87:56"><name pos:start="87:13" pos:end="87:28">av_find_info_tag</name><argument_list pos:start="87:29" pos:end="87:56">(<argument pos:start="87:30" pos:end="87:32"><expr pos:start="87:30" pos:end="87:32"><name pos:start="87:30" pos:end="87:32">buf</name></expr></argument>, <argument pos:start="87:35" pos:end="87:45"><expr pos:start="87:35" pos:end="87:45"><sizeof pos:start="87:35" pos:end="87:45">sizeof<argument_list pos:start="87:41" pos:end="87:45">(<argument pos:start="87:42" pos:end="87:44"><expr pos:start="87:42" pos:end="87:44"><name pos:start="87:42" pos:end="87:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="87:48" pos:end="87:52"><expr pos:start="87:48" pos:end="87:52"><literal type="string" pos:start="87:48" pos:end="87:52">"ttl"</literal></expr></argument>, <argument pos:start="87:55" pos:end="87:55"><expr pos:start="87:55" pos:end="87:55"><name pos:start="87:55" pos:end="87:55">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:59" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:43">

            <expr_stmt pos:start="89:13" pos:end="89:43"><expr pos:start="89:13" pos:end="89:42"><name pos:start="89:13" pos:end="89:18"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:18">ttl</name></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <call pos:start="89:22" pos:end="89:42"><name pos:start="89:22" pos:end="89:27">strtol</name><argument_list pos:start="89:28" pos:end="89:42">(<argument pos:start="89:29" pos:end="89:31"><expr pos:start="89:29" pos:end="89:31"><name pos:start="89:29" pos:end="89:31">buf</name></expr></argument>, <argument pos:start="89:34" pos:end="89:37"><expr pos:start="89:34" pos:end="89:37"><name pos:start="89:34" pos:end="89:37">NULL</name></expr></argument>, <argument pos:start="89:40" pos:end="89:41"><expr pos:start="89:40" pos:end="89:41"><literal type="number" pos:start="89:40" pos:end="89:41">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="93:9" pos:end="97:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:63">(<expr pos:start="93:13" pos:end="93:62"><call pos:start="93:13" pos:end="93:62"><name pos:start="93:13" pos:end="93:28">av_find_info_tag</name><argument_list pos:start="93:29" pos:end="93:62">(<argument pos:start="93:30" pos:end="93:32"><expr pos:start="93:30" pos:end="93:32"><name pos:start="93:30" pos:end="93:32">buf</name></expr></argument>, <argument pos:start="93:35" pos:end="93:45"><expr pos:start="93:35" pos:end="93:45"><sizeof pos:start="93:35" pos:end="93:45">sizeof<argument_list pos:start="93:41" pos:end="93:45">(<argument pos:start="93:42" pos:end="93:44"><expr pos:start="93:42" pos:end="93:44"><name pos:start="93:42" pos:end="93:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="93:48" pos:end="93:58"><expr pos:start="93:48" pos:end="93:58"><literal type="string" pos:start="93:48" pos:end="93:58">"localport"</literal></expr></argument>, <argument pos:start="93:61" pos:end="93:61"><expr pos:start="93:61" pos:end="93:61"><name pos:start="93:61" pos:end="93:61">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:65" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:50">

            <expr_stmt pos:start="95:13" pos:end="95:50"><expr pos:start="95:13" pos:end="95:49"><name pos:start="95:13" pos:end="95:25"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:25">local_port</name></name> <operator pos:start="95:27" pos:end="95:27">=</operator> <call pos:start="95:29" pos:end="95:49"><name pos:start="95:29" pos:end="95:34">strtol</name><argument_list pos:start="95:35" pos:end="95:49">(<argument pos:start="95:36" pos:end="95:38"><expr pos:start="95:36" pos:end="95:38"><name pos:start="95:36" pos:end="95:38">buf</name></expr></argument>, <argument pos:start="95:41" pos:end="95:44"><expr pos:start="95:41" pos:end="95:44"><name pos:start="95:41" pos:end="95:44">NULL</name></expr></argument>, <argument pos:start="95:47" pos:end="95:48"><expr pos:start="95:47" pos:end="95:48"><literal type="number" pos:start="95:47" pos:end="95:48">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:62">(<expr pos:start="99:13" pos:end="99:61"><call pos:start="99:13" pos:end="99:61"><name pos:start="99:13" pos:end="99:28">av_find_info_tag</name><argument_list pos:start="99:29" pos:end="99:61">(<argument pos:start="99:30" pos:end="99:32"><expr pos:start="99:30" pos:end="99:32"><name pos:start="99:30" pos:end="99:32">buf</name></expr></argument>, <argument pos:start="99:35" pos:end="99:45"><expr pos:start="99:35" pos:end="99:45"><sizeof pos:start="99:35" pos:end="99:45">sizeof<argument_list pos:start="99:41" pos:end="99:45">(<argument pos:start="99:42" pos:end="99:44"><expr pos:start="99:42" pos:end="99:44"><name pos:start="99:42" pos:end="99:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="99:48" pos:end="99:57"><expr pos:start="99:48" pos:end="99:57"><literal type="string" pos:start="99:48" pos:end="99:57">"pkt_size"</literal></expr></argument>, <argument pos:start="99:60" pos:end="99:60"><expr pos:start="99:60" pos:end="99:60"><name pos:start="99:60" pos:end="99:60">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:64" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:55">

            <expr_stmt pos:start="101:13" pos:end="101:55"><expr pos:start="101:13" pos:end="101:54"><name pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:13">h</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:30">max_packet_size</name></name> <operator pos:start="101:32" pos:end="101:32">=</operator> <call pos:start="101:34" pos:end="101:54"><name pos:start="101:34" pos:end="101:39">strtol</name><argument_list pos:start="101:40" pos:end="101:54">(<argument pos:start="101:41" pos:end="101:43"><expr pos:start="101:41" pos:end="101:43"><name pos:start="101:41" pos:end="101:43">buf</name></expr></argument>, <argument pos:start="101:46" pos:end="101:49"><expr pos:start="101:46" pos:end="101:49"><name pos:start="101:46" pos:end="101:49">NULL</name></expr></argument>, <argument pos:start="101:52" pos:end="101:53"><expr pos:start="101:52" pos:end="101:53"><literal type="number" pos:start="101:52" pos:end="101:53">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:65">(<expr pos:start="105:13" pos:end="105:64"><call pos:start="105:13" pos:end="105:64"><name pos:start="105:13" pos:end="105:28">av_find_info_tag</name><argument_list pos:start="105:29" pos:end="105:64">(<argument pos:start="105:30" pos:end="105:32"><expr pos:start="105:30" pos:end="105:32"><name pos:start="105:30" pos:end="105:32">buf</name></expr></argument>, <argument pos:start="105:35" pos:end="105:45"><expr pos:start="105:35" pos:end="105:45"><sizeof pos:start="105:35" pos:end="105:45">sizeof<argument_list pos:start="105:41" pos:end="105:45">(<argument pos:start="105:42" pos:end="105:44"><expr pos:start="105:42" pos:end="105:44"><name pos:start="105:42" pos:end="105:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="105:48" pos:end="105:60"><expr pos:start="105:48" pos:end="105:60"><literal type="string" pos:start="105:48" pos:end="105:60">"buffer_size"</literal></expr></argument>, <argument pos:start="105:63" pos:end="105:63"><expr pos:start="105:63" pos:end="105:63"><name pos:start="105:63" pos:end="105:63">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:67" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:51">

            <expr_stmt pos:start="107:13" pos:end="107:51"><expr pos:start="107:13" pos:end="107:50"><name pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:26">buffer_size</name></name> <operator pos:start="107:28" pos:end="107:28">=</operator> <call pos:start="107:30" pos:end="107:50"><name pos:start="107:30" pos:end="107:35">strtol</name><argument_list pos:start="107:36" pos:end="107:50">(<argument pos:start="107:37" pos:end="107:39"><expr pos:start="107:37" pos:end="107:39"><name pos:start="107:37" pos:end="107:39">buf</name></expr></argument>, <argument pos:start="107:42" pos:end="107:45"><expr pos:start="107:42" pos:end="107:45"><name pos:start="107:42" pos:end="107:45">NULL</name></expr></argument>, <argument pos:start="107:48" pos:end="107:49"><expr pos:start="107:48" pos:end="107:49"><literal type="number" pos:start="107:48" pos:end="107:49">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="111:9" pos:end="115:9"><if pos:start="111:9" pos:end="115:9">if <condition pos:start="111:12" pos:end="111:61">(<expr pos:start="111:13" pos:end="111:60"><call pos:start="111:13" pos:end="111:60"><name pos:start="111:13" pos:end="111:28">av_find_info_tag</name><argument_list pos:start="111:29" pos:end="111:60">(<argument pos:start="111:30" pos:end="111:32"><expr pos:start="111:30" pos:end="111:32"><name pos:start="111:30" pos:end="111:32">buf</name></expr></argument>, <argument pos:start="111:35" pos:end="111:45"><expr pos:start="111:35" pos:end="111:45"><sizeof pos:start="111:35" pos:end="111:45">sizeof<argument_list pos:start="111:41" pos:end="111:45">(<argument pos:start="111:42" pos:end="111:44"><expr pos:start="111:42" pos:end="111:44"><name pos:start="111:42" pos:end="111:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="111:48" pos:end="111:56"><expr pos:start="111:48" pos:end="111:56"><literal type="string" pos:start="111:48" pos:end="111:56">"connect"</literal></expr></argument>, <argument pos:start="111:59" pos:end="111:59"><expr pos:start="111:59" pos:end="111:59"><name pos:start="111:59" pos:end="111:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:63" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:52">

            <expr_stmt pos:start="113:13" pos:end="113:52"><expr pos:start="113:13" pos:end="113:51"><name pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:27">is_connected</name></name> <operator pos:start="113:29" pos:end="113:29">=</operator> <call pos:start="113:31" pos:end="113:51"><name pos:start="113:31" pos:end="113:36">strtol</name><argument_list pos:start="113:37" pos:end="113:51">(<argument pos:start="113:38" pos:end="113:40"><expr pos:start="113:38" pos:end="113:40"><name pos:start="113:38" pos:end="113:40">buf</name></expr></argument>, <argument pos:start="113:43" pos:end="113:46"><expr pos:start="113:43" pos:end="113:46"><name pos:start="113:43" pos:end="113:46">NULL</name></expr></argument>, <argument pos:start="113:49" pos:end="113:50"><expr pos:start="113:49" pos:end="113:50"><literal type="number" pos:start="113:49" pos:end="113:50">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="117:9" pos:end="126:9"><if pos:start="117:9" pos:end="126:9">if <condition pos:start="117:12" pos:end="117:63">(<expr pos:start="117:13" pos:end="117:62"><call pos:start="117:13" pos:end="117:62"><name pos:start="117:13" pos:end="117:28">av_find_info_tag</name><argument_list pos:start="117:29" pos:end="117:62">(<argument pos:start="117:30" pos:end="117:32"><expr pos:start="117:30" pos:end="117:32"><name pos:start="117:30" pos:end="117:32">buf</name></expr></argument>, <argument pos:start="117:35" pos:end="117:45"><expr pos:start="117:35" pos:end="117:45"><sizeof pos:start="117:35" pos:end="117:45">sizeof<argument_list pos:start="117:41" pos:end="117:45">(<argument pos:start="117:42" pos:end="117:44"><expr pos:start="117:42" pos:end="117:44"><name pos:start="117:42" pos:end="117:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="117:48" pos:end="117:58"><expr pos:start="117:48" pos:end="117:58"><literal type="string" pos:start="117:48" pos:end="117:58">"fifo_size"</literal></expr></argument>, <argument pos:start="117:61" pos:end="117:61"><expr pos:start="117:61" pos:end="117:61"><name pos:start="117:61" pos:end="117:61">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:65" pos:end="126:9">{<block_content pos:start="119:13" pos:end="123:87">

            <expr_stmt pos:start="119:13" pos:end="119:64"><expr pos:start="119:13" pos:end="119:63"><name pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:35">circular_buffer_size</name></name> <operator pos:start="119:37" pos:end="119:37">=</operator> <call pos:start="119:39" pos:end="119:59"><name pos:start="119:39" pos:end="119:44">strtol</name><argument_list pos:start="119:45" pos:end="119:59">(<argument pos:start="119:46" pos:end="119:48"><expr pos:start="119:46" pos:end="119:48"><name pos:start="119:46" pos:end="119:48">buf</name></expr></argument>, <argument pos:start="119:51" pos:end="119:54"><expr pos:start="119:51" pos:end="119:54"><name pos:start="119:51" pos:end="119:54">NULL</name></expr></argument>, <argument pos:start="119:57" pos:end="119:58"><expr pos:start="119:57" pos:end="119:58"><literal type="number" pos:start="119:57" pos:end="119:58">10</literal></expr></argument>)</argument_list></call><operator pos:start="119:60" pos:end="119:60">*</operator><literal type="number" pos:start="119:61" pos:end="119:63">188</literal></expr>;</expr_stmt>



                       <expr_stmt pos:start="123:24" pos:end="123:87"><expr pos:start="123:24" pos:end="123:87"><literal type="string" pos:start="123:24" pos:end="123:87">"'circular_buffer_size' option was set but it is not supported "</literal></expr></expr_stmt>


        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="128:9" pos:end="132:9"><if pos:start="128:9" pos:end="132:9">if <condition pos:start="128:12" pos:end="128:63">(<expr pos:start="128:13" pos:end="128:62"><call pos:start="128:13" pos:end="128:62"><name pos:start="128:13" pos:end="128:28">av_find_info_tag</name><argument_list pos:start="128:29" pos:end="128:62">(<argument pos:start="128:30" pos:end="128:32"><expr pos:start="128:30" pos:end="128:32"><name pos:start="128:30" pos:end="128:32">buf</name></expr></argument>, <argument pos:start="128:35" pos:end="128:45"><expr pos:start="128:35" pos:end="128:45"><sizeof pos:start="128:35" pos:end="128:45">sizeof<argument_list pos:start="128:41" pos:end="128:45">(<argument pos:start="128:42" pos:end="128:44"><expr pos:start="128:42" pos:end="128:44"><name pos:start="128:42" pos:end="128:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="128:48" pos:end="128:58"><expr pos:start="128:48" pos:end="128:58"><literal type="string" pos:start="128:48" pos:end="128:58">"localaddr"</literal></expr></argument>, <argument pos:start="128:61" pos:end="128:61"><expr pos:start="128:61" pos:end="128:61"><name pos:start="128:61" pos:end="128:61">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="128:65" pos:end="132:9">{<block_content pos:start="130:13" pos:end="130:58">

            <expr_stmt pos:start="130:13" pos:end="130:58"><expr pos:start="130:13" pos:end="130:57"><call pos:start="130:13" pos:end="130:57"><name pos:start="130:13" pos:end="130:22">av_strlcpy</name><argument_list pos:start="130:23" pos:end="130:57">(<argument pos:start="130:24" pos:end="130:32"><expr pos:start="130:24" pos:end="130:32"><name pos:start="130:24" pos:end="130:32">localaddr</name></expr></argument>, <argument pos:start="130:35" pos:end="130:37"><expr pos:start="130:35" pos:end="130:37"><name pos:start="130:35" pos:end="130:37">buf</name></expr></argument>, <argument pos:start="130:40" pos:end="130:56"><expr pos:start="130:40" pos:end="130:56"><sizeof pos:start="130:40" pos:end="130:56">sizeof<argument_list pos:start="130:46" pos:end="130:56">(<argument pos:start="130:47" pos:end="130:55"><expr pos:start="130:47" pos:end="130:55"><name pos:start="130:47" pos:end="130:55">localaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="134:9" pos:end="136:24"><if pos:start="134:9" pos:end="136:24">if <condition pos:start="134:12" pos:end="134:61">(<expr pos:start="134:13" pos:end="134:60"><call pos:start="134:13" pos:end="134:60"><name pos:start="134:13" pos:end="134:28">av_find_info_tag</name><argument_list pos:start="134:29" pos:end="134:60">(<argument pos:start="134:30" pos:end="134:32"><expr pos:start="134:30" pos:end="134:32"><name pos:start="134:30" pos:end="134:32">buf</name></expr></argument>, <argument pos:start="134:35" pos:end="134:45"><expr pos:start="134:35" pos:end="134:45"><sizeof pos:start="134:35" pos:end="134:45">sizeof<argument_list pos:start="134:41" pos:end="134:45">(<argument pos:start="134:42" pos:end="134:44"><expr pos:start="134:42" pos:end="134:44"><name pos:start="134:42" pos:end="134:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="134:48" pos:end="134:56"><expr pos:start="134:48" pos:end="134:56"><literal type="string" pos:start="134:48" pos:end="134:56">"sources"</literal></expr></argument>, <argument pos:start="134:59" pos:end="134:59"><expr pos:start="134:59" pos:end="134:59"><name pos:start="134:59" pos:end="134:59">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="136:13" pos:end="136:24"><block_content pos:start="136:13" pos:end="136:24">

            <expr_stmt pos:start="136:13" pos:end="136:24"><expr pos:start="136:13" pos:end="136:23"><name pos:start="136:13" pos:end="136:19">include</name> <operator pos:start="136:21" pos:end="136:21">=</operator> <literal type="number" pos:start="136:23" pos:end="136:23">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="138:9" pos:end="170:9"><if pos:start="138:9" pos:end="170:9">if <condition pos:start="138:12" pos:end="138:70">(<expr pos:start="138:13" pos:end="138:69"><name pos:start="138:13" pos:end="138:19">include</name> <operator pos:start="138:21" pos:end="138:22">||</operator> <call pos:start="138:24" pos:end="138:69"><name pos:start="138:24" pos:end="138:39">av_find_info_tag</name><argument_list pos:start="138:40" pos:end="138:69">(<argument pos:start="138:41" pos:end="138:43"><expr pos:start="138:41" pos:end="138:43"><name pos:start="138:41" pos:end="138:43">buf</name></expr></argument>, <argument pos:start="138:46" pos:end="138:56"><expr pos:start="138:46" pos:end="138:56"><sizeof pos:start="138:46" pos:end="138:56">sizeof<argument_list pos:start="138:52" pos:end="138:56">(<argument pos:start="138:53" pos:end="138:55"><expr pos:start="138:53" pos:end="138:55"><name pos:start="138:53" pos:end="138:55">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="138:59" pos:end="138:65"><expr pos:start="138:59" pos:end="138:65"><literal type="string" pos:start="138:59" pos:end="138:65">"block"</literal></expr></argument>, <argument pos:start="138:68" pos:end="138:68"><expr pos:start="138:68" pos:end="138:68"><name pos:start="138:68" pos:end="138:68">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="138:72" pos:end="170:9">{<block_content pos:start="140:13" pos:end="168:13">

            <decl_stmt pos:start="140:13" pos:end="140:31"><decl pos:start="140:13" pos:end="140:30"><type pos:start="140:13" pos:end="140:18"><name pos:start="140:13" pos:end="140:16">char</name> <modifier pos:start="140:18" pos:end="140:18">*</modifier></type><name pos:start="140:19" pos:end="140:30">source_start</name></decl>;</decl_stmt>



            <expr_stmt pos:start="144:13" pos:end="144:31"><expr pos:start="144:13" pos:end="144:30"><name pos:start="144:13" pos:end="144:24">source_start</name> <operator pos:start="144:26" pos:end="144:26">=</operator> <name pos:start="144:28" pos:end="144:30">buf</name></expr>;</expr_stmt>

            <while pos:start="146:13" pos:end="168:13">while <condition pos:start="146:19" pos:end="146:21">(<expr pos:start="146:20" pos:end="146:20"><literal type="number" pos:start="146:20" pos:end="146:20">1</literal></expr>)</condition> <block pos:start="146:23" pos:end="168:13">{<block_content pos:start="148:17" pos:end="166:26">

                <decl_stmt pos:start="148:17" pos:end="148:55"><decl pos:start="148:17" pos:end="148:54"><type pos:start="148:17" pos:end="148:22"><name pos:start="148:17" pos:end="148:20">char</name> <modifier pos:start="148:22" pos:end="148:22">*</modifier></type><name pos:start="148:23" pos:end="148:26">next</name> <init pos:start="148:28" pos:end="148:54">= <expr pos:start="148:30" pos:end="148:54"><call pos:start="148:30" pos:end="148:54"><name pos:start="148:30" pos:end="148:35">strchr</name><argument_list pos:start="148:36" pos:end="148:54">(<argument pos:start="148:37" pos:end="148:48"><expr pos:start="148:37" pos:end="148:48"><name pos:start="148:37" pos:end="148:48">source_start</name></expr></argument>, <argument pos:start="148:51" pos:end="148:53"><expr pos:start="148:51" pos:end="148:53"><literal type="char" pos:start="148:51" pos:end="148:53">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="150:17" pos:end="152:33"><if pos:start="150:17" pos:end="152:33">if <condition pos:start="150:20" pos:end="150:25">(<expr pos:start="150:21" pos:end="150:24"><name pos:start="150:21" pos:end="150:24">next</name></expr>)</condition><block type="pseudo" pos:start="152:21" pos:end="152:33"><block_content pos:start="152:21" pos:end="152:33">

                    <expr_stmt pos:start="152:21" pos:end="152:33"><expr pos:start="152:21" pos:end="152:32"><operator pos:start="152:21" pos:end="152:21">*</operator><name pos:start="152:22" pos:end="152:25">next</name> <operator pos:start="152:27" pos:end="152:27">=</operator> <literal type="char" pos:start="152:29" pos:end="152:32">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="154:17" pos:end="154:63"><expr pos:start="154:17" pos:end="154:62"><name pos:start="154:17" pos:end="154:36"><name pos:start="154:17" pos:end="154:23">sources</name><index pos:start="154:24" pos:end="154:36">[<expr pos:start="154:25" pos:end="154:35"><name pos:start="154:25" pos:end="154:35">num_sources</name></expr>]</index></name> <operator pos:start="154:38" pos:end="154:38">=</operator> <call pos:start="154:40" pos:end="154:62"><name pos:start="154:40" pos:end="154:48">av_strdup</name><argument_list pos:start="154:49" pos:end="154:62">(<argument pos:start="154:50" pos:end="154:61"><expr pos:start="154:50" pos:end="154:61"><name pos:start="154:50" pos:end="154:61">source_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="156:17" pos:end="158:30"><if pos:start="156:17" pos:end="158:30">if <condition pos:start="156:20" pos:end="156:42">(<expr pos:start="156:21" pos:end="156:41"><operator pos:start="156:21" pos:end="156:21">!</operator><name pos:start="156:22" pos:end="156:41"><name pos:start="156:22" pos:end="156:28">sources</name><index pos:start="156:29" pos:end="156:41">[<expr pos:start="156:30" pos:end="156:40"><name pos:start="156:30" pos:end="156:40">num_sources</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="158:21" pos:end="158:30"><block_content pos:start="158:21" pos:end="158:30">

                    <goto pos:start="158:21" pos:end="158:30">goto <name pos:start="158:26" pos:end="158:29">fail</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="160:17" pos:end="160:40"><expr pos:start="160:17" pos:end="160:39"><name pos:start="160:17" pos:end="160:28">source_start</name> <operator pos:start="160:30" pos:end="160:30">=</operator> <name pos:start="160:32" pos:end="160:35">next</name> <operator pos:start="160:37" pos:end="160:37">+</operator> <literal type="number" pos:start="160:39" pos:end="160:39">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="162:17" pos:end="162:30"><expr pos:start="162:17" pos:end="162:29"><name pos:start="162:17" pos:end="162:27">num_sources</name><operator pos:start="162:28" pos:end="162:29">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="164:17" pos:end="166:26"><if pos:start="164:17" pos:end="166:26">if <condition pos:start="164:20" pos:end="164:68">(<expr pos:start="164:21" pos:end="164:67"><name pos:start="164:21" pos:end="164:31">num_sources</name> <operator pos:start="164:33" pos:end="164:34">&gt;=</operator> <call pos:start="164:36" pos:end="164:58"><name pos:start="164:36" pos:end="164:49">FF_ARRAY_ELEMS</name><argument_list pos:start="164:50" pos:end="164:58">(<argument pos:start="164:51" pos:end="164:57"><expr pos:start="164:51" pos:end="164:57"><name pos:start="164:51" pos:end="164:57">sources</name></expr></argument>)</argument_list></call> <operator pos:start="164:60" pos:end="164:61">||</operator> <operator pos:start="164:63" pos:end="164:63">!</operator><name pos:start="164:64" pos:end="164:67">next</name></expr>)</condition><block type="pseudo" pos:start="166:21" pos:end="166:26"><block_content pos:start="166:21" pos:end="166:26">

                    <break pos:start="166:21" pos:end="166:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="176:5" pos:end="176:28">/* fill the dest addr */</comment>

    <expr_stmt pos:start="178:5" pos:end="178:84"><expr pos:start="178:5" pos:end="178:83"><call pos:start="178:5" pos:end="178:83"><name pos:start="178:5" pos:end="178:16">av_url_split</name><argument_list pos:start="178:17" pos:end="178:83">(<argument pos:start="178:18" pos:end="178:21"><expr pos:start="178:18" pos:end="178:21"><name pos:start="178:18" pos:end="178:21">NULL</name></expr></argument>, <argument pos:start="178:24" pos:end="178:24"><expr pos:start="178:24" pos:end="178:24"><literal type="number" pos:start="178:24" pos:end="178:24">0</literal></expr></argument>, <argument pos:start="178:27" pos:end="178:30"><expr pos:start="178:27" pos:end="178:30"><name pos:start="178:27" pos:end="178:30">NULL</name></expr></argument>, <argument pos:start="178:33" pos:end="178:33"><expr pos:start="178:33" pos:end="178:33"><literal type="number" pos:start="178:33" pos:end="178:33">0</literal></expr></argument>, <argument pos:start="178:36" pos:end="178:43"><expr pos:start="178:36" pos:end="178:43"><name pos:start="178:36" pos:end="178:43">hostname</name></expr></argument>, <argument pos:start="178:46" pos:end="178:61"><expr pos:start="178:46" pos:end="178:61"><sizeof pos:start="178:46" pos:end="178:61">sizeof<argument_list pos:start="178:52" pos:end="178:61">(<argument pos:start="178:53" pos:end="178:60"><expr pos:start="178:53" pos:end="178:60"><name pos:start="178:53" pos:end="178:60">hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="178:64" pos:end="178:68"><expr pos:start="178:64" pos:end="178:68"><operator pos:start="178:64" pos:end="178:64">&amp;</operator><name pos:start="178:65" pos:end="178:68">port</name></expr></argument>, <argument pos:start="178:71" pos:end="178:74"><expr pos:start="178:71" pos:end="178:74"><name pos:start="178:71" pos:end="178:74">NULL</name></expr></argument>, <argument pos:start="178:77" pos:end="178:77"><expr pos:start="178:77" pos:end="178:77"><literal type="number" pos:start="178:77" pos:end="178:77">0</literal></expr></argument>, <argument pos:start="178:80" pos:end="178:82"><expr pos:start="178:80" pos:end="178:82"><name pos:start="178:80" pos:end="178:82">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="182:5" pos:end="182:31">/* XXX: fix av_url_split */</comment>

    <if_stmt pos:start="184:5" pos:end="198:5"><if pos:start="184:5" pos:end="192:5">if <condition pos:start="184:8" pos:end="184:50">(<expr pos:start="184:9" pos:end="184:49"><name pos:start="184:9" pos:end="184:19"><name pos:start="184:9" pos:end="184:16">hostname</name><index pos:start="184:17" pos:end="184:19">[<expr pos:start="184:18" pos:end="184:18"><literal type="number" pos:start="184:18" pos:end="184:18">0</literal></expr>]</index></name> <operator pos:start="184:21" pos:end="184:22">==</operator> <literal type="char" pos:start="184:24" pos:end="184:27">'\0'</literal> <operator pos:start="184:29" pos:end="184:30">||</operator> <name pos:start="184:32" pos:end="184:42"><name pos:start="184:32" pos:end="184:39">hostname</name><index pos:start="184:40" pos:end="184:42">[<expr pos:start="184:41" pos:end="184:41"><literal type="number" pos:start="184:41" pos:end="184:41">0</literal></expr>]</index></name> <operator pos:start="184:44" pos:end="184:45">==</operator> <literal type="char" pos:start="184:47" pos:end="184:49">'?'</literal></expr>)</condition> <block pos:start="184:52" pos:end="192:5">{<block_content pos:start="188:9" pos:end="190:22">

        <comment type="block" pos:start="186:9" pos:end="186:49">/* only accepts null hostname if input */</comment>

        <if_stmt pos:start="188:9" pos:end="190:22"><if pos:start="188:9" pos:end="190:22">if <condition pos:start="188:12" pos:end="188:38">(<expr pos:start="188:13" pos:end="188:37"><operator pos:start="188:13" pos:end="188:13">!</operator><operator pos:start="188:14" pos:end="188:14">(</operator><name pos:start="188:15" pos:end="188:19">flags</name> <operator pos:start="188:21" pos:end="188:21">&amp;</operator> <name pos:start="188:23" pos:end="188:36">AVIO_FLAG_READ</name><operator pos:start="188:37" pos:end="188:37">)</operator></expr>)</condition><block type="pseudo" pos:start="190:13" pos:end="190:22"><block_content pos:start="190:13" pos:end="190:22">

            <goto pos:start="190:13" pos:end="190:22">goto <name pos:start="190:18" pos:end="190:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="192:7" pos:end="198:5">else <block pos:start="192:12" pos:end="198:5">{<block_content pos:start="194:9" pos:end="196:22">

        <if_stmt pos:start="194:9" pos:end="196:22"><if pos:start="194:9" pos:end="196:22">if <condition pos:start="194:12" pos:end="194:46">(<expr pos:start="194:13" pos:end="194:45"><call pos:start="194:13" pos:end="194:41"><name pos:start="194:13" pos:end="194:33">ff_udp_set_remote_url</name><argument_list pos:start="194:34" pos:end="194:41">(<argument pos:start="194:35" pos:end="194:35"><expr pos:start="194:35" pos:end="194:35"><name pos:start="194:35" pos:end="194:35">h</name></expr></argument>, <argument pos:start="194:38" pos:end="194:40"><expr pos:start="194:38" pos:end="194:40"><name pos:start="194:38" pos:end="194:40">uri</name></expr></argument>)</argument_list></call> <operator pos:start="194:43" pos:end="194:43">&lt;</operator> <literal type="number" pos:start="194:45" pos:end="194:45">0</literal></expr>)</condition><block type="pseudo" pos:start="196:13" pos:end="196:22"><block_content pos:start="196:13" pos:end="196:22">

            <goto pos:start="196:13" pos:end="196:22">goto <name pos:start="196:18" pos:end="196:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="202:5" pos:end="204:29"><if pos:start="202:5" pos:end="204:29">if <condition pos:start="202:8" pos:end="202:75">(<expr pos:start="202:9" pos:end="202:74"><operator pos:start="202:9" pos:end="202:9">(</operator><name pos:start="202:10" pos:end="202:24"><name pos:start="202:10" pos:end="202:10">s</name><operator pos:start="202:11" pos:end="202:12">-&gt;</operator><name pos:start="202:13" pos:end="202:24">is_multicast</name></name> <operator pos:start="202:26" pos:end="202:27">||</operator> <operator pos:start="202:29" pos:end="202:29">!</operator><name pos:start="202:30" pos:end="202:42"><name pos:start="202:30" pos:end="202:30">s</name><operator pos:start="202:31" pos:end="202:32">-&gt;</operator><name pos:start="202:33" pos:end="202:42">local_port</name></name><operator pos:start="202:43" pos:end="202:43">)</operator> <operator pos:start="202:45" pos:end="202:46">&amp;&amp;</operator> <operator pos:start="202:48" pos:end="202:48">(</operator><name pos:start="202:49" pos:end="202:56"><name pos:start="202:49" pos:end="202:49">h</name><operator pos:start="202:50" pos:end="202:51">-&gt;</operator><name pos:start="202:52" pos:end="202:56">flags</name></name> <operator pos:start="202:58" pos:end="202:58">&amp;</operator> <name pos:start="202:60" pos:end="202:73">AVIO_FLAG_READ</name><operator pos:start="202:74" pos:end="202:74">)</operator></expr>)</condition><block type="pseudo" pos:start="204:9" pos:end="204:29"><block_content pos:start="204:9" pos:end="204:29">

        <expr_stmt pos:start="204:9" pos:end="204:29"><expr pos:start="204:9" pos:end="204:28"><name pos:start="204:9" pos:end="204:21"><name pos:start="204:9" pos:end="204:9">s</name><operator pos:start="204:10" pos:end="204:11">-&gt;</operator><name pos:start="204:12" pos:end="204:21">local_port</name></name> <operator pos:start="204:23" pos:end="204:23">=</operator> <name pos:start="204:25" pos:end="204:28">port</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="206:5" pos:end="206:61"><expr pos:start="206:5" pos:end="206:60"><name pos:start="206:5" pos:end="206:10">udp_fd</name> <operator pos:start="206:12" pos:end="206:12">=</operator> <call pos:start="206:14" pos:end="206:60"><name pos:start="206:14" pos:end="206:30">udp_socket_create</name><argument_list pos:start="206:31" pos:end="206:60">(<argument pos:start="206:32" pos:end="206:32"><expr pos:start="206:32" pos:end="206:32"><name pos:start="206:32" pos:end="206:32">s</name></expr></argument>, <argument pos:start="206:35" pos:end="206:42"><expr pos:start="206:35" pos:end="206:42"><operator pos:start="206:35" pos:end="206:35">&amp;</operator><name pos:start="206:36" pos:end="206:42">my_addr</name></expr></argument>, <argument pos:start="206:45" pos:end="206:48"><expr pos:start="206:45" pos:end="206:48"><operator pos:start="206:45" pos:end="206:45">&amp;</operator><name pos:start="206:46" pos:end="206:48">len</name></expr></argument>, <argument pos:start="206:51" pos:end="206:59"><expr pos:start="206:51" pos:end="206:59"><name pos:start="206:51" pos:end="206:59">localaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="208:5" pos:end="210:18"><if pos:start="208:5" pos:end="210:18">if <condition pos:start="208:8" pos:end="208:19">(<expr pos:start="208:9" pos:end="208:18"><name pos:start="208:9" pos:end="208:14">udp_fd</name> <operator pos:start="208:16" pos:end="208:16">&lt;</operator> <literal type="number" pos:start="208:18" pos:end="208:18">0</literal></expr>)</condition><block type="pseudo" pos:start="210:9" pos:end="210:18"><block_content pos:start="210:9" pos:end="210:18">

        <goto pos:start="210:9" pos:end="210:18">goto <name pos:start="210:14" pos:end="210:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="214:5" pos:end="218:7">/* Follow the requested reuse option, unless it's multicast in which

     * case enable reuse unless explicitly disabled.

     */</comment>

    <if_stmt pos:start="220:5" pos:end="228:5"><if pos:start="220:5" pos:end="228:5">if <condition pos:start="220:8" pos:end="220:65">(<expr pos:start="220:9" pos:end="220:64"><name pos:start="220:9" pos:end="220:23"><name pos:start="220:9" pos:end="220:9">s</name><operator pos:start="220:10" pos:end="220:11">-&gt;</operator><name pos:start="220:12" pos:end="220:23">reuse_socket</name></name> <operator pos:start="220:25" pos:end="220:26">||</operator> <operator pos:start="220:28" pos:end="220:28">(</operator><name pos:start="220:29" pos:end="220:43"><name pos:start="220:29" pos:end="220:29">s</name><operator pos:start="220:30" pos:end="220:31">-&gt;</operator><name pos:start="220:32" pos:end="220:43">is_multicast</name></name> <operator pos:start="220:45" pos:end="220:46">&amp;&amp;</operator> <operator pos:start="220:48" pos:end="220:48">!</operator><name pos:start="220:49" pos:end="220:63">reuse_specified</name><operator pos:start="220:64" pos:end="220:64">)</operator></expr>)</condition> <block pos:start="220:67" pos:end="228:5">{<block_content pos:start="222:9" pos:end="226:22">

        <expr_stmt pos:start="222:9" pos:end="222:28"><expr pos:start="222:9" pos:end="222:27"><name pos:start="222:9" pos:end="222:23"><name pos:start="222:9" pos:end="222:9">s</name><operator pos:start="222:10" pos:end="222:11">-&gt;</operator><name pos:start="222:12" pos:end="222:23">reuse_socket</name></name> <operator pos:start="222:25" pos:end="222:25">=</operator> <literal type="number" pos:start="222:27" pos:end="222:27">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="224:9" pos:end="226:22"><if pos:start="224:9" pos:end="226:22">if <condition pos:start="224:12" pos:end="224:108">(<expr pos:start="224:13" pos:end="224:107"><call pos:start="224:13" pos:end="224:102"><name pos:start="224:13" pos:end="224:22">setsockopt</name> <argument_list pos:start="224:24" pos:end="224:102">(<argument pos:start="224:25" pos:end="224:30"><expr pos:start="224:25" pos:end="224:30"><name pos:start="224:25" pos:end="224:30">udp_fd</name></expr></argument>, <argument pos:start="224:33" pos:end="224:42"><expr pos:start="224:33" pos:end="224:42"><name pos:start="224:33" pos:end="224:42">SOL_SOCKET</name></expr></argument>, <argument pos:start="224:45" pos:end="224:56"><expr pos:start="224:45" pos:end="224:56"><name pos:start="224:45" pos:end="224:56">SO_REUSEADDR</name></expr></argument>, <argument pos:start="224:59" pos:end="224:76"><expr pos:start="224:59" pos:end="224:76"><operator pos:start="224:59" pos:end="224:59">&amp;</operator><operator pos:start="224:60" pos:end="224:60">(</operator><name pos:start="224:61" pos:end="224:75"><name pos:start="224:61" pos:end="224:61">s</name><operator pos:start="224:62" pos:end="224:63">-&gt;</operator><name pos:start="224:64" pos:end="224:75">reuse_socket</name></name><operator pos:start="224:76" pos:end="224:76">)</operator></expr></argument>, <argument pos:start="224:79" pos:end="224:101"><expr pos:start="224:79" pos:end="224:101"><sizeof pos:start="224:79" pos:end="224:101">sizeof<argument_list pos:start="224:85" pos:end="224:101">(<argument pos:start="224:86" pos:end="224:100"><expr pos:start="224:86" pos:end="224:100"><name pos:start="224:86" pos:end="224:100"><name pos:start="224:86" pos:end="224:86">s</name><operator pos:start="224:87" pos:end="224:88">-&gt;</operator><name pos:start="224:89" pos:end="224:100">reuse_socket</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="224:104" pos:end="224:105">!=</operator> <literal type="number" pos:start="224:107" pos:end="224:107">0</literal></expr>)</condition><block type="pseudo" pos:start="226:13" pos:end="226:22"><block_content pos:start="226:13" pos:end="226:22">

            <goto pos:start="226:13" pos:end="226:22">goto <name pos:start="226:18" pos:end="226:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="232:5" pos:end="238:79">/* If multicast, try binding the multicast address first, to avoid

     * receiving UDP packets from other sources aimed at the same UDP

     * port. This fails on windows. This makes sending to the same address

     * using sendto() fail, so only do it if we're opened in read-only mode. */</comment>

    <if_stmt pos:start="240:5" pos:end="244:5"><if pos:start="240:5" pos:end="244:5">if <condition pos:start="240:8" pos:end="240:57">(<expr pos:start="240:9" pos:end="240:56"><name pos:start="240:9" pos:end="240:23"><name pos:start="240:9" pos:end="240:9">s</name><operator pos:start="240:10" pos:end="240:11">-&gt;</operator><name pos:start="240:12" pos:end="240:23">is_multicast</name></name> <operator pos:start="240:25" pos:end="240:26">&amp;&amp;</operator> <operator pos:start="240:28" pos:end="240:28">!</operator><operator pos:start="240:29" pos:end="240:29">(</operator><name pos:start="240:30" pos:end="240:37"><name pos:start="240:30" pos:end="240:30">h</name><operator pos:start="240:31" pos:end="240:32">-&gt;</operator><name pos:start="240:33" pos:end="240:37">flags</name></name> <operator pos:start="240:39" pos:end="240:39">&amp;</operator> <name pos:start="240:41" pos:end="240:55">AVIO_FLAG_WRITE</name><operator pos:start="240:56" pos:end="240:56">)</operator></expr>)</condition> <block pos:start="240:59" pos:end="244:5">{<block_content pos:start="242:9" pos:end="242:70">

        <expr_stmt pos:start="242:9" pos:end="242:70"><expr pos:start="242:9" pos:end="242:69"><name pos:start="242:9" pos:end="242:16">bind_ret</name> <operator pos:start="242:18" pos:end="242:18">=</operator> <call pos:start="242:20" pos:end="242:69"><name pos:start="242:20" pos:end="242:23">bind</name><argument_list pos:start="242:24" pos:end="242:69">(<argument pos:start="242:25" pos:end="242:30"><expr pos:start="242:25" pos:end="242:30"><name pos:start="242:25" pos:end="242:30">udp_fd</name></expr></argument>,<argument pos:start="242:32" pos:end="242:63"><expr pos:start="242:32" pos:end="242:63"><operator pos:start="242:32" pos:end="242:32">(</operator>struct <name pos:start="242:40" pos:end="242:47">sockaddr</name> <operator pos:start="242:49" pos:end="242:49">*</operator><operator pos:start="242:50" pos:end="242:50">)</operator><operator pos:start="242:51" pos:end="242:51">&amp;</operator><name pos:start="242:52" pos:end="242:63"><name pos:start="242:52" pos:end="242:52">s</name><operator pos:start="242:53" pos:end="242:54">-&gt;</operator><name pos:start="242:55" pos:end="242:63">dest_addr</name></name></expr></argument>, <argument pos:start="242:66" pos:end="242:68"><expr pos:start="242:66" pos:end="242:68"><name pos:start="242:66" pos:end="242:68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="246:5" pos:end="248:21">/* bind to the local address if not multicast or if the multicast

     * bind failed */</comment>

    <comment type="block" pos:start="250:5" pos:end="250:61">/* the bind is needed to give a port to the socket now */</comment>

    <if_stmt pos:start="252:5" pos:end="258:5"><if pos:start="252:5" pos:end="258:5">if <condition pos:start="252:8" pos:end="252:74">(<expr pos:start="252:9" pos:end="252:73"><name pos:start="252:9" pos:end="252:16">bind_ret</name> <operator pos:start="252:18" pos:end="252:18">&lt;</operator> <literal type="number" pos:start="252:20" pos:end="252:20">0</literal> <operator pos:start="252:22" pos:end="252:23">&amp;&amp;</operator> <call pos:start="252:25" pos:end="252:69"><name pos:start="252:25" pos:end="252:28">bind</name><argument_list pos:start="252:29" pos:end="252:69">(<argument pos:start="252:30" pos:end="252:35"><expr pos:start="252:30" pos:end="252:35"><name pos:start="252:30" pos:end="252:35">udp_fd</name></expr></argument>,<argument pos:start="252:37" pos:end="252:63"><expr pos:start="252:37" pos:end="252:63"><operator pos:start="252:37" pos:end="252:37">(</operator>struct <name pos:start="252:45" pos:end="252:52">sockaddr</name> <operator pos:start="252:54" pos:end="252:54">*</operator><operator pos:start="252:55" pos:end="252:55">)</operator><operator pos:start="252:56" pos:end="252:56">&amp;</operator><name pos:start="252:57" pos:end="252:63">my_addr</name></expr></argument>, <argument pos:start="252:66" pos:end="252:68"><expr pos:start="252:66" pos:end="252:68"><name pos:start="252:66" pos:end="252:68">len</name></expr></argument>)</argument_list></call> <operator pos:start="252:71" pos:end="252:71">&lt;</operator> <literal type="number" pos:start="252:73" pos:end="252:73">0</literal></expr>)</condition> <block pos:start="252:76" pos:end="258:5">{<block_content pos:start="254:9" pos:end="256:18">

        <expr_stmt pos:start="254:9" pos:end="254:54"><expr pos:start="254:9" pos:end="254:53"><call pos:start="254:9" pos:end="254:53"><name pos:start="254:9" pos:end="254:21">log_net_error</name><argument_list pos:start="254:22" pos:end="254:53">(<argument pos:start="254:23" pos:end="254:23"><expr pos:start="254:23" pos:end="254:23"><name pos:start="254:23" pos:end="254:23">h</name></expr></argument>, <argument pos:start="254:26" pos:end="254:37"><expr pos:start="254:26" pos:end="254:37"><name pos:start="254:26" pos:end="254:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="254:40" pos:end="254:52"><expr pos:start="254:40" pos:end="254:52"><literal type="string" pos:start="254:40" pos:end="254:52">"bind failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="256:9" pos:end="256:18">goto <name pos:start="256:14" pos:end="256:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="262:5" pos:end="262:26"><expr pos:start="262:5" pos:end="262:25"><name pos:start="262:5" pos:end="262:7">len</name> <operator pos:start="262:9" pos:end="262:9">=</operator> <sizeof pos:start="262:11" pos:end="262:25">sizeof<argument_list pos:start="262:17" pos:end="262:25">(<argument pos:start="262:18" pos:end="262:24"><expr pos:start="262:18" pos:end="262:24"><name pos:start="262:18" pos:end="262:24">my_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="264:5" pos:end="264:59"><expr pos:start="264:5" pos:end="264:58"><call pos:start="264:5" pos:end="264:58"><name pos:start="264:5" pos:end="264:15">getsockname</name><argument_list pos:start="264:16" pos:end="264:58">(<argument pos:start="264:17" pos:end="264:22"><expr pos:start="264:17" pos:end="264:22"><name pos:start="264:17" pos:end="264:22">udp_fd</name></expr></argument>, <argument pos:start="264:25" pos:end="264:51"><expr pos:start="264:25" pos:end="264:51"><operator pos:start="264:25" pos:end="264:25">(</operator>struct <name pos:start="264:33" pos:end="264:40">sockaddr</name> <operator pos:start="264:42" pos:end="264:42">*</operator><operator pos:start="264:43" pos:end="264:43">)</operator><operator pos:start="264:44" pos:end="264:44">&amp;</operator><name pos:start="264:45" pos:end="264:51">my_addr</name></expr></argument>, <argument pos:start="264:54" pos:end="264:57"><expr pos:start="264:54" pos:end="264:57"><operator pos:start="264:54" pos:end="264:54">&amp;</operator><name pos:start="264:55" pos:end="264:57">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="266:5" pos:end="266:44"><expr pos:start="266:5" pos:end="266:43"><name pos:start="266:5" pos:end="266:17"><name pos:start="266:5" pos:end="266:5">s</name><operator pos:start="266:6" pos:end="266:7">-&gt;</operator><name pos:start="266:8" pos:end="266:17">local_port</name></name> <operator pos:start="266:19" pos:end="266:19">=</operator> <call pos:start="266:21" pos:end="266:43"><name pos:start="266:21" pos:end="266:28">udp_port</name><argument_list pos:start="266:29" pos:end="266:43">(<argument pos:start="266:30" pos:end="266:37"><expr pos:start="266:30" pos:end="266:37"><operator pos:start="266:30" pos:end="266:30">&amp;</operator><name pos:start="266:31" pos:end="266:37">my_addr</name></expr></argument>, <argument pos:start="266:40" pos:end="266:42"><expr pos:start="266:40" pos:end="266:42"><name pos:start="266:40" pos:end="266:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="270:5" pos:end="318:5"><if pos:start="270:5" pos:end="318:5">if <condition pos:start="270:8" pos:end="270:24">(<expr pos:start="270:9" pos:end="270:23"><name pos:start="270:9" pos:end="270:23"><name pos:start="270:9" pos:end="270:9">s</name><operator pos:start="270:10" pos:end="270:11">-&gt;</operator><name pos:start="270:12" pos:end="270:23">is_multicast</name></name></expr>)</condition> <block pos:start="270:26" pos:end="318:5">{<block_content pos:start="272:9" pos:end="316:9">

        <if_stmt pos:start="272:9" pos:end="280:9"><if pos:start="272:9" pos:end="280:9">if <condition pos:start="272:12" pos:end="272:39">(<expr pos:start="272:13" pos:end="272:38"><name pos:start="272:13" pos:end="272:20"><name pos:start="272:13" pos:end="272:13">h</name><operator pos:start="272:14" pos:end="272:15">-&gt;</operator><name pos:start="272:16" pos:end="272:20">flags</name></name> <operator pos:start="272:22" pos:end="272:22">&amp;</operator> <name pos:start="272:24" pos:end="272:38">AVIO_FLAG_WRITE</name></expr>)</condition> <block pos:start="272:41" pos:end="280:9">{<block_content pos:start="276:13" pos:end="278:26">

            <comment type="block" pos:start="274:13" pos:end="274:24">/* output */</comment>

            <if_stmt pos:start="276:13" pos:end="278:26"><if pos:start="276:13" pos:end="278:26">if <condition pos:start="276:16" pos:end="276:92">(<expr pos:start="276:17" pos:end="276:91"><call pos:start="276:17" pos:end="276:87"><name pos:start="276:17" pos:end="276:37">udp_set_multicast_ttl</name><argument_list pos:start="276:38" pos:end="276:87">(<argument pos:start="276:39" pos:end="276:44"><expr pos:start="276:39" pos:end="276:44"><name pos:start="276:39" pos:end="276:44">udp_fd</name></expr></argument>, <argument pos:start="276:47" pos:end="276:52"><expr pos:start="276:47" pos:end="276:52"><name pos:start="276:47" pos:end="276:52"><name pos:start="276:47" pos:end="276:47">s</name><operator pos:start="276:48" pos:end="276:49">-&gt;</operator><name pos:start="276:50" pos:end="276:52">ttl</name></name></expr></argument>, <argument pos:start="276:55" pos:end="276:86"><expr pos:start="276:55" pos:end="276:86"><operator pos:start="276:55" pos:end="276:55">(</operator>struct <name pos:start="276:63" pos:end="276:70">sockaddr</name> <operator pos:start="276:72" pos:end="276:72">*</operator><operator pos:start="276:73" pos:end="276:73">)</operator><operator pos:start="276:74" pos:end="276:74">&amp;</operator><name pos:start="276:75" pos:end="276:86"><name pos:start="276:75" pos:end="276:75">s</name><operator pos:start="276:76" pos:end="276:77">-&gt;</operator><name pos:start="276:78" pos:end="276:86">dest_addr</name></name></expr></argument>)</argument_list></call> <operator pos:start="276:89" pos:end="276:89">&lt;</operator> <literal type="number" pos:start="276:91" pos:end="276:91">0</literal></expr>)</condition><block type="pseudo" pos:start="278:17" pos:end="278:26"><block_content pos:start="278:17" pos:end="278:26">

                <goto pos:start="278:17" pos:end="278:26">goto <name pos:start="278:22" pos:end="278:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="282:9" pos:end="316:9"><if pos:start="282:9" pos:end="316:9">if <condition pos:start="282:12" pos:end="282:38">(<expr pos:start="282:13" pos:end="282:37"><name pos:start="282:13" pos:end="282:20"><name pos:start="282:13" pos:end="282:13">h</name><operator pos:start="282:14" pos:end="282:15">-&gt;</operator><name pos:start="282:16" pos:end="282:20">flags</name></name> <operator pos:start="282:22" pos:end="282:22">&amp;</operator> <name pos:start="282:24" pos:end="282:37">AVIO_FLAG_READ</name></expr>)</condition> <block pos:start="282:40" pos:end="316:9">{<block_content pos:start="286:13" pos:end="314:13">

            <comment type="block" pos:start="284:13" pos:end="284:23">/* input */</comment>

            <if_stmt pos:start="286:13" pos:end="314:13"><if pos:start="286:13" pos:end="302:13">if <condition pos:start="286:16" pos:end="286:45">(<expr pos:start="286:17" pos:end="286:44"><name pos:start="286:17" pos:end="286:27">num_sources</name> <operator pos:start="286:29" pos:end="286:30">==</operator> <literal type="number" pos:start="286:32" pos:end="286:32">0</literal> <operator pos:start="286:34" pos:end="286:35">||</operator> <operator pos:start="286:37" pos:end="286:37">!</operator><name pos:start="286:38" pos:end="286:44">include</name></expr>)</condition> <block pos:start="286:47" pos:end="302:13">{<block_content pos:start="288:17" pos:end="300:17">

                <if_stmt pos:start="288:17" pos:end="290:30"><if pos:start="288:17" pos:end="290:30">if <condition pos:start="288:20" pos:end="288:91">(<expr pos:start="288:21" pos:end="288:90"><call pos:start="288:21" pos:end="288:86"><name pos:start="288:21" pos:end="288:44">udp_join_multicast_group</name><argument_list pos:start="288:45" pos:end="288:86">(<argument pos:start="288:46" pos:end="288:51"><expr pos:start="288:46" pos:end="288:51"><name pos:start="288:46" pos:end="288:51">udp_fd</name></expr></argument>, <argument pos:start="288:54" pos:end="288:85"><expr pos:start="288:54" pos:end="288:85"><operator pos:start="288:54" pos:end="288:54">(</operator>struct <name pos:start="288:62" pos:end="288:69">sockaddr</name> <operator pos:start="288:71" pos:end="288:71">*</operator><operator pos:start="288:72" pos:end="288:72">)</operator><operator pos:start="288:73" pos:end="288:73">&amp;</operator><name pos:start="288:74" pos:end="288:85"><name pos:start="288:74" pos:end="288:74">s</name><operator pos:start="288:75" pos:end="288:76">-&gt;</operator><name pos:start="288:77" pos:end="288:85">dest_addr</name></name></expr></argument>)</argument_list></call> <operator pos:start="288:88" pos:end="288:88">&lt;</operator> <literal type="number" pos:start="288:90" pos:end="288:90">0</literal></expr>)</condition><block type="pseudo" pos:start="290:21" pos:end="290:30"><block_content pos:start="290:21" pos:end="290:30">

                    <goto pos:start="290:21" pos:end="290:30">goto <name pos:start="290:26" pos:end="290:29">fail</name>;</goto></block_content></block></if></if_stmt>



                <if_stmt pos:start="294:17" pos:end="300:17"><if pos:start="294:17" pos:end="300:17">if <condition pos:start="294:20" pos:end="294:32">(<expr pos:start="294:21" pos:end="294:31"><name pos:start="294:21" pos:end="294:31">num_sources</name></expr>)</condition> <block pos:start="294:34" pos:end="300:17">{<block_content pos:start="296:21" pos:end="298:34">

                    <if_stmt pos:start="296:21" pos:end="298:34"><if pos:start="296:21" pos:end="298:34">if <condition pos:start="296:24" pos:end="296:139">(<expr pos:start="296:25" pos:end="296:138"><call pos:start="296:25" pos:end="296:134"><name pos:start="296:25" pos:end="296:49">udp_set_multicast_sources</name><argument_list pos:start="296:50" pos:end="296:134">(<argument pos:start="296:51" pos:end="296:56"><expr pos:start="296:51" pos:end="296:56"><name pos:start="296:51" pos:end="296:56">udp_fd</name></expr></argument>, <argument pos:start="296:59" pos:end="296:90"><expr pos:start="296:59" pos:end="296:90"><operator pos:start="296:59" pos:end="296:59">(</operator>struct <name pos:start="296:67" pos:end="296:74">sockaddr</name> <operator pos:start="296:76" pos:end="296:76">*</operator><operator pos:start="296:77" pos:end="296:77">)</operator><operator pos:start="296:78" pos:end="296:78">&amp;</operator><name pos:start="296:79" pos:end="296:90"><name pos:start="296:79" pos:end="296:79">s</name><operator pos:start="296:80" pos:end="296:81">-&gt;</operator><name pos:start="296:82" pos:end="296:90">dest_addr</name></name></expr></argument>, <argument pos:start="296:93" pos:end="296:108"><expr pos:start="296:93" pos:end="296:108"><name pos:start="296:93" pos:end="296:108"><name pos:start="296:93" pos:end="296:93">s</name><operator pos:start="296:94" pos:end="296:95">-&gt;</operator><name pos:start="296:96" pos:end="296:108">dest_addr_len</name></name></expr></argument>, <argument pos:start="296:111" pos:end="296:117"><expr pos:start="296:111" pos:end="296:117"><name pos:start="296:111" pos:end="296:117">sources</name></expr></argument>, <argument pos:start="296:120" pos:end="296:130"><expr pos:start="296:120" pos:end="296:130"><name pos:start="296:120" pos:end="296:130">num_sources</name></expr></argument>, <argument pos:start="296:133" pos:end="296:133"><expr pos:start="296:133" pos:end="296:133"><literal type="number" pos:start="296:133" pos:end="296:133">0</literal></expr></argument>)</argument_list></call> <operator pos:start="296:136" pos:end="296:136">&lt;</operator> <literal type="number" pos:start="296:138" pos:end="296:138">0</literal></expr>)</condition><block type="pseudo" pos:start="298:25" pos:end="298:34"><block_content pos:start="298:25" pos:end="298:34">

                        <goto pos:start="298:25" pos:end="298:34">goto <name pos:start="298:30" pos:end="298:33">fail</name>;</goto></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="302:15" pos:end="308:13">else if <condition pos:start="302:23" pos:end="302:46">(<expr pos:start="302:24" pos:end="302:45"><name pos:start="302:24" pos:end="302:30">include</name> <operator pos:start="302:32" pos:end="302:33">&amp;&amp;</operator> <name pos:start="302:35" pos:end="302:45">num_sources</name></expr>)</condition> <block pos:start="302:48" pos:end="308:13">{<block_content pos:start="304:17" pos:end="306:30">

                <if_stmt pos:start="304:17" pos:end="306:30"><if pos:start="304:17" pos:end="306:30">if <condition pos:start="304:20" pos:end="304:135">(<expr pos:start="304:21" pos:end="304:134"><call pos:start="304:21" pos:end="304:130"><name pos:start="304:21" pos:end="304:45">udp_set_multicast_sources</name><argument_list pos:start="304:46" pos:end="304:130">(<argument pos:start="304:47" pos:end="304:52"><expr pos:start="304:47" pos:end="304:52"><name pos:start="304:47" pos:end="304:52">udp_fd</name></expr></argument>, <argument pos:start="304:55" pos:end="304:86"><expr pos:start="304:55" pos:end="304:86"><operator pos:start="304:55" pos:end="304:55">(</operator>struct <name pos:start="304:63" pos:end="304:70">sockaddr</name> <operator pos:start="304:72" pos:end="304:72">*</operator><operator pos:start="304:73" pos:end="304:73">)</operator><operator pos:start="304:74" pos:end="304:74">&amp;</operator><name pos:start="304:75" pos:end="304:86"><name pos:start="304:75" pos:end="304:75">s</name><operator pos:start="304:76" pos:end="304:77">-&gt;</operator><name pos:start="304:78" pos:end="304:86">dest_addr</name></name></expr></argument>, <argument pos:start="304:89" pos:end="304:104"><expr pos:start="304:89" pos:end="304:104"><name pos:start="304:89" pos:end="304:104"><name pos:start="304:89" pos:end="304:89">s</name><operator pos:start="304:90" pos:end="304:91">-&gt;</operator><name pos:start="304:92" pos:end="304:104">dest_addr_len</name></name></expr></argument>, <argument pos:start="304:107" pos:end="304:113"><expr pos:start="304:107" pos:end="304:113"><name pos:start="304:107" pos:end="304:113">sources</name></expr></argument>, <argument pos:start="304:116" pos:end="304:126"><expr pos:start="304:116" pos:end="304:126"><name pos:start="304:116" pos:end="304:126">num_sources</name></expr></argument>, <argument pos:start="304:129" pos:end="304:129"><expr pos:start="304:129" pos:end="304:129"><literal type="number" pos:start="304:129" pos:end="304:129">1</literal></expr></argument>)</argument_list></call> <operator pos:start="304:132" pos:end="304:132">&lt;</operator> <literal type="number" pos:start="304:134" pos:end="304:134">0</literal></expr>)</condition><block type="pseudo" pos:start="306:21" pos:end="306:30"><block_content pos:start="306:21" pos:end="306:30">

                    <goto pos:start="306:21" pos:end="306:30">goto <name pos:start="306:26" pos:end="306:29">fail</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="308:15" pos:end="314:13">else <block pos:start="308:20" pos:end="314:13">{<block_content pos:start="310:17" pos:end="312:26">

                <expr_stmt pos:start="310:17" pos:end="310:111"><expr pos:start="310:17" pos:end="310:110"><call pos:start="310:17" pos:end="310:110"><name pos:start="310:17" pos:end="310:22">av_log</name><argument_list pos:start="310:23" pos:end="310:110">(<argument pos:start="310:24" pos:end="310:27"><expr pos:start="310:24" pos:end="310:27"><name pos:start="310:24" pos:end="310:27">NULL</name></expr></argument>, <argument pos:start="310:30" pos:end="310:41"><expr pos:start="310:30" pos:end="310:41"><name pos:start="310:30" pos:end="310:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="310:44" pos:end="310:109"><expr pos:start="310:44" pos:end="310:109"><literal type="string" pos:start="310:44" pos:end="310:109">"invalid udp settings: inclusive multicast but no sources given\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="312:17" pos:end="312:26">goto <name pos:start="312:22" pos:end="312:25">fail</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="322:5" pos:end="354:5"><if pos:start="322:5" pos:end="336:5">if <condition pos:start="322:8" pos:end="322:18">(<expr pos:start="322:9" pos:end="322:17"><name pos:start="322:9" pos:end="322:17">is_output</name></expr>)</condition> <block pos:start="322:20" pos:end="336:5">{<block_content pos:start="326:9" pos:end="334:9">

        <comment type="block" pos:start="324:9" pos:end="324:52">/* limit the tx buf size to limit latency */</comment>

        <expr_stmt pos:start="326:9" pos:end="326:29"><expr pos:start="326:9" pos:end="326:28"><name pos:start="326:9" pos:end="326:11">tmp</name> <operator pos:start="326:13" pos:end="326:13">=</operator> <name pos:start="326:15" pos:end="326:28"><name pos:start="326:15" pos:end="326:15">s</name><operator pos:start="326:16" pos:end="326:17">-&gt;</operator><name pos:start="326:18" pos:end="326:28">buffer_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="328:9" pos:end="334:9"><if pos:start="328:9" pos:end="334:9">if <condition pos:start="328:12" pos:end="328:77">(<expr pos:start="328:13" pos:end="328:76"><call pos:start="328:13" pos:end="328:72"><name pos:start="328:13" pos:end="328:22">setsockopt</name><argument_list pos:start="328:23" pos:end="328:72">(<argument pos:start="328:24" pos:end="328:29"><expr pos:start="328:24" pos:end="328:29"><name pos:start="328:24" pos:end="328:29">udp_fd</name></expr></argument>, <argument pos:start="328:32" pos:end="328:41"><expr pos:start="328:32" pos:end="328:41"><name pos:start="328:32" pos:end="328:41">SOL_SOCKET</name></expr></argument>, <argument pos:start="328:44" pos:end="328:52"><expr pos:start="328:44" pos:end="328:52"><name pos:start="328:44" pos:end="328:52">SO_SNDBUF</name></expr></argument>, <argument pos:start="328:55" pos:end="328:58"><expr pos:start="328:55" pos:end="328:58"><operator pos:start="328:55" pos:end="328:55">&amp;</operator><name pos:start="328:56" pos:end="328:58">tmp</name></expr></argument>, <argument pos:start="328:61" pos:end="328:71"><expr pos:start="328:61" pos:end="328:71"><sizeof pos:start="328:61" pos:end="328:71">sizeof<argument_list pos:start="328:67" pos:end="328:71">(<argument pos:start="328:68" pos:end="328:70"><expr pos:start="328:68" pos:end="328:70"><name pos:start="328:68" pos:end="328:70">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="328:74" pos:end="328:74">&lt;</operator> <literal type="number" pos:start="328:76" pos:end="328:76">0</literal></expr>)</condition> <block pos:start="328:79" pos:end="334:9">{<block_content pos:start="330:13" pos:end="332:22">

            <expr_stmt pos:start="330:13" pos:end="330:68"><expr pos:start="330:13" pos:end="330:67"><call pos:start="330:13" pos:end="330:67"><name pos:start="330:13" pos:end="330:25">log_net_error</name><argument_list pos:start="330:26" pos:end="330:67">(<argument pos:start="330:27" pos:end="330:27"><expr pos:start="330:27" pos:end="330:27"><name pos:start="330:27" pos:end="330:27">h</name></expr></argument>, <argument pos:start="330:30" pos:end="330:41"><expr pos:start="330:30" pos:end="330:41"><name pos:start="330:30" pos:end="330:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="330:44" pos:end="330:66"><expr pos:start="330:44" pos:end="330:66"><literal type="string" pos:start="330:44" pos:end="330:66">"setsockopt(SO_SNDBUF)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="332:13" pos:end="332:22">goto <name pos:start="332:18" pos:end="332:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="336:7" pos:end="354:5">else <block pos:start="336:12" pos:end="354:5">{<block_content pos:start="342:9" pos:end="352:38">

        <comment type="block" pos:start="338:9" pos:end="340:73">/* set udp recv buffer size to the largest possible udp packet size to

         * avoid losing data on OSes that set this too low by default. */</comment>

        <expr_stmt pos:start="342:9" pos:end="342:29"><expr pos:start="342:9" pos:end="342:28"><name pos:start="342:9" pos:end="342:11">tmp</name> <operator pos:start="342:13" pos:end="342:13">=</operator> <name pos:start="342:15" pos:end="342:28"><name pos:start="342:15" pos:end="342:15">s</name><operator pos:start="342:16" pos:end="342:17">-&gt;</operator><name pos:start="342:18" pos:end="342:28">buffer_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="344:9" pos:end="348:9"><if pos:start="344:9" pos:end="348:9">if <condition pos:start="344:12" pos:end="344:77">(<expr pos:start="344:13" pos:end="344:76"><call pos:start="344:13" pos:end="344:72"><name pos:start="344:13" pos:end="344:22">setsockopt</name><argument_list pos:start="344:23" pos:end="344:72">(<argument pos:start="344:24" pos:end="344:29"><expr pos:start="344:24" pos:end="344:29"><name pos:start="344:24" pos:end="344:29">udp_fd</name></expr></argument>, <argument pos:start="344:32" pos:end="344:41"><expr pos:start="344:32" pos:end="344:41"><name pos:start="344:32" pos:end="344:41">SOL_SOCKET</name></expr></argument>, <argument pos:start="344:44" pos:end="344:52"><expr pos:start="344:44" pos:end="344:52"><name pos:start="344:44" pos:end="344:52">SO_RCVBUF</name></expr></argument>, <argument pos:start="344:55" pos:end="344:58"><expr pos:start="344:55" pos:end="344:58"><operator pos:start="344:55" pos:end="344:55">&amp;</operator><name pos:start="344:56" pos:end="344:58">tmp</name></expr></argument>, <argument pos:start="344:61" pos:end="344:71"><expr pos:start="344:61" pos:end="344:71"><sizeof pos:start="344:61" pos:end="344:71">sizeof<argument_list pos:start="344:67" pos:end="344:71">(<argument pos:start="344:68" pos:end="344:70"><expr pos:start="344:68" pos:end="344:70"><name pos:start="344:68" pos:end="344:70">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="344:74" pos:end="344:74">&lt;</operator> <literal type="number" pos:start="344:76" pos:end="344:76">0</literal></expr>)</condition> <block pos:start="344:79" pos:end="348:9">{<block_content pos:start="346:13" pos:end="346:71">

            <expr_stmt pos:start="346:13" pos:end="346:71"><expr pos:start="346:13" pos:end="346:70"><call pos:start="346:13" pos:end="346:70"><name pos:start="346:13" pos:end="346:25">log_net_error</name><argument_list pos:start="346:26" pos:end="346:70">(<argument pos:start="346:27" pos:end="346:27"><expr pos:start="346:27" pos:end="346:27"><name pos:start="346:27" pos:end="346:27">h</name></expr></argument>, <argument pos:start="346:30" pos:end="346:43"><expr pos:start="346:30" pos:end="346:43"><name pos:start="346:30" pos:end="346:43">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="346:46" pos:end="346:69"><expr pos:start="346:46" pos:end="346:69"><literal type="string" pos:start="346:46" pos:end="346:69">"setsockopt(SO_RECVBUF)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="350:9" pos:end="350:42">/* make the socket non-blocking */</comment>

        <expr_stmt pos:start="352:9" pos:end="352:38"><expr pos:start="352:9" pos:end="352:37"><call pos:start="352:9" pos:end="352:37"><name pos:start="352:9" pos:end="352:26">ff_socket_nonblock</name><argument_list pos:start="352:27" pos:end="352:37">(<argument pos:start="352:28" pos:end="352:33"><expr pos:start="352:28" pos:end="352:33"><name pos:start="352:28" pos:end="352:33">udp_fd</name></expr></argument>, <argument pos:start="352:36" pos:end="352:36"><expr pos:start="352:36" pos:end="352:36"><literal type="number" pos:start="352:36" pos:end="352:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="356:5" pos:end="366:5"><if pos:start="356:5" pos:end="366:5">if <condition pos:start="356:8" pos:end="356:24">(<expr pos:start="356:9" pos:end="356:23"><name pos:start="356:9" pos:end="356:23"><name pos:start="356:9" pos:end="356:9">s</name><operator pos:start="356:10" pos:end="356:11">-&gt;</operator><name pos:start="356:12" pos:end="356:23">is_connected</name></name></expr>)</condition> <block pos:start="356:26" pos:end="366:5">{<block_content pos:start="358:9" pos:end="364:9">

        <if_stmt pos:start="358:9" pos:end="364:9"><if pos:start="358:9" pos:end="364:9">if <condition pos:start="358:12" pos:end="358:81">(<expr pos:start="358:13" pos:end="358:80"><call pos:start="358:13" pos:end="358:80"><name pos:start="358:13" pos:end="358:19">connect</name><argument_list pos:start="358:20" pos:end="358:80">(<argument pos:start="358:21" pos:end="358:26"><expr pos:start="358:21" pos:end="358:26"><name pos:start="358:21" pos:end="358:26">udp_fd</name></expr></argument>, <argument pos:start="358:29" pos:end="358:61"><expr pos:start="358:29" pos:end="358:61"><operator pos:start="358:29" pos:end="358:29">(</operator>struct <name pos:start="358:37" pos:end="358:44">sockaddr</name> <operator pos:start="358:46" pos:end="358:46">*</operator><operator pos:start="358:47" pos:end="358:47">)</operator> <operator pos:start="358:49" pos:end="358:49">&amp;</operator><name pos:start="358:50" pos:end="358:61"><name pos:start="358:50" pos:end="358:50">s</name><operator pos:start="358:51" pos:end="358:52">-&gt;</operator><name pos:start="358:53" pos:end="358:61">dest_addr</name></name></expr></argument>, <argument pos:start="358:64" pos:end="358:79"><expr pos:start="358:64" pos:end="358:79"><name pos:start="358:64" pos:end="358:79"><name pos:start="358:64" pos:end="358:64">s</name><operator pos:start="358:65" pos:end="358:66">-&gt;</operator><name pos:start="358:67" pos:end="358:79">dest_addr_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="358:83" pos:end="364:9">{<block_content pos:start="360:13" pos:end="362:22">

            <expr_stmt pos:start="360:13" pos:end="360:54"><expr pos:start="360:13" pos:end="360:53"><call pos:start="360:13" pos:end="360:53"><name pos:start="360:13" pos:end="360:25">log_net_error</name><argument_list pos:start="360:26" pos:end="360:53">(<argument pos:start="360:27" pos:end="360:27"><expr pos:start="360:27" pos:end="360:27"><name pos:start="360:27" pos:end="360:27">h</name></expr></argument>, <argument pos:start="360:30" pos:end="360:41"><expr pos:start="360:30" pos:end="360:41"><name pos:start="360:30" pos:end="360:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="360:44" pos:end="360:52"><expr pos:start="360:44" pos:end="360:52"><literal type="string" pos:start="360:44" pos:end="360:52">"connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="362:13" pos:end="362:22">goto <name pos:start="362:18" pos:end="362:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="370:5" pos:end="372:30">for <control pos:start="370:9" pos:end="370:37">(<init pos:start="370:10" pos:end="370:15"><expr pos:start="370:10" pos:end="370:14"><name pos:start="370:10" pos:end="370:10">i</name> <operator pos:start="370:12" pos:end="370:12">=</operator> <literal type="number" pos:start="370:14" pos:end="370:14">0</literal></expr>;</init> <condition pos:start="370:17" pos:end="370:32"><expr pos:start="370:17" pos:end="370:31"><name pos:start="370:17" pos:end="370:17">i</name> <operator pos:start="370:19" pos:end="370:19">&lt;</operator> <name pos:start="370:21" pos:end="370:31">num_sources</name></expr>;</condition> <incr pos:start="370:34" pos:end="370:36"><expr pos:start="370:34" pos:end="370:36"><name pos:start="370:34" pos:end="370:34">i</name><operator pos:start="370:35" pos:end="370:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="372:9" pos:end="372:30"><block_content pos:start="372:9" pos:end="372:30">

        <expr_stmt pos:start="372:9" pos:end="372:30"><expr pos:start="372:9" pos:end="372:29"><call pos:start="372:9" pos:end="372:29"><name pos:start="372:9" pos:end="372:16">av_freep</name><argument_list pos:start="372:17" pos:end="372:29">(<argument pos:start="372:18" pos:end="372:28"><expr pos:start="372:18" pos:end="372:28"><operator pos:start="372:18" pos:end="372:18">&amp;</operator><name pos:start="372:19" pos:end="372:28"><name pos:start="372:19" pos:end="372:25">sources</name><index pos:start="372:26" pos:end="372:28">[<expr pos:start="372:27" pos:end="372:27"><name pos:start="372:27" pos:end="372:27">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="376:5" pos:end="381:0"><expr pos:start="376:5" pos:end="376:22"><name pos:start="376:5" pos:end="376:13"><name pos:start="376:5" pos:end="376:5">s</name><operator pos:start="376:6" pos:end="376:7">-&gt;</operator><name pos:start="376:8" pos:end="376:13">udp_fd</name></name> <operator pos:start="376:15" pos:end="376:15">=</operator> <name pos:start="376:17" pos:end="376:22">udp_fd</name></expr>;</expr_stmt>



<cpp:if pos:start="380:1" pos:end="380:23">#<cpp:directive pos:start="380:2" pos:end="380:3">if</cpp:directive> <expr pos:start="380:5" pos:end="380:23"><name pos:start="380:5" pos:end="380:23">HAVE_PTHREAD_CANCEL</name></expr></cpp:if>

    <if_stmt pos:start="382:5" pos:end="427:0"><if pos:start="382:5" pos:end="427:0">if <condition pos:start="382:8" pos:end="382:46">(<expr pos:start="382:9" pos:end="382:45"><operator pos:start="382:9" pos:end="382:9">!</operator><name pos:start="382:10" pos:end="382:18">is_output</name> <operator pos:start="382:20" pos:end="382:21">&amp;&amp;</operator> <name pos:start="382:23" pos:end="382:45"><name pos:start="382:23" pos:end="382:23">s</name><operator pos:start="382:24" pos:end="382:25">-&gt;</operator><name pos:start="382:26" pos:end="382:45">circular_buffer_size</name></name></expr>)</condition> <block pos:start="382:48" pos:end="427:0">{<block_content pos:start="384:9" pos:end="422:30">

        <decl_stmt pos:start="384:9" pos:end="384:16"><decl pos:start="384:9" pos:end="384:15"><type pos:start="384:9" pos:end="384:11"><name pos:start="384:9" pos:end="384:11">int</name></type> <name pos:start="384:13" pos:end="384:15">ret</name></decl>;</decl_stmt>



        <comment type="block" pos:start="388:9" pos:end="388:34">/* start the task going */</comment>

        <expr_stmt pos:start="390:9" pos:end="390:57"><expr pos:start="390:9" pos:end="390:56"><name pos:start="390:9" pos:end="390:15"><name pos:start="390:9" pos:end="390:9">s</name><operator pos:start="390:10" pos:end="390:11">-&gt;</operator><name pos:start="390:12" pos:end="390:15">fifo</name></name> <operator pos:start="390:17" pos:end="390:17">=</operator> <call pos:start="390:19" pos:end="390:56"><name pos:start="390:19" pos:end="390:31">av_fifo_alloc</name><argument_list pos:start="390:32" pos:end="390:56">(<argument pos:start="390:33" pos:end="390:55"><expr pos:start="390:33" pos:end="390:55"><name pos:start="390:33" pos:end="390:55"><name pos:start="390:33" pos:end="390:33">s</name><operator pos:start="390:34" pos:end="390:35">-&gt;</operator><name pos:start="390:36" pos:end="390:55">circular_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="392:9" pos:end="392:50"><expr pos:start="392:9" pos:end="392:49"><name pos:start="392:9" pos:end="392:11">ret</name> <operator pos:start="392:13" pos:end="392:13">=</operator> <call pos:start="392:15" pos:end="392:49"><name pos:start="392:15" pos:end="392:32">pthread_mutex_init</name><argument_list pos:start="392:33" pos:end="392:49">(<argument pos:start="392:34" pos:end="392:42"><expr pos:start="392:34" pos:end="392:42"><operator pos:start="392:34" pos:end="392:34">&amp;</operator><name pos:start="392:35" pos:end="392:42"><name pos:start="392:35" pos:end="392:35">s</name><operator pos:start="392:36" pos:end="392:37">-&gt;</operator><name pos:start="392:38" pos:end="392:42">mutex</name></name></expr></argument>, <argument pos:start="392:45" pos:end="392:48"><expr pos:start="392:45" pos:end="392:48"><name pos:start="392:45" pos:end="392:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="394:9" pos:end="400:9"><if pos:start="394:9" pos:end="400:9">if <condition pos:start="394:12" pos:end="394:21">(<expr pos:start="394:13" pos:end="394:20"><name pos:start="394:13" pos:end="394:15">ret</name> <operator pos:start="394:17" pos:end="394:18">!=</operator> <literal type="number" pos:start="394:20" pos:end="394:20">0</literal></expr>)</condition> <block pos:start="394:23" pos:end="400:9">{<block_content pos:start="396:13" pos:end="398:22">

            <expr_stmt pos:start="396:13" pos:end="396:87"><expr pos:start="396:13" pos:end="396:86"><call pos:start="396:13" pos:end="396:86"><name pos:start="396:13" pos:end="396:18">av_log</name><argument_list pos:start="396:19" pos:end="396:86">(<argument pos:start="396:20" pos:end="396:20"><expr pos:start="396:20" pos:end="396:20"><name pos:start="396:20" pos:end="396:20">h</name></expr></argument>, <argument pos:start="396:23" pos:end="396:34"><expr pos:start="396:23" pos:end="396:34"><name pos:start="396:23" pos:end="396:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="396:37" pos:end="396:70"><expr pos:start="396:37" pos:end="396:70"><literal type="string" pos:start="396:37" pos:end="396:70">"pthread_mutex_init failed : %s\n"</literal></expr></argument>, <argument pos:start="396:73" pos:end="396:85"><expr pos:start="396:73" pos:end="396:85"><call pos:start="396:73" pos:end="396:85"><name pos:start="396:73" pos:end="396:80">strerror</name><argument_list pos:start="396:81" pos:end="396:85">(<argument pos:start="396:82" pos:end="396:84"><expr pos:start="396:82" pos:end="396:84"><name pos:start="396:82" pos:end="396:84">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="398:13" pos:end="398:22">goto <name pos:start="398:18" pos:end="398:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="402:9" pos:end="402:48"><expr pos:start="402:9" pos:end="402:47"><name pos:start="402:9" pos:end="402:11">ret</name> <operator pos:start="402:13" pos:end="402:13">=</operator> <call pos:start="402:15" pos:end="402:47"><name pos:start="402:15" pos:end="402:31">pthread_cond_init</name><argument_list pos:start="402:32" pos:end="402:47">(<argument pos:start="402:33" pos:end="402:40"><expr pos:start="402:33" pos:end="402:40"><operator pos:start="402:33" pos:end="402:33">&amp;</operator><name pos:start="402:34" pos:end="402:40"><name pos:start="402:34" pos:end="402:34">s</name><operator pos:start="402:35" pos:end="402:36">-&gt;</operator><name pos:start="402:37" pos:end="402:40">cond</name></name></expr></argument>, <argument pos:start="402:43" pos:end="402:46"><expr pos:start="402:43" pos:end="402:46"><name pos:start="402:43" pos:end="402:46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="404:9" pos:end="410:9"><if pos:start="404:9" pos:end="410:9">if <condition pos:start="404:12" pos:end="404:21">(<expr pos:start="404:13" pos:end="404:20"><name pos:start="404:13" pos:end="404:15">ret</name> <operator pos:start="404:17" pos:end="404:18">!=</operator> <literal type="number" pos:start="404:20" pos:end="404:20">0</literal></expr>)</condition> <block pos:start="404:23" pos:end="410:9">{<block_content pos:start="406:13" pos:end="408:27">

            <expr_stmt pos:start="406:13" pos:end="406:86"><expr pos:start="406:13" pos:end="406:85"><call pos:start="406:13" pos:end="406:85"><name pos:start="406:13" pos:end="406:18">av_log</name><argument_list pos:start="406:19" pos:end="406:85">(<argument pos:start="406:20" pos:end="406:20"><expr pos:start="406:20" pos:end="406:20"><name pos:start="406:20" pos:end="406:20">h</name></expr></argument>, <argument pos:start="406:23" pos:end="406:34"><expr pos:start="406:23" pos:end="406:34"><name pos:start="406:23" pos:end="406:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="406:37" pos:end="406:69"><expr pos:start="406:37" pos:end="406:69"><literal type="string" pos:start="406:37" pos:end="406:69">"pthread_cond_init failed : %s\n"</literal></expr></argument>, <argument pos:start="406:72" pos:end="406:84"><expr pos:start="406:72" pos:end="406:84"><call pos:start="406:72" pos:end="406:84"><name pos:start="406:72" pos:end="406:79">strerror</name><argument_list pos:start="406:80" pos:end="406:84">(<argument pos:start="406:81" pos:end="406:83"><expr pos:start="406:81" pos:end="406:83"><name pos:start="406:81" pos:end="406:83">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="408:13" pos:end="408:27">goto <name pos:start="408:18" pos:end="408:26">cond_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="412:9" pos:end="412:88"><expr pos:start="412:9" pos:end="412:87"><name pos:start="412:9" pos:end="412:11">ret</name> <operator pos:start="412:13" pos:end="412:13">=</operator> <call pos:start="412:15" pos:end="412:87"><name pos:start="412:15" pos:end="412:28">pthread_create</name><argument_list pos:start="412:29" pos:end="412:87">(<argument pos:start="412:30" pos:end="412:55"><expr pos:start="412:30" pos:end="412:55"><operator pos:start="412:30" pos:end="412:30">&amp;</operator><name pos:start="412:31" pos:end="412:55"><name pos:start="412:31" pos:end="412:31">s</name><operator pos:start="412:32" pos:end="412:33">-&gt;</operator><name pos:start="412:34" pos:end="412:55">circular_buffer_thread</name></name></expr></argument>, <argument pos:start="412:58" pos:end="412:61"><expr pos:start="412:58" pos:end="412:61"><name pos:start="412:58" pos:end="412:61">NULL</name></expr></argument>, <argument pos:start="412:64" pos:end="412:83"><expr pos:start="412:64" pos:end="412:83"><name pos:start="412:64" pos:end="412:83">circular_buffer_task</name></expr></argument>, <argument pos:start="412:86" pos:end="412:86"><expr pos:start="412:86" pos:end="412:86"><name pos:start="412:86" pos:end="412:86">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="414:9" pos:end="420:9"><if pos:start="414:9" pos:end="420:9">if <condition pos:start="414:12" pos:end="414:21">(<expr pos:start="414:13" pos:end="414:20"><name pos:start="414:13" pos:end="414:15">ret</name> <operator pos:start="414:17" pos:end="414:18">!=</operator> <literal type="number" pos:start="414:20" pos:end="414:20">0</literal></expr>)</condition> <block pos:start="414:23" pos:end="420:9">{<block_content pos:start="416:13" pos:end="418:29">

            <expr_stmt pos:start="416:13" pos:end="416:83"><expr pos:start="416:13" pos:end="416:82"><call pos:start="416:13" pos:end="416:82"><name pos:start="416:13" pos:end="416:18">av_log</name><argument_list pos:start="416:19" pos:end="416:82">(<argument pos:start="416:20" pos:end="416:20"><expr pos:start="416:20" pos:end="416:20"><name pos:start="416:20" pos:end="416:20">h</name></expr></argument>, <argument pos:start="416:23" pos:end="416:34"><expr pos:start="416:23" pos:end="416:34"><name pos:start="416:23" pos:end="416:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="416:37" pos:end="416:66"><expr pos:start="416:37" pos:end="416:66"><literal type="string" pos:start="416:37" pos:end="416:66">"pthread_create failed : %s\n"</literal></expr></argument>, <argument pos:start="416:69" pos:end="416:81"><expr pos:start="416:69" pos:end="416:81"><call pos:start="416:69" pos:end="416:81"><name pos:start="416:69" pos:end="416:76">strerror</name><argument_list pos:start="416:77" pos:end="416:81">(<argument pos:start="416:78" pos:end="416:80"><expr pos:start="416:78" pos:end="416:80"><name pos:start="416:78" pos:end="416:80">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="418:13" pos:end="418:29">goto <name pos:start="418:18" pos:end="418:28">thread_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="422:9" pos:end="422:30"><expr pos:start="422:9" pos:end="422:29"><name pos:start="422:9" pos:end="422:25"><name pos:start="422:9" pos:end="422:9">s</name><operator pos:start="422:10" pos:end="422:11">-&gt;</operator><name pos:start="422:12" pos:end="422:25">thread_started</name></name> <operator pos:start="422:27" pos:end="422:27">=</operator> <literal type="number" pos:start="422:29" pos:end="422:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="426:1" pos:end="426:6">#<cpp:directive pos:start="426:2" pos:end="426:6">endif</cpp:directive></cpp:endif>



    <return pos:start="430:5" pos:end="433:0">return <expr pos:start="430:12" pos:end="430:12"><literal type="number" pos:start="430:12" pos:end="430:12">0</literal></expr>;</return>

<cpp:if pos:start="432:1" pos:end="432:23">#<cpp:directive pos:start="432:2" pos:end="432:3">if</cpp:directive> <expr pos:start="432:5" pos:end="432:23"><name pos:start="432:5" pos:end="432:23">HAVE_PTHREAD_CANCEL</name></expr></cpp:if>

 <label pos:start="434:2" pos:end="434:13"><name pos:start="434:2" pos:end="434:12">thread_fail</name>:</label>

    <expr_stmt pos:start="436:5" pos:end="436:35"><expr pos:start="436:5" pos:end="436:34"><call pos:start="436:5" pos:end="436:34"><name pos:start="436:5" pos:end="436:24">pthread_cond_destroy</name><argument_list pos:start="436:25" pos:end="436:34">(<argument pos:start="436:26" pos:end="436:33"><expr pos:start="436:26" pos:end="436:33"><operator pos:start="436:26" pos:end="436:26">&amp;</operator><name pos:start="436:27" pos:end="436:33"><name pos:start="436:27" pos:end="436:27">s</name><operator pos:start="436:28" pos:end="436:29">-&gt;</operator><name pos:start="436:30" pos:end="436:33">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label pos:start="438:2" pos:end="438:11"><name pos:start="438:2" pos:end="438:10">cond_fail</name>:</label>

    <expr_stmt pos:start="440:5" pos:end="443:0"><expr pos:start="440:5" pos:end="440:36"><call pos:start="440:5" pos:end="440:36"><name pos:start="440:5" pos:end="440:25">pthread_mutex_destroy</name><argument_list pos:start="440:26" pos:end="440:36">(<argument pos:start="440:27" pos:end="440:35"><expr pos:start="440:27" pos:end="440:35"><operator pos:start="440:27" pos:end="440:27">&amp;</operator><name pos:start="440:28" pos:end="440:35"><name pos:start="440:28" pos:end="440:28">s</name><operator pos:start="440:29" pos:end="440:30">-&gt;</operator><name pos:start="440:31" pos:end="440:35">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="442:1" pos:end="442:6">#<cpp:directive pos:start="442:2" pos:end="442:6">endif</cpp:directive></cpp:endif>

 <label pos:start="444:2" pos:end="444:6"><name pos:start="444:2" pos:end="444:5">fail</name>:</label>

    <if_stmt pos:start="446:5" pos:end="448:28"><if pos:start="446:5" pos:end="448:28">if <condition pos:start="446:8" pos:end="446:20">(<expr pos:start="446:9" pos:end="446:19"><name pos:start="446:9" pos:end="446:14">udp_fd</name> <operator pos:start="446:16" pos:end="446:17">&gt;=</operator> <literal type="number" pos:start="446:19" pos:end="446:19">0</literal></expr>)</condition><block type="pseudo" pos:start="448:9" pos:end="448:28"><block_content pos:start="448:9" pos:end="448:28">

        <expr_stmt pos:start="448:9" pos:end="448:28"><expr pos:start="448:9" pos:end="448:27"><call pos:start="448:9" pos:end="448:27"><name pos:start="448:9" pos:end="448:19">closesocket</name><argument_list pos:start="448:20" pos:end="448:27">(<argument pos:start="448:21" pos:end="448:26"><expr pos:start="448:21" pos:end="448:26"><name pos:start="448:21" pos:end="448:26">udp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="450:5" pos:end="450:26"><expr pos:start="450:5" pos:end="450:25"><call pos:start="450:5" pos:end="450:25"><name pos:start="450:5" pos:end="450:16">av_fifo_free</name><argument_list pos:start="450:17" pos:end="450:25">(<argument pos:start="450:18" pos:end="450:24"><expr pos:start="450:18" pos:end="450:24"><name pos:start="450:18" pos:end="450:24"><name pos:start="450:18" pos:end="450:18">s</name><operator pos:start="450:19" pos:end="450:20">-&gt;</operator><name pos:start="450:21" pos:end="450:24">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="452:5" pos:end="454:30">for <control pos:start="452:9" pos:end="452:37">(<init pos:start="452:10" pos:end="452:15"><expr pos:start="452:10" pos:end="452:14"><name pos:start="452:10" pos:end="452:10">i</name> <operator pos:start="452:12" pos:end="452:12">=</operator> <literal type="number" pos:start="452:14" pos:end="452:14">0</literal></expr>;</init> <condition pos:start="452:17" pos:end="452:32"><expr pos:start="452:17" pos:end="452:31"><name pos:start="452:17" pos:end="452:17">i</name> <operator pos:start="452:19" pos:end="452:19">&lt;</operator> <name pos:start="452:21" pos:end="452:31">num_sources</name></expr>;</condition> <incr pos:start="452:34" pos:end="452:36"><expr pos:start="452:34" pos:end="452:36"><name pos:start="452:34" pos:end="452:34">i</name><operator pos:start="452:35" pos:end="452:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="454:9" pos:end="454:30"><block_content pos:start="454:9" pos:end="454:30">

        <expr_stmt pos:start="454:9" pos:end="454:30"><expr pos:start="454:9" pos:end="454:29"><call pos:start="454:9" pos:end="454:29"><name pos:start="454:9" pos:end="454:16">av_freep</name><argument_list pos:start="454:17" pos:end="454:29">(<argument pos:start="454:18" pos:end="454:28"><expr pos:start="454:18" pos:end="454:28"><operator pos:start="454:18" pos:end="454:18">&amp;</operator><name pos:start="454:19" pos:end="454:28"><name pos:start="454:19" pos:end="454:25">sources</name><index pos:start="454:26" pos:end="454:28">[<expr pos:start="454:27" pos:end="454:27"><name pos:start="454:27" pos:end="454:27">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <return pos:start="456:5" pos:end="456:24">return <expr pos:start="456:12" pos:end="456:23"><call pos:start="456:12" pos:end="456:23"><name pos:start="456:12" pos:end="456:18">AVERROR</name><argument_list pos:start="456:19" pos:end="456:23">(<argument pos:start="456:20" pos:end="456:22"><expr pos:start="456:20" pos:end="456:22"><name pos:start="456:20" pos:end="456:22">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function></unit>
