<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23332.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">dcadec_decode_frame</name><parameter_list pos:start="1:31" pos:end="3:67">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:64"><decl pos:start="1:55" pos:end="1:64"><type pos:start="1:55" pos:end="1:64"><name pos:start="1:55" pos:end="1:58">void</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">data</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:49"><decl pos:start="3:32" pos:end="3:49"><type pos:start="3:32" pos:end="3:49"><name pos:start="3:32" pos:end="3:34">int</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:49">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:66"><decl pos:start="3:52" pos:end="3:66"><type pos:start="3:52" pos:end="3:66"><name pos:start="3:52" pos:end="3:59">AVPacket</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:66">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="293:1">{<block_content pos:start="7:5" pos:end="291:23">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">DCAContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:25">avctx</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:18">frame</name> <init pos:start="9:20" pos:end="9:25">= <expr pos:start="9:22" pos:end="9:25"><name pos:start="9:22" pos:end="9:25">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:18">input</name> <init pos:start="11:20" pos:end="11:32">= <expr pos:start="11:22" pos:end="11:32"><name pos:start="11:22" pos:end="11:32"><name pos:start="11:22" pos:end="11:26">avpkt</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:32">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">input_size</name> <init pos:start="13:20" pos:end="13:32">= <expr pos:start="13:22" pos:end="13:32"><name pos:start="13:22" pos:end="13:32"><name pos:start="13:22" pos:end="13:26">avpkt</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:32">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:40"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:14">ret</name></decl>, <decl pos:start="15:17" pos:end="15:39"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:27">prev_packet</name> <init pos:start="15:29" pos:end="15:39">= <expr pos:start="15:31" pos:end="15:39"><name pos:start="15:31" pos:end="15:39"><name pos:start="15:31" pos:end="15:31">s</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:39">packet</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:69">(<expr pos:start="19:9" pos:end="19:68"><name pos:start="19:9" pos:end="19:52"><name pos:start="19:9" pos:end="19:18">input_size</name> <argument_list type="generic" pos:start="19:20" pos:end="19:52">&lt; <argument pos:start="19:22" pos:end="19:50"><expr pos:start="19:22" pos:end="19:50"><name pos:start="19:22" pos:end="19:36">MIN_PACKET_SIZE</name> <operator pos:start="19:38" pos:end="19:39">||</operator> <name pos:start="19:41" pos:end="19:50">input_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="19:54" pos:end="19:68">MAX_PACKET_SIZE</name></expr>)</condition> <block pos:start="19:71" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:35">

        <expr_stmt pos:start="21:9" pos:end="21:61"><expr pos:start="21:9" pos:end="21:60"><call pos:start="21:9" pos:end="21:60"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:60">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:37" pos:end="21:59"><expr pos:start="21:37" pos:end="21:59"><literal type="string" pos:start="21:37" pos:end="21:59">"Invalid packet size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:35">return <expr pos:start="23:16" pos:end="23:34"><name pos:start="23:16" pos:end="23:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="31:72"><expr pos:start="29:5" pos:end="31:71"><call pos:start="29:5" pos:end="31:71"><name pos:start="29:5" pos:end="29:18">av_fast_malloc</name><argument_list pos:start="29:19" pos:end="31:71">(<argument pos:start="29:20" pos:end="29:29"><expr pos:start="29:20" pos:end="29:29"><operator pos:start="29:20" pos:end="29:20">&amp;</operator><name pos:start="29:21" pos:end="29:29"><name pos:start="29:21" pos:end="29:21">s</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:29">buffer</name></name></expr></argument>, <argument pos:start="29:32" pos:end="29:46"><expr pos:start="29:32" pos:end="29:46"><operator pos:start="29:32" pos:end="29:32">&amp;</operator><name pos:start="29:33" pos:end="29:46"><name pos:start="29:33" pos:end="29:33">s</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:46">buffer_size</name></name></expr></argument>,

                   <argument pos:start="31:20" pos:end="31:70"><expr pos:start="31:20" pos:end="31:70"><call pos:start="31:20" pos:end="31:44"><name pos:start="31:20" pos:end="31:26">FFALIGN</name><argument_list pos:start="31:27" pos:end="31:44">(<argument pos:start="31:28" pos:end="31:37"><expr pos:start="31:28" pos:end="31:37"><name pos:start="31:28" pos:end="31:37">input_size</name></expr></argument>, <argument pos:start="31:40" pos:end="31:43"><expr pos:start="31:40" pos:end="31:43"><literal type="number" pos:start="31:40" pos:end="31:43">4096</literal></expr></argument>)</argument_list></call> <operator pos:start="31:46" pos:end="31:46">+</operator> <name pos:start="31:48" pos:end="31:70">DCA_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:31"><if pos:start="33:5" pos:end="35:31">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:18"><name pos:start="33:10" pos:end="33:10">s</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:18">buffer</name></name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:31"><block_content pos:start="35:9" pos:end="35:31">

        <return pos:start="35:9" pos:end="35:31">return <expr pos:start="35:16" pos:end="35:30"><call pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:22">AVERROR</name><argument_list pos:start="35:23" pos:end="35:30">(<argument pos:start="35:24" pos:end="35:29"><expr pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="39:5" pos:end="41:86">for <control pos:start="39:9" pos:end="39:96">(<init pos:start="39:10" pos:end="39:42"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr><operator pos:start="39:15" pos:end="39:15">,</operator> <expr pos:start="39:17" pos:end="39:41"><name pos:start="39:17" pos:end="39:19">ret</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:41">AVERROR_INVALIDDATA</name></expr>;</init> <condition pos:start="39:44" pos:end="39:91"><expr pos:start="39:44" pos:end="39:90"><name pos:start="39:44" pos:end="39:44">i</name> <operator pos:start="39:46" pos:end="39:46">&lt;</operator> <name pos:start="39:48" pos:end="39:57">input_size</name> <operator pos:start="39:59" pos:end="39:59">-</operator> <name pos:start="39:61" pos:end="39:75">MIN_PACKET_SIZE</name> <operator pos:start="39:77" pos:end="39:77">+</operator> <literal type="number" pos:start="39:79" pos:end="39:79">1</literal> <operator pos:start="39:81" pos:end="39:82">&amp;&amp;</operator> <name pos:start="39:84" pos:end="39:86">ret</name> <operator pos:start="39:88" pos:end="39:88">&lt;</operator> <literal type="number" pos:start="39:90" pos:end="39:90">0</literal></expr>;</condition> <incr pos:start="39:93" pos:end="39:95"><expr pos:start="39:93" pos:end="39:95"><name pos:start="39:93" pos:end="39:93">i</name><operator pos:start="39:94" pos:end="39:95">++</operator></expr></incr>)</control><block type="pseudo" pos:start="41:9" pos:end="41:86"><block_content pos:start="41:9" pos:end="41:86">

        <expr_stmt pos:start="41:9" pos:end="41:86"><expr pos:start="41:9" pos:end="41:85"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:85"><name pos:start="41:15" pos:end="41:31">convert_bitstream</name><argument_list pos:start="41:32" pos:end="41:85">(<argument pos:start="41:33" pos:end="41:41"><expr pos:start="41:33" pos:end="41:41"><name pos:start="41:33" pos:end="41:37">input</name> <operator pos:start="41:39" pos:end="41:39">+</operator> <name pos:start="41:41" pos:end="41:41">i</name></expr></argument>, <argument pos:start="41:44" pos:end="41:57"><expr pos:start="41:44" pos:end="41:57"><name pos:start="41:44" pos:end="41:53">input_size</name> <operator pos:start="41:55" pos:end="41:55">-</operator> <name pos:start="41:57" pos:end="41:57">i</name></expr></argument>, <argument pos:start="41:60" pos:end="41:68"><expr pos:start="41:60" pos:end="41:68"><name pos:start="41:60" pos:end="41:68"><name pos:start="41:60" pos:end="41:60">s</name><operator pos:start="41:61" pos:end="41:62">-&gt;</operator><name pos:start="41:63" pos:end="41:68">buffer</name></name></expr></argument>, <argument pos:start="41:71" pos:end="41:84"><expr pos:start="41:71" pos:end="41:84"><name pos:start="41:71" pos:end="41:84"><name pos:start="41:71" pos:end="41:71">s</name><operator pos:start="41:72" pos:end="41:73">-&gt;</operator><name pos:start="41:74" pos:end="41:84">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:16">(<expr pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">&lt;</operator> <literal type="number" pos:start="45:15" pos:end="45:15">0</literal></expr>)</condition> <block pos:start="45:18" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:19">

        <expr_stmt pos:start="47:9" pos:end="47:63"><expr pos:start="47:9" pos:end="47:62"><call pos:start="47:9" pos:end="47:62"><name pos:start="47:9" pos:end="47:14">av_log</name><argument_list pos:start="47:15" pos:end="47:62">(<argument pos:start="47:16" pos:end="47:20"><expr pos:start="47:16" pos:end="47:20"><name pos:start="47:16" pos:end="47:20">avctx</name></expr></argument>, <argument pos:start="47:23" pos:end="47:34"><expr pos:start="47:23" pos:end="47:34"><name pos:start="47:23" pos:end="47:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:37" pos:end="47:61"><expr pos:start="47:37" pos:end="47:61"><literal type="string" pos:start="47:37" pos:end="47:61">"Not a valid DCA frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:19">return <expr pos:start="49:16" pos:end="49:18"><name pos:start="49:16" pos:end="49:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:27"><expr pos:start="55:5" pos:end="55:26"><name pos:start="55:5" pos:end="55:9">input</name>      <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:26"><name pos:start="55:18" pos:end="55:18">s</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:26">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:21"><expr pos:start="57:5" pos:end="57:20"><name pos:start="57:5" pos:end="57:14">input_size</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:20">ret</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:18"><expr pos:start="61:5" pos:end="61:17"><name pos:start="61:5" pos:end="61:13"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:13">packet</name></name> <operator pos:start="61:15" pos:end="61:15">=</operator> <literal type="number" pos:start="61:17" pos:end="61:17">0</literal></expr>;</expr_stmt>



    <comment type="line" pos:start="65:5" pos:end="65:48">// Parse backward compatible core sub-stream</comment>

    <if_stmt pos:start="67:5" pos:end="95:5"><if pos:start="67:5" pos:end="95:5">if <condition pos:start="67:8" pos:end="67:47">(<expr pos:start="67:9" pos:end="67:46"><call pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:15">AV_RB32</name><argument_list pos:start="67:16" pos:end="67:22">(<argument pos:start="67:17" pos:end="67:21"><expr pos:start="67:17" pos:end="67:21"><name pos:start="67:17" pos:end="67:21">input</name></expr></argument>)</argument_list></call> <operator pos:start="67:24" pos:end="67:25">==</operator> <name pos:start="67:27" pos:end="67:46">DCA_SYNCWORD_CORE_BE</name></expr>)</condition> <block pos:start="67:49" pos:end="95:5">{<block_content pos:start="69:9" pos:end="93:9">

        <decl_stmt pos:start="69:9" pos:end="69:23"><decl pos:start="69:9" pos:end="69:22"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:22">frame_size</name></decl>;</decl_stmt>



        <if_stmt pos:start="73:9" pos:end="75:23"><if pos:start="73:9" pos:end="75:23">if <condition pos:start="73:12" pos:end="73:71">(<expr pos:start="73:13" pos:end="73:70"><operator pos:start="73:13" pos:end="73:13">(</operator><name pos:start="73:14" pos:end="73:16">ret</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:65"><name pos:start="73:20" pos:end="73:36">ff_dca_core_parse</name><argument_list pos:start="73:37" pos:end="73:65">(<argument pos:start="73:38" pos:end="73:45"><expr pos:start="73:38" pos:end="73:45"><operator pos:start="73:38" pos:end="73:38">&amp;</operator><name pos:start="73:39" pos:end="73:45"><name pos:start="73:39" pos:end="73:39">s</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:45">core</name></name></expr></argument>, <argument pos:start="73:48" pos:end="73:52"><expr pos:start="73:48" pos:end="73:52"><name pos:start="73:48" pos:end="73:52">input</name></expr></argument>, <argument pos:start="73:55" pos:end="73:64"><expr pos:start="73:55" pos:end="73:64"><name pos:start="73:55" pos:end="73:64">input_size</name></expr></argument>)</argument_list></call><operator pos:start="73:66" pos:end="73:66">)</operator> <operator pos:start="73:68" pos:end="73:68">&lt;</operator> <literal type="number" pos:start="73:70" pos:end="73:70">0</literal></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:23"><block_content pos:start="75:13" pos:end="75:23">

            <return pos:start="75:13" pos:end="75:23">return <expr pos:start="75:20" pos:end="75:22"><name pos:start="75:20" pos:end="75:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:37"><expr pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:17"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:17">packet</name></name> <operator pos:start="79:19" pos:end="79:20">|=</operator> <name pos:start="79:22" pos:end="79:36">DCA_PACKET_CORE</name></expr>;</expr_stmt>



        <comment type="line" pos:start="83:9" pos:end="83:55">// EXXS data must be aligned on 4-byte boundary</comment>

        <expr_stmt pos:start="85:9" pos:end="85:52"><expr pos:start="85:9" pos:end="85:51"><name pos:start="85:9" pos:end="85:18">frame_size</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="85:51"><name pos:start="85:22" pos:end="85:28">FFALIGN</name><argument_list pos:start="85:29" pos:end="85:51">(<argument pos:start="85:30" pos:end="85:47"><expr pos:start="85:30" pos:end="85:47"><name pos:start="85:30" pos:end="85:47"><name pos:start="85:30" pos:end="85:30">s</name><operator pos:start="85:31" pos:end="85:32">-&gt;</operator><name pos:start="85:33" pos:end="85:36">core</name><operator pos:start="85:37" pos:end="85:37">.</operator><name pos:start="85:38" pos:end="85:47">frame_size</name></name></expr></argument>, <argument pos:start="85:50" pos:end="85:50"><expr pos:start="85:50" pos:end="85:50"><literal type="number" pos:start="85:50" pos:end="85:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:40">(<expr pos:start="87:13" pos:end="87:39"><name pos:start="87:13" pos:end="87:22">input_size</name> <operator pos:start="87:24" pos:end="87:24">-</operator> <literal type="number" pos:start="87:26" pos:end="87:26">4</literal> <operator pos:start="87:28" pos:end="87:28">&gt;</operator> <name pos:start="87:30" pos:end="87:39">frame_size</name></expr>)</condition> <block pos:start="87:42" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:37">

            <expr_stmt pos:start="89:13" pos:end="89:37"><expr pos:start="89:13" pos:end="89:36"><name pos:start="89:13" pos:end="89:17">input</name>      <operator pos:start="89:24" pos:end="89:25">+=</operator> <name pos:start="89:27" pos:end="89:36">frame_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:37"><expr pos:start="91:13" pos:end="91:36"><name pos:start="91:13" pos:end="91:22">input_size</name> <operator pos:start="91:24" pos:end="91:25">-=</operator> <name pos:start="91:27" pos:end="91:36">frame_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="185:5"><if pos:start="99:5" pos:end="185:5">if <condition pos:start="99:8" pos:end="99:22">(<expr pos:start="99:9" pos:end="99:21"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:21"><name pos:start="99:10" pos:end="99:10">s</name><operator pos:start="99:11" pos:end="99:12">-&gt;</operator><name pos:start="99:13" pos:end="99:21">core_only</name></name></expr>)</condition> <block pos:start="99:24" pos:end="185:5">{<block_content pos:start="101:9" pos:end="183:23">

        <decl_stmt pos:start="101:9" pos:end="101:35"><decl pos:start="101:9" pos:end="101:34"><type pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:20">DCAExssAsset</name> <modifier pos:start="101:22" pos:end="101:22">*</modifier></type><name pos:start="101:23" pos:end="101:27">asset</name> <init pos:start="101:29" pos:end="101:34">= <expr pos:start="101:31" pos:end="101:34"><name pos:start="101:31" pos:end="101:34">NULL</name></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="105:9" pos:end="105:44">// Parse extension sub-stream (EXSS)</comment>

        <if_stmt pos:start="107:9" pos:end="123:9"><if pos:start="107:9" pos:end="123:9">if <condition pos:start="107:12" pos:end="107:53">(<expr pos:start="107:13" pos:end="107:52"><call pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:19">AV_RB32</name><argument_list pos:start="107:20" pos:end="107:26">(<argument pos:start="107:21" pos:end="107:25"><expr pos:start="107:21" pos:end="107:25"><name pos:start="107:21" pos:end="107:25">input</name></expr></argument>)</argument_list></call> <operator pos:start="107:28" pos:end="107:29">==</operator> <name pos:start="107:31" pos:end="107:52">DCA_SYNCWORD_SUBSTREAM</name></expr>)</condition> <block pos:start="107:55" pos:end="123:9">{<block_content pos:start="109:13" pos:end="121:13">

            <if_stmt pos:start="109:13" pos:end="121:13"><if pos:start="109:13" pos:end="115:13">if <condition pos:start="109:16" pos:end="109:75">(<expr pos:start="109:17" pos:end="109:74"><operator pos:start="109:17" pos:end="109:17">(</operator><name pos:start="109:18" pos:end="109:20">ret</name> <operator pos:start="109:22" pos:end="109:22">=</operator> <call pos:start="109:24" pos:end="109:69"><name pos:start="109:24" pos:end="109:40">ff_dca_exss_parse</name><argument_list pos:start="109:41" pos:end="109:69">(<argument pos:start="109:42" pos:end="109:49"><expr pos:start="109:42" pos:end="109:49"><operator pos:start="109:42" pos:end="109:42">&amp;</operator><name pos:start="109:43" pos:end="109:49"><name pos:start="109:43" pos:end="109:43">s</name><operator pos:start="109:44" pos:end="109:45">-&gt;</operator><name pos:start="109:46" pos:end="109:49">exss</name></name></expr></argument>, <argument pos:start="109:52" pos:end="109:56"><expr pos:start="109:52" pos:end="109:56"><name pos:start="109:52" pos:end="109:56">input</name></expr></argument>, <argument pos:start="109:59" pos:end="109:68"><expr pos:start="109:59" pos:end="109:68"><name pos:start="109:59" pos:end="109:68">input_size</name></expr></argument>)</argument_list></call><operator pos:start="109:70" pos:end="109:70">)</operator> <operator pos:start="109:72" pos:end="109:72">&lt;</operator> <literal type="number" pos:start="109:74" pos:end="109:74">0</literal></expr>)</condition> <block pos:start="109:77" pos:end="115:13">{<block_content pos:start="111:17" pos:end="113:31">

                <if_stmt pos:start="111:17" pos:end="113:31"><if pos:start="111:17" pos:end="113:31">if <condition pos:start="111:20" pos:end="111:59">(<expr pos:start="111:21" pos:end="111:58"><name pos:start="111:21" pos:end="111:42"><name pos:start="111:21" pos:end="111:25">avctx</name><operator pos:start="111:26" pos:end="111:27">-&gt;</operator><name pos:start="111:28" pos:end="111:42">err_recognition</name></name> <operator pos:start="111:44" pos:end="111:44">&amp;</operator> <name pos:start="111:46" pos:end="111:58">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="113:21" pos:end="113:31"><block_content pos:start="113:21" pos:end="113:31">

                    <return pos:start="113:21" pos:end="113:31">return <expr pos:start="113:28" pos:end="113:30"><name pos:start="113:28" pos:end="113:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="115:15" pos:end="121:13">else <block pos:start="115:20" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:43">

                <expr_stmt pos:start="117:17" pos:end="117:45"><expr pos:start="117:17" pos:end="117:44"><name pos:start="117:17" pos:end="117:25"><name pos:start="117:17" pos:end="117:17">s</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:25">packet</name></name> <operator pos:start="117:27" pos:end="117:28">|=</operator> <name pos:start="117:30" pos:end="117:44">DCA_PACKET_EXSS</name></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:43"><expr pos:start="119:17" pos:end="119:42"><name pos:start="119:17" pos:end="119:21">asset</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <operator pos:start="119:25" pos:end="119:25">&amp;</operator><name pos:start="119:26" pos:end="119:42"><name pos:start="119:26" pos:end="119:26">s</name><operator pos:start="119:27" pos:end="119:28">-&gt;</operator><name pos:start="119:29" pos:end="119:32">exss</name><operator pos:start="119:33" pos:end="119:33">.</operator><name pos:start="119:34" pos:end="119:39">assets</name><index pos:start="119:40" pos:end="119:42">[<expr pos:start="119:41" pos:end="119:41"><literal type="number" pos:start="119:41" pos:end="119:41">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="127:9" pos:end="127:38">// Parse XLL component in EXSS</comment>

        <if_stmt pos:start="129:9" pos:end="153:9"><if pos:start="129:9" pos:end="153:9">if <condition pos:start="129:12" pos:end="129:60">(<expr pos:start="129:13" pos:end="129:59"><name pos:start="129:13" pos:end="129:17">asset</name> <operator pos:start="129:19" pos:end="129:20">&amp;&amp;</operator> <operator pos:start="129:22" pos:end="129:22">(</operator><name pos:start="129:23" pos:end="129:43"><name pos:start="129:23" pos:end="129:27">asset</name><operator pos:start="129:28" pos:end="129:29">-&gt;</operator><name pos:start="129:30" pos:end="129:43">extension_mask</name></name> <operator pos:start="129:45" pos:end="129:45">&amp;</operator> <name pos:start="129:47" pos:end="129:58">DCA_EXSS_XLL</name><operator pos:start="129:59" pos:end="129:59">)</operator></expr>)</condition> <block pos:start="129:62" pos:end="153:9">{<block_content pos:start="131:13" pos:end="151:13">

            <if_stmt pos:start="131:13" pos:end="151:13"><if pos:start="131:13" pos:end="147:13">if <condition pos:start="131:16" pos:end="131:68">(<expr pos:start="131:17" pos:end="131:67"><operator pos:start="131:17" pos:end="131:17">(</operator><name pos:start="131:18" pos:end="131:20">ret</name> <operator pos:start="131:22" pos:end="131:22">=</operator> <call pos:start="131:24" pos:end="131:62"><name pos:start="131:24" pos:end="131:39">ff_dca_xll_parse</name><argument_list pos:start="131:40" pos:end="131:62">(<argument pos:start="131:41" pos:end="131:47"><expr pos:start="131:41" pos:end="131:47"><operator pos:start="131:41" pos:end="131:41">&amp;</operator><name pos:start="131:42" pos:end="131:47"><name pos:start="131:42" pos:end="131:42">s</name><operator pos:start="131:43" pos:end="131:44">-&gt;</operator><name pos:start="131:45" pos:end="131:47">xll</name></name></expr></argument>, <argument pos:start="131:50" pos:end="131:54"><expr pos:start="131:50" pos:end="131:54"><name pos:start="131:50" pos:end="131:54">input</name></expr></argument>, <argument pos:start="131:57" pos:end="131:61"><expr pos:start="131:57" pos:end="131:61"><name pos:start="131:57" pos:end="131:61">asset</name></expr></argument>)</argument_list></call><operator pos:start="131:63" pos:end="131:63">)</operator> <operator pos:start="131:65" pos:end="131:65">&lt;</operator> <literal type="number" pos:start="131:67" pos:end="131:67">0</literal></expr>)</condition> <block pos:start="131:70" pos:end="147:13">{<block_content pos:start="135:17" pos:end="145:31">

                <comment type="line" pos:start="133:17" pos:end="133:52">// Conceal XLL synchronization error</comment>

                <if_stmt pos:start="135:17" pos:end="145:31"><if pos:start="135:17" pos:end="141:70">if <condition pos:start="135:20" pos:end="139:53">(<expr pos:start="135:21" pos:end="139:52"><name pos:start="135:21" pos:end="135:23">ret</name> <operator pos:start="135:25" pos:end="135:26">==</operator> <call pos:start="135:28" pos:end="135:42"><name pos:start="135:28" pos:end="135:34">AVERROR</name><argument_list pos:start="135:35" pos:end="135:42">(<argument pos:start="135:36" pos:end="135:41"><expr pos:start="135:36" pos:end="135:41"><name pos:start="135:36" pos:end="135:41">EAGAIN</name></expr></argument>)</argument_list></call>

                    <operator pos:start="137:21" pos:end="137:22">&amp;&amp;</operator> <operator pos:start="137:24" pos:end="137:24">(</operator><name pos:start="137:25" pos:end="137:35">prev_packet</name> <operator pos:start="137:37" pos:end="137:37">&amp;</operator> <name pos:start="137:39" pos:end="137:52">DCA_PACKET_XLL</name><operator pos:start="137:53" pos:end="137:53">)</operator>

                    <operator pos:start="139:21" pos:end="139:22">&amp;&amp;</operator> <operator pos:start="139:24" pos:end="139:24">(</operator><name pos:start="139:25" pos:end="139:33"><name pos:start="139:25" pos:end="139:25">s</name><operator pos:start="139:26" pos:end="139:27">-&gt;</operator><name pos:start="139:28" pos:end="139:33">packet</name></name> <operator pos:start="139:35" pos:end="139:35">&amp;</operator> <name pos:start="139:37" pos:end="139:51">DCA_PACKET_CORE</name><operator pos:start="139:52" pos:end="139:52">)</operator></expr>)</condition><block type="pseudo" pos:start="141:21" pos:end="141:70"><block_content pos:start="141:21" pos:end="141:70">

                    <expr_stmt pos:start="141:21" pos:end="141:70"><expr pos:start="141:21" pos:end="141:69"><name pos:start="141:21" pos:end="141:29"><name pos:start="141:21" pos:end="141:21">s</name><operator pos:start="141:22" pos:end="141:23">-&gt;</operator><name pos:start="141:24" pos:end="141:29">packet</name></name> <operator pos:start="141:31" pos:end="141:32">|=</operator> <name pos:start="141:34" pos:end="141:47">DCA_PACKET_XLL</name> <operator pos:start="141:49" pos:end="141:49">|</operator> <name pos:start="141:51" pos:end="141:69">DCA_PACKET_RECOVERY</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="143:17" pos:end="145:31">else if <condition pos:start="143:25" pos:end="143:92">(<expr pos:start="143:26" pos:end="143:91"><name pos:start="143:26" pos:end="143:28">ret</name> <operator pos:start="143:30" pos:end="143:31">==</operator> <call pos:start="143:33" pos:end="143:47"><name pos:start="143:33" pos:end="143:39">AVERROR</name><argument_list pos:start="143:40" pos:end="143:47">(<argument pos:start="143:41" pos:end="143:46"><expr pos:start="143:41" pos:end="143:46"><name pos:start="143:41" pos:end="143:46">ENOMEM</name></expr></argument>)</argument_list></call> <operator pos:start="143:49" pos:end="143:50">||</operator> <operator pos:start="143:52" pos:end="143:52">(</operator><name pos:start="143:53" pos:end="143:74"><name pos:start="143:53" pos:end="143:57">avctx</name><operator pos:start="143:58" pos:end="143:59">-&gt;</operator><name pos:start="143:60" pos:end="143:74">err_recognition</name></name> <operator pos:start="143:76" pos:end="143:76">&amp;</operator> <name pos:start="143:78" pos:end="143:90">AV_EF_EXPLODE</name><operator pos:start="143:91" pos:end="143:91">)</operator></expr>)</condition><block type="pseudo" pos:start="145:21" pos:end="145:31"><block_content pos:start="145:21" pos:end="145:31">

                    <return pos:start="145:21" pos:end="145:31">return <expr pos:start="145:28" pos:end="145:30"><name pos:start="145:28" pos:end="145:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="147:15" pos:end="151:13">else <block pos:start="147:20" pos:end="151:13">{<block_content pos:start="149:17" pos:end="149:44">

                <expr_stmt pos:start="149:17" pos:end="149:44"><expr pos:start="149:17" pos:end="149:43"><name pos:start="149:17" pos:end="149:25"><name pos:start="149:17" pos:end="149:17">s</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:25">packet</name></name> <operator pos:start="149:27" pos:end="149:28">|=</operator> <name pos:start="149:30" pos:end="149:43">DCA_PACKET_XLL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="157:9" pos:end="157:38">// Parse LBR component in EXSS</comment>

        <if_stmt pos:start="159:9" pos:end="173:9"><if pos:start="159:9" pos:end="173:9">if <condition pos:start="159:12" pos:end="159:60">(<expr pos:start="159:13" pos:end="159:59"><name pos:start="159:13" pos:end="159:17">asset</name> <operator pos:start="159:19" pos:end="159:20">&amp;&amp;</operator> <operator pos:start="159:22" pos:end="159:22">(</operator><name pos:start="159:23" pos:end="159:43"><name pos:start="159:23" pos:end="159:27">asset</name><operator pos:start="159:28" pos:end="159:29">-&gt;</operator><name pos:start="159:30" pos:end="159:43">extension_mask</name></name> <operator pos:start="159:45" pos:end="159:45">&amp;</operator> <name pos:start="159:47" pos:end="159:58">DCA_EXSS_LBR</name><operator pos:start="159:59" pos:end="159:59">)</operator></expr>)</condition> <block pos:start="159:62" pos:end="173:9">{<block_content pos:start="161:13" pos:end="171:13">

            <if_stmt pos:start="161:13" pos:end="171:13"><if pos:start="161:13" pos:end="167:13">if <condition pos:start="161:16" pos:end="161:68">(<expr pos:start="161:17" pos:end="161:67"><operator pos:start="161:17" pos:end="161:17">(</operator><name pos:start="161:18" pos:end="161:20">ret</name> <operator pos:start="161:22" pos:end="161:22">=</operator> <call pos:start="161:24" pos:end="161:62"><name pos:start="161:24" pos:end="161:39">ff_dca_lbr_parse</name><argument_list pos:start="161:40" pos:end="161:62">(<argument pos:start="161:41" pos:end="161:47"><expr pos:start="161:41" pos:end="161:47"><operator pos:start="161:41" pos:end="161:41">&amp;</operator><name pos:start="161:42" pos:end="161:47"><name pos:start="161:42" pos:end="161:42">s</name><operator pos:start="161:43" pos:end="161:44">-&gt;</operator><name pos:start="161:45" pos:end="161:47">lbr</name></name></expr></argument>, <argument pos:start="161:50" pos:end="161:54"><expr pos:start="161:50" pos:end="161:54"><name pos:start="161:50" pos:end="161:54">input</name></expr></argument>, <argument pos:start="161:57" pos:end="161:61"><expr pos:start="161:57" pos:end="161:61"><name pos:start="161:57" pos:end="161:61">asset</name></expr></argument>)</argument_list></call><operator pos:start="161:63" pos:end="161:63">)</operator> <operator pos:start="161:65" pos:end="161:65">&lt;</operator> <literal type="number" pos:start="161:67" pos:end="161:67">0</literal></expr>)</condition> <block pos:start="161:70" pos:end="167:13">{<block_content pos:start="163:17" pos:end="165:31">

                <if_stmt pos:start="163:17" pos:end="165:31"><if pos:start="163:17" pos:end="165:31">if <condition pos:start="163:20" pos:end="163:87">(<expr pos:start="163:21" pos:end="163:86"><name pos:start="163:21" pos:end="163:23">ret</name> <operator pos:start="163:25" pos:end="163:26">==</operator> <call pos:start="163:28" pos:end="163:42"><name pos:start="163:28" pos:end="163:34">AVERROR</name><argument_list pos:start="163:35" pos:end="163:42">(<argument pos:start="163:36" pos:end="163:41"><expr pos:start="163:36" pos:end="163:41"><name pos:start="163:36" pos:end="163:41">ENOMEM</name></expr></argument>)</argument_list></call> <operator pos:start="163:44" pos:end="163:45">||</operator> <operator pos:start="163:47" pos:end="163:47">(</operator><name pos:start="163:48" pos:end="163:69"><name pos:start="163:48" pos:end="163:52">avctx</name><operator pos:start="163:53" pos:end="163:54">-&gt;</operator><name pos:start="163:55" pos:end="163:69">err_recognition</name></name> <operator pos:start="163:71" pos:end="163:71">&amp;</operator> <name pos:start="163:73" pos:end="163:85">AV_EF_EXPLODE</name><operator pos:start="163:86" pos:end="163:86">)</operator></expr>)</condition><block type="pseudo" pos:start="165:21" pos:end="165:31"><block_content pos:start="165:21" pos:end="165:31">

                    <return pos:start="165:21" pos:end="165:31">return <expr pos:start="165:28" pos:end="165:30"><name pos:start="165:28" pos:end="165:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="167:15" pos:end="171:13">else <block pos:start="167:20" pos:end="171:13">{<block_content pos:start="169:17" pos:end="169:44">

                <expr_stmt pos:start="169:17" pos:end="169:44"><expr pos:start="169:17" pos:end="169:43"><name pos:start="169:17" pos:end="169:25"><name pos:start="169:17" pos:end="169:17">s</name><operator pos:start="169:18" pos:end="169:19">-&gt;</operator><name pos:start="169:20" pos:end="169:25">packet</name></name> <operator pos:start="169:27" pos:end="169:28">|=</operator> <name pos:start="169:30" pos:end="169:43">DCA_PACKET_LBR</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="177:9" pos:end="177:79">// Parse core extensions in EXSS or backward compatible core sub-stream</comment>

        <if_stmt pos:start="179:9" pos:end="183:23"><if pos:start="179:9" pos:end="183:23">if <condition pos:start="179:12" pos:end="181:74">(<expr pos:start="179:13" pos:end="181:73"><operator pos:start="179:13" pos:end="179:13">(</operator><name pos:start="179:14" pos:end="179:22"><name pos:start="179:14" pos:end="179:14">s</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:22">packet</name></name> <operator pos:start="179:24" pos:end="179:24">&amp;</operator> <name pos:start="179:26" pos:end="179:40">DCA_PACKET_CORE</name><operator pos:start="179:41" pos:end="179:41">)</operator>

            <operator pos:start="181:13" pos:end="181:14">&amp;&amp;</operator> <operator pos:start="181:16" pos:end="181:16">(</operator><name pos:start="181:17" pos:end="181:19">ret</name> <operator pos:start="181:21" pos:end="181:21">=</operator> <call pos:start="181:23" pos:end="181:68"><name pos:start="181:23" pos:end="181:44">ff_dca_core_parse_exss</name><argument_list pos:start="181:45" pos:end="181:68">(<argument pos:start="181:46" pos:end="181:53"><expr pos:start="181:46" pos:end="181:53"><operator pos:start="181:46" pos:end="181:46">&amp;</operator><name pos:start="181:47" pos:end="181:53"><name pos:start="181:47" pos:end="181:47">s</name><operator pos:start="181:48" pos:end="181:49">-&gt;</operator><name pos:start="181:50" pos:end="181:53">core</name></name></expr></argument>, <argument pos:start="181:56" pos:end="181:60"><expr pos:start="181:56" pos:end="181:60"><name pos:start="181:56" pos:end="181:60">input</name></expr></argument>, <argument pos:start="181:63" pos:end="181:67"><expr pos:start="181:63" pos:end="181:67"><name pos:start="181:63" pos:end="181:67">asset</name></expr></argument>)</argument_list></call><operator pos:start="181:69" pos:end="181:69">)</operator> <operator pos:start="181:71" pos:end="181:71">&lt;</operator> <literal type="number" pos:start="181:73" pos:end="181:73">0</literal></expr>)</condition><block type="pseudo" pos:start="183:13" pos:end="183:23"><block_content pos:start="183:13" pos:end="183:23">

            <return pos:start="183:13" pos:end="183:23">return <expr pos:start="183:20" pos:end="183:22"><name pos:start="183:20" pos:end="183:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="189:5" pos:end="189:23">// Filter the frame</comment>

    <if_stmt pos:start="191:5" pos:end="283:5"><if pos:start="191:5" pos:end="197:5">if <condition pos:start="191:8" pos:end="191:35">(<expr pos:start="191:9" pos:end="191:34"><name pos:start="191:9" pos:end="191:17"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:17">packet</name></name> <operator pos:start="191:19" pos:end="191:19">&amp;</operator> <name pos:start="191:21" pos:end="191:34">DCA_PACKET_LBR</name></expr>)</condition> <block pos:start="191:37" pos:end="197:5">{<block_content pos:start="193:9" pos:end="195:23">

        <if_stmt pos:start="193:9" pos:end="195:23"><if pos:start="193:9" pos:end="195:23">if <condition pos:start="193:12" pos:end="193:64">(<expr pos:start="193:13" pos:end="193:63"><operator pos:start="193:13" pos:end="193:13">(</operator><name pos:start="193:14" pos:end="193:16">ret</name> <operator pos:start="193:18" pos:end="193:18">=</operator> <call pos:start="193:20" pos:end="193:58"><name pos:start="193:20" pos:end="193:42">ff_dca_lbr_filter_frame</name><argument_list pos:start="193:43" pos:end="193:58">(<argument pos:start="193:44" pos:end="193:50"><expr pos:start="193:44" pos:end="193:50"><operator pos:start="193:44" pos:end="193:44">&amp;</operator><name pos:start="193:45" pos:end="193:50"><name pos:start="193:45" pos:end="193:45">s</name><operator pos:start="193:46" pos:end="193:47">-&gt;</operator><name pos:start="193:48" pos:end="193:50">lbr</name></name></expr></argument>, <argument pos:start="193:53" pos:end="193:57"><expr pos:start="193:53" pos:end="193:57"><name pos:start="193:53" pos:end="193:57">frame</name></expr></argument>)</argument_list></call><operator pos:start="193:59" pos:end="193:59">)</operator> <operator pos:start="193:61" pos:end="193:61">&lt;</operator> <literal type="number" pos:start="193:63" pos:end="193:63">0</literal></expr>)</condition><block type="pseudo" pos:start="195:13" pos:end="195:23"><block_content pos:start="195:13" pos:end="195:23">

            <return pos:start="195:13" pos:end="195:23">return <expr pos:start="195:20" pos:end="195:22"><name pos:start="195:20" pos:end="195:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="197:7" pos:end="263:5">else if <condition pos:start="197:15" pos:end="197:42">(<expr pos:start="197:16" pos:end="197:41"><name pos:start="197:16" pos:end="197:24"><name pos:start="197:16" pos:end="197:16">s</name><operator pos:start="197:17" pos:end="197:18">-&gt;</operator><name pos:start="197:19" pos:end="197:24">packet</name></name> <operator pos:start="197:26" pos:end="197:26">&amp;</operator> <name pos:start="197:28" pos:end="197:41">DCA_PACKET_XLL</name></expr>)</condition> <block pos:start="197:44" pos:end="263:5">{<block_content pos:start="199:9" pos:end="261:9">

        <if_stmt pos:start="199:9" pos:end="241:9"><if pos:start="199:9" pos:end="241:9">if <condition pos:start="199:12" pos:end="199:40">(<expr pos:start="199:13" pos:end="199:39"><name pos:start="199:13" pos:end="199:21"><name pos:start="199:13" pos:end="199:13">s</name><operator pos:start="199:14" pos:end="199:15">-&gt;</operator><name pos:start="199:16" pos:end="199:21">packet</name></name> <operator pos:start="199:23" pos:end="199:23">&amp;</operator> <name pos:start="199:25" pos:end="199:39">DCA_PACKET_CORE</name></expr>)</condition> <block pos:start="199:42" pos:end="241:9">{<block_content pos:start="201:13" pos:end="239:45">

            <decl_stmt pos:start="201:13" pos:end="201:31"><decl pos:start="201:13" pos:end="201:30"><type pos:start="201:13" pos:end="201:15"><name pos:start="201:13" pos:end="201:15">int</name></type> <name pos:start="201:17" pos:end="201:25">x96_synth</name> <init pos:start="201:27" pos:end="201:30">= <expr pos:start="201:29" pos:end="201:30"><operator pos:start="201:29" pos:end="201:29">-</operator><literal type="number" pos:start="201:30" pos:end="201:30">1</literal></expr></init></decl>;</decl_stmt>



            <comment type="line" pos:start="205:13" pos:end="205:45">// Enable X96 synthesis if needed</comment>

            <if_stmt pos:start="207:13" pos:end="209:30"><if pos:start="207:13" pos:end="209:30">if <condition pos:start="207:16" pos:end="207:78">(<expr pos:start="207:17" pos:end="207:77"><name pos:start="207:17" pos:end="207:31"><name pos:start="207:17" pos:end="207:17">s</name><operator pos:start="207:18" pos:end="207:19">-&gt;</operator><name pos:start="207:20" pos:end="207:22">xll</name><operator pos:start="207:23" pos:end="207:23">.</operator><name pos:start="207:24" pos:end="207:28">chset</name><index pos:start="207:29" pos:end="207:31">[<expr pos:start="207:30" pos:end="207:30"><literal type="number" pos:start="207:30" pos:end="207:30">0</literal></expr>]</index></name><operator pos:start="207:32" pos:end="207:32">.</operator><name pos:start="207:33" pos:end="207:36">freq</name> <operator pos:start="207:38" pos:end="207:39">==</operator> <literal type="number" pos:start="207:41" pos:end="207:45">96000</literal> <operator pos:start="207:47" pos:end="207:48">&amp;&amp;</operator> <name pos:start="207:50" pos:end="207:68"><name pos:start="207:50" pos:end="207:50">s</name><operator pos:start="207:51" pos:end="207:52">-&gt;</operator><name pos:start="207:53" pos:end="207:56">core</name><operator pos:start="207:57" pos:end="207:57">.</operator><name pos:start="207:58" pos:end="207:68">sample_rate</name></name> <operator pos:start="207:70" pos:end="207:71">==</operator> <literal type="number" pos:start="207:73" pos:end="207:77">48000</literal></expr>)</condition><block type="pseudo" pos:start="209:17" pos:end="209:30"><block_content pos:start="209:17" pos:end="209:30">

                <expr_stmt pos:start="209:17" pos:end="209:30"><expr pos:start="209:17" pos:end="209:29"><name pos:start="209:17" pos:end="209:25">x96_synth</name> <operator pos:start="209:27" pos:end="209:27">=</operator> <literal type="number" pos:start="209:29" pos:end="209:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="213:13" pos:end="215:27"><if pos:start="213:13" pos:end="215:27">if <condition pos:start="213:16" pos:end="213:74">(<expr pos:start="213:17" pos:end="213:73"><operator pos:start="213:17" pos:end="213:17">(</operator><name pos:start="213:18" pos:end="213:20">ret</name> <operator pos:start="213:22" pos:end="213:22">=</operator> <call pos:start="213:24" pos:end="213:68"><name pos:start="213:24" pos:end="213:47">ff_dca_core_filter_fixed</name><argument_list pos:start="213:48" pos:end="213:68">(<argument pos:start="213:49" pos:end="213:56"><expr pos:start="213:49" pos:end="213:56"><operator pos:start="213:49" pos:end="213:49">&amp;</operator><name pos:start="213:50" pos:end="213:56"><name pos:start="213:50" pos:end="213:50">s</name><operator pos:start="213:51" pos:end="213:52">-&gt;</operator><name pos:start="213:53" pos:end="213:56">core</name></name></expr></argument>, <argument pos:start="213:59" pos:end="213:67"><expr pos:start="213:59" pos:end="213:67"><name pos:start="213:59" pos:end="213:67">x96_synth</name></expr></argument>)</argument_list></call><operator pos:start="213:69" pos:end="213:69">)</operator> <operator pos:start="213:71" pos:end="213:71">&lt;</operator> <literal type="number" pos:start="213:73" pos:end="213:73">0</literal></expr>)</condition><block type="pseudo" pos:start="215:17" pos:end="215:27"><block_content pos:start="215:17" pos:end="215:27">

                <return pos:start="215:17" pos:end="215:27">return <expr pos:start="215:24" pos:end="215:26"><name pos:start="215:24" pos:end="215:26">ret</name></expr>;</return></block_content></block></if></if_stmt>



            <comment type="line" pos:start="219:13" pos:end="219:77">// Force lossy downmixed output on the first core frame filtered.</comment>

            <comment type="line" pos:start="221:13" pos:end="221:79">// This prevents audible clicks when seeking and is consistent with</comment>

            <comment type="line" pos:start="223:13" pos:end="223:80">// what reference decoder does when there are multiple channel sets.</comment>

            <if_stmt pos:start="225:13" pos:end="233:13"><if pos:start="225:13" pos:end="233:13">if <condition pos:start="225:16" pos:end="227:38">(<expr pos:start="225:17" pos:end="227:37"><operator pos:start="225:17" pos:end="225:17">!</operator><operator pos:start="225:18" pos:end="225:18">(</operator><name pos:start="225:19" pos:end="225:29">prev_packet</name> <operator pos:start="225:31" pos:end="225:31">&amp;</operator> <name pos:start="225:33" pos:end="225:51">DCA_PACKET_RESIDUAL</name><operator pos:start="225:52" pos:end="225:52">)</operator> <operator pos:start="225:54" pos:end="225:55">&amp;&amp;</operator> <name pos:start="225:57" pos:end="225:73"><name pos:start="225:57" pos:end="225:57">s</name><operator pos:start="225:58" pos:end="225:59">-&gt;</operator><name pos:start="225:60" pos:end="225:62">xll</name><operator pos:start="225:63" pos:end="225:63">.</operator><name pos:start="225:64" pos:end="225:73">nreschsets</name></name> <operator pos:start="225:75" pos:end="225:75">&gt;</operator> <literal type="number" pos:start="225:77" pos:end="225:77">0</literal>

                <operator pos:start="227:17" pos:end="227:18">&amp;&amp;</operator> <name pos:start="227:20" pos:end="227:33"><name pos:start="227:20" pos:end="227:20">s</name><operator pos:start="227:21" pos:end="227:22">-&gt;</operator><name pos:start="227:23" pos:end="227:25">xll</name><operator pos:start="227:26" pos:end="227:26">.</operator><name pos:start="227:27" pos:end="227:33">nchsets</name></name> <operator pos:start="227:35" pos:end="227:35">&gt;</operator> <literal type="number" pos:start="227:37" pos:end="227:37">1</literal></expr>)</condition> <block pos:start="227:40" pos:end="233:13">{<block_content pos:start="229:17" pos:end="231:49">

                <expr_stmt pos:start="229:17" pos:end="229:77"><expr pos:start="229:17" pos:end="229:76"><call pos:start="229:17" pos:end="229:76"><name pos:start="229:17" pos:end="229:22">av_log</name><argument_list pos:start="229:23" pos:end="229:76">(<argument pos:start="229:24" pos:end="229:28"><expr pos:start="229:24" pos:end="229:28"><name pos:start="229:24" pos:end="229:28">avctx</name></expr></argument>, <argument pos:start="229:31" pos:end="229:44"><expr pos:start="229:31" pos:end="229:44"><name pos:start="229:31" pos:end="229:44">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="229:47" pos:end="229:75"><expr pos:start="229:47" pos:end="229:75"><literal type="string" pos:start="229:47" pos:end="229:75">"Forcing XLL recovery mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:49"><expr pos:start="231:17" pos:end="231:48"><name pos:start="231:17" pos:end="231:25"><name pos:start="231:17" pos:end="231:17">s</name><operator pos:start="231:18" pos:end="231:19">-&gt;</operator><name pos:start="231:20" pos:end="231:25">packet</name></name> <operator pos:start="231:27" pos:end="231:28">|=</operator> <name pos:start="231:30" pos:end="231:48">DCA_PACKET_RECOVERY</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="line" pos:start="237:13" pos:end="237:56">// Set 'residual ok' flag for the next frame</comment>

            <expr_stmt pos:start="239:13" pos:end="239:45"><expr pos:start="239:13" pos:end="239:44"><name pos:start="239:13" pos:end="239:21"><name pos:start="239:13" pos:end="239:13">s</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:21">packet</name></name> <operator pos:start="239:23" pos:end="239:24">|=</operator> <name pos:start="239:26" pos:end="239:44">DCA_PACKET_RESIDUAL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="245:9" pos:end="261:9"><if pos:start="245:9" pos:end="261:9">if <condition pos:start="245:12" pos:end="245:64">(<expr pos:start="245:13" pos:end="245:63"><operator pos:start="245:13" pos:end="245:13">(</operator><name pos:start="245:14" pos:end="245:16">ret</name> <operator pos:start="245:18" pos:end="245:18">=</operator> <call pos:start="245:20" pos:end="245:58"><name pos:start="245:20" pos:end="245:42">ff_dca_xll_filter_frame</name><argument_list pos:start="245:43" pos:end="245:58">(<argument pos:start="245:44" pos:end="245:50"><expr pos:start="245:44" pos:end="245:50"><operator pos:start="245:44" pos:end="245:44">&amp;</operator><name pos:start="245:45" pos:end="245:50"><name pos:start="245:45" pos:end="245:45">s</name><operator pos:start="245:46" pos:end="245:47">-&gt;</operator><name pos:start="245:48" pos:end="245:50">xll</name></name></expr></argument>, <argument pos:start="245:53" pos:end="245:57"><expr pos:start="245:53" pos:end="245:57"><name pos:start="245:53" pos:end="245:57">frame</name></expr></argument>)</argument_list></call><operator pos:start="245:59" pos:end="245:59">)</operator> <operator pos:start="245:61" pos:end="245:61">&lt;</operator> <literal type="number" pos:start="245:63" pos:end="245:63">0</literal></expr>)</condition> <block pos:start="245:66" pos:end="261:9">{<block_content pos:start="249:13" pos:end="259:27">

            <comment type="line" pos:start="247:13" pos:end="247:50">// Fall back to core unless hard error</comment>

            <if_stmt pos:start="249:13" pos:end="251:27"><if pos:start="249:13" pos:end="251:27">if <condition pos:start="249:16" pos:end="249:47">(<expr pos:start="249:17" pos:end="249:46"><operator pos:start="249:17" pos:end="249:17">!</operator><operator pos:start="249:18" pos:end="249:18">(</operator><name pos:start="249:19" pos:end="249:27"><name pos:start="249:19" pos:end="249:19">s</name><operator pos:start="249:20" pos:end="249:21">-&gt;</operator><name pos:start="249:22" pos:end="249:27">packet</name></name> <operator pos:start="249:29" pos:end="249:29">&amp;</operator> <name pos:start="249:31" pos:end="249:45">DCA_PACKET_CORE</name><operator pos:start="249:46" pos:end="249:46">)</operator></expr>)</condition><block type="pseudo" pos:start="251:17" pos:end="251:27"><block_content pos:start="251:17" pos:end="251:27">

                <return pos:start="251:17" pos:end="251:27">return <expr pos:start="251:24" pos:end="251:26"><name pos:start="251:24" pos:end="251:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="253:13" pos:end="255:27"><if pos:start="253:13" pos:end="255:27">if <condition pos:start="253:16" pos:end="253:87">(<expr pos:start="253:17" pos:end="253:86"><name pos:start="253:17" pos:end="253:19">ret</name> <operator pos:start="253:21" pos:end="253:22">!=</operator> <name pos:start="253:24" pos:end="253:42">AVERROR_INVALIDDATA</name> <operator pos:start="253:44" pos:end="253:45">||</operator> <operator pos:start="253:47" pos:end="253:47">(</operator><name pos:start="253:48" pos:end="253:69"><name pos:start="253:48" pos:end="253:52">avctx</name><operator pos:start="253:53" pos:end="253:54">-&gt;</operator><name pos:start="253:55" pos:end="253:69">err_recognition</name></name> <operator pos:start="253:71" pos:end="253:71">&amp;</operator> <name pos:start="253:73" pos:end="253:85">AV_EF_EXPLODE</name><operator pos:start="253:86" pos:end="253:86">)</operator></expr>)</condition><block type="pseudo" pos:start="255:17" pos:end="255:27"><block_content pos:start="255:17" pos:end="255:27">

                <return pos:start="255:17" pos:end="255:27">return <expr pos:start="255:24" pos:end="255:26"><name pos:start="255:24" pos:end="255:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="257:13" pos:end="259:27"><if pos:start="257:13" pos:end="259:27">if <condition pos:start="257:16" pos:end="257:70">(<expr pos:start="257:17" pos:end="257:69"><operator pos:start="257:17" pos:end="257:17">(</operator><name pos:start="257:18" pos:end="257:20">ret</name> <operator pos:start="257:22" pos:end="257:22">=</operator> <call pos:start="257:24" pos:end="257:64"><name pos:start="257:24" pos:end="257:47">ff_dca_core_filter_frame</name><argument_list pos:start="257:48" pos:end="257:64">(<argument pos:start="257:49" pos:end="257:56"><expr pos:start="257:49" pos:end="257:56"><operator pos:start="257:49" pos:end="257:49">&amp;</operator><name pos:start="257:50" pos:end="257:56"><name pos:start="257:50" pos:end="257:50">s</name><operator pos:start="257:51" pos:end="257:52">-&gt;</operator><name pos:start="257:53" pos:end="257:56">core</name></name></expr></argument>, <argument pos:start="257:59" pos:end="257:63"><expr pos:start="257:59" pos:end="257:63"><name pos:start="257:59" pos:end="257:63">frame</name></expr></argument>)</argument_list></call><operator pos:start="257:65" pos:end="257:65">)</operator> <operator pos:start="257:67" pos:end="257:67">&lt;</operator> <literal type="number" pos:start="257:69" pos:end="257:69">0</literal></expr>)</condition><block type="pseudo" pos:start="259:17" pos:end="259:27"><block_content pos:start="259:17" pos:end="259:27">

                <return pos:start="259:17" pos:end="259:27">return <expr pos:start="259:24" pos:end="259:26"><name pos:start="259:24" pos:end="259:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="263:7" pos:end="273:5">else if <condition pos:start="263:15" pos:end="263:43">(<expr pos:start="263:16" pos:end="263:42"><name pos:start="263:16" pos:end="263:24"><name pos:start="263:16" pos:end="263:16">s</name><operator pos:start="263:17" pos:end="263:18">-&gt;</operator><name pos:start="263:19" pos:end="263:24">packet</name></name> <operator pos:start="263:26" pos:end="263:26">&amp;</operator> <name pos:start="263:28" pos:end="263:42">DCA_PACKET_CORE</name></expr>)</condition> <block pos:start="263:45" pos:end="273:5">{<block_content pos:start="265:9" pos:end="271:45">

        <if_stmt pos:start="265:9" pos:end="267:23"><if pos:start="265:9" pos:end="267:23">if <condition pos:start="265:12" pos:end="265:66">(<expr pos:start="265:13" pos:end="265:65"><operator pos:start="265:13" pos:end="265:13">(</operator><name pos:start="265:14" pos:end="265:16">ret</name> <operator pos:start="265:18" pos:end="265:18">=</operator> <call pos:start="265:20" pos:end="265:60"><name pos:start="265:20" pos:end="265:43">ff_dca_core_filter_frame</name><argument_list pos:start="265:44" pos:end="265:60">(<argument pos:start="265:45" pos:end="265:52"><expr pos:start="265:45" pos:end="265:52"><operator pos:start="265:45" pos:end="265:45">&amp;</operator><name pos:start="265:46" pos:end="265:52"><name pos:start="265:46" pos:end="265:46">s</name><operator pos:start="265:47" pos:end="265:48">-&gt;</operator><name pos:start="265:49" pos:end="265:52">core</name></name></expr></argument>, <argument pos:start="265:55" pos:end="265:59"><expr pos:start="265:55" pos:end="265:59"><name pos:start="265:55" pos:end="265:59">frame</name></expr></argument>)</argument_list></call><operator pos:start="265:61" pos:end="265:61">)</operator> <operator pos:start="265:63" pos:end="265:63">&lt;</operator> <literal type="number" pos:start="265:65" pos:end="265:65">0</literal></expr>)</condition><block type="pseudo" pos:start="267:13" pos:end="267:23"><block_content pos:start="267:13" pos:end="267:23">

            <return pos:start="267:13" pos:end="267:23">return <expr pos:start="267:20" pos:end="267:22"><name pos:start="267:20" pos:end="267:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="269:9" pos:end="271:45"><if pos:start="269:9" pos:end="271:45">if <condition pos:start="269:12" pos:end="269:56">(<expr pos:start="269:13" pos:end="269:55"><name pos:start="269:13" pos:end="269:31"><name pos:start="269:13" pos:end="269:13">s</name><operator pos:start="269:14" pos:end="269:15">-&gt;</operator><name pos:start="269:16" pos:end="269:19">core</name><operator pos:start="269:20" pos:end="269:20">.</operator><name pos:start="269:21" pos:end="269:31">filter_mode</name></name> <operator pos:start="269:33" pos:end="269:33">&amp;</operator> <name pos:start="269:35" pos:end="269:55">DCA_FILTER_MODE_FIXED</name></expr>)</condition><block type="pseudo" pos:start="271:13" pos:end="271:45"><block_content pos:start="271:13" pos:end="271:45">

            <expr_stmt pos:start="271:13" pos:end="271:45"><expr pos:start="271:13" pos:end="271:44"><name pos:start="271:13" pos:end="271:21"><name pos:start="271:13" pos:end="271:13">s</name><operator pos:start="271:14" pos:end="271:15">-&gt;</operator><name pos:start="271:16" pos:end="271:21">packet</name></name> <operator pos:start="271:23" pos:end="271:24">|=</operator> <name pos:start="271:26" pos:end="271:44">DCA_PACKET_RESIDUAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="273:7" pos:end="283:5">else <block pos:start="273:12" pos:end="283:5">{<block_content pos:start="275:9" pos:end="281:35">

        <expr_stmt pos:start="275:9" pos:end="275:71"><expr pos:start="275:9" pos:end="275:70"><call pos:start="275:9" pos:end="275:70"><name pos:start="275:9" pos:end="275:14">av_log</name><argument_list pos:start="275:15" pos:end="275:70">(<argument pos:start="275:16" pos:end="275:20"><expr pos:start="275:16" pos:end="275:20"><name pos:start="275:16" pos:end="275:20">avctx</name></expr></argument>, <argument pos:start="275:23" pos:end="275:34"><expr pos:start="275:23" pos:end="275:34"><name pos:start="275:23" pos:end="275:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="275:37" pos:end="275:69"><expr pos:start="275:37" pos:end="275:69"><literal type="string" pos:start="275:37" pos:end="275:69">"No valid DCA sub-stream found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="277:9" pos:end="279:85"><if pos:start="277:9" pos:end="279:85">if <condition pos:start="277:12" pos:end="277:25">(<expr pos:start="277:13" pos:end="277:24"><name pos:start="277:13" pos:end="277:24"><name pos:start="277:13" pos:end="277:13">s</name><operator pos:start="277:14" pos:end="277:15">-&gt;</operator><name pos:start="277:16" pos:end="277:24">core_only</name></name></expr>)</condition><block type="pseudo" pos:start="279:13" pos:end="279:85"><block_content pos:start="279:13" pos:end="279:85">

            <expr_stmt pos:start="279:13" pos:end="279:85"><expr pos:start="279:13" pos:end="279:84"><call pos:start="279:13" pos:end="279:84"><name pos:start="279:13" pos:end="279:18">av_log</name><argument_list pos:start="279:19" pos:end="279:84">(<argument pos:start="279:20" pos:end="279:24"><expr pos:start="279:20" pos:end="279:24"><name pos:start="279:20" pos:end="279:24">avctx</name></expr></argument>, <argument pos:start="279:27" pos:end="279:40"><expr pos:start="279:27" pos:end="279:40"><name pos:start="279:27" pos:end="279:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="279:43" pos:end="279:83"><expr pos:start="279:43" pos:end="279:83"><literal type="string" pos:start="279:43" pos:end="279:83">"Consider disabling 'core_only' option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="281:9" pos:end="281:35">return <expr pos:start="281:16" pos:end="281:34"><name pos:start="281:16" pos:end="281:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="287:5" pos:end="287:23"><expr pos:start="287:5" pos:end="287:22"><operator pos:start="287:5" pos:end="287:5">*</operator><name pos:start="287:6" pos:end="287:18">got_frame_ptr</name> <operator pos:start="287:20" pos:end="287:20">=</operator> <literal type="number" pos:start="287:22" pos:end="287:22">1</literal></expr>;</expr_stmt>



    <return pos:start="291:5" pos:end="291:23">return <expr pos:start="291:12" pos:end="291:22"><name pos:start="291:12" pos:end="291:22"><name pos:start="291:12" pos:end="291:16">avpkt</name><operator pos:start="291:17" pos:end="291:18">-&gt;</operator><name pos:start="291:19" pos:end="291:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
