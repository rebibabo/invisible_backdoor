<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8146.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:13">main_loop</name><parameter_list pos:start="1:14" pos:end="1:27">(<parameter pos:start="1:15" pos:end="1:26"><decl pos:start="1:15" pos:end="1:26"><type pos:start="1:15" pos:end="1:20"><name pos:start="1:15" pos:end="1:18">void</name> <modifier pos:start="1:20" pos:end="1:20">*</modifier></type><name pos:start="1:21" pos:end="1:26">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="219:1">{<block_content pos:start="5:5" pos:end="217:15">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:17">pollfd</name></name></type> <name pos:start="5:19" pos:end="5:25"><name pos:start="5:19" pos:end="5:22">ufds</name><index pos:start="5:23" pos:end="5:25">[<expr pos:start="5:24" pos:end="5:24"><literal type="number" pos:start="5:24" pos:end="5:24">3</literal></expr>]</index></name></decl>, <decl pos:start="5:28" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:17"><modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:30">pf</name></decl>, <decl pos:start="5:33" pos:end="5:43"><type ref="prev" pos:start="5:5" pos:end="5:17"><modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:43">serial_ufd</name></decl>, <decl pos:start="5:46" pos:end="5:53"><type ref="prev" pos:start="5:5" pos:end="5:17"><modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:53">net_ufd</name></decl>, <decl pos:start="5:56" pos:end="5:63"><type ref="prev" pos:start="5:5" pos:end="5:17"><modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:63">gdb_ufd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:14">n</name></decl>, <decl pos:start="7:17" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:23">timeout</name></decl>, <decl pos:start="7:26" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:34">serial_ok</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:14">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name> <init pos:start="11:19" pos:end="11:30">= <expr pos:start="11:21" pos:end="11:30"><name pos:start="11:21" pos:end="11:30">global_env</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="27:5"><if pos:start="15:5" pos:end="27:5">if <condition pos:start="15:8" pos:end="15:21">(<expr pos:start="15:9" pos:end="15:20"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:20">term_inited</name></expr>)</condition> <block pos:start="15:23" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:20">

        <comment type="block" pos:start="17:9" pos:end="21:25">/* initialize terminal only there so that the user has a

           chance to stop QEMU with Ctrl-C before the gdb connection

           is launched */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:24"><expr pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:19">term_inited</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <literal type="number" pos:start="23:23" pos:end="23:23">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:20"><expr pos:start="25:9" pos:end="25:19"><call pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:17">term_init</name><argument_list pos:start="25:18" pos:end="25:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:18"><expr pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:13">serial_ok</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><call pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:20">cpu_enable_ticks</name><argument_list pos:start="33:21" pos:end="33:22">()</argument_list></call></expr>;</expr_stmt>

    <for pos:start="35:5" pos:end="213:5">for<control pos:start="35:8" pos:end="35:11">(<init pos:start="35:9" pos:end="35:9">;</init><condition pos:start="35:10" pos:end="35:10">;</condition><incr/>)</control> <block pos:start="35:13" pos:end="213:5">{<block_content pos:start="37:9" pos:end="211:9">

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:31"><name pos:start="37:15" pos:end="37:26">cpu_x86_exec</name><argument_list pos:start="37:27" pos:end="37:31">(<argument pos:start="37:28" pos:end="37:30"><expr pos:start="37:28" pos:end="37:30"><name pos:start="37:28" pos:end="37:30">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:28">(<expr pos:start="39:13" pos:end="39:27"><name pos:start="39:13" pos:end="39:27">reset_requested</name></expr>)</condition> <block pos:start="39:30" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:18">

            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:32">EXCP_INTERRUPT</name></expr>;</expr_stmt> 

            <break pos:start="43:13" pos:end="43:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:30">(<expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:15">ret</name> <operator pos:start="47:17" pos:end="47:18">==</operator> <name pos:start="47:20" pos:end="47:29">EXCP_DEBUG</name></expr>)</condition> <block pos:start="47:32" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:18">

            <expr_stmt pos:start="49:13" pos:end="49:29"><expr pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:28">EXCP_DEBUG</name></expr>;</expr_stmt>

            <break pos:start="51:13" pos:end="51:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="55:9" pos:end="55:60">/* if hlt instruction, we wait until the next IRQ */</comment>

        <if_stmt pos:start="57:9" pos:end="63:24"><if pos:start="57:9" pos:end="59:25">if <condition pos:start="57:12" pos:end="57:28">(<expr pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:18">==</operator> <name pos:start="57:20" pos:end="57:27">EXCP_HLT</name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:25"><block_content pos:start="59:13" pos:end="59:25"> 

            <expr_stmt pos:start="59:13" pos:end="59:25"><expr pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:19">timeout</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <literal type="number" pos:start="59:23" pos:end="59:24">10</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="61:9" pos:end="63:24">else<block type="pseudo" pos:start="63:13" pos:end="63:24"><block_content pos:start="63:13" pos:end="63:24">

            <expr_stmt pos:start="63:13" pos:end="63:24"><expr pos:start="63:13" pos:end="63:23"><name pos:start="63:13" pos:end="63:19">timeout</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <literal type="number" pos:start="63:23" pos:end="63:23">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block" pos:start="65:9" pos:end="65:29">/* poll any events */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:26"><expr pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:18">serial_ufd</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <name pos:start="67:22" pos:end="67:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:18"><expr pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:10">pf</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <name pos:start="69:14" pos:end="69:17">ufds</name></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="81:9"><if pos:start="71:9" pos:end="81:9">if <condition pos:start="71:12" pos:end="71:62">(<expr pos:start="71:13" pos:end="71:61"><name pos:start="71:13" pos:end="71:21">serial_ok</name> <operator pos:start="71:23" pos:end="71:24">&amp;&amp;</operator> <operator pos:start="71:26" pos:end="71:26">!</operator><operator pos:start="71:27" pos:end="71:27">(</operator><name pos:start="71:28" pos:end="71:42"><name pos:start="71:28" pos:end="71:39">serial_ports</name><index pos:start="71:40" pos:end="71:42">[<expr pos:start="71:41" pos:end="71:41"><literal type="number" pos:start="71:41" pos:end="71:41">0</literal></expr>]</index></name><operator pos:start="71:43" pos:end="71:43">.</operator><name pos:start="71:44" pos:end="71:46">lsr</name> <operator pos:start="71:48" pos:end="71:48">&amp;</operator> <name pos:start="71:50" pos:end="71:60">UART_LSR_DR</name><operator pos:start="71:61" pos:end="71:61">)</operator></expr>)</condition> <block pos:start="71:64" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:17">

            <expr_stmt pos:start="73:13" pos:end="73:28"><expr pos:start="73:13" pos:end="73:27"><name pos:start="73:13" pos:end="73:22">serial_ufd</name> <operator pos:start="73:24" pos:end="73:24">=</operator> <name pos:start="73:26" pos:end="73:27">pf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:23"><expr pos:start="75:13" pos:end="75:22"><name pos:start="75:13" pos:end="75:18"><name pos:start="75:13" pos:end="75:14">pf</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:18">fd</name></name> <operator pos:start="75:20" pos:end="75:20">=</operator> <literal type="number" pos:start="75:22" pos:end="75:22">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:32"><expr pos:start="77:13" pos:end="77:31"><name pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:14">pf</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:22">events</name></name> <operator pos:start="77:24" pos:end="77:24">=</operator> <name pos:start="77:26" pos:end="77:31">POLLIN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:17"><expr pos:start="79:13" pos:end="79:16"><name pos:start="79:13" pos:end="79:14">pf</name><operator pos:start="79:15" pos:end="79:16">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:23"><expr pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:15">net_ufd</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <name pos:start="83:19" pos:end="83:22">NULL</name></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="95:9"><if pos:start="85:9" pos:end="95:9">if <condition pos:start="85:12" pos:end="85:60">(<expr pos:start="85:13" pos:end="85:59"><name pos:start="85:13" pos:end="85:18">net_fd</name> <operator pos:start="85:20" pos:end="85:20">&gt;</operator> <literal type="number" pos:start="85:22" pos:end="85:22">0</literal> <operator pos:start="85:24" pos:end="85:25">&amp;&amp;</operator> <call pos:start="85:27" pos:end="85:59"><name pos:start="85:27" pos:end="85:44">ne2000_can_receive</name><argument_list pos:start="85:45" pos:end="85:59">(<argument pos:start="85:46" pos:end="85:58"><expr pos:start="85:46" pos:end="85:58"><operator pos:start="85:46" pos:end="85:46">&amp;</operator><name pos:start="85:47" pos:end="85:58">ne2000_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:62" pos:end="95:9">{<block_content pos:start="87:13" pos:end="93:17">

            <expr_stmt pos:start="87:13" pos:end="87:25"><expr pos:start="87:13" pos:end="87:24"><name pos:start="87:13" pos:end="87:19">net_ufd</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <name pos:start="87:23" pos:end="87:24">pf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:28"><expr pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:18"><name pos:start="89:13" pos:end="89:14">pf</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:18">fd</name></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <name pos:start="89:22" pos:end="89:27">net_fd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:32"><expr pos:start="91:13" pos:end="91:31"><name pos:start="91:13" pos:end="91:22"><name pos:start="91:13" pos:end="91:14">pf</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:22">events</name></name> <operator pos:start="91:24" pos:end="91:24">=</operator> <name pos:start="91:26" pos:end="91:31">POLLIN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:17"><expr pos:start="93:13" pos:end="93:16"><name pos:start="93:13" pos:end="93:14">pf</name><operator pos:start="93:15" pos:end="93:16">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:23"><expr pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:15">gdb_ufd</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <name pos:start="97:19" pos:end="97:22">NULL</name></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="109:9"><if pos:start="99:9" pos:end="109:9">if <condition pos:start="99:12" pos:end="99:27">(<expr pos:start="99:13" pos:end="99:26"><name pos:start="99:13" pos:end="99:22">gdbstub_fd</name> <operator pos:start="99:24" pos:end="99:24">&gt;</operator> <literal type="number" pos:start="99:26" pos:end="99:26">0</literal></expr>)</condition> <block pos:start="99:29" pos:end="109:9">{<block_content pos:start="101:13" pos:end="107:17">

            <expr_stmt pos:start="101:13" pos:end="101:25"><expr pos:start="101:13" pos:end="101:24"><name pos:start="101:13" pos:end="101:19">gdb_ufd</name> <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:24">pf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:32"><expr pos:start="103:13" pos:end="103:31"><name pos:start="103:13" pos:end="103:18"><name pos:start="103:13" pos:end="103:14">pf</name><operator pos:start="103:15" pos:end="103:16">-&gt;</operator><name pos:start="103:17" pos:end="103:18">fd</name></name> <operator pos:start="103:20" pos:end="103:20">=</operator> <name pos:start="103:22" pos:end="103:31">gdbstub_fd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:32"><expr pos:start="105:13" pos:end="105:31"><name pos:start="105:13" pos:end="105:22"><name pos:start="105:13" pos:end="105:14">pf</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:22">events</name></name> <operator pos:start="105:24" pos:end="105:24">=</operator> <name pos:start="105:26" pos:end="105:31">POLLIN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:17"><expr pos:start="107:13" pos:end="107:16"><name pos:start="107:13" pos:end="107:14">pf</name><operator pos:start="107:15" pos:end="107:16">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:45"><expr pos:start="113:9" pos:end="113:44"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <call pos:start="113:15" pos:end="113:44"><name pos:start="113:15" pos:end="113:18">poll</name><argument_list pos:start="113:19" pos:end="113:44">(<argument pos:start="113:20" pos:end="113:23"><expr pos:start="113:20" pos:end="113:23"><name pos:start="113:20" pos:end="113:23">ufds</name></expr></argument>, <argument pos:start="113:26" pos:end="113:34"><expr pos:start="113:26" pos:end="113:34"><name pos:start="113:26" pos:end="113:27">pf</name> <operator pos:start="113:29" pos:end="113:29">-</operator> <name pos:start="113:31" pos:end="113:34">ufds</name></expr></argument>, <argument pos:start="113:37" pos:end="113:43"><expr pos:start="113:37" pos:end="113:43"><name pos:start="113:37" pos:end="113:43">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="177:9"><if pos:start="115:9" pos:end="177:9">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">&gt;</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>)</condition> <block pos:start="115:22" pos:end="177:9">{<block_content pos:start="117:13" pos:end="175:13">

            <if_stmt pos:start="117:13" pos:end="133:13"><if pos:start="117:13" pos:end="133:13">if <condition pos:start="117:16" pos:end="117:61">(<expr pos:start="117:17" pos:end="117:60"><name pos:start="117:17" pos:end="117:26">serial_ufd</name> <operator pos:start="117:28" pos:end="117:29">&amp;&amp;</operator> <operator pos:start="117:31" pos:end="117:31">(</operator><name pos:start="117:32" pos:end="117:50"><name pos:start="117:32" pos:end="117:41">serial_ufd</name><operator pos:start="117:42" pos:end="117:43">-&gt;</operator><name pos:start="117:44" pos:end="117:50">revents</name></name> <operator pos:start="117:52" pos:end="117:52">&amp;</operator> <name pos:start="117:54" pos:end="117:59">POLLIN</name><operator pos:start="117:60" pos:end="117:60">)</operator></expr>)</condition> <block pos:start="117:63" pos:end="133:13">{<block_content pos:start="119:17" pos:end="131:17">

                <expr_stmt pos:start="119:17" pos:end="119:36"><expr pos:start="119:17" pos:end="119:35"><name pos:start="119:17" pos:end="119:17">n</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <call pos:start="119:21" pos:end="119:35"><name pos:start="119:21" pos:end="119:24">read</name><argument_list pos:start="119:25" pos:end="119:35">(<argument pos:start="119:26" pos:end="119:26"><expr pos:start="119:26" pos:end="119:26"><literal type="number" pos:start="119:26" pos:end="119:26">0</literal></expr></argument>, <argument pos:start="119:29" pos:end="119:31"><expr pos:start="119:29" pos:end="119:31"><operator pos:start="119:29" pos:end="119:29">&amp;</operator><name pos:start="119:30" pos:end="119:31">ch</name></expr></argument>, <argument pos:start="119:34" pos:end="119:34"><expr pos:start="119:34" pos:end="119:34"><literal type="number" pos:start="119:34" pos:end="119:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="121:17" pos:end="131:17"><if pos:start="121:17" pos:end="125:17">if <condition pos:start="121:20" pos:end="121:27">(<expr pos:start="121:21" pos:end="121:26"><name pos:start="121:21" pos:end="121:21">n</name> <operator pos:start="121:23" pos:end="121:24">==</operator> <literal type="number" pos:start="121:26" pos:end="121:26">1</literal></expr>)</condition> <block pos:start="121:29" pos:end="125:17">{<block_content pos:start="123:21" pos:end="123:63">

                    <expr_stmt pos:start="123:21" pos:end="123:63"><expr pos:start="123:21" pos:end="123:62"><call pos:start="123:21" pos:end="123:62"><name pos:start="123:21" pos:end="123:40">serial_received_byte</name><argument_list pos:start="123:41" pos:end="123:62">(<argument pos:start="123:42" pos:end="123:57"><expr pos:start="123:42" pos:end="123:57"><operator pos:start="123:42" pos:end="123:42">&amp;</operator><name pos:start="123:43" pos:end="123:57"><name pos:start="123:43" pos:end="123:54">serial_ports</name><index pos:start="123:55" pos:end="123:57">[<expr pos:start="123:56" pos:end="123:56"><literal type="number" pos:start="123:56" pos:end="123:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="123:60" pos:end="123:61"><expr pos:start="123:60" pos:end="123:61"><name pos:start="123:60" pos:end="123:61">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="125:19" pos:end="131:17">else <block pos:start="125:24" pos:end="131:17">{<block_content pos:start="129:21" pos:end="129:34">

		    <comment type="block" pos:start="127:21" pos:end="127:47">/* Closed, stop polling. */</comment>

                    <expr_stmt pos:start="129:21" pos:end="129:34"><expr pos:start="129:21" pos:end="129:33"><name pos:start="129:21" pos:end="129:29">serial_ok</name> <operator pos:start="129:31" pos:end="129:31">=</operator> <literal type="number" pos:start="129:33" pos:end="129:33">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="135:13" pos:end="157:13"><if pos:start="135:13" pos:end="157:13">if <condition pos:start="135:16" pos:end="135:55">(<expr pos:start="135:17" pos:end="135:54"><name pos:start="135:17" pos:end="135:23">net_ufd</name> <operator pos:start="135:25" pos:end="135:26">&amp;&amp;</operator> <operator pos:start="135:28" pos:end="135:28">(</operator><name pos:start="135:29" pos:end="135:44"><name pos:start="135:29" pos:end="135:35">net_ufd</name><operator pos:start="135:36" pos:end="135:37">-&gt;</operator><name pos:start="135:38" pos:end="135:44">revents</name></name> <operator pos:start="135:46" pos:end="135:46">&amp;</operator> <name pos:start="135:48" pos:end="135:53">POLLIN</name><operator pos:start="135:54" pos:end="135:54">)</operator></expr>)</condition> <block pos:start="135:57" pos:end="157:13">{<block_content pos:start="137:17" pos:end="155:17">

                <decl_stmt pos:start="137:17" pos:end="137:48"><decl pos:start="137:17" pos:end="137:47"><type pos:start="137:17" pos:end="137:23"><name pos:start="137:17" pos:end="137:23">uint8_t</name></type> <name pos:start="137:25" pos:end="137:47"><name pos:start="137:25" pos:end="137:27">buf</name><index pos:start="137:28" pos:end="137:47">[<expr pos:start="137:29" pos:end="137:46"><name pos:start="137:29" pos:end="137:46">MAX_ETH_FRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



                <expr_stmt pos:start="141:17" pos:end="141:58"><expr pos:start="141:17" pos:end="141:57"><name pos:start="141:17" pos:end="141:17">n</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <call pos:start="141:21" pos:end="141:57"><name pos:start="141:21" pos:end="141:24">read</name><argument_list pos:start="141:25" pos:end="141:57">(<argument pos:start="141:26" pos:end="141:31"><expr pos:start="141:26" pos:end="141:31"><name pos:start="141:26" pos:end="141:31">net_fd</name></expr></argument>, <argument pos:start="141:34" pos:end="141:36"><expr pos:start="141:34" pos:end="141:36"><name pos:start="141:34" pos:end="141:36">buf</name></expr></argument>, <argument pos:start="141:39" pos:end="141:56"><expr pos:start="141:39" pos:end="141:56"><name pos:start="141:39" pos:end="141:56">MAX_ETH_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="143:17" pos:end="155:17"><if pos:start="143:17" pos:end="155:17">if <condition pos:start="143:20" pos:end="143:26">(<expr pos:start="143:21" pos:end="143:25"><name pos:start="143:21" pos:end="143:21">n</name> <operator pos:start="143:23" pos:end="143:23">&gt;</operator> <literal type="number" pos:start="143:25" pos:end="143:25">0</literal></expr>)</condition> <block pos:start="143:28" pos:end="155:17">{<block_content pos:start="145:21" pos:end="153:58">

                    <if_stmt pos:start="145:21" pos:end="151:21"><if pos:start="145:21" pos:end="151:21">if <condition pos:start="145:24" pos:end="145:31">(<expr pos:start="145:25" pos:end="145:30"><name pos:start="145:25" pos:end="145:25">n</name> <operator pos:start="145:27" pos:end="145:27">&lt;</operator> <literal type="number" pos:start="145:29" pos:end="145:30">60</literal></expr>)</condition> <block pos:start="145:33" pos:end="151:21">{<block_content pos:start="147:25" pos:end="149:31">

                        <expr_stmt pos:start="147:25" pos:end="147:51"><expr pos:start="147:25" pos:end="147:50"><call pos:start="147:25" pos:end="147:50"><name pos:start="147:25" pos:end="147:30">memset</name><argument_list pos:start="147:31" pos:end="147:50">(<argument pos:start="147:32" pos:end="147:38"><expr pos:start="147:32" pos:end="147:38"><name pos:start="147:32" pos:end="147:34">buf</name> <operator pos:start="147:36" pos:end="147:36">+</operator> <name pos:start="147:38" pos:end="147:38">n</name></expr></argument>, <argument pos:start="147:41" pos:end="147:41"><expr pos:start="147:41" pos:end="147:41"><literal type="number" pos:start="147:41" pos:end="147:41">0</literal></expr></argument>, <argument pos:start="147:44" pos:end="147:49"><expr pos:start="147:44" pos:end="147:49"><literal type="number" pos:start="147:44" pos:end="147:47">60</literal> <operator pos:start="147:47" pos:end="147:47">-</operator> <name pos:start="147:49" pos:end="147:49">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="149:25" pos:end="149:31"><expr pos:start="149:25" pos:end="149:30"><name pos:start="149:25" pos:end="149:25">n</name> <operator pos:start="149:27" pos:end="149:27">=</operator> <literal type="number" pos:start="149:29" pos:end="149:30">60</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="153:21" pos:end="153:58"><expr pos:start="153:21" pos:end="153:57"><call pos:start="153:21" pos:end="153:57"><name pos:start="153:21" pos:end="153:34">ne2000_receive</name><argument_list pos:start="153:35" pos:end="153:57">(<argument pos:start="153:36" pos:end="153:48"><expr pos:start="153:36" pos:end="153:48"><operator pos:start="153:36" pos:end="153:36">&amp;</operator><name pos:start="153:37" pos:end="153:48">ne2000_state</name></expr></argument>, <argument pos:start="153:51" pos:end="153:53"><expr pos:start="153:51" pos:end="153:53"><name pos:start="153:51" pos:end="153:53">buf</name></expr></argument>, <argument pos:start="153:56" pos:end="153:56"><expr pos:start="153:56" pos:end="153:56"><name pos:start="153:56" pos:end="153:56">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="159:13" pos:end="175:13"><if pos:start="159:13" pos:end="175:13">if <condition pos:start="159:16" pos:end="159:55">(<expr pos:start="159:17" pos:end="159:54"><name pos:start="159:17" pos:end="159:23">gdb_ufd</name> <operator pos:start="159:25" pos:end="159:26">&amp;&amp;</operator> <operator pos:start="159:28" pos:end="159:28">(</operator><name pos:start="159:29" pos:end="159:44"><name pos:start="159:29" pos:end="159:35">gdb_ufd</name><operator pos:start="159:36" pos:end="159:37">-&gt;</operator><name pos:start="159:38" pos:end="159:44">revents</name></name> <operator pos:start="159:46" pos:end="159:46">&amp;</operator> <name pos:start="159:48" pos:end="159:53">POLLIN</name><operator pos:start="159:54" pos:end="159:54">)</operator></expr>)</condition> <block pos:start="159:57" pos:end="175:13">{<block_content pos:start="161:17" pos:end="173:17">

                <decl_stmt pos:start="161:17" pos:end="161:31"><decl pos:start="161:17" pos:end="161:30"><type pos:start="161:17" pos:end="161:23"><name pos:start="161:17" pos:end="161:23">uint8_t</name></type> <name pos:start="161:25" pos:end="161:30"><name pos:start="161:25" pos:end="161:27">buf</name><index pos:start="161:28" pos:end="161:30">[<expr pos:start="161:29" pos:end="161:29"><literal type="number" pos:start="161:29" pos:end="161:29">1</literal></expr>]</index></name></decl>;</decl_stmt>

                <comment type="block" pos:start="163:17" pos:end="163:56">/* stop emulation if requested by gdb */</comment>

                <expr_stmt pos:start="165:17" pos:end="165:45"><expr pos:start="165:17" pos:end="165:44"><name pos:start="165:17" pos:end="165:17">n</name> <operator pos:start="165:19" pos:end="165:19">=</operator> <call pos:start="165:21" pos:end="165:44"><name pos:start="165:21" pos:end="165:24">read</name><argument_list pos:start="165:25" pos:end="165:44">(<argument pos:start="165:26" pos:end="165:35"><expr pos:start="165:26" pos:end="165:35"><name pos:start="165:26" pos:end="165:35">gdbstub_fd</name></expr></argument>, <argument pos:start="165:38" pos:end="165:40"><expr pos:start="165:38" pos:end="165:40"><name pos:start="165:38" pos:end="165:40">buf</name></expr></argument>, <argument pos:start="165:43" pos:end="165:43"><expr pos:start="165:43" pos:end="165:43"><literal type="number" pos:start="165:43" pos:end="165:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="167:17" pos:end="173:17"><if pos:start="167:17" pos:end="173:17">if <condition pos:start="167:20" pos:end="167:27">(<expr pos:start="167:21" pos:end="167:26"><name pos:start="167:21" pos:end="167:21">n</name> <operator pos:start="167:23" pos:end="167:24">==</operator> <literal type="number" pos:start="167:26" pos:end="167:26">1</literal></expr>)</condition> <block pos:start="167:29" pos:end="173:17">{<block_content pos:start="169:21" pos:end="171:26">

                    <expr_stmt pos:start="169:21" pos:end="169:41"><expr pos:start="169:21" pos:end="169:40"><name pos:start="169:21" pos:end="169:23">ret</name> <operator pos:start="169:25" pos:end="169:25">=</operator> <name pos:start="169:27" pos:end="169:40">EXCP_INTERRUPT</name></expr>;</expr_stmt> 

                    <break pos:start="171:21" pos:end="171:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="181:9" pos:end="181:23">/* timer IRQ */</comment>

        <if_stmt pos:start="183:9" pos:end="199:9"><if pos:start="183:9" pos:end="199:9">if <condition pos:start="183:12" pos:end="183:30">(<expr pos:start="183:13" pos:end="183:29"><name pos:start="183:13" pos:end="183:29">timer_irq_pending</name></expr>)</condition> <block pos:start="183:32" pos:end="199:9">{<block_content pos:start="185:13" pos:end="197:13">

            <expr_stmt pos:start="185:13" pos:end="185:30"><expr pos:start="185:13" pos:end="185:29"><call pos:start="185:13" pos:end="185:29"><name pos:start="185:13" pos:end="185:23">pic_set_irq</name><argument_list pos:start="185:24" pos:end="185:29">(<argument pos:start="185:25" pos:end="185:25"><expr pos:start="185:25" pos:end="185:25"><literal type="number" pos:start="185:25" pos:end="185:25">0</literal></expr></argument>, <argument pos:start="185:28" pos:end="185:28"><expr pos:start="185:28" pos:end="185:28"><literal type="number" pos:start="185:28" pos:end="185:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:30"><expr pos:start="187:13" pos:end="187:29"><call pos:start="187:13" pos:end="187:29"><name pos:start="187:13" pos:end="187:23">pic_set_irq</name><argument_list pos:start="187:24" pos:end="187:29">(<argument pos:start="187:25" pos:end="187:25"><expr pos:start="187:25" pos:end="187:25"><literal type="number" pos:start="187:25" pos:end="187:25">0</literal></expr></argument>, <argument pos:start="187:28" pos:end="187:28"><expr pos:start="187:28" pos:end="187:28"><literal type="number" pos:start="187:28" pos:end="187:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:34"><expr pos:start="189:13" pos:end="189:33"><name pos:start="189:13" pos:end="189:29">timer_irq_pending</name> <operator pos:start="189:31" pos:end="189:31">=</operator> <literal type="number" pos:start="189:33" pos:end="189:33">0</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="191:13" pos:end="191:31">/* XXX: RTC test */</comment>

            <if_stmt pos:start="193:13" pos:end="197:13"><if pos:start="193:13" pos:end="197:13">if <condition pos:start="193:16" pos:end="193:44">(<expr pos:start="193:17" pos:end="193:43"><name pos:start="193:17" pos:end="193:36"><name pos:start="193:17" pos:end="193:25">cmos_data</name><index pos:start="193:26" pos:end="193:36">[<expr pos:start="193:27" pos:end="193:35"><name pos:start="193:27" pos:end="193:35">RTC_REG_B</name></expr>]</index></name> <operator pos:start="193:38" pos:end="193:38">&amp;</operator> <literal type="number" pos:start="193:40" pos:end="193:43">0x40</literal></expr>)</condition> <block pos:start="193:46" pos:end="197:13">{<block_content pos:start="195:17" pos:end="195:34">

                <expr_stmt pos:start="195:17" pos:end="195:34"><expr pos:start="195:17" pos:end="195:33"><call pos:start="195:17" pos:end="195:33"><name pos:start="195:17" pos:end="195:27">pic_set_irq</name><argument_list pos:start="195:28" pos:end="195:33">(<argument pos:start="195:29" pos:end="195:29"><expr pos:start="195:29" pos:end="195:29"><literal type="number" pos:start="195:29" pos:end="195:29">8</literal></expr></argument>, <argument pos:start="195:32" pos:end="195:32"><expr pos:start="195:32" pos:end="195:32"><literal type="number" pos:start="195:32" pos:end="195:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="203:9" pos:end="203:17">/* VGA */</comment>

        <if_stmt pos:start="205:9" pos:end="211:9"><if pos:start="205:9" pos:end="211:9">if <condition pos:start="205:12" pos:end="205:32">(<expr pos:start="205:13" pos:end="205:31"><name pos:start="205:13" pos:end="205:31">gui_refresh_pending</name></expr>)</condition> <block pos:start="205:34" pos:end="211:9">{<block_content pos:start="207:13" pos:end="209:36">

            <expr_stmt pos:start="207:13" pos:end="207:54"><expr pos:start="207:13" pos:end="207:53"><call pos:start="207:13" pos:end="207:53"><name pos:start="207:13" pos:end="207:37"><name pos:start="207:13" pos:end="207:25">display_state</name><operator pos:start="207:26" pos:end="207:26">.</operator><name pos:start="207:27" pos:end="207:37">dpy_refresh</name></name><argument_list pos:start="207:38" pos:end="207:53">(<argument pos:start="207:39" pos:end="207:52"><expr pos:start="207:39" pos:end="207:52"><operator pos:start="207:39" pos:end="207:39">&amp;</operator><name pos:start="207:40" pos:end="207:52">display_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:36"><expr pos:start="209:13" pos:end="209:35"><name pos:start="209:13" pos:end="209:31">gui_refresh_pending</name> <operator pos:start="209:33" pos:end="209:33">=</operator> <literal type="number" pos:start="209:35" pos:end="209:35">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="215:5" pos:end="215:24"><expr pos:start="215:5" pos:end="215:23"><call pos:start="215:5" pos:end="215:23"><name pos:start="215:5" pos:end="215:21">cpu_disable_ticks</name><argument_list pos:start="215:22" pos:end="215:23">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="217:5" pos:end="217:15">return <expr pos:start="217:12" pos:end="217:14"><name pos:start="217:12" pos:end="217:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
