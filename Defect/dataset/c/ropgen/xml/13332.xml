<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13332.c" pos:tabs="8"><function pos:start="1:1" pos:end="747:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">helper_st_asi</name><parameter_list pos:start="1:19" pos:end="1:74">(<parameter pos:start="1:20" pos:end="1:36"><decl pos:start="1:20" pos:end="1:36"><type pos:start="1:20" pos:end="1:36"><name pos:start="1:20" pos:end="1:31">target_ulong</name></type> <name pos:start="1:33" pos:end="1:36">addr</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:54"><decl pos:start="1:39" pos:end="1:54"><type pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:50">target_ulong</name></type> <name pos:start="1:52" pos:end="1:54">val</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:63"><decl pos:start="1:57" pos:end="1:63"><type pos:start="1:57" pos:end="1:63"><name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:63">asi</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:73"><decl pos:start="1:66" pos:end="1:73"><type pos:start="1:66" pos:end="1:73"><name pos:start="1:66" pos:end="1:68">int</name></type> <name pos:start="1:70" pos:end="1:73">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="747:1">{<block_content pos:start="7:5" pos:end="745:5">

<cpp:ifdef pos:start="5:1" pos:end="5:16">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:16">DEBUG_ASI</name></cpp:ifdef>

    <expr_stmt pos:start="7:5" pos:end="10:0"><expr pos:start="7:5" pos:end="7:43"><call pos:start="7:5" pos:end="7:43"><name pos:start="7:5" pos:end="7:12">dump_asi</name><argument_list pos:start="7:13" pos:end="7:43">(<argument pos:start="7:14" pos:end="7:20"><expr pos:start="7:14" pos:end="7:20"><literal type="string" pos:start="7:14" pos:end="7:20">"write"</literal></expr></argument>, <argument pos:start="7:23" pos:end="7:26"><expr pos:start="7:23" pos:end="7:26"><name pos:start="7:23" pos:end="7:26">addr</name></expr></argument>, <argument pos:start="7:29" pos:end="7:31"><expr pos:start="7:29" pos:end="7:31"><name pos:start="7:29" pos:end="7:31">asi</name></expr></argument>, <argument pos:start="7:34" pos:end="7:37"><expr pos:start="7:34" pos:end="7:37"><name pos:start="7:34" pos:end="7:37">size</name></expr></argument>, <argument pos:start="7:40" pos:end="7:42"><expr pos:start="7:40" pos:end="7:42"><name pos:start="7:40" pos:end="7:42">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="9:1" pos:end="9:6">#<cpp:directive pos:start="9:2" pos:end="9:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="13:5" pos:end="13:16"><expr pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:7">asi</name> <operator pos:start="13:9" pos:end="13:10">&amp;=</operator> <literal type="number" pos:start="13:12" pos:end="13:15">0xff</literal></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="25:37"><if pos:start="17:5" pos:end="25:37">if <condition pos:start="17:8" pos:end="23:42">(<expr pos:start="17:9" pos:end="23:41"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:12">asi</name> <operator pos:start="17:14" pos:end="17:14">&lt;</operator> <literal type="number" pos:start="17:16" pos:end="17:19">0x80</literal> <operator pos:start="17:21" pos:end="17:22">&amp;&amp;</operator> <operator pos:start="17:24" pos:end="17:24">(</operator><name pos:start="17:25" pos:end="17:35"><name pos:start="17:25" pos:end="17:27">env</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:35">pstate</name></name> <operator pos:start="17:37" pos:end="17:37">&amp;</operator> <name pos:start="17:39" pos:end="17:45">PS_PRIV</name><operator pos:start="17:46" pos:end="17:46">)</operator> <operator pos:start="17:48" pos:end="17:49">==</operator> <literal type="number" pos:start="17:51" pos:end="17:51">0</literal><operator pos:start="17:52" pos:end="17:52">)</operator>

        <operator pos:start="19:9" pos:end="19:10">||</operator> <operator pos:start="19:12" pos:end="19:12">(</operator><operator pos:start="19:13" pos:end="19:13">(</operator><name pos:start="19:14" pos:end="19:31"><name pos:start="19:14" pos:end="19:16">env</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:21">def</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:31">features</name></name> <operator pos:start="19:33" pos:end="19:33">&amp;</operator> <name pos:start="19:35" pos:end="19:50">CPU_FEATURE_HYPV</name><operator pos:start="19:51" pos:end="19:51">)</operator>

            <operator pos:start="21:13" pos:end="21:14">&amp;&amp;</operator> <name pos:start="21:16" pos:end="21:18">asi</name> <operator pos:start="21:20" pos:end="21:21">&gt;=</operator> <literal type="number" pos:start="21:23" pos:end="21:26">0x30</literal> <operator pos:start="21:28" pos:end="21:29">&amp;&amp;</operator> <name pos:start="21:31" pos:end="21:33">asi</name> <operator pos:start="21:35" pos:end="21:35">&lt;</operator> <literal type="number" pos:start="21:37" pos:end="21:40">0x80</literal>

            <operator pos:start="23:13" pos:end="23:14">&amp;&amp;</operator> <operator pos:start="23:16" pos:end="23:16">!</operator><operator pos:start="23:17" pos:end="23:17">(</operator><name pos:start="23:18" pos:end="23:29"><name pos:start="23:18" pos:end="23:20">env</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:29">hpstate</name></name> <operator pos:start="23:31" pos:end="23:31">&amp;</operator> <name pos:start="23:33" pos:end="23:39">HS_PRIV</name><operator pos:start="23:40" pos:end="23:40">)</operator><operator pos:start="23:41" pos:end="23:41">)</operator></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:37"><block_content pos:start="25:9" pos:end="25:37">

        <expr_stmt pos:start="25:9" pos:end="25:37"><expr pos:start="25:9" pos:end="25:36"><call pos:start="25:9" pos:end="25:36"><name pos:start="25:9" pos:end="25:23">raise_exception</name><argument_list pos:start="25:24" pos:end="25:36">(<argument pos:start="25:25" pos:end="25:35"><expr pos:start="25:25" pos:end="25:35"><name pos:start="25:25" pos:end="25:35">TT_PRIV_ACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:39"><expr pos:start="29:5" pos:end="29:38"><call pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:22">helper_check_align</name><argument_list pos:start="29:23" pos:end="29:38">(<argument pos:start="29:24" pos:end="29:27"><expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">addr</name></expr></argument>, <argument pos:start="29:30" pos:end="29:37"><expr pos:start="29:30" pos:end="29:37"><name pos:start="29:30" pos:end="29:33">size</name> <operator pos:start="29:35" pos:end="29:35">-</operator> <literal type="number" pos:start="29:37" pos:end="29:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:34">/* Convert to little endian */</comment>

    <switch pos:start="33:5" pos:end="79:5">switch <condition pos:start="33:12" pos:end="33:16">(<expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">asi</name></expr>)</condition> <block pos:start="33:18" pos:end="79:5">{<block_content pos:start="35:5" pos:end="77:14">

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0x0c</literal></expr>:</case> <comment type="line" pos:start="35:16" pos:end="35:44">// Nucleus Little Endian (LE)</comment>

    <case pos:start="37:5" pos:end="37:14">case <expr pos:start="37:10" pos:end="37:13"><literal type="number" pos:start="37:10" pos:end="37:13">0x18</literal></expr>:</case> <comment type="line" pos:start="37:16" pos:end="37:39">// As if user primary LE</comment>

    <case pos:start="39:5" pos:end="39:14">case <expr pos:start="39:10" pos:end="39:13"><literal type="number" pos:start="39:10" pos:end="39:13">0x19</literal></expr>:</case> <comment type="line" pos:start="39:16" pos:end="39:41">// As if user secondary LE</comment>

    <case pos:start="41:5" pos:end="41:14">case <expr pos:start="41:10" pos:end="41:13"><literal type="number" pos:start="41:10" pos:end="41:13">0x1c</literal></expr>:</case> <comment type="line" pos:start="41:16" pos:end="41:27">// Bypass LE</comment>

    <case pos:start="43:5" pos:end="43:14">case <expr pos:start="43:10" pos:end="43:13"><literal type="number" pos:start="43:10" pos:end="43:13">0x1d</literal></expr>:</case> <comment type="line" pos:start="43:16" pos:end="43:42">// Bypass, non-cacheable LE</comment>

    <case pos:start="45:5" pos:end="45:14">case <expr pos:start="45:10" pos:end="45:13"><literal type="number" pos:start="45:10" pos:end="45:13">0x88</literal></expr>:</case> <comment type="line" pos:start="45:16" pos:end="45:28">// Primary LE</comment>

    <case pos:start="47:5" pos:end="47:14">case <expr pos:start="47:10" pos:end="47:13"><literal type="number" pos:start="47:10" pos:end="47:13">0x89</literal></expr>:</case> <comment type="line" pos:start="47:16" pos:end="47:30">// Secondary LE</comment>

        <switch pos:start="49:9" pos:end="73:9">switch<condition pos:start="49:15" pos:end="49:20">(<expr pos:start="49:16" pos:end="49:19"><name pos:start="49:16" pos:end="49:19">size</name></expr>)</condition> <block pos:start="49:22" pos:end="73:9">{<block_content pos:start="51:9" pos:end="71:18">

        <case pos:start="51:9" pos:end="51:15">case <expr pos:start="51:14" pos:end="51:14"><literal type="number" pos:start="51:14" pos:end="51:14">2</literal></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:31"><expr pos:start="53:13" pos:end="53:30"><name pos:start="53:13" pos:end="53:15">val</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:30"><name pos:start="53:19" pos:end="53:25">bswap16</name><argument_list pos:start="53:26" pos:end="53:30">(<argument pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:15">case <expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">4</literal></expr>:</case>

            <expr_stmt pos:start="59:13" pos:end="59:31"><expr pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:15">val</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:30"><name pos:start="59:19" pos:end="59:25">bswap32</name><argument_list pos:start="59:26" pos:end="59:30">(<argument pos:start="59:27" pos:end="59:29"><expr pos:start="59:27" pos:end="59:29"><name pos:start="59:27" pos:end="59:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <case pos:start="63:9" pos:end="63:15">case <expr pos:start="63:14" pos:end="63:14"><literal type="number" pos:start="63:14" pos:end="63:14">8</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:31"><expr pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:15">val</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:30"><name pos:start="65:19" pos:end="65:25">bswap64</name><argument_list pos:start="65:26" pos:end="65:30">(<argument pos:start="65:27" pos:end="65:29"><expr pos:start="65:27" pos:end="65:29"><name pos:start="65:27" pos:end="65:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <default pos:start="69:9" pos:end="69:16">default:</default>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        </block_content>}</block></switch>

    <default pos:start="75:5" pos:end="75:12">default:</default>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    </block_content>}</block></switch>



    <switch pos:start="83:5" pos:end="745:5">switch<condition pos:start="83:11" pos:end="83:15">(<expr pos:start="83:12" pos:end="83:14"><name pos:start="83:12" pos:end="83:14">asi</name></expr>)</condition> <block pos:start="83:17" pos:end="745:5">{<block_content pos:start="85:5" pos:end="743:15">

    <case pos:start="85:5" pos:end="85:14">case <expr pos:start="85:10" pos:end="85:13"><literal type="number" pos:start="85:10" pos:end="85:13">0x10</literal></expr>:</case> <comment type="line" pos:start="85:16" pos:end="85:36">// As if user primary</comment>

    <case pos:start="87:5" pos:end="87:14">case <expr pos:start="87:10" pos:end="87:13"><literal type="number" pos:start="87:10" pos:end="87:13">0x11</literal></expr>:</case> <comment type="line" pos:start="87:16" pos:end="87:38">// As if user secondary</comment>

    <case pos:start="89:5" pos:end="89:14">case <expr pos:start="89:10" pos:end="89:13"><literal type="number" pos:start="89:10" pos:end="89:13">0x18</literal></expr>:</case> <comment type="line" pos:start="89:16" pos:end="89:39">// As if user primary LE</comment>

    <case pos:start="91:5" pos:end="91:14">case <expr pos:start="91:10" pos:end="91:13"><literal type="number" pos:start="91:10" pos:end="91:13">0x19</literal></expr>:</case> <comment type="line" pos:start="91:16" pos:end="91:41">// As if user secondary LE</comment>

    <case pos:start="93:5" pos:end="93:14">case <expr pos:start="93:10" pos:end="93:13"><literal type="number" pos:start="93:10" pos:end="93:13">0x80</literal></expr>:</case> <comment type="line" pos:start="93:16" pos:end="93:25">// Primary</comment>

    <case pos:start="95:5" pos:end="95:14">case <expr pos:start="95:10" pos:end="95:13"><literal type="number" pos:start="95:10" pos:end="95:13">0x81</literal></expr>:</case> <comment type="line" pos:start="95:16" pos:end="95:27">// Secondary</comment>

    <case pos:start="97:5" pos:end="97:14">case <expr pos:start="97:10" pos:end="97:13"><literal type="number" pos:start="97:10" pos:end="97:13">0x88</literal></expr>:</case> <comment type="line" pos:start="97:16" pos:end="97:28">// Primary LE</comment>

    <case pos:start="99:5" pos:end="99:14">case <expr pos:start="99:10" pos:end="99:13"><literal type="number" pos:start="99:10" pos:end="99:13">0x89</literal></expr>:</case> <comment type="line" pos:start="99:16" pos:end="99:30">// Secondary LE</comment>

    <case pos:start="101:5" pos:end="101:14">case <expr pos:start="101:10" pos:end="101:13"><literal type="number" pos:start="101:10" pos:end="101:13">0xe2</literal></expr>:</case> <comment type="line" pos:start="101:16" pos:end="101:43">// UA2007 Primary block init</comment>

    <case pos:start="103:5" pos:end="103:14">case <expr pos:start="103:10" pos:end="103:13"><literal type="number" pos:start="103:10" pos:end="103:13">0xe3</literal></expr>:</case> <comment type="line" pos:start="103:16" pos:end="103:45">// UA2007 Secondary block init</comment>

        <if_stmt pos:start="105:9" pos:end="283:9"><if pos:start="105:9" pos:end="213:9">if <condition pos:start="105:12" pos:end="105:52">(<expr pos:start="105:13" pos:end="105:51"><operator pos:start="105:13" pos:end="105:13">(</operator><name pos:start="105:14" pos:end="105:16">asi</name> <operator pos:start="105:18" pos:end="105:18">&amp;</operator> <literal type="number" pos:start="105:20" pos:end="105:23">0x80</literal><operator pos:start="105:24" pos:end="105:24">)</operator> <operator pos:start="105:26" pos:end="105:27">&amp;&amp;</operator> <operator pos:start="105:29" pos:end="105:29">(</operator><name pos:start="105:30" pos:end="105:40"><name pos:start="105:30" pos:end="105:32">env</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:40">pstate</name></name> <operator pos:start="105:42" pos:end="105:42">&amp;</operator> <name pos:start="105:44" pos:end="105:50">PS_PRIV</name><operator pos:start="105:51" pos:end="105:51">)</operator></expr>)</condition> <block pos:start="105:54" pos:end="213:9">{<block_content pos:start="107:13" pos:end="211:13">

            <if_stmt pos:start="107:13" pos:end="211:13"><if pos:start="107:13" pos:end="141:13">if <condition pos:start="107:16" pos:end="109:42">(<expr pos:start="107:17" pos:end="109:41"><operator pos:start="107:17" pos:end="107:17">(</operator><name pos:start="107:18" pos:end="107:35"><name pos:start="107:18" pos:end="107:20">env</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:25">def</name><operator pos:start="107:26" pos:end="107:27">-&gt;</operator><name pos:start="107:28" pos:end="107:35">features</name></name> <operator pos:start="107:37" pos:end="107:37">&amp;</operator> <name pos:start="107:39" pos:end="107:54">CPU_FEATURE_HYPV</name><operator pos:start="107:55" pos:end="107:55">)</operator>

                <operator pos:start="109:17" pos:end="109:18">&amp;&amp;</operator> <name pos:start="109:20" pos:end="109:31"><name pos:start="109:20" pos:end="109:22">env</name><operator pos:start="109:23" pos:end="109:24">-&gt;</operator><name pos:start="109:25" pos:end="109:31">hpstate</name></name> <operator pos:start="109:33" pos:end="109:33">&amp;</operator> <name pos:start="109:35" pos:end="109:41">HS_PRIV</name></expr>)</condition> <block pos:start="109:44" pos:end="141:13">{<block_content pos:start="111:17" pos:end="139:17">

                <switch pos:start="111:17" pos:end="139:17">switch<condition pos:start="111:23" pos:end="111:28">(<expr pos:start="111:24" pos:end="111:27"><name pos:start="111:24" pos:end="111:27">size</name></expr>)</condition> <block pos:start="111:30" pos:end="139:17">{<block_content pos:start="113:17" pos:end="137:26">

                <case pos:start="113:17" pos:end="113:23">case <expr pos:start="113:22" pos:end="113:22"><literal type="number" pos:start="113:22" pos:end="113:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="115:21" pos:end="115:40"><expr pos:start="115:21" pos:end="115:39"><call pos:start="115:21" pos:end="115:39"><name pos:start="115:21" pos:end="115:28">stb_hypv</name><argument_list pos:start="115:29" pos:end="115:39">(<argument pos:start="115:30" pos:end="115:33"><expr pos:start="115:30" pos:end="115:33"><name pos:start="115:30" pos:end="115:33">addr</name></expr></argument>, <argument pos:start="115:36" pos:end="115:38"><expr pos:start="115:36" pos:end="115:38"><name pos:start="115:36" pos:end="115:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="117:21" pos:end="117:26">break;</break>

                <case pos:start="119:17" pos:end="119:23">case <expr pos:start="119:22" pos:end="119:22"><literal type="number" pos:start="119:22" pos:end="119:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="121:21" pos:end="121:40"><expr pos:start="121:21" pos:end="121:39"><call pos:start="121:21" pos:end="121:39"><name pos:start="121:21" pos:end="121:28">stw_hypv</name><argument_list pos:start="121:29" pos:end="121:39">(<argument pos:start="121:30" pos:end="121:33"><expr pos:start="121:30" pos:end="121:33"><name pos:start="121:30" pos:end="121:33">addr</name></expr></argument>, <argument pos:start="121:36" pos:end="121:38"><expr pos:start="121:36" pos:end="121:38"><name pos:start="121:36" pos:end="121:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="123:21" pos:end="123:26">break;</break>

                <case pos:start="125:17" pos:end="125:23">case <expr pos:start="125:22" pos:end="125:22"><literal type="number" pos:start="125:22" pos:end="125:22">4</literal></expr>:</case>

                    <expr_stmt pos:start="127:21" pos:end="127:40"><expr pos:start="127:21" pos:end="127:39"><call pos:start="127:21" pos:end="127:39"><name pos:start="127:21" pos:end="127:28">stl_hypv</name><argument_list pos:start="127:29" pos:end="127:39">(<argument pos:start="127:30" pos:end="127:33"><expr pos:start="127:30" pos:end="127:33"><name pos:start="127:30" pos:end="127:33">addr</name></expr></argument>, <argument pos:start="127:36" pos:end="127:38"><expr pos:start="127:36" pos:end="127:38"><name pos:start="127:36" pos:end="127:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="129:21" pos:end="129:26">break;</break>

                <case pos:start="131:17" pos:end="131:23">case <expr pos:start="131:22" pos:end="131:22"><literal type="number" pos:start="131:22" pos:end="131:22">8</literal></expr>:</case>

                <default pos:start="133:17" pos:end="133:24">default:</default>

                    <expr_stmt pos:start="135:21" pos:end="135:40"><expr pos:start="135:21" pos:end="135:39"><call pos:start="135:21" pos:end="135:39"><name pos:start="135:21" pos:end="135:28">stq_hypv</name><argument_list pos:start="135:29" pos:end="135:39">(<argument pos:start="135:30" pos:end="135:33"><expr pos:start="135:30" pos:end="135:33"><name pos:start="135:30" pos:end="135:33">addr</name></expr></argument>, <argument pos:start="135:36" pos:end="135:38"><expr pos:start="135:36" pos:end="135:38"><name pos:start="135:36" pos:end="135:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="137:21" pos:end="137:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="141:15" pos:end="211:13">else <block pos:start="141:20" pos:end="211:13">{<block_content pos:start="145:17" pos:end="209:17">

                <comment type="block" pos:start="143:17" pos:end="143:74">/* secondary space access has lowest asi bit equal to 1 */</comment>

                <if_stmt pos:start="145:17" pos:end="209:17"><if pos:start="145:17" pos:end="177:17">if <condition pos:start="145:20" pos:end="145:28">(<expr pos:start="145:21" pos:end="145:27"><name pos:start="145:21" pos:end="145:23">asi</name> <operator pos:start="145:25" pos:end="145:25">&amp;</operator> <literal type="number" pos:start="145:27" pos:end="145:27">1</literal></expr>)</condition> <block pos:start="145:30" pos:end="177:17">{<block_content pos:start="147:21" pos:end="175:21">

                    <switch pos:start="147:21" pos:end="175:21">switch<condition pos:start="147:27" pos:end="147:32">(<expr pos:start="147:28" pos:end="147:31"><name pos:start="147:28" pos:end="147:31">size</name></expr>)</condition> <block pos:start="147:34" pos:end="175:21">{<block_content pos:start="149:21" pos:end="173:30">

                    <case pos:start="149:21" pos:end="149:27">case <expr pos:start="149:26" pos:end="149:26"><literal type="number" pos:start="149:26" pos:end="149:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="151:25" pos:end="151:56"><expr pos:start="151:25" pos:end="151:55"><call pos:start="151:25" pos:end="151:55"><name pos:start="151:25" pos:end="151:44">stb_kernel_secondary</name><argument_list pos:start="151:45" pos:end="151:55">(<argument pos:start="151:46" pos:end="151:49"><expr pos:start="151:46" pos:end="151:49"><name pos:start="151:46" pos:end="151:49">addr</name></expr></argument>, <argument pos:start="151:52" pos:end="151:54"><expr pos:start="151:52" pos:end="151:54"><name pos:start="151:52" pos:end="151:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="153:25" pos:end="153:30">break;</break>

                    <case pos:start="155:21" pos:end="155:27">case <expr pos:start="155:26" pos:end="155:26"><literal type="number" pos:start="155:26" pos:end="155:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="157:25" pos:end="157:56"><expr pos:start="157:25" pos:end="157:55"><call pos:start="157:25" pos:end="157:55"><name pos:start="157:25" pos:end="157:44">stw_kernel_secondary</name><argument_list pos:start="157:45" pos:end="157:55">(<argument pos:start="157:46" pos:end="157:49"><expr pos:start="157:46" pos:end="157:49"><name pos:start="157:46" pos:end="157:49">addr</name></expr></argument>, <argument pos:start="157:52" pos:end="157:54"><expr pos:start="157:52" pos:end="157:54"><name pos:start="157:52" pos:end="157:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="159:25" pos:end="159:30">break;</break>

                    <case pos:start="161:21" pos:end="161:27">case <expr pos:start="161:26" pos:end="161:26"><literal type="number" pos:start="161:26" pos:end="161:26">4</literal></expr>:</case>

                        <expr_stmt pos:start="163:25" pos:end="163:56"><expr pos:start="163:25" pos:end="163:55"><call pos:start="163:25" pos:end="163:55"><name pos:start="163:25" pos:end="163:44">stl_kernel_secondary</name><argument_list pos:start="163:45" pos:end="163:55">(<argument pos:start="163:46" pos:end="163:49"><expr pos:start="163:46" pos:end="163:49"><name pos:start="163:46" pos:end="163:49">addr</name></expr></argument>, <argument pos:start="163:52" pos:end="163:54"><expr pos:start="163:52" pos:end="163:54"><name pos:start="163:52" pos:end="163:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="165:25" pos:end="165:30">break;</break>

                    <case pos:start="167:21" pos:end="167:27">case <expr pos:start="167:26" pos:end="167:26"><literal type="number" pos:start="167:26" pos:end="167:26">8</literal></expr>:</case>

                    <default pos:start="169:21" pos:end="169:28">default:</default>

                        <expr_stmt pos:start="171:25" pos:end="171:56"><expr pos:start="171:25" pos:end="171:55"><call pos:start="171:25" pos:end="171:55"><name pos:start="171:25" pos:end="171:44">stq_kernel_secondary</name><argument_list pos:start="171:45" pos:end="171:55">(<argument pos:start="171:46" pos:end="171:49"><expr pos:start="171:46" pos:end="171:49"><name pos:start="171:46" pos:end="171:49">addr</name></expr></argument>, <argument pos:start="171:52" pos:end="171:54"><expr pos:start="171:52" pos:end="171:54"><name pos:start="171:52" pos:end="171:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="173:25" pos:end="173:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></if> <else pos:start="177:19" pos:end="209:17">else <block pos:start="177:24" pos:end="209:17">{<block_content pos:start="179:21" pos:end="207:21">

                    <switch pos:start="179:21" pos:end="207:21">switch<condition pos:start="179:27" pos:end="179:32">(<expr pos:start="179:28" pos:end="179:31"><name pos:start="179:28" pos:end="179:31">size</name></expr>)</condition> <block pos:start="179:34" pos:end="207:21">{<block_content pos:start="181:21" pos:end="205:30">

                    <case pos:start="181:21" pos:end="181:27">case <expr pos:start="181:26" pos:end="181:26"><literal type="number" pos:start="181:26" pos:end="181:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="183:25" pos:end="183:46"><expr pos:start="183:25" pos:end="183:45"><call pos:start="183:25" pos:end="183:45"><name pos:start="183:25" pos:end="183:34">stb_kernel</name><argument_list pos:start="183:35" pos:end="183:45">(<argument pos:start="183:36" pos:end="183:39"><expr pos:start="183:36" pos:end="183:39"><name pos:start="183:36" pos:end="183:39">addr</name></expr></argument>, <argument pos:start="183:42" pos:end="183:44"><expr pos:start="183:42" pos:end="183:44"><name pos:start="183:42" pos:end="183:44">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="185:25" pos:end="185:30">break;</break>

                    <case pos:start="187:21" pos:end="187:27">case <expr pos:start="187:26" pos:end="187:26"><literal type="number" pos:start="187:26" pos:end="187:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="189:25" pos:end="189:46"><expr pos:start="189:25" pos:end="189:45"><call pos:start="189:25" pos:end="189:45"><name pos:start="189:25" pos:end="189:34">stw_kernel</name><argument_list pos:start="189:35" pos:end="189:45">(<argument pos:start="189:36" pos:end="189:39"><expr pos:start="189:36" pos:end="189:39"><name pos:start="189:36" pos:end="189:39">addr</name></expr></argument>, <argument pos:start="189:42" pos:end="189:44"><expr pos:start="189:42" pos:end="189:44"><name pos:start="189:42" pos:end="189:44">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="191:25" pos:end="191:30">break;</break>

                    <case pos:start="193:21" pos:end="193:27">case <expr pos:start="193:26" pos:end="193:26"><literal type="number" pos:start="193:26" pos:end="193:26">4</literal></expr>:</case>

                        <expr_stmt pos:start="195:25" pos:end="195:46"><expr pos:start="195:25" pos:end="195:45"><call pos:start="195:25" pos:end="195:45"><name pos:start="195:25" pos:end="195:34">stl_kernel</name><argument_list pos:start="195:35" pos:end="195:45">(<argument pos:start="195:36" pos:end="195:39"><expr pos:start="195:36" pos:end="195:39"><name pos:start="195:36" pos:end="195:39">addr</name></expr></argument>, <argument pos:start="195:42" pos:end="195:44"><expr pos:start="195:42" pos:end="195:44"><name pos:start="195:42" pos:end="195:44">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="197:25" pos:end="197:30">break;</break>

                    <case pos:start="199:21" pos:end="199:27">case <expr pos:start="199:26" pos:end="199:26"><literal type="number" pos:start="199:26" pos:end="199:26">8</literal></expr>:</case>

                    <default pos:start="201:21" pos:end="201:28">default:</default>

                        <expr_stmt pos:start="203:25" pos:end="203:46"><expr pos:start="203:25" pos:end="203:45"><call pos:start="203:25" pos:end="203:45"><name pos:start="203:25" pos:end="203:34">stq_kernel</name><argument_list pos:start="203:35" pos:end="203:45">(<argument pos:start="203:36" pos:end="203:39"><expr pos:start="203:36" pos:end="203:39"><name pos:start="203:36" pos:end="203:39">addr</name></expr></argument>, <argument pos:start="203:42" pos:end="203:44"><expr pos:start="203:42" pos:end="203:44"><name pos:start="203:42" pos:end="203:44">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="205:25" pos:end="205:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="213:11" pos:end="283:9">else <block pos:start="213:16" pos:end="283:9">{<block_content pos:start="217:13" pos:end="281:13">

            <comment type="block" pos:start="215:13" pos:end="215:70">/* secondary space access has lowest asi bit equal to 1 */</comment>

            <if_stmt pos:start="217:13" pos:end="281:13"><if pos:start="217:13" pos:end="249:13">if <condition pos:start="217:16" pos:end="217:24">(<expr pos:start="217:17" pos:end="217:23"><name pos:start="217:17" pos:end="217:19">asi</name> <operator pos:start="217:21" pos:end="217:21">&amp;</operator> <literal type="number" pos:start="217:23" pos:end="217:23">1</literal></expr>)</condition> <block pos:start="217:26" pos:end="249:13">{<block_content pos:start="219:17" pos:end="247:17">

                <switch pos:start="219:17" pos:end="247:17">switch<condition pos:start="219:23" pos:end="219:28">(<expr pos:start="219:24" pos:end="219:27"><name pos:start="219:24" pos:end="219:27">size</name></expr>)</condition> <block pos:start="219:30" pos:end="247:17">{<block_content pos:start="221:17" pos:end="245:26">

                <case pos:start="221:17" pos:end="221:23">case <expr pos:start="221:22" pos:end="221:22"><literal type="number" pos:start="221:22" pos:end="221:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="223:21" pos:end="223:50"><expr pos:start="223:21" pos:end="223:49"><call pos:start="223:21" pos:end="223:49"><name pos:start="223:21" pos:end="223:38">stb_user_secondary</name><argument_list pos:start="223:39" pos:end="223:49">(<argument pos:start="223:40" pos:end="223:43"><expr pos:start="223:40" pos:end="223:43"><name pos:start="223:40" pos:end="223:43">addr</name></expr></argument>, <argument pos:start="223:46" pos:end="223:48"><expr pos:start="223:46" pos:end="223:48"><name pos:start="223:46" pos:end="223:48">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="225:21" pos:end="225:26">break;</break>

                <case pos:start="227:17" pos:end="227:23">case <expr pos:start="227:22" pos:end="227:22"><literal type="number" pos:start="227:22" pos:end="227:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="229:21" pos:end="229:50"><expr pos:start="229:21" pos:end="229:49"><call pos:start="229:21" pos:end="229:49"><name pos:start="229:21" pos:end="229:38">stw_user_secondary</name><argument_list pos:start="229:39" pos:end="229:49">(<argument pos:start="229:40" pos:end="229:43"><expr pos:start="229:40" pos:end="229:43"><name pos:start="229:40" pos:end="229:43">addr</name></expr></argument>, <argument pos:start="229:46" pos:end="229:48"><expr pos:start="229:46" pos:end="229:48"><name pos:start="229:46" pos:end="229:48">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="231:21" pos:end="231:26">break;</break>

                <case pos:start="233:17" pos:end="233:23">case <expr pos:start="233:22" pos:end="233:22"><literal type="number" pos:start="233:22" pos:end="233:22">4</literal></expr>:</case>

                    <expr_stmt pos:start="235:21" pos:end="235:50"><expr pos:start="235:21" pos:end="235:49"><call pos:start="235:21" pos:end="235:49"><name pos:start="235:21" pos:end="235:38">stl_user_secondary</name><argument_list pos:start="235:39" pos:end="235:49">(<argument pos:start="235:40" pos:end="235:43"><expr pos:start="235:40" pos:end="235:43"><name pos:start="235:40" pos:end="235:43">addr</name></expr></argument>, <argument pos:start="235:46" pos:end="235:48"><expr pos:start="235:46" pos:end="235:48"><name pos:start="235:46" pos:end="235:48">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="237:21" pos:end="237:26">break;</break>

                <case pos:start="239:17" pos:end="239:23">case <expr pos:start="239:22" pos:end="239:22"><literal type="number" pos:start="239:22" pos:end="239:22">8</literal></expr>:</case>

                <default pos:start="241:17" pos:end="241:24">default:</default>

                    <expr_stmt pos:start="243:21" pos:end="243:50"><expr pos:start="243:21" pos:end="243:49"><call pos:start="243:21" pos:end="243:49"><name pos:start="243:21" pos:end="243:38">stq_user_secondary</name><argument_list pos:start="243:39" pos:end="243:49">(<argument pos:start="243:40" pos:end="243:43"><expr pos:start="243:40" pos:end="243:43"><name pos:start="243:40" pos:end="243:43">addr</name></expr></argument>, <argument pos:start="243:46" pos:end="243:48"><expr pos:start="243:46" pos:end="243:48"><name pos:start="243:46" pos:end="243:48">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="245:21" pos:end="245:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="249:15" pos:end="281:13">else <block pos:start="249:20" pos:end="281:13">{<block_content pos:start="251:17" pos:end="279:17">

                <switch pos:start="251:17" pos:end="279:17">switch<condition pos:start="251:23" pos:end="251:28">(<expr pos:start="251:24" pos:end="251:27"><name pos:start="251:24" pos:end="251:27">size</name></expr>)</condition> <block pos:start="251:30" pos:end="279:17">{<block_content pos:start="253:17" pos:end="277:26">

                <case pos:start="253:17" pos:end="253:23">case <expr pos:start="253:22" pos:end="253:22"><literal type="number" pos:start="253:22" pos:end="253:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="255:21" pos:end="255:40"><expr pos:start="255:21" pos:end="255:39"><call pos:start="255:21" pos:end="255:39"><name pos:start="255:21" pos:end="255:28">stb_user</name><argument_list pos:start="255:29" pos:end="255:39">(<argument pos:start="255:30" pos:end="255:33"><expr pos:start="255:30" pos:end="255:33"><name pos:start="255:30" pos:end="255:33">addr</name></expr></argument>, <argument pos:start="255:36" pos:end="255:38"><expr pos:start="255:36" pos:end="255:38"><name pos:start="255:36" pos:end="255:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="257:21" pos:end="257:26">break;</break>

                <case pos:start="259:17" pos:end="259:23">case <expr pos:start="259:22" pos:end="259:22"><literal type="number" pos:start="259:22" pos:end="259:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="261:21" pos:end="261:40"><expr pos:start="261:21" pos:end="261:39"><call pos:start="261:21" pos:end="261:39"><name pos:start="261:21" pos:end="261:28">stw_user</name><argument_list pos:start="261:29" pos:end="261:39">(<argument pos:start="261:30" pos:end="261:33"><expr pos:start="261:30" pos:end="261:33"><name pos:start="261:30" pos:end="261:33">addr</name></expr></argument>, <argument pos:start="261:36" pos:end="261:38"><expr pos:start="261:36" pos:end="261:38"><name pos:start="261:36" pos:end="261:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="263:21" pos:end="263:26">break;</break>

                <case pos:start="265:17" pos:end="265:23">case <expr pos:start="265:22" pos:end="265:22"><literal type="number" pos:start="265:22" pos:end="265:22">4</literal></expr>:</case>

                    <expr_stmt pos:start="267:21" pos:end="267:40"><expr pos:start="267:21" pos:end="267:39"><call pos:start="267:21" pos:end="267:39"><name pos:start="267:21" pos:end="267:28">stl_user</name><argument_list pos:start="267:29" pos:end="267:39">(<argument pos:start="267:30" pos:end="267:33"><expr pos:start="267:30" pos:end="267:33"><name pos:start="267:30" pos:end="267:33">addr</name></expr></argument>, <argument pos:start="267:36" pos:end="267:38"><expr pos:start="267:36" pos:end="267:38"><name pos:start="267:36" pos:end="267:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="269:21" pos:end="269:26">break;</break>

                <case pos:start="271:17" pos:end="271:23">case <expr pos:start="271:22" pos:end="271:22"><literal type="number" pos:start="271:22" pos:end="271:22">8</literal></expr>:</case>

                <default pos:start="273:17" pos:end="273:24">default:</default>

                    <expr_stmt pos:start="275:21" pos:end="275:40"><expr pos:start="275:21" pos:end="275:39"><call pos:start="275:21" pos:end="275:39"><name pos:start="275:21" pos:end="275:28">stq_user</name><argument_list pos:start="275:29" pos:end="275:39">(<argument pos:start="275:30" pos:end="275:33"><expr pos:start="275:30" pos:end="275:33"><name pos:start="275:30" pos:end="275:33">addr</name></expr></argument>, <argument pos:start="275:36" pos:end="275:38"><expr pos:start="275:36" pos:end="275:38"><name pos:start="275:36" pos:end="275:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="277:21" pos:end="277:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="285:9" pos:end="285:14">break;</break>

    <case pos:start="287:5" pos:end="287:14">case <expr pos:start="287:10" pos:end="287:13"><literal type="number" pos:start="287:10" pos:end="287:13">0x14</literal></expr>:</case> <comment type="line" pos:start="287:16" pos:end="287:24">// Bypass</comment>

    <case pos:start="289:5" pos:end="289:14">case <expr pos:start="289:10" pos:end="289:13"><literal type="number" pos:start="289:10" pos:end="289:13">0x15</literal></expr>:</case> <comment type="line" pos:start="289:16" pos:end="289:39">// Bypass, non-cacheable</comment>

    <case pos:start="291:5" pos:end="291:14">case <expr pos:start="291:10" pos:end="291:13"><literal type="number" pos:start="291:10" pos:end="291:13">0x1c</literal></expr>:</case> <comment type="line" pos:start="291:16" pos:end="291:27">// Bypass LE</comment>

    <case pos:start="293:5" pos:end="293:14">case <expr pos:start="293:10" pos:end="293:13"><literal type="number" pos:start="293:10" pos:end="293:13">0x1d</literal></expr>:</case> <comment type="line" pos:start="293:16" pos:end="293:42">// Bypass, non-cacheable LE</comment>

        <block pos:start="295:9" pos:end="327:9">{<block_content pos:start="297:13" pos:end="325:13">

            <switch pos:start="297:13" pos:end="325:13">switch<condition pos:start="297:19" pos:end="297:24">(<expr pos:start="297:20" pos:end="297:23"><name pos:start="297:20" pos:end="297:23">size</name></expr>)</condition> <block pos:start="297:26" pos:end="325:13">{<block_content pos:start="299:13" pos:end="323:22">

            <case pos:start="299:13" pos:end="299:19">case <expr pos:start="299:18" pos:end="299:18"><literal type="number" pos:start="299:18" pos:end="299:18">1</literal></expr>:</case>

                <expr_stmt pos:start="301:17" pos:end="301:36"><expr pos:start="301:17" pos:end="301:35"><call pos:start="301:17" pos:end="301:35"><name pos:start="301:17" pos:end="301:24">stb_phys</name><argument_list pos:start="301:25" pos:end="301:35">(<argument pos:start="301:26" pos:end="301:29"><expr pos:start="301:26" pos:end="301:29"><name pos:start="301:26" pos:end="301:29">addr</name></expr></argument>, <argument pos:start="301:32" pos:end="301:34"><expr pos:start="301:32" pos:end="301:34"><name pos:start="301:32" pos:end="301:34">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="303:17" pos:end="303:22">break;</break>

            <case pos:start="305:13" pos:end="305:19">case <expr pos:start="305:18" pos:end="305:18"><literal type="number" pos:start="305:18" pos:end="305:18">2</literal></expr>:</case>

                <expr_stmt pos:start="307:17" pos:end="307:36"><expr pos:start="307:17" pos:end="307:35"><call pos:start="307:17" pos:end="307:35"><name pos:start="307:17" pos:end="307:24">stw_phys</name><argument_list pos:start="307:25" pos:end="307:35">(<argument pos:start="307:26" pos:end="307:29"><expr pos:start="307:26" pos:end="307:29"><name pos:start="307:26" pos:end="307:29">addr</name></expr></argument>, <argument pos:start="307:32" pos:end="307:34"><expr pos:start="307:32" pos:end="307:34"><name pos:start="307:32" pos:end="307:34">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="309:17" pos:end="309:22">break;</break>

            <case pos:start="311:13" pos:end="311:19">case <expr pos:start="311:18" pos:end="311:18"><literal type="number" pos:start="311:18" pos:end="311:18">4</literal></expr>:</case>

                <expr_stmt pos:start="313:17" pos:end="313:36"><expr pos:start="313:17" pos:end="313:35"><call pos:start="313:17" pos:end="313:35"><name pos:start="313:17" pos:end="313:24">stl_phys</name><argument_list pos:start="313:25" pos:end="313:35">(<argument pos:start="313:26" pos:end="313:29"><expr pos:start="313:26" pos:end="313:29"><name pos:start="313:26" pos:end="313:29">addr</name></expr></argument>, <argument pos:start="313:32" pos:end="313:34"><expr pos:start="313:32" pos:end="313:34"><name pos:start="313:32" pos:end="313:34">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="315:17" pos:end="315:22">break;</break>

            <case pos:start="317:13" pos:end="317:19">case <expr pos:start="317:18" pos:end="317:18"><literal type="number" pos:start="317:18" pos:end="317:18">8</literal></expr>:</case>

            <default pos:start="319:13" pos:end="319:20">default:</default>

                <expr_stmt pos:start="321:17" pos:end="321:36"><expr pos:start="321:17" pos:end="321:35"><call pos:start="321:17" pos:end="321:35"><name pos:start="321:17" pos:end="321:24">stq_phys</name><argument_list pos:start="321:25" pos:end="321:35">(<argument pos:start="321:26" pos:end="321:29"><expr pos:start="321:26" pos:end="321:29"><name pos:start="321:26" pos:end="321:29">addr</name></expr></argument>, <argument pos:start="321:32" pos:end="321:34"><expr pos:start="321:32" pos:end="321:34"><name pos:start="321:32" pos:end="321:34">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="323:17" pos:end="323:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block>

        <return pos:start="329:9" pos:end="329:15">return;</return>

    <case pos:start="331:5" pos:end="331:14">case <expr pos:start="331:10" pos:end="331:13"><literal type="number" pos:start="331:10" pos:end="331:13">0x24</literal></expr>:</case> <comment type="line" pos:start="331:16" pos:end="331:49">// Nucleus quad LDD 128 bit atomic</comment>

    <case pos:start="333:5" pos:end="333:14">case <expr pos:start="333:10" pos:end="333:13"><literal type="number" pos:start="333:10" pos:end="333:13">0x2c</literal></expr>:</case> <comment type="line" pos:start="333:16" pos:end="333:52">// Nucleus quad LDD 128 bit atomic LE</comment>

        <comment type="line" pos:start="335:9" pos:end="335:29">//  Only ldda allowed</comment>

        <expr_stmt pos:start="337:9" pos:end="337:37"><expr pos:start="337:9" pos:end="337:36"><call pos:start="337:9" pos:end="337:36"><name pos:start="337:9" pos:end="337:23">raise_exception</name><argument_list pos:start="337:24" pos:end="337:36">(<argument pos:start="337:25" pos:end="337:35"><expr pos:start="337:25" pos:end="337:35"><name pos:start="337:25" pos:end="337:35">TT_ILL_INSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="339:9" pos:end="339:15">return;</return>

    <case pos:start="341:5" pos:end="341:14">case <expr pos:start="341:10" pos:end="341:13"><literal type="number" pos:start="341:10" pos:end="341:13">0x04</literal></expr>:</case> <comment type="line" pos:start="341:16" pos:end="341:25">// Nucleus</comment>

    <case pos:start="343:5" pos:end="343:14">case <expr pos:start="343:10" pos:end="343:13"><literal type="number" pos:start="343:10" pos:end="343:13">0x0c</literal></expr>:</case> <comment type="line" pos:start="343:16" pos:end="343:44">// Nucleus Little Endian (LE)</comment>

    <block pos:start="345:5" pos:end="379:5">{<block_content pos:start="347:9" pos:end="377:14">

        <switch pos:start="347:9" pos:end="375:9">switch<condition pos:start="347:15" pos:end="347:20">(<expr pos:start="347:16" pos:end="347:19"><name pos:start="347:16" pos:end="347:19">size</name></expr>)</condition> <block pos:start="347:22" pos:end="375:9">{<block_content pos:start="349:9" pos:end="373:18">

        <case pos:start="349:9" pos:end="349:15">case <expr pos:start="349:14" pos:end="349:14"><literal type="number" pos:start="349:14" pos:end="349:14">1</literal></expr>:</case>

            <expr_stmt pos:start="351:13" pos:end="351:35"><expr pos:start="351:13" pos:end="351:34"><call pos:start="351:13" pos:end="351:34"><name pos:start="351:13" pos:end="351:23">stb_nucleus</name><argument_list pos:start="351:24" pos:end="351:34">(<argument pos:start="351:25" pos:end="351:28"><expr pos:start="351:25" pos:end="351:28"><name pos:start="351:25" pos:end="351:28">addr</name></expr></argument>, <argument pos:start="351:31" pos:end="351:33"><expr pos:start="351:31" pos:end="351:33"><name pos:start="351:31" pos:end="351:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="353:13" pos:end="353:18">break;</break>

        <case pos:start="355:9" pos:end="355:15">case <expr pos:start="355:14" pos:end="355:14"><literal type="number" pos:start="355:14" pos:end="355:14">2</literal></expr>:</case>

            <expr_stmt pos:start="357:13" pos:end="357:35"><expr pos:start="357:13" pos:end="357:34"><call pos:start="357:13" pos:end="357:34"><name pos:start="357:13" pos:end="357:23">stw_nucleus</name><argument_list pos:start="357:24" pos:end="357:34">(<argument pos:start="357:25" pos:end="357:28"><expr pos:start="357:25" pos:end="357:28"><name pos:start="357:25" pos:end="357:28">addr</name></expr></argument>, <argument pos:start="357:31" pos:end="357:33"><expr pos:start="357:31" pos:end="357:33"><name pos:start="357:31" pos:end="357:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="359:13" pos:end="359:18">break;</break>

        <case pos:start="361:9" pos:end="361:15">case <expr pos:start="361:14" pos:end="361:14"><literal type="number" pos:start="361:14" pos:end="361:14">4</literal></expr>:</case>

            <expr_stmt pos:start="363:13" pos:end="363:35"><expr pos:start="363:13" pos:end="363:34"><call pos:start="363:13" pos:end="363:34"><name pos:start="363:13" pos:end="363:23">stl_nucleus</name><argument_list pos:start="363:24" pos:end="363:34">(<argument pos:start="363:25" pos:end="363:28"><expr pos:start="363:25" pos:end="363:28"><name pos:start="363:25" pos:end="363:28">addr</name></expr></argument>, <argument pos:start="363:31" pos:end="363:33"><expr pos:start="363:31" pos:end="363:33"><name pos:start="363:31" pos:end="363:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="365:13" pos:end="365:18">break;</break>

        <default pos:start="367:9" pos:end="367:16">default:</default>

        <case pos:start="369:9" pos:end="369:15">case <expr pos:start="369:14" pos:end="369:14"><literal type="number" pos:start="369:14" pos:end="369:14">8</literal></expr>:</case>

            <expr_stmt pos:start="371:13" pos:end="371:35"><expr pos:start="371:13" pos:end="371:34"><call pos:start="371:13" pos:end="371:34"><name pos:start="371:13" pos:end="371:23">stq_nucleus</name><argument_list pos:start="371:24" pos:end="371:34">(<argument pos:start="371:25" pos:end="371:28"><expr pos:start="371:25" pos:end="371:28"><name pos:start="371:25" pos:end="371:28">addr</name></expr></argument>, <argument pos:start="371:31" pos:end="371:33"><expr pos:start="371:31" pos:end="371:33"><name pos:start="371:31" pos:end="371:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="373:13" pos:end="373:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="377:9" pos:end="377:14">break;</break>

    </block_content>}</block>



    <case pos:start="383:5" pos:end="383:14">case <expr pos:start="383:10" pos:end="383:13"><literal type="number" pos:start="383:10" pos:end="383:13">0x4a</literal></expr>:</case> <comment type="line" pos:start="383:16" pos:end="383:28">// UPA config</comment>

        <comment type="line" pos:start="385:9" pos:end="385:14">// XXX</comment>

        <return pos:start="387:9" pos:end="387:15">return;</return>

    <case pos:start="389:5" pos:end="389:14">case <expr pos:start="389:10" pos:end="389:13"><literal type="number" pos:start="389:10" pos:end="389:13">0x45</literal></expr>:</case> <comment type="line" pos:start="389:16" pos:end="389:21">// LSU</comment>

        <block pos:start="391:9" pos:end="423:9">{<block_content pos:start="393:13" pos:end="421:19">

            <decl_stmt pos:start="393:13" pos:end="393:28"><decl pos:start="393:13" pos:end="393:27"><type pos:start="393:13" pos:end="393:20"><name pos:start="393:13" pos:end="393:20">uint64_t</name></type> <name pos:start="393:22" pos:end="393:27">oldreg</name></decl>;</decl_stmt>



            <expr_stmt pos:start="397:13" pos:end="397:30"><expr pos:start="397:13" pos:end="397:29"><name pos:start="397:13" pos:end="397:18">oldreg</name> <operator pos:start="397:20" pos:end="397:20">=</operator> <name pos:start="397:22" pos:end="397:29"><name pos:start="397:22" pos:end="397:24">env</name><operator pos:start="397:25" pos:end="397:26">-&gt;</operator><name pos:start="397:27" pos:end="397:29">lsu</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:47"><expr pos:start="399:13" pos:end="399:46"><name pos:start="399:13" pos:end="399:20"><name pos:start="399:13" pos:end="399:15">env</name><operator pos:start="399:16" pos:end="399:17">-&gt;</operator><name pos:start="399:18" pos:end="399:20">lsu</name></name> <operator pos:start="399:22" pos:end="399:22">=</operator> <name pos:start="399:24" pos:end="399:26">val</name> <operator pos:start="399:28" pos:end="399:28">&amp;</operator> <operator pos:start="399:30" pos:end="399:30">(</operator><name pos:start="399:31" pos:end="399:36">DMMU_E</name> <operator pos:start="399:38" pos:end="399:38">|</operator> <name pos:start="399:40" pos:end="399:45">IMMU_E</name><operator pos:start="399:46" pos:end="399:46">)</operator></expr>;</expr_stmt>

            <comment type="line" pos:start="401:13" pos:end="401:66">// Mappings generated during D/I MMU disabled mode are</comment>

            <comment type="line" pos:start="403:13" pos:end="403:37">// invalid in normal mode</comment>

            <if_stmt pos:start="405:13" pos:end="419:13"><if pos:start="405:13" pos:end="419:13">if <condition pos:start="405:16" pos:end="405:35">(<expr pos:start="405:17" pos:end="405:34"><name pos:start="405:17" pos:end="405:22">oldreg</name> <operator pos:start="405:24" pos:end="405:25">!=</operator> <name pos:start="405:27" pos:end="405:34"><name pos:start="405:27" pos:end="405:29">env</name><operator pos:start="405:30" pos:end="405:31">-&gt;</operator><name pos:start="405:32" pos:end="405:34">lsu</name></name></expr>)</condition> <block pos:start="405:37" pos:end="419:13">{<block_content pos:start="407:17" pos:end="417:34">

                <expr_stmt pos:start="407:17" pos:end="412:0"><expr pos:start="407:17" pos:end="409:45"><call pos:start="407:17" pos:end="409:45"><name pos:start="407:17" pos:end="407:27">DPRINTF_MMU</name><argument_list pos:start="407:28" pos:end="409:45">(<argument pos:start="407:29" pos:end="407:74"><expr pos:start="407:29" pos:end="407:74"><literal type="string" pos:start="407:29" pos:end="407:45">"LSU change: 0x%"</literal> <name pos:start="407:47" pos:end="407:52">PRIx64</name> <literal type="string" pos:start="407:54" pos:end="407:62">" -&gt; 0x%"</literal> <name pos:start="407:64" pos:end="407:69">PRIx64</name> <literal type="string" pos:start="407:71" pos:end="407:74">"\n"</literal></expr></argument>,

                            <argument pos:start="409:29" pos:end="409:34"><expr pos:start="409:29" pos:end="409:34"><name pos:start="409:29" pos:end="409:34">oldreg</name></expr></argument>, <argument pos:start="409:37" pos:end="409:44"><expr pos:start="409:37" pos:end="409:44"><name pos:start="409:37" pos:end="409:44"><name pos:start="409:37" pos:end="409:39">env</name><operator pos:start="409:40" pos:end="409:41">-&gt;</operator><name pos:start="409:42" pos:end="409:44">lsu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="411:1" pos:end="411:16">#<cpp:directive pos:start="411:2" pos:end="411:6">ifdef</cpp:directive> <name pos:start="411:8" pos:end="411:16">DEBUG_MMU</name></cpp:ifdef>

                <expr_stmt pos:start="413:17" pos:end="416:0"><expr pos:start="413:17" pos:end="413:29"><call pos:start="413:17" pos:end="413:29"><name pos:start="413:17" pos:end="413:24">dump_mmu</name><argument_list pos:start="413:25" pos:end="413:29">(<argument pos:start="413:26" pos:end="413:28"><expr pos:start="413:26" pos:end="413:28"><name pos:start="413:26" pos:end="413:28">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="415:1" pos:end="415:6">#<cpp:directive pos:start="415:2" pos:end="415:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="417:17" pos:end="417:34"><expr pos:start="417:17" pos:end="417:33"><call pos:start="417:17" pos:end="417:33"><name pos:start="417:17" pos:end="417:25">tlb_flush</name><argument_list pos:start="417:26" pos:end="417:33">(<argument pos:start="417:27" pos:end="417:29"><expr pos:start="417:27" pos:end="417:29"><name pos:start="417:27" pos:end="417:29">env</name></expr></argument>, <argument pos:start="417:32" pos:end="417:32"><expr pos:start="417:32" pos:end="417:32"><literal type="number" pos:start="417:32" pos:end="417:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <return pos:start="421:13" pos:end="421:19">return;</return>

        </block_content>}</block>

    <case pos:start="425:5" pos:end="425:14">case <expr pos:start="425:10" pos:end="425:13"><literal type="number" pos:start="425:10" pos:end="425:13">0x50</literal></expr>:</case> <comment type="line" pos:start="425:16" pos:end="425:28">// I-MMU regs</comment>

        <block pos:start="427:9" pos:end="509:9">{<block_content pos:start="429:13" pos:end="507:19">

            <decl_stmt pos:start="429:13" pos:end="429:40"><decl pos:start="429:13" pos:end="429:39"><type pos:start="429:13" pos:end="429:15"><name pos:start="429:13" pos:end="429:15">int</name></type> <name pos:start="429:17" pos:end="429:19">reg</name> <init pos:start="429:21" pos:end="429:39">= <expr pos:start="429:23" pos:end="429:39"><operator pos:start="429:23" pos:end="429:23">(</operator><name pos:start="429:24" pos:end="429:27">addr</name> <operator pos:start="429:29" pos:end="429:30">&gt;&gt;</operator> <literal type="number" pos:start="429:32" pos:end="429:32">3</literal><operator pos:start="429:33" pos:end="429:33">)</operator> <operator pos:start="429:35" pos:end="429:35">&amp;</operator> <literal type="number" pos:start="429:37" pos:end="429:39">0xf</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="431:13" pos:end="431:28"><decl pos:start="431:13" pos:end="431:27"><type pos:start="431:13" pos:end="431:20"><name pos:start="431:13" pos:end="431:20">uint64_t</name></type> <name pos:start="431:22" pos:end="431:27">oldreg</name></decl>;</decl_stmt>



            <expr_stmt pos:start="435:13" pos:end="435:40"><expr pos:start="435:13" pos:end="435:39"><name pos:start="435:13" pos:end="435:18">oldreg</name> <operator pos:start="435:20" pos:end="435:20">=</operator> <name pos:start="435:22" pos:end="435:39"><name pos:start="435:22" pos:end="435:24">env</name><operator pos:start="435:25" pos:end="435:26">-&gt;</operator><name pos:start="435:27" pos:end="435:34">immuregs</name><index pos:start="435:35" pos:end="435:39">[<expr pos:start="435:36" pos:end="435:38"><name pos:start="435:36" pos:end="435:38">reg</name></expr>]</index></name></expr>;</expr_stmt>

            <switch pos:start="437:13" pos:end="489:13">switch<condition pos:start="437:19" pos:end="437:23">(<expr pos:start="437:20" pos:end="437:22"><name pos:start="437:20" pos:end="437:22">reg</name></expr>)</condition> <block pos:start="437:25" pos:end="489:13">{<block_content pos:start="439:13" pos:end="487:22">

            <case pos:start="439:13" pos:end="439:19">case <expr pos:start="439:18" pos:end="439:18"><literal type="number" pos:start="439:18" pos:end="439:18">0</literal></expr>:</case> <comment type="line" pos:start="439:21" pos:end="439:25">// RO</comment>

                <return pos:start="441:17" pos:end="441:23">return;</return>

            <case pos:start="443:13" pos:end="443:19">case <expr pos:start="443:18" pos:end="443:18"><literal type="number" pos:start="443:18" pos:end="443:18">1</literal></expr>:</case> <comment type="line" pos:start="443:21" pos:end="443:35">// Not in I-MMU</comment>

            <case pos:start="445:13" pos:end="445:19">case <expr pos:start="445:18" pos:end="445:18"><literal type="number" pos:start="445:18" pos:end="445:18">2</literal></expr>:</case>

                <return pos:start="447:17" pos:end="447:23">return;</return>

            <case pos:start="449:13" pos:end="449:19">case <expr pos:start="449:18" pos:end="449:18"><literal type="number" pos:start="449:18" pos:end="449:18">3</literal></expr>:</case> <comment type="line" pos:start="449:21" pos:end="449:27">// SFSR</comment>

                <if_stmt pos:start="451:17" pos:end="453:28"><if pos:start="451:17" pos:end="453:28">if <condition pos:start="451:20" pos:end="451:35">(<expr pos:start="451:21" pos:end="451:34"><operator pos:start="451:21" pos:end="451:21">(</operator><name pos:start="451:22" pos:end="451:24">val</name> <operator pos:start="451:26" pos:end="451:26">&amp;</operator> <literal type="number" pos:start="451:28" pos:end="451:28">1</literal><operator pos:start="451:29" pos:end="451:29">)</operator> <operator pos:start="451:31" pos:end="451:32">==</operator> <literal type="number" pos:start="451:34" pos:end="451:34">0</literal></expr>)</condition><block type="pseudo" pos:start="453:21" pos:end="453:28"><block_content pos:start="453:21" pos:end="453:28">

                    <expr_stmt pos:start="453:21" pos:end="453:28"><expr pos:start="453:21" pos:end="453:27"><name pos:start="453:21" pos:end="453:23">val</name> <operator pos:start="453:25" pos:end="453:25">=</operator> <literal type="number" pos:start="453:27" pos:end="453:27">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="453:30" pos:end="453:42">// Clear SFSR</comment>

                <expr_stmt pos:start="455:17" pos:end="455:37"><expr pos:start="455:17" pos:end="455:36"><name pos:start="455:17" pos:end="455:30"><name pos:start="455:17" pos:end="455:19">env</name><operator pos:start="455:20" pos:end="455:21">-&gt;</operator><name pos:start="455:22" pos:end="455:25">immu</name><operator pos:start="455:26" pos:end="455:26">.</operator><name pos:start="455:27" pos:end="455:30">sfsr</name></name> <operator pos:start="455:32" pos:end="455:32">=</operator> <name pos:start="455:34" pos:end="455:36">val</name></expr>;</expr_stmt>

                <break pos:start="457:17" pos:end="457:22">break;</break>

            <case pos:start="459:13" pos:end="459:19">case <expr pos:start="459:18" pos:end="459:18"><literal type="number" pos:start="459:18" pos:end="459:18">4</literal></expr>:</case> <comment type="line" pos:start="459:21" pos:end="459:25">// RO</comment>

                <return pos:start="461:17" pos:end="461:23">return;</return>

            <case pos:start="463:13" pos:end="463:19">case <expr pos:start="463:18" pos:end="463:18"><literal type="number" pos:start="463:18" pos:end="463:18">5</literal></expr>:</case> <comment type="line" pos:start="463:21" pos:end="463:33">// TSB access</comment>

                <expr_stmt pos:start="465:17" pos:end="467:61"><expr pos:start="465:17" pos:end="467:60"><call pos:start="465:17" pos:end="467:60"><name pos:start="465:17" pos:end="465:27">DPRINTF_MMU</name><argument_list pos:start="465:28" pos:end="467:60">(<argument pos:start="465:29" pos:end="467:39"><expr pos:start="465:29" pos:end="467:39"><literal type="string" pos:start="465:29" pos:end="465:52">"immu TSB write: 0x%016"</literal> <name pos:start="465:54" pos:end="465:59">PRIx64</name> <literal type="string" pos:start="465:61" pos:end="465:72">" -&gt; 0x%016"</literal>

                            <name pos:start="467:29" pos:end="467:34">PRIx64</name> <literal type="string" pos:start="467:36" pos:end="467:39">"\n"</literal></expr></argument>, <argument pos:start="467:42" pos:end="467:54"><expr pos:start="467:42" pos:end="467:54"><name pos:start="467:42" pos:end="467:54"><name pos:start="467:42" pos:end="467:44">env</name><operator pos:start="467:45" pos:end="467:46">-&gt;</operator><name pos:start="467:47" pos:end="467:50">immu</name><operator pos:start="467:51" pos:end="467:51">.</operator><name pos:start="467:52" pos:end="467:54">tsb</name></name></expr></argument>, <argument pos:start="467:57" pos:end="467:59"><expr pos:start="467:57" pos:end="467:59"><name pos:start="467:57" pos:end="467:59">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="469:17" pos:end="469:36"><expr pos:start="469:17" pos:end="469:35"><name pos:start="469:17" pos:end="469:29"><name pos:start="469:17" pos:end="469:19">env</name><operator pos:start="469:20" pos:end="469:21">-&gt;</operator><name pos:start="469:22" pos:end="469:25">immu</name><operator pos:start="469:26" pos:end="469:26">.</operator><name pos:start="469:27" pos:end="469:29">tsb</name></name> <operator pos:start="469:31" pos:end="469:31">=</operator> <name pos:start="469:33" pos:end="469:35">val</name></expr>;</expr_stmt>

                <break pos:start="471:17" pos:end="471:22">break;</break>

            <case pos:start="473:13" pos:end="473:19">case <expr pos:start="473:18" pos:end="473:18"><literal type="number" pos:start="473:18" pos:end="473:18">6</literal></expr>:</case> <comment type="line" pos:start="473:21" pos:end="473:33">// Tag access</comment>

                <expr_stmt pos:start="475:17" pos:end="475:43"><expr pos:start="475:17" pos:end="475:42"><name pos:start="475:17" pos:end="475:36"><name pos:start="475:17" pos:end="475:19">env</name><operator pos:start="475:20" pos:end="475:21">-&gt;</operator><name pos:start="475:22" pos:end="475:25">immu</name><operator pos:start="475:26" pos:end="475:26">.</operator><name pos:start="475:27" pos:end="475:36">tag_access</name></name> <operator pos:start="475:38" pos:end="475:38">=</operator> <name pos:start="475:40" pos:end="475:42">val</name></expr>;</expr_stmt>

                <break pos:start="477:17" pos:end="477:22">break;</break>

            <case pos:start="479:13" pos:end="479:19">case <expr pos:start="479:18" pos:end="479:18"><literal type="number" pos:start="479:18" pos:end="479:18">7</literal></expr>:</case>

            <case pos:start="481:13" pos:end="481:19">case <expr pos:start="481:18" pos:end="481:18"><literal type="number" pos:start="481:18" pos:end="481:18">8</literal></expr>:</case>

                <return pos:start="483:17" pos:end="483:23">return;</return>

            <default pos:start="485:13" pos:end="485:20">default:</default>

                <break pos:start="487:17" pos:end="487:22">break;</break>

            </block_content>}</block></switch>



            <if_stmt pos:start="493:13" pos:end="502:0"><if pos:start="493:13" pos:end="502:0">if <condition pos:start="493:16" pos:end="493:45">(<expr pos:start="493:17" pos:end="493:44"><name pos:start="493:17" pos:end="493:22">oldreg</name> <operator pos:start="493:24" pos:end="493:25">!=</operator> <name pos:start="493:27" pos:end="493:44"><name pos:start="493:27" pos:end="493:29">env</name><operator pos:start="493:30" pos:end="493:31">-&gt;</operator><name pos:start="493:32" pos:end="493:39">immuregs</name><index pos:start="493:40" pos:end="493:44">[<expr pos:start="493:41" pos:end="493:43"><name pos:start="493:41" pos:end="493:43">reg</name></expr>]</index></name></expr>)</condition> <block pos:start="493:47" pos:end="502:0">{<block_content pos:start="495:17" pos:end="497:74">

                <expr_stmt pos:start="495:17" pos:end="497:74"><expr pos:start="495:17" pos:end="497:73"><call pos:start="495:17" pos:end="497:73"><name pos:start="495:17" pos:end="495:27">DPRINTF_MMU</name><argument_list pos:start="495:28" pos:end="497:73">(<argument pos:start="495:29" pos:end="497:39"><expr pos:start="495:29" pos:end="497:39"><literal type="string" pos:start="495:29" pos:end="495:57">"immu change reg[%d]: 0x%016"</literal> <name pos:start="495:59" pos:end="495:64">PRIx64</name> <literal type="string" pos:start="495:66" pos:end="495:77">" -&gt; 0x%016"</literal>

                            <name pos:start="497:29" pos:end="497:34">PRIx64</name> <literal type="string" pos:start="497:36" pos:end="497:39">"\n"</literal></expr></argument>, <argument pos:start="497:42" pos:end="497:44"><expr pos:start="497:42" pos:end="497:44"><name pos:start="497:42" pos:end="497:44">reg</name></expr></argument>, <argument pos:start="497:47" pos:end="497:52"><expr pos:start="497:47" pos:end="497:52"><name pos:start="497:47" pos:end="497:52">oldreg</name></expr></argument>, <argument pos:start="497:55" pos:end="497:72"><expr pos:start="497:55" pos:end="497:72"><name pos:start="497:55" pos:end="497:72"><name pos:start="497:55" pos:end="497:57">env</name><operator pos:start="497:58" pos:end="497:59">-&gt;</operator><name pos:start="497:60" pos:end="497:67">immuregs</name><index pos:start="497:68" pos:end="497:72">[<expr pos:start="497:69" pos:end="497:71"><name pos:start="497:69" pos:end="497:71">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="501:1" pos:end="501:16">#<cpp:directive pos:start="501:2" pos:end="501:6">ifdef</cpp:directive> <name pos:start="501:8" pos:end="501:16">DEBUG_MMU</name></cpp:ifdef>

            <expr_stmt pos:start="503:13" pos:end="506:0"><expr pos:start="503:13" pos:end="503:25"><call pos:start="503:13" pos:end="503:25"><name pos:start="503:13" pos:end="503:20">dump_mmu</name><argument_list pos:start="503:21" pos:end="503:25">(<argument pos:start="503:22" pos:end="503:24"><expr pos:start="503:22" pos:end="503:24"><name pos:start="503:22" pos:end="503:24">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="505:1" pos:end="505:6">#<cpp:directive pos:start="505:2" pos:end="505:6">endif</cpp:directive></cpp:endif>

            <return pos:start="507:13" pos:end="507:19">return;</return>

        </block_content>}</block>

    <case pos:start="511:5" pos:end="511:14">case <expr pos:start="511:10" pos:end="511:13"><literal type="number" pos:start="511:10" pos:end="511:13">0x54</literal></expr>:</case> <comment type="line" pos:start="511:16" pos:end="511:31">// I-MMU data in</comment>

        <expr_stmt pos:start="513:9" pos:end="513:80"><expr pos:start="513:9" pos:end="513:79"><call pos:start="513:9" pos:end="513:79"><name pos:start="513:9" pos:end="513:28">replace_tlb_1bit_lru</name><argument_list pos:start="513:29" pos:end="513:79">(<argument pos:start="513:30" pos:end="513:38"><expr pos:start="513:30" pos:end="513:38"><name pos:start="513:30" pos:end="513:38"><name pos:start="513:30" pos:end="513:32">env</name><operator pos:start="513:33" pos:end="513:34">-&gt;</operator><name pos:start="513:35" pos:end="513:38">itlb</name></name></expr></argument>, <argument pos:start="513:41" pos:end="513:60"><expr pos:start="513:41" pos:end="513:60"><name pos:start="513:41" pos:end="513:60"><name pos:start="513:41" pos:end="513:43">env</name><operator pos:start="513:44" pos:end="513:45">-&gt;</operator><name pos:start="513:46" pos:end="513:49">immu</name><operator pos:start="513:50" pos:end="513:50">.</operator><name pos:start="513:51" pos:end="513:60">tag_access</name></name></expr></argument>, <argument pos:start="513:63" pos:end="513:65"><expr pos:start="513:63" pos:end="513:65"><name pos:start="513:63" pos:end="513:65">val</name></expr></argument>, <argument pos:start="513:68" pos:end="513:73"><expr pos:start="513:68" pos:end="513:73"><literal type="string" pos:start="513:68" pos:end="513:73">"immu"</literal></expr></argument>, <argument pos:start="513:76" pos:end="513:78"><expr pos:start="513:76" pos:end="513:78"><name pos:start="513:76" pos:end="513:78">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="515:9" pos:end="515:15">return;</return>

    <case pos:start="517:5" pos:end="517:14">case <expr pos:start="517:10" pos:end="517:13"><literal type="number" pos:start="517:10" pos:end="517:13">0x55</literal></expr>:</case> <comment type="line" pos:start="517:16" pos:end="517:35">// I-MMU data access</comment>

        <block pos:start="519:9" pos:end="543:9">{<block_content pos:start="525:13" pos:end="541:19">

            <comment type="line" pos:start="521:13" pos:end="521:31">// TODO: auto demap</comment>



            <decl_stmt pos:start="525:13" pos:end="525:48"><decl pos:start="525:13" pos:end="525:47"><type pos:start="525:13" pos:end="525:24"><name pos:start="525:13" pos:end="525:20">unsigned</name> <name pos:start="525:22" pos:end="525:24">int</name></type> <name pos:start="525:26" pos:end="525:26">i</name> <init pos:start="525:28" pos:end="525:47">= <expr pos:start="525:30" pos:end="525:47"><operator pos:start="525:30" pos:end="525:30">(</operator><name pos:start="525:31" pos:end="525:34">addr</name> <operator pos:start="525:36" pos:end="525:37">&gt;&gt;</operator> <literal type="number" pos:start="525:39" pos:end="525:39">3</literal><operator pos:start="525:40" pos:end="525:40">)</operator> <operator pos:start="525:42" pos:end="525:42">&amp;</operator> <literal type="number" pos:start="525:44" pos:end="525:47">0x3f</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="529:13" pos:end="534:0"><expr pos:start="529:13" pos:end="529:76"><call pos:start="529:13" pos:end="529:76"><name pos:start="529:13" pos:end="529:29">replace_tlb_entry</name><argument_list pos:start="529:30" pos:end="529:76">(<argument pos:start="529:31" pos:end="529:43"><expr pos:start="529:31" pos:end="529:43"><operator pos:start="529:31" pos:end="529:31">&amp;</operator><name pos:start="529:32" pos:end="529:43"><name pos:start="529:32" pos:end="529:34">env</name><operator pos:start="529:35" pos:end="529:36">-&gt;</operator><name pos:start="529:37" pos:end="529:40">itlb</name><index pos:start="529:41" pos:end="529:43">[<expr pos:start="529:42" pos:end="529:42"><name pos:start="529:42" pos:end="529:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="529:46" pos:end="529:65"><expr pos:start="529:46" pos:end="529:65"><name pos:start="529:46" pos:end="529:65"><name pos:start="529:46" pos:end="529:48">env</name><operator pos:start="529:49" pos:end="529:50">-&gt;</operator><name pos:start="529:51" pos:end="529:54">immu</name><operator pos:start="529:55" pos:end="529:55">.</operator><name pos:start="529:56" pos:end="529:65">tag_access</name></name></expr></argument>, <argument pos:start="529:68" pos:end="529:70"><expr pos:start="529:68" pos:end="529:70"><name pos:start="529:68" pos:end="529:70">val</name></expr></argument>, <argument pos:start="529:73" pos:end="529:75"><expr pos:start="529:73" pos:end="529:75"><name pos:start="529:73" pos:end="529:75">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="533:1" pos:end="533:16">#<cpp:directive pos:start="533:2" pos:end="533:6">ifdef</cpp:directive> <name pos:start="533:8" pos:end="533:16">DEBUG_MMU</name></cpp:ifdef>

            <expr_stmt pos:start="535:13" pos:end="535:69"><expr pos:start="535:13" pos:end="535:68"><call pos:start="535:13" pos:end="535:68"><name pos:start="535:13" pos:end="535:23">DPRINTF_MMU</name><argument_list pos:start="535:24" pos:end="535:68">(<argument pos:start="535:25" pos:end="535:64"><expr pos:start="535:25" pos:end="535:64"><literal type="string" pos:start="535:25" pos:end="535:64">"immu data access replaced entry [%i]\n"</literal></expr></argument>, <argument pos:start="535:67" pos:end="535:67"><expr pos:start="535:67" pos:end="535:67"><name pos:start="535:67" pos:end="535:67">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="537:13" pos:end="540:0"><expr pos:start="537:13" pos:end="537:25"><call pos:start="537:13" pos:end="537:25"><name pos:start="537:13" pos:end="537:20">dump_mmu</name><argument_list pos:start="537:21" pos:end="537:25">(<argument pos:start="537:22" pos:end="537:24"><expr pos:start="537:22" pos:end="537:24"><name pos:start="537:22" pos:end="537:24">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="539:1" pos:end="539:6">#<cpp:directive pos:start="539:2" pos:end="539:6">endif</cpp:directive></cpp:endif>

            <return pos:start="541:13" pos:end="541:19">return;</return>

        </block_content>}</block>

    <case pos:start="545:5" pos:end="545:14">case <expr pos:start="545:10" pos:end="545:13"><literal type="number" pos:start="545:10" pos:end="545:13">0x57</literal></expr>:</case> <comment type="line" pos:start="545:16" pos:end="545:29">// I-MMU demap</comment>

        <expr_stmt pos:start="547:9" pos:end="547:48"><expr pos:start="547:9" pos:end="547:47"><call pos:start="547:9" pos:end="547:47"><name pos:start="547:9" pos:end="547:17">demap_tlb</name><argument_list pos:start="547:18" pos:end="547:47">(<argument pos:start="547:19" pos:end="547:27"><expr pos:start="547:19" pos:end="547:27"><name pos:start="547:19" pos:end="547:27"><name pos:start="547:19" pos:end="547:21">env</name><operator pos:start="547:22" pos:end="547:23">-&gt;</operator><name pos:start="547:24" pos:end="547:27">itlb</name></name></expr></argument>, <argument pos:start="547:30" pos:end="547:33"><expr pos:start="547:30" pos:end="547:33"><name pos:start="547:30" pos:end="547:33">addr</name></expr></argument>, <argument pos:start="547:36" pos:end="547:41"><expr pos:start="547:36" pos:end="547:41"><literal type="string" pos:start="547:36" pos:end="547:41">"immu"</literal></expr></argument>, <argument pos:start="547:44" pos:end="547:46"><expr pos:start="547:44" pos:end="547:46"><name pos:start="547:44" pos:end="547:46">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="549:9" pos:end="549:15">return;</return>

    <case pos:start="551:5" pos:end="551:14">case <expr pos:start="551:10" pos:end="551:13"><literal type="number" pos:start="551:10" pos:end="551:13">0x58</literal></expr>:</case> <comment type="line" pos:start="551:16" pos:end="551:28">// D-MMU regs</comment>

        <block pos:start="553:9" pos:end="643:9">{<block_content pos:start="555:13" pos:end="641:19">

            <decl_stmt pos:start="555:13" pos:end="555:40"><decl pos:start="555:13" pos:end="555:39"><type pos:start="555:13" pos:end="555:15"><name pos:start="555:13" pos:end="555:15">int</name></type> <name pos:start="555:17" pos:end="555:19">reg</name> <init pos:start="555:21" pos:end="555:39">= <expr pos:start="555:23" pos:end="555:39"><operator pos:start="555:23" pos:end="555:23">(</operator><name pos:start="555:24" pos:end="555:27">addr</name> <operator pos:start="555:29" pos:end="555:30">&gt;&gt;</operator> <literal type="number" pos:start="555:32" pos:end="555:32">3</literal><operator pos:start="555:33" pos:end="555:33">)</operator> <operator pos:start="555:35" pos:end="555:35">&amp;</operator> <literal type="number" pos:start="555:37" pos:end="555:39">0xf</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="557:13" pos:end="557:28"><decl pos:start="557:13" pos:end="557:27"><type pos:start="557:13" pos:end="557:20"><name pos:start="557:13" pos:end="557:20">uint64_t</name></type> <name pos:start="557:22" pos:end="557:27">oldreg</name></decl>;</decl_stmt>



            <expr_stmt pos:start="561:13" pos:end="561:40"><expr pos:start="561:13" pos:end="561:39"><name pos:start="561:13" pos:end="561:18">oldreg</name> <operator pos:start="561:20" pos:end="561:20">=</operator> <name pos:start="561:22" pos:end="561:39"><name pos:start="561:22" pos:end="561:24">env</name><operator pos:start="561:25" pos:end="561:26">-&gt;</operator><name pos:start="561:27" pos:end="561:34">dmmuregs</name><index pos:start="561:35" pos:end="561:39">[<expr pos:start="561:36" pos:end="561:38"><name pos:start="561:36" pos:end="561:38">reg</name></expr>]</index></name></expr>;</expr_stmt>

            <switch pos:start="563:13" pos:end="623:13">switch<condition pos:start="563:19" pos:end="563:23">(<expr pos:start="563:20" pos:end="563:22"><name pos:start="563:20" pos:end="563:22">reg</name></expr>)</condition> <block pos:start="563:25" pos:end="623:13">{<block_content pos:start="565:13" pos:end="621:22">

            <case pos:start="565:13" pos:end="565:19">case <expr pos:start="565:18" pos:end="565:18"><literal type="number" pos:start="565:18" pos:end="565:18">0</literal></expr>:</case> <comment type="line" pos:start="565:21" pos:end="565:25">// RO</comment>

            <case pos:start="567:13" pos:end="567:19">case <expr pos:start="567:18" pos:end="567:18"><literal type="number" pos:start="567:18" pos:end="567:18">4</literal></expr>:</case>

                <return pos:start="569:17" pos:end="569:23">return;</return>

            <case pos:start="571:13" pos:end="571:19">case <expr pos:start="571:18" pos:end="571:18"><literal type="number" pos:start="571:18" pos:end="571:18">3</literal></expr>:</case> <comment type="line" pos:start="571:21" pos:end="571:27">// SFSR</comment>

                <if_stmt pos:start="573:17" pos:end="579:17"><if pos:start="573:17" pos:end="579:17">if <condition pos:start="573:20" pos:end="573:35">(<expr pos:start="573:21" pos:end="573:34"><operator pos:start="573:21" pos:end="573:21">(</operator><name pos:start="573:22" pos:end="573:24">val</name> <operator pos:start="573:26" pos:end="573:26">&amp;</operator> <literal type="number" pos:start="573:28" pos:end="573:28">1</literal><operator pos:start="573:29" pos:end="573:29">)</operator> <operator pos:start="573:31" pos:end="573:32">==</operator> <literal type="number" pos:start="573:34" pos:end="573:34">0</literal></expr>)</condition> <block pos:start="573:37" pos:end="579:17">{<block_content pos:start="575:21" pos:end="577:39">

                    <expr_stmt pos:start="575:21" pos:end="575:28"><expr pos:start="575:21" pos:end="575:27"><name pos:start="575:21" pos:end="575:23">val</name> <operator pos:start="575:25" pos:end="575:25">=</operator> <literal type="number" pos:start="575:27" pos:end="575:27">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="575:30" pos:end="575:57">// Clear SFSR, Fault address</comment>

                    <expr_stmt pos:start="577:21" pos:end="577:39"><expr pos:start="577:21" pos:end="577:38"><name pos:start="577:21" pos:end="577:34"><name pos:start="577:21" pos:end="577:23">env</name><operator pos:start="577:24" pos:end="577:25">-&gt;</operator><name pos:start="577:26" pos:end="577:29">dmmu</name><operator pos:start="577:30" pos:end="577:30">.</operator><name pos:start="577:31" pos:end="577:34">sfar</name></name> <operator pos:start="577:36" pos:end="577:36">=</operator> <literal type="number" pos:start="577:38" pos:end="577:38">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="581:17" pos:end="581:37"><expr pos:start="581:17" pos:end="581:36"><name pos:start="581:17" pos:end="581:30"><name pos:start="581:17" pos:end="581:19">env</name><operator pos:start="581:20" pos:end="581:21">-&gt;</operator><name pos:start="581:22" pos:end="581:25">dmmu</name><operator pos:start="581:26" pos:end="581:26">.</operator><name pos:start="581:27" pos:end="581:30">sfsr</name></name> <operator pos:start="581:32" pos:end="581:32">=</operator> <name pos:start="581:34" pos:end="581:36">val</name></expr>;</expr_stmt>

                <break pos:start="583:17" pos:end="583:22">break;</break>

            <case pos:start="585:13" pos:end="585:19">case <expr pos:start="585:18" pos:end="585:18"><literal type="number" pos:start="585:18" pos:end="585:18">1</literal></expr>:</case> <comment type="line" pos:start="585:21" pos:end="585:38">// Primary context</comment>

                <expr_stmt pos:start="587:17" pos:end="587:52"><expr pos:start="587:17" pos:end="587:51"><name pos:start="587:17" pos:end="587:45"><name pos:start="587:17" pos:end="587:19">env</name><operator pos:start="587:20" pos:end="587:21">-&gt;</operator><name pos:start="587:22" pos:end="587:25">dmmu</name><operator pos:start="587:26" pos:end="587:26">.</operator><name pos:start="587:27" pos:end="587:45">mmu_primary_context</name></name> <operator pos:start="587:47" pos:end="587:47">=</operator> <name pos:start="587:49" pos:end="587:51">val</name></expr>;</expr_stmt>

                <break pos:start="589:17" pos:end="589:22">break;</break>

            <case pos:start="591:13" pos:end="591:19">case <expr pos:start="591:18" pos:end="591:18"><literal type="number" pos:start="591:18" pos:end="591:18">2</literal></expr>:</case> <comment type="line" pos:start="591:21" pos:end="591:40">// Secondary context</comment>

                <expr_stmt pos:start="593:17" pos:end="593:54"><expr pos:start="593:17" pos:end="593:53"><name pos:start="593:17" pos:end="593:47"><name pos:start="593:17" pos:end="593:19">env</name><operator pos:start="593:20" pos:end="593:21">-&gt;</operator><name pos:start="593:22" pos:end="593:25">dmmu</name><operator pos:start="593:26" pos:end="593:26">.</operator><name pos:start="593:27" pos:end="593:47">mmu_secondary_context</name></name> <operator pos:start="593:49" pos:end="593:49">=</operator> <name pos:start="593:51" pos:end="593:53">val</name></expr>;</expr_stmt>

                <break pos:start="595:17" pos:end="595:22">break;</break>

            <case pos:start="597:13" pos:end="597:19">case <expr pos:start="597:18" pos:end="597:18"><literal type="number" pos:start="597:18" pos:end="597:18">5</literal></expr>:</case> <comment type="line" pos:start="597:21" pos:end="597:33">// TSB access</comment>

                <expr_stmt pos:start="599:17" pos:end="601:61"><expr pos:start="599:17" pos:end="601:60"><call pos:start="599:17" pos:end="601:60"><name pos:start="599:17" pos:end="599:27">DPRINTF_MMU</name><argument_list pos:start="599:28" pos:end="601:60">(<argument pos:start="599:29" pos:end="601:39"><expr pos:start="599:29" pos:end="601:39"><literal type="string" pos:start="599:29" pos:end="599:52">"dmmu TSB write: 0x%016"</literal> <name pos:start="599:54" pos:end="599:59">PRIx64</name> <literal type="string" pos:start="599:61" pos:end="599:72">" -&gt; 0x%016"</literal>

                            <name pos:start="601:29" pos:end="601:34">PRIx64</name> <literal type="string" pos:start="601:36" pos:end="601:39">"\n"</literal></expr></argument>, <argument pos:start="601:42" pos:end="601:54"><expr pos:start="601:42" pos:end="601:54"><name pos:start="601:42" pos:end="601:54"><name pos:start="601:42" pos:end="601:44">env</name><operator pos:start="601:45" pos:end="601:46">-&gt;</operator><name pos:start="601:47" pos:end="601:50">dmmu</name><operator pos:start="601:51" pos:end="601:51">.</operator><name pos:start="601:52" pos:end="601:54">tsb</name></name></expr></argument>, <argument pos:start="601:57" pos:end="601:59"><expr pos:start="601:57" pos:end="601:59"><name pos:start="601:57" pos:end="601:59">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="603:17" pos:end="603:36"><expr pos:start="603:17" pos:end="603:35"><name pos:start="603:17" pos:end="603:29"><name pos:start="603:17" pos:end="603:19">env</name><operator pos:start="603:20" pos:end="603:21">-&gt;</operator><name pos:start="603:22" pos:end="603:25">dmmu</name><operator pos:start="603:26" pos:end="603:26">.</operator><name pos:start="603:27" pos:end="603:29">tsb</name></name> <operator pos:start="603:31" pos:end="603:31">=</operator> <name pos:start="603:33" pos:end="603:35">val</name></expr>;</expr_stmt>

                <break pos:start="605:17" pos:end="605:22">break;</break>

            <case pos:start="607:13" pos:end="607:19">case <expr pos:start="607:18" pos:end="607:18"><literal type="number" pos:start="607:18" pos:end="607:18">6</literal></expr>:</case> <comment type="line" pos:start="607:21" pos:end="607:33">// Tag access</comment>

                <expr_stmt pos:start="609:17" pos:end="609:43"><expr pos:start="609:17" pos:end="609:42"><name pos:start="609:17" pos:end="609:36"><name pos:start="609:17" pos:end="609:19">env</name><operator pos:start="609:20" pos:end="609:21">-&gt;</operator><name pos:start="609:22" pos:end="609:25">dmmu</name><operator pos:start="609:26" pos:end="609:26">.</operator><name pos:start="609:27" pos:end="609:36">tag_access</name></name> <operator pos:start="609:38" pos:end="609:38">=</operator> <name pos:start="609:40" pos:end="609:42">val</name></expr>;</expr_stmt>

                <break pos:start="611:17" pos:end="611:22">break;</break>

            <case pos:start="613:13" pos:end="613:19">case <expr pos:start="613:18" pos:end="613:18"><literal type="number" pos:start="613:18" pos:end="613:18">7</literal></expr>:</case> <comment type="line" pos:start="613:21" pos:end="613:41">// Virtual Watchpoint</comment>

            <case pos:start="615:13" pos:end="615:19">case <expr pos:start="615:18" pos:end="615:18"><literal type="number" pos:start="615:18" pos:end="615:18">8</literal></expr>:</case> <comment type="line" pos:start="615:21" pos:end="615:42">// Physical Watchpoint</comment>

            <default pos:start="617:13" pos:end="617:20">default:</default>

                <expr_stmt pos:start="619:17" pos:end="619:41"><expr pos:start="619:17" pos:end="619:40"><name pos:start="619:17" pos:end="619:34"><name pos:start="619:17" pos:end="619:19">env</name><operator pos:start="619:20" pos:end="619:21">-&gt;</operator><name pos:start="619:22" pos:end="619:29">dmmuregs</name><index pos:start="619:30" pos:end="619:34">[<expr pos:start="619:31" pos:end="619:33"><name pos:start="619:31" pos:end="619:33">reg</name></expr>]</index></name> <operator pos:start="619:36" pos:end="619:36">=</operator> <name pos:start="619:38" pos:end="619:40">val</name></expr>;</expr_stmt>

                <break pos:start="621:17" pos:end="621:22">break;</break>

            </block_content>}</block></switch>



            <if_stmt pos:start="627:13" pos:end="636:0"><if pos:start="627:13" pos:end="636:0">if <condition pos:start="627:16" pos:end="627:45">(<expr pos:start="627:17" pos:end="627:44"><name pos:start="627:17" pos:end="627:22">oldreg</name> <operator pos:start="627:24" pos:end="627:25">!=</operator> <name pos:start="627:27" pos:end="627:44"><name pos:start="627:27" pos:end="627:29">env</name><operator pos:start="627:30" pos:end="627:31">-&gt;</operator><name pos:start="627:32" pos:end="627:39">dmmuregs</name><index pos:start="627:40" pos:end="627:44">[<expr pos:start="627:41" pos:end="627:43"><name pos:start="627:41" pos:end="627:43">reg</name></expr>]</index></name></expr>)</condition> <block pos:start="627:47" pos:end="636:0">{<block_content pos:start="629:17" pos:end="631:74">

                <expr_stmt pos:start="629:17" pos:end="631:74"><expr pos:start="629:17" pos:end="631:73"><call pos:start="629:17" pos:end="631:73"><name pos:start="629:17" pos:end="629:27">DPRINTF_MMU</name><argument_list pos:start="629:28" pos:end="631:73">(<argument pos:start="629:29" pos:end="631:39"><expr pos:start="629:29" pos:end="631:39"><literal type="string" pos:start="629:29" pos:end="629:57">"dmmu change reg[%d]: 0x%016"</literal> <name pos:start="629:59" pos:end="629:64">PRIx64</name> <literal type="string" pos:start="629:66" pos:end="629:77">" -&gt; 0x%016"</literal>

                            <name pos:start="631:29" pos:end="631:34">PRIx64</name> <literal type="string" pos:start="631:36" pos:end="631:39">"\n"</literal></expr></argument>, <argument pos:start="631:42" pos:end="631:44"><expr pos:start="631:42" pos:end="631:44"><name pos:start="631:42" pos:end="631:44">reg</name></expr></argument>, <argument pos:start="631:47" pos:end="631:52"><expr pos:start="631:47" pos:end="631:52"><name pos:start="631:47" pos:end="631:52">oldreg</name></expr></argument>, <argument pos:start="631:55" pos:end="631:72"><expr pos:start="631:55" pos:end="631:72"><name pos:start="631:55" pos:end="631:72"><name pos:start="631:55" pos:end="631:57">env</name><operator pos:start="631:58" pos:end="631:59">-&gt;</operator><name pos:start="631:60" pos:end="631:67">dmmuregs</name><index pos:start="631:68" pos:end="631:72">[<expr pos:start="631:69" pos:end="631:71"><name pos:start="631:69" pos:end="631:71">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="635:1" pos:end="635:16">#<cpp:directive pos:start="635:2" pos:end="635:6">ifdef</cpp:directive> <name pos:start="635:8" pos:end="635:16">DEBUG_MMU</name></cpp:ifdef>

            <expr_stmt pos:start="637:13" pos:end="640:0"><expr pos:start="637:13" pos:end="637:25"><call pos:start="637:13" pos:end="637:25"><name pos:start="637:13" pos:end="637:20">dump_mmu</name><argument_list pos:start="637:21" pos:end="637:25">(<argument pos:start="637:22" pos:end="637:24"><expr pos:start="637:22" pos:end="637:24"><name pos:start="637:22" pos:end="637:24">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="639:1" pos:end="639:6">#<cpp:directive pos:start="639:2" pos:end="639:6">endif</cpp:directive></cpp:endif>

            <return pos:start="641:13" pos:end="641:19">return;</return>

        </block_content>}</block>

    <case pos:start="645:5" pos:end="645:14">case <expr pos:start="645:10" pos:end="645:13"><literal type="number" pos:start="645:10" pos:end="645:13">0x5c</literal></expr>:</case> <comment type="line" pos:start="645:16" pos:end="645:31">// D-MMU data in</comment>

        <expr_stmt pos:start="647:9" pos:end="647:80"><expr pos:start="647:9" pos:end="647:79"><call pos:start="647:9" pos:end="647:79"><name pos:start="647:9" pos:end="647:28">replace_tlb_1bit_lru</name><argument_list pos:start="647:29" pos:end="647:79">(<argument pos:start="647:30" pos:end="647:38"><expr pos:start="647:30" pos:end="647:38"><name pos:start="647:30" pos:end="647:38"><name pos:start="647:30" pos:end="647:32">env</name><operator pos:start="647:33" pos:end="647:34">-&gt;</operator><name pos:start="647:35" pos:end="647:38">dtlb</name></name></expr></argument>, <argument pos:start="647:41" pos:end="647:60"><expr pos:start="647:41" pos:end="647:60"><name pos:start="647:41" pos:end="647:60"><name pos:start="647:41" pos:end="647:43">env</name><operator pos:start="647:44" pos:end="647:45">-&gt;</operator><name pos:start="647:46" pos:end="647:49">dmmu</name><operator pos:start="647:50" pos:end="647:50">.</operator><name pos:start="647:51" pos:end="647:60">tag_access</name></name></expr></argument>, <argument pos:start="647:63" pos:end="647:65"><expr pos:start="647:63" pos:end="647:65"><name pos:start="647:63" pos:end="647:65">val</name></expr></argument>, <argument pos:start="647:68" pos:end="647:73"><expr pos:start="647:68" pos:end="647:73"><literal type="string" pos:start="647:68" pos:end="647:73">"dmmu"</literal></expr></argument>, <argument pos:start="647:76" pos:end="647:78"><expr pos:start="647:76" pos:end="647:78"><name pos:start="647:76" pos:end="647:78">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="649:9" pos:end="649:15">return;</return>

    <case pos:start="651:5" pos:end="651:14">case <expr pos:start="651:10" pos:end="651:13"><literal type="number" pos:start="651:10" pos:end="651:13">0x5d</literal></expr>:</case> <comment type="line" pos:start="651:16" pos:end="651:35">// D-MMU data access</comment>

        <block pos:start="653:9" pos:end="673:9">{<block_content pos:start="655:13" pos:end="671:19">

            <decl_stmt pos:start="655:13" pos:end="655:48"><decl pos:start="655:13" pos:end="655:47"><type pos:start="655:13" pos:end="655:24"><name pos:start="655:13" pos:end="655:20">unsigned</name> <name pos:start="655:22" pos:end="655:24">int</name></type> <name pos:start="655:26" pos:end="655:26">i</name> <init pos:start="655:28" pos:end="655:47">= <expr pos:start="655:30" pos:end="655:47"><operator pos:start="655:30" pos:end="655:30">(</operator><name pos:start="655:31" pos:end="655:34">addr</name> <operator pos:start="655:36" pos:end="655:37">&gt;&gt;</operator> <literal type="number" pos:start="655:39" pos:end="655:39">3</literal><operator pos:start="655:40" pos:end="655:40">)</operator> <operator pos:start="655:42" pos:end="655:42">&amp;</operator> <literal type="number" pos:start="655:44" pos:end="655:47">0x3f</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="659:13" pos:end="664:0"><expr pos:start="659:13" pos:end="659:76"><call pos:start="659:13" pos:end="659:76"><name pos:start="659:13" pos:end="659:29">replace_tlb_entry</name><argument_list pos:start="659:30" pos:end="659:76">(<argument pos:start="659:31" pos:end="659:43"><expr pos:start="659:31" pos:end="659:43"><operator pos:start="659:31" pos:end="659:31">&amp;</operator><name pos:start="659:32" pos:end="659:43"><name pos:start="659:32" pos:end="659:34">env</name><operator pos:start="659:35" pos:end="659:36">-&gt;</operator><name pos:start="659:37" pos:end="659:40">dtlb</name><index pos:start="659:41" pos:end="659:43">[<expr pos:start="659:42" pos:end="659:42"><name pos:start="659:42" pos:end="659:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="659:46" pos:end="659:65"><expr pos:start="659:46" pos:end="659:65"><name pos:start="659:46" pos:end="659:65"><name pos:start="659:46" pos:end="659:48">env</name><operator pos:start="659:49" pos:end="659:50">-&gt;</operator><name pos:start="659:51" pos:end="659:54">dmmu</name><operator pos:start="659:55" pos:end="659:55">.</operator><name pos:start="659:56" pos:end="659:65">tag_access</name></name></expr></argument>, <argument pos:start="659:68" pos:end="659:70"><expr pos:start="659:68" pos:end="659:70"><name pos:start="659:68" pos:end="659:70">val</name></expr></argument>, <argument pos:start="659:73" pos:end="659:75"><expr pos:start="659:73" pos:end="659:75"><name pos:start="659:73" pos:end="659:75">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="663:1" pos:end="663:16">#<cpp:directive pos:start="663:2" pos:end="663:6">ifdef</cpp:directive> <name pos:start="663:8" pos:end="663:16">DEBUG_MMU</name></cpp:ifdef>

            <expr_stmt pos:start="665:13" pos:end="665:69"><expr pos:start="665:13" pos:end="665:68"><call pos:start="665:13" pos:end="665:68"><name pos:start="665:13" pos:end="665:23">DPRINTF_MMU</name><argument_list pos:start="665:24" pos:end="665:68">(<argument pos:start="665:25" pos:end="665:64"><expr pos:start="665:25" pos:end="665:64"><literal type="string" pos:start="665:25" pos:end="665:64">"dmmu data access replaced entry [%i]\n"</literal></expr></argument>, <argument pos:start="665:67" pos:end="665:67"><expr pos:start="665:67" pos:end="665:67"><name pos:start="665:67" pos:end="665:67">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="667:13" pos:end="670:0"><expr pos:start="667:13" pos:end="667:25"><call pos:start="667:13" pos:end="667:25"><name pos:start="667:13" pos:end="667:20">dump_mmu</name><argument_list pos:start="667:21" pos:end="667:25">(<argument pos:start="667:22" pos:end="667:24"><expr pos:start="667:22" pos:end="667:24"><name pos:start="667:22" pos:end="667:24">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="669:1" pos:end="669:6">#<cpp:directive pos:start="669:2" pos:end="669:6">endif</cpp:directive></cpp:endif>

            <return pos:start="671:13" pos:end="671:19">return;</return>

        </block_content>}</block>

    <case pos:start="675:5" pos:end="675:14">case <expr pos:start="675:10" pos:end="675:13"><literal type="number" pos:start="675:10" pos:end="675:13">0x5f</literal></expr>:</case> <comment type="line" pos:start="675:16" pos:end="675:29">// D-MMU demap</comment>

        <expr_stmt pos:start="677:9" pos:end="677:48"><expr pos:start="677:9" pos:end="677:47"><call pos:start="677:9" pos:end="677:47"><name pos:start="677:9" pos:end="677:17">demap_tlb</name><argument_list pos:start="677:18" pos:end="677:47">(<argument pos:start="677:19" pos:end="677:27"><expr pos:start="677:19" pos:end="677:27"><name pos:start="677:19" pos:end="677:27"><name pos:start="677:19" pos:end="677:21">env</name><operator pos:start="677:22" pos:end="677:23">-&gt;</operator><name pos:start="677:24" pos:end="677:27">dtlb</name></name></expr></argument>, <argument pos:start="677:30" pos:end="677:33"><expr pos:start="677:30" pos:end="677:33"><name pos:start="677:30" pos:end="677:33">addr</name></expr></argument>, <argument pos:start="677:36" pos:end="677:41"><expr pos:start="677:36" pos:end="677:41"><literal type="string" pos:start="677:36" pos:end="677:41">"dmmu"</literal></expr></argument>, <argument pos:start="677:44" pos:end="677:46"><expr pos:start="677:44" pos:end="677:46"><name pos:start="677:44" pos:end="677:46">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="679:9" pos:end="679:15">return;</return>

    <case pos:start="681:5" pos:end="681:14">case <expr pos:start="681:10" pos:end="681:13"><literal type="number" pos:start="681:10" pos:end="681:13">0x49</literal></expr>:</case> <comment type="line" pos:start="681:16" pos:end="681:40">// Interrupt data receive</comment>

        <comment type="line" pos:start="683:9" pos:end="683:14">// XXX</comment>

        <return pos:start="685:9" pos:end="685:15">return;</return>

    <case pos:start="687:5" pos:end="687:14">case <expr pos:start="687:10" pos:end="687:13"><literal type="number" pos:start="687:10" pos:end="687:13">0x46</literal></expr>:</case> <comment type="line" pos:start="687:16" pos:end="687:30">// D-cache data</comment>

    <case pos:start="689:5" pos:end="689:14">case <expr pos:start="689:10" pos:end="689:13"><literal type="number" pos:start="689:10" pos:end="689:13">0x47</literal></expr>:</case> <comment type="line" pos:start="689:16" pos:end="689:36">// D-cache tag access</comment>

    <case pos:start="691:5" pos:end="691:14">case <expr pos:start="691:10" pos:end="691:13"><literal type="number" pos:start="691:10" pos:end="691:13">0x4b</literal></expr>:</case> <comment type="line" pos:start="691:16" pos:end="691:38">// E-cache error enable</comment>

    <case pos:start="693:5" pos:end="693:14">case <expr pos:start="693:10" pos:end="693:13"><literal type="number" pos:start="693:10" pos:end="693:13">0x4c</literal></expr>:</case> <comment type="line" pos:start="693:16" pos:end="693:51">// E-cache asynchronous fault status</comment>

    <case pos:start="695:5" pos:end="695:14">case <expr pos:start="695:10" pos:end="695:13"><literal type="number" pos:start="695:10" pos:end="695:13">0x4d</literal></expr>:</case> <comment type="line" pos:start="695:16" pos:end="695:52">// E-cache asynchronous fault address</comment>

    <case pos:start="697:5" pos:end="697:14">case <expr pos:start="697:10" pos:end="697:13"><literal type="number" pos:start="697:10" pos:end="697:13">0x4e</literal></expr>:</case> <comment type="line" pos:start="697:16" pos:end="697:34">// E-cache tag data</comment>

    <case pos:start="699:5" pos:end="699:14">case <expr pos:start="699:10" pos:end="699:13"><literal type="number" pos:start="699:10" pos:end="699:13">0x66</literal></expr>:</case> <comment type="line" pos:start="699:16" pos:end="699:44">// I-cache instruction access</comment>

    <case pos:start="701:5" pos:end="701:14">case <expr pos:start="701:10" pos:end="701:13"><literal type="number" pos:start="701:10" pos:end="701:13">0x67</literal></expr>:</case> <comment type="line" pos:start="701:16" pos:end="701:36">// I-cache tag access</comment>

    <case pos:start="703:5" pos:end="703:14">case <expr pos:start="703:10" pos:end="703:13"><literal type="number" pos:start="703:10" pos:end="703:13">0x6e</literal></expr>:</case> <comment type="line" pos:start="703:16" pos:end="703:35">// I-cache predecode</comment>

    <case pos:start="705:5" pos:end="705:14">case <expr pos:start="705:10" pos:end="705:13"><literal type="number" pos:start="705:10" pos:end="705:13">0x6f</literal></expr>:</case> <comment type="line" pos:start="705:16" pos:end="705:34">// I-cache LRU etc.</comment>

    <case pos:start="707:5" pos:end="707:14">case <expr pos:start="707:10" pos:end="707:13"><literal type="number" pos:start="707:10" pos:end="707:13">0x76</literal></expr>:</case> <comment type="line" pos:start="707:16" pos:end="707:29">// E-cache tag</comment>

    <case pos:start="709:5" pos:end="709:14">case <expr pos:start="709:10" pos:end="709:13"><literal type="number" pos:start="709:10" pos:end="709:13">0x7e</literal></expr>:</case> <comment type="line" pos:start="709:16" pos:end="709:29">// E-cache tag</comment>

        <return pos:start="711:9" pos:end="711:15">return;</return>

    <case pos:start="713:5" pos:end="713:14">case <expr pos:start="713:10" pos:end="713:13"><literal type="number" pos:start="713:10" pos:end="713:13">0x51</literal></expr>:</case> <comment type="line" pos:start="713:16" pos:end="713:42">// I-MMU 8k TSB pointer, RO</comment>

    <case pos:start="715:5" pos:end="715:14">case <expr pos:start="715:10" pos:end="715:13"><literal type="number" pos:start="715:10" pos:end="715:13">0x52</literal></expr>:</case> <comment type="line" pos:start="715:16" pos:end="715:43">// I-MMU 64k TSB pointer, RO</comment>

    <case pos:start="717:5" pos:end="717:14">case <expr pos:start="717:10" pos:end="717:13"><literal type="number" pos:start="717:10" pos:end="717:13">0x56</literal></expr>:</case> <comment type="line" pos:start="717:16" pos:end="717:36">// I-MMU tag read, RO</comment>

    <case pos:start="719:5" pos:end="719:14">case <expr pos:start="719:10" pos:end="719:13"><literal type="number" pos:start="719:10" pos:end="719:13">0x59</literal></expr>:</case> <comment type="line" pos:start="719:16" pos:end="719:42">// D-MMU 8k TSB pointer, RO</comment>

    <case pos:start="721:5" pos:end="721:14">case <expr pos:start="721:10" pos:end="721:13"><literal type="number" pos:start="721:10" pos:end="721:13">0x5a</literal></expr>:</case> <comment type="line" pos:start="721:16" pos:end="721:43">// D-MMU 64k TSB pointer, RO</comment>

    <case pos:start="723:5" pos:end="723:14">case <expr pos:start="723:10" pos:end="723:13"><literal type="number" pos:start="723:10" pos:end="723:13">0x5b</literal></expr>:</case> <comment type="line" pos:start="723:16" pos:end="723:40">// D-MMU data pointer, RO</comment>

    <case pos:start="725:5" pos:end="725:14">case <expr pos:start="725:10" pos:end="725:13"><literal type="number" pos:start="725:10" pos:end="725:13">0x5e</literal></expr>:</case> <comment type="line" pos:start="725:16" pos:end="725:36">// D-MMU tag read, RO</comment>

    <case pos:start="727:5" pos:end="727:14">case <expr pos:start="727:10" pos:end="727:13"><literal type="number" pos:start="727:10" pos:end="727:13">0x48</literal></expr>:</case> <comment type="line" pos:start="727:16" pos:end="727:40">// Interrupt dispatch, RO</comment>

    <case pos:start="729:5" pos:end="729:14">case <expr pos:start="729:10" pos:end="729:13"><literal type="number" pos:start="729:10" pos:end="729:13">0x7f</literal></expr>:</case> <comment type="line" pos:start="729:16" pos:end="729:47">// Incoming interrupt vector, RO</comment>

    <case pos:start="731:5" pos:end="731:14">case <expr pos:start="731:10" pos:end="731:13"><literal type="number" pos:start="731:10" pos:end="731:13">0x82</literal></expr>:</case> <comment type="line" pos:start="731:16" pos:end="731:38">// Primary no-fault, RO</comment>

    <case pos:start="733:5" pos:end="733:14">case <expr pos:start="733:10" pos:end="733:13"><literal type="number" pos:start="733:10" pos:end="733:13">0x83</literal></expr>:</case> <comment type="line" pos:start="733:16" pos:end="733:40">// Secondary no-fault, RO</comment>

    <case pos:start="735:5" pos:end="735:14">case <expr pos:start="735:10" pos:end="735:13"><literal type="number" pos:start="735:10" pos:end="735:13">0x8a</literal></expr>:</case> <comment type="line" pos:start="735:16" pos:end="735:41">// Primary no-fault LE, RO</comment>

    <case pos:start="737:5" pos:end="737:14">case <expr pos:start="737:10" pos:end="737:13"><literal type="number" pos:start="737:10" pos:end="737:13">0x8b</literal></expr>:</case> <comment type="line" pos:start="737:16" pos:end="737:43">// Secondary no-fault LE, RO</comment>

    <default pos:start="739:5" pos:end="739:12">default:</default>

        <expr_stmt pos:start="741:9" pos:end="741:50"><expr pos:start="741:9" pos:end="741:49"><call pos:start="741:9" pos:end="741:49"><name pos:start="741:9" pos:end="741:28">do_unassigned_access</name><argument_list pos:start="741:29" pos:end="741:49">(<argument pos:start="741:30" pos:end="741:33"><expr pos:start="741:30" pos:end="741:33"><name pos:start="741:30" pos:end="741:33">addr</name></expr></argument>, <argument pos:start="741:36" pos:end="741:36"><expr pos:start="741:36" pos:end="741:36"><literal type="number" pos:start="741:36" pos:end="741:36">1</literal></expr></argument>, <argument pos:start="741:39" pos:end="741:39"><expr pos:start="741:39" pos:end="741:39"><literal type="number" pos:start="741:39" pos:end="741:39">0</literal></expr></argument>, <argument pos:start="741:42" pos:end="741:42"><expr pos:start="741:42" pos:end="741:42"><literal type="number" pos:start="741:42" pos:end="741:42">1</literal></expr></argument>, <argument pos:start="741:45" pos:end="741:48"><expr pos:start="741:45" pos:end="741:48"><name pos:start="741:45" pos:end="741:48">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="743:9" pos:end="743:15">return;</return>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
