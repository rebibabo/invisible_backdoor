<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26029.c" pos:tabs="8"><function pos:start="1:1" pos:end="235:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">external_snapshot_prepare</name><parameter_list pos:start="1:38" pos:end="3:51">(<parameter pos:start="1:39" pos:end="1:65"><decl pos:start="1:39" pos:end="1:65"><type pos:start="1:39" pos:end="1:65"><name pos:start="1:39" pos:end="1:57">BlkTransactionState</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:65">common</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:50"><decl pos:start="3:39" pos:end="3:50"><type pos:start="3:39" pos:end="3:50"><name pos:start="3:39" pos:end="3:43">Error</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier><modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="235:1">{<block_content pos:start="7:5" pos:end="233:21">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">BlockDriver</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">flags</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:18">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">QDict</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:18">options</name> <init pos:start="11:20" pos:end="11:25">= <expr pos:start="11:22" pos:end="11:25"><name pos:start="11:22" pos:end="11:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:19">has_device</name> <init pos:start="15:21" pos:end="15:27">= <expr pos:start="15:23" pos:end="15:27"><name pos:start="15:23" pos:end="15:27">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:22">device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:22">has_node_name</name> <init pos:start="19:24" pos:end="19:30">= <expr pos:start="19:26" pos:end="19:30"><name pos:start="19:26" pos:end="19:30">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:25">node_name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:40"><decl pos:start="23:5" pos:end="23:39"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:31">has_snapshot_node_name</name> <init pos:start="23:33" pos:end="23:39">= <expr pos:start="23:35" pos:end="23:39"><name pos:start="23:35" pos:end="23:39">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:35"><decl pos:start="25:5" pos:end="25:34"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:34">snapshot_node_name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:31"><decl pos:start="27:5" pos:end="27:30"><type pos:start="27:5" pos:end="27:16"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:14">char</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:30">new_image_file</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:33"><decl pos:start="29:5" pos:end="29:32"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">char</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:22">format</name> <init pos:start="29:24" pos:end="29:32">= <expr pos:start="29:26" pos:end="29:32"><literal type="string" pos:start="29:26" pos:end="29:32">"qcow2"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:59"><decl pos:start="31:5" pos:end="31:58"><type pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:8">enum</name> <name pos:start="31:10" pos:end="31:21">NewImageMode</name></name></type> <name pos:start="31:23" pos:end="31:26">mode</name> <init pos:start="31:28" pos:end="31:58">= <expr pos:start="31:30" pos:end="31:58"><name pos:start="31:30" pos:end="31:58">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="35:78"><decl pos:start="33:5" pos:end="35:77"><type pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:25">ExternalSnapshotState</name> <modifier pos:start="33:27" pos:end="33:27">*</modifier></type><name pos:start="33:28" pos:end="33:32">state</name> <init pos:start="33:34" pos:end="35:77">=

                             <expr pos:start="35:30" pos:end="35:77"><call pos:start="35:30" pos:end="35:77"><name pos:start="35:30" pos:end="35:38">DO_UPCAST</name><argument_list pos:start="35:39" pos:end="35:77">(<argument pos:start="35:40" pos:end="35:60"><expr pos:start="35:40" pos:end="35:60"><name pos:start="35:40" pos:end="35:60">ExternalSnapshotState</name></expr></argument>, <argument pos:start="35:63" pos:end="35:68"><expr pos:start="35:63" pos:end="35:68"><name pos:start="35:63" pos:end="35:68">common</name></expr></argument>, <argument pos:start="35:71" pos:end="35:76"><expr pos:start="35:71" pos:end="35:76"><name pos:start="35:71" pos:end="35:76">common</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:47"><decl pos:start="37:5" pos:end="37:46"><type pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:21">TransactionAction</name> <modifier pos:start="37:23" pos:end="37:23">*</modifier></type><name pos:start="37:24" pos:end="37:29">action</name> <init pos:start="37:31" pos:end="37:46">= <expr pos:start="37:33" pos:end="37:46"><name pos:start="37:33" pos:end="37:46"><name pos:start="37:33" pos:end="37:38">common</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:46">action</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:24">/* get parameters */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:77"><expr pos:start="43:5" pos:end="43:76"><call pos:start="43:5" pos:end="43:76"><name pos:start="43:5" pos:end="43:12">g_assert</name><argument_list pos:start="43:13" pos:end="43:76">(<argument pos:start="43:14" pos:end="43:75"><expr pos:start="43:14" pos:end="43:75"><name pos:start="43:14" pos:end="43:25"><name pos:start="43:14" pos:end="43:19">action</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:25">kind</name></name> <operator pos:start="43:27" pos:end="43:28">==</operator> <name pos:start="43:30" pos:end="43:75">TRANSACTION_ACTION_KIND_BLOCKDEV_SNAPSHOT_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:60"><expr pos:start="47:5" pos:end="47:59"><name pos:start="47:5" pos:end="47:14">has_device</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:59"><name pos:start="47:18" pos:end="47:23">action</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:47">blockdev_snapshot_sync</name><operator pos:start="47:48" pos:end="47:49">-&gt;</operator><name pos:start="47:50" pos:end="47:59">has_device</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:52"><expr pos:start="49:5" pos:end="49:51"><name pos:start="49:5" pos:end="49:10">device</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:51"><name pos:start="49:14" pos:end="49:19">action</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:43">blockdev_snapshot_sync</name><operator pos:start="49:44" pos:end="49:45">-&gt;</operator><name pos:start="49:46" pos:end="49:51">device</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:66"><expr pos:start="51:5" pos:end="51:65"><name pos:start="51:5" pos:end="51:17">has_node_name</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:65"><name pos:start="51:21" pos:end="51:26">action</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:50">blockdev_snapshot_sync</name><operator pos:start="51:51" pos:end="51:52">-&gt;</operator><name pos:start="51:53" pos:end="51:65">has_node_name</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:58"><expr pos:start="53:5" pos:end="53:57"><name pos:start="53:5" pos:end="53:13">node_name</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <name pos:start="53:17" pos:end="53:57"><name pos:start="53:17" pos:end="53:22">action</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:46">blockdev_snapshot_sync</name><operator pos:start="53:47" pos:end="53:48">-&gt;</operator><name pos:start="53:49" pos:end="53:57">node_name</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="57:63"><expr pos:start="55:5" pos:end="57:62"><name pos:start="55:5" pos:end="55:26">has_snapshot_node_name</name> <operator pos:start="55:28" pos:end="55:28">=</operator>

        <name pos:start="57:9" pos:end="57:62"><name pos:start="57:9" pos:end="57:14">action</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:38">blockdev_snapshot_sync</name><operator pos:start="57:39" pos:end="57:40">-&gt;</operator><name pos:start="57:41" pos:end="57:62">has_snapshot_node_name</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:76"><expr pos:start="59:5" pos:end="59:75"><name pos:start="59:5" pos:end="59:22">snapshot_node_name</name> <operator pos:start="59:24" pos:end="59:24">=</operator> <name pos:start="59:26" pos:end="59:75"><name pos:start="59:26" pos:end="59:31">action</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:55">blockdev_snapshot_sync</name><operator pos:start="59:56" pos:end="59:57">-&gt;</operator><name pos:start="59:58" pos:end="59:75">snapshot_node_name</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:67"><expr pos:start="63:5" pos:end="63:66"><name pos:start="63:5" pos:end="63:18">new_image_file</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:66"><name pos:start="63:22" pos:end="63:27">action</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:51">blockdev_snapshot_sync</name><operator pos:start="63:52" pos:end="63:53">-&gt;</operator><name pos:start="63:54" pos:end="63:66">snapshot_file</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:51">(<expr pos:start="65:9" pos:end="65:50"><name pos:start="65:9" pos:end="65:50"><name pos:start="65:9" pos:end="65:14">action</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:38">blockdev_snapshot_sync</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:50">has_format</name></name></expr>)</condition> <block pos:start="65:53" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:56">

        <expr_stmt pos:start="67:9" pos:end="67:56"><expr pos:start="67:9" pos:end="67:55"><name pos:start="67:9" pos:end="67:14">format</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <name pos:start="67:18" pos:end="67:55"><name pos:start="67:18" pos:end="67:23">action</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:47">blockdev_snapshot_sync</name><operator pos:start="67:48" pos:end="67:49">-&gt;</operator><name pos:start="67:50" pos:end="67:55">format</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:49">(<expr pos:start="71:9" pos:end="71:48"><name pos:start="71:9" pos:end="71:48"><name pos:start="71:9" pos:end="71:14">action</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:38">blockdev_snapshot_sync</name><operator pos:start="71:39" pos:end="71:40">-&gt;</operator><name pos:start="71:41" pos:end="71:48">has_mode</name></name></expr>)</condition> <block pos:start="71:51" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:52">

        <expr_stmt pos:start="73:9" pos:end="73:52"><expr pos:start="73:9" pos:end="73:51"><name pos:start="73:9" pos:end="73:12">mode</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <name pos:start="73:16" pos:end="73:51"><name pos:start="73:16" pos:end="73:21">action</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:45">blockdev_snapshot_sync</name><operator pos:start="73:46" pos:end="73:47">-&gt;</operator><name pos:start="73:48" pos:end="73:51">mode</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:26">/* start processing */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:35"><expr pos:start="81:5" pos:end="81:34"><name pos:start="81:5" pos:end="81:7">drv</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="81:34"><name pos:start="81:11" pos:end="81:26">bdrv_find_format</name><argument_list pos:start="81:27" pos:end="81:34">(<argument pos:start="81:28" pos:end="81:33"><expr pos:start="81:28" pos:end="81:33"><name pos:start="81:28" pos:end="81:33">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:13">(<expr pos:start="83:9" pos:end="83:12"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:12">drv</name></expr>)</condition> <block pos:start="83:15" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:15">

        <expr_stmt pos:start="85:9" pos:end="85:59"><expr pos:start="85:9" pos:end="85:58"><call pos:start="85:9" pos:end="85:58"><name pos:start="85:9" pos:end="85:17">error_set</name><argument_list pos:start="85:18" pos:end="85:58">(<argument pos:start="85:19" pos:end="85:22"><expr pos:start="85:19" pos:end="85:22"><name pos:start="85:19" pos:end="85:22">errp</name></expr></argument>, <argument pos:start="85:25" pos:end="85:49"><expr pos:start="85:25" pos:end="85:49"><name pos:start="85:25" pos:end="85:49">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="85:52" pos:end="85:57"><expr pos:start="85:52" pos:end="85:57"><name pos:start="85:52" pos:end="85:57">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="97:47"><expr pos:start="93:5" pos:end="97:46"><name pos:start="93:5" pos:end="93:17"><name pos:start="93:5" pos:end="93:9">state</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:17">old_bs</name></name> <operator pos:start="93:19" pos:end="93:19">=</operator> <call pos:start="93:21" pos:end="97:46"><name pos:start="93:21" pos:end="93:34">bdrv_lookup_bs</name><argument_list pos:start="93:35" pos:end="97:46">(<argument pos:start="93:36" pos:end="93:61"><expr pos:start="93:36" pos:end="93:61"><ternary pos:start="93:36" pos:end="93:61"><condition pos:start="93:36" pos:end="93:47"><expr pos:start="93:36" pos:end="93:45"><name pos:start="93:36" pos:end="93:45">has_device</name></expr> ?</condition><then pos:start="93:49" pos:end="93:54"> <expr pos:start="93:49" pos:end="93:54"><name pos:start="93:49" pos:end="93:54">device</name></expr> </then><else pos:start="93:56" pos:end="93:61">: <expr pos:start="93:58" pos:end="93:61"><name pos:start="93:58" pos:end="93:61">NULL</name></expr></else></ternary></expr></argument>,

                                   <argument pos:start="95:36" pos:end="95:67"><expr pos:start="95:36" pos:end="95:67"><ternary pos:start="95:36" pos:end="95:67"><condition pos:start="95:36" pos:end="95:50"><expr pos:start="95:36" pos:end="95:48"><name pos:start="95:36" pos:end="95:48">has_node_name</name></expr> ?</condition><then pos:start="95:52" pos:end="95:60"> <expr pos:start="95:52" pos:end="95:60"><name pos:start="95:52" pos:end="95:60">node_name</name></expr> </then><else pos:start="95:62" pos:end="95:67">: <expr pos:start="95:64" pos:end="95:67"><name pos:start="95:64" pos:end="95:67">NULL</name></expr></else></ternary></expr></argument>,

                                   <argument pos:start="97:36" pos:end="97:45"><expr pos:start="97:36" pos:end="97:45"><operator pos:start="97:36" pos:end="97:36">&amp;</operator><name pos:start="97:37" pos:end="97:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:33">(<expr pos:start="99:9" pos:end="99:32"><call pos:start="99:9" pos:end="99:32"><name pos:start="99:9" pos:end="99:20">error_is_set</name><argument_list pos:start="99:21" pos:end="99:32">(<argument pos:start="99:22" pos:end="99:31"><expr pos:start="99:22" pos:end="99:31"><operator pos:start="99:22" pos:end="99:22">&amp;</operator><name pos:start="99:23" pos:end="99:31">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:35" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:15">

        <expr_stmt pos:start="101:9" pos:end="101:41"><expr pos:start="101:9" pos:end="101:40"><call pos:start="101:9" pos:end="101:40"><name pos:start="101:9" pos:end="101:23">error_propagate</name><argument_list pos:start="101:24" pos:end="101:40">(<argument pos:start="101:25" pos:end="101:28"><expr pos:start="101:25" pos:end="101:28"><name pos:start="101:25" pos:end="101:28">errp</name></expr></argument>, <argument pos:start="101:31" pos:end="101:39"><expr pos:start="101:31" pos:end="101:39"><name pos:start="101:31" pos:end="101:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:49">(<expr pos:start="109:9" pos:end="109:48"><name pos:start="109:9" pos:end="109:21">has_node_name</name> <operator pos:start="109:23" pos:end="109:24">&amp;&amp;</operator> <operator pos:start="109:26" pos:end="109:26">!</operator><name pos:start="109:27" pos:end="109:48">has_snapshot_node_name</name></expr>)</condition> <block pos:start="109:51" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:15">

        <expr_stmt pos:start="111:9" pos:end="111:59"><expr pos:start="111:9" pos:end="111:58"><call pos:start="111:9" pos:end="111:58"><name pos:start="111:9" pos:end="111:18">error_setg</name><argument_list pos:start="111:19" pos:end="111:58">(<argument pos:start="111:20" pos:end="111:23"><expr pos:start="111:20" pos:end="111:23"><name pos:start="111:20" pos:end="111:23">errp</name></expr></argument>, <argument pos:start="111:26" pos:end="111:57"><expr pos:start="111:26" pos:end="111:57"><literal type="string" pos:start="111:26" pos:end="111:57">"New snapshot node name missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:69">(<expr pos:start="119:9" pos:end="119:68"><name pos:start="119:9" pos:end="119:30">has_snapshot_node_name</name> <operator pos:start="119:32" pos:end="119:33">&amp;&amp;</operator> <call pos:start="119:35" pos:end="119:68"><name pos:start="119:35" pos:end="119:48">bdrv_find_node</name><argument_list pos:start="119:49" pos:end="119:68">(<argument pos:start="119:50" pos:end="119:67"><expr pos:start="119:50" pos:end="119:67"><name pos:start="119:50" pos:end="119:67">snapshot_node_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:71" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:15">

        <expr_stmt pos:start="121:9" pos:end="121:68"><expr pos:start="121:9" pos:end="121:67"><call pos:start="121:9" pos:end="121:67"><name pos:start="121:9" pos:end="121:18">error_setg</name><argument_list pos:start="121:19" pos:end="121:67">(<argument pos:start="121:20" pos:end="121:23"><expr pos:start="121:20" pos:end="121:23"><name pos:start="121:20" pos:end="121:23">errp</name></expr></argument>, <argument pos:start="121:26" pos:end="121:66"><expr pos:start="121:26" pos:end="121:66"><literal type="string" pos:start="121:26" pos:end="121:66">"New snapshot node name already existing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:41">(<expr pos:start="129:9" pos:end="129:40"><operator pos:start="129:9" pos:end="129:9">!</operator><call pos:start="129:10" pos:end="129:40"><name pos:start="129:10" pos:end="129:25">bdrv_is_inserted</name><argument_list pos:start="129:26" pos:end="129:40">(<argument pos:start="129:27" pos:end="129:39"><expr pos:start="129:27" pos:end="129:39"><name pos:start="129:27" pos:end="129:39"><name pos:start="129:27" pos:end="129:31">state</name><operator pos:start="129:32" pos:end="129:33">-&gt;</operator><name pos:start="129:34" pos:end="129:39">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:43" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:15">

        <expr_stmt pos:start="131:9" pos:end="131:59"><expr pos:start="131:9" pos:end="131:58"><call pos:start="131:9" pos:end="131:58"><name pos:start="131:9" pos:end="131:17">error_set</name><argument_list pos:start="131:18" pos:end="131:58">(<argument pos:start="131:19" pos:end="131:22"><expr pos:start="131:19" pos:end="131:22"><name pos:start="131:19" pos:end="131:22">errp</name></expr></argument>, <argument pos:start="131:25" pos:end="131:49"><expr pos:start="131:25" pos:end="131:49"><name pos:start="131:25" pos:end="131:49">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="131:52" pos:end="131:57"><expr pos:start="131:52" pos:end="131:57"><name pos:start="131:52" pos:end="131:57">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:35">(<expr pos:start="139:9" pos:end="139:34"><call pos:start="139:9" pos:end="139:34"><name pos:start="139:9" pos:end="139:19">bdrv_in_use</name><argument_list pos:start="139:20" pos:end="139:34">(<argument pos:start="139:21" pos:end="139:33"><expr pos:start="139:21" pos:end="139:33"><name pos:start="139:21" pos:end="139:33"><name pos:start="139:21" pos:end="139:25">state</name><operator pos:start="139:26" pos:end="139:27">-&gt;</operator><name pos:start="139:28" pos:end="139:33">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:37" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:15">

        <expr_stmt pos:start="141:9" pos:end="141:52"><expr pos:start="141:9" pos:end="141:51"><call pos:start="141:9" pos:end="141:51"><name pos:start="141:9" pos:end="141:17">error_set</name><argument_list pos:start="141:18" pos:end="141:51">(<argument pos:start="141:19" pos:end="141:22"><expr pos:start="141:19" pos:end="141:22"><name pos:start="141:19" pos:end="141:22">errp</name></expr></argument>, <argument pos:start="141:25" pos:end="141:42"><expr pos:start="141:25" pos:end="141:42"><name pos:start="141:25" pos:end="141:42">QERR_DEVICE_IN_USE</name></expr></argument>, <argument pos:start="141:45" pos:end="141:50"><expr pos:start="141:45" pos:end="141:50"><name pos:start="141:45" pos:end="141:50">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="159:5"><if pos:start="149:5" pos:end="159:5">if <condition pos:start="149:8" pos:end="149:42">(<expr pos:start="149:9" pos:end="149:41"><operator pos:start="149:9" pos:end="149:9">!</operator><call pos:start="149:10" pos:end="149:41"><name pos:start="149:10" pos:end="149:26">bdrv_is_read_only</name><argument_list pos:start="149:27" pos:end="149:41">(<argument pos:start="149:28" pos:end="149:40"><expr pos:start="149:28" pos:end="149:40"><name pos:start="149:28" pos:end="149:40"><name pos:start="149:28" pos:end="149:32">state</name><operator pos:start="149:33" pos:end="149:34">-&gt;</operator><name pos:start="149:35" pos:end="149:40">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:44" pos:end="159:5">{<block_content pos:start="151:9" pos:end="157:9">

        <if_stmt pos:start="151:9" pos:end="157:9"><if pos:start="151:9" pos:end="157:9">if <condition pos:start="151:12" pos:end="151:38">(<expr pos:start="151:13" pos:end="151:37"><call pos:start="151:13" pos:end="151:37"><name pos:start="151:13" pos:end="151:22">bdrv_flush</name><argument_list pos:start="151:23" pos:end="151:37">(<argument pos:start="151:24" pos:end="151:36"><expr pos:start="151:24" pos:end="151:36"><name pos:start="151:24" pos:end="151:36"><name pos:start="151:24" pos:end="151:28">state</name><operator pos:start="151:29" pos:end="151:30">-&gt;</operator><name pos:start="151:31" pos:end="151:36">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:40" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:19">

            <expr_stmt pos:start="153:13" pos:end="153:43"><expr pos:start="153:13" pos:end="153:42"><call pos:start="153:13" pos:end="153:42"><name pos:start="153:13" pos:end="153:21">error_set</name><argument_list pos:start="153:22" pos:end="153:42">(<argument pos:start="153:23" pos:end="153:26"><expr pos:start="153:23" pos:end="153:26"><name pos:start="153:23" pos:end="153:26">errp</name></expr></argument>, <argument pos:start="153:29" pos:end="153:41"><expr pos:start="153:29" pos:end="153:41"><name pos:start="153:29" pos:end="153:41">QERR_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="155:13" pos:end="155:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="163:5" pos:end="169:5"><if pos:start="163:5" pos:end="169:5">if <condition pos:start="163:8" pos:end="163:49">(<expr pos:start="163:9" pos:end="163:48"><operator pos:start="163:9" pos:end="163:9">!</operator><call pos:start="163:10" pos:end="163:48"><name pos:start="163:10" pos:end="163:33">bdrv_is_first_non_filter</name><argument_list pos:start="163:34" pos:end="163:48">(<argument pos:start="163:35" pos:end="163:47"><expr pos:start="163:35" pos:end="163:47"><name pos:start="163:35" pos:end="163:47"><name pos:start="163:35" pos:end="163:39">state</name><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:47">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="163:51" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:15">

        <expr_stmt pos:start="165:9" pos:end="165:59"><expr pos:start="165:9" pos:end="165:58"><call pos:start="165:9" pos:end="165:58"><name pos:start="165:9" pos:end="165:17">error_set</name><argument_list pos:start="165:18" pos:end="165:58">(<argument pos:start="165:19" pos:end="165:22"><expr pos:start="165:19" pos:end="165:22"><name pos:start="165:19" pos:end="165:22">errp</name></expr></argument>, <argument pos:start="165:25" pos:end="165:45"><expr pos:start="165:25" pos:end="165:45"><name pos:start="165:25" pos:end="165:45">QERR_FEATURE_DISABLED</name></expr></argument>, <argument pos:start="165:48" pos:end="165:57"><expr pos:start="165:48" pos:end="165:57"><literal type="string" pos:start="165:48" pos:end="165:57">"snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="167:9" pos:end="167:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:38"><expr pos:start="173:5" pos:end="173:37"><name pos:start="173:5" pos:end="173:9">flags</name> <operator pos:start="173:11" pos:end="173:11">=</operator> <name pos:start="173:13" pos:end="173:37"><name pos:start="173:13" pos:end="173:17">state</name><operator pos:start="173:18" pos:end="173:19">-&gt;</operator><name pos:start="173:20" pos:end="173:25">old_bs</name><operator pos:start="173:26" pos:end="173:27">-&gt;</operator><name pos:start="173:28" pos:end="173:37">open_flags</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="177:5" pos:end="177:41">/* create new image w/backing file */</comment>

    <if_stmt pos:start="179:5" pos:end="197:5"><if pos:start="179:5" pos:end="197:5">if <condition pos:start="179:8" pos:end="179:40">(<expr pos:start="179:9" pos:end="179:39"><name pos:start="179:9" pos:end="179:12">mode</name> <operator pos:start="179:14" pos:end="179:15">!=</operator> <name pos:start="179:17" pos:end="179:39">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition> <block pos:start="179:42" pos:end="197:5">{<block_content pos:start="181:9" pos:end="195:9">

        <expr_stmt pos:start="181:9" pos:end="187:60"><expr pos:start="181:9" pos:end="187:59"><call pos:start="181:9" pos:end="187:59"><name pos:start="181:9" pos:end="181:23">bdrv_img_create</name><argument_list pos:start="181:24" pos:end="187:59">(<argument pos:start="181:25" pos:end="181:38"><expr pos:start="181:25" pos:end="181:38"><name pos:start="181:25" pos:end="181:38">new_image_file</name></expr></argument>, <argument pos:start="181:41" pos:end="181:46"><expr pos:start="181:41" pos:end="181:46"><name pos:start="181:41" pos:end="181:46">format</name></expr></argument>,

                        <argument pos:start="183:25" pos:end="183:47"><expr pos:start="183:25" pos:end="183:47"><name pos:start="183:25" pos:end="183:47"><name pos:start="183:25" pos:end="183:29">state</name><operator pos:start="183:30" pos:end="183:31">-&gt;</operator><name pos:start="183:32" pos:end="183:37">old_bs</name><operator pos:start="183:38" pos:end="183:39">-&gt;</operator><name pos:start="183:40" pos:end="183:47">filename</name></name></expr></argument>,

                        <argument pos:start="185:25" pos:end="185:55"><expr pos:start="185:25" pos:end="185:55"><name pos:start="185:25" pos:end="185:55"><name pos:start="185:25" pos:end="185:29">state</name><operator pos:start="185:30" pos:end="185:31">-&gt;</operator><name pos:start="185:32" pos:end="185:37">old_bs</name><operator pos:start="185:38" pos:end="185:39">-&gt;</operator><name pos:start="185:40" pos:end="185:42">drv</name><operator pos:start="185:43" pos:end="185:44">-&gt;</operator><name pos:start="185:45" pos:end="185:55">format_name</name></name></expr></argument>,

                        <argument pos:start="187:25" pos:end="187:28"><expr pos:start="187:25" pos:end="187:28"><name pos:start="187:25" pos:end="187:28">NULL</name></expr></argument>, <argument pos:start="187:31" pos:end="187:32"><expr pos:start="187:31" pos:end="187:32"><operator pos:start="187:31" pos:end="187:31">-</operator><literal type="number" pos:start="187:32" pos:end="187:32">1</literal></expr></argument>, <argument pos:start="187:35" pos:end="187:39"><expr pos:start="187:35" pos:end="187:39"><name pos:start="187:35" pos:end="187:39">flags</name></expr></argument>, <argument pos:start="187:42" pos:end="187:51"><expr pos:start="187:42" pos:end="187:51"><operator pos:start="187:42" pos:end="187:42">&amp;</operator><name pos:start="187:43" pos:end="187:51">local_err</name></expr></argument>, <argument pos:start="187:54" pos:end="187:58"><expr pos:start="187:54" pos:end="187:58"><name pos:start="187:54" pos:end="187:58">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="195:9"><if pos:start="189:9" pos:end="195:9">if <condition pos:start="189:12" pos:end="189:37">(<expr pos:start="189:13" pos:end="189:36"><call pos:start="189:13" pos:end="189:36"><name pos:start="189:13" pos:end="189:24">error_is_set</name><argument_list pos:start="189:25" pos:end="189:36">(<argument pos:start="189:26" pos:end="189:35"><expr pos:start="189:26" pos:end="189:35"><operator pos:start="189:26" pos:end="189:26">&amp;</operator><name pos:start="189:27" pos:end="189:35">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:39" pos:end="195:9">{<block_content pos:start="191:13" pos:end="193:19">

            <expr_stmt pos:start="191:13" pos:end="191:45"><expr pos:start="191:13" pos:end="191:44"><call pos:start="191:13" pos:end="191:44"><name pos:start="191:13" pos:end="191:27">error_propagate</name><argument_list pos:start="191:28" pos:end="191:44">(<argument pos:start="191:29" pos:end="191:32"><expr pos:start="191:29" pos:end="191:32"><name pos:start="191:29" pos:end="191:32">errp</name></expr></argument>, <argument pos:start="191:35" pos:end="191:43"><expr pos:start="191:35" pos:end="191:43"><name pos:start="191:35" pos:end="191:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="193:13" pos:end="193:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="201:5" pos:end="209:5"><if pos:start="201:5" pos:end="209:5">if <condition pos:start="201:8" pos:end="201:31">(<expr pos:start="201:9" pos:end="201:30"><name pos:start="201:9" pos:end="201:30">has_snapshot_node_name</name></expr>)</condition> <block pos:start="201:33" pos:end="209:5">{<block_content pos:start="203:9" pos:end="207:56">

        <expr_stmt pos:start="203:9" pos:end="203:30"><expr pos:start="203:9" pos:end="203:29"><name pos:start="203:9" pos:end="203:15">options</name> <operator pos:start="203:17" pos:end="203:17">=</operator> <call pos:start="203:19" pos:end="203:29"><name pos:start="203:19" pos:end="203:27">qdict_new</name><argument_list pos:start="203:28" pos:end="203:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="207:56"><expr pos:start="205:9" pos:end="207:55"><call pos:start="205:9" pos:end="207:55"><name pos:start="205:9" pos:end="205:17">qdict_put</name><argument_list pos:start="205:18" pos:end="207:55">(<argument pos:start="205:19" pos:end="205:25"><expr pos:start="205:19" pos:end="205:25"><name pos:start="205:19" pos:end="205:25">options</name></expr></argument>, <argument pos:start="205:28" pos:end="205:38"><expr pos:start="205:28" pos:end="205:38"><literal type="string" pos:start="205:28" pos:end="205:38">"node-name"</literal></expr></argument>,

                  <argument pos:start="207:19" pos:end="207:54"><expr pos:start="207:19" pos:end="207:54"><call pos:start="207:19" pos:end="207:54"><name pos:start="207:19" pos:end="207:34">qstring_from_str</name><argument_list pos:start="207:35" pos:end="207:54">(<argument pos:start="207:36" pos:end="207:53"><expr pos:start="207:36" pos:end="207:53"><name pos:start="207:36" pos:end="207:53">snapshot_node_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="213:5" pos:end="213:67">/* We will manually add the backing_hd field to the bs later */</comment>

    <expr_stmt pos:start="215:5" pos:end="215:33"><expr pos:start="215:5" pos:end="215:32"><name pos:start="215:5" pos:end="215:17"><name pos:start="215:5" pos:end="215:9">state</name><operator pos:start="215:10" pos:end="215:11">-&gt;</operator><name pos:start="215:12" pos:end="215:17">new_bs</name></name> <operator pos:start="215:19" pos:end="215:19">=</operator> <call pos:start="215:21" pos:end="215:32"><name pos:start="215:21" pos:end="215:28">bdrv_new</name><argument_list pos:start="215:29" pos:end="215:32">(<argument pos:start="215:30" pos:end="215:31"><expr pos:start="215:30" pos:end="215:31"><literal type="string" pos:start="215:30" pos:end="215:31">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="217:5" pos:end="219:31">/* TODO Inherit bs-&gt;options or only take explicit options with an

     * extended QMP command? */</comment>

    <expr_stmt pos:start="221:5" pos:end="223:64"><expr pos:start="221:5" pos:end="223:63"><name pos:start="221:5" pos:end="221:7">ret</name> <operator pos:start="221:9" pos:end="221:9">=</operator> <call pos:start="221:11" pos:end="223:63"><name pos:start="221:11" pos:end="221:19">bdrv_open</name><argument_list pos:start="221:20" pos:end="223:63">(<argument pos:start="221:21" pos:end="221:33"><expr pos:start="221:21" pos:end="221:33"><name pos:start="221:21" pos:end="221:33"><name pos:start="221:21" pos:end="221:25">state</name><operator pos:start="221:26" pos:end="221:27">-&gt;</operator><name pos:start="221:28" pos:end="221:33">new_bs</name></name></expr></argument>, <argument pos:start="221:36" pos:end="221:49"><expr pos:start="221:36" pos:end="221:49"><name pos:start="221:36" pos:end="221:49">new_image_file</name></expr></argument>, <argument pos:start="221:52" pos:end="221:58"><expr pos:start="221:52" pos:end="221:58"><name pos:start="221:52" pos:end="221:58">options</name></expr></argument>,

                    <argument pos:start="223:21" pos:end="223:45"><expr pos:start="223:21" pos:end="223:45"><name pos:start="223:21" pos:end="223:25">flags</name> <operator pos:start="223:27" pos:end="223:27">|</operator> <name pos:start="223:29" pos:end="223:45">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="223:48" pos:end="223:50"><expr pos:start="223:48" pos:end="223:50"><name pos:start="223:48" pos:end="223:50">drv</name></expr></argument>, <argument pos:start="223:53" pos:end="223:62"><expr pos:start="223:53" pos:end="223:62"><operator pos:start="223:53" pos:end="223:53">&amp;</operator><name pos:start="223:54" pos:end="223:62">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="229:5"><if pos:start="225:5" pos:end="229:5">if <condition pos:start="225:8" pos:end="225:17">(<expr pos:start="225:9" pos:end="225:16"><name pos:start="225:9" pos:end="225:11">ret</name> <operator pos:start="225:13" pos:end="225:14">!=</operator> <literal type="number" pos:start="225:16" pos:end="225:16">0</literal></expr>)</condition> <block pos:start="225:19" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:41">

        <expr_stmt pos:start="227:9" pos:end="227:41"><expr pos:start="227:9" pos:end="227:40"><call pos:start="227:9" pos:end="227:40"><name pos:start="227:9" pos:end="227:23">error_propagate</name><argument_list pos:start="227:24" pos:end="227:40">(<argument pos:start="227:25" pos:end="227:28"><expr pos:start="227:25" pos:end="227:28"><name pos:start="227:25" pos:end="227:28">errp</name></expr></argument>, <argument pos:start="227:31" pos:end="227:39"><expr pos:start="227:31" pos:end="227:39"><name pos:start="227:31" pos:end="227:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="233:5" pos:end="233:21"><expr pos:start="233:5" pos:end="233:20"><call pos:start="233:5" pos:end="233:20"><name pos:start="233:5" pos:end="233:11">QDECREF</name><argument_list pos:start="233:12" pos:end="233:20">(<argument pos:start="233:13" pos:end="233:19"><expr pos:start="233:13" pos:end="233:19"><name pos:start="233:13" pos:end="233:19">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
