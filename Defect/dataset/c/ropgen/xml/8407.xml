<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8407.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">scsi_generic_initfn</name><parameter_list pos:start="1:31" pos:end="1:45">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:41">SCSIDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="139:1">{<block_content pos:start="5:5" pos:end="137:13">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">sg_version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:21">sg_scsi_id</name></name></type> <name pos:start="9:23" pos:end="9:28">scsiid</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:20">(<expr pos:start="13:9" pos:end="13:19"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:19"><name pos:start="13:10" pos:end="13:10">s</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:16">conf</name><operator pos:start="13:17" pos:end="13:17">.</operator><name pos:start="13:18" pos:end="13:19">bs</name></name></expr>)</condition> <block pos:start="13:22" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:47"><expr pos:start="15:9" pos:end="15:46"><call pos:start="15:9" pos:end="15:46"><name pos:start="15:9" pos:end="15:20">error_report</name><argument_list pos:start="15:21" pos:end="15:46">(<argument pos:start="15:22" pos:end="15:45"><expr pos:start="15:22" pos:end="15:45"><literal type="string" pos:start="15:22" pos:end="15:45">"drive property not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:69">(<expr pos:start="23:9" pos:end="23:68"><call pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:25">bdrv_get_on_error</name><argument_list pos:start="23:26" pos:end="23:40">(<argument pos:start="23:27" pos:end="23:36"><expr pos:start="23:27" pos:end="23:36"><name pos:start="23:27" pos:end="23:36"><name pos:start="23:27" pos:end="23:27">s</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:33">conf</name><operator pos:start="23:34" pos:end="23:34">.</operator><name pos:start="23:35" pos:end="23:36">bs</name></name></expr></argument>, <argument pos:start="23:39" pos:end="23:39"><expr pos:start="23:39" pos:end="23:39"><literal type="number" pos:start="23:39" pos:end="23:39">0</literal></expr></argument>)</argument_list></call> <operator pos:start="23:42" pos:end="23:43">!=</operator> <name pos:start="23:45" pos:end="23:68">BLOCKDEV_ON_ERROR_ENOSPC</name></expr>)</condition> <block pos:start="23:71" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <expr_stmt pos:start="25:9" pos:end="25:67"><expr pos:start="25:9" pos:end="25:66"><call pos:start="25:9" pos:end="25:66"><name pos:start="25:9" pos:end="25:20">error_report</name><argument_list pos:start="25:21" pos:end="25:66">(<argument pos:start="25:22" pos:end="25:65"><expr pos:start="25:22" pos:end="25:65"><literal type="string" pos:start="25:22" pos:end="25:65">"Device doesn't support drive option werror"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:69">(<expr pos:start="31:9" pos:end="31:68"><call pos:start="31:9" pos:end="31:40"><name pos:start="31:9" pos:end="31:25">bdrv_get_on_error</name><argument_list pos:start="31:26" pos:end="31:40">(<argument pos:start="31:27" pos:end="31:36"><expr pos:start="31:27" pos:end="31:36"><name pos:start="31:27" pos:end="31:36"><name pos:start="31:27" pos:end="31:27">s</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:33">conf</name><operator pos:start="31:34" pos:end="31:34">.</operator><name pos:start="31:35" pos:end="31:36">bs</name></name></expr></argument>, <argument pos:start="31:39" pos:end="31:39"><expr pos:start="31:39" pos:end="31:39"><literal type="number" pos:start="31:39" pos:end="31:39">1</literal></expr></argument>)</argument_list></call> <operator pos:start="31:42" pos:end="31:43">!=</operator> <name pos:start="31:45" pos:end="31:68">BLOCKDEV_ON_ERROR_REPORT</name></expr>)</condition> <block pos:start="31:71" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:18">

        <expr_stmt pos:start="33:9" pos:end="33:67"><expr pos:start="33:9" pos:end="33:66"><call pos:start="33:9" pos:end="33:66"><name pos:start="33:9" pos:end="33:20">error_report</name><argument_list pos:start="33:21" pos:end="33:66">(<argument pos:start="33:22" pos:end="33:65"><expr pos:start="33:22" pos:end="33:65"><literal type="string" pos:start="33:22" pos:end="33:65">"Device doesn't support drive option rerror"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:73">/* check we are using a driver managing SG_IO (version 3 and after */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:65"><expr pos:start="43:5" pos:end="43:64"><name pos:start="43:5" pos:end="43:6">rc</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <call pos:start="43:10" pos:end="43:64"><name pos:start="43:10" pos:end="43:19">bdrv_ioctl</name><argument_list pos:start="43:20" pos:end="43:64">(<argument pos:start="43:21" pos:end="43:30"><expr pos:start="43:21" pos:end="43:30"><name pos:start="43:21" pos:end="43:30"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:27">conf</name><operator pos:start="43:28" pos:end="43:28">.</operator><name pos:start="43:29" pos:end="43:30">bs</name></name></expr></argument>, <argument pos:start="43:33" pos:end="43:50"><expr pos:start="43:33" pos:end="43:50"><name pos:start="43:33" pos:end="43:50">SG_GET_VERSION_NUM</name></expr></argument>, <argument pos:start="43:53" pos:end="43:63"><expr pos:start="43:53" pos:end="43:63"><operator pos:start="43:53" pos:end="43:53">&amp;</operator><name pos:start="43:54" pos:end="43:63">sg_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="55:5"><if pos:start="45:5" pos:end="55:5">if <condition pos:start="45:8" pos:end="45:15">(<expr pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:10">rc</name> <operator pos:start="45:12" pos:end="45:12">&lt;</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>)</condition> <block pos:start="45:17" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:18">

        <expr_stmt pos:start="47:9" pos:end="51:36"><expr pos:start="47:9" pos:end="51:35"><call pos:start="47:9" pos:end="51:35"><name pos:start="47:9" pos:end="47:20">error_report</name><argument_list pos:start="47:21" pos:end="51:35">(<argument pos:start="47:22" pos:end="49:45"><expr pos:start="47:22" pos:end="49:45"><literal type="string" pos:start="47:22" pos:end="47:61">"cannot get SG_IO version number: %s.  "</literal>

                     <literal type="string" pos:start="49:22" pos:end="49:45">"Is this a SCSI device?"</literal></expr></argument>,

                     <argument pos:start="51:22" pos:end="51:34"><expr pos:start="51:22" pos:end="51:34"><call pos:start="51:22" pos:end="51:34"><name pos:start="51:22" pos:end="51:29">strerror</name><argument_list pos:start="51:30" pos:end="51:34">(<argument pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><operator pos:start="51:31" pos:end="51:31">-</operator><name pos:start="51:32" pos:end="51:33">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:27">(<expr pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:18">sg_version</name> <operator pos:start="57:20" pos:end="57:20">&lt;</operator> <literal type="number" pos:start="57:22" pos:end="57:26">30000</literal></expr>)</condition> <block pos:start="57:29" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:18">

        <expr_stmt pos:start="59:9" pos:end="59:55"><expr pos:start="59:9" pos:end="59:54"><call pos:start="59:9" pos:end="59:54"><name pos:start="59:9" pos:end="59:20">error_report</name><argument_list pos:start="59:21" pos:end="59:54">(<argument pos:start="59:22" pos:end="59:53"><expr pos:start="59:22" pos:end="59:53"><literal type="string" pos:start="59:22" pos:end="59:53">"scsi generic interface too old"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:18">return <expr pos:start="61:16" pos:end="61:17"><operator pos:start="61:16" pos:end="61:16">-</operator><literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:33">/* get LUN of the /dev/sg? */</comment>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:56">(<expr pos:start="69:9" pos:end="69:55"><call pos:start="69:9" pos:end="69:55"><name pos:start="69:9" pos:end="69:18">bdrv_ioctl</name><argument_list pos:start="69:19" pos:end="69:55">(<argument pos:start="69:20" pos:end="69:29"><expr pos:start="69:20" pos:end="69:29"><name pos:start="69:20" pos:end="69:29"><name pos:start="69:20" pos:end="69:20">s</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:26">conf</name><operator pos:start="69:27" pos:end="69:27">.</operator><name pos:start="69:28" pos:end="69:29">bs</name></name></expr></argument>, <argument pos:start="69:32" pos:end="69:45"><expr pos:start="69:32" pos:end="69:45"><name pos:start="69:32" pos:end="69:45">SG_GET_SCSI_ID</name></expr></argument>, <argument pos:start="69:48" pos:end="69:54"><expr pos:start="69:48" pos:end="69:54"><operator pos:start="69:48" pos:end="69:48">&amp;</operator><name pos:start="69:49" pos:end="69:54">scsiid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:58" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:18">

        <expr_stmt pos:start="71:9" pos:end="71:52"><expr pos:start="71:9" pos:end="71:51"><call pos:start="71:9" pos:end="71:51"><name pos:start="71:9" pos:end="71:20">error_report</name><argument_list pos:start="71:21" pos:end="71:51">(<argument pos:start="71:22" pos:end="71:50"><expr pos:start="71:22" pos:end="71:50"><literal type="string" pos:start="71:22" pos:end="71:50">"SG_GET_SCSI_ID ioctl failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:18">return <expr pos:start="73:16" pos:end="73:17"><operator pos:start="73:16" pos:end="73:16">-</operator><literal type="number" pos:start="73:17" pos:end="73:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:29">/* define device state */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:31"><expr pos:start="81:5" pos:end="81:30"><name pos:start="81:5" pos:end="81:11"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:11">type</name></name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:30"><name pos:start="81:15" pos:end="81:20">scsiid</name><operator pos:start="81:21" pos:end="81:21">.</operator><name pos:start="81:22" pos:end="81:30">scsi_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:41"><expr pos:start="83:5" pos:end="83:40"><call pos:start="83:5" pos:end="83:40"><name pos:start="83:5" pos:end="83:11">DPRINTF</name><argument_list pos:start="83:12" pos:end="83:40">(<argument pos:start="83:13" pos:end="83:30"><expr pos:start="83:13" pos:end="83:30"><literal type="string" pos:start="83:13" pos:end="83:30">"device type %d\n"</literal></expr></argument>, <argument pos:start="83:33" pos:end="83:39"><expr pos:start="83:33" pos:end="83:39"><name pos:start="83:33" pos:end="83:39"><name pos:start="83:33" pos:end="83:33">s</name><operator pos:start="83:34" pos:end="83:35">-&gt;</operator><name pos:start="83:36" pos:end="83:39">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:52">(<expr pos:start="85:9" pos:end="85:51"><name pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:15">type</name></name> <operator pos:start="85:17" pos:end="85:18">==</operator> <name pos:start="85:20" pos:end="85:28">TYPE_DISK</name> <operator pos:start="85:30" pos:end="85:31">||</operator> <name pos:start="85:33" pos:end="85:39"><name pos:start="85:33" pos:end="85:33">s</name><operator pos:start="85:34" pos:end="85:35">-&gt;</operator><name pos:start="85:36" pos:end="85:39">type</name></name> <operator pos:start="85:41" pos:end="85:42">==</operator> <name pos:start="85:44" pos:end="85:51">TYPE_ROM</name></expr>)</condition> <block pos:start="85:54" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:64">

        <expr_stmt pos:start="87:9" pos:end="87:64"><expr pos:start="87:9" pos:end="87:63"><call pos:start="87:9" pos:end="87:63"><name pos:start="87:9" pos:end="87:28">add_boot_device_path</name><argument_list pos:start="87:29" pos:end="87:63">(<argument pos:start="87:30" pos:end="87:46"><expr pos:start="87:30" pos:end="87:46"><name pos:start="87:30" pos:end="87:46"><name pos:start="87:30" pos:end="87:30">s</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:36">conf</name><operator pos:start="87:37" pos:end="87:37">.</operator><name pos:start="87:38" pos:end="87:46">bootindex</name></name></expr></argument>, <argument pos:start="87:49" pos:end="87:56"><expr pos:start="87:49" pos:end="87:56"><operator pos:start="87:49" pos:end="87:49">&amp;</operator><name pos:start="87:50" pos:end="87:56"><name pos:start="87:50" pos:end="87:50">s</name><operator pos:start="87:51" pos:end="87:52">-&gt;</operator><name pos:start="87:53" pos:end="87:56">qdev</name></name></expr></argument>, <argument pos:start="87:59" pos:end="87:62"><expr pos:start="87:59" pos:end="87:62"><name pos:start="87:59" pos:end="87:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="93:5" pos:end="131:5">switch <condition pos:start="93:12" pos:end="93:20">(<expr pos:start="93:13" pos:end="93:19"><name pos:start="93:13" pos:end="93:19"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:19">type</name></name></expr>)</condition> <block pos:start="93:22" pos:end="131:5">{<block_content pos:start="95:5" pos:end="129:14">

    <case pos:start="95:5" pos:end="95:19">case <expr pos:start="95:10" pos:end="95:18"><name pos:start="95:10" pos:end="95:18">TYPE_TAPE</name></expr>:</case>

        <expr_stmt pos:start="97:9" pos:end="97:56"><expr pos:start="97:9" pos:end="97:55"><name pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:20">blocksize</name></name> <operator pos:start="97:22" pos:end="97:22">=</operator> <call pos:start="97:24" pos:end="97:55"><name pos:start="97:24" pos:end="97:43">get_stream_blocksize</name><argument_list pos:start="97:44" pos:end="97:55">(<argument pos:start="97:45" pos:end="97:54"><expr pos:start="97:45" pos:end="97:54"><name pos:start="97:45" pos:end="97:54"><name pos:start="97:45" pos:end="97:45">s</name><operator pos:start="97:46" pos:end="97:47">-&gt;</operator><name pos:start="97:48" pos:end="97:51">conf</name><operator pos:start="97:52" pos:end="97:52">.</operator><name pos:start="97:53" pos:end="97:54">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:31">(<expr pos:start="99:13" pos:end="99:30"><name pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:13">s</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:24">blocksize</name></name> <operator pos:start="99:26" pos:end="99:27">==</operator> <operator pos:start="99:29" pos:end="99:29">-</operator><literal type="number" pos:start="99:30" pos:end="99:30">1</literal></expr>)</condition> <block pos:start="99:33" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:29">

            <expr_stmt pos:start="101:13" pos:end="101:29"><expr pos:start="101:13" pos:end="101:28"><name pos:start="101:13" pos:end="101:24"><name pos:start="101:13" pos:end="101:13">s</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:24">blocksize</name></name> <operator pos:start="101:26" pos:end="101:26">=</operator> <literal type="number" pos:start="101:28" pos:end="101:28">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>



        <comment type="block" pos:start="109:9" pos:end="115:11">/* Make a guess for block devices, we'll fix it when the guest sends.

         * READ CAPACITY.  If they don't, they likely would assume these sizes

         * anyway. (TODO: they could also send MODE SENSE).

         */</comment>

    <case pos:start="117:5" pos:end="117:18">case <expr pos:start="117:10" pos:end="117:17"><name pos:start="117:10" pos:end="117:17">TYPE_ROM</name></expr>:</case>

    <case pos:start="119:5" pos:end="119:19">case <expr pos:start="119:10" pos:end="119:18"><name pos:start="119:10" pos:end="119:18">TYPE_WORM</name></expr>:</case>

        <expr_stmt pos:start="121:9" pos:end="121:28"><expr pos:start="121:9" pos:end="121:27"><name pos:start="121:9" pos:end="121:20"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:20">blocksize</name></name> <operator pos:start="121:22" pos:end="121:22">=</operator> <literal type="number" pos:start="121:24" pos:end="121:27">2048</literal></expr>;</expr_stmt>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    <default pos:start="125:5" pos:end="125:12">default:</default>

        <expr_stmt pos:start="127:9" pos:end="127:27"><expr pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:20"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:20">blocksize</name></name> <operator pos:start="127:22" pos:end="127:22">=</operator> <literal type="number" pos:start="127:24" pos:end="127:26">512</literal></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="135:5" pos:end="135:45"><expr pos:start="135:5" pos:end="135:44"><call pos:start="135:5" pos:end="135:44"><name pos:start="135:5" pos:end="135:11">DPRINTF</name><argument_list pos:start="135:12" pos:end="135:44">(<argument pos:start="135:13" pos:end="135:29"><expr pos:start="135:13" pos:end="135:29"><literal type="string" pos:start="135:13" pos:end="135:29">"block size %d\n"</literal></expr></argument>, <argument pos:start="135:32" pos:end="135:43"><expr pos:start="135:32" pos:end="135:43"><name pos:start="135:32" pos:end="135:43"><name pos:start="135:32" pos:end="135:32">s</name><operator pos:start="135:33" pos:end="135:34">-&gt;</operator><name pos:start="135:35" pos:end="135:43">blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="137:5" pos:end="137:13">return <expr pos:start="137:12" pos:end="137:12"><literal type="number" pos:start="137:12" pos:end="137:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
