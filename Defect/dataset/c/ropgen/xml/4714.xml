<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4714.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vfio_add_ext_cap</name><parameter_list pos:start="1:28" pos:end="1:48">(<parameter pos:start="1:29" pos:end="1:47"><decl pos:start="1:29" pos:end="1:47"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:41">VFIOPCIDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">vdev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:13">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">pdev</name> <init pos:start="5:21" pos:end="5:33">= <expr pos:start="5:23" pos:end="5:33"><operator pos:start="5:23" pos:end="5:23">&amp;</operator><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:27">vdev</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:33">pdev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:19">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:19">cap_id</name></decl>, <decl pos:start="9:22" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:22" pos:end="9:25">next</name></decl>, <decl pos:start="9:28" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:28" pos:end="9:31">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:19">cap_ver</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">config</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="27:7">/*

     * pcie_add_capability always inserts the new capability at the tail

     * of the chain.  Therefore to end up with a chain that matches the

     * physical device, we cache the config space to avoid overwriting

     * the original config space when we parse the extended capabilities.

     */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:55"><expr pos:start="29:5" pos:end="29:54"><name pos:start="29:5" pos:end="29:10">config</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <call pos:start="29:14" pos:end="29:54"><name pos:start="29:14" pos:end="29:21">g_memdup</name><argument_list pos:start="29:22" pos:end="29:54">(<argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:26">pdev</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:34">config</name></name></expr></argument>, <argument pos:start="29:37" pos:end="29:53"><expr pos:start="29:37" pos:end="29:53"><name pos:start="29:37" pos:end="29:53"><name pos:start="29:37" pos:end="29:40">vdev</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:53">config_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="33:5" pos:end="73:5">for <control pos:start="33:9" pos:end="35:62">(<init pos:start="33:10" pos:end="33:38"><expr pos:start="33:10" pos:end="33:37"><name pos:start="33:10" pos:end="33:13">next</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:37">PCI_CONFIG_SPACE_SIZE</name></expr>;</init> <condition pos:start="33:40" pos:end="33:44"><expr pos:start="33:40" pos:end="33:43"><name pos:start="33:40" pos:end="33:43">next</name></expr>;</condition>

         <incr pos:start="35:10" pos:end="35:61"><expr pos:start="35:10" pos:end="35:61"><name pos:start="35:10" pos:end="35:13">next</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <call pos:start="35:17" pos:end="35:61"><name pos:start="35:17" pos:end="35:32">PCI_EXT_CAP_NEXT</name><argument_list pos:start="35:33" pos:end="35:61">(<argument pos:start="35:34" pos:end="35:60"><expr pos:start="35:34" pos:end="35:60"><call pos:start="35:34" pos:end="35:60"><name pos:start="35:34" pos:end="35:45">pci_get_long</name><argument_list pos:start="35:46" pos:end="35:60">(<argument pos:start="35:47" pos:end="35:59"><expr pos:start="35:47" pos:end="35:59"><name pos:start="35:47" pos:end="35:52">config</name> <operator pos:start="35:54" pos:end="35:54">+</operator> <name pos:start="35:56" pos:end="35:59">next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="35:64" pos:end="73:5">{<block_content pos:start="37:9" pos:end="71:58">

        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:14">header</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <call pos:start="37:18" pos:end="37:44"><name pos:start="37:18" pos:end="37:29">pci_get_long</name><argument_list pos:start="37:30" pos:end="37:44">(<argument pos:start="37:31" pos:end="37:43"><expr pos:start="37:31" pos:end="37:43"><name pos:start="37:31" pos:end="37:36">config</name> <operator pos:start="37:38" pos:end="37:38">+</operator> <name pos:start="37:40" pos:end="37:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:40"><expr pos:start="39:9" pos:end="39:39"><name pos:start="39:9" pos:end="39:14">cap_id</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:39"><name pos:start="39:18" pos:end="39:31">PCI_EXT_CAP_ID</name><argument_list pos:start="39:32" pos:end="39:39">(<argument pos:start="39:33" pos:end="39:38"><expr pos:start="39:33" pos:end="39:38"><name pos:start="39:33" pos:end="39:38">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:42"><expr pos:start="41:9" pos:end="41:41"><name pos:start="41:9" pos:end="41:15">cap_ver</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:41"><name pos:start="41:19" pos:end="41:33">PCI_EXT_CAP_VER</name><argument_list pos:start="41:34" pos:end="41:41">(<argument pos:start="41:35" pos:end="41:40"><expr pos:start="41:35" pos:end="41:40"><name pos:start="41:35" pos:end="41:40">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="45:9" pos:end="55:11">/*

         * If it becomes important to configure extended capabilities to their

         * actual size, use this as the default when it's something we don't

         * recognize. Since QEMU doesn't actually handle many of the config

         * accesses, exact size doesn't seem worthwhile.

         */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:51"><expr pos:start="57:9" pos:end="57:50"><name pos:start="57:9" pos:end="57:12">size</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <call pos:start="57:16" pos:end="57:50"><name pos:start="57:16" pos:end="57:36">vfio_ext_cap_max_size</name><argument_list pos:start="57:37" pos:end="57:50">(<argument pos:start="57:38" pos:end="57:43"><expr pos:start="57:38" pos:end="57:43"><name pos:start="57:38" pos:end="57:43">config</name></expr></argument>, <argument pos:start="57:46" pos:end="57:49"><expr pos:start="57:46" pos:end="57:49"><name pos:start="57:46" pos:end="57:49">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:63"><expr pos:start="61:9" pos:end="61:62"><call pos:start="61:9" pos:end="61:62"><name pos:start="61:9" pos:end="61:27">pcie_add_capability</name><argument_list pos:start="61:28" pos:end="61:62">(<argument pos:start="61:29" pos:end="61:32"><expr pos:start="61:29" pos:end="61:32"><name pos:start="61:29" pos:end="61:32">pdev</name></expr></argument>, <argument pos:start="61:35" pos:end="61:40"><expr pos:start="61:35" pos:end="61:40"><name pos:start="61:35" pos:end="61:40">cap_id</name></expr></argument>, <argument pos:start="61:43" pos:end="61:49"><expr pos:start="61:43" pos:end="61:49"><name pos:start="61:43" pos:end="61:49">cap_ver</name></expr></argument>, <argument pos:start="61:52" pos:end="61:55"><expr pos:start="61:52" pos:end="61:55"><name pos:start="61:52" pos:end="61:55">next</name></expr></argument>, <argument pos:start="61:58" pos:end="61:61"><expr pos:start="61:58" pos:end="61:61"><name pos:start="61:58" pos:end="61:61">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:75"><expr pos:start="63:9" pos:end="63:74"><call pos:start="63:9" pos:end="63:74"><name pos:start="63:9" pos:end="63:20">pci_set_long</name><argument_list pos:start="63:21" pos:end="63:74">(<argument pos:start="63:22" pos:end="63:40"><expr pos:start="63:22" pos:end="63:40"><name pos:start="63:22" pos:end="63:33"><name pos:start="63:22" pos:end="63:25">pdev</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:33">config</name></name> <operator pos:start="63:35" pos:end="63:35">+</operator> <name pos:start="63:37" pos:end="63:40">next</name></expr></argument>, <argument pos:start="63:43" pos:end="63:73"><expr pos:start="63:43" pos:end="63:73"><call pos:start="63:43" pos:end="63:73"><name pos:start="63:43" pos:end="63:53">PCI_EXT_CAP</name><argument_list pos:start="63:54" pos:end="63:73">(<argument pos:start="63:55" pos:end="63:60"><expr pos:start="63:55" pos:end="63:60"><name pos:start="63:55" pos:end="63:60">cap_id</name></expr></argument>, <argument pos:start="63:63" pos:end="63:69"><expr pos:start="63:63" pos:end="63:69"><name pos:start="63:63" pos:end="63:69">cap_ver</name></expr></argument>, <argument pos:start="63:72" pos:end="63:72"><expr pos:start="63:72" pos:end="63:72"><literal type="number" pos:start="63:72" pos:end="63:72">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="67:9" pos:end="67:71">/* Use emulated next pointer to allow dropping extended caps */</comment>

        <expr_stmt pos:start="69:9" pos:end="71:58"><expr pos:start="69:9" pos:end="71:57"><call pos:start="69:9" pos:end="71:57"><name pos:start="69:9" pos:end="69:34">pci_long_test_and_set_mask</name><argument_list pos:start="69:35" pos:end="71:57">(<argument pos:start="69:36" pos:end="69:68"><expr pos:start="69:36" pos:end="69:68"><name pos:start="69:36" pos:end="69:61"><name pos:start="69:36" pos:end="69:39">vdev</name><operator pos:start="69:40" pos:end="69:41">-&gt;</operator><name pos:start="69:42" pos:end="69:61">emulated_config_bits</name></name> <operator pos:start="69:63" pos:end="69:63">+</operator> <name pos:start="69:65" pos:end="69:68">next</name></expr></argument>,

                                   <argument pos:start="71:36" pos:end="71:56"><expr pos:start="71:36" pos:end="71:56"><name pos:start="71:36" pos:end="71:56">PCI_EXT_CAP_NEXT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="77:5" pos:end="77:19"><expr pos:start="77:5" pos:end="77:18"><call pos:start="77:5" pos:end="77:18"><name pos:start="77:5" pos:end="77:10">g_free</name><argument_list pos:start="77:11" pos:end="77:18">(<argument pos:start="77:12" pos:end="77:17"><expr pos:start="77:12" pos:end="77:17"><name pos:start="77:12" pos:end="77:17">config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
