<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24535.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:24">qmp_change_blockdev</name><parameter_list pos:start="1:25" pos:end="3:58">(<parameter pos:start="1:26" pos:end="1:43"><decl pos:start="1:26" pos:end="1:43"><type pos:start="1:26" pos:end="1:43"><specifier pos:start="1:26" pos:end="1:30">const</specifier> <name pos:start="1:32" pos:end="1:35">char</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">device</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:55">char</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:65">filename</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:43"><decl pos:start="3:26" pos:end="3:43"><type pos:start="3:26" pos:end="3:43"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:35">char</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:43">format</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:57"><decl pos:start="3:46" pos:end="3:57"><type pos:start="3:46" pos:end="3:57"><name pos:start="3:46" pos:end="3:50">Error</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier><modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:57">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="67:71">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BlockBackend</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">BlockDriver</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">drv</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">bdrv_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:14">err</name> <init pos:start="15:16" pos:end="15:21">= <expr pos:start="15:18" pos:end="15:21"><name pos:start="15:18" pos:end="15:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:7">blk</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:29"><name pos:start="19:11" pos:end="19:21">blk_by_name</name><argument_list pos:start="19:22" pos:end="19:29">(<argument pos:start="19:23" pos:end="19:28"><expr pos:start="19:23" pos:end="19:28"><name pos:start="19:23" pos:end="19:28">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">blk</name></expr>)</condition> <block pos:start="21:15" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:55"><expr pos:start="23:9" pos:end="23:54"><call pos:start="23:9" pos:end="23:54"><name pos:start="23:9" pos:end="23:17">error_set</name><argument_list pos:start="23:18" pos:end="23:54">(<argument pos:start="23:19" pos:end="23:22"><expr pos:start="23:19" pos:end="23:22"><name pos:start="23:19" pos:end="23:22">errp</name></expr></argument>, <argument pos:start="23:25" pos:end="23:45"><expr pos:start="23:25" pos:end="23:45"><name pos:start="23:25" pos:end="23:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="23:48" pos:end="23:53"><expr pos:start="23:48" pos:end="23:53"><name pos:start="23:48" pos:end="23:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:6">bs</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:20"><name pos:start="29:10" pos:end="29:15">blk_bs</name><argument_list pos:start="29:16" pos:end="29:20">(<argument pos:start="29:17" pos:end="29:19"><expr pos:start="29:17" pos:end="29:19"><name pos:start="29:17" pos:end="29:19">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="45:5"><if pos:start="33:5" pos:end="45:5">if <condition pos:start="33:8" pos:end="33:15">(<expr pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:14">format</name></expr>)</condition> <block pos:start="33:17" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:9">

        <expr_stmt pos:start="35:9" pos:end="35:66"><expr pos:start="35:9" pos:end="35:65"><name pos:start="35:9" pos:end="35:11">drv</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:65"><name pos:start="35:15" pos:end="35:42">bdrv_find_whitelisted_format</name><argument_list pos:start="35:43" pos:end="35:65">(<argument pos:start="35:44" pos:end="35:49"><expr pos:start="35:44" pos:end="35:49"><name pos:start="35:44" pos:end="35:49">format</name></expr></argument>, <argument pos:start="35:52" pos:end="35:64"><expr pos:start="35:52" pos:end="35:64"><name pos:start="35:52" pos:end="35:64"><name pos:start="35:52" pos:end="35:53">bs</name><operator pos:start="35:54" pos:end="35:55">-&gt;</operator><name pos:start="35:56" pos:end="35:64">read_only</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:17">(<expr pos:start="37:13" pos:end="37:16"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:16">drv</name></expr>)</condition> <block pos:start="37:19" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:19">

            <expr_stmt pos:start="39:13" pos:end="39:63"><expr pos:start="39:13" pos:end="39:62"><call pos:start="39:13" pos:end="39:62"><name pos:start="39:13" pos:end="39:21">error_set</name><argument_list pos:start="39:22" pos:end="39:62">(<argument pos:start="39:23" pos:end="39:26"><expr pos:start="39:23" pos:end="39:26"><name pos:start="39:23" pos:end="39:26">errp</name></expr></argument>, <argument pos:start="39:29" pos:end="39:53"><expr pos:start="39:29" pos:end="39:53"><name pos:start="39:29" pos:end="39:53">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="39:56" pos:end="39:61"><expr pos:start="39:56" pos:end="39:61"><name pos:start="39:56" pos:end="39:61">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:31"><expr pos:start="49:5" pos:end="49:30"><call pos:start="49:5" pos:end="49:30"><name pos:start="49:5" pos:end="49:16">eject_device</name><argument_list pos:start="49:17" pos:end="49:30">(<argument pos:start="49:18" pos:end="49:20"><expr pos:start="49:18" pos:end="49:20"><name pos:start="49:18" pos:end="49:20">blk</name></expr></argument>, <argument pos:start="49:23" pos:end="49:23"><expr pos:start="49:23" pos:end="49:23"><literal type="number" pos:start="49:23" pos:end="49:23">0</literal></expr></argument>, <argument pos:start="49:26" pos:end="49:29"><expr pos:start="49:26" pos:end="49:29"><operator pos:start="49:26" pos:end="49:26">&amp;</operator><name pos:start="49:27" pos:end="49:29">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:12">(<expr pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">err</name></expr>)</condition> <block pos:start="51:14" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:15">

        <expr_stmt pos:start="53:9" pos:end="53:35"><expr pos:start="53:9" pos:end="53:34"><call pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:23">error_propagate</name><argument_list pos:start="53:24" pos:end="53:34">(<argument pos:start="53:25" pos:end="53:28"><expr pos:start="53:25" pos:end="53:28"><name pos:start="53:25" pos:end="53:28">errp</name></expr></argument>, <argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><name pos:start="53:31" pos:end="53:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:57"><expr pos:start="61:5" pos:end="61:56"><name pos:start="61:5" pos:end="61:14">bdrv_flags</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <ternary pos:start="61:18" pos:end="61:56"><condition pos:start="61:18" pos:end="61:40"><expr pos:start="61:18" pos:end="61:38"><call pos:start="61:18" pos:end="61:38"><name pos:start="61:18" pos:end="61:34">bdrv_is_read_only</name><argument_list pos:start="61:35" pos:end="61:38">(<argument pos:start="61:36" pos:end="61:37"><expr pos:start="61:36" pos:end="61:37"><name pos:start="61:36" pos:end="61:37">bs</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="61:42" pos:end="61:42"> <expr pos:start="61:42" pos:end="61:42"><literal type="number" pos:start="61:42" pos:end="61:42">0</literal></expr> </then><else pos:start="61:44" pos:end="61:56">: <expr pos:start="61:46" pos:end="61:56"><name pos:start="61:46" pos:end="61:56">BDRV_O_RDWR</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:61"><expr pos:start="63:5" pos:end="63:60"><name pos:start="63:5" pos:end="63:14">bdrv_flags</name> <operator pos:start="63:16" pos:end="63:17">|=</operator> <ternary pos:start="63:19" pos:end="63:60"><condition pos:start="63:19" pos:end="63:40"><expr pos:start="63:19" pos:end="63:38"><call pos:start="63:19" pos:end="63:38"><name pos:start="63:19" pos:end="63:34">bdrv_is_snapshot</name><argument_list pos:start="63:35" pos:end="63:38">(<argument pos:start="63:36" pos:end="63:37"><expr pos:start="63:36" pos:end="63:37"><name pos:start="63:36" pos:end="63:37">bs</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="63:42" pos:end="63:56"> <expr pos:start="63:42" pos:end="63:56"><name pos:start="63:42" pos:end="63:56">BDRV_O_SNAPSHOT</name></expr> </then><else pos:start="63:58" pos:end="63:60">: <expr pos:start="63:60" pos:end="63:60"><literal type="number" pos:start="63:60" pos:end="63:60">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:71"><expr pos:start="67:5" pos:end="67:70"><call pos:start="67:5" pos:end="67:70"><name pos:start="67:5" pos:end="67:27">qmp_bdrv_open_encrypted</name><argument_list pos:start="67:28" pos:end="67:70">(<argument pos:start="67:29" pos:end="67:30"><expr pos:start="67:29" pos:end="67:30"><name pos:start="67:29" pos:end="67:30">bs</name></expr></argument>, <argument pos:start="67:33" pos:end="67:40"><expr pos:start="67:33" pos:end="67:40"><name pos:start="67:33" pos:end="67:40">filename</name></expr></argument>, <argument pos:start="67:43" pos:end="67:52"><expr pos:start="67:43" pos:end="67:52"><name pos:start="67:43" pos:end="67:52">bdrv_flags</name></expr></argument>, <argument pos:start="67:55" pos:end="67:57"><expr pos:start="67:55" pos:end="67:57"><name pos:start="67:55" pos:end="67:57">drv</name></expr></argument>, <argument pos:start="67:60" pos:end="67:63"><expr pos:start="67:60" pos:end="67:63"><name pos:start="67:60" pos:end="67:63">NULL</name></expr></argument>, <argument pos:start="67:66" pos:end="67:69"><expr pos:start="67:66" pos:end="67:69"><name pos:start="67:66" pos:end="67:69">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
