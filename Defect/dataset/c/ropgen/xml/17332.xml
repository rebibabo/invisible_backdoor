<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17332.c" pos:tabs="8"><function pos:start="1:1" pos:end="118:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">kvm_cpu_fill_host</name><parameter_list pos:start="1:30" pos:end="1:53">(<parameter pos:start="1:31" pos:end="1:52"><decl pos:start="1:31" pos:end="1:52"><type pos:start="1:31" pos:end="1:41"><name pos:start="1:31" pos:end="1:39">x86_def_t</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:52">x86_cpu_def</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="118:1">{<block_content pos:start="7:5" pos:end="117:0">

<cpp:ifdef pos:start="5:1" pos:end="5:17">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:17">CONFIG_KVM</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">KVMState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:27">= <expr pos:start="7:19" pos:end="7:27"><name pos:start="7:19" pos:end="7:27">kvm_state</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">eax</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>, <decl pos:start="9:23" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:23" pos:end="9:25">ebx</name> <init pos:start="9:27" pos:end="9:29">= <expr pos:start="9:29" pos:end="9:29"><literal type="number" pos:start="9:29" pos:end="9:29">0</literal></expr></init></decl>, <decl pos:start="9:32" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:32" pos:end="9:34">ecx</name> <init pos:start="9:36" pos:end="9:38">= <expr pos:start="9:38" pos:end="9:38"><literal type="number" pos:start="9:38" pos:end="9:38">0</literal></expr></init></decl>, <decl pos:start="9:41" pos:end="9:47"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:41" pos:end="9:43">edx</name> <init pos:start="9:45" pos:end="9:47">= <expr pos:start="9:47" pos:end="9:47"><literal type="number" pos:start="9:47" pos:end="9:47">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:26"><expr pos:start="13:5" pos:end="13:25"><call pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:25">(<argument pos:start="13:12" pos:end="13:24"><expr pos:start="13:12" pos:end="13:24"><call pos:start="13:12" pos:end="13:24"><name pos:start="13:12" pos:end="13:22">kvm_enabled</name><argument_list pos:start="13:23" pos:end="13:24">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:15">x86_cpu_def</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:21">name</name></name> <operator pos:start="17:23" pos:end="17:23">=</operator> <literal type="string" pos:start="17:25" pos:end="17:30">"host"</literal></expr>;</expr_stmt>


    <expr_stmt pos:start="20:5" pos:end="20:47"><expr pos:start="20:5" pos:end="20:46"><call pos:start="20:5" pos:end="20:46"><name pos:start="20:5" pos:end="20:14">host_cpuid</name><argument_list pos:start="20:15" pos:end="20:46">(<argument pos:start="20:16" pos:end="20:18"><expr pos:start="20:16" pos:end="20:18"><literal type="number" pos:start="20:16" pos:end="20:18">0x0</literal></expr></argument>, <argument pos:start="20:21" pos:end="20:21"><expr pos:start="20:21" pos:end="20:21"><literal type="number" pos:start="20:21" pos:end="20:21">0</literal></expr></argument>, <argument pos:start="20:24" pos:end="20:27"><expr pos:start="20:24" pos:end="20:27"><operator pos:start="20:24" pos:end="20:24">&amp;</operator><name pos:start="20:25" pos:end="20:27">eax</name></expr></argument>, <argument pos:start="20:30" pos:end="20:33"><expr pos:start="20:30" pos:end="20:33"><operator pos:start="20:30" pos:end="20:30">&amp;</operator><name pos:start="20:31" pos:end="20:33">ebx</name></expr></argument>, <argument pos:start="20:36" pos:end="20:39"><expr pos:start="20:36" pos:end="20:39"><operator pos:start="20:36" pos:end="20:36">&amp;</operator><name pos:start="20:37" pos:end="20:39">ecx</name></expr></argument>, <argument pos:start="20:42" pos:end="20:45"><expr pos:start="20:42" pos:end="20:45"><operator pos:start="20:42" pos:end="20:42">&amp;</operator><name pos:start="20:43" pos:end="20:45">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="22:5" pos:end="22:65"><expr pos:start="22:5" pos:end="22:64"><call pos:start="22:5" pos:end="22:64"><name pos:start="22:5" pos:end="22:28">x86_cpu_vendor_words2str</name><argument_list pos:start="22:29" pos:end="22:64">(<argument pos:start="22:30" pos:end="22:48"><expr pos:start="22:30" pos:end="22:48"><name pos:start="22:30" pos:end="22:48"><name pos:start="22:30" pos:end="22:40">x86_cpu_def</name><operator pos:start="22:41" pos:end="22:42">-&gt;</operator><name pos:start="22:43" pos:end="22:48">vendor</name></name></expr></argument>, <argument pos:start="22:51" pos:end="22:53"><expr pos:start="22:51" pos:end="22:53"><name pos:start="22:51" pos:end="22:53">ebx</name></expr></argument>, <argument pos:start="22:56" pos:end="22:58"><expr pos:start="22:56" pos:end="22:58"><name pos:start="22:56" pos:end="22:58">edx</name></expr></argument>, <argument pos:start="22:61" pos:end="22:63"><expr pos:start="22:61" pos:end="22:63"><name pos:start="22:61" pos:end="22:63">ecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="26:5" pos:end="26:47"><expr pos:start="26:5" pos:end="26:46"><call pos:start="26:5" pos:end="26:46"><name pos:start="26:5" pos:end="26:14">host_cpuid</name><argument_list pos:start="26:15" pos:end="26:46">(<argument pos:start="26:16" pos:end="26:18"><expr pos:start="26:16" pos:end="26:18"><literal type="number" pos:start="26:16" pos:end="26:18">0x1</literal></expr></argument>, <argument pos:start="26:21" pos:end="26:21"><expr pos:start="26:21" pos:end="26:21"><literal type="number" pos:start="26:21" pos:end="26:21">0</literal></expr></argument>, <argument pos:start="26:24" pos:end="26:27"><expr pos:start="26:24" pos:end="26:27"><operator pos:start="26:24" pos:end="26:24">&amp;</operator><name pos:start="26:25" pos:end="26:27">eax</name></expr></argument>, <argument pos:start="26:30" pos:end="26:33"><expr pos:start="26:30" pos:end="26:33"><operator pos:start="26:30" pos:end="26:30">&amp;</operator><name pos:start="26:31" pos:end="26:33">ebx</name></expr></argument>, <argument pos:start="26:36" pos:end="26:39"><expr pos:start="26:36" pos:end="26:39"><operator pos:start="26:36" pos:end="26:36">&amp;</operator><name pos:start="26:37" pos:end="26:39">ecx</name></expr></argument>, <argument pos:start="26:42" pos:end="26:45"><expr pos:start="26:42" pos:end="26:45"><operator pos:start="26:42" pos:end="26:42">&amp;</operator><name pos:start="26:43" pos:end="26:45">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="28:5" pos:end="28:69"><expr pos:start="28:5" pos:end="28:68"><name pos:start="28:5" pos:end="28:23"><name pos:start="28:5" pos:end="28:15">x86_cpu_def</name><operator pos:start="28:16" pos:end="28:17">-&gt;</operator><name pos:start="28:18" pos:end="28:23">family</name></name> <operator pos:start="28:25" pos:end="28:25">=</operator> <operator pos:start="28:27" pos:end="28:27">(</operator><operator pos:start="28:28" pos:end="28:28">(</operator><name pos:start="28:29" pos:end="28:31">eax</name> <operator pos:start="28:33" pos:end="28:34">&gt;&gt;</operator> <literal type="number" pos:start="28:36" pos:end="28:36">8</literal><operator pos:start="28:37" pos:end="28:37">)</operator> <operator pos:start="28:39" pos:end="28:39">&amp;</operator> <literal type="number" pos:start="28:41" pos:end="28:44">0x0F</literal><operator pos:start="28:45" pos:end="28:45">)</operator> <operator pos:start="28:47" pos:end="28:47">+</operator> <operator pos:start="28:49" pos:end="28:49">(</operator><operator pos:start="28:50" pos:end="28:50">(</operator><name pos:start="28:51" pos:end="28:53">eax</name> <operator pos:start="28:55" pos:end="28:56">&gt;&gt;</operator> <literal type="number" pos:start="28:58" pos:end="28:59">20</literal><operator pos:start="28:60" pos:end="28:60">)</operator> <operator pos:start="28:62" pos:end="28:62">&amp;</operator> <literal type="number" pos:start="28:64" pos:end="28:67">0xFF</literal><operator pos:start="28:68" pos:end="28:68">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="30:5" pos:end="30:71"><expr pos:start="30:5" pos:end="30:70"><name pos:start="30:5" pos:end="30:22"><name pos:start="30:5" pos:end="30:15">x86_cpu_def</name><operator pos:start="30:16" pos:end="30:17">-&gt;</operator><name pos:start="30:18" pos:end="30:22">model</name></name> <operator pos:start="30:24" pos:end="30:24">=</operator> <operator pos:start="30:26" pos:end="30:26">(</operator><operator pos:start="30:27" pos:end="30:27">(</operator><name pos:start="30:28" pos:end="30:30">eax</name> <operator pos:start="30:32" pos:end="30:33">&gt;&gt;</operator> <literal type="number" pos:start="30:35" pos:end="30:35">4</literal><operator pos:start="30:36" pos:end="30:36">)</operator> <operator pos:start="30:38" pos:end="30:38">&amp;</operator> <literal type="number" pos:start="30:40" pos:end="30:43">0x0F</literal><operator pos:start="30:44" pos:end="30:44">)</operator> <operator pos:start="30:46" pos:end="30:46">|</operator> <operator pos:start="30:48" pos:end="30:48">(</operator><operator pos:start="30:49" pos:end="30:49">(</operator><name pos:start="30:50" pos:end="30:52">eax</name> <operator pos:start="30:54" pos:end="30:54">&amp;</operator> <literal type="number" pos:start="30:56" pos:end="30:62">0xF0000</literal><operator pos:start="30:63" pos:end="30:63">)</operator> <operator pos:start="30:65" pos:end="30:66">&gt;&gt;</operator> <literal type="number" pos:start="30:68" pos:end="30:69">12</literal><operator pos:start="30:70" pos:end="30:70">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="32:5" pos:end="32:39"><expr pos:start="32:5" pos:end="32:38"><name pos:start="32:5" pos:end="32:25"><name pos:start="32:5" pos:end="32:15">x86_cpu_def</name><operator pos:start="32:16" pos:end="32:17">-&gt;</operator><name pos:start="32:18" pos:end="32:25">stepping</name></name> <operator pos:start="32:27" pos:end="32:27">=</operator> <name pos:start="32:29" pos:end="32:31">eax</name> <operator pos:start="32:33" pos:end="32:33">&amp;</operator> <literal type="number" pos:start="32:35" pos:end="32:38">0x0F</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="36:5" pos:end="36:72"><expr pos:start="36:5" pos:end="36:71"><name pos:start="36:5" pos:end="36:22"><name pos:start="36:5" pos:end="36:15">x86_cpu_def</name><operator pos:start="36:16" pos:end="36:17">-&gt;</operator><name pos:start="36:18" pos:end="36:22">level</name></name> <operator pos:start="36:24" pos:end="36:24">=</operator> <call pos:start="36:26" pos:end="36:71"><name pos:start="36:26" pos:end="36:53">kvm_arch_get_supported_cpuid</name><argument_list pos:start="36:54" pos:end="36:71">(<argument pos:start="36:55" pos:end="36:55"><expr pos:start="36:55" pos:end="36:55"><name pos:start="36:55" pos:end="36:55">s</name></expr></argument>, <argument pos:start="36:58" pos:end="36:60"><expr pos:start="36:58" pos:end="36:60"><literal type="number" pos:start="36:58" pos:end="36:60">0x0</literal></expr></argument>, <argument pos:start="36:63" pos:end="36:63"><expr pos:start="36:63" pos:end="36:63"><literal type="number" pos:start="36:63" pos:end="36:63">0</literal></expr></argument>, <argument pos:start="36:66" pos:end="36:70"><expr pos:start="36:66" pos:end="36:70"><name pos:start="36:66" pos:end="36:70">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="38:5" pos:end="40:55"><expr pos:start="38:5" pos:end="40:54"><name pos:start="38:5" pos:end="38:37"><name pos:start="38:5" pos:end="38:15">x86_cpu_def</name><operator pos:start="38:16" pos:end="38:17">-&gt;</operator><name pos:start="38:18" pos:end="38:25">features</name><index pos:start="38:26" pos:end="38:37">[<expr pos:start="38:27" pos:end="38:36"><name pos:start="38:27" pos:end="38:36">FEAT_1_EDX</name></expr>]</index></name> <operator pos:start="38:39" pos:end="38:39">=</operator>

        <call pos:start="40:9" pos:end="40:54"><name pos:start="40:9" pos:end="40:36">kvm_arch_get_supported_cpuid</name><argument_list pos:start="40:37" pos:end="40:54">(<argument pos:start="40:38" pos:end="40:38"><expr pos:start="40:38" pos:end="40:38"><name pos:start="40:38" pos:end="40:38">s</name></expr></argument>, <argument pos:start="40:41" pos:end="40:43"><expr pos:start="40:41" pos:end="40:43"><literal type="number" pos:start="40:41" pos:end="40:43">0x1</literal></expr></argument>, <argument pos:start="40:46" pos:end="40:46"><expr pos:start="40:46" pos:end="40:46"><literal type="number" pos:start="40:46" pos:end="40:46">0</literal></expr></argument>, <argument pos:start="40:49" pos:end="40:53"><expr pos:start="40:49" pos:end="40:53"><name pos:start="40:49" pos:end="40:53">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="42:5" pos:end="44:55"><expr pos:start="42:5" pos:end="44:54"><name pos:start="42:5" pos:end="42:37"><name pos:start="42:5" pos:end="42:15">x86_cpu_def</name><operator pos:start="42:16" pos:end="42:17">-&gt;</operator><name pos:start="42:18" pos:end="42:25">features</name><index pos:start="42:26" pos:end="42:37">[<expr pos:start="42:27" pos:end="42:36"><name pos:start="42:27" pos:end="42:36">FEAT_1_ECX</name></expr>]</index></name> <operator pos:start="42:39" pos:end="42:39">=</operator>

        <call pos:start="44:9" pos:end="44:54"><name pos:start="44:9" pos:end="44:36">kvm_arch_get_supported_cpuid</name><argument_list pos:start="44:37" pos:end="44:54">(<argument pos:start="44:38" pos:end="44:38"><expr pos:start="44:38" pos:end="44:38"><name pos:start="44:38" pos:end="44:38">s</name></expr></argument>, <argument pos:start="44:41" pos:end="44:43"><expr pos:start="44:41" pos:end="44:43"><literal type="number" pos:start="44:41" pos:end="44:43">0x1</literal></expr></argument>, <argument pos:start="44:46" pos:end="44:46"><expr pos:start="44:46" pos:end="44:46"><literal type="number" pos:start="44:46" pos:end="44:46">0</literal></expr></argument>, <argument pos:start="44:49" pos:end="44:53"><expr pos:start="44:49" pos:end="44:53"><name pos:start="44:49" pos:end="44:53">R_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="48:5" pos:end="58:5"><if pos:start="48:5" pos:end="54:5">if <condition pos:start="48:8" pos:end="48:32">(<expr pos:start="48:9" pos:end="48:31"><name pos:start="48:9" pos:end="48:26"><name pos:start="48:9" pos:end="48:19">x86_cpu_def</name><operator pos:start="48:20" pos:end="48:21">-&gt;</operator><name pos:start="48:22" pos:end="48:26">level</name></name> <operator pos:start="48:28" pos:end="48:29">&gt;=</operator> <literal type="number" pos:start="48:31" pos:end="48:31">7</literal></expr>)</condition> <block pos:start="48:34" pos:end="54:5">{<block_content pos:start="50:9" pos:end="52:67">

        <expr_stmt pos:start="50:9" pos:end="52:67"><expr pos:start="50:9" pos:end="52:66"><name pos:start="50:9" pos:end="50:43"><name pos:start="50:9" pos:end="50:19">x86_cpu_def</name><operator pos:start="50:20" pos:end="50:21">-&gt;</operator><name pos:start="50:22" pos:end="50:29">features</name><index pos:start="50:30" pos:end="50:43">[<expr pos:start="50:31" pos:end="50:42"><name pos:start="50:31" pos:end="50:42">FEAT_7_0_EBX</name></expr>]</index></name> <operator pos:start="50:45" pos:end="50:45">=</operator>

                    <call pos:start="52:21" pos:end="52:66"><name pos:start="52:21" pos:end="52:48">kvm_arch_get_supported_cpuid</name><argument_list pos:start="52:49" pos:end="52:66">(<argument pos:start="52:50" pos:end="52:50"><expr pos:start="52:50" pos:end="52:50"><name pos:start="52:50" pos:end="52:50">s</name></expr></argument>, <argument pos:start="52:53" pos:end="52:55"><expr pos:start="52:53" pos:end="52:55"><literal type="number" pos:start="52:53" pos:end="52:55">0x7</literal></expr></argument>, <argument pos:start="52:58" pos:end="52:58"><expr pos:start="52:58" pos:end="52:58"><literal type="number" pos:start="52:58" pos:end="52:58">0</literal></expr></argument>, <argument pos:start="52:61" pos:end="52:65"><expr pos:start="52:61" pos:end="52:65"><name pos:start="52:61" pos:end="52:65">R_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="54:7" pos:end="58:5">else <block pos:start="54:12" pos:end="58:5">{<block_content pos:start="56:9" pos:end="56:48">

        <expr_stmt pos:start="56:9" pos:end="56:48"><expr pos:start="56:9" pos:end="56:47"><name pos:start="56:9" pos:end="56:43"><name pos:start="56:9" pos:end="56:19">x86_cpu_def</name><operator pos:start="56:20" pos:end="56:21">-&gt;</operator><name pos:start="56:22" pos:end="56:29">features</name><index pos:start="56:30" pos:end="56:43">[<expr pos:start="56:31" pos:end="56:42"><name pos:start="56:31" pos:end="56:42">FEAT_7_0_EBX</name></expr>]</index></name> <operator pos:start="56:45" pos:end="56:45">=</operator> <literal type="number" pos:start="56:47" pos:end="56:47">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="62:5" pos:end="62:80"><expr pos:start="62:5" pos:end="62:79"><name pos:start="62:5" pos:end="62:23"><name pos:start="62:5" pos:end="62:15">x86_cpu_def</name><operator pos:start="62:16" pos:end="62:17">-&gt;</operator><name pos:start="62:18" pos:end="62:23">xlevel</name></name> <operator pos:start="62:25" pos:end="62:25">=</operator> <call pos:start="62:27" pos:end="62:79"><name pos:start="62:27" pos:end="62:54">kvm_arch_get_supported_cpuid</name><argument_list pos:start="62:55" pos:end="62:79">(<argument pos:start="62:56" pos:end="62:56"><expr pos:start="62:56" pos:end="62:56"><name pos:start="62:56" pos:end="62:56">s</name></expr></argument>, <argument pos:start="62:59" pos:end="62:68"><expr pos:start="62:59" pos:end="62:68"><literal type="number" pos:start="62:59" pos:end="62:68">0x80000000</literal></expr></argument>, <argument pos:start="62:71" pos:end="62:71"><expr pos:start="62:71" pos:end="62:71"><literal type="number" pos:start="62:71" pos:end="62:71">0</literal></expr></argument>, <argument pos:start="62:74" pos:end="62:78"><expr pos:start="62:74" pos:end="62:78"><name pos:start="62:74" pos:end="62:78">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="64:5" pos:end="66:70"><expr pos:start="64:5" pos:end="66:69"><name pos:start="64:5" pos:end="64:45"><name pos:start="64:5" pos:end="64:15">x86_cpu_def</name><operator pos:start="64:16" pos:end="64:17">-&gt;</operator><name pos:start="64:18" pos:end="64:25">features</name><index pos:start="64:26" pos:end="64:45">[<expr pos:start="64:27" pos:end="64:44"><name pos:start="64:27" pos:end="64:44">FEAT_8000_0001_EDX</name></expr>]</index></name> <operator pos:start="64:47" pos:end="64:47">=</operator>

                <call pos:start="66:17" pos:end="66:69"><name pos:start="66:17" pos:end="66:44">kvm_arch_get_supported_cpuid</name><argument_list pos:start="66:45" pos:end="66:69">(<argument pos:start="66:46" pos:end="66:46"><expr pos:start="66:46" pos:end="66:46"><name pos:start="66:46" pos:end="66:46">s</name></expr></argument>, <argument pos:start="66:49" pos:end="66:58"><expr pos:start="66:49" pos:end="66:58"><literal type="number" pos:start="66:49" pos:end="66:58">0x80000001</literal></expr></argument>, <argument pos:start="66:61" pos:end="66:61"><expr pos:start="66:61" pos:end="66:61"><literal type="number" pos:start="66:61" pos:end="66:61">0</literal></expr></argument>, <argument pos:start="66:64" pos:end="66:68"><expr pos:start="66:64" pos:end="66:68"><name pos:start="66:64" pos:end="66:68">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="68:5" pos:end="70:70"><expr pos:start="68:5" pos:end="70:69"><name pos:start="68:5" pos:end="68:45"><name pos:start="68:5" pos:end="68:15">x86_cpu_def</name><operator pos:start="68:16" pos:end="68:17">-&gt;</operator><name pos:start="68:18" pos:end="68:25">features</name><index pos:start="68:26" pos:end="68:45">[<expr pos:start="68:27" pos:end="68:44"><name pos:start="68:27" pos:end="68:44">FEAT_8000_0001_ECX</name></expr>]</index></name> <operator pos:start="68:47" pos:end="68:47">=</operator>

                <call pos:start="70:17" pos:end="70:69"><name pos:start="70:17" pos:end="70:44">kvm_arch_get_supported_cpuid</name><argument_list pos:start="70:45" pos:end="70:69">(<argument pos:start="70:46" pos:end="70:46"><expr pos:start="70:46" pos:end="70:46"><name pos:start="70:46" pos:end="70:46">s</name></expr></argument>, <argument pos:start="70:49" pos:end="70:58"><expr pos:start="70:49" pos:end="70:58"><literal type="number" pos:start="70:49" pos:end="70:58">0x80000001</literal></expr></argument>, <argument pos:start="70:61" pos:end="70:61"><expr pos:start="70:61" pos:end="70:61"><literal type="number" pos:start="70:61" pos:end="70:61">0</literal></expr></argument>, <argument pos:start="70:64" pos:end="70:68"><expr pos:start="70:64" pos:end="70:68"><name pos:start="70:64" pos:end="70:68">R_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="74:5" pos:end="74:49"><expr pos:start="74:5" pos:end="74:48"><call pos:start="74:5" pos:end="74:48"><name pos:start="74:5" pos:end="74:25">cpu_x86_fill_model_id</name><argument_list pos:start="74:26" pos:end="74:48">(<argument pos:start="74:27" pos:end="74:47"><expr pos:start="74:27" pos:end="74:47"><name pos:start="74:27" pos:end="74:47"><name pos:start="74:27" pos:end="74:37">x86_cpu_def</name><operator pos:start="74:38" pos:end="74:39">-&gt;</operator><name pos:start="74:40" pos:end="74:47">model_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="78:5" pos:end="78:43">/* Call Centaur's CPUID instruction. */</comment>

    <if_stmt pos:start="80:5" pos:end="100:5"><if pos:start="80:5" pos:end="100:5">if <condition pos:start="80:8" pos:end="80:55">(<expr pos:start="80:9" pos:end="80:54"><operator pos:start="80:9" pos:end="80:9">!</operator><call pos:start="80:10" pos:end="80:54"><name pos:start="80:10" pos:end="80:15">strcmp</name><argument_list pos:start="80:16" pos:end="80:54">(<argument pos:start="80:17" pos:end="80:35"><expr pos:start="80:17" pos:end="80:35"><name pos:start="80:17" pos:end="80:35"><name pos:start="80:17" pos:end="80:27">x86_cpu_def</name><operator pos:start="80:28" pos:end="80:29">-&gt;</operator><name pos:start="80:30" pos:end="80:35">vendor</name></name></expr></argument>, <argument pos:start="80:38" pos:end="80:53"><expr pos:start="80:38" pos:end="80:53"><name pos:start="80:38" pos:end="80:53">CPUID_VENDOR_VIA</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="80:57" pos:end="100:5">{<block_content pos:start="82:9" pos:end="98:9">

        <expr_stmt pos:start="82:9" pos:end="82:58"><expr pos:start="82:9" pos:end="82:57"><call pos:start="82:9" pos:end="82:57"><name pos:start="82:9" pos:end="82:18">host_cpuid</name><argument_list pos:start="82:19" pos:end="82:57">(<argument pos:start="82:20" pos:end="82:29"><expr pos:start="82:20" pos:end="82:29"><literal type="number" pos:start="82:20" pos:end="82:29">0xC0000000</literal></expr></argument>, <argument pos:start="82:32" pos:end="82:32"><expr pos:start="82:32" pos:end="82:32"><literal type="number" pos:start="82:32" pos:end="82:32">0</literal></expr></argument>, <argument pos:start="82:35" pos:end="82:38"><expr pos:start="82:35" pos:end="82:38"><operator pos:start="82:35" pos:end="82:35">&amp;</operator><name pos:start="82:36" pos:end="82:38">eax</name></expr></argument>, <argument pos:start="82:41" pos:end="82:44"><expr pos:start="82:41" pos:end="82:44"><operator pos:start="82:41" pos:end="82:41">&amp;</operator><name pos:start="82:42" pos:end="82:44">ebx</name></expr></argument>, <argument pos:start="82:47" pos:end="82:50"><expr pos:start="82:47" pos:end="82:50"><operator pos:start="82:47" pos:end="82:47">&amp;</operator><name pos:start="82:48" pos:end="82:50">ecx</name></expr></argument>, <argument pos:start="82:53" pos:end="82:56"><expr pos:start="82:53" pos:end="82:56"><operator pos:start="82:53" pos:end="82:53">&amp;</operator><name pos:start="82:54" pos:end="82:56">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="84:9" pos:end="84:68"><expr pos:start="84:9" pos:end="84:67"><name pos:start="84:9" pos:end="84:11">eax</name> <operator pos:start="84:13" pos:end="84:13">=</operator> <call pos:start="84:15" pos:end="84:67"><name pos:start="84:15" pos:end="84:42">kvm_arch_get_supported_cpuid</name><argument_list pos:start="84:43" pos:end="84:67">(<argument pos:start="84:44" pos:end="84:44"><expr pos:start="84:44" pos:end="84:44"><name pos:start="84:44" pos:end="84:44">s</name></expr></argument>, <argument pos:start="84:47" pos:end="84:56"><expr pos:start="84:47" pos:end="84:56"><literal type="number" pos:start="84:47" pos:end="84:56">0xC0000000</literal></expr></argument>, <argument pos:start="84:59" pos:end="84:59"><expr pos:start="84:59" pos:end="84:59"><literal type="number" pos:start="84:59" pos:end="84:59">0</literal></expr></argument>, <argument pos:start="84:62" pos:end="84:66"><expr pos:start="84:62" pos:end="84:66"><name pos:start="84:62" pos:end="84:66">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="86:9" pos:end="98:9"><if pos:start="86:9" pos:end="98:9">if <condition pos:start="86:12" pos:end="86:30">(<expr pos:start="86:13" pos:end="86:29"><name pos:start="86:13" pos:end="86:15">eax</name> <operator pos:start="86:17" pos:end="86:18">&gt;=</operator> <literal type="number" pos:start="86:20" pos:end="86:29">0xC0000001</literal></expr>)</condition> <block pos:start="86:32" pos:end="98:9">{<block_content pos:start="90:13" pos:end="96:74">

            <comment type="block" pos:start="88:13" pos:end="88:48">/* Support VIA max extended level */</comment>

            <expr_stmt pos:start="90:13" pos:end="90:39"><expr pos:start="90:13" pos:end="90:38"><name pos:start="90:13" pos:end="90:32"><name pos:start="90:13" pos:end="90:23">x86_cpu_def</name><operator pos:start="90:24" pos:end="90:25">-&gt;</operator><name pos:start="90:26" pos:end="90:32">xlevel2</name></name> <operator pos:start="90:34" pos:end="90:34">=</operator> <name pos:start="90:36" pos:end="90:38">eax</name></expr>;</expr_stmt>

            <expr_stmt pos:start="92:13" pos:end="92:62"><expr pos:start="92:13" pos:end="92:61"><call pos:start="92:13" pos:end="92:61"><name pos:start="92:13" pos:end="92:22">host_cpuid</name><argument_list pos:start="92:23" pos:end="92:61">(<argument pos:start="92:24" pos:end="92:33"><expr pos:start="92:24" pos:end="92:33"><literal type="number" pos:start="92:24" pos:end="92:33">0xC0000001</literal></expr></argument>, <argument pos:start="92:36" pos:end="92:36"><expr pos:start="92:36" pos:end="92:36"><literal type="number" pos:start="92:36" pos:end="92:36">0</literal></expr></argument>, <argument pos:start="92:39" pos:end="92:42"><expr pos:start="92:39" pos:end="92:42"><operator pos:start="92:39" pos:end="92:39">&amp;</operator><name pos:start="92:40" pos:end="92:42">eax</name></expr></argument>, <argument pos:start="92:45" pos:end="92:48"><expr pos:start="92:45" pos:end="92:48"><operator pos:start="92:45" pos:end="92:45">&amp;</operator><name pos:start="92:46" pos:end="92:48">ebx</name></expr></argument>, <argument pos:start="92:51" pos:end="92:54"><expr pos:start="92:51" pos:end="92:54"><operator pos:start="92:51" pos:end="92:51">&amp;</operator><name pos:start="92:52" pos:end="92:54">ecx</name></expr></argument>, <argument pos:start="92:57" pos:end="92:60"><expr pos:start="92:57" pos:end="92:60"><operator pos:start="92:57" pos:end="92:57">&amp;</operator><name pos:start="92:58" pos:end="92:60">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="94:13" pos:end="96:74"><expr pos:start="94:13" pos:end="96:73"><name pos:start="94:13" pos:end="94:53"><name pos:start="94:13" pos:end="94:23">x86_cpu_def</name><operator pos:start="94:24" pos:end="94:25">-&gt;</operator><name pos:start="94:26" pos:end="94:33">features</name><index pos:start="94:34" pos:end="94:53">[<expr pos:start="94:35" pos:end="94:52"><name pos:start="94:35" pos:end="94:52">FEAT_C000_0001_EDX</name></expr>]</index></name> <operator pos:start="94:55" pos:end="94:55">=</operator>

                    <call pos:start="96:21" pos:end="96:73"><name pos:start="96:21" pos:end="96:48">kvm_arch_get_supported_cpuid</name><argument_list pos:start="96:49" pos:end="96:73">(<argument pos:start="96:50" pos:end="96:50"><expr pos:start="96:50" pos:end="96:50"><name pos:start="96:50" pos:end="96:50">s</name></expr></argument>, <argument pos:start="96:53" pos:end="96:62"><expr pos:start="96:53" pos:end="96:62"><literal type="number" pos:start="96:53" pos:end="96:62">0xC0000001</literal></expr></argument>, <argument pos:start="96:65" pos:end="96:65"><expr pos:start="96:65" pos:end="96:65"><literal type="number" pos:start="96:65" pos:end="96:65">0</literal></expr></argument>, <argument pos:start="96:68" pos:end="96:72"><expr pos:start="96:68" pos:end="96:72"><name pos:start="96:68" pos:end="96:72">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="104:5" pos:end="104:44">/* Other KVM-specific feature fields: */</comment>

    <expr_stmt pos:start="106:5" pos:end="108:62"><expr pos:start="106:5" pos:end="108:61"><name pos:start="106:5" pos:end="106:35"><name pos:start="106:5" pos:end="106:15">x86_cpu_def</name><operator pos:start="106:16" pos:end="106:17">-&gt;</operator><name pos:start="106:18" pos:end="106:25">features</name><index pos:start="106:26" pos:end="106:35">[<expr pos:start="106:27" pos:end="106:34"><name pos:start="106:27" pos:end="106:34">FEAT_SVM</name></expr>]</index></name> <operator pos:start="106:37" pos:end="106:37">=</operator>

        <call pos:start="108:9" pos:end="108:61"><name pos:start="108:9" pos:end="108:36">kvm_arch_get_supported_cpuid</name><argument_list pos:start="108:37" pos:end="108:61">(<argument pos:start="108:38" pos:end="108:38"><expr pos:start="108:38" pos:end="108:38"><name pos:start="108:38" pos:end="108:38">s</name></expr></argument>, <argument pos:start="108:41" pos:end="108:50"><expr pos:start="108:41" pos:end="108:50"><literal type="number" pos:start="108:41" pos:end="108:50">0x8000000A</literal></expr></argument>, <argument pos:start="108:53" pos:end="108:53"><expr pos:start="108:53" pos:end="108:53"><literal type="number" pos:start="108:53" pos:end="108:53">0</literal></expr></argument>, <argument pos:start="108:56" pos:end="108:60"><expr pos:start="108:56" pos:end="108:60"><name pos:start="108:56" pos:end="108:60">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="110:5" pos:end="117:0"><expr pos:start="110:5" pos:end="112:69"><name pos:start="110:5" pos:end="110:35"><name pos:start="110:5" pos:end="110:15">x86_cpu_def</name><operator pos:start="110:16" pos:end="110:17">-&gt;</operator><name pos:start="110:18" pos:end="110:25">features</name><index pos:start="110:26" pos:end="110:35">[<expr pos:start="110:27" pos:end="110:34"><name pos:start="110:27" pos:end="110:34">FEAT_KVM</name></expr>]</index></name> <operator pos:start="110:37" pos:end="110:37">=</operator>

        <call pos:start="112:9" pos:end="112:69"><name pos:start="112:9" pos:end="112:36">kvm_arch_get_supported_cpuid</name><argument_list pos:start="112:37" pos:end="112:69">(<argument pos:start="112:38" pos:end="112:38"><expr pos:start="112:38" pos:end="112:38"><name pos:start="112:38" pos:end="112:38">s</name></expr></argument>, <argument pos:start="112:41" pos:end="112:58"><expr pos:start="112:41" pos:end="112:58"><name pos:start="112:41" pos:end="112:58">KVM_CPUID_FEATURES</name></expr></argument>, <argument pos:start="112:61" pos:end="112:61"><expr pos:start="112:61" pos:end="112:61"><literal type="number" pos:start="112:61" pos:end="112:61">0</literal></expr></argument>, <argument pos:start="112:64" pos:end="112:68"><expr pos:start="112:64" pos:end="112:68"><name pos:start="112:64" pos:end="112:68">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:endif pos:start="116:1" pos:end="116:6">#<cpp:directive pos:start="116:2" pos:end="116:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="116:8" pos:end="116:23">/* CONFIG_KVM */</comment>

</block_content>}</block></function></unit>
