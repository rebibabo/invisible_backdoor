<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4855.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">xbm_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:60">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">got_frame</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:52">AVPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:59">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="127:1">{<block_content pos:start="7:5" pos:end="125:23">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">p</name> <init pos:start="7:16" pos:end="7:21">= <expr pos:start="7:18" pos:end="7:21"><name pos:start="7:18" pos:end="7:21">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">end</name></decl>, <decl pos:start="9:25" pos:end="9:42"><type ref="prev" pos:start="9:5" pos:end="9:19"><modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:28">ptr</name> <init pos:start="9:30" pos:end="9:42">= <expr pos:start="9:32" pos:end="9:42"><name pos:start="9:32" pos:end="9:42"><name pos:start="9:32" pos:end="9:36">avpkt</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:42">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:21">linesize</name></decl>, <decl pos:start="13:24" pos:end="13:24"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:24" pos:end="13:24">i</name></decl>, <decl pos:start="13:27" pos:end="13:27"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:27" pos:end="13:27">j</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:36"><expr pos:start="17:5" pos:end="17:35"><name pos:start="17:5" pos:end="17:7">end</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:21"><name pos:start="17:11" pos:end="17:15">avpkt</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:21">data</name></name> <operator pos:start="17:23" pos:end="17:23">+</operator> <name pos:start="17:25" pos:end="17:35"><name pos:start="17:25" pos:end="17:29">avpkt</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:35">size</name></name></expr>;</expr_stmt>

    <while pos:start="19:5" pos:end="59:5">while <condition pos:start="19:11" pos:end="19:43">(<expr pos:start="19:12" pos:end="19:42"><operator pos:start="19:12" pos:end="19:12">!</operator><name pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:17">avctx</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:24">width</name></name> <operator pos:start="19:26" pos:end="19:27">||</operator> <operator pos:start="19:29" pos:end="19:29">!</operator><name pos:start="19:30" pos:end="19:42"><name pos:start="19:30" pos:end="19:34">avctx</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:42">height</name></name></expr>)</condition> <block pos:start="19:45" pos:end="59:5">{<block_content pos:start="21:9" pos:end="57:40">

        <decl_stmt pos:start="21:9" pos:end="21:23"><decl pos:start="21:9" pos:end="21:22"><type pos:start="21:9" pos:end="21:12"><name pos:start="21:9" pos:end="21:12">char</name></type> <name pos:start="21:14" pos:end="21:22"><name pos:start="21:14" pos:end="21:17">name</name><index pos:start="21:18" pos:end="21:22">[<expr pos:start="21:19" pos:end="21:21"><literal type="number" pos:start="21:19" pos:end="21:21">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:24"><decl pos:start="23:9" pos:end="23:18"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:18">number</name></decl>, <decl pos:start="23:21" pos:end="23:23"><type ref="prev" pos:start="23:9" pos:end="23:11"/><name pos:start="23:21" pos:end="23:23">len</name></decl>;</decl_stmt>



        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:11">ptr</name> <operator pos:start="27:13" pos:end="27:14">+=</operator> <call pos:start="27:16" pos:end="27:32"><name pos:start="27:16" pos:end="27:22">strcspn</name><argument_list pos:start="27:23" pos:end="27:32">(<argument pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:26">ptr</name></expr></argument>, <argument pos:start="27:29" pos:end="27:31"><expr pos:start="27:29" pos:end="27:31"><literal type="string" pos:start="27:29" pos:end="27:31">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:64">(<expr pos:start="29:13" pos:end="29:63"><call pos:start="29:13" pos:end="29:58"><name pos:start="29:13" pos:end="29:18">sscanf</name><argument_list pos:start="29:19" pos:end="29:58">(<argument pos:start="29:20" pos:end="29:22"><expr pos:start="29:20" pos:end="29:22"><name pos:start="29:20" pos:end="29:22">ptr</name></expr></argument>, <argument pos:start="29:25" pos:end="29:42"><expr pos:start="29:25" pos:end="29:42"><literal type="string" pos:start="29:25" pos:end="29:42">"#define %256s %u"</literal></expr></argument>, <argument pos:start="29:45" pos:end="29:48"><expr pos:start="29:45" pos:end="29:48"><name pos:start="29:45" pos:end="29:48">name</name></expr></argument>, <argument pos:start="29:51" pos:end="29:57"><expr pos:start="29:51" pos:end="29:57"><operator pos:start="29:51" pos:end="29:51">&amp;</operator><name pos:start="29:52" pos:end="29:57">number</name></expr></argument>)</argument_list></call> <operator pos:start="29:60" pos:end="29:61">!=</operator> <literal type="number" pos:start="29:63" pos:end="29:63">2</literal></expr>)</condition> <block pos:start="29:66" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:39">

            <expr_stmt pos:start="31:13" pos:end="31:79"><expr pos:start="31:13" pos:end="31:78"><call pos:start="31:13" pos:end="31:78"><name pos:start="31:13" pos:end="31:18">av_log</name><argument_list pos:start="31:19" pos:end="31:78">(<argument pos:start="31:20" pos:end="31:24"><expr pos:start="31:20" pos:end="31:24"><name pos:start="31:20" pos:end="31:24">avctx</name></expr></argument>, <argument pos:start="31:27" pos:end="31:38"><expr pos:start="31:27" pos:end="31:38"><name pos:start="31:27" pos:end="31:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:41" pos:end="31:77"><expr pos:start="31:41" pos:end="31:77"><literal type="string" pos:start="31:41" pos:end="31:77">"Unexpected preprocessor directive\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="33:13" pos:end="33:39">return <expr pos:start="33:20" pos:end="33:38"><name pos:start="33:20" pos:end="33:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:27"><expr pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:11">len</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:26"><name pos:start="39:15" pos:end="39:20">strlen</name><argument_list pos:start="39:21" pos:end="39:26">(<argument pos:start="39:22" pos:end="39:25"><expr pos:start="39:22" pos:end="39:25"><name pos:start="39:22" pos:end="39:25">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="55:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:81">(<expr pos:start="41:13" pos:end="41:80"><operator pos:start="41:13" pos:end="41:13">(</operator><name pos:start="41:14" pos:end="41:16">len</name> <operator pos:start="41:18" pos:end="41:18">&gt;</operator> <literal type="number" pos:start="41:20" pos:end="41:20">6</literal><operator pos:start="41:21" pos:end="41:21">)</operator> <operator pos:start="41:23" pos:end="41:24">&amp;&amp;</operator> <operator pos:start="41:26" pos:end="41:26">!</operator><name pos:start="41:27" pos:end="41:39"><name pos:start="41:27" pos:end="41:31">avctx</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:39">height</name></name> <operator pos:start="41:41" pos:end="41:42">&amp;&amp;</operator> <operator pos:start="41:44" pos:end="41:44">!</operator><call pos:start="41:45" pos:end="41:80"><name pos:start="41:45" pos:end="41:50">memcmp</name><argument_list pos:start="41:51" pos:end="41:80">(<argument pos:start="41:52" pos:end="41:65"><expr pos:start="41:52" pos:end="41:65"><name pos:start="41:52" pos:end="41:55">name</name> <operator pos:start="41:57" pos:end="41:57">+</operator> <name pos:start="41:59" pos:end="41:61">len</name> <operator pos:start="41:63" pos:end="41:63">-</operator> <literal type="number" pos:start="41:65" pos:end="41:65">7</literal></expr></argument>, <argument pos:start="41:68" pos:end="41:76"><expr pos:start="41:68" pos:end="41:76"><literal type="string" pos:start="41:68" pos:end="41:76">"_height"</literal></expr></argument>, <argument pos:start="41:79" pos:end="41:79"><expr pos:start="41:79" pos:end="41:79"><literal type="number" pos:start="41:79" pos:end="41:79">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:83" pos:end="45:9">{<block_content pos:start="43:17" pos:end="43:39">

                <expr_stmt pos:start="43:17" pos:end="43:39"><expr pos:start="43:17" pos:end="43:38"><name pos:start="43:17" pos:end="43:29"><name pos:start="43:17" pos:end="43:21">avctx</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:29">height</name></name> <operator pos:start="43:31" pos:end="43:31">=</operator> <name pos:start="43:33" pos:end="43:38">number</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="45:11" pos:end="49:9">else if <condition pos:start="45:19" pos:end="45:86">(<expr pos:start="45:20" pos:end="45:85"><operator pos:start="45:20" pos:end="45:20">(</operator><name pos:start="45:21" pos:end="45:23">len</name> <operator pos:start="45:25" pos:end="45:25">&gt;</operator> <literal type="number" pos:start="45:27" pos:end="45:27">5</literal><operator pos:start="45:28" pos:end="45:28">)</operator> <operator pos:start="45:30" pos:end="45:31">&amp;&amp;</operator> <operator pos:start="45:33" pos:end="45:33">!</operator><name pos:start="45:34" pos:end="45:45"><name pos:start="45:34" pos:end="45:38">avctx</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:45">width</name></name> <operator pos:start="45:47" pos:end="45:48">&amp;&amp;</operator> <operator pos:start="45:50" pos:end="45:50">!</operator><call pos:start="45:51" pos:end="45:85"><name pos:start="45:51" pos:end="45:56">memcmp</name><argument_list pos:start="45:57" pos:end="45:85">(<argument pos:start="45:58" pos:end="45:71"><expr pos:start="45:58" pos:end="45:71"><name pos:start="45:58" pos:end="45:61">name</name> <operator pos:start="45:63" pos:end="45:63">+</operator> <name pos:start="45:65" pos:end="45:67">len</name> <operator pos:start="45:69" pos:end="45:69">-</operator> <literal type="number" pos:start="45:71" pos:end="45:71">6</literal></expr></argument>, <argument pos:start="45:74" pos:end="45:81"><expr pos:start="45:74" pos:end="45:81"><literal type="string" pos:start="45:74" pos:end="45:81">"_width"</literal></expr></argument>, <argument pos:start="45:84" pos:end="45:84"><expr pos:start="45:84" pos:end="45:84"><literal type="number" pos:start="45:84" pos:end="45:84">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:88" pos:end="49:9">{<block_content pos:start="47:17" pos:end="47:38">

                <expr_stmt pos:start="47:17" pos:end="47:38"><expr pos:start="47:17" pos:end="47:37"><name pos:start="47:17" pos:end="47:28"><name pos:start="47:17" pos:end="47:21">avctx</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:28">width</name></name> <operator pos:start="47:30" pos:end="47:30">=</operator> <name pos:start="47:32" pos:end="47:37">number</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="49:11" pos:end="55:9">else <block pos:start="49:16" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:39">

            <expr_stmt pos:start="51:13" pos:end="51:71"><expr pos:start="51:13" pos:end="51:70"><call pos:start="51:13" pos:end="51:70"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="51:70">(<argument pos:start="51:20" pos:end="51:24"><expr pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:24">avctx</name></expr></argument>, <argument pos:start="51:27" pos:end="51:38"><expr pos:start="51:27" pos:end="51:38"><name pos:start="51:27" pos:end="51:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:41" pos:end="51:63"><expr pos:start="51:41" pos:end="51:63"><literal type="string" pos:start="51:41" pos:end="51:63">"Unknown define '%s'\n"</literal></expr></argument>, <argument pos:start="51:66" pos:end="51:69"><expr pos:start="51:66" pos:end="51:69"><name pos:start="51:66" pos:end="51:69">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:39">return <expr pos:start="53:20" pos:end="53:38"><name pos:start="53:20" pos:end="53:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:40"><expr pos:start="57:9" pos:end="57:39"><name pos:start="57:9" pos:end="57:11">ptr</name> <operator pos:start="57:13" pos:end="57:14">+=</operator> <call pos:start="57:16" pos:end="57:35"><name pos:start="57:16" pos:end="57:22">strcspn</name><argument_list pos:start="57:23" pos:end="57:35">(<argument pos:start="57:24" pos:end="57:26"><expr pos:start="57:24" pos:end="57:26"><name pos:start="57:24" pos:end="57:26">ptr</name></expr></argument>, <argument pos:start="57:29" pos:end="57:34"><expr pos:start="57:29" pos:end="57:34"><literal type="string" pos:start="57:29" pos:end="57:34">"\n\r"</literal></expr></argument>)</argument_list></call> <operator pos:start="57:37" pos:end="57:37">+</operator> <literal type="number" pos:start="57:39" pos:end="57:39">1</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="63:5" pos:end="65:19"><if pos:start="63:5" pos:end="65:19">if <condition pos:start="63:8" pos:end="63:47">(<expr pos:start="63:9" pos:end="63:46"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:12">ret</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:41"><name pos:start="63:16" pos:end="63:28">ff_get_buffer</name><argument_list pos:start="63:29" pos:end="63:41">(<argument pos:start="63:30" pos:end="63:34"><expr pos:start="63:30" pos:end="63:34"><name pos:start="63:30" pos:end="63:34">avctx</name></expr></argument>, <argument pos:start="63:37" pos:end="63:37"><expr pos:start="63:37" pos:end="63:37"><name pos:start="63:37" pos:end="63:37">p</name></expr></argument>, <argument pos:start="63:40" pos:end="63:40"><expr pos:start="63:40" pos:end="63:40"><literal type="number" pos:start="63:40" pos:end="63:40">0</literal></expr></argument>)</argument_list></call><operator pos:start="63:42" pos:end="63:42">)</operator> <operator pos:start="63:44" pos:end="63:44">&lt;</operator> <literal type="number" pos:start="63:46" pos:end="63:46">0</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:19"><block_content pos:start="65:9" pos:end="65:19">

        <return pos:start="65:9" pos:end="65:19">return <expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="69:5" pos:end="69:31">// goto start of image data</comment>

    <expr_stmt pos:start="71:5" pos:end="71:33"><expr pos:start="71:5" pos:end="71:32"><name pos:start="71:5" pos:end="71:7">ptr</name> <operator pos:start="71:9" pos:end="71:10">+=</operator> <call pos:start="71:12" pos:end="71:28"><name pos:start="71:12" pos:end="71:18">strcspn</name><argument_list pos:start="71:19" pos:end="71:28">(<argument pos:start="71:20" pos:end="71:22"><expr pos:start="71:20" pos:end="71:22"><name pos:start="71:20" pos:end="71:22">ptr</name></expr></argument>, <argument pos:start="71:25" pos:end="71:27"><expr pos:start="71:25" pos:end="71:27"><literal type="string" pos:start="71:25" pos:end="71:27">"{"</literal></expr></argument>)</argument_list></call> <operator pos:start="71:30" pos:end="71:30">+</operator> <literal type="number" pos:start="71:32" pos:end="71:32">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:38"><expr pos:start="75:5" pos:end="75:37"><name pos:start="75:5" pos:end="75:12">linesize</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <operator pos:start="75:16" pos:end="75:16">(</operator><name pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:21">avctx</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:28">width</name></name> <operator pos:start="75:30" pos:end="75:30">+</operator> <literal type="number" pos:start="75:32" pos:end="75:32">7</literal><operator pos:start="75:33" pos:end="75:33">)</operator> <operator pos:start="75:35" pos:end="75:35">/</operator> <literal type="number" pos:start="75:37" pos:end="75:37">8</literal></expr>;</expr_stmt>

    <for pos:start="77:5" pos:end="111:5">for <control pos:start="77:9" pos:end="77:39">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:34"><expr pos:start="77:17" pos:end="77:33"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:19">&lt;</operator> <name pos:start="77:21" pos:end="77:33"><name pos:start="77:21" pos:end="77:25">avctx</name><operator pos:start="77:26" pos:end="77:27">-&gt;</operator><name pos:start="77:28" pos:end="77:33">height</name></name></expr>;</condition> <incr pos:start="77:36" pos:end="77:38"><expr pos:start="77:36" pos:end="77:38"><name pos:start="77:36" pos:end="77:36">i</name><operator pos:start="77:37" pos:end="77:38">++</operator></expr></incr>)</control> <block pos:start="77:41" pos:end="111:5">{<block_content pos:start="79:9" pos:end="109:9">

        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:11">dst</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:24"><name pos:start="79:15" pos:end="79:15">p</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:21">data</name><index pos:start="79:22" pos:end="79:24">[<expr pos:start="79:23" pos:end="79:23"><literal type="number" pos:start="79:23" pos:end="79:23">0</literal></expr>]</index></name> <operator pos:start="79:26" pos:end="79:26">+</operator> <name pos:start="79:28" pos:end="79:28">i</name> <operator pos:start="79:30" pos:end="79:30">*</operator> <name pos:start="79:32" pos:end="79:45"><name pos:start="79:32" pos:end="79:32">p</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:42">linesize</name><index pos:start="79:43" pos:end="79:45">[<expr pos:start="79:44" pos:end="79:44"><literal type="number" pos:start="79:44" pos:end="79:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="81:9" pos:end="109:9">for <control pos:start="81:13" pos:end="81:38">(<init pos:start="81:14" pos:end="81:19"><expr pos:start="81:14" pos:end="81:18"><name pos:start="81:14" pos:end="81:14">j</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <literal type="number" pos:start="81:18" pos:end="81:18">0</literal></expr>;</init> <condition pos:start="81:21" pos:end="81:33"><expr pos:start="81:21" pos:end="81:32"><name pos:start="81:21" pos:end="81:21">j</name> <operator pos:start="81:23" pos:end="81:23">&lt;</operator> <name pos:start="81:25" pos:end="81:32">linesize</name></expr>;</condition> <incr pos:start="81:35" pos:end="81:37"><expr pos:start="81:35" pos:end="81:37"><name pos:start="81:35" pos:end="81:35">j</name><operator pos:start="81:36" pos:end="81:37">++</operator></expr></incr>)</control> <block pos:start="81:40" pos:end="109:9">{<block_content pos:start="83:13" pos:end="107:13">

            <decl_stmt pos:start="83:13" pos:end="83:24"><decl pos:start="83:13" pos:end="83:23"><type pos:start="83:13" pos:end="83:19"><name pos:start="83:13" pos:end="83:19">uint8_t</name></type> <name pos:start="83:21" pos:end="83:23">val</name></decl>;</decl_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:41"><expr pos:start="87:13" pos:end="87:40"><name pos:start="87:13" pos:end="87:15">ptr</name> <operator pos:start="87:17" pos:end="87:18">+=</operator> <call pos:start="87:20" pos:end="87:36"><name pos:start="87:20" pos:end="87:26">strcspn</name><argument_list pos:start="87:27" pos:end="87:36">(<argument pos:start="87:28" pos:end="87:30"><expr pos:start="87:28" pos:end="87:30"><name pos:start="87:28" pos:end="87:30">ptr</name></expr></argument>, <argument pos:start="87:33" pos:end="87:35"><expr pos:start="87:33" pos:end="87:35"><literal type="string" pos:start="87:33" pos:end="87:35">"x"</literal></expr></argument>)</argument_list></call> <operator pos:start="87:38" pos:end="87:38">+</operator> <literal type="number" pos:start="87:40" pos:end="87:40">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="107:13"><if pos:start="89:13" pos:end="101:13">if <condition pos:start="89:16" pos:end="89:47">(<expr pos:start="89:17" pos:end="89:46"><name pos:start="89:17" pos:end="89:19">ptr</name> <operator pos:start="89:21" pos:end="89:21">&lt;</operator> <name pos:start="89:23" pos:end="89:25">end</name> <operator pos:start="89:27" pos:end="89:28">&amp;&amp;</operator> <call pos:start="89:30" pos:end="89:46"><name pos:start="89:30" pos:end="89:40">av_isxdigit</name><argument_list pos:start="89:41" pos:end="89:46">(<argument pos:start="89:42" pos:end="89:45"><expr pos:start="89:42" pos:end="89:45"><operator pos:start="89:42" pos:end="89:42">*</operator><name pos:start="89:43" pos:end="89:45">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:49" pos:end="101:13">{<block_content pos:start="91:17" pos:end="99:41">

                <expr_stmt pos:start="91:17" pos:end="91:36"><expr pos:start="91:17" pos:end="91:35"><name pos:start="91:17" pos:end="91:19">val</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <call pos:start="91:23" pos:end="91:35"><name pos:start="91:23" pos:end="91:29">convert</name><argument_list pos:start="91:30" pos:end="91:35">(<argument pos:start="91:31" pos:end="91:34"><expr pos:start="91:31" pos:end="91:34"><operator pos:start="91:31" pos:end="91:31">*</operator><name pos:start="91:32" pos:end="91:34">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:22"><expr pos:start="93:17" pos:end="93:21"><name pos:start="93:17" pos:end="93:19">ptr</name><operator pos:start="93:20" pos:end="93:21">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="95:17" pos:end="97:53"><if pos:start="95:17" pos:end="97:53">if <condition pos:start="95:20" pos:end="95:38">(<expr pos:start="95:21" pos:end="95:37"><call pos:start="95:21" pos:end="95:37"><name pos:start="95:21" pos:end="95:31">av_isxdigit</name><argument_list pos:start="95:32" pos:end="95:37">(<argument pos:start="95:33" pos:end="95:36"><expr pos:start="95:33" pos:end="95:36"><operator pos:start="95:33" pos:end="95:33">*</operator><name pos:start="95:34" pos:end="95:36">ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="97:21" pos:end="97:53"><block_content pos:start="97:21" pos:end="97:53">

                    <expr_stmt pos:start="97:21" pos:end="97:53"><expr pos:start="97:21" pos:end="97:52"><name pos:start="97:21" pos:end="97:23">val</name> <operator pos:start="97:25" pos:end="97:25">=</operator> <operator pos:start="97:27" pos:end="97:27">(</operator><name pos:start="97:28" pos:end="97:30">val</name> <operator pos:start="97:32" pos:end="97:33">&lt;&lt;</operator> <literal type="number" pos:start="97:35" pos:end="97:35">4</literal><operator pos:start="97:36" pos:end="97:36">)</operator> <operator pos:start="97:38" pos:end="97:38">+</operator> <call pos:start="97:40" pos:end="97:52"><name pos:start="97:40" pos:end="97:46">convert</name><argument_list pos:start="97:47" pos:end="97:52">(<argument pos:start="97:48" pos:end="97:51"><expr pos:start="97:48" pos:end="97:51"><operator pos:start="97:48" pos:end="97:48">*</operator><name pos:start="97:49" pos:end="97:51">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:41"><expr pos:start="99:17" pos:end="99:40"><operator pos:start="99:17" pos:end="99:17">*</operator><name pos:start="99:18" pos:end="99:20">dst</name><operator pos:start="99:21" pos:end="99:22">++</operator> <operator pos:start="99:24" pos:end="99:24">=</operator> <name pos:start="99:26" pos:end="99:40"><name pos:start="99:26" pos:end="99:35">ff_reverse</name><index pos:start="99:36" pos:end="99:40">[<expr pos:start="99:37" pos:end="99:39"><name pos:start="99:37" pos:end="99:39">val</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="101:15" pos:end="107:13">else <block pos:start="101:20" pos:end="107:13">{<block_content pos:start="103:17" pos:end="105:43">

                <expr_stmt pos:start="103:17" pos:end="103:80"><expr pos:start="103:17" pos:end="103:79"><call pos:start="103:17" pos:end="103:79"><name pos:start="103:17" pos:end="103:22">av_log</name><argument_list pos:start="103:23" pos:end="103:79">(<argument pos:start="103:24" pos:end="103:28"><expr pos:start="103:24" pos:end="103:28"><name pos:start="103:24" pos:end="103:28">avctx</name></expr></argument>, <argument pos:start="103:31" pos:end="103:42"><expr pos:start="103:31" pos:end="103:42"><name pos:start="103:31" pos:end="103:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:45" pos:end="103:73"><expr pos:start="103:45" pos:end="103:73"><literal type="string" pos:start="103:45" pos:end="103:73">"Unexpected data at '%.8s'\n"</literal></expr></argument>, <argument pos:start="103:76" pos:end="103:78"><expr pos:start="103:76" pos:end="103:78"><name pos:start="103:76" pos:end="103:78">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="105:17" pos:end="105:43">return <expr pos:start="105:24" pos:end="105:42"><name pos:start="105:24" pos:end="105:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="115:5" pos:end="115:21"><expr pos:start="115:5" pos:end="115:20"><name pos:start="115:5" pos:end="115:16"><name pos:start="115:5" pos:end="115:5">p</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:16">key_frame</name></name> <operator pos:start="115:18" pos:end="115:18">=</operator> <literal type="number" pos:start="115:20" pos:end="115:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:37"><expr pos:start="117:5" pos:end="117:36"><name pos:start="117:5" pos:end="117:16"><name pos:start="117:5" pos:end="117:5">p</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:16">pict_type</name></name> <operator pos:start="117:18" pos:end="117:18">=</operator> <name pos:start="117:20" pos:end="117:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:25"><expr pos:start="121:5" pos:end="121:24"><operator pos:start="121:5" pos:end="121:5">*</operator><name pos:start="121:6" pos:end="121:14">got_frame</name>       <operator pos:start="121:22" pos:end="121:22">=</operator> <literal type="number" pos:start="121:24" pos:end="121:24">1</literal></expr>;</expr_stmt>



    <return pos:start="125:5" pos:end="125:23">return <expr pos:start="125:12" pos:end="125:22"><name pos:start="125:12" pos:end="125:22"><name pos:start="125:12" pos:end="125:16">avpkt</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
