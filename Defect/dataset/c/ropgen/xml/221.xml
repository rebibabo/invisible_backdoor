<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/221.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">pc_machine_done</name><parameter_list pos:start="1:21" pos:end="1:52">(<parameter pos:start="1:22" pos:end="1:39"><decl pos:start="1:22" pos:end="1:39"><type pos:start="1:22" pos:end="1:39"><name pos:start="1:22" pos:end="1:29">Notifier</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:39">notifier</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:51"><decl pos:start="1:42" pos:end="1:51"><type pos:start="1:42" pos:end="1:51"><name pos:start="1:42" pos:end="1:45">void</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:5">

    <decl_stmt pos:start="5:5" pos:end="7:70"><decl pos:start="5:5" pos:end="7:69"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">PCMachineState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:24">pcms</name> <init pos:start="5:26" pos:end="7:69">= <expr pos:start="5:28" pos:end="7:69"><call pos:start="5:28" pos:end="7:69"><name pos:start="5:28" pos:end="5:39">container_of</name><argument_list pos:start="5:40" pos:end="7:69">(<argument pos:start="5:41" pos:end="5:48"><expr pos:start="5:41" pos:end="5:48"><name pos:start="5:41" pos:end="5:48">notifier</name></expr></argument>,

                                        <argument pos:start="7:41" pos:end="7:54"><expr pos:start="7:41" pos:end="7:54"><name pos:start="7:41" pos:end="7:54">PCMachineState</name></expr></argument>, <argument pos:start="7:57" pos:end="7:68"><expr pos:start="7:57" pos:end="7:68"><name pos:start="7:57" pos:end="7:68">machine_done</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">PCIBus</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:15">bus</name> <init pos:start="9:17" pos:end="9:27">= <expr pos:start="9:19" pos:end="9:27"><name pos:start="9:19" pos:end="9:27"><name pos:start="9:19" pos:end="9:22">pcms</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:27">bus</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:32">/* set the number of CPUs */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:51"><expr pos:start="15:5" pos:end="15:50"><call pos:start="15:5" pos:end="15:50"><name pos:start="15:5" pos:end="15:22">rtc_set_cpus_count</name><argument_list pos:start="15:23" pos:end="15:50">(<argument pos:start="15:24" pos:end="15:32"><expr pos:start="15:24" pos:end="15:32"><name pos:start="15:24" pos:end="15:32"><name pos:start="15:24" pos:end="15:27">pcms</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:32">rtc</name></name></expr></argument>, <argument pos:start="15:35" pos:end="15:49"><expr pos:start="15:35" pos:end="15:49"><name pos:start="15:35" pos:end="15:49"><name pos:start="15:35" pos:end="15:38">pcms</name><operator pos:start="15:39" pos:end="15:40">-&gt;</operator><name pos:start="15:41" pos:end="15:49">boot_cpus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="49:5"><if pos:start="19:5" pos:end="49:5">if <condition pos:start="19:8" pos:end="19:12">(<expr pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">bus</name></expr>)</condition> <block pos:start="19:14" pos:end="49:5">{<block_content pos:start="21:9" pos:end="47:9">

        <decl_stmt pos:start="21:9" pos:end="21:28"><decl pos:start="21:9" pos:end="21:27"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:23">extra_hosts</name> <init pos:start="21:25" pos:end="21:27">= <expr pos:start="21:27" pos:end="21:27"><literal type="number" pos:start="21:27" pos:end="21:27">0</literal></expr></init></decl>;</decl_stmt>



        <macro pos:start="25:9" pos:end="25:48"><name pos:start="25:9" pos:end="25:21">QLIST_FOREACH</name><argument_list pos:start="25:22" pos:end="25:48">(<argument pos:start="25:23" pos:end="25:25">bus</argument>, <argument pos:start="25:28" pos:end="25:38">&amp;bus-&gt;child</argument>, <argument pos:start="25:41" pos:end="25:47">sibling</argument>)</argument_list></macro> <block pos:start="25:50" pos:end="35:9">{<block_content pos:start="29:13" pos:end="33:13">

            <comment type="block" pos:start="27:13" pos:end="27:46">/* look for expander root buses */</comment>

            <if_stmt pos:start="29:13" pos:end="33:13"><if pos:start="29:13" pos:end="33:13">if <condition pos:start="29:16" pos:end="29:37">(<expr pos:start="29:17" pos:end="29:36"><call pos:start="29:17" pos:end="29:36"><name pos:start="29:17" pos:end="29:31">pci_bus_is_root</name><argument_list pos:start="29:32" pos:end="29:36">(<argument pos:start="29:33" pos:end="29:35"><expr pos:start="29:33" pos:end="29:35"><name pos:start="29:33" pos:end="29:35">bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:39" pos:end="33:13">{<block_content pos:start="31:17" pos:end="31:30">

                <expr_stmt pos:start="31:17" pos:end="31:30"><expr pos:start="31:17" pos:end="31:29"><name pos:start="31:17" pos:end="31:27">extra_hosts</name><operator pos:start="31:28" pos:end="31:29">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <if_stmt pos:start="37:9" pos:end="47:9"><if pos:start="37:9" pos:end="47:9">if <condition pos:start="37:12" pos:end="37:40">(<expr pos:start="37:13" pos:end="37:39"><name pos:start="37:13" pos:end="37:23">extra_hosts</name> <operator pos:start="37:25" pos:end="37:26">&amp;&amp;</operator> <name pos:start="37:28" pos:end="37:39"><name pos:start="37:28" pos:end="37:31">pcms</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:39">fw_cfg</name></name></expr>)</condition> <block pos:start="37:42" pos:end="47:9">{<block_content pos:start="39:13" pos:end="45:62">

            <decl_stmt pos:start="39:13" pos:end="39:51"><decl pos:start="39:13" pos:end="39:50"><type pos:start="39:13" pos:end="39:22"><name pos:start="39:13" pos:end="39:20">uint64_t</name> <modifier pos:start="39:22" pos:end="39:22">*</modifier></type><name pos:start="39:23" pos:end="39:25">val</name> <init pos:start="39:27" pos:end="39:50">= <expr pos:start="39:29" pos:end="39:50"><call pos:start="39:29" pos:end="39:50"><name pos:start="39:29" pos:end="39:36">g_malloc</name><argument_list pos:start="39:37" pos:end="39:50">(<argument pos:start="39:38" pos:end="39:49"><expr pos:start="39:38" pos:end="39:49"><sizeof pos:start="39:38" pos:end="39:49">sizeof<argument_list pos:start="39:44" pos:end="39:49">(<argument pos:start="39:45" pos:end="39:48"><expr pos:start="39:45" pos:end="39:48"><operator pos:start="39:45" pos:end="39:45">*</operator><name pos:start="39:46" pos:end="39:48">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:44"><expr pos:start="41:13" pos:end="41:43"><operator pos:start="41:13" pos:end="41:13">*</operator><name pos:start="41:14" pos:end="41:16">val</name> <operator pos:start="41:18" pos:end="41:18">=</operator> <call pos:start="41:20" pos:end="41:43"><name pos:start="41:20" pos:end="41:30">cpu_to_le64</name><argument_list pos:start="41:31" pos:end="41:43">(<argument pos:start="41:32" pos:end="41:42"><expr pos:start="41:32" pos:end="41:42"><name pos:start="41:32" pos:end="41:42">extra_hosts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="45:62"><expr pos:start="43:13" pos:end="45:61"><call pos:start="43:13" pos:end="45:61"><name pos:start="43:13" pos:end="43:27">fw_cfg_add_file</name><argument_list pos:start="43:28" pos:end="45:61">(<argument pos:start="43:29" pos:end="43:40"><expr pos:start="43:29" pos:end="43:40"><name pos:start="43:29" pos:end="43:40"><name pos:start="43:29" pos:end="43:32">pcms</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:40">fw_cfg</name></name></expr></argument>,

                    <argument pos:start="45:21" pos:end="45:41"><expr pos:start="45:21" pos:end="45:41"><literal type="string" pos:start="45:21" pos:end="45:41">"etc/extra-pci-roots"</literal></expr></argument>, <argument pos:start="45:44" pos:end="45:46"><expr pos:start="45:44" pos:end="45:46"><name pos:start="45:44" pos:end="45:46">val</name></expr></argument>, <argument pos:start="45:49" pos:end="45:60"><expr pos:start="45:49" pos:end="45:60"><sizeof pos:start="45:49" pos:end="45:60">sizeof<argument_list pos:start="45:55" pos:end="45:60">(<argument pos:start="45:56" pos:end="45:59"><expr pos:start="45:56" pos:end="45:59"><operator pos:start="45:56" pos:end="45:56">*</operator><name pos:start="45:57" pos:end="45:59">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:17"><expr pos:start="53:5" pos:end="53:16"><call pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:14">acpi_setup</name><argument_list pos:start="53:15" pos:end="53:16">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="65:5">if <condition pos:start="55:8" pos:end="55:21">(<expr pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:12">pcms</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:20">fw_cfg</name></name></expr>)</condition> <block pos:start="55:23" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:73">

        <expr_stmt pos:start="57:9" pos:end="57:30"><expr pos:start="57:9" pos:end="57:29"><call pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:23">pc_build_smbios</name><argument_list pos:start="57:24" pos:end="57:29">(<argument pos:start="57:25" pos:end="57:28"><expr pos:start="57:25" pos:end="57:28"><name pos:start="57:25" pos:end="57:28">pcms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:44"><expr pos:start="59:9" pos:end="59:43"><call pos:start="59:9" pos:end="59:43"><name pos:start="59:9" pos:end="59:37">pc_build_feature_control_file</name><argument_list pos:start="59:38" pos:end="59:43">(<argument pos:start="59:39" pos:end="59:42"><expr pos:start="59:39" pos:end="59:42"><name pos:start="59:39" pos:end="59:42">pcms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="61:9" pos:end="61:69">/* update FW_CFG_NB_CPUS to account for -device added CPUs */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:73"><expr pos:start="63:9" pos:end="63:72"><call pos:start="63:9" pos:end="63:72"><name pos:start="63:9" pos:end="63:25">fw_cfg_modify_i16</name><argument_list pos:start="63:26" pos:end="63:72">(<argument pos:start="63:27" pos:end="63:38"><expr pos:start="63:27" pos:end="63:38"><name pos:start="63:27" pos:end="63:38"><name pos:start="63:27" pos:end="63:30">pcms</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:38">fw_cfg</name></name></expr></argument>, <argument pos:start="63:41" pos:end="63:54"><expr pos:start="63:41" pos:end="63:54"><name pos:start="63:41" pos:end="63:54">FW_CFG_NB_CPUS</name></expr></argument>, <argument pos:start="63:57" pos:end="63:71"><expr pos:start="63:57" pos:end="63:71"><name pos:start="63:57" pos:end="63:71"><name pos:start="63:57" pos:end="63:60">pcms</name><operator pos:start="63:61" pos:end="63:62">-&gt;</operator><name pos:start="63:63" pos:end="63:71">boot_cpus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="91:5"><if pos:start="69:5" pos:end="91:5">if <condition pos:start="69:8" pos:end="69:34">(<expr pos:start="69:9" pos:end="69:33"><name pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:12">pcms</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:27">apic_id_limit</name></name> <operator pos:start="69:29" pos:end="69:29">&gt;</operator> <literal type="number" pos:start="69:31" pos:end="69:33">255</literal></expr>)</condition> <block pos:start="69:36" pos:end="91:5">{<block_content pos:start="71:9" pos:end="89:9">

        <decl_stmt pos:start="71:9" pos:end="71:77"><decl pos:start="71:9" pos:end="71:76"><type pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:23">IntelIOMMUState</name> <modifier pos:start="71:25" pos:end="71:25">*</modifier></type><name pos:start="71:26" pos:end="71:30">iommu</name> <init pos:start="71:32" pos:end="71:76">= <expr pos:start="71:34" pos:end="71:76"><call pos:start="71:34" pos:end="71:76"><name pos:start="71:34" pos:end="71:51">INTEL_IOMMU_DEVICE</name><argument_list pos:start="71:52" pos:end="71:76">(<argument pos:start="71:53" pos:end="71:75"><expr pos:start="71:53" pos:end="71:75"><call pos:start="71:53" pos:end="71:75"><name pos:start="71:53" pos:end="71:73">x86_iommu_get_default</name><argument_list pos:start="71:74" pos:end="71:75">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="75:9" pos:end="89:9"><if pos:start="75:9" pos:end="89:9">if <condition pos:start="75:12" pos:end="77:46">(<expr pos:start="75:13" pos:end="77:45"><operator pos:start="75:13" pos:end="75:13">!</operator><name pos:start="75:14" pos:end="75:18">iommu</name> <operator pos:start="75:20" pos:end="75:21">||</operator> <operator pos:start="75:23" pos:end="75:23">!</operator><name pos:start="75:24" pos:end="75:54"><name pos:start="75:24" pos:end="75:28">iommu</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:39">x86_iommu</name><operator pos:start="75:40" pos:end="75:40">.</operator><name pos:start="75:41" pos:end="75:54">intr_supported</name></name> <operator pos:start="75:56" pos:end="75:57">||</operator>

            <name pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:17">iommu</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:27">intr_eim</name></name> <operator pos:start="77:29" pos:end="77:30">!=</operator> <name pos:start="77:32" pos:end="77:45">ON_OFF_AUTO_ON</name></expr>)</condition> <block pos:start="77:48" pos:end="89:9">{<block_content pos:start="79:13" pos:end="87:31">

            <expr_stmt pos:start="79:13" pos:end="85:67"><expr pos:start="79:13" pos:end="85:66"><call pos:start="79:13" pos:end="85:66"><name pos:start="79:13" pos:end="79:24">error_report</name><argument_list pos:start="79:25" pos:end="85:66">(<argument pos:start="79:26" pos:end="85:65"><expr pos:start="79:26" pos:end="85:65"><literal type="string" pos:start="79:26" pos:end="79:63">"current -smp configuration requires "</literal>

                         <literal type="string" pos:start="81:26" pos:end="81:60">"Extended Interrupt Mode enabled. "</literal>

                         <literal type="string" pos:start="83:26" pos:end="83:55">"You can add an IOMMU using: "</literal>

                         <literal type="string" pos:start="85:26" pos:end="85:65">"-device intel-iommu,intremap=on,eim=on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:31"><expr pos:start="87:13" pos:end="87:30"><call pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:16">exit</name><argument_list pos:start="87:17" pos:end="87:30">(<argument pos:start="87:18" pos:end="87:29"><expr pos:start="87:18" pos:end="87:29"><name pos:start="87:18" pos:end="87:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
