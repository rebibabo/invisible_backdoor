<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25141.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">url_open</name><parameter_list pos:start="1:13" pos:end="1:63">(<parameter pos:start="1:14" pos:end="1:29"><decl pos:start="1:14" pos:end="1:29"><type pos:start="1:14" pos:end="1:29"><name pos:start="1:14" pos:end="1:23">URLContext</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier><modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:29">puc</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:41">char</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:51">filename</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:62"><decl pos:start="1:54" pos:end="1:62"><type pos:start="1:54" pos:end="1:62"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:62">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:27">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">URLProtocol</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">up</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:23"><name pos:start="9:10" pos:end="9:18">proto_str</name><index pos:start="9:19" pos:end="9:23">[<expr pos:start="9:20" pos:end="9:22"><literal type="number" pos:start="9:20" pos:end="9:22">128</literal></expr>]</index></name></decl>, <decl pos:start="9:26" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:8"><modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:27">q</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:17"><expr pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:5">p</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <name pos:start="13:9" pos:end="13:16">filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:18"><expr pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:5">q</name> <operator pos:start="15:7" pos:end="15:7">=</operator> <name pos:start="15:9" pos:end="15:17">proto_str</name></expr>;</expr_stmt>

    <while pos:start="17:5" pos:end="31:5">while <condition pos:start="17:11" pos:end="17:35">(<expr pos:start="17:12" pos:end="17:34"><operator pos:start="17:12" pos:end="17:12">*</operator><name pos:start="17:13" pos:end="17:13">p</name> <operator pos:start="17:15" pos:end="17:16">!=</operator> <literal type="char" pos:start="17:18" pos:end="17:21">'\0'</literal> <operator pos:start="17:23" pos:end="17:24">&amp;&amp;</operator> <operator pos:start="17:26" pos:end="17:26">*</operator><name pos:start="17:27" pos:end="17:27">p</name> <operator pos:start="17:29" pos:end="17:30">!=</operator> <literal type="char" pos:start="17:32" pos:end="17:34">':'</literal></expr>)</condition> <block pos:start="17:37" pos:end="31:5">{<block_content pos:start="21:9" pos:end="29:12">

        <comment type="block" pos:start="19:9" pos:end="19:57">/* protocols can only contain alphabetic chars */</comment>

        <if_stmt pos:start="21:9" pos:end="23:28"><if pos:start="21:9" pos:end="23:28">if <condition pos:start="21:12" pos:end="21:25">(<expr pos:start="21:13" pos:end="21:24"><operator pos:start="21:13" pos:end="21:13">!</operator><call pos:start="21:14" pos:end="21:24"><name pos:start="21:14" pos:end="21:20">isalpha</name><argument_list pos:start="21:21" pos:end="21:24">(<argument pos:start="21:22" pos:end="21:23"><expr pos:start="21:22" pos:end="21:23"><operator pos:start="21:22" pos:end="21:22">*</operator><name pos:start="21:23" pos:end="21:23">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:28"><block_content pos:start="23:13" pos:end="23:28">

            <goto pos:start="23:13" pos:end="23:28">goto <name pos:start="23:18" pos:end="23:27">file_proto</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="25:9" pos:end="27:22"><if pos:start="25:9" pos:end="27:22">if <condition pos:start="25:12" pos:end="25:52">(<expr pos:start="25:13" pos:end="25:51"><operator pos:start="25:13" pos:end="25:13">(</operator><name pos:start="25:14" pos:end="25:14">q</name> <operator pos:start="25:16" pos:end="25:16">-</operator> <name pos:start="25:18" pos:end="25:26">proto_str</name><operator pos:start="25:27" pos:end="25:27">)</operator> <operator pos:start="25:29" pos:end="25:29">&lt;</operator> <sizeof pos:start="25:31" pos:end="25:47">sizeof<argument_list pos:start="25:37" pos:end="25:47">(<argument pos:start="25:38" pos:end="25:46"><expr pos:start="25:38" pos:end="25:46"><name pos:start="25:38" pos:end="25:46">proto_str</name></expr></argument>)</argument_list></sizeof> <operator pos:start="25:49" pos:end="25:49">-</operator> <literal type="number" pos:start="25:51" pos:end="25:51">1</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:22"><block_content pos:start="27:13" pos:end="27:22">

            <expr_stmt pos:start="27:13" pos:end="27:22"><expr pos:start="27:13" pos:end="27:21"><operator pos:start="27:13" pos:end="27:13">*</operator><name pos:start="27:14" pos:end="27:14">q</name><operator pos:start="27:15" pos:end="27:16">++</operator> <operator pos:start="27:18" pos:end="27:18">=</operator> <operator pos:start="27:20" pos:end="27:20">*</operator><name pos:start="27:21" pos:end="27:21">p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:12"><expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:9">p</name><operator pos:start="29:10" pos:end="29:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <comment type="block" pos:start="33:5" pos:end="33:69">/* if the protocol has length 1, we consider it is a dos drive */</comment>

    <if_stmt pos:start="35:5" pos:end="45:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:43">(<expr pos:start="35:9" pos:end="35:42"><operator pos:start="35:9" pos:end="35:9">*</operator><name pos:start="35:10" pos:end="35:10">p</name> <operator pos:start="35:12" pos:end="35:13">==</operator> <literal type="char" pos:start="35:15" pos:end="35:18">'\0'</literal> <operator pos:start="35:20" pos:end="35:21">||</operator> <operator pos:start="35:23" pos:end="35:23">(</operator><name pos:start="35:24" pos:end="35:24">q</name> <operator pos:start="35:26" pos:end="35:26">-</operator> <name pos:start="35:28" pos:end="35:36">proto_str</name><operator pos:start="35:37" pos:end="35:37">)</operator> <operator pos:start="35:39" pos:end="35:40">&lt;=</operator> <literal type="number" pos:start="35:42" pos:end="35:42">1</literal></expr>)</condition> <block pos:start="35:45" pos:end="41:5">{<block_content pos:start="37:5" pos:end="39:34">

    <label pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:14">file_proto</name>:</label>

        <expr_stmt pos:start="39:9" pos:end="39:34"><expr pos:start="39:9" pos:end="39:33"><call pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:14">strcpy</name><argument_list pos:start="39:15" pos:end="39:33">(<argument pos:start="39:16" pos:end="39:24"><expr pos:start="39:16" pos:end="39:24"><name pos:start="39:16" pos:end="39:24">proto_str</name></expr></argument>, <argument pos:start="39:27" pos:end="39:32"><expr pos:start="39:27" pos:end="39:32"><literal type="string" pos:start="39:27" pos:end="39:32">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="45:5">else <block pos:start="41:12" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:18">

        <expr_stmt pos:start="43:9" pos:end="43:18"><expr pos:start="43:9" pos:end="43:17"><operator pos:start="43:9" pos:end="43:9">*</operator><name pos:start="43:10" pos:end="43:10">q</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="char" pos:start="43:14" pos:end="43:17">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:24"><expr pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:6">up</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <name pos:start="49:10" pos:end="49:23">first_protocol</name></expr>;</expr_stmt>

    <while pos:start="51:5" pos:end="59:5">while <condition pos:start="51:11" pos:end="51:22">(<expr pos:start="51:12" pos:end="51:21"><name pos:start="51:12" pos:end="51:13">up</name> <operator pos:start="51:15" pos:end="51:16">!=</operator> <name pos:start="51:18" pos:end="51:21">NULL</name></expr>)</condition> <block pos:start="51:24" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:22">

        <if_stmt pos:start="53:9" pos:end="55:64"><if pos:start="53:9" pos:end="55:64">if <condition pos:start="53:12" pos:end="53:41">(<expr pos:start="53:13" pos:end="53:40"><operator pos:start="53:13" pos:end="53:13">!</operator><call pos:start="53:14" pos:end="53:40"><name pos:start="53:14" pos:end="53:19">strcmp</name><argument_list pos:start="53:20" pos:end="53:40">(<argument pos:start="53:21" pos:end="53:29"><expr pos:start="53:21" pos:end="53:29"><name pos:start="53:21" pos:end="53:29">proto_str</name></expr></argument>, <argument pos:start="53:32" pos:end="53:39"><expr pos:start="53:32" pos:end="53:39"><name pos:start="53:32" pos:end="53:39"><name pos:start="53:32" pos:end="53:33">up</name><operator pos:start="53:34" pos:end="53:35">-&gt;</operator><name pos:start="53:36" pos:end="53:39">name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:64"><block_content pos:start="55:13" pos:end="55:64">

            <return pos:start="55:13" pos:end="55:64">return <expr pos:start="55:20" pos:end="55:63"><call pos:start="55:20" pos:end="55:63"><name pos:start="55:20" pos:end="55:36">url_open_protocol</name> <argument_list pos:start="55:38" pos:end="55:63">(<argument pos:start="55:39" pos:end="55:41"><expr pos:start="55:39" pos:end="55:41"><name pos:start="55:39" pos:end="55:41">puc</name></expr></argument>, <argument pos:start="55:44" pos:end="55:45"><expr pos:start="55:44" pos:end="55:45"><name pos:start="55:44" pos:end="55:45">up</name></expr></argument>, <argument pos:start="55:48" pos:end="55:55"><expr pos:start="55:48" pos:end="55:55"><name pos:start="55:48" pos:end="55:55">filename</name></expr></argument>, <argument pos:start="55:58" pos:end="55:62"><expr pos:start="55:58" pos:end="55:62"><name pos:start="55:58" pos:end="55:62">flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:22"><expr pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:10">up</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:21"><name pos:start="57:14" pos:end="57:15">up</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:21">next</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="61:5" pos:end="61:16"><expr pos:start="61:5" pos:end="61:15"><operator pos:start="61:5" pos:end="61:5">*</operator><name pos:start="61:6" pos:end="61:8">puc</name> <operator pos:start="61:10" pos:end="61:10">=</operator> <name pos:start="61:12" pos:end="61:15">NULL</name></expr>;</expr_stmt>

    <return pos:start="63:5" pos:end="63:27">return <expr pos:start="63:12" pos:end="63:26"><call pos:start="63:12" pos:end="63:26"><name pos:start="63:12" pos:end="63:18">AVERROR</name><argument_list pos:start="63:19" pos:end="63:26">(<argument pos:start="63:20" pos:end="63:25"><expr pos:start="63:20" pos:end="63:25"><name pos:start="63:20" pos:end="63:25">ENOENT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
