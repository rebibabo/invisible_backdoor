<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21211.c" pos:tabs="8"><function pos:start="1:1" pos:end="463:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">xlnx_zynqmp_realize</name><parameter_list pos:start="1:32" pos:end="1:63">(<parameter pos:start="1:33" pos:end="1:48"><decl pos:start="1:33" pos:end="1:48"><type pos:start="1:33" pos:end="1:48"><name pos:start="1:33" pos:end="1:43">DeviceState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:55">Error</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="463:1">{<block_content pos:start="5:5" pos:end="461:5">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">XlnxZynqMPState</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">s</name> <init pos:start="5:24" pos:end="5:41">= <expr pos:start="5:26" pos:end="5:41"><call pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:36">XLNX_ZYNQMP</name><argument_list pos:start="5:37" pos:end="5:41">(<argument pos:start="5:38" pos:end="5:40"><expr pos:start="5:38" pos:end="5:40"><name pos:start="5:38" pos:end="5:40">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MemoryRegion</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:31">system_memory</name> <init pos:start="7:33" pos:end="7:53">= <expr pos:start="7:35" pos:end="7:53"><call pos:start="7:35" pos:end="7:53"><name pos:start="7:35" pos:end="7:51">get_system_memory</name><argument_list pos:start="7:52" pos:end="7:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:21">ram_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:68"><decl pos:start="13:5" pos:end="13:67"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:24">boot_cpu</name> <init pos:start="13:26" pos:end="13:67">= <expr pos:start="13:28" pos:end="13:67"><ternary pos:start="13:28" pos:end="13:67"><condition pos:start="13:28" pos:end="13:40"><expr pos:start="13:28" pos:end="13:38"><name pos:start="13:28" pos:end="13:38"><name pos:start="13:28" pos:end="13:28">s</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:38">boot_cpu</name></name></expr> ?</condition><then pos:start="13:42" pos:end="13:52"> <expr pos:start="13:42" pos:end="13:52"><name pos:start="13:42" pos:end="13:52"><name pos:start="13:42" pos:end="13:42">s</name><operator pos:start="13:43" pos:end="13:44">-&gt;</operator><name pos:start="13:45" pos:end="13:52">boot_cpu</name></name></expr> </then><else pos:start="13:54" pos:end="13:67">: <expr pos:start="13:56" pos:end="13:67"><literal type="string" pos:start="13:56" pos:end="13:67">"apu-cpu[0]"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:27">ddr_low_size</name></decl>, <decl pos:start="15:30" pos:end="15:42"><type ref="prev" pos:start="15:5" pos:end="15:14"/><name pos:start="15:30" pos:end="15:42">ddr_high_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:39"><decl pos:start="17:5" pos:end="17:38"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">qemu_irq</name></type> <name pos:start="17:14" pos:end="17:38"><name pos:start="17:14" pos:end="17:20">gic_spi</name><index pos:start="17:21" pos:end="17:38">[<expr pos:start="17:22" pos:end="17:37"><name pos:start="17:22" pos:end="17:37">GIC_NUM_SPI_INTR</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">Error</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:14">err</name> <init pos:start="19:16" pos:end="19:21">= <expr pos:start="19:18" pos:end="19:21"><name pos:start="19:18" pos:end="19:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:46"><expr pos:start="23:5" pos:end="23:45"><name pos:start="23:5" pos:end="23:12">ram_size</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:45"><name pos:start="23:16" pos:end="23:33">memory_region_size</name><argument_list pos:start="23:34" pos:end="23:45">(<argument pos:start="23:35" pos:end="23:44"><expr pos:start="23:35" pos:end="23:44"><name pos:start="23:35" pos:end="23:44"><name pos:start="23:35" pos:end="23:35">s</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:44">ddr_ram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="31:7">/* Create the DDR Memory Regions. User friendly checks should happen at

     * the board level

     */</comment>

    <if_stmt pos:start="33:5" pos:end="69:5"><if pos:start="33:5" pos:end="61:5">if <condition pos:start="33:8" pos:end="33:48">(<expr pos:start="33:9" pos:end="33:47"><name pos:start="33:9" pos:end="33:16">ram_size</name> <operator pos:start="33:18" pos:end="33:18">&gt;</operator> <name pos:start="33:20" pos:end="33:47">XLNX_ZYNQMP_MAX_LOW_RAM_SIZE</name></expr>)</condition> <block pos:start="33:50" pos:end="61:5">{<block_content pos:start="41:9" pos:end="59:54">

        <comment type="block" pos:start="35:9" pos:end="39:11">/* The RAM size is above the maximum available for the low DDR.

         * Create the high DDR memory region as well.

         */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:53"><expr pos:start="41:9" pos:end="41:52"><call pos:start="41:9" pos:end="41:52"><name pos:start="41:9" pos:end="41:14">assert</name><argument_list pos:start="41:15" pos:end="41:52">(<argument pos:start="41:16" pos:end="41:51"><expr pos:start="41:16" pos:end="41:51"><name pos:start="41:16" pos:end="41:23">ram_size</name> <operator pos:start="41:25" pos:end="41:26">&lt;=</operator> <name pos:start="41:28" pos:end="41:51">XLNX_ZYNQMP_MAX_RAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:52"><expr pos:start="43:9" pos:end="43:51"><name pos:start="43:9" pos:end="43:20">ddr_low_size</name> <operator pos:start="43:22" pos:end="43:22">=</operator> <name pos:start="43:24" pos:end="43:51">XLNX_ZYNQMP_MAX_LOW_RAM_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:64"><expr pos:start="45:9" pos:end="45:63"><name pos:start="45:9" pos:end="45:21">ddr_high_size</name> <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:32">ram_size</name> <operator pos:start="45:34" pos:end="45:34">-</operator> <name pos:start="45:36" pos:end="45:63">XLNX_ZYNQMP_MAX_LOW_RAM_SIZE</name></expr>;</expr_stmt>



        <expr_stmt pos:start="49:9" pos:end="53:63"><expr pos:start="49:9" pos:end="53:62"><call pos:start="49:9" pos:end="53:62"><name pos:start="49:9" pos:end="49:32">memory_region_init_alias</name><argument_list pos:start="49:33" pos:end="53:62">(<argument pos:start="49:34" pos:end="49:49"><expr pos:start="49:34" pos:end="49:49"><operator pos:start="49:34" pos:end="49:34">&amp;</operator><name pos:start="49:35" pos:end="49:49"><name pos:start="49:35" pos:end="49:35">s</name><operator pos:start="49:36" pos:end="49:37">-&gt;</operator><name pos:start="49:38" pos:end="49:49">ddr_ram_high</name></name></expr></argument>, <argument pos:start="49:52" pos:end="49:55"><expr pos:start="49:52" pos:end="49:55"><name pos:start="49:52" pos:end="49:55">NULL</name></expr></argument>,

                                 <argument pos:start="51:34" pos:end="51:47"><expr pos:start="51:34" pos:end="51:47"><literal type="string" pos:start="51:34" pos:end="51:47">"ddr-ram-high"</literal></expr></argument>, <argument pos:start="51:50" pos:end="51:59"><expr pos:start="51:50" pos:end="51:59"><name pos:start="51:50" pos:end="51:59"><name pos:start="51:50" pos:end="51:50">s</name><operator pos:start="51:51" pos:end="51:52">-&gt;</operator><name pos:start="51:53" pos:end="51:59">ddr_ram</name></name></expr></argument>,

                                  <argument pos:start="53:35" pos:end="53:46"><expr pos:start="53:35" pos:end="53:46"><name pos:start="53:35" pos:end="53:46">ddr_low_size</name></expr></argument>, <argument pos:start="53:49" pos:end="53:61"><expr pos:start="53:49" pos:end="53:61"><name pos:start="53:49" pos:end="53:61">ddr_high_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="59:54"><expr pos:start="55:9" pos:end="59:53"><call pos:start="55:9" pos:end="59:53"><name pos:start="55:9" pos:end="55:35">memory_region_add_subregion</name><argument_list pos:start="55:36" pos:end="59:53">(<argument pos:start="55:37" pos:end="55:55"><expr pos:start="55:37" pos:end="55:55"><call pos:start="55:37" pos:end="55:55"><name pos:start="55:37" pos:end="55:53">get_system_memory</name><argument_list pos:start="55:54" pos:end="55:55">()</argument_list></call></expr></argument>,

                                    <argument pos:start="57:37" pos:end="57:62"><expr pos:start="57:37" pos:end="57:62"><name pos:start="57:37" pos:end="57:62">XLNX_ZYNQMP_HIGH_RAM_START</name></expr></argument>,

                                    <argument pos:start="59:37" pos:end="59:52"><expr pos:start="59:37" pos:end="59:52"><operator pos:start="59:37" pos:end="59:37">&amp;</operator><name pos:start="59:38" pos:end="59:52"><name pos:start="59:38" pos:end="59:38">s</name><operator pos:start="59:39" pos:end="59:40">-&gt;</operator><name pos:start="59:41" pos:end="59:52">ddr_ram_high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="69:5">else <block pos:start="61:12" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:32">

        <comment type="block" pos:start="63:9" pos:end="63:34">/* RAM must be non-zero */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:25"><expr pos:start="65:9" pos:end="65:24"><call pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:14">assert</name><argument_list pos:start="65:15" pos:end="65:24">(<argument pos:start="65:16" pos:end="65:23"><expr pos:start="65:16" pos:end="65:23"><name pos:start="65:16" pos:end="65:23">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:32"><expr pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:20">ddr_low_size</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <name pos:start="67:24" pos:end="67:31">ram_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="77:47"><expr pos:start="73:5" pos:end="77:46"><call pos:start="73:5" pos:end="77:46"><name pos:start="73:5" pos:end="73:28">memory_region_init_alias</name><argument_list pos:start="73:29" pos:end="77:46">(<argument pos:start="73:30" pos:end="73:44"><expr pos:start="73:30" pos:end="73:44"><operator pos:start="73:30" pos:end="73:30">&amp;</operator><name pos:start="73:31" pos:end="73:44"><name pos:start="73:31" pos:end="73:31">s</name><operator pos:start="73:32" pos:end="73:33">-&gt;</operator><name pos:start="73:34" pos:end="73:44">ddr_ram_low</name></name></expr></argument>, <argument pos:start="73:47" pos:end="73:50"><expr pos:start="73:47" pos:end="73:50"><name pos:start="73:47" pos:end="73:50">NULL</name></expr></argument>,

                             <argument pos:start="75:30" pos:end="75:42"><expr pos:start="75:30" pos:end="75:42"><literal type="string" pos:start="75:30" pos:end="75:42">"ddr-ram-low"</literal></expr></argument>, <argument pos:start="75:45" pos:end="75:54"><expr pos:start="75:45" pos:end="75:54"><name pos:start="75:45" pos:end="75:54"><name pos:start="75:45" pos:end="75:45">s</name><operator pos:start="75:46" pos:end="75:47">-&gt;</operator><name pos:start="75:48" pos:end="75:54">ddr_ram</name></name></expr></argument>,

                              <argument pos:start="77:31" pos:end="77:31"><expr pos:start="77:31" pos:end="77:31"><literal type="number" pos:start="77:31" pos:end="77:31">0</literal></expr></argument>, <argument pos:start="77:34" pos:end="77:45"><expr pos:start="77:34" pos:end="77:45"><name pos:start="77:34" pos:end="77:45">ddr_low_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:73"><expr pos:start="79:5" pos:end="79:72"><call pos:start="79:5" pos:end="79:72"><name pos:start="79:5" pos:end="79:31">memory_region_add_subregion</name><argument_list pos:start="79:32" pos:end="79:72">(<argument pos:start="79:33" pos:end="79:51"><expr pos:start="79:33" pos:end="79:51"><call pos:start="79:33" pos:end="79:51"><name pos:start="79:33" pos:end="79:49">get_system_memory</name><argument_list pos:start="79:50" pos:end="79:51">()</argument_list></call></expr></argument>, <argument pos:start="79:54" pos:end="79:54"><expr pos:start="79:54" pos:end="79:54"><literal type="number" pos:start="79:54" pos:end="79:54">0</literal></expr></argument>, <argument pos:start="79:57" pos:end="79:71"><expr pos:start="79:57" pos:end="79:71"><operator pos:start="79:57" pos:end="79:57">&amp;</operator><name pos:start="79:58" pos:end="79:71"><name pos:start="79:58" pos:end="79:58">s</name><operator pos:start="79:59" pos:end="79:60">-&gt;</operator><name pos:start="79:61" pos:end="79:71">ddr_ram_low</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:35">/* Create the four OCM banks */</comment>

    <for pos:start="85:5" pos:end="109:5">for <control pos:start="85:9" pos:end="85:51">(<init pos:start="85:10" pos:end="85:15"><expr pos:start="85:10" pos:end="85:14"><name pos:start="85:10" pos:end="85:10">i</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>;</init> <condition pos:start="85:17" pos:end="85:46"><expr pos:start="85:17" pos:end="85:45"><name pos:start="85:17" pos:end="85:17">i</name> <operator pos:start="85:19" pos:end="85:19">&lt;</operator> <name pos:start="85:21" pos:end="85:45">XLNX_ZYNQMP_NUM_OCM_BANKS</name></expr>;</condition> <incr pos:start="85:48" pos:end="85:50"><expr pos:start="85:48" pos:end="85:50"><name pos:start="85:48" pos:end="85:48">i</name><operator pos:start="85:49" pos:end="85:50">++</operator></expr></incr>)</control> <block pos:start="85:53" pos:end="109:5">{<block_content pos:start="87:9" pos:end="107:25">

        <decl_stmt pos:start="87:9" pos:end="87:70"><decl pos:start="87:9" pos:end="87:69"><type pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:12">char</name> <modifier pos:start="87:14" pos:end="87:14">*</modifier></type><name pos:start="87:15" pos:end="87:22">ocm_name</name> <init pos:start="87:24" pos:end="87:69">= <expr pos:start="87:26" pos:end="87:69"><call pos:start="87:26" pos:end="87:69"><name pos:start="87:26" pos:end="87:40">g_strdup_printf</name><argument_list pos:start="87:41" pos:end="87:69">(<argument pos:start="87:42" pos:end="87:65"><expr pos:start="87:42" pos:end="87:65"><literal type="string" pos:start="87:42" pos:end="87:65">"zynqmp.ocm_ram_bank_%d"</literal></expr></argument>, <argument pos:start="87:68" pos:end="87:68"><expr pos:start="87:68" pos:end="87:68"><name pos:start="87:68" pos:end="87:68">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="91:9" pos:end="93:71"><expr pos:start="91:9" pos:end="93:70"><call pos:start="91:9" pos:end="93:70"><name pos:start="91:9" pos:end="91:30">memory_region_init_ram</name><argument_list pos:start="91:31" pos:end="93:70">(<argument pos:start="91:32" pos:end="91:45"><expr pos:start="91:32" pos:end="91:45"><operator pos:start="91:32" pos:end="91:32">&amp;</operator><name pos:start="91:33" pos:end="91:45"><name pos:start="91:33" pos:end="91:33">s</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:42">ocm_ram</name><index pos:start="91:43" pos:end="91:45">[<expr pos:start="91:44" pos:end="91:44"><name pos:start="91:44" pos:end="91:44">i</name></expr>]</index></name></expr></argument>, <argument pos:start="91:48" pos:end="91:51"><expr pos:start="91:48" pos:end="91:51"><name pos:start="91:48" pos:end="91:51">NULL</name></expr></argument>, <argument pos:start="91:54" pos:end="91:61"><expr pos:start="91:54" pos:end="91:61"><name pos:start="91:54" pos:end="91:61">ocm_name</name></expr></argument>,

                               <argument pos:start="93:32" pos:end="93:55"><expr pos:start="93:32" pos:end="93:55"><name pos:start="93:32" pos:end="93:55">XLNX_ZYNQMP_OCM_RAM_SIZE</name></expr></argument>, <argument pos:start="93:58" pos:end="93:69"><expr pos:start="93:58" pos:end="93:69"><operator pos:start="93:58" pos:end="93:58">&amp;</operator><name pos:start="93:59" pos:end="93:69">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:52"><expr pos:start="95:9" pos:end="95:51"><call pos:start="95:9" pos:end="95:51"><name pos:start="95:9" pos:end="95:35">vmstate_register_ram_global</name><argument_list pos:start="95:36" pos:end="95:51">(<argument pos:start="95:37" pos:end="95:50"><expr pos:start="95:37" pos:end="95:50"><operator pos:start="95:37" pos:end="95:37">&amp;</operator><name pos:start="95:38" pos:end="95:50"><name pos:start="95:38" pos:end="95:38">s</name><operator pos:start="95:39" pos:end="95:40">-&gt;</operator><name pos:start="95:41" pos:end="95:47">ocm_ram</name><index pos:start="95:48" pos:end="95:50">[<expr pos:start="95:49" pos:end="95:49"><name pos:start="95:49" pos:end="95:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="103:52"><expr pos:start="97:9" pos:end="103:51"><call pos:start="97:9" pos:end="103:51"><name pos:start="97:9" pos:end="97:35">memory_region_add_subregion</name><argument_list pos:start="97:36" pos:end="103:51">(<argument pos:start="97:37" pos:end="97:55"><expr pos:start="97:37" pos:end="97:55"><call pos:start="97:37" pos:end="97:55"><name pos:start="97:37" pos:end="97:53">get_system_memory</name><argument_list pos:start="97:54" pos:end="97:55">()</argument_list></call></expr></argument>,

                                    <argument pos:start="99:37" pos:end="101:68"><expr pos:start="99:37" pos:end="101:68"><name pos:start="99:37" pos:end="99:65">XLNX_ZYNQMP_OCM_RAM_0_ADDRESS</name> <operator pos:start="99:67" pos:end="99:67">+</operator>

                                        <name pos:start="101:41" pos:end="101:41">i</name> <operator pos:start="101:43" pos:end="101:43">*</operator> <name pos:start="101:45" pos:end="101:68">XLNX_ZYNQMP_OCM_RAM_SIZE</name></expr></argument>,

                                    <argument pos:start="103:37" pos:end="103:50"><expr pos:start="103:37" pos:end="103:50"><operator pos:start="103:37" pos:end="103:37">&amp;</operator><name pos:start="103:38" pos:end="103:50"><name pos:start="103:38" pos:end="103:38">s</name><operator pos:start="103:39" pos:end="103:40">-&gt;</operator><name pos:start="103:41" pos:end="103:47">ocm_ram</name><index pos:start="103:48" pos:end="103:50">[<expr pos:start="103:49" pos:end="103:49"><name pos:start="103:49" pos:end="103:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:25"><expr pos:start="107:9" pos:end="107:24"><call pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:14">g_free</name><argument_list pos:start="107:15" pos:end="107:24">(<argument pos:start="107:16" pos:end="107:23"><expr pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:23">ocm_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="113:5" pos:end="113:76"><expr pos:start="113:5" pos:end="113:75"><call pos:start="113:5" pos:end="113:75"><name pos:start="113:5" pos:end="113:24">qdev_prop_set_uint32</name><argument_list pos:start="113:25" pos:end="113:75">(<argument pos:start="113:26" pos:end="113:40"><expr pos:start="113:26" pos:end="113:40"><call pos:start="113:26" pos:end="113:40"><name pos:start="113:26" pos:end="113:31">DEVICE</name><argument_list pos:start="113:32" pos:end="113:40">(<argument pos:start="113:33" pos:end="113:39"><expr pos:start="113:33" pos:end="113:39"><operator pos:start="113:33" pos:end="113:33">&amp;</operator><name pos:start="113:34" pos:end="113:39"><name pos:start="113:34" pos:end="113:34">s</name><operator pos:start="113:35" pos:end="113:36">-&gt;</operator><name pos:start="113:37" pos:end="113:39">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="113:43" pos:end="113:51"><expr pos:start="113:43" pos:end="113:51"><literal type="string" pos:start="113:43" pos:end="113:51">"num-irq"</literal></expr></argument>, <argument pos:start="113:54" pos:end="113:74"><expr pos:start="113:54" pos:end="113:74"><name pos:start="113:54" pos:end="113:69">GIC_NUM_SPI_INTR</name> <operator pos:start="113:71" pos:end="113:71">+</operator> <literal type="number" pos:start="113:73" pos:end="113:74">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:57"><expr pos:start="115:5" pos:end="115:56"><call pos:start="115:5" pos:end="115:56"><name pos:start="115:5" pos:end="115:24">qdev_prop_set_uint32</name><argument_list pos:start="115:25" pos:end="115:56">(<argument pos:start="115:26" pos:end="115:40"><expr pos:start="115:26" pos:end="115:40"><call pos:start="115:26" pos:end="115:40"><name pos:start="115:26" pos:end="115:31">DEVICE</name><argument_list pos:start="115:32" pos:end="115:40">(<argument pos:start="115:33" pos:end="115:39"><expr pos:start="115:33" pos:end="115:39"><operator pos:start="115:33" pos:end="115:33">&amp;</operator><name pos:start="115:34" pos:end="115:39"><name pos:start="115:34" pos:end="115:34">s</name><operator pos:start="115:35" pos:end="115:36">-&gt;</operator><name pos:start="115:37" pos:end="115:39">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:43" pos:end="115:52"><expr pos:start="115:43" pos:end="115:52"><literal type="string" pos:start="115:43" pos:end="115:52">"revision"</literal></expr></argument>, <argument pos:start="115:55" pos:end="115:55"><expr pos:start="115:55" pos:end="115:55"><literal type="number" pos:start="115:55" pos:end="115:55">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:79"><expr pos:start="117:5" pos:end="117:78"><call pos:start="117:5" pos:end="117:78"><name pos:start="117:5" pos:end="117:24">qdev_prop_set_uint32</name><argument_list pos:start="117:25" pos:end="117:78">(<argument pos:start="117:26" pos:end="117:40"><expr pos:start="117:26" pos:end="117:40"><call pos:start="117:26" pos:end="117:40"><name pos:start="117:26" pos:end="117:31">DEVICE</name><argument_list pos:start="117:32" pos:end="117:40">(<argument pos:start="117:33" pos:end="117:39"><expr pos:start="117:33" pos:end="117:39"><operator pos:start="117:33" pos:end="117:33">&amp;</operator><name pos:start="117:34" pos:end="117:39"><name pos:start="117:34" pos:end="117:34">s</name><operator pos:start="117:35" pos:end="117:36">-&gt;</operator><name pos:start="117:37" pos:end="117:39">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="117:43" pos:end="117:51"><expr pos:start="117:43" pos:end="117:51"><literal type="string" pos:start="117:43" pos:end="117:51">"num-cpu"</literal></expr></argument>, <argument pos:start="117:54" pos:end="117:77"><expr pos:start="117:54" pos:end="117:77"><name pos:start="117:54" pos:end="117:77">XLNX_ZYNQMP_NUM_APU_CPUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:70"><expr pos:start="119:5" pos:end="119:69"><call pos:start="119:5" pos:end="119:69"><name pos:start="119:5" pos:end="119:28">object_property_set_bool</name><argument_list pos:start="119:29" pos:end="119:69">(<argument pos:start="119:30" pos:end="119:44"><expr pos:start="119:30" pos:end="119:44"><call pos:start="119:30" pos:end="119:44"><name pos:start="119:30" pos:end="119:35">OBJECT</name><argument_list pos:start="119:36" pos:end="119:44">(<argument pos:start="119:37" pos:end="119:43"><expr pos:start="119:37" pos:end="119:43"><operator pos:start="119:37" pos:end="119:37">&amp;</operator><name pos:start="119:38" pos:end="119:43"><name pos:start="119:38" pos:end="119:38">s</name><operator pos:start="119:39" pos:end="119:40">-&gt;</operator><name pos:start="119:41" pos:end="119:43">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="119:47" pos:end="119:50"><expr pos:start="119:47" pos:end="119:50"><name pos:start="119:47" pos:end="119:50">true</name></expr></argument>, <argument pos:start="119:53" pos:end="119:62"><expr pos:start="119:53" pos:end="119:62"><literal type="string" pos:start="119:53" pos:end="119:62">"realized"</literal></expr></argument>, <argument pos:start="119:65" pos:end="119:68"><expr pos:start="119:65" pos:end="119:68"><operator pos:start="119:65" pos:end="119:65">&amp;</operator><name pos:start="119:66" pos:end="119:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="121:12">(<expr pos:start="121:9" pos:end="121:11"><name pos:start="121:9" pos:end="121:11">err</name></expr>)</condition> <block pos:start="121:14" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:15">

        <expr_stmt pos:start="123:9" pos:end="123:35"><expr pos:start="123:9" pos:end="123:34"><call pos:start="123:9" pos:end="123:34"><name pos:start="123:9" pos:end="123:23">error_propagate</name><argument_list pos:start="123:24" pos:end="123:34">(<argument pos:start="123:25" pos:end="123:28"><expr pos:start="123:25" pos:end="123:28"><name pos:start="123:25" pos:end="123:28">errp</name></expr></argument>, <argument pos:start="123:31" pos:end="123:33"><expr pos:start="123:31" pos:end="123:33"><name pos:start="123:31" pos:end="123:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:75"><expr pos:start="129:5" pos:end="129:74"><call pos:start="129:5" pos:end="129:74"><name pos:start="129:5" pos:end="129:10">assert</name><argument_list pos:start="129:11" pos:end="129:74">(<argument pos:start="129:12" pos:end="129:73"><expr pos:start="129:12" pos:end="129:73"><call pos:start="129:12" pos:end="129:46"><name pos:start="129:12" pos:end="129:21">ARRAY_SIZE</name><argument_list pos:start="129:22" pos:end="129:46">(<argument pos:start="129:23" pos:end="129:45"><expr pos:start="129:23" pos:end="129:45"><name pos:start="129:23" pos:end="129:45">xlnx_zynqmp_gic_regions</name></expr></argument>)</argument_list></call> <operator pos:start="129:48" pos:end="129:49">==</operator> <name pos:start="129:51" pos:end="129:73">XLNX_ZYNQMP_GIC_REGIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="131:5" pos:end="165:5">for <control pos:start="131:9" pos:end="131:49">(<init pos:start="131:10" pos:end="131:15"><expr pos:start="131:10" pos:end="131:14"><name pos:start="131:10" pos:end="131:10">i</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <literal type="number" pos:start="131:14" pos:end="131:14">0</literal></expr>;</init> <condition pos:start="131:17" pos:end="131:44"><expr pos:start="131:17" pos:end="131:43"><name pos:start="131:17" pos:end="131:17">i</name> <operator pos:start="131:19" pos:end="131:19">&lt;</operator> <name pos:start="131:21" pos:end="131:43">XLNX_ZYNQMP_GIC_REGIONS</name></expr>;</condition> <incr pos:start="131:46" pos:end="131:48"><expr pos:start="131:46" pos:end="131:48"><name pos:start="131:46" pos:end="131:46">i</name><operator pos:start="131:47" pos:end="131:48">++</operator></expr></incr>)</control> <block pos:start="131:51" pos:end="165:5">{<block_content pos:start="133:9" pos:end="163:9">

        <decl_stmt pos:start="133:9" pos:end="133:52"><decl pos:start="133:9" pos:end="133:51"><type pos:start="133:9" pos:end="133:22"><name pos:start="133:9" pos:end="133:20">SysBusDevice</name> <modifier pos:start="133:22" pos:end="133:22">*</modifier></type><name pos:start="133:23" pos:end="133:25">gic</name> <init pos:start="133:27" pos:end="133:51">= <expr pos:start="133:29" pos:end="133:51"><call pos:start="133:29" pos:end="133:51"><name pos:start="133:29" pos:end="133:42">SYS_BUS_DEVICE</name><argument_list pos:start="133:43" pos:end="133:51">(<argument pos:start="133:44" pos:end="133:50"><expr pos:start="133:44" pos:end="133:50"><operator pos:start="133:44" pos:end="133:44">&amp;</operator><name pos:start="133:45" pos:end="133:50"><name pos:start="133:45" pos:end="133:45">s</name><operator pos:start="133:46" pos:end="133:47">-&gt;</operator><name pos:start="133:48" pos:end="133:50">gic</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="135:9" pos:end="135:67"><decl pos:start="135:9" pos:end="135:66"><type pos:start="135:9" pos:end="135:35"><specifier pos:start="135:9" pos:end="135:13">const</specifier> <name pos:start="135:15" pos:end="135:33">XlnxZynqMPGICRegion</name> <modifier pos:start="135:35" pos:end="135:35">*</modifier></type><name pos:start="135:36" pos:end="135:36">r</name> <init pos:start="135:38" pos:end="135:66">= <expr pos:start="135:40" pos:end="135:66"><operator pos:start="135:40" pos:end="135:40">&amp;</operator><name pos:start="135:41" pos:end="135:66"><name pos:start="135:41" pos:end="135:63">xlnx_zynqmp_gic_regions</name><index pos:start="135:64" pos:end="135:66">[<expr pos:start="135:65" pos:end="135:65"><name pos:start="135:65" pos:end="135:65">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="137:9" pos:end="137:72"><decl pos:start="137:9" pos:end="137:71"><type pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:20">MemoryRegion</name> <modifier pos:start="137:22" pos:end="137:22">*</modifier></type><name pos:start="137:23" pos:end="137:24">mr</name> <init pos:start="137:26" pos:end="137:71">= <expr pos:start="137:28" pos:end="137:71"><call pos:start="137:28" pos:end="137:71"><name pos:start="137:28" pos:end="137:49">sysbus_mmio_get_region</name><argument_list pos:start="137:50" pos:end="137:71">(<argument pos:start="137:51" pos:end="137:53"><expr pos:start="137:51" pos:end="137:53"><name pos:start="137:51" pos:end="137:53">gic</name></expr></argument>, <argument pos:start="137:56" pos:end="137:70"><expr pos:start="137:56" pos:end="137:70"><name pos:start="137:56" pos:end="137:70"><name pos:start="137:56" pos:end="137:56">r</name><operator pos:start="137:57" pos:end="137:58">-&gt;</operator><name pos:start="137:59" pos:end="137:70">region_index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="139:9" pos:end="139:35"><decl pos:start="139:9" pos:end="139:34"><type pos:start="139:9" pos:end="139:16"><name pos:start="139:9" pos:end="139:16">uint32_t</name></type> <name pos:start="139:18" pos:end="139:21">addr</name> <init pos:start="139:23" pos:end="139:34">= <expr pos:start="139:25" pos:end="139:34"><name pos:start="139:25" pos:end="139:34"><name pos:start="139:25" pos:end="139:25">r</name><operator pos:start="139:26" pos:end="139:27">-&gt;</operator><name pos:start="139:28" pos:end="139:34">address</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="141:9" pos:end="141:14"><decl pos:start="141:9" pos:end="141:13"><type pos:start="141:9" pos:end="141:11"><name pos:start="141:9" pos:end="141:11">int</name></type> <name pos:start="141:13" pos:end="141:13">j</name></decl>;</decl_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:52"><expr pos:start="145:9" pos:end="145:51"><call pos:start="145:9" pos:end="145:51"><name pos:start="145:9" pos:end="145:23">sysbus_mmio_map</name><argument_list pos:start="145:24" pos:end="145:51">(<argument pos:start="145:25" pos:end="145:27"><expr pos:start="145:25" pos:end="145:27"><name pos:start="145:25" pos:end="145:27">gic</name></expr></argument>, <argument pos:start="145:30" pos:end="145:44"><expr pos:start="145:30" pos:end="145:44"><name pos:start="145:30" pos:end="145:44"><name pos:start="145:30" pos:end="145:30">r</name><operator pos:start="145:31" pos:end="145:32">-&gt;</operator><name pos:start="145:33" pos:end="145:44">region_index</name></name></expr></argument>, <argument pos:start="145:47" pos:end="145:50"><expr pos:start="145:47" pos:end="145:50"><name pos:start="145:47" pos:end="145:50">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="149:9" pos:end="163:9">for <control pos:start="149:13" pos:end="149:53">(<init pos:start="149:14" pos:end="149:19"><expr pos:start="149:14" pos:end="149:18"><name pos:start="149:14" pos:end="149:14">j</name> <operator pos:start="149:16" pos:end="149:16">=</operator> <literal type="number" pos:start="149:18" pos:end="149:18">0</literal></expr>;</init> <condition pos:start="149:21" pos:end="149:48"><expr pos:start="149:21" pos:end="149:47"><name pos:start="149:21" pos:end="149:21">j</name> <operator pos:start="149:23" pos:end="149:23">&lt;</operator> <name pos:start="149:25" pos:end="149:47">XLNX_ZYNQMP_GIC_ALIASES</name></expr>;</condition> <incr pos:start="149:50" pos:end="149:52"><expr pos:start="149:50" pos:end="149:52"><name pos:start="149:50" pos:end="149:50">j</name><operator pos:start="149:51" pos:end="149:52">++</operator></expr></incr>)</control> <block pos:start="149:55" pos:end="163:9">{<block_content pos:start="151:13" pos:end="161:68">

            <decl_stmt pos:start="151:13" pos:end="151:51"><decl pos:start="151:13" pos:end="151:50"><type pos:start="151:13" pos:end="151:26"><name pos:start="151:13" pos:end="151:24">MemoryRegion</name> <modifier pos:start="151:26" pos:end="151:26">*</modifier></type><name pos:start="151:27" pos:end="151:31">alias</name> <init pos:start="151:33" pos:end="151:50">= <expr pos:start="151:35" pos:end="151:50"><operator pos:start="151:35" pos:end="151:35">&amp;</operator><name pos:start="151:36" pos:end="151:50"><name pos:start="151:36" pos:end="151:36">s</name><operator pos:start="151:37" pos:end="151:38">-&gt;</operator><name pos:start="151:39" pos:end="151:44">gic_mr</name><index pos:start="151:45" pos:end="151:47">[<expr pos:start="151:46" pos:end="151:46"><name pos:start="151:46" pos:end="151:46">i</name></expr>]</index><index pos:start="151:48" pos:end="151:50">[<expr pos:start="151:49" pos:end="151:49"><name pos:start="151:49" pos:end="151:49">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="155:13" pos:end="155:48"><expr pos:start="155:13" pos:end="155:47"><name pos:start="155:13" pos:end="155:16">addr</name> <operator pos:start="155:18" pos:end="155:19">+=</operator> <name pos:start="155:21" pos:end="155:47">XLNX_ZYNQMP_GIC_REGION_SIZE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="159:69"><expr pos:start="157:13" pos:end="159:68"><call pos:start="157:13" pos:end="159:68"><name pos:start="157:13" pos:end="157:36">memory_region_init_alias</name><argument_list pos:start="157:37" pos:end="159:68">(<argument pos:start="157:38" pos:end="157:42"><expr pos:start="157:38" pos:end="157:42"><name pos:start="157:38" pos:end="157:42">alias</name></expr></argument>, <argument pos:start="157:45" pos:end="157:53"><expr pos:start="157:45" pos:end="157:53"><call pos:start="157:45" pos:end="157:53"><name pos:start="157:45" pos:end="157:50">OBJECT</name><argument_list pos:start="157:51" pos:end="157:53">(<argument pos:start="157:52" pos:end="157:52"><expr pos:start="157:52" pos:end="157:52"><name pos:start="157:52" pos:end="157:52">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="157:56" pos:end="157:73"><expr pos:start="157:56" pos:end="157:73"><literal type="string" pos:start="157:56" pos:end="157:73">"zynqmp-gic-alias"</literal></expr></argument>, <argument pos:start="157:76" pos:end="157:77"><expr pos:start="157:76" pos:end="157:77"><name pos:start="157:76" pos:end="157:77">mr</name></expr></argument>,

                                     <argument pos:start="159:38" pos:end="159:38"><expr pos:start="159:38" pos:end="159:38"><literal type="number" pos:start="159:38" pos:end="159:38">0</literal></expr></argument>, <argument pos:start="159:41" pos:end="159:67"><expr pos:start="159:41" pos:end="159:67"><name pos:start="159:41" pos:end="159:67">XLNX_ZYNQMP_GIC_REGION_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:68"><expr pos:start="161:13" pos:end="161:67"><call pos:start="161:13" pos:end="161:67"><name pos:start="161:13" pos:end="161:39">memory_region_add_subregion</name><argument_list pos:start="161:40" pos:end="161:67">(<argument pos:start="161:41" pos:end="161:53"><expr pos:start="161:41" pos:end="161:53"><name pos:start="161:41" pos:end="161:53">system_memory</name></expr></argument>, <argument pos:start="161:56" pos:end="161:59"><expr pos:start="161:56" pos:end="161:59"><name pos:start="161:56" pos:end="161:59">addr</name></expr></argument>, <argument pos:start="161:62" pos:end="161:66"><expr pos:start="161:62" pos:end="161:66"><name pos:start="161:62" pos:end="161:66">alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <for pos:start="169:5" pos:end="243:5">for <control pos:start="169:9" pos:end="169:50">(<init pos:start="169:10" pos:end="169:15"><expr pos:start="169:10" pos:end="169:14"><name pos:start="169:10" pos:end="169:10">i</name> <operator pos:start="169:12" pos:end="169:12">=</operator> <literal type="number" pos:start="169:14" pos:end="169:14">0</literal></expr>;</init> <condition pos:start="169:17" pos:end="169:45"><expr pos:start="169:17" pos:end="169:44"><name pos:start="169:17" pos:end="169:17">i</name> <operator pos:start="169:19" pos:end="169:19">&lt;</operator> <name pos:start="169:21" pos:end="169:44">XLNX_ZYNQMP_NUM_APU_CPUS</name></expr>;</condition> <incr pos:start="169:47" pos:end="169:49"><expr pos:start="169:47" pos:end="169:49"><name pos:start="169:47" pos:end="169:47">i</name><operator pos:start="169:48" pos:end="169:49">++</operator></expr></incr>)</control> <block pos:start="169:52" pos:end="243:5">{<block_content pos:start="171:9" pos:end="241:62">

        <decl_stmt pos:start="171:9" pos:end="171:21"><decl pos:start="171:9" pos:end="171:20"><type pos:start="171:9" pos:end="171:16"><name pos:start="171:9" pos:end="171:16">qemu_irq</name></type> <name pos:start="171:18" pos:end="171:20">irq</name></decl>;</decl_stmt>

        <decl_stmt pos:start="173:9" pos:end="173:19"><decl pos:start="173:9" pos:end="173:18"><type pos:start="173:9" pos:end="173:14"><name pos:start="173:9" pos:end="173:12">char</name> <modifier pos:start="173:14" pos:end="173:14">*</modifier></type><name pos:start="173:15" pos:end="173:18">name</name></decl>;</decl_stmt>



        <expr_stmt pos:start="177:9" pos:end="179:62"><expr pos:start="177:9" pos:end="179:61"><call pos:start="177:9" pos:end="179:61"><name pos:start="177:9" pos:end="177:31">object_property_set_int</name><argument_list pos:start="177:32" pos:end="179:61">(<argument pos:start="177:33" pos:end="177:54"><expr pos:start="177:33" pos:end="177:54"><call pos:start="177:33" pos:end="177:54"><name pos:start="177:33" pos:end="177:38">OBJECT</name><argument_list pos:start="177:39" pos:end="177:54">(<argument pos:start="177:40" pos:end="177:53"><expr pos:start="177:40" pos:end="177:53"><operator pos:start="177:40" pos:end="177:40">&amp;</operator><name pos:start="177:41" pos:end="177:53"><name pos:start="177:41" pos:end="177:41">s</name><operator pos:start="177:42" pos:end="177:43">-&gt;</operator><name pos:start="177:44" pos:end="177:50">apu_cpu</name><index pos:start="177:51" pos:end="177:53">[<expr pos:start="177:52" pos:end="177:52"><name pos:start="177:52" pos:end="177:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="177:57" pos:end="177:77"><expr pos:start="177:57" pos:end="177:77"><name pos:start="177:57" pos:end="177:77">QEMU_PSCI_CONDUIT_SMC</name></expr></argument>,

                                <argument pos:start="179:33" pos:end="179:46"><expr pos:start="179:33" pos:end="179:46"><literal type="string" pos:start="179:33" pos:end="179:46">"psci-conduit"</literal></expr></argument>, <argument pos:start="179:49" pos:end="179:60"><expr pos:start="179:49" pos:end="179:60"><operator pos:start="179:49" pos:end="179:49">&amp;</operator><name pos:start="179:50" pos:end="179:60">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="183:9" pos:end="183:75"><expr pos:start="183:9" pos:end="183:74"><name pos:start="183:9" pos:end="183:12">name</name> <operator pos:start="183:14" pos:end="183:14">=</operator> <call pos:start="183:16" pos:end="183:74"><name pos:start="183:16" pos:end="183:50">object_get_canonical_path_component</name><argument_list pos:start="183:51" pos:end="183:74">(<argument pos:start="183:52" pos:end="183:73"><expr pos:start="183:52" pos:end="183:73"><call pos:start="183:52" pos:end="183:73"><name pos:start="183:52" pos:end="183:57">OBJECT</name><argument_list pos:start="183:58" pos:end="183:73">(<argument pos:start="183:59" pos:end="183:72"><expr pos:start="183:59" pos:end="183:72"><operator pos:start="183:59" pos:end="183:59">&amp;</operator><name pos:start="183:60" pos:end="183:72"><name pos:start="183:60" pos:end="183:60">s</name><operator pos:start="183:61" pos:end="183:62">-&gt;</operator><name pos:start="183:63" pos:end="183:69">apu_cpu</name><index pos:start="183:70" pos:end="183:72">[<expr pos:start="183:71" pos:end="183:71"><name pos:start="183:71" pos:end="183:71">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="185:9" pos:end="197:9"><if pos:start="185:9" pos:end="193:9">if <condition pos:start="185:12" pos:end="185:35">(<expr pos:start="185:13" pos:end="185:34"><call pos:start="185:13" pos:end="185:34"><name pos:start="185:13" pos:end="185:18">strcmp</name><argument_list pos:start="185:19" pos:end="185:34">(<argument pos:start="185:20" pos:end="185:23"><expr pos:start="185:20" pos:end="185:23"><name pos:start="185:20" pos:end="185:23">name</name></expr></argument>, <argument pos:start="185:26" pos:end="185:33"><expr pos:start="185:26" pos:end="185:33"><name pos:start="185:26" pos:end="185:33">boot_cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:37" pos:end="193:9">{<block_content pos:start="189:13" pos:end="191:72">

            <comment type="block" pos:start="187:13" pos:end="187:65">/* Secondary CPUs start in PSCI powered-down state */</comment>

            <expr_stmt pos:start="189:13" pos:end="191:72"><expr pos:start="189:13" pos:end="191:71"><call pos:start="189:13" pos:end="191:71"><name pos:start="189:13" pos:end="189:36">object_property_set_bool</name><argument_list pos:start="189:37" pos:end="191:71">(<argument pos:start="189:38" pos:end="189:59"><expr pos:start="189:38" pos:end="189:59"><call pos:start="189:38" pos:end="189:59"><name pos:start="189:38" pos:end="189:43">OBJECT</name><argument_list pos:start="189:44" pos:end="189:59">(<argument pos:start="189:45" pos:end="189:58"><expr pos:start="189:45" pos:end="189:58"><operator pos:start="189:45" pos:end="189:45">&amp;</operator><name pos:start="189:46" pos:end="189:58"><name pos:start="189:46" pos:end="189:46">s</name><operator pos:start="189:47" pos:end="189:48">-&gt;</operator><name pos:start="189:49" pos:end="189:55">apu_cpu</name><index pos:start="189:56" pos:end="189:58">[<expr pos:start="189:57" pos:end="189:57"><name pos:start="189:57" pos:end="189:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="189:62" pos:end="189:65"><expr pos:start="189:62" pos:end="189:65"><name pos:start="189:62" pos:end="189:65">true</name></expr></argument>,

                                     <argument pos:start="191:38" pos:end="191:56"><expr pos:start="191:38" pos:end="191:56"><literal type="string" pos:start="191:38" pos:end="191:56">"start-powered-off"</literal></expr></argument>, <argument pos:start="191:59" pos:end="191:70"><expr pos:start="191:59" pos:end="191:70"><operator pos:start="191:59" pos:end="191:59">&amp;</operator><name pos:start="191:60" pos:end="191:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="193:11" pos:end="197:9">else <block pos:start="193:16" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:45">

            <expr_stmt pos:start="195:13" pos:end="195:45"><expr pos:start="195:13" pos:end="195:44"><name pos:start="195:13" pos:end="195:27"><name pos:start="195:13" pos:end="195:13">s</name><operator pos:start="195:14" pos:end="195:15">-&gt;</operator><name pos:start="195:16" pos:end="195:27">boot_cpu_ptr</name></name> <operator pos:start="195:29" pos:end="195:29">=</operator> <operator pos:start="195:31" pos:end="195:31">&amp;</operator><name pos:start="195:32" pos:end="195:44"><name pos:start="195:32" pos:end="195:32">s</name><operator pos:start="195:33" pos:end="195:34">-&gt;</operator><name pos:start="195:35" pos:end="195:41">apu_cpu</name><index pos:start="195:42" pos:end="195:44">[<expr pos:start="195:43" pos:end="195:43"><name pos:start="195:43" pos:end="195:43">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:21"><expr pos:start="199:9" pos:end="199:20"><call pos:start="199:9" pos:end="199:20"><name pos:start="199:9" pos:end="199:14">g_free</name><argument_list pos:start="199:15" pos:end="199:20">(<argument pos:start="199:16" pos:end="199:19"><expr pos:start="199:16" pos:end="199:19"><name pos:start="199:16" pos:end="199:19">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="203:9" pos:end="205:61"><expr pos:start="203:9" pos:end="205:60"><call pos:start="203:9" pos:end="205:60"><name pos:start="203:9" pos:end="203:32">object_property_set_bool</name><argument_list pos:start="203:33" pos:end="205:60">(<argument pos:start="203:34" pos:end="203:55"><expr pos:start="203:34" pos:end="203:55"><call pos:start="203:34" pos:end="203:55"><name pos:start="203:34" pos:end="203:39">OBJECT</name><argument_list pos:start="203:40" pos:end="203:55">(<argument pos:start="203:41" pos:end="203:54"><expr pos:start="203:41" pos:end="203:54"><operator pos:start="203:41" pos:end="203:41">&amp;</operator><name pos:start="203:42" pos:end="203:54"><name pos:start="203:42" pos:end="203:42">s</name><operator pos:start="203:43" pos:end="203:44">-&gt;</operator><name pos:start="203:45" pos:end="203:51">apu_cpu</name><index pos:start="203:52" pos:end="203:54">[<expr pos:start="203:53" pos:end="203:53"><name pos:start="203:53" pos:end="203:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="205:34" pos:end="205:42"><expr pos:start="205:34" pos:end="205:42"><name pos:start="205:34" pos:end="205:42"><name pos:start="205:34" pos:end="205:34">s</name><operator pos:start="205:35" pos:end="205:36">-&gt;</operator><name pos:start="205:37" pos:end="205:42">secure</name></name></expr></argument>, <argument pos:start="205:45" pos:end="205:53"><expr pos:start="205:45" pos:end="205:53"><literal type="string" pos:start="205:45" pos:end="205:53">"has_el3"</literal></expr></argument>, <argument pos:start="205:56" pos:end="205:59"><expr pos:start="205:56" pos:end="205:59"><name pos:start="205:56" pos:end="205:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="209:60"><expr pos:start="207:9" pos:end="209:59"><call pos:start="207:9" pos:end="209:59"><name pos:start="207:9" pos:end="207:31">object_property_set_int</name><argument_list pos:start="207:32" pos:end="209:59">(<argument pos:start="207:33" pos:end="207:54"><expr pos:start="207:33" pos:end="207:54"><call pos:start="207:33" pos:end="207:54"><name pos:start="207:33" pos:end="207:38">OBJECT</name><argument_list pos:start="207:39" pos:end="207:54">(<argument pos:start="207:40" pos:end="207:53"><expr pos:start="207:40" pos:end="207:53"><operator pos:start="207:40" pos:end="207:40">&amp;</operator><name pos:start="207:41" pos:end="207:53"><name pos:start="207:41" pos:end="207:41">s</name><operator pos:start="207:42" pos:end="207:43">-&gt;</operator><name pos:start="207:44" pos:end="207:50">apu_cpu</name><index pos:start="207:51" pos:end="207:53">[<expr pos:start="207:52" pos:end="207:52"><name pos:start="207:52" pos:end="207:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="207:57" pos:end="207:69"><expr pos:start="207:57" pos:end="207:69"><name pos:start="207:57" pos:end="207:69">GIC_BASE_ADDR</name></expr></argument>,

                                <argument pos:start="209:33" pos:end="209:44"><expr pos:start="209:33" pos:end="209:44"><literal type="string" pos:start="209:33" pos:end="209:44">"reset-cbar"</literal></expr></argument>, <argument pos:start="209:47" pos:end="209:58"><expr pos:start="209:47" pos:end="209:58"><operator pos:start="209:47" pos:end="209:47">&amp;</operator><name pos:start="209:48" pos:end="209:58">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="213:39"><expr pos:start="211:9" pos:end="213:38"><call pos:start="211:9" pos:end="213:38"><name pos:start="211:9" pos:end="211:32">object_property_set_bool</name><argument_list pos:start="211:33" pos:end="213:38">(<argument pos:start="211:34" pos:end="211:55"><expr pos:start="211:34" pos:end="211:55"><call pos:start="211:34" pos:end="211:55"><name pos:start="211:34" pos:end="211:39">OBJECT</name><argument_list pos:start="211:40" pos:end="211:55">(<argument pos:start="211:41" pos:end="211:54"><expr pos:start="211:41" pos:end="211:54"><operator pos:start="211:41" pos:end="211:41">&amp;</operator><name pos:start="211:42" pos:end="211:54"><name pos:start="211:42" pos:end="211:42">s</name><operator pos:start="211:43" pos:end="211:44">-&gt;</operator><name pos:start="211:45" pos:end="211:51">apu_cpu</name><index pos:start="211:52" pos:end="211:54">[<expr pos:start="211:53" pos:end="211:53"><name pos:start="211:53" pos:end="211:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="211:58" pos:end="211:61"><expr pos:start="211:58" pos:end="211:61"><name pos:start="211:58" pos:end="211:61">true</name></expr></argument>, <argument pos:start="211:64" pos:end="211:73"><expr pos:start="211:64" pos:end="211:73"><literal type="string" pos:start="211:64" pos:end="211:73">"realized"</literal></expr></argument>,

                                 <argument pos:start="213:34" pos:end="213:37"><expr pos:start="213:34" pos:end="213:37"><operator pos:start="213:34" pos:end="213:34">&amp;</operator><name pos:start="213:35" pos:end="213:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="215:9" pos:end="221:9"><if pos:start="215:9" pos:end="221:9">if <condition pos:start="215:12" pos:end="215:16">(<expr pos:start="215:13" pos:end="215:15"><name pos:start="215:13" pos:end="215:15">err</name></expr>)</condition> <block pos:start="215:18" pos:end="221:9">{<block_content pos:start="217:13" pos:end="219:19">

            <expr_stmt pos:start="217:13" pos:end="217:39"><expr pos:start="217:13" pos:end="217:38"><call pos:start="217:13" pos:end="217:38"><name pos:start="217:13" pos:end="217:27">error_propagate</name><argument_list pos:start="217:28" pos:end="217:38">(<argument pos:start="217:29" pos:end="217:32"><expr pos:start="217:29" pos:end="217:32"><name pos:start="217:29" pos:end="217:32">errp</name></expr></argument>, <argument pos:start="217:35" pos:end="217:37"><expr pos:start="217:35" pos:end="217:37"><name pos:start="217:35" pos:end="217:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="219:13" pos:end="219:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="225:9" pos:end="229:58"><expr pos:start="225:9" pos:end="229:57"><call pos:start="225:9" pos:end="229:57"><name pos:start="225:9" pos:end="225:26">sysbus_connect_irq</name><argument_list pos:start="225:27" pos:end="229:57">(<argument pos:start="225:28" pos:end="225:50"><expr pos:start="225:28" pos:end="225:50"><call pos:start="225:28" pos:end="225:50"><name pos:start="225:28" pos:end="225:41">SYS_BUS_DEVICE</name><argument_list pos:start="225:42" pos:end="225:50">(<argument pos:start="225:43" pos:end="225:49"><expr pos:start="225:43" pos:end="225:49"><operator pos:start="225:43" pos:end="225:43">&amp;</operator><name pos:start="225:44" pos:end="225:49"><name pos:start="225:44" pos:end="225:44">s</name><operator pos:start="225:45" pos:end="225:46">-&gt;</operator><name pos:start="225:47" pos:end="225:49">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="225:53" pos:end="225:53"><expr pos:start="225:53" pos:end="225:53"><name pos:start="225:53" pos:end="225:53">i</name></expr></argument>,

                           <argument pos:start="227:28" pos:end="229:56"><expr pos:start="227:28" pos:end="229:56"><call pos:start="227:28" pos:end="229:56"><name pos:start="227:28" pos:end="227:43">qdev_get_gpio_in</name><argument_list pos:start="227:44" pos:end="229:56">(<argument pos:start="227:45" pos:end="227:66"><expr pos:start="227:45" pos:end="227:66"><call pos:start="227:45" pos:end="227:66"><name pos:start="227:45" pos:end="227:50">DEVICE</name><argument_list pos:start="227:51" pos:end="227:66">(<argument pos:start="227:52" pos:end="227:65"><expr pos:start="227:52" pos:end="227:65"><operator pos:start="227:52" pos:end="227:52">&amp;</operator><name pos:start="227:53" pos:end="227:65"><name pos:start="227:53" pos:end="227:53">s</name><operator pos:start="227:54" pos:end="227:55">-&gt;</operator><name pos:start="227:56" pos:end="227:62">apu_cpu</name><index pos:start="227:63" pos:end="227:65">[<expr pos:start="227:64" pos:end="227:64"><name pos:start="227:64" pos:end="227:64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="229:45" pos:end="229:55"><expr pos:start="229:45" pos:end="229:55"><name pos:start="229:45" pos:end="229:55">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="233:73"><expr pos:start="231:9" pos:end="233:72"><name pos:start="231:9" pos:end="231:11">irq</name> <operator pos:start="231:13" pos:end="231:13">=</operator> <call pos:start="231:15" pos:end="233:72"><name pos:start="231:15" pos:end="231:30">qdev_get_gpio_in</name><argument_list pos:start="231:31" pos:end="233:72">(<argument pos:start="231:32" pos:end="231:46"><expr pos:start="231:32" pos:end="231:46"><call pos:start="231:32" pos:end="231:46"><name pos:start="231:32" pos:end="231:37">DEVICE</name><argument_list pos:start="231:38" pos:end="231:46">(<argument pos:start="231:39" pos:end="231:45"><expr pos:start="231:39" pos:end="231:45"><operator pos:start="231:39" pos:end="231:39">&amp;</operator><name pos:start="231:40" pos:end="231:45"><name pos:start="231:40" pos:end="231:40">s</name><operator pos:start="231:41" pos:end="231:42">-&gt;</operator><name pos:start="231:43" pos:end="231:45">gic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                               <argument pos:start="233:32" pos:end="233:71"><expr pos:start="233:32" pos:end="233:71"><call pos:start="233:32" pos:end="233:71"><name pos:start="233:32" pos:end="233:48">arm_gic_ppi_index</name><argument_list pos:start="233:49" pos:end="233:71">(<argument pos:start="233:50" pos:end="233:50"><expr pos:start="233:50" pos:end="233:50"><name pos:start="233:50" pos:end="233:50">i</name></expr></argument>, <argument pos:start="233:53" pos:end="233:70"><expr pos:start="233:53" pos:end="233:70"><name pos:start="233:53" pos:end="233:70">ARM_PHYS_TIMER_PPI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:62"><expr pos:start="235:9" pos:end="235:61"><call pos:start="235:9" pos:end="235:61"><name pos:start="235:9" pos:end="235:29">qdev_connect_gpio_out</name><argument_list pos:start="235:30" pos:end="235:61">(<argument pos:start="235:31" pos:end="235:52"><expr pos:start="235:31" pos:end="235:52"><call pos:start="235:31" pos:end="235:52"><name pos:start="235:31" pos:end="235:36">DEVICE</name><argument_list pos:start="235:37" pos:end="235:52">(<argument pos:start="235:38" pos:end="235:51"><expr pos:start="235:38" pos:end="235:51"><operator pos:start="235:38" pos:end="235:38">&amp;</operator><name pos:start="235:39" pos:end="235:51"><name pos:start="235:39" pos:end="235:39">s</name><operator pos:start="235:40" pos:end="235:41">-&gt;</operator><name pos:start="235:42" pos:end="235:48">apu_cpu</name><index pos:start="235:49" pos:end="235:51">[<expr pos:start="235:50" pos:end="235:50"><name pos:start="235:50" pos:end="235:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="235:55" pos:end="235:55"><expr pos:start="235:55" pos:end="235:55"><literal type="number" pos:start="235:55" pos:end="235:55">0</literal></expr></argument>, <argument pos:start="235:58" pos:end="235:60"><expr pos:start="235:58" pos:end="235:60"><name pos:start="235:58" pos:end="235:60">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="239:73"><expr pos:start="237:9" pos:end="239:72"><name pos:start="237:9" pos:end="237:11">irq</name> <operator pos:start="237:13" pos:end="237:13">=</operator> <call pos:start="237:15" pos:end="239:72"><name pos:start="237:15" pos:end="237:30">qdev_get_gpio_in</name><argument_list pos:start="237:31" pos:end="239:72">(<argument pos:start="237:32" pos:end="237:46"><expr pos:start="237:32" pos:end="237:46"><call pos:start="237:32" pos:end="237:46"><name pos:start="237:32" pos:end="237:37">DEVICE</name><argument_list pos:start="237:38" pos:end="237:46">(<argument pos:start="237:39" pos:end="237:45"><expr pos:start="237:39" pos:end="237:45"><operator pos:start="237:39" pos:end="237:39">&amp;</operator><name pos:start="237:40" pos:end="237:45"><name pos:start="237:40" pos:end="237:40">s</name><operator pos:start="237:41" pos:end="237:42">-&gt;</operator><name pos:start="237:43" pos:end="237:45">gic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                               <argument pos:start="239:32" pos:end="239:71"><expr pos:start="239:32" pos:end="239:71"><call pos:start="239:32" pos:end="239:71"><name pos:start="239:32" pos:end="239:48">arm_gic_ppi_index</name><argument_list pos:start="239:49" pos:end="239:71">(<argument pos:start="239:50" pos:end="239:50"><expr pos:start="239:50" pos:end="239:50"><name pos:start="239:50" pos:end="239:50">i</name></expr></argument>, <argument pos:start="239:53" pos:end="239:70"><expr pos:start="239:53" pos:end="239:70"><name pos:start="239:53" pos:end="239:70">ARM_VIRT_TIMER_PPI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:62"><expr pos:start="241:9" pos:end="241:61"><call pos:start="241:9" pos:end="241:61"><name pos:start="241:9" pos:end="241:29">qdev_connect_gpio_out</name><argument_list pos:start="241:30" pos:end="241:61">(<argument pos:start="241:31" pos:end="241:52"><expr pos:start="241:31" pos:end="241:52"><call pos:start="241:31" pos:end="241:52"><name pos:start="241:31" pos:end="241:36">DEVICE</name><argument_list pos:start="241:37" pos:end="241:52">(<argument pos:start="241:38" pos:end="241:51"><expr pos:start="241:38" pos:end="241:51"><operator pos:start="241:38" pos:end="241:38">&amp;</operator><name pos:start="241:39" pos:end="241:51"><name pos:start="241:39" pos:end="241:39">s</name><operator pos:start="241:40" pos:end="241:41">-&gt;</operator><name pos:start="241:42" pos:end="241:48">apu_cpu</name><index pos:start="241:49" pos:end="241:51">[<expr pos:start="241:50" pos:end="241:50"><name pos:start="241:50" pos:end="241:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="241:55" pos:end="241:55"><expr pos:start="241:55" pos:end="241:55"><literal type="number" pos:start="241:55" pos:end="241:55">1</literal></expr></argument>, <argument pos:start="241:58" pos:end="241:60"><expr pos:start="241:58" pos:end="241:60"><name pos:start="241:58" pos:end="241:60">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="247:5" pos:end="289:5">for <control pos:start="247:9" pos:end="247:50">(<init pos:start="247:10" pos:end="247:15"><expr pos:start="247:10" pos:end="247:14"><name pos:start="247:10" pos:end="247:10">i</name> <operator pos:start="247:12" pos:end="247:12">=</operator> <literal type="number" pos:start="247:14" pos:end="247:14">0</literal></expr>;</init> <condition pos:start="247:17" pos:end="247:45"><expr pos:start="247:17" pos:end="247:44"><name pos:start="247:17" pos:end="247:17">i</name> <operator pos:start="247:19" pos:end="247:19">&lt;</operator> <name pos:start="247:21" pos:end="247:44">XLNX_ZYNQMP_NUM_RPU_CPUS</name></expr>;</condition> <incr pos:start="247:47" pos:end="247:49"><expr pos:start="247:47" pos:end="247:49"><name pos:start="247:47" pos:end="247:47">i</name><operator pos:start="247:48" pos:end="247:49">++</operator></expr></incr>)</control> <block pos:start="247:52" pos:end="289:5">{<block_content pos:start="249:9" pos:end="287:9">

        <decl_stmt pos:start="249:9" pos:end="249:19"><decl pos:start="249:9" pos:end="249:18"><type pos:start="249:9" pos:end="249:14"><name pos:start="249:9" pos:end="249:12">char</name> <modifier pos:start="249:14" pos:end="249:14">*</modifier></type><name pos:start="249:15" pos:end="249:18">name</name></decl>;</decl_stmt>



        <expr_stmt pos:start="253:9" pos:end="253:75"><expr pos:start="253:9" pos:end="253:74"><name pos:start="253:9" pos:end="253:12">name</name> <operator pos:start="253:14" pos:end="253:14">=</operator> <call pos:start="253:16" pos:end="253:74"><name pos:start="253:16" pos:end="253:50">object_get_canonical_path_component</name><argument_list pos:start="253:51" pos:end="253:74">(<argument pos:start="253:52" pos:end="253:73"><expr pos:start="253:52" pos:end="253:73"><call pos:start="253:52" pos:end="253:73"><name pos:start="253:52" pos:end="253:57">OBJECT</name><argument_list pos:start="253:58" pos:end="253:73">(<argument pos:start="253:59" pos:end="253:72"><expr pos:start="253:59" pos:end="253:72"><operator pos:start="253:59" pos:end="253:59">&amp;</operator><name pos:start="253:60" pos:end="253:72"><name pos:start="253:60" pos:end="253:60">s</name><operator pos:start="253:61" pos:end="253:62">-&gt;</operator><name pos:start="253:63" pos:end="253:69">rpu_cpu</name><index pos:start="253:70" pos:end="253:72">[<expr pos:start="253:71" pos:end="253:71"><name pos:start="253:71" pos:end="253:71">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="255:9" pos:end="267:9"><if pos:start="255:9" pos:end="263:9">if <condition pos:start="255:12" pos:end="255:35">(<expr pos:start="255:13" pos:end="255:34"><call pos:start="255:13" pos:end="255:34"><name pos:start="255:13" pos:end="255:18">strcmp</name><argument_list pos:start="255:19" pos:end="255:34">(<argument pos:start="255:20" pos:end="255:23"><expr pos:start="255:20" pos:end="255:23"><name pos:start="255:20" pos:end="255:23">name</name></expr></argument>, <argument pos:start="255:26" pos:end="255:33"><expr pos:start="255:26" pos:end="255:33"><name pos:start="255:26" pos:end="255:33">boot_cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="255:37" pos:end="263:9">{<block_content pos:start="259:13" pos:end="261:72">

            <comment type="block" pos:start="257:13" pos:end="257:65">/* Secondary CPUs start in PSCI powered-down state */</comment>

            <expr_stmt pos:start="259:13" pos:end="261:72"><expr pos:start="259:13" pos:end="261:71"><call pos:start="259:13" pos:end="261:71"><name pos:start="259:13" pos:end="259:36">object_property_set_bool</name><argument_list pos:start="259:37" pos:end="261:71">(<argument pos:start="259:38" pos:end="259:59"><expr pos:start="259:38" pos:end="259:59"><call pos:start="259:38" pos:end="259:59"><name pos:start="259:38" pos:end="259:43">OBJECT</name><argument_list pos:start="259:44" pos:end="259:59">(<argument pos:start="259:45" pos:end="259:58"><expr pos:start="259:45" pos:end="259:58"><operator pos:start="259:45" pos:end="259:45">&amp;</operator><name pos:start="259:46" pos:end="259:58"><name pos:start="259:46" pos:end="259:46">s</name><operator pos:start="259:47" pos:end="259:48">-&gt;</operator><name pos:start="259:49" pos:end="259:55">rpu_cpu</name><index pos:start="259:56" pos:end="259:58">[<expr pos:start="259:57" pos:end="259:57"><name pos:start="259:57" pos:end="259:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="259:62" pos:end="259:65"><expr pos:start="259:62" pos:end="259:65"><name pos:start="259:62" pos:end="259:65">true</name></expr></argument>,

                                     <argument pos:start="261:38" pos:end="261:56"><expr pos:start="261:38" pos:end="261:56"><literal type="string" pos:start="261:38" pos:end="261:56">"start-powered-off"</literal></expr></argument>, <argument pos:start="261:59" pos:end="261:70"><expr pos:start="261:59" pos:end="261:70"><operator pos:start="261:59" pos:end="261:59">&amp;</operator><name pos:start="261:60" pos:end="261:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="263:11" pos:end="267:9">else <block pos:start="263:16" pos:end="267:9">{<block_content pos:start="265:13" pos:end="265:45">

            <expr_stmt pos:start="265:13" pos:end="265:45"><expr pos:start="265:13" pos:end="265:44"><name pos:start="265:13" pos:end="265:27"><name pos:start="265:13" pos:end="265:13">s</name><operator pos:start="265:14" pos:end="265:15">-&gt;</operator><name pos:start="265:16" pos:end="265:27">boot_cpu_ptr</name></name> <operator pos:start="265:29" pos:end="265:29">=</operator> <operator pos:start="265:31" pos:end="265:31">&amp;</operator><name pos:start="265:32" pos:end="265:44"><name pos:start="265:32" pos:end="265:32">s</name><operator pos:start="265:33" pos:end="265:34">-&gt;</operator><name pos:start="265:35" pos:end="265:41">rpu_cpu</name><index pos:start="265:42" pos:end="265:44">[<expr pos:start="265:43" pos:end="265:43"><name pos:start="265:43" pos:end="265:43">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:21"><expr pos:start="269:9" pos:end="269:20"><call pos:start="269:9" pos:end="269:20"><name pos:start="269:9" pos:end="269:14">g_free</name><argument_list pos:start="269:15" pos:end="269:20">(<argument pos:start="269:16" pos:end="269:19"><expr pos:start="269:16" pos:end="269:19"><name pos:start="269:16" pos:end="269:19">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="273:9" pos:end="275:47"><expr pos:start="273:9" pos:end="275:46"><call pos:start="273:9" pos:end="275:46"><name pos:start="273:9" pos:end="273:32">object_property_set_bool</name><argument_list pos:start="273:33" pos:end="275:46">(<argument pos:start="273:34" pos:end="273:55"><expr pos:start="273:34" pos:end="273:55"><call pos:start="273:34" pos:end="273:55"><name pos:start="273:34" pos:end="273:39">OBJECT</name><argument_list pos:start="273:40" pos:end="273:55">(<argument pos:start="273:41" pos:end="273:54"><expr pos:start="273:41" pos:end="273:54"><operator pos:start="273:41" pos:end="273:41">&amp;</operator><name pos:start="273:42" pos:end="273:54"><name pos:start="273:42" pos:end="273:42">s</name><operator pos:start="273:43" pos:end="273:44">-&gt;</operator><name pos:start="273:45" pos:end="273:51">rpu_cpu</name><index pos:start="273:52" pos:end="273:54">[<expr pos:start="273:53" pos:end="273:53"><name pos:start="273:53" pos:end="273:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="273:58" pos:end="273:61"><expr pos:start="273:58" pos:end="273:61"><name pos:start="273:58" pos:end="273:61">true</name></expr></argument>, <argument pos:start="273:64" pos:end="273:77"><expr pos:start="273:64" pos:end="273:77"><literal type="string" pos:start="273:64" pos:end="273:77">"reset-hivecs"</literal></expr></argument>,

                                 <argument pos:start="275:34" pos:end="275:45"><expr pos:start="275:34" pos:end="275:45"><operator pos:start="275:34" pos:end="275:34">&amp;</operator><name pos:start="275:35" pos:end="275:45">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="279:39"><expr pos:start="277:9" pos:end="279:38"><call pos:start="277:9" pos:end="279:38"><name pos:start="277:9" pos:end="277:32">object_property_set_bool</name><argument_list pos:start="277:33" pos:end="279:38">(<argument pos:start="277:34" pos:end="277:55"><expr pos:start="277:34" pos:end="277:55"><call pos:start="277:34" pos:end="277:55"><name pos:start="277:34" pos:end="277:39">OBJECT</name><argument_list pos:start="277:40" pos:end="277:55">(<argument pos:start="277:41" pos:end="277:54"><expr pos:start="277:41" pos:end="277:54"><operator pos:start="277:41" pos:end="277:41">&amp;</operator><name pos:start="277:42" pos:end="277:54"><name pos:start="277:42" pos:end="277:42">s</name><operator pos:start="277:43" pos:end="277:44">-&gt;</operator><name pos:start="277:45" pos:end="277:51">rpu_cpu</name><index pos:start="277:52" pos:end="277:54">[<expr pos:start="277:53" pos:end="277:53"><name pos:start="277:53" pos:end="277:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="277:58" pos:end="277:61"><expr pos:start="277:58" pos:end="277:61"><name pos:start="277:58" pos:end="277:61">true</name></expr></argument>, <argument pos:start="277:64" pos:end="277:73"><expr pos:start="277:64" pos:end="277:73"><literal type="string" pos:start="277:64" pos:end="277:73">"realized"</literal></expr></argument>,

                                 <argument pos:start="279:34" pos:end="279:37"><expr pos:start="279:34" pos:end="279:37"><operator pos:start="279:34" pos:end="279:34">&amp;</operator><name pos:start="279:35" pos:end="279:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="281:9" pos:end="287:9"><if pos:start="281:9" pos:end="287:9">if <condition pos:start="281:12" pos:end="281:16">(<expr pos:start="281:13" pos:end="281:15"><name pos:start="281:13" pos:end="281:15">err</name></expr>)</condition> <block pos:start="281:18" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:19">

            <expr_stmt pos:start="283:13" pos:end="283:39"><expr pos:start="283:13" pos:end="283:38"><call pos:start="283:13" pos:end="283:38"><name pos:start="283:13" pos:end="283:27">error_propagate</name><argument_list pos:start="283:28" pos:end="283:38">(<argument pos:start="283:29" pos:end="283:32"><expr pos:start="283:29" pos:end="283:32"><name pos:start="283:29" pos:end="283:32">errp</name></expr></argument>, <argument pos:start="283:35" pos:end="283:37"><expr pos:start="283:35" pos:end="283:37"><name pos:start="283:35" pos:end="283:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="285:13" pos:end="285:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="293:5" pos:end="299:5"><if pos:start="293:5" pos:end="299:5">if <condition pos:start="293:8" pos:end="293:25">(<expr pos:start="293:9" pos:end="293:24"><operator pos:start="293:9" pos:end="293:9">!</operator><name pos:start="293:10" pos:end="293:24"><name pos:start="293:10" pos:end="293:10">s</name><operator pos:start="293:11" pos:end="293:12">-&gt;</operator><name pos:start="293:13" pos:end="293:24">boot_cpu_ptr</name></name></expr>)</condition> <block pos:start="293:27" pos:end="299:5">{<block_content pos:start="295:9" pos:end="297:15">

        <expr_stmt pos:start="295:9" pos:end="295:67"><expr pos:start="295:9" pos:end="295:66"><call pos:start="295:9" pos:end="295:66"><name pos:start="295:9" pos:end="295:18">error_setg</name><argument_list pos:start="295:19" pos:end="295:66">(<argument pos:start="295:20" pos:end="295:23"><expr pos:start="295:20" pos:end="295:23"><name pos:start="295:20" pos:end="295:23">errp</name></expr></argument>, <argument pos:start="295:26" pos:end="295:55"><expr pos:start="295:26" pos:end="295:55"><literal type="string" pos:start="295:26" pos:end="295:55">"ZynqMP Boot cpu %s not found"</literal></expr></argument>, <argument pos:start="295:58" pos:end="295:65"><expr pos:start="295:58" pos:end="295:65"><name pos:start="295:58" pos:end="295:65">boot_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="297:9" pos:end="297:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="303:5" pos:end="307:5">for <control pos:start="303:9" pos:end="303:42">(<init pos:start="303:10" pos:end="303:15"><expr pos:start="303:10" pos:end="303:14"><name pos:start="303:10" pos:end="303:10">i</name> <operator pos:start="303:12" pos:end="303:12">=</operator> <literal type="number" pos:start="303:14" pos:end="303:14">0</literal></expr>;</init> <condition pos:start="303:17" pos:end="303:37"><expr pos:start="303:17" pos:end="303:36"><name pos:start="303:17" pos:end="303:17">i</name> <operator pos:start="303:19" pos:end="303:19">&lt;</operator> <name pos:start="303:21" pos:end="303:36">GIC_NUM_SPI_INTR</name></expr>;</condition> <incr pos:start="303:39" pos:end="303:41"><expr pos:start="303:39" pos:end="303:41"><name pos:start="303:39" pos:end="303:39">i</name><operator pos:start="303:40" pos:end="303:41">++</operator></expr></incr>)</control> <block pos:start="303:44" pos:end="307:5">{<block_content pos:start="305:9" pos:end="305:58">

        <expr_stmt pos:start="305:9" pos:end="305:58"><expr pos:start="305:9" pos:end="305:57"><name pos:start="305:9" pos:end="305:18"><name pos:start="305:9" pos:end="305:15">gic_spi</name><index pos:start="305:16" pos:end="305:18">[<expr pos:start="305:17" pos:end="305:17"><name pos:start="305:17" pos:end="305:17">i</name></expr>]</index></name> <operator pos:start="305:20" pos:end="305:20">=</operator> <call pos:start="305:22" pos:end="305:57"><name pos:start="305:22" pos:end="305:37">qdev_get_gpio_in</name><argument_list pos:start="305:38" pos:end="305:57">(<argument pos:start="305:39" pos:end="305:53"><expr pos:start="305:39" pos:end="305:53"><call pos:start="305:39" pos:end="305:53"><name pos:start="305:39" pos:end="305:44">DEVICE</name><argument_list pos:start="305:45" pos:end="305:53">(<argument pos:start="305:46" pos:end="305:52"><expr pos:start="305:46" pos:end="305:52"><operator pos:start="305:46" pos:end="305:46">&amp;</operator><name pos:start="305:47" pos:end="305:52"><name pos:start="305:47" pos:end="305:47">s</name><operator pos:start="305:48" pos:end="305:49">-&gt;</operator><name pos:start="305:50" pos:end="305:52">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="305:56" pos:end="305:56"><expr pos:start="305:56" pos:end="305:56"><name pos:start="305:56" pos:end="305:56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="311:5" pos:end="341:5">for <control pos:start="311:9" pos:end="311:46">(<init pos:start="311:10" pos:end="311:15"><expr pos:start="311:10" pos:end="311:14"><name pos:start="311:10" pos:end="311:10">i</name> <operator pos:start="311:12" pos:end="311:12">=</operator> <literal type="number" pos:start="311:14" pos:end="311:14">0</literal></expr>;</init> <condition pos:start="311:17" pos:end="311:41"><expr pos:start="311:17" pos:end="311:40"><name pos:start="311:17" pos:end="311:17">i</name> <operator pos:start="311:19" pos:end="311:19">&lt;</operator> <name pos:start="311:21" pos:end="311:40">XLNX_ZYNQMP_NUM_GEMS</name></expr>;</condition> <incr pos:start="311:43" pos:end="311:45"><expr pos:start="311:43" pos:end="311:45"><name pos:start="311:43" pos:end="311:43">i</name><operator pos:start="311:44" pos:end="311:45">++</operator></expr></incr>)</control> <block pos:start="311:48" pos:end="341:5">{<block_content pos:start="313:9" pos:end="339:49">

        <decl_stmt pos:start="313:9" pos:end="313:35"><decl pos:start="313:9" pos:end="313:34"><type pos:start="313:9" pos:end="313:17"><name pos:start="313:9" pos:end="313:15">NICInfo</name> <modifier pos:start="313:17" pos:end="313:17">*</modifier></type><name pos:start="313:18" pos:end="313:19">nd</name> <init pos:start="313:21" pos:end="313:34">= <expr pos:start="313:23" pos:end="313:34"><operator pos:start="313:23" pos:end="313:23">&amp;</operator><name pos:start="313:24" pos:end="313:34"><name pos:start="313:24" pos:end="313:31">nd_table</name><index pos:start="313:32" pos:end="313:34">[<expr pos:start="313:33" pos:end="313:33"><name pos:start="313:33" pos:end="313:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="317:9" pos:end="323:9"><if pos:start="317:9" pos:end="323:9">if <condition pos:start="317:12" pos:end="317:21">(<expr pos:start="317:13" pos:end="317:20"><name pos:start="317:13" pos:end="317:20"><name pos:start="317:13" pos:end="317:14">nd</name><operator pos:start="317:15" pos:end="317:16">-&gt;</operator><name pos:start="317:17" pos:end="317:20">used</name></name></expr>)</condition> <block pos:start="317:23" pos:end="323:9">{<block_content pos:start="319:13" pos:end="321:60">

            <expr_stmt pos:start="319:13" pos:end="319:55"><expr pos:start="319:13" pos:end="319:54"><call pos:start="319:13" pos:end="319:54"><name pos:start="319:13" pos:end="319:32">qemu_check_nic_model</name><argument_list pos:start="319:33" pos:end="319:54">(<argument pos:start="319:34" pos:end="319:35"><expr pos:start="319:34" pos:end="319:35"><name pos:start="319:34" pos:end="319:35">nd</name></expr></argument>, <argument pos:start="319:38" pos:end="319:53"><expr pos:start="319:38" pos:end="319:53"><name pos:start="319:38" pos:end="319:53">TYPE_CADENCE_GEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:60"><expr pos:start="321:13" pos:end="321:59"><call pos:start="321:13" pos:end="321:59"><name pos:start="321:13" pos:end="321:35">qdev_set_nic_properties</name><argument_list pos:start="321:36" pos:end="321:59">(<argument pos:start="321:37" pos:end="321:54"><expr pos:start="321:37" pos:end="321:54"><call pos:start="321:37" pos:end="321:54"><name pos:start="321:37" pos:end="321:42">DEVICE</name><argument_list pos:start="321:43" pos:end="321:54">(<argument pos:start="321:44" pos:end="321:53"><expr pos:start="321:44" pos:end="321:53"><operator pos:start="321:44" pos:end="321:44">&amp;</operator><name pos:start="321:45" pos:end="321:53"><name pos:start="321:45" pos:end="321:45">s</name><operator pos:start="321:46" pos:end="321:47">-&gt;</operator><name pos:start="321:48" pos:end="321:50">gem</name><index pos:start="321:51" pos:end="321:53">[<expr pos:start="321:52" pos:end="321:52"><name pos:start="321:52" pos:end="321:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="321:57" pos:end="321:58"><expr pos:start="321:57" pos:end="321:58"><name pos:start="321:57" pos:end="321:58">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:77"><expr pos:start="325:9" pos:end="325:76"><call pos:start="325:9" pos:end="325:76"><name pos:start="325:9" pos:end="325:32">object_property_set_bool</name><argument_list pos:start="325:33" pos:end="325:76">(<argument pos:start="325:34" pos:end="325:51"><expr pos:start="325:34" pos:end="325:51"><call pos:start="325:34" pos:end="325:51"><name pos:start="325:34" pos:end="325:39">OBJECT</name><argument_list pos:start="325:40" pos:end="325:51">(<argument pos:start="325:41" pos:end="325:50"><expr pos:start="325:41" pos:end="325:50"><operator pos:start="325:41" pos:end="325:41">&amp;</operator><name pos:start="325:42" pos:end="325:50"><name pos:start="325:42" pos:end="325:42">s</name><operator pos:start="325:43" pos:end="325:44">-&gt;</operator><name pos:start="325:45" pos:end="325:47">gem</name><index pos:start="325:48" pos:end="325:50">[<expr pos:start="325:49" pos:end="325:49"><name pos:start="325:49" pos:end="325:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="325:54" pos:end="325:57"><expr pos:start="325:54" pos:end="325:57"><name pos:start="325:54" pos:end="325:57">true</name></expr></argument>, <argument pos:start="325:60" pos:end="325:69"><expr pos:start="325:60" pos:end="325:69"><literal type="string" pos:start="325:60" pos:end="325:69">"realized"</literal></expr></argument>, <argument pos:start="325:72" pos:end="325:75"><expr pos:start="325:72" pos:end="325:75"><operator pos:start="325:72" pos:end="325:72">&amp;</operator><name pos:start="325:73" pos:end="325:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="327:9" pos:end="333:9"><if pos:start="327:9" pos:end="333:9">if <condition pos:start="327:12" pos:end="327:16">(<expr pos:start="327:13" pos:end="327:15"><name pos:start="327:13" pos:end="327:15">err</name></expr>)</condition> <block pos:start="327:18" pos:end="333:9">{<block_content pos:start="329:13" pos:end="331:19">

            <expr_stmt pos:start="329:13" pos:end="329:39"><expr pos:start="329:13" pos:end="329:38"><call pos:start="329:13" pos:end="329:38"><name pos:start="329:13" pos:end="329:27">error_propagate</name><argument_list pos:start="329:28" pos:end="329:38">(<argument pos:start="329:29" pos:end="329:32"><expr pos:start="329:29" pos:end="329:32"><name pos:start="329:29" pos:end="329:32">errp</name></expr></argument>, <argument pos:start="329:35" pos:end="329:37"><expr pos:start="329:35" pos:end="329:37"><name pos:start="329:35" pos:end="329:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="331:13" pos:end="331:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:68"><expr pos:start="335:9" pos:end="335:67"><call pos:start="335:9" pos:end="335:67"><name pos:start="335:9" pos:end="335:23">sysbus_mmio_map</name><argument_list pos:start="335:24" pos:end="335:67">(<argument pos:start="335:25" pos:end="335:50"><expr pos:start="335:25" pos:end="335:50"><call pos:start="335:25" pos:end="335:50"><name pos:start="335:25" pos:end="335:38">SYS_BUS_DEVICE</name><argument_list pos:start="335:39" pos:end="335:50">(<argument pos:start="335:40" pos:end="335:49"><expr pos:start="335:40" pos:end="335:49"><operator pos:start="335:40" pos:end="335:40">&amp;</operator><name pos:start="335:41" pos:end="335:49"><name pos:start="335:41" pos:end="335:41">s</name><operator pos:start="335:42" pos:end="335:43">-&gt;</operator><name pos:start="335:44" pos:end="335:46">gem</name><index pos:start="335:47" pos:end="335:49">[<expr pos:start="335:48" pos:end="335:48"><name pos:start="335:48" pos:end="335:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="335:53" pos:end="335:53"><expr pos:start="335:53" pos:end="335:53"><literal type="number" pos:start="335:53" pos:end="335:53">0</literal></expr></argument>, <argument pos:start="335:56" pos:end="335:66"><expr pos:start="335:56" pos:end="335:66"><name pos:start="335:56" pos:end="335:66"><name pos:start="335:56" pos:end="335:63">gem_addr</name><index pos:start="335:64" pos:end="335:66">[<expr pos:start="335:65" pos:end="335:65"><name pos:start="335:65" pos:end="335:65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="339:49"><expr pos:start="337:9" pos:end="339:48"><call pos:start="337:9" pos:end="339:48"><name pos:start="337:9" pos:end="337:26">sysbus_connect_irq</name><argument_list pos:start="337:27" pos:end="339:48">(<argument pos:start="337:28" pos:end="337:53"><expr pos:start="337:28" pos:end="337:53"><call pos:start="337:28" pos:end="337:53"><name pos:start="337:28" pos:end="337:41">SYS_BUS_DEVICE</name><argument_list pos:start="337:42" pos:end="337:53">(<argument pos:start="337:43" pos:end="337:52"><expr pos:start="337:43" pos:end="337:52"><operator pos:start="337:43" pos:end="337:43">&amp;</operator><name pos:start="337:44" pos:end="337:52"><name pos:start="337:44" pos:end="337:44">s</name><operator pos:start="337:45" pos:end="337:46">-&gt;</operator><name pos:start="337:47" pos:end="337:49">gem</name><index pos:start="337:50" pos:end="337:52">[<expr pos:start="337:51" pos:end="337:51"><name pos:start="337:51" pos:end="337:51">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="337:56" pos:end="337:56"><expr pos:start="337:56" pos:end="337:56"><literal type="number" pos:start="337:56" pos:end="337:56">0</literal></expr></argument>,

                           <argument pos:start="339:28" pos:end="339:47"><expr pos:start="339:28" pos:end="339:47"><name pos:start="339:28" pos:end="339:47"><name pos:start="339:28" pos:end="339:34">gic_spi</name><index pos:start="339:35" pos:end="339:47">[<expr pos:start="339:36" pos:end="339:46"><name pos:start="339:36" pos:end="339:46"><name pos:start="339:36" pos:end="339:43">gem_intr</name><index pos:start="339:44" pos:end="339:46">[<expr pos:start="339:45" pos:end="339:45"><name pos:start="339:45" pos:end="339:45">i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="345:5" pos:end="363:5">for <control pos:start="345:9" pos:end="345:47">(<init pos:start="345:10" pos:end="345:15"><expr pos:start="345:10" pos:end="345:14"><name pos:start="345:10" pos:end="345:10">i</name> <operator pos:start="345:12" pos:end="345:12">=</operator> <literal type="number" pos:start="345:14" pos:end="345:14">0</literal></expr>;</init> <condition pos:start="345:17" pos:end="345:42"><expr pos:start="345:17" pos:end="345:41"><name pos:start="345:17" pos:end="345:17">i</name> <operator pos:start="345:19" pos:end="345:19">&lt;</operator> <name pos:start="345:21" pos:end="345:41">XLNX_ZYNQMP_NUM_UARTS</name></expr>;</condition> <incr pos:start="345:44" pos:end="345:46"><expr pos:start="345:44" pos:end="345:46"><name pos:start="345:44" pos:end="345:44">i</name><operator pos:start="345:45" pos:end="345:46">++</operator></expr></incr>)</control> <block pos:start="345:49" pos:end="363:5">{<block_content pos:start="347:9" pos:end="361:50">

        <expr_stmt pos:start="347:9" pos:end="347:78"><expr pos:start="347:9" pos:end="347:77"><call pos:start="347:9" pos:end="347:77"><name pos:start="347:9" pos:end="347:32">object_property_set_bool</name><argument_list pos:start="347:33" pos:end="347:77">(<argument pos:start="347:34" pos:end="347:52"><expr pos:start="347:34" pos:end="347:52"><call pos:start="347:34" pos:end="347:52"><name pos:start="347:34" pos:end="347:39">OBJECT</name><argument_list pos:start="347:40" pos:end="347:52">(<argument pos:start="347:41" pos:end="347:51"><expr pos:start="347:41" pos:end="347:51"><operator pos:start="347:41" pos:end="347:41">&amp;</operator><name pos:start="347:42" pos:end="347:51"><name pos:start="347:42" pos:end="347:42">s</name><operator pos:start="347:43" pos:end="347:44">-&gt;</operator><name pos:start="347:45" pos:end="347:48">uart</name><index pos:start="347:49" pos:end="347:51">[<expr pos:start="347:50" pos:end="347:50"><name pos:start="347:50" pos:end="347:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="347:55" pos:end="347:58"><expr pos:start="347:55" pos:end="347:58"><name pos:start="347:55" pos:end="347:58">true</name></expr></argument>, <argument pos:start="347:61" pos:end="347:70"><expr pos:start="347:61" pos:end="347:70"><literal type="string" pos:start="347:61" pos:end="347:70">"realized"</literal></expr></argument>, <argument pos:start="347:73" pos:end="347:76"><expr pos:start="347:73" pos:end="347:76"><operator pos:start="347:73" pos:end="347:73">&amp;</operator><name pos:start="347:74" pos:end="347:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="349:9" pos:end="355:9"><if pos:start="349:9" pos:end="355:9">if <condition pos:start="349:12" pos:end="349:16">(<expr pos:start="349:13" pos:end="349:15"><name pos:start="349:13" pos:end="349:15">err</name></expr>)</condition> <block pos:start="349:18" pos:end="355:9">{<block_content pos:start="351:13" pos:end="353:19">

            <expr_stmt pos:start="351:13" pos:end="351:39"><expr pos:start="351:13" pos:end="351:38"><call pos:start="351:13" pos:end="351:38"><name pos:start="351:13" pos:end="351:27">error_propagate</name><argument_list pos:start="351:28" pos:end="351:38">(<argument pos:start="351:29" pos:end="351:32"><expr pos:start="351:29" pos:end="351:32"><name pos:start="351:29" pos:end="351:32">errp</name></expr></argument>, <argument pos:start="351:35" pos:end="351:37"><expr pos:start="351:35" pos:end="351:37"><name pos:start="351:35" pos:end="351:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="353:13" pos:end="353:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="357:9" pos:end="357:70"><expr pos:start="357:9" pos:end="357:69"><call pos:start="357:9" pos:end="357:69"><name pos:start="357:9" pos:end="357:23">sysbus_mmio_map</name><argument_list pos:start="357:24" pos:end="357:69">(<argument pos:start="357:25" pos:end="357:51"><expr pos:start="357:25" pos:end="357:51"><call pos:start="357:25" pos:end="357:51"><name pos:start="357:25" pos:end="357:38">SYS_BUS_DEVICE</name><argument_list pos:start="357:39" pos:end="357:51">(<argument pos:start="357:40" pos:end="357:50"><expr pos:start="357:40" pos:end="357:50"><operator pos:start="357:40" pos:end="357:40">&amp;</operator><name pos:start="357:41" pos:end="357:50"><name pos:start="357:41" pos:end="357:41">s</name><operator pos:start="357:42" pos:end="357:43">-&gt;</operator><name pos:start="357:44" pos:end="357:47">uart</name><index pos:start="357:48" pos:end="357:50">[<expr pos:start="357:49" pos:end="357:49"><name pos:start="357:49" pos:end="357:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="357:54" pos:end="357:54"><expr pos:start="357:54" pos:end="357:54"><literal type="number" pos:start="357:54" pos:end="357:54">0</literal></expr></argument>, <argument pos:start="357:57" pos:end="357:68"><expr pos:start="357:57" pos:end="357:68"><name pos:start="357:57" pos:end="357:68"><name pos:start="357:57" pos:end="357:65">uart_addr</name><index pos:start="357:66" pos:end="357:68">[<expr pos:start="357:67" pos:end="357:67"><name pos:start="357:67" pos:end="357:67">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="359:9" pos:end="361:50"><expr pos:start="359:9" pos:end="361:49"><call pos:start="359:9" pos:end="361:49"><name pos:start="359:9" pos:end="359:26">sysbus_connect_irq</name><argument_list pos:start="359:27" pos:end="361:49">(<argument pos:start="359:28" pos:end="359:54"><expr pos:start="359:28" pos:end="359:54"><call pos:start="359:28" pos:end="359:54"><name pos:start="359:28" pos:end="359:41">SYS_BUS_DEVICE</name><argument_list pos:start="359:42" pos:end="359:54">(<argument pos:start="359:43" pos:end="359:53"><expr pos:start="359:43" pos:end="359:53"><operator pos:start="359:43" pos:end="359:43">&amp;</operator><name pos:start="359:44" pos:end="359:53"><name pos:start="359:44" pos:end="359:44">s</name><operator pos:start="359:45" pos:end="359:46">-&gt;</operator><name pos:start="359:47" pos:end="359:50">uart</name><index pos:start="359:51" pos:end="359:53">[<expr pos:start="359:52" pos:end="359:52"><name pos:start="359:52" pos:end="359:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="359:57" pos:end="359:57"><expr pos:start="359:57" pos:end="359:57"><literal type="number" pos:start="359:57" pos:end="359:57">0</literal></expr></argument>,

                           <argument pos:start="361:28" pos:end="361:48"><expr pos:start="361:28" pos:end="361:48"><name pos:start="361:28" pos:end="361:48"><name pos:start="361:28" pos:end="361:34">gic_spi</name><index pos:start="361:35" pos:end="361:48">[<expr pos:start="361:36" pos:end="361:47"><name pos:start="361:36" pos:end="361:47"><name pos:start="361:36" pos:end="361:44">uart_intr</name><index pos:start="361:45" pos:end="361:47">[<expr pos:start="361:46" pos:end="361:46"><name pos:start="361:46" pos:end="361:46">i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="367:5" pos:end="369:42"><expr pos:start="367:5" pos:end="369:41"><call pos:start="367:5" pos:end="369:41"><name pos:start="367:5" pos:end="367:27">object_property_set_int</name><argument_list pos:start="367:28" pos:end="369:41">(<argument pos:start="367:29" pos:end="367:44"><expr pos:start="367:29" pos:end="367:44"><call pos:start="367:29" pos:end="367:44"><name pos:start="367:29" pos:end="367:34">OBJECT</name><argument_list pos:start="367:35" pos:end="367:44">(<argument pos:start="367:36" pos:end="367:43"><expr pos:start="367:36" pos:end="367:43"><operator pos:start="367:36" pos:end="367:36">&amp;</operator><name pos:start="367:37" pos:end="367:43"><name pos:start="367:37" pos:end="367:37">s</name><operator pos:start="367:38" pos:end="367:39">-&gt;</operator><name pos:start="367:40" pos:end="367:43">sata</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="367:47" pos:end="367:60"><expr pos:start="367:47" pos:end="367:60"><name pos:start="367:47" pos:end="367:60">SATA_NUM_PORTS</name></expr></argument>, <argument pos:start="367:63" pos:end="367:73"><expr pos:start="367:63" pos:end="367:73"><literal type="string" pos:start="367:63" pos:end="367:73">"num-ports"</literal></expr></argument>,

                            <argument pos:start="369:29" pos:end="369:40"><expr pos:start="369:29" pos:end="369:40"><operator pos:start="369:29" pos:end="369:29">&amp;</operator><name pos:start="369:30" pos:end="369:40">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:71"><expr pos:start="371:5" pos:end="371:70"><call pos:start="371:5" pos:end="371:70"><name pos:start="371:5" pos:end="371:28">object_property_set_bool</name><argument_list pos:start="371:29" pos:end="371:70">(<argument pos:start="371:30" pos:end="371:45"><expr pos:start="371:30" pos:end="371:45"><call pos:start="371:30" pos:end="371:45"><name pos:start="371:30" pos:end="371:35">OBJECT</name><argument_list pos:start="371:36" pos:end="371:45">(<argument pos:start="371:37" pos:end="371:44"><expr pos:start="371:37" pos:end="371:44"><operator pos:start="371:37" pos:end="371:37">&amp;</operator><name pos:start="371:38" pos:end="371:44"><name pos:start="371:38" pos:end="371:38">s</name><operator pos:start="371:39" pos:end="371:40">-&gt;</operator><name pos:start="371:41" pos:end="371:44">sata</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="371:48" pos:end="371:51"><expr pos:start="371:48" pos:end="371:51"><name pos:start="371:48" pos:end="371:51">true</name></expr></argument>, <argument pos:start="371:54" pos:end="371:63"><expr pos:start="371:54" pos:end="371:63"><literal type="string" pos:start="371:54" pos:end="371:63">"realized"</literal></expr></argument>, <argument pos:start="371:66" pos:end="371:69"><expr pos:start="371:66" pos:end="371:69"><operator pos:start="371:66" pos:end="371:66">&amp;</operator><name pos:start="371:67" pos:end="371:69">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="373:5" pos:end="379:5"><if pos:start="373:5" pos:end="379:5">if <condition pos:start="373:8" pos:end="373:12">(<expr pos:start="373:9" pos:end="373:11"><name pos:start="373:9" pos:end="373:11">err</name></expr>)</condition> <block pos:start="373:14" pos:end="379:5">{<block_content pos:start="375:9" pos:end="377:15">

        <expr_stmt pos:start="375:9" pos:end="375:35"><expr pos:start="375:9" pos:end="375:34"><call pos:start="375:9" pos:end="375:34"><name pos:start="375:9" pos:end="375:23">error_propagate</name><argument_list pos:start="375:24" pos:end="375:34">(<argument pos:start="375:25" pos:end="375:28"><expr pos:start="375:25" pos:end="375:28"><name pos:start="375:25" pos:end="375:28">errp</name></expr></argument>, <argument pos:start="375:31" pos:end="375:33"><expr pos:start="375:31" pos:end="375:33"><name pos:start="375:31" pos:end="375:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="377:9" pos:end="377:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="383:5" pos:end="383:60"><expr pos:start="383:5" pos:end="383:59"><call pos:start="383:5" pos:end="383:59"><name pos:start="383:5" pos:end="383:19">sysbus_mmio_map</name><argument_list pos:start="383:20" pos:end="383:59">(<argument pos:start="383:21" pos:end="383:44"><expr pos:start="383:21" pos:end="383:44"><call pos:start="383:21" pos:end="383:44"><name pos:start="383:21" pos:end="383:34">SYS_BUS_DEVICE</name><argument_list pos:start="383:35" pos:end="383:44">(<argument pos:start="383:36" pos:end="383:43"><expr pos:start="383:36" pos:end="383:43"><operator pos:start="383:36" pos:end="383:36">&amp;</operator><name pos:start="383:37" pos:end="383:43"><name pos:start="383:37" pos:end="383:37">s</name><operator pos:start="383:38" pos:end="383:39">-&gt;</operator><name pos:start="383:40" pos:end="383:43">sata</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="383:47" pos:end="383:47"><expr pos:start="383:47" pos:end="383:47"><literal type="number" pos:start="383:47" pos:end="383:47">0</literal></expr></argument>, <argument pos:start="383:50" pos:end="383:58"><expr pos:start="383:50" pos:end="383:58"><name pos:start="383:50" pos:end="383:58">SATA_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:72"><expr pos:start="385:5" pos:end="385:71"><call pos:start="385:5" pos:end="385:71"><name pos:start="385:5" pos:end="385:22">sysbus_connect_irq</name><argument_list pos:start="385:23" pos:end="385:71">(<argument pos:start="385:24" pos:end="385:47"><expr pos:start="385:24" pos:end="385:47"><call pos:start="385:24" pos:end="385:47"><name pos:start="385:24" pos:end="385:37">SYS_BUS_DEVICE</name><argument_list pos:start="385:38" pos:end="385:47">(<argument pos:start="385:39" pos:end="385:46"><expr pos:start="385:39" pos:end="385:46"><operator pos:start="385:39" pos:end="385:39">&amp;</operator><name pos:start="385:40" pos:end="385:46"><name pos:start="385:40" pos:end="385:40">s</name><operator pos:start="385:41" pos:end="385:42">-&gt;</operator><name pos:start="385:43" pos:end="385:46">sata</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="385:50" pos:end="385:50"><expr pos:start="385:50" pos:end="385:50"><literal type="number" pos:start="385:50" pos:end="385:50">0</literal></expr></argument>, <argument pos:start="385:53" pos:end="385:70"><expr pos:start="385:53" pos:end="385:70"><name pos:start="385:53" pos:end="385:70"><name pos:start="385:53" pos:end="385:59">gic_spi</name><index pos:start="385:60" pos:end="385:70">[<expr pos:start="385:61" pos:end="385:69"><name pos:start="385:61" pos:end="385:69">SATA_INTR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="389:5" pos:end="427:5">for <control pos:start="389:9" pos:end="389:47">(<init pos:start="389:10" pos:end="389:15"><expr pos:start="389:10" pos:end="389:14"><name pos:start="389:10" pos:end="389:10">i</name> <operator pos:start="389:12" pos:end="389:12">=</operator> <literal type="number" pos:start="389:14" pos:end="389:14">0</literal></expr>;</init> <condition pos:start="389:17" pos:end="389:42"><expr pos:start="389:17" pos:end="389:41"><name pos:start="389:17" pos:end="389:17">i</name> <operator pos:start="389:19" pos:end="389:19">&lt;</operator> <name pos:start="389:21" pos:end="389:41">XLNX_ZYNQMP_NUM_SDHCI</name></expr>;</condition> <incr pos:start="389:44" pos:end="389:46"><expr pos:start="389:44" pos:end="389:46"><name pos:start="389:44" pos:end="389:44">i</name><operator pos:start="389:45" pos:end="389:46">++</operator></expr></incr>)</control> <block pos:start="389:49" pos:end="427:5">{<block_content pos:start="391:9" pos:end="425:25">

        <decl_stmt pos:start="391:9" pos:end="391:23"><decl pos:start="391:9" pos:end="391:22"><type pos:start="391:9" pos:end="391:14"><name pos:start="391:9" pos:end="391:12">char</name> <modifier pos:start="391:14" pos:end="391:14">*</modifier></type><name pos:start="391:15" pos:end="391:22">bus_name</name></decl>;</decl_stmt>



        <expr_stmt pos:start="395:9" pos:end="397:51"><expr pos:start="395:9" pos:end="397:50"><call pos:start="395:9" pos:end="397:50"><name pos:start="395:9" pos:end="395:32">object_property_set_bool</name><argument_list pos:start="395:33" pos:end="397:50">(<argument pos:start="395:34" pos:end="395:53"><expr pos:start="395:34" pos:end="395:53"><call pos:start="395:34" pos:end="395:53"><name pos:start="395:34" pos:end="395:39">OBJECT</name><argument_list pos:start="395:40" pos:end="395:53">(<argument pos:start="395:41" pos:end="395:52"><expr pos:start="395:41" pos:end="395:52"><operator pos:start="395:41" pos:end="395:41">&amp;</operator><name pos:start="395:42" pos:end="395:52"><name pos:start="395:42" pos:end="395:42">s</name><operator pos:start="395:43" pos:end="395:44">-&gt;</operator><name pos:start="395:45" pos:end="395:49">sdhci</name><index pos:start="395:50" pos:end="395:52">[<expr pos:start="395:51" pos:end="395:51"><name pos:start="395:51" pos:end="395:51">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="395:56" pos:end="395:59"><expr pos:start="395:56" pos:end="395:59"><name pos:start="395:56" pos:end="395:59">true</name></expr></argument>,

                                 <argument pos:start="397:34" pos:end="397:43"><expr pos:start="397:34" pos:end="397:43"><literal type="string" pos:start="397:34" pos:end="397:43">"realized"</literal></expr></argument>, <argument pos:start="397:46" pos:end="397:49"><expr pos:start="397:46" pos:end="397:49"><operator pos:start="397:46" pos:end="397:46">&amp;</operator><name pos:start="397:47" pos:end="397:49">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="399:9" pos:end="405:9"><if pos:start="399:9" pos:end="405:9">if <condition pos:start="399:12" pos:end="399:16">(<expr pos:start="399:13" pos:end="399:15"><name pos:start="399:13" pos:end="399:15">err</name></expr>)</condition> <block pos:start="399:18" pos:end="405:9">{<block_content pos:start="401:13" pos:end="403:19">

            <expr_stmt pos:start="401:13" pos:end="401:39"><expr pos:start="401:13" pos:end="401:38"><call pos:start="401:13" pos:end="401:38"><name pos:start="401:13" pos:end="401:27">error_propagate</name><argument_list pos:start="401:28" pos:end="401:38">(<argument pos:start="401:29" pos:end="401:32"><expr pos:start="401:29" pos:end="401:32"><name pos:start="401:29" pos:end="401:32">errp</name></expr></argument>, <argument pos:start="401:35" pos:end="401:37"><expr pos:start="401:35" pos:end="401:37"><name pos:start="401:35" pos:end="401:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="403:13" pos:end="403:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="407:9" pos:end="409:39"><expr pos:start="407:9" pos:end="409:38"><call pos:start="407:9" pos:end="409:38"><name pos:start="407:9" pos:end="407:23">sysbus_mmio_map</name><argument_list pos:start="407:24" pos:end="409:38">(<argument pos:start="407:25" pos:end="407:52"><expr pos:start="407:25" pos:end="407:52"><call pos:start="407:25" pos:end="407:52"><name pos:start="407:25" pos:end="407:38">SYS_BUS_DEVICE</name><argument_list pos:start="407:39" pos:end="407:52">(<argument pos:start="407:40" pos:end="407:51"><expr pos:start="407:40" pos:end="407:51"><operator pos:start="407:40" pos:end="407:40">&amp;</operator><name pos:start="407:41" pos:end="407:51"><name pos:start="407:41" pos:end="407:41">s</name><operator pos:start="407:42" pos:end="407:43">-&gt;</operator><name pos:start="407:44" pos:end="407:48">sdhci</name><index pos:start="407:49" pos:end="407:51">[<expr pos:start="407:50" pos:end="407:50"><name pos:start="407:50" pos:end="407:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="407:55" pos:end="407:55"><expr pos:start="407:55" pos:end="407:55"><literal type="number" pos:start="407:55" pos:end="407:55">0</literal></expr></argument>,

                        <argument pos:start="409:25" pos:end="409:37"><expr pos:start="409:25" pos:end="409:37"><name pos:start="409:25" pos:end="409:37"><name pos:start="409:25" pos:end="409:34">sdhci_addr</name><index pos:start="409:35" pos:end="409:37">[<expr pos:start="409:36" pos:end="409:36"><name pos:start="409:36" pos:end="409:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="411:9" pos:end="413:51"><expr pos:start="411:9" pos:end="413:50"><call pos:start="411:9" pos:end="413:50"><name pos:start="411:9" pos:end="411:26">sysbus_connect_irq</name><argument_list pos:start="411:27" pos:end="413:50">(<argument pos:start="411:28" pos:end="411:55"><expr pos:start="411:28" pos:end="411:55"><call pos:start="411:28" pos:end="411:55"><name pos:start="411:28" pos:end="411:41">SYS_BUS_DEVICE</name><argument_list pos:start="411:42" pos:end="411:55">(<argument pos:start="411:43" pos:end="411:54"><expr pos:start="411:43" pos:end="411:54"><operator pos:start="411:43" pos:end="411:43">&amp;</operator><name pos:start="411:44" pos:end="411:54"><name pos:start="411:44" pos:end="411:44">s</name><operator pos:start="411:45" pos:end="411:46">-&gt;</operator><name pos:start="411:47" pos:end="411:51">sdhci</name><index pos:start="411:52" pos:end="411:54">[<expr pos:start="411:53" pos:end="411:53"><name pos:start="411:53" pos:end="411:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="411:58" pos:end="411:58"><expr pos:start="411:58" pos:end="411:58"><literal type="number" pos:start="411:58" pos:end="411:58">0</literal></expr></argument>,

                           <argument pos:start="413:28" pos:end="413:49"><expr pos:start="413:28" pos:end="413:49"><name pos:start="413:28" pos:end="413:49"><name pos:start="413:28" pos:end="413:34">gic_spi</name><index pos:start="413:35" pos:end="413:49">[<expr pos:start="413:36" pos:end="413:48"><name pos:start="413:36" pos:end="413:48"><name pos:start="413:36" pos:end="413:45">sdhci_intr</name><index pos:start="413:46" pos:end="413:48">[<expr pos:start="413:47" pos:end="413:47"><name pos:start="413:47" pos:end="413:47">i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="415:9" pos:end="415:55">/* Alias controller SD bus to the SoC itself */</comment>

        <expr_stmt pos:start="417:9" pos:end="417:50"><expr pos:start="417:9" pos:end="417:49"><name pos:start="417:9" pos:end="417:16">bus_name</name> <operator pos:start="417:18" pos:end="417:18">=</operator> <call pos:start="417:20" pos:end="417:49"><name pos:start="417:20" pos:end="417:34">g_strdup_printf</name><argument_list pos:start="417:35" pos:end="417:49">(<argument pos:start="417:36" pos:end="417:45"><expr pos:start="417:36" pos:end="417:45"><literal type="string" pos:start="417:36" pos:end="417:45">"sd-bus%d"</literal></expr></argument>, <argument pos:start="417:48" pos:end="417:48"><expr pos:start="417:48" pos:end="417:48"><name pos:start="417:48" pos:end="417:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="419:9" pos:end="423:48"><expr pos:start="419:9" pos:end="423:47"><call pos:start="419:9" pos:end="423:47"><name pos:start="419:9" pos:end="419:33">object_property_add_alias</name><argument_list pos:start="419:34" pos:end="423:47">(<argument pos:start="419:35" pos:end="419:43"><expr pos:start="419:35" pos:end="419:43"><call pos:start="419:35" pos:end="419:43"><name pos:start="419:35" pos:end="419:40">OBJECT</name><argument_list pos:start="419:41" pos:end="419:43">(<argument pos:start="419:42" pos:end="419:42"><expr pos:start="419:42" pos:end="419:42"><name pos:start="419:42" pos:end="419:42">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="419:46" pos:end="419:53"><expr pos:start="419:46" pos:end="419:53"><name pos:start="419:46" pos:end="419:53">bus_name</name></expr></argument>,

                                  <argument pos:start="421:35" pos:end="421:54"><expr pos:start="421:35" pos:end="421:54"><call pos:start="421:35" pos:end="421:54"><name pos:start="421:35" pos:end="421:40">OBJECT</name><argument_list pos:start="421:41" pos:end="421:54">(<argument pos:start="421:42" pos:end="421:53"><expr pos:start="421:42" pos:end="421:53"><operator pos:start="421:42" pos:end="421:42">&amp;</operator><name pos:start="421:43" pos:end="421:53"><name pos:start="421:43" pos:end="421:43">s</name><operator pos:start="421:44" pos:end="421:45">-&gt;</operator><name pos:start="421:46" pos:end="421:50">sdhci</name><index pos:start="421:51" pos:end="421:53">[<expr pos:start="421:52" pos:end="421:52"><name pos:start="421:52" pos:end="421:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="421:57" pos:end="421:64"><expr pos:start="421:57" pos:end="421:64"><literal type="string" pos:start="421:57" pos:end="421:64">"sd-bus"</literal></expr></argument>,

                                  <argument pos:start="423:35" pos:end="423:46"><expr pos:start="423:35" pos:end="423:46"><operator pos:start="423:35" pos:end="423:35">&amp;</operator><name pos:start="423:36" pos:end="423:46">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="425:9" pos:end="425:25"><expr pos:start="425:9" pos:end="425:24"><call pos:start="425:9" pos:end="425:24"><name pos:start="425:9" pos:end="425:14">g_free</name><argument_list pos:start="425:15" pos:end="425:24">(<argument pos:start="425:16" pos:end="425:23"><expr pos:start="425:16" pos:end="425:23"><name pos:start="425:16" pos:end="425:23">bus_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="431:5" pos:end="461:5">for <control pos:start="431:9" pos:end="431:46">(<init pos:start="431:10" pos:end="431:15"><expr pos:start="431:10" pos:end="431:14"><name pos:start="431:10" pos:end="431:10">i</name> <operator pos:start="431:12" pos:end="431:12">=</operator> <literal type="number" pos:start="431:14" pos:end="431:14">0</literal></expr>;</init> <condition pos:start="431:17" pos:end="431:41"><expr pos:start="431:17" pos:end="431:40"><name pos:start="431:17" pos:end="431:17">i</name> <operator pos:start="431:19" pos:end="431:19">&lt;</operator> <name pos:start="431:21" pos:end="431:40">XLNX_ZYNQMP_NUM_SPIS</name></expr>;</condition> <incr pos:start="431:43" pos:end="431:45"><expr pos:start="431:43" pos:end="431:45"><name pos:start="431:43" pos:end="431:43">i</name><operator pos:start="431:44" pos:end="431:45">++</operator></expr></incr>)</control> <block pos:start="431:48" pos:end="461:5">{<block_content pos:start="433:9" pos:end="459:25">

        <decl_stmt pos:start="433:9" pos:end="433:24"><decl pos:start="433:9" pos:end="433:23"><type pos:start="433:9" pos:end="433:15"><name pos:start="433:9" pos:end="433:13">gchar</name> <modifier pos:start="433:15" pos:end="433:15">*</modifier></type><name pos:start="433:16" pos:end="433:23">bus_name</name></decl>;</decl_stmt>



        <expr_stmt pos:start="437:9" pos:end="437:77"><expr pos:start="437:9" pos:end="437:76"><call pos:start="437:9" pos:end="437:76"><name pos:start="437:9" pos:end="437:32">object_property_set_bool</name><argument_list pos:start="437:33" pos:end="437:76">(<argument pos:start="437:34" pos:end="437:51"><expr pos:start="437:34" pos:end="437:51"><call pos:start="437:34" pos:end="437:51"><name pos:start="437:34" pos:end="437:39">OBJECT</name><argument_list pos:start="437:40" pos:end="437:51">(<argument pos:start="437:41" pos:end="437:50"><expr pos:start="437:41" pos:end="437:50"><operator pos:start="437:41" pos:end="437:41">&amp;</operator><name pos:start="437:42" pos:end="437:50"><name pos:start="437:42" pos:end="437:42">s</name><operator pos:start="437:43" pos:end="437:44">-&gt;</operator><name pos:start="437:45" pos:end="437:47">spi</name><index pos:start="437:48" pos:end="437:50">[<expr pos:start="437:49" pos:end="437:49"><name pos:start="437:49" pos:end="437:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="437:54" pos:end="437:57"><expr pos:start="437:54" pos:end="437:57"><name pos:start="437:54" pos:end="437:57">true</name></expr></argument>, <argument pos:start="437:60" pos:end="437:69"><expr pos:start="437:60" pos:end="437:69"><literal type="string" pos:start="437:60" pos:end="437:69">"realized"</literal></expr></argument>, <argument pos:start="437:72" pos:end="437:75"><expr pos:start="437:72" pos:end="437:75"><operator pos:start="437:72" pos:end="437:72">&amp;</operator><name pos:start="437:73" pos:end="437:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="441:9" pos:end="441:68"><expr pos:start="441:9" pos:end="441:67"><call pos:start="441:9" pos:end="441:67"><name pos:start="441:9" pos:end="441:23">sysbus_mmio_map</name><argument_list pos:start="441:24" pos:end="441:67">(<argument pos:start="441:25" pos:end="441:50"><expr pos:start="441:25" pos:end="441:50"><call pos:start="441:25" pos:end="441:50"><name pos:start="441:25" pos:end="441:38">SYS_BUS_DEVICE</name><argument_list pos:start="441:39" pos:end="441:50">(<argument pos:start="441:40" pos:end="441:49"><expr pos:start="441:40" pos:end="441:49"><operator pos:start="441:40" pos:end="441:40">&amp;</operator><name pos:start="441:41" pos:end="441:49"><name pos:start="441:41" pos:end="441:41">s</name><operator pos:start="441:42" pos:end="441:43">-&gt;</operator><name pos:start="441:44" pos:end="441:46">spi</name><index pos:start="441:47" pos:end="441:49">[<expr pos:start="441:48" pos:end="441:48"><name pos:start="441:48" pos:end="441:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="441:53" pos:end="441:53"><expr pos:start="441:53" pos:end="441:53"><literal type="number" pos:start="441:53" pos:end="441:53">0</literal></expr></argument>, <argument pos:start="441:56" pos:end="441:66"><expr pos:start="441:56" pos:end="441:66"><name pos:start="441:56" pos:end="441:66"><name pos:start="441:56" pos:end="441:63">spi_addr</name><index pos:start="441:64" pos:end="441:66">[<expr pos:start="441:65" pos:end="441:65"><name pos:start="441:65" pos:end="441:65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="443:9" pos:end="445:49"><expr pos:start="443:9" pos:end="445:48"><call pos:start="443:9" pos:end="445:48"><name pos:start="443:9" pos:end="443:26">sysbus_connect_irq</name><argument_list pos:start="443:27" pos:end="445:48">(<argument pos:start="443:28" pos:end="443:53"><expr pos:start="443:28" pos:end="443:53"><call pos:start="443:28" pos:end="443:53"><name pos:start="443:28" pos:end="443:41">SYS_BUS_DEVICE</name><argument_list pos:start="443:42" pos:end="443:53">(<argument pos:start="443:43" pos:end="443:52"><expr pos:start="443:43" pos:end="443:52"><operator pos:start="443:43" pos:end="443:43">&amp;</operator><name pos:start="443:44" pos:end="443:52"><name pos:start="443:44" pos:end="443:44">s</name><operator pos:start="443:45" pos:end="443:46">-&gt;</operator><name pos:start="443:47" pos:end="443:49">spi</name><index pos:start="443:50" pos:end="443:52">[<expr pos:start="443:51" pos:end="443:51"><name pos:start="443:51" pos:end="443:51">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="443:56" pos:end="443:56"><expr pos:start="443:56" pos:end="443:56"><literal type="number" pos:start="443:56" pos:end="443:56">0</literal></expr></argument>,

                           <argument pos:start="445:28" pos:end="445:47"><expr pos:start="445:28" pos:end="445:47"><name pos:start="445:28" pos:end="445:47"><name pos:start="445:28" pos:end="445:34">gic_spi</name><index pos:start="445:35" pos:end="445:47">[<expr pos:start="445:36" pos:end="445:46"><name pos:start="445:36" pos:end="445:46"><name pos:start="445:36" pos:end="445:43">spi_intr</name><index pos:start="445:44" pos:end="445:46">[<expr pos:start="445:45" pos:end="445:45"><name pos:start="445:45" pos:end="445:45">i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="449:9" pos:end="449:56">/* Alias controller SPI bus to the SoC itself */</comment>

        <expr_stmt pos:start="451:9" pos:end="451:47"><expr pos:start="451:9" pos:end="451:46"><name pos:start="451:9" pos:end="451:16">bus_name</name> <operator pos:start="451:18" pos:end="451:18">=</operator> <call pos:start="451:20" pos:end="451:46"><name pos:start="451:20" pos:end="451:34">g_strdup_printf</name><argument_list pos:start="451:35" pos:end="451:46">(<argument pos:start="451:36" pos:end="451:42"><expr pos:start="451:36" pos:end="451:42"><literal type="string" pos:start="451:36" pos:end="451:42">"spi%d"</literal></expr></argument>, <argument pos:start="451:45" pos:end="451:45"><expr pos:start="451:45" pos:end="451:45"><name pos:start="451:45" pos:end="451:45">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="453:9" pos:end="457:48"><expr pos:start="453:9" pos:end="457:47"><call pos:start="453:9" pos:end="457:47"><name pos:start="453:9" pos:end="453:33">object_property_add_alias</name><argument_list pos:start="453:34" pos:end="457:47">(<argument pos:start="453:35" pos:end="453:43"><expr pos:start="453:35" pos:end="453:43"><call pos:start="453:35" pos:end="453:43"><name pos:start="453:35" pos:end="453:40">OBJECT</name><argument_list pos:start="453:41" pos:end="453:43">(<argument pos:start="453:42" pos:end="453:42"><expr pos:start="453:42" pos:end="453:42"><name pos:start="453:42" pos:end="453:42">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="453:46" pos:end="453:53"><expr pos:start="453:46" pos:end="453:53"><name pos:start="453:46" pos:end="453:53">bus_name</name></expr></argument>,

                                  <argument pos:start="455:35" pos:end="455:52"><expr pos:start="455:35" pos:end="455:52"><call pos:start="455:35" pos:end="455:52"><name pos:start="455:35" pos:end="455:40">OBJECT</name><argument_list pos:start="455:41" pos:end="455:52">(<argument pos:start="455:42" pos:end="455:51"><expr pos:start="455:42" pos:end="455:51"><operator pos:start="455:42" pos:end="455:42">&amp;</operator><name pos:start="455:43" pos:end="455:51"><name pos:start="455:43" pos:end="455:43">s</name><operator pos:start="455:44" pos:end="455:45">-&gt;</operator><name pos:start="455:46" pos:end="455:48">spi</name><index pos:start="455:49" pos:end="455:51">[<expr pos:start="455:50" pos:end="455:50"><name pos:start="455:50" pos:end="455:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="455:55" pos:end="455:60"><expr pos:start="455:55" pos:end="455:60"><literal type="string" pos:start="455:55" pos:end="455:60">"spi0"</literal></expr></argument>,

                                  <argument pos:start="457:35" pos:end="457:46"><expr pos:start="457:35" pos:end="457:46"><operator pos:start="457:35" pos:end="457:35">&amp;</operator><name pos:start="457:36" pos:end="457:46">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="459:9" pos:end="459:25"><expr pos:start="459:9" pos:end="459:24"><call pos:start="459:9" pos:end="459:24"><name pos:start="459:9" pos:end="459:14">g_free</name><argument_list pos:start="459:15" pos:end="459:24">(<argument pos:start="459:16" pos:end="459:23"><expr pos:start="459:16" pos:end="459:23"><name pos:start="459:16" pos:end="459:23">bus_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
