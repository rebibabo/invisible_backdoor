<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15250.c" pos:tabs="8"><function pos:start="1:1" pos:end="231:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">flac_decode_frame</name><parameter_list pos:start="1:29" pos:end="5:61">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:46"><decl pos:start="5:29" pos:end="5:46"><type pos:start="5:29" pos:end="5:46"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:41">uint8_t</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:46">buf</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:60"><decl pos:start="5:49" pos:end="5:60"><type pos:start="5:49" pos:end="5:60"><name pos:start="5:49" pos:end="5:51">int</name></type> <name pos:start="5:53" pos:end="5:60">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="231:1">{<block_content pos:start="9:5" pos:end="229:17">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">FLACContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name> <init pos:start="9:20" pos:end="9:37">= <expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">tmp</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>, <decl pos:start="11:18" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:18" pos:end="11:18">i</name></decl>, <decl pos:start="11:21" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:21" pos:end="11:21">j</name> <init pos:start="11:23" pos:end="11:25">= <expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr></init></decl>, <decl pos:start="11:28" pos:end="11:45"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:28" pos:end="11:41">input_buf_size</name> <init pos:start="11:43" pos:end="11:45">= <expr pos:start="11:45" pos:end="11:45"><literal type="number" pos:start="11:45" pos:end="11:45">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">int16_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:23">samples_16</name> <init pos:start="13:25" pos:end="13:30">= <expr pos:start="13:27" pos:end="13:30"><name pos:start="13:27" pos:end="13:30">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int32_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:23">samples_32</name> <init pos:start="15:25" pos:end="15:30">= <expr pos:start="15:27" pos:end="15:30"><name pos:start="15:27" pos:end="15:30">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:23">alloc_data_size</name><init pos:start="17:24" pos:end="17:35">= <expr pos:start="17:26" pos:end="17:35"><operator pos:start="17:26" pos:end="17:26">*</operator><name pos:start="17:27" pos:end="17:35">data_size</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:17"><expr pos:start="21:5" pos:end="21:16"><operator pos:start="21:5" pos:end="21:5">*</operator><name pos:start="21:6" pos:end="21:14">data_size</name><operator pos:start="21:15" pos:end="21:15">=</operator><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:30">(<expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:24">max_framesize</name></name> <operator pos:start="25:26" pos:end="25:27">==</operator> <literal type="number" pos:start="25:29" pos:end="25:29">0</literal></expr>)</condition> <block pos:start="25:32" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:100">

        <expr_stmt pos:start="27:9" pos:end="27:45"><expr pos:start="27:9" pos:end="27:44"><name pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:24">max_framesize</name></name><operator pos:start="27:25" pos:end="27:25">=</operator> <call pos:start="27:27" pos:end="27:44"><name pos:start="27:27" pos:end="27:31">FFMAX</name><argument_list pos:start="27:32" pos:end="27:44">(<argument pos:start="27:33" pos:end="27:33"><expr pos:start="27:33" pos:end="27:33"><literal type="number" pos:start="27:33" pos:end="27:33">4</literal></expr></argument>, <argument pos:start="27:36" pos:end="27:43"><expr pos:start="27:36" pos:end="27:43"><name pos:start="27:36" pos:end="27:43">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="27:47" pos:end="27:96">// should hopefully be enough for the first header</comment>

        <expr_stmt pos:start="29:9" pos:end="29:100"><expr pos:start="29:9" pos:end="29:99"><name pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:20">bitstream</name></name><operator pos:start="29:21" pos:end="29:21">=</operator> <call pos:start="29:23" pos:end="29:99"><name pos:start="29:23" pos:end="29:37">av_fast_realloc</name><argument_list pos:start="29:38" pos:end="29:99">(<argument pos:start="29:39" pos:end="29:50"><expr pos:start="29:39" pos:end="29:50"><name pos:start="29:39" pos:end="29:50"><name pos:start="29:39" pos:end="29:39">s</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:50">bitstream</name></name></expr></argument>, <argument pos:start="29:53" pos:end="29:80"><expr pos:start="29:53" pos:end="29:80"><operator pos:start="29:53" pos:end="29:53">&amp;</operator><name pos:start="29:54" pos:end="29:80"><name pos:start="29:54" pos:end="29:54">s</name><operator pos:start="29:55" pos:end="29:56">-&gt;</operator><name pos:start="29:57" pos:end="29:80">allocated_bitstream_size</name></name></expr></argument>, <argument pos:start="29:83" pos:end="29:98"><expr pos:start="29:83" pos:end="29:98"><name pos:start="29:83" pos:end="29:98"><name pos:start="29:83" pos:end="29:83">s</name><operator pos:start="29:84" pos:end="29:85">-&gt;</operator><name pos:start="29:86" pos:end="29:98">max_framesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="85:5"><if pos:start="35:5" pos:end="85:5">if <condition pos:start="35:8" pos:end="35:30">(<expr pos:start="35:9" pos:end="35:29"><literal type="number" pos:start="35:9" pos:end="35:9">1</literal> <operator pos:start="35:11" pos:end="35:12">&amp;&amp;</operator> <name pos:start="35:14" pos:end="35:29"><name pos:start="35:14" pos:end="35:14">s</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:29">max_framesize</name></name></expr>)</condition> <block pos:start="35:32" pos:end="85:5">{<block_content pos:start="37:9" pos:end="83:9"> <comment type="line" pos:start="35:34" pos:end="35:50">//FIXME truncated</comment>

        <if_stmt pos:start="37:9" pos:end="39:101"><if pos:start="37:9" pos:end="39:101">if <condition pos:start="37:12" pos:end="37:85">(<expr pos:start="37:13" pos:end="37:84"><name pos:start="37:13" pos:end="37:29"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:29">bitstream_size</name></name> <operator pos:start="37:31" pos:end="37:31">&lt;</operator> <literal type="number" pos:start="37:33" pos:end="37:33">4</literal> <operator pos:start="37:35" pos:end="37:36">||</operator> <call pos:start="37:38" pos:end="37:58"><name pos:start="37:38" pos:end="37:44">AV_RL32</name><argument_list pos:start="37:45" pos:end="37:58">(<argument pos:start="37:46" pos:end="37:57"><expr pos:start="37:46" pos:end="37:57"><name pos:start="37:46" pos:end="37:57"><name pos:start="37:46" pos:end="37:46">s</name><operator pos:start="37:47" pos:end="37:48">-&gt;</operator><name pos:start="37:49" pos:end="37:57">bitstream</name></name></expr></argument>)</argument_list></call> <operator pos:start="37:60" pos:end="37:61">!=</operator> <call pos:start="37:63" pos:end="37:84"><name pos:start="37:63" pos:end="37:67">MKTAG</name><argument_list pos:start="37:68" pos:end="37:84">(<argument pos:start="37:69" pos:end="37:71"><expr pos:start="37:69" pos:end="37:71"><literal type="char" pos:start="37:69" pos:end="37:71">'f'</literal></expr></argument>,<argument pos:start="37:73" pos:end="37:75"><expr pos:start="37:73" pos:end="37:75"><literal type="char" pos:start="37:73" pos:end="37:75">'L'</literal></expr></argument>,<argument pos:start="37:77" pos:end="37:79"><expr pos:start="37:77" pos:end="37:79"><literal type="char" pos:start="37:77" pos:end="37:79">'a'</literal></expr></argument>,<argument pos:start="37:81" pos:end="37:83"><expr pos:start="37:81" pos:end="37:83"><literal type="char" pos:start="37:81" pos:end="37:83">'C'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:101"><block_content pos:start="39:13" pos:end="39:101">

            <expr_stmt pos:start="39:13" pos:end="39:101"><expr pos:start="39:13" pos:end="39:100"><name pos:start="39:13" pos:end="39:20">buf_size</name><operator pos:start="39:21" pos:end="39:21">=</operator> <call pos:start="39:23" pos:end="39:100"><name pos:start="39:23" pos:end="39:27">FFMIN</name><argument_list pos:start="39:28" pos:end="39:100">(<argument pos:start="39:29" pos:end="39:36"><expr pos:start="39:29" pos:end="39:36"><name pos:start="39:29" pos:end="39:36">buf_size</name></expr></argument>, <argument pos:start="39:39" pos:end="39:99"><expr pos:start="39:39" pos:end="39:99"><name pos:start="39:39" pos:end="39:54"><name pos:start="39:39" pos:end="39:39">s</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:54">max_framesize</name></name> <operator pos:start="39:56" pos:end="39:56">-</operator> <call pos:start="39:58" pos:end="39:99"><name pos:start="39:58" pos:end="39:62">FFMIN</name><argument_list pos:start="39:63" pos:end="39:99">(<argument pos:start="39:64" pos:end="39:80"><expr pos:start="39:64" pos:end="39:80"><name pos:start="39:64" pos:end="39:80"><name pos:start="39:64" pos:end="39:64">s</name><operator pos:start="39:65" pos:end="39:66">-&gt;</operator><name pos:start="39:67" pos:end="39:80">bitstream_size</name></name></expr></argument>, <argument pos:start="39:83" pos:end="39:98"><expr pos:start="39:83" pos:end="39:98"><name pos:start="39:83" pos:end="39:98"><name pos:start="39:83" pos:end="39:83">s</name><operator pos:start="39:84" pos:end="39:85">-&gt;</operator><name pos:start="39:86" pos:end="39:98">max_framesize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:22">input_buf_size</name><operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:32">buf_size</name></expr>;</expr_stmt>



        <if_stmt pos:start="45:9" pos:end="47:22"><if pos:start="45:9" pos:end="47:22">if <condition pos:start="45:12" pos:end="45:126">(<expr pos:start="45:13" pos:end="45:125"><name pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:29">bitstream_size</name></name> <operator pos:start="45:31" pos:end="45:31">+</operator> <name pos:start="45:33" pos:end="45:40">buf_size</name> <operator pos:start="45:42" pos:end="45:42">&lt;</operator> <name pos:start="45:44" pos:end="45:51">buf_size</name> <operator pos:start="45:53" pos:end="45:54">||</operator> <name pos:start="45:56" pos:end="45:73"><name pos:start="45:56" pos:end="45:56">s</name><operator pos:start="45:57" pos:end="45:58">-&gt;</operator><name pos:start="45:59" pos:end="45:73">bitstream_index</name></name> <operator pos:start="45:75" pos:end="45:75">+</operator> <name pos:start="45:77" pos:end="45:93"><name pos:start="45:77" pos:end="45:77">s</name><operator pos:start="45:78" pos:end="45:79">-&gt;</operator><name pos:start="45:80" pos:end="45:93">bitstream_size</name></name> <operator pos:start="45:95" pos:end="45:95">+</operator> <name pos:start="45:97" pos:end="45:104">buf_size</name> <operator pos:start="45:106" pos:end="45:106">&lt;</operator> <name pos:start="45:108" pos:end="45:125"><name pos:start="45:108" pos:end="45:108">s</name><operator pos:start="45:109" pos:end="45:110">-&gt;</operator><name pos:start="45:111" pos:end="45:125">bitstream_index</name></name></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:22"><block_content pos:start="47:13" pos:end="47:22">

            <return pos:start="47:13" pos:end="47:22">return <expr pos:start="47:20" pos:end="47:21"><operator pos:start="47:20" pos:end="47:20">-</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="51:9" pos:end="53:116"><if pos:start="51:9" pos:end="53:116">if <condition pos:start="51:12" pos:end="51:71">(<expr pos:start="51:13" pos:end="51:70"><name pos:start="51:13" pos:end="51:39"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:39">allocated_bitstream_size</name></name> <operator pos:start="51:41" pos:end="51:41">&lt;</operator> <name pos:start="51:43" pos:end="51:59"><name pos:start="51:43" pos:end="51:43">s</name><operator pos:start="51:44" pos:end="51:45">-&gt;</operator><name pos:start="51:46" pos:end="51:59">bitstream_size</name></name> <operator pos:start="51:61" pos:end="51:61">+</operator> <name pos:start="51:63" pos:end="51:70">buf_size</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:116"><block_content pos:start="53:13" pos:end="53:116">

            <expr_stmt pos:start="53:13" pos:end="53:116"><expr pos:start="53:13" pos:end="53:115"><name pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:24">bitstream</name></name><operator pos:start="53:25" pos:end="53:25">=</operator> <call pos:start="53:27" pos:end="53:115"><name pos:start="53:27" pos:end="53:41">av_fast_realloc</name><argument_list pos:start="53:42" pos:end="53:115">(<argument pos:start="53:43" pos:end="53:54"><expr pos:start="53:43" pos:end="53:54"><name pos:start="53:43" pos:end="53:54"><name pos:start="53:43" pos:end="53:43">s</name><operator pos:start="53:44" pos:end="53:45">-&gt;</operator><name pos:start="53:46" pos:end="53:54">bitstream</name></name></expr></argument>, <argument pos:start="53:57" pos:end="53:84"><expr pos:start="53:57" pos:end="53:84"><operator pos:start="53:57" pos:end="53:57">&amp;</operator><name pos:start="53:58" pos:end="53:84"><name pos:start="53:58" pos:end="53:58">s</name><operator pos:start="53:59" pos:end="53:60">-&gt;</operator><name pos:start="53:61" pos:end="53:84">allocated_bitstream_size</name></name></expr></argument>, <argument pos:start="53:87" pos:end="53:114"><expr pos:start="53:87" pos:end="53:114"><name pos:start="53:87" pos:end="53:103"><name pos:start="53:87" pos:end="53:87">s</name><operator pos:start="53:88" pos:end="53:89">-&gt;</operator><name pos:start="53:90" pos:end="53:103">bitstream_size</name></name> <operator pos:start="53:105" pos:end="53:105">+</operator> <name pos:start="53:107" pos:end="53:114">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="57:9" pos:end="65:9"><if pos:start="57:9" pos:end="65:9">if <condition pos:start="57:12" pos:end="57:92">(<expr pos:start="57:13" pos:end="57:91"><name pos:start="57:13" pos:end="57:30"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:30">bitstream_index</name></name> <operator pos:start="57:32" pos:end="57:32">+</operator> <name pos:start="57:34" pos:end="57:50"><name pos:start="57:34" pos:end="57:34">s</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:50">bitstream_size</name></name> <operator pos:start="57:52" pos:end="57:52">+</operator> <name pos:start="57:54" pos:end="57:61">buf_size</name> <operator pos:start="57:63" pos:end="57:63">&gt;</operator> <name pos:start="57:65" pos:end="57:91"><name pos:start="57:65" pos:end="57:65">s</name><operator pos:start="57:66" pos:end="57:67">-&gt;</operator><name pos:start="57:68" pos:end="57:91">allocated_bitstream_size</name></name></expr>)</condition> <block pos:start="57:94" pos:end="65:9">{<block_content pos:start="59:13" pos:end="63:33">

            <expr_stmt pos:start="59:13" pos:end="61:39"><expr pos:start="59:13" pos:end="61:38"><call pos:start="59:13" pos:end="61:38"><name pos:start="59:13" pos:end="59:19">memmove</name><argument_list pos:start="59:20" pos:end="61:38">(<argument pos:start="59:21" pos:end="59:32"><expr pos:start="59:21" pos:end="59:32"><name pos:start="59:21" pos:end="59:32"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:32">bitstream</name></name></expr></argument>, <argument pos:start="59:35" pos:end="59:67"><expr pos:start="59:35" pos:end="59:67"><operator pos:start="59:35" pos:end="59:35">&amp;</operator><name pos:start="59:36" pos:end="59:67"><name pos:start="59:36" pos:end="59:36">s</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:47">bitstream</name><index pos:start="59:48" pos:end="59:67">[<expr pos:start="59:49" pos:end="59:66"><name pos:start="59:49" pos:end="59:66"><name pos:start="59:49" pos:end="59:49">s</name><operator pos:start="59:50" pos:end="59:51">-&gt;</operator><name pos:start="59:52" pos:end="59:66">bitstream_index</name></name></expr>]</index></name></expr></argument>,

                    <argument pos:start="61:21" pos:end="61:37"><expr pos:start="61:21" pos:end="61:37"><name pos:start="61:21" pos:end="61:37"><name pos:start="61:21" pos:end="61:21">s</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:37">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:33"><expr pos:start="63:13" pos:end="63:32"><name pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:30">bitstream_index</name></name><operator pos:start="63:31" pos:end="63:31">=</operator><literal type="number" pos:start="63:32" pos:end="63:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="69:30"><expr pos:start="67:9" pos:end="69:29"><call pos:start="67:9" pos:end="69:29"><name pos:start="67:9" pos:end="67:14">memcpy</name><argument_list pos:start="67:15" pos:end="69:29">(<argument pos:start="67:16" pos:end="67:68"><expr pos:start="67:16" pos:end="67:68"><operator pos:start="67:16" pos:end="67:16">&amp;</operator><name pos:start="67:17" pos:end="67:68"><name pos:start="67:17" pos:end="67:17">s</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:28">bitstream</name><index pos:start="67:29" pos:end="67:68">[<expr pos:start="67:30" pos:end="67:67"><name pos:start="67:30" pos:end="67:47"><name pos:start="67:30" pos:end="67:30">s</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:47">bitstream_index</name></name> <operator pos:start="67:49" pos:end="67:49">+</operator> <name pos:start="67:51" pos:end="67:67"><name pos:start="67:51" pos:end="67:51">s</name><operator pos:start="67:52" pos:end="67:53">-&gt;</operator><name pos:start="67:54" pos:end="67:67">bitstream_size</name></name></expr>]</index></name></expr></argument>,

               <argument pos:start="69:16" pos:end="69:18"><expr pos:start="69:16" pos:end="69:18"><name pos:start="69:16" pos:end="69:18">buf</name></expr></argument>, <argument pos:start="69:21" pos:end="69:28"><expr pos:start="69:21" pos:end="69:28"><name pos:start="69:21" pos:end="69:28">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:47"><expr pos:start="71:9" pos:end="71:46"><name pos:start="71:9" pos:end="71:11">buf</name><operator pos:start="71:12" pos:end="71:12">=</operator> <operator pos:start="71:14" pos:end="71:14">&amp;</operator><name pos:start="71:15" pos:end="71:46"><name pos:start="71:15" pos:end="71:15">s</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:26">bitstream</name><index pos:start="71:27" pos:end="71:46">[<expr pos:start="71:28" pos:end="71:45"><name pos:start="71:28" pos:end="71:45"><name pos:start="71:28" pos:end="71:28">s</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:45">bitstream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:38"><expr pos:start="73:9" pos:end="73:37"><name pos:start="73:9" pos:end="73:16">buf_size</name> <operator pos:start="73:18" pos:end="73:19">+=</operator> <name pos:start="73:21" pos:end="73:37"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:37">bitstream_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:36"><expr pos:start="75:9" pos:end="75:35"><name pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:25">bitstream_size</name></name><operator pos:start="75:26" pos:end="75:26">=</operator> <name pos:start="75:28" pos:end="75:35">buf_size</name></expr>;</expr_stmt>



        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:58">(<expr pos:start="79:13" pos:end="79:57"><name pos:start="79:13" pos:end="79:20">buf_size</name> <operator pos:start="79:22" pos:end="79:22">&lt;</operator> <name pos:start="79:24" pos:end="79:39"><name pos:start="79:24" pos:end="79:24">s</name><operator pos:start="79:25" pos:end="79:26">-&gt;</operator><name pos:start="79:27" pos:end="79:39">max_framesize</name></name> <operator pos:start="79:41" pos:end="79:42">&amp;&amp;</operator> <name pos:start="79:44" pos:end="79:57">input_buf_size</name></expr>)</condition> <block pos:start="79:60" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:34">

            <return pos:start="81:13" pos:end="81:34">return <expr pos:start="81:20" pos:end="81:33"><name pos:start="81:20" pos:end="81:33">input_buf_size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:43"><expr pos:start="89:5" pos:end="89:42"><call pos:start="89:5" pos:end="89:42"><name pos:start="89:5" pos:end="89:17">init_get_bits</name><argument_list pos:start="89:18" pos:end="89:42">(<argument pos:start="89:19" pos:end="89:24"><expr pos:start="89:19" pos:end="89:24"><operator pos:start="89:19" pos:end="89:19">&amp;</operator><name pos:start="89:20" pos:end="89:24"><name pos:start="89:20" pos:end="89:20">s</name><operator pos:start="89:21" pos:end="89:22">-&gt;</operator><name pos:start="89:23" pos:end="89:24">gb</name></name></expr></argument>, <argument pos:start="89:27" pos:end="89:29"><expr pos:start="89:27" pos:end="89:29"><name pos:start="89:27" pos:end="89:29">buf</name></expr></argument>, <argument pos:start="89:32" pos:end="89:41"><expr pos:start="89:32" pos:end="89:41"><name pos:start="89:32" pos:end="89:39">buf_size</name><operator pos:start="89:40" pos:end="89:40">*</operator><literal type="number" pos:start="89:41" pos:end="89:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="95:17"><if pos:start="93:5" pos:end="95:17">if <condition pos:start="93:8" pos:end="93:26">(<expr pos:start="93:9" pos:end="93:25"><call pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:22">metadata_parse</name><argument_list pos:start="93:23" pos:end="93:25">(<argument pos:start="93:24" pos:end="93:24"><expr pos:start="93:24" pos:end="93:24"><name pos:start="93:24" pos:end="93:24">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:17"><block_content pos:start="95:9" pos:end="95:17">

        <goto pos:start="95:9" pos:end="95:17">goto <name pos:start="95:14" pos:end="95:16">end</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:32"><expr pos:start="99:5" pos:end="99:31"><name pos:start="99:5" pos:end="99:7">tmp</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <call pos:start="99:11" pos:end="99:31"><name pos:start="99:11" pos:end="99:19">show_bits</name><argument_list pos:start="99:20" pos:end="99:31">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><operator pos:start="99:21" pos:end="99:21">&amp;</operator><name pos:start="99:22" pos:end="99:26"><name pos:start="99:22" pos:end="99:22">s</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:26">gb</name></name></expr></argument>, <argument pos:start="99:29" pos:end="99:30"><expr pos:start="99:29" pos:end="99:30"><literal type="number" pos:start="99:29" pos:end="99:30">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="111:5"><if pos:start="101:5" pos:end="111:5">if <condition pos:start="101:8" pos:end="101:33">(<expr pos:start="101:9" pos:end="101:32"><operator pos:start="101:9" pos:end="101:9">(</operator><name pos:start="101:10" pos:end="101:12">tmp</name> <operator pos:start="101:14" pos:end="101:14">&amp;</operator> <literal type="number" pos:start="101:16" pos:end="101:21">0xFFFE</literal><operator pos:start="101:22" pos:end="101:22">)</operator> <operator pos:start="101:24" pos:end="101:25">!=</operator> <literal type="number" pos:start="101:27" pos:end="101:32">0xFFF8</literal></expr>)</condition> <block pos:start="101:35" pos:end="111:5">{<block_content pos:start="103:9" pos:end="109:17">

        <expr_stmt pos:start="103:9" pos:end="103:66"><expr pos:start="103:9" pos:end="103:65"><call pos:start="103:9" pos:end="103:65"><name pos:start="103:9" pos:end="103:14">av_log</name><argument_list pos:start="103:15" pos:end="103:65">(<argument pos:start="103:16" pos:end="103:23"><expr pos:start="103:16" pos:end="103:23"><name pos:start="103:16" pos:end="103:23"><name pos:start="103:16" pos:end="103:16">s</name><operator pos:start="103:17" pos:end="103:18">-&gt;</operator><name pos:start="103:19" pos:end="103:23">avctx</name></name></expr></argument>, <argument pos:start="103:26" pos:end="103:37"><expr pos:start="103:26" pos:end="103:37"><name pos:start="103:26" pos:end="103:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:40" pos:end="103:64"><expr pos:start="103:40" pos:end="103:64"><literal type="string" pos:start="103:40" pos:end="103:64">"FRAME HEADER not here\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="105:9" pos:end="107:33">while <condition pos:start="105:15" pos:end="105:99">(<expr pos:start="105:16" pos:end="105:98"><call pos:start="105:16" pos:end="105:37"><name pos:start="105:16" pos:end="105:29">get_bits_count</name><argument_list pos:start="105:30" pos:end="105:37">(<argument pos:start="105:31" pos:end="105:36"><expr pos:start="105:31" pos:end="105:36"><operator pos:start="105:31" pos:end="105:31">&amp;</operator><name pos:start="105:32" pos:end="105:36"><name pos:start="105:32" pos:end="105:32">s</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:36">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="105:38" pos:end="105:38">/</operator><literal type="number" pos:start="105:39" pos:end="105:40">8</literal><operator pos:start="105:40" pos:end="105:40">+</operator><literal type="number" pos:start="105:41" pos:end="105:41">2</literal> <operator pos:start="105:43" pos:end="105:43">&lt;</operator> <name pos:start="105:45" pos:end="105:52">buf_size</name> <operator pos:start="105:54" pos:end="105:55">&amp;&amp;</operator> <operator pos:start="105:57" pos:end="105:57">(</operator><call pos:start="105:58" pos:end="105:78"><name pos:start="105:58" pos:end="105:66">show_bits</name><argument_list pos:start="105:67" pos:end="105:78">(<argument pos:start="105:68" pos:end="105:73"><expr pos:start="105:68" pos:end="105:73"><operator pos:start="105:68" pos:end="105:68">&amp;</operator><name pos:start="105:69" pos:end="105:73"><name pos:start="105:69" pos:end="105:69">s</name><operator pos:start="105:70" pos:end="105:71">-&gt;</operator><name pos:start="105:72" pos:end="105:73">gb</name></name></expr></argument>, <argument pos:start="105:76" pos:end="105:77"><expr pos:start="105:76" pos:end="105:77"><literal type="number" pos:start="105:76" pos:end="105:77">16</literal></expr></argument>)</argument_list></call> <operator pos:start="105:80" pos:end="105:80">&amp;</operator> <literal type="number" pos:start="105:82" pos:end="105:87">0xFFFE</literal><operator pos:start="105:88" pos:end="105:88">)</operator> <operator pos:start="105:90" pos:end="105:91">!=</operator> <literal type="number" pos:start="105:93" pos:end="105:98">0xFFF8</literal></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:33"><block_content pos:start="107:13" pos:end="107:33">

            <expr_stmt pos:start="107:13" pos:end="107:33"><expr pos:start="107:13" pos:end="107:32"><call pos:start="107:13" pos:end="107:32"><name pos:start="107:13" pos:end="107:21">skip_bits</name><argument_list pos:start="107:22" pos:end="107:32">(<argument pos:start="107:23" pos:end="107:28"><expr pos:start="107:23" pos:end="107:28"><operator pos:start="107:23" pos:end="107:23">&amp;</operator><name pos:start="107:24" pos:end="107:28"><name pos:start="107:24" pos:end="107:24">s</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:28">gb</name></name></expr></argument>, <argument pos:start="107:31" pos:end="107:31"><expr pos:start="107:31" pos:end="107:31"><literal type="number" pos:start="107:31" pos:end="107:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

        <goto pos:start="109:9" pos:end="109:17">goto <name pos:start="109:14" pos:end="109:16">end</name>;</goto> <comment type="line" pos:start="109:19" pos:end="109:89">// we may not have enough bits left to decode a frame, so try next time</comment>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:26"><expr pos:start="113:5" pos:end="113:25"><call pos:start="113:5" pos:end="113:25"><name pos:start="113:5" pos:end="113:13">skip_bits</name><argument_list pos:start="113:14" pos:end="113:25">(<argument pos:start="113:15" pos:end="113:20"><expr pos:start="113:15" pos:end="113:20"><operator pos:start="113:15" pos:end="113:15">&amp;</operator><name pos:start="113:16" pos:end="113:20"><name pos:start="113:16" pos:end="113:16">s</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:20">gb</name></name></expr></argument>, <argument pos:start="113:23" pos:end="113:24"><expr pos:start="113:23" pos:end="113:24"><literal type="number" pos:start="113:23" pos:end="113:24">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="156:0"><if pos:start="115:5" pos:end="156:0">if <condition pos:start="115:8" pos:end="115:45">(<expr pos:start="115:9" pos:end="115:44"><call pos:start="115:9" pos:end="115:40"><name pos:start="115:9" pos:end="115:20">decode_frame</name><argument_list pos:start="115:21" pos:end="115:40">(<argument pos:start="115:22" pos:end="115:22"><expr pos:start="115:22" pos:end="115:22"><name pos:start="115:22" pos:end="115:22">s</name></expr></argument>, <argument pos:start="115:25" pos:end="115:39"><expr pos:start="115:25" pos:end="115:39"><name pos:start="115:25" pos:end="115:39">alloc_data_size</name></expr></argument>)</argument_list></call> <operator pos:start="115:42" pos:end="115:42">&lt;</operator> <literal type="number" pos:start="115:44" pos:end="115:44">0</literal></expr>)</condition> <block pos:start="115:47" pos:end="156:0">{<block_content pos:start="117:9" pos:end="123:18">

        <expr_stmt pos:start="117:9" pos:end="117:66"><expr pos:start="117:9" pos:end="117:65"><call pos:start="117:9" pos:end="117:65"><name pos:start="117:9" pos:end="117:14">av_log</name><argument_list pos:start="117:15" pos:end="117:65">(<argument pos:start="117:16" pos:end="117:23"><expr pos:start="117:16" pos:end="117:23"><name pos:start="117:16" pos:end="117:23"><name pos:start="117:16" pos:end="117:16">s</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:23">avctx</name></name></expr></argument>, <argument pos:start="117:26" pos:end="117:37"><expr pos:start="117:26" pos:end="117:37"><name pos:start="117:26" pos:end="117:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:40" pos:end="117:64"><expr pos:start="117:40" pos:end="117:64"><literal type="string" pos:start="117:40" pos:end="117:64">"decode_frame() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:28"><expr pos:start="119:9" pos:end="119:27"><name pos:start="119:9" pos:end="119:25"><name pos:start="119:9" pos:end="119:9">s</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:25">bitstream_size</name></name><operator pos:start="119:26" pos:end="119:26">=</operator><literal type="number" pos:start="119:27" pos:end="119:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:29"><expr pos:start="121:9" pos:end="121:28"><name pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:26">bitstream_index</name></name><operator pos:start="121:27" pos:end="121:27">=</operator><literal type="number" pos:start="121:28" pos:end="121:28">0</literal></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:18">return <expr pos:start="123:16" pos:end="123:17"><operator pos:start="123:16" pos:end="123:16">-</operator><literal type="number" pos:start="123:17" pos:end="123:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:define pos:start="129:1" pos:end="155:18">#<cpp:directive pos:start="129:2" pos:end="129:7">define</cpp:directive> <cpp:macro pos:start="129:9" pos:end="129:32"><name pos:start="129:9" pos:end="129:19">DECORRELATE</name><parameter_list pos:start="129:20" pos:end="129:32">(<parameter pos:start="129:21" pos:end="129:24"><type pos:start="129:21" pos:end="129:24"><name pos:start="129:21" pos:end="129:24">left</name></type></parameter>, <parameter pos:start="129:27" pos:end="129:31"><type pos:start="129:27" pos:end="129:31"><name pos:start="129:27" pos:end="129:31">right</name></type></parameter>)</parameter_list></cpp:macro>\

            <cpp:value pos:start="131:13" pos:end="155:18">assert(s-&gt;channels == 2);\

            for (i = 0; i &lt; s-&gt;blocksize; i++) {\

                int a= s-&gt;decoded[0][i];\

                int b= s-&gt;decoded[1][i];\

                if (s-&gt;is32) {\

                    *samples_32++ = (left)  &lt;&lt; s-&gt;sample_shift;\

                    *samples_32++ = (right) &lt;&lt; s-&gt;sample_shift;\

                } else {\

                    *samples_16++ = (left)  &lt;&lt; s-&gt;sample_shift;\

                    *samples_16++ = (right) &lt;&lt; s-&gt;sample_shift;\

                }\

            }\

            break;</cpp:value></cpp:define>



    <switch pos:start="159:5" pos:end="193:5">switch <condition pos:start="159:12" pos:end="159:29">(<expr pos:start="159:13" pos:end="159:28"><name pos:start="159:13" pos:end="159:28"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:28">decorrelation</name></name></expr>)</condition> <block pos:start="159:31" pos:end="193:5">{<block_content pos:start="161:5" pos:end="191:38">

    <case pos:start="161:5" pos:end="161:21">case <expr pos:start="161:10" pos:end="161:20"><name pos:start="161:10" pos:end="161:20">INDEPENDENT</name></expr>:</case>

        <for pos:start="163:9" pos:end="177:9">for <control pos:start="163:13" pos:end="163:42">(<init pos:start="163:14" pos:end="163:19"><expr pos:start="163:14" pos:end="163:18"><name pos:start="163:14" pos:end="163:14">j</name> <operator pos:start="163:16" pos:end="163:16">=</operator> <literal type="number" pos:start="163:18" pos:end="163:18">0</literal></expr>;</init> <condition pos:start="163:21" pos:end="163:37"><expr pos:start="163:21" pos:end="163:36"><name pos:start="163:21" pos:end="163:21">j</name> <operator pos:start="163:23" pos:end="163:23">&lt;</operator> <name pos:start="163:25" pos:end="163:36"><name pos:start="163:25" pos:end="163:25">s</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:36">blocksize</name></name></expr>;</condition> <incr pos:start="163:39" pos:end="163:41"><expr pos:start="163:39" pos:end="163:41"><name pos:start="163:39" pos:end="163:39">j</name><operator pos:start="163:40" pos:end="163:41">++</operator></expr></incr>)</control> <block pos:start="163:44" pos:end="177:9">{<block_content pos:start="165:13" pos:end="175:13">

            <for pos:start="165:13" pos:end="175:13">for <control pos:start="165:17" pos:end="165:45">(<init pos:start="165:18" pos:end="165:23"><expr pos:start="165:18" pos:end="165:22"><name pos:start="165:18" pos:end="165:18">i</name> <operator pos:start="165:20" pos:end="165:20">=</operator> <literal type="number" pos:start="165:22" pos:end="165:22">0</literal></expr>;</init> <condition pos:start="165:25" pos:end="165:40"><expr pos:start="165:25" pos:end="165:39"><name pos:start="165:25" pos:end="165:25">i</name> <operator pos:start="165:27" pos:end="165:27">&lt;</operator> <name pos:start="165:29" pos:end="165:39"><name pos:start="165:29" pos:end="165:29">s</name><operator pos:start="165:30" pos:end="165:31">-&gt;</operator><name pos:start="165:32" pos:end="165:39">channels</name></name></expr>;</condition> <incr pos:start="165:42" pos:end="165:44"><expr pos:start="165:42" pos:end="165:44"><name pos:start="165:42" pos:end="165:42">i</name><operator pos:start="165:43" pos:end="165:44">++</operator></expr></incr>)</control> <block pos:start="165:47" pos:end="175:13">{<block_content pos:start="167:17" pos:end="173:72">

                <if_stmt pos:start="167:17" pos:end="173:72"><if pos:start="167:17" pos:end="169:72">if <condition pos:start="167:20" pos:end="167:28">(<expr pos:start="167:21" pos:end="167:27"><name pos:start="167:21" pos:end="167:27"><name pos:start="167:21" pos:end="167:21">s</name><operator pos:start="167:22" pos:end="167:23">-&gt;</operator><name pos:start="167:24" pos:end="167:27">is32</name></name></expr>)</condition><block type="pseudo" pos:start="169:21" pos:end="169:72"><block_content pos:start="169:21" pos:end="169:72">

                    <expr_stmt pos:start="169:21" pos:end="169:72"><expr pos:start="169:21" pos:end="169:71"><operator pos:start="169:21" pos:end="169:21">*</operator><name pos:start="169:22" pos:end="169:31">samples_32</name><operator pos:start="169:32" pos:end="169:33">++</operator> <operator pos:start="169:35" pos:end="169:35">=</operator> <name pos:start="169:37" pos:end="169:52"><name pos:start="169:37" pos:end="169:37">s</name><operator pos:start="169:38" pos:end="169:39">-&gt;</operator><name pos:start="169:40" pos:end="169:46">decoded</name><index pos:start="169:47" pos:end="169:49">[<expr pos:start="169:48" pos:end="169:48"><name pos:start="169:48" pos:end="169:48">i</name></expr>]</index><index pos:start="169:50" pos:end="169:52">[<expr pos:start="169:51" pos:end="169:51"><name pos:start="169:51" pos:end="169:51">j</name></expr>]</index></name> <operator pos:start="169:54" pos:end="169:55">&lt;&lt;</operator> <name pos:start="169:57" pos:end="169:71"><name pos:start="169:57" pos:end="169:57">s</name><operator pos:start="169:58" pos:end="169:59">-&gt;</operator><name pos:start="169:60" pos:end="169:71">sample_shift</name></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="171:17" pos:end="173:72">else<block type="pseudo" pos:start="173:21" pos:end="173:72"><block_content pos:start="173:21" pos:end="173:72">

                    <expr_stmt pos:start="173:21" pos:end="173:72"><expr pos:start="173:21" pos:end="173:71"><operator pos:start="173:21" pos:end="173:21">*</operator><name pos:start="173:22" pos:end="173:31">samples_16</name><operator pos:start="173:32" pos:end="173:33">++</operator> <operator pos:start="173:35" pos:end="173:35">=</operator> <name pos:start="173:37" pos:end="173:52"><name pos:start="173:37" pos:end="173:37">s</name><operator pos:start="173:38" pos:end="173:39">-&gt;</operator><name pos:start="173:40" pos:end="173:46">decoded</name><index pos:start="173:47" pos:end="173:49">[<expr pos:start="173:48" pos:end="173:48"><name pos:start="173:48" pos:end="173:48">i</name></expr>]</index><index pos:start="173:50" pos:end="173:52">[<expr pos:start="173:51" pos:end="173:51"><name pos:start="173:51" pos:end="173:51">j</name></expr>]</index></name> <operator pos:start="173:54" pos:end="173:55">&lt;&lt;</operator> <name pos:start="173:57" pos:end="173:71"><name pos:start="173:57" pos:end="173:57">s</name><operator pos:start="173:58" pos:end="173:59">-&gt;</operator><name pos:start="173:60" pos:end="173:71">sample_shift</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="179:9" pos:end="179:14">break;</break>

    <case pos:start="181:5" pos:end="181:19">case <expr pos:start="181:10" pos:end="181:18"><name pos:start="181:10" pos:end="181:18">LEFT_SIDE</name></expr>:</case>

        <macro pos:start="183:9" pos:end="183:26"><name pos:start="183:9" pos:end="183:19">DECORRELATE</name><argument_list pos:start="183:20" pos:end="183:26">(<argument pos:start="183:21" pos:end="183:21">a</argument>,<argument pos:start="183:23" pos:end="183:25">a-b</argument>)</argument_list></macro>

    <case pos:start="185:5" pos:end="185:20">case <expr pos:start="185:10" pos:end="185:19"><name pos:start="185:10" pos:end="185:19">RIGHT_SIDE</name></expr>:</case>

        <macro pos:start="187:9" pos:end="187:26"><name pos:start="187:9" pos:end="187:19">DECORRELATE</name><argument_list pos:start="187:20" pos:end="187:26">(<argument pos:start="187:21" pos:end="187:23">a+b</argument>,<argument pos:start="187:25" pos:end="187:25">b</argument>)</argument_list></macro>

    <case pos:start="189:5" pos:end="189:18">case <expr pos:start="189:10" pos:end="189:17"><name pos:start="189:10" pos:end="189:17">MID_SIDE</name></expr>:</case>

        <macro pos:start="191:9" pos:end="191:38"><name pos:start="191:9" pos:end="191:19">DECORRELATE</name><argument_list pos:start="191:20" pos:end="191:38">( <argument pos:start="191:22" pos:end="191:34">(a-=b&gt;&gt;<literal type="number" pos:start="191:29" pos:end="191:29">1</literal>) + b</argument>, <argument pos:start="191:37" pos:end="191:37">a</argument>)</argument_list></macro>

    </block_content>}</block></switch>



    <expr_stmt pos:start="197:5" pos:end="197:64"><expr pos:start="197:5" pos:end="197:63"><operator pos:start="197:5" pos:end="197:5">*</operator><name pos:start="197:6" pos:end="197:14">data_size</name> <operator pos:start="197:16" pos:end="197:16">=</operator> <name pos:start="197:18" pos:end="197:29"><name pos:start="197:18" pos:end="197:18">s</name><operator pos:start="197:19" pos:end="197:20">-&gt;</operator><name pos:start="197:21" pos:end="197:29">blocksize</name></name> <operator pos:start="197:31" pos:end="197:31">*</operator> <name pos:start="197:33" pos:end="197:43"><name pos:start="197:33" pos:end="197:33">s</name><operator pos:start="197:34" pos:end="197:35">-&gt;</operator><name pos:start="197:36" pos:end="197:43">channels</name></name> <operator pos:start="197:45" pos:end="197:45">*</operator> <operator pos:start="197:47" pos:end="197:47">(</operator><ternary pos:start="197:48" pos:end="197:62"><condition pos:start="197:48" pos:end="197:56"><expr pos:start="197:48" pos:end="197:54"><name pos:start="197:48" pos:end="197:54"><name pos:start="197:48" pos:end="197:48">s</name><operator pos:start="197:49" pos:end="197:50">-&gt;</operator><name pos:start="197:51" pos:end="197:54">is32</name></name></expr> ?</condition><then pos:start="197:58" pos:end="197:58"> <expr pos:start="197:58" pos:end="197:58"><literal type="number" pos:start="197:58" pos:end="197:58">4</literal></expr> </then><else pos:start="197:60" pos:end="197:62">: <expr pos:start="197:62" pos:end="197:62"><literal type="number" pos:start="197:62" pos:end="197:62">2</literal></expr></else></ternary><operator pos:start="197:63" pos:end="197:63">)</operator></expr>;</expr_stmt>



<label pos:start="201:1" pos:end="201:4"><name pos:start="201:1" pos:end="201:3">end</name>:</label>

    <expr_stmt pos:start="203:5" pos:end="203:36"><expr pos:start="203:5" pos:end="203:35"><name pos:start="203:5" pos:end="203:5">i</name><operator pos:start="203:6" pos:end="203:6">=</operator> <operator pos:start="203:8" pos:end="203:8">(</operator><call pos:start="203:9" pos:end="203:30"><name pos:start="203:9" pos:end="203:22">get_bits_count</name><argument_list pos:start="203:23" pos:end="203:30">(<argument pos:start="203:24" pos:end="203:29"><expr pos:start="203:24" pos:end="203:29"><operator pos:start="203:24" pos:end="203:24">&amp;</operator><name pos:start="203:25" pos:end="203:29"><name pos:start="203:25" pos:end="203:25">s</name><operator pos:start="203:26" pos:end="203:27">-&gt;</operator><name pos:start="203:28" pos:end="203:29">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="203:31" pos:end="203:31">+</operator><literal type="number" pos:start="203:32" pos:end="203:32">7</literal><operator pos:start="203:33" pos:end="203:33">)</operator><operator pos:start="203:34" pos:end="203:34">/</operator><literal type="number" pos:start="203:35" pos:end="203:35">8</literal></expr>;</expr_stmt>

    <if_stmt pos:start="205:5" pos:end="215:5"><if pos:start="205:5" pos:end="215:5">if <condition pos:start="205:8" pos:end="205:21">(<expr pos:start="205:9" pos:end="205:20"><name pos:start="205:9" pos:end="205:9">i</name> <operator pos:start="205:11" pos:end="205:11">&gt;</operator> <name pos:start="205:13" pos:end="205:20">buf_size</name></expr>)</condition> <block pos:start="205:23" pos:end="215:5">{<block_content pos:start="207:9" pos:end="213:18">

        <expr_stmt pos:start="207:9" pos:end="207:71"><expr pos:start="207:9" pos:end="207:70"><call pos:start="207:9" pos:end="207:70"><name pos:start="207:9" pos:end="207:14">av_log</name><argument_list pos:start="207:15" pos:end="207:70">(<argument pos:start="207:16" pos:end="207:23"><expr pos:start="207:16" pos:end="207:23"><name pos:start="207:16" pos:end="207:23"><name pos:start="207:16" pos:end="207:16">s</name><operator pos:start="207:17" pos:end="207:18">-&gt;</operator><name pos:start="207:19" pos:end="207:23">avctx</name></name></expr></argument>, <argument pos:start="207:26" pos:end="207:37"><expr pos:start="207:26" pos:end="207:37"><name pos:start="207:26" pos:end="207:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="207:40" pos:end="207:55"><expr pos:start="207:40" pos:end="207:55"><literal type="string" pos:start="207:40" pos:end="207:55">"overread: %d\n"</literal></expr></argument>, <argument pos:start="207:58" pos:end="207:69"><expr pos:start="207:58" pos:end="207:69"><name pos:start="207:58" pos:end="207:58">i</name> <operator pos:start="207:60" pos:end="207:60">-</operator> <name pos:start="207:62" pos:end="207:69">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:28"><expr pos:start="209:9" pos:end="209:27"><name pos:start="209:9" pos:end="209:25"><name pos:start="209:9" pos:end="209:9">s</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:25">bitstream_size</name></name><operator pos:start="209:26" pos:end="209:26">=</operator><literal type="number" pos:start="209:27" pos:end="209:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:29"><expr pos:start="211:9" pos:end="211:28"><name pos:start="211:9" pos:end="211:26"><name pos:start="211:9" pos:end="211:9">s</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:26">bitstream_index</name></name><operator pos:start="211:27" pos:end="211:27">=</operator><literal type="number" pos:start="211:28" pos:end="211:28">0</literal></expr>;</expr_stmt>

        <return pos:start="213:9" pos:end="213:18">return <expr pos:start="213:16" pos:end="213:17"><operator pos:start="213:16" pos:end="213:16">-</operator><literal type="number" pos:start="213:17" pos:end="213:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="219:5" pos:end="229:17"><if pos:start="219:5" pos:end="227:5">if <condition pos:start="219:8" pos:end="219:26">(<expr pos:start="219:9" pos:end="219:25"><name pos:start="219:9" pos:end="219:25"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:25">bitstream_size</name></name></expr>)</condition> <block pos:start="219:28" pos:end="227:5">{<block_content pos:start="221:9" pos:end="225:30">

        <expr_stmt pos:start="221:9" pos:end="221:32"><expr pos:start="221:9" pos:end="221:31"><name pos:start="221:9" pos:end="221:26"><name pos:start="221:9" pos:end="221:9">s</name><operator pos:start="221:10" pos:end="221:11">-&gt;</operator><name pos:start="221:12" pos:end="221:26">bitstream_index</name></name> <operator pos:start="221:28" pos:end="221:29">+=</operator> <name pos:start="221:31" pos:end="221:31">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:32"><expr pos:start="223:9" pos:end="223:31"><name pos:start="223:9" pos:end="223:25"><name pos:start="223:9" pos:end="223:9">s</name><operator pos:start="223:10" pos:end="223:11">-&gt;</operator><name pos:start="223:12" pos:end="223:25">bitstream_size</name></name>  <operator pos:start="223:28" pos:end="223:29">-=</operator> <name pos:start="223:31" pos:end="223:31">i</name></expr>;</expr_stmt>

        <return pos:start="225:9" pos:end="225:30">return <expr pos:start="225:16" pos:end="225:29"><name pos:start="225:16" pos:end="225:29">input_buf_size</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="227:7" pos:end="229:17">else<block type="pseudo" pos:start="229:9" pos:end="229:17"><block_content pos:start="229:9" pos:end="229:17">

        <return pos:start="229:9" pos:end="229:17">return <expr pos:start="229:16" pos:end="229:16"><name pos:start="229:16" pos:end="229:16">i</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
