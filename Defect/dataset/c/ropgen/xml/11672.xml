<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11672.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">ioinst_handle_ssch</name><parameter_list pos:start="1:23" pos:end="1:71">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:36">CPUS390XState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">env</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:51">uint64_t</name></type> <name pos:start="1:53" pos:end="1:56">reg1</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:66">uint32_t</name></type> <name pos:start="1:68" pos:end="1:70">ipb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:14">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">cssid</name></decl>, <decl pos:start="5:16" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:19">ssid</name></decl>, <decl pos:start="5:22" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:26">schid</name></decl>, <decl pos:start="5:29" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:29">m</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">SubchDev</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">sch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:7">ORB</name> <modifier pos:start="9:9" pos:end="9:9">*</modifier></type><name pos:start="9:10" pos:end="9:17">orig_orb</name></decl>, <decl pos:start="9:20" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:9"/><name pos:start="9:20" pos:end="9:22">orb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:21">= <expr pos:start="13:15" pos:end="13:21"><operator pos:start="13:15" pos:end="13:15">-</operator><name pos:start="13:16" pos:end="13:21">ENODEV</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">cc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:34"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">hwaddr</name></type> <name pos:start="17:12" pos:end="17:14">len</name> <init pos:start="17:16" pos:end="17:34">= <expr pos:start="17:18" pos:end="17:34"><sizeof pos:start="17:18" pos:end="17:34">sizeof<argument_list pos:start="17:24" pos:end="17:34">(<argument pos:start="17:25" pos:end="17:33"><expr pos:start="17:25" pos:end="17:33"><operator pos:start="17:25" pos:end="17:25">*</operator><name pos:start="17:26" pos:end="17:33">orig_orb</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:70">(<expr pos:start="21:9" pos:end="21:69"><call pos:start="21:9" pos:end="21:69"><name pos:start="21:9" pos:end="21:36">ioinst_disassemble_sch_ident</name><argument_list pos:start="21:37" pos:end="21:69">(<argument pos:start="21:38" pos:end="21:41"><expr pos:start="21:38" pos:end="21:41"><name pos:start="21:38" pos:end="21:41">reg1</name></expr></argument>, <argument pos:start="21:44" pos:end="21:45"><expr pos:start="21:44" pos:end="21:45"><operator pos:start="21:44" pos:end="21:44">&amp;</operator><name pos:start="21:45" pos:end="21:45">m</name></expr></argument>, <argument pos:start="21:48" pos:end="21:53"><expr pos:start="21:48" pos:end="21:53"><operator pos:start="21:48" pos:end="21:48">&amp;</operator><name pos:start="21:49" pos:end="21:53">cssid</name></expr></argument>, <argument pos:start="21:56" pos:end="21:60"><expr pos:start="21:56" pos:end="21:60"><operator pos:start="21:56" pos:end="21:56">&amp;</operator><name pos:start="21:57" pos:end="21:60">ssid</name></expr></argument>, <argument pos:start="21:63" pos:end="21:68"><expr pos:start="21:63" pos:end="21:68"><operator pos:start="21:63" pos:end="21:63">&amp;</operator><name pos:start="21:64" pos:end="21:68">schid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:72" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:20">

        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><call pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:25">program_interrupt</name><argument_list pos:start="23:26" pos:end="23:46">(<argument pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:29">env</name></expr></argument>, <argument pos:start="23:32" pos:end="23:42"><expr pos:start="23:32" pos:end="23:42"><name pos:start="23:32" pos:end="23:42">PGM_OPERAND</name></expr></argument>, <argument pos:start="23:45" pos:end="23:45"><expr pos:start="23:45" pos:end="23:45"><literal type="number" pos:start="23:45" pos:end="23:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:20">return <expr pos:start="25:16" pos:end="25:19"><operator pos:start="25:16" pos:end="25:16">-</operator><name pos:start="25:17" pos:end="25:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:52"><expr pos:start="29:5" pos:end="29:51"><call pos:start="29:5" pos:end="29:51"><name pos:start="29:5" pos:end="29:23">trace_ioinst_sch_id</name><argument_list pos:start="29:24" pos:end="29:51">(<argument pos:start="29:25" pos:end="29:30"><expr pos:start="29:25" pos:end="29:30"><literal type="string" pos:start="29:25" pos:end="29:30">"ssch"</literal></expr></argument>, <argument pos:start="29:33" pos:end="29:37"><expr pos:start="29:33" pos:end="29:37"><name pos:start="29:33" pos:end="29:37">cssid</name></expr></argument>, <argument pos:start="29:40" pos:end="29:43"><expr pos:start="29:40" pos:end="29:43"><name pos:start="29:40" pos:end="29:43">ssid</name></expr></argument>, <argument pos:start="29:46" pos:end="29:50"><expr pos:start="29:46" pos:end="29:50"><name pos:start="29:46" pos:end="29:50">schid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:39"><expr pos:start="31:5" pos:end="31:38"><name pos:start="31:5" pos:end="31:8">addr</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:38"><name pos:start="31:12" pos:end="31:28">decode_basedisp_s</name><argument_list pos:start="31:29" pos:end="31:38">(<argument pos:start="31:30" pos:end="31:32"><expr pos:start="31:30" pos:end="31:32"><name pos:start="31:30" pos:end="31:32">env</name></expr></argument>, <argument pos:start="31:35" pos:end="31:37"><expr pos:start="31:35" pos:end="31:37"><name pos:start="31:35" pos:end="31:37">ipb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:12">addr</name> <operator pos:start="33:14" pos:end="33:14">&amp;</operator> <literal type="number" pos:start="33:16" pos:end="33:16">3</literal></expr>)</condition> <block pos:start="33:19" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:20">

        <expr_stmt pos:start="35:9" pos:end="35:53"><expr pos:start="35:9" pos:end="35:52"><call pos:start="35:9" pos:end="35:52"><name pos:start="35:9" pos:end="35:25">program_interrupt</name><argument_list pos:start="35:26" pos:end="35:52">(<argument pos:start="35:27" pos:end="35:29"><expr pos:start="35:27" pos:end="35:29"><name pos:start="35:27" pos:end="35:29">env</name></expr></argument>, <argument pos:start="35:32" pos:end="35:48"><expr pos:start="35:32" pos:end="35:48"><name pos:start="35:32" pos:end="35:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="35:51" pos:end="35:51"><expr pos:start="35:51" pos:end="35:51"><literal type="number" pos:start="35:51" pos:end="35:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:20">return <expr pos:start="37:16" pos:end="37:19"><operator pos:start="37:16" pos:end="37:16">-</operator><name pos:start="37:17" pos:end="37:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:64"><expr pos:start="41:5" pos:end="41:63"><name pos:start="41:5" pos:end="41:12">orig_orb</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:63"><name pos:start="41:16" pos:end="41:43">s390_cpu_physical_memory_map</name><argument_list pos:start="41:44" pos:end="41:63">(<argument pos:start="41:45" pos:end="41:47"><expr pos:start="41:45" pos:end="41:47"><name pos:start="41:45" pos:end="41:47">env</name></expr></argument>, <argument pos:start="41:50" pos:end="41:53"><expr pos:start="41:50" pos:end="41:53"><name pos:start="41:50" pos:end="41:53">addr</name></expr></argument>, <argument pos:start="41:56" pos:end="41:59"><expr pos:start="41:56" pos:end="41:59"><operator pos:start="41:56" pos:end="41:56">&amp;</operator><name pos:start="41:57" pos:end="41:59">len</name></expr></argument>, <argument pos:start="41:62" pos:end="41:62"><expr pos:start="41:62" pos:end="41:62"><literal type="number" pos:start="41:62" pos:end="41:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:46">(<expr pos:start="43:9" pos:end="43:45"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:17">orig_orb</name> <operator pos:start="43:19" pos:end="43:20">||</operator> <name pos:start="43:22" pos:end="43:24">len</name> <operator pos:start="43:26" pos:end="43:27">!=</operator> <sizeof pos:start="43:29" pos:end="43:45">sizeof<argument_list pos:start="43:35" pos:end="43:45">(<argument pos:start="43:36" pos:end="43:44"><expr pos:start="43:36" pos:end="43:44"><operator pos:start="43:36" pos:end="43:36">*</operator><name pos:start="43:37" pos:end="43:44">orig_orb</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="43:48" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:17">

        <expr_stmt pos:start="45:9" pos:end="45:50"><expr pos:start="45:9" pos:end="45:49"><call pos:start="45:9" pos:end="45:49"><name pos:start="45:9" pos:end="45:25">program_interrupt</name><argument_list pos:start="45:26" pos:end="45:49">(<argument pos:start="45:27" pos:end="45:29"><expr pos:start="45:27" pos:end="45:29"><name pos:start="45:27" pos:end="45:29">env</name></expr></argument>, <argument pos:start="45:32" pos:end="45:45"><expr pos:start="45:32" pos:end="45:45"><name pos:start="45:32" pos:end="45:45">PGM_ADDRESSING</name></expr></argument>, <argument pos:start="45:48" pos:end="45:48"><expr pos:start="45:48" pos:end="45:48"><literal type="number" pos:start="45:48" pos:end="45:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:18"><expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:10">cc</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <operator pos:start="47:14" pos:end="47:14">-</operator><name pos:start="47:15" pos:end="47:17">EIO</name></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:17">goto <name pos:start="49:14" pos:end="49:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><call pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:23">copy_orb_from_guest</name><argument_list pos:start="53:24" pos:end="53:39">(<argument pos:start="53:25" pos:end="53:28"><expr pos:start="53:25" pos:end="53:28"><operator pos:start="53:25" pos:end="53:25">&amp;</operator><name pos:start="53:26" pos:end="53:28">orb</name></expr></argument>, <argument pos:start="53:31" pos:end="53:38"><expr pos:start="53:31" pos:end="53:38"><name pos:start="53:31" pos:end="53:38">orig_orb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:32">(<expr pos:start="55:9" pos:end="55:31"><operator pos:start="55:9" pos:end="55:9">!</operator><call pos:start="55:10" pos:end="55:31"><name pos:start="55:10" pos:end="55:25">ioinst_orb_valid</name><argument_list pos:start="55:26" pos:end="55:31">(<argument pos:start="55:27" pos:end="55:30"><expr pos:start="55:27" pos:end="55:30"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:30">orb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:34" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:17">

        <expr_stmt pos:start="57:9" pos:end="57:47"><expr pos:start="57:9" pos:end="57:46"><call pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:25">program_interrupt</name><argument_list pos:start="57:26" pos:end="57:46">(<argument pos:start="57:27" pos:end="57:29"><expr pos:start="57:27" pos:end="57:29"><name pos:start="57:27" pos:end="57:29">env</name></expr></argument>, <argument pos:start="57:32" pos:end="57:42"><expr pos:start="57:32" pos:end="57:42"><name pos:start="57:32" pos:end="57:42">PGM_OPERAND</name></expr></argument>, <argument pos:start="57:45" pos:end="57:45"><expr pos:start="57:45" pos:end="57:45"><literal type="number" pos:start="57:45" pos:end="57:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:18"><expr pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:10">cc</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <operator pos:start="59:14" pos:end="59:14">-</operator><name pos:start="59:15" pos:end="59:17">EIO</name></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:17">goto <name pos:start="61:14" pos:end="61:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:48"><expr pos:start="65:5" pos:end="65:47"><name pos:start="65:5" pos:end="65:7">sch</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:47"><name pos:start="65:11" pos:end="65:24">css_find_subch</name><argument_list pos:start="65:25" pos:end="65:47">(<argument pos:start="65:26" pos:end="65:26"><expr pos:start="65:26" pos:end="65:26"><name pos:start="65:26" pos:end="65:26">m</name></expr></argument>, <argument pos:start="65:29" pos:end="65:33"><expr pos:start="65:29" pos:end="65:33"><name pos:start="65:29" pos:end="65:33">cssid</name></expr></argument>, <argument pos:start="65:36" pos:end="65:39"><expr pos:start="65:36" pos:end="65:39"><name pos:start="65:36" pos:end="65:39">ssid</name></expr></argument>, <argument pos:start="65:42" pos:end="65:46"><expr pos:start="65:42" pos:end="65:46"><name pos:start="65:42" pos:end="65:46">schid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:38">(<expr pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:11">sch</name> <operator pos:start="67:13" pos:end="67:14">&amp;&amp;</operator> <call pos:start="67:16" pos:end="67:37"><name pos:start="67:16" pos:end="67:32">css_subch_visible</name><argument_list pos:start="67:33" pos:end="67:37">(<argument pos:start="67:34" pos:end="67:36"><expr pos:start="67:34" pos:end="67:36"><name pos:start="67:34" pos:end="67:36">sch</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:40" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:37">

        <expr_stmt pos:start="69:9" pos:end="69:37"><expr pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:36"><name pos:start="69:15" pos:end="69:25">css_do_ssch</name><argument_list pos:start="69:26" pos:end="69:36">(<argument pos:start="69:27" pos:end="69:29"><expr pos:start="69:27" pos:end="69:29"><name pos:start="69:27" pos:end="69:29">sch</name></expr></argument>, <argument pos:start="69:32" pos:end="69:35"><expr pos:start="69:32" pos:end="69:35"><operator pos:start="69:32" pos:end="69:32">&amp;</operator><name pos:start="69:33" pos:end="69:35">orb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="73:5" pos:end="99:5">switch <condition pos:start="73:12" pos:end="73:16">(<expr pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">ret</name></expr>)</condition> <block pos:start="73:18" pos:end="99:5">{<block_content pos:start="75:5" pos:end="97:14">

    <case pos:start="75:5" pos:end="75:17">case <expr pos:start="75:10" pos:end="75:16"><operator pos:start="75:10" pos:end="75:10">-</operator><name pos:start="75:11" pos:end="75:16">ENODEV</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:15"><expr pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:10">cc</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">3</literal></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:16">case <expr pos:start="81:10" pos:end="81:15"><operator pos:start="81:10" pos:end="81:10">-</operator><name pos:start="81:11" pos:end="81:15">EBUSY</name></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="83:15"><expr pos:start="83:9" pos:end="83:14"><name pos:start="83:9" pos:end="83:10">cc</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">2</literal></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:11">case <expr pos:start="87:10" pos:end="87:10"><literal type="number" pos:start="87:10" pos:end="87:10">0</literal></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:15"><expr pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:10">cc</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <default pos:start="93:5" pos:end="93:12">default:</default>

        <expr_stmt pos:start="95:9" pos:end="95:15"><expr pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:10">cc</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <literal type="number" pos:start="95:14" pos:end="95:14">1</literal></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    </block_content>}</block></switch>



<label pos:start="103:1" pos:end="103:4"><name pos:start="103:1" pos:end="103:3">out</name>:</label>

    <expr_stmt pos:start="105:5" pos:end="105:58"><expr pos:start="105:5" pos:end="105:57"><call pos:start="105:5" pos:end="105:57"><name pos:start="105:5" pos:end="105:34">s390_cpu_physical_memory_unmap</name><argument_list pos:start="105:35" pos:end="105:57">(<argument pos:start="105:36" pos:end="105:38"><expr pos:start="105:36" pos:end="105:38"><name pos:start="105:36" pos:end="105:38">env</name></expr></argument>, <argument pos:start="105:41" pos:end="105:48"><expr pos:start="105:41" pos:end="105:48"><name pos:start="105:41" pos:end="105:48">orig_orb</name></expr></argument>, <argument pos:start="105:51" pos:end="105:53"><expr pos:start="105:51" pos:end="105:53"><name pos:start="105:51" pos:end="105:53">len</name></expr></argument>, <argument pos:start="105:56" pos:end="105:56"><expr pos:start="105:56" pos:end="105:56"><literal type="number" pos:start="105:56" pos:end="105:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="107:5" pos:end="107:14">return <expr pos:start="107:12" pos:end="107:13"><name pos:start="107:12" pos:end="107:13">cc</name></expr>;</return>

</block_content>}</block></function>
</unit>
