<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1352.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">raw_pread</name><parameter_list pos:start="1:21" pos:end="3:45">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:50">int64_t</name></type> <name pos:start="1:52" pos:end="1:57">offset</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:28">uint8_t</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:33">buf</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:44"><decl pos:start="3:36" pos:end="3:44"><type pos:start="3:36" pos:end="3:44"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:44">count</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:59">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVRawState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">size</name></decl>, <decl pos:start="9:15" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:17">ret</name></decl>, <decl pos:start="9:20" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:24">shift</name></decl>, <decl pos:start="9:27" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:27" pos:end="9:29">sum</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:12"><expr pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:7">sum</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <literal type="number" pos:start="13:11" pos:end="13:11">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="133:5"><if pos:start="17:5" pos:end="133:5">if <condition pos:start="17:8" pos:end="17:31">(<expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:22">aligned_buf</name></name> <operator pos:start="17:24" pos:end="17:25">!=</operator> <name pos:start="17:27" pos:end="17:30">NULL</name></expr>)</condition>  <block pos:start="17:34" pos:end="133:5">{<block_content pos:start="21:9" pos:end="131:9">



        <if_stmt pos:start="21:9" pos:end="67:9"><if pos:start="21:9" pos:end="67:9">if <condition pos:start="21:12" pos:end="21:27">(<expr pos:start="21:13" pos:end="21:26"><name pos:start="21:13" pos:end="21:18">offset</name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <literal type="number" pos:start="21:22" pos:end="21:26">0x1ff</literal></expr>)</condition> <block pos:start="21:29" pos:end="67:9">{<block_content pos:start="27:13" pos:end="65:27">

            <comment type="block" pos:start="23:13" pos:end="23:54">/* align offset on a 512 bytes boundary */</comment>



            <expr_stmt pos:start="27:13" pos:end="27:35"><expr pos:start="27:13" pos:end="27:34"><name pos:start="27:13" pos:end="27:17">shift</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:26">offset</name> <operator pos:start="27:28" pos:end="27:28">&amp;</operator> <literal type="number" pos:start="27:30" pos:end="27:34">0x1ff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:52"><expr pos:start="29:13" pos:end="29:51"><name pos:start="29:13" pos:end="29:16">size</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <operator pos:start="29:20" pos:end="29:20">(</operator><name pos:start="29:21" pos:end="29:25">shift</name> <operator pos:start="29:27" pos:end="29:27">+</operator> <name pos:start="29:29" pos:end="29:33">count</name> <operator pos:start="29:35" pos:end="29:35">+</operator> <literal type="number" pos:start="29:37" pos:end="29:41">0x1ff</literal><operator pos:start="29:42" pos:end="29:42">)</operator> <operator pos:start="29:44" pos:end="29:44">&amp;</operator> <operator pos:start="29:46" pos:end="29:46">~</operator><literal type="number" pos:start="29:47" pos:end="29:51">0x1ff</literal></expr>;</expr_stmt>

            <if_stmt pos:start="31:13" pos:end="33:43"><if pos:start="31:13" pos:end="33:43">if <condition pos:start="31:16" pos:end="31:43">(<expr pos:start="31:17" pos:end="31:42"><name pos:start="31:17" pos:end="31:20">size</name> <operator pos:start="31:22" pos:end="31:22">&gt;</operator> <name pos:start="31:24" pos:end="31:42">ALIGNED_BUFFER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="33:17" pos:end="33:43"><block_content pos:start="33:17" pos:end="33:43">

                <expr_stmt pos:start="33:17" pos:end="33:43"><expr pos:start="33:17" pos:end="33:42"><name pos:start="33:17" pos:end="33:20">size</name> <operator pos:start="33:22" pos:end="33:22">=</operator> <name pos:start="33:24" pos:end="33:42">ALIGNED_BUFFER_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:78"><expr pos:start="35:13" pos:end="35:77"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:77"><name pos:start="35:19" pos:end="35:35">raw_pread_aligned</name><argument_list pos:start="35:36" pos:end="35:77">(<argument pos:start="35:37" pos:end="35:38"><expr pos:start="35:37" pos:end="35:38"><name pos:start="35:37" pos:end="35:38">bs</name></expr></argument>, <argument pos:start="35:41" pos:end="35:54"><expr pos:start="35:41" pos:end="35:54"><name pos:start="35:41" pos:end="35:46">offset</name> <operator pos:start="35:48" pos:end="35:48">-</operator> <name pos:start="35:50" pos:end="35:54">shift</name></expr></argument>, <argument pos:start="35:57" pos:end="35:70"><expr pos:start="35:57" pos:end="35:70"><name pos:start="35:57" pos:end="35:70"><name pos:start="35:57" pos:end="35:57">s</name><operator pos:start="35:58" pos:end="35:59">-&gt;</operator><name pos:start="35:60" pos:end="35:70">aligned_buf</name></name></expr></argument>, <argument pos:start="35:73" pos:end="35:76"><expr pos:start="35:73" pos:end="35:76"><name pos:start="35:73" pos:end="35:76">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="39:27"><if pos:start="37:13" pos:end="39:27">if <condition pos:start="37:16" pos:end="37:24">(<expr pos:start="37:17" pos:end="37:23"><name pos:start="37:17" pos:end="37:19">ret</name> <operator pos:start="37:21" pos:end="37:21">&lt;</operator> <literal type="number" pos:start="37:23" pos:end="37:23">0</literal></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:27"><block_content pos:start="39:17" pos:end="39:27">

                <return pos:start="39:17" pos:end="39:27">return <expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:26">ret</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="43:13" pos:end="43:31"><expr pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:16">size</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <literal type="number" pos:start="43:20" pos:end="43:24">512</literal> <operator pos:start="43:24" pos:end="43:24">-</operator> <name pos:start="43:26" pos:end="43:30">shift</name></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="47:29"><if pos:start="45:13" pos:end="47:29">if <condition pos:start="45:16" pos:end="45:29">(<expr pos:start="45:17" pos:end="45:28"><name pos:start="45:17" pos:end="45:20">size</name> <operator pos:start="45:22" pos:end="45:22">&gt;</operator> <name pos:start="45:24" pos:end="45:28">count</name></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:29"><block_content pos:start="47:17" pos:end="47:29">

                <expr_stmt pos:start="47:17" pos:end="47:29"><expr pos:start="47:17" pos:end="47:28"><name pos:start="47:17" pos:end="47:20">size</name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:28">count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:54"><expr pos:start="49:13" pos:end="49:53"><call pos:start="49:13" pos:end="49:53"><name pos:start="49:13" pos:end="49:18">memcpy</name><argument_list pos:start="49:19" pos:end="49:53">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">buf</name></expr></argument>, <argument pos:start="49:25" pos:end="49:46"><expr pos:start="49:25" pos:end="49:46"><name pos:start="49:25" pos:end="49:38"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:38">aligned_buf</name></name> <operator pos:start="49:40" pos:end="49:40">+</operator> <name pos:start="49:42" pos:end="49:46">shift</name></expr></argument>, <argument pos:start="49:49" pos:end="49:52"><expr pos:start="49:49" pos:end="49:52"><name pos:start="49:49" pos:end="49:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="53:13" pos:end="53:24"><expr pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:15">buf</name> <operator pos:start="53:17" pos:end="53:18">+=</operator> <name pos:start="53:20" pos:end="53:23">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:27"><expr pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:18">offset</name> <operator pos:start="55:20" pos:end="55:21">+=</operator> <name pos:start="55:23" pos:end="55:26">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:26"><expr pos:start="57:13" pos:end="57:25"><name pos:start="57:13" pos:end="57:17">count</name> <operator pos:start="57:19" pos:end="57:20">-=</operator> <name pos:start="57:22" pos:end="57:25">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:24"><expr pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:15">sum</name> <operator pos:start="59:17" pos:end="59:18">+=</operator> <name pos:start="59:20" pos:end="59:23">size</name></expr>;</expr_stmt>



            <if_stmt pos:start="63:13" pos:end="65:27"><if pos:start="63:13" pos:end="65:27">if <condition pos:start="63:16" pos:end="63:27">(<expr pos:start="63:17" pos:end="63:26"><name pos:start="63:17" pos:end="63:21">count</name> <operator pos:start="63:23" pos:end="63:24">==</operator> <literal type="number" pos:start="63:26" pos:end="63:26">0</literal></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:27"><block_content pos:start="65:17" pos:end="65:27">

                <return pos:start="65:17" pos:end="65:27">return <expr pos:start="65:24" pos:end="65:26"><name pos:start="65:24" pos:end="65:26">sum</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="131:9"><if pos:start="69:9" pos:end="131:9">if <condition pos:start="69:12" pos:end="69:53">(<expr pos:start="69:13" pos:end="69:52"><name pos:start="69:13" pos:end="69:17">count</name> <operator pos:start="69:19" pos:end="69:19">&amp;</operator> <literal type="number" pos:start="69:21" pos:end="69:25">0x1ff</literal> <operator pos:start="69:27" pos:end="69:28">||</operator> <operator pos:start="69:30" pos:end="69:30">(</operator><name pos:start="69:31" pos:end="69:39">uintptr_t</name><operator pos:start="69:40" pos:end="69:40">)</operator> <name pos:start="69:42" pos:end="69:44">buf</name> <operator pos:start="69:46" pos:end="69:46">&amp;</operator> <literal type="number" pos:start="69:48" pos:end="69:52">0x1ff</literal></expr>)</condition> <block pos:start="69:55" pos:end="131:9">{<block_content pos:start="77:13" pos:end="129:23">



            <comment type="block" pos:start="73:13" pos:end="73:40">/* read on aligned buffer */</comment>



            <while pos:start="77:13" pos:end="125:13">while <condition pos:start="77:19" pos:end="77:25">(<expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">count</name></expr>)</condition> <block pos:start="77:27" pos:end="125:13">{<block_content pos:start="81:17" pos:end="123:28">



                <expr_stmt pos:start="81:17" pos:end="81:48"><expr pos:start="81:17" pos:end="81:47"><name pos:start="81:17" pos:end="81:20">size</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <operator pos:start="81:24" pos:end="81:24">(</operator><name pos:start="81:25" pos:end="81:29">count</name> <operator pos:start="81:31" pos:end="81:31">+</operator> <literal type="number" pos:start="81:33" pos:end="81:37">0x1ff</literal><operator pos:start="81:38" pos:end="81:38">)</operator> <operator pos:start="81:40" pos:end="81:40">&amp;</operator> <operator pos:start="81:42" pos:end="81:42">~</operator><literal type="number" pos:start="81:43" pos:end="81:47">0x1ff</literal></expr>;</expr_stmt>

                <if_stmt pos:start="83:17" pos:end="85:47"><if pos:start="83:17" pos:end="85:47">if <condition pos:start="83:20" pos:end="83:47">(<expr pos:start="83:21" pos:end="83:46"><name pos:start="83:21" pos:end="83:24">size</name> <operator pos:start="83:26" pos:end="83:26">&gt;</operator> <name pos:start="83:28" pos:end="83:46">ALIGNED_BUFFER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="85:47"><block_content pos:start="85:21" pos:end="85:47">

                    <expr_stmt pos:start="85:21" pos:end="85:47"><expr pos:start="85:21" pos:end="85:46"><name pos:start="85:21" pos:end="85:24">size</name> <operator pos:start="85:26" pos:end="85:26">=</operator> <name pos:start="85:28" pos:end="85:46">ALIGNED_BUFFER_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <expr_stmt pos:start="89:17" pos:end="89:74"><expr pos:start="89:17" pos:end="89:73"><name pos:start="89:17" pos:end="89:19">ret</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="89:73"><name pos:start="89:23" pos:end="89:39">raw_pread_aligned</name><argument_list pos:start="89:40" pos:end="89:73">(<argument pos:start="89:41" pos:end="89:42"><expr pos:start="89:41" pos:end="89:42"><name pos:start="89:41" pos:end="89:42">bs</name></expr></argument>, <argument pos:start="89:45" pos:end="89:50"><expr pos:start="89:45" pos:end="89:50"><name pos:start="89:45" pos:end="89:50">offset</name></expr></argument>, <argument pos:start="89:53" pos:end="89:66"><expr pos:start="89:53" pos:end="89:66"><name pos:start="89:53" pos:end="89:66"><name pos:start="89:53" pos:end="89:53">s</name><operator pos:start="89:54" pos:end="89:55">-&gt;</operator><name pos:start="89:56" pos:end="89:66">aligned_buf</name></name></expr></argument>, <argument pos:start="89:69" pos:end="89:72"><expr pos:start="89:69" pos:end="89:72"><name pos:start="89:69" pos:end="89:72">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="91:17" pos:end="101:17"><if pos:start="91:17" pos:end="95:17">if <condition pos:start="91:20" pos:end="91:28">(<expr pos:start="91:21" pos:end="91:27"><name pos:start="91:21" pos:end="91:23">ret</name> <operator pos:start="91:25" pos:end="91:25">&lt;</operator> <literal type="number" pos:start="91:27" pos:end="91:27">0</literal></expr>)</condition> <block pos:start="91:30" pos:end="95:17">{<block_content pos:start="93:21" pos:end="93:31">

                    <return pos:start="93:21" pos:end="93:31">return <expr pos:start="93:28" pos:end="93:30"><name pos:start="93:28" pos:end="93:30">ret</name></expr>;</return>

                </block_content>}</block></if> <if type="elseif" pos:start="95:19" pos:end="101:17">else if <condition pos:start="95:27" pos:end="95:36">(<expr pos:start="95:28" pos:end="95:35"><name pos:start="95:28" pos:end="95:30">ret</name> <operator pos:start="95:32" pos:end="95:33">==</operator> <literal type="number" pos:start="95:35" pos:end="95:35">0</literal></expr>)</condition> <block pos:start="95:38" pos:end="101:17">{<block_content pos:start="97:21" pos:end="99:28">

                    <expr_stmt pos:start="97:21" pos:end="97:76"><expr pos:start="97:21" pos:end="97:75"><call pos:start="97:21" pos:end="97:75"><name pos:start="97:21" pos:end="97:27">fprintf</name><argument_list pos:start="97:28" pos:end="97:75">(<argument pos:start="97:29" pos:end="97:34"><expr pos:start="97:29" pos:end="97:34"><name pos:start="97:29" pos:end="97:34">stderr</name></expr></argument>, <argument pos:start="97:37" pos:end="97:74"><expr pos:start="97:37" pos:end="97:74"><literal type="string" pos:start="97:37" pos:end="97:74">"raw_pread: read beyond end of file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:28"><expr pos:start="99:21" pos:end="99:27"><call pos:start="99:21" pos:end="99:27"><name pos:start="99:21" pos:end="99:25">abort</name><argument_list pos:start="99:26" pos:end="99:27">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="105:17" pos:end="105:27"><expr pos:start="105:17" pos:end="105:26"><name pos:start="105:17" pos:end="105:20">size</name> <operator pos:start="105:22" pos:end="105:22">=</operator> <name pos:start="105:24" pos:end="105:26">ret</name></expr>;</expr_stmt>

                <if_stmt pos:start="107:17" pos:end="109:33"><if pos:start="107:17" pos:end="109:33">if <condition pos:start="107:20" pos:end="107:33">(<expr pos:start="107:21" pos:end="107:32"><name pos:start="107:21" pos:end="107:24">size</name> <operator pos:start="107:26" pos:end="107:26">&gt;</operator> <name pos:start="107:28" pos:end="107:32">count</name></expr>)</condition><block type="pseudo" pos:start="109:21" pos:end="109:33"><block_content pos:start="109:21" pos:end="109:33">

                    <expr_stmt pos:start="109:21" pos:end="109:33"><expr pos:start="109:21" pos:end="109:32"><name pos:start="109:21" pos:end="109:24">size</name> <operator pos:start="109:26" pos:end="109:26">=</operator> <name pos:start="109:28" pos:end="109:32">count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <expr_stmt pos:start="113:17" pos:end="113:50"><expr pos:start="113:17" pos:end="113:49"><call pos:start="113:17" pos:end="113:49"><name pos:start="113:17" pos:end="113:22">memcpy</name><argument_list pos:start="113:23" pos:end="113:49">(<argument pos:start="113:24" pos:end="113:26"><expr pos:start="113:24" pos:end="113:26"><name pos:start="113:24" pos:end="113:26">buf</name></expr></argument>, <argument pos:start="113:29" pos:end="113:42"><expr pos:start="113:29" pos:end="113:42"><name pos:start="113:29" pos:end="113:42"><name pos:start="113:29" pos:end="113:29">s</name><operator pos:start="113:30" pos:end="113:31">-&gt;</operator><name pos:start="113:32" pos:end="113:42">aligned_buf</name></name></expr></argument>, <argument pos:start="113:45" pos:end="113:48"><expr pos:start="113:45" pos:end="113:48"><name pos:start="113:45" pos:end="113:48">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="117:17" pos:end="117:28"><expr pos:start="117:17" pos:end="117:27"><name pos:start="117:17" pos:end="117:19">buf</name> <operator pos:start="117:21" pos:end="117:22">+=</operator> <name pos:start="117:24" pos:end="117:27">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:31"><expr pos:start="119:17" pos:end="119:30"><name pos:start="119:17" pos:end="119:22">offset</name> <operator pos:start="119:24" pos:end="119:25">+=</operator> <name pos:start="119:27" pos:end="119:30">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:30"><expr pos:start="121:17" pos:end="121:29"><name pos:start="121:17" pos:end="121:21">count</name> <operator pos:start="121:23" pos:end="121:24">-=</operator> <name pos:start="121:26" pos:end="121:29">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:28"><expr pos:start="123:17" pos:end="123:27"><name pos:start="123:17" pos:end="123:19">sum</name> <operator pos:start="123:21" pos:end="123:22">+=</operator> <name pos:start="123:24" pos:end="123:27">size</name></expr>;</expr_stmt>

            </block_content>}</block></while>



            <return pos:start="129:13" pos:end="129:23">return <expr pos:start="129:20" pos:end="129:22"><name pos:start="129:20" pos:end="129:22">sum</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="137:5" pos:end="137:59">return <expr pos:start="137:12" pos:end="137:58"><call pos:start="137:12" pos:end="137:52"><name pos:start="137:12" pos:end="137:28">raw_pread_aligned</name><argument_list pos:start="137:29" pos:end="137:52">(<argument pos:start="137:30" pos:end="137:31"><expr pos:start="137:30" pos:end="137:31"><name pos:start="137:30" pos:end="137:31">bs</name></expr></argument>, <argument pos:start="137:34" pos:end="137:39"><expr pos:start="137:34" pos:end="137:39"><name pos:start="137:34" pos:end="137:39">offset</name></expr></argument>, <argument pos:start="137:42" pos:end="137:44"><expr pos:start="137:42" pos:end="137:44"><name pos:start="137:42" pos:end="137:44">buf</name></expr></argument>, <argument pos:start="137:47" pos:end="137:51"><expr pos:start="137:47" pos:end="137:51"><name pos:start="137:47" pos:end="137:51">count</name></expr></argument>)</argument_list></call> <operator pos:start="137:54" pos:end="137:54">+</operator> <name pos:start="137:56" pos:end="137:58">sum</name></expr>;</return>

</block_content>}</block></function>
</unit>
