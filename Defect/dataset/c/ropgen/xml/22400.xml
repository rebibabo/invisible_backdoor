<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22400.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:24">qmp_blockdev_mirror</name><parameter_list pos:start="1:25" pos:end="21:38">(<parameter pos:start="1:26" pos:end="1:43"><decl pos:start="1:26" pos:end="1:43"><type pos:start="1:26" pos:end="1:43"><specifier pos:start="1:26" pos:end="1:30">const</specifier> <name pos:start="1:32" pos:end="1:35">char</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">device</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:63"><decl pos:start="1:46" pos:end="1:63"><type pos:start="1:46" pos:end="1:63"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:55">char</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:63">target</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:42"><decl pos:start="3:26" pos:end="3:42"><type pos:start="3:26" pos:end="3:42"><name pos:start="3:26" pos:end="3:29">bool</name></type> <name pos:start="3:31" pos:end="3:42">has_replaces</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:64"><decl pos:start="3:45" pos:end="3:64"><type pos:start="3:45" pos:end="3:64"><specifier pos:start="3:45" pos:end="3:49">const</specifier> <name pos:start="3:51" pos:end="3:54">char</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:64">replaces</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:44"><decl pos:start="5:26" pos:end="5:44"><type pos:start="5:26" pos:end="5:44"><name pos:start="5:26" pos:end="5:39">MirrorSyncMode</name></type> <name pos:start="5:41" pos:end="5:44">sync</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:39"><decl pos:start="7:26" pos:end="7:39"><type pos:start="7:26" pos:end="7:39"><name pos:start="7:26" pos:end="7:29">bool</name></type> <name pos:start="7:31" pos:end="7:39">has_speed</name></decl></parameter>, <parameter pos:start="7:42" pos:end="7:54"><decl pos:start="7:42" pos:end="7:54"><type pos:start="7:42" pos:end="7:54"><name pos:start="7:42" pos:end="7:48">int64_t</name></type> <name pos:start="7:50" pos:end="7:54">speed</name></decl></parameter>,

                         <parameter pos:start="9:26" pos:end="9:45"><decl pos:start="9:26" pos:end="9:45"><type pos:start="9:26" pos:end="9:45"><name pos:start="9:26" pos:end="9:29">bool</name></type> <name pos:start="9:31" pos:end="9:45">has_granularity</name></decl></parameter>, <parameter pos:start="9:48" pos:end="9:67"><decl pos:start="9:48" pos:end="9:67"><type pos:start="9:48" pos:end="9:67"><name pos:start="9:48" pos:end="9:55">uint32_t</name></type> <name pos:start="9:57" pos:end="9:67">granularity</name></decl></parameter>,

                         <parameter pos:start="11:26" pos:end="11:42"><decl pos:start="11:26" pos:end="11:42"><type pos:start="11:26" pos:end="11:42"><name pos:start="11:26" pos:end="11:29">bool</name></type> <name pos:start="11:31" pos:end="11:42">has_buf_size</name></decl></parameter>, <parameter pos:start="11:45" pos:end="11:60"><decl pos:start="11:45" pos:end="11:60"><type pos:start="11:45" pos:end="11:60"><name pos:start="11:45" pos:end="11:51">int64_t</name></type> <name pos:start="11:53" pos:end="11:60">buf_size</name></decl></parameter>,

                         <parameter pos:start="13:26" pos:end="13:49"><decl pos:start="13:26" pos:end="13:49"><type pos:start="13:26" pos:end="13:49"><name pos:start="13:26" pos:end="13:29">bool</name></type> <name pos:start="13:31" pos:end="13:49">has_on_source_error</name></decl></parameter>,

                         <parameter pos:start="15:26" pos:end="15:56"><decl pos:start="15:26" pos:end="15:56"><type pos:start="15:26" pos:end="15:56"><name pos:start="15:26" pos:end="15:40">BlockdevOnError</name></type> <name pos:start="15:42" pos:end="15:56">on_source_error</name></decl></parameter>,

                         <parameter pos:start="17:26" pos:end="17:49"><decl pos:start="17:26" pos:end="17:49"><type pos:start="17:26" pos:end="17:49"><name pos:start="17:26" pos:end="17:29">bool</name></type> <name pos:start="17:31" pos:end="17:49">has_on_target_error</name></decl></parameter>,

                         <parameter pos:start="19:26" pos:end="19:56"><decl pos:start="19:26" pos:end="19:56"><type pos:start="19:26" pos:end="19:56"><name pos:start="19:26" pos:end="19:40">BlockdevOnError</name></type> <name pos:start="19:42" pos:end="19:56">on_target_error</name></decl></parameter>,

                         <parameter pos:start="21:26" pos:end="21:37"><decl pos:start="21:26" pos:end="21:37"><type pos:start="21:26" pos:end="21:37"><name pos:start="21:26" pos:end="21:30">Error</name> <modifier pos:start="21:32" pos:end="21:32">*</modifier><modifier pos:start="21:33" pos:end="21:33">*</modifier></type><name pos:start="21:34" pos:end="21:37">errp</name></decl></parameter>)</parameter_list>

<block pos:start="23:1" pos:end="111:1">{<block_content pos:start="25:5" pos:end="109:37">

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:20">BlockDriverState</name> <modifier pos:start="25:22" pos:end="25:22">*</modifier></type><name pos:start="25:23" pos:end="25:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">BlockBackend</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:31"><type pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:20">BlockDriverState</name> <modifier pos:start="29:22" pos:end="29:22">*</modifier></type><name pos:start="29:23" pos:end="29:31">target_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:28"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:14">AioContext</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:69"><decl pos:start="33:5" pos:end="33:68"><type pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:26">BlockMirrorBackingMode</name></type> <name pos:start="33:28" pos:end="33:39">backing_mode</name> <init pos:start="33:41" pos:end="33:68">= <expr pos:start="33:43" pos:end="33:68"><name pos:start="33:43" pos:end="33:68">MIRROR_LEAVE_BACKING_CHAIN</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:28"><decl pos:start="35:5" pos:end="35:27"><type pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:9">Error</name> <modifier pos:start="35:11" pos:end="35:11">*</modifier></type><name pos:start="35:12" pos:end="35:20">local_err</name> <init pos:start="35:22" pos:end="35:27">= <expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:7">blk</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:29"><name pos:start="39:11" pos:end="39:21">blk_by_name</name><argument_list pos:start="39:22" pos:end="39:29">(<argument pos:start="39:23" pos:end="39:28"><expr pos:start="39:23" pos:end="39:28"><name pos:start="39:23" pos:end="39:28">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:13">(<expr pos:start="41:9" pos:end="41:12"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:12">blk</name></expr>)</condition> <block pos:start="41:15" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:15">

        <expr_stmt pos:start="43:9" pos:end="43:58"><expr pos:start="43:9" pos:end="43:57"><call pos:start="43:9" pos:end="43:57"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="43:57">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:48"><expr pos:start="43:26" pos:end="43:48"><literal type="string" pos:start="43:26" pos:end="43:48">"Device '%s' not found"</literal></expr></argument>, <argument pos:start="43:51" pos:end="43:56"><expr pos:start="43:51" pos:end="43:56"><name pos:start="43:51" pos:end="43:56">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:21"><expr pos:start="49:5" pos:end="49:20"><name pos:start="49:5" pos:end="49:6">bs</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <call pos:start="49:10" pos:end="49:20"><name pos:start="49:10" pos:end="49:15">blk_bs</name><argument_list pos:start="49:16" pos:end="49:20">(<argument pos:start="49:17" pos:end="49:19"><expr pos:start="49:17" pos:end="49:19"><name pos:start="49:17" pos:end="49:19">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:12">(<expr pos:start="53:9" pos:end="53:11"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:11">bs</name></expr>)</condition> <block pos:start="53:14" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:15">

        <expr_stmt pos:start="55:9" pos:end="55:61"><expr pos:start="55:9" pos:end="55:60"><call pos:start="55:9" pos:end="55:60"><name pos:start="55:9" pos:end="55:18">error_setg</name><argument_list pos:start="55:19" pos:end="55:60">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">errp</name></expr></argument>, <argument pos:start="55:26" pos:end="55:51"><expr pos:start="55:26" pos:end="55:51"><literal type="string" pos:start="55:26" pos:end="55:51">"Device '%s' has no media"</literal></expr></argument>, <argument pos:start="55:54" pos:end="55:59"><expr pos:start="55:54" pos:end="55:59"><name pos:start="55:54" pos:end="55:59">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:53"><expr pos:start="63:5" pos:end="63:52"><name pos:start="63:5" pos:end="63:13">target_bs</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:52"><name pos:start="63:17" pos:end="63:30">bdrv_lookup_bs</name><argument_list pos:start="63:31" pos:end="63:52">(<argument pos:start="63:32" pos:end="63:37"><expr pos:start="63:32" pos:end="63:37"><name pos:start="63:32" pos:end="63:37">target</name></expr></argument>, <argument pos:start="63:40" pos:end="63:45"><expr pos:start="63:40" pos:end="63:45"><name pos:start="63:40" pos:end="63:45">target</name></expr></argument>, <argument pos:start="63:48" pos:end="63:51"><expr pos:start="63:48" pos:end="63:51"><name pos:start="63:48" pos:end="63:51">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:19">(<expr pos:start="65:9" pos:end="65:18"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:18">target_bs</name></expr>)</condition> <block pos:start="65:21" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:15">

        <return pos:start="67:9" pos:end="67:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:43"><expr pos:start="73:5" pos:end="73:42"><name pos:start="73:5" pos:end="73:15">aio_context</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:42"><name pos:start="73:19" pos:end="73:38">bdrv_get_aio_context</name><argument_list pos:start="73:39" pos:end="73:42">(<argument pos:start="73:40" pos:end="73:41"><expr pos:start="73:40" pos:end="73:41"><name pos:start="73:40" pos:end="73:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:37"><expr pos:start="75:5" pos:end="75:36"><call pos:start="75:5" pos:end="75:36"><name pos:start="75:5" pos:end="75:23">aio_context_acquire</name><argument_list pos:start="75:24" pos:end="75:36">(<argument pos:start="75:25" pos:end="75:35"><expr pos:start="75:25" pos:end="75:35"><name pos:start="75:25" pos:end="75:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:49"><expr pos:start="79:5" pos:end="79:48"><call pos:start="79:5" pos:end="79:48"><name pos:start="79:5" pos:end="79:24">bdrv_set_aio_context</name><argument_list pos:start="79:25" pos:end="79:48">(<argument pos:start="79:26" pos:end="79:34"><expr pos:start="79:26" pos:end="79:34"><name pos:start="79:26" pos:end="79:34">target_bs</name></expr></argument>, <argument pos:start="79:37" pos:end="79:47"><expr pos:start="79:37" pos:end="79:47"><name pos:start="79:37" pos:end="79:47">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="99:39"><expr pos:start="83:5" pos:end="99:38"><call pos:start="83:5" pos:end="99:38"><name pos:start="83:5" pos:end="83:26">blockdev_mirror_common</name><argument_list pos:start="83:27" pos:end="99:38">(<argument pos:start="83:28" pos:end="83:29"><expr pos:start="83:28" pos:end="83:29"><name pos:start="83:28" pos:end="83:29">bs</name></expr></argument>, <argument pos:start="83:32" pos:end="83:40"><expr pos:start="83:32" pos:end="83:40"><name pos:start="83:32" pos:end="83:40">target_bs</name></expr></argument>,

                           <argument pos:start="85:28" pos:end="85:39"><expr pos:start="85:28" pos:end="85:39"><name pos:start="85:28" pos:end="85:39">has_replaces</name></expr></argument>, <argument pos:start="85:42" pos:end="85:49"><expr pos:start="85:42" pos:end="85:49"><name pos:start="85:42" pos:end="85:49">replaces</name></expr></argument>, <argument pos:start="85:52" pos:end="85:55"><expr pos:start="85:52" pos:end="85:55"><name pos:start="85:52" pos:end="85:55">sync</name></expr></argument>, <argument pos:start="85:58" pos:end="85:69"><expr pos:start="85:58" pos:end="85:69"><name pos:start="85:58" pos:end="85:69">backing_mode</name></expr></argument>,

                           <argument pos:start="87:28" pos:end="87:36"><expr pos:start="87:28" pos:end="87:36"><name pos:start="87:28" pos:end="87:36">has_speed</name></expr></argument>, <argument pos:start="87:39" pos:end="87:43"><expr pos:start="87:39" pos:end="87:43"><name pos:start="87:39" pos:end="87:43">speed</name></expr></argument>,

                           <argument pos:start="89:28" pos:end="89:42"><expr pos:start="89:28" pos:end="89:42"><name pos:start="89:28" pos:end="89:42">has_granularity</name></expr></argument>, <argument pos:start="89:45" pos:end="89:55"><expr pos:start="89:45" pos:end="89:55"><name pos:start="89:45" pos:end="89:55">granularity</name></expr></argument>,

                           <argument pos:start="91:28" pos:end="91:39"><expr pos:start="91:28" pos:end="91:39"><name pos:start="91:28" pos:end="91:39">has_buf_size</name></expr></argument>, <argument pos:start="91:42" pos:end="91:49"><expr pos:start="91:42" pos:end="91:49"><name pos:start="91:42" pos:end="91:49">buf_size</name></expr></argument>,

                           <argument pos:start="93:28" pos:end="93:46"><expr pos:start="93:28" pos:end="93:46"><name pos:start="93:28" pos:end="93:46">has_on_source_error</name></expr></argument>, <argument pos:start="93:49" pos:end="93:63"><expr pos:start="93:49" pos:end="93:63"><name pos:start="93:49" pos:end="93:63">on_source_error</name></expr></argument>,

                           <argument pos:start="95:28" pos:end="95:46"><expr pos:start="95:28" pos:end="95:46"><name pos:start="95:28" pos:end="95:46">has_on_target_error</name></expr></argument>, <argument pos:start="95:49" pos:end="95:63"><expr pos:start="95:49" pos:end="95:63"><name pos:start="95:49" pos:end="95:63">on_target_error</name></expr></argument>,

                           <argument pos:start="97:28" pos:end="97:31"><expr pos:start="97:28" pos:end="97:31"><name pos:start="97:28" pos:end="97:31">true</name></expr></argument>, <argument pos:start="97:34" pos:end="97:37"><expr pos:start="97:34" pos:end="97:37"><name pos:start="97:34" pos:end="97:37">true</name></expr></argument>,

                           <argument pos:start="99:28" pos:end="99:37"><expr pos:start="99:28" pos:end="99:37"><operator pos:start="99:28" pos:end="99:28">&amp;</operator><name pos:start="99:29" pos:end="99:37">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:18">(<expr pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:17">local_err</name></expr>)</condition> <block pos:start="101:20" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:41">

        <expr_stmt pos:start="103:9" pos:end="103:41"><expr pos:start="103:9" pos:end="103:40"><call pos:start="103:9" pos:end="103:40"><name pos:start="103:9" pos:end="103:23">error_propagate</name><argument_list pos:start="103:24" pos:end="103:40">(<argument pos:start="103:25" pos:end="103:28"><expr pos:start="103:25" pos:end="103:28"><name pos:start="103:25" pos:end="103:28">errp</name></expr></argument>, <argument pos:start="103:31" pos:end="103:39"><expr pos:start="103:31" pos:end="103:39"><name pos:start="103:31" pos:end="103:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:37"><expr pos:start="109:5" pos:end="109:36"><call pos:start="109:5" pos:end="109:36"><name pos:start="109:5" pos:end="109:23">aio_context_release</name><argument_list pos:start="109:24" pos:end="109:36">(<argument pos:start="109:25" pos:end="109:35"><expr pos:start="109:25" pos:end="109:35"><name pos:start="109:25" pos:end="109:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
