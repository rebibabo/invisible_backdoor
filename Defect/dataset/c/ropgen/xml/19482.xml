<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19482.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">gdb_read_byte</name><parameter_list pos:start="1:26" pos:end="1:46">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:34">GDBState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:45"><decl pos:start="1:40" pos:end="1:45"><type pos:start="1:40" pos:end="1:45"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:45">ch</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">env</name> <init pos:start="5:19" pos:end="5:26">= <expr pos:start="5:21" pos:end="5:26"><name pos:start="5:21" pos:end="5:26"><name pos:start="5:21" pos:end="5:21">s</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:26">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:15">csum</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:17">reply</name></decl>;</decl_stmt>



<cpp:ifndef pos:start="13:1" pos:end="13:24">#<cpp:directive pos:start="13:2" pos:end="13:7">ifndef</cpp:directive> <name pos:start="13:9" pos:end="13:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <if_stmt pos:start="15:5" pos:end="53:5"><if pos:start="15:5" pos:end="53:5">if <condition pos:start="15:8" pos:end="15:27">(<expr pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:26">last_packet_len</name></name></expr>)</condition> <block pos:start="15:29" pos:end="53:5">{<block_content pos:start="21:9" pos:end="51:19">

        <comment type="block" pos:start="17:9" pos:end="19:67">/* Waiting for a response to the last packet.  If we see the start

           of a new command then abandon the previous response.  */</comment>

        <if_stmt pos:start="21:9" pos:end="44:0"><if pos:start="21:9" pos:end="34:0">if <condition pos:start="21:12" pos:end="21:22">(<expr pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:14">ch</name> <operator pos:start="21:16" pos:end="21:17">==</operator> <literal type="char" pos:start="21:19" pos:end="21:21">'-'</literal></expr>)</condition> <block pos:start="21:24" pos:end="34:0">{<block_content pos:start="25:13" pos:end="29:73">

<cpp:ifdef pos:start="23:1" pos:end="23:16">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:16">DEBUG_GDB</name></cpp:ifdef>

            <expr_stmt pos:start="25:13" pos:end="28:0"><expr pos:start="25:13" pos:end="25:48"><call pos:start="25:13" pos:end="25:48"><name pos:start="25:13" pos:end="25:18">printf</name><argument_list pos:start="25:19" pos:end="25:48">(<argument pos:start="25:20" pos:end="25:47"><expr pos:start="25:20" pos:end="25:47"><literal type="string" pos:start="25:20" pos:end="25:47">"Got NACK, retransmitting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="29:13" pos:end="29:73"><expr pos:start="29:13" pos:end="29:72"><call pos:start="29:13" pos:end="29:72"><name pos:start="29:13" pos:end="29:22">put_buffer</name><argument_list pos:start="29:23" pos:end="29:72">(<argument pos:start="29:24" pos:end="29:24"><expr pos:start="29:24" pos:end="29:24"><name pos:start="29:24" pos:end="29:24">s</name></expr></argument>, <argument pos:start="29:27" pos:end="29:51"><expr pos:start="29:27" pos:end="29:51"><operator pos:start="29:27" pos:end="29:27">(</operator><name pos:start="29:28" pos:end="29:34">uint8_t</name> <operator pos:start="29:36" pos:end="29:36">*</operator><operator pos:start="29:37" pos:end="29:37">)</operator><name pos:start="29:38" pos:end="29:51"><name pos:start="29:38" pos:end="29:38">s</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:51">last_packet</name></name></expr></argument>, <argument pos:start="29:54" pos:end="29:71"><expr pos:start="29:54" pos:end="29:71"><name pos:start="29:54" pos:end="29:71"><name pos:start="29:54" pos:end="29:54">s</name><operator pos:start="29:55" pos:end="29:56">-&gt;</operator><name pos:start="29:57" pos:end="29:71">last_packet_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>

<cpp:ifdef pos:start="33:1" pos:end="33:16">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:16">DEBUG_GDB</name></cpp:ifdef>

        <if type="elseif" pos:start="35:9" pos:end="37:32">else if <condition pos:start="35:17" pos:end="35:27">(<expr pos:start="35:18" pos:end="35:26"><name pos:start="35:18" pos:end="35:19">ch</name> <operator pos:start="35:21" pos:end="35:22">==</operator> <literal type="char" pos:start="35:24" pos:end="35:26">'+'</literal></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:32"><block_content pos:start="37:13" pos:end="37:32">

            <expr_stmt pos:start="37:13" pos:end="37:32"><expr pos:start="37:13" pos:end="37:31"><call pos:start="37:13" pos:end="37:31"><name pos:start="37:13" pos:end="37:18">printf</name><argument_list pos:start="37:19" pos:end="37:31">(<argument pos:start="37:20" pos:end="37:30"><expr pos:start="37:20" pos:end="37:30"><literal type="string" pos:start="37:20" pos:end="37:30">"Got ACK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="39:9" pos:end="44:0">else<block type="pseudo" pos:start="41:13" pos:end="44:0"><block_content pos:start="41:13" pos:end="44:0">

            <expr_stmt pos:start="41:13" pos:end="44:0"><expr pos:start="41:13" pos:end="41:60"><call pos:start="41:13" pos:end="41:60"><name pos:start="41:13" pos:end="41:18">printf</name><argument_list pos:start="41:19" pos:end="41:60">(<argument pos:start="41:20" pos:end="41:55"><expr pos:start="41:20" pos:end="41:55"><literal type="string" pos:start="41:20" pos:end="41:55">"Got '%c' when expecting ACK/NACK\n"</literal></expr></argument>, <argument pos:start="41:58" pos:end="41:59"><expr pos:start="41:58" pos:end="41:59"><name pos:start="41:58" pos:end="41:59">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="45:9" pos:end="47:35"><if pos:start="45:9" pos:end="47:35">if <condition pos:start="45:12" pos:end="45:35">(<expr pos:start="45:13" pos:end="45:34"><name pos:start="45:13" pos:end="45:14">ch</name> <operator pos:start="45:16" pos:end="45:17">==</operator> <literal type="char" pos:start="45:19" pos:end="45:21">'+'</literal> <operator pos:start="45:23" pos:end="45:24">||</operator> <name pos:start="45:26" pos:end="45:27">ch</name> <operator pos:start="45:29" pos:end="45:30">==</operator> <literal type="char" pos:start="45:32" pos:end="45:34">'$'</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:35"><block_content pos:start="47:13" pos:end="47:35">

            <expr_stmt pos:start="47:13" pos:end="47:35"><expr pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:30">last_packet_len</name></name> <operator pos:start="47:32" pos:end="47:32">=</operator> <literal type="number" pos:start="47:34" pos:end="47:34">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="49:9" pos:end="51:19"><if pos:start="49:9" pos:end="51:19">if <condition pos:start="49:12" pos:end="49:22">(<expr pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:14">ch</name> <operator pos:start="49:16" pos:end="49:17">!=</operator> <literal type="char" pos:start="49:19" pos:end="49:21">'$'</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:19"><block_content pos:start="51:13" pos:end="51:19">

            <return pos:start="51:13" pos:end="51:19">return;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="149:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:19">(<expr pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:18">vm_running</name></expr>)</condition> <block pos:start="55:21" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:32">

        <comment type="block" pos:start="57:9" pos:end="59:38">/* when the CPU is running, we cannot do anything except stop

           it when receiving a char */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:32"><expr pos:start="61:9" pos:end="61:31"><call pos:start="61:9" pos:end="61:31"><name pos:start="61:9" pos:end="61:15">vm_stop</name><argument_list pos:start="61:16" pos:end="61:31">(<argument pos:start="61:17" pos:end="61:30"><expr pos:start="61:17" pos:end="61:30"><name pos:start="61:17" pos:end="61:30">EXCP_INTERRUPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="149:5">else

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

    <block pos:start="67:5" pos:end="149:5">{<block_content pos:start="69:9" pos:end="147:9">

        <switch pos:start="69:9" pos:end="147:9">switch<condition pos:start="69:15" pos:end="69:24">(<expr pos:start="69:16" pos:end="69:23"><name pos:start="69:16" pos:end="69:23"><name pos:start="69:16" pos:end="69:16">s</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:23">state</name></name></expr>)</condition> <block pos:start="69:26" pos:end="147:9">{<block_content pos:start="71:9" pos:end="145:20">

        <case pos:start="71:9" pos:end="71:21">case <expr pos:start="71:14" pos:end="71:20"><name pos:start="71:14" pos:end="71:20">RS_IDLE</name></expr>:</case>

            <if_stmt pos:start="73:13" pos:end="79:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:26">(<expr pos:start="73:17" pos:end="73:25"><name pos:start="73:17" pos:end="73:18">ch</name> <operator pos:start="73:20" pos:end="73:21">==</operator> <literal type="char" pos:start="73:23" pos:end="73:25">'$'</literal></expr>)</condition> <block pos:start="73:28" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:38">

                <expr_stmt pos:start="75:17" pos:end="75:38"><expr pos:start="75:17" pos:end="75:37"><name pos:start="75:17" pos:end="75:33"><name pos:start="75:17" pos:end="75:17">s</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:33">line_buf_index</name></name> <operator pos:start="75:35" pos:end="75:35">=</operator> <literal type="number" pos:start="75:37" pos:end="75:37">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:38"><expr pos:start="77:17" pos:end="77:37"><name pos:start="77:17" pos:end="77:24"><name pos:start="77:17" pos:end="77:17">s</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:24">state</name></name> <operator pos:start="77:26" pos:end="77:26">=</operator> <name pos:start="77:28" pos:end="77:37">RS_GETLINE</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        <case pos:start="83:9" pos:end="83:24">case <expr pos:start="83:14" pos:end="83:23"><name pos:start="83:14" pos:end="83:23">RS_GETLINE</name></expr>:</case>

            <if_stmt pos:start="85:13" pos:end="97:13"><if pos:start="85:13" pos:end="89:13">if <condition pos:start="85:16" pos:end="85:26">(<expr pos:start="85:17" pos:end="85:25"><name pos:start="85:17" pos:end="85:18">ch</name> <operator pos:start="85:20" pos:end="85:21">==</operator> <literal type="char" pos:start="85:23" pos:end="85:25">'#'</literal></expr>)</condition> <block pos:start="85:28" pos:end="89:13">{<block_content pos:start="87:13" pos:end="87:34">

            <expr_stmt pos:start="87:13" pos:end="87:34"><expr pos:start="87:13" pos:end="87:33"><name pos:start="87:13" pos:end="87:20"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:20">state</name></name> <operator pos:start="87:22" pos:end="87:22">=</operator> <name pos:start="87:24" pos:end="87:33">RS_CHKSUM1</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="89:15" pos:end="93:13">else if <condition pos:start="89:23" pos:end="89:68">(<expr pos:start="89:24" pos:end="89:67"><name pos:start="89:24" pos:end="89:40"><name pos:start="89:24" pos:end="89:24">s</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:40">line_buf_index</name></name> <operator pos:start="89:42" pos:end="89:43">&gt;=</operator> <sizeof pos:start="89:45" pos:end="89:63">sizeof<argument_list pos:start="89:51" pos:end="89:63">(<argument pos:start="89:52" pos:end="89:62"><expr pos:start="89:52" pos:end="89:62"><name pos:start="89:52" pos:end="89:62"><name pos:start="89:52" pos:end="89:52">s</name><operator pos:start="89:53" pos:end="89:54">-&gt;</operator><name pos:start="89:55" pos:end="89:62">line_buf</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="89:65" pos:end="89:65">-</operator> <literal type="number" pos:start="89:67" pos:end="89:67">1</literal></expr>)</condition> <block pos:start="89:70" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:35">

                <expr_stmt pos:start="91:17" pos:end="91:35"><expr pos:start="91:17" pos:end="91:34"><name pos:start="91:17" pos:end="91:24"><name pos:start="91:17" pos:end="91:17">s</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:24">state</name></name> <operator pos:start="91:26" pos:end="91:26">=</operator> <name pos:start="91:28" pos:end="91:34">RS_IDLE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="93:15" pos:end="97:13">else <block pos:start="93:20" pos:end="97:13">{<block_content pos:start="95:13" pos:end="95:50">

            <expr_stmt pos:start="95:13" pos:end="95:50"><expr pos:start="95:13" pos:end="95:49"><name pos:start="95:13" pos:end="95:44"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:23">line_buf</name><index pos:start="95:24" pos:end="95:44">[<expr pos:start="95:25" pos:end="95:43"><name pos:start="95:25" pos:end="95:41"><name pos:start="95:25" pos:end="95:25">s</name><operator pos:start="95:26" pos:end="95:27">-&gt;</operator><name pos:start="95:28" pos:end="95:41">line_buf_index</name></name><operator pos:start="95:42" pos:end="95:43">++</operator></expr>]</index></name> <operator pos:start="95:46" pos:end="95:46">=</operator> <name pos:start="95:48" pos:end="95:49">ch</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        <case pos:start="101:9" pos:end="101:24">case <expr pos:start="101:14" pos:end="101:23"><name pos:start="101:14" pos:end="101:23">RS_CHKSUM1</name></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:50"><expr pos:start="103:13" pos:end="103:49"><name pos:start="103:13" pos:end="103:42"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:23">line_buf</name><index pos:start="103:24" pos:end="103:42">[<expr pos:start="103:25" pos:end="103:41"><name pos:start="103:25" pos:end="103:41"><name pos:start="103:25" pos:end="103:25">s</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:41">line_buf_index</name></name></expr>]</index></name> <operator pos:start="103:44" pos:end="103:44">=</operator> <literal type="char" pos:start="103:46" pos:end="103:49">'\0'</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:44"><expr pos:start="105:13" pos:end="105:43"><name pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:24">line_csum</name></name> <operator pos:start="105:26" pos:end="105:26">=</operator> <call pos:start="105:28" pos:end="105:38"><name pos:start="105:28" pos:end="105:34">fromhex</name><argument_list pos:start="105:35" pos:end="105:38">(<argument pos:start="105:36" pos:end="105:37"><expr pos:start="105:36" pos:end="105:37"><name pos:start="105:36" pos:end="105:37">ch</name></expr></argument>)</argument_list></call> <operator pos:start="105:40" pos:end="105:41">&lt;&lt;</operator> <literal type="number" pos:start="105:43" pos:end="105:43">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:34"><expr pos:start="107:13" pos:end="107:33"><name pos:start="107:13" pos:end="107:20"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:20">state</name></name> <operator pos:start="107:22" pos:end="107:22">=</operator> <name pos:start="107:24" pos:end="107:33">RS_CHKSUM2</name></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        <case pos:start="111:9" pos:end="111:24">case <expr pos:start="111:14" pos:end="111:23"><name pos:start="111:14" pos:end="111:23">RS_CHKSUM2</name></expr>:</case>

            <expr_stmt pos:start="113:13" pos:end="113:40"><expr pos:start="113:13" pos:end="113:39"><name pos:start="113:13" pos:end="113:24"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:24">line_csum</name></name> <operator pos:start="113:26" pos:end="113:27">|=</operator> <call pos:start="113:29" pos:end="113:39"><name pos:start="113:29" pos:end="113:35">fromhex</name><argument_list pos:start="113:36" pos:end="113:39">(<argument pos:start="113:37" pos:end="113:38"><expr pos:start="113:37" pos:end="113:38"><name pos:start="113:37" pos:end="113:38">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:21"><expr pos:start="115:13" pos:end="115:20"><name pos:start="115:13" pos:end="115:16">csum</name> <operator pos:start="115:18" pos:end="115:18">=</operator> <literal type="number" pos:start="115:20" pos:end="115:20">0</literal></expr>;</expr_stmt>

            <for pos:start="117:13" pos:end="121:13">for<control pos:start="117:16" pos:end="117:50">(<init pos:start="117:17" pos:end="117:22"><expr pos:start="117:17" pos:end="117:21"><name pos:start="117:17" pos:end="117:17">i</name> <operator pos:start="117:19" pos:end="117:19">=</operator> <literal type="number" pos:start="117:21" pos:end="117:21">0</literal></expr>;</init> <condition pos:start="117:24" pos:end="117:45"><expr pos:start="117:24" pos:end="117:44"><name pos:start="117:24" pos:end="117:24">i</name> <operator pos:start="117:26" pos:end="117:26">&lt;</operator> <name pos:start="117:28" pos:end="117:44"><name pos:start="117:28" pos:end="117:28">s</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:44">line_buf_index</name></name></expr>;</condition> <incr pos:start="117:47" pos:end="117:49"><expr pos:start="117:47" pos:end="117:49"><name pos:start="117:47" pos:end="117:47">i</name><operator pos:start="117:48" pos:end="117:49">++</operator></expr></incr>)</control> <block pos:start="117:52" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:39">

                <expr_stmt pos:start="119:17" pos:end="119:39"><expr pos:start="119:17" pos:end="119:38"><name pos:start="119:17" pos:end="119:20">csum</name> <operator pos:start="119:22" pos:end="119:23">+=</operator> <name pos:start="119:25" pos:end="119:38"><name pos:start="119:25" pos:end="119:25">s</name><operator pos:start="119:26" pos:end="119:27">-&gt;</operator><name pos:start="119:28" pos:end="119:35">line_buf</name><index pos:start="119:36" pos:end="119:38">[<expr pos:start="119:37" pos:end="119:37"><name pos:start="119:37" pos:end="119:37">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="123:13" pos:end="139:13"><if pos:start="123:13" pos:end="131:13">if <condition pos:start="123:16" pos:end="123:46">(<expr pos:start="123:17" pos:end="123:45"><name pos:start="123:17" pos:end="123:28"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:28">line_csum</name></name> <operator pos:start="123:30" pos:end="123:31">!=</operator> <operator pos:start="123:33" pos:end="123:33">(</operator><name pos:start="123:34" pos:end="123:37">csum</name> <operator pos:start="123:39" pos:end="123:39">&amp;</operator> <literal type="number" pos:start="123:41" pos:end="123:44">0xff</literal><operator pos:start="123:45" pos:end="123:45">)</operator></expr>)</condition> <block pos:start="123:48" pos:end="131:13">{<block_content pos:start="125:17" pos:end="129:35">

                <expr_stmt pos:start="125:17" pos:end="125:28"><expr pos:start="125:17" pos:end="125:27"><name pos:start="125:17" pos:end="125:21">reply</name> <operator pos:start="125:23" pos:end="125:23">=</operator> <literal type="char" pos:start="125:25" pos:end="125:27">'-'</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:41"><expr pos:start="127:17" pos:end="127:40"><call pos:start="127:17" pos:end="127:40"><name pos:start="127:17" pos:end="127:26">put_buffer</name><argument_list pos:start="127:27" pos:end="127:40">(<argument pos:start="127:28" pos:end="127:28"><expr pos:start="127:28" pos:end="127:28"><name pos:start="127:28" pos:end="127:28">s</name></expr></argument>, <argument pos:start="127:31" pos:end="127:36"><expr pos:start="127:31" pos:end="127:36"><operator pos:start="127:31" pos:end="127:31">&amp;</operator><name pos:start="127:32" pos:end="127:36">reply</name></expr></argument>, <argument pos:start="127:39" pos:end="127:39"><expr pos:start="127:39" pos:end="127:39"><literal type="number" pos:start="127:39" pos:end="127:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:35"><expr pos:start="129:17" pos:end="129:34"><name pos:start="129:17" pos:end="129:24"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:24">state</name></name> <operator pos:start="129:26" pos:end="129:26">=</operator> <name pos:start="129:28" pos:end="129:34">RS_IDLE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="131:15" pos:end="139:13">else <block pos:start="131:20" pos:end="139:13">{<block_content pos:start="133:17" pos:end="137:66">

                <expr_stmt pos:start="133:17" pos:end="133:28"><expr pos:start="133:17" pos:end="133:27"><name pos:start="133:17" pos:end="133:21">reply</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <literal type="char" pos:start="133:25" pos:end="133:27">'+'</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:41"><expr pos:start="135:17" pos:end="135:40"><call pos:start="135:17" pos:end="135:40"><name pos:start="135:17" pos:end="135:26">put_buffer</name><argument_list pos:start="135:27" pos:end="135:40">(<argument pos:start="135:28" pos:end="135:28"><expr pos:start="135:28" pos:end="135:28"><name pos:start="135:28" pos:end="135:28">s</name></expr></argument>, <argument pos:start="135:31" pos:end="135:36"><expr pos:start="135:31" pos:end="135:36"><operator pos:start="135:31" pos:end="135:31">&amp;</operator><name pos:start="135:32" pos:end="135:36">reply</name></expr></argument>, <argument pos:start="135:39" pos:end="135:39"><expr pos:start="135:39" pos:end="135:39"><literal type="number" pos:start="135:39" pos:end="135:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:66"><expr pos:start="137:17" pos:end="137:65"><name pos:start="137:17" pos:end="137:24"><name pos:start="137:17" pos:end="137:17">s</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:24">state</name></name> <operator pos:start="137:26" pos:end="137:26">=</operator> <call pos:start="137:28" pos:end="137:65"><name pos:start="137:28" pos:end="137:44">gdb_handle_packet</name><argument_list pos:start="137:45" pos:end="137:65">(<argument pos:start="137:46" pos:end="137:46"><expr pos:start="137:46" pos:end="137:46"><name pos:start="137:46" pos:end="137:46">s</name></expr></argument>, <argument pos:start="137:49" pos:end="137:51"><expr pos:start="137:49" pos:end="137:51"><name pos:start="137:49" pos:end="137:51">env</name></expr></argument>, <argument pos:start="137:54" pos:end="137:64"><expr pos:start="137:54" pos:end="137:64"><name pos:start="137:54" pos:end="137:64"><name pos:start="137:54" pos:end="137:54">s</name><operator pos:start="137:55" pos:end="137:56">-&gt;</operator><name pos:start="137:57" pos:end="137:64">line_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="141:13" pos:end="141:18">break;</break>

        <default pos:start="143:9" pos:end="143:16">default:</default>

            <expr_stmt pos:start="145:13" pos:end="145:20"><expr pos:start="145:13" pos:end="145:19"><call pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:17">abort</name><argument_list pos:start="145:18" pos:end="145:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
