<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16866.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:56"><name pos:start="1:1" pos:end="1:10">lqspi_read</name><argument_list pos:start="1:11" pos:end="1:56">(<argument pos:start="1:12" pos:end="1:23">void *opaque</argument>, <argument pos:start="1:26" pos:end="1:36">hwaddr addr</argument>, <argument pos:start="1:39" pos:end="1:55">unsigned int size</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="5:5" pos:end="133:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">XilinxQSPIPS</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">q</name> <init pos:start="7:21" pos:end="7:28">= <expr pos:start="7:23" pos:end="7:28"><name pos:start="7:23" pos:end="7:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">XilinxSPIPS</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name> <init pos:start="9:20" pos:end="9:27">= <expr pos:start="9:22" pos:end="9:27"><name pos:start="9:22" pos:end="9:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="133:5"><if pos:start="15:5" pos:end="25:5">if <condition pos:start="15:8" pos:end="17:64">(<expr pos:start="15:9" pos:end="17:63"><name pos:start="15:9" pos:end="15:12">addr</name> <operator pos:start="15:14" pos:end="15:15">&gt;=</operator> <name pos:start="15:17" pos:end="15:36"><name pos:start="15:17" pos:end="15:17">q</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:36">lqspi_cached_addr</name></name> <operator pos:start="15:38" pos:end="15:39">&amp;&amp;</operator>

            <name pos:start="17:13" pos:end="17:16">addr</name> <operator pos:start="17:18" pos:end="17:19">&lt;=</operator> <name pos:start="17:21" pos:end="17:40"><name pos:start="17:21" pos:end="17:21">q</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:40">lqspi_cached_addr</name></name> <operator pos:start="17:42" pos:end="17:42">+</operator> <name pos:start="17:44" pos:end="17:59">LQSPI_CACHE_SIZE</name> <operator pos:start="17:61" pos:end="17:61">-</operator> <literal type="number" pos:start="17:63" pos:end="17:63">4</literal></expr>)</condition> <block pos:start="17:66" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:19">

        <expr_stmt pos:start="19:9" pos:end="19:63"><expr pos:start="19:9" pos:end="19:62"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:62"><name pos:start="19:15" pos:end="19:15">q</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:26">lqspi_buf</name><index pos:start="19:27" pos:end="19:62">[<expr pos:start="19:28" pos:end="19:61"><operator pos:start="19:28" pos:end="19:28">(</operator><name pos:start="19:29" pos:end="19:32">addr</name> <operator pos:start="19:34" pos:end="19:34">-</operator> <name pos:start="19:36" pos:end="19:55"><name pos:start="19:36" pos:end="19:36">q</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:55">lqspi_cached_addr</name></name><operator pos:start="19:56" pos:end="19:56">)</operator> <operator pos:start="19:58" pos:end="19:59">&gt;&gt;</operator> <literal type="number" pos:start="19:61" pos:end="19:61">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:76"><expr pos:start="21:9" pos:end="21:75"><call pos:start="21:9" pos:end="21:75"><name pos:start="21:9" pos:end="21:16">DB_PRINT</name><argument_list pos:start="21:17" pos:end="21:75">(<argument pos:start="21:18" pos:end="21:43"><expr pos:start="21:18" pos:end="21:43"><literal type="string" pos:start="21:18" pos:end="21:43">"addr: %08x, data: %08x\n"</literal></expr></argument>, <argument pos:start="21:46" pos:end="21:59"><expr pos:start="21:46" pos:end="21:59"><operator pos:start="21:46" pos:end="21:46">(</operator><name pos:start="21:47" pos:end="21:54">unsigned</name><operator pos:start="21:55" pos:end="21:55">)</operator><name pos:start="21:56" pos:end="21:59">addr</name></expr></argument>, <argument pos:start="21:62" pos:end="21:74"><expr pos:start="21:62" pos:end="21:74"><operator pos:start="21:62" pos:end="21:62">(</operator><name pos:start="21:63" pos:end="21:70">unsigned</name><operator pos:start="21:71" pos:end="21:71">)</operator><name pos:start="21:72" pos:end="21:74">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:19">return <expr pos:start="23:16" pos:end="23:18"><name pos:start="23:16" pos:end="23:18">ret</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="133:5">else <block pos:start="25:12" pos:end="133:5">{<block_content pos:start="27:9" pos:end="131:46">

        <decl_stmt pos:start="27:9" pos:end="27:58"><decl pos:start="27:9" pos:end="27:57"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:22">flash_addr</name> <init pos:start="27:24" pos:end="27:57">= <expr pos:start="27:26" pos:end="27:57"><operator pos:start="27:26" pos:end="27:26">(</operator><name pos:start="27:27" pos:end="27:30">addr</name> <operator pos:start="27:32" pos:end="27:32">/</operator> <call pos:start="27:34" pos:end="27:56"><name pos:start="27:34" pos:end="27:53">num_effective_busses</name><argument_list pos:start="27:54" pos:end="27:56">(<argument pos:start="27:55" pos:end="27:55"><expr pos:start="27:55" pos:end="27:55"><name pos:start="27:55" pos:end="27:55">s</name></expr></argument>)</argument_list></call><operator pos:start="27:57" pos:end="27:57">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:53"><decl pos:start="29:9" pos:end="29:52"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:17">slave</name> <init pos:start="29:19" pos:end="29:52">= <expr pos:start="29:21" pos:end="29:52"><name pos:start="29:21" pos:end="29:30">flash_addr</name> <operator pos:start="29:32" pos:end="29:33">&gt;&gt;</operator> <name pos:start="29:35" pos:end="29:52">LQSPI_ADDRESS_BITS</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:28"><decl pos:start="31:9" pos:end="31:27"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:23">cache_entry</name> <init pos:start="31:25" pos:end="31:27">= <expr pos:start="31:27" pos:end="31:27"><literal type="number" pos:start="31:27" pos:end="31:27">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:68"><expr pos:start="35:9" pos:end="35:67"><call pos:start="35:9" pos:end="35:67"><name pos:start="35:9" pos:end="35:16">DB_PRINT</name><argument_list pos:start="35:17" pos:end="35:67">(<argument pos:start="35:18" pos:end="35:44"><expr pos:start="35:18" pos:end="35:44"><literal type="string" pos:start="35:18" pos:end="35:44">"config reg status: %08x\n"</literal></expr></argument>, <argument pos:start="35:47" pos:end="35:66"><expr pos:start="35:47" pos:end="35:66"><name pos:start="35:47" pos:end="35:66"><name pos:start="35:47" pos:end="35:47">s</name><operator pos:start="35:48" pos:end="35:49">-&gt;</operator><name pos:start="35:50" pos:end="35:53">regs</name><index pos:start="35:54" pos:end="35:66">[<expr pos:start="35:55" pos:end="35:65"><name pos:start="35:55" pos:end="35:65">R_LQSPI_CFG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><call pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:19">fifo8_reset</name><argument_list pos:start="39:20" pos:end="39:32">(<argument pos:start="39:21" pos:end="39:31"><expr pos:start="39:21" pos:end="39:31"><operator pos:start="39:21" pos:end="39:21">&amp;</operator><name pos:start="39:22" pos:end="39:31"><name pos:start="39:22" pos:end="39:22">s</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:31">tx_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><call pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:19">fifo8_reset</name><argument_list pos:start="41:20" pos:end="41:32">(<argument pos:start="41:21" pos:end="41:31"><expr pos:start="41:21" pos:end="41:31"><operator pos:start="41:21" pos:end="41:21">&amp;</operator><name pos:start="41:22" pos:end="41:31"><name pos:start="41:22" pos:end="41:22">s</name><operator pos:start="41:23" pos:end="41:24">-&gt;</operator><name pos:start="41:25" pos:end="41:31">rx_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:33"><expr pos:start="45:9" pos:end="45:32"><name pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:15">regs</name><index pos:start="45:16" pos:end="45:25">[<expr pos:start="45:17" pos:end="45:24"><name pos:start="45:17" pos:end="45:24">R_CONFIG</name></expr>]</index></name> <operator pos:start="45:27" pos:end="45:28">&amp;=</operator> <operator pos:start="45:30" pos:end="45:30">~</operator><name pos:start="45:31" pos:end="45:32">CS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:76"><expr pos:start="47:9" pos:end="47:75"><name pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:15">regs</name><index pos:start="47:16" pos:end="47:25">[<expr pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:24">R_CONFIG</name></expr>]</index></name> <operator pos:start="47:27" pos:end="47:28">|=</operator> <operator pos:start="47:30" pos:end="47:30">(</operator><operator pos:start="47:31" pos:end="47:31">(</operator><operator pos:start="47:32" pos:end="47:32">~</operator><operator pos:start="47:33" pos:end="47:33">(</operator><literal type="number" pos:start="47:34" pos:end="47:34">1</literal> <operator pos:start="47:36" pos:end="47:37">&lt;&lt;</operator> <name pos:start="47:39" pos:end="47:43">slave</name><operator pos:start="47:44" pos:end="47:44">)</operator> <operator pos:start="47:46" pos:end="47:47">&lt;&lt;</operator> <name pos:start="47:49" pos:end="47:56">CS_SHIFT</name><operator pos:start="47:57" pos:end="47:57">)</operator> <operator pos:start="47:59" pos:end="47:59">&amp;</operator> <name pos:start="47:61" pos:end="47:62">CS</name><operator pos:start="47:63" pos:end="47:63">)</operator> <operator pos:start="47:65" pos:end="47:65">|</operator> <name pos:start="47:67" pos:end="47:75">MANUAL_CS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><call pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:36">xilinx_spips_update_cs_lines</name><argument_list pos:start="49:37" pos:end="49:39">(<argument pos:start="49:38" pos:end="49:38"><expr pos:start="49:38" pos:end="49:38"><name pos:start="49:38" pos:end="49:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="53:9" pos:end="53:25">/* instruction */</comment>

        <expr_stmt pos:start="55:9" pos:end="57:72"><expr pos:start="55:9" pos:end="57:71"><call pos:start="55:9" pos:end="57:71"><name pos:start="55:9" pos:end="55:16">DB_PRINT</name><argument_list pos:start="55:17" pos:end="57:71">(<argument pos:start="55:18" pos:end="55:51"><expr pos:start="55:18" pos:end="55:51"><literal type="string" pos:start="55:18" pos:end="55:51">"pushing read instruction: %02x\n"</literal></expr></argument>,

                 <argument pos:start="57:18" pos:end="57:70"><expr pos:start="57:18" pos:end="57:70"><operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:25">uint8_t</name><operator pos:start="57:26" pos:end="57:26">)</operator><operator pos:start="57:27" pos:end="57:27">(</operator><name pos:start="57:28" pos:end="57:47"><name pos:start="57:28" pos:end="57:28">s</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:34">regs</name><index pos:start="57:35" pos:end="57:47">[<expr pos:start="57:36" pos:end="57:46"><name pos:start="57:36" pos:end="57:46">R_LQSPI_CFG</name></expr>]</index></name> <operator pos:start="57:49" pos:end="57:49">&amp;</operator> <name pos:start="57:51" pos:end="57:69">LQSPI_CFG_INST_CODE</name><operator pos:start="57:70" pos:end="57:70">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:76"><expr pos:start="59:9" pos:end="59:75"><call pos:start="59:9" pos:end="59:75"><name pos:start="59:9" pos:end="59:18">fifo8_push</name><argument_list pos:start="59:19" pos:end="59:75">(<argument pos:start="59:20" pos:end="59:30"><expr pos:start="59:20" pos:end="59:30"><operator pos:start="59:20" pos:end="59:20">&amp;</operator><name pos:start="59:21" pos:end="59:30"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:30">tx_fifo</name></name></expr></argument>, <argument pos:start="59:33" pos:end="59:74"><expr pos:start="59:33" pos:end="59:74"><name pos:start="59:33" pos:end="59:52"><name pos:start="59:33" pos:end="59:33">s</name><operator pos:start="59:34" pos:end="59:35">-&gt;</operator><name pos:start="59:36" pos:end="59:39">regs</name><index pos:start="59:40" pos:end="59:52">[<expr pos:start="59:41" pos:end="59:51"><name pos:start="59:41" pos:end="59:51">R_LQSPI_CFG</name></expr>]</index></name> <operator pos:start="59:54" pos:end="59:54">&amp;</operator> <name pos:start="59:56" pos:end="59:74">LQSPI_CFG_INST_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="61:9" pos:end="61:26">/* read address */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:60"><expr pos:start="63:9" pos:end="63:59"><call pos:start="63:9" pos:end="63:59"><name pos:start="63:9" pos:end="63:16">DB_PRINT</name><argument_list pos:start="63:17" pos:end="63:59">(<argument pos:start="63:18" pos:end="63:46"><expr pos:start="63:18" pos:end="63:46"><literal type="string" pos:start="63:18" pos:end="63:46">"pushing read address %06x\n"</literal></expr></argument>, <argument pos:start="63:49" pos:end="63:58"><expr pos:start="63:49" pos:end="63:58"><name pos:start="63:49" pos:end="63:58">flash_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:61"><expr pos:start="65:9" pos:end="65:60"><call pos:start="65:9" pos:end="65:60"><name pos:start="65:9" pos:end="65:18">fifo8_push</name><argument_list pos:start="65:19" pos:end="65:60">(<argument pos:start="65:20" pos:end="65:30"><expr pos:start="65:20" pos:end="65:30"><operator pos:start="65:20" pos:end="65:20">&amp;</operator><name pos:start="65:21" pos:end="65:30"><name pos:start="65:21" pos:end="65:21">s</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:30">tx_fifo</name></name></expr></argument>, <argument pos:start="65:33" pos:end="65:59"><expr pos:start="65:33" pos:end="65:59"><operator pos:start="65:33" pos:end="65:33">(</operator><name pos:start="65:34" pos:end="65:40">uint8_t</name><operator pos:start="65:41" pos:end="65:41">)</operator><operator pos:start="65:42" pos:end="65:42">(</operator><name pos:start="65:43" pos:end="65:52">flash_addr</name> <operator pos:start="65:54" pos:end="65:55">&gt;&gt;</operator> <literal type="number" pos:start="65:57" pos:end="65:58">16</literal><operator pos:start="65:59" pos:end="65:59">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:60"><expr pos:start="67:9" pos:end="67:59"><call pos:start="67:9" pos:end="67:59"><name pos:start="67:9" pos:end="67:18">fifo8_push</name><argument_list pos:start="67:19" pos:end="67:59">(<argument pos:start="67:20" pos:end="67:30"><expr pos:start="67:20" pos:end="67:30"><operator pos:start="67:20" pos:end="67:20">&amp;</operator><name pos:start="67:21" pos:end="67:30"><name pos:start="67:21" pos:end="67:21">s</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:30">tx_fifo</name></name></expr></argument>, <argument pos:start="67:33" pos:end="67:58"><expr pos:start="67:33" pos:end="67:58"><operator pos:start="67:33" pos:end="67:33">(</operator><name pos:start="67:34" pos:end="67:40">uint8_t</name><operator pos:start="67:41" pos:end="67:41">)</operator><operator pos:start="67:42" pos:end="67:42">(</operator><name pos:start="67:43" pos:end="67:52">flash_addr</name> <operator pos:start="67:54" pos:end="67:55">&gt;&gt;</operator> <literal type="number" pos:start="67:57" pos:end="67:57">8</literal><operator pos:start="67:58" pos:end="67:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:53"><expr pos:start="69:9" pos:end="69:52"><call pos:start="69:9" pos:end="69:52"><name pos:start="69:9" pos:end="69:18">fifo8_push</name><argument_list pos:start="69:19" pos:end="69:52">(<argument pos:start="69:20" pos:end="69:30"><expr pos:start="69:20" pos:end="69:30"><operator pos:start="69:20" pos:end="69:20">&amp;</operator><name pos:start="69:21" pos:end="69:30"><name pos:start="69:21" pos:end="69:21">s</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:30">tx_fifo</name></name></expr></argument>, <argument pos:start="69:33" pos:end="69:51"><expr pos:start="69:33" pos:end="69:51"><operator pos:start="69:33" pos:end="69:33">(</operator><name pos:start="69:34" pos:end="69:40">uint8_t</name><operator pos:start="69:41" pos:end="69:41">)</operator><name pos:start="69:42" pos:end="69:51">flash_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="71:9" pos:end="71:23">/* mode bits */</comment>

        <if_stmt pos:start="73:9" pos:end="81:9"><if pos:start="73:9" pos:end="81:9">if <condition pos:start="73:12" pos:end="73:53">(<expr pos:start="73:13" pos:end="73:52"><name pos:start="73:13" pos:end="73:32"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:19">regs</name><index pos:start="73:20" pos:end="73:32">[<expr pos:start="73:21" pos:end="73:31"><name pos:start="73:21" pos:end="73:31">R_LQSPI_CFG</name></expr>]</index></name> <operator pos:start="73:34" pos:end="73:34">&amp;</operator> <name pos:start="73:36" pos:end="73:52">LQSPI_CFG_MODE_EN</name></expr>)</condition> <block pos:start="73:55" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:69">

            <expr_stmt pos:start="75:13" pos:end="79:69"><expr pos:start="75:13" pos:end="79:68"><call pos:start="75:13" pos:end="79:68"><name pos:start="75:13" pos:end="75:22">fifo8_push</name><argument_list pos:start="75:23" pos:end="79:68">(<argument pos:start="75:24" pos:end="75:34"><expr pos:start="75:24" pos:end="75:34"><operator pos:start="75:24" pos:end="75:24">&amp;</operator><name pos:start="75:25" pos:end="75:34"><name pos:start="75:25" pos:end="75:25">s</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:34">tx_fifo</name></name></expr></argument>, <argument pos:start="75:37" pos:end="79:67"><expr pos:start="75:37" pos:end="79:67"><call pos:start="75:37" pos:end="79:67"><name pos:start="75:37" pos:end="75:45">extract32</name><argument_list pos:start="75:46" pos:end="79:67">(<argument pos:start="75:47" pos:end="75:66"><expr pos:start="75:47" pos:end="75:66"><name pos:start="75:47" pos:end="75:66"><name pos:start="75:47" pos:end="75:47">s</name><operator pos:start="75:48" pos:end="75:49">-&gt;</operator><name pos:start="75:50" pos:end="75:53">regs</name><index pos:start="75:54" pos:end="75:66">[<expr pos:start="75:55" pos:end="75:65"><name pos:start="75:55" pos:end="75:65">R_LQSPI_CFG</name></expr>]</index></name></expr></argument>,

                                              <argument pos:start="77:47" pos:end="77:66"><expr pos:start="77:47" pos:end="77:66"><name pos:start="77:47" pos:end="77:66">LQSPI_CFG_MODE_SHIFT</name></expr></argument>,

                                              <argument pos:start="79:47" pos:end="79:66"><expr pos:start="79:47" pos:end="79:66"><name pos:start="79:47" pos:end="79:66">LQSPI_CFG_MODE_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="83:9" pos:end="83:25">/* dummy bytes */</comment>

        <for pos:start="85:9" pos:end="93:9">for <control pos:start="85:13" pos:end="87:64">(<init pos:start="85:14" pos:end="85:19"><expr pos:start="85:14" pos:end="85:18"><name pos:start="85:14" pos:end="85:14">i</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>;</init> <condition pos:start="85:21" pos:end="87:59"><expr pos:start="85:21" pos:end="87:58"><name pos:start="85:21" pos:end="85:21">i</name> <operator pos:start="85:23" pos:end="85:23">&lt;</operator> <operator pos:start="85:25" pos:end="85:25">(</operator><call pos:start="85:26" pos:end="87:57"><name pos:start="85:26" pos:end="85:34">extract32</name><argument_list pos:start="85:35" pos:end="87:57">(<argument pos:start="85:36" pos:end="85:55"><expr pos:start="85:36" pos:end="85:55"><name pos:start="85:36" pos:end="85:55"><name pos:start="85:36" pos:end="85:36">s</name><operator pos:start="85:37" pos:end="85:38">-&gt;</operator><name pos:start="85:39" pos:end="85:42">regs</name><index pos:start="85:43" pos:end="85:55">[<expr pos:start="85:44" pos:end="85:54"><name pos:start="85:44" pos:end="85:54">R_LQSPI_CFG</name></expr>]</index></name></expr></argument>, <argument pos:start="85:58" pos:end="85:78"><expr pos:start="85:58" pos:end="85:78"><name pos:start="85:58" pos:end="85:78">LQSPI_CFG_DUMMY_SHIFT</name></expr></argument>,

                                   <argument pos:start="87:36" pos:end="87:56"><expr pos:start="87:36" pos:end="87:56"><name pos:start="87:36" pos:end="87:56">LQSPI_CFG_DUMMY_WIDTH</name></expr></argument>)</argument_list></call><operator pos:start="87:58" pos:end="87:58">)</operator></expr>;</condition> <incr pos:start="87:61" pos:end="87:63"><expr pos:start="87:61" pos:end="87:63"><operator pos:start="87:61" pos:end="87:62">++</operator><name pos:start="87:63" pos:end="87:63">i</name></expr></incr>)</control> <block pos:start="87:66" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:39">

            <expr_stmt pos:start="89:13" pos:end="89:45"><expr pos:start="89:13" pos:end="89:44"><call pos:start="89:13" pos:end="89:44"><name pos:start="89:13" pos:end="89:20">DB_PRINT</name><argument_list pos:start="89:21" pos:end="89:44">(<argument pos:start="89:22" pos:end="89:43"><expr pos:start="89:22" pos:end="89:43"><literal type="string" pos:start="89:22" pos:end="89:43">"pushing dummy byte\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:39"><expr pos:start="91:13" pos:end="91:38"><call pos:start="91:13" pos:end="91:38"><name pos:start="91:13" pos:end="91:22">fifo8_push</name><argument_list pos:start="91:23" pos:end="91:38">(<argument pos:start="91:24" pos:end="91:34"><expr pos:start="91:24" pos:end="91:34"><operator pos:start="91:24" pos:end="91:24">&amp;</operator><name pos:start="91:25" pos:end="91:34"><name pos:start="91:25" pos:end="91:25">s</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:34">tx_fifo</name></name></expr></argument>, <argument pos:start="91:37" pos:end="91:37"><expr pos:start="91:37" pos:end="91:37"><literal type="number" pos:start="91:37" pos:end="91:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="95:9" pos:end="95:40"><expr pos:start="95:9" pos:end="95:39"><call pos:start="95:9" pos:end="95:39"><name pos:start="95:9" pos:end="95:36">xilinx_spips_update_cs_lines</name><argument_list pos:start="95:37" pos:end="95:39">(<argument pos:start="95:38" pos:end="95:38"><expr pos:start="95:38" pos:end="95:38"><name pos:start="95:38" pos:end="95:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:37"><expr pos:start="97:9" pos:end="97:36"><call pos:start="97:9" pos:end="97:36"><name pos:start="97:9" pos:end="97:33">xilinx_spips_flush_txfifo</name><argument_list pos:start="97:34" pos:end="97:36">(<argument pos:start="97:35" pos:end="97:35"><expr pos:start="97:35" pos:end="97:35"><name pos:start="97:35" pos:end="97:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:33"><expr pos:start="99:9" pos:end="99:32"><call pos:start="99:9" pos:end="99:32"><name pos:start="99:9" pos:end="99:19">fifo8_reset</name><argument_list pos:start="99:20" pos:end="99:32">(<argument pos:start="99:21" pos:end="99:31"><expr pos:start="99:21" pos:end="99:31"><operator pos:start="99:21" pos:end="99:21">&amp;</operator><name pos:start="99:22" pos:end="99:31"><name pos:start="99:22" pos:end="99:22">s</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:31">rx_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:46"><expr pos:start="103:9" pos:end="103:45"><call pos:start="103:9" pos:end="103:45"><name pos:start="103:9" pos:end="103:16">DB_PRINT</name><argument_list pos:start="103:17" pos:end="103:45">(<argument pos:start="103:18" pos:end="103:44"><expr pos:start="103:18" pos:end="103:44"><literal type="string" pos:start="103:18" pos:end="103:44">"starting QSPI data read\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="107:9" pos:end="117:9">for <control pos:start="107:13" pos:end="107:50">(<init pos:start="107:14" pos:end="107:19"><expr pos:start="107:14" pos:end="107:18"><name pos:start="107:14" pos:end="107:14">i</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <literal type="number" pos:start="107:18" pos:end="107:18">0</literal></expr>;</init> <condition pos:start="107:21" pos:end="107:45"><expr pos:start="107:21" pos:end="107:44"><name pos:start="107:21" pos:end="107:21">i</name> <operator pos:start="107:23" pos:end="107:23">&lt;</operator> <name pos:start="107:25" pos:end="107:40">LQSPI_CACHE_SIZE</name> <operator pos:start="107:42" pos:end="107:42">/</operator> <literal type="number" pos:start="107:44" pos:end="107:44">4</literal></expr>;</condition> <incr pos:start="107:47" pos:end="107:49"><expr pos:start="107:47" pos:end="107:49"><operator pos:start="107:47" pos:end="107:48">++</operator><name pos:start="107:49" pos:end="107:49">i</name></expr></incr>)</control> <block pos:start="107:52" pos:end="117:9">{<block_content pos:start="109:13" pos:end="115:26">

            <expr_stmt pos:start="109:13" pos:end="109:35"><expr pos:start="109:13" pos:end="109:34"><call pos:start="109:13" pos:end="109:34"><name pos:start="109:13" pos:end="109:25">tx_data_bytes</name><argument_list pos:start="109:26" pos:end="109:34">(<argument pos:start="109:27" pos:end="109:27"><expr pos:start="109:27" pos:end="109:27"><name pos:start="109:27" pos:end="109:27">s</name></expr></argument>, <argument pos:start="109:30" pos:end="109:30"><expr pos:start="109:30" pos:end="109:30"><literal type="number" pos:start="109:30" pos:end="109:30">0</literal></expr></argument>, <argument pos:start="109:33" pos:end="109:33"><expr pos:start="109:33" pos:end="109:33"><literal type="number" pos:start="109:33" pos:end="109:33">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:41"><expr pos:start="111:13" pos:end="111:40"><call pos:start="111:13" pos:end="111:40"><name pos:start="111:13" pos:end="111:37">xilinx_spips_flush_txfifo</name><argument_list pos:start="111:38" pos:end="111:40">(<argument pos:start="111:39" pos:end="111:39"><expr pos:start="111:39" pos:end="111:39"><name pos:start="111:39" pos:end="111:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:60"><expr pos:start="113:13" pos:end="113:59"><call pos:start="113:13" pos:end="113:59"><name pos:start="113:13" pos:end="113:25">rx_data_bytes</name><argument_list pos:start="113:26" pos:end="113:59">(<argument pos:start="113:27" pos:end="113:27"><expr pos:start="113:27" pos:end="113:27"><name pos:start="113:27" pos:end="113:27">s</name></expr></argument>, <argument pos:start="113:30" pos:end="113:55"><expr pos:start="113:30" pos:end="113:55"><operator pos:start="113:30" pos:end="113:30">&amp;</operator><name pos:start="113:31" pos:end="113:55"><name pos:start="113:31" pos:end="113:31">q</name><operator pos:start="113:32" pos:end="113:33">-&gt;</operator><name pos:start="113:34" pos:end="113:42">lqspi_buf</name><index pos:start="113:43" pos:end="113:55">[<expr pos:start="113:44" pos:end="113:54"><name pos:start="113:44" pos:end="113:54">cache_entry</name></expr>]</index></name></expr></argument>, <argument pos:start="113:58" pos:end="113:58"><expr pos:start="113:58" pos:end="113:58"><literal type="number" pos:start="113:58" pos:end="113:58">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:26"><expr pos:start="115:13" pos:end="115:25"><name pos:start="115:13" pos:end="115:23">cache_entry</name><operator pos:start="115:24" pos:end="115:25">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="119:9" pos:end="119:40"><expr pos:start="119:9" pos:end="119:39"><call pos:start="119:9" pos:end="119:39"><name pos:start="119:9" pos:end="119:36">xilinx_spips_update_cs_lines</name><argument_list pos:start="119:37" pos:end="119:39">(<argument pos:start="119:38" pos:end="119:38"><expr pos:start="119:38" pos:end="119:38"><name pos:start="119:38" pos:end="119:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="123:9" pos:end="123:32"><expr pos:start="123:9" pos:end="123:31"><name pos:start="123:9" pos:end="123:25"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:15">regs</name><index pos:start="123:16" pos:end="123:25">[<expr pos:start="123:17" pos:end="123:24"><name pos:start="123:17" pos:end="123:24">R_CONFIG</name></expr>]</index></name> <operator pos:start="123:27" pos:end="123:28">|=</operator> <name pos:start="123:30" pos:end="123:31">CS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:40"><expr pos:start="125:9" pos:end="125:39"><call pos:start="125:9" pos:end="125:39"><name pos:start="125:9" pos:end="125:36">xilinx_spips_update_cs_lines</name><argument_list pos:start="125:37" pos:end="125:39">(<argument pos:start="125:38" pos:end="125:38"><expr pos:start="125:38" pos:end="125:38"><name pos:start="125:38" pos:end="125:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:36"><expr pos:start="129:9" pos:end="129:35"><name pos:start="129:9" pos:end="129:28"><name pos:start="129:9" pos:end="129:9">q</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:28">lqspi_cached_addr</name></name> <operator pos:start="129:30" pos:end="129:30">=</operator> <name pos:start="129:32" pos:end="129:35">addr</name></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:46">return <expr pos:start="131:16" pos:end="131:45"><call pos:start="131:16" pos:end="131:45"><name pos:start="131:16" pos:end="131:25">lqspi_read</name><argument_list pos:start="131:26" pos:end="131:45">(<argument pos:start="131:27" pos:end="131:32"><expr pos:start="131:27" pos:end="131:32"><name pos:start="131:27" pos:end="131:32">opaque</name></expr></argument>, <argument pos:start="131:35" pos:end="131:38"><expr pos:start="131:35" pos:end="131:38"><name pos:start="131:35" pos:end="131:38">addr</name></expr></argument>, <argument pos:start="131:41" pos:end="131:44"><expr pos:start="131:41" pos:end="131:44"><name pos:start="131:41" pos:end="131:44">size</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block>
</unit>
