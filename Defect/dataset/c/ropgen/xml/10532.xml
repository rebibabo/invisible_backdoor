<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10532.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:21"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19"><name pos:start="1:8" pos:end="1:13">struct</name> <name pos:start="1:15" pos:end="1:19">iovec</name></name> <modifier pos:start="1:21" pos:end="1:21">*</modifier></type><name pos:start="1:22" pos:end="1:31">lock_iovec</name><parameter_list pos:start="1:32" pos:end="3:52">(<parameter pos:start="1:33" pos:end="1:40"><decl pos:start="1:33" pos:end="1:40"><type pos:start="1:33" pos:end="1:40"><name pos:start="1:33" pos:end="1:35">int</name></type> <name pos:start="1:37" pos:end="1:40">type</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:63"><decl pos:start="1:43" pos:end="1:63"><type pos:start="1:43" pos:end="1:63"><name pos:start="1:43" pos:end="1:51">abi_ulong</name></type> <name pos:start="1:53" pos:end="1:63">target_addr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:41"><decl pos:start="3:33" pos:end="3:41"><type pos:start="3:33" pos:end="3:41"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:41">count</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:51"><decl pos:start="3:44" pos:end="3:51"><type pos:start="3:44" pos:end="3:51"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:51">copy</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:16">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:23">target_iovec</name></name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:35">target_vec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:16">iovec</name></name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">vec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">abi_ulong</name></type> <name pos:start="11:15" pos:end="11:23">total_len</name></decl>, <decl pos:start="11:26" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:13"/><name pos:start="11:26" pos:end="11:32">max_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">err</name> <init pos:start="15:13" pos:end="15:15">= <expr pos:start="15:15" pos:end="15:15"><literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:19">(<expr pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:13">count</name> <operator pos:start="19:15" pos:end="19:16">==</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>)</condition> <block pos:start="19:21" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:20">

        <expr_stmt pos:start="21:9" pos:end="21:18"><expr pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:13">errno</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:20">return <expr pos:start="23:16" pos:end="23:19"><name pos:start="23:16" pos:end="23:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:37">(<expr pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:13">count</name> <argument_list type="generic" pos:start="27:15" pos:end="27:28">&lt; <argument pos:start="27:17" pos:end="27:26"><expr pos:start="27:17" pos:end="27:26"><literal type="number" pos:start="27:17" pos:end="27:17">0</literal> <operator pos:start="27:19" pos:end="27:20">||</operator> <name pos:start="27:22" pos:end="27:26">count</name></expr></argument> &gt;</argument_list></name> <name pos:start="27:30" pos:end="27:36">IOV_MAX</name></expr>)</condition> <block pos:start="27:39" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:20">

        <expr_stmt pos:start="29:9" pos:end="29:23"><expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:13">errno</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:20">return <expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:46"><expr pos:start="37:5" pos:end="37:45"><name pos:start="37:5" pos:end="37:7">vec</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:45"><name pos:start="37:11" pos:end="37:16">calloc</name><argument_list pos:start="37:17" pos:end="37:45">(<argument pos:start="37:18" pos:end="37:22"><expr pos:start="37:18" pos:end="37:22"><name pos:start="37:18" pos:end="37:22">count</name></expr></argument>, <argument pos:start="37:25" pos:end="37:44"><expr pos:start="37:25" pos:end="37:44"><sizeof pos:start="37:25" pos:end="37:44">sizeof<argument_list pos:start="37:31" pos:end="37:44">(<argument pos:start="37:32" pos:end="37:43"><expr pos:start="37:32" pos:end="37:43">struct <name pos:start="37:39" pos:end="37:43">iovec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:20">(<expr pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:11">vec</name> <operator pos:start="39:13" pos:end="39:14">==</operator> <name pos:start="39:16" pos:end="39:19">NULL</name></expr>)</condition> <block pos:start="39:22" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:20">

        <expr_stmt pos:start="41:9" pos:end="41:23"><expr pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:13">errno</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:22">ENOMEM</name></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:20">return <expr pos:start="43:16" pos:end="43:19"><name pos:start="43:16" pos:end="43:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="51:67"><expr pos:start="49:5" pos:end="51:66"><name pos:start="49:5" pos:end="49:14">target_vec</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="51:66"><name pos:start="49:18" pos:end="49:26">lock_user</name><argument_list pos:start="49:27" pos:end="51:66">(<argument pos:start="49:28" pos:end="49:38"><expr pos:start="49:28" pos:end="49:38"><name pos:start="49:28" pos:end="49:38">VERIFY_READ</name></expr></argument>, <argument pos:start="49:41" pos:end="49:51"><expr pos:start="49:41" pos:end="49:51"><name pos:start="49:41" pos:end="49:51">target_addr</name></expr></argument>,

                           <argument pos:start="51:28" pos:end="51:62"><expr pos:start="51:28" pos:end="51:62"><name pos:start="51:28" pos:end="51:32">count</name> <operator pos:start="51:34" pos:end="51:34">*</operator> <sizeof pos:start="51:36" pos:end="51:62">sizeof<argument_list pos:start="51:42" pos:end="51:62">(<argument pos:start="51:43" pos:end="51:61"><expr pos:start="51:43" pos:end="51:61">struct <name pos:start="51:50" pos:end="51:61">target_iovec</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="51:65" pos:end="51:65"><expr pos:start="51:65" pos:end="51:65"><literal type="number" pos:start="51:65" pos:end="51:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:27">(<expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:18">target_vec</name> <operator pos:start="53:20" pos:end="53:21">==</operator> <name pos:start="53:23" pos:end="53:26">NULL</name></expr>)</condition> <block pos:start="53:29" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:19">

        <expr_stmt pos:start="55:9" pos:end="55:21"><expr pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:11">err</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:20">EFAULT</name></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:19">goto <name pos:start="57:14" pos:end="57:18">fail2</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="65:58">/* ??? If host page size &gt; target page size, this will result in a

       value larger than what we can actually support.  */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:44"><expr pos:start="67:5" pos:end="67:43"><name pos:start="67:5" pos:end="67:11">max_len</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <literal type="number" pos:start="67:15" pos:end="67:24">0x7fffffff</literal> <operator pos:start="67:26" pos:end="67:26">&amp;</operator> <name pos:start="67:28" pos:end="67:43">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:18"><expr pos:start="69:5" pos:end="69:17"><name pos:start="69:5" pos:end="69:13">total_len</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <literal type="number" pos:start="69:17" pos:end="69:17">0</literal></expr>;</expr_stmt>



    <for pos:start="73:5" pos:end="117:5">for <control pos:start="73:9" pos:end="73:31">(<init pos:start="73:10" pos:end="73:15"><expr pos:start="73:10" pos:end="73:14"><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>;</init> <condition pos:start="73:17" pos:end="73:26"><expr pos:start="73:17" pos:end="73:25"><name pos:start="73:17" pos:end="73:17">i</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <name pos:start="73:21" pos:end="73:25">count</name></expr>;</condition> <incr pos:start="73:28" pos:end="73:30"><expr pos:start="73:28" pos:end="73:30"><name pos:start="73:28" pos:end="73:28">i</name><operator pos:start="73:29" pos:end="73:30">++</operator></expr></incr>)</control> <block pos:start="73:33" pos:end="117:5">{<block_content pos:start="75:9" pos:end="115:25">

        <decl_stmt pos:start="75:9" pos:end="75:57"><decl pos:start="75:9" pos:end="75:56"><type pos:start="75:9" pos:end="75:17"><name pos:start="75:9" pos:end="75:17">abi_ulong</name></type> <name pos:start="75:19" pos:end="75:22">base</name> <init pos:start="75:24" pos:end="75:56">= <expr pos:start="75:26" pos:end="75:56"><call pos:start="75:26" pos:end="75:56"><name pos:start="75:26" pos:end="75:32">tswapal</name><argument_list pos:start="75:33" pos:end="75:56">(<argument pos:start="75:34" pos:end="75:55"><expr pos:start="75:34" pos:end="75:55"><name pos:start="75:34" pos:end="75:46"><name pos:start="75:34" pos:end="75:43">target_vec</name><index pos:start="75:44" pos:end="75:46">[<expr pos:start="75:45" pos:end="75:45"><name pos:start="75:45" pos:end="75:45">i</name></expr>]</index></name><operator pos:start="75:47" pos:end="75:47">.</operator><name pos:start="75:48" pos:end="75:55">iov_base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="77:9" pos:end="77:54"><decl pos:start="77:9" pos:end="77:53"><type pos:start="77:9" pos:end="77:16"><name pos:start="77:9" pos:end="77:16">abi_long</name></type> <name pos:start="77:18" pos:end="77:20">len</name> <init pos:start="77:22" pos:end="77:53">= <expr pos:start="77:24" pos:end="77:53"><call pos:start="77:24" pos:end="77:53"><name pos:start="77:24" pos:end="77:30">tswapal</name><argument_list pos:start="77:31" pos:end="77:53">(<argument pos:start="77:32" pos:end="77:52"><expr pos:start="77:32" pos:end="77:52"><name pos:start="77:32" pos:end="77:44"><name pos:start="77:32" pos:end="77:41">target_vec</name><index pos:start="77:42" pos:end="77:44">[<expr pos:start="77:43" pos:end="77:43"><name pos:start="77:43" pos:end="77:43">i</name></expr>]</index></name><operator pos:start="77:45" pos:end="77:45">.</operator><name pos:start="77:46" pos:end="77:52">iov_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="81:9" pos:end="111:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:20">(<expr pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:15">len</name> <operator pos:start="81:17" pos:end="81:17">&lt;</operator> <literal type="number" pos:start="81:19" pos:end="81:19">0</literal></expr>)</condition> <block pos:start="81:22" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:22">

            <expr_stmt pos:start="83:13" pos:end="83:25"><expr pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:15">err</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <name pos:start="83:19" pos:end="83:24">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="85:13" pos:end="85:22">goto <name pos:start="85:18" pos:end="85:21">fail</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="87:11" pos:end="93:9">else if <condition pos:start="87:19" pos:end="87:28">(<expr pos:start="87:20" pos:end="87:27"><name pos:start="87:20" pos:end="87:22">len</name> <operator pos:start="87:24" pos:end="87:25">==</operator> <literal type="number" pos:start="87:27" pos:end="87:27">0</literal></expr>)</condition> <block pos:start="87:30" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:32">

            <comment type="block" pos:start="89:13" pos:end="89:50">/* Zero length pointer is ignored.  */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:32"><expr pos:start="91:13" pos:end="91:31"><name pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:15">vec</name><index pos:start="91:16" pos:end="91:18">[<expr pos:start="91:17" pos:end="91:17"><name pos:start="91:17" pos:end="91:17">i</name></expr>]</index></name><operator pos:start="91:19" pos:end="91:19">.</operator><name pos:start="91:20" pos:end="91:27">iov_base</name> <operator pos:start="91:29" pos:end="91:29">=</operator> <literal type="number" pos:start="91:31" pos:end="91:31">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="111:9">else <block pos:start="93:16" pos:end="111:9">{<block_content pos:start="95:13" pos:end="109:13">

            <expr_stmt pos:start="95:13" pos:end="95:63"><expr pos:start="95:13" pos:end="95:62"><name pos:start="95:13" pos:end="95:18"><name pos:start="95:13" pos:end="95:15">vec</name><index pos:start="95:16" pos:end="95:18">[<expr pos:start="95:17" pos:end="95:17"><name pos:start="95:17" pos:end="95:17">i</name></expr>]</index></name><operator pos:start="95:19" pos:end="95:19">.</operator><name pos:start="95:20" pos:end="95:27">iov_base</name> <operator pos:start="95:29" pos:end="95:29">=</operator> <call pos:start="95:31" pos:end="95:62"><name pos:start="95:31" pos:end="95:39">lock_user</name><argument_list pos:start="95:40" pos:end="95:62">(<argument pos:start="95:41" pos:end="95:44"><expr pos:start="95:41" pos:end="95:44"><name pos:start="95:41" pos:end="95:44">type</name></expr></argument>, <argument pos:start="95:47" pos:end="95:50"><expr pos:start="95:47" pos:end="95:50"><name pos:start="95:47" pos:end="95:50">base</name></expr></argument>, <argument pos:start="95:53" pos:end="95:55"><expr pos:start="95:53" pos:end="95:55"><name pos:start="95:53" pos:end="95:55">len</name></expr></argument>, <argument pos:start="95:58" pos:end="95:61"><expr pos:start="95:58" pos:end="95:61"><name pos:start="95:58" pos:end="95:61">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="97:13" pos:end="103:13"><if pos:start="97:13" pos:end="103:13">if <condition pos:start="97:16" pos:end="97:33">(<expr pos:start="97:17" pos:end="97:32"><operator pos:start="97:17" pos:end="97:17">!</operator><name pos:start="97:18" pos:end="97:23"><name pos:start="97:18" pos:end="97:20">vec</name><index pos:start="97:21" pos:end="97:23">[<expr pos:start="97:22" pos:end="97:22"><name pos:start="97:22" pos:end="97:22">i</name></expr>]</index></name><operator pos:start="97:24" pos:end="97:24">.</operator><name pos:start="97:25" pos:end="97:32">iov_base</name></expr>)</condition> <block pos:start="97:35" pos:end="103:13">{<block_content pos:start="99:17" pos:end="101:26">

                <expr_stmt pos:start="99:17" pos:end="99:29"><expr pos:start="99:17" pos:end="99:28"><name pos:start="99:17" pos:end="99:19">err</name> <operator pos:start="99:21" pos:end="99:21">=</operator> <name pos:start="99:23" pos:end="99:28">EFAULT</name></expr>;</expr_stmt>

                <goto pos:start="101:17" pos:end="101:26">goto <name pos:start="101:22" pos:end="101:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="105:13" pos:end="109:13"><if pos:start="105:13" pos:end="109:13">if <condition pos:start="105:16" pos:end="105:42">(<expr pos:start="105:17" pos:end="105:41"><name pos:start="105:17" pos:end="105:19">len</name> <operator pos:start="105:21" pos:end="105:21">&gt;</operator> <name pos:start="105:23" pos:end="105:29">max_len</name> <operator pos:start="105:31" pos:end="105:31">-</operator> <name pos:start="105:33" pos:end="105:41">total_len</name></expr>)</condition> <block pos:start="105:44" pos:end="109:13">{<block_content pos:start="107:17" pos:end="107:42">

                <expr_stmt pos:start="107:17" pos:end="107:42"><expr pos:start="107:17" pos:end="107:41"><name pos:start="107:17" pos:end="107:19">len</name> <operator pos:start="107:21" pos:end="107:21">=</operator> <name pos:start="107:23" pos:end="107:29">max_len</name> <operator pos:start="107:31" pos:end="107:31">-</operator> <name pos:start="107:33" pos:end="107:41">total_len</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:29"><expr pos:start="113:9" pos:end="113:28"><name pos:start="113:9" pos:end="113:14"><name pos:start="113:9" pos:end="113:11">vec</name><index pos:start="113:12" pos:end="113:14">[<expr pos:start="113:13" pos:end="113:13"><name pos:start="113:13" pos:end="113:13">i</name></expr>]</index></name><operator pos:start="113:15" pos:end="113:15">.</operator><name pos:start="113:16" pos:end="113:22">iov_len</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <name pos:start="113:26" pos:end="113:28">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:25"><expr pos:start="115:9" pos:end="115:24"><name pos:start="115:9" pos:end="115:17">total_len</name> <operator pos:start="115:19" pos:end="115:20">+=</operator> <name pos:start="115:22" pos:end="115:24">len</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="121:5" pos:end="121:44"><expr pos:start="121:5" pos:end="121:43"><call pos:start="121:5" pos:end="121:43"><name pos:start="121:5" pos:end="121:15">unlock_user</name><argument_list pos:start="121:16" pos:end="121:43">(<argument pos:start="121:17" pos:end="121:26"><expr pos:start="121:17" pos:end="121:26"><name pos:start="121:17" pos:end="121:26">target_vec</name></expr></argument>, <argument pos:start="121:29" pos:end="121:39"><expr pos:start="121:29" pos:end="121:39"><name pos:start="121:29" pos:end="121:39">target_addr</name></expr></argument>, <argument pos:start="121:42" pos:end="121:42"><expr pos:start="121:42" pos:end="121:42"><literal type="number" pos:start="121:42" pos:end="121:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="123:5" pos:end="123:15">return <expr pos:start="123:12" pos:end="123:14"><name pos:start="123:12" pos:end="123:14">vec</name></expr>;</return>



 <label pos:start="127:2" pos:end="127:6"><name pos:start="127:2" pos:end="127:5">fail</name>:</label>

    <expr_stmt pos:start="129:5" pos:end="129:44"><expr pos:start="129:5" pos:end="129:43"><call pos:start="129:5" pos:end="129:43"><name pos:start="129:5" pos:end="129:15">unlock_user</name><argument_list pos:start="129:16" pos:end="129:43">(<argument pos:start="129:17" pos:end="129:26"><expr pos:start="129:17" pos:end="129:26"><name pos:start="129:17" pos:end="129:26">target_vec</name></expr></argument>, <argument pos:start="129:29" pos:end="129:39"><expr pos:start="129:29" pos:end="129:39"><name pos:start="129:29" pos:end="129:39">target_addr</name></expr></argument>, <argument pos:start="129:42" pos:end="129:42"><expr pos:start="129:42" pos:end="129:42"><literal type="number" pos:start="129:42" pos:end="129:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label pos:start="131:2" pos:end="131:7"><name pos:start="131:2" pos:end="131:6">fail2</name>:</label>

    <expr_stmt pos:start="133:5" pos:end="133:14"><expr pos:start="133:5" pos:end="133:13"><call pos:start="133:5" pos:end="133:13"><name pos:start="133:5" pos:end="133:8">free</name><argument_list pos:start="133:9" pos:end="133:13">(<argument pos:start="133:10" pos:end="133:12"><expr pos:start="133:10" pos:end="133:12"><name pos:start="133:10" pos:end="133:12">vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:16"><expr pos:start="135:5" pos:end="135:15"><name pos:start="135:5" pos:end="135:9">errno</name> <operator pos:start="135:11" pos:end="135:11">=</operator> <name pos:start="135:13" pos:end="135:15">err</name></expr>;</expr_stmt>

    <return pos:start="137:5" pos:end="137:16">return <expr pos:start="137:12" pos:end="137:15"><name pos:start="137:12" pos:end="137:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
