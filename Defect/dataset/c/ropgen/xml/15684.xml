<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15684.c" pos:tabs="8"><function pos:start="1:1" pos:end="279:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">xan_wc3_decode_frame</name><parameter_list pos:start="1:32" pos:end="1:46">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:42">XanContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list> <block pos:start="1:48" pos:end="279:1">{<block_content pos:start="5:5" pos:end="277:13">



    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">width</name> <init pos:start="5:15" pos:end="5:31">= <expr pos:start="5:17" pos:end="5:31"><name pos:start="5:17" pos:end="5:31"><name pos:start="5:17" pos:end="5:17">s</name><operator pos:start="5:18" pos:end="5:19">-&gt;</operator><name pos:start="5:20" pos:end="5:24">avctx</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:31">width</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">height</name> <init pos:start="7:16" pos:end="7:33">= <expr pos:start="7:18" pos:end="7:33"><name pos:start="7:18" pos:end="7:33"><name pos:start="7:18" pos:end="7:18">s</name><operator pos:start="7:19" pos:end="7:20">-&gt;</operator><name pos:start="7:21" pos:end="7:25">avctx</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">height</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">total_pixels</name> <init pos:start="9:22" pos:end="9:37">= <expr pos:start="9:24" pos:end="9:37"><name pos:start="9:24" pos:end="9:28">width</name> <operator pos:start="9:30" pos:end="9:30">*</operator> <name pos:start="9:32" pos:end="9:37">height</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:24">opcode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name></type> <name pos:start="13:19" pos:end="13:22">flag</name> <init pos:start="13:24" pos:end="13:26">= <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">size</name> <init pos:start="15:14" pos:end="15:16">= <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">motion_x</name></decl>, <decl pos:start="17:19" pos:end="17:26"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:19" pos:end="17:26">motion_y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">x</name></decl>, <decl pos:start="19:12" pos:end="19:12"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:12">y</name></decl>;</decl_stmt>



    <decl_stmt pos:start="23:5" pos:end="23:46"><decl pos:start="23:5" pos:end="23:45"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:17">char</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:32">opcode_buffer</name> <init pos:start="23:34" pos:end="23:45">= <expr pos:start="23:36" pos:end="23:45"><name pos:start="23:36" pos:end="23:45"><name pos:start="23:36" pos:end="23:36">s</name><operator pos:start="23:37" pos:end="23:38">-&gt;</operator><name pos:start="23:39" pos:end="23:45">buffer1</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:68"><decl pos:start="25:5" pos:end="25:67"><type pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:12">unsigned</name> <name pos:start="25:14" pos:end="25:17">char</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:36">opcode_buffer_end</name> <init pos:start="25:38" pos:end="25:67">= <expr pos:start="25:40" pos:end="25:67"><name pos:start="25:40" pos:end="25:49"><name pos:start="25:40" pos:end="25:40">s</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:49">buffer1</name></name> <operator pos:start="25:51" pos:end="25:51">+</operator> <name pos:start="25:53" pos:end="25:67"><name pos:start="25:53" pos:end="25:53">s</name><operator pos:start="25:54" pos:end="25:55">-&gt;</operator><name pos:start="25:56" pos:end="25:67">buffer1_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:45"><decl pos:start="27:5" pos:end="27:44"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:26">opcode_buffer_size</name> <init pos:start="27:28" pos:end="27:44">= <expr pos:start="27:30" pos:end="27:44"><name pos:start="27:30" pos:end="27:44"><name pos:start="27:30" pos:end="27:30">s</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:44">buffer1_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:55"><decl pos:start="29:5" pos:end="29:54"><type pos:start="29:5" pos:end="29:25"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:18">unsigned</name> <name pos:start="29:20" pos:end="29:23">char</name> <modifier pos:start="29:25" pos:end="29:25">*</modifier></type><name pos:start="29:26" pos:end="29:41">imagedata_buffer</name> <init pos:start="29:43" pos:end="29:54">= <expr pos:start="29:45" pos:end="29:54"><name pos:start="29:45" pos:end="29:54"><name pos:start="29:45" pos:end="29:45">s</name><operator pos:start="29:46" pos:end="29:47">-&gt;</operator><name pos:start="29:48" pos:end="29:54">buffer2</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:58">/* pointers to segments inside the compressed chunk */</comment>

    <decl_stmt pos:start="35:5" pos:end="35:41"><decl pos:start="35:5" pos:end="35:40"><type pos:start="35:5" pos:end="35:25"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:18">unsigned</name> <name pos:start="35:20" pos:end="35:23">char</name> <modifier pos:start="35:25" pos:end="35:25">*</modifier></type><name pos:start="35:26" pos:end="35:40">huffman_segment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:38"><decl pos:start="37:5" pos:end="37:37"><type pos:start="37:5" pos:end="37:25"><specifier pos:start="37:5" pos:end="37:9">const</specifier> <name pos:start="37:11" pos:end="37:18">unsigned</name> <name pos:start="37:20" pos:end="37:23">char</name> <modifier pos:start="37:25" pos:end="37:25">*</modifier></type><name pos:start="37:26" pos:end="37:37">size_segment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:40"><decl pos:start="39:5" pos:end="39:39"><type pos:start="39:5" pos:end="39:25"><specifier pos:start="39:5" pos:end="39:9">const</specifier> <name pos:start="39:11" pos:end="39:18">unsigned</name> <name pos:start="39:20" pos:end="39:23">char</name> <modifier pos:start="39:25" pos:end="39:25">*</modifier></type><name pos:start="39:26" pos:end="39:39">vector_segment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:43"><decl pos:start="41:5" pos:end="41:42"><type pos:start="41:5" pos:end="41:25"><specifier pos:start="41:5" pos:end="41:9">const</specifier> <name pos:start="41:11" pos:end="41:18">unsigned</name> <name pos:start="41:20" pos:end="41:23">char</name> <modifier pos:start="41:25" pos:end="41:25">*</modifier></type><name pos:start="41:26" pos:end="41:42">imagedata_segment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:85"><decl pos:start="43:5" pos:end="43:22"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:22">huffman_offset</name></decl>, <decl pos:start="43:25" pos:end="43:35"><type ref="prev" pos:start="43:5" pos:end="43:7"/><name pos:start="43:25" pos:end="43:35">size_offset</name></decl>, <decl pos:start="43:38" pos:end="43:50"><type ref="prev" pos:start="43:5" pos:end="43:7"/><name pos:start="43:38" pos:end="43:50">vector_offset</name></decl>, <decl pos:start="43:53" pos:end="43:68"><type ref="prev" pos:start="43:5" pos:end="43:7"/><name pos:start="43:53" pos:end="43:68">imagedata_offset</name></decl>, <decl pos:start="43:71" pos:end="43:84"><type ref="prev" pos:start="43:5" pos:end="43:7"/><name pos:start="43:71" pos:end="43:84">imagedata_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="47:5" pos:end="49:35"><if pos:start="47:5" pos:end="49:35">if <condition pos:start="47:8" pos:end="47:20">(<expr pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:15">size</name></name> <operator pos:start="47:17" pos:end="47:17">&lt;</operator> <literal type="number" pos:start="47:19" pos:end="47:19">8</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:35"><block_content pos:start="49:9" pos:end="49:35">

        <return pos:start="49:9" pos:end="49:35">return <expr pos:start="49:16" pos:end="49:34"><name pos:start="49:16" pos:end="49:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:44"><expr pos:start="53:5" pos:end="53:43"><name pos:start="53:5" pos:end="53:18">huffman_offset</name>    <operator pos:start="53:23" pos:end="53:23">=</operator> <call pos:start="53:25" pos:end="53:43"><name pos:start="53:25" pos:end="53:31">AV_RL16</name><argument_list pos:start="53:32" pos:end="53:43">(<argument pos:start="53:33" pos:end="53:42"><expr pos:start="53:33" pos:end="53:42"><operator pos:start="53:33" pos:end="53:33">&amp;</operator><name pos:start="53:34" pos:end="53:42"><name pos:start="53:34" pos:end="53:34">s</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:39">buf</name><index pos:start="53:40" pos:end="53:42">[<expr pos:start="53:41" pos:end="53:41"><literal type="number" pos:start="53:41" pos:end="53:41">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:44"><expr pos:start="55:5" pos:end="55:43"><name pos:start="55:5" pos:end="55:15">size_offset</name>       <operator pos:start="55:23" pos:end="55:23">=</operator> <call pos:start="55:25" pos:end="55:43"><name pos:start="55:25" pos:end="55:31">AV_RL16</name><argument_list pos:start="55:32" pos:end="55:43">(<argument pos:start="55:33" pos:end="55:42"><expr pos:start="55:33" pos:end="55:42"><operator pos:start="55:33" pos:end="55:33">&amp;</operator><name pos:start="55:34" pos:end="55:42"><name pos:start="55:34" pos:end="55:34">s</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:39">buf</name><index pos:start="55:40" pos:end="55:42">[<expr pos:start="55:41" pos:end="55:41"><literal type="number" pos:start="55:41" pos:end="55:41">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:44"><expr pos:start="57:5" pos:end="57:43"><name pos:start="57:5" pos:end="57:17">vector_offset</name>     <operator pos:start="57:23" pos:end="57:23">=</operator> <call pos:start="57:25" pos:end="57:43"><name pos:start="57:25" pos:end="57:31">AV_RL16</name><argument_list pos:start="57:32" pos:end="57:43">(<argument pos:start="57:33" pos:end="57:42"><expr pos:start="57:33" pos:end="57:42"><operator pos:start="57:33" pos:end="57:33">&amp;</operator><name pos:start="57:34" pos:end="57:42"><name pos:start="57:34" pos:end="57:34">s</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:39">buf</name><index pos:start="57:40" pos:end="57:42">[<expr pos:start="57:41" pos:end="57:41"><literal type="number" pos:start="57:41" pos:end="57:41">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:44"><expr pos:start="59:5" pos:end="59:43"><name pos:start="59:5" pos:end="59:20">imagedata_offset</name>  <operator pos:start="59:23" pos:end="59:23">=</operator> <call pos:start="59:25" pos:end="59:43"><name pos:start="59:25" pos:end="59:31">AV_RL16</name><argument_list pos:start="59:32" pos:end="59:43">(<argument pos:start="59:33" pos:end="59:42"><expr pos:start="59:33" pos:end="59:42"><operator pos:start="59:33" pos:end="59:33">&amp;</operator><name pos:start="59:34" pos:end="59:42"><name pos:start="59:34" pos:end="59:34">s</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:39">buf</name><index pos:start="59:40" pos:end="59:42">[<expr pos:start="59:41" pos:end="59:41"><literal type="number" pos:start="59:41" pos:end="59:41">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="71:35"><if pos:start="63:5" pos:end="71:35">if <condition pos:start="63:8" pos:end="69:36">(<expr pos:start="63:9" pos:end="69:35"><name pos:start="63:9" pos:end="63:22">huffman_offset</name>   <operator pos:start="63:26" pos:end="63:27">&gt;=</operator> <name pos:start="63:29" pos:end="63:35"><name pos:start="63:29" pos:end="63:29">s</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:35">size</name></name> <operator pos:start="63:37" pos:end="63:38">||</operator>

        <name pos:start="65:9" pos:end="65:19">size_offset</name>      <operator pos:start="65:26" pos:end="65:27">&gt;=</operator> <name pos:start="65:29" pos:end="65:35"><name pos:start="65:29" pos:end="65:29">s</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:35">size</name></name> <operator pos:start="65:37" pos:end="65:38">||</operator>

        <name pos:start="67:9" pos:end="67:21">vector_offset</name>    <operator pos:start="67:26" pos:end="67:27">&gt;=</operator> <name pos:start="67:29" pos:end="67:35"><name pos:start="67:29" pos:end="67:29">s</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:35">size</name></name> <operator pos:start="67:37" pos:end="67:38">||</operator>

        <name pos:start="69:9" pos:end="69:24">imagedata_offset</name> <operator pos:start="69:26" pos:end="69:27">&gt;=</operator> <name pos:start="69:29" pos:end="69:35"><name pos:start="69:29" pos:end="69:29">s</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:35">size</name></name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:35"><block_content pos:start="71:9" pos:end="71:35">

        <return pos:start="71:9" pos:end="71:35">return <expr pos:start="71:16" pos:end="71:34"><name pos:start="71:16" pos:end="71:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:48"><expr pos:start="75:5" pos:end="75:47"><name pos:start="75:5" pos:end="75:19">huffman_segment</name>   <operator pos:start="75:23" pos:end="75:23">=</operator> <name pos:start="75:25" pos:end="75:30"><name pos:start="75:25" pos:end="75:25">s</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:30">buf</name></name> <operator pos:start="75:32" pos:end="75:32">+</operator> <name pos:start="75:34" pos:end="75:47">huffman_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:45"><expr pos:start="77:5" pos:end="77:44"><name pos:start="77:5" pos:end="77:16">size_segment</name>      <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:30"><name pos:start="77:25" pos:end="77:25">s</name><operator pos:start="77:26" pos:end="77:27">-&gt;</operator><name pos:start="77:28" pos:end="77:30">buf</name></name> <operator pos:start="77:32" pos:end="77:32">+</operator> <name pos:start="77:34" pos:end="77:44">size_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:47"><expr pos:start="79:5" pos:end="79:46"><name pos:start="79:5" pos:end="79:18">vector_segment</name>    <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:30"><name pos:start="79:25" pos:end="79:25">s</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:30">buf</name></name> <operator pos:start="79:32" pos:end="79:32">+</operator> <name pos:start="79:34" pos:end="79:46">vector_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:50"><expr pos:start="81:5" pos:end="81:49"><name pos:start="81:5" pos:end="81:21">imagedata_segment</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <name pos:start="81:25" pos:end="81:30"><name pos:start="81:25" pos:end="81:25">s</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:30">buf</name></name> <operator pos:start="81:32" pos:end="81:32">+</operator> <name pos:start="81:34" pos:end="81:49">imagedata_offset</name></expr>;</expr_stmt>



    <if_stmt pos:start="85:5" pos:end="89:35"><if pos:start="85:5" pos:end="89:35">if <condition pos:start="85:8" pos:end="87:74">(<expr pos:start="85:9" pos:end="87:73"><call pos:start="85:9" pos:end="87:69"><name pos:start="85:9" pos:end="85:26">xan_huffman_decode</name><argument_list pos:start="85:27" pos:end="87:69">(<argument pos:start="85:28" pos:end="85:40"><expr pos:start="85:28" pos:end="85:40"><name pos:start="85:28" pos:end="85:40">opcode_buffer</name></expr></argument>, <argument pos:start="85:43" pos:end="85:60"><expr pos:start="85:43" pos:end="85:60"><name pos:start="85:43" pos:end="85:60">opcode_buffer_size</name></expr></argument>,

                           <argument pos:start="87:28" pos:end="87:42"><expr pos:start="87:28" pos:end="87:42"><name pos:start="87:28" pos:end="87:42">huffman_segment</name></expr></argument>, <argument pos:start="87:45" pos:end="87:68"><expr pos:start="87:45" pos:end="87:68"><name pos:start="87:45" pos:end="87:51"><name pos:start="87:45" pos:end="87:45">s</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:51">size</name></name> <operator pos:start="87:53" pos:end="87:53">-</operator> <name pos:start="87:55" pos:end="87:68">huffman_offset</name></expr></argument>)</argument_list></call> <operator pos:start="87:71" pos:end="87:71">&lt;</operator> <literal type="number" pos:start="87:73" pos:end="87:73">0</literal></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:35"><block_content pos:start="89:9" pos:end="89:35">

        <return pos:start="89:9" pos:end="89:35">return <expr pos:start="89:16" pos:end="89:34"><name pos:start="89:16" pos:end="89:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="93:5" pos:end="105:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:34">(<expr pos:start="93:9" pos:end="93:33"><name pos:start="93:9" pos:end="93:28"><name pos:start="93:9" pos:end="93:25">imagedata_segment</name><index pos:start="93:26" pos:end="93:28">[<expr pos:start="93:27" pos:end="93:27"><literal type="number" pos:start="93:27" pos:end="93:27">0</literal></expr>]</index></name> <operator pos:start="93:30" pos:end="93:31">==</operator> <literal type="number" pos:start="93:33" pos:end="93:33">2</literal></expr>)</condition> <block pos:start="93:36" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:41">

        <expr_stmt pos:start="95:9" pos:end="95:71"><expr pos:start="95:9" pos:end="95:70"><call pos:start="95:9" pos:end="95:70"><name pos:start="95:9" pos:end="95:18">xan_unpack</name><argument_list pos:start="95:19" pos:end="95:70">(<argument pos:start="95:20" pos:end="95:29"><expr pos:start="95:20" pos:end="95:29"><name pos:start="95:20" pos:end="95:29"><name pos:start="95:20" pos:end="95:20">s</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:29">buffer2</name></name></expr></argument>, <argument pos:start="95:32" pos:end="95:52"><expr pos:start="95:32" pos:end="95:52"><operator pos:start="95:32" pos:end="95:32">&amp;</operator><name pos:start="95:33" pos:end="95:52"><name pos:start="95:33" pos:end="95:49">imagedata_segment</name><index pos:start="95:50" pos:end="95:52">[<expr pos:start="95:51" pos:end="95:51"><literal type="number" pos:start="95:51" pos:end="95:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="95:55" pos:end="95:69"><expr pos:start="95:55" pos:end="95:69"><name pos:start="95:55" pos:end="95:69"><name pos:start="95:55" pos:end="95:55">s</name><operator pos:start="95:56" pos:end="95:57">-&gt;</operator><name pos:start="95:58" pos:end="95:69">buffer2_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:41"><expr pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:22">imagedata_size</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <name pos:start="97:26" pos:end="97:40"><name pos:start="97:26" pos:end="97:26">s</name><operator pos:start="97:27" pos:end="97:28">-&gt;</operator><name pos:start="97:29" pos:end="97:40">buffer2_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="105:5">else <block pos:start="99:12" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:49">

        <expr_stmt pos:start="101:9" pos:end="101:56"><expr pos:start="101:9" pos:end="101:55"><name pos:start="101:9" pos:end="101:22">imagedata_size</name> <operator pos:start="101:24" pos:end="101:24">=</operator> <name pos:start="101:26" pos:end="101:32"><name pos:start="101:26" pos:end="101:26">s</name><operator pos:start="101:27" pos:end="101:28">-&gt;</operator><name pos:start="101:29" pos:end="101:32">size</name></name> <operator pos:start="101:34" pos:end="101:34">-</operator> <name pos:start="101:36" pos:end="101:51">imagedata_offset</name> <operator pos:start="101:53" pos:end="101:53">-</operator> <literal type="number" pos:start="101:55" pos:end="101:55">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:49"><expr pos:start="103:9" pos:end="103:48"><name pos:start="103:9" pos:end="103:24">imagedata_buffer</name> <operator pos:start="103:26" pos:end="103:26">=</operator> <operator pos:start="103:28" pos:end="103:28">&amp;</operator><name pos:start="103:29" pos:end="103:48"><name pos:start="103:29" pos:end="103:45">imagedata_segment</name><index pos:start="103:46" pos:end="103:48">[<expr pos:start="103:47" pos:end="103:47"><literal type="number" pos:start="103:47" pos:end="103:47">1</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:58">/* use the decoded data segments to build the frame */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:14"><expr pos:start="111:5" pos:end="111:13"><name pos:start="111:5" pos:end="111:5">x</name> <operator pos:start="111:7" pos:end="111:7">=</operator> <name pos:start="111:9" pos:end="111:9">y</name> <operator pos:start="111:11" pos:end="111:11">=</operator> <literal type="number" pos:start="111:13" pos:end="111:13">0</literal></expr>;</expr_stmt>

    <while pos:start="113:5" pos:end="275:5">while <condition pos:start="113:11" pos:end="113:61">(<expr pos:start="113:12" pos:end="113:60"><name pos:start="113:12" pos:end="113:23">total_pixels</name> <operator pos:start="113:25" pos:end="113:26">&amp;&amp;</operator> <name pos:start="113:28" pos:end="113:40">opcode_buffer</name> <operator pos:start="113:42" pos:end="113:42">&lt;</operator> <name pos:start="113:44" pos:end="113:60">opcode_buffer_end</name></expr>)</condition> <block pos:start="113:63" pos:end="275:5">{<block_content pos:start="117:9" pos:end="273:32">



        <expr_stmt pos:start="117:9" pos:end="117:34"><expr pos:start="117:9" pos:end="117:33"><name pos:start="117:9" pos:end="117:14">opcode</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <operator pos:start="117:18" pos:end="117:18">*</operator><name pos:start="117:19" pos:end="117:31">opcode_buffer</name><operator pos:start="117:32" pos:end="117:33">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:17"><expr pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:12">size</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <literal type="number" pos:start="119:16" pos:end="119:16">0</literal></expr>;</expr_stmt>



        <switch pos:start="123:9" pos:end="209:9">switch <condition pos:start="123:16" pos:end="123:23">(<expr pos:start="123:17" pos:end="123:22"><name pos:start="123:17" pos:end="123:22">opcode</name></expr>)</condition> <block pos:start="123:25" pos:end="209:9">{<block_content pos:start="127:9" pos:end="207:18">



        <case pos:start="127:9" pos:end="127:15">case <expr pos:start="127:14" pos:end="127:14"><literal type="number" pos:start="127:14" pos:end="127:14">0</literal></expr>:</case>

            <expr_stmt pos:start="129:13" pos:end="129:22"><expr pos:start="129:13" pos:end="129:21"><name pos:start="129:13" pos:end="129:16">flag</name> <operator pos:start="129:18" pos:end="129:19">^=</operator> <literal type="number" pos:start="129:21" pos:end="129:21">1</literal></expr>;</expr_stmt>

            <continue pos:start="131:13" pos:end="131:21">continue;</continue>



        <case pos:start="135:9" pos:end="135:15">case <expr pos:start="135:14" pos:end="135:14"><literal type="number" pos:start="135:14" pos:end="135:14">1</literal></expr>:</case>

        <case pos:start="137:9" pos:end="137:15">case <expr pos:start="137:14" pos:end="137:14"><literal type="number" pos:start="137:14" pos:end="137:14">2</literal></expr>:</case>

        <case pos:start="139:9" pos:end="139:15">case <expr pos:start="139:14" pos:end="139:14"><literal type="number" pos:start="139:14" pos:end="139:14">3</literal></expr>:</case>

        <case pos:start="141:9" pos:end="141:15">case <expr pos:start="141:14" pos:end="141:14"><literal type="number" pos:start="141:14" pos:end="141:14">4</literal></expr>:</case>

        <case pos:start="143:9" pos:end="143:15">case <expr pos:start="143:14" pos:end="143:14"><literal type="number" pos:start="143:14" pos:end="143:14">5</literal></expr>:</case>

        <case pos:start="145:9" pos:end="145:15">case <expr pos:start="145:14" pos:end="145:14"><literal type="number" pos:start="145:14" pos:end="145:14">6</literal></expr>:</case>

        <case pos:start="147:9" pos:end="147:15">case <expr pos:start="147:14" pos:end="147:14"><literal type="number" pos:start="147:14" pos:end="147:14">7</literal></expr>:</case>

        <case pos:start="149:9" pos:end="149:15">case <expr pos:start="149:14" pos:end="149:14"><literal type="number" pos:start="149:14" pos:end="149:14">8</literal></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:26"><expr pos:start="151:13" pos:end="151:25"><name pos:start="151:13" pos:end="151:16">size</name> <operator pos:start="151:18" pos:end="151:18">=</operator> <name pos:start="151:20" pos:end="151:25">opcode</name></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>



        <case pos:start="157:9" pos:end="157:16">case <expr pos:start="157:14" pos:end="157:15"><literal type="number" pos:start="157:14" pos:end="157:15">12</literal></expr>:</case>

        <case pos:start="159:9" pos:end="159:16">case <expr pos:start="159:14" pos:end="159:15"><literal type="number" pos:start="159:14" pos:end="159:15">13</literal></expr>:</case>

        <case pos:start="161:9" pos:end="161:16">case <expr pos:start="161:14" pos:end="161:15"><literal type="number" pos:start="161:14" pos:end="161:15">14</literal></expr>:</case>

        <case pos:start="163:9" pos:end="163:16">case <expr pos:start="163:14" pos:end="163:15"><literal type="number" pos:start="163:14" pos:end="163:15">15</literal></expr>:</case>

        <case pos:start="165:9" pos:end="165:16">case <expr pos:start="165:14" pos:end="165:15"><literal type="number" pos:start="165:14" pos:end="165:15">16</literal></expr>:</case>

        <case pos:start="167:9" pos:end="167:16">case <expr pos:start="167:14" pos:end="167:15"><literal type="number" pos:start="167:14" pos:end="167:15">17</literal></expr>:</case>

        <case pos:start="169:9" pos:end="169:16">case <expr pos:start="169:14" pos:end="169:15"><literal type="number" pos:start="169:14" pos:end="169:15">18</literal></expr>:</case>

            <expr_stmt pos:start="171:13" pos:end="171:34"><expr pos:start="171:13" pos:end="171:33"><name pos:start="171:13" pos:end="171:16">size</name> <operator pos:start="171:18" pos:end="171:19">+=</operator> <operator pos:start="171:21" pos:end="171:21">(</operator><name pos:start="171:22" pos:end="171:27">opcode</name> <operator pos:start="171:29" pos:end="171:29">-</operator> <literal type="number" pos:start="171:31" pos:end="171:32">10</literal><operator pos:start="171:33" pos:end="171:33">)</operator></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>



        <case pos:start="177:9" pos:end="177:15">case <expr pos:start="177:14" pos:end="177:14"><literal type="number" pos:start="177:14" pos:end="177:14">9</literal></expr>:</case>

        <case pos:start="179:9" pos:end="179:16">case <expr pos:start="179:14" pos:end="179:15"><literal type="number" pos:start="179:14" pos:end="179:15">19</literal></expr>:</case>

            <expr_stmt pos:start="181:13" pos:end="181:35"><expr pos:start="181:13" pos:end="181:34"><name pos:start="181:13" pos:end="181:16">size</name> <operator pos:start="181:18" pos:end="181:18">=</operator> <operator pos:start="181:20" pos:end="181:20">*</operator><name pos:start="181:21" pos:end="181:32">size_segment</name><operator pos:start="181:33" pos:end="181:34">++</operator></expr>;</expr_stmt>

            <break pos:start="183:13" pos:end="183:18">break;</break>



        <case pos:start="187:9" pos:end="187:16">case <expr pos:start="187:14" pos:end="187:15"><literal type="number" pos:start="187:14" pos:end="187:15">10</literal></expr>:</case>

        <case pos:start="189:9" pos:end="189:16">case <expr pos:start="189:14" pos:end="189:15"><literal type="number" pos:start="189:14" pos:end="189:15">20</literal></expr>:</case>

            <expr_stmt pos:start="191:13" pos:end="191:45"><expr pos:start="191:13" pos:end="191:44"><name pos:start="191:13" pos:end="191:16">size</name> <operator pos:start="191:18" pos:end="191:18">=</operator> <call pos:start="191:20" pos:end="191:44"><name pos:start="191:20" pos:end="191:26">AV_RB16</name><argument_list pos:start="191:27" pos:end="191:44">(<argument pos:start="191:28" pos:end="191:43"><expr pos:start="191:28" pos:end="191:43"><operator pos:start="191:28" pos:end="191:28">&amp;</operator><name pos:start="191:29" pos:end="191:43"><name pos:start="191:29" pos:end="191:40">size_segment</name><index pos:start="191:41" pos:end="191:43">[<expr pos:start="191:42" pos:end="191:42"><literal type="number" pos:start="191:42" pos:end="191:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:30"><expr pos:start="193:13" pos:end="193:29"><name pos:start="193:13" pos:end="193:24">size_segment</name> <operator pos:start="193:26" pos:end="193:27">+=</operator> <literal type="number" pos:start="193:29" pos:end="193:29">2</literal></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>



        <case pos:start="199:9" pos:end="199:16">case <expr pos:start="199:14" pos:end="199:15"><literal type="number" pos:start="199:14" pos:end="199:15">11</literal></expr>:</case>

        <case pos:start="201:9" pos:end="201:16">case <expr pos:start="201:14" pos:end="201:15"><literal type="number" pos:start="201:14" pos:end="201:15">21</literal></expr>:</case>

            <expr_stmt pos:start="203:13" pos:end="203:41"><expr pos:start="203:13" pos:end="203:40"><name pos:start="203:13" pos:end="203:16">size</name> <operator pos:start="203:18" pos:end="203:18">=</operator> <call pos:start="203:20" pos:end="203:40"><name pos:start="203:20" pos:end="203:26">AV_RB24</name><argument_list pos:start="203:27" pos:end="203:40">(<argument pos:start="203:28" pos:end="203:39"><expr pos:start="203:28" pos:end="203:39"><name pos:start="203:28" pos:end="203:39">size_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:30"><expr pos:start="205:13" pos:end="205:29"><name pos:start="205:13" pos:end="205:24">size_segment</name> <operator pos:start="205:26" pos:end="205:27">+=</operator> <literal type="number" pos:start="205:29" pos:end="205:29">3</literal></expr>;</expr_stmt>

            <break pos:start="207:13" pos:end="207:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="211:9" pos:end="213:18"><if pos:start="211:9" pos:end="213:18">if <condition pos:start="211:12" pos:end="211:32">(<expr pos:start="211:13" pos:end="211:31"><name pos:start="211:13" pos:end="211:16">size</name> <operator pos:start="211:18" pos:end="211:18">&gt;</operator> <name pos:start="211:20" pos:end="211:31">total_pixels</name></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="213:18"><block_content pos:start="213:13" pos:end="213:18">

            <break pos:start="213:13" pos:end="213:18">break;</break></block_content></block></if></if_stmt>



        <if_stmt pos:start="217:9" pos:end="263:9"><if pos:start="217:9" pos:end="243:9">if <condition pos:start="217:12" pos:end="217:24">(<expr pos:start="217:13" pos:end="217:23"><name pos:start="217:13" pos:end="217:18">opcode</name> <operator pos:start="217:20" pos:end="217:20">&lt;</operator> <literal type="number" pos:start="217:22" pos:end="217:23">12</literal></expr>)</condition> <block pos:start="217:26" pos:end="243:9">{<block_content pos:start="219:13" pos:end="241:13">

            <expr_stmt pos:start="219:13" pos:end="219:22"><expr pos:start="219:13" pos:end="219:21"><name pos:start="219:13" pos:end="219:16">flag</name> <operator pos:start="219:18" pos:end="219:19">^=</operator> <literal type="number" pos:start="219:21" pos:end="219:21">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="221:13" pos:end="241:13"><if pos:start="221:13" pos:end="227:13">if <condition pos:start="221:16" pos:end="221:21">(<expr pos:start="221:17" pos:end="221:20"><name pos:start="221:17" pos:end="221:20">flag</name></expr>)</condition> <block pos:start="221:23" pos:end="227:13">{<block_content pos:start="225:17" pos:end="225:60">

                <comment type="block" pos:start="223:17" pos:end="223:71">/* run of (size) pixels is unchanged from last frame */</comment>

                <expr_stmt pos:start="225:17" pos:end="225:60"><expr pos:start="225:17" pos:end="225:59"><call pos:start="225:17" pos:end="225:59"><name pos:start="225:17" pos:end="225:38">xan_wc3_copy_pixel_run</name><argument_list pos:start="225:39" pos:end="225:59">(<argument pos:start="225:40" pos:end="225:40"><expr pos:start="225:40" pos:end="225:40"><name pos:start="225:40" pos:end="225:40">s</name></expr></argument>, <argument pos:start="225:43" pos:end="225:43"><expr pos:start="225:43" pos:end="225:43"><name pos:start="225:43" pos:end="225:43">x</name></expr></argument>, <argument pos:start="225:46" pos:end="225:46"><expr pos:start="225:46" pos:end="225:46"><name pos:start="225:46" pos:end="225:46">y</name></expr></argument>, <argument pos:start="225:49" pos:end="225:52"><expr pos:start="225:49" pos:end="225:52"><name pos:start="225:49" pos:end="225:52">size</name></expr></argument>, <argument pos:start="225:55" pos:end="225:55"><expr pos:start="225:55" pos:end="225:55"><literal type="number" pos:start="225:55" pos:end="225:55">0</literal></expr></argument>, <argument pos:start="225:58" pos:end="225:58"><expr pos:start="225:58" pos:end="225:58"><literal type="number" pos:start="225:58" pos:end="225:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="227:15" pos:end="241:13">else <block pos:start="227:20" pos:end="241:13">{<block_content pos:start="231:17" pos:end="239:39">

                <comment type="block" pos:start="229:17" pos:end="229:66">/* output a run of pixels from imagedata_buffer */</comment>

                <if_stmt pos:start="231:17" pos:end="233:26"><if pos:start="231:17" pos:end="233:26">if <condition pos:start="231:20" pos:end="231:42">(<expr pos:start="231:21" pos:end="231:41"><name pos:start="231:21" pos:end="231:34">imagedata_size</name> <operator pos:start="231:36" pos:end="231:36">&lt;</operator> <name pos:start="231:38" pos:end="231:41">size</name></expr>)</condition><block type="pseudo" pos:start="233:21" pos:end="233:26"><block_content pos:start="233:21" pos:end="233:26">

                    <break pos:start="233:21" pos:end="233:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:74"><expr pos:start="235:17" pos:end="235:73"><call pos:start="235:17" pos:end="235:73"><name pos:start="235:17" pos:end="235:40">xan_wc3_output_pixel_run</name><argument_list pos:start="235:41" pos:end="235:73">(<argument pos:start="235:42" pos:end="235:42"><expr pos:start="235:42" pos:end="235:42"><name pos:start="235:42" pos:end="235:42">s</name></expr></argument>, <argument pos:start="235:45" pos:end="235:60"><expr pos:start="235:45" pos:end="235:60"><name pos:start="235:45" pos:end="235:60">imagedata_buffer</name></expr></argument>, <argument pos:start="235:63" pos:end="235:63"><expr pos:start="235:63" pos:end="235:63"><name pos:start="235:63" pos:end="235:63">x</name></expr></argument>, <argument pos:start="235:66" pos:end="235:66"><expr pos:start="235:66" pos:end="235:66"><name pos:start="235:66" pos:end="235:66">y</name></expr></argument>, <argument pos:start="235:69" pos:end="235:72"><expr pos:start="235:69" pos:end="235:72"><name pos:start="235:69" pos:end="235:72">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:41"><expr pos:start="237:17" pos:end="237:40"><name pos:start="237:17" pos:end="237:32">imagedata_buffer</name> <operator pos:start="237:34" pos:end="237:35">+=</operator> <name pos:start="237:37" pos:end="237:40">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:39"><expr pos:start="239:17" pos:end="239:38"><name pos:start="239:17" pos:end="239:30">imagedata_size</name> <operator pos:start="239:32" pos:end="239:33">-=</operator> <name pos:start="239:35" pos:end="239:38">size</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="243:11" pos:end="263:9">else <block pos:start="243:16" pos:end="263:9">{<block_content pos:start="247:13" pos:end="261:21">

            <comment type="block" pos:start="245:13" pos:end="245:63">/* run-based motion compensation from last frame */</comment>

            <expr_stmt pos:start="247:13" pos:end="247:61"><expr pos:start="247:13" pos:end="247:60"><name pos:start="247:13" pos:end="247:20">motion_x</name> <operator pos:start="247:22" pos:end="247:22">=</operator> <call pos:start="247:24" pos:end="247:60"><name pos:start="247:24" pos:end="247:34">sign_extend</name><argument_list pos:start="247:35" pos:end="247:60">(<argument pos:start="247:36" pos:end="247:55"><expr pos:start="247:36" pos:end="247:55"><operator pos:start="247:36" pos:end="247:36">*</operator><name pos:start="247:37" pos:end="247:50">vector_segment</name> <operator pos:start="247:52" pos:end="247:53">&gt;&gt;</operator> <literal type="number" pos:start="247:55" pos:end="247:55">4</literal></expr></argument>,  <argument pos:start="247:59" pos:end="247:59"><expr pos:start="247:59" pos:end="247:59"><literal type="number" pos:start="247:59" pos:end="247:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:61"><expr pos:start="249:13" pos:end="249:60"><name pos:start="249:13" pos:end="249:20">motion_y</name> <operator pos:start="249:22" pos:end="249:22">=</operator> <call pos:start="249:24" pos:end="249:60"><name pos:start="249:24" pos:end="249:34">sign_extend</name><argument_list pos:start="249:35" pos:end="249:60">(<argument pos:start="249:36" pos:end="249:56"><expr pos:start="249:36" pos:end="249:56"><operator pos:start="249:36" pos:end="249:36">*</operator><name pos:start="249:37" pos:end="249:50">vector_segment</name> <operator pos:start="249:52" pos:end="249:52">&amp;</operator> <literal type="number" pos:start="249:54" pos:end="249:56">0xF</literal></expr></argument>, <argument pos:start="249:59" pos:end="249:59"><expr pos:start="249:59" pos:end="249:59"><literal type="number" pos:start="249:59" pos:end="249:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:29"><expr pos:start="251:13" pos:end="251:28"><name pos:start="251:13" pos:end="251:26">vector_segment</name><operator pos:start="251:27" pos:end="251:28">++</operator></expr>;</expr_stmt>



            <comment type="block" pos:start="255:13" pos:end="255:62">/* copy a run of pixels from the previous frame */</comment>

            <expr_stmt pos:start="257:13" pos:end="257:70"><expr pos:start="257:13" pos:end="257:69"><call pos:start="257:13" pos:end="257:69"><name pos:start="257:13" pos:end="257:34">xan_wc3_copy_pixel_run</name><argument_list pos:start="257:35" pos:end="257:69">(<argument pos:start="257:36" pos:end="257:36"><expr pos:start="257:36" pos:end="257:36"><name pos:start="257:36" pos:end="257:36">s</name></expr></argument>, <argument pos:start="257:39" pos:end="257:39"><expr pos:start="257:39" pos:end="257:39"><name pos:start="257:39" pos:end="257:39">x</name></expr></argument>, <argument pos:start="257:42" pos:end="257:42"><expr pos:start="257:42" pos:end="257:42"><name pos:start="257:42" pos:end="257:42">y</name></expr></argument>, <argument pos:start="257:45" pos:end="257:48"><expr pos:start="257:45" pos:end="257:48"><name pos:start="257:45" pos:end="257:48">size</name></expr></argument>, <argument pos:start="257:51" pos:end="257:58"><expr pos:start="257:51" pos:end="257:58"><name pos:start="257:51" pos:end="257:58">motion_x</name></expr></argument>, <argument pos:start="257:61" pos:end="257:68"><expr pos:start="257:61" pos:end="257:68"><name pos:start="257:61" pos:end="257:68">motion_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="261:13" pos:end="261:21"><expr pos:start="261:13" pos:end="261:20"><name pos:start="261:13" pos:end="261:16">flag</name> <operator pos:start="261:18" pos:end="261:18">=</operator> <literal type="number" pos:start="261:20" pos:end="261:20">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="267:9" pos:end="267:35">/* coordinate accounting */</comment>

        <expr_stmt pos:start="269:9" pos:end="269:29"><expr pos:start="269:9" pos:end="269:28"><name pos:start="269:9" pos:end="269:20">total_pixels</name> <operator pos:start="269:22" pos:end="269:23">-=</operator> <name pos:start="269:25" pos:end="269:28">size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:32"><expr pos:start="271:9" pos:end="271:31"><name pos:start="271:9" pos:end="271:9">y</name> <operator pos:start="271:11" pos:end="271:12">+=</operator> <operator pos:start="271:14" pos:end="271:14">(</operator><name pos:start="271:15" pos:end="271:15">x</name> <operator pos:start="271:17" pos:end="271:17">+</operator> <name pos:start="271:19" pos:end="271:22">size</name><operator pos:start="271:23" pos:end="271:23">)</operator> <operator pos:start="271:25" pos:end="271:25">/</operator> <name pos:start="271:27" pos:end="271:31">width</name></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:32"><expr pos:start="273:9" pos:end="273:31"><name pos:start="273:9" pos:end="273:9">x</name>  <operator pos:start="273:12" pos:end="273:12">=</operator> <operator pos:start="273:14" pos:end="273:14">(</operator><name pos:start="273:15" pos:end="273:15">x</name> <operator pos:start="273:17" pos:end="273:17">+</operator> <name pos:start="273:19" pos:end="273:22">size</name><operator pos:start="273:23" pos:end="273:23">)</operator> <operator pos:start="273:25" pos:end="273:25">%</operator> <name pos:start="273:27" pos:end="273:31">width</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <return pos:start="277:5" pos:end="277:13">return <expr pos:start="277:12" pos:end="277:12"><literal type="number" pos:start="277:12" pos:end="277:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
