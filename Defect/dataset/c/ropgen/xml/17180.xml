<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17180.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">boot_sector_test</name><parameter_list pos:start="1:22" pos:end="1:27">(<parameter pos:start="1:23" pos:end="1:26"><decl pos:start="1:23" pos:end="1:26"><type pos:start="1:23" pos:end="1:26"><name pos:start="1:23" pos:end="1:26">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:46">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:25">signature_low</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:26">signature_high</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:22">signature</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="20:0"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:33">/* Wait at most 90 seconds */</comment>

<cpp:define pos:start="17:1" pos:end="17:44">#<cpp:directive pos:start="17:2" pos:end="17:7">define</cpp:directive> <cpp:macro pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:18">TEST_DELAY</name></cpp:macro> <cpp:value pos:start="17:20" pos:end="17:44">(1 * G_USEC_PER_SEC / 10)</cpp:value></cpp:define>

<cpp:define pos:start="19:1" pos:end="19:62">#<cpp:directive pos:start="19:2" pos:end="19:7">define</cpp:directive> <cpp:macro pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:19">TEST_CYCLES</name></cpp:macro> <cpp:value pos:start="19:21" pos:end="19:62">MAX((90 * G_USEC_PER_SEC / TEST_DELAY), 1)</cpp:value></cpp:define>



    <comment type="block" pos:start="23:5" pos:end="29:7">/* Poll until code has run and modified memory.  Once it has we know BIOS

     * initialization is done.  TODO: check that IP reached the halt

     * instruction.

     */</comment>

    <for pos:start="31:5" pos:end="47:5">for <control pos:start="31:9" pos:end="31:37">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:32"><expr pos:start="31:17" pos:end="31:31"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:31">TEST_CYCLES</name></expr>;</condition> <incr pos:start="31:34" pos:end="31:36"><expr pos:start="31:34" pos:end="31:36"><operator pos:start="31:34" pos:end="31:35">++</operator><name pos:start="31:36" pos:end="31:36">i</name></expr></incr>)</control> <block pos:start="31:39" pos:end="47:5">{<block_content pos:start="33:9" pos:end="45:29">

        <expr_stmt pos:start="33:9" pos:end="33:70"><expr pos:start="33:9" pos:end="33:69"><name pos:start="33:9" pos:end="33:21">signature_low</name> <operator pos:start="33:23" pos:end="33:23">=</operator> <call pos:start="33:25" pos:end="33:69"><name pos:start="33:25" pos:end="33:29">readb</name><argument_list pos:start="33:30" pos:end="33:69">(<argument pos:start="33:31" pos:end="33:68"><expr pos:start="33:31" pos:end="33:68"><name pos:start="33:31" pos:end="33:49">BOOT_SECTOR_ADDRESS</name> <operator pos:start="33:51" pos:end="33:51">+</operator> <name pos:start="33:53" pos:end="33:68">SIGNATURE_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:75"><expr pos:start="35:9" pos:end="35:74"><name pos:start="35:9" pos:end="35:22">signature_high</name> <operator pos:start="35:24" pos:end="35:24">=</operator> <call pos:start="35:26" pos:end="35:74"><name pos:start="35:26" pos:end="35:30">readb</name><argument_list pos:start="35:31" pos:end="35:74">(<argument pos:start="35:32" pos:end="35:73"><expr pos:start="35:32" pos:end="35:73"><name pos:start="35:32" pos:end="35:50">BOOT_SECTOR_ADDRESS</name> <operator pos:start="35:52" pos:end="35:52">+</operator> <name pos:start="35:54" pos:end="35:69">SIGNATURE_OFFSET</name> <operator pos:start="35:71" pos:end="35:71">+</operator> <literal type="number" pos:start="35:73" pos:end="35:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:58"><expr pos:start="37:9" pos:end="37:57"><name pos:start="37:9" pos:end="37:17">signature</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <operator pos:start="37:21" pos:end="37:21">(</operator><name pos:start="37:22" pos:end="37:35">signature_high</name> <operator pos:start="37:37" pos:end="37:38">&lt;&lt;</operator> <literal type="number" pos:start="37:40" pos:end="37:40">8</literal><operator pos:start="37:41" pos:end="37:41">)</operator> <operator pos:start="37:43" pos:end="37:43">|</operator> <name pos:start="37:45" pos:end="37:57">signature_low</name></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:35">(<expr pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:21">signature</name> <operator pos:start="39:23" pos:end="39:24">==</operator> <name pos:start="39:26" pos:end="39:34">SIGNATURE</name></expr>)</condition> <block pos:start="39:37" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:18">

            <break pos:start="41:13" pos:end="41:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:29"><expr pos:start="45:9" pos:end="45:28"><call pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:16">g_usleep</name><argument_list pos:start="45:17" pos:end="45:28">(<argument pos:start="45:18" pos:end="45:27"><expr pos:start="45:18" pos:end="45:27"><name pos:start="45:18" pos:end="45:27">TEST_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="51:5" pos:end="51:46"><expr pos:start="51:5" pos:end="51:45"><call pos:start="51:5" pos:end="51:45"><name pos:start="51:5" pos:end="51:19">g_assert_cmphex</name><argument_list pos:start="51:20" pos:end="51:45">(<argument pos:start="51:21" pos:end="51:29"><expr pos:start="51:21" pos:end="51:29"><name pos:start="51:21" pos:end="51:29">signature</name></expr></argument>, <argument pos:start="51:32" pos:end="51:33"><expr pos:start="51:32" pos:end="51:33"><operator pos:start="51:32" pos:end="51:33">==</operator></expr></argument>, <argument pos:start="51:36" pos:end="51:44"><expr pos:start="51:36" pos:end="51:44"><name pos:start="51:36" pos:end="51:44">SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
