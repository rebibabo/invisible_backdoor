<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2663.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:29">net_slirp_hostfwd_remove</name><parameter_list pos:start="1:30" pos:end="1:63">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:37">Monitor</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">mon</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:55">QDict</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:62">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:44">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">in_addr</name></name></type> <name pos:start="5:20" pos:end="5:28">host_addr</name> <init pos:start="5:30" pos:end="5:55">= <expr pos:start="5:32" pos:end="5:55"><block pos:start="5:32" pos:end="5:55">{ <expr pos:start="5:34" pos:end="5:53"><operator pos:start="5:34" pos:end="5:34">.</operator><name pos:start="5:35" pos:end="5:40">s_addr</name> <operator pos:start="5:42" pos:end="5:42">=</operator> <name pos:start="5:44" pos:end="5:53">INADDR_ANY</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">host_port</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:17"><name pos:start="9:10" pos:end="9:12">buf</name><index pos:start="9:13" pos:end="9:17">[<expr pos:start="9:14" pos:end="9:16"><literal type="number" pos:start="9:14" pos:end="9:16">256</literal></expr>]</index></name> <init pos:start="9:19" pos:end="9:22">= <expr pos:start="9:21" pos:end="9:22"><literal type="string" pos:start="9:21" pos:end="9:22">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:23">src_str</name></decl>, <decl pos:start="11:26" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:27">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">SlirpState</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">is_udp</name> <init pos:start="15:16" pos:end="15:18">= <expr pos:start="15:18" pos:end="15:18"><literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:52"><decl pos:start="19:5" pos:end="19:51"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:20">arg1</name> <init pos:start="19:22" pos:end="19:51">= <expr pos:start="19:24" pos:end="19:51"><call pos:start="19:24" pos:end="19:51"><name pos:start="19:24" pos:end="19:36">qdict_get_str</name><argument_list pos:start="19:37" pos:end="19:51">(<argument pos:start="19:38" pos:end="19:42"><expr pos:start="19:38" pos:end="19:42"><name pos:start="19:38" pos:end="19:42">qdict</name></expr></argument>, <argument pos:start="19:45" pos:end="19:50"><expr pos:start="19:45" pos:end="19:50"><literal type="string" pos:start="19:45" pos:end="19:50">"arg1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:56"><decl pos:start="21:5" pos:end="21:55"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:20">arg2</name> <init pos:start="21:22" pos:end="21:55">= <expr pos:start="21:24" pos:end="21:55"><call pos:start="21:24" pos:end="21:55"><name pos:start="21:24" pos:end="21:40">qdict_get_try_str</name><argument_list pos:start="21:41" pos:end="21:55">(<argument pos:start="21:42" pos:end="21:46"><expr pos:start="21:42" pos:end="21:46"><name pos:start="21:42" pos:end="21:46">qdict</name></expr></argument>, <argument pos:start="21:49" pos:end="21:54"><expr pos:start="21:49" pos:end="21:54"><literal type="string" pos:start="21:49" pos:end="21:54">"arg2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:56"><decl pos:start="23:5" pos:end="23:55"><type pos:start="23:5" pos:end="23:16"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:14">char</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:20">arg3</name> <init pos:start="23:22" pos:end="23:55">= <expr pos:start="23:24" pos:end="23:55"><call pos:start="23:24" pos:end="23:55"><name pos:start="23:24" pos:end="23:40">qdict_get_try_str</name><argument_list pos:start="23:41" pos:end="23:55">(<argument pos:start="23:42" pos:end="23:46"><expr pos:start="23:42" pos:end="23:46"><name pos:start="23:42" pos:end="23:46">qdict</name></expr></argument>, <argument pos:start="23:49" pos:end="23:54"><expr pos:start="23:49" pos:end="23:54"><literal type="string" pos:start="23:49" pos:end="23:54">"arg3"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:13">(<expr pos:start="27:9" pos:end="27:12"><name pos:start="27:9" pos:end="27:12">arg2</name></expr>)</condition> <block pos:start="27:15" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:23">

        <expr_stmt pos:start="29:9" pos:end="29:42"><expr pos:start="29:9" pos:end="29:41"><name pos:start="29:9" pos:end="29:9">s</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:41"><name pos:start="29:13" pos:end="29:24">slirp_lookup</name><argument_list pos:start="29:25" pos:end="29:41">(<argument pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><name pos:start="29:26" pos:end="29:28">mon</name></expr></argument>, <argument pos:start="29:31" pos:end="29:34"><expr pos:start="29:31" pos:end="29:34"><name pos:start="29:31" pos:end="29:34">arg1</name></expr></argument>, <argument pos:start="29:37" pos:end="29:40"><expr pos:start="29:37" pos:end="29:40"><name pos:start="29:37" pos:end="29:40">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:23"><expr pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:15">src_str</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:22">arg3</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="39:5">else <block pos:start="33:12" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:23">

        <expr_stmt pos:start="35:9" pos:end="35:42"><expr pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:9">s</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <call pos:start="35:13" pos:end="35:41"><name pos:start="35:13" pos:end="35:24">slirp_lookup</name><argument_list pos:start="35:25" pos:end="35:41">(<argument pos:start="35:26" pos:end="35:28"><expr pos:start="35:26" pos:end="35:28"><name pos:start="35:26" pos:end="35:28">mon</name></expr></argument>, <argument pos:start="35:31" pos:end="35:34"><expr pos:start="35:31" pos:end="35:34"><name pos:start="35:31" pos:end="35:34">NULL</name></expr></argument>, <argument pos:start="35:37" pos:end="35:40"><expr pos:start="35:37" pos:end="35:40"><name pos:start="35:37" pos:end="35:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:23"><expr pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:15">src_str</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:22">arg1</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:11">(<expr pos:start="41:9" pos:end="41:10"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:10">s</name></expr>)</condition> <block pos:start="41:13" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:15">

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="51:25"><if pos:start="49:5" pos:end="51:25">if <condition pos:start="49:8" pos:end="49:32">(<expr pos:start="49:9" pos:end="49:31"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:16">src_str</name> <operator pos:start="49:18" pos:end="49:19">||</operator> <operator pos:start="49:21" pos:end="49:21">!</operator><name pos:start="49:22" pos:end="49:31"><name pos:start="49:22" pos:end="49:28">src_str</name><index pos:start="49:29" pos:end="49:31">[<expr pos:start="49:30" pos:end="49:30"><literal type="number" pos:start="49:30" pos:end="49:30">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:25"><block_content pos:start="51:9" pos:end="51:25">

        <goto pos:start="51:9" pos:end="51:25">goto <name pos:start="51:14" pos:end="51:24">fail_syntax</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:16"><expr pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:5">p</name> <operator pos:start="55:7" pos:end="55:7">=</operator> <name pos:start="55:9" pos:end="55:15">src_str</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><call pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:15">get_str_sep</name><argument_list pos:start="57:16" pos:end="57:42">(<argument pos:start="57:17" pos:end="57:19"><expr pos:start="57:17" pos:end="57:19"><name pos:start="57:17" pos:end="57:19">buf</name></expr></argument>, <argument pos:start="57:22" pos:end="57:32"><expr pos:start="57:22" pos:end="57:32"><sizeof pos:start="57:22" pos:end="57:32">sizeof<argument_list pos:start="57:28" pos:end="57:32">(<argument pos:start="57:29" pos:end="57:31"><expr pos:start="57:29" pos:end="57:31"><name pos:start="57:29" pos:end="57:31">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="57:35" pos:end="57:36"><expr pos:start="57:35" pos:end="57:36"><operator pos:start="57:35" pos:end="57:35">&amp;</operator><name pos:start="57:36" pos:end="57:36">p</name></expr></argument>, <argument pos:start="57:39" pos:end="57:41"><expr pos:start="57:39" pos:end="57:41"><literal type="char" pos:start="57:39" pos:end="57:41">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="73:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:46">(<expr pos:start="61:9" pos:end="61:45"><operator pos:start="61:9" pos:end="61:9">!</operator><call pos:start="61:10" pos:end="61:27"><name pos:start="61:10" pos:end="61:15">strcmp</name><argument_list pos:start="61:16" pos:end="61:27">(<argument pos:start="61:17" pos:end="61:19"><expr pos:start="61:17" pos:end="61:19"><name pos:start="61:17" pos:end="61:19">buf</name></expr></argument>, <argument pos:start="61:22" pos:end="61:26"><expr pos:start="61:22" pos:end="61:26"><literal type="string" pos:start="61:22" pos:end="61:26">"tcp"</literal></expr></argument>)</argument_list></call> <operator pos:start="61:29" pos:end="61:30">||</operator> <name pos:start="61:32" pos:end="61:37"><name pos:start="61:32" pos:end="61:34">buf</name><index pos:start="61:35" pos:end="61:37">[<expr pos:start="61:36" pos:end="61:36"><literal type="number" pos:start="61:36" pos:end="61:36">0</literal></expr>]</index></name> <operator pos:start="61:39" pos:end="61:40">==</operator> <literal type="char" pos:start="61:42" pos:end="61:45">'\0'</literal></expr>)</condition> <block pos:start="61:48" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:19">

        <expr_stmt pos:start="63:9" pos:end="63:19"><expr pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:14">is_udp</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="65:7" pos:end="69:5">else if <condition pos:start="65:15" pos:end="65:35">(<expr pos:start="65:16" pos:end="65:34"><operator pos:start="65:16" pos:end="65:16">!</operator><call pos:start="65:17" pos:end="65:34"><name pos:start="65:17" pos:end="65:22">strcmp</name><argument_list pos:start="65:23" pos:end="65:34">(<argument pos:start="65:24" pos:end="65:26"><expr pos:start="65:24" pos:end="65:26"><name pos:start="65:24" pos:end="65:26">buf</name></expr></argument>, <argument pos:start="65:29" pos:end="65:33"><expr pos:start="65:29" pos:end="65:33"><literal type="string" pos:start="65:29" pos:end="65:33">"udp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:37" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:19">

        <expr_stmt pos:start="67:9" pos:end="67:19"><expr pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:14">is_udp</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="73:5">else <block pos:start="69:12" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:25">

        <goto pos:start="71:9" pos:end="71:25">goto <name pos:start="71:14" pos:end="71:24">fail_syntax</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:51">(<expr pos:start="77:9" pos:end="77:50"><call pos:start="77:9" pos:end="77:46"><name pos:start="77:9" pos:end="77:19">get_str_sep</name><argument_list pos:start="77:20" pos:end="77:46">(<argument pos:start="77:21" pos:end="77:23"><expr pos:start="77:21" pos:end="77:23"><name pos:start="77:21" pos:end="77:23">buf</name></expr></argument>, <argument pos:start="77:26" pos:end="77:36"><expr pos:start="77:26" pos:end="77:36"><sizeof pos:start="77:26" pos:end="77:36">sizeof<argument_list pos:start="77:32" pos:end="77:36">(<argument pos:start="77:33" pos:end="77:35"><expr pos:start="77:33" pos:end="77:35"><name pos:start="77:33" pos:end="77:35">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="77:39" pos:end="77:40"><expr pos:start="77:39" pos:end="77:40"><operator pos:start="77:39" pos:end="77:39">&amp;</operator><name pos:start="77:40" pos:end="77:40">p</name></expr></argument>, <argument pos:start="77:43" pos:end="77:45"><expr pos:start="77:43" pos:end="77:45"><literal type="char" pos:start="77:43" pos:end="77:45">':'</literal></expr></argument>)</argument_list></call> <operator pos:start="77:48" pos:end="77:48">&lt;</operator> <literal type="number" pos:start="77:50" pos:end="77:50">0</literal></expr>)</condition> <block pos:start="77:53" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:25">

        <goto pos:start="79:9" pos:end="79:25">goto <name pos:start="79:14" pos:end="79:24">fail_syntax</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:54">(<expr pos:start="83:9" pos:end="83:53"><name pos:start="83:9" pos:end="83:14"><name pos:start="83:9" pos:end="83:11">buf</name><index pos:start="83:12" pos:end="83:14">[<expr pos:start="83:13" pos:end="83:13"><literal type="number" pos:start="83:13" pos:end="83:13">0</literal></expr>]</index></name> <operator pos:start="83:16" pos:end="83:17">!=</operator> <literal type="char" pos:start="83:19" pos:end="83:22">'\0'</literal> <operator pos:start="83:24" pos:end="83:25">&amp;&amp;</operator> <operator pos:start="83:27" pos:end="83:27">!</operator><call pos:start="83:28" pos:end="83:53"><name pos:start="83:28" pos:end="83:36">inet_aton</name><argument_list pos:start="83:37" pos:end="83:53">(<argument pos:start="83:38" pos:end="83:40"><expr pos:start="83:38" pos:end="83:40"><name pos:start="83:38" pos:end="83:40">buf</name></expr></argument>, <argument pos:start="83:43" pos:end="83:52"><expr pos:start="83:43" pos:end="83:52"><operator pos:start="83:43" pos:end="83:43">&amp;</operator><name pos:start="83:44" pos:end="83:52">host_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:56" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:25">

        <goto pos:start="85:9" pos:end="85:25">goto <name pos:start="85:14" pos:end="85:24">fail_syntax</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:24"><expr pos:start="91:5" pos:end="91:23"><name pos:start="91:5" pos:end="91:13">host_port</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <call pos:start="91:17" pos:end="91:23"><name pos:start="91:17" pos:end="91:20">atoi</name><argument_list pos:start="91:21" pos:end="91:23">(<argument pos:start="91:22" pos:end="91:22"><expr pos:start="91:22" pos:end="91:22"><name pos:start="91:22" pos:end="91:22">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="97:53"><expr pos:start="95:5" pos:end="97:52"><name pos:start="95:5" pos:end="95:7">err</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="97:52"><name pos:start="95:11" pos:end="95:30">slirp_remove_hostfwd</name><argument_list pos:start="95:31" pos:end="97:52">(<argument pos:start="95:32" pos:end="95:65"><expr pos:start="95:32" pos:end="95:65"><call pos:start="95:32" pos:end="95:58"><name pos:start="95:32" pos:end="95:43">QTAILQ_FIRST</name><argument_list pos:start="95:44" pos:end="95:58">(<argument pos:start="95:45" pos:end="95:57"><expr pos:start="95:45" pos:end="95:57"><operator pos:start="95:45" pos:end="95:45">&amp;</operator><name pos:start="95:46" pos:end="95:57">slirp_stacks</name></expr></argument>)</argument_list></call><operator pos:start="95:59" pos:end="95:60">-&gt;</operator><name pos:start="95:61" pos:end="95:65">slirp</name></expr></argument>, <argument pos:start="95:68" pos:end="95:73"><expr pos:start="95:68" pos:end="95:73"><name pos:start="95:68" pos:end="95:73">is_udp</name></expr></argument>,

                               <argument pos:start="97:32" pos:end="97:40"><expr pos:start="97:32" pos:end="97:40"><name pos:start="97:32" pos:end="97:40">host_addr</name></expr></argument>, <argument pos:start="97:43" pos:end="97:51"><expr pos:start="97:43" pos:end="97:51"><name pos:start="97:43" pos:end="97:51">host_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="103:50"><expr pos:start="101:5" pos:end="103:49"><call pos:start="101:5" pos:end="103:49"><name pos:start="101:5" pos:end="101:18">monitor_printf</name><argument_list pos:start="101:19" pos:end="103:49">(<argument pos:start="101:20" pos:end="101:22"><expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">mon</name></expr></argument>, <argument pos:start="101:25" pos:end="101:58"><expr pos:start="101:25" pos:end="101:58"><literal type="string" pos:start="101:25" pos:end="101:58">"host forwarding rule for %s %s\n"</literal></expr></argument>, <argument pos:start="101:61" pos:end="101:67"><expr pos:start="101:61" pos:end="101:67"><name pos:start="101:61" pos:end="101:67">src_str</name></expr></argument>,

                   <argument pos:start="103:20" pos:end="103:48"><expr pos:start="103:20" pos:end="103:48"><ternary pos:start="103:20" pos:end="103:48"><condition pos:start="103:20" pos:end="103:24"><expr pos:start="103:20" pos:end="103:22"><name pos:start="103:20" pos:end="103:22">err</name></expr> ?</condition><then pos:start="103:26" pos:end="103:34"> <expr pos:start="103:26" pos:end="103:34"><literal type="string" pos:start="103:26" pos:end="103:34">"removed"</literal></expr> </then><else pos:start="103:36" pos:end="103:48">: <expr pos:start="103:38" pos:end="103:48"><literal type="string" pos:start="103:38" pos:end="103:48">"not found"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="105:5" pos:end="105:11">return;</return>



 <label pos:start="109:2" pos:end="109:13"><name pos:start="109:2" pos:end="109:12">fail_syntax</name>:</label>

    <expr_stmt pos:start="111:5" pos:end="111:44"><expr pos:start="111:5" pos:end="111:43"><call pos:start="111:5" pos:end="111:43"><name pos:start="111:5" pos:end="111:18">monitor_printf</name><argument_list pos:start="111:19" pos:end="111:43">(<argument pos:start="111:20" pos:end="111:22"><expr pos:start="111:20" pos:end="111:22"><name pos:start="111:20" pos:end="111:22">mon</name></expr></argument>, <argument pos:start="111:25" pos:end="111:42"><expr pos:start="111:25" pos:end="111:42"><literal type="string" pos:start="111:25" pos:end="111:42">"invalid format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
