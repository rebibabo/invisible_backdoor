<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25509.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">gen_store_exclusive</name><parameter_list pos:start="1:32" pos:end="3:69">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:44">DisasContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:55"><decl pos:start="1:50" pos:end="1:55"><type pos:start="1:50" pos:end="1:55"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:55">rd</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:63"><decl pos:start="1:58" pos:end="1:63"><type pos:start="1:58" pos:end="1:63"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:63">rt</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:72"><decl pos:start="1:66" pos:end="1:72"><type pos:start="1:66" pos:end="1:72"><name pos:start="1:66" pos:end="1:68">int</name></type> <name pos:start="1:70" pos:end="1:72">rt2</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:40">TCGv_i64</name></type> <name pos:start="3:42" pos:end="3:45">addr</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:55"><decl pos:start="3:48" pos:end="3:55"><type pos:start="3:48" pos:end="3:55"><name pos:start="3:48" pos:end="3:50">int</name></type> <name pos:start="3:52" pos:end="3:55">size</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:68"><decl pos:start="3:58" pos:end="3:68"><type pos:start="3:58" pos:end="3:68"><name pos:start="3:58" pos:end="3:60">int</name></type> <name pos:start="3:62" pos:end="3:68">is_pair</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="111:1">{<block_content pos:start="31:5" pos:end="109:45">

    <comment type="block" pos:start="7:5" pos:end="29:7">/* if (env-&gt;exclusive_addr == addr &amp;&amp; env-&gt;exclusive_val == [addr]

     *     &amp;&amp; (!is_pair || env-&gt;exclusive_high == [addr + datasize])) {

     *     [addr] = {Rt};

     *     if (is_pair) {

     *         [addr + datasize] = {Rt2};

     *     }

     *     {Rd} = 0;

     * } else {

     *     {Rd} = 1;

     * }

     * env-&gt;exclusive_addr = -1;

     */</comment>

    <decl_stmt pos:start="31:5" pos:end="31:43"><decl pos:start="31:5" pos:end="31:42"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">TCGLabel</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:24">fail_label</name> <init pos:start="31:26" pos:end="31:42">= <expr pos:start="31:28" pos:end="31:42"><call pos:start="31:28" pos:end="31:42"><name pos:start="31:28" pos:end="31:40">gen_new_label</name><argument_list pos:start="31:41" pos:end="31:42">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:43"><decl pos:start="33:5" pos:end="33:42"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">TCGLabel</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:24">done_label</name> <init pos:start="33:26" pos:end="33:42">= <expr pos:start="33:28" pos:end="33:42"><call pos:start="33:28" pos:end="33:42"><name pos:start="33:28" pos:end="33:40">gen_new_label</name><argument_list pos:start="33:41" pos:end="33:42">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:17"><decl pos:start="35:5" pos:end="35:16"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">TCGv_i64</name></type> <name pos:start="35:14" pos:end="35:16">tmp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:74"><expr pos:start="39:5" pos:end="39:73"><call pos:start="39:5" pos:end="39:73"><name pos:start="39:5" pos:end="39:22">tcg_gen_brcond_i64</name><argument_list pos:start="39:23" pos:end="39:73">(<argument pos:start="39:24" pos:end="39:34"><expr pos:start="39:24" pos:end="39:34"><name pos:start="39:24" pos:end="39:34">TCG_COND_NE</name></expr></argument>, <argument pos:start="39:37" pos:end="39:40"><expr pos:start="39:37" pos:end="39:40"><name pos:start="39:37" pos:end="39:40">addr</name></expr></argument>, <argument pos:start="39:43" pos:end="39:60"><expr pos:start="39:43" pos:end="39:60"><name pos:start="39:43" pos:end="39:60">cpu_exclusive_addr</name></expr></argument>, <argument pos:start="39:63" pos:end="39:72"><expr pos:start="39:63" pos:end="39:72"><name pos:start="39:63" pos:end="39:72">fail_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:29"><expr pos:start="43:5" pos:end="43:28"><name pos:start="43:5" pos:end="43:7">tmp</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:28"><name pos:start="43:11" pos:end="43:26">tcg_temp_new_i64</name><argument_list pos:start="43:27" pos:end="43:28">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="93:5"><if pos:start="45:5" pos:end="83:5">if <condition pos:start="45:8" pos:end="45:16">(<expr pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:15">is_pair</name></expr>)</condition> <block pos:start="45:18" pos:end="83:5">{<block_content pos:start="47:9" pos:end="81:9">

        <if_stmt pos:start="47:9" pos:end="81:9"><if pos:start="47:9" pos:end="69:9">if <condition pos:start="47:12" pos:end="47:22">(<expr pos:start="47:13" pos:end="47:21"><name pos:start="47:13" pos:end="47:16">size</name> <operator pos:start="47:18" pos:end="47:19">==</operator> <literal type="number" pos:start="47:21" pos:end="47:21">2</literal></expr>)</condition> <block pos:start="47:24" pos:end="69:9">{<block_content pos:start="49:13" pos:end="67:74">

            <if_stmt pos:start="49:13" pos:end="57:13"><if pos:start="49:13" pos:end="53:13">if <condition pos:start="49:16" pos:end="49:36">(<expr pos:start="49:17" pos:end="49:35"><name pos:start="49:17" pos:end="49:26"><name pos:start="49:17" pos:end="49:17">s</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:26">be_data</name></name> <operator pos:start="49:28" pos:end="49:29">==</operator> <name pos:start="49:31" pos:end="49:35">MO_LE</name></expr>)</condition> <block pos:start="49:38" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:75">

                <expr_stmt pos:start="51:17" pos:end="51:75"><expr pos:start="51:17" pos:end="51:74"><call pos:start="51:17" pos:end="51:74"><name pos:start="51:17" pos:end="51:36">tcg_gen_concat32_i64</name><argument_list pos:start="51:37" pos:end="51:74">(<argument pos:start="51:38" pos:end="51:40"><expr pos:start="51:38" pos:end="51:40"><name pos:start="51:38" pos:end="51:40">tmp</name></expr></argument>, <argument pos:start="51:43" pos:end="51:56"><expr pos:start="51:43" pos:end="51:56"><call pos:start="51:43" pos:end="51:56"><name pos:start="51:43" pos:end="51:49">cpu_reg</name><argument_list pos:start="51:50" pos:end="51:56">(<argument pos:start="51:51" pos:end="51:51"><expr pos:start="51:51" pos:end="51:51"><name pos:start="51:51" pos:end="51:51">s</name></expr></argument>, <argument pos:start="51:54" pos:end="51:55"><expr pos:start="51:54" pos:end="51:55"><name pos:start="51:54" pos:end="51:55">rt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:59" pos:end="51:73"><expr pos:start="51:59" pos:end="51:73"><call pos:start="51:59" pos:end="51:73"><name pos:start="51:59" pos:end="51:65">cpu_reg</name><argument_list pos:start="51:66" pos:end="51:73">(<argument pos:start="51:67" pos:end="51:67"><expr pos:start="51:67" pos:end="51:67"><name pos:start="51:67" pos:end="51:67">s</name></expr></argument>, <argument pos:start="51:70" pos:end="51:72"><expr pos:start="51:70" pos:end="51:72"><name pos:start="51:70" pos:end="51:72">rt2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="53:15" pos:end="57:13">else <block pos:start="53:20" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:75">

                <expr_stmt pos:start="55:17" pos:end="55:75"><expr pos:start="55:17" pos:end="55:74"><call pos:start="55:17" pos:end="55:74"><name pos:start="55:17" pos:end="55:36">tcg_gen_concat32_i64</name><argument_list pos:start="55:37" pos:end="55:74">(<argument pos:start="55:38" pos:end="55:40"><expr pos:start="55:38" pos:end="55:40"><name pos:start="55:38" pos:end="55:40">tmp</name></expr></argument>, <argument pos:start="55:43" pos:end="55:57"><expr pos:start="55:43" pos:end="55:57"><call pos:start="55:43" pos:end="55:57"><name pos:start="55:43" pos:end="55:49">cpu_reg</name><argument_list pos:start="55:50" pos:end="55:57">(<argument pos:start="55:51" pos:end="55:51"><expr pos:start="55:51" pos:end="55:51"><name pos:start="55:51" pos:end="55:51">s</name></expr></argument>, <argument pos:start="55:54" pos:end="55:56"><expr pos:start="55:54" pos:end="55:56"><name pos:start="55:54" pos:end="55:56">rt2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="55:60" pos:end="55:73"><expr pos:start="55:60" pos:end="55:73"><call pos:start="55:60" pos:end="55:73"><name pos:start="55:60" pos:end="55:66">cpu_reg</name><argument_list pos:start="55:67" pos:end="55:73">(<argument pos:start="55:68" pos:end="55:68"><expr pos:start="55:68" pos:end="55:68"><name pos:start="55:68" pos:end="55:68">s</name></expr></argument>, <argument pos:start="55:71" pos:end="55:72"><expr pos:start="55:71" pos:end="55:72"><name pos:start="55:71" pos:end="55:72">rt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="65:70"><expr pos:start="59:13" pos:end="65:69"><call pos:start="59:13" pos:end="65:69"><name pos:start="59:13" pos:end="59:38">tcg_gen_atomic_cmpxchg_i64</name><argument_list pos:start="59:39" pos:end="65:69">(<argument pos:start="59:40" pos:end="59:42"><expr pos:start="59:40" pos:end="59:42"><name pos:start="59:40" pos:end="59:42">tmp</name></expr></argument>, <argument pos:start="59:45" pos:end="59:62"><expr pos:start="59:45" pos:end="59:62"><name pos:start="59:45" pos:end="59:62">cpu_exclusive_addr</name></expr></argument>,

                                       <argument pos:start="61:40" pos:end="61:56"><expr pos:start="61:40" pos:end="61:56"><name pos:start="61:40" pos:end="61:56">cpu_exclusive_val</name></expr></argument>, <argument pos:start="61:59" pos:end="61:61"><expr pos:start="61:59" pos:end="61:61"><name pos:start="61:59" pos:end="61:61">tmp</name></expr></argument>,

                                       <argument pos:start="63:40" pos:end="63:55"><expr pos:start="63:40" pos:end="63:55"><call pos:start="63:40" pos:end="63:55"><name pos:start="63:40" pos:end="63:52">get_mem_index</name><argument_list pos:start="63:53" pos:end="63:55">(<argument pos:start="63:54" pos:end="63:54"><expr pos:start="63:54" pos:end="63:54"><name pos:start="63:54" pos:end="63:54">s</name></expr></argument>)</argument_list></call></expr></argument>,

                                       <argument pos:start="65:40" pos:end="65:68"><expr pos:start="65:40" pos:end="65:68"><name pos:start="65:40" pos:end="65:44">MO_64</name> <operator pos:start="65:46" pos:end="65:46">|</operator> <name pos:start="65:48" pos:end="65:55">MO_ALIGN</name> <operator pos:start="65:57" pos:end="65:57">|</operator> <name pos:start="65:59" pos:end="65:68"><name pos:start="65:59" pos:end="65:59">s</name><operator pos:start="65:60" pos:end="65:61">-&gt;</operator><name pos:start="65:62" pos:end="65:68">be_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:74"><expr pos:start="67:13" pos:end="67:73"><call pos:start="67:13" pos:end="67:73"><name pos:start="67:13" pos:end="67:31">tcg_gen_setcond_i64</name><argument_list pos:start="67:32" pos:end="67:73">(<argument pos:start="67:33" pos:end="67:43"><expr pos:start="67:33" pos:end="67:43"><name pos:start="67:33" pos:end="67:43">TCG_COND_NE</name></expr></argument>, <argument pos:start="67:46" pos:end="67:48"><expr pos:start="67:46" pos:end="67:48"><name pos:start="67:46" pos:end="67:48">tmp</name></expr></argument>, <argument pos:start="67:51" pos:end="67:53"><expr pos:start="67:51" pos:end="67:53"><name pos:start="67:51" pos:end="67:53">tmp</name></expr></argument>, <argument pos:start="67:56" pos:end="67:72"><expr pos:start="67:56" pos:end="67:72"><name pos:start="67:56" pos:end="67:72">cpu_exclusive_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="69:11" pos:end="75:9">else if <condition pos:start="69:19" pos:end="69:39">(<expr pos:start="69:20" pos:end="69:38"><name pos:start="69:20" pos:end="69:29"><name pos:start="69:20" pos:end="69:20">s</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:29">be_data</name></name> <operator pos:start="69:31" pos:end="69:32">==</operator> <name pos:start="69:34" pos:end="69:38">MO_LE</name></expr>)</condition> <block pos:start="69:41" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:76">

            <expr_stmt pos:start="71:13" pos:end="73:76"><expr pos:start="71:13" pos:end="73:75"><call pos:start="71:13" pos:end="73:75"><name pos:start="71:13" pos:end="71:42">gen_helper_paired_cmpxchg64_le</name><argument_list pos:start="71:43" pos:end="73:75">(<argument pos:start="71:44" pos:end="71:46"><expr pos:start="71:44" pos:end="71:46"><name pos:start="71:44" pos:end="71:46">tmp</name></expr></argument>, <argument pos:start="71:49" pos:end="71:55"><expr pos:start="71:49" pos:end="71:55"><name pos:start="71:49" pos:end="71:55">cpu_env</name></expr></argument>, <argument pos:start="71:58" pos:end="71:75"><expr pos:start="71:58" pos:end="71:75"><name pos:start="71:58" pos:end="71:75">cpu_exclusive_addr</name></expr></argument>,

                                           <argument pos:start="73:44" pos:end="73:57"><expr pos:start="73:44" pos:end="73:57"><call pos:start="73:44" pos:end="73:57"><name pos:start="73:44" pos:end="73:50">cpu_reg</name><argument_list pos:start="73:51" pos:end="73:57">(<argument pos:start="73:52" pos:end="73:52"><expr pos:start="73:52" pos:end="73:52"><name pos:start="73:52" pos:end="73:52">s</name></expr></argument>, <argument pos:start="73:55" pos:end="73:56"><expr pos:start="73:55" pos:end="73:56"><name pos:start="73:55" pos:end="73:56">rt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="73:60" pos:end="73:74"><expr pos:start="73:60" pos:end="73:74"><call pos:start="73:60" pos:end="73:74"><name pos:start="73:60" pos:end="73:66">cpu_reg</name><argument_list pos:start="73:67" pos:end="73:74">(<argument pos:start="73:68" pos:end="73:68"><expr pos:start="73:68" pos:end="73:68"><name pos:start="73:68" pos:end="73:68">s</name></expr></argument>, <argument pos:start="73:71" pos:end="73:73"><expr pos:start="73:71" pos:end="73:73"><name pos:start="73:71" pos:end="73:73">rt2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="81:9">else <block pos:start="75:16" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:76">

            <expr_stmt pos:start="77:13" pos:end="79:76"><expr pos:start="77:13" pos:end="79:75"><call pos:start="77:13" pos:end="79:75"><name pos:start="77:13" pos:end="77:42">gen_helper_paired_cmpxchg64_be</name><argument_list pos:start="77:43" pos:end="79:75">(<argument pos:start="77:44" pos:end="77:46"><expr pos:start="77:44" pos:end="77:46"><name pos:start="77:44" pos:end="77:46">tmp</name></expr></argument>, <argument pos:start="77:49" pos:end="77:55"><expr pos:start="77:49" pos:end="77:55"><name pos:start="77:49" pos:end="77:55">cpu_env</name></expr></argument>, <argument pos:start="77:58" pos:end="77:75"><expr pos:start="77:58" pos:end="77:75"><name pos:start="77:58" pos:end="77:75">cpu_exclusive_addr</name></expr></argument>,

                                           <argument pos:start="79:44" pos:end="79:57"><expr pos:start="79:44" pos:end="79:57"><call pos:start="79:44" pos:end="79:57"><name pos:start="79:44" pos:end="79:50">cpu_reg</name><argument_list pos:start="79:51" pos:end="79:57">(<argument pos:start="79:52" pos:end="79:52"><expr pos:start="79:52" pos:end="79:52"><name pos:start="79:52" pos:end="79:52">s</name></expr></argument>, <argument pos:start="79:55" pos:end="79:56"><expr pos:start="79:55" pos:end="79:56"><name pos:start="79:55" pos:end="79:56">rt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="79:60" pos:end="79:74"><expr pos:start="79:60" pos:end="79:74"><call pos:start="79:60" pos:end="79:74"><name pos:start="79:60" pos:end="79:66">cpu_reg</name><argument_list pos:start="79:67" pos:end="79:74">(<argument pos:start="79:68" pos:end="79:68"><expr pos:start="79:68" pos:end="79:68"><name pos:start="79:68" pos:end="79:68">s</name></expr></argument>, <argument pos:start="79:71" pos:end="79:73"><expr pos:start="79:71" pos:end="79:73"><name pos:start="79:71" pos:end="79:73">rt2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="93:5">else <block pos:start="83:12" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:70">

        <expr_stmt pos:start="85:9" pos:end="89:65"><expr pos:start="85:9" pos:end="89:64"><call pos:start="85:9" pos:end="89:64"><name pos:start="85:9" pos:end="85:34">tcg_gen_atomic_cmpxchg_i64</name><argument_list pos:start="85:35" pos:end="89:64">(<argument pos:start="85:36" pos:end="85:38"><expr pos:start="85:36" pos:end="85:38"><name pos:start="85:36" pos:end="85:38">tmp</name></expr></argument>, <argument pos:start="85:41" pos:end="85:58"><expr pos:start="85:41" pos:end="85:58"><name pos:start="85:41" pos:end="85:58">cpu_exclusive_addr</name></expr></argument>, <argument pos:start="85:61" pos:end="85:77"><expr pos:start="85:61" pos:end="85:77"><name pos:start="85:61" pos:end="85:77">cpu_exclusive_val</name></expr></argument>,

                                   <argument pos:start="87:36" pos:end="87:49"><expr pos:start="87:36" pos:end="87:49"><call pos:start="87:36" pos:end="87:49"><name pos:start="87:36" pos:end="87:42">cpu_reg</name><argument_list pos:start="87:43" pos:end="87:49">(<argument pos:start="87:44" pos:end="87:44"><expr pos:start="87:44" pos:end="87:44"><name pos:start="87:44" pos:end="87:44">s</name></expr></argument>, <argument pos:start="87:47" pos:end="87:48"><expr pos:start="87:47" pos:end="87:48"><name pos:start="87:47" pos:end="87:48">rt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="87:52" pos:end="87:67"><expr pos:start="87:52" pos:end="87:67"><call pos:start="87:52" pos:end="87:67"><name pos:start="87:52" pos:end="87:64">get_mem_index</name><argument_list pos:start="87:65" pos:end="87:67">(<argument pos:start="87:66" pos:end="87:66"><expr pos:start="87:66" pos:end="87:66"><name pos:start="87:66" pos:end="87:66">s</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="89:36" pos:end="89:63"><expr pos:start="89:36" pos:end="89:63"><name pos:start="89:36" pos:end="89:39">size</name> <operator pos:start="89:41" pos:end="89:41">|</operator> <name pos:start="89:43" pos:end="89:50">MO_ALIGN</name> <operator pos:start="89:52" pos:end="89:52">|</operator> <name pos:start="89:54" pos:end="89:63"><name pos:start="89:54" pos:end="89:54">s</name><operator pos:start="89:55" pos:end="89:56">-&gt;</operator><name pos:start="89:57" pos:end="89:63">be_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:70"><expr pos:start="91:9" pos:end="91:69"><call pos:start="91:9" pos:end="91:69"><name pos:start="91:9" pos:end="91:27">tcg_gen_setcond_i64</name><argument_list pos:start="91:28" pos:end="91:69">(<argument pos:start="91:29" pos:end="91:39"><expr pos:start="91:29" pos:end="91:39"><name pos:start="91:29" pos:end="91:39">TCG_COND_NE</name></expr></argument>, <argument pos:start="91:42" pos:end="91:44"><expr pos:start="91:42" pos:end="91:44"><name pos:start="91:42" pos:end="91:44">tmp</name></expr></argument>, <argument pos:start="91:47" pos:end="91:49"><expr pos:start="91:47" pos:end="91:49"><name pos:start="91:47" pos:end="91:49">tmp</name></expr></argument>, <argument pos:start="91:52" pos:end="91:68"><expr pos:start="91:52" pos:end="91:68"><name pos:start="91:52" pos:end="91:68">cpu_exclusive_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:41"><expr pos:start="95:5" pos:end="95:40"><call pos:start="95:5" pos:end="95:40"><name pos:start="95:5" pos:end="95:19">tcg_gen_mov_i64</name><argument_list pos:start="95:20" pos:end="95:40">(<argument pos:start="95:21" pos:end="95:34"><expr pos:start="95:21" pos:end="95:34"><call pos:start="95:21" pos:end="95:34"><name pos:start="95:21" pos:end="95:27">cpu_reg</name><argument_list pos:start="95:28" pos:end="95:34">(<argument pos:start="95:29" pos:end="95:29"><expr pos:start="95:29" pos:end="95:29"><name pos:start="95:29" pos:end="95:29">s</name></expr></argument>, <argument pos:start="95:32" pos:end="95:33"><expr pos:start="95:32" pos:end="95:33"><name pos:start="95:32" pos:end="95:33">rd</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:37" pos:end="95:39"><expr pos:start="95:37" pos:end="95:39"><name pos:start="95:37" pos:end="95:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:27"><expr pos:start="97:5" pos:end="97:26"><call pos:start="97:5" pos:end="97:26"><name pos:start="97:5" pos:end="97:21">tcg_temp_free_i64</name><argument_list pos:start="97:22" pos:end="97:26">(<argument pos:start="97:23" pos:end="97:25"><expr pos:start="97:23" pos:end="97:25"><name pos:start="97:23" pos:end="97:25">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:27"><expr pos:start="99:5" pos:end="99:26"><call pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:14">tcg_gen_br</name><argument_list pos:start="99:15" pos:end="99:26">(<argument pos:start="99:16" pos:end="99:25"><expr pos:start="99:16" pos:end="99:25"><name pos:start="99:16" pos:end="99:25">done_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:30"><expr pos:start="103:5" pos:end="103:29"><call pos:start="103:5" pos:end="103:29"><name pos:start="103:5" pos:end="103:17">gen_set_label</name><argument_list pos:start="103:18" pos:end="103:29">(<argument pos:start="103:19" pos:end="103:28"><expr pos:start="103:19" pos:end="103:28"><name pos:start="103:19" pos:end="103:28">fail_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:40"><expr pos:start="105:5" pos:end="105:39"><call pos:start="105:5" pos:end="105:39"><name pos:start="105:5" pos:end="105:20">tcg_gen_movi_i64</name><argument_list pos:start="105:21" pos:end="105:39">(<argument pos:start="105:22" pos:end="105:35"><expr pos:start="105:22" pos:end="105:35"><call pos:start="105:22" pos:end="105:35"><name pos:start="105:22" pos:end="105:28">cpu_reg</name><argument_list pos:start="105:29" pos:end="105:35">(<argument pos:start="105:30" pos:end="105:30"><expr pos:start="105:30" pos:end="105:30"><name pos:start="105:30" pos:end="105:30">s</name></expr></argument>, <argument pos:start="105:33" pos:end="105:34"><expr pos:start="105:33" pos:end="105:34"><name pos:start="105:33" pos:end="105:34">rd</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="105:38" pos:end="105:38"><expr pos:start="105:38" pos:end="105:38"><literal type="number" pos:start="105:38" pos:end="105:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:30"><expr pos:start="107:5" pos:end="107:29"><call pos:start="107:5" pos:end="107:29"><name pos:start="107:5" pos:end="107:17">gen_set_label</name><argument_list pos:start="107:18" pos:end="107:29">(<argument pos:start="107:19" pos:end="107:28"><expr pos:start="107:19" pos:end="107:28"><name pos:start="107:19" pos:end="107:28">done_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:45"><expr pos:start="109:5" pos:end="109:44"><call pos:start="109:5" pos:end="109:44"><name pos:start="109:5" pos:end="109:20">tcg_gen_movi_i64</name><argument_list pos:start="109:21" pos:end="109:44">(<argument pos:start="109:22" pos:end="109:39"><expr pos:start="109:22" pos:end="109:39"><name pos:start="109:22" pos:end="109:39">cpu_exclusive_addr</name></expr></argument>, <argument pos:start="109:42" pos:end="109:43"><expr pos:start="109:42" pos:end="109:43"><operator pos:start="109:42" pos:end="109:42">-</operator><literal type="number" pos:start="109:43" pos:end="109:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
