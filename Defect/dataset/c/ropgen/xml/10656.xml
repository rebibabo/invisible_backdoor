<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10656.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">ff_llviddsp_init_x86</name><parameter_list pos:start="1:26" pos:end="1:45">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:41">LLVidDSPContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">c</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:5">

    <decl_stmt pos:start="5:5" pos:end="10:0"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">cpu_flags</name> <init pos:start="5:19" pos:end="5:38">= <expr pos:start="5:21" pos:end="5:38"><call pos:start="5:21" pos:end="5:38"><name pos:start="5:21" pos:end="5:36">av_get_cpu_flags</name><argument_list pos:start="5:37" pos:end="5:38">()</argument_list></call></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="9:1" pos:end="9:48">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:48"><name pos:start="9:5" pos:end="9:19">HAVE_INLINE_ASM</name> <operator pos:start="9:21" pos:end="9:22">&amp;&amp;</operator> <name pos:start="9:24" pos:end="9:33">HAVE_7REGS</name> <operator pos:start="9:35" pos:end="9:36">&amp;&amp;</operator> <name pos:start="9:38" pos:end="9:48">ARCH_X86_32</name></expr></cpp:if>

    <if_stmt pos:start="11:5" pos:end="16:0"><if pos:start="11:5" pos:end="16:0">if <condition pos:start="11:8" pos:end="11:37">(<expr pos:start="11:9" pos:end="11:36"><name pos:start="11:9" pos:end="11:17">cpu_flags</name> <operator pos:start="11:19" pos:end="11:19">&amp;</operator> <name pos:start="11:21" pos:end="11:36">AV_CPU_FLAG_CMOV</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="16:0"><block_content pos:start="13:9" pos:end="16:0">

        <expr_stmt pos:start="13:9" pos:end="16:0"><expr pos:start="13:9" pos:end="13:49"><name pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:9">c</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:26">add_median_pred</name></name> <operator pos:start="13:28" pos:end="13:28">=</operator> <name pos:start="13:30" pos:end="13:49">add_median_pred_cmov</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:47">(<expr pos:start="19:9" pos:end="19:46"><name pos:start="19:9" pos:end="19:19">ARCH_X86_32</name> <operator pos:start="19:21" pos:end="19:22">&amp;&amp;</operator> <call pos:start="19:24" pos:end="19:46"><name pos:start="19:24" pos:end="19:35">EXTERNAL_MMX</name><argument_list pos:start="19:36" pos:end="19:46">(<argument pos:start="19:37" pos:end="19:45"><expr pos:start="19:37" pos:end="19:45"><name pos:start="19:37" pos:end="19:45">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:49" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:40">

        <expr_stmt pos:start="21:9" pos:end="21:40"><expr pos:start="21:9" pos:end="21:39"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:9">c</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:20">add_bytes</name></name> <operator pos:start="21:22" pos:end="21:22">=</operator> <name pos:start="21:24" pos:end="21:39">ff_add_bytes_mmx</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:50">(<expr pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:19">ARCH_X86_32</name> <operator pos:start="27:21" pos:end="27:22">&amp;&amp;</operator> <call pos:start="27:24" pos:end="27:49"><name pos:start="27:24" pos:end="27:38">EXTERNAL_MMXEXT</name><argument_list pos:start="27:39" pos:end="27:49">(<argument pos:start="27:40" pos:end="27:48"><expr pos:start="27:40" pos:end="27:48"><name pos:start="27:40" pos:end="27:48">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:52" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:59">

        <comment type="block" pos:start="29:9" pos:end="29:45">/* slower than cmov version on AMD */</comment>

        <if_stmt pos:start="31:9" pos:end="33:59"><if pos:start="31:9" pos:end="33:59">if <condition pos:start="31:12" pos:end="31:45">(<expr pos:start="31:13" pos:end="31:44"><operator pos:start="31:13" pos:end="31:13">!</operator><operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:23">cpu_flags</name> <operator pos:start="31:25" pos:end="31:25">&amp;</operator> <name pos:start="31:27" pos:end="31:43">AV_CPU_FLAG_3DNOW</name><operator pos:start="31:44" pos:end="31:44">)</operator></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:59"><block_content pos:start="33:13" pos:end="33:59">

            <expr_stmt pos:start="33:13" pos:end="33:59"><expr pos:start="33:13" pos:end="33:58"><name pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:13">c</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:30">add_median_pred</name></name> <operator pos:start="33:32" pos:end="33:32">=</operator> <name pos:start="33:34" pos:end="33:58">ff_add_median_pred_mmxext</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:33">(<expr pos:start="39:9" pos:end="39:32"><call pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:21">EXTERNAL_SSE2</name><argument_list pos:start="39:22" pos:end="39:32">(<argument pos:start="39:23" pos:end="39:31"><expr pos:start="39:23" pos:end="39:31"><name pos:start="39:23" pos:end="39:31">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:35" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:53">

        <expr_stmt pos:start="41:9" pos:end="41:47"><expr pos:start="41:9" pos:end="41:46"><name pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:9">c</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:20">add_bytes</name></name>       <operator pos:start="41:28" pos:end="41:28">=</operator> <name pos:start="41:30" pos:end="41:46">ff_add_bytes_sse2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:53"><expr pos:start="43:9" pos:end="43:52"><name pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:9">c</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:26">add_median_pred</name></name> <operator pos:start="43:28" pos:end="43:28">=</operator> <name pos:start="43:30" pos:end="43:52">ff_add_median_pred_sse2</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:34">(<expr pos:start="49:9" pos:end="49:33"><call pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:22">EXTERNAL_SSSE3</name><argument_list pos:start="49:23" pos:end="49:33">(<argument pos:start="49:24" pos:end="49:32"><expr pos:start="49:24" pos:end="49:32"><name pos:start="49:24" pos:end="49:32">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:36" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:60">

        <expr_stmt pos:start="51:9" pos:end="51:50"><expr pos:start="51:9" pos:end="51:49"><name pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:9">c</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:24">add_left_pred</name></name> <operator pos:start="51:26" pos:end="51:26">=</operator> <name pos:start="51:28" pos:end="51:49">ff_add_left_pred_ssse3</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:62"><expr pos:start="53:9" pos:end="53:61"><name pos:start="53:9" pos:end="53:30"><name pos:start="53:9" pos:end="53:9">c</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:30">add_left_pred_int16</name></name> <operator pos:start="53:32" pos:end="53:32">=</operator> <name pos:start="53:34" pos:end="53:61">ff_add_left_pred_int16_ssse3</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:60"><expr pos:start="55:9" pos:end="55:59"><name pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:9">c</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:28">add_gradient_pred</name></name>   <operator pos:start="55:32" pos:end="55:32">=</operator> <name pos:start="55:34" pos:end="55:59">ff_add_gradient_pred_ssse3</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:39">(<expr pos:start="61:9" pos:end="61:38"><call pos:start="61:9" pos:end="61:38"><name pos:start="61:9" pos:end="61:27">EXTERNAL_SSSE3_FAST</name><argument_list pos:start="61:28" pos:end="61:38">(<argument pos:start="61:29" pos:end="61:37"><expr pos:start="61:29" pos:end="61:37"><name pos:start="61:29" pos:end="61:37">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:41" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:60">

        <expr_stmt pos:start="63:9" pos:end="63:60"><expr pos:start="63:9" pos:end="63:59"><name pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:9">c</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:24">add_left_pred</name></name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:59">ff_add_left_pred_unaligned_ssse3</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:33">(<expr pos:start="69:9" pos:end="69:32"><call pos:start="69:9" pos:end="69:32"><name pos:start="69:9" pos:end="69:21">EXTERNAL_SSE4</name><argument_list pos:start="69:22" pos:end="69:32">(<argument pos:start="69:23" pos:end="69:31"><expr pos:start="69:23" pos:end="69:31"><name pos:start="69:23" pos:end="69:31">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:35" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:61">

        <expr_stmt pos:start="71:9" pos:end="71:61"><expr pos:start="71:9" pos:end="71:60"><name pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:9">c</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:30">add_left_pred_int16</name></name> <operator pos:start="71:32" pos:end="71:32">=</operator> <name pos:start="71:34" pos:end="71:60">ff_add_left_pred_int16_sse4</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:38">(<expr pos:start="75:9" pos:end="75:37"><call pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:26">EXTERNAL_AVX2_FAST</name><argument_list pos:start="75:27" pos:end="75:37">(<argument pos:start="75:28" pos:end="75:36"><expr pos:start="75:28" pos:end="75:36"><name pos:start="75:28" pos:end="75:36">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:40" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:57">

        <expr_stmt pos:start="77:9" pos:end="77:47"><expr pos:start="77:9" pos:end="77:46"><name pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:9">c</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:20">add_bytes</name></name>       <operator pos:start="77:28" pos:end="77:28">=</operator> <name pos:start="77:30" pos:end="77:46">ff_add_bytes_avx2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:61"><expr pos:start="79:9" pos:end="79:60"><name pos:start="79:9" pos:end="79:24"><name pos:start="79:9" pos:end="79:9">c</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:24">add_left_pred</name></name>   <operator pos:start="79:28" pos:end="79:28">=</operator> <name pos:start="79:30" pos:end="79:60">ff_add_left_pred_unaligned_avx2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:57"><expr pos:start="81:9" pos:end="81:56"><name pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:9">c</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:28">add_gradient_pred</name></name> <operator pos:start="81:30" pos:end="81:30">=</operator> <name pos:start="81:32" pos:end="81:56">ff_add_gradient_pred_avx2</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
