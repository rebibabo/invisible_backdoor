<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14997.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">svq3_decode_slice_header</name><parameter_list pos:start="1:36" pos:end="1:58">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:50">AVCodecContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="179:1">{<block_content pos:start="5:5" pos:end="177:13">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SVQ3Context</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:21">svq3</name> <init pos:start="5:23" pos:end="5:40">= <expr pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:29">avctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">H264Context</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">h</name>    <init pos:start="7:23" pos:end="7:32">= <expr pos:start="7:25" pos:end="7:32"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:32"><name pos:start="7:26" pos:end="7:29">svq3</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:32">h</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">MpegEncContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:29">= <expr pos:start="9:25" pos:end="9:29"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:29"><name pos:start="9:26" pos:end="9:26">h</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:13"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:13">int</name></type> <name pos:start="11:15" pos:end="11:19">mb_xy</name>   <init pos:start="11:23" pos:end="11:32">= <expr pos:start="11:25" pos:end="11:32"><name pos:start="11:25" pos:end="11:32"><name pos:start="11:25" pos:end="11:25">h</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:32">mb_xy</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:17">header</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:10">header</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <call pos:start="17:14" pos:end="17:32"><name pos:start="17:14" pos:end="17:21">get_bits</name><argument_list pos:start="17:22" pos:end="17:32">(<argument pos:start="17:23" pos:end="17:28"><expr pos:start="17:23" pos:end="17:28"><operator pos:start="17:23" pos:end="17:23">&amp;</operator><name pos:start="17:24" pos:end="17:28"><name pos:start="17:24" pos:end="17:24">s</name><operator pos:start="17:25" pos:end="17:26">-&gt;</operator><name pos:start="17:27" pos:end="17:28">gb</name></name></expr></argument>, <argument pos:start="17:31" pos:end="17:31"><expr pos:start="17:31" pos:end="17:31"><literal type="number" pos:start="17:31" pos:end="17:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="79:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:79">(<expr pos:start="21:9" pos:end="21:78"><operator pos:start="21:9" pos:end="21:9">(</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:16">header</name> <operator pos:start="21:18" pos:end="21:18">&amp;</operator> <literal type="number" pos:start="21:20" pos:end="21:23">0x9F</literal><operator pos:start="21:24" pos:end="21:24">)</operator> <operator pos:start="21:26" pos:end="21:27">!=</operator> <literal type="number" pos:start="21:29" pos:end="21:29">1</literal> <operator pos:start="21:31" pos:end="21:32">&amp;&amp;</operator> <operator pos:start="21:34" pos:end="21:34">(</operator><name pos:start="21:35" pos:end="21:40">header</name> <operator pos:start="21:42" pos:end="21:42">&amp;</operator> <literal type="number" pos:start="21:44" pos:end="21:47">0x9F</literal><operator pos:start="21:48" pos:end="21:48">)</operator> <operator pos:start="21:50" pos:end="21:51">!=</operator> <literal type="number" pos:start="21:53" pos:end="21:53">2</literal><operator pos:start="21:54" pos:end="21:54">)</operator> <operator pos:start="21:56" pos:end="21:57">||</operator> <operator pos:start="21:59" pos:end="21:59">(</operator><name pos:start="21:60" pos:end="21:65">header</name> <operator pos:start="21:67" pos:end="21:67">&amp;</operator> <literal type="number" pos:start="21:69" pos:end="21:72">0x60</literal><operator pos:start="21:73" pos:end="21:73">)</operator> <operator pos:start="21:75" pos:end="21:76">==</operator> <literal type="number" pos:start="21:78" pos:end="21:78">0</literal></expr>)</condition> <block pos:start="21:81" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <comment type="block" pos:start="23:9" pos:end="23:25">/* TODO: what? */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:81"><expr pos:start="25:9" pos:end="25:80"><call pos:start="25:9" pos:end="25:80"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:80">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:37" pos:end="25:71"><expr pos:start="25:37" pos:end="25:71"><literal type="string" pos:start="25:37" pos:end="25:71">"unsupported slice header (%02X)\n"</literal></expr></argument>, <argument pos:start="25:74" pos:end="25:79"><expr pos:start="25:74" pos:end="25:79"><name pos:start="25:74" pos:end="25:79">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="79:5">else <block pos:start="29:12" pos:end="79:5">{<block_content pos:start="31:9" pos:end="77:34">

        <decl_stmt pos:start="31:9" pos:end="31:37"><decl pos:start="31:9" pos:end="31:36"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:18">length</name> <init pos:start="31:20" pos:end="31:36">= <expr pos:start="31:22" pos:end="31:36"><name pos:start="31:22" pos:end="31:27">header</name> <operator pos:start="31:29" pos:end="31:30">&gt;&gt;</operator> <literal type="number" pos:start="31:32" pos:end="31:32">5</literal> <operator pos:start="31:34" pos:end="31:34">&amp;</operator> <literal type="number" pos:start="31:36" pos:end="31:36">3</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="35:9" pos:end="39:44"><expr pos:start="35:9" pos:end="39:43"><name pos:start="35:9" pos:end="35:30"><name pos:start="35:9" pos:end="35:12">svq3</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:30">next_slice_index</name></name> <operator pos:start="35:32" pos:end="35:32">=</operator> <call pos:start="35:34" pos:end="35:55"><name pos:start="35:34" pos:end="35:47">get_bits_count</name><argument_list pos:start="35:48" pos:end="35:55">(<argument pos:start="35:49" pos:end="35:54"><expr pos:start="35:49" pos:end="35:54"><operator pos:start="35:49" pos:end="35:49">&amp;</operator><name pos:start="35:50" pos:end="35:54"><name pos:start="35:50" pos:end="35:50">s</name><operator pos:start="35:51" pos:end="35:52">-&gt;</operator><name pos:start="35:53" pos:end="35:54">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="35:57" pos:end="35:57">+</operator>

                                 <literal type="number" pos:start="37:34" pos:end="37:34">8</literal> <operator pos:start="37:36" pos:end="37:36">*</operator> <call pos:start="37:38" pos:end="37:66"><name pos:start="37:38" pos:end="37:46">show_bits</name><argument_list pos:start="37:47" pos:end="37:66">(<argument pos:start="37:48" pos:end="37:53"><expr pos:start="37:48" pos:end="37:53"><operator pos:start="37:48" pos:end="37:48">&amp;</operator><name pos:start="37:49" pos:end="37:53"><name pos:start="37:49" pos:end="37:49">s</name><operator pos:start="37:50" pos:end="37:51">-&gt;</operator><name pos:start="37:52" pos:end="37:53">gb</name></name></expr></argument>, <argument pos:start="37:56" pos:end="37:65"><expr pos:start="37:56" pos:end="37:65"><literal type="number" pos:start="37:56" pos:end="37:56">8</literal> <operator pos:start="37:58" pos:end="37:58">*</operator> <name pos:start="37:60" pos:end="37:65">length</name></expr></argument>)</argument_list></call> <operator pos:start="37:68" pos:end="37:68">+</operator>

                                 <literal type="number" pos:start="39:34" pos:end="39:34">8</literal> <operator pos:start="39:36" pos:end="39:36">*</operator> <name pos:start="39:38" pos:end="39:43">length</name></expr>;</expr_stmt>



        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:56">(<expr pos:start="43:13" pos:end="43:55"><name pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:16">svq3</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:34">next_slice_index</name></name> <operator pos:start="43:36" pos:end="43:36">&gt;</operator> <name pos:start="43:38" pos:end="43:55"><name pos:start="43:38" pos:end="43:38">s</name><operator pos:start="43:39" pos:end="43:40">-&gt;</operator><name pos:start="43:41" pos:end="43:42">gb</name><operator pos:start="43:43" pos:end="43:43">.</operator><name pos:start="43:44" pos:end="43:55">size_in_bits</name></name></expr>)</condition> <block pos:start="43:58" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:22">

            <expr_stmt pos:start="45:13" pos:end="45:71"><expr pos:start="45:13" pos:end="45:70"><call pos:start="45:13" pos:end="45:70"><name pos:start="45:13" pos:end="45:18">av_log</name><argument_list pos:start="45:19" pos:end="45:70">(<argument pos:start="45:20" pos:end="45:24"><expr pos:start="45:20" pos:end="45:24"><name pos:start="45:20" pos:end="45:24">avctx</name></expr></argument>, <argument pos:start="45:27" pos:end="45:38"><expr pos:start="45:27" pos:end="45:38"><name pos:start="45:27" pos:end="45:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:41" pos:end="45:69"><expr pos:start="45:41" pos:end="45:69"><literal type="string" pos:start="45:41" pos:end="45:69">"slice after bitstream end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:22">return <expr pos:start="47:20" pos:end="47:21"><operator pos:start="47:20" pos:end="47:20">-</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:71"><expr pos:start="53:9" pos:end="53:70"><name pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:13">gb</name><operator pos:start="53:14" pos:end="53:14">.</operator><name pos:start="53:15" pos:end="53:26">size_in_bits</name></name> <operator pos:start="53:28" pos:end="53:28">=</operator> <name pos:start="53:30" pos:end="53:51"><name pos:start="53:30" pos:end="53:33">svq3</name><operator pos:start="53:34" pos:end="53:35">-&gt;</operator><name pos:start="53:36" pos:end="53:51">next_slice_index</name></name> <operator pos:start="53:53" pos:end="53:53">-</operator> <literal type="number" pos:start="53:55" pos:end="53:55">8</literal> <operator pos:start="53:57" pos:end="53:57">*</operator> <operator pos:start="53:59" pos:end="53:59">(</operator><name pos:start="53:60" pos:end="53:65">length</name> <operator pos:start="53:67" pos:end="53:67">-</operator> <literal type="number" pos:start="53:69" pos:end="53:69">1</literal><operator pos:start="53:70" pos:end="53:70">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><call pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:17">skip_bits</name><argument_list pos:start="55:18" pos:end="55:28">(<argument pos:start="55:19" pos:end="55:24"><expr pos:start="55:19" pos:end="55:24"><operator pos:start="55:19" pos:end="55:19">&amp;</operator><name pos:start="55:20" pos:end="55:24"><name pos:start="55:20" pos:end="55:20">s</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:24">gb</name></name></expr></argument>, <argument pos:start="55:27" pos:end="55:27"><expr pos:start="55:27" pos:end="55:27"><literal type="number" pos:start="55:27" pos:end="55:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:32">(<expr pos:start="59:13" pos:end="59:31"><name pos:start="59:13" pos:end="59:31"><name pos:start="59:13" pos:end="59:16">svq3</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:31">watermark_key</name></name></expr>)</condition> <block pos:start="59:34" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:50">

            <decl_stmt pos:start="61:13" pos:end="61:88"><decl pos:start="61:13" pos:end="61:87"><type pos:start="61:13" pos:end="61:20"><name pos:start="61:13" pos:end="61:20">uint32_t</name></type> <name pos:start="61:22" pos:end="61:27">header</name> <init pos:start="61:29" pos:end="61:87">= <expr pos:start="61:31" pos:end="61:87"><call pos:start="61:31" pos:end="61:87"><name pos:start="61:31" pos:end="61:37">AV_RL32</name><argument_list pos:start="61:38" pos:end="61:87">(<argument pos:start="61:39" pos:end="61:86"><expr pos:start="61:39" pos:end="61:86"><operator pos:start="61:39" pos:end="61:39">&amp;</operator><name pos:start="61:40" pos:end="61:86"><name pos:start="61:40" pos:end="61:40">s</name><operator pos:start="61:41" pos:end="61:42">-&gt;</operator><name pos:start="61:43" pos:end="61:44">gb</name><operator pos:start="61:45" pos:end="61:45">.</operator><name pos:start="61:46" pos:end="61:51">buffer</name><index pos:start="61:52" pos:end="61:86">[<expr pos:start="61:53" pos:end="61:85"><operator pos:start="61:53" pos:end="61:53">(</operator><call pos:start="61:54" pos:end="61:75"><name pos:start="61:54" pos:end="61:67">get_bits_count</name><argument_list pos:start="61:68" pos:end="61:75">(<argument pos:start="61:69" pos:end="61:74"><expr pos:start="61:69" pos:end="61:74"><operator pos:start="61:69" pos:end="61:69">&amp;</operator><name pos:start="61:70" pos:end="61:74"><name pos:start="61:70" pos:end="61:70">s</name><operator pos:start="61:71" pos:end="61:72">-&gt;</operator><name pos:start="61:73" pos:end="61:74">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:77" pos:end="61:78">&gt;&gt;</operator> <literal type="number" pos:start="61:80" pos:end="61:80">3</literal><operator pos:start="61:81" pos:end="61:81">)</operator> <operator pos:start="61:83" pos:end="61:83">+</operator> <literal type="number" pos:start="61:85" pos:end="61:85">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="63:13" pos:end="65:50"><expr pos:start="63:13" pos:end="65:49"><call pos:start="63:13" pos:end="65:49"><name pos:start="63:13" pos:end="63:19">AV_WL32</name><argument_list pos:start="63:20" pos:end="65:49">(<argument pos:start="63:21" pos:end="63:68"><expr pos:start="63:21" pos:end="63:68"><operator pos:start="63:21" pos:end="63:21">&amp;</operator><name pos:start="63:22" pos:end="63:68"><name pos:start="63:22" pos:end="63:22">s</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:26">gb</name><operator pos:start="63:27" pos:end="63:27">.</operator><name pos:start="63:28" pos:end="63:33">buffer</name><index pos:start="63:34" pos:end="63:68">[<expr pos:start="63:35" pos:end="63:67"><operator pos:start="63:35" pos:end="63:35">(</operator><call pos:start="63:36" pos:end="63:57"><name pos:start="63:36" pos:end="63:49">get_bits_count</name><argument_list pos:start="63:50" pos:end="63:57">(<argument pos:start="63:51" pos:end="63:56"><expr pos:start="63:51" pos:end="63:56"><operator pos:start="63:51" pos:end="63:51">&amp;</operator><name pos:start="63:52" pos:end="63:56"><name pos:start="63:52" pos:end="63:52">s</name><operator pos:start="63:53" pos:end="63:54">-&gt;</operator><name pos:start="63:55" pos:end="63:56">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="63:59" pos:end="63:60">&gt;&gt;</operator> <literal type="number" pos:start="63:62" pos:end="63:62">3</literal><operator pos:start="63:63" pos:end="63:63">)</operator> <operator pos:start="63:65" pos:end="63:65">+</operator> <literal type="number" pos:start="63:67" pos:end="63:67">1</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:48"><expr pos:start="65:21" pos:end="65:48"><name pos:start="65:21" pos:end="65:26">header</name> <operator pos:start="65:28" pos:end="65:28">^</operator> <name pos:start="65:30" pos:end="65:48"><name pos:start="65:30" pos:end="65:33">svq3</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:48">watermark_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="75:9"><if pos:start="69:9" pos:end="75:9">if <condition pos:start="69:12" pos:end="69:23">(<expr pos:start="69:13" pos:end="69:22"><name pos:start="69:13" pos:end="69:18">length</name> <operator pos:start="69:20" pos:end="69:20">&gt;</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr>)</condition> <block pos:start="69:25" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:71">

            <expr_stmt pos:start="71:13" pos:end="73:71"><expr pos:start="71:13" pos:end="73:70"><call pos:start="71:13" pos:end="73:70"><name pos:start="71:13" pos:end="71:18">memcpy</name><argument_list pos:start="71:19" pos:end="73:70">(<argument pos:start="71:20" pos:end="71:73"><expr pos:start="71:20" pos:end="71:73"><operator pos:start="71:20" pos:end="71:20">(</operator><name pos:start="71:21" pos:end="71:27">uint8_t</name> <operator pos:start="71:29" pos:end="71:29">*</operator><operator pos:start="71:30" pos:end="71:30">)</operator> <operator pos:start="71:32" pos:end="71:32">&amp;</operator><name pos:start="71:33" pos:end="71:73"><name pos:start="71:33" pos:end="71:33">s</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:37">gb</name><operator pos:start="71:38" pos:end="71:38">.</operator><name pos:start="71:39" pos:end="71:44">buffer</name><index pos:start="71:45" pos:end="71:73">[<expr pos:start="71:46" pos:end="71:72"><call pos:start="71:46" pos:end="71:67"><name pos:start="71:46" pos:end="71:59">get_bits_count</name><argument_list pos:start="71:60" pos:end="71:67">(<argument pos:start="71:61" pos:end="71:66"><expr pos:start="71:61" pos:end="71:66"><operator pos:start="71:61" pos:end="71:61">&amp;</operator><name pos:start="71:62" pos:end="71:66"><name pos:start="71:62" pos:end="71:62">s</name><operator pos:start="71:63" pos:end="71:64">-&gt;</operator><name pos:start="71:65" pos:end="71:66">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="71:69" pos:end="71:70">&gt;&gt;</operator> <literal type="number" pos:start="71:72" pos:end="71:72">3</literal></expr>]</index></name></expr></argument>,

                   <argument pos:start="73:20" pos:end="73:57"><expr pos:start="73:20" pos:end="73:57"><operator pos:start="73:20" pos:end="73:20">&amp;</operator><name pos:start="73:21" pos:end="73:57"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:25">gb</name><operator pos:start="73:26" pos:end="73:26">.</operator><name pos:start="73:27" pos:end="73:32">buffer</name><index pos:start="73:33" pos:end="73:57">[<expr pos:start="73:34" pos:end="73:56"><name pos:start="73:34" pos:end="73:51"><name pos:start="73:34" pos:end="73:34">s</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:38">gb</name><operator pos:start="73:39" pos:end="73:39">.</operator><name pos:start="73:40" pos:end="73:51">size_in_bits</name></name> <operator pos:start="73:53" pos:end="73:54">&gt;&gt;</operator> <literal type="number" pos:start="73:56" pos:end="73:56">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="73:60" pos:end="73:69"><expr pos:start="73:60" pos:end="73:69"><name pos:start="73:60" pos:end="73:65">length</name> <operator pos:start="73:67" pos:end="73:67">-</operator> <literal type="number" pos:start="73:69" pos:end="73:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:34"><expr pos:start="77:9" pos:end="77:33"><call pos:start="77:9" pos:end="77:33"><name pos:start="77:9" pos:end="77:22">skip_bits_long</name><argument_list pos:start="77:23" pos:end="77:33">(<argument pos:start="77:24" pos:end="77:29"><expr pos:start="77:24" pos:end="77:29"><operator pos:start="77:24" pos:end="77:24">&amp;</operator><name pos:start="77:25" pos:end="77:29"><name pos:start="77:25" pos:end="77:25">s</name><operator pos:start="77:26" pos:end="77:27">-&gt;</operator><name pos:start="77:28" pos:end="77:29">gb</name></name></expr></argument>, <argument pos:start="77:32" pos:end="77:32"><expr pos:start="77:32" pos:end="77:32"><literal type="number" pos:start="77:32" pos:end="77:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:66">(<expr pos:start="83:9" pos:end="83:65"><operator pos:start="83:9" pos:end="83:9">(</operator><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <call pos:start="83:14" pos:end="83:39"><name pos:start="83:14" pos:end="83:31">svq3_get_ue_golomb</name><argument_list pos:start="83:32" pos:end="83:39">(<argument pos:start="83:33" pos:end="83:38"><expr pos:start="83:33" pos:end="83:38"><operator pos:start="83:33" pos:end="83:33">&amp;</operator><name pos:start="83:34" pos:end="83:38"><name pos:start="83:34" pos:end="83:34">s</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:38">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="83:40" pos:end="83:40">)</operator> <operator pos:start="83:42" pos:end="83:43">==</operator> <name pos:start="83:45" pos:end="83:55">INVALID_VLC</name> <operator pos:start="83:57" pos:end="83:58">||</operator> <name pos:start="83:60" pos:end="83:60">i</name> <operator pos:start="83:62" pos:end="83:63">&gt;=</operator> <literal type="number" pos:start="83:65" pos:end="83:65">3</literal></expr>)</condition> <block pos:start="83:68" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:18">

        <expr_stmt pos:start="85:9" pos:end="85:72"><expr pos:start="85:9" pos:end="85:71"><call pos:start="85:9" pos:end="85:71"><name pos:start="85:9" pos:end="85:14">av_log</name><argument_list pos:start="85:15" pos:end="85:71">(<argument pos:start="85:16" pos:end="85:25"><expr pos:start="85:16" pos:end="85:25"><name pos:start="85:16" pos:end="85:25"><name pos:start="85:16" pos:end="85:16">h</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:19">s</name><operator pos:start="85:20" pos:end="85:20">.</operator><name pos:start="85:21" pos:end="85:25">avctx</name></name></expr></argument>, <argument pos:start="85:28" pos:end="85:39"><expr pos:start="85:28" pos:end="85:39"><name pos:start="85:28" pos:end="85:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:42" pos:end="85:67"><expr pos:start="85:42" pos:end="85:67"><literal type="string" pos:start="85:42" pos:end="85:67">"illegal slice type %d \n"</literal></expr></argument>, <argument pos:start="85:70" pos:end="85:70"><expr pos:start="85:70" pos:end="85:70"><name pos:start="85:70" pos:end="85:70">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:18">return <expr pos:start="87:16" pos:end="87:17"><operator pos:start="87:16" pos:end="87:16">-</operator><literal type="number" pos:start="87:17" pos:end="87:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:43"><expr pos:start="93:5" pos:end="93:42"><name pos:start="93:5" pos:end="93:17"><name pos:start="93:5" pos:end="93:5">h</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:17">slice_type</name></name> <operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:42"><name pos:start="93:21" pos:end="93:39">golomb_to_pict_type</name><index pos:start="93:40" pos:end="93:42">[<expr pos:start="93:41" pos:end="93:41"><name pos:start="93:41" pos:end="93:41">i</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="97:5" pos:end="111:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:29">(<expr pos:start="97:9" pos:end="97:28"><operator pos:start="97:9" pos:end="97:9">(</operator><name pos:start="97:10" pos:end="97:15">header</name> <operator pos:start="97:17" pos:end="97:17">&amp;</operator> <literal type="number" pos:start="97:19" pos:end="97:22">0x9F</literal><operator pos:start="97:23" pos:end="97:23">)</operator> <operator pos:start="97:25" pos:end="97:26">==</operator> <literal type="number" pos:start="97:28" pos:end="97:28">2</literal></expr>)</condition> <block pos:start="97:31" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:59">

        <expr_stmt pos:start="99:9" pos:end="99:77"><expr pos:start="99:9" pos:end="99:76"><name pos:start="99:9" pos:end="99:9">i</name>              <operator pos:start="99:24" pos:end="99:24">=</operator> <ternary pos:start="99:26" pos:end="99:76"><condition pos:start="99:26" pos:end="99:43"><expr pos:start="99:26" pos:end="99:41"><operator pos:start="99:26" pos:end="99:26">(</operator><name pos:start="99:27" pos:end="99:35"><name pos:start="99:27" pos:end="99:27">s</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:35">mb_num</name></name> <operator pos:start="99:37" pos:end="99:37">&lt;</operator> <literal type="number" pos:start="99:39" pos:end="99:40">64</literal><operator pos:start="99:41" pos:end="99:41">)</operator></expr> ?</condition><then pos:start="99:45" pos:end="99:45"> <expr pos:start="99:45" pos:end="99:45"><literal type="number" pos:start="99:45" pos:end="99:45">6</literal></expr> </then><else pos:start="99:47" pos:end="99:76">: <expr pos:start="99:49" pos:end="99:76"><operator pos:start="99:49" pos:end="99:49">(</operator><literal type="number" pos:start="99:50" pos:end="99:52">1</literal> <operator pos:start="99:52" pos:end="99:52">+</operator> <call pos:start="99:54" pos:end="99:75"><name pos:start="99:54" pos:end="99:60">av_log2</name><argument_list pos:start="99:61" pos:end="99:75">(<argument pos:start="99:62" pos:end="99:74"><expr pos:start="99:62" pos:end="99:74"><name pos:start="99:62" pos:end="99:70"><name pos:start="99:62" pos:end="99:62">s</name><operator pos:start="99:63" pos:end="99:64">-&gt;</operator><name pos:start="99:65" pos:end="99:70">mb_num</name></name> <operator pos:start="99:72" pos:end="99:72">-</operator> <literal type="number" pos:start="99:74" pos:end="99:74">1</literal></expr></argument>)</argument_list></call><operator pos:start="99:76" pos:end="99:76">)</operator></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="103:59"><expr pos:start="101:9" pos:end="103:58"><name pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:22">mb_skip_run</name></name> <operator pos:start="101:24" pos:end="101:24">=</operator> <call pos:start="101:26" pos:end="101:44"><name pos:start="101:26" pos:end="101:33">get_bits</name><argument_list pos:start="101:34" pos:end="101:44">(<argument pos:start="101:35" pos:end="101:40"><expr pos:start="101:35" pos:end="101:40"><operator pos:start="101:35" pos:end="101:35">&amp;</operator><name pos:start="101:36" pos:end="101:40"><name pos:start="101:36" pos:end="101:36">s</name><operator pos:start="101:37" pos:end="101:38">-&gt;</operator><name pos:start="101:39" pos:end="101:40">gb</name></name></expr></argument>, <argument pos:start="101:43" pos:end="101:43"><expr pos:start="101:43" pos:end="101:43"><name pos:start="101:43" pos:end="101:43">i</name></expr></argument>)</argument_list></call> <operator pos:start="101:46" pos:end="101:46">-</operator>

                         <operator pos:start="103:26" pos:end="103:26">(</operator><name pos:start="103:27" pos:end="103:33"><name pos:start="103:27" pos:end="103:27">s</name><operator pos:start="103:28" pos:end="103:29">-&gt;</operator><name pos:start="103:30" pos:end="103:33">mb_y</name></name> <operator pos:start="103:35" pos:end="103:35">*</operator> <name pos:start="103:37" pos:end="103:47"><name pos:start="103:37" pos:end="103:37">s</name><operator pos:start="103:38" pos:end="103:39">-&gt;</operator><name pos:start="103:40" pos:end="103:47">mb_width</name></name> <operator pos:start="103:49" pos:end="103:49">+</operator> <name pos:start="103:51" pos:end="103:57"><name pos:start="103:51" pos:end="103:51">s</name><operator pos:start="103:52" pos:end="103:53">-&gt;</operator><name pos:start="103:54" pos:end="103:57">mb_x</name></name><operator pos:start="103:58" pos:end="103:58">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="111:5">else <block pos:start="105:12" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:27">

        <expr_stmt pos:start="107:9" pos:end="107:27"><expr pos:start="107:9" pos:end="107:26"><call pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:18">skip_bits1</name><argument_list pos:start="107:19" pos:end="107:26">(<argument pos:start="107:20" pos:end="107:25"><expr pos:start="107:20" pos:end="107:25"><operator pos:start="107:20" pos:end="107:20">&amp;</operator><name pos:start="107:21" pos:end="107:25"><name pos:start="107:21" pos:end="107:21">s</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:27"><expr pos:start="109:9" pos:end="109:26"><name pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:22">mb_skip_run</name></name> <operator pos:start="109:24" pos:end="109:24">=</operator> <literal type="number" pos:start="109:26" pos:end="109:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:44"><expr pos:start="115:5" pos:end="115:43"><name pos:start="115:5" pos:end="115:16"><name pos:start="115:5" pos:end="115:5">h</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:16">slice_num</name></name>      <operator pos:start="115:23" pos:end="115:23">=</operator> <call pos:start="115:25" pos:end="115:43"><name pos:start="115:25" pos:end="115:32">get_bits</name><argument_list pos:start="115:33" pos:end="115:43">(<argument pos:start="115:34" pos:end="115:39"><expr pos:start="115:34" pos:end="115:39"><operator pos:start="115:34" pos:end="115:34">&amp;</operator><name pos:start="115:35" pos:end="115:39"><name pos:start="115:35" pos:end="115:35">s</name><operator pos:start="115:36" pos:end="115:37">-&gt;</operator><name pos:start="115:38" pos:end="115:39">gb</name></name></expr></argument>, <argument pos:start="115:42" pos:end="115:42"><expr pos:start="115:42" pos:end="115:42"><literal type="number" pos:start="115:42" pos:end="115:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:44"><expr pos:start="117:5" pos:end="117:43"><name pos:start="117:5" pos:end="117:13"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:13">qscale</name></name>         <operator pos:start="117:23" pos:end="117:23">=</operator> <call pos:start="117:25" pos:end="117:43"><name pos:start="117:25" pos:end="117:32">get_bits</name><argument_list pos:start="117:33" pos:end="117:43">(<argument pos:start="117:34" pos:end="117:39"><expr pos:start="117:34" pos:end="117:39"><operator pos:start="117:34" pos:end="117:34">&amp;</operator><name pos:start="117:35" pos:end="117:39"><name pos:start="117:35" pos:end="117:35">s</name><operator pos:start="117:36" pos:end="117:37">-&gt;</operator><name pos:start="117:38" pos:end="117:39">gb</name></name></expr></argument>, <argument pos:start="117:42" pos:end="117:42"><expr pos:start="117:42" pos:end="117:42"><literal type="number" pos:start="117:42" pos:end="117:42">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:42"><expr pos:start="119:5" pos:end="119:41"><name pos:start="119:5" pos:end="119:21"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:21">adaptive_quant</name></name> <operator pos:start="119:23" pos:end="119:23">=</operator> <call pos:start="119:25" pos:end="119:41"><name pos:start="119:25" pos:end="119:33">get_bits1</name><argument_list pos:start="119:34" pos:end="119:41">(<argument pos:start="119:35" pos:end="119:40"><expr pos:start="119:35" pos:end="119:40"><operator pos:start="119:35" pos:end="119:35">&amp;</operator><name pos:start="119:36" pos:end="119:40"><name pos:start="119:36" pos:end="119:36">s</name><operator pos:start="119:37" pos:end="119:38">-&gt;</operator><name pos:start="119:39" pos:end="119:40">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:24">/* unknown fields */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:23"><expr pos:start="125:5" pos:end="125:22"><call pos:start="125:5" pos:end="125:22"><name pos:start="125:5" pos:end="125:14">skip_bits1</name><argument_list pos:start="125:15" pos:end="125:22">(<argument pos:start="125:16" pos:end="125:21"><expr pos:start="125:16" pos:end="125:21"><operator pos:start="125:16" pos:end="125:16">&amp;</operator><name pos:start="125:17" pos:end="125:21"><name pos:start="125:17" pos:end="125:17">s</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:21">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="129:5" pos:end="131:27"><if pos:start="129:5" pos:end="131:27">if <condition pos:start="129:8" pos:end="129:27">(<expr pos:start="129:9" pos:end="129:26"><name pos:start="129:9" pos:end="129:26"><name pos:start="129:9" pos:end="129:12">svq3</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:26">unknown_flag</name></name></expr>)</condition><block type="pseudo" pos:start="131:9" pos:end="131:27"><block_content pos:start="131:9" pos:end="131:27">

        <expr_stmt pos:start="131:9" pos:end="131:27"><expr pos:start="131:9" pos:end="131:26"><call pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:18">skip_bits1</name><argument_list pos:start="131:19" pos:end="131:26">(<argument pos:start="131:20" pos:end="131:25"><expr pos:start="131:20" pos:end="131:25"><operator pos:start="131:20" pos:end="131:20">&amp;</operator><name pos:start="131:21" pos:end="131:25"><name pos:start="131:21" pos:end="131:21">s</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:23"><expr pos:start="135:5" pos:end="135:22"><call pos:start="135:5" pos:end="135:22"><name pos:start="135:5" pos:end="135:14">skip_bits1</name><argument_list pos:start="135:15" pos:end="135:22">(<argument pos:start="135:16" pos:end="135:21"><expr pos:start="135:16" pos:end="135:21"><operator pos:start="135:16" pos:end="135:16">&amp;</operator><name pos:start="135:17" pos:end="135:21"><name pos:start="135:17" pos:end="135:17">s</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:21">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:25"><expr pos:start="137:5" pos:end="137:24"><call pos:start="137:5" pos:end="137:24"><name pos:start="137:5" pos:end="137:13">skip_bits</name><argument_list pos:start="137:14" pos:end="137:24">(<argument pos:start="137:15" pos:end="137:20"><expr pos:start="137:15" pos:end="137:20"><operator pos:start="137:15" pos:end="137:15">&amp;</operator><name pos:start="137:16" pos:end="137:20"><name pos:start="137:16" pos:end="137:16">s</name><operator pos:start="137:17" pos:end="137:18">-&gt;</operator><name pos:start="137:19" pos:end="137:20">gb</name></name></expr></argument>, <argument pos:start="137:23" pos:end="137:23"><expr pos:start="137:23" pos:end="137:23"><literal type="number" pos:start="137:23" pos:end="137:23">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="141:5" pos:end="143:29">while <condition pos:start="141:11" pos:end="141:29">(<expr pos:start="141:12" pos:end="141:28"><call pos:start="141:12" pos:end="141:28"><name pos:start="141:12" pos:end="141:20">get_bits1</name><argument_list pos:start="141:21" pos:end="141:28">(<argument pos:start="141:22" pos:end="141:27"><expr pos:start="141:22" pos:end="141:27"><operator pos:start="141:22" pos:end="141:22">&amp;</operator><name pos:start="141:23" pos:end="141:27"><name pos:start="141:23" pos:end="141:23">s</name><operator pos:start="141:24" pos:end="141:25">-&gt;</operator><name pos:start="141:26" pos:end="141:27">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="143:9" pos:end="143:29"><block_content pos:start="143:9" pos:end="143:29">

        <expr_stmt pos:start="143:9" pos:end="143:29"><expr pos:start="143:9" pos:end="143:28"><call pos:start="143:9" pos:end="143:28"><name pos:start="143:9" pos:end="143:17">skip_bits</name><argument_list pos:start="143:18" pos:end="143:28">(<argument pos:start="143:19" pos:end="143:24"><expr pos:start="143:19" pos:end="143:24"><operator pos:start="143:19" pos:end="143:19">&amp;</operator><name pos:start="143:20" pos:end="143:24"><name pos:start="143:20" pos:end="143:20">s</name><operator pos:start="143:21" pos:end="143:22">-&gt;</operator><name pos:start="143:23" pos:end="143:24">gb</name></name></expr></argument>, <argument pos:start="143:27" pos:end="143:27"><expr pos:start="143:27" pos:end="143:27"><literal type="number" pos:start="143:27" pos:end="143:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



    <comment type="block" pos:start="147:5" pos:end="147:72">/* reset intra predictors and invalidate motion vector references */</comment>

    <if_stmt pos:start="149:5" pos:end="159:5"><if pos:start="149:5" pos:end="159:5">if <condition pos:start="149:8" pos:end="149:20">(<expr pos:start="149:9" pos:end="149:19"><name pos:start="149:9" pos:end="149:15"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:15">mb_x</name></name> <operator pos:start="149:17" pos:end="149:17">&gt;</operator> <literal type="number" pos:start="149:19" pos:end="149:19">0</literal></expr>)</condition> <block pos:start="149:22" pos:end="159:5">{<block_content pos:start="151:9" pos:end="157:49">

        <expr_stmt pos:start="151:9" pos:end="153:39"><expr pos:start="151:9" pos:end="153:38"><call pos:start="151:9" pos:end="153:38"><name pos:start="151:9" pos:end="151:14">memset</name><argument_list pos:start="151:15" pos:end="153:38">(<argument pos:start="151:16" pos:end="151:65"><expr pos:start="151:16" pos:end="151:65"><name pos:start="151:16" pos:end="151:36"><name pos:start="151:16" pos:end="151:16">h</name><operator pos:start="151:17" pos:end="151:18">-&gt;</operator><name pos:start="151:19" pos:end="151:36">intra4x4_pred_mode</name></name> <operator pos:start="151:38" pos:end="151:38">+</operator> <name pos:start="151:40" pos:end="151:61"><name pos:start="151:40" pos:end="151:40">h</name><operator pos:start="151:41" pos:end="151:42">-&gt;</operator><name pos:start="151:43" pos:end="151:50">mb2br_xy</name><index pos:start="151:51" pos:end="151:61">[<expr pos:start="151:52" pos:end="151:60"><name pos:start="151:52" pos:end="151:56">mb_xy</name> <operator pos:start="151:58" pos:end="151:58">-</operator> <literal type="number" pos:start="151:60" pos:end="151:60">1</literal></expr>]</index></name> <operator pos:start="151:63" pos:end="151:63">+</operator> <literal type="number" pos:start="151:65" pos:end="151:65">3</literal></expr></argument>,

               <argument pos:start="153:16" pos:end="153:17"><expr pos:start="153:16" pos:end="153:17"><operator pos:start="153:16" pos:end="153:16">-</operator><literal type="number" pos:start="153:17" pos:end="153:17">1</literal></expr></argument>, <argument pos:start="153:20" pos:end="153:37"><expr pos:start="153:20" pos:end="153:37"><literal type="number" pos:start="153:20" pos:end="153:20">4</literal> <operator pos:start="153:22" pos:end="153:22">*</operator> <sizeof pos:start="153:24" pos:end="153:37">sizeof<argument_list pos:start="153:30" pos:end="153:37">(<argument pos:start="153:31" pos:end="153:36"><expr pos:start="153:31" pos:end="153:36"><name pos:start="153:31" pos:end="153:36">int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="157:49"><expr pos:start="155:9" pos:end="157:48"><call pos:start="155:9" pos:end="157:48"><name pos:start="155:9" pos:end="155:14">memset</name><argument_list pos:start="155:15" pos:end="157:48">(<argument pos:start="155:16" pos:end="155:67"><expr pos:start="155:16" pos:end="155:67"><name pos:start="155:16" pos:end="155:36"><name pos:start="155:16" pos:end="155:16">h</name><operator pos:start="155:17" pos:end="155:18">-&gt;</operator><name pos:start="155:19" pos:end="155:36">intra4x4_pred_mode</name></name> <operator pos:start="155:38" pos:end="155:38">+</operator> <name pos:start="155:40" pos:end="155:67"><name pos:start="155:40" pos:end="155:40">h</name><operator pos:start="155:41" pos:end="155:42">-&gt;</operator><name pos:start="155:43" pos:end="155:50">mb2br_xy</name><index pos:start="155:51" pos:end="155:67">[<expr pos:start="155:52" pos:end="155:66"><name pos:start="155:52" pos:end="155:56">mb_xy</name> <operator pos:start="155:58" pos:end="155:58">-</operator> <name pos:start="155:60" pos:end="155:66"><name pos:start="155:60" pos:end="155:60">s</name><operator pos:start="155:61" pos:end="155:62">-&gt;</operator><name pos:start="155:63" pos:end="155:66">mb_x</name></name></expr>]</index></name></expr></argument>,

               <argument pos:start="157:16" pos:end="157:17"><expr pos:start="157:16" pos:end="157:17"><operator pos:start="157:16" pos:end="157:16">-</operator><literal type="number" pos:start="157:17" pos:end="157:17">1</literal></expr></argument>, <argument pos:start="157:20" pos:end="157:47"><expr pos:start="157:20" pos:end="157:47"><literal type="number" pos:start="157:20" pos:end="157:20">8</literal> <operator pos:start="157:22" pos:end="157:22">*</operator> <sizeof pos:start="157:24" pos:end="157:37">sizeof<argument_list pos:start="157:30" pos:end="157:37">(<argument pos:start="157:31" pos:end="157:36"><expr pos:start="157:31" pos:end="157:36"><name pos:start="157:31" pos:end="157:36">int8_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="157:39" pos:end="157:39">*</operator> <name pos:start="157:41" pos:end="157:47"><name pos:start="157:41" pos:end="157:41">s</name><operator pos:start="157:42" pos:end="157:43">-&gt;</operator><name pos:start="157:44" pos:end="157:47">mb_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="161:5" pos:end="173:5"><if pos:start="161:5" pos:end="173:5">if <condition pos:start="161:8" pos:end="161:20">(<expr pos:start="161:9" pos:end="161:19"><name pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:15">mb_y</name></name> <operator pos:start="161:17" pos:end="161:17">&gt;</operator> <literal type="number" pos:start="161:19" pos:end="161:19">0</literal></expr>)</condition> <block pos:start="161:22" pos:end="173:5">{<block_content pos:start="163:9" pos:end="171:82">

        <expr_stmt pos:start="163:9" pos:end="165:65"><expr pos:start="163:9" pos:end="165:64"><call pos:start="163:9" pos:end="165:64"><name pos:start="163:9" pos:end="163:14">memset</name><argument_list pos:start="163:15" pos:end="165:64">(<argument pos:start="163:16" pos:end="163:72"><expr pos:start="163:16" pos:end="163:72"><name pos:start="163:16" pos:end="163:36"><name pos:start="163:16" pos:end="163:16">h</name><operator pos:start="163:17" pos:end="163:18">-&gt;</operator><name pos:start="163:19" pos:end="163:36">intra4x4_pred_mode</name></name> <operator pos:start="163:38" pos:end="163:38">+</operator> <name pos:start="163:40" pos:end="163:72"><name pos:start="163:40" pos:end="163:40">h</name><operator pos:start="163:41" pos:end="163:42">-&gt;</operator><name pos:start="163:43" pos:end="163:50">mb2br_xy</name><index pos:start="163:51" pos:end="163:72">[<expr pos:start="163:52" pos:end="163:71"><name pos:start="163:52" pos:end="163:56">mb_xy</name> <operator pos:start="163:58" pos:end="163:58">-</operator> <name pos:start="163:60" pos:end="163:71"><name pos:start="163:60" pos:end="163:60">s</name><operator pos:start="163:61" pos:end="163:62">-&gt;</operator><name pos:start="163:63" pos:end="163:71">mb_stride</name></name></expr>]</index></name></expr></argument>,

               <argument pos:start="165:16" pos:end="165:17"><expr pos:start="165:16" pos:end="165:17"><operator pos:start="165:16" pos:end="165:16">-</operator><literal type="number" pos:start="165:17" pos:end="165:17">1</literal></expr></argument>, <argument pos:start="165:20" pos:end="165:63"><expr pos:start="165:20" pos:end="165:63"><literal type="number" pos:start="165:20" pos:end="165:20">8</literal> <operator pos:start="165:22" pos:end="165:22">*</operator> <sizeof pos:start="165:24" pos:end="165:37">sizeof<argument_list pos:start="165:30" pos:end="165:37">(<argument pos:start="165:31" pos:end="165:36"><expr pos:start="165:31" pos:end="165:36"><name pos:start="165:31" pos:end="165:36">int8_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="165:39" pos:end="165:39">*</operator> <operator pos:start="165:41" pos:end="165:41">(</operator><name pos:start="165:42" pos:end="165:52"><name pos:start="165:42" pos:end="165:42">s</name><operator pos:start="165:43" pos:end="165:44">-&gt;</operator><name pos:start="165:45" pos:end="165:52">mb_width</name></name> <operator pos:start="165:54" pos:end="165:54">-</operator> <name pos:start="165:56" pos:end="165:62"><name pos:start="165:56" pos:end="165:56">s</name><operator pos:start="165:57" pos:end="165:58">-&gt;</operator><name pos:start="165:59" pos:end="165:62">mb_x</name></name><operator pos:start="165:63" pos:end="165:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="169:9" pos:end="171:82"><if pos:start="169:9" pos:end="171:82">if <condition pos:start="169:12" pos:end="169:24">(<expr pos:start="169:13" pos:end="169:23"><name pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:13">s</name><operator pos:start="169:14" pos:end="169:15">-&gt;</operator><name pos:start="169:16" pos:end="169:19">mb_x</name></name> <operator pos:start="169:21" pos:end="169:21">&gt;</operator> <literal type="number" pos:start="169:23" pos:end="169:23">0</literal></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:82"><block_content pos:start="171:13" pos:end="171:82">

            <expr_stmt pos:start="171:13" pos:end="171:82"><expr pos:start="171:13" pos:end="171:81"><name pos:start="171:13" pos:end="171:76"><name pos:start="171:13" pos:end="171:13">h</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:33">intra4x4_pred_mode</name><index pos:start="171:34" pos:end="171:76">[<expr pos:start="171:35" pos:end="171:75"><name pos:start="171:35" pos:end="171:71"><name pos:start="171:35" pos:end="171:35">h</name><operator pos:start="171:36" pos:end="171:37">-&gt;</operator><name pos:start="171:38" pos:end="171:45">mb2br_xy</name><index pos:start="171:46" pos:end="171:71">[<expr pos:start="171:47" pos:end="171:70"><name pos:start="171:47" pos:end="171:51">mb_xy</name> <operator pos:start="171:53" pos:end="171:53">-</operator> <name pos:start="171:55" pos:end="171:66"><name pos:start="171:55" pos:end="171:55">s</name><operator pos:start="171:56" pos:end="171:57">-&gt;</operator><name pos:start="171:58" pos:end="171:66">mb_stride</name></name> <operator pos:start="171:68" pos:end="171:68">-</operator> <literal type="number" pos:start="171:70" pos:end="171:70">1</literal></expr>]</index></name> <operator pos:start="171:73" pos:end="171:73">+</operator> <literal type="number" pos:start="171:75" pos:end="171:75">3</literal></expr>]</index></name> <operator pos:start="171:78" pos:end="171:78">=</operator> <operator pos:start="171:80" pos:end="171:80">-</operator><literal type="number" pos:start="171:81" pos:end="171:81">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="177:5" pos:end="177:13">return <expr pos:start="177:12" pos:end="177:12"><literal type="number" pos:start="177:12" pos:end="177:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
