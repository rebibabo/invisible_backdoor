<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22542.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">attach_storage_element</name><parameter_list pos:start="1:35" pos:end="3:52">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:45">SCLPDevice</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">sclp</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">SCCB</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">sccb</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:51"><decl pos:start="3:36" pos:end="3:51"><type pos:start="3:36" pos:end="3:51"><name pos:start="3:36" pos:end="3:43">uint16_t</name></type> <name pos:start="3:45" pos:end="3:51">element</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:67">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:19">assigned</name></decl>, <decl pos:start="7:22" pos:end="7:36"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:36">subincrement_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:70"><decl pos:start="9:5" pos:end="9:69"><type pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:24">AttachStorageElement</name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:37">attach_info</name> <init pos:start="9:39" pos:end="9:69">= <expr pos:start="9:41" pos:end="9:69"><operator pos:start="9:41" pos:end="9:41">(</operator><name pos:start="9:42" pos:end="9:61">AttachStorageElement</name> <operator pos:start="9:63" pos:end="9:63">*</operator><operator pos:start="9:64" pos:end="9:64">)</operator> <name pos:start="9:66" pos:end="9:69">sccb</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:62"><decl pos:start="11:5" pos:end="11:61"><type pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:24">sclpMemoryHotplugDev</name> <modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:29">mhd</name> <init pos:start="11:31" pos:end="11:61">= <expr pos:start="11:33" pos:end="11:61"><call pos:start="11:33" pos:end="11:61"><name pos:start="11:33" pos:end="11:59">get_sclp_memory_hotplug_dev</name><argument_list pos:start="11:60" pos:end="11:61">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:16"><expr pos:start="15:5" pos:end="15:15"><call pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:15">(<argument pos:start="15:12" pos:end="15:14"><expr pos:start="15:12" pos:end="15:14"><name pos:start="15:12" pos:end="15:14">mhd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:21">(<expr pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:15">element</name> <operator pos:start="19:17" pos:end="19:18">!=</operator> <literal type="number" pos:start="19:20" pos:end="19:20">1</literal></expr>)</condition> <block pos:start="19:23" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:74"><expr pos:start="21:9" pos:end="21:73"><name pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:12">sccb</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:15">h</name><operator pos:start="21:16" pos:end="21:16">.</operator><name pos:start="21:17" pos:end="21:29">response_code</name></name> <operator pos:start="21:31" pos:end="21:31">=</operator> <call pos:start="21:33" pos:end="21:73"><name pos:start="21:33" pos:end="21:43">cpu_to_be16</name><argument_list pos:start="21:44" pos:end="21:73">(<argument pos:start="21:45" pos:end="21:72"><expr pos:start="21:45" pos:end="21:72"><name pos:start="21:45" pos:end="21:72">SCLP_RC_INVALID_SCLP_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:60"><expr pos:start="29:5" pos:end="29:59"><name pos:start="29:5" pos:end="29:12">assigned</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <name pos:start="29:16" pos:end="29:36"><name pos:start="29:16" pos:end="29:18">mhd</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:36">standby_mem_size</name></name> <operator pos:start="29:38" pos:end="29:39">&gt;&gt;</operator> <name pos:start="29:41" pos:end="29:59"><name pos:start="29:41" pos:end="29:43">mhd</name><operator pos:start="29:44" pos:end="29:45">-&gt;</operator><name pos:start="29:46" pos:end="29:59">increment_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:50"><expr pos:start="31:5" pos:end="31:49"><name pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:15">attach_info</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:25">assigned</name></name> <operator pos:start="31:27" pos:end="31:27">=</operator> <call pos:start="31:29" pos:end="31:49"><name pos:start="31:29" pos:end="31:39">cpu_to_be16</name><argument_list pos:start="31:40" pos:end="31:49">(<argument pos:start="31:41" pos:end="31:48"><expr pos:start="31:41" pos:end="31:48"><name pos:start="31:41" pos:end="31:48">assigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="35:54"><expr pos:start="33:5" pos:end="35:53"><name pos:start="33:5" pos:end="33:19">subincrement_id</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <operator pos:start="33:23" pos:end="33:23">(</operator><operator pos:start="33:24" pos:end="33:24">(</operator><name pos:start="33:25" pos:end="33:32">ram_size</name> <operator pos:start="33:34" pos:end="33:35">&gt;&gt;</operator> <name pos:start="33:37" pos:end="33:55"><name pos:start="33:37" pos:end="33:39">mhd</name><operator pos:start="33:40" pos:end="33:41">-&gt;</operator><name pos:start="33:42" pos:end="33:55">increment_size</name></name><operator pos:start="33:56" pos:end="33:56">)</operator> <operator pos:start="33:58" pos:end="33:59">&lt;&lt;</operator> <literal type="number" pos:start="33:61" pos:end="33:62">16</literal><operator pos:start="33:63" pos:end="33:63">)</operator>

                      <operator pos:start="35:23" pos:end="35:23">+</operator> <name pos:start="35:25" pos:end="35:53">SCLP_STARTING_SUBINCREMENT_ID</name></expr>;</expr_stmt>

    <for pos:start="37:5" pos:end="43:5">for <control pos:start="37:9" pos:end="37:34">(<init pos:start="37:10" pos:end="37:15"><expr pos:start="37:10" pos:end="37:14"><name pos:start="37:10" pos:end="37:10">i</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <literal type="number" pos:start="37:14" pos:end="37:14">0</literal></expr>;</init> <condition pos:start="37:17" pos:end="37:29"><expr pos:start="37:17" pos:end="37:28"><name pos:start="37:17" pos:end="37:17">i</name> <operator pos:start="37:19" pos:end="37:19">&lt;</operator> <name pos:start="37:21" pos:end="37:28">assigned</name></expr>;</condition> <incr pos:start="37:31" pos:end="37:33"><expr pos:start="37:31" pos:end="37:33"><name pos:start="37:31" pos:end="37:31">i</name><operator pos:start="37:32" pos:end="37:33">++</operator></expr></incr>)</control> <block pos:start="37:36" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:47">

        <expr_stmt pos:start="39:9" pos:end="39:63"><expr pos:start="39:9" pos:end="39:62"><name pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:19">attach_info</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:28">entries</name><index pos:start="39:29" pos:end="39:31">[<expr pos:start="39:30" pos:end="39:30"><name pos:start="39:30" pos:end="39:30">i</name></expr>]</index></name> <operator pos:start="39:33" pos:end="39:33">=</operator> <call pos:start="39:35" pos:end="39:62"><name pos:start="39:35" pos:end="39:45">cpu_to_be32</name><argument_list pos:start="39:46" pos:end="39:62">(<argument pos:start="39:47" pos:end="39:61"><expr pos:start="39:47" pos:end="39:61"><name pos:start="39:47" pos:end="39:61">subincrement_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:47"><expr pos:start="41:9" pos:end="41:46"><name pos:start="41:9" pos:end="41:23">subincrement_id</name> <operator pos:start="41:25" pos:end="41:26">+=</operator> <name pos:start="41:28" pos:end="41:46">SCLP_INCREMENT_UNIT</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="45:5" pos:end="45:67"><expr pos:start="45:5" pos:end="45:66"><name pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:8">sccb</name><operator pos:start="45:9" pos:end="45:10">-&gt;</operator><name pos:start="45:11" pos:end="45:11">h</name><operator pos:start="45:12" pos:end="45:12">.</operator><name pos:start="45:13" pos:end="45:25">response_code</name></name> <operator pos:start="45:27" pos:end="45:27">=</operator> <call pos:start="45:29" pos:end="45:66"><name pos:start="45:29" pos:end="45:39">cpu_to_be16</name><argument_list pos:start="45:40" pos:end="45:66">(<argument pos:start="45:41" pos:end="45:65"><expr pos:start="45:41" pos:end="45:65"><name pos:start="45:41" pos:end="45:65">SCLP_RC_NORMAL_COMPLETION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
