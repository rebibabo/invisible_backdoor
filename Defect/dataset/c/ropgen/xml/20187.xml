<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20187.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">ds1338_send</name><parameter_list pos:start="1:23" pos:end="1:51">(<parameter pos:start="1:24" pos:end="1:36"><decl pos:start="1:24" pos:end="1:36"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:31">I2CSlave</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">i2c</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:45">uint8_t</name></type> <name pos:start="1:47" pos:end="1:50">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:13">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">DS1338State</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:53">= <expr pos:start="5:22" pos:end="5:53"><call pos:start="5:22" pos:end="5:53"><name pos:start="5:22" pos:end="5:35">FROM_I2C_SLAVE</name><argument_list pos:start="5:36" pos:end="5:53">(<argument pos:start="5:37" pos:end="5:47"><expr pos:start="5:37" pos:end="5:47"><name pos:start="5:37" pos:end="5:47">DS1338State</name></expr></argument>, <argument pos:start="5:50" pos:end="5:52"><expr pos:start="5:50" pos:end="5:52"><name pos:start="5:50" pos:end="5:52">i2c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="7:5" pos:end="15:5"><if pos:start="7:5" pos:end="15:5">if <condition pos:start="7:8" pos:end="7:21">(<expr pos:start="7:9" pos:end="7:20"><name pos:start="7:9" pos:end="7:20"><name pos:start="7:9" pos:end="7:9">s</name><operator pos:start="7:10" pos:end="7:11">-&gt;</operator><name pos:start="7:12" pos:end="7:20">addr_byte</name></name></expr>)</condition> <block pos:start="7:23" pos:end="15:5">{<block_content pos:start="9:9" pos:end="13:17">

        <expr_stmt pos:start="9:9" pos:end="9:22"><expr pos:start="9:9" pos:end="9:21"><name pos:start="9:9" pos:end="9:14"><name pos:start="9:9" pos:end="9:9">s</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:14">ptr</name></name> <operator pos:start="9:16" pos:end="9:16">=</operator> <name pos:start="9:18" pos:end="9:21">data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="11:9" pos:end="11:25"><expr pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:20">addr_byte</name></name> <operator pos:start="11:22" pos:end="11:22">=</operator> <literal type="number" pos:start="11:24" pos:end="11:24">0</literal></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:32"><expr pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:12">nvram</name><index pos:start="17:13" pos:end="17:24">[<expr pos:start="17:14" pos:end="17:23"><name pos:start="17:14" pos:end="17:19"><name pos:start="17:14" pos:end="17:14">s</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:19">ptr</name></name> <operator pos:start="17:21" pos:end="17:21">-</operator> <literal type="number" pos:start="17:23" pos:end="17:23">8</literal></expr>]</index></name> <operator pos:start="17:26" pos:end="17:26">=</operator> <name pos:start="17:28" pos:end="17:31">data</name></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="97:5"><if pos:start="19:5" pos:end="97:5">if <condition pos:start="19:8" pos:end="19:17">(<expr pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:12">data</name> <operator pos:start="19:14" pos:end="19:14">&lt;</operator> <literal type="number" pos:start="19:16" pos:end="19:16">8</literal></expr>)</condition> <block pos:start="19:19" pos:end="97:5">{<block_content pos:start="21:9" pos:end="95:48">

        <expr_stmt pos:start="21:9" pos:end="21:46"><expr pos:start="21:9" pos:end="21:45"><call pos:start="21:9" pos:end="21:45"><name pos:start="21:9" pos:end="21:25">qemu_get_timedate</name><argument_list pos:start="21:26" pos:end="21:45">(<argument pos:start="21:27" pos:end="21:33"><expr pos:start="21:27" pos:end="21:33"><operator pos:start="21:27" pos:end="21:27">&amp;</operator><name pos:start="21:28" pos:end="21:33"><name pos:start="21:28" pos:end="21:28">s</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:33">now</name></name></expr></argument>, <argument pos:start="21:36" pos:end="21:44"><expr pos:start="21:36" pos:end="21:44"><name pos:start="21:36" pos:end="21:44"><name pos:start="21:36" pos:end="21:36">s</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:44">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="23:9" pos:end="93:9">switch<condition pos:start="23:15" pos:end="23:20">(<expr pos:start="23:16" pos:end="23:19"><name pos:start="23:16" pos:end="23:19">data</name></expr>)</condition> <block pos:start="23:22" pos:end="93:9">{<block_content pos:start="25:9" pos:end="91:18">

        <case pos:start="25:9" pos:end="25:15">case <expr pos:start="25:14" pos:end="25:14"><literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>:</case>

            <comment type="block" pos:start="27:13" pos:end="27:49">/* TODO: Implement CH (stop) bit.  */</comment>

            <expr_stmt pos:start="29:13" pos:end="29:50"><expr pos:start="29:13" pos:end="29:49"><name pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:18">now</name><operator pos:start="29:19" pos:end="29:19">.</operator><name pos:start="29:20" pos:end="29:25">tm_sec</name></name> <operator pos:start="29:27" pos:end="29:27">=</operator> <call pos:start="29:29" pos:end="29:49"><name pos:start="29:29" pos:end="29:36">from_bcd</name><argument_list pos:start="29:37" pos:end="29:49">(<argument pos:start="29:38" pos:end="29:48"><expr pos:start="29:38" pos:end="29:48"><name pos:start="29:38" pos:end="29:41">data</name> <operator pos:start="29:43" pos:end="29:43">&amp;</operator> <literal type="number" pos:start="29:45" pos:end="29:48">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="31:13" pos:end="31:18">break;</break>

        <case pos:start="33:9" pos:end="33:15">case <expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr>:</case>

            <expr_stmt pos:start="35:13" pos:end="35:50"><expr pos:start="35:13" pos:end="35:49"><name pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:18">now</name><operator pos:start="35:19" pos:end="35:19">.</operator><name pos:start="35:20" pos:end="35:25">tm_min</name></name> <operator pos:start="35:27" pos:end="35:27">=</operator> <call pos:start="35:29" pos:end="35:49"><name pos:start="35:29" pos:end="35:36">from_bcd</name><argument_list pos:start="35:37" pos:end="35:49">(<argument pos:start="35:38" pos:end="35:48"><expr pos:start="35:38" pos:end="35:48"><name pos:start="35:38" pos:end="35:41">data</name> <operator pos:start="35:43" pos:end="35:43">&amp;</operator> <literal type="number" pos:start="35:45" pos:end="35:48">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="37:13" pos:end="37:18">break;</break>

        <case pos:start="39:9" pos:end="39:15">case <expr pos:start="39:14" pos:end="39:14"><literal type="number" pos:start="39:14" pos:end="39:14">2</literal></expr>:</case>

            <if_stmt pos:start="41:13" pos:end="57:13"><if pos:start="41:13" pos:end="53:13">if <condition pos:start="41:16" pos:end="41:28">(<expr pos:start="41:17" pos:end="41:27"><name pos:start="41:17" pos:end="41:20">data</name> <operator pos:start="41:22" pos:end="41:22">&amp;</operator> <literal type="number" pos:start="41:24" pos:end="41:27">0x40</literal></expr>)</condition> <block pos:start="41:30" pos:end="53:13">{<block_content pos:start="43:17" pos:end="51:17">

                <if_stmt pos:start="43:17" pos:end="51:17"><if pos:start="43:17" pos:end="47:17">if <condition pos:start="43:20" pos:end="43:32">(<expr pos:start="43:21" pos:end="43:31"><name pos:start="43:21" pos:end="43:24">data</name> <operator pos:start="43:26" pos:end="43:26">&amp;</operator> <literal type="number" pos:start="43:28" pos:end="43:31">0x20</literal></expr>)</condition> <block pos:start="43:34" pos:end="47:17">{<block_content pos:start="45:21" pos:end="45:54">

                    <expr_stmt pos:start="45:21" pos:end="45:54"><expr pos:start="45:21" pos:end="45:53"><name pos:start="45:21" pos:end="45:24">data</name> <operator pos:start="45:26" pos:end="45:26">=</operator> <call pos:start="45:28" pos:end="45:48"><name pos:start="45:28" pos:end="45:35">from_bcd</name><argument_list pos:start="45:36" pos:end="45:48">(<argument pos:start="45:37" pos:end="45:47"><expr pos:start="45:37" pos:end="45:47"><name pos:start="45:37" pos:end="45:40">data</name> <operator pos:start="45:42" pos:end="45:42">&amp;</operator> <literal type="number" pos:start="45:44" pos:end="45:47">0x4f</literal></expr></argument>)</argument_list></call> <operator pos:start="45:50" pos:end="45:50">+</operator> <literal type="number" pos:start="45:52" pos:end="45:53">11</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="47:19" pos:end="51:17">else <block pos:start="47:24" pos:end="51:17">{<block_content pos:start="49:21" pos:end="49:53">

                    <expr_stmt pos:start="49:21" pos:end="49:53"><expr pos:start="49:21" pos:end="49:52"><name pos:start="49:21" pos:end="49:24">data</name> <operator pos:start="49:26" pos:end="49:26">=</operator> <call pos:start="49:28" pos:end="49:48"><name pos:start="49:28" pos:end="49:35">from_bcd</name><argument_list pos:start="49:36" pos:end="49:48">(<argument pos:start="49:37" pos:end="49:47"><expr pos:start="49:37" pos:end="49:47"><name pos:start="49:37" pos:end="49:40">data</name> <operator pos:start="49:42" pos:end="49:42">&amp;</operator> <literal type="number" pos:start="49:44" pos:end="49:47">0x1f</literal></expr></argument>)</argument_list></call> <operator pos:start="49:50" pos:end="49:50">-</operator> <literal type="number" pos:start="49:52" pos:end="49:52">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="53:15" pos:end="57:13">else <block pos:start="53:20" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:38">

                <expr_stmt pos:start="55:17" pos:end="55:38"><expr pos:start="55:17" pos:end="55:37"><name pos:start="55:17" pos:end="55:20">data</name> <operator pos:start="55:22" pos:end="55:22">=</operator> <call pos:start="55:24" pos:end="55:37"><name pos:start="55:24" pos:end="55:31">from_bcd</name><argument_list pos:start="55:32" pos:end="55:37">(<argument pos:start="55:33" pos:end="55:36"><expr pos:start="55:33" pos:end="55:36"><name pos:start="55:33" pos:end="55:36">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:34"><expr pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:18">now</name><operator pos:start="59:19" pos:end="59:19">.</operator><name pos:start="59:20" pos:end="59:26">tm_hour</name></name> <operator pos:start="59:28" pos:end="59:28">=</operator> <name pos:start="59:30" pos:end="59:33">data</name></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <case pos:start="63:9" pos:end="63:15">case <expr pos:start="63:14" pos:end="63:14"><literal type="number" pos:start="63:14" pos:end="63:14">3</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:52"><expr pos:start="65:13" pos:end="65:51"><name pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:18">now</name><operator pos:start="65:19" pos:end="65:19">.</operator><name pos:start="65:20" pos:end="65:26">tm_wday</name></name> <operator pos:start="65:28" pos:end="65:28">=</operator> <call pos:start="65:30" pos:end="65:47"><name pos:start="65:30" pos:end="65:37">from_bcd</name><argument_list pos:start="65:38" pos:end="65:47">(<argument pos:start="65:39" pos:end="65:46"><expr pos:start="65:39" pos:end="65:46"><name pos:start="65:39" pos:end="65:42">data</name> <operator pos:start="65:44" pos:end="65:44">&amp;</operator> <literal type="number" pos:start="65:46" pos:end="65:46">7</literal></expr></argument>)</argument_list></call> <operator pos:start="65:49" pos:end="65:49">-</operator> <literal type="number" pos:start="65:51" pos:end="65:51">1</literal></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:15">case <expr pos:start="69:14" pos:end="69:14"><literal type="number" pos:start="69:14" pos:end="69:14">4</literal></expr>:</case>

            <expr_stmt pos:start="71:13" pos:end="71:51"><expr pos:start="71:13" pos:end="71:50"><name pos:start="71:13" pos:end="71:26"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:18">now</name><operator pos:start="71:19" pos:end="71:19">.</operator><name pos:start="71:20" pos:end="71:26">tm_mday</name></name> <operator pos:start="71:28" pos:end="71:28">=</operator> <call pos:start="71:30" pos:end="71:50"><name pos:start="71:30" pos:end="71:37">from_bcd</name><argument_list pos:start="71:38" pos:end="71:50">(<argument pos:start="71:39" pos:end="71:49"><expr pos:start="71:39" pos:end="71:49"><name pos:start="71:39" pos:end="71:42">data</name> <operator pos:start="71:44" pos:end="71:44">&amp;</operator> <literal type="number" pos:start="71:46" pos:end="71:49">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        <case pos:start="75:9" pos:end="75:15">case <expr pos:start="75:14" pos:end="75:14"><literal type="number" pos:start="75:14" pos:end="75:14">5</literal></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:54"><expr pos:start="77:13" pos:end="77:53"><name pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:18">now</name><operator pos:start="77:19" pos:end="77:19">.</operator><name pos:start="77:20" pos:end="77:25">tm_mon</name></name> <operator pos:start="77:27" pos:end="77:27">=</operator> <call pos:start="77:29" pos:end="77:49"><name pos:start="77:29" pos:end="77:36">from_bcd</name><argument_list pos:start="77:37" pos:end="77:49">(<argument pos:start="77:38" pos:end="77:48"><expr pos:start="77:38" pos:end="77:48"><name pos:start="77:38" pos:end="77:41">data</name> <operator pos:start="77:43" pos:end="77:43">&amp;</operator> <literal type="number" pos:start="77:45" pos:end="77:48">0x1f</literal></expr></argument>)</argument_list></call> <operator pos:start="77:51" pos:end="77:51">-</operator> <literal type="number" pos:start="77:53" pos:end="77:53">1</literal></expr>;</expr_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break>

        <case pos:start="81:9" pos:end="81:15">case <expr pos:start="81:14" pos:end="81:14"><literal type="number" pos:start="81:14" pos:end="81:14">6</literal></expr>:</case>

            <expr_stmt pos:start="83:13" pos:end="83:50"><expr pos:start="83:13" pos:end="83:49"><name pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:18">now</name><operator pos:start="83:19" pos:end="83:19">.</operator><name pos:start="83:20" pos:end="83:26">tm_year</name></name> <operator pos:start="83:28" pos:end="83:28">=</operator> <call pos:start="83:30" pos:end="83:43"><name pos:start="83:30" pos:end="83:37">from_bcd</name><argument_list pos:start="83:38" pos:end="83:43">(<argument pos:start="83:39" pos:end="83:42"><expr pos:start="83:39" pos:end="83:42"><name pos:start="83:39" pos:end="83:42">data</name></expr></argument>)</argument_list></call> <operator pos:start="83:45" pos:end="83:45">+</operator> <literal type="number" pos:start="83:47" pos:end="83:49">100</literal></expr>;</expr_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        <case pos:start="87:9" pos:end="87:15">case <expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">7</literal></expr>:</case>

            <comment type="block" pos:start="89:13" pos:end="89:55">/* Control register. Currently ignored.  */</comment>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="95:9" pos:end="95:48"><expr pos:start="95:9" pos:end="95:47"><name pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:17">offset</name></name> <operator pos:start="95:19" pos:end="95:19">=</operator> <call pos:start="95:21" pos:end="95:47"><name pos:start="95:21" pos:end="95:38">qemu_timedate_diff</name><argument_list pos:start="95:39" pos:end="95:47">(<argument pos:start="95:40" pos:end="95:46"><expr pos:start="95:40" pos:end="95:46"><operator pos:start="95:40" pos:end="95:40">&amp;</operator><name pos:start="95:41" pos:end="95:46"><name pos:start="95:41" pos:end="95:41">s</name><operator pos:start="95:42" pos:end="95:43">-&gt;</operator><name pos:start="95:44" pos:end="95:46">now</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:33"><expr pos:start="99:5" pos:end="99:32"><name pos:start="99:5" pos:end="99:10"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:10">ptr</name></name> <operator pos:start="99:12" pos:end="99:12">=</operator> <operator pos:start="99:14" pos:end="99:14">(</operator><name pos:start="99:15" pos:end="99:20"><name pos:start="99:15" pos:end="99:15">s</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:20">ptr</name></name> <operator pos:start="99:22" pos:end="99:22">+</operator> <literal type="number" pos:start="99:24" pos:end="99:24">1</literal><operator pos:start="99:25" pos:end="99:25">)</operator> <operator pos:start="99:27" pos:end="99:27">&amp;</operator> <literal type="number" pos:start="99:29" pos:end="99:32">0xff</literal></expr>;</expr_stmt>

    <return pos:start="101:5" pos:end="101:13">return <expr pos:start="101:12" pos:end="101:12"><literal type="number" pos:start="101:12" pos:end="101:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
