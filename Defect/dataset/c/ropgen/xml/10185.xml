<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10185.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">cpu_exec_nocache</name><parameter_list pos:start="1:29" pos:end="3:55">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:37">CPUState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">cpu</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:58">max_cycles</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:54"><decl pos:start="3:30" pos:end="3:54"><type pos:start="3:30" pos:end="3:54"><name pos:start="3:30" pos:end="3:45">TranslationBlock</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:54">orig_tb</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="41:1">{<block_content pos:start="7:5" pos:end="39:16">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">TranslationBlock</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">tb</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="13:63">/* Should never happen.

       We only end up here when an existing TB is too long.  */</comment>

    <if_stmt pos:start="15:5" pos:end="17:35"><if pos:start="15:5" pos:end="17:35">if <condition pos:start="15:8" pos:end="15:35">(<expr pos:start="15:9" pos:end="15:34"><name pos:start="15:9" pos:end="15:18">max_cycles</name> <operator pos:start="15:20" pos:end="15:20">&gt;</operator> <name pos:start="15:22" pos:end="15:34">CF_COUNT_MASK</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:35"><block_content pos:start="17:9" pos:end="17:35">

        <expr_stmt pos:start="17:9" pos:end="17:35"><expr pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:18">max_cycles</name> <operator pos:start="17:20" pos:end="17:20">=</operator> <name pos:start="17:22" pos:end="17:34">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="23:46"><expr pos:start="21:5" pos:end="23:45"><name pos:start="21:5" pos:end="21:6">tb</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <call pos:start="21:10" pos:end="23:45"><name pos:start="21:10" pos:end="21:20">tb_gen_code</name><argument_list pos:start="21:21" pos:end="23:45">(<argument pos:start="21:22" pos:end="21:24"><expr pos:start="21:22" pos:end="21:24"><name pos:start="21:22" pos:end="21:24">cpu</name></expr></argument>, <argument pos:start="21:27" pos:end="21:37"><expr pos:start="21:27" pos:end="21:37"><name pos:start="21:27" pos:end="21:37"><name pos:start="21:27" pos:end="21:33">orig_tb</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:37">pc</name></name></expr></argument>, <argument pos:start="21:40" pos:end="21:55"><expr pos:start="21:40" pos:end="21:55"><name pos:start="21:40" pos:end="21:55"><name pos:start="21:40" pos:end="21:46">orig_tb</name><operator pos:start="21:47" pos:end="21:48">-&gt;</operator><name pos:start="21:49" pos:end="21:55">cs_base</name></name></expr></argument>, <argument pos:start="21:58" pos:end="21:71"><expr pos:start="21:58" pos:end="21:71"><name pos:start="21:58" pos:end="21:71"><name pos:start="21:58" pos:end="21:64">orig_tb</name><operator pos:start="21:65" pos:end="21:66">-&gt;</operator><name pos:start="21:67" pos:end="21:71">flags</name></name></expr></argument>,

                     <argument pos:start="23:22" pos:end="23:44"><expr pos:start="23:22" pos:end="23:44"><name pos:start="23:22" pos:end="23:31">max_cycles</name> <operator pos:start="23:33" pos:end="23:33">|</operator> <name pos:start="23:35" pos:end="23:44">CF_NOCACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:70"><expr pos:start="25:5" pos:end="25:69"><name pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:6">tb</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:15">orig_tb</name></name> <operator pos:start="25:17" pos:end="25:17">=</operator> <ternary pos:start="25:19" pos:end="25:69"><condition pos:start="25:19" pos:end="25:54"><expr pos:start="25:19" pos:end="25:52"><name pos:start="25:19" pos:end="25:52"><name pos:start="25:19" pos:end="25:25">tcg_ctx</name><operator pos:start="25:26" pos:end="25:26">.</operator><name pos:start="25:27" pos:end="25:32">tb_ctx</name><operator pos:start="25:33" pos:end="25:33">.</operator><name pos:start="25:34" pos:end="25:52">tb_invalidated_flag</name></name></expr> ?</condition><then pos:start="25:56" pos:end="25:59"> <expr pos:start="25:56" pos:end="25:59"><name pos:start="25:56" pos:end="25:59">NULL</name></expr> </then><else pos:start="25:61" pos:end="25:69">: <expr pos:start="25:63" pos:end="25:69"><name pos:start="25:63" pos:end="25:69">orig_tb</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:25"><expr pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:7">cpu</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:19">current_tb</name></name> <operator pos:start="27:21" pos:end="27:21">=</operator> <name pos:start="27:23" pos:end="27:24">tb</name></expr>;</expr_stmt>

    <comment type="block" pos:start="29:5" pos:end="29:36">/* execute the generated code */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:38"><expr pos:start="31:5" pos:end="31:37"><call pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:25">trace_exec_tb_nocache</name><argument_list pos:start="31:26" pos:end="31:37">(<argument pos:start="31:27" pos:end="31:28"><expr pos:start="31:27" pos:end="31:28"><name pos:start="31:27" pos:end="31:28">tb</name></expr></argument>, <argument pos:start="31:31" pos:end="31:36"><expr pos:start="31:31" pos:end="31:36"><name pos:start="31:31" pos:end="31:36"><name pos:start="31:31" pos:end="31:32">tb</name><operator pos:start="31:33" pos:end="31:34">-&gt;</operator><name pos:start="31:35" pos:end="31:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:33"><expr pos:start="33:5" pos:end="33:32"><call pos:start="33:5" pos:end="33:32"><name pos:start="33:5" pos:end="33:15">cpu_tb_exec</name><argument_list pos:start="33:16" pos:end="33:32">(<argument pos:start="33:17" pos:end="33:19"><expr pos:start="33:17" pos:end="33:19"><name pos:start="33:17" pos:end="33:19">cpu</name></expr></argument>, <argument pos:start="33:22" pos:end="33:31"><expr pos:start="33:22" pos:end="33:31"><name pos:start="33:22" pos:end="33:31"><name pos:start="33:22" pos:end="33:23">tb</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:31">tc_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:27"><expr pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:7">cpu</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:19">current_tb</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:26">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><call pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:22">tb_phys_invalidate</name><argument_list pos:start="37:23" pos:end="37:30">(<argument pos:start="37:24" pos:end="37:25"><expr pos:start="37:24" pos:end="37:25"><name pos:start="37:24" pos:end="37:25">tb</name></expr></argument>, <argument pos:start="37:28" pos:end="37:29"><expr pos:start="37:28" pos:end="37:29"><operator pos:start="37:28" pos:end="37:28">-</operator><literal type="number" pos:start="37:29" pos:end="37:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><call pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:11">tb_free</name><argument_list pos:start="39:12" pos:end="39:15">(<argument pos:start="39:13" pos:end="39:14"><expr pos:start="39:13" pos:end="39:14"><name pos:start="39:13" pos:end="39:14">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
