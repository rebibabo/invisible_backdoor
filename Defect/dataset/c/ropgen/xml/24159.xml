<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24159.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">xen_pt_region_update</name><parameter_list pos:start="1:33" pos:end="3:71">(<parameter pos:start="1:34" pos:end="1:58"><decl pos:start="1:34" pos:end="1:58"><type pos:start="1:34" pos:end="1:58"><name pos:start="1:34" pos:end="1:55">XenPCIPassthroughState</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:58">s</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:57"><decl pos:start="3:34" pos:end="3:57"><type pos:start="3:34" pos:end="3:57"><name pos:start="3:34" pos:end="3:52">MemoryRegionSection</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:57">sec</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:70"><decl pos:start="3:60" pos:end="3:70"><type pos:start="3:60" pos:end="3:70"><name pos:start="3:60" pos:end="3:63">bool</name></type> <name pos:start="3:65" pos:end="3:70">adding</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="129:1">{<block_content pos:start="7:5" pos:end="127:5">

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">PCIDevice</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">d</name> <init pos:start="7:18" pos:end="7:26">= <expr pos:start="7:20" pos:end="7:26"><operator pos:start="7:20" pos:end="7:20">&amp;</operator><name pos:start="7:21" pos:end="7:26"><name pos:start="7:21" pos:end="7:21">s</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:26">dev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MemoryRegion</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:20">mr</name> <init pos:start="9:22" pos:end="9:30">= <expr pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:26">sec</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:30">mr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">bar</name> <init pos:start="11:13" pos:end="11:16">= <expr pos:start="11:15" pos:end="11:16"><operator pos:start="11:15" pos:end="11:15">-</operator><literal type="number" pos:start="11:16" pos:end="11:16">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:11"><decl pos:start="13:5" pos:end="13:10"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:61"><decl pos:start="15:5" pos:end="15:60"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">op</name> <init pos:start="15:12" pos:end="15:60">= <expr pos:start="15:14" pos:end="15:60"><ternary pos:start="15:14" pos:end="15:60"><condition pos:start="15:14" pos:end="15:21"><expr pos:start="15:14" pos:end="15:19"><name pos:start="15:14" pos:end="15:19">adding</name></expr> ?</condition><then pos:start="15:23" pos:end="15:38"> <expr pos:start="15:23" pos:end="15:38"><name pos:start="15:23" pos:end="15:38">DPCI_ADD_MAPPING</name></expr> </then><else pos:start="15:40" pos:end="15:60">: <expr pos:start="15:42" pos:end="15:60"><name pos:start="15:42" pos:end="15:60">DPCI_REMOVE_MAPPING</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="27:6"><decl pos:start="17:5" pos:end="27:5"><type pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:23">CheckBarArgs</name></name></type> <name pos:start="17:25" pos:end="17:28">args</name> <init pos:start="17:30" pos:end="27:5">= <expr pos:start="17:32" pos:end="27:5"><block pos:start="17:32" pos:end="27:5">{

        <expr pos:start="19:9" pos:end="19:14"><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:10">s</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <name pos:start="19:14" pos:end="19:14">s</name></expr>,

        <expr pos:start="21:9" pos:end="21:48"><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:13">addr</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <name pos:start="21:17" pos:end="21:48"><name pos:start="21:17" pos:end="21:19">sec</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:48">offset_within_address_space</name></name></expr>,

        <expr pos:start="23:9" pos:end="23:39"><operator pos:start="23:9" pos:end="23:9">.</operator><name pos:start="23:10" pos:end="23:13">size</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <call pos:start="23:17" pos:end="23:39"><name pos:start="23:17" pos:end="23:28">int128_get64</name><argument_list pos:start="23:29" pos:end="23:39">(<argument pos:start="23:30" pos:end="23:38"><expr pos:start="23:30" pos:end="23:38"><name pos:start="23:30" pos:end="23:38"><name pos:start="23:30" pos:end="23:32">sec</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:38">size</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="25:9" pos:end="25:19"><operator pos:start="25:9" pos:end="25:9">.</operator><name pos:start="25:10" pos:end="25:11">rc</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:19">false</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:40"><expr pos:start="31:5" pos:end="31:39"><name pos:start="31:5" pos:end="31:7">bar</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:39"><name pos:start="31:11" pos:end="31:32">xen_pt_bar_from_region</name><argument_list pos:start="31:33" pos:end="31:39">(<argument pos:start="31:34" pos:end="31:34"><expr pos:start="31:34" pos:end="31:34"><name pos:start="31:34" pos:end="31:34">s</name></expr></argument>, <argument pos:start="31:37" pos:end="31:38"><expr pos:start="31:37" pos:end="31:38"><name pos:start="31:37" pos:end="31:38">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:56">(<expr pos:start="33:9" pos:end="33:55"><name pos:start="33:9" pos:end="33:11">bar</name> <operator pos:start="33:13" pos:end="33:14">==</operator> <operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal> <operator pos:start="33:19" pos:end="33:20">&amp;&amp;</operator> <operator pos:start="33:22" pos:end="33:22">(</operator><operator pos:start="33:23" pos:end="33:23">!</operator><name pos:start="33:24" pos:end="33:30"><name pos:start="33:24" pos:end="33:24">s</name><operator pos:start="33:25" pos:end="33:26">-&gt;</operator><name pos:start="33:27" pos:end="33:30">msix</name></name> <operator pos:start="33:32" pos:end="33:33">||</operator> <operator pos:start="33:35" pos:end="33:35">&amp;</operator><name pos:start="33:36" pos:end="33:48"><name pos:start="33:36" pos:end="33:36">s</name><operator pos:start="33:37" pos:end="33:38">-&gt;</operator><name pos:start="33:39" pos:end="33:42">msix</name><operator pos:start="33:43" pos:end="33:44">-&gt;</operator><name pos:start="33:45" pos:end="33:48">mmio</name></name> <operator pos:start="33:50" pos:end="33:51">!=</operator> <name pos:start="33:53" pos:end="33:54">mr</name><operator pos:start="33:55" pos:end="33:55">)</operator></expr>)</condition> <block pos:start="33:58" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:15">

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="53:5"><if pos:start="41:5" pos:end="53:5">if <condition pos:start="41:8" pos:end="41:40">(<expr pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:15">msix</name></name> <operator pos:start="41:17" pos:end="41:18">&amp;&amp;</operator> <operator pos:start="41:20" pos:end="41:20">&amp;</operator><name pos:start="41:21" pos:end="41:33"><name pos:start="41:21" pos:end="41:21">s</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:27">msix</name><operator pos:start="41:28" pos:end="41:29">-&gt;</operator><name pos:start="41:30" pos:end="41:33">mmio</name></name> <operator pos:start="41:35" pos:end="41:36">==</operator> <name pos:start="41:38" pos:end="41:39">mr</name></expr>)</condition> <block pos:start="41:42" pos:end="53:5">{<block_content pos:start="43:9" pos:end="51:15">

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:19">(<expr pos:start="43:13" pos:end="43:18"><name pos:start="43:13" pos:end="43:18">adding</name></expr>)</condition> <block pos:start="43:21" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:65">

            <expr_stmt pos:start="45:13" pos:end="45:71"><expr pos:start="45:13" pos:end="45:70"><name pos:start="45:13" pos:end="45:35"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:19">msix</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:35">mmio_base_addr</name></name> <operator pos:start="45:37" pos:end="45:37">=</operator> <name pos:start="45:39" pos:end="45:70"><name pos:start="45:39" pos:end="45:41">sec</name><operator pos:start="45:42" pos:end="45:43">-&gt;</operator><name pos:start="45:44" pos:end="45:70">offset_within_address_space</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:65"><expr pos:start="47:13" pos:end="47:64"><name pos:start="47:13" pos:end="47:14">rc</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <call pos:start="47:18" pos:end="47:64"><name pos:start="47:18" pos:end="47:41">xen_pt_msix_update_remap</name><argument_list pos:start="47:42" pos:end="47:64">(<argument pos:start="47:43" pos:end="47:43"><expr pos:start="47:43" pos:end="47:43"><name pos:start="47:43" pos:end="47:43">s</name></expr></argument>, <argument pos:start="47:46" pos:end="47:63"><expr pos:start="47:46" pos:end="47:63"><name pos:start="47:46" pos:end="47:63"><name pos:start="47:46" pos:end="47:46">s</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:52">msix</name><operator pos:start="47:53" pos:end="47:54">-&gt;</operator><name pos:start="47:55" pos:end="47:63">bar_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:40"><expr pos:start="57:5" pos:end="57:39"><name pos:start="57:5" pos:end="57:13"><name pos:start="57:5" pos:end="57:8">args</name><operator pos:start="57:9" pos:end="57:9">.</operator><name pos:start="57:10" pos:end="57:13">type</name></name> <operator pos:start="57:15" pos:end="57:15">=</operator> <name pos:start="57:17" pos:end="57:34"><name pos:start="57:17" pos:end="57:17">d</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:29">io_regions</name><index pos:start="57:30" pos:end="57:34">[<expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:33">bar</name></expr>]</index></name><operator pos:start="57:35" pos:end="57:35">.</operator><name pos:start="57:36" pos:end="57:39">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="61:57"><expr pos:start="59:5" pos:end="61:56"><call pos:start="59:5" pos:end="61:56"><name pos:start="59:5" pos:end="59:23">pci_for_each_device</name><argument_list pos:start="59:24" pos:end="61:56">(<argument pos:start="59:25" pos:end="59:30"><expr pos:start="59:25" pos:end="59:30"><name pos:start="59:25" pos:end="59:30"><name pos:start="59:25" pos:end="59:25">d</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:30">bus</name></name></expr></argument>, <argument pos:start="59:33" pos:end="59:51"><expr pos:start="59:33" pos:end="59:51"><call pos:start="59:33" pos:end="59:51"><name pos:start="59:33" pos:end="59:43">pci_bus_num</name><argument_list pos:start="59:44" pos:end="59:51">(<argument pos:start="59:45" pos:end="59:50"><expr pos:start="59:45" pos:end="59:50"><name pos:start="59:45" pos:end="59:50"><name pos:start="59:45" pos:end="59:45">d</name><operator pos:start="59:46" pos:end="59:47">-&gt;</operator><name pos:start="59:48" pos:end="59:50">bus</name></name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="61:25" pos:end="61:48"><expr pos:start="61:25" pos:end="61:48"><name pos:start="61:25" pos:end="61:48">xen_pt_check_bar_overlap</name></expr></argument>, <argument pos:start="61:51" pos:end="61:55"><expr pos:start="61:51" pos:end="61:55"><operator pos:start="61:51" pos:end="61:51">&amp;</operator><name pos:start="61:52" pos:end="61:55">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="73:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:12">args</name><operator pos:start="63:13" pos:end="63:13">.</operator><name pos:start="63:14" pos:end="63:15">rc</name></name></expr>)</condition> <block pos:start="63:18" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:45">

        <expr_stmt pos:start="65:9" pos:end="71:45"><expr pos:start="65:9" pos:end="71:44"><call pos:start="65:9" pos:end="71:44"><name pos:start="65:9" pos:end="65:19">XEN_PT_WARN</name><argument_list pos:start="65:20" pos:end="71:44">(<argument pos:start="65:21" pos:end="65:21"><expr pos:start="65:21" pos:end="65:21"><name pos:start="65:21" pos:end="65:21">d</name></expr></argument>, <argument pos:start="65:24" pos:end="67:61"><expr pos:start="65:24" pos:end="67:61"><literal type="string" pos:start="65:24" pos:end="65:45">"Region: %d (addr: %#"</literal><name pos:start="65:46" pos:end="65:55">FMT_PCIBUS</name>

                    <literal type="string" pos:start="67:21" pos:end="67:31">", len: %#"</literal><name pos:start="67:32" pos:end="67:41">FMT_PCIBUS</name><literal type="string" pos:start="67:42" pos:end="67:61">") is overlapped.\n"</literal></expr></argument>,

                    <argument pos:start="69:21" pos:end="69:23"><expr pos:start="69:21" pos:end="69:23"><name pos:start="69:21" pos:end="69:23">bar</name></expr></argument>, <argument pos:start="69:26" pos:end="69:57"><expr pos:start="69:26" pos:end="69:57"><name pos:start="69:26" pos:end="69:57"><name pos:start="69:26" pos:end="69:28">sec</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:57">offset_within_address_space</name></name></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:43"><expr pos:start="71:21" pos:end="71:43"><call pos:start="71:21" pos:end="71:43"><name pos:start="71:21" pos:end="71:32">int128_get64</name><argument_list pos:start="71:33" pos:end="71:43">(<argument pos:start="71:34" pos:end="71:42"><expr pos:start="71:34" pos:end="71:42"><name pos:start="71:34" pos:end="71:42"><name pos:start="71:34" pos:end="71:36">sec</name><operator pos:start="71:37" pos:end="71:38">-&gt;</operator><name pos:start="71:39" pos:end="71:42">size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="127:5"><if pos:start="77:5" pos:end="99:5">if <condition pos:start="77:8" pos:end="77:60">(<expr pos:start="77:9" pos:end="77:59"><name pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:9">d</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:21">io_regions</name><index pos:start="77:22" pos:end="77:26">[<expr pos:start="77:23" pos:end="77:25"><name pos:start="77:23" pos:end="77:25">bar</name></expr>]</index></name><operator pos:start="77:27" pos:end="77:27">.</operator><name pos:start="77:28" pos:end="77:31">type</name> <operator pos:start="77:33" pos:end="77:33">&amp;</operator> <name pos:start="77:35" pos:end="77:59">PCI_BASE_ADDRESS_SPACE_IO</name></expr>)</condition> <block pos:start="77:62" pos:end="99:5">{<block_content pos:start="79:9" pos:end="97:9">

        <decl_stmt pos:start="79:9" pos:end="79:63"><decl pos:start="79:9" pos:end="79:62"><type pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:16">uint32_t</name></type> <name pos:start="79:18" pos:end="79:27">guest_port</name> <init pos:start="79:29" pos:end="79:62">= <expr pos:start="79:31" pos:end="79:62"><name pos:start="79:31" pos:end="79:62"><name pos:start="79:31" pos:end="79:33">sec</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:62">offset_within_address_space</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:62"><decl pos:start="81:9" pos:end="81:61"><type pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:16">uint32_t</name></type> <name pos:start="81:18" pos:end="81:29">machine_port</name> <init pos:start="81:31" pos:end="81:61">= <expr pos:start="81:33" pos:end="81:61"><name pos:start="81:33" pos:end="81:45"><name pos:start="81:33" pos:end="81:33">s</name><operator pos:start="81:34" pos:end="81:35">-&gt;</operator><name pos:start="81:36" pos:end="81:40">bases</name><index pos:start="81:41" pos:end="81:45">[<expr pos:start="81:42" pos:end="81:44"><name pos:start="81:42" pos:end="81:44">bar</name></expr>]</index></name><operator pos:start="81:46" pos:end="81:46">.</operator><name pos:start="81:47" pos:end="81:61"><name pos:start="81:47" pos:end="81:52">access</name><operator pos:start="81:53" pos:end="81:53">.</operator><name pos:start="81:54" pos:end="81:61">pio_base</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="83:9" pos:end="83:48"><decl pos:start="83:9" pos:end="83:47"><type pos:start="83:9" pos:end="83:16"><name pos:start="83:9" pos:end="83:16">uint32_t</name></type> <name pos:start="83:18" pos:end="83:21">size</name> <init pos:start="83:23" pos:end="83:47">= <expr pos:start="83:25" pos:end="83:47"><call pos:start="83:25" pos:end="83:47"><name pos:start="83:25" pos:end="83:36">int128_get64</name><argument_list pos:start="83:37" pos:end="83:47">(<argument pos:start="83:38" pos:end="83:46"><expr pos:start="83:38" pos:end="83:46"><name pos:start="83:38" pos:end="83:46"><name pos:start="83:38" pos:end="83:40">sec</name><operator pos:start="83:41" pos:end="83:42">-&gt;</operator><name pos:start="83:43" pos:end="83:46">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="85:9" pos:end="89:42"><expr pos:start="85:9" pos:end="89:41"><name pos:start="85:9" pos:end="85:10">rc</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <call pos:start="85:14" pos:end="89:41"><name pos:start="85:14" pos:end="85:37">xc_domain_ioport_mapping</name><argument_list pos:start="85:38" pos:end="89:41">(<argument pos:start="85:39" pos:end="85:44"><expr pos:start="85:39" pos:end="85:44"><name pos:start="85:39" pos:end="85:44">xen_xc</name></expr></argument>, <argument pos:start="85:47" pos:end="85:55"><expr pos:start="85:47" pos:end="85:55"><name pos:start="85:47" pos:end="85:55">xen_domid</name></expr></argument>,

                                      <argument pos:start="87:39" pos:end="87:48"><expr pos:start="87:39" pos:end="87:48"><name pos:start="87:39" pos:end="87:48">guest_port</name></expr></argument>, <argument pos:start="87:51" pos:end="87:62"><expr pos:start="87:51" pos:end="87:62"><name pos:start="87:51" pos:end="87:62">machine_port</name></expr></argument>, <argument pos:start="87:65" pos:end="87:68"><expr pos:start="87:65" pos:end="87:68"><name pos:start="87:65" pos:end="87:68">size</name></expr></argument>,

                                      <argument pos:start="89:39" pos:end="89:40"><expr pos:start="89:39" pos:end="89:40"><name pos:start="89:39" pos:end="89:40">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:15">(<expr pos:start="91:13" pos:end="91:14"><name pos:start="91:13" pos:end="91:14">rc</name></expr>)</condition> <block pos:start="91:17" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:68">

            <expr_stmt pos:start="93:13" pos:end="95:68"><expr pos:start="93:13" pos:end="95:67"><call pos:start="93:13" pos:end="95:67"><name pos:start="93:13" pos:end="93:22">XEN_PT_ERR</name><argument_list pos:start="93:23" pos:end="95:67">(<argument pos:start="93:24" pos:end="93:24"><expr pos:start="93:24" pos:end="93:24"><name pos:start="93:24" pos:end="93:24">d</name></expr></argument>, <argument pos:start="93:27" pos:end="93:65"><expr pos:start="93:27" pos:end="93:65"><literal type="string" pos:start="93:27" pos:end="93:65">"%s ioport mapping failed! (err: %i)\n"</literal></expr></argument>,

                       <argument pos:start="95:24" pos:end="95:59"><expr pos:start="95:24" pos:end="95:59"><ternary pos:start="95:24" pos:end="95:59"><condition pos:start="95:24" pos:end="95:31"><expr pos:start="95:24" pos:end="95:29"><name pos:start="95:24" pos:end="95:29">adding</name></expr> ?</condition><then pos:start="95:33" pos:end="95:44"> <expr pos:start="95:33" pos:end="95:44"><literal type="string" pos:start="95:33" pos:end="95:44">"create new"</literal></expr> </then><else pos:start="95:46" pos:end="95:59">: <expr pos:start="95:48" pos:end="95:59"><literal type="string" pos:start="95:48" pos:end="95:59">"remove old"</literal></expr></else></ternary></expr></argument>, <argument pos:start="95:62" pos:end="95:66"><expr pos:start="95:62" pos:end="95:66"><name pos:start="95:62" pos:end="95:66">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="127:5">else <block pos:start="99:12" pos:end="127:5">{<block_content pos:start="101:9" pos:end="125:9">

        <decl_stmt pos:start="101:9" pos:end="101:63"><decl pos:start="101:9" pos:end="101:62"><type pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:16">pcibus_t</name></type> <name pos:start="101:18" pos:end="101:27">guest_addr</name> <init pos:start="101:29" pos:end="101:62">= <expr pos:start="101:31" pos:end="101:62"><name pos:start="101:31" pos:end="101:62"><name pos:start="101:31" pos:end="101:33">sec</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:62">offset_within_address_space</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="103:9" pos:end="105:40"><decl pos:start="103:9" pos:end="105:39"><type pos:start="103:9" pos:end="103:16"><name pos:start="103:9" pos:end="103:16">pcibus_t</name></type> <name pos:start="103:18" pos:end="103:29">machine_addr</name> <init pos:start="103:31" pos:end="105:39">= <expr pos:start="103:33" pos:end="105:39"><name pos:start="103:33" pos:end="103:45"><name pos:start="103:33" pos:end="103:33">s</name><operator pos:start="103:34" pos:end="103:35">-&gt;</operator><name pos:start="103:36" pos:end="103:40">bases</name><index pos:start="103:41" pos:end="103:45">[<expr pos:start="103:42" pos:end="103:44"><name pos:start="103:42" pos:end="103:44">bar</name></expr>]</index></name><operator pos:start="103:46" pos:end="103:46">.</operator><name pos:start="103:47" pos:end="103:58"><name pos:start="103:47" pos:end="103:52">access</name><operator pos:start="103:53" pos:end="103:53">.</operator><name pos:start="103:54" pos:end="103:58">maddr</name></name>

            <operator pos:start="105:13" pos:end="105:13">+</operator> <name pos:start="105:15" pos:end="105:39"><name pos:start="105:15" pos:end="105:17">sec</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:39">offset_within_region</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="107:9" pos:end="107:48"><decl pos:start="107:9" pos:end="107:47"><type pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:16">pcibus_t</name></type> <name pos:start="107:18" pos:end="107:21">size</name> <init pos:start="107:23" pos:end="107:47">= <expr pos:start="107:25" pos:end="107:47"><call pos:start="107:25" pos:end="107:47"><name pos:start="107:25" pos:end="107:36">int128_get64</name><argument_list pos:start="107:37" pos:end="107:47">(<argument pos:start="107:38" pos:end="107:46"><expr pos:start="107:38" pos:end="107:46"><name pos:start="107:38" pos:end="107:46"><name pos:start="107:38" pos:end="107:40">sec</name><operator pos:start="107:41" pos:end="107:42">-&gt;</operator><name pos:start="107:43" pos:end="107:46">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="109:9" pos:end="117:42"><expr pos:start="109:9" pos:end="117:41"><name pos:start="109:9" pos:end="109:10">rc</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <call pos:start="109:14" pos:end="117:41"><name pos:start="109:14" pos:end="109:37">xc_domain_memory_mapping</name><argument_list pos:start="109:38" pos:end="117:41">(<argument pos:start="109:39" pos:end="109:44"><expr pos:start="109:39" pos:end="109:44"><name pos:start="109:39" pos:end="109:44">xen_xc</name></expr></argument>, <argument pos:start="109:47" pos:end="109:55"><expr pos:start="109:47" pos:end="109:55"><name pos:start="109:47" pos:end="109:55">xen_domid</name></expr></argument>,

                                      <argument pos:start="111:39" pos:end="111:76"><expr pos:start="111:39" pos:end="111:76"><call pos:start="111:39" pos:end="111:76"><name pos:start="111:39" pos:end="111:45">XEN_PFN</name><argument_list pos:start="111:46" pos:end="111:76">(<argument pos:start="111:47" pos:end="111:75"><expr pos:start="111:47" pos:end="111:75"><name pos:start="111:47" pos:end="111:56">guest_addr</name> <operator pos:start="111:58" pos:end="111:58">+</operator> <name pos:start="111:60" pos:end="111:71">XC_PAGE_SIZE</name> <operator pos:start="111:73" pos:end="111:73">-</operator> <literal type="number" pos:start="111:75" pos:end="111:75">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="113:39" pos:end="113:78"><expr pos:start="113:39" pos:end="113:78"><call pos:start="113:39" pos:end="113:78"><name pos:start="113:39" pos:end="113:45">XEN_PFN</name><argument_list pos:start="113:46" pos:end="113:78">(<argument pos:start="113:47" pos:end="113:77"><expr pos:start="113:47" pos:end="113:77"><name pos:start="113:47" pos:end="113:58">machine_addr</name> <operator pos:start="113:60" pos:end="113:60">+</operator> <name pos:start="113:62" pos:end="113:73">XC_PAGE_SIZE</name> <operator pos:start="113:75" pos:end="113:75">-</operator> <literal type="number" pos:start="113:77" pos:end="113:77">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="115:39" pos:end="115:70"><expr pos:start="115:39" pos:end="115:70"><call pos:start="115:39" pos:end="115:70"><name pos:start="115:39" pos:end="115:45">XEN_PFN</name><argument_list pos:start="115:46" pos:end="115:70">(<argument pos:start="115:47" pos:end="115:69"><expr pos:start="115:47" pos:end="115:69"><name pos:start="115:47" pos:end="115:50">size</name> <operator pos:start="115:52" pos:end="115:52">+</operator> <name pos:start="115:54" pos:end="115:65">XC_PAGE_SIZE</name> <operator pos:start="115:67" pos:end="115:67">-</operator> <literal type="number" pos:start="115:69" pos:end="115:69">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="117:39" pos:end="117:40"><expr pos:start="117:39" pos:end="117:40"><name pos:start="117:39" pos:end="117:40">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="125:9"><if pos:start="119:9" pos:end="125:9">if <condition pos:start="119:12" pos:end="119:15">(<expr pos:start="119:13" pos:end="119:14"><name pos:start="119:13" pos:end="119:14">rc</name></expr>)</condition> <block pos:start="119:17" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:68">

            <expr_stmt pos:start="121:13" pos:end="123:68"><expr pos:start="121:13" pos:end="123:67"><call pos:start="121:13" pos:end="123:67"><name pos:start="121:13" pos:end="121:22">XEN_PT_ERR</name><argument_list pos:start="121:23" pos:end="123:67">(<argument pos:start="121:24" pos:end="121:24"><expr pos:start="121:24" pos:end="121:24"><name pos:start="121:24" pos:end="121:24">d</name></expr></argument>, <argument pos:start="121:27" pos:end="121:62"><expr pos:start="121:27" pos:end="121:62"><literal type="string" pos:start="121:27" pos:end="121:62">"%s mem mapping failed! (err: %i)\n"</literal></expr></argument>,

                       <argument pos:start="123:24" pos:end="123:59"><expr pos:start="123:24" pos:end="123:59"><ternary pos:start="123:24" pos:end="123:59"><condition pos:start="123:24" pos:end="123:31"><expr pos:start="123:24" pos:end="123:29"><name pos:start="123:24" pos:end="123:29">adding</name></expr> ?</condition><then pos:start="123:33" pos:end="123:44"> <expr pos:start="123:33" pos:end="123:44"><literal type="string" pos:start="123:33" pos:end="123:44">"create new"</literal></expr> </then><else pos:start="123:46" pos:end="123:59">: <expr pos:start="123:48" pos:end="123:59"><literal type="string" pos:start="123:48" pos:end="123:59">"remove old"</literal></expr></else></ternary></expr></argument>, <argument pos:start="123:62" pos:end="123:66"><expr pos:start="123:62" pos:end="123:66"><name pos:start="123:62" pos:end="123:66">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
