<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10141.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:33">s390x_cpu_debug_excp_handler</name><parameter_list pos:start="1:34" pos:end="1:47">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:44"><name pos:start="1:35" pos:end="1:42">CPUState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">cs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">S390CPU</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">cpu</name> <init pos:start="5:18" pos:end="5:31">= <expr pos:start="5:20" pos:end="5:31"><call pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:27">S390_CPU</name><argument_list pos:start="5:28" pos:end="5:31">(<argument pos:start="5:29" pos:end="5:30"><expr pos:start="5:29" pos:end="5:30"><name pos:start="5:29" pos:end="5:30">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">CPUS390XState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">env</name> <init pos:start="7:24" pos:end="7:34">= <expr pos:start="7:26" pos:end="7:34"><operator pos:start="7:26" pos:end="7:26">&amp;</operator><name pos:start="7:27" pos:end="7:34"><name pos:start="7:27" pos:end="7:29">cpu</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">CPUWatchpoint</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:25">wp_hit</name> <init pos:start="9:27" pos:end="9:46">= <expr pos:start="9:29" pos:end="9:46"><name pos:start="9:29" pos:end="9:46"><name pos:start="9:29" pos:end="9:30">cs</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:46">watchpoint_hit</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="55:5"><if pos:start="13:5" pos:end="55:5">if <condition pos:start="13:8" pos:end="13:41">(<expr pos:start="13:9" pos:end="13:40"><name pos:start="13:9" pos:end="13:14">wp_hit</name> <operator pos:start="13:16" pos:end="13:17">&amp;&amp;</operator> <name pos:start="13:19" pos:end="13:31"><name pos:start="13:19" pos:end="13:24">wp_hit</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:31">flags</name></name> <operator pos:start="13:33" pos:end="13:33">&amp;</operator> <name pos:start="13:35" pos:end="13:40">BP_CPU</name></expr>)</condition> <block pos:start="13:43" pos:end="55:5">{<block_content pos:start="25:9" pos:end="53:41">

        <comment type="block" pos:start="15:9" pos:end="23:31">/* FIXME: When the storage-alteration-space control bit is set,

           the exception should only be triggered if the memory access

           is done using an address space with the storage-alteration-event

           bit set.  We have no way to detect that with the current

           watchpoint code.  */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:34"><expr pos:start="25:9" pos:end="25:33"><name pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:10">cs</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:26">watchpoint_hit</name></name> <operator pos:start="25:28" pos:end="25:28">=</operator> <name pos:start="25:30" pos:end="25:33">NULL</name></expr>;</expr_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:11">env</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:24">per_address</name></name> <operator pos:start="29:26" pos:end="29:26">=</operator> <name pos:start="29:28" pos:end="29:40"><name pos:start="29:28" pos:end="29:30">env</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:35">psw</name><operator pos:start="29:36" pos:end="29:36">.</operator><name pos:start="29:37" pos:end="29:40">addr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:73"><expr pos:start="31:9" pos:end="31:72"><name pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:11">env</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:27">per_perc_atmid</name></name> <operator pos:start="31:29" pos:end="31:30">|=</operator> <name pos:start="31:32" pos:end="31:51">PER_CODE_EVENT_STORE</name> <operator pos:start="31:53" pos:end="31:53">|</operator> <call pos:start="31:55" pos:end="31:72"><name pos:start="31:55" pos:end="31:67">get_per_atmid</name><argument_list pos:start="31:68" pos:end="31:72">(<argument pos:start="31:69" pos:end="31:71"><expr pos:start="31:69" pos:end="31:71"><name pos:start="31:69" pos:end="31:71">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="33:9" pos:end="39:49">/* FIXME: We currently no way to detect the address space used

           to trigger the watchpoint.  For now just consider it is the

           current default ASC. This turn to be true except when MVCP

           and MVCS instrutions are not used.  */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:68"><expr pos:start="41:9" pos:end="41:67"><name pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:11">env</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:27">per_perc_atmid</name></name> <operator pos:start="41:29" pos:end="41:30">|=</operator> <name pos:start="41:32" pos:end="41:44"><name pos:start="41:32" pos:end="41:34">env</name><operator pos:start="41:35" pos:end="41:36">-&gt;</operator><name pos:start="41:37" pos:end="41:39">psw</name><operator pos:start="41:40" pos:end="41:40">.</operator><name pos:start="41:41" pos:end="41:44">mask</name></name> <operator pos:start="41:46" pos:end="41:46">&amp;</operator> <operator pos:start="41:48" pos:end="41:48">(</operator><name pos:start="41:49" pos:end="41:60">PSW_MASK_ASC</name><operator pos:start="41:61" pos:end="41:61">)</operator> <operator pos:start="41:63" pos:end="41:64">&gt;&gt;</operator> <literal type="number" pos:start="41:66" pos:end="41:67">46</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="45:9" pos:end="49:31">/* Remove all watchpoints to re-execute the code.  A PER exception

           will be triggered, it will call load_psw which will recompute

           the watchpoints.  */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:46"><expr pos:start="51:9" pos:end="51:45"><call pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:33">cpu_watchpoint_remove_all</name><argument_list pos:start="51:34" pos:end="51:45">(<argument pos:start="51:35" pos:end="51:36"><expr pos:start="51:35" pos:end="51:36"><name pos:start="51:35" pos:end="51:36">cs</name></expr></argument>, <argument pos:start="51:39" pos:end="51:44"><expr pos:start="51:39" pos:end="51:44"><name pos:start="51:39" pos:end="51:44">BP_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:41"><expr pos:start="53:9" pos:end="53:40"><call pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:30">cpu_resume_from_signal</name><argument_list pos:start="53:31" pos:end="53:40">(<argument pos:start="53:32" pos:end="53:33"><expr pos:start="53:32" pos:end="53:33"><name pos:start="53:32" pos:end="53:33">cs</name></expr></argument>, <argument pos:start="53:36" pos:end="53:39"><expr pos:start="53:36" pos:end="53:39"><name pos:start="53:36" pos:end="53:39">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
