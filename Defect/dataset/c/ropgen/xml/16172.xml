<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16172.c" pos:tabs="8"><function pos:start="1:1" pos:end="122:22"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">escape124_decode_frame</name><parameter_list pos:start="1:34" pos:end="3:50">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">avctx</name></decl></parameter>,
                                  <parameter pos:start="2:35" pos:end="2:44"><decl pos:start="2:35" pos:end="2:44"><type pos:start="2:35" pos:end="2:44"><name pos:start="2:35" pos:end="2:38">void</name> <modifier pos:start="2:40" pos:end="2:40">*</modifier></type><name pos:start="2:41" pos:end="2:44">data</name></decl></parameter>, <parameter pos:start="2:47" pos:end="2:60"><decl pos:start="2:47" pos:end="2:60"><type pos:start="2:47" pos:end="2:60"><name pos:start="2:47" pos:end="2:49">int</name> <modifier pos:start="2:51" pos:end="2:51">*</modifier></type><name pos:start="2:52" pos:end="2:60">got_frame</name></decl></parameter>,
                                  <parameter pos:start="3:35" pos:end="3:49"><decl pos:start="3:35" pos:end="3:49"><type pos:start="3:35" pos:end="3:49"><name pos:start="3:35" pos:end="3:42">AVPacket</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:49">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="122:22">{<block_content pos:start="5:5" pos:end="122:22">
    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">buf_size</name> <init pos:start="5:18" pos:end="5:30">= <expr pos:start="5:20" pos:end="5:30"><name pos:start="5:20" pos:end="5:30"><name pos:start="5:20" pos:end="5:24">avpkt</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:30">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:43"><decl pos:start="6:5" pos:end="6:42"><type pos:start="6:5" pos:end="6:22"><name pos:start="6:5" pos:end="6:20">Escape124Context</name> <modifier pos:start="6:22" pos:end="6:22">*</modifier></type><name pos:start="6:23" pos:end="6:23">s</name> <init pos:start="6:25" pos:end="6:42">= <expr pos:start="6:27" pos:end="6:42"><name pos:start="6:27" pos:end="6:42"><name pos:start="6:27" pos:end="6:31">avctx</name><operator pos:start="6:32" pos:end="6:33">-&gt;</operator><name pos:start="6:34" pos:end="6:42">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">frame</name> <init pos:start="7:20" pos:end="7:25">= <expr pos:start="7:22" pos:end="7:25"><name pos:start="7:22" pos:end="7:25">data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:21"><decl pos:start="8:5" pos:end="8:20"><type pos:start="8:5" pos:end="8:17"><name pos:start="8:5" pos:end="8:17">GetBitContext</name></type> <name pos:start="8:19" pos:end="8:20">gb</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:24">frame_flags</name></decl>, <decl pos:start="9:27" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:27" pos:end="9:36">frame_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:15"><decl pos:start="10:5" pos:end="10:14"><type pos:start="10:5" pos:end="10:12"><name pos:start="10:5" pos:end="10:12">unsigned</name></type> <name pos:start="10:14" pos:end="10:14">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="13:63"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:29">superblock_index</name></decl>, <decl pos:start="11:32" pos:end="11:43"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:32" pos:end="11:39">cb_index</name> <init pos:start="11:41" pos:end="11:43">= <expr pos:start="11:43" pos:end="11:43"><literal type="number" pos:start="11:43" pos:end="11:43">1</literal></expr></init></decl>,
             <decl pos:start="12:14" pos:end="12:37"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="12:14" pos:end="12:33">superblock_col_index</name> <init pos:start="12:35" pos:end="12:37">= <expr pos:start="12:37" pos:end="12:37"><literal type="number" pos:start="12:37" pos:end="12:37">0</literal></expr></init></decl>,
             <decl pos:start="13:14" pos:end="13:51"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="13:14" pos:end="13:32">superblocks_per_row</name> <init pos:start="13:34" pos:end="13:51">= <expr pos:start="13:36" pos:end="13:51"><name pos:start="13:36" pos:end="13:47"><name pos:start="13:36" pos:end="13:40">avctx</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:47">width</name></name> <operator pos:start="13:49" pos:end="13:49">/</operator> <literal type="number" pos:start="13:51" pos:end="13:51">8</literal></expr></init></decl>, <decl pos:start="13:54" pos:end="13:62"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="13:54" pos:end="13:57">skip</name> <init pos:start="13:59" pos:end="13:62">= <expr pos:start="13:61" pos:end="13:62"><operator pos:start="13:61" pos:end="13:61">-</operator><literal type="number" pos:start="13:62" pos:end="13:62">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:46"><decl pos:start="14:5" pos:end="14:28"><type pos:start="14:5" pos:end="14:13"><name pos:start="14:5" pos:end="14:12">uint16_t</name><modifier pos:start="14:13" pos:end="14:13">*</modifier></type> <name pos:start="14:15" pos:end="14:28">old_frame_data</name></decl>, <decl pos:start="14:31" pos:end="14:45"><type ref="prev" pos:start="14:5" pos:end="14:13"><modifier pos:start="14:31" pos:end="14:31">*</modifier></type><name pos:start="14:32" pos:end="14:45">new_frame_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">unsigned</name></type> <name pos:start="15:14" pos:end="15:23">old_stride</name></decl>, <decl pos:start="15:26" pos:end="15:35"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:26" pos:end="15:35">new_stride</name></decl>;</decl_stmt>
    <decl_stmt pos:start="16:5" pos:end="16:12"><decl pos:start="16:5" pos:end="16:11"><type pos:start="16:5" pos:end="16:7"><name pos:start="16:5" pos:end="16:7">int</name></type> <name pos:start="16:9" pos:end="16:11">ret</name></decl>;</decl_stmt>
    <if_stmt pos:start="17:5" pos:end="18:19"><if pos:start="17:5" pos:end="18:19">if <condition pos:start="17:8" pos:end="17:66">(<expr pos:start="17:9" pos:end="17:65"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:12">ret</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="17:60"><name pos:start="17:16" pos:end="17:29">init_get_bits8</name><argument_list pos:start="17:30" pos:end="17:60">(<argument pos:start="17:31" pos:end="17:33"><expr pos:start="17:31" pos:end="17:33"><operator pos:start="17:31" pos:end="17:31">&amp;</operator><name pos:start="17:32" pos:end="17:33">gb</name></expr></argument>, <argument pos:start="17:36" pos:end="17:46"><expr pos:start="17:36" pos:end="17:46"><name pos:start="17:36" pos:end="17:46"><name pos:start="17:36" pos:end="17:40">avpkt</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:46">data</name></name></expr></argument>, <argument pos:start="17:49" pos:end="17:59"><expr pos:start="17:49" pos:end="17:59"><name pos:start="17:49" pos:end="17:59"><name pos:start="17:49" pos:end="17:53">avpkt</name><operator pos:start="17:54" pos:end="17:55">-&gt;</operator><name pos:start="17:56" pos:end="17:59">size</name></name></expr></argument>)</argument_list></call><operator pos:start="17:61" pos:end="17:61">)</operator> <operator pos:start="17:63" pos:end="17:63">&lt;</operator> <literal type="number" pos:start="17:65" pos:end="17:65">0</literal></expr>)</condition><block type="pseudo" pos:start="18:9" pos:end="18:19"><block_content pos:start="18:9" pos:end="18:19">
        <return pos:start="18:9" pos:end="18:19">return <expr pos:start="18:16" pos:end="18:18"><name pos:start="18:16" pos:end="18:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line" pos:start="19:5" pos:end="19:62">// This call also guards the potential depth reads for the</comment>
    <comment type="line" pos:start="20:5" pos:end="20:26">// codebook unpacking.</comment>
    <if_stmt pos:start="21:5" pos:end="22:18"><if pos:start="21:5" pos:end="22:18">if <condition pos:start="21:8" pos:end="21:32">(<expr pos:start="21:9" pos:end="21:31"><call pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:21">get_bits_left</name><argument_list pos:start="21:22" pos:end="21:26">(<argument pos:start="21:23" pos:end="21:25"><expr pos:start="21:23" pos:end="21:25"><operator pos:start="21:23" pos:end="21:23">&amp;</operator><name pos:start="21:24" pos:end="21:25">gb</name></expr></argument>)</argument_list></call> <operator pos:start="21:28" pos:end="21:28">&lt;</operator> <literal type="number" pos:start="21:30" pos:end="21:31">64</literal></expr>)</condition><block type="pseudo" pos:start="22:9" pos:end="22:18"><block_content pos:start="22:9" pos:end="22:18">
        <return pos:start="22:9" pos:end="22:18">return <expr pos:start="22:16" pos:end="22:17"><operator pos:start="22:16" pos:end="22:16">-</operator><literal type="number" pos:start="22:17" pos:end="22:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:41"><expr pos:start="23:5" pos:end="23:40"><name pos:start="23:5" pos:end="23:15">frame_flags</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <call pos:start="23:19" pos:end="23:40"><name pos:start="23:19" pos:end="23:31">get_bits_long</name><argument_list pos:start="23:32" pos:end="23:40">(<argument pos:start="23:33" pos:end="23:35"><expr pos:start="23:33" pos:end="23:35"><operator pos:start="23:33" pos:end="23:33">&amp;</operator><name pos:start="23:34" pos:end="23:35">gb</name></expr></argument>, <argument pos:start="23:38" pos:end="23:39"><expr pos:start="23:38" pos:end="23:39"><literal type="number" pos:start="23:38" pos:end="23:39">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:41"><expr pos:start="24:5" pos:end="24:40"><name pos:start="24:5" pos:end="24:14">frame_size</name>  <operator pos:start="24:17" pos:end="24:17">=</operator> <call pos:start="24:19" pos:end="24:40"><name pos:start="24:19" pos:end="24:31">get_bits_long</name><argument_list pos:start="24:32" pos:end="24:40">(<argument pos:start="24:33" pos:end="24:35"><expr pos:start="24:33" pos:end="24:35"><operator pos:start="24:33" pos:end="24:33">&amp;</operator><name pos:start="24:34" pos:end="24:35">gb</name></expr></argument>, <argument pos:start="24:38" pos:end="24:39"><expr pos:start="24:38" pos:end="24:39"><literal type="number" pos:start="24:38" pos:end="24:39">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:start="25:5" pos:end="25:33">// Leave last frame unchanged</comment>
    <comment type="line" pos:start="26:5" pos:end="26:71">// FIXME: Is this necessary?  I haven't seen it in any real samples</comment>
    <if_stmt pos:start="27:5" pos:end="122:22"><if pos:start="27:5" pos:end="122:22">if <condition pos:start="27:8" pos:end="27:61">(<expr pos:start="27:9" pos:end="27:60"><operator pos:start="27:9" pos:end="27:9">!</operator><operator pos:start="27:10" pos:end="27:10">(</operator><name pos:start="27:11" pos:end="27:21">frame_flags</name> <operator pos:start="27:23" pos:end="27:23">&amp;</operator> <literal type="number" pos:start="27:25" pos:end="27:29">0x114</literal><operator pos:start="27:30" pos:end="27:30">)</operator> <operator pos:start="27:32" pos:end="27:33">||</operator> <operator pos:start="27:35" pos:end="27:35">!</operator><operator pos:start="27:36" pos:end="27:36">(</operator><name pos:start="27:37" pos:end="27:47">frame_flags</name> <operator pos:start="27:49" pos:end="27:49">&amp;</operator> <literal type="number" pos:start="27:51" pos:end="27:59">0x7800000</literal><operator pos:start="27:60" pos:end="27:60">)</operator></expr>)</condition> <block pos:start="27:63" pos:end="122:22">{<block_content pos:start="28:9" pos:end="122:22">
        <if_stmt pos:start="28:9" pos:end="29:56"><if pos:start="28:9" pos:end="29:56">if <condition pos:start="28:12" pos:end="28:31">(<expr pos:start="28:13" pos:end="28:30"><operator pos:start="28:13" pos:end="28:13">!</operator><name pos:start="28:14" pos:end="28:30"><name pos:start="28:14" pos:end="28:14">s</name><operator pos:start="28:15" pos:end="28:16">-&gt;</operator><name pos:start="28:17" pos:end="28:21">frame</name><operator pos:start="28:22" pos:end="28:23">-&gt;</operator><name pos:start="28:24" pos:end="28:27">data</name><index pos:start="28:28" pos:end="28:30">[<expr pos:start="28:29" pos:end="28:29"><literal type="number" pos:start="28:29" pos:end="28:29">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:56"><block_content pos:start="29:9" pos:end="29:56">
        <expr_stmt pos:start="29:9" pos:end="29:56"><expr pos:start="29:9" pos:end="29:55"><call pos:start="29:9" pos:end="29:55"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:55">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="29:37" pos:end="29:54"><expr pos:start="29:37" pos:end="29:54"><literal type="string" pos:start="29:37" pos:end="29:54">"Skipping frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:23"><expr pos:start="30:9" pos:end="30:22"><operator pos:start="30:9" pos:end="30:9">*</operator><name pos:start="30:10" pos:end="30:18">got_frame</name> <operator pos:start="30:20" pos:end="30:20">=</operator> <literal type="number" pos:start="30:22" pos:end="30:22">1</literal></expr>;</expr_stmt>
        <if_stmt pos:start="31:9" pos:end="32:23"><if pos:start="31:9" pos:end="32:23">if <condition pos:start="31:12" pos:end="31:54">(<expr pos:start="31:13" pos:end="31:53"><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:16">ret</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:48"><name pos:start="31:20" pos:end="31:31">av_frame_ref</name><argument_list pos:start="31:32" pos:end="31:48">(<argument pos:start="31:33" pos:end="31:37"><expr pos:start="31:33" pos:end="31:37"><name pos:start="31:33" pos:end="31:37">frame</name></expr></argument>, <argument pos:start="31:40" pos:end="31:47"><expr pos:start="31:40" pos:end="31:47"><name pos:start="31:40" pos:end="31:47"><name pos:start="31:40" pos:end="31:40">s</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:47">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="31:49" pos:end="31:49">)</operator> <operator pos:start="31:51" pos:end="31:51">&lt;</operator> <literal type="number" pos:start="31:53" pos:end="31:53">0</literal></expr>)</condition><block type="pseudo" pos:start="32:13" pos:end="32:23"><block_content pos:start="32:13" pos:end="32:23">
            <return pos:start="32:13" pos:end="32:23">return <expr pos:start="32:20" pos:end="32:22"><name pos:start="32:20" pos:end="32:22">ret</name></expr>;</return></block_content></block></if></if_stmt>
        <return pos:start="33:9" pos:end="33:26">return <expr pos:start="33:16" pos:end="33:25"><name pos:start="33:16" pos:end="33:25">frame_size</name></expr>;</return>
    <for pos:start="34:5" pos:end="122:22">for <control pos:start="34:9" pos:end="34:27">(<init pos:start="34:10" pos:end="34:15"><expr pos:start="34:10" pos:end="34:14"><name pos:start="34:10" pos:end="34:10">i</name> <operator pos:start="34:12" pos:end="34:12">=</operator> <literal type="number" pos:start="34:14" pos:end="34:14">0</literal></expr>;</init> <condition pos:start="34:17" pos:end="34:22"><expr pos:start="34:17" pos:end="34:21"><name pos:start="34:17" pos:end="34:17">i</name> <operator pos:start="34:19" pos:end="34:19">&lt;</operator> <literal type="number" pos:start="34:21" pos:end="34:21">3</literal></expr>;</condition> <incr pos:start="34:24" pos:end="34:26"><expr pos:start="34:24" pos:end="34:26"><name pos:start="34:24" pos:end="34:24">i</name><operator pos:start="34:25" pos:end="34:26">++</operator></expr></incr>)</control> <block pos:start="34:29" pos:end="122:22">{<block_content pos:start="35:9" pos:end="122:22">
        <if_stmt pos:start="35:9" pos:end="122:22"><if pos:start="35:9" pos:end="122:22">if <condition pos:start="35:12" pos:end="35:42">(<expr pos:start="35:13" pos:end="35:41"><name pos:start="35:13" pos:end="35:23">frame_flags</name> <operator pos:start="35:25" pos:end="35:25">&amp;</operator> <operator pos:start="35:27" pos:end="35:27">(</operator><literal type="number" pos:start="35:28" pos:end="35:28">1</literal> <operator pos:start="35:30" pos:end="35:31">&lt;&lt;</operator> <operator pos:start="35:33" pos:end="35:33">(</operator><literal type="number" pos:start="35:34" pos:end="35:37">17</literal> <operator pos:start="35:37" pos:end="35:37">+</operator> <name pos:start="35:39" pos:end="35:39">i</name><operator pos:start="35:40" pos:end="35:40">)</operator><operator pos:start="35:41" pos:end="35:41">)</operator></expr>)</condition> <block pos:start="35:44" pos:end="122:22">{<block_content pos:start="36:13" pos:end="122:22">
            <decl_stmt pos:start="36:13" pos:end="36:39"><decl pos:start="36:13" pos:end="36:29"><type pos:start="36:13" pos:end="36:20"><name pos:start="36:13" pos:end="36:20">unsigned</name></type> <name pos:start="36:22" pos:end="36:29">cb_depth</name></decl>, <decl pos:start="36:32" pos:end="36:38"><type ref="prev" pos:start="36:13" pos:end="36:20"/><name pos:start="36:32" pos:end="36:38">cb_size</name></decl>;</decl_stmt>
            <if_stmt pos:start="37:13" pos:end="122:22"><if pos:start="37:13" pos:end="122:22">if <condition pos:start="37:16" pos:end="37:23">(<expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:17">i</name> <operator pos:start="37:19" pos:end="37:20">==</operator> <literal type="number" pos:start="37:22" pos:end="37:22">2</literal></expr>)</condition> <block pos:start="37:25" pos:end="122:22">{<block_content pos:start="40:17" pos:end="122:22">
                <comment type="line" pos:start="38:17" pos:end="38:68">// This codebook can be cut off at places other than</comment>
                <comment type="line" pos:start="39:17" pos:end="39:70">// powers of 2, leaving some of the entries undefined.</comment>
                <expr_stmt pos:start="40:17" pos:end="40:49"><expr pos:start="40:17" pos:end="40:48"><name pos:start="40:17" pos:end="40:23">cb_size</name> <operator pos:start="40:25" pos:end="40:25">=</operator> <call pos:start="40:27" pos:end="40:48"><name pos:start="40:27" pos:end="40:39">get_bits_long</name><argument_list pos:start="40:40" pos:end="40:48">(<argument pos:start="40:41" pos:end="40:43"><expr pos:start="40:41" pos:end="40:43"><operator pos:start="40:41" pos:end="40:41">&amp;</operator><name pos:start="40:42" pos:end="40:43">gb</name></expr></argument>, <argument pos:start="40:46" pos:end="40:47"><expr pos:start="40:46" pos:end="40:47"><literal type="number" pos:start="40:46" pos:end="40:47">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="41:17" pos:end="122:22"><if pos:start="41:17" pos:end="44:13">if <condition pos:start="41:20" pos:end="41:29">(<expr pos:start="41:21" pos:end="41:28"><operator pos:start="41:21" pos:end="41:21">!</operator><name pos:start="41:22" pos:end="41:28">cb_size</name></expr>)</condition> <block pos:start="41:31" pos:end="44:13">{<block_content pos:start="42:21" pos:end="43:52">
                    <expr_stmt pos:start="42:21" pos:end="42:78"><expr pos:start="42:21" pos:end="42:77"><call pos:start="42:21" pos:end="42:77"><name pos:start="42:21" pos:end="42:26">av_log</name><argument_list pos:start="42:27" pos:end="42:77">(<argument pos:start="42:28" pos:end="42:32"><expr pos:start="42:28" pos:end="42:32"><name pos:start="42:28" pos:end="42:32">avctx</name></expr></argument>, <argument pos:start="42:35" pos:end="42:46"><expr pos:start="42:35" pos:end="42:46"><name pos:start="42:35" pos:end="42:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="42:49" pos:end="42:76"><expr pos:start="42:49" pos:end="42:76"><literal type="string" pos:start="42:49" pos:end="42:76">"Invalid codebook size 0.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="43:17" pos:end="43:52"><expr pos:start="43:17" pos:end="43:51"><name pos:start="43:17" pos:end="43:24">cb_depth</name> <operator pos:start="43:26" pos:end="43:26">=</operator> <call pos:start="43:28" pos:end="43:47"><name pos:start="43:28" pos:end="43:34">av_log2</name><argument_list pos:start="43:35" pos:end="43:47">(<argument pos:start="43:36" pos:end="43:46"><expr pos:start="43:36" pos:end="43:46"><name pos:start="43:36" pos:end="43:42">cb_size</name> <operator pos:start="43:44" pos:end="43:44">-</operator> <literal type="number" pos:start="43:46" pos:end="43:46">1</literal></expr></argument>)</argument_list></call> <operator pos:start="43:49" pos:end="43:49">+</operator> <literal type="number" pos:start="43:51" pos:end="43:51">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="44:15" pos:end="122:22">else <block pos:start="44:20" pos:end="122:22">{<block_content pos:start="45:17" pos:end="122:22">
                <expr_stmt pos:start="45:17" pos:end="45:44"><expr pos:start="45:17" pos:end="45:43"><name pos:start="45:17" pos:end="45:24">cb_depth</name> <operator pos:start="45:26" pos:end="45:26">=</operator> <call pos:start="45:28" pos:end="45:43"><name pos:start="45:28" pos:end="45:35">get_bits</name><argument_list pos:start="45:36" pos:end="45:43">(<argument pos:start="45:37" pos:end="45:39"><expr pos:start="45:37" pos:end="45:39"><operator pos:start="45:37" pos:end="45:37">&amp;</operator><name pos:start="45:38" pos:end="45:39">gb</name></expr></argument>, <argument pos:start="45:42" pos:end="45:42"><expr pos:start="45:42" pos:end="45:42"><literal type="number" pos:start="45:42" pos:end="45:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="46:17" pos:end="122:22"><if pos:start="46:17" pos:end="50:17">if <condition pos:start="46:20" pos:end="46:27">(<expr pos:start="46:21" pos:end="46:26"><name pos:start="46:21" pos:end="46:21">i</name> <operator pos:start="46:23" pos:end="46:24">==</operator> <literal type="number" pos:start="46:26" pos:end="46:26">0</literal></expr>)</condition> <block pos:start="46:29" pos:end="50:17">{<block_content pos:start="49:21" pos:end="49:44">
                    <comment type="line" pos:start="47:21" pos:end="47:76">// This is the most basic codebook: pow(2,depth) entries</comment>
                    <comment type="line" pos:start="48:21" pos:end="48:45">// for a depth-length key</comment>
                    <expr_stmt pos:start="49:21" pos:end="49:44"><expr pos:start="49:21" pos:end="49:43"><name pos:start="49:21" pos:end="49:27">cb_size</name> <operator pos:start="49:29" pos:end="49:29">=</operator> <literal type="number" pos:start="49:31" pos:end="49:31">1</literal> <operator pos:start="49:33" pos:end="49:34">&lt;&lt;</operator> <name pos:start="49:36" pos:end="49:43">cb_depth</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="50:19" pos:end="122:22">else <block pos:start="50:24" pos:end="122:22">{<block_content pos:start="54:21" pos:end="122:22">
                    <comment type="line" pos:start="51:21" pos:end="51:58">// This codebook varies per superblock</comment>
                    <comment type="line" pos:start="52:21" pos:end="52:73">// FIXME: I don't think this handles integer overflow</comment>
                    <comment type="line" pos:start="53:21" pos:end="53:31">// properly</comment>
                    <expr_stmt pos:start="54:21" pos:end="54:61"><expr pos:start="54:21" pos:end="54:60"><name pos:start="54:21" pos:end="54:27">cb_size</name> <operator pos:start="54:29" pos:end="54:29">=</operator> <name pos:start="54:31" pos:end="54:48"><name pos:start="54:31" pos:end="54:31">s</name><operator pos:start="54:32" pos:end="54:33">-&gt;</operator><name pos:start="54:34" pos:end="54:48">num_superblocks</name></name> <operator pos:start="54:50" pos:end="54:51">&lt;&lt;</operator> <name pos:start="54:53" pos:end="54:60">cb_depth</name></expr>;</expr_stmt>
            <expr_stmt pos:start="55:13" pos:end="55:46"><expr pos:start="55:13" pos:end="55:45"><call pos:start="55:13" pos:end="55:45"><name pos:start="55:13" pos:end="55:20">av_freep</name><argument_list pos:start="55:21" pos:end="55:45">(<argument pos:start="55:22" pos:end="55:44"><expr pos:start="55:22" pos:end="55:44"><operator pos:start="55:22" pos:end="55:22">&amp;</operator><name pos:start="55:23" pos:end="55:37"><name pos:start="55:23" pos:end="55:23">s</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:34">codebooks</name><index pos:start="55:35" pos:end="55:37">[<expr pos:start="55:36" pos:end="55:36"><name pos:start="55:36" pos:end="55:36">i</name></expr>]</index></name><operator pos:start="55:38" pos:end="55:38">.</operator><name pos:start="55:39" pos:end="55:44">blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="56:13" pos:end="56:70"><expr pos:start="56:13" pos:end="56:69"><name pos:start="56:13" pos:end="56:27"><name pos:start="56:13" pos:end="56:13">s</name><operator pos:start="56:14" pos:end="56:15">-&gt;</operator><name pos:start="56:16" pos:end="56:24">codebooks</name><index pos:start="56:25" pos:end="56:27">[<expr pos:start="56:26" pos:end="56:26"><name pos:start="56:26" pos:end="56:26">i</name></expr>]</index></name> <operator pos:start="56:29" pos:end="56:29">=</operator> <call pos:start="56:31" pos:end="56:69"><name pos:start="56:31" pos:end="56:45">unpack_codebook</name><argument_list pos:start="56:46" pos:end="56:69">(<argument pos:start="56:47" pos:end="56:49"><expr pos:start="56:47" pos:end="56:49"><operator pos:start="56:47" pos:end="56:47">&amp;</operator><name pos:start="56:48" pos:end="56:49">gb</name></expr></argument>, <argument pos:start="56:52" pos:end="56:59"><expr pos:start="56:52" pos:end="56:59"><name pos:start="56:52" pos:end="56:59">cb_depth</name></expr></argument>, <argument pos:start="56:62" pos:end="56:68"><expr pos:start="56:62" pos:end="56:68"><name pos:start="56:62" pos:end="56:68">cb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="57:13" pos:end="58:26"><if pos:start="57:13" pos:end="58:26">if <condition pos:start="57:16" pos:end="57:40">(<expr pos:start="57:17" pos:end="57:39"><operator pos:start="57:17" pos:end="57:17">!</operator><name pos:start="57:18" pos:end="57:32"><name pos:start="57:18" pos:end="57:18">s</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:29">codebooks</name><index pos:start="57:30" pos:end="57:32">[<expr pos:start="57:31" pos:end="57:31"><name pos:start="57:31" pos:end="57:31">i</name></expr>]</index></name><operator pos:start="57:33" pos:end="57:33">.</operator><name pos:start="57:34" pos:end="57:39">blocks</name></expr>)</condition><block type="pseudo" pos:start="58:17" pos:end="58:26"><block_content pos:start="58:17" pos:end="58:26">
                <return pos:start="58:17" pos:end="58:26">return <expr pos:start="58:24" pos:end="58:25"><operator pos:start="58:24" pos:end="58:24">-</operator><literal type="number" pos:start="58:25" pos:end="58:25">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="59:5" pos:end="60:19"><if pos:start="59:5" pos:end="60:19">if <condition pos:start="59:8" pos:end="59:72">(<expr pos:start="59:9" pos:end="59:71"><operator pos:start="59:9" pos:end="59:9">(</operator><name pos:start="59:10" pos:end="59:12">ret</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <call pos:start="59:16" pos:end="59:66"><name pos:start="59:16" pos:end="59:28">ff_get_buffer</name><argument_list pos:start="59:29" pos:end="59:66">(<argument pos:start="59:30" pos:end="59:34"><expr pos:start="59:30" pos:end="59:34"><name pos:start="59:30" pos:end="59:34">avctx</name></expr></argument>, <argument pos:start="59:37" pos:end="59:41"><expr pos:start="59:37" pos:end="59:41"><name pos:start="59:37" pos:end="59:41">frame</name></expr></argument>, <argument pos:start="59:44" pos:end="59:65"><expr pos:start="59:44" pos:end="59:65"><name pos:start="59:44" pos:end="59:65">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator pos:start="59:67" pos:end="59:67">)</operator> <operator pos:start="59:69" pos:end="59:69">&lt;</operator> <literal type="number" pos:start="59:71" pos:end="59:71">0</literal></expr>)</condition><block type="pseudo" pos:start="60:9" pos:end="60:19"><block_content pos:start="60:9" pos:end="60:19">
        <return pos:start="60:9" pos:end="60:19">return <expr pos:start="60:16" pos:end="60:18"><name pos:start="60:16" pos:end="60:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="61:5" pos:end="61:47"><expr pos:start="61:5" pos:end="61:46"><name pos:start="61:5" pos:end="61:18">new_frame_data</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <operator pos:start="61:22" pos:end="61:22">(</operator><name pos:start="61:23" pos:end="61:30">uint16_t</name><operator pos:start="61:31" pos:end="61:31">*</operator><operator pos:start="61:32" pos:end="61:32">)</operator><name pos:start="61:33" pos:end="61:46"><name pos:start="61:33" pos:end="61:37">frame</name><operator pos:start="61:38" pos:end="61:39">-&gt;</operator><name pos:start="61:40" pos:end="61:43">data</name><index pos:start="61:44" pos:end="61:46">[<expr pos:start="61:45" pos:end="61:45"><literal type="number" pos:start="61:45" pos:end="61:45">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="62:5" pos:end="62:40"><expr pos:start="62:5" pos:end="62:39"><name pos:start="62:5" pos:end="62:14">new_stride</name> <operator pos:start="62:16" pos:end="62:16">=</operator> <name pos:start="62:18" pos:end="62:35"><name pos:start="62:18" pos:end="62:22">frame</name><operator pos:start="62:23" pos:end="62:24">-&gt;</operator><name pos:start="62:25" pos:end="62:32">linesize</name><index pos:start="62:33" pos:end="62:35">[<expr pos:start="62:34" pos:end="62:34"><literal type="number" pos:start="62:34" pos:end="62:34">0</literal></expr>]</index></name> <operator pos:start="62:37" pos:end="62:37">/</operator> <literal type="number" pos:start="62:39" pos:end="62:39">2</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:50"><expr pos:start="63:5" pos:end="63:49"><name pos:start="63:5" pos:end="63:18">old_frame_data</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <operator pos:start="63:22" pos:end="63:22">(</operator><name pos:start="63:23" pos:end="63:30">uint16_t</name><operator pos:start="63:31" pos:end="63:31">*</operator><operator pos:start="63:32" pos:end="63:32">)</operator><name pos:start="63:33" pos:end="63:49"><name pos:start="63:33" pos:end="63:33">s</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:40">frame</name><operator pos:start="63:41" pos:end="63:42">-&gt;</operator><name pos:start="63:43" pos:end="63:46">data</name><index pos:start="63:47" pos:end="63:49">[<expr pos:start="63:48" pos:end="63:48"><literal type="number" pos:start="63:48" pos:end="63:48">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:43"><expr pos:start="64:5" pos:end="64:42"><name pos:start="64:5" pos:end="64:14">old_stride</name> <operator pos:start="64:16" pos:end="64:16">=</operator> <name pos:start="64:18" pos:end="64:38"><name pos:start="64:18" pos:end="64:18">s</name><operator pos:start="64:19" pos:end="64:20">-&gt;</operator><name pos:start="64:21" pos:end="64:25">frame</name><operator pos:start="64:26" pos:end="64:27">-&gt;</operator><name pos:start="64:28" pos:end="64:35">linesize</name><index pos:start="64:36" pos:end="64:38">[<expr pos:start="64:37" pos:end="64:37"><literal type="number" pos:start="64:37" pos:end="64:37">0</literal></expr>]</index></name> <operator pos:start="64:40" pos:end="64:40">/</operator> <literal type="number" pos:start="64:42" pos:end="64:42">2</literal></expr>;</expr_stmt>
    <for pos:start="65:5" pos:end="122:22">for <control pos:start="65:9" pos:end="66:28">(<init pos:start="65:10" pos:end="65:30"><expr pos:start="65:10" pos:end="65:29"><name pos:start="65:10" pos:end="65:25">superblock_index</name> <operator pos:start="65:27" pos:end="65:27">=</operator> <literal type="number" pos:start="65:29" pos:end="65:29">0</literal></expr>;</init> <condition pos:start="65:32" pos:end="65:69"><expr pos:start="65:32" pos:end="65:68"><name pos:start="65:32" pos:end="65:47">superblock_index</name> <operator pos:start="65:49" pos:end="65:49">&lt;</operator> <name pos:start="65:51" pos:end="65:68"><name pos:start="65:51" pos:end="65:51">s</name><operator pos:start="65:52" pos:end="65:53">-&gt;</operator><name pos:start="65:54" pos:end="65:68">num_superblocks</name></name></expr>;</condition>
         <incr pos:start="66:10" pos:end="66:27"><expr pos:start="66:10" pos:end="66:27"><name pos:start="66:10" pos:end="66:25">superblock_index</name><operator pos:start="66:26" pos:end="66:27">++</operator></expr></incr>)</control> <block pos:start="66:30" pos:end="122:22">{<block_content pos:start="67:9" pos:end="122:22">
        <decl_stmt pos:start="67:9" pos:end="67:22"><decl pos:start="67:9" pos:end="67:21"><type pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:18">MacroBlock</name></type> <name pos:start="67:20" pos:end="67:21">mb</name></decl>;</decl_stmt>
        <decl_stmt pos:start="68:9" pos:end="68:22"><decl pos:start="68:9" pos:end="68:21"><type pos:start="68:9" pos:end="68:18"><name pos:start="68:9" pos:end="68:18">SuperBlock</name></type> <name pos:start="68:20" pos:end="68:21">sb</name></decl>;</decl_stmt>
        <decl_stmt pos:start="69:9" pos:end="69:32"><decl pos:start="69:9" pos:end="69:31"><type pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:16">unsigned</name></type> <name pos:start="69:18" pos:end="69:27">multi_mask</name> <init pos:start="69:29" pos:end="69:31">= <expr pos:start="69:31" pos:end="69:31"><literal type="number" pos:start="69:31" pos:end="69:31">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="70:9" pos:end="122:22"><if pos:start="70:9" pos:end="122:22">if <condition pos:start="70:12" pos:end="70:23">(<expr pos:start="70:13" pos:end="70:22"><name pos:start="70:13" pos:end="70:16">skip</name> <operator pos:start="70:18" pos:end="70:19">==</operator> <operator pos:start="70:21" pos:end="70:21">-</operator><literal type="number" pos:start="70:22" pos:end="70:22">1</literal></expr>)</condition> <block pos:start="70:25" pos:end="122:22">{<block_content pos:start="73:13" pos:end="122:22">
            <comment type="line" pos:start="71:13" pos:end="71:75">// Note that this call will make us skip the rest of the blocks</comment>
            <comment type="line" pos:start="72:13" pos:end="72:44">// if the frame prematurely ends</comment>
            <expr_stmt pos:start="73:13" pos:end="73:42"><expr pos:start="73:13" pos:end="73:41"><name pos:start="73:13" pos:end="73:16">skip</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:41"><name pos:start="73:20" pos:end="73:36">decode_skip_count</name><argument_list pos:start="73:37" pos:end="73:41">(<argument pos:start="73:38" pos:end="73:40"><expr pos:start="73:38" pos:end="73:40"><operator pos:start="73:38" pos:end="73:38">&amp;</operator><name pos:start="73:39" pos:end="73:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="74:9" pos:end="122:22"><if pos:start="74:9" pos:end="77:9">if <condition pos:start="74:12" pos:end="74:17">(<expr pos:start="74:13" pos:end="74:16"><name pos:start="74:13" pos:end="74:16">skip</name></expr>)</condition> <block pos:start="74:19" pos:end="77:9">{<block_content pos:start="75:13" pos:end="76:56">
            <expr_stmt pos:start="75:13" pos:end="76:56"><expr pos:start="75:13" pos:end="76:55"><call pos:start="75:13" pos:end="76:55"><name pos:start="75:13" pos:end="75:27">copy_superblock</name><argument_list pos:start="75:28" pos:end="76:55">(<argument pos:start="75:29" pos:end="75:42"><expr pos:start="75:29" pos:end="75:42"><name pos:start="75:29" pos:end="75:42">new_frame_data</name></expr></argument>, <argument pos:start="75:45" pos:end="75:54"><expr pos:start="75:45" pos:end="75:54"><name pos:start="75:45" pos:end="75:54">new_stride</name></expr></argument>,
                            <argument pos:start="76:29" pos:end="76:42"><expr pos:start="76:29" pos:end="76:42"><name pos:start="76:29" pos:end="76:42">old_frame_data</name></expr></argument>, <argument pos:start="76:45" pos:end="76:54"><expr pos:start="76:45" pos:end="76:54"><name pos:start="76:45" pos:end="76:54">old_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="77:11" pos:end="122:22">else <block pos:start="77:16" pos:end="122:22">{<block_content pos:start="78:13" pos:end="122:22">
            <expr_stmt pos:start="78:13" pos:end="79:56"><expr pos:start="78:13" pos:end="79:55"><call pos:start="78:13" pos:end="79:55"><name pos:start="78:13" pos:end="78:27">copy_superblock</name><argument_list pos:start="78:28" pos:end="79:55">(<argument pos:start="78:29" pos:end="78:37"><expr pos:start="78:29" pos:end="78:37"><name pos:start="78:29" pos:end="78:37"><name pos:start="78:29" pos:end="78:30">sb</name><operator pos:start="78:31" pos:end="78:31">.</operator><name pos:start="78:32" pos:end="78:37">pixels</name></name></expr></argument>, <argument pos:start="78:40" pos:end="78:40"><expr pos:start="78:40" pos:end="78:40"><literal type="number" pos:start="78:40" pos:end="78:40">8</literal></expr></argument>,
                            <argument pos:start="79:29" pos:end="79:42"><expr pos:start="79:29" pos:end="79:42"><name pos:start="79:29" pos:end="79:42">old_frame_data</name></expr></argument>, <argument pos:start="79:45" pos:end="79:54"><expr pos:start="79:45" pos:end="79:54"><name pos:start="79:45" pos:end="79:54">old_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:start="80:13" pos:end="122:22">while <condition pos:start="80:19" pos:end="80:62">(<expr pos:start="80:20" pos:end="80:61"><call pos:start="80:20" pos:end="80:37"><name pos:start="80:20" pos:end="80:32">get_bits_left</name><argument_list pos:start="80:33" pos:end="80:37">(<argument pos:start="80:34" pos:end="80:36"><expr pos:start="80:34" pos:end="80:36"><operator pos:start="80:34" pos:end="80:34">&amp;</operator><name pos:start="80:35" pos:end="80:36">gb</name></expr></argument>)</argument_list></call> <operator pos:start="80:39" pos:end="80:40">&gt;=</operator> <literal type="number" pos:start="80:42" pos:end="80:42">1</literal> <operator pos:start="80:44" pos:end="80:45">&amp;&amp;</operator> <operator pos:start="80:47" pos:end="80:47">!</operator><call pos:start="80:48" pos:end="80:61"><name pos:start="80:48" pos:end="80:56">get_bits1</name><argument_list pos:start="80:57" pos:end="80:61">(<argument pos:start="80:58" pos:end="80:60"><expr pos:start="80:58" pos:end="80:60"><operator pos:start="80:58" pos:end="80:58">&amp;</operator><name pos:start="80:59" pos:end="80:60">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="80:64" pos:end="122:22">{<block_content pos:start="81:17" pos:end="122:22">
                <decl_stmt pos:start="81:17" pos:end="81:30"><decl pos:start="81:17" pos:end="81:29"><type pos:start="81:17" pos:end="81:24"><name pos:start="81:17" pos:end="81:24">unsigned</name></type> <name pos:start="81:26" pos:end="81:29">mask</name></decl>;</decl_stmt>
                <expr_stmt pos:start="82:17" pos:end="82:76"><expr pos:start="82:17" pos:end="82:75"><name pos:start="82:17" pos:end="82:18">mb</name> <operator pos:start="82:20" pos:end="82:20">=</operator> <call pos:start="82:22" pos:end="82:75"><name pos:start="82:22" pos:end="82:38">decode_macroblock</name><argument_list pos:start="82:39" pos:end="82:75">(<argument pos:start="82:40" pos:end="82:40"><expr pos:start="82:40" pos:end="82:40"><name pos:start="82:40" pos:end="82:40">s</name></expr></argument>, <argument pos:start="82:43" pos:end="82:45"><expr pos:start="82:43" pos:end="82:45"><operator pos:start="82:43" pos:end="82:43">&amp;</operator><name pos:start="82:44" pos:end="82:45">gb</name></expr></argument>, <argument pos:start="82:48" pos:end="82:56"><expr pos:start="82:48" pos:end="82:56"><operator pos:start="82:48" pos:end="82:48">&amp;</operator><name pos:start="82:49" pos:end="82:56">cb_index</name></expr></argument>, <argument pos:start="82:59" pos:end="82:74"><expr pos:start="82:59" pos:end="82:74"><name pos:start="82:59" pos:end="82:74">superblock_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="83:17" pos:end="83:41"><expr pos:start="83:17" pos:end="83:40"><name pos:start="83:17" pos:end="83:20">mask</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <call pos:start="83:24" pos:end="83:40"><name pos:start="83:24" pos:end="83:31">get_bits</name><argument_list pos:start="83:32" pos:end="83:40">(<argument pos:start="83:33" pos:end="83:35"><expr pos:start="83:33" pos:end="83:35"><operator pos:start="83:33" pos:end="83:33">&amp;</operator><name pos:start="83:34" pos:end="83:35">gb</name></expr></argument>, <argument pos:start="83:38" pos:end="83:39"><expr pos:start="83:38" pos:end="83:39"><literal type="number" pos:start="83:38" pos:end="83:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="84:17" pos:end="84:35"><expr pos:start="84:17" pos:end="84:34"><name pos:start="84:17" pos:end="84:26">multi_mask</name> <operator pos:start="84:28" pos:end="84:29">|=</operator> <name pos:start="84:31" pos:end="84:34">mask</name></expr>;</expr_stmt>
                <for pos:start="85:17" pos:end="122:22">for <control pos:start="85:21" pos:end="85:40">(<init pos:start="85:22" pos:end="85:27"><expr pos:start="85:22" pos:end="85:26"><name pos:start="85:22" pos:end="85:22">i</name> <operator pos:start="85:24" pos:end="85:24">=</operator> <literal type="number" pos:start="85:26" pos:end="85:26">0</literal></expr>;</init> <condition pos:start="85:29" pos:end="85:35"><expr pos:start="85:29" pos:end="85:34"><name pos:start="85:29" pos:end="85:29">i</name> <operator pos:start="85:31" pos:end="85:31">&lt;</operator> <literal type="number" pos:start="85:33" pos:end="85:34">16</literal></expr>;</condition> <incr pos:start="85:37" pos:end="85:39"><expr pos:start="85:37" pos:end="85:39"><name pos:start="85:37" pos:end="85:37">i</name><operator pos:start="85:38" pos:end="85:39">++</operator></expr></incr>)</control> <block pos:start="85:42" pos:end="122:22">{<block_content pos:start="86:21" pos:end="122:22">
                    <if_stmt pos:start="86:21" pos:end="122:22"><if pos:start="86:21" pos:end="122:22">if <condition pos:start="86:24" pos:end="86:46">(<expr pos:start="86:25" pos:end="86:45"><name pos:start="86:25" pos:end="86:28">mask</name> <operator pos:start="86:30" pos:end="86:30">&amp;</operator> <name pos:start="86:32" pos:end="86:45"><name pos:start="86:32" pos:end="86:42">mask_matrix</name><index pos:start="86:43" pos:end="86:45">[<expr pos:start="86:44" pos:end="86:44"><name pos:start="86:44" pos:end="86:44">i</name></expr>]</index></name></expr>)</condition> <block pos:start="86:48" pos:end="122:22">{<block_content pos:start="87:25" pos:end="122:22">
                        <expr_stmt pos:start="87:25" pos:end="87:54"><expr pos:start="87:25" pos:end="87:53"><call pos:start="87:25" pos:end="87:53"><name pos:start="87:25" pos:end="87:41">insert_mb_into_sb</name><argument_list pos:start="87:42" pos:end="87:53">(<argument pos:start="87:43" pos:end="87:45"><expr pos:start="87:43" pos:end="87:45"><operator pos:start="87:43" pos:end="87:43">&amp;</operator><name pos:start="87:44" pos:end="87:45">sb</name></expr></argument>, <argument pos:start="87:48" pos:end="87:49"><expr pos:start="87:48" pos:end="87:49"><name pos:start="87:48" pos:end="87:49">mb</name></expr></argument>, <argument pos:start="87:52" pos:end="87:52"><expr pos:start="87:52" pos:end="87:52"><name pos:start="87:52" pos:end="87:52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="88:13" pos:end="122:22"><if pos:start="88:13" pos:end="122:22">if <condition pos:start="88:16" pos:end="88:32">(<expr pos:start="88:17" pos:end="88:31"><operator pos:start="88:17" pos:end="88:17">!</operator><call pos:start="88:18" pos:end="88:31"><name pos:start="88:18" pos:end="88:26">get_bits1</name><argument_list pos:start="88:27" pos:end="88:31">(<argument pos:start="88:28" pos:end="88:30"><expr pos:start="88:28" pos:end="88:30"><operator pos:start="88:28" pos:end="88:28">&amp;</operator><name pos:start="88:29" pos:end="88:30">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="88:34" pos:end="122:22">{<block_content pos:start="89:17" pos:end="122:22">
                <decl_stmt pos:start="89:17" pos:end="89:53"><decl pos:start="89:17" pos:end="89:52"><type pos:start="89:17" pos:end="89:24"><name pos:start="89:17" pos:end="89:24">unsigned</name></type> <name pos:start="89:26" pos:end="89:33">inv_mask</name> <init pos:start="89:35" pos:end="89:52">= <expr pos:start="89:37" pos:end="89:52"><call pos:start="89:37" pos:end="89:52"><name pos:start="89:37" pos:end="89:44">get_bits</name><argument_list pos:start="89:45" pos:end="89:52">(<argument pos:start="89:46" pos:end="89:48"><expr pos:start="89:46" pos:end="89:48"><operator pos:start="89:46" pos:end="89:46">&amp;</operator><name pos:start="89:47" pos:end="89:48">gb</name></expr></argument>, <argument pos:start="89:51" pos:end="89:51"><expr pos:start="89:51" pos:end="89:51"><literal type="number" pos:start="89:51" pos:end="89:51">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:start="90:17" pos:end="122:22">for <control pos:start="90:21" pos:end="90:39">(<init pos:start="90:22" pos:end="90:27"><expr pos:start="90:22" pos:end="90:26"><name pos:start="90:22" pos:end="90:22">i</name> <operator pos:start="90:24" pos:end="90:24">=</operator> <literal type="number" pos:start="90:26" pos:end="90:26">0</literal></expr>;</init> <condition pos:start="90:29" pos:end="90:34"><expr pos:start="90:29" pos:end="90:33"><name pos:start="90:29" pos:end="90:29">i</name> <operator pos:start="90:31" pos:end="90:31">&lt;</operator> <literal type="number" pos:start="90:33" pos:end="90:33">4</literal></expr>;</condition> <incr pos:start="90:36" pos:end="90:38"><expr pos:start="90:36" pos:end="90:38"><name pos:start="90:36" pos:end="90:36">i</name><operator pos:start="90:37" pos:end="90:38">++</operator></expr></incr>)</control> <block pos:start="90:41" pos:end="122:22">{<block_content pos:start="91:21" pos:end="122:22">
                    <if_stmt pos:start="91:21" pos:end="122:22"><if pos:start="91:21" pos:end="93:21">if <condition pos:start="91:24" pos:end="91:44">(<expr pos:start="91:25" pos:end="91:43"><name pos:start="91:25" pos:end="91:32">inv_mask</name> <operator pos:start="91:34" pos:end="91:34">&amp;</operator> <operator pos:start="91:36" pos:end="91:36">(</operator><literal type="number" pos:start="91:37" pos:end="91:37">1</literal> <operator pos:start="91:39" pos:end="91:40">&lt;&lt;</operator> <name pos:start="91:42" pos:end="91:42">i</name><operator pos:start="91:43" pos:end="91:43">)</operator></expr>)</condition> <block pos:start="91:46" pos:end="93:21">{<block_content pos:start="92:25" pos:end="92:49">
                        <expr_stmt pos:start="92:25" pos:end="92:49"><expr pos:start="92:25" pos:end="92:48"><name pos:start="92:25" pos:end="92:34">multi_mask</name> <operator pos:start="92:36" pos:end="92:37">^=</operator> <literal type="number" pos:start="92:39" pos:end="92:41">0xF</literal> <operator pos:start="92:43" pos:end="92:44">&lt;&lt;</operator> <name pos:start="92:46" pos:end="92:46">i</name><operator pos:start="92:47" pos:end="92:47">*</operator><literal type="number" pos:start="92:48" pos:end="92:48">4</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="93:23" pos:end="122:22">else <block pos:start="93:28" pos:end="122:22">{<block_content pos:start="94:25" pos:end="122:22">
                        <expr_stmt pos:start="94:25" pos:end="94:62"><expr pos:start="94:25" pos:end="94:61"><name pos:start="94:25" pos:end="94:34">multi_mask</name> <operator pos:start="94:36" pos:end="94:37">^=</operator> <call pos:start="94:39" pos:end="94:54"><name pos:start="94:39" pos:end="94:46">get_bits</name><argument_list pos:start="94:47" pos:end="94:54">(<argument pos:start="94:48" pos:end="94:50"><expr pos:start="94:48" pos:end="94:50"><operator pos:start="94:48" pos:end="94:48">&amp;</operator><name pos:start="94:49" pos:end="94:50">gb</name></expr></argument>, <argument pos:start="94:53" pos:end="94:53"><expr pos:start="94:53" pos:end="94:53"><literal type="number" pos:start="94:53" pos:end="94:53">4</literal></expr></argument>)</argument_list></call> <operator pos:start="94:56" pos:end="94:57">&lt;&lt;</operator> <name pos:start="94:59" pos:end="94:59">i</name><operator pos:start="94:60" pos:end="94:60">*</operator><literal type="number" pos:start="94:61" pos:end="94:61">4</literal></expr>;</expr_stmt>
                <for pos:start="95:17" pos:end="122:22">for <control pos:start="95:21" pos:end="95:40">(<init pos:start="95:22" pos:end="95:27"><expr pos:start="95:22" pos:end="95:26"><name pos:start="95:22" pos:end="95:22">i</name> <operator pos:start="95:24" pos:end="95:24">=</operator> <literal type="number" pos:start="95:26" pos:end="95:26">0</literal></expr>;</init> <condition pos:start="95:29" pos:end="95:35"><expr pos:start="95:29" pos:end="95:34"><name pos:start="95:29" pos:end="95:29">i</name> <operator pos:start="95:31" pos:end="95:31">&lt;</operator> <literal type="number" pos:start="95:33" pos:end="95:34">16</literal></expr>;</condition> <incr pos:start="95:37" pos:end="95:39"><expr pos:start="95:37" pos:end="95:39"><name pos:start="95:37" pos:end="95:37">i</name><operator pos:start="95:38" pos:end="95:39">++</operator></expr></incr>)</control> <block pos:start="95:42" pos:end="122:22">{<block_content pos:start="96:21" pos:end="122:22">
                    <if_stmt pos:start="96:21" pos:end="122:22"><if pos:start="96:21" pos:end="100:13">if <condition pos:start="96:24" pos:end="96:52">(<expr pos:start="96:25" pos:end="96:51"><name pos:start="96:25" pos:end="96:34">multi_mask</name> <operator pos:start="96:36" pos:end="96:36">&amp;</operator> <name pos:start="96:38" pos:end="96:51"><name pos:start="96:38" pos:end="96:48">mask_matrix</name><index pos:start="96:49" pos:end="96:51">[<expr pos:start="96:50" pos:end="96:50"><name pos:start="96:50" pos:end="96:50">i</name></expr>]</index></name></expr>)</condition> <block pos:start="96:54" pos:end="100:13">{<block_content pos:start="97:25" pos:end="99:54">
                        <expr_stmt pos:start="97:25" pos:end="98:65"><expr pos:start="97:25" pos:end="98:64"><name pos:start="97:25" pos:end="97:26">mb</name> <operator pos:start="97:28" pos:end="97:28">=</operator> <call pos:start="97:30" pos:end="98:64"><name pos:start="97:30" pos:end="97:46">decode_macroblock</name><argument_list pos:start="97:47" pos:end="98:64">(<argument pos:start="97:48" pos:end="97:48"><expr pos:start="97:48" pos:end="97:48"><name pos:start="97:48" pos:end="97:48">s</name></expr></argument>, <argument pos:start="97:51" pos:end="97:53"><expr pos:start="97:51" pos:end="97:53"><operator pos:start="97:51" pos:end="97:51">&amp;</operator><name pos:start="97:52" pos:end="97:53">gb</name></expr></argument>, <argument pos:start="97:56" pos:end="97:64"><expr pos:start="97:56" pos:end="97:64"><operator pos:start="97:56" pos:end="97:56">&amp;</operator><name pos:start="97:57" pos:end="97:64">cb_index</name></expr></argument>,
                                               <argument pos:start="98:48" pos:end="98:63"><expr pos:start="98:48" pos:end="98:63"><name pos:start="98:48" pos:end="98:63">superblock_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="99:25" pos:end="99:54"><expr pos:start="99:25" pos:end="99:53"><call pos:start="99:25" pos:end="99:53"><name pos:start="99:25" pos:end="99:41">insert_mb_into_sb</name><argument_list pos:start="99:42" pos:end="99:53">(<argument pos:start="99:43" pos:end="99:45"><expr pos:start="99:43" pos:end="99:45"><operator pos:start="99:43" pos:end="99:43">&amp;</operator><name pos:start="99:44" pos:end="99:45">sb</name></expr></argument>, <argument pos:start="99:48" pos:end="99:49"><expr pos:start="99:48" pos:end="99:49"><name pos:start="99:48" pos:end="99:49">mb</name></expr></argument>, <argument pos:start="99:52" pos:end="99:52"><expr pos:start="99:52" pos:end="99:52"><name pos:start="99:52" pos:end="99:52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="100:15" pos:end="122:22">else if <condition pos:start="100:23" pos:end="100:47">(<expr pos:start="100:24" pos:end="100:46"><name pos:start="100:24" pos:end="100:34">frame_flags</name> <operator pos:start="100:36" pos:end="100:36">&amp;</operator> <operator pos:start="100:38" pos:end="100:38">(</operator><literal type="number" pos:start="100:39" pos:end="100:39">1</literal> <operator pos:start="100:41" pos:end="100:42">&lt;&lt;</operator> <literal type="number" pos:start="100:44" pos:end="100:45">16</literal><operator pos:start="100:46" pos:end="100:46">)</operator></expr>)</condition> <block pos:start="100:49" pos:end="122:22">{<block_content pos:start="101:17" pos:end="122:22">
                <while pos:start="101:17" pos:end="122:22">while <condition pos:start="101:23" pos:end="101:66">(<expr pos:start="101:24" pos:end="101:65"><call pos:start="101:24" pos:end="101:41"><name pos:start="101:24" pos:end="101:36">get_bits_left</name><argument_list pos:start="101:37" pos:end="101:41">(<argument pos:start="101:38" pos:end="101:40"><expr pos:start="101:38" pos:end="101:40"><operator pos:start="101:38" pos:end="101:38">&amp;</operator><name pos:start="101:39" pos:end="101:40">gb</name></expr></argument>)</argument_list></call> <operator pos:start="101:43" pos:end="101:44">&gt;=</operator> <literal type="number" pos:start="101:46" pos:end="101:46">1</literal> <operator pos:start="101:48" pos:end="101:49">&amp;&amp;</operator> <operator pos:start="101:51" pos:end="101:51">!</operator><call pos:start="101:52" pos:end="101:65"><name pos:start="101:52" pos:end="101:60">get_bits1</name><argument_list pos:start="101:61" pos:end="101:65">(<argument pos:start="101:62" pos:end="101:64"><expr pos:start="101:62" pos:end="101:64"><operator pos:start="101:62" pos:end="101:62">&amp;</operator><name pos:start="101:63" pos:end="101:64">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:68" pos:end="122:22">{<block_content pos:start="102:21" pos:end="122:22">
                    <expr_stmt pos:start="102:21" pos:end="102:80"><expr pos:start="102:21" pos:end="102:79"><name pos:start="102:21" pos:end="102:22">mb</name> <operator pos:start="102:24" pos:end="102:24">=</operator> <call pos:start="102:26" pos:end="102:79"><name pos:start="102:26" pos:end="102:42">decode_macroblock</name><argument_list pos:start="102:43" pos:end="102:79">(<argument pos:start="102:44" pos:end="102:44"><expr pos:start="102:44" pos:end="102:44"><name pos:start="102:44" pos:end="102:44">s</name></expr></argument>, <argument pos:start="102:47" pos:end="102:49"><expr pos:start="102:47" pos:end="102:49"><operator pos:start="102:47" pos:end="102:47">&amp;</operator><name pos:start="102:48" pos:end="102:49">gb</name></expr></argument>, <argument pos:start="102:52" pos:end="102:60"><expr pos:start="102:52" pos:end="102:60"><operator pos:start="102:52" pos:end="102:52">&amp;</operator><name pos:start="102:53" pos:end="102:60">cb_index</name></expr></argument>, <argument pos:start="102:63" pos:end="102:78"><expr pos:start="102:63" pos:end="102:78"><name pos:start="102:63" pos:end="102:78">superblock_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="103:21" pos:end="103:65"><expr pos:start="103:21" pos:end="103:64"><call pos:start="103:21" pos:end="103:64"><name pos:start="103:21" pos:end="103:37">insert_mb_into_sb</name><argument_list pos:start="103:38" pos:end="103:64">(<argument pos:start="103:39" pos:end="103:41"><expr pos:start="103:39" pos:end="103:41"><operator pos:start="103:39" pos:end="103:39">&amp;</operator><name pos:start="103:40" pos:end="103:41">sb</name></expr></argument>, <argument pos:start="103:44" pos:end="103:45"><expr pos:start="103:44" pos:end="103:45"><name pos:start="103:44" pos:end="103:45">mb</name></expr></argument>, <argument pos:start="103:48" pos:end="103:63"><expr pos:start="103:48" pos:end="103:63"><call pos:start="103:48" pos:end="103:63"><name pos:start="103:48" pos:end="103:55">get_bits</name><argument_list pos:start="103:56" pos:end="103:63">(<argument pos:start="103:57" pos:end="103:59"><expr pos:start="103:57" pos:end="103:59"><operator pos:start="103:57" pos:end="103:57">&amp;</operator><name pos:start="103:58" pos:end="103:59">gb</name></expr></argument>, <argument pos:start="103:62" pos:end="103:62"><expr pos:start="103:62" pos:end="103:62"><literal type="number" pos:start="103:62" pos:end="103:62">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="104:13" pos:end="104:70"><expr pos:start="104:13" pos:end="104:69"><call pos:start="104:13" pos:end="104:69"><name pos:start="104:13" pos:end="104:27">copy_superblock</name><argument_list pos:start="104:28" pos:end="104:69">(<argument pos:start="104:29" pos:end="104:42"><expr pos:start="104:29" pos:end="104:42"><name pos:start="104:29" pos:end="104:42">new_frame_data</name></expr></argument>, <argument pos:start="104:45" pos:end="104:54"><expr pos:start="104:45" pos:end="104:54"><name pos:start="104:45" pos:end="104:54">new_stride</name></expr></argument>, <argument pos:start="104:57" pos:end="104:65"><expr pos:start="104:57" pos:end="104:65"><name pos:start="104:57" pos:end="104:65"><name pos:start="104:57" pos:end="104:58">sb</name><operator pos:start="104:59" pos:end="104:59">.</operator><name pos:start="104:60" pos:end="104:65">pixels</name></name></expr></argument>, <argument pos:start="104:68" pos:end="104:68"><expr pos:start="104:68" pos:end="104:68"><literal type="number" pos:start="104:68" pos:end="104:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="105:9" pos:end="105:31"><expr pos:start="105:9" pos:end="105:30"><name pos:start="105:9" pos:end="105:28">superblock_col_index</name><operator pos:start="105:29" pos:end="105:30">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="106:9" pos:end="106:28"><expr pos:start="106:9" pos:end="106:27"><name pos:start="106:9" pos:end="106:22">new_frame_data</name> <operator pos:start="106:24" pos:end="106:25">+=</operator> <literal type="number" pos:start="106:27" pos:end="106:27">8</literal></expr>;</expr_stmt>
        <if_stmt pos:start="107:9" pos:end="108:32"><if pos:start="107:9" pos:end="108:32">if <condition pos:start="107:12" pos:end="107:27">(<expr pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:26">old_frame_data</name></expr>)</condition><block type="pseudo" pos:start="108:13" pos:end="108:32"><block_content pos:start="108:13" pos:end="108:32">
            <expr_stmt pos:start="108:13" pos:end="108:32"><expr pos:start="108:13" pos:end="108:31"><name pos:start="108:13" pos:end="108:26">old_frame_data</name> <operator pos:start="108:28" pos:end="108:29">+=</operator> <literal type="number" pos:start="108:31" pos:end="108:31">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="109:9" pos:end="122:22"><if pos:start="109:9" pos:end="122:22">if <condition pos:start="109:12" pos:end="109:56">(<expr pos:start="109:13" pos:end="109:55"><name pos:start="109:13" pos:end="109:32">superblock_col_index</name> <operator pos:start="109:34" pos:end="109:35">==</operator> <name pos:start="109:37" pos:end="109:55">superblocks_per_row</name></expr>)</condition> <block pos:start="109:58" pos:end="122:22">{<block_content pos:start="110:13" pos:end="122:22">
            <expr_stmt pos:start="110:13" pos:end="110:71"><expr pos:start="110:13" pos:end="110:70"><name pos:start="110:13" pos:end="110:26">new_frame_data</name> <operator pos:start="110:28" pos:end="110:29">+=</operator> <name pos:start="110:31" pos:end="110:40">new_stride</name> <operator pos:start="110:42" pos:end="110:42">*</operator> <literal type="number" pos:start="110:44" pos:end="110:46">8</literal> <operator pos:start="110:46" pos:end="110:46">-</operator> <name pos:start="110:48" pos:end="110:66">superblocks_per_row</name> <operator pos:start="110:68" pos:end="110:68">*</operator> <literal type="number" pos:start="110:70" pos:end="110:70">8</literal></expr>;</expr_stmt>
            <if_stmt pos:start="111:13" pos:end="112:75"><if pos:start="111:13" pos:end="112:75">if <condition pos:start="111:16" pos:end="111:31">(<expr pos:start="111:17" pos:end="111:30"><name pos:start="111:17" pos:end="111:30">old_frame_data</name></expr>)</condition><block type="pseudo" pos:start="112:17" pos:end="112:75"><block_content pos:start="112:17" pos:end="112:75">
                <expr_stmt pos:start="112:17" pos:end="112:75"><expr pos:start="112:17" pos:end="112:74"><name pos:start="112:17" pos:end="112:30">old_frame_data</name> <operator pos:start="112:32" pos:end="112:33">+=</operator> <name pos:start="112:35" pos:end="112:44">old_stride</name> <operator pos:start="112:46" pos:end="112:46">*</operator> <literal type="number" pos:start="112:48" pos:end="112:50">8</literal> <operator pos:start="112:50" pos:end="112:50">-</operator> <name pos:start="112:52" pos:end="112:70">superblocks_per_row</name> <operator pos:start="112:72" pos:end="112:72">*</operator> <literal type="number" pos:start="112:74" pos:end="112:74">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="113:13" pos:end="113:37"><expr pos:start="113:13" pos:end="113:36"><name pos:start="113:13" pos:end="113:32">superblock_col_index</name> <operator pos:start="113:34" pos:end="113:34">=</operator> <literal type="number" pos:start="113:36" pos:end="113:36">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="114:9" pos:end="114:15"><expr pos:start="114:9" pos:end="114:14"><name pos:start="114:9" pos:end="114:12">skip</name><operator pos:start="114:13" pos:end="114:14">--</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="115:5" pos:end="117:58"><expr pos:start="115:5" pos:end="117:57"><call pos:start="115:5" pos:end="117:57"><name pos:start="115:5" pos:end="115:10">av_log</name><argument_list pos:start="115:11" pos:end="117:57">(<argument pos:start="115:12" pos:end="115:16"><expr pos:start="115:12" pos:end="115:16"><name pos:start="115:12" pos:end="115:16">avctx</name></expr></argument>, <argument pos:start="115:19" pos:end="115:30"><expr pos:start="115:19" pos:end="115:30"><name pos:start="115:19" pos:end="115:30">AV_LOG_DEBUG</name></expr></argument>,
           <argument pos:start="116:12" pos:end="116:39"><expr pos:start="116:12" pos:end="116:39"><literal type="string" pos:start="116:12" pos:end="116:39">"Escape sizes: %i, %i, %i\n"</literal></expr></argument>,
           <argument pos:start="117:12" pos:end="117:21"><expr pos:start="117:12" pos:end="117:21"><name pos:start="117:12" pos:end="117:21">frame_size</name></expr></argument>, <argument pos:start="117:24" pos:end="117:31"><expr pos:start="117:24" pos:end="117:31"><name pos:start="117:24" pos:end="117:31">buf_size</name></expr></argument>, <argument pos:start="117:34" pos:end="117:56"><expr pos:start="117:34" pos:end="117:56"><call pos:start="117:34" pos:end="117:52"><name pos:start="117:34" pos:end="117:47">get_bits_count</name><argument_list pos:start="117:48" pos:end="117:52">(<argument pos:start="117:49" pos:end="117:51"><expr pos:start="117:49" pos:end="117:51"><operator pos:start="117:49" pos:end="117:49">&amp;</operator><name pos:start="117:50" pos:end="117:51">gb</name></expr></argument>)</argument_list></call> <operator pos:start="117:54" pos:end="117:54">/</operator> <literal type="number" pos:start="117:56" pos:end="117:56">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="118:5" pos:end="118:29"><expr pos:start="118:5" pos:end="118:28"><call pos:start="118:5" pos:end="118:28"><name pos:start="118:5" pos:end="118:18">av_frame_unref</name><argument_list pos:start="118:19" pos:end="118:28">(<argument pos:start="118:20" pos:end="118:27"><expr pos:start="118:20" pos:end="118:27"><name pos:start="118:20" pos:end="118:27"><name pos:start="118:20" pos:end="118:20">s</name><operator pos:start="118:21" pos:end="118:22">-&gt;</operator><name pos:start="118:23" pos:end="118:27">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="119:5" pos:end="120:19"><if pos:start="119:5" pos:end="120:19">if <condition pos:start="119:8" pos:end="119:50">(<expr pos:start="119:9" pos:end="119:49"><operator pos:start="119:9" pos:end="119:9">(</operator><name pos:start="119:10" pos:end="119:12">ret</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <call pos:start="119:16" pos:end="119:44"><name pos:start="119:16" pos:end="119:27">av_frame_ref</name><argument_list pos:start="119:28" pos:end="119:44">(<argument pos:start="119:29" pos:end="119:36"><expr pos:start="119:29" pos:end="119:36"><name pos:start="119:29" pos:end="119:36"><name pos:start="119:29" pos:end="119:29">s</name><operator pos:start="119:30" pos:end="119:31">-&gt;</operator><name pos:start="119:32" pos:end="119:36">frame</name></name></expr></argument>, <argument pos:start="119:39" pos:end="119:43"><expr pos:start="119:39" pos:end="119:43"><name pos:start="119:39" pos:end="119:43">frame</name></expr></argument>)</argument_list></call><operator pos:start="119:45" pos:end="119:45">)</operator> <operator pos:start="119:47" pos:end="119:47">&lt;</operator> <literal type="number" pos:start="119:49" pos:end="119:49">0</literal></expr>)</condition><block type="pseudo" pos:start="120:9" pos:end="120:19"><block_content pos:start="120:9" pos:end="120:19">
        <return pos:start="120:9" pos:end="120:19">return <expr pos:start="120:16" pos:end="120:18"><name pos:start="120:16" pos:end="120:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="121:5" pos:end="121:19"><expr pos:start="121:5" pos:end="121:18"><operator pos:start="121:5" pos:end="121:5">*</operator><name pos:start="121:6" pos:end="121:14">got_frame</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <literal type="number" pos:start="121:18" pos:end="121:18">1</literal></expr>;</expr_stmt>
    <return pos:start="122:5" pos:end="122:22">return <expr pos:start="122:12" pos:end="122:21"><name pos:start="122:12" pos:end="122:21">frame_size</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></while></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></function></unit>
