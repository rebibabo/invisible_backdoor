<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15048.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">http_read_stream</name><parameter_list pos:start="1:28" pos:end="1:66">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:38">URLContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">h</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">buf</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:65"><decl pos:start="1:58" pos:end="1:65"><type pos:start="1:58" pos:end="1:65"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:65">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:20">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">HTTPContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:33">= <expr pos:start="5:22" pos:end="5:33"><name pos:start="5:22" pos:end="5:33"><name pos:start="5:22" pos:end="5:22">h</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:33">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name></decl>, <decl pos:start="7:14" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:25">new_location</name></decl>, <decl pos:start="7:28" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:28" pos:end="7:35">read_ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:20">seek_ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:23">reconnect_delay</name> <init pos:start="11:25" pos:end="11:27">= <expr pos:start="11:27" pos:end="11:27"><literal type="number" pos:start="11:27" pos:end="11:27">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:27"><if pos:start="15:5" pos:end="17:27">if <condition pos:start="15:8" pos:end="15:15">(<expr pos:start="15:9" pos:end="15:14"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">s</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:14">hd</name></name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:27"><block_content pos:start="17:9" pos:end="17:27">

        <return pos:start="17:9" pos:end="17:27">return <expr pos:start="17:16" pos:end="17:26"><name pos:start="17:16" pos:end="17:26">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="34:0"><if pos:start="21:5" pos:end="34:0">if <condition pos:start="21:8" pos:end="21:46">(<expr pos:start="21:9" pos:end="21:45"><name pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:27">end_chunked_post</name></name> <operator pos:start="21:29" pos:end="21:30">&amp;&amp;</operator> <operator pos:start="21:32" pos:end="21:32">!</operator><name pos:start="21:33" pos:end="21:45"><name pos:start="21:33" pos:end="21:33">s</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:45">end_header</name></name></expr>)</condition> <block pos:start="21:48" pos:end="34:0">{<block_content pos:start="23:9" pos:end="27:23">

        <expr_stmt pos:start="23:9" pos:end="23:49"><expr pos:start="23:9" pos:end="23:48"><name pos:start="23:9" pos:end="23:11">err</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:48"><name pos:start="23:15" pos:end="23:30">http_read_header</name><argument_list pos:start="23:31" pos:end="23:48">(<argument pos:start="23:32" pos:end="23:32"><expr pos:start="23:32" pos:end="23:32"><name pos:start="23:32" pos:end="23:32">h</name></expr></argument>, <argument pos:start="23:35" pos:end="23:47"><expr pos:start="23:35" pos:end="23:47"><operator pos:start="23:35" pos:end="23:35">&amp;</operator><name pos:start="23:36" pos:end="23:47">new_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:23"><if pos:start="25:9" pos:end="27:23">if <condition pos:start="25:12" pos:end="25:20">(<expr pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:15">err</name> <operator pos:start="25:17" pos:end="25:17">&lt;</operator> <literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:23"><block_content pos:start="27:13" pos:end="27:23">

            <return pos:start="27:13" pos:end="27:23">return <expr pos:start="27:20" pos:end="27:22"><name pos:start="27:20" pos:end="27:22">err</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="33:1" pos:end="33:15">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:15">CONFIG_ZLIB</name></expr></cpp:if>

    <if_stmt pos:start="35:5" pos:end="40:0"><if pos:start="35:5" pos:end="40:0">if <condition pos:start="35:8" pos:end="35:22">(<expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:21">compressed</name></name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="40:0"><block_content pos:start="37:9" pos:end="40:0">

        <return pos:start="37:9" pos:end="40:0">return <expr pos:start="37:16" pos:end="37:53"><call pos:start="37:16" pos:end="37:53"><name pos:start="37:16" pos:end="37:39">http_buf_read_compressed</name><argument_list pos:start="37:40" pos:end="37:53">(<argument pos:start="37:41" pos:end="37:41"><expr pos:start="37:41" pos:end="37:41"><name pos:start="37:41" pos:end="37:41">h</name></expr></argument>, <argument pos:start="37:44" pos:end="37:46"><expr pos:start="37:44" pos:end="37:46"><name pos:start="37:44" pos:end="37:46">buf</name></expr></argument>, <argument pos:start="37:49" pos:end="37:52"><expr pos:start="37:49" pos:end="37:52"><name pos:start="37:49" pos:end="37:52">size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="39:8" pos:end="39:24">/* CONFIG_ZLIB */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:43"><expr pos:start="41:5" pos:end="41:42"><name pos:start="41:5" pos:end="41:12">read_ret</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:42"><name pos:start="41:16" pos:end="41:28">http_buf_read</name><argument_list pos:start="41:29" pos:end="41:42">(<argument pos:start="41:30" pos:end="41:30"><expr pos:start="41:30" pos:end="41:30"><name pos:start="41:30" pos:end="41:30">h</name></expr></argument>, <argument pos:start="41:33" pos:end="41:35"><expr pos:start="41:33" pos:end="41:35"><name pos:start="41:33" pos:end="41:35">buf</name></expr></argument>, <argument pos:start="41:38" pos:end="41:41"><expr pos:start="41:38" pos:end="41:41"><name pos:start="41:38" pos:end="41:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="43:5" pos:end="87:5">while <condition pos:start="43:11" pos:end="45:106">(<expr pos:start="43:12" pos:end="45:105"><operator pos:start="43:12" pos:end="43:12">(</operator><name pos:start="43:13" pos:end="43:121"><name pos:start="43:13" pos:end="43:20">read_ret</name>  <argument_list type="generic" pos:start="43:23" pos:end="43:121">&lt; <argument pos:start="43:25" pos:end="43:119"><expr pos:start="43:25" pos:end="43:119"><literal type="number" pos:start="43:25" pos:end="43:25">0</literal>           <operator pos:start="43:37" pos:end="43:38">&amp;&amp;</operator> <name pos:start="43:40" pos:end="43:51"><name pos:start="43:40" pos:end="43:40">s</name><operator pos:start="43:41" pos:end="43:42">-&gt;</operator><name pos:start="43:43" pos:end="43:51">reconnect</name></name>        <operator pos:start="43:60" pos:end="43:61">&amp;&amp;</operator> <operator pos:start="43:63" pos:end="43:63">(</operator><operator pos:start="43:64" pos:end="43:64">!</operator><name pos:start="43:65" pos:end="43:78"><name pos:start="43:65" pos:end="43:65">h</name><operator pos:start="43:66" pos:end="43:67">-&gt;</operator><name pos:start="43:68" pos:end="43:78">is_streamed</name></name> <operator pos:start="43:80" pos:end="43:81">||</operator> <name pos:start="43:83" pos:end="43:103"><name pos:start="43:83" pos:end="43:83">s</name><operator pos:start="43:84" pos:end="43:85">-&gt;</operator><name pos:start="43:86" pos:end="43:103">reconnect_streamed</name></name><operator pos:start="43:104" pos:end="43:104">)</operator> <operator pos:start="43:106" pos:end="43:107">&amp;&amp;</operator> <name pos:start="43:109" pos:end="43:119"><name pos:start="43:109" pos:end="43:109">s</name><operator pos:start="43:110" pos:end="43:111">-&gt;</operator><name pos:start="43:112" pos:end="43:119">filesize</name></name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="43:123" pos:end="43:123">0</literal> <operator pos:start="43:125" pos:end="43:126">&amp;&amp;</operator> <name pos:start="43:128" pos:end="43:133"><name pos:start="43:128" pos:end="43:128">s</name><operator pos:start="43:129" pos:end="43:130">-&gt;</operator><name pos:start="43:131" pos:end="43:133">off</name></name> <operator pos:start="43:135" pos:end="43:135">&lt;</operator> <name pos:start="43:137" pos:end="43:147"><name pos:start="43:137" pos:end="43:137">s</name><operator pos:start="43:138" pos:end="43:139">-&gt;</operator><name pos:start="43:140" pos:end="43:147">filesize</name></name><operator pos:start="43:148" pos:end="43:148">)</operator>

        <operator pos:start="45:9" pos:end="45:10">||</operator> <operator pos:start="45:12" pos:end="45:12">(</operator><name pos:start="45:13" pos:end="45:20">read_ret</name> <operator pos:start="45:22" pos:end="45:23">==</operator> <name pos:start="45:25" pos:end="45:35">AVERROR_EOF</name> <operator pos:start="45:37" pos:end="45:38">&amp;&amp;</operator> <name pos:start="45:40" pos:end="45:58"><name pos:start="45:40" pos:end="45:40">s</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:58">reconnect_at_eof</name></name> <operator pos:start="45:60" pos:end="45:61">&amp;&amp;</operator> <operator pos:start="45:63" pos:end="45:63">(</operator><operator pos:start="45:64" pos:end="45:64">!</operator><name pos:start="45:65" pos:end="45:78"><name pos:start="45:65" pos:end="45:65">h</name><operator pos:start="45:66" pos:end="45:67">-&gt;</operator><name pos:start="45:68" pos:end="45:78">is_streamed</name></name> <operator pos:start="45:80" pos:end="45:81">||</operator> <name pos:start="45:83" pos:end="45:103"><name pos:start="45:83" pos:end="45:83">s</name><operator pos:start="45:84" pos:end="45:85">-&gt;</operator><name pos:start="45:86" pos:end="45:103">reconnect_streamed</name></name><operator pos:start="45:104" pos:end="45:104">)</operator><operator pos:start="45:105" pos:end="45:105">)</operator></expr>)</condition> <block pos:start="45:108" pos:end="87:5">{<block_content pos:start="47:9" pos:end="85:47">

        <decl_stmt pos:start="47:9" pos:end="47:54"><decl pos:start="47:9" pos:end="47:53"><type pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:16">uint64_t</name></type> <name pos:start="47:18" pos:end="47:23">target</name> <init pos:start="47:25" pos:end="47:53">= <expr pos:start="47:27" pos:end="47:53"><ternary pos:start="47:27" pos:end="47:53"><condition pos:start="47:27" pos:end="47:42"><expr pos:start="47:27" pos:end="47:40"><name pos:start="47:27" pos:end="47:40"><name pos:start="47:27" pos:end="47:27">h</name><operator pos:start="47:28" pos:end="47:29">-&gt;</operator><name pos:start="47:30" pos:end="47:40">is_streamed</name></name></expr> ?</condition><then pos:start="47:44" pos:end="47:44"> <expr pos:start="47:44" pos:end="47:44"><literal type="number" pos:start="47:44" pos:end="47:44">0</literal></expr> </then><else pos:start="47:46" pos:end="47:53">: <expr pos:start="47:48" pos:end="47:53"><name pos:start="47:48" pos:end="47:53"><name pos:start="47:48" pos:end="47:48">s</name><operator pos:start="47:49" pos:end="47:50">-&gt;</operator><name pos:start="47:51" pos:end="47:53">off</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="51:9" pos:end="53:28"><if pos:start="51:9" pos:end="53:28">if <condition pos:start="51:12" pos:end="51:37">(<expr pos:start="51:13" pos:end="51:36"><name pos:start="51:13" pos:end="51:20">read_ret</name> <operator pos:start="51:22" pos:end="51:23">==</operator> <name pos:start="51:25" pos:end="51:36">AVERROR_EXIT</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:28"><block_content pos:start="53:13" pos:end="53:28">

            <return pos:start="53:13" pos:end="53:28">return <expr pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:27">read_ret</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="57:9" pos:end="59:32"><if pos:start="57:9" pos:end="59:32">if <condition pos:start="57:12" pos:end="57:53">(<expr pos:start="57:13" pos:end="57:52"><name pos:start="57:13" pos:end="57:27">reconnect_delay</name> <operator pos:start="57:29" pos:end="57:29">&gt;</operator> <name pos:start="57:31" pos:end="57:52"><name pos:start="57:31" pos:end="57:31">s</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:52">reconnect_delay_max</name></name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:32"><block_content pos:start="59:13" pos:end="59:32">

            <return pos:start="59:13" pos:end="59:32">return <expr pos:start="59:20" pos:end="59:31"><call pos:start="59:20" pos:end="59:31"><name pos:start="59:20" pos:end="59:26">AVERROR</name><argument_list pos:start="59:27" pos:end="59:31">(<argument pos:start="59:28" pos:end="59:30"><expr pos:start="59:28" pos:end="59:30"><name pos:start="59:28" pos:end="59:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:141"><expr pos:start="63:9" pos:end="63:140"><call pos:start="63:9" pos:end="63:140"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="63:140">(<argument pos:start="63:16" pos:end="63:16"><expr pos:start="63:16" pos:end="63:16"><name pos:start="63:16" pos:end="63:16">h</name></expr></argument>, <argument pos:start="63:19" pos:end="63:32"><expr pos:start="63:19" pos:end="63:32"><name pos:start="63:19" pos:end="63:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="63:35" pos:end="63:92"><expr pos:start="63:35" pos:end="63:92"><literal type="string" pos:start="63:35" pos:end="63:55">"Will reconnect at %"</literal><name pos:start="63:56" pos:end="63:61">PRIu64</name><literal type="string" pos:start="63:62" pos:end="63:92">" in %d second(s), error=%s.\n"</literal></expr></argument>, <argument pos:start="63:95" pos:end="63:100"><expr pos:start="63:95" pos:end="63:100"><name pos:start="63:95" pos:end="63:100"><name pos:start="63:95" pos:end="63:95">s</name><operator pos:start="63:96" pos:end="63:97">-&gt;</operator><name pos:start="63:98" pos:end="63:100">off</name></name></expr></argument>, <argument pos:start="63:103" pos:end="63:117"><expr pos:start="63:103" pos:end="63:117"><name pos:start="63:103" pos:end="63:117">reconnect_delay</name></expr></argument>, <argument pos:start="63:120" pos:end="63:139"><expr pos:start="63:120" pos:end="63:139"><call pos:start="63:120" pos:end="63:139"><name pos:start="63:120" pos:end="63:129">av_err2str</name><argument_list pos:start="63:130" pos:end="63:139">(<argument pos:start="63:131" pos:end="63:138"><expr pos:start="63:131" pos:end="63:138"><name pos:start="63:131" pos:end="63:138">read_ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:97"><expr pos:start="65:9" pos:end="65:96"><name pos:start="65:9" pos:end="65:11">err</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:96"><name pos:start="65:15" pos:end="65:44">ff_network_sleep_interruptible</name><argument_list pos:start="65:45" pos:end="65:96">(<argument pos:start="65:46" pos:end="65:71"><expr pos:start="65:46" pos:end="65:71"><literal type="number" pos:start="65:46" pos:end="65:50">1000U</literal><operator pos:start="65:51" pos:end="65:51">*</operator><literal type="number" pos:start="65:52" pos:end="65:55">1000</literal><operator pos:start="65:56" pos:end="65:56">*</operator><name pos:start="65:57" pos:end="65:71">reconnect_delay</name></expr></argument>, <argument pos:start="65:74" pos:end="65:95"><expr pos:start="65:74" pos:end="65:95"><operator pos:start="65:74" pos:end="65:74">&amp;</operator><name pos:start="65:75" pos:end="65:95"><name pos:start="65:75" pos:end="65:75">h</name><operator pos:start="65:76" pos:end="65:77">-&gt;</operator><name pos:start="65:78" pos:end="65:95">interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="69:23"><if pos:start="67:9" pos:end="69:23">if <condition pos:start="67:12" pos:end="67:38">(<expr pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:15">err</name> <operator pos:start="67:17" pos:end="67:18">!=</operator> <call pos:start="67:20" pos:end="67:37"><name pos:start="67:20" pos:end="67:26">AVERROR</name><argument_list pos:start="67:27" pos:end="67:37">(<argument pos:start="67:28" pos:end="67:36"><expr pos:start="67:28" pos:end="67:36"><name pos:start="67:28" pos:end="67:36">ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:23"><block_content pos:start="69:13" pos:end="69:23">

            <return pos:start="69:13" pos:end="69:23">return <expr pos:start="69:20" pos:end="69:22"><name pos:start="69:20" pos:end="69:22">err</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:48"><expr pos:start="71:9" pos:end="71:47"><name pos:start="71:9" pos:end="71:23">reconnect_delay</name> <operator pos:start="71:25" pos:end="71:25">=</operator> <literal type="number" pos:start="71:27" pos:end="71:29">1</literal> <operator pos:start="71:29" pos:end="71:29">+</operator> <literal type="number" pos:start="71:31" pos:end="71:31">2</literal><operator pos:start="71:32" pos:end="71:32">*</operator><name pos:start="71:33" pos:end="71:47">reconnect_delay</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:62"><expr pos:start="73:9" pos:end="73:61"><name pos:start="73:9" pos:end="73:16">seek_ret</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:61"><name pos:start="73:20" pos:end="73:37">http_seek_internal</name><argument_list pos:start="73:38" pos:end="73:61">(<argument pos:start="73:39" pos:end="73:39"><expr pos:start="73:39" pos:end="73:39"><name pos:start="73:39" pos:end="73:39">h</name></expr></argument>, <argument pos:start="73:42" pos:end="73:47"><expr pos:start="73:42" pos:end="73:47"><name pos:start="73:42" pos:end="73:47">target</name></expr></argument>, <argument pos:start="73:50" pos:end="73:57"><expr pos:start="73:50" pos:end="73:57"><name pos:start="73:50" pos:end="73:57">SEEK_SET</name></expr></argument>, <argument pos:start="73:60" pos:end="73:60"><expr pos:start="73:60" pos:end="73:60"><literal type="number" pos:start="73:60" pos:end="73:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:48">(<expr pos:start="75:13" pos:end="75:47"><name pos:start="75:13" pos:end="75:20">seek_ret</name> <operator pos:start="75:22" pos:end="75:23">&gt;=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">0</literal> <operator pos:start="75:27" pos:end="75:28">&amp;&amp;</operator> <name pos:start="75:30" pos:end="75:37">seek_ret</name> <operator pos:start="75:39" pos:end="75:40">!=</operator> <name pos:start="75:42" pos:end="75:47">target</name></expr>)</condition> <block pos:start="75:50" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:28">

            <expr_stmt pos:start="77:13" pos:end="77:83"><expr pos:start="77:13" pos:end="77:82"><call pos:start="77:13" pos:end="77:82"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="77:82">(<argument pos:start="77:20" pos:end="77:20"><expr pos:start="77:20" pos:end="77:20"><name pos:start="77:20" pos:end="77:20">h</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:37" pos:end="77:73"><expr pos:start="77:37" pos:end="77:73"><literal type="string" pos:start="77:37" pos:end="77:62">"Failed to reconnect at %"</literal><name pos:start="77:63" pos:end="77:68">PRIu64</name><literal type="string" pos:start="77:69" pos:end="77:73">".\n"</literal></expr></argument>, <argument pos:start="77:76" pos:end="77:81"><expr pos:start="77:76" pos:end="77:81"><name pos:start="77:76" pos:end="77:81">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:28">return <expr pos:start="79:20" pos:end="79:27"><name pos:start="79:20" pos:end="79:27">read_ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:47"><expr pos:start="85:9" pos:end="85:46"><name pos:start="85:9" pos:end="85:16">read_ret</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <call pos:start="85:20" pos:end="85:46"><name pos:start="85:20" pos:end="85:32">http_buf_read</name><argument_list pos:start="85:33" pos:end="85:46">(<argument pos:start="85:34" pos:end="85:34"><expr pos:start="85:34" pos:end="85:34"><name pos:start="85:34" pos:end="85:34">h</name></expr></argument>, <argument pos:start="85:37" pos:end="85:39"><expr pos:start="85:37" pos:end="85:39"><name pos:start="85:37" pos:end="85:39">buf</name></expr></argument>, <argument pos:start="85:42" pos:end="85:45"><expr pos:start="85:42" pos:end="85:45"><name pos:start="85:42" pos:end="85:45">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="91:5" pos:end="91:20">return <expr pos:start="91:12" pos:end="91:19"><name pos:start="91:12" pos:end="91:19">read_ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
