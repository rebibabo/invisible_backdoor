<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1588.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_hdlr</name><parameter_list pos:start="1:25" pos:end="1:75">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:53">ByteIOContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">pb</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:74"><decl pos:start="1:60" pos:end="1:74"><type pos:start="1:60" pos:end="1:74"><name pos:start="1:60" pos:end="1:69">MOV_atom_t</name></type> <name pos:start="1:71" pos:end="1:74">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:5" pos:end="165:13">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name> <init pos:start="5:18" pos:end="5:54">= <expr pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:20">c</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:24">fc</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:33">streams</name><index pos:start="5:34" pos:end="5:54">[<expr pos:start="5:35" pos:end="5:53"><name pos:start="5:35" pos:end="5:51"><name pos:start="5:35" pos:end="5:35">c</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:39">fc</name><operator pos:start="5:40" pos:end="5:41">-&gt;</operator><name pos:start="5:42" pos:end="5:51">nb_streams</name></name><operator pos:start="5:52" pos:end="5:52">-</operator><literal type="number" pos:start="5:53" pos:end="5:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">ctype</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:29"><expr pos:start="17:5" pos:end="17:28"><call pos:start="17:5" pos:end="17:28"><name pos:start="17:5" pos:end="17:14">print_atom</name><argument_list pos:start="17:15" pos:end="17:28">(<argument pos:start="17:16" pos:end="17:21"><expr pos:start="17:16" pos:end="17:21"><literal type="string" pos:start="17:16" pos:end="17:21">"hdlr"</literal></expr></argument>, <argument pos:start="17:24" pos:end="17:27"><expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:17"><expr pos:start="21:5" pos:end="21:16"><call pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">get_byte</name><argument_list pos:start="21:13" pos:end="21:16">(<argument pos:start="21:14" pos:end="21:15"><expr pos:start="21:14" pos:end="21:15"><name pos:start="21:14" pos:end="21:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="21:19" pos:end="21:31">/* version */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:17"><expr pos:start="23:5" pos:end="23:16"><call pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">get_byte</name><argument_list pos:start="23:13" pos:end="23:16">(<argument pos:start="23:14" pos:end="23:15"><expr pos:start="23:14" pos:end="23:15"><name pos:start="23:14" pos:end="23:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="23:19" pos:end="23:31"><expr pos:start="23:19" pos:end="23:30"><call pos:start="23:19" pos:end="23:30"><name pos:start="23:19" pos:end="23:26">get_byte</name><argument_list pos:start="23:27" pos:end="23:30">(<argument pos:start="23:28" pos:end="23:29"><expr pos:start="23:28" pos:end="23:29"><name pos:start="23:28" pos:end="23:29">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="23:33" pos:end="23:45"><expr pos:start="23:33" pos:end="23:44"><call pos:start="23:33" pos:end="23:44"><name pos:start="23:33" pos:end="23:40">get_byte</name><argument_list pos:start="23:41" pos:end="23:44">(<argument pos:start="23:42" pos:end="23:43"><expr pos:start="23:42" pos:end="23:43"><name pos:start="23:42" pos:end="23:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="23:47" pos:end="23:57">/* flags */</comment>



    <comment type="block" pos:start="27:5" pos:end="27:24">/* component type */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:25"><expr pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:9">ctype</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:24"><name pos:start="29:13" pos:end="29:20">get_le32</name><argument_list pos:start="29:21" pos:end="29:24">(<argument pos:start="29:22" pos:end="29:23"><expr pos:start="29:22" pos:end="29:23"><name pos:start="29:22" pos:end="29:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="36:0"><expr pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:8">type</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:23"><name pos:start="31:12" pos:end="31:19">get_le32</name><argument_list pos:start="31:20" pos:end="31:23">(<argument pos:start="31:21" pos:end="31:22"><expr pos:start="31:21" pos:end="31:22"><name pos:start="31:21" pos:end="31:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="31:26" pos:end="31:48">/* component subtype */</comment>



<cpp:ifdef pos:start="35:1" pos:end="35:12">#<cpp:directive pos:start="35:2" pos:end="35:6">ifdef</cpp:directive> <name pos:start="35:8" pos:end="35:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="37:5" pos:end="37:138"><expr pos:start="37:5" pos:end="37:137"><call pos:start="37:5" pos:end="37:137"><name pos:start="37:5" pos:end="37:10">printf</name><argument_list pos:start="37:11" pos:end="37:137">(<argument pos:start="37:12" pos:end="37:40"><expr pos:start="37:12" pos:end="37:40"><literal type="string" pos:start="37:12" pos:end="37:40">"ctype= %c%c%c%c (0x%08lx)\n"</literal></expr></argument>, <argument pos:start="37:43" pos:end="37:59"><expr pos:start="37:43" pos:end="37:59"><operator pos:start="37:43" pos:end="37:43">*</operator><operator pos:start="37:44" pos:end="37:44">(</operator><operator pos:start="37:45" pos:end="37:45">(</operator><name pos:start="37:46" pos:end="37:49">char</name> <operator pos:start="37:51" pos:end="37:51">*</operator><operator pos:start="37:52" pos:end="37:52">)</operator><operator pos:start="37:53" pos:end="37:53">&amp;</operator><name pos:start="37:54" pos:end="37:58">ctype</name><operator pos:start="37:59" pos:end="37:59">)</operator></expr></argument>, <argument pos:start="37:62" pos:end="37:80"><expr pos:start="37:62" pos:end="37:80"><operator pos:start="37:62" pos:end="37:62">(</operator><operator pos:start="37:63" pos:end="37:63">(</operator><name pos:start="37:64" pos:end="37:67">char</name> <operator pos:start="37:69" pos:end="37:69">*</operator><operator pos:start="37:70" pos:end="37:70">)</operator><operator pos:start="37:71" pos:end="37:71">&amp;</operator><name pos:start="37:72" pos:end="37:76">ctype</name><operator pos:start="37:77" pos:end="37:77">)</operator><index pos:start="37:78" pos:end="37:80">[<expr pos:start="37:79" pos:end="37:79"><literal type="number" pos:start="37:79" pos:end="37:79">1</literal></expr>]</index></expr></argument>, <argument pos:start="37:83" pos:end="37:101"><expr pos:start="37:83" pos:end="37:101"><operator pos:start="37:83" pos:end="37:83">(</operator><operator pos:start="37:84" pos:end="37:84">(</operator><name pos:start="37:85" pos:end="37:88">char</name> <operator pos:start="37:90" pos:end="37:90">*</operator><operator pos:start="37:91" pos:end="37:91">)</operator><operator pos:start="37:92" pos:end="37:92">&amp;</operator><name pos:start="37:93" pos:end="37:97">ctype</name><operator pos:start="37:98" pos:end="37:98">)</operator><index pos:start="37:99" pos:end="37:101">[<expr pos:start="37:100" pos:end="37:100"><literal type="number" pos:start="37:100" pos:end="37:100">2</literal></expr>]</index></expr></argument>, <argument pos:start="37:104" pos:end="37:122"><expr pos:start="37:104" pos:end="37:122"><operator pos:start="37:104" pos:end="37:104">(</operator><operator pos:start="37:105" pos:end="37:105">(</operator><name pos:start="37:106" pos:end="37:109">char</name> <operator pos:start="37:111" pos:end="37:111">*</operator><operator pos:start="37:112" pos:end="37:112">)</operator><operator pos:start="37:113" pos:end="37:113">&amp;</operator><name pos:start="37:114" pos:end="37:118">ctype</name><operator pos:start="37:119" pos:end="37:119">)</operator><index pos:start="37:120" pos:end="37:122">[<expr pos:start="37:121" pos:end="37:121"><literal type="number" pos:start="37:121" pos:end="37:121">3</literal></expr>]</index></expr></argument>, <argument pos:start="37:125" pos:end="37:136"><expr pos:start="37:125" pos:end="37:136"><operator pos:start="37:125" pos:end="37:125">(</operator><name pos:start="37:126" pos:end="37:129">long</name><operator pos:start="37:130" pos:end="37:130">)</operator> <name pos:start="37:132" pos:end="37:136">ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="44:0"><expr pos:start="39:5" pos:end="39:109"><call pos:start="39:5" pos:end="39:109"><name pos:start="39:5" pos:end="39:10">printf</name><argument_list pos:start="39:11" pos:end="39:109">(<argument pos:start="39:12" pos:end="39:30"><expr pos:start="39:12" pos:end="39:30"><literal type="string" pos:start="39:12" pos:end="39:30">"stype= %c%c%c%c\n"</literal></expr></argument>, <argument pos:start="39:33" pos:end="39:48"><expr pos:start="39:33" pos:end="39:48"><operator pos:start="39:33" pos:end="39:33">*</operator><operator pos:start="39:34" pos:end="39:34">(</operator><operator pos:start="39:35" pos:end="39:35">(</operator><name pos:start="39:36" pos:end="39:39">char</name> <operator pos:start="39:41" pos:end="39:41">*</operator><operator pos:start="39:42" pos:end="39:42">)</operator><operator pos:start="39:43" pos:end="39:43">&amp;</operator><name pos:start="39:44" pos:end="39:47">type</name><operator pos:start="39:48" pos:end="39:48">)</operator></expr></argument>, <argument pos:start="39:51" pos:end="39:68"><expr pos:start="39:51" pos:end="39:68"><operator pos:start="39:51" pos:end="39:51">(</operator><operator pos:start="39:52" pos:end="39:52">(</operator><name pos:start="39:53" pos:end="39:56">char</name> <operator pos:start="39:58" pos:end="39:58">*</operator><operator pos:start="39:59" pos:end="39:59">)</operator><operator pos:start="39:60" pos:end="39:60">&amp;</operator><name pos:start="39:61" pos:end="39:64">type</name><operator pos:start="39:65" pos:end="39:65">)</operator><index pos:start="39:66" pos:end="39:68">[<expr pos:start="39:67" pos:end="39:67"><literal type="number" pos:start="39:67" pos:end="39:67">1</literal></expr>]</index></expr></argument>, <argument pos:start="39:71" pos:end="39:88"><expr pos:start="39:71" pos:end="39:88"><operator pos:start="39:71" pos:end="39:71">(</operator><operator pos:start="39:72" pos:end="39:72">(</operator><name pos:start="39:73" pos:end="39:76">char</name> <operator pos:start="39:78" pos:end="39:78">*</operator><operator pos:start="39:79" pos:end="39:79">)</operator><operator pos:start="39:80" pos:end="39:80">&amp;</operator><name pos:start="39:81" pos:end="39:84">type</name><operator pos:start="39:85" pos:end="39:85">)</operator><index pos:start="39:86" pos:end="39:88">[<expr pos:start="39:87" pos:end="39:87"><literal type="number" pos:start="39:87" pos:end="39:87">2</literal></expr>]</index></expr></argument>, <argument pos:start="39:91" pos:end="39:108"><expr pos:start="39:91" pos:end="39:108"><operator pos:start="39:91" pos:end="39:91">(</operator><operator pos:start="39:92" pos:end="39:92">(</operator><name pos:start="39:93" pos:end="39:96">char</name> <operator pos:start="39:98" pos:end="39:98">*</operator><operator pos:start="39:99" pos:end="39:99">)</operator><operator pos:start="39:100" pos:end="39:100">&amp;</operator><name pos:start="39:101" pos:end="39:104">type</name><operator pos:start="39:105" pos:end="39:105">)</operator><index pos:start="39:106" pos:end="39:108">[<expr pos:start="39:107" pos:end="39:107"><literal type="number" pos:start="39:107" pos:end="39:107">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="43:1" pos:end="43:12">#<cpp:directive pos:start="43:2" pos:end="43:6">ifdef</cpp:directive> <name pos:start="43:8" pos:end="43:12">DEBUG</name></cpp:ifdef>

<comment type="block" pos:start="45:1" pos:end="45:31">/* XXX: yeah this is ugly... */</comment>

    <if_stmt pos:start="47:5" pos:end="78:0"><if pos:start="47:5" pos:end="57:5">if<condition pos:start="47:7" pos:end="47:42">(<expr pos:start="47:8" pos:end="47:41"><name pos:start="47:8" pos:end="47:12">ctype</name> <operator pos:start="47:14" pos:end="47:15">==</operator> <call pos:start="47:17" pos:end="47:41"><name pos:start="47:17" pos:end="47:21">MKTAG</name><argument_list pos:start="47:22" pos:end="47:41">(<argument pos:start="47:23" pos:end="47:25"><expr pos:start="47:23" pos:end="47:25"><literal type="char" pos:start="47:23" pos:end="47:25">'m'</literal></expr></argument>, <argument pos:start="47:28" pos:end="47:30"><expr pos:start="47:28" pos:end="47:30"><literal type="char" pos:start="47:28" pos:end="47:30">'h'</literal></expr></argument>, <argument pos:start="47:33" pos:end="47:35"><expr pos:start="47:33" pos:end="47:35"><literal type="char" pos:start="47:33" pos:end="47:35">'l'</literal></expr></argument>, <argument pos:start="47:38" pos:end="47:40"><expr pos:start="47:38" pos:end="47:40"><literal type="char" pos:start="47:38" pos:end="47:40">'r'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:44" pos:end="57:5">{<block_content pos:start="49:9" pos:end="55:31"> <comment type="block" pos:start="47:46" pos:end="47:54">/* MOV */</comment>

        <if_stmt pos:start="49:9" pos:end="55:31"><if pos:start="49:9" pos:end="51:31">if<condition pos:start="49:11" pos:end="49:45">(<expr pos:start="49:12" pos:end="49:44"><name pos:start="49:12" pos:end="49:15">type</name> <operator pos:start="49:17" pos:end="49:18">==</operator> <call pos:start="49:20" pos:end="49:44"><name pos:start="49:20" pos:end="49:24">MKTAG</name><argument_list pos:start="49:25" pos:end="49:44">(<argument pos:start="49:26" pos:end="49:28"><expr pos:start="49:26" pos:end="49:28"><literal type="char" pos:start="49:26" pos:end="49:28">'v'</literal></expr></argument>, <argument pos:start="49:31" pos:end="49:33"><expr pos:start="49:31" pos:end="49:33"><literal type="char" pos:start="49:31" pos:end="49:33">'i'</literal></expr></argument>, <argument pos:start="49:36" pos:end="49:38"><expr pos:start="49:36" pos:end="49:38"><literal type="char" pos:start="49:36" pos:end="49:38">'d'</literal></expr></argument>, <argument pos:start="49:41" pos:end="49:43"><expr pos:start="49:41" pos:end="49:43"><literal type="char" pos:start="49:41" pos:end="49:43">'e'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:31"><block_content pos:start="51:13" pos:end="51:31">

            <expr_stmt pos:start="51:13" pos:end="51:31"><expr pos:start="51:13" pos:end="51:30"><call pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:16">puts</name><argument_list pos:start="51:17" pos:end="51:30">(<argument pos:start="51:18" pos:end="51:29"><expr pos:start="51:18" pos:end="51:29"><literal type="string" pos:start="51:18" pos:end="51:29">"hdlr: vide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="53:9" pos:end="55:31">else if<condition pos:start="53:16" pos:end="53:50">(<expr pos:start="53:17" pos:end="53:49"><name pos:start="53:17" pos:end="53:20">type</name> <operator pos:start="53:22" pos:end="53:23">==</operator> <call pos:start="53:25" pos:end="53:49"><name pos:start="53:25" pos:end="53:29">MKTAG</name><argument_list pos:start="53:30" pos:end="53:49">(<argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><literal type="char" pos:start="53:31" pos:end="53:33">'s'</literal></expr></argument>, <argument pos:start="53:36" pos:end="53:38"><expr pos:start="53:36" pos:end="53:38"><literal type="char" pos:start="53:36" pos:end="53:38">'o'</literal></expr></argument>, <argument pos:start="53:41" pos:end="53:43"><expr pos:start="53:41" pos:end="53:43"><literal type="char" pos:start="53:41" pos:end="53:43">'u'</literal></expr></argument>, <argument pos:start="53:46" pos:end="53:48"><expr pos:start="53:46" pos:end="53:48"><literal type="char" pos:start="53:46" pos:end="53:48">'n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:31"><block_content pos:start="55:13" pos:end="55:31">

            <expr_stmt pos:start="55:13" pos:end="55:31"><expr pos:start="55:13" pos:end="55:30"><call pos:start="55:13" pos:end="55:30"><name pos:start="55:13" pos:end="55:16">puts</name><argument_list pos:start="55:17" pos:end="55:30">(<argument pos:start="55:18" pos:end="55:29"><expr pos:start="55:18" pos:end="55:29"><literal type="string" pos:start="55:18" pos:end="55:29">"hdlr: soun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="57:7" pos:end="75:5">else if<condition pos:start="57:14" pos:end="57:25">(<expr pos:start="57:15" pos:end="57:24"><name pos:start="57:15" pos:end="57:19">ctype</name> <operator pos:start="57:21" pos:end="57:22">==</operator> <literal type="number" pos:start="57:24" pos:end="57:24">0</literal></expr>)</condition> <block pos:start="57:27" pos:end="75:5">{<block_content pos:start="59:9" pos:end="73:31"> <comment type="block" pos:start="57:29" pos:end="57:37">/* MP4 */</comment>

        <if_stmt pos:start="59:9" pos:end="73:31"><if pos:start="59:9" pos:end="61:31">if<condition pos:start="59:11" pos:end="59:45">(<expr pos:start="59:12" pos:end="59:44"><name pos:start="59:12" pos:end="59:15">type</name> <operator pos:start="59:17" pos:end="59:18">==</operator> <call pos:start="59:20" pos:end="59:44"><name pos:start="59:20" pos:end="59:24">MKTAG</name><argument_list pos:start="59:25" pos:end="59:44">(<argument pos:start="59:26" pos:end="59:28"><expr pos:start="59:26" pos:end="59:28"><literal type="char" pos:start="59:26" pos:end="59:28">'v'</literal></expr></argument>, <argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><literal type="char" pos:start="59:31" pos:end="59:33">'i'</literal></expr></argument>, <argument pos:start="59:36" pos:end="59:38"><expr pos:start="59:36" pos:end="59:38"><literal type="char" pos:start="59:36" pos:end="59:38">'d'</literal></expr></argument>, <argument pos:start="59:41" pos:end="59:43"><expr pos:start="59:41" pos:end="59:43"><literal type="char" pos:start="59:41" pos:end="59:43">'e'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:31"><block_content pos:start="61:13" pos:end="61:31">

            <expr_stmt pos:start="61:13" pos:end="61:31"><expr pos:start="61:13" pos:end="61:30"><call pos:start="61:13" pos:end="61:30"><name pos:start="61:13" pos:end="61:16">puts</name><argument_list pos:start="61:17" pos:end="61:30">(<argument pos:start="61:18" pos:end="61:29"><expr pos:start="61:18" pos:end="61:29"><literal type="string" pos:start="61:18" pos:end="61:29">"hdlr: vide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="63:9" pos:end="65:31">else if<condition pos:start="63:16" pos:end="63:50">(<expr pos:start="63:17" pos:end="63:49"><name pos:start="63:17" pos:end="63:20">type</name> <operator pos:start="63:22" pos:end="63:23">==</operator> <call pos:start="63:25" pos:end="63:49"><name pos:start="63:25" pos:end="63:29">MKTAG</name><argument_list pos:start="63:30" pos:end="63:49">(<argument pos:start="63:31" pos:end="63:33"><expr pos:start="63:31" pos:end="63:33"><literal type="char" pos:start="63:31" pos:end="63:33">'s'</literal></expr></argument>, <argument pos:start="63:36" pos:end="63:38"><expr pos:start="63:36" pos:end="63:38"><literal type="char" pos:start="63:36" pos:end="63:38">'o'</literal></expr></argument>, <argument pos:start="63:41" pos:end="63:43"><expr pos:start="63:41" pos:end="63:43"><literal type="char" pos:start="63:41" pos:end="63:43">'u'</literal></expr></argument>, <argument pos:start="63:46" pos:end="63:48"><expr pos:start="63:46" pos:end="63:48"><literal type="char" pos:start="63:46" pos:end="63:48">'n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:31"><block_content pos:start="65:13" pos:end="65:31">

            <expr_stmt pos:start="65:13" pos:end="65:31"><expr pos:start="65:13" pos:end="65:30"><call pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:16">puts</name><argument_list pos:start="65:17" pos:end="65:30">(<argument pos:start="65:18" pos:end="65:29"><expr pos:start="65:18" pos:end="65:29"><literal type="string" pos:start="65:18" pos:end="65:29">"hdlr: soun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="67:9" pos:end="69:31">else if<condition pos:start="67:16" pos:end="67:50">(<expr pos:start="67:17" pos:end="67:49"><name pos:start="67:17" pos:end="67:20">type</name> <operator pos:start="67:22" pos:end="67:23">==</operator> <call pos:start="67:25" pos:end="67:49"><name pos:start="67:25" pos:end="67:29">MKTAG</name><argument_list pos:start="67:30" pos:end="67:49">(<argument pos:start="67:31" pos:end="67:33"><expr pos:start="67:31" pos:end="67:33"><literal type="char" pos:start="67:31" pos:end="67:33">'o'</literal></expr></argument>, <argument pos:start="67:36" pos:end="67:38"><expr pos:start="67:36" pos:end="67:38"><literal type="char" pos:start="67:36" pos:end="67:38">'d'</literal></expr></argument>, <argument pos:start="67:41" pos:end="67:43"><expr pos:start="67:41" pos:end="67:43"><literal type="char" pos:start="67:41" pos:end="67:43">'s'</literal></expr></argument>, <argument pos:start="67:46" pos:end="67:48"><expr pos:start="67:46" pos:end="67:48"><literal type="char" pos:start="67:46" pos:end="67:48">'m'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:31"><block_content pos:start="69:13" pos:end="69:31">

            <expr_stmt pos:start="69:13" pos:end="69:31"><expr pos:start="69:13" pos:end="69:30"><call pos:start="69:13" pos:end="69:30"><name pos:start="69:13" pos:end="69:16">puts</name><argument_list pos:start="69:17" pos:end="69:30">(<argument pos:start="69:18" pos:end="69:29"><expr pos:start="69:18" pos:end="69:29"><literal type="string" pos:start="69:18" pos:end="69:29">"hdlr: odsm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="71:9" pos:end="73:31">else if<condition pos:start="71:16" pos:end="71:50">(<expr pos:start="71:17" pos:end="71:49"><name pos:start="71:17" pos:end="71:20">type</name> <operator pos:start="71:22" pos:end="71:23">==</operator> <call pos:start="71:25" pos:end="71:49"><name pos:start="71:25" pos:end="71:29">MKTAG</name><argument_list pos:start="71:30" pos:end="71:49">(<argument pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><literal type="char" pos:start="71:31" pos:end="71:33">'s'</literal></expr></argument>, <argument pos:start="71:36" pos:end="71:38"><expr pos:start="71:36" pos:end="71:38"><literal type="char" pos:start="71:36" pos:end="71:38">'d'</literal></expr></argument>, <argument pos:start="71:41" pos:end="71:43"><expr pos:start="71:41" pos:end="71:43"><literal type="char" pos:start="71:41" pos:end="71:43">'s'</literal></expr></argument>, <argument pos:start="71:46" pos:end="71:48"><expr pos:start="71:46" pos:end="71:48"><literal type="char" pos:start="71:46" pos:end="71:48">'m'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:31"><block_content pos:start="73:13" pos:end="73:31">

            <expr_stmt pos:start="73:13" pos:end="73:31"><expr pos:start="73:13" pos:end="73:30"><call pos:start="73:13" pos:end="73:30"><name pos:start="73:13" pos:end="73:16">puts</name><argument_list pos:start="73:17" pos:end="73:30">(<argument pos:start="73:18" pos:end="73:29"><expr pos:start="73:18" pos:end="73:29"><literal type="string" pos:start="73:18" pos:end="73:29">"hdlr: sdsm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="78:0">else<block type="pseudo" pos:start="75:12" pos:end="78:0"><block_content pos:start="75:12" pos:end="78:0"> <expr_stmt pos:start="75:12" pos:end="78:0"><expr pos:start="75:12" pos:end="75:29"><call pos:start="75:12" pos:end="75:29"><name pos:start="75:12" pos:end="75:15">puts</name><argument_list pos:start="75:16" pos:end="75:29">(<argument pos:start="75:17" pos:end="75:28"><expr pos:start="75:17" pos:end="75:28"><literal type="string" pos:start="75:17" pos:end="75:28">"hdlr: meta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="81:5" pos:end="109:5"><if pos:start="81:5" pos:end="95:5">if<condition pos:start="81:7" pos:end="81:42">(<expr pos:start="81:8" pos:end="81:41"><name pos:start="81:8" pos:end="81:12">ctype</name> <operator pos:start="81:14" pos:end="81:15">==</operator> <call pos:start="81:17" pos:end="81:41"><name pos:start="81:17" pos:end="81:21">MKTAG</name><argument_list pos:start="81:22" pos:end="81:41">(<argument pos:start="81:23" pos:end="81:25"><expr pos:start="81:23" pos:end="81:25"><literal type="char" pos:start="81:23" pos:end="81:25">'m'</literal></expr></argument>, <argument pos:start="81:28" pos:end="81:30"><expr pos:start="81:28" pos:end="81:30"><literal type="char" pos:start="81:28" pos:end="81:30">'h'</literal></expr></argument>, <argument pos:start="81:33" pos:end="81:35"><expr pos:start="81:33" pos:end="81:35"><literal type="char" pos:start="81:33" pos:end="81:35">'l'</literal></expr></argument>, <argument pos:start="81:38" pos:end="81:40"><expr pos:start="81:38" pos:end="81:40"><literal type="char" pos:start="81:38" pos:end="81:40">'r'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:44" pos:end="95:5">{<block_content pos:start="85:9" pos:end="93:52"> <comment type="block" pos:start="81:46" pos:end="81:54">/* MOV */</comment>

        <comment type="block" pos:start="83:9" pos:end="83:51">/* helps parsing the string hereafter... */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:19"><expr pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:14"><name pos:start="85:9" pos:end="85:9">c</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:14">mp4</name></name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="93:52"><if pos:start="87:9" pos:end="89:52">if<condition pos:start="87:11" pos:end="87:45">(<expr pos:start="87:12" pos:end="87:44"><name pos:start="87:12" pos:end="87:15">type</name> <operator pos:start="87:17" pos:end="87:18">==</operator> <call pos:start="87:20" pos:end="87:44"><name pos:start="87:20" pos:end="87:24">MKTAG</name><argument_list pos:start="87:25" pos:end="87:44">(<argument pos:start="87:26" pos:end="87:28"><expr pos:start="87:26" pos:end="87:28"><literal type="char" pos:start="87:26" pos:end="87:28">'v'</literal></expr></argument>, <argument pos:start="87:31" pos:end="87:33"><expr pos:start="87:31" pos:end="87:33"><literal type="char" pos:start="87:31" pos:end="87:33">'i'</literal></expr></argument>, <argument pos:start="87:36" pos:end="87:38"><expr pos:start="87:36" pos:end="87:38"><literal type="char" pos:start="87:36" pos:end="87:38">'d'</literal></expr></argument>, <argument pos:start="87:41" pos:end="87:43"><expr pos:start="87:41" pos:end="87:43"><literal type="char" pos:start="87:41" pos:end="87:43">'e'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:52"><block_content pos:start="89:13" pos:end="89:52">

            <expr_stmt pos:start="89:13" pos:end="89:52"><expr pos:start="89:13" pos:end="89:51"><name pos:start="89:13" pos:end="89:32"><name pos:start="89:13" pos:end="89:14">st</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:21">codec</name><operator pos:start="89:22" pos:end="89:22">.</operator><name pos:start="89:23" pos:end="89:32">codec_type</name></name> <operator pos:start="89:34" pos:end="89:34">=</operator> <name pos:start="89:36" pos:end="89:51">CODEC_TYPE_VIDEO</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="91:9" pos:end="93:52">else if<condition pos:start="91:16" pos:end="91:50">(<expr pos:start="91:17" pos:end="91:49"><name pos:start="91:17" pos:end="91:20">type</name> <operator pos:start="91:22" pos:end="91:23">==</operator> <call pos:start="91:25" pos:end="91:49"><name pos:start="91:25" pos:end="91:29">MKTAG</name><argument_list pos:start="91:30" pos:end="91:49">(<argument pos:start="91:31" pos:end="91:33"><expr pos:start="91:31" pos:end="91:33"><literal type="char" pos:start="91:31" pos:end="91:33">'s'</literal></expr></argument>, <argument pos:start="91:36" pos:end="91:38"><expr pos:start="91:36" pos:end="91:38"><literal type="char" pos:start="91:36" pos:end="91:38">'o'</literal></expr></argument>, <argument pos:start="91:41" pos:end="91:43"><expr pos:start="91:41" pos:end="91:43"><literal type="char" pos:start="91:41" pos:end="91:43">'u'</literal></expr></argument>, <argument pos:start="91:46" pos:end="91:48"><expr pos:start="91:46" pos:end="91:48"><literal type="char" pos:start="91:46" pos:end="91:48">'n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:52"><block_content pos:start="93:13" pos:end="93:52">

            <expr_stmt pos:start="93:13" pos:end="93:52"><expr pos:start="93:13" pos:end="93:51"><name pos:start="93:13" pos:end="93:32"><name pos:start="93:13" pos:end="93:14">st</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:21">codec</name><operator pos:start="93:22" pos:end="93:22">.</operator><name pos:start="93:23" pos:end="93:32">codec_type</name></name> <operator pos:start="93:34" pos:end="93:34">=</operator> <name pos:start="93:36" pos:end="93:51">CODEC_TYPE_AUDIO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="95:7" pos:end="109:5">else if<condition pos:start="95:14" pos:end="95:25">(<expr pos:start="95:15" pos:end="95:24"><name pos:start="95:15" pos:end="95:19">ctype</name> <operator pos:start="95:21" pos:end="95:22">==</operator> <literal type="number" pos:start="95:24" pos:end="95:24">0</literal></expr>)</condition> <block pos:start="95:27" pos:end="109:5">{<block_content pos:start="99:9" pos:end="107:52"> <comment type="block" pos:start="95:29" pos:end="95:37">/* MP4 */</comment>

        <comment type="block" pos:start="97:9" pos:end="97:51">/* helps parsing the string hereafter... */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:19"><expr pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:14"><name pos:start="99:9" pos:end="99:9">c</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:14">mp4</name></name> <operator pos:start="99:16" pos:end="99:16">=</operator> <literal type="number" pos:start="99:18" pos:end="99:18">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="107:52"><if pos:start="101:9" pos:end="103:52">if<condition pos:start="101:11" pos:end="101:45">(<expr pos:start="101:12" pos:end="101:44"><name pos:start="101:12" pos:end="101:15">type</name> <operator pos:start="101:17" pos:end="101:18">==</operator> <call pos:start="101:20" pos:end="101:44"><name pos:start="101:20" pos:end="101:24">MKTAG</name><argument_list pos:start="101:25" pos:end="101:44">(<argument pos:start="101:26" pos:end="101:28"><expr pos:start="101:26" pos:end="101:28"><literal type="char" pos:start="101:26" pos:end="101:28">'v'</literal></expr></argument>, <argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><literal type="char" pos:start="101:31" pos:end="101:33">'i'</literal></expr></argument>, <argument pos:start="101:36" pos:end="101:38"><expr pos:start="101:36" pos:end="101:38"><literal type="char" pos:start="101:36" pos:end="101:38">'d'</literal></expr></argument>, <argument pos:start="101:41" pos:end="101:43"><expr pos:start="101:41" pos:end="101:43"><literal type="char" pos:start="101:41" pos:end="101:43">'e'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:52"><block_content pos:start="103:13" pos:end="103:52">

            <expr_stmt pos:start="103:13" pos:end="103:52"><expr pos:start="103:13" pos:end="103:51"><name pos:start="103:13" pos:end="103:32"><name pos:start="103:13" pos:end="103:14">st</name><operator pos:start="103:15" pos:end="103:16">-&gt;</operator><name pos:start="103:17" pos:end="103:21">codec</name><operator pos:start="103:22" pos:end="103:22">.</operator><name pos:start="103:23" pos:end="103:32">codec_type</name></name> <operator pos:start="103:34" pos:end="103:34">=</operator> <name pos:start="103:36" pos:end="103:51">CODEC_TYPE_VIDEO</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="105:9" pos:end="107:52">else if<condition pos:start="105:16" pos:end="105:50">(<expr pos:start="105:17" pos:end="105:49"><name pos:start="105:17" pos:end="105:20">type</name> <operator pos:start="105:22" pos:end="105:23">==</operator> <call pos:start="105:25" pos:end="105:49"><name pos:start="105:25" pos:end="105:29">MKTAG</name><argument_list pos:start="105:30" pos:end="105:49">(<argument pos:start="105:31" pos:end="105:33"><expr pos:start="105:31" pos:end="105:33"><literal type="char" pos:start="105:31" pos:end="105:33">'s'</literal></expr></argument>, <argument pos:start="105:36" pos:end="105:38"><expr pos:start="105:36" pos:end="105:38"><literal type="char" pos:start="105:36" pos:end="105:38">'o'</literal></expr></argument>, <argument pos:start="105:41" pos:end="105:43"><expr pos:start="105:41" pos:end="105:43"><literal type="char" pos:start="105:41" pos:end="105:43">'u'</literal></expr></argument>, <argument pos:start="105:46" pos:end="105:48"><expr pos:start="105:46" pos:end="105:48"><literal type="char" pos:start="105:46" pos:end="105:48">'n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:52"><block_content pos:start="107:13" pos:end="107:52">

            <expr_stmt pos:start="107:13" pos:end="107:52"><expr pos:start="107:13" pos:end="107:51"><name pos:start="107:13" pos:end="107:32"><name pos:start="107:13" pos:end="107:14">st</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:21">codec</name><operator pos:start="107:22" pos:end="107:22">.</operator><name pos:start="107:23" pos:end="107:32">codec_type</name></name> <operator pos:start="107:34" pos:end="107:34">=</operator> <name pos:start="107:36" pos:end="107:51">CODEC_TYPE_AUDIO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:17"><expr pos:start="111:5" pos:end="111:16"><call pos:start="111:5" pos:end="111:16"><name pos:start="111:5" pos:end="111:12">get_be32</name><argument_list pos:start="111:13" pos:end="111:16">(<argument pos:start="111:14" pos:end="111:15"><expr pos:start="111:14" pos:end="111:15"><name pos:start="111:14" pos:end="111:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="111:19" pos:end="111:46">/* component  manufacture */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:17"><expr pos:start="113:5" pos:end="113:16"><call pos:start="113:5" pos:end="113:16"><name pos:start="113:5" pos:end="113:12">get_be32</name><argument_list pos:start="113:13" pos:end="113:16">(<argument pos:start="113:14" pos:end="113:15"><expr pos:start="113:14" pos:end="113:15"><name pos:start="113:14" pos:end="113:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="113:19" pos:end="113:39">/* component flags */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:17"><expr pos:start="115:5" pos:end="115:16"><call pos:start="115:5" pos:end="115:16"><name pos:start="115:5" pos:end="115:12">get_be32</name><argument_list pos:start="115:13" pos:end="115:16">(<argument pos:start="115:14" pos:end="115:15"><expr pos:start="115:14" pos:end="115:15"><name pos:start="115:14" pos:end="115:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="115:19" pos:end="115:44">/* component flags mask */</comment>



    <if_stmt pos:start="119:5" pos:end="121:17"><if pos:start="119:5" pos:end="121:17">if<condition pos:start="119:7" pos:end="119:23">(<expr pos:start="119:8" pos:end="119:22"><name pos:start="119:8" pos:end="119:16"><name pos:start="119:8" pos:end="119:11">atom</name><operator pos:start="119:12" pos:end="119:12">.</operator><name pos:start="119:13" pos:end="119:16">size</name></name> <operator pos:start="119:18" pos:end="119:19">&lt;=</operator> <literal type="number" pos:start="119:21" pos:end="119:22">24</literal></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="121:17"><block_content pos:start="121:9" pos:end="121:17">

        <return pos:start="121:9" pos:end="121:17">return <expr pos:start="121:16" pos:end="121:16"><literal type="number" pos:start="121:16" pos:end="121:16">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="121:19" pos:end="121:44">/* nothing left to read */</comment>

    <comment type="block" pos:start="123:5" pos:end="123:52">/* XXX: MP4 uses a C string, not a pascal one */</comment>

    <comment type="block" pos:start="125:5" pos:end="125:24">/* component name */</comment>



    <if_stmt pos:start="129:5" pos:end="161:5"><if pos:start="129:5" pos:end="135:5">if<condition pos:start="129:7" pos:end="129:14">(<expr pos:start="129:8" pos:end="129:13"><name pos:start="129:8" pos:end="129:13"><name pos:start="129:8" pos:end="129:8">c</name><operator pos:start="129:9" pos:end="129:10">-&gt;</operator><name pos:start="129:11" pos:end="129:13">mp4</name></name></expr>)</condition> <block pos:start="129:16" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:58">

        <comment type="block" pos:start="131:9" pos:end="131:28">/* .mp4: C string */</comment>

        <while pos:start="133:9" pos:end="133:58">while<condition pos:start="133:14" pos:end="133:57">(<expr pos:start="133:15" pos:end="133:56"><call pos:start="133:15" pos:end="133:26"><name pos:start="133:15" pos:end="133:22">get_byte</name><argument_list pos:start="133:23" pos:end="133:26">(<argument pos:start="133:24" pos:end="133:25"><expr pos:start="133:24" pos:end="133:25"><name pos:start="133:24" pos:end="133:25">pb</name></expr></argument>)</argument_list></call> <operator pos:start="133:28" pos:end="133:29">&amp;&amp;</operator> <operator pos:start="133:31" pos:end="133:31">(</operator><operator pos:start="133:32" pos:end="133:33">++</operator><name pos:start="133:34" pos:end="133:36">len</name> <operator pos:start="133:38" pos:end="133:38">&lt;</operator> <operator pos:start="133:40" pos:end="133:40">(</operator><name pos:start="133:41" pos:end="133:49"><name pos:start="133:41" pos:end="133:44">atom</name><operator pos:start="133:45" pos:end="133:45">.</operator><name pos:start="133:46" pos:end="133:49">size</name></name> <operator pos:start="133:51" pos:end="133:51">-</operator> <literal type="number" pos:start="133:53" pos:end="133:54">24</literal><operator pos:start="133:55" pos:end="133:55">)</operator><operator pos:start="133:56" pos:end="133:56">)</operator></expr>)</condition><block type="pseudo" pos:start="133:58" pos:end="133:58"><block_content pos:start="133:58" pos:end="133:58"><empty_stmt pos:start="133:58" pos:end="133:58">;</empty_stmt></block_content></block></while>

    </block_content>}</block></if> <else pos:start="135:7" pos:end="161:5">else <block pos:start="135:12" pos:end="161:5">{<block_content pos:start="139:9" pos:end="159:31">

        <comment type="block" pos:start="137:9" pos:end="137:33">/* .mov: PASCAL string */</comment>

        <expr_stmt pos:start="139:9" pos:end="142:0"><expr pos:start="139:9" pos:end="139:26"><name pos:start="139:9" pos:end="139:11">len</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <call pos:start="139:15" pos:end="139:26"><name pos:start="139:15" pos:end="139:22">get_byte</name><argument_list pos:start="139:23" pos:end="139:26">(<argument pos:start="139:24" pos:end="139:25"><expr pos:start="139:24" pos:end="139:25"><name pos:start="139:24" pos:end="139:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="141:1" pos:end="141:12">#<cpp:directive pos:start="141:2" pos:end="141:6">ifdef</cpp:directive> <name pos:start="141:8" pos:end="141:12">DEBUG</name></cpp:ifdef>

	<expr_stmt pos:start="143:9" pos:end="143:42"><expr pos:start="143:9" pos:end="143:41"><name pos:start="143:9" pos:end="143:11">buf</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <operator pos:start="143:15" pos:end="143:15">(</operator><name pos:start="143:16" pos:end="143:22">uint8_t</name><operator pos:start="143:23" pos:end="143:23">*</operator><operator pos:start="143:24" pos:end="143:24">)</operator> <call pos:start="143:26" pos:end="143:41"><name pos:start="143:26" pos:end="143:34">av_malloc</name><argument_list pos:start="143:35" pos:end="143:41">(<argument pos:start="143:36" pos:end="143:40"><expr pos:start="143:36" pos:end="143:40"><name pos:start="143:36" pos:end="143:38">len</name><operator pos:start="143:39" pos:end="143:39">+</operator><literal type="number" pos:start="143:40" pos:end="143:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="145:9" pos:end="159:31"><if pos:start="145:9" pos:end="155:9">if <condition pos:start="145:12" pos:end="145:16">(<expr pos:start="145:13" pos:end="145:15"><name pos:start="145:13" pos:end="145:15">buf</name></expr>)</condition> <block pos:start="145:18" pos:end="155:9">{<block_content pos:start="147:13" pos:end="153:25">

	    <expr_stmt pos:start="147:13" pos:end="147:37"><expr pos:start="147:13" pos:end="147:36"><call pos:start="147:13" pos:end="147:36"><name pos:start="147:13" pos:end="147:22">get_buffer</name><argument_list pos:start="147:23" pos:end="147:36">(<argument pos:start="147:24" pos:end="147:25"><expr pos:start="147:24" pos:end="147:25"><name pos:start="147:24" pos:end="147:25">pb</name></expr></argument>, <argument pos:start="147:28" pos:end="147:30"><expr pos:start="147:28" pos:end="147:30"><name pos:start="147:28" pos:end="147:30">buf</name></expr></argument>, <argument pos:start="147:33" pos:end="147:35"><expr pos:start="147:33" pos:end="147:35"><name pos:start="147:33" pos:end="147:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="149:13" pos:end="149:28"><expr pos:start="149:13" pos:end="149:27"><name pos:start="149:13" pos:end="149:20"><name pos:start="149:13" pos:end="149:15">buf</name><index pos:start="149:16" pos:end="149:20">[<expr pos:start="149:17" pos:end="149:19"><name pos:start="149:17" pos:end="149:19">len</name></expr>]</index></name> <operator pos:start="149:22" pos:end="149:22">=</operator> <literal type="char" pos:start="149:24" pos:end="149:27">'\0'</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="151:13" pos:end="151:40"><expr pos:start="151:13" pos:end="151:39"><call pos:start="151:13" pos:end="151:39"><name pos:start="151:13" pos:end="151:18">printf</name><argument_list pos:start="151:19" pos:end="151:39">(<argument pos:start="151:20" pos:end="151:33"><expr pos:start="151:20" pos:end="151:33"><literal type="string" pos:start="151:20" pos:end="151:33">"**buf='%s'\n"</literal></expr></argument>, <argument pos:start="151:36" pos:end="151:38"><expr pos:start="151:36" pos:end="151:38"><name pos:start="151:36" pos:end="151:38">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="153:13" pos:end="153:25"><expr pos:start="153:13" pos:end="153:24"><call pos:start="153:13" pos:end="153:24"><name pos:start="153:13" pos:end="153:19">av_free</name><argument_list pos:start="153:20" pos:end="153:24">(<argument pos:start="153:21" pos:end="153:23"><expr pos:start="153:21" pos:end="153:23"><name pos:start="153:21" pos:end="153:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="155:11" pos:end="159:31">else<block type="pseudo" pos:start="159:13" pos:end="159:31"><block_content pos:start="159:13" pos:end="159:31">

<cpp:endif pos:start="157:1" pos:end="157:6">#<cpp:directive pos:start="157:2" pos:end="157:6">endif</cpp:directive></cpp:endif>

	    <expr_stmt pos:start="159:13" pos:end="159:31"><expr pos:start="159:13" pos:end="159:30"><call pos:start="159:13" pos:end="159:30"><name pos:start="159:13" pos:end="159:21">url_fskip</name><argument_list pos:start="159:22" pos:end="159:30">(<argument pos:start="159:23" pos:end="159:24"><expr pos:start="159:23" pos:end="159:24"><name pos:start="159:23" pos:end="159:24">pb</name></expr></argument>, <argument pos:start="159:27" pos:end="159:29"><expr pos:start="159:27" pos:end="159:29"><name pos:start="159:27" pos:end="159:29">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="165:5" pos:end="165:13">return <expr pos:start="165:12" pos:end="165:12"><literal type="number" pos:start="165:12" pos:end="165:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
