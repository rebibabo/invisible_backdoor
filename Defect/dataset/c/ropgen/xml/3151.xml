<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3151.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">do_qsv_decode</name><parameter_list pos:start="1:25" pos:end="5:34">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:58">QSVContext</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">q</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:32"><decl pos:start="3:19" pos:end="3:32"><type pos:start="3:19" pos:end="3:32"><name pos:start="3:19" pos:end="3:25">AVFrame</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:32">frame</name></decl></parameter>, <parameter pos:start="3:35" pos:end="3:48"><decl pos:start="3:35" pos:end="3:48"><type pos:start="3:35" pos:end="3:48"><name pos:start="3:35" pos:end="3:37">int</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:48">got_frame</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:33"><decl pos:start="5:19" pos:end="5:33"><type pos:start="5:19" pos:end="5:33"><name pos:start="5:19" pos:end="5:26">AVPacket</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:33">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="293:1">{<block_content pos:start="9:5" pos:end="291:23">

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">QSVFrame</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:23">out_frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">mfxFrameSurface1</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:28">insurf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">mfxFrameSurface1</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:29">outsurf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">mfxSyncPoint</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:22">sync</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">mfxBitstream</name></type> <name pos:start="17:18" pos:end="17:19">bs</name> <init pos:start="17:21" pos:end="17:35">= <expr pos:start="17:23" pos:end="17:35"><block pos:start="17:23" pos:end="17:35">{ <expr pos:start="17:25" pos:end="17:33"><block pos:start="17:25" pos:end="17:33">{ <expr pos:start="17:27" pos:end="17:31"><block pos:start="17:27" pos:end="17:31">{ <expr pos:start="17:29" pos:end="17:29"><literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr> }</block></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:20">n_out_frames</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:16">buffered</name> <init pos:start="23:18" pos:end="23:20">= <expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:53"><decl pos:start="25:5" pos:end="25:52"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">flush</name>    <init pos:start="25:18" pos:end="25:52">= <expr pos:start="25:20" pos:end="25:52"><operator pos:start="25:20" pos:end="25:20">!</operator><name pos:start="25:21" pos:end="25:31"><name pos:start="25:21" pos:end="25:25">avpkt</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:31">size</name></name> <operator pos:start="25:33" pos:end="25:34">||</operator> <name pos:start="25:36" pos:end="25:52"><name pos:start="25:36" pos:end="25:36">q</name><operator pos:start="25:37" pos:end="25:38">-&gt;</operator><name pos:start="25:39" pos:end="25:52">reinit_pending</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:25">(<expr pos:start="29:9" pos:end="29:24"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:24"><name pos:start="29:10" pos:end="29:10">q</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:24">engine_ready</name></name></expr>)</condition> <block pos:start="29:27" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:23">

        <expr_stmt pos:start="31:9" pos:end="31:47"><expr pos:start="31:9" pos:end="31:46"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:46"><name pos:start="31:15" pos:end="31:29">qsv_decode_init</name><argument_list pos:start="31:30" pos:end="31:46">(<argument pos:start="31:31" pos:end="31:35"><expr pos:start="31:31" pos:end="31:35"><name pos:start="31:31" pos:end="31:35">avctx</name></expr></argument>, <argument pos:start="31:38" pos:end="31:38"><expr pos:start="31:38" pos:end="31:38"><name pos:start="31:38" pos:end="31:38">q</name></expr></argument>, <argument pos:start="31:41" pos:end="31:45"><expr pos:start="31:41" pos:end="31:45"><name pos:start="31:41" pos:end="31:45">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="35:23"><if pos:start="33:9" pos:end="35:23">if <condition pos:start="33:12" pos:end="33:16">(<expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">ret</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:23"><block_content pos:start="35:13" pos:end="35:23">

            <return pos:start="35:13" pos:end="35:23">return <expr pos:start="35:20" pos:end="35:22"><name pos:start="35:20" pos:end="35:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="77:5"><if pos:start="41:5" pos:end="77:5">if <condition pos:start="41:8" pos:end="41:15">(<expr pos:start="41:9" pos:end="41:14"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:14">flush</name></expr>)</condition> <block pos:start="41:17" pos:end="77:5">{<block_content pos:start="43:9" pos:end="75:35">

        <if_stmt pos:start="43:9" pos:end="71:9"><if pos:start="43:9" pos:end="65:9">if <condition pos:start="43:12" pos:end="43:40">(<expr pos:start="43:13" pos:end="43:39"><call pos:start="43:13" pos:end="43:39"><name pos:start="43:13" pos:end="43:24">av_fifo_size</name><argument_list pos:start="43:25" pos:end="43:39">(<argument pos:start="43:26" pos:end="43:38"><expr pos:start="43:26" pos:end="43:38"><name pos:start="43:26" pos:end="43:38"><name pos:start="43:26" pos:end="43:26">q</name><operator pos:start="43:27" pos:end="43:28">-&gt;</operator><name pos:start="43:29" pos:end="43:38">input_fifo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:42" pos:end="65:9">{<block_content pos:start="47:13" pos:end="63:25">

            <comment type="block" pos:start="45:13" pos:end="45:65">/* we have got rest of previous packet into buffer */</comment>

            <if_stmt pos:start="47:13" pos:end="55:13"><if pos:start="47:13" pos:end="55:13">if <condition pos:start="47:16" pos:end="47:59">(<expr pos:start="47:17" pos:end="47:58"><call pos:start="47:17" pos:end="47:44"><name pos:start="47:17" pos:end="47:29">av_fifo_space</name><argument_list pos:start="47:30" pos:end="47:44">(<argument pos:start="47:31" pos:end="47:43"><expr pos:start="47:31" pos:end="47:43"><name pos:start="47:31" pos:end="47:43"><name pos:start="47:31" pos:end="47:31">q</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:43">input_fifo</name></name></expr></argument>)</argument_list></call> <operator pos:start="47:46" pos:end="47:46">&lt;</operator> <name pos:start="47:48" pos:end="47:58"><name pos:start="47:48" pos:end="47:52">avpkt</name><operator pos:start="47:53" pos:end="47:54">-&gt;</operator><name pos:start="47:55" pos:end="47:58">size</name></name></expr>)</condition> <block pos:start="47:61" pos:end="55:13">{<block_content pos:start="49:17" pos:end="53:31">

                <expr_stmt pos:start="49:17" pos:end="49:63"><expr pos:start="49:17" pos:end="49:62"><name pos:start="49:17" pos:end="49:19">ret</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <call pos:start="49:23" pos:end="49:62"><name pos:start="49:23" pos:end="49:34">av_fifo_grow</name><argument_list pos:start="49:35" pos:end="49:62">(<argument pos:start="49:36" pos:end="49:48"><expr pos:start="49:36" pos:end="49:48"><name pos:start="49:36" pos:end="49:48"><name pos:start="49:36" pos:end="49:36">q</name><operator pos:start="49:37" pos:end="49:38">-&gt;</operator><name pos:start="49:39" pos:end="49:48">input_fifo</name></name></expr></argument>, <argument pos:start="49:51" pos:end="49:61"><expr pos:start="49:51" pos:end="49:61"><name pos:start="49:51" pos:end="49:61"><name pos:start="49:51" pos:end="49:55">avpkt</name><operator pos:start="49:56" pos:end="49:57">-&gt;</operator><name pos:start="49:58" pos:end="49:61">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="51:17" pos:end="53:31"><if pos:start="51:17" pos:end="53:31">if <condition pos:start="51:20" pos:end="51:28">(<expr pos:start="51:21" pos:end="51:27"><name pos:start="51:21" pos:end="51:23">ret</name> <operator pos:start="51:25" pos:end="51:25">&lt;</operator> <literal type="number" pos:start="51:27" pos:end="51:27">0</literal></expr>)</condition><block type="pseudo" pos:start="53:21" pos:end="53:31"><block_content pos:start="53:21" pos:end="53:31">

                    <return pos:start="53:21" pos:end="53:31">return <expr pos:start="53:28" pos:end="53:30"><name pos:start="53:28" pos:end="53:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:81"><expr pos:start="57:13" pos:end="57:80"><call pos:start="57:13" pos:end="57:80"><name pos:start="57:13" pos:end="57:33">av_fifo_generic_write</name><argument_list pos:start="57:34" pos:end="57:80">(<argument pos:start="57:35" pos:end="57:47"><expr pos:start="57:35" pos:end="57:47"><name pos:start="57:35" pos:end="57:47"><name pos:start="57:35" pos:end="57:35">q</name><operator pos:start="57:36" pos:end="57:37">-&gt;</operator><name pos:start="57:38" pos:end="57:47">input_fifo</name></name></expr></argument>, <argument pos:start="57:50" pos:end="57:60"><expr pos:start="57:50" pos:end="57:60"><name pos:start="57:50" pos:end="57:60"><name pos:start="57:50" pos:end="57:54">avpkt</name><operator pos:start="57:55" pos:end="57:56">-&gt;</operator><name pos:start="57:57" pos:end="57:60">data</name></name></expr></argument>, <argument pos:start="57:63" pos:end="57:73"><expr pos:start="57:63" pos:end="57:73"><name pos:start="57:63" pos:end="57:73"><name pos:start="57:63" pos:end="57:67">avpkt</name><operator pos:start="57:68" pos:end="57:69">-&gt;</operator><name pos:start="57:70" pos:end="57:73">size</name></name></expr></argument>, <argument pos:start="57:76" pos:end="57:79"><expr pos:start="57:76" pos:end="57:79"><name pos:start="57:76" pos:end="57:79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:48"><expr pos:start="59:13" pos:end="59:47"><name pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:14">bs</name><operator pos:start="59:15" pos:end="59:15">.</operator><name pos:start="59:16" pos:end="59:19">Data</name></name>       <operator pos:start="59:27" pos:end="59:27">=</operator> <name pos:start="59:29" pos:end="59:47"><name pos:start="59:29" pos:end="59:29">q</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:41">input_fifo</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:47">rptr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:56"><expr pos:start="61:13" pos:end="61:55"><name pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:14">bs</name><operator pos:start="61:15" pos:end="61:15">.</operator><name pos:start="61:16" pos:end="61:25">DataLength</name></name> <operator pos:start="61:27" pos:end="61:27">=</operator> <call pos:start="61:29" pos:end="61:55"><name pos:start="61:29" pos:end="61:40">av_fifo_size</name><argument_list pos:start="61:41" pos:end="61:55">(<argument pos:start="61:42" pos:end="61:54"><expr pos:start="61:42" pos:end="61:54"><name pos:start="61:42" pos:end="61:54"><name pos:start="61:42" pos:end="61:42">q</name><operator pos:start="61:43" pos:end="61:44">-&gt;</operator><name pos:start="61:45" pos:end="61:54">input_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:25"><expr pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:20">buffered</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <literal type="number" pos:start="63:24" pos:end="63:24">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="71:9">else <block pos:start="65:16" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:40">

            <expr_stmt pos:start="67:13" pos:end="67:40"><expr pos:start="67:13" pos:end="67:39"><name pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:14">bs</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:19">Data</name></name>       <operator pos:start="67:27" pos:end="67:27">=</operator> <name pos:start="67:29" pos:end="67:39"><name pos:start="67:29" pos:end="67:33">avpkt</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:39">data</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:40"><expr pos:start="69:13" pos:end="69:39"><name pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:14">bs</name><operator pos:start="69:15" pos:end="69:15">.</operator><name pos:start="69:16" pos:end="69:25">DataLength</name></name> <operator pos:start="69:27" pos:end="69:27">=</operator> <name pos:start="69:29" pos:end="69:39"><name pos:start="69:29" pos:end="69:33">avpkt</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:39">size</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:38"><expr pos:start="73:9" pos:end="73:37"><name pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:10">bs</name><operator pos:start="73:11" pos:end="73:11">.</operator><name pos:start="73:12" pos:end="73:20">MaxLength</name></name>  <operator pos:start="73:23" pos:end="73:23">=</operator> <name pos:start="73:25" pos:end="73:37"><name pos:start="73:25" pos:end="73:26">bs</name><operator pos:start="73:27" pos:end="73:27">.</operator><name pos:start="73:28" pos:end="73:37">DataLength</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:35"><expr pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:10">bs</name><operator pos:start="75:11" pos:end="75:11">.</operator><name pos:start="75:12" pos:end="75:20">TimeStamp</name></name>  <operator pos:start="75:23" pos:end="75:23">=</operator> <name pos:start="75:25" pos:end="75:34"><name pos:start="75:25" pos:end="75:29">avpkt</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:34">pts</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:37"><expr pos:start="81:5" pos:end="81:36"><name pos:start="81:5" pos:end="81:8">sync</name> <operator pos:start="81:10" pos:end="81:10">=</operator> <call pos:start="81:12" pos:end="81:36"><name pos:start="81:12" pos:end="81:21">av_mallocz</name><argument_list pos:start="81:22" pos:end="81:36">(<argument pos:start="81:23" pos:end="81:35"><expr pos:start="81:23" pos:end="81:35"><sizeof pos:start="81:23" pos:end="81:35">sizeof<argument_list pos:start="81:29" pos:end="81:35">(<argument pos:start="81:30" pos:end="81:34"><expr pos:start="81:30" pos:end="81:34"><operator pos:start="81:30" pos:end="81:30">*</operator><name pos:start="81:31" pos:end="81:34">sync</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:14">(<expr pos:start="83:9" pos:end="83:13"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:13">sync</name></expr>)</condition> <block pos:start="83:16" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:31">

        <expr_stmt pos:start="85:9" pos:end="85:24"><expr pos:start="85:9" pos:end="85:23"><call pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:16">av_freep</name><argument_list pos:start="85:17" pos:end="85:23">(<argument pos:start="85:18" pos:end="85:22"><expr pos:start="85:18" pos:end="85:22"><operator pos:start="85:18" pos:end="85:18">&amp;</operator><name pos:start="85:19" pos:end="85:22">sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:31">return <expr pos:start="87:16" pos:end="87:30"><call pos:start="87:16" pos:end="87:30"><name pos:start="87:16" pos:end="87:22">AVERROR</name><argument_list pos:start="87:23" pos:end="87:30">(<argument pos:start="87:24" pos:end="87:29"><expr pos:start="87:24" pos:end="87:29"><name pos:start="87:24" pos:end="87:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="93:5" pos:end="173:5">while <condition pos:start="93:11" pos:end="93:13">(<expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">1</literal></expr>)</condition> <block pos:start="93:15" pos:end="173:5">{<block_content pos:start="95:9" pos:end="171:18">

        <expr_stmt pos:start="95:9" pos:end="95:45"><expr pos:start="95:9" pos:end="95:44"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="95:44"><name pos:start="95:15" pos:end="95:25">get_surface</name><argument_list pos:start="95:26" pos:end="95:44">(<argument pos:start="95:27" pos:end="95:31"><expr pos:start="95:27" pos:end="95:31"><name pos:start="95:27" pos:end="95:31">avctx</name></expr></argument>, <argument pos:start="95:34" pos:end="95:34"><expr pos:start="95:34" pos:end="95:34"><name pos:start="95:34" pos:end="95:34">q</name></expr></argument>, <argument pos:start="95:37" pos:end="95:43"><expr pos:start="95:37" pos:end="95:43"><operator pos:start="95:37" pos:end="95:37">&amp;</operator><name pos:start="95:38" pos:end="95:43">insurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="99:23"><if pos:start="97:9" pos:end="99:23">if <condition pos:start="97:12" pos:end="97:20">(<expr pos:start="97:13" pos:end="97:19"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:17">&lt;</operator> <literal type="number" pos:start="97:19" pos:end="97:19">0</literal></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:23"><block_content pos:start="99:13" pos:end="99:23">

            <return pos:start="99:13" pos:end="99:23">return <expr pos:start="99:20" pos:end="99:22"><name pos:start="99:20" pos:end="99:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <do pos:start="101:9" pos:end="113:20">do <block pos:start="101:12" pos:end="113:9">{<block_content pos:start="103:13" pos:end="111:27">

            <expr_stmt pos:start="103:13" pos:end="105:74"><expr pos:start="103:13" pos:end="105:73"><name pos:start="103:13" pos:end="103:15">ret</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="105:73"><name pos:start="103:19" pos:end="103:49">MFXVideoDECODE_DecodeFrameAsync</name><argument_list pos:start="103:50" pos:end="105:73">(<argument pos:start="103:51" pos:end="103:60"><expr pos:start="103:51" pos:end="103:60"><name pos:start="103:51" pos:end="103:60"><name pos:start="103:51" pos:end="103:51">q</name><operator pos:start="103:52" pos:end="103:53">-&gt;</operator><name pos:start="103:54" pos:end="103:60">session</name></name></expr></argument>, <argument pos:start="103:63" pos:end="103:80"><expr pos:start="103:63" pos:end="103:80"><ternary pos:start="103:63" pos:end="103:80"><condition pos:start="103:63" pos:end="103:69"><expr pos:start="103:63" pos:end="103:67"><name pos:start="103:63" pos:end="103:67">flush</name></expr> ?</condition><then pos:start="103:71" pos:end="103:74"> <expr pos:start="103:71" pos:end="103:74"><name pos:start="103:71" pos:end="103:74">NULL</name></expr> </then><else pos:start="103:76" pos:end="103:80">: <expr pos:start="103:78" pos:end="103:80"><operator pos:start="103:78" pos:end="103:78">&amp;</operator><name pos:start="103:79" pos:end="103:80">bs</name></expr></else></ternary></expr></argument>,

                                                  <argument pos:start="105:51" pos:end="105:56"><expr pos:start="105:51" pos:end="105:56"><name pos:start="105:51" pos:end="105:56">insurf</name></expr></argument>, <argument pos:start="105:59" pos:end="105:66"><expr pos:start="105:59" pos:end="105:66"><operator pos:start="105:59" pos:end="105:59">&amp;</operator><name pos:start="105:60" pos:end="105:66">outsurf</name></expr></argument>, <argument pos:start="105:69" pos:end="105:72"><expr pos:start="105:69" pos:end="105:72"><name pos:start="105:69" pos:end="105:72">sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="109:22"><if pos:start="107:13" pos:end="109:22">if <condition pos:start="107:16" pos:end="107:43">(<expr pos:start="107:17" pos:end="107:42"><name pos:start="107:17" pos:end="107:19">ret</name> <operator pos:start="107:21" pos:end="107:22">!=</operator> <name pos:start="107:24" pos:end="107:42">MFX_WRN_DEVICE_BUSY</name></expr>)</condition><block type="pseudo" pos:start="109:17" pos:end="109:22"><block_content pos:start="109:17" pos:end="109:22">

                <break pos:start="109:17" pos:end="109:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:27"><expr pos:start="111:13" pos:end="111:26"><call pos:start="111:13" pos:end="111:26"><name pos:start="111:13" pos:end="111:21">av_usleep</name><argument_list pos:start="111:22" pos:end="111:26">(<argument pos:start="111:23" pos:end="111:25"><expr pos:start="111:23" pos:end="111:25"><literal type="number" pos:start="111:23" pos:end="111:25">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="113:17" pos:end="113:19">(<expr pos:start="113:18" pos:end="113:18"><literal type="number" pos:start="113:18" pos:end="113:18">1</literal></expr>)</condition>;</do>



        <if_stmt pos:start="117:9" pos:end="129:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:45">(<expr pos:start="117:13" pos:end="117:44"><name pos:start="117:13" pos:end="117:39">MFX_WRN_VIDEO_PARAM_CHANGED</name><operator pos:start="117:40" pos:end="117:41">==</operator><name pos:start="117:42" pos:end="117:44">ret</name></expr>)</condition> <block pos:start="117:47" pos:end="121:9">{<block_content>

            <comment type="block" pos:start="119:13" pos:end="119:66">/* TODO: handle here minor sequence header changing */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="121:11" pos:end="129:9">else if <condition pos:start="121:19" pos:end="121:57">(<expr pos:start="121:20" pos:end="121:56"><name pos:start="121:20" pos:end="121:51">MFX_ERR_INCOMPATIBLE_VIDEO_PARAM</name><operator pos:start="121:52" pos:end="121:53">==</operator><name pos:start="121:54" pos:end="121:56">ret</name></expr>)</condition> <block pos:start="121:59" pos:end="129:9">{<block_content pos:start="123:13" pos:end="127:21">

            <expr_stmt pos:start="123:13" pos:end="123:41"><expr pos:start="123:13" pos:end="123:40"><call pos:start="123:13" pos:end="123:40"><name pos:start="123:13" pos:end="123:25">av_fifo_reset</name><argument_list pos:start="123:26" pos:end="123:40">(<argument pos:start="123:27" pos:end="123:39"><expr pos:start="123:27" pos:end="123:39"><name pos:start="123:27" pos:end="123:39"><name pos:start="123:27" pos:end="123:27">q</name><operator pos:start="123:28" pos:end="123:29">-&gt;</operator><name pos:start="123:30" pos:end="123:39">input_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:42"><expr pos:start="125:13" pos:end="125:41"><name pos:start="125:13" pos:end="125:17">flush</name> <operator pos:start="125:19" pos:end="125:19">=</operator> <name pos:start="125:21" pos:end="125:37"><name pos:start="125:21" pos:end="125:21">q</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:37">reinit_pending</name></name> <operator pos:start="125:39" pos:end="125:39">=</operator> <literal type="number" pos:start="125:41" pos:end="125:41">1</literal></expr>;</expr_stmt>

            <continue pos:start="127:13" pos:end="127:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="133:9" pos:end="167:9"><if pos:start="133:9" pos:end="163:9">if <condition pos:start="133:12" pos:end="133:18">(<expr pos:start="133:13" pos:end="133:17"><operator pos:start="133:13" pos:end="133:13">*</operator><name pos:start="133:14" pos:end="133:17">sync</name></expr>)</condition> <block pos:start="133:20" pos:end="163:9">{<block_content pos:start="135:13" pos:end="161:21">

            <decl_stmt pos:start="135:13" pos:end="135:57"><decl pos:start="135:13" pos:end="135:56"><type pos:start="135:13" pos:end="135:22"><name pos:start="135:13" pos:end="135:20">QSVFrame</name> <modifier pos:start="135:22" pos:end="135:22">*</modifier></type><name pos:start="135:23" pos:end="135:31">out_frame</name> <init pos:start="135:33" pos:end="135:56">= <expr pos:start="135:35" pos:end="135:56"><call pos:start="135:35" pos:end="135:56"><name pos:start="135:35" pos:end="135:44">find_frame</name><argument_list pos:start="135:45" pos:end="135:56">(<argument pos:start="135:46" pos:end="135:46"><expr pos:start="135:46" pos:end="135:46"><name pos:start="135:46" pos:end="135:46">q</name></expr></argument>, <argument pos:start="135:49" pos:end="135:55"><expr pos:start="135:49" pos:end="135:55"><name pos:start="135:49" pos:end="135:55">outsurf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="139:13" pos:end="149:13"><if pos:start="139:13" pos:end="149:13">if <condition pos:start="139:16" pos:end="139:27">(<expr pos:start="139:17" pos:end="139:26"><operator pos:start="139:17" pos:end="139:17">!</operator><name pos:start="139:18" pos:end="139:26">out_frame</name></expr>)</condition> <block pos:start="139:29" pos:end="149:13">{<block_content pos:start="141:17" pos:end="147:35">

                <expr_stmt pos:start="141:17" pos:end="141:32"><expr pos:start="141:17" pos:end="141:31"><call pos:start="141:17" pos:end="141:31"><name pos:start="141:17" pos:end="141:24">av_freep</name><argument_list pos:start="141:25" pos:end="141:31">(<argument pos:start="141:26" pos:end="141:30"><expr pos:start="141:26" pos:end="141:30"><operator pos:start="141:26" pos:end="141:26">&amp;</operator><name pos:start="141:27" pos:end="141:30">sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="145:82"><expr pos:start="143:17" pos:end="145:81"><call pos:start="143:17" pos:end="145:81"><name pos:start="143:17" pos:end="143:22">av_log</name><argument_list pos:start="143:23" pos:end="145:81">(<argument pos:start="143:24" pos:end="143:28"><expr pos:start="143:24" pos:end="143:28"><name pos:start="143:24" pos:end="143:28">avctx</name></expr></argument>, <argument pos:start="143:31" pos:end="143:42"><expr pos:start="143:31" pos:end="143:42"><name pos:start="143:31" pos:end="143:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="145:24" pos:end="145:80"><expr pos:start="145:24" pos:end="145:80"><literal type="string" pos:start="145:24" pos:end="145:80">"The returned surface does not correspond to any frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="147:17" pos:end="147:35">return <expr pos:start="147:24" pos:end="147:34"><name pos:start="147:24" pos:end="147:34">AVERROR_BUG</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="153:13" pos:end="153:34"><expr pos:start="153:13" pos:end="153:33"><name pos:start="153:13" pos:end="153:29"><name pos:start="153:13" pos:end="153:21">out_frame</name><operator pos:start="153:22" pos:end="153:23">-&gt;</operator><name pos:start="153:24" pos:end="153:29">queued</name></name> <operator pos:start="153:31" pos:end="153:31">=</operator> <literal type="number" pos:start="153:33" pos:end="153:33">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:86"><expr pos:start="155:13" pos:end="155:85"><call pos:start="155:13" pos:end="155:85"><name pos:start="155:13" pos:end="155:33">av_fifo_generic_write</name><argument_list pos:start="155:34" pos:end="155:85">(<argument pos:start="155:35" pos:end="155:47"><expr pos:start="155:35" pos:end="155:47"><name pos:start="155:35" pos:end="155:47"><name pos:start="155:35" pos:end="155:35">q</name><operator pos:start="155:36" pos:end="155:37">-&gt;</operator><name pos:start="155:38" pos:end="155:47">async_fifo</name></name></expr></argument>, <argument pos:start="155:50" pos:end="155:59"><expr pos:start="155:50" pos:end="155:59"><operator pos:start="155:50" pos:end="155:50">&amp;</operator><name pos:start="155:51" pos:end="155:59">out_frame</name></expr></argument>, <argument pos:start="155:62" pos:end="155:78"><expr pos:start="155:62" pos:end="155:78"><sizeof pos:start="155:62" pos:end="155:78">sizeof<argument_list pos:start="155:68" pos:end="155:78">(<argument pos:start="155:69" pos:end="155:77"><expr pos:start="155:69" pos:end="155:77"><name pos:start="155:69" pos:end="155:77">out_frame</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="155:81" pos:end="155:84"><expr pos:start="155:81" pos:end="155:84"><name pos:start="155:81" pos:end="155:84">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:86"><expr pos:start="157:13" pos:end="157:85"><call pos:start="157:13" pos:end="157:85"><name pos:start="157:13" pos:end="157:33">av_fifo_generic_write</name><argument_list pos:start="157:34" pos:end="157:85">(<argument pos:start="157:35" pos:end="157:47"><expr pos:start="157:35" pos:end="157:47"><name pos:start="157:35" pos:end="157:47"><name pos:start="157:35" pos:end="157:35">q</name><operator pos:start="157:36" pos:end="157:37">-&gt;</operator><name pos:start="157:38" pos:end="157:47">async_fifo</name></name></expr></argument>, <argument pos:start="157:50" pos:end="157:54"><expr pos:start="157:50" pos:end="157:54"><operator pos:start="157:50" pos:end="157:50">&amp;</operator><name pos:start="157:51" pos:end="157:54">sync</name></expr></argument>,      <argument pos:start="157:62" pos:end="157:73"><expr pos:start="157:62" pos:end="157:73"><sizeof pos:start="157:62" pos:end="157:73">sizeof<argument_list pos:start="157:68" pos:end="157:73">(<argument pos:start="157:69" pos:end="157:72"><expr pos:start="157:69" pos:end="157:72"><name pos:start="157:69" pos:end="157:72">sync</name></expr></argument>)</argument_list></sizeof></expr></argument>,      <argument pos:start="157:81" pos:end="157:84"><expr pos:start="157:81" pos:end="157:84"><name pos:start="157:81" pos:end="157:84">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <continue pos:start="161:13" pos:end="161:21">continue;</continue>

        </block_content>}</block></if> <else pos:start="163:11" pos:end="167:9">else <block pos:start="163:16" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:28">

            <expr_stmt pos:start="165:13" pos:end="165:28"><expr pos:start="165:13" pos:end="165:27"><call pos:start="165:13" pos:end="165:27"><name pos:start="165:13" pos:end="165:20">av_freep</name><argument_list pos:start="165:21" pos:end="165:27">(<argument pos:start="165:22" pos:end="165:26"><expr pos:start="165:22" pos:end="165:26"><operator pos:start="165:22" pos:end="165:22">&amp;</operator><name pos:start="165:23" pos:end="165:26">sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="169:9" pos:end="171:18"><if pos:start="169:9" pos:end="171:18">if <condition pos:start="169:12" pos:end="169:51">(<expr pos:start="169:13" pos:end="169:50"><name pos:start="169:13" pos:end="169:32">MFX_ERR_MORE_SURFACE</name> <operator pos:start="169:34" pos:end="169:35">!=</operator> <name pos:start="169:37" pos:end="169:39">ret</name> <operator pos:start="169:41" pos:end="169:42">&amp;&amp;</operator> <name pos:start="169:44" pos:end="169:46">ret</name> <operator pos:start="169:48" pos:end="169:48">&lt;</operator> <literal type="number" pos:start="169:50" pos:end="169:50">0</literal></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:18"><block_content pos:start="171:13" pos:end="171:18">

            <break pos:start="171:13" pos:end="171:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="177:5" pos:end="179:62">/* make sure we do not enter an infinite loop if the SDK

     * did not consume any data and did not return anything */</comment>

    <if_stmt pos:start="181:5" pos:end="187:5"><if pos:start="181:5" pos:end="187:5">if <condition pos:start="181:8" pos:end="181:43">(<expr pos:start="181:9" pos:end="181:42"><operator pos:start="181:9" pos:end="181:9">!</operator><operator pos:start="181:10" pos:end="181:10">*</operator><name pos:start="181:11" pos:end="181:14">sync</name> <operator pos:start="181:16" pos:end="181:17">&amp;&amp;</operator> <operator pos:start="181:19" pos:end="181:19">!</operator><name pos:start="181:20" pos:end="181:32"><name pos:start="181:20" pos:end="181:21">bs</name><operator pos:start="181:22" pos:end="181:22">.</operator><name pos:start="181:23" pos:end="181:32">DataOffset</name></name> <operator pos:start="181:34" pos:end="181:35">&amp;&amp;</operator> <operator pos:start="181:37" pos:end="181:37">!</operator><name pos:start="181:38" pos:end="181:42">flush</name></expr>)</condition> <block pos:start="181:45" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:36">

        <expr_stmt pos:start="183:9" pos:end="183:82"><expr pos:start="183:9" pos:end="183:81"><call pos:start="183:9" pos:end="183:81"><name pos:start="183:9" pos:end="183:14">av_log</name><argument_list pos:start="183:15" pos:end="183:81">(<argument pos:start="183:16" pos:end="183:20"><expr pos:start="183:16" pos:end="183:20"><name pos:start="183:16" pos:end="183:20">avctx</name></expr></argument>, <argument pos:start="183:23" pos:end="183:36"><expr pos:start="183:23" pos:end="183:36"><name pos:start="183:23" pos:end="183:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="183:39" pos:end="183:80"><expr pos:start="183:39" pos:end="183:80"><literal type="string" pos:start="183:39" pos:end="183:80">"A decode call did not consume any data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:36"><expr pos:start="185:9" pos:end="185:35"><name pos:start="185:9" pos:end="185:21"><name pos:start="185:9" pos:end="185:10">bs</name><operator pos:start="185:11" pos:end="185:11">.</operator><name pos:start="185:12" pos:end="185:21">DataOffset</name></name> <operator pos:start="185:23" pos:end="185:23">=</operator> <name pos:start="185:25" pos:end="185:35"><name pos:start="185:25" pos:end="185:29">avpkt</name><operator pos:start="185:30" pos:end="185:31">-&gt;</operator><name pos:start="185:32" pos:end="185:35">size</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="191:5" pos:end="203:5"><if pos:start="191:5" pos:end="195:5">if <condition pos:start="191:8" pos:end="191:17">(<expr pos:start="191:9" pos:end="191:16"><name pos:start="191:9" pos:end="191:16">buffered</name></expr>)</condition> <block pos:start="191:19" pos:end="195:5">{<block_content pos:start="193:9" pos:end="193:56">

        <expr_stmt pos:start="193:9" pos:end="193:56"><expr pos:start="193:9" pos:end="193:55"><call pos:start="193:9" pos:end="193:55"><name pos:start="193:9" pos:end="193:25">qsv_fifo_relocate</name><argument_list pos:start="193:26" pos:end="193:55">(<argument pos:start="193:27" pos:end="193:39"><expr pos:start="193:27" pos:end="193:39"><name pos:start="193:27" pos:end="193:39"><name pos:start="193:27" pos:end="193:27">q</name><operator pos:start="193:28" pos:end="193:29">-&gt;</operator><name pos:start="193:30" pos:end="193:39">input_fifo</name></name></expr></argument>, <argument pos:start="193:42" pos:end="193:54"><expr pos:start="193:42" pos:end="193:54"><name pos:start="193:42" pos:end="193:54"><name pos:start="193:42" pos:end="193:43">bs</name><operator pos:start="193:44" pos:end="193:44">.</operator><name pos:start="193:45" pos:end="193:54">DataOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="195:7" pos:end="203:5">else if <condition pos:start="195:15" pos:end="195:42">(<expr pos:start="195:16" pos:end="195:41"><name pos:start="195:16" pos:end="195:28"><name pos:start="195:16" pos:end="195:17">bs</name><operator pos:start="195:18" pos:end="195:18">.</operator><name pos:start="195:19" pos:end="195:28">DataOffset</name></name><operator pos:start="195:29" pos:end="195:30">!=</operator><name pos:start="195:31" pos:end="195:41"><name pos:start="195:31" pos:end="195:35">avpkt</name><operator pos:start="195:36" pos:end="195:37">-&gt;</operator><name pos:start="195:38" pos:end="195:41">size</name></name></expr>)</condition> <block pos:start="195:44" pos:end="203:5">{<block_content pos:start="199:9" pos:end="201:65">

        <comment type="block" pos:start="197:9" pos:end="197:76">/* some data of packet was not consumed. store it to local buffer */</comment>

        <expr_stmt pos:start="199:9" pos:end="201:65"><expr pos:start="199:9" pos:end="201:64"><call pos:start="199:9" pos:end="201:64"><name pos:start="199:9" pos:end="199:29">av_fifo_generic_write</name><argument_list pos:start="199:30" pos:end="201:64">(<argument pos:start="199:31" pos:end="199:43"><expr pos:start="199:31" pos:end="199:43"><name pos:start="199:31" pos:end="199:43"><name pos:start="199:31" pos:end="199:31">q</name><operator pos:start="199:32" pos:end="199:33">-&gt;</operator><name pos:start="199:34" pos:end="199:43">input_fifo</name></name></expr></argument>, <argument pos:start="199:46" pos:end="199:70"><expr pos:start="199:46" pos:end="199:70"><name pos:start="199:46" pos:end="199:56"><name pos:start="199:46" pos:end="199:50">avpkt</name><operator pos:start="199:51" pos:end="199:52">-&gt;</operator><name pos:start="199:53" pos:end="199:56">data</name></name><operator pos:start="199:57" pos:end="199:57">+</operator><name pos:start="199:58" pos:end="199:70"><name pos:start="199:58" pos:end="199:59">bs</name><operator pos:start="199:60" pos:end="199:60">.</operator><name pos:start="199:61" pos:end="199:70">DataOffset</name></name></expr></argument>,

                              <argument pos:start="201:31" pos:end="201:57"><expr pos:start="201:31" pos:end="201:57"><name pos:start="201:31" pos:end="201:41"><name pos:start="201:31" pos:end="201:35">avpkt</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:41">size</name></name> <operator pos:start="201:43" pos:end="201:43">-</operator> <name pos:start="201:45" pos:end="201:57"><name pos:start="201:45" pos:end="201:46">bs</name><operator pos:start="201:47" pos:end="201:47">.</operator><name pos:start="201:48" pos:end="201:57">DataOffset</name></name></expr></argument>, <argument pos:start="201:60" pos:end="201:63"><expr pos:start="201:60" pos:end="201:63"><name pos:start="201:60" pos:end="201:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="207:5" pos:end="215:5"><if pos:start="207:5" pos:end="215:5">if <condition pos:start="207:8" pos:end="207:42">(<expr pos:start="207:9" pos:end="207:41"><name pos:start="207:9" pos:end="207:25">MFX_ERR_MORE_DATA</name><operator pos:start="207:26" pos:end="207:27">!=</operator><name pos:start="207:28" pos:end="207:30">ret</name> <operator pos:start="207:32" pos:end="207:33">&amp;&amp;</operator> <name pos:start="207:35" pos:end="207:37">ret</name> <operator pos:start="207:39" pos:end="207:39">&lt;</operator> <literal type="number" pos:start="207:41" pos:end="207:41">0</literal></expr>)</condition> <block pos:start="207:44" pos:end="215:5">{<block_content pos:start="209:9" pos:end="213:33">

        <expr_stmt pos:start="209:9" pos:end="209:24"><expr pos:start="209:9" pos:end="209:23"><call pos:start="209:9" pos:end="209:23"><name pos:start="209:9" pos:end="209:16">av_freep</name><argument_list pos:start="209:17" pos:end="209:23">(<argument pos:start="209:18" pos:end="209:22"><expr pos:start="209:18" pos:end="209:22"><operator pos:start="209:18" pos:end="209:18">&amp;</operator><name pos:start="209:19" pos:end="209:22">sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:76"><expr pos:start="211:9" pos:end="211:75"><call pos:start="211:9" pos:end="211:75"><name pos:start="211:9" pos:end="211:14">av_log</name><argument_list pos:start="211:15" pos:end="211:75">(<argument pos:start="211:16" pos:end="211:20"><expr pos:start="211:16" pos:end="211:20"><name pos:start="211:16" pos:end="211:20">avctx</name></expr></argument>, <argument pos:start="211:23" pos:end="211:34"><expr pos:start="211:23" pos:end="211:34"><name pos:start="211:23" pos:end="211:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="211:37" pos:end="211:69"><expr pos:start="211:37" pos:end="211:69"><literal type="string" pos:start="211:37" pos:end="211:69">"Error %d during QSV decoding.\n"</literal></expr></argument>, <argument pos:start="211:72" pos:end="211:74"><expr pos:start="211:72" pos:end="211:74"><name pos:start="211:72" pos:end="211:74">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="213:9" pos:end="213:33">return <expr pos:start="213:16" pos:end="213:32"><call pos:start="213:16" pos:end="213:32"><name pos:start="213:16" pos:end="213:27">ff_qsv_error</name><argument_list pos:start="213:28" pos:end="213:32">(<argument pos:start="213:29" pos:end="213:31"><expr pos:start="213:29" pos:end="213:31"><name pos:start="213:29" pos:end="213:31">ret</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:82"><expr pos:start="217:5" pos:end="217:81"><name pos:start="217:5" pos:end="217:16">n_out_frames</name> <operator pos:start="217:18" pos:end="217:18">=</operator> <call pos:start="217:20" pos:end="217:46"><name pos:start="217:20" pos:end="217:31">av_fifo_size</name><argument_list pos:start="217:32" pos:end="217:46">(<argument pos:start="217:33" pos:end="217:45"><expr pos:start="217:33" pos:end="217:45"><name pos:start="217:33" pos:end="217:45"><name pos:start="217:33" pos:end="217:33">q</name><operator pos:start="217:34" pos:end="217:35">-&gt;</operator><name pos:start="217:36" pos:end="217:45">async_fifo</name></name></expr></argument>)</argument_list></call> <operator pos:start="217:48" pos:end="217:48">/</operator> <operator pos:start="217:50" pos:end="217:50">(</operator><sizeof pos:start="217:51" pos:end="217:67">sizeof<argument_list pos:start="217:57" pos:end="217:67">(<argument pos:start="217:58" pos:end="217:66"><expr pos:start="217:58" pos:end="217:66"><name pos:start="217:58" pos:end="217:66">out_frame</name></expr></argument>)</argument_list></sizeof><operator pos:start="217:68" pos:end="217:68">+</operator><sizeof pos:start="217:69" pos:end="217:80">sizeof<argument_list pos:start="217:75" pos:end="217:80">(<argument pos:start="217:76" pos:end="217:79"><expr pos:start="217:76" pos:end="217:79"><name pos:start="217:76" pos:end="217:79">sync</name></expr></argument>)</argument_list></sizeof><operator pos:start="217:81" pos:end="217:81">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="221:5" pos:end="287:5"><if pos:start="221:5" pos:end="287:5">if <condition pos:start="221:8" pos:end="221:66">(<expr pos:start="221:9" pos:end="221:64"><name pos:start="221:9" pos:end="221:20">n_out_frames</name> <operator pos:start="221:22" pos:end="221:22">&gt;</operator> <name pos:start="221:24" pos:end="221:37"><name pos:start="221:24" pos:end="221:24">q</name><operator pos:start="221:25" pos:end="221:26">-&gt;</operator><name pos:start="221:27" pos:end="221:37">async_depth</name></name> <operator pos:start="221:39" pos:end="221:40">||</operator> <operator pos:start="221:42" pos:end="221:42">(</operator><name pos:start="221:43" pos:end="221:47">flush</name> <operator pos:start="221:49" pos:end="221:50">&amp;&amp;</operator> <name pos:start="221:52" pos:end="221:63">n_out_frames</name><operator pos:start="221:64" pos:end="221:64">)</operator></expr> )</condition> <block pos:start="221:68" pos:end="287:5">{<block_content pos:start="223:9" pos:end="285:23">

        <decl_stmt pos:start="223:9" pos:end="223:27"><decl pos:start="223:9" pos:end="223:26"><type pos:start="223:9" pos:end="223:17"><name pos:start="223:9" pos:end="223:15">AVFrame</name> <modifier pos:start="223:17" pos:end="223:17">*</modifier></type><name pos:start="223:18" pos:end="223:26">src_frame</name></decl>;</decl_stmt>



        <expr_stmt pos:start="227:9" pos:end="227:81"><expr pos:start="227:9" pos:end="227:80"><call pos:start="227:9" pos:end="227:80"><name pos:start="227:9" pos:end="227:28">av_fifo_generic_read</name><argument_list pos:start="227:29" pos:end="227:80">(<argument pos:start="227:30" pos:end="227:42"><expr pos:start="227:30" pos:end="227:42"><name pos:start="227:30" pos:end="227:42"><name pos:start="227:30" pos:end="227:30">q</name><operator pos:start="227:31" pos:end="227:32">-&gt;</operator><name pos:start="227:33" pos:end="227:42">async_fifo</name></name></expr></argument>, <argument pos:start="227:45" pos:end="227:54"><expr pos:start="227:45" pos:end="227:54"><operator pos:start="227:45" pos:end="227:45">&amp;</operator><name pos:start="227:46" pos:end="227:54">out_frame</name></expr></argument>, <argument pos:start="227:57" pos:end="227:73"><expr pos:start="227:57" pos:end="227:73"><sizeof pos:start="227:57" pos:end="227:73">sizeof<argument_list pos:start="227:63" pos:end="227:73">(<argument pos:start="227:64" pos:end="227:72"><expr pos:start="227:64" pos:end="227:72"><name pos:start="227:64" pos:end="227:72">out_frame</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="227:76" pos:end="227:79"><expr pos:start="227:76" pos:end="227:79"><name pos:start="227:76" pos:end="227:79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:81"><expr pos:start="229:9" pos:end="229:80"><call pos:start="229:9" pos:end="229:80"><name pos:start="229:9" pos:end="229:28">av_fifo_generic_read</name><argument_list pos:start="229:29" pos:end="229:80">(<argument pos:start="229:30" pos:end="229:42"><expr pos:start="229:30" pos:end="229:42"><name pos:start="229:30" pos:end="229:42"><name pos:start="229:30" pos:end="229:30">q</name><operator pos:start="229:31" pos:end="229:32">-&gt;</operator><name pos:start="229:33" pos:end="229:42">async_fifo</name></name></expr></argument>, <argument pos:start="229:45" pos:end="229:49"><expr pos:start="229:45" pos:end="229:49"><operator pos:start="229:45" pos:end="229:45">&amp;</operator><name pos:start="229:46" pos:end="229:49">sync</name></expr></argument>,      <argument pos:start="229:57" pos:end="229:68"><expr pos:start="229:57" pos:end="229:68"><sizeof pos:start="229:57" pos:end="229:68">sizeof<argument_list pos:start="229:63" pos:end="229:68">(<argument pos:start="229:64" pos:end="229:67"><expr pos:start="229:64" pos:end="229:67"><name pos:start="229:64" pos:end="229:67">sync</name></expr></argument>)</argument_list></sizeof></expr></argument>,      <argument pos:start="229:76" pos:end="229:79"><expr pos:start="229:76" pos:end="229:79"><name pos:start="229:76" pos:end="229:79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:30"><expr pos:start="231:9" pos:end="231:29"><name pos:start="231:9" pos:end="231:25"><name pos:start="231:9" pos:end="231:17">out_frame</name><operator pos:start="231:18" pos:end="231:19">-&gt;</operator><name pos:start="231:20" pos:end="231:25">queued</name></name> <operator pos:start="231:27" pos:end="231:27">=</operator> <literal type="number" pos:start="231:29" pos:end="231:29">0</literal></expr>;</expr_stmt>



        <do pos:start="235:9" pos:end="239:46">do <block pos:start="235:12" pos:end="239:9">{<block_content pos:start="237:13" pos:end="237:70">

            <expr_stmt pos:start="237:13" pos:end="237:70"><expr pos:start="237:13" pos:end="237:69"><name pos:start="237:13" pos:end="237:15">ret</name> <operator pos:start="237:17" pos:end="237:17">=</operator> <call pos:start="237:19" pos:end="237:69"><name pos:start="237:19" pos:end="237:44">MFXVideoCORE_SyncOperation</name><argument_list pos:start="237:45" pos:end="237:69">(<argument pos:start="237:46" pos:end="237:55"><expr pos:start="237:46" pos:end="237:55"><name pos:start="237:46" pos:end="237:55"><name pos:start="237:46" pos:end="237:46">q</name><operator pos:start="237:47" pos:end="237:48">-&gt;</operator><name pos:start="237:49" pos:end="237:55">session</name></name></expr></argument>, <argument pos:start="237:58" pos:end="237:62"><expr pos:start="237:58" pos:end="237:62"><operator pos:start="237:58" pos:end="237:58">*</operator><name pos:start="237:59" pos:end="237:62">sync</name></expr></argument>, <argument pos:start="237:65" pos:end="237:68"><expr pos:start="237:65" pos:end="237:68"><literal type="number" pos:start="237:65" pos:end="237:68">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="239:17" pos:end="239:45">(<expr pos:start="239:18" pos:end="239:44"><name pos:start="239:18" pos:end="239:20">ret</name> <operator pos:start="239:22" pos:end="239:23">==</operator> <name pos:start="239:25" pos:end="239:44">MFX_WRN_IN_EXECUTION</name></expr>)</condition>;</do>



        <expr_stmt pos:start="243:9" pos:end="243:24"><expr pos:start="243:9" pos:end="243:23"><call pos:start="243:9" pos:end="243:23"><name pos:start="243:9" pos:end="243:16">av_freep</name><argument_list pos:start="243:17" pos:end="243:23">(<argument pos:start="243:18" pos:end="243:22"><expr pos:start="243:18" pos:end="243:22"><operator pos:start="243:18" pos:end="243:18">&amp;</operator><name pos:start="243:19" pos:end="243:22">sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="247:9" pos:end="247:37"><expr pos:start="247:9" pos:end="247:36"><name pos:start="247:9" pos:end="247:17">src_frame</name> <operator pos:start="247:19" pos:end="247:19">=</operator> <name pos:start="247:21" pos:end="247:36"><name pos:start="247:21" pos:end="247:29">out_frame</name><operator pos:start="247:30" pos:end="247:31">-&gt;</operator><name pos:start="247:32" pos:end="247:36">frame</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="251:9" pos:end="251:45"><expr pos:start="251:9" pos:end="251:44"><name pos:start="251:9" pos:end="251:11">ret</name> <operator pos:start="251:13" pos:end="251:13">=</operator> <call pos:start="251:15" pos:end="251:44"><name pos:start="251:15" pos:end="251:26">av_frame_ref</name><argument_list pos:start="251:27" pos:end="251:44">(<argument pos:start="251:28" pos:end="251:32"><expr pos:start="251:28" pos:end="251:32"><name pos:start="251:28" pos:end="251:32">frame</name></expr></argument>, <argument pos:start="251:35" pos:end="251:43"><expr pos:start="251:35" pos:end="251:43"><name pos:start="251:35" pos:end="251:43">src_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="253:9" pos:end="255:23"><if pos:start="253:9" pos:end="255:23">if <condition pos:start="253:12" pos:end="253:20">(<expr pos:start="253:13" pos:end="253:19"><name pos:start="253:13" pos:end="253:15">ret</name> <operator pos:start="253:17" pos:end="253:17">&lt;</operator> <literal type="number" pos:start="253:19" pos:end="253:19">0</literal></expr>)</condition><block type="pseudo" pos:start="255:13" pos:end="255:23"><block_content pos:start="255:13" pos:end="255:23">

            <return pos:start="255:13" pos:end="255:23">return <expr pos:start="255:20" pos:end="255:22"><name pos:start="255:20" pos:end="255:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="259:9" pos:end="259:37"><expr pos:start="259:9" pos:end="259:36"><name pos:start="259:9" pos:end="259:15">outsurf</name> <operator pos:start="259:17" pos:end="259:17">=</operator> <name pos:start="259:19" pos:end="259:36"><name pos:start="259:19" pos:end="259:27">out_frame</name><operator pos:start="259:28" pos:end="259:29">-&gt;</operator><name pos:start="259:30" pos:end="259:36">surface</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="263:9" pos:end="263:62"><expr pos:start="263:9" pos:end="263:61"><name pos:start="263:9" pos:end="263:22"><name pos:start="263:9" pos:end="263:13">frame</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:22">pkt_pts</name></name> <operator pos:start="263:24" pos:end="263:24">=</operator> <name pos:start="263:26" pos:end="263:35"><name pos:start="263:26" pos:end="263:30">frame</name><operator pos:start="263:31" pos:end="263:32">-&gt;</operator><name pos:start="263:33" pos:end="263:35">pts</name></name> <operator pos:start="263:37" pos:end="263:37">=</operator> <name pos:start="263:39" pos:end="263:61"><name pos:start="263:39" pos:end="263:45">outsurf</name><operator pos:start="263:46" pos:end="263:47">-&gt;</operator><name pos:start="263:48" pos:end="263:51">Data</name><operator pos:start="263:52" pos:end="263:52">.</operator><name pos:start="263:53" pos:end="263:61">TimeStamp</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="267:9" pos:end="273:75"><expr pos:start="267:9" pos:end="273:74"><name pos:start="267:9" pos:end="267:26"><name pos:start="267:9" pos:end="267:13">frame</name><operator pos:start="267:14" pos:end="267:15">-&gt;</operator><name pos:start="267:16" pos:end="267:26">repeat_pict</name></name> <operator pos:start="267:28" pos:end="267:28">=</operator>

            <ternary pos:start="269:13" pos:end="273:74"><condition pos:start="269:13" pos:end="269:68"><expr pos:start="269:13" pos:end="269:66"><name pos:start="269:13" pos:end="269:35"><name pos:start="269:13" pos:end="269:19">outsurf</name><operator pos:start="269:20" pos:end="269:21">-&gt;</operator><name pos:start="269:22" pos:end="269:25">Info</name><operator pos:start="269:26" pos:end="269:26">.</operator><name pos:start="269:27" pos:end="269:35">PicStruct</name></name> <operator pos:start="269:37" pos:end="269:37">&amp;</operator> <name pos:start="269:39" pos:end="269:66">MFX_PICSTRUCT_FRAME_TRIPLING</name></expr> ?</condition><then pos:start="269:70" pos:end="269:70"> <expr pos:start="269:70" pos:end="269:70"><literal type="number" pos:start="269:70" pos:end="269:70">4</literal></expr> </then><else pos:start="269:72" pos:end="273:74">:

            <expr pos:start="271:13" pos:end="273:74"><ternary pos:start="271:13" pos:end="273:74"><condition pos:start="271:13" pos:end="271:68"><expr pos:start="271:13" pos:end="271:66"><name pos:start="271:13" pos:end="271:35"><name pos:start="271:13" pos:end="271:19">outsurf</name><operator pos:start="271:20" pos:end="271:21">-&gt;</operator><name pos:start="271:22" pos:end="271:25">Info</name><operator pos:start="271:26" pos:end="271:26">.</operator><name pos:start="271:27" pos:end="271:35">PicStruct</name></name> <operator pos:start="271:37" pos:end="271:37">&amp;</operator> <name pos:start="271:39" pos:end="271:66">MFX_PICSTRUCT_FRAME_DOUBLING</name></expr> ?</condition><then pos:start="271:70" pos:end="271:70"> <expr pos:start="271:70" pos:end="271:70"><literal type="number" pos:start="271:70" pos:end="271:70">2</literal></expr> </then><else pos:start="271:72" pos:end="273:74">:

            <expr pos:start="273:13" pos:end="273:74"><ternary pos:start="273:13" pos:end="273:74"><condition pos:start="273:13" pos:end="273:68"><expr pos:start="273:13" pos:end="273:66"><name pos:start="273:13" pos:end="273:35"><name pos:start="273:13" pos:end="273:19">outsurf</name><operator pos:start="273:20" pos:end="273:21">-&gt;</operator><name pos:start="273:22" pos:end="273:25">Info</name><operator pos:start="273:26" pos:end="273:26">.</operator><name pos:start="273:27" pos:end="273:35">PicStruct</name></name> <operator pos:start="273:37" pos:end="273:37">&amp;</operator> <name pos:start="273:39" pos:end="273:66">MFX_PICSTRUCT_FIELD_REPEATED</name></expr> ?</condition><then pos:start="273:70" pos:end="273:70"> <expr pos:start="273:70" pos:end="273:70"><literal type="number" pos:start="273:70" pos:end="273:70">1</literal></expr> </then><else pos:start="273:72" pos:end="273:74">: <expr pos:start="273:74" pos:end="273:74"><literal type="number" pos:start="273:74" pos:end="273:74">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="277:62"><expr pos:start="275:9" pos:end="277:61"><name pos:start="275:9" pos:end="275:30"><name pos:start="275:9" pos:end="275:13">frame</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:30">top_field_first</name></name> <operator pos:start="275:32" pos:end="275:32">=</operator>

            <name pos:start="277:13" pos:end="277:35"><name pos:start="277:13" pos:end="277:19">outsurf</name><operator pos:start="277:20" pos:end="277:21">-&gt;</operator><name pos:start="277:22" pos:end="277:25">Info</name><operator pos:start="277:26" pos:end="277:26">.</operator><name pos:start="277:27" pos:end="277:35">PicStruct</name></name> <operator pos:start="277:37" pos:end="277:37">&amp;</operator> <name pos:start="277:39" pos:end="277:61">MFX_PICSTRUCT_FIELD_TFF</name></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="281:67"><expr pos:start="279:9" pos:end="281:66"><name pos:start="279:9" pos:end="279:31"><name pos:start="279:9" pos:end="279:13">frame</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:31">interlaced_frame</name></name> <operator pos:start="279:33" pos:end="279:33">=</operator>

            <operator pos:start="281:13" pos:end="281:13">!</operator><operator pos:start="281:14" pos:end="281:14">(</operator><name pos:start="281:15" pos:end="281:37"><name pos:start="281:15" pos:end="281:21">outsurf</name><operator pos:start="281:22" pos:end="281:23">-&gt;</operator><name pos:start="281:24" pos:end="281:27">Info</name><operator pos:start="281:28" pos:end="281:28">.</operator><name pos:start="281:29" pos:end="281:37">PicStruct</name></name> <operator pos:start="281:39" pos:end="281:39">&amp;</operator> <name pos:start="281:41" pos:end="281:65">MFX_PICSTRUCT_PROGRESSIVE</name><operator pos:start="281:66" pos:end="281:66">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="285:9" pos:end="285:23"><expr pos:start="285:9" pos:end="285:22"><operator pos:start="285:9" pos:end="285:9">*</operator><name pos:start="285:10" pos:end="285:18">got_frame</name> <operator pos:start="285:20" pos:end="285:20">=</operator> <literal type="number" pos:start="285:22" pos:end="285:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="291:5" pos:end="291:23">return <expr pos:start="291:12" pos:end="291:22"><name pos:start="291:12" pos:end="291:22"><name pos:start="291:12" pos:end="291:16">avpkt</name><operator pos:start="291:17" pos:end="291:18">-&gt;</operator><name pos:start="291:19" pos:end="291:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
