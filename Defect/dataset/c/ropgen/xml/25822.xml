<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25822.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">queue_signal</name><parameter_list pos:start="1:17" pos:end="1:68">(<parameter pos:start="1:18" pos:end="1:34"><decl pos:start="1:18" pos:end="1:34"><type pos:start="1:18" pos:end="1:34"><name pos:start="1:18" pos:end="1:29">CPUArchState</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:34">env</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:43"><decl pos:start="1:37" pos:end="1:43"><type pos:start="1:37" pos:end="1:43"><name pos:start="1:37" pos:end="1:39">int</name></type> <name pos:start="1:41" pos:end="1:43">sig</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:67"><decl pos:start="1:46" pos:end="1:67"><type pos:start="1:46" pos:end="1:67"><name pos:start="1:46" pos:end="1:61">target_siginfo_t</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">info</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="147:1">{<block_content pos:start="5:5" pos:end="145:5">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:36">= <expr pos:start="5:21" pos:end="5:36"><call pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:31">ENV_GET_CPU</name><argument_list pos:start="5:32" pos:end="5:36">(<argument pos:start="5:33" pos:end="5:35"><expr pos:start="5:33" pos:end="5:35"><name pos:start="5:33" pos:end="5:35">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">TaskState</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:17">ts</name> <init pos:start="7:19" pos:end="7:31">= <expr pos:start="7:21" pos:end="7:31"><name pos:start="7:21" pos:end="7:31"><name pos:start="7:21" pos:end="7:23">cpu</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:31">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:28">emulated_sigtable</name></name> <modifier pos:start="9:30" pos:end="9:30">*</modifier></type><name pos:start="9:31" pos:end="9:31">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:19">sigqueue</name></name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:22">q</name></decl>, <decl pos:start="11:25" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:21"><modifier pos:start="11:25" pos:end="11:25">*</modifier><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:28">pq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">abi_ulong</name></type> <name pos:start="13:15" pos:end="13:21">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">queue</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:38"><expr pos:start="19:5" pos:end="19:37"><call pos:start="19:5" pos:end="19:37"><name pos:start="19:5" pos:end="19:27">trace_user_queue_signal</name><argument_list pos:start="19:28" pos:end="19:37">(<argument pos:start="19:29" pos:end="19:31"><expr pos:start="19:29" pos:end="19:31"><name pos:start="19:29" pos:end="19:31">env</name></expr></argument>, <argument pos:start="19:34" pos:end="19:36"><expr pos:start="19:34" pos:end="19:36"><name pos:start="19:34" pos:end="19:36">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:5">k</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <operator pos:start="21:9" pos:end="21:9">&amp;</operator><name pos:start="21:10" pos:end="21:28"><name pos:start="21:10" pos:end="21:11">ts</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:19">sigtab</name><index pos:start="21:20" pos:end="21:28">[<expr pos:start="21:21" pos:end="21:27"><name pos:start="21:21" pos:end="21:23">sig</name> <operator pos:start="21:25" pos:end="21:25">-</operator> <literal type="number" pos:start="21:27" pos:end="21:27">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:28"><expr pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:9">queue</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <call pos:start="23:13" pos:end="23:27"><name pos:start="23:13" pos:end="23:24">gdb_queuesig</name> <argument_list pos:start="23:26" pos:end="23:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:48"><expr pos:start="25:5" pos:end="25:47"><name pos:start="25:5" pos:end="25:11">handler</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:35"><name pos:start="25:15" pos:end="25:26">sigact_table</name><index pos:start="25:27" pos:end="25:35">[<expr pos:start="25:28" pos:end="25:34"><name pos:start="25:28" pos:end="25:30">sig</name> <operator pos:start="25:32" pos:end="25:32">-</operator> <literal type="number" pos:start="25:34" pos:end="25:34">1</literal></expr>]</index></name><operator pos:start="25:36" pos:end="25:36">.</operator><name pos:start="25:37" pos:end="25:47">_sa_handler</name></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="49:5"><if pos:start="29:5" pos:end="49:5">if <condition pos:start="29:8" pos:end="29:72">(<expr pos:start="29:9" pos:end="29:71"><name pos:start="29:9" pos:end="29:11">sig</name> <operator pos:start="29:13" pos:end="29:14">==</operator> <name pos:start="29:16" pos:end="29:29">TARGET_SIGSEGV</name> <operator pos:start="29:31" pos:end="29:32">&amp;&amp;</operator> <call pos:start="29:34" pos:end="29:71"><name pos:start="29:34" pos:end="29:44">sigismember</name><argument_list pos:start="29:45" pos:end="29:71">(<argument pos:start="29:46" pos:end="29:61"><expr pos:start="29:46" pos:end="29:61"><operator pos:start="29:46" pos:end="29:46">&amp;</operator><name pos:start="29:47" pos:end="29:61"><name pos:start="29:47" pos:end="29:48">ts</name><operator pos:start="29:49" pos:end="29:50">-&gt;</operator><name pos:start="29:51" pos:end="29:61">signal_mask</name></name></expr></argument>, <argument pos:start="29:64" pos:end="29:70"><expr pos:start="29:64" pos:end="29:70"><name pos:start="29:64" pos:end="29:70">SIGSEGV</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:74" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:33">

        <comment type="block" pos:start="31:9" pos:end="45:11">/* Guest has blocked SIGSEGV but we got one anyway. Assume this

         * is a forced SIGSEGV (ie one the kernel handles via force_sig_info

         * because it got a real MMU fault). A blocked SIGSEGV in that

         * situation is treated as if using the default handler. This is

         * not correct if some other process has randomly sent us a SIGSEGV

         * via kill(), but that is not easy to distinguish at this point,

         * so we assume it doesn't happen.

         */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:33"><expr pos:start="47:9" pos:end="47:32"><name pos:start="47:9" pos:end="47:15">handler</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:32">TARGET_SIG_DFL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="145:5"><if pos:start="53:5" pos:end="81:5">if <condition pos:start="53:8" pos:end="53:44">(<expr pos:start="53:9" pos:end="53:43"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:14">queue</name> <operator pos:start="53:16" pos:end="53:17">&amp;&amp;</operator> <name pos:start="53:19" pos:end="53:25">handler</name> <operator pos:start="53:27" pos:end="53:28">==</operator> <name pos:start="53:30" pos:end="53:43">TARGET_SIG_DFL</name></expr>)</condition> <block pos:start="53:46" pos:end="81:5">{<block_content pos:start="55:9" pos:end="79:9">

        <if_stmt pos:start="55:9" pos:end="79:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:84">(<expr pos:start="55:13" pos:end="55:83"><name pos:start="55:13" pos:end="55:15">sig</name> <operator pos:start="55:17" pos:end="55:18">==</operator> <name pos:start="55:20" pos:end="55:33">TARGET_SIGTSTP</name> <operator pos:start="55:35" pos:end="55:36">||</operator> <name pos:start="55:38" pos:end="55:40">sig</name> <operator pos:start="55:42" pos:end="55:43">==</operator> <name pos:start="55:45" pos:end="55:58">TARGET_SIGTTIN</name> <operator pos:start="55:60" pos:end="55:61">||</operator> <name pos:start="55:63" pos:end="55:65">sig</name> <operator pos:start="55:67" pos:end="55:68">==</operator> <name pos:start="55:70" pos:end="55:83">TARGET_SIGTTOU</name></expr>)</condition> <block pos:start="55:86" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:21">

            <expr_stmt pos:start="57:13" pos:end="57:35"><expr pos:start="57:13" pos:end="57:34"><call pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:16">kill</name><argument_list pos:start="57:17" pos:end="57:34">(<argument pos:start="57:18" pos:end="57:25"><expr pos:start="57:18" pos:end="57:25"><call pos:start="57:18" pos:end="57:25"><name pos:start="57:18" pos:end="57:23">getpid</name><argument_list pos:start="57:24" pos:end="57:25">()</argument_list></call></expr></argument>,<argument pos:start="57:27" pos:end="57:33"><expr pos:start="57:27" pos:end="57:33"><name pos:start="57:27" pos:end="57:33">SIGSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:21">return <expr pos:start="59:20" pos:end="59:20"><literal type="number" pos:start="59:20" pos:end="59:20">0</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="61:11" pos:end="75:9">else

        <comment type="block" pos:start="63:9" pos:end="63:71">/* default handler : ignore some signal. The other are fatal */</comment>

        if <condition pos:start="65:12" pos:end="71:34">(<expr pos:start="65:13" pos:end="71:33"><name pos:start="65:13" pos:end="65:15">sig</name> <operator pos:start="65:17" pos:end="65:18">!=</operator> <name pos:start="65:20" pos:end="65:33">TARGET_SIGCHLD</name> <operator pos:start="65:35" pos:end="65:36">&amp;&amp;</operator>

            <name pos:start="67:13" pos:end="67:15">sig</name> <operator pos:start="67:17" pos:end="67:18">!=</operator> <name pos:start="67:20" pos:end="67:32">TARGET_SIGURG</name> <operator pos:start="67:34" pos:end="67:35">&amp;&amp;</operator>

            <name pos:start="69:13" pos:end="69:15">sig</name> <operator pos:start="69:17" pos:end="69:18">!=</operator> <name pos:start="69:20" pos:end="69:34">TARGET_SIGWINCH</name> <operator pos:start="69:36" pos:end="69:37">&amp;&amp;</operator>

            <name pos:start="71:13" pos:end="71:15">sig</name> <operator pos:start="71:17" pos:end="71:18">!=</operator> <name pos:start="71:20" pos:end="71:33">TARGET_SIGCONT</name></expr>)</condition> <block pos:start="71:36" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:27">

            <expr_stmt pos:start="73:13" pos:end="73:27"><expr pos:start="73:13" pos:end="73:26"><call pos:start="73:13" pos:end="73:26"><name pos:start="73:13" pos:end="73:21">force_sig</name><argument_list pos:start="73:22" pos:end="73:26">(<argument pos:start="73:23" pos:end="73:25"><expr pos:start="73:23" pos:end="73:25"><name pos:start="73:23" pos:end="73:25">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="79:9">else <block pos:start="75:16" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:21">

            <return pos:start="77:13" pos:end="77:21">return <expr pos:start="77:20" pos:end="77:20"><literal type="number" pos:start="77:20" pos:end="77:20">0</literal></expr>;</return> <comment type="block" pos:start="77:23" pos:end="77:44">/* indicate ignored */</comment>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="81:7" pos:end="87:5">else if <condition pos:start="81:15" pos:end="81:51">(<expr pos:start="81:16" pos:end="81:50"><operator pos:start="81:16" pos:end="81:16">!</operator><name pos:start="81:17" pos:end="81:21">queue</name> <operator pos:start="81:23" pos:end="81:24">&amp;&amp;</operator> <name pos:start="81:26" pos:end="81:32">handler</name> <operator pos:start="81:34" pos:end="81:35">==</operator> <name pos:start="81:37" pos:end="81:50">TARGET_SIG_IGN</name></expr>)</condition> <block pos:start="81:53" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:17">

        <comment type="block" pos:start="83:9" pos:end="83:27">/* ignore signal */</comment>

        <return pos:start="85:9" pos:end="85:17">return <expr pos:start="85:16" pos:end="85:16"><literal type="number" pos:start="85:16" pos:end="85:16">0</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="87:7" pos:end="91:5">else if <condition pos:start="87:15" pos:end="87:51">(<expr pos:start="87:16" pos:end="87:50"><operator pos:start="87:16" pos:end="87:16">!</operator><name pos:start="87:17" pos:end="87:21">queue</name> <operator pos:start="87:23" pos:end="87:24">&amp;&amp;</operator> <name pos:start="87:26" pos:end="87:32">handler</name> <operator pos:start="87:34" pos:end="87:35">==</operator> <name pos:start="87:37" pos:end="87:50">TARGET_SIG_ERR</name></expr>)</condition> <block pos:start="87:53" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:23">

        <expr_stmt pos:start="89:9" pos:end="89:23"><expr pos:start="89:9" pos:end="89:22"><call pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:17">force_sig</name><argument_list pos:start="89:18" pos:end="89:22">(<argument pos:start="89:19" pos:end="89:21"><expr pos:start="89:19" pos:end="89:21"><name pos:start="89:19" pos:end="89:21">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="145:5">else <block pos:start="91:12" pos:end="145:5">{<block_content pos:start="93:9" pos:end="143:17">

        <expr_stmt pos:start="93:9" pos:end="93:23"><expr pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:10">pq</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <operator pos:start="93:14" pos:end="93:14">&amp;</operator><name pos:start="93:15" pos:end="93:22"><name pos:start="93:15" pos:end="93:15">k</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:22">first</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="129:9"><if pos:start="95:9" pos:end="107:9">if <condition pos:start="95:12" pos:end="95:34">(<expr pos:start="95:13" pos:end="95:33"><name pos:start="95:13" pos:end="95:15">sig</name> <operator pos:start="95:17" pos:end="95:17">&lt;</operator> <name pos:start="95:19" pos:end="95:33">TARGET_SIGRTMIN</name></expr>)</condition> <block pos:start="95:36" pos:end="107:9">{<block_content pos:start="99:13" pos:end="105:25">

            <comment type="block" pos:start="97:13" pos:end="97:70">/* if non real time signal, we queue exactly one signal */</comment>

            <if_stmt pos:start="99:13" pos:end="105:25"><if pos:start="99:13" pos:end="101:29">if <condition pos:start="99:16" pos:end="99:28">(<expr pos:start="99:17" pos:end="99:27"><operator pos:start="99:17" pos:end="99:17">!</operator><name pos:start="99:18" pos:end="99:27"><name pos:start="99:18" pos:end="99:18">k</name><operator pos:start="99:19" pos:end="99:20">-&gt;</operator><name pos:start="99:21" pos:end="99:27">pending</name></name></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:29"><block_content pos:start="101:17" pos:end="101:29">

                <expr_stmt pos:start="101:17" pos:end="101:29"><expr pos:start="101:17" pos:end="101:28"><name pos:start="101:17" pos:end="101:17">q</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <operator pos:start="101:21" pos:end="101:21">&amp;</operator><name pos:start="101:22" pos:end="101:28"><name pos:start="101:22" pos:end="101:22">k</name><operator pos:start="101:23" pos:end="101:24">-&gt;</operator><name pos:start="101:25" pos:end="101:28">info</name></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="103:13" pos:end="105:25">else<block type="pseudo" pos:start="105:17" pos:end="105:25"><block_content pos:start="105:17" pos:end="105:25">

                <return pos:start="105:17" pos:end="105:25">return <expr pos:start="105:24" pos:end="105:24"><literal type="number" pos:start="105:24" pos:end="105:24">0</literal></expr>;</return></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="107:11" pos:end="129:9">else <block pos:start="107:16" pos:end="129:9">{<block_content pos:start="109:13" pos:end="127:13">

            <if_stmt pos:start="109:13" pos:end="127:13"><if pos:start="109:13" pos:end="115:13">if <condition pos:start="109:16" pos:end="109:28">(<expr pos:start="109:17" pos:end="109:27"><operator pos:start="109:17" pos:end="109:17">!</operator><name pos:start="109:18" pos:end="109:27"><name pos:start="109:18" pos:end="109:18">k</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:27">pending</name></name></expr>)</condition> <block pos:start="109:30" pos:end="115:13">{<block_content pos:start="113:17" pos:end="113:29">

                <comment type="block" pos:start="111:17" pos:end="111:34">/* first signal */</comment>

                <expr_stmt pos:start="113:17" pos:end="113:29"><expr pos:start="113:17" pos:end="113:28"><name pos:start="113:17" pos:end="113:17">q</name> <operator pos:start="113:19" pos:end="113:19">=</operator> <operator pos:start="113:21" pos:end="113:21">&amp;</operator><name pos:start="113:22" pos:end="113:28"><name pos:start="113:22" pos:end="113:22">k</name><operator pos:start="113:23" pos:end="113:24">-&gt;</operator><name pos:start="113:25" pos:end="113:28">info</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="115:15" pos:end="127:13">else <block pos:start="115:20" pos:end="127:13">{<block_content pos:start="117:17" pos:end="125:38">

                <expr_stmt pos:start="117:17" pos:end="117:40"><expr pos:start="117:17" pos:end="117:39"><name pos:start="117:17" pos:end="117:17">q</name> <operator pos:start="117:19" pos:end="117:19">=</operator> <call pos:start="117:21" pos:end="117:39"><name pos:start="117:21" pos:end="117:34">alloc_sigqueue</name><argument_list pos:start="117:35" pos:end="117:39">(<argument pos:start="117:36" pos:end="117:38"><expr pos:start="117:36" pos:end="117:38"><name pos:start="117:36" pos:end="117:38">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="119:17" pos:end="121:35"><if pos:start="119:17" pos:end="121:35">if <condition pos:start="119:20" pos:end="119:23">(<expr pos:start="119:21" pos:end="119:22"><operator pos:start="119:21" pos:end="119:21">!</operator><name pos:start="119:22" pos:end="119:22">q</name></expr>)</condition><block type="pseudo" pos:start="121:21" pos:end="121:35"><block_content pos:start="121:21" pos:end="121:35">

                    <return pos:start="121:21" pos:end="121:35">return <expr pos:start="121:28" pos:end="121:34"><operator pos:start="121:28" pos:end="121:28">-</operator><name pos:start="121:29" pos:end="121:34">EAGAIN</name></expr>;</return></block_content></block></if></if_stmt>

                <while pos:start="123:17" pos:end="125:38">while <condition pos:start="123:23" pos:end="123:35">(<expr pos:start="123:24" pos:end="123:34"><operator pos:start="123:24" pos:end="123:24">*</operator><name pos:start="123:25" pos:end="123:26">pq</name> <operator pos:start="123:28" pos:end="123:29">!=</operator> <name pos:start="123:31" pos:end="123:34">NULL</name></expr>)</condition><block type="pseudo" pos:start="125:21" pos:end="125:38"><block_content pos:start="125:21" pos:end="125:38">

                    <expr_stmt pos:start="125:21" pos:end="125:38"><expr pos:start="125:21" pos:end="125:37"><name pos:start="125:21" pos:end="125:22">pq</name> <operator pos:start="125:24" pos:end="125:24">=</operator> <operator pos:start="125:26" pos:end="125:26">&amp;</operator><name pos:start="125:27" pos:end="125:37"><operator pos:start="125:27" pos:end="125:27">(</operator><operator pos:start="125:28" pos:end="125:28">*</operator><name pos:start="125:29" pos:end="125:30">pq</name><operator pos:start="125:31" pos:end="125:31">)</operator><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:37">next</name></name></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:16"><expr pos:start="131:9" pos:end="131:15"><operator pos:start="131:9" pos:end="131:9">*</operator><name pos:start="131:10" pos:end="131:11">pq</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <name pos:start="131:15" pos:end="131:15">q</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:24"><expr pos:start="133:9" pos:end="133:23"><name pos:start="133:9" pos:end="133:15"><name pos:start="133:9" pos:end="133:9">q</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:15">info</name></name> <operator pos:start="133:17" pos:end="133:17">=</operator> <operator pos:start="133:19" pos:end="133:19">*</operator><name pos:start="133:20" pos:end="133:23">info</name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:23"><expr pos:start="135:9" pos:end="135:22"><name pos:start="135:9" pos:end="135:15"><name pos:start="135:9" pos:end="135:9">q</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:15">next</name></name> <operator pos:start="135:17" pos:end="135:17">=</operator> <name pos:start="135:19" pos:end="135:22">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:23"><expr pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:18"><name pos:start="137:9" pos:end="137:9">k</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:18">pending</name></name> <operator pos:start="137:20" pos:end="137:20">=</operator> <literal type="number" pos:start="137:22" pos:end="137:22">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="139:9" pos:end="139:49">/* signal that a new signal is pending */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:43"><expr pos:start="141:9" pos:end="141:42"><call pos:start="141:9" pos:end="141:42"><name pos:start="141:9" pos:end="141:18">atomic_set</name><argument_list pos:start="141:19" pos:end="141:42">(<argument pos:start="141:20" pos:end="141:38"><expr pos:start="141:20" pos:end="141:38"><operator pos:start="141:20" pos:end="141:20">&amp;</operator><name pos:start="141:21" pos:end="141:38"><name pos:start="141:21" pos:end="141:22">ts</name><operator pos:start="141:23" pos:end="141:24">-&gt;</operator><name pos:start="141:25" pos:end="141:38">signal_pending</name></name></expr></argument>, <argument pos:start="141:41" pos:end="141:41"><expr pos:start="141:41" pos:end="141:41"><literal type="number" pos:start="141:41" pos:end="141:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:17">return <expr pos:start="143:16" pos:end="143:16"><literal type="number" pos:start="143:16" pos:end="143:16">1</literal></expr>;</return> <comment type="block" pos:start="143:19" pos:end="143:60">/* indicates that the signal was queued */</comment>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
