<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5949.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:6">double</name></type> <name pos:start="1:8" pos:end="1:26">parse_number_or_die</name><parameter_list pos:start="1:27" pos:end="3:50">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:46">context</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:58">char</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:66">numstr</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:76"><decl pos:start="1:69" pos:end="1:76"><type pos:start="1:69" pos:end="1:76"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:76">type</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:37"><decl pos:start="3:28" pos:end="3:37"><type pos:start="3:28" pos:end="3:37"><name pos:start="3:28" pos:end="3:33">double</name></type> <name pos:start="3:35" pos:end="3:37">min</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:49"><decl pos:start="3:40" pos:end="3:49"><type pos:start="3:40" pos:end="3:49"><name pos:start="3:40" pos:end="3:45">double</name></type> <name pos:start="3:47" pos:end="3:49">max</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="39:1">{<block_content pos:start="7:5" pos:end="37:13">

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:14">tail</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:21">error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">double</name></type> <name pos:start="11:12" pos:end="11:12">d</name> <init pos:start="11:14" pos:end="11:39">= <expr pos:start="11:16" pos:end="11:39"><call pos:start="11:16" pos:end="11:39"><name pos:start="11:16" pos:end="11:24">av_strtod</name><argument_list pos:start="11:25" pos:end="11:39">(<argument pos:start="11:26" pos:end="11:31"><expr pos:start="11:26" pos:end="11:31"><name pos:start="11:26" pos:end="11:31">numstr</name></expr></argument>, <argument pos:start="11:34" pos:end="11:38"><expr pos:start="11:34" pos:end="11:38"><operator pos:start="11:34" pos:end="11:34">&amp;</operator><name pos:start="11:35" pos:end="11:38">tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="13:5" pos:end="31:17"><if pos:start="13:5" pos:end="15:57">if <condition pos:start="13:8" pos:end="13:14">(<expr pos:start="13:9" pos:end="13:13"><operator pos:start="13:9" pos:end="13:9">*</operator><name pos:start="13:10" pos:end="13:13">tail</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:57"><block_content pos:start="15:9" pos:end="15:57">

        <expr_stmt pos:start="15:9" pos:end="15:57"><expr pos:start="15:9" pos:end="15:56"><name pos:start="15:9" pos:end="15:13">error</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <literal type="string" pos:start="15:17" pos:end="15:56">"Expected number for %s but found: %s\n"</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="17:5" pos:end="19:72">else if <condition pos:start="17:13" pos:end="17:32">(<expr pos:start="17:14" pos:end="17:31"><name pos:start="17:14" pos:end="17:27"><name pos:start="17:14" pos:end="17:14">d</name> <argument_list type="generic" pos:start="17:16" pos:end="17:27">&lt; <argument pos:start="17:18" pos:end="17:25"><expr pos:start="17:18" pos:end="17:25"><name pos:start="17:18" pos:end="17:20">min</name> <operator pos:start="17:22" pos:end="17:23">||</operator> <name pos:start="17:25" pos:end="17:25">d</name></expr></argument> &gt;</argument_list></name> <name pos:start="17:29" pos:end="17:31">max</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:72"><block_content pos:start="19:9" pos:end="19:72">

        <expr_stmt pos:start="19:9" pos:end="19:72"><expr pos:start="19:9" pos:end="19:71"><name pos:start="19:9" pos:end="19:13">error</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <literal type="string" pos:start="19:17" pos:end="19:71">"The value for %s was %s which is not within %f - %f\n"</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="21:5" pos:end="23:55">else if <condition pos:start="21:13" pos:end="21:50">(<expr pos:start="21:14" pos:end="21:49"><name pos:start="21:14" pos:end="21:17">type</name> <operator pos:start="21:19" pos:end="21:20">==</operator> <name pos:start="21:22" pos:end="21:30">OPT_INT64</name> <operator pos:start="21:32" pos:end="21:33">&amp;&amp;</operator> <operator pos:start="21:35" pos:end="21:35">(</operator><name pos:start="21:36" pos:end="21:42">int64_t</name><operator pos:start="21:43" pos:end="21:43">)</operator><name pos:start="21:44" pos:end="21:44">d</name> <operator pos:start="21:46" pos:end="21:47">!=</operator> <name pos:start="21:49" pos:end="21:49">d</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:55"><block_content pos:start="23:9" pos:end="23:55">

        <expr_stmt pos:start="23:9" pos:end="23:55"><expr pos:start="23:9" pos:end="23:54"><name pos:start="23:9" pos:end="23:13">error</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <literal type="string" pos:start="23:17" pos:end="23:54">"Expected int64 for %s but found %s\n"</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="25:5" pos:end="27:53">else if <condition pos:start="25:13" pos:end="25:44">(<expr pos:start="25:14" pos:end="25:43"><name pos:start="25:14" pos:end="25:17">type</name> <operator pos:start="25:19" pos:end="25:20">==</operator> <name pos:start="25:22" pos:end="25:28">OPT_INT</name> <operator pos:start="25:30" pos:end="25:31">&amp;&amp;</operator> <operator pos:start="25:33" pos:end="25:33">(</operator><name pos:start="25:34" pos:end="25:36">int</name><operator pos:start="25:37" pos:end="25:37">)</operator><name pos:start="25:38" pos:end="25:38">d</name> <operator pos:start="25:40" pos:end="25:41">!=</operator> <name pos:start="25:43" pos:end="25:43">d</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:53"><block_content pos:start="27:9" pos:end="27:53">

        <expr_stmt pos:start="27:9" pos:end="27:53"><expr pos:start="27:9" pos:end="27:52"><name pos:start="27:9" pos:end="27:13">error</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <literal type="string" pos:start="27:17" pos:end="27:52">"Expected int for %s but found %s\n"</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="29:5" pos:end="31:17">else<block type="pseudo" pos:start="31:9" pos:end="31:17"><block_content pos:start="31:9" pos:end="31:17">

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><name pos:start="31:16" pos:end="31:16">d</name></expr>;</return></block_content></block></else></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:65"><expr pos:start="33:5" pos:end="33:64"><call pos:start="33:5" pos:end="33:64"><name pos:start="33:5" pos:end="33:10">av_log</name><argument_list pos:start="33:11" pos:end="33:64">(<argument pos:start="33:12" pos:end="33:15"><expr pos:start="33:12" pos:end="33:15"><name pos:start="33:12" pos:end="33:15">NULL</name></expr></argument>, <argument pos:start="33:18" pos:end="33:29"><expr pos:start="33:18" pos:end="33:29"><name pos:start="33:18" pos:end="33:29">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="33:32" pos:end="33:36"><expr pos:start="33:32" pos:end="33:36"><name pos:start="33:32" pos:end="33:36">error</name></expr></argument>, <argument pos:start="33:39" pos:end="33:45"><expr pos:start="33:39" pos:end="33:45"><name pos:start="33:39" pos:end="33:45">context</name></expr></argument>, <argument pos:start="33:48" pos:end="33:53"><expr pos:start="33:48" pos:end="33:53"><name pos:start="33:48" pos:end="33:53">numstr</name></expr></argument>, <argument pos:start="33:56" pos:end="33:58"><expr pos:start="33:56" pos:end="33:58"><name pos:start="33:56" pos:end="33:58">min</name></expr></argument>, <argument pos:start="33:61" pos:end="33:63"><expr pos:start="33:61" pos:end="33:63"><name pos:start="33:61" pos:end="33:63">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:12"><expr pos:start="35:5" pos:end="35:11"><call pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:8">exit</name><argument_list pos:start="35:9" pos:end="35:11">(<argument pos:start="35:10" pos:end="35:10"><expr pos:start="35:10" pos:end="35:10"><literal type="number" pos:start="35:10" pos:end="35:10">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="37:5" pos:end="37:13">return <expr pos:start="37:12" pos:end="37:12"><literal type="number" pos:start="37:12" pos:end="37:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
