<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10054.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:56"><name pos:start="1:1" pos:end="1:9">MSA_ST_DF</name><argument_list pos:start="1:10" pos:end="1:56">(<argument pos:start="1:11" pos:end="1:17">DF_BYTE</argument>,   <argument pos:start="1:22" pos:end="1:22">b</argument>, <argument pos:start="1:25" pos:end="1:42">helper_ret_stb_mmu</argument>, <argument pos:start="1:45" pos:end="1:46">oi</argument>, <argument pos:start="1:49" pos:end="1:55">GETRA()</argument>)</argument_list></macro>

<macro pos:start="3:1" pos:end="3:56"><name pos:start="3:1" pos:end="3:9">MSA_ST_DF</name><argument_list pos:start="3:10" pos:end="3:56">(<argument pos:start="3:11" pos:end="3:17">DF_HALF</argument>,   <argument pos:start="3:22" pos:end="3:22">h</argument>, <argument pos:start="3:25" pos:end="3:42">helper_ret_stw_mmu</argument>, <argument pos:start="3:45" pos:end="3:46">oi</argument>, <argument pos:start="3:49" pos:end="3:55">GETRA()</argument>)</argument_list></macro>

<macro pos:start="5:1" pos:end="5:56"><name pos:start="5:1" pos:end="5:9">MSA_ST_DF</name><argument_list pos:start="5:10" pos:end="5:56">(<argument pos:start="5:11" pos:end="5:17">DF_WORD</argument>,   <argument pos:start="5:22" pos:end="5:22">w</argument>, <argument pos:start="5:25" pos:end="5:42">helper_ret_stl_mmu</argument>, <argument pos:start="5:45" pos:end="5:46">oi</argument>, <argument pos:start="5:49" pos:end="5:55">GETRA()</argument>)</argument_list></macro>

<macro pos:start="7:1" pos:end="10:0"><name pos:start="7:1" pos:end="7:9">MSA_ST_DF</name><argument_list pos:start="7:10" pos:end="10:0">(<argument pos:start="7:11" pos:end="7:19">DF_DOUBLE</argument>, <argument pos:start="7:22" pos:end="7:22">d</argument>, <argument pos:start="7:25" pos:end="7:42">helper_ret_stq_mmu</argument>, <argument pos:start="7:45" pos:end="7:46">oi</argument>, <argument pos:start="7:49" pos:end="7:55">GETRA()</argument>)</argument_list></macro>

<cpp:else pos:start="9:1" pos:end="9:5">#<cpp:directive pos:start="9:2" pos:end="9:5">else</cpp:directive></cpp:else>

<macro pos:start="11:1" pos:end="11:37"><name pos:start="11:1" pos:end="11:9">MSA_ST_DF</name><argument_list pos:start="11:10" pos:end="11:37">(<argument pos:start="11:11" pos:end="11:17">DF_BYTE</argument>,   <argument pos:start="11:22" pos:end="11:22">b</argument>, <argument pos:start="11:25" pos:end="11:36">cpu_stb_data</argument>)</argument_list></macro>

<macro pos:start="13:1" pos:end="13:37"><name pos:start="13:1" pos:end="13:9">MSA_ST_DF</name><argument_list pos:start="13:10" pos:end="13:37">(<argument pos:start="13:11" pos:end="13:17">DF_HALF</argument>,   <argument pos:start="13:22" pos:end="13:22">h</argument>, <argument pos:start="13:25" pos:end="13:36">cpu_stw_data</argument>)</argument_list></macro>

<macro pos:start="15:1" pos:end="15:37"><name pos:start="15:1" pos:end="15:9">MSA_ST_DF</name><argument_list pos:start="15:10" pos:end="15:37">(<argument pos:start="15:11" pos:end="15:17">DF_WORD</argument>,   <argument pos:start="15:22" pos:end="15:22">w</argument>, <argument pos:start="15:25" pos:end="15:36">cpu_stl_data</argument>)</argument_list></macro>

<macro pos:start="17:1" pos:end="20:0"><name pos:start="17:1" pos:end="17:9">MSA_ST_DF</name><argument_list pos:start="17:10" pos:end="20:0">(<argument pos:start="17:11" pos:end="17:19">DF_DOUBLE</argument>, <argument pos:start="17:22" pos:end="17:22">d</argument>, <argument pos:start="17:25" pos:end="17:36">cpu_stq_data</argument>)</argument_list></macro>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>



<function pos:start="23:1" pos:end="51:1"><type pos:start="23:1" pos:end="23:4"><name pos:start="23:1" pos:end="23:4">void</name></type> <name pos:start="23:6" pos:end="23:17">helper_cache</name><parameter_list pos:start="23:18" pos:end="23:68">(<parameter pos:start="23:19" pos:end="23:35"><decl pos:start="23:19" pos:end="23:35"><type pos:start="23:19" pos:end="23:35"><name pos:start="23:19" pos:end="23:30">CPUMIPSState</name> <modifier pos:start="23:32" pos:end="23:32">*</modifier></type><name pos:start="23:33" pos:end="23:35">env</name></decl></parameter>, <parameter pos:start="23:38" pos:end="23:54"><decl pos:start="23:38" pos:end="23:54"><type pos:start="23:38" pos:end="23:54"><name pos:start="23:38" pos:end="23:49">target_ulong</name></type> <name pos:start="23:51" pos:end="23:54">addr</name></decl></parameter>, <parameter pos:start="23:57" pos:end="23:67"><decl pos:start="23:57" pos:end="23:67"><type pos:start="23:57" pos:end="23:67"><name pos:start="23:57" pos:end="23:64">uint32_t</name></type> <name pos:start="23:66" pos:end="23:67">op</name></decl></parameter>)</parameter_list>

<block pos:start="25:1" pos:end="51:1">{<block_content pos:start="29:5" pos:end="50:0">

<cpp:ifndef pos:start="27:1" pos:end="27:24">#<cpp:directive pos:start="27:2" pos:end="27:7">ifndef</cpp:directive> <name pos:start="27:9" pos:end="27:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <decl_stmt pos:start="29:5" pos:end="29:43"><decl pos:start="29:5" pos:end="29:42"><type pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:16">target_ulong</name></type> <name pos:start="29:18" pos:end="29:22">index</name> <init pos:start="29:24" pos:end="29:42">= <expr pos:start="29:26" pos:end="29:42"><name pos:start="29:26" pos:end="29:29">addr</name> <operator pos:start="29:31" pos:end="29:31">&amp;</operator> <literal type="number" pos:start="29:33" pos:end="29:42">0x1fffffff</literal></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="31:5" pos:end="50:0"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:10">op</name> <operator pos:start="31:12" pos:end="31:13">==</operator> <literal type="number" pos:start="31:15" pos:end="31:15">9</literal></expr>)</condition> <block pos:start="31:18" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:64">

        <comment type="block" pos:start="33:9" pos:end="33:29">/* Index Store Tag */</comment>

        <expr_stmt pos:start="35:9" pos:end="37:64"><expr pos:start="35:9" pos:end="37:63"><call pos:start="35:9" pos:end="37:63"><name pos:start="35:9" pos:end="35:36">memory_region_dispatch_write</name><argument_list pos:start="35:37" pos:end="37:63">(<argument pos:start="35:38" pos:end="35:49"><expr pos:start="35:38" pos:end="35:49"><name pos:start="35:38" pos:end="35:49"><name pos:start="35:38" pos:end="35:40">env</name><operator pos:start="35:41" pos:end="35:42">-&gt;</operator><name pos:start="35:43" pos:end="35:49">itc_tag</name></name></expr></argument>, <argument pos:start="35:52" pos:end="35:56"><expr pos:start="35:52" pos:end="35:56"><name pos:start="35:52" pos:end="35:56">index</name></expr></argument>, <argument pos:start="35:59" pos:end="35:72"><expr pos:start="35:59" pos:end="35:72"><name pos:start="35:59" pos:end="35:72"><name pos:start="35:59" pos:end="35:61">env</name><operator pos:start="35:62" pos:end="35:63">-&gt;</operator><name pos:start="35:64" pos:end="35:72">CP0_TagLo</name></name></expr></argument>,

                                     <argument pos:start="37:38" pos:end="37:38"><expr pos:start="37:38" pos:end="37:38"><literal type="number" pos:start="37:38" pos:end="37:38">8</literal></expr></argument>, <argument pos:start="37:41" pos:end="37:62"><expr pos:start="37:41" pos:end="37:62"><name pos:start="37:41" pos:end="37:62">MEMTXATTRS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="39:7" pos:end="50:0">else if <condition pos:start="39:15" pos:end="39:23">(<expr pos:start="39:16" pos:end="39:22"><name pos:start="39:16" pos:end="39:17">op</name> <operator pos:start="39:19" pos:end="39:20">==</operator> <literal type="number" pos:start="39:22" pos:end="39:22">5</literal></expr>)</condition> <block pos:start="39:25" pos:end="50:0">{<block_content pos:start="43:9" pos:end="45:63">

        <comment type="block" pos:start="41:9" pos:end="41:28">/* Index Load Tag */</comment>

        <expr_stmt pos:start="43:9" pos:end="45:63"><expr pos:start="43:9" pos:end="45:62"><call pos:start="43:9" pos:end="45:62"><name pos:start="43:9" pos:end="43:35">memory_region_dispatch_read</name><argument_list pos:start="43:36" pos:end="45:62">(<argument pos:start="43:37" pos:end="43:48"><expr pos:start="43:37" pos:end="43:48"><name pos:start="43:37" pos:end="43:48"><name pos:start="43:37" pos:end="43:39">env</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:48">itc_tag</name></name></expr></argument>, <argument pos:start="43:51" pos:end="43:55"><expr pos:start="43:51" pos:end="43:55"><name pos:start="43:51" pos:end="43:55">index</name></expr></argument>, <argument pos:start="43:58" pos:end="43:72"><expr pos:start="43:58" pos:end="43:72"><operator pos:start="43:58" pos:end="43:58">&amp;</operator><name pos:start="43:59" pos:end="43:72"><name pos:start="43:59" pos:end="43:61">env</name><operator pos:start="43:62" pos:end="43:63">-&gt;</operator><name pos:start="43:64" pos:end="43:72">CP0_TagLo</name></name></expr></argument>,

                                    <argument pos:start="45:37" pos:end="45:37"><expr pos:start="45:37" pos:end="45:37"><literal type="number" pos:start="45:37" pos:end="45:37">8</literal></expr></argument>, <argument pos:start="45:40" pos:end="45:61"><expr pos:start="45:40" pos:end="45:61"><name pos:start="45:40" pos:end="45:61">MEMTXATTRS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
