<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20090.c" pos:tabs="8"><function pos:start="1:1" pos:end="389:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">ppc_prep_init</name> <parameter_list pos:start="1:27" pos:end="11:49">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:30">int</name></type> <name pos:start="1:32" pos:end="1:39">ram_size</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:57">vga_ram_size</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:50"><decl pos:start="3:28" pos:end="3:50"><type pos:start="3:28" pos:end="3:50"><specifier pos:start="3:28" pos:end="3:32">const</specifier> <name pos:start="3:34" pos:end="3:37">char</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:50">boot_device</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:68"><decl pos:start="3:53" pos:end="3:68"><type pos:start="3:53" pos:end="3:68"><name pos:start="3:53" pos:end="3:64">DisplayState</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:68">ds</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:54"><decl pos:start="5:28" pos:end="5:54"><type pos:start="5:28" pos:end="5:54"><specifier pos:start="5:28" pos:end="5:32">const</specifier> <name pos:start="5:34" pos:end="5:37">char</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:54">kernel_filename</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:53"><decl pos:start="7:28" pos:end="7:53"><type pos:start="7:28" pos:end="7:53"><specifier pos:start="7:28" pos:end="7:32">const</specifier> <name pos:start="7:34" pos:end="7:37">char</name> <modifier pos:start="7:39" pos:end="7:39">*</modifier></type><name pos:start="7:40" pos:end="7:53">kernel_cmdline</name></decl></parameter>,

                           <parameter pos:start="9:28" pos:end="9:54"><decl pos:start="9:28" pos:end="9:54"><type pos:start="9:28" pos:end="9:54"><specifier pos:start="9:28" pos:end="9:32">const</specifier> <name pos:start="9:34" pos:end="9:37">char</name> <modifier pos:start="9:39" pos:end="9:39">*</modifier></type><name pos:start="9:40" pos:end="9:54">initrd_filename</name></decl></parameter>,

                           <parameter pos:start="11:28" pos:end="11:48"><decl pos:start="11:28" pos:end="11:48"><type pos:start="11:28" pos:end="11:48"><specifier pos:start="11:28" pos:end="11:32">const</specifier> <name pos:start="11:34" pos:end="11:37">char</name> <modifier pos:start="11:39" pos:end="11:39">*</modifier></type><name pos:start="11:40" pos:end="11:48">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="389:1">{<block_content pos:start="15:5" pos:end="387:64">

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>, <decl pos:start="15:27" pos:end="15:41"><type ref="prev" pos:start="15:5" pos:end="15:14"><modifier pos:start="15:27" pos:end="15:27">*</modifier></type><name pos:start="15:28" pos:end="15:41"><name pos:start="15:28" pos:end="15:31">envs</name><index pos:start="15:32" pos:end="15:41">[<expr pos:start="15:33" pos:end="15:40"><name pos:start="15:33" pos:end="15:40">MAX_CPUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:18"><name pos:start="17:10" pos:end="17:12">buf</name><index pos:start="17:13" pos:end="17:18">[<expr pos:start="17:14" pos:end="17:17"><literal type="number" pos:start="17:14" pos:end="17:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">nvram_t</name></type> <name pos:start="19:13" pos:end="19:17">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">m48t59_t</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:20">m48t59</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:21">PPC_io_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:43"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">linux_boot</name></decl>, <decl pos:start="25:21" pos:end="25:21"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:21" pos:end="25:21">i</name></decl>, <decl pos:start="25:24" pos:end="25:31"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:24" pos:end="25:31">nb_nics1</name></decl>, <decl pos:start="25:34" pos:end="25:42"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:34" pos:end="25:42">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:30"><decl pos:start="27:5" pos:end="27:29"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:12">unsigned</name> <name pos:start="27:14" pos:end="27:17">long</name></type> <name pos:start="27:19" pos:end="27:29">bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:64"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint32_t</name></type> <name pos:start="29:14" pos:end="29:24">kernel_base</name></decl>, <decl pos:start="29:27" pos:end="29:37"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:27" pos:end="29:37">kernel_size</name></decl>, <decl pos:start="29:40" pos:end="29:50"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:40" pos:end="29:50">initrd_base</name></decl>, <decl pos:start="29:53" pos:end="29:63"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:53" pos:end="29:63">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:10">PCIBus</name> <modifier pos:start="31:12" pos:end="31:12">*</modifier></type><name pos:start="31:13" pos:end="31:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:20"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">qemu_irq</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:23">ppc_boot_device</name></decl>;</decl_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:46"><expr pos:start="39:5" pos:end="39:45"><name pos:start="39:5" pos:end="39:11">sysctrl</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:45"><name pos:start="39:15" pos:end="39:26">qemu_mallocz</name><argument_list pos:start="39:27" pos:end="39:45">(<argument pos:start="39:28" pos:end="39:44"><expr pos:start="39:28" pos:end="39:44"><sizeof pos:start="39:28" pos:end="39:44">sizeof<argument_list pos:start="39:34" pos:end="39:44">(<argument pos:start="39:35" pos:end="39:43"><expr pos:start="39:35" pos:end="39:43"><name pos:start="39:35" pos:end="39:43">sysctrl_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="43:15"><if pos:start="41:5" pos:end="43:15">if <condition pos:start="41:8" pos:end="41:24">(<expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:15">sysctrl</name> <operator pos:start="41:17" pos:end="41:18">==</operator> <name pos:start="41:20" pos:end="41:23">NULL</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:15"><block_content pos:start="43:9" pos:end="43:15">

        <return pos:start="43:9" pos:end="43:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:14">linux_boot</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:33">kernel_filename</name> <operator pos:start="47:35" pos:end="47:36">!=</operator> <name pos:start="47:38" pos:end="47:41">NULL</name><operator pos:start="47:42" pos:end="47:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:19">/* init CPUs */</comment>

    <if_stmt pos:start="53:5" pos:end="55:30"><if pos:start="53:5" pos:end="55:30">if <condition pos:start="53:8" pos:end="53:26">(<expr pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:17">cpu_model</name> <operator pos:start="53:19" pos:end="53:20">==</operator> <name pos:start="53:22" pos:end="53:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:30"><block_content pos:start="55:9" pos:end="55:30">

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:17">cpu_model</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <literal type="string" pos:start="55:21" pos:end="55:29">"default"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="57:5" pos:end="79:5">for <control pos:start="57:9" pos:end="57:34">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:29"><expr pos:start="57:17" pos:end="57:28"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:28">smp_cpus</name></expr>;</condition> <incr pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:31">i</name><operator pos:start="57:32" pos:end="57:33">++</operator></expr></incr>)</control> <block pos:start="57:36" pos:end="79:5">{<block_content pos:start="59:9" pos:end="77:22">

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:11">env</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:33"><name pos:start="59:15" pos:end="59:22">cpu_init</name><argument_list pos:start="59:23" pos:end="59:33">(<argument pos:start="59:24" pos:end="59:32"><expr pos:start="59:24" pos:end="59:32"><name pos:start="59:24" pos:end="59:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:17">(<expr pos:start="61:13" pos:end="61:16"><operator pos:start="61:13" pos:end="61:13">!</operator><name pos:start="61:14" pos:end="61:16">env</name></expr>)</condition> <block pos:start="61:19" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:20">

            <expr_stmt pos:start="63:13" pos:end="63:71"><expr pos:start="63:13" pos:end="63:70"><call pos:start="63:13" pos:end="63:70"><name pos:start="63:13" pos:end="63:19">fprintf</name><argument_list pos:start="63:20" pos:end="63:70">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">stderr</name></expr></argument>, <argument pos:start="63:29" pos:end="63:69"><expr pos:start="63:29" pos:end="63:69"><literal type="string" pos:start="63:29" pos:end="63:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:20"><expr pos:start="65:13" pos:end="65:19"><call pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:16">exit</name><argument_list pos:start="65:17" pos:end="65:19">(<argument pos:start="65:18" pos:end="65:18"><expr pos:start="65:18" pos:end="65:18"><literal type="number" pos:start="65:18" pos:end="65:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="69:9" pos:end="69:48">/* Set time-base frequency to 100 Mhz */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:54"><expr pos:start="71:9" pos:end="71:53"><call pos:start="71:9" pos:end="71:53"><name pos:start="71:9" pos:end="71:23">cpu_ppc_tb_init</name><argument_list pos:start="71:24" pos:end="71:53">(<argument pos:start="71:25" pos:end="71:27"><expr pos:start="71:25" pos:end="71:27"><name pos:start="71:25" pos:end="71:27">env</name></expr></argument>, <argument pos:start="71:30" pos:end="71:52"><expr pos:start="71:30" pos:end="71:52"><literal type="number" pos:start="71:30" pos:end="71:34">100UL</literal> <operator pos:start="71:36" pos:end="71:36">*</operator> <literal type="number" pos:start="71:38" pos:end="71:43">1000UL</literal> <operator pos:start="71:45" pos:end="71:45">*</operator> <literal type="number" pos:start="71:47" pos:end="71:52">1000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:49"><expr pos:start="73:9" pos:end="73:48"><call pos:start="73:9" pos:end="73:48"><name pos:start="73:9" pos:end="73:27">qemu_register_reset</name><argument_list pos:start="73:28" pos:end="73:48">(<argument pos:start="73:29" pos:end="73:42"><expr pos:start="73:29" pos:end="73:42"><operator pos:start="73:29" pos:end="73:29">&amp;</operator><name pos:start="73:30" pos:end="73:42">cpu_ppc_reset</name></expr></argument>, <argument pos:start="73:45" pos:end="73:47"><expr pos:start="73:45" pos:end="73:47"><name pos:start="73:45" pos:end="73:47">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:62"><expr pos:start="75:9" pos:end="75:61"><call pos:start="75:9" pos:end="75:61"><name pos:start="75:9" pos:end="75:23">register_savevm</name><argument_list pos:start="75:24" pos:end="75:61">(<argument pos:start="75:25" pos:end="75:29"><expr pos:start="75:25" pos:end="75:29"><literal type="string" pos:start="75:25" pos:end="75:29">"cpu"</literal></expr></argument>, <argument pos:start="75:32" pos:end="75:32"><expr pos:start="75:32" pos:end="75:32"><literal type="number" pos:start="75:32" pos:end="75:32">0</literal></expr></argument>, <argument pos:start="75:35" pos:end="75:35"><expr pos:start="75:35" pos:end="75:35"><literal type="number" pos:start="75:35" pos:end="75:35">3</literal></expr></argument>, <argument pos:start="75:38" pos:end="75:45"><expr pos:start="75:38" pos:end="75:45"><name pos:start="75:38" pos:end="75:45">cpu_save</name></expr></argument>, <argument pos:start="75:48" pos:end="75:55"><expr pos:start="75:48" pos:end="75:55"><name pos:start="75:48" pos:end="75:55">cpu_load</name></expr></argument>, <argument pos:start="75:58" pos:end="75:60"><expr pos:start="75:58" pos:end="75:60"><name pos:start="75:58" pos:end="75:60">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:22"><expr pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:12">envs</name><index pos:start="77:13" pos:end="77:15">[<expr pos:start="77:14" pos:end="77:14"><name pos:start="77:14" pos:end="77:14">i</name></expr>]</index></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:21">env</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="83:5" pos:end="83:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:58"><expr pos:start="85:5" pos:end="85:57"><call pos:start="85:5" pos:end="85:57"><name pos:start="85:5" pos:end="85:32">cpu_register_physical_memory</name><argument_list pos:start="85:33" pos:end="85:57">(<argument pos:start="85:34" pos:end="85:34"><expr pos:start="85:34" pos:end="85:34"><literal type="number" pos:start="85:34" pos:end="85:34">0</literal></expr></argument>, <argument pos:start="85:37" pos:end="85:44"><expr pos:start="85:37" pos:end="85:44"><name pos:start="85:37" pos:end="85:44">ram_size</name></expr></argument>, <argument pos:start="85:47" pos:end="85:56"><expr pos:start="85:47" pos:end="85:56"><name pos:start="85:47" pos:end="85:56">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:42"><expr pos:start="91:5" pos:end="91:41"><name pos:start="91:5" pos:end="91:15">bios_offset</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <name pos:start="91:19" pos:end="91:26">ram_size</name> <operator pos:start="91:28" pos:end="91:28">+</operator> <name pos:start="91:30" pos:end="91:41">vga_ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="95:34"><if pos:start="93:5" pos:end="95:34">if <condition pos:start="93:8" pos:end="93:26">(<expr pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:17">bios_name</name> <operator pos:start="93:19" pos:end="93:20">==</operator> <name pos:start="93:22" pos:end="93:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:34"><block_content pos:start="95:9" pos:end="95:34">

        <expr_stmt pos:start="95:9" pos:end="95:34"><expr pos:start="95:9" pos:end="95:33"><name pos:start="95:9" pos:end="95:17">bios_name</name> <operator pos:start="95:19" pos:end="95:19">=</operator> <name pos:start="95:21" pos:end="95:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:61"><expr pos:start="97:5" pos:end="97:60"><call pos:start="97:5" pos:end="97:60"><name pos:start="97:5" pos:end="97:12">snprintf</name><argument_list pos:start="97:13" pos:end="97:60">(<argument pos:start="97:14" pos:end="97:16"><expr pos:start="97:14" pos:end="97:16"><name pos:start="97:14" pos:end="97:16">buf</name></expr></argument>, <argument pos:start="97:19" pos:end="97:29"><expr pos:start="97:19" pos:end="97:29"><sizeof pos:start="97:19" pos:end="97:29">sizeof<argument_list pos:start="97:25" pos:end="97:29">(<argument pos:start="97:26" pos:end="97:28"><expr pos:start="97:26" pos:end="97:28"><name pos:start="97:26" pos:end="97:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="97:32" pos:end="97:38"><expr pos:start="97:32" pos:end="97:38"><literal type="string" pos:start="97:32" pos:end="97:38">"%s/%s"</literal></expr></argument>, <argument pos:start="97:41" pos:end="97:48"><expr pos:start="97:41" pos:end="97:48"><name pos:start="97:41" pos:end="97:48">bios_dir</name></expr></argument>, <argument pos:start="97:51" pos:end="97:59"><expr pos:start="97:51" pos:end="97:59"><name pos:start="97:51" pos:end="97:59">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:61"><expr pos:start="99:5" pos:end="99:60"><name pos:start="99:5" pos:end="99:13">bios_size</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <call pos:start="99:17" pos:end="99:60"><name pos:start="99:17" pos:end="99:26">load_image</name><argument_list pos:start="99:27" pos:end="99:60">(<argument pos:start="99:28" pos:end="99:30"><expr pos:start="99:28" pos:end="99:30"><name pos:start="99:28" pos:end="99:30">buf</name></expr></argument>, <argument pos:start="99:33" pos:end="99:59"><expr pos:start="99:33" pos:end="99:59"><name pos:start="99:33" pos:end="99:45">phys_ram_base</name> <operator pos:start="99:47" pos:end="99:47">+</operator> <name pos:start="99:49" pos:end="99:59">bios_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:47">(<expr pos:start="101:9" pos:end="101:46"><name pos:start="101:9" pos:end="101:36"><name pos:start="101:9" pos:end="101:17">bios_size</name> <argument_list type="generic" pos:start="101:19" pos:end="101:36">&lt; <argument pos:start="101:21" pos:end="101:34"><expr pos:start="101:21" pos:end="101:34"><literal type="number" pos:start="101:21" pos:end="101:21">0</literal> <operator pos:start="101:23" pos:end="101:24">||</operator> <name pos:start="101:26" pos:end="101:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="101:38" pos:end="101:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="101:49" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:16">

        <expr_stmt pos:start="103:9" pos:end="103:73"><expr pos:start="103:9" pos:end="103:72"><call pos:start="103:9" pos:end="103:72"><name pos:start="103:9" pos:end="103:17">cpu_abort</name><argument_list pos:start="103:18" pos:end="103:72">(<argument pos:start="103:19" pos:end="103:21"><expr pos:start="103:19" pos:end="103:21"><name pos:start="103:19" pos:end="103:21">env</name></expr></argument>, <argument pos:start="103:24" pos:end="103:66"><expr pos:start="103:24" pos:end="103:66"><literal type="string" pos:start="103:24" pos:end="103:66">"qemu: could not load PPC PREP bios '%s'\n"</literal></expr></argument>, <argument pos:start="103:69" pos:end="103:71"><expr pos:start="103:69" pos:end="103:71"><name pos:start="103:69" pos:end="103:71">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:16"><expr pos:start="105:9" pos:end="105:15"><call pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:12">exit</name><argument_list pos:start="105:13" pos:end="105:15">(<argument pos:start="105:14" pos:end="105:14"><expr pos:start="105:14" pos:end="105:14"><literal type="number" pos:start="105:14" pos:end="105:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:56">(<expr pos:start="109:9" pos:end="109:55"><name pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:11">env</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:16">nip</name></name> <operator pos:start="109:18" pos:end="109:18">&lt;</operator> <literal type="number" pos:start="109:20" pos:end="109:29">0xFFF80000</literal> <operator pos:start="109:31" pos:end="109:32">&amp;&amp;</operator> <name pos:start="109:34" pos:end="109:42">bios_size</name> <operator pos:start="109:44" pos:end="109:44">&lt;</operator> <literal type="number" pos:start="109:46" pos:end="109:55">0x00100000</literal></expr>)</condition> <block pos:start="109:58" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:68">

        <expr_stmt pos:start="111:9" pos:end="111:68"><expr pos:start="111:9" pos:end="111:67"><call pos:start="111:9" pos:end="111:67"><name pos:start="111:9" pos:end="111:17">cpu_abort</name><argument_list pos:start="111:18" pos:end="111:67">(<argument pos:start="111:19" pos:end="111:21"><expr pos:start="111:19" pos:end="111:21"><name pos:start="111:19" pos:end="111:21">env</name></expr></argument>, <argument pos:start="111:24" pos:end="111:66"><expr pos:start="111:24" pos:end="111:66"><literal type="string" pos:start="111:24" pos:end="111:66">"PowerPC 601 / 620 / 970 need a 1MB BIOS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:45"><expr pos:start="115:5" pos:end="115:44"><name pos:start="115:5" pos:end="115:13">bios_size</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <operator pos:start="115:17" pos:end="115:17">(</operator><name pos:start="115:18" pos:end="115:26">bios_size</name> <operator pos:start="115:28" pos:end="115:28">+</operator> <literal type="number" pos:start="115:30" pos:end="115:34">0xfff</literal><operator pos:start="115:35" pos:end="115:35">)</operator> <operator pos:start="115:37" pos:end="115:37">&amp;</operator> <operator pos:start="115:39" pos:end="115:39">~</operator><literal type="number" pos:start="115:40" pos:end="115:44">0xfff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="119:70"><expr pos:start="117:5" pos:end="119:69"><call pos:start="117:5" pos:end="119:69"><name pos:start="117:5" pos:end="117:32">cpu_register_physical_memory</name><argument_list pos:start="117:33" pos:end="119:69">(<argument pos:start="117:34" pos:end="117:55"><expr pos:start="117:34" pos:end="117:55"><operator pos:start="117:34" pos:end="117:34">(</operator><name pos:start="117:35" pos:end="117:42">uint32_t</name><operator pos:start="117:43" pos:end="117:43">)</operator><operator pos:start="117:44" pos:end="117:44">(</operator><operator pos:start="117:45" pos:end="117:45">-</operator><name pos:start="117:46" pos:end="117:54">bios_size</name><operator pos:start="117:55" pos:end="117:55">)</operator></expr></argument>,

                                 <argument pos:start="119:34" pos:end="119:42"><expr pos:start="119:34" pos:end="119:42"><name pos:start="119:34" pos:end="119:42">bios_size</name></expr></argument>, <argument pos:start="119:45" pos:end="119:68"><expr pos:start="119:45" pos:end="119:68"><name pos:start="119:45" pos:end="119:55">bios_offset</name> <operator pos:start="119:57" pos:end="119:57">|</operator> <name pos:start="119:59" pos:end="119:68">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="205:5"><if pos:start="123:5" pos:end="171:5">if <condition pos:start="123:8" pos:end="123:19">(<expr pos:start="123:9" pos:end="123:18"><name pos:start="123:9" pos:end="123:18">linux_boot</name></expr>)</condition> <block pos:start="123:21" pos:end="171:5">{<block_content pos:start="125:9" pos:end="169:30">

        <expr_stmt pos:start="125:9" pos:end="125:39"><expr pos:start="125:9" pos:end="125:38"><name pos:start="125:9" pos:end="125:19">kernel_base</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <name pos:start="125:23" pos:end="125:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="127:9" pos:end="127:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:79"><expr pos:start="129:9" pos:end="129:78"><name pos:start="129:9" pos:end="129:19">kernel_size</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <call pos:start="129:23" pos:end="129:78"><name pos:start="129:23" pos:end="129:32">load_image</name><argument_list pos:start="129:33" pos:end="129:78">(<argument pos:start="129:34" pos:end="129:48"><expr pos:start="129:34" pos:end="129:48"><name pos:start="129:34" pos:end="129:48">kernel_filename</name></expr></argument>, <argument pos:start="129:51" pos:end="129:77"><expr pos:start="129:51" pos:end="129:77"><name pos:start="129:51" pos:end="129:63">phys_ram_base</name> <operator pos:start="129:65" pos:end="129:65">+</operator> <name pos:start="129:67" pos:end="129:77">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="139:9"><if pos:start="131:9" pos:end="139:9">if <condition pos:start="131:12" pos:end="131:28">(<expr pos:start="131:13" pos:end="131:27"><name pos:start="131:13" pos:end="131:23">kernel_size</name> <operator pos:start="131:25" pos:end="131:25">&lt;</operator> <literal type="number" pos:start="131:27" pos:end="131:27">0</literal></expr>)</condition> <block pos:start="131:30" pos:end="139:9">{<block_content pos:start="133:13" pos:end="137:20">

            <expr_stmt pos:start="133:13" pos:end="135:39"><expr pos:start="133:13" pos:end="135:38"><call pos:start="133:13" pos:end="135:38"><name pos:start="133:13" pos:end="133:21">cpu_abort</name><argument_list pos:start="133:22" pos:end="135:38">(<argument pos:start="133:23" pos:end="133:25"><expr pos:start="133:23" pos:end="133:25"><name pos:start="133:23" pos:end="133:25">env</name></expr></argument>, <argument pos:start="133:28" pos:end="133:63"><expr pos:start="133:28" pos:end="133:63"><literal type="string" pos:start="133:28" pos:end="133:63">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                      <argument pos:start="135:23" pos:end="135:37"><expr pos:start="135:23" pos:end="135:37"><name pos:start="135:23" pos:end="135:37">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:20"><expr pos:start="137:13" pos:end="137:19"><call pos:start="137:13" pos:end="137:19"><name pos:start="137:13" pos:end="137:16">exit</name><argument_list pos:start="137:17" pos:end="137:19">(<argument pos:start="137:18" pos:end="137:18"><expr pos:start="137:18" pos:end="137:18"><literal type="number" pos:start="137:18" pos:end="137:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="141:9" pos:end="141:25">/* load initrd */</comment>

        <if_stmt pos:start="143:9" pos:end="167:9"><if pos:start="143:9" pos:end="161:9">if <condition pos:start="143:12" pos:end="143:28">(<expr pos:start="143:13" pos:end="143:27"><name pos:start="143:13" pos:end="143:27">initrd_filename</name></expr>)</condition> <block pos:start="143:30" pos:end="161:9">{<block_content pos:start="145:13" pos:end="159:13">

            <expr_stmt pos:start="145:13" pos:end="145:43"><expr pos:start="145:13" pos:end="145:42"><name pos:start="145:13" pos:end="145:23">initrd_base</name> <operator pos:start="145:25" pos:end="145:25">=</operator> <name pos:start="145:27" pos:end="145:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="149:66"><expr pos:start="147:13" pos:end="149:65"><name pos:start="147:13" pos:end="147:23">initrd_size</name> <operator pos:start="147:25" pos:end="147:25">=</operator> <call pos:start="147:27" pos:end="149:65"><name pos:start="147:27" pos:end="147:36">load_image</name><argument_list pos:start="147:37" pos:end="149:65">(<argument pos:start="147:38" pos:end="147:52"><expr pos:start="147:38" pos:end="147:52"><name pos:start="147:38" pos:end="147:52">initrd_filename</name></expr></argument>,

                                     <argument pos:start="149:38" pos:end="149:64"><expr pos:start="149:38" pos:end="149:64"><name pos:start="149:38" pos:end="149:50">phys_ram_base</name> <operator pos:start="149:52" pos:end="149:52">+</operator> <name pos:start="149:54" pos:end="149:64">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="151:13" pos:end="159:13"><if pos:start="151:13" pos:end="159:13">if <condition pos:start="151:16" pos:end="151:32">(<expr pos:start="151:17" pos:end="151:31"><name pos:start="151:17" pos:end="151:27">initrd_size</name> <operator pos:start="151:29" pos:end="151:29">&lt;</operator> <literal type="number" pos:start="151:31" pos:end="151:31">0</literal></expr>)</condition> <block pos:start="151:34" pos:end="159:13">{<block_content pos:start="153:17" pos:end="157:24">

                <expr_stmt pos:start="153:17" pos:end="155:43"><expr pos:start="153:17" pos:end="155:42"><call pos:start="153:17" pos:end="155:42"><name pos:start="153:17" pos:end="153:25">cpu_abort</name><argument_list pos:start="153:26" pos:end="155:42">(<argument pos:start="153:27" pos:end="153:29"><expr pos:start="153:27" pos:end="153:29"><name pos:start="153:27" pos:end="153:29">env</name></expr></argument>, <argument pos:start="153:32" pos:end="153:77"><expr pos:start="153:32" pos:end="153:77"><literal type="string" pos:start="153:32" pos:end="153:77">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                          <argument pos:start="155:27" pos:end="155:41"><expr pos:start="155:27" pos:end="155:41"><name pos:start="155:27" pos:end="155:41">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:24"><expr pos:start="157:17" pos:end="157:23"><call pos:start="157:17" pos:end="157:23"><name pos:start="157:17" pos:end="157:20">exit</name><argument_list pos:start="157:21" pos:end="157:23">(<argument pos:start="157:22" pos:end="157:22"><expr pos:start="157:22" pos:end="157:22"><literal type="number" pos:start="157:22" pos:end="157:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="161:11" pos:end="167:9">else <block pos:start="161:16" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:28">

            <expr_stmt pos:start="163:13" pos:end="163:28"><expr pos:start="163:13" pos:end="163:27"><name pos:start="163:13" pos:end="163:23">initrd_base</name> <operator pos:start="163:25" pos:end="163:25">=</operator> <literal type="number" pos:start="163:27" pos:end="163:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:28"><expr pos:start="165:13" pos:end="165:27"><name pos:start="165:13" pos:end="165:23">initrd_size</name> <operator pos:start="165:25" pos:end="165:25">=</operator> <literal type="number" pos:start="165:27" pos:end="165:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:30"><expr pos:start="169:9" pos:end="169:29"><name pos:start="169:9" pos:end="169:23">ppc_boot_device</name> <operator pos:start="169:25" pos:end="169:25">=</operator> <literal type="char" pos:start="169:27" pos:end="169:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="171:7" pos:end="205:5">else <block pos:start="171:12" pos:end="205:5">{<block_content pos:start="173:9" pos:end="203:9">

        <expr_stmt pos:start="173:9" pos:end="173:24"><expr pos:start="173:9" pos:end="173:23"><name pos:start="173:9" pos:end="173:19">kernel_base</name> <operator pos:start="173:21" pos:end="173:21">=</operator> <literal type="number" pos:start="173:23" pos:end="173:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:24"><expr pos:start="175:9" pos:end="175:23"><name pos:start="175:9" pos:end="175:19">kernel_size</name> <operator pos:start="175:21" pos:end="175:21">=</operator> <literal type="number" pos:start="175:23" pos:end="175:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:24"><expr pos:start="177:9" pos:end="177:23"><name pos:start="177:9" pos:end="177:19">initrd_base</name> <operator pos:start="177:21" pos:end="177:21">=</operator> <literal type="number" pos:start="177:23" pos:end="177:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:24"><expr pos:start="179:9" pos:end="179:23"><name pos:start="179:9" pos:end="179:19">initrd_size</name> <operator pos:start="179:21" pos:end="179:21">=</operator> <literal type="number" pos:start="179:23" pos:end="179:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:31"><expr pos:start="181:9" pos:end="181:30"><name pos:start="181:9" pos:end="181:23">ppc_boot_device</name> <operator pos:start="181:25" pos:end="181:25">=</operator> <literal type="char" pos:start="181:27" pos:end="181:30">'\0'</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="183:9" pos:end="183:56">/* For now, OHW cannot boot from the network. */</comment>

        <for pos:start="185:9" pos:end="195:9">for <control pos:start="185:13" pos:end="185:48">(<init pos:start="185:14" pos:end="185:19"><expr pos:start="185:14" pos:end="185:18"><name pos:start="185:14" pos:end="185:14">i</name> <operator pos:start="185:16" pos:end="185:16">=</operator> <literal type="number" pos:start="185:18" pos:end="185:18">0</literal></expr>;</init> <condition pos:start="185:21" pos:end="185:43"><expr pos:start="185:21" pos:end="185:42"><name pos:start="185:21" pos:end="185:34"><name pos:start="185:21" pos:end="185:31">boot_device</name><index pos:start="185:32" pos:end="185:34">[<expr pos:start="185:33" pos:end="185:33"><name pos:start="185:33" pos:end="185:33">i</name></expr>]</index></name> <operator pos:start="185:36" pos:end="185:37">!=</operator> <literal type="char" pos:start="185:39" pos:end="185:42">'\0'</literal></expr>;</condition> <incr pos:start="185:45" pos:end="185:47"><expr pos:start="185:45" pos:end="185:47"><name pos:start="185:45" pos:end="185:45">i</name><operator pos:start="185:46" pos:end="185:47">++</operator></expr></incr>)</control> <block pos:start="185:50" pos:end="195:9">{<block_content pos:start="187:13" pos:end="193:13">

            <if_stmt pos:start="187:13" pos:end="193:13"><if pos:start="187:13" pos:end="193:13">if <condition pos:start="187:16" pos:end="187:63">(<expr pos:start="187:17" pos:end="187:62"><name pos:start="187:17" pos:end="187:30"><name pos:start="187:17" pos:end="187:27">boot_device</name><index pos:start="187:28" pos:end="187:30">[<expr pos:start="187:29" pos:end="187:29"><name pos:start="187:29" pos:end="187:29">i</name></expr>]</index></name> <operator pos:start="187:32" pos:end="187:33">&gt;=</operator> <literal type="char" pos:start="187:35" pos:end="187:37">'a'</literal> <operator pos:start="187:39" pos:end="187:40">&amp;&amp;</operator> <name pos:start="187:42" pos:end="187:55"><name pos:start="187:42" pos:end="187:52">boot_device</name><index pos:start="187:53" pos:end="187:55">[<expr pos:start="187:54" pos:end="187:54"><name pos:start="187:54" pos:end="187:54">i</name></expr>]</index></name> <operator pos:start="187:57" pos:end="187:58">&lt;=</operator> <literal type="char" pos:start="187:60" pos:end="187:62">'f'</literal></expr>)</condition> <block pos:start="187:65" pos:end="193:13">{<block_content pos:start="189:17" pos:end="191:22">

                <expr_stmt pos:start="189:17" pos:end="189:49"><expr pos:start="189:17" pos:end="189:48"><name pos:start="189:17" pos:end="189:31">ppc_boot_device</name> <operator pos:start="189:33" pos:end="189:33">=</operator> <name pos:start="189:35" pos:end="189:48"><name pos:start="189:35" pos:end="189:45">boot_device</name><index pos:start="189:46" pos:end="189:48">[<expr pos:start="189:47" pos:end="189:47"><name pos:start="189:47" pos:end="189:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="191:17" pos:end="191:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="197:9" pos:end="203:9"><if pos:start="197:9" pos:end="203:9">if <condition pos:start="197:12" pos:end="197:36">(<expr pos:start="197:13" pos:end="197:35"><name pos:start="197:13" pos:end="197:27">ppc_boot_device</name> <operator pos:start="197:29" pos:end="197:30">==</operator> <literal type="char" pos:start="197:32" pos:end="197:35">'\0'</literal></expr>)</condition> <block pos:start="197:38" pos:end="203:9">{<block_content pos:start="199:13" pos:end="201:20">

            <expr_stmt pos:start="199:13" pos:end="199:72"><expr pos:start="199:13" pos:end="199:71"><call pos:start="199:13" pos:end="199:71"><name pos:start="199:13" pos:end="199:19">fprintf</name><argument_list pos:start="199:20" pos:end="199:71">(<argument pos:start="199:21" pos:end="199:26"><expr pos:start="199:21" pos:end="199:26"><name pos:start="199:21" pos:end="199:26">stderr</name></expr></argument>, <argument pos:start="199:29" pos:end="199:70"><expr pos:start="199:29" pos:end="199:70"><literal type="string" pos:start="199:29" pos:end="199:70">"No valid boot device for Mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:20"><expr pos:start="201:13" pos:end="201:19"><call pos:start="201:13" pos:end="201:19"><name pos:start="201:13" pos:end="201:16">exit</name><argument_list pos:start="201:17" pos:end="201:19">(<argument pos:start="201:18" pos:end="201:18"><expr pos:start="201:18" pos:end="201:18"><literal type="number" pos:start="201:18" pos:end="201:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:30"><expr pos:start="209:5" pos:end="209:29"><name pos:start="209:5" pos:end="209:16">isa_mem_base</name> <operator pos:start="209:18" pos:end="209:18">=</operator> <literal type="number" pos:start="209:20" pos:end="209:29">0xc0000000</literal></expr>;</expr_stmt>

    <if_stmt pos:start="211:5" pos:end="217:5"><if pos:start="211:5" pos:end="217:5">if <condition pos:start="211:8" pos:end="211:46">(<expr pos:start="211:9" pos:end="211:45"><call pos:start="211:9" pos:end="211:22"><name pos:start="211:9" pos:end="211:17">PPC_INPUT</name><argument_list pos:start="211:18" pos:end="211:22">(<argument pos:start="211:19" pos:end="211:21"><expr pos:start="211:19" pos:end="211:21"><name pos:start="211:19" pos:end="211:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="211:24" pos:end="211:25">!=</operator> <name pos:start="211:27" pos:end="211:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="211:48" pos:end="217:5">{<block_content pos:start="213:9" pos:end="215:16">

        <expr_stmt pos:start="213:9" pos:end="213:70"><expr pos:start="213:9" pos:end="213:69"><call pos:start="213:9" pos:end="213:69"><name pos:start="213:9" pos:end="213:17">cpu_abort</name><argument_list pos:start="213:18" pos:end="213:69">(<argument pos:start="213:19" pos:end="213:21"><expr pos:start="213:19" pos:end="213:21"><name pos:start="213:19" pos:end="213:21">env</name></expr></argument>, <argument pos:start="213:24" pos:end="213:68"><expr pos:start="213:24" pos:end="213:68"><literal type="string" pos:start="213:24" pos:end="213:68">"Only 6xx bus is supported on PREP machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:16"><expr pos:start="215:9" pos:end="215:15"><call pos:start="215:9" pos:end="215:15"><name pos:start="215:9" pos:end="215:12">exit</name><argument_list pos:start="215:13" pos:end="215:15">(<argument pos:start="215:14" pos:end="215:14"><expr pos:start="215:14" pos:end="215:14"><literal type="number" pos:start="215:14" pos:end="215:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:64"><expr pos:start="219:5" pos:end="219:63"><name pos:start="219:5" pos:end="219:9">i8259</name> <operator pos:start="219:11" pos:end="219:11">=</operator> <call pos:start="219:13" pos:end="219:63"><name pos:start="219:13" pos:end="219:22">i8259_init</name><argument_list pos:start="219:23" pos:end="219:63">(<argument pos:start="219:24" pos:end="219:62"><expr pos:start="219:24" pos:end="219:62"><name pos:start="219:24" pos:end="219:62"><name pos:start="219:24" pos:end="219:32">first_cpu</name><operator pos:start="219:33" pos:end="219:34">-&gt;</operator><name pos:start="219:35" pos:end="219:44">irq_inputs</name><index pos:start="219:45" pos:end="219:62">[<expr pos:start="219:46" pos:end="219:61"><name pos:start="219:46" pos:end="219:61">PPC6xx_INPUT_INT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:35"><expr pos:start="221:5" pos:end="221:34"><name pos:start="221:5" pos:end="221:11">pci_bus</name> <operator pos:start="221:13" pos:end="221:13">=</operator> <call pos:start="221:15" pos:end="221:34"><name pos:start="221:15" pos:end="221:27">pci_prep_init</name><argument_list pos:start="221:28" pos:end="221:34">(<argument pos:start="221:29" pos:end="221:33"><expr pos:start="221:29" pos:end="221:33"><name pos:start="221:29" pos:end="221:33">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="223:5" pos:end="223:34">//    pci_bus = i440fx_init();</comment>

    <comment type="block" pos:start="225:5" pos:end="225:71">/* Register 8 MB of ISA IO space (needed for non-contiguous map) */</comment>

    <expr_stmt pos:start="227:5" pos:end="229:71"><expr pos:start="227:5" pos:end="229:70"><name pos:start="227:5" pos:end="227:17">PPC_io_memory</name> <operator pos:start="227:19" pos:end="227:19">=</operator> <call pos:start="227:21" pos:end="229:70"><name pos:start="227:21" pos:end="227:42">cpu_register_io_memory</name><argument_list pos:start="227:43" pos:end="229:70">(<argument pos:start="227:44" pos:end="227:44"><expr pos:start="227:44" pos:end="227:44"><literal type="number" pos:start="227:44" pos:end="227:44">0</literal></expr></argument>, <argument pos:start="227:47" pos:end="227:62"><expr pos:start="227:47" pos:end="227:62"><name pos:start="227:47" pos:end="227:62">PPC_prep_io_read</name></expr></argument>,

                                           <argument pos:start="229:44" pos:end="229:60"><expr pos:start="229:44" pos:end="229:60"><name pos:start="229:44" pos:end="229:60">PPC_prep_io_write</name></expr></argument>, <argument pos:start="229:63" pos:end="229:69"><expr pos:start="229:63" pos:end="229:69"><name pos:start="229:63" pos:end="229:69">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:72"><expr pos:start="231:5" pos:end="231:71"><call pos:start="231:5" pos:end="231:71"><name pos:start="231:5" pos:end="231:32">cpu_register_physical_memory</name><argument_list pos:start="231:33" pos:end="231:71">(<argument pos:start="231:34" pos:end="231:43"><expr pos:start="231:34" pos:end="231:43"><literal type="number" pos:start="231:34" pos:end="231:43">0x80000000</literal></expr></argument>, <argument pos:start="231:46" pos:end="231:55"><expr pos:start="231:46" pos:end="231:55"><literal type="number" pos:start="231:46" pos:end="231:55">0x00800000</literal></expr></argument>, <argument pos:start="231:58" pos:end="231:70"><expr pos:start="231:58" pos:end="231:70"><name pos:start="231:58" pos:end="231:70">PPC_io_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="235:5" pos:end="235:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="237:5" pos:end="239:37"><expr pos:start="237:5" pos:end="239:36"><call pos:start="237:5" pos:end="239:36"><name pos:start="237:5" pos:end="237:16">pci_vga_init</name><argument_list pos:start="237:17" pos:end="239:36">(<argument pos:start="237:18" pos:end="237:24"><expr pos:start="237:18" pos:end="237:24"><name pos:start="237:18" pos:end="237:24">pci_bus</name></expr></argument>, <argument pos:start="237:27" pos:end="237:28"><expr pos:start="237:27" pos:end="237:28"><name pos:start="237:27" pos:end="237:28">ds</name></expr></argument>, <argument pos:start="237:31" pos:end="237:54"><expr pos:start="237:31" pos:end="237:54"><name pos:start="237:31" pos:end="237:43">phys_ram_base</name> <operator pos:start="237:45" pos:end="237:45">+</operator> <name pos:start="237:47" pos:end="237:54">ram_size</name></expr></argument>, <argument pos:start="237:57" pos:end="237:64"><expr pos:start="237:57" pos:end="237:64"><name pos:start="237:57" pos:end="237:64">ram_size</name></expr></argument>,

                 <argument pos:start="239:18" pos:end="239:29"><expr pos:start="239:18" pos:end="239:29"><name pos:start="239:18" pos:end="239:29">vga_ram_size</name></expr></argument>, <argument pos:start="239:32" pos:end="239:32"><expr pos:start="239:32" pos:end="239:32"><literal type="number" pos:start="239:32" pos:end="239:32">0</literal></expr></argument>, <argument pos:start="239:35" pos:end="239:35"><expr pos:start="239:35" pos:end="239:35"><literal type="number" pos:start="239:35" pos:end="239:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="241:5" pos:end="241:60">//    openpic = openpic_init(0x00000000, 0xF0000000, 1);</comment>

    <comment type="line" pos:start="243:5" pos:end="243:41">//    pit = pit_init(0x40, i8259[0]);</comment>

    <expr_stmt pos:start="245:5" pos:end="245:29"><expr pos:start="245:5" pos:end="245:28"><call pos:start="245:5" pos:end="245:28"><name pos:start="245:5" pos:end="245:12">rtc_init</name><argument_list pos:start="245:13" pos:end="245:28">(<argument pos:start="245:14" pos:end="245:17"><expr pos:start="245:14" pos:end="245:17"><literal type="number" pos:start="245:14" pos:end="245:17">0x70</literal></expr></argument>, <argument pos:start="245:20" pos:end="245:27"><expr pos:start="245:20" pos:end="245:27"><name pos:start="245:20" pos:end="245:27"><name pos:start="245:20" pos:end="245:24">i8259</name><index pos:start="245:25" pos:end="245:27">[<expr pos:start="245:26" pos:end="245:26"><literal type="number" pos:start="245:26" pos:end="245:26">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="249:5" pos:end="249:48"><expr pos:start="249:5" pos:end="249:47"><call pos:start="249:5" pos:end="249:47"><name pos:start="249:5" pos:end="249:15">serial_init</name><argument_list pos:start="249:16" pos:end="249:47">(<argument pos:start="249:17" pos:end="249:21"><expr pos:start="249:17" pos:end="249:21"><literal type="number" pos:start="249:17" pos:end="249:21">0x3f8</literal></expr></argument>, <argument pos:start="249:24" pos:end="249:31"><expr pos:start="249:24" pos:end="249:31"><name pos:start="249:24" pos:end="249:31"><name pos:start="249:24" pos:end="249:28">i8259</name><index pos:start="249:29" pos:end="249:31">[<expr pos:start="249:30" pos:end="249:30"><literal type="number" pos:start="249:30" pos:end="249:30">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="249:34" pos:end="249:46"><expr pos:start="249:34" pos:end="249:46"><name pos:start="249:34" pos:end="249:46"><name pos:start="249:34" pos:end="249:43">serial_hds</name><index pos:start="249:44" pos:end="249:46">[<expr pos:start="249:45" pos:end="249:45"><literal type="number" pos:start="249:45" pos:end="249:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:23"><expr pos:start="251:5" pos:end="251:22"><name pos:start="251:5" pos:end="251:12">nb_nics1</name> <operator pos:start="251:14" pos:end="251:14">=</operator> <name pos:start="251:16" pos:end="251:22">nb_nics</name></expr>;</expr_stmt>

    <if_stmt pos:start="253:5" pos:end="255:33"><if pos:start="253:5" pos:end="255:33">if <condition pos:start="253:8" pos:end="253:33">(<expr pos:start="253:9" pos:end="253:32"><name pos:start="253:9" pos:end="253:16">nb_nics1</name> <operator pos:start="253:18" pos:end="253:18">&gt;</operator> <name pos:start="253:20" pos:end="253:32">NE2000_NB_MAX</name></expr>)</condition><block type="pseudo" pos:start="255:9" pos:end="255:33"><block_content pos:start="255:9" pos:end="255:33">

        <expr_stmt pos:start="255:9" pos:end="255:33"><expr pos:start="255:9" pos:end="255:32"><name pos:start="255:9" pos:end="255:16">nb_nics1</name> <operator pos:start="255:18" pos:end="255:18">=</operator> <name pos:start="255:20" pos:end="255:32">NE2000_NB_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="257:5" pos:end="271:5">for<control pos:start="257:8" pos:end="257:33">(<init pos:start="257:9" pos:end="257:14"><expr pos:start="257:9" pos:end="257:13"><name pos:start="257:9" pos:end="257:9">i</name> <operator pos:start="257:11" pos:end="257:11">=</operator> <literal type="number" pos:start="257:13" pos:end="257:13">0</literal></expr>;</init> <condition pos:start="257:16" pos:end="257:28"><expr pos:start="257:16" pos:end="257:27"><name pos:start="257:16" pos:end="257:16">i</name> <operator pos:start="257:18" pos:end="257:18">&lt;</operator> <name pos:start="257:20" pos:end="257:27">nb_nics1</name></expr>;</condition> <incr pos:start="257:30" pos:end="257:32"><expr pos:start="257:30" pos:end="257:32"><name pos:start="257:30" pos:end="257:30">i</name><operator pos:start="257:31" pos:end="257:32">++</operator></expr></incr>)</control> <block pos:start="257:35" pos:end="271:5">{<block_content pos:start="259:9" pos:end="269:9">

        <if_stmt pos:start="259:9" pos:end="269:9"><if pos:start="259:9" pos:end="265:9">if <condition pos:start="259:12" pos:end="261:58">(<expr pos:start="259:13" pos:end="261:57"><name pos:start="259:13" pos:end="259:23"><name pos:start="259:13" pos:end="259:20">nd_table</name><index pos:start="259:21" pos:end="259:23">[<expr pos:start="259:22" pos:end="259:22"><name pos:start="259:22" pos:end="259:22">i</name></expr>]</index></name><operator pos:start="259:24" pos:end="259:24">.</operator><name pos:start="259:25" pos:end="259:29">model</name> <operator pos:start="259:31" pos:end="259:32">==</operator> <name pos:start="259:34" pos:end="259:37">NULL</name>

            <operator pos:start="261:13" pos:end="261:14">||</operator> <call pos:start="261:16" pos:end="261:52"><name pos:start="261:16" pos:end="261:21">strcmp</name><argument_list pos:start="261:22" pos:end="261:52">(<argument pos:start="261:23" pos:end="261:39"><expr pos:start="261:23" pos:end="261:39"><name pos:start="261:23" pos:end="261:33"><name pos:start="261:23" pos:end="261:30">nd_table</name><index pos:start="261:31" pos:end="261:33">[<expr pos:start="261:32" pos:end="261:32"><name pos:start="261:32" pos:end="261:32">i</name></expr>]</index></name><operator pos:start="261:34" pos:end="261:34">.</operator><name pos:start="261:35" pos:end="261:39">model</name></expr></argument>, <argument pos:start="261:42" pos:end="261:51"><expr pos:start="261:42" pos:end="261:51"><literal type="string" pos:start="261:42" pos:end="261:51">"ne2k_isa"</literal></expr></argument>)</argument_list></call> <operator pos:start="261:54" pos:end="261:55">==</operator> <literal type="number" pos:start="261:57" pos:end="261:57">0</literal></expr>)</condition> <block pos:start="261:60" pos:end="265:9">{<block_content pos:start="263:13" pos:end="263:78">

            <expr_stmt pos:start="263:13" pos:end="263:78"><expr pos:start="263:13" pos:end="263:77"><call pos:start="263:13" pos:end="263:77"><name pos:start="263:13" pos:end="263:27">isa_ne2000_init</name><argument_list pos:start="263:28" pos:end="263:77">(<argument pos:start="263:29" pos:end="263:40"><expr pos:start="263:29" pos:end="263:40"><name pos:start="263:29" pos:end="263:40"><name pos:start="263:29" pos:end="263:37">ne2000_io</name><index pos:start="263:38" pos:end="263:40">[<expr pos:start="263:39" pos:end="263:39"><name pos:start="263:39" pos:end="263:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="263:43" pos:end="263:62"><expr pos:start="263:43" pos:end="263:62"><name pos:start="263:43" pos:end="263:62"><name pos:start="263:43" pos:end="263:47">i8259</name><index pos:start="263:48" pos:end="263:62">[<expr pos:start="263:49" pos:end="263:61"><name pos:start="263:49" pos:end="263:61"><name pos:start="263:49" pos:end="263:58">ne2000_irq</name><index pos:start="263:59" pos:end="263:61">[<expr pos:start="263:60" pos:end="263:60"><name pos:start="263:60" pos:end="263:60">i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="263:65" pos:end="263:76"><expr pos:start="263:65" pos:end="263:76"><operator pos:start="263:65" pos:end="263:65">&amp;</operator><name pos:start="263:66" pos:end="263:76"><name pos:start="263:66" pos:end="263:73">nd_table</name><index pos:start="263:74" pos:end="263:76">[<expr pos:start="263:75" pos:end="263:75"><name pos:start="263:75" pos:end="263:75">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="265:11" pos:end="269:9">else <block pos:start="265:16" pos:end="269:9">{<block_content pos:start="267:13" pos:end="267:52">

            <expr_stmt pos:start="267:13" pos:end="267:52"><expr pos:start="267:13" pos:end="267:51"><call pos:start="267:13" pos:end="267:51"><name pos:start="267:13" pos:end="267:24">pci_nic_init</name><argument_list pos:start="267:25" pos:end="267:51">(<argument pos:start="267:26" pos:end="267:32"><expr pos:start="267:26" pos:end="267:32"><name pos:start="267:26" pos:end="267:32">pci_bus</name></expr></argument>, <argument pos:start="267:35" pos:end="267:46"><expr pos:start="267:35" pos:end="267:46"><operator pos:start="267:35" pos:end="267:35">&amp;</operator><name pos:start="267:36" pos:end="267:46"><name pos:start="267:36" pos:end="267:43">nd_table</name><index pos:start="267:44" pos:end="267:46">[<expr pos:start="267:45" pos:end="267:45"><name pos:start="267:45" pos:end="267:45">i</name></expr>]</index></name></expr></argument>, <argument pos:start="267:49" pos:end="267:50"><expr pos:start="267:49" pos:end="267:50"><operator pos:start="267:49" pos:end="267:49">-</operator><literal type="number" pos:start="267:50" pos:end="267:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <for pos:start="275:5" pos:end="281:5">for<control pos:start="275:8" pos:end="275:26">(<init pos:start="275:9" pos:end="275:14"><expr pos:start="275:9" pos:end="275:13"><name pos:start="275:9" pos:end="275:9">i</name> <operator pos:start="275:11" pos:end="275:11">=</operator> <literal type="number" pos:start="275:13" pos:end="275:13">0</literal></expr>;</init> <condition pos:start="275:16" pos:end="275:21"><expr pos:start="275:16" pos:end="275:20"><name pos:start="275:16" pos:end="275:16">i</name> <operator pos:start="275:18" pos:end="275:18">&lt;</operator> <literal type="number" pos:start="275:20" pos:end="275:20">2</literal></expr>;</condition> <incr pos:start="275:23" pos:end="275:25"><expr pos:start="275:23" pos:end="275:25"><name pos:start="275:23" pos:end="275:23">i</name><operator pos:start="275:24" pos:end="275:25">++</operator></expr></incr>)</control> <block pos:start="275:28" pos:end="281:5">{<block_content pos:start="277:9" pos:end="279:59">

        <expr_stmt pos:start="277:9" pos:end="279:59"><expr pos:start="277:9" pos:end="279:58"><call pos:start="277:9" pos:end="279:58"><name pos:start="277:9" pos:end="277:20">isa_ide_init</name><argument_list pos:start="277:21" pos:end="279:58">(<argument pos:start="277:22" pos:end="277:34"><expr pos:start="277:22" pos:end="277:34"><name pos:start="277:22" pos:end="277:34"><name pos:start="277:22" pos:end="277:31">ide_iobase</name><index pos:start="277:32" pos:end="277:34">[<expr pos:start="277:33" pos:end="277:33"><name pos:start="277:33" pos:end="277:33">i</name></expr>]</index></name></expr></argument>, <argument pos:start="277:37" pos:end="277:50"><expr pos:start="277:37" pos:end="277:50"><name pos:start="277:37" pos:end="277:50"><name pos:start="277:37" pos:end="277:47">ide_iobase2</name><index pos:start="277:48" pos:end="277:50">[<expr pos:start="277:49" pos:end="277:49"><name pos:start="277:49" pos:end="277:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="277:53" pos:end="277:69"><expr pos:start="277:53" pos:end="277:69"><name pos:start="277:53" pos:end="277:69"><name pos:start="277:53" pos:end="277:57">i8259</name><index pos:start="277:58" pos:end="277:69">[<expr pos:start="277:59" pos:end="277:68"><name pos:start="277:59" pos:end="277:68"><name pos:start="277:59" pos:end="277:65">ide_irq</name><index pos:start="277:66" pos:end="277:68">[<expr pos:start="277:67" pos:end="277:67"><name pos:start="277:67" pos:end="277:67">i</name></expr>]</index></name></expr>]</index></name></expr></argument>,

                     <argument pos:start="279:22" pos:end="279:36"><expr pos:start="279:22" pos:end="279:36"><name pos:start="279:22" pos:end="279:36"><name pos:start="279:22" pos:end="279:29">bs_table</name><index pos:start="279:30" pos:end="279:36">[<expr pos:start="279:31" pos:end="279:35"><literal type="number" pos:start="279:31" pos:end="279:31">2</literal> <operator pos:start="279:33" pos:end="279:33">*</operator> <name pos:start="279:35" pos:end="279:35">i</name></expr>]</index></name></expr></argument>, <argument pos:start="279:39" pos:end="279:57"><expr pos:start="279:39" pos:end="279:57"><name pos:start="279:39" pos:end="279:57"><name pos:start="279:39" pos:end="279:46">bs_table</name><index pos:start="279:47" pos:end="279:57">[<expr pos:start="279:48" pos:end="279:56"><literal type="number" pos:start="279:48" pos:end="279:48">2</literal> <operator pos:start="279:50" pos:end="279:50">*</operator> <name pos:start="279:52" pos:end="279:52">i</name> <operator pos:start="279:54" pos:end="279:54">+</operator> <literal type="number" pos:start="279:56" pos:end="279:56">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="283:5" pos:end="283:42"><expr pos:start="283:5" pos:end="283:41"><call pos:start="283:5" pos:end="283:41"><name pos:start="283:5" pos:end="283:14">i8042_init</name><argument_list pos:start="283:15" pos:end="283:41">(<argument pos:start="283:16" pos:end="283:23"><expr pos:start="283:16" pos:end="283:23"><name pos:start="283:16" pos:end="283:23"><name pos:start="283:16" pos:end="283:20">i8259</name><index pos:start="283:21" pos:end="283:23">[<expr pos:start="283:22" pos:end="283:22"><literal type="number" pos:start="283:22" pos:end="283:22">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="283:26" pos:end="283:34"><expr pos:start="283:26" pos:end="283:34"><name pos:start="283:26" pos:end="283:34"><name pos:start="283:26" pos:end="283:30">i8259</name><index pos:start="283:31" pos:end="283:34">[<expr pos:start="283:32" pos:end="283:33"><literal type="number" pos:start="283:32" pos:end="283:33">12</literal></expr>]</index></name></expr></argument>, <argument pos:start="283:37" pos:end="283:40"><expr pos:start="283:37" pos:end="283:40"><literal type="number" pos:start="283:37" pos:end="283:40">0x60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:16"><expr pos:start="285:5" pos:end="285:15"><call pos:start="285:5" pos:end="285:15"><name pos:start="285:5" pos:end="285:12">DMA_init</name><argument_list pos:start="285:13" pos:end="285:15">(<argument pos:start="285:14" pos:end="285:14"><expr pos:start="285:14" pos:end="285:14"><literal type="number" pos:start="285:14" pos:end="285:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="287:5" pos:end="287:21">//    AUD_init();</comment>

    <comment type="line" pos:start="289:5" pos:end="289:22">//    SB16_init();</comment>



    <expr_stmt pos:start="293:5" pos:end="293:49"><expr pos:start="293:5" pos:end="293:48"><call pos:start="293:5" pos:end="293:48"><name pos:start="293:5" pos:end="293:15">fdctrl_init</name><argument_list pos:start="293:16" pos:end="293:48">(<argument pos:start="293:17" pos:end="293:24"><expr pos:start="293:17" pos:end="293:24"><name pos:start="293:17" pos:end="293:24"><name pos:start="293:17" pos:end="293:21">i8259</name><index pos:start="293:22" pos:end="293:24">[<expr pos:start="293:23" pos:end="293:23"><literal type="number" pos:start="293:23" pos:end="293:23">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="293:27" pos:end="293:27"><expr pos:start="293:27" pos:end="293:27"><literal type="number" pos:start="293:27" pos:end="293:27">2</literal></expr></argument>, <argument pos:start="293:30" pos:end="293:30"><expr pos:start="293:30" pos:end="293:30"><literal type="number" pos:start="293:30" pos:end="293:30">0</literal></expr></argument>, <argument pos:start="293:33" pos:end="293:37"><expr pos:start="293:33" pos:end="293:37"><literal type="number" pos:start="293:33" pos:end="293:37">0x3f0</literal></expr></argument>, <argument pos:start="293:40" pos:end="293:47"><expr pos:start="293:40" pos:end="293:47"><name pos:start="293:40" pos:end="293:47">fd_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="297:5" pos:end="297:31">/* Register speaker port */</comment>

    <expr_stmt pos:start="299:5" pos:end="299:64"><expr pos:start="299:5" pos:end="299:63"><call pos:start="299:5" pos:end="299:63"><name pos:start="299:5" pos:end="299:24">register_ioport_read</name><argument_list pos:start="299:25" pos:end="299:63">(<argument pos:start="299:26" pos:end="299:29"><expr pos:start="299:26" pos:end="299:29"><literal type="number" pos:start="299:26" pos:end="299:29">0x61</literal></expr></argument>, <argument pos:start="299:32" pos:end="299:32"><expr pos:start="299:32" pos:end="299:32"><literal type="number" pos:start="299:32" pos:end="299:32">1</literal></expr></argument>, <argument pos:start="299:35" pos:end="299:35"><expr pos:start="299:35" pos:end="299:35"><literal type="number" pos:start="299:35" pos:end="299:35">1</literal></expr></argument>, <argument pos:start="299:38" pos:end="299:56"><expr pos:start="299:38" pos:end="299:56"><name pos:start="299:38" pos:end="299:56">speaker_ioport_read</name></expr></argument>, <argument pos:start="299:59" pos:end="299:62"><expr pos:start="299:59" pos:end="299:62"><name pos:start="299:59" pos:end="299:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:66"><expr pos:start="301:5" pos:end="301:65"><call pos:start="301:5" pos:end="301:65"><name pos:start="301:5" pos:end="301:25">register_ioport_write</name><argument_list pos:start="301:26" pos:end="301:65">(<argument pos:start="301:27" pos:end="301:30"><expr pos:start="301:27" pos:end="301:30"><literal type="number" pos:start="301:27" pos:end="301:30">0x61</literal></expr></argument>, <argument pos:start="301:33" pos:end="301:33"><expr pos:start="301:33" pos:end="301:33"><literal type="number" pos:start="301:33" pos:end="301:33">1</literal></expr></argument>, <argument pos:start="301:36" pos:end="301:36"><expr pos:start="301:36" pos:end="301:36"><literal type="number" pos:start="301:36" pos:end="301:36">1</literal></expr></argument>, <argument pos:start="301:39" pos:end="301:58"><expr pos:start="301:39" pos:end="301:58"><name pos:start="301:39" pos:end="301:58">speaker_ioport_write</name></expr></argument>, <argument pos:start="301:61" pos:end="301:64"><expr pos:start="301:61" pos:end="301:64"><name pos:start="301:61" pos:end="301:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="303:5" pos:end="303:41">/* Register fake IO ports for PREP */</comment>

    <expr_stmt pos:start="305:5" pos:end="305:68"><expr pos:start="305:5" pos:end="305:67"><name pos:start="305:5" pos:end="305:22"><name pos:start="305:5" pos:end="305:11">sysctrl</name><operator pos:start="305:12" pos:end="305:13">-&gt;</operator><name pos:start="305:14" pos:end="305:22">reset_irq</name></name> <operator pos:start="305:24" pos:end="305:24">=</operator> <name pos:start="305:26" pos:end="305:67"><name pos:start="305:26" pos:end="305:34">first_cpu</name><operator pos:start="305:35" pos:end="305:36">-&gt;</operator><name pos:start="305:37" pos:end="305:46">irq_inputs</name><index pos:start="305:47" pos:end="305:67">[<expr pos:start="305:48" pos:end="305:66"><name pos:start="305:48" pos:end="305:66">PPC6xx_INPUT_HRESET</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="307:5" pos:end="307:62"><expr pos:start="307:5" pos:end="307:61"><call pos:start="307:5" pos:end="307:61"><name pos:start="307:5" pos:end="307:24">register_ioport_read</name><argument_list pos:start="307:25" pos:end="307:61">(<argument pos:start="307:26" pos:end="307:30"><expr pos:start="307:26" pos:end="307:30"><literal type="number" pos:start="307:26" pos:end="307:30">0x398</literal></expr></argument>, <argument pos:start="307:33" pos:end="307:33"><expr pos:start="307:33" pos:end="307:33"><literal type="number" pos:start="307:33" pos:end="307:33">2</literal></expr></argument>, <argument pos:start="307:36" pos:end="307:36"><expr pos:start="307:36" pos:end="307:36"><literal type="number" pos:start="307:36" pos:end="307:36">1</literal></expr></argument>, <argument pos:start="307:39" pos:end="307:51"><expr pos:start="307:39" pos:end="307:51"><operator pos:start="307:39" pos:end="307:39">&amp;</operator><name pos:start="307:40" pos:end="307:51">PREP_io_read</name></expr></argument>, <argument pos:start="307:54" pos:end="307:60"><expr pos:start="307:54" pos:end="307:60"><name pos:start="307:54" pos:end="307:60">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="309:64"><expr pos:start="309:5" pos:end="309:63"><call pos:start="309:5" pos:end="309:63"><name pos:start="309:5" pos:end="309:25">register_ioport_write</name><argument_list pos:start="309:26" pos:end="309:63">(<argument pos:start="309:27" pos:end="309:31"><expr pos:start="309:27" pos:end="309:31"><literal type="number" pos:start="309:27" pos:end="309:31">0x398</literal></expr></argument>, <argument pos:start="309:34" pos:end="309:34"><expr pos:start="309:34" pos:end="309:34"><literal type="number" pos:start="309:34" pos:end="309:34">2</literal></expr></argument>, <argument pos:start="309:37" pos:end="309:37"><expr pos:start="309:37" pos:end="309:37"><literal type="number" pos:start="309:37" pos:end="309:37">1</literal></expr></argument>, <argument pos:start="309:40" pos:end="309:53"><expr pos:start="309:40" pos:end="309:53"><operator pos:start="309:40" pos:end="309:40">&amp;</operator><name pos:start="309:41" pos:end="309:53">PREP_io_write</name></expr></argument>, <argument pos:start="309:56" pos:end="309:62"><expr pos:start="309:56" pos:end="309:62"><name pos:start="309:56" pos:end="309:62">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="311:5" pos:end="311:30">/* System control ports */</comment>

    <expr_stmt pos:start="313:5" pos:end="313:71"><expr pos:start="313:5" pos:end="313:70"><call pos:start="313:5" pos:end="313:70"><name pos:start="313:5" pos:end="313:24">register_ioport_read</name><argument_list pos:start="313:25" pos:end="313:70">(<argument pos:start="313:26" pos:end="313:31"><expr pos:start="313:26" pos:end="313:31"><literal type="number" pos:start="313:26" pos:end="313:31">0x0092</literal></expr></argument>, <argument pos:start="313:34" pos:end="313:37"><expr pos:start="313:34" pos:end="313:37"><literal type="number" pos:start="313:34" pos:end="313:37">0x01</literal></expr></argument>, <argument pos:start="313:40" pos:end="313:40"><expr pos:start="313:40" pos:end="313:40"><literal type="number" pos:start="313:40" pos:end="313:40">1</literal></expr></argument>, <argument pos:start="313:43" pos:end="313:60"><expr pos:start="313:43" pos:end="313:60"><operator pos:start="313:43" pos:end="313:43">&amp;</operator><name pos:start="313:44" pos:end="313:60">PREP_io_800_readb</name></expr></argument>, <argument pos:start="313:63" pos:end="313:69"><expr pos:start="313:63" pos:end="313:69"><name pos:start="313:63" pos:end="313:69">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="315:73"><expr pos:start="315:5" pos:end="315:72"><call pos:start="315:5" pos:end="315:72"><name pos:start="315:5" pos:end="315:25">register_ioport_write</name><argument_list pos:start="315:26" pos:end="315:72">(<argument pos:start="315:27" pos:end="315:32"><expr pos:start="315:27" pos:end="315:32"><literal type="number" pos:start="315:27" pos:end="315:32">0x0092</literal></expr></argument>, <argument pos:start="315:35" pos:end="315:38"><expr pos:start="315:35" pos:end="315:38"><literal type="number" pos:start="315:35" pos:end="315:38">0x01</literal></expr></argument>, <argument pos:start="315:41" pos:end="315:41"><expr pos:start="315:41" pos:end="315:41"><literal type="number" pos:start="315:41" pos:end="315:41">1</literal></expr></argument>, <argument pos:start="315:44" pos:end="315:62"><expr pos:start="315:44" pos:end="315:62"><operator pos:start="315:44" pos:end="315:44">&amp;</operator><name pos:start="315:45" pos:end="315:62">PREP_io_800_writeb</name></expr></argument>, <argument pos:start="315:65" pos:end="315:71"><expr pos:start="315:65" pos:end="315:71"><name pos:start="315:65" pos:end="315:71">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:71"><expr pos:start="317:5" pos:end="317:70"><call pos:start="317:5" pos:end="317:70"><name pos:start="317:5" pos:end="317:24">register_ioport_read</name><argument_list pos:start="317:25" pos:end="317:70">(<argument pos:start="317:26" pos:end="317:31"><expr pos:start="317:26" pos:end="317:31"><literal type="number" pos:start="317:26" pos:end="317:31">0x0800</literal></expr></argument>, <argument pos:start="317:34" pos:end="317:37"><expr pos:start="317:34" pos:end="317:37"><literal type="number" pos:start="317:34" pos:end="317:37">0x52</literal></expr></argument>, <argument pos:start="317:40" pos:end="317:40"><expr pos:start="317:40" pos:end="317:40"><literal type="number" pos:start="317:40" pos:end="317:40">1</literal></expr></argument>, <argument pos:start="317:43" pos:end="317:60"><expr pos:start="317:43" pos:end="317:60"><operator pos:start="317:43" pos:end="317:43">&amp;</operator><name pos:start="317:44" pos:end="317:60">PREP_io_800_readb</name></expr></argument>, <argument pos:start="317:63" pos:end="317:69"><expr pos:start="317:63" pos:end="317:69"><name pos:start="317:63" pos:end="317:69">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="319:73"><expr pos:start="319:5" pos:end="319:72"><call pos:start="319:5" pos:end="319:72"><name pos:start="319:5" pos:end="319:25">register_ioport_write</name><argument_list pos:start="319:26" pos:end="319:72">(<argument pos:start="319:27" pos:end="319:32"><expr pos:start="319:27" pos:end="319:32"><literal type="number" pos:start="319:27" pos:end="319:32">0x0800</literal></expr></argument>, <argument pos:start="319:35" pos:end="319:38"><expr pos:start="319:35" pos:end="319:38"><literal type="number" pos:start="319:35" pos:end="319:38">0x52</literal></expr></argument>, <argument pos:start="319:41" pos:end="319:41"><expr pos:start="319:41" pos:end="319:41"><literal type="number" pos:start="319:41" pos:end="319:41">1</literal></expr></argument>, <argument pos:start="319:44" pos:end="319:62"><expr pos:start="319:44" pos:end="319:62"><operator pos:start="319:44" pos:end="319:44">&amp;</operator><name pos:start="319:45" pos:end="319:62">PREP_io_800_writeb</name></expr></argument>, <argument pos:start="319:65" pos:end="319:71"><expr pos:start="319:65" pos:end="319:71"><name pos:start="319:65" pos:end="319:71">sysctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="321:5" pos:end="321:29">/* PCI intack location */</comment>

    <expr_stmt pos:start="323:5" pos:end="325:67"><expr pos:start="323:5" pos:end="325:66"><name pos:start="323:5" pos:end="323:17">PPC_io_memory</name> <operator pos:start="323:19" pos:end="323:19">=</operator> <call pos:start="323:21" pos:end="325:66"><name pos:start="323:21" pos:end="323:42">cpu_register_io_memory</name><argument_list pos:start="323:43" pos:end="325:66">(<argument pos:start="323:44" pos:end="323:44"><expr pos:start="323:44" pos:end="323:44"><literal type="number" pos:start="323:44" pos:end="323:44">0</literal></expr></argument>, <argument pos:start="323:47" pos:end="323:61"><expr pos:start="323:47" pos:end="323:61"><name pos:start="323:47" pos:end="323:61">PPC_intack_read</name></expr></argument>,

                                           <argument pos:start="325:44" pos:end="325:59"><expr pos:start="325:44" pos:end="325:59"><name pos:start="325:44" pos:end="325:59">PPC_intack_write</name></expr></argument>, <argument pos:start="325:62" pos:end="325:65"><expr pos:start="325:62" pos:end="325:65"><name pos:start="325:62" pos:end="325:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="340:0"><expr pos:start="327:5" pos:end="327:64"><call pos:start="327:5" pos:end="327:64"><name pos:start="327:5" pos:end="327:32">cpu_register_physical_memory</name><argument_list pos:start="327:33" pos:end="327:64">(<argument pos:start="327:34" pos:end="327:43"><expr pos:start="327:34" pos:end="327:43"><literal type="number" pos:start="327:34" pos:end="327:43">0xBFFFFFF0</literal></expr></argument>, <argument pos:start="327:46" pos:end="327:48"><expr pos:start="327:46" pos:end="327:48"><literal type="number" pos:start="327:46" pos:end="327:48">0x4</literal></expr></argument>, <argument pos:start="327:51" pos:end="327:63"><expr pos:start="327:51" pos:end="327:63"><name pos:start="327:51" pos:end="327:63">PPC_io_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="329:5" pos:end="329:51">/* PowerPC control and status register group */</comment>

<cpp:if pos:start="331:1" pos:end="331:5">#<cpp:directive pos:start="331:2" pos:end="331:3">if</cpp:directive> <expr pos:start="331:5" pos:end="331:5"><literal type="number" pos:start="331:5" pos:end="331:5">0</literal></expr></cpp:if>

    PPC_io_memory = cpu_register_io_memory(0, PPC_XCSR_read, PPC_XCSR_write,

                                           NULL);

    cpu_register_physical_memory(0xFEFF0000, 0x1000, PPC_io_memory);

<cpp:endif pos:start="339:1" pos:end="339:6">#<cpp:directive pos:start="339:2" pos:end="339:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="343:5" pos:end="347:5"><if pos:start="343:5" pos:end="347:5">if <condition pos:start="343:8" pos:end="343:20">(<expr pos:start="343:9" pos:end="343:19"><name pos:start="343:9" pos:end="343:19">usb_enabled</name></expr>)</condition> <block pos:start="343:22" pos:end="347:5">{<block_content pos:start="345:9" pos:end="345:42">

        <expr_stmt pos:start="345:9" pos:end="345:42"><expr pos:start="345:9" pos:end="345:41"><call pos:start="345:9" pos:end="345:41"><name pos:start="345:9" pos:end="345:25">usb_ohci_init_pci</name><argument_list pos:start="345:26" pos:end="345:41">(<argument pos:start="345:27" pos:end="345:33"><expr pos:start="345:27" pos:end="345:33"><name pos:start="345:27" pos:end="345:33">pci_bus</name></expr></argument>, <argument pos:start="345:36" pos:end="345:36"><expr pos:start="345:36" pos:end="345:36"><literal type="number" pos:start="345:36" pos:end="345:36">3</literal></expr></argument>, <argument pos:start="345:39" pos:end="345:40"><expr pos:start="345:39" pos:end="345:40"><operator pos:start="345:39" pos:end="345:39">-</operator><literal type="number" pos:start="345:40" pos:end="345:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="351:5" pos:end="351:62"><expr pos:start="351:5" pos:end="351:61"><name pos:start="351:5" pos:end="351:10">m48t59</name> <operator pos:start="351:12" pos:end="351:12">=</operator> <call pos:start="351:14" pos:end="351:61"><name pos:start="351:14" pos:end="351:24">m48t59_init</name><argument_list pos:start="351:25" pos:end="351:61">(<argument pos:start="351:26" pos:end="351:33"><expr pos:start="351:26" pos:end="351:33"><name pos:start="351:26" pos:end="351:33"><name pos:start="351:26" pos:end="351:30">i8259</name><index pos:start="351:31" pos:end="351:33">[<expr pos:start="351:32" pos:end="351:32"><literal type="number" pos:start="351:32" pos:end="351:32">8</literal></expr>]</index></name></expr></argument>, <argument pos:start="351:36" pos:end="351:36"><expr pos:start="351:36" pos:end="351:36"><literal type="number" pos:start="351:36" pos:end="351:36">0</literal></expr></argument>, <argument pos:start="351:39" pos:end="351:44"><expr pos:start="351:39" pos:end="351:44"><literal type="number" pos:start="351:39" pos:end="351:44">0x0074</literal></expr></argument>, <argument pos:start="351:47" pos:end="351:56"><expr pos:start="351:47" pos:end="351:56"><name pos:start="351:47" pos:end="351:56">NVRAM_SIZE</name></expr></argument>, <argument pos:start="351:59" pos:end="351:60"><expr pos:start="351:59" pos:end="351:60"><literal type="number" pos:start="351:59" pos:end="351:60">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="353:5" pos:end="355:15"><if pos:start="353:5" pos:end="355:15">if <condition pos:start="353:8" pos:end="353:23">(<expr pos:start="353:9" pos:end="353:22"><name pos:start="353:9" pos:end="353:14">m48t59</name> <operator pos:start="353:16" pos:end="353:17">==</operator> <name pos:start="353:19" pos:end="353:22">NULL</name></expr>)</condition><block type="pseudo" pos:start="355:9" pos:end="355:15"><block_content pos:start="355:9" pos:end="355:15">

        <return pos:start="355:9" pos:end="355:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:28"><expr pos:start="357:5" pos:end="357:27"><name pos:start="357:5" pos:end="357:18"><name pos:start="357:5" pos:end="357:11">sysctrl</name><operator pos:start="357:12" pos:end="357:13">-&gt;</operator><name pos:start="357:14" pos:end="357:18">nvram</name></name> <operator pos:start="357:20" pos:end="357:20">=</operator> <name pos:start="357:22" pos:end="357:27">m48t59</name></expr>;</expr_stmt>



    <comment type="block" pos:start="361:5" pos:end="361:26">/* Initialise NVRAM */</comment>

    <expr_stmt pos:start="363:5" pos:end="363:26"><expr pos:start="363:5" pos:end="363:25"><name pos:start="363:5" pos:end="363:16"><name pos:start="363:5" pos:end="363:9">nvram</name><operator pos:start="363:10" pos:end="363:10">.</operator><name pos:start="363:11" pos:end="363:16">opaque</name></name> <operator pos:start="363:18" pos:end="363:18">=</operator> <name pos:start="363:20" pos:end="363:25">m48t59</name></expr>;</expr_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:33"><expr pos:start="365:5" pos:end="365:32"><name pos:start="365:5" pos:end="365:17"><name pos:start="365:5" pos:end="365:9">nvram</name><operator pos:start="365:10" pos:end="365:10">.</operator><name pos:start="365:11" pos:end="365:17">read_fn</name></name> <operator pos:start="365:19" pos:end="365:19">=</operator> <operator pos:start="365:21" pos:end="365:21">&amp;</operator><name pos:start="365:22" pos:end="365:32">m48t59_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="367:5" pos:end="367:35"><expr pos:start="367:5" pos:end="367:34"><name pos:start="367:5" pos:end="367:18"><name pos:start="367:5" pos:end="367:9">nvram</name><operator pos:start="367:10" pos:end="367:10">.</operator><name pos:start="367:11" pos:end="367:18">write_fn</name></name> <operator pos:start="367:20" pos:end="367:20">=</operator> <operator pos:start="367:22" pos:end="367:22">&amp;</operator><name pos:start="367:23" pos:end="367:34">m48t59_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="381:71"><expr pos:start="369:5" pos:end="381:70"><call pos:start="369:5" pos:end="381:70"><name pos:start="369:5" pos:end="369:24">PPC_NVRAM_set_params</name><argument_list pos:start="369:25" pos:end="381:70">(<argument pos:start="369:26" pos:end="369:31"><expr pos:start="369:26" pos:end="369:31"><operator pos:start="369:26" pos:end="369:26">&amp;</operator><name pos:start="369:27" pos:end="369:31">nvram</name></expr></argument>, <argument pos:start="369:34" pos:end="369:43"><expr pos:start="369:34" pos:end="369:43"><name pos:start="369:34" pos:end="369:43">NVRAM_SIZE</name></expr></argument>, <argument pos:start="369:46" pos:end="369:51"><expr pos:start="369:46" pos:end="369:51"><literal type="string" pos:start="369:46" pos:end="369:51">"PREP"</literal></expr></argument>, <argument pos:start="369:54" pos:end="369:61"><expr pos:start="369:54" pos:end="369:61"><name pos:start="369:54" pos:end="369:61">ram_size</name></expr></argument>, <argument pos:start="369:64" pos:end="369:78"><expr pos:start="369:64" pos:end="369:78"><name pos:start="369:64" pos:end="369:78">ppc_boot_device</name></expr></argument>,

                         <argument pos:start="371:26" pos:end="371:36"><expr pos:start="371:26" pos:end="371:36"><name pos:start="371:26" pos:end="371:36">kernel_base</name></expr></argument>, <argument pos:start="371:39" pos:end="371:49"><expr pos:start="371:39" pos:end="371:49"><name pos:start="371:39" pos:end="371:49">kernel_size</name></expr></argument>,

                         <argument pos:start="373:26" pos:end="373:39"><expr pos:start="373:26" pos:end="373:39"><name pos:start="373:26" pos:end="373:39">kernel_cmdline</name></expr></argument>,

                         <argument pos:start="375:26" pos:end="375:36"><expr pos:start="375:26" pos:end="375:36"><name pos:start="375:26" pos:end="375:36">initrd_base</name></expr></argument>, <argument pos:start="375:39" pos:end="375:49"><expr pos:start="375:39" pos:end="375:49"><name pos:start="375:39" pos:end="375:49">initrd_size</name></expr></argument>,

                         <comment type="block" pos:start="377:26" pos:end="377:72">/* XXX: need an option to load a NVRAM image */</comment>

                         <argument pos:start="379:26" pos:end="379:26"><expr pos:start="379:26" pos:end="379:26"><literal type="number" pos:start="379:26" pos:end="379:26">0</literal></expr></argument>,

                         <argument pos:start="381:26" pos:end="381:38"><expr pos:start="381:26" pos:end="381:38"><name pos:start="381:26" pos:end="381:38">graphic_width</name></expr></argument>, <argument pos:start="381:41" pos:end="381:54"><expr pos:start="381:41" pos:end="381:54"><name pos:start="381:41" pos:end="381:54">graphic_height</name></expr></argument>, <argument pos:start="381:57" pos:end="381:69"><expr pos:start="381:57" pos:end="381:69"><name pos:start="381:57" pos:end="381:69">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="385:5" pos:end="385:63">/* Special port to get debug messages from Open-Firmware */</comment>

    <expr_stmt pos:start="387:5" pos:end="387:64"><expr pos:start="387:5" pos:end="387:63"><call pos:start="387:5" pos:end="387:63"><name pos:start="387:5" pos:end="387:25">register_ioport_write</name><argument_list pos:start="387:26" pos:end="387:63">(<argument pos:start="387:27" pos:end="387:32"><expr pos:start="387:27" pos:end="387:32"><literal type="number" pos:start="387:27" pos:end="387:32">0x0F00</literal></expr></argument>, <argument pos:start="387:35" pos:end="387:35"><expr pos:start="387:35" pos:end="387:35"><literal type="number" pos:start="387:35" pos:end="387:35">4</literal></expr></argument>, <argument pos:start="387:38" pos:end="387:38"><expr pos:start="387:38" pos:end="387:38"><literal type="number" pos:start="387:38" pos:end="387:38">1</literal></expr></argument>, <argument pos:start="387:41" pos:end="387:56"><expr pos:start="387:41" pos:end="387:56"><operator pos:start="387:41" pos:end="387:41">&amp;</operator><name pos:start="387:42" pos:end="387:56">PPC_debug_write</name></expr></argument>, <argument pos:start="387:59" pos:end="387:62"><expr pos:start="387:59" pos:end="387:62"><name pos:start="387:59" pos:end="387:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
