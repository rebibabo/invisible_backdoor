<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/525.c" pos:tabs="8"><function pos:start="1:1" pos:end="208:31"><type pos:start="1:1" pos:end="1:22"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">MMSSCPacketType</name></type> <name pos:start="1:24" pos:end="1:46">get_tcp_server_response</name><parameter_list pos:start="1:47" pos:end="1:63">(<parameter pos:start="1:48" pos:end="1:62"><decl pos:start="1:48" pos:end="1:62"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:57">MMSContext</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">mms</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="208:31">{<block_content pos:start="5:5" pos:end="208:31">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">read_result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19">MMSSCPacketType</name></type> <name pos:start="7:21" pos:end="7:31">packet_type</name><init pos:start="7:32" pos:end="7:35">= <expr pos:start="7:34" pos:end="7:35"><operator pos:start="7:34" pos:end="7:34">-</operator><literal type="number" pos:start="7:35" pos:end="7:35">1</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="11:5" pos:end="208:31">for<control pos:start="11:8" pos:end="11:11">(<init pos:start="11:9" pos:end="11:9">;</init><condition pos:start="11:10" pos:end="11:10">;</condition><incr/>)</control> <block pos:start="11:13" pos:end="208:31">{<block_content pos:start="13:9" pos:end="208:31">

        <if_stmt pos:start="13:9" pos:end="208:31"><if pos:start="13:9" pos:end="208:31">if<condition pos:start="13:11" pos:end="13:79">(<expr pos:start="13:12" pos:end="13:78"><operator pos:start="13:12" pos:end="13:12">(</operator><name pos:start="13:13" pos:end="13:23">read_result</name><operator pos:start="13:24" pos:end="13:24">=</operator> <call pos:start="13:26" pos:end="13:74"><name pos:start="13:26" pos:end="13:42">url_read_complete</name><argument_list pos:start="13:43" pos:end="13:74">(<argument pos:start="13:44" pos:end="13:54"><expr pos:start="13:44" pos:end="13:54"><name pos:start="13:44" pos:end="13:54"><name pos:start="13:44" pos:end="13:46">mms</name><operator pos:start="13:47" pos:end="13:48">-&gt;</operator><name pos:start="13:49" pos:end="13:54">mms_hd</name></name></expr></argument>, <argument pos:start="13:57" pos:end="13:70"><expr pos:start="13:57" pos:end="13:70"><name pos:start="13:57" pos:end="13:70"><name pos:start="13:57" pos:end="13:59">mms</name><operator pos:start="13:60" pos:end="13:61">-&gt;</operator><name pos:start="13:62" pos:end="13:70">in_buffer</name></name></expr></argument>, <argument pos:start="13:73" pos:end="13:73"><expr pos:start="13:73" pos:end="13:73"><literal type="number" pos:start="13:73" pos:end="13:73">8</literal></expr></argument>)</argument_list></call><operator pos:start="13:75" pos:end="13:75">)</operator><operator pos:start="13:76" pos:end="13:77">==</operator><literal type="number" pos:start="13:78" pos:end="13:78">8</literal></expr>)</condition> <block pos:start="13:81" pos:end="208:31">{<block_content pos:start="17:13" pos:end="208:31">

            <comment type="line" pos:start="15:13" pos:end="15:37">// handle command packet.</comment>

            <if_stmt pos:start="17:13" pos:end="208:31"><if pos:start="17:13" pos:end="208:31">if<condition pos:start="17:15" pos:end="17:55">(<expr pos:start="17:16" pos:end="17:54"><call pos:start="17:16" pos:end="17:42"><name pos:start="17:16" pos:end="17:22">AV_RL32</name><argument_list pos:start="17:23" pos:end="17:42">(<argument pos:start="17:24" pos:end="17:41"><expr pos:start="17:24" pos:end="17:41"><name pos:start="17:24" pos:end="17:37"><name pos:start="17:24" pos:end="17:26">mms</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:37">in_buffer</name></name> <operator pos:start="17:39" pos:end="17:39">+</operator> <literal type="number" pos:start="17:41" pos:end="17:41">4</literal></expr></argument>)</argument_list></call><operator pos:start="17:43" pos:end="17:44">==</operator><literal type="number" pos:start="17:45" pos:end="17:54">0xb00bface</literal></expr>)</condition> <block pos:start="17:57" pos:end="208:31">{<block_content pos:start="19:17" pos:end="208:31">

                <expr_stmt pos:start="19:17" pos:end="19:55"><expr pos:start="19:17" pos:end="19:54"><name pos:start="19:17" pos:end="19:35"><name pos:start="19:17" pos:end="19:19">mms</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:35">incoming_flags</name></name><operator pos:start="19:36" pos:end="19:36">=</operator> <name pos:start="19:38" pos:end="19:54"><name pos:start="19:38" pos:end="19:40">mms</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:51">in_buffer</name><index pos:start="19:52" pos:end="19:54">[<expr pos:start="19:53" pos:end="19:53"><literal type="number" pos:start="19:53" pos:end="19:53">3</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="21:17" pos:end="21:81"><expr pos:start="21:17" pos:end="21:80"><name pos:start="21:17" pos:end="21:27">read_result</name><operator pos:start="21:28" pos:end="21:28">=</operator> <call pos:start="21:30" pos:end="21:80"><name pos:start="21:30" pos:end="21:46">url_read_complete</name><argument_list pos:start="21:47" pos:end="21:80">(<argument pos:start="21:48" pos:end="21:58"><expr pos:start="21:48" pos:end="21:58"><name pos:start="21:48" pos:end="21:58"><name pos:start="21:48" pos:end="21:50">mms</name><operator pos:start="21:51" pos:end="21:52">-&gt;</operator><name pos:start="21:53" pos:end="21:58">mms_hd</name></name></expr></argument>, <argument pos:start="21:61" pos:end="21:76"><expr pos:start="21:61" pos:end="21:76"><name pos:start="21:61" pos:end="21:74"><name pos:start="21:61" pos:end="21:63">mms</name><operator pos:start="21:64" pos:end="21:65">-&gt;</operator><name pos:start="21:66" pos:end="21:74">in_buffer</name></name><operator pos:start="21:75" pos:end="21:75">+</operator><literal type="number" pos:start="21:76" pos:end="21:76">8</literal></expr></argument>, <argument pos:start="21:79" pos:end="21:79"><expr pos:start="21:79" pos:end="21:79"><literal type="number" pos:start="21:79" pos:end="21:79">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="23:17" pos:end="208:31"><if pos:start="23:17" pos:end="208:31">if<condition pos:start="23:19" pos:end="23:36">(<expr pos:start="23:20" pos:end="23:35"><name pos:start="23:20" pos:end="23:30">read_result</name> <operator pos:start="23:32" pos:end="23:33">==</operator> <literal type="number" pos:start="23:35" pos:end="23:35">4</literal></expr>)</condition> <block pos:start="23:38" pos:end="208:31">{<block_content pos:start="25:21" pos:end="208:31">

                    <decl_stmt pos:start="25:21" pos:end="25:72"><decl pos:start="25:21" pos:end="25:71"><type pos:start="25:21" pos:end="25:23"><name pos:start="25:21" pos:end="25:23">int</name></type> <name pos:start="25:25" pos:end="25:40">length_remaining</name><init pos:start="25:41" pos:end="25:71">= <expr pos:start="25:43" pos:end="25:71"><call pos:start="25:43" pos:end="25:67"><name pos:start="25:43" pos:end="25:49">AV_RL32</name><argument_list pos:start="25:50" pos:end="25:67">(<argument pos:start="25:51" pos:end="25:66"><expr pos:start="25:51" pos:end="25:66"><name pos:start="25:51" pos:end="25:64"><name pos:start="25:51" pos:end="25:53">mms</name><operator pos:start="25:54" pos:end="25:55">-&gt;</operator><name pos:start="25:56" pos:end="25:64">in_buffer</name></name><operator pos:start="25:65" pos:end="25:65">+</operator><literal type="number" pos:start="25:66" pos:end="25:66">8</literal></expr></argument>)</argument_list></call> <operator pos:start="25:69" pos:end="25:69">+</operator> <literal type="number" pos:start="25:71" pos:end="25:71">4</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="27:21" pos:end="27:27"><decl pos:start="27:21" pos:end="27:26"><type pos:start="27:21" pos:end="27:23"><name pos:start="27:21" pos:end="27:23">int</name></type> <name pos:start="27:25" pos:end="27:26">hr</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="31:21" pos:end="31:80"><expr pos:start="31:21" pos:end="31:79"><call pos:start="31:21" pos:end="31:79"><name pos:start="31:21" pos:end="31:27">dprintf</name><argument_list pos:start="31:28" pos:end="31:79">(<argument pos:start="31:29" pos:end="31:32"><expr pos:start="31:29" pos:end="31:32"><name pos:start="31:29" pos:end="31:32">NULL</name></expr></argument>, <argument pos:start="31:35" pos:end="31:60"><expr pos:start="31:35" pos:end="31:60"><literal type="string" pos:start="31:35" pos:end="31:60">"Length remaining is %d\n"</literal></expr></argument>, <argument pos:start="31:63" pos:end="31:78"><expr pos:start="31:63" pos:end="31:78"><name pos:start="31:63" pos:end="31:78">length_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line" pos:start="33:21" pos:end="33:51">// read the rest of the packet.</comment>

                    <if_stmt pos:start="35:21" pos:end="208:31"><if pos:start="35:21" pos:end="208:31">if <condition pos:start="35:24" pos:end="37:74">(<expr pos:start="35:25" pos:end="37:73"><name pos:start="35:25" pos:end="37:45"><name pos:start="35:25" pos:end="35:40">length_remaining</name> <argument_list type="generic" pos:start="35:42" pos:end="37:45">&lt; <argument pos:start="35:44" pos:end="37:43"><expr pos:start="35:44" pos:end="37:43"><literal type="number" pos:start="35:44" pos:end="35:44">0</literal>

                        <operator pos:start="37:25" pos:end="37:26">||</operator> <name pos:start="37:28" pos:end="37:43">length_remaining</name></expr></argument> &gt;</argument_list></name> <sizeof pos:start="37:47" pos:end="37:68">sizeof<argument_list pos:start="37:53" pos:end="37:68">(<argument pos:start="37:54" pos:end="37:67"><expr pos:start="37:54" pos:end="37:67"><name pos:start="37:54" pos:end="37:67"><name pos:start="37:54" pos:end="37:56">mms</name><operator pos:start="37:57" pos:end="37:58">-&gt;</operator><name pos:start="37:59" pos:end="37:67">in_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="37:70" pos:end="37:70">-</operator> <literal type="number" pos:start="37:72" pos:end="37:73">12</literal></expr>)</condition> <block pos:start="37:76" pos:end="208:31">{<block_content pos:start="39:25" pos:end="208:31">

                        <expr_stmt pos:start="39:25" pos:end="41:75"><expr pos:start="39:25" pos:end="41:74"><call pos:start="39:25" pos:end="41:74"><name pos:start="39:25" pos:end="39:31">dprintf</name><argument_list pos:start="39:32" pos:end="41:74">(<argument pos:start="39:33" pos:end="39:36"><expr pos:start="39:33" pos:end="39:36"><name pos:start="39:33" pos:end="39:36">NULL</name></expr></argument>, <argument pos:start="39:39" pos:end="39:87"><expr pos:start="39:39" pos:end="39:87"><literal type="string" pos:start="39:39" pos:end="39:87">"Incoming message len %d exceeds buffer len %d\n"</literal></expr></argument>,

                            <argument pos:start="41:29" pos:end="41:44"><expr pos:start="41:29" pos:end="41:44"><name pos:start="41:29" pos:end="41:44">length_remaining</name></expr></argument>, <argument pos:start="41:47" pos:end="41:73"><expr pos:start="41:47" pos:end="41:73"><sizeof pos:start="41:47" pos:end="41:68">sizeof<argument_list pos:start="41:53" pos:end="41:68">(<argument pos:start="41:54" pos:end="41:67"><expr pos:start="41:54" pos:end="41:67"><name pos:start="41:54" pos:end="41:67"><name pos:start="41:54" pos:end="41:56">mms</name><operator pos:start="41:57" pos:end="41:58">-&gt;</operator><name pos:start="41:59" pos:end="41:67">in_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="41:70" pos:end="41:70">-</operator> <literal type="number" pos:start="41:72" pos:end="41:73">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="45:21" pos:end="47:69"><expr pos:start="45:21" pos:end="47:67"><name pos:start="45:21" pos:end="45:31">read_result</name> <operator pos:start="45:33" pos:end="45:33">=</operator> <call pos:start="45:35" pos:end="47:67"><name pos:start="45:35" pos:end="45:51">url_read_complete</name><argument_list pos:start="45:52" pos:end="47:67">(<argument pos:start="45:53" pos:end="45:63"><expr pos:start="45:53" pos:end="45:63"><name pos:start="45:53" pos:end="45:63"><name pos:start="45:53" pos:end="45:55">mms</name><operator pos:start="45:56" pos:end="45:57">-&gt;</operator><name pos:start="45:58" pos:end="45:63">mms_hd</name></name></expr></argument>, <argument pos:start="45:66" pos:end="45:84"><expr pos:start="45:66" pos:end="45:84"><name pos:start="45:66" pos:end="45:79"><name pos:start="45:66" pos:end="45:68">mms</name><operator pos:start="45:69" pos:end="45:70">-&gt;</operator><name pos:start="45:71" pos:end="45:79">in_buffer</name></name> <operator pos:start="45:81" pos:end="45:81">+</operator> <literal type="number" pos:start="45:83" pos:end="45:84">12</literal></expr></argument>,

                                                  <argument pos:start="47:51" pos:end="47:66"><expr pos:start="47:51" pos:end="47:66"><name pos:start="47:51" pos:end="47:66">length_remaining</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                    <if_stmt pos:start="49:21" pos:end="64:17"><if pos:start="49:21" pos:end="53:21">if <condition pos:start="49:24" pos:end="49:56">(<expr pos:start="49:25" pos:end="49:55"><name pos:start="49:25" pos:end="49:35">read_result</name> <operator pos:start="49:37" pos:end="49:38">==</operator> <name pos:start="49:40" pos:end="49:55">length_remaining</name></expr>)</condition> <block pos:start="49:58" pos:end="53:21">{<block_content pos:start="51:25" pos:end="51:64">

                        <expr_stmt pos:start="51:25" pos:end="51:64"><expr pos:start="51:25" pos:end="51:63"><name pos:start="51:25" pos:end="51:35">packet_type</name><operator pos:start="51:36" pos:end="51:36">=</operator> <call pos:start="51:38" pos:end="51:63"><name pos:start="51:38" pos:end="51:44">AV_RL16</name><argument_list pos:start="51:45" pos:end="51:63">(<argument pos:start="51:46" pos:end="51:62"><expr pos:start="51:46" pos:end="51:62"><name pos:start="51:46" pos:end="51:59"><name pos:start="51:46" pos:end="51:48">mms</name><operator pos:start="51:49" pos:end="51:50">-&gt;</operator><name pos:start="51:51" pos:end="51:59">in_buffer</name></name><operator pos:start="51:60" pos:end="51:60">+</operator><literal type="number" pos:start="51:61" pos:end="51:62">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="53:23" pos:end="64:17">else <block pos:start="53:28" pos:end="64:17">{<block_content pos:start="55:25" pos:end="55:87">

                        <expr_stmt pos:start="55:25" pos:end="55:87"><expr pos:start="55:25" pos:end="55:86"><call pos:start="55:25" pos:end="55:86"><name pos:start="55:25" pos:end="55:31">dprintf</name><argument_list pos:start="55:32" pos:end="55:86">(<argument pos:start="55:33" pos:end="55:36"><expr pos:start="55:33" pos:end="55:36"><name pos:start="55:33" pos:end="55:36">NULL</name></expr></argument>, <argument pos:start="55:39" pos:end="55:72"><expr pos:start="55:39" pos:end="55:72"><literal type="string" pos:start="55:39" pos:end="55:72">"read for packet type failed%d!\n"</literal></expr></argument>, <argument pos:start="55:75" pos:end="55:85"><expr pos:start="55:75" pos:end="55:85"><name pos:start="55:75" pos:end="55:85">read_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








                </block_content>}</block></else></if_stmt> <if_stmt pos:start="64:19" pos:end="70:13"><else pos:start="64:19" pos:end="70:13">else <block pos:start="64:24" pos:end="70:13">{<block_content pos:start="66:21" pos:end="66:88">

                    <expr_stmt pos:start="66:21" pos:end="66:88"><expr pos:start="66:21" pos:end="66:87"><call pos:start="66:21" pos:end="66:87"><name pos:start="66:21" pos:end="66:27">dprintf</name><argument_list pos:start="66:28" pos:end="66:87">(<argument pos:start="66:29" pos:end="66:32"><expr pos:start="66:29" pos:end="66:32"><name pos:start="66:29" pos:end="66:32">NULL</name></expr></argument>, <argument pos:start="66:35" pos:end="66:73"><expr pos:start="66:35" pos:end="66:73"><literal type="string" pos:start="66:35" pos:end="66:73">"read for length remaining failed%d!\n"</literal></expr></argument>, <argument pos:start="66:76" pos:end="66:86"><expr pos:start="66:76" pos:end="66:86"><name pos:start="66:76" pos:end="66:86">read_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            </block_content>}</block></else></if_stmt> <if_stmt pos:start="70:15" pos:end="208:31"><else pos:start="70:15" pos:end="208:31">else <block pos:start="70:20" pos:end="208:31">{<block_content pos:start="72:17" pos:end="208:31">

                <decl_stmt pos:start="72:17" pos:end="72:37"><decl pos:start="72:17" pos:end="72:36"><type pos:start="72:17" pos:end="72:19"><name pos:start="72:17" pos:end="72:19">int</name></type> <name pos:start="72:21" pos:end="72:36">length_remaining</name></decl>;</decl_stmt>

                <decl_stmt pos:start="74:17" pos:end="74:35"><decl pos:start="74:17" pos:end="74:34"><type pos:start="74:17" pos:end="74:19"><name pos:start="74:17" pos:end="74:19">int</name></type> <name pos:start="74:21" pos:end="74:34">packet_id_type</name></decl>;</decl_stmt>

                <decl_stmt pos:start="76:17" pos:end="76:24"><decl pos:start="76:17" pos:end="76:23"><type pos:start="76:17" pos:end="76:19"><name pos:start="76:17" pos:end="76:19">int</name></type> <name pos:start="76:21" pos:end="76:23">tmp</name></decl>;</decl_stmt>



                <expr_stmt pos:start="80:17" pos:end="80:49"><expr pos:start="80:17" pos:end="80:48"><call pos:start="80:17" pos:end="80:48"><name pos:start="80:17" pos:end="80:22">assert</name><argument_list pos:start="80:23" pos:end="80:48">(<argument pos:start="80:24" pos:end="80:47"><expr pos:start="80:24" pos:end="80:47"><name pos:start="80:24" pos:end="80:44"><name pos:start="80:24" pos:end="80:26">mms</name><operator pos:start="80:27" pos:end="80:28">-&gt;</operator><name pos:start="80:29" pos:end="80:44">remaining_in_len</name></name><operator pos:start="80:45" pos:end="80:46">==</operator><literal type="number" pos:start="80:47" pos:end="80:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="line" pos:start="84:17" pos:end="84:51">// note we cache the first 8 bytes,</comment>

                <comment type="line" pos:start="86:17" pos:end="86:58">// then fill up the buffer with the others</comment>

                <expr_stmt pos:start="88:17" pos:end="88:72"><expr pos:start="88:17" pos:end="88:71"><name pos:start="88:17" pos:end="88:19">tmp</name>                       <operator pos:start="88:43" pos:end="88:43">=</operator> <call pos:start="88:45" pos:end="88:71"><name pos:start="88:45" pos:end="88:51">AV_RL16</name><argument_list pos:start="88:52" pos:end="88:71">(<argument pos:start="88:53" pos:end="88:70"><expr pos:start="88:53" pos:end="88:70"><name pos:start="88:53" pos:end="88:66"><name pos:start="88:53" pos:end="88:55">mms</name><operator pos:start="88:56" pos:end="88:57">-&gt;</operator><name pos:start="88:58" pos:end="88:66">in_buffer</name></name> <operator pos:start="88:68" pos:end="88:68">+</operator> <literal type="number" pos:start="88:70" pos:end="88:70">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="90:17" pos:end="90:63"><expr pos:start="90:17" pos:end="90:62"><name pos:start="90:17" pos:end="90:32">length_remaining</name>          <operator pos:start="90:43" pos:end="90:43">=</operator> <operator pos:start="90:45" pos:end="90:45">(</operator><name pos:start="90:46" pos:end="90:48">tmp</name> <operator pos:start="90:50" pos:end="90:50">-</operator> <literal type="number" pos:start="90:52" pos:end="90:52">8</literal><operator pos:start="90:53" pos:end="90:53">)</operator> <operator pos:start="90:55" pos:end="90:55">&amp;</operator> <literal type="number" pos:start="90:57" pos:end="90:62">0xffff</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="92:17" pos:end="92:68"><expr pos:start="92:17" pos:end="92:67"><name pos:start="92:17" pos:end="92:40"><name pos:start="92:17" pos:end="92:19">mms</name><operator pos:start="92:20" pos:end="92:21">-&gt;</operator><name pos:start="92:22" pos:end="92:40">incoming_packet_seq</name></name>  <operator pos:start="92:43" pos:end="92:43">=</operator> <call pos:start="92:45" pos:end="92:67"><name pos:start="92:45" pos:end="92:51">AV_RL32</name><argument_list pos:start="92:52" pos:end="92:67">(<argument pos:start="92:53" pos:end="92:66"><expr pos:start="92:53" pos:end="92:66"><name pos:start="92:53" pos:end="92:66"><name pos:start="92:53" pos:end="92:55">mms</name><operator pos:start="92:56" pos:end="92:57">-&gt;</operator><name pos:start="92:58" pos:end="92:66">in_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="94:17" pos:end="94:62"><expr pos:start="94:17" pos:end="94:61"><name pos:start="94:17" pos:end="94:30">packet_id_type</name>            <operator pos:start="94:43" pos:end="94:43">=</operator> <name pos:start="94:45" pos:end="94:61"><name pos:start="94:45" pos:end="94:47">mms</name><operator pos:start="94:48" pos:end="94:49">-&gt;</operator><name pos:start="94:50" pos:end="94:58">in_buffer</name><index pos:start="94:59" pos:end="94:61">[<expr pos:start="94:60" pos:end="94:60"><literal type="number" pos:start="94:60" pos:end="94:60">4</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="96:17" pos:end="96:62"><expr pos:start="96:17" pos:end="96:61"><name pos:start="96:17" pos:end="96:35"><name pos:start="96:17" pos:end="96:19">mms</name><operator pos:start="96:20" pos:end="96:21">-&gt;</operator><name pos:start="96:22" pos:end="96:35">incoming_flags</name></name>       <operator pos:start="96:43" pos:end="96:43">=</operator> <name pos:start="96:45" pos:end="96:61"><name pos:start="96:45" pos:end="96:47">mms</name><operator pos:start="96:48" pos:end="96:49">-&gt;</operator><name pos:start="96:50" pos:end="96:58">in_buffer</name><index pos:start="96:59" pos:end="96:61">[<expr pos:start="96:60" pos:end="96:60"><literal type="number" pos:start="96:60" pos:end="96:60">5</literal></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="100:17" pos:end="208:31"><if pos:start="100:17" pos:end="208:31">if <condition pos:start="100:20" pos:end="102:73">(<expr pos:start="100:21" pos:end="102:72"><name pos:start="100:21" pos:end="102:45"><name pos:start="100:21" pos:end="100:36">length_remaining</name> <argument_list type="generic" pos:start="100:38" pos:end="102:45">&lt; <argument pos:start="100:40" pos:end="102:43"><expr pos:start="100:40" pos:end="102:43"><literal type="number" pos:start="100:40" pos:end="100:40">0</literal>

                        <operator pos:start="102:25" pos:end="102:26">||</operator> <name pos:start="102:28" pos:end="102:43">length_remaining</name></expr></argument> &gt;</argument_list></name> <sizeof pos:start="102:47" pos:end="102:68">sizeof<argument_list pos:start="102:53" pos:end="102:68">(<argument pos:start="102:54" pos:end="102:67"><expr pos:start="102:54" pos:end="102:67"><name pos:start="102:54" pos:end="102:67"><name pos:start="102:54" pos:end="102:56">mms</name><operator pos:start="102:57" pos:end="102:58">-&gt;</operator><name pos:start="102:59" pos:end="102:67">in_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="102:70" pos:end="102:70">-</operator> <literal type="number" pos:start="102:72" pos:end="102:72">8</literal></expr>)</condition> <block pos:start="102:75" pos:end="208:31">{<block_content pos:start="104:21" pos:end="208:31">

                    <expr_stmt pos:start="104:21" pos:end="106:70"><expr pos:start="104:21" pos:end="106:69"><call pos:start="104:21" pos:end="106:69"><name pos:start="104:21" pos:end="104:27">dprintf</name><argument_list pos:start="104:28" pos:end="106:69">(<argument pos:start="104:29" pos:end="104:32"><expr pos:start="104:29" pos:end="104:32"><name pos:start="104:29" pos:end="104:32">NULL</name></expr></argument>, <argument pos:start="104:35" pos:end="104:80"><expr pos:start="104:35" pos:end="104:80"><literal type="string" pos:start="104:35" pos:end="104:80">"Incoming data len %d exceeds buffer len %d\n"</literal></expr></argument>,

                            <argument pos:start="106:29" pos:end="106:44"><expr pos:start="106:29" pos:end="106:44"><name pos:start="106:29" pos:end="106:44">length_remaining</name></expr></argument>, <argument pos:start="106:47" pos:end="106:68"><expr pos:start="106:47" pos:end="106:68"><sizeof pos:start="106:47" pos:end="106:68">sizeof<argument_list pos:start="106:53" pos:end="106:68">(<argument pos:start="106:54" pos:end="106:67"><expr pos:start="106:54" pos:end="106:67"><name pos:start="106:54" pos:end="106:67"><name pos:start="106:54" pos:end="106:56">mms</name><operator pos:start="106:57" pos:end="106:58">-&gt;</operator><name pos:start="106:59" pos:end="106:67">in_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="110:17" pos:end="110:60"><expr pos:start="110:17" pos:end="110:59"><name pos:start="110:17" pos:end="110:37"><name pos:start="110:17" pos:end="110:19">mms</name><operator pos:start="110:20" pos:end="110:21">-&gt;</operator><name pos:start="110:22" pos:end="110:37">remaining_in_len</name></name>    <operator pos:start="110:42" pos:end="110:42">=</operator> <name pos:start="110:44" pos:end="110:59">length_remaining</name></expr>;</expr_stmt>

                <expr_stmt pos:start="112:17" pos:end="112:58"><expr pos:start="112:17" pos:end="112:57"><name pos:start="112:17" pos:end="112:32"><name pos:start="112:17" pos:end="112:19">mms</name><operator pos:start="112:20" pos:end="112:21">-&gt;</operator><name pos:start="112:22" pos:end="112:32">read_in_ptr</name></name>         <operator pos:start="112:42" pos:end="112:42">=</operator> <name pos:start="112:44" pos:end="112:57"><name pos:start="112:44" pos:end="112:46">mms</name><operator pos:start="112:47" pos:end="112:48">-&gt;</operator><name pos:start="112:49" pos:end="112:57">in_buffer</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="114:17" pos:end="114:94"><expr pos:start="114:17" pos:end="114:93"><name pos:start="114:17" pos:end="114:27">read_result</name><operator pos:start="114:28" pos:end="114:28">=</operator> <call pos:start="114:30" pos:end="114:93"><name pos:start="114:30" pos:end="114:46">url_read_complete</name><argument_list pos:start="114:47" pos:end="114:93">(<argument pos:start="114:48" pos:end="114:58"><expr pos:start="114:48" pos:end="114:58"><name pos:start="114:48" pos:end="114:58"><name pos:start="114:48" pos:end="114:50">mms</name><operator pos:start="114:51" pos:end="114:52">-&gt;</operator><name pos:start="114:53" pos:end="114:58">mms_hd</name></name></expr></argument>, <argument pos:start="114:61" pos:end="114:74"><expr pos:start="114:61" pos:end="114:74"><name pos:start="114:61" pos:end="114:74"><name pos:start="114:61" pos:end="114:63">mms</name><operator pos:start="114:64" pos:end="114:65">-&gt;</operator><name pos:start="114:66" pos:end="114:74">in_buffer</name></name></expr></argument>, <argument pos:start="114:77" pos:end="114:92"><expr pos:start="114:77" pos:end="114:92"><name pos:start="114:77" pos:end="114:92">length_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="116:17" pos:end="208:31"><if pos:start="116:17" pos:end="123:17">if<condition pos:start="116:19" pos:end="116:51">(<expr pos:start="116:20" pos:end="116:50"><name pos:start="116:20" pos:end="116:30">read_result</name> <operator pos:start="116:32" pos:end="116:33">!=</operator> <name pos:start="116:35" pos:end="116:50">length_remaining</name></expr>)</condition> <block pos:start="116:53" pos:end="123:17">{<block_content pos:start="118:21" pos:end="120:59">

                    <expr_stmt pos:start="118:21" pos:end="120:59"><expr pos:start="118:21" pos:end="120:58"><call pos:start="118:21" pos:end="120:58"><name pos:start="118:21" pos:end="118:27">dprintf</name><argument_list pos:start="118:28" pos:end="120:58">(<argument pos:start="118:29" pos:end="118:32"><expr pos:start="118:29" pos:end="118:32"><name pos:start="118:29" pos:end="118:32">NULL</name></expr></argument>, <argument pos:start="118:35" pos:end="118:73"><expr pos:start="118:35" pos:end="118:73"><literal type="string" pos:start="118:35" pos:end="118:73">"read_bytes result: %d asking for %d\n"</literal></expr></argument>,

                            <argument pos:start="120:29" pos:end="120:39"><expr pos:start="120:29" pos:end="120:39"><name pos:start="120:29" pos:end="120:39">read_result</name></expr></argument>, <argument pos:start="120:42" pos:end="120:57"><expr pos:start="120:42" pos:end="120:57"><name pos:start="120:42" pos:end="120:57">length_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                </block_content>}</block></if> <else pos:start="123:19" pos:end="208:31">else <block pos:start="123:24" pos:end="208:31">{<block_content pos:start="127:21" pos:end="208:31">

                    <comment type="line" pos:start="125:21" pos:end="125:58">// if we successfully read everything.</comment>

                    <if_stmt pos:start="127:21" pos:end="208:31"><if pos:start="127:21" pos:end="208:31">if<condition pos:start="127:23" pos:end="127:63">(<expr pos:start="127:24" pos:end="127:62"><name pos:start="127:24" pos:end="127:37">packet_id_type</name> <operator pos:start="127:39" pos:end="127:40">==</operator> <name pos:start="127:42" pos:end="127:62"><name pos:start="127:42" pos:end="127:44">mms</name><operator pos:start="127:45" pos:end="127:46">-&gt;</operator><name pos:start="127:47" pos:end="127:62">header_packet_id</name></name></expr>)</condition> <block pos:start="127:65" pos:end="208:31">{<block_content pos:start="129:25" pos:end="208:31">

                        <expr_stmt pos:start="129:25" pos:end="129:56"><expr pos:start="129:25" pos:end="129:55"><name pos:start="129:25" pos:end="129:35">packet_type</name> <operator pos:start="129:37" pos:end="129:37">=</operator> <name pos:start="129:39" pos:end="129:55">SC_PKT_ASF_HEADER</name></expr>;</expr_stmt>

                        <comment type="line" pos:start="131:25" pos:end="131:47">// Store the asf header</comment>

                        <if_stmt pos:start="133:25" pos:end="208:31"><if pos:start="133:25" pos:end="208:31">if<condition pos:start="133:27" pos:end="133:47">(<expr pos:start="133:28" pos:end="133:46"><operator pos:start="133:28" pos:end="133:28">!</operator><name pos:start="133:29" pos:end="133:46"><name pos:start="133:29" pos:end="133:31">mms</name><operator pos:start="133:32" pos:end="133:33">-&gt;</operator><name pos:start="133:34" pos:end="133:46">header_parsed</name></name></expr>)</condition> <block pos:start="133:49" pos:end="208:31">{<block_content pos:start="135:29" pos:end="208:31">

                            <decl_stmt pos:start="135:29" pos:end="139:71"><decl pos:start="135:29" pos:end="139:70"><type pos:start="135:29" pos:end="135:34"><name pos:start="135:29" pos:end="135:32">void</name> <modifier pos:start="135:34" pos:end="135:34">*</modifier></type><name pos:start="135:35" pos:end="135:35">p</name> <init pos:start="135:37" pos:end="139:70">= <expr pos:start="135:39" pos:end="139:70"><call pos:start="135:39" pos:end="139:70"><name pos:start="135:39" pos:end="135:48">av_realloc</name><argument_list pos:start="135:49" pos:end="139:70">(<argument pos:start="135:50" pos:end="135:64"><expr pos:start="135:50" pos:end="135:64"><name pos:start="135:50" pos:end="135:64"><name pos:start="135:50" pos:end="135:52">mms</name><operator pos:start="135:53" pos:end="135:54">-&gt;</operator><name pos:start="135:55" pos:end="135:64">asf_header</name></name></expr></argument>,

                                              <argument pos:start="137:47" pos:end="139:69"><expr pos:start="137:47" pos:end="139:69"><name pos:start="137:47" pos:end="137:66"><name pos:start="137:47" pos:end="137:49">mms</name><operator pos:start="137:50" pos:end="137:51">-&gt;</operator><name pos:start="137:52" pos:end="137:66">asf_header_size</name></name>

                                              <operator pos:start="139:47" pos:end="139:47">+</operator> <name pos:start="139:49" pos:end="139:69"><name pos:start="139:49" pos:end="139:51">mms</name><operator pos:start="139:52" pos:end="139:53">-&gt;</operator><name pos:start="139:54" pos:end="139:69">remaining_in_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="141:29" pos:end="208:31"><if pos:start="141:29" pos:end="159:21">if <condition pos:start="141:32" pos:end="141:35">(<expr pos:start="141:33" pos:end="141:34"><operator pos:start="141:33" pos:end="141:33">!</operator><name pos:start="141:34" pos:end="141:34">p</name></expr>)</condition> <block pos:start="141:37" pos:end="159:21">{<block_content pos:start="143:33" pos:end="156:74">

                                <expr_stmt pos:start="143:33" pos:end="143:59"><expr pos:start="143:33" pos:end="143:58"><call pos:start="143:33" pos:end="143:58"><name pos:start="143:33" pos:end="143:40">av_freep</name><argument_list pos:start="143:41" pos:end="143:58">(<argument pos:start="143:42" pos:end="143:57"><expr pos:start="143:42" pos:end="143:57"><operator pos:start="143:42" pos:end="143:42">&amp;</operator><name pos:start="143:43" pos:end="143:57"><name pos:start="143:43" pos:end="143:45">mms</name><operator pos:start="143:46" pos:end="143:47">-&gt;</operator><name pos:start="143:48" pos:end="143:57">asf_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="145:33" pos:end="145:55">return <expr pos:start="145:40" pos:end="145:54"><call pos:start="145:40" pos:end="145:54"><name pos:start="145:40" pos:end="145:46">AVERROR</name><argument_list pos:start="145:47" pos:end="145:54">(<argument pos:start="145:48" pos:end="145:53"><expr pos:start="145:48" pos:end="145:53"><name pos:start="145:48" pos:end="145:53">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>


                            <expr_stmt pos:start="148:29" pos:end="148:48"><expr pos:start="148:29" pos:end="148:47"><name pos:start="148:29" pos:end="148:43"><name pos:start="148:29" pos:end="148:31">mms</name><operator pos:start="148:32" pos:end="148:33">-&gt;</operator><name pos:start="148:34" pos:end="148:43">asf_header</name></name> <operator pos:start="148:45" pos:end="148:45">=</operator> <name pos:start="148:47" pos:end="148:47">p</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="150:29" pos:end="154:72"><expr pos:start="150:29" pos:end="154:71"><call pos:start="150:29" pos:end="154:71"><name pos:start="150:29" pos:end="150:34">memcpy</name><argument_list pos:start="150:35" pos:end="154:71">(<argument pos:start="150:36" pos:end="150:73"><expr pos:start="150:36" pos:end="150:73"><name pos:start="150:36" pos:end="150:50"><name pos:start="150:36" pos:end="150:38">mms</name><operator pos:start="150:39" pos:end="150:40">-&gt;</operator><name pos:start="150:41" pos:end="150:50">asf_header</name></name> <operator pos:start="150:52" pos:end="150:52">+</operator> <name pos:start="150:54" pos:end="150:73"><name pos:start="150:54" pos:end="150:56">mms</name><operator pos:start="150:57" pos:end="150:58">-&gt;</operator><name pos:start="150:59" pos:end="150:73">asf_header_size</name></name></expr></argument>,

                                                 <argument pos:start="152:50" pos:end="152:65"><expr pos:start="152:50" pos:end="152:65"><name pos:start="152:50" pos:end="152:65"><name pos:start="152:50" pos:end="152:52">mms</name><operator pos:start="152:53" pos:end="152:54">-&gt;</operator><name pos:start="152:55" pos:end="152:65">read_in_ptr</name></name></expr></argument>,

                                                 <argument pos:start="154:50" pos:end="154:70"><expr pos:start="154:50" pos:end="154:70"><name pos:start="154:50" pos:end="154:70"><name pos:start="154:50" pos:end="154:52">mms</name><operator pos:start="154:53" pos:end="154:54">-&gt;</operator><name pos:start="154:55" pos:end="154:70">remaining_in_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="156:29" pos:end="156:74"><expr pos:start="156:29" pos:end="156:73"><name pos:start="156:29" pos:end="156:48"><name pos:start="156:29" pos:end="156:31">mms</name><operator pos:start="156:32" pos:end="156:33">-&gt;</operator><name pos:start="156:34" pos:end="156:48">asf_header_size</name></name> <operator pos:start="156:50" pos:end="156:51">+=</operator> <name pos:start="156:53" pos:end="156:73"><name pos:start="156:53" pos:end="156:55">mms</name><operator pos:start="156:56" pos:end="156:57">-&gt;</operator><name pos:start="156:58" pos:end="156:73">remaining_in_len</name></name></expr>;</expr_stmt>


                    </block_content>}</block></if> <if type="elseif" pos:start="159:23" pos:end="163:21">else if<condition pos:start="159:30" pos:end="159:63">(<expr pos:start="159:31" pos:end="159:62"><name pos:start="159:31" pos:end="159:44">packet_id_type</name> <operator pos:start="159:46" pos:end="159:47">==</operator> <name pos:start="159:49" pos:end="159:62"><name pos:start="159:49" pos:end="159:51">mms</name><operator pos:start="159:52" pos:end="159:53">-&gt;</operator><name pos:start="159:54" pos:end="159:62">packet_id</name></name></expr>)</condition> <block pos:start="159:65" pos:end="163:21">{<block_content pos:start="161:25" pos:end="161:55">

                        <expr_stmt pos:start="161:25" pos:end="161:55"><expr pos:start="161:25" pos:end="161:54"><name pos:start="161:25" pos:end="161:35">packet_type</name> <operator pos:start="161:37" pos:end="161:37">=</operator> <name pos:start="161:39" pos:end="161:54">SC_PKT_ASF_MEDIA</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="163:23" pos:end="208:31">else <block pos:start="163:28" pos:end="208:31">{<block_content pos:start="165:25" pos:end="208:31">

                        <expr_stmt pos:start="165:25" pos:end="165:83"><expr pos:start="165:25" pos:end="165:82"><call pos:start="165:25" pos:end="165:82"><name pos:start="165:25" pos:end="165:31">dprintf</name><argument_list pos:start="165:32" pos:end="165:82">(<argument pos:start="165:33" pos:end="165:36"><expr pos:start="165:33" pos:end="165:36"><name pos:start="165:33" pos:end="165:36">NULL</name></expr></argument>, <argument pos:start="165:39" pos:end="165:65"><expr pos:start="165:39" pos:end="165:65"><literal type="string" pos:start="165:39" pos:end="165:65">"packet id type %d is old."</literal></expr></argument>, <argument pos:start="165:68" pos:end="165:81"><expr pos:start="165:68" pos:end="165:81"><name pos:start="165:68" pos:end="165:81">packet_id_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <continue pos:start="167:25" pos:end="167:33">continue;</continue>






            <comment type="line" pos:start="174:13" pos:end="174:42">// preprocess some packet type</comment>

            <if_stmt pos:start="176:13" pos:end="208:31"><if pos:start="176:13" pos:end="182:13">if<condition pos:start="176:15" pos:end="176:47">(<expr pos:start="176:16" pos:end="176:46"><name pos:start="176:16" pos:end="176:26">packet_type</name> <operator pos:start="176:28" pos:end="176:29">==</operator> <name pos:start="176:31" pos:end="176:46">SC_PKT_KEEPALIVE</name></expr>)</condition> <block pos:start="176:49" pos:end="182:13">{<block_content pos:start="178:17" pos:end="180:25">

                <expr_stmt pos:start="178:17" pos:end="178:43"><expr pos:start="178:17" pos:end="178:42"><call pos:start="178:17" pos:end="178:42"><name pos:start="178:17" pos:end="178:37">send_keepalive_packet</name><argument_list pos:start="178:38" pos:end="178:42">(<argument pos:start="178:39" pos:end="178:41"><expr pos:start="178:39" pos:end="178:41"><name pos:start="178:39" pos:end="178:41">mms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="180:17" pos:end="180:25">continue;</continue>

            </block_content>}</block></if> <if type="elseif" pos:start="182:15" pos:end="186:13">else if<condition pos:start="182:22" pos:end="182:60">(<expr pos:start="182:23" pos:end="182:59"><name pos:start="182:23" pos:end="182:33">packet_type</name> <operator pos:start="182:35" pos:end="182:36">==</operator> <name pos:start="182:38" pos:end="182:59">SC_PKT_STREAM_CHANGING</name></expr>)</condition> <block pos:start="182:62" pos:end="186:13">{<block_content pos:start="184:17" pos:end="184:56">

                <expr_stmt pos:start="184:17" pos:end="184:56"><expr pos:start="184:17" pos:end="184:55"><call pos:start="184:17" pos:end="184:55"><name pos:start="184:17" pos:end="184:50">handle_packet_stream_changing_type</name><argument_list pos:start="184:51" pos:end="184:55">(<argument pos:start="184:52" pos:end="184:54"><expr pos:start="184:52" pos:end="184:54"><name pos:start="184:52" pos:end="184:54">mms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="186:15" pos:end="193:9">else if<condition pos:start="186:22" pos:end="186:54">(<expr pos:start="186:23" pos:end="186:53"><name pos:start="186:23" pos:end="186:33">packet_type</name> <operator pos:start="186:35" pos:end="186:36">==</operator> <name pos:start="186:38" pos:end="186:53">SC_PKT_ASF_MEDIA</name></expr>)</condition> <block pos:start="186:56" pos:end="193:9">{<block_content pos:start="188:17" pos:end="191:31">

                <expr_stmt pos:start="188:17" pos:end="188:38"><expr pos:start="188:17" pos:end="188:37"><call pos:start="188:17" pos:end="188:37"><name pos:start="188:17" pos:end="188:32">pad_media_packet</name><argument_list pos:start="188:33" pos:end="188:37">(<argument pos:start="188:34" pos:end="188:36"><expr pos:start="188:34" pos:end="188:36"><name pos:start="188:34" pos:end="188:36">mms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <return pos:start="191:13" pos:end="191:31">return <expr pos:start="191:20" pos:end="191:30"><name pos:start="191:20" pos:end="191:30">packet_type</name></expr>;</return>

        </block_content>}</block></if> <else pos:start="193:11" pos:end="208:31">else <block pos:start="193:16" pos:end="208:31">{<block_content pos:start="195:13" pos:end="208:31">

            <if_stmt pos:start="195:13" pos:end="208:31"><if pos:start="195:13" pos:end="201:13">if<condition pos:start="195:15" pos:end="195:29">(<expr pos:start="195:16" pos:end="195:28"><name pos:start="195:16" pos:end="195:26">read_result</name><operator pos:start="195:27" pos:end="195:27">&lt;</operator><literal type="number" pos:start="195:28" pos:end="195:28">0</literal></expr>)</condition> <block pos:start="195:31" pos:end="201:13">{<block_content pos:start="197:17" pos:end="199:44">

                <expr_stmt pos:start="197:17" pos:end="197:87"><expr pos:start="197:17" pos:end="197:86"><call pos:start="197:17" pos:end="197:86"><name pos:start="197:17" pos:end="197:23">dprintf</name><argument_list pos:start="197:24" pos:end="197:86">(<argument pos:start="197:25" pos:end="197:28"><expr pos:start="197:25" pos:end="197:28"><name pos:start="197:25" pos:end="197:28">NULL</name></expr></argument>, <argument pos:start="197:31" pos:end="197:72"><expr pos:start="197:31" pos:end="197:72"><literal type="string" pos:start="197:31" pos:end="197:72">"Read error (or cancelled) returned %d!\n"</literal></expr></argument>, <argument pos:start="197:75" pos:end="197:85"><expr pos:start="197:75" pos:end="197:85"><name pos:start="197:75" pos:end="197:85">read_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:44"><expr pos:start="199:17" pos:end="199:43"><name pos:start="199:17" pos:end="199:27">packet_type</name> <operator pos:start="199:29" pos:end="199:29">=</operator> <name pos:start="199:31" pos:end="199:43">SC_PKT_CANCEL</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="201:15" pos:end="208:31">else <block pos:start="201:20" pos:end="208:31">{<block_content pos:start="203:17" pos:end="208:31">

                <expr_stmt pos:start="203:17" pos:end="203:57"><expr pos:start="203:17" pos:end="203:56"><call pos:start="203:17" pos:end="203:56"><name pos:start="203:17" pos:end="203:23">dprintf</name><argument_list pos:start="203:24" pos:end="203:56">(<argument pos:start="203:25" pos:end="203:28"><expr pos:start="203:25" pos:end="203:28"><name pos:start="203:25" pos:end="203:28">NULL</name></expr></argument>, <argument pos:start="203:31" pos:end="203:55"><expr pos:start="203:31" pos:end="203:55"><literal type="string" pos:start="203:31" pos:end="203:55">"Read result of zero?!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:45"><expr pos:start="205:17" pos:end="205:44"><name pos:start="205:17" pos:end="205:27">packet_type</name> <operator pos:start="205:29" pos:end="205:29">=</operator> <name pos:start="205:31" pos:end="205:44">SC_PKT_NO_DATA</name></expr>;</expr_stmt>


            <return pos:start="208:13" pos:end="208:31">return <expr pos:start="208:20" pos:end="208:30"><name pos:start="208:20" pos:end="208:30">packet_type</name></expr>;</return></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></function>


</unit>
