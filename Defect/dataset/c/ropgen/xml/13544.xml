<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13544.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:39">ff_mpeg4_decode_video_packet_header</name><parameter_list pos:start="1:40" pos:end="1:58">(<parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:54">MpegEncContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="183:1">{<block_content pos:start="5:5" pos:end="181:13">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">mb_num_bits</name><init pos:start="5:20" pos:end="5:47">= <expr pos:start="5:22" pos:end="5:47"><call pos:start="5:22" pos:end="5:43"><name pos:start="5:22" pos:end="5:28">av_log2</name><argument_list pos:start="5:29" pos:end="5:43">(<argument pos:start="5:30" pos:end="5:42"><expr pos:start="5:30" pos:end="5:42"><name pos:start="5:30" pos:end="5:38"><name pos:start="5:30" pos:end="5:30">s</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:38">mb_num</name></name> <operator pos:start="5:40" pos:end="5:40">-</operator> <literal type="number" pos:start="5:42" pos:end="5:42">1</literal></expr></argument>)</argument_list></call> <operator pos:start="5:45" pos:end="5:45">+</operator> <literal type="number" pos:start="5:47" pos:end="5:47">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:24">header_extension</name><init pos:start="7:25" pos:end="7:26">=<expr pos:start="7:26" pos:end="7:26"><literal type="number" pos:start="7:26" pos:end="7:26">0</literal></expr></init></decl>, <decl pos:start="7:29" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:29" pos:end="7:34">mb_num</name></decl>, <decl pos:start="7:37" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:37" pos:end="7:39">len</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:64">/* is there enough space left for a video packet + header */</comment>

    <if_stmt pos:start="13:5" pos:end="13:66"><if pos:start="13:5" pos:end="13:66">if<condition pos:start="13:7" pos:end="13:55">( <expr pos:start="13:9" pos:end="13:54"><call pos:start="13:9" pos:end="13:30"><name pos:start="13:9" pos:end="13:22">get_bits_count</name><argument_list pos:start="13:23" pos:end="13:30">(<argument pos:start="13:24" pos:end="13:29"><expr pos:start="13:24" pos:end="13:29"><operator pos:start="13:24" pos:end="13:24">&amp;</operator><name pos:start="13:25" pos:end="13:29"><name pos:start="13:25" pos:end="13:25">s</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:29">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="13:32" pos:end="13:32">&gt;</operator> <name pos:start="13:34" pos:end="13:51"><name pos:start="13:34" pos:end="13:34">s</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:38">gb</name><operator pos:start="13:39" pos:end="13:39">.</operator><name pos:start="13:40" pos:end="13:51">size_in_bits</name></name><operator pos:start="13:52" pos:end="13:52">-</operator><literal type="number" pos:start="13:53" pos:end="13:54">20</literal></expr>)</condition><block type="pseudo" pos:start="13:57" pos:end="13:66"><block_content pos:start="13:57" pos:end="13:66"> <return pos:start="13:57" pos:end="13:66">return <expr pos:start="13:64" pos:end="13:65"><operator pos:start="13:64" pos:end="13:64">-</operator><literal type="number" pos:start="13:65" pos:end="13:65">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="17:5" pos:end="21:5">for<control pos:start="17:8" pos:end="17:29">(<init pos:start="17:9" pos:end="17:14"><expr pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:11">len</name><operator pos:start="17:12" pos:end="17:12">=</operator><literal type="number" pos:start="17:13" pos:end="17:13">0</literal></expr>;</init> <condition pos:start="17:16" pos:end="17:22"><expr pos:start="17:16" pos:end="17:21"><name pos:start="17:16" pos:end="17:18">len</name><operator pos:start="17:19" pos:end="17:19">&lt;</operator><literal type="number" pos:start="17:20" pos:end="17:21">32</literal></expr>;</condition> <incr pos:start="17:24" pos:end="17:28"><expr pos:start="17:24" pos:end="17:28"><name pos:start="17:24" pos:end="17:26">len</name><operator pos:start="17:27" pos:end="17:28">++</operator></expr></incr>)</control><block pos:start="17:30" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:36">

        <if_stmt pos:start="19:9" pos:end="19:36"><if pos:start="19:9" pos:end="19:36">if<condition pos:start="19:11" pos:end="19:29">(<expr pos:start="19:12" pos:end="19:28"><call pos:start="19:12" pos:end="19:28"><name pos:start="19:12" pos:end="19:20">get_bits1</name><argument_list pos:start="19:21" pos:end="19:28">(<argument pos:start="19:22" pos:end="19:27"><expr pos:start="19:22" pos:end="19:27"><operator pos:start="19:22" pos:end="19:22">&amp;</operator><name pos:start="19:23" pos:end="19:27"><name pos:start="19:23" pos:end="19:23">s</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:27">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:31" pos:end="19:36"><block_content pos:start="19:31" pos:end="19:36"> <break pos:start="19:31" pos:end="19:36">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if<condition pos:start="25:7" pos:end="25:55">(<expr pos:start="25:8" pos:end="25:54"><name pos:start="25:8" pos:end="25:10">len</name><operator pos:start="25:11" pos:end="25:12">!=</operator><call pos:start="25:13" pos:end="25:54"><name pos:start="25:13" pos:end="25:51">ff_mpeg4_get_video_packet_prefix_length</name><argument_list pos:start="25:52" pos:end="25:54">(<argument pos:start="25:53" pos:end="25:53"><expr pos:start="25:53" pos:end="25:53"><name pos:start="25:53" pos:end="25:53">s</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="25:56" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:73"><expr pos:start="27:9" pos:end="27:72"><call pos:start="27:9" pos:end="27:72"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:72">(<argument pos:start="27:16" pos:end="27:23"><expr pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:16">s</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:23">avctx</name></name></expr></argument>, <argument pos:start="27:26" pos:end="27:37"><expr pos:start="27:26" pos:end="27:37"><name pos:start="27:26" pos:end="27:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:40" pos:end="27:71"><expr pos:start="27:40" pos:end="27:71"><literal type="string" pos:start="27:40" pos:end="27:71">"marker does not match f_code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if<condition pos:start="35:7" pos:end="35:30">(<expr pos:start="35:8" pos:end="35:29"><name pos:start="35:8" pos:end="35:15"><name pos:start="35:8" pos:end="35:8">s</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:15">shape</name></name> <operator pos:start="35:17" pos:end="35:18">!=</operator> <name pos:start="35:20" pos:end="35:29">RECT_SHAPE</name></expr>)</condition><block pos:start="35:31" pos:end="41:5">{<block_content pos:start="37:9" pos:end="37:44">

        <expr_stmt pos:start="37:9" pos:end="37:44"><expr pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:24">header_extension</name><operator pos:start="37:25" pos:end="37:25">=</operator> <call pos:start="37:27" pos:end="37:43"><name pos:start="37:27" pos:end="37:35">get_bits1</name><argument_list pos:start="37:36" pos:end="37:43">(<argument pos:start="37:37" pos:end="37:42"><expr pos:start="37:37" pos:end="37:42"><operator pos:start="37:37" pos:end="37:37">&amp;</operator><name pos:start="37:38" pos:end="37:42"><name pos:start="37:38" pos:end="37:38">s</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:42">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="39:9" pos:end="39:31">//FIXME more stuff here</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:42"><expr pos:start="45:5" pos:end="45:41"><name pos:start="45:5" pos:end="45:10">mb_num</name><operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:41"><name pos:start="45:13" pos:end="45:20">get_bits</name><argument_list pos:start="45:21" pos:end="45:41">(<argument pos:start="45:22" pos:end="45:27"><expr pos:start="45:22" pos:end="45:27"><operator pos:start="45:22" pos:end="45:22">&amp;</operator><name pos:start="45:23" pos:end="45:27"><name pos:start="45:23" pos:end="45:23">s</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:27">gb</name></name></expr></argument>, <argument pos:start="45:30" pos:end="45:40"><expr pos:start="45:30" pos:end="45:40"><name pos:start="45:30" pos:end="45:40">mb_num_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if<condition pos:start="47:7" pos:end="47:25">(<expr pos:start="47:8" pos:end="47:24"><name pos:start="47:8" pos:end="47:13">mb_num</name><operator pos:start="47:14" pos:end="47:15">&gt;=</operator><name pos:start="47:16" pos:end="47:24"><name pos:start="47:16" pos:end="47:16">s</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:24">mb_num</name></name></expr>)</condition><block pos:start="47:26" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:103"><expr pos:start="49:9" pos:end="49:102"><call pos:start="49:9" pos:end="49:102"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:102">(<argument pos:start="49:16" pos:end="49:23"><expr pos:start="49:16" pos:end="49:23"><name pos:start="49:16" pos:end="49:23"><name pos:start="49:16" pos:end="49:16">s</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:23">avctx</name></name></expr></argument>, <argument pos:start="49:26" pos:end="49:37"><expr pos:start="49:26" pos:end="49:37"><name pos:start="49:26" pos:end="49:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:40" pos:end="49:82"><expr pos:start="49:40" pos:end="49:82"><literal type="string" pos:start="49:40" pos:end="49:82">"illegal mb_num in video packet (%d %d) \n"</literal></expr></argument>, <argument pos:start="49:85" pos:end="49:90"><expr pos:start="49:85" pos:end="49:90"><name pos:start="49:85" pos:end="49:90">mb_num</name></expr></argument>, <argument pos:start="49:93" pos:end="49:101"><expr pos:start="49:93" pos:end="49:101"><name pos:start="49:93" pos:end="49:101"><name pos:start="49:93" pos:end="49:93">s</name><operator pos:start="49:94" pos:end="49:95">-&gt;</operator><name pos:start="49:96" pos:end="49:101">mb_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="75:5"><if pos:start="55:5" pos:end="75:5">if<condition pos:start="55:7" pos:end="55:41">(<expr pos:start="55:8" pos:end="55:40"><name pos:start="55:8" pos:end="55:19"><name pos:start="55:8" pos:end="55:8">s</name><operator pos:start="55:9" pos:end="55:10">-&gt;</operator><name pos:start="55:11" pos:end="55:19">pict_type</name></name> <operator pos:start="55:21" pos:end="55:22">==</operator> <name pos:start="55:24" pos:end="55:40">AV_PICTURE_TYPE_B</name></expr>)</condition><block pos:start="55:42" pos:end="75:5">{<block_content pos:start="57:9" pos:end="73:42">

        <decl_stmt pos:start="57:9" pos:end="57:31"><decl pos:start="57:9" pos:end="57:20"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:16">mb_x</name> <init pos:start="57:18" pos:end="57:20">= <expr pos:start="57:20" pos:end="57:20"><literal type="number" pos:start="57:20" pos:end="57:20">0</literal></expr></init></decl>, <decl pos:start="57:23" pos:end="57:30"><type ref="prev" pos:start="57:9" pos:end="57:11"/><name pos:start="57:23" pos:end="57:26">mb_y</name> <init pos:start="57:28" pos:end="57:30">= <expr pos:start="57:30" pos:end="57:30"><literal type="number" pos:start="57:30" pos:end="57:30">0</literal></expr></init></decl>;</decl_stmt>



        <while pos:start="61:9" pos:end="71:9">while <condition pos:start="61:15" pos:end="61:68">(<expr pos:start="61:16" pos:end="61:67"><name pos:start="61:16" pos:end="61:67"><name pos:start="61:16" pos:end="61:16">s</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:30">next_picture</name><operator pos:start="61:31" pos:end="61:31">.</operator><name pos:start="61:32" pos:end="61:43">mbskip_table</name><index pos:start="61:44" pos:end="61:67">[<expr pos:start="61:45" pos:end="61:66"><name pos:start="61:45" pos:end="61:66"><name pos:start="61:45" pos:end="61:45">s</name><operator pos:start="61:46" pos:end="61:47">-&gt;</operator><name pos:start="61:48" pos:end="61:58">mb_index2xy</name><index pos:start="61:59" pos:end="61:66">[<expr pos:start="61:60" pos:end="61:65"><name pos:start="61:60" pos:end="61:65">mb_num</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block pos:start="61:70" pos:end="71:9">{<block_content pos:start="63:13" pos:end="69:48">

            <if_stmt pos:start="63:13" pos:end="65:78"><if pos:start="63:13" pos:end="65:78">if <condition pos:start="63:16" pos:end="63:22">(<expr pos:start="63:17" pos:end="63:21"><operator pos:start="63:17" pos:end="63:17">!</operator><name pos:start="63:18" pos:end="63:21">mb_x</name></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:78"><block_content pos:start="65:17" pos:end="65:78">

                <expr_stmt pos:start="65:17" pos:end="65:78"><expr pos:start="65:17" pos:end="65:77"><call pos:start="65:17" pos:end="65:77"><name pos:start="65:17" pos:end="65:40">ff_thread_await_progress</name><argument_list pos:start="65:41" pos:end="65:77">(<argument pos:start="65:42" pos:end="65:65"><expr pos:start="65:42" pos:end="65:65"><operator pos:start="65:42" pos:end="65:42">&amp;</operator><name pos:start="65:43" pos:end="65:65"><name pos:start="65:43" pos:end="65:43">s</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:61">next_picture_ptr</name><operator pos:start="65:62" pos:end="65:63">-&gt;</operator><name pos:start="65:64" pos:end="65:65">tf</name></name></expr></argument>, <argument pos:start="65:68" pos:end="65:73"><expr pos:start="65:68" pos:end="65:73"><name pos:start="65:68" pos:end="65:71">mb_y</name><operator pos:start="65:72" pos:end="65:73">++</operator></expr></argument>, <argument pos:start="65:76" pos:end="65:76"><expr pos:start="65:76" pos:end="65:76"><literal type="number" pos:start="65:76" pos:end="65:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:21"><expr pos:start="67:13" pos:end="67:20"><name pos:start="67:13" pos:end="67:18">mb_num</name><operator pos:start="67:19" pos:end="67:20">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="69:13" pos:end="69:48"><if pos:start="69:13" pos:end="69:48">if <condition pos:start="69:16" pos:end="69:38">(<expr pos:start="69:17" pos:end="69:37"><operator pos:start="69:17" pos:end="69:18">++</operator><name pos:start="69:19" pos:end="69:22">mb_x</name> <operator pos:start="69:24" pos:end="69:25">==</operator> <name pos:start="69:27" pos:end="69:37"><name pos:start="69:27" pos:end="69:27">s</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:37">mb_width</name></name></expr>)</condition><block type="pseudo" pos:start="69:40" pos:end="69:48"><block_content pos:start="69:40" pos:end="69:48"> <expr_stmt pos:start="69:40" pos:end="69:48"><expr pos:start="69:40" pos:end="69:47"><name pos:start="69:40" pos:end="69:43">mb_x</name> <operator pos:start="69:45" pos:end="69:45">=</operator> <literal type="number" pos:start="69:47" pos:end="69:47">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="73:9" pos:end="73:42"><if pos:start="73:9" pos:end="73:42">if<condition pos:start="73:11" pos:end="73:31">(<expr pos:start="73:12" pos:end="73:30"><name pos:start="73:12" pos:end="73:17">mb_num</name> <operator pos:start="73:19" pos:end="73:20">&gt;=</operator> <name pos:start="73:22" pos:end="73:30"><name pos:start="73:22" pos:end="73:22">s</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:30">mb_num</name></name></expr>)</condition><block type="pseudo" pos:start="73:33" pos:end="73:42"><block_content pos:start="73:33" pos:end="73:42"> <return pos:start="73:33" pos:end="73:42">return <expr pos:start="73:40" pos:end="73:41"><operator pos:start="73:40" pos:end="73:40">-</operator><literal type="number" pos:start="73:41" pos:end="73:41">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="73:44" pos:end="73:105">// slice contains just skipped MBs which where already decoded</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:34"><expr pos:start="79:5" pos:end="79:33"><name pos:start="79:5" pos:end="79:11"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:11">mb_x</name></name><operator pos:start="79:12" pos:end="79:12">=</operator> <name pos:start="79:14" pos:end="79:19">mb_num</name> <operator pos:start="79:21" pos:end="79:21">%</operator> <name pos:start="79:23" pos:end="79:33"><name pos:start="79:23" pos:end="79:23">s</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:33">mb_width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:34"><expr pos:start="81:5" pos:end="81:33"><name pos:start="81:5" pos:end="81:11"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:11">mb_y</name></name><operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:19">mb_num</name> <operator pos:start="81:21" pos:end="81:21">/</operator> <name pos:start="81:23" pos:end="81:33"><name pos:start="81:23" pos:end="81:23">s</name><operator pos:start="81:24" pos:end="81:25">-&gt;</operator><name pos:start="81:26" pos:end="81:33">mb_width</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="93:5">if<condition pos:start="85:7" pos:end="85:34">(<expr pos:start="85:8" pos:end="85:33"><name pos:start="85:8" pos:end="85:15"><name pos:start="85:8" pos:end="85:8">s</name><operator pos:start="85:9" pos:end="85:10">-&gt;</operator><name pos:start="85:11" pos:end="85:15">shape</name></name> <operator pos:start="85:17" pos:end="85:18">!=</operator> <name pos:start="85:20" pos:end="85:33">BIN_ONLY_SHAPE</name></expr>)</condition><block pos:start="85:35" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:47">

        <decl_stmt pos:start="87:9" pos:end="87:57"><decl pos:start="87:9" pos:end="87:56"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:18">qscale</name><init pos:start="87:19" pos:end="87:56">= <expr pos:start="87:21" pos:end="87:56"><call pos:start="87:21" pos:end="87:56"><name pos:start="87:21" pos:end="87:28">get_bits</name><argument_list pos:start="87:29" pos:end="87:56">(<argument pos:start="87:30" pos:end="87:35"><expr pos:start="87:30" pos:end="87:35"><operator pos:start="87:30" pos:end="87:30">&amp;</operator><name pos:start="87:31" pos:end="87:35"><name pos:start="87:31" pos:end="87:31">s</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:35">gb</name></name></expr></argument>, <argument pos:start="87:38" pos:end="87:55"><expr pos:start="87:38" pos:end="87:55"><name pos:start="87:38" pos:end="87:55"><name pos:start="87:38" pos:end="87:38">s</name><operator pos:start="87:39" pos:end="87:40">-&gt;</operator><name pos:start="87:41" pos:end="87:55">quant_precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="89:9" pos:end="91:47"><if pos:start="89:9" pos:end="91:47">if<condition pos:start="89:11" pos:end="89:18">(<expr pos:start="89:12" pos:end="89:17"><name pos:start="89:12" pos:end="89:17">qscale</name></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:47"><block_content pos:start="91:13" pos:end="91:47">

            <expr_stmt pos:start="91:13" pos:end="91:47"><expr pos:start="91:13" pos:end="91:46"><name pos:start="91:13" pos:end="91:28"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:28">chroma_qscale</name></name><operator pos:start="91:29" pos:end="91:29">=</operator><name pos:start="91:30" pos:end="91:38"><name pos:start="91:30" pos:end="91:30">s</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:38">qscale</name></name><operator pos:start="91:39" pos:end="91:39">=</operator> <name pos:start="91:41" pos:end="91:46">qscale</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if<condition pos:start="97:7" pos:end="97:30">(<expr pos:start="97:8" pos:end="97:29"><name pos:start="97:8" pos:end="97:15"><name pos:start="97:8" pos:end="97:8">s</name><operator pos:start="97:9" pos:end="97:10">-&gt;</operator><name pos:start="97:11" pos:end="97:15">shape</name></name> <operator pos:start="97:17" pos:end="97:18">==</operator> <name pos:start="97:20" pos:end="97:29">RECT_SHAPE</name></expr>)</condition><block pos:start="97:31" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:44">

        <expr_stmt pos:start="99:9" pos:end="99:44"><expr pos:start="99:9" pos:end="99:43"><name pos:start="99:9" pos:end="99:24">header_extension</name><operator pos:start="99:25" pos:end="99:25">=</operator> <call pos:start="99:27" pos:end="99:43"><name pos:start="99:27" pos:end="99:35">get_bits1</name><argument_list pos:start="99:36" pos:end="99:43">(<argument pos:start="99:37" pos:end="99:42"><expr pos:start="99:37" pos:end="99:42"><operator pos:start="99:37" pos:end="99:37">&amp;</operator><name pos:start="99:38" pos:end="99:42"><name pos:start="99:38" pos:end="99:38">s</name><operator pos:start="99:39" pos:end="99:40">-&gt;</operator><name pos:start="99:41" pos:end="99:42">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="103:5" pos:end="175:5"><if pos:start="103:5" pos:end="175:5">if<condition pos:start="103:7" pos:end="103:24">(<expr pos:start="103:8" pos:end="103:23"><name pos:start="103:8" pos:end="103:23">header_extension</name></expr>)</condition><block pos:start="103:25" pos:end="175:5">{<block_content pos:start="105:9" pos:end="173:9">

        <decl_stmt pos:start="105:9" pos:end="105:24"><decl pos:start="105:9" pos:end="105:23"><type pos:start="105:9" pos:end="105:11"><name pos:start="105:9" pos:end="105:11">int</name></type> <name pos:start="105:13" pos:end="105:21">time_incr</name><init pos:start="105:22" pos:end="105:23">=<expr pos:start="105:23" pos:end="105:23"><literal type="number" pos:start="105:23" pos:end="105:23">0</literal></expr></init></decl>;</decl_stmt>



        <while pos:start="109:9" pos:end="111:24">while <condition pos:start="109:15" pos:end="109:38">(<expr pos:start="109:16" pos:end="109:37"><call pos:start="109:16" pos:end="109:32"><name pos:start="109:16" pos:end="109:24">get_bits1</name><argument_list pos:start="109:25" pos:end="109:32">(<argument pos:start="109:26" pos:end="109:31"><expr pos:start="109:26" pos:end="109:31"><operator pos:start="109:26" pos:end="109:26">&amp;</operator><name pos:start="109:27" pos:end="109:31"><name pos:start="109:27" pos:end="109:27">s</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:31">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="109:34" pos:end="109:35">!=</operator> <literal type="number" pos:start="109:37" pos:end="109:37">0</literal></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:24"><block_content pos:start="111:13" pos:end="111:24">

            <expr_stmt pos:start="111:13" pos:end="111:24"><expr pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:21">time_incr</name><operator pos:start="111:22" pos:end="111:23">++</operator></expr>;</expr_stmt></block_content></block></while>



        <expr_stmt pos:start="115:9" pos:end="115:77"><expr pos:start="115:9" pos:end="115:76"><call pos:start="115:9" pos:end="115:76"><name pos:start="115:9" pos:end="115:20">check_marker</name><argument_list pos:start="115:21" pos:end="115:76">(<argument pos:start="115:22" pos:end="115:27"><expr pos:start="115:22" pos:end="115:27"><operator pos:start="115:22" pos:end="115:22">&amp;</operator><name pos:start="115:23" pos:end="115:27"><name pos:start="115:23" pos:end="115:23">s</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:27">gb</name></name></expr></argument>, <argument pos:start="115:30" pos:end="115:75"><expr pos:start="115:30" pos:end="115:75"><literal type="string" pos:start="115:30" pos:end="115:75">"before time_increment in video packed header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:50"><expr pos:start="117:9" pos:end="117:49"><call pos:start="117:9" pos:end="117:49"><name pos:start="117:9" pos:end="117:17">skip_bits</name><argument_list pos:start="117:18" pos:end="117:49">(<argument pos:start="117:19" pos:end="117:24"><expr pos:start="117:19" pos:end="117:24"><operator pos:start="117:19" pos:end="117:19">&amp;</operator><name pos:start="117:20" pos:end="117:24"><name pos:start="117:20" pos:end="117:20">s</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:24">gb</name></name></expr></argument>, <argument pos:start="117:27" pos:end="117:48"><expr pos:start="117:27" pos:end="117:48"><name pos:start="117:27" pos:end="117:48"><name pos:start="117:27" pos:end="117:27">s</name><operator pos:start="117:28" pos:end="117:29">-&gt;</operator><name pos:start="117:30" pos:end="117:48">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="117:52" pos:end="117:71">/* time_increment */</comment>

        <expr_stmt pos:start="119:9" pos:end="119:78"><expr pos:start="119:9" pos:end="119:77"><call pos:start="119:9" pos:end="119:77"><name pos:start="119:9" pos:end="119:20">check_marker</name><argument_list pos:start="119:21" pos:end="119:77">(<argument pos:start="119:22" pos:end="119:27"><expr pos:start="119:22" pos:end="119:27"><operator pos:start="119:22" pos:end="119:22">&amp;</operator><name pos:start="119:23" pos:end="119:27"><name pos:start="119:23" pos:end="119:23">s</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:27">gb</name></name></expr></argument>, <argument pos:start="119:30" pos:end="119:76"><expr pos:start="119:30" pos:end="119:76"><literal type="string" pos:start="119:30" pos:end="119:76">"before vop_coding_type in video packed header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="123:9" pos:end="123:29"><expr pos:start="123:9" pos:end="123:28"><call pos:start="123:9" pos:end="123:28"><name pos:start="123:9" pos:end="123:17">skip_bits</name><argument_list pos:start="123:18" pos:end="123:28">(<argument pos:start="123:19" pos:end="123:24"><expr pos:start="123:19" pos:end="123:24"><operator pos:start="123:19" pos:end="123:19">&amp;</operator><name pos:start="123:20" pos:end="123:24"><name pos:start="123:20" pos:end="123:20">s</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:24">gb</name></name></expr></argument>, <argument pos:start="123:27" pos:end="123:27"><expr pos:start="123:27" pos:end="123:27"><literal type="number" pos:start="123:27" pos:end="123:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="123:31" pos:end="123:51">/* vop coding type */</comment>

        <comment type="line" pos:start="125:9" pos:end="125:35">//FIXME not rect stuff here</comment>



        <if_stmt pos:start="129:9" pos:end="173:9"><if pos:start="129:9" pos:end="173:9">if<condition pos:start="129:11" pos:end="129:38">(<expr pos:start="129:12" pos:end="129:37"><name pos:start="129:12" pos:end="129:19"><name pos:start="129:12" pos:end="129:12">s</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:19">shape</name></name> <operator pos:start="129:21" pos:end="129:22">!=</operator> <name pos:start="129:24" pos:end="129:37">BIN_ONLY_SHAPE</name></expr>)</condition><block pos:start="129:39" pos:end="173:9">{<block_content pos:start="131:13" pos:end="171:13">

            <expr_stmt pos:start="131:13" pos:end="131:33"><expr pos:start="131:13" pos:end="131:32"><call pos:start="131:13" pos:end="131:32"><name pos:start="131:13" pos:end="131:21">skip_bits</name><argument_list pos:start="131:22" pos:end="131:32">(<argument pos:start="131:23" pos:end="131:28"><expr pos:start="131:23" pos:end="131:28"><operator pos:start="131:23" pos:end="131:23">&amp;</operator><name pos:start="131:24" pos:end="131:28"><name pos:start="131:24" pos:end="131:24">s</name><operator pos:start="131:25" pos:end="131:26">-&gt;</operator><name pos:start="131:27" pos:end="131:28">gb</name></name></expr></argument>, <argument pos:start="131:31" pos:end="131:31"><expr pos:start="131:31" pos:end="131:31"><literal type="number" pos:start="131:31" pos:end="131:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="131:35" pos:end="131:62">/* intra dc vlc threshold */</comment>

<comment type="line" pos:start="133:1" pos:end="133:36">//FIXME don't just ignore everything</comment>

            <if_stmt pos:start="135:13" pos:end="141:13"><if pos:start="135:13" pos:end="141:13">if<condition pos:start="135:15" pos:end="135:84">(<expr pos:start="135:16" pos:end="135:83"><name pos:start="135:16" pos:end="135:27"><name pos:start="135:16" pos:end="135:16">s</name><operator pos:start="135:17" pos:end="135:18">-&gt;</operator><name pos:start="135:19" pos:end="135:27">pict_type</name></name> <operator pos:start="135:29" pos:end="135:30">==</operator> <name pos:start="135:32" pos:end="135:48">AV_PICTURE_TYPE_S</name> <operator pos:start="135:50" pos:end="135:51">&amp;&amp;</operator> <name pos:start="135:53" pos:end="135:71"><name pos:start="135:53" pos:end="135:53">s</name><operator pos:start="135:54" pos:end="135:55">-&gt;</operator><name pos:start="135:56" pos:end="135:71">vol_sprite_usage</name></name><operator pos:start="135:72" pos:end="135:73">==</operator><name pos:start="135:74" pos:end="135:83">GMC_SPRITE</name></expr>)</condition><block pos:start="135:85" pos:end="141:13">{<block_content pos:start="137:17" pos:end="139:61">

                <expr_stmt pos:start="137:17" pos:end="137:58"><expr pos:start="137:17" pos:end="137:57"><call pos:start="137:17" pos:end="137:57"><name pos:start="137:17" pos:end="137:46">mpeg4_decode_sprite_trajectory</name><argument_list pos:start="137:47" pos:end="137:57">(<argument pos:start="137:48" pos:end="137:48"><expr pos:start="137:48" pos:end="137:48"><name pos:start="137:48" pos:end="137:48">s</name></expr></argument>, <argument pos:start="137:51" pos:end="137:56"><expr pos:start="137:51" pos:end="137:56"><operator pos:start="137:51" pos:end="137:51">&amp;</operator><name pos:start="137:52" pos:end="137:56"><name pos:start="137:52" pos:end="137:52">s</name><operator pos:start="137:53" pos:end="137:54">-&gt;</operator><name pos:start="137:55" pos:end="137:56">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:61"><expr pos:start="139:17" pos:end="139:60"><call pos:start="139:17" pos:end="139:60"><name pos:start="139:17" pos:end="139:22">av_log</name><argument_list pos:start="139:23" pos:end="139:60">(<argument pos:start="139:24" pos:end="139:31"><expr pos:start="139:24" pos:end="139:31"><name pos:start="139:24" pos:end="139:31"><name pos:start="139:24" pos:end="139:24">s</name><operator pos:start="139:25" pos:end="139:26">-&gt;</operator><name pos:start="139:27" pos:end="139:31">avctx</name></name></expr></argument>, <argument pos:start="139:34" pos:end="139:45"><expr pos:start="139:34" pos:end="139:45"><name pos:start="139:34" pos:end="139:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:48" pos:end="139:59"><expr pos:start="139:48" pos:end="139:59"><literal type="string" pos:start="139:48" pos:end="139:59">"untested\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="line" pos:start="145:13" pos:end="145:42">//FIXME reduced res stuff here</comment>



            <if_stmt pos:start="149:13" pos:end="159:13"><if pos:start="149:13" pos:end="159:13">if <condition pos:start="149:16" pos:end="149:50">(<expr pos:start="149:17" pos:end="149:49"><name pos:start="149:17" pos:end="149:28"><name pos:start="149:17" pos:end="149:17">s</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:28">pict_type</name></name> <operator pos:start="149:30" pos:end="149:31">!=</operator> <name pos:start="149:33" pos:end="149:49">AV_PICTURE_TYPE_I</name></expr>)</condition> <block pos:start="149:52" pos:end="159:13">{<block_content pos:start="151:17" pos:end="157:17">

                <decl_stmt pos:start="151:17" pos:end="151:49"><decl pos:start="151:17" pos:end="151:48"><type pos:start="151:17" pos:end="151:19"><name pos:start="151:17" pos:end="151:19">int</name></type> <name pos:start="151:21" pos:end="151:26">f_code</name> <init pos:start="151:28" pos:end="151:48">= <expr pos:start="151:30" pos:end="151:48"><call pos:start="151:30" pos:end="151:48"><name pos:start="151:30" pos:end="151:37">get_bits</name><argument_list pos:start="151:38" pos:end="151:48">(<argument pos:start="151:39" pos:end="151:44"><expr pos:start="151:39" pos:end="151:44"><operator pos:start="151:39" pos:end="151:39">&amp;</operator><name pos:start="151:40" pos:end="151:44"><name pos:start="151:40" pos:end="151:40">s</name><operator pos:start="151:41" pos:end="151:42">-&gt;</operator><name pos:start="151:43" pos:end="151:44">gb</name></name></expr></argument>, <argument pos:start="151:47" pos:end="151:47"><expr pos:start="151:47" pos:end="151:47"><literal type="number" pos:start="151:47" pos:end="151:47">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>       <comment type="block" pos:start="151:57" pos:end="151:71">/* fcode_for */</comment>

                <if_stmt pos:start="153:17" pos:end="157:17"><if pos:start="153:17" pos:end="157:17">if<condition pos:start="153:19" pos:end="153:29">(<expr pos:start="153:20" pos:end="153:28"><name pos:start="153:20" pos:end="153:25">f_code</name><operator pos:start="153:26" pos:end="153:27">==</operator><literal type="number" pos:start="153:28" pos:end="153:28">0</literal></expr>)</condition><block pos:start="153:30" pos:end="157:17">{<block_content pos:start="155:21" pos:end="155:102">

                    <expr_stmt pos:start="155:21" pos:end="155:102"><expr pos:start="155:21" pos:end="155:101"><call pos:start="155:21" pos:end="155:101"><name pos:start="155:21" pos:end="155:26">av_log</name><argument_list pos:start="155:27" pos:end="155:101">(<argument pos:start="155:28" pos:end="155:35"><expr pos:start="155:28" pos:end="155:35"><name pos:start="155:28" pos:end="155:35"><name pos:start="155:28" pos:end="155:28">s</name><operator pos:start="155:29" pos:end="155:30">-&gt;</operator><name pos:start="155:31" pos:end="155:35">avctx</name></name></expr></argument>, <argument pos:start="155:38" pos:end="155:49"><expr pos:start="155:38" pos:end="155:49"><name pos:start="155:38" pos:end="155:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="155:52" pos:end="155:100"><expr pos:start="155:52" pos:end="155:100"><literal type="string" pos:start="155:52" pos:end="155:100">"Error, video packet header damaged (f_code=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="161:13" pos:end="171:13"><if pos:start="161:13" pos:end="171:13">if <condition pos:start="161:16" pos:end="161:50">(<expr pos:start="161:17" pos:end="161:49"><name pos:start="161:17" pos:end="161:28"><name pos:start="161:17" pos:end="161:17">s</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:28">pict_type</name></name> <operator pos:start="161:30" pos:end="161:31">==</operator> <name pos:start="161:33" pos:end="161:49">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="161:52" pos:end="171:13">{<block_content pos:start="163:17" pos:end="169:17">

                <decl_stmt pos:start="163:17" pos:end="163:49"><decl pos:start="163:17" pos:end="163:48"><type pos:start="163:17" pos:end="163:19"><name pos:start="163:17" pos:end="163:19">int</name></type> <name pos:start="163:21" pos:end="163:26">b_code</name> <init pos:start="163:28" pos:end="163:48">= <expr pos:start="163:30" pos:end="163:48"><call pos:start="163:30" pos:end="163:48"><name pos:start="163:30" pos:end="163:37">get_bits</name><argument_list pos:start="163:38" pos:end="163:48">(<argument pos:start="163:39" pos:end="163:44"><expr pos:start="163:39" pos:end="163:44"><operator pos:start="163:39" pos:end="163:39">&amp;</operator><name pos:start="163:40" pos:end="163:44"><name pos:start="163:40" pos:end="163:40">s</name><operator pos:start="163:41" pos:end="163:42">-&gt;</operator><name pos:start="163:43" pos:end="163:44">gb</name></name></expr></argument>, <argument pos:start="163:47" pos:end="163:47"><expr pos:start="163:47" pos:end="163:47"><literal type="number" pos:start="163:47" pos:end="163:47">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="165:17" pos:end="169:17"><if pos:start="165:17" pos:end="169:17">if<condition pos:start="165:19" pos:end="165:29">(<expr pos:start="165:20" pos:end="165:28"><name pos:start="165:20" pos:end="165:25">b_code</name><operator pos:start="165:26" pos:end="165:27">==</operator><literal type="number" pos:start="165:28" pos:end="165:28">0</literal></expr>)</condition><block pos:start="165:30" pos:end="169:17">{<block_content pos:start="167:21" pos:end="167:102">

                    <expr_stmt pos:start="167:21" pos:end="167:102"><expr pos:start="167:21" pos:end="167:101"><call pos:start="167:21" pos:end="167:101"><name pos:start="167:21" pos:end="167:26">av_log</name><argument_list pos:start="167:27" pos:end="167:101">(<argument pos:start="167:28" pos:end="167:35"><expr pos:start="167:28" pos:end="167:35"><name pos:start="167:28" pos:end="167:35"><name pos:start="167:28" pos:end="167:28">s</name><operator pos:start="167:29" pos:end="167:30">-&gt;</operator><name pos:start="167:31" pos:end="167:35">avctx</name></name></expr></argument>, <argument pos:start="167:38" pos:end="167:49"><expr pos:start="167:38" pos:end="167:49"><name pos:start="167:38" pos:end="167:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="167:52" pos:end="167:100"><expr pos:start="167:52" pos:end="167:100"><literal type="string" pos:start="167:52" pos:end="167:100">"Error, video packet header damaged (b_code=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="177:5" pos:end="177:26">//FIXME new-pred stuff</comment>



    <return pos:start="181:5" pos:end="181:13">return <expr pos:start="181:12" pos:end="181:12"><literal type="number" pos:start="181:12" pos:end="181:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
