<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20791.c" pos:tabs="8"><function pos:start="1:1" pos:end="27:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">test_visitor_out_enum_errors</name><parameter_list pos:start="1:41" pos:end="3:60">(<parameter pos:start="1:42" pos:end="1:68"><decl pos:start="1:42" pos:end="1:68"><type pos:start="1:42" pos:end="1:68"><name pos:start="1:42" pos:end="1:62">TestOutputVisitorData</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">data</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:59"><decl pos:start="3:42" pos:end="3:59"><type pos:start="3:42" pos:end="3:59"><specifier pos:start="3:42" pos:end="3:46">const</specifier> <name pos:start="3:48" pos:end="3:51">void</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:59">unused</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="27:1">{<block_content pos:start="7:5" pos:end="25:5">

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">EnumOne</name></type> <name pos:start="7:13" pos:end="7:13">i</name></decl>, <decl pos:start="7:16" pos:end="7:51"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:16" pos:end="7:27"><name pos:start="7:16" pos:end="7:25">bad_values</name><index pos:start="7:26" pos:end="7:27">[]</index></name> <init pos:start="7:29" pos:end="7:51">= <expr pos:start="7:31" pos:end="7:51"><block pos:start="7:31" pos:end="7:51">{ <expr pos:start="7:33" pos:end="7:45"><name pos:start="7:33" pos:end="7:45">ENUM_ONE__MAX</name></expr>, <expr pos:start="7:48" pos:end="7:49"><operator pos:start="7:48" pos:end="7:48">-</operator><literal type="number" pos:start="7:49" pos:end="7:49">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="25:5">for <control pos:start="13:9" pos:end="13:49">(<init pos:start="13:10" pos:end="13:15"><expr pos:start="13:10" pos:end="13:14"><name pos:start="13:10" pos:end="13:10">i</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</init> <condition pos:start="13:17" pos:end="13:44"><expr pos:start="13:17" pos:end="13:42"><name pos:start="13:17" pos:end="13:17">i</name> <operator pos:start="13:19" pos:end="13:19">&lt;</operator> <call pos:start="13:21" pos:end="13:42"><name pos:start="13:21" pos:end="13:30">ARRAY_SIZE</name><argument_list pos:start="13:31" pos:end="13:42">(<argument pos:start="13:32" pos:end="13:41"><expr pos:start="13:32" pos:end="13:41"><name pos:start="13:32" pos:end="13:41">bad_values</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr pos:start="13:46" pos:end="13:48"><expr pos:start="13:46" pos:end="13:48"><name pos:start="13:46" pos:end="13:46">i</name><operator pos:start="13:47" pos:end="13:48">++</operator></expr></incr>)</control> <block pos:start="13:51" pos:end="25:5">{<block_content pos:start="15:9" pos:end="23:28">

        <expr_stmt pos:start="15:9" pos:end="15:19"><expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:11">err</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:18">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:69"><expr pos:start="17:9" pos:end="17:68"><call pos:start="17:9" pos:end="17:68"><name pos:start="17:9" pos:end="17:26">visit_type_EnumOne</name><argument_list pos:start="17:27" pos:end="17:68">(<argument pos:start="17:28" pos:end="17:35"><expr pos:start="17:28" pos:end="17:35"><name pos:start="17:28" pos:end="17:35"><name pos:start="17:28" pos:end="17:31">data</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:35">ov</name></name></expr></argument>, <argument pos:start="17:38" pos:end="17:45"><expr pos:start="17:38" pos:end="17:45"><literal type="string" pos:start="17:38" pos:end="17:45">"unused"</literal></expr></argument>, <argument pos:start="17:48" pos:end="17:61"><expr pos:start="17:48" pos:end="17:61"><operator pos:start="17:48" pos:end="17:48">&amp;</operator><name pos:start="17:49" pos:end="17:61"><name pos:start="17:49" pos:end="17:58">bad_values</name><index pos:start="17:59" pos:end="17:61">[<expr pos:start="17:60" pos:end="17:60"><name pos:start="17:60" pos:end="17:60">i</name></expr>]</index></name></expr></argument>, <argument pos:start="17:64" pos:end="17:67"><expr pos:start="17:64" pos:end="17:67"><operator pos:start="17:64" pos:end="17:64">&amp;</operator><name pos:start="17:65" pos:end="17:67">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:22"><expr pos:start="19:9" pos:end="19:21"><call pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:16">g_assert</name><argument_list pos:start="19:17" pos:end="19:21">(<argument pos:start="19:18" pos:end="19:20"><expr pos:start="19:18" pos:end="19:20"><name pos:start="19:18" pos:end="19:20">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:24"><expr pos:start="21:9" pos:end="21:23"><call pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:18">error_free</name><argument_list pos:start="21:19" pos:end="21:23">(<argument pos:start="21:20" pos:end="21:22"><expr pos:start="21:20" pos:end="21:22"><name pos:start="21:20" pos:end="21:22">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><call pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:21">visitor_reset</name><argument_list pos:start="23:22" pos:end="23:27">(<argument pos:start="23:23" pos:end="23:26"><expr pos:start="23:23" pos:end="23:26"><name pos:start="23:23" pos:end="23:26">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
