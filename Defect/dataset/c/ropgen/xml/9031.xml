<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9031.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:26">intel_hda_xfer</name><parameter_list pos:start="1:27" pos:end="3:54">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:41">HDACodecDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:56">uint32_t</name></type> <name pos:start="1:58" pos:end="1:61">stnr</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:74"><decl pos:start="1:64" pos:end="1:74"><type pos:start="1:64" pos:end="1:74"><name pos:start="1:64" pos:end="1:67">bool</name></type> <name pos:start="1:69" pos:end="1:74">output</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:39"><decl pos:start="3:28" pos:end="3:39"><type pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:34">uint8_t</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">buf</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:53"><decl pos:start="3:42" pos:end="3:53"><type pos:start="3:42" pos:end="3:53"><name pos:start="3:42" pos:end="3:49">uint32_t</name></type> <name pos:start="3:51" pos:end="3:53">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="147:1">{<block_content pos:start="7:5" pos:end="145:16">

    <decl_stmt pos:start="7:5" pos:end="7:74"><decl pos:start="7:5" pos:end="7:73"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">HDACodecBus</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">bus</name> <init pos:start="7:22" pos:end="7:73">= <expr pos:start="7:24" pos:end="7:73"><call pos:start="7:24" pos:end="7:73"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:73">(<argument pos:start="7:34" pos:end="7:44"><expr pos:start="7:34" pos:end="7:44"><name pos:start="7:34" pos:end="7:44">HDACodecBus</name></expr></argument>, <argument pos:start="7:47" pos:end="7:50"><expr pos:start="7:47" pos:end="7:50"><name pos:start="7:47" pos:end="7:50">qbus</name></expr></argument>, <argument pos:start="7:53" pos:end="7:72"><expr pos:start="7:53" pos:end="7:72"><name pos:start="7:53" pos:end="7:72"><name pos:start="7:53" pos:end="7:55">dev</name><operator pos:start="7:56" pos:end="7:57">-&gt;</operator><name pos:start="7:58" pos:end="7:61">qdev</name><operator pos:start="7:62" pos:end="7:62">.</operator><name pos:start="7:63" pos:end="7:72">parent_bus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:64"><decl pos:start="9:5" pos:end="9:63"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">IntelHDAState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">d</name> <init pos:start="9:22" pos:end="9:63">= <expr pos:start="9:24" pos:end="9:63"><call pos:start="9:24" pos:end="9:63"><name pos:start="9:24" pos:end="9:35">container_of</name><argument_list pos:start="9:36" pos:end="9:63">(<argument pos:start="9:37" pos:end="9:39"><expr pos:start="9:37" pos:end="9:39"><name pos:start="9:37" pos:end="9:39">bus</name></expr></argument>, <argument pos:start="9:42" pos:end="9:54"><expr pos:start="9:42" pos:end="9:54"><name pos:start="9:42" pos:end="9:54">IntelHDAState</name></expr></argument>, <argument pos:start="9:57" pos:end="9:62"><expr pos:start="9:57" pos:end="9:62"><name pos:start="9:57" pos:end="9:62">codecs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22">target_phys_addr_t</name></type> <name pos:start="11:24" pos:end="11:27">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:14">s</name></decl>, <decl pos:start="13:17" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:17" pos:end="13:20">copy</name></decl>, <decl pos:start="13:23" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:23" pos:end="13:26">left</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:18">IntelHDAStream</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:22">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:12">irq</name> <init pos:start="17:14" pos:end="17:20">= <expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:36"><expr pos:start="21:5" pos:end="21:35"><name pos:start="21:5" pos:end="21:6">st</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <ternary pos:start="21:10" pos:end="21:35"><condition pos:start="21:10" pos:end="21:17"><expr pos:start="21:10" pos:end="21:15"><name pos:start="21:10" pos:end="21:15">output</name></expr> ?</condition><then pos:start="21:19" pos:end="21:27"> <expr pos:start="21:19" pos:end="21:27"><name pos:start="21:19" pos:end="21:23"><name pos:start="21:19" pos:end="21:19">d</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:23">st</name></name> <operator pos:start="21:25" pos:end="21:25">+</operator> <literal type="number" pos:start="21:27" pos:end="21:27">4</literal></expr> </then><else pos:start="21:29" pos:end="21:35">: <expr pos:start="21:31" pos:end="21:35"><name pos:start="21:31" pos:end="21:35"><name pos:start="21:31" pos:end="21:31">d</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:35">st</name></name></expr></else></ternary></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="33:5">for <control pos:start="23:9" pos:end="23:27">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">s</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:21"><name pos:start="23:17" pos:end="23:17">s</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <literal type="number" pos:start="23:21" pos:end="23:21">4</literal></expr>;</condition> <incr pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:24">s</name><operator pos:start="23:25" pos:end="23:26">++</operator></expr></incr>)</control> <block pos:start="23:29" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:9">

        <if_stmt pos:start="25:9" pos:end="31:9"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:47">(<expr pos:start="25:13" pos:end="25:46"><name pos:start="25:13" pos:end="25:16">stnr</name> <operator pos:start="25:18" pos:end="25:19">==</operator> <operator pos:start="25:21" pos:end="25:21">(</operator><operator pos:start="25:22" pos:end="25:22">(</operator><name pos:start="25:23" pos:end="25:27"><name pos:start="25:23" pos:end="25:24">st</name><index pos:start="25:25" pos:end="25:27">[<expr pos:start="25:26" pos:end="25:26"><name pos:start="25:26" pos:end="25:26">s</name></expr>]</index></name><operator pos:start="25:28" pos:end="25:28">.</operator><name pos:start="25:29" pos:end="25:31">ctl</name> <operator pos:start="25:33" pos:end="25:34">&gt;&gt;</operator> <literal type="number" pos:start="25:36" pos:end="25:37">20</literal><operator pos:start="25:38" pos:end="25:38">)</operator> <operator pos:start="25:40" pos:end="25:40">&amp;</operator> <literal type="number" pos:start="25:42" pos:end="25:45">0x0f</literal><operator pos:start="25:46" pos:end="25:46">)</operator></expr>)</condition> <block pos:start="25:49" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:18">

            <expr_stmt pos:start="27:13" pos:end="27:24"><expr pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:14">st</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <name pos:start="27:18" pos:end="27:19">st</name> <operator pos:start="27:21" pos:end="27:21">+</operator> <name pos:start="27:23" pos:end="27:23">s</name></expr>;</expr_stmt>

            <break pos:start="29:13" pos:end="29:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:9">s</name> <operator pos:start="35:11" pos:end="35:12">==</operator> <literal type="number" pos:start="35:14" pos:end="35:14">4</literal></expr>)</condition> <block pos:start="35:17" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:21">

        <return pos:start="37:9" pos:end="37:21">return <expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:24">(<expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:10">st</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:15">bpl</name></name> <operator pos:start="41:17" pos:end="41:18">==</operator> <name pos:start="41:20" pos:end="41:23">NULL</name></expr>)</condition> <block pos:start="41:26" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:21">

        <return pos:start="43:9" pos:end="43:21">return <expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="59:5"><if pos:start="47:5" pos:end="59:5">if <condition pos:start="47:8" pos:end="47:28">(<expr pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:10">st</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:15">ctl</name></name> <operator pos:start="47:17" pos:end="47:17">&amp;</operator> <operator pos:start="47:19" pos:end="47:19">(</operator><literal type="number" pos:start="47:20" pos:end="47:20">1</literal> <operator pos:start="47:22" pos:end="47:23">&lt;&lt;</operator> <literal type="number" pos:start="47:25" pos:end="47:26">26</literal><operator pos:start="47:27" pos:end="47:27">)</operator></expr>)</condition> <block pos:start="47:30" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:21">

        <comment type="block" pos:start="49:9" pos:end="55:11">/*

         * Wait with the next DMA xfer until the guest

         * has acked the buffer completion interrupt

         */</comment>

        <return pos:start="57:9" pos:end="57:21">return <expr pos:start="57:16" pos:end="57:20"><name pos:start="57:16" pos:end="57:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:15"><expr pos:start="63:5" pos:end="63:14"><name pos:start="63:5" pos:end="63:8">left</name> <operator pos:start="63:10" pos:end="63:10">=</operator> <name pos:start="63:12" pos:end="63:14">len</name></expr>;</expr_stmt>

    <while pos:start="65:5" pos:end="123:5">while <condition pos:start="65:11" pos:end="65:20">(<expr pos:start="65:12" pos:end="65:19"><name pos:start="65:12" pos:end="65:15">left</name> <operator pos:start="65:17" pos:end="65:17">&gt;</operator> <literal type="number" pos:start="65:19" pos:end="65:19">0</literal></expr>)</condition> <block pos:start="65:22" pos:end="123:5">{<block_content pos:start="67:9" pos:end="121:9">

        <expr_stmt pos:start="67:9" pos:end="67:20"><expr pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:12">copy</name> <operator pos:start="67:14" pos:end="67:14">=</operator> <name pos:start="67:16" pos:end="67:19">left</name></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="71:40"><if pos:start="69:9" pos:end="71:40">if <condition pos:start="69:12" pos:end="69:40">(<expr pos:start="69:13" pos:end="69:39"><name pos:start="69:13" pos:end="69:16">copy</name> <operator pos:start="69:18" pos:end="69:18">&gt;</operator> <name pos:start="69:20" pos:end="69:28"><name pos:start="69:20" pos:end="69:21">st</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:28">bsize</name></name> <operator pos:start="69:30" pos:end="69:30">-</operator> <name pos:start="69:32" pos:end="69:39"><name pos:start="69:32" pos:end="69:33">st</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:39">lpib</name></name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:40"><block_content pos:start="71:13" pos:end="71:40">

            <expr_stmt pos:start="71:13" pos:end="71:40"><expr pos:start="71:13" pos:end="71:39"><name pos:start="71:13" pos:end="71:16">copy</name> <operator pos:start="71:18" pos:end="71:18">=</operator> <name pos:start="71:20" pos:end="71:28"><name pos:start="71:20" pos:end="71:21">st</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:28">bsize</name></name> <operator pos:start="71:30" pos:end="71:30">-</operator> <name pos:start="71:32" pos:end="71:39"><name pos:start="71:32" pos:end="71:33">st</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:39">lpib</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="73:9" pos:end="75:48"><if pos:start="73:9" pos:end="75:48">if <condition pos:start="73:12" pos:end="73:48">(<expr pos:start="73:13" pos:end="73:47"><name pos:start="73:13" pos:end="73:16">copy</name> <operator pos:start="73:18" pos:end="73:18">&gt;</operator> <name pos:start="73:20" pos:end="73:34"><name pos:start="73:20" pos:end="73:21">st</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:26">bpl</name><index pos:start="73:27" pos:end="73:34">[<expr pos:start="73:28" pos:end="73:33"><name pos:start="73:28" pos:end="73:33"><name pos:start="73:28" pos:end="73:29">st</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:33">be</name></name></expr>]</index></name><operator pos:start="73:35" pos:end="73:35">.</operator><name pos:start="73:36" pos:end="73:38">len</name> <operator pos:start="73:40" pos:end="73:40">-</operator> <name pos:start="73:42" pos:end="73:47"><name pos:start="73:42" pos:end="73:43">st</name><operator pos:start="73:44" pos:end="73:45">-&gt;</operator><name pos:start="73:46" pos:end="73:47">bp</name></name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:48"><block_content pos:start="75:13" pos:end="75:48">

            <expr_stmt pos:start="75:13" pos:end="75:48"><expr pos:start="75:13" pos:end="75:47"><name pos:start="75:13" pos:end="75:16">copy</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <name pos:start="75:20" pos:end="75:34"><name pos:start="75:20" pos:end="75:21">st</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:26">bpl</name><index pos:start="75:27" pos:end="75:34">[<expr pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:29">st</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:33">be</name></name></expr>]</index></name><operator pos:start="75:35" pos:end="75:35">.</operator><name pos:start="75:36" pos:end="75:38">len</name> <operator pos:start="75:40" pos:end="75:40">-</operator> <name pos:start="75:42" pos:end="75:47"><name pos:start="75:42" pos:end="75:43">st</name><operator pos:start="75:44" pos:end="75:45">-&gt;</operator><name pos:start="75:46" pos:end="75:47">bp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="79:9" pos:end="81:58"><expr pos:start="79:9" pos:end="81:57"><call pos:start="79:9" pos:end="81:57"><name pos:start="79:9" pos:end="79:14">dprint</name><argument_list pos:start="79:15" pos:end="81:57">(<argument pos:start="79:16" pos:end="79:16"><expr pos:start="79:16" pos:end="79:16"><name pos:start="79:16" pos:end="79:16">d</name></expr></argument>, <argument pos:start="79:19" pos:end="79:19"><expr pos:start="79:19" pos:end="79:19"><literal type="number" pos:start="79:19" pos:end="79:19">3</literal></expr></argument>, <argument pos:start="79:22" pos:end="79:58"><expr pos:start="79:22" pos:end="79:58"><literal type="string" pos:start="79:22" pos:end="79:58">"dma: entry %d, pos %d/%d, copy %d\n"</literal></expr></argument>,

               <argument pos:start="81:16" pos:end="81:21"><expr pos:start="81:16" pos:end="81:21"><name pos:start="81:16" pos:end="81:21"><name pos:start="81:16" pos:end="81:17">st</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:21">be</name></name></expr></argument>, <argument pos:start="81:24" pos:end="81:29"><expr pos:start="81:24" pos:end="81:29"><name pos:start="81:24" pos:end="81:29"><name pos:start="81:24" pos:end="81:25">st</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:29">bp</name></name></expr></argument>, <argument pos:start="81:32" pos:end="81:50"><expr pos:start="81:32" pos:end="81:50"><name pos:start="81:32" pos:end="81:46"><name pos:start="81:32" pos:end="81:33">st</name><operator pos:start="81:34" pos:end="81:35">-&gt;</operator><name pos:start="81:36" pos:end="81:38">bpl</name><index pos:start="81:39" pos:end="81:46">[<expr pos:start="81:40" pos:end="81:45"><name pos:start="81:40" pos:end="81:45"><name pos:start="81:40" pos:end="81:41">st</name><operator pos:start="81:42" pos:end="81:43">-&gt;</operator><name pos:start="81:44" pos:end="81:45">be</name></name></expr>]</index></name><operator pos:start="81:47" pos:end="81:47">.</operator><name pos:start="81:48" pos:end="81:50">len</name></expr></argument>, <argument pos:start="81:53" pos:end="81:56"><expr pos:start="81:53" pos:end="81:56"><name pos:start="81:53" pos:end="81:56">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:79"><expr pos:start="85:9" pos:end="85:78"><call pos:start="85:9" pos:end="85:78"><name pos:start="85:9" pos:end="85:18">pci_dma_rw</name><argument_list pos:start="85:19" pos:end="85:78">(<argument pos:start="85:20" pos:end="85:26"><expr pos:start="85:20" pos:end="85:26"><operator pos:start="85:20" pos:end="85:20">&amp;</operator><name pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:21">d</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:26">pci</name></name></expr></argument>, <argument pos:start="85:29" pos:end="85:57"><expr pos:start="85:29" pos:end="85:57"><name pos:start="85:29" pos:end="85:43"><name pos:start="85:29" pos:end="85:30">st</name><operator pos:start="85:31" pos:end="85:32">-&gt;</operator><name pos:start="85:33" pos:end="85:35">bpl</name><index pos:start="85:36" pos:end="85:43">[<expr pos:start="85:37" pos:end="85:42"><name pos:start="85:37" pos:end="85:42"><name pos:start="85:37" pos:end="85:38">st</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:42">be</name></name></expr>]</index></name><operator pos:start="85:44" pos:end="85:44">.</operator><name pos:start="85:45" pos:end="85:48">addr</name> <operator pos:start="85:50" pos:end="85:50">+</operator> <name pos:start="85:52" pos:end="85:57"><name pos:start="85:52" pos:end="85:53">st</name><operator pos:start="85:54" pos:end="85:55">-&gt;</operator><name pos:start="85:56" pos:end="85:57">bp</name></name></expr></argument>, <argument pos:start="85:60" pos:end="85:62"><expr pos:start="85:60" pos:end="85:62"><name pos:start="85:60" pos:end="85:62">buf</name></expr></argument>, <argument pos:start="85:65" pos:end="85:68"><expr pos:start="85:65" pos:end="85:68"><name pos:start="85:65" pos:end="85:68">copy</name></expr></argument>, <argument pos:start="85:71" pos:end="85:77"><expr pos:start="85:71" pos:end="85:77"><operator pos:start="85:71" pos:end="85:71">!</operator><name pos:start="85:72" pos:end="85:77">output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:25"><expr pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:10">st</name><operator pos:start="87:11" pos:end="87:12">-&gt;</operator><name pos:start="87:13" pos:end="87:16">lpib</name></name> <operator pos:start="87:18" pos:end="87:19">+=</operator> <name pos:start="87:21" pos:end="87:24">copy</name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:23"><expr pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:10">st</name><operator pos:start="89:11" pos:end="89:12">-&gt;</operator><name pos:start="89:13" pos:end="89:14">bp</name></name> <operator pos:start="89:16" pos:end="89:17">+=</operator> <name pos:start="89:19" pos:end="89:22">copy</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:20"><expr pos:start="91:9" pos:end="91:19"><name pos:start="91:9" pos:end="91:11">buf</name> <operator pos:start="91:13" pos:end="91:14">+=</operator> <name pos:start="91:16" pos:end="91:19">copy</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:21"><expr pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:12">left</name> <operator pos:start="93:14" pos:end="93:15">-=</operator> <name pos:start="93:17" pos:end="93:20">copy</name></expr>;</expr_stmt>



        <if_stmt pos:start="97:9" pos:end="121:9"><if pos:start="97:9" pos:end="121:9">if <condition pos:start="97:12" pos:end="97:42">(<expr pos:start="97:13" pos:end="97:41"><name pos:start="97:13" pos:end="97:27"><name pos:start="97:13" pos:end="97:14">st</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:19">bpl</name><index pos:start="97:20" pos:end="97:27">[<expr pos:start="97:21" pos:end="97:26"><name pos:start="97:21" pos:end="97:26"><name pos:start="97:21" pos:end="97:22">st</name><operator pos:start="97:23" pos:end="97:24">-&gt;</operator><name pos:start="97:25" pos:end="97:26">be</name></name></expr>]</index></name><operator pos:start="97:28" pos:end="97:28">.</operator><name pos:start="97:29" pos:end="97:31">len</name> <operator pos:start="97:33" pos:end="97:34">==</operator> <name pos:start="97:36" pos:end="97:41"><name pos:start="97:36" pos:end="97:37">st</name><operator pos:start="97:38" pos:end="97:39">-&gt;</operator><name pos:start="97:40" pos:end="97:41">bp</name></name></expr>)</condition> <block pos:start="97:44" pos:end="121:9">{<block_content pos:start="101:13" pos:end="119:13">

            <comment type="block" pos:start="99:13" pos:end="99:34">/* bpl entry filled */</comment>

            <if_stmt pos:start="101:13" pos:end="105:13"><if pos:start="101:13" pos:end="105:13">if <condition pos:start="101:16" pos:end="101:45">(<expr pos:start="101:17" pos:end="101:44"><name pos:start="101:17" pos:end="101:31"><name pos:start="101:17" pos:end="101:18">st</name><operator pos:start="101:19" pos:end="101:20">-&gt;</operator><name pos:start="101:21" pos:end="101:23">bpl</name><index pos:start="101:24" pos:end="101:31">[<expr pos:start="101:25" pos:end="101:30"><name pos:start="101:25" pos:end="101:30"><name pos:start="101:25" pos:end="101:26">st</name><operator pos:start="101:27" pos:end="101:28">-&gt;</operator><name pos:start="101:29" pos:end="101:30">be</name></name></expr>]</index></name><operator pos:start="101:32" pos:end="101:32">.</operator><name pos:start="101:33" pos:end="101:37">flags</name> <operator pos:start="101:39" pos:end="101:39">&amp;</operator> <literal type="number" pos:start="101:41" pos:end="101:44">0x01</literal></expr>)</condition> <block pos:start="101:47" pos:end="105:13">{<block_content pos:start="103:17" pos:end="103:27">

                <expr_stmt pos:start="103:17" pos:end="103:27"><expr pos:start="103:17" pos:end="103:26"><name pos:start="103:17" pos:end="103:19">irq</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <name pos:start="103:23" pos:end="103:26">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:23"><expr pos:start="107:13" pos:end="107:22"><name pos:start="107:13" pos:end="107:18"><name pos:start="107:13" pos:end="107:14">st</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:18">bp</name></name> <operator pos:start="107:20" pos:end="107:20">=</operator> <literal type="number" pos:start="107:22" pos:end="107:22">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:21"><expr pos:start="109:13" pos:end="109:20"><name pos:start="109:13" pos:end="109:18"><name pos:start="109:13" pos:end="109:14">st</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:18">be</name></name><operator pos:start="109:19" pos:end="109:20">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="111:13" pos:end="119:13"><if pos:start="111:13" pos:end="119:13">if <condition pos:start="111:16" pos:end="111:39">(<expr pos:start="111:17" pos:end="111:38"><name pos:start="111:17" pos:end="111:22"><name pos:start="111:17" pos:end="111:18">st</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:22">be</name></name> <operator pos:start="111:24" pos:end="111:25">==</operator> <name pos:start="111:27" pos:end="111:38"><name pos:start="111:27" pos:end="111:28">st</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:38">bentries</name></name></expr>)</condition> <block pos:start="111:41" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:29">

                <comment type="block" pos:start="113:17" pos:end="113:37">/* bpl wrap around */</comment>

                <expr_stmt pos:start="115:17" pos:end="115:27"><expr pos:start="115:17" pos:end="115:26"><name pos:start="115:17" pos:end="115:22"><name pos:start="115:17" pos:end="115:18">st</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:22">be</name></name> <operator pos:start="115:24" pos:end="115:24">=</operator> <literal type="number" pos:start="115:26" pos:end="115:26">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:29"><expr pos:start="117:17" pos:end="117:28"><name pos:start="117:17" pos:end="117:24"><name pos:start="117:17" pos:end="117:18">st</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:24">lpib</name></name> <operator pos:start="117:26" pos:end="117:26">=</operator> <literal type="number" pos:start="117:28" pos:end="117:28">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:27">(<expr pos:start="125:9" pos:end="125:26"><name pos:start="125:9" pos:end="125:19"><name pos:start="125:9" pos:end="125:9">d</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:19">dp_lbase</name></name> <operator pos:start="125:21" pos:end="125:21">&amp;</operator> <literal type="number" pos:start="125:23" pos:end="125:26">0x01</literal></expr>)</condition> <block pos:start="125:29" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:54">

        <expr_stmt pos:start="127:9" pos:end="127:64"><expr pos:start="127:9" pos:end="127:63"><name pos:start="127:9" pos:end="127:12">addr</name> <operator pos:start="127:14" pos:end="127:14">=</operator> <call pos:start="127:16" pos:end="127:63"><name pos:start="127:16" pos:end="127:29">intel_hda_addr</name><argument_list pos:start="127:30" pos:end="127:63">(<argument pos:start="127:31" pos:end="127:49"><expr pos:start="127:31" pos:end="127:49"><name pos:start="127:31" pos:end="127:41"><name pos:start="127:31" pos:end="127:31">d</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:41">dp_lbase</name></name> <operator pos:start="127:43" pos:end="127:43">&amp;</operator> <operator pos:start="127:45" pos:end="127:45">~</operator><literal type="number" pos:start="127:46" pos:end="127:49">0x01</literal></expr></argument>, <argument pos:start="127:52" pos:end="127:62"><expr pos:start="127:52" pos:end="127:62"><name pos:start="127:52" pos:end="127:62"><name pos:start="127:52" pos:end="127:52">d</name><operator pos:start="127:53" pos:end="127:54">-&gt;</operator><name pos:start="127:55" pos:end="127:62">dp_ubase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:54"><expr pos:start="129:9" pos:end="129:53"><call pos:start="129:9" pos:end="129:53"><name pos:start="129:9" pos:end="129:22">stl_le_pci_dma</name><argument_list pos:start="129:23" pos:end="129:53">(<argument pos:start="129:24" pos:end="129:30"><expr pos:start="129:24" pos:end="129:30"><operator pos:start="129:24" pos:end="129:24">&amp;</operator><name pos:start="129:25" pos:end="129:30"><name pos:start="129:25" pos:end="129:25">d</name><operator pos:start="129:26" pos:end="129:27">-&gt;</operator><name pos:start="129:28" pos:end="129:30">pci</name></name></expr></argument>, <argument pos:start="129:33" pos:end="129:42"><expr pos:start="129:33" pos:end="129:42"><name pos:start="129:33" pos:end="129:36">addr</name> <operator pos:start="129:38" pos:end="129:38">+</operator> <literal type="number" pos:start="129:40" pos:end="129:40">8</literal><operator pos:start="129:41" pos:end="129:41">*</operator><name pos:start="129:42" pos:end="129:42">s</name></expr></argument>, <argument pos:start="129:45" pos:end="129:52"><expr pos:start="129:45" pos:end="129:52"><name pos:start="129:45" pos:end="129:52"><name pos:start="129:45" pos:end="129:46">st</name><operator pos:start="129:47" pos:end="129:48">-&gt;</operator><name pos:start="129:49" pos:end="129:52">lpib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:30"><expr pos:start="133:5" pos:end="133:29"><call pos:start="133:5" pos:end="133:29"><name pos:start="133:5" pos:end="133:10">dprint</name><argument_list pos:start="133:11" pos:end="133:29">(<argument pos:start="133:12" pos:end="133:12"><expr pos:start="133:12" pos:end="133:12"><name pos:start="133:12" pos:end="133:12">d</name></expr></argument>, <argument pos:start="133:15" pos:end="133:15"><expr pos:start="133:15" pos:end="133:15"><literal type="number" pos:start="133:15" pos:end="133:15">3</literal></expr></argument>, <argument pos:start="133:18" pos:end="133:28"><expr pos:start="133:18" pos:end="133:28"><literal type="string" pos:start="133:18" pos:end="133:28">"dma: --\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:12">(<expr pos:start="137:9" pos:end="137:11"><name pos:start="137:9" pos:end="137:11">irq</name></expr>)</condition> <block pos:start="137:14" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:32">

        <expr_stmt pos:start="139:9" pos:end="139:29"><expr pos:start="139:9" pos:end="139:28"><name pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:10">st</name><operator pos:start="139:11" pos:end="139:12">-&gt;</operator><name pos:start="139:13" pos:end="139:15">ctl</name></name> <operator pos:start="139:17" pos:end="139:18">|=</operator> <operator pos:start="139:20" pos:end="139:20">(</operator><literal type="number" pos:start="139:21" pos:end="139:21">1</literal> <operator pos:start="139:23" pos:end="139:24">&lt;&lt;</operator> <literal type="number" pos:start="139:26" pos:end="139:27">26</literal><operator pos:start="139:28" pos:end="139:28">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="139:31" pos:end="139:63">/* buffer completion interrupt */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:32"><expr pos:start="141:9" pos:end="141:31"><call pos:start="141:9" pos:end="141:31"><name pos:start="141:9" pos:end="141:28">intel_hda_update_irq</name><argument_list pos:start="141:29" pos:end="141:31">(<argument pos:start="141:30" pos:end="141:30"><expr pos:start="141:30" pos:end="141:30"><name pos:start="141:30" pos:end="141:30">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="145:5" pos:end="145:16">return <expr pos:start="145:12" pos:end="145:15"><name pos:start="145:12" pos:end="145:15">true</name></expr>;</return>

</block_content>}</block></function>
</unit>
