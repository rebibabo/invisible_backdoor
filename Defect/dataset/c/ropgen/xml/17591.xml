<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17591.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">pci_dev_get_w64</name><parameter_list pos:start="1:28" pos:end="1:68">(<parameter pos:start="1:29" pos:end="1:37"><decl pos:start="1:29" pos:end="1:37"><type pos:start="1:29" pos:end="1:37"><name pos:start="1:29" pos:end="1:34">PCIBus</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">b</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:53"><decl pos:start="1:40" pos:end="1:53"><type pos:start="1:40" pos:end="1:53"><name pos:start="1:40" pos:end="1:48">PCIDevice</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">dev</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:67"><decl pos:start="1:56" pos:end="1:67"><type pos:start="1:56" pos:end="1:67"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:67">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:5">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Range</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:16">range</name> <init pos:start="5:18" pos:end="5:25">= <expr pos:start="5:20" pos:end="5:25"><name pos:start="5:20" pos:end="5:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:50"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">PCIDeviceClass</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">pc</name> <init pos:start="7:24" pos:end="7:50">= <expr pos:start="7:26" pos:end="7:50"><call pos:start="7:26" pos:end="7:50"><name pos:start="7:26" pos:end="7:45">PCI_DEVICE_GET_CLASS</name><argument_list pos:start="7:46" pos:end="7:50">(<argument pos:start="7:47" pos:end="7:49"><expr pos:start="7:47" pos:end="7:49"><name pos:start="7:47" pos:end="7:49">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:16">cmd</name> <init pos:start="9:18" pos:end="9:58">= <expr pos:start="9:20" pos:end="9:58"><call pos:start="9:20" pos:end="9:58"><name pos:start="9:20" pos:end="9:31">pci_get_word</name><argument_list pos:start="9:32" pos:end="9:58">(<argument pos:start="9:33" pos:end="9:57"><expr pos:start="9:33" pos:end="9:57"><name pos:start="9:33" pos:end="9:43"><name pos:start="9:33" pos:end="9:35">dev</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:43">config</name></name> <operator pos:start="9:45" pos:end="9:45">+</operator> <name pos:start="9:47" pos:end="9:57">PCI_COMMAND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:36">(<expr pos:start="15:9" pos:end="15:35"><operator pos:start="15:9" pos:end="15:9">!</operator><operator pos:start="15:10" pos:end="15:10">(</operator><name pos:start="15:11" pos:end="15:13">cmd</name> <operator pos:start="15:15" pos:end="15:15">&amp;</operator> <name pos:start="15:17" pos:end="15:34">PCI_COMMAND_MEMORY</name><operator pos:start="15:35" pos:end="15:35">)</operator></expr>)</condition> <block pos:start="15:38" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="47:5"><if pos:start="23:5" pos:end="47:5">if <condition pos:start="23:8" pos:end="23:22">(<expr pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:10">pc</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:21">is_bridge</name></name></expr>)</condition> <block pos:start="23:24" pos:end="47:5">{<block_content pos:start="25:9" pos:end="45:9">

        <decl_stmt pos:start="25:9" pos:end="25:80"><decl pos:start="25:9" pos:end="25:79"><type pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:16">pcibus_t</name></type> <name pos:start="25:18" pos:end="25:21">base</name> <init pos:start="25:23" pos:end="25:79">= <expr pos:start="25:25" pos:end="25:79"><call pos:start="25:25" pos:end="25:79"><name pos:start="25:25" pos:end="25:43">pci_bridge_get_base</name><argument_list pos:start="25:44" pos:end="25:79">(<argument pos:start="25:45" pos:end="25:47"><expr pos:start="25:45" pos:end="25:47"><name pos:start="25:45" pos:end="25:47">dev</name></expr></argument>, <argument pos:start="25:50" pos:end="25:78"><expr pos:start="25:50" pos:end="25:78"><name pos:start="25:50" pos:end="25:78">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:82"><decl pos:start="27:9" pos:end="27:81"><type pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:16">pcibus_t</name></type> <name pos:start="27:18" pos:end="27:22">limit</name> <init pos:start="27:24" pos:end="27:81">= <expr pos:start="27:26" pos:end="27:81"><call pos:start="27:26" pos:end="27:81"><name pos:start="27:26" pos:end="27:45">pci_bridge_get_limit</name><argument_list pos:start="27:46" pos:end="27:81">(<argument pos:start="27:47" pos:end="27:49"><expr pos:start="27:47" pos:end="27:49"><name pos:start="27:47" pos:end="27:49">dev</name></expr></argument>, <argument pos:start="27:52" pos:end="27:80"><expr pos:start="27:52" pos:end="27:80"><name pos:start="27:52" pos:end="27:80">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:12">base</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <call pos:start="31:16" pos:end="31:38"><name pos:start="31:16" pos:end="31:18">MAX</name><argument_list pos:start="31:19" pos:end="31:38">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">base</name></expr></argument>, <argument pos:start="31:26" pos:end="31:37"><expr pos:start="31:26" pos:end="31:37"><literal type="number" pos:start="31:26" pos:end="31:31">0x1ULL</literal> <operator pos:start="31:33" pos:end="31:34">&lt;&lt;</operator> <literal type="number" pos:start="31:36" pos:end="31:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="35:9" pos:end="45:9"><if pos:start="35:9" pos:end="45:9">if <condition pos:start="35:12" pos:end="35:26">(<expr pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:17">limit</name> <operator pos:start="35:19" pos:end="35:20">&gt;=</operator> <name pos:start="35:22" pos:end="35:25">base</name></expr>)</condition> <block pos:start="35:28" pos:end="45:9">{<block_content pos:start="37:13" pos:end="43:45">

            <decl_stmt pos:start="37:13" pos:end="37:29"><decl pos:start="37:13" pos:end="37:28"><type pos:start="37:13" pos:end="37:17"><name pos:start="37:13" pos:end="37:17">Range</name></type> <name pos:start="37:19" pos:end="37:28">pref_range</name></decl>;</decl_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:36"><expr pos:start="39:13" pos:end="39:35"><name pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:22">pref_range</name><operator pos:start="39:23" pos:end="39:23">.</operator><name pos:start="39:24" pos:end="39:28">begin</name></name> <operator pos:start="39:30" pos:end="39:30">=</operator> <name pos:start="39:32" pos:end="39:35">base</name></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:39"><expr pos:start="41:13" pos:end="41:38"><name pos:start="41:13" pos:end="41:26"><name pos:start="41:13" pos:end="41:22">pref_range</name><operator pos:start="41:23" pos:end="41:23">.</operator><name pos:start="41:24" pos:end="41:26">end</name></name> <operator pos:start="41:28" pos:end="41:28">=</operator> <name pos:start="41:30" pos:end="41:34">limit</name> <operator pos:start="41:36" pos:end="41:36">+</operator> <literal type="number" pos:start="41:38" pos:end="41:38">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:45"><expr pos:start="43:13" pos:end="43:44"><call pos:start="43:13" pos:end="43:44"><name pos:start="43:13" pos:end="43:24">range_extend</name><argument_list pos:start="43:25" pos:end="43:44">(<argument pos:start="43:26" pos:end="43:30"><expr pos:start="43:26" pos:end="43:30"><name pos:start="43:26" pos:end="43:30">range</name></expr></argument>, <argument pos:start="43:33" pos:end="43:43"><expr pos:start="43:33" pos:end="43:43"><operator pos:start="43:33" pos:end="43:33">&amp;</operator><name pos:start="43:34" pos:end="43:43">pref_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="49:5" pos:end="91:5">for <control pos:start="49:9" pos:end="49:41">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:36"><expr pos:start="49:17" pos:end="49:35"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <name pos:start="49:21" pos:end="49:35">PCI_NUM_REGIONS</name></expr>;</condition> <incr pos:start="49:38" pos:end="49:40"><expr pos:start="49:38" pos:end="49:40"><operator pos:start="49:38" pos:end="49:39">++</operator><name pos:start="49:40" pos:end="49:40">i</name></expr></incr>)</control> <block pos:start="49:43" pos:end="91:5">{<block_content pos:start="51:9" pos:end="89:9">

        <decl_stmt pos:start="51:9" pos:end="51:45"><decl pos:start="51:9" pos:end="51:44"><type pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:19">PCIIORegion</name> <modifier pos:start="51:21" pos:end="51:21">*</modifier></type><name pos:start="51:22" pos:end="51:22">r</name> <init pos:start="51:24" pos:end="51:44">= <expr pos:start="51:26" pos:end="51:44"><operator pos:start="51:26" pos:end="51:26">&amp;</operator><name pos:start="51:27" pos:end="51:44"><name pos:start="51:27" pos:end="51:29">dev</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:41">io_regions</name><index pos:start="51:42" pos:end="51:44">[<expr pos:start="51:43" pos:end="51:43"><name pos:start="51:43" pos:end="51:43">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:27"><decl pos:start="53:9" pos:end="53:26"><type pos:start="53:9" pos:end="53:13"><name pos:start="53:9" pos:end="53:13">Range</name></type> <name pos:start="53:15" pos:end="53:26">region_range</name></decl>;</decl_stmt>



        <if_stmt pos:start="57:9" pos:end="65:9"><if pos:start="57:9" pos:end="65:9">if <condition pos:start="57:12" pos:end="61:54">(<expr pos:start="57:13" pos:end="61:53"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:20"><name pos:start="57:14" pos:end="57:14">r</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:20">size</name></name> <operator pos:start="57:22" pos:end="57:23">||</operator>

            <operator pos:start="59:13" pos:end="59:13">(</operator><name pos:start="59:14" pos:end="59:20"><name pos:start="59:14" pos:end="59:14">r</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:20">type</name></name> <operator pos:start="59:22" pos:end="59:22">&amp;</operator> <name pos:start="59:24" pos:end="59:48">PCI_BASE_ADDRESS_SPACE_IO</name><operator pos:start="59:49" pos:end="59:49">)</operator> <operator pos:start="59:51" pos:end="59:52">||</operator>

            <operator pos:start="61:13" pos:end="61:13">!</operator><operator pos:start="61:14" pos:end="61:14">(</operator><name pos:start="61:15" pos:end="61:21"><name pos:start="61:15" pos:end="61:15">r</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:21">type</name></name> <operator pos:start="61:23" pos:end="61:23">&amp;</operator> <name pos:start="61:25" pos:end="61:52">PCI_BASE_ADDRESS_MEM_TYPE_64</name><operator pos:start="61:53" pos:end="61:53">)</operator></expr>)</condition> <block pos:start="61:56" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:21">

            <continue pos:start="63:13" pos:end="63:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:71"><expr pos:start="67:9" pos:end="67:70"><name pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:20">region_range</name><operator pos:start="67:21" pos:end="67:21">.</operator><name pos:start="67:22" pos:end="67:26">begin</name></name> <operator pos:start="67:28" pos:end="67:28">=</operator> <call pos:start="67:30" pos:end="67:70"><name pos:start="67:30" pos:end="67:44">pci_bar_address</name><argument_list pos:start="67:45" pos:end="67:70">(<argument pos:start="67:46" pos:end="67:48"><expr pos:start="67:46" pos:end="67:48"><name pos:start="67:46" pos:end="67:48">dev</name></expr></argument>, <argument pos:start="67:51" pos:end="67:51"><expr pos:start="67:51" pos:end="67:51"><name pos:start="67:51" pos:end="67:51">i</name></expr></argument>, <argument pos:start="67:54" pos:end="67:60"><expr pos:start="67:54" pos:end="67:60"><name pos:start="67:54" pos:end="67:60"><name pos:start="67:54" pos:end="67:54">r</name><operator pos:start="67:55" pos:end="67:56">-&gt;</operator><name pos:start="67:57" pos:end="67:60">type</name></name></expr></argument>, <argument pos:start="67:63" pos:end="67:69"><expr pos:start="67:63" pos:end="67:69"><name pos:start="67:63" pos:end="67:69"><name pos:start="67:63" pos:end="67:63">r</name><operator pos:start="67:64" pos:end="67:65">-&gt;</operator><name pos:start="67:66" pos:end="67:69">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:56"><expr pos:start="69:9" pos:end="69:55"><name pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:20">region_range</name><operator pos:start="69:21" pos:end="69:21">.</operator><name pos:start="69:22" pos:end="69:24">end</name></name> <operator pos:start="69:26" pos:end="69:26">=</operator> <name pos:start="69:28" pos:end="69:45"><name pos:start="69:28" pos:end="69:39">region_range</name><operator pos:start="69:40" pos:end="69:40">.</operator><name pos:start="69:41" pos:end="69:45">begin</name></name> <operator pos:start="69:47" pos:end="69:47">+</operator> <name pos:start="69:49" pos:end="69:55"><name pos:start="69:49" pos:end="69:49">r</name><operator pos:start="69:50" pos:end="69:51">-&gt;</operator><name pos:start="69:52" pos:end="69:55">size</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:51">(<expr pos:start="73:13" pos:end="73:50"><name pos:start="73:13" pos:end="73:30"><name pos:start="73:13" pos:end="73:24">region_range</name><operator pos:start="73:25" pos:end="73:25">.</operator><name pos:start="73:26" pos:end="73:30">begin</name></name> <operator pos:start="73:32" pos:end="73:33">==</operator> <name pos:start="73:35" pos:end="73:50">PCI_BAR_UNMAPPED</name></expr>)</condition> <block pos:start="73:53" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:21">

            <continue pos:start="75:13" pos:end="75:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:67"><expr pos:start="81:9" pos:end="81:66"><name pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:20">region_range</name><operator pos:start="81:21" pos:end="81:21">.</operator><name pos:start="81:22" pos:end="81:26">begin</name></name> <operator pos:start="81:28" pos:end="81:28">=</operator> <call pos:start="81:30" pos:end="81:66"><name pos:start="81:30" pos:end="81:32">MAX</name><argument_list pos:start="81:33" pos:end="81:66">(<argument pos:start="81:34" pos:end="81:51"><expr pos:start="81:34" pos:end="81:51"><name pos:start="81:34" pos:end="81:51"><name pos:start="81:34" pos:end="81:45">region_range</name><operator pos:start="81:46" pos:end="81:46">.</operator><name pos:start="81:47" pos:end="81:51">begin</name></name></expr></argument>, <argument pos:start="81:54" pos:end="81:65"><expr pos:start="81:54" pos:end="81:65"><literal type="number" pos:start="81:54" pos:end="81:59">0x1ULL</literal> <operator pos:start="81:61" pos:end="81:62">&lt;&lt;</operator> <literal type="number" pos:start="81:64" pos:end="81:65">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="85:9" pos:end="89:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:55">(<expr pos:start="85:13" pos:end="85:54"><name pos:start="85:13" pos:end="85:28"><name pos:start="85:13" pos:end="85:24">region_range</name><operator pos:start="85:25" pos:end="85:25">.</operator><name pos:start="85:26" pos:end="85:28">end</name></name> <operator pos:start="85:30" pos:end="85:30">-</operator> <literal type="number" pos:start="85:32" pos:end="85:32">1</literal> <operator pos:start="85:34" pos:end="85:35">&gt;=</operator> <name pos:start="85:37" pos:end="85:54"><name pos:start="85:37" pos:end="85:48">region_range</name><operator pos:start="85:49" pos:end="85:49">.</operator><name pos:start="85:50" pos:end="85:54">begin</name></name></expr>)</condition> <block pos:start="85:57" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:47">

            <expr_stmt pos:start="87:13" pos:end="87:47"><expr pos:start="87:13" pos:end="87:46"><call pos:start="87:13" pos:end="87:46"><name pos:start="87:13" pos:end="87:24">range_extend</name><argument_list pos:start="87:25" pos:end="87:46">(<argument pos:start="87:26" pos:end="87:30"><expr pos:start="87:26" pos:end="87:30"><name pos:start="87:26" pos:end="87:30">range</name></expr></argument>, <argument pos:start="87:33" pos:end="87:45"><expr pos:start="87:33" pos:end="87:45"><operator pos:start="87:33" pos:end="87:33">&amp;</operator><name pos:start="87:34" pos:end="87:45">region_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
