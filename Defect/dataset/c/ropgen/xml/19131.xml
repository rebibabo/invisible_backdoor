<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19131.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">vscsi_transfer_data</name><parameter_list pos:start="1:32" pos:end="1:64">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:49"><name pos:start="1:33" pos:end="1:43">SCSIRequest</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">sreq</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:59">uint32_t</name></type> <name pos:start="1:61" pos:end="1:63">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:28">

    <decl_stmt pos:start="5:5" pos:end="5:67"><decl pos:start="5:5" pos:end="5:66"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VSCSIState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:66">= <expr pos:start="5:21" pos:end="5:66"><call pos:start="5:21" pos:end="5:66"><name pos:start="5:21" pos:end="5:42">VIO_SPAPR_VSCSI_DEVICE</name><argument_list pos:start="5:43" pos:end="5:66">(<argument pos:start="5:44" pos:end="5:65"><expr pos:start="5:44" pos:end="5:65"><name pos:start="5:44" pos:end="5:65"><name pos:start="5:44" pos:end="5:47">sreq</name><operator pos:start="5:48" pos:end="5:49">-&gt;</operator><name pos:start="5:50" pos:end="5:52">bus</name><operator pos:start="5:53" pos:end="5:54">-&gt;</operator><name pos:start="5:55" pos:end="5:58">qbus</name><operator pos:start="5:59" pos:end="5:59">.</operator><name pos:start="5:60" pos:end="5:65">parent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">vscsi_req</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">req</name> <init pos:start="7:20" pos:end="7:38">= <expr pos:start="7:22" pos:end="7:38"><name pos:start="7:22" pos:end="7:38"><name pos:start="7:22" pos:end="7:25">sreq</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:38">hba_private</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">rc</name> <init pos:start="11:12" pos:end="11:14">= <expr pos:start="11:14" pos:end="11:14"><literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="17:33"><expr pos:start="15:5" pos:end="17:32"><call pos:start="15:5" pos:end="17:32"><name pos:start="15:5" pos:end="15:11">DPRINTF</name><argument_list pos:start="15:12" pos:end="17:32">(<argument pos:start="15:13" pos:end="15:67"><expr pos:start="15:13" pos:end="15:67"><literal type="string" pos:start="15:13" pos:end="15:67">"VSCSI: SCSI xfer complete tag=0x%x len=0x%x, req=%p\n"</literal></expr></argument>,

            <argument pos:start="17:13" pos:end="17:21"><expr pos:start="17:13" pos:end="17:21"><name pos:start="17:13" pos:end="17:21"><name pos:start="17:13" pos:end="17:16">sreq</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:21">tag</name></name></expr></argument>, <argument pos:start="17:24" pos:end="17:26"><expr pos:start="17:24" pos:end="17:26"><name pos:start="17:24" pos:end="17:26">len</name></expr></argument>, <argument pos:start="17:29" pos:end="17:31"><expr pos:start="17:29" pos:end="17:31"><name pos:start="17:29" pos:end="17:31">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:11">req</name> <operator pos:start="19:13" pos:end="19:14">==</operator> <name pos:start="19:16" pos:end="19:19">NULL</name></expr>)</condition> <block pos:start="19:22" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:79"><expr pos:start="21:9" pos:end="21:78"><call pos:start="21:9" pos:end="21:78"><name pos:start="21:9" pos:end="21:15">fprintf</name><argument_list pos:start="21:16" pos:end="21:78">(<argument pos:start="21:17" pos:end="21:22"><expr pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:22">stderr</name></expr></argument>, <argument pos:start="21:25" pos:end="21:66"><expr pos:start="21:25" pos:end="21:66"><literal type="string" pos:start="21:25" pos:end="21:66">"VSCSI: Can't find request for tag 0x%x\n"</literal></expr></argument>, <argument pos:start="21:69" pos:end="21:77"><expr pos:start="21:69" pos:end="21:77"><name pos:start="21:69" pos:end="21:77"><name pos:start="21:69" pos:end="21:72">sreq</name><operator pos:start="21:73" pos:end="21:74">-&gt;</operator><name pos:start="21:75" pos:end="21:77">tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:12">(<expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">len</name></expr>)</condition> <block pos:start="29:14" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:69">

        <expr_stmt pos:start="31:9" pos:end="31:37"><expr pos:start="31:9" pos:end="31:36"><name pos:start="31:9" pos:end="31:11">buf</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:36"><name pos:start="31:15" pos:end="31:30">scsi_req_get_buf</name><argument_list pos:start="31:31" pos:end="31:36">(<argument pos:start="31:32" pos:end="31:35"><expr pos:start="31:32" pos:end="31:35"><name pos:start="31:32" pos:end="31:35">sreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:69"><expr pos:start="33:9" pos:end="33:68"><name pos:start="33:9" pos:end="33:10">rc</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:68"><name pos:start="33:14" pos:end="33:36">vscsi_srp_transfer_data</name><argument_list pos:start="33:37" pos:end="33:68">(<argument pos:start="33:38" pos:end="33:38"><expr pos:start="33:38" pos:end="33:38"><name pos:start="33:38" pos:end="33:38">s</name></expr></argument>, <argument pos:start="33:41" pos:end="33:43"><expr pos:start="33:41" pos:end="33:43"><name pos:start="33:41" pos:end="33:43">req</name></expr></argument>, <argument pos:start="33:46" pos:end="33:57"><expr pos:start="33:46" pos:end="33:57"><name pos:start="33:46" pos:end="33:57"><name pos:start="33:46" pos:end="33:48">req</name><operator pos:start="33:49" pos:end="33:50">-&gt;</operator><name pos:start="33:51" pos:end="33:57">writing</name></name></expr></argument>, <argument pos:start="33:60" pos:end="33:62"><expr pos:start="33:60" pos:end="33:62"><name pos:start="33:60" pos:end="33:62">buf</name></expr></argument>, <argument pos:start="33:65" pos:end="33:67"><expr pos:start="33:65" pos:end="33:67"><name pos:start="33:65" pos:end="33:67">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="47:5"><if pos:start="37:5" pos:end="47:5">if <condition pos:start="37:8" pos:end="37:15">(<expr pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:10">rc</name> <operator pos:start="37:12" pos:end="37:12">&lt;</operator> <literal type="number" pos:start="37:14" pos:end="37:14">0</literal></expr>)</condition> <block pos:start="37:17" pos:end="47:5">{<block_content pos:start="39:9" pos:end="45:15">

        <expr_stmt pos:start="39:9" pos:end="39:58"><expr pos:start="39:9" pos:end="39:57"><call pos:start="39:9" pos:end="39:57"><name pos:start="39:9" pos:end="39:15">fprintf</name><argument_list pos:start="39:16" pos:end="39:57">(<argument pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:22">stderr</name></expr></argument>, <argument pos:start="39:25" pos:end="39:52"><expr pos:start="39:25" pos:end="39:52"><literal type="string" pos:start="39:25" pos:end="39:52">"VSCSI: RDMA error rc=%d!\n"</literal></expr></argument>, <argument pos:start="39:55" pos:end="39:56"><expr pos:start="39:55" pos:end="39:56"><name pos:start="39:55" pos:end="39:56">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:57"><expr pos:start="41:9" pos:end="41:56"><call pos:start="41:9" pos:end="41:56"><name pos:start="41:9" pos:end="41:26">vscsi_makeup_sense</name><argument_list pos:start="41:27" pos:end="41:56">(<argument pos:start="41:28" pos:end="41:28"><expr pos:start="41:28" pos:end="41:28"><name pos:start="41:28" pos:end="41:28">s</name></expr></argument>, <argument pos:start="41:31" pos:end="41:33"><expr pos:start="41:31" pos:end="41:33"><name pos:start="41:31" pos:end="41:33">req</name></expr></argument>, <argument pos:start="41:36" pos:end="41:49"><expr pos:start="41:36" pos:end="41:49"><name pos:start="41:36" pos:end="41:49">HARDWARE_ERROR</name></expr></argument>, <argument pos:start="41:52" pos:end="41:52"><expr pos:start="41:52" pos:end="41:52"><literal type="number" pos:start="41:52" pos:end="41:52">0</literal></expr></argument>, <argument pos:start="41:55" pos:end="41:55"><expr pos:start="41:55" pos:end="41:55"><literal type="number" pos:start="41:55" pos:end="41:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:51"><expr pos:start="43:9" pos:end="43:50"><call pos:start="43:9" pos:end="43:50"><name pos:start="43:9" pos:end="43:22">scsi_req_abort</name><argument_list pos:start="43:23" pos:end="43:50">(<argument pos:start="43:24" pos:end="43:32"><expr pos:start="43:24" pos:end="43:32"><name pos:start="43:24" pos:end="43:32"><name pos:start="43:24" pos:end="43:26">req</name><operator pos:start="43:27" pos:end="43:28">-&gt;</operator><name pos:start="43:29" pos:end="43:32">sreq</name></name></expr></argument>, <argument pos:start="43:35" pos:end="43:49"><expr pos:start="43:35" pos:end="43:49"><name pos:start="43:35" pos:end="43:49">CHECK_CONDITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:26">/* Start next chunk */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:24"><expr pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:7">req</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:17">data_len</name></name> <operator pos:start="53:19" pos:end="53:20">-=</operator> <name pos:start="53:22" pos:end="53:23">rc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:28"><expr pos:start="55:5" pos:end="55:27"><call pos:start="55:5" pos:end="55:27"><name pos:start="55:5" pos:end="55:21">scsi_req_continue</name><argument_list pos:start="55:22" pos:end="55:27">(<argument pos:start="55:23" pos:end="55:26"><expr pos:start="55:23" pos:end="55:26"><name pos:start="55:23" pos:end="55:26">sreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
