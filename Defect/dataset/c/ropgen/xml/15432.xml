<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15432.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:17">ExitStatus</name></type> <name pos:start="1:19" pos:end="1:26">gen_mfpr</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:34"><decl pos:start="1:28" pos:end="1:34"><type pos:start="1:28" pos:end="1:34"><name pos:start="1:28" pos:end="1:31">TCGv</name></type> <name pos:start="1:33" pos:end="1:34">va</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:45"><decl pos:start="1:37" pos:end="1:45"><type pos:start="1:37" pos:end="1:45"><name pos:start="1:37" pos:end="1:39">int</name></type> <name pos:start="1:41" pos:end="1:45">regno</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:19">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">data</name> <init pos:start="5:14" pos:end="5:33">= <expr pos:start="5:16" pos:end="5:33"><call pos:start="5:16" pos:end="5:33"><name pos:start="5:16" pos:end="5:26">cpu_pr_data</name><argument_list pos:start="5:27" pos:end="5:33">(<argument pos:start="5:28" pos:end="5:32"><expr pos:start="5:28" pos:end="5:32"><name pos:start="5:28" pos:end="5:32">regno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:48">/* Special help for VMTIME and WALLTIME.  */</comment>

    <if_stmt pos:start="11:5" pos:end="39:5"><if pos:start="11:5" pos:end="39:5">if <condition pos:start="11:8" pos:end="11:37">(<expr pos:start="11:9" pos:end="11:36"><name pos:start="11:9" pos:end="11:13">regno</name> <operator pos:start="11:15" pos:end="11:16">==</operator> <literal type="number" pos:start="11:18" pos:end="11:20">250</literal> <operator pos:start="11:22" pos:end="11:23">||</operator> <name pos:start="11:25" pos:end="11:29">regno</name> <operator pos:start="11:31" pos:end="11:32">==</operator> <literal type="number" pos:start="11:34" pos:end="11:36">249</literal></expr>)</condition> <block pos:start="11:39" pos:end="39:5">{<block_content pos:start="13:9" pos:end="37:9">

	<function_decl pos:start="13:9" pos:end="13:55"><type pos:start="13:9" pos:end="13:12"><name pos:start="13:9" pos:end="13:12">void</name></type> (<modifier pos:start="13:15" pos:end="13:15">*</modifier><name pos:start="13:16" pos:end="13:21">helper</name>)<parameter_list pos:start="13:23" pos:end="13:28">(<parameter pos:start="13:24" pos:end="13:27"><decl pos:start="13:24" pos:end="13:27"><type pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">TCGv</name></type></decl></parameter>)</parameter_list> <init pos:start="13:30" pos:end="13:54">= <expr pos:start="13:32" pos:end="13:54"><name pos:start="13:32" pos:end="13:54">gen_helper_get_walltime</name></expr></init>;</function_decl>

	<if_stmt pos:start="15:9" pos:end="19:9"><if pos:start="15:9" pos:end="19:9">if <condition pos:start="15:12" pos:end="15:25">(<expr pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:17">regno</name> <operator pos:start="15:19" pos:end="15:20">==</operator> <literal type="number" pos:start="15:22" pos:end="15:24">249</literal></expr>)</condition> <block pos:start="15:27" pos:end="19:9">{<block_content pos:start="17:17" pos:end="17:47">

		<expr_stmt pos:start="17:17" pos:end="17:47"><expr pos:start="17:17" pos:end="17:46"><name pos:start="17:17" pos:end="17:22">helper</name> <operator pos:start="17:24" pos:end="17:24">=</operator> <name pos:start="17:26" pos:end="17:46">gen_helper_get_vmtime</name></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="21:9" pos:end="37:9"><if pos:start="21:9" pos:end="31:9">if <condition pos:start="21:12" pos:end="21:23">(<expr pos:start="21:13" pos:end="21:22"><name pos:start="21:13" pos:end="21:22">use_icount</name></expr>)</condition> <block pos:start="21:25" pos:end="31:9">{<block_content pos:start="23:13" pos:end="29:33">

            <expr_stmt pos:start="23:13" pos:end="23:27"><expr pos:start="23:13" pos:end="23:26"><call pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:24">gen_io_start</name><argument_list pos:start="23:25" pos:end="23:26">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:23"><expr pos:start="25:13" pos:end="25:22"><call pos:start="25:13" pos:end="25:22"><name pos:start="25:13" pos:end="25:18">helper</name><argument_list pos:start="25:19" pos:end="25:22">(<argument pos:start="25:20" pos:end="25:21"><expr pos:start="25:20" pos:end="25:21"><name pos:start="25:20" pos:end="25:21">va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:25"><expr pos:start="27:13" pos:end="27:24"><call pos:start="27:13" pos:end="27:24"><name pos:start="27:13" pos:end="27:22">gen_io_end</name><argument_list pos:start="27:23" pos:end="27:24">()</argument_list></call></expr>;</expr_stmt>

            <return pos:start="29:13" pos:end="29:33">return <expr pos:start="29:20" pos:end="29:32"><name pos:start="29:20" pos:end="29:32">EXIT_PC_STALE</name></expr>;</return>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="37:9">else <block pos:start="31:16" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:27">

            <expr_stmt pos:start="33:13" pos:end="33:23"><expr pos:start="33:13" pos:end="33:22"><call pos:start="33:13" pos:end="33:22"><name pos:start="33:13" pos:end="33:18">helper</name><argument_list pos:start="33:19" pos:end="33:22">(<argument pos:start="33:20" pos:end="33:21"><expr pos:start="33:20" pos:end="33:21"><name pos:start="33:20" pos:end="33:21">va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:27">return <expr pos:start="35:20" pos:end="35:26"><name pos:start="35:20" pos:end="35:26">NO_EXIT</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="45:39">/* The basic registers are data only, and unknown registers

       are read-zero, write-ignore.  */</comment>

    <if_stmt pos:start="47:5" pos:end="63:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:18">(<expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:12">data</name> <operator pos:start="47:14" pos:end="47:15">==</operator> <literal type="number" pos:start="47:17" pos:end="47:17">0</literal></expr>)</condition> <block pos:start="47:20" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:32">

        <expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><call pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:24">tcg_gen_movi_i64</name><argument_list pos:start="49:25" pos:end="49:31">(<argument pos:start="49:26" pos:end="49:27"><expr pos:start="49:26" pos:end="49:27"><name pos:start="49:26" pos:end="49:27">va</name></expr></argument>, <argument pos:start="49:30" pos:end="49:30"><expr pos:start="49:30" pos:end="49:30"><literal type="number" pos:start="49:30" pos:end="49:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="51:7" pos:end="55:5">else if <condition pos:start="51:15" pos:end="51:30">(<expr pos:start="51:16" pos:end="51:29"><name pos:start="51:16" pos:end="51:19">data</name> <operator pos:start="51:21" pos:end="51:21">&amp;</operator> <name pos:start="51:23" pos:end="51:29">PR_BYTE</name></expr>)</condition> <block pos:start="51:32" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:55">

        <expr_stmt pos:start="53:9" pos:end="53:55"><expr pos:start="53:9" pos:end="53:54"><call pos:start="53:9" pos:end="53:54"><name pos:start="53:9" pos:end="53:24">tcg_gen_ld8u_i64</name><argument_list pos:start="53:25" pos:end="53:54">(<argument pos:start="53:26" pos:end="53:27"><expr pos:start="53:26" pos:end="53:27"><name pos:start="53:26" pos:end="53:27">va</name></expr></argument>, <argument pos:start="53:30" pos:end="53:36"><expr pos:start="53:30" pos:end="53:36"><name pos:start="53:30" pos:end="53:36">cpu_env</name></expr></argument>, <argument pos:start="53:39" pos:end="53:53"><expr pos:start="53:39" pos:end="53:53"><name pos:start="53:39" pos:end="53:42">data</name> <operator pos:start="53:44" pos:end="53:44">&amp;</operator> <operator pos:start="53:46" pos:end="53:46">~</operator><name pos:start="53:47" pos:end="53:53">PR_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="55:7" pos:end="59:5">else if <condition pos:start="55:15" pos:end="55:30">(<expr pos:start="55:16" pos:end="55:29"><name pos:start="55:16" pos:end="55:19">data</name> <operator pos:start="55:21" pos:end="55:21">&amp;</operator> <name pos:start="55:23" pos:end="55:29">PR_LONG</name></expr>)</condition> <block pos:start="55:32" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:56">

        <expr_stmt pos:start="57:9" pos:end="57:56"><expr pos:start="57:9" pos:end="57:55"><call pos:start="57:9" pos:end="57:55"><name pos:start="57:9" pos:end="57:25">tcg_gen_ld32s_i64</name><argument_list pos:start="57:26" pos:end="57:55">(<argument pos:start="57:27" pos:end="57:28"><expr pos:start="57:27" pos:end="57:28"><name pos:start="57:27" pos:end="57:28">va</name></expr></argument>, <argument pos:start="57:31" pos:end="57:37"><expr pos:start="57:31" pos:end="57:37"><name pos:start="57:31" pos:end="57:37">cpu_env</name></expr></argument>, <argument pos:start="57:40" pos:end="57:54"><expr pos:start="57:40" pos:end="57:54"><name pos:start="57:40" pos:end="57:43">data</name> <operator pos:start="57:45" pos:end="57:45">&amp;</operator> <operator pos:start="57:47" pos:end="57:47">~</operator><name pos:start="57:48" pos:end="57:54">PR_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="63:5">else <block pos:start="59:12" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:42">

        <expr_stmt pos:start="61:9" pos:end="61:42"><expr pos:start="61:9" pos:end="61:41"><call pos:start="61:9" pos:end="61:41"><name pos:start="61:9" pos:end="61:22">tcg_gen_ld_i64</name><argument_list pos:start="61:23" pos:end="61:41">(<argument pos:start="61:24" pos:end="61:25"><expr pos:start="61:24" pos:end="61:25"><name pos:start="61:24" pos:end="61:25">va</name></expr></argument>, <argument pos:start="61:28" pos:end="61:34"><expr pos:start="61:28" pos:end="61:34"><name pos:start="61:28" pos:end="61:34">cpu_env</name></expr></argument>, <argument pos:start="61:37" pos:end="61:40"><expr pos:start="61:37" pos:end="61:40"><name pos:start="61:37" pos:end="61:40">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="65:5" pos:end="65:19">return <expr pos:start="65:12" pos:end="65:18"><name pos:start="65:12" pos:end="65:18">NO_EXIT</name></expr>;</return>

</block_content>}</block></function>
</unit>
