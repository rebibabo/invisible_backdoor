<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14327.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:9"><name pos:start="1:1" pos:end="1:7">HBitmap</name> <modifier pos:start="1:9" pos:end="1:9">*</modifier></type><name pos:start="1:10" pos:end="1:22">hbitmap_alloc</name><parameter_list pos:start="1:23" pos:end="1:54">(<parameter pos:start="1:24" pos:end="1:36"><decl pos:start="1:24" pos:end="1:36"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:31">uint64_t</name></type> <name pos:start="1:33" pos:end="1:36">size</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:53">granularity</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:14">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">HBitmap</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:15">hb</name> <init pos:start="5:17" pos:end="5:52">= <expr pos:start="5:19" pos:end="5:52"><call pos:start="5:19" pos:end="5:52"><name pos:start="5:19" pos:end="5:27">g_malloc0</name><argument_list pos:start="5:28" pos:end="5:52">(<argument pos:start="5:29" pos:end="5:51"><expr pos:start="5:29" pos:end="5:51"><sizeof pos:start="5:29" pos:end="5:51">sizeof <argument_list pos:start="5:36" pos:end="5:51">(<argument pos:start="5:37" pos:end="5:50"><expr pos:start="5:37" pos:end="5:50">struct <name pos:start="5:44" pos:end="5:50">HBitmap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type> <name pos:start="7:14" pos:end="7:14">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:49"><expr pos:start="11:5" pos:end="11:48"><call pos:start="11:5" pos:end="11:48"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:48">(<argument pos:start="11:12" pos:end="11:47"><expr pos:start="11:12" pos:end="11:47"><name pos:start="11:12" pos:end="11:22">granularity</name> <operator pos:start="11:24" pos:end="11:25">&gt;=</operator> <literal type="number" pos:start="11:27" pos:end="11:27">0</literal> <operator pos:start="11:29" pos:end="11:30">&amp;&amp;</operator> <name pos:start="11:32" pos:end="11:42">granularity</name> <operator pos:start="11:44" pos:end="11:44">&lt;</operator> <literal type="number" pos:start="11:46" pos:end="11:47">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:61"><expr pos:start="13:5" pos:end="13:60"><name pos:start="13:5" pos:end="13:8">size</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <operator pos:start="13:12" pos:end="13:12">(</operator><name pos:start="13:13" pos:end="13:16">size</name> <operator pos:start="13:18" pos:end="13:18">+</operator> <operator pos:start="13:20" pos:end="13:20">(</operator><literal type="number" pos:start="13:21" pos:end="13:24">1ULL</literal> <operator pos:start="13:26" pos:end="13:27">&lt;&lt;</operator> <name pos:start="13:29" pos:end="13:39">granularity</name><operator pos:start="13:40" pos:end="13:40">)</operator> <operator pos:start="13:42" pos:end="13:42">-</operator> <literal type="number" pos:start="13:44" pos:end="13:44">1</literal><operator pos:start="13:45" pos:end="13:45">)</operator> <operator pos:start="13:47" pos:end="13:48">&gt;&gt;</operator> <name pos:start="13:50" pos:end="13:60">granularity</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:58"><expr pos:start="15:5" pos:end="15:57"><call pos:start="15:5" pos:end="15:57"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:57">(<argument pos:start="15:12" pos:end="15:56"><expr pos:start="15:12" pos:end="15:56"><name pos:start="15:12" pos:end="15:15">size</name> <operator pos:start="15:17" pos:end="15:18">&lt;=</operator> <operator pos:start="15:20" pos:end="15:20">(</operator><operator pos:start="15:21" pos:end="15:21">(</operator><name pos:start="15:22" pos:end="15:29">uint64_t</name><operator pos:start="15:30" pos:end="15:30">)</operator><literal type="number" pos:start="15:31" pos:end="15:31">1</literal> <operator pos:start="15:33" pos:end="15:34">&lt;&lt;</operator> <name pos:start="15:36" pos:end="15:55">HBITMAP_LOG_MAX_SIZE</name><operator pos:start="15:56" pos:end="15:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:20"><expr pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:6">hb</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:12">size</name></name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:19">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:34"><expr pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:6">hb</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:19">granularity</name></name> <operator pos:start="21:21" pos:end="21:21">=</operator> <name pos:start="21:23" pos:end="21:33">granularity</name></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="29:5">for <control pos:start="23:9" pos:end="23:39">(<init pos:start="23:10" pos:end="23:28"><expr pos:start="23:10" pos:end="23:27"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <name pos:start="23:14" pos:end="23:27">HBITMAP_LEVELS</name></expr>;</init> <condition pos:start="23:30" pos:end="23:37"><expr pos:start="23:30" pos:end="23:36"><name pos:start="23:30" pos:end="23:30">i</name><operator pos:start="23:31" pos:end="23:32">--</operator> <operator pos:start="23:34" pos:end="23:34">&gt;</operator> <literal type="number" pos:start="23:36" pos:end="23:36">0</literal></expr>;</condition> <incr/>)</control> <block pos:start="23:41" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:64">

        <expr_stmt pos:start="25:9" pos:end="25:68"><expr pos:start="25:9" pos:end="25:67"><name pos:start="25:9" pos:end="25:12">size</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:67"><name pos:start="25:16" pos:end="25:18">MAX</name><argument_list pos:start="25:19" pos:end="25:67">(<argument pos:start="25:20" pos:end="25:63"><expr pos:start="25:20" pos:end="25:63"><operator pos:start="25:20" pos:end="25:20">(</operator><name pos:start="25:21" pos:end="25:24">size</name> <operator pos:start="25:26" pos:end="25:26">+</operator> <name pos:start="25:28" pos:end="25:40">BITS_PER_LONG</name> <operator pos:start="25:42" pos:end="25:42">-</operator> <literal type="number" pos:start="25:44" pos:end="25:44">1</literal><operator pos:start="25:45" pos:end="25:45">)</operator> <operator pos:start="25:47" pos:end="25:48">&gt;&gt;</operator> <name pos:start="25:50" pos:end="25:63">BITS_PER_LEVEL</name></expr></argument>, <argument pos:start="25:66" pos:end="25:66"><expr pos:start="25:66" pos:end="25:66"><literal type="number" pos:start="25:66" pos:end="25:66">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:64"><expr pos:start="27:9" pos:end="27:63"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:10">hb</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:18">levels</name><index pos:start="27:19" pos:end="27:21">[<expr pos:start="27:20" pos:end="27:20"><name pos:start="27:20" pos:end="27:20">i</name></expr>]</index></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <call pos:start="27:25" pos:end="27:63"><name pos:start="27:25" pos:end="27:33">g_malloc0</name><argument_list pos:start="27:34" pos:end="27:63">(<argument pos:start="27:35" pos:end="27:62"><expr pos:start="27:35" pos:end="27:62"><name pos:start="27:35" pos:end="27:38">size</name> <operator pos:start="27:40" pos:end="27:40">*</operator> sizeof<operator pos:start="27:48" pos:end="27:48">(</operator><name pos:start="27:49" pos:end="27:56">unsigned</name> <name pos:start="27:58" pos:end="27:61">long</name><operator pos:start="27:62" pos:end="27:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="33:5" pos:end="39:7">/* We necessarily have free bits in level 0 due to the definition

     * of HBITMAP_LEVELS, so use one for a sentinel.  This speeds up

     * hbitmap_iter_skip_words.

     */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><call pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:10">assert</name><argument_list pos:start="41:11" pos:end="41:21">(<argument pos:start="41:12" pos:end="41:20"><expr pos:start="41:12" pos:end="41:20"><name pos:start="41:12" pos:end="41:15">size</name> <operator pos:start="41:17" pos:end="41:18">==</operator> <literal type="number" pos:start="41:20" pos:end="41:20">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:51"><expr pos:start="43:5" pos:end="43:50"><name pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:6">hb</name><operator pos:start="43:7" pos:end="43:8">-&gt;</operator><name pos:start="43:9" pos:end="43:14">levels</name><index pos:start="43:15" pos:end="43:17">[<expr pos:start="43:16" pos:end="43:16"><literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>]</index><index pos:start="43:18" pos:end="43:20">[<expr pos:start="43:19" pos:end="43:19"><literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>]</index></name> <operator pos:start="43:22" pos:end="43:23">|=</operator> <literal type="number" pos:start="43:25" pos:end="43:27">1UL</literal> <operator pos:start="43:29" pos:end="43:30">&lt;&lt;</operator> <operator pos:start="43:32" pos:end="43:32">(</operator><name pos:start="43:33" pos:end="43:45">BITS_PER_LONG</name> <operator pos:start="43:47" pos:end="43:47">-</operator> <literal type="number" pos:start="43:49" pos:end="43:49">1</literal><operator pos:start="43:50" pos:end="43:50">)</operator></expr>;</expr_stmt>

    <return pos:start="45:5" pos:end="45:14">return <expr pos:start="45:12" pos:end="45:13"><name pos:start="45:12" pos:end="45:13">hb</name></expr>;</return>

</block_content>}</block></function>
</unit>
