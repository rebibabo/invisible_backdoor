<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19542.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">sox_read_header</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">AVIOContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">pb</name> <init pos:start="5:21" pos:end="5:27">= <expr pos:start="5:23" pos:end="5:27"><name pos:start="5:23" pos:end="5:27"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type> <name pos:start="7:14" pos:end="7:24">header_size</name></decl>, <decl pos:start="7:27" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:27" pos:end="7:38">comment_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">double</name></type> <name pos:start="9:12" pos:end="9:22">sample_rate</name></decl>, <decl pos:start="9:25" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:25" pos:end="9:40">sample_rate_frac</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">AVStream</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">st</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:6">st</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <call pos:start="15:10" pos:end="15:37"><name pos:start="15:10" pos:end="15:28">avformat_new_stream</name><argument_list pos:start="15:29" pos:end="15:37">(<argument pos:start="15:30" pos:end="15:30"><expr pos:start="15:30" pos:end="15:30"><name pos:start="15:30" pos:end="15:30">s</name></expr></argument>, <argument pos:start="15:33" pos:end="15:36"><expr pos:start="15:33" pos:end="15:36"><name pos:start="15:33" pos:end="15:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="19:31"><if pos:start="17:5" pos:end="19:31">if <condition pos:start="17:8" pos:end="17:12">(<expr pos:start="17:9" pos:end="17:11"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:11">st</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:31"><block_content pos:start="19:9" pos:end="19:31">

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:50"><expr pos:start="23:5" pos:end="23:49"><name pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:6">st</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:16">codecpar</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:28">codec_type</name></name> <operator pos:start="23:30" pos:end="23:30">=</operator> <name pos:start="23:32" pos:end="23:49">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="55:5"><if pos:start="27:5" pos:end="41:5">if <condition pos:start="27:8" pos:end="27:33">(<expr pos:start="27:9" pos:end="27:32"><call pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:17">avio_rl32</name><argument_list pos:start="27:18" pos:end="27:21">(<argument pos:start="27:19" pos:end="27:20"><expr pos:start="27:19" pos:end="27:20"><name pos:start="27:19" pos:end="27:20">pb</name></expr></argument>)</argument_list></call> <operator pos:start="27:23" pos:end="27:24">==</operator> <name pos:start="27:26" pos:end="27:32">SOX_TAG</name></expr>)</condition> <block pos:start="27:35" pos:end="41:5">{<block_content pos:start="29:9" pos:end="39:44">

        <expr_stmt pos:start="29:9" pos:end="29:55"><expr pos:start="29:9" pos:end="29:54"><name pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:10">st</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:20">codecpar</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:30">codec_id</name></name> <operator pos:start="29:32" pos:end="29:32">=</operator> <name pos:start="29:34" pos:end="29:54">AV_CODEC_ID_PCM_S32LE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:44"><expr pos:start="31:9" pos:end="31:43"><name pos:start="31:9" pos:end="31:19">header_size</name>         <operator pos:start="31:29" pos:end="31:29">=</operator> <call pos:start="31:31" pos:end="31:43"><name pos:start="31:31" pos:end="31:39">avio_rl32</name><argument_list pos:start="31:40" pos:end="31:43">(<argument pos:start="31:41" pos:end="31:42"><expr pos:start="31:41" pos:end="31:42"><name pos:start="31:41" pos:end="31:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:25"><expr pos:start="33:9" pos:end="33:24"><call pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:17">avio_skip</name><argument_list pos:start="33:18" pos:end="33:24">(<argument pos:start="33:19" pos:end="33:20"><expr pos:start="33:19" pos:end="33:20"><name pos:start="33:19" pos:end="33:20">pb</name></expr></argument>, <argument pos:start="33:23" pos:end="33:23"><expr pos:start="33:23" pos:end="33:23"><literal type="number" pos:start="33:23" pos:end="33:23">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="33:27" pos:end="33:44">/* sample count */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:59"><expr pos:start="35:9" pos:end="35:58"><name pos:start="35:9" pos:end="35:19">sample_rate</name>         <operator pos:start="35:29" pos:end="35:29">=</operator> <call pos:start="35:31" pos:end="35:58"><name pos:start="35:31" pos:end="35:43">av_int2double</name><argument_list pos:start="35:44" pos:end="35:58">(<argument pos:start="35:45" pos:end="35:57"><expr pos:start="35:45" pos:end="35:57"><call pos:start="35:45" pos:end="35:57"><name pos:start="35:45" pos:end="35:53">avio_rl64</name><argument_list pos:start="35:54" pos:end="35:57">(<argument pos:start="35:55" pos:end="35:56"><expr pos:start="35:55" pos:end="35:56"><name pos:start="35:55" pos:end="35:56">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:47"><expr pos:start="37:9" pos:end="37:46"><name pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:10">st</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:20">codecpar</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:30">channels</name></name> <operator pos:start="37:32" pos:end="37:32">=</operator> <call pos:start="37:34" pos:end="37:46"><name pos:start="37:34" pos:end="37:42">avio_rl32</name><argument_list pos:start="37:43" pos:end="37:46">(<argument pos:start="37:44" pos:end="37:45"><expr pos:start="37:44" pos:end="37:45"><name pos:start="37:44" pos:end="37:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:44"><expr pos:start="39:9" pos:end="39:43"><name pos:start="39:9" pos:end="39:20">comment_size</name>        <operator pos:start="39:29" pos:end="39:29">=</operator> <call pos:start="39:31" pos:end="39:43"><name pos:start="39:31" pos:end="39:39">avio_rl32</name><argument_list pos:start="39:40" pos:end="39:43">(<argument pos:start="39:41" pos:end="39:42"><expr pos:start="39:41" pos:end="39:42"><name pos:start="39:41" pos:end="39:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="55:5">else <block pos:start="41:12" pos:end="55:5">{<block_content pos:start="43:9" pos:end="53:44">

        <expr_stmt pos:start="43:9" pos:end="43:55"><expr pos:start="43:9" pos:end="43:54"><name pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:10">st</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:20">codecpar</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:30">codec_id</name></name> <operator pos:start="43:32" pos:end="43:32">=</operator> <name pos:start="43:34" pos:end="43:54">AV_CODEC_ID_PCM_S32BE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:44"><expr pos:start="45:9" pos:end="45:43"><name pos:start="45:9" pos:end="45:19">header_size</name>         <operator pos:start="45:29" pos:end="45:29">=</operator> <call pos:start="45:31" pos:end="45:43"><name pos:start="45:31" pos:end="45:39">avio_rb32</name><argument_list pos:start="45:40" pos:end="45:43">(<argument pos:start="45:41" pos:end="45:42"><expr pos:start="45:41" pos:end="45:42"><name pos:start="45:41" pos:end="45:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:25"><expr pos:start="47:9" pos:end="47:24"><call pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:17">avio_skip</name><argument_list pos:start="47:18" pos:end="47:24">(<argument pos:start="47:19" pos:end="47:20"><expr pos:start="47:19" pos:end="47:20"><name pos:start="47:19" pos:end="47:20">pb</name></expr></argument>, <argument pos:start="47:23" pos:end="47:23"><expr pos:start="47:23" pos:end="47:23"><literal type="number" pos:start="47:23" pos:end="47:23">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="47:27" pos:end="47:44">/* sample count */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:59"><expr pos:start="49:9" pos:end="49:58"><name pos:start="49:9" pos:end="49:19">sample_rate</name>         <operator pos:start="49:29" pos:end="49:29">=</operator> <call pos:start="49:31" pos:end="49:58"><name pos:start="49:31" pos:end="49:43">av_int2double</name><argument_list pos:start="49:44" pos:end="49:58">(<argument pos:start="49:45" pos:end="49:57"><expr pos:start="49:45" pos:end="49:57"><call pos:start="49:45" pos:end="49:57"><name pos:start="49:45" pos:end="49:53">avio_rb64</name><argument_list pos:start="49:54" pos:end="49:57">(<argument pos:start="49:55" pos:end="49:56"><expr pos:start="49:55" pos:end="49:56"><name pos:start="49:55" pos:end="49:56">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:47"><expr pos:start="51:9" pos:end="51:46"><name pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:10">st</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:20">codecpar</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:30">channels</name></name> <operator pos:start="51:32" pos:end="51:32">=</operator> <call pos:start="51:34" pos:end="51:46"><name pos:start="51:34" pos:end="51:42">avio_rb32</name><argument_list pos:start="51:43" pos:end="51:46">(<argument pos:start="51:44" pos:end="51:45"><expr pos:start="51:44" pos:end="51:45"><name pos:start="51:44" pos:end="51:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:44"><expr pos:start="53:9" pos:end="53:43"><name pos:start="53:9" pos:end="53:20">comment_size</name>        <operator pos:start="53:29" pos:end="53:29">=</operator> <call pos:start="53:31" pos:end="53:43"><name pos:start="53:31" pos:end="53:39">avio_rb32</name><argument_list pos:start="53:40" pos:end="53:43">(<argument pos:start="53:41" pos:end="53:42"><expr pos:start="53:41" pos:end="53:42"><name pos:start="53:41" pos:end="53:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:56">(<expr pos:start="59:9" pos:end="59:55"><name pos:start="59:9" pos:end="59:20">comment_size</name> <operator pos:start="59:22" pos:end="59:22">&gt;</operator> <literal type="number" pos:start="59:24" pos:end="59:36">0xFFFFFFFFU</literal> <operator pos:start="59:36" pos:end="59:36">-</operator> <name pos:start="59:38" pos:end="59:50">SOX_FIXED_HDR</name> <operator pos:start="59:52" pos:end="59:52">-</operator> <literal type="number" pos:start="59:54" pos:end="59:55">4U</literal></expr>)</condition> <block pos:start="59:58" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:35">

        <expr_stmt pos:start="61:9" pos:end="61:77"><expr pos:start="61:9" pos:end="61:76"><call pos:start="61:9" pos:end="61:76"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:76">(<argument pos:start="61:16" pos:end="61:16"><expr pos:start="61:16" pos:end="61:16"><name pos:start="61:16" pos:end="61:16">s</name></expr></argument>, <argument pos:start="61:19" pos:end="61:30"><expr pos:start="61:19" pos:end="61:30"><name pos:start="61:19" pos:end="61:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:33" pos:end="61:61"><expr pos:start="61:33" pos:end="61:61"><literal type="string" pos:start="61:33" pos:end="61:61">"invalid comment size (%u)\n"</literal></expr></argument>, <argument pos:start="61:64" pos:end="61:75"><expr pos:start="61:64" pos:end="61:75"><name pos:start="61:64" pos:end="61:75">comment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:35">return <expr pos:start="63:16" pos:end="63:34"><name pos:start="63:16" pos:end="63:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:50">(<expr pos:start="69:9" pos:end="69:49"><name pos:start="69:9" pos:end="69:19">sample_rate</name> <operator pos:start="69:21" pos:end="69:22">&lt;=</operator> <literal type="number" pos:start="69:24" pos:end="69:24">0</literal> <operator pos:start="69:26" pos:end="69:27">||</operator> <name pos:start="69:29" pos:end="69:39">sample_rate</name> <operator pos:start="69:41" pos:end="69:41">&gt;</operator> <name pos:start="69:43" pos:end="69:49">INT_MAX</name></expr>)</condition> <block pos:start="69:52" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:35">

        <expr_stmt pos:start="71:9" pos:end="71:75"><expr pos:start="71:9" pos:end="71:74"><call pos:start="71:9" pos:end="71:74"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="71:74">(<argument pos:start="71:16" pos:end="71:16"><expr pos:start="71:16" pos:end="71:16"><name pos:start="71:16" pos:end="71:16">s</name></expr></argument>, <argument pos:start="71:19" pos:end="71:30"><expr pos:start="71:19" pos:end="71:30"><name pos:start="71:19" pos:end="71:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:33" pos:end="71:60"><expr pos:start="71:33" pos:end="71:60"><literal type="string" pos:start="71:33" pos:end="71:60">"invalid sample rate (%f)\n"</literal></expr></argument>, <argument pos:start="71:63" pos:end="71:73"><expr pos:start="71:63" pos:end="71:73"><name pos:start="71:63" pos:end="71:73">sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:35">return <expr pos:start="73:16" pos:end="73:34"><name pos:start="73:16" pos:end="73:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:56"><expr pos:start="79:5" pos:end="79:55"><name pos:start="79:5" pos:end="79:20">sample_rate_frac</name> <operator pos:start="79:22" pos:end="79:22">=</operator> <name pos:start="79:24" pos:end="79:34">sample_rate</name> <operator pos:start="79:36" pos:end="79:36">-</operator> <call pos:start="79:38" pos:end="79:55"><name pos:start="79:38" pos:end="79:42">floor</name><argument_list pos:start="79:43" pos:end="79:55">(<argument pos:start="79:44" pos:end="79:54"><expr pos:start="79:44" pos:end="79:54"><name pos:start="79:44" pos:end="79:54">sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="87:33"><if pos:start="81:5" pos:end="87:33">if <condition pos:start="81:8" pos:end="81:25">(<expr pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:24">sample_rate_frac</name></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="87:33"><block_content pos:start="83:9" pos:end="87:33">

        <expr_stmt pos:start="83:9" pos:end="87:33"><expr pos:start="83:9" pos:end="87:32"><call pos:start="83:9" pos:end="87:32"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="87:32">(<argument pos:start="83:16" pos:end="83:16"><expr pos:start="83:16" pos:end="83:16"><name pos:start="83:16" pos:end="83:16">s</name></expr></argument>, <argument pos:start="83:19" pos:end="83:32"><expr pos:start="83:19" pos:end="83:32"><name pos:start="83:19" pos:end="83:32">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="85:16" pos:end="85:65"><expr pos:start="85:16" pos:end="85:65"><literal type="string" pos:start="85:16" pos:end="85:65">"truncating fractional part of sample rate (%f)\n"</literal></expr></argument>,

               <argument pos:start="87:16" pos:end="87:31"><expr pos:start="87:16" pos:end="87:31"><name pos:start="87:16" pos:end="87:31">sample_rate_frac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="99:5"><if pos:start="91:5" pos:end="99:5">if <condition pos:start="91:8" pos:end="93:42">(<expr pos:start="91:9" pos:end="93:41"><operator pos:start="91:9" pos:end="91:9">(</operator><name pos:start="91:10" pos:end="91:20">header_size</name> <operator pos:start="91:22" pos:end="91:22">+</operator> <literal type="number" pos:start="91:24" pos:end="91:24">4</literal><operator pos:start="91:25" pos:end="91:25">)</operator> <operator pos:start="91:27" pos:end="91:27">&amp;</operator> <literal type="number" pos:start="91:29" pos:end="91:29">7</literal> <operator pos:start="91:31" pos:end="91:32">||</operator> <name pos:start="91:34" pos:end="93:35"><name pos:start="91:34" pos:end="91:44">header_size</name> <argument_list type="generic" pos:start="91:46" pos:end="93:35">&lt; <argument pos:start="91:48" pos:end="93:33"><expr pos:start="91:48" pos:end="93:33"><name pos:start="91:48" pos:end="91:60">SOX_FIXED_HDR</name> <operator pos:start="91:62" pos:end="91:62">+</operator> <name pos:start="91:64" pos:end="91:75">comment_size</name>

        <operator pos:start="93:9" pos:end="93:10">||</operator> <name pos:start="93:12" pos:end="93:33"><name pos:start="93:12" pos:end="93:13">st</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:23">codecpar</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:33">channels</name></name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="93:37" pos:end="93:41">65535</literal></expr>)</condition> <comment type="block" pos:start="93:44" pos:end="93:68">/* Reserve top 16 bits */</comment> <block pos:start="93:70" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:35">

        <expr_stmt pos:start="95:9" pos:end="95:52"><expr pos:start="95:9" pos:end="95:51"><call pos:start="95:9" pos:end="95:51"><name pos:start="95:9" pos:end="95:14">av_log</name><argument_list pos:start="95:15" pos:end="95:51">(<argument pos:start="95:16" pos:end="95:16"><expr pos:start="95:16" pos:end="95:16"><name pos:start="95:16" pos:end="95:16">s</name></expr></argument>, <argument pos:start="95:19" pos:end="95:30"><expr pos:start="95:19" pos:end="95:30"><name pos:start="95:19" pos:end="95:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:33" pos:end="95:50"><expr pos:start="95:33" pos:end="95:50"><literal type="string" pos:start="95:33" pos:end="95:50">"invalid header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:35">return <expr pos:start="97:16" pos:end="97:34"><name pos:start="97:16" pos:end="97:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="103:5" pos:end="127:5"><if pos:start="103:5" pos:end="127:5">if <condition pos:start="103:8" pos:end="103:48">(<expr pos:start="103:9" pos:end="103:47"><name pos:start="103:9" pos:end="103:20">comment_size</name> <operator pos:start="103:22" pos:end="103:23">&amp;&amp;</operator> <name pos:start="103:25" pos:end="103:36">comment_size</name> <operator pos:start="103:38" pos:end="103:38">&lt;</operator> <name pos:start="103:40" pos:end="103:47">UINT_MAX</name></expr>)</condition> <block pos:start="103:50" pos:end="127:5">{<block_content pos:start="105:9" pos:end="125:56">

        <decl_stmt pos:start="105:9" pos:end="105:50"><decl pos:start="105:9" pos:end="105:49"><type pos:start="105:9" pos:end="105:14"><name pos:start="105:9" pos:end="105:12">char</name> <modifier pos:start="105:14" pos:end="105:14">*</modifier></type><name pos:start="105:15" pos:end="105:21">comment</name> <init pos:start="105:23" pos:end="105:49">= <expr pos:start="105:25" pos:end="105:49"><call pos:start="105:25" pos:end="105:49"><name pos:start="105:25" pos:end="105:33">av_malloc</name><argument_list pos:start="105:34" pos:end="105:49">(<argument pos:start="105:35" pos:end="105:48"><expr pos:start="105:35" pos:end="105:48"><name pos:start="105:35" pos:end="105:46">comment_size</name><operator pos:start="105:47" pos:end="105:47">+</operator><literal type="number" pos:start="105:48" pos:end="105:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="107:9" pos:end="109:35"><if pos:start="107:9" pos:end="109:35">if<condition pos:start="107:11" pos:end="107:20">(<expr pos:start="107:12" pos:end="107:19"><operator pos:start="107:12" pos:end="107:12">!</operator><name pos:start="107:13" pos:end="107:19">comment</name></expr>)</condition><block type="pseudo" pos:start="109:13" pos:end="109:35"><block_content pos:start="109:13" pos:end="109:35">

            <return pos:start="109:13" pos:end="109:35">return <expr pos:start="109:20" pos:end="109:34"><call pos:start="109:20" pos:end="109:34"><name pos:start="109:20" pos:end="109:26">AVERROR</name><argument_list pos:start="109:27" pos:end="109:34">(<argument pos:start="109:28" pos:end="109:33"><expr pos:start="109:28" pos:end="109:33"><name pos:start="109:28" pos:end="109:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:65">(<expr pos:start="111:13" pos:end="111:64"><call pos:start="111:13" pos:end="111:48"><name pos:start="111:13" pos:end="111:21">avio_read</name><argument_list pos:start="111:22" pos:end="111:48">(<argument pos:start="111:23" pos:end="111:24"><expr pos:start="111:23" pos:end="111:24"><name pos:start="111:23" pos:end="111:24">pb</name></expr></argument>, <argument pos:start="111:27" pos:end="111:33"><expr pos:start="111:27" pos:end="111:33"><name pos:start="111:27" pos:end="111:33">comment</name></expr></argument>, <argument pos:start="111:36" pos:end="111:47"><expr pos:start="111:36" pos:end="111:47"><name pos:start="111:36" pos:end="111:47">comment_size</name></expr></argument>)</argument_list></call> <operator pos:start="111:50" pos:end="111:51">!=</operator> <name pos:start="111:53" pos:end="111:64">comment_size</name></expr>)</condition> <block pos:start="111:67" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:32">

            <expr_stmt pos:start="113:13" pos:end="113:31"><expr pos:start="113:13" pos:end="113:30"><call pos:start="113:13" pos:end="113:30"><name pos:start="113:13" pos:end="113:20">av_freep</name><argument_list pos:start="113:21" pos:end="113:30">(<argument pos:start="113:22" pos:end="113:29"><expr pos:start="113:22" pos:end="113:29"><operator pos:start="113:22" pos:end="113:22">&amp;</operator><name pos:start="113:23" pos:end="113:29">comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="115:13" pos:end="115:32">return <expr pos:start="115:20" pos:end="115:31"><call pos:start="115:20" pos:end="115:31"><name pos:start="115:20" pos:end="115:26">AVERROR</name><argument_list pos:start="115:27" pos:end="115:31">(<argument pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:34"><expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:15">comment</name><index pos:start="119:16" pos:end="119:29">[<expr pos:start="119:17" pos:end="119:28"><name pos:start="119:17" pos:end="119:28">comment_size</name></expr>]</index></name> <operator pos:start="119:31" pos:end="119:31">=</operator> <literal type="number" pos:start="119:33" pos:end="119:33">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="123:9" pos:end="125:56"><expr pos:start="123:9" pos:end="125:55"><call pos:start="123:9" pos:end="125:55"><name pos:start="123:9" pos:end="123:19">av_dict_set</name><argument_list pos:start="123:20" pos:end="125:55">(<argument pos:start="123:21" pos:end="123:32"><expr pos:start="123:21" pos:end="123:32"><operator pos:start="123:21" pos:end="123:21">&amp;</operator><name pos:start="123:22" pos:end="123:32"><name pos:start="123:22" pos:end="123:22">s</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:32">metadata</name></name></expr></argument>, <argument pos:start="123:35" pos:end="123:43"><expr pos:start="123:35" pos:end="123:43"><literal type="string" pos:start="123:35" pos:end="123:43">"comment"</literal></expr></argument>, <argument pos:start="123:46" pos:end="123:52"><expr pos:start="123:46" pos:end="123:52"><name pos:start="123:46" pos:end="123:52">comment</name></expr></argument>,

                               <argument pos:start="125:32" pos:end="125:54"><expr pos:start="125:32" pos:end="125:54"><name pos:start="125:32" pos:end="125:54">AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:62"><expr pos:start="131:5" pos:end="131:61"><call pos:start="131:5" pos:end="131:61"><name pos:start="131:5" pos:end="131:13">avio_skip</name><argument_list pos:start="131:14" pos:end="131:61">(<argument pos:start="131:15" pos:end="131:16"><expr pos:start="131:15" pos:end="131:16"><name pos:start="131:15" pos:end="131:16">pb</name></expr></argument>, <argument pos:start="131:19" pos:end="131:60"><expr pos:start="131:19" pos:end="131:60"><name pos:start="131:19" pos:end="131:29">header_size</name> <operator pos:start="131:31" pos:end="131:31">-</operator> <name pos:start="131:33" pos:end="131:45">SOX_FIXED_HDR</name> <operator pos:start="131:47" pos:end="131:47">-</operator> <name pos:start="131:49" pos:end="131:60">comment_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:54"><expr pos:start="135:5" pos:end="135:53"><name pos:start="135:5" pos:end="135:29"><name pos:start="135:5" pos:end="135:6">st</name><operator pos:start="135:7" pos:end="135:8">-&gt;</operator><name pos:start="135:9" pos:end="135:16">codecpar</name><operator pos:start="135:17" pos:end="135:18">-&gt;</operator><name pos:start="135:19" pos:end="135:29">sample_rate</name></name>           <operator pos:start="135:41" pos:end="135:41">=</operator> <name pos:start="135:43" pos:end="135:53">sample_rate</name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:45"><expr pos:start="137:5" pos:end="137:44"><name pos:start="137:5" pos:end="137:39"><name pos:start="137:5" pos:end="137:6">st</name><operator pos:start="137:7" pos:end="137:8">-&gt;</operator><name pos:start="137:9" pos:end="137:16">codecpar</name><operator pos:start="137:17" pos:end="137:18">-&gt;</operator><name pos:start="137:19" pos:end="137:39">bits_per_coded_sample</name></name> <operator pos:start="137:41" pos:end="137:41">=</operator> <literal type="number" pos:start="137:43" pos:end="137:44">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="143:65"><expr pos:start="139:5" pos:end="143:64"><name pos:start="139:5" pos:end="139:26"><name pos:start="139:5" pos:end="139:6">st</name><operator pos:start="139:7" pos:end="139:8">-&gt;</operator><name pos:start="139:9" pos:end="139:16">codecpar</name><operator pos:start="139:17" pos:end="139:18">-&gt;</operator><name pos:start="139:19" pos:end="139:26">bit_rate</name></name>              <operator pos:start="139:41" pos:end="139:41">=</operator> <name pos:start="139:43" pos:end="139:67"><name pos:start="139:43" pos:end="139:44">st</name><operator pos:start="139:45" pos:end="139:46">-&gt;</operator><name pos:start="139:47" pos:end="139:54">codecpar</name><operator pos:start="139:55" pos:end="139:56">-&gt;</operator><name pos:start="139:57" pos:end="139:67">sample_rate</name></name> <operator pos:start="139:69" pos:end="139:69">*</operator>

                                          <name pos:start="141:43" pos:end="141:77"><name pos:start="141:43" pos:end="141:44">st</name><operator pos:start="141:45" pos:end="141:46">-&gt;</operator><name pos:start="141:47" pos:end="141:54">codecpar</name><operator pos:start="141:55" pos:end="141:56">-&gt;</operator><name pos:start="141:57" pos:end="141:77">bits_per_coded_sample</name></name> <operator pos:start="141:79" pos:end="141:79">*</operator>

                                          <name pos:start="143:43" pos:end="143:64"><name pos:start="143:43" pos:end="143:44">st</name><operator pos:start="143:45" pos:end="143:46">-&gt;</operator><name pos:start="143:47" pos:end="143:54">codecpar</name><operator pos:start="143:55" pos:end="143:56">-&gt;</operator><name pos:start="143:57" pos:end="143:64">channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="147:69"><expr pos:start="145:5" pos:end="147:68"><name pos:start="145:5" pos:end="145:29"><name pos:start="145:5" pos:end="145:6">st</name><operator pos:start="145:7" pos:end="145:8">-&gt;</operator><name pos:start="145:9" pos:end="145:16">codecpar</name><operator pos:start="145:17" pos:end="145:18">-&gt;</operator><name pos:start="145:19" pos:end="145:29">block_align</name></name>           <operator pos:start="145:41" pos:end="145:41">=</operator> <name pos:start="145:43" pos:end="145:77"><name pos:start="145:43" pos:end="145:44">st</name><operator pos:start="145:45" pos:end="145:46">-&gt;</operator><name pos:start="145:47" pos:end="145:54">codecpar</name><operator pos:start="145:55" pos:end="145:56">-&gt;</operator><name pos:start="145:57" pos:end="145:77">bits_per_coded_sample</name></name> <operator pos:start="145:79" pos:end="145:79">*</operator>

                                          <name pos:start="147:43" pos:end="147:64"><name pos:start="147:43" pos:end="147:44">st</name><operator pos:start="147:45" pos:end="147:46">-&gt;</operator><name pos:start="147:47" pos:end="147:54">codecpar</name><operator pos:start="147:55" pos:end="147:56">-&gt;</operator><name pos:start="147:57" pos:end="147:64">channels</name></name> <operator pos:start="147:66" pos:end="147:66">/</operator> <literal type="number" pos:start="147:68" pos:end="147:68">8</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:62"><expr pos:start="151:5" pos:end="151:61"><call pos:start="151:5" pos:end="151:61"><name pos:start="151:5" pos:end="151:23">avpriv_set_pts_info</name><argument_list pos:start="151:24" pos:end="151:61">(<argument pos:start="151:25" pos:end="151:26"><expr pos:start="151:25" pos:end="151:26"><name pos:start="151:25" pos:end="151:26">st</name></expr></argument>, <argument pos:start="151:29" pos:end="151:30"><expr pos:start="151:29" pos:end="151:30"><literal type="number" pos:start="151:29" pos:end="151:30">64</literal></expr></argument>, <argument pos:start="151:33" pos:end="151:33"><expr pos:start="151:33" pos:end="151:33"><literal type="number" pos:start="151:33" pos:end="151:33">1</literal></expr></argument>, <argument pos:start="151:36" pos:end="151:60"><expr pos:start="151:36" pos:end="151:60"><name pos:start="151:36" pos:end="151:60"><name pos:start="151:36" pos:end="151:37">st</name><operator pos:start="151:38" pos:end="151:39">-&gt;</operator><name pos:start="151:40" pos:end="151:47">codecpar</name><operator pos:start="151:48" pos:end="151:49">-&gt;</operator><name pos:start="151:50" pos:end="151:60">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="155:5" pos:end="155:13">return <expr pos:start="155:12" pos:end="155:12"><literal type="number" pos:start="155:12" pos:end="155:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
