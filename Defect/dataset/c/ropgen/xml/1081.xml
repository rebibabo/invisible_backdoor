<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1081.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">palmte_init</name><parameter_list pos:start="1:24" pos:end="1:46">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:36">MachineState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:45">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="5:5" pos:end="147:45">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:31">kernel_filename</name> <init pos:start="5:33" pos:end="5:58">= <expr pos:start="5:35" pos:end="5:58"><name pos:start="5:35" pos:end="5:58"><name pos:start="5:35" pos:end="5:41">machine</name><operator pos:start="5:42" pos:end="5:43">-&gt;</operator><name pos:start="5:44" pos:end="5:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:30">kernel_cmdline</name> <init pos:start="7:32" pos:end="7:56">= <expr pos:start="7:34" pos:end="7:56"><name pos:start="7:34" pos:end="7:56"><name pos:start="7:34" pos:end="7:40">machine</name><operator pos:start="7:41" pos:end="7:42">-&gt;</operator><name pos:start="7:43" pos:end="7:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">initrd_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:58"><decl pos:start="11:5" pos:end="11:57"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:35">address_space_mem</name> <init pos:start="11:37" pos:end="11:57">= <expr pos:start="11:39" pos:end="11:57"><call pos:start="11:39" pos:end="11:57"><name pos:start="11:39" pos:end="11:55">get_system_memory</name><argument_list pos:start="11:56" pos:end="11:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:27">omap_mpu_state_s</name></name> <modifier pos:start="13:29" pos:end="13:29">*</modifier></type><name pos:start="13:30" pos:end="13:32">mpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">flash_size</name> <init pos:start="15:20" pos:end="15:31">= <expr pos:start="15:22" pos:end="15:31"><literal type="number" pos:start="15:22" pos:end="15:31">0x00800000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:43"><decl pos:start="17:5" pos:end="17:42"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">sdram_size</name> <init pos:start="17:20" pos:end="17:42">= <expr pos:start="17:22" pos:end="17:42"><name pos:start="17:22" pos:end="17:42"><name pos:start="17:22" pos:end="17:33">palmte_binfo</name><operator pos:start="17:34" pos:end="17:34">.</operator><name pos:start="17:35" pos:end="17:42">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:40"><decl pos:start="19:5" pos:end="19:39"><type pos:start="19:5" pos:end="19:19"><specifier pos:start="19:5" pos:end="19:10">static</specifier> <name pos:start="19:12" pos:end="19:19">uint32_t</name></type> <name pos:start="19:21" pos:end="19:26">cs0val</name> <init pos:start="19:28" pos:end="19:39">= <expr pos:start="19:30" pos:end="19:39"><literal type="number" pos:start="19:30" pos:end="19:39">0xffffffff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:39"><type pos:start="21:5" pos:end="21:19"><specifier pos:start="21:5" pos:end="21:10">static</specifier> <name pos:start="21:12" pos:end="21:19">uint32_t</name></type> <name pos:start="21:21" pos:end="21:26">cs1val</name> <init pos:start="21:28" pos:end="21:39">= <expr pos:start="21:30" pos:end="21:39"><literal type="number" pos:start="21:30" pos:end="21:39">0x0000e1a0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:40"><decl pos:start="23:5" pos:end="23:39"><type pos:start="23:5" pos:end="23:19"><specifier pos:start="23:5" pos:end="23:10">static</specifier> <name pos:start="23:12" pos:end="23:19">uint32_t</name></type> <name pos:start="23:21" pos:end="23:26">cs2val</name> <init pos:start="23:28" pos:end="23:39">= <expr pos:start="23:30" pos:end="23:39"><literal type="number" pos:start="23:30" pos:end="23:39">0x0000e1a0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:40"><decl pos:start="25:5" pos:end="25:39"><type pos:start="25:5" pos:end="25:19"><specifier pos:start="25:5" pos:end="25:10">static</specifier> <name pos:start="25:12" pos:end="25:19">uint32_t</name></type> <name pos:start="25:21" pos:end="25:26">cs3val</name> <init pos:start="25:28" pos:end="25:39">= <expr pos:start="25:30" pos:end="25:39"><literal type="number" pos:start="25:30" pos:end="25:39">0xe1a0e1a0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:33"><decl pos:start="27:5" pos:end="27:16"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:16">rom_size</name></decl>, <decl pos:start="27:19" pos:end="27:32"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:19" pos:end="27:28">rom_loaded</name> <init pos:start="27:30" pos:end="27:32">= <expr pos:start="27:32" pos:end="27:32"><literal type="number" pos:start="27:32" pos:end="27:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:49"><decl pos:start="29:5" pos:end="29:48"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:23">flash</name> <init pos:start="29:25" pos:end="29:48">= <expr pos:start="29:27" pos:end="29:48"><call pos:start="29:27" pos:end="29:48"><name pos:start="29:27" pos:end="29:31">g_new</name><argument_list pos:start="29:32" pos:end="29:48">(<argument pos:start="29:33" pos:end="29:44"><expr pos:start="29:33" pos:end="29:44"><name pos:start="29:33" pos:end="29:44">MemoryRegion</name></expr></argument>, <argument pos:start="29:47" pos:end="29:47"><expr pos:start="29:47" pos:end="29:47"><literal type="number" pos:start="29:47" pos:end="29:47">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:46"><decl pos:start="31:5" pos:end="31:45"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:20">cs</name> <init pos:start="31:22" pos:end="31:45">= <expr pos:start="31:24" pos:end="31:45"><call pos:start="31:24" pos:end="31:45"><name pos:start="31:24" pos:end="31:28">g_new</name><argument_list pos:start="31:29" pos:end="31:45">(<argument pos:start="31:30" pos:end="31:41"><expr pos:start="31:30" pos:end="31:41"><name pos:start="31:30" pos:end="31:41">MemoryRegion</name></expr></argument>, <argument pos:start="31:44" pos:end="31:44"><expr pos:start="31:44" pos:end="31:44"><literal type="number" pos:start="31:44" pos:end="31:44">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:77"><expr pos:start="35:5" pos:end="35:76"><name pos:start="35:5" pos:end="35:7">mpu</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:76"><name pos:start="35:11" pos:end="35:26">omap310_mpu_init</name><argument_list pos:start="35:27" pos:end="35:76">(<argument pos:start="35:28" pos:end="35:44"><expr pos:start="35:28" pos:end="35:44"><name pos:start="35:28" pos:end="35:44">address_space_mem</name></expr></argument>, <argument pos:start="35:47" pos:end="35:56"><expr pos:start="35:47" pos:end="35:56"><name pos:start="35:47" pos:end="35:56">sdram_size</name></expr></argument>, <argument pos:start="35:59" pos:end="35:75"><expr pos:start="35:59" pos:end="35:75"><name pos:start="35:59" pos:end="35:75"><name pos:start="35:59" pos:end="35:65">machine</name><operator pos:start="35:66" pos:end="35:67">-&gt;</operator><name pos:start="35:68" pos:end="35:75">cpu_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:32">/* External Flash (EMIFS) */</comment>

    <expr_stmt pos:start="41:5" pos:end="43:41"><expr pos:start="41:5" pos:end="43:40"><call pos:start="41:5" pos:end="43:40"><name pos:start="41:5" pos:end="41:26">memory_region_init_ram</name><argument_list pos:start="41:27" pos:end="43:40">(<argument pos:start="41:28" pos:end="41:32"><expr pos:start="41:28" pos:end="41:32"><name pos:start="41:28" pos:end="41:32">flash</name></expr></argument>, <argument pos:start="41:35" pos:end="41:38"><expr pos:start="41:35" pos:end="41:38"><name pos:start="41:35" pos:end="41:38">NULL</name></expr></argument>, <argument pos:start="41:41" pos:end="41:54"><expr pos:start="41:41" pos:end="41:54"><literal type="string" pos:start="41:41" pos:end="41:54">"palmte.flash"</literal></expr></argument>, <argument pos:start="41:57" pos:end="41:66"><expr pos:start="41:57" pos:end="41:66"><name pos:start="41:57" pos:end="41:66">flash_size</name></expr></argument>,

                           <argument pos:start="43:28" pos:end="43:39"><expr pos:start="43:28" pos:end="43:39"><operator pos:start="43:28" pos:end="43:28">&amp;</operator><name pos:start="43:29" pos:end="43:39">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><call pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:30">memory_region_set_readonly</name><argument_list pos:start="45:31" pos:end="45:43">(<argument pos:start="45:32" pos:end="45:36"><expr pos:start="45:32" pos:end="45:36"><name pos:start="45:32" pos:end="45:36">flash</name></expr></argument>, <argument pos:start="45:39" pos:end="45:42"><expr pos:start="45:39" pos:end="45:42"><name pos:start="45:39" pos:end="45:42">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:73"><expr pos:start="47:5" pos:end="47:72"><call pos:start="47:5" pos:end="47:72"><name pos:start="47:5" pos:end="47:31">memory_region_add_subregion</name><argument_list pos:start="47:32" pos:end="47:72">(<argument pos:start="47:33" pos:end="47:49"><expr pos:start="47:33" pos:end="47:49"><name pos:start="47:33" pos:end="47:49">address_space_mem</name></expr></argument>, <argument pos:start="47:52" pos:end="47:64"><expr pos:start="47:52" pos:end="47:64"><name pos:start="47:52" pos:end="47:64">OMAP_CS0_BASE</name></expr></argument>, <argument pos:start="47:67" pos:end="47:71"><expr pos:start="47:67" pos:end="47:71"><name pos:start="47:67" pos:end="47:71">flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="53:54"><expr pos:start="51:5" pos:end="53:53"><call pos:start="51:5" pos:end="53:53"><name pos:start="51:5" pos:end="51:25">memory_region_init_io</name><argument_list pos:start="51:26" pos:end="53:53">(<argument pos:start="51:27" pos:end="51:32"><expr pos:start="51:27" pos:end="51:32"><operator pos:start="51:27" pos:end="51:27">&amp;</operator><name pos:start="51:28" pos:end="51:32"><name pos:start="51:28" pos:end="51:29">cs</name><index pos:start="51:30" pos:end="51:32">[<expr pos:start="51:31" pos:end="51:31"><literal type="number" pos:start="51:31" pos:end="51:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="51:35" pos:end="51:38"><expr pos:start="51:35" pos:end="51:38"><name pos:start="51:35" pos:end="51:38">NULL</name></expr></argument>, <argument pos:start="51:41" pos:end="51:51"><expr pos:start="51:41" pos:end="51:51"><operator pos:start="51:41" pos:end="51:41">&amp;</operator><name pos:start="51:42" pos:end="51:51">static_ops</name></expr></argument>, <argument pos:start="51:54" pos:end="51:60"><expr pos:start="51:54" pos:end="51:60"><operator pos:start="51:54" pos:end="51:54">&amp;</operator><name pos:start="51:55" pos:end="51:60">cs0val</name></expr></argument>, <argument pos:start="51:63" pos:end="51:74"><expr pos:start="51:63" pos:end="51:74"><literal type="string" pos:start="51:63" pos:end="51:74">"palmte-cs0"</literal></expr></argument>,

                          <argument pos:start="53:27" pos:end="53:52"><expr pos:start="53:27" pos:end="53:52"><name pos:start="53:27" pos:end="53:39">OMAP_CS0_SIZE</name> <operator pos:start="53:41" pos:end="53:41">-</operator> <name pos:start="53:43" pos:end="53:52">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="57:40"><expr pos:start="55:5" pos:end="57:39"><call pos:start="55:5" pos:end="57:39"><name pos:start="55:5" pos:end="55:31">memory_region_add_subregion</name><argument_list pos:start="55:32" pos:end="57:39">(<argument pos:start="55:33" pos:end="55:49"><expr pos:start="55:33" pos:end="55:49"><name pos:start="55:33" pos:end="55:49">address_space_mem</name></expr></argument>, <argument pos:start="55:52" pos:end="55:77"><expr pos:start="55:52" pos:end="55:77"><name pos:start="55:52" pos:end="55:64">OMAP_CS0_BASE</name> <operator pos:start="55:66" pos:end="55:66">+</operator> <name pos:start="55:68" pos:end="55:77">flash_size</name></expr></argument>,

                                <argument pos:start="57:33" pos:end="57:38"><expr pos:start="57:33" pos:end="57:38"><operator pos:start="57:33" pos:end="57:33">&amp;</operator><name pos:start="57:34" pos:end="57:38"><name pos:start="57:34" pos:end="57:35">cs</name><index pos:start="57:36" pos:end="57:38">[<expr pos:start="57:37" pos:end="57:37"><literal type="number" pos:start="57:37" pos:end="57:37">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="61:41"><expr pos:start="59:5" pos:end="61:40"><call pos:start="59:5" pos:end="61:40"><name pos:start="59:5" pos:end="59:25">memory_region_init_io</name><argument_list pos:start="59:26" pos:end="61:40">(<argument pos:start="59:27" pos:end="59:32"><expr pos:start="59:27" pos:end="59:32"><operator pos:start="59:27" pos:end="59:27">&amp;</operator><name pos:start="59:28" pos:end="59:32"><name pos:start="59:28" pos:end="59:29">cs</name><index pos:start="59:30" pos:end="59:32">[<expr pos:start="59:31" pos:end="59:31"><literal type="number" pos:start="59:31" pos:end="59:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:35" pos:end="59:38"><expr pos:start="59:35" pos:end="59:38"><name pos:start="59:35" pos:end="59:38">NULL</name></expr></argument>, <argument pos:start="59:41" pos:end="59:51"><expr pos:start="59:41" pos:end="59:51"><operator pos:start="59:41" pos:end="59:41">&amp;</operator><name pos:start="59:42" pos:end="59:51">static_ops</name></expr></argument>, <argument pos:start="59:54" pos:end="59:60"><expr pos:start="59:54" pos:end="59:60"><operator pos:start="59:54" pos:end="59:54">&amp;</operator><name pos:start="59:55" pos:end="59:60">cs1val</name></expr></argument>, <argument pos:start="59:63" pos:end="59:74"><expr pos:start="59:63" pos:end="59:74"><literal type="string" pos:start="59:63" pos:end="59:74">"palmte-cs1"</literal></expr></argument>,

                          <argument pos:start="61:27" pos:end="61:39"><expr pos:start="61:27" pos:end="61:39"><name pos:start="61:27" pos:end="61:39">OMAP_CS1_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:74"><expr pos:start="63:5" pos:end="63:73"><call pos:start="63:5" pos:end="63:73"><name pos:start="63:5" pos:end="63:31">memory_region_add_subregion</name><argument_list pos:start="63:32" pos:end="63:73">(<argument pos:start="63:33" pos:end="63:49"><expr pos:start="63:33" pos:end="63:49"><name pos:start="63:33" pos:end="63:49">address_space_mem</name></expr></argument>, <argument pos:start="63:52" pos:end="63:64"><expr pos:start="63:52" pos:end="63:64"><name pos:start="63:52" pos:end="63:64">OMAP_CS1_BASE</name></expr></argument>, <argument pos:start="63:67" pos:end="63:72"><expr pos:start="63:67" pos:end="63:72"><operator pos:start="63:67" pos:end="63:67">&amp;</operator><name pos:start="63:68" pos:end="63:72"><name pos:start="63:68" pos:end="63:69">cs</name><index pos:start="63:70" pos:end="63:72">[<expr pos:start="63:71" pos:end="63:71"><literal type="number" pos:start="63:71" pos:end="63:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:41"><expr pos:start="65:5" pos:end="67:40"><call pos:start="65:5" pos:end="67:40"><name pos:start="65:5" pos:end="65:25">memory_region_init_io</name><argument_list pos:start="65:26" pos:end="67:40">(<argument pos:start="65:27" pos:end="65:32"><expr pos:start="65:27" pos:end="65:32"><operator pos:start="65:27" pos:end="65:27">&amp;</operator><name pos:start="65:28" pos:end="65:32"><name pos:start="65:28" pos:end="65:29">cs</name><index pos:start="65:30" pos:end="65:32">[<expr pos:start="65:31" pos:end="65:31"><literal type="number" pos:start="65:31" pos:end="65:31">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="65:35" pos:end="65:38"><expr pos:start="65:35" pos:end="65:38"><name pos:start="65:35" pos:end="65:38">NULL</name></expr></argument>, <argument pos:start="65:41" pos:end="65:51"><expr pos:start="65:41" pos:end="65:51"><operator pos:start="65:41" pos:end="65:41">&amp;</operator><name pos:start="65:42" pos:end="65:51">static_ops</name></expr></argument>, <argument pos:start="65:54" pos:end="65:60"><expr pos:start="65:54" pos:end="65:60"><operator pos:start="65:54" pos:end="65:54">&amp;</operator><name pos:start="65:55" pos:end="65:60">cs2val</name></expr></argument>, <argument pos:start="65:63" pos:end="65:74"><expr pos:start="65:63" pos:end="65:74"><literal type="string" pos:start="65:63" pos:end="65:74">"palmte-cs2"</literal></expr></argument>,

                          <argument pos:start="67:27" pos:end="67:39"><expr pos:start="67:27" pos:end="67:39"><name pos:start="67:27" pos:end="67:39">OMAP_CS2_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:74"><expr pos:start="69:5" pos:end="69:73"><call pos:start="69:5" pos:end="69:73"><name pos:start="69:5" pos:end="69:31">memory_region_add_subregion</name><argument_list pos:start="69:32" pos:end="69:73">(<argument pos:start="69:33" pos:end="69:49"><expr pos:start="69:33" pos:end="69:49"><name pos:start="69:33" pos:end="69:49">address_space_mem</name></expr></argument>, <argument pos:start="69:52" pos:end="69:64"><expr pos:start="69:52" pos:end="69:64"><name pos:start="69:52" pos:end="69:64">OMAP_CS2_BASE</name></expr></argument>, <argument pos:start="69:67" pos:end="69:72"><expr pos:start="69:67" pos:end="69:72"><operator pos:start="69:67" pos:end="69:67">&amp;</operator><name pos:start="69:68" pos:end="69:72"><name pos:start="69:68" pos:end="69:69">cs</name><index pos:start="69:70" pos:end="69:72">[<expr pos:start="69:71" pos:end="69:71"><literal type="number" pos:start="69:71" pos:end="69:71">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="73:41"><expr pos:start="71:5" pos:end="73:40"><call pos:start="71:5" pos:end="73:40"><name pos:start="71:5" pos:end="71:25">memory_region_init_io</name><argument_list pos:start="71:26" pos:end="73:40">(<argument pos:start="71:27" pos:end="71:32"><expr pos:start="71:27" pos:end="71:32"><operator pos:start="71:27" pos:end="71:27">&amp;</operator><name pos:start="71:28" pos:end="71:32"><name pos:start="71:28" pos:end="71:29">cs</name><index pos:start="71:30" pos:end="71:32">[<expr pos:start="71:31" pos:end="71:31"><literal type="number" pos:start="71:31" pos:end="71:31">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="71:35" pos:end="71:38"><expr pos:start="71:35" pos:end="71:38"><name pos:start="71:35" pos:end="71:38">NULL</name></expr></argument>, <argument pos:start="71:41" pos:end="71:51"><expr pos:start="71:41" pos:end="71:51"><operator pos:start="71:41" pos:end="71:41">&amp;</operator><name pos:start="71:42" pos:end="71:51">static_ops</name></expr></argument>, <argument pos:start="71:54" pos:end="71:60"><expr pos:start="71:54" pos:end="71:60"><operator pos:start="71:54" pos:end="71:54">&amp;</operator><name pos:start="71:55" pos:end="71:60">cs3val</name></expr></argument>, <argument pos:start="71:63" pos:end="71:74"><expr pos:start="71:63" pos:end="71:74"><literal type="string" pos:start="71:63" pos:end="71:74">"palmte-cs3"</literal></expr></argument>,

                          <argument pos:start="73:27" pos:end="73:39"><expr pos:start="73:27" pos:end="73:39"><name pos:start="73:27" pos:end="73:39">OMAP_CS3_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:74"><expr pos:start="75:5" pos:end="75:73"><call pos:start="75:5" pos:end="75:73"><name pos:start="75:5" pos:end="75:31">memory_region_add_subregion</name><argument_list pos:start="75:32" pos:end="75:73">(<argument pos:start="75:33" pos:end="75:49"><expr pos:start="75:33" pos:end="75:49"><name pos:start="75:33" pos:end="75:49">address_space_mem</name></expr></argument>, <argument pos:start="75:52" pos:end="75:64"><expr pos:start="75:52" pos:end="75:64"><name pos:start="75:52" pos:end="75:64">OMAP_CS3_BASE</name></expr></argument>, <argument pos:start="75:67" pos:end="75:72"><expr pos:start="75:67" pos:end="75:72"><operator pos:start="75:67" pos:end="75:67">&amp;</operator><name pos:start="75:68" pos:end="75:72"><name pos:start="75:68" pos:end="75:69">cs</name><index pos:start="75:70" pos:end="75:72">[<expr pos:start="75:71" pos:end="75:71"><literal type="number" pos:start="75:71" pos:end="75:71">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:32"><expr pos:start="79:5" pos:end="79:31"><call pos:start="79:5" pos:end="79:31"><name pos:start="79:5" pos:end="79:26">palmte_microwire_setup</name><argument_list pos:start="79:27" pos:end="79:31">(<argument pos:start="79:28" pos:end="79:30"><expr pos:start="79:28" pos:end="79:30"><name pos:start="79:28" pos:end="79:30">mpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:57"><expr pos:start="83:5" pos:end="83:56"><call pos:start="83:5" pos:end="83:56"><name pos:start="83:5" pos:end="83:30">qemu_add_kbd_event_handler</name><argument_list pos:start="83:31" pos:end="83:56">(<argument pos:start="83:32" pos:end="83:50"><expr pos:start="83:32" pos:end="83:50"><name pos:start="83:32" pos:end="83:50">palmte_button_event</name></expr></argument>, <argument pos:start="83:53" pos:end="83:55"><expr pos:start="83:53" pos:end="83:55"><name pos:start="83:53" pos:end="83:55">mpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:27"><expr pos:start="87:5" pos:end="87:26"><call pos:start="87:5" pos:end="87:26"><name pos:start="87:5" pos:end="87:21">palmte_gpio_setup</name><argument_list pos:start="87:22" pos:end="87:26">(<argument pos:start="87:23" pos:end="87:25"><expr pos:start="87:23" pos:end="87:25"><name pos:start="87:23" pos:end="87:25">mpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:45">/* Setup initial (reset) machine state */</comment>

    <if_stmt pos:start="93:5" pos:end="125:5"><if pos:start="93:5" pos:end="125:5">if <condition pos:start="93:8" pos:end="93:23">(<expr pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:22">nb_option_roms</name></expr>)</condition> <block pos:start="93:25" pos:end="125:5">{<block_content pos:start="95:9" pos:end="123:9">

        <expr_stmt pos:start="95:9" pos:end="95:54"><expr pos:start="95:9" pos:end="95:53"><name pos:start="95:9" pos:end="95:16">rom_size</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <call pos:start="95:20" pos:end="95:53"><name pos:start="95:20" pos:end="95:33">get_image_size</name><argument_list pos:start="95:34" pos:end="95:53">(<argument pos:start="95:35" pos:end="95:52"><expr pos:start="95:35" pos:end="95:52"><name pos:start="95:35" pos:end="95:47"><name pos:start="95:35" pos:end="95:44">option_rom</name><index pos:start="95:45" pos:end="95:47">[<expr pos:start="95:46" pos:end="95:46"><literal type="number" pos:start="95:46" pos:end="95:46">0</literal></expr>]</index></name><operator pos:start="95:48" pos:end="95:48">.</operator><name pos:start="95:49" pos:end="95:52">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="105:9"><if pos:start="97:9" pos:end="105:9">if <condition pos:start="97:12" pos:end="97:34">(<expr pos:start="97:13" pos:end="97:33"><name pos:start="97:13" pos:end="97:20">rom_size</name> <operator pos:start="97:22" pos:end="97:22">&gt;</operator> <name pos:start="97:24" pos:end="97:33">flash_size</name></expr>)</condition> <block pos:start="97:36" pos:end="105:9">{<block_content pos:start="99:13" pos:end="103:25">

            <expr_stmt pos:start="99:13" pos:end="101:64"><expr pos:start="99:13" pos:end="101:63"><call pos:start="99:13" pos:end="101:63"><name pos:start="99:13" pos:end="99:19">fprintf</name><argument_list pos:start="99:20" pos:end="101:63">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:26">stderr</name></expr></argument>, <argument pos:start="99:29" pos:end="99:63"><expr pos:start="99:29" pos:end="99:63"><literal type="string" pos:start="99:29" pos:end="99:63">"%s: ROM image too big (%x &gt; %x)\n"</literal></expr></argument>,

                            <argument pos:start="101:29" pos:end="101:40"><expr pos:start="101:29" pos:end="101:40"><name pos:start="101:29" pos:end="101:40">__FUNCTION__</name></expr></argument>, <argument pos:start="101:43" pos:end="101:50"><expr pos:start="101:43" pos:end="101:50"><name pos:start="101:43" pos:end="101:50">rom_size</name></expr></argument>, <argument pos:start="101:53" pos:end="101:62"><expr pos:start="101:53" pos:end="101:62"><name pos:start="101:53" pos:end="101:62">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:25"><expr pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:20">rom_size</name> <operator pos:start="103:22" pos:end="103:22">=</operator> <literal type="number" pos:start="103:24" pos:end="103:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="115:9"><if pos:start="107:9" pos:end="115:9">if <condition pos:start="107:12" pos:end="107:25">(<expr pos:start="107:13" pos:end="107:24"><name pos:start="107:13" pos:end="107:20">rom_size</name> <operator pos:start="107:22" pos:end="107:22">&gt;</operator> <literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>)</condition> <block pos:start="107:27" pos:end="115:9">{<block_content pos:start="109:13" pos:end="113:27">

            <expr_stmt pos:start="109:13" pos:end="111:55"><expr pos:start="109:13" pos:end="111:54"><name pos:start="109:13" pos:end="109:20">rom_size</name> <operator pos:start="109:22" pos:end="109:22">=</operator> <call pos:start="109:24" pos:end="111:54"><name pos:start="109:24" pos:end="109:42">load_image_targphys</name><argument_list pos:start="109:43" pos:end="111:54">(<argument pos:start="109:44" pos:end="109:61"><expr pos:start="109:44" pos:end="109:61"><name pos:start="109:44" pos:end="109:56"><name pos:start="109:44" pos:end="109:53">option_rom</name><index pos:start="109:54" pos:end="109:56">[<expr pos:start="109:55" pos:end="109:55"><literal type="number" pos:start="109:55" pos:end="109:55">0</literal></expr>]</index></name><operator pos:start="109:57" pos:end="109:57">.</operator><name pos:start="109:58" pos:end="109:61">name</name></expr></argument>, <argument pos:start="109:64" pos:end="109:76"><expr pos:start="109:64" pos:end="109:76"><name pos:start="109:64" pos:end="109:76">OMAP_CS0_BASE</name></expr></argument>,

                                           <argument pos:start="111:44" pos:end="111:53"><expr pos:start="111:44" pos:end="111:53"><name pos:start="111:44" pos:end="111:53">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:27"><expr pos:start="113:13" pos:end="113:26"><name pos:start="113:13" pos:end="113:22">rom_loaded</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <literal type="number" pos:start="113:26" pos:end="113:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="117:9" pos:end="123:9"><if pos:start="117:9" pos:end="123:9">if <condition pos:start="117:12" pos:end="117:25">(<expr pos:start="117:13" pos:end="117:24"><name pos:start="117:13" pos:end="117:20">rom_size</name> <operator pos:start="117:22" pos:end="117:22">&lt;</operator> <literal type="number" pos:start="117:24" pos:end="117:24">0</literal></expr>)</condition> <block pos:start="117:27" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:62">

            <expr_stmt pos:start="119:13" pos:end="121:62"><expr pos:start="119:13" pos:end="121:61"><call pos:start="119:13" pos:end="121:61"><name pos:start="119:13" pos:end="119:19">fprintf</name><argument_list pos:start="119:20" pos:end="121:61">(<argument pos:start="119:21" pos:end="119:26"><expr pos:start="119:21" pos:end="119:26"><name pos:start="119:21" pos:end="119:26">stderr</name></expr></argument>, <argument pos:start="119:29" pos:end="119:54"><expr pos:start="119:29" pos:end="119:54"><literal type="string" pos:start="119:29" pos:end="119:54">"%s: error loading '%s'\n"</literal></expr></argument>,

                            <argument pos:start="121:29" pos:end="121:40"><expr pos:start="121:29" pos:end="121:40"><name pos:start="121:29" pos:end="121:40">__FUNCTION__</name></expr></argument>, <argument pos:start="121:43" pos:end="121:60"><expr pos:start="121:43" pos:end="121:60"><name pos:start="121:43" pos:end="121:55"><name pos:start="121:43" pos:end="121:52">option_rom</name><index pos:start="121:53" pos:end="121:55">[<expr pos:start="121:54" pos:end="121:54"><literal type="number" pos:start="121:54" pos:end="121:54">0</literal></expr>]</index></name><operator pos:start="121:56" pos:end="121:56">.</operator><name pos:start="121:57" pos:end="121:60">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:60">(<expr pos:start="129:9" pos:end="129:59"><operator pos:start="129:9" pos:end="129:9">!</operator><name pos:start="129:10" pos:end="129:19">rom_loaded</name> <operator pos:start="129:21" pos:end="129:22">&amp;&amp;</operator> <operator pos:start="129:24" pos:end="129:24">!</operator><name pos:start="129:25" pos:end="129:39">kernel_filename</name> <operator pos:start="129:41" pos:end="129:42">&amp;&amp;</operator> <operator pos:start="129:44" pos:end="129:44">!</operator><call pos:start="129:45" pos:end="129:59"><name pos:start="129:45" pos:end="129:57">qtest_enabled</name><argument_list pos:start="129:58" pos:end="129:59">()</argument_list></call></expr>)</condition> <block pos:start="129:62" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:16">

        <expr_stmt pos:start="131:9" pos:end="131:67"><expr pos:start="131:9" pos:end="131:66"><call pos:start="131:9" pos:end="131:66"><name pos:start="131:9" pos:end="131:15">fprintf</name><argument_list pos:start="131:16" pos:end="131:66">(<argument pos:start="131:17" pos:end="131:22"><expr pos:start="131:17" pos:end="131:22"><name pos:start="131:17" pos:end="131:22">stderr</name></expr></argument>, <argument pos:start="131:25" pos:end="131:65"><expr pos:start="131:25" pos:end="131:65"><literal type="string" pos:start="131:25" pos:end="131:65">"Kernel or ROM image must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:16"><expr pos:start="133:9" pos:end="133:15"><call pos:start="133:9" pos:end="133:15"><name pos:start="133:9" pos:end="133:12">exit</name><argument_list pos:start="133:13" pos:end="133:15">(<argument pos:start="133:14" pos:end="133:14"><expr pos:start="133:14" pos:end="133:14"><literal type="number" pos:start="133:14" pos:end="133:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:27">/* Load the kernel.  */</comment>

    <expr_stmt pos:start="141:5" pos:end="141:51"><expr pos:start="141:5" pos:end="141:50"><name pos:start="141:5" pos:end="141:32"><name pos:start="141:5" pos:end="141:16">palmte_binfo</name><operator pos:start="141:17" pos:end="141:17">.</operator><name pos:start="141:18" pos:end="141:32">kernel_filename</name></name> <operator pos:start="141:34" pos:end="141:34">=</operator> <name pos:start="141:36" pos:end="141:50">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:49"><expr pos:start="143:5" pos:end="143:48"><name pos:start="143:5" pos:end="143:31"><name pos:start="143:5" pos:end="143:16">palmte_binfo</name><operator pos:start="143:17" pos:end="143:17">.</operator><name pos:start="143:18" pos:end="143:31">kernel_cmdline</name></name> <operator pos:start="143:33" pos:end="143:33">=</operator> <name pos:start="143:35" pos:end="143:48">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:51"><expr pos:start="145:5" pos:end="145:50"><name pos:start="145:5" pos:end="145:32"><name pos:start="145:5" pos:end="145:16">palmte_binfo</name><operator pos:start="145:17" pos:end="145:17">.</operator><name pos:start="145:18" pos:end="145:32">initrd_filename</name></name> <operator pos:start="145:34" pos:end="145:34">=</operator> <name pos:start="145:36" pos:end="145:50">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:45"><expr pos:start="147:5" pos:end="147:44"><call pos:start="147:5" pos:end="147:44"><name pos:start="147:5" pos:end="147:19">arm_load_kernel</name><argument_list pos:start="147:20" pos:end="147:44">(<argument pos:start="147:21" pos:end="147:28"><expr pos:start="147:21" pos:end="147:28"><name pos:start="147:21" pos:end="147:28"><name pos:start="147:21" pos:end="147:23">mpu</name><operator pos:start="147:24" pos:end="147:25">-&gt;</operator><name pos:start="147:26" pos:end="147:28">cpu</name></name></expr></argument>, <argument pos:start="147:31" pos:end="147:43"><expr pos:start="147:31" pos:end="147:43"><operator pos:start="147:31" pos:end="147:31">&amp;</operator><name pos:start="147:32" pos:end="147:43">palmte_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
