<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3362.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">mirror_do_read</name><parameter_list pos:start="1:26" pos:end="3:41">(<parameter pos:start="1:27" pos:end="1:43"><decl pos:start="1:27" pos:end="1:43"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:40">MirrorBlockJob</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:63"><decl pos:start="1:46" pos:end="1:63"><type pos:start="1:46" pos:end="1:63"><name pos:start="1:46" pos:end="1:52">int64_t</name></type> <name pos:start="1:54" pos:end="1:63">sector_num</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:40"><decl pos:start="3:27" pos:end="3:40"><type pos:start="3:27" pos:end="3:40"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:40">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:1">{<block_content pos:start="7:5" pos:end="123:15">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BlockBackend</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:24">source</name> <init pos:start="7:26" pos:end="7:40">= <expr pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:28">s</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:36">common</name><operator pos:start="7:37" pos:end="7:37">.</operator><name pos:start="7:38" pos:end="7:40">blk</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:25">sectors_per_chunk</name></decl>, <decl pos:start="9:28" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:36">nb_chunks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">MirrorOp</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:16">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">max_sectors</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:59"><expr pos:start="19:5" pos:end="19:58"><name pos:start="19:5" pos:end="19:21">sectors_per_chunk</name> <operator pos:start="19:23" pos:end="19:23">=</operator> <name pos:start="19:25" pos:end="19:38"><name pos:start="19:25" pos:end="19:25">s</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:38">granularity</name></name> <operator pos:start="19:40" pos:end="19:41">&gt;&gt;</operator> <name pos:start="19:43" pos:end="19:58">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:49"><expr pos:start="21:5" pos:end="21:48"><name pos:start="21:5" pos:end="21:15">max_sectors</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:35">sectors_per_chunk</name> <operator pos:start="21:37" pos:end="21:37">*</operator> <name pos:start="21:39" pos:end="21:48"><name pos:start="21:39" pos:end="21:39">s</name><operator pos:start="21:40" pos:end="21:41">-&gt;</operator><name pos:start="21:42" pos:end="21:48">max_iov</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:59">/* We can only handle as much as buf_size at a time. */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:66"><expr pos:start="27:5" pos:end="27:65"><name pos:start="27:5" pos:end="27:14">nb_sectors</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <call pos:start="27:18" pos:end="27:65"><name pos:start="27:18" pos:end="27:20">MIN</name><argument_list pos:start="27:21" pos:end="27:65">(<argument pos:start="27:22" pos:end="27:52"><expr pos:start="27:22" pos:end="27:52"><name pos:start="27:22" pos:end="27:32"><name pos:start="27:22" pos:end="27:22">s</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:32">buf_size</name></name> <operator pos:start="27:34" pos:end="27:35">&gt;&gt;</operator> <name pos:start="27:37" pos:end="27:52">BDRV_SECTOR_BITS</name></expr></argument>, <argument pos:start="27:55" pos:end="27:64"><expr pos:start="27:55" pos:end="27:64"><name pos:start="27:55" pos:end="27:64">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:46"><expr pos:start="29:5" pos:end="29:45"><name pos:start="29:5" pos:end="29:14">nb_sectors</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <call pos:start="29:18" pos:end="29:45"><name pos:start="29:18" pos:end="29:20">MIN</name><argument_list pos:start="29:21" pos:end="29:45">(<argument pos:start="29:22" pos:end="29:32"><expr pos:start="29:22" pos:end="29:32"><name pos:start="29:22" pos:end="29:32">max_sectors</name></expr></argument>, <argument pos:start="29:35" pos:end="29:44"><expr pos:start="29:35" pos:end="29:44"><name pos:start="29:35" pos:end="29:44">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><call pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:22">(<argument pos:start="31:12" pos:end="31:21"><expr pos:start="31:12" pos:end="31:21"><name pos:start="31:12" pos:end="31:21">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:21"><expr pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <name pos:start="33:11" pos:end="33:20">nb_sectors</name></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:22">(<expr pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:21">cow_bitmap</name></name></expr>)</condition> <block pos:start="37:24" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:61">

        <expr_stmt pos:start="39:9" pos:end="39:61"><expr pos:start="39:9" pos:end="39:60"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:14">+=</operator> <call pos:start="39:16" pos:end="39:60"><name pos:start="39:16" pos:end="39:31">mirror_cow_align</name><argument_list pos:start="39:32" pos:end="39:60">(<argument pos:start="39:33" pos:end="39:33"><expr pos:start="39:33" pos:end="39:33"><name pos:start="39:33" pos:end="39:33">s</name></expr></argument>, <argument pos:start="39:36" pos:end="39:46"><expr pos:start="39:36" pos:end="39:46"><operator pos:start="39:36" pos:end="39:36">&amp;</operator><name pos:start="39:37" pos:end="39:46">sector_num</name></expr></argument>, <argument pos:start="39:49" pos:end="39:59"><expr pos:start="39:49" pos:end="39:59"><operator pos:start="39:49" pos:end="39:49">&amp;</operator><name pos:start="39:50" pos:end="39:59">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:58"><expr pos:start="43:5" pos:end="43:57"><call pos:start="43:5" pos:end="43:57"><name pos:start="43:5" pos:end="43:10">assert</name><argument_list pos:start="43:11" pos:end="43:57">(<argument pos:start="43:12" pos:end="43:56"><expr pos:start="43:12" pos:end="43:56"><name pos:start="43:12" pos:end="43:21">nb_sectors</name> <operator pos:start="43:23" pos:end="43:24">&lt;&lt;</operator> <name pos:start="43:26" pos:end="43:41">BDRV_SECTOR_BITS</name> <operator pos:start="43:43" pos:end="43:44">&lt;=</operator> <name pos:start="43:46" pos:end="43:56"><name pos:start="43:46" pos:end="43:46">s</name><operator pos:start="43:47" pos:end="43:48">-&gt;</operator><name pos:start="43:49" pos:end="43:56">buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="45:5" pos:end="49:73">/* The sector range must meet granularity because:

     * 1) Caller passes in aligned values;

     * 2) mirror_cow_align is used only when target cluster is larger. */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:46"><expr pos:start="51:5" pos:end="51:45"><call pos:start="51:5" pos:end="51:45"><name pos:start="51:5" pos:end="51:10">assert</name><argument_list pos:start="51:11" pos:end="51:45">(<argument pos:start="51:12" pos:end="51:44"><expr pos:start="51:12" pos:end="51:44"><operator pos:start="51:12" pos:end="51:12">!</operator><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:23">sector_num</name> <operator pos:start="51:25" pos:end="51:25">%</operator> <name pos:start="51:27" pos:end="51:43">sectors_per_chunk</name><operator pos:start="51:44" pos:end="51:44">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:60"><expr pos:start="53:5" pos:end="53:59"><name pos:start="53:5" pos:end="53:13">nb_chunks</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <call pos:start="53:17" pos:end="53:59"><name pos:start="53:17" pos:end="53:28">DIV_ROUND_UP</name><argument_list pos:start="53:29" pos:end="53:59">(<argument pos:start="53:30" pos:end="53:39"><expr pos:start="53:30" pos:end="53:39"><name pos:start="53:30" pos:end="53:39">nb_sectors</name></expr></argument>, <argument pos:start="53:42" pos:end="53:58"><expr pos:start="53:42" pos:end="53:58"><name pos:start="53:42" pos:end="53:58">sectors_per_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="57:5" pos:end="65:5">while <condition pos:start="57:11" pos:end="57:41">(<expr pos:start="57:12" pos:end="57:40"><name pos:start="57:12" pos:end="57:28"><name pos:start="57:12" pos:end="57:12">s</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:28">buf_free_count</name></name> <operator pos:start="57:30" pos:end="57:30">&lt;</operator> <name pos:start="57:32" pos:end="57:40">nb_chunks</name></expr>)</condition> <block pos:start="57:43" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:30">

        <expr_stmt pos:start="59:9" pos:end="61:51"><expr pos:start="59:9" pos:end="61:50"><call pos:start="59:9" pos:end="61:50"><name pos:start="59:9" pos:end="59:36">trace_mirror_yield_in_flight</name><argument_list pos:start="59:37" pos:end="61:50">(<argument pos:start="59:38" pos:end="59:38"><expr pos:start="59:38" pos:end="59:38"><name pos:start="59:38" pos:end="59:38">s</name></expr></argument>, <argument pos:start="59:41" pos:end="59:69"><expr pos:start="59:41" pos:end="59:69"><name pos:start="59:41" pos:end="59:50">sector_num</name> <operator pos:start="59:52" pos:end="59:52">*</operator> <name pos:start="59:54" pos:end="59:69">BDRV_SECTOR_SIZE</name></expr></argument>,

                                     <argument pos:start="61:38" pos:end="61:49"><expr pos:start="61:38" pos:end="61:49"><name pos:start="61:38" pos:end="61:49"><name pos:start="61:38" pos:end="61:38">s</name><operator pos:start="61:39" pos:end="61:40">-&gt;</operator><name pos:start="61:41" pos:end="61:49">in_flight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:30"><expr pos:start="63:9" pos:end="63:29"><call pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:26">mirror_wait_for_io</name><argument_list pos:start="63:27" pos:end="63:29">(<argument pos:start="63:28" pos:end="63:28"><expr pos:start="63:28" pos:end="63:28"><name pos:start="63:28" pos:end="63:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="69:5" pos:end="69:63">/* Allocate a MirrorOp that is used as an AIO callback.  */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:28"><expr pos:start="71:5" pos:end="71:27"><name pos:start="71:5" pos:end="71:6">op</name> <operator pos:start="71:8" pos:end="71:8">=</operator> <call pos:start="71:10" pos:end="71:27"><name pos:start="71:10" pos:end="71:14">g_new</name><argument_list pos:start="71:15" pos:end="71:27">(<argument pos:start="71:16" pos:end="71:23"><expr pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:23">MirrorOp</name></expr></argument>, <argument pos:start="71:26" pos:end="71:26"><expr pos:start="71:26" pos:end="71:26"><literal type="number" pos:start="71:26" pos:end="71:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:14"><expr pos:start="73:5" pos:end="73:13"><name pos:start="73:5" pos:end="73:9"><name pos:start="73:5" pos:end="73:6">op</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:9">s</name></name> <operator pos:start="73:11" pos:end="73:11">=</operator> <name pos:start="73:13" pos:end="73:13">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:32"><expr pos:start="75:5" pos:end="75:31"><name pos:start="75:5" pos:end="75:18"><name pos:start="75:5" pos:end="75:6">op</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:18">sector_num</name></name> <operator pos:start="75:20" pos:end="75:20">=</operator> <name pos:start="75:22" pos:end="75:31">sector_num</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:32"><expr pos:start="77:5" pos:end="77:31"><name pos:start="77:5" pos:end="77:18"><name pos:start="77:5" pos:end="77:6">op</name><operator pos:start="77:7" pos:end="77:8">-&gt;</operator><name pos:start="77:9" pos:end="77:18">nb_sectors</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <name pos:start="77:22" pos:end="77:31">nb_sectors</name></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="85:7">/* Now make a QEMUIOVector taking enough granularity-sized chunks

     * from s-&gt;buf_free.

     */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:42"><expr pos:start="87:5" pos:end="87:41"><call pos:start="87:5" pos:end="87:41"><name pos:start="87:5" pos:end="87:19">qemu_iovec_init</name><argument_list pos:start="87:20" pos:end="87:41">(<argument pos:start="87:21" pos:end="87:29"><expr pos:start="87:21" pos:end="87:29"><operator pos:start="87:21" pos:end="87:21">&amp;</operator><name pos:start="87:22" pos:end="87:29"><name pos:start="87:22" pos:end="87:23">op</name><operator pos:start="87:24" pos:end="87:25">-&gt;</operator><name pos:start="87:26" pos:end="87:29">qiov</name></name></expr></argument>, <argument pos:start="87:32" pos:end="87:40"><expr pos:start="87:32" pos:end="87:40"><name pos:start="87:32" pos:end="87:40">nb_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="89:5" pos:end="103:5">while <condition pos:start="89:11" pos:end="89:27">(<expr pos:start="89:12" pos:end="89:26"><name pos:start="89:12" pos:end="89:20">nb_chunks</name><operator pos:start="89:21" pos:end="89:22">--</operator> <operator pos:start="89:24" pos:end="89:24">&gt;</operator> <literal type="number" pos:start="89:26" pos:end="89:26">0</literal></expr>)</condition> <block pos:start="89:29" pos:end="103:5">{<block_content pos:start="91:9" pos:end="101:71">

        <decl_stmt pos:start="91:9" pos:end="91:57"><decl pos:start="91:9" pos:end="91:56"><type pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:20">MirrorBuffer</name> <modifier pos:start="91:22" pos:end="91:22">*</modifier></type><name pos:start="91:23" pos:end="91:25">buf</name> <init pos:start="91:27" pos:end="91:56">= <expr pos:start="91:29" pos:end="91:56"><call pos:start="91:29" pos:end="91:56"><name pos:start="91:29" pos:end="91:42">QSIMPLEQ_FIRST</name><argument_list pos:start="91:43" pos:end="91:56">(<argument pos:start="91:44" pos:end="91:55"><expr pos:start="91:44" pos:end="91:55"><operator pos:start="91:44" pos:end="91:44">&amp;</operator><name pos:start="91:45" pos:end="91:55"><name pos:start="91:45" pos:end="91:45">s</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:55">buf_free</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="93:9" pos:end="93:73"><decl pos:start="93:9" pos:end="93:72"><type pos:start="93:9" pos:end="93:14"><name pos:start="93:9" pos:end="93:14">size_t</name></type> <name pos:start="93:16" pos:end="93:24">remaining</name> <init pos:start="93:26" pos:end="93:72">= <expr pos:start="93:28" pos:end="93:72"><name pos:start="93:28" pos:end="93:37">nb_sectors</name> <operator pos:start="93:39" pos:end="93:39">*</operator> <name pos:start="93:41" pos:end="93:56">BDRV_SECTOR_SIZE</name> <operator pos:start="93:58" pos:end="93:58">-</operator> <name pos:start="93:60" pos:end="93:72"><name pos:start="93:60" pos:end="93:61">op</name><operator pos:start="93:62" pos:end="93:63">-&gt;</operator><name pos:start="93:64" pos:end="93:67">qiov</name><operator pos:start="93:68" pos:end="93:68">.</operator><name pos:start="93:69" pos:end="93:72">size</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:49"><expr pos:start="97:9" pos:end="97:48"><call pos:start="97:9" pos:end="97:48"><name pos:start="97:9" pos:end="97:28">QSIMPLEQ_REMOVE_HEAD</name><argument_list pos:start="97:29" pos:end="97:48">(<argument pos:start="97:30" pos:end="97:41"><expr pos:start="97:30" pos:end="97:41"><operator pos:start="97:30" pos:end="97:30">&amp;</operator><name pos:start="97:31" pos:end="97:41"><name pos:start="97:31" pos:end="97:31">s</name><operator pos:start="97:32" pos:end="97:33">-&gt;</operator><name pos:start="97:34" pos:end="97:41">buf_free</name></name></expr></argument>, <argument pos:start="97:44" pos:end="97:47"><expr pos:start="97:44" pos:end="97:47"><name pos:start="97:44" pos:end="97:47">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:28"><expr pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:25"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:25">buf_free_count</name></name><operator pos:start="99:26" pos:end="99:27">--</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:71"><expr pos:start="101:9" pos:end="101:70"><call pos:start="101:9" pos:end="101:70"><name pos:start="101:9" pos:end="101:22">qemu_iovec_add</name><argument_list pos:start="101:23" pos:end="101:70">(<argument pos:start="101:24" pos:end="101:32"><expr pos:start="101:24" pos:end="101:32"><operator pos:start="101:24" pos:end="101:24">&amp;</operator><name pos:start="101:25" pos:end="101:32"><name pos:start="101:25" pos:end="101:26">op</name><operator pos:start="101:27" pos:end="101:28">-&gt;</operator><name pos:start="101:29" pos:end="101:32">qiov</name></name></expr></argument>, <argument pos:start="101:35" pos:end="101:37"><expr pos:start="101:35" pos:end="101:37"><name pos:start="101:35" pos:end="101:37">buf</name></expr></argument>, <argument pos:start="101:40" pos:end="101:69"><expr pos:start="101:40" pos:end="101:69"><call pos:start="101:40" pos:end="101:69"><name pos:start="101:40" pos:end="101:42">MIN</name><argument_list pos:start="101:43" pos:end="101:69">(<argument pos:start="101:44" pos:end="101:57"><expr pos:start="101:44" pos:end="101:57"><name pos:start="101:44" pos:end="101:57"><name pos:start="101:44" pos:end="101:44">s</name><operator pos:start="101:45" pos:end="101:46">-&gt;</operator><name pos:start="101:47" pos:end="101:57">granularity</name></name></expr></argument>, <argument pos:start="101:60" pos:end="101:68"><expr pos:start="101:60" pos:end="101:68"><name pos:start="101:60" pos:end="101:68">remaining</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="107:5" pos:end="107:34">/* Copy the dirty cluster.  */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:19"><expr pos:start="109:5" pos:end="109:18"><name pos:start="109:5" pos:end="109:16"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:16">in_flight</name></name><operator pos:start="109:17" pos:end="109:18">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:39"><expr pos:start="111:5" pos:end="111:38"><name pos:start="111:5" pos:end="111:24"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:24">sectors_in_flight</name></name> <operator pos:start="111:26" pos:end="111:27">+=</operator> <name pos:start="111:29" pos:end="111:38">nb_sectors</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="115:62"><expr pos:start="113:5" pos:end="115:61"><call pos:start="113:5" pos:end="115:61"><name pos:start="113:5" pos:end="113:30">trace_mirror_one_iteration</name><argument_list pos:start="113:31" pos:end="115:61">(<argument pos:start="113:32" pos:end="113:32"><expr pos:start="113:32" pos:end="113:32"><name pos:start="113:32" pos:end="113:32">s</name></expr></argument>, <argument pos:start="113:35" pos:end="113:63"><expr pos:start="113:35" pos:end="113:63"><name pos:start="113:35" pos:end="113:44">sector_num</name> <operator pos:start="113:46" pos:end="113:46">*</operator> <name pos:start="113:48" pos:end="113:63">BDRV_SECTOR_SIZE</name></expr></argument>,

                               <argument pos:start="115:32" pos:end="115:60"><expr pos:start="115:32" pos:end="115:60"><name pos:start="115:32" pos:end="115:41">nb_sectors</name> <operator pos:start="115:43" pos:end="115:43">*</operator> <name pos:start="115:45" pos:end="115:60">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="121:45"><expr pos:start="119:5" pos:end="121:44"><call pos:start="119:5" pos:end="121:44"><name pos:start="119:5" pos:end="119:18">blk_aio_preadv</name><argument_list pos:start="119:19" pos:end="121:44">(<argument pos:start="119:20" pos:end="119:25"><expr pos:start="119:20" pos:end="119:25"><name pos:start="119:20" pos:end="119:25">source</name></expr></argument>, <argument pos:start="119:28" pos:end="119:56"><expr pos:start="119:28" pos:end="119:56"><name pos:start="119:28" pos:end="119:37">sector_num</name> <operator pos:start="119:39" pos:end="119:39">*</operator> <name pos:start="119:41" pos:end="119:56">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="119:59" pos:end="119:67"><expr pos:start="119:59" pos:end="119:67"><operator pos:start="119:59" pos:end="119:59">&amp;</operator><name pos:start="119:60" pos:end="119:67"><name pos:start="119:60" pos:end="119:61">op</name><operator pos:start="119:62" pos:end="119:63">-&gt;</operator><name pos:start="119:64" pos:end="119:67">qiov</name></name></expr></argument>, <argument pos:start="119:70" pos:end="119:70"><expr pos:start="119:70" pos:end="119:70"><literal type="number" pos:start="119:70" pos:end="119:70">0</literal></expr></argument>,

                   <argument pos:start="121:20" pos:end="121:39"><expr pos:start="121:20" pos:end="121:39"><name pos:start="121:20" pos:end="121:39">mirror_read_complete</name></expr></argument>, <argument pos:start="121:42" pos:end="121:43"><expr pos:start="121:42" pos:end="121:43"><name pos:start="121:42" pos:end="121:43">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="123:5" pos:end="123:15">return <expr pos:start="123:12" pos:end="123:14"><name pos:start="123:12" pos:end="123:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
