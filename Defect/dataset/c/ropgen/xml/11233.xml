<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11233.c" pos:tabs="8"><function pos:start="1:1" pos:end="154:2"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:31">qcow2_alloc_cluster_link_l2</name><parameter_list pos:start="1:32" pos:end="1:68">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:67"><decl pos:start="1:55" pos:end="1:67"><type pos:start="1:55" pos:end="1:67"><name pos:start="1:55" pos:end="1:64">QCowL2Meta</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:67">m</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="154:2">{<block_content pos:start="5:5" pos:end="152:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">j</name> <init pos:start="7:14" pos:end="7:16">= <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr></init></decl>, <decl pos:start="7:19" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:26">l2_index</name></decl>, <decl pos:start="7:29" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:29" pos:end="7:31">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">uint64_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:25">old_cluster</name></decl>, <decl pos:start="9:28" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:14"><modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:36">l2_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:27">cluster_offset</name> <init pos:start="11:29" pos:end="11:45">= <expr pos:start="11:31" pos:end="11:45"><name pos:start="11:31" pos:end="11:45"><name pos:start="11:31" pos:end="11:31">m</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:45">alloc_offset</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:71"><expr pos:start="15:5" pos:end="15:70"><call pos:start="15:5" pos:end="15:70"><name pos:start="15:5" pos:end="15:31">trace_qcow2_cluster_link_l2</name><argument_list pos:start="15:32" pos:end="15:70">(<argument pos:start="15:33" pos:end="15:53"><expr pos:start="15:33" pos:end="15:53"><call pos:start="15:33" pos:end="15:53"><name pos:start="15:33" pos:end="15:51">qemu_coroutine_self</name><argument_list pos:start="15:52" pos:end="15:53">()</argument_list></call></expr></argument>, <argument pos:start="15:56" pos:end="15:69"><expr pos:start="15:56" pos:end="15:69"><name pos:start="15:56" pos:end="15:69"><name pos:start="15:56" pos:end="15:56">m</name><operator pos:start="15:57" pos:end="15:58">-&gt;</operator><name pos:start="15:59" pos:end="15:69">nb_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><call pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:30">(<argument pos:start="17:12" pos:end="17:29"><expr pos:start="17:12" pos:end="17:29"><name pos:start="17:12" pos:end="17:25"><name pos:start="17:12" pos:end="17:12">m</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:25">nb_clusters</name></name> <operator pos:start="17:27" pos:end="17:27">&gt;</operator> <literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:62"><expr pos:start="21:5" pos:end="21:61"><name pos:start="21:5" pos:end="21:15">old_cluster</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:61"><name pos:start="21:19" pos:end="21:26">g_malloc</name><argument_list pos:start="21:27" pos:end="21:61">(<argument pos:start="21:28" pos:end="21:60"><expr pos:start="21:28" pos:end="21:60"><name pos:start="21:28" pos:end="21:41"><name pos:start="21:28" pos:end="21:28">m</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:41">nb_clusters</name></name> <operator pos:start="21:43" pos:end="21:43">*</operator> <sizeof pos:start="21:45" pos:end="21:60">sizeof<argument_list pos:start="21:51" pos:end="21:60">(<argument pos:start="21:52" pos:end="21:59"><expr pos:start="21:52" pos:end="21:59"><name pos:start="21:52" pos:end="21:59">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:44">/* copy content of unmodified sectors */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:44"><expr pos:start="27:5" pos:end="27:43"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:43"><name pos:start="27:11" pos:end="27:21">perform_cow</name><argument_list pos:start="27:22" pos:end="27:43">(<argument pos:start="27:23" pos:end="27:24"><expr pos:start="27:23" pos:end="27:24"><name pos:start="27:23" pos:end="27:24">bs</name></expr></argument>, <argument pos:start="27:27" pos:end="27:27"><expr pos:start="27:27" pos:end="27:27"><name pos:start="27:27" pos:end="27:27">m</name></expr></argument>, <argument pos:start="27:30" pos:end="27:42"><expr pos:start="27:30" pos:end="27:42"><operator pos:start="27:30" pos:end="27:30">&amp;</operator><name pos:start="27:31" pos:end="27:42"><name pos:start="27:31" pos:end="27:31">m</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:42">cow_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:17">

        <goto pos:start="31:9" pos:end="31:17">goto <name pos:start="31:14" pos:end="31:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:41"><name pos:start="37:11" pos:end="37:21">perform_cow</name><argument_list pos:start="37:22" pos:end="37:41">(<argument pos:start="37:23" pos:end="37:24"><expr pos:start="37:23" pos:end="37:24"><name pos:start="37:23" pos:end="37:24">bs</name></expr></argument>, <argument pos:start="37:27" pos:end="37:27"><expr pos:start="37:27" pos:end="37:27"><name pos:start="37:27" pos:end="37:27">m</name></expr></argument>, <argument pos:start="37:30" pos:end="37:40"><expr pos:start="37:30" pos:end="37:40"><operator pos:start="37:30" pos:end="37:30">&amp;</operator><name pos:start="37:31" pos:end="37:40"><name pos:start="37:31" pos:end="37:31">m</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:40">cow_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">&lt;</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>)</condition> <block pos:start="39:18" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:17">

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:26">/* Update L2 table. */</comment>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:30">(<expr pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:29">use_lazy_refcounts</name></name></expr>)</condition> <block pos:start="49:32" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:29">

        <expr_stmt pos:start="51:9" pos:end="51:29"><expr pos:start="51:9" pos:end="51:28"><call pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:24">qcow2_mark_dirty</name><argument_list pos:start="51:25" pos:end="51:28">(<argument pos:start="51:26" pos:end="51:27"><expr pos:start="51:26" pos:end="51:27"><name pos:start="51:26" pos:end="51:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:41">(<expr pos:start="55:9" pos:end="55:40"><call pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:37">qcow2_need_accurate_refcounts</name><argument_list pos:start="55:38" pos:end="55:40">(<argument pos:start="55:39" pos:end="55:39"><expr pos:start="55:39" pos:end="55:39"><name pos:start="55:39" pos:end="55:39">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:43" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:60">

        <expr_stmt pos:start="57:9" pos:end="59:60"><expr pos:start="57:9" pos:end="59:59"><call pos:start="57:9" pos:end="59:59"><name pos:start="57:9" pos:end="57:34">qcow2_cache_set_dependency</name><argument_list pos:start="57:35" pos:end="59:59">(<argument pos:start="57:36" pos:end="57:37"><expr pos:start="57:36" pos:end="57:37"><name pos:start="57:36" pos:end="57:37">bs</name></expr></argument>, <argument pos:start="57:40" pos:end="57:56"><expr pos:start="57:40" pos:end="57:56"><name pos:start="57:40" pos:end="57:56"><name pos:start="57:40" pos:end="57:40">s</name><operator pos:start="57:41" pos:end="57:42">-&gt;</operator><name pos:start="57:43" pos:end="57:56">l2_table_cache</name></name></expr></argument>,

                                   <argument pos:start="59:36" pos:end="59:58"><expr pos:start="59:36" pos:end="59:58"><name pos:start="59:36" pos:end="59:58"><name pos:start="59:36" pos:end="59:36">s</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:58">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:65"><expr pos:start="65:5" pos:end="65:64"><name pos:start="65:5" pos:end="65:7">ret</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:64"><name pos:start="65:11" pos:end="65:27">get_cluster_table</name><argument_list pos:start="65:28" pos:end="65:64">(<argument pos:start="65:29" pos:end="65:30"><expr pos:start="65:29" pos:end="65:30"><name pos:start="65:29" pos:end="65:30">bs</name></expr></argument>, <argument pos:start="65:33" pos:end="65:41"><expr pos:start="65:33" pos:end="65:41"><name pos:start="65:33" pos:end="65:41"><name pos:start="65:33" pos:end="65:33">m</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:41">offset</name></name></expr></argument>, <argument pos:start="65:44" pos:end="65:52"><expr pos:start="65:44" pos:end="65:52"><operator pos:start="65:44" pos:end="65:44">&amp;</operator><name pos:start="65:45" pos:end="65:52">l2_table</name></expr></argument>, <argument pos:start="65:55" pos:end="65:63"><expr pos:start="65:55" pos:end="65:63"><operator pos:start="65:55" pos:end="65:55">&amp;</operator><name pos:start="65:56" pos:end="65:63">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:16">(<expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">&lt;</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>)</condition> <block pos:start="67:18" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:17">

        <goto pos:start="69:9" pos:end="69:17">goto <name pos:start="69:14" pos:end="69:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:62"><expr pos:start="73:5" pos:end="73:61"><call pos:start="73:5" pos:end="73:61"><name pos:start="73:5" pos:end="73:32">qcow2_cache_entry_mark_dirty</name><argument_list pos:start="73:33" pos:end="73:61">(<argument pos:start="73:34" pos:end="73:50"><expr pos:start="73:34" pos:end="73:50"><name pos:start="73:34" pos:end="73:50"><name pos:start="73:34" pos:end="73:34">s</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:50">l2_table_cache</name></name></expr></argument>, <argument pos:start="73:53" pos:end="73:60"><expr pos:start="73:53" pos:end="73:60"><name pos:start="73:53" pos:end="73:60">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <for pos:start="78:5" pos:end="102:6">for <control pos:start="78:9" pos:end="78:40">(<init pos:start="78:10" pos:end="78:15"><expr pos:start="78:10" pos:end="78:14"><name pos:start="78:10" pos:end="78:10">i</name> <operator pos:start="78:12" pos:end="78:12">=</operator> <literal type="number" pos:start="78:14" pos:end="78:14">0</literal></expr>;</init> <condition pos:start="78:17" pos:end="78:35"><expr pos:start="78:17" pos:end="78:34"><name pos:start="78:17" pos:end="78:17">i</name> <operator pos:start="78:19" pos:end="78:19">&lt;</operator> <name pos:start="78:21" pos:end="78:34"><name pos:start="78:21" pos:end="78:21">m</name><operator pos:start="78:22" pos:end="78:23">-&gt;</operator><name pos:start="78:24" pos:end="78:34">nb_clusters</name></name></expr>;</condition> <incr pos:start="78:37" pos:end="78:39"><expr pos:start="78:37" pos:end="78:39"><name pos:start="78:37" pos:end="78:37">i</name><operator pos:start="78:38" pos:end="78:39">++</operator></expr></incr>)</control> <block pos:start="78:42" pos:end="102:6">{<block_content pos:start="92:9" pos:end="100:65">

        <comment type="block" pos:start="80:9" pos:end="90:54">/* if two concurrent writes happen to the same unallocated cluster

	 * each write allocates separate cluster and writes data concurrently.

	 * The first one to complete updates l2 table with pointer to its

	 * cluster the second one has to do RMW (which is done above by

	 * copy_sectors()), update l2 table with its cluster pointer and free

	 * old cluster. This is what this loop does */</comment>

        <if_stmt pos:start="92:9" pos:end="94:54"><if pos:start="92:9" pos:end="94:54">if<condition pos:start="92:11" pos:end="92:39">(<expr pos:start="92:12" pos:end="92:38"><name pos:start="92:12" pos:end="92:33"><name pos:start="92:12" pos:end="92:19">l2_table</name><index pos:start="92:20" pos:end="92:33">[<expr pos:start="92:21" pos:end="92:32"><name pos:start="92:21" pos:end="92:28">l2_index</name> <operator pos:start="92:30" pos:end="92:30">+</operator> <name pos:start="92:32" pos:end="92:32">i</name></expr>]</index></name> <operator pos:start="92:35" pos:end="92:36">!=</operator> <literal type="number" pos:start="92:38" pos:end="92:38">0</literal></expr>)</condition><block type="pseudo" pos:start="94:13" pos:end="94:54"><block_content pos:start="94:13" pos:end="94:54">

            <expr_stmt pos:start="94:13" pos:end="94:54"><expr pos:start="94:13" pos:end="94:53"><name pos:start="94:13" pos:end="94:28"><name pos:start="94:13" pos:end="94:23">old_cluster</name><index pos:start="94:24" pos:end="94:28">[<expr pos:start="94:25" pos:end="94:27"><name pos:start="94:25" pos:end="94:25">j</name><operator pos:start="94:26" pos:end="94:27">++</operator></expr>]</index></name> <operator pos:start="94:30" pos:end="94:30">=</operator> <name pos:start="94:32" pos:end="94:53"><name pos:start="94:32" pos:end="94:39">l2_table</name><index pos:start="94:40" pos:end="94:53">[<expr pos:start="94:41" pos:end="94:52"><name pos:start="94:41" pos:end="94:48">l2_index</name> <operator pos:start="94:50" pos:end="94:50">+</operator> <name pos:start="94:52" pos:end="94:52">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="98:9" pos:end="100:65"><expr pos:start="98:9" pos:end="100:64"><name pos:start="98:9" pos:end="98:30"><name pos:start="98:9" pos:end="98:16">l2_table</name><index pos:start="98:17" pos:end="98:30">[<expr pos:start="98:18" pos:end="98:29"><name pos:start="98:18" pos:end="98:25">l2_index</name> <operator pos:start="98:27" pos:end="98:27">+</operator> <name pos:start="98:29" pos:end="98:29">i</name></expr>]</index></name> <operator pos:start="98:32" pos:end="98:32">=</operator> <call pos:start="98:34" pos:end="100:64"><name pos:start="98:34" pos:end="98:44">cpu_to_be64</name><argument_list pos:start="98:45" pos:end="100:64">(<argument pos:start="98:46" pos:end="100:63"><expr pos:start="98:46" pos:end="100:63"><operator pos:start="98:46" pos:end="98:46">(</operator><name pos:start="98:47" pos:end="98:60">cluster_offset</name> <operator pos:start="98:62" pos:end="98:62">+</operator>

                    <operator pos:start="100:21" pos:end="100:21">(</operator><name pos:start="100:22" pos:end="100:22">i</name> <operator pos:start="100:24" pos:end="100:25">&lt;&lt;</operator> <name pos:start="100:27" pos:end="100:41"><name pos:start="100:27" pos:end="100:27">s</name><operator pos:start="100:28" pos:end="100:29">-&gt;</operator><name pos:start="100:30" pos:end="100:41">cluster_bits</name></name><operator pos:start="100:42" pos:end="100:42">)</operator><operator pos:start="100:43" pos:end="100:43">)</operator> <operator pos:start="100:45" pos:end="100:45">|</operator> <name pos:start="100:47" pos:end="100:63">QCOW_OFLAG_COPIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     </block_content>}</block></for>





    <expr_stmt pos:start="108:5" pos:end="108:69"><expr pos:start="108:5" pos:end="108:68"><name pos:start="108:5" pos:end="108:7">ret</name> <operator pos:start="108:9" pos:end="108:9">=</operator> <call pos:start="108:11" pos:end="108:68"><name pos:start="108:11" pos:end="108:25">qcow2_cache_put</name><argument_list pos:start="108:26" pos:end="108:68">(<argument pos:start="108:27" pos:end="108:28"><expr pos:start="108:27" pos:end="108:28"><name pos:start="108:27" pos:end="108:28">bs</name></expr></argument>, <argument pos:start="108:31" pos:end="108:47"><expr pos:start="108:31" pos:end="108:47"><name pos:start="108:31" pos:end="108:47"><name pos:start="108:31" pos:end="108:31">s</name><operator pos:start="108:32" pos:end="108:33">-&gt;</operator><name pos:start="108:34" pos:end="108:47">l2_table_cache</name></name></expr></argument>, <argument pos:start="108:50" pos:end="108:67"><expr pos:start="108:50" pos:end="108:67"><operator pos:start="108:50" pos:end="108:50">(</operator><name pos:start="108:51" pos:end="108:54">void</name><operator pos:start="108:55" pos:end="108:55">*</operator><operator pos:start="108:56" pos:end="108:56">*</operator><operator pos:start="108:57" pos:end="108:57">)</operator> <operator pos:start="108:59" pos:end="108:59">&amp;</operator><name pos:start="108:60" pos:end="108:67">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="110:5" pos:end="114:5"><if pos:start="110:5" pos:end="114:5">if <condition pos:start="110:8" pos:end="110:16">(<expr pos:start="110:9" pos:end="110:15"><name pos:start="110:9" pos:end="110:11">ret</name> <operator pos:start="110:13" pos:end="110:13">&lt;</operator> <literal type="number" pos:start="110:15" pos:end="110:15">0</literal></expr>)</condition> <block pos:start="110:18" pos:end="114:5">{<block_content pos:start="112:9" pos:end="112:17">

        <goto pos:start="112:9" pos:end="112:17">goto <name pos:start="112:14" pos:end="112:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="118:5" pos:end="130:7">/*

     * If this was a COW, we need to decrease the refcount of the old cluster.

     * Also flush bs-&gt;file to get the right order for L2 and refcount update.

     *

     * Don't discard clusters that reach a refcount of 0 (e.g. compressed

     * clusters), the next write will reuse them anyway.

     */</comment>

    <if_stmt pos:start="132:5" pos:end="142:5"><if pos:start="132:5" pos:end="142:5">if <condition pos:start="132:8" pos:end="132:15">(<expr pos:start="132:9" pos:end="132:14"><name pos:start="132:9" pos:end="132:9">j</name> <operator pos:start="132:11" pos:end="132:12">!=</operator> <literal type="number" pos:start="132:14" pos:end="132:14">0</literal></expr>)</condition> <block pos:start="132:17" pos:end="142:5">{<block_content pos:start="134:9" pos:end="140:9">

        <for pos:start="134:9" pos:end="140:9">for <control pos:start="134:13" pos:end="134:31">(<init pos:start="134:14" pos:end="134:19"><expr pos:start="134:14" pos:end="134:18"><name pos:start="134:14" pos:end="134:14">i</name> <operator pos:start="134:16" pos:end="134:16">=</operator> <literal type="number" pos:start="134:18" pos:end="134:18">0</literal></expr>;</init> <condition pos:start="134:21" pos:end="134:26"><expr pos:start="134:21" pos:end="134:25"><name pos:start="134:21" pos:end="134:21">i</name> <operator pos:start="134:23" pos:end="134:23">&lt;</operator> <name pos:start="134:25" pos:end="134:25">j</name></expr>;</condition> <incr pos:start="134:28" pos:end="134:30"><expr pos:start="134:28" pos:end="134:30"><name pos:start="134:28" pos:end="134:28">i</name><operator pos:start="134:29" pos:end="134:30">++</operator></expr></incr>)</control> <block pos:start="134:33" pos:end="140:9">{<block_content pos:start="136:13" pos:end="138:57">

            <expr_stmt pos:start="136:13" pos:end="138:57"><expr pos:start="136:13" pos:end="138:56"><call pos:start="136:13" pos:end="138:56"><name pos:start="136:13" pos:end="136:35">qcow2_free_any_clusters</name><argument_list pos:start="136:36" pos:end="138:56">(<argument pos:start="136:37" pos:end="136:38"><expr pos:start="136:37" pos:end="136:38"><name pos:start="136:37" pos:end="136:38">bs</name></expr></argument>, <argument pos:start="136:41" pos:end="136:67"><expr pos:start="136:41" pos:end="136:67"><call pos:start="136:41" pos:end="136:67"><name pos:start="136:41" pos:end="136:51">be64_to_cpu</name><argument_list pos:start="136:52" pos:end="136:67">(<argument pos:start="136:53" pos:end="136:66"><expr pos:start="136:53" pos:end="136:66"><name pos:start="136:53" pos:end="136:66"><name pos:start="136:53" pos:end="136:63">old_cluster</name><index pos:start="136:64" pos:end="136:66">[<expr pos:start="136:65" pos:end="136:65"><name pos:start="136:65" pos:end="136:65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="136:70" pos:end="136:70"><expr pos:start="136:70" pos:end="136:70"><literal type="number" pos:start="136:70" pos:end="136:70">1</literal></expr></argument>,

                                    <argument pos:start="138:37" pos:end="138:55"><expr pos:start="138:37" pos:end="138:55"><name pos:start="138:37" pos:end="138:55">QCOW2_DISCARD_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="146:5" pos:end="146:12"><expr pos:start="146:5" pos:end="146:11"><name pos:start="146:5" pos:end="146:7">ret</name> <operator pos:start="146:9" pos:end="146:9">=</operator> <literal type="number" pos:start="146:11" pos:end="146:11">0</literal></expr>;</expr_stmt>

<label pos:start="148:1" pos:end="148:4"><name pos:start="148:1" pos:end="148:3">err</name>:</label>

    <expr_stmt pos:start="150:5" pos:end="150:24"><expr pos:start="150:5" pos:end="150:23"><call pos:start="150:5" pos:end="150:23"><name pos:start="150:5" pos:end="150:10">g_free</name><argument_list pos:start="150:11" pos:end="150:23">(<argument pos:start="150:12" pos:end="150:22"><expr pos:start="150:12" pos:end="150:22"><name pos:start="150:12" pos:end="150:22">old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="152:5" pos:end="152:15">return <expr pos:start="152:12" pos:end="152:14"><name pos:start="152:12" pos:end="152:14">ret</name></expr>;</return>

 </block_content>}</block></function></unit>
