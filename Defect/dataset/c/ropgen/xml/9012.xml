<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9012.c" pos:tabs="8"><function pos:start="1:1" pos:end="467:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">tak_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:62">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:61"><decl pos:start="3:49" pos:end="3:61"><type pos:start="3:49" pos:end="3:61"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:61">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="467:1">{<block_content pos:start="7:5" pos:end="465:21">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">TAKDecContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name>  <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:29">avctx</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:18">frame</name>    <init pos:start="9:23" pos:end="9:28">= <expr pos:start="9:25" pos:end="9:28"><name pos:start="9:25" pos:end="9:28">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15">ThreadFrame</name></type> <name pos:start="11:17" pos:end="11:22">tframe</name> <init pos:start="11:24" pos:end="11:38">= <expr pos:start="11:26" pos:end="11:38"><block pos:start="11:26" pos:end="11:38">{ <expr pos:start="11:28" pos:end="11:36"><operator pos:start="11:28" pos:end="11:28">.</operator><name pos:start="11:29" pos:end="11:29">f</name> <operator pos:start="11:31" pos:end="11:31">=</operator> <name pos:start="11:33" pos:end="11:36">data</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">GetBitContext</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:21">gb</name> <init pos:start="13:23" pos:end="13:30">= <expr pos:start="13:25" pos:end="13:30"><operator pos:start="13:25" pos:end="13:25">&amp;</operator><name pos:start="13:26" pos:end="13:30"><name pos:start="13:26" pos:end="13:26">s</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:30">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">chan</name></decl>, <decl pos:start="15:15" pos:end="15:15"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:15">i</name></decl>, <decl pos:start="15:18" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:18" pos:end="15:20">ret</name></decl>, <decl pos:start="15:23" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:23" pos:end="15:27">hsize</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:35"><if pos:start="19:5" pos:end="21:35">if <condition pos:start="19:8" pos:end="19:47">(<expr pos:start="19:9" pos:end="19:46"><name pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:11">pkt</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:17">size</name></name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:46">TAK_MIN_FRAME_HEADER_BYTES</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:35"><block_content pos:start="21:9" pos:end="21:35">

        <return pos:start="21:9" pos:end="21:35">return <expr pos:start="21:16" pos:end="21:34"><name pos:start="21:16" pos:end="21:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="27:19"><if pos:start="25:5" pos:end="27:19">if <condition pos:start="25:8" pos:end="25:61">(<expr pos:start="25:9" pos:end="25:60"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:12">ret</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:55"><name pos:start="25:16" pos:end="25:29">init_get_bits8</name><argument_list pos:start="25:30" pos:end="25:55">(<argument pos:start="25:31" pos:end="25:32"><expr pos:start="25:31" pos:end="25:32"><name pos:start="25:31" pos:end="25:32">gb</name></expr></argument>, <argument pos:start="25:35" pos:end="25:43"><expr pos:start="25:35" pos:end="25:43"><name pos:start="25:35" pos:end="25:43"><name pos:start="25:35" pos:end="25:37">pkt</name><operator pos:start="25:38" pos:end="25:39">-&gt;</operator><name pos:start="25:40" pos:end="25:43">data</name></name></expr></argument>, <argument pos:start="25:46" pos:end="25:54"><expr pos:start="25:46" pos:end="25:54"><name pos:start="25:46" pos:end="25:54"><name pos:start="25:46" pos:end="25:48">pkt</name><operator pos:start="25:49" pos:end="25:50">-&gt;</operator><name pos:start="25:51" pos:end="25:54">size</name></name></expr></argument>)</argument_list></call><operator pos:start="25:56" pos:end="25:56">)</operator> <operator pos:start="25:58" pos:end="25:58">&lt;</operator> <literal type="number" pos:start="25:60" pos:end="25:60">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:19"><block_content pos:start="27:9" pos:end="27:19">

        <return pos:start="27:9" pos:end="27:19">return <expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="33:19"><if pos:start="31:5" pos:end="33:19">if <condition pos:start="31:8" pos:end="31:69">(<expr pos:start="31:9" pos:end="31:68"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:12">ret</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <call pos:start="31:16" pos:end="31:63"><name pos:start="31:16" pos:end="31:41">ff_tak_decode_frame_header</name><argument_list pos:start="31:42" pos:end="31:63">(<argument pos:start="31:43" pos:end="31:47"><expr pos:start="31:43" pos:end="31:47"><name pos:start="31:43" pos:end="31:47">avctx</name></expr></argument>, <argument pos:start="31:50" pos:end="31:51"><expr pos:start="31:50" pos:end="31:51"><name pos:start="31:50" pos:end="31:51">gb</name></expr></argument>, <argument pos:start="31:54" pos:end="31:59"><expr pos:start="31:54" pos:end="31:59"><operator pos:start="31:54" pos:end="31:54">&amp;</operator><name pos:start="31:55" pos:end="31:59"><name pos:start="31:55" pos:end="31:55">s</name><operator pos:start="31:56" pos:end="31:57">-&gt;</operator><name pos:start="31:58" pos:end="31:59">ti</name></name></expr></argument>, <argument pos:start="31:62" pos:end="31:62"><expr pos:start="31:62" pos:end="31:62"><literal type="number" pos:start="31:62" pos:end="31:62">0</literal></expr></argument>)</argument_list></call><operator pos:start="31:64" pos:end="31:64">)</operator> <operator pos:start="31:66" pos:end="31:66">&lt;</operator> <literal type="number" pos:start="31:68" pos:end="31:68">0</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:19"><block_content pos:start="33:9" pos:end="33:19">

        <return pos:start="33:9" pos:end="33:19">return <expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="51:5"><if pos:start="37:5" pos:end="51:5">if <condition pos:start="37:8" pos:end="37:66">(<expr pos:start="37:9" pos:end="37:65"><name pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:13">avctx</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:30">err_recognition</name></name> <operator pos:start="37:32" pos:end="37:32">&amp;</operator> <operator pos:start="37:34" pos:end="37:34">(</operator><name pos:start="37:35" pos:end="37:48">AV_EF_CRCCHECK</name><operator pos:start="37:49" pos:end="37:49">|</operator><name pos:start="37:50" pos:end="37:64">AV_EF_COMPLIANT</name><operator pos:start="37:65" pos:end="37:65">)</operator></expr>)</condition> <block pos:start="37:68" pos:end="51:5">{<block_content pos:start="39:9" pos:end="49:9">

        <expr_stmt pos:start="39:9" pos:end="39:39"><expr pos:start="39:9" pos:end="39:38"><name pos:start="39:9" pos:end="39:13">hsize</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:34"><name pos:start="39:17" pos:end="39:30">get_bits_count</name><argument_list pos:start="39:31" pos:end="39:34">(<argument pos:start="39:32" pos:end="39:33"><expr pos:start="39:32" pos:end="39:33"><name pos:start="39:32" pos:end="39:33">gb</name></expr></argument>)</argument_list></call> <operator pos:start="39:36" pos:end="39:36">/</operator> <literal type="number" pos:start="39:38" pos:end="39:38">8</literal></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="41:47">(<expr pos:start="41:13" pos:end="41:46"><call pos:start="41:13" pos:end="41:46"><name pos:start="41:13" pos:end="41:28">ff_tak_check_crc</name><argument_list pos:start="41:29" pos:end="41:46">(<argument pos:start="41:30" pos:end="41:38"><expr pos:start="41:30" pos:end="41:38"><name pos:start="41:30" pos:end="41:38"><name pos:start="41:30" pos:end="41:32">pkt</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:38">data</name></name></expr></argument>, <argument pos:start="41:41" pos:end="41:45"><expr pos:start="41:41" pos:end="41:45"><name pos:start="41:41" pos:end="41:45">hsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:49" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:43">

            <expr_stmt pos:start="43:13" pos:end="43:55"><expr pos:start="43:13" pos:end="43:54"><call pos:start="43:13" pos:end="43:54"><name pos:start="43:13" pos:end="43:18">av_log</name><argument_list pos:start="43:19" pos:end="43:54">(<argument pos:start="43:20" pos:end="43:24"><expr pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:24">avctx</name></expr></argument>, <argument pos:start="43:27" pos:end="43:38"><expr pos:start="43:27" pos:end="43:38"><name pos:start="43:27" pos:end="43:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:41" pos:end="43:53"><expr pos:start="43:41" pos:end="43:53"><literal type="string" pos:start="43:41" pos:end="43:53">"CRC error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="47:43"><if pos:start="45:13" pos:end="47:43">if <condition pos:start="45:16" pos:end="45:55">(<expr pos:start="45:17" pos:end="45:54"><name pos:start="45:17" pos:end="45:38"><name pos:start="45:17" pos:end="45:21">avctx</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:38">err_recognition</name></name> <operator pos:start="45:40" pos:end="45:40">&amp;</operator> <name pos:start="45:42" pos:end="45:54">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:43"><block_content pos:start="47:17" pos:end="47:43">

                <return pos:start="47:17" pos:end="47:43">return <expr pos:start="47:24" pos:end="47:42"><name pos:start="47:24" pos:end="47:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="57:46">(<expr pos:start="55:9" pos:end="57:45"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:13">ti</name><operator pos:start="55:14" pos:end="55:14">.</operator><name pos:start="55:15" pos:end="55:19">codec</name></name> <operator pos:start="55:21" pos:end="55:22">!=</operator> <name pos:start="55:24" pos:end="55:44">TAK_CODEC_MONO_STEREO</name> <operator pos:start="55:46" pos:end="55:47">&amp;&amp;</operator>

        <name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:13">ti</name><operator pos:start="57:14" pos:end="57:14">.</operator><name pos:start="57:15" pos:end="57:19">codec</name></name> <operator pos:start="57:21" pos:end="57:22">!=</operator> <name pos:start="57:24" pos:end="57:45">TAK_CODEC_MULTICHANNEL</name></expr>)</condition> <block pos:start="57:48" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:36">

        <expr_stmt pos:start="59:9" pos:end="59:76"><expr pos:start="59:9" pos:end="59:75"><call pos:start="59:9" pos:end="59:75"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="59:75">(<argument pos:start="59:16" pos:end="59:20"><expr pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:20">avctx</name></expr></argument>, <argument pos:start="59:23" pos:end="59:34"><expr pos:start="59:23" pos:end="59:34"><name pos:start="59:23" pos:end="59:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:37" pos:end="59:61"><expr pos:start="59:37" pos:end="59:61"><literal type="string" pos:start="59:37" pos:end="59:61">"unsupported codec: %d\n"</literal></expr></argument>, <argument pos:start="59:64" pos:end="59:74"><expr pos:start="59:64" pos:end="59:74"><name pos:start="59:64" pos:end="59:74"><name pos:start="59:64" pos:end="59:64">s</name><operator pos:start="59:65" pos:end="59:66">-&gt;</operator><name pos:start="59:67" pos:end="59:68">ti</name><operator pos:start="59:69" pos:end="59:69">.</operator><name pos:start="59:70" pos:end="59:74">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:36">return <expr pos:start="61:16" pos:end="61:35"><name pos:start="61:16" pos:end="61:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:24">(<expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:13">ti</name><operator pos:start="65:14" pos:end="65:14">.</operator><name pos:start="65:15" pos:end="65:23">data_type</name></name></expr>)</condition> <block pos:start="65:26" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:35">

        <expr_stmt pos:start="67:9" pos:end="69:63"><expr pos:start="67:9" pos:end="69:62"><call pos:start="67:9" pos:end="69:62"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="69:62">(<argument pos:start="67:16" pos:end="67:20"><expr pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:20">avctx</name></expr></argument>, <argument pos:start="67:23" pos:end="67:34"><expr pos:start="67:23" pos:end="67:34"><name pos:start="67:23" pos:end="67:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="69:16" pos:end="69:44"><expr pos:start="69:16" pos:end="69:44"><literal type="string" pos:start="69:16" pos:end="69:44">"unsupported data type: %d\n"</literal></expr></argument>, <argument pos:start="69:47" pos:end="69:61"><expr pos:start="69:47" pos:end="69:61"><name pos:start="69:47" pos:end="69:61"><name pos:start="69:47" pos:end="69:47">s</name><operator pos:start="69:48" pos:end="69:49">-&gt;</operator><name pos:start="69:50" pos:end="69:51">ti</name><operator pos:start="69:52" pos:end="69:52">.</operator><name pos:start="69:53" pos:end="69:61">data_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:35">return <expr pos:start="71:16" pos:end="71:34"><name pos:start="71:16" pos:end="71:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:67">(<expr pos:start="75:9" pos:end="75:66"><name pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:13">ti</name><operator pos:start="75:14" pos:end="75:14">.</operator><name pos:start="75:15" pos:end="75:19">codec</name></name> <operator pos:start="75:21" pos:end="75:22">==</operator> <name pos:start="75:24" pos:end="75:44">TAK_CODEC_MONO_STEREO</name> <operator pos:start="75:46" pos:end="75:47">&amp;&amp;</operator> <name pos:start="75:49" pos:end="75:62"><name pos:start="75:49" pos:end="75:49">s</name><operator pos:start="75:50" pos:end="75:51">-&gt;</operator><name pos:start="75:52" pos:end="75:53">ti</name><operator pos:start="75:54" pos:end="75:54">.</operator><name pos:start="75:55" pos:end="75:62">channels</name></name> <operator pos:start="75:64" pos:end="75:64">&gt;</operator> <literal type="number" pos:start="75:66" pos:end="75:66">2</literal></expr>)</condition> <block pos:start="75:69" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:35">

        <expr_stmt pos:start="77:9" pos:end="79:67"><expr pos:start="77:9" pos:end="79:66"><call pos:start="77:9" pos:end="79:66"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="79:66">(<argument pos:start="77:16" pos:end="77:20"><expr pos:start="77:16" pos:end="77:20"><name pos:start="77:16" pos:end="77:20">avctx</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="79:16" pos:end="79:49"><expr pos:start="79:16" pos:end="79:49"><literal type="string" pos:start="79:16" pos:end="79:49">"invalid number of channels: %d\n"</literal></expr></argument>, <argument pos:start="79:52" pos:end="79:65"><expr pos:start="79:52" pos:end="79:65"><name pos:start="79:52" pos:end="79:65"><name pos:start="79:52" pos:end="79:52">s</name><operator pos:start="79:53" pos:end="79:54">-&gt;</operator><name pos:start="79:55" pos:end="79:56">ti</name><operator pos:start="79:57" pos:end="79:57">.</operator><name pos:start="79:58" pos:end="79:65">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:35">return <expr pos:start="81:16" pos:end="81:34"><name pos:start="81:16" pos:end="81:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="93:5">if <condition pos:start="85:8" pos:end="85:27">(<expr pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:13">ti</name><operator pos:start="85:14" pos:end="85:14">.</operator><name pos:start="85:15" pos:end="85:22">channels</name></name> <operator pos:start="85:24" pos:end="85:24">&gt;</operator> <literal type="number" pos:start="85:26" pos:end="85:26">6</literal></expr>)</condition> <block pos:start="85:29" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:35">

        <expr_stmt pos:start="87:9" pos:end="89:71"><expr pos:start="87:9" pos:end="89:70"><call pos:start="87:9" pos:end="89:70"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="89:70">(<argument pos:start="87:16" pos:end="87:20"><expr pos:start="87:16" pos:end="87:20"><name pos:start="87:16" pos:end="87:20">avctx</name></expr></argument>, <argument pos:start="87:23" pos:end="87:34"><expr pos:start="87:23" pos:end="87:34"><name pos:start="87:23" pos:end="87:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="89:16" pos:end="89:53"><expr pos:start="89:16" pos:end="89:53"><literal type="string" pos:start="89:16" pos:end="89:53">"unsupported number of channels: %d\n"</literal></expr></argument>, <argument pos:start="89:56" pos:end="89:69"><expr pos:start="89:56" pos:end="89:69"><name pos:start="89:56" pos:end="89:69"><name pos:start="89:56" pos:end="89:56">s</name><operator pos:start="89:57" pos:end="89:58">-&gt;</operator><name pos:start="89:59" pos:end="89:60">ti</name><operator pos:start="89:61" pos:end="89:61">.</operator><name pos:start="89:62" pos:end="89:69">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:35">return <expr pos:start="91:16" pos:end="91:34"><name pos:start="91:16" pos:end="91:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:33">(<expr pos:start="97:9" pos:end="97:32"><name pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:13">ti</name><operator pos:start="97:14" pos:end="97:14">.</operator><name pos:start="97:15" pos:end="97:27">frame_samples</name></name> <operator pos:start="97:29" pos:end="97:30">&lt;=</operator> <literal type="number" pos:start="97:32" pos:end="97:32">0</literal></expr>)</condition> <block pos:start="97:35" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:35">

        <expr_stmt pos:start="99:9" pos:end="99:79"><expr pos:start="99:9" pos:end="99:78"><call pos:start="99:9" pos:end="99:78"><name pos:start="99:9" pos:end="99:14">av_log</name><argument_list pos:start="99:15" pos:end="99:78">(<argument pos:start="99:16" pos:end="99:20"><expr pos:start="99:16" pos:end="99:20"><name pos:start="99:16" pos:end="99:20">avctx</name></expr></argument>, <argument pos:start="99:23" pos:end="99:34"><expr pos:start="99:23" pos:end="99:34"><name pos:start="99:23" pos:end="99:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:37" pos:end="99:77"><expr pos:start="99:37" pos:end="99:77"><literal type="string" pos:start="99:37" pos:end="99:77">"unsupported/invalid number of samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:35">return <expr pos:start="101:16" pos:end="101:34"><name pos:start="101:16" pos:end="101:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="115:5"><if pos:start="107:5" pos:end="115:5">if <condition pos:start="107:8" pos:end="107:48">(<expr pos:start="107:9" pos:end="107:47"><name pos:start="107:9" pos:end="107:17"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:13">ti</name><operator pos:start="107:14" pos:end="107:14">.</operator><name pos:start="107:15" pos:end="107:17">bps</name></name> <operator pos:start="107:19" pos:end="107:20">!=</operator> <name pos:start="107:22" pos:end="107:47"><name pos:start="107:22" pos:end="107:26">avctx</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:47">bits_per_raw_sample</name></name></expr>)</condition> <block pos:start="107:50" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:23">

        <expr_stmt pos:start="109:9" pos:end="109:47"><expr pos:start="109:9" pos:end="109:46"><name pos:start="109:9" pos:end="109:34"><name pos:start="109:9" pos:end="109:13">avctx</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:34">bits_per_raw_sample</name></name> <operator pos:start="109:36" pos:end="109:36">=</operator> <name pos:start="109:38" pos:end="109:46"><name pos:start="109:38" pos:end="109:38">s</name><operator pos:start="109:39" pos:end="109:40">-&gt;</operator><name pos:start="109:41" pos:end="109:42">ti</name><operator pos:start="109:43" pos:end="109:43">.</operator><name pos:start="109:44" pos:end="109:46">bps</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="113:23"><if pos:start="111:9" pos:end="113:23">if <condition pos:start="111:12" pos:end="111:46">(<expr pos:start="111:13" pos:end="111:45"><operator pos:start="111:13" pos:end="111:13">(</operator><name pos:start="111:14" pos:end="111:16">ret</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <call pos:start="111:20" pos:end="111:40"><name pos:start="111:20" pos:end="111:33">set_bps_params</name><argument_list pos:start="111:34" pos:end="111:40">(<argument pos:start="111:35" pos:end="111:39"><expr pos:start="111:35" pos:end="111:39"><name pos:start="111:35" pos:end="111:39">avctx</name></expr></argument>)</argument_list></call><operator pos:start="111:41" pos:end="111:41">)</operator> <operator pos:start="111:43" pos:end="111:43">&lt;</operator> <literal type="number" pos:start="111:45" pos:end="111:45">0</literal></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:23"><block_content pos:start="113:13" pos:end="113:23">

            <return pos:start="113:13" pos:end="113:23">return <expr pos:start="113:20" pos:end="113:22"><name pos:start="113:20" pos:end="113:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:48">(<expr pos:start="117:9" pos:end="117:47"><name pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:13">ti</name><operator pos:start="117:14" pos:end="117:14">.</operator><name pos:start="117:15" pos:end="117:25">sample_rate</name></name> <operator pos:start="117:27" pos:end="117:28">!=</operator> <name pos:start="117:30" pos:end="117:47"><name pos:start="117:30" pos:end="117:34">avctx</name><operator pos:start="117:35" pos:end="117:36">-&gt;</operator><name pos:start="117:37" pos:end="117:47">sample_rate</name></name></expr>)</condition> <block pos:start="117:50" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:38">

        <expr_stmt pos:start="119:9" pos:end="119:47"><expr pos:start="119:9" pos:end="119:46"><name pos:start="119:9" pos:end="119:26"><name pos:start="119:9" pos:end="119:13">avctx</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:26">sample_rate</name></name> <operator pos:start="119:28" pos:end="119:28">=</operator> <name pos:start="119:30" pos:end="119:46"><name pos:start="119:30" pos:end="119:30">s</name><operator pos:start="119:31" pos:end="119:32">-&gt;</operator><name pos:start="119:33" pos:end="119:34">ti</name><operator pos:start="119:35" pos:end="119:35">.</operator><name pos:start="119:36" pos:end="119:46">sample_rate</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:38"><expr pos:start="121:9" pos:end="121:37"><call pos:start="121:9" pos:end="121:37"><name pos:start="121:9" pos:end="121:30">set_sample_rate_params</name><argument_list pos:start="121:31" pos:end="121:37">(<argument pos:start="121:32" pos:end="121:36"><expr pos:start="121:32" pos:end="121:36"><name pos:start="121:32" pos:end="121:36">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="125:5" pos:end="127:48"><if pos:start="125:5" pos:end="127:48">if <condition pos:start="125:8" pos:end="125:24">(<expr pos:start="125:9" pos:end="125:23"><name pos:start="125:9" pos:end="125:23"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:13">ti</name><operator pos:start="125:14" pos:end="125:14">.</operator><name pos:start="125:15" pos:end="125:23">ch_layout</name></name></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="127:48"><block_content pos:start="127:9" pos:end="127:48">

        <expr_stmt pos:start="127:9" pos:end="127:48"><expr pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:29"><name pos:start="127:9" pos:end="127:13">avctx</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:29">channel_layout</name></name> <operator pos:start="127:31" pos:end="127:31">=</operator> <name pos:start="127:33" pos:end="127:47"><name pos:start="127:33" pos:end="127:33">s</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:37">ti</name><operator pos:start="127:38" pos:end="127:38">.</operator><name pos:start="127:39" pos:end="127:47">ch_layout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:37"><expr pos:start="129:5" pos:end="129:36"><name pos:start="129:5" pos:end="129:19"><name pos:start="129:5" pos:end="129:9">avctx</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:19">channels</name></name> <operator pos:start="129:21" pos:end="129:21">=</operator> <name pos:start="129:23" pos:end="129:36"><name pos:start="129:23" pos:end="129:23">s</name><operator pos:start="129:24" pos:end="129:25">-&gt;</operator><name pos:start="129:26" pos:end="129:27">ti</name><operator pos:start="129:28" pos:end="129:28">.</operator><name pos:start="129:29" pos:end="129:36">channels</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="135:67"><expr pos:start="133:5" pos:end="135:66"><name pos:start="133:5" pos:end="133:17"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:17">nb_samples</name></name> <operator pos:start="133:19" pos:end="133:19">=</operator> <ternary pos:start="133:21" pos:end="135:66"><condition pos:start="133:21" pos:end="133:46"><expr pos:start="133:21" pos:end="133:44"><name pos:start="133:21" pos:end="133:44"><name pos:start="133:21" pos:end="133:21">s</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:25">ti</name><operator pos:start="133:26" pos:end="133:26">.</operator><name pos:start="133:27" pos:end="133:44">last_frame_samples</name></name></expr> ?</condition><then pos:start="133:48" pos:end="133:71"> <expr pos:start="133:48" pos:end="133:71"><name pos:start="133:48" pos:end="133:71"><name pos:start="133:48" pos:end="133:48">s</name><operator pos:start="133:49" pos:end="133:50">-&gt;</operator><name pos:start="133:51" pos:end="133:52">ti</name><operator pos:start="133:53" pos:end="133:53">.</operator><name pos:start="133:54" pos:end="133:71">last_frame_samples</name></name></expr>

                                             </then><else pos:start="135:46" pos:end="135:66">: <expr pos:start="135:48" pos:end="135:66"><name pos:start="135:48" pos:end="135:66"><name pos:start="135:48" pos:end="135:48">s</name><operator pos:start="135:49" pos:end="135:50">-&gt;</operator><name pos:start="135:51" pos:end="135:52">ti</name><operator pos:start="135:53" pos:end="135:53">.</operator><name pos:start="135:54" pos:end="135:66">frame_samples</name></name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:38"><expr pos:start="139:5" pos:end="139:37"><name pos:start="139:5" pos:end="139:21"><name pos:start="139:5" pos:end="139:9">frame</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:21">nb_samples</name></name> <operator pos:start="139:23" pos:end="139:23">=</operator> <name pos:start="139:25" pos:end="139:37"><name pos:start="139:25" pos:end="139:25">s</name><operator pos:start="139:26" pos:end="139:27">-&gt;</operator><name pos:start="139:28" pos:end="139:37">nb_samples</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="143:19"><if pos:start="141:5" pos:end="143:19">if <condition pos:start="141:8" pos:end="141:60">(<expr pos:start="141:9" pos:end="141:59"><operator pos:start="141:9" pos:end="141:9">(</operator><name pos:start="141:10" pos:end="141:12">ret</name> <operator pos:start="141:14" pos:end="141:14">=</operator> <call pos:start="141:16" pos:end="141:54"><name pos:start="141:16" pos:end="141:35">ff_thread_get_buffer</name><argument_list pos:start="141:36" pos:end="141:54">(<argument pos:start="141:37" pos:end="141:41"><expr pos:start="141:37" pos:end="141:41"><name pos:start="141:37" pos:end="141:41">avctx</name></expr></argument>, <argument pos:start="141:44" pos:end="141:50"><expr pos:start="141:44" pos:end="141:50"><operator pos:start="141:44" pos:end="141:44">&amp;</operator><name pos:start="141:45" pos:end="141:50">tframe</name></expr></argument>, <argument pos:start="141:53" pos:end="141:53"><expr pos:start="141:53" pos:end="141:53"><literal type="number" pos:start="141:53" pos:end="141:53">0</literal></expr></argument>)</argument_list></call><operator pos:start="141:55" pos:end="141:55">)</operator> <operator pos:start="141:57" pos:end="141:57">&lt;</operator> <literal type="number" pos:start="141:59" pos:end="141:59">0</literal></expr>)</condition><block type="pseudo" pos:start="143:9" pos:end="143:19"><block_content pos:start="143:9" pos:end="143:19">

        <return pos:start="143:9" pos:end="143:19">return <expr pos:start="143:16" pos:end="143:18"><name pos:start="143:16" pos:end="143:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:34"><expr pos:start="145:5" pos:end="145:33"><call pos:start="145:5" pos:end="145:33"><name pos:start="145:5" pos:end="145:26">ff_thread_finish_setup</name><argument_list pos:start="145:27" pos:end="145:33">(<argument pos:start="145:28" pos:end="145:32"><expr pos:start="145:28" pos:end="145:32"><name pos:start="145:28" pos:end="145:32">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="149:5" pos:end="179:5"><if pos:start="149:5" pos:end="173:5">if <condition pos:start="149:8" pos:end="149:41">(<expr pos:start="149:9" pos:end="149:40"><name pos:start="149:9" pos:end="149:34"><name pos:start="149:9" pos:end="149:13">avctx</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:34">bits_per_raw_sample</name></name> <operator pos:start="149:36" pos:end="149:37">&lt;=</operator> <literal type="number" pos:start="149:39" pos:end="149:40">16</literal></expr>)</condition> <block pos:start="149:43" pos:end="173:5">{<block_content pos:start="151:9" pos:end="171:23">

        <decl_stmt pos:start="151:9" pos:end="155:73"><decl pos:start="151:9" pos:end="155:72"><type pos:start="151:9" pos:end="151:11"><name pos:start="151:9" pos:end="151:11">int</name></type> <name pos:start="151:13" pos:end="151:20">buf_size</name> <init pos:start="151:22" pos:end="155:72">= <expr pos:start="151:24" pos:end="155:72"><call pos:start="151:24" pos:end="155:72"><name pos:start="151:24" pos:end="151:49">av_samples_get_buffer_size</name><argument_list pos:start="151:50" pos:end="155:72">(<argument pos:start="151:51" pos:end="151:54"><expr pos:start="151:51" pos:end="151:54"><name pos:start="151:51" pos:end="151:54">NULL</name></expr></argument>, <argument pos:start="151:57" pos:end="151:71"><expr pos:start="151:57" pos:end="151:71"><name pos:start="151:57" pos:end="151:71"><name pos:start="151:57" pos:end="151:61">avctx</name><operator pos:start="151:62" pos:end="151:63">-&gt;</operator><name pos:start="151:64" pos:end="151:71">channels</name></name></expr></argument>,

                                                  <argument pos:start="153:51" pos:end="153:63"><expr pos:start="153:51" pos:end="153:63"><name pos:start="153:51" pos:end="153:63"><name pos:start="153:51" pos:end="153:51">s</name><operator pos:start="153:52" pos:end="153:53">-&gt;</operator><name pos:start="153:54" pos:end="153:63">nb_samples</name></name></expr></argument>,

                                                  <argument pos:start="155:51" pos:end="155:68"><expr pos:start="155:51" pos:end="155:68"><name pos:start="155:51" pos:end="155:68">AV_SAMPLE_FMT_S32P</name></expr></argument>, <argument pos:start="155:71" pos:end="155:71"><expr pos:start="155:71" pos:end="155:71"><literal type="number" pos:start="155:71" pos:end="155:71">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:76"><expr pos:start="157:9" pos:end="157:75"><call pos:start="157:9" pos:end="157:75"><name pos:start="157:9" pos:end="157:22">av_fast_malloc</name><argument_list pos:start="157:23" pos:end="157:75">(<argument pos:start="157:24" pos:end="157:40"><expr pos:start="157:24" pos:end="157:40"><operator pos:start="157:24" pos:end="157:24">&amp;</operator><name pos:start="157:25" pos:end="157:40"><name pos:start="157:25" pos:end="157:25">s</name><operator pos:start="157:26" pos:end="157:27">-&gt;</operator><name pos:start="157:28" pos:end="157:40">decode_buffer</name></name></expr></argument>, <argument pos:start="157:43" pos:end="157:64"><expr pos:start="157:43" pos:end="157:64"><operator pos:start="157:43" pos:end="157:43">&amp;</operator><name pos:start="157:44" pos:end="157:64"><name pos:start="157:44" pos:end="157:44">s</name><operator pos:start="157:45" pos:end="157:46">-&gt;</operator><name pos:start="157:47" pos:end="157:64">decode_buffer_size</name></name></expr></argument>, <argument pos:start="157:67" pos:end="157:74"><expr pos:start="157:67" pos:end="157:74"><name pos:start="157:67" pos:end="157:74">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="161:35"><if pos:start="159:9" pos:end="161:35">if <condition pos:start="159:12" pos:end="159:30">(<expr pos:start="159:13" pos:end="159:29"><operator pos:start="159:13" pos:end="159:13">!</operator><name pos:start="159:14" pos:end="159:29"><name pos:start="159:14" pos:end="159:14">s</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:29">decode_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:35"><block_content pos:start="161:13" pos:end="161:35">

            <return pos:start="161:13" pos:end="161:35">return <expr pos:start="161:20" pos:end="161:34"><call pos:start="161:20" pos:end="161:34"><name pos:start="161:20" pos:end="161:26">AVERROR</name><argument_list pos:start="161:27" pos:end="161:34">(<argument pos:start="161:28" pos:end="161:33"><expr pos:start="161:28" pos:end="161:33"><name pos:start="161:28" pos:end="161:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="167:75"><expr pos:start="163:9" pos:end="167:74"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="167:74"><name pos:start="163:15" pos:end="163:36">av_samples_fill_arrays</name><argument_list pos:start="163:37" pos:end="167:74">(<argument pos:start="163:38" pos:end="163:59"><expr pos:start="163:38" pos:end="163:59"><operator pos:start="163:38" pos:end="163:38">(</operator><name pos:start="163:39" pos:end="163:45">uint8_t</name> <operator pos:start="163:47" pos:end="163:47">*</operator><operator pos:start="163:48" pos:end="163:48">*</operator><operator pos:start="163:49" pos:end="163:49">)</operator><name pos:start="163:50" pos:end="163:59"><name pos:start="163:50" pos:end="163:50">s</name><operator pos:start="163:51" pos:end="163:52">-&gt;</operator><name pos:start="163:53" pos:end="163:59">decoded</name></name></expr></argument>, <argument pos:start="163:62" pos:end="163:65"><expr pos:start="163:62" pos:end="163:65"><name pos:start="163:62" pos:end="163:65">NULL</name></expr></argument>,

                                     <argument pos:start="165:38" pos:end="165:53"><expr pos:start="165:38" pos:end="165:53"><name pos:start="165:38" pos:end="165:53"><name pos:start="165:38" pos:end="165:38">s</name><operator pos:start="165:39" pos:end="165:40">-&gt;</operator><name pos:start="165:41" pos:end="165:53">decode_buffer</name></name></expr></argument>, <argument pos:start="165:56" pos:end="165:70"><expr pos:start="165:56" pos:end="165:70"><name pos:start="165:56" pos:end="165:70"><name pos:start="165:56" pos:end="165:60">avctx</name><operator pos:start="165:61" pos:end="165:62">-&gt;</operator><name pos:start="165:63" pos:end="165:70">channels</name></name></expr></argument>,

                                     <argument pos:start="167:38" pos:end="167:50"><expr pos:start="167:38" pos:end="167:50"><name pos:start="167:38" pos:end="167:50"><name pos:start="167:38" pos:end="167:38">s</name><operator pos:start="167:39" pos:end="167:40">-&gt;</operator><name pos:start="167:41" pos:end="167:50">nb_samples</name></name></expr></argument>, <argument pos:start="167:53" pos:end="167:70"><expr pos:start="167:53" pos:end="167:70"><name pos:start="167:53" pos:end="167:70">AV_SAMPLE_FMT_S32P</name></expr></argument>, <argument pos:start="167:73" pos:end="167:73"><expr pos:start="167:73" pos:end="167:73"><literal type="number" pos:start="167:73" pos:end="167:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="171:23"><if pos:start="169:9" pos:end="171:23">if <condition pos:start="169:12" pos:end="169:20">(<expr pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">&lt;</operator> <literal type="number" pos:start="169:19" pos:end="169:19">0</literal></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:23"><block_content pos:start="171:13" pos:end="171:23">

            <return pos:start="171:13" pos:end="171:23">return <expr pos:start="171:20" pos:end="171:22"><name pos:start="171:20" pos:end="171:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="173:7" pos:end="179:5">else <block pos:start="173:12" pos:end="179:5">{<block_content pos:start="175:9" pos:end="177:69">

        <for pos:start="175:9" pos:end="177:69">for <control pos:start="175:13" pos:end="175:54">(<init pos:start="175:14" pos:end="175:22"><expr pos:start="175:14" pos:end="175:21"><name pos:start="175:14" pos:end="175:17">chan</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <literal type="number" pos:start="175:21" pos:end="175:21">0</literal></expr>;</init> <condition pos:start="175:24" pos:end="175:46"><expr pos:start="175:24" pos:end="175:45"><name pos:start="175:24" pos:end="175:27">chan</name> <operator pos:start="175:29" pos:end="175:29">&lt;</operator> <name pos:start="175:31" pos:end="175:45"><name pos:start="175:31" pos:end="175:35">avctx</name><operator pos:start="175:36" pos:end="175:37">-&gt;</operator><name pos:start="175:38" pos:end="175:45">channels</name></name></expr>;</condition> <incr pos:start="175:48" pos:end="175:53"><expr pos:start="175:48" pos:end="175:53"><name pos:start="175:48" pos:end="175:51">chan</name><operator pos:start="175:52" pos:end="175:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="177:13" pos:end="177:69"><block_content pos:start="177:13" pos:end="177:69">

            <expr_stmt pos:start="177:13" pos:end="177:69"><expr pos:start="177:13" pos:end="177:68"><name pos:start="177:13" pos:end="177:28"><name pos:start="177:13" pos:end="177:13">s</name><operator pos:start="177:14" pos:end="177:15">-&gt;</operator><name pos:start="177:16" pos:end="177:22">decoded</name><index pos:start="177:23" pos:end="177:28">[<expr pos:start="177:24" pos:end="177:27"><name pos:start="177:24" pos:end="177:27">chan</name></expr>]</index></name> <operator pos:start="177:30" pos:end="177:30">=</operator> <operator pos:start="177:32" pos:end="177:32">(</operator><name pos:start="177:33" pos:end="177:39">int32_t</name> <operator pos:start="177:41" pos:end="177:41">*</operator><operator pos:start="177:42" pos:end="177:42">)</operator><name pos:start="177:43" pos:end="177:68"><name pos:start="177:43" pos:end="177:47">frame</name><operator pos:start="177:48" pos:end="177:49">-&gt;</operator><name pos:start="177:50" pos:end="177:62">extended_data</name><index pos:start="177:63" pos:end="177:68">[<expr pos:start="177:64" pos:end="177:67"><name pos:start="177:64" pos:end="177:67">chan</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="183:5" pos:end="371:5"><if pos:start="183:5" pos:end="195:5">if <condition pos:start="183:8" pos:end="183:27">(<expr pos:start="183:9" pos:end="183:26"><name pos:start="183:9" pos:end="183:21"><name pos:start="183:9" pos:end="183:9">s</name><operator pos:start="183:10" pos:end="183:11">-&gt;</operator><name pos:start="183:12" pos:end="183:21">nb_samples</name></name> <operator pos:start="183:23" pos:end="183:23">&lt;</operator> <literal type="number" pos:start="183:25" pos:end="183:26">16</literal></expr>)</condition> <block pos:start="183:29" pos:end="195:5">{<block_content pos:start="185:9" pos:end="193:9">

        <for pos:start="185:9" pos:end="193:9">for <control pos:start="185:13" pos:end="185:54">(<init pos:start="185:14" pos:end="185:22"><expr pos:start="185:14" pos:end="185:21"><name pos:start="185:14" pos:end="185:17">chan</name> <operator pos:start="185:19" pos:end="185:19">=</operator> <literal type="number" pos:start="185:21" pos:end="185:21">0</literal></expr>;</init> <condition pos:start="185:24" pos:end="185:46"><expr pos:start="185:24" pos:end="185:45"><name pos:start="185:24" pos:end="185:27">chan</name> <operator pos:start="185:29" pos:end="185:29">&lt;</operator> <name pos:start="185:31" pos:end="185:45"><name pos:start="185:31" pos:end="185:35">avctx</name><operator pos:start="185:36" pos:end="185:37">-&gt;</operator><name pos:start="185:38" pos:end="185:45">channels</name></name></expr>;</condition> <incr pos:start="185:48" pos:end="185:53"><expr pos:start="185:48" pos:end="185:53"><name pos:start="185:48" pos:end="185:51">chan</name><operator pos:start="185:52" pos:end="185:53">++</operator></expr></incr>)</control> <block pos:start="185:56" pos:end="193:9">{<block_content pos:start="187:13" pos:end="191:71">

            <decl_stmt pos:start="187:13" pos:end="187:48"><decl pos:start="187:13" pos:end="187:47"><type pos:start="187:13" pos:end="187:21"><name pos:start="187:13" pos:end="187:19">int32_t</name> <modifier pos:start="187:21" pos:end="187:21">*</modifier></type><name pos:start="187:22" pos:end="187:28">decoded</name> <init pos:start="187:30" pos:end="187:47">= <expr pos:start="187:32" pos:end="187:47"><name pos:start="187:32" pos:end="187:47"><name pos:start="187:32" pos:end="187:32">s</name><operator pos:start="187:33" pos:end="187:34">-&gt;</operator><name pos:start="187:35" pos:end="187:41">decoded</name><index pos:start="187:42" pos:end="187:47">[<expr pos:start="187:43" pos:end="187:46"><name pos:start="187:43" pos:end="187:46">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="189:13" pos:end="191:71">for <control pos:start="189:17" pos:end="189:47">(<init pos:start="189:18" pos:end="189:23"><expr pos:start="189:18" pos:end="189:22"><name pos:start="189:18" pos:end="189:18">i</name> <operator pos:start="189:20" pos:end="189:20">=</operator> <literal type="number" pos:start="189:22" pos:end="189:22">0</literal></expr>;</init> <condition pos:start="189:25" pos:end="189:42"><expr pos:start="189:25" pos:end="189:41"><name pos:start="189:25" pos:end="189:25">i</name> <operator pos:start="189:27" pos:end="189:27">&lt;</operator> <name pos:start="189:29" pos:end="189:41"><name pos:start="189:29" pos:end="189:29">s</name><operator pos:start="189:30" pos:end="189:31">-&gt;</operator><name pos:start="189:32" pos:end="189:41">nb_samples</name></name></expr>;</condition> <incr pos:start="189:44" pos:end="189:46"><expr pos:start="189:44" pos:end="189:46"><name pos:start="189:44" pos:end="189:44">i</name><operator pos:start="189:45" pos:end="189:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="191:17" pos:end="191:71"><block_content pos:start="191:17" pos:end="191:71">

                <expr_stmt pos:start="191:17" pos:end="191:71"><expr pos:start="191:17" pos:end="191:70"><name pos:start="191:17" pos:end="191:26"><name pos:start="191:17" pos:end="191:23">decoded</name><index pos:start="191:24" pos:end="191:26">[<expr pos:start="191:25" pos:end="191:25"><name pos:start="191:25" pos:end="191:25">i</name></expr>]</index></name> <operator pos:start="191:28" pos:end="191:28">=</operator> <call pos:start="191:30" pos:end="191:70"><name pos:start="191:30" pos:end="191:38">get_sbits</name><argument_list pos:start="191:39" pos:end="191:70">(<argument pos:start="191:40" pos:end="191:41"><expr pos:start="191:40" pos:end="191:41"><name pos:start="191:40" pos:end="191:41">gb</name></expr></argument>, <argument pos:start="191:44" pos:end="191:69"><expr pos:start="191:44" pos:end="191:69"><name pos:start="191:44" pos:end="191:69"><name pos:start="191:44" pos:end="191:48">avctx</name><operator pos:start="191:49" pos:end="191:50">-&gt;</operator><name pos:start="191:51" pos:end="191:69">bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="195:7" pos:end="371:5">else <block pos:start="195:12" pos:end="371:5">{<block_content pos:start="197:9" pos:end="369:9">

        <if_stmt pos:start="197:9" pos:end="347:9"><if pos:start="197:9" pos:end="227:9">if <condition pos:start="197:12" pos:end="197:49">(<expr pos:start="197:13" pos:end="197:48"><name pos:start="197:13" pos:end="197:23"><name pos:start="197:13" pos:end="197:13">s</name><operator pos:start="197:14" pos:end="197:15">-&gt;</operator><name pos:start="197:16" pos:end="197:17">ti</name><operator pos:start="197:18" pos:end="197:18">.</operator><name pos:start="197:19" pos:end="197:23">codec</name></name> <operator pos:start="197:25" pos:end="197:26">==</operator> <name pos:start="197:28" pos:end="197:48">TAK_CODEC_MONO_STEREO</name></expr>)</condition> <block pos:start="197:51" pos:end="227:9">{<block_content pos:start="199:13" pos:end="225:13">

            <for pos:start="199:13" pos:end="203:31">for <control pos:start="199:17" pos:end="199:58">(<init pos:start="199:18" pos:end="199:26"><expr pos:start="199:18" pos:end="199:25"><name pos:start="199:18" pos:end="199:21">chan</name> <operator pos:start="199:23" pos:end="199:23">=</operator> <literal type="number" pos:start="199:25" pos:end="199:25">0</literal></expr>;</init> <condition pos:start="199:28" pos:end="199:50"><expr pos:start="199:28" pos:end="199:49"><name pos:start="199:28" pos:end="199:31">chan</name> <operator pos:start="199:33" pos:end="199:33">&lt;</operator> <name pos:start="199:35" pos:end="199:49"><name pos:start="199:35" pos:end="199:39">avctx</name><operator pos:start="199:40" pos:end="199:41">-&gt;</operator><name pos:start="199:42" pos:end="199:49">channels</name></name></expr>;</condition> <incr pos:start="199:52" pos:end="199:57"><expr pos:start="199:52" pos:end="199:57"><name pos:start="199:52" pos:end="199:55">chan</name><operator pos:start="199:56" pos:end="199:57">++</operator></expr></incr>)</control><block type="pseudo" pos:start="201:17" pos:end="203:31"><block_content pos:start="201:17" pos:end="203:31">

                <if_stmt pos:start="201:17" pos:end="203:31"><if pos:start="201:17" pos:end="203:31">if <condition pos:start="201:20" pos:end="201:50">(<expr pos:start="201:21" pos:end="201:49"><name pos:start="201:21" pos:end="201:23">ret</name> <operator pos:start="201:25" pos:end="201:25">=</operator> <call pos:start="201:27" pos:end="201:49"><name pos:start="201:27" pos:end="201:40">decode_channel</name><argument_list pos:start="201:41" pos:end="201:49">(<argument pos:start="201:42" pos:end="201:42"><expr pos:start="201:42" pos:end="201:42"><name pos:start="201:42" pos:end="201:42">s</name></expr></argument>, <argument pos:start="201:45" pos:end="201:48"><expr pos:start="201:45" pos:end="201:48"><name pos:start="201:45" pos:end="201:48">chan</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="203:21" pos:end="203:31"><block_content pos:start="203:21" pos:end="203:31">

                    <return pos:start="203:21" pos:end="203:31">return <expr pos:start="203:28" pos:end="203:30"><name pos:start="203:28" pos:end="203:30">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>



            <if_stmt pos:start="207:13" pos:end="225:13"><if pos:start="207:13" pos:end="225:13">if <condition pos:start="207:16" pos:end="207:37">(<expr pos:start="207:17" pos:end="207:36"><name pos:start="207:17" pos:end="207:31"><name pos:start="207:17" pos:end="207:21">avctx</name><operator pos:start="207:22" pos:end="207:23">-&gt;</operator><name pos:start="207:24" pos:end="207:31">channels</name></name> <operator pos:start="207:33" pos:end="207:34">==</operator> <literal type="number" pos:start="207:36" pos:end="207:36">2</literal></expr>)</condition> <block pos:start="207:39" pos:end="225:13">{<block_content pos:start="209:17" pos:end="223:31">

                <expr_stmt pos:start="209:17" pos:end="209:54"><expr pos:start="209:17" pos:end="209:53"><name pos:start="209:17" pos:end="209:31"><name pos:start="209:17" pos:end="209:17">s</name><operator pos:start="209:18" pos:end="209:19">-&gt;</operator><name pos:start="209:20" pos:end="209:31">nb_subframes</name></name> <operator pos:start="209:33" pos:end="209:33">=</operator> <call pos:start="209:35" pos:end="209:49"><name pos:start="209:35" pos:end="209:42">get_bits</name><argument_list pos:start="209:43" pos:end="209:49">(<argument pos:start="209:44" pos:end="209:45"><expr pos:start="209:44" pos:end="209:45"><name pos:start="209:44" pos:end="209:45">gb</name></expr></argument>, <argument pos:start="209:48" pos:end="209:48"><expr pos:start="209:48" pos:end="209:48"><literal type="number" pos:start="209:48" pos:end="209:48">1</literal></expr></argument>)</argument_list></call> <operator pos:start="209:51" pos:end="209:51">+</operator> <literal type="number" pos:start="209:53" pos:end="209:53">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="211:17" pos:end="215:17"><if pos:start="211:17" pos:end="215:17">if <condition pos:start="211:20" pos:end="211:40">(<expr pos:start="211:21" pos:end="211:39"><name pos:start="211:21" pos:end="211:35"><name pos:start="211:21" pos:end="211:21">s</name><operator pos:start="211:22" pos:end="211:23">-&gt;</operator><name pos:start="211:24" pos:end="211:35">nb_subframes</name></name> <operator pos:start="211:37" pos:end="211:37">&gt;</operator> <literal type="number" pos:start="211:39" pos:end="211:39">1</literal></expr>)</condition> <block pos:start="211:42" pos:end="215:17">{<block_content pos:start="213:21" pos:end="213:57">

                    <expr_stmt pos:start="213:21" pos:end="213:57"><expr pos:start="213:21" pos:end="213:56"><name pos:start="213:21" pos:end="213:38"><name pos:start="213:21" pos:end="213:21">s</name><operator pos:start="213:22" pos:end="213:23">-&gt;</operator><name pos:start="213:24" pos:end="213:35">subframe_len</name><index pos:start="213:36" pos:end="213:38">[<expr pos:start="213:37" pos:end="213:37"><literal type="number" pos:start="213:37" pos:end="213:37">1</literal></expr>]</index></name> <operator pos:start="213:40" pos:end="213:40">=</operator> <call pos:start="213:42" pos:end="213:56"><name pos:start="213:42" pos:end="213:49">get_bits</name><argument_list pos:start="213:50" pos:end="213:56">(<argument pos:start="213:51" pos:end="213:52"><expr pos:start="213:51" pos:end="213:52"><name pos:start="213:51" pos:end="213:52">gb</name></expr></argument>, <argument pos:start="213:55" pos:end="213:55"><expr pos:start="213:55" pos:end="213:55"><literal type="number" pos:start="213:55" pos:end="213:55">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="219:17" pos:end="219:43"><expr pos:start="219:17" pos:end="219:42"><name pos:start="219:17" pos:end="219:24"><name pos:start="219:17" pos:end="219:17">s</name><operator pos:start="219:18" pos:end="219:19">-&gt;</operator><name pos:start="219:20" pos:end="219:24">dmode</name></name> <operator pos:start="219:26" pos:end="219:26">=</operator> <call pos:start="219:28" pos:end="219:42"><name pos:start="219:28" pos:end="219:35">get_bits</name><argument_list pos:start="219:36" pos:end="219:42">(<argument pos:start="219:37" pos:end="219:38"><expr pos:start="219:37" pos:end="219:38"><name pos:start="219:37" pos:end="219:38">gb</name></expr></argument>, <argument pos:start="219:41" pos:end="219:41"><expr pos:start="219:41" pos:end="219:41"><literal type="number" pos:start="219:41" pos:end="219:41">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="221:17" pos:end="223:31"><if pos:start="221:17" pos:end="223:31">if <condition pos:start="221:20" pos:end="221:66">(<expr pos:start="221:21" pos:end="221:65"><name pos:start="221:21" pos:end="221:23">ret</name> <operator pos:start="221:25" pos:end="221:25">=</operator> <call pos:start="221:27" pos:end="221:65"><name pos:start="221:27" pos:end="221:37">decorrelate</name><argument_list pos:start="221:38" pos:end="221:65">(<argument pos:start="221:39" pos:end="221:39"><expr pos:start="221:39" pos:end="221:39"><name pos:start="221:39" pos:end="221:39">s</name></expr></argument>, <argument pos:start="221:42" pos:end="221:42"><expr pos:start="221:42" pos:end="221:42"><literal type="number" pos:start="221:42" pos:end="221:42">0</literal></expr></argument>, <argument pos:start="221:45" pos:end="221:45"><expr pos:start="221:45" pos:end="221:45"><literal type="number" pos:start="221:45" pos:end="221:45">1</literal></expr></argument>, <argument pos:start="221:48" pos:end="221:64"><expr pos:start="221:48" pos:end="221:64"><name pos:start="221:48" pos:end="221:60"><name pos:start="221:48" pos:end="221:48">s</name><operator pos:start="221:49" pos:end="221:50">-&gt;</operator><name pos:start="221:51" pos:end="221:60">nb_samples</name></name> <operator pos:start="221:62" pos:end="221:62">-</operator> <literal type="number" pos:start="221:64" pos:end="221:64">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="223:21" pos:end="223:31"><block_content pos:start="223:21" pos:end="223:31">

                    <return pos:start="223:21" pos:end="223:31">return <expr pos:start="223:28" pos:end="223:30"><name pos:start="223:28" pos:end="223:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="227:11" pos:end="347:9">else if <condition pos:start="227:19" pos:end="227:57">(<expr pos:start="227:20" pos:end="227:56"><name pos:start="227:20" pos:end="227:30"><name pos:start="227:20" pos:end="227:20">s</name><operator pos:start="227:21" pos:end="227:22">-&gt;</operator><name pos:start="227:23" pos:end="227:24">ti</name><operator pos:start="227:25" pos:end="227:25">.</operator><name pos:start="227:26" pos:end="227:30">codec</name></name> <operator pos:start="227:32" pos:end="227:33">==</operator> <name pos:start="227:35" pos:end="227:56">TAK_CODEC_MULTICHANNEL</name></expr>)</condition> <block pos:start="227:59" pos:end="347:9">{<block_content pos:start="229:13" pos:end="345:13">

            <if_stmt pos:start="229:13" pos:end="309:13"><if pos:start="229:13" pos:end="297:13">if <condition pos:start="229:16" pos:end="229:30">(<expr pos:start="229:17" pos:end="229:29"><call pos:start="229:17" pos:end="229:29"><name pos:start="229:17" pos:end="229:25">get_bits1</name><argument_list pos:start="229:26" pos:end="229:29">(<argument pos:start="229:27" pos:end="229:28"><expr pos:start="229:27" pos:end="229:28"><name pos:start="229:27" pos:end="229:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:32" pos:end="297:13">{<block_content pos:start="231:17" pos:end="295:17">

                <decl_stmt pos:start="231:17" pos:end="231:32"><decl pos:start="231:17" pos:end="231:31"><type pos:start="231:17" pos:end="231:19"><name pos:start="231:17" pos:end="231:19">int</name></type> <name pos:start="231:21" pos:end="231:27">ch_mask</name> <init pos:start="231:29" pos:end="231:31">= <expr pos:start="231:31" pos:end="231:31"><literal type="number" pos:start="231:31" pos:end="231:31">0</literal></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="235:17" pos:end="235:43"><expr pos:start="235:17" pos:end="235:42"><name pos:start="235:17" pos:end="235:20">chan</name> <operator pos:start="235:22" pos:end="235:22">=</operator> <call pos:start="235:24" pos:end="235:38"><name pos:start="235:24" pos:end="235:31">get_bits</name><argument_list pos:start="235:32" pos:end="235:38">(<argument pos:start="235:33" pos:end="235:34"><expr pos:start="235:33" pos:end="235:34"><name pos:start="235:33" pos:end="235:34">gb</name></expr></argument>, <argument pos:start="235:37" pos:end="235:37"><expr pos:start="235:37" pos:end="235:37"><literal type="number" pos:start="235:37" pos:end="235:37">4</literal></expr></argument>)</argument_list></call> <operator pos:start="235:40" pos:end="235:40">+</operator> <literal type="number" pos:start="235:42" pos:end="235:42">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="237:17" pos:end="239:47"><if pos:start="237:17" pos:end="239:47">if <condition pos:start="237:20" pos:end="237:43">(<expr pos:start="237:21" pos:end="237:42"><name pos:start="237:21" pos:end="237:24">chan</name> <operator pos:start="237:26" pos:end="237:26">&gt;</operator> <name pos:start="237:28" pos:end="237:42"><name pos:start="237:28" pos:end="237:32">avctx</name><operator pos:start="237:33" pos:end="237:34">-&gt;</operator><name pos:start="237:35" pos:end="237:42">channels</name></name></expr>)</condition><block type="pseudo" pos:start="239:21" pos:end="239:47"><block_content pos:start="239:21" pos:end="239:47">

                    <return pos:start="239:21" pos:end="239:47">return <expr pos:start="239:28" pos:end="239:46"><name pos:start="239:28" pos:end="239:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



                <for pos:start="243:17" pos:end="295:17">for <control pos:start="243:21" pos:end="243:42">(<init pos:start="243:22" pos:end="243:27"><expr pos:start="243:22" pos:end="243:26"><name pos:start="243:22" pos:end="243:22">i</name> <operator pos:start="243:24" pos:end="243:24">=</operator> <literal type="number" pos:start="243:26" pos:end="243:26">0</literal></expr>;</init> <condition pos:start="243:29" pos:end="243:37"><expr pos:start="243:29" pos:end="243:36"><name pos:start="243:29" pos:end="243:29">i</name> <operator pos:start="243:31" pos:end="243:31">&lt;</operator> <name pos:start="243:33" pos:end="243:36">chan</name></expr>;</condition> <incr pos:start="243:39" pos:end="243:41"><expr pos:start="243:39" pos:end="243:41"><name pos:start="243:39" pos:end="243:39">i</name><operator pos:start="243:40" pos:end="243:41">++</operator></expr></incr>)</control> <block pos:start="243:44" pos:end="295:17">{<block_content pos:start="245:21" pos:end="293:41">

                    <decl_stmt pos:start="245:21" pos:end="245:47"><decl pos:start="245:21" pos:end="245:46"><type pos:start="245:21" pos:end="245:23"><name pos:start="245:21" pos:end="245:23">int</name></type> <name pos:start="245:25" pos:end="245:28">nbit</name> <init pos:start="245:30" pos:end="245:46">= <expr pos:start="245:32" pos:end="245:46"><call pos:start="245:32" pos:end="245:46"><name pos:start="245:32" pos:end="245:39">get_bits</name><argument_list pos:start="245:40" pos:end="245:46">(<argument pos:start="245:41" pos:end="245:42"><expr pos:start="245:41" pos:end="245:42"><name pos:start="245:41" pos:end="245:42">gb</name></expr></argument>, <argument pos:start="245:45" pos:end="245:45"><expr pos:start="245:45" pos:end="245:45"><literal type="number" pos:start="245:45" pos:end="245:45">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="249:21" pos:end="251:51"><if pos:start="249:21" pos:end="251:51">if <condition pos:start="249:24" pos:end="249:48">(<expr pos:start="249:25" pos:end="249:47"><name pos:start="249:25" pos:end="249:28">nbit</name> <operator pos:start="249:30" pos:end="249:31">&gt;=</operator> <name pos:start="249:33" pos:end="249:47"><name pos:start="249:33" pos:end="249:37">avctx</name><operator pos:start="249:38" pos:end="249:39">-&gt;</operator><name pos:start="249:40" pos:end="249:47">channels</name></name></expr>)</condition><block type="pseudo" pos:start="251:25" pos:end="251:51"><block_content pos:start="251:25" pos:end="251:51">

                        <return pos:start="251:25" pos:end="251:51">return <expr pos:start="251:32" pos:end="251:50"><name pos:start="251:32" pos:end="251:50">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



                    <if_stmt pos:start="255:21" pos:end="257:51"><if pos:start="255:21" pos:end="257:51">if <condition pos:start="255:24" pos:end="255:44">(<expr pos:start="255:25" pos:end="255:43"><name pos:start="255:25" pos:end="255:31">ch_mask</name> <operator pos:start="255:33" pos:end="255:33">&amp;</operator> <literal type="number" pos:start="255:35" pos:end="255:35">1</literal> <operator pos:start="255:37" pos:end="255:38">&lt;&lt;</operator> <name pos:start="255:40" pos:end="255:43">nbit</name></expr>)</condition><block type="pseudo" pos:start="257:25" pos:end="257:51"><block_content pos:start="257:25" pos:end="257:51">

                        <return pos:start="257:25" pos:end="257:51">return <expr pos:start="257:32" pos:end="257:50"><name pos:start="257:32" pos:end="257:50">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="261:21" pos:end="261:60"><expr pos:start="261:21" pos:end="261:59"><name pos:start="261:21" pos:end="261:35"><name pos:start="261:21" pos:end="261:21">s</name><operator pos:start="261:22" pos:end="261:23">-&gt;</operator><name pos:start="261:24" pos:end="261:32">mcdparams</name><index pos:start="261:33" pos:end="261:35">[<expr pos:start="261:34" pos:end="261:34"><name pos:start="261:34" pos:end="261:34">i</name></expr>]</index></name><operator pos:start="261:36" pos:end="261:36">.</operator><name pos:start="261:37" pos:end="261:43">present</name> <operator pos:start="261:45" pos:end="261:45">=</operator> <call pos:start="261:47" pos:end="261:59"><name pos:start="261:47" pos:end="261:55">get_bits1</name><argument_list pos:start="261:56" pos:end="261:59">(<argument pos:start="261:57" pos:end="261:58"><expr pos:start="261:57" pos:end="261:58"><name pos:start="261:57" pos:end="261:58">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="263:21" pos:end="287:21"><if pos:start="263:21" pos:end="287:21">if <condition pos:start="263:24" pos:end="263:48">(<expr pos:start="263:25" pos:end="263:47"><name pos:start="263:25" pos:end="263:39"><name pos:start="263:25" pos:end="263:25">s</name><operator pos:start="263:26" pos:end="263:27">-&gt;</operator><name pos:start="263:28" pos:end="263:36">mcdparams</name><index pos:start="263:37" pos:end="263:39">[<expr pos:start="263:38" pos:end="263:38"><name pos:start="263:38" pos:end="263:38">i</name></expr>]</index></name><operator pos:start="263:40" pos:end="263:40">.</operator><name pos:start="263:41" pos:end="263:47">present</name></expr>)</condition> <block pos:start="263:50" pos:end="287:21">{<block_content pos:start="265:25" pos:end="285:25">

                        <expr_stmt pos:start="265:25" pos:end="265:64"><expr pos:start="265:25" pos:end="265:63"><name pos:start="265:25" pos:end="265:39"><name pos:start="265:25" pos:end="265:25">s</name><operator pos:start="265:26" pos:end="265:27">-&gt;</operator><name pos:start="265:28" pos:end="265:36">mcdparams</name><index pos:start="265:37" pos:end="265:39">[<expr pos:start="265:38" pos:end="265:38"><name pos:start="265:38" pos:end="265:38">i</name></expr>]</index></name><operator pos:start="265:40" pos:end="265:40">.</operator><name pos:start="265:41" pos:end="265:45">index</name> <operator pos:start="265:47" pos:end="265:47">=</operator> <call pos:start="265:49" pos:end="265:63"><name pos:start="265:49" pos:end="265:56">get_bits</name><argument_list pos:start="265:57" pos:end="265:63">(<argument pos:start="265:58" pos:end="265:59"><expr pos:start="265:58" pos:end="265:59"><name pos:start="265:58" pos:end="265:59">gb</name></expr></argument>, <argument pos:start="265:62" pos:end="265:62"><expr pos:start="265:62" pos:end="265:62"><literal type="number" pos:start="265:62" pos:end="265:62">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="267:25" pos:end="267:64"><expr pos:start="267:25" pos:end="267:63"><name pos:start="267:25" pos:end="267:39"><name pos:start="267:25" pos:end="267:25">s</name><operator pos:start="267:26" pos:end="267:27">-&gt;</operator><name pos:start="267:28" pos:end="267:36">mcdparams</name><index pos:start="267:37" pos:end="267:39">[<expr pos:start="267:38" pos:end="267:38"><name pos:start="267:38" pos:end="267:38">i</name></expr>]</index></name><operator pos:start="267:40" pos:end="267:40">.</operator><name pos:start="267:41" pos:end="267:45">chan2</name> <operator pos:start="267:47" pos:end="267:47">=</operator> <call pos:start="267:49" pos:end="267:63"><name pos:start="267:49" pos:end="267:56">get_bits</name><argument_list pos:start="267:57" pos:end="267:63">(<argument pos:start="267:58" pos:end="267:59"><expr pos:start="267:58" pos:end="267:59"><name pos:start="267:58" pos:end="267:59">gb</name></expr></argument>, <argument pos:start="267:62" pos:end="267:62"><expr pos:start="267:62" pos:end="267:62"><literal type="number" pos:start="267:62" pos:end="267:62">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="269:25" pos:end="285:25"><if pos:start="269:25" pos:end="281:25">if <condition pos:start="269:28" pos:end="269:55">(<expr pos:start="269:29" pos:end="269:54"><name pos:start="269:29" pos:end="269:43"><name pos:start="269:29" pos:end="269:29">s</name><operator pos:start="269:30" pos:end="269:31">-&gt;</operator><name pos:start="269:32" pos:end="269:40">mcdparams</name><index pos:start="269:41" pos:end="269:43">[<expr pos:start="269:42" pos:end="269:42"><name pos:start="269:42" pos:end="269:42">i</name></expr>]</index></name><operator pos:start="269:44" pos:end="269:44">.</operator><name pos:start="269:45" pos:end="269:49">index</name> <operator pos:start="269:51" pos:end="269:52">==</operator> <literal type="number" pos:start="269:54" pos:end="269:54">1</literal></expr>)</condition> <block pos:start="269:57" pos:end="281:25">{<block_content pos:start="271:29" pos:end="279:66">

                            <if_stmt pos:start="271:29" pos:end="275:59"><if pos:start="271:29" pos:end="275:59">if <condition pos:start="271:32" pos:end="273:71">(<expr pos:start="271:33" pos:end="273:70"><operator pos:start="271:33" pos:end="271:33">(</operator><name pos:start="271:34" pos:end="271:37">nbit</name> <operator pos:start="271:39" pos:end="271:40">==</operator> <name pos:start="271:42" pos:end="271:56"><name pos:start="271:42" pos:end="271:42">s</name><operator pos:start="271:43" pos:end="271:44">-&gt;</operator><name pos:start="271:45" pos:end="271:53">mcdparams</name><index pos:start="271:54" pos:end="271:56">[<expr pos:start="271:55" pos:end="271:55"><name pos:start="271:55" pos:end="271:55">i</name></expr>]</index></name><operator pos:start="271:57" pos:end="271:57">.</operator><name pos:start="271:58" pos:end="271:62">chan2</name><operator pos:start="271:63" pos:end="271:63">)</operator> <operator pos:start="271:65" pos:end="271:66">||</operator>

                                <operator pos:start="273:33" pos:end="273:33">(</operator><name pos:start="273:34" pos:end="273:40">ch_mask</name> <operator pos:start="273:42" pos:end="273:42">&amp;</operator> <literal type="number" pos:start="273:44" pos:end="273:44">1</literal> <operator pos:start="273:46" pos:end="273:47">&lt;&lt;</operator> <name pos:start="273:49" pos:end="273:63"><name pos:start="273:49" pos:end="273:49">s</name><operator pos:start="273:50" pos:end="273:51">-&gt;</operator><name pos:start="273:52" pos:end="273:60">mcdparams</name><index pos:start="273:61" pos:end="273:63">[<expr pos:start="273:62" pos:end="273:62"><name pos:start="273:62" pos:end="273:62">i</name></expr>]</index></name><operator pos:start="273:64" pos:end="273:64">.</operator><name pos:start="273:65" pos:end="273:69">chan2</name><operator pos:start="273:70" pos:end="273:70">)</operator></expr>)</condition><block type="pseudo" pos:start="275:33" pos:end="275:59"><block_content pos:start="275:33" pos:end="275:59">

                                <return pos:start="275:33" pos:end="275:59">return <expr pos:start="275:40" pos:end="275:58"><name pos:start="275:40" pos:end="275:58">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



                            <expr_stmt pos:start="279:29" pos:end="279:66"><expr pos:start="279:29" pos:end="279:65"><name pos:start="279:29" pos:end="279:35">ch_mask</name> <operator pos:start="279:37" pos:end="279:38">|=</operator> <literal type="number" pos:start="279:40" pos:end="279:40">1</literal> <operator pos:start="279:42" pos:end="279:43">&lt;&lt;</operator> <name pos:start="279:45" pos:end="279:59"><name pos:start="279:45" pos:end="279:45">s</name><operator pos:start="279:46" pos:end="279:47">-&gt;</operator><name pos:start="279:48" pos:end="279:56">mcdparams</name><index pos:start="279:57" pos:end="279:59">[<expr pos:start="279:58" pos:end="279:58"><name pos:start="279:58" pos:end="279:58">i</name></expr>]</index></name><operator pos:start="279:60" pos:end="279:60">.</operator><name pos:start="279:61" pos:end="279:65">chan2</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="281:27" pos:end="285:25">else if <condition pos:start="281:35" pos:end="281:75">(<expr pos:start="281:36" pos:end="281:74"><operator pos:start="281:36" pos:end="281:36">!</operator><operator pos:start="281:37" pos:end="281:37">(</operator><name pos:start="281:38" pos:end="281:44">ch_mask</name> <operator pos:start="281:46" pos:end="281:46">&amp;</operator> <literal type="number" pos:start="281:48" pos:end="281:48">1</literal> <operator pos:start="281:50" pos:end="281:51">&lt;&lt;</operator> <name pos:start="281:53" pos:end="281:67"><name pos:start="281:53" pos:end="281:53">s</name><operator pos:start="281:54" pos:end="281:55">-&gt;</operator><name pos:start="281:56" pos:end="281:64">mcdparams</name><index pos:start="281:65" pos:end="281:67">[<expr pos:start="281:66" pos:end="281:66"><name pos:start="281:66" pos:end="281:66">i</name></expr>]</index></name><operator pos:start="281:68" pos:end="281:68">.</operator><name pos:start="281:69" pos:end="281:73">chan2</name><operator pos:start="281:74" pos:end="281:74">)</operator></expr>)</condition> <block pos:start="281:77" pos:end="285:25">{<block_content pos:start="283:29" pos:end="283:55">

                            <return pos:start="283:29" pos:end="283:55">return <expr pos:start="283:36" pos:end="283:54"><name pos:start="283:36" pos:end="283:54">AVERROR_INVALIDDATA</name></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="289:21" pos:end="289:49"><expr pos:start="289:21" pos:end="289:48"><name pos:start="289:21" pos:end="289:35"><name pos:start="289:21" pos:end="289:21">s</name><operator pos:start="289:22" pos:end="289:23">-&gt;</operator><name pos:start="289:24" pos:end="289:32">mcdparams</name><index pos:start="289:33" pos:end="289:35">[<expr pos:start="289:34" pos:end="289:34"><name pos:start="289:34" pos:end="289:34">i</name></expr>]</index></name><operator pos:start="289:36" pos:end="289:36">.</operator><name pos:start="289:37" pos:end="289:41">chan1</name> <operator pos:start="289:43" pos:end="289:43">=</operator> <name pos:start="289:45" pos:end="289:48">nbit</name></expr>;</expr_stmt>



                    <expr_stmt pos:start="293:21" pos:end="293:41"><expr pos:start="293:21" pos:end="293:40"><name pos:start="293:21" pos:end="293:27">ch_mask</name> <operator pos:start="293:29" pos:end="293:30">|=</operator> <literal type="number" pos:start="293:32" pos:end="293:32">1</literal> <operator pos:start="293:34" pos:end="293:35">&lt;&lt;</operator> <name pos:start="293:37" pos:end="293:40">nbit</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="297:15" pos:end="309:13">else <block pos:start="297:20" pos:end="309:13">{<block_content pos:start="299:17" pos:end="307:17">

                <expr_stmt pos:start="299:17" pos:end="299:39"><expr pos:start="299:17" pos:end="299:38"><name pos:start="299:17" pos:end="299:20">chan</name> <operator pos:start="299:22" pos:end="299:22">=</operator> <name pos:start="299:24" pos:end="299:38"><name pos:start="299:24" pos:end="299:28">avctx</name><operator pos:start="299:29" pos:end="299:30">-&gt;</operator><name pos:start="299:31" pos:end="299:38">channels</name></name></expr>;</expr_stmt>

                <for pos:start="301:17" pos:end="307:17">for <control pos:start="301:21" pos:end="301:42">(<init pos:start="301:22" pos:end="301:27"><expr pos:start="301:22" pos:end="301:26"><name pos:start="301:22" pos:end="301:22">i</name> <operator pos:start="301:24" pos:end="301:24">=</operator> <literal type="number" pos:start="301:26" pos:end="301:26">0</literal></expr>;</init> <condition pos:start="301:29" pos:end="301:37"><expr pos:start="301:29" pos:end="301:36"><name pos:start="301:29" pos:end="301:29">i</name> <operator pos:start="301:31" pos:end="301:31">&lt;</operator> <name pos:start="301:33" pos:end="301:36">chan</name></expr>;</condition> <incr pos:start="301:39" pos:end="301:41"><expr pos:start="301:39" pos:end="301:41"><name pos:start="301:39" pos:end="301:39">i</name><operator pos:start="301:40" pos:end="301:41">++</operator></expr></incr>)</control> <block pos:start="301:44" pos:end="307:17">{<block_content pos:start="303:21" pos:end="305:48">

                    <expr_stmt pos:start="303:21" pos:end="303:48"><expr pos:start="303:21" pos:end="303:47"><name pos:start="303:21" pos:end="303:35"><name pos:start="303:21" pos:end="303:21">s</name><operator pos:start="303:22" pos:end="303:23">-&gt;</operator><name pos:start="303:24" pos:end="303:32">mcdparams</name><index pos:start="303:33" pos:end="303:35">[<expr pos:start="303:34" pos:end="303:34"><name pos:start="303:34" pos:end="303:34">i</name></expr>]</index></name><operator pos:start="303:36" pos:end="303:36">.</operator><name pos:start="303:37" pos:end="303:43">present</name> <operator pos:start="303:45" pos:end="303:45">=</operator> <literal type="number" pos:start="303:47" pos:end="303:47">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="305:21" pos:end="305:48"><expr pos:start="305:21" pos:end="305:47"><name pos:start="305:21" pos:end="305:35"><name pos:start="305:21" pos:end="305:21">s</name><operator pos:start="305:22" pos:end="305:23">-&gt;</operator><name pos:start="305:24" pos:end="305:32">mcdparams</name><index pos:start="305:33" pos:end="305:35">[<expr pos:start="305:34" pos:end="305:34"><name pos:start="305:34" pos:end="305:34">i</name></expr>]</index></name><operator pos:start="305:36" pos:end="305:36">.</operator><name pos:start="305:37" pos:end="305:41">chan1</name>   <operator pos:start="305:45" pos:end="305:45">=</operator> <name pos:start="305:47" pos:end="305:47">i</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>



            <for pos:start="313:13" pos:end="345:13">for <control pos:start="313:17" pos:end="313:38">(<init pos:start="313:18" pos:end="313:23"><expr pos:start="313:18" pos:end="313:22"><name pos:start="313:18" pos:end="313:18">i</name> <operator pos:start="313:20" pos:end="313:20">=</operator> <literal type="number" pos:start="313:22" pos:end="313:22">0</literal></expr>;</init> <condition pos:start="313:25" pos:end="313:33"><expr pos:start="313:25" pos:end="313:32"><name pos:start="313:25" pos:end="313:25">i</name> <operator pos:start="313:27" pos:end="313:27">&lt;</operator> <name pos:start="313:29" pos:end="313:32">chan</name></expr>;</condition> <incr pos:start="313:35" pos:end="313:37"><expr pos:start="313:35" pos:end="313:37"><name pos:start="313:35" pos:end="313:35">i</name><operator pos:start="313:36" pos:end="313:37">++</operator></expr></incr>)</control> <block pos:start="313:40" pos:end="345:13">{<block_content pos:start="315:17" pos:end="343:17">

                <if_stmt pos:start="315:17" pos:end="319:35"><if pos:start="315:17" pos:end="319:35">if <condition pos:start="315:20" pos:end="315:74">(<expr pos:start="315:21" pos:end="315:73"><name pos:start="315:21" pos:end="315:35"><name pos:start="315:21" pos:end="315:21">s</name><operator pos:start="315:22" pos:end="315:23">-&gt;</operator><name pos:start="315:24" pos:end="315:32">mcdparams</name><index pos:start="315:33" pos:end="315:35">[<expr pos:start="315:34" pos:end="315:34"><name pos:start="315:34" pos:end="315:34">i</name></expr>]</index></name><operator pos:start="315:36" pos:end="315:36">.</operator><name pos:start="315:37" pos:end="315:43">present</name> <operator pos:start="315:45" pos:end="315:46">&amp;&amp;</operator> <name pos:start="315:48" pos:end="315:62"><name pos:start="315:48" pos:end="315:48">s</name><operator pos:start="315:49" pos:end="315:50">-&gt;</operator><name pos:start="315:51" pos:end="315:59">mcdparams</name><index pos:start="315:60" pos:end="315:62">[<expr pos:start="315:61" pos:end="315:61"><name pos:start="315:61" pos:end="315:61">i</name></expr>]</index></name><operator pos:start="315:63" pos:end="315:63">.</operator><name pos:start="315:64" pos:end="315:68">index</name> <operator pos:start="315:70" pos:end="315:71">==</operator> <literal type="number" pos:start="315:73" pos:end="315:73">1</literal></expr>)</condition><block type="pseudo" pos:start="317:21" pos:end="319:35"><block_content pos:start="317:21" pos:end="319:35">

                    <if_stmt pos:start="317:21" pos:end="319:35"><if pos:start="317:21" pos:end="319:35">if <condition pos:start="317:24" pos:end="317:71">(<expr pos:start="317:25" pos:end="317:70"><name pos:start="317:25" pos:end="317:27">ret</name> <operator pos:start="317:29" pos:end="317:29">=</operator> <call pos:start="317:31" pos:end="317:70"><name pos:start="317:31" pos:end="317:44">decode_channel</name><argument_list pos:start="317:45" pos:end="317:70">(<argument pos:start="317:46" pos:end="317:46"><expr pos:start="317:46" pos:end="317:46"><name pos:start="317:46" pos:end="317:46">s</name></expr></argument>, <argument pos:start="317:49" pos:end="317:69"><expr pos:start="317:49" pos:end="317:69"><name pos:start="317:49" pos:end="317:63"><name pos:start="317:49" pos:end="317:49">s</name><operator pos:start="317:50" pos:end="317:51">-&gt;</operator><name pos:start="317:52" pos:end="317:60">mcdparams</name><index pos:start="317:61" pos:end="317:63">[<expr pos:start="317:62" pos:end="317:62"><name pos:start="317:62" pos:end="317:62">i</name></expr>]</index></name><operator pos:start="317:64" pos:end="317:64">.</operator><name pos:start="317:65" pos:end="317:69">chan2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="319:25" pos:end="319:35"><block_content pos:start="319:25" pos:end="319:35">

                        <return pos:start="319:25" pos:end="319:35">return <expr pos:start="319:32" pos:end="319:34"><name pos:start="319:32" pos:end="319:34">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="323:17" pos:end="325:31"><if pos:start="323:17" pos:end="325:31">if <condition pos:start="323:20" pos:end="323:67">(<expr pos:start="323:21" pos:end="323:66"><name pos:start="323:21" pos:end="323:23">ret</name> <operator pos:start="323:25" pos:end="323:25">=</operator> <call pos:start="323:27" pos:end="323:66"><name pos:start="323:27" pos:end="323:40">decode_channel</name><argument_list pos:start="323:41" pos:end="323:66">(<argument pos:start="323:42" pos:end="323:42"><expr pos:start="323:42" pos:end="323:42"><name pos:start="323:42" pos:end="323:42">s</name></expr></argument>, <argument pos:start="323:45" pos:end="323:65"><expr pos:start="323:45" pos:end="323:65"><name pos:start="323:45" pos:end="323:59"><name pos:start="323:45" pos:end="323:45">s</name><operator pos:start="323:46" pos:end="323:47">-&gt;</operator><name pos:start="323:48" pos:end="323:56">mcdparams</name><index pos:start="323:57" pos:end="323:59">[<expr pos:start="323:58" pos:end="323:58"><name pos:start="323:58" pos:end="323:58">i</name></expr>]</index></name><operator pos:start="323:60" pos:end="323:60">.</operator><name pos:start="323:61" pos:end="323:65">chan1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="325:21" pos:end="325:31"><block_content pos:start="325:21" pos:end="325:31">

                    <return pos:start="325:21" pos:end="325:31">return <expr pos:start="325:28" pos:end="325:30"><name pos:start="325:28" pos:end="325:30">ret</name></expr>;</return></block_content></block></if></if_stmt>



                <if_stmt pos:start="329:17" pos:end="343:17"><if pos:start="329:17" pos:end="343:17">if <condition pos:start="329:20" pos:end="329:44">(<expr pos:start="329:21" pos:end="329:43"><name pos:start="329:21" pos:end="329:35"><name pos:start="329:21" pos:end="329:21">s</name><operator pos:start="329:22" pos:end="329:23">-&gt;</operator><name pos:start="329:24" pos:end="329:32">mcdparams</name><index pos:start="329:33" pos:end="329:35">[<expr pos:start="329:34" pos:end="329:34"><name pos:start="329:34" pos:end="329:34">i</name></expr>]</index></name><operator pos:start="329:36" pos:end="329:36">.</operator><name pos:start="329:37" pos:end="329:43">present</name></expr>)</condition> <block pos:start="329:46" pos:end="343:17">{<block_content pos:start="331:21" pos:end="341:35">

                    <expr_stmt pos:start="331:21" pos:end="331:64"><expr pos:start="331:21" pos:end="331:63"><name pos:start="331:21" pos:end="331:28"><name pos:start="331:21" pos:end="331:21">s</name><operator pos:start="331:22" pos:end="331:23">-&gt;</operator><name pos:start="331:24" pos:end="331:28">dmode</name></name> <operator pos:start="331:30" pos:end="331:30">=</operator> <name pos:start="331:32" pos:end="331:63"><name pos:start="331:32" pos:end="331:40">mc_dmodes</name><index pos:start="331:41" pos:end="331:63">[<expr pos:start="331:42" pos:end="331:62"><name pos:start="331:42" pos:end="331:56"><name pos:start="331:42" pos:end="331:42">s</name><operator pos:start="331:43" pos:end="331:44">-&gt;</operator><name pos:start="331:45" pos:end="331:53">mcdparams</name><index pos:start="331:54" pos:end="331:56">[<expr pos:start="331:55" pos:end="331:55"><name pos:start="331:55" pos:end="331:55">i</name></expr>]</index></name><operator pos:start="331:57" pos:end="331:57">.</operator><name pos:start="331:58" pos:end="331:62">index</name></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="333:21" pos:end="341:35"><if pos:start="333:21" pos:end="341:35">if <condition pos:start="333:24" pos:end="339:61">(<expr pos:start="333:25" pos:end="339:60"><name pos:start="333:25" pos:end="333:27">ret</name> <operator pos:start="333:29" pos:end="333:29">=</operator> <call pos:start="333:31" pos:end="339:60"><name pos:start="333:31" pos:end="333:41">decorrelate</name><argument_list pos:start="333:42" pos:end="339:60">(<argument pos:start="333:43" pos:end="333:43"><expr pos:start="333:43" pos:end="333:43"><name pos:start="333:43" pos:end="333:43">s</name></expr></argument>,

                                          <argument pos:start="335:43" pos:end="335:63"><expr pos:start="335:43" pos:end="335:63"><name pos:start="335:43" pos:end="335:57"><name pos:start="335:43" pos:end="335:43">s</name><operator pos:start="335:44" pos:end="335:45">-&gt;</operator><name pos:start="335:46" pos:end="335:54">mcdparams</name><index pos:start="335:55" pos:end="335:57">[<expr pos:start="335:56" pos:end="335:56"><name pos:start="335:56" pos:end="335:56">i</name></expr>]</index></name><operator pos:start="335:58" pos:end="335:58">.</operator><name pos:start="335:59" pos:end="335:63">chan2</name></expr></argument>,

                                          <argument pos:start="337:43" pos:end="337:63"><expr pos:start="337:43" pos:end="337:63"><name pos:start="337:43" pos:end="337:57"><name pos:start="337:43" pos:end="337:43">s</name><operator pos:start="337:44" pos:end="337:45">-&gt;</operator><name pos:start="337:46" pos:end="337:54">mcdparams</name><index pos:start="337:55" pos:end="337:57">[<expr pos:start="337:56" pos:end="337:56"><name pos:start="337:56" pos:end="337:56">i</name></expr>]</index></name><operator pos:start="337:58" pos:end="337:58">.</operator><name pos:start="337:59" pos:end="337:63">chan1</name></expr></argument>,

                                          <argument pos:start="339:43" pos:end="339:59"><expr pos:start="339:43" pos:end="339:59"><name pos:start="339:43" pos:end="339:55"><name pos:start="339:43" pos:end="339:43">s</name><operator pos:start="339:44" pos:end="339:45">-&gt;</operator><name pos:start="339:46" pos:end="339:55">nb_samples</name></name> <operator pos:start="339:57" pos:end="339:57">-</operator> <literal type="number" pos:start="339:59" pos:end="339:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="341:25" pos:end="341:35"><block_content pos:start="341:25" pos:end="341:35">

                        <return pos:start="341:25" pos:end="341:35">return <expr pos:start="341:32" pos:end="341:34"><name pos:start="341:32" pos:end="341:34">ret</name></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <for pos:start="351:9" pos:end="369:9">for <control pos:start="351:13" pos:end="351:54">(<init pos:start="351:14" pos:end="351:22"><expr pos:start="351:14" pos:end="351:21"><name pos:start="351:14" pos:end="351:17">chan</name> <operator pos:start="351:19" pos:end="351:19">=</operator> <literal type="number" pos:start="351:21" pos:end="351:21">0</literal></expr>;</init> <condition pos:start="351:24" pos:end="351:46"><expr pos:start="351:24" pos:end="351:45"><name pos:start="351:24" pos:end="351:27">chan</name> <operator pos:start="351:29" pos:end="351:29">&lt;</operator> <name pos:start="351:31" pos:end="351:45"><name pos:start="351:31" pos:end="351:35">avctx</name><operator pos:start="351:36" pos:end="351:37">-&gt;</operator><name pos:start="351:38" pos:end="351:45">channels</name></name></expr>;</condition> <incr pos:start="351:48" pos:end="351:53"><expr pos:start="351:48" pos:end="351:53"><name pos:start="351:48" pos:end="351:51">chan</name><operator pos:start="351:52" pos:end="351:53">++</operator></expr></incr>)</control> <block pos:start="351:56" pos:end="369:9">{<block_content pos:start="353:13" pos:end="367:57">

            <decl_stmt pos:start="353:13" pos:end="353:48"><decl pos:start="353:13" pos:end="353:47"><type pos:start="353:13" pos:end="353:21"><name pos:start="353:13" pos:end="353:19">int32_t</name> <modifier pos:start="353:21" pos:end="353:21">*</modifier></type><name pos:start="353:22" pos:end="353:28">decoded</name> <init pos:start="353:30" pos:end="353:47">= <expr pos:start="353:32" pos:end="353:47"><name pos:start="353:32" pos:end="353:47"><name pos:start="353:32" pos:end="353:32">s</name><operator pos:start="353:33" pos:end="353:34">-&gt;</operator><name pos:start="353:35" pos:end="353:41">decoded</name><index pos:start="353:42" pos:end="353:47">[<expr pos:start="353:43" pos:end="353:46"><name pos:start="353:43" pos:end="353:46">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="357:13" pos:end="359:70"><if pos:start="357:13" pos:end="359:70">if <condition pos:start="357:16" pos:end="357:34">(<expr pos:start="357:17" pos:end="357:33"><name pos:start="357:17" pos:end="357:33"><name pos:start="357:17" pos:end="357:17">s</name><operator pos:start="357:18" pos:end="357:19">-&gt;</operator><name pos:start="357:20" pos:end="357:27">lpc_mode</name><index pos:start="357:28" pos:end="357:33">[<expr pos:start="357:29" pos:end="357:32"><name pos:start="357:29" pos:end="357:32">chan</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="359:17" pos:end="359:70"><block_content pos:start="359:17" pos:end="359:70">

                <expr_stmt pos:start="359:17" pos:end="359:70"><expr pos:start="359:17" pos:end="359:69"><call pos:start="359:17" pos:end="359:69"><name pos:start="359:17" pos:end="359:26">decode_lpc</name><argument_list pos:start="359:27" pos:end="359:69">(<argument pos:start="359:28" pos:end="359:34"><expr pos:start="359:28" pos:end="359:34"><name pos:start="359:28" pos:end="359:34">decoded</name></expr></argument>, <argument pos:start="359:37" pos:end="359:53"><expr pos:start="359:37" pos:end="359:53"><name pos:start="359:37" pos:end="359:53"><name pos:start="359:37" pos:end="359:37">s</name><operator pos:start="359:38" pos:end="359:39">-&gt;</operator><name pos:start="359:40" pos:end="359:47">lpc_mode</name><index pos:start="359:48" pos:end="359:53">[<expr pos:start="359:49" pos:end="359:52"><name pos:start="359:49" pos:end="359:52">chan</name></expr>]</index></name></expr></argument>, <argument pos:start="359:56" pos:end="359:68"><expr pos:start="359:56" pos:end="359:68"><name pos:start="359:56" pos:end="359:68"><name pos:start="359:56" pos:end="359:56">s</name><operator pos:start="359:57" pos:end="359:58">-&gt;</operator><name pos:start="359:59" pos:end="359:68">nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="363:13" pos:end="367:57"><if pos:start="363:13" pos:end="367:57">if <condition pos:start="363:16" pos:end="363:42">(<expr pos:start="363:17" pos:end="363:41"><name pos:start="363:17" pos:end="363:37"><name pos:start="363:17" pos:end="363:17">s</name><operator pos:start="363:18" pos:end="363:19">-&gt;</operator><name pos:start="363:20" pos:end="363:31">sample_shift</name><index pos:start="363:32" pos:end="363:37">[<expr pos:start="363:33" pos:end="363:36"><name pos:start="363:33" pos:end="363:36">chan</name></expr>]</index></name> <operator pos:start="363:39" pos:end="363:39">&gt;</operator> <literal type="number" pos:start="363:41" pos:end="363:41">0</literal></expr>)</condition><block type="pseudo" pos:start="365:17" pos:end="367:57"><block_content pos:start="365:17" pos:end="367:57">

                <for pos:start="365:17" pos:end="367:57">for <control pos:start="365:21" pos:end="365:51">(<init pos:start="365:22" pos:end="365:27"><expr pos:start="365:22" pos:end="365:26"><name pos:start="365:22" pos:end="365:22">i</name> <operator pos:start="365:24" pos:end="365:24">=</operator> <literal type="number" pos:start="365:26" pos:end="365:26">0</literal></expr>;</init> <condition pos:start="365:29" pos:end="365:46"><expr pos:start="365:29" pos:end="365:45"><name pos:start="365:29" pos:end="365:29">i</name> <operator pos:start="365:31" pos:end="365:31">&lt;</operator> <name pos:start="365:33" pos:end="365:45"><name pos:start="365:33" pos:end="365:33">s</name><operator pos:start="365:34" pos:end="365:35">-&gt;</operator><name pos:start="365:36" pos:end="365:45">nb_samples</name></name></expr>;</condition> <incr pos:start="365:48" pos:end="365:50"><expr pos:start="365:48" pos:end="365:50"><name pos:start="365:48" pos:end="365:48">i</name><operator pos:start="365:49" pos:end="365:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="367:21" pos:end="367:57"><block_content pos:start="367:21" pos:end="367:57">

                    <expr_stmt pos:start="367:21" pos:end="367:57"><expr pos:start="367:21" pos:end="367:56"><name pos:start="367:21" pos:end="367:30"><name pos:start="367:21" pos:end="367:27">decoded</name><index pos:start="367:28" pos:end="367:30">[<expr pos:start="367:29" pos:end="367:29"><name pos:start="367:29" pos:end="367:29">i</name></expr>]</index></name> <operator pos:start="367:32" pos:end="367:34">&lt;&lt;=</operator> <name pos:start="367:36" pos:end="367:56"><name pos:start="367:36" pos:end="367:36">s</name><operator pos:start="367:37" pos:end="367:38">-&gt;</operator><name pos:start="367:39" pos:end="367:50">sample_shift</name><index pos:start="367:51" pos:end="367:56">[<expr pos:start="367:52" pos:end="367:55"><name pos:start="367:52" pos:end="367:55">chan</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="375:5" pos:end="375:23"><expr pos:start="375:5" pos:end="375:22"><call pos:start="375:5" pos:end="375:22"><name pos:start="375:5" pos:end="375:18">align_get_bits</name><argument_list pos:start="375:19" pos:end="375:22">(<argument pos:start="375:20" pos:end="375:21"><expr pos:start="375:20" pos:end="375:21"><name pos:start="375:20" pos:end="375:21">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="377:5" pos:end="377:22"><expr pos:start="377:5" pos:end="377:21"><call pos:start="377:5" pos:end="377:21"><name pos:start="377:5" pos:end="377:13">skip_bits</name><argument_list pos:start="377:14" pos:end="377:21">(<argument pos:start="377:15" pos:end="377:16"><expr pos:start="377:15" pos:end="377:16"><name pos:start="377:15" pos:end="377:16">gb</name></expr></argument>, <argument pos:start="377:19" pos:end="377:20"><expr pos:start="377:19" pos:end="377:20"><literal type="number" pos:start="377:19" pos:end="377:20">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="379:5" pos:end="385:51"><if pos:start="379:5" pos:end="381:50">if <condition pos:start="379:8" pos:end="379:30">(<expr pos:start="379:9" pos:end="379:29"><call pos:start="379:9" pos:end="379:25"><name pos:start="379:9" pos:end="379:21">get_bits_left</name><argument_list pos:start="379:22" pos:end="379:25">(<argument pos:start="379:23" pos:end="379:24"><expr pos:start="379:23" pos:end="379:24"><name pos:start="379:23" pos:end="379:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="379:27" pos:end="379:27">&lt;</operator> <literal type="number" pos:start="379:29" pos:end="379:29">0</literal></expr>)</condition><block type="pseudo" pos:start="381:9" pos:end="381:50"><block_content pos:start="381:9" pos:end="381:50">

        <expr_stmt pos:start="381:9" pos:end="381:50"><expr pos:start="381:9" pos:end="381:49"><call pos:start="381:9" pos:end="381:49"><name pos:start="381:9" pos:end="381:14">av_log</name><argument_list pos:start="381:15" pos:end="381:49">(<argument pos:start="381:16" pos:end="381:20"><expr pos:start="381:16" pos:end="381:20"><name pos:start="381:16" pos:end="381:20">avctx</name></expr></argument>, <argument pos:start="381:23" pos:end="381:34"><expr pos:start="381:23" pos:end="381:34"><name pos:start="381:23" pos:end="381:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="381:37" pos:end="381:48"><expr pos:start="381:37" pos:end="381:48"><literal type="string" pos:start="381:37" pos:end="381:48">"overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="383:5" pos:end="385:51">else if <condition pos:start="383:13" pos:end="383:35">(<expr pos:start="383:14" pos:end="383:34"><call pos:start="383:14" pos:end="383:30"><name pos:start="383:14" pos:end="383:26">get_bits_left</name><argument_list pos:start="383:27" pos:end="383:30">(<argument pos:start="383:28" pos:end="383:29"><expr pos:start="383:28" pos:end="383:29"><name pos:start="383:28" pos:end="383:29">gb</name></expr></argument>)</argument_list></call> <operator pos:start="383:32" pos:end="383:32">&gt;</operator> <literal type="number" pos:start="383:34" pos:end="383:34">0</literal></expr>)</condition><block type="pseudo" pos:start="385:9" pos:end="385:51"><block_content pos:start="385:9" pos:end="385:51">

        <expr_stmt pos:start="385:9" pos:end="385:51"><expr pos:start="385:9" pos:end="385:50"><call pos:start="385:9" pos:end="385:50"><name pos:start="385:9" pos:end="385:14">av_log</name><argument_list pos:start="385:15" pos:end="385:50">(<argument pos:start="385:16" pos:end="385:20"><expr pos:start="385:16" pos:end="385:20"><name pos:start="385:16" pos:end="385:20">avctx</name></expr></argument>, <argument pos:start="385:23" pos:end="385:34"><expr pos:start="385:23" pos:end="385:34"><name pos:start="385:23" pos:end="385:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="385:37" pos:end="385:49"><expr pos:start="385:37" pos:end="385:49"><literal type="string" pos:start="385:37" pos:end="385:49">"underread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="389:5" pos:end="403:5"><if pos:start="389:5" pos:end="403:5">if <condition pos:start="389:8" pos:end="389:68">(<expr pos:start="389:9" pos:end="389:67"><name pos:start="389:9" pos:end="389:30"><name pos:start="389:9" pos:end="389:13">avctx</name><operator pos:start="389:14" pos:end="389:15">-&gt;</operator><name pos:start="389:16" pos:end="389:30">err_recognition</name></name> <operator pos:start="389:32" pos:end="389:32">&amp;</operator> <operator pos:start="389:34" pos:end="389:34">(</operator><name pos:start="389:35" pos:end="389:48">AV_EF_CRCCHECK</name> <operator pos:start="389:50" pos:end="389:50">|</operator> <name pos:start="389:52" pos:end="389:66">AV_EF_COMPLIANT</name><operator pos:start="389:67" pos:end="389:67">)</operator></expr>)</condition> <block pos:start="389:70" pos:end="403:5">{<block_content pos:start="391:9" pos:end="401:9">

        <if_stmt pos:start="391:9" pos:end="401:9"><if pos:start="391:9" pos:end="401:9">if <condition pos:start="391:12" pos:end="393:61">(<expr pos:start="391:13" pos:end="393:60"><call pos:start="391:13" pos:end="393:60"><name pos:start="391:13" pos:end="391:28">ff_tak_check_crc</name><argument_list pos:start="391:29" pos:end="393:60">(<argument pos:start="391:30" pos:end="391:46"><expr pos:start="391:30" pos:end="391:46"><name pos:start="391:30" pos:end="391:38"><name pos:start="391:30" pos:end="391:32">pkt</name><operator pos:start="391:33" pos:end="391:34">-&gt;</operator><name pos:start="391:35" pos:end="391:38">data</name></name> <operator pos:start="391:40" pos:end="391:40">+</operator> <name pos:start="391:42" pos:end="391:46">hsize</name></expr></argument>,

                             <argument pos:start="393:30" pos:end="393:59"><expr pos:start="393:30" pos:end="393:59"><call pos:start="393:30" pos:end="393:47"><name pos:start="393:30" pos:end="393:43">get_bits_count</name><argument_list pos:start="393:44" pos:end="393:47">(<argument pos:start="393:45" pos:end="393:46"><expr pos:start="393:45" pos:end="393:46"><name pos:start="393:45" pos:end="393:46">gb</name></expr></argument>)</argument_list></call> <operator pos:start="393:49" pos:end="393:49">/</operator> <literal type="number" pos:start="393:51" pos:end="393:53">8</literal> <operator pos:start="393:53" pos:end="393:53">-</operator> <name pos:start="393:55" pos:end="393:59">hsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="393:63" pos:end="401:9">{<block_content pos:start="395:13" pos:end="399:43">

            <expr_stmt pos:start="395:13" pos:end="395:55"><expr pos:start="395:13" pos:end="395:54"><call pos:start="395:13" pos:end="395:54"><name pos:start="395:13" pos:end="395:18">av_log</name><argument_list pos:start="395:19" pos:end="395:54">(<argument pos:start="395:20" pos:end="395:24"><expr pos:start="395:20" pos:end="395:24"><name pos:start="395:20" pos:end="395:24">avctx</name></expr></argument>, <argument pos:start="395:27" pos:end="395:38"><expr pos:start="395:27" pos:end="395:38"><name pos:start="395:27" pos:end="395:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="395:41" pos:end="395:53"><expr pos:start="395:41" pos:end="395:53"><literal type="string" pos:start="395:41" pos:end="395:53">"CRC error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="397:13" pos:end="399:43"><if pos:start="397:13" pos:end="399:43">if <condition pos:start="397:16" pos:end="397:55">(<expr pos:start="397:17" pos:end="397:54"><name pos:start="397:17" pos:end="397:38"><name pos:start="397:17" pos:end="397:21">avctx</name><operator pos:start="397:22" pos:end="397:23">-&gt;</operator><name pos:start="397:24" pos:end="397:38">err_recognition</name></name> <operator pos:start="397:40" pos:end="397:40">&amp;</operator> <name pos:start="397:42" pos:end="397:54">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="399:17" pos:end="399:43"><block_content pos:start="399:17" pos:end="399:43">

                <return pos:start="399:17" pos:end="399:43">return <expr pos:start="399:24" pos:end="399:42"><name pos:start="399:24" pos:end="399:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="407:5" pos:end="407:34">/* convert to output buffer */</comment>

    <switch pos:start="409:5" pos:end="457:5">switch <condition pos:start="409:12" pos:end="409:30">(<expr pos:start="409:13" pos:end="409:29"><name pos:start="409:13" pos:end="409:29"><name pos:start="409:13" pos:end="409:17">avctx</name><operator pos:start="409:18" pos:end="409:19">-&gt;</operator><name pos:start="409:20" pos:end="409:29">sample_fmt</name></name></expr>)</condition> <block pos:start="409:32" pos:end="457:5">{<block_content pos:start="411:5" pos:end="455:14">

    <case pos:start="411:5" pos:end="411:27">case <expr pos:start="411:10" pos:end="411:26"><name pos:start="411:10" pos:end="411:26">AV_SAMPLE_FMT_U8P</name></expr>:</case>

        <for pos:start="413:9" pos:end="423:9">for <control pos:start="413:13" pos:end="413:54">(<init pos:start="413:14" pos:end="413:22"><expr pos:start="413:14" pos:end="413:21"><name pos:start="413:14" pos:end="413:17">chan</name> <operator pos:start="413:19" pos:end="413:19">=</operator> <literal type="number" pos:start="413:21" pos:end="413:21">0</literal></expr>;</init> <condition pos:start="413:24" pos:end="413:46"><expr pos:start="413:24" pos:end="413:45"><name pos:start="413:24" pos:end="413:27">chan</name> <operator pos:start="413:29" pos:end="413:29">&lt;</operator> <name pos:start="413:31" pos:end="413:45"><name pos:start="413:31" pos:end="413:35">avctx</name><operator pos:start="413:36" pos:end="413:37">-&gt;</operator><name pos:start="413:38" pos:end="413:45">channels</name></name></expr>;</condition> <incr pos:start="413:48" pos:end="413:53"><expr pos:start="413:48" pos:end="413:53"><name pos:start="413:48" pos:end="413:51">chan</name><operator pos:start="413:52" pos:end="413:53">++</operator></expr></incr>)</control> <block pos:start="413:56" pos:end="423:9">{<block_content pos:start="415:13" pos:end="421:47">

            <decl_stmt pos:start="415:13" pos:end="415:69"><decl pos:start="415:13" pos:end="415:68"><type pos:start="415:13" pos:end="415:21"><name pos:start="415:13" pos:end="415:19">uint8_t</name> <modifier pos:start="415:21" pos:end="415:21">*</modifier></type><name pos:start="415:22" pos:end="415:28">samples</name> <init pos:start="415:30" pos:end="415:68">= <expr pos:start="415:32" pos:end="415:68"><operator pos:start="415:32" pos:end="415:32">(</operator><name pos:start="415:33" pos:end="415:39">uint8_t</name> <operator pos:start="415:41" pos:end="415:41">*</operator><operator pos:start="415:42" pos:end="415:42">)</operator><name pos:start="415:43" pos:end="415:68"><name pos:start="415:43" pos:end="415:47">frame</name><operator pos:start="415:48" pos:end="415:49">-&gt;</operator><name pos:start="415:50" pos:end="415:62">extended_data</name><index pos:start="415:63" pos:end="415:68">[<expr pos:start="415:64" pos:end="415:67"><name pos:start="415:64" pos:end="415:67">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="417:13" pos:end="417:48"><decl pos:start="417:13" pos:end="417:47"><type pos:start="417:13" pos:end="417:21"><name pos:start="417:13" pos:end="417:19">int32_t</name> <modifier pos:start="417:21" pos:end="417:21">*</modifier></type><name pos:start="417:22" pos:end="417:28">decoded</name> <init pos:start="417:30" pos:end="417:47">= <expr pos:start="417:32" pos:end="417:47"><name pos:start="417:32" pos:end="417:47"><name pos:start="417:32" pos:end="417:32">s</name><operator pos:start="417:33" pos:end="417:34">-&gt;</operator><name pos:start="417:35" pos:end="417:41">decoded</name><index pos:start="417:42" pos:end="417:47">[<expr pos:start="417:43" pos:end="417:46"><name pos:start="417:43" pos:end="417:46">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="419:13" pos:end="421:47">for <control pos:start="419:17" pos:end="419:47">(<init pos:start="419:18" pos:end="419:23"><expr pos:start="419:18" pos:end="419:22"><name pos:start="419:18" pos:end="419:18">i</name> <operator pos:start="419:20" pos:end="419:20">=</operator> <literal type="number" pos:start="419:22" pos:end="419:22">0</literal></expr>;</init> <condition pos:start="419:25" pos:end="419:42"><expr pos:start="419:25" pos:end="419:41"><name pos:start="419:25" pos:end="419:25">i</name> <operator pos:start="419:27" pos:end="419:27">&lt;</operator> <name pos:start="419:29" pos:end="419:41"><name pos:start="419:29" pos:end="419:29">s</name><operator pos:start="419:30" pos:end="419:31">-&gt;</operator><name pos:start="419:32" pos:end="419:41">nb_samples</name></name></expr>;</condition> <incr pos:start="419:44" pos:end="419:46"><expr pos:start="419:44" pos:end="419:46"><name pos:start="419:44" pos:end="419:44">i</name><operator pos:start="419:45" pos:end="419:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="421:17" pos:end="421:47"><block_content pos:start="421:17" pos:end="421:47">

                <expr_stmt pos:start="421:17" pos:end="421:47"><expr pos:start="421:17" pos:end="421:46"><name pos:start="421:17" pos:end="421:26"><name pos:start="421:17" pos:end="421:23">samples</name><index pos:start="421:24" pos:end="421:26">[<expr pos:start="421:25" pos:end="421:25"><name pos:start="421:25" pos:end="421:25">i</name></expr>]</index></name> <operator pos:start="421:28" pos:end="421:28">=</operator> <name pos:start="421:30" pos:end="421:39"><name pos:start="421:30" pos:end="421:36">decoded</name><index pos:start="421:37" pos:end="421:39">[<expr pos:start="421:38" pos:end="421:38"><name pos:start="421:38" pos:end="421:38">i</name></expr>]</index></name> <operator pos:start="421:41" pos:end="421:41">+</operator> <literal type="number" pos:start="421:43" pos:end="421:46">0x80</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="425:9" pos:end="425:14">break;</break>

    <case pos:start="427:5" pos:end="427:28">case <expr pos:start="427:10" pos:end="427:27"><name pos:start="427:10" pos:end="427:27">AV_SAMPLE_FMT_S16P</name></expr>:</case>

        <for pos:start="429:9" pos:end="439:9">for <control pos:start="429:13" pos:end="429:54">(<init pos:start="429:14" pos:end="429:22"><expr pos:start="429:14" pos:end="429:21"><name pos:start="429:14" pos:end="429:17">chan</name> <operator pos:start="429:19" pos:end="429:19">=</operator> <literal type="number" pos:start="429:21" pos:end="429:21">0</literal></expr>;</init> <condition pos:start="429:24" pos:end="429:46"><expr pos:start="429:24" pos:end="429:45"><name pos:start="429:24" pos:end="429:27">chan</name> <operator pos:start="429:29" pos:end="429:29">&lt;</operator> <name pos:start="429:31" pos:end="429:45"><name pos:start="429:31" pos:end="429:35">avctx</name><operator pos:start="429:36" pos:end="429:37">-&gt;</operator><name pos:start="429:38" pos:end="429:45">channels</name></name></expr>;</condition> <incr pos:start="429:48" pos:end="429:53"><expr pos:start="429:48" pos:end="429:53"><name pos:start="429:48" pos:end="429:51">chan</name><operator pos:start="429:52" pos:end="429:53">++</operator></expr></incr>)</control> <block pos:start="429:56" pos:end="439:9">{<block_content pos:start="431:13" pos:end="437:40">

            <decl_stmt pos:start="431:13" pos:end="431:69"><decl pos:start="431:13" pos:end="431:68"><type pos:start="431:13" pos:end="431:21"><name pos:start="431:13" pos:end="431:19">int16_t</name> <modifier pos:start="431:21" pos:end="431:21">*</modifier></type><name pos:start="431:22" pos:end="431:28">samples</name> <init pos:start="431:30" pos:end="431:68">= <expr pos:start="431:32" pos:end="431:68"><operator pos:start="431:32" pos:end="431:32">(</operator><name pos:start="431:33" pos:end="431:39">int16_t</name> <operator pos:start="431:41" pos:end="431:41">*</operator><operator pos:start="431:42" pos:end="431:42">)</operator><name pos:start="431:43" pos:end="431:68"><name pos:start="431:43" pos:end="431:47">frame</name><operator pos:start="431:48" pos:end="431:49">-&gt;</operator><name pos:start="431:50" pos:end="431:62">extended_data</name><index pos:start="431:63" pos:end="431:68">[<expr pos:start="431:64" pos:end="431:67"><name pos:start="431:64" pos:end="431:67">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="433:13" pos:end="433:48"><decl pos:start="433:13" pos:end="433:47"><type pos:start="433:13" pos:end="433:21"><name pos:start="433:13" pos:end="433:19">int32_t</name> <modifier pos:start="433:21" pos:end="433:21">*</modifier></type><name pos:start="433:22" pos:end="433:28">decoded</name> <init pos:start="433:30" pos:end="433:47">= <expr pos:start="433:32" pos:end="433:47"><name pos:start="433:32" pos:end="433:47"><name pos:start="433:32" pos:end="433:32">s</name><operator pos:start="433:33" pos:end="433:34">-&gt;</operator><name pos:start="433:35" pos:end="433:41">decoded</name><index pos:start="433:42" pos:end="433:47">[<expr pos:start="433:43" pos:end="433:46"><name pos:start="433:43" pos:end="433:46">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="435:13" pos:end="437:40">for <control pos:start="435:17" pos:end="435:47">(<init pos:start="435:18" pos:end="435:23"><expr pos:start="435:18" pos:end="435:22"><name pos:start="435:18" pos:end="435:18">i</name> <operator pos:start="435:20" pos:end="435:20">=</operator> <literal type="number" pos:start="435:22" pos:end="435:22">0</literal></expr>;</init> <condition pos:start="435:25" pos:end="435:42"><expr pos:start="435:25" pos:end="435:41"><name pos:start="435:25" pos:end="435:25">i</name> <operator pos:start="435:27" pos:end="435:27">&lt;</operator> <name pos:start="435:29" pos:end="435:41"><name pos:start="435:29" pos:end="435:29">s</name><operator pos:start="435:30" pos:end="435:31">-&gt;</operator><name pos:start="435:32" pos:end="435:41">nb_samples</name></name></expr>;</condition> <incr pos:start="435:44" pos:end="435:46"><expr pos:start="435:44" pos:end="435:46"><name pos:start="435:44" pos:end="435:44">i</name><operator pos:start="435:45" pos:end="435:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="437:17" pos:end="437:40"><block_content pos:start="437:17" pos:end="437:40">

                <expr_stmt pos:start="437:17" pos:end="437:40"><expr pos:start="437:17" pos:end="437:39"><name pos:start="437:17" pos:end="437:26"><name pos:start="437:17" pos:end="437:23">samples</name><index pos:start="437:24" pos:end="437:26">[<expr pos:start="437:25" pos:end="437:25"><name pos:start="437:25" pos:end="437:25">i</name></expr>]</index></name> <operator pos:start="437:28" pos:end="437:28">=</operator> <name pos:start="437:30" pos:end="437:39"><name pos:start="437:30" pos:end="437:36">decoded</name><index pos:start="437:37" pos:end="437:39">[<expr pos:start="437:38" pos:end="437:38"><name pos:start="437:38" pos:end="437:38">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="441:9" pos:end="441:14">break;</break>

    <case pos:start="443:5" pos:end="443:28">case <expr pos:start="443:10" pos:end="443:27"><name pos:start="443:10" pos:end="443:27">AV_SAMPLE_FMT_S32P</name></expr>:</case>

        <for pos:start="445:9" pos:end="453:9">for <control pos:start="445:13" pos:end="445:54">(<init pos:start="445:14" pos:end="445:22"><expr pos:start="445:14" pos:end="445:21"><name pos:start="445:14" pos:end="445:17">chan</name> <operator pos:start="445:19" pos:end="445:19">=</operator> <literal type="number" pos:start="445:21" pos:end="445:21">0</literal></expr>;</init> <condition pos:start="445:24" pos:end="445:46"><expr pos:start="445:24" pos:end="445:45"><name pos:start="445:24" pos:end="445:27">chan</name> <operator pos:start="445:29" pos:end="445:29">&lt;</operator> <name pos:start="445:31" pos:end="445:45"><name pos:start="445:31" pos:end="445:35">avctx</name><operator pos:start="445:36" pos:end="445:37">-&gt;</operator><name pos:start="445:38" pos:end="445:45">channels</name></name></expr>;</condition> <incr pos:start="445:48" pos:end="445:53"><expr pos:start="445:48" pos:end="445:53"><name pos:start="445:48" pos:end="445:51">chan</name><operator pos:start="445:52" pos:end="445:53">++</operator></expr></incr>)</control> <block pos:start="445:56" pos:end="453:9">{<block_content pos:start="447:13" pos:end="451:33">

            <decl_stmt pos:start="447:13" pos:end="447:69"><decl pos:start="447:13" pos:end="447:68"><type pos:start="447:13" pos:end="447:21"><name pos:start="447:13" pos:end="447:19">int32_t</name> <modifier pos:start="447:21" pos:end="447:21">*</modifier></type><name pos:start="447:22" pos:end="447:28">samples</name> <init pos:start="447:30" pos:end="447:68">= <expr pos:start="447:32" pos:end="447:68"><operator pos:start="447:32" pos:end="447:32">(</operator><name pos:start="447:33" pos:end="447:39">int32_t</name> <operator pos:start="447:41" pos:end="447:41">*</operator><operator pos:start="447:42" pos:end="447:42">)</operator><name pos:start="447:43" pos:end="447:68"><name pos:start="447:43" pos:end="447:47">frame</name><operator pos:start="447:48" pos:end="447:49">-&gt;</operator><name pos:start="447:50" pos:end="447:62">extended_data</name><index pos:start="447:63" pos:end="447:68">[<expr pos:start="447:64" pos:end="447:67"><name pos:start="447:64" pos:end="447:67">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="449:13" pos:end="451:33">for <control pos:start="449:17" pos:end="449:47">(<init pos:start="449:18" pos:end="449:23"><expr pos:start="449:18" pos:end="449:22"><name pos:start="449:18" pos:end="449:18">i</name> <operator pos:start="449:20" pos:end="449:20">=</operator> <literal type="number" pos:start="449:22" pos:end="449:22">0</literal></expr>;</init> <condition pos:start="449:25" pos:end="449:42"><expr pos:start="449:25" pos:end="449:41"><name pos:start="449:25" pos:end="449:25">i</name> <operator pos:start="449:27" pos:end="449:27">&lt;</operator> <name pos:start="449:29" pos:end="449:41"><name pos:start="449:29" pos:end="449:29">s</name><operator pos:start="449:30" pos:end="449:31">-&gt;</operator><name pos:start="449:32" pos:end="449:41">nb_samples</name></name></expr>;</condition> <incr pos:start="449:44" pos:end="449:46"><expr pos:start="449:44" pos:end="449:46"><name pos:start="449:44" pos:end="449:44">i</name><operator pos:start="449:45" pos:end="449:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="451:17" pos:end="451:33"><block_content pos:start="451:17" pos:end="451:33">

                <expr_stmt pos:start="451:17" pos:end="451:33"><expr pos:start="451:17" pos:end="451:32"><name pos:start="451:17" pos:end="451:26"><name pos:start="451:17" pos:end="451:23">samples</name><index pos:start="451:24" pos:end="451:26">[<expr pos:start="451:25" pos:end="451:25"><name pos:start="451:25" pos:end="451:25">i</name></expr>]</index></name> <operator pos:start="451:28" pos:end="451:30">&lt;&lt;=</operator> <literal type="number" pos:start="451:32" pos:end="451:32">8</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="455:9" pos:end="455:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="461:5" pos:end="461:23"><expr pos:start="461:5" pos:end="461:22"><operator pos:start="461:5" pos:end="461:5">*</operator><name pos:start="461:6" pos:end="461:18">got_frame_ptr</name> <operator pos:start="461:20" pos:end="461:20">=</operator> <literal type="number" pos:start="461:22" pos:end="461:22">1</literal></expr>;</expr_stmt>



    <return pos:start="465:5" pos:end="465:21">return <expr pos:start="465:12" pos:end="465:20"><name pos:start="465:12" pos:end="465:20"><name pos:start="465:12" pos:end="465:14">pkt</name><operator pos:start="465:15" pos:end="465:16">-&gt;</operator><name pos:start="465:17" pos:end="465:20">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
