<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4633.c" pos:tabs="8"><function pos:start="1:1" pos:end="259:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">vc1_parse</name><parameter_list pos:start="1:21" pos:end="7:60">(<parameter pos:start="1:22" pos:end="1:44"><decl pos:start="1:22" pos:end="1:44"><type pos:start="1:22" pos:end="1:44"><name pos:start="1:22" pos:end="1:41">AVCodecParserContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:48"><decl pos:start="3:28" pos:end="3:48"><type pos:start="3:28" pos:end="3:48"><name pos:start="3:28" pos:end="3:41">AVCodecContext</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:48">avctx</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:50"><decl pos:start="5:28" pos:end="5:50"><type pos:start="5:28" pos:end="5:50"><specifier pos:start="5:28" pos:end="5:32">const</specifier> <name pos:start="5:34" pos:end="5:40">uint8_t</name> <modifier pos:start="5:42" pos:end="5:42">*</modifier><modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:50">poutbuf</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:69"><decl pos:start="5:53" pos:end="5:69"><type pos:start="5:53" pos:end="5:69"><name pos:start="5:53" pos:end="5:55">int</name> <modifier pos:start="5:57" pos:end="5:57">*</modifier></type><name pos:start="5:58" pos:end="5:69">poutbuf_size</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:45"><decl pos:start="7:28" pos:end="7:45"><type pos:start="7:28" pos:end="7:45"><specifier pos:start="7:28" pos:end="7:32">const</specifier> <name pos:start="7:34" pos:end="7:40">uint8_t</name> <modifier pos:start="7:42" pos:end="7:42">*</modifier></type><name pos:start="7:43" pos:end="7:45">buf</name></decl></parameter>, <parameter pos:start="7:48" pos:end="7:59"><decl pos:start="7:48" pos:end="7:59"><type pos:start="7:48" pos:end="7:59"><name pos:start="7:48" pos:end="7:50">int</name></type> <name pos:start="7:52" pos:end="7:59">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="259:1">{<block_content pos:start="17:5" pos:end="257:16">

    <comment type="block" pos:start="11:5" pos:end="15:30">/* Here we do the searching for frame boundaries and headers at

     * the same time. Only a minimal amount at the start of each

     * header is unescaped. */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:40"><decl pos:start="17:5" pos:end="17:39"><type pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:19">VC1ParseContext</name> <modifier pos:start="17:21" pos:end="17:21">*</modifier></type><name pos:start="17:22" pos:end="17:24">vpc</name> <init pos:start="17:26" pos:end="17:39">= <expr pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:28">s</name><operator pos:start="17:29" pos:end="17:30">-&gt;</operator><name pos:start="17:31" pos:end="17:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:46"><decl pos:start="19:5" pos:end="19:45"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">pic_found</name> <init pos:start="19:19" pos:end="19:45">= <expr pos:start="19:21" pos:end="19:45"><name pos:start="19:21" pos:end="19:45"><name pos:start="19:21" pos:end="19:23">vpc</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:27">pc</name><operator pos:start="19:28" pos:end="19:28">.</operator><name pos:start="19:29" pos:end="19:45">frame_start_found</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:46"><decl pos:start="21:5" pos:end="21:45"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:25">unesc_buffer</name> <init pos:start="21:27" pos:end="21:45">= <expr pos:start="21:29" pos:end="21:45"><name pos:start="21:29" pos:end="21:45"><name pos:start="21:29" pos:end="21:31">vpc</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:45">unesc_buffer</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:42"><decl pos:start="23:5" pos:end="23:41"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">size_t</name></type> <name pos:start="23:12" pos:end="23:22">unesc_index</name> <init pos:start="23:24" pos:end="23:41">= <expr pos:start="23:26" pos:end="23:41"><name pos:start="23:26" pos:end="23:41"><name pos:start="23:26" pos:end="23:28">vpc</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:41">unesc_index</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:57"><decl pos:start="25:5" pos:end="25:56"><type pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:23">VC1ParseSearchState</name></type> <name pos:start="25:25" pos:end="25:36">search_state</name> <init pos:start="25:38" pos:end="25:56">= <expr pos:start="25:40" pos:end="25:56"><name pos:start="25:40" pos:end="25:56"><name pos:start="25:40" pos:end="25:42">vpc</name><operator pos:start="25:43" pos:end="25:44">-&gt;</operator><name pos:start="25:45" pos:end="25:56">search_state</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:24">start_code_found</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:29"><decl pos:start="29:5" pos:end="29:28"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:12">next</name> <init pos:start="29:14" pos:end="29:28">= <expr pos:start="29:16" pos:end="29:28"><name pos:start="29:16" pos:end="29:28">END_NOT_FOUND</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:31"><decl pos:start="31:5" pos:end="31:30"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:9">i</name> <init pos:start="31:11" pos:end="31:30">= <expr pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:15">vpc</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:30">bytes_to_skip</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="35:5" pos:end="45:5"><if pos:start="35:5" pos:end="45:5">if <condition pos:start="35:8" pos:end="35:35">(<expr pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:17">pic_found</name> <operator pos:start="35:19" pos:end="35:20">&amp;&amp;</operator> <name pos:start="35:22" pos:end="35:29">buf_size</name> <operator pos:start="35:31" pos:end="35:32">==</operator> <literal type="number" pos:start="35:34" pos:end="35:34">0</literal></expr>)</condition> <block pos:start="35:37" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:17">

        <comment type="block" pos:start="37:9" pos:end="37:44">/* EOF considered as end of frame */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:81"><expr pos:start="39:9" pos:end="39:80"><call pos:start="39:9" pos:end="39:80"><name pos:start="39:9" pos:end="39:14">memset</name><argument_list pos:start="39:15" pos:end="39:80">(<argument pos:start="39:16" pos:end="39:41"><expr pos:start="39:16" pos:end="39:41"><name pos:start="39:16" pos:end="39:27">unesc_buffer</name> <operator pos:start="39:29" pos:end="39:29">+</operator> <name pos:start="39:31" pos:end="39:41">unesc_index</name></expr></argument>, <argument pos:start="39:44" pos:end="39:44"><expr pos:start="39:44" pos:end="39:44"><literal type="number" pos:start="39:44" pos:end="39:44">0</literal></expr></argument>, <argument pos:start="39:47" pos:end="39:79"><expr pos:start="39:47" pos:end="39:79"><name pos:start="39:47" pos:end="39:65">UNESCAPED_THRESHOLD</name> <operator pos:start="39:67" pos:end="39:67">-</operator> <name pos:start="39:69" pos:end="39:79">unesc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:64"><expr pos:start="41:9" pos:end="41:63"><call pos:start="41:9" pos:end="41:63"><name pos:start="41:9" pos:end="41:26">vc1_extract_header</name><argument_list pos:start="41:27" pos:end="41:63">(<argument pos:start="41:28" pos:end="41:28"><expr pos:start="41:28" pos:end="41:28"><name pos:start="41:28" pos:end="41:28">s</name></expr></argument>, <argument pos:start="41:31" pos:end="41:35"><expr pos:start="41:31" pos:end="41:35"><name pos:start="41:31" pos:end="41:35">avctx</name></expr></argument>, <argument pos:start="41:38" pos:end="41:49"><expr pos:start="41:38" pos:end="41:49"><name pos:start="41:38" pos:end="41:49">unesc_buffer</name></expr></argument>, <argument pos:start="41:52" pos:end="41:62"><expr pos:start="41:52" pos:end="41:62"><name pos:start="41:52" pos:end="41:62">unesc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:17"><expr pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:12">next</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <while pos:start="47:5" pos:end="197:5">while <condition pos:start="47:11" pos:end="47:24">(<expr pos:start="47:12" pos:end="47:23"><name pos:start="47:12" pos:end="47:12">i</name> <operator pos:start="47:14" pos:end="47:14">&lt;</operator> <name pos:start="47:16" pos:end="47:23">buf_size</name></expr>)</condition> <block pos:start="47:26" pos:end="197:5">{<block_content pos:start="49:9" pos:end="195:9">

        <decl_stmt pos:start="49:9" pos:end="49:18"><decl pos:start="49:9" pos:end="49:17"><type pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:15">uint8_t</name></type> <name pos:start="49:17" pos:end="49:17">b</name></decl>;</decl_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:29"><expr pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:24">start_code_found</name> <operator pos:start="51:26" pos:end="51:26">=</operator> <literal type="number" pos:start="51:28" pos:end="51:28">0</literal></expr>;</expr_stmt>

        <while pos:start="53:9" pos:end="93:9">while <condition pos:start="53:15" pos:end="53:65">(<expr pos:start="53:16" pos:end="53:64"><name pos:start="53:16" pos:end="53:16">i</name> <operator pos:start="53:18" pos:end="53:18">&lt;</operator> <name pos:start="53:20" pos:end="53:27">buf_size</name> <operator pos:start="53:29" pos:end="53:30">&amp;&amp;</operator> <name pos:start="53:32" pos:end="53:42">unesc_index</name> <operator pos:start="53:44" pos:end="53:44">&lt;</operator> <name pos:start="53:46" pos:end="53:64">UNESCAPED_THRESHOLD</name></expr>)</condition> <block pos:start="53:67" pos:end="93:9">{<block_content pos:start="55:13" pos:end="91:13">

            <expr_stmt pos:start="55:13" pos:end="55:25"><expr pos:start="55:13" pos:end="55:24"><name pos:start="55:13" pos:end="55:13">b</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <name pos:start="55:17" pos:end="55:24"><name pos:start="55:17" pos:end="55:19">buf</name><index pos:start="55:20" pos:end="55:24">[<expr pos:start="55:21" pos:end="55:23"><name pos:start="55:21" pos:end="55:21">i</name><operator pos:start="55:22" pos:end="55:23">++</operator></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:44"><expr pos:start="57:13" pos:end="57:43"><name pos:start="57:13" pos:end="57:39"><name pos:start="57:13" pos:end="57:24">unesc_buffer</name><index pos:start="57:25" pos:end="57:39">[<expr pos:start="57:26" pos:end="57:38"><name pos:start="57:26" pos:end="57:36">unesc_index</name><operator pos:start="57:37" pos:end="57:38">++</operator></expr>]</index></name> <operator pos:start="57:41" pos:end="57:41">=</operator> <name pos:start="57:43" pos:end="57:43">b</name></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="91:13"><if pos:start="59:13" pos:end="61:63">if <condition pos:start="59:16" pos:end="59:41">(<expr pos:start="59:17" pos:end="59:40"><name pos:start="59:17" pos:end="59:28">search_state</name> <operator pos:start="59:30" pos:end="59:31">&lt;=</operator> <name pos:start="59:33" pos:end="59:40">ONE_ZERO</name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:63"><block_content pos:start="61:17" pos:end="61:63">

                <expr_stmt pos:start="61:17" pos:end="61:63"><expr pos:start="61:17" pos:end="61:62"><name pos:start="61:17" pos:end="61:28">search_state</name> <operator pos:start="61:30" pos:end="61:30">=</operator> <ternary pos:start="61:32" pos:end="61:62"><condition pos:start="61:32" pos:end="61:34"><expr pos:start="61:32" pos:end="61:32"><name pos:start="61:32" pos:end="61:32">b</name></expr> ?</condition><then pos:start="61:36" pos:end="61:43"> <expr pos:start="61:36" pos:end="61:43"><name pos:start="61:36" pos:end="61:43">NO_MATCH</name></expr> </then><else pos:start="61:45" pos:end="61:62">: <expr pos:start="61:47" pos:end="61:62"><name pos:start="61:47" pos:end="61:58">search_state</name> <operator pos:start="61:60" pos:end="61:60">+</operator> <literal type="number" pos:start="61:62" pos:end="61:62">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="63:13" pos:end="79:13">else if <condition pos:start="63:21" pos:end="63:47">(<expr pos:start="63:22" pos:end="63:46"><name pos:start="63:22" pos:end="63:33">search_state</name> <operator pos:start="63:35" pos:end="63:36">==</operator> <name pos:start="63:38" pos:end="63:46">TWO_ZEROS</name></expr>)</condition> <block pos:start="63:49" pos:end="79:13">{<block_content pos:start="65:17" pos:end="77:17">

                <if_stmt pos:start="65:17" pos:end="77:17"><if pos:start="65:17" pos:end="67:39">if <condition pos:start="65:20" pos:end="65:27">(<expr pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:21">b</name> <operator pos:start="65:23" pos:end="65:24">==</operator> <literal type="number" pos:start="65:26" pos:end="65:26">1</literal></expr>)</condition><block type="pseudo" pos:start="67:21" pos:end="67:39"><block_content pos:start="67:21" pos:end="67:39">

                    <expr_stmt pos:start="67:21" pos:end="67:39"><expr pos:start="67:21" pos:end="67:38"><name pos:start="67:21" pos:end="67:32">search_state</name> <operator pos:start="67:34" pos:end="67:34">=</operator> <name pos:start="67:36" pos:end="67:38">ONE</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="69:17" pos:end="77:17">else if <condition pos:start="69:25" pos:end="69:31">(<expr pos:start="69:26" pos:end="69:30"><name pos:start="69:26" pos:end="69:26">b</name> <operator pos:start="69:28" pos:end="69:28">&gt;</operator> <literal type="number" pos:start="69:30" pos:end="69:30">1</literal></expr>)</condition> <block pos:start="69:33" pos:end="77:17">{<block_content pos:start="71:21" pos:end="75:44">

                    <if_stmt pos:start="71:21" pos:end="73:38"><if pos:start="71:21" pos:end="73:38">if <condition pos:start="71:24" pos:end="71:31">(<expr pos:start="71:25" pos:end="71:30"><name pos:start="71:25" pos:end="71:25">b</name> <operator pos:start="71:27" pos:end="71:28">==</operator> <literal type="number" pos:start="71:30" pos:end="71:30">3</literal></expr>)</condition><block type="pseudo" pos:start="73:25" pos:end="73:38"><block_content pos:start="73:25" pos:end="73:38">

                        <expr_stmt pos:start="73:25" pos:end="73:38"><expr pos:start="73:25" pos:end="73:37"><name pos:start="73:25" pos:end="73:35">unesc_index</name><operator pos:start="73:36" pos:end="73:37">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="73:40" pos:end="73:75">// swallow emulation prevention byte</comment>

                    <expr_stmt pos:start="75:21" pos:end="75:44"><expr pos:start="75:21" pos:end="75:43"><name pos:start="75:21" pos:end="75:32">search_state</name> <operator pos:start="75:34" pos:end="75:34">=</operator> <name pos:start="75:36" pos:end="75:43">NO_MATCH</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if>

            <else pos:start="81:13" pos:end="91:13">else <block pos:start="81:18" pos:end="91:13">{<block_content pos:start="85:17" pos:end="89:22"> <comment type="line" pos:start="81:20" pos:end="81:41">// search_state == ONE</comment>

                <comment type="line" pos:start="83:17" pos:end="83:89">// Header unescaping terminates early due to detection of next start code</comment>

                <expr_stmt pos:start="85:17" pos:end="85:40"><expr pos:start="85:17" pos:end="85:39"><name pos:start="85:17" pos:end="85:28">search_state</name> <operator pos:start="85:30" pos:end="85:30">=</operator> <name pos:start="85:32" pos:end="85:39">NO_MATCH</name></expr>;</expr_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:37"><expr pos:start="87:17" pos:end="87:36"><name pos:start="87:17" pos:end="87:32">start_code_found</name> <operator pos:start="87:34" pos:end="87:34">=</operator> <literal type="number" pos:start="87:36" pos:end="87:36">1</literal></expr>;</expr_stmt>

                <break pos:start="89:17" pos:end="89:22">break;</break>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="95:9" pos:end="113:9"><if pos:start="95:9" pos:end="113:9">if <condition pos:start="95:12" pos:end="99:64">(<expr pos:start="95:13" pos:end="99:63"><operator pos:start="95:13" pos:end="95:13">(</operator><name pos:start="95:14" pos:end="95:21"><name pos:start="95:14" pos:end="95:14">s</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:21">flags</name></name> <operator pos:start="95:23" pos:end="95:23">&amp;</operator> <name pos:start="95:25" pos:end="95:51">PARSER_FLAG_COMPLETE_FRAMES</name><operator pos:start="95:52" pos:end="95:52">)</operator> <operator pos:start="95:54" pos:end="95:55">&amp;&amp;</operator>

                <name pos:start="97:17" pos:end="97:27">unesc_index</name> <operator pos:start="97:29" pos:end="97:30">&gt;=</operator> <name pos:start="97:32" pos:end="97:50">UNESCAPED_THRESHOLD</name> <operator pos:start="97:52" pos:end="97:53">&amp;&amp;</operator>

                <name pos:start="99:17" pos:end="99:36"><name pos:start="99:17" pos:end="99:19">vpc</name><operator pos:start="99:20" pos:end="99:21">-&gt;</operator><name pos:start="99:22" pos:end="99:36">prev_start_code</name></name> <operator pos:start="99:38" pos:end="99:39">==</operator> <operator pos:start="99:41" pos:end="99:41">(</operator><name pos:start="99:42" pos:end="99:55">VC1_CODE_FRAME</name> <operator pos:start="99:57" pos:end="99:57">&amp;</operator> <literal type="number" pos:start="99:59" pos:end="99:62">0xFF</literal><operator pos:start="99:63" pos:end="99:63">)</operator></expr>)</condition>

        <block pos:start="101:9" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:18">

            <comment type="line" pos:start="103:13" pos:end="103:66">// No need to keep scanning the rest of the buffer for</comment>

            <comment type="line" pos:start="105:13" pos:end="105:70">// start codes if we know it contains a complete frame and</comment>

            <comment type="line" pos:start="107:13" pos:end="107:70">// we've already unescaped all we need of the frame header</comment>

            <expr_stmt pos:start="109:13" pos:end="109:68"><expr pos:start="109:13" pos:end="109:67"><call pos:start="109:13" pos:end="109:67"><name pos:start="109:13" pos:end="109:30">vc1_extract_header</name><argument_list pos:start="109:31" pos:end="109:67">(<argument pos:start="109:32" pos:end="109:32"><expr pos:start="109:32" pos:end="109:32"><name pos:start="109:32" pos:end="109:32">s</name></expr></argument>, <argument pos:start="109:35" pos:end="109:39"><expr pos:start="109:35" pos:end="109:39"><name pos:start="109:35" pos:end="109:39">avctx</name></expr></argument>, <argument pos:start="109:42" pos:end="109:53"><expr pos:start="109:42" pos:end="109:53"><name pos:start="109:42" pos:end="109:53">unesc_buffer</name></expr></argument>, <argument pos:start="109:56" pos:end="109:66"><expr pos:start="109:56" pos:end="109:66"><name pos:start="109:56" pos:end="109:66">unesc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="115:9" pos:end="161:9"><if pos:start="115:9" pos:end="161:9">if <condition pos:start="115:12" pos:end="115:68">(<expr pos:start="115:13" pos:end="115:67"><name pos:start="115:13" pos:end="115:23">unesc_index</name> <operator pos:start="115:25" pos:end="115:26">&gt;=</operator> <name pos:start="115:28" pos:end="115:46">UNESCAPED_THRESHOLD</name> <operator pos:start="115:48" pos:end="115:49">&amp;&amp;</operator> <operator pos:start="115:51" pos:end="115:51">!</operator><name pos:start="115:52" pos:end="115:67">start_code_found</name></expr>)</condition> <block pos:start="115:70" pos:end="161:9">{<block_content pos:start="117:13" pos:end="159:13">

            <while pos:start="117:13" pos:end="159:13">while <condition pos:start="117:19" pos:end="117:32">(<expr pos:start="117:20" pos:end="117:31"><name pos:start="117:20" pos:end="117:20">i</name> <operator pos:start="117:22" pos:end="117:22">&lt;</operator> <name pos:start="117:24" pos:end="117:31">buf_size</name></expr>)</condition> <block pos:start="117:34" pos:end="159:13">{<block_content pos:start="119:17" pos:end="157:17">

                <if_stmt pos:start="119:17" pos:end="157:17"><if pos:start="119:17" pos:end="131:17">if <condition pos:start="119:20" pos:end="119:45">(<expr pos:start="119:21" pos:end="119:44"><name pos:start="119:21" pos:end="119:32">search_state</name> <operator pos:start="119:34" pos:end="119:35">==</operator> <name pos:start="119:37" pos:end="119:44">NO_MATCH</name></expr>)</condition> <block pos:start="119:47" pos:end="131:17">{<block_content pos:start="121:21" pos:end="129:24">

                    <expr_stmt pos:start="121:21" pos:end="121:87"><expr pos:start="121:21" pos:end="121:86"><name pos:start="121:21" pos:end="121:21">i</name> <operator pos:start="121:23" pos:end="121:24">+=</operator> <call pos:start="121:26" pos:end="121:86"><name pos:start="121:26" pos:end="121:63"><name pos:start="121:26" pos:end="121:28">vpc</name><operator pos:start="121:29" pos:end="121:30">-&gt;</operator><name pos:start="121:31" pos:end="121:31">v</name><operator pos:start="121:32" pos:end="121:32">.</operator><name pos:start="121:33" pos:end="121:38">vc1dsp</name><operator pos:start="121:39" pos:end="121:39">.</operator><name pos:start="121:40" pos:end="121:63">startcode_find_candidate</name></name><argument_list pos:start="121:64" pos:end="121:86">(<argument pos:start="121:65" pos:end="121:71"><expr pos:start="121:65" pos:end="121:71"><name pos:start="121:65" pos:end="121:67">buf</name> <operator pos:start="121:69" pos:end="121:69">+</operator> <name pos:start="121:71" pos:end="121:71">i</name></expr></argument>, <argument pos:start="121:74" pos:end="121:85"><expr pos:start="121:74" pos:end="121:85"><name pos:start="121:74" pos:end="121:81">buf_size</name> <operator pos:start="121:83" pos:end="121:83">-</operator> <name pos:start="121:85" pos:end="121:85">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="123:21" pos:end="127:21"><if pos:start="123:21" pos:end="127:21">if <condition pos:start="123:24" pos:end="123:37">(<expr pos:start="123:25" pos:end="123:36"><name pos:start="123:25" pos:end="123:25">i</name> <operator pos:start="123:27" pos:end="123:27">&lt;</operator> <name pos:start="123:29" pos:end="123:36">buf_size</name></expr>)</condition> <block pos:start="123:39" pos:end="127:21">{<block_content pos:start="125:25" pos:end="125:48">

                        <expr_stmt pos:start="125:25" pos:end="125:48"><expr pos:start="125:25" pos:end="125:47"><name pos:start="125:25" pos:end="125:36">search_state</name> <operator pos:start="125:38" pos:end="125:38">=</operator> <name pos:start="125:40" pos:end="125:47">ONE_ZERO</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:24"><expr pos:start="129:21" pos:end="129:23"><name pos:start="129:21" pos:end="129:21">i</name><operator pos:start="129:22" pos:end="129:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="131:19" pos:end="157:17">else <block pos:start="131:24" pos:end="157:17">{<block_content pos:start="133:21" pos:end="155:21">

                    <expr_stmt pos:start="133:21" pos:end="133:33"><expr pos:start="133:21" pos:end="133:32"><name pos:start="133:21" pos:end="133:21">b</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <name pos:start="133:25" pos:end="133:32"><name pos:start="133:25" pos:end="133:27">buf</name><index pos:start="133:28" pos:end="133:32">[<expr pos:start="133:29" pos:end="133:31"><name pos:start="133:29" pos:end="133:29">i</name><operator pos:start="133:30" pos:end="133:31">++</operator></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="135:21" pos:end="155:21"><if pos:start="135:21" pos:end="137:64">if <condition pos:start="135:24" pos:end="135:49">(<expr pos:start="135:25" pos:end="135:48"><name pos:start="135:25" pos:end="135:36">search_state</name> <operator pos:start="135:38" pos:end="135:39">==</operator> <name pos:start="135:41" pos:end="135:48">ONE_ZERO</name></expr>)</condition><block type="pseudo" pos:start="137:25" pos:end="137:64"><block_content pos:start="137:25" pos:end="137:64">

                        <expr_stmt pos:start="137:25" pos:end="137:64"><expr pos:start="137:25" pos:end="137:63"><name pos:start="137:25" pos:end="137:36">search_state</name> <operator pos:start="137:38" pos:end="137:38">=</operator> <ternary pos:start="137:40" pos:end="137:63"><condition pos:start="137:40" pos:end="137:42"><expr pos:start="137:40" pos:end="137:40"><name pos:start="137:40" pos:end="137:40">b</name></expr> ?</condition><then pos:start="137:44" pos:end="137:51"> <expr pos:start="137:44" pos:end="137:51"><name pos:start="137:44" pos:end="137:51">NO_MATCH</name></expr> </then><else pos:start="137:53" pos:end="137:63">: <expr pos:start="137:55" pos:end="137:63"><name pos:start="137:55" pos:end="137:63">TWO_ZEROS</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="139:21" pos:end="145:21">else if <condition pos:start="139:29" pos:end="139:55">(<expr pos:start="139:30" pos:end="139:54"><name pos:start="139:30" pos:end="139:41">search_state</name> <operator pos:start="139:43" pos:end="139:44">==</operator> <name pos:start="139:46" pos:end="139:54">TWO_ZEROS</name></expr>)</condition> <block pos:start="139:57" pos:end="145:21">{<block_content pos:start="141:25" pos:end="143:67">

                        <if_stmt pos:start="141:25" pos:end="143:67"><if pos:start="141:25" pos:end="143:67">if <condition pos:start="141:28" pos:end="141:35">(<expr pos:start="141:29" pos:end="141:34"><name pos:start="141:29" pos:end="141:29">b</name> <operator pos:start="141:31" pos:end="141:32">&gt;=</operator> <literal type="number" pos:start="141:34" pos:end="141:34">1</literal></expr>)</condition><block type="pseudo" pos:start="143:29" pos:end="143:67"><block_content pos:start="143:29" pos:end="143:67">

                            <expr_stmt pos:start="143:29" pos:end="143:67"><expr pos:start="143:29" pos:end="143:66"><name pos:start="143:29" pos:end="143:40">search_state</name> <operator pos:start="143:42" pos:end="143:42">=</operator> <ternary pos:start="143:44" pos:end="143:66"><condition pos:start="143:44" pos:end="143:51"><expr pos:start="143:44" pos:end="143:49"><name pos:start="143:44" pos:end="143:44">b</name> <operator pos:start="143:46" pos:end="143:47">==</operator> <literal type="number" pos:start="143:49" pos:end="143:49">1</literal></expr> ?</condition><then pos:start="143:53" pos:end="143:55"> <expr pos:start="143:53" pos:end="143:55"><name pos:start="143:53" pos:end="143:55">ONE</name></expr> </then><else pos:start="143:57" pos:end="143:66">: <expr pos:start="143:59" pos:end="143:66"><name pos:start="143:59" pos:end="143:66">NO_MATCH</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if>

                    <else pos:start="147:21" pos:end="155:21">else <block pos:start="147:26" pos:end="155:21">{<block_content pos:start="149:25" pos:end="153:30"> <comment type="line" pos:start="147:28" pos:end="147:49">// search_state == ONE</comment>

                        <expr_stmt pos:start="149:25" pos:end="149:48"><expr pos:start="149:25" pos:end="149:47"><name pos:start="149:25" pos:end="149:36">search_state</name> <operator pos:start="149:38" pos:end="149:38">=</operator> <name pos:start="149:40" pos:end="149:47">NO_MATCH</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="151:25" pos:end="151:45"><expr pos:start="151:25" pos:end="151:44"><name pos:start="151:25" pos:end="151:40">start_code_found</name> <operator pos:start="151:42" pos:end="151:42">=</operator> <literal type="number" pos:start="151:44" pos:end="151:44">1</literal></expr>;</expr_stmt>

                        <break pos:start="153:25" pos:end="153:30">break;</break>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="163:9" pos:end="195:9"><if pos:start="163:9" pos:end="195:9">if <condition pos:start="163:12" pos:end="163:29">(<expr pos:start="163:13" pos:end="163:28"><name pos:start="163:13" pos:end="163:28">start_code_found</name></expr>)</condition> <block pos:start="163:31" pos:end="195:9">{<block_content pos:start="165:13" pos:end="193:13">

            <expr_stmt pos:start="165:13" pos:end="165:68"><expr pos:start="165:13" pos:end="165:67"><call pos:start="165:13" pos:end="165:67"><name pos:start="165:13" pos:end="165:30">vc1_extract_header</name><argument_list pos:start="165:31" pos:end="165:67">(<argument pos:start="165:32" pos:end="165:32"><expr pos:start="165:32" pos:end="165:32"><name pos:start="165:32" pos:end="165:32">s</name></expr></argument>, <argument pos:start="165:35" pos:end="165:39"><expr pos:start="165:35" pos:end="165:39"><name pos:start="165:35" pos:end="165:39">avctx</name></expr></argument>, <argument pos:start="165:42" pos:end="165:53"><expr pos:start="165:42" pos:end="165:53"><name pos:start="165:42" pos:end="165:53">unesc_buffer</name></expr></argument>, <argument pos:start="165:56" pos:end="165:66"><expr pos:start="165:56" pos:end="165:66"><name pos:start="165:56" pos:end="165:66">unesc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="169:13" pos:end="169:37"><expr pos:start="169:13" pos:end="169:36"><name pos:start="169:13" pos:end="169:32"><name pos:start="169:13" pos:end="169:15">vpc</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:32">prev_start_code</name></name> <operator pos:start="169:34" pos:end="169:34">=</operator> <name pos:start="169:36" pos:end="169:36">b</name></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:28"><expr pos:start="171:13" pos:end="171:27"><name pos:start="171:13" pos:end="171:23">unesc_index</name> <operator pos:start="171:25" pos:end="171:25">=</operator> <literal type="number" pos:start="171:27" pos:end="171:27">0</literal></expr>;</expr_stmt>



            <if_stmt pos:start="175:13" pos:end="193:13"><if pos:start="175:13" pos:end="193:13">if <condition pos:start="175:16" pos:end="175:58">(<expr pos:start="175:17" pos:end="175:57"><operator pos:start="175:17" pos:end="175:17">!</operator><operator pos:start="175:18" pos:end="175:18">(</operator><name pos:start="175:19" pos:end="175:26"><name pos:start="175:19" pos:end="175:19">s</name><operator pos:start="175:20" pos:end="175:21">-&gt;</operator><name pos:start="175:22" pos:end="175:26">flags</name></name> <operator pos:start="175:28" pos:end="175:28">&amp;</operator> <name pos:start="175:30" pos:end="175:56">PARSER_FLAG_COMPLETE_FRAMES</name><operator pos:start="175:57" pos:end="175:57">)</operator></expr>)</condition> <block pos:start="175:60" pos:end="193:13">{<block_content pos:start="177:17" pos:end="191:17">

                <if_stmt pos:start="177:17" pos:end="191:17"><if pos:start="177:17" pos:end="181:17">if <condition pos:start="177:20" pos:end="177:97">(<expr pos:start="177:21" pos:end="177:96"><operator pos:start="177:21" pos:end="177:21">!</operator><name pos:start="177:22" pos:end="177:30">pic_found</name> <operator pos:start="177:32" pos:end="177:33">&amp;&amp;</operator> <operator pos:start="177:35" pos:end="177:35">(</operator><name pos:start="177:36" pos:end="177:36">b</name> <operator pos:start="177:38" pos:end="177:39">==</operator> <operator pos:start="177:41" pos:end="177:41">(</operator><name pos:start="177:42" pos:end="177:55">VC1_CODE_FRAME</name> <operator pos:start="177:57" pos:end="177:57">&amp;</operator> <literal type="number" pos:start="177:59" pos:end="177:62">0xFF</literal><operator pos:start="177:63" pos:end="177:63">)</operator> <operator pos:start="177:65" pos:end="177:66">||</operator> <name pos:start="177:68" pos:end="177:68">b</name> <operator pos:start="177:70" pos:end="177:71">==</operator> <operator pos:start="177:73" pos:end="177:73">(</operator><name pos:start="177:74" pos:end="177:87">VC1_CODE_FIELD</name> <operator pos:start="177:89" pos:end="177:89">&amp;</operator> <literal type="number" pos:start="177:91" pos:end="177:94">0xFF</literal><operator pos:start="177:95" pos:end="177:95">)</operator><operator pos:start="177:96" pos:end="177:96">)</operator></expr>)</condition> <block pos:start="177:99" pos:end="181:17">{<block_content pos:start="179:21" pos:end="179:34">

                    <expr_stmt pos:start="179:21" pos:end="179:34"><expr pos:start="179:21" pos:end="179:33"><name pos:start="179:21" pos:end="179:29">pic_found</name> <operator pos:start="179:31" pos:end="179:31">=</operator> <literal type="number" pos:start="179:33" pos:end="179:33">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if>

                <if type="elseif" pos:start="183:17" pos:end="191:17">else if <condition pos:start="183:25" pos:end="183:99">(<expr pos:start="183:26" pos:end="183:98"><name pos:start="183:26" pos:end="183:34">pic_found</name> <operator pos:start="183:36" pos:end="183:37">&amp;&amp;</operator> <name pos:start="183:39" pos:end="183:39">b</name> <operator pos:start="183:41" pos:end="183:42">!=</operator> <operator pos:start="183:44" pos:end="183:44">(</operator><name pos:start="183:45" pos:end="183:58">VC1_CODE_FIELD</name> <operator pos:start="183:60" pos:end="183:60">&amp;</operator> <literal type="number" pos:start="183:62" pos:end="183:65">0xFF</literal><operator pos:start="183:66" pos:end="183:66">)</operator> <operator pos:start="183:68" pos:end="183:69">&amp;&amp;</operator> <name pos:start="183:71" pos:end="183:71">b</name> <operator pos:start="183:73" pos:end="183:74">!=</operator> <operator pos:start="183:76" pos:end="183:76">(</operator><name pos:start="183:77" pos:end="183:90">VC1_CODE_SLICE</name> <operator pos:start="183:92" pos:end="183:92">&amp;</operator> <literal type="number" pos:start="183:94" pos:end="183:97">0xFF</literal><operator pos:start="183:98" pos:end="183:98">)</operator></expr>)</condition> <block pos:start="183:101" pos:end="191:17">{<block_content pos:start="185:21" pos:end="189:26">

                    <expr_stmt pos:start="185:21" pos:end="185:33"><expr pos:start="185:21" pos:end="185:32"><name pos:start="185:21" pos:end="185:24">next</name> <operator pos:start="185:26" pos:end="185:26">=</operator> <name pos:start="185:28" pos:end="185:28">i</name> <operator pos:start="185:30" pos:end="185:30">-</operator> <literal type="number" pos:start="185:32" pos:end="185:32">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="187:21" pos:end="187:61"><expr pos:start="187:21" pos:end="187:60"><name pos:start="187:21" pos:end="187:29">pic_found</name> <operator pos:start="187:31" pos:end="187:31">=</operator> <name pos:start="187:33" pos:end="187:33">b</name> <operator pos:start="187:35" pos:end="187:36">==</operator> <operator pos:start="187:38" pos:end="187:38">(</operator><name pos:start="187:39" pos:end="187:52">VC1_CODE_FRAME</name> <operator pos:start="187:54" pos:end="187:54">&amp;</operator> <literal type="number" pos:start="187:56" pos:end="187:59">0xFF</literal><operator pos:start="187:60" pos:end="187:60">)</operator></expr>;</expr_stmt>

                    <break pos:start="189:21" pos:end="189:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="201:5" pos:end="201:42"><expr pos:start="201:5" pos:end="201:41"><name pos:start="201:5" pos:end="201:29"><name pos:start="201:5" pos:end="201:7">vpc</name><operator pos:start="201:8" pos:end="201:9">-&gt;</operator><name pos:start="201:10" pos:end="201:11">pc</name><operator pos:start="201:12" pos:end="201:12">.</operator><name pos:start="201:13" pos:end="201:29">frame_start_found</name></name> <operator pos:start="201:31" pos:end="201:31">=</operator> <name pos:start="201:33" pos:end="201:41">pic_found</name></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:35"><expr pos:start="203:5" pos:end="203:34"><name pos:start="203:5" pos:end="203:20"><name pos:start="203:5" pos:end="203:7">vpc</name><operator pos:start="203:8" pos:end="203:9">-&gt;</operator><name pos:start="203:10" pos:end="203:20">unesc_index</name></name> <operator pos:start="203:22" pos:end="203:22">=</operator> <name pos:start="203:24" pos:end="203:34">unesc_index</name></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:37"><expr pos:start="205:5" pos:end="205:36"><name pos:start="205:5" pos:end="205:21"><name pos:start="205:5" pos:end="205:7">vpc</name><operator pos:start="205:8" pos:end="205:9">-&gt;</operator><name pos:start="205:10" pos:end="205:21">search_state</name></name> <operator pos:start="205:23" pos:end="205:23">=</operator> <name pos:start="205:25" pos:end="205:36">search_state</name></expr>;</expr_stmt>



    <if_stmt pos:start="209:5" pos:end="227:5"><if pos:start="209:5" pos:end="213:5">if <condition pos:start="209:8" pos:end="209:47">(<expr pos:start="209:9" pos:end="209:46"><name pos:start="209:9" pos:end="209:16"><name pos:start="209:9" pos:end="209:9">s</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:16">flags</name></name> <operator pos:start="209:18" pos:end="209:18">&amp;</operator> <name pos:start="209:20" pos:end="209:46">PARSER_FLAG_COMPLETE_FRAMES</name></expr>)</condition> <block pos:start="209:49" pos:end="213:5">{<block_content pos:start="211:9" pos:end="211:24">

        <expr_stmt pos:start="211:9" pos:end="211:24"><expr pos:start="211:9" pos:end="211:23"><name pos:start="211:9" pos:end="211:12">next</name> <operator pos:start="211:14" pos:end="211:14">=</operator> <name pos:start="211:16" pos:end="211:23">buf_size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="213:7" pos:end="227:5">else <block pos:start="213:12" pos:end="227:5">{<block_content pos:start="215:9" pos:end="225:9">

        <if_stmt pos:start="215:9" pos:end="225:9"><if pos:start="215:9" pos:end="225:9">if <condition pos:start="215:12" pos:end="215:66">(<expr pos:start="215:13" pos:end="215:65"><call pos:start="215:13" pos:end="215:61"><name pos:start="215:13" pos:end="215:28">ff_combine_frame</name><argument_list pos:start="215:29" pos:end="215:61">(<argument pos:start="215:30" pos:end="215:37"><expr pos:start="215:30" pos:end="215:37"><operator pos:start="215:30" pos:end="215:30">&amp;</operator><name pos:start="215:31" pos:end="215:37"><name pos:start="215:31" pos:end="215:33">vpc</name><operator pos:start="215:34" pos:end="215:35">-&gt;</operator><name pos:start="215:36" pos:end="215:37">pc</name></name></expr></argument>, <argument pos:start="215:40" pos:end="215:43"><expr pos:start="215:40" pos:end="215:43"><name pos:start="215:40" pos:end="215:43">next</name></expr></argument>, <argument pos:start="215:46" pos:end="215:49"><expr pos:start="215:46" pos:end="215:49"><operator pos:start="215:46" pos:end="215:46">&amp;</operator><name pos:start="215:47" pos:end="215:49">buf</name></expr></argument>, <argument pos:start="215:52" pos:end="215:60"><expr pos:start="215:52" pos:end="215:60"><operator pos:start="215:52" pos:end="215:52">&amp;</operator><name pos:start="215:53" pos:end="215:60">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="215:63" pos:end="215:63">&lt;</operator> <literal type="number" pos:start="215:65" pos:end="215:65">0</literal></expr>)</condition> <block pos:start="215:68" pos:end="225:9">{<block_content pos:start="217:13" pos:end="223:28">

            <expr_stmt pos:start="217:13" pos:end="217:35"><expr pos:start="217:13" pos:end="217:34"><name pos:start="217:13" pos:end="217:30"><name pos:start="217:13" pos:end="217:15">vpc</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:30">bytes_to_skip</name></name> <operator pos:start="217:32" pos:end="217:32">=</operator> <literal type="number" pos:start="217:34" pos:end="217:34">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:28"><expr pos:start="219:13" pos:end="219:27"><operator pos:start="219:13" pos:end="219:13">*</operator><name pos:start="219:14" pos:end="219:20">poutbuf</name> <operator pos:start="219:22" pos:end="219:22">=</operator> <name pos:start="219:24" pos:end="219:27">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:30"><expr pos:start="221:13" pos:end="221:29"><operator pos:start="221:13" pos:end="221:13">*</operator><name pos:start="221:14" pos:end="221:25">poutbuf_size</name> <operator pos:start="221:27" pos:end="221:27">=</operator> <literal type="number" pos:start="221:29" pos:end="221:29">0</literal></expr>;</expr_stmt>

            <return pos:start="223:13" pos:end="223:28">return <expr pos:start="223:20" pos:end="223:27"><name pos:start="223:20" pos:end="223:27">buf_size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="231:5" pos:end="243:56">/* If we return with a valid pointer to a combined frame buffer

     * then on the next call then we'll have been unhelpfully rewound

     * by up to 4 bytes (depending upon whether the start code

     * overlapped the input buffer, and if so by how much). We don't

     * want this: it will either cause spurious second detections of

     * the start code we've already seen, or cause extra bytes to be

     * inserted at the start of the unescaped buffer. */</comment>

    <expr_stmt pos:start="245:5" pos:end="245:27"><expr pos:start="245:5" pos:end="245:26"><name pos:start="245:5" pos:end="245:22"><name pos:start="245:5" pos:end="245:7">vpc</name><operator pos:start="245:8" pos:end="245:9">-&gt;</operator><name pos:start="245:10" pos:end="245:22">bytes_to_skip</name></name> <operator pos:start="245:24" pos:end="245:24">=</operator> <literal type="number" pos:start="245:26" pos:end="245:26">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="247:5" pos:end="249:35"><if pos:start="247:5" pos:end="249:35">if <condition pos:start="247:8" pos:end="247:37">(<expr pos:start="247:9" pos:end="247:36"><name pos:start="247:9" pos:end="247:12">next</name> <operator pos:start="247:14" pos:end="247:14">&lt;</operator> <literal type="number" pos:start="247:16" pos:end="247:16">0</literal> <operator pos:start="247:18" pos:end="247:19">&amp;&amp;</operator> <name pos:start="247:21" pos:end="247:36">start_code_found</name></expr>)</condition><block type="pseudo" pos:start="249:9" pos:end="249:35"><block_content pos:start="249:9" pos:end="249:35">

        <expr_stmt pos:start="249:9" pos:end="249:35"><expr pos:start="249:9" pos:end="249:34"><name pos:start="249:9" pos:end="249:26"><name pos:start="249:9" pos:end="249:11">vpc</name><operator pos:start="249:12" pos:end="249:13">-&gt;</operator><name pos:start="249:14" pos:end="249:26">bytes_to_skip</name></name> <operator pos:start="249:28" pos:end="249:29">+=</operator> <name pos:start="249:31" pos:end="249:34">next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:19"><expr pos:start="253:5" pos:end="253:18"><operator pos:start="253:5" pos:end="253:5">*</operator><name pos:start="253:6" pos:end="253:12">poutbuf</name> <operator pos:start="253:14" pos:end="253:14">=</operator> <name pos:start="253:16" pos:end="253:18">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:29"><expr pos:start="255:5" pos:end="255:28"><operator pos:start="255:5" pos:end="255:5">*</operator><name pos:start="255:6" pos:end="255:17">poutbuf_size</name> <operator pos:start="255:19" pos:end="255:19">=</operator> <name pos:start="255:21" pos:end="255:28">buf_size</name></expr>;</expr_stmt>

    <return pos:start="257:5" pos:end="257:16">return <expr pos:start="257:12" pos:end="257:15"><name pos:start="257:12" pos:end="257:15">next</name></expr>;</return>

</block_content>}</block></function>
</unit>
