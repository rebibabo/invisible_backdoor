<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24233.c" pos:tabs="8"><function pos:start="1:1" pos:end="503:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">disas_neon_ls_insn</name><parameter_list pos:start="1:30" pos:end="1:77">(<parameter pos:start="1:31" pos:end="1:44"><decl pos:start="1:31" pos:end="1:44"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:38">CPUState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type> <name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:61"><decl pos:start="1:47" pos:end="1:61"><type pos:start="1:47" pos:end="1:61"><name pos:start="1:47" pos:end="1:58">DisasContext</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">s</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:76"><decl pos:start="1:64" pos:end="1:76"><type pos:start="1:64" pos:end="1:76"><name pos:start="1:64" pos:end="1:71">uint32_t</name></type> <name pos:start="1:73" pos:end="1:76">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="503:1">{<block_content pos:start="5:5" pos:end="501:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">rd</name></decl>, <decl pos:start="5:13" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:14">rn</name></decl>, <decl pos:start="5:17" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:18">rm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:11"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">nregs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">interleave</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">spacing</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">stride</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:13"><decl pos:start="21:5" pos:end="21:12"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:12">pass</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:13"><decl pos:start="23:5" pos:end="23:12"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">load</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:10"><decl pos:start="27:5" pos:end="27:9"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:14"><decl pos:start="29:5" pos:end="29:13"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">TCGv</name></type> <name pos:start="29:10" pos:end="29:13">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:13"><decl pos:start="31:5" pos:end="31:12"><type pos:start="31:5" pos:end="31:8"><name pos:start="31:5" pos:end="31:8">TCGv</name></type> <name pos:start="31:10" pos:end="31:12">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:14"><decl pos:start="33:5" pos:end="33:13"><type pos:start="33:5" pos:end="33:8"><name pos:start="33:5" pos:end="33:8">TCGv</name></type> <name pos:start="33:10" pos:end="33:13">tmp2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:19"><decl pos:start="35:5" pos:end="35:18"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">TCGv_i64</name></type> <name pos:start="35:14" pos:end="35:18">tmp64</name></decl>;</decl_stmt>



    <if_stmt pos:start="39:5" pos:end="41:15"><if pos:start="39:5" pos:end="41:15">if <condition pos:start="39:8" pos:end="39:24">(<expr pos:start="39:9" pos:end="39:23"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:23"><name pos:start="39:10" pos:end="39:10">s</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:23">vfp_enabled</name></name></expr>)</condition><block type="pseudo" pos:start="41:7" pos:end="41:15"><block_content pos:start="41:7" pos:end="41:15">

      <return pos:start="41:7" pos:end="41:15">return <expr pos:start="41:14" pos:end="41:14"><literal type="number" pos:start="41:14" pos:end="41:14">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><call pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:14">VFP_DREG_D</name><argument_list pos:start="43:15" pos:end="43:24">(<argument pos:start="43:16" pos:end="43:17"><expr pos:start="43:16" pos:end="43:17"><name pos:start="43:16" pos:end="43:17">rd</name></expr></argument>, <argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:6">rn</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <operator pos:start="45:10" pos:end="45:10">(</operator><name pos:start="45:11" pos:end="45:14">insn</name> <operator pos:start="45:16" pos:end="45:17">&gt;&gt;</operator> <literal type="number" pos:start="45:19" pos:end="45:20">16</literal><operator pos:start="45:21" pos:end="45:21">)</operator> <operator pos:start="45:23" pos:end="45:23">&amp;</operator> <literal type="number" pos:start="45:25" pos:end="45:27">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:20"><expr pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:6">rm</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <name pos:start="47:10" pos:end="47:13">insn</name> <operator pos:start="47:15" pos:end="47:15">&amp;</operator> <literal type="number" pos:start="47:17" pos:end="47:19">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:35"><expr pos:start="49:5" pos:end="49:34"><name pos:start="49:5" pos:end="49:8">load</name> <operator pos:start="49:10" pos:end="49:10">=</operator> <operator pos:start="49:12" pos:end="49:12">(</operator><name pos:start="49:13" pos:end="49:16">insn</name> <operator pos:start="49:18" pos:end="49:18">&amp;</operator> <operator pos:start="49:20" pos:end="49:20">(</operator><literal type="number" pos:start="49:21" pos:end="49:21">1</literal> <operator pos:start="49:23" pos:end="49:24">&lt;&lt;</operator> <literal type="number" pos:start="49:26" pos:end="49:27">21</literal><operator pos:start="49:28" pos:end="49:28">)</operator><operator pos:start="49:29" pos:end="49:29">)</operator> <operator pos:start="49:31" pos:end="49:32">!=</operator> <literal type="number" pos:start="49:34" pos:end="49:34">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:8">addr</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <call pos:start="51:12" pos:end="51:29"><name pos:start="51:12" pos:end="51:27">tcg_temp_new_i32</name><argument_list pos:start="51:28" pos:end="51:29">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="469:5"><if pos:start="53:5" pos:end="247:5">if <condition pos:start="53:8" pos:end="53:32">(<expr pos:start="53:9" pos:end="53:31"><operator pos:start="53:9" pos:end="53:9">(</operator><name pos:start="53:10" pos:end="53:13">insn</name> <operator pos:start="53:15" pos:end="53:15">&amp;</operator> <operator pos:start="53:17" pos:end="53:17">(</operator><literal type="number" pos:start="53:18" pos:end="53:18">1</literal> <operator pos:start="53:20" pos:end="53:21">&lt;&lt;</operator> <literal type="number" pos:start="53:23" pos:end="53:24">23</literal><operator pos:start="53:25" pos:end="53:25">)</operator><operator pos:start="53:26" pos:end="53:26">)</operator> <operator pos:start="53:28" pos:end="53:29">==</operator> <literal type="number" pos:start="53:31" pos:end="53:31">0</literal></expr>)</condition> <block pos:start="53:34" pos:end="247:5">{<block_content pos:start="57:9" pos:end="245:27">

        <comment type="block" pos:start="55:9" pos:end="55:39">/* Load store all elements.  */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:31"><expr pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:10">op</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <operator pos:start="57:14" pos:end="57:14">(</operator><name pos:start="57:15" pos:end="57:18">insn</name> <operator pos:start="57:20" pos:end="57:21">&gt;&gt;</operator> <literal type="number" pos:start="57:23" pos:end="57:23">8</literal><operator pos:start="57:24" pos:end="57:24">)</operator> <operator pos:start="57:26" pos:end="57:26">&amp;</operator> <literal type="number" pos:start="57:28" pos:end="57:30">0xf</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:31"><expr pos:start="59:9" pos:end="59:30"><name pos:start="59:9" pos:end="59:12">size</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <operator pos:start="59:16" pos:end="59:16">(</operator><name pos:start="59:17" pos:end="59:20">insn</name> <operator pos:start="59:22" pos:end="59:23">&gt;&gt;</operator> <literal type="number" pos:start="59:25" pos:end="59:25">6</literal><operator pos:start="59:26" pos:end="59:26">)</operator> <operator pos:start="59:28" pos:end="59:28">&amp;</operator> <literal type="number" pos:start="59:30" pos:end="59:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="63:21"><if pos:start="61:9" pos:end="63:21">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:14">op</name> <operator pos:start="61:16" pos:end="61:16">&gt;</operator> <literal type="number" pos:start="61:18" pos:end="61:19">10</literal></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:21"><block_content pos:start="63:13" pos:end="63:21">

            <return pos:start="63:13" pos:end="63:21">return <expr pos:start="63:20" pos:end="63:20"><literal type="number" pos:start="63:20" pos:end="63:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:47"><expr pos:start="65:9" pos:end="65:46"><name pos:start="65:9" pos:end="65:13">nregs</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:40"><name pos:start="65:17" pos:end="65:36">neon_ls_element_type</name><index pos:start="65:37" pos:end="65:40">[<expr pos:start="65:38" pos:end="65:39"><name pos:start="65:38" pos:end="65:39">op</name></expr>]</index></name><operator pos:start="65:41" pos:end="65:41">.</operator><name pos:start="65:42" pos:end="65:46">nregs</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:57"><expr pos:start="67:9" pos:end="67:56"><name pos:start="67:9" pos:end="67:18">interleave</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <name pos:start="67:22" pos:end="67:45"><name pos:start="67:22" pos:end="67:41">neon_ls_element_type</name><index pos:start="67:42" pos:end="67:45">[<expr pos:start="67:43" pos:end="67:44"><name pos:start="67:43" pos:end="67:44">op</name></expr>]</index></name><operator pos:start="67:46" pos:end="67:46">.</operator><name pos:start="67:47" pos:end="67:56">interleave</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:51"><expr pos:start="69:9" pos:end="69:50"><name pos:start="69:9" pos:end="69:15">spacing</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:42"><name pos:start="69:19" pos:end="69:38">neon_ls_element_type</name><index pos:start="69:39" pos:end="69:42">[<expr pos:start="69:40" pos:end="69:41"><name pos:start="69:40" pos:end="69:41">op</name></expr>]</index></name><operator pos:start="69:43" pos:end="69:43">.</operator><name pos:start="69:44" pos:end="69:50">spacing</name></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="73:21"><if pos:start="71:9" pos:end="73:21">if <condition pos:start="71:12" pos:end="71:53">(<expr pos:start="71:13" pos:end="71:52"><name pos:start="71:13" pos:end="71:16">size</name> <operator pos:start="71:18" pos:end="71:19">==</operator> <literal type="number" pos:start="71:21" pos:end="71:21">3</literal> <operator pos:start="71:23" pos:end="71:24">&amp;&amp;</operator> <operator pos:start="71:26" pos:end="71:26">(</operator><name pos:start="71:27" pos:end="71:36">interleave</name> <operator pos:start="71:38" pos:end="71:38">|</operator> <name pos:start="71:40" pos:end="71:46">spacing</name><operator pos:start="71:47" pos:end="71:47">)</operator> <operator pos:start="71:49" pos:end="71:50">!=</operator> <literal type="number" pos:start="71:52" pos:end="71:52">1</literal></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:21"><block_content pos:start="73:13" pos:end="73:21">

            <return pos:start="73:13" pos:end="73:21">return <expr pos:start="73:20" pos:end="73:20"><literal type="number" pos:start="73:20" pos:end="73:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:34"><expr pos:start="75:9" pos:end="75:33"><call pos:start="75:9" pos:end="75:33"><name pos:start="75:9" pos:end="75:20">load_reg_var</name><argument_list pos:start="75:21" pos:end="75:33">(<argument pos:start="75:22" pos:end="75:22"><expr pos:start="75:22" pos:end="75:22"><name pos:start="75:22" pos:end="75:22">s</name></expr></argument>, <argument pos:start="75:25" pos:end="75:28"><expr pos:start="75:25" pos:end="75:28"><name pos:start="75:25" pos:end="75:28">addr</name></expr></argument>, <argument pos:start="75:31" pos:end="75:32"><expr pos:start="75:31" pos:end="75:32"><name pos:start="75:31" pos:end="75:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:42"><expr pos:start="77:9" pos:end="77:41"><name pos:start="77:9" pos:end="77:14">stride</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <operator pos:start="77:18" pos:end="77:18">(</operator><literal type="number" pos:start="77:19" pos:end="77:19">1</literal> <operator pos:start="77:21" pos:end="77:22">&lt;&lt;</operator> <name pos:start="77:24" pos:end="77:27">size</name><operator pos:start="77:28" pos:end="77:28">)</operator> <operator pos:start="77:30" pos:end="77:30">*</operator> <name pos:start="77:32" pos:end="77:41">interleave</name></expr>;</expr_stmt>

        <for pos:start="79:9" pos:end="243:9">for <control pos:start="79:13" pos:end="79:41">(<init pos:start="79:14" pos:end="79:21"><expr pos:start="79:14" pos:end="79:20"><name pos:start="79:14" pos:end="79:16">reg</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <literal type="number" pos:start="79:20" pos:end="79:20">0</literal></expr>;</init> <condition pos:start="79:23" pos:end="79:34"><expr pos:start="79:23" pos:end="79:33"><name pos:start="79:23" pos:end="79:25">reg</name> <operator pos:start="79:27" pos:end="79:27">&lt;</operator> <name pos:start="79:29" pos:end="79:33">nregs</name></expr>;</condition> <incr pos:start="79:36" pos:end="79:40"><expr pos:start="79:36" pos:end="79:40"><name pos:start="79:36" pos:end="79:38">reg</name><operator pos:start="79:39" pos:end="79:40">++</operator></expr></incr>)</control> <block pos:start="79:43" pos:end="243:9">{<block_content pos:start="81:13" pos:end="241:26">

            <if_stmt pos:start="81:13" pos:end="93:13"><if pos:start="81:13" pos:end="87:13">if <condition pos:start="81:16" pos:end="81:66">(<expr pos:start="81:17" pos:end="81:65"><name pos:start="81:17" pos:end="81:26">interleave</name> <operator pos:start="81:28" pos:end="81:28">&gt;</operator> <literal type="number" pos:start="81:30" pos:end="81:30">2</literal> <operator pos:start="81:32" pos:end="81:33">||</operator> <operator pos:start="81:35" pos:end="81:35">(</operator><name pos:start="81:36" pos:end="81:45">interleave</name> <operator pos:start="81:47" pos:end="81:48">==</operator> <literal type="number" pos:start="81:50" pos:end="81:50">2</literal> <operator pos:start="81:52" pos:end="81:53">&amp;&amp;</operator> <name pos:start="81:55" pos:end="81:59">nregs</name> <operator pos:start="81:61" pos:end="81:62">==</operator> <literal type="number" pos:start="81:64" pos:end="81:64">2</literal><operator pos:start="81:65" pos:end="81:65">)</operator></expr>)</condition> <block pos:start="81:68" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:64">

                <expr_stmt pos:start="83:17" pos:end="83:42"><expr pos:start="83:17" pos:end="83:41"><call pos:start="83:17" pos:end="83:41"><name pos:start="83:17" pos:end="83:28">load_reg_var</name><argument_list pos:start="83:29" pos:end="83:41">(<argument pos:start="83:30" pos:end="83:30"><expr pos:start="83:30" pos:end="83:30"><name pos:start="83:30" pos:end="83:30">s</name></expr></argument>, <argument pos:start="83:33" pos:end="83:36"><expr pos:start="83:33" pos:end="83:36"><name pos:start="83:33" pos:end="83:36">addr</name></expr></argument>, <argument pos:start="83:39" pos:end="83:40"><expr pos:start="83:39" pos:end="83:40"><name pos:start="83:39" pos:end="83:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:64"><expr pos:start="85:17" pos:end="85:63"><call pos:start="85:17" pos:end="85:63"><name pos:start="85:17" pos:end="85:32">tcg_gen_addi_i32</name><argument_list pos:start="85:33" pos:end="85:63">(<argument pos:start="85:34" pos:end="85:37"><expr pos:start="85:34" pos:end="85:37"><name pos:start="85:34" pos:end="85:37">addr</name></expr></argument>, <argument pos:start="85:40" pos:end="85:43"><expr pos:start="85:40" pos:end="85:43"><name pos:start="85:40" pos:end="85:43">addr</name></expr></argument>, <argument pos:start="85:46" pos:end="85:62"><expr pos:start="85:46" pos:end="85:62"><operator pos:start="85:46" pos:end="85:46">(</operator><literal type="number" pos:start="85:47" pos:end="85:47">1</literal> <operator pos:start="85:49" pos:end="85:50">&lt;&lt;</operator> <name pos:start="85:52" pos:end="85:55">size</name><operator pos:start="85:56" pos:end="85:56">)</operator> <operator pos:start="85:58" pos:end="85:58">*</operator> <name pos:start="85:60" pos:end="85:62">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="87:15" pos:end="93:13">else if <condition pos:start="87:23" pos:end="87:65">(<expr pos:start="87:24" pos:end="87:64"><name pos:start="87:24" pos:end="87:33">interleave</name> <operator pos:start="87:35" pos:end="87:36">==</operator> <literal type="number" pos:start="87:38" pos:end="87:38">2</literal> <operator pos:start="87:40" pos:end="87:41">&amp;&amp;</operator> <name pos:start="87:43" pos:end="87:47">nregs</name> <operator pos:start="87:49" pos:end="87:50">==</operator> <literal type="number" pos:start="87:52" pos:end="87:52">4</literal> <operator pos:start="87:54" pos:end="87:55">&amp;&amp;</operator> <name pos:start="87:57" pos:end="87:59">reg</name> <operator pos:start="87:61" pos:end="87:62">==</operator> <literal type="number" pos:start="87:64" pos:end="87:64">2</literal></expr>)</condition> <block pos:start="87:67" pos:end="93:13">{<block_content pos:start="89:17" pos:end="91:56">

                <expr_stmt pos:start="89:17" pos:end="89:42"><expr pos:start="89:17" pos:end="89:41"><call pos:start="89:17" pos:end="89:41"><name pos:start="89:17" pos:end="89:28">load_reg_var</name><argument_list pos:start="89:29" pos:end="89:41">(<argument pos:start="89:30" pos:end="89:30"><expr pos:start="89:30" pos:end="89:30"><name pos:start="89:30" pos:end="89:30">s</name></expr></argument>, <argument pos:start="89:33" pos:end="89:36"><expr pos:start="89:33" pos:end="89:36"><name pos:start="89:33" pos:end="89:36">addr</name></expr></argument>, <argument pos:start="89:39" pos:end="89:40"><expr pos:start="89:39" pos:end="89:40"><name pos:start="89:39" pos:end="89:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:56"><expr pos:start="91:17" pos:end="91:55"><call pos:start="91:17" pos:end="91:55"><name pos:start="91:17" pos:end="91:32">tcg_gen_addi_i32</name><argument_list pos:start="91:33" pos:end="91:55">(<argument pos:start="91:34" pos:end="91:37"><expr pos:start="91:34" pos:end="91:37"><name pos:start="91:34" pos:end="91:37">addr</name></expr></argument>, <argument pos:start="91:40" pos:end="91:43"><expr pos:start="91:40" pos:end="91:43"><name pos:start="91:40" pos:end="91:43">addr</name></expr></argument>, <argument pos:start="91:46" pos:end="91:54"><expr pos:start="91:46" pos:end="91:54"><literal type="number" pos:start="91:46" pos:end="91:46">1</literal> <operator pos:start="91:48" pos:end="91:49">&lt;&lt;</operator> <name pos:start="91:51" pos:end="91:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="95:13" pos:end="239:13"><if pos:start="95:13" pos:end="117:13">if <condition pos:start="95:16" pos:end="95:26">(<expr pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:20">size</name> <operator pos:start="95:22" pos:end="95:23">==</operator> <literal type="number" pos:start="95:25" pos:end="95:25">3</literal></expr>)</condition> <block pos:start="95:28" pos:end="117:13">{<block_content pos:start="97:17" pos:end="115:53">

                <if_stmt pos:start="97:17" pos:end="113:17"><if pos:start="97:17" pos:end="105:17">if <condition pos:start="97:20" pos:end="97:25">(<expr pos:start="97:21" pos:end="97:24"><name pos:start="97:21" pos:end="97:24">load</name></expr>)</condition> <block pos:start="97:27" pos:end="105:17">{<block_content pos:start="99:21" pos:end="103:45">

                    <expr_stmt pos:start="99:21" pos:end="99:55"><expr pos:start="99:21" pos:end="99:54"><name pos:start="99:21" pos:end="99:25">tmp64</name> <operator pos:start="99:27" pos:end="99:27">=</operator> <call pos:start="99:29" pos:end="99:54"><name pos:start="99:29" pos:end="99:36">gen_ld64</name><argument_list pos:start="99:37" pos:end="99:54">(<argument pos:start="99:38" pos:end="99:41"><expr pos:start="99:38" pos:end="99:41"><name pos:start="99:38" pos:end="99:41">addr</name></expr></argument>, <argument pos:start="99:44" pos:end="99:53"><expr pos:start="99:44" pos:end="99:53"><call pos:start="99:44" pos:end="99:53"><name pos:start="99:44" pos:end="99:50">IS_USER</name><argument_list pos:start="99:51" pos:end="99:53">(<argument pos:start="99:52" pos:end="99:52"><expr pos:start="99:52" pos:end="99:52"><name pos:start="99:52" pos:end="99:52">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:48"><expr pos:start="101:21" pos:end="101:47"><call pos:start="101:21" pos:end="101:47"><name pos:start="101:21" pos:end="101:36">neon_store_reg64</name><argument_list pos:start="101:37" pos:end="101:47">(<argument pos:start="101:38" pos:end="101:42"><expr pos:start="101:38" pos:end="101:42"><name pos:start="101:38" pos:end="101:42">tmp64</name></expr></argument>, <argument pos:start="101:45" pos:end="101:46"><expr pos:start="101:45" pos:end="101:46"><name pos:start="101:45" pos:end="101:46">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:45"><expr pos:start="103:21" pos:end="103:44"><call pos:start="103:21" pos:end="103:44"><name pos:start="103:21" pos:end="103:37">tcg_temp_free_i64</name><argument_list pos:start="103:38" pos:end="103:44">(<argument pos:start="103:39" pos:end="103:43"><expr pos:start="103:39" pos:end="103:43"><name pos:start="103:39" pos:end="103:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="105:19" pos:end="113:17">else <block pos:start="105:24" pos:end="113:17">{<block_content pos:start="107:21" pos:end="111:54">

                    <expr_stmt pos:start="107:21" pos:end="107:47"><expr pos:start="107:21" pos:end="107:46"><name pos:start="107:21" pos:end="107:25">tmp64</name> <operator pos:start="107:27" pos:end="107:27">=</operator> <call pos:start="107:29" pos:end="107:46"><name pos:start="107:29" pos:end="107:44">tcg_temp_new_i64</name><argument_list pos:start="107:45" pos:end="107:46">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:47"><expr pos:start="109:21" pos:end="109:46"><call pos:start="109:21" pos:end="109:46"><name pos:start="109:21" pos:end="109:35">neon_load_reg64</name><argument_list pos:start="109:36" pos:end="109:46">(<argument pos:start="109:37" pos:end="109:41"><expr pos:start="109:37" pos:end="109:41"><name pos:start="109:37" pos:end="109:41">tmp64</name></expr></argument>, <argument pos:start="109:44" pos:end="109:45"><expr pos:start="109:44" pos:end="109:45"><name pos:start="109:44" pos:end="109:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="111:21" pos:end="111:54"><expr pos:start="111:21" pos:end="111:53"><call pos:start="111:21" pos:end="111:53"><name pos:start="111:21" pos:end="111:28">gen_st64</name><argument_list pos:start="111:29" pos:end="111:53">(<argument pos:start="111:30" pos:end="111:34"><expr pos:start="111:30" pos:end="111:34"><name pos:start="111:30" pos:end="111:34">tmp64</name></expr></argument>, <argument pos:start="111:37" pos:end="111:40"><expr pos:start="111:37" pos:end="111:40"><name pos:start="111:37" pos:end="111:40">addr</name></expr></argument>, <argument pos:start="111:43" pos:end="111:52"><expr pos:start="111:43" pos:end="111:52"><call pos:start="111:43" pos:end="111:52"><name pos:start="111:43" pos:end="111:49">IS_USER</name><argument_list pos:start="111:50" pos:end="111:52">(<argument pos:start="111:51" pos:end="111:51"><expr pos:start="111:51" pos:end="111:51"><name pos:start="111:51" pos:end="111:51">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:53"><expr pos:start="115:17" pos:end="115:52"><call pos:start="115:17" pos:end="115:52"><name pos:start="115:17" pos:end="115:32">tcg_gen_addi_i32</name><argument_list pos:start="115:33" pos:end="115:52">(<argument pos:start="115:34" pos:end="115:37"><expr pos:start="115:34" pos:end="115:37"><name pos:start="115:34" pos:end="115:37">addr</name></expr></argument>, <argument pos:start="115:40" pos:end="115:43"><expr pos:start="115:40" pos:end="115:43"><name pos:start="115:40" pos:end="115:43">addr</name></expr></argument>, <argument pos:start="115:46" pos:end="115:51"><expr pos:start="115:46" pos:end="115:51"><name pos:start="115:46" pos:end="115:51">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="117:15" pos:end="239:13">else <block pos:start="117:20" pos:end="239:13">{<block_content pos:start="119:17" pos:end="237:17">

                <for pos:start="119:17" pos:end="237:17">for <control pos:start="119:21" pos:end="119:48">(<init pos:start="119:22" pos:end="119:30"><expr pos:start="119:22" pos:end="119:29"><name pos:start="119:22" pos:end="119:25">pass</name> <operator pos:start="119:27" pos:end="119:27">=</operator> <literal type="number" pos:start="119:29" pos:end="119:29">0</literal></expr>;</init> <condition pos:start="119:32" pos:end="119:40"><expr pos:start="119:32" pos:end="119:39"><name pos:start="119:32" pos:end="119:35">pass</name> <operator pos:start="119:37" pos:end="119:37">&lt;</operator> <literal type="number" pos:start="119:39" pos:end="119:39">2</literal></expr>;</condition> <incr pos:start="119:42" pos:end="119:47"><expr pos:start="119:42" pos:end="119:47"><name pos:start="119:42" pos:end="119:45">pass</name><operator pos:start="119:46" pos:end="119:47">++</operator></expr></incr>)</control> <block pos:start="119:50" pos:end="237:17">{<block_content pos:start="121:21" pos:end="235:21">

                    <if_stmt pos:start="121:21" pos:end="235:21"><if pos:start="121:21" pos:end="139:21">if <condition pos:start="121:24" pos:end="121:34">(<expr pos:start="121:25" pos:end="121:33"><name pos:start="121:25" pos:end="121:28">size</name> <operator pos:start="121:30" pos:end="121:31">==</operator> <literal type="number" pos:start="121:33" pos:end="121:33">2</literal></expr>)</condition> <block pos:start="121:36" pos:end="139:21">{<block_content pos:start="123:25" pos:end="137:61">

                        <if_stmt pos:start="123:25" pos:end="135:25"><if pos:start="123:25" pos:end="129:25">if <condition pos:start="123:28" pos:end="123:33">(<expr pos:start="123:29" pos:end="123:32"><name pos:start="123:29" pos:end="123:32">load</name></expr>)</condition> <block pos:start="123:35" pos:end="129:25">{<block_content pos:start="125:29" pos:end="127:58">

                            <expr_stmt pos:start="125:29" pos:end="125:61"><expr pos:start="125:29" pos:end="125:60"><name pos:start="125:29" pos:end="125:31">tmp</name> <operator pos:start="125:33" pos:end="125:33">=</operator> <call pos:start="125:35" pos:end="125:60"><name pos:start="125:35" pos:end="125:42">gen_ld32</name><argument_list pos:start="125:43" pos:end="125:60">(<argument pos:start="125:44" pos:end="125:47"><expr pos:start="125:44" pos:end="125:47"><name pos:start="125:44" pos:end="125:47">addr</name></expr></argument>, <argument pos:start="125:50" pos:end="125:59"><expr pos:start="125:50" pos:end="125:59"><call pos:start="125:50" pos:end="125:59"><name pos:start="125:50" pos:end="125:56">IS_USER</name><argument_list pos:start="125:57" pos:end="125:59">(<argument pos:start="125:58" pos:end="125:58"><expr pos:start="125:58" pos:end="125:58"><name pos:start="125:58" pos:end="125:58">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="127:29" pos:end="127:58"><expr pos:start="127:29" pos:end="127:57"><call pos:start="127:29" pos:end="127:57"><name pos:start="127:29" pos:end="127:42">neon_store_reg</name><argument_list pos:start="127:43" pos:end="127:57">(<argument pos:start="127:44" pos:end="127:45"><expr pos:start="127:44" pos:end="127:45"><name pos:start="127:44" pos:end="127:45">rd</name></expr></argument>, <argument pos:start="127:48" pos:end="127:51"><expr pos:start="127:48" pos:end="127:51"><name pos:start="127:48" pos:end="127:51">pass</name></expr></argument>, <argument pos:start="127:54" pos:end="127:56"><expr pos:start="127:54" pos:end="127:56"><name pos:start="127:54" pos:end="127:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="129:27" pos:end="135:25">else <block pos:start="129:32" pos:end="135:25">{<block_content pos:start="131:29" pos:end="133:60">

                            <expr_stmt pos:start="131:29" pos:end="131:58"><expr pos:start="131:29" pos:end="131:57"><name pos:start="131:29" pos:end="131:31">tmp</name> <operator pos:start="131:33" pos:end="131:33">=</operator> <call pos:start="131:35" pos:end="131:57"><name pos:start="131:35" pos:end="131:47">neon_load_reg</name><argument_list pos:start="131:48" pos:end="131:57">(<argument pos:start="131:49" pos:end="131:50"><expr pos:start="131:49" pos:end="131:50"><name pos:start="131:49" pos:end="131:50">rd</name></expr></argument>, <argument pos:start="131:53" pos:end="131:56"><expr pos:start="131:53" pos:end="131:56"><name pos:start="131:53" pos:end="131:56">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="133:29" pos:end="133:60"><expr pos:start="133:29" pos:end="133:59"><call pos:start="133:29" pos:end="133:59"><name pos:start="133:29" pos:end="133:36">gen_st32</name><argument_list pos:start="133:37" pos:end="133:59">(<argument pos:start="133:38" pos:end="133:40"><expr pos:start="133:38" pos:end="133:40"><name pos:start="133:38" pos:end="133:40">tmp</name></expr></argument>, <argument pos:start="133:43" pos:end="133:46"><expr pos:start="133:43" pos:end="133:46"><name pos:start="133:43" pos:end="133:46">addr</name></expr></argument>, <argument pos:start="133:49" pos:end="133:58"><expr pos:start="133:49" pos:end="133:58"><call pos:start="133:49" pos:end="133:58"><name pos:start="133:49" pos:end="133:55">IS_USER</name><argument_list pos:start="133:56" pos:end="133:58">(<argument pos:start="133:57" pos:end="133:57"><expr pos:start="133:57" pos:end="133:57"><name pos:start="133:57" pos:end="133:57">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="137:25" pos:end="137:61"><expr pos:start="137:25" pos:end="137:60"><call pos:start="137:25" pos:end="137:60"><name pos:start="137:25" pos:end="137:40">tcg_gen_addi_i32</name><argument_list pos:start="137:41" pos:end="137:60">(<argument pos:start="137:42" pos:end="137:45"><expr pos:start="137:42" pos:end="137:45"><name pos:start="137:42" pos:end="137:45">addr</name></expr></argument>, <argument pos:start="137:48" pos:end="137:51"><expr pos:start="137:48" pos:end="137:51"><name pos:start="137:48" pos:end="137:51">addr</name></expr></argument>, <argument pos:start="137:54" pos:end="137:59"><expr pos:start="137:54" pos:end="137:59"><name pos:start="137:54" pos:end="137:59">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="139:23" pos:end="177:21">else if <condition pos:start="139:31" pos:end="139:41">(<expr pos:start="139:32" pos:end="139:40"><name pos:start="139:32" pos:end="139:35">size</name> <operator pos:start="139:37" pos:end="139:38">==</operator> <literal type="number" pos:start="139:40" pos:end="139:40">1</literal></expr>)</condition> <block pos:start="139:43" pos:end="177:21">{<block_content pos:start="141:25" pos:end="175:25">

                        <if_stmt pos:start="141:25" pos:end="175:25"><if pos:start="141:25" pos:end="159:25">if <condition pos:start="141:28" pos:end="141:33">(<expr pos:start="141:29" pos:end="141:32"><name pos:start="141:29" pos:end="141:32">load</name></expr>)</condition> <block pos:start="141:35" pos:end="159:25">{<block_content pos:start="143:29" pos:end="157:58">

                            <expr_stmt pos:start="143:29" pos:end="143:62"><expr pos:start="143:29" pos:end="143:61"><name pos:start="143:29" pos:end="143:31">tmp</name> <operator pos:start="143:33" pos:end="143:33">=</operator> <call pos:start="143:35" pos:end="143:61"><name pos:start="143:35" pos:end="143:43">gen_ld16u</name><argument_list pos:start="143:44" pos:end="143:61">(<argument pos:start="143:45" pos:end="143:48"><expr pos:start="143:45" pos:end="143:48"><name pos:start="143:45" pos:end="143:48">addr</name></expr></argument>, <argument pos:start="143:51" pos:end="143:60"><expr pos:start="143:51" pos:end="143:60"><call pos:start="143:51" pos:end="143:60"><name pos:start="143:51" pos:end="143:57">IS_USER</name><argument_list pos:start="143:58" pos:end="143:60">(<argument pos:start="143:59" pos:end="143:59"><expr pos:start="143:59" pos:end="143:59"><name pos:start="143:59" pos:end="143:59">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="145:29" pos:end="145:65"><expr pos:start="145:29" pos:end="145:64"><call pos:start="145:29" pos:end="145:64"><name pos:start="145:29" pos:end="145:44">tcg_gen_addi_i32</name><argument_list pos:start="145:45" pos:end="145:64">(<argument pos:start="145:46" pos:end="145:49"><expr pos:start="145:46" pos:end="145:49"><name pos:start="145:46" pos:end="145:49">addr</name></expr></argument>, <argument pos:start="145:52" pos:end="145:55"><expr pos:start="145:52" pos:end="145:55"><name pos:start="145:52" pos:end="145:55">addr</name></expr></argument>, <argument pos:start="145:58" pos:end="145:63"><expr pos:start="145:58" pos:end="145:63"><name pos:start="145:58" pos:end="145:63">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="147:29" pos:end="147:63"><expr pos:start="147:29" pos:end="147:62"><name pos:start="147:29" pos:end="147:32">tmp2</name> <operator pos:start="147:34" pos:end="147:34">=</operator> <call pos:start="147:36" pos:end="147:62"><name pos:start="147:36" pos:end="147:44">gen_ld16u</name><argument_list pos:start="147:45" pos:end="147:62">(<argument pos:start="147:46" pos:end="147:49"><expr pos:start="147:46" pos:end="147:49"><name pos:start="147:46" pos:end="147:49">addr</name></expr></argument>, <argument pos:start="147:52" pos:end="147:61"><expr pos:start="147:52" pos:end="147:61"><call pos:start="147:52" pos:end="147:61"><name pos:start="147:52" pos:end="147:58">IS_USER</name><argument_list pos:start="147:59" pos:end="147:61">(<argument pos:start="147:60" pos:end="147:60"><expr pos:start="147:60" pos:end="147:60"><name pos:start="147:60" pos:end="147:60">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="149:29" pos:end="149:65"><expr pos:start="149:29" pos:end="149:64"><call pos:start="149:29" pos:end="149:64"><name pos:start="149:29" pos:end="149:44">tcg_gen_addi_i32</name><argument_list pos:start="149:45" pos:end="149:64">(<argument pos:start="149:46" pos:end="149:49"><expr pos:start="149:46" pos:end="149:49"><name pos:start="149:46" pos:end="149:49">addr</name></expr></argument>, <argument pos:start="149:52" pos:end="149:55"><expr pos:start="149:52" pos:end="149:55"><name pos:start="149:52" pos:end="149:55">addr</name></expr></argument>, <argument pos:start="149:58" pos:end="149:63"><expr pos:start="149:58" pos:end="149:63"><name pos:start="149:58" pos:end="149:63">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="151:29" pos:end="151:61"><expr pos:start="151:29" pos:end="151:60"><call pos:start="151:29" pos:end="151:60"><name pos:start="151:29" pos:end="151:44">tcg_gen_shli_i32</name><argument_list pos:start="151:45" pos:end="151:60">(<argument pos:start="151:46" pos:end="151:49"><expr pos:start="151:46" pos:end="151:49"><name pos:start="151:46" pos:end="151:49">tmp2</name></expr></argument>, <argument pos:start="151:52" pos:end="151:55"><expr pos:start="151:52" pos:end="151:55"><name pos:start="151:52" pos:end="151:55">tmp2</name></expr></argument>, <argument pos:start="151:58" pos:end="151:59"><expr pos:start="151:58" pos:end="151:59"><literal type="number" pos:start="151:58" pos:end="151:59">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="153:29" pos:end="153:59"><expr pos:start="153:29" pos:end="153:58"><call pos:start="153:29" pos:end="153:58"><name pos:start="153:29" pos:end="153:42">tcg_gen_or_i32</name><argument_list pos:start="153:43" pos:end="153:58">(<argument pos:start="153:44" pos:end="153:46"><expr pos:start="153:44" pos:end="153:46"><name pos:start="153:44" pos:end="153:46">tmp</name></expr></argument>, <argument pos:start="153:49" pos:end="153:51"><expr pos:start="153:49" pos:end="153:51"><name pos:start="153:49" pos:end="153:51">tmp</name></expr></argument>, <argument pos:start="153:54" pos:end="153:57"><expr pos:start="153:54" pos:end="153:57"><name pos:start="153:54" pos:end="153:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="155:29" pos:end="155:52"><expr pos:start="155:29" pos:end="155:51"><call pos:start="155:29" pos:end="155:51"><name pos:start="155:29" pos:end="155:45">tcg_temp_free_i32</name><argument_list pos:start="155:46" pos:end="155:51">(<argument pos:start="155:47" pos:end="155:50"><expr pos:start="155:47" pos:end="155:50"><name pos:start="155:47" pos:end="155:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="157:29" pos:end="157:58"><expr pos:start="157:29" pos:end="157:57"><call pos:start="157:29" pos:end="157:57"><name pos:start="157:29" pos:end="157:42">neon_store_reg</name><argument_list pos:start="157:43" pos:end="157:57">(<argument pos:start="157:44" pos:end="157:45"><expr pos:start="157:44" pos:end="157:45"><name pos:start="157:44" pos:end="157:45">rd</name></expr></argument>, <argument pos:start="157:48" pos:end="157:51"><expr pos:start="157:48" pos:end="157:51"><name pos:start="157:48" pos:end="157:51">pass</name></expr></argument>, <argument pos:start="157:54" pos:end="157:56"><expr pos:start="157:54" pos:end="157:56"><name pos:start="157:54" pos:end="157:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="159:27" pos:end="175:25">else <block pos:start="159:32" pos:end="175:25">{<block_content pos:start="161:29" pos:end="173:65">

                            <expr_stmt pos:start="161:29" pos:end="161:58"><expr pos:start="161:29" pos:end="161:57"><name pos:start="161:29" pos:end="161:31">tmp</name> <operator pos:start="161:33" pos:end="161:33">=</operator> <call pos:start="161:35" pos:end="161:57"><name pos:start="161:35" pos:end="161:47">neon_load_reg</name><argument_list pos:start="161:48" pos:end="161:57">(<argument pos:start="161:49" pos:end="161:50"><expr pos:start="161:49" pos:end="161:50"><name pos:start="161:49" pos:end="161:50">rd</name></expr></argument>, <argument pos:start="161:53" pos:end="161:56"><expr pos:start="161:53" pos:end="161:56"><name pos:start="161:53" pos:end="161:56">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="163:29" pos:end="163:54"><expr pos:start="163:29" pos:end="163:53"><name pos:start="163:29" pos:end="163:32">tmp2</name> <operator pos:start="163:34" pos:end="163:34">=</operator> <call pos:start="163:36" pos:end="163:53"><name pos:start="163:36" pos:end="163:51">tcg_temp_new_i32</name><argument_list pos:start="163:52" pos:end="163:53">()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="165:29" pos:end="165:60"><expr pos:start="165:29" pos:end="165:59"><call pos:start="165:29" pos:end="165:59"><name pos:start="165:29" pos:end="165:44">tcg_gen_shri_i32</name><argument_list pos:start="165:45" pos:end="165:59">(<argument pos:start="165:46" pos:end="165:49"><expr pos:start="165:46" pos:end="165:49"><name pos:start="165:46" pos:end="165:49">tmp2</name></expr></argument>, <argument pos:start="165:52" pos:end="165:54"><expr pos:start="165:52" pos:end="165:54"><name pos:start="165:52" pos:end="165:54">tmp</name></expr></argument>, <argument pos:start="165:57" pos:end="165:58"><expr pos:start="165:57" pos:end="165:58"><literal type="number" pos:start="165:57" pos:end="165:58">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="167:29" pos:end="167:60"><expr pos:start="167:29" pos:end="167:59"><call pos:start="167:29" pos:end="167:59"><name pos:start="167:29" pos:end="167:36">gen_st16</name><argument_list pos:start="167:37" pos:end="167:59">(<argument pos:start="167:38" pos:end="167:40"><expr pos:start="167:38" pos:end="167:40"><name pos:start="167:38" pos:end="167:40">tmp</name></expr></argument>, <argument pos:start="167:43" pos:end="167:46"><expr pos:start="167:43" pos:end="167:46"><name pos:start="167:43" pos:end="167:46">addr</name></expr></argument>, <argument pos:start="167:49" pos:end="167:58"><expr pos:start="167:49" pos:end="167:58"><call pos:start="167:49" pos:end="167:58"><name pos:start="167:49" pos:end="167:55">IS_USER</name><argument_list pos:start="167:56" pos:end="167:58">(<argument pos:start="167:57" pos:end="167:57"><expr pos:start="167:57" pos:end="167:57"><name pos:start="167:57" pos:end="167:57">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="169:29" pos:end="169:65"><expr pos:start="169:29" pos:end="169:64"><call pos:start="169:29" pos:end="169:64"><name pos:start="169:29" pos:end="169:44">tcg_gen_addi_i32</name><argument_list pos:start="169:45" pos:end="169:64">(<argument pos:start="169:46" pos:end="169:49"><expr pos:start="169:46" pos:end="169:49"><name pos:start="169:46" pos:end="169:49">addr</name></expr></argument>, <argument pos:start="169:52" pos:end="169:55"><expr pos:start="169:52" pos:end="169:55"><name pos:start="169:52" pos:end="169:55">addr</name></expr></argument>, <argument pos:start="169:58" pos:end="169:63"><expr pos:start="169:58" pos:end="169:63"><name pos:start="169:58" pos:end="169:63">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="171:29" pos:end="171:61"><expr pos:start="171:29" pos:end="171:60"><call pos:start="171:29" pos:end="171:60"><name pos:start="171:29" pos:end="171:36">gen_st16</name><argument_list pos:start="171:37" pos:end="171:60">(<argument pos:start="171:38" pos:end="171:41"><expr pos:start="171:38" pos:end="171:41"><name pos:start="171:38" pos:end="171:41">tmp2</name></expr></argument>, <argument pos:start="171:44" pos:end="171:47"><expr pos:start="171:44" pos:end="171:47"><name pos:start="171:44" pos:end="171:47">addr</name></expr></argument>, <argument pos:start="171:50" pos:end="171:59"><expr pos:start="171:50" pos:end="171:59"><call pos:start="171:50" pos:end="171:59"><name pos:start="171:50" pos:end="171:56">IS_USER</name><argument_list pos:start="171:57" pos:end="171:59">(<argument pos:start="171:58" pos:end="171:58"><expr pos:start="171:58" pos:end="171:58"><name pos:start="171:58" pos:end="171:58">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="173:29" pos:end="173:65"><expr pos:start="173:29" pos:end="173:64"><call pos:start="173:29" pos:end="173:64"><name pos:start="173:29" pos:end="173:44">tcg_gen_addi_i32</name><argument_list pos:start="173:45" pos:end="173:64">(<argument pos:start="173:46" pos:end="173:49"><expr pos:start="173:46" pos:end="173:49"><name pos:start="173:46" pos:end="173:49">addr</name></expr></argument>, <argument pos:start="173:52" pos:end="173:55"><expr pos:start="173:52" pos:end="173:55"><name pos:start="173:52" pos:end="173:55">addr</name></expr></argument>, <argument pos:start="173:58" pos:end="173:63"><expr pos:start="173:58" pos:end="173:63"><name pos:start="173:58" pos:end="173:63">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="177:23" pos:end="235:21">else <comment type="block" pos:start="177:28" pos:end="177:42">/* size == 0 */</comment> <block pos:start="177:44" pos:end="235:21">{<block_content pos:start="179:25" pos:end="233:25">

                        <if_stmt pos:start="179:25" pos:end="233:25"><if pos:start="179:25" pos:end="207:25">if <condition pos:start="179:28" pos:end="179:33">(<expr pos:start="179:29" pos:end="179:32"><name pos:start="179:29" pos:end="179:32">load</name></expr>)</condition> <block pos:start="179:35" pos:end="207:25">{<block_content pos:start="181:29" pos:end="205:59">

                            <expr_stmt pos:start="181:29" pos:end="181:46"><expr pos:start="181:29" pos:end="181:45"><call pos:start="181:29" pos:end="181:45"><name pos:start="181:29" pos:end="181:39">TCGV_UNUSED</name><argument_list pos:start="181:40" pos:end="181:45">(<argument pos:start="181:41" pos:end="181:44"><expr pos:start="181:41" pos:end="181:44"><name pos:start="181:41" pos:end="181:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="183:29" pos:end="203:29">for <control pos:start="183:33" pos:end="183:51">(<init pos:start="183:34" pos:end="183:39"><expr pos:start="183:34" pos:end="183:38"><name pos:start="183:34" pos:end="183:34">n</name> <operator pos:start="183:36" pos:end="183:36">=</operator> <literal type="number" pos:start="183:38" pos:end="183:38">0</literal></expr>;</init> <condition pos:start="183:41" pos:end="183:46"><expr pos:start="183:41" pos:end="183:45"><name pos:start="183:41" pos:end="183:41">n</name> <operator pos:start="183:43" pos:end="183:43">&lt;</operator> <literal type="number" pos:start="183:45" pos:end="183:45">4</literal></expr>;</condition> <incr pos:start="183:48" pos:end="183:50"><expr pos:start="183:48" pos:end="183:50"><name pos:start="183:48" pos:end="183:48">n</name><operator pos:start="183:49" pos:end="183:50">++</operator></expr></incr>)</control> <block pos:start="183:53" pos:end="203:29">{<block_content pos:start="185:33" pos:end="201:33">

                                <expr_stmt pos:start="185:33" pos:end="185:65"><expr pos:start="185:33" pos:end="185:64"><name pos:start="185:33" pos:end="185:35">tmp</name> <operator pos:start="185:37" pos:end="185:37">=</operator> <call pos:start="185:39" pos:end="185:64"><name pos:start="185:39" pos:end="185:46">gen_ld8u</name><argument_list pos:start="185:47" pos:end="185:64">(<argument pos:start="185:48" pos:end="185:51"><expr pos:start="185:48" pos:end="185:51"><name pos:start="185:48" pos:end="185:51">addr</name></expr></argument>, <argument pos:start="185:54" pos:end="185:63"><expr pos:start="185:54" pos:end="185:63"><call pos:start="185:54" pos:end="185:63"><name pos:start="185:54" pos:end="185:60">IS_USER</name><argument_list pos:start="185:61" pos:end="185:63">(<argument pos:start="185:62" pos:end="185:62"><expr pos:start="185:62" pos:end="185:62"><name pos:start="185:62" pos:end="185:62">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="187:33" pos:end="187:69"><expr pos:start="187:33" pos:end="187:68"><call pos:start="187:33" pos:end="187:68"><name pos:start="187:33" pos:end="187:48">tcg_gen_addi_i32</name><argument_list pos:start="187:49" pos:end="187:68">(<argument pos:start="187:50" pos:end="187:53"><expr pos:start="187:50" pos:end="187:53"><name pos:start="187:50" pos:end="187:53">addr</name></expr></argument>, <argument pos:start="187:56" pos:end="187:59"><expr pos:start="187:56" pos:end="187:59"><name pos:start="187:56" pos:end="187:59">addr</name></expr></argument>, <argument pos:start="187:62" pos:end="187:67"><expr pos:start="187:62" pos:end="187:67"><name pos:start="187:62" pos:end="187:67">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="189:33" pos:end="201:33"><if pos:start="189:33" pos:end="193:33">if <condition pos:start="189:36" pos:end="189:43">(<expr pos:start="189:37" pos:end="189:42"><name pos:start="189:37" pos:end="189:37">n</name> <operator pos:start="189:39" pos:end="189:40">==</operator> <literal type="number" pos:start="189:42" pos:end="189:42">0</literal></expr>)</condition> <block pos:start="189:45" pos:end="193:33">{<block_content pos:start="191:37" pos:end="191:47">

                                    <expr_stmt pos:start="191:37" pos:end="191:47"><expr pos:start="191:37" pos:end="191:46"><name pos:start="191:37" pos:end="191:40">tmp2</name> <operator pos:start="191:42" pos:end="191:42">=</operator> <name pos:start="191:44" pos:end="191:46">tmp</name></expr>;</expr_stmt>

                                </block_content>}</block></if> <else pos:start="193:35" pos:end="201:33">else <block pos:start="193:40" pos:end="201:33">{<block_content pos:start="195:37" pos:end="199:59">

                                    <expr_stmt pos:start="195:37" pos:end="195:70"><expr pos:start="195:37" pos:end="195:69"><call pos:start="195:37" pos:end="195:69"><name pos:start="195:37" pos:end="195:52">tcg_gen_shli_i32</name><argument_list pos:start="195:53" pos:end="195:69">(<argument pos:start="195:54" pos:end="195:56"><expr pos:start="195:54" pos:end="195:56"><name pos:start="195:54" pos:end="195:56">tmp</name></expr></argument>, <argument pos:start="195:59" pos:end="195:61"><expr pos:start="195:59" pos:end="195:61"><name pos:start="195:59" pos:end="195:61">tmp</name></expr></argument>, <argument pos:start="195:64" pos:end="195:68"><expr pos:start="195:64" pos:end="195:68"><name pos:start="195:64" pos:end="195:64">n</name> <operator pos:start="195:66" pos:end="195:66">*</operator> <literal type="number" pos:start="195:68" pos:end="195:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="197:37" pos:end="197:68"><expr pos:start="197:37" pos:end="197:67"><call pos:start="197:37" pos:end="197:67"><name pos:start="197:37" pos:end="197:50">tcg_gen_or_i32</name><argument_list pos:start="197:51" pos:end="197:67">(<argument pos:start="197:52" pos:end="197:55"><expr pos:start="197:52" pos:end="197:55"><name pos:start="197:52" pos:end="197:55">tmp2</name></expr></argument>, <argument pos:start="197:58" pos:end="197:61"><expr pos:start="197:58" pos:end="197:61"><name pos:start="197:58" pos:end="197:61">tmp2</name></expr></argument>, <argument pos:start="197:64" pos:end="197:66"><expr pos:start="197:64" pos:end="197:66"><name pos:start="197:64" pos:end="197:66">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="199:37" pos:end="199:59"><expr pos:start="199:37" pos:end="199:58"><call pos:start="199:37" pos:end="199:58"><name pos:start="199:37" pos:end="199:53">tcg_temp_free_i32</name><argument_list pos:start="199:54" pos:end="199:58">(<argument pos:start="199:55" pos:end="199:57"><expr pos:start="199:55" pos:end="199:57"><name pos:start="199:55" pos:end="199:57">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></else></if_stmt>

                            </block_content>}</block></for>

                            <expr_stmt pos:start="205:29" pos:end="205:59"><expr pos:start="205:29" pos:end="205:58"><call pos:start="205:29" pos:end="205:58"><name pos:start="205:29" pos:end="205:42">neon_store_reg</name><argument_list pos:start="205:43" pos:end="205:58">(<argument pos:start="205:44" pos:end="205:45"><expr pos:start="205:44" pos:end="205:45"><name pos:start="205:44" pos:end="205:45">rd</name></expr></argument>, <argument pos:start="205:48" pos:end="205:51"><expr pos:start="205:48" pos:end="205:51"><name pos:start="205:48" pos:end="205:51">pass</name></expr></argument>, <argument pos:start="205:54" pos:end="205:57"><expr pos:start="205:54" pos:end="205:57"><name pos:start="205:54" pos:end="205:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="207:27" pos:end="233:25">else <block pos:start="207:32" pos:end="233:25">{<block_content pos:start="209:29" pos:end="231:52">

                            <expr_stmt pos:start="209:29" pos:end="209:59"><expr pos:start="209:29" pos:end="209:58"><name pos:start="209:29" pos:end="209:32">tmp2</name> <operator pos:start="209:34" pos:end="209:34">=</operator> <call pos:start="209:36" pos:end="209:58"><name pos:start="209:36" pos:end="209:48">neon_load_reg</name><argument_list pos:start="209:49" pos:end="209:58">(<argument pos:start="209:50" pos:end="209:51"><expr pos:start="209:50" pos:end="209:51"><name pos:start="209:50" pos:end="209:51">rd</name></expr></argument>, <argument pos:start="209:54" pos:end="209:57"><expr pos:start="209:54" pos:end="209:57"><name pos:start="209:54" pos:end="209:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="211:29" pos:end="229:29">for <control pos:start="211:33" pos:end="211:51">(<init pos:start="211:34" pos:end="211:39"><expr pos:start="211:34" pos:end="211:38"><name pos:start="211:34" pos:end="211:34">n</name> <operator pos:start="211:36" pos:end="211:36">=</operator> <literal type="number" pos:start="211:38" pos:end="211:38">0</literal></expr>;</init> <condition pos:start="211:41" pos:end="211:46"><expr pos:start="211:41" pos:end="211:45"><name pos:start="211:41" pos:end="211:41">n</name> <operator pos:start="211:43" pos:end="211:43">&lt;</operator> <literal type="number" pos:start="211:45" pos:end="211:45">4</literal></expr>;</condition> <incr pos:start="211:48" pos:end="211:50"><expr pos:start="211:48" pos:end="211:50"><name pos:start="211:48" pos:end="211:48">n</name><operator pos:start="211:49" pos:end="211:50">++</operator></expr></incr>)</control> <block pos:start="211:53" pos:end="229:29">{<block_content pos:start="213:33" pos:end="227:69">

                                <expr_stmt pos:start="213:33" pos:end="213:57"><expr pos:start="213:33" pos:end="213:56"><name pos:start="213:33" pos:end="213:35">tmp</name> <operator pos:start="213:37" pos:end="213:37">=</operator> <call pos:start="213:39" pos:end="213:56"><name pos:start="213:39" pos:end="213:54">tcg_temp_new_i32</name><argument_list pos:start="213:55" pos:end="213:56">()</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="215:33" pos:end="223:33"><if pos:start="215:33" pos:end="219:33">if <condition pos:start="215:36" pos:end="215:43">(<expr pos:start="215:37" pos:end="215:42"><name pos:start="215:37" pos:end="215:37">n</name> <operator pos:start="215:39" pos:end="215:40">==</operator> <literal type="number" pos:start="215:42" pos:end="215:42">0</literal></expr>)</condition> <block pos:start="215:45" pos:end="219:33">{<block_content pos:start="217:37" pos:end="217:63">

                                    <expr_stmt pos:start="217:37" pos:end="217:63"><expr pos:start="217:37" pos:end="217:62"><call pos:start="217:37" pos:end="217:62"><name pos:start="217:37" pos:end="217:51">tcg_gen_mov_i32</name><argument_list pos:start="217:52" pos:end="217:62">(<argument pos:start="217:53" pos:end="217:55"><expr pos:start="217:53" pos:end="217:55"><name pos:start="217:53" pos:end="217:55">tmp</name></expr></argument>, <argument pos:start="217:58" pos:end="217:61"><expr pos:start="217:58" pos:end="217:61"><name pos:start="217:58" pos:end="217:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></if> <else pos:start="219:35" pos:end="223:33">else <block pos:start="219:40" pos:end="223:33">{<block_content pos:start="221:37" pos:end="221:71">

                                    <expr_stmt pos:start="221:37" pos:end="221:71"><expr pos:start="221:37" pos:end="221:70"><call pos:start="221:37" pos:end="221:70"><name pos:start="221:37" pos:end="221:52">tcg_gen_shri_i32</name><argument_list pos:start="221:53" pos:end="221:70">(<argument pos:start="221:54" pos:end="221:56"><expr pos:start="221:54" pos:end="221:56"><name pos:start="221:54" pos:end="221:56">tmp</name></expr></argument>, <argument pos:start="221:59" pos:end="221:62"><expr pos:start="221:59" pos:end="221:62"><name pos:start="221:59" pos:end="221:62">tmp2</name></expr></argument>, <argument pos:start="221:65" pos:end="221:69"><expr pos:start="221:65" pos:end="221:69"><name pos:start="221:65" pos:end="221:65">n</name> <operator pos:start="221:67" pos:end="221:67">*</operator> <literal type="number" pos:start="221:69" pos:end="221:69">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></else></if_stmt>

                                <expr_stmt pos:start="225:33" pos:end="225:63"><expr pos:start="225:33" pos:end="225:62"><call pos:start="225:33" pos:end="225:62"><name pos:start="225:33" pos:end="225:39">gen_st8</name><argument_list pos:start="225:40" pos:end="225:62">(<argument pos:start="225:41" pos:end="225:43"><expr pos:start="225:41" pos:end="225:43"><name pos:start="225:41" pos:end="225:43">tmp</name></expr></argument>, <argument pos:start="225:46" pos:end="225:49"><expr pos:start="225:46" pos:end="225:49"><name pos:start="225:46" pos:end="225:49">addr</name></expr></argument>, <argument pos:start="225:52" pos:end="225:61"><expr pos:start="225:52" pos:end="225:61"><call pos:start="225:52" pos:end="225:61"><name pos:start="225:52" pos:end="225:58">IS_USER</name><argument_list pos:start="225:59" pos:end="225:61">(<argument pos:start="225:60" pos:end="225:60"><expr pos:start="225:60" pos:end="225:60"><name pos:start="225:60" pos:end="225:60">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="227:33" pos:end="227:69"><expr pos:start="227:33" pos:end="227:68"><call pos:start="227:33" pos:end="227:68"><name pos:start="227:33" pos:end="227:48">tcg_gen_addi_i32</name><argument_list pos:start="227:49" pos:end="227:68">(<argument pos:start="227:50" pos:end="227:53"><expr pos:start="227:50" pos:end="227:53"><name pos:start="227:50" pos:end="227:53">addr</name></expr></argument>, <argument pos:start="227:56" pos:end="227:59"><expr pos:start="227:56" pos:end="227:59"><name pos:start="227:56" pos:end="227:59">addr</name></expr></argument>, <argument pos:start="227:62" pos:end="227:67"><expr pos:start="227:62" pos:end="227:67"><name pos:start="227:62" pos:end="227:67">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></for>

                            <expr_stmt pos:start="231:29" pos:end="231:52"><expr pos:start="231:29" pos:end="231:51"><call pos:start="231:29" pos:end="231:51"><name pos:start="231:29" pos:end="231:45">tcg_temp_free_i32</name><argument_list pos:start="231:46" pos:end="231:51">(<argument pos:start="231:47" pos:end="231:50"><expr pos:start="231:47" pos:end="231:50"><name pos:start="231:47" pos:end="231:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:26"><expr pos:start="241:13" pos:end="241:25"><name pos:start="241:13" pos:end="241:14">rd</name> <operator pos:start="241:16" pos:end="241:17">+=</operator> <name pos:start="241:19" pos:end="241:25">spacing</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="245:9" pos:end="245:27"><expr pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:14">stride</name> <operator pos:start="245:16" pos:end="245:16">=</operator> <name pos:start="245:18" pos:end="245:22">nregs</name> <operator pos:start="245:24" pos:end="245:24">*</operator> <literal type="number" pos:start="245:26" pos:end="245:26">8</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="247:7" pos:end="469:5">else <block pos:start="247:12" pos:end="469:5">{<block_content pos:start="249:9" pos:end="467:9">

        <expr_stmt pos:start="249:9" pos:end="249:32"><expr pos:start="249:9" pos:end="249:31"><name pos:start="249:9" pos:end="249:12">size</name> <operator pos:start="249:14" pos:end="249:14">=</operator> <operator pos:start="249:16" pos:end="249:16">(</operator><name pos:start="249:17" pos:end="249:20">insn</name> <operator pos:start="249:22" pos:end="249:23">&gt;&gt;</operator> <literal type="number" pos:start="249:25" pos:end="249:26">10</literal><operator pos:start="249:27" pos:end="249:27">)</operator> <operator pos:start="249:29" pos:end="249:29">&amp;</operator> <literal type="number" pos:start="249:31" pos:end="249:31">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="251:9" pos:end="467:9"><if pos:start="251:9" pos:end="343:9">if <condition pos:start="251:12" pos:end="251:22">(<expr pos:start="251:13" pos:end="251:21"><name pos:start="251:13" pos:end="251:16">size</name> <operator pos:start="251:18" pos:end="251:19">==</operator> <literal type="number" pos:start="251:21" pos:end="251:21">3</literal></expr>)</condition> <block pos:start="251:24" pos:end="343:9">{<block_content pos:start="255:13" pos:end="341:41">

            <comment type="block" pos:start="253:13" pos:end="253:52">/* Load single element to all lanes.  */</comment>

            <decl_stmt pos:start="255:13" pos:end="255:36"><decl pos:start="255:13" pos:end="255:35"><type pos:start="255:13" pos:end="255:15"><name pos:start="255:13" pos:end="255:15">int</name></type> <name pos:start="255:17" pos:end="255:17">a</name> <init pos:start="255:19" pos:end="255:35">= <expr pos:start="255:21" pos:end="255:35"><operator pos:start="255:21" pos:end="255:21">(</operator><name pos:start="255:22" pos:end="255:25">insn</name> <operator pos:start="255:27" pos:end="255:28">&gt;&gt;</operator> <literal type="number" pos:start="255:30" pos:end="255:30">4</literal><operator pos:start="255:31" pos:end="255:31">)</operator> <operator pos:start="255:33" pos:end="255:33">&amp;</operator> <literal type="number" pos:start="255:35" pos:end="255:35">1</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="257:13" pos:end="261:13"><if pos:start="257:13" pos:end="261:13">if <condition pos:start="257:16" pos:end="257:22">(<expr pos:start="257:17" pos:end="257:21"><operator pos:start="257:17" pos:end="257:17">!</operator><name pos:start="257:18" pos:end="257:21">load</name></expr>)</condition> <block pos:start="257:24" pos:end="261:13">{<block_content pos:start="259:17" pos:end="259:25">

                <return pos:start="259:17" pos:end="259:25">return <expr pos:start="259:24" pos:end="259:24"><literal type="number" pos:start="259:24" pos:end="259:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:35"><expr pos:start="263:13" pos:end="263:34"><name pos:start="263:13" pos:end="263:16">size</name> <operator pos:start="263:18" pos:end="263:18">=</operator> <operator pos:start="263:20" pos:end="263:20">(</operator><name pos:start="263:21" pos:end="263:24">insn</name> <operator pos:start="263:26" pos:end="263:27">&gt;&gt;</operator> <literal type="number" pos:start="263:29" pos:end="263:29">6</literal><operator pos:start="263:30" pos:end="263:30">)</operator> <operator pos:start="263:32" pos:end="263:32">&amp;</operator> <literal type="number" pos:start="263:34" pos:end="263:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:42"><expr pos:start="265:13" pos:end="265:41"><name pos:start="265:13" pos:end="265:17">nregs</name> <operator pos:start="265:19" pos:end="265:19">=</operator> <operator pos:start="265:21" pos:end="265:21">(</operator><operator pos:start="265:22" pos:end="265:22">(</operator><name pos:start="265:23" pos:end="265:26">insn</name> <operator pos:start="265:28" pos:end="265:29">&gt;&gt;</operator> <literal type="number" pos:start="265:31" pos:end="265:31">8</literal><operator pos:start="265:32" pos:end="265:32">)</operator> <operator pos:start="265:34" pos:end="265:34">&amp;</operator> <literal type="number" pos:start="265:36" pos:end="265:36">3</literal><operator pos:start="265:37" pos:end="265:37">)</operator> <operator pos:start="265:39" pos:end="265:39">+</operator> <literal type="number" pos:start="265:41" pos:end="265:41">1</literal></expr>;</expr_stmt>



            <if_stmt pos:start="269:13" pos:end="281:13"><if pos:start="269:13" pos:end="281:13">if <condition pos:start="269:16" pos:end="269:26">(<expr pos:start="269:17" pos:end="269:25"><name pos:start="269:17" pos:end="269:20">size</name> <operator pos:start="269:22" pos:end="269:23">==</operator> <literal type="number" pos:start="269:25" pos:end="269:25">3</literal></expr>)</condition> <block pos:start="269:28" pos:end="281:13">{<block_content pos:start="271:17" pos:end="279:25">

                <if_stmt pos:start="271:17" pos:end="275:17"><if pos:start="271:17" pos:end="275:17">if <condition pos:start="271:20" pos:end="271:41">(<expr pos:start="271:21" pos:end="271:40"><name pos:start="271:21" pos:end="271:25">nregs</name> <operator pos:start="271:27" pos:end="271:28">!=</operator> <literal type="number" pos:start="271:30" pos:end="271:30">4</literal> <operator pos:start="271:32" pos:end="271:33">||</operator> <name pos:start="271:35" pos:end="271:35">a</name> <operator pos:start="271:37" pos:end="271:38">==</operator> <literal type="number" pos:start="271:40" pos:end="271:40">0</literal></expr>)</condition> <block pos:start="271:43" pos:end="275:17">{<block_content pos:start="273:21" pos:end="273:29">

                    <return pos:start="273:21" pos:end="273:29">return <expr pos:start="273:28" pos:end="273:28"><literal type="number" pos:start="273:28" pos:end="273:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="277:17" pos:end="277:80">/* For VLD4 size==3 a == 1 means 32 bits at 16 byte alignment */</comment>

                <expr_stmt pos:start="279:17" pos:end="279:25"><expr pos:start="279:17" pos:end="279:24"><name pos:start="279:17" pos:end="279:20">size</name> <operator pos:start="279:22" pos:end="279:22">=</operator> <literal type="number" pos:start="279:24" pos:end="279:24">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="283:13" pos:end="287:13"><if pos:start="283:13" pos:end="287:13">if <condition pos:start="283:16" pos:end="283:50">(<expr pos:start="283:17" pos:end="283:49"><name pos:start="283:17" pos:end="283:21">nregs</name> <operator pos:start="283:23" pos:end="283:24">==</operator> <literal type="number" pos:start="283:26" pos:end="283:26">1</literal> <operator pos:start="283:28" pos:end="283:29">&amp;&amp;</operator> <name pos:start="283:31" pos:end="283:31">a</name> <operator pos:start="283:33" pos:end="283:34">==</operator> <literal type="number" pos:start="283:36" pos:end="283:36">1</literal> <operator pos:start="283:38" pos:end="283:39">&amp;&amp;</operator> <name pos:start="283:41" pos:end="283:44">size</name> <operator pos:start="283:46" pos:end="283:47">==</operator> <literal type="number" pos:start="283:49" pos:end="283:49">0</literal></expr>)</condition> <block pos:start="283:52" pos:end="287:13">{<block_content pos:start="285:17" pos:end="285:25">

                <return pos:start="285:17" pos:end="285:25">return <expr pos:start="285:24" pos:end="285:24"><literal type="number" pos:start="285:24" pos:end="285:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="289:13" pos:end="293:13"><if pos:start="289:13" pos:end="293:13">if <condition pos:start="289:16" pos:end="289:37">(<expr pos:start="289:17" pos:end="289:36"><name pos:start="289:17" pos:end="289:21">nregs</name> <operator pos:start="289:23" pos:end="289:24">==</operator> <literal type="number" pos:start="289:26" pos:end="289:26">3</literal> <operator pos:start="289:28" pos:end="289:29">&amp;&amp;</operator> <name pos:start="289:31" pos:end="289:31">a</name> <operator pos:start="289:33" pos:end="289:34">==</operator> <literal type="number" pos:start="289:36" pos:end="289:36">1</literal></expr>)</condition> <block pos:start="289:39" pos:end="293:13">{<block_content pos:start="291:17" pos:end="291:25">

                <return pos:start="291:17" pos:end="291:25">return <expr pos:start="291:24" pos:end="291:24"><literal type="number" pos:start="291:24" pos:end="291:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:38"><expr pos:start="295:13" pos:end="295:37"><call pos:start="295:13" pos:end="295:37"><name pos:start="295:13" pos:end="295:24">load_reg_var</name><argument_list pos:start="295:25" pos:end="295:37">(<argument pos:start="295:26" pos:end="295:26"><expr pos:start="295:26" pos:end="295:26"><name pos:start="295:26" pos:end="295:26">s</name></expr></argument>, <argument pos:start="295:29" pos:end="295:32"><expr pos:start="295:29" pos:end="295:32"><name pos:start="295:29" pos:end="295:32">addr</name></expr></argument>, <argument pos:start="295:35" pos:end="295:36"><expr pos:start="295:35" pos:end="295:36"><name pos:start="295:35" pos:end="295:36">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="297:13" pos:end="339:13"><if pos:start="297:13" pos:end="317:13">if <condition pos:start="297:16" pos:end="297:27">(<expr pos:start="297:17" pos:end="297:26"><name pos:start="297:17" pos:end="297:21">nregs</name> <operator pos:start="297:23" pos:end="297:24">==</operator> <literal type="number" pos:start="297:26" pos:end="297:26">1</literal></expr>)</condition> <block pos:start="297:29" pos:end="317:13">{<block_content pos:start="301:17" pos:end="315:39">

                <comment type="block" pos:start="299:17" pos:end="299:80">/* VLD1 to all lanes: bit 5 indicates how many Dregs to write */</comment>

                <expr_stmt pos:start="301:17" pos:end="301:60"><expr pos:start="301:17" pos:end="301:59"><name pos:start="301:17" pos:end="301:19">tmp</name> <operator pos:start="301:21" pos:end="301:21">=</operator> <call pos:start="301:23" pos:end="301:59"><name pos:start="301:23" pos:end="301:44">gen_load_and_replicate</name><argument_list pos:start="301:45" pos:end="301:59">(<argument pos:start="301:46" pos:end="301:46"><expr pos:start="301:46" pos:end="301:46"><name pos:start="301:46" pos:end="301:46">s</name></expr></argument>, <argument pos:start="301:49" pos:end="301:52"><expr pos:start="301:49" pos:end="301:52"><name pos:start="301:49" pos:end="301:52">addr</name></expr></argument>, <argument pos:start="301:55" pos:end="301:58"><expr pos:start="301:55" pos:end="301:58"><name pos:start="301:55" pos:end="301:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="303:17" pos:end="303:69"><expr pos:start="303:17" pos:end="303:68"><call pos:start="303:17" pos:end="303:68"><name pos:start="303:17" pos:end="303:30">tcg_gen_st_i32</name><argument_list pos:start="303:31" pos:end="303:68">(<argument pos:start="303:32" pos:end="303:34"><expr pos:start="303:32" pos:end="303:34"><name pos:start="303:32" pos:end="303:34">tmp</name></expr></argument>, <argument pos:start="303:37" pos:end="303:43"><expr pos:start="303:37" pos:end="303:43"><name pos:start="303:37" pos:end="303:43">cpu_env</name></expr></argument>, <argument pos:start="303:46" pos:end="303:67"><expr pos:start="303:46" pos:end="303:67"><call pos:start="303:46" pos:end="303:67"><name pos:start="303:46" pos:end="303:60">neon_reg_offset</name><argument_list pos:start="303:61" pos:end="303:67">(<argument pos:start="303:62" pos:end="303:63"><expr pos:start="303:62" pos:end="303:63"><name pos:start="303:62" pos:end="303:63">rd</name></expr></argument>, <argument pos:start="303:66" pos:end="303:66"><expr pos:start="303:66" pos:end="303:66"><literal type="number" pos:start="303:66" pos:end="303:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="305:17" pos:end="305:69"><expr pos:start="305:17" pos:end="305:68"><call pos:start="305:17" pos:end="305:68"><name pos:start="305:17" pos:end="305:30">tcg_gen_st_i32</name><argument_list pos:start="305:31" pos:end="305:68">(<argument pos:start="305:32" pos:end="305:34"><expr pos:start="305:32" pos:end="305:34"><name pos:start="305:32" pos:end="305:34">tmp</name></expr></argument>, <argument pos:start="305:37" pos:end="305:43"><expr pos:start="305:37" pos:end="305:43"><name pos:start="305:37" pos:end="305:43">cpu_env</name></expr></argument>, <argument pos:start="305:46" pos:end="305:67"><expr pos:start="305:46" pos:end="305:67"><call pos:start="305:46" pos:end="305:67"><name pos:start="305:46" pos:end="305:60">neon_reg_offset</name><argument_list pos:start="305:61" pos:end="305:67">(<argument pos:start="305:62" pos:end="305:63"><expr pos:start="305:62" pos:end="305:63"><name pos:start="305:62" pos:end="305:63">rd</name></expr></argument>, <argument pos:start="305:66" pos:end="305:66"><expr pos:start="305:66" pos:end="305:66"><literal type="number" pos:start="305:66" pos:end="305:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="307:17" pos:end="313:17"><if pos:start="307:17" pos:end="313:17">if <condition pos:start="307:20" pos:end="307:36">(<expr pos:start="307:21" pos:end="307:35"><name pos:start="307:21" pos:end="307:24">insn</name> <operator pos:start="307:26" pos:end="307:26">&amp;</operator> <operator pos:start="307:28" pos:end="307:28">(</operator><literal type="number" pos:start="307:29" pos:end="307:29">1</literal> <operator pos:start="307:31" pos:end="307:32">&lt;&lt;</operator> <literal type="number" pos:start="307:34" pos:end="307:34">5</literal><operator pos:start="307:35" pos:end="307:35">)</operator></expr>)</condition> <block pos:start="307:38" pos:end="313:17">{<block_content pos:start="309:21" pos:end="311:77">

                    <expr_stmt pos:start="309:21" pos:end="309:77"><expr pos:start="309:21" pos:end="309:76"><call pos:start="309:21" pos:end="309:76"><name pos:start="309:21" pos:end="309:34">tcg_gen_st_i32</name><argument_list pos:start="309:35" pos:end="309:76">(<argument pos:start="309:36" pos:end="309:38"><expr pos:start="309:36" pos:end="309:38"><name pos:start="309:36" pos:end="309:38">tmp</name></expr></argument>, <argument pos:start="309:41" pos:end="309:47"><expr pos:start="309:41" pos:end="309:47"><name pos:start="309:41" pos:end="309:47">cpu_env</name></expr></argument>, <argument pos:start="309:50" pos:end="309:75"><expr pos:start="309:50" pos:end="309:75"><call pos:start="309:50" pos:end="309:75"><name pos:start="309:50" pos:end="309:64">neon_reg_offset</name><argument_list pos:start="309:65" pos:end="309:75">(<argument pos:start="309:66" pos:end="309:71"><expr pos:start="309:66" pos:end="309:71"><name pos:start="309:66" pos:end="309:67">rd</name> <operator pos:start="309:69" pos:end="309:69">+</operator> <literal type="number" pos:start="309:71" pos:end="309:71">1</literal></expr></argument>, <argument pos:start="309:74" pos:end="309:74"><expr pos:start="309:74" pos:end="309:74"><literal type="number" pos:start="309:74" pos:end="309:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="311:21" pos:end="311:77"><expr pos:start="311:21" pos:end="311:76"><call pos:start="311:21" pos:end="311:76"><name pos:start="311:21" pos:end="311:34">tcg_gen_st_i32</name><argument_list pos:start="311:35" pos:end="311:76">(<argument pos:start="311:36" pos:end="311:38"><expr pos:start="311:36" pos:end="311:38"><name pos:start="311:36" pos:end="311:38">tmp</name></expr></argument>, <argument pos:start="311:41" pos:end="311:47"><expr pos:start="311:41" pos:end="311:47"><name pos:start="311:41" pos:end="311:47">cpu_env</name></expr></argument>, <argument pos:start="311:50" pos:end="311:75"><expr pos:start="311:50" pos:end="311:75"><call pos:start="311:50" pos:end="311:75"><name pos:start="311:50" pos:end="311:64">neon_reg_offset</name><argument_list pos:start="311:65" pos:end="311:75">(<argument pos:start="311:66" pos:end="311:71"><expr pos:start="311:66" pos:end="311:71"><name pos:start="311:66" pos:end="311:67">rd</name> <operator pos:start="311:69" pos:end="311:69">+</operator> <literal type="number" pos:start="311:71" pos:end="311:71">1</literal></expr></argument>, <argument pos:start="311:74" pos:end="311:74"><expr pos:start="311:74" pos:end="311:74"><literal type="number" pos:start="311:74" pos:end="311:74">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="315:17" pos:end="315:39"><expr pos:start="315:17" pos:end="315:38"><call pos:start="315:17" pos:end="315:38"><name pos:start="315:17" pos:end="315:33">tcg_temp_free_i32</name><argument_list pos:start="315:34" pos:end="315:38">(<argument pos:start="315:35" pos:end="315:37"><expr pos:start="315:35" pos:end="315:37"><name pos:start="315:35" pos:end="315:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="317:15" pos:end="339:13">else <block pos:start="317:20" pos:end="339:13">{<block_content pos:start="321:17" pos:end="337:17">

                <comment type="block" pos:start="319:17" pos:end="319:76">/* VLD2/3/4 to all lanes: bit 5 indicates register stride */</comment>

                <expr_stmt pos:start="321:17" pos:end="321:51"><expr pos:start="321:17" pos:end="321:50"><name pos:start="321:17" pos:end="321:22">stride</name> <operator pos:start="321:24" pos:end="321:24">=</operator> <ternary pos:start="321:26" pos:end="321:50"><condition pos:start="321:26" pos:end="321:44"><expr pos:start="321:26" pos:end="321:42"><operator pos:start="321:26" pos:end="321:26">(</operator><name pos:start="321:27" pos:end="321:30">insn</name> <operator pos:start="321:32" pos:end="321:32">&amp;</operator> <operator pos:start="321:34" pos:end="321:34">(</operator><literal type="number" pos:start="321:35" pos:end="321:35">1</literal> <operator pos:start="321:37" pos:end="321:38">&lt;&lt;</operator> <literal type="number" pos:start="321:40" pos:end="321:40">5</literal><operator pos:start="321:41" pos:end="321:41">)</operator><operator pos:start="321:42" pos:end="321:42">)</operator></expr> ?</condition><then pos:start="321:46" pos:end="321:46"> <expr pos:start="321:46" pos:end="321:46"><literal type="number" pos:start="321:46" pos:end="321:46">2</literal></expr> </then><else pos:start="321:48" pos:end="321:50">: <expr pos:start="321:50" pos:end="321:50"><literal type="number" pos:start="321:50" pos:end="321:50">1</literal></expr></else></ternary></expr>;</expr_stmt>

                <for pos:start="323:17" pos:end="337:17">for <control pos:start="323:21" pos:end="323:49">(<init pos:start="323:22" pos:end="323:29"><expr pos:start="323:22" pos:end="323:28"><name pos:start="323:22" pos:end="323:24">reg</name> <operator pos:start="323:26" pos:end="323:26">=</operator> <literal type="number" pos:start="323:28" pos:end="323:28">0</literal></expr>;</init> <condition pos:start="323:31" pos:end="323:42"><expr pos:start="323:31" pos:end="323:41"><name pos:start="323:31" pos:end="323:33">reg</name> <operator pos:start="323:35" pos:end="323:35">&lt;</operator> <name pos:start="323:37" pos:end="323:41">nregs</name></expr>;</condition> <incr pos:start="323:44" pos:end="323:48"><expr pos:start="323:44" pos:end="323:48"><name pos:start="323:44" pos:end="323:46">reg</name><operator pos:start="323:47" pos:end="323:48">++</operator></expr></incr>)</control> <block pos:start="323:51" pos:end="337:17">{<block_content pos:start="325:21" pos:end="335:33">

                    <expr_stmt pos:start="325:21" pos:end="325:64"><expr pos:start="325:21" pos:end="325:63"><name pos:start="325:21" pos:end="325:23">tmp</name> <operator pos:start="325:25" pos:end="325:25">=</operator> <call pos:start="325:27" pos:end="325:63"><name pos:start="325:27" pos:end="325:48">gen_load_and_replicate</name><argument_list pos:start="325:49" pos:end="325:63">(<argument pos:start="325:50" pos:end="325:50"><expr pos:start="325:50" pos:end="325:50"><name pos:start="325:50" pos:end="325:50">s</name></expr></argument>, <argument pos:start="325:53" pos:end="325:56"><expr pos:start="325:53" pos:end="325:56"><name pos:start="325:53" pos:end="325:56">addr</name></expr></argument>, <argument pos:start="325:59" pos:end="325:62"><expr pos:start="325:59" pos:end="325:62"><name pos:start="325:59" pos:end="325:62">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="327:21" pos:end="327:73"><expr pos:start="327:21" pos:end="327:72"><call pos:start="327:21" pos:end="327:72"><name pos:start="327:21" pos:end="327:34">tcg_gen_st_i32</name><argument_list pos:start="327:35" pos:end="327:72">(<argument pos:start="327:36" pos:end="327:38"><expr pos:start="327:36" pos:end="327:38"><name pos:start="327:36" pos:end="327:38">tmp</name></expr></argument>, <argument pos:start="327:41" pos:end="327:47"><expr pos:start="327:41" pos:end="327:47"><name pos:start="327:41" pos:end="327:47">cpu_env</name></expr></argument>, <argument pos:start="327:50" pos:end="327:71"><expr pos:start="327:50" pos:end="327:71"><call pos:start="327:50" pos:end="327:71"><name pos:start="327:50" pos:end="327:64">neon_reg_offset</name><argument_list pos:start="327:65" pos:end="327:71">(<argument pos:start="327:66" pos:end="327:67"><expr pos:start="327:66" pos:end="327:67"><name pos:start="327:66" pos:end="327:67">rd</name></expr></argument>, <argument pos:start="327:70" pos:end="327:70"><expr pos:start="327:70" pos:end="327:70"><literal type="number" pos:start="327:70" pos:end="327:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="329:21" pos:end="329:73"><expr pos:start="329:21" pos:end="329:72"><call pos:start="329:21" pos:end="329:72"><name pos:start="329:21" pos:end="329:34">tcg_gen_st_i32</name><argument_list pos:start="329:35" pos:end="329:72">(<argument pos:start="329:36" pos:end="329:38"><expr pos:start="329:36" pos:end="329:38"><name pos:start="329:36" pos:end="329:38">tmp</name></expr></argument>, <argument pos:start="329:41" pos:end="329:47"><expr pos:start="329:41" pos:end="329:47"><name pos:start="329:41" pos:end="329:47">cpu_env</name></expr></argument>, <argument pos:start="329:50" pos:end="329:71"><expr pos:start="329:50" pos:end="329:71"><call pos:start="329:50" pos:end="329:71"><name pos:start="329:50" pos:end="329:64">neon_reg_offset</name><argument_list pos:start="329:65" pos:end="329:71">(<argument pos:start="329:66" pos:end="329:67"><expr pos:start="329:66" pos:end="329:67"><name pos:start="329:66" pos:end="329:67">rd</name></expr></argument>, <argument pos:start="329:70" pos:end="329:70"><expr pos:start="329:70" pos:end="329:70"><literal type="number" pos:start="329:70" pos:end="329:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="331:21" pos:end="331:43"><expr pos:start="331:21" pos:end="331:42"><call pos:start="331:21" pos:end="331:42"><name pos:start="331:21" pos:end="331:37">tcg_temp_free_i32</name><argument_list pos:start="331:38" pos:end="331:42">(<argument pos:start="331:39" pos:end="331:41"><expr pos:start="331:39" pos:end="331:41"><name pos:start="331:39" pos:end="331:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="333:21" pos:end="333:60"><expr pos:start="333:21" pos:end="333:59"><call pos:start="333:21" pos:end="333:59"><name pos:start="333:21" pos:end="333:36">tcg_gen_addi_i32</name><argument_list pos:start="333:37" pos:end="333:59">(<argument pos:start="333:38" pos:end="333:41"><expr pos:start="333:38" pos:end="333:41"><name pos:start="333:38" pos:end="333:41">addr</name></expr></argument>, <argument pos:start="333:44" pos:end="333:47"><expr pos:start="333:44" pos:end="333:47"><name pos:start="333:44" pos:end="333:47">addr</name></expr></argument>, <argument pos:start="333:50" pos:end="333:58"><expr pos:start="333:50" pos:end="333:58"><literal type="number" pos:start="333:50" pos:end="333:50">1</literal> <operator pos:start="333:52" pos:end="333:53">&lt;&lt;</operator> <name pos:start="333:55" pos:end="333:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="335:21" pos:end="335:33"><expr pos:start="335:21" pos:end="335:32"><name pos:start="335:21" pos:end="335:22">rd</name> <operator pos:start="335:24" pos:end="335:25">+=</operator> <name pos:start="335:27" pos:end="335:32">stride</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:41"><expr pos:start="341:13" pos:end="341:40"><name pos:start="341:13" pos:end="341:18">stride</name> <operator pos:start="341:20" pos:end="341:20">=</operator> <operator pos:start="341:22" pos:end="341:22">(</operator><literal type="number" pos:start="341:23" pos:end="341:23">1</literal> <operator pos:start="341:25" pos:end="341:26">&lt;&lt;</operator> <name pos:start="341:28" pos:end="341:31">size</name><operator pos:start="341:32" pos:end="341:32">)</operator> <operator pos:start="341:34" pos:end="341:34">*</operator> <name pos:start="341:36" pos:end="341:40">nregs</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="343:11" pos:end="467:9">else <block pos:start="343:16" pos:end="467:9">{<block_content pos:start="347:13" pos:end="465:41">

            <comment type="block" pos:start="345:13" pos:end="345:34">/* Single element.  */</comment>

            <expr_stmt pos:start="347:13" pos:end="347:35"><expr pos:start="347:13" pos:end="347:34"><name pos:start="347:13" pos:end="347:16">pass</name> <operator pos:start="347:18" pos:end="347:18">=</operator> <operator pos:start="347:20" pos:end="347:20">(</operator><name pos:start="347:21" pos:end="347:24">insn</name> <operator pos:start="347:26" pos:end="347:27">&gt;&gt;</operator> <literal type="number" pos:start="347:29" pos:end="347:29">7</literal><operator pos:start="347:30" pos:end="347:30">)</operator> <operator pos:start="347:32" pos:end="347:32">&amp;</operator> <literal type="number" pos:start="347:34" pos:end="347:34">1</literal></expr>;</expr_stmt>

            <switch pos:start="349:13" pos:end="379:13">switch <condition pos:start="349:20" pos:end="349:25">(<expr pos:start="349:21" pos:end="349:24"><name pos:start="349:21" pos:end="349:24">size</name></expr>)</condition> <block pos:start="349:27" pos:end="379:13">{<block_content pos:start="351:13" pos:end="377:24">

            <case pos:start="351:13" pos:end="351:19">case <expr pos:start="351:18" pos:end="351:18"><literal type="number" pos:start="351:18" pos:end="351:18">0</literal></expr>:</case>

                <expr_stmt pos:start="353:17" pos:end="353:46"><expr pos:start="353:17" pos:end="353:45"><name pos:start="353:17" pos:end="353:21">shift</name> <operator pos:start="353:23" pos:end="353:23">=</operator> <operator pos:start="353:25" pos:end="353:25">(</operator><operator pos:start="353:26" pos:end="353:26">(</operator><name pos:start="353:27" pos:end="353:30">insn</name> <operator pos:start="353:32" pos:end="353:33">&gt;&gt;</operator> <literal type="number" pos:start="353:35" pos:end="353:35">5</literal><operator pos:start="353:36" pos:end="353:36">)</operator> <operator pos:start="353:38" pos:end="353:38">&amp;</operator> <literal type="number" pos:start="353:40" pos:end="353:40">3</literal><operator pos:start="353:41" pos:end="353:41">)</operator> <operator pos:start="353:43" pos:end="353:43">*</operator> <literal type="number" pos:start="353:45" pos:end="353:45">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="355:17" pos:end="355:27"><expr pos:start="355:17" pos:end="355:26"><name pos:start="355:17" pos:end="355:22">stride</name> <operator pos:start="355:24" pos:end="355:24">=</operator> <literal type="number" pos:start="355:26" pos:end="355:26">1</literal></expr>;</expr_stmt>

                <break pos:start="357:17" pos:end="357:22">break;</break>

            <case pos:start="359:13" pos:end="359:19">case <expr pos:start="359:18" pos:end="359:18"><literal type="number" pos:start="359:18" pos:end="359:18">1</literal></expr>:</case>

                <expr_stmt pos:start="361:17" pos:end="361:47"><expr pos:start="361:17" pos:end="361:46"><name pos:start="361:17" pos:end="361:21">shift</name> <operator pos:start="361:23" pos:end="361:23">=</operator> <operator pos:start="361:25" pos:end="361:25">(</operator><operator pos:start="361:26" pos:end="361:26">(</operator><name pos:start="361:27" pos:end="361:30">insn</name> <operator pos:start="361:32" pos:end="361:33">&gt;&gt;</operator> <literal type="number" pos:start="361:35" pos:end="361:35">6</literal><operator pos:start="361:36" pos:end="361:36">)</operator> <operator pos:start="361:38" pos:end="361:38">&amp;</operator> <literal type="number" pos:start="361:40" pos:end="361:40">1</literal><operator pos:start="361:41" pos:end="361:41">)</operator> <operator pos:start="361:43" pos:end="361:43">*</operator> <literal type="number" pos:start="361:45" pos:end="361:46">16</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="363:17" pos:end="363:51"><expr pos:start="363:17" pos:end="363:50"><name pos:start="363:17" pos:end="363:22">stride</name> <operator pos:start="363:24" pos:end="363:24">=</operator> <ternary pos:start="363:26" pos:end="363:50"><condition pos:start="363:26" pos:end="363:44"><expr pos:start="363:26" pos:end="363:42"><operator pos:start="363:26" pos:end="363:26">(</operator><name pos:start="363:27" pos:end="363:30">insn</name> <operator pos:start="363:32" pos:end="363:32">&amp;</operator> <operator pos:start="363:34" pos:end="363:34">(</operator><literal type="number" pos:start="363:35" pos:end="363:35">1</literal> <operator pos:start="363:37" pos:end="363:38">&lt;&lt;</operator> <literal type="number" pos:start="363:40" pos:end="363:40">5</literal><operator pos:start="363:41" pos:end="363:41">)</operator><operator pos:start="363:42" pos:end="363:42">)</operator></expr> ?</condition><then pos:start="363:46" pos:end="363:46"> <expr pos:start="363:46" pos:end="363:46"><literal type="number" pos:start="363:46" pos:end="363:46">2</literal></expr> </then><else pos:start="363:48" pos:end="363:50">: <expr pos:start="363:50" pos:end="363:50"><literal type="number" pos:start="363:50" pos:end="363:50">1</literal></expr></else></ternary></expr>;</expr_stmt>

                <break pos:start="365:17" pos:end="365:22">break;</break>

            <case pos:start="367:13" pos:end="367:19">case <expr pos:start="367:18" pos:end="367:18"><literal type="number" pos:start="367:18" pos:end="367:18">2</literal></expr>:</case>

                <expr_stmt pos:start="369:17" pos:end="369:26"><expr pos:start="369:17" pos:end="369:25"><name pos:start="369:17" pos:end="369:21">shift</name> <operator pos:start="369:23" pos:end="369:23">=</operator> <literal type="number" pos:start="369:25" pos:end="369:25">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="371:17" pos:end="371:51"><expr pos:start="371:17" pos:end="371:50"><name pos:start="371:17" pos:end="371:22">stride</name> <operator pos:start="371:24" pos:end="371:24">=</operator> <ternary pos:start="371:26" pos:end="371:50"><condition pos:start="371:26" pos:end="371:44"><expr pos:start="371:26" pos:end="371:42"><operator pos:start="371:26" pos:end="371:26">(</operator><name pos:start="371:27" pos:end="371:30">insn</name> <operator pos:start="371:32" pos:end="371:32">&amp;</operator> <operator pos:start="371:34" pos:end="371:34">(</operator><literal type="number" pos:start="371:35" pos:end="371:35">1</literal> <operator pos:start="371:37" pos:end="371:38">&lt;&lt;</operator> <literal type="number" pos:start="371:40" pos:end="371:40">6</literal><operator pos:start="371:41" pos:end="371:41">)</operator><operator pos:start="371:42" pos:end="371:42">)</operator></expr> ?</condition><then pos:start="371:46" pos:end="371:46"> <expr pos:start="371:46" pos:end="371:46"><literal type="number" pos:start="371:46" pos:end="371:46">2</literal></expr> </then><else pos:start="371:48" pos:end="371:50">: <expr pos:start="371:50" pos:end="371:50"><literal type="number" pos:start="371:50" pos:end="371:50">1</literal></expr></else></ternary></expr>;</expr_stmt>

                <break pos:start="373:17" pos:end="373:22">break;</break>

            <default pos:start="375:13" pos:end="375:20">default:</default>

                <expr_stmt pos:start="377:17" pos:end="377:24"><expr pos:start="377:17" pos:end="377:23"><call pos:start="377:17" pos:end="377:23"><name pos:start="377:17" pos:end="377:21">abort</name><argument_list pos:start="377:22" pos:end="377:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <expr_stmt pos:start="381:13" pos:end="381:42"><expr pos:start="381:13" pos:end="381:41"><name pos:start="381:13" pos:end="381:17">nregs</name> <operator pos:start="381:19" pos:end="381:19">=</operator> <operator pos:start="381:21" pos:end="381:21">(</operator><operator pos:start="381:22" pos:end="381:22">(</operator><name pos:start="381:23" pos:end="381:26">insn</name> <operator pos:start="381:28" pos:end="381:29">&gt;&gt;</operator> <literal type="number" pos:start="381:31" pos:end="381:31">8</literal><operator pos:start="381:32" pos:end="381:32">)</operator> <operator pos:start="381:34" pos:end="381:34">&amp;</operator> <literal type="number" pos:start="381:36" pos:end="381:36">3</literal><operator pos:start="381:37" pos:end="381:37">)</operator> <operator pos:start="381:39" pos:end="381:39">+</operator> <literal type="number" pos:start="381:41" pos:end="381:41">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="383:13" pos:end="383:38"><expr pos:start="383:13" pos:end="383:37"><call pos:start="383:13" pos:end="383:37"><name pos:start="383:13" pos:end="383:24">load_reg_var</name><argument_list pos:start="383:25" pos:end="383:37">(<argument pos:start="383:26" pos:end="383:26"><expr pos:start="383:26" pos:end="383:26"><name pos:start="383:26" pos:end="383:26">s</name></expr></argument>, <argument pos:start="383:29" pos:end="383:32"><expr pos:start="383:29" pos:end="383:32"><name pos:start="383:29" pos:end="383:32">addr</name></expr></argument>, <argument pos:start="383:35" pos:end="383:36"><expr pos:start="383:35" pos:end="383:36"><name pos:start="383:35" pos:end="383:36">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="385:13" pos:end="463:13">for <control pos:start="385:17" pos:end="385:45">(<init pos:start="385:18" pos:end="385:25"><expr pos:start="385:18" pos:end="385:24"><name pos:start="385:18" pos:end="385:20">reg</name> <operator pos:start="385:22" pos:end="385:22">=</operator> <literal type="number" pos:start="385:24" pos:end="385:24">0</literal></expr>;</init> <condition pos:start="385:27" pos:end="385:38"><expr pos:start="385:27" pos:end="385:37"><name pos:start="385:27" pos:end="385:29">reg</name> <operator pos:start="385:31" pos:end="385:31">&lt;</operator> <name pos:start="385:33" pos:end="385:37">nregs</name></expr>;</condition> <incr pos:start="385:40" pos:end="385:44"><expr pos:start="385:40" pos:end="385:44"><name pos:start="385:40" pos:end="385:42">reg</name><operator pos:start="385:43" pos:end="385:44">++</operator></expr></incr>)</control> <block pos:start="385:47" pos:end="463:13">{<block_content pos:start="387:17" pos:end="461:56">

                <if_stmt pos:start="387:17" pos:end="457:17"><if pos:start="387:17" pos:end="427:17">if <condition pos:start="387:20" pos:end="387:25">(<expr pos:start="387:21" pos:end="387:24"><name pos:start="387:21" pos:end="387:24">load</name></expr>)</condition> <block pos:start="387:27" pos:end="427:17">{<block_content pos:start="389:21" pos:end="425:50">

                    <switch pos:start="389:21" pos:end="413:21">switch <condition pos:start="389:28" pos:end="389:33">(<expr pos:start="389:29" pos:end="389:32"><name pos:start="389:29" pos:end="389:32">size</name></expr>)</condition> <block pos:start="389:35" pos:end="413:21">{<block_content pos:start="391:21" pos:end="411:32">

                    <case pos:start="391:21" pos:end="391:27">case <expr pos:start="391:26" pos:end="391:26"><literal type="number" pos:start="391:26" pos:end="391:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="393:25" pos:end="393:57"><expr pos:start="393:25" pos:end="393:56"><name pos:start="393:25" pos:end="393:27">tmp</name> <operator pos:start="393:29" pos:end="393:29">=</operator> <call pos:start="393:31" pos:end="393:56"><name pos:start="393:31" pos:end="393:38">gen_ld8u</name><argument_list pos:start="393:39" pos:end="393:56">(<argument pos:start="393:40" pos:end="393:43"><expr pos:start="393:40" pos:end="393:43"><name pos:start="393:40" pos:end="393:43">addr</name></expr></argument>, <argument pos:start="393:46" pos:end="393:55"><expr pos:start="393:46" pos:end="393:55"><call pos:start="393:46" pos:end="393:55"><name pos:start="393:46" pos:end="393:52">IS_USER</name><argument_list pos:start="393:53" pos:end="393:55">(<argument pos:start="393:54" pos:end="393:54"><expr pos:start="393:54" pos:end="393:54"><name pos:start="393:54" pos:end="393:54">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="395:25" pos:end="395:30">break;</break>

                    <case pos:start="397:21" pos:end="397:27">case <expr pos:start="397:26" pos:end="397:26"><literal type="number" pos:start="397:26" pos:end="397:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="399:25" pos:end="399:58"><expr pos:start="399:25" pos:end="399:57"><name pos:start="399:25" pos:end="399:27">tmp</name> <operator pos:start="399:29" pos:end="399:29">=</operator> <call pos:start="399:31" pos:end="399:57"><name pos:start="399:31" pos:end="399:39">gen_ld16u</name><argument_list pos:start="399:40" pos:end="399:57">(<argument pos:start="399:41" pos:end="399:44"><expr pos:start="399:41" pos:end="399:44"><name pos:start="399:41" pos:end="399:44">addr</name></expr></argument>, <argument pos:start="399:47" pos:end="399:56"><expr pos:start="399:47" pos:end="399:56"><call pos:start="399:47" pos:end="399:56"><name pos:start="399:47" pos:end="399:53">IS_USER</name><argument_list pos:start="399:54" pos:end="399:56">(<argument pos:start="399:55" pos:end="399:55"><expr pos:start="399:55" pos:end="399:55"><name pos:start="399:55" pos:end="399:55">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="401:25" pos:end="401:30">break;</break>

                    <case pos:start="403:21" pos:end="403:27">case <expr pos:start="403:26" pos:end="403:26"><literal type="number" pos:start="403:26" pos:end="403:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="405:25" pos:end="405:57"><expr pos:start="405:25" pos:end="405:56"><name pos:start="405:25" pos:end="405:27">tmp</name> <operator pos:start="405:29" pos:end="405:29">=</operator> <call pos:start="405:31" pos:end="405:56"><name pos:start="405:31" pos:end="405:38">gen_ld32</name><argument_list pos:start="405:39" pos:end="405:56">(<argument pos:start="405:40" pos:end="405:43"><expr pos:start="405:40" pos:end="405:43"><name pos:start="405:40" pos:end="405:43">addr</name></expr></argument>, <argument pos:start="405:46" pos:end="405:55"><expr pos:start="405:46" pos:end="405:55"><call pos:start="405:46" pos:end="405:55"><name pos:start="405:46" pos:end="405:52">IS_USER</name><argument_list pos:start="405:53" pos:end="405:55">(<argument pos:start="405:54" pos:end="405:54"><expr pos:start="405:54" pos:end="405:54"><name pos:start="405:54" pos:end="405:54">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="407:25" pos:end="407:30">break;</break>

                    <default pos:start="409:21" pos:end="409:28">default:</default> <comment type="block" pos:start="409:30" pos:end="409:60">/* Avoid compiler warnings.  */</comment>

                        <expr_stmt pos:start="411:25" pos:end="411:32"><expr pos:start="411:25" pos:end="411:31"><call pos:start="411:25" pos:end="411:31"><name pos:start="411:25" pos:end="411:29">abort</name><argument_list pos:start="411:30" pos:end="411:31">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="415:21" pos:end="423:21"><if pos:start="415:21" pos:end="423:21">if <condition pos:start="415:24" pos:end="415:34">(<expr pos:start="415:25" pos:end="415:33"><name pos:start="415:25" pos:end="415:28">size</name> <operator pos:start="415:30" pos:end="415:31">!=</operator> <literal type="number" pos:start="415:33" pos:end="415:33">2</literal></expr>)</condition> <block pos:start="415:36" pos:end="423:21">{<block_content pos:start="417:25" pos:end="421:48">

                        <expr_stmt pos:start="417:25" pos:end="417:55"><expr pos:start="417:25" pos:end="417:54"><name pos:start="417:25" pos:end="417:28">tmp2</name> <operator pos:start="417:30" pos:end="417:30">=</operator> <call pos:start="417:32" pos:end="417:54"><name pos:start="417:32" pos:end="417:44">neon_load_reg</name><argument_list pos:start="417:45" pos:end="417:54">(<argument pos:start="417:46" pos:end="417:47"><expr pos:start="417:46" pos:end="417:47"><name pos:start="417:46" pos:end="417:47">rd</name></expr></argument>, <argument pos:start="417:50" pos:end="417:53"><expr pos:start="417:50" pos:end="417:53"><name pos:start="417:50" pos:end="417:53">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="419:25" pos:end="419:77"><expr pos:start="419:25" pos:end="419:76"><call pos:start="419:25" pos:end="419:76"><name pos:start="419:25" pos:end="419:31">gen_bfi</name><argument_list pos:start="419:32" pos:end="419:76">(<argument pos:start="419:33" pos:end="419:35"><expr pos:start="419:33" pos:end="419:35"><name pos:start="419:33" pos:end="419:35">tmp</name></expr></argument>, <argument pos:start="419:38" pos:end="419:41"><expr pos:start="419:38" pos:end="419:41"><name pos:start="419:38" pos:end="419:41">tmp2</name></expr></argument>, <argument pos:start="419:44" pos:end="419:46"><expr pos:start="419:44" pos:end="419:46"><name pos:start="419:44" pos:end="419:46">tmp</name></expr></argument>, <argument pos:start="419:49" pos:end="419:53"><expr pos:start="419:49" pos:end="419:53"><name pos:start="419:49" pos:end="419:53">shift</name></expr></argument>, <argument pos:start="419:56" pos:end="419:75"><expr pos:start="419:56" pos:end="419:75"><ternary pos:start="419:56" pos:end="419:75"><condition pos:start="419:56" pos:end="419:61"><expr pos:start="419:56" pos:end="419:59"><name pos:start="419:56" pos:end="419:59">size</name></expr> ?</condition><then pos:start="419:63" pos:end="419:68"> <expr pos:start="419:63" pos:end="419:68"><literal type="number" pos:start="419:63" pos:end="419:68">0xffff</literal></expr> </then><else pos:start="419:70" pos:end="419:75">: <expr pos:start="419:72" pos:end="419:75"><literal type="number" pos:start="419:72" pos:end="419:75">0xff</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="421:25" pos:end="421:48"><expr pos:start="421:25" pos:end="421:47"><call pos:start="421:25" pos:end="421:47"><name pos:start="421:25" pos:end="421:41">tcg_temp_free_i32</name><argument_list pos:start="421:42" pos:end="421:47">(<argument pos:start="421:43" pos:end="421:46"><expr pos:start="421:43" pos:end="421:46"><name pos:start="421:43" pos:end="421:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="425:21" pos:end="425:50"><expr pos:start="425:21" pos:end="425:49"><call pos:start="425:21" pos:end="425:49"><name pos:start="425:21" pos:end="425:34">neon_store_reg</name><argument_list pos:start="425:35" pos:end="425:49">(<argument pos:start="425:36" pos:end="425:37"><expr pos:start="425:36" pos:end="425:37"><name pos:start="425:36" pos:end="425:37">rd</name></expr></argument>, <argument pos:start="425:40" pos:end="425:43"><expr pos:start="425:40" pos:end="425:43"><name pos:start="425:40" pos:end="425:43">pass</name></expr></argument>, <argument pos:start="425:46" pos:end="425:48"><expr pos:start="425:46" pos:end="425:48"><name pos:start="425:46" pos:end="425:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="427:19" pos:end="457:17">else <block pos:start="427:24" pos:end="457:17">{<block_content pos:start="429:21" pos:end="455:21"> <comment type="block" pos:start="427:26" pos:end="427:36">/* Store */</comment>

                    <expr_stmt pos:start="429:21" pos:end="429:50"><expr pos:start="429:21" pos:end="429:49"><name pos:start="429:21" pos:end="429:23">tmp</name> <operator pos:start="429:25" pos:end="429:25">=</operator> <call pos:start="429:27" pos:end="429:49"><name pos:start="429:27" pos:end="429:39">neon_load_reg</name><argument_list pos:start="429:40" pos:end="429:49">(<argument pos:start="429:41" pos:end="429:42"><expr pos:start="429:41" pos:end="429:42"><name pos:start="429:41" pos:end="429:42">rd</name></expr></argument>, <argument pos:start="429:45" pos:end="429:48"><expr pos:start="429:45" pos:end="429:48"><name pos:start="429:45" pos:end="429:48">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="431:21" pos:end="433:58"><if pos:start="431:21" pos:end="433:58">if <condition pos:start="431:24" pos:end="431:30">(<expr pos:start="431:25" pos:end="431:29"><name pos:start="431:25" pos:end="431:29">shift</name></expr>)</condition><block type="pseudo" pos:start="433:25" pos:end="433:58"><block_content pos:start="433:25" pos:end="433:58">

                        <expr_stmt pos:start="433:25" pos:end="433:58"><expr pos:start="433:25" pos:end="433:57"><call pos:start="433:25" pos:end="433:57"><name pos:start="433:25" pos:end="433:40">tcg_gen_shri_i32</name><argument_list pos:start="433:41" pos:end="433:57">(<argument pos:start="433:42" pos:end="433:44"><expr pos:start="433:42" pos:end="433:44"><name pos:start="433:42" pos:end="433:44">tmp</name></expr></argument>, <argument pos:start="433:47" pos:end="433:49"><expr pos:start="433:47" pos:end="433:49"><name pos:start="433:47" pos:end="433:49">tmp</name></expr></argument>, <argument pos:start="433:52" pos:end="433:56"><expr pos:start="433:52" pos:end="433:56"><name pos:start="433:52" pos:end="433:56">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <switch pos:start="435:21" pos:end="455:21">switch <condition pos:start="435:28" pos:end="435:33">(<expr pos:start="435:29" pos:end="435:32"><name pos:start="435:29" pos:end="435:32">size</name></expr>)</condition> <block pos:start="435:35" pos:end="455:21">{<block_content pos:start="437:21" pos:end="453:30">

                    <case pos:start="437:21" pos:end="437:27">case <expr pos:start="437:26" pos:end="437:26"><literal type="number" pos:start="437:26" pos:end="437:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="439:25" pos:end="439:55"><expr pos:start="439:25" pos:end="439:54"><call pos:start="439:25" pos:end="439:54"><name pos:start="439:25" pos:end="439:31">gen_st8</name><argument_list pos:start="439:32" pos:end="439:54">(<argument pos:start="439:33" pos:end="439:35"><expr pos:start="439:33" pos:end="439:35"><name pos:start="439:33" pos:end="439:35">tmp</name></expr></argument>, <argument pos:start="439:38" pos:end="439:41"><expr pos:start="439:38" pos:end="439:41"><name pos:start="439:38" pos:end="439:41">addr</name></expr></argument>, <argument pos:start="439:44" pos:end="439:53"><expr pos:start="439:44" pos:end="439:53"><call pos:start="439:44" pos:end="439:53"><name pos:start="439:44" pos:end="439:50">IS_USER</name><argument_list pos:start="439:51" pos:end="439:53">(<argument pos:start="439:52" pos:end="439:52"><expr pos:start="439:52" pos:end="439:52"><name pos:start="439:52" pos:end="439:52">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="441:25" pos:end="441:30">break;</break>

                    <case pos:start="443:21" pos:end="443:27">case <expr pos:start="443:26" pos:end="443:26"><literal type="number" pos:start="443:26" pos:end="443:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="445:25" pos:end="445:56"><expr pos:start="445:25" pos:end="445:55"><call pos:start="445:25" pos:end="445:55"><name pos:start="445:25" pos:end="445:32">gen_st16</name><argument_list pos:start="445:33" pos:end="445:55">(<argument pos:start="445:34" pos:end="445:36"><expr pos:start="445:34" pos:end="445:36"><name pos:start="445:34" pos:end="445:36">tmp</name></expr></argument>, <argument pos:start="445:39" pos:end="445:42"><expr pos:start="445:39" pos:end="445:42"><name pos:start="445:39" pos:end="445:42">addr</name></expr></argument>, <argument pos:start="445:45" pos:end="445:54"><expr pos:start="445:45" pos:end="445:54"><call pos:start="445:45" pos:end="445:54"><name pos:start="445:45" pos:end="445:51">IS_USER</name><argument_list pos:start="445:52" pos:end="445:54">(<argument pos:start="445:53" pos:end="445:53"><expr pos:start="445:53" pos:end="445:53"><name pos:start="445:53" pos:end="445:53">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="447:25" pos:end="447:30">break;</break>

                    <case pos:start="449:21" pos:end="449:27">case <expr pos:start="449:26" pos:end="449:26"><literal type="number" pos:start="449:26" pos:end="449:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="451:25" pos:end="451:56"><expr pos:start="451:25" pos:end="451:55"><call pos:start="451:25" pos:end="451:55"><name pos:start="451:25" pos:end="451:32">gen_st32</name><argument_list pos:start="451:33" pos:end="451:55">(<argument pos:start="451:34" pos:end="451:36"><expr pos:start="451:34" pos:end="451:36"><name pos:start="451:34" pos:end="451:36">tmp</name></expr></argument>, <argument pos:start="451:39" pos:end="451:42"><expr pos:start="451:39" pos:end="451:42"><name pos:start="451:39" pos:end="451:42">addr</name></expr></argument>, <argument pos:start="451:45" pos:end="451:54"><expr pos:start="451:45" pos:end="451:54"><call pos:start="451:45" pos:end="451:54"><name pos:start="451:45" pos:end="451:51">IS_USER</name><argument_list pos:start="451:52" pos:end="451:54">(<argument pos:start="451:53" pos:end="451:53"><expr pos:start="451:53" pos:end="451:53"><name pos:start="451:53" pos:end="451:53">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="453:25" pos:end="453:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="459:17" pos:end="459:29"><expr pos:start="459:17" pos:end="459:28"><name pos:start="459:17" pos:end="459:18">rd</name> <operator pos:start="459:20" pos:end="459:21">+=</operator> <name pos:start="459:23" pos:end="459:28">stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="461:17" pos:end="461:56"><expr pos:start="461:17" pos:end="461:55"><call pos:start="461:17" pos:end="461:55"><name pos:start="461:17" pos:end="461:32">tcg_gen_addi_i32</name><argument_list pos:start="461:33" pos:end="461:55">(<argument pos:start="461:34" pos:end="461:37"><expr pos:start="461:34" pos:end="461:37"><name pos:start="461:34" pos:end="461:37">addr</name></expr></argument>, <argument pos:start="461:40" pos:end="461:43"><expr pos:start="461:40" pos:end="461:43"><name pos:start="461:40" pos:end="461:43">addr</name></expr></argument>, <argument pos:start="461:46" pos:end="461:54"><expr pos:start="461:46" pos:end="461:54"><literal type="number" pos:start="461:46" pos:end="461:46">1</literal> <operator pos:start="461:48" pos:end="461:49">&lt;&lt;</operator> <name pos:start="461:51" pos:end="461:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="465:13" pos:end="465:41"><expr pos:start="465:13" pos:end="465:40"><name pos:start="465:13" pos:end="465:18">stride</name> <operator pos:start="465:20" pos:end="465:20">=</operator> <name pos:start="465:22" pos:end="465:26">nregs</name> <operator pos:start="465:28" pos:end="465:28">*</operator> <operator pos:start="465:30" pos:end="465:30">(</operator><literal type="number" pos:start="465:31" pos:end="465:31">1</literal> <operator pos:start="465:33" pos:end="465:34">&lt;&lt;</operator> <name pos:start="465:36" pos:end="465:39">size</name><operator pos:start="465:40" pos:end="465:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="471:5" pos:end="471:28"><expr pos:start="471:5" pos:end="471:27"><call pos:start="471:5" pos:end="471:27"><name pos:start="471:5" pos:end="471:21">tcg_temp_free_i32</name><argument_list pos:start="471:22" pos:end="471:27">(<argument pos:start="471:23" pos:end="471:26"><expr pos:start="471:23" pos:end="471:26"><name pos:start="471:23" pos:end="471:26">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="473:5" pos:end="499:5"><if pos:start="473:5" pos:end="499:5">if <condition pos:start="473:8" pos:end="473:17">(<expr pos:start="473:9" pos:end="473:16"><name pos:start="473:9" pos:end="473:10">rm</name> <operator pos:start="473:12" pos:end="473:13">!=</operator> <literal type="number" pos:start="473:15" pos:end="473:16">15</literal></expr>)</condition> <block pos:start="473:19" pos:end="499:5">{<block_content pos:start="475:9" pos:end="497:31">

        <decl_stmt pos:start="475:9" pos:end="475:18"><decl pos:start="475:9" pos:end="475:17"><type pos:start="475:9" pos:end="475:12"><name pos:start="475:9" pos:end="475:12">TCGv</name></type> <name pos:start="475:14" pos:end="475:17">base</name></decl>;</decl_stmt>



        <expr_stmt pos:start="479:9" pos:end="479:31"><expr pos:start="479:9" pos:end="479:30"><name pos:start="479:9" pos:end="479:12">base</name> <operator pos:start="479:14" pos:end="479:14">=</operator> <call pos:start="479:16" pos:end="479:30"><name pos:start="479:16" pos:end="479:23">load_reg</name><argument_list pos:start="479:24" pos:end="479:30">(<argument pos:start="479:25" pos:end="479:25"><expr pos:start="479:25" pos:end="479:25"><name pos:start="479:25" pos:end="479:25">s</name></expr></argument>, <argument pos:start="479:28" pos:end="479:29"><expr pos:start="479:28" pos:end="479:29"><name pos:start="479:28" pos:end="479:29">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="481:9" pos:end="495:9"><if pos:start="481:9" pos:end="485:9">if <condition pos:start="481:12" pos:end="481:21">(<expr pos:start="481:13" pos:end="481:20"><name pos:start="481:13" pos:end="481:14">rm</name> <operator pos:start="481:16" pos:end="481:17">==</operator> <literal type="number" pos:start="481:19" pos:end="481:20">13</literal></expr>)</condition> <block pos:start="481:23" pos:end="485:9">{<block_content pos:start="483:13" pos:end="483:49">

            <expr_stmt pos:start="483:13" pos:end="483:49"><expr pos:start="483:13" pos:end="483:48"><call pos:start="483:13" pos:end="483:48"><name pos:start="483:13" pos:end="483:28">tcg_gen_addi_i32</name><argument_list pos:start="483:29" pos:end="483:48">(<argument pos:start="483:30" pos:end="483:33"><expr pos:start="483:30" pos:end="483:33"><name pos:start="483:30" pos:end="483:33">base</name></expr></argument>, <argument pos:start="483:36" pos:end="483:39"><expr pos:start="483:36" pos:end="483:39"><name pos:start="483:36" pos:end="483:39">base</name></expr></argument>, <argument pos:start="483:42" pos:end="483:47"><expr pos:start="483:42" pos:end="483:47"><name pos:start="483:42" pos:end="483:47">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="485:11" pos:end="495:9">else <block pos:start="485:16" pos:end="495:9">{<block_content pos:start="487:13" pos:end="493:37">

            <decl_stmt pos:start="487:13" pos:end="487:23"><decl pos:start="487:13" pos:end="487:22"><type pos:start="487:13" pos:end="487:16"><name pos:start="487:13" pos:end="487:16">TCGv</name></type> <name pos:start="487:18" pos:end="487:22">index</name></decl>;</decl_stmt>

            <expr_stmt pos:start="489:13" pos:end="489:36"><expr pos:start="489:13" pos:end="489:35"><name pos:start="489:13" pos:end="489:17">index</name> <operator pos:start="489:19" pos:end="489:19">=</operator> <call pos:start="489:21" pos:end="489:35"><name pos:start="489:21" pos:end="489:28">load_reg</name><argument_list pos:start="489:29" pos:end="489:35">(<argument pos:start="489:30" pos:end="489:30"><expr pos:start="489:30" pos:end="489:30"><name pos:start="489:30" pos:end="489:30">s</name></expr></argument>, <argument pos:start="489:33" pos:end="489:34"><expr pos:start="489:33" pos:end="489:34"><name pos:start="489:33" pos:end="489:34">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="491:13" pos:end="491:47"><expr pos:start="491:13" pos:end="491:46"><call pos:start="491:13" pos:end="491:46"><name pos:start="491:13" pos:end="491:27">tcg_gen_add_i32</name><argument_list pos:start="491:28" pos:end="491:46">(<argument pos:start="491:29" pos:end="491:32"><expr pos:start="491:29" pos:end="491:32"><name pos:start="491:29" pos:end="491:32">base</name></expr></argument>, <argument pos:start="491:35" pos:end="491:38"><expr pos:start="491:35" pos:end="491:38"><name pos:start="491:35" pos:end="491:38">base</name></expr></argument>, <argument pos:start="491:41" pos:end="491:45"><expr pos:start="491:41" pos:end="491:45"><name pos:start="491:41" pos:end="491:45">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="493:13" pos:end="493:37"><expr pos:start="493:13" pos:end="493:36"><call pos:start="493:13" pos:end="493:36"><name pos:start="493:13" pos:end="493:29">tcg_temp_free_i32</name><argument_list pos:start="493:30" pos:end="493:36">(<argument pos:start="493:31" pos:end="493:35"><expr pos:start="493:31" pos:end="493:35"><name pos:start="493:31" pos:end="493:35">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="497:9" pos:end="497:31"><expr pos:start="497:9" pos:end="497:30"><call pos:start="497:9" pos:end="497:30"><name pos:start="497:9" pos:end="497:17">store_reg</name><argument_list pos:start="497:18" pos:end="497:30">(<argument pos:start="497:19" pos:end="497:19"><expr pos:start="497:19" pos:end="497:19"><name pos:start="497:19" pos:end="497:19">s</name></expr></argument>, <argument pos:start="497:22" pos:end="497:23"><expr pos:start="497:22" pos:end="497:23"><name pos:start="497:22" pos:end="497:23">rn</name></expr></argument>, <argument pos:start="497:26" pos:end="497:29"><expr pos:start="497:26" pos:end="497:29"><name pos:start="497:26" pos:end="497:29">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="501:5" pos:end="501:13">return <expr pos:start="501:12" pos:end="501:12"><literal type="number" pos:start="501:12" pos:end="501:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
