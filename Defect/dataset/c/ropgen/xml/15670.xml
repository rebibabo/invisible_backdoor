<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15670.c" pos:tabs="8"><function pos:start="1:1" pos:end="94:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_block</name><parameter_list pos:start="1:24" pos:end="3:74">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:42">MJpegDecodeContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:54">int16_t</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">block</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:76"><decl pos:start="1:64" pos:end="1:76"><type pos:start="1:64" pos:end="1:76"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:76">component</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:36">dc_index</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:50"><decl pos:start="3:39" pos:end="3:50"><type pos:start="3:39" pos:end="3:50"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:50">ac_index</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:73"><decl pos:start="3:53" pos:end="3:73"><type pos:start="3:53" pos:end="3:73"><name pos:start="3:53" pos:end="3:59">int16_t</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:73">quant_matrix</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="94:1">{<block_content pos:start="7:5" pos:end="92:13">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">code</name></decl>, <decl pos:start="7:15" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:15">i</name></decl>, <decl pos:start="7:18" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:18">j</name></decl>, <decl pos:start="7:21" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:25">level</name></decl>, <decl pos:start="7:28" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:28" pos:end="7:30">val</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:17">/* DC coef */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:39"><expr pos:start="13:5" pos:end="13:38"><name pos:start="13:5" pos:end="13:7">val</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:38"><name pos:start="13:11" pos:end="13:25">mjpeg_decode_dc</name><argument_list pos:start="13:26" pos:end="13:38">(<argument pos:start="13:27" pos:end="13:27"><expr pos:start="13:27" pos:end="13:27"><name pos:start="13:27" pos:end="13:27">s</name></expr></argument>, <argument pos:start="13:30" pos:end="13:37"><expr pos:start="13:30" pos:end="13:37"><name pos:start="13:30" pos:end="13:37">dc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:11">val</name> <operator pos:start="15:13" pos:end="15:14">==</operator> <literal type="number" pos:start="15:16" pos:end="15:22">0xfffff</literal></expr>)</condition> <block pos:start="15:25" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:35">

        <expr_stmt pos:start="17:9" pos:end="17:53"><expr pos:start="17:9" pos:end="17:52"><call pos:start="17:9" pos:end="17:52"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:52">(<argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:16">s</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:23">avctx</name></name></expr></argument>, <argument pos:start="17:26" pos:end="17:37"><expr pos:start="17:26" pos:end="17:37"><name pos:start="17:26" pos:end="17:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:40" pos:end="17:51"><expr pos:start="17:40" pos:end="17:51"><literal type="string" pos:start="17:40" pos:end="17:51">"error dc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:35">return <expr pos:start="19:16" pos:end="19:34"><name pos:start="19:16" pos:end="19:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:56"><expr pos:start="23:5" pos:end="23:55"><name pos:start="23:5" pos:end="23:7">val</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <name pos:start="23:11" pos:end="23:13">val</name> <operator pos:start="23:15" pos:end="23:15">*</operator> <name pos:start="23:17" pos:end="23:31"><name pos:start="23:17" pos:end="23:28">quant_matrix</name><index pos:start="23:29" pos:end="23:31">[<expr pos:start="23:30" pos:end="23:30"><literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr>]</index></name> <operator pos:start="23:33" pos:end="23:33">+</operator> <name pos:start="23:35" pos:end="23:55"><name pos:start="23:35" pos:end="23:35">s</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:44">last_dc</name><index pos:start="23:45" pos:end="23:55">[<expr pos:start="23:46" pos:end="23:54"><name pos:start="23:46" pos:end="23:54">component</name></expr>]</index></name></expr>;</expr_stmt>


    <expr_stmt pos:start="26:5" pos:end="26:32"><expr pos:start="26:5" pos:end="26:31"><name pos:start="26:5" pos:end="26:25"><name pos:start="26:5" pos:end="26:5">s</name><operator pos:start="26:6" pos:end="26:7">-&gt;</operator><name pos:start="26:8" pos:end="26:14">last_dc</name><index pos:start="26:15" pos:end="26:25">[<expr pos:start="26:16" pos:end="26:24"><name pos:start="26:16" pos:end="26:24">component</name></expr>]</index></name> <operator pos:start="26:27" pos:end="26:27">=</operator> <name pos:start="26:29" pos:end="26:31">val</name></expr>;</expr_stmt>

    <expr_stmt pos:start="28:5" pos:end="28:19"><expr pos:start="28:5" pos:end="28:18"><name pos:start="28:5" pos:end="28:12"><name pos:start="28:5" pos:end="28:9">block</name><index pos:start="28:10" pos:end="28:12">[<expr pos:start="28:11" pos:end="28:11"><literal type="number" pos:start="28:11" pos:end="28:11">0</literal></expr>]</index></name> <operator pos:start="28:14" pos:end="28:14">=</operator> <name pos:start="28:16" pos:end="28:18">val</name></expr>;</expr_stmt>

    <comment type="block" pos:start="30:5" pos:end="30:18">/* AC coefs */</comment>

    <expr_stmt pos:start="32:5" pos:end="32:10"><expr pos:start="32:5" pos:end="32:9"><name pos:start="32:5" pos:end="32:5">i</name> <operator pos:start="32:7" pos:end="32:7">=</operator> <literal type="number" pos:start="32:9" pos:end="32:9">0</literal></expr>;</expr_stmt>

    <block pos:start="34:5" pos:end="88:30">{<block_content pos:start="34:6" pos:end="88:29"><expr_stmt pos:start="34:6" pos:end="34:29"><expr pos:start="34:6" pos:end="34:28"><call pos:start="34:6" pos:end="34:28"><name pos:start="34:6" pos:end="34:16">OPEN_READER</name><argument_list pos:start="34:17" pos:end="34:28">(<argument pos:start="34:18" pos:end="34:19"><expr pos:start="34:18" pos:end="34:19"><name pos:start="34:18" pos:end="34:19">re</name></expr></argument>, <argument pos:start="34:22" pos:end="34:27"><expr pos:start="34:22" pos:end="34:27"><operator pos:start="34:22" pos:end="34:22">&amp;</operator><name pos:start="34:23" pos:end="34:27"><name pos:start="34:23" pos:end="34:23">s</name><operator pos:start="34:24" pos:end="34:25">-&gt;</operator><name pos:start="34:26" pos:end="34:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="36:5" pos:end="86:21">do <block pos:start="36:8" pos:end="86:5">{<block_content pos:start="38:9" pos:end="84:9">

        <expr_stmt pos:start="38:9" pos:end="38:33"><expr pos:start="38:9" pos:end="38:32"><call pos:start="38:9" pos:end="38:32"><name pos:start="38:9" pos:end="38:20">UPDATE_CACHE</name><argument_list pos:start="38:21" pos:end="38:32">(<argument pos:start="38:22" pos:end="38:23"><expr pos:start="38:22" pos:end="38:23"><name pos:start="38:22" pos:end="38:23">re</name></expr></argument>, <argument pos:start="38:26" pos:end="38:31"><expr pos:start="38:26" pos:end="38:31"><operator pos:start="38:26" pos:end="38:26">&amp;</operator><name pos:start="38:27" pos:end="38:31"><name pos:start="38:27" pos:end="38:27">s</name><operator pos:start="38:28" pos:end="38:29">-&gt;</operator><name pos:start="38:30" pos:end="38:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="40:9" pos:end="40:68"><expr pos:start="40:9" pos:end="40:67"><call pos:start="40:9" pos:end="40:67"><name pos:start="40:9" pos:end="40:15">GET_VLC</name><argument_list pos:start="40:16" pos:end="40:67">(<argument pos:start="40:17" pos:end="40:20"><expr pos:start="40:17" pos:end="40:20"><name pos:start="40:17" pos:end="40:20">code</name></expr></argument>, <argument pos:start="40:23" pos:end="40:24"><expr pos:start="40:23" pos:end="40:24"><name pos:start="40:23" pos:end="40:24">re</name></expr></argument>, <argument pos:start="40:27" pos:end="40:32"><expr pos:start="40:27" pos:end="40:32"><operator pos:start="40:27" pos:end="40:27">&amp;</operator><name pos:start="40:28" pos:end="40:32"><name pos:start="40:28" pos:end="40:28">s</name><operator pos:start="40:29" pos:end="40:30">-&gt;</operator><name pos:start="40:31" pos:end="40:32">gb</name></name></expr></argument>, <argument pos:start="40:35" pos:end="40:60"><expr pos:start="40:35" pos:end="40:60"><name pos:start="40:35" pos:end="40:54"><name pos:start="40:35" pos:end="40:35">s</name><operator pos:start="40:36" pos:end="40:37">-&gt;</operator><name pos:start="40:38" pos:end="40:41">vlcs</name><index pos:start="40:42" pos:end="40:44">[<expr pos:start="40:43" pos:end="40:43"><literal type="number" pos:start="40:43" pos:end="40:43">1</literal></expr>]</index><index pos:start="40:45" pos:end="40:54">[<expr pos:start="40:46" pos:end="40:53"><name pos:start="40:46" pos:end="40:53">ac_index</name></expr>]</index></name><operator pos:start="40:55" pos:end="40:55">.</operator><name pos:start="40:56" pos:end="40:60">table</name></expr></argument>, <argument pos:start="40:63" pos:end="40:63"><expr pos:start="40:63" pos:end="40:63"><literal type="number" pos:start="40:63" pos:end="40:63">9</literal></expr></argument>, <argument pos:start="40:66" pos:end="40:66"><expr pos:start="40:66" pos:end="40:66"><literal type="number" pos:start="40:66" pos:end="40:66">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="44:9" pos:end="44:35"><expr pos:start="44:9" pos:end="44:34"><name pos:start="44:9" pos:end="44:9">i</name> <operator pos:start="44:11" pos:end="44:12">+=</operator> <operator pos:start="44:14" pos:end="44:14">(</operator><operator pos:start="44:15" pos:end="44:15">(</operator><name pos:start="44:16" pos:end="44:23">unsigned</name><operator pos:start="44:24" pos:end="44:24">)</operator><name pos:start="44:25" pos:end="44:28">code</name><operator pos:start="44:29" pos:end="44:29">)</operator> <operator pos:start="44:31" pos:end="44:32">&gt;&gt;</operator> <literal type="number" pos:start="44:34" pos:end="44:34">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="46:13" pos:end="46:24"><expr pos:start="46:13" pos:end="46:23"><name pos:start="46:13" pos:end="46:16">code</name> <operator pos:start="46:18" pos:end="46:19">&amp;=</operator> <literal type="number" pos:start="46:21" pos:end="46:23">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="48:9" pos:end="84:9"><if pos:start="48:9" pos:end="84:9">if <condition pos:start="48:12" pos:end="48:17">(<expr pos:start="48:13" pos:end="48:16"><name pos:start="48:13" pos:end="48:16">code</name></expr>)</condition> <block pos:start="48:19" pos:end="84:9">{<block_content pos:start="50:13" pos:end="82:47">

            <if_stmt pos:start="50:13" pos:end="52:41"><if pos:start="50:13" pos:end="52:41">if <condition pos:start="50:16" pos:end="50:43">(<expr pos:start="50:17" pos:end="50:42"><name pos:start="50:17" pos:end="50:20">code</name> <operator pos:start="50:22" pos:end="50:22">&gt;</operator> <name pos:start="50:24" pos:end="50:37">MIN_CACHE_BITS</name> <operator pos:start="50:39" pos:end="50:39">-</operator> <literal type="number" pos:start="50:41" pos:end="50:42">16</literal></expr>)</condition><block type="pseudo" pos:start="52:17" pos:end="52:41"><block_content pos:start="52:17" pos:end="52:41">

                <expr_stmt pos:start="52:17" pos:end="52:41"><expr pos:start="52:17" pos:end="52:40"><call pos:start="52:17" pos:end="52:40"><name pos:start="52:17" pos:end="52:28">UPDATE_CACHE</name><argument_list pos:start="52:29" pos:end="52:40">(<argument pos:start="52:30" pos:end="52:31"><expr pos:start="52:30" pos:end="52:31"><name pos:start="52:30" pos:end="52:31">re</name></expr></argument>, <argument pos:start="52:34" pos:end="52:39"><expr pos:start="52:34" pos:end="52:39"><operator pos:start="52:34" pos:end="52:34">&amp;</operator><name pos:start="52:35" pos:end="52:39"><name pos:start="52:35" pos:end="52:35">s</name><operator pos:start="52:36" pos:end="52:37">-&gt;</operator><name pos:start="52:38" pos:end="52:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <block pos:start="56:13" pos:end="64:13">{<block_content pos:start="58:17" pos:end="62:73">

                <decl_stmt pos:start="58:17" pos:end="58:50"><decl pos:start="58:17" pos:end="58:49"><type pos:start="58:17" pos:end="58:19"><name pos:start="58:17" pos:end="58:19">int</name></type> <name pos:start="58:21" pos:end="58:25">cache</name> <init pos:start="58:27" pos:end="58:49">= <expr pos:start="58:29" pos:end="58:49"><call pos:start="58:29" pos:end="58:49"><name pos:start="58:29" pos:end="58:37">GET_CACHE</name><argument_list pos:start="58:38" pos:end="58:49">(<argument pos:start="58:39" pos:end="58:40"><expr pos:start="58:39" pos:end="58:40"><name pos:start="58:39" pos:end="58:40">re</name></expr></argument>, <argument pos:start="58:43" pos:end="58:48"><expr pos:start="58:43" pos:end="58:48"><operator pos:start="58:43" pos:end="58:43">&amp;</operator><name pos:start="58:44" pos:end="58:48"><name pos:start="58:44" pos:end="58:44">s</name><operator pos:start="58:45" pos:end="58:46">-&gt;</operator><name pos:start="58:47" pos:end="58:48">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="60:17" pos:end="60:43"><decl pos:start="60:17" pos:end="60:42"><type pos:start="60:17" pos:end="60:19"><name pos:start="60:17" pos:end="60:19">int</name></type> <name pos:start="60:21" pos:end="60:24">sign</name>  <init pos:start="60:27" pos:end="60:42">= <expr pos:start="60:29" pos:end="60:42"><operator pos:start="60:29" pos:end="60:29">(</operator><operator pos:start="60:30" pos:end="60:30">~</operator><name pos:start="60:31" pos:end="60:35">cache</name><operator pos:start="60:36" pos:end="60:36">)</operator> <operator pos:start="60:38" pos:end="60:39">&gt;&gt;</operator> <literal type="number" pos:start="60:41" pos:end="60:42">31</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="62:17" pos:end="62:73"><expr pos:start="62:17" pos:end="62:72"><name pos:start="62:17" pos:end="62:21">level</name>     <operator pos:start="62:27" pos:end="62:27">=</operator> <operator pos:start="62:29" pos:end="62:29">(</operator><call pos:start="62:30" pos:end="62:57"><name pos:start="62:30" pos:end="62:38">NEG_USR32</name><argument_list pos:start="62:39" pos:end="62:57">(<argument pos:start="62:40" pos:end="62:51"><expr pos:start="62:40" pos:end="62:51"><name pos:start="62:40" pos:end="62:43">sign</name> <operator pos:start="62:45" pos:end="62:45">^</operator> <name pos:start="62:47" pos:end="62:51">cache</name></expr></argument>,<argument pos:start="62:53" pos:end="62:56"><expr pos:start="62:53" pos:end="62:56"><name pos:start="62:53" pos:end="62:56">code</name></expr></argument>)</argument_list></call> <operator pos:start="62:59" pos:end="62:59">^</operator> <name pos:start="62:61" pos:end="62:64">sign</name><operator pos:start="62:65" pos:end="62:65">)</operator> <operator pos:start="62:67" pos:end="62:67">-</operator> <name pos:start="62:69" pos:end="62:72">sign</name></expr>;</expr_stmt>

            </block_content>}</block>



            <expr_stmt pos:start="68:13" pos:end="68:45"><expr pos:start="68:13" pos:end="68:44"><call pos:start="68:13" pos:end="68:44"><name pos:start="68:13" pos:end="68:26">LAST_SKIP_BITS</name><argument_list pos:start="68:27" pos:end="68:44">(<argument pos:start="68:28" pos:end="68:29"><expr pos:start="68:28" pos:end="68:29"><name pos:start="68:28" pos:end="68:29">re</name></expr></argument>, <argument pos:start="68:32" pos:end="68:37"><expr pos:start="68:32" pos:end="68:37"><operator pos:start="68:32" pos:end="68:32">&amp;</operator><name pos:start="68:33" pos:end="68:37"><name pos:start="68:33" pos:end="68:33">s</name><operator pos:start="68:34" pos:end="68:35">-&gt;</operator><name pos:start="68:36" pos:end="68:37">gb</name></name></expr></argument>, <argument pos:start="68:40" pos:end="68:43"><expr pos:start="68:40" pos:end="68:43"><name pos:start="68:40" pos:end="68:43">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="72:13" pos:end="78:13"><if pos:start="72:13" pos:end="78:13">if <condition pos:start="72:16" pos:end="72:23">(<expr pos:start="72:17" pos:end="72:22"><name pos:start="72:17" pos:end="72:17">i</name> <operator pos:start="72:19" pos:end="72:19">&gt;</operator> <literal type="number" pos:start="72:21" pos:end="72:22">63</literal></expr>)</condition> <block pos:start="72:25" pos:end="78:13">{<block_content pos:start="74:17" pos:end="76:43">

                <expr_stmt pos:start="74:17" pos:end="74:71"><expr pos:start="74:17" pos:end="74:70"><call pos:start="74:17" pos:end="74:70"><name pos:start="74:17" pos:end="74:22">av_log</name><argument_list pos:start="74:23" pos:end="74:70">(<argument pos:start="74:24" pos:end="74:31"><expr pos:start="74:24" pos:end="74:31"><name pos:start="74:24" pos:end="74:31"><name pos:start="74:24" pos:end="74:24">s</name><operator pos:start="74:25" pos:end="74:26">-&gt;</operator><name pos:start="74:27" pos:end="74:31">avctx</name></name></expr></argument>, <argument pos:start="74:34" pos:end="74:45"><expr pos:start="74:34" pos:end="74:45"><name pos:start="74:34" pos:end="74:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="74:48" pos:end="74:66"><expr pos:start="74:48" pos:end="74:66"><literal type="string" pos:start="74:48" pos:end="74:66">"error count: %d\n"</literal></expr></argument>, <argument pos:start="74:69" pos:end="74:69"><expr pos:start="74:69" pos:end="74:69"><name pos:start="74:69" pos:end="74:69">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="76:17" pos:end="76:43">return <expr pos:start="76:24" pos:end="76:42"><name pos:start="76:24" pos:end="76:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="80:13" pos:end="80:50"><expr pos:start="80:13" pos:end="80:49"><name pos:start="80:13" pos:end="80:13">j</name>        <operator pos:start="80:22" pos:end="80:22">=</operator> <name pos:start="80:24" pos:end="80:49"><name pos:start="80:24" pos:end="80:24">s</name><operator pos:start="80:25" pos:end="80:26">-&gt;</operator><name pos:start="80:27" pos:end="80:35">scantable</name><operator pos:start="80:36" pos:end="80:36">.</operator><name pos:start="80:37" pos:end="80:46">permutated</name><index pos:start="80:47" pos:end="80:49">[<expr pos:start="80:48" pos:end="80:48"><name pos:start="80:48" pos:end="80:48">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="82:13" pos:end="82:47"><expr pos:start="82:13" pos:end="82:46"><name pos:start="82:13" pos:end="82:20"><name pos:start="82:13" pos:end="82:17">block</name><index pos:start="82:18" pos:end="82:20">[<expr pos:start="82:19" pos:end="82:19"><name pos:start="82:19" pos:end="82:19">j</name></expr>]</index></name> <operator pos:start="82:22" pos:end="82:22">=</operator> <name pos:start="82:24" pos:end="82:28">level</name> <operator pos:start="82:30" pos:end="82:30">*</operator> <name pos:start="82:32" pos:end="82:46"><name pos:start="82:32" pos:end="82:43">quant_matrix</name><index pos:start="82:44" pos:end="82:46">[<expr pos:start="82:45" pos:end="82:45"><name pos:start="82:45" pos:end="82:45">j</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="86:13" pos:end="86:20">(<expr pos:start="86:14" pos:end="86:19"><name pos:start="86:14" pos:end="86:14">i</name> <operator pos:start="86:16" pos:end="86:16">&lt;</operator> <literal type="number" pos:start="86:18" pos:end="86:19">63</literal></expr>)</condition>;</do>

    <expr_stmt pos:start="88:5" pos:end="88:29"><expr pos:start="88:5" pos:end="88:28"><call pos:start="88:5" pos:end="88:28"><name pos:start="88:5" pos:end="88:16">CLOSE_READER</name><argument_list pos:start="88:17" pos:end="88:28">(<argument pos:start="88:18" pos:end="88:19"><expr pos:start="88:18" pos:end="88:19"><name pos:start="88:18" pos:end="88:19">re</name></expr></argument>, <argument pos:start="88:22" pos:end="88:27"><expr pos:start="88:22" pos:end="88:27"><operator pos:start="88:22" pos:end="88:22">&amp;</operator><name pos:start="88:23" pos:end="88:27"><name pos:start="88:23" pos:end="88:23">s</name><operator pos:start="88:24" pos:end="88:25">-&gt;</operator><name pos:start="88:26" pos:end="88:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>



    <return pos:start="92:5" pos:end="92:13">return <expr pos:start="92:12" pos:end="92:12"><literal type="number" pos:start="92:12" pos:end="92:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
