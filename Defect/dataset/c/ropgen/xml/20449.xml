<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20449.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">mimic_decode_frame</name><parameter_list pos:start="1:30" pos:end="3:62">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><name pos:start="3:31" pos:end="3:33">int</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">got_frame</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:61"><decl pos:start="3:47" pos:end="3:61"><type pos:start="3:47" pos:end="3:61"><name pos:start="3:47" pos:end="3:54">AVPacket</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:61">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="199:1">{<block_content pos:start="7:5" pos:end="197:20">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>       <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">swap_buf_size</name>  <init pos:start="11:24" pos:end="11:53">= <expr pos:start="11:26" pos:end="11:53"><name pos:start="11:26" pos:end="11:33">buf_size</name> <operator pos:start="11:35" pos:end="11:35">-</operator> <name pos:start="11:37" pos:end="11:53">MIMIC_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MimicContext</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:21">ctx</name>  <init pos:start="13:24" pos:end="13:41">= <expr pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:30">avctx</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:18">GetByteContext</name></type> <name pos:start="15:20" pos:end="15:21">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">is_pframe</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:13">width</name></decl>, <decl pos:start="19:16" pos:end="19:21"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:16" pos:end="19:21">height</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">quality</name></decl>, <decl pos:start="21:18" pos:end="21:27"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:18" pos:end="21:27">num_coeffs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">res</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:38">(<expr pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:16">buf_size</name> <operator pos:start="27:18" pos:end="27:19">&lt;=</operator> <name pos:start="27:21" pos:end="27:37">MIMIC_HEADER_SIZE</name></expr>)</condition> <block pos:start="27:40" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:35">

        <expr_stmt pos:start="29:9" pos:end="29:59"><expr pos:start="29:9" pos:end="29:58"><call pos:start="29:9" pos:end="29:58"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:58">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:57"><expr pos:start="29:37" pos:end="29:57"><literal type="string" pos:start="29:37" pos:end="29:57">"insufficient data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:35">return <expr pos:start="31:16" pos:end="31:34"><name pos:start="31:16" pos:end="31:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:50"><expr pos:start="37:5" pos:end="37:49"><call pos:start="37:5" pos:end="37:49"><name pos:start="37:5" pos:end="37:20">bytestream2_init</name><argument_list pos:start="37:21" pos:end="37:49">(<argument pos:start="37:22" pos:end="37:24"><expr pos:start="37:22" pos:end="37:24"><operator pos:start="37:22" pos:end="37:22">&amp;</operator><name pos:start="37:23" pos:end="37:24">gb</name></expr></argument>, <argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">buf</name></expr></argument>, <argument pos:start="37:32" pos:end="37:48"><expr pos:start="37:32" pos:end="37:48"><name pos:start="37:32" pos:end="37:48">MIMIC_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><call pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:20">bytestream2_skip</name><argument_list pos:start="39:21" pos:end="39:28">(<argument pos:start="39:22" pos:end="39:24"><expr pos:start="39:22" pos:end="39:24"><operator pos:start="39:22" pos:end="39:22">&amp;</operator><name pos:start="39:23" pos:end="39:24">gb</name></expr></argument>, <argument pos:start="39:27" pos:end="39:27"><expr pos:start="39:27" pos:end="39:27"><literal type="number" pos:start="39:27" pos:end="39:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="39:31" pos:end="39:62">/* some constant (always 256) */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:11">quality</name>    <operator pos:start="41:16" pos:end="41:16">=</operator> <call pos:start="41:18" pos:end="41:43"><name pos:start="41:18" pos:end="41:38">bytestream2_get_le16u</name><argument_list pos:start="41:39" pos:end="41:43">(<argument pos:start="41:40" pos:end="41:42"><expr pos:start="41:40" pos:end="41:42"><operator pos:start="41:40" pos:end="41:40">&amp;</operator><name pos:start="41:41" pos:end="41:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:44"><expr pos:start="43:5" pos:end="43:43"><name pos:start="43:5" pos:end="43:9">width</name>      <operator pos:start="43:16" pos:end="43:16">=</operator> <call pos:start="43:18" pos:end="43:43"><name pos:start="43:18" pos:end="43:38">bytestream2_get_le16u</name><argument_list pos:start="43:39" pos:end="43:43">(<argument pos:start="43:40" pos:end="43:42"><expr pos:start="43:40" pos:end="43:42"><operator pos:start="43:40" pos:end="43:40">&amp;</operator><name pos:start="43:41" pos:end="43:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:10">height</name>     <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:43"><name pos:start="45:18" pos:end="45:38">bytestream2_get_le16u</name><argument_list pos:start="45:39" pos:end="45:43">(<argument pos:start="45:40" pos:end="45:42"><expr pos:start="45:40" pos:end="45:42"><operator pos:start="45:40" pos:end="45:40">&amp;</operator><name pos:start="45:41" pos:end="45:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><call pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:20">bytestream2_skip</name><argument_list pos:start="47:21" pos:end="47:28">(<argument pos:start="47:22" pos:end="47:24"><expr pos:start="47:22" pos:end="47:24"><operator pos:start="47:22" pos:end="47:22">&amp;</operator><name pos:start="47:23" pos:end="47:24">gb</name></expr></argument>, <argument pos:start="47:27" pos:end="47:27"><expr pos:start="47:27" pos:end="47:27"><literal type="number" pos:start="47:27" pos:end="47:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="47:31" pos:end="47:49">/* some constant */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:44"><expr pos:start="49:5" pos:end="49:43"><name pos:start="49:5" pos:end="49:13">is_pframe</name>  <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:43"><name pos:start="49:18" pos:end="49:38">bytestream2_get_le32u</name><argument_list pos:start="49:39" pos:end="49:43">(<argument pos:start="49:40" pos:end="49:42"><expr pos:start="49:40" pos:end="49:42"><operator pos:start="49:40" pos:end="49:40">&amp;</operator><name pos:start="49:41" pos:end="49:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:44"><expr pos:start="51:5" pos:end="51:43"><name pos:start="51:5" pos:end="51:14">num_coeffs</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="51:43"><name pos:start="51:18" pos:end="51:38">bytestream2_get_byteu</name><argument_list pos:start="51:39" pos:end="51:43">(<argument pos:start="51:40" pos:end="51:42"><expr pos:start="51:40" pos:end="51:42"><operator pos:start="51:40" pos:end="51:40">&amp;</operator><name pos:start="51:41" pos:end="51:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:29"><expr pos:start="53:5" pos:end="53:28"><call pos:start="53:5" pos:end="53:28"><name pos:start="53:5" pos:end="53:20">bytestream2_skip</name><argument_list pos:start="53:21" pos:end="53:28">(<argument pos:start="53:22" pos:end="53:24"><expr pos:start="53:22" pos:end="53:24"><operator pos:start="53:22" pos:end="53:22">&amp;</operator><name pos:start="53:23" pos:end="53:24">gb</name></expr></argument>, <argument pos:start="53:27" pos:end="53:27"><expr pos:start="53:27" pos:end="53:27"><literal type="number" pos:start="53:27" pos:end="53:27">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="53:31" pos:end="53:49">/* some constant */</comment>



    <if_stmt pos:start="57:5" pos:end="97:5"><if pos:start="57:5" pos:end="91:5">if <condition pos:start="57:8" pos:end="57:20">(<expr pos:start="57:9" pos:end="57:19"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:19"><name pos:start="57:10" pos:end="57:12">ctx</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:19">avctx</name></name></expr>)</condition> <block pos:start="57:22" pos:end="91:5">{<block_content pos:start="59:9" pos:end="89:9">

        <decl_stmt pos:start="59:9" pos:end="59:14"><decl pos:start="59:9" pos:end="59:13"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:13">i</name></decl>;</decl_stmt>



        <if_stmt pos:start="63:9" pos:end="71:9"><if pos:start="63:9" pos:end="71:9">if <condition pos:start="63:12" pos:end="65:45">(<expr pos:start="63:13" pos:end="65:44"><operator pos:start="63:13" pos:end="63:13">!</operator><operator pos:start="63:14" pos:end="63:14">(</operator><name pos:start="63:15" pos:end="63:19">width</name> <operator pos:start="63:21" pos:end="63:22">==</operator> <literal type="number" pos:start="63:24" pos:end="63:26">160</literal> <operator pos:start="63:28" pos:end="63:29">&amp;&amp;</operator> <name pos:start="63:31" pos:end="63:36">height</name> <operator pos:start="63:38" pos:end="63:39">==</operator> <literal type="number" pos:start="63:41" pos:end="63:43">120</literal><operator pos:start="63:44" pos:end="63:44">)</operator> <operator pos:start="63:46" pos:end="63:47">&amp;&amp;</operator>

            <operator pos:start="65:13" pos:end="65:13">!</operator><operator pos:start="65:14" pos:end="65:14">(</operator><name pos:start="65:15" pos:end="65:19">width</name> <operator pos:start="65:21" pos:end="65:22">==</operator> <literal type="number" pos:start="65:24" pos:end="65:26">320</literal> <operator pos:start="65:28" pos:end="65:29">&amp;&amp;</operator> <name pos:start="65:31" pos:end="65:36">height</name> <operator pos:start="65:38" pos:end="65:39">==</operator> <literal type="number" pos:start="65:41" pos:end="65:43">240</literal><operator pos:start="65:44" pos:end="65:44">)</operator></expr>)</condition> <block pos:start="65:47" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:39">

            <expr_stmt pos:start="67:13" pos:end="67:67"><expr pos:start="67:13" pos:end="67:66"><call pos:start="67:13" pos:end="67:66"><name pos:start="67:13" pos:end="67:18">av_log</name><argument_list pos:start="67:19" pos:end="67:66">(<argument pos:start="67:20" pos:end="67:24"><expr pos:start="67:20" pos:end="67:24"><name pos:start="67:20" pos:end="67:24">avctx</name></expr></argument>, <argument pos:start="67:27" pos:end="67:38"><expr pos:start="67:27" pos:end="67:38"><name pos:start="67:27" pos:end="67:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:41" pos:end="67:65"><expr pos:start="67:41" pos:end="67:65"><literal type="string" pos:start="67:41" pos:end="67:65">"invalid width/height!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:39">return <expr pos:start="69:20" pos:end="69:38"><name pos:start="69:20" pos:end="69:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:31"><expr pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:11">ctx</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:18">avctx</name></name>     <operator pos:start="75:24" pos:end="75:24">=</operator> <name pos:start="75:26" pos:end="75:30">avctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:31"><expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:13">avctx</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:20">width</name></name>   <operator pos:start="77:24" pos:end="77:24">=</operator> <name pos:start="77:26" pos:end="77:30">width</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:32"><expr pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:13">avctx</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:21">height</name></name>  <operator pos:start="79:24" pos:end="79:24">=</operator> <name pos:start="79:26" pos:end="79:31">height</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:44"><expr pos:start="81:9" pos:end="81:43"><name pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:13">avctx</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:22">pix_fmt</name></name> <operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:43">AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

        <for pos:start="83:9" pos:end="89:9">for <control pos:start="83:13" pos:end="83:31">(<init pos:start="83:14" pos:end="83:19"><expr pos:start="83:14" pos:end="83:18"><name pos:start="83:14" pos:end="83:14">i</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <literal type="number" pos:start="83:18" pos:end="83:18">0</literal></expr>;</init> <condition pos:start="83:21" pos:end="83:26"><expr pos:start="83:21" pos:end="83:25"><name pos:start="83:21" pos:end="83:21">i</name> <operator pos:start="83:23" pos:end="83:23">&lt;</operator> <literal type="number" pos:start="83:25" pos:end="83:25">3</literal></expr>;</condition> <incr pos:start="83:28" pos:end="83:30"><expr pos:start="83:28" pos:end="83:30"><name pos:start="83:28" pos:end="83:28">i</name><operator pos:start="83:29" pos:end="83:30">++</operator></expr></incr>)</control> <block pos:start="83:33" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:68">

            <expr_stmt pos:start="85:13" pos:end="85:68"><expr pos:start="85:13" pos:end="85:67"><name pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:15">ctx</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:28">num_vblocks</name><index pos:start="85:29" pos:end="85:31">[<expr pos:start="85:30" pos:end="85:30"><name pos:start="85:30" pos:end="85:30">i</name></expr>]</index></name> <operator pos:start="85:33" pos:end="85:33">=</operator> <call pos:start="85:35" pos:end="85:67"><name pos:start="85:35" pos:end="85:48">AV_CEIL_RSHIFT</name><argument_list pos:start="85:49" pos:end="85:67">(<argument pos:start="85:50" pos:end="85:55"><expr pos:start="85:50" pos:end="85:55"><name pos:start="85:50" pos:end="85:55">height</name></expr></argument>,   <argument pos:start="85:60" pos:end="85:66"><expr pos:start="85:60" pos:end="85:66"><literal type="number" pos:start="85:60" pos:end="85:62">3</literal> <operator pos:start="85:62" pos:end="85:62">+</operator> <operator pos:start="85:64" pos:end="85:64">!</operator><operator pos:start="85:65" pos:end="85:65">!</operator><name pos:start="85:66" pos:end="85:66">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:68"><expr pos:start="87:13" pos:end="87:67"><name pos:start="87:13" pos:end="87:31"><name pos:start="87:13" pos:end="87:15">ctx</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:28">num_hblocks</name><index pos:start="87:29" pos:end="87:31">[<expr pos:start="87:30" pos:end="87:30"><name pos:start="87:30" pos:end="87:30">i</name></expr>]</index></name> <operator pos:start="87:33" pos:end="87:33">=</operator>                <name pos:start="87:50" pos:end="87:54">width</name> <operator pos:start="87:56" pos:end="87:57">&gt;&gt;</operator> <operator pos:start="87:59" pos:end="87:59">(</operator><literal type="number" pos:start="87:60" pos:end="87:62">3</literal> <operator pos:start="87:62" pos:end="87:62">+</operator> <operator pos:start="87:64" pos:end="87:64">!</operator><operator pos:start="87:65" pos:end="87:65">!</operator><name pos:start="87:66" pos:end="87:66">i</name><operator pos:start="87:67" pos:end="87:67">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="91:7" pos:end="97:5">else if <condition pos:start="91:15" pos:end="91:74">(<expr pos:start="91:16" pos:end="91:73"><name pos:start="91:16" pos:end="91:20">width</name> <operator pos:start="91:22" pos:end="91:23">!=</operator> <name pos:start="91:25" pos:end="91:41"><name pos:start="91:25" pos:end="91:27">ctx</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:34">avctx</name><operator pos:start="91:35" pos:end="91:36">-&gt;</operator><name pos:start="91:37" pos:end="91:41">width</name></name> <operator pos:start="91:43" pos:end="91:44">||</operator> <name pos:start="91:46" pos:end="91:51">height</name> <operator pos:start="91:53" pos:end="91:54">!=</operator> <name pos:start="91:56" pos:end="91:73"><name pos:start="91:56" pos:end="91:58">ctx</name><operator pos:start="91:59" pos:end="91:60">-&gt;</operator><name pos:start="91:61" pos:end="91:65">avctx</name><operator pos:start="91:66" pos:end="91:67">-&gt;</operator><name pos:start="91:68" pos:end="91:73">height</name></name></expr>)</condition> <block pos:start="91:76" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:36">

        <expr_stmt pos:start="93:9" pos:end="93:60"><expr pos:start="93:9" pos:end="93:59"><call pos:start="93:9" pos:end="93:59"><name pos:start="93:9" pos:end="93:29">avpriv_request_sample</name><argument_list pos:start="93:30" pos:end="93:59">(<argument pos:start="93:31" pos:end="93:35"><expr pos:start="93:31" pos:end="93:35"><name pos:start="93:31" pos:end="93:35">avctx</name></expr></argument>, <argument pos:start="93:38" pos:end="93:58"><expr pos:start="93:38" pos:end="93:58"><literal type="string" pos:start="93:38" pos:end="93:58">"Resolution changing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:36">return <expr pos:start="95:16" pos:end="95:35"><name pos:start="95:16" pos:end="95:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:62">(<expr pos:start="101:9" pos:end="101:61"><name pos:start="101:9" pos:end="101:17">is_pframe</name> <operator pos:start="101:19" pos:end="101:20">&amp;&amp;</operator> <operator pos:start="101:22" pos:end="101:22">!</operator><name pos:start="101:23" pos:end="101:50"><name pos:start="101:23" pos:end="101:25">ctx</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:33">frames</name><index pos:start="101:34" pos:end="101:50">[<expr pos:start="101:35" pos:end="101:49"><name pos:start="101:35" pos:end="101:49"><name pos:start="101:35" pos:end="101:37">ctx</name><operator pos:start="101:38" pos:end="101:39">-&gt;</operator><name pos:start="101:40" pos:end="101:49">prev_index</name></name></expr>]</index></name><operator pos:start="101:51" pos:end="101:51">.</operator><name pos:start="101:52" pos:end="101:61"><name pos:start="101:52" pos:end="101:52">f</name><operator pos:start="101:53" pos:end="101:54">-&gt;</operator><name pos:start="101:55" pos:end="101:58">data</name><index pos:start="101:59" pos:end="101:61">[<expr pos:start="101:60" pos:end="101:60"><literal type="number" pos:start="101:60" pos:end="101:60">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="101:64" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:35">

        <expr_stmt pos:start="103:9" pos:end="103:75"><expr pos:start="103:9" pos:end="103:74"><call pos:start="103:9" pos:end="103:74"><name pos:start="103:9" pos:end="103:14">av_log</name><argument_list pos:start="103:15" pos:end="103:74">(<argument pos:start="103:16" pos:end="103:20"><expr pos:start="103:16" pos:end="103:20"><name pos:start="103:16" pos:end="103:20">avctx</name></expr></argument>, <argument pos:start="103:23" pos:end="103:34"><expr pos:start="103:23" pos:end="103:34"><name pos:start="103:23" pos:end="103:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:37" pos:end="103:73"><expr pos:start="103:37" pos:end="103:73"><literal type="string" pos:start="103:37" pos:end="103:73">"decoding must start with keyframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:35">return <expr pos:start="105:16" pos:end="105:34"><name pos:start="105:16" pos:end="105:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:66"><expr pos:start="111:5" pos:end="111:65"><call pos:start="111:5" pos:end="111:65"><name pos:start="111:5" pos:end="111:28">ff_thread_release_buffer</name><argument_list pos:start="111:29" pos:end="111:65">(<argument pos:start="111:30" pos:end="111:34"><expr pos:start="111:30" pos:end="111:34"><name pos:start="111:30" pos:end="111:34">avctx</name></expr></argument>, <argument pos:start="111:37" pos:end="111:64"><expr pos:start="111:37" pos:end="111:64"><operator pos:start="111:37" pos:end="111:37">&amp;</operator><name pos:start="111:38" pos:end="111:64"><name pos:start="111:38" pos:end="111:40">ctx</name><operator pos:start="111:41" pos:end="111:42">-&gt;</operator><name pos:start="111:43" pos:end="111:48">frames</name><index pos:start="111:49" pos:end="111:64">[<expr pos:start="111:50" pos:end="111:63"><name pos:start="111:50" pos:end="111:63"><name pos:start="111:50" pos:end="111:52">ctx</name><operator pos:start="111:53" pos:end="111:54">-&gt;</operator><name pos:start="111:55" pos:end="111:63">cur_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="115:77"><expr pos:start="113:5" pos:end="115:76"><name pos:start="113:5" pos:end="113:31"><name pos:start="113:5" pos:end="113:7">ctx</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:15">frames</name><index pos:start="113:16" pos:end="113:31">[<expr pos:start="113:17" pos:end="113:30"><name pos:start="113:17" pos:end="113:30"><name pos:start="113:17" pos:end="113:19">ctx</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:30">cur_index</name></name></expr>]</index></name><operator pos:start="113:32" pos:end="113:32">.</operator><name pos:start="113:33" pos:end="113:44"><name pos:start="113:33" pos:end="113:33">f</name><operator pos:start="113:34" pos:end="113:35">-&gt;</operator><name pos:start="113:36" pos:end="113:44">pict_type</name></name> <operator pos:start="113:46" pos:end="113:46">=</operator> <ternary pos:start="113:48" pos:end="115:76"><condition pos:start="113:48" pos:end="113:58"><expr pos:start="113:48" pos:end="113:56"><name pos:start="113:48" pos:end="113:56">is_pframe</name></expr> ?</condition><then pos:start="113:60" pos:end="113:76"> <expr pos:start="113:60" pos:end="113:76"><name pos:start="113:60" pos:end="113:76">AV_PICTURE_TYPE_P</name></expr> </then><else pos:start="113:78" pos:end="115:76">:

                                                           <expr pos:start="115:60" pos:end="115:76"><name pos:start="115:60" pos:end="115:76">AV_PICTURE_TYPE_I</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="125:5"><if pos:start="117:5" pos:end="125:5">if <condition pos:start="117:8" pos:end="119:65">(<expr pos:start="117:9" pos:end="119:64"><operator pos:start="117:9" pos:end="117:9">(</operator><name pos:start="117:10" pos:end="117:12">res</name> <operator pos:start="117:14" pos:end="117:14">=</operator> <call pos:start="117:16" pos:end="119:59"><name pos:start="117:16" pos:end="117:35">ff_thread_get_buffer</name><argument_list pos:start="117:36" pos:end="119:59">(<argument pos:start="117:37" pos:end="117:41"><expr pos:start="117:37" pos:end="117:41"><name pos:start="117:37" pos:end="117:41">avctx</name></expr></argument>, <argument pos:start="117:44" pos:end="117:71"><expr pos:start="117:44" pos:end="117:71"><operator pos:start="117:44" pos:end="117:44">&amp;</operator><name pos:start="117:45" pos:end="117:71"><name pos:start="117:45" pos:end="117:47">ctx</name><operator pos:start="117:48" pos:end="117:49">-&gt;</operator><name pos:start="117:50" pos:end="117:55">frames</name><index pos:start="117:56" pos:end="117:71">[<expr pos:start="117:57" pos:end="117:70"><name pos:start="117:57" pos:end="117:70"><name pos:start="117:57" pos:end="117:59">ctx</name><operator pos:start="117:60" pos:end="117:61">-&gt;</operator><name pos:start="117:62" pos:end="117:70">cur_index</name></name></expr>]</index></name></expr></argument>,

                                    <argument pos:start="119:37" pos:end="119:58"><expr pos:start="119:37" pos:end="119:58"><name pos:start="119:37" pos:end="119:58">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator pos:start="119:60" pos:end="119:60">)</operator> <operator pos:start="119:62" pos:end="119:62">&lt;</operator> <literal type="number" pos:start="119:64" pos:end="119:64">0</literal></expr>)</condition> <block pos:start="119:67" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:19">

        <expr_stmt pos:start="121:9" pos:end="121:61"><expr pos:start="121:9" pos:end="121:60"><call pos:start="121:9" pos:end="121:60"><name pos:start="121:9" pos:end="121:14">av_log</name><argument_list pos:start="121:15" pos:end="121:60">(<argument pos:start="121:16" pos:end="121:20"><expr pos:start="121:16" pos:end="121:20"><name pos:start="121:16" pos:end="121:20">avctx</name></expr></argument>, <argument pos:start="121:23" pos:end="121:34"><expr pos:start="121:23" pos:end="121:34"><name pos:start="121:23" pos:end="121:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:37" pos:end="121:59"><expr pos:start="121:37" pos:end="121:59"><literal type="string" pos:start="121:37" pos:end="121:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:19">return <expr pos:start="123:16" pos:end="123:18"><name pos:start="123:16" pos:end="123:18">res</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:42"><expr pos:start="129:5" pos:end="129:41"><name pos:start="129:5" pos:end="129:24"><name pos:start="129:5" pos:end="129:7">ctx</name><operator pos:start="129:8" pos:end="129:9">-&gt;</operator><name pos:start="129:10" pos:end="129:24">next_prev_index</name></name> <operator pos:start="129:26" pos:end="129:26">=</operator> <name pos:start="129:28" pos:end="129:41"><name pos:start="129:28" pos:end="129:30">ctx</name><operator pos:start="129:31" pos:end="129:32">-&gt;</operator><name pos:start="129:33" pos:end="129:41">cur_index</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:53"><expr pos:start="131:5" pos:end="131:52"><name pos:start="131:5" pos:end="131:23"><name pos:start="131:5" pos:end="131:7">ctx</name><operator pos:start="131:8" pos:end="131:9">-&gt;</operator><name pos:start="131:10" pos:end="131:23">next_cur_index</name></name>  <operator pos:start="131:26" pos:end="131:26">=</operator> <operator pos:start="131:28" pos:end="131:28">(</operator><name pos:start="131:29" pos:end="131:42"><name pos:start="131:29" pos:end="131:31">ctx</name><operator pos:start="131:32" pos:end="131:33">-&gt;</operator><name pos:start="131:34" pos:end="131:42">cur_index</name></name> <operator pos:start="131:44" pos:end="131:44">-</operator> <literal type="number" pos:start="131:46" pos:end="131:46">1</literal><operator pos:start="131:47" pos:end="131:47">)</operator> <operator pos:start="131:49" pos:end="131:49">&amp;</operator> <literal type="number" pos:start="131:51" pos:end="131:52">15</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:34"><expr pos:start="135:5" pos:end="135:33"><call pos:start="135:5" pos:end="135:33"><name pos:start="135:5" pos:end="135:26">ff_thread_finish_setup</name><argument_list pos:start="135:27" pos:end="135:33">(<argument pos:start="135:28" pos:end="135:32"><expr pos:start="135:28" pos:end="135:32"><name pos:start="135:28" pos:end="135:32">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:78"><expr pos:start="139:5" pos:end="139:77"><call pos:start="139:5" pos:end="139:77"><name pos:start="139:5" pos:end="139:25">av_fast_padded_malloc</name><argument_list pos:start="139:26" pos:end="139:77">(<argument pos:start="139:27" pos:end="139:40"><expr pos:start="139:27" pos:end="139:40"><operator pos:start="139:27" pos:end="139:27">&amp;</operator><name pos:start="139:28" pos:end="139:40"><name pos:start="139:28" pos:end="139:30">ctx</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:40">swap_buf</name></name></expr></argument>, <argument pos:start="139:43" pos:end="139:61"><expr pos:start="139:43" pos:end="139:61"><operator pos:start="139:43" pos:end="139:43">&amp;</operator><name pos:start="139:44" pos:end="139:61"><name pos:start="139:44" pos:end="139:46">ctx</name><operator pos:start="139:47" pos:end="139:48">-&gt;</operator><name pos:start="139:49" pos:end="139:61">swap_buf_size</name></name></expr></argument>, <argument pos:start="139:64" pos:end="139:76"><expr pos:start="139:64" pos:end="139:76"><name pos:start="139:64" pos:end="139:76">swap_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="143:31"><if pos:start="141:5" pos:end="143:31">if <condition pos:start="141:8" pos:end="141:23">(<expr pos:start="141:9" pos:end="141:22"><operator pos:start="141:9" pos:end="141:9">!</operator><name pos:start="141:10" pos:end="141:22"><name pos:start="141:10" pos:end="141:12">ctx</name><operator pos:start="141:13" pos:end="141:14">-&gt;</operator><name pos:start="141:15" pos:end="141:22">swap_buf</name></name></expr>)</condition><block type="pseudo" pos:start="143:9" pos:end="143:31"><block_content pos:start="143:9" pos:end="143:31">

        <return pos:start="143:9" pos:end="143:31">return <expr pos:start="143:16" pos:end="143:30"><call pos:start="143:16" pos:end="143:30"><name pos:start="143:16" pos:end="143:22">AVERROR</name><argument_list pos:start="143:23" pos:end="143:30">(<argument pos:start="143:24" pos:end="143:29"><expr pos:start="143:24" pos:end="143:29"><name pos:start="143:24" pos:end="143:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="151:45"><expr pos:start="147:5" pos:end="151:44"><call pos:start="147:5" pos:end="151:44"><name pos:start="147:5" pos:end="147:24"><name pos:start="147:5" pos:end="147:7">ctx</name><operator pos:start="147:8" pos:end="147:9">-&gt;</operator><name pos:start="147:10" pos:end="147:14">bbdsp</name><operator pos:start="147:15" pos:end="147:15">.</operator><name pos:start="147:16" pos:end="147:24">bswap_buf</name></name><argument_list pos:start="147:25" pos:end="151:44">(<argument pos:start="147:26" pos:end="147:38"><expr pos:start="147:26" pos:end="147:38"><name pos:start="147:26" pos:end="147:38"><name pos:start="147:26" pos:end="147:28">ctx</name><operator pos:start="147:29" pos:end="147:30">-&gt;</operator><name pos:start="147:31" pos:end="147:38">swap_buf</name></name></expr></argument>,

                         <argument pos:start="149:26" pos:end="149:69"><expr pos:start="149:26" pos:end="149:69"><operator pos:start="149:26" pos:end="149:26">(</operator><specifier pos:start="149:27" pos:end="149:31">const</specifier> <name pos:start="149:33" pos:end="149:40">uint32_t</name> <operator pos:start="149:42" pos:end="149:42">*</operator><operator pos:start="149:43" pos:end="149:43">)</operator> <operator pos:start="149:45" pos:end="149:45">(</operator><name pos:start="149:46" pos:end="149:48">buf</name> <operator pos:start="149:50" pos:end="149:50">+</operator> <name pos:start="149:52" pos:end="149:68">MIMIC_HEADER_SIZE</name><operator pos:start="149:69" pos:end="149:69">)</operator></expr></argument>,

                         <argument pos:start="151:26" pos:end="151:43"><expr pos:start="151:26" pos:end="151:43"><name pos:start="151:26" pos:end="151:38">swap_buf_size</name> <operator pos:start="151:40" pos:end="151:41">&gt;&gt;</operator> <literal type="number" pos:start="151:43" pos:end="151:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:63"><expr pos:start="153:5" pos:end="153:62"><call pos:start="153:5" pos:end="153:62"><name pos:start="153:5" pos:end="153:17">init_get_bits</name><argument_list pos:start="153:18" pos:end="153:62">(<argument pos:start="153:19" pos:end="153:26"><expr pos:start="153:19" pos:end="153:26"><operator pos:start="153:19" pos:end="153:19">&amp;</operator><name pos:start="153:20" pos:end="153:26"><name pos:start="153:20" pos:end="153:22">ctx</name><operator pos:start="153:23" pos:end="153:24">-&gt;</operator><name pos:start="153:25" pos:end="153:26">gb</name></name></expr></argument>, <argument pos:start="153:29" pos:end="153:41"><expr pos:start="153:29" pos:end="153:41"><name pos:start="153:29" pos:end="153:41"><name pos:start="153:29" pos:end="153:31">ctx</name><operator pos:start="153:32" pos:end="153:33">-&gt;</operator><name pos:start="153:34" pos:end="153:41">swap_buf</name></name></expr></argument>, <argument pos:start="153:44" pos:end="153:61"><expr pos:start="153:44" pos:end="153:61"><name pos:start="153:44" pos:end="153:56">swap_buf_size</name> <operator pos:start="153:58" pos:end="153:59">&lt;&lt;</operator> <literal type="number" pos:start="153:61" pos:end="153:61">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:55"><expr pos:start="157:5" pos:end="157:54"><name pos:start="157:5" pos:end="157:7">res</name> <operator pos:start="157:9" pos:end="157:9">=</operator> <call pos:start="157:11" pos:end="157:54"><name pos:start="157:11" pos:end="157:16">decode</name><argument_list pos:start="157:17" pos:end="157:54">(<argument pos:start="157:18" pos:end="157:20"><expr pos:start="157:18" pos:end="157:20"><name pos:start="157:18" pos:end="157:20">ctx</name></expr></argument>, <argument pos:start="157:23" pos:end="157:29"><expr pos:start="157:23" pos:end="157:29"><name pos:start="157:23" pos:end="157:29">quality</name></expr></argument>, <argument pos:start="157:32" pos:end="157:41"><expr pos:start="157:32" pos:end="157:41"><name pos:start="157:32" pos:end="157:41">num_coeffs</name></expr></argument>, <argument pos:start="157:44" pos:end="157:53"><expr pos:start="157:44" pos:end="157:53"><operator pos:start="157:44" pos:end="157:44">!</operator><name pos:start="157:45" pos:end="157:53">is_pframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:72"><expr pos:start="159:5" pos:end="159:71"><call pos:start="159:5" pos:end="159:71"><name pos:start="159:5" pos:end="159:29">ff_thread_report_progress</name><argument_list pos:start="159:30" pos:end="159:71">(<argument pos:start="159:31" pos:end="159:58"><expr pos:start="159:31" pos:end="159:58"><operator pos:start="159:31" pos:end="159:31">&amp;</operator><name pos:start="159:32" pos:end="159:58"><name pos:start="159:32" pos:end="159:34">ctx</name><operator pos:start="159:35" pos:end="159:36">-&gt;</operator><name pos:start="159:37" pos:end="159:42">frames</name><index pos:start="159:43" pos:end="159:58">[<expr pos:start="159:44" pos:end="159:57"><name pos:start="159:44" pos:end="159:57"><name pos:start="159:44" pos:end="159:46">ctx</name><operator pos:start="159:47" pos:end="159:48">-&gt;</operator><name pos:start="159:49" pos:end="159:57">cur_index</name></name></expr>]</index></name></expr></argument>, <argument pos:start="159:61" pos:end="159:67"><expr pos:start="159:61" pos:end="159:67"><name pos:start="159:61" pos:end="159:67">INT_MAX</name></expr></argument>, <argument pos:start="159:70" pos:end="159:70"><expr pos:start="159:70" pos:end="159:70"><literal type="number" pos:start="159:70" pos:end="159:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="169:5"><if pos:start="161:5" pos:end="169:5">if <condition pos:start="161:8" pos:end="161:16">(<expr pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:11">res</name> <operator pos:start="161:13" pos:end="161:13">&lt;</operator> <literal type="number" pos:start="161:15" pos:end="161:15">0</literal></expr>)</condition> <block pos:start="161:18" pos:end="169:5">{<block_content pos:start="163:9" pos:end="167:19">

        <if_stmt pos:start="163:9" pos:end="165:74"><if pos:start="163:9" pos:end="165:74">if <condition pos:start="163:12" pos:end="163:59">(<expr pos:start="163:13" pos:end="163:58"><operator pos:start="163:13" pos:end="163:13">!</operator><operator pos:start="163:14" pos:end="163:14">(</operator><name pos:start="163:15" pos:end="163:39"><name pos:start="163:15" pos:end="163:19">avctx</name><operator pos:start="163:20" pos:end="163:21">-&gt;</operator><name pos:start="163:22" pos:end="163:39">active_thread_type</name></name> <operator pos:start="163:41" pos:end="163:41">&amp;</operator> <name pos:start="163:43" pos:end="163:57">FF_THREAD_FRAME</name><operator pos:start="163:58" pos:end="163:58">)</operator></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:74"><block_content pos:start="165:13" pos:end="165:74">

            <expr_stmt pos:start="165:13" pos:end="165:74"><expr pos:start="165:13" pos:end="165:73"><call pos:start="165:13" pos:end="165:73"><name pos:start="165:13" pos:end="165:36">ff_thread_release_buffer</name><argument_list pos:start="165:37" pos:end="165:73">(<argument pos:start="165:38" pos:end="165:42"><expr pos:start="165:38" pos:end="165:42"><name pos:start="165:38" pos:end="165:42">avctx</name></expr></argument>, <argument pos:start="165:45" pos:end="165:72"><expr pos:start="165:45" pos:end="165:72"><operator pos:start="165:45" pos:end="165:45">&amp;</operator><name pos:start="165:46" pos:end="165:72"><name pos:start="165:46" pos:end="165:48">ctx</name><operator pos:start="165:49" pos:end="165:50">-&gt;</operator><name pos:start="165:51" pos:end="165:56">frames</name><index pos:start="165:57" pos:end="165:72">[<expr pos:start="165:58" pos:end="165:71"><name pos:start="165:58" pos:end="165:71"><name pos:start="165:58" pos:end="165:60">ctx</name><operator pos:start="165:61" pos:end="165:62">-&gt;</operator><name pos:start="165:63" pos:end="165:71">cur_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="167:9" pos:end="167:19">return <expr pos:start="167:16" pos:end="167:18"><name pos:start="167:16" pos:end="167:18">res</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="173:5" pos:end="175:19"><if pos:start="173:5" pos:end="175:19">if <condition pos:start="173:8" pos:end="173:70">(<expr pos:start="173:9" pos:end="173:69"><operator pos:start="173:9" pos:end="173:9">(</operator><name pos:start="173:10" pos:end="173:12">res</name> <operator pos:start="173:14" pos:end="173:14">=</operator> <call pos:start="173:16" pos:end="173:64"><name pos:start="173:16" pos:end="173:27">av_frame_ref</name><argument_list pos:start="173:28" pos:end="173:64">(<argument pos:start="173:29" pos:end="173:32"><expr pos:start="173:29" pos:end="173:32"><name pos:start="173:29" pos:end="173:32">data</name></expr></argument>, <argument pos:start="173:35" pos:end="173:63"><expr pos:start="173:35" pos:end="173:63"><name pos:start="173:35" pos:end="173:61"><name pos:start="173:35" pos:end="173:37">ctx</name><operator pos:start="173:38" pos:end="173:39">-&gt;</operator><name pos:start="173:40" pos:end="173:45">frames</name><index pos:start="173:46" pos:end="173:61">[<expr pos:start="173:47" pos:end="173:60"><name pos:start="173:47" pos:end="173:60"><name pos:start="173:47" pos:end="173:49">ctx</name><operator pos:start="173:50" pos:end="173:51">-&gt;</operator><name pos:start="173:52" pos:end="173:60">cur_index</name></name></expr>]</index></name><operator pos:start="173:62" pos:end="173:62">.</operator><name pos:start="173:63" pos:end="173:63">f</name></expr></argument>)</argument_list></call><operator pos:start="173:65" pos:end="173:65">)</operator> <operator pos:start="173:67" pos:end="173:67">&lt;</operator> <literal type="number" pos:start="173:69" pos:end="173:69">0</literal></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:19"><block_content pos:start="175:9" pos:end="175:19">

        <return pos:start="175:9" pos:end="175:19">return <expr pos:start="175:16" pos:end="175:18"><name pos:start="175:16" pos:end="175:18">res</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:24"><expr pos:start="177:5" pos:end="177:23"><operator pos:start="177:5" pos:end="177:5">*</operator><name pos:start="177:6" pos:end="177:14">got_frame</name>      <operator pos:start="177:21" pos:end="177:21">=</operator> <literal type="number" pos:start="177:23" pos:end="177:23">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:26"><expr pos:start="181:5" pos:end="181:25"><call pos:start="181:5" pos:end="181:25"><name pos:start="181:5" pos:end="181:19">flip_swap_frame</name><argument_list pos:start="181:20" pos:end="181:25">(<argument pos:start="181:21" pos:end="181:24"><expr pos:start="181:21" pos:end="181:24"><name pos:start="181:21" pos:end="181:24">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:43"><expr pos:start="185:5" pos:end="185:42"><name pos:start="185:5" pos:end="185:19"><name pos:start="185:5" pos:end="185:7">ctx</name><operator pos:start="185:8" pos:end="185:9">-&gt;</operator><name pos:start="185:10" pos:end="185:19">prev_index</name></name> <operator pos:start="185:21" pos:end="185:21">=</operator> <name pos:start="185:23" pos:end="185:42"><name pos:start="185:23" pos:end="185:25">ctx</name><operator pos:start="185:26" pos:end="185:27">-&gt;</operator><name pos:start="185:28" pos:end="185:42">next_prev_index</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:42"><expr pos:start="187:5" pos:end="187:41"><name pos:start="187:5" pos:end="187:18"><name pos:start="187:5" pos:end="187:7">ctx</name><operator pos:start="187:8" pos:end="187:9">-&gt;</operator><name pos:start="187:10" pos:end="187:18">cur_index</name></name>  <operator pos:start="187:21" pos:end="187:21">=</operator> <name pos:start="187:23" pos:end="187:41"><name pos:start="187:23" pos:end="187:25">ctx</name><operator pos:start="187:26" pos:end="187:27">-&gt;</operator><name pos:start="187:28" pos:end="187:41">next_cur_index</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="191:5" pos:end="191:73">/* Only release frames that aren't used for backreferences anymore */</comment>

    <expr_stmt pos:start="193:5" pos:end="193:66"><expr pos:start="193:5" pos:end="193:65"><call pos:start="193:5" pos:end="193:65"><name pos:start="193:5" pos:end="193:28">ff_thread_release_buffer</name><argument_list pos:start="193:29" pos:end="193:65">(<argument pos:start="193:30" pos:end="193:34"><expr pos:start="193:30" pos:end="193:34"><name pos:start="193:30" pos:end="193:34">avctx</name></expr></argument>, <argument pos:start="193:37" pos:end="193:64"><expr pos:start="193:37" pos:end="193:64"><operator pos:start="193:37" pos:end="193:37">&amp;</operator><name pos:start="193:38" pos:end="193:64"><name pos:start="193:38" pos:end="193:40">ctx</name><operator pos:start="193:41" pos:end="193:42">-&gt;</operator><name pos:start="193:43" pos:end="193:48">frames</name><index pos:start="193:49" pos:end="193:64">[<expr pos:start="193:50" pos:end="193:63"><name pos:start="193:50" pos:end="193:63"><name pos:start="193:50" pos:end="193:52">ctx</name><operator pos:start="193:53" pos:end="193:54">-&gt;</operator><name pos:start="193:55" pos:end="193:63">cur_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="197:5" pos:end="197:20">return <expr pos:start="197:12" pos:end="197:19"><name pos:start="197:12" pos:end="197:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
