<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21832.c" pos:tabs="8"><function pos:start="1:1" pos:end="23:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">uint8_t</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:28">scsi_get_buf</name><parameter_list pos:start="1:29" pos:end="1:57">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:39">SCSIDevice</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">d</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:52">uint32_t</name></type> <name pos:start="1:54" pos:end="1:56">tag</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="23:1">{<block_content pos:start="5:5" pos:end="21:38">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">SCSIDiskState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:56">= <expr pos:start="5:24" pos:end="5:56"><call pos:start="5:24" pos:end="5:56"><name pos:start="5:24" pos:end="5:32">DO_UPCAST</name><argument_list pos:start="5:33" pos:end="5:56">(<argument pos:start="5:34" pos:end="5:46"><expr pos:start="5:34" pos:end="5:46"><name pos:start="5:34" pos:end="5:46">SCSIDiskState</name></expr></argument>, <argument pos:start="5:49" pos:end="5:52"><expr pos:start="5:49" pos:end="5:52"><name pos:start="5:49" pos:end="5:52">qdev</name></expr></argument>, <argument pos:start="5:55" pos:end="5:55"><expr pos:start="5:55" pos:end="5:55"><name pos:start="5:55" pos:end="5:55">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">SCSIDiskReq</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:34"><expr pos:start="11:5" pos:end="11:33"><name pos:start="11:5" pos:end="11:5">r</name> <operator pos:start="11:7" pos:end="11:7">=</operator> <call pos:start="11:9" pos:end="11:33"><name pos:start="11:9" pos:end="11:25">scsi_find_request</name><argument_list pos:start="11:26" pos:end="11:33">(<argument pos:start="11:27" pos:end="11:27"><expr pos:start="11:27" pos:end="11:27"><name pos:start="11:27" pos:end="11:27">s</name></expr></argument>, <argument pos:start="11:30" pos:end="11:32"><expr pos:start="11:30" pos:end="11:32"><name pos:start="11:30" pos:end="11:32">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:11">(<expr pos:start="13:9" pos:end="13:10"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:10">r</name></expr>)</condition> <block pos:start="13:13" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:20">

        <expr_stmt pos:start="15:9" pos:end="15:43"><expr pos:start="15:9" pos:end="15:42"><call pos:start="15:9" pos:end="15:42"><name pos:start="15:9" pos:end="15:12">BADF</name><argument_list pos:start="15:13" pos:end="15:42">(<argument pos:start="15:14" pos:end="15:36"><expr pos:start="15:14" pos:end="15:36"><literal type="string" pos:start="15:14" pos:end="15:36">"Bad buffer tag 0x%x\n"</literal></expr></argument>, <argument pos:start="15:39" pos:end="15:41"><expr pos:start="15:39" pos:end="15:41"><name pos:start="15:39" pos:end="15:41">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="21:5" pos:end="21:38">return <expr pos:start="21:12" pos:end="21:37"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:19">uint8_t</name> <operator pos:start="21:21" pos:end="21:21">*</operator><operator pos:start="21:22" pos:end="21:22">)</operator><name pos:start="21:23" pos:end="21:37"><name pos:start="21:23" pos:end="21:23">r</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:28">iov</name><operator pos:start="21:29" pos:end="21:29">.</operator><name pos:start="21:30" pos:end="21:37">iov_base</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
