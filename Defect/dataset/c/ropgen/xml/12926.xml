<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12926.c" pos:tabs="8"><function pos:start="1:1" pos:end="150:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">avcodec_copy_context</name><parameter_list pos:start="1:25" pos:end="1:73">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:45">dest</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:72"><decl pos:start="1:48" pos:end="1:72"><type pos:start="1:48" pos:end="1:72"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:67">AVCodecContext</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">src</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="150:1">{<block_content pos:start="5:5" pos:end="148:27">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">AVCodec</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:29">orig_codec</name> <init pos:start="5:31" pos:end="5:43">= <expr pos:start="5:33" pos:end="5:43"><name pos:start="5:33" pos:end="5:43"><name pos:start="5:33" pos:end="5:36">dest</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:43">codec</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:27">orig_priv_data</name> <init pos:start="7:29" pos:end="7:45">= <expr pos:start="7:31" pos:end="7:45"><name pos:start="7:31" pos:end="7:45"><name pos:start="7:31" pos:end="7:34">dest</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:45">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="21:5"><if pos:start="11:5" pos:end="21:5">if <condition pos:start="11:8" pos:end="11:30">(<expr pos:start="11:9" pos:end="11:29"><call pos:start="11:9" pos:end="11:29"><name pos:start="11:9" pos:end="11:23">avcodec_is_open</name><argument_list pos:start="11:24" pos:end="11:29">(<argument pos:start="11:25" pos:end="11:28"><expr pos:start="11:25" pos:end="11:28"><name pos:start="11:25" pos:end="11:28">dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:32" pos:end="21:5">{<block_content pos:start="13:9" pos:end="19:31"> <comment type="line" pos:start="11:34" pos:end="11:80">// check that the dest context is uninitialized</comment>

        <expr_stmt pos:start="13:9" pos:end="17:26"><expr pos:start="13:9" pos:end="17:25"><call pos:start="13:9" pos:end="17:25"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="17:25">(<argument pos:start="13:16" pos:end="13:19"><expr pos:start="13:16" pos:end="13:19"><name pos:start="13:16" pos:end="13:19">dest</name></expr></argument>, <argument pos:start="13:22" pos:end="13:33"><expr pos:start="13:22" pos:end="13:33"><name pos:start="13:22" pos:end="13:33">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="15:16" pos:end="15:78"><expr pos:start="15:16" pos:end="15:78"><literal type="string" pos:start="15:16" pos:end="15:78">"Tried to copy AVCodecContext %p into already-initialized %p\n"</literal></expr></argument>,

               <argument pos:start="17:16" pos:end="17:18"><expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">src</name></expr></argument>, <argument pos:start="17:21" pos:end="17:24"><expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:29"><expr pos:start="25:5" pos:end="25:28"><call pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:22">copy_context_reset</name><argument_list pos:start="25:23" pos:end="25:28">(<argument pos:start="25:24" pos:end="25:27"><expr pos:start="25:24" pos:end="25:27"><name pos:start="25:24" pos:end="25:27">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><call pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:10">memcpy</name><argument_list pos:start="29:11" pos:end="29:36">(<argument pos:start="29:12" pos:end="29:15"><expr pos:start="29:12" pos:end="29:15"><name pos:start="29:12" pos:end="29:15">dest</name></expr></argument>, <argument pos:start="29:18" pos:end="29:20"><expr pos:start="29:18" pos:end="29:20"><name pos:start="29:18" pos:end="29:20">src</name></expr></argument>, <argument pos:start="29:23" pos:end="29:35"><expr pos:start="29:23" pos:end="29:35"><sizeof pos:start="29:23" pos:end="29:35">sizeof<argument_list pos:start="29:29" pos:end="29:35">(<argument pos:start="29:30" pos:end="29:34"><expr pos:start="29:30" pos:end="29:34"><operator pos:start="29:30" pos:end="29:30">*</operator><name pos:start="29:31" pos:end="29:34">dest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:27"><expr pos:start="31:5" pos:end="31:26"><call pos:start="31:5" pos:end="31:26"><name pos:start="31:5" pos:end="31:15">av_opt_copy</name><argument_list pos:start="31:16" pos:end="31:26">(<argument pos:start="31:17" pos:end="31:20"><expr pos:start="31:17" pos:end="31:20"><name pos:start="31:17" pos:end="31:20">dest</name></expr></argument>, <argument pos:start="31:23" pos:end="31:25"><expr pos:start="31:23" pos:end="31:25"><name pos:start="31:23" pos:end="31:25">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:43"><expr pos:start="35:5" pos:end="35:42"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:8">dest</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:19">priv_data</name></name>       <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:42">orig_priv_data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:39"><expr pos:start="37:5" pos:end="37:38"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:8">dest</name><operator pos:start="37:9" pos:end="37:10">-&gt;</operator><name pos:start="37:11" pos:end="37:15">codec</name></name>           <operator pos:start="37:27" pos:end="37:27">=</operator> <name pos:start="37:29" pos:end="37:38">orig_codec</name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="45:52"><if pos:start="41:5" pos:end="45:52">if <condition pos:start="41:8" pos:end="43:47">(<expr pos:start="41:9" pos:end="43:46"><name pos:start="41:9" pos:end="41:22">orig_priv_data</name> <operator pos:start="41:24" pos:end="41:25">&amp;&amp;</operator> <name pos:start="41:27" pos:end="41:36"><name pos:start="41:27" pos:end="41:29">src</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:36">codec</name></name> <operator pos:start="41:38" pos:end="41:39">&amp;&amp;</operator> <name pos:start="41:41" pos:end="41:62"><name pos:start="41:41" pos:end="41:43">src</name><operator pos:start="41:44" pos:end="41:45">-&gt;</operator><name pos:start="41:46" pos:end="41:50">codec</name><operator pos:start="41:51" pos:end="41:52">-&gt;</operator><name pos:start="41:53" pos:end="41:62">priv_class</name></name> <operator pos:start="41:64" pos:end="41:65">&amp;&amp;</operator>

        <name pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:12">dest</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:19">codec</name></name> <operator pos:start="43:21" pos:end="43:22">&amp;&amp;</operator> <name pos:start="43:24" pos:end="43:46"><name pos:start="43:24" pos:end="43:27">dest</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:34">codec</name><operator pos:start="43:35" pos:end="43:36">-&gt;</operator><name pos:start="43:37" pos:end="43:46">priv_class</name></name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:52"><block_content pos:start="45:9" pos:end="45:52">

        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><call pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:19">av_opt_copy</name><argument_list pos:start="45:20" pos:end="45:51">(<argument pos:start="45:21" pos:end="45:34"><expr pos:start="45:21" pos:end="45:34"><name pos:start="45:21" pos:end="45:34">orig_priv_data</name></expr></argument>, <argument pos:start="45:37" pos:end="45:50"><expr pos:start="45:37" pos:end="45:50"><name pos:start="45:37" pos:end="45:50"><name pos:start="45:37" pos:end="45:39">src</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:50">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





    <comment type="block" pos:start="51:5" pos:end="51:74">/* set values specific to opened codecs back to their default state */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:33"><expr pos:start="53:5" pos:end="53:32"><name pos:start="53:5" pos:end="53:22"><name pos:start="53:5" pos:end="53:8">dest</name><operator pos:start="53:9" pos:end="53:10">-&gt;</operator><name pos:start="53:11" pos:end="53:22">slice_offset</name></name>    <operator pos:start="53:27" pos:end="53:27">=</operator> <name pos:start="53:29" pos:end="53:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:8">dest</name><operator pos:start="55:9" pos:end="55:10">-&gt;</operator><name pos:start="55:11" pos:end="55:17">hwaccel</name></name>         <operator pos:start="55:27" pos:end="55:27">=</operator> <name pos:start="55:29" pos:end="55:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:8">dest</name><operator pos:start="57:9" pos:end="57:10">-&gt;</operator><name pos:start="57:11" pos:end="57:18">internal</name></name>        <operator pos:start="57:27" pos:end="57:27">=</operator> <name pos:start="57:29" pos:end="57:32">NULL</name></expr>;</expr_stmt>

<cpp:if pos:start="59:1" pos:end="59:22">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:22"><name pos:start="59:5" pos:end="59:22">FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt pos:start="61:1" pos:end="63:33"><decl pos:start="61:1" pos:end="63:32"><type pos:start="61:1" pos:end="61:31"><name pos:start="61:1" pos:end="61:31">FF_DISABLE_DEPRECATION_WARNINGS</name></type>

    <name pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:8">dest</name><operator pos:start="63:9" pos:end="63:10">-&gt;</operator><name pos:start="63:11" pos:end="63:21">coded_frame</name></name>     <init pos:start="63:27" pos:end="63:32">= <expr pos:start="63:29" pos:end="63:32"><name pos:start="63:29" pos:end="63:32">NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="65:1" pos:end="73:33"><decl pos:start="65:1" pos:end="73:32"><type pos:start="65:1" pos:end="68:0"><name pos:start="65:1" pos:end="68:0">FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="71:5" pos:end="71:63">/* reallocate values that should be allocated separately */</comment>

    <name pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:8">dest</name><operator pos:start="73:9" pos:end="73:10">-&gt;</operator><name pos:start="73:11" pos:end="73:19">extradata</name></name>       <init pos:start="73:27" pos:end="73:32">= <expr pos:start="73:29" pos:end="73:32"><name pos:start="73:29" pos:end="73:32">NULL</name></expr></init></decl>;</decl_stmt>


    <expr_stmt pos:start="76:5" pos:end="76:33"><expr pos:start="76:5" pos:end="76:32"><name pos:start="76:5" pos:end="76:22"><name pos:start="76:5" pos:end="76:8">dest</name><operator pos:start="76:9" pos:end="76:10">-&gt;</operator><name pos:start="76:11" pos:end="76:22">intra_matrix</name></name>    <operator pos:start="76:27" pos:end="76:27">=</operator> <name pos:start="76:29" pos:end="76:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="78:5" pos:end="78:33"><expr pos:start="78:5" pos:end="78:32"><name pos:start="78:5" pos:end="78:22"><name pos:start="78:5" pos:end="78:8">dest</name><operator pos:start="78:9" pos:end="78:10">-&gt;</operator><name pos:start="78:11" pos:end="78:22">inter_matrix</name></name>    <operator pos:start="78:27" pos:end="78:27">=</operator> <name pos:start="78:29" pos:end="78:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="80:5" pos:end="80:33"><expr pos:start="80:5" pos:end="80:32"><name pos:start="80:5" pos:end="80:21"><name pos:start="80:5" pos:end="80:8">dest</name><operator pos:start="80:9" pos:end="80:10">-&gt;</operator><name pos:start="80:11" pos:end="80:21">rc_override</name></name>     <operator pos:start="80:27" pos:end="80:27">=</operator> <name pos:start="80:29" pos:end="80:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="82:5" pos:end="82:33"><expr pos:start="82:5" pos:end="82:32"><name pos:start="82:5" pos:end="82:25"><name pos:start="82:5" pos:end="82:8">dest</name><operator pos:start="82:9" pos:end="82:10">-&gt;</operator><name pos:start="82:11" pos:end="82:25">subtitle_header</name></name> <operator pos:start="82:27" pos:end="82:27">=</operator> <name pos:start="82:29" pos:end="82:32">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="84:5" pos:end="107:0"><expr pos:start="84:5" pos:end="84:32"><name pos:start="84:5" pos:end="84:23"><name pos:start="84:5" pos:end="84:8">dest</name><operator pos:start="84:9" pos:end="84:10">-&gt;</operator><name pos:start="84:11" pos:end="84:23">hw_frames_ctx</name></name>   <operator pos:start="84:27" pos:end="84:27">=</operator> <name pos:start="84:29" pos:end="84:32">NULL</name></expr>;</expr_stmt>





<cpp:define pos:start="90:1" pos:end="106:5">#<cpp:directive pos:start="90:2" pos:end="90:7">define</cpp:directive> <cpp:macro pos:start="90:9" pos:end="90:46"><name pos:start="90:9" pos:end="90:30">alloc_and_copy_or_fail</name><parameter_list pos:start="90:31" pos:end="90:46">(<parameter pos:start="90:32" pos:end="90:34"><type pos:start="90:32" pos:end="90:34"><name pos:start="90:32" pos:end="90:34">obj</name></type></parameter>, <parameter pos:start="90:37" pos:end="90:40"><type pos:start="90:37" pos:end="90:40"><name pos:start="90:37" pos:end="90:40">size</name></type></parameter>, <parameter pos:start="90:43" pos:end="90:45"><type pos:start="90:43" pos:end="90:45"><name pos:start="90:43" pos:end="90:45">pad</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="92:5" pos:end="106:5">if (src-&gt;obj &amp;&amp; size &gt; 0) { \

        dest-&gt;obj = av_malloc(size + pad); \

        if (!dest-&gt;obj) \

            goto fail; \

        memcpy(dest-&gt;obj, src-&gt;obj, size); \

        if (pad) \

            memset(((uint8_t *) dest-&gt;obj) + size, 0, pad); \

    }</cpp:value></cpp:define>

    <expr_stmt pos:start="108:5" pos:end="110:57"><expr pos:start="108:5" pos:end="110:56"><call pos:start="108:5" pos:end="110:56"><name pos:start="108:5" pos:end="108:26">alloc_and_copy_or_fail</name><argument_list pos:start="108:27" pos:end="110:56">(<argument pos:start="108:28" pos:end="108:36"><expr pos:start="108:28" pos:end="108:36"><name pos:start="108:28" pos:end="108:36">extradata</name></expr></argument>,    <argument pos:start="108:42" pos:end="108:60"><expr pos:start="108:42" pos:end="108:60"><name pos:start="108:42" pos:end="108:60"><name pos:start="108:42" pos:end="108:44">src</name><operator pos:start="108:45" pos:end="108:46">-&gt;</operator><name pos:start="108:47" pos:end="108:60">extradata_size</name></name></expr></argument>,

                           <argument pos:start="110:28" pos:end="110:55"><expr pos:start="110:28" pos:end="110:55"><name pos:start="110:28" pos:end="110:55">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="112:5" pos:end="112:48"><expr pos:start="112:5" pos:end="112:47"><name pos:start="112:5" pos:end="112:24"><name pos:start="112:5" pos:end="112:8">dest</name><operator pos:start="112:9" pos:end="112:10">-&gt;</operator><name pos:start="112:11" pos:end="112:24">extradata_size</name></name>  <operator pos:start="112:27" pos:end="112:27">=</operator> <name pos:start="112:29" pos:end="112:47"><name pos:start="112:29" pos:end="112:31">src</name><operator pos:start="112:32" pos:end="112:33">-&gt;</operator><name pos:start="112:34" pos:end="112:47">extradata_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="114:5" pos:end="114:66"><expr pos:start="114:5" pos:end="114:65"><call pos:start="114:5" pos:end="114:65"><name pos:start="114:5" pos:end="114:26">alloc_and_copy_or_fail</name><argument_list pos:start="114:27" pos:end="114:65">(<argument pos:start="114:28" pos:end="114:39"><expr pos:start="114:28" pos:end="114:39"><name pos:start="114:28" pos:end="114:39">intra_matrix</name></expr></argument>, <argument pos:start="114:42" pos:end="114:61"><expr pos:start="114:42" pos:end="114:61"><literal type="number" pos:start="114:42" pos:end="114:43">64</literal> <operator pos:start="114:45" pos:end="114:45">*</operator> <sizeof pos:start="114:47" pos:end="114:61">sizeof<argument_list pos:start="114:53" pos:end="114:61">(<argument pos:start="114:54" pos:end="114:60"><expr pos:start="114:54" pos:end="114:60"><name pos:start="114:54" pos:end="114:60">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="114:64" pos:end="114:64"><expr pos:start="114:64" pos:end="114:64"><literal type="number" pos:start="114:64" pos:end="114:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="116:5" pos:end="116:66"><expr pos:start="116:5" pos:end="116:65"><call pos:start="116:5" pos:end="116:65"><name pos:start="116:5" pos:end="116:26">alloc_and_copy_or_fail</name><argument_list pos:start="116:27" pos:end="116:65">(<argument pos:start="116:28" pos:end="116:39"><expr pos:start="116:28" pos:end="116:39"><name pos:start="116:28" pos:end="116:39">inter_matrix</name></expr></argument>, <argument pos:start="116:42" pos:end="116:61"><expr pos:start="116:42" pos:end="116:61"><literal type="number" pos:start="116:42" pos:end="116:43">64</literal> <operator pos:start="116:45" pos:end="116:45">*</operator> <sizeof pos:start="116:47" pos:end="116:61">sizeof<argument_list pos:start="116:53" pos:end="116:61">(<argument pos:start="116:54" pos:end="116:60"><expr pos:start="116:54" pos:end="116:60"><name pos:start="116:54" pos:end="116:60">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="116:64" pos:end="116:64"><expr pos:start="116:64" pos:end="116:64"><literal type="number" pos:start="116:64" pos:end="116:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="118:5" pos:end="118:96"><expr pos:start="118:5" pos:end="118:95"><call pos:start="118:5" pos:end="118:95"><name pos:start="118:5" pos:end="118:26">alloc_and_copy_or_fail</name><argument_list pos:start="118:27" pos:end="118:95">(<argument pos:start="118:28" pos:end="118:38"><expr pos:start="118:28" pos:end="118:38"><name pos:start="118:28" pos:end="118:38">rc_override</name></expr></argument>,  <argument pos:start="118:42" pos:end="118:91"><expr pos:start="118:42" pos:end="118:91"><name pos:start="118:42" pos:end="118:63"><name pos:start="118:42" pos:end="118:44">src</name><operator pos:start="118:45" pos:end="118:46">-&gt;</operator><name pos:start="118:47" pos:end="118:63">rc_override_count</name></name> <operator pos:start="118:65" pos:end="118:65">*</operator> <sizeof pos:start="118:67" pos:end="118:91">sizeof<argument_list pos:start="118:73" pos:end="118:91">(<argument pos:start="118:74" pos:end="118:90"><expr pos:start="118:74" pos:end="118:90"><operator pos:start="118:74" pos:end="118:74">*</operator><name pos:start="118:75" pos:end="118:90"><name pos:start="118:75" pos:end="118:77">src</name><operator pos:start="118:78" pos:end="118:79">-&gt;</operator><name pos:start="118:80" pos:end="118:90">rc_override</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="118:94" pos:end="118:94"><expr pos:start="118:94" pos:end="118:94"><literal type="number" pos:start="118:94" pos:end="118:94">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="120:5" pos:end="120:74"><expr pos:start="120:5" pos:end="120:73"><call pos:start="120:5" pos:end="120:73"><name pos:start="120:5" pos:end="120:26">alloc_and_copy_or_fail</name><argument_list pos:start="120:27" pos:end="120:73">(<argument pos:start="120:28" pos:end="120:42"><expr pos:start="120:28" pos:end="120:42"><name pos:start="120:28" pos:end="120:42">subtitle_header</name></expr></argument>, <argument pos:start="120:45" pos:end="120:69"><expr pos:start="120:45" pos:end="120:69"><name pos:start="120:45" pos:end="120:69"><name pos:start="120:45" pos:end="120:47">src</name><operator pos:start="120:48" pos:end="120:49">-&gt;</operator><name pos:start="120:50" pos:end="120:69">subtitle_header_size</name></name></expr></argument>, <argument pos:start="120:72" pos:end="120:72"><expr pos:start="120:72" pos:end="120:72"><literal type="number" pos:start="120:72" pos:end="120:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="122:5" pos:end="125:0"><expr pos:start="122:5" pos:end="122:71"><call pos:start="122:5" pos:end="122:71"><name pos:start="122:5" pos:end="122:14">av_assert0</name><argument_list pos:start="122:15" pos:end="122:71">(<argument pos:start="122:16" pos:end="122:70"><expr pos:start="122:16" pos:end="122:70"><name pos:start="122:16" pos:end="122:41"><name pos:start="122:16" pos:end="122:19">dest</name><operator pos:start="122:20" pos:end="122:21">-&gt;</operator><name pos:start="122:22" pos:end="122:41">subtitle_header_size</name></name> <operator pos:start="122:43" pos:end="122:44">==</operator> <name pos:start="122:46" pos:end="122:70"><name pos:start="122:46" pos:end="122:48">src</name><operator pos:start="122:49" pos:end="122:50">-&gt;</operator><name pos:start="122:51" pos:end="122:70">subtitle_header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef pos:start="124:1" pos:end="124:29">#<cpp:directive pos:start="124:2" pos:end="124:6">undef</cpp:directive> <name pos:start="124:8" pos:end="124:29">alloc_and_copy_or_fail</name></cpp:undef>



    <if_stmt pos:start="128:5" pos:end="136:5"><if pos:start="128:5" pos:end="136:5">if <condition pos:start="128:8" pos:end="128:27">(<expr pos:start="128:9" pos:end="128:26"><name pos:start="128:9" pos:end="128:26"><name pos:start="128:9" pos:end="128:11">src</name><operator pos:start="128:12" pos:end="128:13">-&gt;</operator><name pos:start="128:14" pos:end="128:26">hw_frames_ctx</name></name></expr>)</condition> <block pos:start="128:29" pos:end="136:5">{<block_content pos:start="130:9" pos:end="134:22">

        <expr_stmt pos:start="130:9" pos:end="130:64"><expr pos:start="130:9" pos:end="130:63"><name pos:start="130:9" pos:end="130:27"><name pos:start="130:9" pos:end="130:12">dest</name><operator pos:start="130:13" pos:end="130:14">-&gt;</operator><name pos:start="130:15" pos:end="130:27">hw_frames_ctx</name></name> <operator pos:start="130:29" pos:end="130:29">=</operator> <call pos:start="130:31" pos:end="130:63"><name pos:start="130:31" pos:end="130:43">av_buffer_ref</name><argument_list pos:start="130:44" pos:end="130:63">(<argument pos:start="130:45" pos:end="130:62"><expr pos:start="130:45" pos:end="130:62"><name pos:start="130:45" pos:end="130:62"><name pos:start="130:45" pos:end="130:47">src</name><operator pos:start="130:48" pos:end="130:49">-&gt;</operator><name pos:start="130:50" pos:end="130:62">hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="132:9" pos:end="134:22"><if pos:start="132:9" pos:end="134:22">if <condition pos:start="132:12" pos:end="132:33">(<expr pos:start="132:13" pos:end="132:32"><operator pos:start="132:13" pos:end="132:13">!</operator><name pos:start="132:14" pos:end="132:32"><name pos:start="132:14" pos:end="132:17">dest</name><operator pos:start="132:18" pos:end="132:19">-&gt;</operator><name pos:start="132:20" pos:end="132:32">hw_frames_ctx</name></name></expr>)</condition><block type="pseudo" pos:start="134:13" pos:end="134:22"><block_content pos:start="134:13" pos:end="134:22">

            <goto pos:start="134:13" pos:end="134:22">goto <name pos:start="134:18" pos:end="134:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="140:5" pos:end="140:13">return <expr pos:start="140:12" pos:end="140:12"><literal type="number" pos:start="140:12" pos:end="140:12">0</literal></expr>;</return>



<label pos:start="144:1" pos:end="144:5"><name pos:start="144:1" pos:end="144:4">fail</name>:</label>

    <expr_stmt pos:start="146:5" pos:end="146:29"><expr pos:start="146:5" pos:end="146:28"><call pos:start="146:5" pos:end="146:28"><name pos:start="146:5" pos:end="146:22">copy_context_reset</name><argument_list pos:start="146:23" pos:end="146:28">(<argument pos:start="146:24" pos:end="146:27"><expr pos:start="146:24" pos:end="146:27"><name pos:start="146:24" pos:end="146:27">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="148:5" pos:end="148:27">return <expr pos:start="148:12" pos:end="148:26"><call pos:start="148:12" pos:end="148:26"><name pos:start="148:12" pos:end="148:18">AVERROR</name><argument_list pos:start="148:19" pos:end="148:26">(<argument pos:start="148:20" pos:end="148:25"><expr pos:start="148:20" pos:end="148:25"><name pos:start="148:20" pos:end="148:25">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function></unit>
