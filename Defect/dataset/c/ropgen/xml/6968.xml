<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6968.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">encode_init</name><parameter_list pos:start="1:23" pos:end="1:46">(<parameter pos:start="1:24" pos:end="1:45"><decl pos:start="1:24" pos:end="1:45"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:37">AVCodecContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type> <name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>)</parameter_list><block pos:start="1:47" pos:end="103:1">{<block_content pos:start="3:5" pos:end="101:13">

    <decl_stmt pos:start="3:5" pos:end="3:42"><decl pos:start="3:5" pos:end="3:41"><type pos:start="3:5" pos:end="3:21"><name pos:start="3:5" pos:end="3:19">WMACodecContext</name> <modifier pos:start="3:21" pos:end="3:21">*</modifier></type><name pos:start="3:22" pos:end="3:22">s</name> <init pos:start="3:24" pos:end="3:41">= <expr pos:start="3:26" pos:end="3:41"><name pos:start="3:26" pos:end="3:41"><name pos:start="3:26" pos:end="3:30">avctx</name><operator pos:start="3:31" pos:end="3:32">-&gt;</operator><name pos:start="3:33" pos:end="3:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:17">flags1</name></decl>, <decl pos:start="5:20" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:25">flags2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:22">extradata</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:21"><expr pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:12">avctx</name></name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:20">avctx</name></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if<condition pos:start="15:7" pos:end="15:38">(<expr pos:start="15:8" pos:end="15:37"><name pos:start="15:8" pos:end="15:22"><name pos:start="15:8" pos:end="15:12">avctx</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:22">channels</name></name> <operator pos:start="15:24" pos:end="15:24">&gt;</operator> <name pos:start="15:26" pos:end="15:37">MAX_CHANNELS</name></expr>)</condition> <block pos:start="15:40" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:31">

        <expr_stmt pos:start="17:9" pos:end="19:46"><expr pos:start="17:9" pos:end="19:45"><call pos:start="17:9" pos:end="19:45"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="19:45">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="17:81"><expr pos:start="17:37" pos:end="17:81"><literal type="string" pos:start="17:37" pos:end="17:81">"too many channels: got %i, need %i or fewer"</literal></expr></argument>,

               <argument pos:start="19:16" pos:end="19:30"><expr pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:20">avctx</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:30">channels</name></name></expr></argument>, <argument pos:start="19:33" pos:end="19:44"><expr pos:start="19:33" pos:end="19:44"><name pos:start="19:33" pos:end="19:44">MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:31">return <expr pos:start="21:16" pos:end="21:30"><call pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:22">AVERROR</name><argument_list pos:start="21:23" pos:end="21:30">(<argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if<condition pos:start="27:7" pos:end="27:33">(<expr pos:start="27:8" pos:end="27:32"><name pos:start="27:8" pos:end="27:22"><name pos:start="27:8" pos:end="27:12">avctx</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:22">bit_rate</name></name> <operator pos:start="27:24" pos:end="27:24">&lt;</operator> <literal type="number" pos:start="27:26" pos:end="27:27">24</literal><operator pos:start="27:28" pos:end="27:28">*</operator><literal type="number" pos:start="27:29" pos:end="27:32">1000</literal></expr>)</condition> <block pos:start="27:35" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:31">

        <expr_stmt pos:start="29:9" pos:end="31:32"><expr pos:start="29:9" pos:end="31:31"><call pos:start="29:9" pos:end="31:31"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="31:31">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:85"><expr pos:start="29:37" pos:end="29:85"><literal type="string" pos:start="29:37" pos:end="29:85">"bitrate too low: got %i, need 24000 or higher\n"</literal></expr></argument>,

               <argument pos:start="31:16" pos:end="31:30"><expr pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:20">avctx</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:30">bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:31">return <expr pos:start="33:16" pos:end="33:30"><call pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:22">AVERROR</name><argument_list pos:start="33:23" pos:end="33:30">(<argument pos:start="33:24" pos:end="33:29"><expr pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:28">/* extract flag infos */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:15"><expr pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:10">flags1</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:15"><expr pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:10">flags2</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="67:18"><if pos:start="45:5" pos:end="55:5">if <condition pos:start="45:8" pos:end="45:43">(<expr pos:start="45:9" pos:end="45:42"><name pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:13">avctx</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:20">codec</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:24">id</name></name> <operator pos:start="45:26" pos:end="45:27">==</operator> <name pos:start="45:29" pos:end="45:42">CODEC_ID_WMAV1</name></expr>)</condition> <block pos:start="45:45" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:37">

        <expr_stmt pos:start="47:9" pos:end="47:32"><expr pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:17">extradata</name><operator pos:start="47:18" pos:end="47:18">=</operator> <call pos:start="47:20" pos:end="47:31"><name pos:start="47:20" pos:end="47:28">av_malloc</name><argument_list pos:start="47:29" pos:end="47:31">(<argument pos:start="47:30" pos:end="47:30"><expr pos:start="47:30" pos:end="47:30"><literal type="number" pos:start="47:30" pos:end="47:30">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:13">avctx</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:29">extradata_size</name></name><operator pos:start="49:30" pos:end="49:30">=</operator> <literal type="number" pos:start="49:32" pos:end="49:32">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:35"><expr pos:start="51:9" pos:end="51:34"><call pos:start="51:9" pos:end="51:34"><name pos:start="51:9" pos:end="51:15">AV_WL16</name><argument_list pos:start="51:16" pos:end="51:34">(<argument pos:start="51:17" pos:end="51:25"><expr pos:start="51:17" pos:end="51:25"><name pos:start="51:17" pos:end="51:25">extradata</name></expr></argument>, <argument pos:start="51:28" pos:end="51:33"><expr pos:start="51:28" pos:end="51:33"><name pos:start="51:28" pos:end="51:33">flags1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:37"><expr pos:start="53:9" pos:end="53:36"><call pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:15">AV_WL16</name><argument_list pos:start="53:16" pos:end="53:36">(<argument pos:start="53:17" pos:end="53:27"><expr pos:start="53:17" pos:end="53:27"><name pos:start="53:17" pos:end="53:25">extradata</name><operator pos:start="53:26" pos:end="53:26">+</operator><literal type="number" pos:start="53:27" pos:end="53:27">2</literal></expr></argument>, <argument pos:start="53:30" pos:end="53:35"><expr pos:start="53:30" pos:end="53:35"><name pos:start="53:30" pos:end="53:35">flags2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="55:7" pos:end="65:5">else if <condition pos:start="55:15" pos:end="55:50">(<expr pos:start="55:16" pos:end="55:49"><name pos:start="55:16" pos:end="55:31"><name pos:start="55:16" pos:end="55:20">avctx</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:27">codec</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:31">id</name></name> <operator pos:start="55:33" pos:end="55:34">==</operator> <name pos:start="55:36" pos:end="55:49">CODEC_ID_WMAV2</name></expr>)</condition> <block pos:start="55:52" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:37">

        <expr_stmt pos:start="57:9" pos:end="57:34"><expr pos:start="57:9" pos:end="57:33"><name pos:start="57:9" pos:end="57:17">extradata</name><operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="57:33"><name pos:start="57:20" pos:end="57:29">av_mallocz</name><argument_list pos:start="57:30" pos:end="57:33">(<argument pos:start="57:31" pos:end="57:32"><expr pos:start="57:31" pos:end="57:32"><literal type="number" pos:start="57:31" pos:end="57:32">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:13">avctx</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:29">extradata_size</name></name><operator pos:start="59:30" pos:end="59:30">=</operator> <literal type="number" pos:start="59:32" pos:end="59:33">10</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:35"><expr pos:start="61:9" pos:end="61:34"><call pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:15">AV_WL32</name><argument_list pos:start="61:16" pos:end="61:34">(<argument pos:start="61:17" pos:end="61:25"><expr pos:start="61:17" pos:end="61:25"><name pos:start="61:17" pos:end="61:25">extradata</name></expr></argument>, <argument pos:start="61:28" pos:end="61:33"><expr pos:start="61:28" pos:end="61:33"><name pos:start="61:28" pos:end="61:33">flags1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><call pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:15">AV_WL16</name><argument_list pos:start="63:16" pos:end="63:36">(<argument pos:start="63:17" pos:end="63:27"><expr pos:start="63:17" pos:end="63:27"><name pos:start="63:17" pos:end="63:25">extradata</name><operator pos:start="63:26" pos:end="63:26">+</operator><literal type="number" pos:start="63:27" pos:end="63:27">4</literal></expr></argument>, <argument pos:start="63:30" pos:end="63:35"><expr pos:start="63:30" pos:end="63:35"><name pos:start="63:30" pos:end="63:35">flags2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="65:6" pos:end="67:18">else<block type="pseudo" pos:start="67:9" pos:end="67:18"><block_content pos:start="67:9" pos:end="67:18">

        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><call pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:14">assert</name><argument_list pos:start="67:15" pos:end="67:17">(<argument pos:start="67:16" pos:end="67:16"><expr pos:start="67:16" pos:end="67:16"><literal type="number" pos:start="67:16" pos:end="67:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:32"><expr pos:start="69:5" pos:end="69:31"><name pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:9">avctx</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:20">extradata</name></name><operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:31">extradata</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:37"><expr pos:start="71:5" pos:end="71:36"><name pos:start="71:5" pos:end="71:18"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:18">use_exp_vlc</name></name> <operator pos:start="71:20" pos:end="71:20">=</operator> <name pos:start="71:22" pos:end="71:27">flags2</name> <operator pos:start="71:29" pos:end="71:29">&amp;</operator> <literal type="number" pos:start="71:31" pos:end="71:36">0x0001</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:43"><expr pos:start="73:5" pos:end="73:42"><name pos:start="73:5" pos:end="73:24"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:24">use_bit_reservoir</name></name> <operator pos:start="73:26" pos:end="73:26">=</operator> <name pos:start="73:28" pos:end="73:33">flags2</name> <operator pos:start="73:35" pos:end="73:35">&amp;</operator> <literal type="number" pos:start="73:37" pos:end="73:42">0x0002</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:48"><expr pos:start="75:5" pos:end="75:47"><name pos:start="75:5" pos:end="75:29"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:29">use_variable_block_len</name></name> <operator pos:start="75:31" pos:end="75:31">=</operator> <name pos:start="75:33" pos:end="75:38">flags2</name> <operator pos:start="75:40" pos:end="75:40">&amp;</operator> <literal type="number" pos:start="75:42" pos:end="75:47">0x0004</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:31"><expr pos:start="79:5" pos:end="79:30"><call pos:start="79:5" pos:end="79:30"><name pos:start="79:5" pos:end="79:15">ff_wma_init</name><argument_list pos:start="79:16" pos:end="79:30">(<argument pos:start="79:17" pos:end="79:21"><expr pos:start="79:17" pos:end="79:21"><name pos:start="79:17" pos:end="79:21">avctx</name></expr></argument>, <argument pos:start="79:24" pos:end="79:29"><expr pos:start="79:24" pos:end="79:29"><name pos:start="79:24" pos:end="79:29">flags2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:19">/* init MDCT */</comment>

    <for pos:start="85:5" pos:end="87:73">for<control pos:start="85:8" pos:end="85:42">(<init pos:start="85:9" pos:end="85:14"><expr pos:start="85:9" pos:end="85:13"><name pos:start="85:9" pos:end="85:9">i</name> <operator pos:start="85:11" pos:end="85:11">=</operator> <literal type="number" pos:start="85:13" pos:end="85:13">0</literal></expr>;</init> <condition pos:start="85:16" pos:end="85:37"><expr pos:start="85:16" pos:end="85:36"><name pos:start="85:16" pos:end="85:16">i</name> <operator pos:start="85:18" pos:end="85:18">&lt;</operator> <name pos:start="85:20" pos:end="85:36"><name pos:start="85:20" pos:end="85:20">s</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:36">nb_block_sizes</name></name></expr>;</condition> <incr pos:start="85:39" pos:end="85:41"><expr pos:start="85:39" pos:end="85:41"><name pos:start="85:39" pos:end="85:39">i</name><operator pos:start="85:40" pos:end="85:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="87:9" pos:end="87:73"><block_content pos:start="87:9" pos:end="87:73">

        <expr_stmt pos:start="87:9" pos:end="87:73"><expr pos:start="87:9" pos:end="87:72"><call pos:start="87:9" pos:end="87:72"><name pos:start="87:9" pos:end="87:20">ff_mdct_init</name><argument_list pos:start="87:21" pos:end="87:72">(<argument pos:start="87:22" pos:end="87:36"><expr pos:start="87:22" pos:end="87:36"><operator pos:start="87:22" pos:end="87:22">&amp;</operator><name pos:start="87:23" pos:end="87:36"><name pos:start="87:23" pos:end="87:23">s</name><operator pos:start="87:24" pos:end="87:25">-&gt;</operator><name pos:start="87:26" pos:end="87:33">mdct_ctx</name><index pos:start="87:34" pos:end="87:36">[<expr pos:start="87:35" pos:end="87:35"><name pos:start="87:35" pos:end="87:35">i</name></expr>]</index></name></expr></argument>, <argument pos:start="87:39" pos:end="87:63"><expr pos:start="87:39" pos:end="87:63"><name pos:start="87:39" pos:end="87:55"><name pos:start="87:39" pos:end="87:39">s</name><operator pos:start="87:40" pos:end="87:41">-&gt;</operator><name pos:start="87:42" pos:end="87:55">frame_len_bits</name></name> <operator pos:start="87:57" pos:end="87:57">-</operator> <name pos:start="87:59" pos:end="87:59">i</name> <operator pos:start="87:61" pos:end="87:61">+</operator> <literal type="number" pos:start="87:63" pos:end="87:63">1</literal></expr></argument>, <argument pos:start="87:66" pos:end="87:66"><expr pos:start="87:66" pos:end="87:66"><literal type="number" pos:start="87:66" pos:end="87:66">0</literal></expr></argument>, <argument pos:start="87:69" pos:end="87:71"><expr pos:start="87:69" pos:end="87:71"><literal type="number" pos:start="87:69" pos:end="87:71">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="91:5" pos:end="93:83"><expr pos:start="91:5" pos:end="93:82"><name pos:start="91:5" pos:end="91:22"><name pos:start="91:5" pos:end="91:9">avctx</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:22">block_align</name></name><operator pos:start="91:23" pos:end="91:23">=</operator>

    <name pos:start="93:5" pos:end="93:18"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:18">block_align</name></name><operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:35"><name pos:start="93:21" pos:end="93:25">avctx</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:35">bit_rate</name></name><operator pos:start="93:36" pos:end="93:36">*</operator><operator pos:start="93:37" pos:end="93:37">(</operator><name pos:start="93:38" pos:end="93:44">int64_t</name><operator pos:start="93:45" pos:end="93:45">)</operator><name pos:start="93:46" pos:end="93:57"><name pos:start="93:46" pos:end="93:46">s</name><operator pos:start="93:47" pos:end="93:48">-&gt;</operator><name pos:start="93:49" pos:end="93:57">frame_len</name></name> <operator pos:start="93:59" pos:end="93:59">/</operator> <operator pos:start="93:61" pos:end="93:61">(</operator><name pos:start="93:62" pos:end="93:79"><name pos:start="93:62" pos:end="93:66">avctx</name><operator pos:start="93:67" pos:end="93:68">-&gt;</operator><name pos:start="93:69" pos:end="93:79">sample_rate</name></name><operator pos:start="93:80" pos:end="93:80">*</operator><literal type="number" pos:start="93:81" pos:end="93:81">8</literal><operator pos:start="93:82" pos:end="93:82">)</operator></expr>;</expr_stmt>

<comment type="line" pos:start="95:1" pos:end="95:113">//av_log(NULL, AV_LOG_ERROR, "%d %d %d %d\n", s-&gt;block_align, avctx-&gt;bit_rate, s-&gt;frame_len, avctx-&gt;sample_rate);</comment>

    <expr_stmt pos:start="97:5" pos:end="97:36"><expr pos:start="97:5" pos:end="97:35"><name pos:start="97:5" pos:end="97:21"><name pos:start="97:5" pos:end="97:9">avctx</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:21">frame_size</name></name><operator pos:start="97:22" pos:end="97:22">=</operator> <name pos:start="97:24" pos:end="97:35"><name pos:start="97:24" pos:end="97:24">s</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:35">frame_len</name></name></expr>;</expr_stmt>



    <return pos:start="101:5" pos:end="101:13">return <expr pos:start="101:12" pos:end="101:12"><literal type="number" pos:start="101:12" pos:end="101:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
