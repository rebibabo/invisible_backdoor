<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17414.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">Coroutine</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:32">qemu_coroutine_create</name><parameter_list pos:start="1:33" pos:end="1:55">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:47">CoroutineEntry</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">entry</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:14">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">Coroutine</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">co</name> <init pos:start="5:19" pos:end="5:24">= <expr pos:start="5:21" pos:end="5:24"><name pos:start="5:21" pos:end="5:24">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="55:5"><if pos:start="9:5" pos:end="55:5">if <condition pos:start="9:8" pos:end="9:30">(<expr pos:start="9:9" pos:end="9:29"><name pos:start="9:9" pos:end="9:29">CONFIG_COROUTINE_POOL</name></expr>)</condition> <block pos:start="9:32" pos:end="55:5">{<block_content pos:start="11:9" pos:end="53:9">

        <expr_stmt pos:start="11:9" pos:end="11:39"><expr pos:start="11:9" pos:end="11:38"><name pos:start="11:9" pos:end="11:10">co</name> <operator pos:start="11:12" pos:end="11:12">=</operator> <call pos:start="11:14" pos:end="11:38"><name pos:start="11:14" pos:end="11:25">QSLIST_FIRST</name><argument_list pos:start="11:26" pos:end="11:38">(<argument pos:start="11:27" pos:end="11:37"><expr pos:start="11:27" pos:end="11:37"><operator pos:start="11:27" pos:end="11:27">&amp;</operator><name pos:start="11:28" pos:end="11:37">alloc_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="13:9" pos:end="45:9"><if pos:start="13:9" pos:end="45:9">if <condition pos:start="13:12" pos:end="13:16">(<expr pos:start="13:13" pos:end="13:15"><operator pos:start="13:13" pos:end="13:13">!</operator><name pos:start="13:14" pos:end="13:15">co</name></expr>)</condition> <block pos:start="13:18" pos:end="45:9">{<block_content pos:start="15:13" pos:end="43:13">

            <if_stmt pos:start="15:13" pos:end="43:13"><if pos:start="15:13" pos:end="43:13">if <condition pos:start="15:16" pos:end="15:52">(<expr pos:start="15:17" pos:end="15:51"><name pos:start="15:17" pos:end="15:33">release_pool_size</name> <operator pos:start="15:35" pos:end="15:35">&gt;</operator> <name pos:start="15:37" pos:end="15:51">POOL_BATCH_SIZE</name></expr>)</condition> <block pos:start="15:54" pos:end="43:13">{<block_content pos:start="19:17" pos:end="41:47">

                <comment type="block" pos:start="17:17" pos:end="17:79">/* Slow path; a good place to register the destructor, too.  */</comment>

                <if_stmt pos:start="19:17" pos:end="25:17"><if pos:start="19:17" pos:end="25:17">if <condition pos:start="19:20" pos:end="19:60">(<expr pos:start="19:21" pos:end="19:59"><operator pos:start="19:21" pos:end="19:21">!</operator><name pos:start="19:22" pos:end="19:59"><name pos:start="19:22" pos:end="19:52">coroutine_pool_cleanup_notifier</name><operator pos:start="19:53" pos:end="19:53">.</operator><name pos:start="19:54" pos:end="19:59">notify</name></name></expr>)</condition> <block pos:start="19:62" pos:end="25:17">{<block_content pos:start="21:21" pos:end="23:77">

                    <expr_stmt pos:start="21:21" pos:end="21:84"><expr pos:start="21:21" pos:end="21:83"><name pos:start="21:21" pos:end="21:58"><name pos:start="21:21" pos:end="21:51">coroutine_pool_cleanup_notifier</name><operator pos:start="21:52" pos:end="21:52">.</operator><name pos:start="21:53" pos:end="21:58">notify</name></name> <operator pos:start="21:60" pos:end="21:60">=</operator> <name pos:start="21:62" pos:end="21:83">coroutine_pool_cleanup</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="23:21" pos:end="23:77"><expr pos:start="23:21" pos:end="23:76"><call pos:start="23:21" pos:end="23:76"><name pos:start="23:21" pos:end="23:42">qemu_thread_atexit_add</name><argument_list pos:start="23:43" pos:end="23:76">(<argument pos:start="23:44" pos:end="23:75"><expr pos:start="23:44" pos:end="23:75"><operator pos:start="23:44" pos:end="23:44">&amp;</operator><name pos:start="23:45" pos:end="23:75">coroutine_pool_cleanup_notifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="29:17" pos:end="35:19">/* This is not exact; there could be a little skew between

                 * release_pool_size and the actual size of release_pool.  But

                 * it is just a heuristic, it does not need to be perfect.

                 */</comment>

                <expr_stmt pos:start="37:17" pos:end="37:69"><expr pos:start="37:17" pos:end="37:68"><name pos:start="37:17" pos:end="37:31">alloc_pool_size</name> <operator pos:start="37:33" pos:end="37:33">=</operator> <call pos:start="37:35" pos:end="37:68"><name pos:start="37:35" pos:end="37:45">atomic_xchg</name><argument_list pos:start="37:46" pos:end="37:68">(<argument pos:start="37:47" pos:end="37:64"><expr pos:start="37:47" pos:end="37:64"><operator pos:start="37:47" pos:end="37:47">&amp;</operator><name pos:start="37:48" pos:end="37:64">release_pool_size</name></expr></argument>, <argument pos:start="37:67" pos:end="37:67"><expr pos:start="37:67" pos:end="37:67"><literal type="number" pos:start="37:67" pos:end="37:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:63"><expr pos:start="39:17" pos:end="39:62"><call pos:start="39:17" pos:end="39:62"><name pos:start="39:17" pos:end="39:34">QSLIST_MOVE_ATOMIC</name><argument_list pos:start="39:35" pos:end="39:62">(<argument pos:start="39:36" pos:end="39:46"><expr pos:start="39:36" pos:end="39:46"><operator pos:start="39:36" pos:end="39:36">&amp;</operator><name pos:start="39:37" pos:end="39:46">alloc_pool</name></expr></argument>, <argument pos:start="39:49" pos:end="39:61"><expr pos:start="39:49" pos:end="39:61"><operator pos:start="39:49" pos:end="39:49">&amp;</operator><name pos:start="39:50" pos:end="39:61">release_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:47"><expr pos:start="41:17" pos:end="41:46"><name pos:start="41:17" pos:end="41:18">co</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <call pos:start="41:22" pos:end="41:46"><name pos:start="41:22" pos:end="41:33">QSLIST_FIRST</name><argument_list pos:start="41:34" pos:end="41:46">(<argument pos:start="41:35" pos:end="41:45"><expr pos:start="41:35" pos:end="41:45"><operator pos:start="41:35" pos:end="41:35">&amp;</operator><name pos:start="41:36" pos:end="41:45">alloc_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:15">(<expr pos:start="47:13" pos:end="47:14"><name pos:start="47:13" pos:end="47:14">co</name></expr>)</condition> <block pos:start="47:17" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:30">

            <expr_stmt pos:start="49:13" pos:end="49:55"><expr pos:start="49:13" pos:end="49:54"><call pos:start="49:13" pos:end="49:54"><name pos:start="49:13" pos:end="49:30">QSLIST_REMOVE_HEAD</name><argument_list pos:start="49:31" pos:end="49:54">(<argument pos:start="49:32" pos:end="49:42"><expr pos:start="49:32" pos:end="49:42"><operator pos:start="49:32" pos:end="49:32">&amp;</operator><name pos:start="49:33" pos:end="49:42">alloc_pool</name></expr></argument>, <argument pos:start="49:45" pos:end="49:53"><expr pos:start="49:45" pos:end="49:53"><name pos:start="49:45" pos:end="49:53">pool_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:30"><expr pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:27">alloc_pool_size</name><operator pos:start="51:28" pos:end="51:29">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:12">(<expr pos:start="59:9" pos:end="59:11"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:11">co</name></expr>)</condition> <block pos:start="59:14" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:34">

        <expr_stmt pos:start="61:9" pos:end="61:34"><expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:10">co</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <call pos:start="61:14" pos:end="61:33"><name pos:start="61:14" pos:end="61:31">qemu_coroutine_new</name><argument_list pos:start="61:32" pos:end="61:33">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:22"><expr pos:start="67:5" pos:end="67:21"><name pos:start="67:5" pos:end="67:13"><name pos:start="67:5" pos:end="67:6">co</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:13">entry</name></name> <operator pos:start="67:15" pos:end="67:15">=</operator> <name pos:start="67:17" pos:end="67:21">entry</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:40"><expr pos:start="69:5" pos:end="69:39"><call pos:start="69:5" pos:end="69:39"><name pos:start="69:5" pos:end="69:17">QSIMPLEQ_INIT</name><argument_list pos:start="69:18" pos:end="69:39">(<argument pos:start="69:19" pos:end="69:38"><expr pos:start="69:19" pos:end="69:38"><operator pos:start="69:19" pos:end="69:19">&amp;</operator><name pos:start="69:20" pos:end="69:38"><name pos:start="69:20" pos:end="69:21">co</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:38">co_queue_wakeup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="71:5" pos:end="71:14">return <expr pos:start="71:12" pos:end="71:13"><name pos:start="71:12" pos:end="71:13">co</name></expr>;</return>

</block_content>}</block></function>
</unit>
