<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12427.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">ram_load_dead</name><parameter_list pos:start="1:25" pos:end="1:51">(<parameter pos:start="1:26" pos:end="1:36"><decl pos:start="1:26" pos:end="1:36"><type pos:start="1:26" pos:end="1:36"><name pos:start="1:26" pos:end="1:33">QEMUFile</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:36">f</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:42">void</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:50">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22">RamDecompressState</name></type> <name pos:start="5:24" pos:end="5:25">s1</name></decl>, <decl pos:start="5:28" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:22"><modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:29">s</name> <init pos:start="5:31" pos:end="5:35">= <expr pos:start="5:33" pos:end="5:35"><operator pos:start="5:33" pos:end="5:33">&amp;</operator><name pos:start="5:34" pos:end="5:35">s1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:19"><name pos:start="7:13" pos:end="7:15">buf</name><index pos:start="7:16" pos:end="7:19">[<expr pos:start="7:17" pos:end="7:18"><literal type="number" pos:start="7:17" pos:end="7:18">10</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ram_addr_t</name></type> <name pos:start="9:16" pos:end="9:16">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:23"><if pos:start="13:5" pos:end="15:23">if <condition pos:start="13:8" pos:end="13:38">(<expr pos:start="13:9" pos:end="13:37"><call pos:start="13:9" pos:end="13:33"><name pos:start="13:9" pos:end="13:27">ram_decompress_open</name><argument_list pos:start="13:28" pos:end="13:33">(<argument pos:start="13:29" pos:end="13:29"><expr pos:start="13:29" pos:end="13:29"><name pos:start="13:29" pos:end="13:29">s</name></expr></argument>, <argument pos:start="13:32" pos:end="13:32"><expr pos:start="13:32" pos:end="13:32"><name pos:start="13:32" pos:end="13:32">f</name></expr></argument>)</argument_list></call> <operator pos:start="13:35" pos:end="13:35">&lt;</operator> <literal type="number" pos:start="13:37" pos:end="13:37">0</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:23"><block_content pos:start="15:9" pos:end="15:23">

        <return pos:start="15:9" pos:end="15:23">return <expr pos:start="15:16" pos:end="15:22"><operator pos:start="15:16" pos:end="15:16">-</operator><name pos:start="15:17" pos:end="15:22">EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <for pos:start="17:5" pos:end="49:5">for<control pos:start="17:8" pos:end="17:61">(<init pos:start="17:9" pos:end="17:14"><expr pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:9">i</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <literal type="number" pos:start="17:13" pos:end="17:13">0</literal></expr>;</init> <condition pos:start="17:16" pos:end="17:35"><expr pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:16">i</name> <operator pos:start="17:18" pos:end="17:18">&lt;</operator> <name pos:start="17:20" pos:end="17:34">last_ram_offset</name></expr>;</condition> <incr pos:start="17:37" pos:end="17:60"><expr pos:start="17:37" pos:end="17:60"><name pos:start="17:37" pos:end="17:37">i</name><operator pos:start="17:38" pos:end="17:39">+=</operator> <name pos:start="17:41" pos:end="17:60">BDRV_HASH_BLOCK_SIZE</name></expr></incr>)</control> <block pos:start="17:63" pos:end="49:5">{<block_content pos:start="19:9" pos:end="47:9">

        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="19:46">(<expr pos:start="19:13" pos:end="19:45"><call pos:start="19:13" pos:end="19:41"><name pos:start="19:13" pos:end="19:30">ram_decompress_buf</name><argument_list pos:start="19:31" pos:end="19:41">(<argument pos:start="19:32" pos:end="19:32"><expr pos:start="19:32" pos:end="19:32"><name pos:start="19:32" pos:end="19:32">s</name></expr></argument>, <argument pos:start="19:35" pos:end="19:37"><expr pos:start="19:35" pos:end="19:37"><name pos:start="19:35" pos:end="19:37">buf</name></expr></argument>, <argument pos:start="19:40" pos:end="19:40"><expr pos:start="19:40" pos:end="19:40"><literal type="number" pos:start="19:40" pos:end="19:40">1</literal></expr></argument>)</argument_list></call> <operator pos:start="19:43" pos:end="19:43">&lt;</operator> <literal type="number" pos:start="19:45" pos:end="19:45">0</literal></expr>)</condition> <block pos:start="19:48" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:23">

            <expr_stmt pos:start="21:13" pos:end="21:70"><expr pos:start="21:13" pos:end="21:69"><call pos:start="21:13" pos:end="21:69"><name pos:start="21:13" pos:end="21:19">fprintf</name><argument_list pos:start="21:20" pos:end="21:69">(<argument pos:start="21:21" pos:end="21:26"><expr pos:start="21:21" pos:end="21:26"><name pos:start="21:21" pos:end="21:26">stderr</name></expr></argument>, <argument pos:start="21:29" pos:end="21:68"><expr pos:start="21:29" pos:end="21:68"><literal type="string" pos:start="21:29" pos:end="21:68">"Error while reading ram block header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="23:13" pos:end="23:23">goto <name pos:start="23:18" pos:end="23:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="27:9" pos:end="47:9"><if pos:start="27:9" pos:end="39:9">if <condition pos:start="27:12" pos:end="27:24">(<expr pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:18"><name pos:start="27:13" pos:end="27:15">buf</name><index pos:start="27:16" pos:end="27:18">[<expr pos:start="27:17" pos:end="27:17"><literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr>]</index></name> <operator pos:start="27:20" pos:end="27:21">==</operator> <literal type="number" pos:start="27:23" pos:end="27:23">0</literal></expr>)</condition> <block pos:start="27:26" pos:end="39:9">{<block_content pos:start="29:13" pos:end="37:13">

            <if_stmt pos:start="29:13" pos:end="37:13"><if pos:start="29:13" pos:end="37:13">if <condition pos:start="29:16" pos:end="31:61">(<expr pos:start="29:17" pos:end="31:60"><call pos:start="29:17" pos:end="31:56"><name pos:start="29:17" pos:end="29:34">ram_decompress_buf</name><argument_list pos:start="29:35" pos:end="31:56">(<argument pos:start="29:36" pos:end="29:36"><expr pos:start="29:36" pos:end="29:36"><name pos:start="29:36" pos:end="29:36">s</name></expr></argument>, <argument pos:start="29:39" pos:end="29:57"><expr pos:start="29:39" pos:end="29:57"><call pos:start="29:39" pos:end="29:57"><name pos:start="29:39" pos:end="29:54">qemu_get_ram_ptr</name><argument_list pos:start="29:55" pos:end="29:57">(<argument pos:start="29:56" pos:end="29:56"><expr pos:start="29:56" pos:end="29:56"><name pos:start="29:56" pos:end="29:56">i</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="31:36" pos:end="31:55"><expr pos:start="31:36" pos:end="31:55"><name pos:start="31:36" pos:end="31:55">BDRV_HASH_BLOCK_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="31:58" pos:end="31:58">&lt;</operator> <literal type="number" pos:start="31:60" pos:end="31:60">0</literal></expr>)</condition> <block pos:start="31:63" pos:end="37:13">{<block_content pos:start="33:17" pos:end="35:27">

                <expr_stmt pos:start="33:17" pos:end="33:99"><expr pos:start="33:17" pos:end="33:98"><call pos:start="33:17" pos:end="33:98"><name pos:start="33:17" pos:end="33:23">fprintf</name><argument_list pos:start="33:24" pos:end="33:98">(<argument pos:start="33:25" pos:end="33:30"><expr pos:start="33:25" pos:end="33:30"><name pos:start="33:25" pos:end="33:30">stderr</name></expr></argument>, <argument pos:start="33:33" pos:end="33:84"><expr pos:start="33:33" pos:end="33:84"><literal type="string" pos:start="33:33" pos:end="33:77">"Error while reading ram block address=0x%08"</literal> <name pos:start="33:79" pos:end="33:84">PRIx64</name></expr></argument>, <argument pos:start="33:87" pos:end="33:97"><expr pos:start="33:87" pos:end="33:97"><operator pos:start="33:87" pos:end="33:87">(</operator><name pos:start="33:88" pos:end="33:95">uint64_t</name><operator pos:start="33:96" pos:end="33:96">)</operator><name pos:start="33:97" pos:end="33:97">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="35:17" pos:end="35:27">goto <name pos:start="35:22" pos:end="35:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="39:11" pos:end="47:9">else <block pos:start="39:16" pos:end="47:9">{<block_content pos:start="41:9" pos:end="45:27">

        <label pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:13">error</name>:</label>

            <expr_stmt pos:start="43:13" pos:end="43:43"><expr pos:start="43:13" pos:end="43:42"><call pos:start="43:13" pos:end="43:42"><name pos:start="43:13" pos:end="43:18">printf</name><argument_list pos:start="43:19" pos:end="43:42">(<argument pos:start="43:20" pos:end="43:41"><expr pos:start="43:20" pos:end="43:41"><literal type="string" pos:start="43:20" pos:end="43:41">"Error block header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:27">return <expr pos:start="45:20" pos:end="45:26"><operator pos:start="45:20" pos:end="45:20">-</operator><name pos:start="45:21" pos:end="45:26">EINVAL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="51:5" pos:end="51:28"><expr pos:start="51:5" pos:end="51:27"><call pos:start="51:5" pos:end="51:27"><name pos:start="51:5" pos:end="51:24">ram_decompress_close</name><argument_list pos:start="51:25" pos:end="51:27">(<argument pos:start="51:26" pos:end="51:26"><expr pos:start="51:26" pos:end="51:26"><name pos:start="51:26" pos:end="51:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="55:5" pos:end="55:13">return <expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
