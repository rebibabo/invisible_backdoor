<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/545.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">QObject</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:27">parse_array</name><parameter_list pos:start="1:28" pos:end="1:65">(<parameter pos:start="1:29" pos:end="1:51"><decl pos:start="1:29" pos:end="1:51"><type pos:start="1:29" pos:end="1:51"><name pos:start="1:29" pos:end="1:45">JSONParserContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">ctxt</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:64"><decl pos:start="1:54" pos:end="1:64"><type pos:start="1:54" pos:end="1:64"><name pos:start="1:54" pos:end="1:60">va_list</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">ap</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:16">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">QList</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:15">list</name> <init pos:start="5:17" pos:end="5:22">= <expr pos:start="5:19" pos:end="5:22"><name pos:start="5:19" pos:end="5:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">QObject</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">token</name></decl>, <decl pos:start="7:21" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:13"><modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:25">peek</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:43"><expr pos:start="11:5" pos:end="11:42"><name pos:start="11:5" pos:end="11:9">token</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <call pos:start="11:13" pos:end="11:42"><name pos:start="11:13" pos:end="11:36">parser_context_pop_token</name><argument_list pos:start="11:37" pos:end="11:42">(<argument pos:start="11:38" pos:end="11:41"><expr pos:start="11:38" pos:end="11:41"><name pos:start="11:38" pos:end="11:41">ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:59"><expr pos:start="13:5" pos:end="13:58"><call pos:start="13:5" pos:end="13:58"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:58">(<argument pos:start="13:12" pos:end="13:57"><expr pos:start="13:12" pos:end="13:57"><name pos:start="13:12" pos:end="13:16">token</name> <operator pos:start="13:18" pos:end="13:19">&amp;&amp;</operator> <call pos:start="13:21" pos:end="13:41"><name pos:start="13:21" pos:end="13:34">token_get_type</name><argument_list pos:start="13:35" pos:end="13:41">(<argument pos:start="13:36" pos:end="13:40"><expr pos:start="13:36" pos:end="13:40"><name pos:start="13:36" pos:end="13:40">token</name></expr></argument>)</argument_list></call> <operator pos:start="13:43" pos:end="13:44">==</operator> <name pos:start="13:46" pos:end="13:57">JSON_LSQUARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:8">list</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="17:22"><name pos:start="17:12" pos:end="17:20">qlist_new</name><argument_list pos:start="17:21" pos:end="17:22">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:8">peek</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:42"><name pos:start="21:12" pos:end="21:36">parser_context_peek_token</name><argument_list pos:start="21:37" pos:end="21:42">(<argument pos:start="21:38" pos:end="21:41"><expr pos:start="21:38" pos:end="21:41"><name pos:start="21:38" pos:end="21:41">ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:21">(<expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:12">peek</name> <operator pos:start="23:14" pos:end="23:15">==</operator> <name pos:start="23:17" pos:end="23:20">NULL</name></expr>)</condition> <block pos:start="23:23" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:17">

        <expr_stmt pos:start="25:9" pos:end="25:49"><expr pos:start="25:9" pos:end="25:48"><call pos:start="25:9" pos:end="25:48"><name pos:start="25:9" pos:end="25:19">parse_error</name><argument_list pos:start="25:20" pos:end="25:48">(<argument pos:start="25:21" pos:end="25:24"><expr pos:start="25:21" pos:end="25:24"><name pos:start="25:21" pos:end="25:24">ctxt</name></expr></argument>, <argument pos:start="25:27" pos:end="25:30"><expr pos:start="25:27" pos:end="25:30"><name pos:start="25:27" pos:end="25:30">NULL</name></expr></argument>, <argument pos:start="25:33" pos:end="25:47"><expr pos:start="25:33" pos:end="25:47"><literal type="string" pos:start="25:33" pos:end="25:47">"premature EOI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="111:5"><if pos:start="33:5" pos:end="107:5">if <condition pos:start="33:8" pos:end="33:45">(<expr pos:start="33:9" pos:end="33:44"><call pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:22">token_get_type</name><argument_list pos:start="33:23" pos:end="33:28">(<argument pos:start="33:24" pos:end="33:27"><expr pos:start="33:24" pos:end="33:27"><name pos:start="33:24" pos:end="33:27">peek</name></expr></argument>)</argument_list></call> <operator pos:start="33:30" pos:end="33:31">!=</operator> <name pos:start="33:33" pos:end="33:44">JSON_RSQUARE</name></expr>)</condition> <block pos:start="33:47" pos:end="107:5">{<block_content pos:start="35:9" pos:end="105:9">

        <decl_stmt pos:start="35:9" pos:end="35:21"><decl pos:start="35:9" pos:end="35:20"><type pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:15">QObject</name> <modifier pos:start="35:17" pos:end="35:17">*</modifier></type><name pos:start="35:18" pos:end="35:20">obj</name></decl>;</decl_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:11">obj</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:35"><name pos:start="39:15" pos:end="39:25">parse_value</name><argument_list pos:start="39:26" pos:end="39:35">(<argument pos:start="39:27" pos:end="39:30"><expr pos:start="39:27" pos:end="39:30"><name pos:start="39:27" pos:end="39:30">ctxt</name></expr></argument>, <argument pos:start="39:33" pos:end="39:34"><expr pos:start="39:33" pos:end="39:34"><name pos:start="39:33" pos:end="39:34">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:24">(<expr pos:start="41:13" pos:end="41:23"><name pos:start="41:13" pos:end="41:15">obj</name> <operator pos:start="41:17" pos:end="41:18">==</operator> <name pos:start="41:20" pos:end="41:23">NULL</name></expr>)</condition> <block pos:start="41:26" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:21">

            <expr_stmt pos:start="43:13" pos:end="43:56"><expr pos:start="43:13" pos:end="43:55"><call pos:start="43:13" pos:end="43:55"><name pos:start="43:13" pos:end="43:23">parse_error</name><argument_list pos:start="43:24" pos:end="43:55">(<argument pos:start="43:25" pos:end="43:28"><expr pos:start="43:25" pos:end="43:28"><name pos:start="43:25" pos:end="43:28">ctxt</name></expr></argument>, <argument pos:start="43:31" pos:end="43:35"><expr pos:start="43:31" pos:end="43:35"><name pos:start="43:31" pos:end="43:35">token</name></expr></argument>, <argument pos:start="43:38" pos:end="43:54"><expr pos:start="43:38" pos:end="43:54"><literal type="string" pos:start="43:38" pos:end="43:54">"expecting value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="45:13" pos:end="45:21">goto <name pos:start="45:18" pos:end="45:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><call pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:24">qlist_append_obj</name><argument_list pos:start="51:25" pos:end="51:35">(<argument pos:start="51:26" pos:end="51:29"><expr pos:start="51:26" pos:end="51:29"><name pos:start="51:26" pos:end="51:29">list</name></expr></argument>, <argument pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><name pos:start="51:32" pos:end="51:34">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:47"><expr pos:start="55:9" pos:end="55:46"><name pos:start="55:9" pos:end="55:13">token</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <call pos:start="55:17" pos:end="55:46"><name pos:start="55:17" pos:end="55:40">parser_context_pop_token</name><argument_list pos:start="55:41" pos:end="55:46">(<argument pos:start="55:42" pos:end="55:45"><expr pos:start="55:42" pos:end="55:45"><name pos:start="55:42" pos:end="55:45">ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:26">(<expr pos:start="57:13" pos:end="57:25"><name pos:start="57:13" pos:end="57:17">token</name> <operator pos:start="57:19" pos:end="57:20">==</operator> <name pos:start="57:22" pos:end="57:25">NULL</name></expr>)</condition> <block pos:start="57:28" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:21">

            <expr_stmt pos:start="59:13" pos:end="59:53"><expr pos:start="59:13" pos:end="59:52"><call pos:start="59:13" pos:end="59:52"><name pos:start="59:13" pos:end="59:23">parse_error</name><argument_list pos:start="59:24" pos:end="59:52">(<argument pos:start="59:25" pos:end="59:28"><expr pos:start="59:25" pos:end="59:28"><name pos:start="59:25" pos:end="59:28">ctxt</name></expr></argument>, <argument pos:start="59:31" pos:end="59:34"><expr pos:start="59:31" pos:end="59:34"><name pos:start="59:31" pos:end="59:34">NULL</name></expr></argument>, <argument pos:start="59:37" pos:end="59:51"><expr pos:start="59:37" pos:end="59:51"><literal type="string" pos:start="59:37" pos:end="59:51">"premature EOI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="61:13" pos:end="61:21">goto <name pos:start="61:18" pos:end="61:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <while pos:start="67:9" pos:end="105:9">while <condition pos:start="67:15" pos:end="67:53">(<expr pos:start="67:16" pos:end="67:52"><call pos:start="67:16" pos:end="67:36"><name pos:start="67:16" pos:end="67:29">token_get_type</name><argument_list pos:start="67:30" pos:end="67:36">(<argument pos:start="67:31" pos:end="67:35"><expr pos:start="67:31" pos:end="67:35"><name pos:start="67:31" pos:end="67:35">token</name></expr></argument>)</argument_list></call> <operator pos:start="67:38" pos:end="67:39">!=</operator> <name pos:start="67:41" pos:end="67:52">JSON_RSQUARE</name></expr>)</condition> <block pos:start="67:55" pos:end="105:9">{<block_content pos:start="69:13" pos:end="103:13">

            <if_stmt pos:start="69:13" pos:end="75:13"><if pos:start="69:13" pos:end="75:13">if <condition pos:start="69:16" pos:end="69:52">(<expr pos:start="69:17" pos:end="69:51"><call pos:start="69:17" pos:end="69:37"><name pos:start="69:17" pos:end="69:30">token_get_type</name><argument_list pos:start="69:31" pos:end="69:37">(<argument pos:start="69:32" pos:end="69:36"><expr pos:start="69:32" pos:end="69:36"><name pos:start="69:32" pos:end="69:36">token</name></expr></argument>)</argument_list></call> <operator pos:start="69:39" pos:end="69:40">!=</operator> <name pos:start="69:42" pos:end="69:51">JSON_COMMA</name></expr>)</condition> <block pos:start="69:54" pos:end="75:13">{<block_content pos:start="71:17" pos:end="73:25">

                <expr_stmt pos:start="71:17" pos:end="71:71"><expr pos:start="71:17" pos:end="71:70"><call pos:start="71:17" pos:end="71:70"><name pos:start="71:17" pos:end="71:27">parse_error</name><argument_list pos:start="71:28" pos:end="71:70">(<argument pos:start="71:29" pos:end="71:32"><expr pos:start="71:29" pos:end="71:32"><name pos:start="71:29" pos:end="71:32">ctxt</name></expr></argument>, <argument pos:start="71:35" pos:end="71:39"><expr pos:start="71:35" pos:end="71:39"><name pos:start="71:35" pos:end="71:39">token</name></expr></argument>, <argument pos:start="71:42" pos:end="71:69"><expr pos:start="71:42" pos:end="71:69"><literal type="string" pos:start="71:42" pos:end="71:69">"expected separator in list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="73:17" pos:end="73:25">goto <name pos:start="73:22" pos:end="73:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="79:13" pos:end="79:40"><expr pos:start="79:13" pos:end="79:39"><name pos:start="79:13" pos:end="79:15">obj</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <call pos:start="79:19" pos:end="79:39"><name pos:start="79:19" pos:end="79:29">parse_value</name><argument_list pos:start="79:30" pos:end="79:39">(<argument pos:start="79:31" pos:end="79:34"><expr pos:start="79:31" pos:end="79:34"><name pos:start="79:31" pos:end="79:34">ctxt</name></expr></argument>, <argument pos:start="79:37" pos:end="79:38"><expr pos:start="79:37" pos:end="79:38"><name pos:start="79:37" pos:end="79:38">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="87:13"><if pos:start="81:13" pos:end="87:13">if <condition pos:start="81:16" pos:end="81:28">(<expr pos:start="81:17" pos:end="81:27"><name pos:start="81:17" pos:end="81:19">obj</name> <operator pos:start="81:21" pos:end="81:22">==</operator> <name pos:start="81:24" pos:end="81:27">NULL</name></expr>)</condition> <block pos:start="81:30" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:25">

                <expr_stmt pos:start="83:17" pos:end="83:60"><expr pos:start="83:17" pos:end="83:59"><call pos:start="83:17" pos:end="83:59"><name pos:start="83:17" pos:end="83:27">parse_error</name><argument_list pos:start="83:28" pos:end="83:59">(<argument pos:start="83:29" pos:end="83:32"><expr pos:start="83:29" pos:end="83:32"><name pos:start="83:29" pos:end="83:32">ctxt</name></expr></argument>, <argument pos:start="83:35" pos:end="83:39"><expr pos:start="83:35" pos:end="83:39"><name pos:start="83:35" pos:end="83:39">token</name></expr></argument>, <argument pos:start="83:42" pos:end="83:58"><expr pos:start="83:42" pos:end="83:58"><literal type="string" pos:start="83:42" pos:end="83:58">"expecting value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="85:17" pos:end="85:25">goto <name pos:start="85:22" pos:end="85:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="91:13" pos:end="91:40"><expr pos:start="91:13" pos:end="91:39"><call pos:start="91:13" pos:end="91:39"><name pos:start="91:13" pos:end="91:28">qlist_append_obj</name><argument_list pos:start="91:29" pos:end="91:39">(<argument pos:start="91:30" pos:end="91:33"><expr pos:start="91:30" pos:end="91:33"><name pos:start="91:30" pos:end="91:33">list</name></expr></argument>, <argument pos:start="91:36" pos:end="91:38"><expr pos:start="91:36" pos:end="91:38"><name pos:start="91:36" pos:end="91:38">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="95:13" pos:end="95:51"><expr pos:start="95:13" pos:end="95:50"><name pos:start="95:13" pos:end="95:17">token</name> <operator pos:start="95:19" pos:end="95:19">=</operator> <call pos:start="95:21" pos:end="95:50"><name pos:start="95:21" pos:end="95:44">parser_context_pop_token</name><argument_list pos:start="95:45" pos:end="95:50">(<argument pos:start="95:46" pos:end="95:49"><expr pos:start="95:46" pos:end="95:49"><name pos:start="95:46" pos:end="95:49">ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="97:13" pos:end="103:13"><if pos:start="97:13" pos:end="103:13">if <condition pos:start="97:16" pos:end="97:30">(<expr pos:start="97:17" pos:end="97:29"><name pos:start="97:17" pos:end="97:21">token</name> <operator pos:start="97:23" pos:end="97:24">==</operator> <name pos:start="97:26" pos:end="97:29">NULL</name></expr>)</condition> <block pos:start="97:32" pos:end="103:13">{<block_content pos:start="99:17" pos:end="101:25">

                <expr_stmt pos:start="99:17" pos:end="99:57"><expr pos:start="99:17" pos:end="99:56"><call pos:start="99:17" pos:end="99:56"><name pos:start="99:17" pos:end="99:27">parse_error</name><argument_list pos:start="99:28" pos:end="99:56">(<argument pos:start="99:29" pos:end="99:32"><expr pos:start="99:29" pos:end="99:32"><name pos:start="99:29" pos:end="99:32">ctxt</name></expr></argument>, <argument pos:start="99:35" pos:end="99:38"><expr pos:start="99:35" pos:end="99:38"><name pos:start="99:35" pos:end="99:38">NULL</name></expr></argument>, <argument pos:start="99:41" pos:end="99:55"><expr pos:start="99:41" pos:end="99:55"><literal type="string" pos:start="99:41" pos:end="99:55">"premature EOI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="101:17" pos:end="101:25">goto <name pos:start="101:22" pos:end="101:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="111:5">else <block pos:start="107:12" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:45">

        <expr_stmt pos:start="109:9" pos:end="109:45"><expr pos:start="109:9" pos:end="109:44"><operator pos:start="109:9" pos:end="109:9">(</operator><name pos:start="109:10" pos:end="109:13">void</name><operator pos:start="109:14" pos:end="109:14">)</operator><call pos:start="109:15" pos:end="109:44"><name pos:start="109:15" pos:end="109:38">parser_context_pop_token</name><argument_list pos:start="109:39" pos:end="109:44">(<argument pos:start="109:40" pos:end="109:43"><expr pos:start="109:40" pos:end="109:43"><name pos:start="109:40" pos:end="109:43">ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="115:5" pos:end="115:25">return <expr pos:start="115:12" pos:end="115:24"><call pos:start="115:12" pos:end="115:24"><name pos:start="115:12" pos:end="115:18">QOBJECT</name><argument_list pos:start="115:19" pos:end="115:24">(<argument pos:start="115:20" pos:end="115:23"><expr pos:start="115:20" pos:end="115:23"><name pos:start="115:20" pos:end="115:23">list</name></expr></argument>)</argument_list></call></expr>;</return>



<label pos:start="119:1" pos:end="119:4"><name pos:start="119:1" pos:end="119:3">out</name>:</label>

    <expr_stmt pos:start="121:5" pos:end="121:18"><expr pos:start="121:5" pos:end="121:17"><call pos:start="121:5" pos:end="121:17"><name pos:start="121:5" pos:end="121:11">QDECREF</name><argument_list pos:start="121:12" pos:end="121:17">(<argument pos:start="121:13" pos:end="121:16"><expr pos:start="121:13" pos:end="121:16"><name pos:start="121:13" pos:end="121:16">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="123:5" pos:end="123:16">return <expr pos:start="123:12" pos:end="123:15"><name pos:start="123:12" pos:end="123:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
