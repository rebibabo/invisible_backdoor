<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22816.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">mcf5208evb_init</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:40">MachineState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:49">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="209:1">{<block_content pos:start="5:5" pos:end="207:20">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">M68kCPU</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">CPUM68KState</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">hwaddr</name></type> <name pos:start="19:12" pos:end="19:16">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:17">pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:58"><decl pos:start="23:5" pos:end="23:57"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:35">address_space_mem</name> <init pos:start="23:37" pos:end="23:57">= <expr pos:start="23:39" pos:end="23:57"><call pos:start="23:39" pos:end="23:57"><name pos:start="23:39" pos:end="23:55">get_system_memory</name><argument_list pos:start="23:56" pos:end="23:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:47"><decl pos:start="25:5" pos:end="25:46"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:21">ram</name> <init pos:start="25:23" pos:end="25:46">= <expr pos:start="25:25" pos:end="25:46"><call pos:start="25:25" pos:end="25:46"><name pos:start="25:25" pos:end="25:29">g_new</name><argument_list pos:start="25:30" pos:end="25:46">(<argument pos:start="25:31" pos:end="25:42"><expr pos:start="25:31" pos:end="25:42"><name pos:start="25:31" pos:end="25:42">MemoryRegion</name></expr></argument>, <argument pos:start="25:45" pos:end="25:45"><expr pos:start="25:45" pos:end="25:45"><literal type="number" pos:start="25:45" pos:end="25:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:48"><decl pos:start="27:5" pos:end="27:47"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">MemoryRegion</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:22">sram</name> <init pos:start="27:24" pos:end="27:47">= <expr pos:start="27:26" pos:end="27:47"><call pos:start="27:26" pos:end="27:47"><name pos:start="27:26" pos:end="27:30">g_new</name><argument_list pos:start="27:31" pos:end="27:47">(<argument pos:start="27:32" pos:end="27:43"><expr pos:start="27:32" pos:end="27:43"><name pos:start="27:32" pos:end="27:43">MemoryRegion</name></expr></argument>, <argument pos:start="27:46" pos:end="27:46"><expr pos:start="27:46" pos:end="27:46"><literal type="number" pos:start="27:46" pos:end="27:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:19">(<expr pos:start="31:9" pos:end="31:18"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:18">cpu_model</name></expr>)</condition> <block pos:start="31:21" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:28">

        <expr_stmt pos:start="33:9" pos:end="33:28"><expr pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:17">cpu_model</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="string" pos:start="33:21" pos:end="33:27">"m5208"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:63"><expr pos:start="37:5" pos:end="37:62"><name pos:start="37:5" pos:end="37:7">cpu</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:62"><name pos:start="37:11" pos:end="37:18">M68K_CPU</name><argument_list pos:start="37:19" pos:end="37:62">(<argument pos:start="37:20" pos:end="37:61"><expr pos:start="37:20" pos:end="37:61"><call pos:start="37:20" pos:end="37:61"><name pos:start="37:20" pos:end="37:35">cpu_generic_init</name><argument_list pos:start="37:36" pos:end="37:61">(<argument pos:start="37:37" pos:end="37:49"><expr pos:start="37:37" pos:end="37:49"><name pos:start="37:37" pos:end="37:49">TYPE_M68K_CPU</name></expr></argument>, <argument pos:start="37:52" pos:end="37:60"><expr pos:start="37:52" pos:end="37:60"><name pos:start="37:52" pos:end="37:60">cpu_model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:13">(<expr pos:start="39:9" pos:end="39:12"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:12">cpu</name></expr>)</condition> <block pos:start="39:15" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:16">

        <expr_stmt pos:start="41:9" pos:end="41:64"><expr pos:start="41:9" pos:end="41:63"><call pos:start="41:9" pos:end="41:63"><name pos:start="41:9" pos:end="41:15">fprintf</name><argument_list pos:start="41:16" pos:end="41:63">(<argument pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:22">stderr</name></expr></argument>, <argument pos:start="41:25" pos:end="41:62"><expr pos:start="41:25" pos:end="41:62"><literal type="string" pos:start="41:25" pos:end="41:62">"Unable to find m68k CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:16"><expr pos:start="43:9" pos:end="43:15"><call pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:12">exit</name><argument_list pos:start="43:13" pos:end="43:15">(<argument pos:start="43:14" pos:end="43:14"><expr pos:start="43:14" pos:end="43:14"><literal type="number" pos:start="43:14" pos:end="43:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:20"><expr pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:7">env</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <operator pos:start="47:11" pos:end="47:11">&amp;</operator><name pos:start="47:12" pos:end="47:19"><name pos:start="47:12" pos:end="47:14">cpu</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:19">env</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:36">/* Initialize CPU registers.  */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:17"><expr pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:7">env</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:12">vbr</name></name> <operator pos:start="53:14" pos:end="53:14">=</operator> <literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="55:5" pos:end="55:32">/* TODO: Configure BARs.  */</comment>



    <comment type="block" pos:start="59:5" pos:end="59:28">/* DRAM at 0x40000000 */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:77"><expr pos:start="61:5" pos:end="61:76"><call pos:start="61:5" pos:end="61:76"><name pos:start="61:5" pos:end="61:40">memory_region_allocate_system_memory</name><argument_list pos:start="61:41" pos:end="61:76">(<argument pos:start="61:42" pos:end="61:44"><expr pos:start="61:42" pos:end="61:44"><name pos:start="61:42" pos:end="61:44">ram</name></expr></argument>, <argument pos:start="61:47" pos:end="61:50"><expr pos:start="61:47" pos:end="61:50"><name pos:start="61:47" pos:end="61:50">NULL</name></expr></argument>, <argument pos:start="61:53" pos:end="61:65"><expr pos:start="61:53" pos:end="61:65"><literal type="string" pos:start="61:53" pos:end="61:65">"mcf5208.ram"</literal></expr></argument>, <argument pos:start="61:68" pos:end="61:75"><expr pos:start="61:68" pos:end="61:75"><name pos:start="61:68" pos:end="61:75">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:68"><expr pos:start="63:5" pos:end="63:67"><call pos:start="63:5" pos:end="63:67"><name pos:start="63:5" pos:end="63:31">memory_region_add_subregion</name><argument_list pos:start="63:32" pos:end="63:67">(<argument pos:start="63:33" pos:end="63:49"><expr pos:start="63:33" pos:end="63:49"><name pos:start="63:33" pos:end="63:49">address_space_mem</name></expr></argument>, <argument pos:start="63:52" pos:end="63:61"><expr pos:start="63:52" pos:end="63:61"><literal type="number" pos:start="63:52" pos:end="63:61">0x40000000</literal></expr></argument>, <argument pos:start="63:64" pos:end="63:66"><expr pos:start="63:64" pos:end="63:66"><name pos:start="63:64" pos:end="63:66">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:25">/* Internal SRAM.  */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:76"><expr pos:start="69:5" pos:end="69:75"><call pos:start="69:5" pos:end="69:75"><name pos:start="69:5" pos:end="69:26">memory_region_init_ram</name><argument_list pos:start="69:27" pos:end="69:75">(<argument pos:start="69:28" pos:end="69:31"><expr pos:start="69:28" pos:end="69:31"><name pos:start="69:28" pos:end="69:31">sram</name></expr></argument>, <argument pos:start="69:34" pos:end="69:37"><expr pos:start="69:34" pos:end="69:37"><name pos:start="69:34" pos:end="69:37">NULL</name></expr></argument>, <argument pos:start="69:40" pos:end="69:53"><expr pos:start="69:40" pos:end="69:53"><literal type="string" pos:start="69:40" pos:end="69:53">"mcf5208.sram"</literal></expr></argument>, <argument pos:start="69:56" pos:end="69:60"><expr pos:start="69:56" pos:end="69:60"><literal type="number" pos:start="69:56" pos:end="69:60">16384</literal></expr></argument>, <argument pos:start="69:63" pos:end="69:74"><expr pos:start="69:63" pos:end="69:74"><operator pos:start="69:63" pos:end="69:63">&amp;</operator><name pos:start="69:64" pos:end="69:74">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:69"><expr pos:start="71:5" pos:end="71:68"><call pos:start="71:5" pos:end="71:68"><name pos:start="71:5" pos:end="71:31">memory_region_add_subregion</name><argument_list pos:start="71:32" pos:end="71:68">(<argument pos:start="71:33" pos:end="71:49"><expr pos:start="71:33" pos:end="71:49"><name pos:start="71:33" pos:end="71:49">address_space_mem</name></expr></argument>, <argument pos:start="71:52" pos:end="71:61"><expr pos:start="71:52" pos:end="71:61"><literal type="number" pos:start="71:52" pos:end="71:61">0x80000000</literal></expr></argument>, <argument pos:start="71:64" pos:end="71:67"><expr pos:start="71:64" pos:end="71:67"><name pos:start="71:64" pos:end="71:67">sram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:32">/* Internal peripherals.  */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:60"><expr pos:start="77:5" pos:end="77:59"><name pos:start="77:5" pos:end="77:7">pic</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:59"><name pos:start="77:11" pos:end="77:23">mcf_intc_init</name><argument_list pos:start="77:24" pos:end="77:59">(<argument pos:start="77:25" pos:end="77:41"><expr pos:start="77:25" pos:end="77:41"><name pos:start="77:25" pos:end="77:41">address_space_mem</name></expr></argument>, <argument pos:start="77:44" pos:end="77:53"><expr pos:start="77:44" pos:end="77:53"><literal type="number" pos:start="77:44" pos:end="77:53">0xfc048000</literal></expr></argument>, <argument pos:start="77:56" pos:end="77:58"><expr pos:start="77:56" pos:end="77:58"><name pos:start="77:56" pos:end="77:58">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:57"><expr pos:start="81:5" pos:end="81:56"><call pos:start="81:5" pos:end="81:56"><name pos:start="81:5" pos:end="81:20">mcf_uart_mm_init</name><argument_list pos:start="81:21" pos:end="81:56">(<argument pos:start="81:22" pos:end="81:31"><expr pos:start="81:22" pos:end="81:31"><literal type="number" pos:start="81:22" pos:end="81:31">0xfc060000</literal></expr></argument>, <argument pos:start="81:34" pos:end="81:40"><expr pos:start="81:34" pos:end="81:40"><name pos:start="81:34" pos:end="81:40"><name pos:start="81:34" pos:end="81:36">pic</name><index pos:start="81:37" pos:end="81:40">[<expr pos:start="81:38" pos:end="81:39"><literal type="number" pos:start="81:38" pos:end="81:39">26</literal></expr>]</index></name></expr></argument>, <argument pos:start="81:43" pos:end="81:55"><expr pos:start="81:43" pos:end="81:55"><name pos:start="81:43" pos:end="81:55"><name pos:start="81:43" pos:end="81:52">serial_hds</name><index pos:start="81:53" pos:end="81:55">[<expr pos:start="81:54" pos:end="81:54"><literal type="number" pos:start="81:54" pos:end="81:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:57"><expr pos:start="83:5" pos:end="83:56"><call pos:start="83:5" pos:end="83:56"><name pos:start="83:5" pos:end="83:20">mcf_uart_mm_init</name><argument_list pos:start="83:21" pos:end="83:56">(<argument pos:start="83:22" pos:end="83:31"><expr pos:start="83:22" pos:end="83:31"><literal type="number" pos:start="83:22" pos:end="83:31">0xfc064000</literal></expr></argument>, <argument pos:start="83:34" pos:end="83:40"><expr pos:start="83:34" pos:end="83:40"><name pos:start="83:34" pos:end="83:40"><name pos:start="83:34" pos:end="83:36">pic</name><index pos:start="83:37" pos:end="83:40">[<expr pos:start="83:38" pos:end="83:39"><literal type="number" pos:start="83:38" pos:end="83:39">27</literal></expr>]</index></name></expr></argument>, <argument pos:start="83:43" pos:end="83:55"><expr pos:start="83:43" pos:end="83:55"><name pos:start="83:43" pos:end="83:55"><name pos:start="83:43" pos:end="83:52">serial_hds</name><index pos:start="83:53" pos:end="83:55">[<expr pos:start="83:54" pos:end="83:54"><literal type="number" pos:start="83:54" pos:end="83:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:57"><expr pos:start="85:5" pos:end="85:56"><call pos:start="85:5" pos:end="85:56"><name pos:start="85:5" pos:end="85:20">mcf_uart_mm_init</name><argument_list pos:start="85:21" pos:end="85:56">(<argument pos:start="85:22" pos:end="85:31"><expr pos:start="85:22" pos:end="85:31"><literal type="number" pos:start="85:22" pos:end="85:31">0xfc068000</literal></expr></argument>, <argument pos:start="85:34" pos:end="85:40"><expr pos:start="85:34" pos:end="85:40"><name pos:start="85:34" pos:end="85:40"><name pos:start="85:34" pos:end="85:36">pic</name><index pos:start="85:37" pos:end="85:40">[<expr pos:start="85:38" pos:end="85:39"><literal type="number" pos:start="85:38" pos:end="85:39">28</literal></expr>]</index></name></expr></argument>, <argument pos:start="85:43" pos:end="85:55"><expr pos:start="85:43" pos:end="85:55"><name pos:start="85:43" pos:end="85:55"><name pos:start="85:43" pos:end="85:52">serial_hds</name><index pos:start="85:53" pos:end="85:55">[<expr pos:start="85:54" pos:end="85:54"><literal type="number" pos:start="85:54" pos:end="85:54">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:45"><expr pos:start="89:5" pos:end="89:44"><call pos:start="89:5" pos:end="89:44"><name pos:start="89:5" pos:end="89:20">mcf5208_sys_init</name><argument_list pos:start="89:21" pos:end="89:44">(<argument pos:start="89:22" pos:end="89:38"><expr pos:start="89:22" pos:end="89:38"><name pos:start="89:22" pos:end="89:38">address_space_mem</name></expr></argument>, <argument pos:start="89:41" pos:end="89:43"><expr pos:start="89:41" pos:end="89:43"><name pos:start="89:41" pos:end="89:43">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:20">(<expr pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:15">nb_nics</name> <operator pos:start="93:17" pos:end="93:17">&gt;</operator> <literal type="number" pos:start="93:19" pos:end="93:19">1</literal></expr>)</condition> <block pos:start="93:22" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:16">

        <expr_stmt pos:start="95:9" pos:end="95:43"><expr pos:start="95:9" pos:end="95:42"><call pos:start="95:9" pos:end="95:42"><name pos:start="95:9" pos:end="95:15">fprintf</name><argument_list pos:start="95:16" pos:end="95:42">(<argument pos:start="95:17" pos:end="95:22"><expr pos:start="95:17" pos:end="95:22"><name pos:start="95:17" pos:end="95:22">stderr</name></expr></argument>, <argument pos:start="95:25" pos:end="95:41"><expr pos:start="95:25" pos:end="95:41"><literal type="string" pos:start="95:25" pos:end="95:41">"Too many NICs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:16"><expr pos:start="97:9" pos:end="97:15"><call pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:12">exit</name><argument_list pos:start="97:13" pos:end="97:15">(<argument pos:start="97:14" pos:end="97:14"><expr pos:start="97:14" pos:end="97:14"><literal type="number" pos:start="97:14" pos:end="97:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:25">(<expr pos:start="101:9" pos:end="101:24"><name pos:start="101:9" pos:end="101:19"><name pos:start="101:9" pos:end="101:16">nd_table</name><index pos:start="101:17" pos:end="101:19">[<expr pos:start="101:18" pos:end="101:18"><literal type="number" pos:start="101:18" pos:end="101:18">0</literal></expr>]</index></name><operator pos:start="101:20" pos:end="101:20">.</operator><name pos:start="101:21" pos:end="101:24">used</name></expr>)</condition> <block pos:start="101:27" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:43">

        <expr_stmt pos:start="103:9" pos:end="105:43"><expr pos:start="103:9" pos:end="105:42"><call pos:start="103:9" pos:end="105:42"><name pos:start="103:9" pos:end="103:20">mcf_fec_init</name><argument_list pos:start="103:21" pos:end="105:42">(<argument pos:start="103:22" pos:end="103:38"><expr pos:start="103:22" pos:end="103:38"><name pos:start="103:22" pos:end="103:38">address_space_mem</name></expr></argument>, <argument pos:start="103:41" pos:end="103:52"><expr pos:start="103:41" pos:end="103:52"><operator pos:start="103:41" pos:end="103:41">&amp;</operator><name pos:start="103:42" pos:end="103:52"><name pos:start="103:42" pos:end="103:49">nd_table</name><index pos:start="103:50" pos:end="103:52">[<expr pos:start="103:51" pos:end="103:51"><literal type="number" pos:start="103:51" pos:end="103:51">0</literal></expr>]</index></name></expr></argument>,

                     <argument pos:start="105:22" pos:end="105:31"><expr pos:start="105:22" pos:end="105:31"><literal type="number" pos:start="105:22" pos:end="105:31">0xfc030000</literal></expr></argument>, <argument pos:start="105:34" pos:end="105:41"><expr pos:start="105:34" pos:end="105:41"><name pos:start="105:34" pos:end="105:36">pic</name> <operator pos:start="105:38" pos:end="105:38">+</operator> <literal type="number" pos:start="105:40" pos:end="105:41">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:27">/*  0xfc000000 SCM.  */</comment>

    <comment type="block" pos:start="113:5" pos:end="113:27">/*  0xfc004000 XBS.  */</comment>

    <comment type="block" pos:start="115:5" pos:end="115:34">/*  0xfc008000 FlexBus CS.  */</comment>

    <comment type="block" pos:start="117:5" pos:end="117:26">/* 0xfc030000 FEC.  */</comment>

    <comment type="block" pos:start="119:5" pos:end="119:46">/*  0xfc040000 SCM + Power management.  */</comment>

    <comment type="block" pos:start="121:5" pos:end="121:28">/*  0xfc044000 eDMA.  */</comment>

    <comment type="block" pos:start="123:5" pos:end="123:27">/* 0xfc048000 INTC.  */</comment>

    <comment type="block" pos:start="125:5" pos:end="125:27">/*  0xfc058000 I2C.  */</comment>

    <comment type="block" pos:start="127:5" pos:end="127:28">/*  0xfc05c000 QSPI.  */</comment>

    <comment type="block" pos:start="129:5" pos:end="129:28">/* 0xfc060000 UART0.  */</comment>

    <comment type="block" pos:start="131:5" pos:end="131:28">/* 0xfc064000 UART0.  */</comment>

    <comment type="block" pos:start="133:5" pos:end="133:28">/* 0xfc068000 UART0.  */</comment>

    <comment type="block" pos:start="135:5" pos:end="135:34">/*  0xfc070000 DMA timers.  */</comment>

    <comment type="block" pos:start="137:5" pos:end="137:27">/* 0xfc080000 PIT0.  */</comment>

    <comment type="block" pos:start="139:5" pos:end="139:27">/* 0xfc084000 PIT1.  */</comment>

    <comment type="block" pos:start="141:5" pos:end="141:29">/*  0xfc088000 EPORT.  */</comment>

    <comment type="block" pos:start="143:5" pos:end="143:32">/*  0xfc08c000 Watchdog.  */</comment>

    <comment type="block" pos:start="145:5" pos:end="145:36">/*  0xfc090000 clock module.  */</comment>

    <comment type="block" pos:start="147:5" pos:end="147:35">/*  0xfc0a0000 CCM + reset.  */</comment>

    <comment type="block" pos:start="149:5" pos:end="149:28">/*  0xfc0a4000 GPIO.  */</comment>

    <comment type="block" pos:start="151:5" pos:end="151:39">/* 0xfc0a8000 SDRAM controller.  */</comment>



    <comment type="block" pos:start="155:5" pos:end="155:23">/* Load kernel.  */</comment>

    <if_stmt pos:start="157:5" pos:end="169:5"><if pos:start="157:5" pos:end="169:5">if <condition pos:start="157:8" pos:end="157:25">(<expr pos:start="157:9" pos:end="157:24"><operator pos:start="157:9" pos:end="157:9">!</operator><name pos:start="157:10" pos:end="157:24">kernel_filename</name></expr>)</condition> <block pos:start="157:27" pos:end="169:5">{<block_content pos:start="159:9" pos:end="167:16">

        <if_stmt pos:start="159:9" pos:end="163:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:28">(<expr pos:start="159:13" pos:end="159:27"><call pos:start="159:13" pos:end="159:27"><name pos:start="159:13" pos:end="159:25">qtest_enabled</name><argument_list pos:start="159:26" pos:end="159:27">()</argument_list></call></expr>)</condition> <block pos:start="159:30" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:19">

            <return pos:start="161:13" pos:end="161:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:60"><expr pos:start="165:9" pos:end="165:59"><call pos:start="165:9" pos:end="165:59"><name pos:start="165:9" pos:end="165:15">fprintf</name><argument_list pos:start="165:16" pos:end="165:59">(<argument pos:start="165:17" pos:end="165:22"><expr pos:start="165:17" pos:end="165:22"><name pos:start="165:17" pos:end="165:22">stderr</name></expr></argument>, <argument pos:start="165:25" pos:end="165:58"><expr pos:start="165:25" pos:end="165:58"><literal type="string" pos:start="165:25" pos:end="165:58">"Kernel image must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:16"><expr pos:start="167:9" pos:end="167:15"><call pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:12">exit</name><argument_list pos:start="167:13" pos:end="167:15">(<argument pos:start="167:14" pos:end="167:14"><expr pos:start="167:14" pos:end="167:14"><literal type="number" pos:start="167:14" pos:end="167:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="175:56"><expr pos:start="173:5" pos:end="175:55"><name pos:start="173:5" pos:end="173:15">kernel_size</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="175:55"><name pos:start="173:19" pos:end="173:26">load_elf</name><argument_list pos:start="173:27" pos:end="175:55">(<argument pos:start="173:28" pos:end="173:42"><expr pos:start="173:28" pos:end="173:42"><name pos:start="173:28" pos:end="173:42">kernel_filename</name></expr></argument>, <argument pos:start="173:45" pos:end="173:48"><expr pos:start="173:45" pos:end="173:48"><name pos:start="173:45" pos:end="173:48">NULL</name></expr></argument>, <argument pos:start="173:51" pos:end="173:54"><expr pos:start="173:51" pos:end="173:54"><name pos:start="173:51" pos:end="173:54">NULL</name></expr></argument>, <argument pos:start="173:57" pos:end="173:66"><expr pos:start="173:57" pos:end="173:66"><operator pos:start="173:57" pos:end="173:57">&amp;</operator><name pos:start="173:58" pos:end="173:66">elf_entry</name></expr></argument>,

                           <argument pos:start="175:28" pos:end="175:31"><expr pos:start="175:28" pos:end="175:31"><name pos:start="175:28" pos:end="175:31">NULL</name></expr></argument>, <argument pos:start="175:34" pos:end="175:37"><expr pos:start="175:34" pos:end="175:37"><name pos:start="175:34" pos:end="175:37">NULL</name></expr></argument>, <argument pos:start="175:40" pos:end="175:40"><expr pos:start="175:40" pos:end="175:40"><literal type="number" pos:start="175:40" pos:end="175:40">1</literal></expr></argument>, <argument pos:start="175:43" pos:end="175:48"><expr pos:start="175:43" pos:end="175:48"><name pos:start="175:43" pos:end="175:48">EM_68K</name></expr></argument>, <argument pos:start="175:51" pos:end="175:51"><expr pos:start="175:51" pos:end="175:51"><literal type="number" pos:start="175:51" pos:end="175:51">0</literal></expr></argument>, <argument pos:start="175:54" pos:end="175:54"><expr pos:start="175:54" pos:end="175:54"><literal type="number" pos:start="175:54" pos:end="175:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:22"><expr pos:start="177:5" pos:end="177:21"><name pos:start="177:5" pos:end="177:9">entry</name> <operator pos:start="177:11" pos:end="177:11">=</operator> <name pos:start="177:13" pos:end="177:21">elf_entry</name></expr>;</expr_stmt>

    <if_stmt pos:start="179:5" pos:end="185:5"><if pos:start="179:5" pos:end="185:5">if <condition pos:start="179:8" pos:end="179:24">(<expr pos:start="179:9" pos:end="179:23"><name pos:start="179:9" pos:end="179:19">kernel_size</name> <operator pos:start="179:21" pos:end="179:21">&lt;</operator> <literal type="number" pos:start="179:23" pos:end="179:23">0</literal></expr>)</condition> <block pos:start="179:26" pos:end="185:5">{<block_content pos:start="181:9" pos:end="183:46">

        <expr_stmt pos:start="181:9" pos:end="183:46"><expr pos:start="181:9" pos:end="183:45"><name pos:start="181:9" pos:end="181:19">kernel_size</name> <operator pos:start="181:21" pos:end="181:21">=</operator> <call pos:start="181:23" pos:end="183:45"><name pos:start="181:23" pos:end="181:33">load_uimage</name><argument_list pos:start="181:34" pos:end="183:45">(<argument pos:start="181:35" pos:end="181:49"><expr pos:start="181:35" pos:end="181:49"><name pos:start="181:35" pos:end="181:49">kernel_filename</name></expr></argument>, <argument pos:start="181:52" pos:end="181:57"><expr pos:start="181:52" pos:end="181:57"><operator pos:start="181:52" pos:end="181:52">&amp;</operator><name pos:start="181:53" pos:end="181:57">entry</name></expr></argument>, <argument pos:start="181:60" pos:end="181:63"><expr pos:start="181:60" pos:end="181:63"><name pos:start="181:60" pos:end="181:63">NULL</name></expr></argument>, <argument pos:start="181:66" pos:end="181:69"><expr pos:start="181:66" pos:end="181:69"><name pos:start="181:66" pos:end="181:69">NULL</name></expr></argument>,

                                  <argument pos:start="183:35" pos:end="183:38"><expr pos:start="183:35" pos:end="183:38"><name pos:start="183:35" pos:end="183:38">NULL</name></expr></argument>, <argument pos:start="183:41" pos:end="183:44"><expr pos:start="183:41" pos:end="183:44"><name pos:start="183:41" pos:end="183:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="187:5" pos:end="195:5"><if pos:start="187:5" pos:end="195:5">if <condition pos:start="187:8" pos:end="187:24">(<expr pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:19">kernel_size</name> <operator pos:start="187:21" pos:end="187:21">&lt;</operator> <literal type="number" pos:start="187:23" pos:end="187:23">0</literal></expr>)</condition> <block pos:start="187:26" pos:end="195:5">{<block_content pos:start="189:9" pos:end="193:27">

        <expr_stmt pos:start="189:9" pos:end="191:52"><expr pos:start="189:9" pos:end="191:51"><name pos:start="189:9" pos:end="189:19">kernel_size</name> <operator pos:start="189:21" pos:end="189:21">=</operator> <call pos:start="189:23" pos:end="191:51"><name pos:start="189:23" pos:end="189:41">load_image_targphys</name><argument_list pos:start="189:42" pos:end="191:51">(<argument pos:start="189:43" pos:end="189:57"><expr pos:start="189:43" pos:end="189:57"><name pos:start="189:43" pos:end="189:57">kernel_filename</name></expr></argument>, <argument pos:start="189:60" pos:end="189:69"><expr pos:start="189:60" pos:end="189:69"><literal type="number" pos:start="189:60" pos:end="189:69">0x40000000</literal></expr></argument>,

                                          <argument pos:start="191:43" pos:end="191:50"><expr pos:start="191:43" pos:end="191:50"><name pos:start="191:43" pos:end="191:50">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:27"><expr pos:start="193:9" pos:end="193:26"><name pos:start="193:9" pos:end="193:13">entry</name> <operator pos:start="193:15" pos:end="193:15">=</operator> <literal type="number" pos:start="193:17" pos:end="193:26">0x40000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="197:5" pos:end="203:5"><if pos:start="197:5" pos:end="203:5">if <condition pos:start="197:8" pos:end="197:24">(<expr pos:start="197:9" pos:end="197:23"><name pos:start="197:9" pos:end="197:19">kernel_size</name> <operator pos:start="197:21" pos:end="197:21">&lt;</operator> <literal type="number" pos:start="197:23" pos:end="197:23">0</literal></expr>)</condition> <block pos:start="197:26" pos:end="203:5">{<block_content pos:start="199:9" pos:end="201:16">

        <expr_stmt pos:start="199:9" pos:end="199:79"><expr pos:start="199:9" pos:end="199:78"><call pos:start="199:9" pos:end="199:78"><name pos:start="199:9" pos:end="199:15">fprintf</name><argument_list pos:start="199:16" pos:end="199:78">(<argument pos:start="199:17" pos:end="199:22"><expr pos:start="199:17" pos:end="199:22"><name pos:start="199:17" pos:end="199:22">stderr</name></expr></argument>, <argument pos:start="199:25" pos:end="199:60"><expr pos:start="199:25" pos:end="199:60"><literal type="string" pos:start="199:25" pos:end="199:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="199:63" pos:end="199:77"><expr pos:start="199:63" pos:end="199:77"><name pos:start="199:63" pos:end="199:77">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:16"><expr pos:start="201:9" pos:end="201:15"><call pos:start="201:9" pos:end="201:15"><name pos:start="201:9" pos:end="201:12">exit</name><argument_list pos:start="201:13" pos:end="201:15">(<argument pos:start="201:14" pos:end="201:14"><expr pos:start="201:14" pos:end="201:14"><literal type="number" pos:start="201:14" pos:end="201:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:20"><expr pos:start="207:5" pos:end="207:19"><name pos:start="207:5" pos:end="207:11"><name pos:start="207:5" pos:end="207:7">env</name><operator pos:start="207:8" pos:end="207:9">-&gt;</operator><name pos:start="207:10" pos:end="207:11">pc</name></name> <operator pos:start="207:13" pos:end="207:13">=</operator> <name pos:start="207:15" pos:end="207:19">entry</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
