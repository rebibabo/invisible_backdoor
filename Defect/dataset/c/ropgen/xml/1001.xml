<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1001.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">cpu_common_initfn</name><parameter_list pos:start="1:30" pos:end="1:42">(<parameter pos:start="1:31" pos:end="1:41"><decl pos:start="1:31" pos:end="1:41"><type pos:start="1:31" pos:end="1:38"><name pos:start="1:31" pos:end="1:36">Object</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">obj</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:25">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:28">= <expr pos:start="5:21" pos:end="5:28"><call pos:start="5:21" pos:end="5:28"><name pos:start="5:21" pos:end="5:23">CPU</name><argument_list pos:start="5:24" pos:end="5:28">(<argument pos:start="5:25" pos:end="5:27"><expr pos:start="5:25" pos:end="5:27"><name pos:start="5:25" pos:end="5:27">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUClass</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cc</name> <init pos:start="7:18" pos:end="7:37">= <expr pos:start="7:20" pos:end="7:37"><call pos:start="7:20" pos:end="7:37"><name pos:start="7:20" pos:end="7:32">CPU_GET_CLASS</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:42"><expr pos:start="11:5" pos:end="11:41"><name pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:7">cpu</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:18">cpu_index</name></name> <operator pos:start="11:20" pos:end="11:20">=</operator> <name pos:start="11:22" pos:end="11:41">UNASSIGNED_CPU_INDEX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:68"><expr pos:start="13:5" pos:end="13:67"><name pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:7">cpu</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:21">gdb_num_regs</name></name> <operator pos:start="13:23" pos:end="13:23">=</operator> <name pos:start="13:25" pos:end="13:43"><name pos:start="13:25" pos:end="13:27">cpu</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:43">gdb_num_g_regs</name></name> <operator pos:start="13:45" pos:end="13:45">=</operator> <name pos:start="13:47" pos:end="13:67"><name pos:start="13:47" pos:end="13:48">cc</name><operator pos:start="13:49" pos:end="13:50">-&gt;</operator><name pos:start="13:51" pos:end="13:67">gdb_num_core_regs</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="15:5" pos:end="15:55">/* *-user doesn't have configurable SMP topology */</comment>

    <comment type="block" pos:start="17:5" pos:end="17:70">/* the default value is changed by qemu_init_vcpu() for softmmu */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:7">cpu</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:17">nr_cores</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <literal type="number" pos:start="19:21" pos:end="19:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:7">cpu</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:19">nr_threads</name></name> <operator pos:start="21:21" pos:end="21:21">=</operator> <literal type="number" pos:start="21:23" pos:end="21:23">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><call pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:19">qemu_mutex_init</name><argument_list pos:start="25:20" pos:end="25:37">(<argument pos:start="25:21" pos:end="25:36"><expr pos:start="25:21" pos:end="25:36"><operator pos:start="25:21" pos:end="25:21">&amp;</operator><name pos:start="25:22" pos:end="25:36"><name pos:start="25:22" pos:end="25:24">cpu</name><operator pos:start="25:25" pos:end="25:26">-&gt;</operator><name pos:start="25:27" pos:end="25:36">work_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:35"><expr pos:start="27:5" pos:end="27:34"><call pos:start="27:5" pos:end="27:34"><name pos:start="27:5" pos:end="27:15">QTAILQ_INIT</name><argument_list pos:start="27:16" pos:end="27:34">(<argument pos:start="27:17" pos:end="27:33"><expr pos:start="27:17" pos:end="27:33"><operator pos:start="27:17" pos:end="27:17">&amp;</operator><name pos:start="27:18" pos:end="27:33"><name pos:start="27:18" pos:end="27:20">cpu</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:33">breakpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><call pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:15">QTAILQ_INIT</name><argument_list pos:start="29:16" pos:end="29:34">(<argument pos:start="29:17" pos:end="29:33"><expr pos:start="29:17" pos:end="29:33"><operator pos:start="29:17" pos:end="29:17">&amp;</operator><name pos:start="29:18" pos:end="29:33"><name pos:start="29:18" pos:end="29:20">cpu</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:33">watchpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:65"><expr pos:start="33:5" pos:end="33:64"><name pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:7">cpu</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:21">trace_dstate</name></name> <operator pos:start="33:23" pos:end="33:23">=</operator> <call pos:start="33:25" pos:end="33:64"><name pos:start="33:25" pos:end="33:34">bitmap_new</name><argument_list pos:start="33:35" pos:end="33:64">(<argument pos:start="33:36" pos:end="33:63"><expr pos:start="33:36" pos:end="33:63"><call pos:start="33:36" pos:end="33:63"><name pos:start="33:36" pos:end="33:61">trace_get_vcpu_event_count</name><argument_list pos:start="33:62" pos:end="33:63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:25"><expr pos:start="37:5" pos:end="37:24"><call pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:19">cpu_exec_initfn</name><argument_list pos:start="37:20" pos:end="37:24">(<argument pos:start="37:21" pos:end="37:23"><expr pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:23">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
