<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2254.c" pos:tabs="8"><function pos:start="1:1" pos:end="371:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">nbd_receive_negotiate</name><parameter_list pos:start="1:26" pos:end="7:39">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:36">QIOChannel</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">ioc</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:59"><decl pos:start="1:44" pos:end="1:59"><type pos:start="1:44" pos:end="1:59"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">name</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:51"><decl pos:start="3:27" pos:end="3:51"><type pos:start="3:27" pos:end="3:51"><name pos:start="3:27" pos:end="3:41">QCryptoTLSCreds</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:51">tlscreds</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:73"><decl pos:start="3:54" pos:end="3:73"><type pos:start="3:54" pos:end="3:73"><specifier pos:start="3:54" pos:end="3:58">const</specifier> <name pos:start="3:60" pos:end="3:63">char</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:73">hostname</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:45"><decl pos:start="5:27" pos:end="5:45"><type pos:start="5:27" pos:end="5:45"><name pos:start="5:27" pos:end="5:36">QIOChannel</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier><modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:45">outioc</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:66"><decl pos:start="5:48" pos:end="5:66"><type pos:start="5:48" pos:end="5:66"><name pos:start="5:48" pos:end="5:60">NBDExportInfo</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:66">info</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:38"><decl pos:start="7:27" pos:end="7:38"><type pos:start="7:27" pos:end="7:38"><name pos:start="7:27" pos:end="7:31">Error</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier><modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:38">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="371:1">{<block_content pos:start="11:5" pos:end="369:14">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:17"><name pos:start="11:10" pos:end="11:12">buf</name><index pos:start="11:13" pos:end="11:17">[<expr pos:start="11:14" pos:end="11:16"><literal type="number" pos:start="11:14" pos:end="11:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">magic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:15">zeroes</name> <init pos:start="17:17" pos:end="17:22">= <expr pos:start="17:19" pos:end="17:22"><name pos:start="17:19" pos:end="17:22">true</name></expr></init></decl>;</decl_stmt>




    <expr_stmt pos:start="22:5" pos:end="22:74"><expr pos:start="22:5" pos:end="22:73"><call pos:start="22:5" pos:end="22:73"><name pos:start="22:5" pos:end="22:31">trace_nbd_receive_negotiate</name><argument_list pos:start="22:32" pos:end="22:73">(<argument pos:start="22:33" pos:end="22:40"><expr pos:start="22:33" pos:end="22:40"><name pos:start="22:33" pos:end="22:40">tlscreds</name></expr></argument>, <argument pos:start="22:43" pos:end="22:72"><expr pos:start="22:43" pos:end="22:72"><ternary pos:start="22:43" pos:end="22:72"><condition pos:start="22:43" pos:end="22:52"><expr pos:start="22:43" pos:end="22:50"><name pos:start="22:43" pos:end="22:50">hostname</name></expr> ?</condition><then pos:start="22:54" pos:end="22:61"> <expr pos:start="22:54" pos:end="22:61"><name pos:start="22:54" pos:end="22:61">hostname</name></expr> </then><else pos:start="22:63" pos:end="22:72">: <expr pos:start="22:65" pos:end="22:72"><literal type="string" pos:start="22:65" pos:end="22:72">"&lt;null&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="27:5" pos:end="27:17"><expr pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:6">rc</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <operator pos:start="27:10" pos:end="27:10">-</operator><name pos:start="27:11" pos:end="27:16">EINVAL</name></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:15">(<expr pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:14">outioc</name></expr>)</condition> <block pos:start="31:17" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:23">

        <expr_stmt pos:start="33:9" pos:end="33:23"><expr pos:start="33:9" pos:end="33:22"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:15">outioc</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:22">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:28">(<expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:16">tlscreds</name> <operator pos:start="37:18" pos:end="37:19">&amp;&amp;</operator> <operator pos:start="37:21" pos:end="37:21">!</operator><name pos:start="37:22" pos:end="37:27">outioc</name></expr>)</condition> <block pos:start="37:30" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:64"><expr pos:start="39:9" pos:end="39:63"><call pos:start="39:9" pos:end="39:63"><name pos:start="39:9" pos:end="39:18">error_setg</name><argument_list pos:start="39:19" pos:end="39:63">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">errp</name></expr></argument>, <argument pos:start="39:26" pos:end="39:62"><expr pos:start="39:26" pos:end="39:62"><literal type="string" pos:start="39:26" pos:end="39:62">"Output I/O channel required for TLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:18">goto <name pos:start="41:14" pos:end="41:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:40">(<expr pos:start="47:9" pos:end="47:39"><call pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:16">nbd_read</name><argument_list pos:start="47:17" pos:end="47:35">(<argument pos:start="47:18" pos:end="47:20"><expr pos:start="47:18" pos:end="47:20"><name pos:start="47:18" pos:end="47:20">ioc</name></expr></argument>, <argument pos:start="47:23" pos:end="47:25"><expr pos:start="47:23" pos:end="47:25"><name pos:start="47:23" pos:end="47:25">buf</name></expr></argument>, <argument pos:start="47:28" pos:end="47:28"><expr pos:start="47:28" pos:end="47:28"><literal type="number" pos:start="47:28" pos:end="47:28">8</literal></expr></argument>, <argument pos:start="47:31" pos:end="47:34"><expr pos:start="47:31" pos:end="47:34"><name pos:start="47:31" pos:end="47:34">errp</name></expr></argument>)</argument_list></call> <operator pos:start="47:37" pos:end="47:37">&lt;</operator> <literal type="number" pos:start="47:39" pos:end="47:39">0</literal></expr>)</condition> <block pos:start="47:42" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:51"><expr pos:start="49:9" pos:end="49:50"><call pos:start="49:9" pos:end="49:50"><name pos:start="49:9" pos:end="49:21">error_prepend</name><argument_list pos:start="49:22" pos:end="49:50">(<argument pos:start="49:23" pos:end="49:26"><expr pos:start="49:23" pos:end="49:26"><name pos:start="49:23" pos:end="49:26">errp</name></expr></argument>, <argument pos:start="49:29" pos:end="49:49"><expr pos:start="49:29" pos:end="49:49"><literal type="string" pos:start="49:29" pos:end="49:49">"Failed to read data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:18">goto <name pos:start="51:14" pos:end="51:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:18"><expr pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:10"><name pos:start="57:5" pos:end="57:7">buf</name><index pos:start="57:8" pos:end="57:10">[<expr pos:start="57:9" pos:end="57:9"><literal type="number" pos:start="57:9" pos:end="57:9">8</literal></expr>]</index></name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="char" pos:start="57:14" pos:end="57:17">'\0'</literal></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:25">(<expr pos:start="59:9" pos:end="59:24"><call pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:14">strlen</name><argument_list pos:start="59:15" pos:end="59:19">(<argument pos:start="59:16" pos:end="59:18"><expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">buf</name></expr></argument>)</argument_list></call> <operator pos:start="59:21" pos:end="59:22">==</operator> <literal type="number" pos:start="59:24" pos:end="59:24">0</literal></expr>)</condition> <block pos:start="59:27" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:18">

        <expr_stmt pos:start="61:9" pos:end="61:66"><expr pos:start="61:9" pos:end="61:65"><call pos:start="61:9" pos:end="61:65"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="61:65">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">errp</name></expr></argument>, <argument pos:start="61:26" pos:end="61:64"><expr pos:start="61:26" pos:end="61:64"><literal type="string" pos:start="61:26" pos:end="61:64">"Server connection closed unexpectedly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:18">goto <name pos:start="63:14" pos:end="63:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:26"><expr pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:9">magic</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:20">ldq_be_p</name><argument_list pos:start="69:21" pos:end="69:25">(<argument pos:start="69:22" pos:end="69:24"><expr pos:start="69:22" pos:end="69:24"><name pos:start="69:22" pos:end="69:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:45"><expr pos:start="71:5" pos:end="71:44"><call pos:start="71:5" pos:end="71:44"><name pos:start="71:5" pos:end="71:37">trace_nbd_receive_negotiate_magic</name><argument_list pos:start="71:38" pos:end="71:44">(<argument pos:start="71:39" pos:end="71:43"><expr pos:start="71:39" pos:end="71:43"><name pos:start="71:39" pos:end="71:43">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:40">(<expr pos:start="75:9" pos:end="75:39"><call pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:14">memcmp</name><argument_list pos:start="75:15" pos:end="75:34">(<argument pos:start="75:16" pos:end="75:18"><expr pos:start="75:16" pos:end="75:18"><name pos:start="75:16" pos:end="75:18">buf</name></expr></argument>, <argument pos:start="75:21" pos:end="75:30"><expr pos:start="75:21" pos:end="75:30"><literal type="string" pos:start="75:21" pos:end="75:30">"NBDMAGIC"</literal></expr></argument>, <argument pos:start="75:33" pos:end="75:33"><expr pos:start="75:33" pos:end="75:33"><literal type="number" pos:start="75:33" pos:end="75:33">8</literal></expr></argument>)</argument_list></call> <operator pos:start="75:36" pos:end="75:37">!=</operator> <literal type="number" pos:start="75:39" pos:end="75:39">0</literal></expr>)</condition> <block pos:start="75:42" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:18">

        <expr_stmt pos:start="77:9" pos:end="77:51"><expr pos:start="77:9" pos:end="77:50"><call pos:start="77:9" pos:end="77:50"><name pos:start="77:9" pos:end="77:18">error_setg</name><argument_list pos:start="77:19" pos:end="77:50">(<argument pos:start="77:20" pos:end="77:23"><expr pos:start="77:20" pos:end="77:23"><name pos:start="77:20" pos:end="77:23">errp</name></expr></argument>, <argument pos:start="77:26" pos:end="77:49"><expr pos:start="77:26" pos:end="77:49"><literal type="string" pos:start="77:26" pos:end="77:49">"Invalid magic received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:18">goto <name pos:start="79:14" pos:end="79:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:55">(<expr pos:start="85:9" pos:end="85:54"><call pos:start="85:9" pos:end="85:50"><name pos:start="85:9" pos:end="85:16">nbd_read</name><argument_list pos:start="85:17" pos:end="85:50">(<argument pos:start="85:18" pos:end="85:20"><expr pos:start="85:18" pos:end="85:20"><name pos:start="85:18" pos:end="85:20">ioc</name></expr></argument>, <argument pos:start="85:23" pos:end="85:28"><expr pos:start="85:23" pos:end="85:28"><operator pos:start="85:23" pos:end="85:23">&amp;</operator><name pos:start="85:24" pos:end="85:28">magic</name></expr></argument>, <argument pos:start="85:31" pos:end="85:43"><expr pos:start="85:31" pos:end="85:43"><sizeof pos:start="85:31" pos:end="85:43">sizeof<argument_list pos:start="85:37" pos:end="85:43">(<argument pos:start="85:38" pos:end="85:42"><expr pos:start="85:38" pos:end="85:42"><name pos:start="85:38" pos:end="85:42">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="85:46" pos:end="85:49"><expr pos:start="85:46" pos:end="85:49"><name pos:start="85:46" pos:end="85:49">errp</name></expr></argument>)</argument_list></call> <operator pos:start="85:52" pos:end="85:52">&lt;</operator> <literal type="number" pos:start="85:54" pos:end="85:54">0</literal></expr>)</condition> <block pos:start="85:57" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:18">

        <expr_stmt pos:start="87:9" pos:end="87:52"><expr pos:start="87:9" pos:end="87:51"><call pos:start="87:9" pos:end="87:51"><name pos:start="87:9" pos:end="87:21">error_prepend</name><argument_list pos:start="87:22" pos:end="87:51">(<argument pos:start="87:23" pos:end="87:26"><expr pos:start="87:23" pos:end="87:26"><name pos:start="87:23" pos:end="87:26">errp</name></expr></argument>, <argument pos:start="87:29" pos:end="87:50"><expr pos:start="87:29" pos:end="87:50"><literal type="string" pos:start="87:29" pos:end="87:50">"Failed to read magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="89:9" pos:end="89:18">goto <name pos:start="89:14" pos:end="89:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:31"><expr pos:start="93:5" pos:end="93:30"><name pos:start="93:5" pos:end="93:9">magic</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <call pos:start="93:13" pos:end="93:30"><name pos:start="93:13" pos:end="93:23">be64_to_cpu</name><argument_list pos:start="93:24" pos:end="93:30">(<argument pos:start="93:25" pos:end="93:29"><expr pos:start="93:25" pos:end="93:29"><name pos:start="93:25" pos:end="93:29">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:45"><expr pos:start="95:5" pos:end="95:44"><call pos:start="95:5" pos:end="95:44"><name pos:start="95:5" pos:end="95:37">trace_nbd_receive_negotiate_magic</name><argument_list pos:start="95:38" pos:end="95:44">(<argument pos:start="95:39" pos:end="95:43"><expr pos:start="95:39" pos:end="95:43"><name pos:start="95:39" pos:end="95:43">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="349:5"><if pos:start="99:5" pos:end="287:5">if <condition pos:start="99:8" pos:end="99:32">(<expr pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:13">magic</name> <operator pos:start="99:15" pos:end="99:16">==</operator> <name pos:start="99:18" pos:end="99:31">NBD_OPTS_MAGIC</name></expr>)</condition> <block pos:start="99:34" pos:end="287:5">{<block_content pos:start="101:9" pos:end="285:35">

        <decl_stmt pos:start="101:9" pos:end="101:33"><decl pos:start="101:9" pos:end="101:32"><type pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:16">uint32_t</name></type> <name pos:start="101:18" pos:end="101:28">clientflags</name> <init pos:start="101:30" pos:end="101:32">= <expr pos:start="101:32" pos:end="101:32"><literal type="number" pos:start="101:32" pos:end="101:32">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="103:9" pos:end="103:29"><decl pos:start="103:9" pos:end="103:28"><type pos:start="103:9" pos:end="103:16"><name pos:start="103:9" pos:end="103:16">uint16_t</name></type> <name pos:start="103:18" pos:end="103:28">globalflags</name></decl>;</decl_stmt>

        <decl_stmt pos:start="105:9" pos:end="105:35"><decl pos:start="105:9" pos:end="105:34"><type pos:start="105:9" pos:end="105:12"><name pos:start="105:9" pos:end="105:12">bool</name></type> <name pos:start="105:14" pos:end="105:26">fixedNewStyle</name> <init pos:start="105:28" pos:end="105:34">= <expr pos:start="105:30" pos:end="105:34"><name pos:start="105:30" pos:end="105:34">false</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:71">(<expr pos:start="109:13" pos:end="109:70"><call pos:start="109:13" pos:end="109:66"><name pos:start="109:13" pos:end="109:20">nbd_read</name><argument_list pos:start="109:21" pos:end="109:66">(<argument pos:start="109:22" pos:end="109:24"><expr pos:start="109:22" pos:end="109:24"><name pos:start="109:22" pos:end="109:24">ioc</name></expr></argument>, <argument pos:start="109:27" pos:end="109:38"><expr pos:start="109:27" pos:end="109:38"><operator pos:start="109:27" pos:end="109:27">&amp;</operator><name pos:start="109:28" pos:end="109:38">globalflags</name></expr></argument>, <argument pos:start="109:41" pos:end="109:59"><expr pos:start="109:41" pos:end="109:59"><sizeof pos:start="109:41" pos:end="109:59">sizeof<argument_list pos:start="109:47" pos:end="109:59">(<argument pos:start="109:48" pos:end="109:58"><expr pos:start="109:48" pos:end="109:58"><name pos:start="109:48" pos:end="109:58">globalflags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="109:62" pos:end="109:65"><expr pos:start="109:62" pos:end="109:65"><name pos:start="109:62" pos:end="109:65">errp</name></expr></argument>)</argument_list></call> <operator pos:start="109:68" pos:end="109:68">&lt;</operator> <literal type="number" pos:start="109:70" pos:end="109:70">0</literal></expr>)</condition> <block pos:start="109:73" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:22">

            <expr_stmt pos:start="111:13" pos:end="111:63"><expr pos:start="111:13" pos:end="111:62"><call pos:start="111:13" pos:end="111:62"><name pos:start="111:13" pos:end="111:25">error_prepend</name><argument_list pos:start="111:26" pos:end="111:62">(<argument pos:start="111:27" pos:end="111:30"><expr pos:start="111:27" pos:end="111:30"><name pos:start="111:27" pos:end="111:30">errp</name></expr></argument>, <argument pos:start="111:33" pos:end="111:61"><expr pos:start="111:33" pos:end="111:61"><literal type="string" pos:start="111:33" pos:end="111:61">"Failed to read server flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="113:13" pos:end="113:22">goto <name pos:start="113:18" pos:end="113:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:47"><expr pos:start="117:9" pos:end="117:46"><name pos:start="117:9" pos:end="117:19">globalflags</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:46"><name pos:start="117:23" pos:end="117:33">be16_to_cpu</name><argument_list pos:start="117:34" pos:end="117:46">(<argument pos:start="117:35" pos:end="117:45"><expr pos:start="117:35" pos:end="117:45"><name pos:start="117:35" pos:end="117:45">globalflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:62"><expr pos:start="119:9" pos:end="119:61"><call pos:start="119:9" pos:end="119:61"><name pos:start="119:9" pos:end="119:48">trace_nbd_receive_negotiate_server_flags</name><argument_list pos:start="119:49" pos:end="119:61">(<argument pos:start="119:50" pos:end="119:60"><expr pos:start="119:50" pos:end="119:60"><name pos:start="119:50" pos:end="119:60">globalflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:50">(<expr pos:start="121:13" pos:end="121:49"><name pos:start="121:13" pos:end="121:23">globalflags</name> <operator pos:start="121:25" pos:end="121:25">&amp;</operator> <name pos:start="121:27" pos:end="121:49">NBD_FLAG_FIXED_NEWSTYLE</name></expr>)</condition> <block pos:start="121:52" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:53">

            <expr_stmt pos:start="123:13" pos:end="123:33"><expr pos:start="123:13" pos:end="123:32"><name pos:start="123:13" pos:end="123:25">fixedNewStyle</name> <operator pos:start="123:27" pos:end="123:27">=</operator> <name pos:start="123:29" pos:end="123:32">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:53"><expr pos:start="125:13" pos:end="125:52"><name pos:start="125:13" pos:end="125:23">clientflags</name> <operator pos:start="125:25" pos:end="125:26">|=</operator> <name pos:start="125:28" pos:end="125:52">NBD_FLAG_C_FIXED_NEWSTYLE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:45">(<expr pos:start="129:13" pos:end="129:44"><name pos:start="129:13" pos:end="129:23">globalflags</name> <operator pos:start="129:25" pos:end="129:25">&amp;</operator> <name pos:start="129:27" pos:end="129:44">NBD_FLAG_NO_ZEROES</name></expr>)</condition> <block pos:start="129:47" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:48">

            <expr_stmt pos:start="131:13" pos:end="131:27"><expr pos:start="131:13" pos:end="131:26"><name pos:start="131:13" pos:end="131:18">zeroes</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <name pos:start="131:22" pos:end="131:26">false</name></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:48"><expr pos:start="133:13" pos:end="133:47"><name pos:start="133:13" pos:end="133:23">clientflags</name> <operator pos:start="133:25" pos:end="133:26">|=</operator> <name pos:start="133:28" pos:end="133:47">NBD_FLAG_C_NO_ZEROES</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="137:9" pos:end="137:36">/* client requested flags */</comment>

        <expr_stmt pos:start="139:9" pos:end="139:47"><expr pos:start="139:9" pos:end="139:46"><name pos:start="139:9" pos:end="139:19">clientflags</name> <operator pos:start="139:21" pos:end="139:21">=</operator> <call pos:start="139:23" pos:end="139:46"><name pos:start="139:23" pos:end="139:33">cpu_to_be32</name><argument_list pos:start="139:34" pos:end="139:46">(<argument pos:start="139:35" pos:end="139:45"><expr pos:start="139:35" pos:end="139:45"><name pos:start="139:35" pos:end="139:45">clientflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="147:9"><if pos:start="141:9" pos:end="147:9">if <condition pos:start="141:12" pos:end="141:72">(<expr pos:start="141:13" pos:end="141:71"><call pos:start="141:13" pos:end="141:67"><name pos:start="141:13" pos:end="141:21">nbd_write</name><argument_list pos:start="141:22" pos:end="141:67">(<argument pos:start="141:23" pos:end="141:25"><expr pos:start="141:23" pos:end="141:25"><name pos:start="141:23" pos:end="141:25">ioc</name></expr></argument>, <argument pos:start="141:28" pos:end="141:39"><expr pos:start="141:28" pos:end="141:39"><operator pos:start="141:28" pos:end="141:28">&amp;</operator><name pos:start="141:29" pos:end="141:39">clientflags</name></expr></argument>, <argument pos:start="141:42" pos:end="141:60"><expr pos:start="141:42" pos:end="141:60"><sizeof pos:start="141:42" pos:end="141:60">sizeof<argument_list pos:start="141:48" pos:end="141:60">(<argument pos:start="141:49" pos:end="141:59"><expr pos:start="141:49" pos:end="141:59"><name pos:start="141:49" pos:end="141:59">clientflags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="141:63" pos:end="141:66"><expr pos:start="141:63" pos:end="141:66"><name pos:start="141:63" pos:end="141:66">errp</name></expr></argument>)</argument_list></call> <operator pos:start="141:69" pos:end="141:69">&lt;</operator> <literal type="number" pos:start="141:71" pos:end="141:71">0</literal></expr>)</condition> <block pos:start="141:74" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:22">

            <expr_stmt pos:start="143:13" pos:end="143:68"><expr pos:start="143:13" pos:end="143:67"><call pos:start="143:13" pos:end="143:67"><name pos:start="143:13" pos:end="143:25">error_prepend</name><argument_list pos:start="143:26" pos:end="143:67">(<argument pos:start="143:27" pos:end="143:30"><expr pos:start="143:27" pos:end="143:30"><name pos:start="143:27" pos:end="143:30">errp</name></expr></argument>, <argument pos:start="143:33" pos:end="143:66"><expr pos:start="143:33" pos:end="143:66"><literal type="string" pos:start="143:33" pos:end="143:66">"Failed to send clientflags field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="145:13" pos:end="145:22">goto <name pos:start="145:18" pos:end="145:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="149:9" pos:end="171:9"><if pos:start="149:9" pos:end="171:9">if <condition pos:start="149:12" pos:end="149:21">(<expr pos:start="149:13" pos:end="149:20"><name pos:start="149:13" pos:end="149:20">tlscreds</name></expr>)</condition> <block pos:start="149:23" pos:end="171:9">{<block_content pos:start="151:13" pos:end="169:13">

            <if_stmt pos:start="151:13" pos:end="169:13"><if pos:start="151:13" pos:end="163:13">if <condition pos:start="151:16" pos:end="151:30">(<expr pos:start="151:17" pos:end="151:29"><name pos:start="151:17" pos:end="151:29">fixedNewStyle</name></expr>)</condition> <block pos:start="151:32" pos:end="163:13">{<block_content pos:start="153:17" pos:end="161:30">

                <expr_stmt pos:start="153:17" pos:end="153:78"><expr pos:start="153:17" pos:end="153:77"><operator pos:start="153:17" pos:end="153:17">*</operator><name pos:start="153:18" pos:end="153:23">outioc</name> <operator pos:start="153:25" pos:end="153:25">=</operator> <call pos:start="153:27" pos:end="153:77"><name pos:start="153:27" pos:end="153:46">nbd_receive_starttls</name><argument_list pos:start="153:47" pos:end="153:77">(<argument pos:start="153:48" pos:end="153:50"><expr pos:start="153:48" pos:end="153:50"><name pos:start="153:48" pos:end="153:50">ioc</name></expr></argument>, <argument pos:start="153:53" pos:end="153:60"><expr pos:start="153:53" pos:end="153:60"><name pos:start="153:53" pos:end="153:60">tlscreds</name></expr></argument>, <argument pos:start="153:63" pos:end="153:70"><expr pos:start="153:63" pos:end="153:70"><name pos:start="153:63" pos:end="153:70">hostname</name></expr></argument>, <argument pos:start="153:73" pos:end="153:76"><expr pos:start="153:73" pos:end="153:76"><name pos:start="153:73" pos:end="153:76">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="155:17" pos:end="159:17"><if pos:start="155:17" pos:end="159:17">if <condition pos:start="155:20" pos:end="155:29">(<expr pos:start="155:21" pos:end="155:28"><operator pos:start="155:21" pos:end="155:21">!</operator><operator pos:start="155:22" pos:end="155:22">*</operator><name pos:start="155:23" pos:end="155:28">outioc</name></expr>)</condition> <block pos:start="155:31" pos:end="159:17">{<block_content pos:start="157:21" pos:end="157:30">

                    <goto pos:start="157:21" pos:end="157:30">goto <name pos:start="157:26" pos:end="157:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:30"><expr pos:start="161:17" pos:end="161:29"><name pos:start="161:17" pos:end="161:19">ioc</name> <operator pos:start="161:21" pos:end="161:21">=</operator> <operator pos:start="161:23" pos:end="161:23">*</operator><name pos:start="161:24" pos:end="161:29">outioc</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="163:15" pos:end="169:13">else <block pos:start="163:20" pos:end="169:13">{<block_content pos:start="165:17" pos:end="167:26">

                <expr_stmt pos:start="165:17" pos:end="165:69"><expr pos:start="165:17" pos:end="165:68"><call pos:start="165:17" pos:end="165:68"><name pos:start="165:17" pos:end="165:26">error_setg</name><argument_list pos:start="165:27" pos:end="165:68">(<argument pos:start="165:28" pos:end="165:31"><expr pos:start="165:28" pos:end="165:31"><name pos:start="165:28" pos:end="165:31">errp</name></expr></argument>, <argument pos:start="165:34" pos:end="165:67"><expr pos:start="165:34" pos:end="165:67"><literal type="string" pos:start="165:34" pos:end="165:67">"Server does not support STARTTLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="167:17" pos:end="167:26">goto <name pos:start="167:22" pos:end="167:25">fail</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="173:9" pos:end="179:9"><if pos:start="173:9" pos:end="179:9">if <condition pos:start="173:12" pos:end="173:18">(<expr pos:start="173:13" pos:end="173:17"><operator pos:start="173:13" pos:end="173:13">!</operator><name pos:start="173:14" pos:end="173:17">name</name></expr>)</condition> <block pos:start="173:20" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:22">

            <expr_stmt pos:start="175:13" pos:end="175:55"><expr pos:start="175:13" pos:end="175:54"><call pos:start="175:13" pos:end="175:54"><name pos:start="175:13" pos:end="175:52">trace_nbd_receive_negotiate_default_name</name><argument_list pos:start="175:53" pos:end="175:54">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:22"><expr pos:start="177:13" pos:end="177:21"><name pos:start="177:13" pos:end="177:16">name</name> <operator pos:start="177:18" pos:end="177:18">=</operator> <literal type="string" pos:start="177:20" pos:end="177:21">""</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="181:9" pos:end="249:9"><if pos:start="181:9" pos:end="249:9">if <condition pos:start="181:12" pos:end="181:26">(<expr pos:start="181:13" pos:end="181:25"><name pos:start="181:13" pos:end="181:25">fixedNewStyle</name></expr>)</condition> <block pos:start="181:28" pos:end="249:9">{<block_content pos:start="183:13" pos:end="247:13">

            <decl_stmt pos:start="183:13" pos:end="183:23"><decl pos:start="183:13" pos:end="183:22"><type pos:start="183:13" pos:end="183:15"><name pos:start="183:13" pos:end="183:15">int</name></type> <name pos:start="183:17" pos:end="183:22">result</name></decl>;</decl_stmt>



            <if_stmt pos:start="187:13" pos:end="203:13"><if pos:start="187:13" pos:end="203:13">if <condition pos:start="187:16" pos:end="187:33">(<expr pos:start="187:17" pos:end="187:32"><name pos:start="187:17" pos:end="187:32">structured_reply</name></expr>)</condition> <block pos:start="187:35" pos:end="203:13">{<block_content pos:start="189:17" pos:end="201:53">

                <expr_stmt pos:start="189:17" pos:end="193:57"><expr pos:start="189:17" pos:end="193:56"><name pos:start="189:17" pos:end="189:22">result</name> <operator pos:start="189:24" pos:end="189:24">=</operator> <call pos:start="189:26" pos:end="193:56"><name pos:start="189:26" pos:end="189:50">nbd_request_simple_option</name><argument_list pos:start="189:51" pos:end="193:56">(<argument pos:start="189:52" pos:end="189:54"><expr pos:start="189:52" pos:end="189:54"><name pos:start="189:52" pos:end="189:54">ioc</name></expr></argument>,

                                                   <argument pos:start="191:52" pos:end="191:75"><expr pos:start="191:52" pos:end="191:75"><name pos:start="191:52" pos:end="191:75">NBD_OPT_STRUCTURED_REPLY</name></expr></argument>,

                                                   <argument pos:start="193:52" pos:end="193:55"><expr pos:start="193:52" pos:end="193:55"><name pos:start="193:52" pos:end="193:55">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="195:17" pos:end="199:17"><if pos:start="195:17" pos:end="199:17">if <condition pos:start="195:20" pos:end="195:31">(<expr pos:start="195:21" pos:end="195:30"><name pos:start="195:21" pos:end="195:26">result</name> <operator pos:start="195:28" pos:end="195:28">&lt;</operator> <literal type="number" pos:start="195:30" pos:end="195:30">0</literal></expr>)</condition> <block pos:start="195:33" pos:end="199:17">{<block_content pos:start="197:21" pos:end="197:30">

                    <goto pos:start="197:21" pos:end="197:30">goto <name pos:start="197:26" pos:end="197:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:53"><expr pos:start="201:17" pos:end="201:52"><name pos:start="201:17" pos:end="201:38"><name pos:start="201:17" pos:end="201:20">info</name><operator pos:start="201:21" pos:end="201:22">-&gt;</operator><name pos:start="201:23" pos:end="201:38">structured_reply</name></name> <operator pos:start="201:40" pos:end="201:40">=</operator> <name pos:start="201:42" pos:end="201:47">result</name> <operator pos:start="201:49" pos:end="201:50">==</operator> <literal type="number" pos:start="201:52" pos:end="201:52">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="207:13" pos:end="215:56">/* Try NBD_OPT_GO first - if it works, we are done (it

             * also gives us a good message if the server requires

             * TLS).  If it is not available, fall back to

             * NBD_OPT_LIST for nicer error messages about a missing

             * export, then use NBD_OPT_EXPORT_NAME.  */</comment>

            <expr_stmt pos:start="217:13" pos:end="217:55"><expr pos:start="217:13" pos:end="217:54"><name pos:start="217:13" pos:end="217:18">result</name> <operator pos:start="217:20" pos:end="217:20">=</operator> <call pos:start="217:22" pos:end="217:54"><name pos:start="217:22" pos:end="217:31">nbd_opt_go</name><argument_list pos:start="217:32" pos:end="217:54">(<argument pos:start="217:33" pos:end="217:35"><expr pos:start="217:33" pos:end="217:35"><name pos:start="217:33" pos:end="217:35">ioc</name></expr></argument>, <argument pos:start="217:38" pos:end="217:41"><expr pos:start="217:38" pos:end="217:41"><name pos:start="217:38" pos:end="217:41">name</name></expr></argument>, <argument pos:start="217:44" pos:end="217:47"><expr pos:start="217:44" pos:end="217:47"><name pos:start="217:44" pos:end="217:47">info</name></expr></argument>, <argument pos:start="217:50" pos:end="217:53"><expr pos:start="217:50" pos:end="217:53"><name pos:start="217:50" pos:end="217:53">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="219:13" pos:end="223:13"><if pos:start="219:13" pos:end="223:13">if <condition pos:start="219:16" pos:end="219:27">(<expr pos:start="219:17" pos:end="219:26"><name pos:start="219:17" pos:end="219:22">result</name> <operator pos:start="219:24" pos:end="219:24">&lt;</operator> <literal type="number" pos:start="219:26" pos:end="219:26">0</literal></expr>)</condition> <block pos:start="219:29" pos:end="223:13">{<block_content pos:start="221:17" pos:end="221:26">

                <goto pos:start="221:17" pos:end="221:26">goto <name pos:start="221:22" pos:end="221:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="225:13" pos:end="229:13"><if pos:start="225:13" pos:end="229:13">if <condition pos:start="225:16" pos:end="225:27">(<expr pos:start="225:17" pos:end="225:26"><name pos:start="225:17" pos:end="225:22">result</name> <operator pos:start="225:24" pos:end="225:24">&gt;</operator> <literal type="number" pos:start="225:26" pos:end="225:26">0</literal></expr>)</condition> <block pos:start="225:29" pos:end="229:13">{<block_content pos:start="227:17" pos:end="227:25">

                <return pos:start="227:17" pos:end="227:25">return <expr pos:start="227:24" pos:end="227:24"><literal type="number" pos:start="227:24" pos:end="227:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="231:13" pos:end="241:15">/* Check our desired export is present in the

             * server export list. Since NBD_OPT_EXPORT_NAME

             * cannot return an error message, running this

             * query gives us better error reporting if the

             * export name is not available.

             */</comment>

            <if_stmt pos:start="243:13" pos:end="247:13"><if pos:start="243:13" pos:end="247:13">if <condition pos:start="243:16" pos:end="243:63">(<expr pos:start="243:17" pos:end="243:62"><call pos:start="243:17" pos:end="243:58"><name pos:start="243:17" pos:end="243:41">nbd_receive_query_exports</name><argument_list pos:start="243:42" pos:end="243:58">(<argument pos:start="243:43" pos:end="243:45"><expr pos:start="243:43" pos:end="243:45"><name pos:start="243:43" pos:end="243:45">ioc</name></expr></argument>, <argument pos:start="243:48" pos:end="243:51"><expr pos:start="243:48" pos:end="243:51"><name pos:start="243:48" pos:end="243:51">name</name></expr></argument>, <argument pos:start="243:54" pos:end="243:57"><expr pos:start="243:54" pos:end="243:57"><name pos:start="243:54" pos:end="243:57">errp</name></expr></argument>)</argument_list></call> <operator pos:start="243:60" pos:end="243:60">&lt;</operator> <literal type="number" pos:start="243:62" pos:end="243:62">0</literal></expr>)</condition> <block pos:start="243:65" pos:end="247:13">{<block_content pos:start="245:17" pos:end="245:26">

                <goto pos:start="245:17" pos:end="245:26">goto <name pos:start="245:22" pos:end="245:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="251:9" pos:end="251:43">/* write the export name request */</comment>

        <if_stmt pos:start="253:9" pos:end="259:9"><if pos:start="253:9" pos:end="259:9">if <condition pos:start="253:12" pos:end="255:46">(<expr pos:start="253:13" pos:end="255:45"><call pos:start="253:13" pos:end="255:41"><name pos:start="253:13" pos:end="253:35">nbd_send_option_request</name><argument_list pos:start="253:36" pos:end="255:41">(<argument pos:start="253:37" pos:end="253:39"><expr pos:start="253:37" pos:end="253:39"><name pos:start="253:37" pos:end="253:39">ioc</name></expr></argument>, <argument pos:start="253:42" pos:end="253:60"><expr pos:start="253:42" pos:end="253:60"><name pos:start="253:42" pos:end="253:60">NBD_OPT_EXPORT_NAME</name></expr></argument>, <argument pos:start="253:63" pos:end="253:64"><expr pos:start="253:63" pos:end="253:64"><operator pos:start="253:63" pos:end="253:63">-</operator><literal type="number" pos:start="253:64" pos:end="253:64">1</literal></expr></argument>, <argument pos:start="253:67" pos:end="253:70"><expr pos:start="253:67" pos:end="253:70"><name pos:start="253:67" pos:end="253:70">name</name></expr></argument>,

                                    <argument pos:start="255:37" pos:end="255:40"><expr pos:start="255:37" pos:end="255:40"><name pos:start="255:37" pos:end="255:40">errp</name></expr></argument>)</argument_list></call> <operator pos:start="255:43" pos:end="255:43">&lt;</operator> <literal type="number" pos:start="255:45" pos:end="255:45">0</literal></expr>)</condition> <block pos:start="255:48" pos:end="259:9">{<block_content pos:start="257:13" pos:end="257:22">

            <goto pos:start="257:13" pos:end="257:22">goto <name pos:start="257:18" pos:end="257:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="263:9" pos:end="263:31">/* Read the response */</comment>

        <if_stmt pos:start="265:9" pos:end="271:9"><if pos:start="265:9" pos:end="271:9">if <condition pos:start="265:12" pos:end="265:69">(<expr pos:start="265:13" pos:end="265:68"><call pos:start="265:13" pos:end="265:64"><name pos:start="265:13" pos:end="265:20">nbd_read</name><argument_list pos:start="265:21" pos:end="265:64">(<argument pos:start="265:22" pos:end="265:24"><expr pos:start="265:22" pos:end="265:24"><name pos:start="265:22" pos:end="265:24">ioc</name></expr></argument>, <argument pos:start="265:27" pos:end="265:37"><expr pos:start="265:27" pos:end="265:37"><operator pos:start="265:27" pos:end="265:27">&amp;</operator><name pos:start="265:28" pos:end="265:37"><name pos:start="265:28" pos:end="265:31">info</name><operator pos:start="265:32" pos:end="265:33">-&gt;</operator><name pos:start="265:34" pos:end="265:37">size</name></name></expr></argument>, <argument pos:start="265:40" pos:end="265:57"><expr pos:start="265:40" pos:end="265:57"><sizeof pos:start="265:40" pos:end="265:57">sizeof<argument_list pos:start="265:46" pos:end="265:57">(<argument pos:start="265:47" pos:end="265:56"><expr pos:start="265:47" pos:end="265:56"><name pos:start="265:47" pos:end="265:56"><name pos:start="265:47" pos:end="265:50">info</name><operator pos:start="265:51" pos:end="265:52">-&gt;</operator><name pos:start="265:53" pos:end="265:56">size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="265:60" pos:end="265:63"><expr pos:start="265:60" pos:end="265:63"><name pos:start="265:60" pos:end="265:63">errp</name></expr></argument>)</argument_list></call> <operator pos:start="265:66" pos:end="265:66">&lt;</operator> <literal type="number" pos:start="265:68" pos:end="265:68">0</literal></expr>)</condition> <block pos:start="265:71" pos:end="271:9">{<block_content pos:start="267:13" pos:end="269:22">

            <expr_stmt pos:start="267:13" pos:end="267:64"><expr pos:start="267:13" pos:end="267:63"><call pos:start="267:13" pos:end="267:63"><name pos:start="267:13" pos:end="267:25">error_prepend</name><argument_list pos:start="267:26" pos:end="267:63">(<argument pos:start="267:27" pos:end="267:30"><expr pos:start="267:27" pos:end="267:30"><name pos:start="267:27" pos:end="267:30">errp</name></expr></argument>, <argument pos:start="267:33" pos:end="267:62"><expr pos:start="267:33" pos:end="267:62"><literal type="string" pos:start="267:33" pos:end="267:62">"Failed to read export length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="269:13" pos:end="269:22">goto <name pos:start="269:18" pos:end="269:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:34"><expr pos:start="273:9" pos:end="273:33"><call pos:start="273:9" pos:end="273:33"><name pos:start="273:9" pos:end="273:20">be64_to_cpus</name><argument_list pos:start="273:21" pos:end="273:33">(<argument pos:start="273:22" pos:end="273:32"><expr pos:start="273:22" pos:end="273:32"><operator pos:start="273:22" pos:end="273:22">&amp;</operator><name pos:start="273:23" pos:end="273:32"><name pos:start="273:23" pos:end="273:26">info</name><operator pos:start="273:27" pos:end="273:28">-&gt;</operator><name pos:start="273:29" pos:end="273:32">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="277:9" pos:end="283:9"><if pos:start="277:9" pos:end="283:9">if <condition pos:start="277:12" pos:end="277:71">(<expr pos:start="277:13" pos:end="277:70"><call pos:start="277:13" pos:end="277:66"><name pos:start="277:13" pos:end="277:20">nbd_read</name><argument_list pos:start="277:21" pos:end="277:66">(<argument pos:start="277:22" pos:end="277:24"><expr pos:start="277:22" pos:end="277:24"><name pos:start="277:22" pos:end="277:24">ioc</name></expr></argument>, <argument pos:start="277:27" pos:end="277:38"><expr pos:start="277:27" pos:end="277:38"><operator pos:start="277:27" pos:end="277:27">&amp;</operator><name pos:start="277:28" pos:end="277:38"><name pos:start="277:28" pos:end="277:31">info</name><operator pos:start="277:32" pos:end="277:33">-&gt;</operator><name pos:start="277:34" pos:end="277:38">flags</name></name></expr></argument>, <argument pos:start="277:41" pos:end="277:59"><expr pos:start="277:41" pos:end="277:59"><sizeof pos:start="277:41" pos:end="277:59">sizeof<argument_list pos:start="277:47" pos:end="277:59">(<argument pos:start="277:48" pos:end="277:58"><expr pos:start="277:48" pos:end="277:58"><name pos:start="277:48" pos:end="277:58"><name pos:start="277:48" pos:end="277:51">info</name><operator pos:start="277:52" pos:end="277:53">-&gt;</operator><name pos:start="277:54" pos:end="277:58">flags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="277:62" pos:end="277:65"><expr pos:start="277:62" pos:end="277:65"><name pos:start="277:62" pos:end="277:65">errp</name></expr></argument>)</argument_list></call> <operator pos:start="277:68" pos:end="277:68">&lt;</operator> <literal type="number" pos:start="277:70" pos:end="277:70">0</literal></expr>)</condition> <block pos:start="277:73" pos:end="283:9">{<block_content pos:start="279:13" pos:end="281:22">

            <expr_stmt pos:start="279:13" pos:end="279:63"><expr pos:start="279:13" pos:end="279:62"><call pos:start="279:13" pos:end="279:62"><name pos:start="279:13" pos:end="279:25">error_prepend</name><argument_list pos:start="279:26" pos:end="279:62">(<argument pos:start="279:27" pos:end="279:30"><expr pos:start="279:27" pos:end="279:30"><name pos:start="279:27" pos:end="279:30">errp</name></expr></argument>, <argument pos:start="279:33" pos:end="279:61"><expr pos:start="279:33" pos:end="279:61"><literal type="string" pos:start="279:33" pos:end="279:61">"Failed to read export flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="281:13" pos:end="281:22">goto <name pos:start="281:18" pos:end="281:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:35"><expr pos:start="285:9" pos:end="285:34"><call pos:start="285:9" pos:end="285:34"><name pos:start="285:9" pos:end="285:20">be16_to_cpus</name><argument_list pos:start="285:21" pos:end="285:34">(<argument pos:start="285:22" pos:end="285:33"><expr pos:start="285:22" pos:end="285:33"><operator pos:start="285:22" pos:end="285:22">&amp;</operator><name pos:start="285:23" pos:end="285:33"><name pos:start="285:23" pos:end="285:26">info</name><operator pos:start="285:27" pos:end="285:28">-&gt;</operator><name pos:start="285:29" pos:end="285:33">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="287:7" pos:end="343:5">else if <condition pos:start="287:15" pos:end="287:41">(<expr pos:start="287:16" pos:end="287:40"><name pos:start="287:16" pos:end="287:20">magic</name> <operator pos:start="287:22" pos:end="287:23">==</operator> <name pos:start="287:25" pos:end="287:40">NBD_CLIENT_MAGIC</name></expr>)</condition> <block pos:start="287:43" pos:end="343:5">{<block_content pos:start="289:9" pos:end="341:31">

        <decl_stmt pos:start="289:9" pos:end="289:26"><decl pos:start="289:9" pos:end="289:25"><type pos:start="289:9" pos:end="289:16"><name pos:start="289:9" pos:end="289:16">uint32_t</name></type> <name pos:start="289:18" pos:end="289:25">oldflags</name></decl>;</decl_stmt>



        <if_stmt pos:start="293:9" pos:end="299:9"><if pos:start="293:9" pos:end="299:9">if <condition pos:start="293:12" pos:end="293:17">(<expr pos:start="293:13" pos:end="293:16"><name pos:start="293:13" pos:end="293:16">name</name></expr>)</condition> <block pos:start="293:19" pos:end="299:9">{<block_content pos:start="295:13" pos:end="297:22">

            <expr_stmt pos:start="295:13" pos:end="295:69"><expr pos:start="295:13" pos:end="295:68"><call pos:start="295:13" pos:end="295:68"><name pos:start="295:13" pos:end="295:22">error_setg</name><argument_list pos:start="295:23" pos:end="295:68">(<argument pos:start="295:24" pos:end="295:27"><expr pos:start="295:24" pos:end="295:27"><name pos:start="295:24" pos:end="295:27">errp</name></expr></argument>, <argument pos:start="295:30" pos:end="295:67"><expr pos:start="295:30" pos:end="295:67"><literal type="string" pos:start="295:30" pos:end="295:67">"Server does not support export names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="297:13" pos:end="297:22">goto <name pos:start="297:18" pos:end="297:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="301:9" pos:end="307:9"><if pos:start="301:9" pos:end="307:9">if <condition pos:start="301:12" pos:end="301:21">(<expr pos:start="301:13" pos:end="301:20"><name pos:start="301:13" pos:end="301:20">tlscreds</name></expr>)</condition> <block pos:start="301:23" pos:end="307:9">{<block_content pos:start="303:13" pos:end="305:22">

            <expr_stmt pos:start="303:13" pos:end="303:65"><expr pos:start="303:13" pos:end="303:64"><call pos:start="303:13" pos:end="303:64"><name pos:start="303:13" pos:end="303:22">error_setg</name><argument_list pos:start="303:23" pos:end="303:64">(<argument pos:start="303:24" pos:end="303:27"><expr pos:start="303:24" pos:end="303:27"><name pos:start="303:24" pos:end="303:27">errp</name></expr></argument>, <argument pos:start="303:30" pos:end="303:63"><expr pos:start="303:30" pos:end="303:63"><literal type="string" pos:start="303:30" pos:end="303:63">"Server does not support STARTTLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="305:13" pos:end="305:22">goto <name pos:start="305:18" pos:end="305:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="311:9" pos:end="317:9"><if pos:start="311:9" pos:end="317:9">if <condition pos:start="311:12" pos:end="311:69">(<expr pos:start="311:13" pos:end="311:68"><call pos:start="311:13" pos:end="311:64"><name pos:start="311:13" pos:end="311:20">nbd_read</name><argument_list pos:start="311:21" pos:end="311:64">(<argument pos:start="311:22" pos:end="311:24"><expr pos:start="311:22" pos:end="311:24"><name pos:start="311:22" pos:end="311:24">ioc</name></expr></argument>, <argument pos:start="311:27" pos:end="311:37"><expr pos:start="311:27" pos:end="311:37"><operator pos:start="311:27" pos:end="311:27">&amp;</operator><name pos:start="311:28" pos:end="311:37"><name pos:start="311:28" pos:end="311:31">info</name><operator pos:start="311:32" pos:end="311:33">-&gt;</operator><name pos:start="311:34" pos:end="311:37">size</name></name></expr></argument>, <argument pos:start="311:40" pos:end="311:57"><expr pos:start="311:40" pos:end="311:57"><sizeof pos:start="311:40" pos:end="311:57">sizeof<argument_list pos:start="311:46" pos:end="311:57">(<argument pos:start="311:47" pos:end="311:56"><expr pos:start="311:47" pos:end="311:56"><name pos:start="311:47" pos:end="311:56"><name pos:start="311:47" pos:end="311:50">info</name><operator pos:start="311:51" pos:end="311:52">-&gt;</operator><name pos:start="311:53" pos:end="311:56">size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="311:60" pos:end="311:63"><expr pos:start="311:60" pos:end="311:63"><name pos:start="311:60" pos:end="311:63">errp</name></expr></argument>)</argument_list></call> <operator pos:start="311:66" pos:end="311:66">&lt;</operator> <literal type="number" pos:start="311:68" pos:end="311:68">0</literal></expr>)</condition> <block pos:start="311:71" pos:end="317:9">{<block_content pos:start="313:13" pos:end="315:22">

            <expr_stmt pos:start="313:13" pos:end="313:64"><expr pos:start="313:13" pos:end="313:63"><call pos:start="313:13" pos:end="313:63"><name pos:start="313:13" pos:end="313:25">error_prepend</name><argument_list pos:start="313:26" pos:end="313:63">(<argument pos:start="313:27" pos:end="313:30"><expr pos:start="313:27" pos:end="313:30"><name pos:start="313:27" pos:end="313:30">errp</name></expr></argument>, <argument pos:start="313:33" pos:end="313:62"><expr pos:start="313:33" pos:end="313:62"><literal type="string" pos:start="313:33" pos:end="313:62">"Failed to read export length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="315:13" pos:end="315:22">goto <name pos:start="315:18" pos:end="315:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:34"><expr pos:start="319:9" pos:end="319:33"><call pos:start="319:9" pos:end="319:33"><name pos:start="319:9" pos:end="319:20">be64_to_cpus</name><argument_list pos:start="319:21" pos:end="319:33">(<argument pos:start="319:22" pos:end="319:32"><expr pos:start="319:22" pos:end="319:32"><operator pos:start="319:22" pos:end="319:22">&amp;</operator><name pos:start="319:23" pos:end="319:32"><name pos:start="319:23" pos:end="319:26">info</name><operator pos:start="319:27" pos:end="319:28">-&gt;</operator><name pos:start="319:29" pos:end="319:32">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="323:9" pos:end="329:9"><if pos:start="323:9" pos:end="329:9">if <condition pos:start="323:12" pos:end="323:65">(<expr pos:start="323:13" pos:end="323:64"><call pos:start="323:13" pos:end="323:60"><name pos:start="323:13" pos:end="323:20">nbd_read</name><argument_list pos:start="323:21" pos:end="323:60">(<argument pos:start="323:22" pos:end="323:24"><expr pos:start="323:22" pos:end="323:24"><name pos:start="323:22" pos:end="323:24">ioc</name></expr></argument>, <argument pos:start="323:27" pos:end="323:35"><expr pos:start="323:27" pos:end="323:35"><operator pos:start="323:27" pos:end="323:27">&amp;</operator><name pos:start="323:28" pos:end="323:35">oldflags</name></expr></argument>, <argument pos:start="323:38" pos:end="323:53"><expr pos:start="323:38" pos:end="323:53"><sizeof pos:start="323:38" pos:end="323:53">sizeof<argument_list pos:start="323:44" pos:end="323:53">(<argument pos:start="323:45" pos:end="323:52"><expr pos:start="323:45" pos:end="323:52"><name pos:start="323:45" pos:end="323:52">oldflags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="323:56" pos:end="323:59"><expr pos:start="323:56" pos:end="323:59"><name pos:start="323:56" pos:end="323:59">errp</name></expr></argument>)</argument_list></call> <operator pos:start="323:62" pos:end="323:62">&lt;</operator> <literal type="number" pos:start="323:64" pos:end="323:64">0</literal></expr>)</condition> <block pos:start="323:67" pos:end="329:9">{<block_content pos:start="325:13" pos:end="327:22">

            <expr_stmt pos:start="325:13" pos:end="325:63"><expr pos:start="325:13" pos:end="325:62"><call pos:start="325:13" pos:end="325:62"><name pos:start="325:13" pos:end="325:25">error_prepend</name><argument_list pos:start="325:26" pos:end="325:62">(<argument pos:start="325:27" pos:end="325:30"><expr pos:start="325:27" pos:end="325:30"><name pos:start="325:27" pos:end="325:30">errp</name></expr></argument>, <argument pos:start="325:33" pos:end="325:61"><expr pos:start="325:33" pos:end="325:61"><literal type="string" pos:start="325:33" pos:end="325:61">"Failed to read export flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="327:13" pos:end="327:22">goto <name pos:start="327:18" pos:end="327:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:32"><expr pos:start="331:9" pos:end="331:31"><call pos:start="331:9" pos:end="331:31"><name pos:start="331:9" pos:end="331:20">be32_to_cpus</name><argument_list pos:start="331:21" pos:end="331:31">(<argument pos:start="331:22" pos:end="331:30"><expr pos:start="331:22" pos:end="331:30"><operator pos:start="331:22" pos:end="331:22">&amp;</operator><name pos:start="331:23" pos:end="331:30">oldflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="333:9" pos:end="339:9"><if pos:start="333:9" pos:end="339:9">if <condition pos:start="333:12" pos:end="333:31">(<expr pos:start="333:13" pos:end="333:30"><name pos:start="333:13" pos:end="333:20">oldflags</name> <operator pos:start="333:22" pos:end="333:22">&amp;</operator> <operator pos:start="333:24" pos:end="333:24">~</operator><literal type="number" pos:start="333:25" pos:end="333:30">0xffff</literal></expr>)</condition> <block pos:start="333:33" pos:end="339:9">{<block_content pos:start="335:13" pos:end="337:22">

            <expr_stmt pos:start="335:13" pos:end="335:77"><expr pos:start="335:13" pos:end="335:76"><call pos:start="335:13" pos:end="335:76"><name pos:start="335:13" pos:end="335:22">error_setg</name><argument_list pos:start="335:23" pos:end="335:76">(<argument pos:start="335:24" pos:end="335:27"><expr pos:start="335:24" pos:end="335:27"><name pos:start="335:24" pos:end="335:27">errp</name></expr></argument>, <argument pos:start="335:30" pos:end="335:65"><expr pos:start="335:30" pos:end="335:65"><literal type="string" pos:start="335:30" pos:end="335:58">"Unexpected export flags %0x"</literal> <name pos:start="335:60" pos:end="335:65">PRIx32</name></expr></argument>, <argument pos:start="335:68" pos:end="335:75"><expr pos:start="335:68" pos:end="335:75"><name pos:start="335:68" pos:end="335:75">oldflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="337:13" pos:end="337:22">goto <name pos:start="337:18" pos:end="337:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:31"><expr pos:start="341:9" pos:end="341:30"><name pos:start="341:9" pos:end="341:19"><name pos:start="341:9" pos:end="341:12">info</name><operator pos:start="341:13" pos:end="341:14">-&gt;</operator><name pos:start="341:15" pos:end="341:19">flags</name></name> <operator pos:start="341:21" pos:end="341:21">=</operator> <name pos:start="341:23" pos:end="341:30">oldflags</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="343:7" pos:end="349:5">else <block pos:start="343:12" pos:end="349:5">{<block_content pos:start="345:9" pos:end="347:18">

        <expr_stmt pos:start="345:9" pos:end="345:47"><expr pos:start="345:9" pos:end="345:46"><call pos:start="345:9" pos:end="345:46"><name pos:start="345:9" pos:end="345:18">error_setg</name><argument_list pos:start="345:19" pos:end="345:46">(<argument pos:start="345:20" pos:end="345:23"><expr pos:start="345:20" pos:end="345:23"><name pos:start="345:20" pos:end="345:23">errp</name></expr></argument>, <argument pos:start="345:26" pos:end="345:45"><expr pos:start="345:26" pos:end="345:45"><literal type="string" pos:start="345:26" pos:end="345:45">"Bad magic received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="347:9" pos:end="347:18">goto <name pos:start="347:14" pos:end="347:17">fail</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="353:5" pos:end="353:68"><expr pos:start="353:5" pos:end="353:67"><call pos:start="353:5" pos:end="353:67"><name pos:start="353:5" pos:end="353:42">trace_nbd_receive_negotiate_size_flags</name><argument_list pos:start="353:43" pos:end="353:67">(<argument pos:start="353:44" pos:end="353:53"><expr pos:start="353:44" pos:end="353:53"><name pos:start="353:44" pos:end="353:53"><name pos:start="353:44" pos:end="353:47">info</name><operator pos:start="353:48" pos:end="353:49">-&gt;</operator><name pos:start="353:50" pos:end="353:53">size</name></name></expr></argument>, <argument pos:start="353:56" pos:end="353:66"><expr pos:start="353:56" pos:end="353:66"><name pos:start="353:56" pos:end="353:66"><name pos:start="353:56" pos:end="353:59">info</name><operator pos:start="353:60" pos:end="353:61">-&gt;</operator><name pos:start="353:62" pos:end="353:66">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="355:5" pos:end="361:5"><if pos:start="355:5" pos:end="361:5">if <condition pos:start="355:8" pos:end="355:47">(<expr pos:start="355:9" pos:end="355:46"><name pos:start="355:9" pos:end="355:14">zeroes</name> <operator pos:start="355:16" pos:end="355:17">&amp;&amp;</operator> <call pos:start="355:19" pos:end="355:42"><name pos:start="355:19" pos:end="355:26">nbd_drop</name><argument_list pos:start="355:27" pos:end="355:42">(<argument pos:start="355:28" pos:end="355:30"><expr pos:start="355:28" pos:end="355:30"><name pos:start="355:28" pos:end="355:30">ioc</name></expr></argument>, <argument pos:start="355:33" pos:end="355:35"><expr pos:start="355:33" pos:end="355:35"><literal type="number" pos:start="355:33" pos:end="355:35">124</literal></expr></argument>, <argument pos:start="355:38" pos:end="355:41"><expr pos:start="355:38" pos:end="355:41"><name pos:start="355:38" pos:end="355:41">errp</name></expr></argument>)</argument_list></call> <operator pos:start="355:44" pos:end="355:44">&lt;</operator> <literal type="number" pos:start="355:46" pos:end="355:46">0</literal></expr>)</condition> <block pos:start="355:49" pos:end="361:5">{<block_content pos:start="357:9" pos:end="359:18">

        <expr_stmt pos:start="357:9" pos:end="357:61"><expr pos:start="357:9" pos:end="357:60"><call pos:start="357:9" pos:end="357:60"><name pos:start="357:9" pos:end="357:21">error_prepend</name><argument_list pos:start="357:22" pos:end="357:60">(<argument pos:start="357:23" pos:end="357:26"><expr pos:start="357:23" pos:end="357:26"><name pos:start="357:23" pos:end="357:26">errp</name></expr></argument>, <argument pos:start="357:29" pos:end="357:59"><expr pos:start="357:29" pos:end="357:59"><literal type="string" pos:start="357:29" pos:end="357:59">"Failed to read reserved block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="359:9" pos:end="359:18">goto <name pos:start="359:14" pos:end="359:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:11"><expr pos:start="363:5" pos:end="363:10"><name pos:start="363:5" pos:end="363:6">rc</name> <operator pos:start="363:8" pos:end="363:8">=</operator> <literal type="number" pos:start="363:10" pos:end="363:10">0</literal></expr>;</expr_stmt>



<label pos:start="367:1" pos:end="367:5"><name pos:start="367:1" pos:end="367:4">fail</name>:</label>

    <return pos:start="369:5" pos:end="369:14">return <expr pos:start="369:12" pos:end="369:13"><name pos:start="369:12" pos:end="369:13">rc</name></expr>;</return>

</block_content>}</block></function></unit>
