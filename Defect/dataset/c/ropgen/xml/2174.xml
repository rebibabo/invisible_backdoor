<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2174.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name></type> <name pos:start="1:16" pos:end="1:26">load_kernel</name> <parameter_list pos:start="1:28" pos:end="1:33">(<parameter pos:start="1:29" pos:end="1:32"><decl pos:start="1:29" pos:end="1:32"><type pos:start="1:29" pos:end="1:32"><name pos:start="1:29" pos:end="1:32">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:5" pos:end="141:24">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:24">kernel_entry</name></decl>, <decl pos:start="5:27" pos:end="5:37"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:27" pos:end="5:37">kernel_high</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">long</name></type> <name pos:start="7:10" pos:end="7:20">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ram_addr_t</name></type> <name pos:start="9:16" pos:end="9:28">initrd_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">big_endian</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint32_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:22">prom_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">long</name></type> <name pos:start="15:10" pos:end="15:18">prom_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="22:0"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">prom_index</name> <init pos:start="17:20" pos:end="17:22">= <expr pos:start="17:22" pos:end="17:22"><literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="21:1" pos:end="21:29">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:14">big_endian</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <literal type="number" pos:start="23:18" pos:end="23:18">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="27:5" pos:end="30:0"><expr pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:14">big_endian</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="33:5" pos:end="45:5"><if pos:start="33:5" pos:end="45:5">if <condition pos:start="33:8" pos:end="37:49">(<expr pos:start="33:9" pos:end="37:48"><call pos:start="33:9" pos:end="37:44"><name pos:start="33:9" pos:end="33:16">load_elf</name><argument_list pos:start="33:17" pos:end="37:44">(<argument pos:start="33:18" pos:end="33:45"><expr pos:start="33:18" pos:end="33:45"><name pos:start="33:18" pos:end="33:45"><name pos:start="33:18" pos:end="33:29">loaderparams</name><operator pos:start="33:30" pos:end="33:30">.</operator><name pos:start="33:31" pos:end="33:45">kernel_filename</name></name></expr></argument>, <argument pos:start="33:48" pos:end="33:69"><expr pos:start="33:48" pos:end="33:69"><name pos:start="33:48" pos:end="33:69">cpu_mips_kseg0_to_phys</name></expr></argument>, <argument pos:start="33:72" pos:end="33:75"><expr pos:start="33:72" pos:end="33:75"><name pos:start="33:72" pos:end="33:75">NULL</name></expr></argument>,

                 <argument pos:start="35:18" pos:end="35:42"><expr pos:start="35:18" pos:end="35:42"><operator pos:start="35:18" pos:end="35:18">(</operator><name pos:start="35:19" pos:end="35:26">uint64_t</name> <operator pos:start="35:28" pos:end="35:28">*</operator><operator pos:start="35:29" pos:end="35:29">)</operator><operator pos:start="35:30" pos:end="35:30">&amp;</operator><name pos:start="35:31" pos:end="35:42">kernel_entry</name></expr></argument>, <argument pos:start="35:45" pos:end="35:48"><expr pos:start="35:45" pos:end="35:48"><name pos:start="35:45" pos:end="35:48">NULL</name></expr></argument>, <argument pos:start="35:51" pos:end="35:74"><expr pos:start="35:51" pos:end="35:74"><operator pos:start="35:51" pos:end="35:51">(</operator><name pos:start="35:52" pos:end="35:59">uint64_t</name> <operator pos:start="35:61" pos:end="35:61">*</operator><operator pos:start="35:62" pos:end="35:62">)</operator><operator pos:start="35:63" pos:end="35:63">&amp;</operator><name pos:start="35:64" pos:end="35:74">kernel_high</name></expr></argument>,

                 <argument pos:start="37:18" pos:end="37:27"><expr pos:start="37:18" pos:end="37:27"><name pos:start="37:18" pos:end="37:27">big_endian</name></expr></argument>, <argument pos:start="37:30" pos:end="37:40"><expr pos:start="37:30" pos:end="37:40"><name pos:start="37:30" pos:end="37:40">ELF_MACHINE</name></expr></argument>, <argument pos:start="37:43" pos:end="37:43"><expr pos:start="37:43" pos:end="37:43"><literal type="number" pos:start="37:43" pos:end="37:43">1</literal></expr></argument>)</argument_list></call> <operator pos:start="37:46" pos:end="37:46">&lt;</operator> <literal type="number" pos:start="37:48" pos:end="37:48">0</literal></expr>)</condition> <block pos:start="37:51" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:16">

        <expr_stmt pos:start="39:9" pos:end="41:46"><expr pos:start="39:9" pos:end="41:45"><call pos:start="39:9" pos:end="41:45"><name pos:start="39:9" pos:end="39:15">fprintf</name><argument_list pos:start="39:16" pos:end="41:45">(<argument pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:22">stderr</name></expr></argument>, <argument pos:start="39:25" pos:end="39:60"><expr pos:start="39:25" pos:end="39:60"><literal type="string" pos:start="39:25" pos:end="39:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                <argument pos:start="41:17" pos:end="41:44"><expr pos:start="41:17" pos:end="41:44"><name pos:start="41:17" pos:end="41:44"><name pos:start="41:17" pos:end="41:28">loaderparams</name><operator pos:start="41:29" pos:end="41:29">.</operator><name pos:start="41:30" pos:end="41:44">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:16"><expr pos:start="43:9" pos:end="43:15"><call pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:12">exit</name><argument_list pos:start="43:13" pos:end="43:15">(<argument pos:start="43:14" pos:end="43:14"><expr pos:start="43:14" pos:end="43:14"><literal type="number" pos:start="43:14" pos:end="43:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:21">/* load initrd */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:20"><expr pos:start="51:5" pos:end="51:19"><name pos:start="51:5" pos:end="51:15">initrd_size</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:22"><expr pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:17">initrd_offset</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:21">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="93:5"><if pos:start="55:5" pos:end="93:5">if <condition pos:start="55:8" pos:end="55:37">(<expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:20">loaderparams</name><operator pos:start="55:21" pos:end="55:21">.</operator><name pos:start="55:22" pos:end="55:36">initrd_filename</name></name></expr>)</condition> <block pos:start="55:39" pos:end="93:5">{<block_content pos:start="57:9" pos:end="91:9">

        <expr_stmt pos:start="57:9" pos:end="57:68"><expr pos:start="57:9" pos:end="57:67"><name pos:start="57:9" pos:end="57:19">initrd_size</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:67"><name pos:start="57:23" pos:end="57:36">get_image_size</name> <argument_list pos:start="57:38" pos:end="57:67">(<argument pos:start="57:39" pos:end="57:66"><expr pos:start="57:39" pos:end="57:66"><name pos:start="57:39" pos:end="57:66"><name pos:start="57:39" pos:end="57:50">loaderparams</name><operator pos:start="57:51" pos:end="57:51">.</operator><name pos:start="57:52" pos:end="57:66">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="81:9"><if pos:start="59:9" pos:end="81:9">if <condition pos:start="59:12" pos:end="59:28">(<expr pos:start="59:13" pos:end="59:27"><name pos:start="59:13" pos:end="59:23">initrd_size</name> <operator pos:start="59:25" pos:end="59:25">&gt;</operator> <literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr>)</condition> <block pos:start="59:30" pos:end="81:9">{<block_content pos:start="61:13" pos:end="79:72">

            <expr_stmt pos:start="61:13" pos:end="61:81"><expr pos:start="61:13" pos:end="61:80"><name pos:start="61:13" pos:end="61:25">initrd_offset</name> <operator pos:start="61:27" pos:end="61:27">=</operator> <operator pos:start="61:29" pos:end="61:29">(</operator><name pos:start="61:30" pos:end="61:40">kernel_high</name> <operator pos:start="61:42" pos:end="61:42">+</operator> <operator pos:start="61:44" pos:end="61:44">~</operator><name pos:start="61:45" pos:end="61:60">INITRD_PAGE_MASK</name><operator pos:start="61:61" pos:end="61:61">)</operator> <operator pos:start="61:63" pos:end="61:63">&amp;</operator> <name pos:start="61:65" pos:end="61:80">INITRD_PAGE_MASK</name></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="73:13"><if pos:start="63:13" pos:end="73:13">if <condition pos:start="63:16" pos:end="63:55">(<expr pos:start="63:17" pos:end="63:54"><name pos:start="63:17" pos:end="63:29">initrd_offset</name> <operator pos:start="63:31" pos:end="63:31">+</operator> <name pos:start="63:33" pos:end="63:43">initrd_size</name> <operator pos:start="63:45" pos:end="63:45">&gt;</operator> <name pos:start="63:47" pos:end="63:54">ram_size</name></expr>)</condition> <block pos:start="63:57" pos:end="73:13">{<block_content pos:start="65:17" pos:end="71:24">

                <expr_stmt pos:start="65:17" pos:end="69:54"><expr pos:start="65:17" pos:end="69:53"><call pos:start="65:17" pos:end="69:53"><name pos:start="65:17" pos:end="65:23">fprintf</name><argument_list pos:start="65:24" pos:end="69:53">(<argument pos:start="65:25" pos:end="65:30"><expr pos:start="65:25" pos:end="65:30"><name pos:start="65:25" pos:end="65:30">stderr</name></expr></argument>,

                        <argument pos:start="67:25" pos:end="67:76"><expr pos:start="67:25" pos:end="67:76"><literal type="string" pos:start="67:25" pos:end="67:76">"qemu: memory too small for initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="69:25" pos:end="69:52"><expr pos:start="69:25" pos:end="69:52"><name pos:start="69:25" pos:end="69:52"><name pos:start="69:25" pos:end="69:36">loaderparams</name><operator pos:start="69:37" pos:end="69:37">.</operator><name pos:start="69:38" pos:end="69:52">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:24"><expr pos:start="71:17" pos:end="71:23"><call pos:start="71:17" pos:end="71:23"><name pos:start="71:17" pos:end="71:20">exit</name><argument_list pos:start="71:21" pos:end="71:23">(<argument pos:start="71:22" pos:end="71:22"><expr pos:start="71:22" pos:end="71:22"><literal type="number" pos:start="71:22" pos:end="71:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="75:13" pos:end="79:72"><expr pos:start="75:13" pos:end="79:71"><name pos:start="75:13" pos:end="75:23">initrd_size</name> <operator pos:start="75:25" pos:end="75:25">=</operator> <call pos:start="75:27" pos:end="79:71"><name pos:start="75:27" pos:end="75:45">load_image_targphys</name><argument_list pos:start="75:46" pos:end="79:71">(<argument pos:start="75:47" pos:end="75:74"><expr pos:start="75:47" pos:end="75:74"><name pos:start="75:47" pos:end="75:74"><name pos:start="75:47" pos:end="75:58">loaderparams</name><operator pos:start="75:59" pos:end="75:59">.</operator><name pos:start="75:60" pos:end="75:74">initrd_filename</name></name></expr></argument>,

                                              <argument pos:start="77:47" pos:end="77:59"><expr pos:start="77:47" pos:end="77:59"><name pos:start="77:47" pos:end="77:59">initrd_offset</name></expr></argument>,

                                              <argument pos:start="79:47" pos:end="79:70"><expr pos:start="79:47" pos:end="79:70"><name pos:start="79:47" pos:end="79:54">ram_size</name> <operator pos:start="79:56" pos:end="79:56">-</operator> <name pos:start="79:58" pos:end="79:70">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="91:9"><if pos:start="83:9" pos:end="91:9">if <condition pos:start="83:12" pos:end="83:45">(<expr pos:start="83:13" pos:end="83:44"><name pos:start="83:13" pos:end="83:23">initrd_size</name> <operator pos:start="83:25" pos:end="83:26">==</operator> <operator pos:start="83:28" pos:end="83:28">(</operator><name pos:start="83:29" pos:end="83:40">target_ulong</name><operator pos:start="83:41" pos:end="83:41">)</operator> <operator pos:start="83:43" pos:end="83:43">-</operator><literal type="number" pos:start="83:44" pos:end="83:44">1</literal></expr>)</condition> <block pos:start="83:47" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:20">

            <expr_stmt pos:start="85:13" pos:end="87:50"><expr pos:start="85:13" pos:end="87:49"><call pos:start="85:13" pos:end="87:49"><name pos:start="85:13" pos:end="85:19">fprintf</name><argument_list pos:start="85:20" pos:end="87:49">(<argument pos:start="85:21" pos:end="85:26"><expr pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:26">stderr</name></expr></argument>, <argument pos:start="85:29" pos:end="85:74"><expr pos:start="85:29" pos:end="85:74"><literal type="string" pos:start="85:29" pos:end="85:74">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                    <argument pos:start="87:21" pos:end="87:48"><expr pos:start="87:21" pos:end="87:48"><name pos:start="87:21" pos:end="87:48"><name pos:start="87:21" pos:end="87:32">loaderparams</name><operator pos:start="87:33" pos:end="87:33">.</operator><name pos:start="87:34" pos:end="87:48">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:20"><expr pos:start="89:13" pos:end="89:19"><call pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:16">exit</name><argument_list pos:start="89:17" pos:end="89:19">(<argument pos:start="89:18" pos:end="89:18"><expr pos:start="89:18" pos:end="89:18"><literal type="number" pos:start="89:18" pos:end="89:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:32">/* Setup prom parameters. */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:70"><expr pos:start="99:5" pos:end="99:69"><name pos:start="99:5" pos:end="99:13">prom_size</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <name pos:start="99:17" pos:end="99:31">ENVP_NB_ENTRIES</name> <operator pos:start="99:33" pos:end="99:33">*</operator> <operator pos:start="99:35" pos:end="99:35">(</operator><sizeof pos:start="99:36" pos:end="99:50">sizeof<argument_list pos:start="99:42" pos:end="99:50">(<argument pos:start="99:43" pos:end="99:49"><expr pos:start="99:43" pos:end="99:49"><name pos:start="99:43" pos:end="99:49">int32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="99:52" pos:end="99:52">+</operator> <name pos:start="99:54" pos:end="99:68">ENVP_ENTRY_SIZE</name><operator pos:start="99:69" pos:end="99:69">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:35"><expr pos:start="101:5" pos:end="101:34"><name pos:start="101:5" pos:end="101:12">prom_buf</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <call pos:start="101:16" pos:end="101:34"><name pos:start="101:16" pos:end="101:23">g_malloc</name><argument_list pos:start="101:24" pos:end="101:34">(<argument pos:start="101:25" pos:end="101:33"><expr pos:start="101:25" pos:end="101:33"><name pos:start="101:25" pos:end="101:33">prom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:73"><expr pos:start="105:5" pos:end="105:72"><call pos:start="105:5" pos:end="105:72"><name pos:start="105:5" pos:end="105:12">prom_set</name><argument_list pos:start="105:13" pos:end="105:72">(<argument pos:start="105:14" pos:end="105:21"><expr pos:start="105:14" pos:end="105:21"><name pos:start="105:14" pos:end="105:21">prom_buf</name></expr></argument>, <argument pos:start="105:24" pos:end="105:35"><expr pos:start="105:24" pos:end="105:35"><name pos:start="105:24" pos:end="105:33">prom_index</name><operator pos:start="105:34" pos:end="105:35">++</operator></expr></argument>, <argument pos:start="105:38" pos:end="105:41"><expr pos:start="105:38" pos:end="105:41"><literal type="string" pos:start="105:38" pos:end="105:41">"%s"</literal></expr></argument>, <argument pos:start="105:44" pos:end="105:71"><expr pos:start="105:44" pos:end="105:71"><name pos:start="105:44" pos:end="105:71"><name pos:start="105:44" pos:end="105:55">loaderparams</name><operator pos:start="105:56" pos:end="105:56">.</operator><name pos:start="105:57" pos:end="105:71">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="119:5"><if pos:start="107:5" pos:end="115:5">if <condition pos:start="107:8" pos:end="107:24">(<expr pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:19">initrd_size</name> <operator pos:start="107:21" pos:end="107:21">&gt;</operator> <literal type="number" pos:start="107:23" pos:end="107:23">0</literal></expr>)</condition> <block pos:start="107:26" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:46">

        <expr_stmt pos:start="109:9" pos:end="113:46"><expr pos:start="109:9" pos:end="113:45"><call pos:start="109:9" pos:end="113:45"><name pos:start="109:9" pos:end="109:16">prom_set</name><argument_list pos:start="109:17" pos:end="113:45">(<argument pos:start="109:18" pos:end="109:25"><expr pos:start="109:18" pos:end="109:25"><name pos:start="109:18" pos:end="109:25">prom_buf</name></expr></argument>, <argument pos:start="109:28" pos:end="109:39"><expr pos:start="109:28" pos:end="109:39"><name pos:start="109:28" pos:end="109:37">prom_index</name><operator pos:start="109:38" pos:end="109:39">++</operator></expr></argument>, <argument pos:start="109:42" pos:end="109:80"><expr pos:start="109:42" pos:end="109:80"><literal type="string" pos:start="109:42" pos:end="109:55">"rd_start=0x%"</literal> <name pos:start="109:57" pos:end="109:62">PRIx64</name> <literal type="string" pos:start="109:64" pos:end="109:80">" rd_size=%li %s"</literal></expr></argument>,

                 <argument pos:start="111:18" pos:end="111:60"><expr pos:start="111:18" pos:end="111:60"><call pos:start="111:18" pos:end="111:60"><name pos:start="111:18" pos:end="111:39">cpu_mips_phys_to_kseg0</name><argument_list pos:start="111:40" pos:end="111:60">(<argument pos:start="111:41" pos:end="111:44"><expr pos:start="111:41" pos:end="111:44"><name pos:start="111:41" pos:end="111:44">NULL</name></expr></argument>, <argument pos:start="111:47" pos:end="111:59"><expr pos:start="111:47" pos:end="111:59"><name pos:start="111:47" pos:end="111:59">initrd_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:63" pos:end="111:73"><expr pos:start="111:63" pos:end="111:73"><name pos:start="111:63" pos:end="111:73">initrd_size</name></expr></argument>,

                 <argument pos:start="113:18" pos:end="113:44"><expr pos:start="113:18" pos:end="113:44"><name pos:start="113:18" pos:end="113:44"><name pos:start="113:18" pos:end="113:29">loaderparams</name><operator pos:start="113:30" pos:end="113:30">.</operator><name pos:start="113:31" pos:end="113:44">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="119:5">else <block pos:start="115:12" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:76">

        <expr_stmt pos:start="117:9" pos:end="117:76"><expr pos:start="117:9" pos:end="117:75"><call pos:start="117:9" pos:end="117:75"><name pos:start="117:9" pos:end="117:16">prom_set</name><argument_list pos:start="117:17" pos:end="117:75">(<argument pos:start="117:18" pos:end="117:25"><expr pos:start="117:18" pos:end="117:25"><name pos:start="117:18" pos:end="117:25">prom_buf</name></expr></argument>, <argument pos:start="117:28" pos:end="117:39"><expr pos:start="117:28" pos:end="117:39"><name pos:start="117:28" pos:end="117:37">prom_index</name><operator pos:start="117:38" pos:end="117:39">++</operator></expr></argument>, <argument pos:start="117:42" pos:end="117:45"><expr pos:start="117:42" pos:end="117:45"><literal type="string" pos:start="117:42" pos:end="117:45">"%s"</literal></expr></argument>, <argument pos:start="117:48" pos:end="117:74"><expr pos:start="117:48" pos:end="117:74"><name pos:start="117:48" pos:end="117:74"><name pos:start="117:48" pos:end="117:59">loaderparams</name><operator pos:start="117:60" pos:end="117:60">.</operator><name pos:start="117:61" pos:end="117:74">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:48"><expr pos:start="123:5" pos:end="123:47"><call pos:start="123:5" pos:end="123:47"><name pos:start="123:5" pos:end="123:12">prom_set</name><argument_list pos:start="123:13" pos:end="123:47">(<argument pos:start="123:14" pos:end="123:21"><expr pos:start="123:14" pos:end="123:21"><name pos:start="123:14" pos:end="123:21">prom_buf</name></expr></argument>, <argument pos:start="123:24" pos:end="123:35"><expr pos:start="123:24" pos:end="123:35"><name pos:start="123:24" pos:end="123:33">prom_index</name><operator pos:start="123:34" pos:end="123:35">++</operator></expr></argument>, <argument pos:start="123:38" pos:end="123:46"><expr pos:start="123:38" pos:end="123:46"><literal type="string" pos:start="123:38" pos:end="123:46">"memsize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:66"><expr pos:start="125:5" pos:end="125:65"><call pos:start="125:5" pos:end="125:65"><name pos:start="125:5" pos:end="125:12">prom_set</name><argument_list pos:start="125:13" pos:end="125:65">(<argument pos:start="125:14" pos:end="125:21"><expr pos:start="125:14" pos:end="125:21"><name pos:start="125:14" pos:end="125:21">prom_buf</name></expr></argument>, <argument pos:start="125:24" pos:end="125:35"><expr pos:start="125:24" pos:end="125:35"><name pos:start="125:24" pos:end="125:33">prom_index</name><operator pos:start="125:34" pos:end="125:35">++</operator></expr></argument>, <argument pos:start="125:38" pos:end="125:41"><expr pos:start="125:38" pos:end="125:41"><literal type="string" pos:start="125:38" pos:end="125:41">"%i"</literal></expr></argument>, <argument pos:start="125:44" pos:end="125:64"><expr pos:start="125:44" pos:end="125:64"><name pos:start="125:44" pos:end="125:64"><name pos:start="125:44" pos:end="125:55">loaderparams</name><operator pos:start="125:56" pos:end="125:56">.</operator><name pos:start="125:57" pos:end="125:64">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:49"><expr pos:start="127:5" pos:end="127:48"><call pos:start="127:5" pos:end="127:48"><name pos:start="127:5" pos:end="127:12">prom_set</name><argument_list pos:start="127:13" pos:end="127:48">(<argument pos:start="127:14" pos:end="127:21"><expr pos:start="127:14" pos:end="127:21"><name pos:start="127:14" pos:end="127:21">prom_buf</name></expr></argument>, <argument pos:start="127:24" pos:end="127:35"><expr pos:start="127:24" pos:end="127:35"><name pos:start="127:24" pos:end="127:33">prom_index</name><operator pos:start="127:34" pos:end="127:35">++</operator></expr></argument>, <argument pos:start="127:38" pos:end="127:47"><expr pos:start="127:38" pos:end="127:47"><literal type="string" pos:start="127:38" pos:end="127:47">"modetty0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:49"><expr pos:start="129:5" pos:end="129:48"><call pos:start="129:5" pos:end="129:48"><name pos:start="129:5" pos:end="129:12">prom_set</name><argument_list pos:start="129:13" pos:end="129:48">(<argument pos:start="129:14" pos:end="129:21"><expr pos:start="129:14" pos:end="129:21"><name pos:start="129:14" pos:end="129:21">prom_buf</name></expr></argument>, <argument pos:start="129:24" pos:end="129:35"><expr pos:start="129:24" pos:end="129:35"><name pos:start="129:24" pos:end="129:33">prom_index</name><operator pos:start="129:34" pos:end="129:35">++</operator></expr></argument>, <argument pos:start="129:38" pos:end="129:47"><expr pos:start="129:38" pos:end="129:47"><literal type="string" pos:start="129:38" pos:end="129:47">"38400n8r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:43"><expr pos:start="131:5" pos:end="131:42"><call pos:start="131:5" pos:end="131:42"><name pos:start="131:5" pos:end="131:12">prom_set</name><argument_list pos:start="131:13" pos:end="131:42">(<argument pos:start="131:14" pos:end="131:21"><expr pos:start="131:14" pos:end="131:21"><name pos:start="131:14" pos:end="131:21">prom_buf</name></expr></argument>, <argument pos:start="131:24" pos:end="131:35"><expr pos:start="131:24" pos:end="131:35"><name pos:start="131:24" pos:end="131:33">prom_index</name><operator pos:start="131:34" pos:end="131:35">++</operator></expr></argument>, <argument pos:start="131:38" pos:end="131:41"><expr pos:start="131:38" pos:end="131:41"><name pos:start="131:38" pos:end="131:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="137:64"><expr pos:start="135:5" pos:end="137:63"><call pos:start="135:5" pos:end="137:63"><name pos:start="135:5" pos:end="135:22">rom_add_blob_fixed</name><argument_list pos:start="135:23" pos:end="137:63">(<argument pos:start="135:24" pos:end="135:29"><expr pos:start="135:24" pos:end="135:29"><literal type="string" pos:start="135:24" pos:end="135:29">"prom"</literal></expr></argument>, <argument pos:start="135:32" pos:end="135:39"><expr pos:start="135:32" pos:end="135:39"><name pos:start="135:32" pos:end="135:39">prom_buf</name></expr></argument>, <argument pos:start="135:42" pos:end="135:50"><expr pos:start="135:42" pos:end="135:50"><name pos:start="135:42" pos:end="135:50">prom_size</name></expr></argument>,

                       <argument pos:start="137:24" pos:end="137:62"><expr pos:start="137:24" pos:end="137:62"><call pos:start="137:24" pos:end="137:62"><name pos:start="137:24" pos:end="137:45">cpu_mips_kseg0_to_phys</name><argument_list pos:start="137:46" pos:end="137:62">(<argument pos:start="137:47" pos:end="137:50"><expr pos:start="137:47" pos:end="137:50"><name pos:start="137:47" pos:end="137:50">NULL</name></expr></argument>, <argument pos:start="137:53" pos:end="137:61"><expr pos:start="137:53" pos:end="137:61"><name pos:start="137:53" pos:end="137:61">ENVP_ADDR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="141:5" pos:end="141:24">return <expr pos:start="141:12" pos:end="141:23"><name pos:start="141:12" pos:end="141:23">kernel_entry</name></expr>;</return>

</block_content>}</block></function>
</unit>
