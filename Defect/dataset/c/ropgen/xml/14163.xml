<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14163.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">mp_decode_frame</name><parameter_list pos:start="1:27" pos:end="3:78">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:43">MPADecodeContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:43"><decl pos:start="3:28" pos:end="3:43"><type pos:start="3:28" pos:end="3:43"><name pos:start="3:28" pos:end="3:34">OUT_INT</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:43">samples</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:63"><decl pos:start="3:46" pos:end="3:63"><type pos:start="3:46" pos:end="3:63"><specifier pos:start="3:46" pos:end="3:50">const</specifier> <name pos:start="3:52" pos:end="3:58">uint8_t</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:63">buf</name></decl></parameter>, <parameter pos:start="3:66" pos:end="3:77"><decl pos:start="3:66" pos:end="3:77"><type pos:start="3:66" pos:end="3:77"><name pos:start="3:66" pos:end="3:68">int</name></type> <name pos:start="3:70" pos:end="3:77">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="137:1">{<block_content pos:start="7:5" pos:end="135:61">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:20">nb_frames</name></decl>, <decl pos:start="7:23" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:24">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">OUT_INT</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:24">samples_ptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:73"><expr pos:start="13:5" pos:end="13:72"><call pos:start="13:5" pos:end="13:72"><name pos:start="13:5" pos:end="13:17">init_get_bits</name><argument_list pos:start="13:18" pos:end="13:72">(<argument pos:start="13:19" pos:end="13:24"><expr pos:start="13:19" pos:end="13:24"><operator pos:start="13:19" pos:end="13:19">&amp;</operator><name pos:start="13:20" pos:end="13:24"><name pos:start="13:20" pos:end="13:20">s</name><operator pos:start="13:21" pos:end="13:22">-&gt;</operator><name pos:start="13:23" pos:end="13:24">gb</name></name></expr></argument>, <argument pos:start="13:27" pos:end="13:43"><expr pos:start="13:27" pos:end="13:43"><name pos:start="13:27" pos:end="13:29">buf</name> <operator pos:start="13:31" pos:end="13:31">+</operator> <name pos:start="13:33" pos:end="13:43">HEADER_SIZE</name></expr></argument>, <argument pos:start="13:46" pos:end="13:71"><expr pos:start="13:46" pos:end="13:71"><operator pos:start="13:46" pos:end="13:46">(</operator><name pos:start="13:47" pos:end="13:54">buf_size</name> <operator pos:start="13:56" pos:end="13:56">-</operator> <name pos:start="13:58" pos:end="13:68">HEADER_SIZE</name><operator pos:start="13:69" pos:end="13:69">)</operator><operator pos:start="13:70" pos:end="13:70">*</operator><literal type="number" pos:start="13:71" pos:end="13:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:37">/* skip error protection field */</comment>

    <if_stmt pos:start="19:5" pos:end="21:30"><if pos:start="19:5" pos:end="21:30">if <condition pos:start="19:8" pos:end="19:28">(<expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:27">error_protection</name></name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:30"><block_content pos:start="21:9" pos:end="21:30">

        <expr_stmt pos:start="21:9" pos:end="21:30"><expr pos:start="21:9" pos:end="21:29"><call pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:17">skip_bits</name><argument_list pos:start="21:18" pos:end="21:29">(<argument pos:start="21:19" pos:end="21:24"><expr pos:start="21:19" pos:end="21:24"><operator pos:start="21:19" pos:end="21:19">&amp;</operator><name pos:start="21:20" pos:end="21:24"><name pos:start="21:20" pos:end="21:20">s</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:24">gb</name></name></expr></argument>, <argument pos:start="21:27" pos:end="21:28"><expr pos:start="21:27" pos:end="21:28"><literal type="number" pos:start="21:27" pos:end="21:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:53"><expr pos:start="25:5" pos:end="25:52"><call pos:start="25:5" pos:end="25:52"><name pos:start="25:5" pos:end="25:11">dprintf</name><argument_list pos:start="25:12" pos:end="25:52">(<argument pos:start="25:13" pos:end="25:20"><expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:20">avctx</name></name></expr></argument>, <argument pos:start="25:23" pos:end="25:35"><expr pos:start="25:23" pos:end="25:35"><literal type="string" pos:start="25:23" pos:end="25:35">"frame %d:\n"</literal></expr></argument>, <argument pos:start="25:38" pos:end="25:51"><expr pos:start="25:38" pos:end="25:51"><name pos:start="25:38" pos:end="25:51"><name pos:start="25:38" pos:end="25:38">s</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:51">frame_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="27:5" pos:end="107:5">switch<condition pos:start="27:11" pos:end="27:20">(<expr pos:start="27:12" pos:end="27:19"><name pos:start="27:12" pos:end="27:19"><name pos:start="27:12" pos:end="27:12">s</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:19">layer</name></name></expr>)</condition> <block pos:start="27:22" pos:end="107:5">{<block_content pos:start="29:5" pos:end="105:14">

    <case pos:start="29:5" pos:end="29:11">case <expr pos:start="29:10" pos:end="29:10"><literal type="number" pos:start="29:10" pos:end="29:10">1</literal></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="31:35"><expr pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:16">avctx</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:28">frame_size</name></name> <operator pos:start="31:30" pos:end="31:30">=</operator> <literal type="number" pos:start="31:32" pos:end="31:34">384</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:40"><expr pos:start="33:9" pos:end="33:39"><name pos:start="33:9" pos:end="33:17">nb_frames</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <call pos:start="33:21" pos:end="33:39"><name pos:start="33:21" pos:end="33:36">mp_decode_layer1</name><argument_list pos:start="33:37" pos:end="33:39">(<argument pos:start="33:38" pos:end="33:38"><expr pos:start="33:38" pos:end="33:38"><name pos:start="33:38" pos:end="33:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:11">case <expr pos:start="37:10" pos:end="37:10"><literal type="number" pos:start="37:10" pos:end="37:10">2</literal></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:16">avctx</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:28">frame_size</name></name> <operator pos:start="39:30" pos:end="39:30">=</operator> <literal type="number" pos:start="39:32" pos:end="39:35">1152</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:40"><expr pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:17">nb_frames</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="41:39"><name pos:start="41:21" pos:end="41:36">mp_decode_layer2</name><argument_list pos:start="41:37" pos:end="41:39">(<argument pos:start="41:38" pos:end="41:38"><expr pos:start="41:38" pos:end="41:38"><name pos:start="41:38" pos:end="41:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:11">case <expr pos:start="45:10" pos:end="45:10"><literal type="number" pos:start="45:10" pos:end="45:10">3</literal></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:51"><expr pos:start="47:9" pos:end="47:50"><name pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:16">avctx</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:28">frame_size</name></name> <operator pos:start="47:30" pos:end="47:30">=</operator> <ternary pos:start="47:32" pos:end="47:50"><condition pos:start="47:32" pos:end="47:39"><expr pos:start="47:32" pos:end="47:37"><name pos:start="47:32" pos:end="47:37"><name pos:start="47:32" pos:end="47:32">s</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:37">lsf</name></name></expr> ?</condition><then pos:start="47:41" pos:end="47:43"> <expr pos:start="47:41" pos:end="47:43"><literal type="number" pos:start="47:41" pos:end="47:43">576</literal></expr> </then><else pos:start="47:45" pos:end="47:50">: <expr pos:start="47:47" pos:end="47:50"><literal type="number" pos:start="47:47" pos:end="47:50">1152</literal></expr></else></ternary></expr>;</expr_stmt>

    <default pos:start="49:5" pos:end="49:12">default:</default>

        <expr_stmt pos:start="51:9" pos:end="51:40"><expr pos:start="51:9" pos:end="51:39"><name pos:start="51:9" pos:end="51:17">nb_frames</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <call pos:start="51:21" pos:end="51:39"><name pos:start="51:21" pos:end="51:36">mp_decode_layer3</name><argument_list pos:start="51:37" pos:end="51:39">(<argument pos:start="51:38" pos:end="51:38"><expr pos:start="51:38" pos:end="51:38"><name pos:start="51:38" pos:end="51:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:24">last_buf_size</name></name><operator pos:start="55:25" pos:end="55:25">=</operator><literal type="number" pos:start="55:26" pos:end="55:26">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="77:9"><if pos:start="57:9" pos:end="77:9">if<condition pos:start="57:11" pos:end="57:27">(<expr pos:start="57:12" pos:end="57:26"><name pos:start="57:12" pos:end="57:26"><name pos:start="57:12" pos:end="57:12">s</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:19">in_gb</name><operator pos:start="57:20" pos:end="57:20">.</operator><name pos:start="57:21" pos:end="57:26">buffer</name></name></expr>)</condition><block pos:start="57:28" pos:end="77:9">{<block_content pos:start="59:13" pos:end="75:34">

            <expr_stmt pos:start="59:13" pos:end="59:35"><expr pos:start="59:13" pos:end="59:34"><call pos:start="59:13" pos:end="59:34"><name pos:start="59:13" pos:end="59:26">align_get_bits</name><argument_list pos:start="59:27" pos:end="59:34">(<argument pos:start="59:28" pos:end="59:33"><expr pos:start="59:28" pos:end="59:33"><operator pos:start="59:28" pos:end="59:28">&amp;</operator><name pos:start="59:29" pos:end="59:33"><name pos:start="59:29" pos:end="59:29">s</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:64"><expr pos:start="61:13" pos:end="61:63"><name pos:start="61:13" pos:end="61:13">i</name><operator pos:start="61:14" pos:end="61:14">=</operator> <operator pos:start="61:16" pos:end="61:16">(</operator><name pos:start="61:17" pos:end="61:34"><name pos:start="61:17" pos:end="61:17">s</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:21">gb</name><operator pos:start="61:22" pos:end="61:22">.</operator><name pos:start="61:23" pos:end="61:34">size_in_bits</name></name> <operator pos:start="61:36" pos:end="61:36">-</operator> <call pos:start="61:38" pos:end="61:59"><name pos:start="61:38" pos:end="61:51">get_bits_count</name><argument_list pos:start="61:52" pos:end="61:59">(<argument pos:start="61:53" pos:end="61:58"><expr pos:start="61:53" pos:end="61:58"><operator pos:start="61:53" pos:end="61:53">&amp;</operator><name pos:start="61:54" pos:end="61:58"><name pos:start="61:54" pos:end="61:54">s</name><operator pos:start="61:55" pos:end="61:56">-&gt;</operator><name pos:start="61:57" pos:end="61:58">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="61:60" pos:end="61:60">)</operator><operator pos:start="61:61" pos:end="61:62">&gt;&gt;</operator><literal type="number" pos:start="61:63" pos:end="61:63">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="71:79"><if pos:start="63:13" pos:end="69:13">if<condition pos:start="63:15" pos:end="63:44">(<expr pos:start="63:16" pos:end="63:43"><name pos:start="63:16" pos:end="63:16">i</name> <operator pos:start="63:18" pos:end="63:19">&gt;=</operator> <literal type="number" pos:start="63:21" pos:end="63:21">0</literal> <operator pos:start="63:23" pos:end="63:24">&amp;&amp;</operator> <name pos:start="63:26" pos:end="63:26">i</name> <operator pos:start="63:28" pos:end="63:29">&lt;=</operator> <name pos:start="63:31" pos:end="63:43">BACKSTEP_SIZE</name></expr>)</condition><block pos:start="63:45" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:35">

                <expr_stmt pos:start="65:17" pos:end="65:84"><expr pos:start="65:17" pos:end="65:83"><call pos:start="65:17" pos:end="65:83"><name pos:start="65:17" pos:end="65:23">memmove</name><argument_list pos:start="65:24" pos:end="65:83">(<argument pos:start="65:25" pos:end="65:35"><expr pos:start="65:25" pos:end="65:35"><name pos:start="65:25" pos:end="65:35"><name pos:start="65:25" pos:end="65:25">s</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:35">last_buf</name></name></expr></argument>, <argument pos:start="65:38" pos:end="65:79"><expr pos:start="65:38" pos:end="65:79"><name pos:start="65:38" pos:end="65:49"><name pos:start="65:38" pos:end="65:38">s</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:42">gb</name><operator pos:start="65:43" pos:end="65:43">.</operator><name pos:start="65:44" pos:end="65:49">buffer</name></name> <operator pos:start="65:51" pos:end="65:51">+</operator> <operator pos:start="65:53" pos:end="65:53">(</operator><call pos:start="65:54" pos:end="65:75"><name pos:start="65:54" pos:end="65:67">get_bits_count</name><argument_list pos:start="65:68" pos:end="65:75">(<argument pos:start="65:69" pos:end="65:74"><expr pos:start="65:69" pos:end="65:74"><operator pos:start="65:69" pos:end="65:69">&amp;</operator><name pos:start="65:70" pos:end="65:74"><name pos:start="65:70" pos:end="65:70">s</name><operator pos:start="65:71" pos:end="65:72">-&gt;</operator><name pos:start="65:73" pos:end="65:74">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="65:76" pos:end="65:77">&gt;&gt;</operator><literal type="number" pos:start="65:78" pos:end="65:78">3</literal><operator pos:start="65:79" pos:end="65:79">)</operator></expr></argument>, <argument pos:start="65:82" pos:end="65:82"><expr pos:start="65:82" pos:end="65:82"><name pos:start="65:82" pos:end="65:82">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:35"><expr pos:start="67:17" pos:end="67:34"><name pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:17">s</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:32">last_buf_size</name></name><operator pos:start="67:33" pos:end="67:33">=</operator><name pos:start="67:34" pos:end="67:34">i</name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="69:14" pos:end="71:79">else<block type="pseudo" pos:start="71:17" pos:end="71:79"><block_content pos:start="71:17" pos:end="71:79">

                <expr_stmt pos:start="71:17" pos:end="71:79"><expr pos:start="71:17" pos:end="71:78"><call pos:start="71:17" pos:end="71:78"><name pos:start="71:17" pos:end="71:22">av_log</name><argument_list pos:start="71:23" pos:end="71:78">(<argument pos:start="71:24" pos:end="71:31"><expr pos:start="71:24" pos:end="71:31"><name pos:start="71:24" pos:end="71:31"><name pos:start="71:24" pos:end="71:24">s</name><operator pos:start="71:25" pos:end="71:26">-&gt;</operator><name pos:start="71:27" pos:end="71:31">avctx</name></name></expr></argument>, <argument pos:start="71:34" pos:end="71:45"><expr pos:start="71:34" pos:end="71:45"><name pos:start="71:34" pos:end="71:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:48" pos:end="71:74"><expr pos:start="71:48" pos:end="71:74"><literal type="string" pos:start="71:48" pos:end="71:74">"invalid old backstep %d\n"</literal></expr></argument>, <argument pos:start="71:77" pos:end="71:77"><expr pos:start="71:77" pos:end="71:77"><name pos:start="71:77" pos:end="71:77">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:28"><expr pos:start="73:13" pos:end="73:27"><name pos:start="73:13" pos:end="73:17"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:17">gb</name></name><operator pos:start="73:18" pos:end="73:18">=</operator> <name pos:start="73:20" pos:end="73:27"><name pos:start="73:20" pos:end="73:20">s</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:27">in_gb</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:34"><expr pos:start="75:13" pos:end="75:33"><name pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:13">s</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:20">in_gb</name><operator pos:start="75:21" pos:end="75:21">.</operator><name pos:start="75:22" pos:end="75:27">buffer</name></name><operator pos:start="75:28" pos:end="75:28">=</operator> <name pos:start="75:30" pos:end="75:33">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:31"><expr pos:start="81:9" pos:end="81:30"><call pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:22">align_get_bits</name><argument_list pos:start="81:23" pos:end="81:30">(<argument pos:start="81:24" pos:end="81:29"><expr pos:start="81:24" pos:end="81:29"><operator pos:start="81:24" pos:end="81:24">&amp;</operator><name pos:start="81:25" pos:end="81:29"><name pos:start="81:25" pos:end="81:25">s</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:50"><expr pos:start="83:9" pos:end="83:49"><call pos:start="83:9" pos:end="83:49"><name pos:start="83:9" pos:end="83:14">assert</name><argument_list pos:start="83:15" pos:end="83:49">(<argument pos:start="83:16" pos:end="83:48"><expr pos:start="83:16" pos:end="83:48"><operator pos:start="83:16" pos:end="83:16">(</operator><call pos:start="83:17" pos:end="83:38"><name pos:start="83:17" pos:end="83:30">get_bits_count</name><argument_list pos:start="83:31" pos:end="83:38">(<argument pos:start="83:32" pos:end="83:37"><expr pos:start="83:32" pos:end="83:37"><operator pos:start="83:32" pos:end="83:32">&amp;</operator><name pos:start="83:33" pos:end="83:37"><name pos:start="83:33" pos:end="83:33">s</name><operator pos:start="83:34" pos:end="83:35">-&gt;</operator><name pos:start="83:36" pos:end="83:37">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="83:40" pos:end="83:40">&amp;</operator> <literal type="number" pos:start="83:42" pos:end="83:42">7</literal><operator pos:start="83:43" pos:end="83:43">)</operator> <operator pos:start="83:45" pos:end="83:46">==</operator> <literal type="number" pos:start="83:48" pos:end="83:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:60"><expr pos:start="85:9" pos:end="85:59"><name pos:start="85:9" pos:end="85:9">i</name><operator pos:start="85:10" pos:end="85:10">=</operator> <operator pos:start="85:12" pos:end="85:12">(</operator><name pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:17">gb</name><operator pos:start="85:18" pos:end="85:18">.</operator><name pos:start="85:19" pos:end="85:30">size_in_bits</name></name> <operator pos:start="85:32" pos:end="85:32">-</operator> <call pos:start="85:34" pos:end="85:55"><name pos:start="85:34" pos:end="85:47">get_bits_count</name><argument_list pos:start="85:48" pos:end="85:55">(<argument pos:start="85:49" pos:end="85:54"><expr pos:start="85:49" pos:end="85:54"><operator pos:start="85:49" pos:end="85:49">&amp;</operator><name pos:start="85:50" pos:end="85:54"><name pos:start="85:50" pos:end="85:50">s</name><operator pos:start="85:51" pos:end="85:52">-&gt;</operator><name pos:start="85:53" pos:end="85:54">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="85:56" pos:end="85:56">)</operator><operator pos:start="85:57" pos:end="85:58">&gt;&gt;</operator><literal type="number" pos:start="85:59" pos:end="85:59">3</literal></expr>;</expr_stmt>



        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if<condition pos:start="89:11" pos:end="89:51">(<expr pos:start="89:12" pos:end="89:50"><name pos:start="89:12" pos:end="89:21"><name pos:start="89:12" pos:end="89:12">i</name><argument_list type="generic" pos:start="89:13" pos:end="89:21">&lt;<argument pos:start="89:14" pos:end="89:19"><expr pos:start="89:14" pos:end="89:19"><literal type="number" pos:start="89:14" pos:end="89:14">0</literal> <operator pos:start="89:16" pos:end="89:17">||</operator> <name pos:start="89:19" pos:end="89:19">i</name></expr></argument> &gt;</argument_list></name> <name pos:start="89:23" pos:end="89:35">BACKSTEP_SIZE</name> <operator pos:start="89:37" pos:end="89:38">||</operator> <name pos:start="89:40" pos:end="89:48">nb_frames</name><operator pos:start="89:49" pos:end="89:49">&lt;</operator><literal type="number" pos:start="89:50" pos:end="89:50">0</literal></expr>)</condition><block pos:start="89:52" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:60">

            <expr_stmt pos:start="91:13" pos:end="91:77"><expr pos:start="91:13" pos:end="91:76"><call pos:start="91:13" pos:end="91:76"><name pos:start="91:13" pos:end="91:18">av_log</name><argument_list pos:start="91:19" pos:end="91:76">(<argument pos:start="91:20" pos:end="91:27"><expr pos:start="91:20" pos:end="91:27"><name pos:start="91:20" pos:end="91:27"><name pos:start="91:20" pos:end="91:20">s</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:27">avctx</name></name></expr></argument>, <argument pos:start="91:30" pos:end="91:43"><expr pos:start="91:30" pos:end="91:43"><name pos:start="91:30" pos:end="91:43">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="91:46" pos:end="91:72"><expr pos:start="91:46" pos:end="91:72"><literal type="string" pos:start="91:46" pos:end="91:72">"invalid new backstep %d\n"</literal></expr></argument>, <argument pos:start="91:75" pos:end="91:75"><expr pos:start="91:75" pos:end="91:75"><name pos:start="91:75" pos:end="91:75">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:60"><expr pos:start="93:13" pos:end="93:59"><name pos:start="93:13" pos:end="93:13">i</name><operator pos:start="93:14" pos:end="93:14">=</operator> <call pos:start="93:16" pos:end="93:59"><name pos:start="93:16" pos:end="93:20">FFMIN</name><argument_list pos:start="93:21" pos:end="93:59">(<argument pos:start="93:22" pos:end="93:34"><expr pos:start="93:22" pos:end="93:34"><name pos:start="93:22" pos:end="93:34">BACKSTEP_SIZE</name></expr></argument>, <argument pos:start="93:37" pos:end="93:58"><expr pos:start="93:37" pos:end="93:58"><name pos:start="93:37" pos:end="93:44">buf_size</name> <operator pos:start="93:46" pos:end="93:46">-</operator> <name pos:start="93:48" pos:end="93:58">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:53"><expr pos:start="97:9" pos:end="97:52"><call pos:start="97:9" pos:end="97:52"><name pos:start="97:9" pos:end="97:14">assert</name><argument_list pos:start="97:15" pos:end="97:52">(<argument pos:start="97:16" pos:end="97:51"><expr pos:start="97:16" pos:end="97:51"><name pos:start="97:16" pos:end="97:16">i</name> <operator pos:start="97:18" pos:end="97:19">&lt;=</operator> <name pos:start="97:21" pos:end="97:28">buf_size</name> <operator pos:start="97:30" pos:end="97:30">-</operator> <name pos:start="97:32" pos:end="97:42">HEADER_SIZE</name> <operator pos:start="97:44" pos:end="97:45">&amp;&amp;</operator> <name pos:start="97:47" pos:end="97:47">i</name><operator pos:start="97:48" pos:end="97:49">&gt;=</operator> <literal type="number" pos:start="97:51" pos:end="97:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:93"><expr pos:start="99:9" pos:end="99:92"><call pos:start="99:9" pos:end="99:92"><name pos:start="99:9" pos:end="99:14">memcpy</name><argument_list pos:start="99:15" pos:end="99:92">(<argument pos:start="99:16" pos:end="99:45"><expr pos:start="99:16" pos:end="99:45"><name pos:start="99:16" pos:end="99:26"><name pos:start="99:16" pos:end="99:16">s</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:26">last_buf</name></name> <operator pos:start="99:28" pos:end="99:28">+</operator> <name pos:start="99:30" pos:end="99:45"><name pos:start="99:30" pos:end="99:30">s</name><operator pos:start="99:31" pos:end="99:32">-&gt;</operator><name pos:start="99:33" pos:end="99:45">last_buf_size</name></name></expr></argument>, <argument pos:start="99:48" pos:end="99:88"><expr pos:start="99:48" pos:end="99:88"><name pos:start="99:48" pos:end="99:59"><name pos:start="99:48" pos:end="99:48">s</name><operator pos:start="99:49" pos:end="99:50">-&gt;</operator><name pos:start="99:51" pos:end="99:52">gb</name><operator pos:start="99:53" pos:end="99:53">.</operator><name pos:start="99:54" pos:end="99:59">buffer</name></name> <operator pos:start="99:61" pos:end="99:61">+</operator> <name pos:start="99:63" pos:end="99:70">buf_size</name> <operator pos:start="99:72" pos:end="99:72">-</operator> <name pos:start="99:74" pos:end="99:84">HEADER_SIZE</name> <operator pos:start="99:86" pos:end="99:86">-</operator> <name pos:start="99:88" pos:end="99:88">i</name></expr></argument>, <argument pos:start="99:91" pos:end="99:91"><expr pos:start="99:91" pos:end="99:91"><name pos:start="99:91" pos:end="99:91">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:30"><expr pos:start="101:9" pos:end="101:29"><name pos:start="101:9" pos:end="101:24"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:24">last_buf_size</name></name> <operator pos:start="101:26" pos:end="101:27">+=</operator> <name pos:start="101:29" pos:end="101:29">i</name></expr>;</expr_stmt>



        <break pos:start="105:9" pos:end="105:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="111:5" pos:end="111:36">/* apply the synthesis filter */</comment>

    <for pos:start="113:5" pos:end="131:5">for<control pos:start="113:8" pos:end="113:36">(<init pos:start="113:9" pos:end="113:13"><expr pos:start="113:9" pos:end="113:12"><name pos:start="113:9" pos:end="113:10">ch</name><operator pos:start="113:11" pos:end="113:11">=</operator><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</init><condition pos:start="113:14" pos:end="113:31"><expr pos:start="113:14" pos:end="113:30"><name pos:start="113:14" pos:end="113:15">ch</name><operator pos:start="113:16" pos:end="113:16">&lt;</operator><name pos:start="113:17" pos:end="113:30"><name pos:start="113:17" pos:end="113:17">s</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:30">nb_channels</name></name></expr>;</condition><incr pos:start="113:32" pos:end="113:35"><expr pos:start="113:32" pos:end="113:35"><name pos:start="113:32" pos:end="113:33">ch</name><operator pos:start="113:34" pos:end="113:35">++</operator></expr></incr>)</control> <block pos:start="113:38" pos:end="131:5">{<block_content pos:start="115:9" pos:end="129:9">

        <expr_stmt pos:start="115:9" pos:end="115:35"><expr pos:start="115:9" pos:end="115:34"><name pos:start="115:9" pos:end="115:19">samples_ptr</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <name pos:start="115:23" pos:end="115:29">samples</name> <operator pos:start="115:31" pos:end="115:31">+</operator> <name pos:start="115:33" pos:end="115:34">ch</name></expr>;</expr_stmt>

        <for pos:start="117:9" pos:end="129:9">for<control pos:start="117:12" pos:end="117:32">(<init pos:start="117:13" pos:end="117:16"><expr pos:start="117:13" pos:end="117:15"><name pos:start="117:13" pos:end="117:13">i</name><operator pos:start="117:14" pos:end="117:14">=</operator><literal type="number" pos:start="117:15" pos:end="117:15">0</literal></expr>;</init><condition pos:start="117:17" pos:end="117:28"><expr pos:start="117:17" pos:end="117:27"><name pos:start="117:17" pos:end="117:17">i</name><operator pos:start="117:18" pos:end="117:18">&lt;</operator><name pos:start="117:19" pos:end="117:27">nb_frames</name></expr>;</condition><incr pos:start="117:29" pos:end="117:31"><expr pos:start="117:29" pos:end="117:31"><name pos:start="117:29" pos:end="117:29">i</name><operator pos:start="117:30" pos:end="117:31">++</operator></expr></incr>)</control> <block pos:start="117:34" pos:end="129:9">{<block_content pos:start="119:13" pos:end="127:47">

            <expr_stmt pos:start="119:13" pos:end="125:47"><expr pos:start="119:13" pos:end="125:46"><call pos:start="119:13" pos:end="125:46"><name pos:start="119:13" pos:end="119:31">ff_mpa_synth_filter</name><argument_list pos:start="119:32" pos:end="125:46">(<argument pos:start="119:33" pos:end="119:48"><expr pos:start="119:33" pos:end="119:48"><name pos:start="119:33" pos:end="119:48"><name pos:start="119:33" pos:end="119:33">s</name><operator pos:start="119:34" pos:end="119:35">-&gt;</operator><name pos:start="119:36" pos:end="119:44">synth_buf</name><index pos:start="119:45" pos:end="119:48">[<expr pos:start="119:46" pos:end="119:47"><name pos:start="119:46" pos:end="119:47">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="119:51" pos:end="119:76"><expr pos:start="119:51" pos:end="119:76"><operator pos:start="119:51" pos:end="119:51">&amp;</operator><operator pos:start="119:52" pos:end="119:52">(</operator><name pos:start="119:53" pos:end="119:75"><name pos:start="119:53" pos:end="119:53">s</name><operator pos:start="119:54" pos:end="119:55">-&gt;</operator><name pos:start="119:56" pos:end="119:71">synth_buf_offset</name><index pos:start="119:72" pos:end="119:75">[<expr pos:start="119:73" pos:end="119:74"><name pos:start="119:73" pos:end="119:74">ch</name></expr>]</index></name><operator pos:start="119:76" pos:end="119:76">)</operator></expr></argument>,

                         <argument pos:start="121:26" pos:end="121:31"><expr pos:start="121:26" pos:end="121:31"><name pos:start="121:26" pos:end="121:31">window</name></expr></argument>, <argument pos:start="121:34" pos:end="121:49"><expr pos:start="121:34" pos:end="121:49"><operator pos:start="121:34" pos:end="121:34">&amp;</operator><name pos:start="121:35" pos:end="121:49"><name pos:start="121:35" pos:end="121:35">s</name><operator pos:start="121:36" pos:end="121:37">-&gt;</operator><name pos:start="121:38" pos:end="121:49">dither_state</name></name></expr></argument>,

                         <argument pos:start="123:26" pos:end="123:36"><expr pos:start="123:26" pos:end="123:36"><name pos:start="123:26" pos:end="123:36">samples_ptr</name></expr></argument>, <argument pos:start="123:39" pos:end="123:52"><expr pos:start="123:39" pos:end="123:52"><name pos:start="123:39" pos:end="123:52"><name pos:start="123:39" pos:end="123:39">s</name><operator pos:start="123:40" pos:end="123:41">-&gt;</operator><name pos:start="123:42" pos:end="123:52">nb_channels</name></name></expr></argument>,

                         <argument pos:start="125:26" pos:end="125:45"><expr pos:start="125:26" pos:end="125:45"><name pos:start="125:26" pos:end="125:45"><name pos:start="125:26" pos:end="125:26">s</name><operator pos:start="125:27" pos:end="125:28">-&gt;</operator><name pos:start="125:29" pos:end="125:38">sb_samples</name><index pos:start="125:39" pos:end="125:42">[<expr pos:start="125:40" pos:end="125:41"><name pos:start="125:40" pos:end="125:41">ch</name></expr>]</index><index pos:start="125:43" pos:end="125:45">[<expr pos:start="125:44" pos:end="125:44"><name pos:start="125:44" pos:end="125:44">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:47"><expr pos:start="127:13" pos:end="127:46"><name pos:start="127:13" pos:end="127:23">samples_ptr</name> <operator pos:start="127:25" pos:end="127:26">+=</operator> <literal type="number" pos:start="127:28" pos:end="127:29">32</literal> <operator pos:start="127:31" pos:end="127:31">*</operator> <name pos:start="127:33" pos:end="127:46"><name pos:start="127:33" pos:end="127:33">s</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:46">nb_channels</name></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <return pos:start="135:5" pos:end="135:61">return <expr pos:start="135:12" pos:end="135:60"><name pos:start="135:12" pos:end="135:20">nb_frames</name> <operator pos:start="135:22" pos:end="135:22">*</operator> <literal type="number" pos:start="135:24" pos:end="135:25">32</literal> <operator pos:start="135:27" pos:end="135:27">*</operator> <sizeof pos:start="135:29" pos:end="135:43">sizeof<argument_list pos:start="135:35" pos:end="135:43">(<argument pos:start="135:36" pos:end="135:42"><expr pos:start="135:36" pos:end="135:42"><name pos:start="135:36" pos:end="135:42">OUT_INT</name></expr></argument>)</argument_list></sizeof> <operator pos:start="135:45" pos:end="135:45">*</operator> <name pos:start="135:47" pos:end="135:60"><name pos:start="135:47" pos:end="135:47">s</name><operator pos:start="135:48" pos:end="135:49">-&gt;</operator><name pos:start="135:50" pos:end="135:60">nb_channels</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
