<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13572.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">omx_encode_frame</name><parameter_list pos:start="1:28" pos:end="3:66">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:59">AVPacket</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">pkt</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:48"><decl pos:start="3:29" pos:end="3:48"><type pos:start="3:29" pos:end="3:48"><specifier pos:start="3:29" pos:end="3:33">const</specifier> <name pos:start="3:35" pos:end="3:41">AVFrame</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:48">frame</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:65"><decl pos:start="3:51" pos:end="3:65"><type pos:start="3:51" pos:end="3:65"><name pos:start="3:51" pos:end="3:53">int</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:65">got_packet</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="293:1">{<block_content pos:start="7:5" pos:end="291:15">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">OMXCodecContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:22">s</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:24">OMX_BUFFERHEADERTYPE</name><modifier pos:start="11:25" pos:end="11:25">*</modifier></type> <name pos:start="11:27" pos:end="11:32">buffer</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">OMX_ERRORTYPE</name></type> <name pos:start="13:19" pos:end="13:21">err</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="149:5"><if pos:start="17:5" pos:end="149:5">if <condition pos:start="17:8" pos:end="17:14">(<expr pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:13">frame</name></expr>)</condition> <block pos:start="17:16" pos:end="149:5">{<block_content pos:start="19:9" pos:end="147:27">

        <decl_stmt pos:start="19:9" pos:end="19:24"><decl pos:start="19:9" pos:end="19:23"><type pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:15">uint8_t</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:23"><name pos:start="19:18" pos:end="19:20">dst</name><index pos:start="19:21" pos:end="19:23">[<expr pos:start="19:22" pos:end="19:22"><literal type="number" pos:start="19:22" pos:end="19:22">4</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:24"><decl pos:start="21:9" pos:end="21:23"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:20">linesize</name><index pos:start="21:21" pos:end="21:23">[<expr pos:start="21:22" pos:end="21:22"><literal type="number" pos:start="21:22" pos:end="21:22">4</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:22"><decl pos:start="23:9" pos:end="23:21"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:21">need_copy</name></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="27:76"><expr pos:start="25:9" pos:end="27:75"><name pos:start="25:9" pos:end="25:14">buffer</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <call pos:start="25:18" pos:end="27:75"><name pos:start="25:18" pos:end="25:27">get_buffer</name><argument_list pos:start="25:28" pos:end="27:75">(<argument pos:start="25:29" pos:end="25:43"><expr pos:start="25:29" pos:end="25:43"><operator pos:start="25:29" pos:end="25:29">&amp;</operator><name pos:start="25:30" pos:end="25:43"><name pos:start="25:30" pos:end="25:30">s</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:43">input_mutex</name></name></expr></argument>, <argument pos:start="25:46" pos:end="25:59"><expr pos:start="25:46" pos:end="25:59"><operator pos:start="25:46" pos:end="25:46">&amp;</operator><name pos:start="25:47" pos:end="25:59"><name pos:start="25:47" pos:end="25:47">s</name><operator pos:start="25:48" pos:end="25:49">-&gt;</operator><name pos:start="25:50" pos:end="25:59">input_cond</name></name></expr></argument>,

                            <argument pos:start="27:29" pos:end="27:51"><expr pos:start="27:29" pos:end="27:51"><operator pos:start="27:29" pos:end="27:29">&amp;</operator><name pos:start="27:30" pos:end="27:51"><name pos:start="27:30" pos:end="27:30">s</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:51">num_free_in_buffers</name></name></expr></argument>, <argument pos:start="27:54" pos:end="27:71"><expr pos:start="27:54" pos:end="27:71"><name pos:start="27:54" pos:end="27:71"><name pos:start="27:54" pos:end="27:54">s</name><operator pos:start="27:55" pos:end="27:56">-&gt;</operator><name pos:start="27:57" pos:end="27:71">free_in_buffers</name></name></expr></argument>, <argument pos:start="27:74" pos:end="27:74"><expr pos:start="27:74" pos:end="27:74"><literal type="number" pos:start="27:74" pos:end="27:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:127"><expr pos:start="31:9" pos:end="31:126"><name pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:14">buffer</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:26">nFilledLen</name></name> <operator pos:start="31:28" pos:end="31:28">=</operator> <call pos:start="31:30" pos:end="31:126"><name pos:start="31:30" pos:end="31:49">av_image_fill_arrays</name><argument_list pos:start="31:50" pos:end="31:126">(<argument pos:start="31:51" pos:end="31:53"><expr pos:start="31:51" pos:end="31:53"><name pos:start="31:51" pos:end="31:53">dst</name></expr></argument>, <argument pos:start="31:56" pos:end="31:63"><expr pos:start="31:56" pos:end="31:63"><name pos:start="31:56" pos:end="31:63">linesize</name></expr></argument>, <argument pos:start="31:66" pos:end="31:80"><expr pos:start="31:66" pos:end="31:80"><name pos:start="31:66" pos:end="31:80"><name pos:start="31:66" pos:end="31:71">buffer</name><operator pos:start="31:72" pos:end="31:73">-&gt;</operator><name pos:start="31:74" pos:end="31:80">pBuffer</name></name></expr></argument>, <argument pos:start="31:83" pos:end="31:96"><expr pos:start="31:83" pos:end="31:96"><name pos:start="31:83" pos:end="31:96"><name pos:start="31:83" pos:end="31:87">avctx</name><operator pos:start="31:88" pos:end="31:89">-&gt;</operator><name pos:start="31:90" pos:end="31:96">pix_fmt</name></name></expr></argument>, <argument pos:start="31:99" pos:end="31:107"><expr pos:start="31:99" pos:end="31:107"><name pos:start="31:99" pos:end="31:107"><name pos:start="31:99" pos:end="31:99">s</name><operator pos:start="31:100" pos:end="31:101">-&gt;</operator><name pos:start="31:102" pos:end="31:107">stride</name></name></expr></argument>, <argument pos:start="31:110" pos:end="31:122"><expr pos:start="31:110" pos:end="31:122"><name pos:start="31:110" pos:end="31:122"><name pos:start="31:110" pos:end="31:110">s</name><operator pos:start="31:111" pos:end="31:112">-&gt;</operator><name pos:start="31:113" pos:end="31:122">plane_size</name></name></expr></argument>, <argument pos:start="31:125" pos:end="31:125"><expr pos:start="31:125" pos:end="31:125"><literal type="number" pos:start="31:125" pos:end="31:125">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="35:9" pos:end="119:9"><if pos:start="35:9" pos:end="115:9">if <condition pos:start="35:12" pos:end="35:30">(<expr pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:29">input_zerocopy</name></name></expr>)</condition> <block pos:start="35:32" pos:end="115:9">{<block_content pos:start="37:13" pos:end="113:13">

            <decl_stmt pos:start="37:13" pos:end="37:39"><decl pos:start="37:13" pos:end="37:38"><type pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:19">uint8_t</name> <modifier pos:start="37:21" pos:end="37:21">*</modifier></type><name pos:start="37:22" pos:end="37:27"><name pos:start="37:22" pos:end="37:24">src</name><index pos:start="37:25" pos:end="37:27">[<expr pos:start="37:26" pos:end="37:26"><literal type="number" pos:start="37:26" pos:end="37:26">4</literal></expr>]</index></name> <init pos:start="37:29" pos:end="37:38">= <expr pos:start="37:31" pos:end="37:38"><block pos:start="37:31" pos:end="37:38">{ <expr pos:start="37:33" pos:end="37:36"><name pos:start="37:33" pos:end="37:36">NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="39:13" pos:end="39:32"><decl pos:start="39:13" pos:end="39:31"><type pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">int</name></type> <name pos:start="39:17" pos:end="39:31"><name pos:start="39:17" pos:end="39:28">src_linesize</name><index pos:start="39:29" pos:end="39:31">[<expr pos:start="39:30" pos:end="39:30"><literal type="number" pos:start="39:30" pos:end="39:30">4</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:113"><expr pos:start="41:13" pos:end="41:112"><call pos:start="41:13" pos:end="41:112"><name pos:start="41:13" pos:end="41:32">av_image_fill_arrays</name><argument_list pos:start="41:33" pos:end="41:112">(<argument pos:start="41:34" pos:end="41:36"><expr pos:start="41:34" pos:end="41:36"><name pos:start="41:34" pos:end="41:36">src</name></expr></argument>, <argument pos:start="41:39" pos:end="41:50"><expr pos:start="41:39" pos:end="41:50"><name pos:start="41:39" pos:end="41:50">src_linesize</name></expr></argument>, <argument pos:start="41:53" pos:end="41:66"><expr pos:start="41:53" pos:end="41:66"><name pos:start="41:53" pos:end="41:66"><name pos:start="41:53" pos:end="41:57">frame</name><operator pos:start="41:58" pos:end="41:59">-&gt;</operator><name pos:start="41:60" pos:end="41:63">data</name><index pos:start="41:64" pos:end="41:66">[<expr pos:start="41:65" pos:end="41:65"><literal type="number" pos:start="41:65" pos:end="41:65">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="41:69" pos:end="41:82"><expr pos:start="41:69" pos:end="41:82"><name pos:start="41:69" pos:end="41:82"><name pos:start="41:69" pos:end="41:73">avctx</name><operator pos:start="41:74" pos:end="41:75">-&gt;</operator><name pos:start="41:76" pos:end="41:82">pix_fmt</name></name></expr></argument>, <argument pos:start="41:85" pos:end="41:93"><expr pos:start="41:85" pos:end="41:93"><name pos:start="41:85" pos:end="41:93"><name pos:start="41:85" pos:end="41:85">s</name><operator pos:start="41:86" pos:end="41:87">-&gt;</operator><name pos:start="41:88" pos:end="41:93">stride</name></name></expr></argument>, <argument pos:start="41:96" pos:end="41:108"><expr pos:start="41:96" pos:end="41:108"><name pos:start="41:96" pos:end="41:108"><name pos:start="41:96" pos:end="41:96">s</name><operator pos:start="41:97" pos:end="41:98">-&gt;</operator><name pos:start="41:99" pos:end="41:108">plane_size</name></name></expr></argument>, <argument pos:start="41:111" pos:end="41:111"><expr pos:start="41:111" pos:end="41:111"><literal type="number" pos:start="41:111" pos:end="41:111">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="113:13"><if pos:start="43:13" pos:end="81:13">if <condition pos:start="43:16" pos:end="51:41">(<expr pos:start="43:17" pos:end="51:40"><name pos:start="43:17" pos:end="43:34"><name pos:start="43:17" pos:end="43:21">frame</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:31">linesize</name><index pos:start="43:32" pos:end="43:34">[<expr pos:start="43:33" pos:end="43:33"><literal type="number" pos:start="43:33" pos:end="43:33">0</literal></expr>]</index></name> <operator pos:start="43:36" pos:end="43:37">==</operator> <name pos:start="43:39" pos:end="43:53"><name pos:start="43:39" pos:end="43:50">src_linesize</name><index pos:start="43:51" pos:end="43:53">[<expr pos:start="43:52" pos:end="43:52"><literal type="number" pos:start="43:52" pos:end="43:52">0</literal></expr>]</index></name> <operator pos:start="43:55" pos:end="43:56">&amp;&amp;</operator>

                <name pos:start="45:17" pos:end="45:34"><name pos:start="45:17" pos:end="45:21">frame</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:31">linesize</name><index pos:start="45:32" pos:end="45:34">[<expr pos:start="45:33" pos:end="45:33"><literal type="number" pos:start="45:33" pos:end="45:33">1</literal></expr>]</index></name> <operator pos:start="45:36" pos:end="45:37">==</operator> <name pos:start="45:39" pos:end="45:53"><name pos:start="45:39" pos:end="45:50">src_linesize</name><index pos:start="45:51" pos:end="45:53">[<expr pos:start="45:52" pos:end="45:52"><literal type="number" pos:start="45:52" pos:end="45:52">1</literal></expr>]</index></name> <operator pos:start="45:55" pos:end="45:56">&amp;&amp;</operator>

                <name pos:start="47:17" pos:end="47:34"><name pos:start="47:17" pos:end="47:21">frame</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:31">linesize</name><index pos:start="47:32" pos:end="47:34">[<expr pos:start="47:33" pos:end="47:33"><literal type="number" pos:start="47:33" pos:end="47:33">2</literal></expr>]</index></name> <operator pos:start="47:36" pos:end="47:37">==</operator> <name pos:start="47:39" pos:end="47:53"><name pos:start="47:39" pos:end="47:50">src_linesize</name><index pos:start="47:51" pos:end="47:53">[<expr pos:start="47:52" pos:end="47:52"><literal type="number" pos:start="47:52" pos:end="47:52">2</literal></expr>]</index></name> <operator pos:start="47:55" pos:end="47:56">&amp;&amp;</operator>

                <name pos:start="49:17" pos:end="49:30"><name pos:start="49:17" pos:end="49:21">frame</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:27">data</name><index pos:start="49:28" pos:end="49:30">[<expr pos:start="49:29" pos:end="49:29"><literal type="number" pos:start="49:29" pos:end="49:29">1</literal></expr>]</index></name> <operator pos:start="49:32" pos:end="49:33">==</operator> <name pos:start="49:35" pos:end="49:40"><name pos:start="49:35" pos:end="49:37">src</name><index pos:start="49:38" pos:end="49:40">[<expr pos:start="49:39" pos:end="49:39"><literal type="number" pos:start="49:39" pos:end="49:39">1</literal></expr>]</index></name> <operator pos:start="49:42" pos:end="49:43">&amp;&amp;</operator>

                <name pos:start="51:17" pos:end="51:30"><name pos:start="51:17" pos:end="51:21">frame</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:27">data</name><index pos:start="51:28" pos:end="51:30">[<expr pos:start="51:29" pos:end="51:29"><literal type="number" pos:start="51:29" pos:end="51:29">2</literal></expr>]</index></name> <operator pos:start="51:32" pos:end="51:33">==</operator> <name pos:start="51:35" pos:end="51:40"><name pos:start="51:35" pos:end="51:37">src</name><index pos:start="51:38" pos:end="51:40">[<expr pos:start="51:39" pos:end="51:39"><literal type="number" pos:start="51:39" pos:end="51:39">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="51:43" pos:end="81:13">{<block_content pos:start="59:17" pos:end="79:17">

                <comment type="line" pos:start="53:17" pos:end="53:85">// If the input frame happens to have all planes stored contiguously,</comment>

                <comment type="line" pos:start="55:17" pos:end="55:79">// with the right strides, just clone the frame and set the OMX</comment>

                <comment type="line" pos:start="57:17" pos:end="57:47">// buffer header to point to it</comment>

                <decl_stmt pos:start="59:17" pos:end="59:55"><decl pos:start="59:17" pos:end="59:54"><type pos:start="59:17" pos:end="59:25"><name pos:start="59:17" pos:end="59:23">AVFrame</name> <modifier pos:start="59:25" pos:end="59:25">*</modifier></type><name pos:start="59:26" pos:end="59:30">local</name> <init pos:start="59:32" pos:end="59:54">= <expr pos:start="59:34" pos:end="59:54"><call pos:start="59:34" pos:end="59:54"><name pos:start="59:34" pos:end="59:47">av_frame_clone</name><argument_list pos:start="59:48" pos:end="59:54">(<argument pos:start="59:49" pos:end="59:53"><expr pos:start="59:49" pos:end="59:53"><name pos:start="59:49" pos:end="59:53">frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="61:17" pos:end="79:17"><if pos:start="61:17" pos:end="69:17">if <condition pos:start="61:20" pos:end="61:27">(<expr pos:start="61:21" pos:end="61:26"><operator pos:start="61:21" pos:end="61:21">!</operator><name pos:start="61:22" pos:end="61:26">local</name></expr>)</condition> <block pos:start="61:29" pos:end="69:17">{<block_content pos:start="65:21" pos:end="67:43">

                    <comment type="line" pos:start="63:21" pos:end="63:70">// Return the buffer to the queue so it's not lost</comment>

                    <expr_stmt pos:start="65:21" pos:end="65:120"><expr pos:start="65:21" pos:end="65:119"><call pos:start="65:21" pos:end="65:119"><name pos:start="65:21" pos:end="65:33">append_buffer</name><argument_list pos:start="65:34" pos:end="65:119">(<argument pos:start="65:35" pos:end="65:49"><expr pos:start="65:35" pos:end="65:49"><operator pos:start="65:35" pos:end="65:35">&amp;</operator><name pos:start="65:36" pos:end="65:49"><name pos:start="65:36" pos:end="65:36">s</name><operator pos:start="65:37" pos:end="65:38">-&gt;</operator><name pos:start="65:39" pos:end="65:49">input_mutex</name></name></expr></argument>, <argument pos:start="65:52" pos:end="65:65"><expr pos:start="65:52" pos:end="65:65"><operator pos:start="65:52" pos:end="65:52">&amp;</operator><name pos:start="65:53" pos:end="65:65"><name pos:start="65:53" pos:end="65:53">s</name><operator pos:start="65:54" pos:end="65:55">-&gt;</operator><name pos:start="65:56" pos:end="65:65">input_cond</name></name></expr></argument>, <argument pos:start="65:68" pos:end="65:90"><expr pos:start="65:68" pos:end="65:90"><operator pos:start="65:68" pos:end="65:68">&amp;</operator><name pos:start="65:69" pos:end="65:90"><name pos:start="65:69" pos:end="65:69">s</name><operator pos:start="65:70" pos:end="65:71">-&gt;</operator><name pos:start="65:72" pos:end="65:90">num_free_in_buffers</name></name></expr></argument>, <argument pos:start="65:93" pos:end="65:110"><expr pos:start="65:93" pos:end="65:110"><name pos:start="65:93" pos:end="65:110"><name pos:start="65:93" pos:end="65:93">s</name><operator pos:start="65:94" pos:end="65:95">-&gt;</operator><name pos:start="65:96" pos:end="65:110">free_in_buffers</name></name></expr></argument>, <argument pos:start="65:113" pos:end="65:118"><expr pos:start="65:113" pos:end="65:118"><name pos:start="65:113" pos:end="65:118">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="67:21" pos:end="67:43">return <expr pos:start="67:28" pos:end="67:42"><call pos:start="67:28" pos:end="67:42"><name pos:start="67:28" pos:end="67:34">AVERROR</name><argument_list pos:start="67:35" pos:end="67:42">(<argument pos:start="67:36" pos:end="67:41"><expr pos:start="67:36" pos:end="67:41"><name pos:start="67:36" pos:end="67:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if> <else pos:start="69:19" pos:end="79:17">else <block pos:start="69:24" pos:end="79:17">{<block_content pos:start="71:21" pos:end="77:34">

                    <expr_stmt pos:start="71:21" pos:end="71:48"><expr pos:start="71:21" pos:end="71:47"><name pos:start="71:21" pos:end="71:39"><name pos:start="71:21" pos:end="71:26">buffer</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:39">pAppPrivate</name></name> <operator pos:start="71:41" pos:end="71:41">=</operator> <name pos:start="71:43" pos:end="71:47">local</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="73:21" pos:end="73:54"><expr pos:start="73:21" pos:end="73:53"><name pos:start="73:21" pos:end="73:46"><name pos:start="73:21" pos:end="73:26">buffer</name><operator pos:start="73:27" pos:end="73:28">-&gt;</operator><name pos:start="73:29" pos:end="73:46">pOutputPortPrivate</name></name> <operator pos:start="73:48" pos:end="73:48">=</operator> <name pos:start="73:50" pos:end="73:53">NULL</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="75:21" pos:end="75:53"><expr pos:start="75:21" pos:end="75:52"><name pos:start="75:21" pos:end="75:35"><name pos:start="75:21" pos:end="75:26">buffer</name><operator pos:start="75:27" pos:end="75:28">-&gt;</operator><name pos:start="75:29" pos:end="75:35">pBuffer</name></name> <operator pos:start="75:37" pos:end="75:37">=</operator> <name pos:start="75:39" pos:end="75:52"><name pos:start="75:39" pos:end="75:43">local</name><operator pos:start="75:44" pos:end="75:45">-&gt;</operator><name pos:start="75:46" pos:end="75:49">data</name><index pos:start="75:50" pos:end="75:52">[<expr pos:start="75:51" pos:end="75:51"><literal type="number" pos:start="75:51" pos:end="75:51">0</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="77:21" pos:end="77:34"><expr pos:start="77:21" pos:end="77:33"><name pos:start="77:21" pos:end="77:29">need_copy</name> <operator pos:start="77:31" pos:end="77:31">=</operator> <literal type="number" pos:start="77:33" pos:end="77:33">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="81:15" pos:end="113:13">else <block pos:start="81:20" pos:end="113:13">{<block_content pos:start="87:17" pos:end="111:17">

                <comment type="line" pos:start="83:17" pos:end="83:74">// If not, we need to allocate a new buffer with the right</comment>

                <comment type="line" pos:start="85:17" pos:end="85:57">// size and copy the input frame into it.</comment>

                <decl_stmt pos:start="87:17" pos:end="87:112"><decl pos:start="87:17" pos:end="87:111"><type pos:start="87:17" pos:end="87:25"><name pos:start="87:17" pos:end="87:23">uint8_t</name> <modifier pos:start="87:25" pos:end="87:25">*</modifier></type><name pos:start="87:26" pos:end="87:28">buf</name> <init pos:start="87:30" pos:end="87:111">= <expr pos:start="87:32" pos:end="87:111"><call pos:start="87:32" pos:end="87:111"><name pos:start="87:32" pos:end="87:40">av_malloc</name><argument_list pos:start="87:41" pos:end="87:111">(<argument pos:start="87:42" pos:end="87:110"><expr pos:start="87:42" pos:end="87:110"><call pos:start="87:42" pos:end="87:110"><name pos:start="87:42" pos:end="87:65">av_image_get_buffer_size</name><argument_list pos:start="87:66" pos:end="87:110">(<argument pos:start="87:67" pos:end="87:80"><expr pos:start="87:67" pos:end="87:80"><name pos:start="87:67" pos:end="87:80"><name pos:start="87:67" pos:end="87:71">avctx</name><operator pos:start="87:72" pos:end="87:73">-&gt;</operator><name pos:start="87:74" pos:end="87:80">pix_fmt</name></name></expr></argument>, <argument pos:start="87:83" pos:end="87:91"><expr pos:start="87:83" pos:end="87:91"><name pos:start="87:83" pos:end="87:91"><name pos:start="87:83" pos:end="87:83">s</name><operator pos:start="87:84" pos:end="87:85">-&gt;</operator><name pos:start="87:86" pos:end="87:91">stride</name></name></expr></argument>, <argument pos:start="87:94" pos:end="87:106"><expr pos:start="87:94" pos:end="87:106"><name pos:start="87:94" pos:end="87:106"><name pos:start="87:94" pos:end="87:94">s</name><operator pos:start="87:95" pos:end="87:96">-&gt;</operator><name pos:start="87:97" pos:end="87:106">plane_size</name></name></expr></argument>, <argument pos:start="87:109" pos:end="87:109"><expr pos:start="87:109" pos:end="87:109"><literal type="number" pos:start="87:109" pos:end="87:109">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="89:17" pos:end="111:17"><if pos:start="89:17" pos:end="97:17">if <condition pos:start="89:20" pos:end="89:25">(<expr pos:start="89:21" pos:end="89:24"><operator pos:start="89:21" pos:end="89:21">!</operator><name pos:start="89:22" pos:end="89:24">buf</name></expr>)</condition> <block pos:start="89:27" pos:end="97:17">{<block_content pos:start="93:21" pos:end="95:43">

                    <comment type="line" pos:start="91:21" pos:end="91:70">// Return the buffer to the queue so it's not lost</comment>

                    <expr_stmt pos:start="93:21" pos:end="93:120"><expr pos:start="93:21" pos:end="93:119"><call pos:start="93:21" pos:end="93:119"><name pos:start="93:21" pos:end="93:33">append_buffer</name><argument_list pos:start="93:34" pos:end="93:119">(<argument pos:start="93:35" pos:end="93:49"><expr pos:start="93:35" pos:end="93:49"><operator pos:start="93:35" pos:end="93:35">&amp;</operator><name pos:start="93:36" pos:end="93:49"><name pos:start="93:36" pos:end="93:36">s</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:49">input_mutex</name></name></expr></argument>, <argument pos:start="93:52" pos:end="93:65"><expr pos:start="93:52" pos:end="93:65"><operator pos:start="93:52" pos:end="93:52">&amp;</operator><name pos:start="93:53" pos:end="93:65"><name pos:start="93:53" pos:end="93:53">s</name><operator pos:start="93:54" pos:end="93:55">-&gt;</operator><name pos:start="93:56" pos:end="93:65">input_cond</name></name></expr></argument>, <argument pos:start="93:68" pos:end="93:90"><expr pos:start="93:68" pos:end="93:90"><operator pos:start="93:68" pos:end="93:68">&amp;</operator><name pos:start="93:69" pos:end="93:90"><name pos:start="93:69" pos:end="93:69">s</name><operator pos:start="93:70" pos:end="93:71">-&gt;</operator><name pos:start="93:72" pos:end="93:90">num_free_in_buffers</name></name></expr></argument>, <argument pos:start="93:93" pos:end="93:110"><expr pos:start="93:93" pos:end="93:110"><name pos:start="93:93" pos:end="93:110"><name pos:start="93:93" pos:end="93:93">s</name><operator pos:start="93:94" pos:end="93:95">-&gt;</operator><name pos:start="93:96" pos:end="93:110">free_in_buffers</name></name></expr></argument>, <argument pos:start="93:113" pos:end="93:118"><expr pos:start="93:113" pos:end="93:118"><name pos:start="93:113" pos:end="93:118">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="95:21" pos:end="95:43">return <expr pos:start="95:28" pos:end="95:42"><call pos:start="95:28" pos:end="95:42"><name pos:start="95:28" pos:end="95:34">AVERROR</name><argument_list pos:start="95:35" pos:end="95:42">(<argument pos:start="95:36" pos:end="95:41"><expr pos:start="95:36" pos:end="95:41"><name pos:start="95:36" pos:end="95:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if> <else pos:start="97:19" pos:end="111:17">else <block pos:start="97:24" pos:end="111:17">{<block_content pos:start="99:21" pos:end="109:139">

                    <expr_stmt pos:start="99:21" pos:end="99:46"><expr pos:start="99:21" pos:end="99:45"><name pos:start="99:21" pos:end="99:39"><name pos:start="99:21" pos:end="99:26">buffer</name><operator pos:start="99:27" pos:end="99:28">-&gt;</operator><name pos:start="99:29" pos:end="99:39">pAppPrivate</name></name> <operator pos:start="99:41" pos:end="99:41">=</operator> <name pos:start="99:43" pos:end="99:45">buf</name></expr>;</expr_stmt>

                    <comment type="line" pos:start="101:21" pos:end="101:86">// Mark that pAppPrivate is an av_malloc'ed buffer, not an AVFrame</comment>

                    <expr_stmt pos:start="103:21" pos:end="103:59"><expr pos:start="103:21" pos:end="103:58"><name pos:start="103:21" pos:end="103:46"><name pos:start="103:21" pos:end="103:26">buffer</name><operator pos:start="103:27" pos:end="103:28">-&gt;</operator><name pos:start="103:29" pos:end="103:46">pOutputPortPrivate</name></name> <operator pos:start="103:48" pos:end="103:48">=</operator> <operator pos:start="103:50" pos:end="103:50">(</operator><name pos:start="103:51" pos:end="103:54">void</name><operator pos:start="103:55" pos:end="103:55">*</operator><operator pos:start="103:56" pos:end="103:56">)</operator> <literal type="number" pos:start="103:58" pos:end="103:58">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:42"><expr pos:start="105:21" pos:end="105:41"><name pos:start="105:21" pos:end="105:35"><name pos:start="105:21" pos:end="105:26">buffer</name><operator pos:start="105:27" pos:end="105:28">-&gt;</operator><name pos:start="105:29" pos:end="105:35">pBuffer</name></name> <operator pos:start="105:37" pos:end="105:37">=</operator> <name pos:start="105:39" pos:end="105:41">buf</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="107:21" pos:end="107:34"><expr pos:start="107:21" pos:end="107:33"><name pos:start="107:21" pos:end="107:29">need_copy</name> <operator pos:start="107:31" pos:end="107:31">=</operator> <literal type="number" pos:start="107:33" pos:end="107:33">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:139"><expr pos:start="109:21" pos:end="109:138"><name pos:start="109:21" pos:end="109:38"><name pos:start="109:21" pos:end="109:26">buffer</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:38">nFilledLen</name></name> <operator pos:start="109:40" pos:end="109:40">=</operator> <call pos:start="109:42" pos:end="109:138"><name pos:start="109:42" pos:end="109:61">av_image_fill_arrays</name><argument_list pos:start="109:62" pos:end="109:138">(<argument pos:start="109:63" pos:end="109:65"><expr pos:start="109:63" pos:end="109:65"><name pos:start="109:63" pos:end="109:65">dst</name></expr></argument>, <argument pos:start="109:68" pos:end="109:75"><expr pos:start="109:68" pos:end="109:75"><name pos:start="109:68" pos:end="109:75">linesize</name></expr></argument>, <argument pos:start="109:78" pos:end="109:92"><expr pos:start="109:78" pos:end="109:92"><name pos:start="109:78" pos:end="109:92"><name pos:start="109:78" pos:end="109:83">buffer</name><operator pos:start="109:84" pos:end="109:85">-&gt;</operator><name pos:start="109:86" pos:end="109:92">pBuffer</name></name></expr></argument>, <argument pos:start="109:95" pos:end="109:108"><expr pos:start="109:95" pos:end="109:108"><name pos:start="109:95" pos:end="109:108"><name pos:start="109:95" pos:end="109:99">avctx</name><operator pos:start="109:100" pos:end="109:101">-&gt;</operator><name pos:start="109:102" pos:end="109:108">pix_fmt</name></name></expr></argument>, <argument pos:start="109:111" pos:end="109:119"><expr pos:start="109:111" pos:end="109:119"><name pos:start="109:111" pos:end="109:119"><name pos:start="109:111" pos:end="109:111">s</name><operator pos:start="109:112" pos:end="109:113">-&gt;</operator><name pos:start="109:114" pos:end="109:119">stride</name></name></expr></argument>, <argument pos:start="109:122" pos:end="109:134"><expr pos:start="109:122" pos:end="109:134"><name pos:start="109:122" pos:end="109:134"><name pos:start="109:122" pos:end="109:122">s</name><operator pos:start="109:123" pos:end="109:124">-&gt;</operator><name pos:start="109:125" pos:end="109:134">plane_size</name></name></expr></argument>, <argument pos:start="109:137" pos:end="109:137"><expr pos:start="109:137" pos:end="109:137"><literal type="number" pos:start="109:137" pos:end="109:137">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="119:9">else <block pos:start="115:16" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:26">

            <expr_stmt pos:start="117:13" pos:end="117:26"><expr pos:start="117:13" pos:end="117:25"><name pos:start="117:13" pos:end="117:21">need_copy</name> <operator pos:start="117:23" pos:end="117:23">=</operator> <literal type="number" pos:start="117:25" pos:end="117:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="121:9" pos:end="123:134"><if pos:start="121:9" pos:end="123:134">if <condition pos:start="121:12" pos:end="121:22">(<expr pos:start="121:13" pos:end="121:21"><name pos:start="121:13" pos:end="121:21">need_copy</name></expr>)</condition><block type="pseudo" pos:start="123:13" pos:end="123:134"><block_content pos:start="123:13" pos:end="123:134">

            <expr_stmt pos:start="123:13" pos:end="123:134"><expr pos:start="123:13" pos:end="123:133"><call pos:start="123:13" pos:end="123:133"><name pos:start="123:13" pos:end="123:25">av_image_copy</name><argument_list pos:start="123:26" pos:end="123:133">(<argument pos:start="123:27" pos:end="123:29"><expr pos:start="123:27" pos:end="123:29"><name pos:start="123:27" pos:end="123:29">dst</name></expr></argument>, <argument pos:start="123:32" pos:end="123:39"><expr pos:start="123:32" pos:end="123:39"><name pos:start="123:32" pos:end="123:39">linesize</name></expr></argument>, <argument pos:start="123:42" pos:end="123:70"><expr pos:start="123:42" pos:end="123:70"><operator pos:start="123:42" pos:end="123:42">(</operator><specifier pos:start="123:43" pos:end="123:47">const</specifier> <name pos:start="123:49" pos:end="123:55">uint8_t</name><operator pos:start="123:56" pos:end="123:56">*</operator><operator pos:start="123:57" pos:end="123:57">*</operator><operator pos:start="123:58" pos:end="123:58">)</operator> <name pos:start="123:60" pos:end="123:70"><name pos:start="123:60" pos:end="123:64">frame</name><operator pos:start="123:65" pos:end="123:66">-&gt;</operator><name pos:start="123:67" pos:end="123:70">data</name></name></expr></argument>, <argument pos:start="123:73" pos:end="123:87"><expr pos:start="123:73" pos:end="123:87"><name pos:start="123:73" pos:end="123:87"><name pos:start="123:73" pos:end="123:77">frame</name><operator pos:start="123:78" pos:end="123:79">-&gt;</operator><name pos:start="123:80" pos:end="123:87">linesize</name></name></expr></argument>, <argument pos:start="123:90" pos:end="123:103"><expr pos:start="123:90" pos:end="123:103"><name pos:start="123:90" pos:end="123:103"><name pos:start="123:90" pos:end="123:94">avctx</name><operator pos:start="123:95" pos:end="123:96">-&gt;</operator><name pos:start="123:97" pos:end="123:103">pix_fmt</name></name></expr></argument>, <argument pos:start="123:106" pos:end="123:117"><expr pos:start="123:106" pos:end="123:117"><name pos:start="123:106" pos:end="123:117"><name pos:start="123:106" pos:end="123:110">avctx</name><operator pos:start="123:111" pos:end="123:112">-&gt;</operator><name pos:start="123:113" pos:end="123:117">width</name></name></expr></argument>, <argument pos:start="123:120" pos:end="123:132"><expr pos:start="123:120" pos:end="123:132"><name pos:start="123:120" pos:end="123:132"><name pos:start="123:120" pos:end="123:124">avctx</name><operator pos:start="123:125" pos:end="123:126">-&gt;</operator><name pos:start="123:127" pos:end="123:132">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:51"><expr pos:start="125:9" pos:end="125:50"><name pos:start="125:9" pos:end="125:22"><name pos:start="125:9" pos:end="125:14">buffer</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:22">nFlags</name></name> <operator pos:start="125:24" pos:end="125:24">=</operator> <name pos:start="125:26" pos:end="125:50">OMX_BUFFERFLAG_ENDOFFRAME</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:28"><expr pos:start="127:9" pos:end="127:27"><name pos:start="127:9" pos:end="127:23"><name pos:start="127:9" pos:end="127:14">buffer</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:23">nOffset</name></name> <operator pos:start="127:25" pos:end="127:25">=</operator> <literal type="number" pos:start="127:27" pos:end="127:27">0</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="129:9" pos:end="129:75">// Convert the timestamps to microseconds; some encoders can ignore</comment>

        <comment type="line" pos:start="131:9" pos:end="131:71">// the framerate and do VFR bit allocation based on timestamps.</comment>

        <expr_stmt pos:start="133:9" pos:end="133:102"><expr pos:start="133:9" pos:end="133:101"><name pos:start="133:9" pos:end="133:26"><name pos:start="133:9" pos:end="133:14">buffer</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:26">nTimeStamp</name></name> <operator pos:start="133:28" pos:end="133:28">=</operator> <call pos:start="133:30" pos:end="133:101"><name pos:start="133:30" pos:end="133:41">to_omx_ticks</name><argument_list pos:start="133:42" pos:end="133:101">(<argument pos:start="133:43" pos:end="133:100"><expr pos:start="133:43" pos:end="133:100"><call pos:start="133:43" pos:end="133:100"><name pos:start="133:43" pos:end="133:54">av_rescale_q</name><argument_list pos:start="133:55" pos:end="133:100">(<argument pos:start="133:56" pos:end="133:65"><expr pos:start="133:56" pos:end="133:65"><name pos:start="133:56" pos:end="133:65"><name pos:start="133:56" pos:end="133:60">frame</name><operator pos:start="133:61" pos:end="133:62">-&gt;</operator><name pos:start="133:63" pos:end="133:65">pts</name></name></expr></argument>, <argument pos:start="133:68" pos:end="133:83"><expr pos:start="133:68" pos:end="133:83"><name pos:start="133:68" pos:end="133:83"><name pos:start="133:68" pos:end="133:72">avctx</name><operator pos:start="133:73" pos:end="133:74">-&gt;</operator><name pos:start="133:75" pos:end="133:83">time_base</name></name></expr></argument>, <argument pos:start="133:86" pos:end="133:99"><expr pos:start="133:86" pos:end="133:99"><name pos:start="133:86" pos:end="133:99">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:53"><expr pos:start="135:9" pos:end="135:52"><name pos:start="135:9" pos:end="135:11">err</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <call pos:start="135:15" pos:end="135:52"><name pos:start="135:15" pos:end="135:33">OMX_EmptyThisBuffer</name><argument_list pos:start="135:34" pos:end="135:52">(<argument pos:start="135:35" pos:end="135:43"><expr pos:start="135:35" pos:end="135:43"><name pos:start="135:35" pos:end="135:43"><name pos:start="135:35" pos:end="135:35">s</name><operator pos:start="135:36" pos:end="135:37">-&gt;</operator><name pos:start="135:38" pos:end="135:43">handle</name></name></expr></argument>, <argument pos:start="135:46" pos:end="135:51"><expr pos:start="135:46" pos:end="135:51"><name pos:start="135:46" pos:end="135:51">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="145:9"><if pos:start="137:9" pos:end="145:9">if <condition pos:start="137:12" pos:end="137:33">(<expr pos:start="137:13" pos:end="137:32"><name pos:start="137:13" pos:end="137:15">err</name> <operator pos:start="137:17" pos:end="137:18">!=</operator> <name pos:start="137:20" pos:end="137:32">OMX_ErrorNone</name></expr>)</condition> <block pos:start="137:35" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:35">

            <expr_stmt pos:start="139:13" pos:end="139:112"><expr pos:start="139:13" pos:end="139:111"><call pos:start="139:13" pos:end="139:111"><name pos:start="139:13" pos:end="139:25">append_buffer</name><argument_list pos:start="139:26" pos:end="139:111">(<argument pos:start="139:27" pos:end="139:41"><expr pos:start="139:27" pos:end="139:41"><operator pos:start="139:27" pos:end="139:27">&amp;</operator><name pos:start="139:28" pos:end="139:41"><name pos:start="139:28" pos:end="139:28">s</name><operator pos:start="139:29" pos:end="139:30">-&gt;</operator><name pos:start="139:31" pos:end="139:41">input_mutex</name></name></expr></argument>, <argument pos:start="139:44" pos:end="139:57"><expr pos:start="139:44" pos:end="139:57"><operator pos:start="139:44" pos:end="139:44">&amp;</operator><name pos:start="139:45" pos:end="139:57"><name pos:start="139:45" pos:end="139:45">s</name><operator pos:start="139:46" pos:end="139:47">-&gt;</operator><name pos:start="139:48" pos:end="139:57">input_cond</name></name></expr></argument>, <argument pos:start="139:60" pos:end="139:82"><expr pos:start="139:60" pos:end="139:82"><operator pos:start="139:60" pos:end="139:60">&amp;</operator><name pos:start="139:61" pos:end="139:82"><name pos:start="139:61" pos:end="139:61">s</name><operator pos:start="139:62" pos:end="139:63">-&gt;</operator><name pos:start="139:64" pos:end="139:82">num_free_in_buffers</name></name></expr></argument>, <argument pos:start="139:85" pos:end="139:102"><expr pos:start="139:85" pos:end="139:102"><name pos:start="139:85" pos:end="139:102"><name pos:start="139:85" pos:end="139:85">s</name><operator pos:start="139:86" pos:end="139:87">-&gt;</operator><name pos:start="139:88" pos:end="139:102">free_in_buffers</name></name></expr></argument>, <argument pos:start="139:105" pos:end="139:110"><expr pos:start="139:105" pos:end="139:110"><name pos:start="139:105" pos:end="139:110">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:81"><expr pos:start="141:13" pos:end="141:80"><call pos:start="141:13" pos:end="141:80"><name pos:start="141:13" pos:end="141:18">av_log</name><argument_list pos:start="141:19" pos:end="141:80">(<argument pos:start="141:20" pos:end="141:24"><expr pos:start="141:20" pos:end="141:24"><name pos:start="141:20" pos:end="141:24">avctx</name></expr></argument>, <argument pos:start="141:27" pos:end="141:38"><expr pos:start="141:27" pos:end="141:38"><name pos:start="141:27" pos:end="141:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="141:41" pos:end="141:74"><expr pos:start="141:41" pos:end="141:74"><literal type="string" pos:start="141:41" pos:end="141:74">"OMX_EmptyThisBuffer failed: %x\n"</literal></expr></argument>, <argument pos:start="141:77" pos:end="141:79"><expr pos:start="141:77" pos:end="141:79"><name pos:start="141:77" pos:end="141:79">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="143:13" pos:end="143:35">return <expr pos:start="143:20" pos:end="143:34"><name pos:start="143:20" pos:end="143:34">AVERROR_UNKNOWN</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:27"><expr pos:start="147:9" pos:end="147:26"><name pos:start="147:9" pos:end="147:24"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:24">num_in_frames</name></name><operator pos:start="147:25" pos:end="147:26">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="153:5" pos:end="289:5">while <condition pos:start="153:11" pos:end="153:36">(<expr pos:start="153:12" pos:end="153:35"><operator pos:start="153:12" pos:end="153:12">!</operator><operator pos:start="153:13" pos:end="153:13">*</operator><name pos:start="153:14" pos:end="153:23">got_packet</name> <operator pos:start="153:25" pos:end="153:26">&amp;&amp;</operator> <name pos:start="153:28" pos:end="153:30">ret</name> <operator pos:start="153:32" pos:end="153:33">==</operator> <literal type="number" pos:start="153:35" pos:end="153:35">0</literal></expr>)</condition> <block pos:start="153:38" pos:end="289:5">{<block_content pos:start="157:9" pos:end="287:9">

        <comment type="line" pos:start="155:9" pos:end="155:79">// Only wait for output if flushing and not all frames have been output</comment>

        <expr_stmt pos:start="157:9" pos:end="161:76"><expr pos:start="157:9" pos:end="161:75"><name pos:start="157:9" pos:end="157:14">buffer</name> <operator pos:start="157:16" pos:end="157:16">=</operator> <call pos:start="157:18" pos:end="161:75"><name pos:start="157:18" pos:end="157:27">get_buffer</name><argument_list pos:start="157:28" pos:end="161:75">(<argument pos:start="157:29" pos:end="157:44"><expr pos:start="157:29" pos:end="157:44"><operator pos:start="157:29" pos:end="157:29">&amp;</operator><name pos:start="157:30" pos:end="157:44"><name pos:start="157:30" pos:end="157:30">s</name><operator pos:start="157:31" pos:end="157:32">-&gt;</operator><name pos:start="157:33" pos:end="157:44">output_mutex</name></name></expr></argument>, <argument pos:start="157:47" pos:end="157:61"><expr pos:start="157:47" pos:end="157:61"><operator pos:start="157:47" pos:end="157:47">&amp;</operator><name pos:start="157:48" pos:end="157:61"><name pos:start="157:48" pos:end="157:48">s</name><operator pos:start="157:49" pos:end="157:50">-&gt;</operator><name pos:start="157:51" pos:end="157:61">output_cond</name></name></expr></argument>,

                            <argument pos:start="159:29" pos:end="159:52"><expr pos:start="159:29" pos:end="159:52"><operator pos:start="159:29" pos:end="159:29">&amp;</operator><name pos:start="159:30" pos:end="159:52"><name pos:start="159:30" pos:end="159:30">s</name><operator pos:start="159:31" pos:end="159:32">-&gt;</operator><name pos:start="159:33" pos:end="159:52">num_done_out_buffers</name></name></expr></argument>, <argument pos:start="159:55" pos:end="159:73"><expr pos:start="159:55" pos:end="159:73"><name pos:start="159:55" pos:end="159:73"><name pos:start="159:55" pos:end="159:55">s</name><operator pos:start="159:56" pos:end="159:57">-&gt;</operator><name pos:start="159:58" pos:end="159:73">done_out_buffers</name></name></expr></argument>,

                            <argument pos:start="161:29" pos:end="161:74"><expr pos:start="161:29" pos:end="161:74"><operator pos:start="161:29" pos:end="161:29">!</operator><name pos:start="161:30" pos:end="161:34">frame</name> <operator pos:start="161:36" pos:end="161:37">&amp;&amp;</operator> <name pos:start="161:39" pos:end="161:55"><name pos:start="161:39" pos:end="161:39">s</name><operator pos:start="161:40" pos:end="161:41">-&gt;</operator><name pos:start="161:42" pos:end="161:55">num_out_frames</name></name> <operator pos:start="161:57" pos:end="161:57">&lt;</operator> <name pos:start="161:59" pos:end="161:74"><name pos:start="161:59" pos:end="161:59">s</name><operator pos:start="161:60" pos:end="161:61">-&gt;</operator><name pos:start="161:62" pos:end="161:74">num_in_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="163:9" pos:end="165:18"><if pos:start="163:9" pos:end="165:18">if <condition pos:start="163:12" pos:end="163:20">(<expr pos:start="163:13" pos:end="163:19"><operator pos:start="163:13" pos:end="163:13">!</operator><name pos:start="163:14" pos:end="163:19">buffer</name></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:18"><block_content pos:start="165:13" pos:end="165:18">

            <break pos:start="165:13" pos:end="165:18">break;</break></block_content></block></if></if_stmt>



        <if_stmt pos:start="169:9" pos:end="273:9"><if pos:start="169:9" pos:end="185:9">if <condition pos:start="169:12" pos:end="169:102">(<expr pos:start="169:13" pos:end="169:101"><name pos:start="169:13" pos:end="169:26"><name pos:start="169:13" pos:end="169:18">buffer</name><operator pos:start="169:19" pos:end="169:20">-&gt;</operator><name pos:start="169:21" pos:end="169:26">nFlags</name></name> <operator pos:start="169:28" pos:end="169:28">&amp;</operator> <name pos:start="169:30" pos:end="169:55">OMX_BUFFERFLAG_CODECCONFIG</name> <operator pos:start="169:57" pos:end="169:58">&amp;&amp;</operator> <name pos:start="169:60" pos:end="169:71"><name pos:start="169:60" pos:end="169:64">avctx</name><operator pos:start="169:65" pos:end="169:66">-&gt;</operator><name pos:start="169:67" pos:end="169:71">flags</name></name> <operator pos:start="169:73" pos:end="169:73">&amp;</operator> <name pos:start="169:75" pos:end="169:101">AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block pos:start="169:104" pos:end="185:9">{<block_content pos:start="171:13" pos:end="183:94">

            <if_stmt pos:start="171:13" pos:end="177:13"><if pos:start="171:13" pos:end="177:13">if <condition pos:start="171:16" pos:end="171:134">(<expr pos:start="171:17" pos:end="171:133"><operator pos:start="171:17" pos:end="171:17">(</operator><name pos:start="171:18" pos:end="171:20">ret</name> <operator pos:start="171:22" pos:end="171:22">=</operator> <call pos:start="171:24" pos:end="171:128"><name pos:start="171:24" pos:end="171:34">av_reallocp</name><argument_list pos:start="171:35" pos:end="171:128">(<argument pos:start="171:36" pos:end="171:52"><expr pos:start="171:36" pos:end="171:52"><operator pos:start="171:36" pos:end="171:36">&amp;</operator><name pos:start="171:37" pos:end="171:52"><name pos:start="171:37" pos:end="171:41">avctx</name><operator pos:start="171:42" pos:end="171:43">-&gt;</operator><name pos:start="171:44" pos:end="171:52">extradata</name></name></expr></argument>, <argument pos:start="171:55" pos:end="171:127"><expr pos:start="171:55" pos:end="171:127"><name pos:start="171:55" pos:end="171:75"><name pos:start="171:55" pos:end="171:59">avctx</name><operator pos:start="171:60" pos:end="171:61">-&gt;</operator><name pos:start="171:62" pos:end="171:75">extradata_size</name></name> <operator pos:start="171:77" pos:end="171:77">+</operator> <name pos:start="171:79" pos:end="171:96"><name pos:start="171:79" pos:end="171:84">buffer</name><operator pos:start="171:85" pos:end="171:86">-&gt;</operator><name pos:start="171:87" pos:end="171:96">nFilledLen</name></name> <operator pos:start="171:98" pos:end="171:98">+</operator> <name pos:start="171:100" pos:end="171:127">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="171:129" pos:end="171:129">)</operator> <operator pos:start="171:131" pos:end="171:131">&lt;</operator> <literal type="number" pos:start="171:133" pos:end="171:133">0</literal></expr>)</condition> <block pos:start="171:136" pos:end="177:13">{<block_content pos:start="173:17" pos:end="175:25">

                <expr_stmt pos:start="173:17" pos:end="173:42"><expr pos:start="173:17" pos:end="173:41"><name pos:start="173:17" pos:end="173:37"><name pos:start="173:17" pos:end="173:21">avctx</name><operator pos:start="173:22" pos:end="173:23">-&gt;</operator><name pos:start="173:24" pos:end="173:37">extradata_size</name></name> <operator pos:start="173:39" pos:end="173:39">=</operator> <literal type="number" pos:start="173:41" pos:end="173:41">0</literal></expr>;</expr_stmt>

                <goto pos:start="175:17" pos:end="175:25">goto <name pos:start="175:22" pos:end="175:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:116"><expr pos:start="179:13" pos:end="179:115"><call pos:start="179:13" pos:end="179:115"><name pos:start="179:13" pos:end="179:18">memcpy</name><argument_list pos:start="179:19" pos:end="179:115">(<argument pos:start="179:20" pos:end="179:59"><expr pos:start="179:20" pos:end="179:59"><name pos:start="179:20" pos:end="179:35"><name pos:start="179:20" pos:end="179:24">avctx</name><operator pos:start="179:25" pos:end="179:26">-&gt;</operator><name pos:start="179:27" pos:end="179:35">extradata</name></name> <operator pos:start="179:37" pos:end="179:37">+</operator> <name pos:start="179:39" pos:end="179:59"><name pos:start="179:39" pos:end="179:43">avctx</name><operator pos:start="179:44" pos:end="179:45">-&gt;</operator><name pos:start="179:46" pos:end="179:59">extradata_size</name></name></expr></argument>, <argument pos:start="179:62" pos:end="179:94"><expr pos:start="179:62" pos:end="179:94"><name pos:start="179:62" pos:end="179:76"><name pos:start="179:62" pos:end="179:67">buffer</name><operator pos:start="179:68" pos:end="179:69">-&gt;</operator><name pos:start="179:70" pos:end="179:76">pBuffer</name></name> <operator pos:start="179:78" pos:end="179:78">+</operator> <name pos:start="179:80" pos:end="179:94"><name pos:start="179:80" pos:end="179:85">buffer</name><operator pos:start="179:86" pos:end="179:87">-&gt;</operator><name pos:start="179:88" pos:end="179:94">nOffset</name></name></expr></argument>, <argument pos:start="179:97" pos:end="179:114"><expr pos:start="179:97" pos:end="179:114"><name pos:start="179:97" pos:end="179:114"><name pos:start="179:97" pos:end="179:102">buffer</name><operator pos:start="179:103" pos:end="179:104">-&gt;</operator><name pos:start="179:105" pos:end="179:114">nFilledLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:56"><expr pos:start="181:13" pos:end="181:55"><name pos:start="181:13" pos:end="181:33"><name pos:start="181:13" pos:end="181:17">avctx</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:33">extradata_size</name></name> <operator pos:start="181:35" pos:end="181:36">+=</operator> <name pos:start="181:38" pos:end="181:55"><name pos:start="181:38" pos:end="181:43">buffer</name><operator pos:start="181:44" pos:end="181:45">-&gt;</operator><name pos:start="181:46" pos:end="181:55">nFilledLen</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:94"><expr pos:start="183:13" pos:end="183:93"><call pos:start="183:13" pos:end="183:93"><name pos:start="183:13" pos:end="183:18">memset</name><argument_list pos:start="183:19" pos:end="183:93">(<argument pos:start="183:20" pos:end="183:59"><expr pos:start="183:20" pos:end="183:59"><name pos:start="183:20" pos:end="183:35"><name pos:start="183:20" pos:end="183:24">avctx</name><operator pos:start="183:25" pos:end="183:26">-&gt;</operator><name pos:start="183:27" pos:end="183:35">extradata</name></name> <operator pos:start="183:37" pos:end="183:37">+</operator> <name pos:start="183:39" pos:end="183:59"><name pos:start="183:39" pos:end="183:43">avctx</name><operator pos:start="183:44" pos:end="183:45">-&gt;</operator><name pos:start="183:46" pos:end="183:59">extradata_size</name></name></expr></argument>, <argument pos:start="183:62" pos:end="183:62"><expr pos:start="183:62" pos:end="183:62"><literal type="number" pos:start="183:62" pos:end="183:62">0</literal></expr></argument>, <argument pos:start="183:65" pos:end="183:92"><expr pos:start="183:65" pos:end="183:92"><name pos:start="183:65" pos:end="183:92">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="185:11" pos:end="273:9">else <block pos:start="185:16" pos:end="273:9">{<block_content pos:start="187:13" pos:end="271:13">

            <if_stmt pos:start="187:13" pos:end="189:36"><if pos:start="187:13" pos:end="189:36">if <condition pos:start="187:16" pos:end="187:59">(<expr pos:start="187:17" pos:end="187:58"><name pos:start="187:17" pos:end="187:30"><name pos:start="187:17" pos:end="187:22">buffer</name><operator pos:start="187:23" pos:end="187:24">-&gt;</operator><name pos:start="187:25" pos:end="187:30">nFlags</name></name> <operator pos:start="187:32" pos:end="187:32">&amp;</operator> <name pos:start="187:34" pos:end="187:58">OMX_BUFFERFLAG_ENDOFFRAME</name></expr>)</condition><block type="pseudo" pos:start="189:17" pos:end="189:36"><block_content pos:start="189:17" pos:end="189:36">

                <expr_stmt pos:start="189:17" pos:end="189:36"><expr pos:start="189:17" pos:end="189:35"><name pos:start="189:17" pos:end="189:33"><name pos:start="189:17" pos:end="189:17">s</name><operator pos:start="189:18" pos:end="189:19">-&gt;</operator><name pos:start="189:20" pos:end="189:33">num_out_frames</name></name><operator pos:start="189:34" pos:end="189:35">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="191:13" pos:end="251:13"><if pos:start="191:13" pos:end="229:13">if <condition pos:start="191:16" pos:end="191:76">(<expr pos:start="191:17" pos:end="191:75"><operator pos:start="191:17" pos:end="191:17">!</operator><operator pos:start="191:18" pos:end="191:18">(</operator><name pos:start="191:19" pos:end="191:32"><name pos:start="191:19" pos:end="191:24">buffer</name><operator pos:start="191:25" pos:end="191:26">-&gt;</operator><name pos:start="191:27" pos:end="191:32">nFlags</name></name> <operator pos:start="191:34" pos:end="191:34">&amp;</operator> <name pos:start="191:36" pos:end="191:60">OMX_BUFFERFLAG_ENDOFFRAME</name><operator pos:start="191:61" pos:end="191:61">)</operator> <operator pos:start="191:63" pos:end="191:64">||</operator> <operator pos:start="191:66" pos:end="191:66">!</operator><name pos:start="191:67" pos:end="191:75"><name pos:start="191:67" pos:end="191:69">pkt</name><operator pos:start="191:70" pos:end="191:71">-&gt;</operator><name pos:start="191:72" pos:end="191:75">data</name></name></expr>)</condition> <block pos:start="191:78" pos:end="229:13">{<block_content pos:start="197:17" pos:end="227:17">

                <comment type="line" pos:start="193:17" pos:end="193:94">// If the output packet isn't preallocated, just concatenate everything in our</comment>

                <comment type="line" pos:start="195:17" pos:end="195:29">// own buffer</comment>

                <decl_stmt pos:start="197:17" pos:end="197:101"><decl pos:start="197:17" pos:end="197:100"><type pos:start="197:17" pos:end="197:19"><name pos:start="197:17" pos:end="197:19">int</name></type> <name pos:start="197:21" pos:end="197:27">newsize</name> <init pos:start="197:29" pos:end="197:100">= <expr pos:start="197:31" pos:end="197:100"><name pos:start="197:31" pos:end="197:48"><name pos:start="197:31" pos:end="197:31">s</name><operator pos:start="197:32" pos:end="197:33">-&gt;</operator><name pos:start="197:34" pos:end="197:48">output_buf_size</name></name> <operator pos:start="197:50" pos:end="197:50">+</operator> <name pos:start="197:52" pos:end="197:69"><name pos:start="197:52" pos:end="197:57">buffer</name><operator pos:start="197:58" pos:end="197:59">-&gt;</operator><name pos:start="197:60" pos:end="197:69">nFilledLen</name></name> <operator pos:start="197:71" pos:end="197:71">+</operator> <name pos:start="197:73" pos:end="197:100">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="199:17" pos:end="205:17"><if pos:start="199:17" pos:end="205:17">if <condition pos:start="199:20" pos:end="199:69">(<expr pos:start="199:21" pos:end="199:68"><operator pos:start="199:21" pos:end="199:21">(</operator><name pos:start="199:22" pos:end="199:24">ret</name> <operator pos:start="199:26" pos:end="199:26">=</operator> <call pos:start="199:28" pos:end="199:63"><name pos:start="199:28" pos:end="199:38">av_reallocp</name><argument_list pos:start="199:39" pos:end="199:63">(<argument pos:start="199:40" pos:end="199:53"><expr pos:start="199:40" pos:end="199:53"><operator pos:start="199:40" pos:end="199:40">&amp;</operator><name pos:start="199:41" pos:end="199:53"><name pos:start="199:41" pos:end="199:41">s</name><operator pos:start="199:42" pos:end="199:43">-&gt;</operator><name pos:start="199:44" pos:end="199:53">output_buf</name></name></expr></argument>, <argument pos:start="199:56" pos:end="199:62"><expr pos:start="199:56" pos:end="199:62"><name pos:start="199:56" pos:end="199:62">newsize</name></expr></argument>)</argument_list></call><operator pos:start="199:64" pos:end="199:64">)</operator> <operator pos:start="199:66" pos:end="199:66">&lt;</operator> <literal type="number" pos:start="199:68" pos:end="199:68">0</literal></expr>)</condition> <block pos:start="199:71" pos:end="205:17">{<block_content pos:start="201:21" pos:end="203:29">

                    <expr_stmt pos:start="201:21" pos:end="201:43"><expr pos:start="201:21" pos:end="201:42"><name pos:start="201:21" pos:end="201:38"><name pos:start="201:21" pos:end="201:21">s</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:38">output_buf_size</name></name> <operator pos:start="201:40" pos:end="201:40">=</operator> <literal type="number" pos:start="201:42" pos:end="201:42">0</literal></expr>;</expr_stmt>

                    <goto pos:start="203:21" pos:end="203:29">goto <name pos:start="203:26" pos:end="203:28">end</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:114"><expr pos:start="207:17" pos:end="207:113"><call pos:start="207:17" pos:end="207:113"><name pos:start="207:17" pos:end="207:22">memcpy</name><argument_list pos:start="207:23" pos:end="207:113">(<argument pos:start="207:24" pos:end="207:57"><expr pos:start="207:24" pos:end="207:57"><name pos:start="207:24" pos:end="207:36"><name pos:start="207:24" pos:end="207:24">s</name><operator pos:start="207:25" pos:end="207:26">-&gt;</operator><name pos:start="207:27" pos:end="207:36">output_buf</name></name> <operator pos:start="207:38" pos:end="207:38">+</operator> <name pos:start="207:40" pos:end="207:57"><name pos:start="207:40" pos:end="207:40">s</name><operator pos:start="207:41" pos:end="207:42">-&gt;</operator><name pos:start="207:43" pos:end="207:57">output_buf_size</name></name></expr></argument>, <argument pos:start="207:60" pos:end="207:92"><expr pos:start="207:60" pos:end="207:92"><name pos:start="207:60" pos:end="207:74"><name pos:start="207:60" pos:end="207:65">buffer</name><operator pos:start="207:66" pos:end="207:67">-&gt;</operator><name pos:start="207:68" pos:end="207:74">pBuffer</name></name> <operator pos:start="207:76" pos:end="207:76">+</operator> <name pos:start="207:78" pos:end="207:92"><name pos:start="207:78" pos:end="207:83">buffer</name><operator pos:start="207:84" pos:end="207:85">-&gt;</operator><name pos:start="207:86" pos:end="207:92">nOffset</name></name></expr></argument>, <argument pos:start="207:95" pos:end="207:112"><expr pos:start="207:95" pos:end="207:112"><name pos:start="207:95" pos:end="207:112"><name pos:start="207:95" pos:end="207:100">buffer</name><operator pos:start="207:101" pos:end="207:102">-&gt;</operator><name pos:start="207:103" pos:end="207:112">nFilledLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:57"><expr pos:start="209:17" pos:end="209:56"><name pos:start="209:17" pos:end="209:34"><name pos:start="209:17" pos:end="209:17">s</name><operator pos:start="209:18" pos:end="209:19">-&gt;</operator><name pos:start="209:20" pos:end="209:34">output_buf_size</name></name> <operator pos:start="209:36" pos:end="209:37">+=</operator> <name pos:start="209:39" pos:end="209:56"><name pos:start="209:39" pos:end="209:44">buffer</name><operator pos:start="209:45" pos:end="209:46">-&gt;</operator><name pos:start="209:47" pos:end="209:56">nFilledLen</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="211:17" pos:end="227:17"><if pos:start="211:17" pos:end="227:17">if <condition pos:start="211:20" pos:end="211:63">(<expr pos:start="211:21" pos:end="211:62"><name pos:start="211:21" pos:end="211:34"><name pos:start="211:21" pos:end="211:26">buffer</name><operator pos:start="211:27" pos:end="211:28">-&gt;</operator><name pos:start="211:29" pos:end="211:34">nFlags</name></name> <operator pos:start="211:36" pos:end="211:36">&amp;</operator> <name pos:start="211:38" pos:end="211:62">OMX_BUFFERFLAG_ENDOFFRAME</name></expr>)</condition> <block pos:start="211:65" pos:end="227:17">{<block_content pos:start="213:21" pos:end="225:43">

                    <if_stmt pos:start="213:21" pos:end="221:21"><if pos:start="213:21" pos:end="221:21">if <condition pos:start="213:24" pos:end="213:96">(<expr pos:start="213:25" pos:end="213:95"><operator pos:start="213:25" pos:end="213:25">(</operator><name pos:start="213:26" pos:end="213:28">ret</name> <operator pos:start="213:30" pos:end="213:30">=</operator> <call pos:start="213:32" pos:end="213:90"><name pos:start="213:32" pos:end="213:50">av_packet_from_data</name><argument_list pos:start="213:51" pos:end="213:90">(<argument pos:start="213:52" pos:end="213:54"><expr pos:start="213:52" pos:end="213:54"><name pos:start="213:52" pos:end="213:54">pkt</name></expr></argument>, <argument pos:start="213:57" pos:end="213:69"><expr pos:start="213:57" pos:end="213:69"><name pos:start="213:57" pos:end="213:69"><name pos:start="213:57" pos:end="213:57">s</name><operator pos:start="213:58" pos:end="213:59">-&gt;</operator><name pos:start="213:60" pos:end="213:69">output_buf</name></name></expr></argument>, <argument pos:start="213:72" pos:end="213:89"><expr pos:start="213:72" pos:end="213:89"><name pos:start="213:72" pos:end="213:89"><name pos:start="213:72" pos:end="213:72">s</name><operator pos:start="213:73" pos:end="213:74">-&gt;</operator><name pos:start="213:75" pos:end="213:89">output_buf_size</name></name></expr></argument>)</argument_list></call><operator pos:start="213:91" pos:end="213:91">)</operator> <operator pos:start="213:93" pos:end="213:93">&lt;</operator> <literal type="number" pos:start="213:95" pos:end="213:95">0</literal></expr>)</condition> <block pos:start="213:98" pos:end="221:21">{<block_content pos:start="215:25" pos:end="219:33">

                        <expr_stmt pos:start="215:25" pos:end="215:49"><expr pos:start="215:25" pos:end="215:48"><call pos:start="215:25" pos:end="215:48"><name pos:start="215:25" pos:end="215:32">av_freep</name><argument_list pos:start="215:33" pos:end="215:48">(<argument pos:start="215:34" pos:end="215:47"><expr pos:start="215:34" pos:end="215:47"><operator pos:start="215:34" pos:end="215:34">&amp;</operator><name pos:start="215:35" pos:end="215:47"><name pos:start="215:35" pos:end="215:35">s</name><operator pos:start="215:36" pos:end="215:37">-&gt;</operator><name pos:start="215:38" pos:end="215:47">output_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="217:25" pos:end="217:47"><expr pos:start="217:25" pos:end="217:46"><name pos:start="217:25" pos:end="217:42"><name pos:start="217:25" pos:end="217:25">s</name><operator pos:start="217:26" pos:end="217:27">-&gt;</operator><name pos:start="217:28" pos:end="217:42">output_buf_size</name></name> <operator pos:start="217:44" pos:end="217:44">=</operator> <literal type="number" pos:start="217:46" pos:end="217:46">0</literal></expr>;</expr_stmt>

                        <goto pos:start="219:25" pos:end="219:33">goto <name pos:start="219:30" pos:end="219:32">end</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="223:21" pos:end="223:41"><expr pos:start="223:21" pos:end="223:40"><name pos:start="223:21" pos:end="223:33"><name pos:start="223:21" pos:end="223:21">s</name><operator pos:start="223:22" pos:end="223:23">-&gt;</operator><name pos:start="223:24" pos:end="223:33">output_buf</name></name> <operator pos:start="223:35" pos:end="223:35">=</operator> <name pos:start="223:37" pos:end="223:40">NULL</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="225:21" pos:end="225:43"><expr pos:start="225:21" pos:end="225:42"><name pos:start="225:21" pos:end="225:38"><name pos:start="225:21" pos:end="225:21">s</name><operator pos:start="225:22" pos:end="225:23">-&gt;</operator><name pos:start="225:24" pos:end="225:38">output_buf_size</name></name> <operator pos:start="225:40" pos:end="225:40">=</operator> <literal type="number" pos:start="225:42" pos:end="225:42">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="229:15" pos:end="251:13">else <block pos:start="229:20" pos:end="251:13">{<block_content pos:start="233:17" pos:end="249:39">

                <comment type="line" pos:start="231:17" pos:end="231:77">// End of frame, and the caller provided a preallocated frame</comment>

                <if_stmt pos:start="233:17" pos:end="241:17"><if pos:start="233:17" pos:end="241:17">if <condition pos:start="233:20" pos:end="233:105">(<expr pos:start="233:21" pos:end="233:104"><operator pos:start="233:21" pos:end="233:21">(</operator><name pos:start="233:22" pos:end="233:24">ret</name> <operator pos:start="233:26" pos:end="233:26">=</operator> <call pos:start="233:28" pos:end="233:99"><name pos:start="233:28" pos:end="233:43">ff_alloc_packet2</name><argument_list pos:start="233:44" pos:end="233:99">(<argument pos:start="233:45" pos:end="233:49"><expr pos:start="233:45" pos:end="233:49"><name pos:start="233:45" pos:end="233:49">avctx</name></expr></argument>, <argument pos:start="233:52" pos:end="233:54"><expr pos:start="233:52" pos:end="233:54"><name pos:start="233:52" pos:end="233:54">pkt</name></expr></argument>, <argument pos:start="233:57" pos:end="233:95"><expr pos:start="233:57" pos:end="233:95"><name pos:start="233:57" pos:end="233:74"><name pos:start="233:57" pos:end="233:57">s</name><operator pos:start="233:58" pos:end="233:59">-&gt;</operator><name pos:start="233:60" pos:end="233:74">output_buf_size</name></name> <operator pos:start="233:76" pos:end="233:76">+</operator> <name pos:start="233:78" pos:end="233:95"><name pos:start="233:78" pos:end="233:83">buffer</name><operator pos:start="233:84" pos:end="233:85">-&gt;</operator><name pos:start="233:86" pos:end="233:95">nFilledLen</name></name></expr></argument>, <argument pos:start="233:98" pos:end="233:98"><expr pos:start="233:98" pos:end="233:98"><literal type="number" pos:start="233:98" pos:end="233:98">0</literal></expr></argument>)</argument_list></call><operator pos:start="233:100" pos:end="233:100">)</operator> <operator pos:start="233:102" pos:end="233:102">&lt;</operator> <literal type="number" pos:start="233:104" pos:end="233:104">0</literal></expr>)</condition> <block pos:start="233:107" pos:end="241:17">{<block_content pos:start="235:21" pos:end="239:29">

                    <expr_stmt pos:start="235:21" pos:end="237:75"><expr pos:start="235:21" pos:end="237:74"><call pos:start="235:21" pos:end="237:74"><name pos:start="235:21" pos:end="235:26">av_log</name><argument_list pos:start="235:27" pos:end="237:74">(<argument pos:start="235:28" pos:end="235:32"><expr pos:start="235:28" pos:end="235:32"><name pos:start="235:28" pos:end="235:32">avctx</name></expr></argument>, <argument pos:start="235:35" pos:end="235:46"><expr pos:start="235:35" pos:end="235:46"><name pos:start="235:35" pos:end="235:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="235:49" pos:end="235:91"><expr pos:start="235:49" pos:end="235:91"><literal type="string" pos:start="235:49" pos:end="235:91">"Error getting output packet of size %d.\n"</literal></expr></argument>,

                           <argument pos:start="237:28" pos:end="237:73"><expr pos:start="237:28" pos:end="237:73"><operator pos:start="237:28" pos:end="237:28">(</operator><name pos:start="237:29" pos:end="237:31">int</name><operator pos:start="237:32" pos:end="237:32">)</operator><operator pos:start="237:33" pos:end="237:33">(</operator><name pos:start="237:34" pos:end="237:51"><name pos:start="237:34" pos:end="237:34">s</name><operator pos:start="237:35" pos:end="237:36">-&gt;</operator><name pos:start="237:37" pos:end="237:51">output_buf_size</name></name> <operator pos:start="237:53" pos:end="237:53">+</operator> <name pos:start="237:55" pos:end="237:72"><name pos:start="237:55" pos:end="237:60">buffer</name><operator pos:start="237:61" pos:end="237:62">-&gt;</operator><name pos:start="237:63" pos:end="237:72">nFilledLen</name></name><operator pos:start="237:73" pos:end="237:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="239:21" pos:end="239:29">goto <name pos:start="239:26" pos:end="239:28">end</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:69"><expr pos:start="243:17" pos:end="243:68"><call pos:start="243:17" pos:end="243:68"><name pos:start="243:17" pos:end="243:22">memcpy</name><argument_list pos:start="243:23" pos:end="243:68">(<argument pos:start="243:24" pos:end="243:32"><expr pos:start="243:24" pos:end="243:32"><name pos:start="243:24" pos:end="243:32"><name pos:start="243:24" pos:end="243:26">pkt</name><operator pos:start="243:27" pos:end="243:28">-&gt;</operator><name pos:start="243:29" pos:end="243:32">data</name></name></expr></argument>, <argument pos:start="243:35" pos:end="243:47"><expr pos:start="243:35" pos:end="243:47"><name pos:start="243:35" pos:end="243:47"><name pos:start="243:35" pos:end="243:35">s</name><operator pos:start="243:36" pos:end="243:37">-&gt;</operator><name pos:start="243:38" pos:end="243:47">output_buf</name></name></expr></argument>, <argument pos:start="243:50" pos:end="243:67"><expr pos:start="243:50" pos:end="243:67"><name pos:start="243:50" pos:end="243:67"><name pos:start="243:50" pos:end="243:50">s</name><operator pos:start="243:51" pos:end="243:52">-&gt;</operator><name pos:start="243:53" pos:end="243:67">output_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:110"><expr pos:start="245:17" pos:end="245:109"><call pos:start="245:17" pos:end="245:109"><name pos:start="245:17" pos:end="245:22">memcpy</name><argument_list pos:start="245:23" pos:end="245:109">(<argument pos:start="245:24" pos:end="245:53"><expr pos:start="245:24" pos:end="245:53"><name pos:start="245:24" pos:end="245:32"><name pos:start="245:24" pos:end="245:26">pkt</name><operator pos:start="245:27" pos:end="245:28">-&gt;</operator><name pos:start="245:29" pos:end="245:32">data</name></name> <operator pos:start="245:34" pos:end="245:34">+</operator> <name pos:start="245:36" pos:end="245:53"><name pos:start="245:36" pos:end="245:36">s</name><operator pos:start="245:37" pos:end="245:38">-&gt;</operator><name pos:start="245:39" pos:end="245:53">output_buf_size</name></name></expr></argument>, <argument pos:start="245:56" pos:end="245:88"><expr pos:start="245:56" pos:end="245:88"><name pos:start="245:56" pos:end="245:70"><name pos:start="245:56" pos:end="245:61">buffer</name><operator pos:start="245:62" pos:end="245:63">-&gt;</operator><name pos:start="245:64" pos:end="245:70">pBuffer</name></name> <operator pos:start="245:72" pos:end="245:72">+</operator> <name pos:start="245:74" pos:end="245:88"><name pos:start="245:74" pos:end="245:79">buffer</name><operator pos:start="245:80" pos:end="245:81">-&gt;</operator><name pos:start="245:82" pos:end="245:88">nOffset</name></name></expr></argument>, <argument pos:start="245:91" pos:end="245:108"><expr pos:start="245:91" pos:end="245:108"><name pos:start="245:91" pos:end="245:108"><name pos:start="245:91" pos:end="245:96">buffer</name><operator pos:start="245:97" pos:end="245:98">-&gt;</operator><name pos:start="245:99" pos:end="245:108">nFilledLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:41"><expr pos:start="247:17" pos:end="247:40"><call pos:start="247:17" pos:end="247:40"><name pos:start="247:17" pos:end="247:24">av_freep</name><argument_list pos:start="247:25" pos:end="247:40">(<argument pos:start="247:26" pos:end="247:39"><expr pos:start="247:26" pos:end="247:39"><operator pos:start="247:26" pos:end="247:26">&amp;</operator><name pos:start="247:27" pos:end="247:39"><name pos:start="247:27" pos:end="247:27">s</name><operator pos:start="247:28" pos:end="247:29">-&gt;</operator><name pos:start="247:30" pos:end="247:39">output_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:39"><expr pos:start="249:17" pos:end="249:38"><name pos:start="249:17" pos:end="249:34"><name pos:start="249:17" pos:end="249:17">s</name><operator pos:start="249:18" pos:end="249:19">-&gt;</operator><name pos:start="249:20" pos:end="249:34">output_buf_size</name></name> <operator pos:start="249:36" pos:end="249:36">=</operator> <literal type="number" pos:start="249:38" pos:end="249:38">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="253:13" pos:end="271:13"><if pos:start="253:13" pos:end="271:13">if <condition pos:start="253:16" pos:end="253:59">(<expr pos:start="253:17" pos:end="253:58"><name pos:start="253:17" pos:end="253:30"><name pos:start="253:17" pos:end="253:22">buffer</name><operator pos:start="253:23" pos:end="253:24">-&gt;</operator><name pos:start="253:25" pos:end="253:30">nFlags</name></name> <operator pos:start="253:32" pos:end="253:32">&amp;</operator> <name pos:start="253:34" pos:end="253:58">OMX_BUFFERFLAG_ENDOFFRAME</name></expr>)</condition> <block pos:start="253:61" pos:end="271:13">{<block_content pos:start="255:17" pos:end="269:32">

                <expr_stmt pos:start="255:17" pos:end="255:110"><expr pos:start="255:17" pos:end="255:109"><name pos:start="255:17" pos:end="255:24"><name pos:start="255:17" pos:end="255:19">pkt</name><operator pos:start="255:20" pos:end="255:21">-&gt;</operator><name pos:start="255:22" pos:end="255:24">pts</name></name> <operator pos:start="255:26" pos:end="255:26">=</operator> <call pos:start="255:28" pos:end="255:109"><name pos:start="255:28" pos:end="255:39">av_rescale_q</name><argument_list pos:start="255:40" pos:end="255:109">(<argument pos:start="255:41" pos:end="255:74"><expr pos:start="255:41" pos:end="255:74"><call pos:start="255:41" pos:end="255:74"><name pos:start="255:41" pos:end="255:54">from_omx_ticks</name><argument_list pos:start="255:55" pos:end="255:74">(<argument pos:start="255:56" pos:end="255:73"><expr pos:start="255:56" pos:end="255:73"><name pos:start="255:56" pos:end="255:73"><name pos:start="255:56" pos:end="255:61">buffer</name><operator pos:start="255:62" pos:end="255:63">-&gt;</operator><name pos:start="255:64" pos:end="255:73">nTimeStamp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="255:77" pos:end="255:90"><expr pos:start="255:77" pos:end="255:90"><name pos:start="255:77" pos:end="255:90">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="255:93" pos:end="255:108"><expr pos:start="255:93" pos:end="255:108"><name pos:start="255:93" pos:end="255:108"><name pos:start="255:93" pos:end="255:97">avctx</name><operator pos:start="255:98" pos:end="255:99">-&gt;</operator><name pos:start="255:100" pos:end="255:108">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:start="257:17" pos:end="257:78">// We don't currently enable B-frames for the encoders, so set</comment>

                <comment type="line" pos:start="259:17" pos:end="259:86">// pkt-&gt;dts = pkt-&gt;pts. (The calling code behaves worse if the encoder</comment>

                <comment type="line" pos:start="261:17" pos:end="261:40">// doesn't set the dts).</comment>

                <expr_stmt pos:start="263:17" pos:end="263:36"><expr pos:start="263:17" pos:end="263:35"><name pos:start="263:17" pos:end="263:24"><name pos:start="263:17" pos:end="263:19">pkt</name><operator pos:start="263:20" pos:end="263:21">-&gt;</operator><name pos:start="263:22" pos:end="263:24">dts</name></name> <operator pos:start="263:26" pos:end="263:26">=</operator> <name pos:start="263:28" pos:end="263:35"><name pos:start="263:28" pos:end="263:30">pkt</name><operator pos:start="263:31" pos:end="263:32">-&gt;</operator><name pos:start="263:33" pos:end="263:35">pts</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="265:17" pos:end="267:50"><if pos:start="265:17" pos:end="267:50">if <condition pos:start="265:20" pos:end="265:62">(<expr pos:start="265:21" pos:end="265:61"><name pos:start="265:21" pos:end="265:34"><name pos:start="265:21" pos:end="265:26">buffer</name><operator pos:start="265:27" pos:end="265:28">-&gt;</operator><name pos:start="265:29" pos:end="265:34">nFlags</name></name> <operator pos:start="265:36" pos:end="265:36">&amp;</operator> <name pos:start="265:38" pos:end="265:61">OMX_BUFFERFLAG_SYNCFRAME</name></expr>)</condition><block type="pseudo" pos:start="267:21" pos:end="267:50"><block_content pos:start="267:21" pos:end="267:50">

                    <expr_stmt pos:start="267:21" pos:end="267:50"><expr pos:start="267:21" pos:end="267:49"><name pos:start="267:21" pos:end="267:30"><name pos:start="267:21" pos:end="267:23">pkt</name><operator pos:start="267:24" pos:end="267:25">-&gt;</operator><name pos:start="267:26" pos:end="267:30">flags</name></name> <operator pos:start="267:32" pos:end="267:33">|=</operator> <name pos:start="267:35" pos:end="267:49">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:32"><expr pos:start="269:17" pos:end="269:31"><operator pos:start="269:17" pos:end="269:17">*</operator><name pos:start="269:18" pos:end="269:27">got_packet</name> <operator pos:start="269:29" pos:end="269:29">=</operator> <literal type="number" pos:start="269:31" pos:end="269:31">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

<label pos:start="275:1" pos:end="275:4"><name pos:start="275:1" pos:end="275:3">end</name>:</label>

        <expr_stmt pos:start="277:9" pos:end="277:52"><expr pos:start="277:9" pos:end="277:51"><name pos:start="277:9" pos:end="277:11">err</name> <operator pos:start="277:13" pos:end="277:13">=</operator> <call pos:start="277:15" pos:end="277:51"><name pos:start="277:15" pos:end="277:32">OMX_FillThisBuffer</name><argument_list pos:start="277:33" pos:end="277:51">(<argument pos:start="277:34" pos:end="277:42"><expr pos:start="277:34" pos:end="277:42"><name pos:start="277:34" pos:end="277:42"><name pos:start="277:34" pos:end="277:34">s</name><operator pos:start="277:35" pos:end="277:36">-&gt;</operator><name pos:start="277:37" pos:end="277:42">handle</name></name></expr></argument>, <argument pos:start="277:45" pos:end="277:50"><expr pos:start="277:45" pos:end="277:50"><name pos:start="277:45" pos:end="277:50">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="279:9" pos:end="287:9"><if pos:start="279:9" pos:end="287:9">if <condition pos:start="279:12" pos:end="279:33">(<expr pos:start="279:13" pos:end="279:32"><name pos:start="279:13" pos:end="279:15">err</name> <operator pos:start="279:17" pos:end="279:18">!=</operator> <name pos:start="279:20" pos:end="279:32">OMX_ErrorNone</name></expr>)</condition> <block pos:start="279:35" pos:end="287:9">{<block_content pos:start="281:13" pos:end="285:34">

            <expr_stmt pos:start="281:13" pos:end="281:116"><expr pos:start="281:13" pos:end="281:115"><call pos:start="281:13" pos:end="281:115"><name pos:start="281:13" pos:end="281:25">append_buffer</name><argument_list pos:start="281:26" pos:end="281:115">(<argument pos:start="281:27" pos:end="281:42"><expr pos:start="281:27" pos:end="281:42"><operator pos:start="281:27" pos:end="281:27">&amp;</operator><name pos:start="281:28" pos:end="281:42"><name pos:start="281:28" pos:end="281:28">s</name><operator pos:start="281:29" pos:end="281:30">-&gt;</operator><name pos:start="281:31" pos:end="281:42">output_mutex</name></name></expr></argument>, <argument pos:start="281:45" pos:end="281:59"><expr pos:start="281:45" pos:end="281:59"><operator pos:start="281:45" pos:end="281:45">&amp;</operator><name pos:start="281:46" pos:end="281:59"><name pos:start="281:46" pos:end="281:46">s</name><operator pos:start="281:47" pos:end="281:48">-&gt;</operator><name pos:start="281:49" pos:end="281:59">output_cond</name></name></expr></argument>, <argument pos:start="281:62" pos:end="281:85"><expr pos:start="281:62" pos:end="281:85"><operator pos:start="281:62" pos:end="281:62">&amp;</operator><name pos:start="281:63" pos:end="281:85"><name pos:start="281:63" pos:end="281:63">s</name><operator pos:start="281:64" pos:end="281:65">-&gt;</operator><name pos:start="281:66" pos:end="281:85">num_done_out_buffers</name></name></expr></argument>, <argument pos:start="281:88" pos:end="281:106"><expr pos:start="281:88" pos:end="281:106"><name pos:start="281:88" pos:end="281:106"><name pos:start="281:88" pos:end="281:88">s</name><operator pos:start="281:89" pos:end="281:90">-&gt;</operator><name pos:start="281:91" pos:end="281:106">done_out_buffers</name></name></expr></argument>, <argument pos:start="281:109" pos:end="281:114"><expr pos:start="281:109" pos:end="281:114"><name pos:start="281:109" pos:end="281:114">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:80"><expr pos:start="283:13" pos:end="283:79"><call pos:start="283:13" pos:end="283:79"><name pos:start="283:13" pos:end="283:18">av_log</name><argument_list pos:start="283:19" pos:end="283:79">(<argument pos:start="283:20" pos:end="283:24"><expr pos:start="283:20" pos:end="283:24"><name pos:start="283:20" pos:end="283:24">avctx</name></expr></argument>, <argument pos:start="283:27" pos:end="283:38"><expr pos:start="283:27" pos:end="283:38"><name pos:start="283:27" pos:end="283:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="283:41" pos:end="283:73"><expr pos:start="283:41" pos:end="283:73"><literal type="string" pos:start="283:41" pos:end="283:73">"OMX_FillThisBuffer failed: %x\n"</literal></expr></argument>, <argument pos:start="283:76" pos:end="283:78"><expr pos:start="283:76" pos:end="283:78"><name pos:start="283:76" pos:end="283:78">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:34"><expr pos:start="285:13" pos:end="285:33"><name pos:start="285:13" pos:end="285:15">ret</name> <operator pos:start="285:17" pos:end="285:17">=</operator> <name pos:start="285:19" pos:end="285:33">AVERROR_UNKNOWN</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <return pos:start="291:5" pos:end="291:15">return <expr pos:start="291:12" pos:end="291:14"><name pos:start="291:12" pos:end="291:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
