<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9190.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">parse_presentation_segment</name><parameter_list pos:start="1:39" pos:end="3:72">(<parameter pos:start="1:40" pos:end="1:60"><decl pos:start="1:40" pos:end="1:60"><type pos:start="1:40" pos:end="1:60"><name pos:start="1:40" pos:end="1:53">AVCodecContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:60">avctx</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:57"><decl pos:start="3:40" pos:end="3:57"><type pos:start="3:40" pos:end="3:57"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:52">uint8_t</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:57">buf</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:71"><decl pos:start="3:60" pos:end="3:71"><type pos:start="3:60" pos:end="3:71"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:71">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="113:1">{<block_content pos:start="7:5" pos:end="111:28">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">PGSSubContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">ctx</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">x</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">y</name></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">w</name> <init pos:start="15:11" pos:end="15:37">= <expr pos:start="15:13" pos:end="15:37"><call pos:start="15:13" pos:end="15:37"><name pos:start="15:13" pos:end="15:31">bytestream_get_be16</name><argument_list pos:start="15:32" pos:end="15:37">(<argument pos:start="15:33" pos:end="15:36"><expr pos:start="15:33" pos:end="15:36"><operator pos:start="15:33" pos:end="15:33">&amp;</operator><name pos:start="15:34" pos:end="15:36">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:37"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">h</name> <init pos:start="17:11" pos:end="17:37">= <expr pos:start="17:13" pos:end="17:37"><call pos:start="17:13" pos:end="17:37"><name pos:start="17:13" pos:end="17:31">bytestream_get_be16</name><argument_list pos:start="17:32" pos:end="17:37">(<argument pos:start="17:33" pos:end="17:36"><expr pos:start="17:33" pos:end="17:36"><operator pos:start="17:33" pos:end="17:33">&amp;</operator><name pos:start="17:34" pos:end="17:36">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="23:18"><expr pos:start="21:5" pos:end="23:17"><call pos:start="21:5" pos:end="23:17"><name pos:start="21:5" pos:end="21:11">av_dlog</name><argument_list pos:start="21:12" pos:end="23:17">(<argument pos:start="21:13" pos:end="21:17"><expr pos:start="21:13" pos:end="21:17"><name pos:start="21:13" pos:end="21:17">avctx</name></expr></argument>, <argument pos:start="21:20" pos:end="21:45"><expr pos:start="21:20" pos:end="21:45"><literal type="string" pos:start="21:20" pos:end="21:45">"Video Dimensions %dx%d\n"</literal></expr></argument>,

            <argument pos:start="23:13" pos:end="23:13"><expr pos:start="23:13" pos:end="23:13"><name pos:start="23:13" pos:end="23:13">w</name></expr></argument>, <argument pos:start="23:16" pos:end="23:16"><expr pos:start="23:16" pos:end="23:16"><name pos:start="23:16" pos:end="23:16">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:44"><if pos:start="25:5" pos:end="27:44">if <condition pos:start="25:8" pos:end="25:49">(<expr pos:start="25:9" pos:end="25:48"><call pos:start="25:9" pos:end="25:43"><name pos:start="25:9" pos:end="25:27">av_image_check_size</name><argument_list pos:start="25:28" pos:end="25:43">(<argument pos:start="25:29" pos:end="25:29"><expr pos:start="25:29" pos:end="25:29"><name pos:start="25:29" pos:end="25:29">w</name></expr></argument>, <argument pos:start="25:32" pos:end="25:32"><expr pos:start="25:32" pos:end="25:32"><name pos:start="25:32" pos:end="25:32">h</name></expr></argument>, <argument pos:start="25:35" pos:end="25:35"><expr pos:start="25:35" pos:end="25:35"><literal type="number" pos:start="25:35" pos:end="25:35">0</literal></expr></argument>, <argument pos:start="25:38" pos:end="25:42"><expr pos:start="25:38" pos:end="25:42"><name pos:start="25:38" pos:end="25:42">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="25:45" pos:end="25:46">&gt;=</operator> <literal type="number" pos:start="25:48" pos:end="25:48">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:44"><block_content pos:start="27:9" pos:end="27:44">

        <expr_stmt pos:start="27:9" pos:end="27:44"><expr pos:start="27:9" pos:end="27:43"><call pos:start="27:9" pos:end="27:43"><name pos:start="27:9" pos:end="27:30">avcodec_set_dimensions</name><argument_list pos:start="27:31" pos:end="27:43">(<argument pos:start="27:32" pos:end="27:36"><expr pos:start="27:32" pos:end="27:36"><name pos:start="27:32" pos:end="27:36">avctx</name></expr></argument>, <argument pos:start="27:39" pos:end="27:39"><expr pos:start="27:39" pos:end="27:39"><name pos:start="27:39" pos:end="27:39">w</name></expr></argument>, <argument pos:start="27:42" pos:end="27:42"><expr pos:start="27:42" pos:end="27:42"><name pos:start="27:42" pos:end="27:42">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:46">/* Skip 1 bytes of unknown, frame rate? */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:10"><expr pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:7">buf</name><operator pos:start="33:8" pos:end="33:9">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:60"><expr pos:start="37:5" pos:end="37:59"><name pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:7">ctx</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:21">presentation</name><operator pos:start="37:22" pos:end="37:22">.</operator><name pos:start="37:23" pos:end="37:31">id_number</name></name> <operator pos:start="37:33" pos:end="37:33">=</operator> <call pos:start="37:35" pos:end="37:59"><name pos:start="37:35" pos:end="37:53">bytestream_get_be16</name><argument_list pos:start="37:54" pos:end="37:59">(<argument pos:start="37:55" pos:end="37:58"><expr pos:start="37:55" pos:end="37:58"><operator pos:start="37:55" pos:end="37:55">&amp;</operator><name pos:start="37:56" pos:end="37:58">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="51:7">/*

     * Skip 3 bytes of unknown:

     *     state

     *     palette_update_flag (0x80),

     *     palette_id_to_use,

     */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:13"><expr pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:7">buf</name> <operator pos:start="53:9" pos:end="53:10">+=</operator> <literal type="number" pos:start="53:12" pos:end="53:12">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:64"><expr pos:start="57:5" pos:end="57:63"><name pos:start="57:5" pos:end="57:35"><name pos:start="57:5" pos:end="57:7">ctx</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:21">presentation</name><operator pos:start="57:22" pos:end="57:22">.</operator><name pos:start="57:23" pos:end="57:35">object_number</name></name> <operator pos:start="57:37" pos:end="57:37">=</operator> <call pos:start="57:39" pos:end="57:63"><name pos:start="57:39" pos:end="57:57">bytestream_get_byte</name><argument_list pos:start="57:58" pos:end="57:63">(<argument pos:start="57:59" pos:end="57:62"><expr pos:start="57:59" pos:end="57:62"><operator pos:start="57:59" pos:end="57:59">&amp;</operator><name pos:start="57:60" pos:end="57:62">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="61:15"><if pos:start="59:5" pos:end="61:15">if <condition pos:start="59:8" pos:end="59:41">(<expr pos:start="59:9" pos:end="59:40"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:40"><name pos:start="59:10" pos:end="59:12">ctx</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:26">presentation</name><operator pos:start="59:27" pos:end="59:27">.</operator><name pos:start="59:28" pos:end="59:40">object_number</name></name></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:15"><block_content pos:start="61:9" pos:end="61:15">

        <return pos:start="61:9" pos:end="61:15">return;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="75:7">/*

     * Skip 4 bytes of unknown:

     *     object_id_ref (2 bytes),

     *     window_id_ref,

     *     composition_flag (0x80 - object cropped, 0x40 - object forced)

     */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:13"><expr pos:start="77:5" pos:end="77:12"><name pos:start="77:5" pos:end="77:7">buf</name> <operator pos:start="77:9" pos:end="77:10">+=</operator> <literal type="number" pos:start="77:12" pos:end="77:12">4</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:34"><expr pos:start="81:5" pos:end="81:33"><name pos:start="81:5" pos:end="81:5">x</name> <operator pos:start="81:7" pos:end="81:7">=</operator> <call pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:27">bytestream_get_be16</name><argument_list pos:start="81:28" pos:end="81:33">(<argument pos:start="81:29" pos:end="81:32"><expr pos:start="81:29" pos:end="81:32"><operator pos:start="81:29" pos:end="81:29">&amp;</operator><name pos:start="81:30" pos:end="81:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:34"><expr pos:start="83:5" pos:end="83:33"><name pos:start="83:5" pos:end="83:5">y</name> <operator pos:start="83:7" pos:end="83:7">=</operator> <call pos:start="83:9" pos:end="83:33"><name pos:start="83:9" pos:end="83:27">bytestream_get_be16</name><argument_list pos:start="83:28" pos:end="83:33">(<argument pos:start="83:29" pos:end="83:32"><expr pos:start="83:29" pos:end="83:32"><operator pos:start="83:29" pos:end="83:29">&amp;</operator><name pos:start="83:30" pos:end="83:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:97">/* TODO If cropping, cropping_x, cropping_y, cropping_width, cropping_height (all 2 bytes).*/</comment>



    <expr_stmt pos:start="91:5" pos:end="91:60"><expr pos:start="91:5" pos:end="91:59"><call pos:start="91:5" pos:end="91:59"><name pos:start="91:5" pos:end="91:11">av_dlog</name><argument_list pos:start="91:12" pos:end="91:59">(<argument pos:start="91:13" pos:end="91:17"><expr pos:start="91:13" pos:end="91:17"><name pos:start="91:13" pos:end="91:17">avctx</name></expr></argument>, <argument pos:start="91:20" pos:end="91:52"><expr pos:start="91:20" pos:end="91:52"><literal type="string" pos:start="91:20" pos:end="91:52">"Subtitle Placement x=%d, y=%d\n"</literal></expr></argument>, <argument pos:start="91:55" pos:end="91:55"><expr pos:start="91:55" pos:end="91:55"><name pos:start="91:55" pos:end="91:55">x</name></expr></argument>, <argument pos:start="91:58" pos:end="91:58"><expr pos:start="91:58" pos:end="91:58"><name pos:start="91:58" pos:end="91:58">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="103:5">if <condition pos:start="95:8" pos:end="95:46">(<expr pos:start="95:9" pos:end="95:45"><name pos:start="95:9" pos:end="95:9">x</name> <operator pos:start="95:11" pos:end="95:11">&gt;</operator> <name pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:17">avctx</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:24">width</name></name> <operator pos:start="95:26" pos:end="95:27">||</operator> <name pos:start="95:29" pos:end="95:29">y</name> <operator pos:start="95:31" pos:end="95:31">&gt;</operator> <name pos:start="95:33" pos:end="95:45"><name pos:start="95:33" pos:end="95:37">avctx</name><operator pos:start="95:38" pos:end="95:39">-&gt;</operator><name pos:start="95:40" pos:end="95:45">height</name></name></expr>)</condition> <block pos:start="95:48" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:21">

        <expr_stmt pos:start="97:9" pos:end="99:50"><expr pos:start="97:9" pos:end="99:49"><call pos:start="97:9" pos:end="99:49"><name pos:start="97:9" pos:end="97:14">av_log</name><argument_list pos:start="97:15" pos:end="99:49">(<argument pos:start="97:16" pos:end="97:20"><expr pos:start="97:16" pos:end="97:20"><name pos:start="97:16" pos:end="97:20">avctx</name></expr></argument>, <argument pos:start="97:23" pos:end="97:34"><expr pos:start="97:23" pos:end="97:34"><name pos:start="97:23" pos:end="97:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:37" pos:end="97:122"><expr pos:start="97:37" pos:end="97:122"><literal type="string" pos:start="97:37" pos:end="97:122">"Subtitle out of video bounds. x = %d, y = %d, video width = %d, video height = %d.\n"</literal></expr></argument>,

               <argument pos:start="99:16" pos:end="99:16"><expr pos:start="99:16" pos:end="99:16"><name pos:start="99:16" pos:end="99:16">x</name></expr></argument>, <argument pos:start="99:19" pos:end="99:19"><expr pos:start="99:19" pos:end="99:19"><name pos:start="99:19" pos:end="99:19">y</name></expr></argument>, <argument pos:start="99:22" pos:end="99:33"><expr pos:start="99:22" pos:end="99:33"><name pos:start="99:22" pos:end="99:33"><name pos:start="99:22" pos:end="99:26">avctx</name><operator pos:start="99:27" pos:end="99:28">-&gt;</operator><name pos:start="99:29" pos:end="99:33">width</name></name></expr></argument>, <argument pos:start="99:36" pos:end="99:48"><expr pos:start="99:36" pos:end="99:48"><name pos:start="99:36" pos:end="99:48"><name pos:start="99:36" pos:end="99:40">avctx</name><operator pos:start="99:41" pos:end="99:42">-&gt;</operator><name pos:start="99:43" pos:end="99:48">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:14"><expr pos:start="101:9" pos:end="101:13"><name pos:start="101:9" pos:end="101:9">x</name> <operator pos:start="101:11" pos:end="101:11">=</operator> <literal type="number" pos:start="101:13" pos:end="101:13">0</literal></expr>;</expr_stmt> <expr_stmt pos:start="101:16" pos:end="101:21"><expr pos:start="101:16" pos:end="101:20"><name pos:start="101:16" pos:end="101:16">y</name> <operator pos:start="101:18" pos:end="101:18">=</operator> <literal type="number" pos:start="101:20" pos:end="101:20">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:28">/* Fill in dimensions */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:28"><expr pos:start="109:5" pos:end="109:27"><name pos:start="109:5" pos:end="109:23"><name pos:start="109:5" pos:end="109:7">ctx</name><operator pos:start="109:8" pos:end="109:9">-&gt;</operator><name pos:start="109:10" pos:end="109:21">presentation</name><operator pos:start="109:22" pos:end="109:22">.</operator><name pos:start="109:23" pos:end="109:23">x</name></name> <operator pos:start="109:25" pos:end="109:25">=</operator> <name pos:start="109:27" pos:end="109:27">x</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:28"><expr pos:start="111:5" pos:end="111:27"><name pos:start="111:5" pos:end="111:23"><name pos:start="111:5" pos:end="111:7">ctx</name><operator pos:start="111:8" pos:end="111:9">-&gt;</operator><name pos:start="111:10" pos:end="111:21">presentation</name><operator pos:start="111:22" pos:end="111:22">.</operator><name pos:start="111:23" pos:end="111:23">y</name></name> <operator pos:start="111:25" pos:end="111:25">=</operator> <name pos:start="111:27" pos:end="111:27">y</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
