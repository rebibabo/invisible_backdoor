<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24906.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:74"><name pos:start="1:1" pos:end="1:17">e1000_receive_iov</name><argument_list pos:start="1:18" pos:end="1:74">(<argument pos:start="1:19" pos:end="1:36">NetClientState *nc</argument>, <argument pos:start="1:39" pos:end="1:61">const struct iovec *iov</argument>, <argument pos:start="1:64" pos:end="1:73">int iovcnt</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="315:1">{<block_content pos:start="5:5" pos:end="313:16">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">E1000State</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:43">= <expr pos:start="5:21" pos:end="5:43"><call pos:start="5:21" pos:end="5:43"><name pos:start="5:21" pos:end="5:39">qemu_get_nic_opaque</name><argument_list pos:start="5:40" pos:end="5:43">(<argument pos:start="5:41" pos:end="5:42"><expr pos:start="5:41" pos:end="5:42"><name pos:start="5:41" pos:end="5:42">nc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">PCIDevice</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">d</name> <init pos:start="7:18" pos:end="7:32">= <expr pos:start="7:20" pos:end="7:32"><call pos:start="7:20" pos:end="7:32"><name pos:start="7:20" pos:end="7:29">PCI_DEVICE</name><argument_list pos:start="7:30" pos:end="7:32">(<argument pos:start="7:31" pos:end="7:31"><expr pos:start="7:31" pos:end="7:31"><name pos:start="7:31" pos:end="7:31">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:24">e1000_rx_desc</name></name></type> <name pos:start="9:26" pos:end="9:29">desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">dma_addr_t</name></type> <name pos:start="11:16" pos:end="11:19">base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:18">n</name></decl>, <decl pos:start="13:21" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:21" pos:end="13:23">rdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:22">rdh_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint16_t</name></type> <name pos:start="17:14" pos:end="17:25">vlan_special</name> <init pos:start="17:27" pos:end="17:29">= <expr pos:start="17:29" pos:end="17:29"><literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:23">vlan_status</name> <init pos:start="19:25" pos:end="19:27">= <expr pos:start="19:27" pos:end="19:27"><literal type="number" pos:start="19:27" pos:end="19:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:33"><name pos:start="21:13" pos:end="21:19">min_buf</name><index pos:start="21:20" pos:end="21:33">[<expr pos:start="21:21" pos:end="21:32"><name pos:start="21:21" pos:end="21:32">MIN_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:16">iovec</name></name></type> <name pos:start="23:18" pos:end="23:24">min_iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:40"><decl pos:start="25:5" pos:end="25:39"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">uint8_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:23">filter_buf</name> <init pos:start="25:25" pos:end="25:39">= <expr pos:start="25:27" pos:end="25:39"><name pos:start="25:27" pos:end="25:39"><name pos:start="25:27" pos:end="25:29">iov</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:39">iov_base</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:40"><decl pos:start="27:5" pos:end="27:39"><type pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:10">size_t</name></type> <name pos:start="27:12" pos:end="27:15">size</name> <init pos:start="27:17" pos:end="27:39">= <expr pos:start="27:19" pos:end="27:39"><call pos:start="27:19" pos:end="27:39"><name pos:start="27:19" pos:end="27:26">iov_size</name><argument_list pos:start="27:27" pos:end="27:39">(<argument pos:start="27:28" pos:end="27:30"><expr pos:start="27:28" pos:end="27:30"><name pos:start="27:28" pos:end="27:30">iov</name></expr></argument>, <argument pos:start="27:33" pos:end="27:38"><expr pos:start="27:33" pos:end="27:38"><name pos:start="27:33" pos:end="27:38">iovcnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:10">size_t</name></type> <name pos:start="29:12" pos:end="29:18">iov_ofs</name> <init pos:start="29:20" pos:end="29:22">= <expr pos:start="29:22" pos:end="29:22"><literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:23"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:10">size_t</name></type> <name pos:start="31:12" pos:end="31:22">desc_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:21"><decl pos:start="33:5" pos:end="33:20"><type pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:10">size_t</name></type> <name pos:start="33:12" pos:end="33:20">desc_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:22"><decl pos:start="35:5" pos:end="35:21"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:10">size_t</name></type> <name pos:start="35:12" pos:end="35:21">total_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="39:55"><decl pos:start="37:5" pos:end="39:54"><type pos:start="37:5" pos:end="37:20"><specifier pos:start="37:5" pos:end="37:10">static</specifier> <specifier pos:start="37:12" pos:end="37:16">const</specifier> <name pos:start="37:18" pos:end="37:20">int</name></type> <name pos:start="37:22" pos:end="37:31"><name pos:start="37:22" pos:end="37:28">PRCregs</name><index pos:start="37:29" pos:end="37:31">[<expr pos:start="37:30" pos:end="37:30"><literal type="number" pos:start="37:30" pos:end="37:30">6</literal></expr>]</index></name> <init pos:start="37:33" pos:end="39:54">= <expr pos:start="37:35" pos:end="39:54"><block pos:start="37:35" pos:end="39:54">{ <expr pos:start="37:37" pos:end="37:41"><name pos:start="37:37" pos:end="37:41">PRC64</name></expr>, <expr pos:start="37:44" pos:end="37:49"><name pos:start="37:44" pos:end="37:49">PRC127</name></expr>, <expr pos:start="37:52" pos:end="37:57"><name pos:start="37:52" pos:end="37:57">PRC255</name></expr>, <expr pos:start="37:60" pos:end="37:65"><name pos:start="37:60" pos:end="37:65">PRC511</name></expr>,

                                    <expr pos:start="39:37" pos:end="39:43"><name pos:start="39:37" pos:end="39:43">PRC1023</name></expr>, <expr pos:start="39:46" pos:end="39:52"><name pos:start="39:46" pos:end="39:52">PRC1522</name></expr> }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:48">(<expr pos:start="43:9" pos:end="43:47"><operator pos:start="43:9" pos:end="43:9">!</operator><operator pos:start="43:10" pos:end="43:10">(</operator><name pos:start="43:11" pos:end="43:28"><name pos:start="43:11" pos:end="43:11">s</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:20">mac_reg</name><index pos:start="43:21" pos:end="43:28">[<expr pos:start="43:22" pos:end="43:27"><name pos:start="43:22" pos:end="43:27">STATUS</name></expr>]</index></name> <operator pos:start="43:30" pos:end="43:30">&amp;</operator> <name pos:start="43:32" pos:end="43:46">E1000_STATUS_LU</name><operator pos:start="43:47" pos:end="43:47">)</operator></expr>)</condition> <block pos:start="43:50" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:18">

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:44">(<expr pos:start="51:9" pos:end="51:43"><operator pos:start="51:9" pos:end="51:9">!</operator><operator pos:start="51:10" pos:end="51:10">(</operator><name pos:start="51:11" pos:end="51:26"><name pos:start="51:11" pos:end="51:11">s</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:20">mac_reg</name><index pos:start="51:21" pos:end="51:26">[<expr pos:start="51:22" pos:end="51:25"><name pos:start="51:22" pos:end="51:25">RCTL</name></expr>]</index></name> <operator pos:start="51:28" pos:end="51:28">&amp;</operator> <name pos:start="51:30" pos:end="51:42">E1000_RCTL_EN</name><operator pos:start="51:43" pos:end="51:43">)</operator></expr>)</condition> <block pos:start="51:46" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:18">

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:46">/* Pad to minimum Ethernet frame length */</comment>

    <if_stmt pos:start="61:5" pos:end="85:5"><if pos:start="61:5" pos:end="77:5">if <condition pos:start="61:8" pos:end="61:31">(<expr pos:start="61:9" pos:end="61:30"><name pos:start="61:9" pos:end="61:12">size</name> <operator pos:start="61:14" pos:end="61:14">&lt;</operator> <sizeof pos:start="61:16" pos:end="61:30">sizeof<argument_list pos:start="61:22" pos:end="61:30">(<argument pos:start="61:23" pos:end="61:29"><expr pos:start="61:23" pos:end="61:29"><name pos:start="61:23" pos:end="61:29">min_buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="61:33" pos:end="77:5">{<block_content pos:start="63:9" pos:end="75:23">

        <expr_stmt pos:start="63:9" pos:end="63:50"><expr pos:start="63:9" pos:end="63:49"><call pos:start="63:9" pos:end="63:49"><name pos:start="63:9" pos:end="63:18">iov_to_buf</name><argument_list pos:start="63:19" pos:end="63:49">(<argument pos:start="63:20" pos:end="63:22"><expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:22">iov</name></expr></argument>, <argument pos:start="63:25" pos:end="63:30"><expr pos:start="63:25" pos:end="63:30"><name pos:start="63:25" pos:end="63:30">iovcnt</name></expr></argument>, <argument pos:start="63:33" pos:end="63:33"><expr pos:start="63:33" pos:end="63:33"><literal type="number" pos:start="63:33" pos:end="63:33">0</literal></expr></argument>, <argument pos:start="63:36" pos:end="63:42"><expr pos:start="63:36" pos:end="63:42"><name pos:start="63:36" pos:end="63:42">min_buf</name></expr></argument>, <argument pos:start="63:45" pos:end="63:48"><expr pos:start="63:45" pos:end="63:48"><name pos:start="63:45" pos:end="63:48">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:58"><expr pos:start="65:9" pos:end="65:57"><call pos:start="65:9" pos:end="65:57"><name pos:start="65:9" pos:end="65:14">memset</name><argument_list pos:start="65:15" pos:end="65:57">(<argument pos:start="65:16" pos:end="65:29"><expr pos:start="65:16" pos:end="65:29"><operator pos:start="65:16" pos:end="65:16">&amp;</operator><name pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:23">min_buf</name><index pos:start="65:24" pos:end="65:29">[<expr pos:start="65:25" pos:end="65:28"><name pos:start="65:25" pos:end="65:28">size</name></expr>]</index></name></expr></argument>, <argument pos:start="65:32" pos:end="65:32"><expr pos:start="65:32" pos:end="65:32"><literal type="number" pos:start="65:32" pos:end="65:32">0</literal></expr></argument>, <argument pos:start="65:35" pos:end="65:56"><expr pos:start="65:35" pos:end="65:56"><sizeof pos:start="65:35" pos:end="65:49">sizeof<argument_list pos:start="65:41" pos:end="65:49">(<argument pos:start="65:42" pos:end="65:48"><expr pos:start="65:42" pos:end="65:48"><name pos:start="65:42" pos:end="65:48">min_buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="65:51" pos:end="65:51">-</operator> <name pos:start="65:53" pos:end="65:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:36"><expr pos:start="67:9" pos:end="67:35"><call pos:start="67:9" pos:end="67:35"><name pos:start="67:9" pos:end="67:27">inc_reg_if_not_full</name><argument_list pos:start="67:28" pos:end="67:35">(<argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><name pos:start="67:29" pos:end="67:29">s</name></expr></argument>, <argument pos:start="67:32" pos:end="67:34"><expr pos:start="67:32" pos:end="67:34"><name pos:start="67:32" pos:end="67:34">RUC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:48"><expr pos:start="69:9" pos:end="69:47"><name pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:15">min_iov</name><operator pos:start="69:16" pos:end="69:16">.</operator><name pos:start="69:17" pos:end="69:24">iov_base</name></name> <operator pos:start="69:26" pos:end="69:26">=</operator> <name pos:start="69:28" pos:end="69:37">filter_buf</name> <operator pos:start="69:39" pos:end="69:39">=</operator> <name pos:start="69:41" pos:end="69:47">min_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:49"><expr pos:start="71:9" pos:end="71:48"><name pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:15">min_iov</name><operator pos:start="71:16" pos:end="71:16">.</operator><name pos:start="71:17" pos:end="71:23">iov_len</name></name> <operator pos:start="71:25" pos:end="71:25">=</operator> <name pos:start="71:27" pos:end="71:30">size</name> <operator pos:start="71:32" pos:end="71:32">=</operator> <sizeof pos:start="71:34" pos:end="71:48">sizeof<argument_list pos:start="71:40" pos:end="71:48">(<argument pos:start="71:41" pos:end="71:47"><expr pos:start="71:41" pos:end="71:47"><name pos:start="71:41" pos:end="71:47">min_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:19"><expr pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:14">iovcnt</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:23"><expr pos:start="75:9" pos:end="75:22"><name pos:start="75:9" pos:end="75:11">iov</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">&amp;</operator><name pos:start="75:16" pos:end="75:22">min_iov</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="85:5">else if <condition pos:start="77:15" pos:end="77:55">(<expr pos:start="77:16" pos:end="77:54"><name pos:start="77:16" pos:end="77:27"><name pos:start="77:16" pos:end="77:18">iov</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:27">iov_len</name></name> <operator pos:start="77:29" pos:end="77:29">&lt;</operator> <name pos:start="77:31" pos:end="77:54">MAXIMUM_ETHERNET_HDR_LEN</name></expr>)</condition> <block pos:start="77:57" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:29">

        <comment type="block" pos:start="79:9" pos:end="79:52">/* This is very unlikely, but may happen. */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:70"><expr pos:start="81:9" pos:end="81:69"><call pos:start="81:9" pos:end="81:69"><name pos:start="81:9" pos:end="81:18">iov_to_buf</name><argument_list pos:start="81:19" pos:end="81:69">(<argument pos:start="81:20" pos:end="81:22"><expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">iov</name></expr></argument>, <argument pos:start="81:25" pos:end="81:30"><expr pos:start="81:25" pos:end="81:30"><name pos:start="81:25" pos:end="81:30">iovcnt</name></expr></argument>, <argument pos:start="81:33" pos:end="81:33"><expr pos:start="81:33" pos:end="81:33"><literal type="number" pos:start="81:33" pos:end="81:33">0</literal></expr></argument>, <argument pos:start="81:36" pos:end="81:42"><expr pos:start="81:36" pos:end="81:42"><name pos:start="81:36" pos:end="81:42">min_buf</name></expr></argument>, <argument pos:start="81:45" pos:end="81:68"><expr pos:start="81:45" pos:end="81:68"><name pos:start="81:45" pos:end="81:68">MAXIMUM_ETHERNET_HDR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:29"><expr pos:start="83:9" pos:end="83:28"><name pos:start="83:9" pos:end="83:18">filter_buf</name> <operator pos:start="83:20" pos:end="83:20">=</operator> <name pos:start="83:22" pos:end="83:28">min_buf</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:53">/* Discard oversized packets if !LPE and !SBP. */</comment>

    <if_stmt pos:start="91:5" pos:end="103:5"><if pos:start="91:5" pos:end="103:5">if <condition pos:start="91:8" pos:end="97:48">(<expr pos:start="91:9" pos:end="97:47"><operator pos:start="91:9" pos:end="91:9">(</operator><name pos:start="91:10" pos:end="91:13">size</name> <operator pos:start="91:15" pos:end="91:15">&gt;</operator> <name pos:start="91:17" pos:end="91:41">MAXIMUM_ETHERNET_LPE_SIZE</name> <operator pos:start="91:43" pos:end="91:44">||</operator>

        <operator pos:start="93:9" pos:end="93:9">(</operator><name pos:start="93:10" pos:end="93:13">size</name> <operator pos:start="93:15" pos:end="93:15">&gt;</operator> <name pos:start="93:17" pos:end="93:42">MAXIMUM_ETHERNET_VLAN_SIZE</name>

        <operator pos:start="95:9" pos:end="95:10">&amp;&amp;</operator> <operator pos:start="95:12" pos:end="95:12">!</operator><operator pos:start="95:13" pos:end="95:13">(</operator><name pos:start="95:14" pos:end="95:29"><name pos:start="95:14" pos:end="95:14">s</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:23">mac_reg</name><index pos:start="95:24" pos:end="95:29">[<expr pos:start="95:25" pos:end="95:28"><name pos:start="95:25" pos:end="95:28">RCTL</name></expr>]</index></name> <operator pos:start="95:31" pos:end="95:31">&amp;</operator> <name pos:start="95:33" pos:end="95:46">E1000_RCTL_LPE</name><operator pos:start="95:47" pos:end="95:47">)</operator><operator pos:start="95:48" pos:end="95:48">)</operator><operator pos:start="95:49" pos:end="95:49">)</operator>

        <operator pos:start="97:9" pos:end="97:10">&amp;&amp;</operator> <operator pos:start="97:12" pos:end="97:12">!</operator><operator pos:start="97:13" pos:end="97:13">(</operator><name pos:start="97:14" pos:end="97:29"><name pos:start="97:14" pos:end="97:14">s</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:23">mac_reg</name><index pos:start="97:24" pos:end="97:29">[<expr pos:start="97:25" pos:end="97:28"><name pos:start="97:25" pos:end="97:28">RCTL</name></expr>]</index></name> <operator pos:start="97:31" pos:end="97:31">&amp;</operator> <name pos:start="97:33" pos:end="97:46">E1000_RCTL_SBP</name><operator pos:start="97:47" pos:end="97:47">)</operator></expr>)</condition> <block pos:start="97:50" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:20">

        <expr_stmt pos:start="99:9" pos:end="99:36"><expr pos:start="99:9" pos:end="99:35"><call pos:start="99:9" pos:end="99:35"><name pos:start="99:9" pos:end="99:27">inc_reg_if_not_full</name><argument_list pos:start="99:28" pos:end="99:35">(<argument pos:start="99:29" pos:end="99:29"><expr pos:start="99:29" pos:end="99:29"><name pos:start="99:29" pos:end="99:29">s</name></expr></argument>, <argument pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><name pos:start="99:32" pos:end="99:34">ROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:20">return <expr pos:start="101:16" pos:end="101:19"><name pos:start="101:16" pos:end="101:19">size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:45">(<expr pos:start="107:9" pos:end="107:44"><operator pos:start="107:9" pos:end="107:9">!</operator><call pos:start="107:10" pos:end="107:44"><name pos:start="107:10" pos:end="107:23">receive_filter</name><argument_list pos:start="107:24" pos:end="107:44">(<argument pos:start="107:25" pos:end="107:25"><expr pos:start="107:25" pos:end="107:25"><name pos:start="107:25" pos:end="107:25">s</name></expr></argument>, <argument pos:start="107:28" pos:end="107:37"><expr pos:start="107:28" pos:end="107:37"><name pos:start="107:28" pos:end="107:37">filter_buf</name></expr></argument>, <argument pos:start="107:40" pos:end="107:43"><expr pos:start="107:40" pos:end="107:43"><name pos:start="107:40" pos:end="107:43">size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:47" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:20">

        <return pos:start="109:9" pos:end="109:20">return <expr pos:start="109:16" pos:end="109:19"><name pos:start="109:16" pos:end="109:19">size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="145:5"><if pos:start="115:5" pos:end="145:5">if <condition pos:start="115:8" pos:end="115:57">(<expr pos:start="115:9" pos:end="115:56"><call pos:start="115:9" pos:end="115:23"><name pos:start="115:9" pos:end="115:20">vlan_enabled</name><argument_list pos:start="115:21" pos:end="115:23">(<argument pos:start="115:22" pos:end="115:22"><expr pos:start="115:22" pos:end="115:22"><name pos:start="115:22" pos:end="115:22">s</name></expr></argument>)</argument_list></call> <operator pos:start="115:25" pos:end="115:26">&amp;&amp;</operator> <call pos:start="115:28" pos:end="115:56"><name pos:start="115:28" pos:end="115:41">is_vlan_packet</name><argument_list pos:start="115:42" pos:end="115:56">(<argument pos:start="115:43" pos:end="115:43"><expr pos:start="115:43" pos:end="115:43"><name pos:start="115:43" pos:end="115:43">s</name></expr></argument>, <argument pos:start="115:46" pos:end="115:55"><expr pos:start="115:46" pos:end="115:55"><name pos:start="115:46" pos:end="115:55">filter_buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:59" pos:end="145:5">{<block_content pos:start="117:9" pos:end="143:18">

        <expr_stmt pos:start="117:9" pos:end="119:72"><expr pos:start="117:9" pos:end="119:71"><name pos:start="117:9" pos:end="117:20">vlan_special</name> <operator pos:start="117:22" pos:end="117:22">=</operator> <call pos:start="117:24" pos:end="119:71"><name pos:start="117:24" pos:end="117:34">cpu_to_le16</name><argument_list pos:start="117:35" pos:end="119:71">(<argument pos:start="117:36" pos:end="119:70"><expr pos:start="117:36" pos:end="119:70"><call pos:start="117:36" pos:end="119:70"><name pos:start="117:36" pos:end="117:47">be16_to_cpup</name><argument_list pos:start="117:48" pos:end="119:70">(<argument pos:start="117:49" pos:end="119:69"><expr pos:start="117:49" pos:end="119:69"><operator pos:start="117:49" pos:end="117:49">(</operator><name pos:start="117:50" pos:end="117:57">uint16_t</name> <operator pos:start="117:59" pos:end="117:59">*</operator><operator pos:start="117:60" pos:end="117:60">)</operator><operator pos:start="117:61" pos:end="117:61">(</operator><name pos:start="117:62" pos:end="117:71">filter_buf</name>

                                                                <operator pos:start="119:65" pos:end="119:65">+</operator> <literal type="number" pos:start="119:67" pos:end="119:68">14</literal><operator pos:start="119:69" pos:end="119:69">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:20"><expr pos:start="121:9" pos:end="121:19"><name pos:start="121:9" pos:end="121:15">iov_ofs</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <literal type="number" pos:start="121:19" pos:end="121:19">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="139:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:40">(<expr pos:start="123:13" pos:end="123:39"><name pos:start="123:13" pos:end="123:22">filter_buf</name> <operator pos:start="123:24" pos:end="123:25">==</operator> <name pos:start="123:27" pos:end="123:39"><name pos:start="123:27" pos:end="123:29">iov</name><operator pos:start="123:30" pos:end="123:31">-&gt;</operator><name pos:start="123:32" pos:end="123:39">iov_base</name></name></expr>)</condition> <block pos:start="123:42" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:52">

            <expr_stmt pos:start="125:13" pos:end="125:52"><expr pos:start="125:13" pos:end="125:51"><call pos:start="125:13" pos:end="125:51"><name pos:start="125:13" pos:end="125:19">memmove</name><argument_list pos:start="125:20" pos:end="125:51">(<argument pos:start="125:21" pos:end="125:34"><expr pos:start="125:21" pos:end="125:34"><name pos:start="125:21" pos:end="125:30">filter_buf</name> <operator pos:start="125:32" pos:end="125:32">+</operator> <literal type="number" pos:start="125:34" pos:end="125:34">4</literal></expr></argument>, <argument pos:start="125:37" pos:end="125:46"><expr pos:start="125:37" pos:end="125:46"><name pos:start="125:37" pos:end="125:46">filter_buf</name></expr></argument>, <argument pos:start="125:49" pos:end="125:50"><expr pos:start="125:49" pos:end="125:50"><literal type="number" pos:start="125:49" pos:end="125:50">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="127:11" pos:end="139:9">else <block pos:start="127:16" pos:end="139:9">{<block_content pos:start="129:13" pos:end="137:13">

            <expr_stmt pos:start="129:13" pos:end="129:57"><expr pos:start="129:13" pos:end="129:56"><call pos:start="129:13" pos:end="129:56"><name pos:start="129:13" pos:end="129:24">iov_from_buf</name><argument_list pos:start="129:25" pos:end="129:56">(<argument pos:start="129:26" pos:end="129:28"><expr pos:start="129:26" pos:end="129:28"><name pos:start="129:26" pos:end="129:28">iov</name></expr></argument>, <argument pos:start="129:31" pos:end="129:36"><expr pos:start="129:31" pos:end="129:36"><name pos:start="129:31" pos:end="129:36">iovcnt</name></expr></argument>, <argument pos:start="129:39" pos:end="129:39"><expr pos:start="129:39" pos:end="129:39"><literal type="number" pos:start="129:39" pos:end="129:39">4</literal></expr></argument>, <argument pos:start="129:42" pos:end="129:51"><expr pos:start="129:42" pos:end="129:51"><name pos:start="129:42" pos:end="129:51">filter_buf</name></expr></argument>, <argument pos:start="129:54" pos:end="129:55"><expr pos:start="129:54" pos:end="129:55"><literal type="number" pos:start="129:54" pos:end="129:55">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="131:13" pos:end="137:13">while <condition pos:start="131:19" pos:end="131:43">(<expr pos:start="131:20" pos:end="131:42"><name pos:start="131:20" pos:end="131:31"><name pos:start="131:20" pos:end="131:22">iov</name><operator pos:start="131:23" pos:end="131:24">-&gt;</operator><name pos:start="131:25" pos:end="131:31">iov_len</name></name> <operator pos:start="131:33" pos:end="131:34">&lt;=</operator> <name pos:start="131:36" pos:end="131:42">iov_ofs</name></expr>)</condition> <block pos:start="131:45" pos:end="137:13">{<block_content pos:start="133:17" pos:end="135:22">

                <expr_stmt pos:start="133:17" pos:end="133:40"><expr pos:start="133:17" pos:end="133:39"><name pos:start="133:17" pos:end="133:23">iov_ofs</name> <operator pos:start="133:25" pos:end="133:26">-=</operator> <name pos:start="133:28" pos:end="133:39"><name pos:start="133:28" pos:end="133:30">iov</name><operator pos:start="133:31" pos:end="133:32">-&gt;</operator><name pos:start="133:33" pos:end="133:39">iov_len</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:22"><expr pos:start="135:17" pos:end="135:21"><name pos:start="135:17" pos:end="135:19">iov</name><operator pos:start="135:20" pos:end="135:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:40"><expr pos:start="141:9" pos:end="141:39"><name pos:start="141:9" pos:end="141:19">vlan_status</name> <operator pos:start="141:21" pos:end="141:21">=</operator> <name pos:start="141:23" pos:end="141:39">E1000_RXD_STAT_VP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:18"><expr pos:start="143:9" pos:end="143:17"><name pos:start="143:9" pos:end="143:12">size</name> <operator pos:start="143:14" pos:end="143:15">-=</operator> <literal type="number" pos:start="143:17" pos:end="143:17">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:32"><expr pos:start="149:5" pos:end="149:31"><name pos:start="149:5" pos:end="149:13">rdh_start</name> <operator pos:start="149:15" pos:end="149:15">=</operator> <name pos:start="149:17" pos:end="149:31"><name pos:start="149:17" pos:end="149:17">s</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:26">mac_reg</name><index pos:start="149:27" pos:end="149:31">[<expr pos:start="149:28" pos:end="149:30"><name pos:start="149:28" pos:end="149:30">RDH</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:20"><expr pos:start="151:5" pos:end="151:19"><name pos:start="151:5" pos:end="151:15">desc_offset</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <literal type="number" pos:start="151:19" pos:end="151:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:35"><expr pos:start="153:5" pos:end="153:34"><name pos:start="153:5" pos:end="153:14">total_size</name> <operator pos:start="153:16" pos:end="153:16">=</operator> <name pos:start="153:18" pos:end="153:21">size</name> <operator pos:start="153:23" pos:end="153:23">+</operator> <call pos:start="153:25" pos:end="153:34"><name pos:start="153:25" pos:end="153:31">fcs_len</name><argument_list pos:start="153:32" pos:end="153:34">(<argument pos:start="153:33" pos:end="153:33"><expr pos:start="153:33" pos:end="153:33"><name pos:start="153:33" pos:end="153:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="161:5"><if pos:start="155:5" pos:end="161:5">if <condition pos:start="155:8" pos:end="155:41">(<expr pos:start="155:9" pos:end="155:40"><operator pos:start="155:9" pos:end="155:9">!</operator><call pos:start="155:10" pos:end="155:40"><name pos:start="155:10" pos:end="155:25">e1000_has_rxbufs</name><argument_list pos:start="155:26" pos:end="155:40">(<argument pos:start="155:27" pos:end="155:27"><expr pos:start="155:27" pos:end="155:27"><name pos:start="155:27" pos:end="155:27">s</name></expr></argument>, <argument pos:start="155:30" pos:end="155:39"><expr pos:start="155:30" pos:end="155:39"><name pos:start="155:30" pos:end="155:39">total_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="155:43" pos:end="161:5">{<block_content pos:start="157:13" pos:end="159:22">

            <expr_stmt pos:start="157:13" pos:end="157:41"><expr pos:start="157:13" pos:end="157:40"><call pos:start="157:13" pos:end="157:40"><name pos:start="157:13" pos:end="157:19">set_ics</name><argument_list pos:start="157:20" pos:end="157:40">(<argument pos:start="157:21" pos:end="157:21"><expr pos:start="157:21" pos:end="157:21"><name pos:start="157:21" pos:end="157:21">s</name></expr></argument>, <argument pos:start="157:24" pos:end="157:24"><expr pos:start="157:24" pos:end="157:24"><literal type="number" pos:start="157:24" pos:end="157:24">0</literal></expr></argument>, <argument pos:start="157:27" pos:end="157:39"><expr pos:start="157:27" pos:end="157:39"><name pos:start="157:27" pos:end="157:39">E1000_ICS_RXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="159:13" pos:end="159:22">return <expr pos:start="159:20" pos:end="159:21"><operator pos:start="159:20" pos:end="159:20">-</operator><literal type="number" pos:start="159:21" pos:end="159:21">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <do pos:start="163:5" pos:end="267:39">do <block pos:start="163:8" pos:end="267:5">{<block_content pos:start="165:9" pos:end="265:9">

        <expr_stmt pos:start="165:9" pos:end="165:45"><expr pos:start="165:9" pos:end="165:44"><name pos:start="165:9" pos:end="165:17">desc_size</name> <operator pos:start="165:19" pos:end="165:19">=</operator> <name pos:start="165:21" pos:end="165:30">total_size</name> <operator pos:start="165:32" pos:end="165:32">-</operator> <name pos:start="165:34" pos:end="165:44">desc_offset</name></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="171:9"><if pos:start="167:9" pos:end="171:9">if <condition pos:start="167:12" pos:end="167:38">(<expr pos:start="167:13" pos:end="167:37"><name pos:start="167:13" pos:end="167:21">desc_size</name> <operator pos:start="167:23" pos:end="167:23">&gt;</operator> <name pos:start="167:25" pos:end="167:37"><name pos:start="167:25" pos:end="167:25">s</name><operator pos:start="167:26" pos:end="167:27">-&gt;</operator><name pos:start="167:28" pos:end="167:37">rxbuf_size</name></name></expr>)</condition> <block pos:start="167:40" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:38">

            <expr_stmt pos:start="169:13" pos:end="169:38"><expr pos:start="169:13" pos:end="169:37"><name pos:start="169:13" pos:end="169:21">desc_size</name> <operator pos:start="169:23" pos:end="169:23">=</operator> <name pos:start="169:25" pos:end="169:37"><name pos:start="169:25" pos:end="169:25">s</name><operator pos:start="169:26" pos:end="169:27">-&gt;</operator><name pos:start="169:28" pos:end="169:37">rxbuf_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:64"><expr pos:start="173:9" pos:end="173:63"><name pos:start="173:9" pos:end="173:12">base</name> <operator pos:start="173:14" pos:end="173:14">=</operator> <call pos:start="173:16" pos:end="173:30"><name pos:start="173:16" pos:end="173:27">rx_desc_base</name><argument_list pos:start="173:28" pos:end="173:30">(<argument pos:start="173:29" pos:end="173:29"><expr pos:start="173:29" pos:end="173:29"><name pos:start="173:29" pos:end="173:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="173:32" pos:end="173:32">+</operator> <sizeof pos:start="173:34" pos:end="173:45">sizeof<argument_list pos:start="173:40" pos:end="173:45">(<argument pos:start="173:41" pos:end="173:44"><expr pos:start="173:41" pos:end="173:44"><name pos:start="173:41" pos:end="173:44">desc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="173:47" pos:end="173:47">*</operator> <name pos:start="173:49" pos:end="173:63"><name pos:start="173:49" pos:end="173:49">s</name><operator pos:start="173:50" pos:end="173:51">-&gt;</operator><name pos:start="173:52" pos:end="173:58">mac_reg</name><index pos:start="173:59" pos:end="173:63">[<expr pos:start="173:60" pos:end="173:62"><name pos:start="173:60" pos:end="173:62">RDH</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:51"><expr pos:start="175:9" pos:end="175:50"><call pos:start="175:9" pos:end="175:50"><name pos:start="175:9" pos:end="175:20">pci_dma_read</name><argument_list pos:start="175:21" pos:end="175:50">(<argument pos:start="175:22" pos:end="175:22"><expr pos:start="175:22" pos:end="175:22"><name pos:start="175:22" pos:end="175:22">d</name></expr></argument>, <argument pos:start="175:25" pos:end="175:28"><expr pos:start="175:25" pos:end="175:28"><name pos:start="175:25" pos:end="175:28">base</name></expr></argument>, <argument pos:start="175:31" pos:end="175:35"><expr pos:start="175:31" pos:end="175:35"><operator pos:start="175:31" pos:end="175:31">&amp;</operator><name pos:start="175:32" pos:end="175:35">desc</name></expr></argument>, <argument pos:start="175:38" pos:end="175:49"><expr pos:start="175:38" pos:end="175:49"><sizeof pos:start="175:38" pos:end="175:49">sizeof<argument_list pos:start="175:44" pos:end="175:49">(<argument pos:start="175:45" pos:end="175:48"><expr pos:start="175:45" pos:end="175:48"><name pos:start="175:45" pos:end="175:48">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:36"><expr pos:start="177:9" pos:end="177:35"><name pos:start="177:9" pos:end="177:20"><name pos:start="177:9" pos:end="177:12">desc</name><operator pos:start="177:13" pos:end="177:13">.</operator><name pos:start="177:14" pos:end="177:20">special</name></name> <operator pos:start="177:22" pos:end="177:22">=</operator> <name pos:start="177:24" pos:end="177:35">vlan_special</name></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:57"><expr pos:start="179:9" pos:end="179:56"><name pos:start="179:9" pos:end="179:19"><name pos:start="179:9" pos:end="179:12">desc</name><operator pos:start="179:13" pos:end="179:13">.</operator><name pos:start="179:14" pos:end="179:19">status</name></name> <operator pos:start="179:21" pos:end="179:22">|=</operator> <operator pos:start="179:24" pos:end="179:24">(</operator><name pos:start="179:25" pos:end="179:35">vlan_status</name> <operator pos:start="179:37" pos:end="179:37">|</operator> <name pos:start="179:39" pos:end="179:55">E1000_RXD_STAT_DD</name><operator pos:start="179:56" pos:end="179:56">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="243:9"><if pos:start="181:9" pos:end="239:9">if <condition pos:start="181:12" pos:end="181:29">(<expr pos:start="181:13" pos:end="181:28"><name pos:start="181:13" pos:end="181:28"><name pos:start="181:13" pos:end="181:16">desc</name><operator pos:start="181:17" pos:end="181:17">.</operator><name pos:start="181:18" pos:end="181:28">buffer_addr</name></name></expr>)</condition> <block pos:start="181:31" pos:end="239:9">{<block_content pos:start="183:13" pos:end="237:13">

            <if_stmt pos:start="183:13" pos:end="219:13"><if pos:start="183:13" pos:end="219:13">if <condition pos:start="183:16" pos:end="183:35">(<expr pos:start="183:17" pos:end="183:34"><name pos:start="183:17" pos:end="183:27">desc_offset</name> <operator pos:start="183:29" pos:end="183:29">&lt;</operator> <name pos:start="183:31" pos:end="183:34">size</name></expr>)</condition> <block pos:start="183:37" pos:end="219:13">{<block_content pos:start="185:17" pos:end="217:36">

                <decl_stmt pos:start="185:17" pos:end="185:32"><decl pos:start="185:17" pos:end="185:31"><type pos:start="185:17" pos:end="185:22"><name pos:start="185:17" pos:end="185:22">size_t</name></type> <name pos:start="185:24" pos:end="185:31">iov_copy</name></decl>;</decl_stmt>

                <decl_stmt pos:start="187:17" pos:end="187:58"><decl pos:start="187:17" pos:end="187:57"><type pos:start="187:17" pos:end="187:22"><name pos:start="187:17" pos:end="187:22">hwaddr</name></type> <name pos:start="187:24" pos:end="187:25">ba</name> <init pos:start="187:27" pos:end="187:57">= <expr pos:start="187:29" pos:end="187:57"><call pos:start="187:29" pos:end="187:57"><name pos:start="187:29" pos:end="187:39">le64_to_cpu</name><argument_list pos:start="187:40" pos:end="187:57">(<argument pos:start="187:41" pos:end="187:56"><expr pos:start="187:41" pos:end="187:56"><name pos:start="187:41" pos:end="187:56"><name pos:start="187:41" pos:end="187:44">desc</name><operator pos:start="187:45" pos:end="187:45">.</operator><name pos:start="187:46" pos:end="187:56">buffer_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="189:17" pos:end="189:54"><decl pos:start="189:17" pos:end="189:53"><type pos:start="189:17" pos:end="189:22"><name pos:start="189:17" pos:end="189:22">size_t</name></type> <name pos:start="189:24" pos:end="189:32">copy_size</name> <init pos:start="189:34" pos:end="189:53">= <expr pos:start="189:36" pos:end="189:53"><name pos:start="189:36" pos:end="189:39">size</name> <operator pos:start="189:41" pos:end="189:41">-</operator> <name pos:start="189:43" pos:end="189:53">desc_offset</name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="191:17" pos:end="195:17"><if pos:start="191:17" pos:end="195:17">if <condition pos:start="191:20" pos:end="191:46">(<expr pos:start="191:21" pos:end="191:45"><name pos:start="191:21" pos:end="191:29">copy_size</name> <operator pos:start="191:31" pos:end="191:31">&gt;</operator> <name pos:start="191:33" pos:end="191:45"><name pos:start="191:33" pos:end="191:33">s</name><operator pos:start="191:34" pos:end="191:35">-&gt;</operator><name pos:start="191:36" pos:end="191:45">rxbuf_size</name></name></expr>)</condition> <block pos:start="191:48" pos:end="195:17">{<block_content pos:start="193:21" pos:end="193:46">

                    <expr_stmt pos:start="193:21" pos:end="193:46"><expr pos:start="193:21" pos:end="193:45"><name pos:start="193:21" pos:end="193:29">copy_size</name> <operator pos:start="193:31" pos:end="193:31">=</operator> <name pos:start="193:33" pos:end="193:45"><name pos:start="193:33" pos:end="193:33">s</name><operator pos:start="193:34" pos:end="193:35">-&gt;</operator><name pos:start="193:36" pos:end="193:45">rxbuf_size</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <do pos:start="197:17" pos:end="217:36">do <block pos:start="197:20" pos:end="217:17">{<block_content pos:start="199:21" pos:end="215:21">

                    <expr_stmt pos:start="199:21" pos:end="199:70"><expr pos:start="199:21" pos:end="199:69"><name pos:start="199:21" pos:end="199:28">iov_copy</name> <operator pos:start="199:30" pos:end="199:30">=</operator> <call pos:start="199:32" pos:end="199:69"><name pos:start="199:32" pos:end="199:34">MIN</name><argument_list pos:start="199:35" pos:end="199:69">(<argument pos:start="199:36" pos:end="199:44"><expr pos:start="199:36" pos:end="199:44"><name pos:start="199:36" pos:end="199:44">copy_size</name></expr></argument>, <argument pos:start="199:47" pos:end="199:68"><expr pos:start="199:47" pos:end="199:68"><name pos:start="199:47" pos:end="199:58"><name pos:start="199:47" pos:end="199:49">iov</name><operator pos:start="199:50" pos:end="199:51">-&gt;</operator><name pos:start="199:52" pos:end="199:58">iov_len</name></name> <operator pos:start="199:60" pos:end="199:60">-</operator> <name pos:start="199:62" pos:end="199:68">iov_ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="201:21" pos:end="201:76"><expr pos:start="201:21" pos:end="201:75"><call pos:start="201:21" pos:end="201:75"><name pos:start="201:21" pos:end="201:33">pci_dma_write</name><argument_list pos:start="201:34" pos:end="201:75">(<argument pos:start="201:35" pos:end="201:35"><expr pos:start="201:35" pos:end="201:35"><name pos:start="201:35" pos:end="201:35">d</name></expr></argument>, <argument pos:start="201:38" pos:end="201:39"><expr pos:start="201:38" pos:end="201:39"><name pos:start="201:38" pos:end="201:39">ba</name></expr></argument>, <argument pos:start="201:42" pos:end="201:64"><expr pos:start="201:42" pos:end="201:64"><name pos:start="201:42" pos:end="201:54"><name pos:start="201:42" pos:end="201:44">iov</name><operator pos:start="201:45" pos:end="201:46">-&gt;</operator><name pos:start="201:47" pos:end="201:54">iov_base</name></name> <operator pos:start="201:56" pos:end="201:56">+</operator> <name pos:start="201:58" pos:end="201:64">iov_ofs</name></expr></argument>, <argument pos:start="201:67" pos:end="201:74"><expr pos:start="201:67" pos:end="201:74"><name pos:start="201:67" pos:end="201:74">iov_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="203:21" pos:end="203:42"><expr pos:start="203:21" pos:end="203:41"><name pos:start="203:21" pos:end="203:29">copy_size</name> <operator pos:start="203:31" pos:end="203:32">-=</operator> <name pos:start="203:34" pos:end="203:41">iov_copy</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="205:21" pos:end="205:35"><expr pos:start="205:21" pos:end="205:34"><name pos:start="205:21" pos:end="205:22">ba</name> <operator pos:start="205:24" pos:end="205:25">+=</operator> <name pos:start="205:27" pos:end="205:34">iov_copy</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:40"><expr pos:start="207:21" pos:end="207:39"><name pos:start="207:21" pos:end="207:27">iov_ofs</name> <operator pos:start="207:29" pos:end="207:30">+=</operator> <name pos:start="207:32" pos:end="207:39">iov_copy</name></expr>;</expr_stmt>

                    <if_stmt pos:start="209:21" pos:end="215:21"><if pos:start="209:21" pos:end="215:21">if <condition pos:start="209:24" pos:end="209:48">(<expr pos:start="209:25" pos:end="209:47"><name pos:start="209:25" pos:end="209:31">iov_ofs</name> <operator pos:start="209:33" pos:end="209:34">==</operator> <name pos:start="209:36" pos:end="209:47"><name pos:start="209:36" pos:end="209:38">iov</name><operator pos:start="209:39" pos:end="209:40">-&gt;</operator><name pos:start="209:41" pos:end="209:47">iov_len</name></name></expr>)</condition> <block pos:start="209:50" pos:end="215:21">{<block_content pos:start="211:25" pos:end="213:36">

                        <expr_stmt pos:start="211:25" pos:end="211:30"><expr pos:start="211:25" pos:end="211:29"><name pos:start="211:25" pos:end="211:27">iov</name><operator pos:start="211:28" pos:end="211:29">++</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="213:25" pos:end="213:36"><expr pos:start="213:25" pos:end="213:35"><name pos:start="213:25" pos:end="213:31">iov_ofs</name> <operator pos:start="213:33" pos:end="213:33">=</operator> <literal type="number" pos:start="213:35" pos:end="213:35">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block> while <condition pos:start="217:25" pos:end="217:35">(<expr pos:start="217:26" pos:end="217:34"><name pos:start="217:26" pos:end="217:34">copy_size</name></expr>)</condition>;</do>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:37"><expr pos:start="221:13" pos:end="221:36"><name pos:start="221:13" pos:end="221:23">desc_offset</name> <operator pos:start="221:25" pos:end="221:26">+=</operator> <name pos:start="221:28" pos:end="221:36">desc_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:49"><expr pos:start="223:13" pos:end="223:48"><name pos:start="223:13" pos:end="223:23"><name pos:start="223:13" pos:end="223:16">desc</name><operator pos:start="223:17" pos:end="223:17">.</operator><name pos:start="223:18" pos:end="223:23">length</name></name> <operator pos:start="223:25" pos:end="223:25">=</operator> <call pos:start="223:27" pos:end="223:48"><name pos:start="223:27" pos:end="223:37">cpu_to_le16</name><argument_list pos:start="223:38" pos:end="223:48">(<argument pos:start="223:39" pos:end="223:47"><expr pos:start="223:39" pos:end="223:47"><name pos:start="223:39" pos:end="223:47">desc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="225:13" pos:end="237:13"><if pos:start="225:13" pos:end="229:13">if <condition pos:start="225:16" pos:end="225:42">(<expr pos:start="225:17" pos:end="225:41"><name pos:start="225:17" pos:end="225:27">desc_offset</name> <operator pos:start="225:29" pos:end="225:30">&gt;=</operator> <name pos:start="225:32" pos:end="225:41">total_size</name></expr>)</condition> <block pos:start="225:44" pos:end="229:13">{<block_content pos:start="227:17" pos:end="227:72">

                <expr_stmt pos:start="227:17" pos:end="227:72"><expr pos:start="227:17" pos:end="227:71"><name pos:start="227:17" pos:end="227:27"><name pos:start="227:17" pos:end="227:20">desc</name><operator pos:start="227:21" pos:end="227:21">.</operator><name pos:start="227:22" pos:end="227:27">status</name></name> <operator pos:start="227:29" pos:end="227:30">|=</operator> <name pos:start="227:32" pos:end="227:49">E1000_RXD_STAT_EOP</name> <operator pos:start="227:51" pos:end="227:51">|</operator> <name pos:start="227:53" pos:end="227:71">E1000_RXD_STAT_IXSM</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="229:15" pos:end="237:13">else <block pos:start="229:20" pos:end="237:13">{<block_content pos:start="235:17" pos:end="235:51">

                <comment type="block" pos:start="231:17" pos:end="233:59">/* Guest zeroing out status is not a hardware requirement.

                   Clear EOP in case guest didn't do it. */</comment>

                <expr_stmt pos:start="235:17" pos:end="235:51"><expr pos:start="235:17" pos:end="235:50"><name pos:start="235:17" pos:end="235:27"><name pos:start="235:17" pos:end="235:20">desc</name><operator pos:start="235:21" pos:end="235:21">.</operator><name pos:start="235:22" pos:end="235:27">status</name></name> <operator pos:start="235:29" pos:end="235:30">&amp;=</operator> <operator pos:start="235:32" pos:end="235:32">~</operator><name pos:start="235:33" pos:end="235:50">E1000_RXD_STAT_EOP</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="239:11" pos:end="243:9">else <block pos:start="239:16" pos:end="243:9">{<block_content pos:start="241:13" pos:end="241:49"> <comment type="line" pos:start="239:18" pos:end="239:74">// as per intel docs; skip descriptors with null buf addr</comment>

            <expr_stmt pos:start="241:13" pos:end="241:49"><expr pos:start="241:13" pos:end="241:48"><call pos:start="241:13" pos:end="241:48"><name pos:start="241:13" pos:end="241:18">DBGOUT</name><argument_list pos:start="241:19" pos:end="241:48">(<argument pos:start="241:20" pos:end="241:21"><expr pos:start="241:20" pos:end="241:21"><name pos:start="241:20" pos:end="241:21">RX</name></expr></argument>, <argument pos:start="241:24" pos:end="241:47"><expr pos:start="241:24" pos:end="241:47"><literal type="string" pos:start="241:24" pos:end="241:47">"Null RX descriptor!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:52"><expr pos:start="245:9" pos:end="245:51"><call pos:start="245:9" pos:end="245:51"><name pos:start="245:9" pos:end="245:21">pci_dma_write</name><argument_list pos:start="245:22" pos:end="245:51">(<argument pos:start="245:23" pos:end="245:23"><expr pos:start="245:23" pos:end="245:23"><name pos:start="245:23" pos:end="245:23">d</name></expr></argument>, <argument pos:start="245:26" pos:end="245:29"><expr pos:start="245:26" pos:end="245:29"><name pos:start="245:26" pos:end="245:29">base</name></expr></argument>, <argument pos:start="245:32" pos:end="245:36"><expr pos:start="245:32" pos:end="245:36"><operator pos:start="245:32" pos:end="245:32">&amp;</operator><name pos:start="245:33" pos:end="245:36">desc</name></expr></argument>, <argument pos:start="245:39" pos:end="245:50"><expr pos:start="245:39" pos:end="245:50"><sizeof pos:start="245:39" pos:end="245:50">sizeof<argument_list pos:start="245:45" pos:end="245:50">(<argument pos:start="245:46" pos:end="245:49"><expr pos:start="245:46" pos:end="245:49"><name pos:start="245:46" pos:end="245:49">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="249:9" pos:end="251:32"><if pos:start="249:9" pos:end="251:32">if <condition pos:start="249:12" pos:end="249:66">(<expr pos:start="249:13" pos:end="249:65"><operator pos:start="249:13" pos:end="249:14">++</operator><name pos:start="249:15" pos:end="249:29"><name pos:start="249:15" pos:end="249:15">s</name><operator pos:start="249:16" pos:end="249:17">-&gt;</operator><name pos:start="249:18" pos:end="249:24">mac_reg</name><index pos:start="249:25" pos:end="249:29">[<expr pos:start="249:26" pos:end="249:28"><name pos:start="249:26" pos:end="249:28">RDH</name></expr>]</index></name> <operator pos:start="249:31" pos:end="249:31">*</operator> <sizeof pos:start="249:33" pos:end="249:44">sizeof<argument_list pos:start="249:39" pos:end="249:44">(<argument pos:start="249:40" pos:end="249:43"><expr pos:start="249:40" pos:end="249:43"><name pos:start="249:40" pos:end="249:43">desc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="249:46" pos:end="249:47">&gt;=</operator> <name pos:start="249:49" pos:end="249:65"><name pos:start="249:49" pos:end="249:49">s</name><operator pos:start="249:50" pos:end="249:51">-&gt;</operator><name pos:start="249:52" pos:end="249:58">mac_reg</name><index pos:start="249:59" pos:end="249:65">[<expr pos:start="249:60" pos:end="249:64"><name pos:start="249:60" pos:end="249:64">RDLEN</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="251:13" pos:end="251:32"><block_content pos:start="251:13" pos:end="251:32">

            <expr_stmt pos:start="251:13" pos:end="251:32"><expr pos:start="251:13" pos:end="251:31"><name pos:start="251:13" pos:end="251:27"><name pos:start="251:13" pos:end="251:13">s</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:22">mac_reg</name><index pos:start="251:23" pos:end="251:27">[<expr pos:start="251:24" pos:end="251:26"><name pos:start="251:24" pos:end="251:26">RDH</name></expr>]</index></name> <operator pos:start="251:29" pos:end="251:29">=</operator> <literal type="number" pos:start="251:31" pos:end="251:31">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="253:9" pos:end="253:50">/* see comment in start_xmit; same here */</comment>

        <if_stmt pos:start="255:9" pos:end="265:9"><if pos:start="255:9" pos:end="265:9">if <condition pos:start="255:12" pos:end="255:41">(<expr pos:start="255:13" pos:end="255:40"><name pos:start="255:13" pos:end="255:27"><name pos:start="255:13" pos:end="255:13">s</name><operator pos:start="255:14" pos:end="255:15">-&gt;</operator><name pos:start="255:16" pos:end="255:22">mac_reg</name><index pos:start="255:23" pos:end="255:27">[<expr pos:start="255:24" pos:end="255:26"><name pos:start="255:24" pos:end="255:26">RDH</name></expr>]</index></name> <operator pos:start="255:29" pos:end="255:30">==</operator> <name pos:start="255:32" pos:end="255:40">rdh_start</name></expr>)</condition> <block pos:start="255:43" pos:end="265:9">{<block_content pos:start="257:13" pos:end="263:22">

            <expr_stmt pos:start="257:13" pos:end="259:66"><expr pos:start="257:13" pos:end="259:65"><call pos:start="257:13" pos:end="259:65"><name pos:start="257:13" pos:end="257:18">DBGOUT</name><argument_list pos:start="257:19" pos:end="259:65">(<argument pos:start="257:20" pos:end="257:24"><expr pos:start="257:20" pos:end="257:24"><name pos:start="257:20" pos:end="257:24">RXERR</name></expr></argument>, <argument pos:start="257:27" pos:end="257:66"><expr pos:start="257:27" pos:end="257:66"><literal type="string" pos:start="257:27" pos:end="257:66">"RDH wraparound @%x, RDT %x, RDLEN %x\n"</literal></expr></argument>,

                   <argument pos:start="259:20" pos:end="259:28"><expr pos:start="259:20" pos:end="259:28"><name pos:start="259:20" pos:end="259:28">rdh_start</name></expr></argument>, <argument pos:start="259:31" pos:end="259:45"><expr pos:start="259:31" pos:end="259:45"><name pos:start="259:31" pos:end="259:45"><name pos:start="259:31" pos:end="259:31">s</name><operator pos:start="259:32" pos:end="259:33">-&gt;</operator><name pos:start="259:34" pos:end="259:40">mac_reg</name><index pos:start="259:41" pos:end="259:45">[<expr pos:start="259:42" pos:end="259:44"><name pos:start="259:42" pos:end="259:44">RDT</name></expr>]</index></name></expr></argument>, <argument pos:start="259:48" pos:end="259:64"><expr pos:start="259:48" pos:end="259:64"><name pos:start="259:48" pos:end="259:64"><name pos:start="259:48" pos:end="259:48">s</name><operator pos:start="259:49" pos:end="259:50">-&gt;</operator><name pos:start="259:51" pos:end="259:57">mac_reg</name><index pos:start="259:58" pos:end="259:64">[<expr pos:start="259:59" pos:end="259:63"><name pos:start="259:59" pos:end="259:63">RDLEN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:41"><expr pos:start="261:13" pos:end="261:40"><call pos:start="261:13" pos:end="261:40"><name pos:start="261:13" pos:end="261:19">set_ics</name><argument_list pos:start="261:20" pos:end="261:40">(<argument pos:start="261:21" pos:end="261:21"><expr pos:start="261:21" pos:end="261:21"><name pos:start="261:21" pos:end="261:21">s</name></expr></argument>, <argument pos:start="261:24" pos:end="261:24"><expr pos:start="261:24" pos:end="261:24"><literal type="number" pos:start="261:24" pos:end="261:24">0</literal></expr></argument>, <argument pos:start="261:27" pos:end="261:39"><expr pos:start="261:27" pos:end="261:39"><name pos:start="261:27" pos:end="261:39">E1000_ICS_RXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="263:13" pos:end="263:22">return <expr pos:start="263:20" pos:end="263:21"><operator pos:start="263:20" pos:end="263:20">-</operator><literal type="number" pos:start="263:21" pos:end="263:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="267:13" pos:end="267:38">(<expr pos:start="267:14" pos:end="267:37"><name pos:start="267:14" pos:end="267:24">desc_offset</name> <operator pos:start="267:26" pos:end="267:26">&lt;</operator> <name pos:start="267:28" pos:end="267:37">total_size</name></expr>)</condition>;</do>



    <expr_stmt pos:start="271:5" pos:end="271:48"><expr pos:start="271:5" pos:end="271:47"><call pos:start="271:5" pos:end="271:47"><name pos:start="271:5" pos:end="271:23">increase_size_stats</name><argument_list pos:start="271:24" pos:end="271:47">(<argument pos:start="271:25" pos:end="271:25"><expr pos:start="271:25" pos:end="271:25"><name pos:start="271:25" pos:end="271:25">s</name></expr></argument>, <argument pos:start="271:28" pos:end="271:34"><expr pos:start="271:28" pos:end="271:34"><name pos:start="271:28" pos:end="271:34">PRCregs</name></expr></argument>, <argument pos:start="271:37" pos:end="271:46"><expr pos:start="271:37" pos:end="271:46"><name pos:start="271:37" pos:end="271:46">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:32"><expr pos:start="273:5" pos:end="273:31"><call pos:start="273:5" pos:end="273:31"><name pos:start="273:5" pos:end="273:23">inc_reg_if_not_full</name><argument_list pos:start="273:24" pos:end="273:31">(<argument pos:start="273:25" pos:end="273:25"><expr pos:start="273:25" pos:end="273:25"><name pos:start="273:25" pos:end="273:25">s</name></expr></argument>, <argument pos:start="273:28" pos:end="273:30"><expr pos:start="273:28" pos:end="273:30"><name pos:start="273:28" pos:end="273:30">TPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:39"><expr pos:start="275:5" pos:end="275:38"><name pos:start="275:5" pos:end="275:20"><name pos:start="275:5" pos:end="275:5">s</name><operator pos:start="275:6" pos:end="275:7">-&gt;</operator><name pos:start="275:8" pos:end="275:14">mac_reg</name><index pos:start="275:15" pos:end="275:20">[<expr pos:start="275:16" pos:end="275:19"><name pos:start="275:16" pos:end="275:19">GPRC</name></expr>]</index></name> <operator pos:start="275:22" pos:end="275:22">=</operator> <name pos:start="275:24" pos:end="275:38"><name pos:start="275:24" pos:end="275:24">s</name><operator pos:start="275:25" pos:end="275:26">-&gt;</operator><name pos:start="275:27" pos:end="275:33">mac_reg</name><index pos:start="275:34" pos:end="275:38">[<expr pos:start="275:35" pos:end="275:37"><name pos:start="275:35" pos:end="275:37">TPR</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block" pos:start="277:5" pos:end="285:7">/* TOR - Total Octets Received:

     * This register includes bytes received in a packet from the &lt;Destination

     * Address&gt; field through the &lt;CRC&gt; field, inclusively.

     * Always include FCS length (4) in size.

     */</comment>

    <expr_stmt pos:start="287:5" pos:end="287:43"><expr pos:start="287:5" pos:end="287:42"><call pos:start="287:5" pos:end="287:42"><name pos:start="287:5" pos:end="287:25">grow_8reg_if_not_full</name><argument_list pos:start="287:26" pos:end="287:42">(<argument pos:start="287:27" pos:end="287:27"><expr pos:start="287:27" pos:end="287:27"><name pos:start="287:27" pos:end="287:27">s</name></expr></argument>, <argument pos:start="287:30" pos:end="287:33"><expr pos:start="287:30" pos:end="287:33"><name pos:start="287:30" pos:end="287:33">TORL</name></expr></argument>, <argument pos:start="287:36" pos:end="287:41"><expr pos:start="287:36" pos:end="287:41"><name pos:start="287:36" pos:end="287:39">size</name><operator pos:start="287:40" pos:end="287:40">+</operator><literal type="number" pos:start="287:41" pos:end="287:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:41"><expr pos:start="289:5" pos:end="289:40"><name pos:start="289:5" pos:end="289:21"><name pos:start="289:5" pos:end="289:5">s</name><operator pos:start="289:6" pos:end="289:7">-&gt;</operator><name pos:start="289:8" pos:end="289:14">mac_reg</name><index pos:start="289:15" pos:end="289:21">[<expr pos:start="289:16" pos:end="289:20"><name pos:start="289:16" pos:end="289:20">GORCL</name></expr>]</index></name> <operator pos:start="289:23" pos:end="289:23">=</operator> <name pos:start="289:25" pos:end="289:40"><name pos:start="289:25" pos:end="289:25">s</name><operator pos:start="289:26" pos:end="289:27">-&gt;</operator><name pos:start="289:28" pos:end="289:34">mac_reg</name><index pos:start="289:35" pos:end="289:40">[<expr pos:start="289:36" pos:end="289:39"><name pos:start="289:36" pos:end="289:39">TORL</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:41"><expr pos:start="291:5" pos:end="291:40"><name pos:start="291:5" pos:end="291:21"><name pos:start="291:5" pos:end="291:5">s</name><operator pos:start="291:6" pos:end="291:7">-&gt;</operator><name pos:start="291:8" pos:end="291:14">mac_reg</name><index pos:start="291:15" pos:end="291:21">[<expr pos:start="291:16" pos:end="291:20"><name pos:start="291:16" pos:end="291:20">GORCH</name></expr>]</index></name> <operator pos:start="291:23" pos:end="291:23">=</operator> <name pos:start="291:25" pos:end="291:40"><name pos:start="291:25" pos:end="291:25">s</name><operator pos:start="291:26" pos:end="291:27">-&gt;</operator><name pos:start="291:28" pos:end="291:34">mac_reg</name><index pos:start="291:35" pos:end="291:40">[<expr pos:start="291:36" pos:end="291:39"><name pos:start="291:36" pos:end="291:39">TORH</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="295:5" pos:end="295:23"><expr pos:start="295:5" pos:end="295:22"><name pos:start="295:5" pos:end="295:5">n</name> <operator pos:start="295:7" pos:end="295:7">=</operator> <name pos:start="295:9" pos:end="295:22">E1000_ICS_RXT0</name></expr>;</expr_stmt>

    <if_stmt pos:start="297:5" pos:end="299:48"><if pos:start="297:5" pos:end="299:48">if <condition pos:start="297:8" pos:end="297:50">(<expr pos:start="297:9" pos:end="297:49"><operator pos:start="297:9" pos:end="297:9">(</operator><name pos:start="297:10" pos:end="297:12">rdt</name> <operator pos:start="297:14" pos:end="297:14">=</operator> <name pos:start="297:16" pos:end="297:30"><name pos:start="297:16" pos:end="297:16">s</name><operator pos:start="297:17" pos:end="297:18">-&gt;</operator><name pos:start="297:19" pos:end="297:25">mac_reg</name><index pos:start="297:26" pos:end="297:30">[<expr pos:start="297:27" pos:end="297:29"><name pos:start="297:27" pos:end="297:29">RDT</name></expr>]</index></name><operator pos:start="297:31" pos:end="297:31">)</operator> <operator pos:start="297:33" pos:end="297:33">&lt;</operator> <name pos:start="297:35" pos:end="297:49"><name pos:start="297:35" pos:end="297:35">s</name><operator pos:start="297:36" pos:end="297:37">-&gt;</operator><name pos:start="297:38" pos:end="297:44">mac_reg</name><index pos:start="297:45" pos:end="297:49">[<expr pos:start="297:46" pos:end="297:48"><name pos:start="297:46" pos:end="297:48">RDH</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="299:9" pos:end="299:48"><block_content pos:start="299:9" pos:end="299:48">

        <expr_stmt pos:start="299:9" pos:end="299:48"><expr pos:start="299:9" pos:end="299:47"><name pos:start="299:9" pos:end="299:11">rdt</name> <operator pos:start="299:13" pos:end="299:14">+=</operator> <name pos:start="299:16" pos:end="299:32"><name pos:start="299:16" pos:end="299:16">s</name><operator pos:start="299:17" pos:end="299:18">-&gt;</operator><name pos:start="299:19" pos:end="299:25">mac_reg</name><index pos:start="299:26" pos:end="299:32">[<expr pos:start="299:27" pos:end="299:31"><name pos:start="299:27" pos:end="299:31">RDLEN</name></expr>]</index></name> <operator pos:start="299:34" pos:end="299:34">/</operator> <sizeof pos:start="299:36" pos:end="299:47">sizeof<argument_list pos:start="299:42" pos:end="299:47">(<argument pos:start="299:43" pos:end="299:46"><expr pos:start="299:43" pos:end="299:46"><name pos:start="299:43" pos:end="299:46">desc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="301:5" pos:end="305:30"><if pos:start="301:5" pos:end="305:30">if <condition pos:start="301:8" pos:end="303:27">(<expr pos:start="301:9" pos:end="303:26"><operator pos:start="301:9" pos:end="301:9">(</operator><operator pos:start="301:10" pos:end="301:10">(</operator><name pos:start="301:11" pos:end="301:13">rdt</name> <operator pos:start="301:15" pos:end="301:15">-</operator> <name pos:start="301:17" pos:end="301:31"><name pos:start="301:17" pos:end="301:17">s</name><operator pos:start="301:18" pos:end="301:19">-&gt;</operator><name pos:start="301:20" pos:end="301:26">mac_reg</name><index pos:start="301:27" pos:end="301:31">[<expr pos:start="301:28" pos:end="301:30"><name pos:start="301:28" pos:end="301:30">RDH</name></expr>]</index></name><operator pos:start="301:32" pos:end="301:32">)</operator> <operator pos:start="301:34" pos:end="301:34">*</operator> <sizeof pos:start="301:36" pos:end="301:47">sizeof<argument_list pos:start="301:42" pos:end="301:47">(<argument pos:start="301:43" pos:end="301:46"><expr pos:start="301:43" pos:end="301:46"><name pos:start="301:43" pos:end="301:46">desc</name></expr></argument>)</argument_list></sizeof><operator pos:start="301:48" pos:end="301:48">)</operator> <operator pos:start="301:50" pos:end="301:51">&lt;=</operator> <name pos:start="301:53" pos:end="301:69"><name pos:start="301:53" pos:end="301:53">s</name><operator pos:start="301:54" pos:end="301:55">-&gt;</operator><name pos:start="301:56" pos:end="301:62">mac_reg</name><index pos:start="301:63" pos:end="301:69">[<expr pos:start="301:64" pos:end="301:68"><name pos:start="301:64" pos:end="301:68">RDLEN</name></expr>]</index></name> <operator pos:start="301:71" pos:end="301:72">&gt;&gt;</operator>

        <name pos:start="303:9" pos:end="303:26"><name pos:start="303:9" pos:end="303:9">s</name><operator pos:start="303:10" pos:end="303:11">-&gt;</operator><name pos:start="303:12" pos:end="303:26">rxbuf_min_shift</name></name></expr>)</condition><block type="pseudo" pos:start="305:9" pos:end="305:30"><block_content pos:start="305:9" pos:end="305:30">

        <expr_stmt pos:start="305:9" pos:end="305:30"><expr pos:start="305:9" pos:end="305:29"><name pos:start="305:9" pos:end="305:9">n</name> <operator pos:start="305:11" pos:end="305:12">|=</operator> <name pos:start="305:14" pos:end="305:29">E1000_ICS_RXDMT0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="309:5" pos:end="309:21"><expr pos:start="309:5" pos:end="309:20"><call pos:start="309:5" pos:end="309:20"><name pos:start="309:5" pos:end="309:11">set_ics</name><argument_list pos:start="309:12" pos:end="309:20">(<argument pos:start="309:13" pos:end="309:13"><expr pos:start="309:13" pos:end="309:13"><name pos:start="309:13" pos:end="309:13">s</name></expr></argument>, <argument pos:start="309:16" pos:end="309:16"><expr pos:start="309:16" pos:end="309:16"><literal type="number" pos:start="309:16" pos:end="309:16">0</literal></expr></argument>, <argument pos:start="309:19" pos:end="309:19"><expr pos:start="309:19" pos:end="309:19"><name pos:start="309:19" pos:end="309:19">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="313:5" pos:end="313:16">return <expr pos:start="313:12" pos:end="313:15"><name pos:start="313:12" pos:end="313:15">size</name></expr>;</return>

</block_content>}</block>
</unit>
