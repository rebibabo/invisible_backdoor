<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9525.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:29">s390_cpu_handle_mmu_fault</name><parameter_list pos:start="1:30" pos:end="3:50">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:38">CPUState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">cs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:49">vaddr</name></type> <name pos:start="1:51" pos:end="1:60">orig_vaddr</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:36"><decl pos:start="3:31" pos:end="3:36"><type pos:start="3:31" pos:end="3:36"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:36">rw</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:49"><decl pos:start="3:39" pos:end="3:49"><type pos:start="3:39" pos:end="3:49"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:49">mmu_idx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:13">

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">S390CPU</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">cpu</name> <init pos:start="7:18" pos:end="7:31">= <expr pos:start="7:20" pos:end="7:31"><call pos:start="7:20" pos:end="7:31"><name pos:start="7:20" pos:end="7:27">S390_CPU</name><argument_list pos:start="7:28" pos:end="7:31">(<argument pos:start="7:29" pos:end="7:30"><expr pos:start="7:29" pos:end="7:30"><name pos:start="7:29" pos:end="7:30">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">CPUS390XState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">env</name> <init pos:start="9:24" pos:end="9:34">= <expr pos:start="9:26" pos:end="9:34"><operator pos:start="9:26" pos:end="9:26">&amp;</operator><name pos:start="9:27" pos:end="9:34"><name pos:start="9:27" pos:end="9:29">cpu</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:46"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:16">asc</name> <init pos:start="11:18" pos:end="11:46">= <expr pos:start="11:20" pos:end="11:46"><call pos:start="11:20" pos:end="11:46"><name pos:start="11:20" pos:end="11:37">cpu_mmu_idx_to_asc</name><argument_list pos:start="11:38" pos:end="11:46">(<argument pos:start="11:39" pos:end="11:45"><expr pos:start="11:39" pos:end="11:45"><name pos:start="11:39" pos:end="11:45">mmu_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:22">vaddr</name></decl>, <decl pos:start="13:25" pos:end="13:29"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:25" pos:end="13:29">raddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">prot</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:47"><expr pos:start="19:5" pos:end="21:46"><call pos:start="19:5" pos:end="21:46"><name pos:start="19:5" pos:end="19:11">DPRINTF</name><argument_list pos:start="19:12" pos:end="21:46">(<argument pos:start="19:13" pos:end="19:62"><expr pos:start="19:13" pos:end="19:62"><literal type="string" pos:start="19:13" pos:end="19:29">"%s: address 0x%"</literal> <name pos:start="19:31" pos:end="19:40">VADDR_PRIx</name> <literal type="string" pos:start="19:42" pos:end="19:62">" rw %d mmu_idx %d\n"</literal></expr></argument>,

            <argument pos:start="21:13" pos:end="21:20"><expr pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:20">__func__</name></expr></argument>, <argument pos:start="21:23" pos:end="21:32"><expr pos:start="21:23" pos:end="21:32"><name pos:start="21:23" pos:end="21:32">orig_vaddr</name></expr></argument>, <argument pos:start="21:35" pos:end="21:36"><expr pos:start="21:35" pos:end="21:36"><name pos:start="21:35" pos:end="21:36">rw</name></expr></argument>, <argument pos:start="21:39" pos:end="21:45"><expr pos:start="21:39" pos:end="21:45"><name pos:start="21:39" pos:end="21:45">mmu_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:35"><expr pos:start="25:5" pos:end="25:34"><name pos:start="25:5" pos:end="25:14">orig_vaddr</name> <operator pos:start="25:16" pos:end="25:17">&amp;=</operator> <name pos:start="25:19" pos:end="25:34">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:23"><expr pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:9">vaddr</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:22">orig_vaddr</name></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:21">/* 31-Bit mode */</comment>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:39">(<expr pos:start="33:9" pos:end="33:38"><operator pos:start="33:9" pos:end="33:9">!</operator><operator pos:start="33:10" pos:end="33:10">(</operator><name pos:start="33:11" pos:end="33:23"><name pos:start="33:11" pos:end="33:13">env</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:18">psw</name><operator pos:start="33:19" pos:end="33:19">.</operator><name pos:start="33:20" pos:end="33:23">mask</name></name> <operator pos:start="33:25" pos:end="33:25">&amp;</operator> <name pos:start="33:27" pos:end="33:37">PSW_MASK_64</name><operator pos:start="33:38" pos:end="33:38">)</operator></expr>)</condition> <block pos:start="33:41" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:28">

        <expr_stmt pos:start="35:9" pos:end="35:28"><expr pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:13">vaddr</name> <operator pos:start="35:15" pos:end="35:16">&amp;=</operator> <literal type="number" pos:start="35:18" pos:end="35:27">0x7fffffff</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:64">(<expr pos:start="41:9" pos:end="41:63"><call pos:start="41:9" pos:end="41:63"><name pos:start="41:9" pos:end="41:21">mmu_translate</name><argument_list pos:start="41:22" pos:end="41:63">(<argument pos:start="41:23" pos:end="41:25"><expr pos:start="41:23" pos:end="41:25"><name pos:start="41:23" pos:end="41:25">env</name></expr></argument>, <argument pos:start="41:28" pos:end="41:32"><expr pos:start="41:28" pos:end="41:32"><name pos:start="41:28" pos:end="41:32">vaddr</name></expr></argument>, <argument pos:start="41:35" pos:end="41:36"><expr pos:start="41:35" pos:end="41:36"><name pos:start="41:35" pos:end="41:36">rw</name></expr></argument>, <argument pos:start="41:39" pos:end="41:41"><expr pos:start="41:39" pos:end="41:41"><name pos:start="41:39" pos:end="41:41">asc</name></expr></argument>, <argument pos:start="41:44" pos:end="41:49"><expr pos:start="41:44" pos:end="41:49"><operator pos:start="41:44" pos:end="41:44">&amp;</operator><name pos:start="41:45" pos:end="41:49">raddr</name></expr></argument>, <argument pos:start="41:52" pos:end="41:56"><expr pos:start="41:52" pos:end="41:56"><operator pos:start="41:52" pos:end="41:52">&amp;</operator><name pos:start="41:53" pos:end="41:56">prot</name></expr></argument>, <argument pos:start="41:59" pos:end="41:62"><expr pos:start="41:59" pos:end="41:62"><name pos:start="41:59" pos:end="41:62">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:66" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:17">

        <comment type="block" pos:start="43:9" pos:end="43:44">/* Translation ended in exception */</comment>

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:33">/* check out of RAM access */</comment>

    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="53:25">(<expr pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:13">raddr</name> <operator pos:start="53:15" pos:end="53:15">&gt;</operator> <name pos:start="53:17" pos:end="53:24">ram_size</name></expr>)</condition> <block pos:start="53:27" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:17">

        <expr_stmt pos:start="55:9" pos:end="57:53"><expr pos:start="55:9" pos:end="57:52"><call pos:start="55:9" pos:end="57:52"><name pos:start="55:9" pos:end="55:15">DPRINTF</name><argument_list pos:start="55:16" pos:end="57:52">(<argument pos:start="55:17" pos:end="55:64"><expr pos:start="55:17" pos:end="55:64"><literal type="string" pos:start="55:17" pos:end="55:29">"%s: raddr %"</literal> <name pos:start="55:31" pos:end="55:36">PRIx64</name> <literal type="string" pos:start="55:38" pos:end="55:52">" &gt; ram_size %"</literal> <name pos:start="55:54" pos:end="55:59">PRIx64</name> <literal type="string" pos:start="55:61" pos:end="55:64">"\n"</literal></expr></argument>, <argument pos:start="55:67" pos:end="55:74"><expr pos:start="55:67" pos:end="55:74"><name pos:start="55:67" pos:end="55:74">__func__</name></expr></argument>,

                <argument pos:start="57:17" pos:end="57:31"><expr pos:start="57:17" pos:end="57:31"><operator pos:start="57:17" pos:end="57:17">(</operator><name pos:start="57:18" pos:end="57:25">uint64_t</name><operator pos:start="57:26" pos:end="57:26">)</operator><name pos:start="57:27" pos:end="57:31">raddr</name></expr></argument>, <argument pos:start="57:34" pos:end="57:51"><expr pos:start="57:34" pos:end="57:51"><operator pos:start="57:34" pos:end="57:34">(</operator><name pos:start="57:35" pos:end="57:42">uint64_t</name><operator pos:start="57:43" pos:end="57:43">)</operator><name pos:start="57:44" pos:end="57:51">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:62"><expr pos:start="59:9" pos:end="59:61"><call pos:start="59:9" pos:end="59:61"><name pos:start="59:9" pos:end="59:29">trigger_pgm_exception</name><argument_list pos:start="59:30" pos:end="59:61">(<argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><name pos:start="59:31" pos:end="59:33">env</name></expr></argument>, <argument pos:start="59:36" pos:end="59:49"><expr pos:start="59:36" pos:end="59:49"><name pos:start="59:36" pos:end="59:49">PGM_ADDRESSING</name></expr></argument>, <argument pos:start="59:52" pos:end="59:60"><expr pos:start="59:52" pos:end="59:60"><name pos:start="59:52" pos:end="59:60">ILEN_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:17">return <expr pos:start="61:16" pos:end="61:16"><literal type="number" pos:start="61:16" pos:end="61:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="69:62"><expr pos:start="67:5" pos:end="69:61"><call pos:start="67:5" pos:end="69:61"><name pos:start="67:5" pos:end="67:17">qemu_log_mask</name><argument_list pos:start="67:18" pos:end="69:61">(<argument pos:start="67:19" pos:end="67:29"><expr pos:start="67:19" pos:end="67:29"><name pos:start="67:19" pos:end="67:29">CPU_LOG_MMU</name></expr></argument>, <argument pos:start="67:32" pos:end="67:78"><expr pos:start="67:32" pos:end="67:78"><literal type="string" pos:start="67:32" pos:end="67:46">"%s: set tlb %"</literal> <name pos:start="67:48" pos:end="67:53">PRIx64</name> <literal type="string" pos:start="67:55" pos:end="67:61">" -&gt; %"</literal> <name pos:start="67:63" pos:end="67:68">PRIx64</name> <literal type="string" pos:start="67:70" pos:end="67:78">" (%x)\n"</literal></expr></argument>,

            <argument pos:start="69:13" pos:end="69:20"><expr pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:20">__func__</name></expr></argument>, <argument pos:start="69:23" pos:end="69:37"><expr pos:start="69:23" pos:end="69:37"><operator pos:start="69:23" pos:end="69:23">(</operator><name pos:start="69:24" pos:end="69:31">uint64_t</name><operator pos:start="69:32" pos:end="69:32">)</operator><name pos:start="69:33" pos:end="69:37">vaddr</name></expr></argument>, <argument pos:start="69:40" pos:end="69:54"><expr pos:start="69:40" pos:end="69:54"><operator pos:start="69:40" pos:end="69:40">(</operator><name pos:start="69:41" pos:end="69:48">uint64_t</name><operator pos:start="69:49" pos:end="69:49">)</operator><name pos:start="69:50" pos:end="69:54">raddr</name></expr></argument>, <argument pos:start="69:57" pos:end="69:60"><expr pos:start="69:57" pos:end="69:60"><name pos:start="69:57" pos:end="69:60">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="75:44"><expr pos:start="73:5" pos:end="75:43"><call pos:start="73:5" pos:end="75:43"><name pos:start="73:5" pos:end="73:16">tlb_set_page</name><argument_list pos:start="73:17" pos:end="75:43">(<argument pos:start="73:18" pos:end="73:19"><expr pos:start="73:18" pos:end="73:19"><name pos:start="73:18" pos:end="73:19">cs</name></expr></argument>, <argument pos:start="73:22" pos:end="73:31"><expr pos:start="73:22" pos:end="73:31"><name pos:start="73:22" pos:end="73:31">orig_vaddr</name></expr></argument>, <argument pos:start="73:34" pos:end="73:38"><expr pos:start="73:34" pos:end="73:38"><name pos:start="73:34" pos:end="73:38">raddr</name></expr></argument>, <argument pos:start="73:41" pos:end="73:44"><expr pos:start="73:41" pos:end="73:44"><name pos:start="73:41" pos:end="73:44">prot</name></expr></argument>,

                 <argument pos:start="75:18" pos:end="75:24"><expr pos:start="75:18" pos:end="75:24"><name pos:start="75:18" pos:end="75:24">mmu_idx</name></expr></argument>, <argument pos:start="75:27" pos:end="75:42"><expr pos:start="75:27" pos:end="75:42"><name pos:start="75:27" pos:end="75:42">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
