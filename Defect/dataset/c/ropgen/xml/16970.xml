<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16970.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">ram_save_setup</name><parameter_list pos:start="1:26" pos:end="1:52">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:34">QEMUFile</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">f</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:51">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="5:5" pos:end="133:13">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RAMBlock</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:19">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:21">ram_pages</name> <init pos:start="7:23" pos:end="7:61">= <expr pos:start="7:25" pos:end="7:61"><call pos:start="7:25" pos:end="7:41"><name pos:start="7:25" pos:end="7:39">last_ram_offset</name><argument_list pos:start="7:40" pos:end="7:41">()</argument_list></call> <operator pos:start="7:43" pos:end="7:44">&gt;&gt;</operator> <name pos:start="7:46" pos:end="7:61">TARGET_PAGE_BITS</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:45"><expr pos:start="11:5" pos:end="11:44"><name pos:start="11:5" pos:end="11:20">migration_bitmap</name> <operator pos:start="11:22" pos:end="11:22">=</operator> <call pos:start="11:24" pos:end="11:44"><name pos:start="11:24" pos:end="11:33">bitmap_new</name><argument_list pos:start="11:34" pos:end="11:44">(<argument pos:start="11:35" pos:end="11:43"><expr pos:start="11:35" pos:end="11:43"><name pos:start="11:35" pos:end="11:43">ram_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:47"><expr pos:start="13:5" pos:end="13:46"><call pos:start="13:5" pos:end="13:46"><name pos:start="13:5" pos:end="13:14">bitmap_set</name><argument_list pos:start="13:15" pos:end="13:46">(<argument pos:start="13:16" pos:end="13:31"><expr pos:start="13:16" pos:end="13:31"><name pos:start="13:16" pos:end="13:31">migration_bitmap</name></expr></argument>, <argument pos:start="13:34" pos:end="13:34"><expr pos:start="13:34" pos:end="13:34"><literal type="number" pos:start="13:34" pos:end="13:34">0</literal></expr></argument>, <argument pos:start="13:37" pos:end="13:45"><expr pos:start="13:37" pos:end="13:45"><name pos:start="13:37" pos:end="13:45">ram_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:25">migration_dirty_pages</name> <operator pos:start="15:27" pos:end="15:27">=</operator> <name pos:start="15:29" pos:end="15:37">ram_pages</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:28"><expr pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:19">mig_throttle_on</name> <operator pos:start="17:21" pos:end="17:21">=</operator> <name pos:start="17:23" pos:end="17:27">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:28"><expr pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:23">dirty_rate_high_cnt</name> <operator pos:start="19:25" pos:end="19:25">=</operator> <literal type="number" pos:start="19:27" pos:end="19:27">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="81:5"><if pos:start="23:5" pos:end="81:5">if <condition pos:start="23:8" pos:end="23:29">(<expr pos:start="23:9" pos:end="23:28"><call pos:start="23:9" pos:end="23:28"><name pos:start="23:9" pos:end="23:26">migrate_use_xbzrle</name><argument_list pos:start="23:27" pos:end="23:28">()</argument_list></call></expr>)</condition> <block pos:start="23:31" pos:end="81:5">{<block_content pos:start="25:9" pos:end="79:21">

        <expr_stmt pos:start="25:9" pos:end="25:35"><expr pos:start="25:9" pos:end="25:34"><call pos:start="25:9" pos:end="25:34"><name pos:start="25:9" pos:end="25:32">qemu_mutex_lock_iothread</name><argument_list pos:start="25:33" pos:end="25:34">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="31:52"><expr pos:start="27:9" pos:end="31:51"><name pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:14">XBZRLE</name><operator pos:start="27:15" pos:end="27:15">.</operator><name pos:start="27:16" pos:end="27:20">cache</name></name> <operator pos:start="27:22" pos:end="27:22">=</operator> <call pos:start="27:24" pos:end="31:51"><name pos:start="27:24" pos:end="27:33">cache_init</name><argument_list pos:start="27:34" pos:end="31:51">(<argument pos:start="27:35" pos:end="29:50"><expr pos:start="27:35" pos:end="29:50"><call pos:start="27:35" pos:end="27:61"><name pos:start="27:35" pos:end="27:59">migrate_xbzrle_cache_size</name><argument_list pos:start="27:60" pos:end="27:61">()</argument_list></call> <operator pos:start="27:63" pos:end="27:63">/</operator>

                                  <name pos:start="29:35" pos:end="29:50">TARGET_PAGE_SIZE</name></expr></argument>,

                                  <argument pos:start="31:35" pos:end="31:50"><expr pos:start="31:35" pos:end="31:50"><name pos:start="31:35" pos:end="31:50">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:26">(<expr pos:start="33:13" pos:end="33:25"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:25"><name pos:start="33:14" pos:end="33:19">XBZRLE</name><operator pos:start="33:20" pos:end="33:20">.</operator><name pos:start="33:21" pos:end="33:25">cache</name></name></expr>)</condition> <block pos:start="33:28" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:22">

            <expr_stmt pos:start="35:13" pos:end="35:41"><expr pos:start="35:13" pos:end="35:40"><call pos:start="35:13" pos:end="35:40"><name pos:start="35:13" pos:end="35:38">qemu_mutex_unlock_iothread</name><argument_list pos:start="35:39" pos:end="35:40">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:46"><expr pos:start="37:13" pos:end="37:45"><call pos:start="37:13" pos:end="37:45"><name pos:start="37:13" pos:end="37:19">DPRINTF</name><argument_list pos:start="37:20" pos:end="37:45">(<argument pos:start="37:21" pos:end="37:44"><expr pos:start="37:21" pos:end="37:44"><literal type="string" pos:start="37:21" pos:end="37:44">"Error creating cache\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:22">return <expr pos:start="39:20" pos:end="39:21"><operator pos:start="39:20" pos:end="39:20">-</operator><literal type="number" pos:start="39:21" pos:end="39:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:38"><expr pos:start="43:9" pos:end="43:37"><call pos:start="43:9" pos:end="43:37"><name pos:start="43:9" pos:end="43:23">qemu_mutex_init</name><argument_list pos:start="43:24" pos:end="43:37">(<argument pos:start="43:25" pos:end="43:36"><expr pos:start="43:25" pos:end="43:36"><operator pos:start="43:25" pos:end="43:25">&amp;</operator><name pos:start="43:26" pos:end="43:36"><name pos:start="43:26" pos:end="43:31">XBZRLE</name><operator pos:start="43:32" pos:end="43:32">.</operator><name pos:start="43:33" pos:end="43:36">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><call pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:34">qemu_mutex_unlock_iothread</name><argument_list pos:start="45:35" pos:end="45:36">()</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="49:9" pos:end="49:58">/* We prefer not to abort if there is no memory */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:61"><expr pos:start="51:9" pos:end="51:60"><name pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:14">XBZRLE</name><operator pos:start="51:15" pos:end="51:15">.</operator><name pos:start="51:16" pos:end="51:26">encoded_buf</name></name> <operator pos:start="51:28" pos:end="51:28">=</operator> <call pos:start="51:30" pos:end="51:60"><name pos:start="51:30" pos:end="51:42">g_try_malloc0</name><argument_list pos:start="51:43" pos:end="51:60">(<argument pos:start="51:44" pos:end="51:59"><expr pos:start="51:44" pos:end="51:59"><name pos:start="51:44" pos:end="51:59">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:32">(<expr pos:start="53:13" pos:end="53:31"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:31"><name pos:start="53:14" pos:end="53:19">XBZRLE</name><operator pos:start="53:20" pos:end="53:20">.</operator><name pos:start="53:21" pos:end="53:31">encoded_buf</name></name></expr>)</condition> <block pos:start="53:34" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:22">

            <expr_stmt pos:start="55:13" pos:end="55:54"><expr pos:start="55:13" pos:end="55:53"><call pos:start="55:13" pos:end="55:53"><name pos:start="55:13" pos:end="55:19">DPRINTF</name><argument_list pos:start="55:20" pos:end="55:53">(<argument pos:start="55:21" pos:end="55:52"><expr pos:start="55:21" pos:end="55:52"><literal type="string" pos:start="55:21" pos:end="55:52">"Error allocating encoded_buf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="57:13" pos:end="57:22">return <expr pos:start="57:20" pos:end="57:21"><operator pos:start="57:20" pos:end="57:20">-</operator><literal type="number" pos:start="57:21" pos:end="57:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:60"><expr pos:start="63:9" pos:end="63:59"><name pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:14">XBZRLE</name><operator pos:start="63:15" pos:end="63:15">.</operator><name pos:start="63:16" pos:end="63:26">current_buf</name></name> <operator pos:start="63:28" pos:end="63:28">=</operator> <call pos:start="63:30" pos:end="63:59"><name pos:start="63:30" pos:end="63:41">g_try_malloc</name><argument_list pos:start="63:42" pos:end="63:59">(<argument pos:start="63:43" pos:end="63:58"><expr pos:start="63:43" pos:end="63:58"><name pos:start="63:43" pos:end="63:58">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="75:9"><if pos:start="65:9" pos:end="75:9">if <condition pos:start="65:12" pos:end="65:32">(<expr pos:start="65:13" pos:end="65:31"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:31"><name pos:start="65:14" pos:end="65:19">XBZRLE</name><operator pos:start="65:20" pos:end="65:20">.</operator><name pos:start="65:21" pos:end="65:31">current_buf</name></name></expr>)</condition> <block pos:start="65:34" pos:end="75:9">{<block_content pos:start="67:13" pos:end="73:22">

            <expr_stmt pos:start="67:13" pos:end="67:54"><expr pos:start="67:13" pos:end="67:53"><call pos:start="67:13" pos:end="67:53"><name pos:start="67:13" pos:end="67:19">DPRINTF</name><argument_list pos:start="67:20" pos:end="67:53">(<argument pos:start="67:21" pos:end="67:52"><expr pos:start="67:21" pos:end="67:52"><literal type="string" pos:start="67:21" pos:end="67:52">"Error allocating current_buf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:39"><expr pos:start="69:13" pos:end="69:38"><call pos:start="69:13" pos:end="69:38"><name pos:start="69:13" pos:end="69:18">g_free</name><argument_list pos:start="69:19" pos:end="69:38">(<argument pos:start="69:20" pos:end="69:37"><expr pos:start="69:20" pos:end="69:37"><name pos:start="69:20" pos:end="69:37"><name pos:start="69:20" pos:end="69:25">XBZRLE</name><operator pos:start="69:26" pos:end="69:26">.</operator><name pos:start="69:27" pos:end="69:37">encoded_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:38"><expr pos:start="71:13" pos:end="71:37"><name pos:start="71:13" pos:end="71:30"><name pos:start="71:13" pos:end="71:18">XBZRLE</name><operator pos:start="71:19" pos:end="71:19">.</operator><name pos:start="71:20" pos:end="71:30">encoded_buf</name></name> <operator pos:start="71:32" pos:end="71:32">=</operator> <name pos:start="71:34" pos:end="71:37">NULL</name></expr>;</expr_stmt>

            <return pos:start="73:13" pos:end="73:22">return <expr pos:start="73:20" pos:end="73:21"><operator pos:start="73:20" pos:end="73:20">-</operator><literal type="number" pos:start="73:21" pos:end="73:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:21"><expr pos:start="79:9" pos:end="79:20"><call pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:18">acct_clear</name><argument_list pos:start="79:19" pos:end="79:20">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:31"><expr pos:start="85:5" pos:end="85:30"><call pos:start="85:5" pos:end="85:30"><name pos:start="85:5" pos:end="85:28">qemu_mutex_lock_iothread</name><argument_list pos:start="85:29" pos:end="85:30">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:30"><expr pos:start="87:5" pos:end="87:29"><call pos:start="87:5" pos:end="87:29"><name pos:start="87:5" pos:end="87:27">qemu_mutex_lock_ramlist</name><argument_list pos:start="87:28" pos:end="87:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:26"><expr pos:start="89:5" pos:end="89:25"><name pos:start="89:5" pos:end="89:21">bytes_transferred</name> <operator pos:start="89:23" pos:end="89:23">=</operator> <literal type="number" pos:start="89:25" pos:end="89:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:24"><expr pos:start="91:5" pos:end="91:23"><call pos:start="91:5" pos:end="91:23"><name pos:start="91:5" pos:end="91:21">reset_ram_globals</name><argument_list pos:start="91:22" pos:end="91:23">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:36"><expr pos:start="95:5" pos:end="95:35"><call pos:start="95:5" pos:end="95:35"><name pos:start="95:5" pos:end="95:33">memory_global_dirty_log_start</name><argument_list pos:start="95:34" pos:end="95:35">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:28"><expr pos:start="97:5" pos:end="97:27"><call pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:25">migration_bitmap_sync</name><argument_list pos:start="97:26" pos:end="97:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:33"><expr pos:start="99:5" pos:end="99:32"><call pos:start="99:5" pos:end="99:32"><name pos:start="99:5" pos:end="99:30">qemu_mutex_unlock_iothread</name><argument_list pos:start="99:31" pos:end="99:32">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:65"><expr pos:start="103:5" pos:end="103:64"><call pos:start="103:5" pos:end="103:64"><name pos:start="103:5" pos:end="103:17">qemu_put_be64</name><argument_list pos:start="103:18" pos:end="103:64">(<argument pos:start="103:19" pos:end="103:19"><expr pos:start="103:19" pos:end="103:19"><name pos:start="103:19" pos:end="103:19">f</name></expr></argument>, <argument pos:start="103:22" pos:end="103:63"><expr pos:start="103:22" pos:end="103:63"><call pos:start="103:22" pos:end="103:38"><name pos:start="103:22" pos:end="103:36">ram_bytes_total</name><argument_list pos:start="103:37" pos:end="103:38">()</argument_list></call> <operator pos:start="103:40" pos:end="103:40">|</operator> <name pos:start="103:42" pos:end="103:63">RAM_SAVE_FLAG_MEM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="107:5" pos:end="107:49"><name pos:start="107:5" pos:end="107:18">QTAILQ_FOREACH</name><argument_list pos:start="107:19" pos:end="107:49">(<argument pos:start="107:20" pos:end="107:24">block</argument>, <argument pos:start="107:27" pos:end="107:42">&amp;ram_list.blocks</argument>, <argument pos:start="107:45" pos:end="107:48">next</argument>)</argument_list></macro> <block pos:start="107:51" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:40">

        <expr_stmt pos:start="109:9" pos:end="109:47"><expr pos:start="109:9" pos:end="109:46"><call pos:start="109:9" pos:end="109:46"><name pos:start="109:9" pos:end="109:21">qemu_put_byte</name><argument_list pos:start="109:22" pos:end="109:46">(<argument pos:start="109:23" pos:end="109:23"><expr pos:start="109:23" pos:end="109:23"><name pos:start="109:23" pos:end="109:23">f</name></expr></argument>, <argument pos:start="109:26" pos:end="109:45"><expr pos:start="109:26" pos:end="109:45"><call pos:start="109:26" pos:end="109:45"><name pos:start="109:26" pos:end="109:31">strlen</name><argument_list pos:start="109:32" pos:end="109:45">(<argument pos:start="109:33" pos:end="109:44"><expr pos:start="109:33" pos:end="109:44"><name pos:start="109:33" pos:end="109:44"><name pos:start="109:33" pos:end="109:37">block</name><operator pos:start="109:38" pos:end="109:39">-&gt;</operator><name pos:start="109:40" pos:end="109:44">idstr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:74"><expr pos:start="111:9" pos:end="111:73"><call pos:start="111:9" pos:end="111:73"><name pos:start="111:9" pos:end="111:23">qemu_put_buffer</name><argument_list pos:start="111:24" pos:end="111:73">(<argument pos:start="111:25" pos:end="111:25"><expr pos:start="111:25" pos:end="111:25"><name pos:start="111:25" pos:end="111:25">f</name></expr></argument>, <argument pos:start="111:28" pos:end="111:50"><expr pos:start="111:28" pos:end="111:50"><operator pos:start="111:28" pos:end="111:28">(</operator><name pos:start="111:29" pos:end="111:35">uint8_t</name> <operator pos:start="111:37" pos:end="111:37">*</operator><operator pos:start="111:38" pos:end="111:38">)</operator><name pos:start="111:39" pos:end="111:50"><name pos:start="111:39" pos:end="111:43">block</name><operator pos:start="111:44" pos:end="111:45">-&gt;</operator><name pos:start="111:46" pos:end="111:50">idstr</name></name></expr></argument>, <argument pos:start="111:53" pos:end="111:72"><expr pos:start="111:53" pos:end="111:72"><call pos:start="111:53" pos:end="111:72"><name pos:start="111:53" pos:end="111:58">strlen</name><argument_list pos:start="111:59" pos:end="111:72">(<argument pos:start="111:60" pos:end="111:71"><expr pos:start="111:60" pos:end="111:71"><name pos:start="111:60" pos:end="111:71"><name pos:start="111:60" pos:end="111:64">block</name><operator pos:start="111:65" pos:end="111:66">-&gt;</operator><name pos:start="111:67" pos:end="111:71">idstr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:40"><expr pos:start="113:9" pos:end="113:39"><call pos:start="113:9" pos:end="113:39"><name pos:start="113:9" pos:end="113:21">qemu_put_be64</name><argument_list pos:start="113:22" pos:end="113:39">(<argument pos:start="113:23" pos:end="113:23"><expr pos:start="113:23" pos:end="113:23"><name pos:start="113:23" pos:end="113:23">f</name></expr></argument>, <argument pos:start="113:26" pos:end="113:38"><expr pos:start="113:26" pos:end="113:38"><name pos:start="113:26" pos:end="113:38"><name pos:start="113:26" pos:end="113:30">block</name><operator pos:start="113:31" pos:end="113:32">-&gt;</operator><name pos:start="113:33" pos:end="113:38">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="119:5" pos:end="119:32"><expr pos:start="119:5" pos:end="119:31"><call pos:start="119:5" pos:end="119:31"><name pos:start="119:5" pos:end="119:29">qemu_mutex_unlock_ramlist</name><argument_list pos:start="119:30" pos:end="119:31">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:53"><expr pos:start="123:5" pos:end="123:52"><call pos:start="123:5" pos:end="123:52"><name pos:start="123:5" pos:end="123:30">ram_control_before_iterate</name><argument_list pos:start="123:31" pos:end="123:52">(<argument pos:start="123:32" pos:end="123:32"><expr pos:start="123:32" pos:end="123:32"><name pos:start="123:32" pos:end="123:32">f</name></expr></argument>, <argument pos:start="123:35" pos:end="123:51"><expr pos:start="123:35" pos:end="123:51"><name pos:start="123:35" pos:end="123:51">RAM_CONTROL_SETUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:52"><expr pos:start="125:5" pos:end="125:51"><call pos:start="125:5" pos:end="125:51"><name pos:start="125:5" pos:end="125:29">ram_control_after_iterate</name><argument_list pos:start="125:30" pos:end="125:51">(<argument pos:start="125:31" pos:end="125:31"><expr pos:start="125:31" pos:end="125:31"><name pos:start="125:31" pos:end="125:31">f</name></expr></argument>, <argument pos:start="125:34" pos:end="125:50"><expr pos:start="125:34" pos:end="125:50"><name pos:start="125:34" pos:end="125:50">RAM_CONTROL_SETUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:40"><expr pos:start="129:5" pos:end="129:39"><call pos:start="129:5" pos:end="129:39"><name pos:start="129:5" pos:end="129:17">qemu_put_be64</name><argument_list pos:start="129:18" pos:end="129:39">(<argument pos:start="129:19" pos:end="129:19"><expr pos:start="129:19" pos:end="129:19"><name pos:start="129:19" pos:end="129:19">f</name></expr></argument>, <argument pos:start="129:22" pos:end="129:38"><expr pos:start="129:22" pos:end="129:38"><name pos:start="129:22" pos:end="129:38">RAM_SAVE_FLAG_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="133:5" pos:end="133:13">return <expr pos:start="133:12" pos:end="133:12"><literal type="number" pos:start="133:12" pos:end="133:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
