<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3496.c" pos:tabs="8"><function pos:start="1:1" pos:end="347:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:17">RENAME</name></type>(<name pos:start="1:19" pos:end="1:30">dct_quantize</name>)<parameter_list pos:start="1:32" pos:end="5:39">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:49"><name pos:start="1:33" pos:end="1:46">MpegEncContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:35">DCTELEM</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:42">block</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:49"><decl pos:start="3:45" pos:end="3:49"><type pos:start="3:45" pos:end="3:49"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:49">n</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:38"><decl pos:start="5:29" pos:end="5:38"><type pos:start="5:29" pos:end="5:38"><name pos:start="5:29" pos:end="5:31">int</name></type> <name pos:start="5:33" pos:end="5:38">qscale</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="347:1">{<block_content pos:start="9:5" pos:end="345:32">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:16">level</name></decl>, <decl pos:start="9:19" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:34">last_non_zero_p1</name></decl>, <decl pos:start="9:37" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:37" pos:end="9:37">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:18"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:16">UINT16</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:22">qmat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:25"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <name pos:start="13:12" pos:end="13:19">__align8</name> <name pos:start="13:21" pos:end="13:25">INT16</name></type> <name pos:start="13:27" pos:end="13:40"><name pos:start="13:27" pos:end="13:36">temp_block</name><index pos:start="13:37" pos:end="13:40">[<expr pos:start="13:38" pos:end="13:39"><literal type="number" pos:start="13:38" pos:end="13:39">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">minLevel</name></decl>, <decl pos:start="15:19" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:19" pos:end="15:26">maxLevel</name></decl>;</decl_stmt>

    

    <if_stmt pos:start="19:5" pos:end="51:5"><if pos:start="19:5" pos:end="27:5">if<condition pos:start="19:7" pos:end="19:61">(<expr pos:start="19:8" pos:end="19:60"><name pos:start="19:8" pos:end="19:15"><name pos:start="19:8" pos:end="19:8">s</name><operator pos:start="19:9" pos:end="19:10">-&gt;</operator><name pos:start="19:11" pos:end="19:15">avctx</name></name><operator pos:start="19:16" pos:end="19:17">!=</operator><name pos:start="19:18" pos:end="19:21">NULL</name> <operator pos:start="19:23" pos:end="19:24">&amp;&amp;</operator> <name pos:start="19:26" pos:end="19:44"><name pos:start="19:26" pos:end="19:26">s</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:33">avctx</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:40">codec</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:44">id</name></name><operator pos:start="19:45" pos:end="19:46">==</operator><name pos:start="19:47" pos:end="19:60">CODEC_ID_MPEG4</name></expr>)</condition><block pos:start="19:62" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:23">

	<comment type="block" pos:start="21:9" pos:end="21:19">/* mpeg4 */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:24"><expr pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:16">minLevel</name><operator pos:start="23:17" pos:end="23:17">=</operator> <operator pos:start="23:19" pos:end="23:19">-</operator><literal type="number" pos:start="23:20" pos:end="23:23">2048</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="25:9" pos:end="25:23"><expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:16">maxLevel</name><operator pos:start="25:17" pos:end="25:17">=</operator> <literal type="number" pos:start="25:19" pos:end="25:22">2047</literal></expr>;</expr_stmt>

    </block_content>}</block></if><if type="elseif" pos:start="27:6" pos:end="35:5">else if<condition pos:start="27:13" pos:end="27:38">(<expr pos:start="27:14" pos:end="27:37"><name pos:start="27:14" pos:end="27:26"><name pos:start="27:14" pos:end="27:14">s</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:26">out_format</name></name><operator pos:start="27:27" pos:end="27:28">==</operator><name pos:start="27:29" pos:end="27:37">FMT_MPEG1</name></expr>)</condition><block pos:start="27:39" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:22">

	<comment type="block" pos:start="29:9" pos:end="29:19">/* mpeg1 */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:23"><expr pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:16">minLevel</name><operator pos:start="31:17" pos:end="31:17">=</operator> <operator pos:start="31:19" pos:end="31:19">-</operator><literal type="number" pos:start="31:20" pos:end="31:22">255</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="33:9" pos:end="33:22"><expr pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:16">maxLevel</name><operator pos:start="33:17" pos:end="33:17">=</operator> <literal type="number" pos:start="33:19" pos:end="33:21">255</literal></expr>;</expr_stmt>

    </block_content>}</block></if><if type="elseif" pos:start="35:6" pos:end="43:5">else if<condition pos:start="35:13" pos:end="35:38">(<expr pos:start="35:14" pos:end="35:37"><name pos:start="35:14" pos:end="35:26"><name pos:start="35:14" pos:end="35:14">s</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:26">out_format</name></name><operator pos:start="35:27" pos:end="35:28">==</operator><name pos:start="35:29" pos:end="35:37">FMT_MJPEG</name></expr>)</condition><block pos:start="35:39" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:23">

	<comment type="block" pos:start="37:9" pos:end="37:21">/* (m)jpeg */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:16">minLevel</name><operator pos:start="39:17" pos:end="39:17">=</operator> <operator pos:start="39:19" pos:end="39:19">-</operator><literal type="number" pos:start="39:20" pos:end="39:23">1023</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="41:9" pos:end="41:23"><expr pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:16">maxLevel</name><operator pos:start="41:17" pos:end="41:17">=</operator> <literal type="number" pos:start="41:19" pos:end="41:22">1023</literal></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="43:6" pos:end="51:5">else<block pos:start="43:10" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:22">

	<comment type="block" pos:start="45:9" pos:end="45:28">/* h263 / msmpeg4 */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:23"><expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:16">minLevel</name><operator pos:start="47:17" pos:end="47:17">=</operator> <operator pos:start="47:19" pos:end="47:19">-</operator><literal type="number" pos:start="47:20" pos:end="47:22">128</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="49:9" pos:end="49:22"><expr pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:16">maxLevel</name><operator pos:start="49:17" pos:end="49:17">=</operator> <literal type="number" pos:start="49:19" pos:end="49:21">127</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:20"><expr pos:start="55:5" pos:end="55:19"><call pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:11">av_fdct</name> <argument_list pos:start="55:13" pos:end="55:19">(<argument pos:start="55:14" pos:end="55:18"><expr pos:start="55:14" pos:end="55:18"><name pos:start="55:14" pos:end="55:18">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <if_stmt pos:start="59:5" pos:end="171:5"><if pos:start="59:5" pos:end="163:5">if <condition pos:start="59:8" pos:end="59:20">(<expr pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:19">mb_intra</name></name></expr>)</condition> <block pos:start="59:22" pos:end="163:5">{<block_content pos:start="61:9" pos:end="161:9">

        <decl_stmt pos:start="61:9" pos:end="61:18"><decl pos:start="61:9" pos:end="61:17"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:17">dummy</name></decl>;</decl_stmt>

        <if_stmt pos:start="63:9" pos:end="76:0"><if pos:start="63:9" pos:end="65:30">if <condition pos:start="63:12" pos:end="63:18">(<expr pos:start="63:13" pos:end="63:17"><name pos:start="63:13" pos:end="63:13">n</name> <operator pos:start="63:15" pos:end="63:15">&lt;</operator> <literal type="number" pos:start="63:17" pos:end="63:17">4</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:30"><block_content pos:start="65:13" pos:end="65:30">

            <expr_stmt pos:start="65:13" pos:end="65:30"><expr pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:13">q</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:17">s</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:29">y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="67:9" pos:end="76:0">else<block type="pseudo" pos:start="69:13" pos:end="76:0"><block_content pos:start="69:13" pos:end="76:0">

            <expr_stmt pos:start="69:13" pos:end="76:0"><expr pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:13">q</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <name pos:start="69:17" pos:end="69:29"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:29">c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        

        <comment type="block" pos:start="73:9" pos:end="73:54">/* note: block[0] is assumed to be positive */</comment>

<cpp:if pos:start="75:1" pos:end="75:5">#<cpp:directive pos:start="75:2" pos:end="75:3">if</cpp:directive> <expr pos:start="75:5" pos:end="75:5"><literal type="number" pos:start="75:5" pos:end="75:5">1</literal></expr></cpp:if>

	<asm pos:start="77:9" pos:end="90:0">asm <specifier pos:start="77:13" pos:end="77:20">volatile</specifier> (

		"xorl %%edx, %%edx	\n\t"

		"mul %%ecx		\n\t"

		: "=d" (temp_block[0]), "=a"(dummy)

		: "a" (block[0] + (q &gt;&gt; 1)), "c" (inverse[q])

	);</asm>

<cpp:else pos:start="89:1" pos:end="89:5">#<cpp:directive pos:start="89:2" pos:end="89:5">else</cpp:directive></cpp:else>

	<asm pos:start="91:9" pos:end="108:0">asm <specifier pos:start="91:13" pos:end="91:20">volatile</specifier> (

		"xorl %%edx, %%edx	\n\t"

		"divw %%cx		\n\t"

		"movzwl %%ax, %%eax	\n\t"

		: "=a" (temp_block[0])

		: "a" (block[0] + (q &gt;&gt; 1)), "c" (q)

		: "%edx"

	);</asm>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

<comment type="line" pos:start="109:1" pos:end="109:52">//        temp_block[0] = (block[0] + (q &gt;&gt; 1)) / q;</comment>

        <expr_stmt pos:start="111:9" pos:end="111:14"><expr pos:start="111:9" pos:end="111:13"><name pos:start="111:9" pos:end="111:9">i</name> <operator pos:start="111:11" pos:end="111:11">=</operator> <literal type="number" pos:start="111:13" pos:end="111:13">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:29"><expr pos:start="113:9" pos:end="113:28"><name pos:start="113:9" pos:end="113:24">last_non_zero_p1</name> <operator pos:start="113:26" pos:end="113:26">=</operator> <literal type="number" pos:start="113:28" pos:end="113:28">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="123:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:38">(<expr pos:start="115:13" pos:end="115:37"><name pos:start="115:13" pos:end="115:25"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:25">out_format</name></name> <operator pos:start="115:27" pos:end="115:28">==</operator> <name pos:start="115:30" pos:end="115:37">FMT_H263</name></expr>)</condition> <block pos:start="115:40" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:43">

            <expr_stmt pos:start="117:13" pos:end="117:43"><expr pos:start="117:13" pos:end="117:42"><name pos:start="117:13" pos:end="117:16">qmat</name> <operator pos:start="117:18" pos:end="117:18">=</operator> <name pos:start="117:20" pos:end="117:42"><name pos:start="117:20" pos:end="117:20">s</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:42">q_non_intra_matrix16</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="119:11" pos:end="123:9">else <block pos:start="119:16" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:39">

            <expr_stmt pos:start="121:13" pos:end="121:39"><expr pos:start="121:13" pos:end="121:38"><name pos:start="121:13" pos:end="121:16">qmat</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <name pos:start="121:20" pos:end="121:38"><name pos:start="121:20" pos:end="121:20">s</name><operator pos:start="121:21" pos:end="121:22">-&gt;</operator><name pos:start="121:23" pos:end="121:38">q_intra_matrix16</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <for pos:start="125:9" pos:end="161:9">for<control pos:start="125:12" pos:end="125:24">(<init pos:start="125:13" pos:end="125:16"><expr pos:start="125:13" pos:end="125:15"><name pos:start="125:13" pos:end="125:13">i</name><operator pos:start="125:14" pos:end="125:14">=</operator><literal type="number" pos:start="125:15" pos:end="125:15">1</literal></expr>;</init><condition pos:start="125:17" pos:end="125:20"><expr pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:17">i</name><operator pos:start="125:18" pos:end="125:18">&lt;</operator><literal type="number" pos:start="125:19" pos:end="125:19">4</literal></expr>;</condition><incr pos:start="125:21" pos:end="125:23"><expr pos:start="125:21" pos:end="125:23"><name pos:start="125:21" pos:end="125:21">i</name><operator pos:start="125:22" pos:end="125:23">++</operator></expr></incr>)</control> <block pos:start="125:26" pos:end="161:9">{<block_content pos:start="127:13" pos:end="159:23">

            <expr_stmt pos:start="127:13" pos:end="127:39"><expr pos:start="127:13" pos:end="127:38"><name pos:start="127:13" pos:end="127:17">level</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <name pos:start="127:21" pos:end="127:28"><name pos:start="127:21" pos:end="127:25">block</name><index pos:start="127:26" pos:end="127:28">[<expr pos:start="127:27" pos:end="127:27"><name pos:start="127:27" pos:end="127:27">i</name></expr>]</index></name> <operator pos:start="127:30" pos:end="127:30">*</operator> <name pos:start="127:32" pos:end="127:38"><name pos:start="127:32" pos:end="127:35">qmat</name><index pos:start="127:36" pos:end="127:38">[<expr pos:start="127:37" pos:end="127:37"><name pos:start="127:37" pos:end="127:37">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:56"><expr pos:start="129:13" pos:end="129:55"><name pos:start="129:13" pos:end="129:17">level</name> <operator pos:start="129:19" pos:end="129:19">=</operator> <name pos:start="129:21" pos:end="129:25">level</name> <operator pos:start="129:27" pos:end="129:27">/</operator> <operator pos:start="129:29" pos:end="129:29">(</operator><literal type="number" pos:start="129:30" pos:end="129:30">1</literal> <operator pos:start="129:32" pos:end="129:33">&lt;&lt;</operator> <operator pos:start="129:35" pos:end="129:35">(</operator><name pos:start="129:36" pos:end="129:49">QMAT_SHIFT_MMX</name> <operator pos:start="129:51" pos:end="129:51">-</operator> <literal type="number" pos:start="129:53" pos:end="129:53">3</literal><operator pos:start="129:54" pos:end="129:54">)</operator><operator pos:start="129:55" pos:end="129:55">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="131:13" pos:end="141:14">/* XXX: currently, this code is not optimal. the range should be:

               mpeg1: -255..255

               mpeg2: -2048..2047

               h263:  -128..127

               mpeg4: -2048..2047

            */</comment>

            <if_stmt pos:start="143:13" pos:end="149:33"><if pos:start="143:13" pos:end="145:33">if <condition pos:start="143:16" pos:end="143:33">(<expr pos:start="143:17" pos:end="143:32"><name pos:start="143:17" pos:end="143:21">level</name> <operator pos:start="143:23" pos:end="143:23">&gt;</operator> <name pos:start="143:25" pos:end="143:32">maxLevel</name></expr>)</condition><block type="pseudo" pos:start="145:17" pos:end="145:33"><block_content pos:start="145:17" pos:end="145:33">

                <expr_stmt pos:start="145:17" pos:end="145:33"><expr pos:start="145:17" pos:end="145:32"><name pos:start="145:17" pos:end="145:21">level</name> <operator pos:start="145:23" pos:end="145:23">=</operator> <name pos:start="145:25" pos:end="145:32">maxLevel</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="147:13" pos:end="149:33">else if <condition pos:start="147:21" pos:end="147:38">(<expr pos:start="147:22" pos:end="147:37"><name pos:start="147:22" pos:end="147:26">level</name> <operator pos:start="147:28" pos:end="147:28">&lt;</operator> <name pos:start="147:30" pos:end="147:37">minLevel</name></expr>)</condition><block type="pseudo" pos:start="149:17" pos:end="149:33"><block_content pos:start="149:17" pos:end="149:33">

                <expr_stmt pos:start="149:17" pos:end="149:33"><expr pos:start="149:17" pos:end="149:32"><name pos:start="149:17" pos:end="149:21">level</name> <operator pos:start="149:23" pos:end="149:23">=</operator> <name pos:start="149:25" pos:end="149:32">minLevel</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:34"><expr pos:start="151:13" pos:end="151:33"><name pos:start="151:13" pos:end="151:25"><name pos:start="151:13" pos:end="151:22">temp_block</name><index pos:start="151:23" pos:end="151:25">[<expr pos:start="151:24" pos:end="151:24"><name pos:start="151:24" pos:end="151:24">i</name></expr>]</index></name> <operator pos:start="151:27" pos:end="151:27">=</operator> <name pos:start="151:29" pos:end="151:33">level</name></expr>;</expr_stmt>



	    <if_stmt pos:start="155:13" pos:end="157:103"><if pos:start="155:13" pos:end="157:103">if<condition pos:start="155:15" pos:end="155:21">(<expr pos:start="155:16" pos:end="155:20"><name pos:start="155:16" pos:end="155:20">level</name></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:103"><block_content pos:start="157:17" pos:end="157:103"> 

	        <if_stmt pos:start="157:17" pos:end="157:103"><if pos:start="157:17" pos:end="157:103">if<condition pos:start="157:19" pos:end="157:61">(<expr pos:start="157:20" pos:end="157:60"><name pos:start="157:20" pos:end="157:35">last_non_zero_p1</name> <operator pos:start="157:37" pos:end="157:37">&lt;</operator> <name pos:start="157:39" pos:end="157:60"><name pos:start="157:39" pos:end="157:57">inv_zigzag_direct16</name><index pos:start="157:58" pos:end="157:60">[<expr pos:start="157:59" pos:end="157:59"><name pos:start="157:59" pos:end="157:59">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="157:63" pos:end="157:103"><block_content pos:start="157:63" pos:end="157:103"> <expr_stmt pos:start="157:63" pos:end="157:103"><expr pos:start="157:63" pos:end="157:102"><name pos:start="157:63" pos:end="157:78">last_non_zero_p1</name><operator pos:start="157:79" pos:end="157:79">=</operator> <name pos:start="157:81" pos:end="157:102"><name pos:start="157:81" pos:end="157:99">inv_zigzag_direct16</name><index pos:start="157:100" pos:end="157:102">[<expr pos:start="157:101" pos:end="157:101"><name pos:start="157:101" pos:end="157:101">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	    <expr_stmt pos:start="159:13" pos:end="159:23"><expr pos:start="159:13" pos:end="159:22"><name pos:start="159:13" pos:end="159:20"><name pos:start="159:13" pos:end="159:17">block</name><index pos:start="159:18" pos:end="159:20">[<expr pos:start="159:19" pos:end="159:19"><name pos:start="159:19" pos:end="159:19">i</name></expr>]</index></name><operator pos:start="159:21" pos:end="159:21">=</operator><literal type="number" pos:start="159:22" pos:end="159:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="171:5">else <block pos:start="163:12" pos:end="171:5">{<block_content pos:start="165:9" pos:end="169:39">

        <expr_stmt pos:start="165:9" pos:end="165:14"><expr pos:start="165:9" pos:end="165:13"><name pos:start="165:9" pos:end="165:9">i</name> <operator pos:start="165:11" pos:end="165:11">=</operator> <literal type="number" pos:start="165:13" pos:end="165:13">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:29"><expr pos:start="167:9" pos:end="167:28"><name pos:start="167:9" pos:end="167:24">last_non_zero_p1</name> <operator pos:start="167:26" pos:end="167:26">=</operator> <literal type="number" pos:start="167:28" pos:end="167:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:39"><expr pos:start="169:9" pos:end="169:38"><name pos:start="169:9" pos:end="169:12">qmat</name> <operator pos:start="169:14" pos:end="169:14">=</operator> <name pos:start="169:16" pos:end="169:38"><name pos:start="169:16" pos:end="169:16">s</name><operator pos:start="169:17" pos:end="169:18">-&gt;</operator><name pos:start="169:19" pos:end="169:38">q_non_intra_matrix16</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <asm pos:start="175:5" pos:end="281:6">asm <specifier pos:start="175:9" pos:end="175:16">volatile</specifier>( <comment type="block" pos:start="175:19" pos:end="175:71">/* XXX: small rounding bug, but it shouldnt matter */</comment>

	"movd %3, %%mm3			\n\t"

	SPREADW(%%mm3)

	"movd %4, %%mm4			\n\t"

	SPREADW(%%mm4)

<cpp:ifndef pos:start="185:1" pos:end="185:17">#<cpp:directive pos:start="185:2" pos:end="185:7">ifndef</cpp:directive> <name pos:start="185:9" pos:end="185:17">HAVE_MMX2</name></cpp:ifndef>	

	"movd %5, %%mm5			\n\t"

	SPREADW(%%mm5)

<cpp:endif pos:start="191:1" pos:end="191:6">#<cpp:directive pos:start="191:2" pos:end="191:6">endif</cpp:directive></cpp:endif>

	"pxor %%mm7, %%mm7		\n\t"

	"movd %%eax, %%mm2		\n\t"

	SPREADW(%%mm2)

	"movl %6, %%eax			\n\t"

	".balign 16			\n\t"

	"1:				\n\t"

	"movq (%1, %%eax), %%mm0	\n\t"

	"movq (%2, %%eax), %%mm1	\n\t"

	"movq %%mm0, %%mm6		\n\t"

	"psraw $15, %%mm6		\n\t"

	"pmulhw %%mm0, %%mm1		\n\t"

	"psubsw %%mm6, %%mm1		\n\t"

<cpp:ifdef pos:start="217:1" pos:end="217:16">#<cpp:directive pos:start="217:2" pos:end="217:6">ifdef</cpp:directive> <name pos:start="217:8" pos:end="217:16">HAVE_MMX2</name></cpp:ifdef>

	"pminsw %%mm3, %%mm1		\n\t"

	"pmaxsw %%mm4, %%mm1		\n\t"

<cpp:else pos:start="223:1" pos:end="223:5">#<cpp:directive pos:start="223:2" pos:end="223:5">else</cpp:directive></cpp:else>

	"paddsw %%mm3, %%mm1		\n\t"

	"psubusw %%mm4, %%mm1		\n\t"

	"paddsw %%mm5, %%mm1		\n\t"

<cpp:endif pos:start="231:1" pos:end="231:6">#<cpp:directive pos:start="231:2" pos:end="231:6">endif</cpp:directive></cpp:endif>

	"movq %%mm1, (%8, %%eax)	\n\t"

	"pcmpeqw %%mm7, %%mm1		\n\t"

	"movq (%7, %%eax), %%mm0	\n\t"

	"movq %%mm7, (%1, %%eax)	\n\t"

	"pandn %%mm0, %%mm1		\n\t"

	PMAXW(%%mm1, %%mm2)

	"addl $8, %%eax			\n\t"

	" js 1b				\n\t"

	"movq %%mm2, %%mm0		\n\t"

	"psrlq $32, %%mm2		\n\t"

	PMAXW(%%mm0, %%mm2)

	"movq %%mm2, %%mm0		\n\t"

	"psrlq $16, %%mm2		\n\t"

	PMAXW(%%mm0, %%mm2)

	"movd %%mm2, %%eax		\n\t"

	"movzbl %%al, %%eax		\n\t"

	: "+a" (last_non_zero_p1)

	: "r" (block+64), "r" (qmat+64), 

<cpp:ifdef pos:start="269:1" pos:end="269:16">#<cpp:directive pos:start="269:2" pos:end="269:6">ifdef</cpp:directive> <name pos:start="269:8" pos:end="269:16">HAVE_MMX2</name></cpp:ifdef>

	  "m" (maxLevel),          "m" (minLevel),                    "m" (minLevel <comment type="block" pos:start="271:85" pos:end="271:95">/* dummy */</comment>), "g" (2*i - 128),

<cpp:else pos:start="273:1" pos:end="273:5">#<cpp:directive pos:start="273:2" pos:end="273:5">else</cpp:directive></cpp:else>

	  "m" (0x7FFF - maxLevel), "m" (0x7FFF -maxLevel + minLevel), "m" (minLevel),             "g" (2*i - 128),

<cpp:endif pos:start="277:1" pos:end="277:6">#<cpp:directive pos:start="277:2" pos:end="277:6">endif</cpp:directive></cpp:endif>

	  "r" (inv_zigzag_direct16+64), "r" (temp_block+64)

    );</asm>

<comment type="line" pos:start="283:1" pos:end="283:30">// last_non_zero_p1=64;       </comment>

    <comment type="block" pos:start="285:5" pos:end="285:26">/* permute for IDCT */</comment>

    <asm pos:start="287:5" pos:end="327:10">asm <specifier pos:start="287:9" pos:end="287:16">volatile</specifier>(

	"movl %0, %%eax			\n\t"

	"pushl %%ebp			\n\t"

	"movl %%esp, " MANGLE(esp_temp) "\n\t"

	"1:				\n\t"

	"movzbl (%1, %%eax), %%ebx	\n\t"

	"movzbl 1(%1, %%eax), %%ebp	\n\t"

	"movw (%2, %%ebx, 2), %%cx	\n\t"

	"movw (%2, %%ebp, 2), %%sp	\n\t"

	"movzbl " MANGLE(permutation) "(%%ebx), %%ebx\n\t"

	"movzbl " MANGLE(permutation) "(%%ebp), %%ebp\n\t"

	"movw %%cx, (%3, %%ebx, 2)	\n\t"

	"movw %%sp, (%3, %%ebp, 2)	\n\t"

	"addl $2, %%eax			\n\t"

	" js 1b				\n\t"

	"movl " MANGLE(esp_temp) ", %%esp\n\t"

	"popl %%ebp			\n\t"

	: 

	: "g" (-last_non_zero_p1), "d" (zigzag_direct_noperm+last_non_zero_p1), "S" (temp_block), "D" (block)

	: "%eax", "%ebx", "%ecx"

	);</asm>

<comment type="block" pos:start="329:1" pos:end="341:2">/*

    for(i=0; i&lt;last_non_zero_p1; i++)

    {

       int j= zigzag_direct_noperm[i];

       block[block_permute_op(j)]= temp_block[j];

    }

*/</comment>

<comment type="line" pos:start="343:1" pos:end="343:23">//block_permute(block);</comment>

    <return pos:start="345:5" pos:end="345:32">return <expr pos:start="345:12" pos:end="345:31"><name pos:start="345:12" pos:end="345:27">last_non_zero_p1</name> <operator pos:start="345:29" pos:end="345:29">-</operator> <literal type="number" pos:start="345:31" pos:end="345:31">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
