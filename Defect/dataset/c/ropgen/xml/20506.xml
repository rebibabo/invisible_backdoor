<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20506.c" pos:tabs="8"><function pos:start="1:1" pos:end="571:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">net_client_init</name><parameter_list pos:start="1:20" pos:end="1:54">(<parameter pos:start="1:21" pos:end="1:38"><decl pos:start="1:21" pos:end="1:38"><type pos:start="1:21" pos:end="1:38"><specifier pos:start="1:21" pos:end="1:25">const</specifier> <name pos:start="1:27" pos:end="1:30">char</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:38">device</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="571:1">{<block_content pos:start="5:5" pos:end="569:15">

    <decl_stmt pos:start="5:5" pos:end="9:6"><decl pos:start="5:5" pos:end="9:5"><type pos:start="5:5" pos:end="5:29"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:21">char</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier> <specifier pos:start="5:25" pos:end="5:29">const</specifier></type> <name pos:start="5:31" pos:end="5:41"><name pos:start="5:31" pos:end="5:39">fd_params</name><index pos:start="5:40" pos:end="5:41">[]</index></name> <init pos:start="5:43" pos:end="9:5">= <expr pos:start="5:45" pos:end="9:5"><block pos:start="5:45" pos:end="9:5">{

        <expr pos:start="7:9" pos:end="7:14"><literal type="string" pos:start="7:9" pos:end="7:14">"vlan"</literal></expr>, <expr pos:start="7:17" pos:end="7:22"><literal type="string" pos:start="7:17" pos:end="7:22">"name"</literal></expr>, <expr pos:start="7:25" pos:end="7:28"><literal type="string" pos:start="7:25" pos:end="7:28">"fd"</literal></expr>, <expr pos:start="7:31" pos:end="7:34"><name pos:start="7:31" pos:end="7:34">NULL</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:12">buf</name><index pos:start="11:13" pos:end="11:18">[<expr pos:start="11:14" pos:end="11:17"><literal type="number" pos:start="11:14" pos:end="11:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">vlan_id</name></decl>, <decl pos:start="13:18" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:20">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">VLANState</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:19">vlan</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:14">name</name> <init pos:start="17:16" pos:end="17:21">= <expr pos:start="17:18" pos:end="17:21"><name pos:start="17:18" pos:end="17:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:16"><expr pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:11">vlan_id</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:53">(<expr pos:start="23:9" pos:end="23:52"><call pos:start="23:9" pos:end="23:52"><name pos:start="23:9" pos:end="23:23">get_param_value</name><argument_list pos:start="23:24" pos:end="23:52">(<argument pos:start="23:25" pos:end="23:27"><expr pos:start="23:25" pos:end="23:27"><name pos:start="23:25" pos:end="23:27">buf</name></expr></argument>, <argument pos:start="23:30" pos:end="23:40"><expr pos:start="23:30" pos:end="23:40"><sizeof pos:start="23:30" pos:end="23:40">sizeof<argument_list pos:start="23:36" pos:end="23:40">(<argument pos:start="23:37" pos:end="23:39"><expr pos:start="23:37" pos:end="23:39"><name pos:start="23:37" pos:end="23:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="23:43" pos:end="23:48"><expr pos:start="23:43" pos:end="23:48"><literal type="string" pos:start="23:43" pos:end="23:48">"vlan"</literal></expr></argument>, <argument pos:start="23:51" pos:end="23:51"><expr pos:start="23:51" pos:end="23:51"><name pos:start="23:51" pos:end="23:51">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:55" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:39">

        <expr_stmt pos:start="25:9" pos:end="25:39"><expr pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:15">vlan_id</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:38"><name pos:start="25:19" pos:end="25:24">strtol</name><argument_list pos:start="25:25" pos:end="25:38">(<argument pos:start="25:26" pos:end="25:28"><expr pos:start="25:26" pos:end="25:28"><name pos:start="25:26" pos:end="25:28">buf</name></expr></argument>, <argument pos:start="25:31" pos:end="25:34"><expr pos:start="25:31" pos:end="25:34"><name pos:start="25:31" pos:end="25:34">NULL</name></expr></argument>, <argument pos:start="25:37" pos:end="25:37"><expr pos:start="25:37" pos:end="25:37"><literal type="number" pos:start="25:37" pos:end="25:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:8">vlan</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:34"><name pos:start="29:12" pos:end="29:25">qemu_find_vlan</name><argument_list pos:start="29:26" pos:end="29:34">(<argument pos:start="29:27" pos:end="29:33"><expr pos:start="29:27" pos:end="29:33"><name pos:start="29:27" pos:end="29:33">vlan_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:53">(<expr pos:start="33:9" pos:end="33:52"><call pos:start="33:9" pos:end="33:52"><name pos:start="33:9" pos:end="33:23">get_param_value</name><argument_list pos:start="33:24" pos:end="33:52">(<argument pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><name pos:start="33:25" pos:end="33:27">buf</name></expr></argument>, <argument pos:start="33:30" pos:end="33:40"><expr pos:start="33:30" pos:end="33:40"><sizeof pos:start="33:30" pos:end="33:40">sizeof<argument_list pos:start="33:36" pos:end="33:40">(<argument pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><name pos:start="33:37" pos:end="33:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:43" pos:end="33:48"><expr pos:start="33:43" pos:end="33:48"><literal type="string" pos:start="33:43" pos:end="33:48">"name"</literal></expr></argument>, <argument pos:start="33:51" pos:end="33:51"><expr pos:start="33:51" pos:end="33:51"><name pos:start="33:51" pos:end="33:51">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:55" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:27">

        <expr_stmt pos:start="35:9" pos:end="35:27"><expr pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:12">name</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:26"><name pos:start="35:16" pos:end="35:21">strdup</name><argument_list pos:start="35:22" pos:end="35:26">(<argument pos:start="35:23" pos:end="35:25"><expr pos:start="35:23" pos:end="35:25"><name pos:start="35:23" pos:end="35:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="555:5"><if pos:start="39:5" pos:end="127:5">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:30"><name pos:start="39:10" pos:end="39:15">strcmp</name><argument_list pos:start="39:16" pos:end="39:30">(<argument pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:22">device</name></expr></argument>, <argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><literal type="string" pos:start="39:25" pos:end="39:29">"nic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:33" pos:end="127:5">{<block_content pos:start="41:9" pos:end="125:18">

        <decl_stmt pos:start="41:9" pos:end="45:10"><decl pos:start="41:9" pos:end="45:9"><type pos:start="41:9" pos:end="41:33"><specifier pos:start="41:9" pos:end="41:14">static</specifier> <specifier pos:start="41:16" pos:end="41:20">const</specifier> <name pos:start="41:22" pos:end="41:25">char</name> <modifier pos:start="41:27" pos:end="41:27">*</modifier> <specifier pos:start="41:29" pos:end="41:33">const</specifier></type> <name pos:start="41:35" pos:end="41:46"><name pos:start="41:35" pos:end="41:44">nic_params</name><index pos:start="41:45" pos:end="41:46">[]</index></name> <init pos:start="41:48" pos:end="45:9">= <expr pos:start="41:50" pos:end="45:9"><block pos:start="41:50" pos:end="45:9">{

            <expr pos:start="43:13" pos:end="43:18"><literal type="string" pos:start="43:13" pos:end="43:18">"vlan"</literal></expr>, <expr pos:start="43:21" pos:end="43:26"><literal type="string" pos:start="43:21" pos:end="43:26">"name"</literal></expr>, <expr pos:start="43:29" pos:end="43:37"><literal type="string" pos:start="43:29" pos:end="43:37">"macaddr"</literal></expr>, <expr pos:start="43:40" pos:end="43:46"><literal type="string" pos:start="43:40" pos:end="43:46">"model"</literal></expr>, <expr pos:start="43:49" pos:end="43:52"><name pos:start="43:49" pos:end="43:52">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:20"><decl pos:start="47:9" pos:end="47:19"><type pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:15">NICInfo</name> <modifier pos:start="47:17" pos:end="47:17">*</modifier></type><name pos:start="47:18" pos:end="47:19">nd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:25"><decl pos:start="49:9" pos:end="49:24"><type pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:15">uint8_t</name> <modifier pos:start="49:17" pos:end="49:17">*</modifier></type><name pos:start="49:18" pos:end="49:24">macaddr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:37"><decl pos:start="51:9" pos:end="51:36"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:15">idx</name> <init pos:start="51:17" pos:end="51:36">= <expr pos:start="51:19" pos:end="51:36"><call pos:start="51:19" pos:end="51:36"><name pos:start="51:19" pos:end="51:34">nic_get_free_idx</name><argument_list pos:start="51:35" pos:end="51:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="55:9" pos:end="63:9"><if pos:start="55:9" pos:end="63:9">if <condition pos:start="55:12" pos:end="55:44">(<expr pos:start="55:13" pos:end="55:43"><call pos:start="55:13" pos:end="55:39"><name pos:start="55:13" pos:end="55:24">check_params</name><argument_list pos:start="55:25" pos:end="55:39">(<argument pos:start="55:26" pos:end="55:35"><expr pos:start="55:26" pos:end="55:35"><name pos:start="55:26" pos:end="55:35">nic_params</name></expr></argument>, <argument pos:start="55:38" pos:end="55:38"><expr pos:start="55:38" pos:end="55:38"><name pos:start="55:38" pos:end="55:38">p</name></expr></argument>)</argument_list></call> <operator pos:start="55:41" pos:end="55:41">&lt;</operator> <literal type="number" pos:start="55:43" pos:end="55:43">0</literal></expr>)</condition> <block pos:start="55:46" pos:end="63:9">{<block_content pos:start="57:13" pos:end="61:22">

            <expr_stmt pos:start="57:13" pos:end="59:28"><expr pos:start="57:13" pos:end="59:27"><call pos:start="57:13" pos:end="59:27"><name pos:start="57:13" pos:end="57:19">fprintf</name><argument_list pos:start="57:20" pos:end="59:27">(<argument pos:start="57:21" pos:end="57:26"><expr pos:start="57:21" pos:end="57:26"><name pos:start="57:21" pos:end="57:26">stderr</name></expr></argument>, <argument pos:start="57:29" pos:end="57:68"><expr pos:start="57:29" pos:end="57:68"><literal type="string" pos:start="57:29" pos:end="57:68">"qemu: invalid parameter '%s' in '%s'\n"</literal></expr></argument>,

                    <argument pos:start="59:21" pos:end="59:23"><expr pos:start="59:21" pos:end="59:23"><name pos:start="59:21" pos:end="59:23">buf</name></expr></argument>, <argument pos:start="59:26" pos:end="59:26"><expr pos:start="59:26" pos:end="59:26"><name pos:start="59:26" pos:end="59:26">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:22">return <expr pos:start="61:20" pos:end="61:21"><operator pos:start="61:20" pos:end="61:20">-</operator><literal type="number" pos:start="61:21" pos:end="61:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="73:9"><if pos:start="65:9" pos:end="73:9">if <condition pos:start="65:12" pos:end="65:45">(<expr pos:start="65:13" pos:end="65:44"><name pos:start="65:13" pos:end="65:15">idx</name> <operator pos:start="65:17" pos:end="65:18">==</operator> <operator pos:start="65:20" pos:end="65:20">-</operator><literal type="number" pos:start="65:21" pos:end="65:21">1</literal> <operator pos:start="65:23" pos:end="65:24">||</operator> <name pos:start="65:26" pos:end="65:32">nb_nics</name> <operator pos:start="65:34" pos:end="65:35">&gt;=</operator> <name pos:start="65:37" pos:end="65:44">MAX_NICS</name></expr>)</condition> <block pos:start="65:47" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:21">

            <expr_stmt pos:start="67:13" pos:end="67:47"><expr pos:start="67:13" pos:end="67:46"><call pos:start="67:13" pos:end="67:46"><name pos:start="67:13" pos:end="67:19">fprintf</name><argument_list pos:start="67:20" pos:end="67:46">(<argument pos:start="67:21" pos:end="67:26"><expr pos:start="67:21" pos:end="67:26"><name pos:start="67:21" pos:end="67:26">stderr</name></expr></argument>, <argument pos:start="67:29" pos:end="67:45"><expr pos:start="67:29" pos:end="67:45"><literal type="string" pos:start="67:29" pos:end="67:45">"Too Many NICs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:21"><expr pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <operator pos:start="69:19" pos:end="69:19">-</operator><literal type="number" pos:start="69:20" pos:end="69:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="71:13" pos:end="71:21">goto <name pos:start="71:18" pos:end="71:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:28"><expr pos:start="75:9" pos:end="75:27"><name pos:start="75:9" pos:end="75:10">nd</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <operator pos:start="75:14" pos:end="75:14">&amp;</operator><name pos:start="75:15" pos:end="75:27"><name pos:start="75:15" pos:end="75:22">nd_table</name><index pos:start="75:23" pos:end="75:27">[<expr pos:start="75:24" pos:end="75:26"><name pos:start="75:24" pos:end="75:26">idx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:15">macaddr</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:29"><name pos:start="77:19" pos:end="77:20">nd</name><operator pos:start="77:21" pos:end="77:22">-&gt;</operator><name pos:start="77:23" pos:end="77:29">macaddr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:26"><expr pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:15">macaddr</name><index pos:start="79:16" pos:end="79:18">[<expr pos:start="79:17" pos:end="79:17"><literal type="number" pos:start="79:17" pos:end="79:17">0</literal></expr>]</index></name> <operator pos:start="79:20" pos:end="79:20">=</operator> <literal type="number" pos:start="79:22" pos:end="79:25">0x52</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:15">macaddr</name><index pos:start="81:16" pos:end="81:18">[<expr pos:start="81:17" pos:end="81:17"><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>]</index></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <literal type="number" pos:start="81:22" pos:end="81:25">0x54</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:26"><expr pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:15">macaddr</name><index pos:start="83:16" pos:end="83:18">[<expr pos:start="83:17" pos:end="83:17"><literal type="number" pos:start="83:17" pos:end="83:17">2</literal></expr>]</index></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <literal type="number" pos:start="83:22" pos:end="83:25">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:26"><expr pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:15">macaddr</name><index pos:start="85:16" pos:end="85:18">[<expr pos:start="85:17" pos:end="85:17"><literal type="number" pos:start="85:17" pos:end="85:17">3</literal></expr>]</index></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:25">0x12</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:26"><expr pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:15">macaddr</name><index pos:start="87:16" pos:end="87:18">[<expr pos:start="87:17" pos:end="87:17"><literal type="number" pos:start="87:17" pos:end="87:17">4</literal></expr>]</index></name> <operator pos:start="87:20" pos:end="87:20">=</operator> <literal type="number" pos:start="87:22" pos:end="87:25">0x34</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:32"><expr pos:start="89:9" pos:end="89:31"><name pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:15">macaddr</name><index pos:start="89:16" pos:end="89:18">[<expr pos:start="89:17" pos:end="89:17"><literal type="number" pos:start="89:17" pos:end="89:17">5</literal></expr>]</index></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:27">0x56</literal> <operator pos:start="89:27" pos:end="89:27">+</operator> <name pos:start="89:29" pos:end="89:31">idx</name></expr>;</expr_stmt>



        <if_stmt pos:start="93:9" pos:end="105:9"><if pos:start="93:9" pos:end="105:9">if <condition pos:start="93:12" pos:end="93:60">(<expr pos:start="93:13" pos:end="93:59"><call pos:start="93:13" pos:end="93:59"><name pos:start="93:13" pos:end="93:27">get_param_value</name><argument_list pos:start="93:28" pos:end="93:59">(<argument pos:start="93:29" pos:end="93:31"><expr pos:start="93:29" pos:end="93:31"><name pos:start="93:29" pos:end="93:31">buf</name></expr></argument>, <argument pos:start="93:34" pos:end="93:44"><expr pos:start="93:34" pos:end="93:44"><sizeof pos:start="93:34" pos:end="93:44">sizeof<argument_list pos:start="93:40" pos:end="93:44">(<argument pos:start="93:41" pos:end="93:43"><expr pos:start="93:41" pos:end="93:43"><name pos:start="93:41" pos:end="93:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="93:47" pos:end="93:55"><expr pos:start="93:47" pos:end="93:55"><literal type="string" pos:start="93:47" pos:end="93:55">"macaddr"</literal></expr></argument>, <argument pos:start="93:58" pos:end="93:58"><expr pos:start="93:58" pos:end="93:58"><name pos:start="93:58" pos:end="93:58">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:62" pos:end="105:9">{<block_content pos:start="95:13" pos:end="103:13">

            <if_stmt pos:start="95:13" pos:end="103:13"><if pos:start="95:13" pos:end="103:13">if <condition pos:start="95:16" pos:end="95:48">(<expr pos:start="95:17" pos:end="95:47"><call pos:start="95:17" pos:end="95:43"><name pos:start="95:17" pos:end="95:29">parse_macaddr</name><argument_list pos:start="95:30" pos:end="95:43">(<argument pos:start="95:31" pos:end="95:37"><expr pos:start="95:31" pos:end="95:37"><name pos:start="95:31" pos:end="95:37">macaddr</name></expr></argument>, <argument pos:start="95:40" pos:end="95:42"><expr pos:start="95:40" pos:end="95:42"><name pos:start="95:40" pos:end="95:42">buf</name></expr></argument>)</argument_list></call> <operator pos:start="95:45" pos:end="95:45">&lt;</operator> <literal type="number" pos:start="95:47" pos:end="95:47">0</literal></expr>)</condition> <block pos:start="95:50" pos:end="103:13">{<block_content pos:start="97:17" pos:end="101:25">

                <expr_stmt pos:start="97:17" pos:end="97:73"><expr pos:start="97:17" pos:end="97:72"><call pos:start="97:17" pos:end="97:72"><name pos:start="97:17" pos:end="97:23">fprintf</name><argument_list pos:start="97:24" pos:end="97:72">(<argument pos:start="97:25" pos:end="97:30"><expr pos:start="97:25" pos:end="97:30"><name pos:start="97:25" pos:end="97:30">stderr</name></expr></argument>, <argument pos:start="97:33" pos:end="97:71"><expr pos:start="97:33" pos:end="97:71"><literal type="string" pos:start="97:33" pos:end="97:71">"invalid syntax for ethernet address\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:25"><expr pos:start="99:17" pos:end="99:24"><name pos:start="99:17" pos:end="99:19">ret</name> <operator pos:start="99:21" pos:end="99:21">=</operator> <operator pos:start="99:23" pos:end="99:23">-</operator><literal type="number" pos:start="99:24" pos:end="99:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="101:17" pos:end="101:25">goto <name pos:start="101:22" pos:end="101:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="111:9"><if pos:start="107:9" pos:end="111:9">if <condition pos:start="107:12" pos:end="107:58">(<expr pos:start="107:13" pos:end="107:57"><call pos:start="107:13" pos:end="107:57"><name pos:start="107:13" pos:end="107:27">get_param_value</name><argument_list pos:start="107:28" pos:end="107:57">(<argument pos:start="107:29" pos:end="107:31"><expr pos:start="107:29" pos:end="107:31"><name pos:start="107:29" pos:end="107:31">buf</name></expr></argument>, <argument pos:start="107:34" pos:end="107:44"><expr pos:start="107:34" pos:end="107:44"><sizeof pos:start="107:34" pos:end="107:44">sizeof<argument_list pos:start="107:40" pos:end="107:44">(<argument pos:start="107:41" pos:end="107:43"><expr pos:start="107:41" pos:end="107:43"><name pos:start="107:41" pos:end="107:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="107:47" pos:end="107:53"><expr pos:start="107:47" pos:end="107:53"><literal type="string" pos:start="107:47" pos:end="107:53">"model"</literal></expr></argument>, <argument pos:start="107:56" pos:end="107:56"><expr pos:start="107:56" pos:end="107:56"><name pos:start="107:56" pos:end="107:56">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:60" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:36">

            <expr_stmt pos:start="109:13" pos:end="109:36"><expr pos:start="109:13" pos:end="109:35"><name pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:14">nd</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:21">model</name></name> <operator pos:start="109:23" pos:end="109:23">=</operator> <call pos:start="109:25" pos:end="109:35"><name pos:start="109:25" pos:end="109:30">strdup</name><argument_list pos:start="109:31" pos:end="109:35">(<argument pos:start="109:32" pos:end="109:34"><expr pos:start="109:32" pos:end="109:34"><name pos:start="109:32" pos:end="109:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:24"><expr pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:16"><name pos:start="113:9" pos:end="113:10">nd</name><operator pos:start="113:11" pos:end="113:12">-&gt;</operator><name pos:start="113:13" pos:end="113:16">vlan</name></name> <operator pos:start="113:18" pos:end="113:18">=</operator> <name pos:start="113:20" pos:end="113:23">vlan</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:24"><expr pos:start="115:9" pos:end="115:23"><name pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:10">nd</name><operator pos:start="115:11" pos:end="115:12">-&gt;</operator><name pos:start="115:13" pos:end="115:16">name</name></name> <operator pos:start="115:18" pos:end="115:18">=</operator> <name pos:start="115:20" pos:end="115:23">name</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:21"><expr pos:start="117:9" pos:end="117:20"><name pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:10">nd</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:16">used</name></name> <operator pos:start="117:18" pos:end="117:18">=</operator> <literal type="number" pos:start="117:20" pos:end="117:20">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:20"><expr pos:start="119:9" pos:end="119:19"><name pos:start="119:9" pos:end="119:12">name</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <name pos:start="119:16" pos:end="119:19">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:18"><expr pos:start="121:9" pos:end="121:17"><name pos:start="121:9" pos:end="121:15">nb_nics</name><operator pos:start="121:16" pos:end="121:17">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:30"><expr pos:start="123:9" pos:end="123:29"><name pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:12">vlan</name><operator pos:start="123:13" pos:end="123:14">-&gt;</operator><name pos:start="123:15" pos:end="123:27">nb_guest_devs</name></name><operator pos:start="123:28" pos:end="123:29">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:18"><expr pos:start="125:9" pos:end="125:17"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <name pos:start="125:15" pos:end="125:17">idx</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="127:7" pos:end="145:5">else

    if <condition pos:start="129:8" pos:end="129:32">(<expr pos:start="129:9" pos:end="129:31"><operator pos:start="129:9" pos:end="129:9">!</operator><call pos:start="129:10" pos:end="129:31"><name pos:start="129:10" pos:end="129:15">strcmp</name><argument_list pos:start="129:16" pos:end="129:31">(<argument pos:start="129:17" pos:end="129:22"><expr pos:start="129:17" pos:end="129:22"><name pos:start="129:17" pos:end="129:22">device</name></expr></argument>, <argument pos:start="129:25" pos:end="129:30"><expr pos:start="129:25" pos:end="129:30"><literal type="string" pos:start="129:25" pos:end="129:30">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:34" pos:end="145:5">{<block_content pos:start="131:9" pos:end="143:16">

        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:23">(<expr pos:start="131:13" pos:end="131:22"><operator pos:start="131:13" pos:end="131:13">*</operator><name pos:start="131:14" pos:end="131:14">p</name> <operator pos:start="131:16" pos:end="131:17">!=</operator> <literal type="char" pos:start="131:19" pos:end="131:22">'\0'</literal></expr>)</condition> <block pos:start="131:25" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:22">

            <expr_stmt pos:start="133:13" pos:end="133:66"><expr pos:start="133:13" pos:end="133:65"><call pos:start="133:13" pos:end="133:65"><name pos:start="133:13" pos:end="133:19">fprintf</name><argument_list pos:start="133:20" pos:end="133:65">(<argument pos:start="133:21" pos:end="133:26"><expr pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:26">stderr</name></expr></argument>, <argument pos:start="133:29" pos:end="133:64"><expr pos:start="133:29" pos:end="133:64"><literal type="string" pos:start="133:29" pos:end="133:64">"qemu: 'none' takes no parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="135:13" pos:end="135:22">return <expr pos:start="135:20" pos:end="135:21"><operator pos:start="135:20" pos:end="135:20">-</operator><literal type="number" pos:start="135:21" pos:end="135:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="139:9" pos:end="141:24">/* does nothing. It is needed to signal that no network cards

           are wanted */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:16"><expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <literal type="number" pos:start="143:15" pos:end="143:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="145:7" pos:end="189:5">else

<cpp:ifdef pos:start="147:1" pos:end="147:19">#<cpp:directive pos:start="147:2" pos:end="147:6">ifdef</cpp:directive> <name pos:start="147:8" pos:end="147:19">CONFIG_SLIRP</name></cpp:ifdef>

    if <condition pos:start="149:8" pos:end="149:32">(<expr pos:start="149:9" pos:end="149:31"><operator pos:start="149:9" pos:end="149:9">!</operator><call pos:start="149:10" pos:end="149:31"><name pos:start="149:10" pos:end="149:15">strcmp</name><argument_list pos:start="149:16" pos:end="149:31">(<argument pos:start="149:17" pos:end="149:22"><expr pos:start="149:17" pos:end="149:22"><name pos:start="149:17" pos:end="149:22">device</name></expr></argument>, <argument pos:start="149:25" pos:end="149:30"><expr pos:start="149:25" pos:end="149:30"><literal type="string" pos:start="149:25" pos:end="149:30">"user"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:34" pos:end="189:5">{<block_content pos:start="151:9" pos:end="187:49">

        <decl_stmt pos:start="151:9" pos:end="155:10"><decl pos:start="151:9" pos:end="155:9"><type pos:start="151:9" pos:end="151:33"><specifier pos:start="151:9" pos:end="151:14">static</specifier> <specifier pos:start="151:16" pos:end="151:20">const</specifier> <name pos:start="151:22" pos:end="151:25">char</name> <modifier pos:start="151:27" pos:end="151:27">*</modifier> <specifier pos:start="151:29" pos:end="151:33">const</specifier></type> <name pos:start="151:35" pos:end="151:48"><name pos:start="151:35" pos:end="151:46">slirp_params</name><index pos:start="151:47" pos:end="151:48">[]</index></name> <init pos:start="151:50" pos:end="155:9">= <expr pos:start="151:52" pos:end="155:9"><block pos:start="151:52" pos:end="155:9">{

            <expr pos:start="153:13" pos:end="153:18"><literal type="string" pos:start="153:13" pos:end="153:18">"vlan"</literal></expr>, <expr pos:start="153:21" pos:end="153:26"><literal type="string" pos:start="153:21" pos:end="153:26">"name"</literal></expr>, <expr pos:start="153:29" pos:end="153:38"><literal type="string" pos:start="153:29" pos:end="153:38">"hostname"</literal></expr>, <expr pos:start="153:41" pos:end="153:50"><literal type="string" pos:start="153:41" pos:end="153:50">"restrict"</literal></expr>, <expr pos:start="153:53" pos:end="153:56"><literal type="string" pos:start="153:53" pos:end="153:56">"ip"</literal></expr>, <expr pos:start="153:59" pos:end="153:62"><name pos:start="153:59" pos:end="153:62">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="157:9" pos:end="165:9"><if pos:start="157:9" pos:end="165:9">if <condition pos:start="157:12" pos:end="157:46">(<expr pos:start="157:13" pos:end="157:45"><call pos:start="157:13" pos:end="157:41"><name pos:start="157:13" pos:end="157:24">check_params</name><argument_list pos:start="157:25" pos:end="157:41">(<argument pos:start="157:26" pos:end="157:37"><expr pos:start="157:26" pos:end="157:37"><name pos:start="157:26" pos:end="157:37">slirp_params</name></expr></argument>, <argument pos:start="157:40" pos:end="157:40"><expr pos:start="157:40" pos:end="157:40"><name pos:start="157:40" pos:end="157:40">p</name></expr></argument>)</argument_list></call> <operator pos:start="157:43" pos:end="157:43">&lt;</operator> <literal type="number" pos:start="157:45" pos:end="157:45">0</literal></expr>)</condition> <block pos:start="157:48" pos:end="165:9">{<block_content pos:start="159:13" pos:end="163:22">

            <expr_stmt pos:start="159:13" pos:end="161:28"><expr pos:start="159:13" pos:end="161:27"><call pos:start="159:13" pos:end="161:27"><name pos:start="159:13" pos:end="159:19">fprintf</name><argument_list pos:start="159:20" pos:end="161:27">(<argument pos:start="159:21" pos:end="159:26"><expr pos:start="159:21" pos:end="159:26"><name pos:start="159:21" pos:end="159:26">stderr</name></expr></argument>, <argument pos:start="159:29" pos:end="159:68"><expr pos:start="159:29" pos:end="159:68"><literal type="string" pos:start="159:29" pos:end="159:68">"qemu: invalid parameter '%s' in '%s'\n"</literal></expr></argument>,

                    <argument pos:start="161:21" pos:end="161:23"><expr pos:start="161:21" pos:end="161:23"><name pos:start="161:21" pos:end="161:23">buf</name></expr></argument>, <argument pos:start="161:26" pos:end="161:26"><expr pos:start="161:26" pos:end="161:26"><name pos:start="161:26" pos:end="161:26">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="163:13" pos:end="163:22">return <expr pos:start="163:20" pos:end="163:21"><operator pos:start="163:20" pos:end="163:20">-</operator><literal type="number" pos:start="163:21" pos:end="163:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="167:9" pos:end="171:9"><if pos:start="167:9" pos:end="171:9">if <condition pos:start="167:12" pos:end="167:61">(<expr pos:start="167:13" pos:end="167:60"><call pos:start="167:13" pos:end="167:60"><name pos:start="167:13" pos:end="167:27">get_param_value</name><argument_list pos:start="167:28" pos:end="167:60">(<argument pos:start="167:29" pos:end="167:31"><expr pos:start="167:29" pos:end="167:31"><name pos:start="167:29" pos:end="167:31">buf</name></expr></argument>, <argument pos:start="167:34" pos:end="167:44"><expr pos:start="167:34" pos:end="167:44"><sizeof pos:start="167:34" pos:end="167:44">sizeof<argument_list pos:start="167:40" pos:end="167:44">(<argument pos:start="167:41" pos:end="167:43"><expr pos:start="167:41" pos:end="167:43"><name pos:start="167:41" pos:end="167:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="167:47" pos:end="167:56"><expr pos:start="167:47" pos:end="167:56"><literal type="string" pos:start="167:47" pos:end="167:56">"hostname"</literal></expr></argument>, <argument pos:start="167:59" pos:end="167:59"><expr pos:start="167:59" pos:end="167:59"><name pos:start="167:59" pos:end="167:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:63" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:65">

            <expr_stmt pos:start="169:13" pos:end="169:65"><expr pos:start="169:13" pos:end="169:64"><call pos:start="169:13" pos:end="169:64"><name pos:start="169:13" pos:end="169:19">pstrcpy</name><argument_list pos:start="169:20" pos:end="169:64">(<argument pos:start="169:21" pos:end="169:34"><expr pos:start="169:21" pos:end="169:34"><name pos:start="169:21" pos:end="169:34">slirp_hostname</name></expr></argument>, <argument pos:start="169:37" pos:end="169:58"><expr pos:start="169:37" pos:end="169:58"><sizeof pos:start="169:37" pos:end="169:58">sizeof<argument_list pos:start="169:43" pos:end="169:58">(<argument pos:start="169:44" pos:end="169:57"><expr pos:start="169:44" pos:end="169:57"><name pos:start="169:44" pos:end="169:57">slirp_hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="169:61" pos:end="169:63"><expr pos:start="169:61" pos:end="169:63"><name pos:start="169:61" pos:end="169:63">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="173:9" pos:end="177:9"><if pos:start="173:9" pos:end="177:9">if <condition pos:start="173:12" pos:end="173:61">(<expr pos:start="173:13" pos:end="173:60"><call pos:start="173:13" pos:end="173:60"><name pos:start="173:13" pos:end="173:27">get_param_value</name><argument_list pos:start="173:28" pos:end="173:60">(<argument pos:start="173:29" pos:end="173:31"><expr pos:start="173:29" pos:end="173:31"><name pos:start="173:29" pos:end="173:31">buf</name></expr></argument>, <argument pos:start="173:34" pos:end="173:44"><expr pos:start="173:34" pos:end="173:44"><sizeof pos:start="173:34" pos:end="173:44">sizeof<argument_list pos:start="173:40" pos:end="173:44">(<argument pos:start="173:41" pos:end="173:43"><expr pos:start="173:41" pos:end="173:43"><name pos:start="173:41" pos:end="173:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="173:47" pos:end="173:56"><expr pos:start="173:47" pos:end="173:56"><literal type="string" pos:start="173:47" pos:end="173:56">"restrict"</literal></expr></argument>, <argument pos:start="173:59" pos:end="173:59"><expr pos:start="173:59" pos:end="173:59"><name pos:start="173:59" pos:end="173:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="173:63" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:53">

            <expr_stmt pos:start="175:13" pos:end="175:53"><expr pos:start="175:13" pos:end="175:52"><name pos:start="175:13" pos:end="175:26">slirp_restrict</name> <operator pos:start="175:28" pos:end="175:28">=</operator> <ternary pos:start="175:30" pos:end="175:52"><condition pos:start="175:30" pos:end="175:46"><expr pos:start="175:30" pos:end="175:44"><operator pos:start="175:30" pos:end="175:30">(</operator><name pos:start="175:31" pos:end="175:36"><name pos:start="175:31" pos:end="175:33">buf</name><index pos:start="175:34" pos:end="175:36">[<expr pos:start="175:35" pos:end="175:35"><literal type="number" pos:start="175:35" pos:end="175:35">0</literal></expr>]</index></name> <operator pos:start="175:38" pos:end="175:39">==</operator> <literal type="char" pos:start="175:41" pos:end="175:43">'y'</literal><operator pos:start="175:44" pos:end="175:44">)</operator></expr> ?</condition><then pos:start="175:48" pos:end="175:48"> <expr pos:start="175:48" pos:end="175:48"><literal type="number" pos:start="175:48" pos:end="175:48">1</literal></expr> </then><else pos:start="175:50" pos:end="175:52">: <expr pos:start="175:52" pos:end="175:52"><literal type="number" pos:start="175:52" pos:end="175:52">0</literal></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="179:9" pos:end="183:9"><if pos:start="179:9" pos:end="183:9">if <condition pos:start="179:12" pos:end="179:55">(<expr pos:start="179:13" pos:end="179:54"><call pos:start="179:13" pos:end="179:54"><name pos:start="179:13" pos:end="179:27">get_param_value</name><argument_list pos:start="179:28" pos:end="179:54">(<argument pos:start="179:29" pos:end="179:31"><expr pos:start="179:29" pos:end="179:31"><name pos:start="179:29" pos:end="179:31">buf</name></expr></argument>, <argument pos:start="179:34" pos:end="179:44"><expr pos:start="179:34" pos:end="179:44"><sizeof pos:start="179:34" pos:end="179:44">sizeof<argument_list pos:start="179:40" pos:end="179:44">(<argument pos:start="179:41" pos:end="179:43"><expr pos:start="179:41" pos:end="179:43"><name pos:start="179:41" pos:end="179:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="179:47" pos:end="179:50"><expr pos:start="179:47" pos:end="179:50"><literal type="string" pos:start="179:47" pos:end="179:50">"ip"</literal></expr></argument>, <argument pos:start="179:53" pos:end="179:53"><expr pos:start="179:53" pos:end="179:53"><name pos:start="179:53" pos:end="179:53">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:57" pos:end="183:9">{<block_content pos:start="181:13" pos:end="181:35">

            <expr_stmt pos:start="181:13" pos:end="181:35"><expr pos:start="181:13" pos:end="181:34"><name pos:start="181:13" pos:end="181:20">slirp_ip</name> <operator pos:start="181:22" pos:end="181:22">=</operator> <call pos:start="181:24" pos:end="181:34"><name pos:start="181:24" pos:end="181:29">strdup</name><argument_list pos:start="181:30" pos:end="181:34">(<argument pos:start="181:31" pos:end="181:33"><expr pos:start="181:31" pos:end="181:33"><name pos:start="181:31" pos:end="181:33">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:29"><expr pos:start="185:9" pos:end="185:28"><name pos:start="185:9" pos:end="185:26"><name pos:start="185:9" pos:end="185:12">vlan</name><operator pos:start="185:13" pos:end="185:14">-&gt;</operator><name pos:start="185:15" pos:end="185:26">nb_host_devs</name></name><operator pos:start="185:27" pos:end="185:28">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:49"><expr pos:start="187:9" pos:end="187:48"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:48"><name pos:start="187:15" pos:end="187:28">net_slirp_init</name><argument_list pos:start="187:29" pos:end="187:48">(<argument pos:start="187:30" pos:end="187:33"><expr pos:start="187:30" pos:end="187:33"><name pos:start="187:30" pos:end="187:33">vlan</name></expr></argument>, <argument pos:start="187:36" pos:end="187:41"><expr pos:start="187:36" pos:end="187:41"><name pos:start="187:36" pos:end="187:41">device</name></expr></argument>, <argument pos:start="187:44" pos:end="187:47"><expr pos:start="187:44" pos:end="187:47"><name pos:start="187:44" pos:end="187:47">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="189:7" pos:end="241:5">else if <condition pos:start="189:15" pos:end="189:42">(<expr pos:start="189:16" pos:end="189:41"><operator pos:start="189:16" pos:end="189:16">!</operator><call pos:start="189:17" pos:end="189:41"><name pos:start="189:17" pos:end="189:22">strcmp</name><argument_list pos:start="189:23" pos:end="189:41">(<argument pos:start="189:24" pos:end="189:29"><expr pos:start="189:24" pos:end="189:29"><name pos:start="189:24" pos:end="189:29">device</name></expr></argument>, <argument pos:start="189:32" pos:end="189:40"><expr pos:start="189:32" pos:end="189:40"><literal type="string" pos:start="189:32" pos:end="189:40">"channel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:44" pos:end="241:5">{<block_content pos:start="191:9" pos:end="239:16">

        <decl_stmt pos:start="191:9" pos:end="191:18"><decl pos:start="191:9" pos:end="191:17"><type pos:start="191:9" pos:end="191:12"><name pos:start="191:9" pos:end="191:12">long</name></type> <name pos:start="191:14" pos:end="191:17">port</name></decl>;</decl_stmt>

        <decl_stmt pos:start="193:9" pos:end="193:32"><decl pos:start="193:9" pos:end="193:21"><type pos:start="193:9" pos:end="193:12"><name pos:start="193:9" pos:end="193:12">char</name></type> <name pos:start="193:14" pos:end="193:21"><name pos:start="193:14" pos:end="193:17">name</name><index pos:start="193:18" pos:end="193:21">[<expr pos:start="193:19" pos:end="193:20"><literal type="number" pos:start="193:19" pos:end="193:20">20</literal></expr>]</index></name></decl>, <decl pos:start="193:24" pos:end="193:31"><type ref="prev" pos:start="193:9" pos:end="193:12"><modifier pos:start="193:24" pos:end="193:24">*</modifier></type><name pos:start="193:25" pos:end="193:31">devname</name></decl>;</decl_stmt>

        <decl_stmt pos:start="195:9" pos:end="195:30"><decl pos:start="195:9" pos:end="195:29"><type pos:start="195:9" pos:end="195:26"><name pos:start="195:9" pos:end="195:24"><name pos:start="195:9" pos:end="195:14">struct</name> <name pos:start="195:16" pos:end="195:24">VMChannel</name></name> <modifier pos:start="195:26" pos:end="195:26">*</modifier></type><name pos:start="195:27" pos:end="195:29">vmc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="199:9" pos:end="199:39"><expr pos:start="199:9" pos:end="199:38"><name pos:start="199:9" pos:end="199:12">port</name> <operator pos:start="199:14" pos:end="199:14">=</operator> <call pos:start="199:16" pos:end="199:38"><name pos:start="199:16" pos:end="199:21">strtol</name><argument_list pos:start="199:22" pos:end="199:38">(<argument pos:start="199:23" pos:end="199:23"><expr pos:start="199:23" pos:end="199:23"><name pos:start="199:23" pos:end="199:23">p</name></expr></argument>, <argument pos:start="199:26" pos:end="199:33"><expr pos:start="199:26" pos:end="199:33"><operator pos:start="199:26" pos:end="199:26">&amp;</operator><name pos:start="199:27" pos:end="199:33">devname</name></expr></argument>, <argument pos:start="199:36" pos:end="199:37"><expr pos:start="199:36" pos:end="199:37"><literal type="number" pos:start="199:36" pos:end="199:37">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:18"><expr pos:start="201:9" pos:end="201:17"><name pos:start="201:9" pos:end="201:15">devname</name><operator pos:start="201:16" pos:end="201:17">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="203:9" pos:end="211:9"><if pos:start="203:9" pos:end="211:9">if <condition pos:start="203:12" pos:end="203:37">(<expr pos:start="203:13" pos:end="203:36"><name pos:start="203:13" pos:end="203:30"><name pos:start="203:13" pos:end="203:16">port</name> <argument_list type="generic" pos:start="203:18" pos:end="203:30">&lt; <argument pos:start="203:20" pos:end="203:28"><expr pos:start="203:20" pos:end="203:28"><literal type="number" pos:start="203:20" pos:end="203:20">1</literal> <operator pos:start="203:22" pos:end="203:23">||</operator> <name pos:start="203:25" pos:end="203:28">port</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="203:32" pos:end="203:36">65535</literal></expr>)</condition> <block pos:start="203:39" pos:end="211:9">{<block_content pos:start="205:13" pos:end="209:21">

            <expr_stmt pos:start="205:13" pos:end="205:61"><expr pos:start="205:13" pos:end="205:60"><call pos:start="205:13" pos:end="205:60"><name pos:start="205:13" pos:end="205:19">fprintf</name><argument_list pos:start="205:20" pos:end="205:60">(<argument pos:start="205:21" pos:end="205:26"><expr pos:start="205:21" pos:end="205:26"><name pos:start="205:21" pos:end="205:26">stderr</name></expr></argument>, <argument pos:start="205:29" pos:end="205:59"><expr pos:start="205:29" pos:end="205:59"><literal type="string" pos:start="205:29" pos:end="205:59">"vmchannel wrong port number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:21"><expr pos:start="207:13" pos:end="207:20"><name pos:start="207:13" pos:end="207:15">ret</name> <operator pos:start="207:17" pos:end="207:17">=</operator> <operator pos:start="207:19" pos:end="207:19">-</operator><literal type="number" pos:start="207:20" pos:end="207:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="209:13" pos:end="209:21">goto <name pos:start="209:18" pos:end="209:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:47"><expr pos:start="213:9" pos:end="213:46"><name pos:start="213:9" pos:end="213:11">vmc</name> <operator pos:start="213:13" pos:end="213:13">=</operator> <call pos:start="213:15" pos:end="213:46"><name pos:start="213:15" pos:end="213:20">malloc</name><argument_list pos:start="213:21" pos:end="213:46">(<argument pos:start="213:22" pos:end="213:45"><expr pos:start="213:22" pos:end="213:45"><sizeof pos:start="213:22" pos:end="213:45">sizeof<argument_list pos:start="213:28" pos:end="213:45">(<argument pos:start="213:29" pos:end="213:44"><expr pos:start="213:29" pos:end="213:44">struct <name pos:start="213:36" pos:end="213:44">VMChannel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:49"><expr pos:start="215:9" pos:end="215:48"><call pos:start="215:9" pos:end="215:48"><name pos:start="215:9" pos:end="215:16">snprintf</name><argument_list pos:start="215:17" pos:end="215:48">(<argument pos:start="215:18" pos:end="215:21"><expr pos:start="215:18" pos:end="215:21"><name pos:start="215:18" pos:end="215:21">name</name></expr></argument>, <argument pos:start="215:24" pos:end="215:25"><expr pos:start="215:24" pos:end="215:25"><literal type="number" pos:start="215:24" pos:end="215:25">20</literal></expr></argument>, <argument pos:start="215:28" pos:end="215:41"><expr pos:start="215:28" pos:end="215:41"><literal type="string" pos:start="215:28" pos:end="215:41">"vmchannel%ld"</literal></expr></argument>, <argument pos:start="215:44" pos:end="215:47"><expr pos:start="215:44" pos:end="215:47"><name pos:start="215:44" pos:end="215:47">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:53"><expr pos:start="217:9" pos:end="217:52"><name pos:start="217:9" pos:end="217:15"><name pos:start="217:9" pos:end="217:11">vmc</name><operator pos:start="217:12" pos:end="217:13">-&gt;</operator><name pos:start="217:14" pos:end="217:15">hd</name></name> <operator pos:start="217:17" pos:end="217:17">=</operator> <call pos:start="217:19" pos:end="217:52"><name pos:start="217:19" pos:end="217:31">qemu_chr_open</name><argument_list pos:start="217:32" pos:end="217:52">(<argument pos:start="217:33" pos:end="217:36"><expr pos:start="217:33" pos:end="217:36"><name pos:start="217:33" pos:end="217:36">name</name></expr></argument>, <argument pos:start="217:39" pos:end="217:45"><expr pos:start="217:39" pos:end="217:45"><name pos:start="217:39" pos:end="217:45">devname</name></expr></argument>, <argument pos:start="217:48" pos:end="217:51"><expr pos:start="217:48" pos:end="217:51"><name pos:start="217:48" pos:end="217:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="219:9" pos:end="229:9"><if pos:start="219:9" pos:end="229:9">if <condition pos:start="219:12" pos:end="219:21">(<expr pos:start="219:13" pos:end="219:20"><operator pos:start="219:13" pos:end="219:13">!</operator><name pos:start="219:14" pos:end="219:20"><name pos:start="219:14" pos:end="219:16">vmc</name><operator pos:start="219:17" pos:end="219:18">-&gt;</operator><name pos:start="219:19" pos:end="219:20">hd</name></name></expr>)</condition> <block pos:start="219:23" pos:end="229:9">{<block_content pos:start="221:13" pos:end="227:21">

            <expr_stmt pos:start="221:13" pos:end="223:39"><expr pos:start="221:13" pos:end="223:38"><call pos:start="221:13" pos:end="223:38"><name pos:start="221:13" pos:end="221:19">fprintf</name><argument_list pos:start="221:20" pos:end="223:38">(<argument pos:start="221:21" pos:end="221:26"><expr pos:start="221:21" pos:end="221:26"><name pos:start="221:21" pos:end="221:26">stderr</name></expr></argument>, <argument pos:start="221:29" pos:end="223:28"><expr pos:start="221:29" pos:end="223:28"><literal type="string" pos:start="221:29" pos:end="221:67">"qemu: could not open vmchannel device"</literal>

                    <literal type="string" pos:start="223:21" pos:end="223:28">"'%s'\n"</literal></expr></argument>, <argument pos:start="223:31" pos:end="223:37"><expr pos:start="223:31" pos:end="223:37"><name pos:start="223:31" pos:end="223:37">devname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:21"><expr pos:start="225:13" pos:end="225:20"><name pos:start="225:13" pos:end="225:15">ret</name> <operator pos:start="225:17" pos:end="225:17">=</operator> <operator pos:start="225:19" pos:end="225:19">-</operator><literal type="number" pos:start="225:20" pos:end="225:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="227:13" pos:end="227:21">goto <name pos:start="227:18" pos:end="227:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:25"><expr pos:start="231:9" pos:end="231:24"><name pos:start="231:9" pos:end="231:17"><name pos:start="231:9" pos:end="231:11">vmc</name><operator pos:start="231:12" pos:end="231:13">-&gt;</operator><name pos:start="231:14" pos:end="231:17">port</name></name> <operator pos:start="231:19" pos:end="231:19">=</operator> <name pos:start="231:21" pos:end="231:24">port</name></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:44"><expr pos:start="233:9" pos:end="233:43"><call pos:start="233:9" pos:end="233:43"><name pos:start="233:9" pos:end="233:22">slirp_add_exec</name><argument_list pos:start="233:23" pos:end="233:43">(<argument pos:start="233:24" pos:end="233:24"><expr pos:start="233:24" pos:end="233:24"><literal type="number" pos:start="233:24" pos:end="233:24">3</literal></expr></argument>, <argument pos:start="233:27" pos:end="233:33"><expr pos:start="233:27" pos:end="233:33"><name pos:start="233:27" pos:end="233:33"><name pos:start="233:27" pos:end="233:29">vmc</name><operator pos:start="233:30" pos:end="233:31">-&gt;</operator><name pos:start="233:32" pos:end="233:33">hd</name></name></expr></argument>, <argument pos:start="233:36" pos:end="233:36"><expr pos:start="233:36" pos:end="233:36"><literal type="number" pos:start="233:36" pos:end="233:36">4</literal></expr></argument>, <argument pos:start="233:39" pos:end="233:42"><expr pos:start="233:39" pos:end="233:42"><name pos:start="233:39" pos:end="233:42">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="237:27"><expr pos:start="235:9" pos:end="237:26"><call pos:start="235:9" pos:end="237:26"><name pos:start="235:9" pos:end="235:29">qemu_chr_add_handlers</name><argument_list pos:start="235:30" pos:end="237:26">(<argument pos:start="235:31" pos:end="235:37"><expr pos:start="235:31" pos:end="235:37"><name pos:start="235:31" pos:end="235:37"><name pos:start="235:31" pos:end="235:33">vmc</name><operator pos:start="235:34" pos:end="235:35">-&gt;</operator><name pos:start="235:36" pos:end="235:37">hd</name></name></expr></argument>, <argument pos:start="235:40" pos:end="235:57"><expr pos:start="235:40" pos:end="235:57"><name pos:start="235:40" pos:end="235:57">vmchannel_can_read</name></expr></argument>, <argument pos:start="235:60" pos:end="235:73"><expr pos:start="235:60" pos:end="235:73"><name pos:start="235:60" pos:end="235:73">vmchannel_read</name></expr></argument>,

                <argument pos:start="237:17" pos:end="237:20"><expr pos:start="237:17" pos:end="237:20"><name pos:start="237:17" pos:end="237:20">NULL</name></expr></argument>, <argument pos:start="237:23" pos:end="237:25"><expr pos:start="237:23" pos:end="237:25"><name pos:start="237:23" pos:end="237:25">vmc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:16"><expr pos:start="239:9" pos:end="239:15"><name pos:start="239:9" pos:end="239:11">ret</name> <operator pos:start="239:13" pos:end="239:13">=</operator> <literal type="number" pos:start="239:15" pos:end="239:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="241:7" pos:end="283:5">else

<cpp:endif pos:start="243:1" pos:end="243:6">#<cpp:directive pos:start="243:2" pos:end="243:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="245:1" pos:end="245:13">#<cpp:directive pos:start="245:2" pos:end="245:6">ifdef</cpp:directive> <name pos:start="245:8" pos:end="245:13">_WIN32</name></cpp:ifdef>

    if <condition pos:start="247:8" pos:end="247:31">(<expr pos:start="247:9" pos:end="247:30"><operator pos:start="247:9" pos:end="247:9">!</operator><call pos:start="247:10" pos:end="247:30"><name pos:start="247:10" pos:end="247:15">strcmp</name><argument_list pos:start="247:16" pos:end="247:30">(<argument pos:start="247:17" pos:end="247:22"><expr pos:start="247:17" pos:end="247:22"><name pos:start="247:17" pos:end="247:22">device</name></expr></argument>, <argument pos:start="247:25" pos:end="247:29"><expr pos:start="247:25" pos:end="247:29"><literal type="string" pos:start="247:25" pos:end="247:29">"tap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="247:33" pos:end="283:5">{<block_content pos:start="249:9" pos:end="281:57">

        <decl_stmt pos:start="249:9" pos:end="253:10"><decl pos:start="249:9" pos:end="253:9"><type pos:start="249:9" pos:end="249:33"><specifier pos:start="249:9" pos:end="249:14">static</specifier> <specifier pos:start="249:16" pos:end="249:20">const</specifier> <name pos:start="249:22" pos:end="249:25">char</name> <modifier pos:start="249:27" pos:end="249:27">*</modifier> <specifier pos:start="249:29" pos:end="249:33">const</specifier></type> <name pos:start="249:35" pos:end="249:46"><name pos:start="249:35" pos:end="249:44">tap_params</name><index pos:start="249:45" pos:end="249:46">[]</index></name> <init pos:start="249:48" pos:end="253:9">= <expr pos:start="249:50" pos:end="253:9"><block pos:start="249:50" pos:end="253:9">{

            <expr pos:start="251:13" pos:end="251:18"><literal type="string" pos:start="251:13" pos:end="251:18">"vlan"</literal></expr>, <expr pos:start="251:21" pos:end="251:26"><literal type="string" pos:start="251:21" pos:end="251:26">"name"</literal></expr>, <expr pos:start="251:29" pos:end="251:36"><literal type="string" pos:start="251:29" pos:end="251:36">"ifname"</literal></expr>, <expr pos:start="251:39" pos:end="251:42"><name pos:start="251:39" pos:end="251:42">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="255:9" pos:end="255:24"><decl pos:start="255:9" pos:end="255:23"><type pos:start="255:9" pos:end="255:12"><name pos:start="255:9" pos:end="255:12">char</name></type> <name pos:start="255:14" pos:end="255:23"><name pos:start="255:14" pos:end="255:19">ifname</name><index pos:start="255:20" pos:end="255:23">[<expr pos:start="255:21" pos:end="255:22"><literal type="number" pos:start="255:21" pos:end="255:22">64</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="259:9" pos:end="267:9"><if pos:start="259:9" pos:end="267:9">if <condition pos:start="259:12" pos:end="259:44">(<expr pos:start="259:13" pos:end="259:43"><call pos:start="259:13" pos:end="259:39"><name pos:start="259:13" pos:end="259:24">check_params</name><argument_list pos:start="259:25" pos:end="259:39">(<argument pos:start="259:26" pos:end="259:35"><expr pos:start="259:26" pos:end="259:35"><name pos:start="259:26" pos:end="259:35">tap_params</name></expr></argument>, <argument pos:start="259:38" pos:end="259:38"><expr pos:start="259:38" pos:end="259:38"><name pos:start="259:38" pos:end="259:38">p</name></expr></argument>)</argument_list></call> <operator pos:start="259:41" pos:end="259:41">&lt;</operator> <literal type="number" pos:start="259:43" pos:end="259:43">0</literal></expr>)</condition> <block pos:start="259:46" pos:end="267:9">{<block_content pos:start="261:13" pos:end="265:22">

            <expr_stmt pos:start="261:13" pos:end="263:28"><expr pos:start="261:13" pos:end="263:27"><call pos:start="261:13" pos:end="263:27"><name pos:start="261:13" pos:end="261:19">fprintf</name><argument_list pos:start="261:20" pos:end="263:27">(<argument pos:start="261:21" pos:end="261:26"><expr pos:start="261:21" pos:end="261:26"><name pos:start="261:21" pos:end="261:26">stderr</name></expr></argument>, <argument pos:start="261:29" pos:end="261:68"><expr pos:start="261:29" pos:end="261:68"><literal type="string" pos:start="261:29" pos:end="261:68">"qemu: invalid parameter '%s' in '%s'\n"</literal></expr></argument>,

                    <argument pos:start="263:21" pos:end="263:23"><expr pos:start="263:21" pos:end="263:23"><name pos:start="263:21" pos:end="263:23">buf</name></expr></argument>, <argument pos:start="263:26" pos:end="263:26"><expr pos:start="263:26" pos:end="263:26"><name pos:start="263:26" pos:end="263:26">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="265:13" pos:end="265:22">return <expr pos:start="265:20" pos:end="265:21"><operator pos:start="265:20" pos:end="265:20">-</operator><literal type="number" pos:start="265:21" pos:end="265:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="269:9" pos:end="277:9"><if pos:start="269:9" pos:end="277:9">if <condition pos:start="269:12" pos:end="269:70">(<expr pos:start="269:13" pos:end="269:69"><call pos:start="269:13" pos:end="269:64"><name pos:start="269:13" pos:end="269:27">get_param_value</name><argument_list pos:start="269:28" pos:end="269:64">(<argument pos:start="269:29" pos:end="269:34"><expr pos:start="269:29" pos:end="269:34"><name pos:start="269:29" pos:end="269:34">ifname</name></expr></argument>, <argument pos:start="269:37" pos:end="269:50"><expr pos:start="269:37" pos:end="269:50"><sizeof pos:start="269:37" pos:end="269:50">sizeof<argument_list pos:start="269:43" pos:end="269:50">(<argument pos:start="269:44" pos:end="269:49"><expr pos:start="269:44" pos:end="269:49"><name pos:start="269:44" pos:end="269:49">ifname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="269:53" pos:end="269:60"><expr pos:start="269:53" pos:end="269:60"><literal type="string" pos:start="269:53" pos:end="269:60">"ifname"</literal></expr></argument>, <argument pos:start="269:63" pos:end="269:63"><expr pos:start="269:63" pos:end="269:63"><name pos:start="269:63" pos:end="269:63">p</name></expr></argument>)</argument_list></call> <operator pos:start="269:66" pos:end="269:67">&lt;=</operator> <literal type="number" pos:start="269:69" pos:end="269:69">0</literal></expr>)</condition> <block pos:start="269:72" pos:end="277:9">{<block_content pos:start="271:13" pos:end="275:21">

            <expr_stmt pos:start="271:13" pos:end="271:56"><expr pos:start="271:13" pos:end="271:55"><call pos:start="271:13" pos:end="271:55"><name pos:start="271:13" pos:end="271:19">fprintf</name><argument_list pos:start="271:20" pos:end="271:55">(<argument pos:start="271:21" pos:end="271:26"><expr pos:start="271:21" pos:end="271:26"><name pos:start="271:21" pos:end="271:26">stderr</name></expr></argument>, <argument pos:start="271:29" pos:end="271:54"><expr pos:start="271:29" pos:end="271:54"><literal type="string" pos:start="271:29" pos:end="271:54">"tap: no interface name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:21"><expr pos:start="273:13" pos:end="273:20"><name pos:start="273:13" pos:end="273:15">ret</name> <operator pos:start="273:17" pos:end="273:17">=</operator> <operator pos:start="273:19" pos:end="273:19">-</operator><literal type="number" pos:start="273:20" pos:end="273:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="275:13" pos:end="275:21">goto <name pos:start="275:18" pos:end="275:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:29"><expr pos:start="279:9" pos:end="279:28"><name pos:start="279:9" pos:end="279:26"><name pos:start="279:9" pos:end="279:12">vlan</name><operator pos:start="279:13" pos:end="279:14">-&gt;</operator><name pos:start="279:15" pos:end="279:26">nb_host_devs</name></name><operator pos:start="279:27" pos:end="279:28">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:57"><expr pos:start="281:9" pos:end="281:56"><name pos:start="281:9" pos:end="281:11">ret</name> <operator pos:start="281:13" pos:end="281:13">=</operator> <call pos:start="281:15" pos:end="281:56"><name pos:start="281:15" pos:end="281:28">tap_win32_init</name><argument_list pos:start="281:29" pos:end="281:56">(<argument pos:start="281:30" pos:end="281:33"><expr pos:start="281:30" pos:end="281:33"><name pos:start="281:30" pos:end="281:33">vlan</name></expr></argument>, <argument pos:start="281:36" pos:end="281:41"><expr pos:start="281:36" pos:end="281:41"><name pos:start="281:36" pos:end="281:41">device</name></expr></argument>, <argument pos:start="281:44" pos:end="281:47"><expr pos:start="281:44" pos:end="281:47"><name pos:start="281:44" pos:end="281:47">name</name></expr></argument>, <argument pos:start="281:50" pos:end="281:55"><expr pos:start="281:50" pos:end="281:55"><name pos:start="281:50" pos:end="281:55">ifname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="283:7" pos:end="359:5">else

<cpp:elif pos:start="285:1" pos:end="285:20">#<cpp:directive pos:start="285:2" pos:end="285:5">elif</cpp:directive> <expr pos:start="285:7" pos:end="285:20"><call pos:start="285:7" pos:end="285:20"><name pos:start="285:7" pos:end="285:13">defined</name> <argument_list pos:start="285:15" pos:end="285:20">(<argument pos:start="285:16" pos:end="285:19"><expr pos:start="285:16" pos:end="285:19"><name pos:start="285:16" pos:end="285:19">_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:else pos:start="287:1" pos:end="287:5">#<cpp:directive pos:start="287:2" pos:end="287:5">else</cpp:directive></cpp:else>

    if <condition pos:start="289:8" pos:end="289:31">(<expr pos:start="289:9" pos:end="289:30"><operator pos:start="289:9" pos:end="289:9">!</operator><call pos:start="289:10" pos:end="289:30"><name pos:start="289:10" pos:end="289:15">strcmp</name><argument_list pos:start="289:16" pos:end="289:30">(<argument pos:start="289:17" pos:end="289:22"><expr pos:start="289:17" pos:end="289:22"><name pos:start="289:17" pos:end="289:22">device</name></expr></argument>, <argument pos:start="289:25" pos:end="289:29"><expr pos:start="289:25" pos:end="289:29"><literal type="string" pos:start="289:25" pos:end="289:29">"tap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="289:33" pos:end="359:5">{<block_content pos:start="291:9" pos:end="357:9">

        <decl_stmt pos:start="291:9" pos:end="291:24"><decl pos:start="291:9" pos:end="291:23"><type pos:start="291:9" pos:end="291:12"><name pos:start="291:9" pos:end="291:12">char</name></type> <name pos:start="291:14" pos:end="291:23"><name pos:start="291:14" pos:end="291:19">ifname</name><index pos:start="291:20" pos:end="291:23">[<expr pos:start="291:21" pos:end="291:22"><literal type="number" pos:start="291:21" pos:end="291:22">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="293:9" pos:end="293:51"><decl pos:start="293:9" pos:end="293:31"><type pos:start="293:9" pos:end="293:12"><name pos:start="293:9" pos:end="293:12">char</name></type> <name pos:start="293:14" pos:end="293:31"><name pos:start="293:14" pos:end="293:25">setup_script</name><index pos:start="293:26" pos:end="293:31">[<expr pos:start="293:27" pos:end="293:30"><literal type="number" pos:start="293:27" pos:end="293:30">1024</literal></expr>]</index></name></decl>, <decl pos:start="293:34" pos:end="293:50"><type ref="prev" pos:start="293:9" pos:end="293:12"/><name pos:start="293:34" pos:end="293:50"><name pos:start="293:34" pos:end="293:44">down_script</name><index pos:start="293:45" pos:end="293:50">[<expr pos:start="293:46" pos:end="293:49"><literal type="number" pos:start="293:46" pos:end="293:49">1024</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="295:9" pos:end="295:15"><decl pos:start="295:9" pos:end="295:14"><type pos:start="295:9" pos:end="295:11"><name pos:start="295:9" pos:end="295:11">int</name></type> <name pos:start="295:13" pos:end="295:14">fd</name></decl>;</decl_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:29"><expr pos:start="297:9" pos:end="297:28"><name pos:start="297:9" pos:end="297:26"><name pos:start="297:9" pos:end="297:12">vlan</name><operator pos:start="297:13" pos:end="297:14">-&gt;</operator><name pos:start="297:15" pos:end="297:26">nb_host_devs</name></name><operator pos:start="297:27" pos:end="297:28">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="299:9" pos:end="357:9"><if pos:start="299:9" pos:end="319:9">if <condition pos:start="299:12" pos:end="299:59">(<expr pos:start="299:13" pos:end="299:58"><call pos:start="299:13" pos:end="299:54"><name pos:start="299:13" pos:end="299:27">get_param_value</name><argument_list pos:start="299:28" pos:end="299:54">(<argument pos:start="299:29" pos:end="299:31"><expr pos:start="299:29" pos:end="299:31"><name pos:start="299:29" pos:end="299:31">buf</name></expr></argument>, <argument pos:start="299:34" pos:end="299:44"><expr pos:start="299:34" pos:end="299:44"><sizeof pos:start="299:34" pos:end="299:44">sizeof<argument_list pos:start="299:40" pos:end="299:44">(<argument pos:start="299:41" pos:end="299:43"><expr pos:start="299:41" pos:end="299:43"><name pos:start="299:41" pos:end="299:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="299:47" pos:end="299:50"><expr pos:start="299:47" pos:end="299:50"><literal type="string" pos:start="299:47" pos:end="299:50">"fd"</literal></expr></argument>, <argument pos:start="299:53" pos:end="299:53"><expr pos:start="299:53" pos:end="299:53"><name pos:start="299:53" pos:end="299:53">p</name></expr></argument>)</argument_list></call> <operator pos:start="299:56" pos:end="299:56">&gt;</operator> <literal type="number" pos:start="299:58" pos:end="299:58">0</literal></expr>)</condition> <block pos:start="299:61" pos:end="319:9">{<block_content pos:start="301:13" pos:end="317:20">

            <if_stmt pos:start="301:13" pos:end="309:13"><if pos:start="301:13" pos:end="309:13">if <condition pos:start="301:16" pos:end="301:47">(<expr pos:start="301:17" pos:end="301:46"><call pos:start="301:17" pos:end="301:42"><name pos:start="301:17" pos:end="301:28">check_params</name><argument_list pos:start="301:29" pos:end="301:42">(<argument pos:start="301:30" pos:end="301:38"><expr pos:start="301:30" pos:end="301:38"><name pos:start="301:30" pos:end="301:38">fd_params</name></expr></argument>, <argument pos:start="301:41" pos:end="301:41"><expr pos:start="301:41" pos:end="301:41"><name pos:start="301:41" pos:end="301:41">p</name></expr></argument>)</argument_list></call> <operator pos:start="301:44" pos:end="301:44">&lt;</operator> <literal type="number" pos:start="301:46" pos:end="301:46">0</literal></expr>)</condition> <block pos:start="301:49" pos:end="309:13">{<block_content pos:start="303:17" pos:end="307:26">

                <expr_stmt pos:start="303:17" pos:end="305:32"><expr pos:start="303:17" pos:end="305:31"><call pos:start="303:17" pos:end="305:31"><name pos:start="303:17" pos:end="303:23">fprintf</name><argument_list pos:start="303:24" pos:end="305:31">(<argument pos:start="303:25" pos:end="303:30"><expr pos:start="303:25" pos:end="303:30"><name pos:start="303:25" pos:end="303:30">stderr</name></expr></argument>, <argument pos:start="303:33" pos:end="303:72"><expr pos:start="303:33" pos:end="303:72"><literal type="string" pos:start="303:33" pos:end="303:72">"qemu: invalid parameter '%s' in '%s'\n"</literal></expr></argument>,

                        <argument pos:start="305:25" pos:end="305:27"><expr pos:start="305:25" pos:end="305:27"><name pos:start="305:25" pos:end="305:27">buf</name></expr></argument>, <argument pos:start="305:30" pos:end="305:30"><expr pos:start="305:30" pos:end="305:30"><name pos:start="305:30" pos:end="305:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="307:17" pos:end="307:26">return <expr pos:start="307:24" pos:end="307:25"><operator pos:start="307:24" pos:end="307:24">-</operator><literal type="number" pos:start="307:25" pos:end="307:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:38"><expr pos:start="311:13" pos:end="311:37"><name pos:start="311:13" pos:end="311:14">fd</name> <operator pos:start="311:16" pos:end="311:16">=</operator> <call pos:start="311:18" pos:end="311:37"><name pos:start="311:18" pos:end="311:23">strtol</name><argument_list pos:start="311:24" pos:end="311:37">(<argument pos:start="311:25" pos:end="311:27"><expr pos:start="311:25" pos:end="311:27"><name pos:start="311:25" pos:end="311:27">buf</name></expr></argument>, <argument pos:start="311:30" pos:end="311:33"><expr pos:start="311:30" pos:end="311:33"><name pos:start="311:30" pos:end="311:33">NULL</name></expr></argument>, <argument pos:start="311:36" pos:end="311:36"><expr pos:start="311:36" pos:end="311:36"><literal type="number" pos:start="311:36" pos:end="311:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:43"><expr pos:start="313:13" pos:end="313:42"><call pos:start="313:13" pos:end="313:42"><name pos:start="313:13" pos:end="313:17">fcntl</name><argument_list pos:start="313:18" pos:end="313:42">(<argument pos:start="313:19" pos:end="313:20"><expr pos:start="313:19" pos:end="313:20"><name pos:start="313:19" pos:end="313:20">fd</name></expr></argument>, <argument pos:start="313:23" pos:end="313:29"><expr pos:start="313:23" pos:end="313:29"><name pos:start="313:23" pos:end="313:29">F_SETFL</name></expr></argument>, <argument pos:start="313:32" pos:end="313:41"><expr pos:start="313:32" pos:end="313:41"><name pos:start="313:32" pos:end="313:41">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:52"><expr pos:start="315:13" pos:end="315:51"><call pos:start="315:13" pos:end="315:51"><name pos:start="315:13" pos:end="315:27">net_tap_fd_init</name><argument_list pos:start="315:28" pos:end="315:51">(<argument pos:start="315:29" pos:end="315:32"><expr pos:start="315:29" pos:end="315:32"><name pos:start="315:29" pos:end="315:32">vlan</name></expr></argument>, <argument pos:start="315:35" pos:end="315:40"><expr pos:start="315:35" pos:end="315:40"><name pos:start="315:35" pos:end="315:40">device</name></expr></argument>, <argument pos:start="315:43" pos:end="315:46"><expr pos:start="315:43" pos:end="315:46"><name pos:start="315:43" pos:end="315:46">name</name></expr></argument>, <argument pos:start="315:49" pos:end="315:50"><expr pos:start="315:49" pos:end="315:50"><name pos:start="315:49" pos:end="315:50">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:20"><expr pos:start="317:13" pos:end="317:19"><name pos:start="317:13" pos:end="317:15">ret</name> <operator pos:start="317:17" pos:end="317:17">=</operator> <literal type="number" pos:start="317:19" pos:end="317:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="319:11" pos:end="357:9">else <block pos:start="319:16" pos:end="357:9">{<block_content pos:start="321:13" pos:end="355:86">

            <decl_stmt pos:start="321:13" pos:end="325:14"><decl pos:start="321:13" pos:end="325:13"><type pos:start="321:13" pos:end="321:37"><specifier pos:start="321:13" pos:end="321:18">static</specifier> <specifier pos:start="321:20" pos:end="321:24">const</specifier> <name pos:start="321:26" pos:end="321:29">char</name> <modifier pos:start="321:31" pos:end="321:31">*</modifier> <specifier pos:start="321:33" pos:end="321:37">const</specifier></type> <name pos:start="321:39" pos:end="321:50"><name pos:start="321:39" pos:end="321:48">tap_params</name><index pos:start="321:49" pos:end="321:50">[]</index></name> <init pos:start="321:52" pos:end="325:13">= <expr pos:start="321:54" pos:end="325:13"><block pos:start="321:54" pos:end="325:13">{

                <expr pos:start="323:17" pos:end="323:22"><literal type="string" pos:start="323:17" pos:end="323:22">"vlan"</literal></expr>, <expr pos:start="323:25" pos:end="323:30"><literal type="string" pos:start="323:25" pos:end="323:30">"name"</literal></expr>, <expr pos:start="323:33" pos:end="323:40"><literal type="string" pos:start="323:33" pos:end="323:40">"ifname"</literal></expr>, <expr pos:start="323:43" pos:end="323:50"><literal type="string" pos:start="323:43" pos:end="323:50">"script"</literal></expr>, <expr pos:start="323:53" pos:end="323:64"><literal type="string" pos:start="323:53" pos:end="323:64">"downscript"</literal></expr>, <expr pos:start="323:67" pos:end="323:70"><name pos:start="323:67" pos:end="323:70">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="327:13" pos:end="335:13"><if pos:start="327:13" pos:end="335:13">if <condition pos:start="327:16" pos:end="327:48">(<expr pos:start="327:17" pos:end="327:47"><call pos:start="327:17" pos:end="327:43"><name pos:start="327:17" pos:end="327:28">check_params</name><argument_list pos:start="327:29" pos:end="327:43">(<argument pos:start="327:30" pos:end="327:39"><expr pos:start="327:30" pos:end="327:39"><name pos:start="327:30" pos:end="327:39">tap_params</name></expr></argument>, <argument pos:start="327:42" pos:end="327:42"><expr pos:start="327:42" pos:end="327:42"><name pos:start="327:42" pos:end="327:42">p</name></expr></argument>)</argument_list></call> <operator pos:start="327:45" pos:end="327:45">&lt;</operator> <literal type="number" pos:start="327:47" pos:end="327:47">0</literal></expr>)</condition> <block pos:start="327:50" pos:end="335:13">{<block_content pos:start="329:17" pos:end="333:26">

                <expr_stmt pos:start="329:17" pos:end="331:32"><expr pos:start="329:17" pos:end="331:31"><call pos:start="329:17" pos:end="331:31"><name pos:start="329:17" pos:end="329:23">fprintf</name><argument_list pos:start="329:24" pos:end="331:31">(<argument pos:start="329:25" pos:end="329:30"><expr pos:start="329:25" pos:end="329:30"><name pos:start="329:25" pos:end="329:30">stderr</name></expr></argument>, <argument pos:start="329:33" pos:end="329:72"><expr pos:start="329:33" pos:end="329:72"><literal type="string" pos:start="329:33" pos:end="329:72">"qemu: invalid parameter '%s' in '%s'\n"</literal></expr></argument>,

                        <argument pos:start="331:25" pos:end="331:27"><expr pos:start="331:25" pos:end="331:27"><name pos:start="331:25" pos:end="331:27">buf</name></expr></argument>, <argument pos:start="331:30" pos:end="331:30"><expr pos:start="331:30" pos:end="331:30"><name pos:start="331:30" pos:end="331:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="333:17" pos:end="333:26">return <expr pos:start="333:24" pos:end="333:25"><operator pos:start="333:24" pos:end="333:24">-</operator><literal type="number" pos:start="333:25" pos:end="333:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="337:13" pos:end="341:13"><if pos:start="337:13" pos:end="341:13">if <condition pos:start="337:16" pos:end="337:74">(<expr pos:start="337:17" pos:end="337:73"><call pos:start="337:17" pos:end="337:68"><name pos:start="337:17" pos:end="337:31">get_param_value</name><argument_list pos:start="337:32" pos:end="337:68">(<argument pos:start="337:33" pos:end="337:38"><expr pos:start="337:33" pos:end="337:38"><name pos:start="337:33" pos:end="337:38">ifname</name></expr></argument>, <argument pos:start="337:41" pos:end="337:54"><expr pos:start="337:41" pos:end="337:54"><sizeof pos:start="337:41" pos:end="337:54">sizeof<argument_list pos:start="337:47" pos:end="337:54">(<argument pos:start="337:48" pos:end="337:53"><expr pos:start="337:48" pos:end="337:53"><name pos:start="337:48" pos:end="337:53">ifname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="337:57" pos:end="337:64"><expr pos:start="337:57" pos:end="337:64"><literal type="string" pos:start="337:57" pos:end="337:64">"ifname"</literal></expr></argument>, <argument pos:start="337:67" pos:end="337:67"><expr pos:start="337:67" pos:end="337:67"><name pos:start="337:67" pos:end="337:67">p</name></expr></argument>)</argument_list></call> <operator pos:start="337:70" pos:end="337:71">&lt;=</operator> <literal type="number" pos:start="337:73" pos:end="337:73">0</literal></expr>)</condition> <block pos:start="337:76" pos:end="341:13">{<block_content pos:start="339:17" pos:end="339:33">

                <expr_stmt pos:start="339:17" pos:end="339:33"><expr pos:start="339:17" pos:end="339:32"><name pos:start="339:17" pos:end="339:25"><name pos:start="339:17" pos:end="339:22">ifname</name><index pos:start="339:23" pos:end="339:25">[<expr pos:start="339:24" pos:end="339:24"><literal type="number" pos:start="339:24" pos:end="339:24">0</literal></expr>]</index></name> <operator pos:start="339:27" pos:end="339:27">=</operator> <literal type="char" pos:start="339:29" pos:end="339:32">'\0'</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="343:13" pos:end="347:13"><if pos:start="343:13" pos:end="347:13">if <condition pos:start="343:16" pos:end="343:86">(<expr pos:start="343:17" pos:end="343:85"><call pos:start="343:17" pos:end="343:80"><name pos:start="343:17" pos:end="343:31">get_param_value</name><argument_list pos:start="343:32" pos:end="343:80">(<argument pos:start="343:33" pos:end="343:44"><expr pos:start="343:33" pos:end="343:44"><name pos:start="343:33" pos:end="343:44">setup_script</name></expr></argument>, <argument pos:start="343:47" pos:end="343:66"><expr pos:start="343:47" pos:end="343:66"><sizeof pos:start="343:47" pos:end="343:66">sizeof<argument_list pos:start="343:53" pos:end="343:66">(<argument pos:start="343:54" pos:end="343:65"><expr pos:start="343:54" pos:end="343:65"><name pos:start="343:54" pos:end="343:65">setup_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="343:69" pos:end="343:76"><expr pos:start="343:69" pos:end="343:76"><literal type="string" pos:start="343:69" pos:end="343:76">"script"</literal></expr></argument>, <argument pos:start="343:79" pos:end="343:79"><expr pos:start="343:79" pos:end="343:79"><name pos:start="343:79" pos:end="343:79">p</name></expr></argument>)</argument_list></call> <operator pos:start="343:82" pos:end="343:83">==</operator> <literal type="number" pos:start="343:85" pos:end="343:85">0</literal></expr>)</condition> <block pos:start="343:88" pos:end="347:13">{<block_content pos:start="345:17" pos:end="345:84">

                <expr_stmt pos:start="345:17" pos:end="345:84"><expr pos:start="345:17" pos:end="345:83"><call pos:start="345:17" pos:end="345:83"><name pos:start="345:17" pos:end="345:23">pstrcpy</name><argument_list pos:start="345:24" pos:end="345:83">(<argument pos:start="345:25" pos:end="345:36"><expr pos:start="345:25" pos:end="345:36"><name pos:start="345:25" pos:end="345:36">setup_script</name></expr></argument>, <argument pos:start="345:39" pos:end="345:58"><expr pos:start="345:39" pos:end="345:58"><sizeof pos:start="345:39" pos:end="345:58">sizeof<argument_list pos:start="345:45" pos:end="345:58">(<argument pos:start="345:46" pos:end="345:57"><expr pos:start="345:46" pos:end="345:57"><name pos:start="345:46" pos:end="345:57">setup_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="345:61" pos:end="345:82"><expr pos:start="345:61" pos:end="345:82"><name pos:start="345:61" pos:end="345:82">DEFAULT_NETWORK_SCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="349:13" pos:end="353:13"><if pos:start="349:13" pos:end="353:13">if <condition pos:start="349:16" pos:end="349:88">(<expr pos:start="349:17" pos:end="349:87"><call pos:start="349:17" pos:end="349:82"><name pos:start="349:17" pos:end="349:31">get_param_value</name><argument_list pos:start="349:32" pos:end="349:82">(<argument pos:start="349:33" pos:end="349:43"><expr pos:start="349:33" pos:end="349:43"><name pos:start="349:33" pos:end="349:43">down_script</name></expr></argument>, <argument pos:start="349:46" pos:end="349:64"><expr pos:start="349:46" pos:end="349:64"><sizeof pos:start="349:46" pos:end="349:64">sizeof<argument_list pos:start="349:52" pos:end="349:64">(<argument pos:start="349:53" pos:end="349:63"><expr pos:start="349:53" pos:end="349:63"><name pos:start="349:53" pos:end="349:63">down_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="349:67" pos:end="349:78"><expr pos:start="349:67" pos:end="349:78"><literal type="string" pos:start="349:67" pos:end="349:78">"downscript"</literal></expr></argument>, <argument pos:start="349:81" pos:end="349:81"><expr pos:start="349:81" pos:end="349:81"><name pos:start="349:81" pos:end="349:81">p</name></expr></argument>)</argument_list></call> <operator pos:start="349:84" pos:end="349:85">==</operator> <literal type="number" pos:start="349:87" pos:end="349:87">0</literal></expr>)</condition> <block pos:start="349:90" pos:end="353:13">{<block_content pos:start="351:17" pos:end="351:87">

                <expr_stmt pos:start="351:17" pos:end="351:87"><expr pos:start="351:17" pos:end="351:86"><call pos:start="351:17" pos:end="351:86"><name pos:start="351:17" pos:end="351:23">pstrcpy</name><argument_list pos:start="351:24" pos:end="351:86">(<argument pos:start="351:25" pos:end="351:35"><expr pos:start="351:25" pos:end="351:35"><name pos:start="351:25" pos:end="351:35">down_script</name></expr></argument>, <argument pos:start="351:38" pos:end="351:56"><expr pos:start="351:38" pos:end="351:56"><sizeof pos:start="351:38" pos:end="351:56">sizeof<argument_list pos:start="351:44" pos:end="351:56">(<argument pos:start="351:45" pos:end="351:55"><expr pos:start="351:45" pos:end="351:55"><name pos:start="351:45" pos:end="351:55">down_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="351:59" pos:end="351:85"><expr pos:start="351:59" pos:end="351:85"><name pos:start="351:59" pos:end="351:85">DEFAULT_NETWORK_DOWN_SCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:86"><expr pos:start="355:13" pos:end="355:85"><name pos:start="355:13" pos:end="355:15">ret</name> <operator pos:start="355:17" pos:end="355:17">=</operator> <call pos:start="355:19" pos:end="355:85"><name pos:start="355:19" pos:end="355:30">net_tap_init</name><argument_list pos:start="355:31" pos:end="355:85">(<argument pos:start="355:32" pos:end="355:35"><expr pos:start="355:32" pos:end="355:35"><name pos:start="355:32" pos:end="355:35">vlan</name></expr></argument>, <argument pos:start="355:38" pos:end="355:43"><expr pos:start="355:38" pos:end="355:43"><name pos:start="355:38" pos:end="355:43">device</name></expr></argument>, <argument pos:start="355:46" pos:end="355:49"><expr pos:start="355:46" pos:end="355:49"><name pos:start="355:46" pos:end="355:49">name</name></expr></argument>, <argument pos:start="355:52" pos:end="355:57"><expr pos:start="355:52" pos:end="355:57"><name pos:start="355:52" pos:end="355:57">ifname</name></expr></argument>, <argument pos:start="355:60" pos:end="355:71"><expr pos:start="355:60" pos:end="355:71"><name pos:start="355:60" pos:end="355:71">setup_script</name></expr></argument>, <argument pos:start="355:74" pos:end="355:84"><expr pos:start="355:74" pos:end="355:84"><name pos:start="355:74" pos:end="355:84">down_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="359:7" pos:end="459:5">else

<cpp:endif pos:start="361:1" pos:end="361:6">#<cpp:directive pos:start="361:2" pos:end="361:6">endif</cpp:directive></cpp:endif>

    if <condition pos:start="363:8" pos:end="363:34">(<expr pos:start="363:9" pos:end="363:33"><operator pos:start="363:9" pos:end="363:9">!</operator><call pos:start="363:10" pos:end="363:33"><name pos:start="363:10" pos:end="363:15">strcmp</name><argument_list pos:start="363:16" pos:end="363:33">(<argument pos:start="363:17" pos:end="363:22"><expr pos:start="363:17" pos:end="363:22"><name pos:start="363:17" pos:end="363:22">device</name></expr></argument>, <argument pos:start="363:25" pos:end="363:32"><expr pos:start="363:25" pos:end="363:32"><literal type="string" pos:start="363:25" pos:end="363:32">"socket"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="363:36" pos:end="459:5">{<block_content pos:start="365:9" pos:end="457:29">

        <if_stmt pos:start="365:9" pos:end="455:9"><if pos:start="365:9" pos:end="387:9">if <condition pos:start="365:12" pos:end="365:59">(<expr pos:start="365:13" pos:end="365:58"><call pos:start="365:13" pos:end="365:54"><name pos:start="365:13" pos:end="365:27">get_param_value</name><argument_list pos:start="365:28" pos:end="365:54">(<argument pos:start="365:29" pos:end="365:31"><expr pos:start="365:29" pos:end="365:31"><name pos:start="365:29" pos:end="365:31">buf</name></expr></argument>, <argument pos:start="365:34" pos:end="365:44"><expr pos:start="365:34" pos:end="365:44"><sizeof pos:start="365:34" pos:end="365:44">sizeof<argument_list pos:start="365:40" pos:end="365:44">(<argument pos:start="365:41" pos:end="365:43"><expr pos:start="365:41" pos:end="365:43"><name pos:start="365:41" pos:end="365:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="365:47" pos:end="365:50"><expr pos:start="365:47" pos:end="365:50"><literal type="string" pos:start="365:47" pos:end="365:50">"fd"</literal></expr></argument>, <argument pos:start="365:53" pos:end="365:53"><expr pos:start="365:53" pos:end="365:53"><name pos:start="365:53" pos:end="365:53">p</name></expr></argument>)</argument_list></call> <operator pos:start="365:56" pos:end="365:56">&gt;</operator> <literal type="number" pos:start="365:58" pos:end="365:58">0</literal></expr>)</condition> <block pos:start="365:61" pos:end="387:9">{<block_content pos:start="367:13" pos:end="385:24">

            <decl_stmt pos:start="367:13" pos:end="367:19"><decl pos:start="367:13" pos:end="367:18"><type pos:start="367:13" pos:end="367:15"><name pos:start="367:13" pos:end="367:15">int</name></type> <name pos:start="367:17" pos:end="367:18">fd</name></decl>;</decl_stmt>

            <if_stmt pos:start="369:13" pos:end="377:13"><if pos:start="369:13" pos:end="377:13">if <condition pos:start="369:16" pos:end="369:47">(<expr pos:start="369:17" pos:end="369:46"><call pos:start="369:17" pos:end="369:42"><name pos:start="369:17" pos:end="369:28">check_params</name><argument_list pos:start="369:29" pos:end="369:42">(<argument pos:start="369:30" pos:end="369:38"><expr pos:start="369:30" pos:end="369:38"><name pos:start="369:30" pos:end="369:38">fd_params</name></expr></argument>, <argument pos:start="369:41" pos:end="369:41"><expr pos:start="369:41" pos:end="369:41"><name pos:start="369:41" pos:end="369:41">p</name></expr></argument>)</argument_list></call> <operator pos:start="369:44" pos:end="369:44">&lt;</operator> <literal type="number" pos:start="369:46" pos:end="369:46">0</literal></expr>)</condition> <block pos:start="369:49" pos:end="377:13">{<block_content pos:start="371:17" pos:end="375:26">

                <expr_stmt pos:start="371:17" pos:end="373:32"><expr pos:start="371:17" pos:end="373:31"><call pos:start="371:17" pos:end="373:31"><name pos:start="371:17" pos:end="371:23">fprintf</name><argument_list pos:start="371:24" pos:end="373:31">(<argument pos:start="371:25" pos:end="371:30"><expr pos:start="371:25" pos:end="371:30"><name pos:start="371:25" pos:end="371:30">stderr</name></expr></argument>, <argument pos:start="371:33" pos:end="371:72"><expr pos:start="371:33" pos:end="371:72"><literal type="string" pos:start="371:33" pos:end="371:72">"qemu: invalid parameter '%s' in '%s'\n"</literal></expr></argument>,

                        <argument pos:start="373:25" pos:end="373:27"><expr pos:start="373:25" pos:end="373:27"><name pos:start="373:25" pos:end="373:27">buf</name></expr></argument>, <argument pos:start="373:30" pos:end="373:30"><expr pos:start="373:30" pos:end="373:30"><name pos:start="373:30" pos:end="373:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="375:17" pos:end="375:26">return <expr pos:start="375:24" pos:end="375:25"><operator pos:start="375:24" pos:end="375:24">-</operator><literal type="number" pos:start="375:25" pos:end="375:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="379:13" pos:end="379:38"><expr pos:start="379:13" pos:end="379:37"><name pos:start="379:13" pos:end="379:14">fd</name> <operator pos:start="379:16" pos:end="379:16">=</operator> <call pos:start="379:18" pos:end="379:37"><name pos:start="379:18" pos:end="379:23">strtol</name><argument_list pos:start="379:24" pos:end="379:37">(<argument pos:start="379:25" pos:end="379:27"><expr pos:start="379:25" pos:end="379:27"><name pos:start="379:25" pos:end="379:27">buf</name></expr></argument>, <argument pos:start="379:30" pos:end="379:33"><expr pos:start="379:30" pos:end="379:33"><name pos:start="379:30" pos:end="379:33">NULL</name></expr></argument>, <argument pos:start="379:36" pos:end="379:36"><expr pos:start="379:36" pos:end="379:36"><literal type="number" pos:start="379:36" pos:end="379:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="381:21"><expr pos:start="381:13" pos:end="381:20"><name pos:start="381:13" pos:end="381:15">ret</name> <operator pos:start="381:17" pos:end="381:17">=</operator> <operator pos:start="381:19" pos:end="381:19">-</operator><literal type="number" pos:start="381:20" pos:end="381:20">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="383:13" pos:end="385:24"><if pos:start="383:13" pos:end="385:24">if <condition pos:start="383:16" pos:end="383:62">(<expr pos:start="383:17" pos:end="383:61"><call pos:start="383:17" pos:end="383:61"><name pos:start="383:17" pos:end="383:34">net_socket_fd_init</name><argument_list pos:start="383:35" pos:end="383:61">(<argument pos:start="383:36" pos:end="383:39"><expr pos:start="383:36" pos:end="383:39"><name pos:start="383:36" pos:end="383:39">vlan</name></expr></argument>, <argument pos:start="383:42" pos:end="383:47"><expr pos:start="383:42" pos:end="383:47"><name pos:start="383:42" pos:end="383:47">device</name></expr></argument>, <argument pos:start="383:50" pos:end="383:53"><expr pos:start="383:50" pos:end="383:53"><name pos:start="383:50" pos:end="383:53">name</name></expr></argument>, <argument pos:start="383:56" pos:end="383:57"><expr pos:start="383:56" pos:end="383:57"><name pos:start="383:56" pos:end="383:57">fd</name></expr></argument>, <argument pos:start="383:60" pos:end="383:60"><expr pos:start="383:60" pos:end="383:60"><literal type="number" pos:start="383:60" pos:end="383:60">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="385:17" pos:end="385:24"><block_content pos:start="385:17" pos:end="385:24">

                <expr_stmt pos:start="385:17" pos:end="385:24"><expr pos:start="385:17" pos:end="385:23"><name pos:start="385:17" pos:end="385:19">ret</name> <operator pos:start="385:21" pos:end="385:21">=</operator> <literal type="number" pos:start="385:23" pos:end="385:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="387:11" pos:end="407:9">else if <condition pos:start="387:19" pos:end="387:70">(<expr pos:start="387:20" pos:end="387:69"><call pos:start="387:20" pos:end="387:65"><name pos:start="387:20" pos:end="387:34">get_param_value</name><argument_list pos:start="387:35" pos:end="387:65">(<argument pos:start="387:36" pos:end="387:38"><expr pos:start="387:36" pos:end="387:38"><name pos:start="387:36" pos:end="387:38">buf</name></expr></argument>, <argument pos:start="387:41" pos:end="387:51"><expr pos:start="387:41" pos:end="387:51"><sizeof pos:start="387:41" pos:end="387:51">sizeof<argument_list pos:start="387:47" pos:end="387:51">(<argument pos:start="387:48" pos:end="387:50"><expr pos:start="387:48" pos:end="387:50"><name pos:start="387:48" pos:end="387:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="387:54" pos:end="387:61"><expr pos:start="387:54" pos:end="387:61"><literal type="string" pos:start="387:54" pos:end="387:61">"listen"</literal></expr></argument>, <argument pos:start="387:64" pos:end="387:64"><expr pos:start="387:64" pos:end="387:64"><name pos:start="387:64" pos:end="387:64">p</name></expr></argument>)</argument_list></call> <operator pos:start="387:67" pos:end="387:67">&gt;</operator> <literal type="number" pos:start="387:69" pos:end="387:69">0</literal></expr>)</condition> <block pos:start="387:72" pos:end="407:9">{<block_content pos:start="389:13" pos:end="405:66">

            <decl_stmt pos:start="389:13" pos:end="393:14"><decl pos:start="389:13" pos:end="393:13"><type pos:start="389:13" pos:end="389:37"><specifier pos:start="389:13" pos:end="389:18">static</specifier> <specifier pos:start="389:20" pos:end="389:24">const</specifier> <name pos:start="389:26" pos:end="389:29">char</name> <modifier pos:start="389:31" pos:end="389:31">*</modifier> <specifier pos:start="389:33" pos:end="389:37">const</specifier></type> <name pos:start="389:39" pos:end="389:53"><name pos:start="389:39" pos:end="389:51">listen_params</name><index pos:start="389:52" pos:end="389:53">[]</index></name> <init pos:start="389:55" pos:end="393:13">= <expr pos:start="389:57" pos:end="393:13"><block pos:start="389:57" pos:end="393:13">{

                <expr pos:start="391:17" pos:end="391:22"><literal type="string" pos:start="391:17" pos:end="391:22">"vlan"</literal></expr>, <expr pos:start="391:25" pos:end="391:30"><literal type="string" pos:start="391:25" pos:end="391:30">"name"</literal></expr>, <expr pos:start="391:33" pos:end="391:40"><literal type="string" pos:start="391:33" pos:end="391:40">"listen"</literal></expr>, <expr pos:start="391:43" pos:end="391:46"><name pos:start="391:43" pos:end="391:46">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="395:13" pos:end="403:13"><if pos:start="395:13" pos:end="403:13">if <condition pos:start="395:16" pos:end="395:51">(<expr pos:start="395:17" pos:end="395:50"><call pos:start="395:17" pos:end="395:46"><name pos:start="395:17" pos:end="395:28">check_params</name><argument_list pos:start="395:29" pos:end="395:46">(<argument pos:start="395:30" pos:end="395:42"><expr pos:start="395:30" pos:end="395:42"><name pos:start="395:30" pos:end="395:42">listen_params</name></expr></argument>, <argument pos:start="395:45" pos:end="395:45"><expr pos:start="395:45" pos:end="395:45"><name pos:start="395:45" pos:end="395:45">p</name></expr></argument>)</argument_list></call> <operator pos:start="395:48" pos:end="395:48">&lt;</operator> <literal type="number" pos:start="395:50" pos:end="395:50">0</literal></expr>)</condition> <block pos:start="395:53" pos:end="403:13">{<block_content pos:start="397:17" pos:end="401:26">

                <expr_stmt pos:start="397:17" pos:end="399:32"><expr pos:start="397:17" pos:end="399:31"><call pos:start="397:17" pos:end="399:31"><name pos:start="397:17" pos:end="397:23">fprintf</name><argument_list pos:start="397:24" pos:end="399:31">(<argument pos:start="397:25" pos:end="397:30"><expr pos:start="397:25" pos:end="397:30"><name pos:start="397:25" pos:end="397:30">stderr</name></expr></argument>, <argument pos:start="397:33" pos:end="397:72"><expr pos:start="397:33" pos:end="397:72"><literal type="string" pos:start="397:33" pos:end="397:72">"qemu: invalid parameter '%s' in '%s'\n"</literal></expr></argument>,

                        <argument pos:start="399:25" pos:end="399:27"><expr pos:start="399:25" pos:end="399:27"><name pos:start="399:25" pos:end="399:27">buf</name></expr></argument>, <argument pos:start="399:30" pos:end="399:30"><expr pos:start="399:30" pos:end="399:30"><name pos:start="399:30" pos:end="399:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="401:17" pos:end="401:26">return <expr pos:start="401:24" pos:end="401:25"><operator pos:start="401:24" pos:end="401:24">-</operator><literal type="number" pos:start="401:25" pos:end="401:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="405:13" pos:end="405:66"><expr pos:start="405:13" pos:end="405:65"><name pos:start="405:13" pos:end="405:15">ret</name> <operator pos:start="405:17" pos:end="405:17">=</operator> <call pos:start="405:19" pos:end="405:65"><name pos:start="405:19" pos:end="405:40">net_socket_listen_init</name><argument_list pos:start="405:41" pos:end="405:65">(<argument pos:start="405:42" pos:end="405:45"><expr pos:start="405:42" pos:end="405:45"><name pos:start="405:42" pos:end="405:45">vlan</name></expr></argument>, <argument pos:start="405:48" pos:end="405:53"><expr pos:start="405:48" pos:end="405:53"><name pos:start="405:48" pos:end="405:53">device</name></expr></argument>, <argument pos:start="405:56" pos:end="405:59"><expr pos:start="405:56" pos:end="405:59"><name pos:start="405:56" pos:end="405:59">name</name></expr></argument>, <argument pos:start="405:62" pos:end="405:64"><expr pos:start="405:62" pos:end="405:64"><name pos:start="405:62" pos:end="405:64">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="407:11" pos:end="427:9">else if <condition pos:start="407:19" pos:end="407:71">(<expr pos:start="407:20" pos:end="407:70"><call pos:start="407:20" pos:end="407:66"><name pos:start="407:20" pos:end="407:34">get_param_value</name><argument_list pos:start="407:35" pos:end="407:66">(<argument pos:start="407:36" pos:end="407:38"><expr pos:start="407:36" pos:end="407:38"><name pos:start="407:36" pos:end="407:38">buf</name></expr></argument>, <argument pos:start="407:41" pos:end="407:51"><expr pos:start="407:41" pos:end="407:51"><sizeof pos:start="407:41" pos:end="407:51">sizeof<argument_list pos:start="407:47" pos:end="407:51">(<argument pos:start="407:48" pos:end="407:50"><expr pos:start="407:48" pos:end="407:50"><name pos:start="407:48" pos:end="407:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="407:54" pos:end="407:62"><expr pos:start="407:54" pos:end="407:62"><literal type="string" pos:start="407:54" pos:end="407:62">"connect"</literal></expr></argument>, <argument pos:start="407:65" pos:end="407:65"><expr pos:start="407:65" pos:end="407:65"><name pos:start="407:65" pos:end="407:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="407:68" pos:end="407:68">&gt;</operator> <literal type="number" pos:start="407:70" pos:end="407:70">0</literal></expr>)</condition> <block pos:start="407:73" pos:end="427:9">{<block_content pos:start="409:13" pos:end="425:67">

            <decl_stmt pos:start="409:13" pos:end="413:14"><decl pos:start="409:13" pos:end="413:13"><type pos:start="409:13" pos:end="409:37"><specifier pos:start="409:13" pos:end="409:18">static</specifier> <specifier pos:start="409:20" pos:end="409:24">const</specifier> <name pos:start="409:26" pos:end="409:29">char</name> <modifier pos:start="409:31" pos:end="409:31">*</modifier> <specifier pos:start="409:33" pos:end="409:37">const</specifier></type> <name pos:start="409:39" pos:end="409:54"><name pos:start="409:39" pos:end="409:52">connect_params</name><index pos:start="409:53" pos:end="409:54">[]</index></name> <init pos:start="409:56" pos:end="413:13">= <expr pos:start="409:58" pos:end="413:13"><block pos:start="409:58" pos:end="413:13">{

                <expr pos:start="411:17" pos:end="411:22"><literal type="string" pos:start="411:17" pos:end="411:22">"vlan"</literal></expr>, <expr pos:start="411:25" pos:end="411:30"><literal type="string" pos:start="411:25" pos:end="411:30">"name"</literal></expr>, <expr pos:start="411:33" pos:end="411:41"><literal type="string" pos:start="411:33" pos:end="411:41">"connect"</literal></expr>, <expr pos:start="411:44" pos:end="411:47"><name pos:start="411:44" pos:end="411:47">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="415:13" pos:end="423:13"><if pos:start="415:13" pos:end="423:13">if <condition pos:start="415:16" pos:end="415:52">(<expr pos:start="415:17" pos:end="415:51"><call pos:start="415:17" pos:end="415:47"><name pos:start="415:17" pos:end="415:28">check_params</name><argument_list pos:start="415:29" pos:end="415:47">(<argument pos:start="415:30" pos:end="415:43"><expr pos:start="415:30" pos:end="415:43"><name pos:start="415:30" pos:end="415:43">connect_params</name></expr></argument>, <argument pos:start="415:46" pos:end="415:46"><expr pos:start="415:46" pos:end="415:46"><name pos:start="415:46" pos:end="415:46">p</name></expr></argument>)</argument_list></call> <operator pos:start="415:49" pos:end="415:49">&lt;</operator> <literal type="number" pos:start="415:51" pos:end="415:51">0</literal></expr>)</condition> <block pos:start="415:54" pos:end="423:13">{<block_content pos:start="417:17" pos:end="421:26">

                <expr_stmt pos:start="417:17" pos:end="419:32"><expr pos:start="417:17" pos:end="419:31"><call pos:start="417:17" pos:end="419:31"><name pos:start="417:17" pos:end="417:23">fprintf</name><argument_list pos:start="417:24" pos:end="419:31">(<argument pos:start="417:25" pos:end="417:30"><expr pos:start="417:25" pos:end="417:30"><name pos:start="417:25" pos:end="417:30">stderr</name></expr></argument>, <argument pos:start="417:33" pos:end="417:72"><expr pos:start="417:33" pos:end="417:72"><literal type="string" pos:start="417:33" pos:end="417:72">"qemu: invalid parameter '%s' in '%s'\n"</literal></expr></argument>,

                        <argument pos:start="419:25" pos:end="419:27"><expr pos:start="419:25" pos:end="419:27"><name pos:start="419:25" pos:end="419:27">buf</name></expr></argument>, <argument pos:start="419:30" pos:end="419:30"><expr pos:start="419:30" pos:end="419:30"><name pos:start="419:30" pos:end="419:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="421:17" pos:end="421:26">return <expr pos:start="421:24" pos:end="421:25"><operator pos:start="421:24" pos:end="421:24">-</operator><literal type="number" pos:start="421:25" pos:end="421:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="425:13" pos:end="425:67"><expr pos:start="425:13" pos:end="425:66"><name pos:start="425:13" pos:end="425:15">ret</name> <operator pos:start="425:17" pos:end="425:17">=</operator> <call pos:start="425:19" pos:end="425:66"><name pos:start="425:19" pos:end="425:41">net_socket_connect_init</name><argument_list pos:start="425:42" pos:end="425:66">(<argument pos:start="425:43" pos:end="425:46"><expr pos:start="425:43" pos:end="425:46"><name pos:start="425:43" pos:end="425:46">vlan</name></expr></argument>, <argument pos:start="425:49" pos:end="425:54"><expr pos:start="425:49" pos:end="425:54"><name pos:start="425:49" pos:end="425:54">device</name></expr></argument>, <argument pos:start="425:57" pos:end="425:60"><expr pos:start="425:57" pos:end="425:60"><name pos:start="425:57" pos:end="425:60">name</name></expr></argument>, <argument pos:start="425:63" pos:end="425:65"><expr pos:start="425:63" pos:end="425:65"><name pos:start="425:63" pos:end="425:65">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="427:11" pos:end="447:9">else if <condition pos:start="427:19" pos:end="427:69">(<expr pos:start="427:20" pos:end="427:68"><call pos:start="427:20" pos:end="427:64"><name pos:start="427:20" pos:end="427:34">get_param_value</name><argument_list pos:start="427:35" pos:end="427:64">(<argument pos:start="427:36" pos:end="427:38"><expr pos:start="427:36" pos:end="427:38"><name pos:start="427:36" pos:end="427:38">buf</name></expr></argument>, <argument pos:start="427:41" pos:end="427:51"><expr pos:start="427:41" pos:end="427:51"><sizeof pos:start="427:41" pos:end="427:51">sizeof<argument_list pos:start="427:47" pos:end="427:51">(<argument pos:start="427:48" pos:end="427:50"><expr pos:start="427:48" pos:end="427:50"><name pos:start="427:48" pos:end="427:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="427:54" pos:end="427:60"><expr pos:start="427:54" pos:end="427:60"><literal type="string" pos:start="427:54" pos:end="427:60">"mcast"</literal></expr></argument>, <argument pos:start="427:63" pos:end="427:63"><expr pos:start="427:63" pos:end="427:63"><name pos:start="427:63" pos:end="427:63">p</name></expr></argument>)</argument_list></call> <operator pos:start="427:66" pos:end="427:66">&gt;</operator> <literal type="number" pos:start="427:68" pos:end="427:68">0</literal></expr>)</condition> <block pos:start="427:71" pos:end="447:9">{<block_content pos:start="429:13" pos:end="445:65">

            <decl_stmt pos:start="429:13" pos:end="433:14"><decl pos:start="429:13" pos:end="433:13"><type pos:start="429:13" pos:end="429:37"><specifier pos:start="429:13" pos:end="429:18">static</specifier> <specifier pos:start="429:20" pos:end="429:24">const</specifier> <name pos:start="429:26" pos:end="429:29">char</name> <modifier pos:start="429:31" pos:end="429:31">*</modifier> <specifier pos:start="429:33" pos:end="429:37">const</specifier></type> <name pos:start="429:39" pos:end="429:52"><name pos:start="429:39" pos:end="429:50">mcast_params</name><index pos:start="429:51" pos:end="429:52">[]</index></name> <init pos:start="429:54" pos:end="433:13">= <expr pos:start="429:56" pos:end="433:13"><block pos:start="429:56" pos:end="433:13">{

                <expr pos:start="431:17" pos:end="431:22"><literal type="string" pos:start="431:17" pos:end="431:22">"vlan"</literal></expr>, <expr pos:start="431:25" pos:end="431:30"><literal type="string" pos:start="431:25" pos:end="431:30">"name"</literal></expr>, <expr pos:start="431:33" pos:end="431:39"><literal type="string" pos:start="431:33" pos:end="431:39">"mcast"</literal></expr>, <expr pos:start="431:42" pos:end="431:45"><name pos:start="431:42" pos:end="431:45">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="435:13" pos:end="443:13"><if pos:start="435:13" pos:end="443:13">if <condition pos:start="435:16" pos:end="435:50">(<expr pos:start="435:17" pos:end="435:49"><call pos:start="435:17" pos:end="435:45"><name pos:start="435:17" pos:end="435:28">check_params</name><argument_list pos:start="435:29" pos:end="435:45">(<argument pos:start="435:30" pos:end="435:41"><expr pos:start="435:30" pos:end="435:41"><name pos:start="435:30" pos:end="435:41">mcast_params</name></expr></argument>, <argument pos:start="435:44" pos:end="435:44"><expr pos:start="435:44" pos:end="435:44"><name pos:start="435:44" pos:end="435:44">p</name></expr></argument>)</argument_list></call> <operator pos:start="435:47" pos:end="435:47">&lt;</operator> <literal type="number" pos:start="435:49" pos:end="435:49">0</literal></expr>)</condition> <block pos:start="435:52" pos:end="443:13">{<block_content pos:start="437:17" pos:end="441:26">

                <expr_stmt pos:start="437:17" pos:end="439:32"><expr pos:start="437:17" pos:end="439:31"><call pos:start="437:17" pos:end="439:31"><name pos:start="437:17" pos:end="437:23">fprintf</name><argument_list pos:start="437:24" pos:end="439:31">(<argument pos:start="437:25" pos:end="437:30"><expr pos:start="437:25" pos:end="437:30"><name pos:start="437:25" pos:end="437:30">stderr</name></expr></argument>, <argument pos:start="437:33" pos:end="437:72"><expr pos:start="437:33" pos:end="437:72"><literal type="string" pos:start="437:33" pos:end="437:72">"qemu: invalid parameter '%s' in '%s'\n"</literal></expr></argument>,

                        <argument pos:start="439:25" pos:end="439:27"><expr pos:start="439:25" pos:end="439:27"><name pos:start="439:25" pos:end="439:27">buf</name></expr></argument>, <argument pos:start="439:30" pos:end="439:30"><expr pos:start="439:30" pos:end="439:30"><name pos:start="439:30" pos:end="439:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="441:17" pos:end="441:26">return <expr pos:start="441:24" pos:end="441:25"><operator pos:start="441:24" pos:end="441:24">-</operator><literal type="number" pos:start="441:25" pos:end="441:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="445:13" pos:end="445:65"><expr pos:start="445:13" pos:end="445:64"><name pos:start="445:13" pos:end="445:15">ret</name> <operator pos:start="445:17" pos:end="445:17">=</operator> <call pos:start="445:19" pos:end="445:64"><name pos:start="445:19" pos:end="445:39">net_socket_mcast_init</name><argument_list pos:start="445:40" pos:end="445:64">(<argument pos:start="445:41" pos:end="445:44"><expr pos:start="445:41" pos:end="445:44"><name pos:start="445:41" pos:end="445:44">vlan</name></expr></argument>, <argument pos:start="445:47" pos:end="445:52"><expr pos:start="445:47" pos:end="445:52"><name pos:start="445:47" pos:end="445:52">device</name></expr></argument>, <argument pos:start="445:55" pos:end="445:58"><expr pos:start="445:55" pos:end="445:58"><name pos:start="445:55" pos:end="445:58">name</name></expr></argument>, <argument pos:start="445:61" pos:end="445:63"><expr pos:start="445:61" pos:end="445:63"><name pos:start="445:61" pos:end="445:63">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="447:11" pos:end="455:9">else <block pos:start="447:16" pos:end="455:9">{<block_content pos:start="449:13" pos:end="453:21">

            <expr_stmt pos:start="449:13" pos:end="449:63"><expr pos:start="449:13" pos:end="449:62"><call pos:start="449:13" pos:end="449:62"><name pos:start="449:13" pos:end="449:19">fprintf</name><argument_list pos:start="449:20" pos:end="449:62">(<argument pos:start="449:21" pos:end="449:26"><expr pos:start="449:21" pos:end="449:26"><name pos:start="449:21" pos:end="449:26">stderr</name></expr></argument>, <argument pos:start="449:29" pos:end="449:58"><expr pos:start="449:29" pos:end="449:58"><literal type="string" pos:start="449:29" pos:end="449:58">"Unknown socket options: %s\n"</literal></expr></argument>, <argument pos:start="449:61" pos:end="449:61"><expr pos:start="449:61" pos:end="449:61"><name pos:start="449:61" pos:end="449:61">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="451:13" pos:end="451:21"><expr pos:start="451:13" pos:end="451:20"><name pos:start="451:13" pos:end="451:15">ret</name> <operator pos:start="451:17" pos:end="451:17">=</operator> <operator pos:start="451:19" pos:end="451:19">-</operator><literal type="number" pos:start="451:20" pos:end="451:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="453:13" pos:end="453:21">goto <name pos:start="453:18" pos:end="453:20">out</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:29"><expr pos:start="457:9" pos:end="457:28"><name pos:start="457:9" pos:end="457:26"><name pos:start="457:9" pos:end="457:12">vlan</name><operator pos:start="457:13" pos:end="457:14">-&gt;</operator><name pos:start="457:15" pos:end="457:26">nb_host_devs</name></name><operator pos:start="457:27" pos:end="457:28">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="459:7" pos:end="523:5">else

<cpp:ifdef pos:start="461:1" pos:end="461:17">#<cpp:directive pos:start="461:2" pos:end="461:6">ifdef</cpp:directive> <name pos:start="461:8" pos:end="461:17">CONFIG_VDE</name></cpp:ifdef>

    if <condition pos:start="463:8" pos:end="463:31">(<expr pos:start="463:9" pos:end="463:30"><operator pos:start="463:9" pos:end="463:9">!</operator><call pos:start="463:10" pos:end="463:30"><name pos:start="463:10" pos:end="463:15">strcmp</name><argument_list pos:start="463:16" pos:end="463:30">(<argument pos:start="463:17" pos:end="463:22"><expr pos:start="463:17" pos:end="463:22"><name pos:start="463:17" pos:end="463:22">device</name></expr></argument>, <argument pos:start="463:25" pos:end="463:29"><expr pos:start="463:25" pos:end="463:29"><literal type="string" pos:start="463:25" pos:end="463:29">"vde"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="463:33" pos:end="523:5">{<block_content pos:start="465:9" pos:end="521:88">

        <decl_stmt pos:start="465:9" pos:end="469:10"><decl pos:start="465:9" pos:end="469:9"><type pos:start="465:9" pos:end="465:33"><specifier pos:start="465:9" pos:end="465:14">static</specifier> <specifier pos:start="465:16" pos:end="465:20">const</specifier> <name pos:start="465:22" pos:end="465:25">char</name> <modifier pos:start="465:27" pos:end="465:27">*</modifier> <specifier pos:start="465:29" pos:end="465:33">const</specifier></type> <name pos:start="465:35" pos:end="465:46"><name pos:start="465:35" pos:end="465:44">vde_params</name><index pos:start="465:45" pos:end="465:46">[]</index></name> <init pos:start="465:48" pos:end="469:9">= <expr pos:start="465:50" pos:end="469:9"><block pos:start="465:50" pos:end="469:9">{

            <expr pos:start="467:13" pos:end="467:18"><literal type="string" pos:start="467:13" pos:end="467:18">"vlan"</literal></expr>, <expr pos:start="467:21" pos:end="467:26"><literal type="string" pos:start="467:21" pos:end="467:26">"name"</literal></expr>, <expr pos:start="467:29" pos:end="467:34"><literal type="string" pos:start="467:29" pos:end="467:34">"sock"</literal></expr>, <expr pos:start="467:37" pos:end="467:42"><literal type="string" pos:start="467:37" pos:end="467:42">"port"</literal></expr>, <expr pos:start="467:45" pos:end="467:51"><literal type="string" pos:start="467:45" pos:end="467:51">"group"</literal></expr>, <expr pos:start="467:54" pos:end="467:59"><literal type="string" pos:start="467:54" pos:end="467:59">"mode"</literal></expr>, <expr pos:start="467:62" pos:end="467:65"><name pos:start="467:62" pos:end="467:65">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="471:9" pos:end="471:44"><decl pos:start="471:9" pos:end="471:27"><type pos:start="471:9" pos:end="471:12"><name pos:start="471:9" pos:end="471:12">char</name></type> <name pos:start="471:14" pos:end="471:27"><name pos:start="471:14" pos:end="471:21">vde_sock</name><index pos:start="471:22" pos:end="471:27">[<expr pos:start="471:23" pos:end="471:26"><literal type="number" pos:start="471:23" pos:end="471:26">1024</literal></expr>]</index></name></decl>, <decl pos:start="471:30" pos:end="471:43"><type ref="prev" pos:start="471:9" pos:end="471:12"/><name pos:start="471:30" pos:end="471:43"><name pos:start="471:30" pos:end="471:38">vde_group</name><index pos:start="471:39" pos:end="471:43">[<expr pos:start="471:40" pos:end="471:42"><literal type="number" pos:start="471:40" pos:end="471:42">512</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt pos:start="473:9" pos:end="473:31"><decl pos:start="473:9" pos:end="473:20"><type pos:start="473:9" pos:end="473:11"><name pos:start="473:9" pos:end="473:11">int</name></type> <name pos:start="473:13" pos:end="473:20">vde_port</name></decl>, <decl pos:start="473:23" pos:end="473:30"><type ref="prev" pos:start="473:9" pos:end="473:11"/><name pos:start="473:23" pos:end="473:30">vde_mode</name></decl>;</decl_stmt>



        <if_stmt pos:start="477:9" pos:end="485:9"><if pos:start="477:9" pos:end="485:9">if <condition pos:start="477:12" pos:end="477:44">(<expr pos:start="477:13" pos:end="477:43"><call pos:start="477:13" pos:end="477:39"><name pos:start="477:13" pos:end="477:24">check_params</name><argument_list pos:start="477:25" pos:end="477:39">(<argument pos:start="477:26" pos:end="477:35"><expr pos:start="477:26" pos:end="477:35"><name pos:start="477:26" pos:end="477:35">vde_params</name></expr></argument>, <argument pos:start="477:38" pos:end="477:38"><expr pos:start="477:38" pos:end="477:38"><name pos:start="477:38" pos:end="477:38">p</name></expr></argument>)</argument_list></call> <operator pos:start="477:41" pos:end="477:41">&lt;</operator> <literal type="number" pos:start="477:43" pos:end="477:43">0</literal></expr>)</condition> <block pos:start="477:46" pos:end="485:9">{<block_content pos:start="479:13" pos:end="483:22">

            <expr_stmt pos:start="479:13" pos:end="481:28"><expr pos:start="479:13" pos:end="481:27"><call pos:start="479:13" pos:end="481:27"><name pos:start="479:13" pos:end="479:19">fprintf</name><argument_list pos:start="479:20" pos:end="481:27">(<argument pos:start="479:21" pos:end="479:26"><expr pos:start="479:21" pos:end="479:26"><name pos:start="479:21" pos:end="479:26">stderr</name></expr></argument>, <argument pos:start="479:29" pos:end="479:68"><expr pos:start="479:29" pos:end="479:68"><literal type="string" pos:start="479:29" pos:end="479:68">"qemu: invalid parameter '%s' in '%s'\n"</literal></expr></argument>,

                    <argument pos:start="481:21" pos:end="481:23"><expr pos:start="481:21" pos:end="481:23"><name pos:start="481:21" pos:end="481:23">buf</name></expr></argument>, <argument pos:start="481:26" pos:end="481:26"><expr pos:start="481:26" pos:end="481:26"><name pos:start="481:26" pos:end="481:26">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="483:13" pos:end="483:22">return <expr pos:start="483:20" pos:end="483:21"><operator pos:start="483:20" pos:end="483:20">-</operator><literal type="number" pos:start="483:21" pos:end="483:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="487:9" pos:end="487:29"><expr pos:start="487:9" pos:end="487:28"><name pos:start="487:9" pos:end="487:26"><name pos:start="487:9" pos:end="487:12">vlan</name><operator pos:start="487:13" pos:end="487:14">-&gt;</operator><name pos:start="487:15" pos:end="487:26">nb_host_devs</name></name><operator pos:start="487:27" pos:end="487:28">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="489:9" pos:end="493:9"><if pos:start="489:9" pos:end="493:9">if <condition pos:start="489:12" pos:end="489:72">(<expr pos:start="489:13" pos:end="489:71"><call pos:start="489:13" pos:end="489:66"><name pos:start="489:13" pos:end="489:27">get_param_value</name><argument_list pos:start="489:28" pos:end="489:66">(<argument pos:start="489:29" pos:end="489:36"><expr pos:start="489:29" pos:end="489:36"><name pos:start="489:29" pos:end="489:36">vde_sock</name></expr></argument>, <argument pos:start="489:39" pos:end="489:54"><expr pos:start="489:39" pos:end="489:54"><sizeof pos:start="489:39" pos:end="489:54">sizeof<argument_list pos:start="489:45" pos:end="489:54">(<argument pos:start="489:46" pos:end="489:53"><expr pos:start="489:46" pos:end="489:53"><name pos:start="489:46" pos:end="489:53">vde_sock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="489:57" pos:end="489:62"><expr pos:start="489:57" pos:end="489:62"><literal type="string" pos:start="489:57" pos:end="489:62">"sock"</literal></expr></argument>, <argument pos:start="489:65" pos:end="489:65"><expr pos:start="489:65" pos:end="489:65"><name pos:start="489:65" pos:end="489:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="489:68" pos:end="489:69">&lt;=</operator> <literal type="number" pos:start="489:71" pos:end="489:71">0</literal></expr>)</condition> <block pos:start="489:74" pos:end="493:9">{<block_content pos:start="491:13" pos:end="491:31">

	    <expr_stmt pos:start="491:13" pos:end="491:31"><expr pos:start="491:13" pos:end="491:30"><name pos:start="491:13" pos:end="491:23"><name pos:start="491:13" pos:end="491:20">vde_sock</name><index pos:start="491:21" pos:end="491:23">[<expr pos:start="491:22" pos:end="491:22"><literal type="number" pos:start="491:22" pos:end="491:22">0</literal></expr>]</index></name> <operator pos:start="491:25" pos:end="491:25">=</operator> <literal type="char" pos:start="491:27" pos:end="491:30">'\0'</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="495:9" pos:end="503:9"><if pos:start="495:9" pos:end="499:9">if <condition pos:start="495:12" pos:end="495:61">(<expr pos:start="495:13" pos:end="495:60"><call pos:start="495:13" pos:end="495:56"><name pos:start="495:13" pos:end="495:27">get_param_value</name><argument_list pos:start="495:28" pos:end="495:56">(<argument pos:start="495:29" pos:end="495:31"><expr pos:start="495:29" pos:end="495:31"><name pos:start="495:29" pos:end="495:31">buf</name></expr></argument>, <argument pos:start="495:34" pos:end="495:44"><expr pos:start="495:34" pos:end="495:44"><sizeof pos:start="495:34" pos:end="495:44">sizeof<argument_list pos:start="495:40" pos:end="495:44">(<argument pos:start="495:41" pos:end="495:43"><expr pos:start="495:41" pos:end="495:43"><name pos:start="495:41" pos:end="495:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="495:47" pos:end="495:52"><expr pos:start="495:47" pos:end="495:52"><literal type="string" pos:start="495:47" pos:end="495:52">"port"</literal></expr></argument>, <argument pos:start="495:55" pos:end="495:55"><expr pos:start="495:55" pos:end="495:55"><name pos:start="495:55" pos:end="495:55">p</name></expr></argument>)</argument_list></call> <operator pos:start="495:58" pos:end="495:58">&gt;</operator> <literal type="number" pos:start="495:60" pos:end="495:60">0</literal></expr>)</condition> <block pos:start="495:63" pos:end="499:9">{<block_content pos:start="497:13" pos:end="497:45">

	    <expr_stmt pos:start="497:13" pos:end="497:45"><expr pos:start="497:13" pos:end="497:44"><name pos:start="497:13" pos:end="497:20">vde_port</name> <operator pos:start="497:22" pos:end="497:22">=</operator> <call pos:start="497:24" pos:end="497:44"><name pos:start="497:24" pos:end="497:29">strtol</name><argument_list pos:start="497:30" pos:end="497:44">(<argument pos:start="497:31" pos:end="497:33"><expr pos:start="497:31" pos:end="497:33"><name pos:start="497:31" pos:end="497:33">buf</name></expr></argument>, <argument pos:start="497:36" pos:end="497:39"><expr pos:start="497:36" pos:end="497:39"><name pos:start="497:36" pos:end="497:39">NULL</name></expr></argument>, <argument pos:start="497:42" pos:end="497:43"><expr pos:start="497:42" pos:end="497:43"><literal type="number" pos:start="497:42" pos:end="497:43">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="499:11" pos:end="503:9">else <block pos:start="499:16" pos:end="503:9">{<block_content pos:start="501:13" pos:end="501:25">

	    <expr_stmt pos:start="501:13" pos:end="501:25"><expr pos:start="501:13" pos:end="501:24"><name pos:start="501:13" pos:end="501:20">vde_port</name> <operator pos:start="501:22" pos:end="501:22">=</operator> <literal type="number" pos:start="501:24" pos:end="501:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	<if_stmt pos:start="505:9" pos:end="509:9"><if pos:start="505:9" pos:end="509:9">if <condition pos:start="505:12" pos:end="505:75">(<expr pos:start="505:13" pos:end="505:74"><call pos:start="505:13" pos:end="505:69"><name pos:start="505:13" pos:end="505:27">get_param_value</name><argument_list pos:start="505:28" pos:end="505:69">(<argument pos:start="505:29" pos:end="505:37"><expr pos:start="505:29" pos:end="505:37"><name pos:start="505:29" pos:end="505:37">vde_group</name></expr></argument>, <argument pos:start="505:40" pos:end="505:56"><expr pos:start="505:40" pos:end="505:56"><sizeof pos:start="505:40" pos:end="505:56">sizeof<argument_list pos:start="505:46" pos:end="505:56">(<argument pos:start="505:47" pos:end="505:55"><expr pos:start="505:47" pos:end="505:55"><name pos:start="505:47" pos:end="505:55">vde_group</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="505:59" pos:end="505:65"><expr pos:start="505:59" pos:end="505:65"><literal type="string" pos:start="505:59" pos:end="505:65">"group"</literal></expr></argument>, <argument pos:start="505:68" pos:end="505:68"><expr pos:start="505:68" pos:end="505:68"><name pos:start="505:68" pos:end="505:68">p</name></expr></argument>)</argument_list></call> <operator pos:start="505:71" pos:end="505:72">&lt;=</operator> <literal type="number" pos:start="505:74" pos:end="505:74">0</literal></expr>)</condition> <block pos:start="505:77" pos:end="509:9">{<block_content pos:start="507:13" pos:end="507:32">

	    <expr_stmt pos:start="507:13" pos:end="507:32"><expr pos:start="507:13" pos:end="507:31"><name pos:start="507:13" pos:end="507:24"><name pos:start="507:13" pos:end="507:21">vde_group</name><index pos:start="507:22" pos:end="507:24">[<expr pos:start="507:23" pos:end="507:23"><literal type="number" pos:start="507:23" pos:end="507:23">0</literal></expr>]</index></name> <operator pos:start="507:26" pos:end="507:26">=</operator> <literal type="char" pos:start="507:28" pos:end="507:31">'\0'</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="511:9" pos:end="519:9"><if pos:start="511:9" pos:end="515:9">if <condition pos:start="511:12" pos:end="511:61">(<expr pos:start="511:13" pos:end="511:60"><call pos:start="511:13" pos:end="511:56"><name pos:start="511:13" pos:end="511:27">get_param_value</name><argument_list pos:start="511:28" pos:end="511:56">(<argument pos:start="511:29" pos:end="511:31"><expr pos:start="511:29" pos:end="511:31"><name pos:start="511:29" pos:end="511:31">buf</name></expr></argument>, <argument pos:start="511:34" pos:end="511:44"><expr pos:start="511:34" pos:end="511:44"><sizeof pos:start="511:34" pos:end="511:44">sizeof<argument_list pos:start="511:40" pos:end="511:44">(<argument pos:start="511:41" pos:end="511:43"><expr pos:start="511:41" pos:end="511:43"><name pos:start="511:41" pos:end="511:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="511:47" pos:end="511:52"><expr pos:start="511:47" pos:end="511:52"><literal type="string" pos:start="511:47" pos:end="511:52">"mode"</literal></expr></argument>, <argument pos:start="511:55" pos:end="511:55"><expr pos:start="511:55" pos:end="511:55"><name pos:start="511:55" pos:end="511:55">p</name></expr></argument>)</argument_list></call> <operator pos:start="511:58" pos:end="511:58">&gt;</operator> <literal type="number" pos:start="511:60" pos:end="511:60">0</literal></expr>)</condition> <block pos:start="511:63" pos:end="515:9">{<block_content pos:start="513:13" pos:end="513:44">

	    <expr_stmt pos:start="513:13" pos:end="513:44"><expr pos:start="513:13" pos:end="513:43"><name pos:start="513:13" pos:end="513:20">vde_mode</name> <operator pos:start="513:22" pos:end="513:22">=</operator> <call pos:start="513:24" pos:end="513:43"><name pos:start="513:24" pos:end="513:29">strtol</name><argument_list pos:start="513:30" pos:end="513:43">(<argument pos:start="513:31" pos:end="513:33"><expr pos:start="513:31" pos:end="513:33"><name pos:start="513:31" pos:end="513:33">buf</name></expr></argument>, <argument pos:start="513:36" pos:end="513:39"><expr pos:start="513:36" pos:end="513:39"><name pos:start="513:36" pos:end="513:39">NULL</name></expr></argument>, <argument pos:start="513:42" pos:end="513:42"><expr pos:start="513:42" pos:end="513:42"><literal type="number" pos:start="513:42" pos:end="513:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="515:11" pos:end="519:9">else <block pos:start="515:16" pos:end="519:9">{<block_content pos:start="517:13" pos:end="517:28">

	    <expr_stmt pos:start="517:13" pos:end="517:28"><expr pos:start="517:13" pos:end="517:27"><name pos:start="517:13" pos:end="517:20">vde_mode</name> <operator pos:start="517:22" pos:end="517:22">=</operator> <literal type="number" pos:start="517:24" pos:end="517:27">0700</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	<expr_stmt pos:start="521:9" pos:end="521:88"><expr pos:start="521:9" pos:end="521:87"><name pos:start="521:9" pos:end="521:11">ret</name> <operator pos:start="521:13" pos:end="521:13">=</operator> <call pos:start="521:15" pos:end="521:87"><name pos:start="521:15" pos:end="521:26">net_vde_init</name><argument_list pos:start="521:27" pos:end="521:87">(<argument pos:start="521:28" pos:end="521:31"><expr pos:start="521:28" pos:end="521:31"><name pos:start="521:28" pos:end="521:31">vlan</name></expr></argument>, <argument pos:start="521:34" pos:end="521:39"><expr pos:start="521:34" pos:end="521:39"><name pos:start="521:34" pos:end="521:39">device</name></expr></argument>, <argument pos:start="521:42" pos:end="521:45"><expr pos:start="521:42" pos:end="521:45"><name pos:start="521:42" pos:end="521:45">name</name></expr></argument>, <argument pos:start="521:48" pos:end="521:55"><expr pos:start="521:48" pos:end="521:55"><name pos:start="521:48" pos:end="521:55">vde_sock</name></expr></argument>, <argument pos:start="521:58" pos:end="521:65"><expr pos:start="521:58" pos:end="521:65"><name pos:start="521:58" pos:end="521:65">vde_port</name></expr></argument>, <argument pos:start="521:68" pos:end="521:76"><expr pos:start="521:68" pos:end="521:76"><name pos:start="521:68" pos:end="521:76">vde_group</name></expr></argument>, <argument pos:start="521:79" pos:end="521:86"><expr pos:start="521:79" pos:end="521:86"><name pos:start="521:79" pos:end="521:86">vde_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="523:7" pos:end="547:5">else

<cpp:endif pos:start="525:1" pos:end="525:6">#<cpp:directive pos:start="525:2" pos:end="525:6">endif</cpp:directive></cpp:endif>

    if <condition pos:start="527:8" pos:end="527:32">(<expr pos:start="527:9" pos:end="527:31"><operator pos:start="527:9" pos:end="527:9">!</operator><call pos:start="527:10" pos:end="527:31"><name pos:start="527:10" pos:end="527:15">strcmp</name><argument_list pos:start="527:16" pos:end="527:31">(<argument pos:start="527:17" pos:end="527:22"><expr pos:start="527:17" pos:end="527:22"><name pos:start="527:17" pos:end="527:22">device</name></expr></argument>, <argument pos:start="527:25" pos:end="527:30"><expr pos:start="527:25" pos:end="527:30"><literal type="string" pos:start="527:25" pos:end="527:30">"dump"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="527:34" pos:end="547:5">{<block_content pos:start="529:9" pos:end="545:58">

        <decl_stmt pos:start="529:9" pos:end="529:24"><decl pos:start="529:9" pos:end="529:23"><type pos:start="529:9" pos:end="529:11"><name pos:start="529:9" pos:end="529:11">int</name></type> <name pos:start="529:13" pos:end="529:15">len</name> <init pos:start="529:17" pos:end="529:23">= <expr pos:start="529:19" pos:end="529:23"><literal type="number" pos:start="529:19" pos:end="529:23">65536</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="533:9" pos:end="537:9"><if pos:start="533:9" pos:end="537:9">if <condition pos:start="533:12" pos:end="533:60">(<expr pos:start="533:13" pos:end="533:59"><call pos:start="533:13" pos:end="533:55"><name pos:start="533:13" pos:end="533:27">get_param_value</name><argument_list pos:start="533:28" pos:end="533:55">(<argument pos:start="533:29" pos:end="533:31"><expr pos:start="533:29" pos:end="533:31"><name pos:start="533:29" pos:end="533:31">buf</name></expr></argument>, <argument pos:start="533:34" pos:end="533:44"><expr pos:start="533:34" pos:end="533:44"><sizeof pos:start="533:34" pos:end="533:44">sizeof<argument_list pos:start="533:40" pos:end="533:44">(<argument pos:start="533:41" pos:end="533:43"><expr pos:start="533:41" pos:end="533:43"><name pos:start="533:41" pos:end="533:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="533:47" pos:end="533:51"><expr pos:start="533:47" pos:end="533:51"><literal type="string" pos:start="533:47" pos:end="533:51">"len"</literal></expr></argument>, <argument pos:start="533:54" pos:end="533:54"><expr pos:start="533:54" pos:end="533:54"><name pos:start="533:54" pos:end="533:54">p</name></expr></argument>)</argument_list></call> <operator pos:start="533:57" pos:end="533:57">&gt;</operator> <literal type="number" pos:start="533:59" pos:end="533:59">0</literal></expr>)</condition> <block pos:start="533:62" pos:end="537:9">{<block_content pos:start="535:13" pos:end="535:39">

            <expr_stmt pos:start="535:13" pos:end="535:39"><expr pos:start="535:13" pos:end="535:38"><name pos:start="535:13" pos:end="535:15">len</name> <operator pos:start="535:17" pos:end="535:17">=</operator> <call pos:start="535:19" pos:end="535:38"><name pos:start="535:19" pos:end="535:24">strtol</name><argument_list pos:start="535:25" pos:end="535:38">(<argument pos:start="535:26" pos:end="535:28"><expr pos:start="535:26" pos:end="535:28"><name pos:start="535:26" pos:end="535:28">buf</name></expr></argument>, <argument pos:start="535:31" pos:end="535:34"><expr pos:start="535:31" pos:end="535:34"><name pos:start="535:31" pos:end="535:34">NULL</name></expr></argument>, <argument pos:start="535:37" pos:end="535:37"><expr pos:start="535:37" pos:end="535:37"><literal type="number" pos:start="535:37" pos:end="535:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="539:9" pos:end="543:9"><if pos:start="539:9" pos:end="543:9">if <condition pos:start="539:12" pos:end="539:58">(<expr pos:start="539:13" pos:end="539:57"><operator pos:start="539:13" pos:end="539:13">!</operator><call pos:start="539:14" pos:end="539:57"><name pos:start="539:14" pos:end="539:28">get_param_value</name><argument_list pos:start="539:29" pos:end="539:57">(<argument pos:start="539:30" pos:end="539:32"><expr pos:start="539:30" pos:end="539:32"><name pos:start="539:30" pos:end="539:32">buf</name></expr></argument>, <argument pos:start="539:35" pos:end="539:45"><expr pos:start="539:35" pos:end="539:45"><sizeof pos:start="539:35" pos:end="539:45">sizeof<argument_list pos:start="539:41" pos:end="539:45">(<argument pos:start="539:42" pos:end="539:44"><expr pos:start="539:42" pos:end="539:44"><name pos:start="539:42" pos:end="539:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="539:48" pos:end="539:53"><expr pos:start="539:48" pos:end="539:53"><literal type="string" pos:start="539:48" pos:end="539:53">"file"</literal></expr></argument>, <argument pos:start="539:56" pos:end="539:56"><expr pos:start="539:56" pos:end="539:56"><name pos:start="539:56" pos:end="539:56">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="539:60" pos:end="543:9">{<block_content pos:start="541:13" pos:end="541:68">

            <expr_stmt pos:start="541:13" pos:end="541:68"><expr pos:start="541:13" pos:end="541:67"><call pos:start="541:13" pos:end="541:67"><name pos:start="541:13" pos:end="541:20">snprintf</name><argument_list pos:start="541:21" pos:end="541:67">(<argument pos:start="541:22" pos:end="541:24"><expr pos:start="541:22" pos:end="541:24"><name pos:start="541:22" pos:end="541:24">buf</name></expr></argument>, <argument pos:start="541:27" pos:end="541:37"><expr pos:start="541:27" pos:end="541:37"><sizeof pos:start="541:27" pos:end="541:37">sizeof<argument_list pos:start="541:33" pos:end="541:37">(<argument pos:start="541:34" pos:end="541:36"><expr pos:start="541:34" pos:end="541:36"><name pos:start="541:34" pos:end="541:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="541:40" pos:end="541:57"><expr pos:start="541:40" pos:end="541:57"><literal type="string" pos:start="541:40" pos:end="541:57">"qemu-vlan%d.pcap"</literal></expr></argument>, <argument pos:start="541:60" pos:end="541:66"><expr pos:start="541:60" pos:end="541:66"><name pos:start="541:60" pos:end="541:66">vlan_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="545:9" pos:end="545:58"><expr pos:start="545:9" pos:end="545:57"><name pos:start="545:9" pos:end="545:11">ret</name> <operator pos:start="545:13" pos:end="545:13">=</operator> <call pos:start="545:15" pos:end="545:57"><name pos:start="545:15" pos:end="545:27">net_dump_init</name><argument_list pos:start="545:28" pos:end="545:57">(<argument pos:start="545:29" pos:end="545:32"><expr pos:start="545:29" pos:end="545:32"><name pos:start="545:29" pos:end="545:32">vlan</name></expr></argument>, <argument pos:start="545:35" pos:end="545:40"><expr pos:start="545:35" pos:end="545:40"><name pos:start="545:35" pos:end="545:40">device</name></expr></argument>, <argument pos:start="545:43" pos:end="545:46"><expr pos:start="545:43" pos:end="545:46"><name pos:start="545:43" pos:end="545:46">name</name></expr></argument>, <argument pos:start="545:49" pos:end="545:51"><expr pos:start="545:49" pos:end="545:51"><name pos:start="545:49" pos:end="545:51">buf</name></expr></argument>, <argument pos:start="545:54" pos:end="545:56"><expr pos:start="545:54" pos:end="545:56"><name pos:start="545:54" pos:end="545:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="547:7" pos:end="555:5">else <block pos:start="547:12" pos:end="555:5">{<block_content pos:start="549:9" pos:end="553:17">

        <expr_stmt pos:start="549:9" pos:end="549:64"><expr pos:start="549:9" pos:end="549:63"><call pos:start="549:9" pos:end="549:63"><name pos:start="549:9" pos:end="549:15">fprintf</name><argument_list pos:start="549:16" pos:end="549:63">(<argument pos:start="549:17" pos:end="549:22"><expr pos:start="549:17" pos:end="549:22"><name pos:start="549:17" pos:end="549:22">stderr</name></expr></argument>, <argument pos:start="549:25" pos:end="549:54"><expr pos:start="549:25" pos:end="549:54"><literal type="string" pos:start="549:25" pos:end="549:54">"Unknown network device: %s\n"</literal></expr></argument>, <argument pos:start="549:57" pos:end="549:62"><expr pos:start="549:57" pos:end="549:62"><name pos:start="549:57" pos:end="549:62">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="551:9" pos:end="551:17"><expr pos:start="551:9" pos:end="551:16"><name pos:start="551:9" pos:end="551:11">ret</name> <operator pos:start="551:13" pos:end="551:13">=</operator> <operator pos:start="551:15" pos:end="551:15">-</operator><literal type="number" pos:start="551:16" pos:end="551:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="553:9" pos:end="553:17">goto <name pos:start="553:14" pos:end="553:16">out</name>;</goto>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="557:5" pos:end="561:5"><if pos:start="557:5" pos:end="561:5">if <condition pos:start="557:8" pos:end="557:16">(<expr pos:start="557:9" pos:end="557:15"><name pos:start="557:9" pos:end="557:11">ret</name> <operator pos:start="557:13" pos:end="557:13">&lt;</operator> <literal type="number" pos:start="557:15" pos:end="557:15">0</literal></expr>)</condition> <block pos:start="557:18" pos:end="561:5">{<block_content pos:start="559:9" pos:end="559:70">

        <expr_stmt pos:start="559:9" pos:end="559:70"><expr pos:start="559:9" pos:end="559:69"><call pos:start="559:9" pos:end="559:69"><name pos:start="559:9" pos:end="559:15">fprintf</name><argument_list pos:start="559:16" pos:end="559:69">(<argument pos:start="559:17" pos:end="559:22"><expr pos:start="559:17" pos:end="559:22"><name pos:start="559:17" pos:end="559:22">stderr</name></expr></argument>, <argument pos:start="559:25" pos:end="559:60"><expr pos:start="559:25" pos:end="559:60"><literal type="string" pos:start="559:25" pos:end="559:60">"Could not initialize device '%s'\n"</literal></expr></argument>, <argument pos:start="559:63" pos:end="559:68"><expr pos:start="559:63" pos:end="559:68"><name pos:start="559:63" pos:end="559:68">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="563:1" pos:end="563:4"><name pos:start="563:1" pos:end="563:3">out</name>:</label>

    <if_stmt pos:start="565:5" pos:end="567:19"><if pos:start="565:5" pos:end="567:19">if <condition pos:start="565:8" pos:end="565:13">(<expr pos:start="565:9" pos:end="565:12"><name pos:start="565:9" pos:end="565:12">name</name></expr>)</condition><block type="pseudo" pos:start="567:9" pos:end="567:19"><block_content pos:start="567:9" pos:end="567:19">

        <expr_stmt pos:start="567:9" pos:end="567:19"><expr pos:start="567:9" pos:end="567:18"><call pos:start="567:9" pos:end="567:18"><name pos:start="567:9" pos:end="567:12">free</name><argument_list pos:start="567:13" pos:end="567:18">(<argument pos:start="567:14" pos:end="567:17"><expr pos:start="567:14" pos:end="567:17"><name pos:start="567:14" pos:end="567:17">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="569:5" pos:end="569:15">return <expr pos:start="569:12" pos:end="569:14"><name pos:start="569:12" pos:end="569:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
