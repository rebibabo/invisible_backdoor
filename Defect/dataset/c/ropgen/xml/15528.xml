<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15528.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">sigp_store_adtl_status</name><parameter_list pos:start="1:35" pos:end="1:45">(<parameter pos:start="1:36" pos:end="1:44"><decl pos:start="1:36" pos:end="1:44"><type pos:start="1:36" pos:end="1:41"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:41">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">SigpInfo</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">si</name> <init pos:start="5:18" pos:end="5:22">= <expr pos:start="5:20" pos:end="5:22"><name pos:start="5:20" pos:end="5:22">arg</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:71">(<expr pos:start="9:9" pos:end="9:70"><operator pos:start="9:9" pos:end="9:9">!</operator><call pos:start="9:10" pos:end="9:70"><name pos:start="9:10" pos:end="9:28">kvm_check_extension</name><argument_list pos:start="9:29" pos:end="9:70">(<argument pos:start="9:30" pos:end="9:38"><expr pos:start="9:30" pos:end="9:38"><name pos:start="9:30" pos:end="9:38">kvm_state</name></expr></argument>, <argument pos:start="9:41" pos:end="9:69"><expr pos:start="9:41" pos:end="9:69"><name pos:start="9:41" pos:end="9:69">KVM_CAP_S390_VECTOR_REGISTERS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:73" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:15">

        <expr_stmt pos:start="11:9" pos:end="11:53"><expr pos:start="11:9" pos:end="11:52"><call pos:start="11:9" pos:end="11:52"><name pos:start="11:9" pos:end="11:23">set_sigp_status</name><argument_list pos:start="11:24" pos:end="11:52">(<argument pos:start="11:25" pos:end="11:26"><expr pos:start="11:25" pos:end="11:26"><name pos:start="11:25" pos:end="11:26">si</name></expr></argument>, <argument pos:start="11:29" pos:end="11:51"><expr pos:start="11:29" pos:end="11:51"><name pos:start="11:29" pos:end="11:51">SIGP_STAT_INVALID_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:31">/* cpu has to be stopped */</comment>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:57">(<expr pos:start="21:9" pos:end="21:56"><call pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:26">s390_cpu_get_state</name><argument_list pos:start="21:27" pos:end="21:35">(<argument pos:start="21:28" pos:end="21:34"><expr pos:start="21:28" pos:end="21:34"><name pos:start="21:28" pos:end="21:34"><name pos:start="21:28" pos:end="21:29">si</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:34">cpu</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:37" pos:end="21:38">!=</operator> <name pos:start="21:40" pos:end="21:56">CPU_STATE_STOPPED</name></expr>)</condition> <block pos:start="21:59" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:55"><expr pos:start="23:9" pos:end="23:54"><call pos:start="23:9" pos:end="23:54"><name pos:start="23:9" pos:end="23:23">set_sigp_status</name><argument_list pos:start="23:24" pos:end="23:54">(<argument pos:start="23:25" pos:end="23:26"><expr pos:start="23:25" pos:end="23:26"><name pos:start="23:25" pos:end="23:26">si</name></expr></argument>, <argument pos:start="23:29" pos:end="23:53"><expr pos:start="23:29" pos:end="23:53"><name pos:start="23:29" pos:end="23:53">SIGP_STAT_INCORRECT_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:57">/* parameter must be aligned to 1024-byte boundary */</comment>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:26">(<expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:10">si</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:17">param</name></name> <operator pos:start="33:19" pos:end="33:19">&amp;</operator> <literal type="number" pos:start="33:21" pos:end="33:25">0x3ff</literal></expr>)</condition> <block pos:start="33:28" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:57"><expr pos:start="35:9" pos:end="35:56"><call pos:start="35:9" pos:end="35:56"><name pos:start="35:9" pos:end="35:23">set_sigp_status</name><argument_list pos:start="35:24" pos:end="35:56">(<argument pos:start="35:25" pos:end="35:26"><expr pos:start="35:25" pos:end="35:26"><name pos:start="35:25" pos:end="35:26">si</name></expr></argument>, <argument pos:start="35:29" pos:end="35:55"><expr pos:start="35:29" pos:end="35:55"><name pos:start="35:29" pos:end="35:55">SIGP_STAT_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:40"><expr pos:start="43:5" pos:end="43:39"><call pos:start="43:5" pos:end="43:39"><name pos:start="43:5" pos:end="43:25">cpu_synchronize_state</name><argument_list pos:start="43:26" pos:end="43:39">(<argument pos:start="43:27" pos:end="43:38"><expr pos:start="43:27" pos:end="43:38"><call pos:start="43:27" pos:end="43:38"><name pos:start="43:27" pos:end="43:29">CPU</name><argument_list pos:start="43:30" pos:end="43:38">(<argument pos:start="43:31" pos:end="43:37"><expr pos:start="43:31" pos:end="43:37"><name pos:start="43:31" pos:end="43:37"><name pos:start="43:31" pos:end="43:32">si</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:37">cpu</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:55">(<expr pos:start="47:9" pos:end="47:54"><call pos:start="47:9" pos:end="47:54"><name pos:start="47:9" pos:end="47:34">kvm_s390_store_adtl_status</name><argument_list pos:start="47:35" pos:end="47:54">(<argument pos:start="47:36" pos:end="47:42"><expr pos:start="47:36" pos:end="47:42"><name pos:start="47:36" pos:end="47:42"><name pos:start="47:36" pos:end="47:37">si</name><operator pos:start="47:38" pos:end="47:39">-&gt;</operator><name pos:start="47:40" pos:end="47:42">cpu</name></name></expr></argument>, <argument pos:start="47:45" pos:end="47:53"><expr pos:start="47:45" pos:end="47:53"><name pos:start="47:45" pos:end="47:53"><name pos:start="47:45" pos:end="47:46">si</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:53">param</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:57" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:15">

        <expr_stmt pos:start="49:9" pos:end="49:57"><expr pos:start="49:9" pos:end="49:56"><call pos:start="49:9" pos:end="49:56"><name pos:start="49:9" pos:end="49:23">set_sigp_status</name><argument_list pos:start="49:24" pos:end="49:56">(<argument pos:start="49:25" pos:end="49:26"><expr pos:start="49:25" pos:end="49:26"><name pos:start="49:25" pos:end="49:26">si</name></expr></argument>, <argument pos:start="49:29" pos:end="49:55"><expr pos:start="49:29" pos:end="49:55"><name pos:start="49:29" pos:end="49:55">SIGP_STAT_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:41"><expr pos:start="55:5" pos:end="55:40"><name pos:start="55:5" pos:end="55:10"><name pos:start="55:5" pos:end="55:6">si</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:10">cc</name></name> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:40">SIGP_CC_ORDER_CODE_ACCEPTED</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
