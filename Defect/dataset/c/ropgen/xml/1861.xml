<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1861.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">qmp_nbd_server_add</name><parameter_list pos:start="1:24" pos:end="3:37">(<parameter pos:start="1:25" pos:end="1:42"><decl pos:start="1:25" pos:end="1:42"><type pos:start="1:25" pos:end="1:42"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">device</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:48">bool</name></type> <name pos:start="1:50" pos:end="1:61">has_writable</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:76"><decl pos:start="1:64" pos:end="1:76"><type pos:start="1:64" pos:end="1:76"><name pos:start="1:64" pos:end="1:67">bool</name></type> <name pos:start="1:69" pos:end="1:76">writable</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:29">Error</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier><modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:36">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="87:1">{<block_content pos:start="7:5" pos:end="85:50">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">NBDExport</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:18">exp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">NBDCloseNotifier</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:24">(<expr pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:17">server_fd</name> <operator pos:start="15:19" pos:end="15:20">==</operator> <operator pos:start="15:22" pos:end="15:22">-</operator><literal type="number" pos:start="15:23" pos:end="15:23">1</literal></expr>)</condition> <block pos:start="15:26" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:51"><expr pos:start="17:9" pos:end="17:50"><call pos:start="17:9" pos:end="17:50"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="17:50">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>, <argument pos:start="17:26" pos:end="17:49"><expr pos:start="17:26" pos:end="17:49"><literal type="string" pos:start="17:26" pos:end="17:49">"NBD server not running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:32">(<expr pos:start="25:9" pos:end="25:31"><call pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:23">nbd_export_find</name><argument_list pos:start="25:24" pos:end="25:31">(<argument pos:start="25:25" pos:end="25:30"><expr pos:start="25:25" pos:end="25:30"><name pos:start="25:25" pos:end="25:30">device</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:34" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:77"><expr pos:start="27:9" pos:end="27:76"><call pos:start="27:9" pos:end="27:76"><name pos:start="27:9" pos:end="27:18">error_setg</name><argument_list pos:start="27:19" pos:end="27:76">(<argument pos:start="27:20" pos:end="27:23"><expr pos:start="27:20" pos:end="27:23"><name pos:start="27:20" pos:end="27:23">errp</name></expr></argument>, <argument pos:start="27:26" pos:end="27:67"><expr pos:start="27:26" pos:end="27:67"><literal type="string" pos:start="27:26" pos:end="27:67">"NBD server already exporting device '%s'"</literal></expr></argument>, <argument pos:start="27:70" pos:end="27:75"><expr pos:start="27:70" pos:end="27:75"><name pos:start="27:70" pos:end="27:75">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:27"><expr pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:6">bs</name> <operator pos:start="35:8" pos:end="35:8">=</operator> <call pos:start="35:10" pos:end="35:26"><name pos:start="35:10" pos:end="35:18">bdrv_find</name><argument_list pos:start="35:19" pos:end="35:26">(<argument pos:start="35:20" pos:end="35:25"><expr pos:start="35:20" pos:end="35:25"><name pos:start="35:20" pos:end="35:25">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:12">(<expr pos:start="37:9" pos:end="37:11"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:11">bs</name></expr>)</condition> <block pos:start="37:14" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:15">

        <expr_stmt pos:start="39:9" pos:end="39:55"><expr pos:start="39:9" pos:end="39:54"><call pos:start="39:9" pos:end="39:54"><name pos:start="39:9" pos:end="39:17">error_set</name><argument_list pos:start="39:18" pos:end="39:54">(<argument pos:start="39:19" pos:end="39:22"><expr pos:start="39:19" pos:end="39:22"><name pos:start="39:19" pos:end="39:22">errp</name></expr></argument>, <argument pos:start="39:25" pos:end="39:45"><expr pos:start="39:25" pos:end="39:45"><name pos:start="39:25" pos:end="39:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="39:48" pos:end="39:53"><expr pos:start="39:48" pos:end="39:53"><name pos:start="39:48" pos:end="39:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:30">(<expr pos:start="45:9" pos:end="45:29"><operator pos:start="45:9" pos:end="45:9">!</operator><call pos:start="45:10" pos:end="45:29"><name pos:start="45:10" pos:end="45:25">bdrv_is_inserted</name><argument_list pos:start="45:26" pos:end="45:29">(<argument pos:start="45:27" pos:end="45:28"><expr pos:start="45:27" pos:end="45:28"><name pos:start="45:27" pos:end="45:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:32" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:15">

        <expr_stmt pos:start="47:9" pos:end="47:59"><expr pos:start="47:9" pos:end="47:58"><call pos:start="47:9" pos:end="47:58"><name pos:start="47:9" pos:end="47:17">error_set</name><argument_list pos:start="47:18" pos:end="47:58">(<argument pos:start="47:19" pos:end="47:22"><expr pos:start="47:19" pos:end="47:22"><name pos:start="47:19" pos:end="47:22">errp</name></expr></argument>, <argument pos:start="47:25" pos:end="47:49"><expr pos:start="47:25" pos:end="47:49"><name pos:start="47:25" pos:end="47:49">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="47:52" pos:end="47:57"><expr pos:start="47:52" pos:end="47:57"><name pos:start="47:52" pos:end="47:57">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:22">(<expr pos:start="55:9" pos:end="55:21"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:21">has_writable</name></expr>)</condition> <block pos:start="55:24" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:25">

        <expr_stmt pos:start="57:9" pos:end="57:25"><expr pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:16">writable</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:24">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:30">(<expr pos:start="61:9" pos:end="61:29"><call pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:25">bdrv_is_read_only</name><argument_list pos:start="61:26" pos:end="61:29">(<argument pos:start="61:27" pos:end="61:28"><expr pos:start="61:27" pos:end="61:28"><name pos:start="61:27" pos:end="61:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:32" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:25">

        <expr_stmt pos:start="63:9" pos:end="63:25"><expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:16">writable</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:24">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:77"><expr pos:start="69:5" pos:end="69:76"><name pos:start="69:5" pos:end="69:7">exp</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:76"><name pos:start="69:11" pos:end="69:24">nbd_export_new</name><argument_list pos:start="69:25" pos:end="69:76">(<argument pos:start="69:26" pos:end="69:27"><expr pos:start="69:26" pos:end="69:27"><name pos:start="69:26" pos:end="69:27">bs</name></expr></argument>, <argument pos:start="69:30" pos:end="69:30"><expr pos:start="69:30" pos:end="69:30"><literal type="number" pos:start="69:30" pos:end="69:30">0</literal></expr></argument>, <argument pos:start="69:33" pos:end="69:34"><expr pos:start="69:33" pos:end="69:34"><operator pos:start="69:33" pos:end="69:33">-</operator><literal type="number" pos:start="69:34" pos:end="69:34">1</literal></expr></argument>, <argument pos:start="69:37" pos:end="69:69"><expr pos:start="69:37" pos:end="69:69"><ternary pos:start="69:37" pos:end="69:69"><condition pos:start="69:37" pos:end="69:46"><expr pos:start="69:37" pos:end="69:44"><name pos:start="69:37" pos:end="69:44">writable</name></expr> ?</condition><then pos:start="69:48" pos:end="69:48"> <expr pos:start="69:48" pos:end="69:48"><literal type="number" pos:start="69:48" pos:end="69:48">0</literal></expr> </then><else pos:start="69:50" pos:end="69:69">: <expr pos:start="69:52" pos:end="69:69"><name pos:start="69:52" pos:end="69:69">NBD_FLAG_READ_ONLY</name></expr></else></ternary></expr></argument>, <argument pos:start="69:72" pos:end="69:75"><expr pos:start="69:72" pos:end="69:75"><name pos:start="69:72" pos:end="69:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:37"><expr pos:start="73:5" pos:end="73:36"><call pos:start="73:5" pos:end="73:36"><name pos:start="73:5" pos:end="73:23">nbd_export_set_name</name><argument_list pos:start="73:24" pos:end="73:36">(<argument pos:start="73:25" pos:end="73:27"><expr pos:start="73:25" pos:end="73:27"><name pos:start="73:25" pos:end="73:27">exp</name></expr></argument>, <argument pos:start="73:30" pos:end="73:35"><expr pos:start="73:30" pos:end="73:35"><name pos:start="73:30" pos:end="73:35">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:44"><expr pos:start="77:5" pos:end="77:43"><name pos:start="77:5" pos:end="77:5">n</name> <operator pos:start="77:7" pos:end="77:7">=</operator> <call pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:17">g_malloc0</name><argument_list pos:start="77:18" pos:end="77:43">(<argument pos:start="77:19" pos:end="77:42"><expr pos:start="77:19" pos:end="77:42"><sizeof pos:start="77:19" pos:end="77:42">sizeof<argument_list pos:start="77:25" pos:end="77:42">(<argument pos:start="77:26" pos:end="77:41"><expr pos:start="77:26" pos:end="77:41"><name pos:start="77:26" pos:end="77:41">NBDCloseNotifier</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:37"><expr pos:start="79:5" pos:end="79:36"><name pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:5">n</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:8">n</name><operator pos:start="79:9" pos:end="79:9">.</operator><name pos:start="79:10" pos:end="79:15">notify</name></name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:36">nbd_close_notifier</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:17"><expr pos:start="81:5" pos:end="81:16"><name pos:start="81:5" pos:end="81:10"><name pos:start="81:5" pos:end="81:5">n</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:10">exp</name></name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:16">exp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:39"><expr pos:start="83:5" pos:end="83:38"><call pos:start="83:5" pos:end="83:38"><name pos:start="83:5" pos:end="83:27">bdrv_add_close_notifier</name><argument_list pos:start="83:28" pos:end="83:38">(<argument pos:start="83:29" pos:end="83:30"><expr pos:start="83:29" pos:end="83:30"><name pos:start="83:29" pos:end="83:30">bs</name></expr></argument>, <argument pos:start="83:33" pos:end="83:37"><expr pos:start="83:33" pos:end="83:37"><operator pos:start="83:33" pos:end="83:33">&amp;</operator><name pos:start="83:34" pos:end="83:37"><name pos:start="83:34" pos:end="83:34">n</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:37">n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:50"><expr pos:start="85:5" pos:end="85:49"><call pos:start="85:5" pos:end="85:49"><name pos:start="85:5" pos:end="85:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="85:23" pos:end="85:49">(<argument pos:start="85:24" pos:end="85:39"><expr pos:start="85:24" pos:end="85:39"><operator pos:start="85:24" pos:end="85:24">&amp;</operator><name pos:start="85:25" pos:end="85:39">close_notifiers</name></expr></argument>, <argument pos:start="85:42" pos:end="85:42"><expr pos:start="85:42" pos:end="85:42"><name pos:start="85:42" pos:end="85:42">n</name></expr></argument>, <argument pos:start="85:45" pos:end="85:48"><expr pos:start="85:45" pos:end="85:48"><name pos:start="85:45" pos:end="85:48">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
