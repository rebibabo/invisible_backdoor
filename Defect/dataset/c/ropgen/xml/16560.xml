<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16560.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">qcow_read</name><parameter_list pos:start="1:21" pos:end="3:50">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><name pos:start="1:44" pos:end="1:50">int64_t</name></type> <name pos:start="1:52" pos:end="1:61">sector_num</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:28">uint8_t</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:33">buf</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:49"><decl pos:start="3:36" pos:end="3:49"><type pos:start="3:36" pos:end="3:49"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:49">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="87:1">{<block_content pos:start="7:5" pos:end="85:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:29">index_in_cluster</name></decl>, <decl pos:start="9:32" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:32" pos:end="9:32">n</name></decl>, <decl pos:start="9:35" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:35" pos:end="9:36">n1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:27">cluster_offset</name></decl>;</decl_stmt>



    <while pos:start="15:5" pos:end="83:5">while <condition pos:start="15:11" pos:end="15:26">(<expr pos:start="15:12" pos:end="15:25"><name pos:start="15:12" pos:end="15:21">nb_sectors</name> <operator pos:start="15:23" pos:end="15:23">&gt;</operator> <literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr>)</condition> <block pos:start="15:28" pos:end="83:5">{<block_content pos:start="17:9" pos:end="81:23">

        <expr_stmt pos:start="17:9" pos:end="17:23"><expr pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:9">n</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <name pos:start="17:13" pos:end="17:22">nb_sectors</name></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:75"><expr pos:start="19:9" pos:end="19:74"><name pos:start="19:9" pos:end="19:22">cluster_offset</name> <operator pos:start="19:24" pos:end="19:24">=</operator> <call pos:start="19:26" pos:end="19:74"><name pos:start="19:26" pos:end="19:49">qcow2_get_cluster_offset</name><argument_list pos:start="19:50" pos:end="19:74">(<argument pos:start="19:51" pos:end="19:52"><expr pos:start="19:51" pos:end="19:52"><name pos:start="19:51" pos:end="19:52">bs</name></expr></argument>, <argument pos:start="19:55" pos:end="19:69"><expr pos:start="19:55" pos:end="19:69"><name pos:start="19:55" pos:end="19:64">sector_num</name> <operator pos:start="19:66" pos:end="19:67">&lt;&lt;</operator> <literal type="number" pos:start="19:69" pos:end="19:69">9</literal></expr></argument>, <argument pos:start="19:72" pos:end="19:73"><expr pos:start="19:72" pos:end="19:73"><operator pos:start="19:72" pos:end="19:72">&amp;</operator><name pos:start="19:73" pos:end="19:73">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:65"><expr pos:start="21:9" pos:end="21:64"><name pos:start="21:9" pos:end="21:24">index_in_cluster</name> <operator pos:start="21:26" pos:end="21:26">=</operator> <name pos:start="21:28" pos:end="21:37">sector_num</name> <operator pos:start="21:39" pos:end="21:39">&amp;</operator> <operator pos:start="21:41" pos:end="21:41">(</operator><name pos:start="21:42" pos:end="21:59"><name pos:start="21:42" pos:end="21:42">s</name><operator pos:start="21:43" pos:end="21:44">-&gt;</operator><name pos:start="21:45" pos:end="21:59">cluster_sectors</name></name> <operator pos:start="21:61" pos:end="21:61">-</operator> <literal type="number" pos:start="21:63" pos:end="21:63">1</literal><operator pos:start="21:64" pos:end="21:64">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="75:9"><if pos:start="23:9" pos:end="49:9">if <condition pos:start="23:12" pos:end="23:28">(<expr pos:start="23:13" pos:end="23:27"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:27">cluster_offset</name></expr>)</condition> <block pos:start="23:30" pos:end="49:9">{<block_content pos:start="25:13" pos:end="47:13">

            <if_stmt pos:start="25:13" pos:end="47:13"><if pos:start="25:13" pos:end="43:13">if <condition pos:start="25:16" pos:end="25:31">(<expr pos:start="25:17" pos:end="25:30"><name pos:start="25:17" pos:end="25:30"><name pos:start="25:17" pos:end="25:18">bs</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:30">backing_hd</name></name></expr>)</condition> <block pos:start="25:33" pos:end="43:13">{<block_content pos:start="29:17" pos:end="41:17">

                <comment type="block" pos:start="27:17" pos:end="27:46">/* read from the base image */</comment>

                <expr_stmt pos:start="29:17" pos:end="29:77"><expr pos:start="29:17" pos:end="29:76"><name pos:start="29:17" pos:end="29:18">n1</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <call pos:start="29:22" pos:end="29:76"><name pos:start="29:22" pos:end="29:40">qcow2_backing_read1</name><argument_list pos:start="29:41" pos:end="29:76">(<argument pos:start="29:42" pos:end="29:55"><expr pos:start="29:42" pos:end="29:55"><name pos:start="29:42" pos:end="29:55"><name pos:start="29:42" pos:end="29:43">bs</name><operator pos:start="29:44" pos:end="29:45">-&gt;</operator><name pos:start="29:46" pos:end="29:55">backing_hd</name></name></expr></argument>, <argument pos:start="29:58" pos:end="29:67"><expr pos:start="29:58" pos:end="29:67"><name pos:start="29:58" pos:end="29:67">sector_num</name></expr></argument>, <argument pos:start="29:70" pos:end="29:72"><expr pos:start="29:70" pos:end="29:72"><name pos:start="29:70" pos:end="29:72">buf</name></expr></argument>, <argument pos:start="29:75" pos:end="29:75"><expr pos:start="29:75" pos:end="29:75"><name pos:start="29:75" pos:end="29:75">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="31:17" pos:end="41:17"><if pos:start="31:17" pos:end="41:17">if <condition pos:start="31:20" pos:end="31:27">(<expr pos:start="31:21" pos:end="31:26"><name pos:start="31:21" pos:end="31:22">n1</name> <operator pos:start="31:24" pos:end="31:24">&gt;</operator> <literal type="number" pos:start="31:26" pos:end="31:26">0</literal></expr>)</condition> <block pos:start="31:29" pos:end="41:17">{<block_content pos:start="33:21" pos:end="39:34">

                    <expr_stmt pos:start="33:21" pos:end="33:64"><expr pos:start="33:21" pos:end="33:63"><call pos:start="33:21" pos:end="33:63"><name pos:start="33:21" pos:end="33:32">BLKDBG_EVENT</name><argument_list pos:start="33:33" pos:end="33:63">(<argument pos:start="33:34" pos:end="33:41"><expr pos:start="33:34" pos:end="33:41"><name pos:start="33:34" pos:end="33:41"><name pos:start="33:34" pos:end="33:35">bs</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:41">file</name></name></expr></argument>, <argument pos:start="33:44" pos:end="33:62"><expr pos:start="33:44" pos:end="33:62"><name pos:start="33:44" pos:end="33:62">BLKDBG_READ_BACKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="35:21" pos:end="35:73"><expr pos:start="35:21" pos:end="35:72"><name pos:start="35:21" pos:end="35:23">ret</name> <operator pos:start="35:25" pos:end="35:25">=</operator> <call pos:start="35:27" pos:end="35:72"><name pos:start="35:27" pos:end="35:35">bdrv_read</name><argument_list pos:start="35:36" pos:end="35:72">(<argument pos:start="35:37" pos:end="35:50"><expr pos:start="35:37" pos:end="35:50"><name pos:start="35:37" pos:end="35:50"><name pos:start="35:37" pos:end="35:38">bs</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:50">backing_hd</name></name></expr></argument>, <argument pos:start="35:53" pos:end="35:62"><expr pos:start="35:53" pos:end="35:62"><name pos:start="35:53" pos:end="35:62">sector_num</name></expr></argument>, <argument pos:start="35:65" pos:end="35:67"><expr pos:start="35:65" pos:end="35:67"><name pos:start="35:65" pos:end="35:67">buf</name></expr></argument>, <argument pos:start="35:70" pos:end="35:71"><expr pos:start="35:70" pos:end="35:71"><name pos:start="35:70" pos:end="35:71">n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="37:21" pos:end="39:34"><if pos:start="37:21" pos:end="39:34">if <condition pos:start="37:24" pos:end="37:32">(<expr pos:start="37:25" pos:end="37:31"><name pos:start="37:25" pos:end="37:27">ret</name> <operator pos:start="37:29" pos:end="37:29">&lt;</operator> <literal type="number" pos:start="37:31" pos:end="37:31">0</literal></expr>)</condition><block type="pseudo" pos:start="39:25" pos:end="39:34"><block_content pos:start="39:25" pos:end="39:34">

                        <return pos:start="39:25" pos:end="39:34">return <expr pos:start="39:32" pos:end="39:33"><operator pos:start="39:32" pos:end="39:32">-</operator><literal type="number" pos:start="39:33" pos:end="39:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="43:15" pos:end="47:13">else <block pos:start="43:20" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:40">

                <expr_stmt pos:start="45:17" pos:end="45:40"><expr pos:start="45:17" pos:end="45:39"><call pos:start="45:17" pos:end="45:39"><name pos:start="45:17" pos:end="45:22">memset</name><argument_list pos:start="45:23" pos:end="45:39">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">buf</name></expr></argument>, <argument pos:start="45:29" pos:end="45:29"><expr pos:start="45:29" pos:end="45:29"><literal type="number" pos:start="45:29" pos:end="45:29">0</literal></expr></argument>, <argument pos:start="45:32" pos:end="45:38"><expr pos:start="45:32" pos:end="45:38"><literal type="number" pos:start="45:32" pos:end="45:34">512</literal> <operator pos:start="45:36" pos:end="45:36">*</operator> <name pos:start="45:38" pos:end="45:38">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="57:9">else if <condition pos:start="49:19" pos:end="49:58">(<expr pos:start="49:20" pos:end="49:57"><name pos:start="49:20" pos:end="49:33">cluster_offset</name> <operator pos:start="49:35" pos:end="49:35">&amp;</operator> <name pos:start="49:37" pos:end="49:57">QCOW_OFLAG_COMPRESSED</name></expr>)</condition> <block pos:start="49:60" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:76">

            <if_stmt pos:start="51:13" pos:end="53:26"><if pos:start="51:13" pos:end="53:26">if <condition pos:start="51:16" pos:end="51:65">(<expr pos:start="51:17" pos:end="51:64"><call pos:start="51:17" pos:end="51:60"><name pos:start="51:17" pos:end="51:40">qcow2_decompress_cluster</name><argument_list pos:start="51:41" pos:end="51:60">(<argument pos:start="51:42" pos:end="51:43"><expr pos:start="51:42" pos:end="51:43"><name pos:start="51:42" pos:end="51:43">bs</name></expr></argument>, <argument pos:start="51:46" pos:end="51:59"><expr pos:start="51:46" pos:end="51:59"><name pos:start="51:46" pos:end="51:59">cluster_offset</name></expr></argument>)</argument_list></call> <operator pos:start="51:62" pos:end="51:62">&lt;</operator> <literal type="number" pos:start="51:64" pos:end="51:64">0</literal></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:26"><block_content pos:start="53:17" pos:end="53:26">

                <return pos:start="53:17" pos:end="53:26">return <expr pos:start="53:24" pos:end="53:25"><operator pos:start="53:24" pos:end="53:24">-</operator><literal type="number" pos:start="53:25" pos:end="53:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:76"><expr pos:start="55:13" pos:end="55:75"><call pos:start="55:13" pos:end="55:75"><name pos:start="55:13" pos:end="55:18">memcpy</name><argument_list pos:start="55:19" pos:end="55:75">(<argument pos:start="55:20" pos:end="55:22"><expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">buf</name></expr></argument>, <argument pos:start="55:25" pos:end="55:65"><expr pos:start="55:25" pos:end="55:65"><name pos:start="55:25" pos:end="55:40"><name pos:start="55:25" pos:end="55:25">s</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:40">cluster_cache</name></name> <operator pos:start="55:42" pos:end="55:42">+</operator> <name pos:start="55:44" pos:end="55:59">index_in_cluster</name> <operator pos:start="55:61" pos:end="55:61">*</operator> <literal type="number" pos:start="55:63" pos:end="55:65">512</literal></expr></argument>, <argument pos:start="55:68" pos:end="55:74"><expr pos:start="55:68" pos:end="55:74"><literal type="number" pos:start="55:68" pos:end="55:70">512</literal> <operator pos:start="55:72" pos:end="55:72">*</operator> <name pos:start="55:74" pos:end="55:74">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="57:11" pos:end="75:9">else <block pos:start="57:16" pos:end="75:9">{<block_content pos:start="59:13" pos:end="73:13">

            <expr_stmt pos:start="59:13" pos:end="59:48"><expr pos:start="59:13" pos:end="59:47"><call pos:start="59:13" pos:end="59:47"><name pos:start="59:13" pos:end="59:24">BLKDBG_EVENT</name><argument_list pos:start="59:25" pos:end="59:47">(<argument pos:start="59:26" pos:end="59:33"><expr pos:start="59:26" pos:end="59:33"><name pos:start="59:26" pos:end="59:33"><name pos:start="59:26" pos:end="59:27">bs</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:33">file</name></name></expr></argument>, <argument pos:start="59:36" pos:end="59:46"><expr pos:start="59:36" pos:end="59:46"><name pos:start="59:36" pos:end="59:46">BLKDBG_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:94"><expr pos:start="61:13" pos:end="61:93"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:93"><name pos:start="61:19" pos:end="61:28">bdrv_pread</name><argument_list pos:start="61:29" pos:end="61:93">(<argument pos:start="61:30" pos:end="61:37"><expr pos:start="61:30" pos:end="61:37"><name pos:start="61:30" pos:end="61:37"><name pos:start="61:30" pos:end="61:31">bs</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:37">file</name></name></expr></argument>, <argument pos:start="61:40" pos:end="61:78"><expr pos:start="61:40" pos:end="61:78"><name pos:start="61:40" pos:end="61:53">cluster_offset</name> <operator pos:start="61:55" pos:end="61:55">+</operator> <name pos:start="61:57" pos:end="61:72">index_in_cluster</name> <operator pos:start="61:74" pos:end="61:74">*</operator> <literal type="number" pos:start="61:76" pos:end="61:78">512</literal></expr></argument>, <argument pos:start="61:81" pos:end="61:83"><expr pos:start="61:81" pos:end="61:83"><name pos:start="61:81" pos:end="61:83">buf</name></expr></argument>, <argument pos:start="61:86" pos:end="61:92"><expr pos:start="61:86" pos:end="61:92"><name pos:start="61:86" pos:end="61:86">n</name> <operator pos:start="61:88" pos:end="61:88">*</operator> <literal type="number" pos:start="61:90" pos:end="61:92">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="65:26"><if pos:start="63:13" pos:end="65:26">if <condition pos:start="63:16" pos:end="63:31">(<expr pos:start="63:17" pos:end="63:30"><name pos:start="63:17" pos:end="63:19">ret</name> <operator pos:start="63:21" pos:end="63:22">!=</operator> <name pos:start="63:24" pos:end="63:24">n</name> <operator pos:start="63:26" pos:end="63:26">*</operator> <literal type="number" pos:start="63:28" pos:end="63:30">512</literal></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:26"><block_content pos:start="65:17" pos:end="65:26">

                <return pos:start="65:17" pos:end="65:26">return <expr pos:start="65:24" pos:end="65:25"><operator pos:start="65:24" pos:end="65:24">-</operator><literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="67:13" pos:end="73:13"><if pos:start="67:13" pos:end="73:13">if <condition pos:start="67:16" pos:end="67:32">(<expr pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:17">s</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:31">crypt_method</name></name></expr>)</condition> <block pos:start="67:34" pos:end="73:13">{<block_content pos:start="69:17" pos:end="71:53">

                <expr_stmt pos:start="69:17" pos:end="71:53"><expr pos:start="69:17" pos:end="71:52"><call pos:start="69:17" pos:end="71:52"><name pos:start="69:17" pos:end="69:37">qcow2_encrypt_sectors</name><argument_list pos:start="69:38" pos:end="71:52">(<argument pos:start="69:39" pos:end="69:39"><expr pos:start="69:39" pos:end="69:39"><name pos:start="69:39" pos:end="69:39">s</name></expr></argument>, <argument pos:start="69:42" pos:end="69:51"><expr pos:start="69:42" pos:end="69:51"><name pos:start="69:42" pos:end="69:51">sector_num</name></expr></argument>, <argument pos:start="69:54" pos:end="69:56"><expr pos:start="69:54" pos:end="69:56"><name pos:start="69:54" pos:end="69:56">buf</name></expr></argument>, <argument pos:start="69:59" pos:end="69:61"><expr pos:start="69:59" pos:end="69:61"><name pos:start="69:59" pos:end="69:61">buf</name></expr></argument>, <argument pos:start="69:64" pos:end="69:64"><expr pos:start="69:64" pos:end="69:64"><name pos:start="69:64" pos:end="69:64">n</name></expr></argument>, <argument pos:start="69:67" pos:end="69:67"><expr pos:start="69:67" pos:end="69:67"><literal type="number" pos:start="69:67" pos:end="69:67">0</literal></expr></argument>,

                                <argument pos:start="71:33" pos:end="71:51"><expr pos:start="71:33" pos:end="71:51"><operator pos:start="71:33" pos:end="71:33">&amp;</operator><name pos:start="71:34" pos:end="71:51"><name pos:start="71:34" pos:end="71:34">s</name><operator pos:start="71:35" pos:end="71:36">-&gt;</operator><name pos:start="71:37" pos:end="71:51">aes_decrypt_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:24"><expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:18">nb_sectors</name> <operator pos:start="77:20" pos:end="77:21">-=</operator> <name pos:start="77:23" pos:end="77:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:24"><expr pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:18">sector_num</name> <operator pos:start="79:20" pos:end="79:21">+=</operator> <name pos:start="79:23" pos:end="79:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:23"><expr pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:11">buf</name> <operator pos:start="81:13" pos:end="81:14">+=</operator> <name pos:start="81:16" pos:end="81:16">n</name> <operator pos:start="81:18" pos:end="81:18">*</operator> <literal type="number" pos:start="81:20" pos:end="81:22">512</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <return pos:start="85:5" pos:end="85:13">return <expr pos:start="85:12" pos:end="85:12"><literal type="number" pos:start="85:12" pos:end="85:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
