<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20063.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">pcie_aer_msg</name><parameter_list pos:start="1:25" pos:end="1:63">(<parameter pos:start="1:26" pos:end="1:39"><decl pos:start="1:26" pos:end="1:39"><type pos:start="1:26" pos:end="1:39"><name pos:start="1:26" pos:end="1:34">PCIDevice</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">dev</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:62"><decl pos:start="1:42" pos:end="1:62"><type pos:start="1:42" pos:end="1:62"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:57">PCIEAERMsg</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">msg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:16">type</name></decl>;</decl_stmt>



    <while pos:start="9:5" pos:end="69:5">while <condition pos:start="9:11" pos:end="9:15">(<expr pos:start="9:12" pos:end="9:14"><name pos:start="9:12" pos:end="9:14">dev</name></expr>)</condition> <block pos:start="9:17" pos:end="69:5">{<block_content pos:start="11:9" pos:end="67:46">

        <if_stmt pos:start="11:9" pos:end="21:9"><if pos:start="11:9" pos:end="21:9">if <condition pos:start="11:12" pos:end="11:33">(<expr pos:start="11:13" pos:end="11:32"><operator pos:start="11:13" pos:end="11:13">!</operator><call pos:start="11:14" pos:end="11:32"><name pos:start="11:14" pos:end="11:27">pci_is_express</name><argument_list pos:start="11:28" pos:end="11:32">(<argument pos:start="11:29" pos:end="11:31"><expr pos:start="11:29" pos:end="11:31"><name pos:start="11:29" pos:end="11:31">dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:35" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:19">

            <comment type="block" pos:start="13:13" pos:end="13:32">/* just ignore it */</comment>

            <comment type="block" pos:start="15:13" pos:end="17:72">/* TODO: Shouldn't we set PCI_STATUS_SIG_SYSTEM_ERROR?

             * Consider e.g. a PCI bridge above a PCI Express device. */</comment>

            <return pos:start="19:13" pos:end="19:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:38"><expr pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:12">type</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:37"><name pos:start="25:16" pos:end="25:32">pcie_cap_get_type</name><argument_list pos:start="25:33" pos:end="25:37">(<argument pos:start="25:34" pos:end="25:36"><expr pos:start="25:34" pos:end="25:36"><name pos:start="25:34" pos:end="25:36">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="37:9"><if pos:start="27:9" pos:end="37:9">if <condition pos:start="27:12" pos:end="33:44">(<expr pos:start="27:13" pos:end="33:43"><operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:17">type</name> <operator pos:start="27:19" pos:end="27:20">==</operator> <name pos:start="27:22" pos:end="27:43">PCI_EXP_TYPE_ROOT_PORT</name> <operator pos:start="27:45" pos:end="27:46">||</operator>

            <name pos:start="29:13" pos:end="29:16">type</name> <operator pos:start="29:18" pos:end="29:19">==</operator> <name pos:start="29:21" pos:end="29:41">PCI_EXP_TYPE_UPSTREAM</name> <operator pos:start="29:43" pos:end="29:44">||</operator>

            <name pos:start="31:13" pos:end="31:16">type</name> <operator pos:start="31:18" pos:end="31:19">==</operator> <name pos:start="31:21" pos:end="31:43">PCI_EXP_TYPE_DOWNSTREAM</name><operator pos:start="31:44" pos:end="31:44">)</operator> <operator pos:start="31:46" pos:end="31:47">&amp;&amp;</operator>

            <operator pos:start="33:13" pos:end="33:13">!</operator><call pos:start="33:14" pos:end="33:43"><name pos:start="33:14" pos:end="33:33">pcie_aer_msg_vbridge</name><argument_list pos:start="33:34" pos:end="33:43">(<argument pos:start="33:35" pos:end="33:37"><expr pos:start="33:35" pos:end="33:37"><name pos:start="33:35" pos:end="33:37">dev</name></expr></argument>, <argument pos:start="33:40" pos:end="33:42"><expr pos:start="33:40" pos:end="33:42"><name pos:start="33:40" pos:end="33:42">msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:46" pos:end="37:9">{<block_content pos:start="35:17" pos:end="35:23">

                <return pos:start="35:17" pos:end="35:23">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:43">(<expr pos:start="39:13" pos:end="39:42"><operator pos:start="39:13" pos:end="39:13">!</operator><call pos:start="39:14" pos:end="39:42"><name pos:start="39:14" pos:end="39:32">pcie_aer_msg_alldev</name><argument_list pos:start="39:33" pos:end="39:42">(<argument pos:start="39:34" pos:end="39:36"><expr pos:start="39:34" pos:end="39:36"><name pos:start="39:34" pos:end="39:36">dev</name></expr></argument>, <argument pos:start="39:39" pos:end="39:41"><expr pos:start="39:39" pos:end="39:41"><name pos:start="39:39" pos:end="39:41">msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:45" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:19">

            <return pos:start="41:13" pos:end="41:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="65:9"><if pos:start="45:9" pos:end="65:9">if <condition pos:start="45:12" pos:end="45:43">(<expr pos:start="45:13" pos:end="45:42"><name pos:start="45:13" pos:end="45:16">type</name> <operator pos:start="45:18" pos:end="45:19">==</operator> <name pos:start="45:21" pos:end="45:42">PCI_EXP_TYPE_ROOT_PORT</name></expr>)</condition> <block pos:start="45:45" pos:end="65:9">{<block_content pos:start="47:13" pos:end="63:19">

            <expr_stmt pos:start="47:13" pos:end="47:45"><expr pos:start="47:13" pos:end="47:44"><call pos:start="47:13" pos:end="47:44"><name pos:start="47:13" pos:end="47:34">pcie_aer_msg_root_port</name><argument_list pos:start="47:35" pos:end="47:44">(<argument pos:start="47:36" pos:end="47:38"><expr pos:start="47:36" pos:end="47:38"><name pos:start="47:36" pos:end="47:38">dev</name></expr></argument>, <argument pos:start="47:41" pos:end="47:43"><expr pos:start="47:41" pos:end="47:43"><name pos:start="47:41" pos:end="47:43">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="49:13" pos:end="51:76">/* Root port can notify system itself,

               or send the error message to root complex event collector. */</comment>

            <comment type="block" pos:start="53:13" pos:end="61:15">/*

             * if root port is associated with an event collector,

             * return the root complex event collector here.

             * For now root complex event collector isn't supported.

             */</comment>

            <return pos:start="63:13" pos:end="63:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:46"><expr pos:start="67:9" pos:end="67:45"><name pos:start="67:9" pos:end="67:11">dev</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:45"><name pos:start="67:15" pos:end="67:35">pci_bridge_get_device</name><argument_list pos:start="67:36" pos:end="67:45">(<argument pos:start="67:37" pos:end="67:44"><expr pos:start="67:37" pos:end="67:44"><name pos:start="67:37" pos:end="67:44"><name pos:start="67:37" pos:end="67:39">dev</name><operator pos:start="67:40" pos:end="67:41">-&gt;</operator><name pos:start="67:42" pos:end="67:44">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
