<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25927.c" pos:tabs="8"><function pos:start="1:1" pos:end="723:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:12">QDict</name> <modifier pos:start="1:14" pos:end="1:14">*</modifier></type><name pos:start="1:15" pos:end="1:37">monitor_parse_arguments</name><parameter_list pos:start="1:38" pos:end="5:59">(<parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:45">Monitor</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">mon</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:55"><decl pos:start="3:39" pos:end="3:55"><type pos:start="3:39" pos:end="3:55"><specifier pos:start="3:39" pos:end="3:43">const</specifier> <name pos:start="3:45" pos:end="3:48">char</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier><modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:55">endp</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:58"><decl pos:start="5:39" pos:end="5:58"><type pos:start="5:39" pos:end="5:58"><specifier pos:start="5:39" pos:end="5:43">const</specifier> <name pos:start="5:45" pos:end="5:53">mon_cmd_t</name> <modifier pos:start="5:55" pos:end="5:55">*</modifier></type><name pos:start="5:56" pos:end="5:58">cmd</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="723:1">{<block_content pos:start="9:5" pos:end="721:16">

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:23">typestr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">key</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:17">p</name> <init pos:start="15:19" pos:end="15:25">= <expr pos:start="15:21" pos:end="15:25"><operator pos:start="15:21" pos:end="15:21">*</operator><name pos:start="15:22" pos:end="15:25">endp</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:18"><name pos:start="17:10" pos:end="17:12">buf</name><index pos:start="17:13" pos:end="17:18">[<expr pos:start="17:14" pos:end="17:17"><literal type="number" pos:start="17:14" pos:end="17:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">QDict</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:16">qdict</name> <init pos:start="19:18" pos:end="19:30">= <expr pos:start="19:20" pos:end="19:30"><call pos:start="19:20" pos:end="19:30"><name pos:start="19:20" pos:end="19:28">qdict_new</name><argument_list pos:start="19:29" pos:end="19:30">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:30">/* parse the parameters */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:29"><expr pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:11">typestr</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:28"><name pos:start="25:15" pos:end="25:17">cmd</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:28">args_type</name></name></expr>;</expr_stmt>

    <for pos:start="27:5" pos:end="691:5">for<control pos:start="27:8" pos:end="27:11">(<init pos:start="27:9" pos:end="27:9">;</init><condition pos:start="27:10" pos:end="27:10">;</condition><incr/>)</control> <block pos:start="27:13" pos:end="691:5">{<block_content pos:start="29:9" pos:end="689:19">

        <expr_stmt pos:start="29:9" pos:end="29:46"><expr pos:start="29:9" pos:end="29:45"><name pos:start="29:9" pos:end="29:15">typestr</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:45"><name pos:start="29:19" pos:end="29:30">key_get_info</name><argument_list pos:start="29:31" pos:end="29:45">(<argument pos:start="29:32" pos:end="29:38"><expr pos:start="29:32" pos:end="29:38"><name pos:start="29:32" pos:end="29:38">typestr</name></expr></argument>, <argument pos:start="29:41" pos:end="29:44"><expr pos:start="29:41" pos:end="29:44"><operator pos:start="29:41" pos:end="29:41">&amp;</operator><name pos:start="29:42" pos:end="29:44">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="33:18"><if pos:start="31:9" pos:end="33:18">if <condition pos:start="31:12" pos:end="31:21">(<expr pos:start="31:13" pos:end="31:20"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:20">typestr</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:18"><block_content pos:start="33:13" pos:end="33:18">

            <break pos:start="33:13" pos:end="33:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:21"><expr pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:9">c</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <operator pos:start="35:13" pos:end="35:13">*</operator><name pos:start="35:14" pos:end="35:20">typestr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:18"><expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:15">typestr</name><operator pos:start="37:16" pos:end="37:17">++</operator></expr>;</expr_stmt>

        <switch pos:start="39:9" pos:end="685:9">switch<condition pos:start="39:15" pos:end="39:17">(<expr pos:start="39:16" pos:end="39:16"><name pos:start="39:16" pos:end="39:16">c</name></expr>)</condition> <block pos:start="39:19" pos:end="685:9">{<block_content pos:start="41:9" pos:end="683:22">

        <case pos:start="41:9" pos:end="41:17">case <expr pos:start="41:14" pos:end="41:16"><literal type="char" pos:start="41:14" pos:end="41:16">'F'</literal></expr>:</case>

        <case pos:start="43:9" pos:end="43:17">case <expr pos:start="43:14" pos:end="43:16"><literal type="char" pos:start="43:14" pos:end="43:16">'B'</literal></expr>:</case>

        <case pos:start="45:9" pos:end="45:17">case <expr pos:start="45:14" pos:end="45:16"><literal type="char" pos:start="45:14" pos:end="45:16">'s'</literal></expr>:</case>

            <block pos:start="47:13" pos:end="107:13">{<block_content pos:start="49:17" pos:end="105:61">

                <decl_stmt pos:start="49:17" pos:end="49:24"><decl pos:start="49:17" pos:end="49:23"><type pos:start="49:17" pos:end="49:19"><name pos:start="49:17" pos:end="49:19">int</name></type> <name pos:start="49:21" pos:end="49:23">ret</name></decl>;</decl_stmt>



                <while pos:start="53:17" pos:end="55:24">while <condition pos:start="53:23" pos:end="53:40">(<expr pos:start="53:24" pos:end="53:39"><call pos:start="53:24" pos:end="53:39"><name pos:start="53:24" pos:end="53:35">qemu_isspace</name><argument_list pos:start="53:36" pos:end="53:39">(<argument pos:start="53:37" pos:end="53:38"><expr pos:start="53:37" pos:end="53:38"><operator pos:start="53:37" pos:end="53:37">*</operator><name pos:start="53:38" pos:end="53:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:21" pos:end="55:24"><block_content pos:start="55:21" pos:end="55:24">

                    <expr_stmt pos:start="55:21" pos:end="55:24"><expr pos:start="55:21" pos:end="55:23"><name pos:start="55:21" pos:end="55:21">p</name><operator pos:start="55:22" pos:end="55:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="57:17" pos:end="69:17"><if pos:start="57:17" pos:end="69:17">if <condition pos:start="57:20" pos:end="57:36">(<expr pos:start="57:21" pos:end="57:35"><operator pos:start="57:21" pos:end="57:21">*</operator><name pos:start="57:22" pos:end="57:28">typestr</name> <operator pos:start="57:30" pos:end="57:31">==</operator> <literal type="char" pos:start="57:33" pos:end="57:35">'?'</literal></expr>)</condition> <block pos:start="57:38" pos:end="69:17">{<block_content pos:start="59:21" pos:end="67:21">

                    <expr_stmt pos:start="59:21" pos:end="59:30"><expr pos:start="59:21" pos:end="59:29"><name pos:start="59:21" pos:end="59:27">typestr</name><operator pos:start="59:28" pos:end="59:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="61:21" pos:end="67:21"><if pos:start="61:21" pos:end="67:21">if <condition pos:start="61:24" pos:end="61:35">(<expr pos:start="61:25" pos:end="61:34"><operator pos:start="61:25" pos:end="61:25">*</operator><name pos:start="61:26" pos:end="61:26">p</name> <operator pos:start="61:28" pos:end="61:29">==</operator> <literal type="char" pos:start="61:31" pos:end="61:34">'\0'</literal></expr>)</condition> <block pos:start="61:37" pos:end="67:21">{<block_content pos:start="65:25" pos:end="65:30">

                        <comment type="block" pos:start="63:25" pos:end="63:63">/* no optional string: NULL argument */</comment>

                        <break pos:start="65:25" pos:end="65:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:52"><expr pos:start="71:17" pos:end="71:51"><name pos:start="71:17" pos:end="71:19">ret</name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:51"><name pos:start="71:23" pos:end="71:29">get_str</name><argument_list pos:start="71:30" pos:end="71:51">(<argument pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><name pos:start="71:31" pos:end="71:33">buf</name></expr></argument>, <argument pos:start="71:36" pos:end="71:46"><expr pos:start="71:36" pos:end="71:46"><sizeof pos:start="71:36" pos:end="71:46">sizeof<argument_list pos:start="71:42" pos:end="71:46">(<argument pos:start="71:43" pos:end="71:45"><expr pos:start="71:43" pos:end="71:45"><name pos:start="71:43" pos:end="71:45">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="71:49" pos:end="71:50"><expr pos:start="71:49" pos:end="71:50"><operator pos:start="71:49" pos:end="71:49">&amp;</operator><name pos:start="71:50" pos:end="71:50">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="73:17" pos:end="103:17"><if pos:start="73:17" pos:end="103:17">if <condition pos:start="73:20" pos:end="73:28">(<expr pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:23">ret</name> <operator pos:start="73:25" pos:end="73:25">&lt;</operator> <literal type="number" pos:start="73:27" pos:end="73:27">0</literal></expr>)</condition> <block pos:start="73:30" pos:end="103:17">{<block_content pos:start="75:21" pos:end="101:30">

                    <switch pos:start="75:21" pos:end="99:21">switch<condition pos:start="75:27" pos:end="75:29">(<expr pos:start="75:28" pos:end="75:28"><name pos:start="75:28" pos:end="75:28">c</name></expr>)</condition> <block pos:start="75:31" pos:end="99:21">{<block_content pos:start="77:21" pos:end="97:30">

                    <case pos:start="77:21" pos:end="77:29">case <expr pos:start="77:26" pos:end="77:28"><literal type="char" pos:start="77:26" pos:end="77:28">'F'</literal></expr>:</case>

                        <expr_stmt pos:start="79:25" pos:end="81:50"><expr pos:start="79:25" pos:end="81:49"><call pos:start="79:25" pos:end="81:49"><name pos:start="79:25" pos:end="79:38">monitor_printf</name><argument_list pos:start="79:39" pos:end="81:49">(<argument pos:start="79:40" pos:end="79:42"><expr pos:start="79:40" pos:end="79:42"><name pos:start="79:40" pos:end="79:42">mon</name></expr></argument>, <argument pos:start="79:45" pos:end="79:69"><expr pos:start="79:45" pos:end="79:69"><literal type="string" pos:start="79:45" pos:end="79:69">"%s: filename expected\n"</literal></expr></argument>,

                                       <argument pos:start="81:40" pos:end="81:48"><expr pos:start="81:40" pos:end="81:48"><name pos:start="81:40" pos:end="81:48"><name pos:start="81:40" pos:end="81:42">cmd</name><operator pos:start="81:43" pos:end="81:44">-&gt;</operator><name pos:start="81:45" pos:end="81:48">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="83:25" pos:end="83:30">break;</break>

                    <case pos:start="85:21" pos:end="85:29">case <expr pos:start="85:26" pos:end="85:28"><literal type="char" pos:start="85:26" pos:end="85:28">'B'</literal></expr>:</case>

                        <expr_stmt pos:start="87:25" pos:end="89:50"><expr pos:start="87:25" pos:end="89:49"><call pos:start="87:25" pos:end="89:49"><name pos:start="87:25" pos:end="87:38">monitor_printf</name><argument_list pos:start="87:39" pos:end="89:49">(<argument pos:start="87:40" pos:end="87:42"><expr pos:start="87:40" pos:end="87:42"><name pos:start="87:40" pos:end="87:42">mon</name></expr></argument>, <argument pos:start="87:45" pos:end="87:78"><expr pos:start="87:45" pos:end="87:78"><literal type="string" pos:start="87:45" pos:end="87:78">"%s: block device name expected\n"</literal></expr></argument>,

                                       <argument pos:start="89:40" pos:end="89:48"><expr pos:start="89:40" pos:end="89:48"><name pos:start="89:40" pos:end="89:48"><name pos:start="89:40" pos:end="89:42">cmd</name><operator pos:start="89:43" pos:end="89:44">-&gt;</operator><name pos:start="89:45" pos:end="89:48">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="91:25" pos:end="91:30">break;</break>

                    <default pos:start="93:21" pos:end="93:28">default:</default>

                        <expr_stmt pos:start="95:25" pos:end="95:80"><expr pos:start="95:25" pos:end="95:79"><call pos:start="95:25" pos:end="95:79"><name pos:start="95:25" pos:end="95:38">monitor_printf</name><argument_list pos:start="95:39" pos:end="95:79">(<argument pos:start="95:40" pos:end="95:42"><expr pos:start="95:40" pos:end="95:42"><name pos:start="95:40" pos:end="95:42">mon</name></expr></argument>, <argument pos:start="95:45" pos:end="95:67"><expr pos:start="95:45" pos:end="95:67"><literal type="string" pos:start="95:45" pos:end="95:67">"%s: string expected\n"</literal></expr></argument>, <argument pos:start="95:70" pos:end="95:78"><expr pos:start="95:70" pos:end="95:78"><name pos:start="95:70" pos:end="95:78"><name pos:start="95:70" pos:end="95:72">cmd</name><operator pos:start="95:73" pos:end="95:74">-&gt;</operator><name pos:start="95:75" pos:end="95:78">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="97:25" pos:end="97:30">break;</break>

                    </block_content>}</block></switch>

                    <goto pos:start="101:21" pos:end="101:30">goto <name pos:start="101:26" pos:end="101:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:61"><expr pos:start="105:17" pos:end="105:60"><call pos:start="105:17" pos:end="105:60"><name pos:start="105:17" pos:end="105:25">qdict_put</name><argument_list pos:start="105:26" pos:end="105:60">(<argument pos:start="105:27" pos:end="105:31"><expr pos:start="105:27" pos:end="105:31"><name pos:start="105:27" pos:end="105:31">qdict</name></expr></argument>, <argument pos:start="105:34" pos:end="105:36"><expr pos:start="105:34" pos:end="105:36"><name pos:start="105:34" pos:end="105:36">key</name></expr></argument>, <argument pos:start="105:39" pos:end="105:59"><expr pos:start="105:39" pos:end="105:59"><call pos:start="105:39" pos:end="105:59"><name pos:start="105:39" pos:end="105:54">qstring_from_str</name><argument_list pos:start="105:55" pos:end="105:59">(<argument pos:start="105:56" pos:end="105:58"><expr pos:start="105:56" pos:end="105:58"><name pos:start="105:56" pos:end="105:58">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        <case pos:start="111:9" pos:end="111:17">case <expr pos:start="111:14" pos:end="111:16"><literal type="char" pos:start="111:14" pos:end="111:16">'O'</literal></expr>:</case>

            <block pos:start="113:13" pos:end="157:13">{<block_content pos:start="115:17" pos:end="155:36">

                <decl_stmt pos:start="115:17" pos:end="115:40"><decl pos:start="115:17" pos:end="115:39"><type pos:start="115:17" pos:end="115:30"><name pos:start="115:17" pos:end="115:28">QemuOptsList</name> <modifier pos:start="115:30" pos:end="115:30">*</modifier></type><name pos:start="115:31" pos:end="115:39">opts_list</name></decl>;</decl_stmt>

                <decl_stmt pos:start="117:17" pos:end="117:31"><decl pos:start="117:17" pos:end="117:30"><type pos:start="117:17" pos:end="117:26"><name pos:start="117:17" pos:end="117:24">QemuOpts</name> <modifier pos:start="117:26" pos:end="117:26">*</modifier></type><name pos:start="117:27" pos:end="117:30">opts</name></decl>;</decl_stmt>



                <expr_stmt pos:start="121:17" pos:end="121:48"><expr pos:start="121:17" pos:end="121:47"><name pos:start="121:17" pos:end="121:25">opts_list</name> <operator pos:start="121:27" pos:end="121:27">=</operator> <call pos:start="121:29" pos:end="121:47"><name pos:start="121:29" pos:end="121:42">qemu_find_opts</name><argument_list pos:start="121:43" pos:end="121:47">(<argument pos:start="121:44" pos:end="121:46"><expr pos:start="121:44" pos:end="121:46"><name pos:start="121:44" pos:end="121:46">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="123:17" pos:end="127:17"><if pos:start="123:17" pos:end="127:17">if <condition pos:start="123:20" pos:end="123:56">(<expr pos:start="123:21" pos:end="123:55"><operator pos:start="123:21" pos:end="123:21">!</operator><name pos:start="123:22" pos:end="123:30">opts_list</name> <operator pos:start="123:32" pos:end="123:33">||</operator> <name pos:start="123:35" pos:end="123:55"><name pos:start="123:35" pos:end="123:43">opts_list</name><operator pos:start="123:44" pos:end="123:45">-&gt;</operator><name pos:start="123:46" pos:end="123:49">desc</name><operator pos:start="123:50" pos:end="123:51">-&gt;</operator><name pos:start="123:52" pos:end="123:55">name</name></name></expr>)</condition> <block pos:start="123:58" pos:end="127:17">{<block_content pos:start="125:21" pos:end="125:34">

                    <goto pos:start="125:21" pos:end="125:34">goto <name pos:start="125:26" pos:end="125:33">bad_type</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <while pos:start="129:17" pos:end="133:17">while <condition pos:start="129:23" pos:end="129:40">(<expr pos:start="129:24" pos:end="129:39"><call pos:start="129:24" pos:end="129:39"><name pos:start="129:24" pos:end="129:35">qemu_isspace</name><argument_list pos:start="129:36" pos:end="129:39">(<argument pos:start="129:37" pos:end="129:38"><expr pos:start="129:37" pos:end="129:38"><operator pos:start="129:37" pos:end="129:37">*</operator><name pos:start="129:38" pos:end="129:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:42" pos:end="133:17">{<block_content pos:start="131:21" pos:end="131:24">

                    <expr_stmt pos:start="131:21" pos:end="131:24"><expr pos:start="131:21" pos:end="131:23"><name pos:start="131:21" pos:end="131:21">p</name><operator pos:start="131:22" pos:end="131:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="135:17" pos:end="137:26"><if pos:start="135:17" pos:end="137:26">if <condition pos:start="135:20" pos:end="135:24">(<expr pos:start="135:21" pos:end="135:23"><operator pos:start="135:21" pos:end="135:21">!</operator><operator pos:start="135:22" pos:end="135:22">*</operator><name pos:start="135:23" pos:end="135:23">p</name></expr>)</condition><block type="pseudo" pos:start="137:21" pos:end="137:26"><block_content pos:start="137:21" pos:end="137:26">

                    <break pos:start="137:21" pos:end="137:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="139:17" pos:end="143:17"><if pos:start="139:17" pos:end="143:17">if <condition pos:start="139:20" pos:end="139:54">(<expr pos:start="139:21" pos:end="139:53"><call pos:start="139:21" pos:end="139:49"><name pos:start="139:21" pos:end="139:27">get_str</name><argument_list pos:start="139:28" pos:end="139:49">(<argument pos:start="139:29" pos:end="139:31"><expr pos:start="139:29" pos:end="139:31"><name pos:start="139:29" pos:end="139:31">buf</name></expr></argument>, <argument pos:start="139:34" pos:end="139:44"><expr pos:start="139:34" pos:end="139:44"><sizeof pos:start="139:34" pos:end="139:44">sizeof<argument_list pos:start="139:40" pos:end="139:44">(<argument pos:start="139:41" pos:end="139:43"><expr pos:start="139:41" pos:end="139:43"><name pos:start="139:41" pos:end="139:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="139:47" pos:end="139:48"><expr pos:start="139:47" pos:end="139:48"><operator pos:start="139:47" pos:end="139:47">&amp;</operator><name pos:start="139:48" pos:end="139:48">p</name></expr></argument>)</argument_list></call> <operator pos:start="139:51" pos:end="139:51">&lt;</operator> <literal type="number" pos:start="139:53" pos:end="139:53">0</literal></expr>)</condition> <block pos:start="139:56" pos:end="143:17">{<block_content pos:start="141:21" pos:end="141:30">

                    <goto pos:start="141:21" pos:end="141:30">goto <name pos:start="141:26" pos:end="141:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:69"><expr pos:start="145:17" pos:end="145:68"><name pos:start="145:17" pos:end="145:20">opts</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <call pos:start="145:24" pos:end="145:68"><name pos:start="145:24" pos:end="145:46">qemu_opts_parse_noisily</name><argument_list pos:start="145:47" pos:end="145:68">(<argument pos:start="145:48" pos:end="145:56"><expr pos:start="145:48" pos:end="145:56"><name pos:start="145:48" pos:end="145:56">opts_list</name></expr></argument>, <argument pos:start="145:59" pos:end="145:61"><expr pos:start="145:59" pos:end="145:61"><name pos:start="145:59" pos:end="145:61">buf</name></expr></argument>, <argument pos:start="145:64" pos:end="145:67"><expr pos:start="145:64" pos:end="145:67"><name pos:start="145:64" pos:end="145:67">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="147:17" pos:end="151:17"><if pos:start="147:17" pos:end="151:17">if <condition pos:start="147:20" pos:end="147:26">(<expr pos:start="147:21" pos:end="147:25"><operator pos:start="147:21" pos:end="147:21">!</operator><name pos:start="147:22" pos:end="147:25">opts</name></expr>)</condition> <block pos:start="147:28" pos:end="151:17">{<block_content pos:start="149:21" pos:end="149:30">

                    <goto pos:start="149:21" pos:end="149:30">goto <name pos:start="149:26" pos:end="149:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:48"><expr pos:start="153:17" pos:end="153:47"><call pos:start="153:17" pos:end="153:47"><name pos:start="153:17" pos:end="153:34">qemu_opts_to_qdict</name><argument_list pos:start="153:35" pos:end="153:47">(<argument pos:start="153:36" pos:end="153:39"><expr pos:start="153:36" pos:end="153:39"><name pos:start="153:36" pos:end="153:39">opts</name></expr></argument>, <argument pos:start="153:42" pos:end="153:46"><expr pos:start="153:42" pos:end="153:46"><name pos:start="153:42" pos:end="153:46">qdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:36"><expr pos:start="155:17" pos:end="155:35"><call pos:start="155:17" pos:end="155:35"><name pos:start="155:17" pos:end="155:29">qemu_opts_del</name><argument_list pos:start="155:30" pos:end="155:35">(<argument pos:start="155:31" pos:end="155:34"><expr pos:start="155:31" pos:end="155:34"><name pos:start="155:31" pos:end="155:34">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="159:13" pos:end="159:18">break;</break>

        <case pos:start="161:9" pos:end="161:17">case <expr pos:start="161:14" pos:end="161:16"><literal type="char" pos:start="161:14" pos:end="161:16">'/'</literal></expr>:</case>

            <block pos:start="163:13" pos:end="315:13">{<block_content pos:start="165:17" pos:end="313:62">

                <decl_stmt pos:start="165:17" pos:end="165:40"><decl pos:start="165:17" pos:end="165:25"><type pos:start="165:17" pos:end="165:19"><name pos:start="165:17" pos:end="165:19">int</name></type> <name pos:start="165:21" pos:end="165:25">count</name></decl>, <decl pos:start="165:28" pos:end="165:33"><type ref="prev" pos:start="165:17" pos:end="165:19"/><name pos:start="165:28" pos:end="165:33">format</name></decl>, <decl pos:start="165:36" pos:end="165:39"><type ref="prev" pos:start="165:17" pos:end="165:19"/><name pos:start="165:36" pos:end="165:39">size</name></decl>;</decl_stmt>



                <while pos:start="169:17" pos:end="171:24">while <condition pos:start="169:23" pos:end="169:40">(<expr pos:start="169:24" pos:end="169:39"><call pos:start="169:24" pos:end="169:39"><name pos:start="169:24" pos:end="169:35">qemu_isspace</name><argument_list pos:start="169:36" pos:end="169:39">(<argument pos:start="169:37" pos:end="169:38"><expr pos:start="169:37" pos:end="169:38"><operator pos:start="169:37" pos:end="169:37">*</operator><name pos:start="169:38" pos:end="169:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="171:21" pos:end="171:24"><block_content pos:start="171:21" pos:end="171:24">

                    <expr_stmt pos:start="171:21" pos:end="171:24"><expr pos:start="171:21" pos:end="171:23"><name pos:start="171:21" pos:end="171:21">p</name><operator pos:start="171:22" pos:end="171:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="173:17" pos:end="307:17"><if pos:start="173:17" pos:end="291:17">if <condition pos:start="173:20" pos:end="173:30">(<expr pos:start="173:21" pos:end="173:29"><operator pos:start="173:21" pos:end="173:21">*</operator><name pos:start="173:22" pos:end="173:22">p</name> <operator pos:start="173:24" pos:end="173:25">==</operator> <literal type="char" pos:start="173:27" pos:end="173:29">'/'</literal></expr>)</condition> <block pos:start="173:32" pos:end="291:17">{<block_content pos:start="177:21" pos:end="289:48">

                    <comment type="block" pos:start="175:21" pos:end="175:38">/* format found */</comment>

                    <expr_stmt pos:start="177:21" pos:end="177:24"><expr pos:start="177:21" pos:end="177:23"><name pos:start="177:21" pos:end="177:21">p</name><operator pos:start="177:22" pos:end="177:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="179:21" pos:end="179:30"><expr pos:start="179:21" pos:end="179:29"><name pos:start="179:21" pos:end="179:25">count</name> <operator pos:start="179:27" pos:end="179:27">=</operator> <literal type="number" pos:start="179:29" pos:end="179:29">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="181:21" pos:end="193:21"><if pos:start="181:21" pos:end="193:21">if <condition pos:start="181:24" pos:end="181:41">(<expr pos:start="181:25" pos:end="181:40"><call pos:start="181:25" pos:end="181:40"><name pos:start="181:25" pos:end="181:36">qemu_isdigit</name><argument_list pos:start="181:37" pos:end="181:40">(<argument pos:start="181:38" pos:end="181:39"><expr pos:start="181:38" pos:end="181:39"><operator pos:start="181:38" pos:end="181:38">*</operator><name pos:start="181:39" pos:end="181:39">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:43" pos:end="193:21">{<block_content pos:start="183:25" pos:end="191:25">

                        <expr_stmt pos:start="183:25" pos:end="183:34"><expr pos:start="183:25" pos:end="183:33"><name pos:start="183:25" pos:end="183:29">count</name> <operator pos:start="183:31" pos:end="183:31">=</operator> <literal type="number" pos:start="183:33" pos:end="183:33">0</literal></expr>;</expr_stmt>

                        <while pos:start="185:25" pos:end="191:25">while <condition pos:start="185:31" pos:end="185:48">(<expr pos:start="185:32" pos:end="185:47"><call pos:start="185:32" pos:end="185:47"><name pos:start="185:32" pos:end="185:43">qemu_isdigit</name><argument_list pos:start="185:44" pos:end="185:47">(<argument pos:start="185:45" pos:end="185:46"><expr pos:start="185:45" pos:end="185:46"><operator pos:start="185:45" pos:end="185:45">*</operator><name pos:start="185:46" pos:end="185:46">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:50" pos:end="191:25">{<block_content pos:start="187:29" pos:end="189:32">

                            <expr_stmt pos:start="187:29" pos:end="187:60"><expr pos:start="187:29" pos:end="187:59"><name pos:start="187:29" pos:end="187:33">count</name> <operator pos:start="187:35" pos:end="187:35">=</operator> <name pos:start="187:37" pos:end="187:41">count</name> <operator pos:start="187:43" pos:end="187:43">*</operator> <literal type="number" pos:start="187:45" pos:end="187:48">10</literal> <operator pos:start="187:48" pos:end="187:48">+</operator> <operator pos:start="187:50" pos:end="187:50">(</operator><operator pos:start="187:51" pos:end="187:51">*</operator><name pos:start="187:52" pos:end="187:52">p</name> <operator pos:start="187:54" pos:end="187:54">-</operator> <literal type="char" pos:start="187:56" pos:end="187:58">'0'</literal><operator pos:start="187:59" pos:end="187:59">)</operator></expr>;</expr_stmt>

                            <expr_stmt pos:start="189:29" pos:end="189:32"><expr pos:start="189:29" pos:end="189:31"><name pos:start="189:29" pos:end="189:29">p</name><operator pos:start="189:30" pos:end="189:31">++</operator></expr>;</expr_stmt>

                        </block_content>}</block></while>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:30"><expr pos:start="195:21" pos:end="195:29"><name pos:start="195:21" pos:end="195:24">size</name> <operator pos:start="195:26" pos:end="195:26">=</operator> <operator pos:start="195:28" pos:end="195:28">-</operator><literal type="number" pos:start="195:29" pos:end="195:29">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:32"><expr pos:start="197:21" pos:end="197:31"><name pos:start="197:21" pos:end="197:26">format</name> <operator pos:start="197:28" pos:end="197:28">=</operator> <operator pos:start="197:30" pos:end="197:30">-</operator><literal type="number" pos:start="197:31" pos:end="197:31">1</literal></expr>;</expr_stmt>

                    <for pos:start="199:21" pos:end="259:21">for<control pos:start="199:24" pos:end="199:27">(<init pos:start="199:25" pos:end="199:25">;</init><condition pos:start="199:26" pos:end="199:26">;</condition><incr/>)</control> <block pos:start="199:29" pos:end="259:21">{<block_content pos:start="201:25" pos:end="257:25">

                        <switch pos:start="201:25" pos:end="257:25">switch<condition pos:start="201:31" pos:end="201:34">(<expr pos:start="201:32" pos:end="201:33"><operator pos:start="201:32" pos:end="201:32">*</operator><name pos:start="201:33" pos:end="201:33">p</name></expr>)</condition> <block pos:start="201:36" pos:end="257:25">{<block_content pos:start="203:25" pos:end="255:38">

                        <case pos:start="203:25" pos:end="203:33">case <expr pos:start="203:30" pos:end="203:32"><literal type="char" pos:start="203:30" pos:end="203:32">'o'</literal></expr>:</case>

                        <case pos:start="205:25" pos:end="205:33">case <expr pos:start="205:30" pos:end="205:32"><literal type="char" pos:start="205:30" pos:end="205:32">'d'</literal></expr>:</case>

                        <case pos:start="207:25" pos:end="207:33">case <expr pos:start="207:30" pos:end="207:32"><literal type="char" pos:start="207:30" pos:end="207:32">'u'</literal></expr>:</case>

                        <case pos:start="209:25" pos:end="209:33">case <expr pos:start="209:30" pos:end="209:32"><literal type="char" pos:start="209:30" pos:end="209:32">'x'</literal></expr>:</case>

                        <case pos:start="211:25" pos:end="211:33">case <expr pos:start="211:30" pos:end="211:32"><literal type="char" pos:start="211:30" pos:end="211:32">'i'</literal></expr>:</case>

                        <case pos:start="213:25" pos:end="213:33">case <expr pos:start="213:30" pos:end="213:32"><literal type="char" pos:start="213:30" pos:end="213:32">'c'</literal></expr>:</case>

                            <expr_stmt pos:start="215:29" pos:end="215:42"><expr pos:start="215:29" pos:end="215:41"><name pos:start="215:29" pos:end="215:34">format</name> <operator pos:start="215:36" pos:end="215:36">=</operator> <operator pos:start="215:38" pos:end="215:38">*</operator><name pos:start="215:39" pos:end="215:39">p</name><operator pos:start="215:40" pos:end="215:41">++</operator></expr>;</expr_stmt>

                            <break pos:start="217:29" pos:end="217:34">break;</break>

                        <case pos:start="219:25" pos:end="219:33">case <expr pos:start="219:30" pos:end="219:32"><literal type="char" pos:start="219:30" pos:end="219:32">'b'</literal></expr>:</case>

                            <expr_stmt pos:start="221:29" pos:end="221:37"><expr pos:start="221:29" pos:end="221:36"><name pos:start="221:29" pos:end="221:32">size</name> <operator pos:start="221:34" pos:end="221:34">=</operator> <literal type="number" pos:start="221:36" pos:end="221:36">1</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="223:29" pos:end="223:32"><expr pos:start="223:29" pos:end="223:31"><name pos:start="223:29" pos:end="223:29">p</name><operator pos:start="223:30" pos:end="223:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="225:29" pos:end="225:34">break;</break>

                        <case pos:start="227:25" pos:end="227:33">case <expr pos:start="227:30" pos:end="227:32"><literal type="char" pos:start="227:30" pos:end="227:32">'h'</literal></expr>:</case>

                            <expr_stmt pos:start="229:29" pos:end="229:37"><expr pos:start="229:29" pos:end="229:36"><name pos:start="229:29" pos:end="229:32">size</name> <operator pos:start="229:34" pos:end="229:34">=</operator> <literal type="number" pos:start="229:36" pos:end="229:36">2</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="231:29" pos:end="231:32"><expr pos:start="231:29" pos:end="231:31"><name pos:start="231:29" pos:end="231:29">p</name><operator pos:start="231:30" pos:end="231:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="233:29" pos:end="233:34">break;</break>

                        <case pos:start="235:25" pos:end="235:33">case <expr pos:start="235:30" pos:end="235:32"><literal type="char" pos:start="235:30" pos:end="235:32">'w'</literal></expr>:</case>

                            <expr_stmt pos:start="237:29" pos:end="237:37"><expr pos:start="237:29" pos:end="237:36"><name pos:start="237:29" pos:end="237:32">size</name> <operator pos:start="237:34" pos:end="237:34">=</operator> <literal type="number" pos:start="237:36" pos:end="237:36">4</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="239:29" pos:end="239:32"><expr pos:start="239:29" pos:end="239:31"><name pos:start="239:29" pos:end="239:29">p</name><operator pos:start="239:30" pos:end="239:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="241:29" pos:end="241:34">break;</break>

                        <case pos:start="243:25" pos:end="243:33">case <expr pos:start="243:30" pos:end="243:32"><literal type="char" pos:start="243:30" pos:end="243:32">'g'</literal></expr>:</case>

                        <case pos:start="245:25" pos:end="245:33">case <expr pos:start="245:30" pos:end="245:32"><literal type="char" pos:start="245:30" pos:end="245:32">'L'</literal></expr>:</case>

                            <expr_stmt pos:start="247:29" pos:end="247:37"><expr pos:start="247:29" pos:end="247:36"><name pos:start="247:29" pos:end="247:32">size</name> <operator pos:start="247:34" pos:end="247:34">=</operator> <literal type="number" pos:start="247:36" pos:end="247:36">8</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="249:29" pos:end="249:32"><expr pos:start="249:29" pos:end="249:31"><name pos:start="249:29" pos:end="249:29">p</name><operator pos:start="249:30" pos:end="249:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="251:29" pos:end="251:34">break;</break>

                        <default pos:start="253:25" pos:end="253:32">default:</default>

                            <goto pos:start="255:29" pos:end="255:38">goto <name pos:start="255:34" pos:end="255:37">next</name>;</goto>

                        </block_content>}</block></switch>

                    </block_content>}</block></for>

                <label pos:start="261:17" pos:end="261:21"><name pos:start="261:17" pos:end="261:20">next</name>:</label>

                    <if_stmt pos:start="263:21" pos:end="271:21"><if pos:start="263:21" pos:end="271:21">if <condition pos:start="263:24" pos:end="263:56">(<expr pos:start="263:25" pos:end="263:55"><operator pos:start="263:25" pos:end="263:25">*</operator><name pos:start="263:26" pos:end="263:26">p</name> <operator pos:start="263:28" pos:end="263:29">!=</operator> <literal type="char" pos:start="263:31" pos:end="263:34">'\0'</literal> <operator pos:start="263:36" pos:end="263:37">&amp;&amp;</operator> <operator pos:start="263:39" pos:end="263:39">!</operator><call pos:start="263:40" pos:end="263:55"><name pos:start="263:40" pos:end="263:51">qemu_isspace</name><argument_list pos:start="263:52" pos:end="263:55">(<argument pos:start="263:53" pos:end="263:54"><expr pos:start="263:53" pos:end="263:54"><operator pos:start="263:53" pos:end="263:53">*</operator><name pos:start="263:54" pos:end="263:54">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="263:58" pos:end="271:21">{<block_content pos:start="265:25" pos:end="269:34">

                        <expr_stmt pos:start="265:25" pos:end="267:43"><expr pos:start="265:25" pos:end="267:42"><call pos:start="265:25" pos:end="267:42"><name pos:start="265:25" pos:end="265:38">monitor_printf</name><argument_list pos:start="265:39" pos:end="267:42">(<argument pos:start="265:40" pos:end="265:42"><expr pos:start="265:40" pos:end="265:42"><name pos:start="265:40" pos:end="265:42">mon</name></expr></argument>, <argument pos:start="265:45" pos:end="265:76"><expr pos:start="265:45" pos:end="265:76"><literal type="string" pos:start="265:45" pos:end="265:76">"invalid char in format: '%c'\n"</literal></expr></argument>,

                                       <argument pos:start="267:40" pos:end="267:41"><expr pos:start="267:40" pos:end="267:41"><operator pos:start="267:40" pos:end="267:40">*</operator><name pos:start="267:41" pos:end="267:41">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="269:25" pos:end="269:34">goto <name pos:start="269:30" pos:end="269:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="273:21" pos:end="275:52"><if pos:start="273:21" pos:end="275:52">if <condition pos:start="273:24" pos:end="273:35">(<expr pos:start="273:25" pos:end="273:34"><name pos:start="273:25" pos:end="273:30">format</name> <operator pos:start="273:32" pos:end="273:32">&lt;</operator> <literal type="number" pos:start="273:34" pos:end="273:34">0</literal></expr>)</condition><block type="pseudo" pos:start="275:25" pos:end="275:52"><block_content pos:start="275:25" pos:end="275:52">

                        <expr_stmt pos:start="275:25" pos:end="275:52"><expr pos:start="275:25" pos:end="275:51"><name pos:start="275:25" pos:end="275:30">format</name> <operator pos:start="275:32" pos:end="275:32">=</operator> <name pos:start="275:34" pos:end="275:51">default_fmt_format</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="277:21" pos:end="287:21"><if pos:start="277:21" pos:end="287:21">if <condition pos:start="277:24" pos:end="277:38">(<expr pos:start="277:25" pos:end="277:37"><name pos:start="277:25" pos:end="277:30">format</name> <operator pos:start="277:32" pos:end="277:33">!=</operator> <literal type="char" pos:start="277:35" pos:end="277:37">'i'</literal></expr>)</condition> <block pos:start="277:40" pos:end="287:21">{<block_content pos:start="281:25" pos:end="285:48">

                        <comment type="block" pos:start="279:25" pos:end="279:77">/* for 'i', not specifying a size gives -1 as size */</comment>

                        <if_stmt pos:start="281:25" pos:end="283:52"><if pos:start="281:25" pos:end="283:52">if <condition pos:start="281:28" pos:end="281:37">(<expr pos:start="281:29" pos:end="281:36"><name pos:start="281:29" pos:end="281:32">size</name> <operator pos:start="281:34" pos:end="281:34">&lt;</operator> <literal type="number" pos:start="281:36" pos:end="281:36">0</literal></expr>)</condition><block type="pseudo" pos:start="283:29" pos:end="283:52"><block_content pos:start="283:29" pos:end="283:52">

                            <expr_stmt pos:start="283:29" pos:end="283:52"><expr pos:start="283:29" pos:end="283:51"><name pos:start="283:29" pos:end="283:32">size</name> <operator pos:start="283:34" pos:end="283:34">=</operator> <name pos:start="283:36" pos:end="283:51">default_fmt_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="285:25" pos:end="285:48"><expr pos:start="285:25" pos:end="285:47"><name pos:start="285:25" pos:end="285:40">default_fmt_size</name> <operator pos:start="285:42" pos:end="285:42">=</operator> <name pos:start="285:44" pos:end="285:47">size</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="289:21" pos:end="289:48"><expr pos:start="289:21" pos:end="289:47"><name pos:start="289:21" pos:end="289:38">default_fmt_format</name> <operator pos:start="289:40" pos:end="289:40">=</operator> <name pos:start="289:42" pos:end="289:47">format</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="291:19" pos:end="307:17">else <block pos:start="291:24" pos:end="307:17">{<block_content pos:start="293:21" pos:end="305:21">

                    <expr_stmt pos:start="293:21" pos:end="293:30"><expr pos:start="293:21" pos:end="293:29"><name pos:start="293:21" pos:end="293:25">count</name> <operator pos:start="293:27" pos:end="293:27">=</operator> <literal type="number" pos:start="293:29" pos:end="293:29">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="295:21" pos:end="295:48"><expr pos:start="295:21" pos:end="295:47"><name pos:start="295:21" pos:end="295:26">format</name> <operator pos:start="295:28" pos:end="295:28">=</operator> <name pos:start="295:30" pos:end="295:47">default_fmt_format</name></expr>;</expr_stmt>

                    <if_stmt pos:start="297:21" pos:end="305:21"><if pos:start="297:21" pos:end="301:21">if <condition pos:start="297:24" pos:end="297:38">(<expr pos:start="297:25" pos:end="297:37"><name pos:start="297:25" pos:end="297:30">format</name> <operator pos:start="297:32" pos:end="297:33">!=</operator> <literal type="char" pos:start="297:35" pos:end="297:37">'i'</literal></expr>)</condition> <block pos:start="297:40" pos:end="301:21">{<block_content pos:start="299:25" pos:end="299:48">

                        <expr_stmt pos:start="299:25" pos:end="299:48"><expr pos:start="299:25" pos:end="299:47"><name pos:start="299:25" pos:end="299:28">size</name> <operator pos:start="299:30" pos:end="299:30">=</operator> <name pos:start="299:32" pos:end="299:47">default_fmt_size</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="301:23" pos:end="305:21">else <block pos:start="301:28" pos:end="305:21">{<block_content pos:start="303:25" pos:end="303:34">

                        <expr_stmt pos:start="303:25" pos:end="303:34"><expr pos:start="303:25" pos:end="303:33"><name pos:start="303:25" pos:end="303:28">size</name> <operator pos:start="303:30" pos:end="303:30">=</operator> <operator pos:start="303:32" pos:end="303:32">-</operator><literal type="number" pos:start="303:33" pos:end="303:33">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="309:17" pos:end="309:64"><expr pos:start="309:17" pos:end="309:63"><call pos:start="309:17" pos:end="309:63"><name pos:start="309:17" pos:end="309:25">qdict_put</name><argument_list pos:start="309:26" pos:end="309:63">(<argument pos:start="309:27" pos:end="309:31"><expr pos:start="309:27" pos:end="309:31"><name pos:start="309:27" pos:end="309:31">qdict</name></expr></argument>, <argument pos:start="309:34" pos:end="309:40"><expr pos:start="309:34" pos:end="309:40"><literal type="string" pos:start="309:34" pos:end="309:40">"count"</literal></expr></argument>, <argument pos:start="309:43" pos:end="309:62"><expr pos:start="309:43" pos:end="309:62"><call pos:start="309:43" pos:end="309:62"><name pos:start="309:43" pos:end="309:55">qint_from_int</name><argument_list pos:start="309:56" pos:end="309:62">(<argument pos:start="309:57" pos:end="309:61"><expr pos:start="309:57" pos:end="309:61"><name pos:start="309:57" pos:end="309:61">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="311:17" pos:end="311:66"><expr pos:start="311:17" pos:end="311:65"><call pos:start="311:17" pos:end="311:65"><name pos:start="311:17" pos:end="311:25">qdict_put</name><argument_list pos:start="311:26" pos:end="311:65">(<argument pos:start="311:27" pos:end="311:31"><expr pos:start="311:27" pos:end="311:31"><name pos:start="311:27" pos:end="311:31">qdict</name></expr></argument>, <argument pos:start="311:34" pos:end="311:41"><expr pos:start="311:34" pos:end="311:41"><literal type="string" pos:start="311:34" pos:end="311:41">"format"</literal></expr></argument>, <argument pos:start="311:44" pos:end="311:64"><expr pos:start="311:44" pos:end="311:64"><call pos:start="311:44" pos:end="311:64"><name pos:start="311:44" pos:end="311:56">qint_from_int</name><argument_list pos:start="311:57" pos:end="311:64">(<argument pos:start="311:58" pos:end="311:63"><expr pos:start="311:58" pos:end="311:63"><name pos:start="311:58" pos:end="311:63">format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="313:17" pos:end="313:62"><expr pos:start="313:17" pos:end="313:61"><call pos:start="313:17" pos:end="313:61"><name pos:start="313:17" pos:end="313:25">qdict_put</name><argument_list pos:start="313:26" pos:end="313:61">(<argument pos:start="313:27" pos:end="313:31"><expr pos:start="313:27" pos:end="313:31"><name pos:start="313:27" pos:end="313:31">qdict</name></expr></argument>, <argument pos:start="313:34" pos:end="313:39"><expr pos:start="313:34" pos:end="313:39"><literal type="string" pos:start="313:34" pos:end="313:39">"size"</literal></expr></argument>, <argument pos:start="313:42" pos:end="313:60"><expr pos:start="313:42" pos:end="313:60"><call pos:start="313:42" pos:end="313:60"><name pos:start="313:42" pos:end="313:54">qint_from_int</name><argument_list pos:start="313:55" pos:end="313:60">(<argument pos:start="313:56" pos:end="313:59"><expr pos:start="313:56" pos:end="313:59"><name pos:start="313:56" pos:end="313:59">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="317:13" pos:end="317:18">break;</break>

        <case pos:start="319:9" pos:end="319:17">case <expr pos:start="319:14" pos:end="319:16"><literal type="char" pos:start="319:14" pos:end="319:16">'i'</literal></expr>:</case>

        <case pos:start="321:9" pos:end="321:17">case <expr pos:start="321:14" pos:end="321:16"><literal type="char" pos:start="321:14" pos:end="321:16">'l'</literal></expr>:</case>

        <case pos:start="323:9" pos:end="323:17">case <expr pos:start="323:14" pos:end="323:16"><literal type="char" pos:start="323:14" pos:end="323:16">'M'</literal></expr>:</case>

            <block pos:start="325:13" pos:end="401:13">{<block_content pos:start="327:17" pos:end="399:58">

                <decl_stmt pos:start="327:17" pos:end="327:28"><decl pos:start="327:17" pos:end="327:27"><type pos:start="327:17" pos:end="327:23"><name pos:start="327:17" pos:end="327:23">int64_t</name></type> <name pos:start="327:25" pos:end="327:27">val</name></decl>;</decl_stmt>



                <while pos:start="331:17" pos:end="333:24">while <condition pos:start="331:23" pos:end="331:40">(<expr pos:start="331:24" pos:end="331:39"><call pos:start="331:24" pos:end="331:39"><name pos:start="331:24" pos:end="331:35">qemu_isspace</name><argument_list pos:start="331:36" pos:end="331:39">(<argument pos:start="331:37" pos:end="331:38"><expr pos:start="331:37" pos:end="331:38"><operator pos:start="331:37" pos:end="331:37">*</operator><name pos:start="331:38" pos:end="331:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="333:21" pos:end="333:24"><block_content pos:start="333:21" pos:end="333:24">

                    <expr_stmt pos:start="333:21" pos:end="333:24"><expr pos:start="333:21" pos:end="333:23"><name pos:start="333:21" pos:end="333:21">p</name><operator pos:start="333:22" pos:end="333:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="335:17" pos:end="369:17"><if pos:start="335:17" pos:end="369:17">if <condition pos:start="335:20" pos:end="335:55">(<expr pos:start="335:21" pos:end="335:54"><operator pos:start="335:21" pos:end="335:21">*</operator><name pos:start="335:22" pos:end="335:28">typestr</name> <operator pos:start="335:30" pos:end="335:31">==</operator> <literal type="char" pos:start="335:33" pos:end="335:35">'?'</literal> <operator pos:start="335:37" pos:end="335:38">||</operator> <operator pos:start="335:40" pos:end="335:40">*</operator><name pos:start="335:41" pos:end="335:47">typestr</name> <operator pos:start="335:49" pos:end="335:50">==</operator> <literal type="char" pos:start="335:52" pos:end="335:54">'.'</literal></expr>)</condition> <block pos:start="335:57" pos:end="369:17">{<block_content pos:start="337:21" pos:end="367:30">

                    <if_stmt pos:start="337:21" pos:end="365:21"><if pos:start="337:21" pos:end="347:21">if <condition pos:start="337:24" pos:end="337:40">(<expr pos:start="337:25" pos:end="337:39"><operator pos:start="337:25" pos:end="337:25">*</operator><name pos:start="337:26" pos:end="337:32">typestr</name> <operator pos:start="337:34" pos:end="337:35">==</operator> <literal type="char" pos:start="337:37" pos:end="337:39">'?'</literal></expr>)</condition> <block pos:start="337:42" pos:end="347:21">{<block_content pos:start="339:25" pos:end="345:25">

                        <if_stmt pos:start="339:25" pos:end="345:25"><if pos:start="339:25" pos:end="345:25">if <condition pos:start="339:28" pos:end="339:39">(<expr pos:start="339:29" pos:end="339:38"><operator pos:start="339:29" pos:end="339:29">*</operator><name pos:start="339:30" pos:end="339:30">p</name> <operator pos:start="339:32" pos:end="339:33">==</operator> <literal type="char" pos:start="339:35" pos:end="339:38">'\0'</literal></expr>)</condition> <block pos:start="339:41" pos:end="345:25">{<block_content pos:start="341:29" pos:end="343:34">

                            <expr_stmt pos:start="341:29" pos:end="341:38"><expr pos:start="341:29" pos:end="341:37"><name pos:start="341:29" pos:end="341:35">typestr</name><operator pos:start="341:36" pos:end="341:37">++</operator></expr>;</expr_stmt>

                            <break pos:start="343:29" pos:end="343:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="347:23" pos:end="365:21">else <block pos:start="347:28" pos:end="365:21">{<block_content pos:start="349:25" pos:end="363:25">

                        <if_stmt pos:start="349:25" pos:end="363:25"><if pos:start="349:25" pos:end="357:25">if <condition pos:start="349:28" pos:end="349:38">(<expr pos:start="349:29" pos:end="349:37"><operator pos:start="349:29" pos:end="349:29">*</operator><name pos:start="349:30" pos:end="349:30">p</name> <operator pos:start="349:32" pos:end="349:33">==</operator> <literal type="char" pos:start="349:35" pos:end="349:37">'.'</literal></expr>)</condition> <block pos:start="349:40" pos:end="357:25">{<block_content pos:start="351:29" pos:end="355:36">

                            <expr_stmt pos:start="351:29" pos:end="351:32"><expr pos:start="351:29" pos:end="351:31"><name pos:start="351:29" pos:end="351:29">p</name><operator pos:start="351:30" pos:end="351:31">++</operator></expr>;</expr_stmt>

                            <while pos:start="353:29" pos:end="355:36">while <condition pos:start="353:35" pos:end="353:52">(<expr pos:start="353:36" pos:end="353:51"><call pos:start="353:36" pos:end="353:51"><name pos:start="353:36" pos:end="353:47">qemu_isspace</name><argument_list pos:start="353:48" pos:end="353:51">(<argument pos:start="353:49" pos:end="353:50"><expr pos:start="353:49" pos:end="353:50"><operator pos:start="353:49" pos:end="353:49">*</operator><name pos:start="353:50" pos:end="353:50">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="355:33" pos:end="355:36"><block_content pos:start="355:33" pos:end="355:36">

                                <expr_stmt pos:start="355:33" pos:end="355:36"><expr pos:start="355:33" pos:end="355:35"><name pos:start="355:33" pos:end="355:33">p</name><operator pos:start="355:34" pos:end="355:35">++</operator></expr>;</expr_stmt></block_content></block></while>

                        </block_content>}</block></if> <else pos:start="357:27" pos:end="363:25">else <block pos:start="357:32" pos:end="363:25">{<block_content pos:start="359:29" pos:end="361:34">

                            <expr_stmt pos:start="359:29" pos:end="359:38"><expr pos:start="359:29" pos:end="359:37"><name pos:start="359:29" pos:end="359:35">typestr</name><operator pos:start="359:36" pos:end="359:37">++</operator></expr>;</expr_stmt>

                            <break pos:start="361:29" pos:end="361:34">break;</break>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="367:21" pos:end="367:30"><expr pos:start="367:21" pos:end="367:29"><name pos:start="367:21" pos:end="367:27">typestr</name><operator pos:start="367:28" pos:end="367:29">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="371:17" pos:end="373:30"><if pos:start="371:17" pos:end="373:30">if <condition pos:start="371:20" pos:end="371:44">(<expr pos:start="371:21" pos:end="371:43"><call pos:start="371:21" pos:end="371:43"><name pos:start="371:21" pos:end="371:28">get_expr</name><argument_list pos:start="371:29" pos:end="371:43">(<argument pos:start="371:30" pos:end="371:32"><expr pos:start="371:30" pos:end="371:32"><name pos:start="371:30" pos:end="371:32">mon</name></expr></argument>, <argument pos:start="371:35" pos:end="371:38"><expr pos:start="371:35" pos:end="371:38"><operator pos:start="371:35" pos:end="371:35">&amp;</operator><name pos:start="371:36" pos:end="371:38">val</name></expr></argument>, <argument pos:start="371:41" pos:end="371:42"><expr pos:start="371:41" pos:end="371:42"><operator pos:start="371:41" pos:end="371:41">&amp;</operator><name pos:start="371:42" pos:end="371:42">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="373:21" pos:end="373:30"><block_content pos:start="373:21" pos:end="373:30">

                    <goto pos:start="373:21" pos:end="373:30">goto <name pos:start="373:26" pos:end="373:29">fail</name>;</goto></block_content></block></if></if_stmt>

                <comment type="block" pos:start="375:17" pos:end="375:57">/* Check if 'i' is greater than 32-bit */</comment>

                <if_stmt pos:start="377:17" pos:end="397:17"><if pos:start="377:17" pos:end="385:17">if <condition pos:start="377:20" pos:end="377:61">(<expr pos:start="377:21" pos:end="377:60"><operator pos:start="377:21" pos:end="377:21">(</operator><name pos:start="377:22" pos:end="377:22">c</name> <operator pos:start="377:24" pos:end="377:25">==</operator> <literal type="char" pos:start="377:27" pos:end="377:29">'i'</literal><operator pos:start="377:30" pos:end="377:30">)</operator> <operator pos:start="377:32" pos:end="377:33">&amp;&amp;</operator> <operator pos:start="377:35" pos:end="377:35">(</operator><operator pos:start="377:36" pos:end="377:36">(</operator><name pos:start="377:37" pos:end="377:39">val</name> <operator pos:start="377:41" pos:end="377:42">&gt;&gt;</operator> <literal type="number" pos:start="377:44" pos:end="377:45">32</literal><operator pos:start="377:46" pos:end="377:46">)</operator> <operator pos:start="377:48" pos:end="377:48">&amp;</operator> <literal type="number" pos:start="377:50" pos:end="377:59">0xffffffff</literal><operator pos:start="377:60" pos:end="377:60">)</operator></expr>)</condition> <block pos:start="377:63" pos:end="385:17">{<block_content pos:start="379:21" pos:end="383:30">

                    <expr_stmt pos:start="379:21" pos:end="379:74"><expr pos:start="379:21" pos:end="379:73"><call pos:start="379:21" pos:end="379:73"><name pos:start="379:21" pos:end="379:34">monitor_printf</name><argument_list pos:start="379:35" pos:end="379:73">(<argument pos:start="379:36" pos:end="379:38"><expr pos:start="379:36" pos:end="379:38"><name pos:start="379:36" pos:end="379:38">mon</name></expr></argument>, <argument pos:start="379:41" pos:end="379:61"><expr pos:start="379:41" pos:end="379:61"><literal type="string" pos:start="379:41" pos:end="379:61">"\'%s\' has failed: "</literal></expr></argument>, <argument pos:start="379:64" pos:end="379:72"><expr pos:start="379:64" pos:end="379:72"><name pos:start="379:64" pos:end="379:72"><name pos:start="379:64" pos:end="379:66">cmd</name><operator pos:start="379:67" pos:end="379:68">-&gt;</operator><name pos:start="379:69" pos:end="379:72">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="381:21" pos:end="381:74"><expr pos:start="381:21" pos:end="381:73"><call pos:start="381:21" pos:end="381:73"><name pos:start="381:21" pos:end="381:34">monitor_printf</name><argument_list pos:start="381:35" pos:end="381:73">(<argument pos:start="381:36" pos:end="381:38"><expr pos:start="381:36" pos:end="381:38"><name pos:start="381:36" pos:end="381:38">mon</name></expr></argument>, <argument pos:start="381:41" pos:end="381:72"><expr pos:start="381:41" pos:end="381:72"><literal type="string" pos:start="381:41" pos:end="381:72">"integer is for 32-bit values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="383:21" pos:end="383:30">goto <name pos:start="383:26" pos:end="383:29">fail</name>;</goto>

                </block_content>}</block></if> <if type="elseif" pos:start="385:19" pos:end="397:17">else if <condition pos:start="385:27" pos:end="385:36">(<expr pos:start="385:28" pos:end="385:35"><name pos:start="385:28" pos:end="385:28">c</name> <operator pos:start="385:30" pos:end="385:31">==</operator> <literal type="char" pos:start="385:33" pos:end="385:35">'M'</literal></expr>)</condition> <block pos:start="385:38" pos:end="397:17">{<block_content pos:start="387:21" pos:end="395:31">

                    <if_stmt pos:start="387:21" pos:end="393:21"><if pos:start="387:21" pos:end="393:21">if <condition pos:start="387:24" pos:end="387:32">(<expr pos:start="387:25" pos:end="387:31"><name pos:start="387:25" pos:end="387:27">val</name> <operator pos:start="387:29" pos:end="387:29">&lt;</operator> <literal type="number" pos:start="387:31" pos:end="387:31">0</literal></expr>)</condition> <block pos:start="387:34" pos:end="393:21">{<block_content pos:start="389:25" pos:end="391:34">

                        <expr_stmt pos:start="389:25" pos:end="389:72"><expr pos:start="389:25" pos:end="389:71"><call pos:start="389:25" pos:end="389:71"><name pos:start="389:25" pos:end="389:38">monitor_printf</name><argument_list pos:start="389:39" pos:end="389:71">(<argument pos:start="389:40" pos:end="389:42"><expr pos:start="389:40" pos:end="389:42"><name pos:start="389:40" pos:end="389:42">mon</name></expr></argument>, <argument pos:start="389:45" pos:end="389:70"><expr pos:start="389:45" pos:end="389:70"><literal type="string" pos:start="389:45" pos:end="389:70">"enter a positive value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="391:25" pos:end="391:34">goto <name pos:start="391:30" pos:end="391:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="395:21" pos:end="395:31"><expr pos:start="395:21" pos:end="395:30"><name pos:start="395:21" pos:end="395:23">val</name> <operator pos:start="395:25" pos:end="395:27">&lt;&lt;=</operator> <literal type="number" pos:start="395:29" pos:end="395:30">20</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="399:17" pos:end="399:58"><expr pos:start="399:17" pos:end="399:57"><call pos:start="399:17" pos:end="399:57"><name pos:start="399:17" pos:end="399:25">qdict_put</name><argument_list pos:start="399:26" pos:end="399:57">(<argument pos:start="399:27" pos:end="399:31"><expr pos:start="399:27" pos:end="399:31"><name pos:start="399:27" pos:end="399:31">qdict</name></expr></argument>, <argument pos:start="399:34" pos:end="399:36"><expr pos:start="399:34" pos:end="399:36"><name pos:start="399:34" pos:end="399:36">key</name></expr></argument>, <argument pos:start="399:39" pos:end="399:56"><expr pos:start="399:39" pos:end="399:56"><call pos:start="399:39" pos:end="399:56"><name pos:start="399:39" pos:end="399:51">qint_from_int</name><argument_list pos:start="399:52" pos:end="399:56">(<argument pos:start="399:53" pos:end="399:55"><expr pos:start="399:53" pos:end="399:55"><name pos:start="399:53" pos:end="399:55">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="403:13" pos:end="403:18">break;</break>

        <case pos:start="405:9" pos:end="405:17">case <expr pos:start="405:14" pos:end="405:16"><literal type="char" pos:start="405:14" pos:end="405:16">'o'</literal></expr>:</case>

            <block pos:start="407:13" pos:end="447:13">{<block_content pos:start="409:17" pos:end="445:24">

                <decl_stmt pos:start="409:17" pos:end="409:28"><decl pos:start="409:17" pos:end="409:27"><type pos:start="409:17" pos:end="409:23"><name pos:start="409:17" pos:end="409:23">int64_t</name></type> <name pos:start="409:25" pos:end="409:27">val</name></decl>;</decl_stmt>

                <decl_stmt pos:start="411:17" pos:end="411:26"><decl pos:start="411:17" pos:end="411:25"><type pos:start="411:17" pos:end="411:22"><name pos:start="411:17" pos:end="411:20">char</name> <modifier pos:start="411:22" pos:end="411:22">*</modifier></type><name pos:start="411:23" pos:end="411:25">end</name></decl>;</decl_stmt>



                <while pos:start="415:17" pos:end="419:17">while <condition pos:start="415:23" pos:end="415:40">(<expr pos:start="415:24" pos:end="415:39"><call pos:start="415:24" pos:end="415:39"><name pos:start="415:24" pos:end="415:35">qemu_isspace</name><argument_list pos:start="415:36" pos:end="415:39">(<argument pos:start="415:37" pos:end="415:38"><expr pos:start="415:37" pos:end="415:38"><operator pos:start="415:37" pos:end="415:37">*</operator><name pos:start="415:38" pos:end="415:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="415:42" pos:end="419:17">{<block_content pos:start="417:21" pos:end="417:24">

                    <expr_stmt pos:start="417:21" pos:end="417:24"><expr pos:start="417:21" pos:end="417:23"><name pos:start="417:21" pos:end="417:21">p</name><operator pos:start="417:22" pos:end="417:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="421:17" pos:end="431:17"><if pos:start="421:17" pos:end="431:17">if <condition pos:start="421:20" pos:end="421:36">(<expr pos:start="421:21" pos:end="421:35"><operator pos:start="421:21" pos:end="421:21">*</operator><name pos:start="421:22" pos:end="421:28">typestr</name> <operator pos:start="421:30" pos:end="421:31">==</operator> <literal type="char" pos:start="421:33" pos:end="421:35">'?'</literal></expr>)</condition> <block pos:start="421:38" pos:end="431:17">{<block_content pos:start="423:21" pos:end="429:21">

                    <expr_stmt pos:start="423:21" pos:end="423:30"><expr pos:start="423:21" pos:end="423:29"><name pos:start="423:21" pos:end="423:27">typestr</name><operator pos:start="423:28" pos:end="423:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="425:21" pos:end="429:21"><if pos:start="425:21" pos:end="429:21">if <condition pos:start="425:24" pos:end="425:35">(<expr pos:start="425:25" pos:end="425:34"><operator pos:start="425:25" pos:end="425:25">*</operator><name pos:start="425:26" pos:end="425:26">p</name> <operator pos:start="425:28" pos:end="425:29">==</operator> <literal type="char" pos:start="425:31" pos:end="425:34">'\0'</literal></expr>)</condition> <block pos:start="425:37" pos:end="429:21">{<block_content pos:start="427:25" pos:end="427:30">

                        <break pos:start="427:25" pos:end="427:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="433:17" pos:end="433:48"><expr pos:start="433:17" pos:end="433:47"><name pos:start="433:17" pos:end="433:19">val</name> <operator pos:start="433:21" pos:end="433:21">=</operator> <call pos:start="433:23" pos:end="433:47"><name pos:start="433:23" pos:end="433:38">qemu_strtosz_MiB</name><argument_list pos:start="433:39" pos:end="433:47">(<argument pos:start="433:40" pos:end="433:40"><expr pos:start="433:40" pos:end="433:40"><name pos:start="433:40" pos:end="433:40">p</name></expr></argument>, <argument pos:start="433:43" pos:end="433:46"><expr pos:start="433:43" pos:end="433:46"><operator pos:start="433:43" pos:end="433:43">&amp;</operator><name pos:start="433:44" pos:end="433:46">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="435:17" pos:end="441:17"><if pos:start="435:17" pos:end="441:17">if <condition pos:start="435:20" pos:end="435:28">(<expr pos:start="435:21" pos:end="435:27"><name pos:start="435:21" pos:end="435:23">val</name> <operator pos:start="435:25" pos:end="435:25">&lt;</operator> <literal type="number" pos:start="435:27" pos:end="435:27">0</literal></expr>)</condition> <block pos:start="435:30" pos:end="441:17">{<block_content pos:start="437:21" pos:end="439:30">

                    <expr_stmt pos:start="437:21" pos:end="437:58"><expr pos:start="437:21" pos:end="437:57"><call pos:start="437:21" pos:end="437:57"><name pos:start="437:21" pos:end="437:34">monitor_printf</name><argument_list pos:start="437:35" pos:end="437:57">(<argument pos:start="437:36" pos:end="437:38"><expr pos:start="437:36" pos:end="437:38"><name pos:start="437:36" pos:end="437:38">mon</name></expr></argument>, <argument pos:start="437:41" pos:end="437:56"><expr pos:start="437:41" pos:end="437:56"><literal type="string" pos:start="437:41" pos:end="437:56">"invalid size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="439:21" pos:end="439:30">goto <name pos:start="439:26" pos:end="439:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="443:17" pos:end="443:58"><expr pos:start="443:17" pos:end="443:57"><call pos:start="443:17" pos:end="443:57"><name pos:start="443:17" pos:end="443:25">qdict_put</name><argument_list pos:start="443:26" pos:end="443:57">(<argument pos:start="443:27" pos:end="443:31"><expr pos:start="443:27" pos:end="443:31"><name pos:start="443:27" pos:end="443:31">qdict</name></expr></argument>, <argument pos:start="443:34" pos:end="443:36"><expr pos:start="443:34" pos:end="443:36"><name pos:start="443:34" pos:end="443:36">key</name></expr></argument>, <argument pos:start="443:39" pos:end="443:56"><expr pos:start="443:39" pos:end="443:56"><call pos:start="443:39" pos:end="443:56"><name pos:start="443:39" pos:end="443:51">qint_from_int</name><argument_list pos:start="443:52" pos:end="443:56">(<argument pos:start="443:53" pos:end="443:55"><expr pos:start="443:53" pos:end="443:55"><name pos:start="443:53" pos:end="443:55">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="445:17" pos:end="445:24"><expr pos:start="445:17" pos:end="445:23"><name pos:start="445:17" pos:end="445:17">p</name> <operator pos:start="445:19" pos:end="445:19">=</operator> <name pos:start="445:21" pos:end="445:23">end</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="449:13" pos:end="449:18">break;</break>

        <case pos:start="451:9" pos:end="451:17">case <expr pos:start="451:14" pos:end="451:16"><literal type="char" pos:start="451:14" pos:end="451:16">'T'</literal></expr>:</case>

            <block pos:start="453:13" pos:end="511:13">{<block_content pos:start="455:17" pos:end="509:63">

                <decl_stmt pos:start="455:17" pos:end="455:27"><decl pos:start="455:17" pos:end="455:26"><type pos:start="455:17" pos:end="455:22"><name pos:start="455:17" pos:end="455:22">double</name></type> <name pos:start="455:24" pos:end="455:26">val</name></decl>;</decl_stmt>



                <while pos:start="459:17" pos:end="461:24">while <condition pos:start="459:23" pos:end="459:40">(<expr pos:start="459:24" pos:end="459:39"><call pos:start="459:24" pos:end="459:39"><name pos:start="459:24" pos:end="459:35">qemu_isspace</name><argument_list pos:start="459:36" pos:end="459:39">(<argument pos:start="459:37" pos:end="459:38"><expr pos:start="459:37" pos:end="459:38"><operator pos:start="459:37" pos:end="459:37">*</operator><name pos:start="459:38" pos:end="459:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="461:21" pos:end="461:24"><block_content pos:start="461:21" pos:end="461:24">

                    <expr_stmt pos:start="461:21" pos:end="461:24"><expr pos:start="461:21" pos:end="461:23"><name pos:start="461:21" pos:end="461:21">p</name><operator pos:start="461:22" pos:end="461:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="463:17" pos:end="473:17"><if pos:start="463:17" pos:end="473:17">if <condition pos:start="463:20" pos:end="463:36">(<expr pos:start="463:21" pos:end="463:35"><operator pos:start="463:21" pos:end="463:21">*</operator><name pos:start="463:22" pos:end="463:28">typestr</name> <operator pos:start="463:30" pos:end="463:31">==</operator> <literal type="char" pos:start="463:33" pos:end="463:35">'?'</literal></expr>)</condition> <block pos:start="463:38" pos:end="473:17">{<block_content pos:start="465:21" pos:end="471:21">

                    <expr_stmt pos:start="465:21" pos:end="465:30"><expr pos:start="465:21" pos:end="465:29"><name pos:start="465:21" pos:end="465:27">typestr</name><operator pos:start="465:28" pos:end="465:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="467:21" pos:end="471:21"><if pos:start="467:21" pos:end="471:21">if <condition pos:start="467:24" pos:end="467:35">(<expr pos:start="467:25" pos:end="467:34"><operator pos:start="467:25" pos:end="467:25">*</operator><name pos:start="467:26" pos:end="467:26">p</name> <operator pos:start="467:28" pos:end="467:29">==</operator> <literal type="char" pos:start="467:31" pos:end="467:34">'\0'</literal></expr>)</condition> <block pos:start="467:37" pos:end="471:21">{<block_content pos:start="469:25" pos:end="469:30">

                        <break pos:start="469:25" pos:end="469:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="475:17" pos:end="479:17"><if pos:start="475:17" pos:end="479:17">if <condition pos:start="475:20" pos:end="475:50">(<expr pos:start="475:21" pos:end="475:49"><call pos:start="475:21" pos:end="475:45"><name pos:start="475:21" pos:end="475:30">get_double</name><argument_list pos:start="475:31" pos:end="475:45">(<argument pos:start="475:32" pos:end="475:34"><expr pos:start="475:32" pos:end="475:34"><name pos:start="475:32" pos:end="475:34">mon</name></expr></argument>, <argument pos:start="475:37" pos:end="475:40"><expr pos:start="475:37" pos:end="475:40"><operator pos:start="475:37" pos:end="475:37">&amp;</operator><name pos:start="475:38" pos:end="475:40">val</name></expr></argument>, <argument pos:start="475:43" pos:end="475:44"><expr pos:start="475:43" pos:end="475:44"><operator pos:start="475:43" pos:end="475:43">&amp;</operator><name pos:start="475:44" pos:end="475:44">p</name></expr></argument>)</argument_list></call> <operator pos:start="475:47" pos:end="475:47">&lt;</operator> <literal type="number" pos:start="475:49" pos:end="475:49">0</literal></expr>)</condition> <block pos:start="475:52" pos:end="479:17">{<block_content pos:start="477:21" pos:end="477:30">

                    <goto pos:start="477:21" pos:end="477:30">goto <name pos:start="477:26" pos:end="477:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="481:17" pos:end="499:17"><if pos:start="481:17" pos:end="499:17">if <condition pos:start="481:20" pos:end="481:40">(<expr pos:start="481:21" pos:end="481:39"><name pos:start="481:21" pos:end="481:24"><name pos:start="481:21" pos:end="481:21">p</name><index pos:start="481:22" pos:end="481:24">[<expr pos:start="481:23" pos:end="481:23"><literal type="number" pos:start="481:23" pos:end="481:23">0</literal></expr>]</index></name> <operator pos:start="481:26" pos:end="481:27">&amp;&amp;</operator> <name pos:start="481:29" pos:end="481:32"><name pos:start="481:29" pos:end="481:29">p</name><index pos:start="481:30" pos:end="481:32">[<expr pos:start="481:31" pos:end="481:31"><literal type="number" pos:start="481:31" pos:end="481:31">1</literal></expr>]</index></name> <operator pos:start="481:34" pos:end="481:35">==</operator> <literal type="char" pos:start="481:37" pos:end="481:39">'s'</literal></expr>)</condition> <block pos:start="481:42" pos:end="499:17">{<block_content pos:start="483:21" pos:end="497:21">

                    <switch pos:start="483:21" pos:end="497:21">switch <condition pos:start="483:28" pos:end="483:31">(<expr pos:start="483:29" pos:end="483:30"><operator pos:start="483:29" pos:end="483:29">*</operator><name pos:start="483:30" pos:end="483:30">p</name></expr>)</condition> <block pos:start="483:33" pos:end="497:21">{<block_content pos:start="485:21" pos:end="495:50">

                    <case pos:start="485:21" pos:end="485:29">case <expr pos:start="485:26" pos:end="485:28"><literal type="char" pos:start="485:26" pos:end="485:28">'m'</literal></expr>:</case>

                        <expr_stmt pos:start="487:25" pos:end="487:35"><expr pos:start="487:25" pos:end="487:34"><name pos:start="487:25" pos:end="487:27">val</name> <operator pos:start="487:29" pos:end="487:30">/=</operator> <literal type="number" pos:start="487:32" pos:end="487:34">1e3</literal></expr>;</expr_stmt> <expr_stmt pos:start="487:37" pos:end="487:43"><expr pos:start="487:37" pos:end="487:42"><name pos:start="487:37" pos:end="487:37">p</name> <operator pos:start="487:39" pos:end="487:40">+=</operator> <literal type="number" pos:start="487:42" pos:end="487:42">2</literal></expr>;</expr_stmt> <break pos:start="487:45" pos:end="487:50">break;</break>

                    <case pos:start="489:21" pos:end="489:29">case <expr pos:start="489:26" pos:end="489:28"><literal type="char" pos:start="489:26" pos:end="489:28">'u'</literal></expr>:</case>

                        <expr_stmt pos:start="491:25" pos:end="491:35"><expr pos:start="491:25" pos:end="491:34"><name pos:start="491:25" pos:end="491:27">val</name> <operator pos:start="491:29" pos:end="491:30">/=</operator> <literal type="number" pos:start="491:32" pos:end="491:34">1e6</literal></expr>;</expr_stmt> <expr_stmt pos:start="491:37" pos:end="491:43"><expr pos:start="491:37" pos:end="491:42"><name pos:start="491:37" pos:end="491:37">p</name> <operator pos:start="491:39" pos:end="491:40">+=</operator> <literal type="number" pos:start="491:42" pos:end="491:42">2</literal></expr>;</expr_stmt> <break pos:start="491:45" pos:end="491:50">break;</break>

                    <case pos:start="493:21" pos:end="493:29">case <expr pos:start="493:26" pos:end="493:28"><literal type="char" pos:start="493:26" pos:end="493:28">'n'</literal></expr>:</case>

                        <expr_stmt pos:start="495:25" pos:end="495:35"><expr pos:start="495:25" pos:end="495:34"><name pos:start="495:25" pos:end="495:27">val</name> <operator pos:start="495:29" pos:end="495:30">/=</operator> <literal type="number" pos:start="495:32" pos:end="495:34">1e9</literal></expr>;</expr_stmt> <expr_stmt pos:start="495:37" pos:end="495:43"><expr pos:start="495:37" pos:end="495:42"><name pos:start="495:37" pos:end="495:37">p</name> <operator pos:start="495:39" pos:end="495:40">+=</operator> <literal type="number" pos:start="495:42" pos:end="495:42">2</literal></expr>;</expr_stmt> <break pos:start="495:45" pos:end="495:50">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="501:17" pos:end="507:17"><if pos:start="501:17" pos:end="507:17">if <condition pos:start="501:20" pos:end="501:44">(<expr pos:start="501:21" pos:end="501:43"><operator pos:start="501:21" pos:end="501:21">*</operator><name pos:start="501:22" pos:end="501:22">p</name> <operator pos:start="501:24" pos:end="501:25">&amp;&amp;</operator> <operator pos:start="501:27" pos:end="501:27">!</operator><call pos:start="501:28" pos:end="501:43"><name pos:start="501:28" pos:end="501:39">qemu_isspace</name><argument_list pos:start="501:40" pos:end="501:43">(<argument pos:start="501:41" pos:end="501:42"><expr pos:start="501:41" pos:end="501:42"><operator pos:start="501:41" pos:end="501:41">*</operator><name pos:start="501:42" pos:end="501:42">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="501:46" pos:end="507:17">{<block_content pos:start="503:21" pos:end="505:30">

                    <expr_stmt pos:start="503:21" pos:end="503:65"><expr pos:start="503:21" pos:end="503:64"><call pos:start="503:21" pos:end="503:64"><name pos:start="503:21" pos:end="503:34">monitor_printf</name><argument_list pos:start="503:35" pos:end="503:64">(<argument pos:start="503:36" pos:end="503:38"><expr pos:start="503:36" pos:end="503:38"><name pos:start="503:36" pos:end="503:38">mon</name></expr></argument>, <argument pos:start="503:41" pos:end="503:63"><expr pos:start="503:41" pos:end="503:63"><literal type="string" pos:start="503:41" pos:end="503:63">"Unknown unit suffix\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="505:21" pos:end="505:30">goto <name pos:start="505:26" pos:end="505:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="509:17" pos:end="509:63"><expr pos:start="509:17" pos:end="509:62"><call pos:start="509:17" pos:end="509:62"><name pos:start="509:17" pos:end="509:25">qdict_put</name><argument_list pos:start="509:26" pos:end="509:62">(<argument pos:start="509:27" pos:end="509:31"><expr pos:start="509:27" pos:end="509:31"><name pos:start="509:27" pos:end="509:31">qdict</name></expr></argument>, <argument pos:start="509:34" pos:end="509:36"><expr pos:start="509:34" pos:end="509:36"><name pos:start="509:34" pos:end="509:36">key</name></expr></argument>, <argument pos:start="509:39" pos:end="509:61"><expr pos:start="509:39" pos:end="509:61"><call pos:start="509:39" pos:end="509:61"><name pos:start="509:39" pos:end="509:56">qfloat_from_double</name><argument_list pos:start="509:57" pos:end="509:61">(<argument pos:start="509:58" pos:end="509:60"><expr pos:start="509:58" pos:end="509:60"><name pos:start="509:58" pos:end="509:60">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="513:13" pos:end="513:18">break;</break>

        <case pos:start="515:9" pos:end="515:17">case <expr pos:start="515:14" pos:end="515:16"><literal type="char" pos:start="515:14" pos:end="515:16">'b'</literal></expr>:</case>

            <block pos:start="517:13" pos:end="557:13">{<block_content pos:start="519:17" pos:end="555:60">

                <decl_stmt pos:start="519:17" pos:end="519:32"><decl pos:start="519:17" pos:end="519:31"><type pos:start="519:17" pos:end="519:28"><specifier pos:start="519:17" pos:end="519:21">const</specifier> <name pos:start="519:23" pos:end="519:26">char</name> <modifier pos:start="519:28" pos:end="519:28">*</modifier></type><name pos:start="519:29" pos:end="519:31">beg</name></decl>;</decl_stmt>

                <decl_stmt pos:start="521:17" pos:end="521:25"><decl pos:start="521:17" pos:end="521:24"><type pos:start="521:17" pos:end="521:20"><name pos:start="521:17" pos:end="521:20">bool</name></type> <name pos:start="521:22" pos:end="521:24">val</name></decl>;</decl_stmt>



                <while pos:start="525:17" pos:end="529:17">while <condition pos:start="525:23" pos:end="525:40">(<expr pos:start="525:24" pos:end="525:39"><call pos:start="525:24" pos:end="525:39"><name pos:start="525:24" pos:end="525:35">qemu_isspace</name><argument_list pos:start="525:36" pos:end="525:39">(<argument pos:start="525:37" pos:end="525:38"><expr pos:start="525:37" pos:end="525:38"><operator pos:start="525:37" pos:end="525:37">*</operator><name pos:start="525:38" pos:end="525:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="525:42" pos:end="529:17">{<block_content pos:start="527:21" pos:end="527:24">

                    <expr_stmt pos:start="527:21" pos:end="527:24"><expr pos:start="527:21" pos:end="527:23"><name pos:start="527:21" pos:end="527:21">p</name><operator pos:start="527:22" pos:end="527:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="531:17" pos:end="531:24"><expr pos:start="531:17" pos:end="531:23"><name pos:start="531:17" pos:end="531:19">beg</name> <operator pos:start="531:21" pos:end="531:21">=</operator> <name pos:start="531:23" pos:end="531:23">p</name></expr>;</expr_stmt>

                <while pos:start="533:17" pos:end="537:17">while <condition pos:start="533:23" pos:end="533:40">(<expr pos:start="533:24" pos:end="533:39"><call pos:start="533:24" pos:end="533:39"><name pos:start="533:24" pos:end="533:35">qemu_isgraph</name><argument_list pos:start="533:36" pos:end="533:39">(<argument pos:start="533:37" pos:end="533:38"><expr pos:start="533:37" pos:end="533:38"><operator pos:start="533:37" pos:end="533:37">*</operator><name pos:start="533:38" pos:end="533:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="533:42" pos:end="537:17">{<block_content pos:start="535:21" pos:end="535:24">

                    <expr_stmt pos:start="535:21" pos:end="535:24"><expr pos:start="535:21" pos:end="535:23"><name pos:start="535:21" pos:end="535:21">p</name><operator pos:start="535:22" pos:end="535:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="539:17" pos:end="553:17"><if pos:start="539:17" pos:end="543:17">if <condition pos:start="539:20" pos:end="539:64">(<expr pos:start="539:21" pos:end="539:63"><name pos:start="539:21" pos:end="539:21">p</name> <operator pos:start="539:23" pos:end="539:23">-</operator> <name pos:start="539:25" pos:end="539:27">beg</name> <operator pos:start="539:29" pos:end="539:30">==</operator> <literal type="number" pos:start="539:32" pos:end="539:32">2</literal> <operator pos:start="539:34" pos:end="539:35">&amp;&amp;</operator> <operator pos:start="539:37" pos:end="539:37">!</operator><call pos:start="539:38" pos:end="539:63"><name pos:start="539:38" pos:end="539:43">memcmp</name><argument_list pos:start="539:44" pos:end="539:63">(<argument pos:start="539:45" pos:end="539:47"><expr pos:start="539:45" pos:end="539:47"><name pos:start="539:45" pos:end="539:47">beg</name></expr></argument>, <argument pos:start="539:50" pos:end="539:53"><expr pos:start="539:50" pos:end="539:53"><literal type="string" pos:start="539:50" pos:end="539:53">"on"</literal></expr></argument>, <argument pos:start="539:56" pos:end="539:62"><expr pos:start="539:56" pos:end="539:62"><name pos:start="539:56" pos:end="539:56">p</name> <operator pos:start="539:58" pos:end="539:58">-</operator> <name pos:start="539:60" pos:end="539:62">beg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="539:66" pos:end="543:17">{<block_content pos:start="541:21" pos:end="541:31">

                    <expr_stmt pos:start="541:21" pos:end="541:31"><expr pos:start="541:21" pos:end="541:30"><name pos:start="541:21" pos:end="541:23">val</name> <operator pos:start="541:25" pos:end="541:25">=</operator> <name pos:start="541:27" pos:end="541:30">true</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="543:19" pos:end="547:17">else if <condition pos:start="543:27" pos:end="543:72">(<expr pos:start="543:28" pos:end="543:71"><name pos:start="543:28" pos:end="543:28">p</name> <operator pos:start="543:30" pos:end="543:30">-</operator> <name pos:start="543:32" pos:end="543:34">beg</name> <operator pos:start="543:36" pos:end="543:37">==</operator> <literal type="number" pos:start="543:39" pos:end="543:39">3</literal> <operator pos:start="543:41" pos:end="543:42">&amp;&amp;</operator> <operator pos:start="543:44" pos:end="543:44">!</operator><call pos:start="543:45" pos:end="543:71"><name pos:start="543:45" pos:end="543:50">memcmp</name><argument_list pos:start="543:51" pos:end="543:71">(<argument pos:start="543:52" pos:end="543:54"><expr pos:start="543:52" pos:end="543:54"><name pos:start="543:52" pos:end="543:54">beg</name></expr></argument>, <argument pos:start="543:57" pos:end="543:61"><expr pos:start="543:57" pos:end="543:61"><literal type="string" pos:start="543:57" pos:end="543:61">"off"</literal></expr></argument>, <argument pos:start="543:64" pos:end="543:70"><expr pos:start="543:64" pos:end="543:70"><name pos:start="543:64" pos:end="543:64">p</name> <operator pos:start="543:66" pos:end="543:66">-</operator> <name pos:start="543:68" pos:end="543:70">beg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="543:74" pos:end="547:17">{<block_content pos:start="545:21" pos:end="545:32">

                    <expr_stmt pos:start="545:21" pos:end="545:32"><expr pos:start="545:21" pos:end="545:31"><name pos:start="545:21" pos:end="545:23">val</name> <operator pos:start="545:25" pos:end="545:25">=</operator> <name pos:start="545:27" pos:end="545:31">false</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="547:19" pos:end="553:17">else <block pos:start="547:24" pos:end="553:17">{<block_content pos:start="549:21" pos:end="551:30">

                    <expr_stmt pos:start="549:21" pos:end="549:68"><expr pos:start="549:21" pos:end="549:67"><call pos:start="549:21" pos:end="549:67"><name pos:start="549:21" pos:end="549:34">monitor_printf</name><argument_list pos:start="549:35" pos:end="549:67">(<argument pos:start="549:36" pos:end="549:38"><expr pos:start="549:36" pos:end="549:38"><name pos:start="549:36" pos:end="549:38">mon</name></expr></argument>, <argument pos:start="549:41" pos:end="549:66"><expr pos:start="549:41" pos:end="549:66"><literal type="string" pos:start="549:41" pos:end="549:66">"Expected 'on' or 'off'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="551:21" pos:end="551:30">goto <name pos:start="551:26" pos:end="551:29">fail</name>;</goto>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="555:17" pos:end="555:60"><expr pos:start="555:17" pos:end="555:59"><call pos:start="555:17" pos:end="555:59"><name pos:start="555:17" pos:end="555:25">qdict_put</name><argument_list pos:start="555:26" pos:end="555:59">(<argument pos:start="555:27" pos:end="555:31"><expr pos:start="555:27" pos:end="555:31"><name pos:start="555:27" pos:end="555:31">qdict</name></expr></argument>, <argument pos:start="555:34" pos:end="555:36"><expr pos:start="555:34" pos:end="555:36"><name pos:start="555:34" pos:end="555:36">key</name></expr></argument>, <argument pos:start="555:39" pos:end="555:58"><expr pos:start="555:39" pos:end="555:58"><call pos:start="555:39" pos:end="555:58"><name pos:start="555:39" pos:end="555:53">qbool_from_bool</name><argument_list pos:start="555:54" pos:end="555:58">(<argument pos:start="555:55" pos:end="555:57"><expr pos:start="555:55" pos:end="555:57"><name pos:start="555:55" pos:end="555:57">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="559:13" pos:end="559:18">break;</break>

        <case pos:start="561:9" pos:end="561:17">case <expr pos:start="561:14" pos:end="561:16"><literal type="char" pos:start="561:14" pos:end="561:16">'-'</literal></expr>:</case>

            <block pos:start="563:13" pos:end="623:13">{<block_content pos:start="565:17" pos:end="621:17">

                <decl_stmt pos:start="565:17" pos:end="565:36"><decl pos:start="565:17" pos:end="565:35"><type pos:start="565:17" pos:end="565:28"><specifier pos:start="565:17" pos:end="565:21">const</specifier> <name pos:start="565:23" pos:end="565:26">char</name> <modifier pos:start="565:28" pos:end="565:28">*</modifier></type><name pos:start="565:29" pos:end="565:31">tmp</name> <init pos:start="565:33" pos:end="565:35">= <expr pos:start="565:35" pos:end="565:35"><name pos:start="565:35" pos:end="565:35">p</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="567:17" pos:end="567:33"><decl pos:start="567:17" pos:end="567:32"><type pos:start="567:17" pos:end="567:19"><name pos:start="567:17" pos:end="567:19">int</name></type> <name pos:start="567:21" pos:end="567:28">skip_key</name> <init pos:start="567:30" pos:end="567:32">= <expr pos:start="567:32" pos:end="567:32"><literal type="number" pos:start="567:32" pos:end="567:32">0</literal></expr></init></decl>;</decl_stmt>

                <comment type="block" pos:start="569:17" pos:end="569:28">/* option */</comment>



                <expr_stmt pos:start="573:17" pos:end="573:31"><expr pos:start="573:17" pos:end="573:30"><name pos:start="573:17" pos:end="573:17">c</name> <operator pos:start="573:19" pos:end="573:19">=</operator> <operator pos:start="573:21" pos:end="573:21">*</operator><name pos:start="573:22" pos:end="573:28">typestr</name><operator pos:start="573:29" pos:end="573:30">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="575:17" pos:end="577:34"><if pos:start="575:17" pos:end="577:34">if <condition pos:start="575:20" pos:end="575:30">(<expr pos:start="575:21" pos:end="575:29"><name pos:start="575:21" pos:end="575:21">c</name> <operator pos:start="575:23" pos:end="575:24">==</operator> <literal type="char" pos:start="575:26" pos:end="575:29">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="577:21" pos:end="577:34"><block_content pos:start="577:21" pos:end="577:34">

                    <goto pos:start="577:21" pos:end="577:34">goto <name pos:start="577:26" pos:end="577:33">bad_type</name>;</goto></block_content></block></if></if_stmt>

                <while pos:start="579:17" pos:end="581:24">while <condition pos:start="579:23" pos:end="579:40">(<expr pos:start="579:24" pos:end="579:39"><call pos:start="579:24" pos:end="579:39"><name pos:start="579:24" pos:end="579:35">qemu_isspace</name><argument_list pos:start="579:36" pos:end="579:39">(<argument pos:start="579:37" pos:end="579:38"><expr pos:start="579:37" pos:end="579:38"><operator pos:start="579:37" pos:end="579:37">*</operator><name pos:start="579:38" pos:end="579:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="581:21" pos:end="581:24"><block_content pos:start="581:21" pos:end="581:24">

                    <expr_stmt pos:start="581:21" pos:end="581:24"><expr pos:start="581:21" pos:end="581:23"><name pos:start="581:21" pos:end="581:21">p</name><operator pos:start="581:22" pos:end="581:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="583:17" pos:end="621:17"><if pos:start="583:17" pos:end="621:17">if <condition pos:start="583:20" pos:end="583:30">(<expr pos:start="583:21" pos:end="583:29"><operator pos:start="583:21" pos:end="583:21">*</operator><name pos:start="583:22" pos:end="583:22">p</name> <operator pos:start="583:24" pos:end="583:25">==</operator> <literal type="char" pos:start="583:27" pos:end="583:29">'-'</literal></expr>)</condition> <block pos:start="583:32" pos:end="621:17">{<block_content pos:start="585:21" pos:end="619:21">

                    <expr_stmt pos:start="585:21" pos:end="585:24"><expr pos:start="585:21" pos:end="585:23"><name pos:start="585:21" pos:end="585:21">p</name><operator pos:start="585:22" pos:end="585:23">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="587:21" pos:end="605:21"><if pos:start="587:21" pos:end="605:21">if<condition pos:start="587:23" pos:end="587:31">(<expr pos:start="587:24" pos:end="587:30"><name pos:start="587:24" pos:end="587:24">c</name> <operator pos:start="587:26" pos:end="587:27">!=</operator> <operator pos:start="587:29" pos:end="587:29">*</operator><name pos:start="587:30" pos:end="587:30">p</name></expr>)</condition> <block pos:start="587:33" pos:end="605:21">{<block_content pos:start="589:25" pos:end="603:25">

                        <if_stmt pos:start="589:25" pos:end="603:25"><if pos:start="589:25" pos:end="599:25">if<condition pos:start="589:27" pos:end="589:56">(<expr pos:start="589:28" pos:end="589:55"><operator pos:start="589:28" pos:end="589:28">!</operator><call pos:start="589:29" pos:end="589:55"><name pos:start="589:29" pos:end="589:43">is_valid_option</name><argument_list pos:start="589:44" pos:end="589:55">(<argument pos:start="589:45" pos:end="589:45"><expr pos:start="589:45" pos:end="589:45"><name pos:start="589:45" pos:end="589:45">p</name></expr></argument>, <argument pos:start="589:48" pos:end="589:54"><expr pos:start="589:48" pos:end="589:54"><name pos:start="589:48" pos:end="589:54">typestr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="589:58" pos:end="599:25">{<block_content pos:start="593:29" pos:end="597:38">

                  

                            <expr_stmt pos:start="593:29" pos:end="595:58"><expr pos:start="593:29" pos:end="595:57"><call pos:start="593:29" pos:end="595:57"><name pos:start="593:29" pos:end="593:42">monitor_printf</name><argument_list pos:start="593:43" pos:end="595:57">(<argument pos:start="593:44" pos:end="593:46"><expr pos:start="593:44" pos:end="593:46"><name pos:start="593:44" pos:end="593:46">mon</name></expr></argument>, <argument pos:start="593:49" pos:end="593:78"><expr pos:start="593:49" pos:end="593:78"><literal type="string" pos:start="593:49" pos:end="593:78">"%s: unsupported option -%c\n"</literal></expr></argument>,

                                           <argument pos:start="595:44" pos:end="595:52"><expr pos:start="595:44" pos:end="595:52"><name pos:start="595:44" pos:end="595:52"><name pos:start="595:44" pos:end="595:46">cmd</name><operator pos:start="595:47" pos:end="595:48">-&gt;</operator><name pos:start="595:49" pos:end="595:52">name</name></name></expr></argument>, <argument pos:start="595:55" pos:end="595:56"><expr pos:start="595:55" pos:end="595:56"><operator pos:start="595:55" pos:end="595:55">*</operator><name pos:start="595:56" pos:end="595:56">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="597:29" pos:end="597:38">goto <name pos:start="597:34" pos:end="597:37">fail</name>;</goto>

                        </block_content>}</block></if> <else pos:start="599:27" pos:end="603:25">else <block pos:start="599:32" pos:end="603:25">{<block_content pos:start="601:29" pos:end="601:41">

                            <expr_stmt pos:start="601:29" pos:end="601:41"><expr pos:start="601:29" pos:end="601:40"><name pos:start="601:29" pos:end="601:36">skip_key</name> <operator pos:start="601:38" pos:end="601:38">=</operator> <literal type="number" pos:start="601:40" pos:end="601:40">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="607:21" pos:end="619:21"><if pos:start="607:21" pos:end="611:21">if<condition pos:start="607:23" pos:end="607:32">(<expr pos:start="607:24" pos:end="607:31"><name pos:start="607:24" pos:end="607:31">skip_key</name></expr>)</condition> <block pos:start="607:34" pos:end="611:21">{<block_content pos:start="609:25" pos:end="609:32">

                        <expr_stmt pos:start="609:25" pos:end="609:32"><expr pos:start="609:25" pos:end="609:31"><name pos:start="609:25" pos:end="609:25">p</name> <operator pos:start="609:27" pos:end="609:27">=</operator> <name pos:start="609:29" pos:end="609:31">tmp</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="611:23" pos:end="619:21">else <block pos:start="611:28" pos:end="619:21">{<block_content pos:start="615:25" pos:end="617:69">

                        <comment type="block" pos:start="613:25" pos:end="613:40">/* has option */</comment>

                        <expr_stmt pos:start="615:25" pos:end="615:28"><expr pos:start="615:25" pos:end="615:27"><name pos:start="615:25" pos:end="615:25">p</name><operator pos:start="615:26" pos:end="615:27">++</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="617:25" pos:end="617:69"><expr pos:start="617:25" pos:end="617:68"><call pos:start="617:25" pos:end="617:68"><name pos:start="617:25" pos:end="617:33">qdict_put</name><argument_list pos:start="617:34" pos:end="617:68">(<argument pos:start="617:35" pos:end="617:39"><expr pos:start="617:35" pos:end="617:39"><name pos:start="617:35" pos:end="617:39">qdict</name></expr></argument>, <argument pos:start="617:42" pos:end="617:44"><expr pos:start="617:42" pos:end="617:44"><name pos:start="617:42" pos:end="617:44">key</name></expr></argument>, <argument pos:start="617:47" pos:end="617:67"><expr pos:start="617:47" pos:end="617:67"><call pos:start="617:47" pos:end="617:67"><name pos:start="617:47" pos:end="617:61">qbool_from_bool</name><argument_list pos:start="617:62" pos:end="617:67">(<argument pos:start="617:63" pos:end="617:66"><expr pos:start="617:63" pos:end="617:66"><name pos:start="617:63" pos:end="617:66">true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <break pos:start="625:13" pos:end="625:18">break;</break>

        <case pos:start="627:9" pos:end="627:17">case <expr pos:start="627:14" pos:end="627:16"><literal type="char" pos:start="627:14" pos:end="627:16">'S'</literal></expr>:</case>

            <block pos:start="629:13" pos:end="673:13">{<block_content pos:start="633:17" pos:end="671:25">

                <comment type="block" pos:start="631:17" pos:end="631:50">/* package all remaining string */</comment>

                <decl_stmt pos:start="633:17" pos:end="633:24"><decl pos:start="633:17" pos:end="633:23"><type pos:start="633:17" pos:end="633:19"><name pos:start="633:17" pos:end="633:19">int</name></type> <name pos:start="633:21" pos:end="633:23">len</name></decl>;</decl_stmt>



                <while pos:start="637:17" pos:end="641:17">while <condition pos:start="637:23" pos:end="637:40">(<expr pos:start="637:24" pos:end="637:39"><call pos:start="637:24" pos:end="637:39"><name pos:start="637:24" pos:end="637:35">qemu_isspace</name><argument_list pos:start="637:36" pos:end="637:39">(<argument pos:start="637:37" pos:end="637:38"><expr pos:start="637:37" pos:end="637:38"><operator pos:start="637:37" pos:end="637:37">*</operator><name pos:start="637:38" pos:end="637:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="637:42" pos:end="641:17">{<block_content pos:start="639:21" pos:end="639:24">

                    <expr_stmt pos:start="639:21" pos:end="639:24"><expr pos:start="639:21" pos:end="639:23"><name pos:start="639:21" pos:end="639:21">p</name><operator pos:start="639:22" pos:end="639:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="643:17" pos:end="655:17"><if pos:start="643:17" pos:end="655:17">if <condition pos:start="643:20" pos:end="643:36">(<expr pos:start="643:21" pos:end="643:35"><operator pos:start="643:21" pos:end="643:21">*</operator><name pos:start="643:22" pos:end="643:28">typestr</name> <operator pos:start="643:30" pos:end="643:31">==</operator> <literal type="char" pos:start="643:33" pos:end="643:35">'?'</literal></expr>)</condition> <block pos:start="643:38" pos:end="655:17">{<block_content pos:start="645:21" pos:end="653:21">

                    <expr_stmt pos:start="645:21" pos:end="645:30"><expr pos:start="645:21" pos:end="645:29"><name pos:start="645:21" pos:end="645:27">typestr</name><operator pos:start="645:28" pos:end="645:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="647:21" pos:end="653:21"><if pos:start="647:21" pos:end="653:21">if <condition pos:start="647:24" pos:end="647:35">(<expr pos:start="647:25" pos:end="647:34"><operator pos:start="647:25" pos:end="647:25">*</operator><name pos:start="647:26" pos:end="647:26">p</name> <operator pos:start="647:28" pos:end="647:29">==</operator> <literal type="char" pos:start="647:31" pos:end="647:34">'\0'</literal></expr>)</condition> <block pos:start="647:37" pos:end="653:21">{<block_content pos:start="651:25" pos:end="651:30">

                        <comment type="block" pos:start="649:25" pos:end="649:64">/* no remaining string: NULL argument */</comment>

                        <break pos:start="651:25" pos:end="651:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="657:17" pos:end="657:32"><expr pos:start="657:17" pos:end="657:31"><name pos:start="657:17" pos:end="657:19">len</name> <operator pos:start="657:21" pos:end="657:21">=</operator> <call pos:start="657:23" pos:end="657:31"><name pos:start="657:23" pos:end="657:28">strlen</name><argument_list pos:start="657:29" pos:end="657:31">(<argument pos:start="657:30" pos:end="657:30"><expr pos:start="657:30" pos:end="657:30"><name pos:start="657:30" pos:end="657:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="659:17" pos:end="667:17"><if pos:start="659:17" pos:end="667:17">if <condition pos:start="659:20" pos:end="659:29">(<expr pos:start="659:21" pos:end="659:28"><name pos:start="659:21" pos:end="659:23">len</name> <operator pos:start="659:25" pos:end="659:26">&lt;=</operator> <literal type="number" pos:start="659:28" pos:end="659:28">0</literal></expr>)</condition> <block pos:start="659:31" pos:end="667:17">{<block_content pos:start="661:21" pos:end="665:30">

                    <expr_stmt pos:start="661:21" pos:end="663:46"><expr pos:start="661:21" pos:end="663:45"><call pos:start="661:21" pos:end="663:45"><name pos:start="661:21" pos:end="661:34">monitor_printf</name><argument_list pos:start="661:35" pos:end="663:45">(<argument pos:start="661:36" pos:end="661:38"><expr pos:start="661:36" pos:end="661:38"><name pos:start="661:36" pos:end="661:38">mon</name></expr></argument>, <argument pos:start="661:41" pos:end="661:63"><expr pos:start="661:41" pos:end="661:63"><literal type="string" pos:start="661:41" pos:end="661:63">"%s: string expected\n"</literal></expr></argument>,

                                   <argument pos:start="663:36" pos:end="663:44"><expr pos:start="663:36" pos:end="663:44"><name pos:start="663:36" pos:end="663:44"><name pos:start="663:36" pos:end="663:38">cmd</name><operator pos:start="663:39" pos:end="663:40">-&gt;</operator><name pos:start="663:41" pos:end="663:44">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="665:21" pos:end="665:30">goto <name pos:start="665:26" pos:end="665:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="669:17" pos:end="669:59"><expr pos:start="669:17" pos:end="669:58"><call pos:start="669:17" pos:end="669:58"><name pos:start="669:17" pos:end="669:25">qdict_put</name><argument_list pos:start="669:26" pos:end="669:58">(<argument pos:start="669:27" pos:end="669:31"><expr pos:start="669:27" pos:end="669:31"><name pos:start="669:27" pos:end="669:31">qdict</name></expr></argument>, <argument pos:start="669:34" pos:end="669:36"><expr pos:start="669:34" pos:end="669:36"><name pos:start="669:34" pos:end="669:36">key</name></expr></argument>, <argument pos:start="669:39" pos:end="669:57"><expr pos:start="669:39" pos:end="669:57"><call pos:start="669:39" pos:end="669:57"><name pos:start="669:39" pos:end="669:54">qstring_from_str</name><argument_list pos:start="669:55" pos:end="669:57">(<argument pos:start="669:56" pos:end="669:56"><expr pos:start="669:56" pos:end="669:56"><name pos:start="669:56" pos:end="669:56">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="671:17" pos:end="671:25"><expr pos:start="671:17" pos:end="671:24"><name pos:start="671:17" pos:end="671:17">p</name> <operator pos:start="671:19" pos:end="671:20">+=</operator> <name pos:start="671:22" pos:end="671:24">len</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="675:13" pos:end="675:18">break;</break>

        <default pos:start="677:9" pos:end="677:16">default:</default>

        <label pos:start="679:9" pos:end="679:17"><name pos:start="679:9" pos:end="679:16">bad_type</name>:</label>

            <expr_stmt pos:start="681:13" pos:end="681:73"><expr pos:start="681:13" pos:end="681:72"><call pos:start="681:13" pos:end="681:72"><name pos:start="681:13" pos:end="681:26">monitor_printf</name><argument_list pos:start="681:27" pos:end="681:72">(<argument pos:start="681:28" pos:end="681:30"><expr pos:start="681:28" pos:end="681:30"><name pos:start="681:28" pos:end="681:30">mon</name></expr></argument>, <argument pos:start="681:33" pos:end="681:57"><expr pos:start="681:33" pos:end="681:57"><literal type="string" pos:start="681:33" pos:end="681:57">"%s: unknown type '%c'\n"</literal></expr></argument>, <argument pos:start="681:60" pos:end="681:68"><expr pos:start="681:60" pos:end="681:68"><name pos:start="681:60" pos:end="681:68"><name pos:start="681:60" pos:end="681:62">cmd</name><operator pos:start="681:63" pos:end="681:64">-&gt;</operator><name pos:start="681:65" pos:end="681:68">name</name></name></expr></argument>, <argument pos:start="681:71" pos:end="681:71"><expr pos:start="681:71" pos:end="681:71"><name pos:start="681:71" pos:end="681:71">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="683:13" pos:end="683:22">goto <name pos:start="683:18" pos:end="683:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <expr_stmt pos:start="687:9" pos:end="687:20"><expr pos:start="687:9" pos:end="687:19"><call pos:start="687:9" pos:end="687:19"><name pos:start="687:9" pos:end="687:14">g_free</name><argument_list pos:start="687:15" pos:end="687:19">(<argument pos:start="687:16" pos:end="687:18"><expr pos:start="687:16" pos:end="687:18"><name pos:start="687:16" pos:end="687:18">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="689:9" pos:end="689:19"><expr pos:start="689:9" pos:end="689:18"><name pos:start="689:9" pos:end="689:11">key</name> <operator pos:start="689:13" pos:end="689:13">=</operator> <name pos:start="689:15" pos:end="689:18">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="693:5" pos:end="693:46">/* check that all arguments were parsed */</comment>

    <while pos:start="695:5" pos:end="697:12">while <condition pos:start="695:11" pos:end="695:28">(<expr pos:start="695:12" pos:end="695:27"><call pos:start="695:12" pos:end="695:27"><name pos:start="695:12" pos:end="695:23">qemu_isspace</name><argument_list pos:start="695:24" pos:end="695:27">(<argument pos:start="695:25" pos:end="695:26"><expr pos:start="695:25" pos:end="695:26"><operator pos:start="695:25" pos:end="695:25">*</operator><name pos:start="695:26" pos:end="695:26">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="697:9" pos:end="697:12"><block_content pos:start="697:9" pos:end="697:12">

        <expr_stmt pos:start="697:9" pos:end="697:12"><expr pos:start="697:9" pos:end="697:11"><name pos:start="697:9" pos:end="697:9">p</name><operator pos:start="697:10" pos:end="697:11">++</operator></expr>;</expr_stmt></block_content></block></while>

    <if_stmt pos:start="699:5" pos:end="707:5"><if pos:start="699:5" pos:end="707:5">if <condition pos:start="699:8" pos:end="699:19">(<expr pos:start="699:9" pos:end="699:18"><operator pos:start="699:9" pos:end="699:9">*</operator><name pos:start="699:10" pos:end="699:10">p</name> <operator pos:start="699:12" pos:end="699:13">!=</operator> <literal type="char" pos:start="699:15" pos:end="699:18">'\0'</literal></expr>)</condition> <block pos:start="699:21" pos:end="707:5">{<block_content pos:start="701:9" pos:end="705:18">

        <expr_stmt pos:start="701:9" pos:end="703:34"><expr pos:start="701:9" pos:end="703:33"><call pos:start="701:9" pos:end="703:33"><name pos:start="701:9" pos:end="701:22">monitor_printf</name><argument_list pos:start="701:23" pos:end="703:33">(<argument pos:start="701:24" pos:end="701:26"><expr pos:start="701:24" pos:end="701:26"><name pos:start="701:24" pos:end="701:26">mon</name></expr></argument>, <argument pos:start="701:29" pos:end="701:76"><expr pos:start="701:29" pos:end="701:76"><literal type="string" pos:start="701:29" pos:end="701:76">"%s: extraneous characters at the end of line\n"</literal></expr></argument>,

                       <argument pos:start="703:24" pos:end="703:32"><expr pos:start="703:24" pos:end="703:32"><name pos:start="703:24" pos:end="703:32"><name pos:start="703:24" pos:end="703:26">cmd</name><operator pos:start="703:27" pos:end="703:28">-&gt;</operator><name pos:start="703:29" pos:end="703:32">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="705:9" pos:end="705:18">goto <name pos:start="705:14" pos:end="705:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="711:5" pos:end="711:17">return <expr pos:start="711:12" pos:end="711:16"><name pos:start="711:12" pos:end="711:16">qdict</name></expr>;</return>



<label pos:start="715:1" pos:end="715:5"><name pos:start="715:1" pos:end="715:4">fail</name>:</label>

    <expr_stmt pos:start="717:5" pos:end="717:19"><expr pos:start="717:5" pos:end="717:18"><call pos:start="717:5" pos:end="717:18"><name pos:start="717:5" pos:end="717:11">QDECREF</name><argument_list pos:start="717:12" pos:end="717:18">(<argument pos:start="717:13" pos:end="717:17"><expr pos:start="717:13" pos:end="717:17"><name pos:start="717:13" pos:end="717:17">qdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="719:5" pos:end="719:16"><expr pos:start="719:5" pos:end="719:15"><call pos:start="719:5" pos:end="719:15"><name pos:start="719:5" pos:end="719:10">g_free</name><argument_list pos:start="719:11" pos:end="719:15">(<argument pos:start="719:12" pos:end="719:14"><expr pos:start="719:12" pos:end="719:14"><name pos:start="719:12" pos:end="719:14">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="721:5" pos:end="721:16">return <expr pos:start="721:12" pos:end="721:15"><name pos:start="721:12" pos:end="721:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
