<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22647.c" pos:tabs="8"><macro pos:start="1:1" pos:end="4:0"><name pos:start="1:1" pos:end="1:16">HELPER_LD_ATOMIC</name><argument_list pos:start="1:17" pos:end="4:0">(<argument pos:start="1:18" pos:end="1:19">ll</argument>, <argument pos:start="1:22" pos:end="1:23">lw</argument>)</argument_list></macro>

<cpp:ifdef pos:start="3:1" pos:end="3:20">#<cpp:directive pos:start="3:2" pos:end="3:6">ifdef</cpp:directive> <name pos:start="3:8" pos:end="3:20">TARGET_MIPS64</name></cpp:ifdef>

<macro pos:start="5:1" pos:end="50:0"><name pos:start="5:1" pos:end="5:16">HELPER_LD_ATOMIC</name><argument_list pos:start="5:17" pos:end="50:0">(<argument pos:start="5:18" pos:end="5:20">lld</argument>, <argument pos:start="5:23" pos:end="5:24">ld</argument>)</argument_list></macro>

<cpp:endif pos:start="7:1" pos:end="7:6">#<cpp:directive pos:start="7:2" pos:end="7:6">endif</cpp:directive></cpp:endif>

<cpp:undef pos:start="9:1" pos:end="9:23">#<cpp:directive pos:start="9:2" pos:end="9:6">undef</cpp:directive> <name pos:start="9:8" pos:end="9:23">HELPER_LD_ATOMIC</name></cpp:undef>



<cpp:define pos:start="13:1" pos:end="49:1">#<cpp:directive pos:start="13:2" pos:end="13:7">define</cpp:directive> <cpp:macro pos:start="13:9" pos:end="13:56"><name pos:start="13:9" pos:end="13:24">HELPER_ST_ATOMIC</name><parameter_list pos:start="13:25" pos:end="13:56">(<parameter pos:start="13:26" pos:end="13:29"><type pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">name</name></type></parameter>, <parameter pos:start="13:32" pos:end="13:38"><type pos:start="13:32" pos:end="13:38"><name pos:start="13:32" pos:end="13:38">ld_insn</name></type></parameter>, <parameter pos:start="13:41" pos:end="13:47"><type pos:start="13:41" pos:end="13:47"><name pos:start="13:41" pos:end="13:47">st_insn</name></type></parameter>, <parameter pos:start="13:50" pos:end="13:55"><type pos:start="13:50" pos:end="13:55"><name pos:start="13:50" pos:end="13:55">almask</name></type></parameter>)</parameter_list></cpp:macro>                      \

<cpp:value pos:start="15:1" pos:end="49:1">target_ulong helper_##name(CPUMIPSState *env, target_ulong arg1,              \

                           target_ulong arg2, int mem_idx)                    \

{                                                                             \

    target_long tmp;                                                          \

                                                                              \

    if (arg2 &amp; almask) {                                                      \

        env-&gt;CP0_BadVAddr = arg2;                                             \

        helper_raise_exception(env, EXCP_AdES);                               \

    }                                                                         \

    if (do_translate_address(env, arg2, 1) == env-&gt;lladdr) {                  \

        tmp = do_##ld_insn(env, arg2, mem_idx);                               \

        if (tmp == env-&gt;llval) {                                              \

            do_##st_insn(env, arg2, arg1, mem_idx);                           \

            return 1;                                                         \

        }                                                                     \

    }                                                                         \

    return 0;                                                                 \

}</cpp:value></cpp:define>

<macro pos:start="51:1" pos:end="54:0"><name pos:start="51:1" pos:end="51:16">HELPER_ST_ATOMIC</name><argument_list pos:start="51:17" pos:end="54:0">(<argument pos:start="51:18" pos:end="51:19">sc</argument>, <argument pos:start="51:22" pos:end="51:23">lw</argument>, <argument pos:start="51:26" pos:end="51:27">sw</argument>, <argument pos:start="51:30" pos:end="51:32"><literal type="number" pos:start="51:30" pos:end="51:32">0x3</literal></argument>)</argument_list></macro>

<cpp:ifdef pos:start="53:1" pos:end="53:20">#<cpp:directive pos:start="53:2" pos:end="53:6">ifdef</cpp:directive> <name pos:start="53:8" pos:end="53:20">TARGET_MIPS64</name></cpp:ifdef>

<macro pos:start="55:1" pos:end="78:0"><name pos:start="55:1" pos:end="55:16">HELPER_ST_ATOMIC</name><argument_list pos:start="55:17" pos:end="78:0">(<argument pos:start="55:18" pos:end="55:20">scd</argument>, <argument pos:start="55:23" pos:end="55:24">ld</argument>, <argument pos:start="55:27" pos:end="55:28">sd</argument>, <argument pos:start="55:31" pos:end="55:33"><literal type="number" pos:start="55:31" pos:end="55:33">0x7</literal></argument>)</argument_list></macro>

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>

<cpp:undef pos:start="59:1" pos:end="59:23">#<cpp:directive pos:start="59:2" pos:end="59:6">undef</cpp:directive> <name pos:start="59:8" pos:end="59:23">HELPER_ST_ATOMIC</name></cpp:undef>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="65:1" pos:end="65:29">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

<cpp:define pos:start="67:1" pos:end="67:30">#<cpp:directive pos:start="67:2" pos:end="67:7">define</cpp:directive> <cpp:macro pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:17">GET_LMASK</name><parameter_list pos:start="67:18" pos:end="67:20">(<parameter pos:start="67:19" pos:end="67:19"><type pos:start="67:19" pos:end="67:19"><name pos:start="67:19" pos:end="67:19">v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="67:22" pos:end="67:30">((v) &amp; 3)</cpp:value></cpp:define>

<cpp:define pos:start="69:1" pos:end="69:50">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:32"><name pos:start="69:9" pos:end="69:18">GET_OFFSET</name><parameter_list pos:start="69:19" pos:end="69:32">(<parameter pos:start="69:20" pos:end="69:23"><type pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">addr</name></type></parameter>, <parameter pos:start="69:26" pos:end="69:31"><type pos:start="69:26" pos:end="69:31"><name pos:start="69:26" pos:end="69:31">offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="69:34" pos:end="69:50">(addr + (offset))</cpp:value></cpp:define>

<cpp:else pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="73:1" pos:end="73:36">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:17">GET_LMASK</name><parameter_list pos:start="73:18" pos:end="73:20">(<parameter pos:start="73:19" pos:end="73:19"><type pos:start="73:19" pos:end="73:19"><name pos:start="73:19" pos:end="73:19">v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="73:22" pos:end="73:36">(((v) &amp; 3) ^ 3)</cpp:value></cpp:define>

<cpp:define pos:start="75:1" pos:end="75:50">#<cpp:directive pos:start="75:2" pos:end="75:7">define</cpp:directive> <cpp:macro pos:start="75:9" pos:end="75:32"><name pos:start="75:9" pos:end="75:18">GET_OFFSET</name><parameter_list pos:start="75:19" pos:end="75:32">(<parameter pos:start="75:20" pos:end="75:23"><type pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">addr</name></type></parameter>, <parameter pos:start="75:26" pos:end="75:31"><type pos:start="75:26" pos:end="75:31"><name pos:start="75:26" pos:end="75:31">offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="75:34" pos:end="75:50">(addr - (offset))</cpp:value></cpp:define>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>



<function pos:start="81:1" pos:end="127:1"><type pos:start="81:1" pos:end="81:12"><name pos:start="81:1" pos:end="81:12">target_ulong</name></type> <name pos:start="81:14" pos:end="81:23">helper_lwl</name><parameter_list pos:start="81:24" pos:end="83:55">(<parameter pos:start="81:25" pos:end="81:41"><decl pos:start="81:25" pos:end="81:41"><type pos:start="81:25" pos:end="81:41"><name pos:start="81:25" pos:end="81:36">CPUMIPSState</name> <modifier pos:start="81:38" pos:end="81:38">*</modifier></type><name pos:start="81:39" pos:end="81:41">env</name></decl></parameter>, <parameter pos:start="81:44" pos:end="81:60"><decl pos:start="81:44" pos:end="81:60"><type pos:start="81:44" pos:end="81:60"><name pos:start="81:44" pos:end="81:55">target_ulong</name></type> <name pos:start="81:57" pos:end="81:60">arg1</name></decl></parameter>,

                        <parameter pos:start="83:25" pos:end="83:41"><decl pos:start="83:25" pos:end="83:41"><type pos:start="83:25" pos:end="83:41"><name pos:start="83:25" pos:end="83:36">target_ulong</name></type> <name pos:start="83:38" pos:end="83:41">arg2</name></decl></parameter>, <parameter pos:start="83:44" pos:end="83:54"><decl pos:start="83:44" pos:end="83:54"><type pos:start="83:44" pos:end="83:54"><name pos:start="83:44" pos:end="83:46">int</name></type> <name pos:start="83:48" pos:end="83:54">mem_idx</name></decl></parameter>)</parameter_list>

<block pos:start="85:1" pos:end="127:1">{<block_content pos:start="87:5" pos:end="125:25">

    <decl_stmt pos:start="87:5" pos:end="87:21"><decl pos:start="87:5" pos:end="87:20"><type pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:16">target_ulong</name></type> <name pos:start="87:18" pos:end="87:20">tmp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:37"><expr pos:start="91:5" pos:end="91:36"><name pos:start="91:5" pos:end="91:7">tmp</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:36"><name pos:start="91:11" pos:end="91:16">do_lbu</name><argument_list pos:start="91:17" pos:end="91:36">(<argument pos:start="91:18" pos:end="91:20"><expr pos:start="91:18" pos:end="91:20"><name pos:start="91:18" pos:end="91:20">env</name></expr></argument>, <argument pos:start="91:23" pos:end="91:26"><expr pos:start="91:23" pos:end="91:26"><name pos:start="91:23" pos:end="91:26">arg2</name></expr></argument>, <argument pos:start="91:29" pos:end="91:35"><expr pos:start="91:29" pos:end="91:35"><name pos:start="91:29" pos:end="91:35">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:45"><expr pos:start="93:5" pos:end="93:44"><name pos:start="93:5" pos:end="93:8">arg1</name> <operator pos:start="93:10" pos:end="93:10">=</operator> <operator pos:start="93:12" pos:end="93:12">(</operator><name pos:start="93:13" pos:end="93:16">arg1</name> <operator pos:start="93:18" pos:end="93:18">&amp;</operator> <literal type="number" pos:start="93:20" pos:end="93:29">0x00FFFFFF</literal><operator pos:start="93:30" pos:end="93:30">)</operator> <operator pos:start="93:32" pos:end="93:32">|</operator> <operator pos:start="93:34" pos:end="93:34">(</operator><name pos:start="93:35" pos:end="93:37">tmp</name> <operator pos:start="93:39" pos:end="93:40">&lt;&lt;</operator> <literal type="number" pos:start="93:42" pos:end="93:43">24</literal><operator pos:start="93:44" pos:end="93:44">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:29">(<expr pos:start="97:9" pos:end="97:28"><call pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:17">GET_LMASK</name><argument_list pos:start="97:18" pos:end="97:23">(<argument pos:start="97:19" pos:end="97:22"><expr pos:start="97:19" pos:end="97:22"><name pos:start="97:19" pos:end="97:22">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="97:25" pos:end="97:26">&lt;=</operator> <literal type="number" pos:start="97:28" pos:end="97:28">2</literal></expr>)</condition> <block pos:start="97:31" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:49">

        <expr_stmt pos:start="99:9" pos:end="99:56"><expr pos:start="99:9" pos:end="99:55"><name pos:start="99:9" pos:end="99:11">tmp</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="99:55"><name pos:start="99:15" pos:end="99:20">do_lbu</name><argument_list pos:start="99:21" pos:end="99:55">(<argument pos:start="99:22" pos:end="99:24"><expr pos:start="99:22" pos:end="99:24"><name pos:start="99:22" pos:end="99:24">env</name></expr></argument>, <argument pos:start="99:27" pos:end="99:45"><expr pos:start="99:27" pos:end="99:45"><call pos:start="99:27" pos:end="99:45"><name pos:start="99:27" pos:end="99:36">GET_OFFSET</name><argument_list pos:start="99:37" pos:end="99:45">(<argument pos:start="99:38" pos:end="99:41"><expr pos:start="99:38" pos:end="99:41"><name pos:start="99:38" pos:end="99:41">arg2</name></expr></argument>, <argument pos:start="99:44" pos:end="99:44"><expr pos:start="99:44" pos:end="99:44"><literal type="number" pos:start="99:44" pos:end="99:44">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:48" pos:end="99:54"><expr pos:start="99:48" pos:end="99:54"><name pos:start="99:48" pos:end="99:54">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:49"><expr pos:start="101:9" pos:end="101:48"><name pos:start="101:9" pos:end="101:12">arg1</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <operator pos:start="101:16" pos:end="101:16">(</operator><name pos:start="101:17" pos:end="101:20">arg1</name> <operator pos:start="101:22" pos:end="101:22">&amp;</operator> <literal type="number" pos:start="101:24" pos:end="101:33">0xFF00FFFF</literal><operator pos:start="101:34" pos:end="101:34">)</operator> <operator pos:start="101:36" pos:end="101:36">|</operator> <operator pos:start="101:38" pos:end="101:38">(</operator><name pos:start="101:39" pos:end="101:41">tmp</name> <operator pos:start="101:43" pos:end="101:44">&lt;&lt;</operator> <literal type="number" pos:start="101:46" pos:end="101:47">16</literal><operator pos:start="101:48" pos:end="101:48">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:29">(<expr pos:start="107:9" pos:end="107:28"><call pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:17">GET_LMASK</name><argument_list pos:start="107:18" pos:end="107:23">(<argument pos:start="107:19" pos:end="107:22"><expr pos:start="107:19" pos:end="107:22"><name pos:start="107:19" pos:end="107:22">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="107:25" pos:end="107:26">&lt;=</operator> <literal type="number" pos:start="107:28" pos:end="107:28">1</literal></expr>)</condition> <block pos:start="107:31" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:48">

        <expr_stmt pos:start="109:9" pos:end="109:56"><expr pos:start="109:9" pos:end="109:55"><name pos:start="109:9" pos:end="109:11">tmp</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <call pos:start="109:15" pos:end="109:55"><name pos:start="109:15" pos:end="109:20">do_lbu</name><argument_list pos:start="109:21" pos:end="109:55">(<argument pos:start="109:22" pos:end="109:24"><expr pos:start="109:22" pos:end="109:24"><name pos:start="109:22" pos:end="109:24">env</name></expr></argument>, <argument pos:start="109:27" pos:end="109:45"><expr pos:start="109:27" pos:end="109:45"><call pos:start="109:27" pos:end="109:45"><name pos:start="109:27" pos:end="109:36">GET_OFFSET</name><argument_list pos:start="109:37" pos:end="109:45">(<argument pos:start="109:38" pos:end="109:41"><expr pos:start="109:38" pos:end="109:41"><name pos:start="109:38" pos:end="109:41">arg2</name></expr></argument>, <argument pos:start="109:44" pos:end="109:44"><expr pos:start="109:44" pos:end="109:44"><literal type="number" pos:start="109:44" pos:end="109:44">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:48" pos:end="109:54"><expr pos:start="109:48" pos:end="109:54"><name pos:start="109:48" pos:end="109:54">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:48"><expr pos:start="111:9" pos:end="111:47"><name pos:start="111:9" pos:end="111:12">arg1</name> <operator pos:start="111:14" pos:end="111:14">=</operator> <operator pos:start="111:16" pos:end="111:16">(</operator><name pos:start="111:17" pos:end="111:20">arg1</name> <operator pos:start="111:22" pos:end="111:22">&amp;</operator> <literal type="number" pos:start="111:24" pos:end="111:33">0xFFFF00FF</literal><operator pos:start="111:34" pos:end="111:34">)</operator> <operator pos:start="111:36" pos:end="111:36">|</operator> <operator pos:start="111:38" pos:end="111:38">(</operator><name pos:start="111:39" pos:end="111:41">tmp</name> <operator pos:start="111:43" pos:end="111:44">&lt;&lt;</operator> <literal type="number" pos:start="111:46" pos:end="111:46">8</literal><operator pos:start="111:47" pos:end="111:47">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:29">(<expr pos:start="117:9" pos:end="117:28"><call pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:17">GET_LMASK</name><argument_list pos:start="117:18" pos:end="117:23">(<argument pos:start="117:19" pos:end="117:22"><expr pos:start="117:19" pos:end="117:22"><name pos:start="117:19" pos:end="117:22">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="117:25" pos:end="117:26">==</operator> <literal type="number" pos:start="117:28" pos:end="117:28">0</literal></expr>)</condition> <block pos:start="117:31" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:41">

        <expr_stmt pos:start="119:9" pos:end="119:56"><expr pos:start="119:9" pos:end="119:55"><name pos:start="119:9" pos:end="119:11">tmp</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:55"><name pos:start="119:15" pos:end="119:20">do_lbu</name><argument_list pos:start="119:21" pos:end="119:55">(<argument pos:start="119:22" pos:end="119:24"><expr pos:start="119:22" pos:end="119:24"><name pos:start="119:22" pos:end="119:24">env</name></expr></argument>, <argument pos:start="119:27" pos:end="119:45"><expr pos:start="119:27" pos:end="119:45"><call pos:start="119:27" pos:end="119:45"><name pos:start="119:27" pos:end="119:36">GET_OFFSET</name><argument_list pos:start="119:37" pos:end="119:45">(<argument pos:start="119:38" pos:end="119:41"><expr pos:start="119:38" pos:end="119:41"><name pos:start="119:38" pos:end="119:41">arg2</name></expr></argument>, <argument pos:start="119:44" pos:end="119:44"><expr pos:start="119:44" pos:end="119:44"><literal type="number" pos:start="119:44" pos:end="119:44">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="119:48" pos:end="119:54"><expr pos:start="119:48" pos:end="119:54"><name pos:start="119:48" pos:end="119:54">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:41"><expr pos:start="121:9" pos:end="121:40"><name pos:start="121:9" pos:end="121:12">arg1</name> <operator pos:start="121:14" pos:end="121:14">=</operator> <operator pos:start="121:16" pos:end="121:16">(</operator><name pos:start="121:17" pos:end="121:20">arg1</name> <operator pos:start="121:22" pos:end="121:22">&amp;</operator> <literal type="number" pos:start="121:24" pos:end="121:33">0xFFFFFF00</literal><operator pos:start="121:34" pos:end="121:34">)</operator> <operator pos:start="121:36" pos:end="121:36">|</operator> <name pos:start="121:38" pos:end="121:40">tmp</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="125:5" pos:end="125:25">return <expr pos:start="125:12" pos:end="125:24"><operator pos:start="125:12" pos:end="125:12">(</operator><name pos:start="125:13" pos:end="125:19">int32_t</name><operator pos:start="125:20" pos:end="125:20">)</operator><name pos:start="125:21" pos:end="125:24">arg1</name></expr>;</return>

</block_content>}</block></function>
</unit>
