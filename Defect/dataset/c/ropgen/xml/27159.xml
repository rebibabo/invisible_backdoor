<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27159.c" pos:tabs="8"><function pos:start="1:1" pos:end="250:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">tak_read_header</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="250:1">{<block_content pos:start="5:5" pos:end="248:23">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">TAKDemuxContext</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:23">tc</name> <init pos:start="5:25" pos:end="5:38">= <expr pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:27">s</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name>     <init pos:start="7:25" pos:end="7:31">= <expr pos:start="7:27" pos:end="7:31"><name pos:start="7:27" pos:end="7:31"><name pos:start="7:27" pos:end="7:27">s</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:31">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">GetBitContext</name></type> <name pos:start="9:19" pos:end="9:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">AVStream</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">buffer</name> <init pos:start="13:21" pos:end="13:26">= <expr pos:start="13:23" pos:end="13:26"><name pos:start="13:23" pos:end="13:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:35"><expr pos:start="19:5" pos:end="19:34"><name pos:start="19:5" pos:end="19:6">st</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="19:34"><name pos:start="19:10" pos:end="19:28">avformat_new_stream</name><argument_list pos:start="19:29" pos:end="19:34">(<argument pos:start="19:30" pos:end="19:30"><expr pos:start="19:30" pos:end="19:30"><name pos:start="19:30" pos:end="19:30">s</name></expr></argument>, <argument pos:start="19:33" pos:end="19:33"><expr pos:start="19:33" pos:end="19:33"><literal type="number" pos:start="19:33" pos:end="19:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:31"><if pos:start="21:5" pos:end="23:31">if <condition pos:start="21:8" pos:end="21:12">(<expr pos:start="21:9" pos:end="21:11"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:11">st</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:31"><block_content pos:start="23:9" pos:end="23:31">

        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">AVERROR</name><argument_list pos:start="23:23" pos:end="23:30">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:6">st</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:13">codec</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:25">codec_type</name></name> <operator pos:start="27:27" pos:end="27:27">=</operator> <name pos:start="27:29" pos:end="27:46">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:44"><expr pos:start="29:5" pos:end="29:43"><name pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:6">st</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:13">codec</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:23">codec_id</name></name>   <operator pos:start="29:27" pos:end="29:27">=</operator> <name pos:start="29:29" pos:end="29:43">AV_CODEC_ID_TAK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:6">st</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:20">need_parsing</name></name>      <operator pos:start="31:27" pos:end="31:27">=</operator> <name pos:start="31:29" pos:end="31:51">AVSTREAM_PARSE_FULL_RAW</name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:6">tc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:19">mlast_frame</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:51">(<expr pos:start="37:9" pos:end="37:50"><call pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:17">avio_rl32</name><argument_list pos:start="37:18" pos:end="37:21">(<argument pos:start="37:19" pos:end="37:20"><expr pos:start="37:19" pos:end="37:20"><name pos:start="37:19" pos:end="37:20">pb</name></expr></argument>)</argument_list></call> <operator pos:start="37:23" pos:end="37:24">!=</operator> <call pos:start="37:26" pos:end="37:50"><name pos:start="37:26" pos:end="37:30">MKTAG</name><argument_list pos:start="37:31" pos:end="37:50">(<argument pos:start="37:32" pos:end="37:34"><expr pos:start="37:32" pos:end="37:34"><literal type="char" pos:start="37:32" pos:end="37:34">'t'</literal></expr></argument>, <argument pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><literal type="char" pos:start="37:37" pos:end="37:39">'B'</literal></expr></argument>, <argument pos:start="37:42" pos:end="37:44"><expr pos:start="37:42" pos:end="37:44"><literal type="char" pos:start="37:42" pos:end="37:44">'a'</literal></expr></argument>, <argument pos:start="37:47" pos:end="37:49"><expr pos:start="37:47" pos:end="37:49"><literal type="char" pos:start="37:47" pos:end="37:49">'K'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:53" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:17">

        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><call pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:17">avio_seek</name><argument_list pos:start="39:18" pos:end="39:35">(<argument pos:start="39:19" pos:end="39:20"><expr pos:start="39:19" pos:end="39:20"><name pos:start="39:19" pos:end="39:20">pb</name></expr></argument>, <argument pos:start="39:23" pos:end="39:24"><expr pos:start="39:23" pos:end="39:24"><operator pos:start="39:23" pos:end="39:23">-</operator><literal type="number" pos:start="39:24" pos:end="39:24">4</literal></expr></argument>, <argument pos:start="39:27" pos:end="39:34"><expr pos:start="39:27" pos:end="39:34"><name pos:start="39:27" pos:end="39:34">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:17">return <expr pos:start="41:16" pos:end="41:16"><literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="47:5" pos:end="244:5">while <condition pos:start="47:11" pos:end="47:25">(<expr pos:start="47:12" pos:end="47:24"><operator pos:start="47:12" pos:end="47:12">!</operator><call pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:20">url_feof</name><argument_list pos:start="47:21" pos:end="47:24">(<argument pos:start="47:22" pos:end="47:23"><expr pos:start="47:22" pos:end="47:23"><name pos:start="47:22" pos:end="47:23">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:27" pos:end="244:5">{<block_content pos:start="49:9" pos:end="242:9">

        <decl_stmt pos:start="49:9" pos:end="49:34"><decl pos:start="49:9" pos:end="49:33"><type pos:start="49:9" pos:end="49:28"><name pos:start="49:9" pos:end="49:28"><name pos:start="49:9" pos:end="49:12">enum</name> <name pos:start="49:14" pos:end="49:28">TAKMetaDataType</name></name></type> <name pos:start="49:30" pos:end="49:33">type</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:17"><decl pos:start="51:9" pos:end="51:16"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:16">size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:12">type</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <call pos:start="55:16" pos:end="55:26"><name pos:start="55:16" pos:end="55:22">avio_r8</name><argument_list pos:start="55:23" pos:end="55:26">(<argument pos:start="55:24" pos:end="55:25"><expr pos:start="55:24" pos:end="55:25"><name pos:start="55:24" pos:end="55:25">pb</name></expr></argument>)</argument_list></call> <operator pos:start="55:28" pos:end="55:28">&amp;</operator> <literal type="number" pos:start="55:30" pos:end="55:33">0x7f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:12">size</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <call pos:start="57:16" pos:end="57:28"><name pos:start="57:16" pos:end="57:24">avio_rl24</name><argument_list pos:start="57:25" pos:end="57:28">(<argument pos:start="57:26" pos:end="57:27"><expr pos:start="57:26" pos:end="57:27"><name pos:start="57:26" pos:end="57:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="61:9" pos:end="184:9">switch <condition pos:start="61:16" pos:end="61:21">(<expr pos:start="61:17" pos:end="61:20"><name pos:start="61:17" pos:end="61:20">type</name></expr>)</condition> <block pos:start="61:23" pos:end="184:9">{<block_content pos:start="63:9" pos:end="182:27">

        <case pos:start="63:9" pos:end="63:37">case <expr pos:start="63:14" pos:end="63:36"><name pos:start="63:14" pos:end="63:36">TAK_METADATA_STREAMINFO</name></expr>:</case>

        <case pos:start="65:9" pos:end="65:37">case <expr pos:start="65:14" pos:end="65:36"><name pos:start="65:14" pos:end="65:36">TAK_METADATA_LAST_FRAME</name></expr>:</case>

        <case pos:start="67:9" pos:end="67:34">case <expr pos:start="67:14" pos:end="67:33"><name pos:start="67:14" pos:end="67:33">TAK_METADATA_ENCODER</name></expr>:</case>

            <if_stmt pos:start="69:13" pos:end="71:43"><if pos:start="69:13" pos:end="71:43">if <condition pos:start="69:16" pos:end="69:26">(<expr pos:start="69:17" pos:end="69:25"><name pos:start="69:17" pos:end="69:20">size</name> <operator pos:start="69:22" pos:end="69:23">&lt;=</operator> <literal type="number" pos:start="69:25" pos:end="69:25">3</literal></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:43"><block_content pos:start="71:17" pos:end="71:43">

                <return pos:start="71:17" pos:end="71:43">return <expr pos:start="71:24" pos:end="71:42"><name pos:start="71:24" pos:end="71:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="75:13" pos:end="75:72"><expr pos:start="75:13" pos:end="75:71"><name pos:start="75:13" pos:end="75:18">buffer</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <call pos:start="75:22" pos:end="75:71"><name pos:start="75:22" pos:end="75:30">av_malloc</name><argument_list pos:start="75:31" pos:end="75:71">(<argument pos:start="75:32" pos:end="75:70"><expr pos:start="75:32" pos:end="75:70"><name pos:start="75:32" pos:end="75:35">size</name> <operator pos:start="75:37" pos:end="75:37">-</operator> <literal type="number" pos:start="75:39" pos:end="75:41">3</literal> <operator pos:start="75:41" pos:end="75:41">+</operator> <name pos:start="75:43" pos:end="75:70">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="77:13" pos:end="79:39"><if pos:start="77:13" pos:end="79:39">if <condition pos:start="77:16" pos:end="77:24">(<expr pos:start="77:17" pos:end="77:23"><operator pos:start="77:17" pos:end="77:17">!</operator><name pos:start="77:18" pos:end="77:23">buffer</name></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:39"><block_content pos:start="79:17" pos:end="79:39">

                <return pos:start="79:17" pos:end="79:39">return <expr pos:start="79:24" pos:end="79:38"><call pos:start="79:24" pos:end="79:38"><name pos:start="79:24" pos:end="79:30">AVERROR</name><argument_list pos:start="79:31" pos:end="79:38">(<argument pos:start="79:32" pos:end="79:37"><expr pos:start="79:32" pos:end="79:37"><name pos:start="79:32" pos:end="79:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>




            <expr_stmt pos:start="84:13" pos:end="84:61"><expr pos:start="84:13" pos:end="84:60"><call pos:start="84:13" pos:end="84:60"><name pos:start="84:13" pos:end="84:30">ffio_init_checksum</name><argument_list pos:start="84:31" pos:end="84:60">(<argument pos:start="84:32" pos:end="84:33"><expr pos:start="84:32" pos:end="84:33"><name pos:start="84:32" pos:end="84:33">pb</name></expr></argument>, <argument pos:start="84:36" pos:end="84:48"><expr pos:start="84:36" pos:end="84:48"><name pos:start="84:36" pos:end="84:48">tak_check_crc</name></expr></argument>, <argument pos:start="84:51" pos:end="84:59"><expr pos:start="84:51" pos:end="84:59"><literal type="number" pos:start="84:51" pos:end="84:59">0xCE04B7U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="86:13" pos:end="92:13"><if pos:start="86:13" pos:end="92:13">if <condition pos:start="86:16" pos:end="86:60">(<expr pos:start="86:17" pos:end="86:59"><call pos:start="86:17" pos:end="86:47"><name pos:start="86:17" pos:end="86:25">avio_read</name><argument_list pos:start="86:26" pos:end="86:47">(<argument pos:start="86:27" pos:end="86:28"><expr pos:start="86:27" pos:end="86:28"><name pos:start="86:27" pos:end="86:28">pb</name></expr></argument>, <argument pos:start="86:31" pos:end="86:36"><expr pos:start="86:31" pos:end="86:36"><name pos:start="86:31" pos:end="86:36">buffer</name></expr></argument>, <argument pos:start="86:39" pos:end="86:46"><expr pos:start="86:39" pos:end="86:46"><name pos:start="86:39" pos:end="86:42">size</name> <operator pos:start="86:44" pos:end="86:44">-</operator> <literal type="number" pos:start="86:46" pos:end="86:46">3</literal></expr></argument>)</argument_list></call> <operator pos:start="86:49" pos:end="86:50">!=</operator> <name pos:start="86:52" pos:end="86:55">size</name> <operator pos:start="86:57" pos:end="86:57">-</operator> <literal type="number" pos:start="86:59" pos:end="86:59">3</literal></expr>)</condition> <block pos:start="86:62" pos:end="92:13">{<block_content pos:start="88:17" pos:end="90:36">

                <expr_stmt pos:start="88:17" pos:end="88:34"><expr pos:start="88:17" pos:end="88:33"><call pos:start="88:17" pos:end="88:33"><name pos:start="88:17" pos:end="88:24">av_freep</name><argument_list pos:start="88:25" pos:end="88:33">(<argument pos:start="88:26" pos:end="88:32"><expr pos:start="88:26" pos:end="88:32"><operator pos:start="88:26" pos:end="88:26">&amp;</operator><name pos:start="88:27" pos:end="88:32">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="90:17" pos:end="90:36">return <expr pos:start="90:24" pos:end="90:35"><call pos:start="90:24" pos:end="90:35"><name pos:start="90:24" pos:end="90:30">AVERROR</name><argument_list pos:start="90:31" pos:end="90:35">(<argument pos:start="90:32" pos:end="90:34"><expr pos:start="90:32" pos:end="90:34"><name pos:start="90:32" pos:end="90:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="94:13" pos:end="106:13"><if pos:start="94:13" pos:end="106:13">if <condition pos:start="94:16" pos:end="94:58">(<expr pos:start="94:17" pos:end="94:57"><call pos:start="94:17" pos:end="94:40"><name pos:start="94:17" pos:end="94:33">ffio_get_checksum</name><argument_list pos:start="94:34" pos:end="94:40">(<argument pos:start="94:35" pos:end="94:39"><expr pos:start="94:35" pos:end="94:39"><name pos:start="94:35" pos:end="94:39"><name pos:start="94:35" pos:end="94:35">s</name><operator pos:start="94:36" pos:end="94:37">-&gt;</operator><name pos:start="94:38" pos:end="94:39">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="94:42" pos:end="94:43">!=</operator> <call pos:start="94:45" pos:end="94:57"><name pos:start="94:45" pos:end="94:53">avio_rb24</name><argument_list pos:start="94:54" pos:end="94:57">(<argument pos:start="94:55" pos:end="94:56"><expr pos:start="94:55" pos:end="94:56"><name pos:start="94:55" pos:end="94:56">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="94:60" pos:end="106:13">{<block_content pos:start="96:17" pos:end="104:17">

                <expr_stmt pos:start="96:17" pos:end="96:80"><expr pos:start="96:17" pos:end="96:79"><call pos:start="96:17" pos:end="96:79"><name pos:start="96:17" pos:end="96:22">av_log</name><argument_list pos:start="96:23" pos:end="96:79">(<argument pos:start="96:24" pos:end="96:24"><expr pos:start="96:24" pos:end="96:24"><name pos:start="96:24" pos:end="96:24">s</name></expr></argument>, <argument pos:start="96:27" pos:end="96:38"><expr pos:start="96:27" pos:end="96:38"><name pos:start="96:27" pos:end="96:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="96:41" pos:end="96:72"><expr pos:start="96:41" pos:end="96:72"><literal type="string" pos:start="96:41" pos:end="96:72">"%d metadata block CRC error.\n"</literal></expr></argument>, <argument pos:start="96:75" pos:end="96:78"><expr pos:start="96:75" pos:end="96:78"><name pos:start="96:75" pos:end="96:78">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="98:17" pos:end="104:17"><if pos:start="98:17" pos:end="104:17">if <condition pos:start="98:20" pos:end="98:57">(<expr pos:start="98:21" pos:end="98:56"><name pos:start="98:21" pos:end="98:40"><name pos:start="98:21" pos:end="98:21">s</name><operator pos:start="98:22" pos:end="98:23">-&gt;</operator><name pos:start="98:24" pos:end="98:40">error_recognition</name></name> <operator pos:start="98:42" pos:end="98:42">&amp;</operator> <name pos:start="98:44" pos:end="98:56">AV_EF_EXPLODE</name></expr>)</condition> <block pos:start="98:59" pos:end="104:17">{<block_content pos:start="100:21" pos:end="102:47">

                    <expr_stmt pos:start="100:21" pos:end="100:38"><expr pos:start="100:21" pos:end="100:37"><call pos:start="100:21" pos:end="100:37"><name pos:start="100:21" pos:end="100:28">av_freep</name><argument_list pos:start="100:29" pos:end="100:37">(<argument pos:start="100:30" pos:end="100:36"><expr pos:start="100:30" pos:end="100:36"><operator pos:start="100:30" pos:end="100:30">&amp;</operator><name pos:start="100:31" pos:end="100:36">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="102:21" pos:end="102:47">return <expr pos:start="102:28" pos:end="102:46"><name pos:start="102:28" pos:end="102:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="110:13" pos:end="110:50"><expr pos:start="110:13" pos:end="110:49"><call pos:start="110:13" pos:end="110:49"><name pos:start="110:13" pos:end="110:26">init_get_bits8</name><argument_list pos:start="110:27" pos:end="110:49">(<argument pos:start="110:28" pos:end="110:30"><expr pos:start="110:28" pos:end="110:30"><operator pos:start="110:28" pos:end="110:28">&amp;</operator><name pos:start="110:29" pos:end="110:30">gb</name></expr></argument>, <argument pos:start="110:33" pos:end="110:38"><expr pos:start="110:33" pos:end="110:38"><name pos:start="110:33" pos:end="110:38">buffer</name></expr></argument>, <argument pos:start="110:41" pos:end="110:48"><expr pos:start="110:41" pos:end="110:48"><name pos:start="110:41" pos:end="110:44">size</name> <operator pos:start="110:46" pos:end="110:46">-</operator> <literal type="number" pos:start="110:48" pos:end="110:48">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="112:13" pos:end="112:18">break;</break>

        <case pos:start="114:9" pos:end="114:30">case <expr pos:start="114:14" pos:end="114:29"><name pos:start="114:14" pos:end="114:29">TAK_METADATA_MD5</name></expr>:</case> <block pos:start="114:32" pos:end="152:9">{<block_content pos:start="116:13" pos:end="150:18">

            <decl_stmt pos:start="116:13" pos:end="116:28"><decl pos:start="116:13" pos:end="116:27"><type pos:start="116:13" pos:end="116:19"><name pos:start="116:13" pos:end="116:19">uint8_t</name></type> <name pos:start="116:21" pos:end="116:27"><name pos:start="116:21" pos:end="116:23">md5</name><index pos:start="116:24" pos:end="116:27">[<expr pos:start="116:25" pos:end="116:26"><literal type="number" pos:start="116:25" pos:end="116:26">16</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="118:13" pos:end="118:18"><decl pos:start="118:13" pos:end="118:17"><type pos:start="118:13" pos:end="118:15"><name pos:start="118:13" pos:end="118:15">int</name></type> <name pos:start="118:17" pos:end="118:17">i</name></decl>;</decl_stmt>



            <if_stmt pos:start="122:13" pos:end="124:43"><if pos:start="122:13" pos:end="124:43">if <condition pos:start="122:16" pos:end="122:27">(<expr pos:start="122:17" pos:end="122:26"><name pos:start="122:17" pos:end="122:20">size</name> <operator pos:start="122:22" pos:end="122:23">!=</operator> <literal type="number" pos:start="122:25" pos:end="122:26">19</literal></expr>)</condition><block type="pseudo" pos:start="124:17" pos:end="124:43"><block_content pos:start="124:17" pos:end="124:43">

                <return pos:start="124:17" pos:end="124:43">return <expr pos:start="124:24" pos:end="124:42"><name pos:start="124:24" pos:end="124:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="126:13" pos:end="126:61"><expr pos:start="126:13" pos:end="126:60"><call pos:start="126:13" pos:end="126:60"><name pos:start="126:13" pos:end="126:30">ffio_init_checksum</name><argument_list pos:start="126:31" pos:end="126:60">(<argument pos:start="126:32" pos:end="126:33"><expr pos:start="126:32" pos:end="126:33"><name pos:start="126:32" pos:end="126:33">pb</name></expr></argument>, <argument pos:start="126:36" pos:end="126:48"><expr pos:start="126:36" pos:end="126:48"><name pos:start="126:36" pos:end="126:48">tak_check_crc</name></expr></argument>, <argument pos:start="126:51" pos:end="126:59"><expr pos:start="126:51" pos:end="126:59"><literal type="number" pos:start="126:51" pos:end="126:59">0xCE04B7U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="128:13" pos:end="128:35"><expr pos:start="128:13" pos:end="128:34"><call pos:start="128:13" pos:end="128:34"><name pos:start="128:13" pos:end="128:21">avio_read</name><argument_list pos:start="128:22" pos:end="128:34">(<argument pos:start="128:23" pos:end="128:24"><expr pos:start="128:23" pos:end="128:24"><name pos:start="128:23" pos:end="128:24">pb</name></expr></argument>, <argument pos:start="128:27" pos:end="128:29"><expr pos:start="128:27" pos:end="128:29"><name pos:start="128:27" pos:end="128:29">md5</name></expr></argument>, <argument pos:start="128:32" pos:end="128:33"><expr pos:start="128:32" pos:end="128:33"><literal type="number" pos:start="128:32" pos:end="128:33">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="130:13" pos:end="138:13"><if pos:start="130:13" pos:end="138:13">if <condition pos:start="130:16" pos:end="130:58">(<expr pos:start="130:17" pos:end="130:57"><call pos:start="130:17" pos:end="130:40"><name pos:start="130:17" pos:end="130:33">ffio_get_checksum</name><argument_list pos:start="130:34" pos:end="130:40">(<argument pos:start="130:35" pos:end="130:39"><expr pos:start="130:35" pos:end="130:39"><name pos:start="130:35" pos:end="130:39"><name pos:start="130:35" pos:end="130:35">s</name><operator pos:start="130:36" pos:end="130:37">-&gt;</operator><name pos:start="130:38" pos:end="130:39">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="130:42" pos:end="130:43">!=</operator> <call pos:start="130:45" pos:end="130:57"><name pos:start="130:45" pos:end="130:53">avio_rb24</name><argument_list pos:start="130:54" pos:end="130:57">(<argument pos:start="130:55" pos:end="130:56"><expr pos:start="130:55" pos:end="130:56"><name pos:start="130:55" pos:end="130:56">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="130:60" pos:end="138:13">{<block_content pos:start="132:17" pos:end="136:47">

                <expr_stmt pos:start="132:17" pos:end="132:75"><expr pos:start="132:17" pos:end="132:74"><call pos:start="132:17" pos:end="132:74"><name pos:start="132:17" pos:end="132:22">av_log</name><argument_list pos:start="132:23" pos:end="132:74">(<argument pos:start="132:24" pos:end="132:24"><expr pos:start="132:24" pos:end="132:24"><name pos:start="132:24" pos:end="132:24">s</name></expr></argument>, <argument pos:start="132:27" pos:end="132:38"><expr pos:start="132:27" pos:end="132:38"><name pos:start="132:27" pos:end="132:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="132:41" pos:end="132:73"><expr pos:start="132:41" pos:end="132:73"><literal type="string" pos:start="132:41" pos:end="132:73">"MD5 metadata block CRC error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="134:17" pos:end="136:47"><if pos:start="134:17" pos:end="136:47">if <condition pos:start="134:20" pos:end="134:57">(<expr pos:start="134:21" pos:end="134:56"><name pos:start="134:21" pos:end="134:40"><name pos:start="134:21" pos:end="134:21">s</name><operator pos:start="134:22" pos:end="134:23">-&gt;</operator><name pos:start="134:24" pos:end="134:40">error_recognition</name></name> <operator pos:start="134:42" pos:end="134:42">&amp;</operator> <name pos:start="134:44" pos:end="134:56">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="136:21" pos:end="136:47"><block_content pos:start="136:21" pos:end="136:47">

                    <return pos:start="136:21" pos:end="136:47">return <expr pos:start="136:28" pos:end="136:46"><name pos:start="136:28" pos:end="136:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="142:13" pos:end="142:46"><expr pos:start="142:13" pos:end="142:45"><call pos:start="142:13" pos:end="142:45"><name pos:start="142:13" pos:end="142:18">av_log</name><argument_list pos:start="142:19" pos:end="142:45">(<argument pos:start="142:20" pos:end="142:20"><expr pos:start="142:20" pos:end="142:20"><name pos:start="142:20" pos:end="142:20">s</name></expr></argument>, <argument pos:start="142:23" pos:end="142:36"><expr pos:start="142:23" pos:end="142:36"><name pos:start="142:23" pos:end="142:36">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="142:39" pos:end="142:44"><expr pos:start="142:39" pos:end="142:44"><literal type="string" pos:start="142:39" pos:end="142:44">"MD5="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="144:13" pos:end="146:58">for <control pos:start="144:17" pos:end="144:36">(<init pos:start="144:18" pos:end="144:23"><expr pos:start="144:18" pos:end="144:22"><name pos:start="144:18" pos:end="144:18">i</name> <operator pos:start="144:20" pos:end="144:20">=</operator> <literal type="number" pos:start="144:22" pos:end="144:22">0</literal></expr>;</init> <condition pos:start="144:25" pos:end="144:31"><expr pos:start="144:25" pos:end="144:30"><name pos:start="144:25" pos:end="144:25">i</name> <operator pos:start="144:27" pos:end="144:27">&lt;</operator> <literal type="number" pos:start="144:29" pos:end="144:30">16</literal></expr>;</condition> <incr pos:start="144:33" pos:end="144:35"><expr pos:start="144:33" pos:end="144:35"><name pos:start="144:33" pos:end="144:33">i</name><operator pos:start="144:34" pos:end="144:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="146:17" pos:end="146:58"><block_content pos:start="146:17" pos:end="146:58">

                <expr_stmt pos:start="146:17" pos:end="146:58"><expr pos:start="146:17" pos:end="146:57"><call pos:start="146:17" pos:end="146:57"><name pos:start="146:17" pos:end="146:22">av_log</name><argument_list pos:start="146:23" pos:end="146:57">(<argument pos:start="146:24" pos:end="146:24"><expr pos:start="146:24" pos:end="146:24"><name pos:start="146:24" pos:end="146:24">s</name></expr></argument>, <argument pos:start="146:27" pos:end="146:40"><expr pos:start="146:27" pos:end="146:40"><name pos:start="146:27" pos:end="146:40">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="146:43" pos:end="146:48"><expr pos:start="146:43" pos:end="146:48"><literal type="string" pos:start="146:43" pos:end="146:48">"%02x"</literal></expr></argument>, <argument pos:start="146:51" pos:end="146:56"><expr pos:start="146:51" pos:end="146:56"><name pos:start="146:51" pos:end="146:56"><name pos:start="146:51" pos:end="146:53">md5</name><index pos:start="146:54" pos:end="146:56">[<expr pos:start="146:55" pos:end="146:55"><name pos:start="146:55" pos:end="146:55">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="148:13" pos:end="148:44"><expr pos:start="148:13" pos:end="148:43"><call pos:start="148:13" pos:end="148:43"><name pos:start="148:13" pos:end="148:18">av_log</name><argument_list pos:start="148:19" pos:end="148:43">(<argument pos:start="148:20" pos:end="148:20"><expr pos:start="148:20" pos:end="148:20"><name pos:start="148:20" pos:end="148:20">s</name></expr></argument>, <argument pos:start="148:23" pos:end="148:36"><expr pos:start="148:23" pos:end="148:36"><name pos:start="148:23" pos:end="148:36">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="148:39" pos:end="148:42"><expr pos:start="148:39" pos:end="148:42"><literal type="string" pos:start="148:39" pos:end="148:42">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="150:13" pos:end="150:18">break;</break>

        </block_content>}</block>

        <case pos:start="154:9" pos:end="154:30">case <expr pos:start="154:14" pos:end="154:29"><name pos:start="154:14" pos:end="154:29">TAK_METADATA_END</name></expr>:</case> <block pos:start="154:32" pos:end="174:9">{<block_content pos:start="156:13" pos:end="172:21">

            <decl_stmt pos:start="156:13" pos:end="156:43"><decl pos:start="156:13" pos:end="156:42"><type pos:start="156:13" pos:end="156:19"><name pos:start="156:13" pos:end="156:19">int64_t</name></type> <name pos:start="156:21" pos:end="156:26">curpos</name> <init pos:start="156:28" pos:end="156:42">= <expr pos:start="156:30" pos:end="156:42"><call pos:start="156:30" pos:end="156:42"><name pos:start="156:30" pos:end="156:38">avio_tell</name><argument_list pos:start="156:39" pos:end="156:42">(<argument pos:start="156:40" pos:end="156:41"><expr pos:start="156:40" pos:end="156:41"><name pos:start="156:40" pos:end="156:41">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="160:13" pos:end="166:13"><if pos:start="160:13" pos:end="166:13">if <condition pos:start="160:16" pos:end="160:29">(<expr pos:start="160:17" pos:end="160:28"><name pos:start="160:17" pos:end="160:28"><name pos:start="160:17" pos:end="160:18">pb</name><operator pos:start="160:19" pos:end="160:20">-&gt;</operator><name pos:start="160:21" pos:end="160:28">seekable</name></name></expr>)</condition> <block pos:start="160:31" pos:end="166:13">{<block_content pos:start="162:17" pos:end="164:48">

                <expr_stmt pos:start="162:17" pos:end="162:36"><expr pos:start="162:17" pos:end="162:35"><call pos:start="162:17" pos:end="162:35"><name pos:start="162:17" pos:end="162:32">ff_ape_parse_tag</name><argument_list pos:start="162:33" pos:end="162:35">(<argument pos:start="162:34" pos:end="162:34"><expr pos:start="162:34" pos:end="162:34"><name pos:start="162:34" pos:end="162:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="164:17" pos:end="164:48"><expr pos:start="164:17" pos:end="164:47"><call pos:start="164:17" pos:end="164:47"><name pos:start="164:17" pos:end="164:25">avio_seek</name><argument_list pos:start="164:26" pos:end="164:47">(<argument pos:start="164:27" pos:end="164:28"><expr pos:start="164:27" pos:end="164:28"><name pos:start="164:27" pos:end="164:28">pb</name></expr></argument>, <argument pos:start="164:31" pos:end="164:36"><expr pos:start="164:31" pos:end="164:36"><name pos:start="164:31" pos:end="164:36">curpos</name></expr></argument>, <argument pos:start="164:39" pos:end="164:46"><expr pos:start="164:39" pos:end="164:46"><name pos:start="164:39" pos:end="164:46">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="170:13" pos:end="170:35"><expr pos:start="170:13" pos:end="170:34"><name pos:start="170:13" pos:end="170:24"><name pos:start="170:13" pos:end="170:14">tc</name><operator pos:start="170:15" pos:end="170:16">-&gt;</operator><name pos:start="170:17" pos:end="170:24">data_end</name></name> <operator pos:start="170:26" pos:end="170:27">+=</operator> <name pos:start="170:29" pos:end="170:34">curpos</name></expr>;</expr_stmt>

            <return pos:start="172:13" pos:end="172:21">return <expr pos:start="172:20" pos:end="172:20"><literal type="number" pos:start="172:20" pos:end="172:20">0</literal></expr>;</return>

        </block_content>}</block>

        <default pos:start="176:9" pos:end="176:16">default:</default>

            <expr_stmt pos:start="178:13" pos:end="178:38"><expr pos:start="178:13" pos:end="178:37"><name pos:start="178:13" pos:end="178:15">ret</name> <operator pos:start="178:17" pos:end="178:17">=</operator> <call pos:start="178:19" pos:end="178:37"><name pos:start="178:19" pos:end="178:27">avio_skip</name><argument_list pos:start="178:28" pos:end="178:37">(<argument pos:start="178:29" pos:end="178:30"><expr pos:start="178:29" pos:end="178:30"><name pos:start="178:29" pos:end="178:30">pb</name></expr></argument>, <argument pos:start="178:33" pos:end="178:36"><expr pos:start="178:33" pos:end="178:36"><name pos:start="178:33" pos:end="178:36">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="180:13" pos:end="182:27"><if pos:start="180:13" pos:end="182:27">if <condition pos:start="180:16" pos:end="180:24">(<expr pos:start="180:17" pos:end="180:23"><name pos:start="180:17" pos:end="180:19">ret</name> <operator pos:start="180:21" pos:end="180:21">&lt;</operator> <literal type="number" pos:start="180:23" pos:end="180:23">0</literal></expr>)</condition><block type="pseudo" pos:start="182:17" pos:end="182:27"><block_content pos:start="182:17" pos:end="182:27">

                <return pos:start="182:17" pos:end="182:27">return <expr pos:start="182:24" pos:end="182:26"><name pos:start="182:24" pos:end="182:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></switch>



        <if_stmt pos:start="188:9" pos:end="242:9"><if pos:start="188:9" pos:end="220:9">if <condition pos:start="188:12" pos:end="188:44">(<expr pos:start="188:13" pos:end="188:43"><name pos:start="188:13" pos:end="188:16">type</name> <operator pos:start="188:18" pos:end="188:19">==</operator> <name pos:start="188:21" pos:end="188:43">TAK_METADATA_STREAMINFO</name></expr>)</condition> <block pos:start="188:46" pos:end="220:9">{<block_content pos:start="190:13" pos:end="218:52">

            <decl_stmt pos:start="190:13" pos:end="190:29"><decl pos:start="190:13" pos:end="190:28"><type pos:start="190:13" pos:end="190:25"><name pos:start="190:13" pos:end="190:25">TAKStreamInfo</name></type> <name pos:start="190:27" pos:end="190:28">ti</name></decl>;</decl_stmt>



            <expr_stmt pos:start="194:13" pos:end="194:50"><expr pos:start="194:13" pos:end="194:49"><call pos:start="194:13" pos:end="194:49"><name pos:start="194:13" pos:end="194:39">avpriv_tak_parse_streaminfo</name><argument_list pos:start="194:40" pos:end="194:49">(<argument pos:start="194:41" pos:end="194:43"><expr pos:start="194:41" pos:end="194:43"><operator pos:start="194:41" pos:end="194:41">&amp;</operator><name pos:start="194:42" pos:end="194:43">gb</name></expr></argument>, <argument pos:start="194:46" pos:end="194:48"><expr pos:start="194:46" pos:end="194:48"><operator pos:start="194:46" pos:end="194:46">&amp;</operator><name pos:start="194:47" pos:end="194:48">ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="196:13" pos:end="198:42"><if pos:start="196:13" pos:end="198:42">if <condition pos:start="196:16" pos:end="196:31">(<expr pos:start="196:17" pos:end="196:30"><name pos:start="196:17" pos:end="196:26"><name pos:start="196:17" pos:end="196:18">ti</name><operator pos:start="196:19" pos:end="196:19">.</operator><name pos:start="196:20" pos:end="196:26">samples</name></name> <operator pos:start="196:28" pos:end="196:28">&gt;</operator> <literal type="number" pos:start="196:30" pos:end="196:30">0</literal></expr>)</condition><block type="pseudo" pos:start="198:17" pos:end="198:42"><block_content pos:start="198:17" pos:end="198:42">

                <expr_stmt pos:start="198:17" pos:end="198:42"><expr pos:start="198:17" pos:end="198:41"><name pos:start="198:17" pos:end="198:28"><name pos:start="198:17" pos:end="198:18">st</name><operator pos:start="198:19" pos:end="198:20">-&gt;</operator><name pos:start="198:21" pos:end="198:28">duration</name></name> <operator pos:start="198:30" pos:end="198:30">=</operator> <name pos:start="198:32" pos:end="198:41"><name pos:start="198:32" pos:end="198:33">ti</name><operator pos:start="198:34" pos:end="198:34">.</operator><name pos:start="198:35" pos:end="198:41">samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="200:13" pos:end="200:54"><expr pos:start="200:13" pos:end="200:53"><name pos:start="200:13" pos:end="200:44"><name pos:start="200:13" pos:end="200:14">st</name><operator pos:start="200:15" pos:end="200:16">-&gt;</operator><name pos:start="200:17" pos:end="200:21">codec</name><operator pos:start="200:22" pos:end="200:23">-&gt;</operator><name pos:start="200:24" pos:end="200:44">bits_per_coded_sample</name></name> <operator pos:start="200:46" pos:end="200:46">=</operator> <name pos:start="200:48" pos:end="200:53"><name pos:start="200:48" pos:end="200:49">ti</name><operator pos:start="200:50" pos:end="200:50">.</operator><name pos:start="200:51" pos:end="200:53">bps</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="202:13" pos:end="204:57"><if pos:start="202:13" pos:end="204:57">if <condition pos:start="202:16" pos:end="202:29">(<expr pos:start="202:17" pos:end="202:28"><name pos:start="202:17" pos:end="202:28"><name pos:start="202:17" pos:end="202:18">ti</name><operator pos:start="202:19" pos:end="202:19">.</operator><name pos:start="202:20" pos:end="202:28">ch_layout</name></name></expr>)</condition><block type="pseudo" pos:start="204:17" pos:end="204:57"><block_content pos:start="204:17" pos:end="204:57">

                <expr_stmt pos:start="204:17" pos:end="204:57"><expr pos:start="204:17" pos:end="204:56"><name pos:start="204:17" pos:end="204:41"><name pos:start="204:17" pos:end="204:18">st</name><operator pos:start="204:19" pos:end="204:20">-&gt;</operator><name pos:start="204:21" pos:end="204:25">codec</name><operator pos:start="204:26" pos:end="204:27">-&gt;</operator><name pos:start="204:28" pos:end="204:41">channel_layout</name></name> <operator pos:start="204:43" pos:end="204:43">=</operator> <name pos:start="204:45" pos:end="204:56"><name pos:start="204:45" pos:end="204:46">ti</name><operator pos:start="204:47" pos:end="204:47">.</operator><name pos:start="204:48" pos:end="204:56">ch_layout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="206:13" pos:end="206:62"><expr pos:start="206:13" pos:end="206:61"><name pos:start="206:13" pos:end="206:34"><name pos:start="206:13" pos:end="206:14">st</name><operator pos:start="206:15" pos:end="206:16">-&gt;</operator><name pos:start="206:17" pos:end="206:21">codec</name><operator pos:start="206:22" pos:end="206:23">-&gt;</operator><name pos:start="206:24" pos:end="206:34">sample_rate</name></name>           <operator pos:start="206:46" pos:end="206:46">=</operator> <name pos:start="206:48" pos:end="206:61"><name pos:start="206:48" pos:end="206:49">ti</name><operator pos:start="206:50" pos:end="206:50">.</operator><name pos:start="206:51" pos:end="206:61">sample_rate</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="208:13" pos:end="208:59"><expr pos:start="208:13" pos:end="208:58"><name pos:start="208:13" pos:end="208:31"><name pos:start="208:13" pos:end="208:14">st</name><operator pos:start="208:15" pos:end="208:16">-&gt;</operator><name pos:start="208:17" pos:end="208:21">codec</name><operator pos:start="208:22" pos:end="208:23">-&gt;</operator><name pos:start="208:24" pos:end="208:31">channels</name></name>              <operator pos:start="208:46" pos:end="208:46">=</operator> <name pos:start="208:48" pos:end="208:58"><name pos:start="208:48" pos:end="208:49">ti</name><operator pos:start="208:50" pos:end="208:50">.</operator><name pos:start="208:51" pos:end="208:58">channels</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="210:13" pos:end="210:49"><expr pos:start="210:13" pos:end="210:48"><name pos:start="210:13" pos:end="210:26"><name pos:start="210:13" pos:end="210:14">st</name><operator pos:start="210:15" pos:end="210:16">-&gt;</operator><name pos:start="210:17" pos:end="210:26">start_time</name></name>                   <operator pos:start="210:46" pos:end="210:46">=</operator> <literal type="number" pos:start="210:48" pos:end="210:48">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="212:13" pos:end="212:67"><expr pos:start="212:13" pos:end="212:66"><call pos:start="212:13" pos:end="212:66"><name pos:start="212:13" pos:end="212:31">avpriv_set_pts_info</name><argument_list pos:start="212:32" pos:end="212:66">(<argument pos:start="212:33" pos:end="212:34"><expr pos:start="212:33" pos:end="212:34"><name pos:start="212:33" pos:end="212:34">st</name></expr></argument>, <argument pos:start="212:37" pos:end="212:38"><expr pos:start="212:37" pos:end="212:38"><literal type="number" pos:start="212:37" pos:end="212:38">64</literal></expr></argument>, <argument pos:start="212:41" pos:end="212:41"><expr pos:start="212:41" pos:end="212:41"><literal type="number" pos:start="212:41" pos:end="212:41">1</literal></expr></argument>, <argument pos:start="212:44" pos:end="212:65"><expr pos:start="212:44" pos:end="212:65"><name pos:start="212:44" pos:end="212:65"><name pos:start="212:44" pos:end="212:45">st</name><operator pos:start="212:46" pos:end="212:47">-&gt;</operator><name pos:start="212:48" pos:end="212:52">codec</name><operator pos:start="212:53" pos:end="212:54">-&gt;</operator><name pos:start="212:55" pos:end="212:65">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="214:13" pos:end="214:54"><expr pos:start="214:13" pos:end="214:53"><name pos:start="214:13" pos:end="214:32"><name pos:start="214:13" pos:end="214:14">st</name><operator pos:start="214:15" pos:end="214:16">-&gt;</operator><name pos:start="214:17" pos:end="214:21">codec</name><operator pos:start="214:22" pos:end="214:23">-&gt;</operator><name pos:start="214:24" pos:end="214:32">extradata</name></name>             <operator pos:start="214:46" pos:end="214:46">=</operator> <name pos:start="214:48" pos:end="214:53">buffer</name></expr>;</expr_stmt>

            <expr_stmt pos:start="216:13" pos:end="216:56"><expr pos:start="216:13" pos:end="216:55"><name pos:start="216:13" pos:end="216:37"><name pos:start="216:13" pos:end="216:14">st</name><operator pos:start="216:15" pos:end="216:16">-&gt;</operator><name pos:start="216:17" pos:end="216:21">codec</name><operator pos:start="216:22" pos:end="216:23">-&gt;</operator><name pos:start="216:24" pos:end="216:37">extradata_size</name></name>        <operator pos:start="216:46" pos:end="216:46">=</operator> <name pos:start="216:48" pos:end="216:51">size</name> <operator pos:start="216:53" pos:end="216:53">-</operator> <literal type="number" pos:start="216:55" pos:end="216:55">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="218:13" pos:end="218:52"><expr pos:start="218:13" pos:end="218:51"><name pos:start="218:13" pos:end="218:18">buffer</name>                           <operator pos:start="218:46" pos:end="218:46">=</operator> <name pos:start="218:48" pos:end="218:51">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="220:11" pos:end="234:9">else if <condition pos:start="220:19" pos:end="220:51">(<expr pos:start="220:20" pos:end="220:50"><name pos:start="220:20" pos:end="220:23">type</name> <operator pos:start="220:25" pos:end="220:26">==</operator> <name pos:start="220:28" pos:end="220:50">TAK_METADATA_LAST_FRAME</name></expr>)</condition> <block pos:start="220:53" pos:end="234:9">{<block_content pos:start="222:13" pos:end="232:30">

            <if_stmt pos:start="222:13" pos:end="224:43"><if pos:start="222:13" pos:end="224:43">if <condition pos:start="222:16" pos:end="222:27">(<expr pos:start="222:17" pos:end="222:26"><name pos:start="222:17" pos:end="222:20">size</name> <operator pos:start="222:22" pos:end="222:23">!=</operator> <literal type="number" pos:start="222:25" pos:end="222:26">11</literal></expr>)</condition><block type="pseudo" pos:start="224:17" pos:end="224:43"><block_content pos:start="224:17" pos:end="224:43">

                <return pos:start="224:17" pos:end="224:43">return <expr pos:start="224:24" pos:end="224:42"><name pos:start="224:24" pos:end="224:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="226:13" pos:end="226:32"><expr pos:start="226:13" pos:end="226:31"><name pos:start="226:13" pos:end="226:27"><name pos:start="226:13" pos:end="226:14">tc</name><operator pos:start="226:15" pos:end="226:16">-&gt;</operator><name pos:start="226:17" pos:end="226:27">mlast_frame</name></name> <operator pos:start="226:29" pos:end="226:29">=</operator> <literal type="number" pos:start="226:31" pos:end="226:31">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="228:13" pos:end="230:70"><expr pos:start="228:13" pos:end="230:69"><name pos:start="228:13" pos:end="228:24"><name pos:start="228:13" pos:end="228:14">tc</name><operator pos:start="228:15" pos:end="228:16">-&gt;</operator><name pos:start="228:17" pos:end="228:24">data_end</name></name>    <operator pos:start="228:29" pos:end="228:29">=</operator> <call pos:start="228:31" pos:end="228:70"><name pos:start="228:31" pos:end="228:40">get_bits64</name><argument_list pos:start="228:41" pos:end="228:70">(<argument pos:start="228:42" pos:end="228:44"><expr pos:start="228:42" pos:end="228:44"><operator pos:start="228:42" pos:end="228:42">&amp;</operator><name pos:start="228:43" pos:end="228:44">gb</name></expr></argument>, <argument pos:start="228:47" pos:end="228:69"><expr pos:start="228:47" pos:end="228:69"><name pos:start="228:47" pos:end="228:69">TAK_LAST_FRAME_POS_BITS</name></expr></argument>)</argument_list></call> <operator pos:start="228:72" pos:end="228:72">+</operator>

                              <call pos:start="230:31" pos:end="230:69"><name pos:start="230:31" pos:end="230:38">get_bits</name><argument_list pos:start="230:39" pos:end="230:69">(<argument pos:start="230:40" pos:end="230:42"><expr pos:start="230:40" pos:end="230:42"><operator pos:start="230:40" pos:end="230:40">&amp;</operator><name pos:start="230:41" pos:end="230:42">gb</name></expr></argument>, <argument pos:start="230:45" pos:end="230:68"><expr pos:start="230:45" pos:end="230:68"><name pos:start="230:45" pos:end="230:68">TAK_LAST_FRAME_SIZE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="232:13" pos:end="232:30"><expr pos:start="232:13" pos:end="232:29"><call pos:start="232:13" pos:end="232:29"><name pos:start="232:13" pos:end="232:20">av_freep</name><argument_list pos:start="232:21" pos:end="232:29">(<argument pos:start="232:22" pos:end="232:28"><expr pos:start="232:22" pos:end="232:28"><operator pos:start="232:22" pos:end="232:22">&amp;</operator><name pos:start="232:23" pos:end="232:28">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="234:11" pos:end="242:9">else if <condition pos:start="234:19" pos:end="234:48">(<expr pos:start="234:20" pos:end="234:47"><name pos:start="234:20" pos:end="234:23">type</name> <operator pos:start="234:25" pos:end="234:26">==</operator> <name pos:start="234:28" pos:end="234:47">TAK_METADATA_ENCODER</name></expr>)</condition> <block pos:start="234:50" pos:end="242:9">{<block_content pos:start="236:13" pos:end="240:30">

            <expr_stmt pos:start="236:13" pos:end="238:65"><expr pos:start="236:13" pos:end="238:64"><call pos:start="236:13" pos:end="238:64"><name pos:start="236:13" pos:end="236:18">av_log</name><argument_list pos:start="236:19" pos:end="238:64">(<argument pos:start="236:20" pos:end="236:20"><expr pos:start="236:20" pos:end="236:20"><name pos:start="236:20" pos:end="236:20">s</name></expr></argument>, <argument pos:start="236:23" pos:end="236:36"><expr pos:start="236:23" pos:end="236:36"><name pos:start="236:23" pos:end="236:36">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="236:39" pos:end="236:62"><expr pos:start="236:39" pos:end="236:62"><literal type="string" pos:start="236:39" pos:end="236:62">"encoder version: %0X\n"</literal></expr></argument>,

                   <argument pos:start="238:20" pos:end="238:63"><expr pos:start="238:20" pos:end="238:63"><call pos:start="238:20" pos:end="238:63"><name pos:start="238:20" pos:end="238:32">get_bits_long</name><argument_list pos:start="238:33" pos:end="238:63">(<argument pos:start="238:34" pos:end="238:36"><expr pos:start="238:34" pos:end="238:36"><operator pos:start="238:34" pos:end="238:34">&amp;</operator><name pos:start="238:35" pos:end="238:36">gb</name></expr></argument>, <argument pos:start="238:39" pos:end="238:62"><expr pos:start="238:39" pos:end="238:62"><name pos:start="238:39" pos:end="238:62">TAK_ENCODER_VERSION_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="240:13" pos:end="240:30"><expr pos:start="240:13" pos:end="240:29"><call pos:start="240:13" pos:end="240:29"><name pos:start="240:13" pos:end="240:20">av_freep</name><argument_list pos:start="240:21" pos:end="240:29">(<argument pos:start="240:22" pos:end="240:28"><expr pos:start="240:22" pos:end="240:28"><operator pos:start="240:22" pos:end="240:22">&amp;</operator><name pos:start="240:23" pos:end="240:28">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <return pos:start="248:5" pos:end="248:23">return <expr pos:start="248:12" pos:end="248:22"><name pos:start="248:12" pos:end="248:22">AVERROR_EOF</name></expr>;</return>

</block_content>}</block></function></unit>
