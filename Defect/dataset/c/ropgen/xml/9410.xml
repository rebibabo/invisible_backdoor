<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9410.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">inc_refcounts</name><parameter_list pos:start="1:26" pos:end="9:55">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:42">BlockDriverState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">bs</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:46"><decl pos:start="3:27" pos:end="3:46"><type pos:start="3:27" pos:end="3:46"><name pos:start="3:27" pos:end="3:41">BdrvCheckResult</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:46">res</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:50"><decl pos:start="5:27" pos:end="5:50"><type pos:start="5:27" pos:end="5:50"><name pos:start="5:27" pos:end="5:34">uint16_t</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:50">refcount_table</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:49"><decl pos:start="7:27" pos:end="7:49"><type pos:start="7:27" pos:end="7:49"><name pos:start="7:27" pos:end="7:29">int</name></type> <name pos:start="7:31" pos:end="7:49">refcount_table_size</name></decl></parameter>,

                          <parameter pos:start="9:27" pos:end="9:40"><decl pos:start="9:27" pos:end="9:40"><type pos:start="9:27" pos:end="9:40"><name pos:start="9:27" pos:end="9:33">int64_t</name></type> <name pos:start="9:35" pos:end="9:40">offset</name></decl></parameter>, <parameter pos:start="9:43" pos:end="9:54"><decl pos:start="9:43" pos:end="9:54"><type pos:start="9:43" pos:end="9:54"><name pos:start="9:43" pos:end="9:49">int64_t</name></type> <name pos:start="9:51" pos:end="9:54">size</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="71:1">{<block_content pos:start="13:5" pos:end="69:5">

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">BDRVQcowState</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:20">s</name> <init pos:start="13:22" pos:end="13:33">= <expr pos:start="13:24" pos:end="13:33"><name pos:start="13:24" pos:end="13:33"><name pos:start="13:24" pos:end="13:25">bs</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:40"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:17">start</name></decl>, <decl pos:start="15:20" pos:end="15:23"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:20" pos:end="15:23">last</name></decl>, <decl pos:start="15:26" pos:end="15:39"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:26" pos:end="15:39">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">k</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:15"><if pos:start="21:5" pos:end="23:15">if <condition pos:start="21:8" pos:end="21:18">(<expr pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:12">size</name> <operator pos:start="21:14" pos:end="21:15">&lt;=</operator> <literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:15"><block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:9">start</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:39"><name pos:start="27:13" pos:end="27:28">start_of_cluster</name><argument_list pos:start="27:29" pos:end="27:39">(<argument pos:start="27:30" pos:end="27:30"><expr pos:start="27:30" pos:end="27:30"><name pos:start="27:30" pos:end="27:30">s</name></expr></argument>, <argument pos:start="27:33" pos:end="27:38"><expr pos:start="27:33" pos:end="27:38"><name pos:start="27:33" pos:end="27:38">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:50"><expr pos:start="29:5" pos:end="29:49"><name pos:start="29:5" pos:end="29:8">last</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:49"><name pos:start="29:12" pos:end="29:27">start_of_cluster</name><argument_list pos:start="29:28" pos:end="29:49">(<argument pos:start="29:29" pos:end="29:29"><expr pos:start="29:29" pos:end="29:29"><name pos:start="29:29" pos:end="29:29">s</name></expr></argument>, <argument pos:start="29:32" pos:end="29:48"><expr pos:start="29:32" pos:end="29:48"><name pos:start="29:32" pos:end="29:37">offset</name> <operator pos:start="29:39" pos:end="29:39">+</operator> <name pos:start="29:41" pos:end="29:44">size</name> <operator pos:start="29:46" pos:end="29:46">-</operator> <literal type="number" pos:start="29:48" pos:end="29:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="31:5" pos:end="69:5">for<control pos:start="31:8" pos:end="33:42">(<init pos:start="31:9" pos:end="31:31"><expr pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:22">cluster_offset</name> <operator pos:start="31:24" pos:end="31:24">=</operator> <name pos:start="31:26" pos:end="31:30">start</name></expr>;</init> <condition pos:start="31:33" pos:end="31:55"><expr pos:start="31:33" pos:end="31:54"><name pos:start="31:33" pos:end="31:46">cluster_offset</name> <operator pos:start="31:48" pos:end="31:49">&lt;=</operator> <name pos:start="31:51" pos:end="31:54">last</name></expr>;</condition>

        <incr pos:start="33:9" pos:end="33:41"><expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:22">cluster_offset</name> <operator pos:start="33:24" pos:end="33:25">+=</operator> <name pos:start="33:27" pos:end="33:41"><name pos:start="33:27" pos:end="33:27">s</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:41">cluster_size</name></name></expr></incr>)</control> <block pos:start="33:44" pos:end="69:5">{<block_content pos:start="35:9" pos:end="67:9">

        <expr_stmt pos:start="35:9" pos:end="35:46"><expr pos:start="35:9" pos:end="35:45"><name pos:start="35:9" pos:end="35:9">k</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <name pos:start="35:13" pos:end="35:26">cluster_offset</name> <operator pos:start="35:28" pos:end="35:29">&gt;&gt;</operator> <name pos:start="35:31" pos:end="35:45"><name pos:start="35:31" pos:end="35:31">s</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:45">cluster_bits</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="67:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:18">(<expr pos:start="37:13" pos:end="37:17"><name pos:start="37:13" pos:end="37:13">k</name> <operator pos:start="37:15" pos:end="37:15">&lt;</operator> <literal type="number" pos:start="37:17" pos:end="37:17">0</literal></expr>)</condition> <block pos:start="37:20" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:31">

            <expr_stmt pos:start="39:13" pos:end="41:32"><expr pos:start="39:13" pos:end="41:31"><call pos:start="39:13" pos:end="41:31"><name pos:start="39:13" pos:end="39:19">fprintf</name><argument_list pos:start="39:20" pos:end="41:31">(<argument pos:start="39:21" pos:end="39:26"><expr pos:start="39:21" pos:end="39:26"><name pos:start="39:21" pos:end="39:26">stderr</name></expr></argument>, <argument pos:start="39:29" pos:end="39:75"><expr pos:start="39:29" pos:end="39:75"><literal type="string" pos:start="39:29" pos:end="39:63">"ERROR: invalid cluster offset=0x%"</literal> <name pos:start="39:65" pos:end="39:70">PRIx64</name> <literal type="string" pos:start="39:72" pos:end="39:75">"\n"</literal></expr></argument>,

                <argument pos:start="41:17" pos:end="41:30"><expr pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:30">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:31"><expr pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:15">res</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:28">corruptions</name></name><operator pos:start="43:29" pos:end="43:30">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="45:11" pos:end="55:9">else if <condition pos:start="45:19" pos:end="45:44">(<expr pos:start="45:20" pos:end="45:43"><name pos:start="45:20" pos:end="45:20">k</name> <operator pos:start="45:22" pos:end="45:23">&gt;=</operator> <name pos:start="45:25" pos:end="45:43">refcount_table_size</name></expr>)</condition> <block pos:start="45:46" pos:end="55:9">{<block_content pos:start="47:13" pos:end="53:32">

            <expr_stmt pos:start="47:13" pos:end="51:32"><expr pos:start="47:13" pos:end="51:31"><call pos:start="47:13" pos:end="51:31"><name pos:start="47:13" pos:end="47:19">fprintf</name><argument_list pos:start="47:20" pos:end="51:31">(<argument pos:start="47:21" pos:end="47:26"><expr pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:26">stderr</name></expr></argument>, <argument pos:start="47:29" pos:end="49:78"><expr pos:start="47:29" pos:end="49:78"><literal type="string" pos:start="47:29" pos:end="47:57">"Warning: cluster offset=0x%"</literal> <name pos:start="47:59" pos:end="47:64">PRIx64</name> <literal type="string" pos:start="47:66" pos:end="47:77">" is after "</literal>

                <literal type="string" pos:start="49:17" pos:end="49:78">"the end of the image file, can't properly check refcounts.\n"</literal></expr></argument>,

                <argument pos:start="51:17" pos:end="51:30"><expr pos:start="51:17" pos:end="51:30"><name pos:start="51:17" pos:end="51:30">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:32"><expr pos:start="53:13" pos:end="53:31"><name pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:15">res</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:29">check_errors</name></name><operator pos:start="53:30" pos:end="53:31">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="55:11" pos:end="67:9">else <block pos:start="55:16" pos:end="67:9">{<block_content pos:start="57:13" pos:end="65:13">

            <if_stmt pos:start="57:13" pos:end="65:13"><if pos:start="57:13" pos:end="65:13">if <condition pos:start="57:16" pos:end="57:41">(<expr pos:start="57:17" pos:end="57:40"><operator pos:start="57:17" pos:end="57:18">++</operator><name pos:start="57:19" pos:end="57:35"><name pos:start="57:19" pos:end="57:32">refcount_table</name><index pos:start="57:33" pos:end="57:35">[<expr pos:start="57:34" pos:end="57:34"><name pos:start="57:34" pos:end="57:34">k</name></expr>]</index></name> <operator pos:start="57:37" pos:end="57:38">==</operator> <literal type="number" pos:start="57:40" pos:end="57:40">0</literal></expr>)</condition> <block pos:start="57:43" pos:end="65:13">{<block_content pos:start="59:17" pos:end="63:35">

                <expr_stmt pos:start="59:17" pos:end="61:42"><expr pos:start="59:17" pos:end="61:41"><call pos:start="59:17" pos:end="61:41"><name pos:start="59:17" pos:end="59:23">fprintf</name><argument_list pos:start="59:24" pos:end="61:41">(<argument pos:start="59:25" pos:end="59:30"><expr pos:start="59:25" pos:end="59:30"><name pos:start="59:25" pos:end="59:30">stderr</name></expr></argument>, <argument pos:start="59:33" pos:end="61:24"><expr pos:start="59:33" pos:end="61:24"><literal type="string" pos:start="59:33" pos:end="59:68">"ERROR: overflow cluster offset=0x%"</literal> <name pos:start="59:70" pos:end="59:75">PRIx64</name>

                    <literal type="string" pos:start="61:21" pos:end="61:24">"\n"</literal></expr></argument>, <argument pos:start="61:27" pos:end="61:40"><expr pos:start="61:27" pos:end="61:40"><name pos:start="61:27" pos:end="61:40">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:35"><expr pos:start="63:17" pos:end="63:34"><name pos:start="63:17" pos:end="63:32"><name pos:start="63:17" pos:end="63:19">res</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:32">corruptions</name></name><operator pos:start="63:33" pos:end="63:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
