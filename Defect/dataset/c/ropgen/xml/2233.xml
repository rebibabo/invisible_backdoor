<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2233.c" pos:tabs="8"><function pos:start="1:1" pos:end="253:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">video_encode_example</name><parameter_list pos:start="1:33" pos:end="1:68">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:53"><specifier pos:start="1:34" pos:end="1:38">const</specifier> <name pos:start="1:40" pos:end="1:43">char</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:53">filename</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:67"><decl pos:start="1:56" pos:end="1:67"><type pos:start="1:56" pos:end="1:67"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:67">codec_id</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="253:1">{<block_content pos:start="5:5" pos:end="251:17">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">AVCodec</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:18">codec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">c</name><init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name></decl>, <decl pos:start="9:17" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:17">x</name></decl>, <decl pos:start="9:20" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:20">y</name></decl>, <decl pos:start="9:23" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:32">got_output</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">FILE</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:20">picture</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">AVPacket</name></type> <name pos:start="15:14" pos:end="15:16">pkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:41"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:21"><name pos:start="17:13" pos:end="17:19">endcode</name><index pos:start="17:20" pos:end="17:21">[]</index></name> <init pos:start="17:23" pos:end="17:41">= <expr pos:start="17:25" pos:end="17:41"><block pos:start="17:25" pos:end="17:41">{ <expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr>, <expr pos:start="17:30" pos:end="17:30"><literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr>, <expr pos:start="17:33" pos:end="17:33"><literal type="number" pos:start="17:33" pos:end="17:33">1</literal></expr>, <expr pos:start="17:36" pos:end="17:39"><literal type="number" pos:start="17:36" pos:end="17:39">0xb7</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:47"><expr pos:start="21:5" pos:end="21:46"><call pos:start="21:5" pos:end="21:46"><name pos:start="21:5" pos:end="21:10">printf</name><argument_list pos:start="21:11" pos:end="21:46">(<argument pos:start="21:12" pos:end="21:35"><expr pos:start="21:12" pos:end="21:35"><literal type="string" pos:start="21:12" pos:end="21:35">"Encode video file %s\n"</literal></expr></argument>, <argument pos:start="21:38" pos:end="21:45"><expr pos:start="21:38" pos:end="21:45"><name pos:start="21:38" pos:end="21:45">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:38">/* find the mpeg1 video encoder */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:43"><expr pos:start="27:5" pos:end="27:42"><name pos:start="27:5" pos:end="27:9">codec</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:42"><name pos:start="27:13" pos:end="27:32">avcodec_find_encoder</name><argument_list pos:start="27:33" pos:end="27:42">(<argument pos:start="27:34" pos:end="27:41"><expr pos:start="27:34" pos:end="27:41"><name pos:start="27:34" pos:end="27:41">codec_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:15">(<expr pos:start="29:9" pos:end="29:14"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:14">codec</name></expr>)</condition> <block pos:start="29:17" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:16">

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><call pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="31:44">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:43"><expr pos:start="31:25" pos:end="31:43"><literal type="string" pos:start="31:25" pos:end="31:43">"codec not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:15"><call pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:12">exit</name><argument_list pos:start="33:13" pos:end="33:15">(<argument pos:start="33:14" pos:end="33:14"><expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:5">c</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <call pos:start="39:9" pos:end="39:37"><name pos:start="39:9" pos:end="39:30">avcodec_alloc_context3</name><argument_list pos:start="39:31" pos:end="39:37">(<argument pos:start="39:32" pos:end="39:36"><expr pos:start="39:32" pos:end="39:36"><name pos:start="39:32" pos:end="39:36">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:35"><expr pos:start="41:5" pos:end="41:34"><name pos:start="41:5" pos:end="41:11">picture</name><operator pos:start="41:12" pos:end="41:12">=</operator> <call pos:start="41:14" pos:end="41:34"><name pos:start="41:14" pos:end="41:32">avcodec_alloc_frame</name><argument_list pos:start="41:33" pos:end="41:34">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:31">/* put sample parameters */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:25"><expr pos:start="47:5" pos:end="47:24"><name pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:5">c</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:15">bit_rate</name></name> <operator pos:start="47:17" pos:end="47:17">=</operator> <literal type="number" pos:start="47:19" pos:end="47:24">400000</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="49:5" pos:end="49:46">/* resolution must be a multiple of two */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:19"><expr pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:12"><name pos:start="51:5" pos:end="51:5">c</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:12">width</name></name> <operator pos:start="51:14" pos:end="51:14">=</operator> <literal type="number" pos:start="51:16" pos:end="51:18">352</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:20"><expr pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:13"><name pos:start="53:5" pos:end="53:5">c</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:13">height</name></name> <operator pos:start="53:15" pos:end="53:15">=</operator> <literal type="number" pos:start="53:17" pos:end="53:19">288</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="55:5" pos:end="55:27">/* frames per second */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:5">c</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:16">time_base</name></name><operator pos:start="57:17" pos:end="57:17">=</operator> <operator pos:start="57:19" pos:end="57:19">(</operator><name pos:start="57:20" pos:end="57:29">AVRational</name><operator pos:start="57:30" pos:end="57:30">)</operator><block pos:start="57:31" pos:end="57:36">{<expr pos:start="57:32" pos:end="57:32"><literal type="number" pos:start="57:32" pos:end="57:32">1</literal></expr>,<expr pos:start="57:34" pos:end="57:35"><literal type="number" pos:start="57:34" pos:end="57:35">25</literal></expr>}</block></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:21"><expr pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:5">c</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:15">gop_size</name></name> <operator pos:start="59:17" pos:end="59:17">=</operator> <literal type="number" pos:start="59:19" pos:end="59:20">10</literal></expr>;</expr_stmt> <comment type="block" pos:start="59:23" pos:end="59:65">/* emit one intra frame every ten frames */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:22"><expr pos:start="61:5" pos:end="61:21"><name pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:5">c</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:19">max_b_frames</name></name><operator pos:start="61:20" pos:end="61:20">=</operator><literal type="number" pos:start="61:21" pos:end="61:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:33"><expr pos:start="63:5" pos:end="63:32"><name pos:start="63:5" pos:end="63:14"><name pos:start="63:5" pos:end="63:5">c</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:14">pix_fmt</name></name> <operator pos:start="63:16" pos:end="63:16">=</operator> <name pos:start="63:18" pos:end="63:32">PIX_FMT_YUV420P</name></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="69:54"><if pos:start="67:5" pos:end="69:54">if<condition pos:start="67:7" pos:end="67:36">(<expr pos:start="67:8" pos:end="67:35"><name pos:start="67:8" pos:end="67:15">codec_id</name> <operator pos:start="67:17" pos:end="67:18">==</operator> <name pos:start="67:20" pos:end="67:35">AV_CODEC_ID_H264</name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:54"><block_content pos:start="69:9" pos:end="69:54">

        <expr_stmt pos:start="69:9" pos:end="69:54"><expr pos:start="69:9" pos:end="69:53"><call pos:start="69:9" pos:end="69:53"><name pos:start="69:9" pos:end="69:18">av_opt_set</name><argument_list pos:start="69:19" pos:end="69:53">(<argument pos:start="69:20" pos:end="69:31"><expr pos:start="69:20" pos:end="69:31"><name pos:start="69:20" pos:end="69:31"><name pos:start="69:20" pos:end="69:20">c</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:31">priv_data</name></name></expr></argument>, <argument pos:start="69:34" pos:end="69:41"><expr pos:start="69:34" pos:end="69:41"><literal type="string" pos:start="69:34" pos:end="69:41">"preset"</literal></expr></argument>, <argument pos:start="69:44" pos:end="69:49"><expr pos:start="69:44" pos:end="69:49"><literal type="string" pos:start="69:44" pos:end="69:49">"slow"</literal></expr></argument>, <argument pos:start="69:52" pos:end="69:52"><expr pos:start="69:52" pos:end="69:52"><literal type="number" pos:start="69:52" pos:end="69:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:17">/* open it */</comment>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:42">(<expr pos:start="75:9" pos:end="75:41"><call pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:21">avcodec_open2</name><argument_list pos:start="75:22" pos:end="75:37">(<argument pos:start="75:23" pos:end="75:23"><expr pos:start="75:23" pos:end="75:23"><name pos:start="75:23" pos:end="75:23">c</name></expr></argument>, <argument pos:start="75:26" pos:end="75:30"><expr pos:start="75:26" pos:end="75:30"><name pos:start="75:26" pos:end="75:30">codec</name></expr></argument>, <argument pos:start="75:33" pos:end="75:36"><expr pos:start="75:33" pos:end="75:36"><name pos:start="75:33" pos:end="75:36">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="75:39" pos:end="75:39">&lt;</operator> <literal type="number" pos:start="75:41" pos:end="75:41">0</literal></expr>)</condition> <block pos:start="75:44" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:16">

        <expr_stmt pos:start="77:9" pos:end="77:50"><expr pos:start="77:9" pos:end="77:49"><call pos:start="77:9" pos:end="77:49"><name pos:start="77:9" pos:end="77:15">fprintf</name><argument_list pos:start="77:16" pos:end="77:49">(<argument pos:start="77:17" pos:end="77:22"><expr pos:start="77:17" pos:end="77:22"><name pos:start="77:17" pos:end="77:22">stderr</name></expr></argument>, <argument pos:start="77:25" pos:end="77:48"><expr pos:start="77:25" pos:end="77:48"><literal type="string" pos:start="77:25" pos:end="77:48">"could not open codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:16"><expr pos:start="79:9" pos:end="79:15"><call pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:12">exit</name><argument_list pos:start="79:13" pos:end="79:15">(<argument pos:start="79:14" pos:end="79:14"><expr pos:start="79:14" pos:end="79:14"><literal type="number" pos:start="79:14" pos:end="79:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:30"><expr pos:start="85:5" pos:end="85:29"><name pos:start="85:5" pos:end="85:5">f</name> <operator pos:start="85:7" pos:end="85:7">=</operator> <call pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:13">fopen</name><argument_list pos:start="85:14" pos:end="85:29">(<argument pos:start="85:15" pos:end="85:22"><expr pos:start="85:15" pos:end="85:22"><name pos:start="85:15" pos:end="85:22">filename</name></expr></argument>, <argument pos:start="85:25" pos:end="85:28"><expr pos:start="85:25" pos:end="85:28"><literal type="string" pos:start="85:25" pos:end="85:28">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:11">(<expr pos:start="87:9" pos:end="87:10"><operator pos:start="87:9" pos:end="87:9">!</operator><name pos:start="87:10" pos:end="87:10">f</name></expr>)</condition> <block pos:start="87:13" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:16">

        <expr_stmt pos:start="89:9" pos:end="89:57"><expr pos:start="89:9" pos:end="89:56"><call pos:start="89:9" pos:end="89:56"><name pos:start="89:9" pos:end="89:15">fprintf</name><argument_list pos:start="89:16" pos:end="89:56">(<argument pos:start="89:17" pos:end="89:22"><expr pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:22">stderr</name></expr></argument>, <argument pos:start="89:25" pos:end="89:45"><expr pos:start="89:25" pos:end="89:45"><literal type="string" pos:start="89:25" pos:end="89:45">"could not open %s\n"</literal></expr></argument>, <argument pos:start="89:48" pos:end="89:55"><expr pos:start="89:48" pos:end="89:55"><name pos:start="89:48" pos:end="89:55">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:16"><expr pos:start="91:9" pos:end="91:15"><call pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:12">exit</name><argument_list pos:start="91:13" pos:end="91:15">(<argument pos:start="91:14" pos:end="91:14"><expr pos:start="91:14" pos:end="91:14"><literal type="number" pos:start="91:14" pos:end="91:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="99:67">/* the image can be allocated by any means and av_image_alloc() is

     * just the most convenient way if av_malloc() is to be used */</comment>

    <expr_stmt pos:start="101:5" pos:end="103:41"><expr pos:start="101:5" pos:end="103:40"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="103:40"><name pos:start="101:11" pos:end="101:24">av_image_alloc</name><argument_list pos:start="101:25" pos:end="103:40">(<argument pos:start="101:26" pos:end="101:38"><expr pos:start="101:26" pos:end="101:38"><name pos:start="101:26" pos:end="101:38"><name pos:start="101:26" pos:end="101:32">picture</name><operator pos:start="101:33" pos:end="101:34">-&gt;</operator><name pos:start="101:35" pos:end="101:38">data</name></name></expr></argument>, <argument pos:start="101:41" pos:end="101:57"><expr pos:start="101:41" pos:end="101:57"><name pos:start="101:41" pos:end="101:57"><name pos:start="101:41" pos:end="101:47">picture</name><operator pos:start="101:48" pos:end="101:49">-&gt;</operator><name pos:start="101:50" pos:end="101:57">linesize</name></name></expr></argument>, <argument pos:start="101:60" pos:end="101:67"><expr pos:start="101:60" pos:end="101:67"><name pos:start="101:60" pos:end="101:67"><name pos:start="101:60" pos:end="101:60">c</name><operator pos:start="101:61" pos:end="101:62">-&gt;</operator><name pos:start="101:63" pos:end="101:67">width</name></name></expr></argument>, <argument pos:start="101:70" pos:end="101:78"><expr pos:start="101:70" pos:end="101:78"><name pos:start="101:70" pos:end="101:78"><name pos:start="101:70" pos:end="101:70">c</name><operator pos:start="101:71" pos:end="101:72">-&gt;</operator><name pos:start="101:73" pos:end="101:78">height</name></name></expr></argument>,

                         <argument pos:start="103:26" pos:end="103:35"><expr pos:start="103:26" pos:end="103:35"><name pos:start="103:26" pos:end="103:35"><name pos:start="103:26" pos:end="103:26">c</name><operator pos:start="103:27" pos:end="103:28">-&gt;</operator><name pos:start="103:29" pos:end="103:35">pix_fmt</name></name></expr></argument>, <argument pos:start="103:38" pos:end="103:39"><expr pos:start="103:38" pos:end="103:39"><literal type="number" pos:start="103:38" pos:end="103:39">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:16">(<expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">&lt;</operator> <literal type="number" pos:start="105:15" pos:end="105:15">0</literal></expr>)</condition> <block pos:start="105:18" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:16">

        <expr_stmt pos:start="107:9" pos:end="107:64"><expr pos:start="107:9" pos:end="107:63"><call pos:start="107:9" pos:end="107:63"><name pos:start="107:9" pos:end="107:15">fprintf</name><argument_list pos:start="107:16" pos:end="107:63">(<argument pos:start="107:17" pos:end="107:22"><expr pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:22">stderr</name></expr></argument>, <argument pos:start="107:25" pos:end="107:62"><expr pos:start="107:25" pos:end="107:62"><literal type="string" pos:start="107:25" pos:end="107:62">"could not alloc raw picture buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:16"><expr pos:start="109:9" pos:end="109:15"><call pos:start="109:9" pos:end="109:15"><name pos:start="109:9" pos:end="109:12">exit</name><argument_list pos:start="109:13" pos:end="109:15">(<argument pos:start="109:14" pos:end="109:14"><expr pos:start="109:14" pos:end="109:14"><literal type="number" pos:start="109:14" pos:end="109:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:33"><expr pos:start="115:5" pos:end="115:32"><name pos:start="115:5" pos:end="115:19"><name pos:start="115:5" pos:end="115:11">picture</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:19">format</name></name> <operator pos:start="115:21" pos:end="115:21">=</operator> <name pos:start="115:23" pos:end="115:32"><name pos:start="115:23" pos:end="115:23">c</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:32">pix_fmt</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:31"><expr pos:start="117:5" pos:end="117:30"><name pos:start="117:5" pos:end="117:18"><name pos:start="117:5" pos:end="117:11">picture</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:18">width</name></name>  <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:30"><name pos:start="117:23" pos:end="117:23">c</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:30">width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:32"><expr pos:start="119:5" pos:end="119:31"><name pos:start="119:5" pos:end="119:19"><name pos:start="119:5" pos:end="119:11">picture</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:19">height</name></name> <operator pos:start="119:21" pos:end="119:21">=</operator> <name pos:start="119:23" pos:end="119:31"><name pos:start="119:23" pos:end="119:23">c</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:31">height</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:34">/* encode 1 second of video */</comment>

    <for pos:start="125:5" pos:end="197:5">for<control pos:start="125:8" pos:end="125:21">(<init pos:start="125:9" pos:end="125:12"><expr pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:9">i</name><operator pos:start="125:10" pos:end="125:10">=</operator><literal type="number" pos:start="125:11" pos:end="125:11">0</literal></expr>;</init><condition pos:start="125:13" pos:end="125:17"><expr pos:start="125:13" pos:end="125:16"><name pos:start="125:13" pos:end="125:13">i</name><operator pos:start="125:14" pos:end="125:14">&lt;</operator><literal type="number" pos:start="125:15" pos:end="125:16">25</literal></expr>;</condition><incr pos:start="125:18" pos:end="125:20"><expr pos:start="125:18" pos:end="125:20"><name pos:start="125:18" pos:end="125:18">i</name><operator pos:start="125:19" pos:end="125:20">++</operator></expr></incr>)</control> <block pos:start="125:23" pos:end="197:5">{<block_content pos:start="127:9" pos:end="195:9">

        <expr_stmt pos:start="127:9" pos:end="127:29"><expr pos:start="127:9" pos:end="127:28"><call pos:start="127:9" pos:end="127:28"><name pos:start="127:9" pos:end="127:22">av_init_packet</name><argument_list pos:start="127:23" pos:end="127:28">(<argument pos:start="127:24" pos:end="127:27"><expr pos:start="127:24" pos:end="127:27"><operator pos:start="127:24" pos:end="127:24">&amp;</operator><name pos:start="127:25" pos:end="127:27">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:24"><expr pos:start="129:9" pos:end="129:23"><name pos:start="129:9" pos:end="129:16"><name pos:start="129:9" pos:end="129:11">pkt</name><operator pos:start="129:12" pos:end="129:12">.</operator><name pos:start="129:13" pos:end="129:16">data</name></name> <operator pos:start="129:18" pos:end="129:18">=</operator> <name pos:start="129:20" pos:end="129:23">NULL</name></expr>;</expr_stmt>    <comment type="line" pos:start="129:29" pos:end="129:75">// packet data will be allocated by the encoder</comment>

        <expr_stmt pos:start="131:9" pos:end="131:21"><expr pos:start="131:9" pos:end="131:20"><name pos:start="131:9" pos:end="131:16"><name pos:start="131:9" pos:end="131:11">pkt</name><operator pos:start="131:12" pos:end="131:12">.</operator><name pos:start="131:13" pos:end="131:16">size</name></name> <operator pos:start="131:18" pos:end="131:18">=</operator> <literal type="number" pos:start="131:20" pos:end="131:20">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:23"><expr pos:start="135:9" pos:end="135:22"><call pos:start="135:9" pos:end="135:22"><name pos:start="135:9" pos:end="135:14">fflush</name><argument_list pos:start="135:15" pos:end="135:22">(<argument pos:start="135:16" pos:end="135:21"><expr pos:start="135:16" pos:end="135:21"><name pos:start="135:16" pos:end="135:21">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="137:9" pos:end="137:35">/* prepare a dummy image */</comment>

        <comment type="block" pos:start="139:9" pos:end="139:15">/* Y */</comment>

        <for pos:start="141:9" pos:end="149:9">for<control pos:start="141:12" pos:end="141:32">(<init pos:start="141:13" pos:end="141:16"><expr pos:start="141:13" pos:end="141:15"><name pos:start="141:13" pos:end="141:13">y</name><operator pos:start="141:14" pos:end="141:14">=</operator><literal type="number" pos:start="141:15" pos:end="141:15">0</literal></expr>;</init><condition pos:start="141:17" pos:end="141:28"><expr pos:start="141:17" pos:end="141:27"><name pos:start="141:17" pos:end="141:17">y</name><operator pos:start="141:18" pos:end="141:18">&lt;</operator><name pos:start="141:19" pos:end="141:27"><name pos:start="141:19" pos:end="141:19">c</name><operator pos:start="141:20" pos:end="141:21">-&gt;</operator><name pos:start="141:22" pos:end="141:27">height</name></name></expr>;</condition><incr pos:start="141:29" pos:end="141:31"><expr pos:start="141:29" pos:end="141:31"><name pos:start="141:29" pos:end="141:29">y</name><operator pos:start="141:30" pos:end="141:31">++</operator></expr></incr>)</control> <block pos:start="141:34" pos:end="149:9">{<block_content pos:start="143:13" pos:end="147:13">

            <for pos:start="143:13" pos:end="147:13">for<control pos:start="143:16" pos:end="143:35">(<init pos:start="143:17" pos:end="143:20"><expr pos:start="143:17" pos:end="143:19"><name pos:start="143:17" pos:end="143:17">x</name><operator pos:start="143:18" pos:end="143:18">=</operator><literal type="number" pos:start="143:19" pos:end="143:19">0</literal></expr>;</init><condition pos:start="143:21" pos:end="143:31"><expr pos:start="143:21" pos:end="143:30"><name pos:start="143:21" pos:end="143:21">x</name><operator pos:start="143:22" pos:end="143:22">&lt;</operator><name pos:start="143:23" pos:end="143:30"><name pos:start="143:23" pos:end="143:23">c</name><operator pos:start="143:24" pos:end="143:25">-&gt;</operator><name pos:start="143:26" pos:end="143:30">width</name></name></expr>;</condition><incr pos:start="143:32" pos:end="143:34"><expr pos:start="143:32" pos:end="143:34"><name pos:start="143:32" pos:end="143:32">x</name><operator pos:start="143:33" pos:end="143:34">++</operator></expr></incr>)</control> <block pos:start="143:37" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:79">

                <expr_stmt pos:start="145:17" pos:end="145:79"><expr pos:start="145:17" pos:end="145:78"><name pos:start="145:17" pos:end="145:62"><name pos:start="145:17" pos:end="145:23">picture</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:29">data</name><index pos:start="145:30" pos:end="145:32">[<expr pos:start="145:31" pos:end="145:31"><literal type="number" pos:start="145:31" pos:end="145:31">0</literal></expr>]</index><index pos:start="145:33" pos:end="145:62">[<expr pos:start="145:34" pos:end="145:61"><name pos:start="145:34" pos:end="145:34">y</name> <operator pos:start="145:36" pos:end="145:36">*</operator> <name pos:start="145:38" pos:end="145:57"><name pos:start="145:38" pos:end="145:44">picture</name><operator pos:start="145:45" pos:end="145:46">-&gt;</operator><name pos:start="145:47" pos:end="145:54">linesize</name><index pos:start="145:55" pos:end="145:57">[<expr pos:start="145:56" pos:end="145:56"><literal type="number" pos:start="145:56" pos:end="145:56">0</literal></expr>]</index></name> <operator pos:start="145:59" pos:end="145:59">+</operator> <name pos:start="145:61" pos:end="145:61">x</name></expr>]</index></name> <operator pos:start="145:64" pos:end="145:64">=</operator> <name pos:start="145:66" pos:end="145:66">x</name> <operator pos:start="145:68" pos:end="145:68">+</operator> <name pos:start="145:70" pos:end="145:70">y</name> <operator pos:start="145:72" pos:end="145:72">+</operator> <name pos:start="145:74" pos:end="145:74">i</name> <operator pos:start="145:76" pos:end="145:76">*</operator> <literal type="number" pos:start="145:78" pos:end="145:78">3</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <comment type="block" pos:start="153:9" pos:end="153:23">/* Cb and Cr */</comment>

        <for pos:start="155:9" pos:end="165:9">for<control pos:start="155:12" pos:end="155:34">(<init pos:start="155:13" pos:end="155:16"><expr pos:start="155:13" pos:end="155:15"><name pos:start="155:13" pos:end="155:13">y</name><operator pos:start="155:14" pos:end="155:14">=</operator><literal type="number" pos:start="155:15" pos:end="155:15">0</literal></expr>;</init><condition pos:start="155:17" pos:end="155:30"><expr pos:start="155:17" pos:end="155:29"><name pos:start="155:17" pos:end="155:17">y</name><operator pos:start="155:18" pos:end="155:18">&lt;</operator><name pos:start="155:19" pos:end="155:27"><name pos:start="155:19" pos:end="155:19">c</name><operator pos:start="155:20" pos:end="155:21">-&gt;</operator><name pos:start="155:22" pos:end="155:27">height</name></name><operator pos:start="155:28" pos:end="155:28">/</operator><literal type="number" pos:start="155:29" pos:end="155:29">2</literal></expr>;</condition><incr pos:start="155:31" pos:end="155:33"><expr pos:start="155:31" pos:end="155:33"><name pos:start="155:31" pos:end="155:31">y</name><operator pos:start="155:32" pos:end="155:33">++</operator></expr></incr>)</control> <block pos:start="155:36" pos:end="165:9">{<block_content pos:start="157:13" pos:end="163:13">

            <for pos:start="157:13" pos:end="163:13">for<control pos:start="157:16" pos:end="157:37">(<init pos:start="157:17" pos:end="157:20"><expr pos:start="157:17" pos:end="157:19"><name pos:start="157:17" pos:end="157:17">x</name><operator pos:start="157:18" pos:end="157:18">=</operator><literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>;</init><condition pos:start="157:21" pos:end="157:33"><expr pos:start="157:21" pos:end="157:32"><name pos:start="157:21" pos:end="157:21">x</name><operator pos:start="157:22" pos:end="157:22">&lt;</operator><name pos:start="157:23" pos:end="157:30"><name pos:start="157:23" pos:end="157:23">c</name><operator pos:start="157:24" pos:end="157:25">-&gt;</operator><name pos:start="157:26" pos:end="157:30">width</name></name><operator pos:start="157:31" pos:end="157:31">/</operator><literal type="number" pos:start="157:32" pos:end="157:32">2</literal></expr>;</condition><incr pos:start="157:34" pos:end="157:36"><expr pos:start="157:34" pos:end="157:36"><name pos:start="157:34" pos:end="157:34">x</name><operator pos:start="157:35" pos:end="157:36">++</operator></expr></incr>)</control> <block pos:start="157:39" pos:end="163:13">{<block_content pos:start="159:17" pos:end="161:80">

                <expr_stmt pos:start="159:17" pos:end="159:81"><expr pos:start="159:17" pos:end="159:80"><name pos:start="159:17" pos:end="159:62"><name pos:start="159:17" pos:end="159:23">picture</name><operator pos:start="159:24" pos:end="159:25">-&gt;</operator><name pos:start="159:26" pos:end="159:29">data</name><index pos:start="159:30" pos:end="159:32">[<expr pos:start="159:31" pos:end="159:31"><literal type="number" pos:start="159:31" pos:end="159:31">1</literal></expr>]</index><index pos:start="159:33" pos:end="159:62">[<expr pos:start="159:34" pos:end="159:61"><name pos:start="159:34" pos:end="159:34">y</name> <operator pos:start="159:36" pos:end="159:36">*</operator> <name pos:start="159:38" pos:end="159:57"><name pos:start="159:38" pos:end="159:44">picture</name><operator pos:start="159:45" pos:end="159:46">-&gt;</operator><name pos:start="159:47" pos:end="159:54">linesize</name><index pos:start="159:55" pos:end="159:57">[<expr pos:start="159:56" pos:end="159:56"><literal type="number" pos:start="159:56" pos:end="159:56">1</literal></expr>]</index></name> <operator pos:start="159:59" pos:end="159:59">+</operator> <name pos:start="159:61" pos:end="159:61">x</name></expr>]</index></name> <operator pos:start="159:64" pos:end="159:64">=</operator> <literal type="number" pos:start="159:66" pos:end="159:70">128</literal> <operator pos:start="159:70" pos:end="159:70">+</operator> <name pos:start="159:72" pos:end="159:72">y</name> <operator pos:start="159:74" pos:end="159:74">+</operator> <name pos:start="159:76" pos:end="159:76">i</name> <operator pos:start="159:78" pos:end="159:78">*</operator> <literal type="number" pos:start="159:80" pos:end="159:80">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:80"><expr pos:start="161:17" pos:end="161:79"><name pos:start="161:17" pos:end="161:62"><name pos:start="161:17" pos:end="161:23">picture</name><operator pos:start="161:24" pos:end="161:25">-&gt;</operator><name pos:start="161:26" pos:end="161:29">data</name><index pos:start="161:30" pos:end="161:32">[<expr pos:start="161:31" pos:end="161:31"><literal type="number" pos:start="161:31" pos:end="161:31">2</literal></expr>]</index><index pos:start="161:33" pos:end="161:62">[<expr pos:start="161:34" pos:end="161:61"><name pos:start="161:34" pos:end="161:34">y</name> <operator pos:start="161:36" pos:end="161:36">*</operator> <name pos:start="161:38" pos:end="161:57"><name pos:start="161:38" pos:end="161:44">picture</name><operator pos:start="161:45" pos:end="161:46">-&gt;</operator><name pos:start="161:47" pos:end="161:54">linesize</name><index pos:start="161:55" pos:end="161:57">[<expr pos:start="161:56" pos:end="161:56"><literal type="number" pos:start="161:56" pos:end="161:56">2</literal></expr>]</index></name> <operator pos:start="161:59" pos:end="161:59">+</operator> <name pos:start="161:61" pos:end="161:61">x</name></expr>]</index></name> <operator pos:start="161:64" pos:end="161:64">=</operator> <literal type="number" pos:start="161:66" pos:end="161:69">64</literal> <operator pos:start="161:69" pos:end="161:69">+</operator> <name pos:start="161:71" pos:end="161:71">x</name> <operator pos:start="161:73" pos:end="161:73">+</operator> <name pos:start="161:75" pos:end="161:75">i</name> <operator pos:start="161:77" pos:end="161:77">*</operator> <literal type="number" pos:start="161:79" pos:end="161:79">5</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <expr_stmt pos:start="169:9" pos:end="169:25"><expr pos:start="169:9" pos:end="169:24"><name pos:start="169:9" pos:end="169:20"><name pos:start="169:9" pos:end="169:15">picture</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:20">pts</name></name> <operator pos:start="169:22" pos:end="169:22">=</operator> <name pos:start="169:24" pos:end="169:24">i</name></expr>;</expr_stmt>



        <comment type="block" pos:start="173:9" pos:end="173:30">/* encode the image */</comment>

        <expr_stmt pos:start="175:9" pos:end="175:67"><expr pos:start="175:9" pos:end="175:66"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="175:66"><name pos:start="175:15" pos:end="175:35">avcodec_encode_video2</name><argument_list pos:start="175:36" pos:end="175:66">(<argument pos:start="175:37" pos:end="175:37"><expr pos:start="175:37" pos:end="175:37"><name pos:start="175:37" pos:end="175:37">c</name></expr></argument>, <argument pos:start="175:40" pos:end="175:43"><expr pos:start="175:40" pos:end="175:43"><operator pos:start="175:40" pos:end="175:40">&amp;</operator><name pos:start="175:41" pos:end="175:43">pkt</name></expr></argument>, <argument pos:start="175:46" pos:end="175:52"><expr pos:start="175:46" pos:end="175:52"><name pos:start="175:46" pos:end="175:52">picture</name></expr></argument>, <argument pos:start="175:55" pos:end="175:65"><expr pos:start="175:55" pos:end="175:65"><operator pos:start="175:55" pos:end="175:55">&amp;</operator><name pos:start="175:56" pos:end="175:65">got_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="183:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:20">(<expr pos:start="177:13" pos:end="177:19"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">&lt;</operator> <literal type="number" pos:start="177:19" pos:end="177:19">0</literal></expr>)</condition> <block pos:start="177:22" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:20">

            <expr_stmt pos:start="179:13" pos:end="179:54"><expr pos:start="179:13" pos:end="179:53"><call pos:start="179:13" pos:end="179:53"><name pos:start="179:13" pos:end="179:19">fprintf</name><argument_list pos:start="179:20" pos:end="179:53">(<argument pos:start="179:21" pos:end="179:26"><expr pos:start="179:21" pos:end="179:26"><name pos:start="179:21" pos:end="179:26">stderr</name></expr></argument>, <argument pos:start="179:29" pos:end="179:52"><expr pos:start="179:29" pos:end="179:52"><literal type="string" pos:start="179:29" pos:end="179:52">"error encoding frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:20"><expr pos:start="181:13" pos:end="181:19"><call pos:start="181:13" pos:end="181:19"><name pos:start="181:13" pos:end="181:16">exit</name><argument_list pos:start="181:17" pos:end="181:19">(<argument pos:start="181:18" pos:end="181:18"><expr pos:start="181:18" pos:end="181:18"><literal type="number" pos:start="181:18" pos:end="181:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="187:9" pos:end="195:9"><if pos:start="187:9" pos:end="195:9">if <condition pos:start="187:12" pos:end="187:23">(<expr pos:start="187:13" pos:end="187:22"><name pos:start="187:13" pos:end="187:22">got_output</name></expr>)</condition> <block pos:start="187:25" pos:end="195:9">{<block_content pos:start="189:13" pos:end="193:33">

            <expr_stmt pos:start="189:13" pos:end="189:67"><expr pos:start="189:13" pos:end="189:66"><call pos:start="189:13" pos:end="189:66"><name pos:start="189:13" pos:end="189:18">printf</name><argument_list pos:start="189:19" pos:end="189:66">(<argument pos:start="189:20" pos:end="189:52"><expr pos:start="189:20" pos:end="189:52"><literal type="string" pos:start="189:20" pos:end="189:52">"encoding frame %3d (size=%5d)\n"</literal></expr></argument>, <argument pos:start="189:55" pos:end="189:55"><expr pos:start="189:55" pos:end="189:55"><name pos:start="189:55" pos:end="189:55">i</name></expr></argument>, <argument pos:start="189:58" pos:end="189:65"><expr pos:start="189:58" pos:end="189:65"><name pos:start="189:58" pos:end="189:65"><name pos:start="189:58" pos:end="189:60">pkt</name><operator pos:start="189:61" pos:end="189:61">.</operator><name pos:start="189:62" pos:end="189:65">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:45"><expr pos:start="191:13" pos:end="191:44"><call pos:start="191:13" pos:end="191:44"><name pos:start="191:13" pos:end="191:18">fwrite</name><argument_list pos:start="191:19" pos:end="191:44">(<argument pos:start="191:20" pos:end="191:27"><expr pos:start="191:20" pos:end="191:27"><name pos:start="191:20" pos:end="191:27"><name pos:start="191:20" pos:end="191:22">pkt</name><operator pos:start="191:23" pos:end="191:23">.</operator><name pos:start="191:24" pos:end="191:27">data</name></name></expr></argument>, <argument pos:start="191:30" pos:end="191:30"><expr pos:start="191:30" pos:end="191:30"><literal type="number" pos:start="191:30" pos:end="191:30">1</literal></expr></argument>, <argument pos:start="191:33" pos:end="191:40"><expr pos:start="191:33" pos:end="191:40"><name pos:start="191:33" pos:end="191:40"><name pos:start="191:33" pos:end="191:35">pkt</name><operator pos:start="191:36" pos:end="191:36">.</operator><name pos:start="191:37" pos:end="191:40">size</name></name></expr></argument>, <argument pos:start="191:43" pos:end="191:43"><expr pos:start="191:43" pos:end="191:43"><name pos:start="191:43" pos:end="191:43">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:33"><expr pos:start="193:13" pos:end="193:32"><call pos:start="193:13" pos:end="193:32"><name pos:start="193:13" pos:end="193:26">av_free_packet</name><argument_list pos:start="193:27" pos:end="193:32">(<argument pos:start="193:28" pos:end="193:31"><expr pos:start="193:28" pos:end="193:31"><operator pos:start="193:28" pos:end="193:28">&amp;</operator><name pos:start="193:29" pos:end="193:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="201:5" pos:end="201:32">/* get the delayed frames */</comment>

    <for pos:start="203:5" pos:end="231:5">for <control pos:start="203:9" pos:end="203:41">(<init pos:start="203:10" pos:end="203:24"><expr pos:start="203:10" pos:end="203:23"><name pos:start="203:10" pos:end="203:19">got_output</name> <operator pos:start="203:21" pos:end="203:21">=</operator> <literal type="number" pos:start="203:23" pos:end="203:23">1</literal></expr>;</init> <condition pos:start="203:26" pos:end="203:36"><expr pos:start="203:26" pos:end="203:35"><name pos:start="203:26" pos:end="203:35">got_output</name></expr>;</condition> <incr pos:start="203:38" pos:end="203:40"><expr pos:start="203:38" pos:end="203:40"><name pos:start="203:38" pos:end="203:38">i</name><operator pos:start="203:39" pos:end="203:40">++</operator></expr></incr>)</control> <block pos:start="203:43" pos:end="231:5">{<block_content pos:start="205:9" pos:end="229:9">

        <expr_stmt pos:start="205:9" pos:end="205:23"><expr pos:start="205:9" pos:end="205:22"><call pos:start="205:9" pos:end="205:22"><name pos:start="205:9" pos:end="205:14">fflush</name><argument_list pos:start="205:15" pos:end="205:22">(<argument pos:start="205:16" pos:end="205:21"><expr pos:start="205:16" pos:end="205:21"><name pos:start="205:16" pos:end="205:21">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="209:9" pos:end="209:64"><expr pos:start="209:9" pos:end="209:63"><name pos:start="209:9" pos:end="209:11">ret</name> <operator pos:start="209:13" pos:end="209:13">=</operator> <call pos:start="209:15" pos:end="209:63"><name pos:start="209:15" pos:end="209:35">avcodec_encode_video2</name><argument_list pos:start="209:36" pos:end="209:63">(<argument pos:start="209:37" pos:end="209:37"><expr pos:start="209:37" pos:end="209:37"><name pos:start="209:37" pos:end="209:37">c</name></expr></argument>, <argument pos:start="209:40" pos:end="209:43"><expr pos:start="209:40" pos:end="209:43"><operator pos:start="209:40" pos:end="209:40">&amp;</operator><name pos:start="209:41" pos:end="209:43">pkt</name></expr></argument>, <argument pos:start="209:46" pos:end="209:49"><expr pos:start="209:46" pos:end="209:49"><name pos:start="209:46" pos:end="209:49">NULL</name></expr></argument>, <argument pos:start="209:52" pos:end="209:62"><expr pos:start="209:52" pos:end="209:62"><operator pos:start="209:52" pos:end="209:52">&amp;</operator><name pos:start="209:53" pos:end="209:62">got_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="217:9"><if pos:start="211:9" pos:end="217:9">if <condition pos:start="211:12" pos:end="211:20">(<expr pos:start="211:13" pos:end="211:19"><name pos:start="211:13" pos:end="211:15">ret</name> <operator pos:start="211:17" pos:end="211:17">&lt;</operator> <literal type="number" pos:start="211:19" pos:end="211:19">0</literal></expr>)</condition> <block pos:start="211:22" pos:end="217:9">{<block_content pos:start="213:13" pos:end="215:20">

            <expr_stmt pos:start="213:13" pos:end="213:54"><expr pos:start="213:13" pos:end="213:53"><call pos:start="213:13" pos:end="213:53"><name pos:start="213:13" pos:end="213:19">fprintf</name><argument_list pos:start="213:20" pos:end="213:53">(<argument pos:start="213:21" pos:end="213:26"><expr pos:start="213:21" pos:end="213:26"><name pos:start="213:21" pos:end="213:26">stderr</name></expr></argument>, <argument pos:start="213:29" pos:end="213:52"><expr pos:start="213:29" pos:end="213:52"><literal type="string" pos:start="213:29" pos:end="213:52">"error encoding frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:20"><expr pos:start="215:13" pos:end="215:19"><call pos:start="215:13" pos:end="215:19"><name pos:start="215:13" pos:end="215:16">exit</name><argument_list pos:start="215:17" pos:end="215:19">(<argument pos:start="215:18" pos:end="215:18"><expr pos:start="215:18" pos:end="215:18"><literal type="number" pos:start="215:18" pos:end="215:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="221:9" pos:end="229:9"><if pos:start="221:9" pos:end="229:9">if <condition pos:start="221:12" pos:end="221:23">(<expr pos:start="221:13" pos:end="221:22"><name pos:start="221:13" pos:end="221:22">got_output</name></expr>)</condition> <block pos:start="221:25" pos:end="229:9">{<block_content pos:start="223:13" pos:end="227:33">

            <expr_stmt pos:start="223:13" pos:end="223:64"><expr pos:start="223:13" pos:end="223:63"><call pos:start="223:13" pos:end="223:63"><name pos:start="223:13" pos:end="223:18">printf</name><argument_list pos:start="223:19" pos:end="223:63">(<argument pos:start="223:20" pos:end="223:49"><expr pos:start="223:20" pos:end="223:49"><literal type="string" pos:start="223:20" pos:end="223:49">"write frame %3d (size=%5d)\n"</literal></expr></argument>, <argument pos:start="223:52" pos:end="223:52"><expr pos:start="223:52" pos:end="223:52"><name pos:start="223:52" pos:end="223:52">i</name></expr></argument>, <argument pos:start="223:55" pos:end="223:62"><expr pos:start="223:55" pos:end="223:62"><name pos:start="223:55" pos:end="223:62"><name pos:start="223:55" pos:end="223:57">pkt</name><operator pos:start="223:58" pos:end="223:58">.</operator><name pos:start="223:59" pos:end="223:62">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:45"><expr pos:start="225:13" pos:end="225:44"><call pos:start="225:13" pos:end="225:44"><name pos:start="225:13" pos:end="225:18">fwrite</name><argument_list pos:start="225:19" pos:end="225:44">(<argument pos:start="225:20" pos:end="225:27"><expr pos:start="225:20" pos:end="225:27"><name pos:start="225:20" pos:end="225:27"><name pos:start="225:20" pos:end="225:22">pkt</name><operator pos:start="225:23" pos:end="225:23">.</operator><name pos:start="225:24" pos:end="225:27">data</name></name></expr></argument>, <argument pos:start="225:30" pos:end="225:30"><expr pos:start="225:30" pos:end="225:30"><literal type="number" pos:start="225:30" pos:end="225:30">1</literal></expr></argument>, <argument pos:start="225:33" pos:end="225:40"><expr pos:start="225:33" pos:end="225:40"><name pos:start="225:33" pos:end="225:40"><name pos:start="225:33" pos:end="225:35">pkt</name><operator pos:start="225:36" pos:end="225:36">.</operator><name pos:start="225:37" pos:end="225:40">size</name></name></expr></argument>, <argument pos:start="225:43" pos:end="225:43"><expr pos:start="225:43" pos:end="225:43"><name pos:start="225:43" pos:end="225:43">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:33"><expr pos:start="227:13" pos:end="227:32"><call pos:start="227:13" pos:end="227:32"><name pos:start="227:13" pos:end="227:26">av_free_packet</name><argument_list pos:start="227:27" pos:end="227:32">(<argument pos:start="227:28" pos:end="227:31"><expr pos:start="227:28" pos:end="227:31"><operator pos:start="227:28" pos:end="227:28">&amp;</operator><name pos:start="227:29" pos:end="227:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="235:5" pos:end="235:56">/* add sequence end code to have a real mpeg file */</comment>

    <expr_stmt pos:start="237:5" pos:end="237:43"><expr pos:start="237:5" pos:end="237:42"><call pos:start="237:5" pos:end="237:42"><name pos:start="237:5" pos:end="237:10">fwrite</name><argument_list pos:start="237:11" pos:end="237:42">(<argument pos:start="237:12" pos:end="237:18"><expr pos:start="237:12" pos:end="237:18"><name pos:start="237:12" pos:end="237:18">endcode</name></expr></argument>, <argument pos:start="237:21" pos:end="237:21"><expr pos:start="237:21" pos:end="237:21"><literal type="number" pos:start="237:21" pos:end="237:21">1</literal></expr></argument>, <argument pos:start="237:24" pos:end="237:38"><expr pos:start="237:24" pos:end="237:38"><sizeof pos:start="237:24" pos:end="237:38">sizeof<argument_list pos:start="237:30" pos:end="237:38">(<argument pos:start="237:31" pos:end="237:37"><expr pos:start="237:31" pos:end="237:37"><name pos:start="237:31" pos:end="237:37">endcode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="237:41" pos:end="237:41"><expr pos:start="237:41" pos:end="237:41"><name pos:start="237:41" pos:end="237:41">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:14"><expr pos:start="239:5" pos:end="239:13"><call pos:start="239:5" pos:end="239:13"><name pos:start="239:5" pos:end="239:10">fclose</name><argument_list pos:start="239:11" pos:end="239:13">(<argument pos:start="239:12" pos:end="239:12"><expr pos:start="239:12" pos:end="239:12"><name pos:start="239:12" pos:end="239:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:21"><expr pos:start="243:5" pos:end="243:20"><call pos:start="243:5" pos:end="243:20"><name pos:start="243:5" pos:end="243:17">avcodec_close</name><argument_list pos:start="243:18" pos:end="243:20">(<argument pos:start="243:19" pos:end="243:19"><expr pos:start="243:19" pos:end="243:19"><name pos:start="243:19" pos:end="243:19">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:15"><expr pos:start="245:5" pos:end="245:14"><call pos:start="245:5" pos:end="245:14"><name pos:start="245:5" pos:end="245:11">av_free</name><argument_list pos:start="245:12" pos:end="245:14">(<argument pos:start="245:13" pos:end="245:13"><expr pos:start="245:13" pos:end="245:13"><name pos:start="245:13" pos:end="245:13">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:32"><expr pos:start="247:5" pos:end="247:31"><call pos:start="247:5" pos:end="247:31"><name pos:start="247:5" pos:end="247:12">av_freep</name><argument_list pos:start="247:13" pos:end="247:31">(<argument pos:start="247:14" pos:end="247:30"><expr pos:start="247:14" pos:end="247:30"><operator pos:start="247:14" pos:end="247:14">&amp;</operator><name pos:start="247:15" pos:end="247:30"><name pos:start="247:15" pos:end="247:21">picture</name><operator pos:start="247:22" pos:end="247:23">-&gt;</operator><name pos:start="247:24" pos:end="247:27">data</name><index pos:start="247:28" pos:end="247:30">[<expr pos:start="247:29" pos:end="247:29"><literal type="number" pos:start="247:29" pos:end="247:29">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:21"><expr pos:start="249:5" pos:end="249:20"><call pos:start="249:5" pos:end="249:20"><name pos:start="249:5" pos:end="249:11">av_free</name><argument_list pos:start="249:12" pos:end="249:20">(<argument pos:start="249:13" pos:end="249:19"><expr pos:start="249:13" pos:end="249:19"><name pos:start="249:13" pos:end="249:19">picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:17"><expr pos:start="251:5" pos:end="251:16"><call pos:start="251:5" pos:end="251:16"><name pos:start="251:5" pos:end="251:10">printf</name><argument_list pos:start="251:11" pos:end="251:16">(<argument pos:start="251:12" pos:end="251:15"><expr pos:start="251:12" pos:end="251:15"><literal type="string" pos:start="251:12" pos:end="251:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
