<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20087.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">access_with_adjusted_size</name><parameter_list pos:start="1:38" pos:end="23:55">(<parameter pos:start="1:39" pos:end="1:49"><decl pos:start="1:39" pos:end="1:49"><type pos:start="1:39" pos:end="1:49"><name pos:start="1:39" pos:end="1:44">hwaddr</name></type> <name pos:start="1:46" pos:end="1:49">addr</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:53"><decl pos:start="3:39" pos:end="3:53"><type pos:start="3:39" pos:end="3:53"><name pos:start="3:39" pos:end="3:46">uint64_t</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:53">value</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:51"><decl pos:start="5:39" pos:end="5:51"><type pos:start="5:39" pos:end="5:51"><name pos:start="5:39" pos:end="5:46">unsigned</name></type> <name pos:start="5:48" pos:end="5:51">size</name></decl></parameter>,

                                      <parameter pos:start="7:39" pos:end="7:62"><decl pos:start="7:39" pos:end="7:62"><type pos:start="7:39" pos:end="7:62"><name pos:start="7:39" pos:end="7:46">unsigned</name></type> <name pos:start="7:48" pos:end="7:62">access_size_min</name></decl></parameter>,

                                      <parameter pos:start="9:39" pos:end="9:62"><decl pos:start="9:39" pos:end="9:62"><type pos:start="9:39" pos:end="9:62"><name pos:start="9:39" pos:end="9:46">unsigned</name></type> <name pos:start="9:48" pos:end="9:62">access_size_max</name></decl></parameter>,

                                      <parameter pos:start="11:39" pos:end="21:67"><function_decl pos:start="11:39" pos:end="21:67"><type pos:start="11:39" pos:end="11:42"><name pos:start="11:39" pos:end="11:42">void</name></type> (<modifier pos:start="11:45" pos:end="11:45">*</modifier><name pos:start="11:46" pos:end="11:51">access</name>)<parameter_list pos:start="11:53" pos:end="21:67">(<parameter pos:start="11:54" pos:end="11:69"><decl pos:start="11:54" pos:end="11:69"><type pos:start="11:54" pos:end="11:69"><name pos:start="11:54" pos:end="11:65">MemoryRegion</name> <modifier pos:start="11:67" pos:end="11:67">*</modifier></type><name pos:start="11:68" pos:end="11:69">mr</name></decl></parameter>,

                                                     <parameter pos:start="13:54" pos:end="13:64"><decl pos:start="13:54" pos:end="13:64"><type pos:start="13:54" pos:end="13:64"><name pos:start="13:54" pos:end="13:59">hwaddr</name></type> <name pos:start="13:61" pos:end="13:64">addr</name></decl></parameter>,

                                                     <parameter pos:start="15:54" pos:end="15:68"><decl pos:start="15:54" pos:end="15:68"><type pos:start="15:54" pos:end="15:68"><name pos:start="15:54" pos:end="15:61">uint64_t</name> <modifier pos:start="15:63" pos:end="15:63">*</modifier></type><name pos:start="15:64" pos:end="15:68">value</name></decl></parameter>,

                                                     <parameter pos:start="17:54" pos:end="17:66"><decl pos:start="17:54" pos:end="17:66"><type pos:start="17:54" pos:end="17:66"><name pos:start="17:54" pos:end="17:61">unsigned</name></type> <name pos:start="17:63" pos:end="17:66">size</name></decl></parameter>,

                                                     <parameter pos:start="19:54" pos:end="19:67"><decl pos:start="19:54" pos:end="19:67"><type pos:start="19:54" pos:end="19:67"><name pos:start="19:54" pos:end="19:61">unsigned</name></type> <name pos:start="19:63" pos:end="19:67">shift</name></decl></parameter>,

                                                     <parameter pos:start="21:54" pos:end="21:66"><decl pos:start="21:54" pos:end="21:66"><type pos:start="21:54" pos:end="21:66"><name pos:start="21:54" pos:end="21:61">uint64_t</name></type> <name pos:start="21:63" pos:end="21:66">mask</name></decl></parameter>)</parameter_list></function_decl></parameter>,

                                      <parameter pos:start="23:39" pos:end="23:54"><decl pos:start="23:39" pos:end="23:54"><type pos:start="23:39" pos:end="23:54"><name pos:start="23:39" pos:end="23:50">MemoryRegion</name> <modifier pos:start="23:52" pos:end="23:52">*</modifier></type><name pos:start="23:53" pos:end="23:54">mr</name></decl></parameter>)</parameter_list>

<block pos:start="25:1" pos:end="71:1">{<block_content pos:start="27:5" pos:end="69:5">

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint64_t</name></type> <name pos:start="27:14" pos:end="27:24">access_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:25"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">unsigned</name></type> <name pos:start="29:14" pos:end="29:24">access_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:15"><decl pos:start="31:5" pos:end="31:14"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:12">unsigned</name></type> <name pos:start="31:14" pos:end="31:14">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:25">(<expr pos:start="35:9" pos:end="35:24"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:24">access_size_min</name></expr>)</condition> <block pos:start="35:27" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:28">

        <expr_stmt pos:start="37:9" pos:end="37:28"><expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:23">access_size_min</name> <operator pos:start="37:25" pos:end="37:25">=</operator> <literal type="number" pos:start="37:27" pos:end="37:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:25">(<expr pos:start="41:9" pos:end="41:24"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:24">access_size_max</name></expr>)</condition> <block pos:start="41:27" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:28">

        <expr_stmt pos:start="43:9" pos:end="43:28"><expr pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:23">access_size_max</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <literal type="number" pos:start="43:27" pos:end="43:27">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:42">/* FIXME: support unaligned access? */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:67"><expr pos:start="51:5" pos:end="51:66"><name pos:start="51:5" pos:end="51:15">access_size</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:66"><name pos:start="51:19" pos:end="51:21">MAX</name><argument_list pos:start="51:22" pos:end="51:66">(<argument pos:start="51:23" pos:end="51:48"><expr pos:start="51:23" pos:end="51:48"><call pos:start="51:23" pos:end="51:48"><name pos:start="51:23" pos:end="51:25">MIN</name><argument_list pos:start="51:26" pos:end="51:48">(<argument pos:start="51:27" pos:end="51:30"><expr pos:start="51:27" pos:end="51:30"><name pos:start="51:27" pos:end="51:30">size</name></expr></argument>, <argument pos:start="51:33" pos:end="51:47"><expr pos:start="51:33" pos:end="51:47"><name pos:start="51:33" pos:end="51:47">access_size_max</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:51" pos:end="51:65"><expr pos:start="51:51" pos:end="51:65"><name pos:start="51:51" pos:end="51:65">access_size_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:50"><expr pos:start="53:5" pos:end="53:49"><name pos:start="53:5" pos:end="53:15">access_mask</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <operator pos:start="53:19" pos:end="53:19">-</operator><literal type="number" pos:start="53:20" pos:end="53:23">1ULL</literal> <operator pos:start="53:25" pos:end="53:26">&gt;&gt;</operator> <operator pos:start="53:28" pos:end="53:28">(</operator><literal type="number" pos:start="53:29" pos:end="53:32">64</literal> <operator pos:start="53:32" pos:end="53:32">-</operator> <name pos:start="53:34" pos:end="53:44">access_size</name> <operator pos:start="53:46" pos:end="53:46">*</operator> <literal type="number" pos:start="53:48" pos:end="53:48">8</literal><operator pos:start="53:49" pos:end="53:49">)</operator></expr>;</expr_stmt>

    <for pos:start="55:5" pos:end="69:5">for <control pos:start="55:9" pos:end="55:43">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:25"><expr pos:start="55:17" pos:end="55:24"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <name pos:start="55:21" pos:end="55:24">size</name></expr>;</condition> <incr pos:start="55:27" pos:end="55:42"><expr pos:start="55:27" pos:end="55:42"><name pos:start="55:27" pos:end="55:27">i</name> <operator pos:start="55:29" pos:end="55:30">+=</operator> <name pos:start="55:32" pos:end="55:42">access_size</name></expr></incr>)</control> <block pos:start="55:45" pos:end="69:5">{<block_content pos:start="59:9" pos:end="68:0">

<cpp:ifdef pos:start="57:1" pos:end="57:29">#<cpp:directive pos:start="57:2" pos:end="57:6">ifdef</cpp:directive> <name pos:start="57:8" pos:end="57:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="59:9" pos:end="64:0"><expr pos:start="59:9" pos:end="61:57"><call pos:start="59:9" pos:end="61:57"><name pos:start="59:9" pos:end="59:14">access</name><argument_list pos:start="59:15" pos:end="61:57">(<argument pos:start="59:16" pos:end="59:17"><expr pos:start="59:16" pos:end="59:17"><name pos:start="59:16" pos:end="59:17">mr</name></expr></argument>, <argument pos:start="59:20" pos:end="59:27"><expr pos:start="59:20" pos:end="59:27"><name pos:start="59:20" pos:end="59:23">addr</name> <operator pos:start="59:25" pos:end="59:25">+</operator> <name pos:start="59:27" pos:end="59:27">i</name></expr></argument>, <argument pos:start="59:30" pos:end="59:34"><expr pos:start="59:30" pos:end="59:34"><name pos:start="59:30" pos:end="59:34">value</name></expr></argument>, <argument pos:start="59:37" pos:end="59:47"><expr pos:start="59:37" pos:end="59:47"><name pos:start="59:37" pos:end="59:47">access_size</name></expr></argument>,

               <argument pos:start="61:16" pos:end="61:43"><expr pos:start="61:16" pos:end="61:43"><operator pos:start="61:16" pos:end="61:16">(</operator><name pos:start="61:17" pos:end="61:20">size</name> <operator pos:start="61:22" pos:end="61:22">-</operator> <name pos:start="61:24" pos:end="61:34">access_size</name> <operator pos:start="61:36" pos:end="61:36">-</operator> <name pos:start="61:38" pos:end="61:38">i</name><operator pos:start="61:39" pos:end="61:39">)</operator> <operator pos:start="61:41" pos:end="61:41">*</operator> <literal type="number" pos:start="61:43" pos:end="61:43">8</literal></expr></argument>, <argument pos:start="61:46" pos:end="61:56"><expr pos:start="61:46" pos:end="61:56"><name pos:start="61:46" pos:end="61:56">access_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="63:1" pos:end="63:5">#<cpp:directive pos:start="63:2" pos:end="63:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="65:9" pos:end="68:0"><expr pos:start="65:9" pos:end="65:68"><call pos:start="65:9" pos:end="65:68"><name pos:start="65:9" pos:end="65:14">access</name><argument_list pos:start="65:15" pos:end="65:68">(<argument pos:start="65:16" pos:end="65:17"><expr pos:start="65:16" pos:end="65:17"><name pos:start="65:16" pos:end="65:17">mr</name></expr></argument>, <argument pos:start="65:20" pos:end="65:27"><expr pos:start="65:20" pos:end="65:27"><name pos:start="65:20" pos:end="65:23">addr</name> <operator pos:start="65:25" pos:end="65:25">+</operator> <name pos:start="65:27" pos:end="65:27">i</name></expr></argument>, <argument pos:start="65:30" pos:end="65:34"><expr pos:start="65:30" pos:end="65:34"><name pos:start="65:30" pos:end="65:34">value</name></expr></argument>, <argument pos:start="65:37" pos:end="65:47"><expr pos:start="65:37" pos:end="65:47"><name pos:start="65:37" pos:end="65:47">access_size</name></expr></argument>, <argument pos:start="65:50" pos:end="65:54"><expr pos:start="65:50" pos:end="65:54"><name pos:start="65:50" pos:end="65:50">i</name> <operator pos:start="65:52" pos:end="65:52">*</operator> <literal type="number" pos:start="65:54" pos:end="65:54">8</literal></expr></argument>, <argument pos:start="65:57" pos:end="65:67"><expr pos:start="65:57" pos:end="65:67"><name pos:start="65:57" pos:end="65:67">access_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
