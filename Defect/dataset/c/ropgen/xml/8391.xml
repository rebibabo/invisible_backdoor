<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8391.c" pos:tabs="8"><function pos:start="1:1" pos:end="187:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">dec_wcsr</name><parameter_list pos:start="1:21" pos:end="1:38">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:33">DisasContext</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:37">dc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="187:1">{<block_content pos:start="5:5" pos:end="185:5">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">no</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:47"><expr pos:start="9:5" pos:end="9:46"><call pos:start="9:5" pos:end="9:46"><name pos:start="9:5" pos:end="9:11">LOG_DIS</name><argument_list pos:start="9:12" pos:end="9:46">(<argument pos:start="9:13" pos:end="9:28"><expr pos:start="9:13" pos:end="9:28"><literal type="string" pos:start="9:13" pos:end="9:28">"wcsr r%d, %d\n"</literal></expr></argument>, <argument pos:start="9:31" pos:end="9:36"><expr pos:start="9:31" pos:end="9:36"><name pos:start="9:31" pos:end="9:36"><name pos:start="9:31" pos:end="9:32">dc</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:36">r1</name></name></expr></argument>, <argument pos:start="9:39" pos:end="9:45"><expr pos:start="9:39" pos:end="9:45"><name pos:start="9:39" pos:end="9:45"><name pos:start="9:39" pos:end="9:40">dc</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:45">csr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="13:5" pos:end="185:5">switch <condition pos:start="13:12" pos:end="13:20">(<expr pos:start="13:13" pos:end="13:19"><name pos:start="13:13" pos:end="13:19"><name pos:start="13:13" pos:end="13:14">dc</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:19">csr</name></name></expr>)</condition> <block pos:start="13:22" pos:end="185:5">{<block_content pos:start="15:5" pos:end="183:14">

    <case pos:start="15:5" pos:end="15:16">case <expr pos:start="15:10" pos:end="15:15"><name pos:start="15:10" pos:end="15:15">CSR_IE</name></expr>:</case>

        <expr_stmt pos:start="17:9" pos:end="17:46"><expr pos:start="17:9" pos:end="17:45"><call pos:start="17:9" pos:end="17:45"><name pos:start="17:9" pos:end="17:22">tcg_gen_mov_tl</name><argument_list pos:start="17:23" pos:end="17:45">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">cpu_ie</name></expr></argument>, <argument pos:start="17:32" pos:end="17:44"><expr pos:start="17:32" pos:end="17:44"><name pos:start="17:32" pos:end="17:44"><name pos:start="17:32" pos:end="17:36">cpu_R</name><index pos:start="17:37" pos:end="17:44">[<expr pos:start="17:38" pos:end="17:43"><name pos:start="17:38" pos:end="17:43"><name pos:start="17:38" pos:end="17:39">dc</name><operator pos:start="17:40" pos:end="17:41">-&gt;</operator><name pos:start="17:42" pos:end="17:43">r1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:44"><expr pos:start="19:9" pos:end="19:43"><call pos:start="19:9" pos:end="19:43"><name pos:start="19:9" pos:end="19:23">tcg_gen_movi_tl</name><argument_list pos:start="19:24" pos:end="19:43">(<argument pos:start="19:25" pos:end="19:30"><expr pos:start="19:25" pos:end="19:30"><name pos:start="19:25" pos:end="19:30">cpu_pc</name></expr></argument>, <argument pos:start="19:33" pos:end="19:42"><expr pos:start="19:33" pos:end="19:42"><name pos:start="19:33" pos:end="19:38"><name pos:start="19:33" pos:end="19:34">dc</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:38">pc</name></name> <operator pos:start="19:40" pos:end="19:40">+</operator> <literal type="number" pos:start="19:42" pos:end="19:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:34"><expr pos:start="21:9" pos:end="21:33"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:10">dc</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:18">is_jmp</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <name pos:start="21:22" pos:end="21:33">DISAS_UPDATE</name></expr>;</expr_stmt>

        <break pos:start="23:9" pos:end="23:14">break;</break>

    <case pos:start="25:5" pos:end="25:16">case <expr pos:start="25:10" pos:end="25:15"><name pos:start="25:10" pos:end="25:15">CSR_IM</name></expr>:</case>

        <comment type="block" pos:start="27:9" pos:end="27:73">/* mark as an io operation because it could cause an interrupt */</comment>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:23">(<expr pos:start="29:13" pos:end="29:22"><name pos:start="29:13" pos:end="29:22">use_icount</name></expr>)</condition> <block pos:start="29:25" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:27">

            <expr_stmt pos:start="31:13" pos:end="31:27"><expr pos:start="31:13" pos:end="31:26"><call pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:24">gen_io_start</name><argument_list pos:start="31:25" pos:end="31:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:51"><expr pos:start="35:9" pos:end="35:50"><call pos:start="35:9" pos:end="35:50"><name pos:start="35:9" pos:end="35:26">gen_helper_wcsr_im</name><argument_list pos:start="35:27" pos:end="35:50">(<argument pos:start="35:28" pos:end="35:34"><expr pos:start="35:28" pos:end="35:34"><name pos:start="35:28" pos:end="35:34">cpu_env</name></expr></argument>, <argument pos:start="35:37" pos:end="35:49"><expr pos:start="35:37" pos:end="35:49"><name pos:start="35:37" pos:end="35:49"><name pos:start="35:37" pos:end="35:41">cpu_R</name><index pos:start="35:42" pos:end="35:49">[<expr pos:start="35:43" pos:end="35:48"><name pos:start="35:43" pos:end="35:48"><name pos:start="35:43" pos:end="35:44">dc</name><operator pos:start="35:45" pos:end="35:46">-&gt;</operator><name pos:start="35:47" pos:end="35:48">r1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:44"><expr pos:start="37:9" pos:end="37:43"><call pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:23">tcg_gen_movi_tl</name><argument_list pos:start="37:24" pos:end="37:43">(<argument pos:start="37:25" pos:end="37:30"><expr pos:start="37:25" pos:end="37:30"><name pos:start="37:25" pos:end="37:30">cpu_pc</name></expr></argument>, <argument pos:start="37:33" pos:end="37:42"><expr pos:start="37:33" pos:end="37:42"><name pos:start="37:33" pos:end="37:38"><name pos:start="37:33" pos:end="37:34">dc</name><operator pos:start="37:35" pos:end="37:36">-&gt;</operator><name pos:start="37:37" pos:end="37:38">pc</name></name> <operator pos:start="37:40" pos:end="37:40">+</operator> <literal type="number" pos:start="37:42" pos:end="37:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:23">(<expr pos:start="39:13" pos:end="39:22"><name pos:start="39:13" pos:end="39:22">use_icount</name></expr>)</condition> <block pos:start="39:25" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:25">

            <expr_stmt pos:start="41:13" pos:end="41:25"><expr pos:start="41:13" pos:end="41:24"><call pos:start="41:13" pos:end="41:24"><name pos:start="41:13" pos:end="41:22">gen_io_end</name><argument_list pos:start="41:23" pos:end="41:24">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:10">dc</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:18">is_jmp</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:33">DISAS_UPDATE</name></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:16">case <expr pos:start="49:10" pos:end="49:15"><name pos:start="49:10" pos:end="49:15">CSR_IP</name></expr>:</case>

        <comment type="block" pos:start="51:9" pos:end="51:73">/* mark as an io operation because it could cause an interrupt */</comment>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:23">(<expr pos:start="53:13" pos:end="53:22"><name pos:start="53:13" pos:end="53:22">use_icount</name></expr>)</condition> <block pos:start="53:25" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:27">

            <expr_stmt pos:start="55:13" pos:end="55:27"><expr pos:start="55:13" pos:end="55:26"><call pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:24">gen_io_start</name><argument_list pos:start="55:25" pos:end="55:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:51"><expr pos:start="59:9" pos:end="59:50"><call pos:start="59:9" pos:end="59:50"><name pos:start="59:9" pos:end="59:26">gen_helper_wcsr_ip</name><argument_list pos:start="59:27" pos:end="59:50">(<argument pos:start="59:28" pos:end="59:34"><expr pos:start="59:28" pos:end="59:34"><name pos:start="59:28" pos:end="59:34">cpu_env</name></expr></argument>, <argument pos:start="59:37" pos:end="59:49"><expr pos:start="59:37" pos:end="59:49"><name pos:start="59:37" pos:end="59:49"><name pos:start="59:37" pos:end="59:41">cpu_R</name><index pos:start="59:42" pos:end="59:49">[<expr pos:start="59:43" pos:end="59:48"><name pos:start="59:43" pos:end="59:48"><name pos:start="59:43" pos:end="59:44">dc</name><operator pos:start="59:45" pos:end="59:46">-&gt;</operator><name pos:start="59:47" pos:end="59:48">r1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:44"><expr pos:start="61:9" pos:end="61:43"><call pos:start="61:9" pos:end="61:43"><name pos:start="61:9" pos:end="61:23">tcg_gen_movi_tl</name><argument_list pos:start="61:24" pos:end="61:43">(<argument pos:start="61:25" pos:end="61:30"><expr pos:start="61:25" pos:end="61:30"><name pos:start="61:25" pos:end="61:30">cpu_pc</name></expr></argument>, <argument pos:start="61:33" pos:end="61:42"><expr pos:start="61:33" pos:end="61:42"><name pos:start="61:33" pos:end="61:38"><name pos:start="61:33" pos:end="61:34">dc</name><operator pos:start="61:35" pos:end="61:36">-&gt;</operator><name pos:start="61:37" pos:end="61:38">pc</name></name> <operator pos:start="61:40" pos:end="61:40">+</operator> <literal type="number" pos:start="61:42" pos:end="61:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:23">(<expr pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:22">use_icount</name></expr>)</condition> <block pos:start="63:25" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:25">

            <expr_stmt pos:start="65:13" pos:end="65:25"><expr pos:start="65:13" pos:end="65:24"><call pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:22">gen_io_end</name><argument_list pos:start="65:23" pos:end="65:24">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:34"><expr pos:start="69:9" pos:end="69:33"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:10">dc</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:18">is_jmp</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <name pos:start="69:22" pos:end="69:33">DISAS_UPDATE</name></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:17">case <expr pos:start="73:10" pos:end="73:16"><name pos:start="73:10" pos:end="73:16">CSR_ICC</name></expr>:</case>

        <comment type="block" pos:start="75:9" pos:end="75:18">/* TODO */</comment>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:17">case <expr pos:start="79:10" pos:end="79:16"><name pos:start="79:10" pos:end="79:16">CSR_DCC</name></expr>:</case>

        <comment type="block" pos:start="81:9" pos:end="81:18">/* TODO */</comment>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <case pos:start="85:5" pos:end="85:17">case <expr pos:start="85:10" pos:end="85:16"><name pos:start="85:10" pos:end="85:16">CSR_EBA</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:47"><expr pos:start="87:9" pos:end="87:46"><call pos:start="87:9" pos:end="87:46"><name pos:start="87:9" pos:end="87:22">tcg_gen_mov_tl</name><argument_list pos:start="87:23" pos:end="87:46">(<argument pos:start="87:24" pos:end="87:30"><expr pos:start="87:24" pos:end="87:30"><name pos:start="87:24" pos:end="87:30">cpu_eba</name></expr></argument>, <argument pos:start="87:33" pos:end="87:45"><expr pos:start="87:33" pos:end="87:45"><name pos:start="87:33" pos:end="87:45"><name pos:start="87:33" pos:end="87:37">cpu_R</name><index pos:start="87:38" pos:end="87:45">[<expr pos:start="87:39" pos:end="87:44"><name pos:start="87:39" pos:end="87:44"><name pos:start="87:39" pos:end="87:40">dc</name><operator pos:start="87:41" pos:end="87:42">-&gt;</operator><name pos:start="87:43" pos:end="87:44">r1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <case pos:start="91:5" pos:end="91:18">case <expr pos:start="91:10" pos:end="91:17"><name pos:start="91:10" pos:end="91:17">CSR_DEBA</name></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:48"><expr pos:start="93:9" pos:end="93:47"><call pos:start="93:9" pos:end="93:47"><name pos:start="93:9" pos:end="93:22">tcg_gen_mov_tl</name><argument_list pos:start="93:23" pos:end="93:47">(<argument pos:start="93:24" pos:end="93:31"><expr pos:start="93:24" pos:end="93:31"><name pos:start="93:24" pos:end="93:31">cpu_deba</name></expr></argument>, <argument pos:start="93:34" pos:end="93:46"><expr pos:start="93:34" pos:end="93:46"><name pos:start="93:34" pos:end="93:46"><name pos:start="93:34" pos:end="93:38">cpu_R</name><index pos:start="93:39" pos:end="93:46">[<expr pos:start="93:40" pos:end="93:45"><name pos:start="93:40" pos:end="93:45"><name pos:start="93:40" pos:end="93:41">dc</name><operator pos:start="93:42" pos:end="93:43">-&gt;</operator><name pos:start="93:44" pos:end="93:45">r1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <case pos:start="97:5" pos:end="97:17">case <expr pos:start="97:10" pos:end="97:16"><name pos:start="97:10" pos:end="97:16">CSR_JTX</name></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="99:52"><expr pos:start="99:9" pos:end="99:51"><call pos:start="99:9" pos:end="99:51"><name pos:start="99:9" pos:end="99:27">gen_helper_wcsr_jtx</name><argument_list pos:start="99:28" pos:end="99:51">(<argument pos:start="99:29" pos:end="99:35"><expr pos:start="99:29" pos:end="99:35"><name pos:start="99:29" pos:end="99:35">cpu_env</name></expr></argument>, <argument pos:start="99:38" pos:end="99:50"><expr pos:start="99:38" pos:end="99:50"><name pos:start="99:38" pos:end="99:50"><name pos:start="99:38" pos:end="99:42">cpu_R</name><index pos:start="99:43" pos:end="99:50">[<expr pos:start="99:44" pos:end="99:49"><name pos:start="99:44" pos:end="99:49"><name pos:start="99:44" pos:end="99:45">dc</name><operator pos:start="99:46" pos:end="99:47">-&gt;</operator><name pos:start="99:48" pos:end="99:49">r1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:17">case <expr pos:start="103:10" pos:end="103:16"><name pos:start="103:10" pos:end="103:16">CSR_JRX</name></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:52"><expr pos:start="105:9" pos:end="105:51"><call pos:start="105:9" pos:end="105:51"><name pos:start="105:9" pos:end="105:27">gen_helper_wcsr_jrx</name><argument_list pos:start="105:28" pos:end="105:51">(<argument pos:start="105:29" pos:end="105:35"><expr pos:start="105:29" pos:end="105:35"><name pos:start="105:29" pos:end="105:35">cpu_env</name></expr></argument>, <argument pos:start="105:38" pos:end="105:50"><expr pos:start="105:38" pos:end="105:50"><name pos:start="105:38" pos:end="105:50"><name pos:start="105:38" pos:end="105:42">cpu_R</name><index pos:start="105:43" pos:end="105:50">[<expr pos:start="105:44" pos:end="105:49"><name pos:start="105:44" pos:end="105:49"><name pos:start="105:44" pos:end="105:45">dc</name><operator pos:start="105:46" pos:end="105:47">-&gt;</operator><name pos:start="105:48" pos:end="105:49">r1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <case pos:start="109:5" pos:end="109:16">case <expr pos:start="109:10" pos:end="109:15"><name pos:start="109:10" pos:end="109:15">CSR_DC</name></expr>:</case>

        <expr_stmt pos:start="111:9" pos:end="111:51"><expr pos:start="111:9" pos:end="111:50"><call pos:start="111:9" pos:end="111:50"><name pos:start="111:9" pos:end="111:26">gen_helper_wcsr_dc</name><argument_list pos:start="111:27" pos:end="111:50">(<argument pos:start="111:28" pos:end="111:34"><expr pos:start="111:28" pos:end="111:34"><name pos:start="111:28" pos:end="111:34">cpu_env</name></expr></argument>, <argument pos:start="111:37" pos:end="111:49"><expr pos:start="111:37" pos:end="111:49"><name pos:start="111:37" pos:end="111:49"><name pos:start="111:37" pos:end="111:41">cpu_R</name><index pos:start="111:42" pos:end="111:49">[<expr pos:start="111:43" pos:end="111:48"><name pos:start="111:43" pos:end="111:48"><name pos:start="111:43" pos:end="111:44">dc</name><operator pos:start="111:45" pos:end="111:46">-&gt;</operator><name pos:start="111:47" pos:end="111:48">r1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <case pos:start="115:5" pos:end="115:17">case <expr pos:start="115:10" pos:end="115:16"><name pos:start="115:10" pos:end="115:16">CSR_BP0</name></expr>:</case>

    <case pos:start="117:5" pos:end="117:17">case <expr pos:start="117:10" pos:end="117:16"><name pos:start="117:10" pos:end="117:16">CSR_BP1</name></expr>:</case>

    <case pos:start="119:5" pos:end="119:17">case <expr pos:start="119:10" pos:end="119:16"><name pos:start="119:10" pos:end="119:16">CSR_BP2</name></expr>:</case>

    <case pos:start="121:5" pos:end="121:17">case <expr pos:start="121:10" pos:end="121:16"><name pos:start="121:10" pos:end="121:16">CSR_BP3</name></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="123:31"><expr pos:start="123:9" pos:end="123:30"><name pos:start="123:9" pos:end="123:10">no</name> <operator pos:start="123:12" pos:end="123:12">=</operator> <name pos:start="123:14" pos:end="123:20"><name pos:start="123:14" pos:end="123:15">dc</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:20">csr</name></name> <operator pos:start="123:22" pos:end="123:22">-</operator> <name pos:start="123:24" pos:end="123:30">CSR_BP0</name></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="135:9"><if pos:start="125:9" pos:end="135:9">if <condition pos:start="125:12" pos:end="125:38">(<expr pos:start="125:13" pos:end="125:37"><name pos:start="125:13" pos:end="125:31"><name pos:start="125:13" pos:end="125:14">dc</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:31">num_breakpoints</name></name> <operator pos:start="125:33" pos:end="125:34">&lt;=</operator> <name pos:start="125:36" pos:end="125:37">no</name></expr>)</condition> <block pos:start="125:40" pos:end="135:9">{<block_content pos:start="127:13" pos:end="133:18">

            <expr_stmt pos:start="127:13" pos:end="129:67"><expr pos:start="127:13" pos:end="129:66"><call pos:start="127:13" pos:end="129:66"><name pos:start="127:13" pos:end="127:25">qemu_log_mask</name><argument_list pos:start="127:26" pos:end="129:66">(<argument pos:start="127:27" pos:end="127:41"><expr pos:start="127:27" pos:end="127:41"><name pos:start="127:27" pos:end="127:41">LOG_GUEST_ERROR</name></expr></argument>,

                          <argument pos:start="129:27" pos:end="129:61"><expr pos:start="129:27" pos:end="129:61"><literal type="string" pos:start="129:27" pos:end="129:61">"breakpoint #%i is not available\n"</literal></expr></argument>, <argument pos:start="129:64" pos:end="129:65"><expr pos:start="129:64" pos:end="129:65"><name pos:start="129:64" pos:end="129:65">no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:35"><expr pos:start="131:13" pos:end="131:34"><call pos:start="131:13" pos:end="131:34"><name pos:start="131:13" pos:end="131:30">t_gen_illegal_insn</name><argument_list pos:start="131:31" pos:end="131:34">(<argument pos:start="131:32" pos:end="131:33"><expr pos:start="131:32" pos:end="131:33"><name pos:start="131:32" pos:end="131:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:70"><expr pos:start="137:9" pos:end="137:69"><call pos:start="137:9" pos:end="137:69"><name pos:start="137:9" pos:end="137:26">gen_helper_wcsr_bp</name><argument_list pos:start="137:27" pos:end="137:69">(<argument pos:start="137:28" pos:end="137:34"><expr pos:start="137:28" pos:end="137:34"><name pos:start="137:28" pos:end="137:34">cpu_env</name></expr></argument>, <argument pos:start="137:37" pos:end="137:49"><expr pos:start="137:37" pos:end="137:49"><name pos:start="137:37" pos:end="137:49"><name pos:start="137:37" pos:end="137:41">cpu_R</name><index pos:start="137:42" pos:end="137:49">[<expr pos:start="137:43" pos:end="137:48"><name pos:start="137:43" pos:end="137:48"><name pos:start="137:43" pos:end="137:44">dc</name><operator pos:start="137:45" pos:end="137:46">-&gt;</operator><name pos:start="137:47" pos:end="137:48">r1</name></name></expr>]</index></name></expr></argument>, <argument pos:start="137:52" pos:end="137:68"><expr pos:start="137:52" pos:end="137:68"><call pos:start="137:52" pos:end="137:68"><name pos:start="137:52" pos:end="137:64">tcg_const_i32</name><argument_list pos:start="137:65" pos:end="137:68">(<argument pos:start="137:66" pos:end="137:67"><expr pos:start="137:66" pos:end="137:67"><name pos:start="137:66" pos:end="137:67">no</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="139:9" pos:end="139:14">break;</break>

    <case pos:start="141:5" pos:end="141:17">case <expr pos:start="141:10" pos:end="141:16"><name pos:start="141:10" pos:end="141:16">CSR_WP0</name></expr>:</case>

    <case pos:start="143:5" pos:end="143:17">case <expr pos:start="143:10" pos:end="143:16"><name pos:start="143:10" pos:end="143:16">CSR_WP1</name></expr>:</case>

    <case pos:start="145:5" pos:end="145:17">case <expr pos:start="145:10" pos:end="145:16"><name pos:start="145:10" pos:end="145:16">CSR_WP2</name></expr>:</case>

    <case pos:start="147:5" pos:end="147:17">case <expr pos:start="147:10" pos:end="147:16"><name pos:start="147:10" pos:end="147:16">CSR_WP3</name></expr>:</case>

        <expr_stmt pos:start="149:9" pos:end="149:31"><expr pos:start="149:9" pos:end="149:30"><name pos:start="149:9" pos:end="149:10">no</name> <operator pos:start="149:12" pos:end="149:12">=</operator> <name pos:start="149:14" pos:end="149:20"><name pos:start="149:14" pos:end="149:15">dc</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:20">csr</name></name> <operator pos:start="149:22" pos:end="149:22">-</operator> <name pos:start="149:24" pos:end="149:30">CSR_WP0</name></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="161:9"><if pos:start="151:9" pos:end="161:9">if <condition pos:start="151:12" pos:end="151:38">(<expr pos:start="151:13" pos:end="151:37"><name pos:start="151:13" pos:end="151:31"><name pos:start="151:13" pos:end="151:14">dc</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:31">num_watchpoints</name></name> <operator pos:start="151:33" pos:end="151:34">&lt;=</operator> <name pos:start="151:36" pos:end="151:37">no</name></expr>)</condition> <block pos:start="151:40" pos:end="161:9">{<block_content pos:start="153:13" pos:end="159:18">

            <expr_stmt pos:start="153:13" pos:end="155:67"><expr pos:start="153:13" pos:end="155:66"><call pos:start="153:13" pos:end="155:66"><name pos:start="153:13" pos:end="153:25">qemu_log_mask</name><argument_list pos:start="153:26" pos:end="155:66">(<argument pos:start="153:27" pos:end="153:41"><expr pos:start="153:27" pos:end="153:41"><name pos:start="153:27" pos:end="153:41">LOG_GUEST_ERROR</name></expr></argument>,

                          <argument pos:start="155:27" pos:end="155:61"><expr pos:start="155:27" pos:end="155:61"><literal type="string" pos:start="155:27" pos:end="155:61">"watchpoint #%i is not available\n"</literal></expr></argument>, <argument pos:start="155:64" pos:end="155:65"><expr pos:start="155:64" pos:end="155:65"><name pos:start="155:64" pos:end="155:65">no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:35"><expr pos:start="157:13" pos:end="157:34"><call pos:start="157:13" pos:end="157:34"><name pos:start="157:13" pos:end="157:30">t_gen_illegal_insn</name><argument_list pos:start="157:31" pos:end="157:34">(<argument pos:start="157:32" pos:end="157:33"><expr pos:start="157:32" pos:end="157:33"><name pos:start="157:32" pos:end="157:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="159:13" pos:end="159:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:70"><expr pos:start="163:9" pos:end="163:69"><call pos:start="163:9" pos:end="163:69"><name pos:start="163:9" pos:end="163:26">gen_helper_wcsr_wp</name><argument_list pos:start="163:27" pos:end="163:69">(<argument pos:start="163:28" pos:end="163:34"><expr pos:start="163:28" pos:end="163:34"><name pos:start="163:28" pos:end="163:34">cpu_env</name></expr></argument>, <argument pos:start="163:37" pos:end="163:49"><expr pos:start="163:37" pos:end="163:49"><name pos:start="163:37" pos:end="163:49"><name pos:start="163:37" pos:end="163:41">cpu_R</name><index pos:start="163:42" pos:end="163:49">[<expr pos:start="163:43" pos:end="163:48"><name pos:start="163:43" pos:end="163:48"><name pos:start="163:43" pos:end="163:44">dc</name><operator pos:start="163:45" pos:end="163:46">-&gt;</operator><name pos:start="163:47" pos:end="163:48">r1</name></name></expr>]</index></name></expr></argument>, <argument pos:start="163:52" pos:end="163:68"><expr pos:start="163:52" pos:end="163:68"><call pos:start="163:52" pos:end="163:68"><name pos:start="163:52" pos:end="163:64">tcg_const_i32</name><argument_list pos:start="163:65" pos:end="163:68">(<argument pos:start="163:66" pos:end="163:67"><expr pos:start="163:66" pos:end="163:67"><name pos:start="163:66" pos:end="163:67">no</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <case pos:start="167:5" pos:end="167:16">case <expr pos:start="167:10" pos:end="167:15"><name pos:start="167:10" pos:end="167:15">CSR_CC</name></expr>:</case>

    <case pos:start="169:5" pos:end="169:17">case <expr pos:start="169:10" pos:end="169:16"><name pos:start="169:10" pos:end="169:16">CSR_CFG</name></expr>:</case>

        <expr_stmt pos:start="171:9" pos:end="173:31"><expr pos:start="171:9" pos:end="173:30"><call pos:start="171:9" pos:end="173:30"><name pos:start="171:9" pos:end="171:21">qemu_log_mask</name><argument_list pos:start="171:22" pos:end="173:30">(<argument pos:start="171:23" pos:end="171:37"><expr pos:start="171:23" pos:end="171:37"><name pos:start="171:23" pos:end="171:37">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="171:40" pos:end="171:70"><expr pos:start="171:40" pos:end="171:70"><literal type="string" pos:start="171:40" pos:end="171:70">"invalid write access csr=%x\n"</literal></expr></argument>,

                      <argument pos:start="173:23" pos:end="173:29"><expr pos:start="173:23" pos:end="173:29"><name pos:start="173:23" pos:end="173:29"><name pos:start="173:23" pos:end="173:24">dc</name><operator pos:start="173:25" pos:end="173:26">-&gt;</operator><name pos:start="173:27" pos:end="173:29">csr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>

    <default pos:start="177:5" pos:end="177:12">default:</default>

        <expr_stmt pos:start="179:9" pos:end="181:31"><expr pos:start="179:9" pos:end="181:30"><call pos:start="179:9" pos:end="181:30"><name pos:start="179:9" pos:end="179:21">qemu_log_mask</name><argument_list pos:start="179:22" pos:end="181:30">(<argument pos:start="179:23" pos:end="179:37"><expr pos:start="179:23" pos:end="179:37"><name pos:start="179:23" pos:end="179:37">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="179:40" pos:end="179:68"><expr pos:start="179:40" pos:end="179:68"><literal type="string" pos:start="179:40" pos:end="179:68">"write_csr: unknown csr=%x\n"</literal></expr></argument>,

                      <argument pos:start="181:23" pos:end="181:29"><expr pos:start="181:23" pos:end="181:29"><name pos:start="181:23" pos:end="181:29"><name pos:start="181:23" pos:end="181:24">dc</name><operator pos:start="181:25" pos:end="181:26">-&gt;</operator><name pos:start="181:27" pos:end="181:29">csr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="183:9" pos:end="183:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
