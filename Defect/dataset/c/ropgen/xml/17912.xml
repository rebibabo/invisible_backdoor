<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17912.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">check_refcounts_l2</name><parameter_list pos:start="1:30" pos:end="5:14">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><name pos:start="1:53" pos:end="1:67">BdrvCheckResult</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">res</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:29"><decl pos:start="3:5" pos:end="3:29"><type pos:start="3:5" pos:end="3:29"><name pos:start="3:5" pos:end="3:12">uint16_t</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier><modifier pos:start="3:15" pos:end="3:15">*</modifier></type><name pos:start="3:16" pos:end="3:29">refcount_table</name></decl></parameter>, <parameter pos:start="3:32" pos:end="3:59"><decl pos:start="3:32" pos:end="3:59"><type pos:start="3:32" pos:end="3:59"><name pos:start="3:32" pos:end="3:38">int64_t</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:59">refcount_table_size</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:78"><decl pos:start="3:62" pos:end="3:78"><type pos:start="3:62" pos:end="3:78"><name pos:start="3:62" pos:end="3:68">int64_t</name></type> <name pos:start="3:70" pos:end="3:78">l2_offset</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="215:1">{<block_content pos:start="9:5" pos:end="213:15">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">BDRVQcowState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:33">= <expr pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">l2_table</name></decl>, <decl pos:start="11:25" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:14"/><name pos:start="11:25" pos:end="11:32">l2_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:35">next_contiguous_offset</name> <init pos:start="13:37" pos:end="13:39">= <expr pos:start="13:39" pos:end="13:39"><literal type="number" pos:start="13:39" pos:end="13:39">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:18">l2_size</name></decl>, <decl pos:start="15:21" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:31">nb_csectors</name></decl>, <decl pos:start="15:34" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:34" pos:end="15:36">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:33">/* Read L2 table from disk */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:11">l2_size</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:24"><name pos:start="21:15" pos:end="21:15">s</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:24">l2_size</name></name> <operator pos:start="21:26" pos:end="21:26">*</operator> <sizeof pos:start="21:28" pos:end="21:43">sizeof<argument_list pos:start="21:34" pos:end="21:43">(<argument pos:start="21:35" pos:end="21:42"><expr pos:start="21:35" pos:end="21:42"><name pos:start="21:35" pos:end="21:42">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:12">l2_table</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:32"><name pos:start="23:16" pos:end="23:23">g_malloc</name><argument_list pos:start="23:24" pos:end="23:32">(<argument pos:start="23:25" pos:end="23:31"><expr pos:start="23:25" pos:end="23:31"><name pos:start="23:25" pos:end="23:31">l2_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:61"><expr pos:start="27:5" pos:end="27:60"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:60"><name pos:start="27:11" pos:end="27:20">bdrv_pread</name><argument_list pos:start="27:21" pos:end="27:60">(<argument pos:start="27:22" pos:end="27:29"><expr pos:start="27:22" pos:end="27:29"><name pos:start="27:22" pos:end="27:29"><name pos:start="27:22" pos:end="27:23">bs</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:29">file</name></name></expr></argument>, <argument pos:start="27:32" pos:end="27:40"><expr pos:start="27:32" pos:end="27:40"><name pos:start="27:32" pos:end="27:40">l2_offset</name></expr></argument>, <argument pos:start="27:43" pos:end="27:50"><expr pos:start="27:43" pos:end="27:50"><name pos:start="27:43" pos:end="27:50">l2_table</name></expr></argument>, <argument pos:start="27:53" pos:end="27:59"><expr pos:start="27:53" pos:end="27:59"><name pos:start="27:53" pos:end="27:59">l2_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:18">

        <expr_stmt pos:start="31:9" pos:end="31:68"><expr pos:start="31:9" pos:end="31:67"><call pos:start="31:9" pos:end="31:67"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="31:67">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:66"><expr pos:start="31:25" pos:end="31:66"><literal type="string" pos:start="31:25" pos:end="31:66">"ERROR: I/O error in check_refcounts_l2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:28"><expr pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:11">res</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:25">check_errors</name></name><operator pos:start="33:26" pos:end="33:27">++</operator></expr>;</expr_stmt>

        <goto pos:start="35:9" pos:end="35:18">goto <name pos:start="35:14" pos:end="35:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:30">/* Do the actual checks */</comment>

    <for pos:start="43:5" pos:end="199:5">for<control pos:start="43:8" pos:end="43:35">(<init pos:start="43:9" pos:end="43:14"><expr pos:start="43:9" pos:end="43:13"><name pos:start="43:9" pos:end="43:9">i</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <literal type="number" pos:start="43:13" pos:end="43:13">0</literal></expr>;</init> <condition pos:start="43:16" pos:end="43:30"><expr pos:start="43:16" pos:end="43:29"><name pos:start="43:16" pos:end="43:16">i</name> <operator pos:start="43:18" pos:end="43:18">&lt;</operator> <name pos:start="43:20" pos:end="43:29"><name pos:start="43:20" pos:end="43:20">s</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:29">l2_size</name></name></expr>;</condition> <incr pos:start="43:32" pos:end="43:34"><expr pos:start="43:32" pos:end="43:34"><name pos:start="43:32" pos:end="43:32">i</name><operator pos:start="43:33" pos:end="43:34">++</operator></expr></incr>)</control> <block pos:start="43:37" pos:end="199:5">{<block_content pos:start="45:9" pos:end="197:9">

        <expr_stmt pos:start="45:9" pos:end="45:44"><expr pos:start="45:9" pos:end="45:43"><name pos:start="45:9" pos:end="45:16">l2_entry</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <call pos:start="45:20" pos:end="45:43"><name pos:start="45:20" pos:end="45:30">be64_to_cpu</name><argument_list pos:start="45:31" pos:end="45:43">(<argument pos:start="45:32" pos:end="45:42"><expr pos:start="45:32" pos:end="45:42"><name pos:start="45:32" pos:end="45:42"><name pos:start="45:32" pos:end="45:39">l2_table</name><index pos:start="45:40" pos:end="45:42">[<expr pos:start="45:41" pos:end="45:41"><name pos:start="45:41" pos:end="45:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="49:9" pos:end="197:9">switch <condition pos:start="49:16" pos:end="49:49">(<expr pos:start="49:17" pos:end="49:48"><call pos:start="49:17" pos:end="49:48"><name pos:start="49:17" pos:end="49:38">qcow2_get_cluster_type</name><argument_list pos:start="49:39" pos:end="49:48">(<argument pos:start="49:40" pos:end="49:47"><expr pos:start="49:40" pos:end="49:47"><name pos:start="49:40" pos:end="49:47">l2_entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:51" pos:end="197:9">{<block_content pos:start="51:9" pos:end="195:20">

        <case pos:start="51:9" pos:end="51:38">case <expr pos:start="51:14" pos:end="51:37"><name pos:start="51:14" pos:end="51:37">QCOW2_CLUSTER_COMPRESSED</name></expr>:</case>

            <comment type="block" pos:start="53:13" pos:end="53:66">/* Compressed clusters don't have QCOW_OFLAG_COPIED */</comment>

            <if_stmt pos:start="55:13" pos:end="67:13"><if pos:start="55:13" pos:end="67:13">if <condition pos:start="55:16" pos:end="55:45">(<expr pos:start="55:17" pos:end="55:44"><name pos:start="55:17" pos:end="55:24">l2_entry</name> <operator pos:start="55:26" pos:end="55:26">&amp;</operator> <name pos:start="55:28" pos:end="55:44">QCOW_OFLAG_COPIED</name></expr>)</condition> <block pos:start="55:47" pos:end="67:13">{<block_content pos:start="57:17" pos:end="65:35">

                <expr_stmt pos:start="57:17" pos:end="61:63"><expr pos:start="57:17" pos:end="61:62"><call pos:start="57:17" pos:end="61:62"><name pos:start="57:17" pos:end="57:23">fprintf</name><argument_list pos:start="57:24" pos:end="61:62">(<argument pos:start="57:25" pos:end="57:30"><expr pos:start="57:25" pos:end="57:30"><name pos:start="57:25" pos:end="57:30">stderr</name></expr></argument>, <argument pos:start="57:33" pos:end="61:32"><expr pos:start="57:33" pos:end="61:32"><literal type="string" pos:start="57:33" pos:end="57:50">"ERROR: cluster %"</literal> <name pos:start="57:52" pos:end="57:57">PRId64</name> <literal type="string" pos:start="57:59" pos:end="57:62">": "</literal>

                    <literal type="string" pos:start="59:21" pos:end="59:67">"copied flag must never be set for compressed "</literal>

                    <literal type="string" pos:start="61:21" pos:end="61:32">"clusters\n"</literal></expr></argument>, <argument pos:start="61:35" pos:end="61:61"><expr pos:start="61:35" pos:end="61:61"><name pos:start="61:35" pos:end="61:42">l2_entry</name> <operator pos:start="61:44" pos:end="61:45">&gt;&gt;</operator> <name pos:start="61:47" pos:end="61:61"><name pos:start="61:47" pos:end="61:47">s</name><operator pos:start="61:48" pos:end="61:49">-&gt;</operator><name pos:start="61:50" pos:end="61:61">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:47"><expr pos:start="63:17" pos:end="63:46"><name pos:start="63:17" pos:end="63:24">l2_entry</name> <operator pos:start="63:26" pos:end="63:27">&amp;=</operator> <operator pos:start="63:29" pos:end="63:29">~</operator><name pos:start="63:30" pos:end="63:46">QCOW_OFLAG_COPIED</name></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:35"><expr pos:start="65:17" pos:end="65:34"><name pos:start="65:17" pos:end="65:32"><name pos:start="65:17" pos:end="65:19">res</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:32">corruptions</name></name><operator pos:start="65:33" pos:end="65:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="71:13" pos:end="71:38">/* Mark cluster as used */</comment>

            <expr_stmt pos:start="73:13" pos:end="75:46"><expr pos:start="73:13" pos:end="75:45"><name pos:start="73:13" pos:end="73:23">nb_csectors</name> <operator pos:start="73:25" pos:end="73:25">=</operator> <operator pos:start="73:27" pos:end="73:27">(</operator><operator pos:start="73:28" pos:end="73:28">(</operator><name pos:start="73:29" pos:end="73:36">l2_entry</name> <operator pos:start="73:38" pos:end="73:39">&gt;&gt;</operator> <name pos:start="73:41" pos:end="73:54"><name pos:start="73:41" pos:end="73:41">s</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:54">csize_shift</name></name><operator pos:start="73:55" pos:end="73:55">)</operator> <operator pos:start="73:57" pos:end="73:57">&amp;</operator>

                           <name pos:start="75:28" pos:end="75:40"><name pos:start="75:28" pos:end="75:28">s</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:40">csize_mask</name></name><operator pos:start="75:41" pos:end="75:41">)</operator> <operator pos:start="75:43" pos:end="75:43">+</operator> <literal type="number" pos:start="75:45" pos:end="75:45">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:47"><expr pos:start="77:13" pos:end="77:46"><name pos:start="77:13" pos:end="77:20">l2_entry</name> <operator pos:start="77:22" pos:end="77:23">&amp;=</operator> <name pos:start="77:25" pos:end="77:46"><name pos:start="77:25" pos:end="77:25">s</name><operator pos:start="77:26" pos:end="77:27">-&gt;</operator><name pos:start="77:28" pos:end="77:46">cluster_offset_mask</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="81:68"><expr pos:start="79:13" pos:end="81:67"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <call pos:start="79:19" pos:end="81:67"><name pos:start="79:19" pos:end="79:31">inc_refcounts</name><argument_list pos:start="79:32" pos:end="81:67">(<argument pos:start="79:33" pos:end="79:34"><expr pos:start="79:33" pos:end="79:34"><name pos:start="79:33" pos:end="79:34">bs</name></expr></argument>, <argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">res</name></expr></argument>, <argument pos:start="79:42" pos:end="79:55"><expr pos:start="79:42" pos:end="79:55"><name pos:start="79:42" pos:end="79:55">refcount_table</name></expr></argument>, <argument pos:start="79:58" pos:end="79:76"><expr pos:start="79:58" pos:end="79:76"><name pos:start="79:58" pos:end="79:76">refcount_table_size</name></expr></argument>,

                                <argument pos:start="81:33" pos:end="81:47"><expr pos:start="81:33" pos:end="81:47"><name pos:start="81:33" pos:end="81:40">l2_entry</name> <operator pos:start="81:42" pos:end="81:42">&amp;</operator> <operator pos:start="81:44" pos:end="81:44">~</operator><literal type="number" pos:start="81:45" pos:end="81:47">511</literal></expr></argument>, <argument pos:start="81:50" pos:end="81:66"><expr pos:start="81:50" pos:end="81:66"><name pos:start="81:50" pos:end="81:60">nb_csectors</name> <operator pos:start="81:62" pos:end="81:62">*</operator> <literal type="number" pos:start="81:64" pos:end="81:66">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="87:13"><if pos:start="83:13" pos:end="87:13">if <condition pos:start="83:16" pos:end="83:24">(<expr pos:start="83:17" pos:end="83:23"><name pos:start="83:17" pos:end="83:19">ret</name> <operator pos:start="83:21" pos:end="83:21">&lt;</operator> <literal type="number" pos:start="83:23" pos:end="83:23">0</literal></expr>)</condition> <block pos:start="83:26" pos:end="87:13">{<block_content pos:start="85:17" pos:end="85:26">

                <goto pos:start="85:17" pos:end="85:26">goto <name pos:start="85:22" pos:end="85:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="91:13" pos:end="111:13"><if pos:start="91:13" pos:end="111:13">if <condition pos:start="91:16" pos:end="91:40">(<expr pos:start="91:17" pos:end="91:39"><name pos:start="91:17" pos:end="91:21">flags</name> <operator pos:start="91:23" pos:end="91:23">&amp;</operator> <name pos:start="91:25" pos:end="91:39">CHECK_FRAG_INFO</name></expr>)</condition> <block pos:start="91:42" pos:end="111:13">{<block_content pos:start="93:17" pos:end="109:47">

                <expr_stmt pos:start="93:17" pos:end="93:46"><expr pos:start="93:17" pos:end="93:45"><name pos:start="93:17" pos:end="93:43"><name pos:start="93:17" pos:end="93:19">res</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:24">bfi</name><operator pos:start="93:25" pos:end="93:25">.</operator><name pos:start="93:26" pos:end="93:43">allocated_clusters</name></name><operator pos:start="93:44" pos:end="93:45">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:47"><expr pos:start="95:17" pos:end="95:46"><name pos:start="95:17" pos:end="95:44"><name pos:start="95:17" pos:end="95:19">res</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:24">bfi</name><operator pos:start="95:25" pos:end="95:25">.</operator><name pos:start="95:26" pos:end="95:44">compressed_clusters</name></name><operator pos:start="95:45" pos:end="95:46">++</operator></expr>;</expr_stmt>



                <comment type="block" pos:start="99:17" pos:end="107:19">/* Compressed clusters are fragmented by nature.  Since they

                 * take up sub-sector space but we only have sector granularity

                 * I/O we need to re-read the same sectors even for adjacent

                 * compressed clusters.

                 */</comment>

                <expr_stmt pos:start="109:17" pos:end="109:47"><expr pos:start="109:17" pos:end="109:46"><name pos:start="109:17" pos:end="109:44"><name pos:start="109:17" pos:end="109:19">res</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:24">bfi</name><operator pos:start="109:25" pos:end="109:25">.</operator><name pos:start="109:26" pos:end="109:44">fragmented_clusters</name></name><operator pos:start="109:45" pos:end="109:46">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>



        <case pos:start="117:9" pos:end="117:32">case <expr pos:start="117:14" pos:end="117:31"><name pos:start="117:14" pos:end="117:31">QCOW2_CLUSTER_ZERO</name></expr>:</case>

            <if_stmt pos:start="119:13" pos:end="123:13"><if pos:start="119:13" pos:end="123:13">if <condition pos:start="119:16" pos:end="119:50">(<expr pos:start="119:17" pos:end="119:49"><operator pos:start="119:17" pos:end="119:17">(</operator><name pos:start="119:18" pos:end="119:25">l2_entry</name> <operator pos:start="119:27" pos:end="119:27">&amp;</operator> <name pos:start="119:29" pos:end="119:43">L2E_OFFSET_MASK</name><operator pos:start="119:44" pos:end="119:44">)</operator> <operator pos:start="119:46" pos:end="119:47">==</operator> <literal type="number" pos:start="119:49" pos:end="119:49">0</literal></expr>)</condition> <block pos:start="119:52" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:22">

                <break pos:start="121:17" pos:end="121:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="125:13" pos:end="125:30">/* fall through */</comment>



        <case pos:start="129:9" pos:end="129:34">case <expr pos:start="129:14" pos:end="129:33"><name pos:start="129:14" pos:end="129:33">QCOW2_CLUSTER_NORMAL</name></expr>:</case>

        <block pos:start="131:9" pos:end="183:9">{<block_content pos:start="133:13" pos:end="181:18">

            <decl_stmt pos:start="133:13" pos:end="133:57"><decl pos:start="133:13" pos:end="133:56"><type pos:start="133:13" pos:end="133:20"><name pos:start="133:13" pos:end="133:20">uint64_t</name></type> <name pos:start="133:22" pos:end="133:27">offset</name> <init pos:start="133:29" pos:end="133:56">= <expr pos:start="133:31" pos:end="133:56"><name pos:start="133:31" pos:end="133:38">l2_entry</name> <operator pos:start="133:40" pos:end="133:40">&amp;</operator> <name pos:start="133:42" pos:end="133:56">L2E_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="137:13" pos:end="151:13"><if pos:start="137:13" pos:end="151:13">if <condition pos:start="137:16" pos:end="137:40">(<expr pos:start="137:17" pos:end="137:39"><name pos:start="137:17" pos:end="137:21">flags</name> <operator pos:start="137:23" pos:end="137:23">&amp;</operator> <name pos:start="137:25" pos:end="137:39">CHECK_FRAG_INFO</name></expr>)</condition> <block pos:start="137:42" pos:end="151:13">{<block_content pos:start="139:17" pos:end="149:66">

                <expr_stmt pos:start="139:17" pos:end="139:46"><expr pos:start="139:17" pos:end="139:45"><name pos:start="139:17" pos:end="139:43"><name pos:start="139:17" pos:end="139:19">res</name><operator pos:start="139:20" pos:end="139:21">-&gt;</operator><name pos:start="139:22" pos:end="139:24">bfi</name><operator pos:start="139:25" pos:end="139:25">.</operator><name pos:start="139:26" pos:end="139:43">allocated_clusters</name></name><operator pos:start="139:44" pos:end="139:45">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="141:17" pos:end="147:17"><if pos:start="141:17" pos:end="147:17">if <condition pos:start="141:20" pos:end="143:53">(<expr pos:start="141:21" pos:end="143:52"><name pos:start="141:21" pos:end="141:42">next_contiguous_offset</name> <operator pos:start="141:44" pos:end="141:45">&amp;&amp;</operator>

                    <name pos:start="143:21" pos:end="143:26">offset</name> <operator pos:start="143:28" pos:end="143:29">!=</operator> <name pos:start="143:31" pos:end="143:52">next_contiguous_offset</name></expr>)</condition> <block pos:start="143:55" pos:end="147:17">{<block_content pos:start="145:21" pos:end="145:51">

                    <expr_stmt pos:start="145:21" pos:end="145:51"><expr pos:start="145:21" pos:end="145:50"><name pos:start="145:21" pos:end="145:48"><name pos:start="145:21" pos:end="145:23">res</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:28">bfi</name><operator pos:start="145:29" pos:end="145:29">.</operator><name pos:start="145:30" pos:end="145:48">fragmented_clusters</name></name><operator pos:start="145:49" pos:end="145:50">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:66"><expr pos:start="149:17" pos:end="149:65"><name pos:start="149:17" pos:end="149:38">next_contiguous_offset</name> <operator pos:start="149:40" pos:end="149:40">=</operator> <name pos:start="149:42" pos:end="149:47">offset</name> <operator pos:start="149:49" pos:end="149:49">+</operator> <name pos:start="149:51" pos:end="149:65"><name pos:start="149:51" pos:end="149:51">s</name><operator pos:start="149:52" pos:end="149:53">-&gt;</operator><name pos:start="149:54" pos:end="149:65">cluster_size</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="155:13" pos:end="155:38">/* Mark cluster as used */</comment>

            <expr_stmt pos:start="157:13" pos:end="159:57"><expr pos:start="157:13" pos:end="159:56"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <call pos:start="157:19" pos:end="159:56"><name pos:start="157:19" pos:end="157:31">inc_refcounts</name><argument_list pos:start="157:32" pos:end="159:56">(<argument pos:start="157:33" pos:end="157:34"><expr pos:start="157:33" pos:end="157:34"><name pos:start="157:33" pos:end="157:34">bs</name></expr></argument>, <argument pos:start="157:37" pos:end="157:39"><expr pos:start="157:37" pos:end="157:39"><name pos:start="157:37" pos:end="157:39">res</name></expr></argument>, <argument pos:start="157:42" pos:end="157:55"><expr pos:start="157:42" pos:end="157:55"><name pos:start="157:42" pos:end="157:55">refcount_table</name></expr></argument>, <argument pos:start="157:58" pos:end="157:76"><expr pos:start="157:58" pos:end="157:76"><name pos:start="157:58" pos:end="157:76">refcount_table_size</name></expr></argument>,

                                <argument pos:start="159:33" pos:end="159:38"><expr pos:start="159:33" pos:end="159:38"><name pos:start="159:33" pos:end="159:38">offset</name></expr></argument>, <argument pos:start="159:41" pos:end="159:55"><expr pos:start="159:41" pos:end="159:55"><name pos:start="159:41" pos:end="159:55"><name pos:start="159:41" pos:end="159:41">s</name><operator pos:start="159:42" pos:end="159:43">-&gt;</operator><name pos:start="159:44" pos:end="159:55">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="161:13" pos:end="165:13"><if pos:start="161:13" pos:end="165:13">if <condition pos:start="161:16" pos:end="161:24">(<expr pos:start="161:17" pos:end="161:23"><name pos:start="161:17" pos:end="161:19">ret</name> <operator pos:start="161:21" pos:end="161:21">&lt;</operator> <literal type="number" pos:start="161:23" pos:end="161:23">0</literal></expr>)</condition> <block pos:start="161:26" pos:end="165:13">{<block_content pos:start="163:17" pos:end="163:26">

                <goto pos:start="163:17" pos:end="163:26">goto <name pos:start="163:22" pos:end="163:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="169:13" pos:end="169:53">/* Correct offsets are cluster aligned */</comment>

            <if_stmt pos:start="171:13" pos:end="179:13"><if pos:start="171:13" pos:end="179:13">if <condition pos:start="171:16" pos:end="171:47">(<expr pos:start="171:17" pos:end="171:46"><call pos:start="171:17" pos:end="171:46"><name pos:start="171:17" pos:end="171:35">offset_into_cluster</name><argument_list pos:start="171:36" pos:end="171:46">(<argument pos:start="171:37" pos:end="171:37"><expr pos:start="171:37" pos:end="171:37"><name pos:start="171:37" pos:end="171:37">s</name></expr></argument>, <argument pos:start="171:40" pos:end="171:45"><expr pos:start="171:40" pos:end="171:45"><name pos:start="171:40" pos:end="171:45">offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:49" pos:end="179:13">{<block_content pos:start="173:17" pos:end="177:35">

                <expr_stmt pos:start="173:17" pos:end="175:71"><expr pos:start="173:17" pos:end="175:70"><call pos:start="173:17" pos:end="175:70"><name pos:start="173:17" pos:end="173:23">fprintf</name><argument_list pos:start="173:24" pos:end="175:70">(<argument pos:start="173:25" pos:end="173:30"><expr pos:start="173:25" pos:end="173:30"><name pos:start="173:25" pos:end="173:30">stderr</name></expr></argument>, <argument pos:start="173:33" pos:end="175:61"><expr pos:start="173:33" pos:end="175:61"><literal type="string" pos:start="173:33" pos:end="173:48">"ERROR offset=%"</literal> <name pos:start="173:50" pos:end="173:55">PRIx64</name> <literal type="string" pos:start="173:57" pos:end="173:75">": Cluster is not "</literal>

                    <literal type="string" pos:start="175:21" pos:end="175:61">"properly aligned; L2 entry corrupted.\n"</literal></expr></argument>, <argument pos:start="175:64" pos:end="175:69"><expr pos:start="175:64" pos:end="175:69"><name pos:start="175:64" pos:end="175:69">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:35"><expr pos:start="177:17" pos:end="177:34"><name pos:start="177:17" pos:end="177:32"><name pos:start="177:17" pos:end="177:19">res</name><operator pos:start="177:20" pos:end="177:21">-&gt;</operator><name pos:start="177:22" pos:end="177:32">corruptions</name></name><operator pos:start="177:33" pos:end="177:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        </block_content>}</block>



        <case pos:start="187:9" pos:end="187:39">case <expr pos:start="187:14" pos:end="187:38"><name pos:start="187:14" pos:end="187:38">QCOW2_CLUSTER_UNALLOCATED</name></expr>:</case>

            <break pos:start="189:13" pos:end="189:18">break;</break>



        <default pos:start="193:9" pos:end="193:16">default:</default>

            <expr_stmt pos:start="195:13" pos:end="195:20"><expr pos:start="195:13" pos:end="195:19"><call pos:start="195:13" pos:end="195:19"><name pos:start="195:13" pos:end="195:17">abort</name><argument_list pos:start="195:18" pos:end="195:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <expr_stmt pos:start="203:5" pos:end="203:21"><expr pos:start="203:5" pos:end="203:20"><call pos:start="203:5" pos:end="203:20"><name pos:start="203:5" pos:end="203:10">g_free</name><argument_list pos:start="203:11" pos:end="203:20">(<argument pos:start="203:12" pos:end="203:19"><expr pos:start="203:12" pos:end="203:19"><name pos:start="203:12" pos:end="203:19">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="205:5" pos:end="205:13">return <expr pos:start="205:12" pos:end="205:12"><literal type="number" pos:start="205:12" pos:end="205:12">0</literal></expr>;</return>



<label pos:start="209:1" pos:end="209:5"><name pos:start="209:1" pos:end="209:4">fail</name>:</label>

    <expr_stmt pos:start="211:5" pos:end="211:21"><expr pos:start="211:5" pos:end="211:20"><call pos:start="211:5" pos:end="211:20"><name pos:start="211:5" pos:end="211:10">g_free</name><argument_list pos:start="211:11" pos:end="211:20">(<argument pos:start="211:12" pos:end="211:19"><expr pos:start="211:12" pos:end="211:19"><name pos:start="211:12" pos:end="211:19">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="213:5" pos:end="213:15">return <expr pos:start="213:12" pos:end="213:14"><name pos:start="213:12" pos:end="213:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
