<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11302.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">spapr_create_pci_child_dt</name><parameter_list pos:start="1:37" pos:end="5:64">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><name pos:start="1:38" pos:end="1:50">sPAPRPHBState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">phb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:71"><decl pos:start="1:58" pos:end="1:71"><type pos:start="1:58" pos:end="1:71"><name pos:start="1:58" pos:end="1:66">PCIDevice</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">dev</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:50"><decl pos:start="3:38" pos:end="3:50"><type pos:start="3:38" pos:end="3:50"><name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:50">drc_index</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:72"><decl pos:start="3:53" pos:end="3:72"><type pos:start="3:53" pos:end="3:72"><specifier pos:start="3:53" pos:end="3:57">const</specifier> <name pos:start="3:59" pos:end="3:62">char</name> <modifier pos:start="3:64" pos:end="3:64">*</modifier></type><name pos:start="3:65" pos:end="3:72">drc_name</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:46"><decl pos:start="5:38" pos:end="5:46"><type pos:start="5:38" pos:end="5:46"><name pos:start="5:38" pos:end="5:41">void</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:46">fdt</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:63"><decl pos:start="5:49" pos:end="5:63"><type pos:start="5:49" pos:end="5:63"><name pos:start="5:49" pos:end="5:51">int</name></type> <name pos:start="5:53" pos:end="5:63">node_offset</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="45:1">{<block_content pos:start="9:5" pos:end="43:18">

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">offset</name></decl>, <decl pos:start="9:17" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:19">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">slot</name> <init pos:start="11:14" pos:end="11:35">= <expr pos:start="11:16" pos:end="11:35"><call pos:start="11:16" pos:end="11:35"><name pos:start="11:16" pos:end="11:23">PCI_SLOT</name><argument_list pos:start="11:24" pos:end="11:35">(<argument pos:start="11:25" pos:end="11:34"><expr pos:start="11:25" pos:end="11:34"><name pos:start="11:25" pos:end="11:34"><name pos:start="11:25" pos:end="11:27">dev</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:34">devfn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">func</name> <init pos:start="13:14" pos:end="13:35">= <expr pos:start="13:16" pos:end="13:35"><call pos:start="13:16" pos:end="13:35"><name pos:start="13:16" pos:end="13:23">PCI_FUNC</name><argument_list pos:start="13:24" pos:end="13:35">(<argument pos:start="13:25" pos:end="13:34"><expr pos:start="13:25" pos:end="13:34"><name pos:start="13:25" pos:end="13:34"><name pos:start="13:25" pos:end="13:27">dev</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:34">devfn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:31"><name pos:start="15:10" pos:end="15:17">nodename</name><index pos:start="15:18" pos:end="15:31">[<expr pos:start="15:19" pos:end="15:30"><name pos:start="15:19" pos:end="15:30">FDT_NAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:12">func</name> <operator pos:start="19:14" pos:end="19:15">!=</operator> <literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr>)</condition> <block pos:start="19:20" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:66">

        <expr_stmt pos:start="21:9" pos:end="21:66"><expr pos:start="21:9" pos:end="21:65"><call pos:start="21:9" pos:end="21:65"><name pos:start="21:9" pos:end="21:16">snprintf</name><argument_list pos:start="21:17" pos:end="21:65">(<argument pos:start="21:18" pos:end="21:25"><expr pos:start="21:18" pos:end="21:25"><name pos:start="21:18" pos:end="21:25">nodename</name></expr></argument>, <argument pos:start="21:28" pos:end="21:39"><expr pos:start="21:28" pos:end="21:39"><name pos:start="21:28" pos:end="21:39">FDT_NAME_MAX</name></expr></argument>, <argument pos:start="21:42" pos:end="21:52"><expr pos:start="21:42" pos:end="21:52"><literal type="string" pos:start="21:42" pos:end="21:52">"pci@%x,%x"</literal></expr></argument>, <argument pos:start="21:55" pos:end="21:58"><expr pos:start="21:55" pos:end="21:58"><name pos:start="21:55" pos:end="21:58">slot</name></expr></argument>, <argument pos:start="21:61" pos:end="21:64"><expr pos:start="21:61" pos:end="21:64"><name pos:start="21:61" pos:end="21:64">func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="27:5">else <block pos:start="23:12" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:57">

        <expr_stmt pos:start="25:9" pos:end="25:57"><expr pos:start="25:9" pos:end="25:56"><call pos:start="25:9" pos:end="25:56"><name pos:start="25:9" pos:end="25:16">snprintf</name><argument_list pos:start="25:17" pos:end="25:56">(<argument pos:start="25:18" pos:end="25:25"><expr pos:start="25:18" pos:end="25:25"><name pos:start="25:18" pos:end="25:25">nodename</name></expr></argument>, <argument pos:start="25:28" pos:end="25:39"><expr pos:start="25:28" pos:end="25:39"><name pos:start="25:28" pos:end="25:39">FDT_NAME_MAX</name></expr></argument>, <argument pos:start="25:42" pos:end="25:49"><expr pos:start="25:42" pos:end="25:49"><literal type="string" pos:start="25:42" pos:end="25:49">"pci@%x"</literal></expr></argument>, <argument pos:start="25:52" pos:end="25:55"><expr pos:start="25:52" pos:end="25:55"><name pos:start="25:52" pos:end="25:55">slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:57"><expr pos:start="29:5" pos:end="29:56"><name pos:start="29:5" pos:end="29:10">offset</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <call pos:start="29:14" pos:end="29:56"><name pos:start="29:14" pos:end="29:28">fdt_add_subnode</name><argument_list pos:start="29:29" pos:end="29:56">(<argument pos:start="29:30" pos:end="29:32"><expr pos:start="29:30" pos:end="29:32"><name pos:start="29:30" pos:end="29:32">fdt</name></expr></argument>, <argument pos:start="29:35" pos:end="29:45"><expr pos:start="29:35" pos:end="29:45"><name pos:start="29:35" pos:end="29:45">node_offset</name></expr></argument>, <argument pos:start="29:48" pos:end="29:55"><expr pos:start="29:48" pos:end="29:55"><name pos:start="29:48" pos:end="29:55">nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="33:43"><expr pos:start="31:5" pos:end="33:42"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="33:42"><name pos:start="31:11" pos:end="31:37">spapr_populate_pci_child_dt</name><argument_list pos:start="31:38" pos:end="33:42">(<argument pos:start="31:39" pos:end="31:41"><expr pos:start="31:39" pos:end="31:41"><name pos:start="31:39" pos:end="31:41">dev</name></expr></argument>, <argument pos:start="31:44" pos:end="31:46"><expr pos:start="31:44" pos:end="31:46"><name pos:start="31:44" pos:end="31:46">fdt</name></expr></argument>, <argument pos:start="31:49" pos:end="31:54"><expr pos:start="31:49" pos:end="31:54"><name pos:start="31:49" pos:end="31:54">offset</name></expr></argument>, <argument pos:start="31:57" pos:end="31:66"><expr pos:start="31:57" pos:end="31:66"><name pos:start="31:57" pos:end="31:66"><name pos:start="31:57" pos:end="31:59">phb</name><operator pos:start="31:60" pos:end="31:61">-&gt;</operator><name pos:start="31:62" pos:end="31:66">index</name></name></expr></argument>, <argument pos:start="31:69" pos:end="31:77"><expr pos:start="31:69" pos:end="31:77"><name pos:start="31:69" pos:end="31:77">drc_index</name></expr></argument>,

                                      <argument pos:start="33:39" pos:end="33:41"><expr pos:start="33:39" pos:end="33:41"><name pos:start="33:39" pos:end="33:41">phb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:19"><expr pos:start="35:5" pos:end="35:18"><call pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:12">g_assert</name><argument_list pos:start="35:13" pos:end="35:18">(<argument pos:start="35:14" pos:end="35:17"><expr pos:start="35:14" pos:end="35:17"><operator pos:start="35:14" pos:end="35:14">!</operator><name pos:start="35:15" pos:end="35:17">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:12">(<expr pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">ret</name></expr>)</condition> <block pos:start="37:14" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:17">

        <return pos:start="39:9" pos:end="39:17">return <expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="43:5" pos:end="43:18">return <expr pos:start="43:12" pos:end="43:17"><name pos:start="43:12" pos:end="43:17">offset</name></expr>;</return>

</block_content>}</block></function>
</unit>
