<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5153.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">ws_snd_decode_frame</name><parameter_list pos:start="1:31" pos:end="5:32">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:26"><decl pos:start="3:17" pos:end="3:26"><type pos:start="3:17" pos:end="3:26"><name pos:start="3:17" pos:end="3:20">void</name> <modifier pos:start="3:22" pos:end="3:22">*</modifier></type><name pos:start="3:23" pos:end="3:26">data</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">data_size</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:31"><decl pos:start="5:17" pos:end="5:31"><type pos:start="5:17" pos:end="5:31"><name pos:start="5:17" pos:end="5:24">AVPacket</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:31">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="201:1">{<block_content pos:start="9:5" pos:end="199:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="13:1" pos:end="13:41">//    WSSNDContext *c = avctx-&gt;priv_data;</comment>



    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">in_size</name></decl>, <decl pos:start="17:18" pos:end="17:25"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:18" pos:end="17:25">out_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">sample</name> <init pos:start="19:16" pos:end="19:20">= <expr pos:start="19:18" pos:end="19:20"><literal type="number" pos:start="19:18" pos:end="19:20">128</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">uint8_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:20">samples</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">data</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:17"><if pos:start="27:5" pos:end="29:17">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:17">buf_size</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:17"><block_content pos:start="29:9" pos:end="29:17">

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:12">out_size</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="33:31"><name pos:start="33:16" pos:end="33:22">AV_RL16</name><argument_list pos:start="33:23" pos:end="33:31">(<argument pos:start="33:24" pos:end="33:30"><expr pos:start="33:24" pos:end="33:30"><operator pos:start="33:24" pos:end="33:24">&amp;</operator><name pos:start="33:25" pos:end="33:30"><name pos:start="33:25" pos:end="33:27">buf</name><index pos:start="33:28" pos:end="33:30">[<expr pos:start="33:29" pos:end="33:29"><literal type="number" pos:start="33:29" pos:end="33:29">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:11">in_size</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:30"><name pos:start="35:15" pos:end="35:21">AV_RL16</name><argument_list pos:start="35:22" pos:end="35:30">(<argument pos:start="35:23" pos:end="35:29"><expr pos:start="35:23" pos:end="35:29"><operator pos:start="35:23" pos:end="35:23">&amp;</operator><name pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:26">buf</name><index pos:start="35:27" pos:end="35:29">[<expr pos:start="35:28" pos:end="35:28"><literal type="number" pos:start="35:28" pos:end="35:28">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:13"><expr pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:7">buf</name> <operator pos:start="37:9" pos:end="37:10">+=</operator> <literal type="number" pos:start="37:12" pos:end="37:12">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:30">(<expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:16">out_size</name> <operator pos:start="41:18" pos:end="41:18">&gt;</operator> <operator pos:start="41:20" pos:end="41:20">*</operator><name pos:start="41:21" pos:end="41:29">data_size</name></expr>)</condition> <block pos:start="41:32" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:77"><expr pos:start="43:9" pos:end="43:76"><call pos:start="43:9" pos:end="43:76"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:76">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:75"><expr pos:start="43:37" pos:end="43:75"><literal type="string" pos:start="43:37" pos:end="43:75">"Frame is too large to fit in buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:27">(<expr pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:15">in_size</name> <operator pos:start="49:17" pos:end="49:17">&gt;</operator> <name pos:start="49:19" pos:end="49:26">buf_size</name></expr>)</condition> <block pos:start="49:29" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:18">

        <expr_stmt pos:start="51:9" pos:end="51:80"><expr pos:start="51:9" pos:end="51:79"><call pos:start="51:9" pos:end="51:79"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:79">(<argument pos:start="51:16" pos:end="51:20"><expr pos:start="51:16" pos:end="51:20"><name pos:start="51:16" pos:end="51:20">avctx</name></expr></argument>, <argument pos:start="51:23" pos:end="51:34"><expr pos:start="51:23" pos:end="51:34"><name pos:start="51:23" pos:end="51:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:37" pos:end="51:78"><expr pos:start="51:37" pos:end="51:78"><literal type="string" pos:start="51:37" pos:end="51:78">"Frame data is larger than input buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:26"><expr pos:start="59:5" pos:end="59:25"><operator pos:start="59:5" pos:end="59:5">*</operator><name pos:start="59:6" pos:end="59:14">data_size</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <name pos:start="59:18" pos:end="59:25">out_size</name></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="71:5"><if pos:start="63:5" pos:end="71:5">if <condition pos:start="63:8" pos:end="63:28">(<expr pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:15">in_size</name> <operator pos:start="63:17" pos:end="63:18">==</operator> <name pos:start="63:20" pos:end="63:27">out_size</name></expr>)</condition> <block pos:start="63:30" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:24">

        <for pos:start="65:9" pos:end="67:32">for <control pos:start="65:13" pos:end="65:38">(<init pos:start="65:14" pos:end="65:19"><expr pos:start="65:14" pos:end="65:18"><name pos:start="65:14" pos:end="65:14">i</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>;</init> <condition pos:start="65:21" pos:end="65:33"><expr pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:21">i</name> <operator pos:start="65:23" pos:end="65:23">&lt;</operator> <name pos:start="65:25" pos:end="65:32">out_size</name></expr>;</condition> <incr pos:start="65:35" pos:end="65:37"><expr pos:start="65:35" pos:end="65:37"><name pos:start="65:35" pos:end="65:35">i</name><operator pos:start="65:36" pos:end="65:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="67:13" pos:end="67:32"><block_content pos:start="67:13" pos:end="67:32">

            <expr_stmt pos:start="67:13" pos:end="67:32"><expr pos:start="67:13" pos:end="67:31"><operator pos:start="67:13" pos:end="67:13">*</operator><name pos:start="67:14" pos:end="67:20">samples</name><operator pos:start="67:21" pos:end="67:22">++</operator> <operator pos:start="67:24" pos:end="67:24">=</operator> <operator pos:start="67:26" pos:end="67:26">*</operator><name pos:start="67:27" pos:end="67:29">buf</name><operator pos:start="67:30" pos:end="67:31">++</operator></expr>;</expr_stmt></block_content></block></for>

        <return pos:start="69:9" pos:end="69:24">return <expr pos:start="69:16" pos:end="69:23"><name pos:start="69:16" pos:end="69:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="75:5" pos:end="195:5">while <condition pos:start="75:11" pos:end="75:24">(<expr pos:start="75:12" pos:end="75:23"><name pos:start="75:12" pos:end="75:19">out_size</name> <operator pos:start="75:21" pos:end="75:21">&gt;</operator> <literal type="number" pos:start="75:23" pos:end="75:23">0</literal></expr>)</condition> <block pos:start="75:26" pos:end="195:5">{<block_content pos:start="77:9" pos:end="193:9">

        <decl_stmt pos:start="77:9" pos:end="77:17"><decl pos:start="77:9" pos:end="77:16"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:16">code</name></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:22"><decl pos:start="79:9" pos:end="79:21"><type pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:15">uint8_t</name></type> <name pos:start="79:17" pos:end="79:21">count</name></decl>;</decl_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:27"><expr pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:12">code</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <operator pos:start="81:16" pos:end="81:16">(</operator><operator pos:start="81:17" pos:end="81:17">*</operator><name pos:start="81:18" pos:end="81:20">buf</name><operator pos:start="81:21" pos:end="81:21">)</operator> <operator pos:start="81:23" pos:end="81:24">&gt;&gt;</operator> <literal type="number" pos:start="81:26" pos:end="81:26">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:30"><expr pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:13">count</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <operator pos:start="83:17" pos:end="83:17">(</operator><operator pos:start="83:18" pos:end="83:18">*</operator><name pos:start="83:19" pos:end="83:21">buf</name><operator pos:start="83:22" pos:end="83:22">)</operator> <operator pos:start="83:24" pos:end="83:24">&amp;</operator> <literal type="number" pos:start="83:26" pos:end="83:29">0x3F</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:14"><expr pos:start="85:9" pos:end="85:13"><name pos:start="85:9" pos:end="85:11">buf</name><operator pos:start="85:12" pos:end="85:13">++</operator></expr>;</expr_stmt>

        <switch pos:start="87:9" pos:end="193:9">switch<condition pos:start="87:15" pos:end="87:20">(<expr pos:start="87:16" pos:end="87:19"><name pos:start="87:16" pos:end="87:19">code</name></expr>)</condition> <block pos:start="87:22" pos:end="193:9">{<block_content pos:start="89:9" pos:end="191:13">

        <case pos:start="89:9" pos:end="89:15">case <expr pos:start="89:14" pos:end="89:14"><literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>:</case> <comment type="block" pos:start="89:17" pos:end="89:33">/* ADPCM 2-bit */</comment>

            <for pos:start="91:13" pos:end="121:13">for <control pos:start="91:17" pos:end="91:45">(<init pos:start="91:18" pos:end="91:25"><expr pos:start="91:18" pos:end="91:24"><name pos:start="91:18" pos:end="91:22">count</name><operator pos:start="91:23" pos:end="91:24">++</operator></expr>;</init> <condition pos:start="91:27" pos:end="91:36"><expr pos:start="91:27" pos:end="91:35"><name pos:start="91:27" pos:end="91:31">count</name> <operator pos:start="91:33" pos:end="91:33">&gt;</operator> <literal type="number" pos:start="91:35" pos:end="91:35">0</literal></expr>;</condition> <incr pos:start="91:38" pos:end="91:44"><expr pos:start="91:38" pos:end="91:44"><name pos:start="91:38" pos:end="91:42">count</name><operator pos:start="91:43" pos:end="91:44">--</operator></expr></incr>)</control> <block pos:start="91:47" pos:end="121:13">{<block_content pos:start="93:17" pos:end="119:30">

                <expr_stmt pos:start="93:17" pos:end="93:30"><expr pos:start="93:17" pos:end="93:29"><name pos:start="93:17" pos:end="93:20">code</name> <operator pos:start="93:22" pos:end="93:22">=</operator> <operator pos:start="93:24" pos:end="93:24">*</operator><name pos:start="93:25" pos:end="93:27">buf</name><operator pos:start="93:28" pos:end="93:29">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:52"><expr pos:start="95:17" pos:end="95:51"><name pos:start="95:17" pos:end="95:22">sample</name> <operator pos:start="95:24" pos:end="95:25">+=</operator> <name pos:start="95:27" pos:end="95:51"><name pos:start="95:27" pos:end="95:39">ws_adpcm_2bit</name><index pos:start="95:40" pos:end="95:51">[<expr pos:start="95:41" pos:end="95:50"><name pos:start="95:41" pos:end="95:44">code</name> <operator pos:start="95:46" pos:end="95:46">&amp;</operator> <literal type="number" pos:start="95:48" pos:end="95:50">0x3</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:47"><expr pos:start="97:17" pos:end="97:46"><name pos:start="97:17" pos:end="97:22">sample</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <call pos:start="97:26" pos:end="97:46"><name pos:start="97:26" pos:end="97:38">av_clip_uint8</name><argument_list pos:start="97:39" pos:end="97:46">(<argument pos:start="97:40" pos:end="97:45"><expr pos:start="97:40" pos:end="97:45"><name pos:start="97:40" pos:end="97:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:36"><expr pos:start="99:17" pos:end="99:35"><operator pos:start="99:17" pos:end="99:17">*</operator><name pos:start="99:18" pos:end="99:24">samples</name><operator pos:start="99:25" pos:end="99:26">++</operator> <operator pos:start="99:28" pos:end="99:28">=</operator> <name pos:start="99:30" pos:end="99:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:59"><expr pos:start="101:17" pos:end="101:58"><name pos:start="101:17" pos:end="101:22">sample</name> <operator pos:start="101:24" pos:end="101:25">+=</operator> <name pos:start="101:27" pos:end="101:58"><name pos:start="101:27" pos:end="101:39">ws_adpcm_2bit</name><index pos:start="101:40" pos:end="101:58">[<expr pos:start="101:41" pos:end="101:57"><operator pos:start="101:41" pos:end="101:41">(</operator><name pos:start="101:42" pos:end="101:45">code</name> <operator pos:start="101:47" pos:end="101:48">&gt;&gt;</operator> <literal type="number" pos:start="101:50" pos:end="101:50">2</literal><operator pos:start="101:51" pos:end="101:51">)</operator> <operator pos:start="101:53" pos:end="101:53">&amp;</operator> <literal type="number" pos:start="101:55" pos:end="101:57">0x3</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:47"><expr pos:start="103:17" pos:end="103:46"><name pos:start="103:17" pos:end="103:22">sample</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <call pos:start="103:26" pos:end="103:46"><name pos:start="103:26" pos:end="103:38">av_clip_uint8</name><argument_list pos:start="103:39" pos:end="103:46">(<argument pos:start="103:40" pos:end="103:45"><expr pos:start="103:40" pos:end="103:45"><name pos:start="103:40" pos:end="103:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:36"><expr pos:start="105:17" pos:end="105:35"><operator pos:start="105:17" pos:end="105:17">*</operator><name pos:start="105:18" pos:end="105:24">samples</name><operator pos:start="105:25" pos:end="105:26">++</operator> <operator pos:start="105:28" pos:end="105:28">=</operator> <name pos:start="105:30" pos:end="105:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:59"><expr pos:start="107:17" pos:end="107:58"><name pos:start="107:17" pos:end="107:22">sample</name> <operator pos:start="107:24" pos:end="107:25">+=</operator> <name pos:start="107:27" pos:end="107:58"><name pos:start="107:27" pos:end="107:39">ws_adpcm_2bit</name><index pos:start="107:40" pos:end="107:58">[<expr pos:start="107:41" pos:end="107:57"><operator pos:start="107:41" pos:end="107:41">(</operator><name pos:start="107:42" pos:end="107:45">code</name> <operator pos:start="107:47" pos:end="107:48">&gt;&gt;</operator> <literal type="number" pos:start="107:50" pos:end="107:50">4</literal><operator pos:start="107:51" pos:end="107:51">)</operator> <operator pos:start="107:53" pos:end="107:53">&amp;</operator> <literal type="number" pos:start="107:55" pos:end="107:57">0x3</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:47"><expr pos:start="109:17" pos:end="109:46"><name pos:start="109:17" pos:end="109:22">sample</name> <operator pos:start="109:24" pos:end="109:24">=</operator> <call pos:start="109:26" pos:end="109:46"><name pos:start="109:26" pos:end="109:38">av_clip_uint8</name><argument_list pos:start="109:39" pos:end="109:46">(<argument pos:start="109:40" pos:end="109:45"><expr pos:start="109:40" pos:end="109:45"><name pos:start="109:40" pos:end="109:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:36"><expr pos:start="111:17" pos:end="111:35"><operator pos:start="111:17" pos:end="111:17">*</operator><name pos:start="111:18" pos:end="111:24">samples</name><operator pos:start="111:25" pos:end="111:26">++</operator> <operator pos:start="111:28" pos:end="111:28">=</operator> <name pos:start="111:30" pos:end="111:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:59"><expr pos:start="113:17" pos:end="113:58"><name pos:start="113:17" pos:end="113:22">sample</name> <operator pos:start="113:24" pos:end="113:25">+=</operator> <name pos:start="113:27" pos:end="113:58"><name pos:start="113:27" pos:end="113:39">ws_adpcm_2bit</name><index pos:start="113:40" pos:end="113:58">[<expr pos:start="113:41" pos:end="113:57"><operator pos:start="113:41" pos:end="113:41">(</operator><name pos:start="113:42" pos:end="113:45">code</name> <operator pos:start="113:47" pos:end="113:48">&gt;&gt;</operator> <literal type="number" pos:start="113:50" pos:end="113:50">6</literal><operator pos:start="113:51" pos:end="113:51">)</operator> <operator pos:start="113:53" pos:end="113:53">&amp;</operator> <literal type="number" pos:start="113:55" pos:end="113:57">0x3</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:47"><expr pos:start="115:17" pos:end="115:46"><name pos:start="115:17" pos:end="115:22">sample</name> <operator pos:start="115:24" pos:end="115:24">=</operator> <call pos:start="115:26" pos:end="115:46"><name pos:start="115:26" pos:end="115:38">av_clip_uint8</name><argument_list pos:start="115:39" pos:end="115:46">(<argument pos:start="115:40" pos:end="115:45"><expr pos:start="115:40" pos:end="115:45"><name pos:start="115:40" pos:end="115:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:36"><expr pos:start="117:17" pos:end="117:35"><operator pos:start="117:17" pos:end="117:17">*</operator><name pos:start="117:18" pos:end="117:24">samples</name><operator pos:start="117:25" pos:end="117:26">++</operator> <operator pos:start="117:28" pos:end="117:28">=</operator> <name pos:start="117:30" pos:end="117:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:30"><expr pos:start="119:17" pos:end="119:29"><name pos:start="119:17" pos:end="119:24">out_size</name> <operator pos:start="119:26" pos:end="119:27">-=</operator> <literal type="number" pos:start="119:29" pos:end="119:29">4</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="123:13" pos:end="123:18">break;</break>

        <case pos:start="125:9" pos:end="125:15">case <expr pos:start="125:14" pos:end="125:14"><literal type="number" pos:start="125:14" pos:end="125:14">1</literal></expr>:</case> <comment type="block" pos:start="125:17" pos:end="125:33">/* ADPCM 4-bit */</comment>

            <for pos:start="127:13" pos:end="145:13">for <control pos:start="127:17" pos:end="127:45">(<init pos:start="127:18" pos:end="127:25"><expr pos:start="127:18" pos:end="127:24"><name pos:start="127:18" pos:end="127:22">count</name><operator pos:start="127:23" pos:end="127:24">++</operator></expr>;</init> <condition pos:start="127:27" pos:end="127:36"><expr pos:start="127:27" pos:end="127:35"><name pos:start="127:27" pos:end="127:31">count</name> <operator pos:start="127:33" pos:end="127:33">&gt;</operator> <literal type="number" pos:start="127:35" pos:end="127:35">0</literal></expr>;</condition> <incr pos:start="127:38" pos:end="127:44"><expr pos:start="127:38" pos:end="127:44"><name pos:start="127:38" pos:end="127:42">count</name><operator pos:start="127:43" pos:end="127:44">--</operator></expr></incr>)</control> <block pos:start="127:47" pos:end="145:13">{<block_content pos:start="129:17" pos:end="143:30">

                <expr_stmt pos:start="129:17" pos:end="129:30"><expr pos:start="129:17" pos:end="129:29"><name pos:start="129:17" pos:end="129:20">code</name> <operator pos:start="129:22" pos:end="129:22">=</operator> <operator pos:start="129:24" pos:end="129:24">*</operator><name pos:start="129:25" pos:end="129:27">buf</name><operator pos:start="129:28" pos:end="129:29">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:52"><expr pos:start="131:17" pos:end="131:51"><name pos:start="131:17" pos:end="131:22">sample</name> <operator pos:start="131:24" pos:end="131:25">+=</operator> <name pos:start="131:27" pos:end="131:51"><name pos:start="131:27" pos:end="131:39">ws_adpcm_4bit</name><index pos:start="131:40" pos:end="131:51">[<expr pos:start="131:41" pos:end="131:50"><name pos:start="131:41" pos:end="131:44">code</name> <operator pos:start="131:46" pos:end="131:46">&amp;</operator> <literal type="number" pos:start="131:48" pos:end="131:50">0xF</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:47"><expr pos:start="133:17" pos:end="133:46"><name pos:start="133:17" pos:end="133:22">sample</name> <operator pos:start="133:24" pos:end="133:24">=</operator> <call pos:start="133:26" pos:end="133:46"><name pos:start="133:26" pos:end="133:38">av_clip_uint8</name><argument_list pos:start="133:39" pos:end="133:46">(<argument pos:start="133:40" pos:end="133:45"><expr pos:start="133:40" pos:end="133:45"><name pos:start="133:40" pos:end="133:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:36"><expr pos:start="135:17" pos:end="135:35"><operator pos:start="135:17" pos:end="135:17">*</operator><name pos:start="135:18" pos:end="135:24">samples</name><operator pos:start="135:25" pos:end="135:26">++</operator> <operator pos:start="135:28" pos:end="135:28">=</operator> <name pos:start="135:30" pos:end="135:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:51"><expr pos:start="137:17" pos:end="137:50"><name pos:start="137:17" pos:end="137:22">sample</name> <operator pos:start="137:24" pos:end="137:25">+=</operator> <name pos:start="137:27" pos:end="137:50"><name pos:start="137:27" pos:end="137:39">ws_adpcm_4bit</name><index pos:start="137:40" pos:end="137:50">[<expr pos:start="137:41" pos:end="137:49"><name pos:start="137:41" pos:end="137:44">code</name> <operator pos:start="137:46" pos:end="137:47">&gt;&gt;</operator> <literal type="number" pos:start="137:49" pos:end="137:49">4</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:47"><expr pos:start="139:17" pos:end="139:46"><name pos:start="139:17" pos:end="139:22">sample</name> <operator pos:start="139:24" pos:end="139:24">=</operator> <call pos:start="139:26" pos:end="139:46"><name pos:start="139:26" pos:end="139:38">av_clip_uint8</name><argument_list pos:start="139:39" pos:end="139:46">(<argument pos:start="139:40" pos:end="139:45"><expr pos:start="139:40" pos:end="139:45"><name pos:start="139:40" pos:end="139:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:36"><expr pos:start="141:17" pos:end="141:35"><operator pos:start="141:17" pos:end="141:17">*</operator><name pos:start="141:18" pos:end="141:24">samples</name><operator pos:start="141:25" pos:end="141:26">++</operator> <operator pos:start="141:28" pos:end="141:28">=</operator> <name pos:start="141:30" pos:end="141:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:30"><expr pos:start="143:17" pos:end="143:29"><name pos:start="143:17" pos:end="143:24">out_size</name> <operator pos:start="143:26" pos:end="143:27">-=</operator> <literal type="number" pos:start="143:29" pos:end="143:29">2</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        <case pos:start="149:9" pos:end="149:15">case <expr pos:start="149:14" pos:end="149:14"><literal type="number" pos:start="149:14" pos:end="149:14">2</literal></expr>:</case> <comment type="block" pos:start="149:17" pos:end="149:36">/* no compression */</comment>

            <if_stmt pos:start="151:13" pos:end="179:13"><if pos:start="151:13" pos:end="167:13">if <condition pos:start="151:16" pos:end="151:29">(<expr pos:start="151:17" pos:end="151:28"><name pos:start="151:17" pos:end="151:21">count</name> <operator pos:start="151:23" pos:end="151:23">&amp;</operator> <literal type="number" pos:start="151:25" pos:end="151:28">0x20</literal></expr>)</condition> <block pos:start="151:31" pos:end="167:13">{<block_content pos:start="153:17" pos:end="165:27"> <comment type="block" pos:start="151:33" pos:end="151:47">/* big delta */</comment>

                <decl_stmt pos:start="153:17" pos:end="153:25"><decl pos:start="153:17" pos:end="153:24"><type pos:start="153:17" pos:end="153:22"><name pos:start="153:17" pos:end="153:22">int8_t</name></type> <name pos:start="153:24" pos:end="153:24">t</name></decl>;</decl_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:26"><expr pos:start="155:17" pos:end="155:25"><name pos:start="155:17" pos:end="155:17">t</name> <operator pos:start="155:19" pos:end="155:19">=</operator> <name pos:start="155:21" pos:end="155:25">count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:24"><expr pos:start="157:17" pos:end="157:23"><name pos:start="157:17" pos:end="157:17">t</name> <operator pos:start="157:19" pos:end="157:21">&lt;&lt;=</operator> <literal type="number" pos:start="157:23" pos:end="157:23">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:33"><expr pos:start="159:17" pos:end="159:32"><name pos:start="159:17" pos:end="159:22">sample</name> <operator pos:start="159:24" pos:end="159:25">+=</operator> <name pos:start="159:27" pos:end="159:27">t</name> <operator pos:start="159:29" pos:end="159:30">&gt;&gt;</operator> <literal type="number" pos:start="159:32" pos:end="159:32">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:47"><expr pos:start="161:17" pos:end="161:46"><name pos:start="161:17" pos:end="161:22">sample</name> <operator pos:start="161:24" pos:end="161:24">=</operator> <call pos:start="161:26" pos:end="161:46"><name pos:start="161:26" pos:end="161:38">av_clip_uint8</name><argument_list pos:start="161:39" pos:end="161:46">(<argument pos:start="161:40" pos:end="161:45"><expr pos:start="161:40" pos:end="161:45"><name pos:start="161:40" pos:end="161:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:36"><expr pos:start="163:17" pos:end="163:35"><operator pos:start="163:17" pos:end="163:17">*</operator><name pos:start="163:18" pos:end="163:24">samples</name><operator pos:start="163:25" pos:end="163:26">++</operator> <operator pos:start="163:28" pos:end="163:28">=</operator> <name pos:start="163:30" pos:end="163:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:27"><expr pos:start="165:17" pos:end="165:26"><name pos:start="165:17" pos:end="165:24">out_size</name><operator pos:start="165:25" pos:end="165:26">--</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="167:15" pos:end="179:13">else <block pos:start="167:20" pos:end="179:13">{<block_content pos:start="169:17" pos:end="177:33"> <comment type="block" pos:start="167:22" pos:end="167:31">/* copy */</comment>

                <for pos:start="169:17" pos:end="175:17">for <control pos:start="169:21" pos:end="169:49">(<init pos:start="169:22" pos:end="169:29"><expr pos:start="169:22" pos:end="169:28"><name pos:start="169:22" pos:end="169:26">count</name><operator pos:start="169:27" pos:end="169:28">++</operator></expr>;</init> <condition pos:start="169:31" pos:end="169:40"><expr pos:start="169:31" pos:end="169:39"><name pos:start="169:31" pos:end="169:35">count</name> <operator pos:start="169:37" pos:end="169:37">&gt;</operator> <literal type="number" pos:start="169:39" pos:end="169:39">0</literal></expr>;</condition> <incr pos:start="169:42" pos:end="169:48"><expr pos:start="169:42" pos:end="169:48"><name pos:start="169:42" pos:end="169:46">count</name><operator pos:start="169:47" pos:end="169:48">--</operator></expr></incr>)</control> <block pos:start="169:51" pos:end="175:17">{<block_content pos:start="171:21" pos:end="173:31">

                    <expr_stmt pos:start="171:21" pos:end="171:40"><expr pos:start="171:21" pos:end="171:39"><operator pos:start="171:21" pos:end="171:21">*</operator><name pos:start="171:22" pos:end="171:28">samples</name><operator pos:start="171:29" pos:end="171:30">++</operator> <operator pos:start="171:32" pos:end="171:32">=</operator> <operator pos:start="171:34" pos:end="171:34">*</operator><name pos:start="171:35" pos:end="171:37">buf</name><operator pos:start="171:38" pos:end="171:39">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="173:21" pos:end="173:31"><expr pos:start="173:21" pos:end="173:30"><name pos:start="173:21" pos:end="173:28">out_size</name><operator pos:start="173:29" pos:end="173:30">--</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="177:17" pos:end="177:33"><expr pos:start="177:17" pos:end="177:32"><name pos:start="177:17" pos:end="177:22">sample</name> <operator pos:start="177:24" pos:end="177:24">=</operator> <name pos:start="177:26" pos:end="177:32"><name pos:start="177:26" pos:end="177:28">buf</name><index pos:start="177:29" pos:end="177:32">[<expr pos:start="177:30" pos:end="177:31"><operator pos:start="177:30" pos:end="177:30">-</operator><literal type="number" pos:start="177:31" pos:end="177:31">1</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        <default pos:start="183:9" pos:end="183:16">default:</default> <comment type="block" pos:start="183:18" pos:end="183:26">/* run */</comment>

            <for pos:start="185:13" pos:end="191:13">for<control pos:start="185:16" pos:end="185:44">(<init pos:start="185:17" pos:end="185:24"><expr pos:start="185:17" pos:end="185:23"><name pos:start="185:17" pos:end="185:21">count</name><operator pos:start="185:22" pos:end="185:23">++</operator></expr>;</init> <condition pos:start="185:26" pos:end="185:35"><expr pos:start="185:26" pos:end="185:34"><name pos:start="185:26" pos:end="185:30">count</name> <operator pos:start="185:32" pos:end="185:32">&gt;</operator> <literal type="number" pos:start="185:34" pos:end="185:34">0</literal></expr>;</condition> <incr pos:start="185:37" pos:end="185:43"><expr pos:start="185:37" pos:end="185:43"><name pos:start="185:37" pos:end="185:41">count</name><operator pos:start="185:42" pos:end="185:43">--</operator></expr></incr>)</control> <block pos:start="185:46" pos:end="191:13">{<block_content pos:start="187:17" pos:end="189:27">

                <expr_stmt pos:start="187:17" pos:end="187:36"><expr pos:start="187:17" pos:end="187:35"><operator pos:start="187:17" pos:end="187:17">*</operator><name pos:start="187:18" pos:end="187:24">samples</name><operator pos:start="187:25" pos:end="187:26">++</operator> <operator pos:start="187:28" pos:end="187:28">=</operator> <name pos:start="187:30" pos:end="187:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:27"><expr pos:start="189:17" pos:end="189:26"><name pos:start="189:17" pos:end="189:24">out_size</name><operator pos:start="189:25" pos:end="189:26">--</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <return pos:start="199:5" pos:end="199:20">return <expr pos:start="199:12" pos:end="199:19"><name pos:start="199:12" pos:end="199:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
