<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5998.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:44">latm_decode_audio_specific_config</name><parameter_list pos:start="1:45" pos:end="3:75">(<parameter pos:start="1:46" pos:end="1:72"><decl pos:start="1:46" pos:end="1:72"><type pos:start="1:46" pos:end="1:72"><name pos:start="1:46" pos:end="1:63"><name pos:start="1:46" pos:end="1:51">struct</name> <name pos:start="1:53" pos:end="1:63">LATMContext</name></name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:72">latmctx</name></decl></parameter>,

                                             <parameter pos:start="3:46" pos:end="3:62"><decl pos:start="3:46" pos:end="3:62"><type pos:start="3:46" pos:end="3:62"><name pos:start="3:46" pos:end="3:58">GetBitContext</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:62">gb</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:74"><decl pos:start="3:65" pos:end="3:74"><type pos:start="3:65" pos:end="3:74"><name pos:start="3:65" pos:end="3:67">int</name></type> <name pos:start="3:69" pos:end="3:74">asclen</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="101:1">{<block_content pos:start="7:5" pos:end="99:25">

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">AACContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">ac</name>        <init pos:start="7:27" pos:end="7:45">= <expr pos:start="7:29" pos:end="7:45"><operator pos:start="7:29" pos:end="7:29">&amp;</operator><name pos:start="7:30" pos:end="7:45"><name pos:start="7:30" pos:end="7:36">latmctx</name><operator pos:start="7:37" pos:end="7:38">-&gt;</operator><name pos:start="7:39" pos:end="7:45">aac_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">AVCodecContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:25">avctx</name> <init pos:start="9:27" pos:end="9:37">= <expr pos:start="9:29" pos:end="9:37"><name pos:start="9:29" pos:end="9:37"><name pos:start="9:29" pos:end="9:30">ac</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:37">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:20">MPEG4AudioConfig</name></type> <name pos:start="11:22" pos:end="11:25">m4ac</name> <init pos:start="11:27" pos:end="11:31">= <expr pos:start="11:29" pos:end="11:31"><block pos:start="11:29" pos:end="11:31">{<expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:24">config_start_bit</name>  <init pos:start="13:27" pos:end="13:46">= <expr pos:start="13:29" pos:end="13:46"><call pos:start="13:29" pos:end="13:46"><name pos:start="13:29" pos:end="13:42">get_bits_count</name><argument_list pos:start="13:43" pos:end="13:46">(<argument pos:start="13:44" pos:end="13:45"><expr pos:start="13:44" pos:end="13:45"><name pos:start="13:44" pos:end="13:45">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:22">sync_extension</name>    <init pos:start="15:27" pos:end="15:29">= <expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:21">bits_consumed</name></decl>, <decl pos:start="17:24" pos:end="17:28"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:24" pos:end="17:28">esize</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="29:43"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:15">(<expr pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:14">asclen</name></expr>)</condition> <block pos:start="21:17" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:58">

        <expr_stmt pos:start="23:9" pos:end="23:27"><expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:22">sync_extension</name> <operator pos:start="23:24" pos:end="23:24">=</operator> <literal type="number" pos:start="23:26" pos:end="23:26">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:58"><expr pos:start="25:9" pos:end="25:57"><name pos:start="25:9" pos:end="25:14">asclen</name>         <operator pos:start="25:24" pos:end="25:24">=</operator> <call pos:start="25:26" pos:end="25:57"><name pos:start="25:26" pos:end="25:30">FFMIN</name><argument_list pos:start="25:31" pos:end="25:57">(<argument pos:start="25:32" pos:end="25:37"><expr pos:start="25:32" pos:end="25:37"><name pos:start="25:32" pos:end="25:37">asclen</name></expr></argument>, <argument pos:start="25:40" pos:end="25:56"><expr pos:start="25:40" pos:end="25:56"><call pos:start="25:40" pos:end="25:56"><name pos:start="25:40" pos:end="25:52">get_bits_left</name><argument_list pos:start="25:53" pos:end="25:56">(<argument pos:start="25:54" pos:end="25:55"><expr pos:start="25:54" pos:end="25:55"><name pos:start="25:54" pos:end="25:55">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="29:43">else<block type="pseudo" pos:start="29:9" pos:end="29:43"><block_content pos:start="29:9" pos:end="29:43">

        <expr_stmt pos:start="29:9" pos:end="29:43"><expr pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:14">asclen</name>         <operator pos:start="29:24" pos:end="29:24">=</operator> <call pos:start="29:26" pos:end="29:42"><name pos:start="29:26" pos:end="29:38">get_bits_left</name><argument_list pos:start="29:39" pos:end="29:42">(<argument pos:start="29:40" pos:end="29:41"><expr pos:start="29:40" pos:end="29:41"><name pos:start="29:40" pos:end="29:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="33:5" pos:end="40:5"><if pos:start="33:5" pos:end="40:5">if <condition pos:start="33:8" pos:end="33:29">(<expr pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:24">config_start_bit</name> <operator pos:start="33:26" pos:end="33:26">%</operator> <literal type="number" pos:start="33:28" pos:end="33:28">8</literal></expr>)</condition> <block pos:start="33:31" pos:end="40:5">{<block_content pos:start="35:9" pos:end="37:64">

        <expr_stmt pos:start="35:9" pos:end="37:64"><expr pos:start="35:9" pos:end="37:63"><call pos:start="35:9" pos:end="37:63"><name pos:start="35:9" pos:end="35:30">av_log_missing_feature</name><argument_list pos:start="35:31" pos:end="37:63">(<argument pos:start="35:32" pos:end="35:53"><expr pos:start="35:32" pos:end="35:53"><name pos:start="35:32" pos:end="35:53"><name pos:start="35:32" pos:end="35:38">latmctx</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:47">aac_ctx</name><operator pos:start="35:48" pos:end="35:48">.</operator><name pos:start="35:49" pos:end="35:53">avctx</name></name></expr></argument>, <argument pos:start="35:56" pos:end="37:59"><expr pos:start="35:56" pos:end="37:59"><literal type="string" pos:start="35:56" pos:end="35:72">"audio specific "</literal>

                               <literal type="string" pos:start="37:32" pos:end="37:59">"config not byte aligned.\n"</literal></expr></argument>, <argument pos:start="37:62" pos:end="37:62"><expr pos:start="37:62" pos:end="37:62"><literal type="number" pos:start="37:62" pos:end="37:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="44:5" pos:end="48:65"><expr pos:start="44:5" pos:end="48:64"><name pos:start="44:5" pos:end="44:17">bits_consumed</name> <operator pos:start="44:19" pos:end="44:19">=</operator> <call pos:start="44:21" pos:end="48:64"><name pos:start="44:21" pos:end="44:48">decode_audio_specific_config</name><argument_list pos:start="44:49" pos:end="48:64">(<argument pos:start="44:50" pos:end="44:53"><expr pos:start="44:50" pos:end="44:53"><name pos:start="44:50" pos:end="44:53">NULL</name></expr></argument>, <argument pos:start="44:56" pos:end="44:60"><expr pos:start="44:56" pos:end="44:60"><name pos:start="44:56" pos:end="44:60">avctx</name></expr></argument>, <argument pos:start="44:63" pos:end="44:67"><expr pos:start="44:63" pos:end="44:67"><operator pos:start="44:63" pos:end="44:63">&amp;</operator><name pos:start="44:64" pos:end="44:67">m4ac</name></expr></argument>,

                                         <argument pos:start="46:42" pos:end="46:76"><expr pos:start="46:42" pos:end="46:76"><name pos:start="46:42" pos:end="46:51"><name pos:start="46:42" pos:end="46:43">gb</name><operator pos:start="46:44" pos:end="46:45">-&gt;</operator><name pos:start="46:46" pos:end="46:51">buffer</name></name> <operator pos:start="46:53" pos:end="46:53">+</operator> <operator pos:start="46:55" pos:end="46:55">(</operator><name pos:start="46:56" pos:end="46:71">config_start_bit</name> <operator pos:start="46:73" pos:end="46:73">/</operator> <literal type="number" pos:start="46:75" pos:end="46:75">8</literal><operator pos:start="46:76" pos:end="46:76">)</operator></expr></argument>,

                                         <argument pos:start="48:42" pos:end="48:47"><expr pos:start="48:42" pos:end="48:47"><name pos:start="48:42" pos:end="48:47">asclen</name></expr></argument>, <argument pos:start="48:50" pos:end="48:63"><expr pos:start="48:50" pos:end="48:63"><name pos:start="48:50" pos:end="48:63">sync_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="52:5" pos:end="93:5"><if pos:start="52:5" pos:end="93:5">if <condition pos:start="52:8" pos:end="52:26">(<expr pos:start="52:9" pos:end="52:25"><name pos:start="52:9" pos:end="52:21">bits_consumed</name> <operator pos:start="52:23" pos:end="52:23">&lt;</operator> <literal type="number" pos:start="52:25" pos:end="52:25">0</literal></expr>)</condition><block type="pseudo" pos:start="57:5" pos:end="93:5"><block_content pos:start="57:5" pos:end="93:5">




    <if_stmt pos:start="57:5" pos:end="93:5"><if pos:start="57:5" pos:end="93:5">if <condition pos:start="57:8" pos:end="59:49">(<expr pos:start="57:9" pos:end="59:48"><name pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:10">ac</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:16">m4ac</name><operator pos:start="57:17" pos:end="57:17">.</operator><name pos:start="57:18" pos:end="57:28">sample_rate</name></name> <operator pos:start="57:30" pos:end="57:31">!=</operator> <name pos:start="57:33" pos:end="57:48"><name pos:start="57:33" pos:end="57:36">m4ac</name><operator pos:start="57:37" pos:end="57:37">.</operator><name pos:start="57:38" pos:end="57:48">sample_rate</name></name> <operator pos:start="57:50" pos:end="57:51">||</operator>

        <name pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:10">ac</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:16">m4ac</name><operator pos:start="59:17" pos:end="59:17">.</operator><name pos:start="59:18" pos:end="59:28">chan_config</name></name> <operator pos:start="59:30" pos:end="59:31">!=</operator> <name pos:start="59:33" pos:end="59:48"><name pos:start="59:33" pos:end="59:36">m4ac</name><operator pos:start="59:37" pos:end="59:37">.</operator><name pos:start="59:38" pos:end="59:48">chan_config</name></name></expr>)</condition> <block pos:start="59:51" pos:end="93:5">{<block_content pos:start="63:9" pos:end="91:72">



        <expr_stmt pos:start="63:9" pos:end="63:61"><expr pos:start="63:9" pos:end="63:60"><call pos:start="63:9" pos:end="63:60"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="63:60">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><name pos:start="63:16" pos:end="63:20">avctx</name></expr></argument>, <argument pos:start="63:23" pos:end="63:33"><expr pos:start="63:23" pos:end="63:33"><name pos:start="63:23" pos:end="63:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="63:36" pos:end="63:59"><expr pos:start="63:36" pos:end="63:59"><literal type="string" pos:start="63:36" pos:end="63:59">"audio config changed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:33"><expr pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:15">latmctx</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:28">initialized</name></name> <operator pos:start="65:30" pos:end="65:30">=</operator> <literal type="number" pos:start="65:32" pos:end="65:32">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:38"><expr pos:start="69:9" pos:end="69:37"><name pos:start="69:9" pos:end="69:13">esize</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <operator pos:start="69:17" pos:end="69:17">(</operator><name pos:start="69:18" pos:end="69:30">bits_consumed</name><operator pos:start="69:31" pos:end="69:31">+</operator><literal type="number" pos:start="69:32" pos:end="69:32">7</literal><operator pos:start="69:33" pos:end="69:33">)</operator> <operator pos:start="69:35" pos:end="69:35">/</operator> <literal type="number" pos:start="69:37" pos:end="69:37">8</literal></expr>;</expr_stmt>



        <if_stmt pos:start="73:9" pos:end="83:9"><if pos:start="73:9" pos:end="83:9">if <condition pos:start="73:12" pos:end="73:42">(<expr pos:start="73:13" pos:end="73:41"><name pos:start="73:13" pos:end="73:33"><name pos:start="73:13" pos:end="73:17">avctx</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:33">extradata_size</name></name> <operator pos:start="73:35" pos:end="73:35">&lt;</operator> <name pos:start="73:37" pos:end="73:41">esize</name></expr>)</condition> <block pos:start="73:44" pos:end="83:9">{<block_content pos:start="75:13" pos:end="81:39">

            <expr_stmt pos:start="75:13" pos:end="75:38"><expr pos:start="75:13" pos:end="75:37"><call pos:start="75:13" pos:end="75:37"><name pos:start="75:13" pos:end="75:19">av_free</name><argument_list pos:start="75:20" pos:end="75:37">(<argument pos:start="75:21" pos:end="75:36"><expr pos:start="75:21" pos:end="75:36"><name pos:start="75:21" pos:end="75:36"><name pos:start="75:21" pos:end="75:25">avctx</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:36">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:79"><expr pos:start="77:13" pos:end="77:78"><name pos:start="77:13" pos:end="77:28"><name pos:start="77:13" pos:end="77:17">avctx</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:28">extradata</name></name> <operator pos:start="77:30" pos:end="77:30">=</operator> <call pos:start="77:32" pos:end="77:78"><name pos:start="77:32" pos:end="77:40">av_malloc</name><argument_list pos:start="77:41" pos:end="77:78">(<argument pos:start="77:42" pos:end="77:77"><expr pos:start="77:42" pos:end="77:77"><name pos:start="77:42" pos:end="77:46">esize</name> <operator pos:start="77:48" pos:end="77:48">+</operator> <name pos:start="77:50" pos:end="77:77">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="81:39"><if pos:start="79:13" pos:end="81:39">if <condition pos:start="79:16" pos:end="79:34">(<expr pos:start="79:17" pos:end="79:33"><operator pos:start="79:17" pos:end="79:17">!</operator><name pos:start="79:18" pos:end="79:33"><name pos:start="79:18" pos:end="79:22">avctx</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:33">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="81:17" pos:end="81:39"><block_content pos:start="81:17" pos:end="81:39">

                <return pos:start="81:17" pos:end="81:39">return <expr pos:start="81:24" pos:end="81:38"><call pos:start="81:24" pos:end="81:38"><name pos:start="81:24" pos:end="81:30">AVERROR</name><argument_list pos:start="81:31" pos:end="81:38">(<argument pos:start="81:32" pos:end="81:37"><expr pos:start="81:32" pos:end="81:37"><name pos:start="81:32" pos:end="81:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:38"><expr pos:start="87:9" pos:end="87:37"><name pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:13">avctx</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:29">extradata_size</name></name> <operator pos:start="87:31" pos:end="87:31">=</operator> <name pos:start="87:33" pos:end="87:37">esize</name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:75"><expr pos:start="89:9" pos:end="89:74"><call pos:start="89:9" pos:end="89:74"><name pos:start="89:9" pos:end="89:14">memcpy</name><argument_list pos:start="89:15" pos:end="89:74">(<argument pos:start="89:16" pos:end="89:31"><expr pos:start="89:16" pos:end="89:31"><name pos:start="89:16" pos:end="89:31"><name pos:start="89:16" pos:end="89:20">avctx</name><operator pos:start="89:21" pos:end="89:22">-&gt;</operator><name pos:start="89:23" pos:end="89:31">extradata</name></name></expr></argument>, <argument pos:start="89:34" pos:end="89:66"><expr pos:start="89:34" pos:end="89:66"><name pos:start="89:34" pos:end="89:43"><name pos:start="89:34" pos:end="89:35">gb</name><operator pos:start="89:36" pos:end="89:37">-&gt;</operator><name pos:start="89:38" pos:end="89:43">buffer</name></name> <operator pos:start="89:45" pos:end="89:45">+</operator> <operator pos:start="89:47" pos:end="89:47">(</operator><name pos:start="89:48" pos:end="89:63">config_start_bit</name><operator pos:start="89:64" pos:end="89:64">/</operator><literal type="number" pos:start="89:65" pos:end="89:65">8</literal><operator pos:start="89:66" pos:end="89:66">)</operator></expr></argument>, <argument pos:start="89:69" pos:end="89:73"><expr pos:start="89:69" pos:end="89:73"><name pos:start="89:69" pos:end="89:73">esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:72"><expr pos:start="91:9" pos:end="91:71"><call pos:start="91:9" pos:end="91:71"><name pos:start="91:9" pos:end="91:14">memset</name><argument_list pos:start="91:15" pos:end="91:71">(<argument pos:start="91:16" pos:end="91:37"><expr pos:start="91:16" pos:end="91:37"><name pos:start="91:16" pos:end="91:31"><name pos:start="91:16" pos:end="91:20">avctx</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:31">extradata</name></name><operator pos:start="91:32" pos:end="91:32">+</operator><name pos:start="91:33" pos:end="91:37">esize</name></expr></argument>, <argument pos:start="91:40" pos:end="91:40"><expr pos:start="91:40" pos:end="91:40"><literal type="number" pos:start="91:40" pos:end="91:40">0</literal></expr></argument>, <argument pos:start="91:43" pos:end="91:70"><expr pos:start="91:43" pos:end="91:70"><name pos:start="91:43" pos:end="91:70">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:38"><expr pos:start="95:5" pos:end="95:37"><call pos:start="95:5" pos:end="95:37"><name pos:start="95:5" pos:end="95:18">skip_bits_long</name><argument_list pos:start="95:19" pos:end="95:37">(<argument pos:start="95:20" pos:end="95:21"><expr pos:start="95:20" pos:end="95:21"><name pos:start="95:20" pos:end="95:21">gb</name></expr></argument>, <argument pos:start="95:24" pos:end="95:36"><expr pos:start="95:24" pos:end="95:36"><name pos:start="95:24" pos:end="95:36">bits_consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="99:5" pos:end="99:25">return <expr pos:start="99:12" pos:end="99:24"><name pos:start="99:12" pos:end="99:24">bits_consumed</name></expr>;</return>

</block_content>}</block></function></unit>
