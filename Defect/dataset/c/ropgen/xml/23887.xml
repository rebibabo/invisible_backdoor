<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23887.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">openpic_gbl_write</name><parameter_list pos:start="1:30" pos:end="3:43">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:55"><decl pos:start="1:45" pos:end="1:55"><type pos:start="1:45" pos:end="1:55"><name pos:start="1:45" pos:end="1:50">hwaddr</name></type> <name pos:start="1:52" pos:end="1:55">addr</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:65">uint64_t</name></type> <name pos:start="1:67" pos:end="1:69">val</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:42"><decl pos:start="3:31" pos:end="3:42"><type pos:start="3:31" pos:end="3:42"><name pos:start="3:31" pos:end="3:38">unsigned</name></type> <name pos:start="3:40" pos:end="3:42">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:1">{<block_content pos:start="7:5" pos:end="123:5">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">OpenPICState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">opp</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><name pos:start="7:25" pos:end="7:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">IRQ_dst_t</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:18">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">idx</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:74"><expr pos:start="15:5" pos:end="15:73"><call pos:start="15:5" pos:end="15:73"><name pos:start="15:5" pos:end="15:11">DPRINTF</name><argument_list pos:start="15:12" pos:end="15:73">(<argument pos:start="15:13" pos:end="15:51"><expr pos:start="15:13" pos:end="15:51"><literal type="string" pos:start="15:13" pos:end="15:23">"%s: addr "</literal> <name pos:start="15:25" pos:end="15:38">TARGET_FMT_plx</name> <literal type="string" pos:start="15:40" pos:end="15:51">" &lt;= %08x\n"</literal></expr></argument>, <argument pos:start="15:54" pos:end="15:61"><expr pos:start="15:54" pos:end="15:61"><name pos:start="15:54" pos:end="15:61">__func__</name></expr></argument>, <argument pos:start="15:64" pos:end="15:67"><expr pos:start="15:64" pos:end="15:67"><name pos:start="15:64" pos:end="15:67">addr</name></expr></argument>, <argument pos:start="15:70" pos:end="15:72"><expr pos:start="15:70" pos:end="15:72"><name pos:start="15:70" pos:end="15:72">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="19:15"><if pos:start="17:5" pos:end="19:15">if <condition pos:start="17:8" pos:end="17:19">(<expr pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:12">addr</name> <operator pos:start="17:14" pos:end="17:14">&amp;</operator> <literal type="number" pos:start="17:16" pos:end="17:18">0xF</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:15"><block_content pos:start="19:9" pos:end="19:15">

        <return pos:start="19:9" pos:end="19:15">return;</return></block_content></block></if></if_stmt>

    <switch pos:start="21:5" pos:end="123:5">switch <condition pos:start="21:12" pos:end="21:17">(<expr pos:start="21:13" pos:end="21:16"><name pos:start="21:13" pos:end="21:16">addr</name></expr>)</condition> <block pos:start="21:19" pos:end="123:5">{<block_content pos:start="23:5" pos:end="121:14">

    <case pos:start="23:5" pos:end="23:14">case <expr pos:start="23:10" pos:end="23:13"><literal type="number" pos:start="23:10" pos:end="23:13">0x00</literal></expr>:</case> <comment type="block" pos:start="23:16" pos:end="23:64">/* Block Revision Register1 (BRR1) is Readonly */</comment>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:14">case <expr pos:start="27:10" pos:end="27:13"><literal type="number" pos:start="27:10" pos:end="27:13">0x40</literal></expr>:</case>

    <case pos:start="29:5" pos:end="29:14">case <expr pos:start="29:10" pos:end="29:13"><literal type="number" pos:start="29:10" pos:end="29:13">0x50</literal></expr>:</case>

    <case pos:start="31:5" pos:end="31:14">case <expr pos:start="31:10" pos:end="31:13"><literal type="number" pos:start="31:10" pos:end="31:13">0x60</literal></expr>:</case>

    <case pos:start="33:5" pos:end="33:14">case <expr pos:start="33:10" pos:end="33:13"><literal type="number" pos:start="33:10" pos:end="33:13">0x70</literal></expr>:</case>

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0x80</literal></expr>:</case>

    <case pos:start="37:5" pos:end="37:14">case <expr pos:start="37:10" pos:end="37:13"><literal type="number" pos:start="37:10" pos:end="37:13">0x90</literal></expr>:</case>

    <case pos:start="39:5" pos:end="39:14">case <expr pos:start="39:10" pos:end="39:13"><literal type="number" pos:start="39:10" pos:end="39:13">0xA0</literal></expr>:</case>

    <case pos:start="41:5" pos:end="41:14">case <expr pos:start="41:10" pos:end="41:13"><literal type="number" pos:start="41:10" pos:end="41:13">0xB0</literal></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:70"><expr pos:start="43:9" pos:end="43:69"><call pos:start="43:9" pos:end="43:69"><name pos:start="43:9" pos:end="43:34">openpic_cpu_write_internal</name><argument_list pos:start="43:35" pos:end="43:69">(<argument pos:start="43:36" pos:end="43:38"><expr pos:start="43:36" pos:end="43:38"><name pos:start="43:36" pos:end="43:38">opp</name></expr></argument>, <argument pos:start="43:41" pos:end="43:44"><expr pos:start="43:41" pos:end="43:44"><name pos:start="43:41" pos:end="43:44">addr</name></expr></argument>, <argument pos:start="43:47" pos:end="43:49"><expr pos:start="43:47" pos:end="43:49"><name pos:start="43:47" pos:end="43:49">val</name></expr></argument>, <argument pos:start="43:52" pos:end="43:68"><expr pos:start="43:52" pos:end="43:68"><call pos:start="43:52" pos:end="43:68"><name pos:start="43:52" pos:end="43:66">get_current_cpu</name><argument_list pos:start="43:67" pos:end="43:68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:16">case <expr pos:start="47:10" pos:end="47:15"><literal type="number" pos:start="47:10" pos:end="47:15">0x1000</literal></expr>:</case> <comment type="block" pos:start="47:18" pos:end="47:27">/* FREP */</comment>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:16">case <expr pos:start="51:10" pos:end="51:15"><literal type="number" pos:start="51:10" pos:end="51:15">0x1020</literal></expr>:</case> <comment type="block" pos:start="51:18" pos:end="51:27">/* GLBC */</comment>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:29">(<expr pos:start="53:13" pos:end="53:28"><name pos:start="53:13" pos:end="53:15">val</name> <operator pos:start="53:17" pos:end="53:17">&amp;</operator> <name pos:start="53:19" pos:end="53:28">GLBC_RESET</name></expr>)</condition> <block pos:start="53:31" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:45">

            <expr_stmt pos:start="55:13" pos:end="55:45"><expr pos:start="55:13" pos:end="55:44"><call pos:start="55:13" pos:end="55:44"><name pos:start="55:13" pos:end="55:25">openpic_reset</name><argument_list pos:start="55:26" pos:end="55:44">(<argument pos:start="55:27" pos:end="55:43"><expr pos:start="55:27" pos:end="55:43"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:43"><name pos:start="55:28" pos:end="55:30">opp</name><operator pos:start="55:31" pos:end="55:32">-&gt;</operator><name pos:start="55:33" pos:end="55:38">busdev</name><operator pos:start="55:39" pos:end="55:39">.</operator><name pos:start="55:40" pos:end="55:43">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:16">case <expr pos:start="61:10" pos:end="61:15"><literal type="number" pos:start="61:10" pos:end="61:15">0x1080</literal></expr>:</case> <comment type="block" pos:start="61:18" pos:end="61:27">/* VENI */</comment>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:16">case <expr pos:start="65:10" pos:end="65:15"><literal type="number" pos:start="65:10" pos:end="65:15">0x1090</literal></expr>:</case> <comment type="block" pos:start="65:18" pos:end="65:27">/* PINT */</comment>

        <for pos:start="67:9" pos:end="87:9">for <control pos:start="67:13" pos:end="67:48">(<init pos:start="67:14" pos:end="67:21"><expr pos:start="67:14" pos:end="67:20"><name pos:start="67:14" pos:end="67:16">idx</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <literal type="number" pos:start="67:20" pos:end="67:20">0</literal></expr>;</init> <condition pos:start="67:23" pos:end="67:41"><expr pos:start="67:23" pos:end="67:40"><name pos:start="67:23" pos:end="67:25">idx</name> <operator pos:start="67:27" pos:end="67:27">&lt;</operator> <name pos:start="67:29" pos:end="67:40"><name pos:start="67:29" pos:end="67:31">opp</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:40">nb_cpus</name></name></expr>;</condition> <incr pos:start="67:43" pos:end="67:47"><expr pos:start="67:43" pos:end="67:47"><name pos:start="67:43" pos:end="67:45">idx</name><operator pos:start="67:46" pos:end="67:47">++</operator></expr></incr>)</control> <block pos:start="67:50" pos:end="87:9">{<block_content pos:start="69:13" pos:end="85:13">

            <if_stmt pos:start="69:13" pos:end="85:13"><if pos:start="69:13" pos:end="77:13">if <condition pos:start="69:16" pos:end="69:64">(<expr pos:start="69:17" pos:end="69:63"><operator pos:start="69:17" pos:end="69:17">(</operator><name pos:start="69:18" pos:end="69:20">val</name> <operator pos:start="69:22" pos:end="69:22">&amp;</operator> <operator pos:start="69:24" pos:end="69:24">(</operator><literal type="number" pos:start="69:25" pos:end="69:25">1</literal> <operator pos:start="69:27" pos:end="69:28">&lt;&lt;</operator> <name pos:start="69:30" pos:end="69:32">idx</name><operator pos:start="69:33" pos:end="69:33">)</operator><operator pos:start="69:34" pos:end="69:34">)</operator> <operator pos:start="69:36" pos:end="69:37">&amp;&amp;</operator> <operator pos:start="69:39" pos:end="69:39">!</operator><operator pos:start="69:40" pos:end="69:40">(</operator><name pos:start="69:41" pos:end="69:49"><name pos:start="69:41" pos:end="69:43">opp</name><operator pos:start="69:44" pos:end="69:45">-&gt;</operator><name pos:start="69:46" pos:end="69:49">pint</name></name> <operator pos:start="69:51" pos:end="69:51">&amp;</operator> <operator pos:start="69:53" pos:end="69:53">(</operator><literal type="number" pos:start="69:54" pos:end="69:54">1</literal> <operator pos:start="69:56" pos:end="69:57">&lt;&lt;</operator> <name pos:start="69:59" pos:end="69:61">idx</name><operator pos:start="69:62" pos:end="69:62">)</operator><operator pos:start="69:63" pos:end="69:63">)</operator></expr>)</condition> <block pos:start="69:66" pos:end="77:13">{<block_content pos:start="71:17" pos:end="75:64">

                <expr_stmt pos:start="71:17" pos:end="71:72"><expr pos:start="71:17" pos:end="71:71"><call pos:start="71:17" pos:end="71:71"><name pos:start="71:17" pos:end="71:23">DPRINTF</name><argument_list pos:start="71:24" pos:end="71:71">(<argument pos:start="71:25" pos:end="71:65"><expr pos:start="71:25" pos:end="71:65"><literal type="string" pos:start="71:25" pos:end="71:65">"Raise OpenPIC RESET output for CPU %d\n"</literal></expr></argument>, <argument pos:start="71:68" pos:end="71:70"><expr pos:start="71:68" pos:end="71:70"><name pos:start="71:68" pos:end="71:70">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:37"><expr pos:start="73:17" pos:end="73:36"><name pos:start="73:17" pos:end="73:19">dst</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <operator pos:start="73:23" pos:end="73:23">&amp;</operator><name pos:start="73:24" pos:end="73:36"><name pos:start="73:24" pos:end="73:26">opp</name><operator pos:start="73:27" pos:end="73:28">-&gt;</operator><name pos:start="73:29" pos:end="73:31">dst</name><index pos:start="73:32" pos:end="73:36">[<expr pos:start="73:33" pos:end="73:35"><name pos:start="73:33" pos:end="73:35">idx</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:64"><expr pos:start="75:17" pos:end="75:63"><call pos:start="75:17" pos:end="75:63"><name pos:start="75:17" pos:end="75:30">qemu_irq_raise</name><argument_list pos:start="75:31" pos:end="75:63">(<argument pos:start="75:32" pos:end="75:62"><expr pos:start="75:32" pos:end="75:62"><name pos:start="75:32" pos:end="75:62"><name pos:start="75:32" pos:end="75:34">dst</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:40">irqs</name><index pos:start="75:41" pos:end="75:62">[<expr pos:start="75:42" pos:end="75:61"><name pos:start="75:42" pos:end="75:61">OPENPIC_OUTPUT_RESET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="77:15" pos:end="85:13">else if <condition pos:start="77:23" pos:end="77:71">(<expr pos:start="77:24" pos:end="77:70"><operator pos:start="77:24" pos:end="77:24">!</operator><operator pos:start="77:25" pos:end="77:25">(</operator><name pos:start="77:26" pos:end="77:28">val</name> <operator pos:start="77:30" pos:end="77:30">&amp;</operator> <operator pos:start="77:32" pos:end="77:32">(</operator><literal type="number" pos:start="77:33" pos:end="77:33">1</literal> <operator pos:start="77:35" pos:end="77:36">&lt;&lt;</operator> <name pos:start="77:38" pos:end="77:40">idx</name><operator pos:start="77:41" pos:end="77:41">)</operator><operator pos:start="77:42" pos:end="77:42">)</operator> <operator pos:start="77:44" pos:end="77:45">&amp;&amp;</operator> <operator pos:start="77:47" pos:end="77:47">(</operator><name pos:start="77:48" pos:end="77:56"><name pos:start="77:48" pos:end="77:50">opp</name><operator pos:start="77:51" pos:end="77:52">-&gt;</operator><name pos:start="77:53" pos:end="77:56">pint</name></name> <operator pos:start="77:58" pos:end="77:58">&amp;</operator> <operator pos:start="77:60" pos:end="77:60">(</operator><literal type="number" pos:start="77:61" pos:end="77:61">1</literal> <operator pos:start="77:63" pos:end="77:64">&lt;&lt;</operator> <name pos:start="77:66" pos:end="77:68">idx</name><operator pos:start="77:69" pos:end="77:69">)</operator><operator pos:start="77:70" pos:end="77:70">)</operator></expr>)</condition> <block pos:start="77:73" pos:end="85:13">{<block_content pos:start="79:17" pos:end="83:64">

                <expr_stmt pos:start="79:17" pos:end="79:72"><expr pos:start="79:17" pos:end="79:71"><call pos:start="79:17" pos:end="79:71"><name pos:start="79:17" pos:end="79:23">DPRINTF</name><argument_list pos:start="79:24" pos:end="79:71">(<argument pos:start="79:25" pos:end="79:65"><expr pos:start="79:25" pos:end="79:65"><literal type="string" pos:start="79:25" pos:end="79:65">"Lower OpenPIC RESET output for CPU %d\n"</literal></expr></argument>, <argument pos:start="79:68" pos:end="79:70"><expr pos:start="79:68" pos:end="79:70"><name pos:start="79:68" pos:end="79:70">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:37"><expr pos:start="81:17" pos:end="81:36"><name pos:start="81:17" pos:end="81:19">dst</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <operator pos:start="81:23" pos:end="81:23">&amp;</operator><name pos:start="81:24" pos:end="81:36"><name pos:start="81:24" pos:end="81:26">opp</name><operator pos:start="81:27" pos:end="81:28">-&gt;</operator><name pos:start="81:29" pos:end="81:31">dst</name><index pos:start="81:32" pos:end="81:36">[<expr pos:start="81:33" pos:end="81:35"><name pos:start="81:33" pos:end="81:35">idx</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:64"><expr pos:start="83:17" pos:end="83:63"><call pos:start="83:17" pos:end="83:63"><name pos:start="83:17" pos:end="83:30">qemu_irq_lower</name><argument_list pos:start="83:31" pos:end="83:63">(<argument pos:start="83:32" pos:end="83:62"><expr pos:start="83:32" pos:end="83:62"><name pos:start="83:32" pos:end="83:62"><name pos:start="83:32" pos:end="83:34">dst</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:40">irqs</name><index pos:start="83:41" pos:end="83:62">[<expr pos:start="83:42" pos:end="83:61"><name pos:start="83:42" pos:end="83:61">OPENPIC_OUTPUT_RESET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="89:9" pos:end="89:24"><expr pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:11">opp</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:17">pint</name></name> <operator pos:start="89:19" pos:end="89:19">=</operator> <name pos:start="89:21" pos:end="89:23">val</name></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:16">case <expr pos:start="93:10" pos:end="93:15"><literal type="number" pos:start="93:10" pos:end="93:15">0x10A0</literal></expr>:</case> <comment type="block" pos:start="93:18" pos:end="93:31">/* IPI_IPVP */</comment>

    <case pos:start="95:5" pos:end="95:16">case <expr pos:start="95:10" pos:end="95:15"><literal type="number" pos:start="95:10" pos:end="95:15">0x10B0</literal></expr>:</case>

    <case pos:start="97:5" pos:end="97:16">case <expr pos:start="97:10" pos:end="97:15"><literal type="number" pos:start="97:10" pos:end="97:15">0x10C0</literal></expr>:</case>

    <case pos:start="99:5" pos:end="99:16">case <expr pos:start="99:10" pos:end="99:15"><literal type="number" pos:start="99:10" pos:end="99:15">0x10D0</literal></expr>:</case>

        <block pos:start="101:9" pos:end="109:9">{<block_content pos:start="103:13" pos:end="107:61">

            <decl_stmt pos:start="103:13" pos:end="103:20"><decl pos:start="103:13" pos:end="103:19"><type pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">int</name></type> <name pos:start="103:17" pos:end="103:19">idx</name></decl>;</decl_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:39"><expr pos:start="105:13" pos:end="105:38"><name pos:start="105:13" pos:end="105:15">idx</name> <operator pos:start="105:17" pos:end="105:17">=</operator> <operator pos:start="105:19" pos:end="105:19">(</operator><name pos:start="105:20" pos:end="105:23">addr</name> <operator pos:start="105:25" pos:end="105:25">-</operator> <literal type="number" pos:start="105:27" pos:end="105:32">0x10A0</literal><operator pos:start="105:33" pos:end="105:33">)</operator> <operator pos:start="105:35" pos:end="105:36">&gt;&gt;</operator> <literal type="number" pos:start="105:38" pos:end="105:38">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:61"><expr pos:start="107:13" pos:end="107:60"><call pos:start="107:13" pos:end="107:60"><name pos:start="107:13" pos:end="107:29">write_IRQreg_ipvp</name><argument_list pos:start="107:30" pos:end="107:60">(<argument pos:start="107:31" pos:end="107:33"><expr pos:start="107:31" pos:end="107:33"><name pos:start="107:31" pos:end="107:33">opp</name></expr></argument>, <argument pos:start="107:36" pos:end="107:54"><expr pos:start="107:36" pos:end="107:54"><name pos:start="107:36" pos:end="107:48"><name pos:start="107:36" pos:end="107:38">opp</name><operator pos:start="107:39" pos:end="107:40">-&gt;</operator><name pos:start="107:41" pos:end="107:48">irq_ipi0</name></name> <operator pos:start="107:50" pos:end="107:50">+</operator> <name pos:start="107:52" pos:end="107:54">idx</name></expr></argument>, <argument pos:start="107:57" pos:end="107:59"><expr pos:start="107:57" pos:end="107:59"><name pos:start="107:57" pos:end="107:59">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="111:9" pos:end="111:14">break;</break>

    <case pos:start="113:5" pos:end="113:16">case <expr pos:start="113:10" pos:end="113:15"><literal type="number" pos:start="113:10" pos:end="113:15">0x10E0</literal></expr>:</case> <comment type="block" pos:start="113:18" pos:end="113:27">/* SPVE */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:43"><expr pos:start="115:9" pos:end="115:42"><name pos:start="115:9" pos:end="115:17"><name pos:start="115:9" pos:end="115:11">opp</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:17">spve</name></name> <operator pos:start="115:19" pos:end="115:19">=</operator> <name pos:start="115:21" pos:end="115:23">val</name> <operator pos:start="115:25" pos:end="115:25">&amp;</operator> <name pos:start="115:27" pos:end="115:42"><name pos:start="115:27" pos:end="115:29">opp</name><operator pos:start="115:30" pos:end="115:31">-&gt;</operator><name pos:start="115:32" pos:end="115:42">vector_mask</name></name></expr>;</expr_stmt>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    <default pos:start="119:5" pos:end="119:12">default:</default>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
