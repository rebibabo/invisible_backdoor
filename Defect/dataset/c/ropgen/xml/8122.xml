<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8122.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">cbs_read_ue_golomb</name><parameter_list pos:start="1:30" pos:end="5:69">(<parameter pos:start="1:31" pos:end="1:56"><decl pos:start="1:31" pos:end="1:56"><type pos:start="1:31" pos:end="1:56"><name pos:start="1:31" pos:end="1:51">CodedBitstreamContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">ctx</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:78"><decl pos:start="1:59" pos:end="1:78"><type pos:start="1:59" pos:end="1:78"><name pos:start="1:59" pos:end="1:74">BitstreamContext</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:78">bc</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:46"><decl pos:start="3:31" pos:end="3:46"><type pos:start="3:31" pos:end="3:46"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:40">char</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">name</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:66"><decl pos:start="3:49" pos:end="3:66"><type pos:start="3:49" pos:end="3:66"><name pos:start="3:49" pos:end="3:56">uint32_t</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:66">write_to</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:48"><decl pos:start="5:31" pos:end="5:48"><type pos:start="5:31" pos:end="5:48"><name pos:start="5:31" pos:end="5:38">uint32_t</name></type> <name pos:start="5:40" pos:end="5:48">range_min</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:68"><decl pos:start="5:51" pos:end="5:68"><type pos:start="5:51" pos:end="5:68"><name pos:start="5:51" pos:end="5:58">uint32_t</name></type> <name pos:start="5:60" pos:end="5:68">range_max</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="99:1">{<block_content pos:start="9:5" pos:end="97:13">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">position</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="77:5"><if pos:start="15:5" pos:end="73:5">if <condition pos:start="15:8" pos:end="15:26">(<expr pos:start="15:9" pos:end="15:25"><name pos:start="15:9" pos:end="15:25"><name pos:start="15:9" pos:end="15:11">ctx</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:25">trace_enable</name></name></expr>)</condition> <block pos:start="15:28" pos:end="73:5">{<block_content pos:start="17:9" pos:end="71:70">

        <decl_stmt pos:start="17:9" pos:end="17:22"><decl pos:start="17:9" pos:end="17:21"><type pos:start="17:9" pos:end="17:12"><name pos:start="17:9" pos:end="17:12">char</name></type> <name pos:start="17:14" pos:end="17:21"><name pos:start="17:14" pos:end="17:17">bits</name><index pos:start="17:18" pos:end="17:21">[<expr pos:start="17:19" pos:end="17:20"><literal type="number" pos:start="17:19" pos:end="17:20">65</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:23"><decl pos:start="19:9" pos:end="19:22"><type pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:16">unsigned</name> <name pos:start="19:18" pos:end="19:20">int</name></type> <name pos:start="19:22" pos:end="19:22">k</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:17"><decl pos:start="21:9" pos:end="21:13"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:13">i</name></decl>, <decl pos:start="21:16" pos:end="21:16"><type ref="prev" pos:start="21:9" pos:end="21:11"/><name pos:start="21:16" pos:end="21:16">j</name></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:38"><expr pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:16">position</name> <operator pos:start="25:18" pos:end="25:18">=</operator> <call pos:start="25:20" pos:end="25:37"><name pos:start="25:20" pos:end="25:33">bitstream_tell</name><argument_list pos:start="25:34" pos:end="25:37">(<argument pos:start="25:35" pos:end="25:36"><expr pos:start="25:35" pos:end="25:36"><name pos:start="25:35" pos:end="25:36">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="29:9" pos:end="39:9">for <control pos:start="29:13" pos:end="29:32">(<init pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">i</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:27"><expr pos:start="29:21" pos:end="29:26"><name pos:start="29:21" pos:end="29:21">i</name> <operator pos:start="29:23" pos:end="29:23">&lt;</operator> <literal type="number" pos:start="29:25" pos:end="29:26">32</literal></expr>;</condition> <incr pos:start="29:29" pos:end="29:31"><expr pos:start="29:29" pos:end="29:31"><name pos:start="29:29" pos:end="29:29">i</name><operator pos:start="29:30" pos:end="29:31">++</operator></expr></incr>)</control> <block pos:start="29:34" pos:end="39:9">{<block_content pos:start="31:13" pos:end="37:22">

            <expr_stmt pos:start="31:13" pos:end="31:39"><expr pos:start="31:13" pos:end="31:38"><name pos:start="31:13" pos:end="31:13">k</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <call pos:start="31:17" pos:end="31:38"><name pos:start="31:17" pos:end="31:34">bitstream_read_bit</name><argument_list pos:start="31:35" pos:end="31:38">(<argument pos:start="31:36" pos:end="31:37"><expr pos:start="31:36" pos:end="31:37"><name pos:start="31:36" pos:end="31:37">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:36"><expr pos:start="33:13" pos:end="33:35"><name pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:16">bits</name><index pos:start="33:17" pos:end="33:19">[<expr pos:start="33:18" pos:end="33:18"><name pos:start="33:18" pos:end="33:18">i</name></expr>]</index></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <ternary pos:start="33:23" pos:end="33:35"><condition pos:start="33:23" pos:end="33:25"><expr pos:start="33:23" pos:end="33:23"><name pos:start="33:23" pos:end="33:23">k</name></expr> ?</condition><then pos:start="33:27" pos:end="33:29"> <expr pos:start="33:27" pos:end="33:29"><literal type="char" pos:start="33:27" pos:end="33:29">'1'</literal></expr> </then><else pos:start="33:31" pos:end="33:35">: <expr pos:start="33:33" pos:end="33:35"><literal type="char" pos:start="33:33" pos:end="33:35">'0'</literal></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt pos:start="35:13" pos:end="37:22"><if pos:start="35:13" pos:end="37:22">if <condition pos:start="35:16" pos:end="35:18">(<expr pos:start="35:17" pos:end="35:17"><name pos:start="35:17" pos:end="35:17">k</name></expr>)</condition><block type="pseudo" pos:start="37:17" pos:end="37:22"><block_content pos:start="37:17" pos:end="37:22">

                <break pos:start="37:17" pos:end="37:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="41:9" pos:end="51:9"><if pos:start="41:9" pos:end="51:9">if <condition pos:start="41:12" pos:end="41:20">(<expr pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:13">i</name> <operator pos:start="41:15" pos:end="41:16">&gt;=</operator> <literal type="number" pos:start="41:18" pos:end="41:19">32</literal></expr>)</condition> <block pos:start="41:22" pos:end="51:9">{<block_content pos:start="43:13" pos:end="49:39">

            <expr_stmt pos:start="43:13" pos:end="47:51"><expr pos:start="43:13" pos:end="47:50"><call pos:start="43:13" pos:end="47:50"><name pos:start="43:13" pos:end="43:18">av_log</name><argument_list pos:start="43:19" pos:end="47:50">(<argument pos:start="43:20" pos:end="43:31"><expr pos:start="43:20" pos:end="43:31"><name pos:start="43:20" pos:end="43:31"><name pos:start="43:20" pos:end="43:22">ctx</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:31">log_ctx</name></name></expr></argument>, <argument pos:start="43:34" pos:end="43:45"><expr pos:start="43:34" pos:end="43:45"><name pos:start="43:34" pos:end="43:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:48" pos:end="47:43"><expr pos:start="43:48" pos:end="47:43"><literal type="string" pos:start="43:48" pos:end="43:67">"Invalid ue-golomb "</literal>

                   <literal type="string" pos:start="45:20" pos:end="45:50">"code found while reading %s: "</literal>

                   <literal type="string" pos:start="47:20" pos:end="47:43">"more than 31 zeroes.\n"</literal></expr></argument>, <argument pos:start="47:46" pos:end="47:49"><expr pos:start="47:46" pos:end="47:49"><name pos:start="47:46" pos:end="47:49">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:39">return <expr pos:start="49:20" pos:end="49:38"><name pos:start="49:20" pos:end="49:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:18"><expr pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:13">value</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</expr_stmt>

        <for pos:start="55:9" pos:end="63:9">for <control pos:start="55:13" pos:end="55:31">(<init pos:start="55:14" pos:end="55:19"><expr pos:start="55:14" pos:end="55:18"><name pos:start="55:14" pos:end="55:14">j</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>;</init> <condition pos:start="55:21" pos:end="55:26"><expr pos:start="55:21" pos:end="55:25"><name pos:start="55:21" pos:end="55:21">j</name> <operator pos:start="55:23" pos:end="55:23">&lt;</operator> <name pos:start="55:25" pos:end="55:25">i</name></expr>;</condition> <incr pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:28">j</name><operator pos:start="55:29" pos:end="55:30">++</operator></expr></incr>)</control> <block pos:start="55:33" pos:end="63:9">{<block_content pos:start="57:13" pos:end="61:35">

            <expr_stmt pos:start="57:13" pos:end="57:39"><expr pos:start="57:13" pos:end="57:38"><name pos:start="57:13" pos:end="57:13">k</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:38"><name pos:start="57:17" pos:end="57:34">bitstream_read_bit</name><argument_list pos:start="57:35" pos:end="57:38">(<argument pos:start="57:36" pos:end="57:37"><expr pos:start="57:36" pos:end="57:37"><name pos:start="57:36" pos:end="57:37">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:44"><expr pos:start="59:13" pos:end="59:43"><name pos:start="59:13" pos:end="59:27"><name pos:start="59:13" pos:end="59:16">bits</name><index pos:start="59:17" pos:end="59:27">[<expr pos:start="59:18" pos:end="59:26"><name pos:start="59:18" pos:end="59:18">i</name> <operator pos:start="59:20" pos:end="59:20">+</operator> <name pos:start="59:22" pos:end="59:22">j</name> <operator pos:start="59:24" pos:end="59:24">+</operator> <literal type="number" pos:start="59:26" pos:end="59:26">1</literal></expr>]</index></name> <operator pos:start="59:29" pos:end="59:29">=</operator> <ternary pos:start="59:31" pos:end="59:43"><condition pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:31"><name pos:start="59:31" pos:end="59:31">k</name></expr> ?</condition><then pos:start="59:35" pos:end="59:37"> <expr pos:start="59:35" pos:end="59:37"><literal type="char" pos:start="59:35" pos:end="59:37">'1'</literal></expr> </then><else pos:start="59:39" pos:end="59:43">: <expr pos:start="59:41" pos:end="59:43"><literal type="char" pos:start="59:41" pos:end="59:43">'0'</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:35"><expr pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:17">value</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:25">value</name> <operator pos:start="61:27" pos:end="61:28">&lt;&lt;</operator> <literal type="number" pos:start="61:30" pos:end="61:30">1</literal> <operator pos:start="61:32" pos:end="61:32">|</operator> <name pos:start="61:34" pos:end="61:34">k</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="65:9" pos:end="65:28"><expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:12">bits</name><index pos:start="65:13" pos:end="65:23">[<expr pos:start="65:14" pos:end="65:22"><name pos:start="65:14" pos:end="65:14">i</name> <operator pos:start="65:16" pos:end="65:16">+</operator> <name pos:start="65:18" pos:end="65:18">j</name> <operator pos:start="65:20" pos:end="65:20">+</operator> <literal type="number" pos:start="65:22" pos:end="65:22">1</literal></expr>]</index></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <literal type="number" pos:start="65:27" pos:end="65:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:16"><expr pos:start="67:9" pos:end="67:15"><operator pos:start="67:9" pos:end="67:10">--</operator><name pos:start="67:11" pos:end="67:15">value</name></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:70"><expr pos:start="71:9" pos:end="71:69"><call pos:start="71:9" pos:end="71:69"><name pos:start="71:9" pos:end="71:35">ff_cbs_trace_syntax_element</name><argument_list pos:start="71:36" pos:end="71:69">(<argument pos:start="71:37" pos:end="71:39"><expr pos:start="71:37" pos:end="71:39"><name pos:start="71:37" pos:end="71:39">ctx</name></expr></argument>, <argument pos:start="71:42" pos:end="71:49"><expr pos:start="71:42" pos:end="71:49"><name pos:start="71:42" pos:end="71:49">position</name></expr></argument>, <argument pos:start="71:52" pos:end="71:55"><expr pos:start="71:52" pos:end="71:55"><name pos:start="71:52" pos:end="71:55">name</name></expr></argument>, <argument pos:start="71:58" pos:end="71:61"><expr pos:start="71:58" pos:end="71:61"><name pos:start="71:58" pos:end="71:61">bits</name></expr></argument>, <argument pos:start="71:64" pos:end="71:68"><expr pos:start="71:64" pos:end="71:68"><name pos:start="71:64" pos:end="71:68">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="77:5">else <block pos:start="73:12" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:39">

        <expr_stmt pos:start="75:9" pos:end="75:39"><expr pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:13">value</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <call pos:start="75:17" pos:end="75:38"><name pos:start="75:17" pos:end="75:34">get_ue_golomb_long</name><argument_list pos:start="75:35" pos:end="75:38">(<argument pos:start="75:36" pos:end="75:37"><expr pos:start="75:36" pos:end="75:37"><name pos:start="75:36" pos:end="75:37">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="81:5" pos:end="91:5"><if pos:start="81:5" pos:end="91:5">if <condition pos:start="81:8" pos:end="81:47">(<expr pos:start="81:9" pos:end="81:46"><name pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:13">value</name> <argument_list type="generic" pos:start="81:15" pos:end="81:36">&lt; <argument pos:start="81:17" pos:end="81:34"><expr pos:start="81:17" pos:end="81:34"><name pos:start="81:17" pos:end="81:25">range_min</name> <operator pos:start="81:27" pos:end="81:28">||</operator> <name pos:start="81:30" pos:end="81:34">value</name></expr></argument> &gt;</argument_list></name> <name pos:start="81:38" pos:end="81:46">range_max</name></expr>)</condition> <block pos:start="81:49" pos:end="91:5">{<block_content pos:start="83:9" pos:end="89:35">

        <expr_stmt pos:start="83:9" pos:end="87:50"><expr pos:start="83:9" pos:end="87:49"><call pos:start="83:9" pos:end="87:49"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="87:49">(<argument pos:start="83:16" pos:end="83:27"><expr pos:start="83:16" pos:end="83:27"><name pos:start="83:16" pos:end="83:27"><name pos:start="83:16" pos:end="83:18">ctx</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:27">log_ctx</name></name></expr></argument>, <argument pos:start="83:30" pos:end="83:41"><expr pos:start="83:30" pos:end="83:41"><name pos:start="83:30" pos:end="83:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:44" pos:end="85:67"><expr pos:start="83:44" pos:end="85:67"><literal type="string" pos:start="83:44" pos:end="83:62">"%s out of range: "</literal>

               <literal type="string" pos:start="85:16" pos:end="85:18">"%"</literal><name pos:start="85:19" pos:end="85:24">PRIu32</name><literal type="string" pos:start="85:25" pos:end="85:45">", but must be in [%"</literal><name pos:start="85:46" pos:end="85:51">PRIu32</name><literal type="string" pos:start="85:52" pos:end="85:55">",%"</literal><name pos:start="85:56" pos:end="85:61">PRIu32</name><literal type="string" pos:start="85:62" pos:end="85:67">"].\n"</literal></expr></argument>,

               <argument pos:start="87:16" pos:end="87:19"><expr pos:start="87:16" pos:end="87:19"><name pos:start="87:16" pos:end="87:19">name</name></expr></argument>, <argument pos:start="87:22" pos:end="87:26"><expr pos:start="87:22" pos:end="87:26"><name pos:start="87:22" pos:end="87:26">value</name></expr></argument>, <argument pos:start="87:29" pos:end="87:37"><expr pos:start="87:29" pos:end="87:37"><name pos:start="87:29" pos:end="87:37">range_min</name></expr></argument>, <argument pos:start="87:40" pos:end="87:48"><expr pos:start="87:40" pos:end="87:48"><name pos:start="87:40" pos:end="87:48">range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:35">return <expr pos:start="89:16" pos:end="89:34"><name pos:start="89:16" pos:end="89:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:22"><expr pos:start="95:5" pos:end="95:21"><operator pos:start="95:5" pos:end="95:5">*</operator><name pos:start="95:6" pos:end="95:13">write_to</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <name pos:start="95:17" pos:end="95:21">value</name></expr>;</expr_stmt>

    <return pos:start="97:5" pos:end="97:13">return <expr pos:start="97:12" pos:end="97:12"><literal type="number" pos:start="97:12" pos:end="97:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
