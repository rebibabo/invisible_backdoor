<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12039.c" pos:tabs="8"><function pos:start="1:1" pos:end="237:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">kvm_cpu_exec</name><parameter_list pos:start="1:17" pos:end="1:31">(<parameter pos:start="1:18" pos:end="1:30"><decl pos:start="1:18" pos:end="1:30"><type pos:start="1:18" pos:end="1:27"><name pos:start="1:18" pos:end="1:25">CPUState</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:30">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="237:1">{<block_content pos:start="5:5" pos:end="235:15">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">kvm_run</name></name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">run</name> <init pos:start="5:25" pos:end="5:38">= <expr pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:29">env</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:38">kvm_run</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:32"><expr pos:start="11:5" pos:end="11:31"><call pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:11">DPRINTF</name><argument_list pos:start="11:12" pos:end="11:31">(<argument pos:start="11:13" pos:end="11:30"><expr pos:start="11:13" pos:end="11:30"><literal type="string" pos:start="11:13" pos:end="11:30">"kvm_cpu_exec()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:45">(<expr pos:start="15:9" pos:end="15:44"><call pos:start="15:9" pos:end="15:44"><name pos:start="15:9" pos:end="15:39">kvm_arch_process_irqchip_events</name><argument_list pos:start="15:40" pos:end="15:44">(<argument pos:start="15:41" pos:end="15:43"><expr pos:start="15:41" pos:end="15:43"><name pos:start="15:41" pos:end="15:43">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:47" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:17">

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:11">env</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:25">exit_request</name></name> <operator pos:start="17:27" pos:end="17:27">=</operator> <literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:40"><expr pos:start="19:9" pos:end="19:39"><name pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:11">env</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:28">exception_index</name></name> <operator pos:start="19:30" pos:end="19:30">=</operator> <name pos:start="19:32" pos:end="19:39">EXCP_HLT</name></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <do pos:start="27:5" pos:end="211:22">do <block pos:start="27:8" pos:end="211:5">{<block_content pos:start="29:9" pos:end="209:9">

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:32">(<expr pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:15">env</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:31">kvm_vcpu_dirty</name></name></expr>)</condition> <block pos:start="29:34" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:36">

            <expr_stmt pos:start="31:13" pos:end="31:63"><expr pos:start="31:13" pos:end="31:62"><call pos:start="31:13" pos:end="31:62"><name pos:start="31:13" pos:end="31:34">kvm_arch_put_registers</name><argument_list pos:start="31:35" pos:end="31:62">(<argument pos:start="31:36" pos:end="31:38"><expr pos:start="31:36" pos:end="31:38"><name pos:start="31:36" pos:end="31:38">env</name></expr></argument>, <argument pos:start="31:41" pos:end="31:61"><expr pos:start="31:41" pos:end="31:61"><name pos:start="31:41" pos:end="31:61">KVM_PUT_RUNTIME_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:36"><expr pos:start="33:13" pos:end="33:35"><name pos:start="33:13" pos:end="33:31"><name pos:start="33:13" pos:end="33:15">env</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:31">kvm_vcpu_dirty</name></name> <operator pos:start="33:33" pos:end="33:33">=</operator> <literal type="number" pos:start="33:35" pos:end="33:35">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:35"><expr pos:start="39:9" pos:end="39:34"><call pos:start="39:9" pos:end="39:34"><name pos:start="39:9" pos:end="39:24">kvm_arch_pre_run</name><argument_list pos:start="39:25" pos:end="39:34">(<argument pos:start="39:26" pos:end="39:28"><expr pos:start="39:26" pos:end="39:28"><name pos:start="39:26" pos:end="39:28">env</name></expr></argument>, <argument pos:start="39:31" pos:end="39:33"><expr pos:start="39:31" pos:end="39:33"><name pos:start="39:31" pos:end="39:33">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="57:9"><if pos:start="41:9" pos:end="57:9">if <condition pos:start="41:12" pos:end="41:30">(<expr pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:15">env</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:29">exit_request</name></name></expr>)</condition> <block pos:start="41:32" pos:end="57:9">{<block_content pos:start="43:13" pos:end="55:33">

            <expr_stmt pos:start="43:13" pos:end="43:50"><expr pos:start="43:13" pos:end="43:49"><call pos:start="43:13" pos:end="43:49"><name pos:start="43:13" pos:end="43:19">DPRINTF</name><argument_list pos:start="43:20" pos:end="43:49">(<argument pos:start="43:21" pos:end="43:48"><expr pos:start="43:21" pos:end="43:48"><literal type="string" pos:start="43:21" pos:end="43:48">"interrupt exit requested\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="45:13" pos:end="53:15">/*

             * KVM requires us to reenter the kernel after IO exits to complete

             * instruction emulation. This self-signal will ensure that we

             * leave ASAP again.

             */</comment>

            <expr_stmt pos:start="55:13" pos:end="55:33"><expr pos:start="55:13" pos:end="55:32"><call pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:30">qemu_cpu_kick_self</name><argument_list pos:start="55:31" pos:end="55:32">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:30"><expr pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:22">cpu_single_env</name> <operator pos:start="59:24" pos:end="59:24">=</operator> <name pos:start="59:26" pos:end="59:29">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><call pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:34">qemu_mutex_unlock_iothread</name><argument_list pos:start="61:35" pos:end="61:36">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:46"><expr pos:start="65:9" pos:end="65:45"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:45"><name pos:start="65:15" pos:end="65:28">kvm_vcpu_ioctl</name><argument_list pos:start="65:29" pos:end="65:45">(<argument pos:start="65:30" pos:end="65:32"><expr pos:start="65:30" pos:end="65:32"><name pos:start="65:30" pos:end="65:32">env</name></expr></argument>, <argument pos:start="65:35" pos:end="65:41"><expr pos:start="65:35" pos:end="65:41"><name pos:start="65:35" pos:end="65:41">KVM_RUN</name></expr></argument>, <argument pos:start="65:44" pos:end="65:44"><expr pos:start="65:44" pos:end="65:44"><literal type="number" pos:start="65:44" pos:end="65:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><call pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:32">qemu_mutex_lock_iothread</name><argument_list pos:start="69:33" pos:end="69:34">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:29"><expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:22">cpu_single_env</name> <operator pos:start="71:24" pos:end="71:24">=</operator> <name pos:start="71:26" pos:end="71:28">env</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><call pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:25">kvm_arch_post_run</name><argument_list pos:start="73:26" pos:end="73:35">(<argument pos:start="73:27" pos:end="73:29"><expr pos:start="73:27" pos:end="73:29"><name pos:start="73:27" pos:end="73:29">env</name></expr></argument>, <argument pos:start="73:32" pos:end="73:34"><expr pos:start="73:32" pos:end="73:34"><name pos:start="73:32" pos:end="73:34">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:42"><expr pos:start="77:9" pos:end="77:41"><call pos:start="77:9" pos:end="77:41"><name pos:start="77:9" pos:end="77:39">kvm_flush_coalesced_mmio_buffer</name><argument_list pos:start="77:40" pos:end="77:41">()</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="81:9" pos:end="91:9"><if pos:start="81:9" pos:end="91:9">if <condition pos:start="81:12" pos:end="81:44">(<expr pos:start="81:13" pos:end="81:43"><name pos:start="81:13" pos:end="81:15">ret</name> <operator pos:start="81:17" pos:end="81:18">==</operator> <operator pos:start="81:20" pos:end="81:20">-</operator><name pos:start="81:21" pos:end="81:25">EINTR</name> <operator pos:start="81:27" pos:end="81:28">||</operator> <name pos:start="81:30" pos:end="81:32">ret</name> <operator pos:start="81:34" pos:end="81:35">==</operator> <operator pos:start="81:37" pos:end="81:37">-</operator><name pos:start="81:38" pos:end="81:43">EAGAIN</name></expr>)</condition> <block pos:start="81:46" pos:end="91:9">{<block_content pos:start="83:13" pos:end="89:18">

            <expr_stmt pos:start="83:13" pos:end="83:26"><expr pos:start="83:13" pos:end="83:25"><call pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:20">cpu_exit</name><argument_list pos:start="83:21" pos:end="83:25">(<argument pos:start="83:22" pos:end="83:24"><expr pos:start="83:22" pos:end="83:24"><name pos:start="83:22" pos:end="83:24">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:40"><expr pos:start="85:13" pos:end="85:39"><call pos:start="85:13" pos:end="85:39"><name pos:start="85:13" pos:end="85:19">DPRINTF</name><argument_list pos:start="85:20" pos:end="85:39">(<argument pos:start="85:21" pos:end="85:38"><expr pos:start="85:21" pos:end="85:38"><literal type="string" pos:start="85:21" pos:end="85:38">"io window exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:20"><expr pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:15">ret</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <literal type="number" pos:start="87:19" pos:end="87:19">0</literal></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:20">(<expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:15">ret</name> <operator pos:start="95:17" pos:end="95:17">&lt;</operator> <literal type="number" pos:start="95:19" pos:end="95:19">0</literal></expr>)</condition> <block pos:start="95:22" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:20">

            <expr_stmt pos:start="97:13" pos:end="97:59"><expr pos:start="97:13" pos:end="97:58"><call pos:start="97:13" pos:end="97:58"><name pos:start="97:13" pos:end="97:19">DPRINTF</name><argument_list pos:start="97:20" pos:end="97:58">(<argument pos:start="97:21" pos:end="97:41"><expr pos:start="97:21" pos:end="97:41"><literal type="string" pos:start="97:21" pos:end="97:41">"kvm run failed %s\n"</literal></expr></argument>, <argument pos:start="97:44" pos:end="97:57"><expr pos:start="97:44" pos:end="97:57"><call pos:start="97:44" pos:end="97:57"><name pos:start="97:44" pos:end="97:51">strerror</name><argument_list pos:start="97:52" pos:end="97:57">(<argument pos:start="97:53" pos:end="97:56"><expr pos:start="97:53" pos:end="97:56"><operator pos:start="97:53" pos:end="97:53">-</operator><name pos:start="97:54" pos:end="97:56">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:20"><expr pos:start="99:13" pos:end="99:19"><call pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:17">abort</name><argument_list pos:start="99:18" pos:end="99:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:16"><expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <literal type="number" pos:start="105:15" pos:end="105:15">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="105:18" pos:end="105:32">/* exit loop */</comment>

        <switch pos:start="107:9" pos:end="209:9">switch <condition pos:start="107:16" pos:end="107:33">(<expr pos:start="107:17" pos:end="107:32"><name pos:start="107:17" pos:end="107:32"><name pos:start="107:17" pos:end="107:19">run</name><operator pos:start="107:20" pos:end="107:21">-&gt;</operator><name pos:start="107:22" pos:end="107:32">exit_reason</name></name></expr>)</condition> <block pos:start="107:35" pos:end="209:9">{<block_content pos:start="109:9" pos:end="207:18">

        <case pos:start="109:9" pos:end="109:25">case <expr pos:start="109:14" pos:end="109:24"><name pos:start="109:14" pos:end="109:24">KVM_EXIT_IO</name></expr>:</case>

            <expr_stmt pos:start="111:13" pos:end="111:35"><expr pos:start="111:13" pos:end="111:34"><call pos:start="111:13" pos:end="111:34"><name pos:start="111:13" pos:end="111:19">DPRINTF</name><argument_list pos:start="111:20" pos:end="111:34">(<argument pos:start="111:21" pos:end="111:33"><expr pos:start="111:21" pos:end="111:33"><literal type="string" pos:start="111:21" pos:end="111:33">"handle_io\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="121:41"><expr pos:start="113:13" pos:end="121:40"><call pos:start="113:13" pos:end="121:40"><name pos:start="113:13" pos:end="113:25">kvm_handle_io</name><argument_list pos:start="113:26" pos:end="121:40">(<argument pos:start="113:27" pos:end="113:38"><expr pos:start="113:27" pos:end="113:38"><name pos:start="113:27" pos:end="113:38"><name pos:start="113:27" pos:end="113:29">run</name><operator pos:start="113:30" pos:end="113:31">-&gt;</operator><name pos:start="113:32" pos:end="113:33">io</name><operator pos:start="113:34" pos:end="113:34">.</operator><name pos:start="113:35" pos:end="113:38">port</name></name></expr></argument>,

                          <argument pos:start="115:27" pos:end="115:62"><expr pos:start="115:27" pos:end="115:62"><operator pos:start="115:27" pos:end="115:27">(</operator><name pos:start="115:28" pos:end="115:34">uint8_t</name> <operator pos:start="115:36" pos:end="115:36">*</operator><operator pos:start="115:37" pos:end="115:37">)</operator><name pos:start="115:38" pos:end="115:40">run</name> <operator pos:start="115:42" pos:end="115:42">+</operator> <name pos:start="115:44" pos:end="115:62"><name pos:start="115:44" pos:end="115:46">run</name><operator pos:start="115:47" pos:end="115:48">-&gt;</operator><name pos:start="115:49" pos:end="115:50">io</name><operator pos:start="115:51" pos:end="115:51">.</operator><name pos:start="115:52" pos:end="115:62">data_offset</name></name></expr></argument>,

                          <argument pos:start="117:27" pos:end="117:43"><expr pos:start="117:27" pos:end="117:43"><name pos:start="117:27" pos:end="117:43"><name pos:start="117:27" pos:end="117:29">run</name><operator pos:start="117:30" pos:end="117:31">-&gt;</operator><name pos:start="117:32" pos:end="117:33">io</name><operator pos:start="117:34" pos:end="117:34">.</operator><name pos:start="117:35" pos:end="117:43">direction</name></name></expr></argument>,

                          <argument pos:start="119:27" pos:end="119:38"><expr pos:start="119:27" pos:end="119:38"><name pos:start="119:27" pos:end="119:38"><name pos:start="119:27" pos:end="119:29">run</name><operator pos:start="119:30" pos:end="119:31">-&gt;</operator><name pos:start="119:32" pos:end="119:33">io</name><operator pos:start="119:34" pos:end="119:34">.</operator><name pos:start="119:35" pos:end="119:38">size</name></name></expr></argument>,

                          <argument pos:start="121:27" pos:end="121:39"><expr pos:start="121:27" pos:end="121:39"><name pos:start="121:27" pos:end="121:39"><name pos:start="121:27" pos:end="121:29">run</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:33">io</name><operator pos:start="121:34" pos:end="121:34">.</operator><name pos:start="121:35" pos:end="121:39">count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:20"><expr pos:start="123:13" pos:end="123:19"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <literal type="number" pos:start="123:19" pos:end="123:19">1</literal></expr>;</expr_stmt>

            <break pos:start="125:13" pos:end="125:18">break;</break>

        <case pos:start="127:9" pos:end="127:27">case <expr pos:start="127:14" pos:end="127:26"><name pos:start="127:14" pos:end="127:26">KVM_EXIT_MMIO</name></expr>:</case>

            <expr_stmt pos:start="129:13" pos:end="129:37"><expr pos:start="129:13" pos:end="129:36"><call pos:start="129:13" pos:end="129:36"><name pos:start="129:13" pos:end="129:19">DPRINTF</name><argument_list pos:start="129:20" pos:end="129:36">(<argument pos:start="129:21" pos:end="129:35"><expr pos:start="129:21" pos:end="129:35"><literal type="string" pos:start="129:21" pos:end="129:35">"handle_mmio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="137:55"><expr pos:start="131:13" pos:end="137:54"><call pos:start="131:13" pos:end="137:54"><name pos:start="131:13" pos:end="131:34">cpu_physical_memory_rw</name><argument_list pos:start="131:35" pos:end="137:54">(<argument pos:start="131:36" pos:end="131:54"><expr pos:start="131:36" pos:end="131:54"><name pos:start="131:36" pos:end="131:54"><name pos:start="131:36" pos:end="131:38">run</name><operator pos:start="131:39" pos:end="131:40">-&gt;</operator><name pos:start="131:41" pos:end="131:44">mmio</name><operator pos:start="131:45" pos:end="131:45">.</operator><name pos:start="131:46" pos:end="131:54">phys_addr</name></name></expr></argument>,

                                   <argument pos:start="133:36" pos:end="133:49"><expr pos:start="133:36" pos:end="133:49"><name pos:start="133:36" pos:end="133:49"><name pos:start="133:36" pos:end="133:38">run</name><operator pos:start="133:39" pos:end="133:40">-&gt;</operator><name pos:start="133:41" pos:end="133:44">mmio</name><operator pos:start="133:45" pos:end="133:45">.</operator><name pos:start="133:46" pos:end="133:49">data</name></name></expr></argument>,

                                   <argument pos:start="135:36" pos:end="135:48"><expr pos:start="135:36" pos:end="135:48"><name pos:start="135:36" pos:end="135:48"><name pos:start="135:36" pos:end="135:38">run</name><operator pos:start="135:39" pos:end="135:40">-&gt;</operator><name pos:start="135:41" pos:end="135:44">mmio</name><operator pos:start="135:45" pos:end="135:45">.</operator><name pos:start="135:46" pos:end="135:48">len</name></name></expr></argument>,

                                   <argument pos:start="137:36" pos:end="137:53"><expr pos:start="137:36" pos:end="137:53"><name pos:start="137:36" pos:end="137:53"><name pos:start="137:36" pos:end="137:38">run</name><operator pos:start="137:39" pos:end="137:40">-&gt;</operator><name pos:start="137:41" pos:end="137:44">mmio</name><operator pos:start="137:45" pos:end="137:45">.</operator><name pos:start="137:46" pos:end="137:53">is_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:20"><expr pos:start="139:13" pos:end="139:19"><name pos:start="139:13" pos:end="139:15">ret</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <literal type="number" pos:start="139:19" pos:end="139:19">1</literal></expr>;</expr_stmt>

            <break pos:start="141:13" pos:end="141:18">break;</break>

        <case pos:start="143:9" pos:end="143:38">case <expr pos:start="143:14" pos:end="143:37"><name pos:start="143:14" pos:end="143:37">KVM_EXIT_IRQ_WINDOW_OPEN</name></expr>:</case>

            <expr_stmt pos:start="145:13" pos:end="145:41"><expr pos:start="145:13" pos:end="145:40"><call pos:start="145:13" pos:end="145:40"><name pos:start="145:13" pos:end="145:19">DPRINTF</name><argument_list pos:start="145:20" pos:end="145:40">(<argument pos:start="145:21" pos:end="145:39"><expr pos:start="145:21" pos:end="145:39"><literal type="string" pos:start="145:21" pos:end="145:39">"irq_window_open\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        <case pos:start="149:9" pos:end="149:31">case <expr pos:start="149:14" pos:end="149:30"><name pos:start="149:14" pos:end="149:30">KVM_EXIT_SHUTDOWN</name></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:34"><expr pos:start="151:13" pos:end="151:33"><call pos:start="151:13" pos:end="151:33"><name pos:start="151:13" pos:end="151:19">DPRINTF</name><argument_list pos:start="151:20" pos:end="151:33">(<argument pos:start="151:21" pos:end="151:32"><expr pos:start="151:21" pos:end="151:32"><literal type="string" pos:start="151:21" pos:end="151:32">"shutdown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:40"><expr pos:start="153:13" pos:end="153:39"><call pos:start="153:13" pos:end="153:39"><name pos:start="153:13" pos:end="153:37">qemu_system_reset_request</name><argument_list pos:start="153:38" pos:end="153:39">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:20"><expr pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <literal type="number" pos:start="155:19" pos:end="155:19">1</literal></expr>;</expr_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        <case pos:start="159:9" pos:end="159:30">case <expr pos:start="159:14" pos:end="159:29"><name pos:start="159:14" pos:end="159:29">KVM_EXIT_UNKNOWN</name></expr>:</case>

            <expr_stmt pos:start="161:13" pos:end="163:60"><expr pos:start="161:13" pos:end="163:59"><call pos:start="161:13" pos:end="163:59"><name pos:start="161:13" pos:end="161:19">fprintf</name><argument_list pos:start="161:20" pos:end="163:59">(<argument pos:start="161:21" pos:end="161:26"><expr pos:start="161:21" pos:end="161:26"><name pos:start="161:21" pos:end="161:26">stderr</name></expr></argument>, <argument pos:start="161:29" pos:end="161:78"><expr pos:start="161:29" pos:end="161:78"><literal type="string" pos:start="161:29" pos:end="161:66">"KVM: unknown exit, hardware reason %"</literal> <name pos:start="161:68" pos:end="161:73">PRIx64</name> <literal type="string" pos:start="161:75" pos:end="161:78">"\n"</literal></expr></argument>,

                    <argument pos:start="163:21" pos:end="163:58"><expr pos:start="163:21" pos:end="163:58"><operator pos:start="163:21" pos:end="163:21">(</operator><name pos:start="163:22" pos:end="163:29">uint64_t</name><operator pos:start="163:30" pos:end="163:30">)</operator><name pos:start="163:31" pos:end="163:58"><name pos:start="163:31" pos:end="163:33">run</name><operator pos:start="163:34" pos:end="163:35">-&gt;</operator><name pos:start="163:36" pos:end="163:37">hw</name><operator pos:start="163:38" pos:end="163:38">.</operator><name pos:start="163:39" pos:end="163:58">hardware_exit_reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:21"><expr pos:start="165:13" pos:end="165:20"><name pos:start="165:13" pos:end="165:15">ret</name> <operator pos:start="165:17" pos:end="165:17">=</operator> <operator pos:start="165:19" pos:end="165:19">-</operator><literal type="number" pos:start="165:20" pos:end="165:20">1</literal></expr>;</expr_stmt>

            <break pos:start="167:13" pos:end="170:0">break;</break>

<cpp:ifdef pos:start="169:1" pos:end="169:34">#<cpp:directive pos:start="169:2" pos:end="169:6">ifdef</cpp:directive> <name pos:start="169:8" pos:end="169:34">KVM_CAP_INTERNAL_ERROR_DATA</name></cpp:ifdef>

        <case pos:start="171:9" pos:end="171:37">case <expr pos:start="171:14" pos:end="171:36"><name pos:start="171:14" pos:end="171:36">KVM_EXIT_INTERNAL_ERROR</name></expr>:</case>

            <expr_stmt pos:start="173:13" pos:end="173:54"><expr pos:start="173:13" pos:end="173:53"><name pos:start="173:13" pos:end="173:15">ret</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="173:53"><name pos:start="173:19" pos:end="173:43">kvm_handle_internal_error</name><argument_list pos:start="173:44" pos:end="173:53">(<argument pos:start="173:45" pos:end="173:47"><expr pos:start="173:45" pos:end="173:47"><name pos:start="173:45" pos:end="173:47">env</name></expr></argument>, <argument pos:start="173:50" pos:end="173:52"><expr pos:start="173:50" pos:end="173:52"><name pos:start="173:50" pos:end="173:52">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="175:13" pos:end="178:0">break;</break>

<cpp:endif pos:start="177:1" pos:end="177:6">#<cpp:directive pos:start="177:2" pos:end="177:6">endif</cpp:directive></cpp:endif>

        <case pos:start="179:9" pos:end="179:28">case <expr pos:start="179:14" pos:end="179:27"><name pos:start="179:14" pos:end="179:27">KVM_EXIT_DEBUG</name></expr>:</case>

            <expr_stmt pos:start="181:13" pos:end="184:0"><expr pos:start="181:13" pos:end="181:39"><call pos:start="181:13" pos:end="181:39"><name pos:start="181:13" pos:end="181:19">DPRINTF</name><argument_list pos:start="181:20" pos:end="181:39">(<argument pos:start="181:21" pos:end="181:38"><expr pos:start="181:21" pos:end="181:38"><literal type="string" pos:start="181:21" pos:end="181:38">"kvm_exit_debug\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="183:1" pos:end="183:30">#<cpp:directive pos:start="183:2" pos:end="183:6">ifdef</cpp:directive> <name pos:start="183:8" pos:end="183:30">KVM_CAP_SET_GUEST_DEBUG</name></cpp:ifdef>

            <if_stmt pos:start="185:13" pos:end="191:13"><if pos:start="185:13" pos:end="191:13">if <condition pos:start="185:16" pos:end="185:49">(<expr pos:start="185:17" pos:end="185:48"><call pos:start="185:17" pos:end="185:48"><name pos:start="185:17" pos:end="185:30">kvm_arch_debug</name><argument_list pos:start="185:31" pos:end="185:48">(<argument pos:start="185:32" pos:end="185:47"><expr pos:start="185:32" pos:end="185:47"><operator pos:start="185:32" pos:end="185:32">&amp;</operator><name pos:start="185:33" pos:end="185:47"><name pos:start="185:33" pos:end="185:35">run</name><operator pos:start="185:36" pos:end="185:37">-&gt;</operator><name pos:start="185:38" pos:end="185:42">debug</name><operator pos:start="185:43" pos:end="185:43">.</operator><name pos:start="185:44" pos:end="185:47">arch</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:51" pos:end="191:13">{<block_content pos:start="187:17" pos:end="189:25">

                <expr_stmt pos:start="187:17" pos:end="187:50"><expr pos:start="187:17" pos:end="187:49"><name pos:start="187:17" pos:end="187:36"><name pos:start="187:17" pos:end="187:19">env</name><operator pos:start="187:20" pos:end="187:21">-&gt;</operator><name pos:start="187:22" pos:end="187:36">exception_index</name></name> <operator pos:start="187:38" pos:end="187:38">=</operator> <name pos:start="187:40" pos:end="187:49">EXCP_DEBUG</name></expr>;</expr_stmt>

                <return pos:start="189:17" pos:end="189:25">return <expr pos:start="189:24" pos:end="189:24"><literal type="number" pos:start="189:24" pos:end="189:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="193:13" pos:end="193:61">/* re-enter, this exception was guest-internal */</comment>

            <expr_stmt pos:start="195:13" pos:end="198:0"><expr pos:start="195:13" pos:end="195:19"><name pos:start="195:13" pos:end="195:15">ret</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <literal type="number" pos:start="195:19" pos:end="195:19">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="197:1" pos:end="197:6">#<cpp:directive pos:start="197:2" pos:end="197:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="197:8" pos:end="197:36">/* KVM_CAP_SET_GUEST_DEBUG */</comment>

            <break pos:start="199:13" pos:end="199:18">break;</break>

        <default pos:start="201:9" pos:end="201:16">default:</default>

            <expr_stmt pos:start="203:13" pos:end="203:46"><expr pos:start="203:13" pos:end="203:45"><call pos:start="203:13" pos:end="203:45"><name pos:start="203:13" pos:end="203:19">DPRINTF</name><argument_list pos:start="203:20" pos:end="203:45">(<argument pos:start="203:21" pos:end="203:44"><expr pos:start="203:21" pos:end="203:44"><literal type="string" pos:start="203:21" pos:end="203:44">"kvm_arch_handle_exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:49"><expr pos:start="205:13" pos:end="205:48"><name pos:start="205:13" pos:end="205:15">ret</name> <operator pos:start="205:17" pos:end="205:17">=</operator> <call pos:start="205:19" pos:end="205:48"><name pos:start="205:19" pos:end="205:38">kvm_arch_handle_exit</name><argument_list pos:start="205:39" pos:end="205:48">(<argument pos:start="205:40" pos:end="205:42"><expr pos:start="205:40" pos:end="205:42"><name pos:start="205:40" pos:end="205:42">env</name></expr></argument>, <argument pos:start="205:45" pos:end="205:47"><expr pos:start="205:45" pos:end="205:47"><name pos:start="205:45" pos:end="205:47">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="207:13" pos:end="207:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block> while <condition pos:start="211:13" pos:end="211:21">(<expr pos:start="211:14" pos:end="211:20"><name pos:start="211:14" pos:end="211:16">ret</name> <operator pos:start="211:18" pos:end="211:18">&gt;</operator> <literal type="number" pos:start="211:20" pos:end="211:20">0</literal></expr>)</condition>;</do>



    <if_stmt pos:start="215:5" pos:end="223:5"><if pos:start="215:5" pos:end="223:5">if <condition pos:start="215:8" pos:end="215:16">(<expr pos:start="215:9" pos:end="215:15"><name pos:start="215:9" pos:end="215:11">ret</name> <operator pos:start="215:13" pos:end="215:13">&lt;</operator> <literal type="number" pos:start="215:15" pos:end="215:15">0</literal></expr>)</condition> <block pos:start="215:18" pos:end="223:5">{<block_content pos:start="217:9" pos:end="221:30">

        <expr_stmt pos:start="217:9" pos:end="217:60"><expr pos:start="217:9" pos:end="217:59"><call pos:start="217:9" pos:end="217:59"><name pos:start="217:9" pos:end="217:22">cpu_dump_state</name><argument_list pos:start="217:23" pos:end="217:59">(<argument pos:start="217:24" pos:end="217:26"><expr pos:start="217:24" pos:end="217:26"><name pos:start="217:24" pos:end="217:26">env</name></expr></argument>, <argument pos:start="217:29" pos:end="217:34"><expr pos:start="217:29" pos:end="217:34"><name pos:start="217:29" pos:end="217:34">stderr</name></expr></argument>, <argument pos:start="217:37" pos:end="217:43"><expr pos:start="217:37" pos:end="217:43"><name pos:start="217:37" pos:end="217:43">fprintf</name></expr></argument>, <argument pos:start="217:46" pos:end="217:58"><expr pos:start="217:46" pos:end="217:58"><name pos:start="217:46" pos:end="217:58">CPU_DUMP_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:19"><expr pos:start="219:9" pos:end="219:18"><call pos:start="219:9" pos:end="219:18"><name pos:start="219:9" pos:end="219:15">vm_stop</name><argument_list pos:start="219:16" pos:end="219:18">(<argument pos:start="219:17" pos:end="219:17"><expr pos:start="219:17" pos:end="219:17"><literal type="number" pos:start="219:17" pos:end="219:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:30"><expr pos:start="221:9" pos:end="221:29"><name pos:start="221:9" pos:end="221:25"><name pos:start="221:9" pos:end="221:11">env</name><operator pos:start="221:12" pos:end="221:13">-&gt;</operator><name pos:start="221:14" pos:end="221:25">exit_request</name></name> <operator pos:start="221:27" pos:end="221:27">=</operator> <literal type="number" pos:start="221:29" pos:end="221:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="225:5" pos:end="231:5"><if pos:start="225:5" pos:end="231:5">if <condition pos:start="225:8" pos:end="225:26">(<expr pos:start="225:9" pos:end="225:25"><name pos:start="225:9" pos:end="225:25"><name pos:start="225:9" pos:end="225:11">env</name><operator pos:start="225:12" pos:end="225:13">-&gt;</operator><name pos:start="225:14" pos:end="225:25">exit_request</name></name></expr>)</condition> <block pos:start="225:28" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:46">

        <expr_stmt pos:start="227:9" pos:end="227:30"><expr pos:start="227:9" pos:end="227:29"><name pos:start="227:9" pos:end="227:25"><name pos:start="227:9" pos:end="227:11">env</name><operator pos:start="227:12" pos:end="227:13">-&gt;</operator><name pos:start="227:14" pos:end="227:25">exit_request</name></name> <operator pos:start="227:27" pos:end="227:27">=</operator> <literal type="number" pos:start="227:29" pos:end="227:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:46"><expr pos:start="229:9" pos:end="229:45"><name pos:start="229:9" pos:end="229:28"><name pos:start="229:9" pos:end="229:11">env</name><operator pos:start="229:12" pos:end="229:13">-&gt;</operator><name pos:start="229:14" pos:end="229:28">exception_index</name></name> <operator pos:start="229:30" pos:end="229:30">=</operator> <name pos:start="229:32" pos:end="229:45">EXCP_INTERRUPT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="235:5" pos:end="235:15">return <expr pos:start="235:12" pos:end="235:14"><name pos:start="235:12" pos:end="235:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
