<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/132.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">vdi_open</name><parameter_list pos:start="1:20" pos:end="3:33">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:36">BlockDriverState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">bs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:47">QDict</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:56">options</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:32"><decl pos:start="3:21" pos:end="3:32"><type pos:start="3:21" pos:end="3:32"><name pos:start="3:21" pos:end="3:25">Error</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier><modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:32">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="213:1">{<block_content pos:start="7:5" pos:end="211:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVVdiState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">VdiHeader</name></type> <name pos:start="9:15" pos:end="9:20">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:20">bmap_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><call pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:10">logout</name><argument_list pos:start="17:11" pos:end="17:16">(<argument pos:start="17:12" pos:end="17:15"><expr pos:start="17:12" pos:end="17:15"><literal type="string" pos:start="17:12" pos:end="17:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:56"><expr pos:start="21:5" pos:end="21:55"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:55"><name pos:start="21:11" pos:end="21:19">bdrv_read</name><argument_list pos:start="21:20" pos:end="21:55">(<argument pos:start="21:21" pos:end="21:28"><expr pos:start="21:21" pos:end="21:28"><name pos:start="21:21" pos:end="21:28"><name pos:start="21:21" pos:end="21:22">bs</name><operator pos:start="21:23" pos:end="21:24">-&gt;</operator><name pos:start="21:25" pos:end="21:28">file</name></name></expr></argument>, <argument pos:start="21:31" pos:end="21:31"><expr pos:start="21:31" pos:end="21:31"><literal type="number" pos:start="21:31" pos:end="21:31">0</literal></expr></argument>, <argument pos:start="21:34" pos:end="21:51"><expr pos:start="21:34" pos:end="21:51"><operator pos:start="21:34" pos:end="21:34">(</operator><name pos:start="21:35" pos:end="21:41">uint8_t</name> <operator pos:start="21:43" pos:end="21:43">*</operator><operator pos:start="21:44" pos:end="21:44">)</operator><operator pos:start="21:45" pos:end="21:45">&amp;</operator><name pos:start="21:46" pos:end="21:51">header</name></expr></argument>, <argument pos:start="21:54" pos:end="21:54"><expr pos:start="21:54" pos:end="21:54"><literal type="number" pos:start="21:54" pos:end="21:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition> <block pos:start="23:18" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:18">

        <goto pos:start="25:9" pos:end="25:18">goto <name pos:start="25:14" pos:end="25:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="34:0"><expr pos:start="31:5" pos:end="31:30"><call pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:21">vdi_header_to_cpu</name><argument_list pos:start="31:22" pos:end="31:30">(<argument pos:start="31:23" pos:end="31:29"><expr pos:start="31:23" pos:end="31:29"><operator pos:start="31:23" pos:end="31:23">&amp;</operator><name pos:start="31:24" pos:end="31:29">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="33:1" pos:end="33:29">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:29"><call pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:11">defined</name><argument_list pos:start="33:12" pos:end="33:29">(<argument pos:start="33:13" pos:end="33:28"><expr pos:start="33:13" pos:end="33:28"><name pos:start="33:13" pos:end="33:28">CONFIG_VDI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:29"><call pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:20">vdi_header_print</name><argument_list pos:start="35:21" pos:end="35:29">(<argument pos:start="35:22" pos:end="35:28"><expr pos:start="35:22" pos:end="35:28"><operator pos:start="35:22" pos:end="35:22">&amp;</operator><name pos:start="35:23" pos:end="35:28">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="41:5" pos:end="55:5"><if pos:start="41:5" pos:end="55:5">if <condition pos:start="41:8" pos:end="41:44">(<expr pos:start="41:9" pos:end="41:43"><name pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:14">header</name><operator pos:start="41:15" pos:end="41:15">.</operator><name pos:start="41:16" pos:end="41:24">disk_size</name></name> <operator pos:start="41:26" pos:end="41:26">%</operator> <name pos:start="41:28" pos:end="41:38">SECTOR_SIZE</name> <operator pos:start="41:40" pos:end="41:41">!=</operator> <literal type="number" pos:start="41:43" pos:end="41:43">0</literal></expr>)</condition> <block pos:start="41:46" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:47">

        <comment type="block" pos:start="43:9" pos:end="47:26">/* 'VBoxManage convertfromraw' can create images with odd disk sizes.

           We accept them but round the disk size to the next multiple of

           SECTOR_SIZE. */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:76"><expr pos:start="49:9" pos:end="49:75"><call pos:start="49:9" pos:end="49:75"><name pos:start="49:9" pos:end="49:14">logout</name><argument_list pos:start="49:15" pos:end="49:75">(<argument pos:start="49:16" pos:end="49:56"><expr pos:start="49:16" pos:end="49:56"><literal type="string" pos:start="49:16" pos:end="49:32">"odd disk size %"</literal> <name pos:start="49:34" pos:end="49:39">PRIu64</name> <literal type="string" pos:start="49:41" pos:end="49:56">" B, round up\n"</literal></expr></argument>, <argument pos:start="49:59" pos:end="49:74"><expr pos:start="49:59" pos:end="49:74"><name pos:start="49:59" pos:end="49:74"><name pos:start="49:59" pos:end="49:64">header</name><operator pos:start="49:65" pos:end="49:65">.</operator><name pos:start="49:66" pos:end="49:74">disk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:44"><expr pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:14">header</name><operator pos:start="51:15" pos:end="51:15">.</operator><name pos:start="51:16" pos:end="51:24">disk_size</name></name> <operator pos:start="51:26" pos:end="51:27">+=</operator> <name pos:start="51:29" pos:end="51:39">SECTOR_SIZE</name> <operator pos:start="51:41" pos:end="51:41">-</operator> <literal type="number" pos:start="51:43" pos:end="51:43">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:47"><expr pos:start="53:9" pos:end="53:46"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:14">header</name><operator pos:start="53:15" pos:end="53:15">.</operator><name pos:start="53:16" pos:end="53:24">disk_size</name></name> <operator pos:start="53:26" pos:end="53:27">&amp;=</operator> <operator pos:start="53:29" pos:end="53:29">~</operator><operator pos:start="53:30" pos:end="53:30">(</operator><name pos:start="53:31" pos:end="53:41">SECTOR_SIZE</name> <operator pos:start="53:43" pos:end="53:43">-</operator> <literal type="number" pos:start="53:45" pos:end="53:45">1</literal><operator pos:start="53:46" pos:end="53:46">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="153:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:42">(<expr pos:start="59:9" pos:end="59:41"><name pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:14">header</name><operator pos:start="59:15" pos:end="59:15">.</operator><name pos:start="59:16" pos:end="59:24">signature</name></name> <operator pos:start="59:26" pos:end="59:27">!=</operator> <name pos:start="59:29" pos:end="59:41">VDI_SIGNATURE</name></expr>)</condition> <block pos:start="59:44" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:18">

        <expr_stmt pos:start="61:9" pos:end="61:91"><expr pos:start="61:9" pos:end="61:90"><call pos:start="61:9" pos:end="61:90"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="61:90">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">errp</name></expr></argument>, <argument pos:start="61:26" pos:end="61:71"><expr pos:start="61:26" pos:end="61:71"><literal type="string" pos:start="61:26" pos:end="61:71">"Image not in VDI format (bad signature %08x)"</literal></expr></argument>, <argument pos:start="61:74" pos:end="61:89"><expr pos:start="61:74" pos:end="61:89"><name pos:start="61:74" pos:end="61:89"><name pos:start="61:74" pos:end="61:79">header</name><operator pos:start="61:80" pos:end="61:80">.</operator><name pos:start="61:81" pos:end="61:89">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:22"><expr pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">-</operator><name pos:start="63:16" pos:end="63:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:18">goto <name pos:start="65:14" pos:end="65:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="67:7" pos:end="77:5">else if <condition pos:start="67:15" pos:end="67:49">(<expr pos:start="67:16" pos:end="67:48"><name pos:start="67:16" pos:end="67:29"><name pos:start="67:16" pos:end="67:21">header</name><operator pos:start="67:22" pos:end="67:22">.</operator><name pos:start="67:23" pos:end="67:29">version</name></name> <operator pos:start="67:31" pos:end="67:32">!=</operator> <name pos:start="67:34" pos:end="67:48">VDI_VERSION_1_1</name></expr>)</condition> <block pos:start="67:51" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:18">

        <expr_stmt pos:start="69:9" pos:end="71:66"><expr pos:start="69:9" pos:end="71:65"><call pos:start="69:9" pos:end="71:65"><name pos:start="69:9" pos:end="69:18">error_setg</name><argument_list pos:start="69:19" pos:end="71:65">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">errp</name></expr></argument>, <argument pos:start="69:26" pos:end="69:64"><expr pos:start="69:26" pos:end="69:64"><literal type="string" pos:start="69:26" pos:end="69:64">"unsupported VDI image (version %u.%u)"</literal></expr></argument>,

                   <argument pos:start="71:20" pos:end="71:39"><expr pos:start="71:20" pos:end="71:39"><name pos:start="71:20" pos:end="71:33"><name pos:start="71:20" pos:end="71:25">header</name><operator pos:start="71:26" pos:end="71:26">.</operator><name pos:start="71:27" pos:end="71:33">version</name></name> <operator pos:start="71:35" pos:end="71:36">&gt;&gt;</operator> <literal type="number" pos:start="71:38" pos:end="71:39">16</literal></expr></argument>, <argument pos:start="71:42" pos:end="71:64"><expr pos:start="71:42" pos:end="71:64"><name pos:start="71:42" pos:end="71:55"><name pos:start="71:42" pos:end="71:47">header</name><operator pos:start="71:48" pos:end="71:48">.</operator><name pos:start="71:49" pos:end="71:55">version</name></name> <operator pos:start="71:57" pos:end="71:57">&amp;</operator> <literal type="number" pos:start="71:59" pos:end="71:64">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:23"><expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <operator pos:start="73:15" pos:end="73:15">-</operator><name pos:start="73:16" pos:end="73:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="75:9" pos:end="75:18">goto <name pos:start="75:14" pos:end="75:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="89:5">else if <condition pos:start="77:15" pos:end="77:53">(<expr pos:start="77:16" pos:end="77:52"><name pos:start="77:16" pos:end="77:33"><name pos:start="77:16" pos:end="77:21">header</name><operator pos:start="77:22" pos:end="77:22">.</operator><name pos:start="77:23" pos:end="77:33">offset_bmap</name></name> <operator pos:start="77:35" pos:end="77:35">%</operator> <name pos:start="77:37" pos:end="77:47">SECTOR_SIZE</name> <operator pos:start="77:49" pos:end="77:50">!=</operator> <literal type="number" pos:start="77:52" pos:end="77:52">0</literal></expr>)</condition> <block pos:start="77:55" pos:end="89:5">{<block_content pos:start="81:9" pos:end="87:18">

        <comment type="block" pos:start="79:9" pos:end="79:74">/* We only support block maps which start on a sector boundary. */</comment>

        <expr_stmt pos:start="81:9" pos:end="83:48"><expr pos:start="81:9" pos:end="83:47"><call pos:start="81:9" pos:end="83:47"><name pos:start="81:9" pos:end="81:18">error_setg</name><argument_list pos:start="81:19" pos:end="83:47">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">errp</name></expr></argument>, <argument pos:start="81:26" pos:end="83:26"><expr pos:start="81:26" pos:end="83:26"><literal type="string" pos:start="81:26" pos:end="81:77">"unsupported VDI image (unaligned block map offset "</literal>

                   <literal type="string" pos:start="83:20" pos:end="83:26">"0x%x)"</literal></expr></argument>, <argument pos:start="83:29" pos:end="83:46"><expr pos:start="83:29" pos:end="83:46"><name pos:start="83:29" pos:end="83:46"><name pos:start="83:29" pos:end="83:34">header</name><operator pos:start="83:35" pos:end="83:35">.</operator><name pos:start="83:36" pos:end="83:46">offset_bmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:23"><expr pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <operator pos:start="85:15" pos:end="85:15">-</operator><name pos:start="85:16" pos:end="85:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:18">goto <name pos:start="87:14" pos:end="87:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="89:7" pos:end="101:5">else if <condition pos:start="89:15" pos:end="89:53">(<expr pos:start="89:16" pos:end="89:52"><name pos:start="89:16" pos:end="89:33"><name pos:start="89:16" pos:end="89:21">header</name><operator pos:start="89:22" pos:end="89:22">.</operator><name pos:start="89:23" pos:end="89:33">offset_data</name></name> <operator pos:start="89:35" pos:end="89:35">%</operator> <name pos:start="89:37" pos:end="89:47">SECTOR_SIZE</name> <operator pos:start="89:49" pos:end="89:50">!=</operator> <literal type="number" pos:start="89:52" pos:end="89:52">0</literal></expr>)</condition> <block pos:start="89:55" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:18">

        <comment type="block" pos:start="91:9" pos:end="91:75">/* We only support data blocks which start on a sector boundary. */</comment>

        <expr_stmt pos:start="93:9" pos:end="95:39"><expr pos:start="93:9" pos:end="95:38"><call pos:start="93:9" pos:end="95:38"><name pos:start="93:9" pos:end="93:18">error_setg</name><argument_list pos:start="93:19" pos:end="95:38">(<argument pos:start="93:20" pos:end="93:23"><expr pos:start="93:20" pos:end="93:23"><name pos:start="93:20" pos:end="93:23">errp</name></expr></argument>, <argument pos:start="93:26" pos:end="93:77"><expr pos:start="93:26" pos:end="93:77"><literal type="string" pos:start="93:26" pos:end="93:77">"unsupported VDI image (unaligned data offset 0x%x)"</literal></expr></argument>,

                   <argument pos:start="95:20" pos:end="95:37"><expr pos:start="95:20" pos:end="95:37"><name pos:start="95:20" pos:end="95:37"><name pos:start="95:20" pos:end="95:25">header</name><operator pos:start="95:26" pos:end="95:26">.</operator><name pos:start="95:27" pos:end="95:37">offset_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:23"><expr pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <operator pos:start="97:15" pos:end="97:15">-</operator><name pos:start="97:16" pos:end="97:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:18">goto <name pos:start="99:14" pos:end="99:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="101:7" pos:end="111:5">else if <condition pos:start="101:15" pos:end="101:49">(<expr pos:start="101:16" pos:end="101:48"><name pos:start="101:16" pos:end="101:33"><name pos:start="101:16" pos:end="101:21">header</name><operator pos:start="101:22" pos:end="101:22">.</operator><name pos:start="101:23" pos:end="101:33">sector_size</name></name> <operator pos:start="101:35" pos:end="101:36">!=</operator> <name pos:start="101:38" pos:end="101:48">SECTOR_SIZE</name></expr>)</condition> <block pos:start="101:51" pos:end="111:5">{<block_content pos:start="103:9" pos:end="109:18">

        <expr_stmt pos:start="103:9" pos:end="105:52"><expr pos:start="103:9" pos:end="105:51"><call pos:start="103:9" pos:end="105:51"><name pos:start="103:9" pos:end="103:18">error_setg</name><argument_list pos:start="103:19" pos:end="105:51">(<argument pos:start="103:20" pos:end="103:23"><expr pos:start="103:20" pos:end="103:23"><name pos:start="103:20" pos:end="103:23">errp</name></expr></argument>, <argument pos:start="103:26" pos:end="103:75"><expr pos:start="103:26" pos:end="103:75"><literal type="string" pos:start="103:26" pos:end="103:75">"unsupported VDI image (sector size %u is not %u)"</literal></expr></argument>,

                   <argument pos:start="105:20" pos:end="105:37"><expr pos:start="105:20" pos:end="105:37"><name pos:start="105:20" pos:end="105:37"><name pos:start="105:20" pos:end="105:25">header</name><operator pos:start="105:26" pos:end="105:26">.</operator><name pos:start="105:27" pos:end="105:37">sector_size</name></name></expr></argument>, <argument pos:start="105:40" pos:end="105:50"><expr pos:start="105:40" pos:end="105:50"><name pos:start="105:40" pos:end="105:50">SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:23"><expr pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <operator pos:start="107:15" pos:end="107:15">-</operator><name pos:start="107:16" pos:end="107:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:18">goto <name pos:start="109:14" pos:end="109:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="111:7" pos:end="121:5">else if <condition pos:start="111:15" pos:end="111:44">(<expr pos:start="111:16" pos:end="111:43"><name pos:start="111:16" pos:end="111:32"><name pos:start="111:16" pos:end="111:21">header</name><operator pos:start="111:22" pos:end="111:22">.</operator><name pos:start="111:23" pos:end="111:32">block_size</name></name> <operator pos:start="111:34" pos:end="111:35">!=</operator> <literal type="number" pos:start="111:37" pos:end="111:37">1</literal> <operator pos:start="111:39" pos:end="111:39">*</operator> <name pos:start="111:41" pos:end="111:43">MiB</name></expr>)</condition> <block pos:start="111:46" pos:end="121:5">{<block_content pos:start="113:9" pos:end="119:18">

        <expr_stmt pos:start="113:9" pos:end="115:47"><expr pos:start="113:9" pos:end="115:46"><call pos:start="113:9" pos:end="115:46"><name pos:start="113:9" pos:end="113:18">error_setg</name><argument_list pos:start="113:19" pos:end="115:46">(<argument pos:start="113:20" pos:end="113:23"><expr pos:start="113:20" pos:end="113:23"><name pos:start="113:20" pos:end="113:23">errp</name></expr></argument>, <argument pos:start="113:26" pos:end="113:75"><expr pos:start="113:26" pos:end="113:75"><literal type="string" pos:start="113:26" pos:end="113:75">"unsupported VDI image (sector size %u is not %u)"</literal></expr></argument>,

                   <argument pos:start="115:20" pos:end="115:36"><expr pos:start="115:20" pos:end="115:36"><name pos:start="115:20" pos:end="115:36"><name pos:start="115:20" pos:end="115:25">header</name><operator pos:start="115:26" pos:end="115:26">.</operator><name pos:start="115:27" pos:end="115:36">block_size</name></name></expr></argument>, <argument pos:start="115:39" pos:end="115:45"><expr pos:start="115:39" pos:end="115:45"><literal type="number" pos:start="115:39" pos:end="115:39">1</literal> <operator pos:start="115:41" pos:end="115:41">*</operator> <name pos:start="115:43" pos:end="115:45">MiB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:23"><expr pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <operator pos:start="117:15" pos:end="117:15">-</operator><name pos:start="117:16" pos:end="117:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="119:9" pos:end="119:18">goto <name pos:start="119:14" pos:end="119:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="121:7" pos:end="137:5">else if <condition pos:start="121:15" pos:end="123:68">(<expr pos:start="121:16" pos:end="123:67"><name pos:start="121:16" pos:end="121:31"><name pos:start="121:16" pos:end="121:21">header</name><operator pos:start="121:22" pos:end="121:22">.</operator><name pos:start="121:23" pos:end="121:31">disk_size</name></name> <operator pos:start="121:33" pos:end="121:33">&gt;</operator>

               <operator pos:start="123:16" pos:end="123:16">(</operator><name pos:start="123:17" pos:end="123:24">uint64_t</name><operator pos:start="123:25" pos:end="123:25">)</operator><name pos:start="123:26" pos:end="123:47"><name pos:start="123:26" pos:end="123:31">header</name><operator pos:start="123:32" pos:end="123:32">.</operator><name pos:start="123:33" pos:end="123:47">blocks_in_image</name></name> <operator pos:start="123:49" pos:end="123:49">*</operator> <name pos:start="123:51" pos:end="123:67"><name pos:start="123:51" pos:end="123:56">header</name><operator pos:start="123:57" pos:end="123:57">.</operator><name pos:start="123:58" pos:end="123:67">block_size</name></name></expr>)</condition> <block pos:start="123:70" pos:end="137:5">{<block_content pos:start="125:9" pos:end="135:18">

        <expr_stmt pos:start="125:9" pos:end="131:73"><expr pos:start="125:9" pos:end="131:72"><call pos:start="125:9" pos:end="131:72"><name pos:start="125:9" pos:end="125:18">error_setg</name><argument_list pos:start="125:19" pos:end="131:72">(<argument pos:start="125:20" pos:end="125:23"><expr pos:start="125:20" pos:end="125:23"><name pos:start="125:20" pos:end="125:23">errp</name></expr></argument>, <argument pos:start="125:26" pos:end="127:59"><expr pos:start="125:26" pos:end="127:59"><literal type="string" pos:start="125:26" pos:end="125:61">"unsupported VDI image (disk size %"</literal> <name pos:start="125:63" pos:end="125:68">PRIu64</name> <literal type="string" pos:start="125:70" pos:end="125:73">", "</literal>

                   <literal type="string" pos:start="127:20" pos:end="127:48">"image bitmap has room for %"</literal> <name pos:start="127:50" pos:end="127:55">PRIu64</name> <literal type="string" pos:start="127:57" pos:end="127:59">")"</literal></expr></argument>,

                   <argument pos:start="129:20" pos:end="129:35"><expr pos:start="129:20" pos:end="129:35"><name pos:start="129:20" pos:end="129:35"><name pos:start="129:20" pos:end="129:25">header</name><operator pos:start="129:26" pos:end="129:26">.</operator><name pos:start="129:27" pos:end="129:35">disk_size</name></name></expr></argument>,

                   <argument pos:start="131:20" pos:end="131:71"><expr pos:start="131:20" pos:end="131:71"><operator pos:start="131:20" pos:end="131:20">(</operator><name pos:start="131:21" pos:end="131:28">uint64_t</name><operator pos:start="131:29" pos:end="131:29">)</operator><name pos:start="131:30" pos:end="131:51"><name pos:start="131:30" pos:end="131:35">header</name><operator pos:start="131:36" pos:end="131:36">.</operator><name pos:start="131:37" pos:end="131:51">blocks_in_image</name></name> <operator pos:start="131:53" pos:end="131:53">*</operator> <name pos:start="131:55" pos:end="131:71"><name pos:start="131:55" pos:end="131:60">header</name><operator pos:start="131:61" pos:end="131:61">.</operator><name pos:start="131:62" pos:end="131:71">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:23"><expr pos:start="133:9" pos:end="133:22"><name pos:start="133:9" pos:end="133:11">ret</name> <operator pos:start="133:13" pos:end="133:13">=</operator> <operator pos:start="133:15" pos:end="133:15">-</operator><name pos:start="133:16" pos:end="133:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="135:9" pos:end="135:18">goto <name pos:start="135:14" pos:end="135:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="137:7" pos:end="145:5">else if <condition pos:start="137:15" pos:end="137:47">(<expr pos:start="137:16" pos:end="137:46"><operator pos:start="137:16" pos:end="137:16">!</operator><call pos:start="137:17" pos:end="137:46"><name pos:start="137:17" pos:end="137:28">uuid_is_null</name><argument_list pos:start="137:29" pos:end="137:46">(<argument pos:start="137:30" pos:end="137:45"><expr pos:start="137:30" pos:end="137:45"><name pos:start="137:30" pos:end="137:45"><name pos:start="137:30" pos:end="137:35">header</name><operator pos:start="137:36" pos:end="137:36">.</operator><name pos:start="137:37" pos:end="137:45">uuid_link</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:49" pos:end="145:5">{<block_content pos:start="139:9" pos:end="143:18">

        <expr_stmt pos:start="139:9" pos:end="139:71"><expr pos:start="139:9" pos:end="139:70"><call pos:start="139:9" pos:end="139:70"><name pos:start="139:9" pos:end="139:18">error_setg</name><argument_list pos:start="139:19" pos:end="139:70">(<argument pos:start="139:20" pos:end="139:23"><expr pos:start="139:20" pos:end="139:23"><name pos:start="139:20" pos:end="139:23">errp</name></expr></argument>, <argument pos:start="139:26" pos:end="139:69"><expr pos:start="139:26" pos:end="139:69"><literal type="string" pos:start="139:26" pos:end="139:69">"unsupported VDI image (non-NULL link UUID)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:23"><expr pos:start="141:9" pos:end="141:22"><name pos:start="141:9" pos:end="141:11">ret</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <operator pos:start="141:15" pos:end="141:15">-</operator><name pos:start="141:16" pos:end="141:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="143:9" pos:end="143:18">goto <name pos:start="143:14" pos:end="143:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="145:7" pos:end="153:5">else if <condition pos:start="145:15" pos:end="145:49">(<expr pos:start="145:16" pos:end="145:48"><operator pos:start="145:16" pos:end="145:16">!</operator><call pos:start="145:17" pos:end="145:48"><name pos:start="145:17" pos:end="145:28">uuid_is_null</name><argument_list pos:start="145:29" pos:end="145:48">(<argument pos:start="145:30" pos:end="145:47"><expr pos:start="145:30" pos:end="145:47"><name pos:start="145:30" pos:end="145:47"><name pos:start="145:30" pos:end="145:35">header</name><operator pos:start="145:36" pos:end="145:36">.</operator><name pos:start="145:37" pos:end="145:47">uuid_parent</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:51" pos:end="153:5">{<block_content pos:start="147:9" pos:end="151:18">

        <expr_stmt pos:start="147:9" pos:end="147:73"><expr pos:start="147:9" pos:end="147:72"><call pos:start="147:9" pos:end="147:72"><name pos:start="147:9" pos:end="147:18">error_setg</name><argument_list pos:start="147:19" pos:end="147:72">(<argument pos:start="147:20" pos:end="147:23"><expr pos:start="147:20" pos:end="147:23"><name pos:start="147:20" pos:end="147:23">errp</name></expr></argument>, <argument pos:start="147:26" pos:end="147:71"><expr pos:start="147:26" pos:end="147:71"><literal type="string" pos:start="147:26" pos:end="147:71">"unsupported VDI image (non-NULL parent UUID)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:23"><expr pos:start="149:9" pos:end="149:22"><name pos:start="149:9" pos:end="149:11">ret</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <operator pos:start="149:15" pos:end="149:15">-</operator><name pos:start="149:16" pos:end="149:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="151:9" pos:end="151:18">goto <name pos:start="151:14" pos:end="151:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:55"><expr pos:start="157:5" pos:end="157:54"><name pos:start="157:5" pos:end="157:21"><name pos:start="157:5" pos:end="157:6">bs</name><operator pos:start="157:7" pos:end="157:8">-&gt;</operator><name pos:start="157:9" pos:end="157:21">total_sectors</name></name> <operator pos:start="157:23" pos:end="157:23">=</operator> <name pos:start="157:25" pos:end="157:40"><name pos:start="157:25" pos:end="157:30">header</name><operator pos:start="157:31" pos:end="157:31">.</operator><name pos:start="157:32" pos:end="157:40">disk_size</name></name> <operator pos:start="157:42" pos:end="157:42">/</operator> <name pos:start="157:44" pos:end="157:54">SECTOR_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:38"><expr pos:start="161:5" pos:end="161:37"><name pos:start="161:5" pos:end="161:17"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:17">block_size</name></name> <operator pos:start="161:19" pos:end="161:19">=</operator> <name pos:start="161:21" pos:end="161:37"><name pos:start="161:21" pos:end="161:26">header</name><operator pos:start="161:27" pos:end="161:27">.</operator><name pos:start="161:28" pos:end="161:37">block_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:55"><expr pos:start="163:5" pos:end="163:54"><name pos:start="163:5" pos:end="163:20"><name pos:start="163:5" pos:end="163:5">s</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:20">block_sectors</name></name> <operator pos:start="163:22" pos:end="163:22">=</operator> <name pos:start="163:24" pos:end="163:40"><name pos:start="163:24" pos:end="163:29">header</name><operator pos:start="163:30" pos:end="163:30">.</operator><name pos:start="163:31" pos:end="163:40">block_size</name></name> <operator pos:start="163:42" pos:end="163:42">/</operator> <name pos:start="163:44" pos:end="163:54">SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:54"><expr pos:start="165:5" pos:end="165:53"><name pos:start="165:5" pos:end="165:18"><name pos:start="165:5" pos:end="165:5">s</name><operator pos:start="165:6" pos:end="165:7">-&gt;</operator><name pos:start="165:8" pos:end="165:18">bmap_sector</name></name> <operator pos:start="165:20" pos:end="165:20">=</operator> <name pos:start="165:22" pos:end="165:39"><name pos:start="165:22" pos:end="165:27">header</name><operator pos:start="165:28" pos:end="165:28">.</operator><name pos:start="165:29" pos:end="165:39">offset_bmap</name></name> <operator pos:start="165:41" pos:end="165:41">/</operator> <name pos:start="165:43" pos:end="165:53">SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:23"><expr pos:start="167:5" pos:end="167:22"><name pos:start="167:5" pos:end="167:13"><name pos:start="167:5" pos:end="167:5">s</name><operator pos:start="167:6" pos:end="167:7">-&gt;</operator><name pos:start="167:8" pos:end="167:13">header</name></name> <operator pos:start="167:15" pos:end="167:15">=</operator> <name pos:start="167:17" pos:end="167:22">header</name></expr>;</expr_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:58"><expr pos:start="171:5" pos:end="171:57"><name pos:start="171:5" pos:end="171:13">bmap_size</name> <operator pos:start="171:15" pos:end="171:15">=</operator> <name pos:start="171:17" pos:end="171:38"><name pos:start="171:17" pos:end="171:22">header</name><operator pos:start="171:23" pos:end="171:23">.</operator><name pos:start="171:24" pos:end="171:38">blocks_in_image</name></name> <operator pos:start="171:40" pos:end="171:40">*</operator> <sizeof pos:start="171:42" pos:end="171:57">sizeof<argument_list pos:start="171:48" pos:end="171:57">(<argument pos:start="171:49" pos:end="171:56"><expr pos:start="171:49" pos:end="171:56"><name pos:start="171:49" pos:end="171:56">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:60"><expr pos:start="173:5" pos:end="173:59"><name pos:start="173:5" pos:end="173:13">bmap_size</name> <operator pos:start="173:15" pos:end="173:15">=</operator> <operator pos:start="173:17" pos:end="173:17">(</operator><name pos:start="173:18" pos:end="173:26">bmap_size</name> <operator pos:start="173:28" pos:end="173:28">+</operator> <name pos:start="173:30" pos:end="173:40">SECTOR_SIZE</name> <operator pos:start="173:42" pos:end="173:42">-</operator> <literal type="number" pos:start="173:44" pos:end="173:44">1</literal><operator pos:start="173:45" pos:end="173:45">)</operator> <operator pos:start="173:47" pos:end="173:47">/</operator> <name pos:start="173:49" pos:end="173:59">SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:48"><expr pos:start="175:5" pos:end="175:47"><name pos:start="175:5" pos:end="175:11"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:11">bmap</name></name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="175:47"><name pos:start="175:15" pos:end="175:22">g_malloc</name><argument_list pos:start="175:23" pos:end="175:47">(<argument pos:start="175:24" pos:end="175:46"><expr pos:start="175:24" pos:end="175:46"><name pos:start="175:24" pos:end="175:32">bmap_size</name> <operator pos:start="175:34" pos:end="175:34">*</operator> <name pos:start="175:36" pos:end="175:46">SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:77"><expr pos:start="177:5" pos:end="177:76"><name pos:start="177:5" pos:end="177:7">ret</name> <operator pos:start="177:9" pos:end="177:9">=</operator> <call pos:start="177:11" pos:end="177:76"><name pos:start="177:11" pos:end="177:19">bdrv_read</name><argument_list pos:start="177:20" pos:end="177:76">(<argument pos:start="177:21" pos:end="177:28"><expr pos:start="177:21" pos:end="177:28"><name pos:start="177:21" pos:end="177:28"><name pos:start="177:21" pos:end="177:22">bs</name><operator pos:start="177:23" pos:end="177:24">-&gt;</operator><name pos:start="177:25" pos:end="177:28">file</name></name></expr></argument>, <argument pos:start="177:31" pos:end="177:44"><expr pos:start="177:31" pos:end="177:44"><name pos:start="177:31" pos:end="177:44"><name pos:start="177:31" pos:end="177:31">s</name><operator pos:start="177:32" pos:end="177:33">-&gt;</operator><name pos:start="177:34" pos:end="177:44">bmap_sector</name></name></expr></argument>, <argument pos:start="177:47" pos:end="177:64"><expr pos:start="177:47" pos:end="177:64"><operator pos:start="177:47" pos:end="177:47">(</operator><name pos:start="177:48" pos:end="177:54">uint8_t</name> <operator pos:start="177:56" pos:end="177:56">*</operator><operator pos:start="177:57" pos:end="177:57">)</operator><name pos:start="177:58" pos:end="177:64"><name pos:start="177:58" pos:end="177:58">s</name><operator pos:start="177:59" pos:end="177:60">-&gt;</operator><name pos:start="177:61" pos:end="177:64">bmap</name></name></expr></argument>, <argument pos:start="177:67" pos:end="177:75"><expr pos:start="177:67" pos:end="177:75"><name pos:start="177:67" pos:end="177:75">bmap_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="179:5" pos:end="183:5"><if pos:start="179:5" pos:end="183:5">if <condition pos:start="179:8" pos:end="179:16">(<expr pos:start="179:9" pos:end="179:15"><name pos:start="179:9" pos:end="179:11">ret</name> <operator pos:start="179:13" pos:end="179:13">&lt;</operator> <literal type="number" pos:start="179:15" pos:end="179:15">0</literal></expr>)</condition> <block pos:start="179:18" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:28">

        <goto pos:start="181:9" pos:end="181:28">goto <name pos:start="181:14" pos:end="181:27">fail_free_bmap</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="187:5" pos:end="187:52">/* Disable migration when vdi images are used */</comment>

    <expr_stmt pos:start="189:5" pos:end="193:56"><expr pos:start="189:5" pos:end="193:55"><call pos:start="189:5" pos:end="193:55"><name pos:start="189:5" pos:end="189:13">error_set</name><argument_list pos:start="189:14" pos:end="193:55">(<argument pos:start="189:15" pos:end="189:35"><expr pos:start="189:15" pos:end="189:35"><operator pos:start="189:15" pos:end="189:15">&amp;</operator><name pos:start="189:16" pos:end="189:35"><name pos:start="189:16" pos:end="189:16">s</name><operator pos:start="189:17" pos:end="189:18">-&gt;</operator><name pos:start="189:19" pos:end="189:35">migration_blocker</name></name></expr></argument>,

              <argument pos:start="191:15" pos:end="191:53"><expr pos:start="191:15" pos:end="191:53"><name pos:start="191:15" pos:end="191:53">QERR_BLOCK_FORMAT_FEATURE_NOT_SUPPORTED</name></expr></argument>,

              <argument pos:start="193:15" pos:end="193:19"><expr pos:start="193:15" pos:end="193:19"><literal type="string" pos:start="193:15" pos:end="193:19">"vdi"</literal></expr></argument>, <argument pos:start="193:22" pos:end="193:36"><expr pos:start="193:22" pos:end="193:36"><name pos:start="193:22" pos:end="193:36"><name pos:start="193:22" pos:end="193:23">bs</name><operator pos:start="193:24" pos:end="193:25">-&gt;</operator><name pos:start="193:26" pos:end="193:36">device_name</name></name></expr></argument>, <argument pos:start="193:39" pos:end="193:54"><expr pos:start="193:39" pos:end="193:54"><literal type="string" pos:start="193:39" pos:end="193:54">"live migration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:46"><expr pos:start="195:5" pos:end="195:45"><call pos:start="195:5" pos:end="195:45"><name pos:start="195:5" pos:end="195:23">migrate_add_blocker</name><argument_list pos:start="195:24" pos:end="195:45">(<argument pos:start="195:25" pos:end="195:44"><expr pos:start="195:25" pos:end="195:44"><name pos:start="195:25" pos:end="195:44"><name pos:start="195:25" pos:end="195:25">s</name><operator pos:start="195:26" pos:end="195:27">-&gt;</operator><name pos:start="195:28" pos:end="195:44">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="199:5" pos:end="199:13">return <expr pos:start="199:12" pos:end="199:12"><literal type="number" pos:start="199:12" pos:end="199:12">0</literal></expr>;</return>



 <label pos:start="203:2" pos:end="203:16"><name pos:start="203:2" pos:end="203:15">fail_free_bmap</name>:</label>

    <expr_stmt pos:start="205:5" pos:end="205:20"><expr pos:start="205:5" pos:end="205:19"><call pos:start="205:5" pos:end="205:19"><name pos:start="205:5" pos:end="205:10">g_free</name><argument_list pos:start="205:11" pos:end="205:19">(<argument pos:start="205:12" pos:end="205:18"><expr pos:start="205:12" pos:end="205:18"><name pos:start="205:12" pos:end="205:18"><name pos:start="205:12" pos:end="205:12">s</name><operator pos:start="205:13" pos:end="205:14">-&gt;</operator><name pos:start="205:15" pos:end="205:18">bmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



 <label pos:start="209:2" pos:end="209:6"><name pos:start="209:2" pos:end="209:5">fail</name>:</label>

    <return pos:start="211:5" pos:end="211:15">return <expr pos:start="211:12" pos:end="211:14"><name pos:start="211:12" pos:end="211:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
