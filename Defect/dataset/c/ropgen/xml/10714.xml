<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10714.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">QString</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:40">qstring_from_escaped_str</name><parameter_list pos:start="1:41" pos:end="1:81">(<parameter pos:start="1:42" pos:end="1:64"><decl pos:start="1:42" pos:end="1:64"><type pos:start="1:42" pos:end="1:64"><name pos:start="1:42" pos:end="1:58">JSONParserContext</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">ctxt</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:80"><decl pos:start="1:67" pos:end="1:80"><type pos:start="1:67" pos:end="1:80"><name pos:start="1:67" pos:end="1:73">QObject</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:80">token</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="193:1">{<block_content pos:start="5:5" pos:end="191:16">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">ptr</name> <init pos:start="5:21" pos:end="5:44">= <expr pos:start="5:23" pos:end="5:44"><call pos:start="5:23" pos:end="5:44"><name pos:start="5:23" pos:end="5:37">token_get_value</name><argument_list pos:start="5:38" pos:end="5:44">(<argument pos:start="5:39" pos:end="5:43"><expr pos:start="5:39" pos:end="5:43"><name pos:start="5:39" pos:end="5:43">token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">QString</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">double_quote</name> <init pos:start="9:22" pos:end="9:24">= <expr pos:start="9:24" pos:end="9:24"><literal type="number" pos:start="9:24" pos:end="9:24">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:20">(<expr pos:start="13:9" pos:end="13:19"><operator pos:start="13:9" pos:end="13:9">*</operator><name pos:start="13:10" pos:end="13:12">ptr</name> <operator pos:start="13:14" pos:end="13:15">==</operator> <literal type="char" pos:start="13:17" pos:end="13:19">'"'</literal></expr>)</condition> <block pos:start="13:22" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:25">

        <expr_stmt pos:start="15:9" pos:end="15:25"><expr pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:20">double_quote</name> <operator pos:start="15:22" pos:end="15:22">=</operator> <literal type="number" pos:start="15:24" pos:end="15:24">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="17:7" pos:end="21:5">else <block pos:start="17:12" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:25">

        <expr_stmt pos:start="19:9" pos:end="19:25"><expr pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:20">double_quote</name> <operator pos:start="19:22" pos:end="19:22">=</operator> <literal type="number" pos:start="19:24" pos:end="19:24">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:10"><expr pos:start="23:5" pos:end="23:9"><name pos:start="23:5" pos:end="23:7">ptr</name><operator pos:start="23:8" pos:end="23:9">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:24"><expr pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:7">str</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:23"><name pos:start="27:11" pos:end="27:21">qstring_new</name><argument_list pos:start="27:22" pos:end="27:23">()</argument_list></call></expr>;</expr_stmt>

    <while pos:start="29:5" pos:end="179:5">while <condition pos:start="29:11" pos:end="31:78">(<expr pos:start="29:12" pos:end="31:77"><operator pos:start="29:12" pos:end="29:12">*</operator><name pos:start="29:13" pos:end="29:15">ptr</name> <operator pos:start="29:17" pos:end="29:18">&amp;&amp;</operator> 

           <operator pos:start="31:12" pos:end="31:12">(</operator><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:25">double_quote</name> <operator pos:start="31:27" pos:end="31:28">&amp;&amp;</operator> <operator pos:start="31:30" pos:end="31:30">*</operator><name pos:start="31:31" pos:end="31:33">ptr</name> <operator pos:start="31:35" pos:end="31:36">!=</operator> <literal type="char" pos:start="31:38" pos:end="31:40">'"'</literal><operator pos:start="31:41" pos:end="31:41">)</operator> <operator pos:start="31:43" pos:end="31:44">||</operator> <operator pos:start="31:46" pos:end="31:46">(</operator><operator pos:start="31:47" pos:end="31:47">!</operator><name pos:start="31:48" pos:end="31:59">double_quote</name> <operator pos:start="31:61" pos:end="31:62">&amp;&amp;</operator> <operator pos:start="31:64" pos:end="31:64">*</operator><name pos:start="31:65" pos:end="31:67">ptr</name> <operator pos:start="31:69" pos:end="31:70">!=</operator> <literal type="char" pos:start="31:72" pos:end="31:75">'\''</literal><operator pos:start="31:76" pos:end="31:76">)</operator><operator pos:start="31:77" pos:end="31:77">)</operator></expr>)</condition> <block pos:start="31:80" pos:end="179:5">{<block_content pos:start="33:9" pos:end="177:9">

        <if_stmt pos:start="33:9" pos:end="177:9"><if pos:start="33:9" pos:end="163:9">if <condition pos:start="33:12" pos:end="33:25">(<expr pos:start="33:13" pos:end="33:24"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:16">ptr</name> <operator pos:start="33:18" pos:end="33:19">==</operator> <literal type="char" pos:start="33:21" pos:end="33:24">'\\'</literal></expr>)</condition> <block pos:start="33:27" pos:end="163:9">{<block_content pos:start="35:13" pos:end="161:13">

            <expr_stmt pos:start="35:13" pos:end="35:18"><expr pos:start="35:13" pos:end="35:17"><name pos:start="35:13" pos:end="35:15">ptr</name><operator pos:start="35:16" pos:end="35:17">++</operator></expr>;</expr_stmt>



            <switch pos:start="39:13" pos:end="161:13">switch <condition pos:start="39:20" pos:end="39:25">(<expr pos:start="39:21" pos:end="39:24"><operator pos:start="39:21" pos:end="39:21">*</operator><name pos:start="39:22" pos:end="39:24">ptr</name></expr>)</condition> <block pos:start="39:27" pos:end="161:13">{<block_content pos:start="41:13" pos:end="159:25">

            <case pos:start="41:13" pos:end="41:21">case <expr pos:start="41:18" pos:end="41:20"><literal type="char" pos:start="41:18" pos:end="41:20">'"'</literal></expr>:</case>

                <expr_stmt pos:start="43:17" pos:end="43:42"><expr pos:start="43:17" pos:end="43:41"><call pos:start="43:17" pos:end="43:41"><name pos:start="43:17" pos:end="43:30">qstring_append</name><argument_list pos:start="43:31" pos:end="43:41">(<argument pos:start="43:32" pos:end="43:34"><expr pos:start="43:32" pos:end="43:34"><name pos:start="43:32" pos:end="43:34">str</name></expr></argument>, <argument pos:start="43:37" pos:end="43:40"><expr pos:start="43:37" pos:end="43:40"><literal type="string" pos:start="43:37" pos:end="43:40">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:21"><name pos:start="45:17" pos:end="45:19">ptr</name><operator pos:start="45:20" pos:end="45:21">++</operator></expr>;</expr_stmt>

                <break pos:start="47:17" pos:end="47:22">break;</break>

            <case pos:start="49:13" pos:end="49:22">case <expr pos:start="49:18" pos:end="49:21"><literal type="char" pos:start="49:18" pos:end="49:21">'\''</literal></expr>:</case>

                <expr_stmt pos:start="51:17" pos:end="51:41"><expr pos:start="51:17" pos:end="51:40"><call pos:start="51:17" pos:end="51:40"><name pos:start="51:17" pos:end="51:30">qstring_append</name><argument_list pos:start="51:31" pos:end="51:40">(<argument pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><name pos:start="51:32" pos:end="51:34">str</name></expr></argument>, <argument pos:start="51:37" pos:end="51:39"><expr pos:start="51:37" pos:end="51:39"><literal type="string" pos:start="51:37" pos:end="51:39">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:21"><name pos:start="53:17" pos:end="53:19">ptr</name><operator pos:start="53:20" pos:end="53:21">++</operator></expr>;</expr_stmt>

                <break pos:start="55:17" pos:end="55:22">break;</break>

            <case pos:start="57:13" pos:end="57:22">case <expr pos:start="57:18" pos:end="57:21"><literal type="char" pos:start="57:18" pos:end="57:21">'\\'</literal></expr>:</case>

                <expr_stmt pos:start="59:17" pos:end="59:42"><expr pos:start="59:17" pos:end="59:41"><call pos:start="59:17" pos:end="59:41"><name pos:start="59:17" pos:end="59:30">qstring_append</name><argument_list pos:start="59:31" pos:end="59:41">(<argument pos:start="59:32" pos:end="59:34"><expr pos:start="59:32" pos:end="59:34"><name pos:start="59:32" pos:end="59:34">str</name></expr></argument>, <argument pos:start="59:37" pos:end="59:40"><expr pos:start="59:37" pos:end="59:40"><literal type="string" pos:start="59:37" pos:end="59:40">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:22"><expr pos:start="61:17" pos:end="61:21"><name pos:start="61:17" pos:end="61:19">ptr</name><operator pos:start="61:20" pos:end="61:21">++</operator></expr>;</expr_stmt>

                <break pos:start="63:17" pos:end="63:22">break;</break>

            <case pos:start="65:13" pos:end="65:21">case <expr pos:start="65:18" pos:end="65:20"><literal type="char" pos:start="65:18" pos:end="65:20">'/'</literal></expr>:</case>

                <expr_stmt pos:start="67:17" pos:end="67:41"><expr pos:start="67:17" pos:end="67:40"><call pos:start="67:17" pos:end="67:40"><name pos:start="67:17" pos:end="67:30">qstring_append</name><argument_list pos:start="67:31" pos:end="67:40">(<argument pos:start="67:32" pos:end="67:34"><expr pos:start="67:32" pos:end="67:34"><name pos:start="67:32" pos:end="67:34">str</name></expr></argument>, <argument pos:start="67:37" pos:end="67:39"><expr pos:start="67:37" pos:end="67:39"><literal type="string" pos:start="67:37" pos:end="67:39">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:22"><expr pos:start="69:17" pos:end="69:21"><name pos:start="69:17" pos:end="69:19">ptr</name><operator pos:start="69:20" pos:end="69:21">++</operator></expr>;</expr_stmt>

                <break pos:start="71:17" pos:end="71:22">break;</break>

            <case pos:start="73:13" pos:end="73:21">case <expr pos:start="73:18" pos:end="73:20"><literal type="char" pos:start="73:18" pos:end="73:20">'b'</literal></expr>:</case>

                <expr_stmt pos:start="75:17" pos:end="75:42"><expr pos:start="75:17" pos:end="75:41"><call pos:start="75:17" pos:end="75:41"><name pos:start="75:17" pos:end="75:30">qstring_append</name><argument_list pos:start="75:31" pos:end="75:41">(<argument pos:start="75:32" pos:end="75:34"><expr pos:start="75:32" pos:end="75:34"><name pos:start="75:32" pos:end="75:34">str</name></expr></argument>, <argument pos:start="75:37" pos:end="75:40"><expr pos:start="75:37" pos:end="75:40"><literal type="string" pos:start="75:37" pos:end="75:40">"\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:22"><expr pos:start="77:17" pos:end="77:21"><name pos:start="77:17" pos:end="77:19">ptr</name><operator pos:start="77:20" pos:end="77:21">++</operator></expr>;</expr_stmt>

                <break pos:start="79:17" pos:end="79:22">break;</break>

            <case pos:start="81:13" pos:end="81:21">case <expr pos:start="81:18" pos:end="81:20"><literal type="char" pos:start="81:18" pos:end="81:20">'f'</literal></expr>:</case>

                <expr_stmt pos:start="83:17" pos:end="83:42"><expr pos:start="83:17" pos:end="83:41"><call pos:start="83:17" pos:end="83:41"><name pos:start="83:17" pos:end="83:30">qstring_append</name><argument_list pos:start="83:31" pos:end="83:41">(<argument pos:start="83:32" pos:end="83:34"><expr pos:start="83:32" pos:end="83:34"><name pos:start="83:32" pos:end="83:34">str</name></expr></argument>, <argument pos:start="83:37" pos:end="83:40"><expr pos:start="83:37" pos:end="83:40"><literal type="string" pos:start="83:37" pos:end="83:40">"\f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:22"><expr pos:start="85:17" pos:end="85:21"><name pos:start="85:17" pos:end="85:19">ptr</name><operator pos:start="85:20" pos:end="85:21">++</operator></expr>;</expr_stmt>

                <break pos:start="87:17" pos:end="87:22">break;</break>

            <case pos:start="89:13" pos:end="89:21">case <expr pos:start="89:18" pos:end="89:20"><literal type="char" pos:start="89:18" pos:end="89:20">'n'</literal></expr>:</case>

                <expr_stmt pos:start="91:17" pos:end="91:42"><expr pos:start="91:17" pos:end="91:41"><call pos:start="91:17" pos:end="91:41"><name pos:start="91:17" pos:end="91:30">qstring_append</name><argument_list pos:start="91:31" pos:end="91:41">(<argument pos:start="91:32" pos:end="91:34"><expr pos:start="91:32" pos:end="91:34"><name pos:start="91:32" pos:end="91:34">str</name></expr></argument>, <argument pos:start="91:37" pos:end="91:40"><expr pos:start="91:37" pos:end="91:40"><literal type="string" pos:start="91:37" pos:end="91:40">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:22"><expr pos:start="93:17" pos:end="93:21"><name pos:start="93:17" pos:end="93:19">ptr</name><operator pos:start="93:20" pos:end="93:21">++</operator></expr>;</expr_stmt>

                <break pos:start="95:17" pos:end="95:22">break;</break>

            <case pos:start="97:13" pos:end="97:21">case <expr pos:start="97:18" pos:end="97:20"><literal type="char" pos:start="97:18" pos:end="97:20">'r'</literal></expr>:</case>

                <expr_stmt pos:start="99:17" pos:end="99:42"><expr pos:start="99:17" pos:end="99:41"><call pos:start="99:17" pos:end="99:41"><name pos:start="99:17" pos:end="99:30">qstring_append</name><argument_list pos:start="99:31" pos:end="99:41">(<argument pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><name pos:start="99:32" pos:end="99:34">str</name></expr></argument>, <argument pos:start="99:37" pos:end="99:40"><expr pos:start="99:37" pos:end="99:40"><literal type="string" pos:start="99:37" pos:end="99:40">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:22"><expr pos:start="101:17" pos:end="101:21"><name pos:start="101:17" pos:end="101:19">ptr</name><operator pos:start="101:20" pos:end="101:21">++</operator></expr>;</expr_stmt>

                <break pos:start="103:17" pos:end="103:22">break;</break>

            <case pos:start="105:13" pos:end="105:21">case <expr pos:start="105:18" pos:end="105:20"><literal type="char" pos:start="105:18" pos:end="105:20">'t'</literal></expr>:</case>

                <expr_stmt pos:start="107:17" pos:end="107:42"><expr pos:start="107:17" pos:end="107:41"><call pos:start="107:17" pos:end="107:41"><name pos:start="107:17" pos:end="107:30">qstring_append</name><argument_list pos:start="107:31" pos:end="107:41">(<argument pos:start="107:32" pos:end="107:34"><expr pos:start="107:32" pos:end="107:34"><name pos:start="107:32" pos:end="107:34">str</name></expr></argument>, <argument pos:start="107:37" pos:end="107:40"><expr pos:start="107:37" pos:end="107:40"><literal type="string" pos:start="107:37" pos:end="107:40">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:22"><expr pos:start="109:17" pos:end="109:21"><name pos:start="109:17" pos:end="109:19">ptr</name><operator pos:start="109:20" pos:end="109:21">++</operator></expr>;</expr_stmt>

                <break pos:start="111:17" pos:end="111:22">break;</break>

            <case pos:start="113:13" pos:end="113:21">case <expr pos:start="113:18" pos:end="113:20"><literal type="char" pos:start="113:18" pos:end="113:20">'u'</literal></expr>:</case> <block pos:start="113:23" pos:end="153:13">{<block_content pos:start="115:17" pos:end="151:47">

                <decl_stmt pos:start="115:17" pos:end="115:42"><decl pos:start="115:17" pos:end="115:41"><type pos:start="115:17" pos:end="115:24"><name pos:start="115:17" pos:end="115:24">uint16_t</name></type> <name pos:start="115:26" pos:end="115:37">unicode_char</name> <init pos:start="115:39" pos:end="115:41">= <expr pos:start="115:41" pos:end="115:41"><literal type="number" pos:start="115:41" pos:end="115:41">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="117:17" pos:end="117:34"><decl pos:start="117:17" pos:end="117:33"><type pos:start="117:17" pos:end="117:20"><name pos:start="117:17" pos:end="117:20">char</name></type> <name pos:start="117:22" pos:end="117:33"><name pos:start="117:22" pos:end="117:30">utf8_char</name><index pos:start="117:31" pos:end="117:33">[<expr pos:start="117:32" pos:end="117:32"><literal type="number" pos:start="117:32" pos:end="117:32">4</literal></expr>]</index></name></decl>;</decl_stmt>

                <decl_stmt pos:start="119:17" pos:end="119:26"><decl pos:start="119:17" pos:end="119:25"><type pos:start="119:17" pos:end="119:19"><name pos:start="119:17" pos:end="119:19">int</name></type> <name pos:start="119:21" pos:end="119:21">i</name> <init pos:start="119:23" pos:end="119:25">= <expr pos:start="119:25" pos:end="119:25"><literal type="number" pos:start="119:25" pos:end="119:25">0</literal></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="123:17" pos:end="123:22"><expr pos:start="123:17" pos:end="123:21"><name pos:start="123:17" pos:end="123:19">ptr</name><operator pos:start="123:20" pos:end="123:21">++</operator></expr>;</expr_stmt>



                <for pos:start="127:17" pos:end="145:17">for <control pos:start="127:21" pos:end="127:39">(<init pos:start="127:22" pos:end="127:27"><expr pos:start="127:22" pos:end="127:26"><name pos:start="127:22" pos:end="127:22">i</name> <operator pos:start="127:24" pos:end="127:24">=</operator> <literal type="number" pos:start="127:26" pos:end="127:26">0</literal></expr>;</init> <condition pos:start="127:29" pos:end="127:34"><expr pos:start="127:29" pos:end="127:33"><name pos:start="127:29" pos:end="127:29">i</name> <operator pos:start="127:31" pos:end="127:31">&lt;</operator> <literal type="number" pos:start="127:33" pos:end="127:33">4</literal></expr>;</condition> <incr pos:start="127:36" pos:end="127:38"><expr pos:start="127:36" pos:end="127:38"><name pos:start="127:36" pos:end="127:36">i</name><operator pos:start="127:37" pos:end="127:38">++</operator></expr></incr>)</control> <block pos:start="127:41" pos:end="145:17">{<block_content pos:start="129:21" pos:end="143:26">

                    <if_stmt pos:start="129:21" pos:end="141:21"><if pos:start="129:21" pos:end="133:21">if <condition pos:start="129:24" pos:end="129:44">(<expr pos:start="129:25" pos:end="129:43"><call pos:start="129:25" pos:end="129:43"><name pos:start="129:25" pos:end="129:37">qemu_isxdigit</name><argument_list pos:start="129:38" pos:end="129:43">(<argument pos:start="129:39" pos:end="129:42"><expr pos:start="129:39" pos:end="129:42"><operator pos:start="129:39" pos:end="129:39">*</operator><name pos:start="129:40" pos:end="129:42">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:46" pos:end="133:21">{<block_content pos:start="131:25" pos:end="131:75">

                        <expr_stmt pos:start="131:25" pos:end="131:75"><expr pos:start="131:25" pos:end="131:74"><name pos:start="131:25" pos:end="131:36">unicode_char</name> <operator pos:start="131:38" pos:end="131:39">|=</operator> <call pos:start="131:41" pos:end="131:57"><name pos:start="131:41" pos:end="131:51">hex2decimal</name><argument_list pos:start="131:52" pos:end="131:57">(<argument pos:start="131:53" pos:end="131:56"><expr pos:start="131:53" pos:end="131:56"><operator pos:start="131:53" pos:end="131:53">*</operator><name pos:start="131:54" pos:end="131:56">ptr</name></expr></argument>)</argument_list></call> <operator pos:start="131:59" pos:end="131:60">&lt;&lt;</operator> <operator pos:start="131:62" pos:end="131:62">(</operator><operator pos:start="131:63" pos:end="131:63">(</operator><literal type="number" pos:start="131:64" pos:end="131:66">3</literal> <operator pos:start="131:66" pos:end="131:66">-</operator> <name pos:start="131:68" pos:end="131:68">i</name><operator pos:start="131:69" pos:end="131:69">)</operator> <operator pos:start="131:71" pos:end="131:71">*</operator> <literal type="number" pos:start="131:73" pos:end="131:73">4</literal><operator pos:start="131:74" pos:end="131:74">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="133:23" pos:end="141:21">else <block pos:start="133:28" pos:end="141:21">{<block_content pos:start="135:25" pos:end="139:33">

                        <expr_stmt pos:start="135:25" pos:end="137:77"><expr pos:start="135:25" pos:end="137:76"><call pos:start="135:25" pos:end="137:76"><name pos:start="135:25" pos:end="135:35">parse_error</name><argument_list pos:start="135:36" pos:end="137:76">(<argument pos:start="135:37" pos:end="135:40"><expr pos:start="135:37" pos:end="135:40"><name pos:start="135:37" pos:end="135:40">ctxt</name></expr></argument>, <argument pos:start="135:43" pos:end="135:47"><expr pos:start="135:43" pos:end="135:47"><name pos:start="135:43" pos:end="135:47">token</name></expr></argument>,

                                    <argument pos:start="137:37" pos:end="137:75"><expr pos:start="137:37" pos:end="137:75"><literal type="string" pos:start="137:37" pos:end="137:75">"invalid hex escape sequence in string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="139:25" pos:end="139:33">goto <name pos:start="139:30" pos:end="139:32">out</name>;</goto>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="143:21" pos:end="143:26"><expr pos:start="143:21" pos:end="143:25"><name pos:start="143:21" pos:end="143:23">ptr</name><operator pos:start="143:24" pos:end="143:25">++</operator></expr>;</expr_stmt>

                </block_content>}</block></for>



                <expr_stmt pos:start="149:17" pos:end="149:74"><expr pos:start="149:17" pos:end="149:73"><call pos:start="149:17" pos:end="149:73"><name pos:start="149:17" pos:end="149:29">wchar_to_utf8</name><argument_list pos:start="149:30" pos:end="149:73">(<argument pos:start="149:31" pos:end="149:42"><expr pos:start="149:31" pos:end="149:42"><name pos:start="149:31" pos:end="149:42">unicode_char</name></expr></argument>, <argument pos:start="149:45" pos:end="149:53"><expr pos:start="149:45" pos:end="149:53"><name pos:start="149:45" pos:end="149:53">utf8_char</name></expr></argument>, <argument pos:start="149:56" pos:end="149:72"><expr pos:start="149:56" pos:end="149:72"><sizeof pos:start="149:56" pos:end="149:72">sizeof<argument_list pos:start="149:62" pos:end="149:72">(<argument pos:start="149:63" pos:end="149:71"><expr pos:start="149:63" pos:end="149:71"><name pos:start="149:63" pos:end="149:71">utf8_char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:47"><expr pos:start="151:17" pos:end="151:46"><call pos:start="151:17" pos:end="151:46"><name pos:start="151:17" pos:end="151:30">qstring_append</name><argument_list pos:start="151:31" pos:end="151:46">(<argument pos:start="151:32" pos:end="151:34"><expr pos:start="151:32" pos:end="151:34"><name pos:start="151:32" pos:end="151:34">str</name></expr></argument>, <argument pos:start="151:37" pos:end="151:45"><expr pos:start="151:37" pos:end="151:45"><name pos:start="151:37" pos:end="151:45">utf8_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>   <break pos:start="153:17" pos:end="153:22">break;</break>

            <default pos:start="155:13" pos:end="155:20">default:</default>

                <expr_stmt pos:start="157:17" pos:end="157:78"><expr pos:start="157:17" pos:end="157:77"><call pos:start="157:17" pos:end="157:77"><name pos:start="157:17" pos:end="157:27">parse_error</name><argument_list pos:start="157:28" pos:end="157:77">(<argument pos:start="157:29" pos:end="157:32"><expr pos:start="157:29" pos:end="157:32"><name pos:start="157:29" pos:end="157:32">ctxt</name></expr></argument>, <argument pos:start="157:35" pos:end="157:39"><expr pos:start="157:35" pos:end="157:39"><name pos:start="157:35" pos:end="157:39">token</name></expr></argument>, <argument pos:start="157:42" pos:end="157:76"><expr pos:start="157:42" pos:end="157:76"><literal type="string" pos:start="157:42" pos:end="157:76">"invalid escape sequence in string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="159:17" pos:end="159:25">goto <name pos:start="159:22" pos:end="159:24">out</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="163:11" pos:end="177:9">else <block pos:start="163:16" pos:end="177:9">{<block_content pos:start="165:13" pos:end="175:39">

            <decl_stmt pos:start="165:13" pos:end="165:26"><decl pos:start="165:13" pos:end="165:25"><type pos:start="165:13" pos:end="165:16"><name pos:start="165:13" pos:end="165:16">char</name></type> <name pos:start="165:18" pos:end="165:25"><name pos:start="165:18" pos:end="165:22">dummy</name><index pos:start="165:23" pos:end="165:25">[<expr pos:start="165:24" pos:end="165:24"><literal type="number" pos:start="165:24" pos:end="165:24">2</literal></expr>]</index></name></decl>;</decl_stmt>



            <expr_stmt pos:start="169:13" pos:end="169:30"><expr pos:start="169:13" pos:end="169:29"><name pos:start="169:13" pos:end="169:20"><name pos:start="169:13" pos:end="169:17">dummy</name><index pos:start="169:18" pos:end="169:20">[<expr pos:start="169:19" pos:end="169:19"><literal type="number" pos:start="169:19" pos:end="169:19">0</literal></expr>]</index></name> <operator pos:start="169:22" pos:end="169:22">=</operator> <operator pos:start="169:24" pos:end="169:24">*</operator><name pos:start="169:25" pos:end="169:27">ptr</name><operator pos:start="169:28" pos:end="169:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:25"><expr pos:start="171:13" pos:end="171:24"><name pos:start="171:13" pos:end="171:20"><name pos:start="171:13" pos:end="171:17">dummy</name><index pos:start="171:18" pos:end="171:20">[<expr pos:start="171:19" pos:end="171:19"><literal type="number" pos:start="171:19" pos:end="171:19">1</literal></expr>]</index></name> <operator pos:start="171:22" pos:end="171:22">=</operator> <literal type="number" pos:start="171:24" pos:end="171:24">0</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="175:13" pos:end="175:39"><expr pos:start="175:13" pos:end="175:38"><call pos:start="175:13" pos:end="175:38"><name pos:start="175:13" pos:end="175:26">qstring_append</name><argument_list pos:start="175:27" pos:end="175:38">(<argument pos:start="175:28" pos:end="175:30"><expr pos:start="175:28" pos:end="175:30"><name pos:start="175:28" pos:end="175:30">str</name></expr></argument>, <argument pos:start="175:33" pos:end="175:37"><expr pos:start="175:33" pos:end="175:37"><name pos:start="175:33" pos:end="175:37">dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <return pos:start="183:5" pos:end="183:15">return <expr pos:start="183:12" pos:end="183:14"><name pos:start="183:12" pos:end="183:14">str</name></expr>;</return>



<label pos:start="187:1" pos:end="187:4"><name pos:start="187:1" pos:end="187:3">out</name>:</label>

    <expr_stmt pos:start="189:5" pos:end="189:17"><expr pos:start="189:5" pos:end="189:16"><call pos:start="189:5" pos:end="189:16"><name pos:start="189:5" pos:end="189:11">QDECREF</name><argument_list pos:start="189:12" pos:end="189:16">(<argument pos:start="189:13" pos:end="189:15"><expr pos:start="189:13" pos:end="189:15"><name pos:start="189:13" pos:end="189:15">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="191:5" pos:end="191:16">return <expr pos:start="191:12" pos:end="191:15"><name pos:start="191:12" pos:end="191:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
