<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26601.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">amdvi_realize</name><parameter_list pos:start="1:26" pos:end="1:56">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:37">DeviceState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:55"><decl pos:start="1:45" pos:end="1:55"><type pos:start="1:45" pos:end="1:55"><name pos:start="1:45" pos:end="1:49">Error</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier><modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">err</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:18">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">AMDVIState</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:41">= <expr pos:start="7:21" pos:end="7:41"><call pos:start="7:21" pos:end="7:41"><name pos:start="7:21" pos:end="7:36">AMD_IOMMU_DEVICE</name><argument_list pos:start="7:37" pos:end="7:41">(<argument pos:start="7:38" pos:end="7:40"><expr pos:start="7:38" pos:end="7:40"><name pos:start="7:38" pos:end="7:40">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:52"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">X86IOMMUState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:28">x86_iommu</name> <init pos:start="9:30" pos:end="9:52">= <expr pos:start="9:32" pos:end="9:52"><call pos:start="9:32" pos:end="9:52"><name pos:start="9:32" pos:end="9:47">X86_IOMMU_DEVICE</name><argument_list pos:start="9:48" pos:end="9:52">(<argument pos:start="9:49" pos:end="9:51"><expr pos:start="9:49" pos:end="9:51"><name pos:start="9:49" pos:end="9:51">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:51"><decl pos:start="11:5" pos:end="11:50"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MachineState</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">ms</name> <init pos:start="11:22" pos:end="11:50">= <expr pos:start="11:24" pos:end="11:50"><call pos:start="11:24" pos:end="11:50"><name pos:start="11:24" pos:end="11:30">MACHINE</name><argument_list pos:start="11:31" pos:end="11:50">(<argument pos:start="11:32" pos:end="11:49"><expr pos:start="11:32" pos:end="11:49"><call pos:start="11:32" pos:end="11:49"><name pos:start="11:32" pos:end="11:47">qdev_get_machine</name><argument_list pos:start="11:48" pos:end="11:49">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MachineClass</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:20">mc</name> <init pos:start="13:22" pos:end="13:44">= <expr pos:start="13:24" pos:end="13:44"><call pos:start="13:24" pos:end="13:44"><name pos:start="13:24" pos:end="13:40">MACHINE_GET_CLASS</name><argument_list pos:start="13:41" pos:end="13:44">(<argument pos:start="13:42" pos:end="13:43"><expr pos:start="13:42" pos:end="13:43"><name pos:start="13:42" pos:end="13:43">ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="17:69"><decl pos:start="15:5" pos:end="17:68"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:18">PCMachineState</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:24">pcms</name> <init pos:start="15:26" pos:end="17:68">=

        <expr pos:start="17:9" pos:end="17:68"><call pos:start="17:9" pos:end="17:68"><name pos:start="17:9" pos:end="17:18">PC_MACHINE</name><argument_list pos:start="17:19" pos:end="17:68">(<argument pos:start="17:20" pos:end="17:67"><expr pos:start="17:20" pos:end="17:67"><call pos:start="17:20" pos:end="17:67"><name pos:start="17:20" pos:end="17:38">object_dynamic_cast</name><argument_list pos:start="17:39" pos:end="17:67">(<argument pos:start="17:40" pos:end="17:49"><expr pos:start="17:40" pos:end="17:49"><call pos:start="17:40" pos:end="17:49"><name pos:start="17:40" pos:end="17:45">OBJECT</name><argument_list pos:start="17:46" pos:end="17:49">(<argument pos:start="17:47" pos:end="17:48"><expr pos:start="17:47" pos:end="17:48"><name pos:start="17:47" pos:end="17:48">ms</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="17:52" pos:end="17:66"><expr pos:start="17:52" pos:end="17:66"><name pos:start="17:52" pos:end="17:66">TYPE_PC_MACHINE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">PCIBus</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:15">bus</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:14">(<expr pos:start="23:9" pos:end="23:13"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:13">pcms</name></expr>)</condition> <block pos:start="23:16" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:15">

        <expr_stmt pos:start="25:9" pos:end="27:29"><expr pos:start="25:9" pos:end="27:28"><call pos:start="25:9" pos:end="27:28"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="27:28">(<argument pos:start="25:20" pos:end="25:22"><expr pos:start="25:20" pos:end="25:22"><name pos:start="25:20" pos:end="25:22">err</name></expr></argument>, <argument pos:start="25:25" pos:end="25:70"><expr pos:start="25:25" pos:end="25:70"><literal type="string" pos:start="25:25" pos:end="25:70">"Machine-type '%s' not supported by amd-iommu"</literal></expr></argument>,

                   <argument pos:start="27:20" pos:end="27:27"><expr pos:start="27:20" pos:end="27:27"><name pos:start="27:20" pos:end="27:27"><name pos:start="27:20" pos:end="27:21">mc</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:27">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:20"><expr pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:7">bus</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <name pos:start="35:11" pos:end="35:19"><name pos:start="35:11" pos:end="35:14">pcms</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:19">bus</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="39:73"><expr pos:start="37:5" pos:end="39:72"><name pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:12">iotlb</name></name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="39:72"><name pos:start="37:16" pos:end="37:36">g_hash_table_new_full</name><argument_list pos:start="37:37" pos:end="39:72">(<argument pos:start="37:38" pos:end="37:54"><expr pos:start="37:38" pos:end="37:54"><name pos:start="37:38" pos:end="37:54">amdvi_uint64_hash</name></expr></argument>,

                                     <argument pos:start="39:38" pos:end="39:55"><expr pos:start="39:38" pos:end="39:55"><name pos:start="39:38" pos:end="39:55">amdvi_uint64_equal</name></expr></argument>, <argument pos:start="39:58" pos:end="39:63"><expr pos:start="39:58" pos:end="39:63"><name pos:start="39:58" pos:end="39:63">g_free</name></expr></argument>, <argument pos:start="39:66" pos:end="39:71"><expr pos:start="39:66" pos:end="39:71"><name pos:start="39:66" pos:end="39:71">g_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:62">/* This device should take care of IOMMU PCI properties */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:13">x86_iommu</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:19">type</name></name> <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:30">TYPE_AMD</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:53"><expr pos:start="47:5" pos:end="47:52"><call pos:start="47:5" pos:end="47:52"><name pos:start="47:5" pos:end="47:23">qdev_set_parent_bus</name><argument_list pos:start="47:24" pos:end="47:52">(<argument pos:start="47:25" pos:end="47:39"><expr pos:start="47:25" pos:end="47:39"><call pos:start="47:25" pos:end="47:39"><name pos:start="47:25" pos:end="47:30">DEVICE</name><argument_list pos:start="47:31" pos:end="47:39">(<argument pos:start="47:32" pos:end="47:38"><expr pos:start="47:32" pos:end="47:38"><operator pos:start="47:32" pos:end="47:32">&amp;</operator><name pos:start="47:33" pos:end="47:38"><name pos:start="47:33" pos:end="47:33">s</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:38">pci</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:42" pos:end="47:51"><expr pos:start="47:42" pos:end="47:51"><operator pos:start="47:42" pos:end="47:42">&amp;</operator><name pos:start="47:43" pos:end="47:51"><name pos:start="47:43" pos:end="47:45">bus</name><operator pos:start="47:46" pos:end="47:47">-&gt;</operator><name pos:start="47:48" pos:end="47:51">qbus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:69"><expr pos:start="49:5" pos:end="49:68"><call pos:start="49:5" pos:end="49:68"><name pos:start="49:5" pos:end="49:28">object_property_set_bool</name><argument_list pos:start="49:29" pos:end="49:68">(<argument pos:start="49:30" pos:end="49:44"><expr pos:start="49:30" pos:end="49:44"><call pos:start="49:30" pos:end="49:44"><name pos:start="49:30" pos:end="49:35">OBJECT</name><argument_list pos:start="49:36" pos:end="49:44">(<argument pos:start="49:37" pos:end="49:43"><expr pos:start="49:37" pos:end="49:43"><operator pos:start="49:37" pos:end="49:37">&amp;</operator><name pos:start="49:38" pos:end="49:43"><name pos:start="49:38" pos:end="49:38">s</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:43">pci</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:47" pos:end="49:50"><expr pos:start="49:47" pos:end="49:50"><name pos:start="49:47" pos:end="49:50">true</name></expr></argument>, <argument pos:start="49:53" pos:end="49:62"><expr pos:start="49:53" pos:end="49:62"><literal type="string" pos:start="49:53" pos:end="49:62">"realized"</literal></expr></argument>, <argument pos:start="49:65" pos:end="49:67"><expr pos:start="49:65" pos:end="49:67"><name pos:start="49:65" pos:end="49:67">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="53:64"><expr pos:start="51:5" pos:end="53:63"><name pos:start="51:5" pos:end="51:7">ret</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="53:63"><name pos:start="51:11" pos:end="51:28">pci_add_capability</name><argument_list pos:start="51:29" pos:end="53:63">(<argument pos:start="51:30" pos:end="51:40"><expr pos:start="51:30" pos:end="51:40"><operator pos:start="51:30" pos:end="51:30">&amp;</operator><name pos:start="51:31" pos:end="51:40"><name pos:start="51:31" pos:end="51:31">s</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:36">pci</name><operator pos:start="51:37" pos:end="51:37">.</operator><name pos:start="51:38" pos:end="51:40">dev</name></name></expr></argument>, <argument pos:start="51:43" pos:end="51:60"><expr pos:start="51:43" pos:end="51:60"><name pos:start="51:43" pos:end="51:60">AMDVI_CAPAB_ID_SEC</name></expr></argument>, <argument pos:start="51:63" pos:end="51:63"><expr pos:start="51:63" pos:end="51:63"><literal type="number" pos:start="51:63" pos:end="51:63">0</literal></expr></argument>,

                                         <argument pos:start="53:42" pos:end="53:57"><expr pos:start="53:42" pos:end="53:57"><name pos:start="53:42" pos:end="53:57">AMDVI_CAPAB_SIZE</name></expr></argument>, <argument pos:start="53:60" pos:end="53:62"><expr pos:start="53:60" pos:end="53:62"><name pos:start="53:60" pos:end="53:62">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:16">(<expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">&lt;</operator> <literal type="number" pos:start="55:15" pos:end="55:15">0</literal></expr>)</condition> <block pos:start="55:18" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:15">

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:26"><expr pos:start="61:5" pos:end="61:25"><name pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:19">capab_offset</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:25">ret</name></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="67:56"><expr pos:start="65:5" pos:end="67:55"><name pos:start="65:5" pos:end="65:7">ret</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="67:55"><name pos:start="65:11" pos:end="65:28">pci_add_capability</name><argument_list pos:start="65:29" pos:end="67:55">(<argument pos:start="65:30" pos:end="65:40"><expr pos:start="65:30" pos:end="65:40"><operator pos:start="65:30" pos:end="65:30">&amp;</operator><name pos:start="65:31" pos:end="65:40"><name pos:start="65:31" pos:end="65:31">s</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:36">pci</name><operator pos:start="65:37" pos:end="65:37">.</operator><name pos:start="65:38" pos:end="65:40">dev</name></name></expr></argument>, <argument pos:start="65:43" pos:end="65:56"><expr pos:start="65:43" pos:end="65:56"><name pos:start="65:43" pos:end="65:56">PCI_CAP_ID_MSI</name></expr></argument>, <argument pos:start="65:59" pos:end="65:59"><expr pos:start="65:59" pos:end="65:59"><literal type="number" pos:start="65:59" pos:end="65:59">0</literal></expr></argument>,

                             <argument pos:start="67:30" pos:end="67:49"><expr pos:start="67:30" pos:end="67:49"><name pos:start="67:30" pos:end="67:49">AMDVI_CAPAB_REG_SIZE</name></expr></argument>, <argument pos:start="67:52" pos:end="67:54"><expr pos:start="67:52" pos:end="67:54"><name pos:start="67:52" pos:end="67:54">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:16">(<expr pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">&lt;</operator> <literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>)</condition> <block pos:start="69:18" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:15">

        <return pos:start="71:9" pos:end="71:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="77:56"><expr pos:start="75:5" pos:end="77:55"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="77:55"><name pos:start="75:11" pos:end="75:28">pci_add_capability</name><argument_list pos:start="75:29" pos:end="77:55">(<argument pos:start="75:30" pos:end="75:40"><expr pos:start="75:30" pos:end="75:40"><operator pos:start="75:30" pos:end="75:30">&amp;</operator><name pos:start="75:31" pos:end="75:40"><name pos:start="75:31" pos:end="75:31">s</name><operator pos:start="75:32" pos:end="75:33">-&gt;</operator><name pos:start="75:34" pos:end="75:36">pci</name><operator pos:start="75:37" pos:end="75:37">.</operator><name pos:start="75:38" pos:end="75:40">dev</name></name></expr></argument>, <argument pos:start="75:43" pos:end="75:55"><expr pos:start="75:43" pos:end="75:55"><name pos:start="75:43" pos:end="75:55">PCI_CAP_ID_HT</name></expr></argument>, <argument pos:start="75:58" pos:end="75:58"><expr pos:start="75:58" pos:end="75:58"><literal type="number" pos:start="75:58" pos:end="75:58">0</literal></expr></argument>,

                             <argument pos:start="77:30" pos:end="77:49"><expr pos:start="77:30" pos:end="77:49"><name pos:start="77:30" pos:end="77:49">AMDVI_CAPAB_REG_SIZE</name></expr></argument>, <argument pos:start="77:52" pos:end="77:54"><expr pos:start="77:52" pos:end="77:54"><name pos:start="77:52" pos:end="77:54">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:16">(<expr pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">&lt;</operator> <literal type="number" pos:start="79:15" pos:end="79:15">0</literal></expr>)</condition> <block pos:start="79:18" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:15">

        <return pos:start="81:9" pos:end="81:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:21">/* set up MMIO */</comment>

    <expr_stmt pos:start="89:5" pos:end="91:43"><expr pos:start="89:5" pos:end="91:42"><call pos:start="89:5" pos:end="91:42"><name pos:start="89:5" pos:end="89:25">memory_region_init_io</name><argument_list pos:start="89:26" pos:end="91:42">(<argument pos:start="89:27" pos:end="89:34"><expr pos:start="89:27" pos:end="89:34"><operator pos:start="89:27" pos:end="89:27">&amp;</operator><name pos:start="89:28" pos:end="89:34"><name pos:start="89:28" pos:end="89:28">s</name><operator pos:start="89:29" pos:end="89:30">-&gt;</operator><name pos:start="89:31" pos:end="89:34">mmio</name></name></expr></argument>, <argument pos:start="89:37" pos:end="89:45"><expr pos:start="89:37" pos:end="89:45"><call pos:start="89:37" pos:end="89:45"><name pos:start="89:37" pos:end="89:42">OBJECT</name><argument_list pos:start="89:43" pos:end="89:45">(<argument pos:start="89:44" pos:end="89:44"><expr pos:start="89:44" pos:end="89:44"><name pos:start="89:44" pos:end="89:44">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="89:48" pos:end="89:60"><expr pos:start="89:48" pos:end="89:60"><operator pos:start="89:48" pos:end="89:48">&amp;</operator><name pos:start="89:49" pos:end="89:60">mmio_mem_ops</name></expr></argument>, <argument pos:start="89:63" pos:end="89:63"><expr pos:start="89:63" pos:end="89:63"><name pos:start="89:63" pos:end="89:63">s</name></expr></argument>, <argument pos:start="89:66" pos:end="89:77"><expr pos:start="89:66" pos:end="89:77"><literal type="string" pos:start="89:66" pos:end="89:77">"amdvi-mmio"</literal></expr></argument>,

                          <argument pos:start="91:27" pos:end="91:41"><expr pos:start="91:27" pos:end="91:41"><name pos:start="91:27" pos:end="91:41">AMDVI_MMIO_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:50"><expr pos:start="95:5" pos:end="95:49"><call pos:start="95:5" pos:end="95:49"><name pos:start="95:5" pos:end="95:20">sysbus_init_mmio</name><argument_list pos:start="95:21" pos:end="95:49">(<argument pos:start="95:22" pos:end="95:38"><expr pos:start="95:22" pos:end="95:38"><call pos:start="95:22" pos:end="95:38"><name pos:start="95:22" pos:end="95:35">SYS_BUS_DEVICE</name><argument_list pos:start="95:36" pos:end="95:38">(<argument pos:start="95:37" pos:end="95:37"><expr pos:start="95:37" pos:end="95:37"><name pos:start="95:37" pos:end="95:37">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:41" pos:end="95:48"><expr pos:start="95:41" pos:end="95:48"><operator pos:start="95:41" pos:end="95:41">&amp;</operator><name pos:start="95:42" pos:end="95:48"><name pos:start="95:42" pos:end="95:42">s</name><operator pos:start="95:43" pos:end="95:44">-&gt;</operator><name pos:start="95:45" pos:end="95:48">mmio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:59"><expr pos:start="97:5" pos:end="97:58"><call pos:start="97:5" pos:end="97:58"><name pos:start="97:5" pos:end="97:19">sysbus_mmio_map</name><argument_list pos:start="97:20" pos:end="97:58">(<argument pos:start="97:21" pos:end="97:37"><expr pos:start="97:21" pos:end="97:37"><call pos:start="97:21" pos:end="97:37"><name pos:start="97:21" pos:end="97:34">SYS_BUS_DEVICE</name><argument_list pos:start="97:35" pos:end="97:37">(<argument pos:start="97:36" pos:end="97:36"><expr pos:start="97:36" pos:end="97:36"><name pos:start="97:36" pos:end="97:36">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:40" pos:end="97:40"><expr pos:start="97:40" pos:end="97:40"><literal type="number" pos:start="97:40" pos:end="97:40">0</literal></expr></argument>, <argument pos:start="97:43" pos:end="97:57"><expr pos:start="97:43" pos:end="97:57"><name pos:start="97:43" pos:end="97:57">AMDVI_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:50"><expr pos:start="99:5" pos:end="99:49"><call pos:start="99:5" pos:end="99:49"><name pos:start="99:5" pos:end="99:19">pci_setup_iommu</name><argument_list pos:start="99:20" pos:end="99:49">(<argument pos:start="99:21" pos:end="99:23"><expr pos:start="99:21" pos:end="99:23"><name pos:start="99:21" pos:end="99:23">bus</name></expr></argument>, <argument pos:start="99:26" pos:end="99:45"><expr pos:start="99:26" pos:end="99:45"><name pos:start="99:26" pos:end="99:45">amdvi_host_dma_iommu</name></expr></argument>, <argument pos:start="99:48" pos:end="99:48"><expr pos:start="99:48" pos:end="99:48"><name pos:start="99:48" pos:end="99:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:69"><expr pos:start="101:5" pos:end="101:68"><name pos:start="101:5" pos:end="101:12"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:12">devid</name></name> <operator pos:start="101:14" pos:end="101:14">=</operator> <call pos:start="101:16" pos:end="101:68"><name pos:start="101:16" pos:end="101:38">object_property_get_int</name><argument_list pos:start="101:39" pos:end="101:68">(<argument pos:start="101:40" pos:end="101:54"><expr pos:start="101:40" pos:end="101:54"><call pos:start="101:40" pos:end="101:54"><name pos:start="101:40" pos:end="101:45">OBJECT</name><argument_list pos:start="101:46" pos:end="101:54">(<argument pos:start="101:47" pos:end="101:53"><expr pos:start="101:47" pos:end="101:53"><operator pos:start="101:47" pos:end="101:47">&amp;</operator><name pos:start="101:48" pos:end="101:53"><name pos:start="101:48" pos:end="101:48">s</name><operator pos:start="101:49" pos:end="101:50">-&gt;</operator><name pos:start="101:51" pos:end="101:53">pci</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="101:57" pos:end="101:62"><expr pos:start="101:57" pos:end="101:62"><literal type="string" pos:start="101:57" pos:end="101:62">"addr"</literal></expr></argument>, <argument pos:start="101:65" pos:end="101:67"><expr pos:start="101:65" pos:end="101:67"><name pos:start="101:65" pos:end="101:67">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:50"><expr pos:start="103:5" pos:end="103:49"><call pos:start="103:5" pos:end="103:49"><name pos:start="103:5" pos:end="103:12">msi_init</name><argument_list pos:start="103:13" pos:end="103:49">(<argument pos:start="103:14" pos:end="103:24"><expr pos:start="103:14" pos:end="103:24"><operator pos:start="103:14" pos:end="103:14">&amp;</operator><name pos:start="103:15" pos:end="103:24"><name pos:start="103:15" pos:end="103:15">s</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:20">pci</name><operator pos:start="103:21" pos:end="103:21">.</operator><name pos:start="103:22" pos:end="103:24">dev</name></name></expr></argument>, <argument pos:start="103:27" pos:end="103:27"><expr pos:start="103:27" pos:end="103:27"><literal type="number" pos:start="103:27" pos:end="103:27">0</literal></expr></argument>, <argument pos:start="103:30" pos:end="103:30"><expr pos:start="103:30" pos:end="103:30"><literal type="number" pos:start="103:30" pos:end="103:30">1</literal></expr></argument>, <argument pos:start="103:33" pos:end="103:36"><expr pos:start="103:33" pos:end="103:36"><name pos:start="103:33" pos:end="103:36">true</name></expr></argument>, <argument pos:start="103:39" pos:end="103:43"><expr pos:start="103:39" pos:end="103:43"><name pos:start="103:39" pos:end="103:43">false</name></expr></argument>, <argument pos:start="103:46" pos:end="103:48"><expr pos:start="103:46" pos:end="103:48"><name pos:start="103:46" pos:end="103:48">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:18"><expr pos:start="105:5" pos:end="105:17"><call pos:start="105:5" pos:end="105:17"><name pos:start="105:5" pos:end="105:14">amdvi_init</name><argument_list pos:start="105:15" pos:end="105:17">(<argument pos:start="105:16" pos:end="105:16"><expr pos:start="105:16" pos:end="105:16"><name pos:start="105:16" pos:end="105:16">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
