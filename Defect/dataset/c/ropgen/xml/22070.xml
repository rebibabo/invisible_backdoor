<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22070.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:27">arm_debug_excp_handler</name><parameter_list pos:start="1:28" pos:end="1:41">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:38"><name pos:start="1:29" pos:end="1:36">CPUState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">cs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="11:5" pos:end="105:5">

    <comment type="block" pos:start="5:5" pos:end="9:7">/* Called by core code when a watchpoint or breakpoint fires;

     * need to check which one and raise the appropriate exception.

     */</comment>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">ARMCPU</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:15">cpu</name> <init pos:start="11:17" pos:end="11:29">= <expr pos:start="11:19" pos:end="11:29"><call pos:start="11:19" pos:end="11:29"><name pos:start="11:19" pos:end="11:25">ARM_CPU</name><argument_list pos:start="11:26" pos:end="11:29">(<argument pos:start="11:27" pos:end="11:28"><expr pos:start="11:27" pos:end="11:28"><name pos:start="11:27" pos:end="11:28">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">CPUARMState</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">env</name> <init pos:start="13:22" pos:end="13:32">= <expr pos:start="13:24" pos:end="13:32"><operator pos:start="13:24" pos:end="13:24">&amp;</operator><name pos:start="13:25" pos:end="13:32"><name pos:start="13:25" pos:end="13:27">cpu</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">CPUWatchpoint</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:25">wp_hit</name> <init pos:start="15:27" pos:end="15:46">= <expr pos:start="15:29" pos:end="15:46"><name pos:start="15:29" pos:end="15:46"><name pos:start="15:29" pos:end="15:30">cs</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:46">watchpoint_hit</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="105:5"><if pos:start="19:5" pos:end="59:5">if <condition pos:start="19:8" pos:end="19:15">(<expr pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:14">wp_hit</name></expr>)</condition> <block pos:start="19:17" pos:end="59:5">{<block_content pos:start="21:9" pos:end="57:9">

        <if_stmt pos:start="21:9" pos:end="57:9"><if pos:start="21:9" pos:end="57:9">if <condition pos:start="21:12" pos:end="21:35">(<expr pos:start="21:13" pos:end="21:34"><name pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:18">wp_hit</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:25">flags</name></name> <operator pos:start="21:27" pos:end="21:27">&amp;</operator> <name pos:start="21:29" pos:end="21:34">BP_CPU</name></expr>)</condition> <block pos:start="21:37" pos:end="57:9">{<block_content pos:start="23:13" pos:end="55:13">

            <expr_stmt pos:start="23:13" pos:end="23:38"><expr pos:start="23:13" pos:end="23:37"><name pos:start="23:13" pos:end="23:30"><name pos:start="23:13" pos:end="23:14">cs</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:30">watchpoint_hit</name></name> <operator pos:start="23:32" pos:end="23:32">=</operator> <name pos:start="23:34" pos:end="23:37">NULL</name></expr>;</expr_stmt>

            <if_stmt pos:start="25:13" pos:end="55:13"><if pos:start="25:13" pos:end="51:13">if <condition pos:start="25:16" pos:end="25:39">(<expr pos:start="25:17" pos:end="25:38"><call pos:start="25:17" pos:end="25:38"><name pos:start="25:17" pos:end="25:33">check_watchpoints</name><argument_list pos:start="25:34" pos:end="25:38">(<argument pos:start="25:35" pos:end="25:37"><expr pos:start="25:35" pos:end="25:37"><name pos:start="25:35" pos:end="25:37">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:41" pos:end="51:13">{<block_content pos:start="27:17" pos:end="49:58">

                <decl_stmt pos:start="27:17" pos:end="27:74"><decl pos:start="27:17" pos:end="27:73"><type pos:start="27:17" pos:end="27:20"><name pos:start="27:17" pos:end="27:20">bool</name></type> <name pos:start="27:22" pos:end="27:24">wnr</name> <init pos:start="27:26" pos:end="27:73">= <expr pos:start="27:28" pos:end="27:73"><operator pos:start="27:28" pos:end="27:28">(</operator><name pos:start="27:29" pos:end="27:41"><name pos:start="27:29" pos:end="27:34">wp_hit</name><operator pos:start="27:35" pos:end="27:36">-&gt;</operator><name pos:start="27:37" pos:end="27:41">flags</name></name> <operator pos:start="27:43" pos:end="27:43">&amp;</operator> <name pos:start="27:45" pos:end="27:67">BP_WATCHPOINT_HIT_WRITE</name><operator pos:start="27:68" pos:end="27:68">)</operator> <operator pos:start="27:70" pos:end="27:71">!=</operator> <literal type="number" pos:start="27:73" pos:end="27:73">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="29:17" pos:end="29:79"><decl pos:start="29:17" pos:end="29:78"><type pos:start="29:17" pos:end="29:20"><name pos:start="29:17" pos:end="29:20">bool</name></type> <name pos:start="29:22" pos:end="29:28">same_el</name> <init pos:start="29:30" pos:end="29:78">= <expr pos:start="29:32" pos:end="29:78"><call pos:start="29:32" pos:end="29:55"><name pos:start="29:32" pos:end="29:50">arm_debug_target_el</name><argument_list pos:start="29:51" pos:end="29:55">(<argument pos:start="29:52" pos:end="29:54"><expr pos:start="29:52" pos:end="29:54"><name pos:start="29:52" pos:end="29:54">env</name></expr></argument>)</argument_list></call> <operator pos:start="29:57" pos:end="29:58">==</operator> <call pos:start="29:60" pos:end="29:78"><name pos:start="29:60" pos:end="29:73">arm_current_el</name><argument_list pos:start="29:74" pos:end="29:78">(<argument pos:start="29:75" pos:end="29:77"><expr pos:start="29:75" pos:end="29:77"><name pos:start="29:75" pos:end="29:77">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="33:17" pos:end="41:17"><if pos:start="33:17" pos:end="37:17">if <condition pos:start="33:20" pos:end="33:52">(<expr pos:start="33:21" pos:end="33:51"><call pos:start="33:21" pos:end="33:51"><name pos:start="33:21" pos:end="33:46">extended_addresses_enabled</name><argument_list pos:start="33:47" pos:end="33:51">(<argument pos:start="33:48" pos:end="33:50"><expr pos:start="33:48" pos:end="33:50"><name pos:start="33:48" pos:end="33:50">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:54" pos:end="37:17">{<block_content pos:start="35:21" pos:end="35:57">

                    <expr_stmt pos:start="35:21" pos:end="35:57"><expr pos:start="35:21" pos:end="35:56"><name pos:start="35:21" pos:end="35:38"><name pos:start="35:21" pos:end="35:23">env</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:34">exception</name><operator pos:start="35:35" pos:end="35:35">.</operator><name pos:start="35:36" pos:end="35:38">fsr</name></name> <operator pos:start="35:40" pos:end="35:40">=</operator> <operator pos:start="35:42" pos:end="35:42">(</operator><literal type="number" pos:start="35:43" pos:end="35:43">1</literal> <operator pos:start="35:45" pos:end="35:46">&lt;&lt;</operator> <literal type="number" pos:start="35:48" pos:end="35:48">9</literal><operator pos:start="35:49" pos:end="35:49">)</operator> <operator pos:start="35:51" pos:end="35:51">|</operator> <literal type="number" pos:start="35:53" pos:end="35:56">0x22</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="37:19" pos:end="41:17">else <block pos:start="37:24" pos:end="41:17">{<block_content pos:start="39:21" pos:end="39:45">

                    <expr_stmt pos:start="39:21" pos:end="39:45"><expr pos:start="39:21" pos:end="39:44"><name pos:start="39:21" pos:end="39:38"><name pos:start="39:21" pos:end="39:23">env</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:34">exception</name><operator pos:start="39:35" pos:end="39:35">.</operator><name pos:start="39:36" pos:end="39:38">fsr</name></name> <operator pos:start="39:40" pos:end="39:40">=</operator> <literal type="number" pos:start="39:42" pos:end="39:44">0x2</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:58"><expr pos:start="43:17" pos:end="43:57"><name pos:start="43:17" pos:end="43:39"><name pos:start="43:17" pos:end="43:19">env</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:30">exception</name><operator pos:start="43:31" pos:end="43:31">.</operator><name pos:start="43:32" pos:end="43:39">vaddress</name></name> <operator pos:start="43:41" pos:end="43:41">=</operator> <name pos:start="43:43" pos:end="43:57"><name pos:start="43:43" pos:end="43:48">wp_hit</name><operator pos:start="43:49" pos:end="43:50">-&gt;</operator><name pos:start="43:51" pos:end="43:57">hitaddr</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="49:58"><expr pos:start="45:17" pos:end="49:57"><call pos:start="45:17" pos:end="49:57"><name pos:start="45:17" pos:end="45:31">raise_exception</name><argument_list pos:start="45:32" pos:end="49:57">(<argument pos:start="45:33" pos:end="45:35"><expr pos:start="45:33" pos:end="45:35"><name pos:start="45:33" pos:end="45:35">env</name></expr></argument>, <argument pos:start="45:38" pos:end="45:52"><expr pos:start="45:38" pos:end="45:52"><name pos:start="45:38" pos:end="45:52">EXCP_DATA_ABORT</name></expr></argument>,

                                <argument pos:start="47:33" pos:end="47:63"><expr pos:start="47:33" pos:end="47:63"><call pos:start="47:33" pos:end="47:63"><name pos:start="47:33" pos:end="47:46">syn_watchpoint</name><argument_list pos:start="47:47" pos:end="47:63">(<argument pos:start="47:48" pos:end="47:54"><expr pos:start="47:48" pos:end="47:54"><name pos:start="47:48" pos:end="47:54">same_el</name></expr></argument>, <argument pos:start="47:57" pos:end="47:57"><expr pos:start="47:57" pos:end="47:57"><literal type="number" pos:start="47:57" pos:end="47:57">0</literal></expr></argument>, <argument pos:start="47:60" pos:end="47:62"><expr pos:start="47:60" pos:end="47:62"><name pos:start="47:60" pos:end="47:62">wnr</name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="49:33" pos:end="49:56"><expr pos:start="49:33" pos:end="49:56"><call pos:start="49:33" pos:end="49:56"><name pos:start="49:33" pos:end="49:51">arm_debug_target_el</name><argument_list pos:start="49:52" pos:end="49:56">(<argument pos:start="49:53" pos:end="49:55"><expr pos:start="49:53" pos:end="49:55"><name pos:start="49:53" pos:end="49:55">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="51:15" pos:end="55:13">else <block pos:start="51:20" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:49">

                <expr_stmt pos:start="53:17" pos:end="53:49"><expr pos:start="53:17" pos:end="53:48"><call pos:start="53:17" pos:end="53:48"><name pos:start="53:17" pos:end="53:38">cpu_resume_from_signal</name><argument_list pos:start="53:39" pos:end="53:48">(<argument pos:start="53:40" pos:end="53:41"><expr pos:start="53:40" pos:end="53:41"><name pos:start="53:40" pos:end="53:41">cs</name></expr></argument>, <argument pos:start="53:44" pos:end="53:47"><expr pos:start="53:44" pos:end="53:47"><name pos:start="53:44" pos:end="53:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="105:5">else <block pos:start="59:12" pos:end="105:5">{<block_content pos:start="61:9" pos:end="103:50">

        <decl_stmt pos:start="61:9" pos:end="61:60"><decl pos:start="61:9" pos:end="61:59"><type pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">uint64_t</name></type> <name pos:start="61:18" pos:end="61:19">pc</name> <init pos:start="61:21" pos:end="61:59">= <expr pos:start="61:23" pos:end="61:59"><ternary pos:start="61:23" pos:end="61:59"><condition pos:start="61:23" pos:end="61:35"><expr pos:start="61:23" pos:end="61:33"><call pos:start="61:23" pos:end="61:33"><name pos:start="61:23" pos:end="61:28">is_a64</name><argument_list pos:start="61:29" pos:end="61:33">(<argument pos:start="61:30" pos:end="61:32"><expr pos:start="61:30" pos:end="61:32"><name pos:start="61:30" pos:end="61:32">env</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="61:37" pos:end="61:43"> <expr pos:start="61:37" pos:end="61:43"><name pos:start="61:37" pos:end="61:43"><name pos:start="61:37" pos:end="61:39">env</name><operator pos:start="61:40" pos:end="61:41">-&gt;</operator><name pos:start="61:42" pos:end="61:43">pc</name></name></expr> </then><else pos:start="61:45" pos:end="61:59">: <expr pos:start="61:47" pos:end="61:59"><name pos:start="61:47" pos:end="61:59"><name pos:start="61:47" pos:end="61:49">env</name><operator pos:start="61:50" pos:end="61:51">-&gt;</operator><name pos:start="61:52" pos:end="61:55">regs</name><index pos:start="61:56" pos:end="61:59">[<expr pos:start="61:57" pos:end="61:58"><literal type="number" pos:start="61:57" pos:end="61:58">15</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="63:9" pos:end="63:73"><decl pos:start="63:9" pos:end="63:72"><type pos:start="63:9" pos:end="63:12"><name pos:start="63:9" pos:end="63:12">bool</name></type> <name pos:start="63:14" pos:end="63:20">same_el</name> <init pos:start="63:22" pos:end="63:72">= <expr pos:start="63:24" pos:end="63:72"><operator pos:start="63:24" pos:end="63:24">(</operator><call pos:start="63:25" pos:end="63:48"><name pos:start="63:25" pos:end="63:43">arm_debug_target_el</name><argument_list pos:start="63:44" pos:end="63:48">(<argument pos:start="63:45" pos:end="63:47"><expr pos:start="63:45" pos:end="63:47"><name pos:start="63:45" pos:end="63:47">env</name></expr></argument>)</argument_list></call> <operator pos:start="63:50" pos:end="63:51">==</operator> <call pos:start="63:53" pos:end="63:71"><name pos:start="63:53" pos:end="63:66">arm_current_el</name><argument_list pos:start="63:67" pos:end="63:71">(<argument pos:start="63:68" pos:end="63:70"><expr pos:start="63:68" pos:end="63:70"><name pos:start="63:68" pos:end="63:70">env</name></expr></argument>)</argument_list></call><operator pos:start="63:72" pos:end="63:72">)</operator></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="67:9" pos:end="75:11">/* (1) GDB breakpoints should be handled first.

         * (2) Do not raise a CPU exception if no CPU breakpoint has fired,

         * since singlestep is also done by generating a debug internal

         * exception.

         */</comment>

        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="79:52">(<expr pos:start="77:13" pos:end="79:51"><call pos:start="77:13" pos:end="77:47"><name pos:start="77:13" pos:end="77:31">cpu_breakpoint_test</name><argument_list pos:start="77:32" pos:end="77:47">(<argument pos:start="77:33" pos:end="77:34"><expr pos:start="77:33" pos:end="77:34"><name pos:start="77:33" pos:end="77:34">cs</name></expr></argument>, <argument pos:start="77:37" pos:end="77:38"><expr pos:start="77:37" pos:end="77:38"><name pos:start="77:37" pos:end="77:38">pc</name></expr></argument>, <argument pos:start="77:41" pos:end="77:46"><expr pos:start="77:41" pos:end="77:46"><name pos:start="77:41" pos:end="77:46">BP_GDB</name></expr></argument>)</argument_list></call>

            <operator pos:start="79:13" pos:end="79:14">||</operator> <operator pos:start="79:16" pos:end="79:16">!</operator><call pos:start="79:17" pos:end="79:51"><name pos:start="79:17" pos:end="79:35">cpu_breakpoint_test</name><argument_list pos:start="79:36" pos:end="79:51">(<argument pos:start="79:37" pos:end="79:38"><expr pos:start="79:37" pos:end="79:38"><name pos:start="79:37" pos:end="79:38">cs</name></expr></argument>, <argument pos:start="79:41" pos:end="79:42"><expr pos:start="79:41" pos:end="79:42"><name pos:start="79:41" pos:end="79:42">pc</name></expr></argument>, <argument pos:start="79:45" pos:end="79:50"><expr pos:start="79:45" pos:end="79:50"><name pos:start="79:45" pos:end="79:50">BP_CPU</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:54" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:19">

            <return pos:start="81:13" pos:end="81:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="87:9" pos:end="95:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:44">(<expr pos:start="87:13" pos:end="87:43"><call pos:start="87:13" pos:end="87:43"><name pos:start="87:13" pos:end="87:38">extended_addresses_enabled</name><argument_list pos:start="87:39" pos:end="87:43">(<argument pos:start="87:40" pos:end="87:42"><expr pos:start="87:40" pos:end="87:42"><name pos:start="87:40" pos:end="87:42">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:46" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:49">

            <expr_stmt pos:start="89:13" pos:end="89:49"><expr pos:start="89:13" pos:end="89:48"><name pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:15">env</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:26">exception</name><operator pos:start="89:27" pos:end="89:27">.</operator><name pos:start="89:28" pos:end="89:30">fsr</name></name> <operator pos:start="89:32" pos:end="89:32">=</operator> <operator pos:start="89:34" pos:end="89:34">(</operator><literal type="number" pos:start="89:35" pos:end="89:35">1</literal> <operator pos:start="89:37" pos:end="89:38">&lt;&lt;</operator> <literal type="number" pos:start="89:40" pos:end="89:40">9</literal><operator pos:start="89:41" pos:end="89:41">)</operator> <operator pos:start="89:43" pos:end="89:43">|</operator> <literal type="number" pos:start="89:45" pos:end="89:48">0x22</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="91:11" pos:end="95:9">else <block pos:start="91:16" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:37">

            <expr_stmt pos:start="93:13" pos:end="93:37"><expr pos:start="93:13" pos:end="93:36"><name pos:start="93:13" pos:end="93:30"><name pos:start="93:13" pos:end="93:15">env</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:26">exception</name><operator pos:start="93:27" pos:end="93:27">.</operator><name pos:start="93:28" pos:end="93:30">fsr</name></name> <operator pos:start="93:32" pos:end="93:32">=</operator> <literal type="number" pos:start="93:34" pos:end="93:36">0x2</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="97:9" pos:end="97:53">/* FAR is UNKNOWN, so doesn't need setting */</comment>

        <expr_stmt pos:start="99:9" pos:end="103:50"><expr pos:start="99:9" pos:end="103:49"><call pos:start="99:9" pos:end="103:49"><name pos:start="99:9" pos:end="99:23">raise_exception</name><argument_list pos:start="99:24" pos:end="103:49">(<argument pos:start="99:25" pos:end="99:27"><expr pos:start="99:25" pos:end="99:27"><name pos:start="99:25" pos:end="99:27">env</name></expr></argument>, <argument pos:start="99:30" pos:end="99:48"><expr pos:start="99:30" pos:end="99:48"><name pos:start="99:30" pos:end="99:48">EXCP_PREFETCH_ABORT</name></expr></argument>,

                        <argument pos:start="101:25" pos:end="101:47"><expr pos:start="101:25" pos:end="101:47"><call pos:start="101:25" pos:end="101:47"><name pos:start="101:25" pos:end="101:38">syn_breakpoint</name><argument_list pos:start="101:39" pos:end="101:47">(<argument pos:start="101:40" pos:end="101:46"><expr pos:start="101:40" pos:end="101:46"><name pos:start="101:40" pos:end="101:46">same_el</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="103:25" pos:end="103:48"><expr pos:start="103:25" pos:end="103:48"><call pos:start="103:25" pos:end="103:48"><name pos:start="103:25" pos:end="103:43">arm_debug_target_el</name><argument_list pos:start="103:44" pos:end="103:48">(<argument pos:start="103:45" pos:end="103:47"><expr pos:start="103:45" pos:end="103:47"><name pos:start="103:45" pos:end="103:47">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
