<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1105.c" pos:tabs="8"><function pos:start="1:1" pos:end="237:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">mss4_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:45">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:67">int</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">got_frame</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:37">AVPacket</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="237:1">{<block_content pos:start="7:5" pos:end="235:20">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">MSS4Context</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:18">c</name> <init pos:start="11:20" pos:end="11:37">= <expr pos:start="11:22" pos:end="11:37"><name pos:start="11:22" pos:end="11:37"><name pos:start="11:22" pos:end="11:26">avctx</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">GetBitContext</name></type> <name pos:start="13:19" pos:end="13:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:18">GetByteContext</name></type> <name pos:start="15:20" pos:end="15:21">bc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:19"><name pos:start="17:14" pos:end="17:16">dst</name><index pos:start="17:17" pos:end="17:19">[<expr pos:start="17:18" pos:end="17:18"><literal type="number" pos:start="17:18" pos:end="17:18">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:43"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:13">width</name></decl>, <decl pos:start="19:16" pos:end="19:21"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:16" pos:end="19:21">height</name></decl>, <decl pos:start="19:24" pos:end="19:30"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:24" pos:end="19:30">quality</name></decl>, <decl pos:start="19:33" pos:end="19:42"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:33" pos:end="19:42">frame_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:47"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">x</name></decl>, <decl pos:start="21:12" pos:end="21:12"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:12">y</name></decl>, <decl pos:start="21:15" pos:end="21:15"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:15" pos:end="21:15">i</name></decl>, <decl pos:start="21:18" pos:end="21:25"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:18" pos:end="21:25">mb_width</name></decl>, <decl pos:start="21:28" pos:end="21:36"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:28" pos:end="21:36">mb_height</name></decl>, <decl pos:start="21:39" pos:end="21:46"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:39" pos:end="21:46">blk_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:31">(<expr pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:16">buf_size</name> <operator pos:start="27:18" pos:end="27:18">&lt;</operator> <name pos:start="27:20" pos:end="27:30">HEADER_SIZE</name></expr>)</condition> <block pos:start="27:33" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:35">

        <expr_stmt pos:start="29:9" pos:end="33:38"><expr pos:start="29:9" pos:end="33:37"><call pos:start="29:9" pos:end="33:37"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="33:37">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="31:16" pos:end="31:70"><expr pos:start="31:16" pos:end="31:70"><literal type="string" pos:start="31:16" pos:end="31:70">"Frame should have at least %d bytes, got %d instead\n"</literal></expr></argument>,

               <argument pos:start="33:16" pos:end="33:26"><expr pos:start="33:16" pos:end="33:26"><name pos:start="33:16" pos:end="33:26">HEADER_SIZE</name></expr></argument>, <argument pos:start="33:29" pos:end="33:36"><expr pos:start="33:29" pos:end="33:36"><name pos:start="33:29" pos:end="33:36">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:35">return <expr pos:start="35:16" pos:end="35:34"><name pos:start="35:16" pos:end="35:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:41"><expr pos:start="41:5" pos:end="41:40"><call pos:start="41:5" pos:end="41:40"><name pos:start="41:5" pos:end="41:20">bytestream2_init</name><argument_list pos:start="41:21" pos:end="41:40">(<argument pos:start="41:22" pos:end="41:24"><expr pos:start="41:22" pos:end="41:24"><operator pos:start="41:22" pos:end="41:22">&amp;</operator><name pos:start="41:23" pos:end="41:24">bc</name></expr></argument>, <argument pos:start="41:27" pos:end="41:29"><expr pos:start="41:27" pos:end="41:29"><name pos:start="41:27" pos:end="41:29">buf</name></expr></argument>, <argument pos:start="41:32" pos:end="41:39"><expr pos:start="41:32" pos:end="41:39"><name pos:start="41:32" pos:end="41:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:43"><expr pos:start="43:5" pos:end="43:42"><name pos:start="43:5" pos:end="43:9">width</name>      <operator pos:start="43:16" pos:end="43:16">=</operator> <call pos:start="43:18" pos:end="43:42"><name pos:start="43:18" pos:end="43:37">bytestream2_get_be16</name><argument_list pos:start="43:38" pos:end="43:42">(<argument pos:start="43:39" pos:end="43:41"><expr pos:start="43:39" pos:end="43:41"><operator pos:start="43:39" pos:end="43:39">&amp;</operator><name pos:start="43:40" pos:end="43:41">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:43"><expr pos:start="45:5" pos:end="45:42"><name pos:start="45:5" pos:end="45:10">height</name>     <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:42"><name pos:start="45:18" pos:end="45:37">bytestream2_get_be16</name><argument_list pos:start="45:38" pos:end="45:42">(<argument pos:start="45:39" pos:end="45:41"><expr pos:start="45:39" pos:end="45:41"><operator pos:start="45:39" pos:end="45:39">&amp;</operator><name pos:start="45:40" pos:end="45:41">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><call pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:20">bytestream2_skip</name><argument_list pos:start="47:21" pos:end="47:28">(<argument pos:start="47:22" pos:end="47:24"><expr pos:start="47:22" pos:end="47:24"><operator pos:start="47:22" pos:end="47:22">&amp;</operator><name pos:start="47:23" pos:end="47:24">bc</name></expr></argument>, <argument pos:start="47:27" pos:end="47:27"><expr pos:start="47:27" pos:end="47:27"><literal type="number" pos:start="47:27" pos:end="47:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:43"><expr pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:11">quality</name>    <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:42"><name pos:start="49:18" pos:end="49:37">bytestream2_get_byte</name><argument_list pos:start="49:38" pos:end="49:42">(<argument pos:start="49:39" pos:end="49:41"><expr pos:start="49:39" pos:end="49:41"><operator pos:start="49:39" pos:end="49:39">&amp;</operator><name pos:start="49:40" pos:end="49:41">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:43"><expr pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:14">frame_type</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="51:42"><name pos:start="51:18" pos:end="51:37">bytestream2_get_byte</name><argument_list pos:start="51:38" pos:end="51:42">(<argument pos:start="51:39" pos:end="51:41"><expr pos:start="51:39" pos:end="51:41"><operator pos:start="51:39" pos:end="51:39">&amp;</operator><name pos:start="51:40" pos:end="51:41">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="65:5">if <condition pos:start="55:8" pos:end="57:32">(<expr pos:start="55:9" pos:end="57:31"><name pos:start="55:9" pos:end="55:13">width</name> <operator pos:start="55:15" pos:end="55:15">&gt;</operator> <name pos:start="55:17" pos:end="55:28"><name pos:start="55:17" pos:end="55:21">avctx</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:28">width</name></name> <operator pos:start="55:30" pos:end="55:31">||</operator>

        <name pos:start="57:9" pos:end="57:14">height</name> <operator pos:start="57:16" pos:end="57:17">!=</operator> <name pos:start="57:19" pos:end="57:31"><name pos:start="57:19" pos:end="57:23">avctx</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:31">height</name></name></expr>)</condition> <block pos:start="57:34" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:35">

        <expr_stmt pos:start="59:9" pos:end="61:30"><expr pos:start="59:9" pos:end="61:29"><call pos:start="59:9" pos:end="61:29"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="61:29">(<argument pos:start="59:16" pos:end="59:20"><expr pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:20">avctx</name></expr></argument>, <argument pos:start="59:23" pos:end="59:34"><expr pos:start="59:23" pos:end="59:34"><name pos:start="59:23" pos:end="59:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:37" pos:end="59:70"><expr pos:start="59:37" pos:end="59:70"><literal type="string" pos:start="59:37" pos:end="59:70">"Invalid frame dimensions %dx%d\n"</literal></expr></argument>,

               <argument pos:start="61:16" pos:end="61:20"><expr pos:start="61:16" pos:end="61:20"><name pos:start="61:16" pos:end="61:20">width</name></expr></argument>, <argument pos:start="61:23" pos:end="61:28"><expr pos:start="61:23" pos:end="61:28"><name pos:start="61:23" pos:end="61:28">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:35">return <expr pos:start="63:16" pos:end="63:34"><name pos:start="63:16" pos:end="63:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:37">(<expr pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:15">quality</name> <argument_list type="generic" pos:start="67:17" pos:end="67:32">&lt; <argument pos:start="67:19" pos:end="67:30"><expr pos:start="67:19" pos:end="67:30"><literal type="number" pos:start="67:19" pos:end="67:19">1</literal> <operator pos:start="67:21" pos:end="67:22">||</operator> <name pos:start="67:24" pos:end="67:30">quality</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="67:34" pos:end="67:36">100</literal></expr>)</condition> <block pos:start="67:39" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:35">

        <expr_stmt pos:start="69:9" pos:end="69:77"><expr pos:start="69:9" pos:end="69:76"><call pos:start="69:9" pos:end="69:76"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="69:76">(<argument pos:start="69:16" pos:end="69:20"><expr pos:start="69:16" pos:end="69:20"><name pos:start="69:16" pos:end="69:20">avctx</name></expr></argument>, <argument pos:start="69:23" pos:end="69:34"><expr pos:start="69:23" pos:end="69:34"><name pos:start="69:23" pos:end="69:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:37" pos:end="69:66"><expr pos:start="69:37" pos:end="69:66"><literal type="string" pos:start="69:37" pos:end="69:66">"Invalid quality setting %d\n"</literal></expr></argument>, <argument pos:start="69:69" pos:end="69:75"><expr pos:start="69:69" pos:end="69:75"><name pos:start="69:69" pos:end="69:75">quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:35">return <expr pos:start="71:16" pos:end="71:34"><name pos:start="71:16" pos:end="71:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:45">(<expr pos:start="75:9" pos:end="75:44"><operator pos:start="75:9" pos:end="75:9">(</operator><name pos:start="75:10" pos:end="75:19">frame_type</name> <operator pos:start="75:21" pos:end="75:21">&amp;</operator> <operator pos:start="75:23" pos:end="75:23">~</operator><literal type="number" pos:start="75:24" pos:end="75:24">3</literal><operator pos:start="75:25" pos:end="75:25">)</operator> <operator pos:start="75:27" pos:end="75:28">||</operator> <name pos:start="75:30" pos:end="75:39">frame_type</name> <operator pos:start="75:41" pos:end="75:42">==</operator> <literal type="number" pos:start="75:44" pos:end="75:44">3</literal></expr>)</condition> <block pos:start="75:47" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:35">

        <expr_stmt pos:start="77:9" pos:end="77:75"><expr pos:start="77:9" pos:end="77:74"><call pos:start="77:9" pos:end="77:74"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="77:74">(<argument pos:start="77:16" pos:end="77:20"><expr pos:start="77:16" pos:end="77:20"><name pos:start="77:16" pos:end="77:20">avctx</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:37" pos:end="77:61"><expr pos:start="77:37" pos:end="77:61"><literal type="string" pos:start="77:37" pos:end="77:61">"Invalid frame type %d\n"</literal></expr></argument>, <argument pos:start="77:64" pos:end="77:73"><expr pos:start="77:64" pos:end="77:73"><name pos:start="77:64" pos:end="77:73">frame_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:35">return <expr pos:start="79:16" pos:end="79:34"><name pos:start="79:16" pos:end="79:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="93:5">if <condition pos:start="85:8" pos:end="85:69">(<expr pos:start="85:9" pos:end="85:68"><name pos:start="85:9" pos:end="85:18">frame_type</name> <operator pos:start="85:20" pos:end="85:21">!=</operator> <name pos:start="85:23" pos:end="85:32">SKIP_FRAME</name> <operator pos:start="85:34" pos:end="85:35">&amp;&amp;</operator> <operator pos:start="85:37" pos:end="85:37">!</operator><call pos:start="85:38" pos:end="85:68"><name pos:start="85:38" pos:end="85:63">bytestream2_get_bytes_left</name><argument_list pos:start="85:64" pos:end="85:68">(<argument pos:start="85:65" pos:end="85:67"><expr pos:start="85:65" pos:end="85:67"><operator pos:start="85:65" pos:end="85:65">&amp;</operator><name pos:start="85:66" pos:end="85:67">bc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:71" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:35">

        <expr_stmt pos:start="87:9" pos:end="89:66"><expr pos:start="87:9" pos:end="89:65"><call pos:start="87:9" pos:end="89:65"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="89:65">(<argument pos:start="87:16" pos:end="87:20"><expr pos:start="87:16" pos:end="87:20"><name pos:start="87:16" pos:end="87:20">avctx</name></expr></argument>, <argument pos:start="87:23" pos:end="87:34"><expr pos:start="87:23" pos:end="87:34"><name pos:start="87:23" pos:end="87:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="89:16" pos:end="89:64"><expr pos:start="89:16" pos:end="89:64"><literal type="string" pos:start="89:16" pos:end="89:64">"Empty frame found but it is not a skip frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:35">return <expr pos:start="91:16" pos:end="91:34"><name pos:start="91:16" pos:end="91:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="99:19"><if pos:start="97:5" pos:end="99:19">if <condition pos:start="97:8" pos:end="97:51">(<expr pos:start="97:9" pos:end="97:50"><operator pos:start="97:9" pos:end="97:9">(</operator><name pos:start="97:10" pos:end="97:12">ret</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <call pos:start="97:16" pos:end="97:45"><name pos:start="97:16" pos:end="97:30">ff_reget_buffer</name><argument_list pos:start="97:31" pos:end="97:45">(<argument pos:start="97:32" pos:end="97:36"><expr pos:start="97:32" pos:end="97:36"><name pos:start="97:32" pos:end="97:36">avctx</name></expr></argument>, <argument pos:start="97:39" pos:end="97:44"><expr pos:start="97:39" pos:end="97:44"><name pos:start="97:39" pos:end="97:44"><name pos:start="97:39" pos:end="97:39">c</name><operator pos:start="97:40" pos:end="97:41">-&gt;</operator><name pos:start="97:42" pos:end="97:44">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="97:46" pos:end="97:46">)</operator> <operator pos:start="97:48" pos:end="97:48">&lt;</operator> <literal type="number" pos:start="97:50" pos:end="97:50">0</literal></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:19"><block_content pos:start="99:9" pos:end="99:19">

        <return pos:start="99:9" pos:end="99:19">return <expr pos:start="99:16" pos:end="99:18"><name pos:start="99:16" pos:end="99:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:52"><expr pos:start="101:5" pos:end="101:51"><name pos:start="101:5" pos:end="101:21"><name pos:start="101:5" pos:end="101:5">c</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:10">pic</name><operator pos:start="101:11" pos:end="101:12">-&gt;</operator><name pos:start="101:13" pos:end="101:21">key_frame</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator> <operator pos:start="101:25" pos:end="101:25">(</operator><name pos:start="101:26" pos:end="101:35">frame_type</name> <operator pos:start="101:37" pos:end="101:38">==</operator> <name pos:start="101:40" pos:end="101:50">INTRA_FRAME</name><operator pos:start="101:51" pos:end="101:51">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="105:71"><expr pos:start="103:5" pos:end="105:70"><name pos:start="103:5" pos:end="103:21"><name pos:start="103:5" pos:end="103:5">c</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:10">pic</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:21">pict_type</name></name> <operator pos:start="103:23" pos:end="103:23">=</operator> <ternary pos:start="103:25" pos:end="105:70"><condition pos:start="103:25" pos:end="103:53"><expr pos:start="103:25" pos:end="103:51"><operator pos:start="103:25" pos:end="103:25">(</operator><name pos:start="103:26" pos:end="103:35">frame_type</name> <operator pos:start="103:37" pos:end="103:38">==</operator> <name pos:start="103:40" pos:end="103:50">INTRA_FRAME</name><operator pos:start="103:51" pos:end="103:51">)</operator></expr> ?</condition><then pos:start="103:55" pos:end="103:71"> <expr pos:start="103:55" pos:end="103:71"><name pos:start="103:55" pos:end="103:71">AV_PICTURE_TYPE_I</name></expr>

                                                   </then><else pos:start="105:52" pos:end="105:70">: <expr pos:start="105:54" pos:end="105:70"><name pos:start="105:54" pos:end="105:70">AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="119:5"><if pos:start="107:5" pos:end="119:5">if <condition pos:start="107:8" pos:end="107:33">(<expr pos:start="107:9" pos:end="107:32"><name pos:start="107:9" pos:end="107:18">frame_type</name> <operator pos:start="107:20" pos:end="107:21">==</operator> <name pos:start="107:23" pos:end="107:32">SKIP_FRAME</name></expr>)</condition> <block pos:start="107:35" pos:end="119:5">{<block_content pos:start="109:9" pos:end="117:24">

        <expr_stmt pos:start="109:9" pos:end="109:28"><expr pos:start="109:9" pos:end="109:27"><operator pos:start="109:9" pos:end="109:9">*</operator><name pos:start="109:10" pos:end="109:18">got_frame</name>      <operator pos:start="109:25" pos:end="109:25">=</operator> <literal type="number" pos:start="109:27" pos:end="109:27">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="113:23"><if pos:start="111:9" pos:end="113:23">if <condition pos:start="111:12" pos:end="111:51">(<expr pos:start="111:13" pos:end="111:50"><operator pos:start="111:13" pos:end="111:13">(</operator><name pos:start="111:14" pos:end="111:16">ret</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <call pos:start="111:20" pos:end="111:45"><name pos:start="111:20" pos:end="111:31">av_frame_ref</name><argument_list pos:start="111:32" pos:end="111:45">(<argument pos:start="111:33" pos:end="111:36"><expr pos:start="111:33" pos:end="111:36"><name pos:start="111:33" pos:end="111:36">data</name></expr></argument>, <argument pos:start="111:39" pos:end="111:44"><expr pos:start="111:39" pos:end="111:44"><name pos:start="111:39" pos:end="111:44"><name pos:start="111:39" pos:end="111:39">c</name><operator pos:start="111:40" pos:end="111:41">-&gt;</operator><name pos:start="111:42" pos:end="111:44">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="111:46" pos:end="111:46">)</operator> <operator pos:start="111:48" pos:end="111:48">&lt;</operator> <literal type="number" pos:start="111:50" pos:end="111:50">0</literal></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:23"><block_content pos:start="113:13" pos:end="113:23">

            <return pos:start="113:13" pos:end="113:23">return <expr pos:start="113:20" pos:end="113:22"><name pos:start="113:20" pos:end="113:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <return pos:start="117:9" pos:end="117:24">return <expr pos:start="117:16" pos:end="117:23"><name pos:start="117:16" pos:end="117:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="131:5"><if pos:start="123:5" pos:end="131:5">if <condition pos:start="123:8" pos:end="123:30">(<expr pos:start="123:9" pos:end="123:29"><name pos:start="123:9" pos:end="123:18"><name pos:start="123:9" pos:end="123:9">c</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:18">quality</name></name> <operator pos:start="123:20" pos:end="123:21">!=</operator> <name pos:start="123:23" pos:end="123:29">quality</name></expr>)</condition> <block pos:start="123:32" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:65">

        <expr_stmt pos:start="125:9" pos:end="125:29"><expr pos:start="125:9" pos:end="125:28"><name pos:start="125:9" pos:end="125:18"><name pos:start="125:9" pos:end="125:9">c</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:18">quality</name></name> <operator pos:start="125:20" pos:end="125:20">=</operator> <name pos:start="125:22" pos:end="125:28">quality</name></expr>;</expr_stmt>

        <for pos:start="127:9" pos:end="129:65">for <control pos:start="127:13" pos:end="127:31">(<init pos:start="127:14" pos:end="127:19"><expr pos:start="127:14" pos:end="127:18"><name pos:start="127:14" pos:end="127:14">i</name> <operator pos:start="127:16" pos:end="127:16">=</operator> <literal type="number" pos:start="127:18" pos:end="127:18">0</literal></expr>;</init> <condition pos:start="127:21" pos:end="127:26"><expr pos:start="127:21" pos:end="127:25"><name pos:start="127:21" pos:end="127:21">i</name> <operator pos:start="127:23" pos:end="127:23">&lt;</operator> <literal type="number" pos:start="127:25" pos:end="127:25">2</literal></expr>;</condition> <incr pos:start="127:28" pos:end="127:30"><expr pos:start="127:28" pos:end="127:30"><name pos:start="127:28" pos:end="127:28">i</name><operator pos:start="127:29" pos:end="127:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="129:13" pos:end="129:65"><block_content pos:start="129:13" pos:end="129:65">

            <expr_stmt pos:start="129:13" pos:end="129:65"><expr pos:start="129:13" pos:end="129:64"><call pos:start="129:13" pos:end="129:64"><name pos:start="129:13" pos:end="129:34">ff_mss34_gen_quant_mat</name><argument_list pos:start="129:35" pos:end="129:64">(<argument pos:start="129:36" pos:end="129:50"><expr pos:start="129:36" pos:end="129:50"><name pos:start="129:36" pos:end="129:50"><name pos:start="129:36" pos:end="129:36">c</name><operator pos:start="129:37" pos:end="129:38">-&gt;</operator><name pos:start="129:39" pos:end="129:47">quant_mat</name><index pos:start="129:48" pos:end="129:50">[<expr pos:start="129:49" pos:end="129:49"><name pos:start="129:49" pos:end="129:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="129:53" pos:end="129:59"><expr pos:start="129:53" pos:end="129:59"><name pos:start="129:53" pos:end="129:59">quality</name></expr></argument>, <argument pos:start="129:62" pos:end="129:63"><expr pos:start="129:62" pos:end="129:63"><operator pos:start="129:62" pos:end="129:62">!</operator><name pos:start="129:63" pos:end="129:63">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:69"><expr pos:start="135:5" pos:end="135:68"><call pos:start="135:5" pos:end="135:68"><name pos:start="135:5" pos:end="135:18">init_get_bits8</name><argument_list pos:start="135:19" pos:end="135:68">(<argument pos:start="135:20" pos:end="135:22"><expr pos:start="135:20" pos:end="135:22"><operator pos:start="135:20" pos:end="135:20">&amp;</operator><name pos:start="135:21" pos:end="135:22">gb</name></expr></argument>, <argument pos:start="135:25" pos:end="135:41"><expr pos:start="135:25" pos:end="135:41"><name pos:start="135:25" pos:end="135:27">buf</name> <operator pos:start="135:29" pos:end="135:29">+</operator> <name pos:start="135:31" pos:end="135:41">HEADER_SIZE</name></expr></argument>, <argument pos:start="135:44" pos:end="135:67"><expr pos:start="135:44" pos:end="135:67"><operator pos:start="135:44" pos:end="135:44">(</operator><name pos:start="135:45" pos:end="135:52">buf_size</name> <operator pos:start="135:54" pos:end="135:54">-</operator> <name pos:start="135:56" pos:end="135:66">HEADER_SIZE</name><operator pos:start="135:67" pos:end="135:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:41"><expr pos:start="139:5" pos:end="139:40"><name pos:start="139:5" pos:end="139:12">mb_width</name>  <operator pos:start="139:15" pos:end="139:15">=</operator> <call pos:start="139:17" pos:end="139:35"><name pos:start="139:17" pos:end="139:23">FFALIGN</name><argument_list pos:start="139:24" pos:end="139:35">(<argument pos:start="139:25" pos:end="139:29"><expr pos:start="139:25" pos:end="139:29"><name pos:start="139:25" pos:end="139:29">width</name></expr></argument>,  <argument pos:start="139:33" pos:end="139:34"><expr pos:start="139:33" pos:end="139:34"><literal type="number" pos:start="139:33" pos:end="139:34">16</literal></expr></argument>)</argument_list></call> <operator pos:start="139:37" pos:end="139:38">&gt;&gt;</operator> <literal type="number" pos:start="139:40" pos:end="139:40">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:41"><expr pos:start="141:5" pos:end="141:40"><name pos:start="141:5" pos:end="141:13">mb_height</name> <operator pos:start="141:15" pos:end="141:15">=</operator> <call pos:start="141:17" pos:end="141:35"><name pos:start="141:17" pos:end="141:23">FFALIGN</name><argument_list pos:start="141:24" pos:end="141:35">(<argument pos:start="141:25" pos:end="141:30"><expr pos:start="141:25" pos:end="141:30"><name pos:start="141:25" pos:end="141:30">height</name></expr></argument>, <argument pos:start="141:33" pos:end="141:34"><expr pos:start="141:33" pos:end="141:34"><literal type="number" pos:start="141:33" pos:end="141:34">16</literal></expr></argument>)</argument_list></call> <operator pos:start="141:37" pos:end="141:38">&gt;&gt;</operator> <literal type="number" pos:start="141:40" pos:end="141:40">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:29"><expr pos:start="143:5" pos:end="143:28"><name pos:start="143:5" pos:end="143:10"><name pos:start="143:5" pos:end="143:7">dst</name><index pos:start="143:8" pos:end="143:10">[<expr pos:start="143:9" pos:end="143:9"><literal type="number" pos:start="143:9" pos:end="143:9">0</literal></expr>]</index></name> <operator pos:start="143:12" pos:end="143:12">=</operator> <name pos:start="143:14" pos:end="143:28"><name pos:start="143:14" pos:end="143:14">c</name><operator pos:start="143:15" pos:end="143:16">-&gt;</operator><name pos:start="143:17" pos:end="143:19">pic</name><operator pos:start="143:20" pos:end="143:21">-&gt;</operator><name pos:start="143:22" pos:end="143:25">data</name><index pos:start="143:26" pos:end="143:28">[<expr pos:start="143:27" pos:end="143:27"><literal type="number" pos:start="143:27" pos:end="143:27">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:29"><expr pos:start="145:5" pos:end="145:28"><name pos:start="145:5" pos:end="145:10"><name pos:start="145:5" pos:end="145:7">dst</name><index pos:start="145:8" pos:end="145:10">[<expr pos:start="145:9" pos:end="145:9"><literal type="number" pos:start="145:9" pos:end="145:9">1</literal></expr>]</index></name> <operator pos:start="145:12" pos:end="145:12">=</operator> <name pos:start="145:14" pos:end="145:28"><name pos:start="145:14" pos:end="145:14">c</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:19">pic</name><operator pos:start="145:20" pos:end="145:21">-&gt;</operator><name pos:start="145:22" pos:end="145:25">data</name><index pos:start="145:26" pos:end="145:28">[<expr pos:start="145:27" pos:end="145:27"><literal type="number" pos:start="145:27" pos:end="145:27">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:29"><expr pos:start="147:5" pos:end="147:28"><name pos:start="147:5" pos:end="147:10"><name pos:start="147:5" pos:end="147:7">dst</name><index pos:start="147:8" pos:end="147:10">[<expr pos:start="147:9" pos:end="147:9"><literal type="number" pos:start="147:9" pos:end="147:9">2</literal></expr>]</index></name> <operator pos:start="147:12" pos:end="147:12">=</operator> <name pos:start="147:14" pos:end="147:28"><name pos:start="147:14" pos:end="147:14">c</name><operator pos:start="147:15" pos:end="147:16">-&gt;</operator><name pos:start="147:17" pos:end="147:19">pic</name><operator pos:start="147:20" pos:end="147:21">-&gt;</operator><name pos:start="147:22" pos:end="147:25">data</name><index pos:start="147:26" pos:end="147:28">[<expr pos:start="147:27" pos:end="147:27"><literal type="number" pos:start="147:27" pos:end="147:27">2</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:48"><expr pos:start="151:5" pos:end="151:47"><call pos:start="151:5" pos:end="151:47"><name pos:start="151:5" pos:end="151:10">memset</name><argument_list pos:start="151:11" pos:end="151:47">(<argument pos:start="151:12" pos:end="151:22"><expr pos:start="151:12" pos:end="151:22"><name pos:start="151:12" pos:end="151:22"><name pos:start="151:12" pos:end="151:12">c</name><operator pos:start="151:13" pos:end="151:14">-&gt;</operator><name pos:start="151:15" pos:end="151:22">prev_vec</name></name></expr></argument>, <argument pos:start="151:25" pos:end="151:25"><expr pos:start="151:25" pos:end="151:25"><literal type="number" pos:start="151:25" pos:end="151:25">0</literal></expr></argument>, <argument pos:start="151:28" pos:end="151:46"><expr pos:start="151:28" pos:end="151:46"><sizeof pos:start="151:28" pos:end="151:46">sizeof<argument_list pos:start="151:34" pos:end="151:46">(<argument pos:start="151:35" pos:end="151:45"><expr pos:start="151:35" pos:end="151:45"><name pos:start="151:35" pos:end="151:45"><name pos:start="151:35" pos:end="151:35">c</name><operator pos:start="151:36" pos:end="151:37">-&gt;</operator><name pos:start="151:38" pos:end="151:45">prev_vec</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="153:5" pos:end="221:5">for <control pos:start="153:9" pos:end="153:35">(<init pos:start="153:10" pos:end="153:15"><expr pos:start="153:10" pos:end="153:14"><name pos:start="153:10" pos:end="153:10">y</name> <operator pos:start="153:12" pos:end="153:12">=</operator> <literal type="number" pos:start="153:14" pos:end="153:14">0</literal></expr>;</init> <condition pos:start="153:17" pos:end="153:30"><expr pos:start="153:17" pos:end="153:29"><name pos:start="153:17" pos:end="153:17">y</name> <operator pos:start="153:19" pos:end="153:19">&lt;</operator> <name pos:start="153:21" pos:end="153:29">mb_height</name></expr>;</condition> <incr pos:start="153:32" pos:end="153:34"><expr pos:start="153:32" pos:end="153:34"><name pos:start="153:32" pos:end="153:32">y</name><operator pos:start="153:33" pos:end="153:34">++</operator></expr></incr>)</control> <block pos:start="153:37" pos:end="221:5">{<block_content pos:start="155:9" pos:end="219:43">

        <expr_stmt pos:start="155:9" pos:end="155:52"><expr pos:start="155:9" pos:end="155:51"><call pos:start="155:9" pos:end="155:51"><name pos:start="155:9" pos:end="155:14">memset</name><argument_list pos:start="155:15" pos:end="155:51">(<argument pos:start="155:16" pos:end="155:26"><expr pos:start="155:16" pos:end="155:26"><name pos:start="155:16" pos:end="155:26"><name pos:start="155:16" pos:end="155:16">c</name><operator pos:start="155:17" pos:end="155:18">-&gt;</operator><name pos:start="155:19" pos:end="155:26">dc_cache</name></name></expr></argument>, <argument pos:start="155:29" pos:end="155:29"><expr pos:start="155:29" pos:end="155:29"><literal type="number" pos:start="155:29" pos:end="155:29">0</literal></expr></argument>, <argument pos:start="155:32" pos:end="155:50"><expr pos:start="155:32" pos:end="155:50"><sizeof pos:start="155:32" pos:end="155:50">sizeof<argument_list pos:start="155:38" pos:end="155:50">(<argument pos:start="155:39" pos:end="155:49"><expr pos:start="155:39" pos:end="155:49"><name pos:start="155:39" pos:end="155:49"><name pos:start="155:39" pos:end="155:39">c</name><operator pos:start="155:40" pos:end="155:41">-&gt;</operator><name pos:start="155:42" pos:end="155:49">dc_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="157:9" pos:end="213:9">for <control pos:start="157:13" pos:end="157:38">(<init pos:start="157:14" pos:end="157:19"><expr pos:start="157:14" pos:end="157:18"><name pos:start="157:14" pos:end="157:14">x</name> <operator pos:start="157:16" pos:end="157:16">=</operator> <literal type="number" pos:start="157:18" pos:end="157:18">0</literal></expr>;</init> <condition pos:start="157:21" pos:end="157:33"><expr pos:start="157:21" pos:end="157:32"><name pos:start="157:21" pos:end="157:21">x</name> <operator pos:start="157:23" pos:end="157:23">&lt;</operator> <name pos:start="157:25" pos:end="157:32">mb_width</name></expr>;</condition> <incr pos:start="157:35" pos:end="157:37"><expr pos:start="157:35" pos:end="157:37"><name pos:start="157:35" pos:end="157:35">x</name><operator pos:start="157:36" pos:end="157:37">++</operator></expr></incr>)</control> <block pos:start="157:40" pos:end="213:9">{<block_content pos:start="159:13" pos:end="211:43">

            <expr_stmt pos:start="159:13" pos:end="159:38"><expr pos:start="159:13" pos:end="159:37"><name pos:start="159:13" pos:end="159:20">blk_type</name> <operator pos:start="159:22" pos:end="159:22">=</operator> <call pos:start="159:24" pos:end="159:37"><name pos:start="159:24" pos:end="159:32">decode012</name><argument_list pos:start="159:33" pos:end="159:37">(<argument pos:start="159:34" pos:end="159:36"><expr pos:start="159:34" pos:end="159:36"><operator pos:start="159:34" pos:end="159:34">&amp;</operator><name pos:start="159:35" pos:end="159:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="161:13" pos:end="207:13">switch <condition pos:start="161:20" pos:end="161:29">(<expr pos:start="161:21" pos:end="161:28"><name pos:start="161:21" pos:end="161:28">blk_type</name></expr>)</condition> <block pos:start="161:31" pos:end="207:13">{<block_content pos:start="163:13" pos:end="205:22">

            <case pos:start="163:13" pos:end="163:27">case <expr pos:start="163:18" pos:end="163:26"><name pos:start="163:18" pos:end="163:26">DCT_BLOCK</name></expr>:</case>

                <if_stmt pos:start="165:17" pos:end="175:17"><if pos:start="165:17" pos:end="175:17">if <condition pos:start="165:20" pos:end="165:65">(<expr pos:start="165:21" pos:end="165:64"><call pos:start="165:21" pos:end="165:60"><name pos:start="165:21" pos:end="165:41">mss4_decode_dct_block</name><argument_list pos:start="165:42" pos:end="165:60">(<argument pos:start="165:43" pos:end="165:43"><expr pos:start="165:43" pos:end="165:43"><name pos:start="165:43" pos:end="165:43">c</name></expr></argument>, <argument pos:start="165:46" pos:end="165:48"><expr pos:start="165:46" pos:end="165:48"><operator pos:start="165:46" pos:end="165:46">&amp;</operator><name pos:start="165:47" pos:end="165:48">gb</name></expr></argument>, <argument pos:start="165:51" pos:end="165:53"><expr pos:start="165:51" pos:end="165:53"><name pos:start="165:51" pos:end="165:53">dst</name></expr></argument>, <argument pos:start="165:56" pos:end="165:56"><expr pos:start="165:56" pos:end="165:56"><name pos:start="165:56" pos:end="165:56">x</name></expr></argument>, <argument pos:start="165:59" pos:end="165:59"><expr pos:start="165:59" pos:end="165:59"><name pos:start="165:59" pos:end="165:59">y</name></expr></argument>)</argument_list></call> <operator pos:start="165:62" pos:end="165:62">&lt;</operator> <literal type="number" pos:start="165:64" pos:end="165:64">0</literal></expr>)</condition> <block pos:start="165:67" pos:end="175:17">{<block_content pos:start="167:21" pos:end="173:47">

                    <expr_stmt pos:start="167:21" pos:end="171:33"><expr pos:start="167:21" pos:end="171:32"><call pos:start="167:21" pos:end="171:32"><name pos:start="167:21" pos:end="167:26">av_log</name><argument_list pos:start="167:27" pos:end="171:32">(<argument pos:start="167:28" pos:end="167:32"><expr pos:start="167:28" pos:end="167:32"><name pos:start="167:28" pos:end="167:32">avctx</name></expr></argument>, <argument pos:start="167:35" pos:end="167:46"><expr pos:start="167:35" pos:end="167:46"><name pos:start="167:35" pos:end="167:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="169:28" pos:end="169:61"><expr pos:start="169:28" pos:end="169:61"><literal type="string" pos:start="169:28" pos:end="169:61">"Error decoding DCT block %d,%d\n"</literal></expr></argument>,

                           <argument pos:start="171:28" pos:end="171:28"><expr pos:start="171:28" pos:end="171:28"><name pos:start="171:28" pos:end="171:28">x</name></expr></argument>, <argument pos:start="171:31" pos:end="171:31"><expr pos:start="171:31" pos:end="171:31"><name pos:start="171:31" pos:end="171:31">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="173:21" pos:end="173:47">return <expr pos:start="173:28" pos:end="173:46"><name pos:start="173:28" pos:end="173:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <break pos:start="177:17" pos:end="177:22">break;</break>

            <case pos:start="179:13" pos:end="179:29">case <expr pos:start="179:18" pos:end="179:28"><name pos:start="179:18" pos:end="179:28">IMAGE_BLOCK</name></expr>:</case>

                <if_stmt pos:start="181:17" pos:end="191:17"><if pos:start="181:17" pos:end="191:17">if <condition pos:start="181:20" pos:end="181:67">(<expr pos:start="181:21" pos:end="181:66"><call pos:start="181:21" pos:end="181:62"><name pos:start="181:21" pos:end="181:43">mss4_decode_image_block</name><argument_list pos:start="181:44" pos:end="181:62">(<argument pos:start="181:45" pos:end="181:45"><expr pos:start="181:45" pos:end="181:45"><name pos:start="181:45" pos:end="181:45">c</name></expr></argument>, <argument pos:start="181:48" pos:end="181:50"><expr pos:start="181:48" pos:end="181:50"><operator pos:start="181:48" pos:end="181:48">&amp;</operator><name pos:start="181:49" pos:end="181:50">gb</name></expr></argument>, <argument pos:start="181:53" pos:end="181:55"><expr pos:start="181:53" pos:end="181:55"><name pos:start="181:53" pos:end="181:55">dst</name></expr></argument>, <argument pos:start="181:58" pos:end="181:58"><expr pos:start="181:58" pos:end="181:58"><name pos:start="181:58" pos:end="181:58">x</name></expr></argument>, <argument pos:start="181:61" pos:end="181:61"><expr pos:start="181:61" pos:end="181:61"><name pos:start="181:61" pos:end="181:61">y</name></expr></argument>)</argument_list></call> <operator pos:start="181:64" pos:end="181:64">&lt;</operator> <literal type="number" pos:start="181:66" pos:end="181:66">0</literal></expr>)</condition> <block pos:start="181:69" pos:end="191:17">{<block_content pos:start="183:21" pos:end="189:47">

                    <expr_stmt pos:start="183:21" pos:end="187:33"><expr pos:start="183:21" pos:end="187:32"><call pos:start="183:21" pos:end="187:32"><name pos:start="183:21" pos:end="183:26">av_log</name><argument_list pos:start="183:27" pos:end="187:32">(<argument pos:start="183:28" pos:end="183:32"><expr pos:start="183:28" pos:end="183:32"><name pos:start="183:28" pos:end="183:32">avctx</name></expr></argument>, <argument pos:start="183:35" pos:end="183:46"><expr pos:start="183:35" pos:end="183:46"><name pos:start="183:35" pos:end="183:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="185:28" pos:end="185:60"><expr pos:start="185:28" pos:end="185:60"><literal type="string" pos:start="185:28" pos:end="185:60">"Error decoding VQ block %d,%d\n"</literal></expr></argument>,

                           <argument pos:start="187:28" pos:end="187:28"><expr pos:start="187:28" pos:end="187:28"><name pos:start="187:28" pos:end="187:28">x</name></expr></argument>, <argument pos:start="187:31" pos:end="187:31"><expr pos:start="187:31" pos:end="187:31"><name pos:start="187:31" pos:end="187:31">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="189:21" pos:end="189:47">return <expr pos:start="189:28" pos:end="189:46"><name pos:start="189:28" pos:end="189:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <break pos:start="193:17" pos:end="193:22">break;</break>

            <case pos:start="195:13" pos:end="195:28">case <expr pos:start="195:18" pos:end="195:27"><name pos:start="195:18" pos:end="195:27">SKIP_BLOCK</name></expr>:</case>

                <if_stmt pos:start="197:17" pos:end="203:17"><if pos:start="197:17" pos:end="203:17">if <condition pos:start="197:20" pos:end="197:46">(<expr pos:start="197:21" pos:end="197:45"><name pos:start="197:21" pos:end="197:30">frame_type</name> <operator pos:start="197:32" pos:end="197:33">==</operator> <name pos:start="197:35" pos:end="197:45">INTRA_FRAME</name></expr>)</condition> <block pos:start="197:48" pos:end="203:17">{<block_content pos:start="199:21" pos:end="201:47">

                    <expr_stmt pos:start="199:21" pos:end="199:79"><expr pos:start="199:21" pos:end="199:78"><call pos:start="199:21" pos:end="199:78"><name pos:start="199:21" pos:end="199:26">av_log</name><argument_list pos:start="199:27" pos:end="199:78">(<argument pos:start="199:28" pos:end="199:32"><expr pos:start="199:28" pos:end="199:32"><name pos:start="199:28" pos:end="199:32">avctx</name></expr></argument>, <argument pos:start="199:35" pos:end="199:46"><expr pos:start="199:35" pos:end="199:46"><name pos:start="199:35" pos:end="199:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="199:49" pos:end="199:77"><expr pos:start="199:49" pos:end="199:77"><literal type="string" pos:start="199:49" pos:end="199:77">"Skip block in intra frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="201:21" pos:end="201:47">return <expr pos:start="201:28" pos:end="201:46"><name pos:start="201:28" pos:end="201:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <break pos:start="205:17" pos:end="205:22">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="209:13" pos:end="211:43"><if pos:start="209:13" pos:end="211:43">if <condition pos:start="209:16" pos:end="209:38">(<expr pos:start="209:17" pos:end="209:37"><name pos:start="209:17" pos:end="209:24">blk_type</name> <operator pos:start="209:26" pos:end="209:27">!=</operator> <name pos:start="209:29" pos:end="209:37">DCT_BLOCK</name></expr>)</condition><block type="pseudo" pos:start="211:17" pos:end="211:43"><block_content pos:start="211:17" pos:end="211:43">

                <expr_stmt pos:start="211:17" pos:end="211:43"><expr pos:start="211:17" pos:end="211:42"><call pos:start="211:17" pos:end="211:42"><name pos:start="211:17" pos:end="211:36">mss4_update_dc_cache</name><argument_list pos:start="211:37" pos:end="211:42">(<argument pos:start="211:38" pos:end="211:38"><expr pos:start="211:38" pos:end="211:38"><name pos:start="211:38" pos:end="211:38">c</name></expr></argument>, <argument pos:start="211:41" pos:end="211:41"><expr pos:start="211:41" pos:end="211:41"><name pos:start="211:41" pos:end="211:41">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="215:9" pos:end="215:43"><expr pos:start="215:9" pos:end="215:42"><name pos:start="215:9" pos:end="215:14"><name pos:start="215:9" pos:end="215:11">dst</name><index pos:start="215:12" pos:end="215:14">[<expr pos:start="215:13" pos:end="215:13"><literal type="number" pos:start="215:13" pos:end="215:13">0</literal></expr>]</index></name> <operator pos:start="215:16" pos:end="215:17">+=</operator> <name pos:start="215:19" pos:end="215:37"><name pos:start="215:19" pos:end="215:19">c</name><operator pos:start="215:20" pos:end="215:21">-&gt;</operator><name pos:start="215:22" pos:end="215:24">pic</name><operator pos:start="215:25" pos:end="215:26">-&gt;</operator><name pos:start="215:27" pos:end="215:34">linesize</name><index pos:start="215:35" pos:end="215:37">[<expr pos:start="215:36" pos:end="215:36"><literal type="number" pos:start="215:36" pos:end="215:36">0</literal></expr>]</index></name> <operator pos:start="215:39" pos:end="215:39">*</operator> <literal type="number" pos:start="215:41" pos:end="215:42">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:43"><expr pos:start="217:9" pos:end="217:42"><name pos:start="217:9" pos:end="217:14"><name pos:start="217:9" pos:end="217:11">dst</name><index pos:start="217:12" pos:end="217:14">[<expr pos:start="217:13" pos:end="217:13"><literal type="number" pos:start="217:13" pos:end="217:13">1</literal></expr>]</index></name> <operator pos:start="217:16" pos:end="217:17">+=</operator> <name pos:start="217:19" pos:end="217:37"><name pos:start="217:19" pos:end="217:19">c</name><operator pos:start="217:20" pos:end="217:21">-&gt;</operator><name pos:start="217:22" pos:end="217:24">pic</name><operator pos:start="217:25" pos:end="217:26">-&gt;</operator><name pos:start="217:27" pos:end="217:34">linesize</name><index pos:start="217:35" pos:end="217:37">[<expr pos:start="217:36" pos:end="217:36"><literal type="number" pos:start="217:36" pos:end="217:36">1</literal></expr>]</index></name> <operator pos:start="217:39" pos:end="217:39">*</operator> <literal type="number" pos:start="217:41" pos:end="217:42">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:43"><expr pos:start="219:9" pos:end="219:42"><name pos:start="219:9" pos:end="219:14"><name pos:start="219:9" pos:end="219:11">dst</name><index pos:start="219:12" pos:end="219:14">[<expr pos:start="219:13" pos:end="219:13"><literal type="number" pos:start="219:13" pos:end="219:13">2</literal></expr>]</index></name> <operator pos:start="219:16" pos:end="219:17">+=</operator> <name pos:start="219:19" pos:end="219:37"><name pos:start="219:19" pos:end="219:19">c</name><operator pos:start="219:20" pos:end="219:21">-&gt;</operator><name pos:start="219:22" pos:end="219:24">pic</name><operator pos:start="219:25" pos:end="219:26">-&gt;</operator><name pos:start="219:27" pos:end="219:34">linesize</name><index pos:start="219:35" pos:end="219:37">[<expr pos:start="219:36" pos:end="219:36"><literal type="number" pos:start="219:36" pos:end="219:36">2</literal></expr>]</index></name> <operator pos:start="219:39" pos:end="219:39">*</operator> <literal type="number" pos:start="219:41" pos:end="219:42">16</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="225:5" pos:end="227:19"><if pos:start="225:5" pos:end="227:19">if <condition pos:start="225:8" pos:end="225:47">(<expr pos:start="225:9" pos:end="225:46"><operator pos:start="225:9" pos:end="225:9">(</operator><name pos:start="225:10" pos:end="225:12">ret</name> <operator pos:start="225:14" pos:end="225:14">=</operator> <call pos:start="225:16" pos:end="225:41"><name pos:start="225:16" pos:end="225:27">av_frame_ref</name><argument_list pos:start="225:28" pos:end="225:41">(<argument pos:start="225:29" pos:end="225:32"><expr pos:start="225:29" pos:end="225:32"><name pos:start="225:29" pos:end="225:32">data</name></expr></argument>, <argument pos:start="225:35" pos:end="225:40"><expr pos:start="225:35" pos:end="225:40"><name pos:start="225:35" pos:end="225:40"><name pos:start="225:35" pos:end="225:35">c</name><operator pos:start="225:36" pos:end="225:37">-&gt;</operator><name pos:start="225:38" pos:end="225:40">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="225:42" pos:end="225:42">)</operator> <operator pos:start="225:44" pos:end="225:44">&lt;</operator> <literal type="number" pos:start="225:46" pos:end="225:46">0</literal></expr>)</condition><block type="pseudo" pos:start="227:9" pos:end="227:19"><block_content pos:start="227:9" pos:end="227:19">

        <return pos:start="227:9" pos:end="227:19">return <expr pos:start="227:16" pos:end="227:18"><name pos:start="227:16" pos:end="227:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="231:5" pos:end="231:24"><expr pos:start="231:5" pos:end="231:23"><operator pos:start="231:5" pos:end="231:5">*</operator><name pos:start="231:6" pos:end="231:14">got_frame</name>      <operator pos:start="231:21" pos:end="231:21">=</operator> <literal type="number" pos:start="231:23" pos:end="231:23">1</literal></expr>;</expr_stmt>



    <return pos:start="235:5" pos:end="235:20">return <expr pos:start="235:12" pos:end="235:19"><name pos:start="235:12" pos:end="235:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
