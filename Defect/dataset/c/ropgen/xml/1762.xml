<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1762.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">test_hash_base64</name><parameter_list pos:start="1:29" pos:end="1:34">(<parameter pos:start="1:30" pos:end="1:33"><decl pos:start="1:30" pos:end="1:33"><type pos:start="1:30" pos:end="1:33"><name pos:start="1:30" pos:end="1:33">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:5">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">size_t</name></type> <name pos:start="5:12" pos:end="5:12">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:38"><expr pos:start="9:5" pos:end="9:37"><call pos:start="9:5" pos:end="9:37"><name pos:start="9:5" pos:end="9:12">g_assert</name><argument_list pos:start="9:13" pos:end="9:37">(<argument pos:start="9:14" pos:end="9:36"><expr pos:start="9:14" pos:end="9:36"><call pos:start="9:14" pos:end="9:31"><name pos:start="9:14" pos:end="9:25">qcrypto_init</name><argument_list pos:start="9:26" pos:end="9:31">(<argument pos:start="9:27" pos:end="9:30"><expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="9:33" pos:end="9:34">==</operator> <literal type="number" pos:start="9:36" pos:end="9:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="13:5" pos:end="37:5">for <control pos:start="13:9" pos:end="13:57">(<init pos:start="13:10" pos:end="13:15"><expr pos:start="13:10" pos:end="13:14"><name pos:start="13:10" pos:end="13:10">i</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</init> <condition pos:start="13:17" pos:end="13:52"><expr pos:start="13:17" pos:end="13:50"><name pos:start="13:17" pos:end="13:17">i</name> <operator pos:start="13:19" pos:end="13:19">&lt;</operator> <call pos:start="13:21" pos:end="13:50"><name pos:start="13:21" pos:end="13:32">G_N_ELEMENTS</name><argument_list pos:start="13:33" pos:end="13:50">(<argument pos:start="13:34" pos:end="13:49"><expr pos:start="13:34" pos:end="13:49"><name pos:start="13:34" pos:end="13:49">expected_outputs</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr pos:start="13:54" pos:end="13:56"><expr pos:start="13:54" pos:end="13:56"><name pos:start="13:54" pos:end="13:54">i</name><operator pos:start="13:55" pos:end="13:56">++</operator></expr></incr>)</control> <block pos:start="13:59" pos:end="37:5">{<block_content pos:start="15:9" pos:end="35:23">

        <decl_stmt pos:start="15:9" pos:end="15:16"><decl pos:start="15:9" pos:end="15:15"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:15">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:21"><decl pos:start="17:9" pos:end="17:20"><type pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:12">char</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:20">digest</name></decl>;</decl_stmt>



        <expr_stmt pos:start="21:9" pos:end="29:40"><expr pos:start="21:9" pos:end="29:39"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="29:39"><name pos:start="21:15" pos:end="21:33">qcrypto_hash_base64</name><argument_list pos:start="21:34" pos:end="29:39">(<argument pos:start="21:35" pos:end="21:35"><expr pos:start="21:35" pos:end="21:35"><name pos:start="21:35" pos:end="21:35">i</name></expr></argument>,

                                  <argument pos:start="23:35" pos:end="23:44"><expr pos:start="23:35" pos:end="23:44"><name pos:start="23:35" pos:end="23:44">INPUT_TEXT</name></expr></argument>,

                                  <argument pos:start="25:35" pos:end="25:52"><expr pos:start="25:35" pos:end="25:52"><call pos:start="25:35" pos:end="25:52"><name pos:start="25:35" pos:end="25:40">strlen</name><argument_list pos:start="25:41" pos:end="25:52">(<argument pos:start="25:42" pos:end="25:51"><expr pos:start="25:42" pos:end="25:51"><name pos:start="25:42" pos:end="25:51">INPUT_TEXT</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="27:35" pos:end="27:41"><expr pos:start="27:35" pos:end="27:41"><operator pos:start="27:35" pos:end="27:35">&amp;</operator><name pos:start="27:36" pos:end="27:41">digest</name></expr></argument>,

                                  <argument pos:start="29:35" pos:end="29:38"><expr pos:start="29:35" pos:end="29:38"><name pos:start="29:35" pos:end="29:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:27"><expr pos:start="31:9" pos:end="31:26"><call pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:16">g_assert</name><argument_list pos:start="31:17" pos:end="31:26">(<argument pos:start="31:18" pos:end="31:25"><expr pos:start="31:18" pos:end="31:25"><name pos:start="31:18" pos:end="31:20">ret</name> <operator pos:start="31:22" pos:end="31:23">==</operator> <literal type="number" pos:start="31:25" pos:end="31:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:63"><expr pos:start="33:9" pos:end="33:62"><call pos:start="33:9" pos:end="33:62"><name pos:start="33:9" pos:end="33:16">g_assert</name><argument_list pos:start="33:17" pos:end="33:62">(<argument pos:start="33:18" pos:end="33:61"><expr pos:start="33:18" pos:end="33:61"><call pos:start="33:18" pos:end="33:61"><name pos:start="33:18" pos:end="33:28">g_str_equal</name><argument_list pos:start="33:29" pos:end="33:61">(<argument pos:start="33:30" pos:end="33:35"><expr pos:start="33:30" pos:end="33:35"><name pos:start="33:30" pos:end="33:35">digest</name></expr></argument>, <argument pos:start="33:38" pos:end="33:60"><expr pos:start="33:38" pos:end="33:60"><name pos:start="33:38" pos:end="33:60"><name pos:start="33:38" pos:end="33:57">expected_outputs_b64</name><index pos:start="33:58" pos:end="33:60">[<expr pos:start="33:59" pos:end="33:59"><name pos:start="33:59" pos:end="33:59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:23"><expr pos:start="35:9" pos:end="35:22"><call pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:14">g_free</name><argument_list pos:start="35:15" pos:end="35:22">(<argument pos:start="35:16" pos:end="35:21"><expr pos:start="35:16" pos:end="35:21"><name pos:start="35:16" pos:end="35:21">digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
