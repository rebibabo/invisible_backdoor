<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9973.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">do_sigframe_return_v2</name><parameter_list pos:start="1:33" pos:end="3:63">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:44">CPUARMState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">env</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:74"><decl pos:start="1:52" pos:end="1:74"><type pos:start="1:52" pos:end="1:74"><name pos:start="1:52" pos:end="1:63">target_ulong</name></type> <name pos:start="1:65" pos:end="1:74">frame_addr</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:62"><decl pos:start="3:34" pos:end="3:62"><type pos:start="3:34" pos:end="3:62"><name pos:start="3:34" pos:end="3:58"><name pos:start="3:34" pos:end="3:39">struct</name> <name pos:start="3:41" pos:end="3:58">target_ucontext_v2</name></name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:62">uc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="75:1">{<block_content pos:start="7:5" pos:end="73:13">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">sigset_t</name></type> <name pos:start="7:14" pos:end="7:21">host_set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">abi_ulong</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:23">regspace</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:55"><expr pos:start="13:5" pos:end="13:54"><call pos:start="13:5" pos:end="13:54"><name pos:start="13:5" pos:end="13:25">target_to_host_sigset</name><argument_list pos:start="13:26" pos:end="13:54">(<argument pos:start="13:27" pos:end="13:35"><expr pos:start="13:27" pos:end="13:35"><operator pos:start="13:27" pos:end="13:27">&amp;</operator><name pos:start="13:28" pos:end="13:35">host_set</name></expr></argument>, <argument pos:start="13:38" pos:end="13:53"><expr pos:start="13:38" pos:end="13:53"><operator pos:start="13:38" pos:end="13:38">&amp;</operator><name pos:start="13:39" pos:end="13:53"><name pos:start="13:39" pos:end="13:40">uc</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:53">tuc_sigmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:46"><expr pos:start="15:5" pos:end="15:45"><call pos:start="15:5" pos:end="15:45"><name pos:start="15:5" pos:end="15:15">sigprocmask</name><argument_list pos:start="15:16" pos:end="15:45">(<argument pos:start="15:17" pos:end="15:27"><expr pos:start="15:17" pos:end="15:27"><name pos:start="15:17" pos:end="15:27">SIG_SETMASK</name></expr></argument>, <argument pos:start="15:30" pos:end="15:38"><expr pos:start="15:30" pos:end="15:38"><operator pos:start="15:30" pos:end="15:30">&amp;</operator><name pos:start="15:31" pos:end="15:38">host_set</name></expr></argument>, <argument pos:start="15:41" pos:end="15:44"><expr pos:start="15:41" pos:end="15:44"><name pos:start="15:41" pos:end="15:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="21:17"><if pos:start="19:5" pos:end="21:17">if <condition pos:start="19:8" pos:end="19:51">(<expr pos:start="19:9" pos:end="19:50"><call pos:start="19:9" pos:end="19:50"><name pos:start="19:9" pos:end="19:26">restore_sigcontext</name><argument_list pos:start="19:27" pos:end="19:50">(<argument pos:start="19:28" pos:end="19:30"><expr pos:start="19:28" pos:end="19:30"><name pos:start="19:28" pos:end="19:30">env</name></expr></argument>, <argument pos:start="19:33" pos:end="19:49"><expr pos:start="19:33" pos:end="19:49"><operator pos:start="19:33" pos:end="19:33">&amp;</operator><name pos:start="19:34" pos:end="19:49"><name pos:start="19:34" pos:end="19:35">uc</name><operator pos:start="19:36" pos:end="19:37">-&gt;</operator><name pos:start="19:38" pos:end="19:49">tuc_mcontext</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:17"><block_content pos:start="21:9" pos:end="21:17">

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:42">/* Restore coprocessor signal frame */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:32"><expr pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:12">regspace</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:31"><name pos:start="27:16" pos:end="27:17">uc</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:31">tuc_regspace</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:42">(<expr pos:start="29:9" pos:end="29:41"><call pos:start="29:9" pos:end="29:41"><name pos:start="29:9" pos:end="29:19">arm_feature</name><argument_list pos:start="29:20" pos:end="29:41">(<argument pos:start="29:21" pos:end="29:23"><expr pos:start="29:21" pos:end="29:23"><name pos:start="29:21" pos:end="29:23">env</name></expr></argument>, <argument pos:start="29:26" pos:end="29:40"><expr pos:start="29:26" pos:end="29:40"><name pos:start="29:26" pos:end="29:40">ARM_FEATURE_VFP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:44" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:9">

        <expr_stmt pos:start="31:9" pos:end="31:58"><expr pos:start="31:9" pos:end="31:57"><name pos:start="31:9" pos:end="31:16">regspace</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:57"><name pos:start="31:20" pos:end="31:42">restore_sigframe_v2_vfp</name><argument_list pos:start="31:43" pos:end="31:57">(<argument pos:start="31:44" pos:end="31:46"><expr pos:start="31:44" pos:end="31:46"><name pos:start="31:44" pos:end="31:46">env</name></expr></argument>, <argument pos:start="31:49" pos:end="31:56"><expr pos:start="31:49" pos:end="31:56"><name pos:start="31:49" pos:end="31:56">regspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:22">(<expr pos:start="33:13" pos:end="33:21"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:21">regspace</name></expr>)</condition> <block pos:start="33:24" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:21">

            <return pos:start="35:13" pos:end="35:21">return <expr pos:start="35:20" pos:end="35:20"><literal type="number" pos:start="35:20" pos:end="35:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="51:5"><if pos:start="41:5" pos:end="51:5">if <condition pos:start="41:8" pos:end="41:45">(<expr pos:start="41:9" pos:end="41:44"><call pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:19">arm_feature</name><argument_list pos:start="41:20" pos:end="41:44">(<argument pos:start="41:21" pos:end="41:23"><expr pos:start="41:21" pos:end="41:23"><name pos:start="41:21" pos:end="41:23">env</name></expr></argument>, <argument pos:start="41:26" pos:end="41:43"><expr pos:start="41:26" pos:end="41:43"><name pos:start="41:26" pos:end="41:43">ARM_FEATURE_IWMMXT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:47" pos:end="51:5">{<block_content pos:start="43:9" pos:end="49:9">

        <expr_stmt pos:start="43:9" pos:end="43:61"><expr pos:start="43:9" pos:end="43:60"><name pos:start="43:9" pos:end="43:16">regspace</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <call pos:start="43:20" pos:end="43:60"><name pos:start="43:20" pos:end="43:45">restore_sigframe_v2_iwmmxt</name><argument_list pos:start="43:46" pos:end="43:60">(<argument pos:start="43:47" pos:end="43:49"><expr pos:start="43:47" pos:end="43:49"><name pos:start="43:47" pos:end="43:49">env</name></expr></argument>, <argument pos:start="43:52" pos:end="43:59"><expr pos:start="43:52" pos:end="43:59"><name pos:start="43:52" pos:end="43:59">regspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:22">(<expr pos:start="45:13" pos:end="45:21"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:21">regspace</name></expr>)</condition> <block pos:start="45:24" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:21">

            <return pos:start="47:13" pos:end="47:21">return <expr pos:start="47:20" pos:end="47:20"><literal type="number" pos:start="47:20" pos:end="47:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="70:0"><if pos:start="55:5" pos:end="70:0">if <condition pos:start="55:8" pos:end="55:125">(<expr pos:start="55:9" pos:end="55:124"><call pos:start="55:9" pos:end="55:113"><name pos:start="55:9" pos:end="55:22">do_sigaltstack</name><argument_list pos:start="55:23" pos:end="55:113">(<argument pos:start="55:24" pos:end="55:82"><expr pos:start="55:24" pos:end="55:82"><name pos:start="55:24" pos:end="55:33">frame_addr</name> <operator pos:start="55:35" pos:end="55:35">+</operator> <call pos:start="55:37" pos:end="55:82"><name pos:start="55:37" pos:end="55:44">offsetof</name><argument_list pos:start="55:45" pos:end="55:82">(<argument pos:start="55:46" pos:end="55:70"><expr pos:start="55:46" pos:end="55:70">struct <name pos:start="55:53" pos:end="55:70">target_ucontext_v2</name></expr></argument>, <argument pos:start="55:73" pos:end="55:81"><expr pos:start="55:73" pos:end="55:81"><name pos:start="55:73" pos:end="55:81">tuc_stack</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="55:85" pos:end="55:85"><expr pos:start="55:85" pos:end="55:85"><literal type="number" pos:start="55:85" pos:end="55:85">0</literal></expr></argument>, <argument pos:start="55:88" pos:end="55:112"><expr pos:start="55:88" pos:end="55:112"><call pos:start="55:88" pos:end="55:112"><name pos:start="55:88" pos:end="55:107">get_sp_from_cpustate</name><argument_list pos:start="55:108" pos:end="55:112">(<argument pos:start="55:109" pos:end="55:111"><expr pos:start="55:109" pos:end="55:111"><name pos:start="55:109" pos:end="55:111">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="55:115" pos:end="55:116">==</operator> <operator pos:start="55:118" pos:end="55:118">-</operator><name pos:start="55:119" pos:end="55:124">EFAULT</name></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="70:0"><block_content pos:start="57:9" pos:end="70:0">

        <return pos:start="57:9" pos:end="70:0">return <expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



<cpp:if pos:start="61:1" pos:end="61:5">#<cpp:directive pos:start="61:2" pos:end="61:3">if</cpp:directive> <expr pos:start="61:5" pos:end="61:5"><literal type="number" pos:start="61:5" pos:end="61:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="63:5" pos:end="63:47">/* Send SIGTRAP if we're single-stepping */</comment>

    if (ptrace_cancel_bpt(current))

            send_sig(SIGTRAP, current, 1);

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>



    <return pos:start="73:5" pos:end="73:13">return <expr pos:start="73:12" pos:end="73:12"><literal type="number" pos:start="73:12" pos:end="73:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
