<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20141.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">cpu_breakpoint_insert</name><parameter_list pos:start="1:26" pos:end="3:53">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:56"><decl pos:start="1:42" pos:end="1:56"><type pos:start="1:42" pos:end="1:56"><name pos:start="1:42" pos:end="1:53">target_ulong</name></type> <name pos:start="1:55" pos:end="1:56">pc</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:52"><decl pos:start="3:27" pos:end="3:52"><type pos:start="3:27" pos:end="3:52"><name pos:start="3:27" pos:end="3:39">CPUBreakpoint</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier><modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:52">breakpoint</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="51:1">{<block_content pos:start="9:5" pos:end="50:0">

<cpp:if pos:start="7:1" pos:end="7:27">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:27"><call pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:11">defined</name><argument_list pos:start="7:12" pos:end="7:27">(<argument pos:start="7:13" pos:end="7:26"><expr pos:start="7:13" pos:end="7:26"><name pos:start="7:13" pos:end="7:26">TARGET_HAS_ICE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">CPUBreakpoint</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">bp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:34"><expr pos:start="13:5" pos:end="13:33"><name pos:start="13:5" pos:end="13:6">bp</name> <operator pos:start="13:8" pos:end="13:8">=</operator> <call pos:start="13:10" pos:end="13:33"><name pos:start="13:10" pos:end="13:20">qemu_malloc</name><argument_list pos:start="13:21" pos:end="13:33">(<argument pos:start="13:22" pos:end="13:32"><expr pos:start="13:22" pos:end="13:32"><sizeof pos:start="13:22" pos:end="13:32">sizeof<argument_list pos:start="13:28" pos:end="13:32">(<argument pos:start="13:29" pos:end="13:31"><expr pos:start="13:29" pos:end="13:31"><operator pos:start="13:29" pos:end="13:29">*</operator><name pos:start="13:30" pos:end="13:31">bp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:16"><expr pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:6">bp</name><operator pos:start="17:7" pos:end="17:8">-&gt;</operator><name pos:start="17:9" pos:end="17:10">pc</name></name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:15">pc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:6">bp</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:13">flags</name></name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:21">flags</name></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:52">/* keep all GDB-injected breakpoints in front */</comment>

    <if_stmt pos:start="25:5" pos:end="31:56"><if pos:start="25:5" pos:end="27:56">if <condition pos:start="25:8" pos:end="25:23">(<expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:13">flags</name> <operator pos:start="25:15" pos:end="25:15">&amp;</operator> <name pos:start="25:17" pos:end="25:22">BP_GDB</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:56"><block_content pos:start="27:9" pos:end="27:56">

        <expr_stmt pos:start="27:9" pos:end="27:56"><expr pos:start="27:9" pos:end="27:55"><call pos:start="27:9" pos:end="27:55"><name pos:start="27:9" pos:end="27:25">TAILQ_INSERT_HEAD</name><argument_list pos:start="27:26" pos:end="27:55">(<argument pos:start="27:27" pos:end="27:43"><expr pos:start="27:27" pos:end="27:43"><operator pos:start="27:27" pos:end="27:27">&amp;</operator><name pos:start="27:28" pos:end="27:43"><name pos:start="27:28" pos:end="27:30">env</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:43">breakpoints</name></name></expr></argument>, <argument pos:start="27:46" pos:end="27:47"><expr pos:start="27:46" pos:end="27:47"><name pos:start="27:46" pos:end="27:47">bp</name></expr></argument>, <argument pos:start="27:50" pos:end="27:54"><expr pos:start="27:50" pos:end="27:54"><name pos:start="27:50" pos:end="27:54">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="29:5" pos:end="31:56">else<block type="pseudo" pos:start="31:9" pos:end="31:56"><block_content pos:start="31:9" pos:end="31:56">

        <expr_stmt pos:start="31:9" pos:end="31:56"><expr pos:start="31:9" pos:end="31:55"><call pos:start="31:9" pos:end="31:55"><name pos:start="31:9" pos:end="31:25">TAILQ_INSERT_TAIL</name><argument_list pos:start="31:26" pos:end="31:55">(<argument pos:start="31:27" pos:end="31:43"><expr pos:start="31:27" pos:end="31:43"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:43"><name pos:start="31:28" pos:end="31:30">env</name><operator pos:start="31:31" pos:end="31:32">-&gt;</operator><name pos:start="31:33" pos:end="31:43">breakpoints</name></name></expr></argument>, <argument pos:start="31:46" pos:end="31:47"><expr pos:start="31:46" pos:end="31:47"><name pos:start="31:46" pos:end="31:47">bp</name></expr></argument>, <argument pos:start="31:50" pos:end="31:54"><expr pos:start="31:50" pos:end="31:54"><name pos:start="31:50" pos:end="31:54">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><call pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:25">breakpoint_invalidate</name><argument_list pos:start="35:26" pos:end="35:34">(<argument pos:start="35:27" pos:end="35:29"><expr pos:start="35:27" pos:end="35:29"><name pos:start="35:27" pos:end="35:29">env</name></expr></argument>, <argument pos:start="35:32" pos:end="35:33"><expr pos:start="35:32" pos:end="35:33"><name pos:start="35:32" pos:end="35:33">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="41:25"><if pos:start="39:5" pos:end="41:25">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:18">breakpoint</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:25"><block_content pos:start="41:9" pos:end="41:25">

        <expr_stmt pos:start="41:9" pos:end="41:25"><expr pos:start="41:9" pos:end="41:24"><operator pos:start="41:9" pos:end="41:9">*</operator><name pos:start="41:10" pos:end="41:19">breakpoint</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <name pos:start="41:23" pos:end="41:24">bp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="43:5" pos:end="46:0">return <expr pos:start="43:12" pos:end="43:12"><literal type="number" pos:start="43:12" pos:end="43:12">0</literal></expr>;</return>

<cpp:else pos:start="45:1" pos:end="45:5">#<cpp:directive pos:start="45:2" pos:end="45:5">else</cpp:directive></cpp:else>

    <return pos:start="47:5" pos:end="50:0">return <expr pos:start="47:12" pos:end="47:18"><operator pos:start="47:12" pos:end="47:12">-</operator><name pos:start="47:13" pos:end="47:18">ENOSYS</name></expr>;</return>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
