<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13340.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:15"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:16">coroutine_fn</name></type> <name pos:start="1:18" pos:end="1:33">bdrv_co_pdiscard</name><parameter_list pos:start="1:34" pos:end="3:44">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:50">BlockDriverState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:54">bs</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:70"><decl pos:start="1:57" pos:end="1:70"><type pos:start="1:57" pos:end="1:70"><name pos:start="1:57" pos:end="1:63">int64_t</name></type> <name pos:start="1:65" pos:end="1:70">offset</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:43"><decl pos:start="3:35" pos:end="3:43"><type pos:start="3:35" pos:end="3:43"><name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:43">bytes</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="209:15">{<block_content pos:start="7:5" pos:end="209:15">

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22">BdrvTrackedRequest</name></type> <name pos:start="7:24" pos:end="7:26">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">max_pdiscard</name></decl>, <decl pos:start="9:23" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:25">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">head</name></decl>, <decl pos:start="11:15" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:18">tail</name></decl>, <decl pos:start="11:21" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:21" pos:end="11:25">align</name></decl>;</decl_stmt>




        <return pos:start="16:9" pos:end="16:26">return <expr pos:start="16:16" pos:end="16:25"><operator pos:start="16:16" pos:end="16:16">-</operator><name pos:start="16:17" pos:end="16:25">ENOMEDIUM</name></expr>;</return>




    <if_stmt pos:start="21:5" pos:end="209:15"><if pos:start="21:5" pos:end="209:15">if <condition pos:start="21:8" pos:end="21:38">(<expr pos:start="21:9" pos:end="21:37"><call pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:33">bdrv_has_readonly_bitmaps</name><argument_list pos:start="21:34" pos:end="21:37">(<argument pos:start="21:35" pos:end="21:36"><expr pos:start="21:35" pos:end="21:36"><name pos:start="21:35" pos:end="21:36">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:40" pos:end="209:15">{<block_content pos:start="23:9" pos:end="209:15">

        <return pos:start="23:9" pos:end="23:22">return <expr pos:start="23:16" pos:end="23:21"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:21">EPERM</name></expr>;</return>




    <expr_stmt pos:start="28:5" pos:end="28:53"><expr pos:start="28:5" pos:end="28:52"><name pos:start="28:5" pos:end="28:7">ret</name> <operator pos:start="28:9" pos:end="28:9">=</operator> <call pos:start="28:11" pos:end="28:52"><name pos:start="28:11" pos:end="28:33">bdrv_check_byte_request</name><argument_list pos:start="28:34" pos:end="28:52">(<argument pos:start="28:35" pos:end="28:36"><expr pos:start="28:35" pos:end="28:36"><name pos:start="28:35" pos:end="28:36">bs</name></expr></argument>, <argument pos:start="28:39" pos:end="28:44"><expr pos:start="28:39" pos:end="28:44"><name pos:start="28:39" pos:end="28:44">offset</name></expr></argument>, <argument pos:start="28:47" pos:end="28:51"><expr pos:start="28:47" pos:end="28:51"><name pos:start="28:47" pos:end="28:51">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="30:5" pos:end="209:15"><if pos:start="30:5" pos:end="34:5">if <condition pos:start="30:8" pos:end="30:16">(<expr pos:start="30:9" pos:end="30:15"><name pos:start="30:9" pos:end="30:11">ret</name> <operator pos:start="30:13" pos:end="30:13">&lt;</operator> <literal type="number" pos:start="30:15" pos:end="30:15">0</literal></expr>)</condition> <block pos:start="30:18" pos:end="34:5">{<block_content pos:start="32:9" pos:end="32:19">

        <return pos:start="32:9" pos:end="32:19">return <expr pos:start="32:16" pos:end="32:18"><name pos:start="32:16" pos:end="32:18">ret</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="34:7" pos:end="209:15">else if <condition pos:start="34:15" pos:end="34:29">(<expr pos:start="34:16" pos:end="34:28"><name pos:start="34:16" pos:end="34:28"><name pos:start="34:16" pos:end="34:17">bs</name><operator pos:start="34:18" pos:end="34:19">-&gt;</operator><name pos:start="34:20" pos:end="34:28">read_only</name></name></expr>)</condition> <block pos:start="34:31" pos:end="209:15">{<block_content pos:start="36:9" pos:end="209:15">

        <return pos:start="36:9" pos:end="36:22">return <expr pos:start="36:16" pos:end="36:21"><operator pos:start="36:16" pos:end="36:16">-</operator><name pos:start="36:17" pos:end="36:21">EPERM</name></expr>;</return>


    <expr_stmt pos:start="39:5" pos:end="39:48"><expr pos:start="39:5" pos:end="39:47"><call pos:start="39:5" pos:end="39:47"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:47">(<argument pos:start="39:12" pos:end="39:46"><expr pos:start="39:12" pos:end="39:46"><operator pos:start="39:12" pos:end="39:12">!</operator><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:27"><name pos:start="39:14" pos:end="39:15">bs</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:27">open_flags</name></name> <operator pos:start="39:29" pos:end="39:29">&amp;</operator> <name pos:start="39:31" pos:end="39:45">BDRV_O_INACTIVE</name><operator pos:start="39:46" pos:end="39:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:34">/* Do nothing if disabled.  */</comment>

    <if_stmt pos:start="45:5" pos:end="209:15"><if pos:start="45:5" pos:end="209:15">if <condition pos:start="45:8" pos:end="45:41">(<expr pos:start="45:9" pos:end="45:40"><operator pos:start="45:9" pos:end="45:9">!</operator><operator pos:start="45:10" pos:end="45:10">(</operator><name pos:start="45:11" pos:end="45:24"><name pos:start="45:11" pos:end="45:12">bs</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:24">open_flags</name></name> <operator pos:start="45:26" pos:end="45:26">&amp;</operator> <name pos:start="45:28" pos:end="45:39">BDRV_O_UNMAP</name><operator pos:start="45:40" pos:end="45:40">)</operator></expr>)</condition> <block pos:start="45:43" pos:end="209:15">{<block_content pos:start="47:9" pos:end="209:15">

        <return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</return>




    <if_stmt pos:start="52:5" pos:end="209:15"><if pos:start="52:5" pos:end="209:15">if <condition pos:start="52:8" pos:end="52:66">(<expr pos:start="52:9" pos:end="52:65"><operator pos:start="52:9" pos:end="52:9">!</operator><name pos:start="52:10" pos:end="52:34"><name pos:start="52:10" pos:end="52:11">bs</name><operator pos:start="52:12" pos:end="52:13">-&gt;</operator><name pos:start="52:14" pos:end="52:16">drv</name><operator pos:start="52:17" pos:end="52:18">-&gt;</operator><name pos:start="52:19" pos:end="52:34">bdrv_co_pdiscard</name></name> <operator pos:start="52:36" pos:end="52:37">&amp;&amp;</operator> <operator pos:start="52:39" pos:end="52:39">!</operator><name pos:start="52:40" pos:end="52:65"><name pos:start="52:40" pos:end="52:41">bs</name><operator pos:start="52:42" pos:end="52:43">-&gt;</operator><name pos:start="52:44" pos:end="52:46">drv</name><operator pos:start="52:47" pos:end="52:48">-&gt;</operator><name pos:start="52:49" pos:end="52:65">bdrv_aio_pdiscard</name></name></expr>)</condition> <block pos:start="52:68" pos:end="209:15">{<block_content pos:start="54:9" pos:end="209:15">

        <return pos:start="54:9" pos:end="54:17">return <expr pos:start="54:16" pos:end="54:16"><literal type="number" pos:start="54:16" pos:end="54:16">0</literal></expr>;</return>




    <comment type="block" pos:start="59:5" pos:end="67:35">/* Discard is advisory, but some devices track and coalesce

     * unaligned requests, so we must pass everything down rather than

     * round here.  Still, most devices will just silently ignore

     * unaligned requests (by returning -ENOTSUP), so we must fragment

     * the request accordingly.  */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:69"><expr pos:start="69:5" pos:end="69:68"><name pos:start="69:5" pos:end="69:9">align</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:68"><name pos:start="69:13" pos:end="69:15">MAX</name><argument_list pos:start="69:16" pos:end="69:68">(<argument pos:start="69:17" pos:end="69:41"><expr pos:start="69:17" pos:end="69:41"><name pos:start="69:17" pos:end="69:41"><name pos:start="69:17" pos:end="69:18">bs</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:22">bl</name><operator pos:start="69:23" pos:end="69:23">.</operator><name pos:start="69:24" pos:end="69:41">pdiscard_alignment</name></name></expr></argument>, <argument pos:start="69:44" pos:end="69:67"><expr pos:start="69:44" pos:end="69:67"><name pos:start="69:44" pos:end="69:67"><name pos:start="69:44" pos:end="69:45">bs</name><operator pos:start="69:46" pos:end="69:47">-&gt;</operator><name pos:start="69:48" pos:end="69:49">bl</name><operator pos:start="69:50" pos:end="69:50">.</operator><name pos:start="69:51" pos:end="69:67">request_alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:50"><expr pos:start="71:5" pos:end="71:49"><call pos:start="71:5" pos:end="71:49"><name pos:start="71:5" pos:end="71:10">assert</name><argument_list pos:start="71:11" pos:end="71:49">(<argument pos:start="71:12" pos:end="71:48"><expr pos:start="71:12" pos:end="71:48"><name pos:start="71:12" pos:end="71:16">align</name> <operator pos:start="71:18" pos:end="71:18">%</operator> <name pos:start="71:20" pos:end="71:43"><name pos:start="71:20" pos:end="71:21">bs</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:25">bl</name><operator pos:start="71:26" pos:end="71:26">.</operator><name pos:start="71:27" pos:end="71:43">request_alignment</name></name> <operator pos:start="71:45" pos:end="71:46">==</operator> <literal type="number" pos:start="71:48" pos:end="71:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:26"><expr pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:8">head</name> <operator pos:start="73:10" pos:end="73:10">=</operator> <name pos:start="73:12" pos:end="73:17">offset</name> <operator pos:start="73:19" pos:end="73:19">%</operator> <name pos:start="73:21" pos:end="73:25">align</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:36"><expr pos:start="75:5" pos:end="75:35"><name pos:start="75:5" pos:end="75:8">tail</name> <operator pos:start="75:10" pos:end="75:10">=</operator> <operator pos:start="75:12" pos:end="75:12">(</operator><name pos:start="75:13" pos:end="75:18">offset</name> <operator pos:start="75:20" pos:end="75:20">+</operator> <name pos:start="75:22" pos:end="75:26">bytes</name><operator pos:start="75:27" pos:end="75:27">)</operator> <operator pos:start="75:29" pos:end="75:29">%</operator> <name pos:start="75:31" pos:end="75:35">align</name></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:27"><expr pos:start="79:5" pos:end="79:26"><call pos:start="79:5" pos:end="79:26"><name pos:start="79:5" pos:end="79:22">bdrv_inc_in_flight</name><argument_list pos:start="79:23" pos:end="79:26">(<argument pos:start="79:24" pos:end="79:25"><expr pos:start="79:24" pos:end="79:25"><name pos:start="79:24" pos:end="79:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:73"><expr pos:start="81:5" pos:end="81:72"><call pos:start="81:5" pos:end="81:72"><name pos:start="81:5" pos:end="81:25">tracked_request_begin</name><argument_list pos:start="81:26" pos:end="81:72">(<argument pos:start="81:27" pos:end="81:30"><expr pos:start="81:27" pos:end="81:30"><operator pos:start="81:27" pos:end="81:27">&amp;</operator><name pos:start="81:28" pos:end="81:30">req</name></expr></argument>, <argument pos:start="81:33" pos:end="81:34"><expr pos:start="81:33" pos:end="81:34"><name pos:start="81:33" pos:end="81:34">bs</name></expr></argument>, <argument pos:start="81:37" pos:end="81:42"><expr pos:start="81:37" pos:end="81:42"><name pos:start="81:37" pos:end="81:42">offset</name></expr></argument>, <argument pos:start="81:45" pos:end="81:49"><expr pos:start="81:45" pos:end="81:49"><name pos:start="81:45" pos:end="81:49">bytes</name></expr></argument>, <argument pos:start="81:52" pos:end="81:71"><expr pos:start="81:52" pos:end="81:71"><name pos:start="81:52" pos:end="81:71">BDRV_TRACKED_DISCARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:78"><expr pos:start="85:5" pos:end="85:77"><name pos:start="85:5" pos:end="85:7">ret</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:77"><name pos:start="85:11" pos:end="85:42">notifier_with_return_list_notify</name><argument_list pos:start="85:43" pos:end="85:77">(<argument pos:start="85:44" pos:end="85:70"><expr pos:start="85:44" pos:end="85:70"><operator pos:start="85:44" pos:end="85:44">&amp;</operator><name pos:start="85:45" pos:end="85:70"><name pos:start="85:45" pos:end="85:46">bs</name><operator pos:start="85:47" pos:end="85:48">-&gt;</operator><name pos:start="85:49" pos:end="85:70">before_write_notifiers</name></name></expr></argument>, <argument pos:start="85:73" pos:end="85:76"><expr pos:start="85:73" pos:end="85:76"><operator pos:start="85:73" pos:end="85:73">&amp;</operator><name pos:start="85:74" pos:end="85:76">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="209:15"><if pos:start="87:5" pos:end="209:15">if <condition pos:start="87:8" pos:end="87:16">(<expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">&lt;</operator> <literal type="number" pos:start="87:15" pos:end="87:15">0</literal></expr>)</condition> <block pos:start="87:18" pos:end="209:15">{<block_content pos:start="93:5" pos:end="209:15">





    <expr_stmt pos:start="93:5" pos:end="95:42"><expr pos:start="93:5" pos:end="95:41"><name pos:start="93:5" pos:end="93:16">max_pdiscard</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <call pos:start="93:20" pos:end="95:41"><name pos:start="93:20" pos:end="93:34">QEMU_ALIGN_DOWN</name><argument_list pos:start="93:35" pos:end="95:41">(<argument pos:start="93:36" pos:end="93:77"><expr pos:start="93:36" pos:end="93:77"><call pos:start="93:36" pos:end="93:77"><name pos:start="93:36" pos:end="93:47">MIN_NON_ZERO</name><argument_list pos:start="93:48" pos:end="93:77">(<argument pos:start="93:49" pos:end="93:67"><expr pos:start="93:49" pos:end="93:67"><name pos:start="93:49" pos:end="93:67"><name pos:start="93:49" pos:end="93:50">bs</name><operator pos:start="93:51" pos:end="93:52">-&gt;</operator><name pos:start="93:53" pos:end="93:54">bl</name><operator pos:start="93:55" pos:end="93:55">.</operator><name pos:start="93:56" pos:end="93:67">max_pdiscard</name></name></expr></argument>, <argument pos:start="93:70" pos:end="93:76"><expr pos:start="93:70" pos:end="93:76"><name pos:start="93:70" pos:end="93:76">INT_MAX</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="95:36" pos:end="95:40"><expr pos:start="95:36" pos:end="95:40"><name pos:start="95:36" pos:end="95:40">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:53"><expr pos:start="97:5" pos:end="97:52"><call pos:start="97:5" pos:end="97:52"><name pos:start="97:5" pos:end="97:10">assert</name><argument_list pos:start="97:11" pos:end="97:52">(<argument pos:start="97:12" pos:end="97:51"><expr pos:start="97:12" pos:end="97:51"><name pos:start="97:12" pos:end="97:23">max_pdiscard</name> <operator pos:start="97:25" pos:end="97:26">&gt;=</operator> <name pos:start="97:28" pos:end="97:51"><name pos:start="97:28" pos:end="97:29">bs</name><operator pos:start="97:30" pos:end="97:31">-&gt;</operator><name pos:start="97:32" pos:end="97:33">bl</name><operator pos:start="97:34" pos:end="97:34">.</operator><name pos:start="97:35" pos:end="97:51">request_alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="101:5" pos:end="209:15">while <condition pos:start="101:11" pos:end="101:21">(<expr pos:start="101:12" pos:end="101:20"><name pos:start="101:12" pos:end="101:16">bytes</name> <operator pos:start="101:18" pos:end="101:18">&gt;</operator> <literal type="number" pos:start="101:20" pos:end="101:20">0</literal></expr>)</condition> <block pos:start="101:23" pos:end="209:15">{<block_content pos:start="103:9" pos:end="209:15">

        <decl_stmt pos:start="103:9" pos:end="103:24"><decl pos:start="103:9" pos:end="103:23"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:15">num</name> <init pos:start="103:17" pos:end="103:23">= <expr pos:start="103:19" pos:end="103:23"><name pos:start="103:19" pos:end="103:23">bytes</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="107:9" pos:end="209:15"><if pos:start="107:9" pos:end="209:15">if <condition pos:start="107:12" pos:end="107:17">(<expr pos:start="107:13" pos:end="107:16"><name pos:start="107:13" pos:end="107:16">head</name></expr>)</condition> <block pos:start="107:19" pos:end="209:15">{<block_content pos:start="111:13" pos:end="209:15">

            <comment type="block" pos:start="109:13" pos:end="109:69">/* Make small requests to get to alignment boundaries. */</comment>

            <expr_stmt pos:start="111:13" pos:end="111:43"><expr pos:start="111:13" pos:end="111:42"><name pos:start="111:13" pos:end="111:15">num</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:42"><name pos:start="111:19" pos:end="111:21">MIN</name><argument_list pos:start="111:22" pos:end="111:42">(<argument pos:start="111:23" pos:end="111:27"><expr pos:start="111:23" pos:end="111:27"><name pos:start="111:23" pos:end="111:27">bytes</name></expr></argument>, <argument pos:start="111:30" pos:end="111:41"><expr pos:start="111:30" pos:end="111:41"><name pos:start="111:30" pos:end="111:34">align</name> <operator pos:start="111:36" pos:end="111:36">-</operator> <name pos:start="111:38" pos:end="111:41">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="209:15"><if pos:start="113:13" pos:end="122:9">if <condition pos:start="113:16" pos:end="113:64">(<expr pos:start="113:17" pos:end="113:63"><operator pos:start="113:17" pos:end="113:17">!</operator><call pos:start="113:18" pos:end="113:63"><name pos:start="113:18" pos:end="113:32">QEMU_IS_ALIGNED</name><argument_list pos:start="113:33" pos:end="113:63">(<argument pos:start="113:34" pos:end="113:36"><expr pos:start="113:34" pos:end="113:36"><name pos:start="113:34" pos:end="113:36">num</name></expr></argument>, <argument pos:start="113:39" pos:end="113:62"><expr pos:start="113:39" pos:end="113:62"><name pos:start="113:39" pos:end="113:62"><name pos:start="113:39" pos:end="113:40">bs</name><operator pos:start="113:41" pos:end="113:42">-&gt;</operator><name pos:start="113:43" pos:end="113:44">bl</name><operator pos:start="113:45" pos:end="113:45">.</operator><name pos:start="113:46" pos:end="113:62">request_alignment</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:66" pos:end="122:9">{<block_content pos:start="115:17" pos:end="120:39">

                <expr_stmt pos:start="115:17" pos:end="115:48"><expr pos:start="115:17" pos:end="115:47"><name pos:start="115:17" pos:end="115:19">num</name> <operator pos:start="115:21" pos:end="115:22">%=</operator> <name pos:start="115:24" pos:end="115:47"><name pos:start="115:24" pos:end="115:25">bs</name><operator pos:start="115:26" pos:end="115:27">-&gt;</operator><name pos:start="115:28" pos:end="115:29">bl</name><operator pos:start="115:30" pos:end="115:30">.</operator><name pos:start="115:31" pos:end="115:47">request_alignment</name></name></expr>;</expr_stmt>


            <expr_stmt pos:start="118:13" pos:end="118:40"><expr pos:start="118:13" pos:end="118:39"><name pos:start="118:13" pos:end="118:16">head</name> <operator pos:start="118:18" pos:end="118:18">=</operator> <operator pos:start="118:20" pos:end="118:20">(</operator><name pos:start="118:21" pos:end="118:24">head</name> <operator pos:start="118:26" pos:end="118:26">+</operator> <name pos:start="118:28" pos:end="118:30">num</name><operator pos:start="118:31" pos:end="118:31">)</operator> <operator pos:start="118:33" pos:end="118:33">%</operator> <name pos:start="118:35" pos:end="118:39">align</name></expr>;</expr_stmt>

            <expr_stmt pos:start="120:13" pos:end="120:39"><expr pos:start="120:13" pos:end="120:38"><call pos:start="120:13" pos:end="120:38"><name pos:start="120:13" pos:end="120:18">assert</name><argument_list pos:start="120:19" pos:end="120:38">(<argument pos:start="120:20" pos:end="120:37"><expr pos:start="120:20" pos:end="120:37"><name pos:start="120:20" pos:end="120:22">num</name> <operator pos:start="120:24" pos:end="120:24">&lt;</operator> <name pos:start="120:26" pos:end="120:37">max_pdiscard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="122:11" pos:end="209:15">else if <condition pos:start="122:19" pos:end="122:24">(<expr pos:start="122:20" pos:end="122:23"><name pos:start="122:20" pos:end="122:23">tail</name></expr>)</condition> <block pos:start="122:26" pos:end="209:15">{<block_content pos:start="124:13" pos:end="209:15">

            <if_stmt pos:start="124:13" pos:end="209:15"><if pos:start="124:13" pos:end="130:13">if <condition pos:start="124:16" pos:end="124:28">(<expr pos:start="124:17" pos:end="124:27"><name pos:start="124:17" pos:end="124:19">num</name> <operator pos:start="124:21" pos:end="124:21">&gt;</operator> <name pos:start="124:23" pos:end="124:27">align</name></expr>)</condition> <block pos:start="124:30" pos:end="130:13">{<block_content pos:start="128:17" pos:end="128:28">

                <comment type="block" pos:start="126:17" pos:end="126:71">/* Shorten the request to the last aligned cluster.  */</comment>

                <expr_stmt pos:start="128:17" pos:end="128:28"><expr pos:start="128:17" pos:end="128:27"><name pos:start="128:17" pos:end="128:19">num</name> <operator pos:start="128:21" pos:end="128:22">-=</operator> <name pos:start="128:24" pos:end="128:27">tail</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="130:15" pos:end="209:15">else if <condition pos:start="130:23" pos:end="132:55">(<expr pos:start="130:24" pos:end="132:54"><operator pos:start="130:24" pos:end="130:24">!</operator><call pos:start="130:25" pos:end="130:71"><name pos:start="130:25" pos:end="130:39">QEMU_IS_ALIGNED</name><argument_list pos:start="130:40" pos:end="130:71">(<argument pos:start="130:41" pos:end="130:44"><expr pos:start="130:41" pos:end="130:44"><name pos:start="130:41" pos:end="130:44">tail</name></expr></argument>, <argument pos:start="130:47" pos:end="130:70"><expr pos:start="130:47" pos:end="130:70"><name pos:start="130:47" pos:end="130:70"><name pos:start="130:47" pos:end="130:48">bs</name><operator pos:start="130:49" pos:end="130:50">-&gt;</operator><name pos:start="130:51" pos:end="130:52">bl</name><operator pos:start="130:53" pos:end="130:53">.</operator><name pos:start="130:54" pos:end="130:70">request_alignment</name></name></expr></argument>)</argument_list></call> <operator pos:start="130:73" pos:end="130:74">&amp;&amp;</operator>

                       <name pos:start="132:24" pos:end="132:27">tail</name> <operator pos:start="132:29" pos:end="132:29">&gt;</operator> <name pos:start="132:31" pos:end="132:54"><name pos:start="132:31" pos:end="132:32">bs</name><operator pos:start="132:33" pos:end="132:34">-&gt;</operator><name pos:start="132:35" pos:end="132:36">bl</name><operator pos:start="132:37" pos:end="132:37">.</operator><name pos:start="132:38" pos:end="132:54">request_alignment</name></name></expr>)</condition> <block pos:start="132:57" pos:end="209:15">{<block_content pos:start="134:17" pos:end="209:15">

                <expr_stmt pos:start="134:17" pos:end="134:49"><expr pos:start="134:17" pos:end="134:48"><name pos:start="134:17" pos:end="134:20">tail</name> <operator pos:start="134:22" pos:end="134:23">%=</operator> <name pos:start="134:25" pos:end="134:48"><name pos:start="134:25" pos:end="134:26">bs</name><operator pos:start="134:27" pos:end="134:28">-&gt;</operator><name pos:start="134:29" pos:end="134:30">bl</name><operator pos:start="134:31" pos:end="134:31">.</operator><name pos:start="134:32" pos:end="134:48">request_alignment</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="136:17" pos:end="136:28"><expr pos:start="136:17" pos:end="136:27"><name pos:start="136:17" pos:end="136:19">num</name> <operator pos:start="136:21" pos:end="136:22">-=</operator> <name pos:start="136:24" pos:end="136:27">tail</name></expr>;</expr_stmt>



        <comment type="block" pos:start="140:9" pos:end="140:32">/* limit request size */</comment>

        <if_stmt pos:start="142:9" pos:end="209:15"><if pos:start="142:9" pos:end="209:15">if <condition pos:start="142:12" pos:end="142:31">(<expr pos:start="142:13" pos:end="142:30"><name pos:start="142:13" pos:end="142:15">num</name> <operator pos:start="142:17" pos:end="142:17">&gt;</operator> <name pos:start="142:19" pos:end="142:30">max_pdiscard</name></expr>)</condition> <block pos:start="142:33" pos:end="209:15">{<block_content pos:start="144:13" pos:end="209:15">

            <expr_stmt pos:start="144:13" pos:end="144:31"><expr pos:start="144:13" pos:end="144:30"><name pos:start="144:13" pos:end="144:15">num</name> <operator pos:start="144:17" pos:end="144:17">=</operator> <name pos:start="144:19" pos:end="144:30">max_pdiscard</name></expr>;</expr_stmt>








        <if_stmt pos:start="153:9" pos:end="209:15"><if pos:start="153:9" pos:end="157:9">if <condition pos:start="153:12" pos:end="153:38">(<expr pos:start="153:13" pos:end="153:37"><name pos:start="153:13" pos:end="153:37"><name pos:start="153:13" pos:end="153:14">bs</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:19">drv</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:37">bdrv_co_pdiscard</name></name></expr>)</condition> <block pos:start="153:40" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:61">

            <expr_stmt pos:start="155:13" pos:end="155:61"><expr pos:start="155:13" pos:end="155:60"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:60"><name pos:start="155:19" pos:end="155:43"><name pos:start="155:19" pos:end="155:20">bs</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:25">drv</name><operator pos:start="155:26" pos:end="155:27">-&gt;</operator><name pos:start="155:28" pos:end="155:43">bdrv_co_pdiscard</name></name><argument_list pos:start="155:44" pos:end="155:60">(<argument pos:start="155:45" pos:end="155:46"><expr pos:start="155:45" pos:end="155:46"><name pos:start="155:45" pos:end="155:46">bs</name></expr></argument>, <argument pos:start="155:49" pos:end="155:54"><expr pos:start="155:49" pos:end="155:54"><name pos:start="155:49" pos:end="155:54">offset</name></expr></argument>, <argument pos:start="155:57" pos:end="155:59"><expr pos:start="155:57" pos:end="155:59"><name pos:start="155:57" pos:end="155:59">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="209:15">else <block pos:start="157:16" pos:end="209:15">{<block_content pos:start="159:13" pos:end="209:15">

            <decl_stmt pos:start="159:13" pos:end="159:28"><decl pos:start="159:13" pos:end="159:27"><type pos:start="159:13" pos:end="159:24"><name pos:start="159:13" pos:end="159:22">BlockAIOCB</name> <modifier pos:start="159:24" pos:end="159:24">*</modifier></type><name pos:start="159:25" pos:end="159:27">acb</name></decl>;</decl_stmt>

            <decl_stmt pos:start="161:13" pos:end="165:14"><decl pos:start="161:13" pos:end="165:13"><type pos:start="161:13" pos:end="161:33"><name pos:start="161:13" pos:end="161:33">CoroutineIOCompletion</name></type> <name pos:start="161:35" pos:end="161:36">co</name> <init pos:start="161:38" pos:end="165:13">= <expr pos:start="161:40" pos:end="165:13"><block pos:start="161:40" pos:end="165:13">{

                <expr pos:start="163:17" pos:end="163:50"><operator pos:start="163:17" pos:end="163:17">.</operator><name pos:start="163:18" pos:end="163:26">coroutine</name> <operator pos:start="163:28" pos:end="163:28">=</operator> <call pos:start="163:30" pos:end="163:50"><name pos:start="163:30" pos:end="163:48">qemu_coroutine_self</name><argument_list pos:start="163:49" pos:end="163:50">()</argument_list></call></expr>,

            }</block></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="169:13" pos:end="171:74"><expr pos:start="169:13" pos:end="171:73"><name pos:start="169:13" pos:end="169:15">acb</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="171:73"><name pos:start="169:19" pos:end="169:44"><name pos:start="169:19" pos:end="169:20">bs</name><operator pos:start="169:21" pos:end="169:22">-&gt;</operator><name pos:start="169:23" pos:end="169:25">drv</name><operator pos:start="169:26" pos:end="169:27">-&gt;</operator><name pos:start="169:28" pos:end="169:44">bdrv_aio_pdiscard</name></name><argument_list pos:start="169:45" pos:end="171:73">(<argument pos:start="169:46" pos:end="169:47"><expr pos:start="169:46" pos:end="169:47"><name pos:start="169:46" pos:end="169:47">bs</name></expr></argument>, <argument pos:start="169:50" pos:end="169:55"><expr pos:start="169:50" pos:end="169:55"><name pos:start="169:50" pos:end="169:55">offset</name></expr></argument>, <argument pos:start="169:58" pos:end="169:60"><expr pos:start="169:58" pos:end="169:60"><name pos:start="169:58" pos:end="169:60">num</name></expr></argument>,

                                             <argument pos:start="171:46" pos:end="171:67"><expr pos:start="171:46" pos:end="171:67"><name pos:start="171:46" pos:end="171:67">bdrv_co_io_em_complete</name></expr></argument>, <argument pos:start="171:70" pos:end="171:72"><expr pos:start="171:70" pos:end="171:72"><operator pos:start="171:70" pos:end="171:70">&amp;</operator><name pos:start="171:71" pos:end="171:72">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="173:13" pos:end="209:15"><if pos:start="173:13" pos:end="178:13">if <condition pos:start="173:16" pos:end="173:28">(<expr pos:start="173:17" pos:end="173:27"><name pos:start="173:17" pos:end="173:19">acb</name> <operator pos:start="173:21" pos:end="173:22">==</operator> <name pos:start="173:24" pos:end="173:27">NULL</name></expr>)</condition> <block pos:start="173:30" pos:end="178:13">{<block_content pos:start="175:17" pos:end="175:27">

                <expr_stmt pos:start="175:17" pos:end="175:27"><expr pos:start="175:17" pos:end="175:26"><name pos:start="175:17" pos:end="175:19">ret</name> <operator pos:start="175:21" pos:end="175:21">=</operator> <operator pos:start="175:23" pos:end="175:23">-</operator><name pos:start="175:24" pos:end="175:26">EIO</name></expr>;</expr_stmt>


            </block_content>}</block></if> <else pos:start="178:15" pos:end="209:15">else <block pos:start="178:20" pos:end="209:15">{<block_content pos:start="180:17" pos:end="209:15">

                <expr_stmt pos:start="180:17" pos:end="180:39"><expr pos:start="180:17" pos:end="180:38"><call pos:start="180:17" pos:end="180:38"><name pos:start="180:17" pos:end="180:36">qemu_coroutine_yield</name><argument_list pos:start="180:37" pos:end="180:38">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="182:17" pos:end="182:29"><expr pos:start="182:17" pos:end="182:28"><name pos:start="182:17" pos:end="182:19">ret</name> <operator pos:start="182:21" pos:end="182:21">=</operator> <name pos:start="182:23" pos:end="182:28"><name pos:start="182:23" pos:end="182:24">co</name><operator pos:start="182:25" pos:end="182:25">.</operator><name pos:start="182:26" pos:end="182:28">ret</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="186:9" pos:end="209:15"><if pos:start="186:9" pos:end="209:15">if <condition pos:start="186:12" pos:end="186:35">(<expr pos:start="186:13" pos:end="186:34"><name pos:start="186:13" pos:end="186:15">ret</name> <operator pos:start="186:17" pos:end="186:18">&amp;&amp;</operator> <name pos:start="186:20" pos:end="186:22">ret</name> <operator pos:start="186:24" pos:end="186:25">!=</operator> <operator pos:start="186:27" pos:end="186:27">-</operator><name pos:start="186:28" pos:end="186:34">ENOTSUP</name></expr>)</condition> <block pos:start="186:37" pos:end="209:15">{<block_content pos:start="192:9" pos:end="209:15">





        <expr_stmt pos:start="192:9" pos:end="192:22"><expr pos:start="192:9" pos:end="192:21"><name pos:start="192:9" pos:end="192:14">offset</name> <operator pos:start="192:16" pos:end="192:17">+=</operator> <name pos:start="192:19" pos:end="192:21">num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="194:9" pos:end="194:21"><expr pos:start="194:9" pos:end="194:20"><name pos:start="194:9" pos:end="194:13">bytes</name> <operator pos:start="194:15" pos:end="194:16">-=</operator> <name pos:start="194:18" pos:end="194:20">num</name></expr>;</expr_stmt>


    <expr_stmt pos:start="197:5" pos:end="197:12"><expr pos:start="197:5" pos:end="197:11"><name pos:start="197:5" pos:end="197:7">ret</name> <operator pos:start="197:9" pos:end="197:9">=</operator> <literal type="number" pos:start="197:11" pos:end="197:11">0</literal></expr>;</expr_stmt>

<label pos:start="199:1" pos:end="199:4"><name pos:start="199:1" pos:end="199:3">out</name>:</label>

    <expr_stmt pos:start="201:5" pos:end="201:31"><expr pos:start="201:5" pos:end="201:30"><call pos:start="201:5" pos:end="201:30"><name pos:start="201:5" pos:end="201:14">atomic_inc</name><argument_list pos:start="201:15" pos:end="201:30">(<argument pos:start="201:16" pos:end="201:29"><expr pos:start="201:16" pos:end="201:29"><operator pos:start="201:16" pos:end="201:16">&amp;</operator><name pos:start="201:17" pos:end="201:29"><name pos:start="201:17" pos:end="201:18">bs</name><operator pos:start="201:19" pos:end="201:20">-&gt;</operator><name pos:start="201:21" pos:end="201:29">write_gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:46"><expr pos:start="203:5" pos:end="203:45"><call pos:start="203:5" pos:end="203:45"><name pos:start="203:5" pos:end="203:18">bdrv_set_dirty</name><argument_list pos:start="203:19" pos:end="203:45">(<argument pos:start="203:20" pos:end="203:21"><expr pos:start="203:20" pos:end="203:21"><name pos:start="203:20" pos:end="203:21">bs</name></expr></argument>, <argument pos:start="203:24" pos:end="203:33"><expr pos:start="203:24" pos:end="203:33"><name pos:start="203:24" pos:end="203:33"><name pos:start="203:24" pos:end="203:26">req</name><operator pos:start="203:27" pos:end="203:27">.</operator><name pos:start="203:28" pos:end="203:33">offset</name></name></expr></argument>, <argument pos:start="203:36" pos:end="203:44"><expr pos:start="203:36" pos:end="203:44"><name pos:start="203:36" pos:end="203:44"><name pos:start="203:36" pos:end="203:38">req</name><operator pos:start="203:39" pos:end="203:39">.</operator><name pos:start="203:40" pos:end="203:44">bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:30"><expr pos:start="205:5" pos:end="205:29"><call pos:start="205:5" pos:end="205:29"><name pos:start="205:5" pos:end="205:23">tracked_request_end</name><argument_list pos:start="205:24" pos:end="205:29">(<argument pos:start="205:25" pos:end="205:28"><expr pos:start="205:25" pos:end="205:28"><operator pos:start="205:25" pos:end="205:25">&amp;</operator><name pos:start="205:26" pos:end="205:28">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:27"><expr pos:start="207:5" pos:end="207:26"><call pos:start="207:5" pos:end="207:26"><name pos:start="207:5" pos:end="207:22">bdrv_dec_in_flight</name><argument_list pos:start="207:23" pos:end="207:26">(<argument pos:start="207:24" pos:end="207:25"><expr pos:start="207:24" pos:end="207:25"><name pos:start="207:24" pos:end="207:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="209:5" pos:end="209:15">return <expr pos:start="209:12" pos:end="209:14"><name pos:start="209:12" pos:end="209:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
