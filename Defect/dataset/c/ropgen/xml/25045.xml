<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25045.c" pos:tabs="8"><function pos:start="1:1" pos:end="315:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">cpu_x86_find_by_name</name><parameter_list pos:start="1:32" pos:end="1:78">(<parameter pos:start="1:33" pos:end="1:54"><decl pos:start="1:33" pos:end="1:54"><type pos:start="1:33" pos:end="1:54"><name pos:start="1:33" pos:end="1:41">x86_def_t</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:54">x86_cpu_def</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:77"><decl pos:start="1:57" pos:end="1:77"><type pos:start="1:57" pos:end="1:77"><specifier pos:start="1:57" pos:end="1:61">const</specifier> <name pos:start="1:63" pos:end="1:66">char</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:77">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="315:1">{<block_content pos:start="5:5" pos:end="313:14">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">x86_def_t</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">def</name></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:11">s</name> <init pos:start="11:13" pos:end="11:33">= <expr pos:start="11:15" pos:end="11:33"><call pos:start="11:15" pos:end="11:33"><name pos:start="11:15" pos:end="11:22">g_strdup</name><argument_list pos:start="11:23" pos:end="11:33">(<argument pos:start="11:24" pos:end="11:32"><expr pos:start="11:24" pos:end="11:32"><name pos:start="11:24" pos:end="11:32">cpu_model</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:20">featurestr</name></decl>, <decl pos:start="13:23" pos:end="13:44"><type ref="prev" pos:start="13:5" pos:end="13:10"><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:27">name</name> <init pos:start="13:29" pos:end="13:44">= <expr pos:start="13:31" pos:end="13:44"><call pos:start="13:31" pos:end="13:44"><name pos:start="13:31" pos:end="13:36">strtok</name><argument_list pos:start="13:37" pos:end="13:44">(<argument pos:start="13:38" pos:end="13:38"><expr pos:start="13:38" pos:end="13:38"><name pos:start="13:38" pos:end="13:38">s</name></expr></argument>, <argument pos:start="13:41" pos:end="13:43"><expr pos:start="13:41" pos:end="13:43"><literal type="string" pos:start="13:41" pos:end="13:43">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="15:5" pos:end="15:29">/* Features to be added*/</comment>

    <decl_stmt pos:start="17:5" pos:end="17:54"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:26">plus_features</name> <init pos:start="17:28" pos:end="17:30">= <expr pos:start="17:30" pos:end="17:30"><literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr></init></decl>, <decl pos:start="17:33" pos:end="17:53"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:33" pos:end="17:49">plus_ext_features</name> <init pos:start="17:51" pos:end="17:53">= <expr pos:start="17:53" pos:end="17:53"><literal type="number" pos:start="17:53" pos:end="17:53">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:60"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:31">plus_ext2_features</name> <init pos:start="19:33" pos:end="19:35">= <expr pos:start="19:35" pos:end="19:35"><literal type="number" pos:start="19:35" pos:end="19:35">0</literal></expr></init></decl>, <decl pos:start="19:38" pos:end="19:59"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:38" pos:end="19:55">plus_ext3_features</name> <init pos:start="19:57" pos:end="19:59">= <expr pos:start="19:59" pos:end="19:59"><literal type="number" pos:start="19:59" pos:end="19:59">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:58"><decl pos:start="21:5" pos:end="21:34"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:30">plus_kvm_features</name> <init pos:start="21:32" pos:end="21:34">= <expr pos:start="21:34" pos:end="21:34"><literal type="number" pos:start="21:34" pos:end="21:34">0</literal></expr></init></decl>, <decl pos:start="21:37" pos:end="21:57"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:37" pos:end="21:53">plus_svm_features</name> <init pos:start="21:55" pos:end="21:57">= <expr pos:start="21:57" pos:end="21:57"><literal type="number" pos:start="21:57" pos:end="21:57">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:32">/* Features to be removed */</comment>

    <decl_stmt pos:start="25:5" pos:end="25:56"><decl pos:start="25:5" pos:end="25:31"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:27">minus_features</name> <init pos:start="25:29" pos:end="25:31">= <expr pos:start="25:31" pos:end="25:31"><literal type="number" pos:start="25:31" pos:end="25:31">0</literal></expr></init></decl>, <decl pos:start="25:34" pos:end="25:55"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:34" pos:end="25:51">minus_ext_features</name> <init pos:start="25:53" pos:end="25:55">= <expr pos:start="25:55" pos:end="25:55"><literal type="number" pos:start="25:55" pos:end="25:55">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:62"><decl pos:start="27:5" pos:end="27:36"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint32_t</name></type> <name pos:start="27:14" pos:end="27:32">minus_ext2_features</name> <init pos:start="27:34" pos:end="27:36">= <expr pos:start="27:36" pos:end="27:36"><literal type="number" pos:start="27:36" pos:end="27:36">0</literal></expr></init></decl>, <decl pos:start="27:39" pos:end="27:61"><type ref="prev" pos:start="27:5" pos:end="27:12"/><name pos:start="27:39" pos:end="27:57">minus_ext3_features</name> <init pos:start="27:59" pos:end="27:61">= <expr pos:start="27:61" pos:end="27:61"><literal type="number" pos:start="27:61" pos:end="27:61">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:60"><decl pos:start="29:5" pos:end="29:35"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint32_t</name></type> <name pos:start="29:14" pos:end="29:31">minus_kvm_features</name> <init pos:start="29:33" pos:end="29:35">= <expr pos:start="29:35" pos:end="29:35"><literal type="number" pos:start="29:35" pos:end="29:35">0</literal></expr></init></decl>, <decl pos:start="29:38" pos:end="29:59"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:38" pos:end="29:55">minus_svm_features</name> <init pos:start="29:57" pos:end="29:59">= <expr pos:start="29:59" pos:end="29:59"><literal type="number" pos:start="29:59" pos:end="29:59">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:22"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:12">uint32_t</name></type> <name pos:start="31:14" pos:end="31:21">numvalue</name></decl>;</decl_stmt>



    <for pos:start="35:5" pos:end="39:18">for <control pos:start="35:9" pos:end="35:46">(<init pos:start="35:10" pos:end="35:24"><expr pos:start="35:10" pos:end="35:23"><name pos:start="35:10" pos:end="35:12">def</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <name pos:start="35:16" pos:end="35:23">x86_defs</name></expr>;</init> <condition pos:start="35:26" pos:end="35:29"><expr pos:start="35:26" pos:end="35:28"><name pos:start="35:26" pos:end="35:28">def</name></expr>;</condition> <incr pos:start="35:31" pos:end="35:45"><expr pos:start="35:31" pos:end="35:45"><name pos:start="35:31" pos:end="35:33">def</name> <operator pos:start="35:35" pos:end="35:35">=</operator> <name pos:start="35:37" pos:end="35:45"><name pos:start="35:37" pos:end="35:39">def</name><operator pos:start="35:40" pos:end="35:41">-&gt;</operator><name pos:start="35:42" pos:end="35:45">next</name></name></expr></incr>)</control><block type="pseudo" pos:start="37:9" pos:end="39:18"><block_content pos:start="37:9" pos:end="39:18">

        <if_stmt pos:start="37:9" pos:end="39:18"><if pos:start="37:9" pos:end="39:18">if <condition pos:start="37:12" pos:end="37:37">(<expr pos:start="37:13" pos:end="37:36"><operator pos:start="37:13" pos:end="37:13">!</operator><call pos:start="37:14" pos:end="37:36"><name pos:start="37:14" pos:end="37:19">strcmp</name><argument_list pos:start="37:20" pos:end="37:36">(<argument pos:start="37:21" pos:end="37:24"><expr pos:start="37:21" pos:end="37:24"><name pos:start="37:21" pos:end="37:24">name</name></expr></argument>, <argument pos:start="37:27" pos:end="37:35"><expr pos:start="37:27" pos:end="37:35"><name pos:start="37:27" pos:end="37:35"><name pos:start="37:27" pos:end="37:29">def</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:35">name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:18"><block_content pos:start="39:13" pos:end="39:18">

            <break pos:start="39:13" pos:end="39:18">break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <if_stmt pos:start="41:5" pos:end="53:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:51">(<expr pos:start="41:9" pos:end="41:50"><call pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:19">kvm_enabled</name><argument_list pos:start="41:20" pos:end="41:21">()</argument_list></call> <operator pos:start="41:23" pos:end="41:24">&amp;&amp;</operator> <call pos:start="41:26" pos:end="41:45"><name pos:start="41:26" pos:end="41:31">strcmp</name><argument_list pos:start="41:32" pos:end="41:45">(<argument pos:start="41:33" pos:end="41:36"><expr pos:start="41:33" pos:end="41:36"><name pos:start="41:33" pos:end="41:36">name</name></expr></argument>, <argument pos:start="41:39" pos:end="41:44"><expr pos:start="41:39" pos:end="41:44"><literal type="string" pos:start="41:39" pos:end="41:44">"host"</literal></expr></argument>)</argument_list></call> <operator pos:start="41:47" pos:end="41:48">==</operator> <literal type="number" pos:start="41:50" pos:end="41:50">0</literal></expr>)</condition> <block pos:start="41:53" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:39">

        <expr_stmt pos:start="43:9" pos:end="43:39"><expr pos:start="43:9" pos:end="43:38"><call pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:25">cpu_x86_fill_host</name><argument_list pos:start="43:26" pos:end="43:38">(<argument pos:start="43:27" pos:end="43:37"><expr pos:start="43:27" pos:end="43:37"><name pos:start="43:27" pos:end="43:37">x86_cpu_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="45:7" pos:end="49:5">else if <condition pos:start="45:15" pos:end="45:20">(<expr pos:start="45:16" pos:end="45:19"><operator pos:start="45:16" pos:end="45:16">!</operator><name pos:start="45:17" pos:end="45:19">def</name></expr>)</condition> <block pos:start="45:22" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:19">

        <goto pos:start="47:9" pos:end="47:19">goto <name pos:start="47:14" pos:end="47:18">error</name>;</goto>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="53:5">else <block pos:start="49:12" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:47">

        <expr_stmt pos:start="51:9" pos:end="51:47"><expr pos:start="51:9" pos:end="51:46"><call pos:start="51:9" pos:end="51:46"><name pos:start="51:9" pos:end="51:14">memcpy</name><argument_list pos:start="51:15" pos:end="51:46">(<argument pos:start="51:16" pos:end="51:26"><expr pos:start="51:16" pos:end="51:26"><name pos:start="51:16" pos:end="51:26">x86_cpu_def</name></expr></argument>, <argument pos:start="51:29" pos:end="51:31"><expr pos:start="51:29" pos:end="51:31"><name pos:start="51:29" pos:end="51:31">def</name></expr></argument>, <argument pos:start="51:34" pos:end="51:45"><expr pos:start="51:34" pos:end="51:45"><sizeof pos:start="51:34" pos:end="51:45">sizeof<argument_list pos:start="51:40" pos:end="51:45">(<argument pos:start="51:41" pos:end="51:44"><expr pos:start="51:41" pos:end="51:44"><operator pos:start="51:41" pos:end="51:41">*</operator><name pos:start="51:42" pos:end="51:44">def</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:27"><expr pos:start="57:5" pos:end="57:26"><name pos:start="57:5" pos:end="57:21">plus_kvm_features</name> <operator pos:start="57:23" pos:end="57:23">=</operator> <operator pos:start="57:25" pos:end="57:25">~</operator><literal type="number" pos:start="57:26" pos:end="57:26">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="57:29" pos:end="57:79">/* not supported bits will be filtered out later */</comment>



    <expr_stmt pos:start="61:5" pos:end="65:48"><expr pos:start="61:5" pos:end="65:47"><call pos:start="61:5" pos:end="65:47"><name pos:start="61:5" pos:end="61:27">add_flagname_to_bitmaps</name><argument_list pos:start="61:28" pos:end="65:47">(<argument pos:start="61:29" pos:end="61:40"><expr pos:start="61:29" pos:end="61:40"><literal type="string" pos:start="61:29" pos:end="61:40">"hypervisor"</literal></expr></argument>, <argument pos:start="61:43" pos:end="61:56"><expr pos:start="61:43" pos:end="61:56"><operator pos:start="61:43" pos:end="61:43">&amp;</operator><name pos:start="61:44" pos:end="61:56">plus_features</name></expr></argument>,

        <argument pos:start="63:9" pos:end="63:26"><expr pos:start="63:9" pos:end="63:26"><operator pos:start="63:9" pos:end="63:9">&amp;</operator><name pos:start="63:10" pos:end="63:26">plus_ext_features</name></expr></argument>, <argument pos:start="63:29" pos:end="63:47"><expr pos:start="63:29" pos:end="63:47"><operator pos:start="63:29" pos:end="63:29">&amp;</operator><name pos:start="63:30" pos:end="63:47">plus_ext2_features</name></expr></argument>, <argument pos:start="63:50" pos:end="63:68"><expr pos:start="63:50" pos:end="63:68"><operator pos:start="63:50" pos:end="63:50">&amp;</operator><name pos:start="63:51" pos:end="63:68">plus_ext3_features</name></expr></argument>,

        <argument pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:26"><operator pos:start="65:9" pos:end="65:9">&amp;</operator><name pos:start="65:10" pos:end="65:26">plus_kvm_features</name></expr></argument>, <argument pos:start="65:29" pos:end="65:46"><expr pos:start="65:29" pos:end="65:46"><operator pos:start="65:29" pos:end="65:29">&amp;</operator><name pos:start="65:30" pos:end="65:46">plus_svm_features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:35"><expr pos:start="69:5" pos:end="69:34"><name pos:start="69:5" pos:end="69:14">featurestr</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <call pos:start="69:18" pos:end="69:34"><name pos:start="69:18" pos:end="69:23">strtok</name><argument_list pos:start="69:24" pos:end="69:34">(<argument pos:start="69:25" pos:end="69:28"><expr pos:start="69:25" pos:end="69:28"><name pos:start="69:25" pos:end="69:28">NULL</name></expr></argument>, <argument pos:start="69:31" pos:end="69:33"><expr pos:start="69:31" pos:end="69:33"><literal type="string" pos:start="69:31" pos:end="69:33">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="73:5" pos:end="269:5">while <condition pos:start="73:11" pos:end="73:22">(<expr pos:start="73:12" pos:end="73:21"><name pos:start="73:12" pos:end="73:21">featurestr</name></expr>)</condition> <block pos:start="73:24" pos:end="269:5">{<block_content pos:start="75:9" pos:end="267:39">

        <decl_stmt pos:start="75:9" pos:end="75:18"><decl pos:start="75:9" pos:end="75:17"><type pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:12">char</name> <modifier pos:start="75:14" pos:end="75:14">*</modifier></type><name pos:start="75:15" pos:end="75:17">val</name></decl>;</decl_stmt>

        <if_stmt pos:start="77:9" pos:end="265:9"><if pos:start="77:9" pos:end="87:9">if <condition pos:start="77:12" pos:end="77:33">(<expr pos:start="77:13" pos:end="77:32"><name pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:22">featurestr</name><index pos:start="77:23" pos:end="77:25">[<expr pos:start="77:24" pos:end="77:24"><literal type="number" pos:start="77:24" pos:end="77:24">0</literal></expr>]</index></name> <operator pos:start="77:27" pos:end="77:28">==</operator> <literal type="char" pos:start="77:30" pos:end="77:32">'+'</literal></expr>)</condition> <block pos:start="77:35" pos:end="87:9">{<block_content pos:start="79:13" pos:end="85:48">

            <expr_stmt pos:start="79:13" pos:end="85:48"><expr pos:start="79:13" pos:end="85:47"><call pos:start="79:13" pos:end="85:47"><name pos:start="79:13" pos:end="79:35">add_flagname_to_bitmaps</name><argument_list pos:start="79:36" pos:end="85:47">(<argument pos:start="79:37" pos:end="79:50"><expr pos:start="79:37" pos:end="79:50"><name pos:start="79:37" pos:end="79:46">featurestr</name> <operator pos:start="79:48" pos:end="79:48">+</operator> <literal type="number" pos:start="79:50" pos:end="79:50">1</literal></expr></argument>, <argument pos:start="79:53" pos:end="79:66"><expr pos:start="79:53" pos:end="79:66"><operator pos:start="79:53" pos:end="79:53">&amp;</operator><name pos:start="79:54" pos:end="79:66">plus_features</name></expr></argument>,

                            <argument pos:start="81:29" pos:end="81:46"><expr pos:start="81:29" pos:end="81:46"><operator pos:start="81:29" pos:end="81:29">&amp;</operator><name pos:start="81:30" pos:end="81:46">plus_ext_features</name></expr></argument>, <argument pos:start="81:49" pos:end="81:67"><expr pos:start="81:49" pos:end="81:67"><operator pos:start="81:49" pos:end="81:49">&amp;</operator><name pos:start="81:50" pos:end="81:67">plus_ext2_features</name></expr></argument>,

                            <argument pos:start="83:29" pos:end="83:47"><expr pos:start="83:29" pos:end="83:47"><operator pos:start="83:29" pos:end="83:29">&amp;</operator><name pos:start="83:30" pos:end="83:47">plus_ext3_features</name></expr></argument>, <argument pos:start="83:50" pos:end="83:67"><expr pos:start="83:50" pos:end="83:67"><operator pos:start="83:50" pos:end="83:50">&amp;</operator><name pos:start="83:51" pos:end="83:67">plus_kvm_features</name></expr></argument>,

                            <argument pos:start="85:29" pos:end="85:46"><expr pos:start="85:29" pos:end="85:46"><operator pos:start="85:29" pos:end="85:29">&amp;</operator><name pos:start="85:30" pos:end="85:46">plus_svm_features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="87:11" pos:end="97:9">else if <condition pos:start="87:19" pos:end="87:40">(<expr pos:start="87:20" pos:end="87:39"><name pos:start="87:20" pos:end="87:32"><name pos:start="87:20" pos:end="87:29">featurestr</name><index pos:start="87:30" pos:end="87:32">[<expr pos:start="87:31" pos:end="87:31"><literal type="number" pos:start="87:31" pos:end="87:31">0</literal></expr>]</index></name> <operator pos:start="87:34" pos:end="87:35">==</operator> <literal type="char" pos:start="87:37" pos:end="87:39">'-'</literal></expr>)</condition> <block pos:start="87:42" pos:end="97:9">{<block_content pos:start="89:13" pos:end="95:49">

            <expr_stmt pos:start="89:13" pos:end="95:49"><expr pos:start="89:13" pos:end="95:48"><call pos:start="89:13" pos:end="95:48"><name pos:start="89:13" pos:end="89:35">add_flagname_to_bitmaps</name><argument_list pos:start="89:36" pos:end="95:48">(<argument pos:start="89:37" pos:end="89:50"><expr pos:start="89:37" pos:end="89:50"><name pos:start="89:37" pos:end="89:46">featurestr</name> <operator pos:start="89:48" pos:end="89:48">+</operator> <literal type="number" pos:start="89:50" pos:end="89:50">1</literal></expr></argument>, <argument pos:start="89:53" pos:end="89:67"><expr pos:start="89:53" pos:end="89:67"><operator pos:start="89:53" pos:end="89:53">&amp;</operator><name pos:start="89:54" pos:end="89:67">minus_features</name></expr></argument>,

                            <argument pos:start="91:29" pos:end="91:47"><expr pos:start="91:29" pos:end="91:47"><operator pos:start="91:29" pos:end="91:29">&amp;</operator><name pos:start="91:30" pos:end="91:47">minus_ext_features</name></expr></argument>, <argument pos:start="91:50" pos:end="91:69"><expr pos:start="91:50" pos:end="91:69"><operator pos:start="91:50" pos:end="91:50">&amp;</operator><name pos:start="91:51" pos:end="91:69">minus_ext2_features</name></expr></argument>,

                            <argument pos:start="93:29" pos:end="93:48"><expr pos:start="93:29" pos:end="93:48"><operator pos:start="93:29" pos:end="93:29">&amp;</operator><name pos:start="93:30" pos:end="93:48">minus_ext3_features</name></expr></argument>, <argument pos:start="93:51" pos:end="93:69"><expr pos:start="93:51" pos:end="93:69"><operator pos:start="93:51" pos:end="93:51">&amp;</operator><name pos:start="93:52" pos:end="93:69">minus_kvm_features</name></expr></argument>,

                            <argument pos:start="95:29" pos:end="95:47"><expr pos:start="95:29" pos:end="95:47"><operator pos:start="95:29" pos:end="95:29">&amp;</operator><name pos:start="95:30" pos:end="95:47">minus_svm_features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="97:11" pos:end="251:9">else if <condition pos:start="97:19" pos:end="97:51">(<expr pos:start="97:20" pos:end="97:50"><operator pos:start="97:20" pos:end="97:20">(</operator><name pos:start="97:21" pos:end="97:23">val</name> <operator pos:start="97:25" pos:end="97:25">=</operator> <call pos:start="97:27" pos:end="97:49"><name pos:start="97:27" pos:end="97:32">strchr</name><argument_list pos:start="97:33" pos:end="97:49">(<argument pos:start="97:34" pos:end="97:43"><expr pos:start="97:34" pos:end="97:43"><name pos:start="97:34" pos:end="97:43">featurestr</name></expr></argument>, <argument pos:start="97:46" pos:end="97:48"><expr pos:start="97:46" pos:end="97:48"><literal type="char" pos:start="97:46" pos:end="97:48">'='</literal></expr></argument>)</argument_list></call><operator pos:start="97:50" pos:end="97:50">)</operator></expr>)</condition> <block pos:start="97:53" pos:end="251:9">{<block_content pos:start="99:13" pos:end="249:13">

            <expr_stmt pos:start="99:13" pos:end="99:21"><expr pos:start="99:13" pos:end="99:20"><operator pos:start="99:13" pos:end="99:13">*</operator><name pos:start="99:14" pos:end="99:16">val</name> <operator pos:start="99:18" pos:end="99:18">=</operator> <literal type="number" pos:start="99:20" pos:end="99:20">0</literal></expr>;</expr_stmt> <expr_stmt pos:start="99:23" pos:end="99:28"><expr pos:start="99:23" pos:end="99:27"><name pos:start="99:23" pos:end="99:25">val</name><operator pos:start="99:26" pos:end="99:27">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="249:13"><if pos:start="101:13" pos:end="117:13">if <condition pos:start="101:16" pos:end="101:46">(<expr pos:start="101:17" pos:end="101:45"><operator pos:start="101:17" pos:end="101:17">!</operator><call pos:start="101:18" pos:end="101:45"><name pos:start="101:18" pos:end="101:23">strcmp</name><argument_list pos:start="101:24" pos:end="101:45">(<argument pos:start="101:25" pos:end="101:34"><expr pos:start="101:25" pos:end="101:34"><name pos:start="101:25" pos:end="101:34">featurestr</name></expr></argument>, <argument pos:start="101:37" pos:end="101:44"><expr pos:start="101:37" pos:end="101:44"><literal type="string" pos:start="101:37" pos:end="101:44">"family"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:48" pos:end="117:13">{<block_content pos:start="103:17" pos:end="115:47">

                <decl_stmt pos:start="103:17" pos:end="103:26"><decl pos:start="103:17" pos:end="103:25"><type pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:20">char</name> <modifier pos:start="103:22" pos:end="103:22">*</modifier></type><name pos:start="103:23" pos:end="103:25">err</name></decl>;</decl_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:49"><expr pos:start="105:17" pos:end="105:48"><name pos:start="105:17" pos:end="105:24">numvalue</name> <operator pos:start="105:26" pos:end="105:26">=</operator> <call pos:start="105:28" pos:end="105:48"><name pos:start="105:28" pos:end="105:34">strtoul</name><argument_list pos:start="105:35" pos:end="105:48">(<argument pos:start="105:36" pos:end="105:38"><expr pos:start="105:36" pos:end="105:38"><name pos:start="105:36" pos:end="105:38">val</name></expr></argument>, <argument pos:start="105:41" pos:end="105:44"><expr pos:start="105:41" pos:end="105:44"><operator pos:start="105:41" pos:end="105:41">&amp;</operator><name pos:start="105:42" pos:end="105:44">err</name></expr></argument>, <argument pos:start="105:47" pos:end="105:47"><expr pos:start="105:47" pos:end="105:47"><literal type="number" pos:start="105:47" pos:end="105:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="107:17" pos:end="113:17"><if pos:start="107:17" pos:end="113:17">if <condition pos:start="107:20" pos:end="107:34">(<expr pos:start="107:21" pos:end="107:33"><operator pos:start="107:21" pos:end="107:21">!</operator><operator pos:start="107:22" pos:end="107:22">*</operator><name pos:start="107:23" pos:end="107:25">val</name> <operator pos:start="107:27" pos:end="107:28">||</operator> <operator pos:start="107:30" pos:end="107:30">*</operator><name pos:start="107:31" pos:end="107:33">err</name></expr>)</condition> <block pos:start="107:36" pos:end="113:17">{<block_content pos:start="109:21" pos:end="111:31">

                    <expr_stmt pos:start="109:21" pos:end="109:69"><expr pos:start="109:21" pos:end="109:68"><call pos:start="109:21" pos:end="109:68"><name pos:start="109:21" pos:end="109:27">fprintf</name><argument_list pos:start="109:28" pos:end="109:68">(<argument pos:start="109:29" pos:end="109:34"><expr pos:start="109:29" pos:end="109:34"><name pos:start="109:29" pos:end="109:34">stderr</name></expr></argument>, <argument pos:start="109:37" pos:end="109:62"><expr pos:start="109:37" pos:end="109:62"><literal type="string" pos:start="109:37" pos:end="109:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="109:65" pos:end="109:67"><expr pos:start="109:65" pos:end="109:67"><name pos:start="109:65" pos:end="109:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="111:21" pos:end="111:31">goto <name pos:start="111:26" pos:end="111:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:47"><expr pos:start="115:17" pos:end="115:46"><name pos:start="115:17" pos:end="115:35"><name pos:start="115:17" pos:end="115:27">x86_cpu_def</name><operator pos:start="115:28" pos:end="115:29">-&gt;</operator><name pos:start="115:30" pos:end="115:35">family</name></name> <operator pos:start="115:37" pos:end="115:37">=</operator> <name pos:start="115:39" pos:end="115:46">numvalue</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="117:15" pos:end="133:13">else if <condition pos:start="117:23" pos:end="117:52">(<expr pos:start="117:24" pos:end="117:51"><operator pos:start="117:24" pos:end="117:24">!</operator><call pos:start="117:25" pos:end="117:51"><name pos:start="117:25" pos:end="117:30">strcmp</name><argument_list pos:start="117:31" pos:end="117:51">(<argument pos:start="117:32" pos:end="117:41"><expr pos:start="117:32" pos:end="117:41"><name pos:start="117:32" pos:end="117:41">featurestr</name></expr></argument>, <argument pos:start="117:44" pos:end="117:50"><expr pos:start="117:44" pos:end="117:50"><literal type="string" pos:start="117:44" pos:end="117:50">"model"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:54" pos:end="133:13">{<block_content pos:start="119:17" pos:end="131:46">

                <decl_stmt pos:start="119:17" pos:end="119:26"><decl pos:start="119:17" pos:end="119:25"><type pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:20">char</name> <modifier pos:start="119:22" pos:end="119:22">*</modifier></type><name pos:start="119:23" pos:end="119:25">err</name></decl>;</decl_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:49"><expr pos:start="121:17" pos:end="121:48"><name pos:start="121:17" pos:end="121:24">numvalue</name> <operator pos:start="121:26" pos:end="121:26">=</operator> <call pos:start="121:28" pos:end="121:48"><name pos:start="121:28" pos:end="121:34">strtoul</name><argument_list pos:start="121:35" pos:end="121:48">(<argument pos:start="121:36" pos:end="121:38"><expr pos:start="121:36" pos:end="121:38"><name pos:start="121:36" pos:end="121:38">val</name></expr></argument>, <argument pos:start="121:41" pos:end="121:44"><expr pos:start="121:41" pos:end="121:44"><operator pos:start="121:41" pos:end="121:41">&amp;</operator><name pos:start="121:42" pos:end="121:44">err</name></expr></argument>, <argument pos:start="121:47" pos:end="121:47"><expr pos:start="121:47" pos:end="121:47"><literal type="number" pos:start="121:47" pos:end="121:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="123:17" pos:end="129:17"><if pos:start="123:17" pos:end="129:17">if <condition pos:start="123:20" pos:end="123:53">(<expr pos:start="123:21" pos:end="123:52"><operator pos:start="123:21" pos:end="123:21">!</operator><operator pos:start="123:22" pos:end="123:22">*</operator><name pos:start="123:23" pos:end="123:25">val</name> <operator pos:start="123:27" pos:end="123:28">||</operator> <operator pos:start="123:30" pos:end="123:30">*</operator><name pos:start="123:31" pos:end="123:33">err</name> <operator pos:start="123:35" pos:end="123:36">||</operator> <name pos:start="123:38" pos:end="123:45">numvalue</name> <operator pos:start="123:47" pos:end="123:47">&gt;</operator> <literal type="number" pos:start="123:49" pos:end="123:52">0xff</literal></expr>)</condition> <block pos:start="123:55" pos:end="129:17">{<block_content pos:start="125:21" pos:end="127:31">

                    <expr_stmt pos:start="125:21" pos:end="125:69"><expr pos:start="125:21" pos:end="125:68"><call pos:start="125:21" pos:end="125:68"><name pos:start="125:21" pos:end="125:27">fprintf</name><argument_list pos:start="125:28" pos:end="125:68">(<argument pos:start="125:29" pos:end="125:34"><expr pos:start="125:29" pos:end="125:34"><name pos:start="125:29" pos:end="125:34">stderr</name></expr></argument>, <argument pos:start="125:37" pos:end="125:62"><expr pos:start="125:37" pos:end="125:62"><literal type="string" pos:start="125:37" pos:end="125:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="125:65" pos:end="125:67"><expr pos:start="125:65" pos:end="125:67"><name pos:start="125:65" pos:end="125:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="127:21" pos:end="127:31">goto <name pos:start="127:26" pos:end="127:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:46"><expr pos:start="131:17" pos:end="131:45"><name pos:start="131:17" pos:end="131:34"><name pos:start="131:17" pos:end="131:27">x86_cpu_def</name><operator pos:start="131:28" pos:end="131:29">-&gt;</operator><name pos:start="131:30" pos:end="131:34">model</name></name> <operator pos:start="131:36" pos:end="131:36">=</operator> <name pos:start="131:38" pos:end="131:45">numvalue</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="133:15" pos:end="149:13">else if <condition pos:start="133:23" pos:end="133:55">(<expr pos:start="133:24" pos:end="133:54"><operator pos:start="133:24" pos:end="133:24">!</operator><call pos:start="133:25" pos:end="133:54"><name pos:start="133:25" pos:end="133:30">strcmp</name><argument_list pos:start="133:31" pos:end="133:54">(<argument pos:start="133:32" pos:end="133:41"><expr pos:start="133:32" pos:end="133:41"><name pos:start="133:32" pos:end="133:41">featurestr</name></expr></argument>, <argument pos:start="133:44" pos:end="133:53"><expr pos:start="133:44" pos:end="133:53"><literal type="string" pos:start="133:44" pos:end="133:53">"stepping"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:57" pos:end="149:13">{<block_content pos:start="135:17" pos:end="147:50">

                <decl_stmt pos:start="135:17" pos:end="135:26"><decl pos:start="135:17" pos:end="135:25"><type pos:start="135:17" pos:end="135:22"><name pos:start="135:17" pos:end="135:20">char</name> <modifier pos:start="135:22" pos:end="135:22">*</modifier></type><name pos:start="135:23" pos:end="135:25">err</name></decl>;</decl_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:49"><expr pos:start="137:17" pos:end="137:48"><name pos:start="137:17" pos:end="137:24">numvalue</name> <operator pos:start="137:26" pos:end="137:26">=</operator> <call pos:start="137:28" pos:end="137:48"><name pos:start="137:28" pos:end="137:34">strtoul</name><argument_list pos:start="137:35" pos:end="137:48">(<argument pos:start="137:36" pos:end="137:38"><expr pos:start="137:36" pos:end="137:38"><name pos:start="137:36" pos:end="137:38">val</name></expr></argument>, <argument pos:start="137:41" pos:end="137:44"><expr pos:start="137:41" pos:end="137:44"><operator pos:start="137:41" pos:end="137:41">&amp;</operator><name pos:start="137:42" pos:end="137:44">err</name></expr></argument>, <argument pos:start="137:47" pos:end="137:47"><expr pos:start="137:47" pos:end="137:47"><literal type="number" pos:start="137:47" pos:end="137:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="139:17" pos:end="145:17"><if pos:start="139:17" pos:end="145:17">if <condition pos:start="139:20" pos:end="139:52">(<expr pos:start="139:21" pos:end="139:51"><operator pos:start="139:21" pos:end="139:21">!</operator><operator pos:start="139:22" pos:end="139:22">*</operator><name pos:start="139:23" pos:end="139:25">val</name> <operator pos:start="139:27" pos:end="139:28">||</operator> <operator pos:start="139:30" pos:end="139:30">*</operator><name pos:start="139:31" pos:end="139:33">err</name> <operator pos:start="139:35" pos:end="139:36">||</operator> <name pos:start="139:38" pos:end="139:45">numvalue</name> <operator pos:start="139:47" pos:end="139:47">&gt;</operator> <literal type="number" pos:start="139:49" pos:end="139:51">0xf</literal></expr>)</condition> <block pos:start="139:54" pos:end="145:17">{<block_content pos:start="141:21" pos:end="143:31">

                    <expr_stmt pos:start="141:21" pos:end="141:69"><expr pos:start="141:21" pos:end="141:68"><call pos:start="141:21" pos:end="141:68"><name pos:start="141:21" pos:end="141:27">fprintf</name><argument_list pos:start="141:28" pos:end="141:68">(<argument pos:start="141:29" pos:end="141:34"><expr pos:start="141:29" pos:end="141:34"><name pos:start="141:29" pos:end="141:34">stderr</name></expr></argument>, <argument pos:start="141:37" pos:end="141:62"><expr pos:start="141:37" pos:end="141:62"><literal type="string" pos:start="141:37" pos:end="141:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="141:65" pos:end="141:67"><expr pos:start="141:65" pos:end="141:67"><name pos:start="141:65" pos:end="141:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="143:21" pos:end="143:31">goto <name pos:start="143:26" pos:end="143:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:50"><expr pos:start="147:17" pos:end="147:48"><name pos:start="147:17" pos:end="147:37"><name pos:start="147:17" pos:end="147:27">x86_cpu_def</name><operator pos:start="147:28" pos:end="147:29">-&gt;</operator><name pos:start="147:30" pos:end="147:37">stepping</name></name> <operator pos:start="147:39" pos:end="147:39">=</operator> <name pos:start="147:41" pos:end="147:48">numvalue</name></expr> ;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="149:15" pos:end="165:13">else if <condition pos:start="149:23" pos:end="149:52">(<expr pos:start="149:24" pos:end="149:51"><operator pos:start="149:24" pos:end="149:24">!</operator><call pos:start="149:25" pos:end="149:51"><name pos:start="149:25" pos:end="149:30">strcmp</name><argument_list pos:start="149:31" pos:end="149:51">(<argument pos:start="149:32" pos:end="149:41"><expr pos:start="149:32" pos:end="149:41"><name pos:start="149:32" pos:end="149:41">featurestr</name></expr></argument>, <argument pos:start="149:44" pos:end="149:50"><expr pos:start="149:44" pos:end="149:50"><literal type="string" pos:start="149:44" pos:end="149:50">"level"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:54" pos:end="165:13">{<block_content pos:start="151:17" pos:end="163:46">

                <decl_stmt pos:start="151:17" pos:end="151:26"><decl pos:start="151:17" pos:end="151:25"><type pos:start="151:17" pos:end="151:22"><name pos:start="151:17" pos:end="151:20">char</name> <modifier pos:start="151:22" pos:end="151:22">*</modifier></type><name pos:start="151:23" pos:end="151:25">err</name></decl>;</decl_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:49"><expr pos:start="153:17" pos:end="153:48"><name pos:start="153:17" pos:end="153:24">numvalue</name> <operator pos:start="153:26" pos:end="153:26">=</operator> <call pos:start="153:28" pos:end="153:48"><name pos:start="153:28" pos:end="153:34">strtoul</name><argument_list pos:start="153:35" pos:end="153:48">(<argument pos:start="153:36" pos:end="153:38"><expr pos:start="153:36" pos:end="153:38"><name pos:start="153:36" pos:end="153:38">val</name></expr></argument>, <argument pos:start="153:41" pos:end="153:44"><expr pos:start="153:41" pos:end="153:44"><operator pos:start="153:41" pos:end="153:41">&amp;</operator><name pos:start="153:42" pos:end="153:44">err</name></expr></argument>, <argument pos:start="153:47" pos:end="153:47"><expr pos:start="153:47" pos:end="153:47"><literal type="number" pos:start="153:47" pos:end="153:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="155:17" pos:end="161:17"><if pos:start="155:17" pos:end="161:17">if <condition pos:start="155:20" pos:end="155:34">(<expr pos:start="155:21" pos:end="155:33"><operator pos:start="155:21" pos:end="155:21">!</operator><operator pos:start="155:22" pos:end="155:22">*</operator><name pos:start="155:23" pos:end="155:25">val</name> <operator pos:start="155:27" pos:end="155:28">||</operator> <operator pos:start="155:30" pos:end="155:30">*</operator><name pos:start="155:31" pos:end="155:33">err</name></expr>)</condition> <block pos:start="155:36" pos:end="161:17">{<block_content pos:start="157:21" pos:end="159:31">

                    <expr_stmt pos:start="157:21" pos:end="157:69"><expr pos:start="157:21" pos:end="157:68"><call pos:start="157:21" pos:end="157:68"><name pos:start="157:21" pos:end="157:27">fprintf</name><argument_list pos:start="157:28" pos:end="157:68">(<argument pos:start="157:29" pos:end="157:34"><expr pos:start="157:29" pos:end="157:34"><name pos:start="157:29" pos:end="157:34">stderr</name></expr></argument>, <argument pos:start="157:37" pos:end="157:62"><expr pos:start="157:37" pos:end="157:62"><literal type="string" pos:start="157:37" pos:end="157:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="157:65" pos:end="157:67"><expr pos:start="157:65" pos:end="157:67"><name pos:start="157:65" pos:end="157:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="159:21" pos:end="159:31">goto <name pos:start="159:26" pos:end="159:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:46"><expr pos:start="163:17" pos:end="163:45"><name pos:start="163:17" pos:end="163:34"><name pos:start="163:17" pos:end="163:27">x86_cpu_def</name><operator pos:start="163:28" pos:end="163:29">-&gt;</operator><name pos:start="163:30" pos:end="163:34">level</name></name> <operator pos:start="163:36" pos:end="163:36">=</operator> <name pos:start="163:38" pos:end="163:45">numvalue</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="165:15" pos:end="187:13">else if <condition pos:start="165:23" pos:end="165:53">(<expr pos:start="165:24" pos:end="165:52"><operator pos:start="165:24" pos:end="165:24">!</operator><call pos:start="165:25" pos:end="165:52"><name pos:start="165:25" pos:end="165:30">strcmp</name><argument_list pos:start="165:31" pos:end="165:52">(<argument pos:start="165:32" pos:end="165:41"><expr pos:start="165:32" pos:end="165:41"><name pos:start="165:32" pos:end="165:41">featurestr</name></expr></argument>, <argument pos:start="165:44" pos:end="165:51"><expr pos:start="165:44" pos:end="165:51"><literal type="string" pos:start="165:44" pos:end="165:51">"xlevel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="165:55" pos:end="187:13">{<block_content pos:start="167:17" pos:end="185:47">

                <decl_stmt pos:start="167:17" pos:end="167:26"><decl pos:start="167:17" pos:end="167:25"><type pos:start="167:17" pos:end="167:22"><name pos:start="167:17" pos:end="167:20">char</name> <modifier pos:start="167:22" pos:end="167:22">*</modifier></type><name pos:start="167:23" pos:end="167:25">err</name></decl>;</decl_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:49"><expr pos:start="169:17" pos:end="169:48"><name pos:start="169:17" pos:end="169:24">numvalue</name> <operator pos:start="169:26" pos:end="169:26">=</operator> <call pos:start="169:28" pos:end="169:48"><name pos:start="169:28" pos:end="169:34">strtoul</name><argument_list pos:start="169:35" pos:end="169:48">(<argument pos:start="169:36" pos:end="169:38"><expr pos:start="169:36" pos:end="169:38"><name pos:start="169:36" pos:end="169:38">val</name></expr></argument>, <argument pos:start="169:41" pos:end="169:44"><expr pos:start="169:41" pos:end="169:44"><operator pos:start="169:41" pos:end="169:41">&amp;</operator><name pos:start="169:42" pos:end="169:44">err</name></expr></argument>, <argument pos:start="169:47" pos:end="169:47"><expr pos:start="169:47" pos:end="169:47"><literal type="number" pos:start="169:47" pos:end="169:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="171:17" pos:end="177:17"><if pos:start="171:17" pos:end="177:17">if <condition pos:start="171:20" pos:end="171:34">(<expr pos:start="171:21" pos:end="171:33"><operator pos:start="171:21" pos:end="171:21">!</operator><operator pos:start="171:22" pos:end="171:22">*</operator><name pos:start="171:23" pos:end="171:25">val</name> <operator pos:start="171:27" pos:end="171:28">||</operator> <operator pos:start="171:30" pos:end="171:30">*</operator><name pos:start="171:31" pos:end="171:33">err</name></expr>)</condition> <block pos:start="171:36" pos:end="177:17">{<block_content pos:start="173:21" pos:end="175:31">

                    <expr_stmt pos:start="173:21" pos:end="173:69"><expr pos:start="173:21" pos:end="173:68"><call pos:start="173:21" pos:end="173:68"><name pos:start="173:21" pos:end="173:27">fprintf</name><argument_list pos:start="173:28" pos:end="173:68">(<argument pos:start="173:29" pos:end="173:34"><expr pos:start="173:29" pos:end="173:34"><name pos:start="173:29" pos:end="173:34">stderr</name></expr></argument>, <argument pos:start="173:37" pos:end="173:62"><expr pos:start="173:37" pos:end="173:62"><literal type="string" pos:start="173:37" pos:end="173:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="173:65" pos:end="173:67"><expr pos:start="173:65" pos:end="173:67"><name pos:start="173:65" pos:end="173:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="175:21" pos:end="175:31">goto <name pos:start="175:26" pos:end="175:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="179:17" pos:end="183:17"><if pos:start="179:17" pos:end="183:17">if <condition pos:start="179:20" pos:end="179:42">(<expr pos:start="179:21" pos:end="179:41"><name pos:start="179:21" pos:end="179:28">numvalue</name> <operator pos:start="179:30" pos:end="179:30">&lt;</operator> <literal type="number" pos:start="179:32" pos:end="179:41">0x80000000</literal></expr>)</condition> <block pos:start="179:44" pos:end="183:17">{<block_content pos:start="181:21" pos:end="181:43">

                    <expr_stmt pos:start="181:21" pos:end="181:43"><expr pos:start="181:21" pos:end="181:42"><name pos:start="181:21" pos:end="181:28">numvalue</name> <operator pos:start="181:30" pos:end="181:31">+=</operator> <literal type="number" pos:start="181:33" pos:end="181:42">0x80000000</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="185:17" pos:end="185:47"><expr pos:start="185:17" pos:end="185:46"><name pos:start="185:17" pos:end="185:35"><name pos:start="185:17" pos:end="185:27">x86_cpu_def</name><operator pos:start="185:28" pos:end="185:29">-&gt;</operator><name pos:start="185:30" pos:end="185:35">xlevel</name></name> <operator pos:start="185:37" pos:end="185:37">=</operator> <name pos:start="185:39" pos:end="185:46">numvalue</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="187:15" pos:end="215:13">else if <condition pos:start="187:23" pos:end="187:53">(<expr pos:start="187:24" pos:end="187:52"><operator pos:start="187:24" pos:end="187:24">!</operator><call pos:start="187:25" pos:end="187:52"><name pos:start="187:25" pos:end="187:30">strcmp</name><argument_list pos:start="187:31" pos:end="187:52">(<argument pos:start="187:32" pos:end="187:41"><expr pos:start="187:32" pos:end="187:41"><name pos:start="187:32" pos:end="187:41">featurestr</name></expr></argument>, <argument pos:start="187:44" pos:end="187:51"><expr pos:start="187:44" pos:end="187:51"><literal type="string" pos:start="187:44" pos:end="187:51">"vendor"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="187:55" pos:end="215:13">{<block_content pos:start="189:17" pos:end="213:49">

                <if_stmt pos:start="189:17" pos:end="195:17"><if pos:start="189:17" pos:end="195:17">if <condition pos:start="189:20" pos:end="189:38">(<expr pos:start="189:21" pos:end="189:37"><call pos:start="189:21" pos:end="189:31"><name pos:start="189:21" pos:end="189:26">strlen</name><argument_list pos:start="189:27" pos:end="189:31">(<argument pos:start="189:28" pos:end="189:30"><expr pos:start="189:28" pos:end="189:30"><name pos:start="189:28" pos:end="189:30">val</name></expr></argument>)</argument_list></call> <operator pos:start="189:33" pos:end="189:34">!=</operator> <literal type="number" pos:start="189:36" pos:end="189:37">12</literal></expr>)</condition> <block pos:start="189:40" pos:end="195:17">{<block_content pos:start="191:21" pos:end="193:31">

                    <expr_stmt pos:start="191:21" pos:end="191:77"><expr pos:start="191:21" pos:end="191:76"><call pos:start="191:21" pos:end="191:76"><name pos:start="191:21" pos:end="191:27">fprintf</name><argument_list pos:start="191:28" pos:end="191:76">(<argument pos:start="191:29" pos:end="191:34"><expr pos:start="191:29" pos:end="191:34"><name pos:start="191:29" pos:end="191:34">stderr</name></expr></argument>, <argument pos:start="191:37" pos:end="191:75"><expr pos:start="191:37" pos:end="191:75"><literal type="string" pos:start="191:37" pos:end="191:75">"vendor string must be 12 chars long\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="193:21" pos:end="193:31">goto <name pos:start="193:26" pos:end="193:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:41"><expr pos:start="197:17" pos:end="197:40"><name pos:start="197:17" pos:end="197:36"><name pos:start="197:17" pos:end="197:27">x86_cpu_def</name><operator pos:start="197:28" pos:end="197:29">-&gt;</operator><name pos:start="197:30" pos:end="197:36">vendor1</name></name> <operator pos:start="197:38" pos:end="197:38">=</operator> <literal type="number" pos:start="197:40" pos:end="197:40">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:41"><expr pos:start="199:17" pos:end="199:40"><name pos:start="199:17" pos:end="199:36"><name pos:start="199:17" pos:end="199:27">x86_cpu_def</name><operator pos:start="199:28" pos:end="199:29">-&gt;</operator><name pos:start="199:30" pos:end="199:36">vendor2</name></name> <operator pos:start="199:38" pos:end="199:38">=</operator> <literal type="number" pos:start="199:40" pos:end="199:40">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:41"><expr pos:start="201:17" pos:end="201:40"><name pos:start="201:17" pos:end="201:36"><name pos:start="201:17" pos:end="201:27">x86_cpu_def</name><operator pos:start="201:28" pos:end="201:29">-&gt;</operator><name pos:start="201:30" pos:end="201:36">vendor3</name></name> <operator pos:start="201:38" pos:end="201:38">=</operator> <literal type="number" pos:start="201:40" pos:end="201:40">0</literal></expr>;</expr_stmt>

                <for pos:start="203:17" pos:end="211:17">for<control pos:start="203:20" pos:end="203:38">(<init pos:start="203:21" pos:end="203:26"><expr pos:start="203:21" pos:end="203:25"><name pos:start="203:21" pos:end="203:21">i</name> <operator pos:start="203:23" pos:end="203:23">=</operator> <literal type="number" pos:start="203:25" pos:end="203:25">0</literal></expr>;</init> <condition pos:start="203:28" pos:end="203:33"><expr pos:start="203:28" pos:end="203:32"><name pos:start="203:28" pos:end="203:28">i</name> <operator pos:start="203:30" pos:end="203:30">&lt;</operator> <literal type="number" pos:start="203:32" pos:end="203:32">4</literal></expr>;</condition> <incr pos:start="203:35" pos:end="203:37"><expr pos:start="203:35" pos:end="203:37"><name pos:start="203:35" pos:end="203:35">i</name><operator pos:start="203:36" pos:end="203:37">++</operator></expr></incr>)</control> <block pos:start="203:40" pos:end="211:17">{<block_content pos:start="205:21" pos:end="209:77">

                    <expr_stmt pos:start="205:21" pos:end="205:77"><expr pos:start="205:21" pos:end="205:76"><name pos:start="205:21" pos:end="205:40"><name pos:start="205:21" pos:end="205:31">x86_cpu_def</name><operator pos:start="205:32" pos:end="205:33">-&gt;</operator><name pos:start="205:34" pos:end="205:40">vendor1</name></name> <operator pos:start="205:42" pos:end="205:43">|=</operator> <operator pos:start="205:45" pos:end="205:45">(</operator><operator pos:start="205:46" pos:end="205:46">(</operator><name pos:start="205:47" pos:end="205:53">uint8_t</name><operator pos:start="205:54" pos:end="205:54">)</operator><name pos:start="205:55" pos:end="205:64"><name pos:start="205:55" pos:end="205:57">val</name><index pos:start="205:58" pos:end="205:64">[<expr pos:start="205:59" pos:end="205:59"><name pos:start="205:59" pos:end="205:59">i</name></expr>    ]</index></name><operator pos:start="205:65" pos:end="205:65">)</operator> <operator pos:start="205:67" pos:end="205:68">&lt;&lt;</operator> <operator pos:start="205:70" pos:end="205:70">(</operator><literal type="number" pos:start="205:71" pos:end="205:71">8</literal> <operator pos:start="205:73" pos:end="205:73">*</operator> <name pos:start="205:75" pos:end="205:75">i</name><operator pos:start="205:76" pos:end="205:76">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:77"><expr pos:start="207:21" pos:end="207:76"><name pos:start="207:21" pos:end="207:40"><name pos:start="207:21" pos:end="207:31">x86_cpu_def</name><operator pos:start="207:32" pos:end="207:33">-&gt;</operator><name pos:start="207:34" pos:end="207:40">vendor2</name></name> <operator pos:start="207:42" pos:end="207:43">|=</operator> <operator pos:start="207:45" pos:end="207:45">(</operator><operator pos:start="207:46" pos:end="207:46">(</operator><name pos:start="207:47" pos:end="207:53">uint8_t</name><operator pos:start="207:54" pos:end="207:54">)</operator><name pos:start="207:55" pos:end="207:64"><name pos:start="207:55" pos:end="207:57">val</name><index pos:start="207:58" pos:end="207:64">[<expr pos:start="207:59" pos:end="207:63"><name pos:start="207:59" pos:end="207:59">i</name> <operator pos:start="207:61" pos:end="207:61">+</operator> <literal type="number" pos:start="207:63" pos:end="207:63">4</literal></expr>]</index></name><operator pos:start="207:65" pos:end="207:65">)</operator> <operator pos:start="207:67" pos:end="207:68">&lt;&lt;</operator> <operator pos:start="207:70" pos:end="207:70">(</operator><literal type="number" pos:start="207:71" pos:end="207:71">8</literal> <operator pos:start="207:73" pos:end="207:73">*</operator> <name pos:start="207:75" pos:end="207:75">i</name><operator pos:start="207:76" pos:end="207:76">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="209:21" pos:end="209:77"><expr pos:start="209:21" pos:end="209:76"><name pos:start="209:21" pos:end="209:40"><name pos:start="209:21" pos:end="209:31">x86_cpu_def</name><operator pos:start="209:32" pos:end="209:33">-&gt;</operator><name pos:start="209:34" pos:end="209:40">vendor3</name></name> <operator pos:start="209:42" pos:end="209:43">|=</operator> <operator pos:start="209:45" pos:end="209:45">(</operator><operator pos:start="209:46" pos:end="209:46">(</operator><name pos:start="209:47" pos:end="209:53">uint8_t</name><operator pos:start="209:54" pos:end="209:54">)</operator><name pos:start="209:55" pos:end="209:64"><name pos:start="209:55" pos:end="209:57">val</name><index pos:start="209:58" pos:end="209:64">[<expr pos:start="209:59" pos:end="209:63"><name pos:start="209:59" pos:end="209:59">i</name> <operator pos:start="209:61" pos:end="209:61">+</operator> <literal type="number" pos:start="209:63" pos:end="209:63">8</literal></expr>]</index></name><operator pos:start="209:65" pos:end="209:65">)</operator> <operator pos:start="209:67" pos:end="209:68">&lt;&lt;</operator> <operator pos:start="209:70" pos:end="209:70">(</operator><literal type="number" pos:start="209:71" pos:end="209:71">8</literal> <operator pos:start="209:73" pos:end="209:73">*</operator> <name pos:start="209:75" pos:end="209:75">i</name><operator pos:start="209:76" pos:end="209:76">)</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="213:17" pos:end="213:49"><expr pos:start="213:17" pos:end="213:48"><name pos:start="213:17" pos:end="213:44"><name pos:start="213:17" pos:end="213:27">x86_cpu_def</name><operator pos:start="213:28" pos:end="213:29">-&gt;</operator><name pos:start="213:30" pos:end="213:44">vendor_override</name></name> <operator pos:start="213:46" pos:end="213:46">=</operator> <literal type="number" pos:start="213:48" pos:end="213:48">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="215:15" pos:end="221:13">else if <condition pos:start="215:23" pos:end="215:55">(<expr pos:start="215:24" pos:end="215:54"><operator pos:start="215:24" pos:end="215:24">!</operator><call pos:start="215:25" pos:end="215:54"><name pos:start="215:25" pos:end="215:30">strcmp</name><argument_list pos:start="215:31" pos:end="215:54">(<argument pos:start="215:32" pos:end="215:41"><expr pos:start="215:32" pos:end="215:41"><name pos:start="215:32" pos:end="215:41">featurestr</name></expr></argument>, <argument pos:start="215:44" pos:end="215:53"><expr pos:start="215:44" pos:end="215:53"><literal type="string" pos:start="215:44" pos:end="215:53">"model_id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="215:57" pos:end="221:13">{<block_content pos:start="217:17" pos:end="219:29">

                <expr_stmt pos:start="217:17" pos:end="219:29"><expr pos:start="217:17" pos:end="219:28"><call pos:start="217:17" pos:end="219:28"><name pos:start="217:17" pos:end="217:23">pstrcpy</name><argument_list pos:start="217:24" pos:end="219:28">(<argument pos:start="217:25" pos:end="217:45"><expr pos:start="217:25" pos:end="217:45"><name pos:start="217:25" pos:end="217:45"><name pos:start="217:25" pos:end="217:35">x86_cpu_def</name><operator pos:start="217:36" pos:end="217:37">-&gt;</operator><name pos:start="217:38" pos:end="217:45">model_id</name></name></expr></argument>, <argument pos:start="217:48" pos:end="217:76"><expr pos:start="217:48" pos:end="217:76"><sizeof pos:start="217:48" pos:end="217:76">sizeof<argument_list pos:start="217:54" pos:end="217:76">(<argument pos:start="217:55" pos:end="217:75"><expr pos:start="217:55" pos:end="217:75"><name pos:start="217:55" pos:end="217:75"><name pos:start="217:55" pos:end="217:65">x86_cpu_def</name><operator pos:start="217:66" pos:end="217:67">-&gt;</operator><name pos:start="217:68" pos:end="217:75">model_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                        <argument pos:start="219:25" pos:end="219:27"><expr pos:start="219:25" pos:end="219:27"><name pos:start="219:25" pos:end="219:27">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="221:15" pos:end="243:13">else if <condition pos:start="221:23" pos:end="221:55">(<expr pos:start="221:24" pos:end="221:54"><operator pos:start="221:24" pos:end="221:24">!</operator><call pos:start="221:25" pos:end="221:54"><name pos:start="221:25" pos:end="221:30">strcmp</name><argument_list pos:start="221:31" pos:end="221:54">(<argument pos:start="221:32" pos:end="221:41"><expr pos:start="221:32" pos:end="221:41"><name pos:start="221:32" pos:end="221:41">featurestr</name></expr></argument>, <argument pos:start="221:44" pos:end="221:53"><expr pos:start="221:44" pos:end="221:53"><literal type="string" pos:start="221:44" pos:end="221:53">"tsc_freq"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="221:57" pos:end="243:13">{<block_content pos:start="223:17" pos:end="241:55">

                <decl_stmt pos:start="223:17" pos:end="223:33"><decl pos:start="223:17" pos:end="223:32"><type pos:start="223:17" pos:end="223:23"><name pos:start="223:17" pos:end="223:23">int64_t</name></type> <name pos:start="223:25" pos:end="223:32">tsc_freq</name></decl>;</decl_stmt>

                <decl_stmt pos:start="225:17" pos:end="225:26"><decl pos:start="225:17" pos:end="225:25"><type pos:start="225:17" pos:end="225:22"><name pos:start="225:17" pos:end="225:20">char</name> <modifier pos:start="225:22" pos:end="225:22">*</modifier></type><name pos:start="225:23" pos:end="225:25">err</name></decl>;</decl_stmt>



                <expr_stmt pos:start="229:17" pos:end="231:74"><expr pos:start="229:17" pos:end="231:73"><name pos:start="229:17" pos:end="229:24">tsc_freq</name> <operator pos:start="229:26" pos:end="229:26">=</operator> <call pos:start="229:28" pos:end="231:73"><name pos:start="229:28" pos:end="229:46">strtosz_suffix_unit</name><argument_list pos:start="229:47" pos:end="231:73">(<argument pos:start="229:48" pos:end="229:50"><expr pos:start="229:48" pos:end="229:50"><name pos:start="229:48" pos:end="229:50">val</name></expr></argument>, <argument pos:start="229:53" pos:end="229:56"><expr pos:start="229:53" pos:end="229:56"><operator pos:start="229:53" pos:end="229:53">&amp;</operator><name pos:start="229:54" pos:end="229:56">err</name></expr></argument>,

                                               <argument pos:start="231:48" pos:end="231:66"><expr pos:start="231:48" pos:end="231:66"><name pos:start="231:48" pos:end="231:66">STRTOSZ_DEFSUFFIX_B</name></expr></argument>, <argument pos:start="231:69" pos:end="231:72"><expr pos:start="231:69" pos:end="231:72"><literal type="number" pos:start="231:69" pos:end="231:72">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="233:17" pos:end="239:17"><if pos:start="233:17" pos:end="239:17">if <condition pos:start="233:20" pos:end="233:34">(<expr pos:start="233:21" pos:end="233:33"><operator pos:start="233:21" pos:end="233:21">!</operator><operator pos:start="233:22" pos:end="233:22">*</operator><name pos:start="233:23" pos:end="233:25">val</name> <operator pos:start="233:27" pos:end="233:28">||</operator> <operator pos:start="233:30" pos:end="233:30">*</operator><name pos:start="233:31" pos:end="233:33">err</name></expr>)</condition> <block pos:start="233:36" pos:end="239:17">{<block_content pos:start="235:21" pos:end="237:31">

                    <expr_stmt pos:start="235:21" pos:end="235:69"><expr pos:start="235:21" pos:end="235:68"><call pos:start="235:21" pos:end="235:68"><name pos:start="235:21" pos:end="235:27">fprintf</name><argument_list pos:start="235:28" pos:end="235:68">(<argument pos:start="235:29" pos:end="235:34"><expr pos:start="235:29" pos:end="235:34"><name pos:start="235:29" pos:end="235:34">stderr</name></expr></argument>, <argument pos:start="235:37" pos:end="235:62"><expr pos:start="235:37" pos:end="235:62"><literal type="string" pos:start="235:37" pos:end="235:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="235:65" pos:end="235:67"><expr pos:start="235:65" pos:end="235:67"><name pos:start="235:65" pos:end="235:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="237:21" pos:end="237:31">goto <name pos:start="237:26" pos:end="237:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:55"><expr pos:start="241:17" pos:end="241:54"><name pos:start="241:17" pos:end="241:36"><name pos:start="241:17" pos:end="241:27">x86_cpu_def</name><operator pos:start="241:28" pos:end="241:29">-&gt;</operator><name pos:start="241:30" pos:end="241:36">tsc_khz</name></name> <operator pos:start="241:38" pos:end="241:38">=</operator> <name pos:start="241:40" pos:end="241:47">tsc_freq</name> <operator pos:start="241:49" pos:end="241:49">/</operator> <literal type="number" pos:start="241:51" pos:end="241:54">1000</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="243:15" pos:end="249:13">else <block pos:start="243:20" pos:end="249:13">{<block_content pos:start="245:17" pos:end="247:27">

                <expr_stmt pos:start="245:17" pos:end="245:73"><expr pos:start="245:17" pos:end="245:72"><call pos:start="245:17" pos:end="245:72"><name pos:start="245:17" pos:end="245:23">fprintf</name><argument_list pos:start="245:24" pos:end="245:72">(<argument pos:start="245:25" pos:end="245:30"><expr pos:start="245:25" pos:end="245:30"><name pos:start="245:25" pos:end="245:30">stderr</name></expr></argument>, <argument pos:start="245:33" pos:end="245:59"><expr pos:start="245:33" pos:end="245:59"><literal type="string" pos:start="245:33" pos:end="245:59">"unrecognized feature %s\n"</literal></expr></argument>, <argument pos:start="245:62" pos:end="245:71"><expr pos:start="245:62" pos:end="245:71"><name pos:start="245:62" pos:end="245:71">featurestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="247:17" pos:end="247:27">goto <name pos:start="247:22" pos:end="247:26">error</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="251:11" pos:end="255:9">else if <condition pos:start="251:19" pos:end="251:48">(<expr pos:start="251:20" pos:end="251:47"><operator pos:start="251:20" pos:end="251:20">!</operator><call pos:start="251:21" pos:end="251:47"><name pos:start="251:21" pos:end="251:26">strcmp</name><argument_list pos:start="251:27" pos:end="251:47">(<argument pos:start="251:28" pos:end="251:37"><expr pos:start="251:28" pos:end="251:37"><name pos:start="251:28" pos:end="251:37">featurestr</name></expr></argument>, <argument pos:start="251:40" pos:end="251:46"><expr pos:start="251:40" pos:end="251:46"><literal type="string" pos:start="251:40" pos:end="251:46">"check"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="251:50" pos:end="255:9">{<block_content pos:start="253:13" pos:end="253:28">

            <expr_stmt pos:start="253:13" pos:end="253:28"><expr pos:start="253:13" pos:end="253:27"><name pos:start="253:13" pos:end="253:23">check_cpuid</name> <operator pos:start="253:25" pos:end="253:25">=</operator> <literal type="number" pos:start="253:27" pos:end="253:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="255:11" pos:end="259:9">else if <condition pos:start="255:19" pos:end="255:50">(<expr pos:start="255:20" pos:end="255:49"><operator pos:start="255:20" pos:end="255:20">!</operator><call pos:start="255:21" pos:end="255:49"><name pos:start="255:21" pos:end="255:26">strcmp</name><argument_list pos:start="255:27" pos:end="255:49">(<argument pos:start="255:28" pos:end="255:37"><expr pos:start="255:28" pos:end="255:37"><name pos:start="255:28" pos:end="255:37">featurestr</name></expr></argument>, <argument pos:start="255:40" pos:end="255:48"><expr pos:start="255:40" pos:end="255:48"><literal type="string" pos:start="255:40" pos:end="255:48">"enforce"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="255:52" pos:end="259:9">{<block_content pos:start="257:13" pos:end="257:44">

            <expr_stmt pos:start="257:13" pos:end="257:44"><expr pos:start="257:13" pos:end="257:43"><name pos:start="257:13" pos:end="257:23">check_cpuid</name> <operator pos:start="257:25" pos:end="257:25">=</operator> <name pos:start="257:27" pos:end="257:39">enforce_cpuid</name> <operator pos:start="257:41" pos:end="257:41">=</operator> <literal type="number" pos:start="257:43" pos:end="257:43">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="259:11" pos:end="265:9">else <block pos:start="259:16" pos:end="265:9">{<block_content pos:start="261:13" pos:end="263:23">

            <expr_stmt pos:start="261:13" pos:end="261:111"><expr pos:start="261:13" pos:end="261:110"><call pos:start="261:13" pos:end="261:110"><name pos:start="261:13" pos:end="261:19">fprintf</name><argument_list pos:start="261:20" pos:end="261:110">(<argument pos:start="261:21" pos:end="261:26"><expr pos:start="261:21" pos:end="261:26"><name pos:start="261:21" pos:end="261:26">stderr</name></expr></argument>, <argument pos:start="261:29" pos:end="261:97"><expr pos:start="261:29" pos:end="261:97"><literal type="string" pos:start="261:29" pos:end="261:97">"feature string `%s' not in format (+feature|-feature|feature=xyz)\n"</literal></expr></argument>, <argument pos:start="261:100" pos:end="261:109"><expr pos:start="261:100" pos:end="261:109"><name pos:start="261:100" pos:end="261:109">featurestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="263:13" pos:end="263:23">goto <name pos:start="263:18" pos:end="263:22">error</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:39"><expr pos:start="267:9" pos:end="267:38"><name pos:start="267:9" pos:end="267:18">featurestr</name> <operator pos:start="267:20" pos:end="267:20">=</operator> <call pos:start="267:22" pos:end="267:38"><name pos:start="267:22" pos:end="267:27">strtok</name><argument_list pos:start="267:28" pos:end="267:38">(<argument pos:start="267:29" pos:end="267:32"><expr pos:start="267:29" pos:end="267:32"><name pos:start="267:29" pos:end="267:32">NULL</name></expr></argument>, <argument pos:start="267:35" pos:end="267:37"><expr pos:start="267:35" pos:end="267:37"><literal type="string" pos:start="267:35" pos:end="267:37">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="271:5" pos:end="271:43"><expr pos:start="271:5" pos:end="271:42"><name pos:start="271:5" pos:end="271:25"><name pos:start="271:5" pos:end="271:15">x86_cpu_def</name><operator pos:start="271:16" pos:end="271:17">-&gt;</operator><name pos:start="271:18" pos:end="271:25">features</name></name> <operator pos:start="271:27" pos:end="271:28">|=</operator> <name pos:start="271:30" pos:end="271:42">plus_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:51"><expr pos:start="273:5" pos:end="273:50"><name pos:start="273:5" pos:end="273:29"><name pos:start="273:5" pos:end="273:15">x86_cpu_def</name><operator pos:start="273:16" pos:end="273:17">-&gt;</operator><name pos:start="273:18" pos:end="273:29">ext_features</name></name> <operator pos:start="273:31" pos:end="273:32">|=</operator> <name pos:start="273:34" pos:end="273:50">plus_ext_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:53"><expr pos:start="275:5" pos:end="275:52"><name pos:start="275:5" pos:end="275:30"><name pos:start="275:5" pos:end="275:15">x86_cpu_def</name><operator pos:start="275:16" pos:end="275:17">-&gt;</operator><name pos:start="275:18" pos:end="275:30">ext2_features</name></name> <operator pos:start="275:32" pos:end="275:33">|=</operator> <name pos:start="275:35" pos:end="275:52">plus_ext2_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:53"><expr pos:start="277:5" pos:end="277:52"><name pos:start="277:5" pos:end="277:30"><name pos:start="277:5" pos:end="277:15">x86_cpu_def</name><operator pos:start="277:16" pos:end="277:17">-&gt;</operator><name pos:start="277:18" pos:end="277:30">ext3_features</name></name> <operator pos:start="277:32" pos:end="277:33">|=</operator> <name pos:start="277:35" pos:end="277:52">plus_ext3_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:51"><expr pos:start="279:5" pos:end="279:50"><name pos:start="279:5" pos:end="279:29"><name pos:start="279:5" pos:end="279:15">x86_cpu_def</name><operator pos:start="279:16" pos:end="279:17">-&gt;</operator><name pos:start="279:18" pos:end="279:29">kvm_features</name></name> <operator pos:start="279:31" pos:end="279:32">|=</operator> <name pos:start="279:34" pos:end="279:50">plus_kvm_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:51"><expr pos:start="281:5" pos:end="281:50"><name pos:start="281:5" pos:end="281:29"><name pos:start="281:5" pos:end="281:15">x86_cpu_def</name><operator pos:start="281:16" pos:end="281:17">-&gt;</operator><name pos:start="281:18" pos:end="281:29">svm_features</name></name> <operator pos:start="281:31" pos:end="281:32">|=</operator> <name pos:start="281:34" pos:end="281:50">plus_svm_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:45"><expr pos:start="283:5" pos:end="283:44"><name pos:start="283:5" pos:end="283:25"><name pos:start="283:5" pos:end="283:15">x86_cpu_def</name><operator pos:start="283:16" pos:end="283:17">-&gt;</operator><name pos:start="283:18" pos:end="283:25">features</name></name> <operator pos:start="283:27" pos:end="283:28">&amp;=</operator> <operator pos:start="283:30" pos:end="283:30">~</operator><name pos:start="283:31" pos:end="283:44">minus_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:53"><expr pos:start="285:5" pos:end="285:52"><name pos:start="285:5" pos:end="285:29"><name pos:start="285:5" pos:end="285:15">x86_cpu_def</name><operator pos:start="285:16" pos:end="285:17">-&gt;</operator><name pos:start="285:18" pos:end="285:29">ext_features</name></name> <operator pos:start="285:31" pos:end="285:32">&amp;=</operator> <operator pos:start="285:34" pos:end="285:34">~</operator><name pos:start="285:35" pos:end="285:52">minus_ext_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:55"><expr pos:start="287:5" pos:end="287:54"><name pos:start="287:5" pos:end="287:30"><name pos:start="287:5" pos:end="287:15">x86_cpu_def</name><operator pos:start="287:16" pos:end="287:17">-&gt;</operator><name pos:start="287:18" pos:end="287:30">ext2_features</name></name> <operator pos:start="287:32" pos:end="287:33">&amp;=</operator> <operator pos:start="287:35" pos:end="287:35">~</operator><name pos:start="287:36" pos:end="287:54">minus_ext2_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:55"><expr pos:start="289:5" pos:end="289:54"><name pos:start="289:5" pos:end="289:30"><name pos:start="289:5" pos:end="289:15">x86_cpu_def</name><operator pos:start="289:16" pos:end="289:17">-&gt;</operator><name pos:start="289:18" pos:end="289:30">ext3_features</name></name> <operator pos:start="289:32" pos:end="289:33">&amp;=</operator> <operator pos:start="289:35" pos:end="289:35">~</operator><name pos:start="289:36" pos:end="289:54">minus_ext3_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:53"><expr pos:start="291:5" pos:end="291:52"><name pos:start="291:5" pos:end="291:29"><name pos:start="291:5" pos:end="291:15">x86_cpu_def</name><operator pos:start="291:16" pos:end="291:17">-&gt;</operator><name pos:start="291:18" pos:end="291:29">kvm_features</name></name> <operator pos:start="291:31" pos:end="291:32">&amp;=</operator> <operator pos:start="291:34" pos:end="291:34">~</operator><name pos:start="291:35" pos:end="291:52">minus_kvm_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:53"><expr pos:start="293:5" pos:end="293:52"><name pos:start="293:5" pos:end="293:29"><name pos:start="293:5" pos:end="293:15">x86_cpu_def</name><operator pos:start="293:16" pos:end="293:17">-&gt;</operator><name pos:start="293:18" pos:end="293:29">svm_features</name></name> <operator pos:start="293:31" pos:end="293:32">&amp;=</operator> <operator pos:start="293:34" pos:end="293:34">~</operator><name pos:start="293:35" pos:end="293:52">minus_svm_features</name></expr>;</expr_stmt>

    <if_stmt pos:start="295:5" pos:end="301:5"><if pos:start="295:5" pos:end="301:5">if <condition pos:start="295:8" pos:end="295:20">(<expr pos:start="295:9" pos:end="295:19"><name pos:start="295:9" pos:end="295:19">check_cpuid</name></expr>)</condition> <block pos:start="295:22" pos:end="301:5">{<block_content pos:start="297:9" pos:end="299:23">

        <if_stmt pos:start="297:9" pos:end="299:23"><if pos:start="297:9" pos:end="299:23">if <condition pos:start="297:12" pos:end="297:70">(<expr pos:start="297:13" pos:end="297:69"><call pos:start="297:13" pos:end="297:52"><name pos:start="297:13" pos:end="297:39">check_features_against_host</name><argument_list pos:start="297:40" pos:end="297:52">(<argument pos:start="297:41" pos:end="297:51"><expr pos:start="297:41" pos:end="297:51"><name pos:start="297:41" pos:end="297:51">x86_cpu_def</name></expr></argument>)</argument_list></call> <operator pos:start="297:54" pos:end="297:55">&amp;&amp;</operator> <name pos:start="297:57" pos:end="297:69">enforce_cpuid</name></expr>)</condition><block type="pseudo" pos:start="299:13" pos:end="299:23"><block_content pos:start="299:13" pos:end="299:23">

            <goto pos:start="299:13" pos:end="299:23">goto <name pos:start="299:18" pos:end="299:22">error</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:14"><expr pos:start="303:5" pos:end="303:13"><call pos:start="303:5" pos:end="303:13"><name pos:start="303:5" pos:end="303:10">g_free</name><argument_list pos:start="303:11" pos:end="303:13">(<argument pos:start="303:12" pos:end="303:12"><expr pos:start="303:12" pos:end="303:12"><name pos:start="303:12" pos:end="303:12">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="305:5" pos:end="305:13">return <expr pos:start="305:12" pos:end="305:12"><literal type="number" pos:start="305:12" pos:end="305:12">0</literal></expr>;</return>



<label pos:start="309:1" pos:end="309:6"><name pos:start="309:1" pos:end="309:5">error</name>:</label>

    <expr_stmt pos:start="311:5" pos:end="311:14"><expr pos:start="311:5" pos:end="311:13"><call pos:start="311:5" pos:end="311:13"><name pos:start="311:5" pos:end="311:10">g_free</name><argument_list pos:start="311:11" pos:end="311:13">(<argument pos:start="311:12" pos:end="311:12"><expr pos:start="311:12" pos:end="311:12"><name pos:start="311:12" pos:end="311:12">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="313:5" pos:end="313:14">return <expr pos:start="313:12" pos:end="313:13"><operator pos:start="313:12" pos:end="313:12">-</operator><literal type="number" pos:start="313:13" pos:end="313:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
