<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22247.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:34"><name pos:start="1:1" pos:end="1:10">tcp_listen</name><argument_list pos:start="1:11" pos:end="3:34">(<argument pos:start="1:12" pos:end="1:23">Slirp *slirp</argument>, <argument pos:start="1:26" pos:end="1:40">u_int32_t haddr</argument>, <argument pos:start="1:43" pos:end="1:53">u_int hport</argument>, <argument pos:start="1:56" pos:end="1:70">u_int32_t laddr</argument>,

           <argument pos:start="3:12" pos:end="3:22">u_int lport</argument>, <argument pos:start="3:25" pos:end="3:33">int flags</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:9" pos:end="137:18">

	<decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:26">sockaddr_in</name></name></type> <name pos:start="7:28" pos:end="7:31">addr</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:26"><decl pos:start="9:9" pos:end="9:25"><type pos:start="9:9" pos:end="9:23"><name pos:start="9:9" pos:end="9:21"><name pos:start="9:9" pos:end="9:14">struct</name> <name pos:start="9:16" pos:end="9:21">socket</name></name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:25">so</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:23"><decl pos:start="11:9" pos:end="11:13"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:13">s</name></decl>, <decl pos:start="11:16" pos:end="11:22"><type ref="prev" pos:start="11:9" pos:end="11:11"/><name pos:start="11:16" pos:end="11:18">opt</name> <init pos:start="11:20" pos:end="11:22">= <expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">1</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:41"><decl pos:start="13:9" pos:end="13:40"><type pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:17">socklen_t</name></type> <name pos:start="13:19" pos:end="13:25">addrlen</name> <init pos:start="13:27" pos:end="13:40">= <expr pos:start="13:29" pos:end="13:40"><sizeof pos:start="13:29" pos:end="13:40">sizeof<argument_list pos:start="13:35" pos:end="13:40">(<argument pos:start="13:36" pos:end="13:39"><expr pos:start="13:36" pos:end="13:39"><name pos:start="13:36" pos:end="13:39">addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



	<expr_stmt pos:start="17:9" pos:end="17:33"><expr pos:start="17:9" pos:end="17:32"><call pos:start="17:9" pos:end="17:32"><name pos:start="17:9" pos:end="17:18">DEBUG_CALL</name><argument_list pos:start="17:19" pos:end="17:32">(<argument pos:start="17:20" pos:end="17:31"><expr pos:start="17:20" pos:end="17:31"><literal type="string" pos:start="17:20" pos:end="17:31">"tcp_listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><call pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:17">DEBUG_ARG</name><argument_list pos:start="19:18" pos:end="19:38">(<argument pos:start="19:19" pos:end="19:30"><expr pos:start="19:19" pos:end="19:30"><literal type="string" pos:start="19:19" pos:end="19:30">"haddr = %x"</literal></expr></argument>, <argument pos:start="19:33" pos:end="19:37"><expr pos:start="19:33" pos:end="19:37"><name pos:start="19:33" pos:end="19:37">haddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="21:9" pos:end="21:39"><expr pos:start="21:9" pos:end="21:38"><call pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:17">DEBUG_ARG</name><argument_list pos:start="21:18" pos:end="21:38">(<argument pos:start="21:19" pos:end="21:30"><expr pos:start="21:19" pos:end="21:30"><literal type="string" pos:start="21:19" pos:end="21:30">"hport = %d"</literal></expr></argument>, <argument pos:start="21:33" pos:end="21:37"><expr pos:start="21:33" pos:end="21:37"><name pos:start="21:33" pos:end="21:37">hport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><call pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:17">DEBUG_ARG</name><argument_list pos:start="23:18" pos:end="23:38">(<argument pos:start="23:19" pos:end="23:30"><expr pos:start="23:19" pos:end="23:30"><literal type="string" pos:start="23:19" pos:end="23:30">"laddr = %x"</literal></expr></argument>, <argument pos:start="23:33" pos:end="23:37"><expr pos:start="23:33" pos:end="23:37"><name pos:start="23:33" pos:end="23:37">laddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="25:9" pos:end="25:39"><expr pos:start="25:9" pos:end="25:38"><call pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:17">DEBUG_ARG</name><argument_list pos:start="25:18" pos:end="25:38">(<argument pos:start="25:19" pos:end="25:30"><expr pos:start="25:19" pos:end="25:30"><literal type="string" pos:start="25:19" pos:end="25:30">"lport = %d"</literal></expr></argument>, <argument pos:start="25:33" pos:end="25:37"><expr pos:start="25:33" pos:end="25:37"><name pos:start="25:33" pos:end="25:37">lport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="27:9" pos:end="27:39"><expr pos:start="27:9" pos:end="27:38"><call pos:start="27:9" pos:end="27:38"><name pos:start="27:9" pos:end="27:17">DEBUG_ARG</name><argument_list pos:start="27:18" pos:end="27:38">(<argument pos:start="27:19" pos:end="27:30"><expr pos:start="27:19" pos:end="27:30"><literal type="string" pos:start="27:19" pos:end="27:30">"flags = %x"</literal></expr></argument>, <argument pos:start="27:33" pos:end="27:37"><expr pos:start="27:33" pos:end="27:37"><name pos:start="27:33" pos:end="27:37">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="31:9" pos:end="31:29"><expr pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:10">so</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:28"><name pos:start="31:14" pos:end="31:21">socreate</name><argument_list pos:start="31:22" pos:end="31:28">(<argument pos:start="31:23" pos:end="31:27"><expr pos:start="31:23" pos:end="31:27"><name pos:start="31:23" pos:end="31:27">slirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:16">(<expr pos:start="33:13" pos:end="33:15"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:15">so</name></expr>)</condition> <block pos:start="33:18" pos:end="37:9">{<block_content pos:start="35:11" pos:end="35:22">

	  <return pos:start="35:11" pos:end="35:22">return <expr pos:start="35:18" pos:end="35:21"><name pos:start="35:18" pos:end="35:21">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="41:9" pos:end="41:65">/* Don't tcp_attach... we don't need so_snd nor so_rcv */</comment>

	<if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:54">(<expr pos:start="43:13" pos:end="43:53"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:25"><name pos:start="43:14" pos:end="43:15">so</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:25">so_tcpcb</name></name> <operator pos:start="43:27" pos:end="43:27">=</operator> <call pos:start="43:29" pos:end="43:44"><name pos:start="43:29" pos:end="43:40">tcp_newtcpcb</name><argument_list pos:start="43:41" pos:end="43:44">(<argument pos:start="43:42" pos:end="43:43"><expr pos:start="43:42" pos:end="43:43"><name pos:start="43:42" pos:end="43:43">so</name></expr></argument>)</argument_list></call><operator pos:start="43:45" pos:end="43:45">)</operator> <operator pos:start="43:47" pos:end="43:48">==</operator> <name pos:start="43:50" pos:end="43:53">NULL</name></expr>)</condition> <block pos:start="43:56" pos:end="49:9">{<block_content pos:start="45:17" pos:end="47:28">

		<expr_stmt pos:start="45:17" pos:end="45:25"><expr pos:start="45:17" pos:end="45:24"><call pos:start="45:17" pos:end="45:24"><name pos:start="45:17" pos:end="45:20">free</name><argument_list pos:start="45:21" pos:end="45:24">(<argument pos:start="45:22" pos:end="45:23"><expr pos:start="45:22" pos:end="45:23"><name pos:start="45:22" pos:end="45:23">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="47:17" pos:end="47:28">return <expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="51:9" pos:end="51:32"><expr pos:start="51:9" pos:end="51:31"><call pos:start="51:9" pos:end="51:31"><name pos:start="51:9" pos:end="51:14">insque</name><argument_list pos:start="51:15" pos:end="51:31">(<argument pos:start="51:16" pos:end="51:17"><expr pos:start="51:16" pos:end="51:17"><name pos:start="51:16" pos:end="51:17">so</name></expr></argument>, <argument pos:start="51:20" pos:end="51:30"><expr pos:start="51:20" pos:end="51:30"><operator pos:start="51:20" pos:end="51:20">&amp;</operator><name pos:start="51:21" pos:end="51:30"><name pos:start="51:21" pos:end="51:25">slirp</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:30">tcb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="55:9" pos:end="59:11">/*

	 * SS_FACCEPTONCE sockets must time out.

	 */</comment>

	<if_stmt pos:start="61:9" pos:end="63:64"><if pos:start="61:9" pos:end="63:64">if <condition pos:start="61:12" pos:end="61:35">(<expr pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:17">flags</name> <operator pos:start="61:19" pos:end="61:19">&amp;</operator> <name pos:start="61:21" pos:end="61:34">SS_FACCEPTONCE</name></expr>)</condition><block type="pseudo" pos:start="63:12" pos:end="63:64"><block_content pos:start="63:12" pos:end="63:64">

	   <expr_stmt pos:start="63:12" pos:end="63:64"><expr pos:start="63:12" pos:end="63:63"><name pos:start="63:12" pos:end="63:43"><name pos:start="63:12" pos:end="63:13">so</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:23">so_tcpcb</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:32">t_timer</name><index pos:start="63:33" pos:end="63:43">[<expr pos:start="63:34" pos:end="63:42"><name pos:start="63:34" pos:end="63:42">TCPT_KEEP</name></expr>]</index></name> <operator pos:start="63:45" pos:end="63:45">=</operator> <name pos:start="63:47" pos:end="63:61">TCPTV_KEEP_INIT</name><operator pos:start="63:62" pos:end="63:62">*</operator><literal type="number" pos:start="63:63" pos:end="63:63">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<expr_stmt pos:start="67:9" pos:end="67:43"><expr pos:start="67:9" pos:end="67:42"><name pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:10">so</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:20">so_state</name></name> <operator pos:start="67:22" pos:end="67:23">&amp;=</operator> <name pos:start="67:25" pos:end="67:42">SS_PERSISTENT_MASK</name></expr>;</expr_stmt>

	<expr_stmt pos:start="69:9" pos:end="69:49"><expr pos:start="69:9" pos:end="69:48"><name pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:10">so</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:20">so_state</name></name> <operator pos:start="69:22" pos:end="69:23">|=</operator> <operator pos:start="69:25" pos:end="69:25">(</operator><name pos:start="69:26" pos:end="69:39">SS_FACCEPTCONN</name> <operator pos:start="69:41" pos:end="69:41">|</operator> <name pos:start="69:43" pos:end="69:47">flags</name><operator pos:start="69:48" pos:end="69:48">)</operator></expr>;</expr_stmt>

	<expr_stmt pos:start="71:9" pos:end="71:29"><expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:10">so</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:20">so_lport</name></name> <operator pos:start="71:22" pos:end="71:22">=</operator> <name pos:start="71:24" pos:end="71:28">lport</name></expr>;</expr_stmt> <comment type="block" pos:start="71:31" pos:end="71:58">/* Kept in network format */</comment>

	<expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:10">so</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:20">so_laddr</name><operator pos:start="73:21" pos:end="73:21">.</operator><name pos:start="73:22" pos:end="73:27">s_addr</name></name> <operator pos:start="73:29" pos:end="73:29">=</operator> <name pos:start="73:31" pos:end="73:35">laddr</name></expr>;</expr_stmt> <comment type="block" pos:start="73:38" pos:end="73:48">/* Ditto */</comment>



	<expr_stmt pos:start="77:9" pos:end="77:34"><expr pos:start="77:9" pos:end="77:33"><name pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:12">addr</name><operator pos:start="77:13" pos:end="77:13">.</operator><name pos:start="77:14" pos:end="77:23">sin_family</name></name> <operator pos:start="77:25" pos:end="77:25">=</operator> <name pos:start="77:27" pos:end="77:33">AF_INET</name></expr>;</expr_stmt>

	<expr_stmt pos:start="79:9" pos:end="79:37"><expr pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:12">addr</name><operator pos:start="79:13" pos:end="79:13">.</operator><name pos:start="79:14" pos:end="79:21">sin_addr</name><operator pos:start="79:22" pos:end="79:22">.</operator><name pos:start="79:23" pos:end="79:28">s_addr</name></name> <operator pos:start="79:30" pos:end="79:30">=</operator> <name pos:start="79:32" pos:end="79:36">haddr</name></expr>;</expr_stmt>

	<expr_stmt pos:start="81:9" pos:end="81:30"><expr pos:start="81:9" pos:end="81:29"><name pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:12">addr</name><operator pos:start="81:13" pos:end="81:13">.</operator><name pos:start="81:14" pos:end="81:21">sin_port</name></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <name pos:start="81:25" pos:end="81:29">hport</name></expr>;</expr_stmt>



	<if_stmt pos:start="85:9" pos:end="115:9"><if pos:start="85:9" pos:end="115:9">if <condition pos:start="85:12" pos:end="91:30">(<expr pos:start="85:13" pos:end="91:29"><operator pos:start="85:13" pos:end="85:13">(</operator><operator pos:start="85:14" pos:end="85:14">(</operator><name pos:start="85:15" pos:end="85:15">s</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="85:47"><name pos:start="85:19" pos:end="85:24">socket</name><argument_list pos:start="85:25" pos:end="85:47">(<argument pos:start="85:26" pos:end="85:32"><expr pos:start="85:26" pos:end="85:32"><name pos:start="85:26" pos:end="85:32">AF_INET</name></expr></argument>,<argument pos:start="85:34" pos:end="85:44"><expr pos:start="85:34" pos:end="85:44"><name pos:start="85:34" pos:end="85:44">SOCK_STREAM</name></expr></argument>,<argument pos:start="85:46" pos:end="85:46"><expr pos:start="85:46" pos:end="85:46"><literal type="number" pos:start="85:46" pos:end="85:46">0</literal></expr></argument>)</argument_list></call><operator pos:start="85:48" pos:end="85:48">)</operator> <operator pos:start="85:50" pos:end="85:50">&lt;</operator> <literal type="number" pos:start="85:52" pos:end="85:52">0</literal><operator pos:start="85:53" pos:end="85:53">)</operator> <operator pos:start="85:55" pos:end="85:56">||</operator>

	    <operator pos:start="87:13" pos:end="87:13">(</operator><call pos:start="87:14" pos:end="87:75"><name pos:start="87:14" pos:end="87:23">setsockopt</name><argument_list pos:start="87:24" pos:end="87:75">(<argument pos:start="87:25" pos:end="87:25"><expr pos:start="87:25" pos:end="87:25"><name pos:start="87:25" pos:end="87:25">s</name></expr></argument>,<argument pos:start="87:27" pos:end="87:36"><expr pos:start="87:27" pos:end="87:36"><name pos:start="87:27" pos:end="87:36">SOL_SOCKET</name></expr></argument>,<argument pos:start="87:38" pos:end="87:49"><expr pos:start="87:38" pos:end="87:49"><name pos:start="87:38" pos:end="87:49">SO_REUSEADDR</name></expr></argument>,<argument pos:start="87:51" pos:end="87:62"><expr pos:start="87:51" pos:end="87:62"><operator pos:start="87:51" pos:end="87:51">(</operator><name pos:start="87:52" pos:end="87:55">char</name> <operator pos:start="87:57" pos:end="87:57">*</operator><operator pos:start="87:58" pos:end="87:58">)</operator><operator pos:start="87:59" pos:end="87:59">&amp;</operator><name pos:start="87:60" pos:end="87:62">opt</name></expr></argument>,<argument pos:start="87:64" pos:end="87:74"><expr pos:start="87:64" pos:end="87:74"><sizeof pos:start="87:64" pos:end="87:74">sizeof<argument_list pos:start="87:70" pos:end="87:74">(<argument pos:start="87:71" pos:end="87:73"><expr pos:start="87:71" pos:end="87:73"><name pos:start="87:71" pos:end="87:73">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="87:77" pos:end="87:77">&lt;</operator> <literal type="number" pos:start="87:79" pos:end="87:79">0</literal><operator pos:start="87:80" pos:end="87:80">)</operator> <operator pos:start="87:82" pos:end="87:83">||</operator>

	    <operator pos:start="89:13" pos:end="89:13">(</operator><call pos:start="89:14" pos:end="89:59"><name pos:start="89:14" pos:end="89:17">bind</name><argument_list pos:start="89:18" pos:end="89:59">(<argument pos:start="89:19" pos:end="89:19"><expr pos:start="89:19" pos:end="89:19"><name pos:start="89:19" pos:end="89:19">s</name></expr></argument>,<argument pos:start="89:21" pos:end="89:44"><expr pos:start="89:21" pos:end="89:44"><operator pos:start="89:21" pos:end="89:21">(</operator>struct <name pos:start="89:29" pos:end="89:36">sockaddr</name> <operator pos:start="89:38" pos:end="89:38">*</operator><operator pos:start="89:39" pos:end="89:39">)</operator><operator pos:start="89:40" pos:end="89:40">&amp;</operator><name pos:start="89:41" pos:end="89:44">addr</name></expr></argument>, <argument pos:start="89:47" pos:end="89:58"><expr pos:start="89:47" pos:end="89:58"><sizeof pos:start="89:47" pos:end="89:58">sizeof<argument_list pos:start="89:53" pos:end="89:58">(<argument pos:start="89:54" pos:end="89:57"><expr pos:start="89:54" pos:end="89:57"><name pos:start="89:54" pos:end="89:57">addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="89:61" pos:end="89:61">&lt;</operator> <literal type="number" pos:start="89:63" pos:end="89:63">0</literal><operator pos:start="89:64" pos:end="89:64">)</operator> <operator pos:start="89:66" pos:end="89:67">||</operator>

	    <operator pos:start="91:13" pos:end="91:13">(</operator><call pos:start="91:14" pos:end="91:24"><name pos:start="91:14" pos:end="91:19">listen</name><argument_list pos:start="91:20" pos:end="91:24">(<argument pos:start="91:21" pos:end="91:21"><expr pos:start="91:21" pos:end="91:21"><name pos:start="91:21" pos:end="91:21">s</name></expr></argument>,<argument pos:start="91:23" pos:end="91:23"><expr pos:start="91:23" pos:end="91:23"><literal type="number" pos:start="91:23" pos:end="91:23">1</literal></expr></argument>)</argument_list></call> <operator pos:start="91:26" pos:end="91:26">&lt;</operator> <literal type="number" pos:start="91:28" pos:end="91:28">0</literal><operator pos:start="91:29" pos:end="91:29">)</operator></expr>)</condition> <block pos:start="91:32" pos:end="115:9">{<block_content pos:start="93:17" pos:end="113:28">

		<decl_stmt pos:start="93:17" pos:end="93:37"><decl pos:start="93:17" pos:end="93:36"><type pos:start="93:17" pos:end="93:19"><name pos:start="93:17" pos:end="93:19">int</name></type> <name pos:start="93:21" pos:end="93:28">tmperrno</name> <init pos:start="93:30" pos:end="93:36">= <expr pos:start="93:32" pos:end="93:36"><name pos:start="93:32" pos:end="93:36">errno</name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="93:39" pos:end="93:83">/* Don't clobber the real reason we failed */</comment>



		<expr_stmt pos:start="97:17" pos:end="97:25"><expr pos:start="97:17" pos:end="97:24"><call pos:start="97:17" pos:end="97:24"><name pos:start="97:17" pos:end="97:21">close</name><argument_list pos:start="97:22" pos:end="97:24">(<argument pos:start="97:23" pos:end="97:23"><expr pos:start="97:23" pos:end="97:23"><name pos:start="97:23" pos:end="97:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="99:17" pos:end="104:0"><expr pos:start="99:17" pos:end="99:26"><call pos:start="99:17" pos:end="99:26"><name pos:start="99:17" pos:end="99:22">sofree</name><argument_list pos:start="99:23" pos:end="99:26">(<argument pos:start="99:24" pos:end="99:25"><expr pos:start="99:24" pos:end="99:25"><name pos:start="99:24" pos:end="99:25">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block" pos:start="101:17" pos:end="101:44">/* Restore the real errno */</comment>

<cpp:ifdef pos:start="103:1" pos:end="103:13">#<cpp:directive pos:start="103:2" pos:end="103:6">ifdef</cpp:directive> <name pos:start="103:8" pos:end="103:13">_WIN32</name></cpp:ifdef>

		<expr_stmt pos:start="105:17" pos:end="108:0"><expr pos:start="105:17" pos:end="105:41"><call pos:start="105:17" pos:end="105:41"><name pos:start="105:17" pos:end="105:31">WSASetLastError</name><argument_list pos:start="105:32" pos:end="105:41">(<argument pos:start="105:33" pos:end="105:40"><expr pos:start="105:33" pos:end="105:40"><name pos:start="105:33" pos:end="105:40">tmperrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="107:1" pos:end="107:5">#<cpp:directive pos:start="107:2" pos:end="107:5">else</cpp:directive></cpp:else>

		<expr_stmt pos:start="109:17" pos:end="112:0"><expr pos:start="109:17" pos:end="109:32"><name pos:start="109:17" pos:end="109:21">errno</name> <operator pos:start="109:23" pos:end="109:23">=</operator> <name pos:start="109:25" pos:end="109:32">tmperrno</name></expr>;</expr_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

		<return pos:start="113:17" pos:end="113:28">return <expr pos:start="113:24" pos:end="113:27"><name pos:start="113:24" pos:end="113:27">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="117:9" pos:end="117:71"><expr pos:start="117:9" pos:end="117:70"><call pos:start="117:9" pos:end="117:70"><name pos:start="117:9" pos:end="117:18">setsockopt</name><argument_list pos:start="117:19" pos:end="117:70">(<argument pos:start="117:20" pos:end="117:20"><expr pos:start="117:20" pos:end="117:20"><name pos:start="117:20" pos:end="117:20">s</name></expr></argument>,<argument pos:start="117:22" pos:end="117:31"><expr pos:start="117:22" pos:end="117:31"><name pos:start="117:22" pos:end="117:31">SOL_SOCKET</name></expr></argument>,<argument pos:start="117:33" pos:end="117:44"><expr pos:start="117:33" pos:end="117:44"><name pos:start="117:33" pos:end="117:44">SO_OOBINLINE</name></expr></argument>,<argument pos:start="117:46" pos:end="117:57"><expr pos:start="117:46" pos:end="117:57"><operator pos:start="117:46" pos:end="117:46">(</operator><name pos:start="117:47" pos:end="117:50">char</name> <operator pos:start="117:52" pos:end="117:52">*</operator><operator pos:start="117:53" pos:end="117:53">)</operator><operator pos:start="117:54" pos:end="117:54">&amp;</operator><name pos:start="117:55" pos:end="117:57">opt</name></expr></argument>,<argument pos:start="117:59" pos:end="117:69"><expr pos:start="117:59" pos:end="117:69"><sizeof pos:start="117:59" pos:end="117:69">sizeof<argument_list pos:start="117:65" pos:end="117:69">(<argument pos:start="117:66" pos:end="117:68"><expr pos:start="117:66" pos:end="117:68"><name pos:start="117:66" pos:end="117:68">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="121:9" pos:end="121:57"><expr pos:start="121:9" pos:end="121:56"><call pos:start="121:9" pos:end="121:56"><name pos:start="121:9" pos:end="121:19">getsockname</name><argument_list pos:start="121:20" pos:end="121:56">(<argument pos:start="121:21" pos:end="121:21"><expr pos:start="121:21" pos:end="121:21"><name pos:start="121:21" pos:end="121:21">s</name></expr></argument>,<argument pos:start="121:23" pos:end="121:46"><expr pos:start="121:23" pos:end="121:46"><operator pos:start="121:23" pos:end="121:23">(</operator>struct <name pos:start="121:31" pos:end="121:38">sockaddr</name> <operator pos:start="121:40" pos:end="121:40">*</operator><operator pos:start="121:41" pos:end="121:41">)</operator><operator pos:start="121:42" pos:end="121:42">&amp;</operator><name pos:start="121:43" pos:end="121:46">addr</name></expr></argument>,<argument pos:start="121:48" pos:end="121:55"><expr pos:start="121:48" pos:end="121:55"><operator pos:start="121:48" pos:end="121:48">&amp;</operator><name pos:start="121:49" pos:end="121:55">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="123:9" pos:end="123:37"><expr pos:start="123:9" pos:end="123:36"><name pos:start="123:9" pos:end="123:20"><name pos:start="123:9" pos:end="123:10">so</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:20">so_fport</name></name> <operator pos:start="123:22" pos:end="123:22">=</operator> <name pos:start="123:24" pos:end="123:36"><name pos:start="123:24" pos:end="123:27">addr</name><operator pos:start="123:28" pos:end="123:28">.</operator><name pos:start="123:29" pos:end="123:36">sin_port</name></name></expr>;</expr_stmt>

	<if_stmt pos:start="125:9" pos:end="131:40"><if pos:start="125:9" pos:end="127:44">if <condition pos:start="125:12" pos:end="125:86">(<expr pos:start="125:13" pos:end="125:85"><name pos:start="125:13" pos:end="125:32"><name pos:start="125:13" pos:end="125:16">addr</name><operator pos:start="125:17" pos:end="125:17">.</operator><name pos:start="125:18" pos:end="125:25">sin_addr</name><operator pos:start="125:26" pos:end="125:26">.</operator><name pos:start="125:27" pos:end="125:32">s_addr</name></name> <operator pos:start="125:34" pos:end="125:35">==</operator> <literal type="number" pos:start="125:37" pos:end="125:37">0</literal> <operator pos:start="125:39" pos:end="125:40">||</operator> <name pos:start="125:42" pos:end="125:61"><name pos:start="125:42" pos:end="125:45">addr</name><operator pos:start="125:46" pos:end="125:46">.</operator><name pos:start="125:47" pos:end="125:54">sin_addr</name><operator pos:start="125:55" pos:end="125:55">.</operator><name pos:start="125:56" pos:end="125:61">s_addr</name></name> <operator pos:start="125:63" pos:end="125:64">==</operator> <name pos:start="125:66" pos:end="125:85"><name pos:start="125:66" pos:end="125:78">loopback_addr</name><operator pos:start="125:79" pos:end="125:79">.</operator><name pos:start="125:80" pos:end="125:85">s_addr</name></name></expr>)</condition><block type="pseudo" pos:start="127:12" pos:end="127:44"><block_content pos:start="127:12" pos:end="127:44">

	   <expr_stmt pos:start="127:12" pos:end="127:44"><expr pos:start="127:12" pos:end="127:43"><name pos:start="127:12" pos:end="127:23"><name pos:start="127:12" pos:end="127:13">so</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:23">so_faddr</name></name> <operator pos:start="127:25" pos:end="127:25">=</operator> <name pos:start="127:27" pos:end="127:43"><name pos:start="127:27" pos:end="127:31">slirp</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:43">vhost_addr</name></name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="129:9" pos:end="131:40">else<block type="pseudo" pos:start="131:12" pos:end="131:40"><block_content pos:start="131:12" pos:end="131:40">

	   <expr_stmt pos:start="131:12" pos:end="131:40"><expr pos:start="131:12" pos:end="131:39"><name pos:start="131:12" pos:end="131:23"><name pos:start="131:12" pos:end="131:13">so</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:23">so_faddr</name></name> <operator pos:start="131:25" pos:end="131:25">=</operator> <name pos:start="131:27" pos:end="131:39"><name pos:start="131:27" pos:end="131:30">addr</name><operator pos:start="131:31" pos:end="131:31">.</operator><name pos:start="131:32" pos:end="131:39">sin_addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<expr_stmt pos:start="135:9" pos:end="135:18"><expr pos:start="135:9" pos:end="135:17"><name pos:start="135:9" pos:end="135:13"><name pos:start="135:9" pos:end="135:10">so</name><operator pos:start="135:11" pos:end="135:12">-&gt;</operator><name pos:start="135:13" pos:end="135:13">s</name></name> <operator pos:start="135:15" pos:end="135:15">=</operator> <name pos:start="135:17" pos:end="135:17">s</name></expr>;</expr_stmt>

	<return pos:start="137:9" pos:end="137:18">return <expr pos:start="137:16" pos:end="137:17"><name pos:start="137:16" pos:end="137:17">so</name></expr>;</return>

</block_content>}</block>
</unit>
