<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17215.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:15">inet_listen</name><parameter_list pos:start="1:16" pos:end="3:60">(<parameter pos:start="1:17" pos:end="1:31"><decl pos:start="1:17" pos:end="1:31"><type pos:start="1:17" pos:end="1:31"><specifier pos:start="1:17" pos:end="1:21">const</specifier> <name pos:start="1:23" pos:end="1:26">char</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">str</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:43"><decl pos:start="1:34" pos:end="1:43"><type pos:start="1:34" pos:end="1:43"><name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">ostr</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:53"><decl pos:start="1:46" pos:end="1:53"><type pos:start="1:46" pos:end="1:53"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:53">olen</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:28"><decl pos:start="3:17" pos:end="3:28"><type pos:start="3:17" pos:end="3:28"><name pos:start="3:17" pos:end="3:19">int</name></type> <name pos:start="3:21" pos:end="3:28">socktype</name></decl></parameter>, <parameter pos:start="3:31" pos:end="3:45"><decl pos:start="3:31" pos:end="3:45"><type pos:start="3:31" pos:end="3:45"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:45">port_offset</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:59"><decl pos:start="3:48" pos:end="3:59"><type pos:start="3:48" pos:end="3:59"><name pos:start="3:48" pos:end="3:52">Error</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier><modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:59">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:16">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">QemuOpts</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:16">optstr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">sock</name> <init pos:start="11:14" pos:end="11:17">= <expr pos:start="11:16" pos:end="11:17"><operator pos:start="11:16" pos:end="11:16">-</operator><literal type="number" pos:start="11:17" pos:end="11:17">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:50"><expr pos:start="15:5" pos:end="15:49"><name pos:start="15:5" pos:end="15:8">opts</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <call pos:start="15:12" pos:end="15:49"><name pos:start="15:12" pos:end="15:27">qemu_opts_create</name><argument_list pos:start="15:28" pos:end="15:49">(<argument pos:start="15:29" pos:end="15:39"><expr pos:start="15:29" pos:end="15:39"><operator pos:start="15:29" pos:end="15:29">&amp;</operator><name pos:start="15:30" pos:end="15:39">dummy_opts</name></expr></argument>, <argument pos:start="15:42" pos:end="15:45"><expr pos:start="15:42" pos:end="15:45"><name pos:start="15:42" pos:end="15:45">NULL</name></expr></argument>, <argument pos:start="15:48" pos:end="15:48"><expr pos:start="15:48" pos:end="15:48"><literal type="number" pos:start="15:48" pos:end="15:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="53:5"><if pos:start="17:5" pos:end="49:5">if <condition pos:start="17:8" pos:end="17:35">(<expr pos:start="17:9" pos:end="17:34"><call pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:18">inet_parse</name><argument_list pos:start="17:19" pos:end="17:29">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">opts</name></expr></argument>, <argument pos:start="17:26" pos:end="17:28"><expr pos:start="17:26" pos:end="17:28"><name pos:start="17:26" pos:end="17:28">str</name></expr></argument>)</argument_list></call> <operator pos:start="17:31" pos:end="17:32">==</operator> <literal type="number" pos:start="17:34" pos:end="17:34">0</literal></expr>)</condition> <block pos:start="17:37" pos:end="49:5">{<block_content pos:start="19:9" pos:end="47:9">

        <expr_stmt pos:start="19:9" pos:end="19:57"><expr pos:start="19:9" pos:end="19:56"><name pos:start="19:9" pos:end="19:12">sock</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="19:56"><name pos:start="19:16" pos:end="19:31">inet_listen_opts</name><argument_list pos:start="19:32" pos:end="19:56">(<argument pos:start="19:33" pos:end="19:36"><expr pos:start="19:33" pos:end="19:36"><name pos:start="19:33" pos:end="19:36">opts</name></expr></argument>, <argument pos:start="19:39" pos:end="19:49"><expr pos:start="19:39" pos:end="19:49"><name pos:start="19:39" pos:end="19:49">port_offset</name></expr></argument>, <argument pos:start="19:52" pos:end="19:55"><expr pos:start="19:52" pos:end="19:55"><name pos:start="19:52" pos:end="19:55">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="47:9"><if pos:start="21:9" pos:end="47:9">if <condition pos:start="21:12" pos:end="21:31">(<expr pos:start="21:13" pos:end="21:30"><name pos:start="21:13" pos:end="21:16">sock</name> <operator pos:start="21:18" pos:end="21:19">!=</operator> <operator pos:start="21:21" pos:end="21:21">-</operator><literal type="number" pos:start="21:22" pos:end="21:22">1</literal> <operator pos:start="21:24" pos:end="21:25">&amp;&amp;</operator> <name pos:start="21:27" pos:end="21:30">ostr</name></expr>)</condition> <block pos:start="21:33" pos:end="47:9">{<block_content pos:start="23:13" pos:end="45:13">

            <expr_stmt pos:start="23:13" pos:end="23:38"><expr pos:start="23:13" pos:end="23:37"><name pos:start="23:13" pos:end="23:18">optstr</name> <operator pos:start="23:20" pos:end="23:20">=</operator> <call pos:start="23:22" pos:end="23:37"><name pos:start="23:22" pos:end="23:27">strchr</name><argument_list pos:start="23:28" pos:end="23:37">(<argument pos:start="23:29" pos:end="23:31"><expr pos:start="23:29" pos:end="23:31"><name pos:start="23:29" pos:end="23:31">str</name></expr></argument>, <argument pos:start="23:34" pos:end="23:36"><expr pos:start="23:34" pos:end="23:36"><literal type="char" pos:start="23:34" pos:end="23:36">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="25:13" pos:end="45:13"><if pos:start="25:13" pos:end="35:13">if <condition pos:start="25:16" pos:end="25:51">(<expr pos:start="25:17" pos:end="25:50"><call pos:start="25:17" pos:end="25:50"><name pos:start="25:17" pos:end="25:33">qemu_opt_get_bool</name><argument_list pos:start="25:34" pos:end="25:50">(<argument pos:start="25:35" pos:end="25:38"><expr pos:start="25:35" pos:end="25:38"><name pos:start="25:35" pos:end="25:38">opts</name></expr></argument>, <argument pos:start="25:41" pos:end="25:46"><expr pos:start="25:41" pos:end="25:46"><literal type="string" pos:start="25:41" pos:end="25:46">"ipv6"</literal></expr></argument>, <argument pos:start="25:49" pos:end="25:49"><expr pos:start="25:49" pos:end="25:49"><literal type="number" pos:start="25:49" pos:end="25:49">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:53" pos:end="35:13">{<block_content pos:start="27:17" pos:end="33:47">

                <expr_stmt pos:start="27:17" pos:end="33:47"><expr pos:start="27:17" pos:end="33:46"><call pos:start="27:17" pos:end="33:46"><name pos:start="27:17" pos:end="27:24">snprintf</name><argument_list pos:start="27:25" pos:end="33:46">(<argument pos:start="27:26" pos:end="27:29"><expr pos:start="27:26" pos:end="27:29"><name pos:start="27:26" pos:end="27:29">ostr</name></expr></argument>, <argument pos:start="27:32" pos:end="27:35"><expr pos:start="27:32" pos:end="27:35"><name pos:start="27:32" pos:end="27:35">olen</name></expr></argument>, <argument pos:start="27:38" pos:end="27:48"><expr pos:start="27:38" pos:end="27:48"><literal type="string" pos:start="27:38" pos:end="27:48">"[%s]:%s%s"</literal></expr></argument>,

                         <argument pos:start="29:26" pos:end="29:51"><expr pos:start="29:26" pos:end="29:51"><call pos:start="29:26" pos:end="29:51"><name pos:start="29:26" pos:end="29:37">qemu_opt_get</name><argument_list pos:start="29:38" pos:end="29:51">(<argument pos:start="29:39" pos:end="29:42"><expr pos:start="29:39" pos:end="29:42"><name pos:start="29:39" pos:end="29:42">opts</name></expr></argument>, <argument pos:start="29:45" pos:end="29:50"><expr pos:start="29:45" pos:end="29:50"><literal type="string" pos:start="29:45" pos:end="29:50">"host"</literal></expr></argument>)</argument_list></call></expr></argument>,

                         <argument pos:start="31:26" pos:end="31:51"><expr pos:start="31:26" pos:end="31:51"><call pos:start="31:26" pos:end="31:51"><name pos:start="31:26" pos:end="31:37">qemu_opt_get</name><argument_list pos:start="31:38" pos:end="31:51">(<argument pos:start="31:39" pos:end="31:42"><expr pos:start="31:39" pos:end="31:42"><name pos:start="31:39" pos:end="31:42">opts</name></expr></argument>, <argument pos:start="31:45" pos:end="31:50"><expr pos:start="31:45" pos:end="31:50"><literal type="string" pos:start="31:45" pos:end="31:50">"port"</literal></expr></argument>)</argument_list></call></expr></argument>,

                         <argument pos:start="33:26" pos:end="33:45"><expr pos:start="33:26" pos:end="33:45"><ternary pos:start="33:26" pos:end="33:45"><condition pos:start="33:26" pos:end="33:33"><expr pos:start="33:26" pos:end="33:31"><name pos:start="33:26" pos:end="33:31">optstr</name></expr> ?</condition><then pos:start="33:35" pos:end="33:40"> <expr pos:start="33:35" pos:end="33:40"><name pos:start="33:35" pos:end="33:40">optstr</name></expr> </then><else pos:start="33:42" pos:end="33:45">: <expr pos:start="33:44" pos:end="33:45"><literal type="string" pos:start="33:44" pos:end="33:45">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="35:15" pos:end="45:13">else <block pos:start="35:20" pos:end="45:13">{<block_content pos:start="37:17" pos:end="43:47">

                <expr_stmt pos:start="37:17" pos:end="43:47"><expr pos:start="37:17" pos:end="43:46"><call pos:start="37:17" pos:end="43:46"><name pos:start="37:17" pos:end="37:24">snprintf</name><argument_list pos:start="37:25" pos:end="43:46">(<argument pos:start="37:26" pos:end="37:29"><expr pos:start="37:26" pos:end="37:29"><name pos:start="37:26" pos:end="37:29">ostr</name></expr></argument>, <argument pos:start="37:32" pos:end="37:35"><expr pos:start="37:32" pos:end="37:35"><name pos:start="37:32" pos:end="37:35">olen</name></expr></argument>, <argument pos:start="37:38" pos:end="37:46"><expr pos:start="37:38" pos:end="37:46"><literal type="string" pos:start="37:38" pos:end="37:46">"%s:%s%s"</literal></expr></argument>,

                         <argument pos:start="39:26" pos:end="39:51"><expr pos:start="39:26" pos:end="39:51"><call pos:start="39:26" pos:end="39:51"><name pos:start="39:26" pos:end="39:37">qemu_opt_get</name><argument_list pos:start="39:38" pos:end="39:51">(<argument pos:start="39:39" pos:end="39:42"><expr pos:start="39:39" pos:end="39:42"><name pos:start="39:39" pos:end="39:42">opts</name></expr></argument>, <argument pos:start="39:45" pos:end="39:50"><expr pos:start="39:45" pos:end="39:50"><literal type="string" pos:start="39:45" pos:end="39:50">"host"</literal></expr></argument>)</argument_list></call></expr></argument>,

                         <argument pos:start="41:26" pos:end="41:51"><expr pos:start="41:26" pos:end="41:51"><call pos:start="41:26" pos:end="41:51"><name pos:start="41:26" pos:end="41:37">qemu_opt_get</name><argument_list pos:start="41:38" pos:end="41:51">(<argument pos:start="41:39" pos:end="41:42"><expr pos:start="41:39" pos:end="41:42"><name pos:start="41:39" pos:end="41:42">opts</name></expr></argument>, <argument pos:start="41:45" pos:end="41:50"><expr pos:start="41:45" pos:end="41:50"><literal type="string" pos:start="41:45" pos:end="41:50">"port"</literal></expr></argument>)</argument_list></call></expr></argument>,

                         <argument pos:start="43:26" pos:end="43:45"><expr pos:start="43:26" pos:end="43:45"><ternary pos:start="43:26" pos:end="43:45"><condition pos:start="43:26" pos:end="43:33"><expr pos:start="43:26" pos:end="43:31"><name pos:start="43:26" pos:end="43:31">optstr</name></expr> ?</condition><then pos:start="43:35" pos:end="43:40"> <expr pos:start="43:35" pos:end="43:40"><name pos:start="43:35" pos:end="43:40">optstr</name></expr> </then><else pos:start="43:42" pos:end="43:45">: <expr pos:start="43:44" pos:end="43:45"><literal type="string" pos:start="43:44" pos:end="43:45">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="53:5">else <block pos:start="49:12" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:51">

        <expr_stmt pos:start="51:9" pos:end="51:51"><expr pos:start="51:9" pos:end="51:50"><call pos:start="51:9" pos:end="51:50"><name pos:start="51:9" pos:end="51:17">error_set</name><argument_list pos:start="51:18" pos:end="51:50">(<argument pos:start="51:19" pos:end="51:22"><expr pos:start="51:19" pos:end="51:22"><name pos:start="51:19" pos:end="51:22">errp</name></expr></argument>, <argument pos:start="51:25" pos:end="51:49"><expr pos:start="51:25" pos:end="51:49"><name pos:start="51:25" pos:end="51:49">QERR_SOCKET_CREATE_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:24"><expr pos:start="55:5" pos:end="55:23"><call pos:start="55:5" pos:end="55:23"><name pos:start="55:5" pos:end="55:17">qemu_opts_del</name><argument_list pos:start="55:18" pos:end="55:23">(<argument pos:start="55:19" pos:end="55:22"><expr pos:start="55:19" pos:end="55:22"><name pos:start="55:19" pos:end="55:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="57:5" pos:end="57:16">return <expr pos:start="57:12" pos:end="57:15"><name pos:start="57:12" pos:end="57:15">sock</name></expr>;</return>

</block_content>}</block></function>
</unit>
