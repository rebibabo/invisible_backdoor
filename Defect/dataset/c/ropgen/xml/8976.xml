<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8976.c" pos:tabs="8"><function pos:start="1:1" pos:end="277:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">MPV_encode_picture</name><parameter_list pos:start="1:23" pos:end="3:68">(<parameter pos:start="1:24" pos:end="1:44"><decl pos:start="1:24" pos:end="1:44"><type pos:start="1:24" pos:end="1:44"><name pos:start="1:24" pos:end="1:37">AVCodecContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:44">avctx</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:41"><decl pos:start="3:24" pos:end="3:41"><type pos:start="3:24" pos:end="3:41"><name pos:start="3:24" pos:end="3:31">unsigned</name> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:41">buf</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:55"><decl pos:start="3:44" pos:end="3:55"><type pos:start="3:44" pos:end="3:55"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:55">buf_size</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:67"><decl pos:start="3:58" pos:end="3:67"><type pos:start="3:58" pos:end="3:67"><name pos:start="3:58" pos:end="3:61">void</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:67">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="277:1">{<block_content pos:start="7:5" pos:end="275:27">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MpegEncContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:29">avctx</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:20">pic_arg</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:25">stuffing_count</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="31:5">for<control pos:start="15:8" pos:end="15:40">(<init pos:start="15:9" pos:end="15:12"><expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:9">i</name><operator pos:start="15:10" pos:end="15:10">=</operator><literal type="number" pos:start="15:11" pos:end="15:11">0</literal></expr>;</init> <condition pos:start="15:14" pos:end="15:35"><expr pos:start="15:14" pos:end="15:34"><name pos:start="15:14" pos:end="15:14">i</name><operator pos:start="15:15" pos:end="15:15">&lt;</operator><name pos:start="15:16" pos:end="15:34"><name pos:start="15:16" pos:end="15:20">avctx</name><operator pos:start="15:21" pos:end="15:22">-&gt;</operator><name pos:start="15:23" pos:end="15:34">thread_count</name></name></expr>;</condition> <incr pos:start="15:37" pos:end="15:39"><expr pos:start="15:37" pos:end="15:39"><name pos:start="15:37" pos:end="15:37">i</name><operator pos:start="15:38" pos:end="15:39">++</operator></expr></incr>)</control><block pos:start="15:41" pos:end="31:5">{<block_content pos:start="17:9" pos:end="29:69">

        <decl_stmt pos:start="17:9" pos:end="17:54"><decl pos:start="17:9" pos:end="17:53"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:19">start_y</name><init pos:start="17:20" pos:end="17:53">= <expr pos:start="17:22" pos:end="17:53"><name pos:start="17:22" pos:end="17:41"><name pos:start="17:22" pos:end="17:22">s</name><operator pos:start="17:23" pos:end="17:24">-&gt;</operator><name pos:start="17:25" pos:end="17:38">thread_context</name><index pos:start="17:39" pos:end="17:41">[<expr pos:start="17:40" pos:end="17:40"><name pos:start="17:40" pos:end="17:40">i</name></expr>]</index></name><operator pos:start="17:42" pos:end="17:43">-&gt;</operator><name pos:start="17:44" pos:end="17:53">start_mb_y</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:54"><decl pos:start="19:9" pos:end="19:53"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type>   <name pos:start="19:15" pos:end="19:19">end_y</name><init pos:start="19:20" pos:end="19:53">= <expr pos:start="19:22" pos:end="19:53"><name pos:start="19:22" pos:end="19:41"><name pos:start="19:22" pos:end="19:22">s</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:38">thread_context</name><index pos:start="19:39" pos:end="19:41">[<expr pos:start="19:40" pos:end="19:40"><name pos:start="19:40" pos:end="19:40">i</name></expr>]</index></name><operator pos:start="19:42" pos:end="19:43">-&gt;</operator>  <name pos:start="19:46" pos:end="19:53">end_mb_y</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:28"><decl pos:start="21:9" pos:end="21:27"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:13">h</name><init pos:start="21:14" pos:end="21:27">= <expr pos:start="21:16" pos:end="21:27"><name pos:start="21:16" pos:end="21:27"><name pos:start="21:16" pos:end="21:16">s</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:27">mb_height</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:71"><decl pos:start="23:9" pos:end="23:70"><type pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:15">uint8_t</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:22">start</name><init pos:start="23:23" pos:end="23:70">= <expr pos:start="23:25" pos:end="23:70"><name pos:start="23:25" pos:end="23:27">buf</name> <operator pos:start="23:29" pos:end="23:29">+</operator> <operator pos:start="23:31" pos:end="23:31">(</operator><name pos:start="23:32" pos:end="23:37">size_t</name><operator pos:start="23:38" pos:end="23:38">)</operator><operator pos:start="23:39" pos:end="23:39">(</operator><operator pos:start="23:40" pos:end="23:40">(</operator><operator pos:start="23:41" pos:end="23:41">(</operator><name pos:start="23:42" pos:end="23:48">int64_t</name><operator pos:start="23:49" pos:end="23:49">)</operator> <name pos:start="23:51" pos:end="23:58">buf_size</name><operator pos:start="23:59" pos:end="23:59">)</operator><operator pos:start="23:60" pos:end="23:60">*</operator><name pos:start="23:61" pos:end="23:67">start_y</name><operator pos:start="23:68" pos:end="23:68">/</operator><name pos:start="23:69" pos:end="23:69">h</name><operator pos:start="23:70" pos:end="23:70">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:71"><decl pos:start="25:9" pos:end="25:70"><type pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:15">uint8_t</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:20">end</name>  <init pos:start="25:23" pos:end="25:70">= <expr pos:start="25:25" pos:end="25:70"><name pos:start="25:25" pos:end="25:27">buf</name> <operator pos:start="25:29" pos:end="25:29">+</operator> <operator pos:start="25:31" pos:end="25:31">(</operator><name pos:start="25:32" pos:end="25:37">size_t</name><operator pos:start="25:38" pos:end="25:38">)</operator><operator pos:start="25:39" pos:end="25:39">(</operator><operator pos:start="25:40" pos:end="25:40">(</operator><operator pos:start="25:41" pos:end="25:41">(</operator><name pos:start="25:42" pos:end="25:48">int64_t</name><operator pos:start="25:49" pos:end="25:49">)</operator> <name pos:start="25:51" pos:end="25:58">buf_size</name><operator pos:start="25:59" pos:end="25:59">)</operator><operator pos:start="25:60" pos:end="25:60">*</operator>  <name pos:start="25:63" pos:end="25:67">end_y</name><operator pos:start="25:68" pos:end="25:68">/</operator><name pos:start="25:69" pos:end="25:69">h</name><operator pos:start="25:70" pos:end="25:70">)</operator></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:69"><expr pos:start="29:9" pos:end="29:68"><call pos:start="29:9" pos:end="29:68"><name pos:start="29:9" pos:end="29:21">init_put_bits</name><argument_list pos:start="29:22" pos:end="29:68">(<argument pos:start="29:23" pos:end="29:47"><expr pos:start="29:23" pos:end="29:47"><operator pos:start="29:23" pos:end="29:23">&amp;</operator><name pos:start="29:24" pos:end="29:43"><name pos:start="29:24" pos:end="29:24">s</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:40">thread_context</name><index pos:start="29:41" pos:end="29:43">[<expr pos:start="29:42" pos:end="29:42"><name pos:start="29:42" pos:end="29:42">i</name></expr>]</index></name><operator pos:start="29:44" pos:end="29:45">-&gt;</operator><name pos:start="29:46" pos:end="29:47">pb</name></expr></argument>, <argument pos:start="29:50" pos:end="29:54"><expr pos:start="29:50" pos:end="29:54"><name pos:start="29:50" pos:end="29:54">start</name></expr></argument>, <argument pos:start="29:57" pos:end="29:67"><expr pos:start="29:57" pos:end="29:67"><name pos:start="29:57" pos:end="29:59">end</name> <operator pos:start="29:61" pos:end="29:61">-</operator> <name pos:start="29:63" pos:end="29:67">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:28">picture_in_gop_number</name></name><operator pos:start="35:29" pos:end="35:30">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="41:18"><if pos:start="39:5" pos:end="41:18">if<condition pos:start="39:7" pos:end="39:42">(<expr pos:start="39:8" pos:end="39:41"><call pos:start="39:8" pos:end="39:37"><name pos:start="39:8" pos:end="39:25">load_input_picture</name><argument_list pos:start="39:26" pos:end="39:37">(<argument pos:start="39:27" pos:end="39:27"><expr pos:start="39:27" pos:end="39:27"><name pos:start="39:27" pos:end="39:27">s</name></expr></argument>, <argument pos:start="39:30" pos:end="39:36"><expr pos:start="39:30" pos:end="39:36"><name pos:start="39:30" pos:end="39:36">pic_arg</name></expr></argument>)</argument_list></call> <operator pos:start="39:39" pos:end="39:39">&lt;</operator> <literal type="number" pos:start="39:41" pos:end="39:41">0</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:18"><block_content pos:start="41:9" pos:end="41:18">

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><call pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:24">select_input_picture</name><argument_list pos:start="45:25" pos:end="45:27">(<argument pos:start="45:26" pos:end="45:26"><expr pos:start="45:26" pos:end="45:26"><name pos:start="45:26" pos:end="45:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:17">/* output? */</comment>

    <if_stmt pos:start="51:5" pos:end="269:5"><if pos:start="51:5" pos:end="263:5">if<condition pos:start="51:7" pos:end="51:30">(<expr pos:start="51:8" pos:end="51:29"><name pos:start="51:8" pos:end="51:29"><name pos:start="51:8" pos:end="51:8">s</name><operator pos:start="51:9" pos:end="51:10">-&gt;</operator><name pos:start="51:11" pos:end="51:21">new_picture</name><operator pos:start="51:22" pos:end="51:22">.</operator><name pos:start="51:23" pos:end="51:26">data</name><index pos:start="51:27" pos:end="51:29">[<expr pos:start="51:28" pos:end="51:28"><literal type="number" pos:start="51:28" pos:end="51:28">0</literal></expr>]</index></name></expr>)</condition><block pos:start="51:31" pos:end="263:5">{<block_content pos:start="53:9" pos:end="261:43">

        <expr_stmt pos:start="53:9" pos:end="53:47"><expr pos:start="53:9" pos:end="53:46"><name pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:20">pict_type</name></name><operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:46"><name pos:start="53:23" pos:end="53:23">s</name><operator pos:start="53:24" pos:end="53:25">-&gt;</operator><name pos:start="53:26" pos:end="53:36">new_picture</name><operator pos:start="53:37" pos:end="53:37">.</operator><name pos:start="53:38" pos:end="53:46">pict_type</name></name></expr>;</expr_stmt>

<comment type="line" pos:start="55:1" pos:end="55:11">//emms_c();</comment>

<comment type="line" pos:start="57:1" pos:end="57:89">//printf("qs:%f %f %d\n", s-&gt;new_picture.quality, s-&gt;current_picture.quality, s-&gt;qscale);</comment>

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><call pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:23">MPV_frame_start</name><argument_list pos:start="59:24" pos:end="59:33">(<argument pos:start="59:25" pos:end="59:25"><expr pos:start="59:25" pos:end="59:25"><name pos:start="59:25" pos:end="59:25">s</name></expr></argument>, <argument pos:start="59:28" pos:end="59:32"><expr pos:start="59:28" pos:end="59:32"><name pos:start="59:28" pos:end="59:32">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="61:1" pos:end="61:10"><name pos:start="61:1" pos:end="61:9">vbv_retry</name>:</label>

        <if_stmt pos:start="63:9" pos:end="65:22"><if pos:start="63:9" pos:end="65:22">if <condition pos:start="63:12" pos:end="63:53">(<expr pos:start="63:13" pos:end="63:52"><call pos:start="63:13" pos:end="63:48"><name pos:start="63:13" pos:end="63:26">encode_picture</name><argument_list pos:start="63:27" pos:end="63:48">(<argument pos:start="63:28" pos:end="63:28"><expr pos:start="63:28" pos:end="63:28"><name pos:start="63:28" pos:end="63:28">s</name></expr></argument>, <argument pos:start="63:31" pos:end="63:47"><expr pos:start="63:31" pos:end="63:47"><name pos:start="63:31" pos:end="63:47"><name pos:start="63:31" pos:end="63:31">s</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:47">picture_number</name></name></expr></argument>)</argument_list></call> <operator pos:start="63:50" pos:end="63:50">&lt;</operator> <literal type="number" pos:start="63:52" pos:end="63:52">0</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:22"><block_content pos:start="65:13" pos:end="65:22">

            <return pos:start="65:13" pos:end="65:22">return <expr pos:start="65:20" pos:end="65:21"><operator pos:start="65:20" pos:end="65:20">-</operator><literal type="number" pos:start="65:21" pos:end="65:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:50"><expr pos:start="69:9" pos:end="69:49"><name pos:start="69:9" pos:end="69:28"><name pos:start="69:9" pos:end="69:13">avctx</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:28">real_pict_num</name></name>  <operator pos:start="69:31" pos:end="69:31">=</operator> <name pos:start="69:33" pos:end="69:49"><name pos:start="69:33" pos:end="69:33">s</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:49">picture_number</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:44"><expr pos:start="71:9" pos:end="71:43"><name pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:13">avctx</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:26">header_bits</name></name> <operator pos:start="71:28" pos:end="71:28">=</operator> <name pos:start="71:30" pos:end="71:43"><name pos:start="71:30" pos:end="71:30">s</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:43">header_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:40"><expr pos:start="73:9" pos:end="73:39"><name pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:13">avctx</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:22">mv_bits</name></name>     <operator pos:start="73:28" pos:end="73:28">=</operator> <name pos:start="73:30" pos:end="73:39"><name pos:start="73:30" pos:end="73:30">s</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:39">mv_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:42"><expr pos:start="75:9" pos:end="75:41"><name pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:13">avctx</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:24">misc_bits</name></name>   <operator pos:start="75:28" pos:end="75:28">=</operator> <name pos:start="75:30" pos:end="75:41"><name pos:start="75:30" pos:end="75:30">s</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:41">misc_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:43"><expr pos:start="77:9" pos:end="77:42"><name pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:13">avctx</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:25">i_tex_bits</name></name>  <operator pos:start="77:28" pos:end="77:28">=</operator> <name pos:start="77:30" pos:end="77:42"><name pos:start="77:30" pos:end="77:30">s</name><operator pos:start="77:31" pos:end="77:32">-&gt;</operator><name pos:start="77:33" pos:end="77:42">i_tex_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:43"><expr pos:start="79:9" pos:end="79:42"><name pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:13">avctx</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:25">p_tex_bits</name></name>  <operator pos:start="79:28" pos:end="79:28">=</operator> <name pos:start="79:30" pos:end="79:42"><name pos:start="79:30" pos:end="79:30">s</name><operator pos:start="79:31" pos:end="79:32">-&gt;</operator><name pos:start="79:33" pos:end="79:42">p_tex_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:40"><expr pos:start="81:9" pos:end="81:39"><name pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:13">avctx</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:22">i_count</name></name>     <operator pos:start="81:28" pos:end="81:28">=</operator> <name pos:start="81:30" pos:end="81:39"><name pos:start="81:30" pos:end="81:30">s</name><operator pos:start="81:31" pos:end="81:32">-&gt;</operator><name pos:start="81:33" pos:end="81:39">i_count</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:68"><expr pos:start="83:9" pos:end="83:67"><name pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:13">avctx</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:22">p_count</name></name>     <operator pos:start="83:28" pos:end="83:28">=</operator> <name pos:start="83:30" pos:end="83:38"><name pos:start="83:30" pos:end="83:30">s</name><operator pos:start="83:31" pos:end="83:32">-&gt;</operator><name pos:start="83:33" pos:end="83:38">mb_num</name></name> <operator pos:start="83:40" pos:end="83:40">-</operator> <name pos:start="83:42" pos:end="83:51"><name pos:start="83:42" pos:end="83:42">s</name><operator pos:start="83:43" pos:end="83:44">-&gt;</operator><name pos:start="83:45" pos:end="83:51">i_count</name></name> <operator pos:start="83:53" pos:end="83:53">-</operator> <name pos:start="83:55" pos:end="83:67"><name pos:start="83:55" pos:end="83:55">s</name><operator pos:start="83:56" pos:end="83:57">-&gt;</operator><name pos:start="83:58" pos:end="83:67">skip_count</name></name></expr>;</expr_stmt> <comment type="line" pos:start="83:70" pos:end="83:95">//FIXME f/b_count in avctx</comment>

        <expr_stmt pos:start="85:9" pos:end="85:43"><expr pos:start="85:9" pos:end="85:42"><name pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:13">avctx</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:25">skip_count</name></name>  <operator pos:start="85:28" pos:end="85:28">=</operator> <name pos:start="85:30" pos:end="85:42"><name pos:start="85:30" pos:end="85:30">s</name><operator pos:start="85:31" pos:end="85:32">-&gt;</operator><name pos:start="85:33" pos:end="85:42">skip_count</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:25"><expr pos:start="89:9" pos:end="89:24"><call pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:21">MPV_frame_end</name><argument_list pos:start="89:22" pos:end="89:24">(<argument pos:start="89:23" pos:end="89:23"><expr pos:start="89:23" pos:end="89:23"><name pos:start="89:23" pos:end="89:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="93:9" pos:end="95:37"><if pos:start="93:9" pos:end="95:37">if <condition pos:start="93:12" pos:end="93:39">(<expr pos:start="93:13" pos:end="93:38"><name pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:25">out_format</name></name> <operator pos:start="93:27" pos:end="93:28">==</operator> <name pos:start="93:30" pos:end="93:38">FMT_MJPEG</name></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:37"><block_content pos:start="95:13" pos:end="95:37">

            <expr_stmt pos:start="95:13" pos:end="95:37"><expr pos:start="95:13" pos:end="95:36"><call pos:start="95:13" pos:end="95:36"><name pos:start="95:13" pos:end="95:33">mjpeg_picture_trailer</name><argument_list pos:start="95:34" pos:end="95:36">(<argument pos:start="95:35" pos:end="95:35"><expr pos:start="95:35" pos:end="95:35"><name pos:start="95:35" pos:end="95:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="99:9" pos:end="139:9"><if pos:start="99:9" pos:end="139:9">if<condition pos:start="99:11" pos:end="99:33">(<expr pos:start="99:12" pos:end="99:32"><name pos:start="99:12" pos:end="99:32"><name pos:start="99:12" pos:end="99:16">avctx</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:32">rc_buffer_size</name></name></expr>)</condition><block pos:start="99:34" pos:end="139:9">{<block_content pos:start="101:13" pos:end="137:42">

            <decl_stmt pos:start="101:13" pos:end="101:52"><decl pos:start="101:13" pos:end="101:51"><type pos:start="101:13" pos:end="101:32"><name pos:start="101:13" pos:end="101:30">RateControlContext</name> <modifier pos:start="101:32" pos:end="101:32">*</modifier></type><name pos:start="101:33" pos:end="101:35">rcc</name><init pos:start="101:36" pos:end="101:51">= <expr pos:start="101:38" pos:end="101:51"><operator pos:start="101:38" pos:end="101:38">&amp;</operator><name pos:start="101:39" pos:end="101:51"><name pos:start="101:39" pos:end="101:39">s</name><operator pos:start="101:40" pos:end="101:41">-&gt;</operator><name pos:start="101:42" pos:end="101:51">rc_context</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="103:13" pos:end="103:46"><decl pos:start="103:13" pos:end="103:45"><type pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">int</name></type> <name pos:start="103:17" pos:end="103:24">max_size</name><init pos:start="103:25" pos:end="103:45">= <expr pos:start="103:27" pos:end="103:45"><name pos:start="103:27" pos:end="103:43"><name pos:start="103:27" pos:end="103:29">rcc</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:43">buffer_index</name></name><operator pos:start="103:44" pos:end="103:44">/</operator><literal type="number" pos:start="103:45" pos:end="103:45">3</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="107:13" pos:end="133:13"><if pos:start="107:13" pos:end="133:13">if<condition pos:start="107:15" pos:end="107:79">(<expr pos:start="107:16" pos:end="107:78"><call pos:start="107:16" pos:end="107:37"><name pos:start="107:16" pos:end="107:29">put_bits_count</name><argument_list pos:start="107:30" pos:end="107:37">(<argument pos:start="107:31" pos:end="107:36"><expr pos:start="107:31" pos:end="107:36"><operator pos:start="107:31" pos:end="107:31">&amp;</operator><name pos:start="107:32" pos:end="107:36"><name pos:start="107:32" pos:end="107:32">s</name><operator pos:start="107:33" pos:end="107:34">-&gt;</operator><name pos:start="107:35" pos:end="107:36">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="107:39" pos:end="107:39">&gt;</operator> <name pos:start="107:41" pos:end="107:48">max_size</name> <operator pos:start="107:50" pos:end="107:51">&amp;&amp;</operator> <name pos:start="107:53" pos:end="107:61"><name pos:start="107:53" pos:end="107:53">s</name><operator pos:start="107:54" pos:end="107:55">-&gt;</operator><name pos:start="107:56" pos:end="107:61">qscale</name></name> <operator pos:start="107:63" pos:end="107:63">&lt;</operator> <name pos:start="107:65" pos:end="107:78"><name pos:start="107:65" pos:end="107:65">s</name><operator pos:start="107:66" pos:end="107:67">-&gt;</operator><name pos:start="107:68" pos:end="107:72">avctx</name><operator pos:start="107:73" pos:end="107:74">-&gt;</operator><name pos:start="107:75" pos:end="107:78">qmax</name></name></expr>)</condition><block pos:start="107:80" pos:end="133:13">{<block_content pos:start="109:17" pos:end="131:31">

                <expr_stmt pos:start="109:17" pos:end="109:68"><expr pos:start="109:17" pos:end="109:67"><name pos:start="109:17" pos:end="109:30"><name pos:start="109:17" pos:end="109:17">s</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:30">next_lambda</name></name><operator pos:start="109:31" pos:end="109:31">=</operator> <name pos:start="109:33" pos:end="109:41"><name pos:start="109:33" pos:end="109:33">s</name><operator pos:start="109:34" pos:end="109:35">-&gt;</operator><name pos:start="109:36" pos:end="109:41">lambda</name></name><operator pos:start="109:42" pos:end="109:42">*</operator><operator pos:start="109:43" pos:end="109:43">(</operator><name pos:start="109:44" pos:end="109:52"><name pos:start="109:44" pos:end="109:44">s</name><operator pos:start="109:45" pos:end="109:46">-&gt;</operator><name pos:start="109:47" pos:end="109:52">qscale</name></name><operator pos:start="109:53" pos:end="109:53">+</operator><literal type="number" pos:start="109:54" pos:end="109:54">1</literal><operator pos:start="109:55" pos:end="109:55">)</operator> <operator pos:start="109:57" pos:end="109:57">/</operator> <name pos:start="109:59" pos:end="109:67"><name pos:start="109:59" pos:end="109:59">s</name><operator pos:start="109:60" pos:end="109:61">-&gt;</operator><name pos:start="109:62" pos:end="109:67">qscale</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:34"><expr pos:start="111:17" pos:end="111:33"><name pos:start="111:17" pos:end="111:29"><name pos:start="111:17" pos:end="111:17">s</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:29">mb_skipped</name></name> <operator pos:start="111:31" pos:end="111:31">=</operator> <literal type="number" pos:start="111:33" pos:end="111:33">0</literal></expr>;</expr_stmt>        <comment type="line" pos:start="111:43" pos:end="111:69">//done in MPV_frame_start()</comment>

                <if_stmt pos:start="113:17" pos:end="119:17"><if pos:start="113:17" pos:end="119:17">if<condition pos:start="113:19" pos:end="113:40">(<expr pos:start="113:20" pos:end="113:39"><name pos:start="113:20" pos:end="113:31"><name pos:start="113:20" pos:end="113:20">s</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:31">pict_type</name></name><operator pos:start="113:32" pos:end="113:33">==</operator><name pos:start="113:34" pos:end="113:39">P_TYPE</name></expr>)</condition><block pos:start="113:41" pos:end="119:17">{<block_content pos:start="115:21" pos:end="117:44"> <comment type="line" pos:start="113:43" pos:end="113:87">//done in encode_picture() so we must undo it</comment>

                    <if_stmt pos:start="115:21" pos:end="117:44"><if pos:start="115:21" pos:end="117:44">if<condition pos:start="115:23" pos:end="115:110">(<expr pos:start="115:24" pos:end="115:109"><name pos:start="115:24" pos:end="115:43"><name pos:start="115:24" pos:end="115:24">s</name><operator pos:start="115:25" pos:end="115:26">-&gt;</operator><name pos:start="115:27" pos:end="115:43">flipflop_rounding</name></name> <operator pos:start="115:45" pos:end="115:46">||</operator> <name pos:start="115:48" pos:end="115:58"><name pos:start="115:48" pos:end="115:48">s</name><operator pos:start="115:49" pos:end="115:50">-&gt;</operator><name pos:start="115:51" pos:end="115:58">codec_id</name></name> <operator pos:start="115:60" pos:end="115:61">==</operator> <name pos:start="115:63" pos:end="115:76">CODEC_ID_H263P</name> <operator pos:start="115:78" pos:end="115:79">||</operator> <name pos:start="115:81" pos:end="115:91"><name pos:start="115:81" pos:end="115:81">s</name><operator pos:start="115:82" pos:end="115:83">-&gt;</operator><name pos:start="115:84" pos:end="115:91">codec_id</name></name> <operator pos:start="115:93" pos:end="115:94">==</operator> <name pos:start="115:96" pos:end="115:109">CODEC_ID_MPEG4</name></expr>)</condition><block type="pseudo" pos:start="117:25" pos:end="117:44"><block_content pos:start="117:25" pos:end="117:44">

                        <expr_stmt pos:start="117:25" pos:end="117:44"><expr pos:start="117:25" pos:end="117:43"><name pos:start="117:25" pos:end="117:38"><name pos:start="117:25" pos:end="117:25">s</name><operator pos:start="117:26" pos:end="117:27">-&gt;</operator><name pos:start="117:28" pos:end="117:38">no_rounding</name></name> <operator pos:start="117:40" pos:end="117:41">^=</operator> <literal type="number" pos:start="117:43" pos:end="117:43">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

<comment type="line" pos:start="121:1" pos:end="121:70">//                av_log(NULL, AV_LOG_ERROR, "R:%d ", s-&gt;next_lambda);</comment>

                <for pos:start="123:17" pos:end="129:17">for<control pos:start="123:20" pos:end="123:52">(<init pos:start="123:21" pos:end="123:24"><expr pos:start="123:21" pos:end="123:23"><name pos:start="123:21" pos:end="123:21">i</name><operator pos:start="123:22" pos:end="123:22">=</operator><literal type="number" pos:start="123:23" pos:end="123:23">0</literal></expr>;</init> <condition pos:start="123:26" pos:end="123:47"><expr pos:start="123:26" pos:end="123:46"><name pos:start="123:26" pos:end="123:26">i</name><operator pos:start="123:27" pos:end="123:27">&lt;</operator><name pos:start="123:28" pos:end="123:46"><name pos:start="123:28" pos:end="123:32">avctx</name><operator pos:start="123:33" pos:end="123:34">-&gt;</operator><name pos:start="123:35" pos:end="123:46">thread_count</name></name></expr>;</condition> <incr pos:start="123:49" pos:end="123:51"><expr pos:start="123:49" pos:end="123:51"><name pos:start="123:49" pos:end="123:49">i</name><operator pos:start="123:50" pos:end="123:51">++</operator></expr></incr>)</control><block pos:start="123:53" pos:end="129:17">{<block_content pos:start="125:21" pos:end="127:70">

                    <decl_stmt pos:start="125:21" pos:end="125:65"><decl pos:start="125:21" pos:end="125:64"><type pos:start="125:21" pos:end="125:35"><name pos:start="125:21" pos:end="125:33">PutBitContext</name> <modifier pos:start="125:35" pos:end="125:35">*</modifier></type><name pos:start="125:36" pos:end="125:37">pb</name><init pos:start="125:38" pos:end="125:64">= <expr pos:start="125:40" pos:end="125:64"><operator pos:start="125:40" pos:end="125:40">&amp;</operator><name pos:start="125:41" pos:end="125:60"><name pos:start="125:41" pos:end="125:41">s</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:57">thread_context</name><index pos:start="125:58" pos:end="125:60">[<expr pos:start="125:59" pos:end="125:59"><name pos:start="125:59" pos:end="125:59">i</name></expr>]</index></name><operator pos:start="125:61" pos:end="125:62">-&gt;</operator><name pos:start="125:63" pos:end="125:64">pb</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="127:21" pos:end="127:70"><expr pos:start="127:21" pos:end="127:69"><call pos:start="127:21" pos:end="127:69"><name pos:start="127:21" pos:end="127:33">init_put_bits</name><argument_list pos:start="127:34" pos:end="127:69">(<argument pos:start="127:35" pos:end="127:36"><expr pos:start="127:35" pos:end="127:36"><name pos:start="127:35" pos:end="127:36">pb</name></expr></argument>, <argument pos:start="127:39" pos:end="127:45"><expr pos:start="127:39" pos:end="127:45"><name pos:start="127:39" pos:end="127:45"><name pos:start="127:39" pos:end="127:40">pb</name><operator pos:start="127:41" pos:end="127:42">-&gt;</operator><name pos:start="127:43" pos:end="127:45">buf</name></name></expr></argument>, <argument pos:start="127:48" pos:end="127:68"><expr pos:start="127:48" pos:end="127:68"><name pos:start="127:48" pos:end="127:58"><name pos:start="127:48" pos:end="127:49">pb</name><operator pos:start="127:50" pos:end="127:51">-&gt;</operator><name pos:start="127:52" pos:end="127:58">buf_end</name></name> <operator pos:start="127:60" pos:end="127:60">-</operator> <name pos:start="127:62" pos:end="127:68"><name pos:start="127:62" pos:end="127:63">pb</name><operator pos:start="127:64" pos:end="127:65">-&gt;</operator><name pos:start="127:66" pos:end="127:68">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <goto pos:start="131:17" pos:end="131:31">goto <name pos:start="131:22" pos:end="131:30">vbv_retry</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="137:13" pos:end="137:42"><expr pos:start="137:13" pos:end="137:41"><call pos:start="137:13" pos:end="137:41"><name pos:start="137:13" pos:end="137:18">assert</name><argument_list pos:start="137:19" pos:end="137:41">(<argument pos:start="137:20" pos:end="137:40"><expr pos:start="137:20" pos:end="137:40"><name pos:start="137:20" pos:end="137:40"><name pos:start="137:20" pos:end="137:20">s</name><operator pos:start="137:21" pos:end="137:22">-&gt;</operator><name pos:start="137:23" pos:end="137:27">avctx</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:40">rc_max_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="143:9" pos:end="145:36"><if pos:start="143:9" pos:end="145:36">if<condition pos:start="143:11" pos:end="143:37">(<expr pos:start="143:12" pos:end="143:36"><name pos:start="143:12" pos:end="143:19"><name pos:start="143:12" pos:end="143:12">s</name><operator pos:start="143:13" pos:end="143:14">-&gt;</operator><name pos:start="143:15" pos:end="143:19">flags</name></name><operator pos:start="143:20" pos:end="143:20">&amp;</operator><name pos:start="143:21" pos:end="143:36">CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:36"><block_content pos:start="145:13" pos:end="145:36">

            <expr_stmt pos:start="145:13" pos:end="145:36"><expr pos:start="145:13" pos:end="145:35"><call pos:start="145:13" pos:end="145:35"><name pos:start="145:13" pos:end="145:32">ff_write_pass1_stats</name><argument_list pos:start="145:33" pos:end="145:35">(<argument pos:start="145:34" pos:end="145:34"><expr pos:start="145:34" pos:end="145:34"><name pos:start="145:34" pos:end="145:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="149:9" pos:end="155:9">for<control pos:start="149:12" pos:end="149:26">(<init pos:start="149:13" pos:end="149:16"><expr pos:start="149:13" pos:end="149:15"><name pos:start="149:13" pos:end="149:13">i</name><operator pos:start="149:14" pos:end="149:14">=</operator><literal type="number" pos:start="149:15" pos:end="149:15">0</literal></expr>;</init> <condition pos:start="149:18" pos:end="149:21"><expr pos:start="149:18" pos:end="149:20"><name pos:start="149:18" pos:end="149:18">i</name><operator pos:start="149:19" pos:end="149:19">&lt;</operator><literal type="number" pos:start="149:20" pos:end="149:20">4</literal></expr>;</condition> <incr pos:start="149:23" pos:end="149:25"><expr pos:start="149:23" pos:end="149:25"><name pos:start="149:23" pos:end="149:23">i</name><operator pos:start="149:24" pos:end="149:25">++</operator></expr></incr>)</control><block pos:start="149:27" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:64">

            <expr_stmt pos:start="151:13" pos:end="151:74"><expr pos:start="151:13" pos:end="151:73"><name pos:start="151:13" pos:end="151:44"><name pos:start="151:13" pos:end="151:13">s</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:34">current_picture_ptr</name><operator pos:start="151:35" pos:end="151:36">-&gt;</operator><name pos:start="151:37" pos:end="151:41">error</name><index pos:start="151:42" pos:end="151:44">[<expr pos:start="151:43" pos:end="151:43"><name pos:start="151:43" pos:end="151:43">i</name></expr>]</index></name><operator pos:start="151:45" pos:end="151:45">=</operator> <name pos:start="151:47" pos:end="151:73"><name pos:start="151:47" pos:end="151:47">s</name><operator pos:start="151:48" pos:end="151:49">-&gt;</operator><name pos:start="151:50" pos:end="151:64">current_picture</name><operator pos:start="151:65" pos:end="151:65">.</operator><name pos:start="151:66" pos:end="151:70">error</name><index pos:start="151:71" pos:end="151:73">[<expr pos:start="151:72" pos:end="151:72"><name pos:start="151:72" pos:end="151:72">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:64"><expr pos:start="153:13" pos:end="153:63"><name pos:start="153:13" pos:end="153:27"><name pos:start="153:13" pos:end="153:17">avctx</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:24">error</name><index pos:start="153:25" pos:end="153:27">[<expr pos:start="153:26" pos:end="153:26"><name pos:start="153:26" pos:end="153:26">i</name></expr>]</index></name> <operator pos:start="153:29" pos:end="153:30">+=</operator> <name pos:start="153:32" pos:end="153:63"><name pos:start="153:32" pos:end="153:32">s</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:53">current_picture_ptr</name><operator pos:start="153:54" pos:end="153:55">-&gt;</operator><name pos:start="153:56" pos:end="153:60">error</name><index pos:start="153:61" pos:end="153:63">[<expr pos:start="153:62" pos:end="153:62"><name pos:start="153:62" pos:end="153:62">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="159:9" pos:end="161:141"><if pos:start="159:9" pos:end="161:141">if<condition pos:start="159:11" pos:end="159:37">(<expr pos:start="159:12" pos:end="159:36"><name pos:start="159:12" pos:end="159:19"><name pos:start="159:12" pos:end="159:12">s</name><operator pos:start="159:13" pos:end="159:14">-&gt;</operator><name pos:start="159:15" pos:end="159:19">flags</name></name><operator pos:start="159:20" pos:end="159:20">&amp;</operator><name pos:start="159:21" pos:end="159:36">CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:141"><block_content pos:start="161:13" pos:end="161:141">

            <expr_stmt pos:start="161:13" pos:end="161:141"><expr pos:start="161:13" pos:end="161:140"><call pos:start="161:13" pos:end="161:140"><name pos:start="161:13" pos:end="161:18">assert</name><argument_list pos:start="161:19" pos:end="161:140">(<argument pos:start="161:20" pos:end="161:139"><expr pos:start="161:20" pos:end="161:139"><name pos:start="161:20" pos:end="161:37"><name pos:start="161:20" pos:end="161:24">avctx</name><operator pos:start="161:25" pos:end="161:26">-&gt;</operator><name pos:start="161:27" pos:end="161:37">header_bits</name></name> <operator pos:start="161:39" pos:end="161:39">+</operator> <name pos:start="161:41" pos:end="161:54"><name pos:start="161:41" pos:end="161:45">avctx</name><operator pos:start="161:46" pos:end="161:47">-&gt;</operator><name pos:start="161:48" pos:end="161:54">mv_bits</name></name> <operator pos:start="161:56" pos:end="161:56">+</operator> <name pos:start="161:58" pos:end="161:73"><name pos:start="161:58" pos:end="161:62">avctx</name><operator pos:start="161:63" pos:end="161:64">-&gt;</operator><name pos:start="161:65" pos:end="161:73">misc_bits</name></name> <operator pos:start="161:75" pos:end="161:75">+</operator> <name pos:start="161:77" pos:end="161:93"><name pos:start="161:77" pos:end="161:81">avctx</name><operator pos:start="161:82" pos:end="161:83">-&gt;</operator><name pos:start="161:84" pos:end="161:93">i_tex_bits</name></name> <operator pos:start="161:95" pos:end="161:95">+</operator> <name pos:start="161:97" pos:end="161:113"><name pos:start="161:97" pos:end="161:101">avctx</name><operator pos:start="161:102" pos:end="161:103">-&gt;</operator><name pos:start="161:104" pos:end="161:113">p_tex_bits</name></name> <operator pos:start="161:115" pos:end="161:116">==</operator> <call pos:start="161:118" pos:end="161:139"><name pos:start="161:118" pos:end="161:131">put_bits_count</name><argument_list pos:start="161:132" pos:end="161:139">(<argument pos:start="161:133" pos:end="161:138"><expr pos:start="161:133" pos:end="161:138"><operator pos:start="161:133" pos:end="161:133">&amp;</operator><name pos:start="161:134" pos:end="161:138"><name pos:start="161:134" pos:end="161:134">s</name><operator pos:start="161:135" pos:end="161:136">-&gt;</operator><name pos:start="161:137" pos:end="161:138">pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:31"><expr pos:start="163:9" pos:end="163:30"><call pos:start="163:9" pos:end="163:30"><name pos:start="163:9" pos:end="163:22">flush_put_bits</name><argument_list pos:start="163:23" pos:end="163:30">(<argument pos:start="163:24" pos:end="163:29"><expr pos:start="163:24" pos:end="163:29"><operator pos:start="163:24" pos:end="163:24">&amp;</operator><name pos:start="163:25" pos:end="163:29"><name pos:start="163:25" pos:end="163:25">s</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:29">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:48"><expr pos:start="165:9" pos:end="165:47"><name pos:start="165:9" pos:end="165:21"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:21">frame_bits</name></name>  <operator pos:start="165:24" pos:end="165:24">=</operator> <call pos:start="165:26" pos:end="165:47"><name pos:start="165:26" pos:end="165:39">put_bits_count</name><argument_list pos:start="165:40" pos:end="165:47">(<argument pos:start="165:41" pos:end="165:46"><expr pos:start="165:41" pos:end="165:46"><operator pos:start="165:41" pos:end="165:41">&amp;</operator><name pos:start="165:42" pos:end="165:46"><name pos:start="165:42" pos:end="165:42">s</name><operator pos:start="165:43" pos:end="165:44">-&gt;</operator><name pos:start="165:45" pos:end="165:46">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:56"><expr pos:start="169:9" pos:end="169:55"><name pos:start="169:9" pos:end="169:22">stuffing_count</name><operator pos:start="169:23" pos:end="169:23">=</operator> <call pos:start="169:25" pos:end="169:55"><name pos:start="169:25" pos:end="169:37">ff_vbv_update</name><argument_list pos:start="169:38" pos:end="169:55">(<argument pos:start="169:39" pos:end="169:39"><expr pos:start="169:39" pos:end="169:39"><name pos:start="169:39" pos:end="169:39">s</name></expr></argument>, <argument pos:start="169:42" pos:end="169:54"><expr pos:start="169:42" pos:end="169:54"><name pos:start="169:42" pos:end="169:54"><name pos:start="169:42" pos:end="169:42">s</name><operator pos:start="169:43" pos:end="169:44">-&gt;</operator><name pos:start="169:45" pos:end="169:54">frame_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="223:9"><if pos:start="171:9" pos:end="223:9">if<condition pos:start="171:11" pos:end="171:26">(<expr pos:start="171:12" pos:end="171:25"><name pos:start="171:12" pos:end="171:25">stuffing_count</name></expr>)</condition><block pos:start="171:27" pos:end="223:9">{<block_content pos:start="173:13" pos:end="221:52">

            <if_stmt pos:start="173:13" pos:end="179:13"><if pos:start="173:13" pos:end="179:13">if<condition pos:start="173:15" pos:end="173:93">(<expr pos:start="173:16" pos:end="173:92"><name pos:start="173:16" pos:end="173:28"><name pos:start="173:16" pos:end="173:16">s</name><operator pos:start="173:17" pos:end="173:18">-&gt;</operator><name pos:start="173:19" pos:end="173:20">pb</name><operator pos:start="173:21" pos:end="173:21">.</operator><name pos:start="173:22" pos:end="173:28">buf_end</name></name> <operator pos:start="173:30" pos:end="173:30">-</operator> <name pos:start="173:32" pos:end="173:40"><name pos:start="173:32" pos:end="173:32">s</name><operator pos:start="173:33" pos:end="173:34">-&gt;</operator><name pos:start="173:35" pos:end="173:36">pb</name><operator pos:start="173:37" pos:end="173:37">.</operator><name pos:start="173:38" pos:end="173:40">buf</name></name> <operator pos:start="173:42" pos:end="173:42">-</operator> <operator pos:start="173:44" pos:end="173:44">(</operator><call pos:start="173:45" pos:end="173:66"><name pos:start="173:45" pos:end="173:58">put_bits_count</name><argument_list pos:start="173:59" pos:end="173:66">(<argument pos:start="173:60" pos:end="173:65"><expr pos:start="173:60" pos:end="173:65"><operator pos:start="173:60" pos:end="173:60">&amp;</operator><name pos:start="173:61" pos:end="173:65"><name pos:start="173:61" pos:end="173:61">s</name><operator pos:start="173:62" pos:end="173:63">-&gt;</operator><name pos:start="173:64" pos:end="173:65">pb</name></name></expr></argument>)</argument_list></call><operator pos:start="173:67" pos:end="173:68">&gt;&gt;</operator><literal type="number" pos:start="173:69" pos:end="173:69">3</literal><operator pos:start="173:70" pos:end="173:70">)</operator> <operator pos:start="173:72" pos:end="173:72">&lt;</operator> <name pos:start="173:74" pos:end="173:87">stuffing_count</name> <operator pos:start="173:89" pos:end="173:89">+</operator> <literal type="number" pos:start="173:91" pos:end="173:92">50</literal></expr>)</condition><block pos:start="173:94" pos:end="179:13">{<block_content pos:start="175:17" pos:end="177:26">

                <expr_stmt pos:start="175:17" pos:end="175:71"><expr pos:start="175:17" pos:end="175:70"><call pos:start="175:17" pos:end="175:70"><name pos:start="175:17" pos:end="175:22">av_log</name><argument_list pos:start="175:23" pos:end="175:70">(<argument pos:start="175:24" pos:end="175:31"><expr pos:start="175:24" pos:end="175:31"><name pos:start="175:24" pos:end="175:31"><name pos:start="175:24" pos:end="175:24">s</name><operator pos:start="175:25" pos:end="175:26">-&gt;</operator><name pos:start="175:27" pos:end="175:31">avctx</name></name></expr></argument>, <argument pos:start="175:34" pos:end="175:45"><expr pos:start="175:34" pos:end="175:45"><name pos:start="175:34" pos:end="175:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="175:48" pos:end="175:69"><expr pos:start="175:48" pos:end="175:69"><literal type="string" pos:start="175:48" pos:end="175:69">"stuffing too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="177:17" pos:end="177:26">return <expr pos:start="177:24" pos:end="177:25"><operator pos:start="177:24" pos:end="177:24">-</operator><literal type="number" pos:start="177:25" pos:end="177:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <switch pos:start="183:13" pos:end="217:13">switch<condition pos:start="183:19" pos:end="183:31">(<expr pos:start="183:20" pos:end="183:30"><name pos:start="183:20" pos:end="183:30"><name pos:start="183:20" pos:end="183:20">s</name><operator pos:start="183:21" pos:end="183:22">-&gt;</operator><name pos:start="183:23" pos:end="183:30">codec_id</name></name></expr>)</condition><block pos:start="183:32" pos:end="217:13">{<block_content pos:start="185:13" pos:end="215:72">

            <case pos:start="185:13" pos:end="185:37">case <expr pos:start="185:18" pos:end="185:36"><name pos:start="185:18" pos:end="185:36">CODEC_ID_MPEG1VIDEO</name></expr>:</case>

            <case pos:start="187:13" pos:end="187:37">case <expr pos:start="187:18" pos:end="187:36"><name pos:start="187:18" pos:end="187:36">CODEC_ID_MPEG2VIDEO</name></expr>:</case>

                <while pos:start="189:17" pos:end="193:17">while<condition pos:start="189:22" pos:end="189:39">(<expr pos:start="189:23" pos:end="189:38"><name pos:start="189:23" pos:end="189:36">stuffing_count</name><operator pos:start="189:37" pos:end="189:38">--</operator></expr>)</condition><block pos:start="189:40" pos:end="193:17">{<block_content pos:start="191:21" pos:end="191:43">

                    <expr_stmt pos:start="191:21" pos:end="191:43"><expr pos:start="191:21" pos:end="191:42"><call pos:start="191:21" pos:end="191:42"><name pos:start="191:21" pos:end="191:28">put_bits</name><argument_list pos:start="191:29" pos:end="191:42">(<argument pos:start="191:30" pos:end="191:35"><expr pos:start="191:30" pos:end="191:35"><operator pos:start="191:30" pos:end="191:30">&amp;</operator><name pos:start="191:31" pos:end="191:35"><name pos:start="191:31" pos:end="191:31">s</name><operator pos:start="191:32" pos:end="191:33">-&gt;</operator><name pos:start="191:34" pos:end="191:35">pb</name></name></expr></argument>, <argument pos:start="191:38" pos:end="191:38"><expr pos:start="191:38" pos:end="191:38"><literal type="number" pos:start="191:38" pos:end="191:38">8</literal></expr></argument>, <argument pos:start="191:41" pos:end="191:41"><expr pos:start="191:41" pos:end="191:41"><literal type="number" pos:start="191:41" pos:end="191:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></while>

            <break pos:start="195:13" pos:end="195:18">break;</break>

            <case pos:start="197:13" pos:end="197:32">case <expr pos:start="197:18" pos:end="197:31"><name pos:start="197:18" pos:end="197:31">CODEC_ID_MPEG4</name></expr>:</case>

                <expr_stmt pos:start="199:17" pos:end="199:40"><expr pos:start="199:17" pos:end="199:39"><call pos:start="199:17" pos:end="199:39"><name pos:start="199:17" pos:end="199:24">put_bits</name><argument_list pos:start="199:25" pos:end="199:39">(<argument pos:start="199:26" pos:end="199:31"><expr pos:start="199:26" pos:end="199:31"><operator pos:start="199:26" pos:end="199:26">&amp;</operator><name pos:start="199:27" pos:end="199:31"><name pos:start="199:27" pos:end="199:27">s</name><operator pos:start="199:28" pos:end="199:29">-&gt;</operator><name pos:start="199:30" pos:end="199:31">pb</name></name></expr></argument>, <argument pos:start="199:34" pos:end="199:35"><expr pos:start="199:34" pos:end="199:35"><literal type="number" pos:start="199:34" pos:end="199:35">16</literal></expr></argument>, <argument pos:start="199:38" pos:end="199:38"><expr pos:start="199:38" pos:end="199:38"><literal type="number" pos:start="199:38" pos:end="199:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:44"><expr pos:start="201:17" pos:end="201:43"><call pos:start="201:17" pos:end="201:43"><name pos:start="201:17" pos:end="201:24">put_bits</name><argument_list pos:start="201:25" pos:end="201:43">(<argument pos:start="201:26" pos:end="201:31"><expr pos:start="201:26" pos:end="201:31"><operator pos:start="201:26" pos:end="201:26">&amp;</operator><name pos:start="201:27" pos:end="201:31"><name pos:start="201:27" pos:end="201:27">s</name><operator pos:start="201:28" pos:end="201:29">-&gt;</operator><name pos:start="201:30" pos:end="201:31">pb</name></name></expr></argument>, <argument pos:start="201:34" pos:end="201:35"><expr pos:start="201:34" pos:end="201:35"><literal type="number" pos:start="201:34" pos:end="201:35">16</literal></expr></argument>, <argument pos:start="201:38" pos:end="201:42"><expr pos:start="201:38" pos:end="201:42"><literal type="number" pos:start="201:38" pos:end="201:42">0x1C3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:36"><expr pos:start="203:17" pos:end="203:35"><name pos:start="203:17" pos:end="203:30">stuffing_count</name> <operator pos:start="203:32" pos:end="203:33">-=</operator> <literal type="number" pos:start="203:35" pos:end="203:35">4</literal></expr>;</expr_stmt>

                <while pos:start="205:17" pos:end="209:17">while<condition pos:start="205:22" pos:end="205:39">(<expr pos:start="205:23" pos:end="205:38"><name pos:start="205:23" pos:end="205:36">stuffing_count</name><operator pos:start="205:37" pos:end="205:38">--</operator></expr>)</condition><block pos:start="205:40" pos:end="209:17">{<block_content pos:start="207:21" pos:end="207:46">

                    <expr_stmt pos:start="207:21" pos:end="207:46"><expr pos:start="207:21" pos:end="207:45"><call pos:start="207:21" pos:end="207:45"><name pos:start="207:21" pos:end="207:28">put_bits</name><argument_list pos:start="207:29" pos:end="207:45">(<argument pos:start="207:30" pos:end="207:35"><expr pos:start="207:30" pos:end="207:35"><operator pos:start="207:30" pos:end="207:30">&amp;</operator><name pos:start="207:31" pos:end="207:35"><name pos:start="207:31" pos:end="207:31">s</name><operator pos:start="207:32" pos:end="207:33">-&gt;</operator><name pos:start="207:34" pos:end="207:35">pb</name></name></expr></argument>, <argument pos:start="207:38" pos:end="207:38"><expr pos:start="207:38" pos:end="207:38"><literal type="number" pos:start="207:38" pos:end="207:38">8</literal></expr></argument>, <argument pos:start="207:41" pos:end="207:44"><expr pos:start="207:41" pos:end="207:44"><literal type="number" pos:start="207:41" pos:end="207:44">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></while>

            <break pos:start="211:13" pos:end="211:18">break;</break>

            <default pos:start="213:13" pos:end="213:20">default:</default>

                <expr_stmt pos:start="215:17" pos:end="215:72"><expr pos:start="215:17" pos:end="215:71"><call pos:start="215:17" pos:end="215:71"><name pos:start="215:17" pos:end="215:22">av_log</name><argument_list pos:start="215:23" pos:end="215:71">(<argument pos:start="215:24" pos:end="215:31"><expr pos:start="215:24" pos:end="215:31"><name pos:start="215:24" pos:end="215:31"><name pos:start="215:24" pos:end="215:24">s</name><operator pos:start="215:25" pos:end="215:26">-&gt;</operator><name pos:start="215:27" pos:end="215:31">avctx</name></name></expr></argument>, <argument pos:start="215:34" pos:end="215:45"><expr pos:start="215:34" pos:end="215:45"><name pos:start="215:34" pos:end="215:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="215:48" pos:end="215:70"><expr pos:start="215:48" pos:end="215:70"><literal type="string" pos:start="215:48" pos:end="215:70">"vbv buffer overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <expr_stmt pos:start="219:13" pos:end="219:35"><expr pos:start="219:13" pos:end="219:34"><call pos:start="219:13" pos:end="219:34"><name pos:start="219:13" pos:end="219:26">flush_put_bits</name><argument_list pos:start="219:27" pos:end="219:34">(<argument pos:start="219:28" pos:end="219:33"><expr pos:start="219:28" pos:end="219:33"><operator pos:start="219:28" pos:end="219:28">&amp;</operator><name pos:start="219:29" pos:end="219:33"><name pos:start="219:29" pos:end="219:29">s</name><operator pos:start="219:30" pos:end="219:31">-&gt;</operator><name pos:start="219:32" pos:end="219:33">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:52"><expr pos:start="221:13" pos:end="221:51"><name pos:start="221:13" pos:end="221:25"><name pos:start="221:13" pos:end="221:13">s</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:25">frame_bits</name></name>  <operator pos:start="221:28" pos:end="221:28">=</operator> <call pos:start="221:30" pos:end="221:51"><name pos:start="221:30" pos:end="221:43">put_bits_count</name><argument_list pos:start="221:44" pos:end="221:51">(<argument pos:start="221:45" pos:end="221:50"><expr pos:start="221:45" pos:end="221:50"><operator pos:start="221:45" pos:end="221:45">&amp;</operator><name pos:start="221:46" pos:end="221:50"><name pos:start="221:46" pos:end="221:46">s</name><operator pos:start="221:47" pos:end="221:48">-&gt;</operator><name pos:start="221:49" pos:end="221:50">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="227:9" pos:end="227:46">/* update mpeg1/2 vbv_delay for CBR */</comment>

        <if_stmt pos:start="229:9" pos:end="257:9"><if pos:start="229:9" pos:end="257:9">if<condition pos:start="229:11" pos:end="231:84">(<expr pos:start="229:12" pos:end="231:83"><name pos:start="229:12" pos:end="229:32"><name pos:start="229:12" pos:end="229:12">s</name><operator pos:start="229:13" pos:end="229:14">-&gt;</operator><name pos:start="229:15" pos:end="229:19">avctx</name><operator pos:start="229:20" pos:end="229:21">-&gt;</operator><name pos:start="229:22" pos:end="229:32">rc_max_rate</name></name> <operator pos:start="229:34" pos:end="229:35">&amp;&amp;</operator> <name pos:start="229:37" pos:end="229:57"><name pos:start="229:37" pos:end="229:37">s</name><operator pos:start="229:38" pos:end="229:39">-&gt;</operator><name pos:start="229:40" pos:end="229:44">avctx</name><operator pos:start="229:45" pos:end="229:46">-&gt;</operator><name pos:start="229:47" pos:end="229:57">rc_min_rate</name></name> <operator pos:start="229:59" pos:end="229:60">==</operator> <name pos:start="229:62" pos:end="229:82"><name pos:start="229:62" pos:end="229:62">s</name><operator pos:start="229:63" pos:end="229:64">-&gt;</operator><name pos:start="229:65" pos:end="229:69">avctx</name><operator pos:start="229:70" pos:end="229:71">-&gt;</operator><name pos:start="229:72" pos:end="229:82">rc_max_rate</name></name> <operator pos:start="229:84" pos:end="229:85">&amp;&amp;</operator> <name pos:start="229:87" pos:end="229:99"><name pos:start="229:87" pos:end="229:87">s</name><operator pos:start="229:88" pos:end="229:89">-&gt;</operator><name pos:start="229:90" pos:end="229:99">out_format</name></name> <operator pos:start="229:101" pos:end="229:102">==</operator> <name pos:start="229:104" pos:end="229:112">FMT_MPEG1</name>

           <operator pos:start="231:12" pos:end="231:13">&amp;&amp;</operator> <literal type="number" pos:start="231:15" pos:end="231:21">90000LL</literal> <operator pos:start="231:23" pos:end="231:23">*</operator> <operator pos:start="231:25" pos:end="231:25">(</operator><name pos:start="231:26" pos:end="231:46"><name pos:start="231:26" pos:end="231:30">avctx</name><operator pos:start="231:31" pos:end="231:32">-&gt;</operator><name pos:start="231:33" pos:end="231:46">rc_buffer_size</name></name><operator pos:start="231:47" pos:end="231:47">-</operator><literal type="number" pos:start="231:48" pos:end="231:48">1</literal><operator pos:start="231:49" pos:end="231:49">)</operator> <operator pos:start="231:51" pos:end="231:52">&lt;=</operator> <name pos:start="231:54" pos:end="231:74"><name pos:start="231:54" pos:end="231:54">s</name><operator pos:start="231:55" pos:end="231:56">-&gt;</operator><name pos:start="231:57" pos:end="231:61">avctx</name><operator pos:start="231:62" pos:end="231:63">-&gt;</operator><name pos:start="231:64" pos:end="231:74">rc_max_rate</name></name><operator pos:start="231:75" pos:end="231:75">*</operator><literal type="number" pos:start="231:76" pos:end="231:83">0xFFFFLL</literal></expr>)</condition><block pos:start="231:85" pos:end="257:9">{<block_content pos:start="233:13" pos:end="255:48">

            <decl_stmt pos:start="233:13" pos:end="233:26"><decl pos:start="233:13" pos:end="233:25"><type pos:start="233:13" pos:end="233:15"><name pos:start="233:13" pos:end="233:15">int</name></type> <name pos:start="233:17" pos:end="233:25">vbv_delay</name></decl>;</decl_stmt>



            <expr_stmt pos:start="237:13" pos:end="237:45"><expr pos:start="237:13" pos:end="237:44"><call pos:start="237:13" pos:end="237:44"><name pos:start="237:13" pos:end="237:18">assert</name><argument_list pos:start="237:19" pos:end="237:44">(<argument pos:start="237:20" pos:end="237:43"><expr pos:start="237:20" pos:end="237:43"><name pos:start="237:20" pos:end="237:40"><name pos:start="237:20" pos:end="237:20">s</name><operator pos:start="237:21" pos:end="237:22">-&gt;</operator><name pos:start="237:23" pos:end="237:40">repeat_first_field</name></name><operator pos:start="237:41" pos:end="237:42">==</operator><literal type="number" pos:start="237:43" pos:end="237:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="241:13" pos:end="241:90"><expr pos:start="241:13" pos:end="241:89"><name pos:start="241:13" pos:end="241:21">vbv_delay</name><operator pos:start="241:22" pos:end="241:22">=</operator> <call pos:start="241:24" pos:end="241:89"><name pos:start="241:24" pos:end="241:29">lrintf</name><argument_list pos:start="241:30" pos:end="241:89">(<argument pos:start="241:31" pos:end="241:88"><expr pos:start="241:31" pos:end="241:88"><literal type="number" pos:start="241:31" pos:end="241:35">90000</literal> <operator pos:start="241:37" pos:end="241:37">*</operator> <name pos:start="241:39" pos:end="241:64"><name pos:start="241:39" pos:end="241:39">s</name><operator pos:start="241:40" pos:end="241:41">-&gt;</operator><name pos:start="241:42" pos:end="241:51">rc_context</name><operator pos:start="241:52" pos:end="241:52">.</operator><name pos:start="241:53" pos:end="241:64">buffer_index</name></name> <operator pos:start="241:66" pos:end="241:66">/</operator> <name pos:start="241:68" pos:end="241:88"><name pos:start="241:68" pos:end="241:68">s</name><operator pos:start="241:69" pos:end="241:70">-&gt;</operator><name pos:start="241:71" pos:end="241:75">avctx</name><operator pos:start="241:76" pos:end="241:77">-&gt;</operator><name pos:start="241:78" pos:end="241:88">rc_max_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:39"><expr pos:start="243:13" pos:end="243:38"><call pos:start="243:13" pos:end="243:38"><name pos:start="243:13" pos:end="243:18">assert</name><argument_list pos:start="243:19" pos:end="243:38">(<argument pos:start="243:20" pos:end="243:37"><expr pos:start="243:20" pos:end="243:37"><name pos:start="243:20" pos:end="243:28">vbv_delay</name> <operator pos:start="243:30" pos:end="243:30">&lt;</operator> <literal type="number" pos:start="243:32" pos:end="243:37">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="247:13" pos:end="247:40"><expr pos:start="247:13" pos:end="247:39"><name pos:start="247:13" pos:end="247:31"><name pos:start="247:13" pos:end="247:13">s</name><operator pos:start="247:14" pos:end="247:15">-&gt;</operator><name pos:start="247:16" pos:end="247:28">vbv_delay_ptr</name><index pos:start="247:29" pos:end="247:31">[<expr pos:start="247:30" pos:end="247:30"><literal type="number" pos:start="247:30" pos:end="247:30">0</literal></expr>]</index></name> <operator pos:start="247:33" pos:end="247:34">&amp;=</operator> <literal type="number" pos:start="247:36" pos:end="247:39">0xF8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:49"><expr pos:start="249:13" pos:end="249:48"><name pos:start="249:13" pos:end="249:31"><name pos:start="249:13" pos:end="249:13">s</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:28">vbv_delay_ptr</name><index pos:start="249:29" pos:end="249:31">[<expr pos:start="249:30" pos:end="249:30"><literal type="number" pos:start="249:30" pos:end="249:30">0</literal></expr>]</index></name> <operator pos:start="249:33" pos:end="249:34">|=</operator> <name pos:start="249:36" pos:end="249:44">vbv_delay</name><operator pos:start="249:45" pos:end="249:46">&gt;&gt;</operator><literal type="number" pos:start="249:47" pos:end="249:48">13</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:48"><expr pos:start="251:13" pos:end="251:47"><name pos:start="251:13" pos:end="251:31"><name pos:start="251:13" pos:end="251:13">s</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:28">vbv_delay_ptr</name><index pos:start="251:29" pos:end="251:31">[<expr pos:start="251:30" pos:end="251:30"><literal type="number" pos:start="251:30" pos:end="251:30">1</literal></expr>]</index></name>  <operator pos:start="251:34" pos:end="251:34">=</operator> <name pos:start="251:36" pos:end="251:44">vbv_delay</name><operator pos:start="251:45" pos:end="251:46">&gt;&gt;</operator><literal type="number" pos:start="251:47" pos:end="251:47">5</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:40"><expr pos:start="253:13" pos:end="253:39"><name pos:start="253:13" pos:end="253:31"><name pos:start="253:13" pos:end="253:13">s</name><operator pos:start="253:14" pos:end="253:15">-&gt;</operator><name pos:start="253:16" pos:end="253:28">vbv_delay_ptr</name><index pos:start="253:29" pos:end="253:31">[<expr pos:start="253:30" pos:end="253:30"><literal type="number" pos:start="253:30" pos:end="253:30">2</literal></expr>]</index></name> <operator pos:start="253:33" pos:end="253:34">&amp;=</operator> <literal type="number" pos:start="253:36" pos:end="253:39">0x07</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:48"><expr pos:start="255:13" pos:end="255:47"><name pos:start="255:13" pos:end="255:31"><name pos:start="255:13" pos:end="255:13">s</name><operator pos:start="255:14" pos:end="255:15">-&gt;</operator><name pos:start="255:16" pos:end="255:28">vbv_delay_ptr</name><index pos:start="255:29" pos:end="255:31">[<expr pos:start="255:30" pos:end="255:30"><literal type="number" pos:start="255:30" pos:end="255:30">2</literal></expr>]</index></name> <operator pos:start="255:33" pos:end="255:34">|=</operator> <name pos:start="255:36" pos:end="255:44">vbv_delay</name><operator pos:start="255:45" pos:end="255:46">&lt;&lt;</operator><literal type="number" pos:start="255:47" pos:end="255:47">3</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:39"><expr pos:start="259:9" pos:end="259:38"><name pos:start="259:9" pos:end="259:21"><name pos:start="259:9" pos:end="259:9">s</name><operator pos:start="259:10" pos:end="259:11">-&gt;</operator><name pos:start="259:12" pos:end="259:21">total_bits</name></name> <operator pos:start="259:23" pos:end="259:24">+=</operator> <name pos:start="259:26" pos:end="259:38"><name pos:start="259:26" pos:end="259:26">s</name><operator pos:start="259:27" pos:end="259:28">-&gt;</operator><name pos:start="259:29" pos:end="259:38">frame_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:43"><expr pos:start="261:9" pos:end="261:42"><name pos:start="261:9" pos:end="261:25"><name pos:start="261:9" pos:end="261:13">avctx</name><operator pos:start="261:14" pos:end="261:15">-&gt;</operator><name pos:start="261:16" pos:end="261:25">frame_bits</name></name>  <operator pos:start="261:28" pos:end="261:28">=</operator> <name pos:start="261:30" pos:end="261:42"><name pos:start="261:30" pos:end="261:30">s</name><operator pos:start="261:31" pos:end="261:32">-&gt;</operator><name pos:start="261:33" pos:end="261:42">frame_bits</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="263:6" pos:end="269:5">else<block pos:start="263:10" pos:end="269:5">{<block_content pos:start="265:9" pos:end="267:24">

        <expr_stmt pos:start="265:9" pos:end="265:48"><expr pos:start="265:9" pos:end="265:47"><call pos:start="265:9" pos:end="265:47"><name pos:start="265:9" pos:end="265:14">assert</name><argument_list pos:start="265:15" pos:end="265:47">(<argument pos:start="265:16" pos:end="265:46"><expr pos:start="265:16" pos:end="265:46"><operator pos:start="265:16" pos:end="265:16">(</operator><call pos:start="265:17" pos:end="265:32"><name pos:start="265:17" pos:end="265:24">pbBufPtr</name><argument_list pos:start="265:25" pos:end="265:32">(<argument pos:start="265:26" pos:end="265:31"><expr pos:start="265:26" pos:end="265:31"><operator pos:start="265:26" pos:end="265:26">&amp;</operator><name pos:start="265:27" pos:end="265:31"><name pos:start="265:27" pos:end="265:27">s</name><operator pos:start="265:28" pos:end="265:29">-&gt;</operator><name pos:start="265:30" pos:end="265:31">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="265:34" pos:end="265:35">==</operator> <name pos:start="265:37" pos:end="265:45"><name pos:start="265:37" pos:end="265:37">s</name><operator pos:start="265:38" pos:end="265:39">-&gt;</operator><name pos:start="265:40" pos:end="265:41">pb</name><operator pos:start="265:42" pos:end="265:42">.</operator><name pos:start="265:43" pos:end="265:45">buf</name></name><operator pos:start="265:46" pos:end="265:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:24"><expr pos:start="267:9" pos:end="267:23"><name pos:start="267:9" pos:end="267:21"><name pos:start="267:9" pos:end="267:9">s</name><operator pos:start="267:10" pos:end="267:11">-&gt;</operator><name pos:start="267:12" pos:end="267:21">frame_bits</name></name><operator pos:start="267:22" pos:end="267:22">=</operator><literal type="number" pos:start="267:23" pos:end="267:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:33"><expr pos:start="271:5" pos:end="271:32"><call pos:start="271:5" pos:end="271:32"><name pos:start="271:5" pos:end="271:10">assert</name><argument_list pos:start="271:11" pos:end="271:32">(<argument pos:start="271:12" pos:end="271:31"><expr pos:start="271:12" pos:end="271:31"><operator pos:start="271:12" pos:end="271:12">(</operator><name pos:start="271:13" pos:end="271:25"><name pos:start="271:13" pos:end="271:13">s</name><operator pos:start="271:14" pos:end="271:15">-&gt;</operator><name pos:start="271:16" pos:end="271:25">frame_bits</name></name><operator pos:start="271:26" pos:end="271:26">&amp;</operator><literal type="number" pos:start="271:27" pos:end="271:27">7</literal><operator pos:start="271:28" pos:end="271:28">)</operator><operator pos:start="271:29" pos:end="271:30">==</operator><literal type="number" pos:start="271:31" pos:end="271:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="275:5" pos:end="275:27">return <expr pos:start="275:12" pos:end="275:26"><name pos:start="275:12" pos:end="275:24"><name pos:start="275:12" pos:end="275:12">s</name><operator pos:start="275:13" pos:end="275:14">-&gt;</operator><name pos:start="275:15" pos:end="275:24">frame_bits</name></name><operator pos:start="275:25" pos:end="275:25">/</operator><literal type="number" pos:start="275:26" pos:end="275:26">8</literal></expr>;</return>

</block_content>}</block></function>
</unit>
