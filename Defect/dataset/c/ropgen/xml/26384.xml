<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26384.c" pos:tabs="8"><function pos:start="1:1" pos:end="76:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">virtio_blk_rw_complete</name><parameter_list pos:start="1:35" pos:end="1:57">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">opaque</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:56"><decl pos:start="1:50" pos:end="1:56"><type pos:start="1:50" pos:end="1:56"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:56">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:51">{<block_content pos:start="5:5" pos:end="37:51">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">VirtIOBlockReq</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:24">next</name> <init pos:start="5:26" pos:end="5:33">= <expr pos:start="5:28" pos:end="5:33"><name pos:start="5:28" pos:end="5:33">opaque</name></expr></init></decl>;</decl_stmt>



    <while pos:start="9:5" pos:end="37:51">while <condition pos:start="9:11" pos:end="9:16">(<expr pos:start="9:12" pos:end="9:15"><name pos:start="9:12" pos:end="9:15">next</name></expr>)</condition> <block pos:start="9:18" pos:end="37:51">{<block_content pos:start="11:9" pos:end="37:51">

        <decl_stmt pos:start="11:9" pos:end="11:35"><decl pos:start="11:9" pos:end="11:34"><type pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:22">VirtIOBlockReq</name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:27">req</name> <init pos:start="11:29" pos:end="11:34">= <expr pos:start="11:31" pos:end="11:34"><name pos:start="11:31" pos:end="11:34">next</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="13:9" pos:end="13:28"><expr pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:12">next</name> <operator pos:start="13:14" pos:end="13:14">=</operator> <name pos:start="13:16" pos:end="13:27"><name pos:start="13:16" pos:end="13:18">req</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:27">mr_next</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:47"><expr pos:start="15:9" pos:end="15:46"><call pos:start="15:9" pos:end="15:46"><name pos:start="15:9" pos:end="15:36">trace_virtio_blk_rw_complete</name><argument_list pos:start="15:37" pos:end="15:46">(<argument pos:start="15:38" pos:end="15:40"><expr pos:start="15:38" pos:end="15:40"><name pos:start="15:38" pos:end="15:40">req</name></expr></argument>, <argument pos:start="15:43" pos:end="15:45"><expr pos:start="15:43" pos:end="15:45"><name pos:start="15:43" pos:end="15:45">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="19:9" pos:end="29:9"><if pos:start="19:9" pos:end="29:9">if <condition pos:start="19:12" pos:end="19:35">(<expr pos:start="19:13" pos:end="19:34"><name pos:start="19:13" pos:end="19:28"><name pos:start="19:13" pos:end="19:15">req</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:21">qiov</name><operator pos:start="19:22" pos:end="19:22">.</operator><name pos:start="19:23" pos:end="19:28">nalloc</name></name> <operator pos:start="19:30" pos:end="19:31">!=</operator> <operator pos:start="19:33" pos:end="19:33">-</operator><literal type="number" pos:start="19:34" pos:end="19:34">1</literal></expr>)</condition> <block pos:start="19:37" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:43">

            <comment type="block" pos:start="21:13" pos:end="25:47">/* If nalloc is != 1 req-&gt;qiov is a local copy of the original

             * external iovec. It was allocated in submit_merged_requests

             * to be able to merge requests. */</comment>

            <expr_stmt pos:start="27:13" pos:end="27:43"><expr pos:start="27:13" pos:end="27:42"><call pos:start="27:13" pos:end="27:42"><name pos:start="27:13" pos:end="27:30">qemu_iovec_destroy</name><argument_list pos:start="27:31" pos:end="27:42">(<argument pos:start="27:32" pos:end="27:41"><expr pos:start="27:32" pos:end="27:41"><operator pos:start="27:32" pos:end="27:32">&amp;</operator><name pos:start="27:33" pos:end="27:41"><name pos:start="27:33" pos:end="27:35">req</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:41">qiov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="33:9" pos:end="37:51"><if pos:start="33:9" pos:end="37:51">if <condition pos:start="33:12" pos:end="33:16">(<expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">ret</name></expr>)</condition> <block pos:start="33:18" pos:end="37:51">{<block_content pos:start="35:13" pos:end="37:51">

            <decl_stmt pos:start="35:13" pos:end="35:74"><decl pos:start="35:13" pos:end="35:73"><type pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">int</name></type> <name pos:start="35:17" pos:end="35:17">p</name> <init pos:start="35:19" pos:end="35:73">= <expr pos:start="35:21" pos:end="35:73"><call pos:start="35:21" pos:end="35:73"><name pos:start="35:21" pos:end="35:32">virtio_ldl_p</name><argument_list pos:start="35:33" pos:end="35:73">(<argument pos:start="35:34" pos:end="35:56"><expr pos:start="35:34" pos:end="35:56"><call pos:start="35:34" pos:end="35:56"><name pos:start="35:34" pos:end="35:46">VIRTIO_DEVICE</name><argument_list pos:start="35:47" pos:end="35:56">(<argument pos:start="35:48" pos:end="35:55"><expr pos:start="35:48" pos:end="35:55"><name pos:start="35:48" pos:end="35:55"><name pos:start="35:48" pos:end="35:50">req</name><operator pos:start="35:51" pos:end="35:52">-&gt;</operator><name pos:start="35:53" pos:end="35:55">dev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:59" pos:end="35:72"><expr pos:start="35:59" pos:end="35:72"><operator pos:start="35:59" pos:end="35:59">&amp;</operator><name pos:start="35:60" pos:end="35:72"><name pos:start="35:60" pos:end="35:62">req</name><operator pos:start="35:63" pos:end="35:64">-&gt;</operator><name pos:start="35:65" pos:end="35:67">out</name><operator pos:start="35:68" pos:end="35:68">.</operator><name pos:start="35:69" pos:end="35:72">type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="37:13" pos:end="37:51"><decl pos:start="37:13" pos:end="37:50"><type pos:start="37:13" pos:end="37:16"><name pos:start="37:13" pos:end="37:16">bool</name></type> <name pos:start="37:18" pos:end="37:24">is_read</name> <init pos:start="37:26" pos:end="37:50">= <expr pos:start="37:28" pos:end="37:50"><operator pos:start="37:28" pos:end="37:28">!</operator><operator pos:start="37:29" pos:end="37:29">(</operator><name pos:start="37:30" pos:end="37:30">p</name> <operator pos:start="37:32" pos:end="37:32">&amp;</operator> <name pos:start="37:34" pos:end="37:49">VIRTIO_BLK_T_OUT</name><operator pos:start="37:50" pos:end="37:50">)</operator></expr></init></decl>;</decl_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></function>

            <comment type="block">/* Note that memory may be dirtied on read failure.  If the

             * virtio request is not completed here, as is the case for

             * BLOCK_ERROR_ACTION_STOP, the memory may not be copied

             * correctly during live migration.  While this is ugly,

             * it is acceptable because the device is free to write to

             * the memory until the request is completed (which will

             * happen on the other side of the migration).


            if (virtio_blk_handle_rw_error(req, -ret, is_read)) {





                continue;

            }

        }



        virtio_blk_req_complete(req, VIRTIO_BLK_S_OK);

        block_acct_done(blk_get_stats(req-&gt;dev-&gt;blk), &amp;req-&gt;acct);

        virtio_blk_free_request(req);

    }

}</comment></unit>
