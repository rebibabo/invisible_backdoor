<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18841.c" pos:tabs="8"><function pos:start="1:1" pos:end="1417:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">adpcm_decode_frame</name><parameter_list pos:start="1:30" pos:end="3:66">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:48"><decl pos:start="3:31" pos:end="3:48"><type pos:start="3:31" pos:end="3:48"><name pos:start="3:31" pos:end="3:33">int</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:48">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:65"><decl pos:start="3:51" pos:end="3:65"><type pos:start="3:51" pos:end="3:65"><name pos:start="3:51" pos:end="3:58">AVPacket</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:65">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="1417:1">{<block_content pos:start="7:5" pos:end="1415:21">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:22">ADPCMDecodeContext</name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:25">c</name> <init pos:start="11:27" pos:end="11:44">= <expr pos:start="11:29" pos:end="11:44"><name pos:start="11:29" pos:end="11:44"><name pos:start="11:29" pos:end="11:33">avctx</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22">ADPCMChannelStatus</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:26">cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">n</name></decl>, <decl pos:start="15:12" pos:end="15:12"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:12">m</name></decl>, <decl pos:start="15:15" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:21">channel</name></decl>, <decl pos:start="15:24" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:24" pos:end="15:24">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">short</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:18">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:19"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:17">uint8_t</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:22">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:11"><decl pos:start="21:5" pos:end="21:10"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:10">st</name></decl>;</decl_stmt> <comment type="block" pos:start="21:13" pos:end="21:24">/* stereo */</comment>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:14"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:14">count1</name></decl>, <decl pos:start="23:17" pos:end="23:22"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:17" pos:end="23:22">count2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:39"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">nb_samples</name></decl>, <decl pos:start="25:21" pos:end="25:33"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:21" pos:end="25:33">coded_samples</name></decl>, <decl pos:start="25:36" pos:end="25:38"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:36" pos:end="25:38">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:70"><expr pos:start="29:5" pos:end="29:69"><name pos:start="29:5" pos:end="29:14">nb_samples</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <call pos:start="29:18" pos:end="29:69"><name pos:start="29:18" pos:end="29:31">get_nb_samples</name><argument_list pos:start="29:32" pos:end="29:69">(<argument pos:start="29:33" pos:end="29:37"><expr pos:start="29:33" pos:end="29:37"><name pos:start="29:33" pos:end="29:37">avctx</name></expr></argument>, <argument pos:start="29:40" pos:end="29:42"><expr pos:start="29:40" pos:end="29:42"><name pos:start="29:40" pos:end="29:42">buf</name></expr></argument>, <argument pos:start="29:45" pos:end="29:52"><expr pos:start="29:45" pos:end="29:52"><name pos:start="29:45" pos:end="29:52">buf_size</name></expr></argument>, <argument pos:start="29:55" pos:end="29:68"><expr pos:start="29:55" pos:end="29:68"><operator pos:start="29:55" pos:end="29:55">&amp;</operator><name pos:start="29:56" pos:end="29:68">coded_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:24">(<expr pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:18">nb_samples</name> <operator pos:start="31:20" pos:end="31:21">&lt;=</operator> <literal type="number" pos:start="31:23" pos:end="31:23">0</literal></expr>)</condition> <block pos:start="31:26" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:35">

        <expr_stmt pos:start="33:9" pos:end="33:77"><expr pos:start="33:9" pos:end="33:76"><call pos:start="33:9" pos:end="33:76"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:76">(<argument pos:start="33:16" pos:end="33:20"><expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">avctx</name></expr></argument>, <argument pos:start="33:23" pos:end="33:34"><expr pos:start="33:23" pos:end="33:34"><name pos:start="33:23" pos:end="33:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:37" pos:end="33:75"><expr pos:start="33:37" pos:end="33:75"><literal type="string" pos:start="33:37" pos:end="33:75">"invalid number of samples in packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:35">return <expr pos:start="35:16" pos:end="35:34"><name pos:start="35:16" pos:end="35:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:27">/* get output buffer */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:5">c</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:12">frame</name><operator pos:start="43:13" pos:end="43:13">.</operator><name pos:start="43:14" pos:end="43:23">nb_samples</name></name> <operator pos:start="43:25" pos:end="43:25">=</operator> <name pos:start="43:27" pos:end="43:36">nb_samples</name></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:56">(<expr pos:start="45:9" pos:end="45:55"><operator pos:start="45:9" pos:end="45:9">(</operator><name pos:start="45:10" pos:end="45:12">ret</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:50"><name pos:start="45:16" pos:end="45:32"><name pos:start="45:16" pos:end="45:20">avctx</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:32">get_buffer</name></name><argument_list pos:start="45:33" pos:end="45:50">(<argument pos:start="45:34" pos:end="45:38"><expr pos:start="45:34" pos:end="45:38"><name pos:start="45:34" pos:end="45:38">avctx</name></expr></argument>, <argument pos:start="45:41" pos:end="45:49"><expr pos:start="45:41" pos:end="45:49"><operator pos:start="45:41" pos:end="45:41">&amp;</operator><name pos:start="45:42" pos:end="45:49"><name pos:start="45:42" pos:end="45:42">c</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:49">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="45:51" pos:end="45:51">)</operator> <operator pos:start="45:53" pos:end="45:53">&lt;</operator> <literal type="number" pos:start="45:55" pos:end="45:55">0</literal></expr>)</condition> <block pos:start="45:58" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:19">

        <expr_stmt pos:start="47:9" pos:end="47:61"><expr pos:start="47:9" pos:end="47:60"><call pos:start="47:9" pos:end="47:60"><name pos:start="47:9" pos:end="47:14">av_log</name><argument_list pos:start="47:15" pos:end="47:60">(<argument pos:start="47:16" pos:end="47:20"><expr pos:start="47:16" pos:end="47:20"><name pos:start="47:16" pos:end="47:20">avctx</name></expr></argument>, <argument pos:start="47:23" pos:end="47:34"><expr pos:start="47:23" pos:end="47:34"><name pos:start="47:23" pos:end="47:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:37" pos:end="47:59"><expr pos:start="47:37" pos:end="47:59"><literal type="string" pos:start="47:37" pos:end="47:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:19">return <expr pos:start="49:16" pos:end="49:18"><name pos:start="49:16" pos:end="49:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:11">samples</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">(</operator><name pos:start="53:16" pos:end="53:20">short</name> <operator pos:start="53:22" pos:end="53:22">*</operator><operator pos:start="53:23" pos:end="53:23">)</operator><name pos:start="53:24" pos:end="53:39"><name pos:start="53:24" pos:end="53:24">c</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:31">frame</name><operator pos:start="53:32" pos:end="53:32">.</operator><name pos:start="53:33" pos:end="53:36">data</name><index pos:start="53:37" pos:end="53:39">[<expr pos:start="53:38" pos:end="53:38"><literal type="number" pos:start="53:38" pos:end="53:38">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:43">/* use coded_samples when applicable */</comment>

    <comment type="block" pos:start="59:5" pos:end="59:79">/* it is always &lt;= nb_samples, so the output buffer will be large enough */</comment>

    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="61:22">(<expr pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:21">coded_samples</name></expr>)</condition> <block pos:start="61:24" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:57">

        <if_stmt pos:start="63:9" pos:end="65:78"><if pos:start="63:9" pos:end="65:78">if <condition pos:start="63:12" pos:end="63:40">(<expr pos:start="63:13" pos:end="63:39"><name pos:start="63:13" pos:end="63:25">coded_samples</name> <operator pos:start="63:27" pos:end="63:28">!=</operator> <name pos:start="63:30" pos:end="63:39">nb_samples</name></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:78"><block_content pos:start="65:13" pos:end="65:78">

            <expr_stmt pos:start="65:13" pos:end="65:78"><expr pos:start="65:13" pos:end="65:77"><call pos:start="65:13" pos:end="65:77"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="65:77">(<argument pos:start="65:20" pos:end="65:24"><expr pos:start="65:20" pos:end="65:24"><name pos:start="65:20" pos:end="65:24">avctx</name></expr></argument>, <argument pos:start="65:27" pos:end="65:40"><expr pos:start="65:27" pos:end="65:40"><name pos:start="65:27" pos:end="65:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="65:43" pos:end="65:76"><expr pos:start="65:43" pos:end="65:76"><literal type="string" pos:start="65:43" pos:end="65:76">"mismatch in coded sample count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:57"><expr pos:start="67:9" pos:end="67:56"><name pos:start="67:9" pos:end="67:27"><name pos:start="67:9" pos:end="67:9">c</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:16">frame</name><operator pos:start="67:17" pos:end="67:17">.</operator><name pos:start="67:18" pos:end="67:27">nb_samples</name></name> <operator pos:start="67:29" pos:end="67:29">=</operator> <name pos:start="67:31" pos:end="67:40">nb_samples</name> <operator pos:start="67:42" pos:end="67:42">=</operator> <name pos:start="67:44" pos:end="67:56">coded_samples</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:14"><expr pos:start="73:5" pos:end="73:13"><name pos:start="73:5" pos:end="73:7">src</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <name pos:start="73:11" pos:end="73:13">buf</name></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:38"><expr pos:start="77:5" pos:end="77:37"><name pos:start="77:5" pos:end="77:6">st</name> <operator pos:start="77:8" pos:end="77:8">=</operator> <ternary pos:start="77:10" pos:end="77:37"><condition pos:start="77:10" pos:end="77:31"><expr pos:start="77:10" pos:end="77:29"><name pos:start="77:10" pos:end="77:24"><name pos:start="77:10" pos:end="77:14">avctx</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:24">channels</name></name> <operator pos:start="77:26" pos:end="77:27">==</operator> <literal type="number" pos:start="77:29" pos:end="77:29">2</literal></expr> ?</condition><then pos:start="77:33" pos:end="77:33"> <expr pos:start="77:33" pos:end="77:33"><literal type="number" pos:start="77:33" pos:end="77:33">1</literal></expr> </then><else pos:start="77:35" pos:end="77:37">: <expr pos:start="77:37" pos:end="77:37"><literal type="number" pos:start="77:37" pos:end="77:37">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <switch pos:start="81:5" pos:end="1405:5">switch<condition pos:start="81:11" pos:end="81:28">(<expr pos:start="81:12" pos:end="81:27"><name pos:start="81:12" pos:end="81:27"><name pos:start="81:12" pos:end="81:16">avctx</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:23">codec</name><operator pos:start="81:24" pos:end="81:25">-&gt;</operator><name pos:start="81:26" pos:end="81:27">id</name></name></expr>)</condition> <block pos:start="81:30" pos:end="1405:5">{<block_content pos:start="83:5" pos:end="1403:18">

    <case pos:start="83:5" pos:end="83:31">case <expr pos:start="83:10" pos:end="83:30"><name pos:start="83:10" pos:end="83:30">CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>

        <comment type="block" pos:start="85:9" pos:end="87:52">/* In QuickTime, IMA is encoded by chunks of 34 bytes (=64 samples).

           Channel data is interleaved per-chunk. */</comment>

        <for pos:start="89:9" pos:end="167:9">for <control pos:start="89:13" pos:end="89:63">(<init pos:start="89:14" pos:end="89:25"><expr pos:start="89:14" pos:end="89:24"><name pos:start="89:14" pos:end="89:20">channel</name> <operator pos:start="89:22" pos:end="89:22">=</operator> <literal type="number" pos:start="89:24" pos:end="89:24">0</literal></expr>;</init> <condition pos:start="89:27" pos:end="89:52"><expr pos:start="89:27" pos:end="89:51"><name pos:start="89:27" pos:end="89:33">channel</name> <operator pos:start="89:35" pos:end="89:35">&lt;</operator> <name pos:start="89:37" pos:end="89:51"><name pos:start="89:37" pos:end="89:41">avctx</name><operator pos:start="89:42" pos:end="89:43">-&gt;</operator><name pos:start="89:44" pos:end="89:51">channels</name></name></expr>;</condition> <incr pos:start="89:54" pos:end="89:62"><expr pos:start="89:54" pos:end="89:62"><name pos:start="89:54" pos:end="89:60">channel</name><operator pos:start="89:61" pos:end="89:62">++</operator></expr></incr>)</control> <block pos:start="89:65" pos:end="167:9">{<block_content pos:start="91:13" pos:end="165:13">

            <decl_stmt pos:start="91:13" pos:end="91:30"><decl pos:start="91:13" pos:end="91:29"><type pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:19">int16_t</name></type> <name pos:start="91:21" pos:end="91:29">predictor</name></decl>;</decl_stmt>

            <decl_stmt pos:start="93:13" pos:end="93:27"><decl pos:start="93:13" pos:end="93:26"><type pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">int</name></type> <name pos:start="93:17" pos:end="93:26">step_index</name></decl>;</decl_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:39"><expr pos:start="95:13" pos:end="95:38"><name pos:start="95:13" pos:end="95:14">cs</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <operator pos:start="95:18" pos:end="95:18">&amp;</operator><operator pos:start="95:19" pos:end="95:19">(</operator><name pos:start="95:20" pos:end="95:37"><name pos:start="95:20" pos:end="95:20">c</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:28">status</name><index pos:start="95:29" pos:end="95:37">[<expr pos:start="95:30" pos:end="95:36"><name pos:start="95:30" pos:end="95:36">channel</name></expr>]</index></name><operator pos:start="95:38" pos:end="95:38">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="97:13" pos:end="97:37">/* (pppppp) (piiiiiii) */</comment>



            <comment type="block" pos:start="101:13" pos:end="101:86">/* Bits 15-7 are the _top_ 9 bits of the 16-bit initial predictor value */</comment>

            <expr_stmt pos:start="103:13" pos:end="103:37"><expr pos:start="103:13" pos:end="103:36"><name pos:start="103:13" pos:end="103:21">predictor</name> <operator pos:start="103:23" pos:end="103:23">=</operator> <call pos:start="103:25" pos:end="103:36"><name pos:start="103:25" pos:end="103:31">AV_RB16</name><argument_list pos:start="103:32" pos:end="103:36">(<argument pos:start="103:33" pos:end="103:35"><expr pos:start="103:33" pos:end="103:35"><name pos:start="103:33" pos:end="103:35">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:42"><expr pos:start="105:13" pos:end="105:41"><name pos:start="105:13" pos:end="105:22">step_index</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <name pos:start="105:26" pos:end="105:34">predictor</name> <operator pos:start="105:36" pos:end="105:36">&amp;</operator> <literal type="number" pos:start="105:38" pos:end="105:41">0x7F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:32"><expr pos:start="107:13" pos:end="107:31"><name pos:start="107:13" pos:end="107:21">predictor</name> <operator pos:start="107:23" pos:end="107:24">&amp;=</operator> <literal type="number" pos:start="107:26" pos:end="107:31">0xFF80</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="111:13" pos:end="111:21"><expr pos:start="111:13" pos:end="111:20"><name pos:start="111:13" pos:end="111:15">src</name> <operator pos:start="111:17" pos:end="111:18">+=</operator> <literal type="number" pos:start="111:20" pos:end="111:20">2</literal></expr>;</expr_stmt>



            <if_stmt pos:start="115:13" pos:end="135:13"><if pos:start="115:13" pos:end="127:13">if <condition pos:start="115:16" pos:end="115:45">(<expr pos:start="115:17" pos:end="115:44"><name pos:start="115:17" pos:end="115:30"><name pos:start="115:17" pos:end="115:18">cs</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:30">step_index</name></name> <operator pos:start="115:32" pos:end="115:33">==</operator> <name pos:start="115:35" pos:end="115:44">step_index</name></expr>)</condition> <block pos:start="115:47" pos:end="127:13">{<block_content pos:start="117:17" pos:end="125:32">

                <decl_stmt pos:start="117:17" pos:end="117:58"><decl pos:start="117:17" pos:end="117:57"><type pos:start="117:17" pos:end="117:19"><name pos:start="117:17" pos:end="117:19">int</name></type> <name pos:start="117:21" pos:end="117:24">diff</name> <init pos:start="117:26" pos:end="117:57">= <expr pos:start="117:28" pos:end="117:57"><operator pos:start="117:28" pos:end="117:28">(</operator><name pos:start="117:29" pos:end="117:31">int</name><operator pos:start="117:32" pos:end="117:32">)</operator><name pos:start="117:33" pos:end="117:41">predictor</name> <operator pos:start="117:43" pos:end="117:43">-</operator> <name pos:start="117:45" pos:end="117:57"><name pos:start="117:45" pos:end="117:46">cs</name><operator pos:start="117:47" pos:end="117:48">-&gt;</operator><name pos:start="117:49" pos:end="117:57">predictor</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="119:17" pos:end="121:34"><if pos:start="119:17" pos:end="121:34">if <condition pos:start="119:20" pos:end="119:29">(<expr pos:start="119:21" pos:end="119:28"><name pos:start="119:21" pos:end="119:24">diff</name> <operator pos:start="119:26" pos:end="119:26">&lt;</operator> <literal type="number" pos:start="119:28" pos:end="119:28">0</literal></expr>)</condition><block type="pseudo" pos:start="121:21" pos:end="121:34"><block_content pos:start="121:21" pos:end="121:34">

                    <expr_stmt pos:start="121:21" pos:end="121:34"><expr pos:start="121:21" pos:end="121:33"><name pos:start="121:21" pos:end="121:24">diff</name> <operator pos:start="121:26" pos:end="121:26">=</operator> <operator pos:start="121:28" pos:end="121:28">-</operator> <name pos:start="121:30" pos:end="121:33">diff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="123:17" pos:end="125:32"><if pos:start="123:17" pos:end="125:32">if <condition pos:start="123:20" pos:end="123:32">(<expr pos:start="123:21" pos:end="123:31"><name pos:start="123:21" pos:end="123:24">diff</name> <operator pos:start="123:26" pos:end="123:26">&gt;</operator> <literal type="number" pos:start="123:28" pos:end="123:31">0x7f</literal></expr>)</condition><block type="pseudo" pos:start="125:21" pos:end="125:32"><block_content pos:start="125:21" pos:end="125:32">

                    <goto pos:start="125:21" pos:end="125:32">goto <name pos:start="125:26" pos:end="125:31">update</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="127:15" pos:end="135:13">else <block pos:start="127:20" pos:end="135:13">{<block_content pos:start="129:13" pos:end="133:42">

            <label pos:start="129:13" pos:end="129:19"><name pos:start="129:13" pos:end="129:18">update</name>:</label>

                <expr_stmt pos:start="131:17" pos:end="131:44"><expr pos:start="131:17" pos:end="131:43"><name pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:18">cs</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:30">step_index</name></name> <operator pos:start="131:32" pos:end="131:32">=</operator> <name pos:start="131:34" pos:end="131:43">step_index</name></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:42"><expr pos:start="133:17" pos:end="133:41"><name pos:start="133:17" pos:end="133:29"><name pos:start="133:17" pos:end="133:18">cs</name><operator pos:start="133:19" pos:end="133:20">-&gt;</operator><name pos:start="133:21" pos:end="133:29">predictor</name></name> <operator pos:start="133:31" pos:end="133:31">=</operator> <name pos:start="133:33" pos:end="133:41">predictor</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="139:13" pos:end="145:13"><if pos:start="139:13" pos:end="145:13">if <condition pos:start="139:16" pos:end="139:36">(<expr pos:start="139:17" pos:end="139:35"><name pos:start="139:17" pos:end="139:30"><name pos:start="139:17" pos:end="139:18">cs</name><operator pos:start="139:19" pos:end="139:20">-&gt;</operator><name pos:start="139:21" pos:end="139:30">step_index</name></name> <operator pos:start="139:32" pos:end="139:32">&gt;</operator> <literal type="number" pos:start="139:34" pos:end="139:35">88</literal></expr>)</condition><block pos:start="139:37" pos:end="145:13">{<block_content pos:start="141:17" pos:end="143:36">

                <expr_stmt pos:start="141:17" pos:end="141:88"><expr pos:start="141:17" pos:end="141:87"><call pos:start="141:17" pos:end="141:87"><name pos:start="141:17" pos:end="141:22">av_log</name><argument_list pos:start="141:23" pos:end="141:87">(<argument pos:start="141:24" pos:end="141:28"><expr pos:start="141:24" pos:end="141:28"><name pos:start="141:24" pos:end="141:28">avctx</name></expr></argument>, <argument pos:start="141:31" pos:end="141:42"><expr pos:start="141:31" pos:end="141:42"><name pos:start="141:31" pos:end="141:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="141:45" pos:end="141:70"><expr pos:start="141:45" pos:end="141:70"><literal type="string" pos:start="141:45" pos:end="141:70">"ERROR: step_index = %i\n"</literal></expr></argument>, <argument pos:start="141:73" pos:end="141:86"><expr pos:start="141:73" pos:end="141:86"><name pos:start="141:73" pos:end="141:86"><name pos:start="141:73" pos:end="141:74">cs</name><operator pos:start="141:75" pos:end="141:76">-&gt;</operator><name pos:start="141:77" pos:end="141:86">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:36"><expr pos:start="143:17" pos:end="143:35"><name pos:start="143:17" pos:end="143:30"><name pos:start="143:17" pos:end="143:18">cs</name><operator pos:start="143:19" pos:end="143:20">-&gt;</operator><name pos:start="143:21" pos:end="143:30">step_index</name></name> <operator pos:start="143:32" pos:end="143:32">=</operator> <literal type="number" pos:start="143:34" pos:end="143:35">88</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="149:13" pos:end="149:58"><expr pos:start="149:13" pos:end="149:57"><name pos:start="149:13" pos:end="149:19">samples</name> <operator pos:start="149:21" pos:end="149:21">=</operator> <operator pos:start="149:23" pos:end="149:23">(</operator><name pos:start="149:24" pos:end="149:28">short</name> <operator pos:start="149:30" pos:end="149:30">*</operator><operator pos:start="149:31" pos:end="149:31">)</operator><name pos:start="149:32" pos:end="149:47"><name pos:start="149:32" pos:end="149:32">c</name><operator pos:start="149:33" pos:end="149:34">-&gt;</operator><name pos:start="149:35" pos:end="149:39">frame</name><operator pos:start="149:40" pos:end="149:40">.</operator><name pos:start="149:41" pos:end="149:44">data</name><index pos:start="149:45" pos:end="149:47">[<expr pos:start="149:46" pos:end="149:46"><literal type="number" pos:start="149:46" pos:end="149:46">0</literal></expr>]</index></name> <operator pos:start="149:49" pos:end="149:49">+</operator> <name pos:start="149:51" pos:end="149:57">channel</name></expr>;</expr_stmt>



            <for pos:start="153:13" pos:end="165:13">for <control pos:start="153:17" pos:end="153:36">(<init pos:start="153:18" pos:end="153:23"><expr pos:start="153:18" pos:end="153:22"><name pos:start="153:18" pos:end="153:18">m</name> <operator pos:start="153:20" pos:end="153:20">=</operator> <literal type="number" pos:start="153:22" pos:end="153:22">0</literal></expr>;</init> <condition pos:start="153:25" pos:end="153:31"><expr pos:start="153:25" pos:end="153:30"><name pos:start="153:25" pos:end="153:25">m</name> <operator pos:start="153:27" pos:end="153:27">&lt;</operator> <literal type="number" pos:start="153:29" pos:end="153:30">32</literal></expr>;</condition> <incr pos:start="153:33" pos:end="153:35"><expr pos:start="153:33" pos:end="153:35"><name pos:start="153:33" pos:end="153:33">m</name><operator pos:start="153:34" pos:end="153:35">++</operator></expr></incr>)</control> <block pos:start="153:38" pos:end="165:13">{<block_content pos:start="155:17" pos:end="163:23">

                <expr_stmt pos:start="155:17" pos:end="155:76"><expr pos:start="155:17" pos:end="155:75"><operator pos:start="155:17" pos:end="155:17">*</operator><name pos:start="155:18" pos:end="155:24">samples</name> <operator pos:start="155:26" pos:end="155:26">=</operator> <call pos:start="155:28" pos:end="155:75"><name pos:start="155:28" pos:end="155:53">adpcm_ima_qt_expand_nibble</name><argument_list pos:start="155:54" pos:end="155:75">(<argument pos:start="155:55" pos:end="155:56"><expr pos:start="155:55" pos:end="155:56"><name pos:start="155:55" pos:end="155:56">cs</name></expr></argument>, <argument pos:start="155:59" pos:end="155:71"><expr pos:start="155:59" pos:end="155:71"><name pos:start="155:59" pos:end="155:64"><name pos:start="155:59" pos:end="155:61">src</name><index pos:start="155:62" pos:end="155:64">[<expr pos:start="155:63" pos:end="155:63"><literal type="number" pos:start="155:63" pos:end="155:63">0</literal></expr>]</index></name> <operator pos:start="155:66" pos:end="155:66">&amp;</operator> <literal type="number" pos:start="155:68" pos:end="155:71">0x0F</literal></expr></argument>, <argument pos:start="155:74" pos:end="155:74"><expr pos:start="155:74" pos:end="155:74"><literal type="number" pos:start="155:74" pos:end="155:74">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:43"><expr pos:start="157:17" pos:end="157:42"><name pos:start="157:17" pos:end="157:23">samples</name> <operator pos:start="157:25" pos:end="157:26">+=</operator> <name pos:start="157:28" pos:end="157:42"><name pos:start="157:28" pos:end="157:32">avctx</name><operator pos:start="157:33" pos:end="157:34">-&gt;</operator><name pos:start="157:35" pos:end="157:42">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:76"><expr pos:start="159:17" pos:end="159:75"><operator pos:start="159:17" pos:end="159:17">*</operator><name pos:start="159:18" pos:end="159:24">samples</name> <operator pos:start="159:26" pos:end="159:26">=</operator> <call pos:start="159:28" pos:end="159:75"><name pos:start="159:28" pos:end="159:53">adpcm_ima_qt_expand_nibble</name><argument_list pos:start="159:54" pos:end="159:75">(<argument pos:start="159:55" pos:end="159:56"><expr pos:start="159:55" pos:end="159:56"><name pos:start="159:55" pos:end="159:56">cs</name></expr></argument>, <argument pos:start="159:59" pos:end="159:69"><expr pos:start="159:59" pos:end="159:69"><name pos:start="159:59" pos:end="159:64"><name pos:start="159:59" pos:end="159:61">src</name><index pos:start="159:62" pos:end="159:64">[<expr pos:start="159:63" pos:end="159:63"><literal type="number" pos:start="159:63" pos:end="159:63">0</literal></expr>]</index></name> <operator pos:start="159:66" pos:end="159:67">&gt;&gt;</operator> <literal type="number" pos:start="159:69" pos:end="159:69">4</literal></expr></argument>  , <argument pos:start="159:74" pos:end="159:74"><expr pos:start="159:74" pos:end="159:74"><literal type="number" pos:start="159:74" pos:end="159:74">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:43"><expr pos:start="161:17" pos:end="161:42"><name pos:start="161:17" pos:end="161:23">samples</name> <operator pos:start="161:25" pos:end="161:26">+=</operator> <name pos:start="161:28" pos:end="161:42"><name pos:start="161:28" pos:end="161:32">avctx</name><operator pos:start="161:33" pos:end="161:34">-&gt;</operator><name pos:start="161:35" pos:end="161:42">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:23"><expr pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:19">src</name> <operator pos:start="163:21" pos:end="163:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="169:9" pos:end="169:14">break;</break>

    <case pos:start="171:5" pos:end="171:32">case <expr pos:start="171:10" pos:end="171:31"><name pos:start="171:10" pos:end="171:31">CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>

        <if_stmt pos:start="173:9" pos:end="175:42"><if pos:start="173:9" pos:end="175:42">if <condition pos:start="173:12" pos:end="173:69">(<expr pos:start="173:13" pos:end="173:68"><name pos:start="173:13" pos:end="173:30"><name pos:start="173:13" pos:end="173:17">avctx</name><operator pos:start="173:18" pos:end="173:19">-&gt;</operator><name pos:start="173:20" pos:end="173:30">block_align</name></name> <operator pos:start="173:32" pos:end="173:33">!=</operator> <literal type="number" pos:start="173:35" pos:end="173:35">0</literal> <operator pos:start="173:37" pos:end="173:38">&amp;&amp;</operator> <name pos:start="173:40" pos:end="173:47">buf_size</name> <operator pos:start="173:49" pos:end="173:49">&gt;</operator> <name pos:start="173:51" pos:end="173:68"><name pos:start="173:51" pos:end="173:55">avctx</name><operator pos:start="173:56" pos:end="173:57">-&gt;</operator><name pos:start="173:58" pos:end="173:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:42"><block_content pos:start="175:13" pos:end="175:42">

            <expr_stmt pos:start="175:13" pos:end="175:42"><expr pos:start="175:13" pos:end="175:41"><name pos:start="175:13" pos:end="175:20">buf_size</name> <operator pos:start="175:22" pos:end="175:22">=</operator> <name pos:start="175:24" pos:end="175:41"><name pos:start="175:24" pos:end="175:28">avctx</name><operator pos:start="175:29" pos:end="175:30">-&gt;</operator><name pos:start="175:31" pos:end="175:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="179:9" pos:end="199:9">for<control pos:start="179:12" pos:end="179:40">(<init pos:start="179:13" pos:end="179:16"><expr pos:start="179:13" pos:end="179:15"><name pos:start="179:13" pos:end="179:13">i</name><operator pos:start="179:14" pos:end="179:14">=</operator><literal type="number" pos:start="179:15" pos:end="179:15">0</literal></expr>;</init> <condition pos:start="179:18" pos:end="179:35"><expr pos:start="179:18" pos:end="179:34"><name pos:start="179:18" pos:end="179:18">i</name><operator pos:start="179:19" pos:end="179:19">&lt;</operator><name pos:start="179:20" pos:end="179:34"><name pos:start="179:20" pos:end="179:24">avctx</name><operator pos:start="179:25" pos:end="179:26">-&gt;</operator><name pos:start="179:27" pos:end="179:34">channels</name></name></expr>;</condition> <incr pos:start="179:37" pos:end="179:39"><expr pos:start="179:37" pos:end="179:39"><name pos:start="179:37" pos:end="179:37">i</name><operator pos:start="179:38" pos:end="179:39">++</operator></expr></incr>)</control><block pos:start="179:41" pos:end="199:9">{<block_content pos:start="181:13" pos:end="197:105">

            <expr_stmt pos:start="181:13" pos:end="181:33"><expr pos:start="181:13" pos:end="181:32"><name pos:start="181:13" pos:end="181:14">cs</name> <operator pos:start="181:16" pos:end="181:16">=</operator> <operator pos:start="181:18" pos:end="181:18">&amp;</operator><operator pos:start="181:19" pos:end="181:19">(</operator><name pos:start="181:20" pos:end="181:31"><name pos:start="181:20" pos:end="181:20">c</name><operator pos:start="181:21" pos:end="181:22">-&gt;</operator><name pos:start="181:23" pos:end="181:28">status</name><index pos:start="181:29" pos:end="181:31">[<expr pos:start="181:30" pos:end="181:30"><name pos:start="181:30" pos:end="181:30">i</name></expr>]</index></name><operator pos:start="181:32" pos:end="181:32">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:76"><expr pos:start="183:13" pos:end="183:75"><name pos:start="183:13" pos:end="183:25"><name pos:start="183:13" pos:end="183:14">cs</name><operator pos:start="183:15" pos:end="183:16">-&gt;</operator><name pos:start="183:17" pos:end="183:25">predictor</name></name> <operator pos:start="183:27" pos:end="183:27">=</operator> <operator pos:start="183:29" pos:end="183:29">*</operator><name pos:start="183:30" pos:end="183:36">samples</name><operator pos:start="183:37" pos:end="183:38">++</operator> <operator pos:start="183:40" pos:end="183:40">=</operator> <operator pos:start="183:42" pos:end="183:42">(</operator><name pos:start="183:43" pos:end="183:49">int16_t</name><operator pos:start="183:50" pos:end="183:50">)</operator><call pos:start="183:51" pos:end="183:75"><name pos:start="183:51" pos:end="183:69">bytestream_get_le16</name><argument_list pos:start="183:70" pos:end="183:75">(<argument pos:start="183:71" pos:end="183:74"><expr pos:start="183:71" pos:end="183:74"><operator pos:start="183:71" pos:end="183:71">&amp;</operator><name pos:start="183:72" pos:end="183:74">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="187:13" pos:end="187:36"><expr pos:start="187:13" pos:end="187:35"><name pos:start="187:13" pos:end="187:26"><name pos:start="187:13" pos:end="187:14">cs</name><operator pos:start="187:15" pos:end="187:16">-&gt;</operator><name pos:start="187:17" pos:end="187:26">step_index</name></name> <operator pos:start="187:28" pos:end="187:28">=</operator> <operator pos:start="187:30" pos:end="187:30">*</operator><name pos:start="187:31" pos:end="187:33">src</name><operator pos:start="187:34" pos:end="187:35">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="189:13" pos:end="195:13"><if pos:start="189:13" pos:end="195:13">if <condition pos:start="189:16" pos:end="189:36">(<expr pos:start="189:17" pos:end="189:35"><name pos:start="189:17" pos:end="189:30"><name pos:start="189:17" pos:end="189:18">cs</name><operator pos:start="189:19" pos:end="189:20">-&gt;</operator><name pos:start="189:21" pos:end="189:30">step_index</name></name> <operator pos:start="189:32" pos:end="189:32">&gt;</operator> <literal type="number" pos:start="189:34" pos:end="189:35">88</literal></expr>)</condition><block pos:start="189:37" pos:end="195:13">{<block_content pos:start="191:17" pos:end="193:36">

                <expr_stmt pos:start="191:17" pos:end="191:88"><expr pos:start="191:17" pos:end="191:87"><call pos:start="191:17" pos:end="191:87"><name pos:start="191:17" pos:end="191:22">av_log</name><argument_list pos:start="191:23" pos:end="191:87">(<argument pos:start="191:24" pos:end="191:28"><expr pos:start="191:24" pos:end="191:28"><name pos:start="191:24" pos:end="191:28">avctx</name></expr></argument>, <argument pos:start="191:31" pos:end="191:42"><expr pos:start="191:31" pos:end="191:42"><name pos:start="191:31" pos:end="191:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="191:45" pos:end="191:70"><expr pos:start="191:45" pos:end="191:70"><literal type="string" pos:start="191:45" pos:end="191:70">"ERROR: step_index = %i\n"</literal></expr></argument>, <argument pos:start="191:73" pos:end="191:86"><expr pos:start="191:73" pos:end="191:86"><name pos:start="191:73" pos:end="191:86"><name pos:start="191:73" pos:end="191:74">cs</name><operator pos:start="191:75" pos:end="191:76">-&gt;</operator><name pos:start="191:77" pos:end="191:86">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:36"><expr pos:start="193:17" pos:end="193:35"><name pos:start="193:17" pos:end="193:30"><name pos:start="193:17" pos:end="193:18">cs</name><operator pos:start="193:19" pos:end="193:20">-&gt;</operator><name pos:start="193:21" pos:end="193:30">step_index</name></name> <operator pos:start="193:32" pos:end="193:32">=</operator> <literal type="number" pos:start="193:34" pos:end="193:35">88</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="197:13" pos:end="197:105"><if pos:start="197:13" pos:end="197:105">if <condition pos:start="197:16" pos:end="197:23">(<expr pos:start="197:17" pos:end="197:22"><operator pos:start="197:17" pos:end="197:17">*</operator><name pos:start="197:18" pos:end="197:20">src</name><operator pos:start="197:21" pos:end="197:22">++</operator></expr>)</condition><block type="pseudo" pos:start="197:25" pos:end="197:105"><block_content pos:start="197:25" pos:end="197:105"> <expr_stmt pos:start="197:25" pos:end="197:105"><expr pos:start="197:25" pos:end="197:104"><call pos:start="197:25" pos:end="197:104"><name pos:start="197:25" pos:end="197:30">av_log</name><argument_list pos:start="197:31" pos:end="197:104">(<argument pos:start="197:32" pos:end="197:36"><expr pos:start="197:32" pos:end="197:36"><name pos:start="197:32" pos:end="197:36">avctx</name></expr></argument>, <argument pos:start="197:39" pos:end="197:50"><expr pos:start="197:39" pos:end="197:50"><name pos:start="197:39" pos:end="197:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:53" pos:end="197:94"><expr pos:start="197:53" pos:end="197:94"><literal type="string" pos:start="197:53" pos:end="197:94">"unused byte should be null but is %d!!\n"</literal></expr></argument>, <argument pos:start="197:97" pos:end="197:103"><expr pos:start="197:97" pos:end="197:103"><name pos:start="197:97" pos:end="197:103"><name pos:start="197:97" pos:end="197:99">src</name><index pos:start="197:100" pos:end="197:103">[<expr pos:start="197:101" pos:end="197:102"><operator pos:start="197:101" pos:end="197:101">-</operator><literal type="number" pos:start="197:102" pos:end="197:102">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="197:107" pos:end="197:118">/* unused */</comment>

        </block_content>}</block></for>



        <for pos:start="203:9" pos:end="229:9">for <control pos:start="203:13" pos:end="203:50">(<init pos:start="203:14" pos:end="203:38"><expr pos:start="203:14" pos:end="203:37"><name pos:start="203:14" pos:end="203:14">n</name> <operator pos:start="203:16" pos:end="203:16">=</operator> <operator pos:start="203:18" pos:end="203:18">(</operator><name pos:start="203:19" pos:end="203:28">nb_samples</name> <operator pos:start="203:30" pos:end="203:30">-</operator> <literal type="number" pos:start="203:32" pos:end="203:32">1</literal><operator pos:start="203:33" pos:end="203:33">)</operator> <operator pos:start="203:35" pos:end="203:35">/</operator> <literal type="number" pos:start="203:37" pos:end="203:37">8</literal></expr>;</init> <condition pos:start="203:40" pos:end="203:45"><expr pos:start="203:40" pos:end="203:44"><name pos:start="203:40" pos:end="203:40">n</name> <operator pos:start="203:42" pos:end="203:42">&gt;</operator> <literal type="number" pos:start="203:44" pos:end="203:44">0</literal></expr>;</condition> <incr pos:start="203:47" pos:end="203:49"><expr pos:start="203:47" pos:end="203:49"><name pos:start="203:47" pos:end="203:47">n</name><operator pos:start="203:48" pos:end="203:49">--</operator></expr></incr>)</control> <block pos:start="203:52" pos:end="229:9">{<block_content pos:start="205:13" pos:end="227:43">

            <for pos:start="205:13" pos:end="225:13">for <control pos:start="205:17" pos:end="205:49">(<init pos:start="205:18" pos:end="205:23"><expr pos:start="205:18" pos:end="205:22"><name pos:start="205:18" pos:end="205:18">i</name> <operator pos:start="205:20" pos:end="205:20">=</operator> <literal type="number" pos:start="205:22" pos:end="205:22">0</literal></expr>;</init> <condition pos:start="205:25" pos:end="205:44"><expr pos:start="205:25" pos:end="205:43"><name pos:start="205:25" pos:end="205:25">i</name> <operator pos:start="205:27" pos:end="205:27">&lt;</operator> <name pos:start="205:29" pos:end="205:43"><name pos:start="205:29" pos:end="205:33">avctx</name><operator pos:start="205:34" pos:end="205:35">-&gt;</operator><name pos:start="205:36" pos:end="205:43">channels</name></name></expr>;</condition> <incr pos:start="205:46" pos:end="205:48"><expr pos:start="205:46" pos:end="205:48"><name pos:start="205:46" pos:end="205:46">i</name><operator pos:start="205:47" pos:end="205:48">++</operator></expr></incr>)</control> <block pos:start="205:51" pos:end="225:13">{<block_content pos:start="207:17" pos:end="223:51">

                <expr_stmt pos:start="207:17" pos:end="207:35"><expr pos:start="207:17" pos:end="207:34"><name pos:start="207:17" pos:end="207:18">cs</name> <operator pos:start="207:20" pos:end="207:20">=</operator> <operator pos:start="207:22" pos:end="207:22">&amp;</operator><name pos:start="207:23" pos:end="207:34"><name pos:start="207:23" pos:end="207:23">c</name><operator pos:start="207:24" pos:end="207:25">-&gt;</operator><name pos:start="207:26" pos:end="207:31">status</name><index pos:start="207:32" pos:end="207:34">[<expr pos:start="207:33" pos:end="207:33"><name pos:start="207:33" pos:end="207:33">i</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="209:17" pos:end="221:17">for <control pos:start="209:21" pos:end="209:39">(<init pos:start="209:22" pos:end="209:27"><expr pos:start="209:22" pos:end="209:26"><name pos:start="209:22" pos:end="209:22">m</name> <operator pos:start="209:24" pos:end="209:24">=</operator> <literal type="number" pos:start="209:26" pos:end="209:26">0</literal></expr>;</init> <condition pos:start="209:29" pos:end="209:34"><expr pos:start="209:29" pos:end="209:33"><name pos:start="209:29" pos:end="209:29">m</name> <operator pos:start="209:31" pos:end="209:31">&lt;</operator> <literal type="number" pos:start="209:33" pos:end="209:33">4</literal></expr>;</condition> <incr pos:start="209:36" pos:end="209:38"><expr pos:start="209:36" pos:end="209:38"><name pos:start="209:36" pos:end="209:36">m</name><operator pos:start="209:37" pos:end="209:38">++</operator></expr></incr>)</control> <block pos:start="209:41" pos:end="221:17">{<block_content pos:start="211:21" pos:end="219:47">

                    <decl_stmt pos:start="211:21" pos:end="211:39"><decl pos:start="211:21" pos:end="211:38"><type pos:start="211:21" pos:end="211:27"><name pos:start="211:21" pos:end="211:27">uint8_t</name></type> <name pos:start="211:29" pos:end="211:29">v</name> <init pos:start="211:31" pos:end="211:38">= <expr pos:start="211:33" pos:end="211:38"><operator pos:start="211:33" pos:end="211:33">*</operator><name pos:start="211:34" pos:end="211:36">src</name><operator pos:start="211:37" pos:end="211:38">++</operator></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="213:21" pos:end="213:72"><expr pos:start="213:21" pos:end="213:71"><operator pos:start="213:21" pos:end="213:21">*</operator><name pos:start="213:22" pos:end="213:28">samples</name> <operator pos:start="213:30" pos:end="213:30">=</operator> <call pos:start="213:32" pos:end="213:71"><name pos:start="213:32" pos:end="213:54">adpcm_ima_expand_nibble</name><argument_list pos:start="213:55" pos:end="213:71">(<argument pos:start="213:56" pos:end="213:57"><expr pos:start="213:56" pos:end="213:57"><name pos:start="213:56" pos:end="213:57">cs</name></expr></argument>, <argument pos:start="213:60" pos:end="213:67"><expr pos:start="213:60" pos:end="213:67"><name pos:start="213:60" pos:end="213:60">v</name> <operator pos:start="213:62" pos:end="213:62">&amp;</operator> <literal type="number" pos:start="213:64" pos:end="213:67">0x0F</literal></expr></argument>, <argument pos:start="213:70" pos:end="213:70"><expr pos:start="213:70" pos:end="213:70"><literal type="number" pos:start="213:70" pos:end="213:70">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="215:21" pos:end="215:47"><expr pos:start="215:21" pos:end="215:46"><name pos:start="215:21" pos:end="215:27">samples</name> <operator pos:start="215:29" pos:end="215:30">+=</operator> <name pos:start="215:32" pos:end="215:46"><name pos:start="215:32" pos:end="215:36">avctx</name><operator pos:start="215:37" pos:end="215:38">-&gt;</operator><name pos:start="215:39" pos:end="215:46">channels</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="217:21" pos:end="217:72"><expr pos:start="217:21" pos:end="217:71"><operator pos:start="217:21" pos:end="217:21">*</operator><name pos:start="217:22" pos:end="217:28">samples</name> <operator pos:start="217:30" pos:end="217:30">=</operator> <call pos:start="217:32" pos:end="217:71"><name pos:start="217:32" pos:end="217:54">adpcm_ima_expand_nibble</name><argument_list pos:start="217:55" pos:end="217:71">(<argument pos:start="217:56" pos:end="217:57"><expr pos:start="217:56" pos:end="217:57"><name pos:start="217:56" pos:end="217:57">cs</name></expr></argument>, <argument pos:start="217:60" pos:end="217:65"><expr pos:start="217:60" pos:end="217:65"><name pos:start="217:60" pos:end="217:60">v</name> <operator pos:start="217:62" pos:end="217:63">&gt;&gt;</operator> <literal type="number" pos:start="217:65" pos:end="217:65">4</literal></expr></argument>  , <argument pos:start="217:70" pos:end="217:70"><expr pos:start="217:70" pos:end="217:70"><literal type="number" pos:start="217:70" pos:end="217:70">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="219:21" pos:end="219:47"><expr pos:start="219:21" pos:end="219:46"><name pos:start="219:21" pos:end="219:27">samples</name> <operator pos:start="219:29" pos:end="219:30">+=</operator> <name pos:start="219:32" pos:end="219:46"><name pos:start="219:32" pos:end="219:36">avctx</name><operator pos:start="219:37" pos:end="219:38">-&gt;</operator><name pos:start="219:39" pos:end="219:46">channels</name></name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="223:17" pos:end="223:51"><expr pos:start="223:17" pos:end="223:50"><name pos:start="223:17" pos:end="223:23">samples</name> <operator pos:start="223:25" pos:end="223:26">-=</operator> <literal type="number" pos:start="223:28" pos:end="223:28">8</literal> <operator pos:start="223:30" pos:end="223:30">*</operator> <name pos:start="223:32" pos:end="223:46"><name pos:start="223:32" pos:end="223:36">avctx</name><operator pos:start="223:37" pos:end="223:38">-&gt;</operator><name pos:start="223:39" pos:end="223:46">channels</name></name> <operator pos:start="223:48" pos:end="223:48">-</operator> <literal type="number" pos:start="223:50" pos:end="223:50">1</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="227:13" pos:end="227:43"><expr pos:start="227:13" pos:end="227:42"><name pos:start="227:13" pos:end="227:19">samples</name> <operator pos:start="227:21" pos:end="227:22">+=</operator> <literal type="number" pos:start="227:24" pos:end="227:24">7</literal> <operator pos:start="227:26" pos:end="227:26">*</operator> <name pos:start="227:28" pos:end="227:42"><name pos:start="227:28" pos:end="227:32">avctx</name><operator pos:start="227:33" pos:end="227:34">-&gt;</operator><name pos:start="227:35" pos:end="227:42">channels</name></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="231:9" pos:end="231:14">break;</break>

    <case pos:start="233:5" pos:end="233:28">case <expr pos:start="233:10" pos:end="233:27"><name pos:start="233:10" pos:end="233:27">CODEC_ID_ADPCM_4XM</name></expr>:</case>

        <for pos:start="235:9" pos:end="237:71">for <control pos:start="235:13" pos:end="235:45">(<init pos:start="235:14" pos:end="235:19"><expr pos:start="235:14" pos:end="235:18"><name pos:start="235:14" pos:end="235:14">i</name> <operator pos:start="235:16" pos:end="235:16">=</operator> <literal type="number" pos:start="235:18" pos:end="235:18">0</literal></expr>;</init> <condition pos:start="235:21" pos:end="235:40"><expr pos:start="235:21" pos:end="235:39"><name pos:start="235:21" pos:end="235:21">i</name> <operator pos:start="235:23" pos:end="235:23">&lt;</operator> <name pos:start="235:25" pos:end="235:39"><name pos:start="235:25" pos:end="235:29">avctx</name><operator pos:start="235:30" pos:end="235:31">-&gt;</operator><name pos:start="235:32" pos:end="235:39">channels</name></name></expr>;</condition> <incr pos:start="235:42" pos:end="235:44"><expr pos:start="235:42" pos:end="235:44"><name pos:start="235:42" pos:end="235:42">i</name><operator pos:start="235:43" pos:end="235:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="237:13" pos:end="237:71"><block_content pos:start="237:13" pos:end="237:71">

            <expr_stmt pos:start="237:13" pos:end="237:71"><expr pos:start="237:13" pos:end="237:70"><name pos:start="237:13" pos:end="237:24"><name pos:start="237:13" pos:end="237:13">c</name><operator pos:start="237:14" pos:end="237:15">-&gt;</operator><name pos:start="237:16" pos:end="237:21">status</name><index pos:start="237:22" pos:end="237:24">[<expr pos:start="237:23" pos:end="237:23"><name pos:start="237:23" pos:end="237:23">i</name></expr>]</index></name><operator pos:start="237:25" pos:end="237:25">.</operator><name pos:start="237:26" pos:end="237:34">predictor</name><operator pos:start="237:35" pos:end="237:35">=</operator> <operator pos:start="237:37" pos:end="237:37">(</operator><name pos:start="237:38" pos:end="237:44">int16_t</name><operator pos:start="237:45" pos:end="237:45">)</operator><call pos:start="237:46" pos:end="237:70"><name pos:start="237:46" pos:end="237:64">bytestream_get_le16</name><argument_list pos:start="237:65" pos:end="237:70">(<argument pos:start="237:66" pos:end="237:69"><expr pos:start="237:66" pos:end="237:69"><operator pos:start="237:66" pos:end="237:66">&amp;</operator><name pos:start="237:67" pos:end="237:69">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="241:9" pos:end="247:9">for <control pos:start="241:13" pos:end="241:45">(<init pos:start="241:14" pos:end="241:19"><expr pos:start="241:14" pos:end="241:18"><name pos:start="241:14" pos:end="241:14">i</name> <operator pos:start="241:16" pos:end="241:16">=</operator> <literal type="number" pos:start="241:18" pos:end="241:18">0</literal></expr>;</init> <condition pos:start="241:21" pos:end="241:40"><expr pos:start="241:21" pos:end="241:39"><name pos:start="241:21" pos:end="241:21">i</name> <operator pos:start="241:23" pos:end="241:23">&lt;</operator> <name pos:start="241:25" pos:end="241:39"><name pos:start="241:25" pos:end="241:29">avctx</name><operator pos:start="241:30" pos:end="241:31">-&gt;</operator><name pos:start="241:32" pos:end="241:39">channels</name></name></expr>;</condition> <incr pos:start="241:42" pos:end="241:44"><expr pos:start="241:42" pos:end="241:44"><name pos:start="241:42" pos:end="241:42">i</name><operator pos:start="241:43" pos:end="241:44">++</operator></expr></incr>)</control> <block pos:start="241:47" pos:end="247:9">{<block_content pos:start="243:13" pos:end="245:78">

            <expr_stmt pos:start="243:13" pos:end="243:72"><expr pos:start="243:13" pos:end="243:71"><name pos:start="243:13" pos:end="243:24"><name pos:start="243:13" pos:end="243:13">c</name><operator pos:start="243:14" pos:end="243:15">-&gt;</operator><name pos:start="243:16" pos:end="243:21">status</name><index pos:start="243:22" pos:end="243:24">[<expr pos:start="243:23" pos:end="243:23"><name pos:start="243:23" pos:end="243:23">i</name></expr>]</index></name><operator pos:start="243:25" pos:end="243:25">.</operator><name pos:start="243:26" pos:end="243:35">step_index</name><operator pos:start="243:36" pos:end="243:36">=</operator> <operator pos:start="243:38" pos:end="243:38">(</operator><name pos:start="243:39" pos:end="243:45">int16_t</name><operator pos:start="243:46" pos:end="243:46">)</operator><call pos:start="243:47" pos:end="243:71"><name pos:start="243:47" pos:end="243:65">bytestream_get_le16</name><argument_list pos:start="243:66" pos:end="243:71">(<argument pos:start="243:67" pos:end="243:70"><expr pos:start="243:67" pos:end="243:70"><operator pos:start="243:67" pos:end="243:67">&amp;</operator><name pos:start="243:68" pos:end="243:70">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:78"><expr pos:start="245:13" pos:end="245:77"><name pos:start="245:13" pos:end="245:24"><name pos:start="245:13" pos:end="245:13">c</name><operator pos:start="245:14" pos:end="245:15">-&gt;</operator><name pos:start="245:16" pos:end="245:21">status</name><index pos:start="245:22" pos:end="245:24">[<expr pos:start="245:23" pos:end="245:23"><name pos:start="245:23" pos:end="245:23">i</name></expr>]</index></name><operator pos:start="245:25" pos:end="245:25">.</operator><name pos:start="245:26" pos:end="245:35">step_index</name> <operator pos:start="245:37" pos:end="245:37">=</operator> <call pos:start="245:39" pos:end="245:77"><name pos:start="245:39" pos:end="245:45">av_clip</name><argument_list pos:start="245:46" pos:end="245:77">(<argument pos:start="245:47" pos:end="245:69"><expr pos:start="245:47" pos:end="245:69"><name pos:start="245:47" pos:end="245:58"><name pos:start="245:47" pos:end="245:47">c</name><operator pos:start="245:48" pos:end="245:49">-&gt;</operator><name pos:start="245:50" pos:end="245:55">status</name><index pos:start="245:56" pos:end="245:58">[<expr pos:start="245:57" pos:end="245:57"><name pos:start="245:57" pos:end="245:57">i</name></expr>]</index></name><operator pos:start="245:59" pos:end="245:59">.</operator><name pos:start="245:60" pos:end="245:69">step_index</name></expr></argument>, <argument pos:start="245:72" pos:end="245:72"><expr pos:start="245:72" pos:end="245:72"><literal type="number" pos:start="245:72" pos:end="245:72">0</literal></expr></argument>, <argument pos:start="245:75" pos:end="245:76"><expr pos:start="245:75" pos:end="245:76"><literal type="number" pos:start="245:75" pos:end="245:76">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <for pos:start="251:9" pos:end="271:9">for <control pos:start="251:13" pos:end="251:45">(<init pos:start="251:14" pos:end="251:19"><expr pos:start="251:14" pos:end="251:18"><name pos:start="251:14" pos:end="251:14">i</name> <operator pos:start="251:16" pos:end="251:16">=</operator> <literal type="number" pos:start="251:18" pos:end="251:18">0</literal></expr>;</init> <condition pos:start="251:21" pos:end="251:40"><expr pos:start="251:21" pos:end="251:39"><name pos:start="251:21" pos:end="251:21">i</name> <operator pos:start="251:23" pos:end="251:23">&lt;</operator> <name pos:start="251:25" pos:end="251:39"><name pos:start="251:25" pos:end="251:29">avctx</name><operator pos:start="251:30" pos:end="251:31">-&gt;</operator><name pos:start="251:32" pos:end="251:39">channels</name></name></expr>;</condition> <incr pos:start="251:42" pos:end="251:44"><expr pos:start="251:42" pos:end="251:44"><name pos:start="251:42" pos:end="251:42">i</name><operator pos:start="251:43" pos:end="251:44">++</operator></expr></incr>)</control> <block pos:start="251:47" pos:end="271:9">{<block_content pos:start="253:13" pos:end="269:13">

            <expr_stmt pos:start="253:13" pos:end="253:52"><expr pos:start="253:13" pos:end="253:51"><name pos:start="253:13" pos:end="253:19">samples</name> <operator pos:start="253:21" pos:end="253:21">=</operator> <operator pos:start="253:23" pos:end="253:23">(</operator><name pos:start="253:24" pos:end="253:28">short</name> <operator pos:start="253:30" pos:end="253:30">*</operator><operator pos:start="253:31" pos:end="253:31">)</operator><name pos:start="253:32" pos:end="253:47"><name pos:start="253:32" pos:end="253:32">c</name><operator pos:start="253:33" pos:end="253:34">-&gt;</operator><name pos:start="253:35" pos:end="253:39">frame</name><operator pos:start="253:40" pos:end="253:40">.</operator><name pos:start="253:41" pos:end="253:44">data</name><index pos:start="253:45" pos:end="253:47">[<expr pos:start="253:46" pos:end="253:46"><literal type="number" pos:start="253:46" pos:end="253:46">0</literal></expr>]</index></name> <operator pos:start="253:49" pos:end="253:49">+</operator> <name pos:start="253:51" pos:end="253:51">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:31"><expr pos:start="255:13" pos:end="255:30"><name pos:start="255:13" pos:end="255:14">cs</name> <operator pos:start="255:16" pos:end="255:16">=</operator> <operator pos:start="255:18" pos:end="255:18">&amp;</operator><name pos:start="255:19" pos:end="255:30"><name pos:start="255:19" pos:end="255:19">c</name><operator pos:start="255:20" pos:end="255:21">-&gt;</operator><name pos:start="255:22" pos:end="255:27">status</name><index pos:start="255:28" pos:end="255:30">[<expr pos:start="255:29" pos:end="255:29"><name pos:start="255:29" pos:end="255:29">i</name></expr>]</index></name></expr>;</expr_stmt>

            <for pos:start="257:13" pos:end="269:13">for <control pos:start="257:17" pos:end="257:56">(<init pos:start="257:18" pos:end="257:37"><expr pos:start="257:18" pos:end="257:36"><name pos:start="257:18" pos:end="257:18">n</name> <operator pos:start="257:20" pos:end="257:20">=</operator> <name pos:start="257:22" pos:end="257:31">nb_samples</name> <operator pos:start="257:33" pos:end="257:34">&gt;&gt;</operator> <literal type="number" pos:start="257:36" pos:end="257:36">1</literal></expr>;</init> <condition pos:start="257:39" pos:end="257:44"><expr pos:start="257:39" pos:end="257:43"><name pos:start="257:39" pos:end="257:39">n</name> <operator pos:start="257:41" pos:end="257:41">&gt;</operator> <literal type="number" pos:start="257:43" pos:end="257:43">0</literal></expr>;</condition> <incr pos:start="257:46" pos:end="257:55"><expr pos:start="257:46" pos:end="257:48"><name pos:start="257:46" pos:end="257:46">n</name><operator pos:start="257:47" pos:end="257:48">--</operator></expr><operator pos:start="257:49" pos:end="257:49">,</operator> <expr pos:start="257:51" pos:end="257:55"><name pos:start="257:51" pos:end="257:53">src</name><operator pos:start="257:54" pos:end="257:55">++</operator></expr></incr>)</control> <block pos:start="257:58" pos:end="269:13">{<block_content pos:start="259:17" pos:end="267:43">

                <decl_stmt pos:start="259:17" pos:end="259:33"><decl pos:start="259:17" pos:end="259:32"><type pos:start="259:17" pos:end="259:23"><name pos:start="259:17" pos:end="259:23">uint8_t</name></type> <name pos:start="259:25" pos:end="259:25">v</name> <init pos:start="259:27" pos:end="259:32">= <expr pos:start="259:29" pos:end="259:32"><operator pos:start="259:29" pos:end="259:29">*</operator><name pos:start="259:30" pos:end="259:32">src</name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:68"><expr pos:start="261:17" pos:end="261:67"><operator pos:start="261:17" pos:end="261:17">*</operator><name pos:start="261:18" pos:end="261:24">samples</name> <operator pos:start="261:26" pos:end="261:26">=</operator> <call pos:start="261:28" pos:end="261:67"><name pos:start="261:28" pos:end="261:50">adpcm_ima_expand_nibble</name><argument_list pos:start="261:51" pos:end="261:67">(<argument pos:start="261:52" pos:end="261:53"><expr pos:start="261:52" pos:end="261:53"><name pos:start="261:52" pos:end="261:53">cs</name></expr></argument>, <argument pos:start="261:56" pos:end="261:63"><expr pos:start="261:56" pos:end="261:63"><name pos:start="261:56" pos:end="261:56">v</name> <operator pos:start="261:58" pos:end="261:58">&amp;</operator> <literal type="number" pos:start="261:60" pos:end="261:63">0x0F</literal></expr></argument>, <argument pos:start="261:66" pos:end="261:66"><expr pos:start="261:66" pos:end="261:66"><literal type="number" pos:start="261:66" pos:end="261:66">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:43"><expr pos:start="263:17" pos:end="263:42"><name pos:start="263:17" pos:end="263:23">samples</name> <operator pos:start="263:25" pos:end="263:26">+=</operator> <name pos:start="263:28" pos:end="263:42"><name pos:start="263:28" pos:end="263:32">avctx</name><operator pos:start="263:33" pos:end="263:34">-&gt;</operator><name pos:start="263:35" pos:end="263:42">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:68"><expr pos:start="265:17" pos:end="265:67"><operator pos:start="265:17" pos:end="265:17">*</operator><name pos:start="265:18" pos:end="265:24">samples</name> <operator pos:start="265:26" pos:end="265:26">=</operator> <call pos:start="265:28" pos:end="265:67"><name pos:start="265:28" pos:end="265:50">adpcm_ima_expand_nibble</name><argument_list pos:start="265:51" pos:end="265:67">(<argument pos:start="265:52" pos:end="265:53"><expr pos:start="265:52" pos:end="265:53"><name pos:start="265:52" pos:end="265:53">cs</name></expr></argument>, <argument pos:start="265:56" pos:end="265:61"><expr pos:start="265:56" pos:end="265:61"><name pos:start="265:56" pos:end="265:56">v</name> <operator pos:start="265:58" pos:end="265:59">&gt;&gt;</operator> <literal type="number" pos:start="265:61" pos:end="265:61">4</literal></expr></argument>  , <argument pos:start="265:66" pos:end="265:66"><expr pos:start="265:66" pos:end="265:66"><literal type="number" pos:start="265:66" pos:end="265:66">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:43"><expr pos:start="267:17" pos:end="267:42"><name pos:start="267:17" pos:end="267:23">samples</name> <operator pos:start="267:25" pos:end="267:26">+=</operator> <name pos:start="267:28" pos:end="267:42"><name pos:start="267:28" pos:end="267:32">avctx</name><operator pos:start="267:33" pos:end="267:34">-&gt;</operator><name pos:start="267:35" pos:end="267:42">channels</name></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="273:9" pos:end="273:14">break;</break>

    <case pos:start="275:5" pos:end="275:27">case <expr pos:start="275:10" pos:end="275:26"><name pos:start="275:10" pos:end="275:26">CODEC_ID_ADPCM_MS</name></expr>:</case>

    <block pos:start="277:5" pos:end="343:5">{<block_content pos:start="279:9" pos:end="341:14">

        <decl_stmt pos:start="279:9" pos:end="279:28"><decl pos:start="279:9" pos:end="279:27"><type pos:start="279:9" pos:end="279:11"><name pos:start="279:9" pos:end="279:11">int</name></type> <name pos:start="279:13" pos:end="279:27">block_predictor</name></decl>;</decl_stmt>



        <if_stmt pos:start="283:9" pos:end="285:42"><if pos:start="283:9" pos:end="285:42">if <condition pos:start="283:12" pos:end="283:69">(<expr pos:start="283:13" pos:end="283:68"><name pos:start="283:13" pos:end="283:30"><name pos:start="283:13" pos:end="283:17">avctx</name><operator pos:start="283:18" pos:end="283:19">-&gt;</operator><name pos:start="283:20" pos:end="283:30">block_align</name></name> <operator pos:start="283:32" pos:end="283:33">!=</operator> <literal type="number" pos:start="283:35" pos:end="283:35">0</literal> <operator pos:start="283:37" pos:end="283:38">&amp;&amp;</operator> <name pos:start="283:40" pos:end="283:47">buf_size</name> <operator pos:start="283:49" pos:end="283:49">&gt;</operator> <name pos:start="283:51" pos:end="283:68"><name pos:start="283:51" pos:end="283:55">avctx</name><operator pos:start="283:56" pos:end="283:57">-&gt;</operator><name pos:start="283:58" pos:end="283:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="285:13" pos:end="285:42"><block_content pos:start="285:13" pos:end="285:42">

            <expr_stmt pos:start="285:13" pos:end="285:42"><expr pos:start="285:13" pos:end="285:41"><name pos:start="285:13" pos:end="285:20">buf_size</name> <operator pos:start="285:22" pos:end="285:22">=</operator> <name pos:start="285:24" pos:end="285:41"><name pos:start="285:24" pos:end="285:28">avctx</name><operator pos:start="285:29" pos:end="285:30">-&gt;</operator><name pos:start="285:31" pos:end="285:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="289:9" pos:end="289:48"><expr pos:start="289:9" pos:end="289:47"><name pos:start="289:9" pos:end="289:23">block_predictor</name> <operator pos:start="289:25" pos:end="289:25">=</operator> <call pos:start="289:27" pos:end="289:47"><name pos:start="289:27" pos:end="289:33">av_clip</name><argument_list pos:start="289:34" pos:end="289:47">(<argument pos:start="289:35" pos:end="289:40"><expr pos:start="289:35" pos:end="289:40"><operator pos:start="289:35" pos:end="289:35">*</operator><name pos:start="289:36" pos:end="289:38">src</name><operator pos:start="289:39" pos:end="289:40">++</operator></expr></argument>, <argument pos:start="289:43" pos:end="289:43"><expr pos:start="289:43" pos:end="289:43"><literal type="number" pos:start="289:43" pos:end="289:43">0</literal></expr></argument>, <argument pos:start="289:46" pos:end="289:46"><expr pos:start="289:46" pos:end="289:46"><literal type="number" pos:start="289:46" pos:end="289:46">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:68"><expr pos:start="291:9" pos:end="291:67"><name pos:start="291:9" pos:end="291:20"><name pos:start="291:9" pos:end="291:9">c</name><operator pos:start="291:10" pos:end="291:11">-&gt;</operator><name pos:start="291:12" pos:end="291:17">status</name><index pos:start="291:18" pos:end="291:20">[<expr pos:start="291:19" pos:end="291:19"><literal type="number" pos:start="291:19" pos:end="291:19">0</literal></expr>]</index></name><operator pos:start="291:21" pos:end="291:21">.</operator><name pos:start="291:22" pos:end="291:27">coeff1</name> <operator pos:start="291:29" pos:end="291:29">=</operator> <name pos:start="291:31" pos:end="291:67"><name pos:start="291:31" pos:end="291:50">ff_adpcm_AdaptCoeff1</name><index pos:start="291:51" pos:end="291:67">[<expr pos:start="291:52" pos:end="291:66"><name pos:start="291:52" pos:end="291:66">block_predictor</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:68"><expr pos:start="293:9" pos:end="293:67"><name pos:start="293:9" pos:end="293:20"><name pos:start="293:9" pos:end="293:9">c</name><operator pos:start="293:10" pos:end="293:11">-&gt;</operator><name pos:start="293:12" pos:end="293:17">status</name><index pos:start="293:18" pos:end="293:20">[<expr pos:start="293:19" pos:end="293:19"><literal type="number" pos:start="293:19" pos:end="293:19">0</literal></expr>]</index></name><operator pos:start="293:21" pos:end="293:21">.</operator><name pos:start="293:22" pos:end="293:27">coeff2</name> <operator pos:start="293:29" pos:end="293:29">=</operator> <name pos:start="293:31" pos:end="293:67"><name pos:start="293:31" pos:end="293:50">ff_adpcm_AdaptCoeff2</name><index pos:start="293:51" pos:end="293:67">[<expr pos:start="293:52" pos:end="293:66"><name pos:start="293:52" pos:end="293:66">block_predictor</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="295:9" pos:end="303:9"><if pos:start="295:9" pos:end="303:9">if <condition pos:start="295:12" pos:end="295:15">(<expr pos:start="295:13" pos:end="295:14"><name pos:start="295:13" pos:end="295:14">st</name></expr>)</condition> <block pos:start="295:17" pos:end="303:9">{<block_content pos:start="297:13" pos:end="301:72">

            <expr_stmt pos:start="297:13" pos:end="297:52"><expr pos:start="297:13" pos:end="297:51"><name pos:start="297:13" pos:end="297:27">block_predictor</name> <operator pos:start="297:29" pos:end="297:29">=</operator> <call pos:start="297:31" pos:end="297:51"><name pos:start="297:31" pos:end="297:37">av_clip</name><argument_list pos:start="297:38" pos:end="297:51">(<argument pos:start="297:39" pos:end="297:44"><expr pos:start="297:39" pos:end="297:44"><operator pos:start="297:39" pos:end="297:39">*</operator><name pos:start="297:40" pos:end="297:42">src</name><operator pos:start="297:43" pos:end="297:44">++</operator></expr></argument>, <argument pos:start="297:47" pos:end="297:47"><expr pos:start="297:47" pos:end="297:47"><literal type="number" pos:start="297:47" pos:end="297:47">0</literal></expr></argument>, <argument pos:start="297:50" pos:end="297:50"><expr pos:start="297:50" pos:end="297:50"><literal type="number" pos:start="297:50" pos:end="297:50">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:72"><expr pos:start="299:13" pos:end="299:71"><name pos:start="299:13" pos:end="299:24"><name pos:start="299:13" pos:end="299:13">c</name><operator pos:start="299:14" pos:end="299:15">-&gt;</operator><name pos:start="299:16" pos:end="299:21">status</name><index pos:start="299:22" pos:end="299:24">[<expr pos:start="299:23" pos:end="299:23"><literal type="number" pos:start="299:23" pos:end="299:23">1</literal></expr>]</index></name><operator pos:start="299:25" pos:end="299:25">.</operator><name pos:start="299:26" pos:end="299:31">coeff1</name> <operator pos:start="299:33" pos:end="299:33">=</operator> <name pos:start="299:35" pos:end="299:71"><name pos:start="299:35" pos:end="299:54">ff_adpcm_AdaptCoeff1</name><index pos:start="299:55" pos:end="299:71">[<expr pos:start="299:56" pos:end="299:70"><name pos:start="299:56" pos:end="299:70">block_predictor</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:72"><expr pos:start="301:13" pos:end="301:71"><name pos:start="301:13" pos:end="301:24"><name pos:start="301:13" pos:end="301:13">c</name><operator pos:start="301:14" pos:end="301:15">-&gt;</operator><name pos:start="301:16" pos:end="301:21">status</name><index pos:start="301:22" pos:end="301:24">[<expr pos:start="301:23" pos:end="301:23"><literal type="number" pos:start="301:23" pos:end="301:23">1</literal></expr>]</index></name><operator pos:start="301:25" pos:end="301:25">.</operator><name pos:start="301:26" pos:end="301:31">coeff2</name> <operator pos:start="301:33" pos:end="301:33">=</operator> <name pos:start="301:35" pos:end="301:71"><name pos:start="301:35" pos:end="301:54">ff_adpcm_AdaptCoeff2</name><index pos:start="301:55" pos:end="301:71">[<expr pos:start="301:56" pos:end="301:70"><name pos:start="301:56" pos:end="301:70">block_predictor</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:65"><expr pos:start="305:9" pos:end="305:64"><name pos:start="305:9" pos:end="305:20"><name pos:start="305:9" pos:end="305:9">c</name><operator pos:start="305:10" pos:end="305:11">-&gt;</operator><name pos:start="305:12" pos:end="305:17">status</name><index pos:start="305:18" pos:end="305:20">[<expr pos:start="305:19" pos:end="305:19"><literal type="number" pos:start="305:19" pos:end="305:19">0</literal></expr>]</index></name><operator pos:start="305:21" pos:end="305:21">.</operator><name pos:start="305:22" pos:end="305:27">idelta</name> <operator pos:start="305:29" pos:end="305:29">=</operator> <operator pos:start="305:31" pos:end="305:31">(</operator><name pos:start="305:32" pos:end="305:38">int16_t</name><operator pos:start="305:39" pos:end="305:39">)</operator><call pos:start="305:40" pos:end="305:64"><name pos:start="305:40" pos:end="305:58">bytestream_get_le16</name><argument_list pos:start="305:59" pos:end="305:64">(<argument pos:start="305:60" pos:end="305:63"><expr pos:start="305:60" pos:end="305:63"><operator pos:start="305:60" pos:end="305:60">&amp;</operator><name pos:start="305:61" pos:end="305:63">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="307:9" pos:end="311:9"><if pos:start="307:9" pos:end="311:9">if <condition pos:start="307:12" pos:end="307:15">(<expr pos:start="307:13" pos:end="307:14"><name pos:start="307:13" pos:end="307:14">st</name></expr>)</condition><block pos:start="307:16" pos:end="311:9">{<block_content pos:start="309:13" pos:end="309:69">

            <expr_stmt pos:start="309:13" pos:end="309:69"><expr pos:start="309:13" pos:end="309:68"><name pos:start="309:13" pos:end="309:24"><name pos:start="309:13" pos:end="309:13">c</name><operator pos:start="309:14" pos:end="309:15">-&gt;</operator><name pos:start="309:16" pos:end="309:21">status</name><index pos:start="309:22" pos:end="309:24">[<expr pos:start="309:23" pos:end="309:23"><literal type="number" pos:start="309:23" pos:end="309:23">1</literal></expr>]</index></name><operator pos:start="309:25" pos:end="309:25">.</operator><name pos:start="309:26" pos:end="309:31">idelta</name> <operator pos:start="309:33" pos:end="309:33">=</operator> <operator pos:start="309:35" pos:end="309:35">(</operator><name pos:start="309:36" pos:end="309:42">int16_t</name><operator pos:start="309:43" pos:end="309:43">)</operator><call pos:start="309:44" pos:end="309:68"><name pos:start="309:44" pos:end="309:62">bytestream_get_le16</name><argument_list pos:start="309:63" pos:end="309:68">(<argument pos:start="309:64" pos:end="309:67"><expr pos:start="309:64" pos:end="309:67"><operator pos:start="309:64" pos:end="309:64">&amp;</operator><name pos:start="309:65" pos:end="309:67">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="315:9" pos:end="315:57"><expr pos:start="315:9" pos:end="315:56"><name pos:start="315:9" pos:end="315:20"><name pos:start="315:9" pos:end="315:9">c</name><operator pos:start="315:10" pos:end="315:11">-&gt;</operator><name pos:start="315:12" pos:end="315:17">status</name><index pos:start="315:18" pos:end="315:20">[<expr pos:start="315:19" pos:end="315:19"><literal type="number" pos:start="315:19" pos:end="315:19">0</literal></expr>]</index></name><operator pos:start="315:21" pos:end="315:21">.</operator><name pos:start="315:22" pos:end="315:28">sample1</name> <operator pos:start="315:30" pos:end="315:30">=</operator> <call pos:start="315:32" pos:end="315:56"><name pos:start="315:32" pos:end="315:50">bytestream_get_le16</name><argument_list pos:start="315:51" pos:end="315:56">(<argument pos:start="315:52" pos:end="315:55"><expr pos:start="315:52" pos:end="315:55"><operator pos:start="315:52" pos:end="315:52">&amp;</operator><name pos:start="315:53" pos:end="315:55">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="317:9" pos:end="317:65"><if pos:start="317:9" pos:end="317:65">if <condition pos:start="317:12" pos:end="317:15">(<expr pos:start="317:13" pos:end="317:14"><name pos:start="317:13" pos:end="317:14">st</name></expr>)</condition><block type="pseudo" pos:start="317:17" pos:end="317:65"><block_content pos:start="317:17" pos:end="317:65"> <expr_stmt pos:start="317:17" pos:end="317:65"><expr pos:start="317:17" pos:end="317:64"><name pos:start="317:17" pos:end="317:28"><name pos:start="317:17" pos:end="317:17">c</name><operator pos:start="317:18" pos:end="317:19">-&gt;</operator><name pos:start="317:20" pos:end="317:25">status</name><index pos:start="317:26" pos:end="317:28">[<expr pos:start="317:27" pos:end="317:27"><literal type="number" pos:start="317:27" pos:end="317:27">1</literal></expr>]</index></name><operator pos:start="317:29" pos:end="317:29">.</operator><name pos:start="317:30" pos:end="317:36">sample1</name> <operator pos:start="317:38" pos:end="317:38">=</operator> <call pos:start="317:40" pos:end="317:64"><name pos:start="317:40" pos:end="317:58">bytestream_get_le16</name><argument_list pos:start="317:59" pos:end="317:64">(<argument pos:start="317:60" pos:end="317:63"><expr pos:start="317:60" pos:end="317:63"><operator pos:start="317:60" pos:end="317:60">&amp;</operator><name pos:start="317:61" pos:end="317:63">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:57"><expr pos:start="319:9" pos:end="319:56"><name pos:start="319:9" pos:end="319:20"><name pos:start="319:9" pos:end="319:9">c</name><operator pos:start="319:10" pos:end="319:11">-&gt;</operator><name pos:start="319:12" pos:end="319:17">status</name><index pos:start="319:18" pos:end="319:20">[<expr pos:start="319:19" pos:end="319:19"><literal type="number" pos:start="319:19" pos:end="319:19">0</literal></expr>]</index></name><operator pos:start="319:21" pos:end="319:21">.</operator><name pos:start="319:22" pos:end="319:28">sample2</name> <operator pos:start="319:30" pos:end="319:30">=</operator> <call pos:start="319:32" pos:end="319:56"><name pos:start="319:32" pos:end="319:50">bytestream_get_le16</name><argument_list pos:start="319:51" pos:end="319:56">(<argument pos:start="319:52" pos:end="319:55"><expr pos:start="319:52" pos:end="319:55"><operator pos:start="319:52" pos:end="319:52">&amp;</operator><name pos:start="319:53" pos:end="319:55">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="321:9" pos:end="321:65"><if pos:start="321:9" pos:end="321:65">if <condition pos:start="321:12" pos:end="321:15">(<expr pos:start="321:13" pos:end="321:14"><name pos:start="321:13" pos:end="321:14">st</name></expr>)</condition><block type="pseudo" pos:start="321:17" pos:end="321:65"><block_content pos:start="321:17" pos:end="321:65"> <expr_stmt pos:start="321:17" pos:end="321:65"><expr pos:start="321:17" pos:end="321:64"><name pos:start="321:17" pos:end="321:28"><name pos:start="321:17" pos:end="321:17">c</name><operator pos:start="321:18" pos:end="321:19">-&gt;</operator><name pos:start="321:20" pos:end="321:25">status</name><index pos:start="321:26" pos:end="321:28">[<expr pos:start="321:27" pos:end="321:27"><literal type="number" pos:start="321:27" pos:end="321:27">1</literal></expr>]</index></name><operator pos:start="321:29" pos:end="321:29">.</operator><name pos:start="321:30" pos:end="321:36">sample2</name> <operator pos:start="321:38" pos:end="321:38">=</operator> <call pos:start="321:40" pos:end="321:64"><name pos:start="321:40" pos:end="321:58">bytestream_get_le16</name><argument_list pos:start="321:59" pos:end="321:64">(<argument pos:start="321:60" pos:end="321:63"><expr pos:start="321:60" pos:end="321:63"><operator pos:start="321:60" pos:end="321:60">&amp;</operator><name pos:start="321:61" pos:end="321:63">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="325:9" pos:end="325:42"><expr pos:start="325:9" pos:end="325:41"><operator pos:start="325:9" pos:end="325:9">*</operator><name pos:start="325:10" pos:end="325:16">samples</name><operator pos:start="325:17" pos:end="325:18">++</operator> <operator pos:start="325:20" pos:end="325:20">=</operator> <name pos:start="325:22" pos:end="325:33"><name pos:start="325:22" pos:end="325:22">c</name><operator pos:start="325:23" pos:end="325:24">-&gt;</operator><name pos:start="325:25" pos:end="325:30">status</name><index pos:start="325:31" pos:end="325:33">[<expr pos:start="325:32" pos:end="325:32"><literal type="number" pos:start="325:32" pos:end="325:32">0</literal></expr>]</index></name><operator pos:start="325:34" pos:end="325:34">.</operator><name pos:start="325:35" pos:end="325:41">sample2</name></expr>;</expr_stmt>

        <if_stmt pos:start="327:9" pos:end="327:50"><if pos:start="327:9" pos:end="327:50">if <condition pos:start="327:12" pos:end="327:15">(<expr pos:start="327:13" pos:end="327:14"><name pos:start="327:13" pos:end="327:14">st</name></expr>)</condition><block type="pseudo" pos:start="327:17" pos:end="327:50"><block_content pos:start="327:17" pos:end="327:50"> <expr_stmt pos:start="327:17" pos:end="327:50"><expr pos:start="327:17" pos:end="327:49"><operator pos:start="327:17" pos:end="327:17">*</operator><name pos:start="327:18" pos:end="327:24">samples</name><operator pos:start="327:25" pos:end="327:26">++</operator> <operator pos:start="327:28" pos:end="327:28">=</operator> <name pos:start="327:30" pos:end="327:41"><name pos:start="327:30" pos:end="327:30">c</name><operator pos:start="327:31" pos:end="327:32">-&gt;</operator><name pos:start="327:33" pos:end="327:38">status</name><index pos:start="327:39" pos:end="327:41">[<expr pos:start="327:40" pos:end="327:40"><literal type="number" pos:start="327:40" pos:end="327:40">1</literal></expr>]</index></name><operator pos:start="327:42" pos:end="327:42">.</operator><name pos:start="327:43" pos:end="327:49">sample2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:42"><expr pos:start="329:9" pos:end="329:41"><operator pos:start="329:9" pos:end="329:9">*</operator><name pos:start="329:10" pos:end="329:16">samples</name><operator pos:start="329:17" pos:end="329:18">++</operator> <operator pos:start="329:20" pos:end="329:20">=</operator> <name pos:start="329:22" pos:end="329:33"><name pos:start="329:22" pos:end="329:22">c</name><operator pos:start="329:23" pos:end="329:24">-&gt;</operator><name pos:start="329:25" pos:end="329:30">status</name><index pos:start="329:31" pos:end="329:33">[<expr pos:start="329:32" pos:end="329:32"><literal type="number" pos:start="329:32" pos:end="329:32">0</literal></expr>]</index></name><operator pos:start="329:34" pos:end="329:34">.</operator><name pos:start="329:35" pos:end="329:41">sample1</name></expr>;</expr_stmt>

        <if_stmt pos:start="331:9" pos:end="331:50"><if pos:start="331:9" pos:end="331:50">if <condition pos:start="331:12" pos:end="331:15">(<expr pos:start="331:13" pos:end="331:14"><name pos:start="331:13" pos:end="331:14">st</name></expr>)</condition><block type="pseudo" pos:start="331:17" pos:end="331:50"><block_content pos:start="331:17" pos:end="331:50"> <expr_stmt pos:start="331:17" pos:end="331:50"><expr pos:start="331:17" pos:end="331:49"><operator pos:start="331:17" pos:end="331:17">*</operator><name pos:start="331:18" pos:end="331:24">samples</name><operator pos:start="331:25" pos:end="331:26">++</operator> <operator pos:start="331:28" pos:end="331:28">=</operator> <name pos:start="331:30" pos:end="331:41"><name pos:start="331:30" pos:end="331:30">c</name><operator pos:start="331:31" pos:end="331:32">-&gt;</operator><name pos:start="331:33" pos:end="331:38">status</name><index pos:start="331:39" pos:end="331:41">[<expr pos:start="331:40" pos:end="331:40"><literal type="number" pos:start="331:40" pos:end="331:40">1</literal></expr>]</index></name><operator pos:start="331:42" pos:end="331:42">.</operator><name pos:start="331:43" pos:end="331:49">sample1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for pos:start="333:9" pos:end="339:9">for<control pos:start="333:12" pos:end="333:64">(<init pos:start="333:13" pos:end="333:45"><expr pos:start="333:13" pos:end="333:44"><name pos:start="333:13" pos:end="333:13">n</name> <operator pos:start="333:15" pos:end="333:15">=</operator> <operator pos:start="333:17" pos:end="333:17">(</operator><name pos:start="333:18" pos:end="333:27">nb_samples</name> <operator pos:start="333:29" pos:end="333:29">-</operator> <literal type="number" pos:start="333:31" pos:end="333:31">2</literal><operator pos:start="333:32" pos:end="333:32">)</operator> <operator pos:start="333:34" pos:end="333:35">&gt;&gt;</operator> <operator pos:start="333:37" pos:end="333:37">(</operator><literal type="number" pos:start="333:38" pos:end="333:40">1</literal> <operator pos:start="333:40" pos:end="333:40">-</operator> <name pos:start="333:42" pos:end="333:43">st</name><operator pos:start="333:44" pos:end="333:44">)</operator></expr>;</init> <condition pos:start="333:47" pos:end="333:52"><expr pos:start="333:47" pos:end="333:51"><name pos:start="333:47" pos:end="333:47">n</name> <operator pos:start="333:49" pos:end="333:49">&gt;</operator> <literal type="number" pos:start="333:51" pos:end="333:51">0</literal></expr>;</condition> <incr pos:start="333:54" pos:end="333:63"><expr pos:start="333:54" pos:end="333:56"><name pos:start="333:54" pos:end="333:54">n</name><operator pos:start="333:55" pos:end="333:56">--</operator></expr><operator pos:start="333:57" pos:end="333:57">,</operator> <expr pos:start="333:59" pos:end="333:63"><name pos:start="333:59" pos:end="333:61">src</name><operator pos:start="333:62" pos:end="333:63">++</operator></expr></incr>)</control> <block pos:start="333:66" pos:end="339:9">{<block_content pos:start="335:13" pos:end="337:79">

            <expr_stmt pos:start="335:13" pos:end="335:79"><expr pos:start="335:13" pos:end="335:78"><operator pos:start="335:13" pos:end="335:13">*</operator><name pos:start="335:14" pos:end="335:20">samples</name><operator pos:start="335:21" pos:end="335:22">++</operator> <operator pos:start="335:24" pos:end="335:24">=</operator> <call pos:start="335:26" pos:end="335:78"><name pos:start="335:26" pos:end="335:47">adpcm_ms_expand_nibble</name><argument_list pos:start="335:48" pos:end="335:78">(<argument pos:start="335:49" pos:end="335:62"><expr pos:start="335:49" pos:end="335:62"><operator pos:start="335:49" pos:end="335:49">&amp;</operator><name pos:start="335:50" pos:end="335:62"><name pos:start="335:50" pos:end="335:50">c</name><operator pos:start="335:51" pos:end="335:52">-&gt;</operator><name pos:start="335:53" pos:end="335:58">status</name><index pos:start="335:59" pos:end="335:62">[<expr pos:start="335:60" pos:end="335:60"><literal type="number" pos:start="335:60" pos:end="335:60">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="335:65" pos:end="335:75"><expr pos:start="335:65" pos:end="335:75"><name pos:start="335:65" pos:end="335:70"><name pos:start="335:65" pos:end="335:67">src</name><index pos:start="335:68" pos:end="335:70">[<expr pos:start="335:69" pos:end="335:69"><literal type="number" pos:start="335:69" pos:end="335:69">0</literal></expr>]</index></name> <operator pos:start="335:72" pos:end="335:73">&gt;&gt;</operator> <literal type="number" pos:start="335:75" pos:end="335:75">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="337:13" pos:end="337:79"><expr pos:start="337:13" pos:end="337:78"><operator pos:start="337:13" pos:end="337:13">*</operator><name pos:start="337:14" pos:end="337:20">samples</name><operator pos:start="337:21" pos:end="337:22">++</operator> <operator pos:start="337:24" pos:end="337:24">=</operator> <call pos:start="337:26" pos:end="337:78"><name pos:start="337:26" pos:end="337:47">adpcm_ms_expand_nibble</name><argument_list pos:start="337:48" pos:end="337:78">(<argument pos:start="337:49" pos:end="337:62"><expr pos:start="337:49" pos:end="337:62"><operator pos:start="337:49" pos:end="337:49">&amp;</operator><name pos:start="337:50" pos:end="337:62"><name pos:start="337:50" pos:end="337:50">c</name><operator pos:start="337:51" pos:end="337:52">-&gt;</operator><name pos:start="337:53" pos:end="337:58">status</name><index pos:start="337:59" pos:end="337:62">[<expr pos:start="337:60" pos:end="337:61"><name pos:start="337:60" pos:end="337:61">st</name></expr>]</index></name></expr></argument>, <argument pos:start="337:65" pos:end="337:77"><expr pos:start="337:65" pos:end="337:77"><name pos:start="337:65" pos:end="337:70"><name pos:start="337:65" pos:end="337:67">src</name><index pos:start="337:68" pos:end="337:70">[<expr pos:start="337:69" pos:end="337:69"><literal type="number" pos:start="337:69" pos:end="337:69">0</literal></expr>]</index></name> <operator pos:start="337:72" pos:end="337:72">&amp;</operator> <literal type="number" pos:start="337:74" pos:end="337:77">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="341:9" pos:end="341:14">break;</break>

    </block_content>}</block>

    <case pos:start="345:5" pos:end="345:32">case <expr pos:start="345:10" pos:end="345:31"><name pos:start="345:10" pos:end="345:31">CODEC_ID_ADPCM_IMA_DK4</name></expr>:</case>

        <if_stmt pos:start="347:9" pos:end="349:42"><if pos:start="347:9" pos:end="349:42">if <condition pos:start="347:12" pos:end="347:69">(<expr pos:start="347:13" pos:end="347:68"><name pos:start="347:13" pos:end="347:30"><name pos:start="347:13" pos:end="347:17">avctx</name><operator pos:start="347:18" pos:end="347:19">-&gt;</operator><name pos:start="347:20" pos:end="347:30">block_align</name></name> <operator pos:start="347:32" pos:end="347:33">!=</operator> <literal type="number" pos:start="347:35" pos:end="347:35">0</literal> <operator pos:start="347:37" pos:end="347:38">&amp;&amp;</operator> <name pos:start="347:40" pos:end="347:47">buf_size</name> <operator pos:start="347:49" pos:end="347:49">&gt;</operator> <name pos:start="347:51" pos:end="347:68"><name pos:start="347:51" pos:end="347:55">avctx</name><operator pos:start="347:56" pos:end="347:57">-&gt;</operator><name pos:start="347:58" pos:end="347:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="349:13" pos:end="349:42"><block_content pos:start="349:13" pos:end="349:42">

            <expr_stmt pos:start="349:13" pos:end="349:42"><expr pos:start="349:13" pos:end="349:41"><name pos:start="349:13" pos:end="349:20">buf_size</name> <operator pos:start="349:22" pos:end="349:22">=</operator> <name pos:start="349:24" pos:end="349:41"><name pos:start="349:24" pos:end="349:28">avctx</name><operator pos:start="349:29" pos:end="349:30">-&gt;</operator><name pos:start="349:31" pos:end="349:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="353:9" pos:end="365:9">for <control pos:start="353:13" pos:end="353:63">(<init pos:start="353:14" pos:end="353:25"><expr pos:start="353:14" pos:end="353:24"><name pos:start="353:14" pos:end="353:20">channel</name> <operator pos:start="353:22" pos:end="353:22">=</operator> <literal type="number" pos:start="353:24" pos:end="353:24">0</literal></expr>;</init> <condition pos:start="353:27" pos:end="353:52"><expr pos:start="353:27" pos:end="353:51"><name pos:start="353:27" pos:end="353:33">channel</name> <operator pos:start="353:35" pos:end="353:35">&lt;</operator> <name pos:start="353:37" pos:end="353:51"><name pos:start="353:37" pos:end="353:41">avctx</name><operator pos:start="353:42" pos:end="353:43">-&gt;</operator><name pos:start="353:44" pos:end="353:51">channels</name></name></expr>;</condition> <incr pos:start="353:54" pos:end="353:62"><expr pos:start="353:54" pos:end="353:62"><name pos:start="353:54" pos:end="353:60">channel</name><operator pos:start="353:61" pos:end="353:62">++</operator></expr></incr>)</control> <block pos:start="353:65" pos:end="365:9">{<block_content pos:start="355:13" pos:end="363:39">

            <expr_stmt pos:start="355:13" pos:end="355:37"><expr pos:start="355:13" pos:end="355:36"><name pos:start="355:13" pos:end="355:14">cs</name> <operator pos:start="355:16" pos:end="355:16">=</operator> <operator pos:start="355:18" pos:end="355:18">&amp;</operator><name pos:start="355:19" pos:end="355:36"><name pos:start="355:19" pos:end="355:19">c</name><operator pos:start="355:20" pos:end="355:21">-&gt;</operator><name pos:start="355:22" pos:end="355:27">status</name><index pos:start="355:28" pos:end="355:36">[<expr pos:start="355:29" pos:end="355:35"><name pos:start="355:29" pos:end="355:35">channel</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:64"><expr pos:start="357:13" pos:end="357:63"><name pos:start="357:13" pos:end="357:25"><name pos:start="357:13" pos:end="357:14">cs</name><operator pos:start="357:15" pos:end="357:16">-&gt;</operator><name pos:start="357:17" pos:end="357:25">predictor</name></name>  <operator pos:start="357:28" pos:end="357:28">=</operator> <operator pos:start="357:30" pos:end="357:30">(</operator><name pos:start="357:31" pos:end="357:37">int16_t</name><operator pos:start="357:38" pos:end="357:38">)</operator><call pos:start="357:39" pos:end="357:63"><name pos:start="357:39" pos:end="357:57">bytestream_get_le16</name><argument_list pos:start="357:58" pos:end="357:63">(<argument pos:start="357:59" pos:end="357:62"><expr pos:start="357:59" pos:end="357:62"><operator pos:start="357:59" pos:end="357:59">&amp;</operator><name pos:start="357:60" pos:end="357:62">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="359:13" pos:end="359:52"><expr pos:start="359:13" pos:end="359:51"><name pos:start="359:13" pos:end="359:26"><name pos:start="359:13" pos:end="359:14">cs</name><operator pos:start="359:15" pos:end="359:16">-&gt;</operator><name pos:start="359:17" pos:end="359:26">step_index</name></name> <operator pos:start="359:28" pos:end="359:28">=</operator> <call pos:start="359:30" pos:end="359:51"><name pos:start="359:30" pos:end="359:36">av_clip</name><argument_list pos:start="359:37" pos:end="359:51">(<argument pos:start="359:38" pos:end="359:43"><expr pos:start="359:38" pos:end="359:43"><operator pos:start="359:38" pos:end="359:38">*</operator><name pos:start="359:39" pos:end="359:41">src</name><operator pos:start="359:42" pos:end="359:43">++</operator></expr></argument>, <argument pos:start="359:46" pos:end="359:46"><expr pos:start="359:46" pos:end="359:46"><literal type="number" pos:start="359:46" pos:end="359:46">0</literal></expr></argument>, <argument pos:start="359:49" pos:end="359:50"><expr pos:start="359:49" pos:end="359:50"><literal type="number" pos:start="359:49" pos:end="359:50">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="361:13" pos:end="361:18"><expr pos:start="361:13" pos:end="361:17"><name pos:start="361:13" pos:end="361:15">src</name><operator pos:start="361:16" pos:end="361:17">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="363:13" pos:end="363:39"><expr pos:start="363:13" pos:end="363:38"><operator pos:start="363:13" pos:end="363:13">*</operator><name pos:start="363:14" pos:end="363:20">samples</name><operator pos:start="363:21" pos:end="363:22">++</operator> <operator pos:start="363:24" pos:end="363:24">=</operator> <name pos:start="363:26" pos:end="363:38"><name pos:start="363:26" pos:end="363:27">cs</name><operator pos:start="363:28" pos:end="363:29">-&gt;</operator><name pos:start="363:30" pos:end="363:38">predictor</name></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="367:9" pos:end="375:9">for <control pos:start="367:13" pos:end="367:59">(<init pos:start="367:14" pos:end="367:40"><expr pos:start="367:14" pos:end="367:39"><name pos:start="367:14" pos:end="367:14">n</name> <operator pos:start="367:16" pos:end="367:16">=</operator> <name pos:start="367:18" pos:end="367:27">nb_samples</name> <operator pos:start="367:29" pos:end="367:30">&gt;&gt;</operator> <operator pos:start="367:32" pos:end="367:32">(</operator><literal type="number" pos:start="367:33" pos:end="367:35">1</literal> <operator pos:start="367:35" pos:end="367:35">-</operator> <name pos:start="367:37" pos:end="367:38">st</name><operator pos:start="367:39" pos:end="367:39">)</operator></expr>;</init> <condition pos:start="367:42" pos:end="367:47"><expr pos:start="367:42" pos:end="367:46"><name pos:start="367:42" pos:end="367:42">n</name> <operator pos:start="367:44" pos:end="367:44">&gt;</operator> <literal type="number" pos:start="367:46" pos:end="367:46">0</literal></expr>;</condition> <incr pos:start="367:49" pos:end="367:58"><expr pos:start="367:49" pos:end="367:51"><name pos:start="367:49" pos:end="367:49">n</name><operator pos:start="367:50" pos:end="367:51">--</operator></expr><operator pos:start="367:52" pos:end="367:52">,</operator> <expr pos:start="367:54" pos:end="367:58"><name pos:start="367:54" pos:end="367:56">src</name><operator pos:start="367:57" pos:end="367:58">++</operator></expr></incr>)</control> <block pos:start="367:61" pos:end="375:9">{<block_content pos:start="369:13" pos:end="373:78">

            <decl_stmt pos:start="369:13" pos:end="369:29"><decl pos:start="369:13" pos:end="369:28"><type pos:start="369:13" pos:end="369:19"><name pos:start="369:13" pos:end="369:19">uint8_t</name></type> <name pos:start="369:21" pos:end="369:21">v</name> <init pos:start="369:23" pos:end="369:28">= <expr pos:start="369:25" pos:end="369:28"><operator pos:start="369:25" pos:end="369:25">*</operator><name pos:start="369:26" pos:end="369:28">src</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:78"><expr pos:start="371:13" pos:end="371:77"><operator pos:start="371:13" pos:end="371:13">*</operator><name pos:start="371:14" pos:end="371:20">samples</name><operator pos:start="371:21" pos:end="371:22">++</operator> <operator pos:start="371:24" pos:end="371:24">=</operator> <call pos:start="371:26" pos:end="371:77"><name pos:start="371:26" pos:end="371:48">adpcm_ima_expand_nibble</name><argument_list pos:start="371:49" pos:end="371:77">(<argument pos:start="371:50" pos:end="371:63"><expr pos:start="371:50" pos:end="371:63"><operator pos:start="371:50" pos:end="371:50">&amp;</operator><name pos:start="371:51" pos:end="371:63"><name pos:start="371:51" pos:end="371:51">c</name><operator pos:start="371:52" pos:end="371:53">-&gt;</operator><name pos:start="371:54" pos:end="371:59">status</name><index pos:start="371:60" pos:end="371:63">[<expr pos:start="371:61" pos:end="371:61"><literal type="number" pos:start="371:61" pos:end="371:61">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="371:66" pos:end="371:71"><expr pos:start="371:66" pos:end="371:71"><name pos:start="371:66" pos:end="371:66">v</name> <operator pos:start="371:68" pos:end="371:69">&gt;&gt;</operator> <literal type="number" pos:start="371:71" pos:end="371:71">4</literal></expr></argument>  , <argument pos:start="371:76" pos:end="371:76"><expr pos:start="371:76" pos:end="371:76"><literal type="number" pos:start="371:76" pos:end="371:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="373:13" pos:end="373:78"><expr pos:start="373:13" pos:end="373:77"><operator pos:start="373:13" pos:end="373:13">*</operator><name pos:start="373:14" pos:end="373:20">samples</name><operator pos:start="373:21" pos:end="373:22">++</operator> <operator pos:start="373:24" pos:end="373:24">=</operator> <call pos:start="373:26" pos:end="373:77"><name pos:start="373:26" pos:end="373:48">adpcm_ima_expand_nibble</name><argument_list pos:start="373:49" pos:end="373:77">(<argument pos:start="373:50" pos:end="373:63"><expr pos:start="373:50" pos:end="373:63"><operator pos:start="373:50" pos:end="373:50">&amp;</operator><name pos:start="373:51" pos:end="373:63"><name pos:start="373:51" pos:end="373:51">c</name><operator pos:start="373:52" pos:end="373:53">-&gt;</operator><name pos:start="373:54" pos:end="373:59">status</name><index pos:start="373:60" pos:end="373:63">[<expr pos:start="373:61" pos:end="373:62"><name pos:start="373:61" pos:end="373:62">st</name></expr>]</index></name></expr></argument>, <argument pos:start="373:66" pos:end="373:73"><expr pos:start="373:66" pos:end="373:73"><name pos:start="373:66" pos:end="373:66">v</name> <operator pos:start="373:68" pos:end="373:68">&amp;</operator> <literal type="number" pos:start="373:70" pos:end="373:73">0x0F</literal></expr></argument>, <argument pos:start="373:76" pos:end="373:76"><expr pos:start="373:76" pos:end="373:76"><literal type="number" pos:start="373:76" pos:end="373:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="377:9" pos:end="377:14">break;</break>

    <case pos:start="379:5" pos:end="379:32">case <expr pos:start="379:10" pos:end="379:31"><name pos:start="379:10" pos:end="379:31">CODEC_ID_ADPCM_IMA_DK3</name></expr>:</case>

    <block pos:start="381:5" pos:end="477:5">{<block_content pos:start="383:9" pos:end="475:14">

        <decl_stmt pos:start="383:9" pos:end="383:36"><decl pos:start="383:9" pos:end="383:35"><type pos:start="383:9" pos:end="383:21"><name pos:start="383:9" pos:end="383:16">unsigned</name> <name pos:start="383:18" pos:end="383:21">char</name></type> <name pos:start="383:23" pos:end="383:31">last_byte</name> <init pos:start="383:33" pos:end="383:35">= <expr pos:start="383:35" pos:end="383:35"><literal type="number" pos:start="383:35" pos:end="383:35">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="385:9" pos:end="385:29"><decl pos:start="385:9" pos:end="385:28"><type pos:start="385:9" pos:end="385:21"><name pos:start="385:9" pos:end="385:16">unsigned</name> <name pos:start="385:18" pos:end="385:21">char</name></type> <name pos:start="385:23" pos:end="385:28">nibble</name></decl>;</decl_stmt>

        <decl_stmt pos:start="387:9" pos:end="387:39"><decl pos:start="387:9" pos:end="387:38"><type pos:start="387:9" pos:end="387:11"><name pos:start="387:9" pos:end="387:11">int</name></type> <name pos:start="387:13" pos:end="387:34">decode_top_nibble_next</name> <init pos:start="387:36" pos:end="387:38">= <expr pos:start="387:38" pos:end="387:38"><literal type="number" pos:start="387:38" pos:end="387:38">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="389:9" pos:end="389:30"><decl pos:start="389:9" pos:end="389:29"><type pos:start="389:9" pos:end="389:11"><name pos:start="389:9" pos:end="389:11">int</name></type> <name pos:start="389:13" pos:end="389:25">end_of_packet</name> <init pos:start="389:27" pos:end="389:29">= <expr pos:start="389:29" pos:end="389:29"><literal type="number" pos:start="389:29" pos:end="389:29">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="391:9" pos:end="391:25"><decl pos:start="391:9" pos:end="391:24"><type pos:start="391:9" pos:end="391:11"><name pos:start="391:9" pos:end="391:11">int</name></type> <name pos:start="391:13" pos:end="391:24">diff_channel</name></decl>;</decl_stmt>



        <if_stmt pos:start="395:9" pos:end="397:42"><if pos:start="395:9" pos:end="397:42">if <condition pos:start="395:12" pos:end="395:69">(<expr pos:start="395:13" pos:end="395:68"><name pos:start="395:13" pos:end="395:30"><name pos:start="395:13" pos:end="395:17">avctx</name><operator pos:start="395:18" pos:end="395:19">-&gt;</operator><name pos:start="395:20" pos:end="395:30">block_align</name></name> <operator pos:start="395:32" pos:end="395:33">!=</operator> <literal type="number" pos:start="395:35" pos:end="395:35">0</literal> <operator pos:start="395:37" pos:end="395:38">&amp;&amp;</operator> <name pos:start="395:40" pos:end="395:47">buf_size</name> <operator pos:start="395:49" pos:end="395:49">&gt;</operator> <name pos:start="395:51" pos:end="395:68"><name pos:start="395:51" pos:end="395:55">avctx</name><operator pos:start="395:56" pos:end="395:57">-&gt;</operator><name pos:start="395:58" pos:end="395:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="397:13" pos:end="397:42"><block_content pos:start="397:13" pos:end="397:42">

            <expr_stmt pos:start="397:13" pos:end="397:42"><expr pos:start="397:13" pos:end="397:41"><name pos:start="397:13" pos:end="397:20">buf_size</name> <operator pos:start="397:22" pos:end="397:22">=</operator> <name pos:start="397:24" pos:end="397:41"><name pos:start="397:24" pos:end="397:28">avctx</name><operator pos:start="397:29" pos:end="397:30">-&gt;</operator><name pos:start="397:31" pos:end="397:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="401:9" pos:end="401:61"><expr pos:start="401:9" pos:end="401:60"><name pos:start="401:9" pos:end="401:20"><name pos:start="401:9" pos:end="401:9">c</name><operator pos:start="401:10" pos:end="401:11">-&gt;</operator><name pos:start="401:12" pos:end="401:17">status</name><index pos:start="401:18" pos:end="401:20">[<expr pos:start="401:19" pos:end="401:19"><literal type="number" pos:start="401:19" pos:end="401:19">0</literal></expr>]</index></name><operator pos:start="401:21" pos:end="401:21">.</operator><name pos:start="401:22" pos:end="401:30">predictor</name>  <operator pos:start="401:33" pos:end="401:33">=</operator> <operator pos:start="401:35" pos:end="401:35">(</operator><name pos:start="401:36" pos:end="401:42">int16_t</name><operator pos:start="401:43" pos:end="401:43">)</operator><call pos:start="401:44" pos:end="401:60"><name pos:start="401:44" pos:end="401:50">AV_RL16</name><argument_list pos:start="401:51" pos:end="401:60">(<argument pos:start="401:52" pos:end="401:59"><expr pos:start="401:52" pos:end="401:59"><name pos:start="401:52" pos:end="401:54">src</name> <operator pos:start="401:56" pos:end="401:56">+</operator> <literal type="number" pos:start="401:58" pos:end="401:59">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="403:9" pos:end="403:61"><expr pos:start="403:9" pos:end="403:60"><name pos:start="403:9" pos:end="403:20"><name pos:start="403:9" pos:end="403:9">c</name><operator pos:start="403:10" pos:end="403:11">-&gt;</operator><name pos:start="403:12" pos:end="403:17">status</name><index pos:start="403:18" pos:end="403:20">[<expr pos:start="403:19" pos:end="403:19"><literal type="number" pos:start="403:19" pos:end="403:19">1</literal></expr>]</index></name><operator pos:start="403:21" pos:end="403:21">.</operator><name pos:start="403:22" pos:end="403:30">predictor</name>  <operator pos:start="403:33" pos:end="403:33">=</operator> <operator pos:start="403:35" pos:end="403:35">(</operator><name pos:start="403:36" pos:end="403:42">int16_t</name><operator pos:start="403:43" pos:end="403:43">)</operator><call pos:start="403:44" pos:end="403:60"><name pos:start="403:44" pos:end="403:50">AV_RL16</name><argument_list pos:start="403:51" pos:end="403:60">(<argument pos:start="403:52" pos:end="403:59"><expr pos:start="403:52" pos:end="403:59"><name pos:start="403:52" pos:end="403:54">src</name> <operator pos:start="403:56" pos:end="403:56">+</operator> <literal type="number" pos:start="403:58" pos:end="403:59">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="405:9" pos:end="405:58"><expr pos:start="405:9" pos:end="405:57"><name pos:start="405:9" pos:end="405:20"><name pos:start="405:9" pos:end="405:9">c</name><operator pos:start="405:10" pos:end="405:11">-&gt;</operator><name pos:start="405:12" pos:end="405:17">status</name><index pos:start="405:18" pos:end="405:20">[<expr pos:start="405:19" pos:end="405:19"><literal type="number" pos:start="405:19" pos:end="405:19">0</literal></expr>]</index></name><operator pos:start="405:21" pos:end="405:21">.</operator><name pos:start="405:22" pos:end="405:31">step_index</name> <operator pos:start="405:33" pos:end="405:33">=</operator> <call pos:start="405:35" pos:end="405:57"><name pos:start="405:35" pos:end="405:41">av_clip</name><argument_list pos:start="405:42" pos:end="405:57">(<argument pos:start="405:43" pos:end="405:49"><expr pos:start="405:43" pos:end="405:49"><name pos:start="405:43" pos:end="405:49"><name pos:start="405:43" pos:end="405:45">src</name><index pos:start="405:46" pos:end="405:49">[<expr pos:start="405:47" pos:end="405:48"><literal type="number" pos:start="405:47" pos:end="405:48">14</literal></expr>]</index></name></expr></argument>, <argument pos:start="405:52" pos:end="405:52"><expr pos:start="405:52" pos:end="405:52"><literal type="number" pos:start="405:52" pos:end="405:52">0</literal></expr></argument>, <argument pos:start="405:55" pos:end="405:56"><expr pos:start="405:55" pos:end="405:56"><literal type="number" pos:start="405:55" pos:end="405:56">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="407:9" pos:end="407:58"><expr pos:start="407:9" pos:end="407:57"><name pos:start="407:9" pos:end="407:20"><name pos:start="407:9" pos:end="407:9">c</name><operator pos:start="407:10" pos:end="407:11">-&gt;</operator><name pos:start="407:12" pos:end="407:17">status</name><index pos:start="407:18" pos:end="407:20">[<expr pos:start="407:19" pos:end="407:19"><literal type="number" pos:start="407:19" pos:end="407:19">1</literal></expr>]</index></name><operator pos:start="407:21" pos:end="407:21">.</operator><name pos:start="407:22" pos:end="407:31">step_index</name> <operator pos:start="407:33" pos:end="407:33">=</operator> <call pos:start="407:35" pos:end="407:57"><name pos:start="407:35" pos:end="407:41">av_clip</name><argument_list pos:start="407:42" pos:end="407:57">(<argument pos:start="407:43" pos:end="407:49"><expr pos:start="407:43" pos:end="407:49"><name pos:start="407:43" pos:end="407:49"><name pos:start="407:43" pos:end="407:45">src</name><index pos:start="407:46" pos:end="407:49">[<expr pos:start="407:47" pos:end="407:48"><literal type="number" pos:start="407:47" pos:end="407:48">15</literal></expr>]</index></name></expr></argument>, <argument pos:start="407:52" pos:end="407:52"><expr pos:start="407:52" pos:end="407:52"><literal type="number" pos:start="407:52" pos:end="407:52">0</literal></expr></argument>, <argument pos:start="407:55" pos:end="407:56"><expr pos:start="407:55" pos:end="407:56"><literal type="number" pos:start="407:55" pos:end="407:56">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="409:9" pos:end="409:40">/* sign extend the predictors */</comment>

        <expr_stmt pos:start="411:9" pos:end="411:18"><expr pos:start="411:9" pos:end="411:17"><name pos:start="411:9" pos:end="411:11">src</name> <operator pos:start="411:13" pos:end="411:14">+=</operator> <literal type="number" pos:start="411:16" pos:end="411:17">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:46"><expr pos:start="413:9" pos:end="413:45"><name pos:start="413:9" pos:end="413:20">diff_channel</name> <operator pos:start="413:22" pos:end="413:22">=</operator> <name pos:start="413:24" pos:end="413:35"><name pos:start="413:24" pos:end="413:24">c</name><operator pos:start="413:25" pos:end="413:26">-&gt;</operator><name pos:start="413:27" pos:end="413:32">status</name><index pos:start="413:33" pos:end="413:35">[<expr pos:start="413:34" pos:end="413:34"><literal type="number" pos:start="413:34" pos:end="413:34">1</literal></expr>]</index></name><operator pos:start="413:36" pos:end="413:36">.</operator><name pos:start="413:37" pos:end="413:45">predictor</name></expr>;</expr_stmt>



        <comment type="block" pos:start="417:9" pos:end="419:36">/* the DK3_GET_NEXT_NIBBLE macro issues the break statement when

         * the buffer is consumed */</comment>

        <while pos:start="421:9" pos:end="473:9">while <condition pos:start="421:15" pos:end="421:17">(<expr pos:start="421:16" pos:end="421:16"><literal type="number" pos:start="421:16" pos:end="421:16">1</literal></expr>)</condition> <block pos:start="421:19" pos:end="473:9">{<block_content pos:start="433:13" pos:end="471:73">



            <comment type="block" pos:start="425:13" pos:end="427:50">/* for this algorithm, c-&gt;status[0] is the sum channel and

             * c-&gt;status[1] is the diff channel */</comment>



            <comment type="block" pos:start="431:13" pos:end="431:64">/* process the first predictor of the sum channel */</comment>

            <expr_stmt pos:start="433:13" pos:end="433:34"><expr pos:start="433:13" pos:end="433:33"><call pos:start="433:13" pos:end="433:33"><name pos:start="433:13" pos:end="433:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="433:32" pos:end="433:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="435:13" pos:end="435:62"><expr pos:start="435:13" pos:end="435:61"><call pos:start="435:13" pos:end="435:61"><name pos:start="435:13" pos:end="435:35">adpcm_ima_expand_nibble</name><argument_list pos:start="435:36" pos:end="435:61">(<argument pos:start="435:37" pos:end="435:49"><expr pos:start="435:37" pos:end="435:49"><operator pos:start="435:37" pos:end="435:37">&amp;</operator><name pos:start="435:38" pos:end="435:49"><name pos:start="435:38" pos:end="435:38">c</name><operator pos:start="435:39" pos:end="435:40">-&gt;</operator><name pos:start="435:41" pos:end="435:46">status</name><index pos:start="435:47" pos:end="435:49">[<expr pos:start="435:48" pos:end="435:48"><literal type="number" pos:start="435:48" pos:end="435:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="435:52" pos:end="435:57"><expr pos:start="435:52" pos:end="435:57"><name pos:start="435:52" pos:end="435:57">nibble</name></expr></argument>, <argument pos:start="435:60" pos:end="435:60"><expr pos:start="435:60" pos:end="435:60"><literal type="number" pos:start="435:60" pos:end="435:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="439:13" pos:end="439:52">/* process the diff channel predictor */</comment>

            <expr_stmt pos:start="441:13" pos:end="441:34"><expr pos:start="441:13" pos:end="441:33"><call pos:start="441:13" pos:end="441:33"><name pos:start="441:13" pos:end="441:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="441:32" pos:end="441:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="443:13" pos:end="443:62"><expr pos:start="443:13" pos:end="443:61"><call pos:start="443:13" pos:end="443:61"><name pos:start="443:13" pos:end="443:35">adpcm_ima_expand_nibble</name><argument_list pos:start="443:36" pos:end="443:61">(<argument pos:start="443:37" pos:end="443:49"><expr pos:start="443:37" pos:end="443:49"><operator pos:start="443:37" pos:end="443:37">&amp;</operator><name pos:start="443:38" pos:end="443:49"><name pos:start="443:38" pos:end="443:38">c</name><operator pos:start="443:39" pos:end="443:40">-&gt;</operator><name pos:start="443:41" pos:end="443:46">status</name><index pos:start="443:47" pos:end="443:49">[<expr pos:start="443:48" pos:end="443:48"><literal type="number" pos:start="443:48" pos:end="443:48">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="443:52" pos:end="443:57"><expr pos:start="443:52" pos:end="443:57"><name pos:start="443:52" pos:end="443:57">nibble</name></expr></argument>, <argument pos:start="443:60" pos:end="443:60"><expr pos:start="443:60" pos:end="443:60"><literal type="number" pos:start="443:60" pos:end="443:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="447:13" pos:end="447:62">/* process the first pair of stereo PCM samples */</comment>

            <expr_stmt pos:start="449:13" pos:end="449:71"><expr pos:start="449:13" pos:end="449:70"><name pos:start="449:13" pos:end="449:24">diff_channel</name> <operator pos:start="449:26" pos:end="449:26">=</operator> <operator pos:start="449:28" pos:end="449:28">(</operator><name pos:start="449:29" pos:end="449:40">diff_channel</name> <operator pos:start="449:42" pos:end="449:42">+</operator> <name pos:start="449:44" pos:end="449:55"><name pos:start="449:44" pos:end="449:44">c</name><operator pos:start="449:45" pos:end="449:46">-&gt;</operator><name pos:start="449:47" pos:end="449:52">status</name><index pos:start="449:53" pos:end="449:55">[<expr pos:start="449:54" pos:end="449:54"><literal type="number" pos:start="449:54" pos:end="449:54">1</literal></expr>]</index></name><operator pos:start="449:56" pos:end="449:56">.</operator><name pos:start="449:57" pos:end="449:65">predictor</name><operator pos:start="449:66" pos:end="449:66">)</operator> <operator pos:start="449:68" pos:end="449:68">/</operator> <literal type="number" pos:start="449:70" pos:end="449:70">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="451:13" pos:end="451:73"><expr pos:start="451:13" pos:end="451:72"><operator pos:start="451:13" pos:end="451:13">*</operator><name pos:start="451:14" pos:end="451:20">samples</name><operator pos:start="451:21" pos:end="451:22">++</operator> <operator pos:start="451:24" pos:end="451:24">=</operator> <name pos:start="451:26" pos:end="451:37"><name pos:start="451:26" pos:end="451:26">c</name><operator pos:start="451:27" pos:end="451:28">-&gt;</operator><name pos:start="451:29" pos:end="451:34">status</name><index pos:start="451:35" pos:end="451:37">[<expr pos:start="451:36" pos:end="451:36"><literal type="number" pos:start="451:36" pos:end="451:36">0</literal></expr>]</index></name><operator pos:start="451:38" pos:end="451:38">.</operator><name pos:start="451:39" pos:end="451:47">predictor</name> <operator pos:start="451:49" pos:end="451:49">+</operator> <name pos:start="451:51" pos:end="451:62"><name pos:start="451:51" pos:end="451:51">c</name><operator pos:start="451:52" pos:end="451:53">-&gt;</operator><name pos:start="451:54" pos:end="451:59">status</name><index pos:start="451:60" pos:end="451:62">[<expr pos:start="451:61" pos:end="451:61"><literal type="number" pos:start="451:61" pos:end="451:61">1</literal></expr>]</index></name><operator pos:start="451:63" pos:end="451:63">.</operator><name pos:start="451:64" pos:end="451:72">predictor</name></expr>;</expr_stmt>

            <expr_stmt pos:start="453:13" pos:end="453:73"><expr pos:start="453:13" pos:end="453:72"><operator pos:start="453:13" pos:end="453:13">*</operator><name pos:start="453:14" pos:end="453:20">samples</name><operator pos:start="453:21" pos:end="453:22">++</operator> <operator pos:start="453:24" pos:end="453:24">=</operator> <name pos:start="453:26" pos:end="453:37"><name pos:start="453:26" pos:end="453:26">c</name><operator pos:start="453:27" pos:end="453:28">-&gt;</operator><name pos:start="453:29" pos:end="453:34">status</name><index pos:start="453:35" pos:end="453:37">[<expr pos:start="453:36" pos:end="453:36"><literal type="number" pos:start="453:36" pos:end="453:36">0</literal></expr>]</index></name><operator pos:start="453:38" pos:end="453:38">.</operator><name pos:start="453:39" pos:end="453:47">predictor</name> <operator pos:start="453:49" pos:end="453:49">-</operator> <name pos:start="453:51" pos:end="453:62"><name pos:start="453:51" pos:end="453:51">c</name><operator pos:start="453:52" pos:end="453:53">-&gt;</operator><name pos:start="453:54" pos:end="453:59">status</name><index pos:start="453:60" pos:end="453:62">[<expr pos:start="453:61" pos:end="453:61"><literal type="number" pos:start="453:61" pos:end="453:61">1</literal></expr>]</index></name><operator pos:start="453:63" pos:end="453:63">.</operator><name pos:start="453:64" pos:end="453:72">predictor</name></expr>;</expr_stmt>



            <comment type="block" pos:start="457:13" pos:end="457:65">/* process the second predictor of the sum channel */</comment>

            <expr_stmt pos:start="459:13" pos:end="459:34"><expr pos:start="459:13" pos:end="459:33"><call pos:start="459:13" pos:end="459:33"><name pos:start="459:13" pos:end="459:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="459:32" pos:end="459:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="461:13" pos:end="461:62"><expr pos:start="461:13" pos:end="461:61"><call pos:start="461:13" pos:end="461:61"><name pos:start="461:13" pos:end="461:35">adpcm_ima_expand_nibble</name><argument_list pos:start="461:36" pos:end="461:61">(<argument pos:start="461:37" pos:end="461:49"><expr pos:start="461:37" pos:end="461:49"><operator pos:start="461:37" pos:end="461:37">&amp;</operator><name pos:start="461:38" pos:end="461:49"><name pos:start="461:38" pos:end="461:38">c</name><operator pos:start="461:39" pos:end="461:40">-&gt;</operator><name pos:start="461:41" pos:end="461:46">status</name><index pos:start="461:47" pos:end="461:49">[<expr pos:start="461:48" pos:end="461:48"><literal type="number" pos:start="461:48" pos:end="461:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="461:52" pos:end="461:57"><expr pos:start="461:52" pos:end="461:57"><name pos:start="461:52" pos:end="461:57">nibble</name></expr></argument>, <argument pos:start="461:60" pos:end="461:60"><expr pos:start="461:60" pos:end="461:60"><literal type="number" pos:start="461:60" pos:end="461:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="465:13" pos:end="465:63">/* process the second pair of stereo PCM samples */</comment>

            <expr_stmt pos:start="467:13" pos:end="467:71"><expr pos:start="467:13" pos:end="467:70"><name pos:start="467:13" pos:end="467:24">diff_channel</name> <operator pos:start="467:26" pos:end="467:26">=</operator> <operator pos:start="467:28" pos:end="467:28">(</operator><name pos:start="467:29" pos:end="467:40">diff_channel</name> <operator pos:start="467:42" pos:end="467:42">+</operator> <name pos:start="467:44" pos:end="467:55"><name pos:start="467:44" pos:end="467:44">c</name><operator pos:start="467:45" pos:end="467:46">-&gt;</operator><name pos:start="467:47" pos:end="467:52">status</name><index pos:start="467:53" pos:end="467:55">[<expr pos:start="467:54" pos:end="467:54"><literal type="number" pos:start="467:54" pos:end="467:54">1</literal></expr>]</index></name><operator pos:start="467:56" pos:end="467:56">.</operator><name pos:start="467:57" pos:end="467:65">predictor</name><operator pos:start="467:66" pos:end="467:66">)</operator> <operator pos:start="467:68" pos:end="467:68">/</operator> <literal type="number" pos:start="467:70" pos:end="467:70">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="469:13" pos:end="469:73"><expr pos:start="469:13" pos:end="469:72"><operator pos:start="469:13" pos:end="469:13">*</operator><name pos:start="469:14" pos:end="469:20">samples</name><operator pos:start="469:21" pos:end="469:22">++</operator> <operator pos:start="469:24" pos:end="469:24">=</operator> <name pos:start="469:26" pos:end="469:37"><name pos:start="469:26" pos:end="469:26">c</name><operator pos:start="469:27" pos:end="469:28">-&gt;</operator><name pos:start="469:29" pos:end="469:34">status</name><index pos:start="469:35" pos:end="469:37">[<expr pos:start="469:36" pos:end="469:36"><literal type="number" pos:start="469:36" pos:end="469:36">0</literal></expr>]</index></name><operator pos:start="469:38" pos:end="469:38">.</operator><name pos:start="469:39" pos:end="469:47">predictor</name> <operator pos:start="469:49" pos:end="469:49">+</operator> <name pos:start="469:51" pos:end="469:62"><name pos:start="469:51" pos:end="469:51">c</name><operator pos:start="469:52" pos:end="469:53">-&gt;</operator><name pos:start="469:54" pos:end="469:59">status</name><index pos:start="469:60" pos:end="469:62">[<expr pos:start="469:61" pos:end="469:61"><literal type="number" pos:start="469:61" pos:end="469:61">1</literal></expr>]</index></name><operator pos:start="469:63" pos:end="469:63">.</operator><name pos:start="469:64" pos:end="469:72">predictor</name></expr>;</expr_stmt>

            <expr_stmt pos:start="471:13" pos:end="471:73"><expr pos:start="471:13" pos:end="471:72"><operator pos:start="471:13" pos:end="471:13">*</operator><name pos:start="471:14" pos:end="471:20">samples</name><operator pos:start="471:21" pos:end="471:22">++</operator> <operator pos:start="471:24" pos:end="471:24">=</operator> <name pos:start="471:26" pos:end="471:37"><name pos:start="471:26" pos:end="471:26">c</name><operator pos:start="471:27" pos:end="471:28">-&gt;</operator><name pos:start="471:29" pos:end="471:34">status</name><index pos:start="471:35" pos:end="471:37">[<expr pos:start="471:36" pos:end="471:36"><literal type="number" pos:start="471:36" pos:end="471:36">0</literal></expr>]</index></name><operator pos:start="471:38" pos:end="471:38">.</operator><name pos:start="471:39" pos:end="471:47">predictor</name> <operator pos:start="471:49" pos:end="471:49">-</operator> <name pos:start="471:51" pos:end="471:62"><name pos:start="471:51" pos:end="471:51">c</name><operator pos:start="471:52" pos:end="471:53">-&gt;</operator><name pos:start="471:54" pos:end="471:59">status</name><index pos:start="471:60" pos:end="471:62">[<expr pos:start="471:61" pos:end="471:61"><literal type="number" pos:start="471:61" pos:end="471:61">1</literal></expr>]</index></name><operator pos:start="471:63" pos:end="471:63">.</operator><name pos:start="471:64" pos:end="471:72">predictor</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="475:9" pos:end="475:14">break;</break>

    </block_content>}</block>

    <case pos:start="479:5" pos:end="479:32">case <expr pos:start="479:10" pos:end="479:31"><name pos:start="479:10" pos:end="479:31">CODEC_ID_ADPCM_IMA_ISS</name></expr>:</case>

        <for pos:start="481:9" pos:end="491:9">for <control pos:start="481:13" pos:end="481:63">(<init pos:start="481:14" pos:end="481:25"><expr pos:start="481:14" pos:end="481:24"><name pos:start="481:14" pos:end="481:20">channel</name> <operator pos:start="481:22" pos:end="481:22">=</operator> <literal type="number" pos:start="481:24" pos:end="481:24">0</literal></expr>;</init> <condition pos:start="481:27" pos:end="481:52"><expr pos:start="481:27" pos:end="481:51"><name pos:start="481:27" pos:end="481:33">channel</name> <operator pos:start="481:35" pos:end="481:35">&lt;</operator> <name pos:start="481:37" pos:end="481:51"><name pos:start="481:37" pos:end="481:41">avctx</name><operator pos:start="481:42" pos:end="481:43">-&gt;</operator><name pos:start="481:44" pos:end="481:51">channels</name></name></expr>;</condition> <incr pos:start="481:54" pos:end="481:62"><expr pos:start="481:54" pos:end="481:62"><name pos:start="481:54" pos:end="481:60">channel</name><operator pos:start="481:61" pos:end="481:62">++</operator></expr></incr>)</control> <block pos:start="481:65" pos:end="491:9">{<block_content pos:start="483:13" pos:end="489:18">

            <expr_stmt pos:start="483:13" pos:end="483:37"><expr pos:start="483:13" pos:end="483:36"><name pos:start="483:13" pos:end="483:14">cs</name> <operator pos:start="483:16" pos:end="483:16">=</operator> <operator pos:start="483:18" pos:end="483:18">&amp;</operator><name pos:start="483:19" pos:end="483:36"><name pos:start="483:19" pos:end="483:19">c</name><operator pos:start="483:20" pos:end="483:21">-&gt;</operator><name pos:start="483:22" pos:end="483:27">status</name><index pos:start="483:28" pos:end="483:36">[<expr pos:start="483:29" pos:end="483:35"><name pos:start="483:29" pos:end="483:35">channel</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="485:13" pos:end="485:64"><expr pos:start="485:13" pos:end="485:63"><name pos:start="485:13" pos:end="485:25"><name pos:start="485:13" pos:end="485:14">cs</name><operator pos:start="485:15" pos:end="485:16">-&gt;</operator><name pos:start="485:17" pos:end="485:25">predictor</name></name>  <operator pos:start="485:28" pos:end="485:28">=</operator> <operator pos:start="485:30" pos:end="485:30">(</operator><name pos:start="485:31" pos:end="485:37">int16_t</name><operator pos:start="485:38" pos:end="485:38">)</operator><call pos:start="485:39" pos:end="485:63"><name pos:start="485:39" pos:end="485:57">bytestream_get_le16</name><argument_list pos:start="485:58" pos:end="485:63">(<argument pos:start="485:59" pos:end="485:62"><expr pos:start="485:59" pos:end="485:62"><operator pos:start="485:59" pos:end="485:59">&amp;</operator><name pos:start="485:60" pos:end="485:62">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="487:13" pos:end="487:52"><expr pos:start="487:13" pos:end="487:51"><name pos:start="487:13" pos:end="487:26"><name pos:start="487:13" pos:end="487:14">cs</name><operator pos:start="487:15" pos:end="487:16">-&gt;</operator><name pos:start="487:17" pos:end="487:26">step_index</name></name> <operator pos:start="487:28" pos:end="487:28">=</operator> <call pos:start="487:30" pos:end="487:51"><name pos:start="487:30" pos:end="487:36">av_clip</name><argument_list pos:start="487:37" pos:end="487:51">(<argument pos:start="487:38" pos:end="487:43"><expr pos:start="487:38" pos:end="487:43"><operator pos:start="487:38" pos:end="487:38">*</operator><name pos:start="487:39" pos:end="487:41">src</name><operator pos:start="487:42" pos:end="487:43">++</operator></expr></argument>, <argument pos:start="487:46" pos:end="487:46"><expr pos:start="487:46" pos:end="487:46"><literal type="number" pos:start="487:46" pos:end="487:46">0</literal></expr></argument>, <argument pos:start="487:49" pos:end="487:50"><expr pos:start="487:49" pos:end="487:50"><literal type="number" pos:start="487:49" pos:end="487:50">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="489:13" pos:end="489:18"><expr pos:start="489:13" pos:end="489:17"><name pos:start="489:13" pos:end="489:15">src</name><operator pos:start="489:16" pos:end="489:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <for pos:start="495:9" pos:end="521:9">for <control pos:start="495:13" pos:end="495:59">(<init pos:start="495:14" pos:end="495:40"><expr pos:start="495:14" pos:end="495:39"><name pos:start="495:14" pos:end="495:14">n</name> <operator pos:start="495:16" pos:end="495:16">=</operator> <name pos:start="495:18" pos:end="495:27">nb_samples</name> <operator pos:start="495:29" pos:end="495:30">&gt;&gt;</operator> <operator pos:start="495:32" pos:end="495:32">(</operator><literal type="number" pos:start="495:33" pos:end="495:35">1</literal> <operator pos:start="495:35" pos:end="495:35">-</operator> <name pos:start="495:37" pos:end="495:38">st</name><operator pos:start="495:39" pos:end="495:39">)</operator></expr>;</init> <condition pos:start="495:42" pos:end="495:47"><expr pos:start="495:42" pos:end="495:46"><name pos:start="495:42" pos:end="495:42">n</name> <operator pos:start="495:44" pos:end="495:44">&gt;</operator> <literal type="number" pos:start="495:46" pos:end="495:46">0</literal></expr>;</condition> <incr pos:start="495:49" pos:end="495:58"><expr pos:start="495:49" pos:end="495:51"><name pos:start="495:49" pos:end="495:49">n</name><operator pos:start="495:50" pos:end="495:51">--</operator></expr><operator pos:start="495:52" pos:end="495:52">,</operator> <expr pos:start="495:54" pos:end="495:58"><name pos:start="495:54" pos:end="495:56">src</name><operator pos:start="495:57" pos:end="495:58">++</operator></expr></incr>)</control> <block pos:start="495:61" pos:end="521:9">{<block_content pos:start="497:13" pos:end="519:72">

            <decl_stmt pos:start="497:13" pos:end="497:27"><decl pos:start="497:13" pos:end="497:22"><type pos:start="497:13" pos:end="497:19"><name pos:start="497:13" pos:end="497:19">uint8_t</name></type> <name pos:start="497:21" pos:end="497:22">v1</name></decl>, <decl pos:start="497:25" pos:end="497:26"><type ref="prev" pos:start="497:13" pos:end="497:19"/><name pos:start="497:25" pos:end="497:26">v2</name></decl>;</decl_stmt>

            <decl_stmt pos:start="499:13" pos:end="499:29"><decl pos:start="499:13" pos:end="499:28"><type pos:start="499:13" pos:end="499:19"><name pos:start="499:13" pos:end="499:19">uint8_t</name></type> <name pos:start="499:21" pos:end="499:21">v</name> <init pos:start="499:23" pos:end="499:28">= <expr pos:start="499:25" pos:end="499:28"><operator pos:start="499:25" pos:end="499:25">*</operator><name pos:start="499:26" pos:end="499:28">src</name></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="501:13" pos:end="501:46">/* nibbles are swapped for mono */</comment>

            <if_stmt pos:start="503:13" pos:end="515:13"><if pos:start="503:13" pos:end="509:13">if <condition pos:start="503:16" pos:end="503:19">(<expr pos:start="503:17" pos:end="503:18"><name pos:start="503:17" pos:end="503:18">st</name></expr>)</condition> <block pos:start="503:21" pos:end="509:13">{<block_content pos:start="505:17" pos:end="507:30">

                <expr_stmt pos:start="505:17" pos:end="505:28"><expr pos:start="505:17" pos:end="505:27"><name pos:start="505:17" pos:end="505:18">v1</name> <operator pos:start="505:20" pos:end="505:20">=</operator> <name pos:start="505:22" pos:end="505:22">v</name> <operator pos:start="505:24" pos:end="505:25">&gt;&gt;</operator> <literal type="number" pos:start="505:27" pos:end="505:27">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="507:17" pos:end="507:30"><expr pos:start="507:17" pos:end="507:29"><name pos:start="507:17" pos:end="507:18">v2</name> <operator pos:start="507:20" pos:end="507:20">=</operator> <name pos:start="507:22" pos:end="507:22">v</name> <operator pos:start="507:24" pos:end="507:24">&amp;</operator> <literal type="number" pos:start="507:26" pos:end="507:29">0x0F</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="509:15" pos:end="515:13">else <block pos:start="509:20" pos:end="515:13">{<block_content pos:start="511:17" pos:end="513:30">

                <expr_stmt pos:start="511:17" pos:end="511:28"><expr pos:start="511:17" pos:end="511:27"><name pos:start="511:17" pos:end="511:18">v2</name> <operator pos:start="511:20" pos:end="511:20">=</operator> <name pos:start="511:22" pos:end="511:22">v</name> <operator pos:start="511:24" pos:end="511:25">&gt;&gt;</operator> <literal type="number" pos:start="511:27" pos:end="511:27">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="513:17" pos:end="513:30"><expr pos:start="513:17" pos:end="513:29"><name pos:start="513:17" pos:end="513:18">v1</name> <operator pos:start="513:20" pos:end="513:20">=</operator> <name pos:start="513:22" pos:end="513:22">v</name> <operator pos:start="513:24" pos:end="513:24">&amp;</operator> <literal type="number" pos:start="513:26" pos:end="513:29">0x0F</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="517:13" pos:end="517:72"><expr pos:start="517:13" pos:end="517:71"><operator pos:start="517:13" pos:end="517:13">*</operator><name pos:start="517:14" pos:end="517:20">samples</name><operator pos:start="517:21" pos:end="517:22">++</operator> <operator pos:start="517:24" pos:end="517:24">=</operator> <call pos:start="517:26" pos:end="517:71"><name pos:start="517:26" pos:end="517:48">adpcm_ima_expand_nibble</name><argument_list pos:start="517:49" pos:end="517:71">(<argument pos:start="517:50" pos:end="517:63"><expr pos:start="517:50" pos:end="517:63"><operator pos:start="517:50" pos:end="517:50">&amp;</operator><name pos:start="517:51" pos:end="517:63"><name pos:start="517:51" pos:end="517:51">c</name><operator pos:start="517:52" pos:end="517:53">-&gt;</operator><name pos:start="517:54" pos:end="517:59">status</name><index pos:start="517:60" pos:end="517:63">[<expr pos:start="517:61" pos:end="517:61"><literal type="number" pos:start="517:61" pos:end="517:61">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="517:66" pos:end="517:67"><expr pos:start="517:66" pos:end="517:67"><name pos:start="517:66" pos:end="517:67">v1</name></expr></argument>, <argument pos:start="517:70" pos:end="517:70"><expr pos:start="517:70" pos:end="517:70"><literal type="number" pos:start="517:70" pos:end="517:70">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="519:13" pos:end="519:72"><expr pos:start="519:13" pos:end="519:71"><operator pos:start="519:13" pos:end="519:13">*</operator><name pos:start="519:14" pos:end="519:20">samples</name><operator pos:start="519:21" pos:end="519:22">++</operator> <operator pos:start="519:24" pos:end="519:24">=</operator> <call pos:start="519:26" pos:end="519:71"><name pos:start="519:26" pos:end="519:48">adpcm_ima_expand_nibble</name><argument_list pos:start="519:49" pos:end="519:71">(<argument pos:start="519:50" pos:end="519:63"><expr pos:start="519:50" pos:end="519:63"><operator pos:start="519:50" pos:end="519:50">&amp;</operator><name pos:start="519:51" pos:end="519:63"><name pos:start="519:51" pos:end="519:51">c</name><operator pos:start="519:52" pos:end="519:53">-&gt;</operator><name pos:start="519:54" pos:end="519:59">status</name><index pos:start="519:60" pos:end="519:63">[<expr pos:start="519:61" pos:end="519:62"><name pos:start="519:61" pos:end="519:62">st</name></expr>]</index></name></expr></argument>, <argument pos:start="519:66" pos:end="519:67"><expr pos:start="519:66" pos:end="519:67"><name pos:start="519:66" pos:end="519:67">v2</name></expr></argument>, <argument pos:start="519:70" pos:end="519:70"><expr pos:start="519:70" pos:end="519:70"><literal type="number" pos:start="519:70" pos:end="519:70">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="523:9" pos:end="523:14">break;</break>

    <case pos:start="525:5" pos:end="525:32">case <expr pos:start="525:10" pos:end="525:31"><name pos:start="525:10" pos:end="525:31">CODEC_ID_ADPCM_IMA_APC</name></expr>:</case>

        <while pos:start="527:9" pos:end="535:9">while <condition pos:start="527:15" pos:end="527:36">(<expr pos:start="527:16" pos:end="527:35"><name pos:start="527:16" pos:end="527:18">src</name> <operator pos:start="527:20" pos:end="527:20">&lt;</operator> <name pos:start="527:22" pos:end="527:24">buf</name> <operator pos:start="527:26" pos:end="527:26">+</operator> <name pos:start="527:28" pos:end="527:35">buf_size</name></expr>)</condition> <block pos:start="527:38" pos:end="535:9">{<block_content pos:start="529:13" pos:end="533:78">

            <decl_stmt pos:start="529:13" pos:end="529:31"><decl pos:start="529:13" pos:end="529:30"><type pos:start="529:13" pos:end="529:19"><name pos:start="529:13" pos:end="529:19">uint8_t</name></type> <name pos:start="529:21" pos:end="529:21">v</name> <init pos:start="529:23" pos:end="529:30">= <expr pos:start="529:25" pos:end="529:30"><operator pos:start="529:25" pos:end="529:25">*</operator><name pos:start="529:26" pos:end="529:28">src</name><operator pos:start="529:29" pos:end="529:30">++</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="531:13" pos:end="531:78"><expr pos:start="531:13" pos:end="531:77"><operator pos:start="531:13" pos:end="531:13">*</operator><name pos:start="531:14" pos:end="531:20">samples</name><operator pos:start="531:21" pos:end="531:22">++</operator> <operator pos:start="531:24" pos:end="531:24">=</operator> <call pos:start="531:26" pos:end="531:77"><name pos:start="531:26" pos:end="531:48">adpcm_ima_expand_nibble</name><argument_list pos:start="531:49" pos:end="531:77">(<argument pos:start="531:50" pos:end="531:62"><expr pos:start="531:50" pos:end="531:62"><operator pos:start="531:50" pos:end="531:50">&amp;</operator><name pos:start="531:51" pos:end="531:62"><name pos:start="531:51" pos:end="531:51">c</name><operator pos:start="531:52" pos:end="531:53">-&gt;</operator><name pos:start="531:54" pos:end="531:59">status</name><index pos:start="531:60" pos:end="531:62">[<expr pos:start="531:61" pos:end="531:61"><literal type="number" pos:start="531:61" pos:end="531:61">0</literal></expr>]</index></name></expr></argument>,  <argument pos:start="531:66" pos:end="531:71"><expr pos:start="531:66" pos:end="531:71"><name pos:start="531:66" pos:end="531:66">v</name> <operator pos:start="531:68" pos:end="531:69">&gt;&gt;</operator> <literal type="number" pos:start="531:71" pos:end="531:71">4</literal></expr></argument>  , <argument pos:start="531:76" pos:end="531:76"><expr pos:start="531:76" pos:end="531:76"><literal type="number" pos:start="531:76" pos:end="531:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="533:13" pos:end="533:78"><expr pos:start="533:13" pos:end="533:77"><operator pos:start="533:13" pos:end="533:13">*</operator><name pos:start="533:14" pos:end="533:20">samples</name><operator pos:start="533:21" pos:end="533:22">++</operator> <operator pos:start="533:24" pos:end="533:24">=</operator> <call pos:start="533:26" pos:end="533:77"><name pos:start="533:26" pos:end="533:48">adpcm_ima_expand_nibble</name><argument_list pos:start="533:49" pos:end="533:77">(<argument pos:start="533:50" pos:end="533:63"><expr pos:start="533:50" pos:end="533:63"><operator pos:start="533:50" pos:end="533:50">&amp;</operator><name pos:start="533:51" pos:end="533:63"><name pos:start="533:51" pos:end="533:51">c</name><operator pos:start="533:52" pos:end="533:53">-&gt;</operator><name pos:start="533:54" pos:end="533:59">status</name><index pos:start="533:60" pos:end="533:63">[<expr pos:start="533:61" pos:end="533:62"><name pos:start="533:61" pos:end="533:62">st</name></expr>]</index></name></expr></argument>, <argument pos:start="533:66" pos:end="533:73"><expr pos:start="533:66" pos:end="533:73"><name pos:start="533:66" pos:end="533:66">v</name> <operator pos:start="533:68" pos:end="533:68">&amp;</operator> <literal type="number" pos:start="533:70" pos:end="533:73">0x0F</literal></expr></argument>, <argument pos:start="533:76" pos:end="533:76"><expr pos:start="533:76" pos:end="533:76"><literal type="number" pos:start="533:76" pos:end="533:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="537:9" pos:end="537:14">break;</break>

    <case pos:start="539:5" pos:end="539:31">case <expr pos:start="539:10" pos:end="539:30"><name pos:start="539:10" pos:end="539:30">CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>

        <for pos:start="541:9" pos:end="581:9">for <control pos:start="541:13" pos:end="541:63">(<init pos:start="541:14" pos:end="541:25"><expr pos:start="541:14" pos:end="541:24"><name pos:start="541:14" pos:end="541:20">channel</name> <operator pos:start="541:22" pos:end="541:22">=</operator> <literal type="number" pos:start="541:24" pos:end="541:24">0</literal></expr>;</init> <condition pos:start="541:27" pos:end="541:52"><expr pos:start="541:27" pos:end="541:51"><name pos:start="541:27" pos:end="541:33">channel</name> <operator pos:start="541:35" pos:end="541:35">&lt;</operator> <name pos:start="541:37" pos:end="541:51"><name pos:start="541:37" pos:end="541:41">avctx</name><operator pos:start="541:42" pos:end="541:43">-&gt;</operator><name pos:start="541:44" pos:end="541:51">channels</name></name></expr>;</condition> <incr pos:start="541:54" pos:end="541:62"><expr pos:start="541:54" pos:end="541:62"><name pos:start="541:54" pos:end="541:60">channel</name><operator pos:start="541:61" pos:end="541:62">++</operator></expr></incr>)</control> <block pos:start="541:65" pos:end="581:9">{<block_content pos:start="543:13" pos:end="579:13">

            <decl_stmt pos:start="543:13" pos:end="543:32"><decl pos:start="543:13" pos:end="543:31"><type pos:start="543:13" pos:end="543:27"><specifier pos:start="543:13" pos:end="543:17">const</specifier> <name pos:start="543:19" pos:end="543:25">uint8_t</name> <modifier pos:start="543:27" pos:end="543:27">*</modifier></type><name pos:start="543:28" pos:end="543:31">src0</name></decl>;</decl_stmt>

            <decl_stmt pos:start="545:13" pos:end="545:27"><decl pos:start="545:13" pos:end="545:26"><type pos:start="545:13" pos:end="545:15"><name pos:start="545:13" pos:end="545:15">int</name></type> <name pos:start="545:17" pos:end="545:26">src_stride</name></decl>;</decl_stmt>

            <decl_stmt pos:start="547:13" pos:end="547:45"><decl pos:start="547:13" pos:end="547:44"><type pos:start="547:13" pos:end="547:21"><name pos:start="547:13" pos:end="547:19">int16_t</name> <modifier pos:start="547:21" pos:end="547:21">*</modifier></type><name pos:start="547:22" pos:end="547:24">smp</name> <init pos:start="547:26" pos:end="547:44">= <expr pos:start="547:28" pos:end="547:44"><name pos:start="547:28" pos:end="547:34">samples</name> <operator pos:start="547:36" pos:end="547:36">+</operator> <name pos:start="547:38" pos:end="547:44">channel</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="551:13" pos:end="563:13"><if pos:start="551:13" pos:end="557:13">if <condition pos:start="551:16" pos:end="551:36">(<expr pos:start="551:17" pos:end="551:35"><name pos:start="551:17" pos:end="551:30"><name pos:start="551:17" pos:end="551:17">c</name><operator pos:start="551:18" pos:end="551:19">-&gt;</operator><name pos:start="551:20" pos:end="551:30">vqa_version</name></name> <operator pos:start="551:32" pos:end="551:33">==</operator> <literal type="number" pos:start="551:35" pos:end="551:35">3</literal></expr>)</condition> <block pos:start="551:38" pos:end="557:13">{<block_content pos:start="553:17" pos:end="555:31">

                <expr_stmt pos:start="553:17" pos:end="553:52"><expr pos:start="553:17" pos:end="553:51"><name pos:start="553:17" pos:end="553:20">src0</name> <operator pos:start="553:22" pos:end="553:22">=</operator> <name pos:start="553:24" pos:end="553:26">src</name> <operator pos:start="553:28" pos:end="553:28">+</operator> <name pos:start="553:30" pos:end="553:36">channel</name> <operator pos:start="553:38" pos:end="553:38">*</operator> <name pos:start="553:40" pos:end="553:47">buf_size</name> <operator pos:start="553:49" pos:end="553:49">/</operator> <literal type="number" pos:start="553:51" pos:end="553:51">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="555:17" pos:end="555:31"><expr pos:start="555:17" pos:end="555:30"><name pos:start="555:17" pos:end="555:26">src_stride</name> <operator pos:start="555:28" pos:end="555:28">=</operator> <literal type="number" pos:start="555:30" pos:end="555:30">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="557:15" pos:end="563:13">else <block pos:start="557:20" pos:end="563:13">{<block_content pos:start="559:17" pos:end="561:45">

                <expr_stmt pos:start="559:17" pos:end="559:37"><expr pos:start="559:17" pos:end="559:36"><name pos:start="559:17" pos:end="559:20">src0</name> <operator pos:start="559:22" pos:end="559:22">=</operator> <name pos:start="559:24" pos:end="559:26">src</name> <operator pos:start="559:28" pos:end="559:28">+</operator> <name pos:start="559:30" pos:end="559:36">channel</name></expr>;</expr_stmt>

                <expr_stmt pos:start="561:17" pos:end="561:45"><expr pos:start="561:17" pos:end="561:44"><name pos:start="561:17" pos:end="561:26">src_stride</name> <operator pos:start="561:28" pos:end="561:28">=</operator> <name pos:start="561:30" pos:end="561:44"><name pos:start="561:30" pos:end="561:34">avctx</name><operator pos:start="561:35" pos:end="561:36">-&gt;</operator><name pos:start="561:37" pos:end="561:44">channels</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <for pos:start="565:13" pos:end="579:13">for <control pos:start="565:17" pos:end="565:48">(<init pos:start="565:18" pos:end="565:36"><expr pos:start="565:18" pos:end="565:35"><name pos:start="565:18" pos:end="565:18">n</name> <operator pos:start="565:20" pos:end="565:20">=</operator> <name pos:start="565:22" pos:end="565:31">nb_samples</name> <operator pos:start="565:33" pos:end="565:33">/</operator> <literal type="number" pos:start="565:35" pos:end="565:35">2</literal></expr>;</init> <condition pos:start="565:38" pos:end="565:43"><expr pos:start="565:38" pos:end="565:42"><name pos:start="565:38" pos:end="565:38">n</name> <operator pos:start="565:40" pos:end="565:40">&gt;</operator> <literal type="number" pos:start="565:42" pos:end="565:42">0</literal></expr>;</condition> <incr pos:start="565:45" pos:end="565:47"><expr pos:start="565:45" pos:end="565:47"><name pos:start="565:45" pos:end="565:45">n</name><operator pos:start="565:46" pos:end="565:47">--</operator></expr></incr>)</control> <block pos:start="565:50" pos:end="579:13">{<block_content pos:start="567:17" pos:end="577:39">

                <decl_stmt pos:start="567:17" pos:end="567:34"><decl pos:start="567:17" pos:end="567:33"><type pos:start="567:17" pos:end="567:23"><name pos:start="567:17" pos:end="567:23">uint8_t</name></type> <name pos:start="567:25" pos:end="567:25">v</name> <init pos:start="567:27" pos:end="567:33">= <expr pos:start="567:29" pos:end="567:33"><operator pos:start="567:29" pos:end="567:29">*</operator><name pos:start="567:30" pos:end="567:33">src0</name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="569:17" pos:end="569:35"><expr pos:start="569:17" pos:end="569:34"><name pos:start="569:17" pos:end="569:20">src0</name> <operator pos:start="569:22" pos:end="569:23">+=</operator> <name pos:start="569:25" pos:end="569:34">src_stride</name></expr>;</expr_stmt>

                <expr_stmt pos:start="571:17" pos:end="571:81"><expr pos:start="571:17" pos:end="571:80"><operator pos:start="571:17" pos:end="571:17">*</operator><name pos:start="571:18" pos:end="571:20">smp</name> <operator pos:start="571:22" pos:end="571:22">=</operator> <call pos:start="571:24" pos:end="571:80"><name pos:start="571:24" pos:end="571:46">adpcm_ima_expand_nibble</name><argument_list pos:start="571:47" pos:end="571:80">(<argument pos:start="571:48" pos:end="571:66"><expr pos:start="571:48" pos:end="571:66"><operator pos:start="571:48" pos:end="571:48">&amp;</operator><name pos:start="571:49" pos:end="571:66"><name pos:start="571:49" pos:end="571:49">c</name><operator pos:start="571:50" pos:end="571:51">-&gt;</operator><name pos:start="571:52" pos:end="571:57">status</name><index pos:start="571:58" pos:end="571:66">[<expr pos:start="571:59" pos:end="571:65"><name pos:start="571:59" pos:end="571:65">channel</name></expr>]</index></name></expr></argument>, <argument pos:start="571:69" pos:end="571:74"><expr pos:start="571:69" pos:end="571:74"><name pos:start="571:69" pos:end="571:69">v</name> <operator pos:start="571:71" pos:end="571:72">&gt;&gt;</operator> <literal type="number" pos:start="571:74" pos:end="571:74">4</literal></expr></argument>  , <argument pos:start="571:79" pos:end="571:79"><expr pos:start="571:79" pos:end="571:79"><literal type="number" pos:start="571:79" pos:end="571:79">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="573:17" pos:end="573:39"><expr pos:start="573:17" pos:end="573:38"><name pos:start="573:17" pos:end="573:19">smp</name> <operator pos:start="573:21" pos:end="573:22">+=</operator> <name pos:start="573:24" pos:end="573:38"><name pos:start="573:24" pos:end="573:28">avctx</name><operator pos:start="573:29" pos:end="573:30">-&gt;</operator><name pos:start="573:31" pos:end="573:38">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="575:17" pos:end="575:81"><expr pos:start="575:17" pos:end="575:80"><operator pos:start="575:17" pos:end="575:17">*</operator><name pos:start="575:18" pos:end="575:20">smp</name> <operator pos:start="575:22" pos:end="575:22">=</operator> <call pos:start="575:24" pos:end="575:80"><name pos:start="575:24" pos:end="575:46">adpcm_ima_expand_nibble</name><argument_list pos:start="575:47" pos:end="575:80">(<argument pos:start="575:48" pos:end="575:66"><expr pos:start="575:48" pos:end="575:66"><operator pos:start="575:48" pos:end="575:48">&amp;</operator><name pos:start="575:49" pos:end="575:66"><name pos:start="575:49" pos:end="575:49">c</name><operator pos:start="575:50" pos:end="575:51">-&gt;</operator><name pos:start="575:52" pos:end="575:57">status</name><index pos:start="575:58" pos:end="575:66">[<expr pos:start="575:59" pos:end="575:65"><name pos:start="575:59" pos:end="575:65">channel</name></expr>]</index></name></expr></argument>, <argument pos:start="575:69" pos:end="575:76"><expr pos:start="575:69" pos:end="575:76"><name pos:start="575:69" pos:end="575:69">v</name> <operator pos:start="575:71" pos:end="575:71">&amp;</operator> <literal type="number" pos:start="575:73" pos:end="575:76">0x0F</literal></expr></argument>, <argument pos:start="575:79" pos:end="575:79"><expr pos:start="575:79" pos:end="575:79"><literal type="number" pos:start="575:79" pos:end="575:79">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="577:17" pos:end="577:39"><expr pos:start="577:17" pos:end="577:38"><name pos:start="577:17" pos:end="577:19">smp</name> <operator pos:start="577:21" pos:end="577:22">+=</operator> <name pos:start="577:24" pos:end="577:38"><name pos:start="577:24" pos:end="577:28">avctx</name><operator pos:start="577:29" pos:end="577:30">-&gt;</operator><name pos:start="577:31" pos:end="577:38">channels</name></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <expr_stmt pos:start="583:9" pos:end="583:29"><expr pos:start="583:9" pos:end="583:28"><name pos:start="583:9" pos:end="583:11">src</name> <operator pos:start="583:13" pos:end="583:13">=</operator> <name pos:start="583:15" pos:end="583:17">buf</name> <operator pos:start="583:19" pos:end="583:19">+</operator> <name pos:start="583:21" pos:end="583:28">buf_size</name></expr>;</expr_stmt>

        <break pos:start="585:9" pos:end="585:14">break;</break>

    <case pos:start="587:5" pos:end="587:27">case <expr pos:start="587:10" pos:end="587:26"><name pos:start="587:10" pos:end="587:26">CODEC_ID_ADPCM_XA</name></expr>:</case>

        <while pos:start="589:9" pos:end="601:9">while <condition pos:start="589:15" pos:end="589:31">(<expr pos:start="589:16" pos:end="589:30"><name pos:start="589:16" pos:end="589:23">buf_size</name> <operator pos:start="589:25" pos:end="589:26">&gt;=</operator> <literal type="number" pos:start="589:28" pos:end="589:30">128</literal></expr>)</condition> <block pos:start="589:33" pos:end="601:9">{<block_content pos:start="591:13" pos:end="599:28">

            <expr_stmt pos:start="591:13" pos:end="593:33"><expr pos:start="591:13" pos:end="593:32"><call pos:start="591:13" pos:end="593:32"><name pos:start="591:13" pos:end="591:21">xa_decode</name><argument_list pos:start="591:22" pos:end="593:32">(<argument pos:start="591:23" pos:end="591:29"><expr pos:start="591:23" pos:end="591:29"><name pos:start="591:23" pos:end="591:29">samples</name></expr></argument>, <argument pos:start="591:32" pos:end="591:34"><expr pos:start="591:32" pos:end="591:34"><name pos:start="591:32" pos:end="591:34">src</name></expr></argument>, <argument pos:start="591:37" pos:end="591:49"><expr pos:start="591:37" pos:end="591:49"><operator pos:start="591:37" pos:end="591:37">&amp;</operator><name pos:start="591:38" pos:end="591:49"><name pos:start="591:38" pos:end="591:38">c</name><operator pos:start="591:39" pos:end="591:40">-&gt;</operator><name pos:start="591:41" pos:end="591:46">status</name><index pos:start="591:47" pos:end="591:49">[<expr pos:start="591:48" pos:end="591:48"><literal type="number" pos:start="591:48" pos:end="591:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="591:52" pos:end="591:64"><expr pos:start="591:52" pos:end="591:64"><operator pos:start="591:52" pos:end="591:52">&amp;</operator><name pos:start="591:53" pos:end="591:64"><name pos:start="591:53" pos:end="591:53">c</name><operator pos:start="591:54" pos:end="591:55">-&gt;</operator><name pos:start="591:56" pos:end="591:61">status</name><index pos:start="591:62" pos:end="591:64">[<expr pos:start="591:63" pos:end="591:63"><literal type="number" pos:start="591:63" pos:end="591:63">1</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="593:17" pos:end="593:31"><expr pos:start="593:17" pos:end="593:31"><name pos:start="593:17" pos:end="593:31"><name pos:start="593:17" pos:end="593:21">avctx</name><operator pos:start="593:22" pos:end="593:23">-&gt;</operator><name pos:start="593:24" pos:end="593:31">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="595:13" pos:end="595:23"><expr pos:start="595:13" pos:end="595:22"><name pos:start="595:13" pos:end="595:15">src</name> <operator pos:start="595:17" pos:end="595:18">+=</operator> <literal type="number" pos:start="595:20" pos:end="595:22">128</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="597:13" pos:end="597:30"><expr pos:start="597:13" pos:end="597:29"><name pos:start="597:13" pos:end="597:19">samples</name> <operator pos:start="597:21" pos:end="597:22">+=</operator> <literal type="number" pos:start="597:24" pos:end="597:25">28</literal> <operator pos:start="597:27" pos:end="597:27">*</operator> <literal type="number" pos:start="597:29" pos:end="597:29">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="599:13" pos:end="599:28"><expr pos:start="599:13" pos:end="599:27"><name pos:start="599:13" pos:end="599:20">buf_size</name> <operator pos:start="599:22" pos:end="599:23">-=</operator> <literal type="number" pos:start="599:25" pos:end="599:27">128</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="603:9" pos:end="603:14">break;</break>

    <case pos:start="605:5" pos:end="605:36">case <expr pos:start="605:10" pos:end="605:35"><name pos:start="605:10" pos:end="605:35">CODEC_ID_ADPCM_IMA_EA_EACS</name></expr>:</case>

        <expr_stmt pos:start="607:9" pos:end="607:17"><expr pos:start="607:9" pos:end="607:16"><name pos:start="607:9" pos:end="607:11">src</name> <operator pos:start="607:13" pos:end="607:14">+=</operator> <literal type="number" pos:start="607:16" pos:end="607:16">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="607:19" pos:end="607:53">// skip sample count (already read)</comment>



        <for pos:start="611:9" pos:end="613:80">for <control pos:start="611:13" pos:end="611:29">(<init pos:start="611:14" pos:end="611:17"><expr pos:start="611:14" pos:end="611:16"><name pos:start="611:14" pos:end="611:14">i</name><operator pos:start="611:15" pos:end="611:15">=</operator><literal type="number" pos:start="611:16" pos:end="611:16">0</literal></expr>;</init> <condition pos:start="611:19" pos:end="611:24"><expr pos:start="611:19" pos:end="611:23"><name pos:start="611:19" pos:end="611:19">i</name><operator pos:start="611:20" pos:end="611:21">&lt;=</operator><name pos:start="611:22" pos:end="611:23">st</name></expr>;</condition> <incr pos:start="611:26" pos:end="611:28"><expr pos:start="611:26" pos:end="611:28"><name pos:start="611:26" pos:end="611:26">i</name><operator pos:start="611:27" pos:end="611:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="613:13" pos:end="613:80"><block_content pos:start="613:13" pos:end="613:80">

            <expr_stmt pos:start="613:13" pos:end="613:80"><expr pos:start="613:13" pos:end="613:79"><name pos:start="613:13" pos:end="613:24"><name pos:start="613:13" pos:end="613:13">c</name><operator pos:start="613:14" pos:end="613:15">-&gt;</operator><name pos:start="613:16" pos:end="613:21">status</name><index pos:start="613:22" pos:end="613:24">[<expr pos:start="613:23" pos:end="613:23"><name pos:start="613:23" pos:end="613:23">i</name></expr>]</index></name><operator pos:start="613:25" pos:end="613:25">.</operator><name pos:start="613:26" pos:end="613:35">step_index</name> <operator pos:start="613:37" pos:end="613:37">=</operator> <call pos:start="613:39" pos:end="613:79"><name pos:start="613:39" pos:end="613:45">av_clip</name><argument_list pos:start="613:46" pos:end="613:79">(<argument pos:start="613:47" pos:end="613:71"><expr pos:start="613:47" pos:end="613:71"><call pos:start="613:47" pos:end="613:71"><name pos:start="613:47" pos:end="613:65">bytestream_get_le32</name><argument_list pos:start="613:66" pos:end="613:71">(<argument pos:start="613:67" pos:end="613:70"><expr pos:start="613:67" pos:end="613:70"><operator pos:start="613:67" pos:end="613:67">&amp;</operator><name pos:start="613:68" pos:end="613:70">src</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="613:74" pos:end="613:74"><expr pos:start="613:74" pos:end="613:74"><literal type="number" pos:start="613:74" pos:end="613:74">0</literal></expr></argument>, <argument pos:start="613:77" pos:end="613:78"><expr pos:start="613:77" pos:end="613:78"><literal type="number" pos:start="613:77" pos:end="613:78">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="615:9" pos:end="617:64">for <control pos:start="615:13" pos:end="615:29">(<init pos:start="615:14" pos:end="615:17"><expr pos:start="615:14" pos:end="615:16"><name pos:start="615:14" pos:end="615:14">i</name><operator pos:start="615:15" pos:end="615:15">=</operator><literal type="number" pos:start="615:16" pos:end="615:16">0</literal></expr>;</init> <condition pos:start="615:19" pos:end="615:24"><expr pos:start="615:19" pos:end="615:23"><name pos:start="615:19" pos:end="615:19">i</name><operator pos:start="615:20" pos:end="615:21">&lt;=</operator><name pos:start="615:22" pos:end="615:23">st</name></expr>;</condition> <incr pos:start="615:26" pos:end="615:28"><expr pos:start="615:26" pos:end="615:28"><name pos:start="615:26" pos:end="615:26">i</name><operator pos:start="615:27" pos:end="615:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="617:13" pos:end="617:64"><block_content pos:start="617:13" pos:end="617:64">

            <expr_stmt pos:start="617:13" pos:end="617:64"><expr pos:start="617:13" pos:end="617:63"><name pos:start="617:13" pos:end="617:24"><name pos:start="617:13" pos:end="617:13">c</name><operator pos:start="617:14" pos:end="617:15">-&gt;</operator><name pos:start="617:16" pos:end="617:21">status</name><index pos:start="617:22" pos:end="617:24">[<expr pos:start="617:23" pos:end="617:23"><name pos:start="617:23" pos:end="617:23">i</name></expr>]</index></name><operator pos:start="617:25" pos:end="617:25">.</operator><name pos:start="617:26" pos:end="617:34">predictor</name>  <operator pos:start="617:37" pos:end="617:37">=</operator> <call pos:start="617:39" pos:end="617:63"><name pos:start="617:39" pos:end="617:57">bytestream_get_le32</name><argument_list pos:start="617:58" pos:end="617:63">(<argument pos:start="617:59" pos:end="617:62"><expr pos:start="617:59" pos:end="617:62"><operator pos:start="617:59" pos:end="617:59">&amp;</operator><name pos:start="617:60" pos:end="617:62">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="621:9" pos:end="627:9">for <control pos:start="621:13" pos:end="621:59">(<init pos:start="621:14" pos:end="621:40"><expr pos:start="621:14" pos:end="621:39"><name pos:start="621:14" pos:end="621:14">n</name> <operator pos:start="621:16" pos:end="621:16">=</operator> <name pos:start="621:18" pos:end="621:27">nb_samples</name> <operator pos:start="621:29" pos:end="621:30">&gt;&gt;</operator> <operator pos:start="621:32" pos:end="621:32">(</operator><literal type="number" pos:start="621:33" pos:end="621:35">1</literal> <operator pos:start="621:35" pos:end="621:35">-</operator> <name pos:start="621:37" pos:end="621:38">st</name><operator pos:start="621:39" pos:end="621:39">)</operator></expr>;</init> <condition pos:start="621:42" pos:end="621:47"><expr pos:start="621:42" pos:end="621:46"><name pos:start="621:42" pos:end="621:42">n</name> <operator pos:start="621:44" pos:end="621:44">&gt;</operator> <literal type="number" pos:start="621:46" pos:end="621:46">0</literal></expr>;</condition> <incr pos:start="621:49" pos:end="621:58"><expr pos:start="621:49" pos:end="621:51"><name pos:start="621:49" pos:end="621:49">n</name><operator pos:start="621:50" pos:end="621:51">--</operator></expr><operator pos:start="621:52" pos:end="621:52">,</operator> <expr pos:start="621:54" pos:end="621:58"><name pos:start="621:54" pos:end="621:56">src</name><operator pos:start="621:57" pos:end="621:58">++</operator></expr></incr>)</control> <block pos:start="621:61" pos:end="627:9">{<block_content pos:start="623:13" pos:end="625:79">

            <expr_stmt pos:start="623:13" pos:end="623:79"><expr pos:start="623:13" pos:end="623:78"><operator pos:start="623:13" pos:end="623:13">*</operator><name pos:start="623:14" pos:end="623:20">samples</name><operator pos:start="623:21" pos:end="623:22">++</operator> <operator pos:start="623:24" pos:end="623:24">=</operator> <call pos:start="623:26" pos:end="623:78"><name pos:start="623:26" pos:end="623:48">adpcm_ima_expand_nibble</name><argument_list pos:start="623:49" pos:end="623:78">(<argument pos:start="623:50" pos:end="623:62"><expr pos:start="623:50" pos:end="623:62"><operator pos:start="623:50" pos:end="623:50">&amp;</operator><name pos:start="623:51" pos:end="623:62"><name pos:start="623:51" pos:end="623:51">c</name><operator pos:start="623:52" pos:end="623:53">-&gt;</operator><name pos:start="623:54" pos:end="623:59">status</name><index pos:start="623:60" pos:end="623:62">[<expr pos:start="623:61" pos:end="623:61"><literal type="number" pos:start="623:61" pos:end="623:61">0</literal></expr>]</index></name></expr></argument>,  <argument pos:start="623:66" pos:end="623:72"><expr pos:start="623:66" pos:end="623:72"><operator pos:start="623:66" pos:end="623:66">*</operator><name pos:start="623:67" pos:end="623:69">src</name><operator pos:start="623:70" pos:end="623:71">&gt;&gt;</operator><literal type="number" pos:start="623:72" pos:end="623:72">4</literal></expr></argument>,   <argument pos:start="623:77" pos:end="623:77"><expr pos:start="623:77" pos:end="623:77"><literal type="number" pos:start="623:77" pos:end="623:77">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="625:13" pos:end="625:79"><expr pos:start="625:13" pos:end="625:78"><operator pos:start="625:13" pos:end="625:13">*</operator><name pos:start="625:14" pos:end="625:20">samples</name><operator pos:start="625:21" pos:end="625:22">++</operator> <operator pos:start="625:24" pos:end="625:24">=</operator> <call pos:start="625:26" pos:end="625:78"><name pos:start="625:26" pos:end="625:48">adpcm_ima_expand_nibble</name><argument_list pos:start="625:49" pos:end="625:78">(<argument pos:start="625:50" pos:end="625:63"><expr pos:start="625:50" pos:end="625:63"><operator pos:start="625:50" pos:end="625:50">&amp;</operator><name pos:start="625:51" pos:end="625:63"><name pos:start="625:51" pos:end="625:51">c</name><operator pos:start="625:52" pos:end="625:53">-&gt;</operator><name pos:start="625:54" pos:end="625:59">status</name><index pos:start="625:60" pos:end="625:63">[<expr pos:start="625:61" pos:end="625:62"><name pos:start="625:61" pos:end="625:62">st</name></expr>]</index></name></expr></argument>, <argument pos:start="625:66" pos:end="625:74"><expr pos:start="625:66" pos:end="625:74"><operator pos:start="625:66" pos:end="625:66">*</operator><name pos:start="625:67" pos:end="625:69">src</name><operator pos:start="625:70" pos:end="625:70">&amp;</operator><literal type="number" pos:start="625:71" pos:end="625:74">0x0F</literal></expr></argument>, <argument pos:start="625:77" pos:end="625:77"><expr pos:start="625:77" pos:end="625:77"><literal type="number" pos:start="625:77" pos:end="625:77">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="629:9" pos:end="629:14">break;</break>

    <case pos:start="631:5" pos:end="631:36">case <expr pos:start="631:10" pos:end="631:35"><name pos:start="631:10" pos:end="631:35">CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>:</case>

        <for pos:start="633:9" pos:end="639:9">for <control pos:start="633:13" pos:end="633:59">(<init pos:start="633:14" pos:end="633:40"><expr pos:start="633:14" pos:end="633:39"><name pos:start="633:14" pos:end="633:14">n</name> <operator pos:start="633:16" pos:end="633:16">=</operator> <name pos:start="633:18" pos:end="633:27">nb_samples</name> <operator pos:start="633:29" pos:end="633:30">&gt;&gt;</operator> <operator pos:start="633:32" pos:end="633:32">(</operator><literal type="number" pos:start="633:33" pos:end="633:35">1</literal> <operator pos:start="633:35" pos:end="633:35">-</operator> <name pos:start="633:37" pos:end="633:38">st</name><operator pos:start="633:39" pos:end="633:39">)</operator></expr>;</init> <condition pos:start="633:42" pos:end="633:47"><expr pos:start="633:42" pos:end="633:46"><name pos:start="633:42" pos:end="633:42">n</name> <operator pos:start="633:44" pos:end="633:44">&gt;</operator> <literal type="number" pos:start="633:46" pos:end="633:46">0</literal></expr>;</condition> <incr pos:start="633:49" pos:end="633:58"><expr pos:start="633:49" pos:end="633:51"><name pos:start="633:49" pos:end="633:49">n</name><operator pos:start="633:50" pos:end="633:51">--</operator></expr><operator pos:start="633:52" pos:end="633:52">,</operator> <expr pos:start="633:54" pos:end="633:58"><name pos:start="633:54" pos:end="633:56">src</name><operator pos:start="633:57" pos:end="633:58">++</operator></expr></incr>)</control> <block pos:start="633:61" pos:end="639:9">{<block_content pos:start="635:13" pos:end="637:80">

            <expr_stmt pos:start="635:13" pos:end="635:80"><expr pos:start="635:13" pos:end="635:79"><operator pos:start="635:13" pos:end="635:13">*</operator><name pos:start="635:14" pos:end="635:20">samples</name><operator pos:start="635:21" pos:end="635:22">++</operator> <operator pos:start="635:24" pos:end="635:24">=</operator> <call pos:start="635:26" pos:end="635:79"><name pos:start="635:26" pos:end="635:48">adpcm_ima_expand_nibble</name><argument_list pos:start="635:49" pos:end="635:79">(<argument pos:start="635:50" pos:end="635:62"><expr pos:start="635:50" pos:end="635:62"><operator pos:start="635:50" pos:end="635:50">&amp;</operator><name pos:start="635:51" pos:end="635:62"><name pos:start="635:51" pos:end="635:51">c</name><operator pos:start="635:52" pos:end="635:53">-&gt;</operator><name pos:start="635:54" pos:end="635:59">status</name><index pos:start="635:60" pos:end="635:62">[<expr pos:start="635:61" pos:end="635:61"><literal type="number" pos:start="635:61" pos:end="635:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="635:65" pos:end="635:75"><expr pos:start="635:65" pos:end="635:75"><name pos:start="635:65" pos:end="635:70"><name pos:start="635:65" pos:end="635:67">src</name><index pos:start="635:68" pos:end="635:70">[<expr pos:start="635:69" pos:end="635:69"><literal type="number" pos:start="635:69" pos:end="635:69">0</literal></expr>]</index></name> <operator pos:start="635:72" pos:end="635:73">&gt;&gt;</operator> <literal type="number" pos:start="635:75" pos:end="635:75">4</literal></expr></argument>, <argument pos:start="635:78" pos:end="635:78"><expr pos:start="635:78" pos:end="635:78"><literal type="number" pos:start="635:78" pos:end="635:78">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="637:13" pos:end="637:80"><expr pos:start="637:13" pos:end="637:79"><operator pos:start="637:13" pos:end="637:13">*</operator><name pos:start="637:14" pos:end="637:20">samples</name><operator pos:start="637:21" pos:end="637:22">++</operator> <operator pos:start="637:24" pos:end="637:24">=</operator> <call pos:start="637:26" pos:end="637:79"><name pos:start="637:26" pos:end="637:48">adpcm_ima_expand_nibble</name><argument_list pos:start="637:49" pos:end="637:79">(<argument pos:start="637:50" pos:end="637:63"><expr pos:start="637:50" pos:end="637:63"><operator pos:start="637:50" pos:end="637:50">&amp;</operator><name pos:start="637:51" pos:end="637:63"><name pos:start="637:51" pos:end="637:51">c</name><operator pos:start="637:52" pos:end="637:53">-&gt;</operator><name pos:start="637:54" pos:end="637:59">status</name><index pos:start="637:60" pos:end="637:63">[<expr pos:start="637:61" pos:end="637:62"><name pos:start="637:61" pos:end="637:62">st</name></expr>]</index></name></expr></argument>,<argument pos:start="637:65" pos:end="637:75"><expr pos:start="637:65" pos:end="637:75"><name pos:start="637:65" pos:end="637:70"><name pos:start="637:65" pos:end="637:67">src</name><index pos:start="637:68" pos:end="637:70">[<expr pos:start="637:69" pos:end="637:69"><literal type="number" pos:start="637:69" pos:end="637:69">0</literal></expr>]</index></name><operator pos:start="637:71" pos:end="637:71">&amp;</operator><literal type="number" pos:start="637:72" pos:end="637:75">0x0F</literal></expr></argument>, <argument pos:start="637:78" pos:end="637:78"><expr pos:start="637:78" pos:end="637:78"><literal type="number" pos:start="637:78" pos:end="637:78">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="641:9" pos:end="641:14">break;</break>

    <case pos:start="643:5" pos:end="643:27">case <expr pos:start="643:10" pos:end="643:26"><name pos:start="643:10" pos:end="643:26">CODEC_ID_ADPCM_EA</name></expr>:</case>

    <block pos:start="645:5" pos:end="751:5">{<block_content pos:start="647:9" pos:end="749:14">

        <decl_stmt pos:start="647:9" pos:end="647:60"><decl pos:start="647:9" pos:end="647:36"><type pos:start="647:9" pos:end="647:15"><name pos:start="647:9" pos:end="647:15">int32_t</name></type> <name pos:start="647:17" pos:end="647:36">previous_left_sample</name></decl>, <decl pos:start="647:39" pos:end="647:59"><type ref="prev" pos:start="647:9" pos:end="647:15"/><name pos:start="647:39" pos:end="647:59">previous_right_sample</name></decl>;</decl_stmt>

        <decl_stmt pos:start="649:9" pos:end="649:58"><decl pos:start="649:9" pos:end="649:35"><type pos:start="649:9" pos:end="649:15"><name pos:start="649:9" pos:end="649:15">int32_t</name></type> <name pos:start="649:17" pos:end="649:35">current_left_sample</name></decl>, <decl pos:start="649:38" pos:end="649:57"><type ref="prev" pos:start="649:9" pos:end="649:15"/><name pos:start="649:38" pos:end="649:57">current_right_sample</name></decl>;</decl_stmt>

        <decl_stmt pos:start="651:9" pos:end="651:52"><decl pos:start="651:9" pos:end="651:32"><type pos:start="651:9" pos:end="651:15"><name pos:start="651:9" pos:end="651:15">int32_t</name></type> <name pos:start="651:17" pos:end="651:32">next_left_sample</name></decl>, <decl pos:start="651:35" pos:end="651:51"><type ref="prev" pos:start="651:9" pos:end="651:15"/><name pos:start="651:35" pos:end="651:51">next_right_sample</name></decl>;</decl_stmt>

        <decl_stmt pos:start="653:9" pos:end="653:51"><decl pos:start="653:9" pos:end="653:23"><type pos:start="653:9" pos:end="653:15"><name pos:start="653:9" pos:end="653:15">int32_t</name></type> <name pos:start="653:17" pos:end="653:23">coeff1l</name></decl>, <decl pos:start="653:26" pos:end="653:32"><type ref="prev" pos:start="653:9" pos:end="653:15"/><name pos:start="653:26" pos:end="653:32">coeff2l</name></decl>, <decl pos:start="653:35" pos:end="653:41"><type ref="prev" pos:start="653:9" pos:end="653:15"/><name pos:start="653:35" pos:end="653:41">coeff1r</name></decl>, <decl pos:start="653:44" pos:end="653:50"><type ref="prev" pos:start="653:9" pos:end="653:15"/><name pos:start="653:44" pos:end="653:50">coeff2r</name></decl>;</decl_stmt>

        <decl_stmt pos:start="655:9" pos:end="655:40"><decl pos:start="655:9" pos:end="655:26"><type pos:start="655:9" pos:end="655:15"><name pos:start="655:9" pos:end="655:15">uint8_t</name></type> <name pos:start="655:17" pos:end="655:26">shift_left</name></decl>, <decl pos:start="655:29" pos:end="655:39"><type ref="prev" pos:start="655:9" pos:end="655:15"/><name pos:start="655:29" pos:end="655:39">shift_right</name></decl>;</decl_stmt>



        <comment type="block" pos:start="659:9" pos:end="661:44">/* Each EA ADPCM frame has a 12-byte header followed by 30-byte pieces,

           each coding 28 stereo samples. */</comment>



        <expr_stmt pos:start="665:9" pos:end="665:17"><expr pos:start="665:9" pos:end="665:16"><name pos:start="665:9" pos:end="665:11">src</name> <operator pos:start="665:13" pos:end="665:14">+=</operator> <literal type="number" pos:start="665:16" pos:end="665:16">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="665:19" pos:end="665:53">// skip sample count (already read)</comment>



        <expr_stmt pos:start="669:9" pos:end="669:67"><expr pos:start="669:9" pos:end="669:66"><name pos:start="669:9" pos:end="669:27">current_left_sample</name>   <operator pos:start="669:31" pos:end="669:31">=</operator> <operator pos:start="669:33" pos:end="669:33">(</operator><name pos:start="669:34" pos:end="669:40">int16_t</name><operator pos:start="669:41" pos:end="669:41">)</operator><call pos:start="669:42" pos:end="669:66"><name pos:start="669:42" pos:end="669:60">bytestream_get_le16</name><argument_list pos:start="669:61" pos:end="669:66">(<argument pos:start="669:62" pos:end="669:65"><expr pos:start="669:62" pos:end="669:65"><operator pos:start="669:62" pos:end="669:62">&amp;</operator><name pos:start="669:63" pos:end="669:65">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="671:9" pos:end="671:67"><expr pos:start="671:9" pos:end="671:66"><name pos:start="671:9" pos:end="671:28">previous_left_sample</name>  <operator pos:start="671:31" pos:end="671:31">=</operator> <operator pos:start="671:33" pos:end="671:33">(</operator><name pos:start="671:34" pos:end="671:40">int16_t</name><operator pos:start="671:41" pos:end="671:41">)</operator><call pos:start="671:42" pos:end="671:66"><name pos:start="671:42" pos:end="671:60">bytestream_get_le16</name><argument_list pos:start="671:61" pos:end="671:66">(<argument pos:start="671:62" pos:end="671:65"><expr pos:start="671:62" pos:end="671:65"><operator pos:start="671:62" pos:end="671:62">&amp;</operator><name pos:start="671:63" pos:end="671:65">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="673:9" pos:end="673:67"><expr pos:start="673:9" pos:end="673:66"><name pos:start="673:9" pos:end="673:28">current_right_sample</name>  <operator pos:start="673:31" pos:end="673:31">=</operator> <operator pos:start="673:33" pos:end="673:33">(</operator><name pos:start="673:34" pos:end="673:40">int16_t</name><operator pos:start="673:41" pos:end="673:41">)</operator><call pos:start="673:42" pos:end="673:66"><name pos:start="673:42" pos:end="673:60">bytestream_get_le16</name><argument_list pos:start="673:61" pos:end="673:66">(<argument pos:start="673:62" pos:end="673:65"><expr pos:start="673:62" pos:end="673:65"><operator pos:start="673:62" pos:end="673:62">&amp;</operator><name pos:start="673:63" pos:end="673:65">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="675:9" pos:end="675:67"><expr pos:start="675:9" pos:end="675:66"><name pos:start="675:9" pos:end="675:29">previous_right_sample</name> <operator pos:start="675:31" pos:end="675:31">=</operator> <operator pos:start="675:33" pos:end="675:33">(</operator><name pos:start="675:34" pos:end="675:40">int16_t</name><operator pos:start="675:41" pos:end="675:41">)</operator><call pos:start="675:42" pos:end="675:66"><name pos:start="675:42" pos:end="675:60">bytestream_get_le16</name><argument_list pos:start="675:61" pos:end="675:66">(<argument pos:start="675:62" pos:end="675:65"><expr pos:start="675:62" pos:end="675:65"><operator pos:start="675:62" pos:end="675:62">&amp;</operator><name pos:start="675:63" pos:end="675:65">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="679:9" pos:end="739:9">for <control pos:start="679:13" pos:end="679:60">(<init pos:start="679:14" pos:end="679:24"><expr pos:start="679:14" pos:end="679:23"><name pos:start="679:14" pos:end="679:19">count1</name> <operator pos:start="679:21" pos:end="679:21">=</operator> <literal type="number" pos:start="679:23" pos:end="679:23">0</literal></expr>;</init> <condition pos:start="679:26" pos:end="679:50"><expr pos:start="679:26" pos:end="679:49"><name pos:start="679:26" pos:end="679:31">count1</name> <operator pos:start="679:33" pos:end="679:33">&lt;</operator> <name pos:start="679:35" pos:end="679:44">nb_samples</name> <operator pos:start="679:46" pos:end="679:46">/</operator> <literal type="number" pos:start="679:48" pos:end="679:49">28</literal></expr>;</condition> <incr pos:start="679:52" pos:end="679:59"><expr pos:start="679:52" pos:end="679:59"><name pos:start="679:52" pos:end="679:57">count1</name><operator pos:start="679:58" pos:end="679:59">++</operator></expr></incr>)</control> <block pos:start="679:62" pos:end="739:9">{<block_content pos:start="681:13" pos:end="737:13">

            <expr_stmt pos:start="681:13" pos:end="681:56"><expr pos:start="681:13" pos:end="681:55"><name pos:start="681:13" pos:end="681:19">coeff1l</name> <operator pos:start="681:21" pos:end="681:21">=</operator> <name pos:start="681:23" pos:end="681:55"><name pos:start="681:23" pos:end="681:36">ea_adpcm_table</name><index pos:start="681:37" pos:end="681:55">[ <expr pos:start="681:39" pos:end="681:47"><operator pos:start="681:39" pos:end="681:39">*</operator><name pos:start="681:40" pos:end="681:42">src</name> <operator pos:start="681:44" pos:end="681:45">&gt;&gt;</operator> <literal type="number" pos:start="681:47" pos:end="681:47">4</literal></expr>       ]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="683:13" pos:end="683:56"><expr pos:start="683:13" pos:end="683:55"><name pos:start="683:13" pos:end="683:19">coeff2l</name> <operator pos:start="683:21" pos:end="683:21">=</operator> <name pos:start="683:23" pos:end="683:55"><name pos:start="683:23" pos:end="683:36">ea_adpcm_table</name><index pos:start="683:37" pos:end="683:55">[<expr pos:start="683:38" pos:end="683:54"><operator pos:start="683:38" pos:end="683:38">(</operator><operator pos:start="683:39" pos:end="683:39">*</operator><name pos:start="683:40" pos:end="683:42">src</name> <operator pos:start="683:44" pos:end="683:45">&gt;&gt;</operator> <literal type="number" pos:start="683:47" pos:end="683:47">4</literal>  <operator pos:start="683:50" pos:end="683:50">)</operator> <operator pos:start="683:52" pos:end="683:52">+</operator> <literal type="number" pos:start="683:54" pos:end="683:54">4</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="685:13" pos:end="685:50"><expr pos:start="685:13" pos:end="685:49"><name pos:start="685:13" pos:end="685:19">coeff1r</name> <operator pos:start="685:21" pos:end="685:21">=</operator> <name pos:start="685:23" pos:end="685:49"><name pos:start="685:23" pos:end="685:36">ea_adpcm_table</name><index pos:start="685:37" pos:end="685:49">[<expr pos:start="685:38" pos:end="685:48"><operator pos:start="685:38" pos:end="685:38">*</operator><name pos:start="685:39" pos:end="685:41">src</name> <operator pos:start="685:43" pos:end="685:43">&amp;</operator> <literal type="number" pos:start="685:45" pos:end="685:48">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="687:13" pos:end="687:56"><expr pos:start="687:13" pos:end="687:55"><name pos:start="687:13" pos:end="687:19">coeff2r</name> <operator pos:start="687:21" pos:end="687:21">=</operator> <name pos:start="687:23" pos:end="687:55"><name pos:start="687:23" pos:end="687:36">ea_adpcm_table</name><index pos:start="687:37" pos:end="687:55">[<expr pos:start="687:38" pos:end="687:54"><operator pos:start="687:38" pos:end="687:38">(</operator><operator pos:start="687:39" pos:end="687:39">*</operator><name pos:start="687:40" pos:end="687:42">src</name> <operator pos:start="687:44" pos:end="687:44">&amp;</operator> <literal type="number" pos:start="687:46" pos:end="687:49">0x0F</literal><operator pos:start="687:50" pos:end="687:50">)</operator> <operator pos:start="687:52" pos:end="687:52">+</operator> <literal type="number" pos:start="687:54" pos:end="687:54">4</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="689:13" pos:end="689:18"><expr pos:start="689:13" pos:end="689:17"><name pos:start="689:13" pos:end="689:15">src</name><operator pos:start="689:16" pos:end="689:17">++</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="693:13" pos:end="693:43"><expr pos:start="693:13" pos:end="693:42"><name pos:start="693:13" pos:end="693:22">shift_left</name>  <operator pos:start="693:25" pos:end="693:25">=</operator> <literal type="number" pos:start="693:27" pos:end="693:30">20</literal> <operator pos:start="693:30" pos:end="693:30">-</operator> <operator pos:start="693:32" pos:end="693:32">(</operator><operator pos:start="693:33" pos:end="693:33">*</operator><name pos:start="693:34" pos:end="693:36">src</name> <operator pos:start="693:38" pos:end="693:39">&gt;&gt;</operator> <literal type="number" pos:start="693:41" pos:end="693:41">4</literal><operator pos:start="693:42" pos:end="693:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="695:13" pos:end="695:45"><expr pos:start="695:13" pos:end="695:44"><name pos:start="695:13" pos:end="695:23">shift_right</name> <operator pos:start="695:25" pos:end="695:25">=</operator> <literal type="number" pos:start="695:27" pos:end="695:30">20</literal> <operator pos:start="695:30" pos:end="695:30">-</operator> <operator pos:start="695:32" pos:end="695:32">(</operator><operator pos:start="695:33" pos:end="695:33">*</operator><name pos:start="695:34" pos:end="695:36">src</name> <operator pos:start="695:38" pos:end="695:38">&amp;</operator> <literal type="number" pos:start="695:40" pos:end="695:43">0x0F</literal><operator pos:start="695:44" pos:end="695:44">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="697:13" pos:end="697:18"><expr pos:start="697:13" pos:end="697:17"><name pos:start="697:13" pos:end="697:15">src</name><operator pos:start="697:16" pos:end="697:17">++</operator></expr>;</expr_stmt>



            <for pos:start="701:13" pos:end="737:13">for <control pos:start="701:17" pos:end="701:51">(<init pos:start="701:18" pos:end="701:28"><expr pos:start="701:18" pos:end="701:27"><name pos:start="701:18" pos:end="701:23">count2</name> <operator pos:start="701:25" pos:end="701:25">=</operator> <literal type="number" pos:start="701:27" pos:end="701:27">0</literal></expr>;</init> <condition pos:start="701:30" pos:end="701:41"><expr pos:start="701:30" pos:end="701:40"><name pos:start="701:30" pos:end="701:35">count2</name> <operator pos:start="701:37" pos:end="701:37">&lt;</operator> <literal type="number" pos:start="701:39" pos:end="701:40">28</literal></expr>;</condition> <incr pos:start="701:43" pos:end="701:50"><expr pos:start="701:43" pos:end="701:50"><name pos:start="701:43" pos:end="701:48">count2</name><operator pos:start="701:49" pos:end="701:50">++</operator></expr></incr>)</control> <block pos:start="701:53" pos:end="737:13">{<block_content pos:start="703:17" pos:end="735:66">

                <expr_stmt pos:start="703:17" pos:end="703:76"><expr pos:start="703:17" pos:end="703:75"><name pos:start="703:17" pos:end="703:32">next_left_sample</name>  <operator pos:start="703:35" pos:end="703:35">=</operator> <call pos:start="703:37" pos:end="703:61"><name pos:start="703:37" pos:end="703:47">sign_extend</name><argument_list pos:start="703:48" pos:end="703:61">(<argument pos:start="703:49" pos:end="703:57"><expr pos:start="703:49" pos:end="703:57"><operator pos:start="703:49" pos:end="703:49">*</operator><name pos:start="703:50" pos:end="703:52">src</name> <operator pos:start="703:54" pos:end="703:55">&gt;&gt;</operator> <literal type="number" pos:start="703:57" pos:end="703:57">4</literal></expr></argument>, <argument pos:start="703:60" pos:end="703:60"><expr pos:start="703:60" pos:end="703:60"><literal type="number" pos:start="703:60" pos:end="703:60">4</literal></expr></argument>)</argument_list></call> <operator pos:start="703:63" pos:end="703:64">&lt;&lt;</operator> <name pos:start="703:66" pos:end="703:75">shift_left</name></expr>;</expr_stmt>

                <expr_stmt pos:start="705:17" pos:end="705:77"><expr pos:start="705:17" pos:end="705:76"><name pos:start="705:17" pos:end="705:33">next_right_sample</name> <operator pos:start="705:35" pos:end="705:35">=</operator> <call pos:start="705:37" pos:end="705:61"><name pos:start="705:37" pos:end="705:47">sign_extend</name><argument_list pos:start="705:48" pos:end="705:61">(<argument pos:start="705:49" pos:end="705:52"><expr pos:start="705:49" pos:end="705:52"><operator pos:start="705:49" pos:end="705:49">*</operator><name pos:start="705:50" pos:end="705:52">src</name></expr></argument>,      <argument pos:start="705:60" pos:end="705:60"><expr pos:start="705:60" pos:end="705:60"><literal type="number" pos:start="705:60" pos:end="705:60">4</literal></expr></argument>)</argument_list></call> <operator pos:start="705:63" pos:end="705:64">&lt;&lt;</operator> <name pos:start="705:66" pos:end="705:76">shift_right</name></expr>;</expr_stmt>

                <expr_stmt pos:start="707:17" pos:end="707:22"><expr pos:start="707:17" pos:end="707:21"><name pos:start="707:17" pos:end="707:19">src</name><operator pos:start="707:20" pos:end="707:21">++</operator></expr>;</expr_stmt>



                <expr_stmt pos:start="711:17" pos:end="715:66"><expr pos:start="711:17" pos:end="715:65"><name pos:start="711:17" pos:end="711:32">next_left_sample</name> <operator pos:start="711:34" pos:end="711:34">=</operator> <operator pos:start="711:36" pos:end="711:36">(</operator><name pos:start="711:37" pos:end="711:52">next_left_sample</name> <operator pos:start="711:54" pos:end="711:54">+</operator>

                    <operator pos:start="713:21" pos:end="713:21">(</operator><name pos:start="713:22" pos:end="713:40">current_left_sample</name> <operator pos:start="713:42" pos:end="713:42">*</operator> <name pos:start="713:44" pos:end="713:50">coeff1l</name><operator pos:start="713:51" pos:end="713:51">)</operator> <operator pos:start="713:53" pos:end="713:53">+</operator>

                    <operator pos:start="715:21" pos:end="715:21">(</operator><name pos:start="715:22" pos:end="715:41">previous_left_sample</name> <operator pos:start="715:43" pos:end="715:43">*</operator> <name pos:start="715:45" pos:end="715:51">coeff2l</name><operator pos:start="715:52" pos:end="715:52">)</operator> <operator pos:start="715:54" pos:end="715:54">+</operator> <literal type="number" pos:start="715:56" pos:end="715:59">0x80</literal><operator pos:start="715:60" pos:end="715:60">)</operator> <operator pos:start="715:62" pos:end="715:63">&gt;&gt;</operator> <literal type="number" pos:start="715:65" pos:end="715:65">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="717:17" pos:end="721:67"><expr pos:start="717:17" pos:end="721:66"><name pos:start="717:17" pos:end="717:33">next_right_sample</name> <operator pos:start="717:35" pos:end="717:35">=</operator> <operator pos:start="717:37" pos:end="717:37">(</operator><name pos:start="717:38" pos:end="717:54">next_right_sample</name> <operator pos:start="717:56" pos:end="717:56">+</operator>

                    <operator pos:start="719:21" pos:end="719:21">(</operator><name pos:start="719:22" pos:end="719:41">current_right_sample</name> <operator pos:start="719:43" pos:end="719:43">*</operator> <name pos:start="719:45" pos:end="719:51">coeff1r</name><operator pos:start="719:52" pos:end="719:52">)</operator> <operator pos:start="719:54" pos:end="719:54">+</operator>

                    <operator pos:start="721:21" pos:end="721:21">(</operator><name pos:start="721:22" pos:end="721:42">previous_right_sample</name> <operator pos:start="721:44" pos:end="721:44">*</operator> <name pos:start="721:46" pos:end="721:52">coeff2r</name><operator pos:start="721:53" pos:end="721:53">)</operator> <operator pos:start="721:55" pos:end="721:55">+</operator> <literal type="number" pos:start="721:57" pos:end="721:60">0x80</literal><operator pos:start="721:61" pos:end="721:61">)</operator> <operator pos:start="721:63" pos:end="721:64">&gt;&gt;</operator> <literal type="number" pos:start="721:66" pos:end="721:66">8</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="725:17" pos:end="725:59"><expr pos:start="725:17" pos:end="725:58"><name pos:start="725:17" pos:end="725:36">previous_left_sample</name> <operator pos:start="725:38" pos:end="725:38">=</operator> <name pos:start="725:40" pos:end="725:58">current_left_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="727:17" pos:end="727:70"><expr pos:start="727:17" pos:end="727:69"><name pos:start="727:17" pos:end="727:35">current_left_sample</name> <operator pos:start="727:37" pos:end="727:37">=</operator> <call pos:start="727:39" pos:end="727:69"><name pos:start="727:39" pos:end="727:51">av_clip_int16</name><argument_list pos:start="727:52" pos:end="727:69">(<argument pos:start="727:53" pos:end="727:68"><expr pos:start="727:53" pos:end="727:68"><name pos:start="727:53" pos:end="727:68">next_left_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="729:17" pos:end="729:61"><expr pos:start="729:17" pos:end="729:60"><name pos:start="729:17" pos:end="729:37">previous_right_sample</name> <operator pos:start="729:39" pos:end="729:39">=</operator> <name pos:start="729:41" pos:end="729:60">current_right_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="731:17" pos:end="731:72"><expr pos:start="731:17" pos:end="731:71"><name pos:start="731:17" pos:end="731:36">current_right_sample</name> <operator pos:start="731:38" pos:end="731:38">=</operator> <call pos:start="731:40" pos:end="731:71"><name pos:start="731:40" pos:end="731:52">av_clip_int16</name><argument_list pos:start="731:53" pos:end="731:71">(<argument pos:start="731:54" pos:end="731:70"><expr pos:start="731:54" pos:end="731:70"><name pos:start="731:54" pos:end="731:70">next_right_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="733:17" pos:end="733:65"><expr pos:start="733:17" pos:end="733:64"><operator pos:start="733:17" pos:end="733:17">*</operator><name pos:start="733:18" pos:end="733:24">samples</name><operator pos:start="733:25" pos:end="733:26">++</operator> <operator pos:start="733:28" pos:end="733:28">=</operator> <operator pos:start="733:30" pos:end="733:30">(</operator><name pos:start="733:31" pos:end="733:38">unsigned</name> <name pos:start="733:40" pos:end="733:44">short</name><operator pos:start="733:45" pos:end="733:45">)</operator><name pos:start="733:46" pos:end="733:64">current_left_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="735:17" pos:end="735:66"><expr pos:start="735:17" pos:end="735:65"><operator pos:start="735:17" pos:end="735:17">*</operator><name pos:start="735:18" pos:end="735:24">samples</name><operator pos:start="735:25" pos:end="735:26">++</operator> <operator pos:start="735:28" pos:end="735:28">=</operator> <operator pos:start="735:30" pos:end="735:30">(</operator><name pos:start="735:31" pos:end="735:38">unsigned</name> <name pos:start="735:40" pos:end="735:44">short</name><operator pos:start="735:45" pos:end="735:45">)</operator><name pos:start="735:46" pos:end="735:65">current_right_sample</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="743:9" pos:end="745:21"><if pos:start="743:9" pos:end="745:21">if <condition pos:start="743:12" pos:end="743:38">(<expr pos:start="743:13" pos:end="743:37"><name pos:start="743:13" pos:end="743:15">src</name> <operator pos:start="743:17" pos:end="743:17">-</operator> <name pos:start="743:19" pos:end="743:21">buf</name> <operator pos:start="743:23" pos:end="743:24">==</operator> <name pos:start="743:26" pos:end="743:33">buf_size</name> <operator pos:start="743:35" pos:end="743:35">-</operator> <literal type="number" pos:start="743:37" pos:end="743:37">2</literal></expr>)</condition><block type="pseudo" pos:start="745:13" pos:end="745:21"><block_content pos:start="745:13" pos:end="745:21">

            <expr_stmt pos:start="745:13" pos:end="745:21"><expr pos:start="745:13" pos:end="745:20"><name pos:start="745:13" pos:end="745:15">src</name> <operator pos:start="745:17" pos:end="745:18">+=</operator> <literal type="number" pos:start="745:20" pos:end="745:20">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="745:23" pos:end="745:48">// Skip terminating 0x0000</comment>



        <break pos:start="749:9" pos:end="749:14">break;</break>

    </block_content>}</block>

    <case pos:start="753:5" pos:end="753:36">case <expr pos:start="753:10" pos:end="753:35"><name pos:start="753:10" pos:end="753:35">CODEC_ID_ADPCM_EA_MAXIS_XA</name></expr>:</case>

    <block pos:start="755:5" pos:end="807:5">{<block_content pos:start="757:9" pos:end="805:14">

        <decl_stmt pos:start="757:9" pos:end="757:34"><decl pos:start="757:9" pos:end="757:23"><type pos:start="757:9" pos:end="757:11"><name pos:start="757:9" pos:end="757:11">int</name></type> <name pos:start="757:13" pos:end="757:23"><name pos:start="757:13" pos:end="757:17">coeff</name><index pos:start="757:18" pos:end="757:20">[<expr pos:start="757:19" pos:end="757:19"><literal type="number" pos:start="757:19" pos:end="757:19">2</literal></expr>]</index><index pos:start="757:21" pos:end="757:23">[<expr pos:start="757:22" pos:end="757:22"><literal type="number" pos:start="757:22" pos:end="757:22">2</literal></expr>]</index></name></decl>, <decl pos:start="757:26" pos:end="757:33"><type ref="prev" pos:start="757:9" pos:end="757:11"/><name pos:start="757:26" pos:end="757:33"><name pos:start="757:26" pos:end="757:30">shift</name><index pos:start="757:31" pos:end="757:33">[<expr pos:start="757:32" pos:end="757:32"><literal type="number" pos:start="757:32" pos:end="757:32">2</literal></expr>]</index></name></decl>;</decl_stmt>



        <for pos:start="761:9" pos:end="771:9">for<control pos:start="761:12" pos:end="761:62">(<init pos:start="761:13" pos:end="761:24"><expr pos:start="761:13" pos:end="761:23"><name pos:start="761:13" pos:end="761:19">channel</name> <operator pos:start="761:21" pos:end="761:21">=</operator> <literal type="number" pos:start="761:23" pos:end="761:23">0</literal></expr>;</init> <condition pos:start="761:26" pos:end="761:51"><expr pos:start="761:26" pos:end="761:50"><name pos:start="761:26" pos:end="761:32">channel</name> <operator pos:start="761:34" pos:end="761:34">&lt;</operator> <name pos:start="761:36" pos:end="761:50"><name pos:start="761:36" pos:end="761:40">avctx</name><operator pos:start="761:41" pos:end="761:42">-&gt;</operator><name pos:start="761:43" pos:end="761:50">channels</name></name></expr>;</condition> <incr pos:start="761:53" pos:end="761:61"><expr pos:start="761:53" pos:end="761:61"><name pos:start="761:53" pos:end="761:59">channel</name><operator pos:start="761:60" pos:end="761:61">++</operator></expr></incr>)</control> <block pos:start="761:64" pos:end="771:9">{<block_content pos:start="763:13" pos:end="769:18">

            <for pos:start="763:13" pos:end="765:70">for <control pos:start="763:17" pos:end="763:31">(<init pos:start="763:18" pos:end="763:21"><expr pos:start="763:18" pos:end="763:20"><name pos:start="763:18" pos:end="763:18">i</name><operator pos:start="763:19" pos:end="763:19">=</operator><literal type="number" pos:start="763:20" pos:end="763:20">0</literal></expr>;</init> <condition pos:start="763:23" pos:end="763:26"><expr pos:start="763:23" pos:end="763:25"><name pos:start="763:23" pos:end="763:23">i</name><operator pos:start="763:24" pos:end="763:24">&lt;</operator><literal type="number" pos:start="763:25" pos:end="763:25">2</literal></expr>;</condition> <incr pos:start="763:28" pos:end="763:30"><expr pos:start="763:28" pos:end="763:30"><name pos:start="763:28" pos:end="763:28">i</name><operator pos:start="763:29" pos:end="763:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="765:17" pos:end="765:70"><block_content pos:start="765:17" pos:end="765:70">

                <expr_stmt pos:start="765:17" pos:end="765:70"><expr pos:start="765:17" pos:end="765:69"><name pos:start="765:17" pos:end="765:33"><name pos:start="765:17" pos:end="765:21">coeff</name><index pos:start="765:22" pos:end="765:30">[<expr pos:start="765:23" pos:end="765:29"><name pos:start="765:23" pos:end="765:29">channel</name></expr>]</index><index pos:start="765:31" pos:end="765:33">[<expr pos:start="765:32" pos:end="765:32"><name pos:start="765:32" pos:end="765:32">i</name></expr>]</index></name> <operator pos:start="765:35" pos:end="765:35">=</operator> <name pos:start="765:37" pos:end="765:69"><name pos:start="765:37" pos:end="765:50">ea_adpcm_table</name><index pos:start="765:51" pos:end="765:69">[<expr pos:start="765:52" pos:end="765:68"><operator pos:start="765:52" pos:end="765:52">(</operator><operator pos:start="765:53" pos:end="765:53">*</operator><name pos:start="765:54" pos:end="765:56">src</name> <operator pos:start="765:58" pos:end="765:59">&gt;&gt;</operator> <literal type="number" pos:start="765:61" pos:end="765:61">4</literal><operator pos:start="765:62" pos:end="765:62">)</operator> <operator pos:start="765:64" pos:end="765:64">+</operator> <literal type="number" pos:start="765:66" pos:end="765:66">4</literal><operator pos:start="765:67" pos:end="765:67">*</operator><name pos:start="765:68" pos:end="765:68">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="767:13" pos:end="767:48"><expr pos:start="767:13" pos:end="767:47"><name pos:start="767:13" pos:end="767:26"><name pos:start="767:13" pos:end="767:17">shift</name><index pos:start="767:18" pos:end="767:26">[<expr pos:start="767:19" pos:end="767:25"><name pos:start="767:19" pos:end="767:25">channel</name></expr>]</index></name> <operator pos:start="767:28" pos:end="767:28">=</operator> <literal type="number" pos:start="767:30" pos:end="767:33">20</literal> <operator pos:start="767:33" pos:end="767:33">-</operator> <operator pos:start="767:35" pos:end="767:35">(</operator><operator pos:start="767:36" pos:end="767:36">*</operator><name pos:start="767:37" pos:end="767:39">src</name> <operator pos:start="767:41" pos:end="767:41">&amp;</operator> <literal type="number" pos:start="767:43" pos:end="767:46">0x0F</literal><operator pos:start="767:47" pos:end="767:47">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="769:13" pos:end="769:18"><expr pos:start="769:13" pos:end="769:17"><name pos:start="769:13" pos:end="769:15">src</name><operator pos:start="769:16" pos:end="769:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="773:9" pos:end="799:9">for <control pos:start="773:13" pos:end="773:59">(<init pos:start="773:14" pos:end="773:24"><expr pos:start="773:14" pos:end="773:23"><name pos:start="773:14" pos:end="773:19">count1</name> <operator pos:start="773:21" pos:end="773:21">=</operator> <literal type="number" pos:start="773:23" pos:end="773:23">0</literal></expr>;</init> <condition pos:start="773:26" pos:end="773:49"><expr pos:start="773:26" pos:end="773:48"><name pos:start="773:26" pos:end="773:31">count1</name> <operator pos:start="773:33" pos:end="773:33">&lt;</operator> <name pos:start="773:35" pos:end="773:44">nb_samples</name> <operator pos:start="773:46" pos:end="773:46">/</operator> <literal type="number" pos:start="773:48" pos:end="773:48">2</literal></expr>;</condition> <incr pos:start="773:51" pos:end="773:58"><expr pos:start="773:51" pos:end="773:58"><name pos:start="773:51" pos:end="773:56">count1</name><operator pos:start="773:57" pos:end="773:58">++</operator></expr></incr>)</control> <block pos:start="773:61" pos:end="799:9">{<block_content pos:start="775:13" pos:end="797:33">

            <for pos:start="775:13" pos:end="795:13">for<control pos:start="775:16" pos:end="775:36">(<init pos:start="775:17" pos:end="775:22"><expr pos:start="775:17" pos:end="775:21"><name pos:start="775:17" pos:end="775:17">i</name> <operator pos:start="775:19" pos:end="775:19">=</operator> <literal type="number" pos:start="775:21" pos:end="775:21">4</literal></expr>;</init> <condition pos:start="775:24" pos:end="775:30"><expr pos:start="775:24" pos:end="775:29"><name pos:start="775:24" pos:end="775:24">i</name> <operator pos:start="775:26" pos:end="775:27">&gt;=</operator> <literal type="number" pos:start="775:29" pos:end="775:29">0</literal></expr>;</condition> <incr pos:start="775:32" pos:end="775:35"><expr pos:start="775:32" pos:end="775:35"><name pos:start="775:32" pos:end="775:32">i</name><operator pos:start="775:33" pos:end="775:34">-=</operator><literal type="number" pos:start="775:35" pos:end="775:35">4</literal></expr></incr>)</control> <block pos:start="775:38" pos:end="795:13">{<block_content pos:start="777:17" pos:end="793:17"> <comment type="block" pos:start="775:40" pos:end="775:88">/* Pairwise samples LL RR (st) or LL LL (mono) */</comment>

                <for pos:start="777:17" pos:end="793:17">for<control pos:start="777:20" pos:end="777:70">(<init pos:start="777:21" pos:end="777:32"><expr pos:start="777:21" pos:end="777:31"><name pos:start="777:21" pos:end="777:27">channel</name> <operator pos:start="777:29" pos:end="777:29">=</operator> <literal type="number" pos:start="777:31" pos:end="777:31">0</literal></expr>;</init> <condition pos:start="777:34" pos:end="777:59"><expr pos:start="777:34" pos:end="777:58"><name pos:start="777:34" pos:end="777:40">channel</name> <operator pos:start="777:42" pos:end="777:42">&lt;</operator> <name pos:start="777:44" pos:end="777:58"><name pos:start="777:44" pos:end="777:48">avctx</name><operator pos:start="777:49" pos:end="777:50">-&gt;</operator><name pos:start="777:51" pos:end="777:58">channels</name></name></expr>;</condition> <incr pos:start="777:61" pos:end="777:69"><expr pos:start="777:61" pos:end="777:69"><name pos:start="777:61" pos:end="777:67">channel</name><operator pos:start="777:68" pos:end="777:69">++</operator></expr></incr>)</control> <block pos:start="777:72" pos:end="793:17">{<block_content pos:start="779:21" pos:end="791:60">

                    <decl_stmt pos:start="779:21" pos:end="779:89"><decl pos:start="779:21" pos:end="779:88"><type pos:start="779:21" pos:end="779:27"><name pos:start="779:21" pos:end="779:27">int32_t</name></type> <name pos:start="779:29" pos:end="779:34">sample</name> <init pos:start="779:36" pos:end="779:88">= <expr pos:start="779:38" pos:end="779:88"><call pos:start="779:38" pos:end="779:70"><name pos:start="779:38" pos:end="779:48">sign_extend</name><argument_list pos:start="779:49" pos:end="779:70">(<argument pos:start="779:50" pos:end="779:66"><expr pos:start="779:50" pos:end="779:66"><name pos:start="779:50" pos:end="779:61"><name pos:start="779:50" pos:end="779:52">src</name><index pos:start="779:53" pos:end="779:61">[<expr pos:start="779:54" pos:end="779:60"><name pos:start="779:54" pos:end="779:60">channel</name></expr>]</index></name> <operator pos:start="779:63" pos:end="779:64">&gt;&gt;</operator> <name pos:start="779:66" pos:end="779:66">i</name></expr></argument>, <argument pos:start="779:69" pos:end="779:69"><expr pos:start="779:69" pos:end="779:69"><literal type="number" pos:start="779:69" pos:end="779:69">4</literal></expr></argument>)</argument_list></call> <operator pos:start="779:72" pos:end="779:73">&lt;&lt;</operator> <name pos:start="779:75" pos:end="779:88"><name pos:start="779:75" pos:end="779:79">shift</name><index pos:start="779:80" pos:end="779:88">[<expr pos:start="779:81" pos:end="779:87"><name pos:start="779:81" pos:end="779:87">channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="781:21" pos:end="785:89"><expr pos:start="781:21" pos:end="785:88"><name pos:start="781:21" pos:end="781:26">sample</name> <operator pos:start="781:28" pos:end="781:28">=</operator> <operator pos:start="781:30" pos:end="781:30">(</operator><name pos:start="781:31" pos:end="781:36">sample</name> <operator pos:start="781:38" pos:end="781:38">+</operator>

                             <name pos:start="783:30" pos:end="783:47"><name pos:start="783:30" pos:end="783:30">c</name><operator pos:start="783:31" pos:end="783:32">-&gt;</operator><name pos:start="783:33" pos:end="783:38">status</name><index pos:start="783:39" pos:end="783:47">[<expr pos:start="783:40" pos:end="783:46"><name pos:start="783:40" pos:end="783:46">channel</name></expr>]</index></name><operator pos:start="783:48" pos:end="783:48">.</operator><name pos:start="783:49" pos:end="783:55">sample1</name> <operator pos:start="783:57" pos:end="783:57">*</operator> <name pos:start="783:59" pos:end="783:75"><name pos:start="783:59" pos:end="783:63">coeff</name><index pos:start="783:64" pos:end="783:72">[<expr pos:start="783:65" pos:end="783:71"><name pos:start="783:65" pos:end="783:71">channel</name></expr>]</index><index pos:start="783:73" pos:end="783:75">[<expr pos:start="783:74" pos:end="783:74"><literal type="number" pos:start="783:74" pos:end="783:74">0</literal></expr>]</index></name> <operator pos:start="783:77" pos:end="783:77">+</operator>

                             <name pos:start="785:30" pos:end="785:47"><name pos:start="785:30" pos:end="785:30">c</name><operator pos:start="785:31" pos:end="785:32">-&gt;</operator><name pos:start="785:33" pos:end="785:38">status</name><index pos:start="785:39" pos:end="785:47">[<expr pos:start="785:40" pos:end="785:46"><name pos:start="785:40" pos:end="785:46">channel</name></expr>]</index></name><operator pos:start="785:48" pos:end="785:48">.</operator><name pos:start="785:49" pos:end="785:55">sample2</name> <operator pos:start="785:57" pos:end="785:57">*</operator> <name pos:start="785:59" pos:end="785:75"><name pos:start="785:59" pos:end="785:63">coeff</name><index pos:start="785:64" pos:end="785:72">[<expr pos:start="785:65" pos:end="785:71"><name pos:start="785:65" pos:end="785:71">channel</name></expr>]</index><index pos:start="785:73" pos:end="785:75">[<expr pos:start="785:74" pos:end="785:74"><literal type="number" pos:start="785:74" pos:end="785:74">1</literal></expr>]</index></name> <operator pos:start="785:77" pos:end="785:77">+</operator> <literal type="number" pos:start="785:79" pos:end="785:82">0x80</literal><operator pos:start="785:83" pos:end="785:83">)</operator> <operator pos:start="785:85" pos:end="785:86">&gt;&gt;</operator> <literal type="number" pos:start="785:88" pos:end="785:88">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="787:21" pos:end="787:76"><expr pos:start="787:21" pos:end="787:75"><name pos:start="787:21" pos:end="787:38"><name pos:start="787:21" pos:end="787:21">c</name><operator pos:start="787:22" pos:end="787:23">-&gt;</operator><name pos:start="787:24" pos:end="787:29">status</name><index pos:start="787:30" pos:end="787:38">[<expr pos:start="787:31" pos:end="787:37"><name pos:start="787:31" pos:end="787:37">channel</name></expr>]</index></name><operator pos:start="787:39" pos:end="787:39">.</operator><name pos:start="787:40" pos:end="787:46">sample2</name> <operator pos:start="787:48" pos:end="787:48">=</operator> <name pos:start="787:50" pos:end="787:67"><name pos:start="787:50" pos:end="787:50">c</name><operator pos:start="787:51" pos:end="787:52">-&gt;</operator><name pos:start="787:53" pos:end="787:58">status</name><index pos:start="787:59" pos:end="787:67">[<expr pos:start="787:60" pos:end="787:66"><name pos:start="787:60" pos:end="787:66">channel</name></expr>]</index></name><operator pos:start="787:68" pos:end="787:68">.</operator><name pos:start="787:69" pos:end="787:75">sample1</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="789:21" pos:end="789:71"><expr pos:start="789:21" pos:end="789:70"><name pos:start="789:21" pos:end="789:38"><name pos:start="789:21" pos:end="789:21">c</name><operator pos:start="789:22" pos:end="789:23">-&gt;</operator><name pos:start="789:24" pos:end="789:29">status</name><index pos:start="789:30" pos:end="789:38">[<expr pos:start="789:31" pos:end="789:37"><name pos:start="789:31" pos:end="789:37">channel</name></expr>]</index></name><operator pos:start="789:39" pos:end="789:39">.</operator><name pos:start="789:40" pos:end="789:46">sample1</name> <operator pos:start="789:48" pos:end="789:48">=</operator> <call pos:start="789:50" pos:end="789:70"><name pos:start="789:50" pos:end="789:62">av_clip_int16</name><argument_list pos:start="789:63" pos:end="789:70">(<argument pos:start="789:64" pos:end="789:69"><expr pos:start="789:64" pos:end="789:69"><name pos:start="789:64" pos:end="789:69">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="791:21" pos:end="791:60"><expr pos:start="791:21" pos:end="791:59"><operator pos:start="791:21" pos:end="791:21">*</operator><name pos:start="791:22" pos:end="791:28">samples</name><operator pos:start="791:29" pos:end="791:30">++</operator> <operator pos:start="791:32" pos:end="791:32">=</operator> <name pos:start="791:34" pos:end="791:51"><name pos:start="791:34" pos:end="791:34">c</name><operator pos:start="791:35" pos:end="791:36">-&gt;</operator><name pos:start="791:37" pos:end="791:42">status</name><index pos:start="791:43" pos:end="791:51">[<expr pos:start="791:44" pos:end="791:50"><name pos:start="791:44" pos:end="791:50">channel</name></expr>]</index></name><operator pos:start="791:52" pos:end="791:52">.</operator><name pos:start="791:53" pos:end="791:59">sample1</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

            <expr_stmt pos:start="797:13" pos:end="797:33"><expr pos:start="797:13" pos:end="797:32"><name pos:start="797:13" pos:end="797:15">src</name><operator pos:start="797:16" pos:end="797:17">+=</operator><name pos:start="797:18" pos:end="797:32"><name pos:start="797:18" pos:end="797:22">avctx</name><operator pos:start="797:23" pos:end="797:24">-&gt;</operator><name pos:start="797:25" pos:end="797:32">channels</name></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="801:9" pos:end="801:34">/* consume whole packet */</comment>

        <expr_stmt pos:start="803:9" pos:end="803:29"><expr pos:start="803:9" pos:end="803:28"><name pos:start="803:9" pos:end="803:11">src</name> <operator pos:start="803:13" pos:end="803:13">=</operator> <name pos:start="803:15" pos:end="803:17">buf</name> <operator pos:start="803:19" pos:end="803:19">+</operator> <name pos:start="803:21" pos:end="803:28">buf_size</name></expr>;</expr_stmt>

        <break pos:start="805:9" pos:end="805:14">break;</break>

    </block_content>}</block>

    <case pos:start="809:5" pos:end="809:30">case <expr pos:start="809:10" pos:end="809:29"><name pos:start="809:10" pos:end="809:29">CODEC_ID_ADPCM_EA_R1</name></expr>:</case>

    <case pos:start="811:5" pos:end="811:30">case <expr pos:start="811:10" pos:end="811:29"><name pos:start="811:10" pos:end="811:29">CODEC_ID_ADPCM_EA_R2</name></expr>:</case>

    <case pos:start="813:5" pos:end="813:30">case <expr pos:start="813:10" pos:end="813:29"><name pos:start="813:10" pos:end="813:29">CODEC_ID_ADPCM_EA_R3</name></expr>:</case> <block pos:start="813:32" pos:end="981:5">{<block_content pos:start="823:9" pos:end="979:14">

        <comment type="block" pos:start="815:9" pos:end="821:57">/* channel numbering

           2chan: 0=fl, 1=fr

           4chan: 0=fl, 1=rl, 2=fr, 3=rr

           6chan: 0=fl, 1=c,  2=fr, 3=rl,  4=rr, 5=sub */</comment>

        <decl_stmt pos:start="823:9" pos:end="823:72"><decl pos:start="823:9" pos:end="823:71"><type pos:start="823:9" pos:end="823:17"><specifier pos:start="823:9" pos:end="823:13">const</specifier> <name pos:start="823:15" pos:end="823:17">int</name></type> <name pos:start="823:19" pos:end="823:28">big_endian</name> <init pos:start="823:30" pos:end="823:71">= <expr pos:start="823:32" pos:end="823:71"><name pos:start="823:32" pos:end="823:47"><name pos:start="823:32" pos:end="823:36">avctx</name><operator pos:start="823:37" pos:end="823:38">-&gt;</operator><name pos:start="823:39" pos:end="823:43">codec</name><operator pos:start="823:44" pos:end="823:45">-&gt;</operator><name pos:start="823:46" pos:end="823:47">id</name></name> <operator pos:start="823:49" pos:end="823:50">==</operator> <name pos:start="823:52" pos:end="823:71">CODEC_ID_ADPCM_EA_R3</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="825:9" pos:end="825:61"><decl pos:start="825:9" pos:end="825:31"><type pos:start="825:9" pos:end="825:15"><name pos:start="825:9" pos:end="825:15">int32_t</name></type> <name pos:start="825:17" pos:end="825:31">previous_sample</name></decl>, <decl pos:start="825:34" pos:end="825:47"><type ref="prev" pos:start="825:9" pos:end="825:15"/><name pos:start="825:34" pos:end="825:47">current_sample</name></decl>, <decl pos:start="825:50" pos:end="825:60"><type ref="prev" pos:start="825:9" pos:end="825:15"/><name pos:start="825:50" pos:end="825:60">next_sample</name></decl>;</decl_stmt>

        <decl_stmt pos:start="827:9" pos:end="827:31"><decl pos:start="827:9" pos:end="827:22"><type pos:start="827:9" pos:end="827:15"><name pos:start="827:9" pos:end="827:15">int32_t</name></type> <name pos:start="827:17" pos:end="827:22">coeff1</name></decl>, <decl pos:start="827:25" pos:end="827:30"><type ref="prev" pos:start="827:9" pos:end="827:15"/><name pos:start="827:25" pos:end="827:30">coeff2</name></decl>;</decl_stmt>

        <decl_stmt pos:start="829:9" pos:end="829:22"><decl pos:start="829:9" pos:end="829:21"><type pos:start="829:9" pos:end="829:15"><name pos:start="829:9" pos:end="829:15">uint8_t</name></type> <name pos:start="829:17" pos:end="829:21">shift</name></decl>;</decl_stmt>

        <decl_stmt pos:start="831:9" pos:end="831:29"><decl pos:start="831:9" pos:end="831:28"><type pos:start="831:9" pos:end="831:20"><name pos:start="831:9" pos:end="831:16">unsigned</name> <name pos:start="831:18" pos:end="831:20">int</name></type> <name pos:start="831:22" pos:end="831:28">channel</name></decl>;</decl_stmt>

        <decl_stmt pos:start="833:9" pos:end="833:27"><decl pos:start="833:9" pos:end="833:26"><type pos:start="833:9" pos:end="833:18"><name pos:start="833:9" pos:end="833:16">uint16_t</name> <modifier pos:start="833:18" pos:end="833:18">*</modifier></type><name pos:start="833:19" pos:end="833:26">samplesC</name></decl>;</decl_stmt>

        <decl_stmt pos:start="835:9" pos:end="835:28"><decl pos:start="835:9" pos:end="835:27"><type pos:start="835:9" pos:end="835:23"><specifier pos:start="835:9" pos:end="835:13">const</specifier> <name pos:start="835:15" pos:end="835:21">uint8_t</name> <modifier pos:start="835:23" pos:end="835:23">*</modifier></type><name pos:start="835:24" pos:end="835:27">srcC</name></decl>;</decl_stmt>

        <decl_stmt pos:start="837:9" pos:end="837:48"><decl pos:start="837:9" pos:end="837:47"><type pos:start="837:9" pos:end="837:23"><specifier pos:start="837:9" pos:end="837:13">const</specifier> <name pos:start="837:15" pos:end="837:21">uint8_t</name> <modifier pos:start="837:23" pos:end="837:23">*</modifier></type><name pos:start="837:24" pos:end="837:30">src_end</name> <init pos:start="837:32" pos:end="837:47">= <expr pos:start="837:34" pos:end="837:47"><name pos:start="837:34" pos:end="837:36">buf</name> <operator pos:start="837:38" pos:end="837:38">+</operator> <name pos:start="837:40" pos:end="837:47">buf_size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="839:9" pos:end="839:22"><decl pos:start="839:9" pos:end="839:21"><type pos:start="839:9" pos:end="839:11"><name pos:start="839:9" pos:end="839:11">int</name></type> <name pos:start="839:13" pos:end="839:17">count</name> <init pos:start="839:19" pos:end="839:21">= <expr pos:start="839:21" pos:end="839:21"><literal type="number" pos:start="839:21" pos:end="839:21">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="843:9" pos:end="843:17"><expr pos:start="843:9" pos:end="843:16"><name pos:start="843:9" pos:end="843:11">src</name> <operator pos:start="843:13" pos:end="843:14">+=</operator> <literal type="number" pos:start="843:16" pos:end="843:16">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="843:19" pos:end="843:53">// skip sample count (already read)</comment>



        <for pos:start="847:9" pos:end="971:9">for <control pos:start="847:13" pos:end="847:59">(<init pos:start="847:14" pos:end="847:23"><expr pos:start="847:14" pos:end="847:22"><name pos:start="847:14" pos:end="847:20">channel</name><operator pos:start="847:21" pos:end="847:21">=</operator><literal type="number" pos:start="847:22" pos:end="847:22">0</literal></expr>;</init> <condition pos:start="847:25" pos:end="847:48"><expr pos:start="847:25" pos:end="847:47"><name pos:start="847:25" pos:end="847:31">channel</name><operator pos:start="847:32" pos:end="847:32">&lt;</operator><name pos:start="847:33" pos:end="847:47"><name pos:start="847:33" pos:end="847:37">avctx</name><operator pos:start="847:38" pos:end="847:39">-&gt;</operator><name pos:start="847:40" pos:end="847:47">channels</name></name></expr>;</condition> <incr pos:start="847:50" pos:end="847:58"><expr pos:start="847:50" pos:end="847:58"><name pos:start="847:50" pos:end="847:56">channel</name><operator pos:start="847:57" pos:end="847:58">++</operator></expr></incr>)</control> <block pos:start="847:61" pos:end="971:9">{<block_content pos:start="849:13" pos:end="969:13">

            <decl_stmt pos:start="849:13" pos:end="853:61"><decl pos:start="849:13" pos:end="853:60"><type pos:start="849:13" pos:end="849:19"><name pos:start="849:13" pos:end="849:19">int32_t</name></type> <name pos:start="849:21" pos:end="849:26">offset</name> <init pos:start="849:28" pos:end="853:60">= <expr pos:start="849:30" pos:end="853:60"><operator pos:start="849:30" pos:end="849:30">(</operator><ternary pos:start="849:31" pos:end="851:68"><condition pos:start="849:31" pos:end="849:42"><expr pos:start="849:31" pos:end="849:40"><name pos:start="849:31" pos:end="849:40">big_endian</name></expr> ?</condition><then pos:start="849:44" pos:end="849:68"> <expr pos:start="849:44" pos:end="849:68"><call pos:start="849:44" pos:end="849:68"><name pos:start="849:44" pos:end="849:62">bytestream_get_be32</name><argument_list pos:start="849:63" pos:end="849:68">(<argument pos:start="849:64" pos:end="849:67"><expr pos:start="849:64" pos:end="849:67"><operator pos:start="849:64" pos:end="849:64">&amp;</operator><name pos:start="849:65" pos:end="849:67">src</name></expr></argument>)</argument_list></call></expr>

                                         </then><else pos:start="851:42" pos:end="851:68">: <expr pos:start="851:44" pos:end="851:68"><call pos:start="851:44" pos:end="851:68"><name pos:start="851:44" pos:end="851:62">bytestream_get_le32</name><argument_list pos:start="851:63" pos:end="851:68">(<argument pos:start="851:64" pos:end="851:67"><expr pos:start="851:64" pos:end="851:67"><operator pos:start="851:64" pos:end="851:64">&amp;</operator><name pos:start="851:65" pos:end="851:67">src</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="851:69" pos:end="851:69">)</operator>

                           <operator pos:start="853:28" pos:end="853:28">+</operator> <operator pos:start="853:30" pos:end="853:30">(</operator><name pos:start="853:31" pos:end="853:45"><name pos:start="853:31" pos:end="853:35">avctx</name><operator pos:start="853:36" pos:end="853:37">-&gt;</operator><name pos:start="853:38" pos:end="853:45">channels</name></name><operator pos:start="853:46" pos:end="853:46">-</operator><name pos:start="853:47" pos:end="853:53">channel</name><operator pos:start="853:54" pos:end="853:54">-</operator><literal type="number" pos:start="853:55" pos:end="853:55">1</literal><operator pos:start="853:56" pos:end="853:56">)</operator> <operator pos:start="853:58" pos:end="853:58">*</operator> <literal type="number" pos:start="853:60" pos:end="853:60">4</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="857:13" pos:end="857:69"><if pos:start="857:13" pos:end="857:69">if <condition pos:start="857:16" pos:end="857:62">(<expr pos:start="857:17" pos:end="857:61"><operator pos:start="857:17" pos:end="857:17">(</operator><name pos:start="857:18" pos:end="857:23">offset</name> <operator pos:start="857:25" pos:end="857:25">&lt;</operator> <literal type="number" pos:start="857:27" pos:end="857:27">0</literal><operator pos:start="857:28" pos:end="857:28">)</operator> <operator pos:start="857:30" pos:end="857:31">||</operator> <operator pos:start="857:33" pos:end="857:33">(</operator><name pos:start="857:34" pos:end="857:39">offset</name> <operator pos:start="857:41" pos:end="857:42">&gt;=</operator> <name pos:start="857:44" pos:end="857:50">src_end</name> <operator pos:start="857:52" pos:end="857:52">-</operator> <name pos:start="857:54" pos:end="857:56">src</name> <operator pos:start="857:58" pos:end="857:58">-</operator> <literal type="number" pos:start="857:60" pos:end="857:60">4</literal><operator pos:start="857:61" pos:end="857:61">)</operator></expr>)</condition><block type="pseudo" pos:start="857:64" pos:end="857:69"><block_content pos:start="857:64" pos:end="857:69"> <break pos:start="857:64" pos:end="857:69">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="859:13" pos:end="859:33"><expr pos:start="859:13" pos:end="859:32"><name pos:start="859:13" pos:end="859:16">srcC</name>  <operator pos:start="859:19" pos:end="859:19">=</operator> <name pos:start="859:21" pos:end="859:23">src</name> <operator pos:start="859:25" pos:end="859:25">+</operator> <name pos:start="859:27" pos:end="859:32">offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="861:13" pos:end="861:41"><expr pos:start="861:13" pos:end="861:40"><name pos:start="861:13" pos:end="861:20">samplesC</name> <operator pos:start="861:22" pos:end="861:22">=</operator> <name pos:start="861:24" pos:end="861:30">samples</name> <operator pos:start="861:32" pos:end="861:32">+</operator> <name pos:start="861:34" pos:end="861:40">channel</name></expr>;</expr_stmt>



            <if_stmt pos:start="865:13" pos:end="877:13"><if pos:start="865:13" pos:end="871:13">if <condition pos:start="865:16" pos:end="865:57">(<expr pos:start="865:17" pos:end="865:56"><name pos:start="865:17" pos:end="865:32"><name pos:start="865:17" pos:end="865:21">avctx</name><operator pos:start="865:22" pos:end="865:23">-&gt;</operator><name pos:start="865:24" pos:end="865:28">codec</name><operator pos:start="865:29" pos:end="865:30">-&gt;</operator><name pos:start="865:31" pos:end="865:32">id</name></name> <operator pos:start="865:34" pos:end="865:35">==</operator> <name pos:start="865:37" pos:end="865:56">CODEC_ID_ADPCM_EA_R1</name></expr>)</condition> <block pos:start="865:59" pos:end="871:13">{<block_content pos:start="867:17" pos:end="869:70">

                <expr_stmt pos:start="867:17" pos:end="867:70"><expr pos:start="867:17" pos:end="867:69"><name pos:start="867:17" pos:end="867:30">current_sample</name>  <operator pos:start="867:33" pos:end="867:33">=</operator> <operator pos:start="867:35" pos:end="867:35">(</operator><name pos:start="867:36" pos:end="867:42">int16_t</name><operator pos:start="867:43" pos:end="867:43">)</operator><call pos:start="867:44" pos:end="867:69"><name pos:start="867:44" pos:end="867:62">bytestream_get_le16</name><argument_list pos:start="867:63" pos:end="867:69">(<argument pos:start="867:64" pos:end="867:68"><expr pos:start="867:64" pos:end="867:68"><operator pos:start="867:64" pos:end="867:64">&amp;</operator><name pos:start="867:65" pos:end="867:68">srcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="869:17" pos:end="869:70"><expr pos:start="869:17" pos:end="869:69"><name pos:start="869:17" pos:end="869:31">previous_sample</name> <operator pos:start="869:33" pos:end="869:33">=</operator> <operator pos:start="869:35" pos:end="869:35">(</operator><name pos:start="869:36" pos:end="869:42">int16_t</name><operator pos:start="869:43" pos:end="869:43">)</operator><call pos:start="869:44" pos:end="869:69"><name pos:start="869:44" pos:end="869:62">bytestream_get_le16</name><argument_list pos:start="869:63" pos:end="869:69">(<argument pos:start="869:64" pos:end="869:68"><expr pos:start="869:64" pos:end="869:68"><operator pos:start="869:64" pos:end="869:64">&amp;</operator><name pos:start="869:65" pos:end="869:68">srcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="871:15" pos:end="877:13">else <block pos:start="871:20" pos:end="877:13">{<block_content pos:start="873:17" pos:end="875:65">

                <expr_stmt pos:start="873:17" pos:end="873:63"><expr pos:start="873:17" pos:end="873:62"><name pos:start="873:17" pos:end="873:30">current_sample</name>  <operator pos:start="873:33" pos:end="873:33">=</operator> <name pos:start="873:35" pos:end="873:52"><name pos:start="873:35" pos:end="873:35">c</name><operator pos:start="873:36" pos:end="873:37">-&gt;</operator><name pos:start="873:38" pos:end="873:43">status</name><index pos:start="873:44" pos:end="873:52">[<expr pos:start="873:45" pos:end="873:51"><name pos:start="873:45" pos:end="873:51">channel</name></expr>]</index></name><operator pos:start="873:53" pos:end="873:53">.</operator><name pos:start="873:54" pos:end="873:62">predictor</name></expr>;</expr_stmt>

                <expr_stmt pos:start="875:17" pos:end="875:65"><expr pos:start="875:17" pos:end="875:64"><name pos:start="875:17" pos:end="875:31">previous_sample</name> <operator pos:start="875:33" pos:end="875:33">=</operator> <name pos:start="875:35" pos:end="875:52"><name pos:start="875:35" pos:end="875:35">c</name><operator pos:start="875:36" pos:end="875:37">-&gt;</operator><name pos:start="875:38" pos:end="875:43">status</name><index pos:start="875:44" pos:end="875:52">[<expr pos:start="875:45" pos:end="875:51"><name pos:start="875:45" pos:end="875:51">channel</name></expr>]</index></name><operator pos:start="875:53" pos:end="875:53">.</operator><name pos:start="875:54" pos:end="875:64">prev_sample</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <for pos:start="881:13" pos:end="947:13">for <control pos:start="881:17" pos:end="881:64">(<init pos:start="881:18" pos:end="881:28"><expr pos:start="881:18" pos:end="881:27"><name pos:start="881:18" pos:end="881:23">count1</name> <operator pos:start="881:25" pos:end="881:25">=</operator> <literal type="number" pos:start="881:27" pos:end="881:27">0</literal></expr>;</init> <condition pos:start="881:30" pos:end="881:54"><expr pos:start="881:30" pos:end="881:53"><name pos:start="881:30" pos:end="881:35">count1</name> <operator pos:start="881:37" pos:end="881:37">&lt;</operator> <name pos:start="881:39" pos:end="881:48">nb_samples</name> <operator pos:start="881:50" pos:end="881:50">/</operator> <literal type="number" pos:start="881:52" pos:end="881:53">28</literal></expr>;</condition> <incr pos:start="881:56" pos:end="881:63"><expr pos:start="881:56" pos:end="881:63"><name pos:start="881:56" pos:end="881:61">count1</name><operator pos:start="881:62" pos:end="881:63">++</operator></expr></incr>)</control> <block pos:start="881:66" pos:end="947:13">{<block_content pos:start="883:17" pos:end="945:17">

                <if_stmt pos:start="883:17" pos:end="945:17"><if pos:start="883:17" pos:end="903:17">if <condition pos:start="883:20" pos:end="883:34">(<expr pos:start="883:21" pos:end="883:33"><operator pos:start="883:21" pos:end="883:21">*</operator><name pos:start="883:22" pos:end="883:25">srcC</name> <operator pos:start="883:27" pos:end="883:28">==</operator> <literal type="number" pos:start="883:30" pos:end="883:33">0xEE</literal></expr>)</condition> <block pos:start="883:36" pos:end="903:17">{<block_content pos:start="885:21" pos:end="901:21">  <comment type="block" pos:start="883:39" pos:end="883:66">/* only seen in R2 and R3 */</comment>

                    <expr_stmt pos:start="885:21" pos:end="885:27"><expr pos:start="885:21" pos:end="885:26"><name pos:start="885:21" pos:end="885:24">srcC</name><operator pos:start="885:25" pos:end="885:26">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="887:21" pos:end="887:53"><if pos:start="887:21" pos:end="887:53">if <condition pos:start="887:24" pos:end="887:46">(<expr pos:start="887:25" pos:end="887:45"><name pos:start="887:25" pos:end="887:28">srcC</name> <operator pos:start="887:30" pos:end="887:30">&gt;</operator> <name pos:start="887:32" pos:end="887:38">src_end</name> <operator pos:start="887:40" pos:end="887:40">-</operator> <literal type="number" pos:start="887:42" pos:end="887:43">30</literal><operator pos:start="887:44" pos:end="887:44">*</operator><literal type="number" pos:start="887:45" pos:end="887:45">2</literal></expr>)</condition><block type="pseudo" pos:start="887:48" pos:end="887:53"><block_content pos:start="887:48" pos:end="887:53"> <break pos:start="887:48" pos:end="887:53">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="889:21" pos:end="889:74"><expr pos:start="889:21" pos:end="889:73"><name pos:start="889:21" pos:end="889:34">current_sample</name>  <operator pos:start="889:37" pos:end="889:37">=</operator> <operator pos:start="889:39" pos:end="889:39">(</operator><name pos:start="889:40" pos:end="889:46">int16_t</name><operator pos:start="889:47" pos:end="889:47">)</operator><call pos:start="889:48" pos:end="889:73"><name pos:start="889:48" pos:end="889:66">bytestream_get_be16</name><argument_list pos:start="889:67" pos:end="889:73">(<argument pos:start="889:68" pos:end="889:72"><expr pos:start="889:68" pos:end="889:72"><operator pos:start="889:68" pos:end="889:68">&amp;</operator><name pos:start="889:69" pos:end="889:72">srcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="891:21" pos:end="891:74"><expr pos:start="891:21" pos:end="891:73"><name pos:start="891:21" pos:end="891:35">previous_sample</name> <operator pos:start="891:37" pos:end="891:37">=</operator> <operator pos:start="891:39" pos:end="891:39">(</operator><name pos:start="891:40" pos:end="891:46">int16_t</name><operator pos:start="891:47" pos:end="891:47">)</operator><call pos:start="891:48" pos:end="891:73"><name pos:start="891:48" pos:end="891:66">bytestream_get_be16</name><argument_list pos:start="891:67" pos:end="891:73">(<argument pos:start="891:68" pos:end="891:72"><expr pos:start="891:68" pos:end="891:72"><operator pos:start="891:68" pos:end="891:68">&amp;</operator><name pos:start="891:69" pos:end="891:72">srcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <for pos:start="895:21" pos:end="901:21">for <control pos:start="895:25" pos:end="895:55">(<init pos:start="895:26" pos:end="895:34"><expr pos:start="895:26" pos:end="895:33"><name pos:start="895:26" pos:end="895:31">count2</name><operator pos:start="895:32" pos:end="895:32">=</operator><literal type="number" pos:start="895:33" pos:end="895:33">0</literal></expr>;</init> <condition pos:start="895:36" pos:end="895:45"><expr pos:start="895:36" pos:end="895:44"><name pos:start="895:36" pos:end="895:41">count2</name><operator pos:start="895:42" pos:end="895:42">&lt;</operator><literal type="number" pos:start="895:43" pos:end="895:44">28</literal></expr>;</condition> <incr pos:start="895:47" pos:end="895:54"><expr pos:start="895:47" pos:end="895:54"><name pos:start="895:47" pos:end="895:52">count2</name><operator pos:start="895:53" pos:end="895:54">++</operator></expr></incr>)</control> <block pos:start="895:57" pos:end="901:21">{<block_content pos:start="897:25" pos:end="899:52">

                        <expr_stmt pos:start="897:25" pos:end="897:72"><expr pos:start="897:25" pos:end="897:71"><operator pos:start="897:25" pos:end="897:25">*</operator><name pos:start="897:26" pos:end="897:33">samplesC</name> <operator pos:start="897:35" pos:end="897:35">=</operator> <operator pos:start="897:37" pos:end="897:37">(</operator><name pos:start="897:38" pos:end="897:44">int16_t</name><operator pos:start="897:45" pos:end="897:45">)</operator><call pos:start="897:46" pos:end="897:71"><name pos:start="897:46" pos:end="897:64">bytestream_get_be16</name><argument_list pos:start="897:65" pos:end="897:71">(<argument pos:start="897:66" pos:end="897:70"><expr pos:start="897:66" pos:end="897:70"><operator pos:start="897:66" pos:end="897:66">&amp;</operator><name pos:start="897:67" pos:end="897:70">srcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="899:25" pos:end="899:52"><expr pos:start="899:25" pos:end="899:51"><name pos:start="899:25" pos:end="899:32">samplesC</name> <operator pos:start="899:34" pos:end="899:35">+=</operator> <name pos:start="899:37" pos:end="899:51"><name pos:start="899:37" pos:end="899:41">avctx</name><operator pos:start="899:42" pos:end="899:43">-&gt;</operator><name pos:start="899:44" pos:end="899:51">channels</name></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="903:19" pos:end="945:17">else <block pos:start="903:24" pos:end="945:17">{<block_content pos:start="905:21" pos:end="943:21">

                    <expr_stmt pos:start="905:21" pos:end="905:60"><expr pos:start="905:21" pos:end="905:59"><name pos:start="905:21" pos:end="905:26">coeff1</name> <operator pos:start="905:28" pos:end="905:28">=</operator> <name pos:start="905:30" pos:end="905:59"><name pos:start="905:30" pos:end="905:43">ea_adpcm_table</name><index pos:start="905:44" pos:end="905:59">[ <expr pos:start="905:46" pos:end="905:53"><operator pos:start="905:46" pos:end="905:46">*</operator><name pos:start="905:47" pos:end="905:50">srcC</name><operator pos:start="905:51" pos:end="905:52">&gt;&gt;</operator><literal type="number" pos:start="905:53" pos:end="905:53">4</literal></expr>     ]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="907:21" pos:end="907:60"><expr pos:start="907:21" pos:end="907:59"><name pos:start="907:21" pos:end="907:26">coeff2</name> <operator pos:start="907:28" pos:end="907:28">=</operator> <name pos:start="907:30" pos:end="907:59"><name pos:start="907:30" pos:end="907:43">ea_adpcm_table</name><index pos:start="907:44" pos:end="907:59">[<expr pos:start="907:45" pos:end="907:58"><operator pos:start="907:45" pos:end="907:45">(</operator><operator pos:start="907:46" pos:end="907:46">*</operator><name pos:start="907:47" pos:end="907:50">srcC</name><operator pos:start="907:51" pos:end="907:52">&gt;&gt;</operator><literal type="number" pos:start="907:53" pos:end="907:53">4</literal><operator pos:start="907:54" pos:end="907:54">)</operator> <operator pos:start="907:56" pos:end="907:56">+</operator> <literal type="number" pos:start="907:58" pos:end="907:58">4</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="909:21" pos:end="909:50"><expr pos:start="909:21" pos:end="909:49"><name pos:start="909:21" pos:end="909:25">shift</name> <operator pos:start="909:27" pos:end="909:27">=</operator> <literal type="number" pos:start="909:29" pos:end="909:32">20</literal> <operator pos:start="909:32" pos:end="909:32">-</operator> <operator pos:start="909:34" pos:end="909:34">(</operator><operator pos:start="909:35" pos:end="909:35">*</operator><name pos:start="909:36" pos:end="909:39">srcC</name><operator pos:start="909:40" pos:end="909:41">++</operator> <operator pos:start="909:43" pos:end="909:43">&amp;</operator> <literal type="number" pos:start="909:45" pos:end="909:48">0x0F</literal><operator pos:start="909:49" pos:end="909:49">)</operator></expr>;</expr_stmt>



                    <if_stmt pos:start="913:21" pos:end="913:51"><if pos:start="913:21" pos:end="913:51">if <condition pos:start="913:24" pos:end="913:44">(<expr pos:start="913:25" pos:end="913:43"><name pos:start="913:25" pos:end="913:28">srcC</name> <operator pos:start="913:30" pos:end="913:30">&gt;</operator> <name pos:start="913:32" pos:end="913:38">src_end</name> <operator pos:start="913:40" pos:end="913:40">-</operator> <literal type="number" pos:start="913:42" pos:end="913:43">14</literal></expr>)</condition><block type="pseudo" pos:start="913:46" pos:end="913:51"><block_content pos:start="913:46" pos:end="913:51"> <break pos:start="913:46" pos:end="913:51">break;</break></block_content></block></if></if_stmt>

                    <for pos:start="915:21" pos:end="943:21">for <control pos:start="915:25" pos:end="915:55">(<init pos:start="915:26" pos:end="915:34"><expr pos:start="915:26" pos:end="915:33"><name pos:start="915:26" pos:end="915:31">count2</name><operator pos:start="915:32" pos:end="915:32">=</operator><literal type="number" pos:start="915:33" pos:end="915:33">0</literal></expr>;</init> <condition pos:start="915:36" pos:end="915:45"><expr pos:start="915:36" pos:end="915:44"><name pos:start="915:36" pos:end="915:41">count2</name><operator pos:start="915:42" pos:end="915:42">&lt;</operator><literal type="number" pos:start="915:43" pos:end="915:44">28</literal></expr>;</condition> <incr pos:start="915:47" pos:end="915:54"><expr pos:start="915:47" pos:end="915:54"><name pos:start="915:47" pos:end="915:52">count2</name><operator pos:start="915:53" pos:end="915:54">++</operator></expr></incr>)</control> <block pos:start="915:57" pos:end="943:21">{<block_content pos:start="917:25" pos:end="941:52">

                        <if_stmt pos:start="917:25" pos:end="923:78"><if pos:start="917:25" pos:end="919:78">if <condition pos:start="917:28" pos:end="917:39">(<expr pos:start="917:29" pos:end="917:38"><name pos:start="917:29" pos:end="917:34">count2</name> <operator pos:start="917:36" pos:end="917:36">&amp;</operator> <literal type="number" pos:start="917:38" pos:end="917:38">1</literal></expr>)</condition><block type="pseudo" pos:start="919:29" pos:end="919:78"><block_content pos:start="919:29" pos:end="919:78">

                            <expr_stmt pos:start="919:29" pos:end="919:78"><expr pos:start="919:29" pos:end="919:77"><name pos:start="919:29" pos:end="919:39">next_sample</name> <operator pos:start="919:41" pos:end="919:41">=</operator> <call pos:start="919:43" pos:end="919:68"><name pos:start="919:43" pos:end="919:53">sign_extend</name><argument_list pos:start="919:54" pos:end="919:68">(<argument pos:start="919:55" pos:end="919:61"><expr pos:start="919:55" pos:end="919:61"><operator pos:start="919:55" pos:end="919:55">*</operator><name pos:start="919:56" pos:end="919:59">srcC</name><operator pos:start="919:60" pos:end="919:61">++</operator></expr></argument>,    <argument pos:start="919:67" pos:end="919:67"><expr pos:start="919:67" pos:end="919:67"><literal type="number" pos:start="919:67" pos:end="919:67">4</literal></expr></argument>)</argument_list></call> <operator pos:start="919:70" pos:end="919:71">&lt;&lt;</operator> <name pos:start="919:73" pos:end="919:77">shift</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="921:25" pos:end="923:78">else<block type="pseudo" pos:start="923:29" pos:end="923:78"><block_content pos:start="923:29" pos:end="923:78">

                            <expr_stmt pos:start="923:29" pos:end="923:78"><expr pos:start="923:29" pos:end="923:77"><name pos:start="923:29" pos:end="923:39">next_sample</name> <operator pos:start="923:41" pos:end="923:41">=</operator> <call pos:start="923:43" pos:end="923:68"><name pos:start="923:43" pos:end="923:53">sign_extend</name><argument_list pos:start="923:54" pos:end="923:68">(<argument pos:start="923:55" pos:end="923:64"><expr pos:start="923:55" pos:end="923:64"><operator pos:start="923:55" pos:end="923:55">*</operator><name pos:start="923:56" pos:end="923:59">srcC</name> <operator pos:start="923:61" pos:end="923:62">&gt;&gt;</operator> <literal type="number" pos:start="923:64" pos:end="923:64">4</literal></expr></argument>, <argument pos:start="923:67" pos:end="923:67"><expr pos:start="923:67" pos:end="923:67"><literal type="number" pos:start="923:67" pos:end="923:67">4</literal></expr></argument>)</argument_list></call> <operator pos:start="923:70" pos:end="923:71">&lt;&lt;</operator> <name pos:start="923:73" pos:end="923:77">shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                        <expr_stmt pos:start="927:25" pos:end="929:66"><expr pos:start="927:25" pos:end="929:65"><name pos:start="927:25" pos:end="927:35">next_sample</name> <operator pos:start="927:37" pos:end="927:38">+=</operator> <operator pos:start="927:40" pos:end="927:40">(</operator><name pos:start="927:41" pos:end="927:54">current_sample</name>  <operator pos:start="927:57" pos:end="927:57">*</operator> <name pos:start="927:59" pos:end="927:64">coeff1</name><operator pos:start="927:65" pos:end="927:65">)</operator> <operator pos:start="927:67" pos:end="927:67">+</operator>

                                       <operator pos:start="929:40" pos:end="929:40">(</operator><name pos:start="929:41" pos:end="929:55">previous_sample</name> <operator pos:start="929:57" pos:end="929:57">*</operator> <name pos:start="929:59" pos:end="929:64">coeff2</name><operator pos:start="929:65" pos:end="929:65">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="931:25" pos:end="931:70"><expr pos:start="931:25" pos:end="931:69"><name pos:start="931:25" pos:end="931:35">next_sample</name> <operator pos:start="931:37" pos:end="931:37">=</operator> <call pos:start="931:39" pos:end="931:69"><name pos:start="931:39" pos:end="931:51">av_clip_int16</name><argument_list pos:start="931:52" pos:end="931:69">(<argument pos:start="931:53" pos:end="931:68"><expr pos:start="931:53" pos:end="931:68"><name pos:start="931:53" pos:end="931:63">next_sample</name> <operator pos:start="931:65" pos:end="931:66">&gt;&gt;</operator> <literal type="number" pos:start="931:68" pos:end="931:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="935:25" pos:end="935:57"><expr pos:start="935:25" pos:end="935:56"><name pos:start="935:25" pos:end="935:39">previous_sample</name> <operator pos:start="935:41" pos:end="935:41">=</operator> <name pos:start="935:43" pos:end="935:56">current_sample</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="937:25" pos:end="937:54"><expr pos:start="937:25" pos:end="937:53"><name pos:start="937:25" pos:end="937:38">current_sample</name>  <operator pos:start="937:41" pos:end="937:41">=</operator> <name pos:start="937:43" pos:end="937:53">next_sample</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="939:25" pos:end="939:51"><expr pos:start="939:25" pos:end="939:50"><operator pos:start="939:25" pos:end="939:25">*</operator><name pos:start="939:26" pos:end="939:33">samplesC</name> <operator pos:start="939:35" pos:end="939:35">=</operator> <name pos:start="939:37" pos:end="939:50">current_sample</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="941:25" pos:end="941:52"><expr pos:start="941:25" pos:end="941:51"><name pos:start="941:25" pos:end="941:32">samplesC</name> <operator pos:start="941:34" pos:end="941:35">+=</operator> <name pos:start="941:37" pos:end="941:51"><name pos:start="941:37" pos:end="941:41">avctx</name><operator pos:start="941:42" pos:end="941:43">-&gt;</operator><name pos:start="941:44" pos:end="941:51">channels</name></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="949:13" pos:end="959:13"><if pos:start="949:13" pos:end="953:13">if <condition pos:start="949:16" pos:end="949:23">(<expr pos:start="949:17" pos:end="949:22"><operator pos:start="949:17" pos:end="949:17">!</operator><name pos:start="949:18" pos:end="949:22">count</name></expr>)</condition> <block pos:start="949:25" pos:end="953:13">{<block_content pos:start="951:17" pos:end="951:31">

                <expr_stmt pos:start="951:17" pos:end="951:31"><expr pos:start="951:17" pos:end="951:30"><name pos:start="951:17" pos:end="951:21">count</name> <operator pos:start="951:23" pos:end="951:23">=</operator> <name pos:start="951:25" pos:end="951:30">count1</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="953:15" pos:end="959:13">else if <condition pos:start="953:23" pos:end="953:39">(<expr pos:start="953:24" pos:end="953:38"><name pos:start="953:24" pos:end="953:28">count</name> <operator pos:start="953:30" pos:end="953:31">!=</operator> <name pos:start="953:33" pos:end="953:38">count1</name></expr>)</condition> <block pos:start="953:41" pos:end="959:13">{<block_content pos:start="955:17" pos:end="957:45">

                <expr_stmt pos:start="955:17" pos:end="955:85"><expr pos:start="955:17" pos:end="955:84"><call pos:start="955:17" pos:end="955:84"><name pos:start="955:17" pos:end="955:22">av_log</name><argument_list pos:start="955:23" pos:end="955:84">(<argument pos:start="955:24" pos:end="955:28"><expr pos:start="955:24" pos:end="955:28"><name pos:start="955:24" pos:end="955:28">avctx</name></expr></argument>, <argument pos:start="955:31" pos:end="955:44"><expr pos:start="955:31" pos:end="955:44"><name pos:start="955:31" pos:end="955:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="955:47" pos:end="955:83"><expr pos:start="955:47" pos:end="955:83"><literal type="string" pos:start="955:47" pos:end="955:83">"per-channel sample count mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="957:17" pos:end="957:45"><expr pos:start="957:17" pos:end="957:44"><name pos:start="957:17" pos:end="957:21">count</name> <operator pos:start="957:23" pos:end="957:23">=</operator> <call pos:start="957:25" pos:end="957:44"><name pos:start="957:25" pos:end="957:29">FFMAX</name><argument_list pos:start="957:30" pos:end="957:44">(<argument pos:start="957:31" pos:end="957:35"><expr pos:start="957:31" pos:end="957:35"><name pos:start="957:31" pos:end="957:35">count</name></expr></argument>, <argument pos:start="957:38" pos:end="957:43"><expr pos:start="957:38" pos:end="957:43"><name pos:start="957:38" pos:end="957:43">count1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="963:13" pos:end="969:13"><if pos:start="963:13" pos:end="969:13">if <condition pos:start="963:16" pos:end="963:57">(<expr pos:start="963:17" pos:end="963:56"><name pos:start="963:17" pos:end="963:32"><name pos:start="963:17" pos:end="963:21">avctx</name><operator pos:start="963:22" pos:end="963:23">-&gt;</operator><name pos:start="963:24" pos:end="963:28">codec</name><operator pos:start="963:29" pos:end="963:30">-&gt;</operator><name pos:start="963:31" pos:end="963:32">id</name></name> <operator pos:start="963:34" pos:end="963:35">!=</operator> <name pos:start="963:37" pos:end="963:56">CODEC_ID_ADPCM_EA_R1</name></expr>)</condition> <block pos:start="963:59" pos:end="969:13">{<block_content pos:start="965:17" pos:end="967:65">

                <expr_stmt pos:start="965:17" pos:end="965:64"><expr pos:start="965:17" pos:end="965:63"><name pos:start="965:17" pos:end="965:34"><name pos:start="965:17" pos:end="965:17">c</name><operator pos:start="965:18" pos:end="965:19">-&gt;</operator><name pos:start="965:20" pos:end="965:25">status</name><index pos:start="965:26" pos:end="965:34">[<expr pos:start="965:27" pos:end="965:33"><name pos:start="965:27" pos:end="965:33">channel</name></expr>]</index></name><operator pos:start="965:35" pos:end="965:35">.</operator><name pos:start="965:36" pos:end="965:44">predictor</name>   <operator pos:start="965:48" pos:end="965:48">=</operator> <name pos:start="965:50" pos:end="965:63">current_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="967:17" pos:end="967:65"><expr pos:start="967:17" pos:end="967:64"><name pos:start="967:17" pos:end="967:34"><name pos:start="967:17" pos:end="967:17">c</name><operator pos:start="967:18" pos:end="967:19">-&gt;</operator><name pos:start="967:20" pos:end="967:25">status</name><index pos:start="967:26" pos:end="967:34">[<expr pos:start="967:27" pos:end="967:33"><name pos:start="967:27" pos:end="967:33">channel</name></expr>]</index></name><operator pos:start="967:35" pos:end="967:35">.</operator><name pos:start="967:36" pos:end="967:46">prev_sample</name> <operator pos:start="967:48" pos:end="967:48">=</operator> <name pos:start="967:50" pos:end="967:64">previous_sample</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="975:9" pos:end="975:41"><expr pos:start="975:9" pos:end="975:40"><name pos:start="975:9" pos:end="975:27"><name pos:start="975:9" pos:end="975:9">c</name><operator pos:start="975:10" pos:end="975:11">-&gt;</operator><name pos:start="975:12" pos:end="975:16">frame</name><operator pos:start="975:17" pos:end="975:17">.</operator><name pos:start="975:18" pos:end="975:27">nb_samples</name></name> <operator pos:start="975:29" pos:end="975:29">=</operator> <name pos:start="975:31" pos:end="975:35">count</name> <operator pos:start="975:37" pos:end="975:37">*</operator> <literal type="number" pos:start="975:39" pos:end="975:40">28</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="977:9" pos:end="977:22"><expr pos:start="977:9" pos:end="977:21"><name pos:start="977:9" pos:end="977:11">src</name> <operator pos:start="977:13" pos:end="977:13">=</operator> <name pos:start="977:15" pos:end="977:21">src_end</name></expr>;</expr_stmt>

        <break pos:start="979:9" pos:end="979:14">break;</break>

    </block_content>}</block>

    <case pos:start="983:5" pos:end="983:31">case <expr pos:start="983:10" pos:end="983:30"><name pos:start="983:10" pos:end="983:30">CODEC_ID_ADPCM_EA_XAS</name></expr>:</case>

        <for pos:start="985:9" pos:end="1029:9">for <control pos:start="985:13" pos:end="985:59">(<init pos:start="985:14" pos:end="985:23"><expr pos:start="985:14" pos:end="985:22"><name pos:start="985:14" pos:end="985:20">channel</name><operator pos:start="985:21" pos:end="985:21">=</operator><literal type="number" pos:start="985:22" pos:end="985:22">0</literal></expr>;</init> <condition pos:start="985:25" pos:end="985:48"><expr pos:start="985:25" pos:end="985:47"><name pos:start="985:25" pos:end="985:31">channel</name><operator pos:start="985:32" pos:end="985:32">&lt;</operator><name pos:start="985:33" pos:end="985:47"><name pos:start="985:33" pos:end="985:37">avctx</name><operator pos:start="985:38" pos:end="985:39">-&gt;</operator><name pos:start="985:40" pos:end="985:47">channels</name></name></expr>;</condition> <incr pos:start="985:50" pos:end="985:58"><expr pos:start="985:50" pos:end="985:58"><name pos:start="985:50" pos:end="985:56">channel</name><operator pos:start="985:57" pos:end="985:58">++</operator></expr></incr>)</control> <block pos:start="985:61" pos:end="1029:9">{<block_content pos:start="987:13" pos:end="1027:13">

            <decl_stmt pos:start="987:13" pos:end="987:38"><decl pos:start="987:13" pos:end="987:27"><type pos:start="987:13" pos:end="987:15"><name pos:start="987:13" pos:end="987:15">int</name></type> <name pos:start="987:17" pos:end="987:27"><name pos:start="987:17" pos:end="987:21">coeff</name><index pos:start="987:22" pos:end="987:24">[<expr pos:start="987:23" pos:end="987:23"><literal type="number" pos:start="987:23" pos:end="987:23">2</literal></expr>]</index><index pos:start="987:25" pos:end="987:27">[<expr pos:start="987:26" pos:end="987:26"><literal type="number" pos:start="987:26" pos:end="987:26">4</literal></expr>]</index></name></decl>, <decl pos:start="987:30" pos:end="987:37"><type ref="prev" pos:start="987:13" pos:end="987:15"/><name pos:start="987:30" pos:end="987:37"><name pos:start="987:30" pos:end="987:34">shift</name><index pos:start="987:35" pos:end="987:37">[<expr pos:start="987:36" pos:end="987:36"><literal type="number" pos:start="987:36" pos:end="987:36">4</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="989:13" pos:end="989:46"><decl pos:start="989:13" pos:end="989:21"><type pos:start="989:13" pos:end="989:19"><name pos:start="989:13" pos:end="989:17">short</name> <modifier pos:start="989:19" pos:end="989:19">*</modifier></type><name pos:start="989:20" pos:end="989:21">s2</name></decl>, <decl pos:start="989:24" pos:end="989:45"><type ref="prev" pos:start="989:13" pos:end="989:19"><modifier pos:start="989:24" pos:end="989:24">*</modifier></type><name pos:start="989:25" pos:end="989:25">s</name> <init pos:start="989:27" pos:end="989:45">= <expr pos:start="989:29" pos:end="989:45"><operator pos:start="989:29" pos:end="989:29">&amp;</operator><name pos:start="989:30" pos:end="989:45"><name pos:start="989:30" pos:end="989:36">samples</name><index pos:start="989:37" pos:end="989:45">[<expr pos:start="989:38" pos:end="989:44"><name pos:start="989:38" pos:end="989:44">channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="991:13" pos:end="1003:13">for <control pos:start="991:17" pos:end="991:54">(<init pos:start="991:18" pos:end="991:21"><expr pos:start="991:18" pos:end="991:20"><name pos:start="991:18" pos:end="991:18">n</name><operator pos:start="991:19" pos:end="991:19">=</operator><literal type="number" pos:start="991:20" pos:end="991:20">0</literal></expr>;</init> <condition pos:start="991:23" pos:end="991:26"><expr pos:start="991:23" pos:end="991:25"><name pos:start="991:23" pos:end="991:23">n</name><operator pos:start="991:24" pos:end="991:24">&lt;</operator><literal type="number" pos:start="991:25" pos:end="991:25">4</literal></expr>;</condition> <incr pos:start="991:28" pos:end="991:53"><expr pos:start="991:28" pos:end="991:30"><name pos:start="991:28" pos:end="991:28">n</name><operator pos:start="991:29" pos:end="991:30">++</operator></expr><operator pos:start="991:31" pos:end="991:31">,</operator> <expr pos:start="991:33" pos:end="991:53"><name pos:start="991:33" pos:end="991:33">s</name><operator pos:start="991:34" pos:end="991:35">+=</operator><literal type="number" pos:start="991:36" pos:end="991:37">32</literal><operator pos:start="991:38" pos:end="991:38">*</operator><name pos:start="991:39" pos:end="991:53"><name pos:start="991:39" pos:end="991:43">avctx</name><operator pos:start="991:44" pos:end="991:45">-&gt;</operator><name pos:start="991:46" pos:end="991:53">channels</name></name></expr></incr>)</control> <block pos:start="991:56" pos:end="1003:13">{<block_content pos:start="993:17" pos:end="1001:56">

                <for pos:start="993:17" pos:end="995:68">for <control pos:start="993:21" pos:end="993:35">(<init pos:start="993:22" pos:end="993:25"><expr pos:start="993:22" pos:end="993:24"><name pos:start="993:22" pos:end="993:22">i</name><operator pos:start="993:23" pos:end="993:23">=</operator><literal type="number" pos:start="993:24" pos:end="993:24">0</literal></expr>;</init> <condition pos:start="993:27" pos:end="993:30"><expr pos:start="993:27" pos:end="993:29"><name pos:start="993:27" pos:end="993:27">i</name><operator pos:start="993:28" pos:end="993:28">&lt;</operator><literal type="number" pos:start="993:29" pos:end="993:29">2</literal></expr>;</condition> <incr pos:start="993:32" pos:end="993:34"><expr pos:start="993:32" pos:end="993:34"><name pos:start="993:32" pos:end="993:32">i</name><operator pos:start="993:33" pos:end="993:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="995:21" pos:end="995:68"><block_content pos:start="995:21" pos:end="995:68">

                    <expr_stmt pos:start="995:21" pos:end="995:68"><expr pos:start="995:21" pos:end="995:67"><name pos:start="995:21" pos:end="995:31"><name pos:start="995:21" pos:end="995:25">coeff</name><index pos:start="995:26" pos:end="995:28">[<expr pos:start="995:27" pos:end="995:27"><name pos:start="995:27" pos:end="995:27">i</name></expr>]</index><index pos:start="995:29" pos:end="995:31">[<expr pos:start="995:30" pos:end="995:30"><name pos:start="995:30" pos:end="995:30">n</name></expr>]</index></name> <operator pos:start="995:33" pos:end="995:33">=</operator> <name pos:start="995:35" pos:end="995:67"><name pos:start="995:35" pos:end="995:48">ea_adpcm_table</name><index pos:start="995:49" pos:end="995:67">[<expr pos:start="995:50" pos:end="995:66"><operator pos:start="995:50" pos:end="995:50">(</operator><name pos:start="995:51" pos:end="995:56"><name pos:start="995:51" pos:end="995:53">src</name><index pos:start="995:54" pos:end="995:56">[<expr pos:start="995:55" pos:end="995:55"><literal type="number" pos:start="995:55" pos:end="995:55">0</literal></expr>]</index></name><operator pos:start="995:57" pos:end="995:57">&amp;</operator><literal type="number" pos:start="995:58" pos:end="995:61">0x0F</literal><operator pos:start="995:62" pos:end="995:62">)</operator><operator pos:start="995:63" pos:end="995:63">+</operator><literal type="number" pos:start="995:64" pos:end="995:64">4</literal><operator pos:start="995:65" pos:end="995:65">*</operator><name pos:start="995:66" pos:end="995:66">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="997:17" pos:end="997:48"><expr pos:start="997:17" pos:end="997:47"><name pos:start="997:17" pos:end="997:24"><name pos:start="997:17" pos:end="997:21">shift</name><index pos:start="997:22" pos:end="997:24">[<expr pos:start="997:23" pos:end="997:23"><name pos:start="997:23" pos:end="997:23">n</name></expr>]</index></name> <operator pos:start="997:26" pos:end="997:26">=</operator> <literal type="number" pos:start="997:28" pos:end="997:31">20</literal> <operator pos:start="997:31" pos:end="997:31">-</operator> <operator pos:start="997:33" pos:end="997:33">(</operator><name pos:start="997:34" pos:end="997:39"><name pos:start="997:34" pos:end="997:36">src</name><index pos:start="997:37" pos:end="997:39">[<expr pos:start="997:38" pos:end="997:38"><literal type="number" pos:start="997:38" pos:end="997:38">2</literal></expr>]</index></name> <operator pos:start="997:41" pos:end="997:41">&amp;</operator> <literal type="number" pos:start="997:43" pos:end="997:46">0x0F</literal><operator pos:start="997:47" pos:end="997:47">)</operator></expr>;</expr_stmt>

                <for pos:start="999:17" pos:end="1001:56">for <control pos:start="999:21" pos:end="999:70">(<init pos:start="999:22" pos:end="999:31"><expr pos:start="999:22" pos:end="999:25"><name pos:start="999:22" pos:end="999:23">s2</name><operator pos:start="999:24" pos:end="999:24">=</operator><name pos:start="999:25" pos:end="999:25">s</name></expr><operator pos:start="999:26" pos:end="999:26">,</operator> <expr pos:start="999:28" pos:end="999:30"><name pos:start="999:28" pos:end="999:28">i</name><operator pos:start="999:29" pos:end="999:29">=</operator><literal type="number" pos:start="999:30" pos:end="999:30">0</literal></expr>;</init> <condition pos:start="999:33" pos:end="999:36"><expr pos:start="999:33" pos:end="999:35"><name pos:start="999:33" pos:end="999:33">i</name><operator pos:start="999:34" pos:end="999:34">&lt;</operator><literal type="number" pos:start="999:35" pos:end="999:35">2</literal></expr>;</condition> <incr pos:start="999:38" pos:end="999:69"><expr pos:start="999:38" pos:end="999:40"><name pos:start="999:38" pos:end="999:38">i</name><operator pos:start="999:39" pos:end="999:40">++</operator></expr><operator pos:start="999:41" pos:end="999:41">,</operator> <expr pos:start="999:43" pos:end="999:48"><name pos:start="999:43" pos:end="999:45">src</name><operator pos:start="999:46" pos:end="999:47">+=</operator><literal type="number" pos:start="999:48" pos:end="999:48">2</literal></expr><operator pos:start="999:49" pos:end="999:49">,</operator> <expr pos:start="999:51" pos:end="999:69"><name pos:start="999:51" pos:end="999:52">s2</name><operator pos:start="999:53" pos:end="999:54">+=</operator><name pos:start="999:55" pos:end="999:69"><name pos:start="999:55" pos:end="999:59">avctx</name><operator pos:start="999:60" pos:end="999:61">-&gt;</operator><name pos:start="999:62" pos:end="999:69">channels</name></name></expr></incr>)</control><block type="pseudo" pos:start="1001:21" pos:end="1001:56"><block_content pos:start="1001:21" pos:end="1001:56">

                    <expr_stmt pos:start="1001:21" pos:end="1001:56"><expr pos:start="1001:21" pos:end="1001:55"><name pos:start="1001:21" pos:end="1001:25"><name pos:start="1001:21" pos:end="1001:22">s2</name><index pos:start="1001:23" pos:end="1001:25">[<expr pos:start="1001:24" pos:end="1001:24"><literal type="number" pos:start="1001:24" pos:end="1001:24">0</literal></expr>]</index></name> <operator pos:start="1001:27" pos:end="1001:27">=</operator> <operator pos:start="1001:29" pos:end="1001:29">(</operator><name pos:start="1001:30" pos:end="1001:35"><name pos:start="1001:30" pos:end="1001:32">src</name><index pos:start="1001:33" pos:end="1001:35">[<expr pos:start="1001:34" pos:end="1001:34"><literal type="number" pos:start="1001:34" pos:end="1001:34">0</literal></expr>]</index></name><operator pos:start="1001:36" pos:end="1001:36">&amp;</operator><literal type="number" pos:start="1001:37" pos:end="1001:40">0xF0</literal><operator pos:start="1001:41" pos:end="1001:41">)</operator> <operator pos:start="1001:43" pos:end="1001:43">+</operator> <operator pos:start="1001:45" pos:end="1001:45">(</operator><name pos:start="1001:46" pos:end="1001:51"><name pos:start="1001:46" pos:end="1001:48">src</name><index pos:start="1001:49" pos:end="1001:51">[<expr pos:start="1001:50" pos:end="1001:50"><literal type="number" pos:start="1001:50" pos:end="1001:50">1</literal></expr>]</index></name><operator pos:start="1001:52" pos:end="1001:53">&lt;&lt;</operator><literal type="number" pos:start="1001:54" pos:end="1001:54">8</literal><operator pos:start="1001:55" pos:end="1001:55">)</operator></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>



            <for pos:start="1007:13" pos:end="1027:13">for <control pos:start="1007:17" pos:end="1007:33">(<init pos:start="1007:18" pos:end="1007:21"><expr pos:start="1007:18" pos:end="1007:20"><name pos:start="1007:18" pos:end="1007:18">m</name><operator pos:start="1007:19" pos:end="1007:19">=</operator><literal type="number" pos:start="1007:20" pos:end="1007:20">2</literal></expr>;</init> <condition pos:start="1007:23" pos:end="1007:27"><expr pos:start="1007:23" pos:end="1007:26"><name pos:start="1007:23" pos:end="1007:23">m</name><operator pos:start="1007:24" pos:end="1007:24">&lt;</operator><literal type="number" pos:start="1007:25" pos:end="1007:26">32</literal></expr>;</condition> <incr pos:start="1007:29" pos:end="1007:32"><expr pos:start="1007:29" pos:end="1007:32"><name pos:start="1007:29" pos:end="1007:29">m</name><operator pos:start="1007:30" pos:end="1007:31">+=</operator><literal type="number" pos:start="1007:32" pos:end="1007:32">2</literal></expr></incr>)</control> <block pos:start="1007:35" pos:end="1027:13">{<block_content pos:start="1009:17" pos:end="1025:17">

                <expr_stmt pos:start="1009:17" pos:end="1009:58"><expr pos:start="1009:17" pos:end="1009:57"><name pos:start="1009:17" pos:end="1009:17">s</name> <operator pos:start="1009:19" pos:end="1009:19">=</operator> <operator pos:start="1009:21" pos:end="1009:21">&amp;</operator><name pos:start="1009:22" pos:end="1009:57"><name pos:start="1009:22" pos:end="1009:28">samples</name><index pos:start="1009:29" pos:end="1009:57">[<expr pos:start="1009:30" pos:end="1009:56"><name pos:start="1009:30" pos:end="1009:30">m</name><operator pos:start="1009:31" pos:end="1009:31">*</operator><name pos:start="1009:32" pos:end="1009:46"><name pos:start="1009:32" pos:end="1009:36">avctx</name><operator pos:start="1009:37" pos:end="1009:38">-&gt;</operator><name pos:start="1009:39" pos:end="1009:46">channels</name></name> <operator pos:start="1009:48" pos:end="1009:48">+</operator> <name pos:start="1009:50" pos:end="1009:56">channel</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="1011:17" pos:end="1025:17">for <control pos:start="1011:21" pos:end="1011:65">(<init pos:start="1011:22" pos:end="1011:25"><expr pos:start="1011:22" pos:end="1011:24"><name pos:start="1011:22" pos:end="1011:22">n</name><operator pos:start="1011:23" pos:end="1011:23">=</operator><literal type="number" pos:start="1011:24" pos:end="1011:24">0</literal></expr>;</init> <condition pos:start="1011:27" pos:end="1011:30"><expr pos:start="1011:27" pos:end="1011:29"><name pos:start="1011:27" pos:end="1011:27">n</name><operator pos:start="1011:28" pos:end="1011:28">&lt;</operator><literal type="number" pos:start="1011:29" pos:end="1011:29">4</literal></expr>;</condition> <incr pos:start="1011:32" pos:end="1011:64"><expr pos:start="1011:32" pos:end="1011:34"><name pos:start="1011:32" pos:end="1011:32">n</name><operator pos:start="1011:33" pos:end="1011:34">++</operator></expr><operator pos:start="1011:35" pos:end="1011:35">,</operator> <expr pos:start="1011:37" pos:end="1011:41"><name pos:start="1011:37" pos:end="1011:39">src</name><operator pos:start="1011:40" pos:end="1011:41">++</operator></expr><operator pos:start="1011:42" pos:end="1011:42">,</operator> <expr pos:start="1011:44" pos:end="1011:64"><name pos:start="1011:44" pos:end="1011:44">s</name><operator pos:start="1011:45" pos:end="1011:46">+=</operator><literal type="number" pos:start="1011:47" pos:end="1011:48">32</literal><operator pos:start="1011:49" pos:end="1011:49">*</operator><name pos:start="1011:50" pos:end="1011:64"><name pos:start="1011:50" pos:end="1011:54">avctx</name><operator pos:start="1011:55" pos:end="1011:56">-&gt;</operator><name pos:start="1011:57" pos:end="1011:64">channels</name></name></expr></incr>)</control> <block pos:start="1011:67" pos:end="1025:17">{<block_content pos:start="1013:21" pos:end="1023:21">

                    <for pos:start="1013:21" pos:end="1023:21">for <control pos:start="1013:25" pos:end="1013:67">(<init pos:start="1013:26" pos:end="1013:35"><expr pos:start="1013:26" pos:end="1013:29"><name pos:start="1013:26" pos:end="1013:27">s2</name><operator pos:start="1013:28" pos:end="1013:28">=</operator><name pos:start="1013:29" pos:end="1013:29">s</name></expr><operator pos:start="1013:30" pos:end="1013:30">,</operator> <expr pos:start="1013:32" pos:end="1013:34"><name pos:start="1013:32" pos:end="1013:32">i</name><operator pos:start="1013:33" pos:end="1013:33">=</operator><literal type="number" pos:start="1013:34" pos:end="1013:34">0</literal></expr>;</init> <condition pos:start="1013:37" pos:end="1013:40"><expr pos:start="1013:37" pos:end="1013:39"><name pos:start="1013:37" pos:end="1013:37">i</name><operator pos:start="1013:38" pos:end="1013:38">&lt;</operator><literal type="number" pos:start="1013:39" pos:end="1013:39">8</literal></expr>;</condition> <incr pos:start="1013:42" pos:end="1013:66"><expr pos:start="1013:42" pos:end="1013:45"><name pos:start="1013:42" pos:end="1013:42">i</name><operator pos:start="1013:43" pos:end="1013:44">+=</operator><literal type="number" pos:start="1013:45" pos:end="1013:45">4</literal></expr><operator pos:start="1013:46" pos:end="1013:46">,</operator> <expr pos:start="1013:48" pos:end="1013:66"><name pos:start="1013:48" pos:end="1013:49">s2</name><operator pos:start="1013:50" pos:end="1013:51">+=</operator><name pos:start="1013:52" pos:end="1013:66"><name pos:start="1013:52" pos:end="1013:56">avctx</name><operator pos:start="1013:57" pos:end="1013:58">-&gt;</operator><name pos:start="1013:59" pos:end="1013:66">channels</name></name></expr></incr>)</control> <block pos:start="1013:69" pos:end="1023:21">{<block_content pos:start="1015:25" pos:end="1021:74">

                        <decl_stmt pos:start="1015:25" pos:end="1015:80"><decl pos:start="1015:25" pos:end="1015:79"><type pos:start="1015:25" pos:end="1015:27"><name pos:start="1015:25" pos:end="1015:27">int</name></type> <name pos:start="1015:29" pos:end="1015:33">level</name> <init pos:start="1015:35" pos:end="1015:79">= <expr pos:start="1015:37" pos:end="1015:79"><call pos:start="1015:37" pos:end="1015:67"><name pos:start="1015:37" pos:end="1015:47">sign_extend</name><argument_list pos:start="1015:48" pos:end="1015:67">(<argument pos:start="1015:49" pos:end="1015:63"><expr pos:start="1015:49" pos:end="1015:63"><operator pos:start="1015:49" pos:end="1015:49">*</operator><name pos:start="1015:50" pos:end="1015:52">src</name> <operator pos:start="1015:54" pos:end="1015:55">&gt;&gt;</operator> <operator pos:start="1015:57" pos:end="1015:57">(</operator><literal type="number" pos:start="1015:58" pos:end="1015:60">4</literal> <operator pos:start="1015:60" pos:end="1015:60">-</operator> <name pos:start="1015:62" pos:end="1015:62">i</name><operator pos:start="1015:63" pos:end="1015:63">)</operator></expr></argument>, <argument pos:start="1015:66" pos:end="1015:66"><expr pos:start="1015:66" pos:end="1015:66"><literal type="number" pos:start="1015:66" pos:end="1015:66">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1015:69" pos:end="1015:70">&lt;&lt;</operator> <name pos:start="1015:72" pos:end="1015:79"><name pos:start="1015:72" pos:end="1015:76">shift</name><index pos:start="1015:77" pos:end="1015:79">[<expr pos:start="1015:78" pos:end="1015:78"><name pos:start="1015:78" pos:end="1015:78">n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="1017:25" pos:end="1019:73"><decl pos:start="1017:25" pos:end="1019:72"><type pos:start="1017:25" pos:end="1017:27"><name pos:start="1017:25" pos:end="1017:27">int</name></type> <name pos:start="1017:29" pos:end="1017:32">pred</name>  <init pos:start="1017:35" pos:end="1019:72">= <expr pos:start="1017:37" pos:end="1019:72"><name pos:start="1017:37" pos:end="1017:58"><name pos:start="1017:37" pos:end="1017:38">s2</name><index pos:start="1017:39" pos:end="1017:58">[<expr pos:start="1017:40" pos:end="1017:57"><operator pos:start="1017:40" pos:end="1017:40">-</operator><literal type="number" pos:start="1017:41" pos:end="1017:41">1</literal><operator pos:start="1017:42" pos:end="1017:42">*</operator><name pos:start="1017:43" pos:end="1017:57"><name pos:start="1017:43" pos:end="1017:47">avctx</name><operator pos:start="1017:48" pos:end="1017:49">-&gt;</operator><name pos:start="1017:50" pos:end="1017:57">channels</name></name></expr>]</index></name> <operator pos:start="1017:60" pos:end="1017:60">*</operator> <name pos:start="1017:62" pos:end="1017:72"><name pos:start="1017:62" pos:end="1017:66">coeff</name><index pos:start="1017:67" pos:end="1017:69">[<expr pos:start="1017:68" pos:end="1017:68"><literal type="number" pos:start="1017:68" pos:end="1017:68">0</literal></expr>]</index><index pos:start="1017:70" pos:end="1017:72">[<expr pos:start="1017:71" pos:end="1017:71"><name pos:start="1017:71" pos:end="1017:71">n</name></expr>]</index></name>

                                  <operator pos:start="1019:35" pos:end="1019:35">+</operator> <name pos:start="1019:37" pos:end="1019:58"><name pos:start="1019:37" pos:end="1019:38">s2</name><index pos:start="1019:39" pos:end="1019:58">[<expr pos:start="1019:40" pos:end="1019:57"><operator pos:start="1019:40" pos:end="1019:40">-</operator><literal type="number" pos:start="1019:41" pos:end="1019:41">2</literal><operator pos:start="1019:42" pos:end="1019:42">*</operator><name pos:start="1019:43" pos:end="1019:57"><name pos:start="1019:43" pos:end="1019:47">avctx</name><operator pos:start="1019:48" pos:end="1019:49">-&gt;</operator><name pos:start="1019:50" pos:end="1019:57">channels</name></name></expr>]</index></name> <operator pos:start="1019:60" pos:end="1019:60">*</operator> <name pos:start="1019:62" pos:end="1019:72"><name pos:start="1019:62" pos:end="1019:66">coeff</name><index pos:start="1019:67" pos:end="1019:69">[<expr pos:start="1019:68" pos:end="1019:68"><literal type="number" pos:start="1019:68" pos:end="1019:68">1</literal></expr>]</index><index pos:start="1019:70" pos:end="1019:72">[<expr pos:start="1019:71" pos:end="1019:71"><name pos:start="1019:71" pos:end="1019:71">n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="1021:25" pos:end="1021:74"><expr pos:start="1021:25" pos:end="1021:73"><name pos:start="1021:25" pos:end="1021:29"><name pos:start="1021:25" pos:end="1021:26">s2</name><index pos:start="1021:27" pos:end="1021:29">[<expr pos:start="1021:28" pos:end="1021:28"><literal type="number" pos:start="1021:28" pos:end="1021:28">0</literal></expr>]</index></name> <operator pos:start="1021:31" pos:end="1021:31">=</operator> <call pos:start="1021:33" pos:end="1021:73"><name pos:start="1021:33" pos:end="1021:45">av_clip_int16</name><argument_list pos:start="1021:46" pos:end="1021:73">(<argument pos:start="1021:47" pos:end="1021:72"><expr pos:start="1021:47" pos:end="1021:72"><operator pos:start="1021:47" pos:end="1021:47">(</operator><name pos:start="1021:48" pos:end="1021:52">level</name> <operator pos:start="1021:54" pos:end="1021:54">+</operator> <name pos:start="1021:56" pos:end="1021:59">pred</name> <operator pos:start="1021:61" pos:end="1021:61">+</operator> <literal type="number" pos:start="1021:63" pos:end="1021:66">0x80</literal><operator pos:start="1021:67" pos:end="1021:67">)</operator> <operator pos:start="1021:69" pos:end="1021:70">&gt;&gt;</operator> <literal type="number" pos:start="1021:72" pos:end="1021:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="1031:9" pos:end="1031:14">break;</break>

    <case pos:start="1033:5" pos:end="1033:32">case <expr pos:start="1033:10" pos:end="1033:31"><name pos:start="1033:10" pos:end="1033:31">CODEC_ID_ADPCM_IMA_AMV</name></expr>:</case>

    <case pos:start="1035:5" pos:end="1035:35">case <expr pos:start="1035:10" pos:end="1035:34"><name pos:start="1035:10" pos:end="1035:34">CODEC_ID_ADPCM_IMA_SMJPEG</name></expr>:</case>

        <if_stmt pos:start="1037:9" pos:end="1053:9"><if pos:start="1037:9" pos:end="1045:9">if <condition pos:start="1037:12" pos:end="1037:55">(<expr pos:start="1037:13" pos:end="1037:54"><name pos:start="1037:13" pos:end="1037:28"><name pos:start="1037:13" pos:end="1037:17">avctx</name><operator pos:start="1037:18" pos:end="1037:19">-&gt;</operator><name pos:start="1037:20" pos:end="1037:24">codec</name><operator pos:start="1037:25" pos:end="1037:26">-&gt;</operator><name pos:start="1037:27" pos:end="1037:28">id</name></name> <operator pos:start="1037:30" pos:end="1037:31">==</operator> <name pos:start="1037:33" pos:end="1037:54">CODEC_ID_ADPCM_IMA_AMV</name></expr>)</condition> <block pos:start="1037:57" pos:end="1045:9">{<block_content pos:start="1039:13" pos:end="1043:21">

            <expr_stmt pos:start="1039:13" pos:end="1039:80"><expr pos:start="1039:13" pos:end="1039:79"><name pos:start="1039:13" pos:end="1039:24"><name pos:start="1039:13" pos:end="1039:13">c</name><operator pos:start="1039:14" pos:end="1039:15">-&gt;</operator><name pos:start="1039:16" pos:end="1039:21">status</name><index pos:start="1039:22" pos:end="1039:24">[<expr pos:start="1039:23" pos:end="1039:23"><literal type="number" pos:start="1039:23" pos:end="1039:23">0</literal></expr>]</index></name><operator pos:start="1039:25" pos:end="1039:25">.</operator><name pos:start="1039:26" pos:end="1039:34">predictor</name> <operator pos:start="1039:36" pos:end="1039:36">=</operator> <call pos:start="1039:38" pos:end="1039:79"><name pos:start="1039:38" pos:end="1039:48">sign_extend</name><argument_list pos:start="1039:49" pos:end="1039:79">(<argument pos:start="1039:50" pos:end="1039:74"><expr pos:start="1039:50" pos:end="1039:74"><call pos:start="1039:50" pos:end="1039:74"><name pos:start="1039:50" pos:end="1039:68">bytestream_get_le16</name><argument_list pos:start="1039:69" pos:end="1039:74">(<argument pos:start="1039:70" pos:end="1039:73"><expr pos:start="1039:70" pos:end="1039:73"><operator pos:start="1039:70" pos:end="1039:70">&amp;</operator><name pos:start="1039:71" pos:end="1039:73">src</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1039:77" pos:end="1039:78"><expr pos:start="1039:77" pos:end="1039:78"><literal type="number" pos:start="1039:77" pos:end="1039:78">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1041:13" pos:end="1041:80"><expr pos:start="1041:13" pos:end="1041:79"><name pos:start="1041:13" pos:end="1041:24"><name pos:start="1041:13" pos:end="1041:13">c</name><operator pos:start="1041:14" pos:end="1041:15">-&gt;</operator><name pos:start="1041:16" pos:end="1041:21">status</name><index pos:start="1041:22" pos:end="1041:24">[<expr pos:start="1041:23" pos:end="1041:23"><literal type="number" pos:start="1041:23" pos:end="1041:23">0</literal></expr>]</index></name><operator pos:start="1041:25" pos:end="1041:25">.</operator><name pos:start="1041:26" pos:end="1041:35">step_index</name> <operator pos:start="1041:37" pos:end="1041:37">=</operator> <call pos:start="1041:39" pos:end="1041:79"><name pos:start="1041:39" pos:end="1041:45">av_clip</name><argument_list pos:start="1041:46" pos:end="1041:79">(<argument pos:start="1041:47" pos:end="1041:71"><expr pos:start="1041:47" pos:end="1041:71"><call pos:start="1041:47" pos:end="1041:71"><name pos:start="1041:47" pos:end="1041:65">bytestream_get_le16</name><argument_list pos:start="1041:66" pos:end="1041:71">(<argument pos:start="1041:67" pos:end="1041:70"><expr pos:start="1041:67" pos:end="1041:70"><operator pos:start="1041:67" pos:end="1041:67">&amp;</operator><name pos:start="1041:68" pos:end="1041:70">src</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1041:74" pos:end="1041:74"><expr pos:start="1041:74" pos:end="1041:74"><literal type="number" pos:start="1041:74" pos:end="1041:74">0</literal></expr></argument>, <argument pos:start="1041:77" pos:end="1041:78"><expr pos:start="1041:77" pos:end="1041:78"><literal type="number" pos:start="1041:77" pos:end="1041:78">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1043:13" pos:end="1043:21"><expr pos:start="1043:13" pos:end="1043:20"><name pos:start="1043:13" pos:end="1043:15">src</name> <operator pos:start="1043:17" pos:end="1043:18">+=</operator> <literal type="number" pos:start="1043:20" pos:end="1043:20">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1045:11" pos:end="1053:9">else <block pos:start="1045:16" pos:end="1053:9">{<block_content pos:start="1047:13" pos:end="1051:21">

            <expr_stmt pos:start="1047:13" pos:end="1047:80"><expr pos:start="1047:13" pos:end="1047:79"><name pos:start="1047:13" pos:end="1047:24"><name pos:start="1047:13" pos:end="1047:13">c</name><operator pos:start="1047:14" pos:end="1047:15">-&gt;</operator><name pos:start="1047:16" pos:end="1047:21">status</name><index pos:start="1047:22" pos:end="1047:24">[<expr pos:start="1047:23" pos:end="1047:23"><literal type="number" pos:start="1047:23" pos:end="1047:23">0</literal></expr>]</index></name><operator pos:start="1047:25" pos:end="1047:25">.</operator><name pos:start="1047:26" pos:end="1047:34">predictor</name> <operator pos:start="1047:36" pos:end="1047:36">=</operator> <call pos:start="1047:38" pos:end="1047:79"><name pos:start="1047:38" pos:end="1047:48">sign_extend</name><argument_list pos:start="1047:49" pos:end="1047:79">(<argument pos:start="1047:50" pos:end="1047:74"><expr pos:start="1047:50" pos:end="1047:74"><call pos:start="1047:50" pos:end="1047:74"><name pos:start="1047:50" pos:end="1047:68">bytestream_get_be16</name><argument_list pos:start="1047:69" pos:end="1047:74">(<argument pos:start="1047:70" pos:end="1047:73"><expr pos:start="1047:70" pos:end="1047:73"><operator pos:start="1047:70" pos:end="1047:70">&amp;</operator><name pos:start="1047:71" pos:end="1047:73">src</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1047:77" pos:end="1047:78"><expr pos:start="1047:77" pos:end="1047:78"><literal type="number" pos:start="1047:77" pos:end="1047:78">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1049:13" pos:end="1049:80"><expr pos:start="1049:13" pos:end="1049:79"><name pos:start="1049:13" pos:end="1049:24"><name pos:start="1049:13" pos:end="1049:13">c</name><operator pos:start="1049:14" pos:end="1049:15">-&gt;</operator><name pos:start="1049:16" pos:end="1049:21">status</name><index pos:start="1049:22" pos:end="1049:24">[<expr pos:start="1049:23" pos:end="1049:23"><literal type="number" pos:start="1049:23" pos:end="1049:23">0</literal></expr>]</index></name><operator pos:start="1049:25" pos:end="1049:25">.</operator><name pos:start="1049:26" pos:end="1049:35">step_index</name> <operator pos:start="1049:37" pos:end="1049:37">=</operator> <call pos:start="1049:39" pos:end="1049:79"><name pos:start="1049:39" pos:end="1049:45">av_clip</name><argument_list pos:start="1049:46" pos:end="1049:79">(<argument pos:start="1049:47" pos:end="1049:71"><expr pos:start="1049:47" pos:end="1049:71"><call pos:start="1049:47" pos:end="1049:71"><name pos:start="1049:47" pos:end="1049:65">bytestream_get_byte</name><argument_list pos:start="1049:66" pos:end="1049:71">(<argument pos:start="1049:67" pos:end="1049:70"><expr pos:start="1049:67" pos:end="1049:70"><operator pos:start="1049:67" pos:end="1049:67">&amp;</operator><name pos:start="1049:68" pos:end="1049:70">src</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1049:74" pos:end="1049:74"><expr pos:start="1049:74" pos:end="1049:74"><literal type="number" pos:start="1049:74" pos:end="1049:74">0</literal></expr></argument>, <argument pos:start="1049:77" pos:end="1049:78"><expr pos:start="1049:77" pos:end="1049:78"><literal type="number" pos:start="1049:77" pos:end="1049:78">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1051:13" pos:end="1051:21"><expr pos:start="1051:13" pos:end="1051:20"><name pos:start="1051:13" pos:end="1051:15">src</name> <operator pos:start="1051:17" pos:end="1051:18">+=</operator> <literal type="number" pos:start="1051:20" pos:end="1051:20">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <for pos:start="1057:9" pos:end="1081:9">for <control pos:start="1057:13" pos:end="1057:59">(<init pos:start="1057:14" pos:end="1057:40"><expr pos:start="1057:14" pos:end="1057:39"><name pos:start="1057:14" pos:end="1057:14">n</name> <operator pos:start="1057:16" pos:end="1057:16">=</operator> <name pos:start="1057:18" pos:end="1057:27">nb_samples</name> <operator pos:start="1057:29" pos:end="1057:30">&gt;&gt;</operator> <operator pos:start="1057:32" pos:end="1057:32">(</operator><literal type="number" pos:start="1057:33" pos:end="1057:35">1</literal> <operator pos:start="1057:35" pos:end="1057:35">-</operator> <name pos:start="1057:37" pos:end="1057:38">st</name><operator pos:start="1057:39" pos:end="1057:39">)</operator></expr>;</init> <condition pos:start="1057:42" pos:end="1057:47"><expr pos:start="1057:42" pos:end="1057:46"><name pos:start="1057:42" pos:end="1057:42">n</name> <operator pos:start="1057:44" pos:end="1057:44">&gt;</operator> <literal type="number" pos:start="1057:46" pos:end="1057:46">0</literal></expr>;</condition> <incr pos:start="1057:49" pos:end="1057:58"><expr pos:start="1057:49" pos:end="1057:51"><name pos:start="1057:49" pos:end="1057:49">n</name><operator pos:start="1057:50" pos:end="1057:51">--</operator></expr><operator pos:start="1057:52" pos:end="1057:52">,</operator> <expr pos:start="1057:54" pos:end="1057:58"><name pos:start="1057:54" pos:end="1057:56">src</name><operator pos:start="1057:57" pos:end="1057:58">++</operator></expr></incr>)</control> <block pos:start="1057:61" pos:end="1081:9">{<block_content pos:start="1059:13" pos:end="1079:23">

            <decl_stmt pos:start="1059:13" pos:end="1059:24"><decl pos:start="1059:13" pos:end="1059:19"><type pos:start="1059:13" pos:end="1059:16"><name pos:start="1059:13" pos:end="1059:16">char</name></type> <name pos:start="1059:18" pos:end="1059:19">hi</name></decl>, <decl pos:start="1059:22" pos:end="1059:23"><type ref="prev" pos:start="1059:13" pos:end="1059:16"/><name pos:start="1059:22" pos:end="1059:23">lo</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1061:13" pos:end="1061:29"><expr pos:start="1061:13" pos:end="1061:28"><name pos:start="1061:13" pos:end="1061:14">lo</name> <operator pos:start="1061:16" pos:end="1061:16">=</operator> <operator pos:start="1061:18" pos:end="1061:18">*</operator><name pos:start="1061:19" pos:end="1061:21">src</name> <operator pos:start="1061:23" pos:end="1061:23">&amp;</operator> <literal type="number" pos:start="1061:25" pos:end="1061:28">0x0F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1063:13" pos:end="1063:27"><expr pos:start="1063:13" pos:end="1063:26"><name pos:start="1063:13" pos:end="1063:14">hi</name> <operator pos:start="1063:16" pos:end="1063:16">=</operator> <operator pos:start="1063:18" pos:end="1063:18">*</operator><name pos:start="1063:19" pos:end="1063:21">src</name> <operator pos:start="1063:23" pos:end="1063:24">&gt;&gt;</operator> <literal type="number" pos:start="1063:26" pos:end="1063:26">4</literal></expr>;</expr_stmt>



            <if_stmt pos:start="1067:13" pos:end="1069:37"><if pos:start="1067:13" pos:end="1069:37">if <condition pos:start="1067:16" pos:end="1067:59">(<expr pos:start="1067:17" pos:end="1067:58"><name pos:start="1067:17" pos:end="1067:32"><name pos:start="1067:17" pos:end="1067:21">avctx</name><operator pos:start="1067:22" pos:end="1067:23">-&gt;</operator><name pos:start="1067:24" pos:end="1067:28">codec</name><operator pos:start="1067:29" pos:end="1067:30">-&gt;</operator><name pos:start="1067:31" pos:end="1067:32">id</name></name> <operator pos:start="1067:34" pos:end="1067:35">==</operator> <name pos:start="1067:37" pos:end="1067:58">CODEC_ID_ADPCM_IMA_AMV</name></expr>)</condition><block type="pseudo" pos:start="1069:17" pos:end="1069:37"><block_content pos:start="1069:17" pos:end="1069:37">

                <expr_stmt pos:start="1069:17" pos:end="1069:37"><expr pos:start="1069:17" pos:end="1069:36"><call pos:start="1069:17" pos:end="1069:36"><name pos:start="1069:17" pos:end="1069:22">FFSWAP</name><argument_list pos:start="1069:23" pos:end="1069:36">(<argument pos:start="1069:24" pos:end="1069:27"><expr pos:start="1069:24" pos:end="1069:27"><name pos:start="1069:24" pos:end="1069:27">char</name></expr></argument>, <argument pos:start="1069:30" pos:end="1069:31"><expr pos:start="1069:30" pos:end="1069:31"><name pos:start="1069:30" pos:end="1069:31">hi</name></expr></argument>, <argument pos:start="1069:34" pos:end="1069:35"><expr pos:start="1069:34" pos:end="1069:35"><name pos:start="1069:34" pos:end="1069:35">lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="1073:13" pos:end="1075:23"><expr pos:start="1073:13" pos:end="1075:22"><operator pos:start="1073:13" pos:end="1073:13">*</operator><name pos:start="1073:14" pos:end="1073:20">samples</name><operator pos:start="1073:21" pos:end="1073:22">++</operator> <operator pos:start="1073:24" pos:end="1073:24">=</operator> <call pos:start="1073:26" pos:end="1075:22"><name pos:start="1073:26" pos:end="1073:48">adpcm_ima_expand_nibble</name><argument_list pos:start="1073:49" pos:end="1075:22">(<argument pos:start="1073:50" pos:end="1073:62"><expr pos:start="1073:50" pos:end="1073:62"><operator pos:start="1073:50" pos:end="1073:50">&amp;</operator><name pos:start="1073:51" pos:end="1073:62"><name pos:start="1073:51" pos:end="1073:51">c</name><operator pos:start="1073:52" pos:end="1073:53">-&gt;</operator><name pos:start="1073:54" pos:end="1073:59">status</name><index pos:start="1073:60" pos:end="1073:62">[<expr pos:start="1073:61" pos:end="1073:61"><literal type="number" pos:start="1073:61" pos:end="1073:61">0</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="1075:17" pos:end="1075:18"><expr pos:start="1075:17" pos:end="1075:18"><name pos:start="1075:17" pos:end="1075:18">lo</name></expr></argument>, <argument pos:start="1075:21" pos:end="1075:21"><expr pos:start="1075:21" pos:end="1075:21"><literal type="number" pos:start="1075:21" pos:end="1075:21">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1077:13" pos:end="1079:23"><expr pos:start="1077:13" pos:end="1079:22"><operator pos:start="1077:13" pos:end="1077:13">*</operator><name pos:start="1077:14" pos:end="1077:20">samples</name><operator pos:start="1077:21" pos:end="1077:22">++</operator> <operator pos:start="1077:24" pos:end="1077:24">=</operator> <call pos:start="1077:26" pos:end="1079:22"><name pos:start="1077:26" pos:end="1077:48">adpcm_ima_expand_nibble</name><argument_list pos:start="1077:49" pos:end="1079:22">(<argument pos:start="1077:50" pos:end="1077:62"><expr pos:start="1077:50" pos:end="1077:62"><operator pos:start="1077:50" pos:end="1077:50">&amp;</operator><name pos:start="1077:51" pos:end="1077:62"><name pos:start="1077:51" pos:end="1077:51">c</name><operator pos:start="1077:52" pos:end="1077:53">-&gt;</operator><name pos:start="1077:54" pos:end="1077:59">status</name><index pos:start="1077:60" pos:end="1077:62">[<expr pos:start="1077:61" pos:end="1077:61"><literal type="number" pos:start="1077:61" pos:end="1077:61">0</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="1079:17" pos:end="1079:18"><expr pos:start="1079:17" pos:end="1079:18"><name pos:start="1079:17" pos:end="1079:18">hi</name></expr></argument>, <argument pos:start="1079:21" pos:end="1079:21"><expr pos:start="1079:21" pos:end="1079:21"><literal type="number" pos:start="1079:21" pos:end="1079:21">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="1083:9" pos:end="1083:14">break;</break>

    <case pos:start="1085:5" pos:end="1085:27">case <expr pos:start="1085:10" pos:end="1085:26"><name pos:start="1085:10" pos:end="1085:26">CODEC_ID_ADPCM_CT</name></expr>:</case>

        <for pos:start="1087:9" pos:end="1095:9">for <control pos:start="1087:13" pos:end="1087:59">(<init pos:start="1087:14" pos:end="1087:40"><expr pos:start="1087:14" pos:end="1087:39"><name pos:start="1087:14" pos:end="1087:14">n</name> <operator pos:start="1087:16" pos:end="1087:16">=</operator> <name pos:start="1087:18" pos:end="1087:27">nb_samples</name> <operator pos:start="1087:29" pos:end="1087:30">&gt;&gt;</operator> <operator pos:start="1087:32" pos:end="1087:32">(</operator><literal type="number" pos:start="1087:33" pos:end="1087:35">1</literal> <operator pos:start="1087:35" pos:end="1087:35">-</operator> <name pos:start="1087:37" pos:end="1087:38">st</name><operator pos:start="1087:39" pos:end="1087:39">)</operator></expr>;</init> <condition pos:start="1087:42" pos:end="1087:47"><expr pos:start="1087:42" pos:end="1087:46"><name pos:start="1087:42" pos:end="1087:42">n</name> <operator pos:start="1087:44" pos:end="1087:44">&gt;</operator> <literal type="number" pos:start="1087:46" pos:end="1087:46">0</literal></expr>;</condition> <incr pos:start="1087:49" pos:end="1087:58"><expr pos:start="1087:49" pos:end="1087:51"><name pos:start="1087:49" pos:end="1087:49">n</name><operator pos:start="1087:50" pos:end="1087:51">--</operator></expr><operator pos:start="1087:52" pos:end="1087:52">,</operator> <expr pos:start="1087:54" pos:end="1087:58"><name pos:start="1087:54" pos:end="1087:56">src</name><operator pos:start="1087:57" pos:end="1087:58">++</operator></expr></incr>)</control> <block pos:start="1087:61" pos:end="1095:9">{<block_content pos:start="1089:13" pos:end="1093:74">

            <decl_stmt pos:start="1089:13" pos:end="1089:29"><decl pos:start="1089:13" pos:end="1089:28"><type pos:start="1089:13" pos:end="1089:19"><name pos:start="1089:13" pos:end="1089:19">uint8_t</name></type> <name pos:start="1089:21" pos:end="1089:21">v</name> <init pos:start="1089:23" pos:end="1089:28">= <expr pos:start="1089:25" pos:end="1089:28"><operator pos:start="1089:25" pos:end="1089:25">*</operator><name pos:start="1089:26" pos:end="1089:28">src</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="1091:13" pos:end="1091:74"><expr pos:start="1091:13" pos:end="1091:73"><operator pos:start="1091:13" pos:end="1091:13">*</operator><name pos:start="1091:14" pos:end="1091:20">samples</name><operator pos:start="1091:21" pos:end="1091:22">++</operator> <operator pos:start="1091:24" pos:end="1091:24">=</operator> <call pos:start="1091:26" pos:end="1091:73"><name pos:start="1091:26" pos:end="1091:47">adpcm_ct_expand_nibble</name><argument_list pos:start="1091:48" pos:end="1091:73">(<argument pos:start="1091:49" pos:end="1091:62"><expr pos:start="1091:49" pos:end="1091:62"><operator pos:start="1091:49" pos:end="1091:49">&amp;</operator><name pos:start="1091:50" pos:end="1091:62"><name pos:start="1091:50" pos:end="1091:50">c</name><operator pos:start="1091:51" pos:end="1091:52">-&gt;</operator><name pos:start="1091:53" pos:end="1091:58">status</name><index pos:start="1091:59" pos:end="1091:62">[<expr pos:start="1091:60" pos:end="1091:60"><literal type="number" pos:start="1091:60" pos:end="1091:60">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="1091:65" pos:end="1091:70"><expr pos:start="1091:65" pos:end="1091:70"><name pos:start="1091:65" pos:end="1091:65">v</name> <operator pos:start="1091:67" pos:end="1091:68">&gt;&gt;</operator> <literal type="number" pos:start="1091:70" pos:end="1091:70">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1093:13" pos:end="1093:74"><expr pos:start="1093:13" pos:end="1093:73"><operator pos:start="1093:13" pos:end="1093:13">*</operator><name pos:start="1093:14" pos:end="1093:20">samples</name><operator pos:start="1093:21" pos:end="1093:22">++</operator> <operator pos:start="1093:24" pos:end="1093:24">=</operator> <call pos:start="1093:26" pos:end="1093:73"><name pos:start="1093:26" pos:end="1093:47">adpcm_ct_expand_nibble</name><argument_list pos:start="1093:48" pos:end="1093:73">(<argument pos:start="1093:49" pos:end="1093:62"><expr pos:start="1093:49" pos:end="1093:62"><operator pos:start="1093:49" pos:end="1093:49">&amp;</operator><name pos:start="1093:50" pos:end="1093:62"><name pos:start="1093:50" pos:end="1093:50">c</name><operator pos:start="1093:51" pos:end="1093:52">-&gt;</operator><name pos:start="1093:53" pos:end="1093:58">status</name><index pos:start="1093:59" pos:end="1093:62">[<expr pos:start="1093:60" pos:end="1093:61"><name pos:start="1093:60" pos:end="1093:61">st</name></expr>]</index></name></expr></argument>, <argument pos:start="1093:65" pos:end="1093:72"><expr pos:start="1093:65" pos:end="1093:72"><name pos:start="1093:65" pos:end="1093:65">v</name> <operator pos:start="1093:67" pos:end="1093:67">&amp;</operator> <literal type="number" pos:start="1093:69" pos:end="1093:72">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="1097:9" pos:end="1097:14">break;</break>

    <case pos:start="1099:5" pos:end="1099:32">case <expr pos:start="1099:10" pos:end="1099:31"><name pos:start="1099:10" pos:end="1099:31">CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case>

    <case pos:start="1101:5" pos:end="1101:32">case <expr pos:start="1101:10" pos:end="1101:31"><name pos:start="1101:10" pos:end="1101:31">CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case>

    <case pos:start="1103:5" pos:end="1103:32">case <expr pos:start="1103:10" pos:end="1103:31"><name pos:start="1103:10" pos:end="1103:31">CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case>

        <if_stmt pos:start="1105:9" pos:end="1119:9"><if pos:start="1105:9" pos:end="1119:9">if <condition pos:start="1105:12" pos:end="1105:37">(<expr pos:start="1105:13" pos:end="1105:36"><operator pos:start="1105:13" pos:end="1105:13">!</operator><name pos:start="1105:14" pos:end="1105:25"><name pos:start="1105:14" pos:end="1105:14">c</name><operator pos:start="1105:15" pos:end="1105:16">-&gt;</operator><name pos:start="1105:17" pos:end="1105:22">status</name><index pos:start="1105:23" pos:end="1105:25">[<expr pos:start="1105:24" pos:end="1105:24"><literal type="number" pos:start="1105:24" pos:end="1105:24">0</literal></expr>]</index></name><operator pos:start="1105:26" pos:end="1105:26">.</operator><name pos:start="1105:27" pos:end="1105:36">step_index</name></expr>)</condition> <block pos:start="1105:39" pos:end="1119:9">{<block_content pos:start="1109:13" pos:end="1117:25">

            <comment type="block" pos:start="1107:13" pos:end="1107:48">/* the first byte is a raw sample */</comment>

            <expr_stmt pos:start="1109:13" pos:end="1109:47"><expr pos:start="1109:13" pos:end="1109:46"><operator pos:start="1109:13" pos:end="1109:13">*</operator><name pos:start="1109:14" pos:end="1109:20">samples</name><operator pos:start="1109:21" pos:end="1109:22">++</operator> <operator pos:start="1109:24" pos:end="1109:24">=</operator> <literal type="number" pos:start="1109:26" pos:end="1109:28">128</literal> <operator pos:start="1109:30" pos:end="1109:30">*</operator> <operator pos:start="1109:32" pos:end="1109:32">(</operator><operator pos:start="1109:33" pos:end="1109:33">*</operator><name pos:start="1109:34" pos:end="1109:36">src</name><operator pos:start="1109:37" pos:end="1109:38">++</operator> <operator pos:start="1109:40" pos:end="1109:40">-</operator> <literal type="number" pos:start="1109:42" pos:end="1109:45">0x80</literal><operator pos:start="1109:46" pos:end="1109:46">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="1111:13" pos:end="1113:49"><if pos:start="1111:13" pos:end="1113:49">if <condition pos:start="1111:16" pos:end="1111:19">(<expr pos:start="1111:17" pos:end="1111:18"><name pos:start="1111:17" pos:end="1111:18">st</name></expr>)</condition><block type="pseudo" pos:start="1113:15" pos:end="1113:49"><block_content pos:start="1113:15" pos:end="1113:49">

              <expr_stmt pos:start="1113:15" pos:end="1113:49"><expr pos:start="1113:15" pos:end="1113:48"><operator pos:start="1113:15" pos:end="1113:15">*</operator><name pos:start="1113:16" pos:end="1113:22">samples</name><operator pos:start="1113:23" pos:end="1113:24">++</operator> <operator pos:start="1113:26" pos:end="1113:26">=</operator> <literal type="number" pos:start="1113:28" pos:end="1113:30">128</literal> <operator pos:start="1113:32" pos:end="1113:32">*</operator> <operator pos:start="1113:34" pos:end="1113:34">(</operator><operator pos:start="1113:35" pos:end="1113:35">*</operator><name pos:start="1113:36" pos:end="1113:38">src</name><operator pos:start="1113:39" pos:end="1113:40">++</operator> <operator pos:start="1113:42" pos:end="1113:42">-</operator> <literal type="number" pos:start="1113:44" pos:end="1113:47">0x80</literal><operator pos:start="1113:48" pos:end="1113:48">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1115:13" pos:end="1115:40"><expr pos:start="1115:13" pos:end="1115:39"><name pos:start="1115:13" pos:end="1115:24"><name pos:start="1115:13" pos:end="1115:13">c</name><operator pos:start="1115:14" pos:end="1115:15">-&gt;</operator><name pos:start="1115:16" pos:end="1115:21">status</name><index pos:start="1115:22" pos:end="1115:24">[<expr pos:start="1115:23" pos:end="1115:23"><literal type="number" pos:start="1115:23" pos:end="1115:23">0</literal></expr>]</index></name><operator pos:start="1115:25" pos:end="1115:25">.</operator><name pos:start="1115:26" pos:end="1115:35">step_index</name> <operator pos:start="1115:37" pos:end="1115:37">=</operator> <literal type="number" pos:start="1115:39" pos:end="1115:39">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1117:13" pos:end="1117:25"><expr pos:start="1117:13" pos:end="1117:24"><name pos:start="1117:13" pos:end="1117:22">nb_samples</name><operator pos:start="1117:23" pos:end="1117:24">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1121:9" pos:end="1175:9"><if pos:start="1121:9" pos:end="1135:9">if <condition pos:start="1121:12" pos:end="1121:55">(<expr pos:start="1121:13" pos:end="1121:54"><name pos:start="1121:13" pos:end="1121:28"><name pos:start="1121:13" pos:end="1121:17">avctx</name><operator pos:start="1121:18" pos:end="1121:19">-&gt;</operator><name pos:start="1121:20" pos:end="1121:24">codec</name><operator pos:start="1121:25" pos:end="1121:26">-&gt;</operator><name pos:start="1121:27" pos:end="1121:28">id</name></name> <operator pos:start="1121:30" pos:end="1121:31">==</operator> <name pos:start="1121:33" pos:end="1121:54">CODEC_ID_ADPCM_SBPRO_4</name></expr>)</condition> <block pos:start="1121:57" pos:end="1135:9">{<block_content pos:start="1123:13" pos:end="1133:13">

            <for pos:start="1123:13" pos:end="1133:13">for <control pos:start="1123:17" pos:end="1123:63">(<init pos:start="1123:18" pos:end="1123:44"><expr pos:start="1123:18" pos:end="1123:43"><name pos:start="1123:18" pos:end="1123:18">n</name> <operator pos:start="1123:20" pos:end="1123:20">=</operator> <name pos:start="1123:22" pos:end="1123:31">nb_samples</name> <operator pos:start="1123:33" pos:end="1123:34">&gt;&gt;</operator> <operator pos:start="1123:36" pos:end="1123:36">(</operator><literal type="number" pos:start="1123:37" pos:end="1123:39">1</literal> <operator pos:start="1123:39" pos:end="1123:39">-</operator> <name pos:start="1123:41" pos:end="1123:42">st</name><operator pos:start="1123:43" pos:end="1123:43">)</operator></expr>;</init> <condition pos:start="1123:46" pos:end="1123:51"><expr pos:start="1123:46" pos:end="1123:50"><name pos:start="1123:46" pos:end="1123:46">n</name> <operator pos:start="1123:48" pos:end="1123:48">&gt;</operator> <literal type="number" pos:start="1123:50" pos:end="1123:50">0</literal></expr>;</condition> <incr pos:start="1123:53" pos:end="1123:62"><expr pos:start="1123:53" pos:end="1123:55"><name pos:start="1123:53" pos:end="1123:53">n</name><operator pos:start="1123:54" pos:end="1123:55">--</operator></expr><operator pos:start="1123:56" pos:end="1123:56">,</operator> <expr pos:start="1123:58" pos:end="1123:62"><name pos:start="1123:58" pos:end="1123:60">src</name><operator pos:start="1123:61" pos:end="1123:62">++</operator></expr></incr>)</control> <block pos:start="1123:65" pos:end="1133:13">{<block_content pos:start="1125:17" pos:end="1131:41">

                <expr_stmt pos:start="1125:17" pos:end="1127:39"><expr pos:start="1125:17" pos:end="1127:38"><operator pos:start="1125:17" pos:end="1125:17">*</operator><name pos:start="1125:18" pos:end="1125:24">samples</name><operator pos:start="1125:25" pos:end="1125:26">++</operator> <operator pos:start="1125:28" pos:end="1125:28">=</operator> <call pos:start="1125:30" pos:end="1127:38"><name pos:start="1125:30" pos:end="1125:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1125:55" pos:end="1127:38">(<argument pos:start="1125:56" pos:end="1125:68"><expr pos:start="1125:56" pos:end="1125:68"><operator pos:start="1125:56" pos:end="1125:56">&amp;</operator><name pos:start="1125:57" pos:end="1125:68"><name pos:start="1125:57" pos:end="1125:57">c</name><operator pos:start="1125:58" pos:end="1125:59">-&gt;</operator><name pos:start="1125:60" pos:end="1125:65">status</name><index pos:start="1125:66" pos:end="1125:68">[<expr pos:start="1125:67" pos:end="1125:67"><literal type="number" pos:start="1125:67" pos:end="1125:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1127:21" pos:end="1127:31"><expr pos:start="1127:21" pos:end="1127:31"><name pos:start="1127:21" pos:end="1127:26"><name pos:start="1127:21" pos:end="1127:23">src</name><index pos:start="1127:24" pos:end="1127:26">[<expr pos:start="1127:25" pos:end="1127:25"><literal type="number" pos:start="1127:25" pos:end="1127:25">0</literal></expr>]</index></name> <operator pos:start="1127:28" pos:end="1127:29">&gt;&gt;</operator> <literal type="number" pos:start="1127:31" pos:end="1127:31">4</literal></expr></argument>, <argument pos:start="1127:34" pos:end="1127:34"><expr pos:start="1127:34" pos:end="1127:34"><literal type="number" pos:start="1127:34" pos:end="1127:34">4</literal></expr></argument>, <argument pos:start="1127:37" pos:end="1127:37"><expr pos:start="1127:37" pos:end="1127:37"><literal type="number" pos:start="1127:37" pos:end="1127:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1129:17" pos:end="1131:41"><expr pos:start="1129:17" pos:end="1131:40"><operator pos:start="1129:17" pos:end="1129:17">*</operator><name pos:start="1129:18" pos:end="1129:24">samples</name><operator pos:start="1129:25" pos:end="1129:26">++</operator> <operator pos:start="1129:28" pos:end="1129:28">=</operator> <call pos:start="1129:30" pos:end="1131:40"><name pos:start="1129:30" pos:end="1129:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1129:55" pos:end="1131:40">(<argument pos:start="1129:56" pos:end="1129:69"><expr pos:start="1129:56" pos:end="1129:69"><operator pos:start="1129:56" pos:end="1129:56">&amp;</operator><name pos:start="1129:57" pos:end="1129:69"><name pos:start="1129:57" pos:end="1129:57">c</name><operator pos:start="1129:58" pos:end="1129:59">-&gt;</operator><name pos:start="1129:60" pos:end="1129:65">status</name><index pos:start="1129:66" pos:end="1129:69">[<expr pos:start="1129:67" pos:end="1129:68"><name pos:start="1129:67" pos:end="1129:68">st</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="1131:21" pos:end="1131:33"><expr pos:start="1131:21" pos:end="1131:33"><name pos:start="1131:21" pos:end="1131:26"><name pos:start="1131:21" pos:end="1131:23">src</name><index pos:start="1131:24" pos:end="1131:26">[<expr pos:start="1131:25" pos:end="1131:25"><literal type="number" pos:start="1131:25" pos:end="1131:25">0</literal></expr>]</index></name> <operator pos:start="1131:28" pos:end="1131:28">&amp;</operator> <literal type="number" pos:start="1131:30" pos:end="1131:33">0x0F</literal></expr></argument>, <argument pos:start="1131:36" pos:end="1131:36"><expr pos:start="1131:36" pos:end="1131:36"><literal type="number" pos:start="1131:36" pos:end="1131:36">4</literal></expr></argument>, <argument pos:start="1131:39" pos:end="1131:39"><expr pos:start="1131:39" pos:end="1131:39"><literal type="number" pos:start="1131:39" pos:end="1131:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="1135:11" pos:end="1153:9">else if <condition pos:start="1135:19" pos:end="1135:62">(<expr pos:start="1135:20" pos:end="1135:61"><name pos:start="1135:20" pos:end="1135:35"><name pos:start="1135:20" pos:end="1135:24">avctx</name><operator pos:start="1135:25" pos:end="1135:26">-&gt;</operator><name pos:start="1135:27" pos:end="1135:31">codec</name><operator pos:start="1135:32" pos:end="1135:33">-&gt;</operator><name pos:start="1135:34" pos:end="1135:35">id</name></name> <operator pos:start="1135:37" pos:end="1135:38">==</operator> <name pos:start="1135:40" pos:end="1135:61">CODEC_ID_ADPCM_SBPRO_3</name></expr>)</condition> <block pos:start="1135:64" pos:end="1153:9">{<block_content pos:start="1137:13" pos:end="1151:13">

            <for pos:start="1137:13" pos:end="1151:13">for <control pos:start="1137:17" pos:end="1137:55">(<init pos:start="1137:18" pos:end="1137:36"><expr pos:start="1137:18" pos:end="1137:35"><name pos:start="1137:18" pos:end="1137:18">n</name> <operator pos:start="1137:20" pos:end="1137:20">=</operator> <name pos:start="1137:22" pos:end="1137:31">nb_samples</name> <operator pos:start="1137:33" pos:end="1137:33">/</operator> <literal type="number" pos:start="1137:35" pos:end="1137:35">3</literal></expr>;</init> <condition pos:start="1137:38" pos:end="1137:43"><expr pos:start="1137:38" pos:end="1137:42"><name pos:start="1137:38" pos:end="1137:38">n</name> <operator pos:start="1137:40" pos:end="1137:40">&gt;</operator> <literal type="number" pos:start="1137:42" pos:end="1137:42">0</literal></expr>;</condition> <incr pos:start="1137:45" pos:end="1137:54"><expr pos:start="1137:45" pos:end="1137:47"><name pos:start="1137:45" pos:end="1137:45">n</name><operator pos:start="1137:46" pos:end="1137:47">--</operator></expr><operator pos:start="1137:48" pos:end="1137:48">,</operator> <expr pos:start="1137:50" pos:end="1137:54"><name pos:start="1137:50" pos:end="1137:52">src</name><operator pos:start="1137:53" pos:end="1137:54">++</operator></expr></incr>)</control> <block pos:start="1137:57" pos:end="1151:13">{<block_content pos:start="1139:17" pos:end="1149:41">

                <expr_stmt pos:start="1139:17" pos:end="1141:48"><expr pos:start="1139:17" pos:end="1141:47"><operator pos:start="1139:17" pos:end="1139:17">*</operator><name pos:start="1139:18" pos:end="1139:24">samples</name><operator pos:start="1139:25" pos:end="1139:26">++</operator> <operator pos:start="1139:28" pos:end="1139:28">=</operator> <call pos:start="1139:30" pos:end="1141:47"><name pos:start="1139:30" pos:end="1139:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1139:55" pos:end="1141:47">(<argument pos:start="1139:56" pos:end="1139:68"><expr pos:start="1139:56" pos:end="1139:68"><operator pos:start="1139:56" pos:end="1139:56">&amp;</operator><name pos:start="1139:57" pos:end="1139:68"><name pos:start="1139:57" pos:end="1139:57">c</name><operator pos:start="1139:58" pos:end="1139:59">-&gt;</operator><name pos:start="1139:60" pos:end="1139:65">status</name><index pos:start="1139:66" pos:end="1139:68">[<expr pos:start="1139:67" pos:end="1139:67"><literal type="number" pos:start="1139:67" pos:end="1139:67">0</literal></expr>]</index></name></expr></argument>,

                     <argument pos:start="1141:22" pos:end="1141:32"><expr pos:start="1141:22" pos:end="1141:32"><name pos:start="1141:22" pos:end="1141:27"><name pos:start="1141:22" pos:end="1141:24">src</name><index pos:start="1141:25" pos:end="1141:27">[<expr pos:start="1141:26" pos:end="1141:26"><literal type="number" pos:start="1141:26" pos:end="1141:26">0</literal></expr>]</index></name> <operator pos:start="1141:29" pos:end="1141:30">&gt;&gt;</operator> <literal type="number" pos:start="1141:32" pos:end="1141:32">5</literal></expr></argument>        , <argument pos:start="1141:43" pos:end="1141:43"><expr pos:start="1141:43" pos:end="1141:43"><literal type="number" pos:start="1141:43" pos:end="1141:43">3</literal></expr></argument>, <argument pos:start="1141:46" pos:end="1141:46"><expr pos:start="1141:46" pos:end="1141:46"><literal type="number" pos:start="1141:46" pos:end="1141:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1143:17" pos:end="1145:48"><expr pos:start="1143:17" pos:end="1145:47"><operator pos:start="1143:17" pos:end="1143:17">*</operator><name pos:start="1143:18" pos:end="1143:24">samples</name><operator pos:start="1143:25" pos:end="1143:26">++</operator> <operator pos:start="1143:28" pos:end="1143:28">=</operator> <call pos:start="1143:30" pos:end="1145:47"><name pos:start="1143:30" pos:end="1143:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1143:55" pos:end="1145:47">(<argument pos:start="1143:56" pos:end="1143:68"><expr pos:start="1143:56" pos:end="1143:68"><operator pos:start="1143:56" pos:end="1143:56">&amp;</operator><name pos:start="1143:57" pos:end="1143:68"><name pos:start="1143:57" pos:end="1143:57">c</name><operator pos:start="1143:58" pos:end="1143:59">-&gt;</operator><name pos:start="1143:60" pos:end="1143:65">status</name><index pos:start="1143:66" pos:end="1143:68">[<expr pos:start="1143:67" pos:end="1143:67"><literal type="number" pos:start="1143:67" pos:end="1143:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1145:21" pos:end="1145:40"><expr pos:start="1145:21" pos:end="1145:40"><operator pos:start="1145:21" pos:end="1145:21">(</operator><name pos:start="1145:22" pos:end="1145:27"><name pos:start="1145:22" pos:end="1145:24">src</name><index pos:start="1145:25" pos:end="1145:27">[<expr pos:start="1145:26" pos:end="1145:26"><literal type="number" pos:start="1145:26" pos:end="1145:26">0</literal></expr>]</index></name> <operator pos:start="1145:29" pos:end="1145:30">&gt;&gt;</operator> <literal type="number" pos:start="1145:32" pos:end="1145:32">2</literal><operator pos:start="1145:33" pos:end="1145:33">)</operator> <operator pos:start="1145:35" pos:end="1145:35">&amp;</operator> <literal type="number" pos:start="1145:37" pos:end="1145:40">0x07</literal></expr></argument>, <argument pos:start="1145:43" pos:end="1145:43"><expr pos:start="1145:43" pos:end="1145:43"><literal type="number" pos:start="1145:43" pos:end="1145:43">3</literal></expr></argument>, <argument pos:start="1145:46" pos:end="1145:46"><expr pos:start="1145:46" pos:end="1145:46"><literal type="number" pos:start="1145:46" pos:end="1145:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1147:17" pos:end="1149:41"><expr pos:start="1147:17" pos:end="1149:40"><operator pos:start="1147:17" pos:end="1147:17">*</operator><name pos:start="1147:18" pos:end="1147:24">samples</name><operator pos:start="1147:25" pos:end="1147:26">++</operator> <operator pos:start="1147:28" pos:end="1147:28">=</operator> <call pos:start="1147:30" pos:end="1149:40"><name pos:start="1147:30" pos:end="1147:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1147:55" pos:end="1149:40">(<argument pos:start="1147:56" pos:end="1147:68"><expr pos:start="1147:56" pos:end="1147:68"><operator pos:start="1147:56" pos:end="1147:56">&amp;</operator><name pos:start="1147:57" pos:end="1147:68"><name pos:start="1147:57" pos:end="1147:57">c</name><operator pos:start="1147:58" pos:end="1147:59">-&gt;</operator><name pos:start="1147:60" pos:end="1147:65">status</name><index pos:start="1147:66" pos:end="1147:68">[<expr pos:start="1147:67" pos:end="1147:67"><literal type="number" pos:start="1147:67" pos:end="1147:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1149:21" pos:end="1149:33"><expr pos:start="1149:21" pos:end="1149:33"><name pos:start="1149:21" pos:end="1149:26"><name pos:start="1149:21" pos:end="1149:23">src</name><index pos:start="1149:24" pos:end="1149:26">[<expr pos:start="1149:25" pos:end="1149:25"><literal type="number" pos:start="1149:25" pos:end="1149:25">0</literal></expr>]</index></name> <operator pos:start="1149:28" pos:end="1149:28">&amp;</operator> <literal type="number" pos:start="1149:30" pos:end="1149:33">0x03</literal></expr></argument>, <argument pos:start="1149:36" pos:end="1149:36"><expr pos:start="1149:36" pos:end="1149:36"><literal type="number" pos:start="1149:36" pos:end="1149:36">2</literal></expr></argument>, <argument pos:start="1149:39" pos:end="1149:39"><expr pos:start="1149:39" pos:end="1149:39"><literal type="number" pos:start="1149:39" pos:end="1149:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="1153:11" pos:end="1175:9">else <block pos:start="1153:16" pos:end="1175:9">{<block_content pos:start="1155:13" pos:end="1173:13">

            <for pos:start="1155:13" pos:end="1173:13">for <control pos:start="1155:17" pos:end="1155:63">(<init pos:start="1155:18" pos:end="1155:44"><expr pos:start="1155:18" pos:end="1155:43"><name pos:start="1155:18" pos:end="1155:18">n</name> <operator pos:start="1155:20" pos:end="1155:20">=</operator> <name pos:start="1155:22" pos:end="1155:31">nb_samples</name> <operator pos:start="1155:33" pos:end="1155:34">&gt;&gt;</operator> <operator pos:start="1155:36" pos:end="1155:36">(</operator><literal type="number" pos:start="1155:37" pos:end="1155:39">2</literal> <operator pos:start="1155:39" pos:end="1155:39">-</operator> <name pos:start="1155:41" pos:end="1155:42">st</name><operator pos:start="1155:43" pos:end="1155:43">)</operator></expr>;</init> <condition pos:start="1155:46" pos:end="1155:51"><expr pos:start="1155:46" pos:end="1155:50"><name pos:start="1155:46" pos:end="1155:46">n</name> <operator pos:start="1155:48" pos:end="1155:48">&gt;</operator> <literal type="number" pos:start="1155:50" pos:end="1155:50">0</literal></expr>;</condition> <incr pos:start="1155:53" pos:end="1155:62"><expr pos:start="1155:53" pos:end="1155:55"><name pos:start="1155:53" pos:end="1155:53">n</name><operator pos:start="1155:54" pos:end="1155:55">--</operator></expr><operator pos:start="1155:56" pos:end="1155:56">,</operator> <expr pos:start="1155:58" pos:end="1155:62"><name pos:start="1155:58" pos:end="1155:60">src</name><operator pos:start="1155:61" pos:end="1155:62">++</operator></expr></incr>)</control> <block pos:start="1155:65" pos:end="1173:13">{<block_content pos:start="1157:17" pos:end="1171:41">

                <expr_stmt pos:start="1157:17" pos:end="1159:48"><expr pos:start="1157:17" pos:end="1159:47"><operator pos:start="1157:17" pos:end="1157:17">*</operator><name pos:start="1157:18" pos:end="1157:24">samples</name><operator pos:start="1157:25" pos:end="1157:26">++</operator> <operator pos:start="1157:28" pos:end="1157:28">=</operator> <call pos:start="1157:30" pos:end="1159:47"><name pos:start="1157:30" pos:end="1157:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1157:55" pos:end="1159:47">(<argument pos:start="1157:56" pos:end="1157:68"><expr pos:start="1157:56" pos:end="1157:68"><operator pos:start="1157:56" pos:end="1157:56">&amp;</operator><name pos:start="1157:57" pos:end="1157:68"><name pos:start="1157:57" pos:end="1157:57">c</name><operator pos:start="1157:58" pos:end="1157:59">-&gt;</operator><name pos:start="1157:60" pos:end="1157:65">status</name><index pos:start="1157:66" pos:end="1157:68">[<expr pos:start="1157:67" pos:end="1157:67"><literal type="number" pos:start="1157:67" pos:end="1157:67">0</literal></expr>]</index></name></expr></argument>,

                     <argument pos:start="1159:22" pos:end="1159:32"><expr pos:start="1159:22" pos:end="1159:32"><name pos:start="1159:22" pos:end="1159:27"><name pos:start="1159:22" pos:end="1159:24">src</name><index pos:start="1159:25" pos:end="1159:27">[<expr pos:start="1159:26" pos:end="1159:26"><literal type="number" pos:start="1159:26" pos:end="1159:26">0</literal></expr>]</index></name> <operator pos:start="1159:29" pos:end="1159:30">&gt;&gt;</operator> <literal type="number" pos:start="1159:32" pos:end="1159:32">6</literal></expr></argument>        , <argument pos:start="1159:43" pos:end="1159:43"><expr pos:start="1159:43" pos:end="1159:43"><literal type="number" pos:start="1159:43" pos:end="1159:43">2</literal></expr></argument>, <argument pos:start="1159:46" pos:end="1159:46"><expr pos:start="1159:46" pos:end="1159:46"><literal type="number" pos:start="1159:46" pos:end="1159:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1161:17" pos:end="1163:48"><expr pos:start="1161:17" pos:end="1163:47"><operator pos:start="1161:17" pos:end="1161:17">*</operator><name pos:start="1161:18" pos:end="1161:24">samples</name><operator pos:start="1161:25" pos:end="1161:26">++</operator> <operator pos:start="1161:28" pos:end="1161:28">=</operator> <call pos:start="1161:30" pos:end="1163:47"><name pos:start="1161:30" pos:end="1161:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1161:55" pos:end="1163:47">(<argument pos:start="1161:56" pos:end="1161:69"><expr pos:start="1161:56" pos:end="1161:69"><operator pos:start="1161:56" pos:end="1161:56">&amp;</operator><name pos:start="1161:57" pos:end="1161:69"><name pos:start="1161:57" pos:end="1161:57">c</name><operator pos:start="1161:58" pos:end="1161:59">-&gt;</operator><name pos:start="1161:60" pos:end="1161:65">status</name><index pos:start="1161:66" pos:end="1161:69">[<expr pos:start="1161:67" pos:end="1161:68"><name pos:start="1161:67" pos:end="1161:68">st</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="1163:21" pos:end="1163:40"><expr pos:start="1163:21" pos:end="1163:40"><operator pos:start="1163:21" pos:end="1163:21">(</operator><name pos:start="1163:22" pos:end="1163:27"><name pos:start="1163:22" pos:end="1163:24">src</name><index pos:start="1163:25" pos:end="1163:27">[<expr pos:start="1163:26" pos:end="1163:26"><literal type="number" pos:start="1163:26" pos:end="1163:26">0</literal></expr>]</index></name> <operator pos:start="1163:29" pos:end="1163:30">&gt;&gt;</operator> <literal type="number" pos:start="1163:32" pos:end="1163:32">4</literal><operator pos:start="1163:33" pos:end="1163:33">)</operator> <operator pos:start="1163:35" pos:end="1163:35">&amp;</operator> <literal type="number" pos:start="1163:37" pos:end="1163:40">0x03</literal></expr></argument>, <argument pos:start="1163:43" pos:end="1163:43"><expr pos:start="1163:43" pos:end="1163:43"><literal type="number" pos:start="1163:43" pos:end="1163:43">2</literal></expr></argument>, <argument pos:start="1163:46" pos:end="1163:46"><expr pos:start="1163:46" pos:end="1163:46"><literal type="number" pos:start="1163:46" pos:end="1163:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1165:17" pos:end="1167:48"><expr pos:start="1165:17" pos:end="1167:47"><operator pos:start="1165:17" pos:end="1165:17">*</operator><name pos:start="1165:18" pos:end="1165:24">samples</name><operator pos:start="1165:25" pos:end="1165:26">++</operator> <operator pos:start="1165:28" pos:end="1165:28">=</operator> <call pos:start="1165:30" pos:end="1167:47"><name pos:start="1165:30" pos:end="1165:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1165:55" pos:end="1167:47">(<argument pos:start="1165:56" pos:end="1165:68"><expr pos:start="1165:56" pos:end="1165:68"><operator pos:start="1165:56" pos:end="1165:56">&amp;</operator><name pos:start="1165:57" pos:end="1165:68"><name pos:start="1165:57" pos:end="1165:57">c</name><operator pos:start="1165:58" pos:end="1165:59">-&gt;</operator><name pos:start="1165:60" pos:end="1165:65">status</name><index pos:start="1165:66" pos:end="1165:68">[<expr pos:start="1165:67" pos:end="1165:67"><literal type="number" pos:start="1165:67" pos:end="1165:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1167:21" pos:end="1167:40"><expr pos:start="1167:21" pos:end="1167:40"><operator pos:start="1167:21" pos:end="1167:21">(</operator><name pos:start="1167:22" pos:end="1167:27"><name pos:start="1167:22" pos:end="1167:24">src</name><index pos:start="1167:25" pos:end="1167:27">[<expr pos:start="1167:26" pos:end="1167:26"><literal type="number" pos:start="1167:26" pos:end="1167:26">0</literal></expr>]</index></name> <operator pos:start="1167:29" pos:end="1167:30">&gt;&gt;</operator> <literal type="number" pos:start="1167:32" pos:end="1167:32">2</literal><operator pos:start="1167:33" pos:end="1167:33">)</operator> <operator pos:start="1167:35" pos:end="1167:35">&amp;</operator> <literal type="number" pos:start="1167:37" pos:end="1167:40">0x03</literal></expr></argument>, <argument pos:start="1167:43" pos:end="1167:43"><expr pos:start="1167:43" pos:end="1167:43"><literal type="number" pos:start="1167:43" pos:end="1167:43">2</literal></expr></argument>, <argument pos:start="1167:46" pos:end="1167:46"><expr pos:start="1167:46" pos:end="1167:46"><literal type="number" pos:start="1167:46" pos:end="1167:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1169:17" pos:end="1171:41"><expr pos:start="1169:17" pos:end="1171:40"><operator pos:start="1169:17" pos:end="1169:17">*</operator><name pos:start="1169:18" pos:end="1169:24">samples</name><operator pos:start="1169:25" pos:end="1169:26">++</operator> <operator pos:start="1169:28" pos:end="1169:28">=</operator> <call pos:start="1169:30" pos:end="1171:40"><name pos:start="1169:30" pos:end="1169:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1169:55" pos:end="1171:40">(<argument pos:start="1169:56" pos:end="1169:69"><expr pos:start="1169:56" pos:end="1169:69"><operator pos:start="1169:56" pos:end="1169:56">&amp;</operator><name pos:start="1169:57" pos:end="1169:69"><name pos:start="1169:57" pos:end="1169:57">c</name><operator pos:start="1169:58" pos:end="1169:59">-&gt;</operator><name pos:start="1169:60" pos:end="1169:65">status</name><index pos:start="1169:66" pos:end="1169:69">[<expr pos:start="1169:67" pos:end="1169:68"><name pos:start="1169:67" pos:end="1169:68">st</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="1171:21" pos:end="1171:33"><expr pos:start="1171:21" pos:end="1171:33"><name pos:start="1171:21" pos:end="1171:26"><name pos:start="1171:21" pos:end="1171:23">src</name><index pos:start="1171:24" pos:end="1171:26">[<expr pos:start="1171:25" pos:end="1171:25"><literal type="number" pos:start="1171:25" pos:end="1171:25">0</literal></expr>]</index></name> <operator pos:start="1171:28" pos:end="1171:28">&amp;</operator> <literal type="number" pos:start="1171:30" pos:end="1171:33">0x03</literal></expr></argument>, <argument pos:start="1171:36" pos:end="1171:36"><expr pos:start="1171:36" pos:end="1171:36"><literal type="number" pos:start="1171:36" pos:end="1171:36">2</literal></expr></argument>, <argument pos:start="1171:39" pos:end="1171:39"><expr pos:start="1171:39" pos:end="1171:39"><literal type="number" pos:start="1171:39" pos:end="1171:39">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1177:9" pos:end="1177:14">break;</break>

    <case pos:start="1179:5" pos:end="1179:28">case <expr pos:start="1179:10" pos:end="1179:27"><name pos:start="1179:10" pos:end="1179:27">CODEC_ID_ADPCM_SWF</name></expr>:</case>

    <block pos:start="1181:5" pos:end="1291:5">{<block_content pos:start="1183:9" pos:end="1289:14">

        <decl_stmt pos:start="1183:9" pos:end="1183:25"><decl pos:start="1183:9" pos:end="1183:24"><type pos:start="1183:9" pos:end="1183:21"><name pos:start="1183:9" pos:end="1183:21">GetBitContext</name></type> <name pos:start="1183:23" pos:end="1183:24">gb</name></decl>;</decl_stmt>

        <decl_stmt pos:start="1185:9" pos:end="1185:25"><decl pos:start="1185:9" pos:end="1185:24"><type pos:start="1185:9" pos:end="1185:19"><specifier pos:start="1185:9" pos:end="1185:13">const</specifier> <name pos:start="1185:15" pos:end="1185:17">int</name> <modifier pos:start="1185:19" pos:end="1185:19">*</modifier></type><name pos:start="1185:20" pos:end="1185:24">table</name></decl>;</decl_stmt>

        <decl_stmt pos:start="1187:9" pos:end="1187:41"><decl pos:start="1187:9" pos:end="1187:14"><type pos:start="1187:9" pos:end="1187:11"><name pos:start="1187:9" pos:end="1187:11">int</name></type> <name pos:start="1187:13" pos:end="1187:14">k0</name></decl>, <decl pos:start="1187:17" pos:end="1187:24"><type ref="prev" pos:start="1187:9" pos:end="1187:11"/><name pos:start="1187:17" pos:end="1187:24">signmask</name></decl>, <decl pos:start="1187:27" pos:end="1187:33"><type ref="prev" pos:start="1187:9" pos:end="1187:11"/><name pos:start="1187:27" pos:end="1187:33">nb_bits</name></decl>, <decl pos:start="1187:36" pos:end="1187:40"><type ref="prev" pos:start="1187:9" pos:end="1187:11"/><name pos:start="1187:36" pos:end="1187:40">count</name></decl>;</decl_stmt>

        <decl_stmt pos:start="1189:9" pos:end="1189:30"><decl pos:start="1189:9" pos:end="1189:29"><type pos:start="1189:9" pos:end="1189:11"><name pos:start="1189:9" pos:end="1189:11">int</name></type> <name pos:start="1189:13" pos:end="1189:16">size</name> <init pos:start="1189:18" pos:end="1189:29">= <expr pos:start="1189:20" pos:end="1189:29"><name pos:start="1189:20" pos:end="1189:27">buf_size</name><operator pos:start="1189:28" pos:end="1189:28">*</operator><literal type="number" pos:start="1189:29" pos:end="1189:29">8</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="1193:9" pos:end="1193:38"><expr pos:start="1193:9" pos:end="1193:37"><call pos:start="1193:9" pos:end="1193:37"><name pos:start="1193:9" pos:end="1193:21">init_get_bits</name><argument_list pos:start="1193:22" pos:end="1193:37">(<argument pos:start="1193:23" pos:end="1193:25"><expr pos:start="1193:23" pos:end="1193:25"><operator pos:start="1193:23" pos:end="1193:23">&amp;</operator><name pos:start="1193:24" pos:end="1193:25">gb</name></expr></argument>, <argument pos:start="1193:28" pos:end="1193:30"><expr pos:start="1193:28" pos:end="1193:30"><name pos:start="1193:28" pos:end="1193:30">buf</name></expr></argument>, <argument pos:start="1193:33" pos:end="1193:36"><expr pos:start="1193:33" pos:end="1193:36"><name pos:start="1193:33" pos:end="1193:36">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="1197:9" pos:end="1197:36">//read bits &amp; initial values</comment>

        <expr_stmt pos:start="1199:9" pos:end="1199:37"><expr pos:start="1199:9" pos:end="1199:36"><name pos:start="1199:9" pos:end="1199:15">nb_bits</name> <operator pos:start="1199:17" pos:end="1199:17">=</operator> <call pos:start="1199:19" pos:end="1199:34"><name pos:start="1199:19" pos:end="1199:26">get_bits</name><argument_list pos:start="1199:27" pos:end="1199:34">(<argument pos:start="1199:28" pos:end="1199:30"><expr pos:start="1199:28" pos:end="1199:30"><operator pos:start="1199:28" pos:end="1199:28">&amp;</operator><name pos:start="1199:29" pos:end="1199:30">gb</name></expr></argument>, <argument pos:start="1199:33" pos:end="1199:33"><expr pos:start="1199:33" pos:end="1199:33"><literal type="number" pos:start="1199:33" pos:end="1199:33">2</literal></expr></argument>)</argument_list></call><operator pos:start="1199:35" pos:end="1199:35">+</operator><literal type="number" pos:start="1199:36" pos:end="1199:36">2</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="1201:9" pos:end="1201:60">//av_log(NULL,AV_LOG_INFO,"nb_bits: %d\n", nb_bits);</comment>

        <expr_stmt pos:start="1203:9" pos:end="1203:44"><expr pos:start="1203:9" pos:end="1203:43"><name pos:start="1203:9" pos:end="1203:13">table</name> <operator pos:start="1203:15" pos:end="1203:15">=</operator> <name pos:start="1203:17" pos:end="1203:43"><name pos:start="1203:17" pos:end="1203:32">swf_index_tables</name><index pos:start="1203:33" pos:end="1203:43">[<expr pos:start="1203:34" pos:end="1203:42"><name pos:start="1203:34" pos:end="1203:40">nb_bits</name><operator pos:start="1203:41" pos:end="1203:41">-</operator><literal type="number" pos:start="1203:42" pos:end="1203:42">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="1205:9" pos:end="1205:30"><expr pos:start="1205:9" pos:end="1205:29"><name pos:start="1205:9" pos:end="1205:10">k0</name> <operator pos:start="1205:12" pos:end="1205:12">=</operator> <literal type="number" pos:start="1205:14" pos:end="1205:14">1</literal> <operator pos:start="1205:16" pos:end="1205:17">&lt;&lt;</operator> <operator pos:start="1205:19" pos:end="1205:19">(</operator><name pos:start="1205:20" pos:end="1205:26">nb_bits</name><operator pos:start="1205:27" pos:end="1205:27">-</operator><literal type="number" pos:start="1205:28" pos:end="1205:28">2</literal><operator pos:start="1205:29" pos:end="1205:29">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1207:9" pos:end="1207:36"><expr pos:start="1207:9" pos:end="1207:35"><name pos:start="1207:9" pos:end="1207:16">signmask</name> <operator pos:start="1207:18" pos:end="1207:18">=</operator> <literal type="number" pos:start="1207:20" pos:end="1207:20">1</literal> <operator pos:start="1207:22" pos:end="1207:23">&lt;&lt;</operator> <operator pos:start="1207:25" pos:end="1207:25">(</operator><name pos:start="1207:26" pos:end="1207:32">nb_bits</name><operator pos:start="1207:33" pos:end="1207:33">-</operator><literal type="number" pos:start="1207:34" pos:end="1207:34">1</literal><operator pos:start="1207:35" pos:end="1207:35">)</operator></expr>;</expr_stmt>



        <while pos:start="1211:9" pos:end="1285:9">while <condition pos:start="1211:15" pos:end="1211:64">(<expr pos:start="1211:16" pos:end="1211:63"><call pos:start="1211:16" pos:end="1211:34"><name pos:start="1211:16" pos:end="1211:29">get_bits_count</name><argument_list pos:start="1211:30" pos:end="1211:34">(<argument pos:start="1211:31" pos:end="1211:33"><expr pos:start="1211:31" pos:end="1211:33"><operator pos:start="1211:31" pos:end="1211:31">&amp;</operator><name pos:start="1211:32" pos:end="1211:33">gb</name></expr></argument>)</argument_list></call> <operator pos:start="1211:36" pos:end="1211:37">&lt;=</operator> <name pos:start="1211:39" pos:end="1211:42">size</name> <operator pos:start="1211:44" pos:end="1211:44">-</operator> <literal type="number" pos:start="1211:46" pos:end="1211:47">22</literal><operator pos:start="1211:48" pos:end="1211:48">*</operator><name pos:start="1211:49" pos:end="1211:63"><name pos:start="1211:49" pos:end="1211:53">avctx</name><operator pos:start="1211:54" pos:end="1211:55">-&gt;</operator><name pos:start="1211:56" pos:end="1211:63">channels</name></name></expr>)</condition> <block pos:start="1211:66" pos:end="1285:9">{<block_content pos:start="1213:13" pos:end="1283:13">

            <for pos:start="1213:13" pos:end="1219:13">for <control pos:start="1213:17" pos:end="1213:49">(<init pos:start="1213:18" pos:end="1213:23"><expr pos:start="1213:18" pos:end="1213:22"><name pos:start="1213:18" pos:end="1213:18">i</name> <operator pos:start="1213:20" pos:end="1213:20">=</operator> <literal type="number" pos:start="1213:22" pos:end="1213:22">0</literal></expr>;</init> <condition pos:start="1213:25" pos:end="1213:44"><expr pos:start="1213:25" pos:end="1213:43"><name pos:start="1213:25" pos:end="1213:25">i</name> <operator pos:start="1213:27" pos:end="1213:27">&lt;</operator> <name pos:start="1213:29" pos:end="1213:43"><name pos:start="1213:29" pos:end="1213:33">avctx</name><operator pos:start="1213:34" pos:end="1213:35">-&gt;</operator><name pos:start="1213:36" pos:end="1213:43">channels</name></name></expr>;</condition> <incr pos:start="1213:46" pos:end="1213:48"><expr pos:start="1213:46" pos:end="1213:48"><name pos:start="1213:46" pos:end="1213:46">i</name><operator pos:start="1213:47" pos:end="1213:48">++</operator></expr></incr>)</control> <block pos:start="1213:51" pos:end="1219:13">{<block_content pos:start="1215:17" pos:end="1217:59">

                <expr_stmt pos:start="1215:17" pos:end="1215:73"><expr pos:start="1215:17" pos:end="1215:72"><operator pos:start="1215:17" pos:end="1215:17">*</operator><name pos:start="1215:18" pos:end="1215:24">samples</name><operator pos:start="1215:25" pos:end="1215:26">++</operator> <operator pos:start="1215:28" pos:end="1215:28">=</operator> <name pos:start="1215:30" pos:end="1215:41"><name pos:start="1215:30" pos:end="1215:30">c</name><operator pos:start="1215:31" pos:end="1215:32">-&gt;</operator><name pos:start="1215:33" pos:end="1215:38">status</name><index pos:start="1215:39" pos:end="1215:41">[<expr pos:start="1215:40" pos:end="1215:40"><name pos:start="1215:40" pos:end="1215:40">i</name></expr>]</index></name><operator pos:start="1215:42" pos:end="1215:42">.</operator><name pos:start="1215:43" pos:end="1215:51">predictor</name> <operator pos:start="1215:53" pos:end="1215:53">=</operator> <call pos:start="1215:55" pos:end="1215:72"><name pos:start="1215:55" pos:end="1215:63">get_sbits</name><argument_list pos:start="1215:64" pos:end="1215:72">(<argument pos:start="1215:65" pos:end="1215:67"><expr pos:start="1215:65" pos:end="1215:67"><operator pos:start="1215:65" pos:end="1215:65">&amp;</operator><name pos:start="1215:66" pos:end="1215:67">gb</name></expr></argument>, <argument pos:start="1215:70" pos:end="1215:71"><expr pos:start="1215:70" pos:end="1215:71"><literal type="number" pos:start="1215:70" pos:end="1215:71">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1217:17" pos:end="1217:59"><expr pos:start="1217:17" pos:end="1217:58"><name pos:start="1217:17" pos:end="1217:28"><name pos:start="1217:17" pos:end="1217:17">c</name><operator pos:start="1217:18" pos:end="1217:19">-&gt;</operator><name pos:start="1217:20" pos:end="1217:25">status</name><index pos:start="1217:26" pos:end="1217:28">[<expr pos:start="1217:27" pos:end="1217:27"><name pos:start="1217:27" pos:end="1217:27">i</name></expr>]</index></name><operator pos:start="1217:29" pos:end="1217:29">.</operator><name pos:start="1217:30" pos:end="1217:39">step_index</name> <operator pos:start="1217:41" pos:end="1217:41">=</operator> <call pos:start="1217:43" pos:end="1217:58"><name pos:start="1217:43" pos:end="1217:50">get_bits</name><argument_list pos:start="1217:51" pos:end="1217:58">(<argument pos:start="1217:52" pos:end="1217:54"><expr pos:start="1217:52" pos:end="1217:54"><operator pos:start="1217:52" pos:end="1217:52">&amp;</operator><name pos:start="1217:53" pos:end="1217:54">gb</name></expr></argument>, <argument pos:start="1217:57" pos:end="1217:57"><expr pos:start="1217:57" pos:end="1217:57"><literal type="number" pos:start="1217:57" pos:end="1217:57">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <for pos:start="1223:13" pos:end="1283:13">for <control pos:start="1223:17" pos:end="1223:107">(<init pos:start="1223:18" pos:end="1223:27"><expr pos:start="1223:18" pos:end="1223:26"><name pos:start="1223:18" pos:end="1223:22">count</name> <operator pos:start="1223:24" pos:end="1223:24">=</operator> <literal type="number" pos:start="1223:26" pos:end="1223:26">0</literal></expr>;</init> <condition pos:start="1223:29" pos:end="1223:98"><expr pos:start="1223:29" pos:end="1223:97"><call pos:start="1223:29" pos:end="1223:47"><name pos:start="1223:29" pos:end="1223:42">get_bits_count</name><argument_list pos:start="1223:43" pos:end="1223:47">(<argument pos:start="1223:44" pos:end="1223:46"><expr pos:start="1223:44" pos:end="1223:46"><operator pos:start="1223:44" pos:end="1223:44">&amp;</operator><name pos:start="1223:45" pos:end="1223:46">gb</name></expr></argument>)</argument_list></call> <operator pos:start="1223:49" pos:end="1223:50">&lt;=</operator> <name pos:start="1223:52" pos:end="1223:55">size</name> <operator pos:start="1223:57" pos:end="1223:57">-</operator> <name pos:start="1223:59" pos:end="1223:65">nb_bits</name><operator pos:start="1223:66" pos:end="1223:66">*</operator><name pos:start="1223:67" pos:end="1223:81"><name pos:start="1223:67" pos:end="1223:71">avctx</name><operator pos:start="1223:72" pos:end="1223:73">-&gt;</operator><name pos:start="1223:74" pos:end="1223:81">channels</name></name> <operator pos:start="1223:83" pos:end="1223:84">&amp;&amp;</operator> <name pos:start="1223:86" pos:end="1223:90">count</name> <operator pos:start="1223:92" pos:end="1223:92">&lt;</operator> <literal type="number" pos:start="1223:94" pos:end="1223:97">4095</literal></expr>;</condition> <incr pos:start="1223:100" pos:end="1223:106"><expr pos:start="1223:100" pos:end="1223:106"><name pos:start="1223:100" pos:end="1223:104">count</name><operator pos:start="1223:105" pos:end="1223:106">++</operator></expr></incr>)</control> <block pos:start="1223:109" pos:end="1283:13">{<block_content pos:start="1225:17" pos:end="1281:17">

                <decl_stmt pos:start="1225:17" pos:end="1225:22"><decl pos:start="1225:17" pos:end="1225:21"><type pos:start="1225:17" pos:end="1225:19"><name pos:start="1225:17" pos:end="1225:19">int</name></type> <name pos:start="1225:21" pos:end="1225:21">i</name></decl>;</decl_stmt>



                <for pos:start="1229:17" pos:end="1281:17">for <control pos:start="1229:21" pos:end="1229:53">(<init pos:start="1229:22" pos:end="1229:27"><expr pos:start="1229:22" pos:end="1229:26"><name pos:start="1229:22" pos:end="1229:22">i</name> <operator pos:start="1229:24" pos:end="1229:24">=</operator> <literal type="number" pos:start="1229:26" pos:end="1229:26">0</literal></expr>;</init> <condition pos:start="1229:29" pos:end="1229:48"><expr pos:start="1229:29" pos:end="1229:47"><name pos:start="1229:29" pos:end="1229:29">i</name> <operator pos:start="1229:31" pos:end="1229:31">&lt;</operator> <name pos:start="1229:33" pos:end="1229:47"><name pos:start="1229:33" pos:end="1229:37">avctx</name><operator pos:start="1229:38" pos:end="1229:39">-&gt;</operator><name pos:start="1229:40" pos:end="1229:47">channels</name></name></expr>;</condition> <incr pos:start="1229:50" pos:end="1229:52"><expr pos:start="1229:50" pos:end="1229:52"><name pos:start="1229:50" pos:end="1229:50">i</name><operator pos:start="1229:51" pos:end="1229:52">++</operator></expr></incr>)</control> <block pos:start="1229:55" pos:end="1281:17">{<block_content pos:start="1233:21" pos:end="1279:56">

                    <comment type="line" pos:start="1231:21" pos:end="1231:43">// similar to IMA adpcm</comment>

                    <decl_stmt pos:start="1233:21" pos:end="1233:55"><decl pos:start="1233:21" pos:end="1233:54"><type pos:start="1233:21" pos:end="1233:23"><name pos:start="1233:21" pos:end="1233:23">int</name></type> <name pos:start="1233:25" pos:end="1233:29">delta</name> <init pos:start="1233:31" pos:end="1233:54">= <expr pos:start="1233:33" pos:end="1233:54"><call pos:start="1233:33" pos:end="1233:54"><name pos:start="1233:33" pos:end="1233:40">get_bits</name><argument_list pos:start="1233:41" pos:end="1233:54">(<argument pos:start="1233:42" pos:end="1233:44"><expr pos:start="1233:42" pos:end="1233:44"><operator pos:start="1233:42" pos:end="1233:42">&amp;</operator><name pos:start="1233:43" pos:end="1233:44">gb</name></expr></argument>, <argument pos:start="1233:47" pos:end="1233:53"><expr pos:start="1233:47" pos:end="1233:53"><name pos:start="1233:47" pos:end="1233:53">nb_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1235:21" pos:end="1235:76"><decl pos:start="1235:21" pos:end="1235:75"><type pos:start="1235:21" pos:end="1235:23"><name pos:start="1235:21" pos:end="1235:23">int</name></type> <name pos:start="1235:25" pos:end="1235:28">step</name> <init pos:start="1235:30" pos:end="1235:75">= <expr pos:start="1235:32" pos:end="1235:75"><name pos:start="1235:32" pos:end="1235:75"><name pos:start="1235:32" pos:end="1235:50">ff_adpcm_step_table</name><index pos:start="1235:51" pos:end="1235:75">[<expr pos:start="1235:52" pos:end="1235:74"><name pos:start="1235:52" pos:end="1235:63"><name pos:start="1235:52" pos:end="1235:52">c</name><operator pos:start="1235:53" pos:end="1235:54">-&gt;</operator><name pos:start="1235:55" pos:end="1235:60">status</name><index pos:start="1235:61" pos:end="1235:63">[<expr pos:start="1235:62" pos:end="1235:62"><name pos:start="1235:62" pos:end="1235:62">i</name></expr>]</index></name><operator pos:start="1235:64" pos:end="1235:64">.</operator><name pos:start="1235:65" pos:end="1235:74">step_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1237:21" pos:end="1237:36"><decl pos:start="1237:21" pos:end="1237:35"><type pos:start="1237:21" pos:end="1237:24"><name pos:start="1237:21" pos:end="1237:24">long</name></type> <name pos:start="1237:26" pos:end="1237:31">vpdiff</name> <init pos:start="1237:33" pos:end="1237:35">= <expr pos:start="1237:35" pos:end="1237:35"><literal type="number" pos:start="1237:35" pos:end="1237:35">0</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="1237:38" pos:end="1237:67">// vpdiff = (delta+0.5)*step/4</comment>

                    <decl_stmt pos:start="1239:21" pos:end="1239:31"><decl pos:start="1239:21" pos:end="1239:30"><type pos:start="1239:21" pos:end="1239:23"><name pos:start="1239:21" pos:end="1239:23">int</name></type> <name pos:start="1239:25" pos:end="1239:25">k</name> <init pos:start="1239:27" pos:end="1239:30">= <expr pos:start="1239:29" pos:end="1239:30"><name pos:start="1239:29" pos:end="1239:30">k0</name></expr></init></decl>;</decl_stmt>



                    <do pos:start="1243:21" pos:end="1253:31">do <block pos:start="1243:24" pos:end="1253:21">{<block_content pos:start="1245:25" pos:end="1251:32">

                        <if_stmt pos:start="1245:25" pos:end="1247:43"><if pos:start="1245:25" pos:end="1247:43">if <condition pos:start="1245:28" pos:end="1245:38">(<expr pos:start="1245:29" pos:end="1245:37"><name pos:start="1245:29" pos:end="1245:33">delta</name> <operator pos:start="1245:35" pos:end="1245:35">&amp;</operator> <name pos:start="1245:37" pos:end="1245:37">k</name></expr>)</condition><block type="pseudo" pos:start="1247:29" pos:end="1247:43"><block_content pos:start="1247:29" pos:end="1247:43">

                            <expr_stmt pos:start="1247:29" pos:end="1247:43"><expr pos:start="1247:29" pos:end="1247:42"><name pos:start="1247:29" pos:end="1247:34">vpdiff</name> <operator pos:start="1247:36" pos:end="1247:37">+=</operator> <name pos:start="1247:39" pos:end="1247:42">step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1249:25" pos:end="1249:35"><expr pos:start="1249:25" pos:end="1249:34"><name pos:start="1249:25" pos:end="1249:28">step</name> <operator pos:start="1249:30" pos:end="1249:32">&gt;&gt;=</operator> <literal type="number" pos:start="1249:34" pos:end="1249:34">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="1251:25" pos:end="1251:32"><expr pos:start="1251:25" pos:end="1251:31"><name pos:start="1251:25" pos:end="1251:25">k</name> <operator pos:start="1251:27" pos:end="1251:29">&gt;&gt;=</operator> <literal type="number" pos:start="1251:31" pos:end="1251:31">1</literal></expr>;</expr_stmt>

                    </block_content>}</block> while<condition pos:start="1253:28" pos:end="1253:30">(<expr pos:start="1253:29" pos:end="1253:29"><name pos:start="1253:29" pos:end="1253:29">k</name></expr>)</condition>;</do>

                    <expr_stmt pos:start="1255:21" pos:end="1255:35"><expr pos:start="1255:21" pos:end="1255:34"><name pos:start="1255:21" pos:end="1255:26">vpdiff</name> <operator pos:start="1255:28" pos:end="1255:29">+=</operator> <name pos:start="1255:31" pos:end="1255:34">step</name></expr>;</expr_stmt>



                    <if_stmt pos:start="1259:21" pos:end="1265:57"><if pos:start="1259:21" pos:end="1261:57">if <condition pos:start="1259:24" pos:end="1259:41">(<expr pos:start="1259:25" pos:end="1259:40"><name pos:start="1259:25" pos:end="1259:29">delta</name> <operator pos:start="1259:31" pos:end="1259:31">&amp;</operator> <name pos:start="1259:33" pos:end="1259:40">signmask</name></expr>)</condition><block type="pseudo" pos:start="1261:25" pos:end="1261:57"><block_content pos:start="1261:25" pos:end="1261:57">

                        <expr_stmt pos:start="1261:25" pos:end="1261:57"><expr pos:start="1261:25" pos:end="1261:56"><name pos:start="1261:25" pos:end="1261:36"><name pos:start="1261:25" pos:end="1261:25">c</name><operator pos:start="1261:26" pos:end="1261:27">-&gt;</operator><name pos:start="1261:28" pos:end="1261:33">status</name><index pos:start="1261:34" pos:end="1261:36">[<expr pos:start="1261:35" pos:end="1261:35"><name pos:start="1261:35" pos:end="1261:35">i</name></expr>]</index></name><operator pos:start="1261:37" pos:end="1261:37">.</operator><name pos:start="1261:38" pos:end="1261:46">predictor</name> <operator pos:start="1261:48" pos:end="1261:49">-=</operator> <name pos:start="1261:51" pos:end="1261:56">vpdiff</name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1263:21" pos:end="1265:57">else<block type="pseudo" pos:start="1265:25" pos:end="1265:57"><block_content pos:start="1265:25" pos:end="1265:57">

                        <expr_stmt pos:start="1265:25" pos:end="1265:57"><expr pos:start="1265:25" pos:end="1265:56"><name pos:start="1265:25" pos:end="1265:36"><name pos:start="1265:25" pos:end="1265:25">c</name><operator pos:start="1265:26" pos:end="1265:27">-&gt;</operator><name pos:start="1265:28" pos:end="1265:33">status</name><index pos:start="1265:34" pos:end="1265:36">[<expr pos:start="1265:35" pos:end="1265:35"><name pos:start="1265:35" pos:end="1265:35">i</name></expr>]</index></name><operator pos:start="1265:37" pos:end="1265:37">.</operator><name pos:start="1265:38" pos:end="1265:46">predictor</name> <operator pos:start="1265:48" pos:end="1265:49">+=</operator> <name pos:start="1265:51" pos:end="1265:56">vpdiff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <expr_stmt pos:start="1269:21" pos:end="1269:74"><expr pos:start="1269:21" pos:end="1269:73"><name pos:start="1269:21" pos:end="1269:32"><name pos:start="1269:21" pos:end="1269:21">c</name><operator pos:start="1269:22" pos:end="1269:23">-&gt;</operator><name pos:start="1269:24" pos:end="1269:29">status</name><index pos:start="1269:30" pos:end="1269:32">[<expr pos:start="1269:31" pos:end="1269:31"><name pos:start="1269:31" pos:end="1269:31">i</name></expr>]</index></name><operator pos:start="1269:33" pos:end="1269:33">.</operator><name pos:start="1269:34" pos:end="1269:43">step_index</name> <operator pos:start="1269:45" pos:end="1269:46">+=</operator> <name pos:start="1269:48" pos:end="1269:73"><name pos:start="1269:48" pos:end="1269:52">table</name><index pos:start="1269:53" pos:end="1269:73">[<expr pos:start="1269:54" pos:end="1269:72"><name pos:start="1269:54" pos:end="1269:58">delta</name> <operator pos:start="1269:60" pos:end="1269:60">&amp;</operator> <operator pos:start="1269:62" pos:end="1269:62">(</operator><operator pos:start="1269:63" pos:end="1269:63">~</operator><name pos:start="1269:64" pos:end="1269:71">signmask</name><operator pos:start="1269:72" pos:end="1269:72">)</operator></expr>]</index></name></expr>;</expr_stmt>



                    <expr_stmt pos:start="1273:21" pos:end="1273:86"><expr pos:start="1273:21" pos:end="1273:85"><name pos:start="1273:21" pos:end="1273:32"><name pos:start="1273:21" pos:end="1273:21">c</name><operator pos:start="1273:22" pos:end="1273:23">-&gt;</operator><name pos:start="1273:24" pos:end="1273:29">status</name><index pos:start="1273:30" pos:end="1273:32">[<expr pos:start="1273:31" pos:end="1273:31"><name pos:start="1273:31" pos:end="1273:31">i</name></expr>]</index></name><operator pos:start="1273:33" pos:end="1273:33">.</operator><name pos:start="1273:34" pos:end="1273:43">step_index</name> <operator pos:start="1273:45" pos:end="1273:45">=</operator> <call pos:start="1273:47" pos:end="1273:85"><name pos:start="1273:47" pos:end="1273:53">av_clip</name><argument_list pos:start="1273:54" pos:end="1273:85">(<argument pos:start="1273:55" pos:end="1273:77"><expr pos:start="1273:55" pos:end="1273:77"><name pos:start="1273:55" pos:end="1273:66"><name pos:start="1273:55" pos:end="1273:55">c</name><operator pos:start="1273:56" pos:end="1273:57">-&gt;</operator><name pos:start="1273:58" pos:end="1273:63">status</name><index pos:start="1273:64" pos:end="1273:66">[<expr pos:start="1273:65" pos:end="1273:65"><name pos:start="1273:65" pos:end="1273:65">i</name></expr>]</index></name><operator pos:start="1273:67" pos:end="1273:67">.</operator><name pos:start="1273:68" pos:end="1273:77">step_index</name></expr></argument>, <argument pos:start="1273:80" pos:end="1273:80"><expr pos:start="1273:80" pos:end="1273:80"><literal type="number" pos:start="1273:80" pos:end="1273:80">0</literal></expr></argument>, <argument pos:start="1273:83" pos:end="1273:84"><expr pos:start="1273:83" pos:end="1273:84"><literal type="number" pos:start="1273:83" pos:end="1273:84">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1275:21" pos:end="1275:83"><expr pos:start="1275:21" pos:end="1275:82"><name pos:start="1275:21" pos:end="1275:32"><name pos:start="1275:21" pos:end="1275:21">c</name><operator pos:start="1275:22" pos:end="1275:23">-&gt;</operator><name pos:start="1275:24" pos:end="1275:29">status</name><index pos:start="1275:30" pos:end="1275:32">[<expr pos:start="1275:31" pos:end="1275:31"><name pos:start="1275:31" pos:end="1275:31">i</name></expr>]</index></name><operator pos:start="1275:33" pos:end="1275:33">.</operator><name pos:start="1275:34" pos:end="1275:42">predictor</name> <operator pos:start="1275:44" pos:end="1275:44">=</operator> <call pos:start="1275:46" pos:end="1275:82"><name pos:start="1275:46" pos:end="1275:58">av_clip_int16</name><argument_list pos:start="1275:59" pos:end="1275:82">(<argument pos:start="1275:60" pos:end="1275:81"><expr pos:start="1275:60" pos:end="1275:81"><name pos:start="1275:60" pos:end="1275:71"><name pos:start="1275:60" pos:end="1275:60">c</name><operator pos:start="1275:61" pos:end="1275:62">-&gt;</operator><name pos:start="1275:63" pos:end="1275:68">status</name><index pos:start="1275:69" pos:end="1275:71">[<expr pos:start="1275:70" pos:end="1275:70"><name pos:start="1275:70" pos:end="1275:70">i</name></expr>]</index></name><operator pos:start="1275:72" pos:end="1275:72">.</operator><name pos:start="1275:73" pos:end="1275:81">predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="1279:21" pos:end="1279:56"><expr pos:start="1279:21" pos:end="1279:55"><operator pos:start="1279:21" pos:end="1279:21">*</operator><name pos:start="1279:22" pos:end="1279:28">samples</name><operator pos:start="1279:29" pos:end="1279:30">++</operator> <operator pos:start="1279:32" pos:end="1279:32">=</operator> <name pos:start="1279:34" pos:end="1279:45"><name pos:start="1279:34" pos:end="1279:34">c</name><operator pos:start="1279:35" pos:end="1279:36">-&gt;</operator><name pos:start="1279:37" pos:end="1279:42">status</name><index pos:start="1279:43" pos:end="1279:45">[<expr pos:start="1279:44" pos:end="1279:44"><name pos:start="1279:44" pos:end="1279:44">i</name></expr>]</index></name><operator pos:start="1279:46" pos:end="1279:46">.</operator><name pos:start="1279:47" pos:end="1279:55">predictor</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></while>

        <expr_stmt pos:start="1287:9" pos:end="1287:24"><expr pos:start="1287:9" pos:end="1287:23"><name pos:start="1287:9" pos:end="1287:11">src</name> <operator pos:start="1287:13" pos:end="1287:14">+=</operator> <name pos:start="1287:16" pos:end="1287:23">buf_size</name></expr>;</expr_stmt>

        <break pos:start="1289:9" pos:end="1289:14">break;</break>

    </block_content>}</block>

    <case pos:start="1293:5" pos:end="1293:31">case <expr pos:start="1293:10" pos:end="1293:30"><name pos:start="1293:10" pos:end="1293:30">CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>

        <for pos:start="1295:9" pos:end="1303:9">for <control pos:start="1295:13" pos:end="1295:59">(<init pos:start="1295:14" pos:end="1295:40"><expr pos:start="1295:14" pos:end="1295:39"><name pos:start="1295:14" pos:end="1295:14">n</name> <operator pos:start="1295:16" pos:end="1295:16">=</operator> <name pos:start="1295:18" pos:end="1295:27">nb_samples</name> <operator pos:start="1295:29" pos:end="1295:30">&gt;&gt;</operator> <operator pos:start="1295:32" pos:end="1295:32">(</operator><literal type="number" pos:start="1295:33" pos:end="1295:35">1</literal> <operator pos:start="1295:35" pos:end="1295:35">-</operator> <name pos:start="1295:37" pos:end="1295:38">st</name><operator pos:start="1295:39" pos:end="1295:39">)</operator></expr>;</init> <condition pos:start="1295:42" pos:end="1295:47"><expr pos:start="1295:42" pos:end="1295:46"><name pos:start="1295:42" pos:end="1295:42">n</name> <operator pos:start="1295:44" pos:end="1295:44">&gt;</operator> <literal type="number" pos:start="1295:46" pos:end="1295:46">0</literal></expr>;</condition> <incr pos:start="1295:49" pos:end="1295:58"><expr pos:start="1295:49" pos:end="1295:51"><name pos:start="1295:49" pos:end="1295:49">n</name><operator pos:start="1295:50" pos:end="1295:51">--</operator></expr><operator pos:start="1295:52" pos:end="1295:52">,</operator> <expr pos:start="1295:54" pos:end="1295:58"><name pos:start="1295:54" pos:end="1295:56">src</name><operator pos:start="1295:57" pos:end="1295:58">++</operator></expr></incr>)</control> <block pos:start="1295:61" pos:end="1303:9">{<block_content pos:start="1297:13" pos:end="1301:78">

            <decl_stmt pos:start="1297:13" pos:end="1297:29"><decl pos:start="1297:13" pos:end="1297:28"><type pos:start="1297:13" pos:end="1297:19"><name pos:start="1297:13" pos:end="1297:19">uint8_t</name></type> <name pos:start="1297:21" pos:end="1297:21">v</name> <init pos:start="1297:23" pos:end="1297:28">= <expr pos:start="1297:25" pos:end="1297:28"><operator pos:start="1297:25" pos:end="1297:25">*</operator><name pos:start="1297:26" pos:end="1297:28">src</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="1299:13" pos:end="1299:78"><expr pos:start="1299:13" pos:end="1299:77"><operator pos:start="1299:13" pos:end="1299:13">*</operator><name pos:start="1299:14" pos:end="1299:20">samples</name><operator pos:start="1299:21" pos:end="1299:22">++</operator> <operator pos:start="1299:24" pos:end="1299:24">=</operator> <call pos:start="1299:26" pos:end="1299:77"><name pos:start="1299:26" pos:end="1299:51">adpcm_yamaha_expand_nibble</name><argument_list pos:start="1299:52" pos:end="1299:77">(<argument pos:start="1299:53" pos:end="1299:66"><expr pos:start="1299:53" pos:end="1299:66"><operator pos:start="1299:53" pos:end="1299:53">&amp;</operator><name pos:start="1299:54" pos:end="1299:66"><name pos:start="1299:54" pos:end="1299:54">c</name><operator pos:start="1299:55" pos:end="1299:56">-&gt;</operator><name pos:start="1299:57" pos:end="1299:62">status</name><index pos:start="1299:63" pos:end="1299:66">[<expr pos:start="1299:64" pos:end="1299:64"><literal type="number" pos:start="1299:64" pos:end="1299:64">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="1299:69" pos:end="1299:76"><expr pos:start="1299:69" pos:end="1299:76"><name pos:start="1299:69" pos:end="1299:69">v</name> <operator pos:start="1299:71" pos:end="1299:71">&amp;</operator> <literal type="number" pos:start="1299:73" pos:end="1299:76">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1301:13" pos:end="1301:78"><expr pos:start="1301:13" pos:end="1301:77"><operator pos:start="1301:13" pos:end="1301:13">*</operator><name pos:start="1301:14" pos:end="1301:20">samples</name><operator pos:start="1301:21" pos:end="1301:22">++</operator> <operator pos:start="1301:24" pos:end="1301:24">=</operator> <call pos:start="1301:26" pos:end="1301:77"><name pos:start="1301:26" pos:end="1301:51">adpcm_yamaha_expand_nibble</name><argument_list pos:start="1301:52" pos:end="1301:77">(<argument pos:start="1301:53" pos:end="1301:66"><expr pos:start="1301:53" pos:end="1301:66"><operator pos:start="1301:53" pos:end="1301:53">&amp;</operator><name pos:start="1301:54" pos:end="1301:66"><name pos:start="1301:54" pos:end="1301:54">c</name><operator pos:start="1301:55" pos:end="1301:56">-&gt;</operator><name pos:start="1301:57" pos:end="1301:62">status</name><index pos:start="1301:63" pos:end="1301:66">[<expr pos:start="1301:64" pos:end="1301:65"><name pos:start="1301:64" pos:end="1301:65">st</name></expr>]</index></name></expr></argument>, <argument pos:start="1301:69" pos:end="1301:74"><expr pos:start="1301:69" pos:end="1301:74"><name pos:start="1301:69" pos:end="1301:69">v</name> <operator pos:start="1301:71" pos:end="1301:72">&gt;&gt;</operator> <literal type="number" pos:start="1301:74" pos:end="1301:74">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="1305:9" pos:end="1305:14">break;</break>

    <case pos:start="1307:5" pos:end="1307:28">case <expr pos:start="1307:10" pos:end="1307:27"><name pos:start="1307:10" pos:end="1307:27">CODEC_ID_ADPCM_THP</name></expr>:</case>

    <block pos:start="1309:5" pos:end="1397:5">{<block_content pos:start="1311:9" pos:end="1395:14">

        <decl_stmt pos:start="1311:9" pos:end="1311:25"><decl pos:start="1311:9" pos:end="1311:24"><type pos:start="1311:9" pos:end="1311:11"><name pos:start="1311:9" pos:end="1311:11">int</name></type> <name pos:start="1311:13" pos:end="1311:24"><name pos:start="1311:13" pos:end="1311:17">table</name><index pos:start="1311:18" pos:end="1311:20">[<expr pos:start="1311:19" pos:end="1311:19"><literal type="number" pos:start="1311:19" pos:end="1311:19">2</literal></expr>]</index><index pos:start="1311:21" pos:end="1311:24">[<expr pos:start="1311:22" pos:end="1311:23"><literal type="number" pos:start="1311:22" pos:end="1311:23">16</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="1313:9" pos:end="1313:23"><decl pos:start="1313:9" pos:end="1313:22"><type pos:start="1313:9" pos:end="1313:11"><name pos:start="1313:9" pos:end="1313:11">int</name></type> <name pos:start="1313:13" pos:end="1313:22"><name pos:start="1313:13" pos:end="1313:16">prev</name><index pos:start="1313:17" pos:end="1313:19">[<expr pos:start="1313:18" pos:end="1313:18"><literal type="number" pos:start="1313:18" pos:end="1313:18">2</literal></expr>]</index><index pos:start="1313:20" pos:end="1313:22">[<expr pos:start="1313:21" pos:end="1313:21"><literal type="number" pos:start="1313:21" pos:end="1313:21">2</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="1315:9" pos:end="1315:15"><decl pos:start="1315:9" pos:end="1315:14"><type pos:start="1315:9" pos:end="1315:11"><name pos:start="1315:9" pos:end="1315:11">int</name></type> <name pos:start="1315:13" pos:end="1315:14">ch</name></decl>;</decl_stmt>



        <expr_stmt pos:start="1319:9" pos:end="1319:17"><expr pos:start="1319:9" pos:end="1319:16"><name pos:start="1319:9" pos:end="1319:11">src</name> <operator pos:start="1319:13" pos:end="1319:14">+=</operator> <literal type="number" pos:start="1319:16" pos:end="1319:16">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="1319:19" pos:end="1319:38">// skip channel size</comment>

        <expr_stmt pos:start="1321:9" pos:end="1321:17"><expr pos:start="1321:9" pos:end="1321:16"><name pos:start="1321:9" pos:end="1321:11">src</name> <operator pos:start="1321:13" pos:end="1321:14">+=</operator> <literal type="number" pos:start="1321:16" pos:end="1321:16">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="1321:19" pos:end="1321:58">// skip number of samples (already read)</comment>



        <for pos:start="1325:9" pos:end="1327:61">for <control pos:start="1325:13" pos:end="1325:32">(<init pos:start="1325:14" pos:end="1325:19"><expr pos:start="1325:14" pos:end="1325:18"><name pos:start="1325:14" pos:end="1325:14">i</name> <operator pos:start="1325:16" pos:end="1325:16">=</operator> <literal type="number" pos:start="1325:18" pos:end="1325:18">0</literal></expr>;</init> <condition pos:start="1325:21" pos:end="1325:27"><expr pos:start="1325:21" pos:end="1325:26"><name pos:start="1325:21" pos:end="1325:21">i</name> <operator pos:start="1325:23" pos:end="1325:23">&lt;</operator> <literal type="number" pos:start="1325:25" pos:end="1325:26">32</literal></expr>;</condition> <incr pos:start="1325:29" pos:end="1325:31"><expr pos:start="1325:29" pos:end="1325:31"><name pos:start="1325:29" pos:end="1325:29">i</name><operator pos:start="1325:30" pos:end="1325:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1327:13" pos:end="1327:61"><block_content pos:start="1327:13" pos:end="1327:61">

            <expr_stmt pos:start="1327:13" pos:end="1327:61"><expr pos:start="1327:13" pos:end="1327:60"><name pos:start="1327:13" pos:end="1327:23"><name pos:start="1327:13" pos:end="1327:17">table</name><index pos:start="1327:18" pos:end="1327:20">[<expr pos:start="1327:19" pos:end="1327:19"><literal type="number" pos:start="1327:19" pos:end="1327:19">0</literal></expr>]</index><index pos:start="1327:21" pos:end="1327:23">[<expr pos:start="1327:22" pos:end="1327:22"><name pos:start="1327:22" pos:end="1327:22">i</name></expr>]</index></name> <operator pos:start="1327:25" pos:end="1327:25">=</operator> <operator pos:start="1327:27" pos:end="1327:27">(</operator><name pos:start="1327:28" pos:end="1327:34">int16_t</name><operator pos:start="1327:35" pos:end="1327:35">)</operator><call pos:start="1327:36" pos:end="1327:60"><name pos:start="1327:36" pos:end="1327:54">bytestream_get_be16</name><argument_list pos:start="1327:55" pos:end="1327:60">(<argument pos:start="1327:56" pos:end="1327:59"><expr pos:start="1327:56" pos:end="1327:59"><operator pos:start="1327:56" pos:end="1327:56">&amp;</operator><name pos:start="1327:57" pos:end="1327:59">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <comment type="block" pos:start="1331:9" pos:end="1331:46">/* Initialize the previous sample.  */</comment>

        <for pos:start="1333:9" pos:end="1335:60">for <control pos:start="1333:13" pos:end="1333:31">(<init pos:start="1333:14" pos:end="1333:19"><expr pos:start="1333:14" pos:end="1333:18"><name pos:start="1333:14" pos:end="1333:14">i</name> <operator pos:start="1333:16" pos:end="1333:16">=</operator> <literal type="number" pos:start="1333:18" pos:end="1333:18">0</literal></expr>;</init> <condition pos:start="1333:21" pos:end="1333:26"><expr pos:start="1333:21" pos:end="1333:25"><name pos:start="1333:21" pos:end="1333:21">i</name> <operator pos:start="1333:23" pos:end="1333:23">&lt;</operator> <literal type="number" pos:start="1333:25" pos:end="1333:25">4</literal></expr>;</condition> <incr pos:start="1333:28" pos:end="1333:30"><expr pos:start="1333:28" pos:end="1333:30"><name pos:start="1333:28" pos:end="1333:28">i</name><operator pos:start="1333:29" pos:end="1333:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1335:13" pos:end="1335:60"><block_content pos:start="1335:13" pos:end="1335:60">

            <expr_stmt pos:start="1335:13" pos:end="1335:60"><expr pos:start="1335:13" pos:end="1335:59"><name pos:start="1335:13" pos:end="1335:22"><name pos:start="1335:13" pos:end="1335:16">prev</name><index pos:start="1335:17" pos:end="1335:19">[<expr pos:start="1335:18" pos:end="1335:18"><literal type="number" pos:start="1335:18" pos:end="1335:18">0</literal></expr>]</index><index pos:start="1335:20" pos:end="1335:22">[<expr pos:start="1335:21" pos:end="1335:21"><name pos:start="1335:21" pos:end="1335:21">i</name></expr>]</index></name> <operator pos:start="1335:24" pos:end="1335:24">=</operator> <operator pos:start="1335:26" pos:end="1335:26">(</operator><name pos:start="1335:27" pos:end="1335:33">int16_t</name><operator pos:start="1335:34" pos:end="1335:34">)</operator><call pos:start="1335:35" pos:end="1335:59"><name pos:start="1335:35" pos:end="1335:53">bytestream_get_be16</name><argument_list pos:start="1335:54" pos:end="1335:59">(<argument pos:start="1335:55" pos:end="1335:58"><expr pos:start="1335:55" pos:end="1335:58"><operator pos:start="1335:55" pos:end="1335:55">&amp;</operator><name pos:start="1335:56" pos:end="1335:58">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="1339:9" pos:end="1393:9">for <control pos:start="1339:13" pos:end="1339:36">(<init pos:start="1339:14" pos:end="1339:20"><expr pos:start="1339:14" pos:end="1339:19"><name pos:start="1339:14" pos:end="1339:15">ch</name> <operator pos:start="1339:17" pos:end="1339:17">=</operator> <literal type="number" pos:start="1339:19" pos:end="1339:19">0</literal></expr>;</init> <condition pos:start="1339:22" pos:end="1339:30"><expr pos:start="1339:22" pos:end="1339:29"><name pos:start="1339:22" pos:end="1339:23">ch</name> <operator pos:start="1339:25" pos:end="1339:26">&lt;=</operator> <name pos:start="1339:28" pos:end="1339:29">st</name></expr>;</condition> <incr pos:start="1339:32" pos:end="1339:35"><expr pos:start="1339:32" pos:end="1339:35"><name pos:start="1339:32" pos:end="1339:33">ch</name><operator pos:start="1339:34" pos:end="1339:35">++</operator></expr></incr>)</control> <block pos:start="1339:38" pos:end="1393:9">{<block_content pos:start="1341:13" pos:end="1391:13">

            <expr_stmt pos:start="1341:13" pos:end="1341:53"><expr pos:start="1341:13" pos:end="1341:52"><name pos:start="1341:13" pos:end="1341:19">samples</name> <operator pos:start="1341:21" pos:end="1341:21">=</operator> <operator pos:start="1341:23" pos:end="1341:23">(</operator><name pos:start="1341:24" pos:end="1341:28">short</name> <operator pos:start="1341:30" pos:end="1341:30">*</operator><operator pos:start="1341:31" pos:end="1341:31">)</operator><name pos:start="1341:32" pos:end="1341:47"><name pos:start="1341:32" pos:end="1341:32">c</name><operator pos:start="1341:33" pos:end="1341:34">-&gt;</operator><name pos:start="1341:35" pos:end="1341:39">frame</name><operator pos:start="1341:40" pos:end="1341:40">.</operator><name pos:start="1341:41" pos:end="1341:44">data</name><index pos:start="1341:45" pos:end="1341:47">[<expr pos:start="1341:46" pos:end="1341:46"><literal type="number" pos:start="1341:46" pos:end="1341:46">0</literal></expr>]</index></name> <operator pos:start="1341:49" pos:end="1341:49">+</operator> <name pos:start="1341:51" pos:end="1341:52">ch</name></expr>;</expr_stmt>



            <comment type="block" pos:start="1345:13" pos:end="1345:57">/* Read in every sample for this channel.  */</comment>

            <for pos:start="1347:13" pos:end="1391:13">for <control pos:start="1347:17" pos:end="1347:49">(<init pos:start="1347:18" pos:end="1347:23"><expr pos:start="1347:18" pos:end="1347:22"><name pos:start="1347:18" pos:end="1347:18">i</name> <operator pos:start="1347:20" pos:end="1347:20">=</operator> <literal type="number" pos:start="1347:22" pos:end="1347:22">0</literal></expr>;</init> <condition pos:start="1347:25" pos:end="1347:44"><expr pos:start="1347:25" pos:end="1347:43"><name pos:start="1347:25" pos:end="1347:25">i</name> <operator pos:start="1347:27" pos:end="1347:27">&lt;</operator> <name pos:start="1347:29" pos:end="1347:38">nb_samples</name> <operator pos:start="1347:40" pos:end="1347:40">/</operator> <literal type="number" pos:start="1347:42" pos:end="1347:43">14</literal></expr>;</condition> <incr pos:start="1347:46" pos:end="1347:48"><expr pos:start="1347:46" pos:end="1347:48"><name pos:start="1347:46" pos:end="1347:46">i</name><operator pos:start="1347:47" pos:end="1347:48">++</operator></expr></incr>)</control> <block pos:start="1347:51" pos:end="1391:13">{<block_content pos:start="1349:17" pos:end="1389:17">

                <decl_stmt pos:start="1349:17" pos:end="1349:44"><decl pos:start="1349:17" pos:end="1349:43"><type pos:start="1349:17" pos:end="1349:19"><name pos:start="1349:17" pos:end="1349:19">int</name></type> <name pos:start="1349:21" pos:end="1349:25">index</name> <init pos:start="1349:27" pos:end="1349:43">= <expr pos:start="1349:29" pos:end="1349:43"><operator pos:start="1349:29" pos:end="1349:29">(</operator><operator pos:start="1349:30" pos:end="1349:30">*</operator><name pos:start="1349:31" pos:end="1349:33">src</name> <operator pos:start="1349:35" pos:end="1349:36">&gt;&gt;</operator> <literal type="number" pos:start="1349:38" pos:end="1349:38">4</literal><operator pos:start="1349:39" pos:end="1349:39">)</operator> <operator pos:start="1349:41" pos:end="1349:41">&amp;</operator> <literal type="number" pos:start="1349:43" pos:end="1349:43">7</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1351:17" pos:end="1351:47"><decl pos:start="1351:17" pos:end="1351:46"><type pos:start="1351:17" pos:end="1351:28"><name pos:start="1351:17" pos:end="1351:24">unsigned</name> <name pos:start="1351:26" pos:end="1351:28">int</name></type> <name pos:start="1351:30" pos:end="1351:32">exp</name> <init pos:start="1351:34" pos:end="1351:46">= <expr pos:start="1351:36" pos:end="1351:46"><operator pos:start="1351:36" pos:end="1351:36">*</operator><name pos:start="1351:37" pos:end="1351:39">src</name><operator pos:start="1351:40" pos:end="1351:41">++</operator> <operator pos:start="1351:43" pos:end="1351:43">&amp;</operator> <literal type="number" pos:start="1351:45" pos:end="1351:46">15</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1353:17" pos:end="1353:51"><decl pos:start="1353:17" pos:end="1353:50"><type pos:start="1353:17" pos:end="1353:19"><name pos:start="1353:17" pos:end="1353:19">int</name></type> <name pos:start="1353:21" pos:end="1353:27">factor1</name> <init pos:start="1353:29" pos:end="1353:50">= <expr pos:start="1353:31" pos:end="1353:50"><name pos:start="1353:31" pos:end="1353:50"><name pos:start="1353:31" pos:end="1353:35">table</name><index pos:start="1353:36" pos:end="1353:39">[<expr pos:start="1353:37" pos:end="1353:38"><name pos:start="1353:37" pos:end="1353:38">ch</name></expr>]</index><index pos:start="1353:40" pos:end="1353:50">[<expr pos:start="1353:41" pos:end="1353:49"><name pos:start="1353:41" pos:end="1353:45">index</name> <operator pos:start="1353:47" pos:end="1353:47">*</operator> <literal type="number" pos:start="1353:49" pos:end="1353:49">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1355:17" pos:end="1355:55"><decl pos:start="1355:17" pos:end="1355:54"><type pos:start="1355:17" pos:end="1355:19"><name pos:start="1355:17" pos:end="1355:19">int</name></type> <name pos:start="1355:21" pos:end="1355:27">factor2</name> <init pos:start="1355:29" pos:end="1355:54">= <expr pos:start="1355:31" pos:end="1355:54"><name pos:start="1355:31" pos:end="1355:54"><name pos:start="1355:31" pos:end="1355:35">table</name><index pos:start="1355:36" pos:end="1355:39">[<expr pos:start="1355:37" pos:end="1355:38"><name pos:start="1355:37" pos:end="1355:38">ch</name></expr>]</index><index pos:start="1355:40" pos:end="1355:54">[<expr pos:start="1355:41" pos:end="1355:53"><name pos:start="1355:41" pos:end="1355:45">index</name> <operator pos:start="1355:47" pos:end="1355:47">*</operator> <literal type="number" pos:start="1355:49" pos:end="1355:51">2</literal> <operator pos:start="1355:51" pos:end="1355:51">+</operator> <literal type="number" pos:start="1355:53" pos:end="1355:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <comment type="block" pos:start="1359:17" pos:end="1359:41">/* Decode 14 samples.  */</comment>

                <for pos:start="1361:17" pos:end="1389:17">for <control pos:start="1361:21" pos:end="1361:40">(<init pos:start="1361:22" pos:end="1361:27"><expr pos:start="1361:22" pos:end="1361:26"><name pos:start="1361:22" pos:end="1361:22">n</name> <operator pos:start="1361:24" pos:end="1361:24">=</operator> <literal type="number" pos:start="1361:26" pos:end="1361:26">0</literal></expr>;</init> <condition pos:start="1361:29" pos:end="1361:35"><expr pos:start="1361:29" pos:end="1361:34"><name pos:start="1361:29" pos:end="1361:29">n</name> <operator pos:start="1361:31" pos:end="1361:31">&lt;</operator> <literal type="number" pos:start="1361:33" pos:end="1361:34">14</literal></expr>;</condition> <incr pos:start="1361:37" pos:end="1361:39"><expr pos:start="1361:37" pos:end="1361:39"><name pos:start="1361:37" pos:end="1361:37">n</name><operator pos:start="1361:38" pos:end="1361:39">++</operator></expr></incr>)</control> <block pos:start="1361:42" pos:end="1389:17">{<block_content pos:start="1363:21" pos:end="1387:34">

                    <decl_stmt pos:start="1363:21" pos:end="1363:38"><decl pos:start="1363:21" pos:end="1363:37"><type pos:start="1363:21" pos:end="1363:27"><name pos:start="1363:21" pos:end="1363:27">int32_t</name></type> <name pos:start="1363:29" pos:end="1363:37">sampledat</name></decl>;</decl_stmt>

                    <if_stmt pos:start="1365:21" pos:end="1367:66"><if pos:start="1365:21" pos:end="1365:63">if<condition pos:start="1365:23" pos:end="1365:27">(<expr pos:start="1365:24" pos:end="1365:26"><name pos:start="1365:24" pos:end="1365:24">n</name><operator pos:start="1365:25" pos:end="1365:25">&amp;</operator><literal type="number" pos:start="1365:26" pos:end="1365:26">1</literal></expr>)</condition><block type="pseudo" pos:start="1365:29" pos:end="1365:63"><block_content pos:start="1365:29" pos:end="1365:63"> <expr_stmt pos:start="1365:29" pos:end="1365:63"><expr pos:start="1365:29" pos:end="1365:62"><name pos:start="1365:29" pos:end="1365:37">sampledat</name> <operator pos:start="1365:39" pos:end="1365:39">=</operator> <call pos:start="1365:41" pos:end="1365:62"><name pos:start="1365:41" pos:end="1365:51">sign_extend</name><argument_list pos:start="1365:52" pos:end="1365:62">(<argument pos:start="1365:53" pos:end="1365:58"><expr pos:start="1365:53" pos:end="1365:58"><operator pos:start="1365:53" pos:end="1365:53">*</operator><name pos:start="1365:54" pos:end="1365:56">src</name><operator pos:start="1365:57" pos:end="1365:58">++</operator></expr></argument>, <argument pos:start="1365:61" pos:end="1365:61"><expr pos:start="1365:61" pos:end="1365:61"><literal type="number" pos:start="1365:61" pos:end="1365:61">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1367:21" pos:end="1367:66">else<block type="pseudo" pos:start="1367:29" pos:end="1367:66"><block_content pos:start="1367:29" pos:end="1367:66">    <expr_stmt pos:start="1367:29" pos:end="1367:66"><expr pos:start="1367:29" pos:end="1367:65"><name pos:start="1367:29" pos:end="1367:37">sampledat</name> <operator pos:start="1367:39" pos:end="1367:39">=</operator> <call pos:start="1367:41" pos:end="1367:65"><name pos:start="1367:41" pos:end="1367:51">sign_extend</name><argument_list pos:start="1367:52" pos:end="1367:65">(<argument pos:start="1367:53" pos:end="1367:61"><expr pos:start="1367:53" pos:end="1367:61"><operator pos:start="1367:53" pos:end="1367:53">*</operator><name pos:start="1367:54" pos:end="1367:56">src</name> <operator pos:start="1367:58" pos:end="1367:59">&gt;&gt;</operator> <literal type="number" pos:start="1367:61" pos:end="1367:61">4</literal></expr></argument>, <argument pos:start="1367:64" pos:end="1367:64"><expr pos:start="1367:64" pos:end="1367:64"><literal type="number" pos:start="1367:64" pos:end="1367:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <expr_stmt pos:start="1371:21" pos:end="1373:83"><expr pos:start="1371:21" pos:end="1373:82"><name pos:start="1371:21" pos:end="1371:29">sampledat</name> <operator pos:start="1371:31" pos:end="1371:31">=</operator> <operator pos:start="1371:33" pos:end="1371:33">(</operator><operator pos:start="1371:34" pos:end="1371:34">(</operator><name pos:start="1371:35" pos:end="1371:45"><name pos:start="1371:35" pos:end="1371:38">prev</name><index pos:start="1371:39" pos:end="1371:42">[<expr pos:start="1371:40" pos:end="1371:41"><name pos:start="1371:40" pos:end="1371:41">ch</name></expr>]</index><index pos:start="1371:43" pos:end="1371:45">[<expr pos:start="1371:44" pos:end="1371:44"><literal type="number" pos:start="1371:44" pos:end="1371:44">0</literal></expr>]</index></name><operator pos:start="1371:46" pos:end="1371:46">*</operator><name pos:start="1371:47" pos:end="1371:53">factor1</name>

                                <operator pos:start="1373:33" pos:end="1373:33">+</operator> <name pos:start="1373:35" pos:end="1373:45"><name pos:start="1373:35" pos:end="1373:38">prev</name><index pos:start="1373:39" pos:end="1373:42">[<expr pos:start="1373:40" pos:end="1373:41"><name pos:start="1373:40" pos:end="1373:41">ch</name></expr>]</index><index pos:start="1373:43" pos:end="1373:45">[<expr pos:start="1373:44" pos:end="1373:44"><literal type="number" pos:start="1373:44" pos:end="1373:44">1</literal></expr>]</index></name><operator pos:start="1373:46" pos:end="1373:46">*</operator><name pos:start="1373:47" pos:end="1373:53">factor2</name><operator pos:start="1373:54" pos:end="1373:54">)</operator> <operator pos:start="1373:56" pos:end="1373:57">&gt;&gt;</operator> <literal type="number" pos:start="1373:59" pos:end="1373:60">11</literal><operator pos:start="1373:61" pos:end="1373:61">)</operator> <operator pos:start="1373:63" pos:end="1373:63">+</operator> <operator pos:start="1373:65" pos:end="1373:65">(</operator><name pos:start="1373:66" pos:end="1373:74">sampledat</name> <operator pos:start="1373:76" pos:end="1373:77">&lt;&lt;</operator> <name pos:start="1373:79" pos:end="1373:81">exp</name><operator pos:start="1373:82" pos:end="1373:82">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="1375:21" pos:end="1375:56"><expr pos:start="1375:21" pos:end="1375:55"><operator pos:start="1375:21" pos:end="1375:21">*</operator><name pos:start="1375:22" pos:end="1375:28">samples</name> <operator pos:start="1375:30" pos:end="1375:30">=</operator> <call pos:start="1375:32" pos:end="1375:55"><name pos:start="1375:32" pos:end="1375:44">av_clip_int16</name><argument_list pos:start="1375:45" pos:end="1375:55">(<argument pos:start="1375:46" pos:end="1375:54"><expr pos:start="1375:46" pos:end="1375:54"><name pos:start="1375:46" pos:end="1375:54">sampledat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1377:21" pos:end="1377:46"><expr pos:start="1377:21" pos:end="1377:45"><name pos:start="1377:21" pos:end="1377:31"><name pos:start="1377:21" pos:end="1377:24">prev</name><index pos:start="1377:25" pos:end="1377:28">[<expr pos:start="1377:26" pos:end="1377:27"><name pos:start="1377:26" pos:end="1377:27">ch</name></expr>]</index><index pos:start="1377:29" pos:end="1377:31">[<expr pos:start="1377:30" pos:end="1377:30"><literal type="number" pos:start="1377:30" pos:end="1377:30">1</literal></expr>]</index></name> <operator pos:start="1377:33" pos:end="1377:33">=</operator> <name pos:start="1377:35" pos:end="1377:45"><name pos:start="1377:35" pos:end="1377:38">prev</name><index pos:start="1377:39" pos:end="1377:42">[<expr pos:start="1377:40" pos:end="1377:41"><name pos:start="1377:40" pos:end="1377:41">ch</name></expr>]</index><index pos:start="1377:43" pos:end="1377:45">[<expr pos:start="1377:44" pos:end="1377:44"><literal type="number" pos:start="1377:44" pos:end="1377:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1379:21" pos:end="1379:45"><expr pos:start="1379:21" pos:end="1379:44"><name pos:start="1379:21" pos:end="1379:31"><name pos:start="1379:21" pos:end="1379:24">prev</name><index pos:start="1379:25" pos:end="1379:28">[<expr pos:start="1379:26" pos:end="1379:27"><name pos:start="1379:26" pos:end="1379:27">ch</name></expr>]</index><index pos:start="1379:29" pos:end="1379:31">[<expr pos:start="1379:30" pos:end="1379:30"><literal type="number" pos:start="1379:30" pos:end="1379:30">0</literal></expr>]</index></name> <operator pos:start="1379:33" pos:end="1379:33">=</operator> <operator pos:start="1379:35" pos:end="1379:35">*</operator><name pos:start="1379:36" pos:end="1379:42">samples</name><operator pos:start="1379:43" pos:end="1379:44">++</operator></expr>;</expr_stmt>



                    <comment type="block" pos:start="1383:21" pos:end="1385:52">/* In case of stereo, skip one sample, this sample

                       is for the other channel.  */</comment>

                    <expr_stmt pos:start="1387:21" pos:end="1387:34"><expr pos:start="1387:21" pos:end="1387:33"><name pos:start="1387:21" pos:end="1387:27">samples</name> <operator pos:start="1387:29" pos:end="1387:30">+=</operator> <name pos:start="1387:32" pos:end="1387:33">st</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="1395:9" pos:end="1395:14">break;</break>

    </block_content>}</block>



    <default pos:start="1401:5" pos:end="1401:12">default:</default>

        <return pos:start="1403:9" pos:end="1403:18">return <expr pos:start="1403:16" pos:end="1403:17"><operator pos:start="1403:16" pos:end="1403:16">-</operator><literal type="number" pos:start="1403:17" pos:end="1403:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="1409:5" pos:end="1409:25"><expr pos:start="1409:5" pos:end="1409:24"><operator pos:start="1409:5" pos:end="1409:5">*</operator><name pos:start="1409:6" pos:end="1409:18">got_frame_ptr</name>   <operator pos:start="1409:22" pos:end="1409:22">=</operator> <literal type="number" pos:start="1409:24" pos:end="1409:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1411:5" pos:end="1411:32"><expr pos:start="1411:5" pos:end="1411:31"><operator pos:start="1411:5" pos:end="1411:5">*</operator><operator pos:start="1411:6" pos:end="1411:6">(</operator><name pos:start="1411:7" pos:end="1411:13">AVFrame</name> <operator pos:start="1411:15" pos:end="1411:15">*</operator><operator pos:start="1411:16" pos:end="1411:16">)</operator><name pos:start="1411:17" pos:end="1411:20">data</name> <operator pos:start="1411:22" pos:end="1411:22">=</operator> <name pos:start="1411:24" pos:end="1411:31"><name pos:start="1411:24" pos:end="1411:24">c</name><operator pos:start="1411:25" pos:end="1411:26">-&gt;</operator><name pos:start="1411:27" pos:end="1411:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="1415:5" pos:end="1415:21">return <expr pos:start="1415:12" pos:end="1415:20"><name pos:start="1415:12" pos:end="1415:14">src</name> <operator pos:start="1415:16" pos:end="1415:16">-</operator> <name pos:start="1415:18" pos:end="1415:20">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
