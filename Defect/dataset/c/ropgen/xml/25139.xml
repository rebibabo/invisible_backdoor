<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25139.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">long</name></type> <name pos:start="1:6" pos:end="1:23">vnc_client_read_ws</name><parameter_list pos:start="1:24" pos:end="1:37">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:34"><name pos:start="1:25" pos:end="1:32">VncState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:36">vs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:15">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:16">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:20">payload</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:23">payload_size</name></decl>, <decl pos:start="9:26" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:26" pos:end="9:35">frame_size</name></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="13:56"><expr pos:start="11:5" pos:end="13:55"><call pos:start="11:5" pos:end="13:55"><name pos:start="11:5" pos:end="11:13">VNC_DEBUG</name><argument_list pos:start="11:14" pos:end="13:55">(<argument pos:start="11:15" pos:end="11:55"><expr pos:start="11:15" pos:end="11:55"><literal type="string" pos:start="11:15" pos:end="11:55">"Read websocket %p size %zd offset %zd\n"</literal></expr></argument>, <argument pos:start="11:58" pos:end="11:76"><expr pos:start="11:58" pos:end="11:76"><name pos:start="11:58" pos:end="11:76"><name pos:start="11:58" pos:end="11:59">vs</name><operator pos:start="11:60" pos:end="11:61">-&gt;</operator><name pos:start="11:62" pos:end="11:69">ws_input</name><operator pos:start="11:70" pos:end="11:70">.</operator><name pos:start="11:71" pos:end="11:76">buffer</name></name></expr></argument>,

            <argument pos:start="13:13" pos:end="13:33"><expr pos:start="13:13" pos:end="13:33"><name pos:start="13:13" pos:end="13:33"><name pos:start="13:13" pos:end="13:14">vs</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:24">ws_input</name><operator pos:start="13:25" pos:end="13:25">.</operator><name pos:start="13:26" pos:end="13:33">capacity</name></name></expr></argument>, <argument pos:start="13:36" pos:end="13:54"><expr pos:start="13:36" pos:end="13:54"><name pos:start="13:36" pos:end="13:54"><name pos:start="13:36" pos:end="13:37">vs</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:47">ws_input</name><operator pos:start="13:48" pos:end="13:48">.</operator><name pos:start="13:49" pos:end="13:54">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:40"><expr pos:start="15:5" pos:end="15:39"><call pos:start="15:5" pos:end="15:39"><name pos:start="15:5" pos:end="15:18">buffer_reserve</name><argument_list pos:start="15:19" pos:end="15:39">(<argument pos:start="15:20" pos:end="15:32"><expr pos:start="15:20" pos:end="15:32"><operator pos:start="15:20" pos:end="15:20">&amp;</operator><name pos:start="15:21" pos:end="15:32"><name pos:start="15:21" pos:end="15:22">vs</name><operator pos:start="15:23" pos:end="15:24">-&gt;</operator><name pos:start="15:25" pos:end="15:32">ws_input</name></name></expr></argument>, <argument pos:start="15:35" pos:end="15:38"><expr pos:start="15:35" pos:end="15:38"><literal type="number" pos:start="15:35" pos:end="15:38">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:67"><expr pos:start="17:5" pos:end="17:66"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:66"><name pos:start="17:11" pos:end="17:29">vnc_client_read_buf</name><argument_list pos:start="17:30" pos:end="17:66">(<argument pos:start="17:31" pos:end="17:32"><expr pos:start="17:31" pos:end="17:32"><name pos:start="17:31" pos:end="17:32">vs</name></expr></argument>, <argument pos:start="17:35" pos:end="17:59"><expr pos:start="17:35" pos:end="17:59"><call pos:start="17:35" pos:end="17:59"><name pos:start="17:35" pos:end="17:44">buffer_end</name><argument_list pos:start="17:45" pos:end="17:59">(<argument pos:start="17:46" pos:end="17:58"><expr pos:start="17:46" pos:end="17:58"><operator pos:start="17:46" pos:end="17:46">&amp;</operator><name pos:start="17:47" pos:end="17:58"><name pos:start="17:47" pos:end="17:48">vs</name><operator pos:start="17:49" pos:end="17:50">-&gt;</operator><name pos:start="17:51" pos:end="17:58">ws_input</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="17:62" pos:end="17:65"><expr pos:start="17:62" pos:end="17:65"><literal type="number" pos:start="17:62" pos:end="17:65">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:13">(<expr pos:start="19:9" pos:end="19:12"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:12">ret</name></expr>)</condition> <block pos:start="19:15" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:17">

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:6">vs</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:16">ws_input</name><operator pos:start="25:17" pos:end="25:17">.</operator><name pos:start="25:18" pos:end="25:23">offset</name></name> <operator pos:start="25:25" pos:end="25:26">+=</operator> <name pos:start="25:28" pos:end="25:30">ret</name></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:63">/* make sure that nothing is left in the ws_input buffer */</comment>

    <do pos:start="31:5" pos:end="53:38">do <block pos:start="31:8" pos:end="53:5">{<block_content pos:start="33:9" pos:end="51:50">

        <expr_stmt pos:start="33:9" pos:end="35:58"><expr pos:start="33:9" pos:end="35:57"><name pos:start="33:9" pos:end="33:11">err</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="35:57"><name pos:start="33:15" pos:end="33:32">vncws_decode_frame</name><argument_list pos:start="33:33" pos:end="35:57">(<argument pos:start="33:34" pos:end="33:46"><expr pos:start="33:34" pos:end="33:46"><operator pos:start="33:34" pos:end="33:34">&amp;</operator><name pos:start="33:35" pos:end="33:46"><name pos:start="33:35" pos:end="33:36">vs</name><operator pos:start="33:37" pos:end="33:38">-&gt;</operator><name pos:start="33:39" pos:end="33:46">ws_input</name></name></expr></argument>, <argument pos:start="33:49" pos:end="33:56"><expr pos:start="33:49" pos:end="33:56"><operator pos:start="33:49" pos:end="33:49">&amp;</operator><name pos:start="33:50" pos:end="33:56">payload</name></expr></argument>,

                              <argument pos:start="35:31" pos:end="35:43"><expr pos:start="35:31" pos:end="35:43"><operator pos:start="35:31" pos:end="35:31">&amp;</operator><name pos:start="35:32" pos:end="35:43">payload_size</name></expr></argument>, <argument pos:start="35:46" pos:end="35:56"><expr pos:start="35:46" pos:end="35:56"><operator pos:start="35:46" pos:end="35:46">&amp;</operator><name pos:start="35:47" pos:end="35:56">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:21">(<expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:15">err</name> <operator pos:start="37:17" pos:end="37:18">&lt;=</operator> <literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr>)</condition> <block pos:start="37:23" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:23">

            <return pos:start="39:13" pos:end="39:23">return <expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">err</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:49"><expr pos:start="45:9" pos:end="45:48"><call pos:start="45:9" pos:end="45:48"><name pos:start="45:9" pos:end="45:22">buffer_reserve</name><argument_list pos:start="45:23" pos:end="45:48">(<argument pos:start="45:24" pos:end="45:33"><expr pos:start="45:24" pos:end="45:33"><operator pos:start="45:24" pos:end="45:24">&amp;</operator><name pos:start="45:25" pos:end="45:33"><name pos:start="45:25" pos:end="45:26">vs</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:33">input</name></name></expr></argument>, <argument pos:start="45:36" pos:end="45:47"><expr pos:start="45:36" pos:end="45:47"><name pos:start="45:36" pos:end="45:47">payload_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:57"><expr pos:start="47:9" pos:end="47:56"><call pos:start="47:9" pos:end="47:56"><name pos:start="47:9" pos:end="47:21">buffer_append</name><argument_list pos:start="47:22" pos:end="47:56">(<argument pos:start="47:23" pos:end="47:32"><expr pos:start="47:23" pos:end="47:32"><operator pos:start="47:23" pos:end="47:23">&amp;</operator><name pos:start="47:24" pos:end="47:32"><name pos:start="47:24" pos:end="47:25">vs</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:32">input</name></name></expr></argument>, <argument pos:start="47:35" pos:end="47:41"><expr pos:start="47:35" pos:end="47:41"><name pos:start="47:35" pos:end="47:41">payload</name></expr></argument>, <argument pos:start="47:44" pos:end="47:55"><expr pos:start="47:44" pos:end="47:55"><name pos:start="47:44" pos:end="47:55">payload_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:50"><expr pos:start="51:9" pos:end="51:49"><call pos:start="51:9" pos:end="51:49"><name pos:start="51:9" pos:end="51:22">buffer_advance</name><argument_list pos:start="51:23" pos:end="51:49">(<argument pos:start="51:24" pos:end="51:36"><expr pos:start="51:24" pos:end="51:36"><operator pos:start="51:24" pos:end="51:24">&amp;</operator><name pos:start="51:25" pos:end="51:36"><name pos:start="51:25" pos:end="51:26">vs</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:36">ws_input</name></name></expr></argument>, <argument pos:start="51:39" pos:end="51:48"><expr pos:start="51:39" pos:end="51:48"><name pos:start="51:39" pos:end="51:48">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="53:13" pos:end="53:37">(<expr pos:start="53:14" pos:end="53:36"><name pos:start="53:14" pos:end="53:32"><name pos:start="53:14" pos:end="53:15">vs</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:25">ws_input</name><operator pos:start="53:26" pos:end="53:26">.</operator><name pos:start="53:27" pos:end="53:32">offset</name></name> <operator pos:start="53:34" pos:end="53:34">&gt;</operator> <literal type="number" pos:start="53:36" pos:end="53:36">0</literal></expr>)</condition>;</do>



    <return pos:start="57:5" pos:end="57:15">return <expr pos:start="57:12" pos:end="57:14"><name pos:start="57:12" pos:end="57:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
