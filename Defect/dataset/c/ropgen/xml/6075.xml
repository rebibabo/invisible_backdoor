<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6075.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">qmp_x_blockdev_del</name><parameter_list pos:start="1:24" pos:end="3:80">(<parameter pos:start="1:25" pos:end="1:35"><decl pos:start="1:25" pos:end="1:35"><type pos:start="1:25" pos:end="1:35"><name pos:start="1:25" pos:end="1:28">bool</name></type> <name pos:start="1:30" pos:end="1:35">has_id</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:47">char</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">id</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:42"><decl pos:start="3:25" pos:end="3:42"><type pos:start="3:25" pos:end="3:42"><name pos:start="3:25" pos:end="3:28">bool</name></type> <name pos:start="3:30" pos:end="3:42">has_node_name</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:65"><decl pos:start="3:45" pos:end="3:65"><type pos:start="3:45" pos:end="3:65"><specifier pos:start="3:45" pos:end="3:49">const</specifier> <name pos:start="3:51" pos:end="3:54">char</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:65">node_name</name></decl></parameter>, <parameter pos:start="3:68" pos:end="3:79"><decl pos:start="3:68" pos:end="3:79"><type pos:start="3:68" pos:end="3:79"><name pos:start="3:68" pos:end="3:72">Error</name> <modifier pos:start="3:74" pos:end="3:74">*</modifier><modifier pos:start="3:75" pos:end="3:75">*</modifier></type><name pos:start="3:76" pos:end="3:79">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="157:1">{<block_content pos:start="7:5" pos:end="155:37">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">AioContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">BlockBackend</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="27:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:32">(<expr pos:start="15:9" pos:end="15:31"><name pos:start="15:9" pos:end="15:14">has_id</name> <operator pos:start="15:16" pos:end="15:17">&amp;&amp;</operator> <name pos:start="15:19" pos:end="15:31">has_node_name</name></expr>)</condition> <block pos:start="15:34" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:75"><expr pos:start="17:9" pos:end="17:74"><call pos:start="17:9" pos:end="17:74"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="17:74">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>, <argument pos:start="17:26" pos:end="17:73"><expr pos:start="17:26" pos:end="17:73"><literal type="string" pos:start="17:26" pos:end="17:73">"Only one of id and node-name must be specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="21:7" pos:end="27:5">else if <condition pos:start="21:15" pos:end="21:41">(<expr pos:start="21:16" pos:end="21:40"><operator pos:start="21:16" pos:end="21:16">!</operator><name pos:start="21:17" pos:end="21:22">has_id</name> <operator pos:start="21:24" pos:end="21:25">&amp;&amp;</operator> <operator pos:start="21:27" pos:end="21:27">!</operator><name pos:start="21:28" pos:end="21:40">has_node_name</name></expr>)</condition> <block pos:start="21:43" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:54"><expr pos:start="23:9" pos:end="23:53"><call pos:start="23:9" pos:end="23:53"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="23:53">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">errp</name></expr></argument>, <argument pos:start="23:26" pos:end="23:52"><expr pos:start="23:26" pos:end="23:52"><literal type="string" pos:start="23:26" pos:end="23:52">"No block device specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="93:5"><if pos:start="31:5" pos:end="67:5">if <condition pos:start="31:8" pos:end="31:15">(<expr pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:14">has_id</name></expr>)</condition> <block pos:start="31:17" pos:end="67:5">{<block_content pos:start="35:9" pos:end="65:47">

        <comment type="block" pos:start="33:9" pos:end="33:79">/* blk_by_name() never returns a BB that is not owned by the monitor */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:11">blk</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:29"><name pos:start="35:15" pos:end="35:25">blk_by_name</name><argument_list pos:start="35:26" pos:end="35:29">(<argument pos:start="35:27" pos:end="35:28"><expr pos:start="35:27" pos:end="35:28"><name pos:start="35:27" pos:end="35:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:17">(<expr pos:start="37:13" pos:end="37:16"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:16">blk</name></expr>)</condition> <block pos:start="37:19" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:19">

            <expr_stmt pos:start="39:13" pos:end="39:65"><expr pos:start="39:13" pos:end="39:64"><call pos:start="39:13" pos:end="39:64"><name pos:start="39:13" pos:end="39:22">error_setg</name><argument_list pos:start="39:23" pos:end="39:64">(<argument pos:start="39:24" pos:end="39:27"><expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">errp</name></expr></argument>, <argument pos:start="39:30" pos:end="39:59"><expr pos:start="39:30" pos:end="39:59"><literal type="string" pos:start="39:30" pos:end="39:59">"Cannot find block backend %s"</literal></expr></argument>, <argument pos:start="39:62" pos:end="39:63"><expr pos:start="39:62" pos:end="39:63"><name pos:start="39:62" pos:end="39:63">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:34">(<expr pos:start="45:13" pos:end="45:33"><call pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:28">blk_legacy_dinfo</name><argument_list pos:start="45:29" pos:end="45:33">(<argument pos:start="45:30" pos:end="45:32"><expr pos:start="45:30" pos:end="45:32"><name pos:start="45:30" pos:end="45:32">blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:36" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:19">

            <expr_stmt pos:start="47:13" pos:end="49:44"><expr pos:start="47:13" pos:end="49:43"><call pos:start="47:13" pos:end="49:43"><name pos:start="47:13" pos:end="47:22">error_setg</name><argument_list pos:start="47:23" pos:end="49:43">(<argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">errp</name></expr></argument>, <argument pos:start="47:30" pos:end="49:42"><expr pos:start="47:30" pos:end="49:42"><literal type="string" pos:start="47:30" pos:end="47:74">"Deleting block backend added with drive-add"</literal>

                       <literal type="string" pos:start="49:24" pos:end="49:42">" is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:36">(<expr pos:start="55:13" pos:end="55:35"><call pos:start="55:13" pos:end="55:31"><name pos:start="55:13" pos:end="55:26">blk_get_refcnt</name><argument_list pos:start="55:27" pos:end="55:31">(<argument pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:30">blk</name></expr></argument>)</argument_list></call> <operator pos:start="55:33" pos:end="55:33">&gt;</operator> <literal type="number" pos:start="55:35" pos:end="55:35">1</literal></expr>)</condition> <block pos:start="55:38" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:19">

            <expr_stmt pos:start="57:13" pos:end="57:63"><expr pos:start="57:13" pos:end="57:62"><call pos:start="57:13" pos:end="57:62"><name pos:start="57:13" pos:end="57:22">error_setg</name><argument_list pos:start="57:23" pos:end="57:62">(<argument pos:start="57:24" pos:end="57:27"><expr pos:start="57:24" pos:end="57:27"><name pos:start="57:24" pos:end="57:27">errp</name></expr></argument>, <argument pos:start="57:30" pos:end="57:57"><expr pos:start="57:30" pos:end="57:57"><literal type="string" pos:start="57:30" pos:end="57:57">"Block backend %s is in use"</literal></expr></argument>, <argument pos:start="57:60" pos:end="57:61"><expr pos:start="57:60" pos:end="57:61"><name pos:start="57:60" pos:end="57:61">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:25"><expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:10">bs</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:24"><name pos:start="63:14" pos:end="63:19">blk_bs</name><argument_list pos:start="63:20" pos:end="63:24">(<argument pos:start="63:21" pos:end="63:23"><expr pos:start="63:21" pos:end="63:23"><name pos:start="63:21" pos:end="63:23">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:47"><expr pos:start="65:9" pos:end="65:46"><name pos:start="65:9" pos:end="65:19">aio_context</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="65:46"><name pos:start="65:23" pos:end="65:41">blk_get_aio_context</name><argument_list pos:start="65:42" pos:end="65:46">(<argument pos:start="65:43" pos:end="65:45"><expr pos:start="65:43" pos:end="65:45"><name pos:start="65:43" pos:end="65:45">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="93:5">else <block pos:start="67:12" pos:end="93:5">{<block_content pos:start="69:9" pos:end="91:47">

        <expr_stmt pos:start="69:9" pos:end="69:19"><expr pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:11">blk</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <name pos:start="69:15" pos:end="69:18">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:39"><expr pos:start="71:9" pos:end="71:38"><name pos:start="71:9" pos:end="71:10">bs</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <call pos:start="71:14" pos:end="71:38"><name pos:start="71:14" pos:end="71:27">bdrv_find_node</name><argument_list pos:start="71:28" pos:end="71:38">(<argument pos:start="71:29" pos:end="71:37"><expr pos:start="71:29" pos:end="71:37"><name pos:start="71:29" pos:end="71:37">node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:16">(<expr pos:start="73:13" pos:end="73:15"><operator pos:start="73:13" pos:end="73:13">!</operator><name pos:start="73:14" pos:end="73:15">bs</name></expr>)</condition> <block pos:start="73:18" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:19">

            <expr_stmt pos:start="75:13" pos:end="75:63"><expr pos:start="75:13" pos:end="75:62"><call pos:start="75:13" pos:end="75:62"><name pos:start="75:13" pos:end="75:22">error_setg</name><argument_list pos:start="75:23" pos:end="75:62">(<argument pos:start="75:24" pos:end="75:27"><expr pos:start="75:24" pos:end="75:27"><name pos:start="75:24" pos:end="75:27">errp</name></expr></argument>, <argument pos:start="75:30" pos:end="75:50"><expr pos:start="75:30" pos:end="75:50"><literal type="string" pos:start="75:30" pos:end="75:50">"Cannot find node %s"</literal></expr></argument>, <argument pos:start="75:53" pos:end="75:61"><expr pos:start="75:53" pos:end="75:61"><name pos:start="75:53" pos:end="75:61">node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="89:9">if <condition pos:start="81:12" pos:end="81:29">(<expr pos:start="81:13" pos:end="81:28"><call pos:start="81:13" pos:end="81:28"><name pos:start="81:13" pos:end="81:24">bdrv_has_blk</name><argument_list pos:start="81:25" pos:end="81:28">(<argument pos:start="81:26" pos:end="81:27"><expr pos:start="81:26" pos:end="81:27"><name pos:start="81:26" pos:end="81:27">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:31" pos:end="89:9">{<block_content pos:start="83:13" pos:end="87:19">

            <expr_stmt pos:start="83:13" pos:end="85:60"><expr pos:start="83:13" pos:end="85:59"><call pos:start="83:13" pos:end="85:59"><name pos:start="83:13" pos:end="83:22">error_setg</name><argument_list pos:start="83:23" pos:end="85:59">(<argument pos:start="83:24" pos:end="83:27"><expr pos:start="83:24" pos:end="83:27"><name pos:start="83:24" pos:end="83:27">errp</name></expr></argument>, <argument pos:start="83:30" pos:end="83:54"><expr pos:start="83:30" pos:end="83:54"><literal type="string" pos:start="83:30" pos:end="83:54">"Node %s is in use by %s"</literal></expr></argument>,

                       <argument pos:start="85:24" pos:end="85:32"><expr pos:start="85:24" pos:end="85:32"><name pos:start="85:24" pos:end="85:32">node_name</name></expr></argument>, <argument pos:start="85:35" pos:end="85:58"><expr pos:start="85:35" pos:end="85:58"><call pos:start="85:35" pos:end="85:58"><name pos:start="85:35" pos:end="85:54">bdrv_get_parent_name</name><argument_list pos:start="85:55" pos:end="85:58">(<argument pos:start="85:56" pos:end="85:57"><expr pos:start="85:56" pos:end="85:57"><name pos:start="85:56" pos:end="85:57">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:47"><expr pos:start="91:9" pos:end="91:46"><name pos:start="91:9" pos:end="91:19">aio_context</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <call pos:start="91:23" pos:end="91:46"><name pos:start="91:23" pos:end="91:42">bdrv_get_aio_context</name><argument_list pos:start="91:43" pos:end="91:46">(<argument pos:start="91:44" pos:end="91:45"><expr pos:start="91:44" pos:end="91:45"><name pos:start="91:44" pos:end="91:45">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:37"><expr pos:start="97:5" pos:end="97:36"><call pos:start="97:5" pos:end="97:36"><name pos:start="97:5" pos:end="97:23">aio_context_acquire</name><argument_list pos:start="97:24" pos:end="97:36">(<argument pos:start="97:25" pos:end="97:35"><expr pos:start="97:25" pos:end="97:35"><name pos:start="97:25" pos:end="97:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="101:5" pos:end="133:5"><if pos:start="101:5" pos:end="133:5">if <condition pos:start="101:8" pos:end="101:11">(<expr pos:start="101:9" pos:end="101:10"><name pos:start="101:9" pos:end="101:10">bs</name></expr>)</condition> <block pos:start="101:13" pos:end="133:5">{<block_content pos:start="103:9" pos:end="131:9">

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:66">(<expr pos:start="103:13" pos:end="103:65"><call pos:start="103:13" pos:end="103:65"><name pos:start="103:13" pos:end="103:30">bdrv_op_is_blocked</name><argument_list pos:start="103:31" pos:end="103:65">(<argument pos:start="103:32" pos:end="103:33"><expr pos:start="103:32" pos:end="103:33"><name pos:start="103:32" pos:end="103:33">bs</name></expr></argument>, <argument pos:start="103:36" pos:end="103:58"><expr pos:start="103:36" pos:end="103:58"><name pos:start="103:36" pos:end="103:58">BLOCK_OP_TYPE_DRIVE_DEL</name></expr></argument>, <argument pos:start="103:61" pos:end="103:64"><expr pos:start="103:61" pos:end="103:64"><name pos:start="103:61" pos:end="103:64">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:68" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:21">

            <goto pos:start="105:13" pos:end="105:21">goto <name pos:start="105:18" pos:end="105:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="111:9" pos:end="119:9"><if pos:start="111:9" pos:end="119:9">if <condition pos:start="111:12" pos:end="111:47">(<expr pos:start="111:13" pos:end="111:46"><operator pos:start="111:13" pos:end="111:13">!</operator><name pos:start="111:14" pos:end="111:16">blk</name> <operator pos:start="111:18" pos:end="111:19">&amp;&amp;</operator> <operator pos:start="111:21" pos:end="111:21">!</operator><name pos:start="111:22" pos:end="111:46"><name pos:start="111:22" pos:end="111:23">bs</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:37">monitor_list</name><operator pos:start="111:38" pos:end="111:38">.</operator><name pos:start="111:39" pos:end="111:46">tqe_prev</name></name></expr>)</condition> <block pos:start="111:49" pos:end="119:9">{<block_content pos:start="113:13" pos:end="117:21">

            <expr_stmt pos:start="113:13" pos:end="115:38"><expr pos:start="113:13" pos:end="115:37"><call pos:start="113:13" pos:end="115:37"><name pos:start="113:13" pos:end="113:22">error_setg</name><argument_list pos:start="113:23" pos:end="115:37">(<argument pos:start="113:24" pos:end="113:27"><expr pos:start="113:24" pos:end="113:27"><name pos:start="113:24" pos:end="113:27">errp</name></expr></argument>, <argument pos:start="113:30" pos:end="113:66"><expr pos:start="113:30" pos:end="113:66"><literal type="string" pos:start="113:30" pos:end="113:66">"Node %s is not owned by the monitor"</literal></expr></argument>,

                       <argument pos:start="115:24" pos:end="115:36"><expr pos:start="115:24" pos:end="115:36"><name pos:start="115:24" pos:end="115:36"><name pos:start="115:24" pos:end="115:25">bs</name><operator pos:start="115:26" pos:end="115:27">-&gt;</operator><name pos:start="115:28" pos:end="115:36">node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="117:13" pos:end="117:21">goto <name pos:start="117:18" pos:end="117:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="123:9" pos:end="131:9"><if pos:start="123:9" pos:end="131:9">if <condition pos:start="123:12" pos:end="123:27">(<expr pos:start="123:13" pos:end="123:26"><name pos:start="123:13" pos:end="123:22"><name pos:start="123:13" pos:end="123:14">bs</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:22">refcnt</name></name> <operator pos:start="123:24" pos:end="123:24">&gt;</operator> <literal type="number" pos:start="123:26" pos:end="123:26">1</literal></expr>)</condition> <block pos:start="123:29" pos:end="131:9">{<block_content pos:start="125:13" pos:end="129:21">

            <expr_stmt pos:start="125:13" pos:end="127:57"><expr pos:start="125:13" pos:end="127:56"><call pos:start="125:13" pos:end="127:56"><name pos:start="125:13" pos:end="125:22">error_setg</name><argument_list pos:start="125:23" pos:end="127:56">(<argument pos:start="125:24" pos:end="125:27"><expr pos:start="125:24" pos:end="125:27"><name pos:start="125:24" pos:end="125:27">errp</name></expr></argument>, <argument pos:start="125:30" pos:end="125:56"><expr pos:start="125:30" pos:end="125:56"><literal type="string" pos:start="125:30" pos:end="125:56">"Block device %s is in use"</literal></expr></argument>,

                       <argument pos:start="127:24" pos:end="127:55"><expr pos:start="127:24" pos:end="127:55"><call pos:start="127:24" pos:end="127:55"><name pos:start="127:24" pos:end="127:51">bdrv_get_device_or_node_name</name><argument_list pos:start="127:52" pos:end="127:55">(<argument pos:start="127:53" pos:end="127:54"><expr pos:start="127:53" pos:end="127:54"><name pos:start="127:53" pos:end="127:54">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:21">goto <name pos:start="129:18" pos:end="129:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="149:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:12">(<expr pos:start="137:9" pos:end="137:11"><name pos:start="137:9" pos:end="137:11">blk</name></expr>)</condition> <block pos:start="137:14" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:23">

        <expr_stmt pos:start="139:9" pos:end="139:32"><expr pos:start="139:9" pos:end="139:31"><call pos:start="139:9" pos:end="139:31"><name pos:start="139:9" pos:end="139:26">monitor_remove_blk</name><argument_list pos:start="139:27" pos:end="139:31">(<argument pos:start="139:28" pos:end="139:30"><expr pos:start="139:28" pos:end="139:30"><name pos:start="139:28" pos:end="139:30">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:23"><expr pos:start="141:9" pos:end="141:22"><call pos:start="141:9" pos:end="141:22"><name pos:start="141:9" pos:end="141:17">blk_unref</name><argument_list pos:start="141:18" pos:end="141:22">(<argument pos:start="141:19" pos:end="141:21"><expr pos:start="141:19" pos:end="141:21"><name pos:start="141:19" pos:end="141:21">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="143:7" pos:end="149:5">else <block pos:start="143:12" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:23">

        <expr_stmt pos:start="145:9" pos:end="145:62"><expr pos:start="145:9" pos:end="145:61"><call pos:start="145:9" pos:end="145:61"><name pos:start="145:9" pos:end="145:21">QTAILQ_REMOVE</name><argument_list pos:start="145:22" pos:end="145:61">(<argument pos:start="145:23" pos:end="145:42"><expr pos:start="145:23" pos:end="145:42"><operator pos:start="145:23" pos:end="145:23">&amp;</operator><name pos:start="145:24" pos:end="145:42">monitor_bdrv_states</name></expr></argument>, <argument pos:start="145:45" pos:end="145:46"><expr pos:start="145:45" pos:end="145:46"><name pos:start="145:45" pos:end="145:46">bs</name></expr></argument>, <argument pos:start="145:49" pos:end="145:60"><expr pos:start="145:49" pos:end="145:60"><name pos:start="145:49" pos:end="145:60">monitor_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:23"><expr pos:start="147:9" pos:end="147:22"><call pos:start="147:9" pos:end="147:22"><name pos:start="147:9" pos:end="147:18">bdrv_unref</name><argument_list pos:start="147:19" pos:end="147:22">(<argument pos:start="147:20" pos:end="147:21"><expr pos:start="147:20" pos:end="147:21"><name pos:start="147:20" pos:end="147:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="153:1" pos:end="153:4"><name pos:start="153:1" pos:end="153:3">out</name>:</label>

    <expr_stmt pos:start="155:5" pos:end="155:37"><expr pos:start="155:5" pos:end="155:36"><call pos:start="155:5" pos:end="155:36"><name pos:start="155:5" pos:end="155:23">aio_context_release</name><argument_list pos:start="155:24" pos:end="155:36">(<argument pos:start="155:25" pos:end="155:35"><expr pos:start="155:25" pos:end="155:35"><name pos:start="155:25" pos:end="155:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
