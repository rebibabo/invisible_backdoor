<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6177.c" pos:tabs="8"><function pos:start="1:1" pos:end="335:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:26">gem_receive</name><parameter_list pos:start="1:27" pos:end="1:80">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:42">VLANClientState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">nc</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:61">uint8_t</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">buf</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:79"><decl pos:start="1:69" pos:end="1:79"><type pos:start="1:69" pos:end="1:79"><name pos:start="1:69" pos:end="1:74">size_t</name></type> <name pos:start="1:76" pos:end="1:79">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="335:1">{<block_content pos:start="5:5" pos:end="333:16">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">unsigned</name></type>    <name pos:start="5:17" pos:end="5:23"><name pos:start="5:17" pos:end="5:20">desc</name><index pos:start="5:21" pos:end="5:23">[<expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22">target_phys_addr_t</name></type> <name pos:start="7:24" pos:end="7:39">packet_desc_addr</name></decl>, <decl pos:start="7:42" pos:end="7:55"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:42" pos:end="7:55">last_desc_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">GemState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type>   <name pos:start="11:16" pos:end="11:24">rxbufsize</name></decl>, <decl pos:start="11:27" pos:end="11:39"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:27" pos:end="11:39">bytes_to_copy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type>   <name pos:start="13:16" pos:end="13:27">rxbuf_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type>    <name pos:start="15:16" pos:end="15:26"><name pos:start="15:16" pos:end="15:20">rxbuf</name><index pos:start="15:21" pos:end="15:26">[<expr pos:start="15:22" pos:end="15:25"><literal type="number" pos:start="15:22" pos:end="15:25">2048</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:11">uint8_t</name>   <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:24">rxbuf_ptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:5">s</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <call pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:17">DO_UPCAST</name><argument_list pos:start="21:18" pos:end="21:35">(<argument pos:start="21:19" pos:end="21:26"><expr pos:start="21:19" pos:end="21:26"><name pos:start="21:19" pos:end="21:26">NICState</name></expr></argument>, <argument pos:start="21:29" pos:end="21:30"><expr pos:start="21:29" pos:end="21:30"><name pos:start="21:29" pos:end="21:30">nc</name></expr></argument>, <argument pos:start="21:33" pos:end="21:34"><expr pos:start="21:33" pos:end="21:34"><name pos:start="21:33" pos:end="21:34">nc</name></expr></argument>)</argument_list></call><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:43">opaque</name></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:47">/* Do nothing if receive is not enabled. */</comment>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:50">(<expr pos:start="27:9" pos:end="27:49"><operator pos:start="27:9" pos:end="27:9">!</operator><operator pos:start="27:10" pos:end="27:10">(</operator><name pos:start="27:11" pos:end="27:29"><name pos:start="27:11" pos:end="27:11">s</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:17">regs</name><index pos:start="27:18" pos:end="27:29">[<expr pos:start="27:19" pos:end="27:28"><name pos:start="27:19" pos:end="27:28">GEM_NWCTRL</name></expr>]</index></name> <operator pos:start="27:31" pos:end="27:31">&amp;</operator> <name pos:start="27:33" pos:end="27:48">GEM_NWCTRL_RXENA</name><operator pos:start="27:49" pos:end="27:49">)</operator></expr>)</condition> <block pos:start="27:52" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:18">

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:52">/* Is this destination MAC address "for us" ? */</comment>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:56">(<expr pos:start="37:9" pos:end="37:55"><call pos:start="37:9" pos:end="37:38"><name pos:start="37:9" pos:end="37:30">gem_mac_address_filter</name><argument_list pos:start="37:31" pos:end="37:38">(<argument pos:start="37:32" pos:end="37:32"><expr pos:start="37:32" pos:end="37:32"><name pos:start="37:32" pos:end="37:32">s</name></expr></argument>, <argument pos:start="37:35" pos:end="37:37"><expr pos:start="37:35" pos:end="37:37"><name pos:start="37:35" pos:end="37:37">buf</name></expr></argument>)</argument_list></call> <operator pos:start="37:40" pos:end="37:41">==</operator> <name pos:start="37:43" pos:end="37:55">GEM_RX_REJECT</name></expr>)</condition> <block pos:start="37:58" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:18">

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:61">/* Discard packets with receive length error enabled ? */</comment>

    <if_stmt pos:start="47:5" pos:end="71:5"><if pos:start="47:5" pos:end="71:5">if <condition pos:start="47:8" pos:end="47:49">(<expr pos:start="47:9" pos:end="47:48"><name pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:15">regs</name><index pos:start="47:16" pos:end="47:26">[<expr pos:start="47:17" pos:end="47:25"><name pos:start="47:17" pos:end="47:25">GEM_NWCFG</name></expr>]</index></name> <operator pos:start="47:28" pos:end="47:28">&amp;</operator> <name pos:start="47:30" pos:end="47:48">GEM_NWCFG_LERR_DISC</name></expr>)</condition> <block pos:start="47:51" pos:end="71:5">{<block_content pos:start="49:9" pos:end="69:9">

        <decl_stmt pos:start="49:9" pos:end="49:26"><decl pos:start="49:9" pos:end="49:25"><type pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">unsigned</name></type> <name pos:start="49:18" pos:end="49:25">type_len</name></decl>;</decl_stmt>



        <comment type="block" pos:start="53:9" pos:end="53:68">/* Fish the ethertype / length field out of the RX packet */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:42"><expr pos:start="55:9" pos:end="55:41"><name pos:start="55:9" pos:end="55:16">type_len</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:26"><name pos:start="55:20" pos:end="55:22">buf</name><index pos:start="55:23" pos:end="55:26">[<expr pos:start="55:24" pos:end="55:25"><literal type="number" pos:start="55:24" pos:end="55:25">12</literal></expr>]</index></name> <operator pos:start="55:28" pos:end="55:29">&lt;&lt;</operator> <literal type="number" pos:start="55:31" pos:end="55:31">8</literal> <operator pos:start="55:33" pos:end="55:33">|</operator> <name pos:start="55:35" pos:end="55:41"><name pos:start="55:35" pos:end="55:37">buf</name><index pos:start="55:38" pos:end="55:41">[<expr pos:start="55:39" pos:end="55:40"><literal type="number" pos:start="55:39" pos:end="55:40">13</literal></expr>]</index></name></expr>;</expr_stmt>

        <comment type="block" pos:start="57:9" pos:end="57:52">/* It is a length field, not an ethertype */</comment>

        <if_stmt pos:start="59:9" pos:end="69:9"><if pos:start="59:9" pos:end="69:9">if <condition pos:start="59:12" pos:end="59:29">(<expr pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:20">type_len</name> <operator pos:start="59:22" pos:end="59:22">&lt;</operator> <literal type="number" pos:start="59:24" pos:end="59:28">0x600</literal></expr>)</condition> <block pos:start="59:31" pos:end="69:9">{<block_content pos:start="61:13" pos:end="67:13">

            <if_stmt pos:start="61:13" pos:end="67:13"><if pos:start="61:13" pos:end="67:13">if <condition pos:start="61:16" pos:end="61:32">(<expr pos:start="61:17" pos:end="61:31"><name pos:start="61:17" pos:end="61:20">size</name> <operator pos:start="61:22" pos:end="61:22">&lt;</operator> <name pos:start="61:24" pos:end="61:31">type_len</name></expr>)</condition> <block pos:start="61:34" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:26">

                <comment type="block" pos:start="63:17" pos:end="63:29">/* discard */</comment>

                <return pos:start="65:17" pos:end="65:26">return <expr pos:start="65:24" pos:end="65:25"><operator pos:start="65:24" pos:end="65:24">-</operator><literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="79:7">/*

     * Determine configured receive buffer offset (probably 0)

     */</comment>

    <expr_stmt pos:start="81:5" pos:end="83:41"><expr pos:start="81:5" pos:end="83:40"><name pos:start="81:5" pos:end="81:16">rxbuf_offset</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <operator pos:start="81:20" pos:end="81:20">(</operator><name pos:start="81:21" pos:end="81:38"><name pos:start="81:21" pos:end="81:21">s</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:27">regs</name><index pos:start="81:28" pos:end="81:38">[<expr pos:start="81:29" pos:end="81:37"><name pos:start="81:29" pos:end="81:37">GEM_NWCFG</name></expr>]</index></name> <operator pos:start="81:40" pos:end="81:40">&amp;</operator> <name pos:start="81:42" pos:end="81:62">GEM_NWCFG_BUFF_OFST_M</name><operator pos:start="81:63" pos:end="81:63">)</operator> <operator pos:start="81:65" pos:end="81:66">&gt;&gt;</operator>

                   <name pos:start="83:20" pos:end="83:40">GEM_NWCFG_BUFF_OFST_S</name></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="91:7">/* The configure size of each receive buffer.  Determines how many

     * buffers needed to hold this packet.

     */</comment>

    <expr_stmt pos:start="93:5" pos:end="95:62"><expr pos:start="93:5" pos:end="95:61"><name pos:start="93:5" pos:end="93:13">rxbufsize</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <operator pos:start="93:17" pos:end="93:17">(</operator><operator pos:start="93:18" pos:end="93:18">(</operator><name pos:start="93:19" pos:end="93:37"><name pos:start="93:19" pos:end="93:19">s</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:25">regs</name><index pos:start="93:26" pos:end="93:37">[<expr pos:start="93:27" pos:end="93:36"><name pos:start="93:27" pos:end="93:36">GEM_DMACFG</name></expr>]</index></name> <operator pos:start="93:39" pos:end="93:39">&amp;</operator> <name pos:start="93:41" pos:end="93:59">GEM_DMACFG_RBUFSZ_M</name><operator pos:start="93:60" pos:end="93:60">)</operator> <operator pos:start="93:62" pos:end="93:63">&gt;&gt;</operator>

                 <name pos:start="95:18" pos:end="95:36">GEM_DMACFG_RBUFSZ_S</name><operator pos:start="95:37" pos:end="95:37">)</operator> <operator pos:start="95:39" pos:end="95:39">*</operator> <name pos:start="95:41" pos:end="95:61">GEM_DMACFG_RBUFSZ_MUL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:25"><expr pos:start="97:5" pos:end="97:24"><name pos:start="97:5" pos:end="97:17">bytes_to_copy</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:24">size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:44">/* Strip of FCS field ? (usually yes) */</comment>

    <if_stmt pos:start="103:5" pos:end="149:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:49">(<expr pos:start="103:9" pos:end="103:48"><name pos:start="103:9" pos:end="103:26"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:15">regs</name><index pos:start="103:16" pos:end="103:26">[<expr pos:start="103:17" pos:end="103:25"><name pos:start="103:17" pos:end="103:25">GEM_NWCFG</name></expr>]</index></name> <operator pos:start="103:28" pos:end="103:28">&amp;</operator> <name pos:start="103:30" pos:end="103:48">GEM_NWCFG_STRIP_FCS</name></expr>)</condition> <block pos:start="103:51" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:32">

        <expr_stmt pos:start="105:9" pos:end="105:32"><expr pos:start="105:9" pos:end="105:31"><name pos:start="105:9" pos:end="105:17">rxbuf_ptr</name> <operator pos:start="105:19" pos:end="105:19">=</operator> <operator pos:start="105:21" pos:end="105:21">(</operator><name pos:start="105:22" pos:end="105:25">void</name> <operator pos:start="105:27" pos:end="105:27">*</operator><operator pos:start="105:28" pos:end="105:28">)</operator><name pos:start="105:29" pos:end="105:31">buf</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="149:5">else <block pos:start="107:12" pos:end="149:5">{<block_content pos:start="109:9" pos:end="147:18">

        <decl_stmt pos:start="109:9" pos:end="109:25"><decl pos:start="109:9" pos:end="109:24"><type pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:16">unsigned</name></type> <name pos:start="109:18" pos:end="109:24">crc_val</name></decl>;</decl_stmt>

        <decl_stmt pos:start="111:9" pos:end="111:28"><decl pos:start="111:9" pos:end="111:27"><type pos:start="111:9" pos:end="111:11"><name pos:start="111:9" pos:end="111:11">int</name></type>      <name pos:start="111:18" pos:end="111:27">crc_offset</name></decl>;</decl_stmt>



        <comment type="block" pos:start="115:9" pos:end="119:11">/* The application wants the FCS field, which QEMU does not provide.

         * We must try and caclculate one.

         */</comment>



        <expr_stmt pos:start="123:9" pos:end="123:33"><expr pos:start="123:9" pos:end="123:32"><call pos:start="123:9" pos:end="123:32"><name pos:start="123:9" pos:end="123:14">memcpy</name><argument_list pos:start="123:15" pos:end="123:32">(<argument pos:start="123:16" pos:end="123:20"><expr pos:start="123:16" pos:end="123:20"><name pos:start="123:16" pos:end="123:20">rxbuf</name></expr></argument>, <argument pos:start="123:23" pos:end="123:25"><expr pos:start="123:23" pos:end="123:25"><name pos:start="123:23" pos:end="123:25">buf</name></expr></argument>, <argument pos:start="123:28" pos:end="123:31"><expr pos:start="123:28" pos:end="123:31"><name pos:start="123:28" pos:end="123:31">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:54"><expr pos:start="125:9" pos:end="125:53"><call pos:start="125:9" pos:end="125:53"><name pos:start="125:9" pos:end="125:14">memset</name><argument_list pos:start="125:15" pos:end="125:53">(<argument pos:start="125:16" pos:end="125:27"><expr pos:start="125:16" pos:end="125:27"><name pos:start="125:16" pos:end="125:20">rxbuf</name> <operator pos:start="125:22" pos:end="125:22">+</operator> <name pos:start="125:24" pos:end="125:27">size</name></expr></argument>, <argument pos:start="125:30" pos:end="125:30"><expr pos:start="125:30" pos:end="125:30"><literal type="number" pos:start="125:30" pos:end="125:30">0</literal></expr></argument>, <argument pos:start="125:33" pos:end="125:52"><expr pos:start="125:33" pos:end="125:52"><sizeof pos:start="125:33" pos:end="125:52">sizeof<argument_list pos:start="125:39" pos:end="125:52">(<argument pos:start="125:40" pos:end="125:51"><expr pos:start="125:40" pos:end="125:51"><name pos:start="125:40" pos:end="125:44">rxbuf</name> <operator pos:start="125:46" pos:end="125:46">-</operator> <name pos:start="125:48" pos:end="125:51">size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:26"><expr pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:17">rxbuf_ptr</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <name pos:start="127:21" pos:end="127:25">rxbuf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:62"><expr pos:start="129:9" pos:end="129:61"><name pos:start="129:9" pos:end="129:15">crc_val</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <call pos:start="129:19" pos:end="129:61"><name pos:start="129:19" pos:end="129:29">cpu_to_le32</name><argument_list pos:start="129:30" pos:end="129:61">(<argument pos:start="129:31" pos:end="129:60"><expr pos:start="129:31" pos:end="129:60"><call pos:start="129:31" pos:end="129:60"><name pos:start="129:31" pos:end="129:35">crc32</name><argument_list pos:start="129:36" pos:end="129:60">(<argument pos:start="129:37" pos:end="129:37"><expr pos:start="129:37" pos:end="129:37"><literal type="number" pos:start="129:37" pos:end="129:37">0</literal></expr></argument>, <argument pos:start="129:40" pos:end="129:44"><expr pos:start="129:40" pos:end="129:44"><name pos:start="129:40" pos:end="129:44">rxbuf</name></expr></argument>, <argument pos:start="129:47" pos:end="129:59"><expr pos:start="129:47" pos:end="129:59"><call pos:start="129:47" pos:end="129:59"><name pos:start="129:47" pos:end="129:49">MAX</name><argument_list pos:start="129:50" pos:end="129:59">(<argument pos:start="129:51" pos:end="129:54"><expr pos:start="129:51" pos:end="129:54"><name pos:start="129:51" pos:end="129:54">size</name></expr></argument>, <argument pos:start="129:57" pos:end="129:58"><expr pos:start="129:57" pos:end="129:58"><literal type="number" pos:start="129:57" pos:end="129:58">60</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="139:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:22">(<expr pos:start="131:13" pos:end="131:21"><name pos:start="131:13" pos:end="131:16">size</name> <operator pos:start="131:18" pos:end="131:18">&lt;</operator> <literal type="number" pos:start="131:20" pos:end="131:21">60</literal></expr>)</condition> <block pos:start="131:24" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:28">

            <expr_stmt pos:start="133:13" pos:end="133:28"><expr pos:start="133:13" pos:end="133:27"><name pos:start="133:13" pos:end="133:22">crc_offset</name> <operator pos:start="133:24" pos:end="133:24">=</operator> <literal type="number" pos:start="133:26" pos:end="133:27">60</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="139:9">else <block pos:start="135:16" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:30">

            <expr_stmt pos:start="137:13" pos:end="137:30"><expr pos:start="137:13" pos:end="137:29"><name pos:start="137:13" pos:end="137:22">crc_offset</name> <operator pos:start="137:24" pos:end="137:24">=</operator> <name pos:start="137:26" pos:end="137:29">size</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:62"><expr pos:start="141:9" pos:end="141:61"><call pos:start="141:9" pos:end="141:61"><name pos:start="141:9" pos:end="141:14">memcpy</name><argument_list pos:start="141:15" pos:end="141:61">(<argument pos:start="141:16" pos:end="141:33"><expr pos:start="141:16" pos:end="141:33"><name pos:start="141:16" pos:end="141:20">rxbuf</name> <operator pos:start="141:22" pos:end="141:22">+</operator> <name pos:start="141:24" pos:end="141:33">crc_offset</name></expr></argument>, <argument pos:start="141:36" pos:end="141:43"><expr pos:start="141:36" pos:end="141:43"><operator pos:start="141:36" pos:end="141:36">&amp;</operator><name pos:start="141:37" pos:end="141:43">crc_val</name></expr></argument>, <argument pos:start="141:46" pos:end="141:60"><expr pos:start="141:46" pos:end="141:60"><sizeof pos:start="141:46" pos:end="141:60">sizeof<argument_list pos:start="141:52" pos:end="141:60">(<argument pos:start="141:53" pos:end="141:59"><expr pos:start="141:53" pos:end="141:59"><name pos:start="141:53" pos:end="141:59">crc_val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:27"><expr pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:21">bytes_to_copy</name> <operator pos:start="145:23" pos:end="145:24">+=</operator> <literal type="number" pos:start="145:26" pos:end="145:26">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:18"><expr pos:start="147:9" pos:end="147:17"><name pos:start="147:9" pos:end="147:12">size</name> <operator pos:start="147:14" pos:end="147:15">+=</operator> <literal type="number" pos:start="147:17" pos:end="147:17">4</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:31">/* Pad to minimum length */</comment>

    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:18">(<expr pos:start="155:9" pos:end="155:17"><name pos:start="155:9" pos:end="155:12">size</name> <operator pos:start="155:14" pos:end="155:14">&lt;</operator> <literal type="number" pos:start="155:16" pos:end="155:17">64</literal></expr>)</condition> <block pos:start="155:20" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:18">

        <expr_stmt pos:start="157:9" pos:end="157:18"><expr pos:start="157:9" pos:end="157:17"><name pos:start="157:9" pos:end="157:12">size</name> <operator pos:start="157:14" pos:end="157:14">=</operator> <literal type="number" pos:start="157:16" pos:end="157:17">64</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:71"><expr pos:start="163:5" pos:end="163:70"><call pos:start="163:5" pos:end="163:70"><name pos:start="163:5" pos:end="163:12">DB_PRINT</name><argument_list pos:start="163:13" pos:end="163:70">(<argument pos:start="163:14" pos:end="163:52"><expr pos:start="163:14" pos:end="163:52"><literal type="string" pos:start="163:14" pos:end="163:52">"config bufsize: %d packet size: %ld\n"</literal></expr></argument>, <argument pos:start="163:55" pos:end="163:63"><expr pos:start="163:55" pos:end="163:63"><name pos:start="163:55" pos:end="163:63">rxbufsize</name></expr></argument>, <argument pos:start="163:66" pos:end="163:69"><expr pos:start="163:66" pos:end="163:69"><name pos:start="163:66" pos:end="163:69">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:39"><expr pos:start="167:5" pos:end="167:38"><name pos:start="167:5" pos:end="167:20">packet_desc_addr</name> <operator pos:start="167:22" pos:end="167:22">=</operator> <name pos:start="167:24" pos:end="167:38"><name pos:start="167:24" pos:end="167:24">s</name><operator pos:start="167:25" pos:end="167:26">-&gt;</operator><name pos:start="167:27" pos:end="167:38">rx_desc_addr</name></name></expr>;</expr_stmt>

    <while pos:start="169:5" pos:end="253:5">while <condition pos:start="169:11" pos:end="169:13">(<expr pos:start="169:12" pos:end="169:12"><literal type="number" pos:start="169:12" pos:end="169:12">1</literal></expr>)</condition> <block pos:start="169:15" pos:end="253:5">{<block_content pos:start="171:9" pos:end="251:9">

        <expr_stmt pos:start="171:9" pos:end="171:61"><expr pos:start="171:9" pos:end="171:60"><call pos:start="171:9" pos:end="171:60"><name pos:start="171:9" pos:end="171:16">DB_PRINT</name><argument_list pos:start="171:17" pos:end="171:60">(<argument pos:start="171:18" pos:end="171:41"><expr pos:start="171:18" pos:end="171:41"><literal type="string" pos:start="171:18" pos:end="171:41">"read descriptor 0x%x\n"</literal></expr></argument>, <argument pos:start="171:44" pos:end="171:59"><expr pos:start="171:44" pos:end="171:59"><name pos:start="171:44" pos:end="171:59">packet_desc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="173:9" pos:end="173:37">/* read current descriptor */</comment>

        <expr_stmt pos:start="175:9" pos:end="177:68"><expr pos:start="175:9" pos:end="177:67"><call pos:start="175:9" pos:end="177:67"><name pos:start="175:9" pos:end="175:32">cpu_physical_memory_read</name><argument_list pos:start="175:33" pos:end="177:67">(<argument pos:start="175:34" pos:end="175:49"><expr pos:start="175:34" pos:end="175:49"><name pos:start="175:34" pos:end="175:49">packet_desc_addr</name></expr></argument>,

                                 <argument pos:start="177:34" pos:end="177:52"><expr pos:start="177:34" pos:end="177:52"><operator pos:start="177:34" pos:end="177:34">(</operator><name pos:start="177:35" pos:end="177:41">uint8_t</name> <operator pos:start="177:43" pos:end="177:43">*</operator><operator pos:start="177:44" pos:end="177:44">)</operator><operator pos:start="177:45" pos:end="177:45">&amp;</operator><name pos:start="177:46" pos:end="177:52"><name pos:start="177:46" pos:end="177:49">desc</name><index pos:start="177:50" pos:end="177:52">[<expr pos:start="177:51" pos:end="177:51"><literal type="number" pos:start="177:51" pos:end="177:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="177:55" pos:end="177:66"><expr pos:start="177:55" pos:end="177:66"><sizeof pos:start="177:55" pos:end="177:66">sizeof<argument_list pos:start="177:61" pos:end="177:66">(<argument pos:start="177:62" pos:end="177:65"><expr pos:start="177:62" pos:end="177:65"><name pos:start="177:62" pos:end="177:65">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="181:9" pos:end="181:44">/* Descriptor owned by software ? */</comment>

        <if_stmt pos:start="183:9" pos:end="195:9"><if pos:start="183:9" pos:end="195:9">if <condition pos:start="183:12" pos:end="183:45">(<expr pos:start="183:13" pos:end="183:44"><call pos:start="183:13" pos:end="183:39"><name pos:start="183:13" pos:end="183:33">rx_desc_get_ownership</name><argument_list pos:start="183:34" pos:end="183:39">(<argument pos:start="183:35" pos:end="183:38"><expr pos:start="183:35" pos:end="183:38"><name pos:start="183:35" pos:end="183:38">desc</name></expr></argument>)</argument_list></call> <operator pos:start="183:41" pos:end="183:42">==</operator> <literal type="number" pos:start="183:44" pos:end="183:44">1</literal></expr>)</condition> <block pos:start="183:47" pos:end="195:9">{<block_content pos:start="185:13" pos:end="193:22">

            <expr_stmt pos:start="185:13" pos:end="185:73"><expr pos:start="185:13" pos:end="185:72"><call pos:start="185:13" pos:end="185:72"><name pos:start="185:13" pos:end="185:20">DB_PRINT</name><argument_list pos:start="185:21" pos:end="185:72">(<argument pos:start="185:22" pos:end="185:53"><expr pos:start="185:22" pos:end="185:53"><literal type="string" pos:start="185:22" pos:end="185:53">"descriptor 0x%x owned by sw.\n"</literal></expr></argument>, <argument pos:start="185:56" pos:end="185:71"><expr pos:start="185:56" pos:end="185:71"><name pos:start="185:56" pos:end="185:71">packet_desc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:56"><expr pos:start="187:13" pos:end="187:55"><name pos:start="187:13" pos:end="187:33"><name pos:start="187:13" pos:end="187:13">s</name><operator pos:start="187:14" pos:end="187:15">-&gt;</operator><name pos:start="187:16" pos:end="187:19">regs</name><index pos:start="187:20" pos:end="187:33">[<expr pos:start="187:21" pos:end="187:32"><name pos:start="187:21" pos:end="187:32">GEM_RXSTATUS</name></expr>]</index></name> <operator pos:start="187:35" pos:end="187:36">|=</operator> <name pos:start="187:38" pos:end="187:55">GEM_RXSTATUS_NOBUF</name></expr>;</expr_stmt>

            <comment type="block" pos:start="189:13" pos:end="189:47">/* Handle interrupt consequences */</comment>

            <expr_stmt pos:start="191:13" pos:end="191:37"><expr pos:start="191:13" pos:end="191:36"><call pos:start="191:13" pos:end="191:36"><name pos:start="191:13" pos:end="191:33">gem_update_int_status</name><argument_list pos:start="191:34" pos:end="191:36">(<argument pos:start="191:35" pos:end="191:35"><expr pos:start="191:35" pos:end="191:35"><name pos:start="191:35" pos:end="191:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="193:13" pos:end="193:22">return <expr pos:start="193:20" pos:end="193:21"><operator pos:start="193:20" pos:end="193:20">-</operator><literal type="number" pos:start="193:21" pos:end="193:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="199:9" pos:end="201:42"><expr pos:start="199:9" pos:end="201:41"><call pos:start="199:9" pos:end="201:41"><name pos:start="199:9" pos:end="199:16">DB_PRINT</name><argument_list pos:start="199:17" pos:end="201:41">(<argument pos:start="199:18" pos:end="199:42"><expr pos:start="199:18" pos:end="199:42"><literal type="string" pos:start="199:18" pos:end="199:42">"copy %d bytes to 0x%x\n"</literal></expr></argument>, <argument pos:start="199:45" pos:end="199:73"><expr pos:start="199:45" pos:end="199:73"><call pos:start="199:45" pos:end="199:73"><name pos:start="199:45" pos:end="199:47">MIN</name><argument_list pos:start="199:48" pos:end="199:73">(<argument pos:start="199:49" pos:end="199:61"><expr pos:start="199:49" pos:end="199:61"><name pos:start="199:49" pos:end="199:61">bytes_to_copy</name></expr></argument>, <argument pos:start="199:64" pos:end="199:72"><expr pos:start="199:64" pos:end="199:72"><name pos:start="199:64" pos:end="199:72">rxbufsize</name></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="201:17" pos:end="201:40"><expr pos:start="201:17" pos:end="201:40"><call pos:start="201:17" pos:end="201:40"><name pos:start="201:17" pos:end="201:34">rx_desc_get_buffer</name><argument_list pos:start="201:35" pos:end="201:40">(<argument pos:start="201:36" pos:end="201:39"><expr pos:start="201:36" pos:end="201:39"><name pos:start="201:36" pos:end="201:39">desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="205:9" pos:end="209:11">/*

         * Let's have QEMU lend a helping hand.

         */</comment>

        <if_stmt pos:start="211:9" pos:end="219:9"><if pos:start="211:9" pos:end="219:9">if <condition pos:start="211:12" pos:end="211:42">(<expr pos:start="211:13" pos:end="211:41"><call pos:start="211:13" pos:end="211:36"><name pos:start="211:13" pos:end="211:30">rx_desc_get_buffer</name><argument_list pos:start="211:31" pos:end="211:36">(<argument pos:start="211:32" pos:end="211:35"><expr pos:start="211:32" pos:end="211:35"><name pos:start="211:32" pos:end="211:35">desc</name></expr></argument>)</argument_list></call> <operator pos:start="211:38" pos:end="211:39">==</operator> <literal type="number" pos:start="211:41" pos:end="211:41">0</literal></expr>)</condition> <block pos:start="211:44" pos:end="219:9">{<block_content pos:start="213:13" pos:end="217:18">

            <expr_stmt pos:start="213:13" pos:end="215:41"><expr pos:start="213:13" pos:end="215:40"><call pos:start="213:13" pos:end="215:40"><name pos:start="213:13" pos:end="213:20">DB_PRINT</name><argument_list pos:start="213:21" pos:end="215:40">(<argument pos:start="213:22" pos:end="213:69"><expr pos:start="213:22" pos:end="213:69"><literal type="string" pos:start="213:22" pos:end="213:69">"Invalid RX buffer (NULL) for descriptor 0x%x\n"</literal></expr></argument>,

                       <argument pos:start="215:24" pos:end="215:39"><expr pos:start="215:24" pos:end="215:39"><name pos:start="215:24" pos:end="215:39">packet_desc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="217:13" pos:end="217:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="223:9" pos:end="223:53">/* Copy packet data to emulated DMA buffer */</comment>

        <expr_stmt pos:start="225:9" pos:end="227:76"><expr pos:start="225:9" pos:end="227:75"><call pos:start="225:9" pos:end="227:75"><name pos:start="225:9" pos:end="225:33">cpu_physical_memory_write</name><argument_list pos:start="225:34" pos:end="227:75">(<argument pos:start="225:35" pos:end="225:73"><expr pos:start="225:35" pos:end="225:73"><call pos:start="225:35" pos:end="225:58"><name pos:start="225:35" pos:end="225:52">rx_desc_get_buffer</name><argument_list pos:start="225:53" pos:end="225:58">(<argument pos:start="225:54" pos:end="225:57"><expr pos:start="225:54" pos:end="225:57"><name pos:start="225:54" pos:end="225:57">desc</name></expr></argument>)</argument_list></call> <operator pos:start="225:60" pos:end="225:60">+</operator> <name pos:start="225:62" pos:end="225:73">rxbuf_offset</name></expr></argument>,

                                  <argument pos:start="227:35" pos:end="227:43"><expr pos:start="227:35" pos:end="227:43"><name pos:start="227:35" pos:end="227:43">rxbuf_ptr</name></expr></argument>, <argument pos:start="227:46" pos:end="227:74"><expr pos:start="227:46" pos:end="227:74"><call pos:start="227:46" pos:end="227:74"><name pos:start="227:46" pos:end="227:48">MIN</name><argument_list pos:start="227:49" pos:end="227:74">(<argument pos:start="227:50" pos:end="227:62"><expr pos:start="227:50" pos:end="227:62"><name pos:start="227:50" pos:end="227:62">bytes_to_copy</name></expr></argument>, <argument pos:start="227:65" pos:end="227:73"><expr pos:start="227:65" pos:end="227:73"><name pos:start="227:65" pos:end="227:73">rxbufsize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:55"><expr pos:start="229:9" pos:end="229:54"><name pos:start="229:9" pos:end="229:21">bytes_to_copy</name> <operator pos:start="229:23" pos:end="229:24">-=</operator> <call pos:start="229:26" pos:end="229:54"><name pos:start="229:26" pos:end="229:28">MIN</name><argument_list pos:start="229:29" pos:end="229:54">(<argument pos:start="229:30" pos:end="229:42"><expr pos:start="229:30" pos:end="229:42"><name pos:start="229:30" pos:end="229:42">bytes_to_copy</name></expr></argument>, <argument pos:start="229:45" pos:end="229:53"><expr pos:start="229:45" pos:end="229:53"><name pos:start="229:45" pos:end="229:53">rxbufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:51"><expr pos:start="231:9" pos:end="231:50"><name pos:start="231:9" pos:end="231:17">rxbuf_ptr</name> <operator pos:start="231:19" pos:end="231:20">+=</operator> <call pos:start="231:22" pos:end="231:50"><name pos:start="231:22" pos:end="231:24">MIN</name><argument_list pos:start="231:25" pos:end="231:50">(<argument pos:start="231:26" pos:end="231:38"><expr pos:start="231:26" pos:end="231:38"><name pos:start="231:26" pos:end="231:38">bytes_to_copy</name></expr></argument>, <argument pos:start="231:41" pos:end="231:49"><expr pos:start="231:41" pos:end="231:49"><name pos:start="231:41" pos:end="231:49">rxbufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="233:9" pos:end="237:9"><if pos:start="233:9" pos:end="237:9">if <condition pos:start="233:12" pos:end="233:31">(<expr pos:start="233:13" pos:end="233:30"><name pos:start="233:13" pos:end="233:25">bytes_to_copy</name> <operator pos:start="233:27" pos:end="233:28">==</operator> <literal type="number" pos:start="233:30" pos:end="233:30">0</literal></expr>)</condition> <block pos:start="233:33" pos:end="237:9">{<block_content pos:start="235:13" pos:end="235:18">

            <break pos:start="235:13" pos:end="235:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="241:9" pos:end="241:29">/* Next descriptor */</comment>

        <if_stmt pos:start="243:9" pos:end="251:9"><if pos:start="243:9" pos:end="247:9">if <condition pos:start="243:12" pos:end="243:35">(<expr pos:start="243:13" pos:end="243:34"><call pos:start="243:13" pos:end="243:34"><name pos:start="243:13" pos:end="243:28">rx_desc_get_wrap</name><argument_list pos:start="243:29" pos:end="243:34">(<argument pos:start="243:30" pos:end="243:33"><expr pos:start="243:30" pos:end="243:33"><name pos:start="243:30" pos:end="243:33">desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="243:37" pos:end="247:9">{<block_content pos:start="245:13" pos:end="245:52">

            <expr_stmt pos:start="245:13" pos:end="245:52"><expr pos:start="245:13" pos:end="245:51"><name pos:start="245:13" pos:end="245:28">packet_desc_addr</name> <operator pos:start="245:30" pos:end="245:30">=</operator> <name pos:start="245:32" pos:end="245:51"><name pos:start="245:32" pos:end="245:32">s</name><operator pos:start="245:33" pos:end="245:34">-&gt;</operator><name pos:start="245:35" pos:end="245:38">regs</name><index pos:start="245:39" pos:end="245:51">[<expr pos:start="245:40" pos:end="245:50"><name pos:start="245:40" pos:end="245:50">GEM_RXQBASE</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="247:11" pos:end="251:9">else <block pos:start="247:16" pos:end="251:9">{<block_content pos:start="249:13" pos:end="249:34">

            <expr_stmt pos:start="249:13" pos:end="249:34"><expr pos:start="249:13" pos:end="249:33"><name pos:start="249:13" pos:end="249:28">packet_desc_addr</name> <operator pos:start="249:30" pos:end="249:31">+=</operator> <literal type="number" pos:start="249:33" pos:end="249:33">8</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="257:5" pos:end="259:40"><expr pos:start="257:5" pos:end="259:39"><call pos:start="257:5" pos:end="259:39"><name pos:start="257:5" pos:end="257:12">DB_PRINT</name><argument_list pos:start="257:13" pos:end="259:39">(<argument pos:start="257:14" pos:end="257:56"><expr pos:start="257:14" pos:end="257:56"><literal type="string" pos:start="257:14" pos:end="257:56">"set length: %ld, EOF on descriptor 0x%x\n"</literal></expr></argument>, <argument pos:start="257:59" pos:end="257:62"><expr pos:start="257:59" pos:end="257:62"><name pos:start="257:59" pos:end="257:62">size</name></expr></argument>,

            <argument pos:start="259:13" pos:end="259:38"><expr pos:start="259:13" pos:end="259:38"><operator pos:start="259:13" pos:end="259:13">(</operator><name pos:start="259:14" pos:end="259:21">unsigned</name><operator pos:start="259:22" pos:end="259:22">)</operator><name pos:start="259:23" pos:end="259:38">packet_desc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="263:5" pos:end="263:58">/* Update last descriptor with EOF and total length */</comment>

    <expr_stmt pos:start="265:5" pos:end="265:26"><expr pos:start="265:5" pos:end="265:25"><call pos:start="265:5" pos:end="265:25"><name pos:start="265:5" pos:end="265:19">rx_desc_set_eof</name><argument_list pos:start="265:20" pos:end="265:25">(<argument pos:start="265:21" pos:end="265:24"><expr pos:start="265:21" pos:end="265:24"><name pos:start="265:21" pos:end="265:24">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:35"><expr pos:start="267:5" pos:end="267:34"><call pos:start="267:5" pos:end="267:34"><name pos:start="267:5" pos:end="267:22">rx_desc_set_length</name><argument_list pos:start="267:23" pos:end="267:34">(<argument pos:start="267:24" pos:end="267:27"><expr pos:start="267:24" pos:end="267:27"><name pos:start="267:24" pos:end="267:27">desc</name></expr></argument>, <argument pos:start="267:30" pos:end="267:33"><expr pos:start="267:30" pos:end="267:33"><name pos:start="267:30" pos:end="267:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="271:65"><expr pos:start="269:5" pos:end="271:64"><call pos:start="269:5" pos:end="271:64"><name pos:start="269:5" pos:end="269:29">cpu_physical_memory_write</name><argument_list pos:start="269:30" pos:end="271:64">(<argument pos:start="269:31" pos:end="269:46"><expr pos:start="269:31" pos:end="269:46"><name pos:start="269:31" pos:end="269:46">packet_desc_addr</name></expr></argument>,

                              <argument pos:start="271:31" pos:end="271:49"><expr pos:start="271:31" pos:end="271:49"><operator pos:start="271:31" pos:end="271:31">(</operator><name pos:start="271:32" pos:end="271:38">uint8_t</name> <operator pos:start="271:40" pos:end="271:40">*</operator><operator pos:start="271:41" pos:end="271:41">)</operator><operator pos:start="271:42" pos:end="271:42">&amp;</operator><name pos:start="271:43" pos:end="271:49"><name pos:start="271:43" pos:end="271:46">desc</name><index pos:start="271:47" pos:end="271:49">[<expr pos:start="271:48" pos:end="271:48"><literal type="number" pos:start="271:48" pos:end="271:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="271:52" pos:end="271:63"><expr pos:start="271:52" pos:end="271:63"><sizeof pos:start="271:52" pos:end="271:63">sizeof<argument_list pos:start="271:58" pos:end="271:63">(<argument pos:start="271:59" pos:end="271:62"><expr pos:start="271:59" pos:end="271:62"><name pos:start="271:59" pos:end="271:62">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="275:5" pos:end="275:40">/* Advance RX packet descriptor Q */</comment>

    <expr_stmt pos:start="277:5" pos:end="277:38"><expr pos:start="277:5" pos:end="277:37"><name pos:start="277:5" pos:end="277:18">last_desc_addr</name> <operator pos:start="277:20" pos:end="277:20">=</operator> <name pos:start="277:22" pos:end="277:37">packet_desc_addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:39"><expr pos:start="279:5" pos:end="279:38"><name pos:start="279:5" pos:end="279:20">packet_desc_addr</name> <operator pos:start="279:22" pos:end="279:22">=</operator> <name pos:start="279:24" pos:end="279:38"><name pos:start="279:24" pos:end="279:24">s</name><operator pos:start="279:25" pos:end="279:26">-&gt;</operator><name pos:start="279:27" pos:end="279:38">rx_desc_addr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:37"><expr pos:start="281:5" pos:end="281:36"><name pos:start="281:5" pos:end="281:19"><name pos:start="281:5" pos:end="281:5">s</name><operator pos:start="281:6" pos:end="281:7">-&gt;</operator><name pos:start="281:8" pos:end="281:19">rx_desc_addr</name></name> <operator pos:start="281:21" pos:end="281:21">=</operator> <name pos:start="281:23" pos:end="281:36">last_desc_addr</name></expr>;</expr_stmt>

    <if_stmt pos:start="283:5" pos:end="291:5"><if pos:start="283:5" pos:end="287:5">if <condition pos:start="283:8" pos:end="283:31">(<expr pos:start="283:9" pos:end="283:30"><call pos:start="283:9" pos:end="283:30"><name pos:start="283:9" pos:end="283:24">rx_desc_get_wrap</name><argument_list pos:start="283:25" pos:end="283:30">(<argument pos:start="283:26" pos:end="283:29"><expr pos:start="283:26" pos:end="283:29"><name pos:start="283:26" pos:end="283:29">desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="283:33" pos:end="287:5">{<block_content pos:start="285:9" pos:end="285:47">

        <expr_stmt pos:start="285:9" pos:end="285:47"><expr pos:start="285:9" pos:end="285:46"><name pos:start="285:9" pos:end="285:23"><name pos:start="285:9" pos:end="285:9">s</name><operator pos:start="285:10" pos:end="285:11">-&gt;</operator><name pos:start="285:12" pos:end="285:23">rx_desc_addr</name></name> <operator pos:start="285:25" pos:end="285:25">=</operator> <name pos:start="285:27" pos:end="285:46"><name pos:start="285:27" pos:end="285:27">s</name><operator pos:start="285:28" pos:end="285:29">-&gt;</operator><name pos:start="285:30" pos:end="285:33">regs</name><index pos:start="285:34" pos:end="285:46">[<expr pos:start="285:35" pos:end="285:45"><name pos:start="285:35" pos:end="285:45">GEM_RXQBASE</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="287:7" pos:end="291:5">else <block pos:start="287:12" pos:end="291:5">{<block_content pos:start="289:9" pos:end="289:29">

        <expr_stmt pos:start="289:9" pos:end="289:29"><expr pos:start="289:9" pos:end="289:28"><name pos:start="289:9" pos:end="289:23"><name pos:start="289:9" pos:end="289:9">s</name><operator pos:start="289:10" pos:end="289:11">-&gt;</operator><name pos:start="289:12" pos:end="289:23">rx_desc_addr</name></name> <operator pos:start="289:25" pos:end="289:26">+=</operator> <literal type="number" pos:start="289:28" pos:end="289:28">8</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="295:5" pos:end="295:70"><expr pos:start="295:5" pos:end="295:69"><call pos:start="295:5" pos:end="295:69"><name pos:start="295:5" pos:end="295:12">DB_PRINT</name><argument_list pos:start="295:13" pos:end="295:69">(<argument pos:start="295:14" pos:end="295:50"><expr pos:start="295:14" pos:end="295:50"><literal type="string" pos:start="295:14" pos:end="295:50">"set SOF, OWN on descriptor 0x%08x\n"</literal></expr></argument>, <argument pos:start="295:53" pos:end="295:68"><expr pos:start="295:53" pos:end="295:68"><name pos:start="295:53" pos:end="295:68">packet_desc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="299:5" pos:end="299:18">/* Count it */</comment>

    <expr_stmt pos:start="301:5" pos:end="301:42"><expr pos:start="301:5" pos:end="301:41"><call pos:start="301:5" pos:end="301:41"><name pos:start="301:5" pos:end="301:27">gem_receive_updatestats</name><argument_list pos:start="301:28" pos:end="301:41">(<argument pos:start="301:29" pos:end="301:29"><expr pos:start="301:29" pos:end="301:29"><name pos:start="301:29" pos:end="301:29">s</name></expr></argument>, <argument pos:start="301:32" pos:end="301:34"><expr pos:start="301:32" pos:end="301:34"><name pos:start="301:32" pos:end="301:34">buf</name></expr></argument>, <argument pos:start="301:37" pos:end="301:40"><expr pos:start="301:37" pos:end="301:40"><name pos:start="301:37" pos:end="301:40">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="305:5" pos:end="305:64">/* Update first descriptor (which could also be the last) */</comment>

    <comment type="block" pos:start="307:5" pos:end="307:25">/* read descriptor */</comment>

    <expr_stmt pos:start="309:5" pos:end="311:64"><expr pos:start="309:5" pos:end="311:63"><call pos:start="309:5" pos:end="311:63"><name pos:start="309:5" pos:end="309:28">cpu_physical_memory_read</name><argument_list pos:start="309:29" pos:end="311:63">(<argument pos:start="309:30" pos:end="309:45"><expr pos:start="309:30" pos:end="309:45"><name pos:start="309:30" pos:end="309:45">packet_desc_addr</name></expr></argument>,

                             <argument pos:start="311:30" pos:end="311:48"><expr pos:start="311:30" pos:end="311:48"><operator pos:start="311:30" pos:end="311:30">(</operator><name pos:start="311:31" pos:end="311:37">uint8_t</name> <operator pos:start="311:39" pos:end="311:39">*</operator><operator pos:start="311:40" pos:end="311:40">)</operator><operator pos:start="311:41" pos:end="311:41">&amp;</operator><name pos:start="311:42" pos:end="311:48"><name pos:start="311:42" pos:end="311:45">desc</name><index pos:start="311:46" pos:end="311:48">[<expr pos:start="311:47" pos:end="311:47"><literal type="number" pos:start="311:47" pos:end="311:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="311:51" pos:end="311:62"><expr pos:start="311:51" pos:end="311:62"><sizeof pos:start="311:51" pos:end="311:62">sizeof<argument_list pos:start="311:57" pos:end="311:62">(<argument pos:start="311:58" pos:end="311:61"><expr pos:start="311:58" pos:end="311:61"><name pos:start="311:58" pos:end="311:61">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="313:5" pos:end="313:26"><expr pos:start="313:5" pos:end="313:25"><call pos:start="313:5" pos:end="313:25"><name pos:start="313:5" pos:end="313:19">rx_desc_set_sof</name><argument_list pos:start="313:20" pos:end="313:25">(<argument pos:start="313:21" pos:end="313:24"><expr pos:start="313:21" pos:end="313:24"><name pos:start="313:21" pos:end="313:24">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="315:32"><expr pos:start="315:5" pos:end="315:31"><call pos:start="315:5" pos:end="315:31"><name pos:start="315:5" pos:end="315:25">rx_desc_set_ownership</name><argument_list pos:start="315:26" pos:end="315:31">(<argument pos:start="315:27" pos:end="315:30"><expr pos:start="315:27" pos:end="315:30"><name pos:start="315:27" pos:end="315:30">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="319:65"><expr pos:start="317:5" pos:end="319:64"><call pos:start="317:5" pos:end="319:64"><name pos:start="317:5" pos:end="317:29">cpu_physical_memory_write</name><argument_list pos:start="317:30" pos:end="319:64">(<argument pos:start="317:31" pos:end="317:46"><expr pos:start="317:31" pos:end="317:46"><name pos:start="317:31" pos:end="317:46">packet_desc_addr</name></expr></argument>,

                              <argument pos:start="319:31" pos:end="319:49"><expr pos:start="319:31" pos:end="319:49"><operator pos:start="319:31" pos:end="319:31">(</operator><name pos:start="319:32" pos:end="319:38">uint8_t</name> <operator pos:start="319:40" pos:end="319:40">*</operator><operator pos:start="319:41" pos:end="319:41">)</operator><operator pos:start="319:42" pos:end="319:42">&amp;</operator><name pos:start="319:43" pos:end="319:49"><name pos:start="319:43" pos:end="319:46">desc</name><index pos:start="319:47" pos:end="319:49">[<expr pos:start="319:48" pos:end="319:48"><literal type="number" pos:start="319:48" pos:end="319:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="319:52" pos:end="319:63"><expr pos:start="319:52" pos:end="319:63"><sizeof pos:start="319:52" pos:end="319:63">sizeof<argument_list pos:start="319:58" pos:end="319:63">(<argument pos:start="319:59" pos:end="319:62"><expr pos:start="319:59" pos:end="319:62"><name pos:start="319:59" pos:end="319:62">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="323:5" pos:end="323:50"><expr pos:start="323:5" pos:end="323:49"><name pos:start="323:5" pos:end="323:25"><name pos:start="323:5" pos:end="323:5">s</name><operator pos:start="323:6" pos:end="323:7">-&gt;</operator><name pos:start="323:8" pos:end="323:11">regs</name><index pos:start="323:12" pos:end="323:25">[<expr pos:start="323:13" pos:end="323:24"><name pos:start="323:13" pos:end="323:24">GEM_RXSTATUS</name></expr>]</index></name> <operator pos:start="323:27" pos:end="323:28">|=</operator> <name pos:start="323:30" pos:end="323:49">GEM_RXSTATUS_FRMRCVD</name></expr>;</expr_stmt>



    <comment type="block" pos:start="327:5" pos:end="327:39">/* Handle interrupt consequences */</comment>

    <expr_stmt pos:start="329:5" pos:end="329:29"><expr pos:start="329:5" pos:end="329:28"><call pos:start="329:5" pos:end="329:28"><name pos:start="329:5" pos:end="329:25">gem_update_int_status</name><argument_list pos:start="329:26" pos:end="329:28">(<argument pos:start="329:27" pos:end="329:27"><expr pos:start="329:27" pos:end="329:27"><name pos:start="329:27" pos:end="329:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="333:5" pos:end="333:16">return <expr pos:start="333:12" pos:end="333:15"><name pos:start="333:12" pos:end="333:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
