<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21289.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:45">avcodec_decode_audio3</name><parameter_list pos:start="1:46" pos:end="5:41">(<parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:60">AVCodecContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:67">avctx</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:85"><decl pos:start="1:70" pos:end="1:85"><type pos:start="1:70" pos:end="1:85"><name pos:start="1:70" pos:end="1:76">int16_t</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:85">samples</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:44"><decl pos:start="3:26" pos:end="3:44"><type pos:start="3:26" pos:end="3:44"><name pos:start="3:26" pos:end="3:28">int</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:44">frame_size_ptr</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:40"><decl pos:start="5:26" pos:end="5:40"><type pos:start="5:26" pos:end="5:40"><name pos:start="5:26" pos:end="5:33">AVPacket</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:40">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="83:1">{<block_content pos:start="9:5" pos:end="81:15">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">AVFrame</name></type> <name pos:start="9:13" pos:end="9:17">frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:22">got_frame</name> <init pos:start="11:24" pos:end="11:26">= <expr pos:start="11:26" pos:end="11:26"><literal type="number" pos:start="11:26" pos:end="11:26">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:56">(<expr pos:start="15:9" pos:end="15:55"><name pos:start="15:9" pos:end="15:25"><name pos:start="15:9" pos:end="15:13">avctx</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:25">get_buffer</name></name> <operator pos:start="15:27" pos:end="15:28">!=</operator> <name pos:start="15:30" pos:end="15:55">avcodec_default_get_buffer</name></expr>)</condition> <block pos:start="15:58" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:31">

        <expr_stmt pos:start="17:9" pos:end="19:44"><expr pos:start="17:9" pos:end="19:43"><call pos:start="17:9" pos:end="19:43"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="19:43">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="19:42"><expr pos:start="17:37" pos:end="19:42"><literal type="string" pos:start="17:37" pos:end="17:80">"A custom get_buffer() cannot be used with "</literal>

               <literal type="string" pos:start="19:16" pos:end="19:42">"avcodec_decode_audio3()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:31">return <expr pos:start="21:16" pos:end="21:30"><call pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:22">AVERROR</name><argument_list pos:start="21:23" pos:end="21:30">(<argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:66"><expr pos:start="27:5" pos:end="27:65"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:65"><name pos:start="27:11" pos:end="27:31">avcodec_decode_audio4</name><argument_list pos:start="27:32" pos:end="27:65">(<argument pos:start="27:33" pos:end="27:37"><expr pos:start="27:33" pos:end="27:37"><name pos:start="27:33" pos:end="27:37">avctx</name></expr></argument>, <argument pos:start="27:40" pos:end="27:45"><expr pos:start="27:40" pos:end="27:45"><operator pos:start="27:40" pos:end="27:40">&amp;</operator><name pos:start="27:41" pos:end="27:45">frame</name></expr></argument>, <argument pos:start="27:48" pos:end="27:57"><expr pos:start="27:48" pos:end="27:57"><operator pos:start="27:48" pos:end="27:48">&amp;</operator><name pos:start="27:49" pos:end="27:57">got_frame</name></expr></argument>, <argument pos:start="27:60" pos:end="27:64"><expr pos:start="27:60" pos:end="27:64"><name pos:start="27:60" pos:end="27:64">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="79:5"><if pos:start="31:5" pos:end="75:5">if <condition pos:start="31:8" pos:end="31:30">(<expr pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:14">&gt;=</operator> <literal type="number" pos:start="31:16" pos:end="31:16">0</literal> <operator pos:start="31:18" pos:end="31:19">&amp;&amp;</operator> <name pos:start="31:21" pos:end="31:29">got_frame</name></expr>)</condition> <block pos:start="31:32" pos:end="75:5">{<block_content pos:start="33:9" pos:end="73:36">

        <decl_stmt pos:start="33:9" pos:end="33:27"><decl pos:start="33:9" pos:end="33:14"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:14">ch</name></decl>, <decl pos:start="33:17" pos:end="33:26"><type ref="prev" pos:start="33:9" pos:end="33:11"/><name pos:start="33:17" pos:end="33:26">plane_size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:64"><decl pos:start="35:9" pos:end="35:63"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:18">planar</name> <init pos:start="35:20" pos:end="35:63">= <expr pos:start="35:22" pos:end="35:63"><call pos:start="35:22" pos:end="35:63"><name pos:start="35:22" pos:end="35:44">av_sample_fmt_is_planar</name><argument_list pos:start="35:45" pos:end="35:63">(<argument pos:start="35:46" pos:end="35:62"><expr pos:start="35:46" pos:end="35:62"><name pos:start="35:46" pos:end="35:62"><name pos:start="35:46" pos:end="35:50">avctx</name><operator pos:start="35:51" pos:end="35:52">-&gt;</operator><name pos:start="35:53" pos:end="35:62">sample_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="41:73"><decl pos:start="37:9" pos:end="41:72"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:21">data_size</name> <init pos:start="37:23" pos:end="41:72">= <expr pos:start="37:25" pos:end="41:72"><call pos:start="37:25" pos:end="41:72"><name pos:start="37:25" pos:end="37:50">av_samples_get_buffer_size</name><argument_list pos:start="37:51" pos:end="41:72">(<argument pos:start="37:52" pos:end="37:62"><expr pos:start="37:52" pos:end="37:62"><operator pos:start="37:52" pos:end="37:52">&amp;</operator><name pos:start="37:53" pos:end="37:62">plane_size</name></expr></argument>, <argument pos:start="37:65" pos:end="37:79"><expr pos:start="37:65" pos:end="37:79"><name pos:start="37:65" pos:end="37:79"><name pos:start="37:65" pos:end="37:69">avctx</name><operator pos:start="37:70" pos:end="37:71">-&gt;</operator><name pos:start="37:72" pos:end="37:79">channels</name></name></expr></argument>,

                                                   <argument pos:start="39:52" pos:end="39:67"><expr pos:start="39:52" pos:end="39:67"><name pos:start="39:52" pos:end="39:67"><name pos:start="39:52" pos:end="39:56">frame</name><operator pos:start="39:57" pos:end="39:57">.</operator><name pos:start="39:58" pos:end="39:67">nb_samples</name></name></expr></argument>,

                                                   <argument pos:start="41:52" pos:end="41:68"><expr pos:start="41:52" pos:end="41:68"><name pos:start="41:52" pos:end="41:68"><name pos:start="41:52" pos:end="41:56">avctx</name><operator pos:start="41:57" pos:end="41:58">-&gt;</operator><name pos:start="41:59" pos:end="41:68">sample_fmt</name></name></expr></argument>, <argument pos:start="41:71" pos:end="41:71"><expr pos:start="41:71" pos:end="41:71"><literal type="number" pos:start="41:71" pos:end="41:71">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:40">(<expr pos:start="43:13" pos:end="43:39"><operator pos:start="43:13" pos:end="43:13">*</operator><name pos:start="43:14" pos:end="43:27">frame_size_ptr</name> <operator pos:start="43:29" pos:end="43:29">&lt;</operator> <name pos:start="43:31" pos:end="43:39">data_size</name></expr>)</condition> <block pos:start="43:42" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:35">

            <expr_stmt pos:start="45:13" pos:end="47:80"><expr pos:start="45:13" pos:end="47:79"><call pos:start="45:13" pos:end="47:79"><name pos:start="45:13" pos:end="45:18">av_log</name><argument_list pos:start="45:19" pos:end="47:79">(<argument pos:start="45:20" pos:end="45:24"><expr pos:start="45:20" pos:end="45:24"><name pos:start="45:20" pos:end="45:24">avctx</name></expr></argument>, <argument pos:start="45:27" pos:end="45:38"><expr pos:start="45:27" pos:end="45:38"><name pos:start="45:27" pos:end="45:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:41" pos:end="47:50"><expr pos:start="45:41" pos:end="47:50"><literal type="string" pos:start="45:41" pos:end="45:78">"output buffer size is too small for "</literal>

                   <literal type="string" pos:start="47:20" pos:end="47:50">"the current frame (%d &lt; %d)\n"</literal></expr></argument>, <argument pos:start="47:53" pos:end="47:67"><expr pos:start="47:53" pos:end="47:67"><operator pos:start="47:53" pos:end="47:53">*</operator><name pos:start="47:54" pos:end="47:67">frame_size_ptr</name></expr></argument>, <argument pos:start="47:70" pos:end="47:78"><expr pos:start="47:70" pos:end="47:78"><name pos:start="47:70" pos:end="47:78">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:35">return <expr pos:start="49:20" pos:end="49:34"><call pos:start="49:20" pos:end="49:34"><name pos:start="49:20" pos:end="49:26">AVERROR</name><argument_list pos:start="49:27" pos:end="49:34">(<argument pos:start="49:28" pos:end="49:33"><expr pos:start="49:28" pos:end="49:33"><name pos:start="49:28" pos:end="49:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:60"><expr pos:start="55:9" pos:end="55:59"><call pos:start="55:9" pos:end="55:59"><name pos:start="55:9" pos:end="55:14">memcpy</name><argument_list pos:start="55:15" pos:end="55:59">(<argument pos:start="55:16" pos:end="55:22"><expr pos:start="55:16" pos:end="55:22"><name pos:start="55:16" pos:end="55:22">samples</name></expr></argument>, <argument pos:start="55:25" pos:end="55:46"><expr pos:start="55:25" pos:end="55:46"><name pos:start="55:25" pos:end="55:46"><name pos:start="55:25" pos:end="55:29">frame</name><operator pos:start="55:30" pos:end="55:30">.</operator><name pos:start="55:31" pos:end="55:43">extended_data</name><index pos:start="55:44" pos:end="55:46">[<expr pos:start="55:45" pos:end="55:45"><literal type="number" pos:start="55:45" pos:end="55:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="55:49" pos:end="55:58"><expr pos:start="55:49" pos:end="55:58"><name pos:start="55:49" pos:end="55:58">plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="59:9" pos:end="71:9"><if pos:start="59:9" pos:end="71:9">if <condition pos:start="59:12" pos:end="59:42">(<expr pos:start="59:13" pos:end="59:41"><name pos:start="59:13" pos:end="59:18">planar</name> <operator pos:start="59:20" pos:end="59:21">&amp;&amp;</operator> <name pos:start="59:23" pos:end="59:37"><name pos:start="59:23" pos:end="59:27">avctx</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:37">channels</name></name> <operator pos:start="59:39" pos:end="59:39">&gt;</operator> <literal type="number" pos:start="59:41" pos:end="59:41">1</literal></expr>)</condition> <block pos:start="59:44" pos:end="71:9">{<block_content pos:start="61:13" pos:end="69:13">

            <decl_stmt pos:start="61:13" pos:end="61:61"><decl pos:start="61:13" pos:end="61:60"><type pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:19">uint8_t</name> <modifier pos:start="61:21" pos:end="61:21">*</modifier></type><name pos:start="61:22" pos:end="61:24">out</name> <init pos:start="61:26" pos:end="61:60">= <expr pos:start="61:28" pos:end="61:60"><operator pos:start="61:28" pos:end="61:28">(</operator><operator pos:start="61:29" pos:end="61:29">(</operator><name pos:start="61:30" pos:end="61:36">uint8_t</name> <operator pos:start="61:38" pos:end="61:38">*</operator><operator pos:start="61:39" pos:end="61:39">)</operator><name pos:start="61:40" pos:end="61:46">samples</name><operator pos:start="61:47" pos:end="61:47">)</operator> <operator pos:start="61:49" pos:end="61:49">+</operator> <name pos:start="61:51" pos:end="61:60">plane_size</name></expr></init></decl>;</decl_stmt>

            <for pos:start="63:13" pos:end="69:13">for <control pos:start="63:17" pos:end="63:52">(<init pos:start="63:18" pos:end="63:24"><expr pos:start="63:18" pos:end="63:23"><name pos:start="63:18" pos:end="63:19">ch</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <literal type="number" pos:start="63:23" pos:end="63:23">1</literal></expr>;</init> <condition pos:start="63:26" pos:end="63:46"><expr pos:start="63:26" pos:end="63:45"><name pos:start="63:26" pos:end="63:27">ch</name> <operator pos:start="63:29" pos:end="63:29">&lt;</operator> <name pos:start="63:31" pos:end="63:45"><name pos:start="63:31" pos:end="63:35">avctx</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:45">channels</name></name></expr>;</condition> <incr pos:start="63:48" pos:end="63:51"><expr pos:start="63:48" pos:end="63:51"><name pos:start="63:48" pos:end="63:49">ch</name><operator pos:start="63:50" pos:end="63:51">++</operator></expr></incr>)</control> <block pos:start="63:54" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:34">

                <expr_stmt pos:start="65:17" pos:end="65:65"><expr pos:start="65:17" pos:end="65:64"><call pos:start="65:17" pos:end="65:64"><name pos:start="65:17" pos:end="65:22">memcpy</name><argument_list pos:start="65:23" pos:end="65:64">(<argument pos:start="65:24" pos:end="65:26"><expr pos:start="65:24" pos:end="65:26"><name pos:start="65:24" pos:end="65:26">out</name></expr></argument>, <argument pos:start="65:29" pos:end="65:51"><expr pos:start="65:29" pos:end="65:51"><name pos:start="65:29" pos:end="65:51"><name pos:start="65:29" pos:end="65:33">frame</name><operator pos:start="65:34" pos:end="65:34">.</operator><name pos:start="65:35" pos:end="65:47">extended_data</name><index pos:start="65:48" pos:end="65:51">[<expr pos:start="65:49" pos:end="65:50"><name pos:start="65:49" pos:end="65:50">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="65:54" pos:end="65:63"><expr pos:start="65:54" pos:end="65:63"><name pos:start="65:54" pos:end="65:63">plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:34"><expr pos:start="67:17" pos:end="67:33"><name pos:start="67:17" pos:end="67:19">out</name> <operator pos:start="67:21" pos:end="67:22">+=</operator> <name pos:start="67:24" pos:end="67:33">plane_size</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><operator pos:start="73:9" pos:end="73:9">*</operator><name pos:start="73:10" pos:end="73:23">frame_size_ptr</name> <operator pos:start="73:25" pos:end="73:25">=</operator> <name pos:start="73:27" pos:end="73:35">data_size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="79:5">else <block pos:start="75:12" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:28">

        <expr_stmt pos:start="77:9" pos:end="77:28"><expr pos:start="77:9" pos:end="77:27"><operator pos:start="77:9" pos:end="77:9">*</operator><name pos:start="77:10" pos:end="77:23">frame_size_ptr</name> <operator pos:start="77:25" pos:end="77:25">=</operator> <literal type="number" pos:start="77:27" pos:end="77:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="81:5" pos:end="81:15">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
