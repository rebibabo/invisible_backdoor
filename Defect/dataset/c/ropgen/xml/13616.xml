<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13616.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:23"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">opus_decode_packet</name><parameter_list pos:start="1:30" pos:end="2:66">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>,
                              <parameter pos:start="2:31" pos:end="2:48"><decl pos:start="2:31" pos:end="2:48"><type pos:start="2:31" pos:end="2:48"><name pos:start="2:31" pos:end="2:33">int</name> <modifier pos:start="2:35" pos:end="2:35">*</modifier></type><name pos:start="2:36" pos:end="2:48">got_frame_ptr</name></decl></parameter>, <parameter pos:start="2:51" pos:end="2:65"><decl pos:start="2:51" pos:end="2:65"><type pos:start="2:51" pos:end="2:65"><name pos:start="2:51" pos:end="2:58">AVPacket</name> <modifier pos:start="2:60" pos:end="2:60">*</modifier></type><name pos:start="2:61" pos:end="2:65">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="71:23">{<block_content pos:start="4:5" pos:end="71:23">
    <decl_stmt pos:start="4:5" pos:end="4:43"><decl pos:start="4:5" pos:end="4:42"><type pos:start="4:5" pos:end="4:17"><name pos:start="4:5" pos:end="4:15">OpusContext</name> <modifier pos:start="4:17" pos:end="4:17">*</modifier></type><name pos:start="4:18" pos:end="4:18">c</name>      <init pos:start="4:25" pos:end="4:42">= <expr pos:start="4:27" pos:end="4:42"><name pos:start="4:27" pos:end="4:42"><name pos:start="4:27" pos:end="4:31">avctx</name><operator pos:start="4:32" pos:end="4:33">-&gt;</operator><name pos:start="4:34" pos:end="4:42">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">AVFrame</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:18">frame</name>      <init pos:start="5:25" pos:end="5:30">= <expr pos:start="5:27" pos:end="5:30"><name pos:start="5:27" pos:end="5:30">data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:38"><decl pos:start="6:5" pos:end="6:37"><type pos:start="6:5" pos:end="6:19"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:17">uint8_t</name> <modifier pos:start="6:19" pos:end="6:19">*</modifier></type><name pos:start="6:20" pos:end="6:22">buf</name>  <init pos:start="6:25" pos:end="6:37">= <expr pos:start="6:27" pos:end="6:37"><name pos:start="6:27" pos:end="6:37"><name pos:start="6:27" pos:end="6:31">avpkt</name><operator pos:start="6:32" pos:end="6:33">-&gt;</operator><name pos:start="6:34" pos:end="6:37">data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">buf_size</name>        <init pos:start="7:25" pos:end="7:37">= <expr pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:31">avpkt</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:37">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:28"><decl pos:start="8:5" pos:end="8:27"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:21">coded_samples</name>   <init pos:start="8:25" pos:end="8:27">= <expr pos:start="8:27" pos:end="8:27"><literal type="number" pos:start="8:27" pos:end="8:27">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:23">decoded_samples</name> <init pos:start="9:25" pos:end="9:27">= <expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:15"><decl pos:start="10:5" pos:end="10:9"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:9">i</name></decl>, <decl pos:start="10:12" pos:end="10:14"><type ref="prev" pos:start="10:5" pos:end="10:7"/><name pos:start="10:12" pos:end="10:14">ret</name></decl>;</decl_stmt>
    <comment type="block" pos:start="11:5" pos:end="11:80">/* decode the header of the first sub-packet to find out the sample count */</comment>
    <if_stmt pos:start="12:5" pos:end="71:23"><if pos:start="12:5" pos:end="71:23">if <condition pos:start="12:8" pos:end="12:12">(<expr pos:start="12:9" pos:end="12:11"><name pos:start="12:9" pos:end="12:11">buf</name></expr>)</condition> <block pos:start="12:14" pos:end="71:23">{<block_content pos:start="13:9" pos:end="71:23">
        <decl_stmt pos:start="13:9" pos:end="13:48"><decl pos:start="13:9" pos:end="13:47"><type pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:18">OpusPacket</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:23">pkt</name> <init pos:start="13:25" pos:end="13:47">= <expr pos:start="13:27" pos:end="13:47"><operator pos:start="13:27" pos:end="13:27">&amp;</operator><name pos:start="13:28" pos:end="13:40"><name pos:start="13:28" pos:end="13:28">c</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:37">streams</name><index pos:start="13:38" pos:end="13:40">[<expr pos:start="13:39" pos:end="13:39"><literal type="number" pos:start="13:39" pos:end="13:39">0</literal></expr>]</index></name><operator pos:start="13:41" pos:end="13:41">.</operator><name pos:start="13:42" pos:end="13:47">packet</name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="14:9" pos:end="14:74"><expr pos:start="14:9" pos:end="14:73"><name pos:start="14:9" pos:end="14:11">ret</name> <operator pos:start="14:13" pos:end="14:13">=</operator> <call pos:start="14:15" pos:end="14:73"><name pos:start="14:15" pos:end="14:34">ff_opus_parse_packet</name><argument_list pos:start="14:35" pos:end="14:73">(<argument pos:start="14:36" pos:end="14:38"><expr pos:start="14:36" pos:end="14:38"><name pos:start="14:36" pos:end="14:38">pkt</name></expr></argument>, <argument pos:start="14:41" pos:end="14:43"><expr pos:start="14:41" pos:end="14:43"><name pos:start="14:41" pos:end="14:43">buf</name></expr></argument>, <argument pos:start="14:46" pos:end="14:53"><expr pos:start="14:46" pos:end="14:53"><name pos:start="14:46" pos:end="14:53">buf_size</name></expr></argument>, <argument pos:start="14:56" pos:end="14:72"><expr pos:start="14:56" pos:end="14:72"><name pos:start="14:56" pos:end="14:68"><name pos:start="14:56" pos:end="14:56">c</name><operator pos:start="14:57" pos:end="14:58">-&gt;</operator><name pos:start="14:59" pos:end="14:68">nb_streams</name></name> <operator pos:start="14:70" pos:end="14:70">&gt;</operator> <literal type="number" pos:start="14:72" pos:end="14:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="15:9" pos:end="71:23"><if pos:start="15:9" pos:end="71:23">if <condition pos:start="15:12" pos:end="15:20">(<expr pos:start="15:13" pos:end="15:19"><name pos:start="15:13" pos:end="15:15">ret</name> <operator pos:start="15:17" pos:end="15:17">&lt;</operator> <literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr>)</condition> <block pos:start="15:22" pos:end="71:23">{<block_content pos:start="16:13" pos:end="71:23">
            <expr_stmt pos:start="16:13" pos:end="16:78"><expr pos:start="16:13" pos:end="16:77"><call pos:start="16:13" pos:end="16:77"><name pos:start="16:13" pos:end="16:18">av_log</name><argument_list pos:start="16:19" pos:end="16:77">(<argument pos:start="16:20" pos:end="16:24"><expr pos:start="16:20" pos:end="16:24"><name pos:start="16:20" pos:end="16:24">avctx</name></expr></argument>, <argument pos:start="16:27" pos:end="16:38"><expr pos:start="16:27" pos:end="16:38"><name pos:start="16:27" pos:end="16:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="16:41" pos:end="16:76"><expr pos:start="16:41" pos:end="16:76"><literal type="string" pos:start="16:41" pos:end="16:76">"Error parsing the packet header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="17:13" pos:end="17:23">return <expr pos:start="17:20" pos:end="17:22"><name pos:start="17:20" pos:end="17:22">ret</name></expr>;</return>
        <expr_stmt pos:start="18:9" pos:end="18:64"><expr pos:start="18:9" pos:end="18:63"><name pos:start="18:9" pos:end="18:21">coded_samples</name> <operator pos:start="18:23" pos:end="18:24">+=</operator> <name pos:start="18:26" pos:end="18:41"><name pos:start="18:26" pos:end="18:28">pkt</name><operator pos:start="18:29" pos:end="18:30">-&gt;</operator><name pos:start="18:31" pos:end="18:41">frame_count</name></name> <operator pos:start="18:43" pos:end="18:43">*</operator> <name pos:start="18:45" pos:end="18:63"><name pos:start="18:45" pos:end="18:47">pkt</name><operator pos:start="18:48" pos:end="18:49">-&gt;</operator><name pos:start="18:50" pos:end="18:63">frame_duration</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="19:9" pos:end="19:73"><expr pos:start="19:9" pos:end="19:72"><name pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:9">c</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:18">streams</name><index pos:start="19:19" pos:end="19:21">[<expr pos:start="19:20" pos:end="19:20"><literal type="number" pos:start="19:20" pos:end="19:20">0</literal></expr>]</index></name><operator pos:start="19:22" pos:end="19:22">.</operator><name pos:start="19:23" pos:end="19:37">silk_samplerate</name> <operator pos:start="19:39" pos:end="19:39">=</operator> <call pos:start="19:41" pos:end="19:72"><name pos:start="19:41" pos:end="19:59">get_silk_samplerate</name><argument_list pos:start="19:60" pos:end="19:72">(<argument pos:start="19:61" pos:end="19:71"><expr pos:start="19:61" pos:end="19:71"><name pos:start="19:61" pos:end="19:71"><name pos:start="19:61" pos:end="19:63">pkt</name><operator pos:start="19:64" pos:end="19:65">-&gt;</operator><name pos:start="19:66" pos:end="19:71">config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:70"><expr pos:start="20:5" pos:end="20:69"><name pos:start="20:5" pos:end="20:21"><name pos:start="20:5" pos:end="20:9">frame</name><operator pos:start="20:10" pos:end="20:11">-&gt;</operator><name pos:start="20:12" pos:end="20:21">nb_samples</name></name> <operator pos:start="20:23" pos:end="20:23">=</operator> <name pos:start="20:25" pos:end="20:37">coded_samples</name> <operator pos:start="20:39" pos:end="20:39">+</operator> <name pos:start="20:41" pos:end="20:53"><name pos:start="20:41" pos:end="20:41">c</name><operator pos:start="20:42" pos:end="20:43">-&gt;</operator><name pos:start="20:44" pos:end="20:50">streams</name><index pos:start="20:51" pos:end="20:53">[<expr pos:start="20:52" pos:end="20:52"><literal type="number" pos:start="20:52" pos:end="20:52">0</literal></expr>]</index></name><operator pos:start="20:54" pos:end="20:54">.</operator><name pos:start="20:55" pos:end="20:69">delayed_samples</name></expr>;</expr_stmt>
    <comment type="block" pos:start="21:5" pos:end="21:52">/* no input or buffered data =&gt; nothing to do */</comment>
    <if_stmt pos:start="22:5" pos:end="71:23"><if pos:start="22:5" pos:end="71:23">if <condition pos:start="22:8" pos:end="22:27">(<expr pos:start="22:9" pos:end="22:26"><operator pos:start="22:9" pos:end="22:9">!</operator><name pos:start="22:10" pos:end="22:26"><name pos:start="22:10" pos:end="22:14">frame</name><operator pos:start="22:15" pos:end="22:16">-&gt;</operator><name pos:start="22:17" pos:end="22:26">nb_samples</name></name></expr>)</condition> <block pos:start="22:29" pos:end="71:23">{<block_content pos:start="23:9" pos:end="71:23">
        <expr_stmt pos:start="23:9" pos:end="23:27"><expr pos:start="23:9" pos:end="23:26"><operator pos:start="23:9" pos:end="23:9">*</operator><name pos:start="23:10" pos:end="23:22">got_frame_ptr</name> <operator pos:start="23:24" pos:end="23:24">=</operator> <literal type="number" pos:start="23:26" pos:end="23:26">0</literal></expr>;</expr_stmt>
        <return pos:start="24:9" pos:end="24:17">return <expr pos:start="24:16" pos:end="24:16"><literal type="number" pos:start="24:16" pos:end="24:16">0</literal></expr>;</return>
    <comment type="block" pos:start="25:5" pos:end="25:32">/* setup the data buffers */</comment>
    <expr_stmt pos:start="26:5" pos:end="26:41"><expr pos:start="26:5" pos:end="26:40"><name pos:start="26:5" pos:end="26:7">ret</name> <operator pos:start="26:9" pos:end="26:9">=</operator> <call pos:start="26:11" pos:end="26:40"><name pos:start="26:11" pos:end="26:23">ff_get_buffer</name><argument_list pos:start="26:24" pos:end="26:40">(<argument pos:start="26:25" pos:end="26:29"><expr pos:start="26:25" pos:end="26:29"><name pos:start="26:25" pos:end="26:29">avctx</name></expr></argument>, <argument pos:start="26:32" pos:end="26:36"><expr pos:start="26:32" pos:end="26:36"><name pos:start="26:32" pos:end="26:36">frame</name></expr></argument>, <argument pos:start="26:39" pos:end="26:39"><expr pos:start="26:39" pos:end="26:39"><literal type="number" pos:start="26:39" pos:end="26:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="27:5" pos:end="71:23"><if pos:start="27:5" pos:end="71:23">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition> <block pos:start="27:18" pos:end="71:23">{<block_content pos:start="28:9" pos:end="71:23">
        <expr_stmt pos:start="28:9" pos:end="28:61"><expr pos:start="28:9" pos:end="28:60"><call pos:start="28:9" pos:end="28:60"><name pos:start="28:9" pos:end="28:14">av_log</name><argument_list pos:start="28:15" pos:end="28:60">(<argument pos:start="28:16" pos:end="28:20"><expr pos:start="28:16" pos:end="28:20"><name pos:start="28:16" pos:end="28:20">avctx</name></expr></argument>, <argument pos:start="28:23" pos:end="28:34"><expr pos:start="28:23" pos:end="28:34"><name pos:start="28:23" pos:end="28:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="28:37" pos:end="28:59"><expr pos:start="28:37" pos:end="28:59"><literal type="string" pos:start="28:37" pos:end="28:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ret</name></expr>;</return>
    <expr_stmt pos:start="30:5" pos:end="30:26"><expr pos:start="30:5" pos:end="30:25"><name pos:start="30:5" pos:end="30:21"><name pos:start="30:5" pos:end="30:9">frame</name><operator pos:start="30:10" pos:end="30:11">-&gt;</operator><name pos:start="30:12" pos:end="30:21">nb_samples</name></name> <operator pos:start="30:23" pos:end="30:23">=</operator> <literal type="number" pos:start="30:25" pos:end="30:25">0</literal></expr>;</expr_stmt>
    <for pos:start="31:5" pos:end="71:23">for <control pos:start="31:9" pos:end="31:41">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:36"><expr pos:start="31:17" pos:end="31:35"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:35"><name pos:start="31:21" pos:end="31:25">avctx</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:35">channels</name></name></expr>;</condition> <incr pos:start="31:38" pos:end="31:40"><expr pos:start="31:38" pos:end="31:40"><name pos:start="31:38" pos:end="31:38">i</name><operator pos:start="31:39" pos:end="31:40">++</operator></expr></incr>)</control> <block pos:start="31:43" pos:end="71:23">{<block_content pos:start="32:9" pos:end="71:23">
        <decl_stmt pos:start="32:9" pos:end="32:46"><decl pos:start="32:9" pos:end="32:45"><type pos:start="32:9" pos:end="32:20"><name pos:start="32:9" pos:end="32:18">ChannelMap</name> <modifier pos:start="32:20" pos:end="32:20">*</modifier></type><name pos:start="32:21" pos:end="32:23">map</name> <init pos:start="32:25" pos:end="32:45">= <expr pos:start="32:27" pos:end="32:45"><operator pos:start="32:27" pos:end="32:27">&amp;</operator><name pos:start="32:28" pos:end="32:45"><name pos:start="32:28" pos:end="32:28">c</name><operator pos:start="32:29" pos:end="32:30">-&gt;</operator><name pos:start="32:31" pos:end="32:42">channel_maps</name><index pos:start="32:43" pos:end="32:45">[<expr pos:start="32:44" pos:end="32:44"><name pos:start="32:44" pos:end="32:44">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="33:9" pos:end="34:96"><if pos:start="33:9" pos:end="34:96">if <condition pos:start="33:12" pos:end="33:23">(<expr pos:start="33:13" pos:end="33:22"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:22"><name pos:start="33:14" pos:end="33:16">map</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:22">copy</name></name></expr>)</condition><block type="pseudo" pos:start="34:13" pos:end="34:96"><block_content pos:start="34:13" pos:end="34:96">
            <expr_stmt pos:start="34:13" pos:end="34:96"><expr pos:start="34:13" pos:end="34:95"><name pos:start="34:13" pos:end="34:39"><name pos:start="34:13" pos:end="34:13">c</name><operator pos:start="34:14" pos:end="34:15">-&gt;</operator><name pos:start="34:16" pos:end="34:22">streams</name><index pos:start="34:23" pos:end="34:39">[<expr pos:start="34:24" pos:end="34:38"><name pos:start="34:24" pos:end="34:38"><name pos:start="34:24" pos:end="34:26">map</name><operator pos:start="34:27" pos:end="34:28">-&gt;</operator><name pos:start="34:29" pos:end="34:38">stream_idx</name></name></expr>]</index></name><operator pos:start="34:40" pos:end="34:40">.</operator><name pos:start="34:41" pos:end="34:61"><name pos:start="34:41" pos:end="34:43">out</name><index pos:start="34:44" pos:end="34:61">[<expr pos:start="34:45" pos:end="34:60"><name pos:start="34:45" pos:end="34:60"><name pos:start="34:45" pos:end="34:47">map</name><operator pos:start="34:48" pos:end="34:49">-&gt;</operator><name pos:start="34:50" pos:end="34:60">channel_idx</name></name></expr>]</index></name> <operator pos:start="34:63" pos:end="34:63">=</operator> <operator pos:start="34:65" pos:end="34:65">(</operator><name pos:start="34:66" pos:end="34:70">float</name><operator pos:start="34:71" pos:end="34:71">*</operator><operator pos:start="34:72" pos:end="34:72">)</operator><name pos:start="34:73" pos:end="34:95"><name pos:start="34:73" pos:end="34:77">frame</name><operator pos:start="34:78" pos:end="34:79">-&gt;</operator><name pos:start="34:80" pos:end="34:92">extended_data</name><index pos:start="34:93" pos:end="34:95">[<expr pos:start="34:94" pos:end="34:94"><name pos:start="34:94" pos:end="34:94">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for pos:start="35:5" pos:end="36:52">for <control pos:start="35:9" pos:end="35:39">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:34"><expr pos:start="35:17" pos:end="35:33"><name pos:start="35:17" pos:end="35:17">i</name> <operator pos:start="35:19" pos:end="35:19">&lt;</operator> <name pos:start="35:21" pos:end="35:33"><name pos:start="35:21" pos:end="35:21">c</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:33">nb_streams</name></name></expr>;</condition> <incr pos:start="35:36" pos:end="35:38"><expr pos:start="35:36" pos:end="35:38"><name pos:start="35:36" pos:end="35:36">i</name><operator pos:start="35:37" pos:end="35:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="36:9" pos:end="36:52"><block_content pos:start="36:9" pos:end="36:52">
        <expr_stmt pos:start="36:9" pos:end="36:52"><expr pos:start="36:9" pos:end="36:51"><name pos:start="36:9" pos:end="36:21"><name pos:start="36:9" pos:end="36:9">c</name><operator pos:start="36:10" pos:end="36:11">-&gt;</operator><name pos:start="36:12" pos:end="36:18">streams</name><index pos:start="36:19" pos:end="36:21">[<expr pos:start="36:20" pos:end="36:20"><name pos:start="36:20" pos:end="36:20">i</name></expr>]</index></name><operator pos:start="36:22" pos:end="36:22">.</operator><name pos:start="36:23" pos:end="36:30">out_size</name> <operator pos:start="36:32" pos:end="36:32">=</operator> <name pos:start="36:34" pos:end="36:51"><name pos:start="36:34" pos:end="36:38">frame</name><operator pos:start="36:39" pos:end="36:40">-&gt;</operator><name pos:start="36:41" pos:end="36:48">linesize</name><index pos:start="36:49" pos:end="36:51">[<expr pos:start="36:50" pos:end="36:50"><literal type="number" pos:start="36:50" pos:end="36:50">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    <comment type="block" pos:start="37:5" pos:end="37:32">/* decode each sub-packet */</comment>
    <for pos:start="38:5" pos:end="71:23">for <control pos:start="38:9" pos:end="38:39">(<init pos:start="38:10" pos:end="38:15"><expr pos:start="38:10" pos:end="38:14"><name pos:start="38:10" pos:end="38:10">i</name> <operator pos:start="38:12" pos:end="38:12">=</operator> <literal type="number" pos:start="38:14" pos:end="38:14">0</literal></expr>;</init> <condition pos:start="38:17" pos:end="38:34"><expr pos:start="38:17" pos:end="38:33"><name pos:start="38:17" pos:end="38:17">i</name> <operator pos:start="38:19" pos:end="38:19">&lt;</operator> <name pos:start="38:21" pos:end="38:33"><name pos:start="38:21" pos:end="38:21">c</name><operator pos:start="38:22" pos:end="38:23">-&gt;</operator><name pos:start="38:24" pos:end="38:33">nb_streams</name></name></expr>;</condition> <incr pos:start="38:36" pos:end="38:38"><expr pos:start="38:36" pos:end="38:38"><name pos:start="38:36" pos:end="38:36">i</name><operator pos:start="38:37" pos:end="38:38">++</operator></expr></incr>)</control> <block pos:start="38:41" pos:end="71:23">{<block_content pos:start="39:9" pos:end="71:23">
        <decl_stmt pos:start="39:9" pos:end="39:46"><decl pos:start="39:9" pos:end="39:45"><type pos:start="39:9" pos:end="39:27"><name pos:start="39:9" pos:end="39:25">OpusStreamContext</name> <modifier pos:start="39:27" pos:end="39:27">*</modifier></type><name pos:start="39:28" pos:end="39:28">s</name> <init pos:start="39:30" pos:end="39:45">= <expr pos:start="39:32" pos:end="39:45"><operator pos:start="39:32" pos:end="39:32">&amp;</operator><name pos:start="39:33" pos:end="39:45"><name pos:start="39:33" pos:end="39:33">c</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:42">streams</name><index pos:start="39:43" pos:end="39:45">[<expr pos:start="39:44" pos:end="39:44"><name pos:start="39:44" pos:end="39:44">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="40:9" pos:end="71:23"><if pos:start="40:9" pos:end="71:23">if <condition pos:start="40:12" pos:end="40:21">(<expr pos:start="40:13" pos:end="40:20"><name pos:start="40:13" pos:end="40:13">i</name> <operator pos:start="40:15" pos:end="40:16">&amp;&amp;</operator> <name pos:start="40:18" pos:end="40:20">buf</name></expr>)</condition> <block pos:start="40:23" pos:end="71:23">{<block_content pos:start="41:13" pos:end="71:23">
            <expr_stmt pos:start="41:13" pos:end="41:90"><expr pos:start="41:13" pos:end="41:89"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:89"><name pos:start="41:19" pos:end="41:38">ff_opus_parse_packet</name><argument_list pos:start="41:39" pos:end="41:89">(<argument pos:start="41:40" pos:end="41:49"><expr pos:start="41:40" pos:end="41:49"><operator pos:start="41:40" pos:end="41:40">&amp;</operator><name pos:start="41:41" pos:end="41:49"><name pos:start="41:41" pos:end="41:41">s</name><operator pos:start="41:42" pos:end="41:43">-&gt;</operator><name pos:start="41:44" pos:end="41:49">packet</name></name></expr></argument>, <argument pos:start="41:52" pos:end="41:54"><expr pos:start="41:52" pos:end="41:54"><name pos:start="41:52" pos:end="41:54">buf</name></expr></argument>, <argument pos:start="41:57" pos:end="41:64"><expr pos:start="41:57" pos:end="41:64"><name pos:start="41:57" pos:end="41:64">buf_size</name></expr></argument>, <argument pos:start="41:67" pos:end="41:88"><expr pos:start="41:67" pos:end="41:88"><name pos:start="41:67" pos:end="41:67">i</name> <operator pos:start="41:69" pos:end="41:70">!=</operator> <name pos:start="41:72" pos:end="41:84"><name pos:start="41:72" pos:end="41:72">c</name><operator pos:start="41:73" pos:end="41:74">-&gt;</operator><name pos:start="41:75" pos:end="41:84">nb_streams</name></name> <operator pos:start="41:86" pos:end="41:86">-</operator> <literal type="number" pos:start="41:88" pos:end="41:88">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="42:13" pos:end="71:23"><if pos:start="42:13" pos:end="71:23">if <condition pos:start="42:16" pos:end="42:24">(<expr pos:start="42:17" pos:end="42:23"><name pos:start="42:17" pos:end="42:19">ret</name> <operator pos:start="42:21" pos:end="42:21">&lt;</operator> <literal type="number" pos:start="42:23" pos:end="42:23">0</literal></expr>)</condition> <block pos:start="42:26" pos:end="71:23">{<block_content pos:start="43:17" pos:end="71:23">
                <expr_stmt pos:start="43:17" pos:end="43:82"><expr pos:start="43:17" pos:end="43:81"><call pos:start="43:17" pos:end="43:81"><name pos:start="43:17" pos:end="43:22">av_log</name><argument_list pos:start="43:23" pos:end="43:81">(<argument pos:start="43:24" pos:end="43:28"><expr pos:start="43:24" pos:end="43:28"><name pos:start="43:24" pos:end="43:28">avctx</name></expr></argument>, <argument pos:start="43:31" pos:end="43:42"><expr pos:start="43:31" pos:end="43:42"><name pos:start="43:31" pos:end="43:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:45" pos:end="43:80"><expr pos:start="43:45" pos:end="43:80"><literal type="string" pos:start="43:45" pos:end="43:80">"Error parsing the packet header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="44:17" pos:end="44:27">return <expr pos:start="44:24" pos:end="44:26"><name pos:start="44:24" pos:end="44:26">ret</name></expr>;</return>
            <expr_stmt pos:start="45:13" pos:end="45:71"><expr pos:start="45:13" pos:end="45:70"><name pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:30">silk_samplerate</name></name> <operator pos:start="45:32" pos:end="45:32">=</operator> <call pos:start="45:34" pos:end="45:70"><name pos:start="45:34" pos:end="45:52">get_silk_samplerate</name><argument_list pos:start="45:53" pos:end="45:70">(<argument pos:start="45:54" pos:end="45:69"><expr pos:start="45:54" pos:end="45:69"><name pos:start="45:54" pos:end="45:69"><name pos:start="45:54" pos:end="45:54">s</name><operator pos:start="45:55" pos:end="45:56">-&gt;</operator><name pos:start="45:57" pos:end="45:62">packet</name><operator pos:start="45:63" pos:end="45:63">.</operator><name pos:start="45:64" pos:end="45:69">config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="46:9" pos:end="47:72"><expr pos:start="46:9" pos:end="47:71"><name pos:start="46:9" pos:end="46:11">ret</name> <operator pos:start="46:13" pos:end="46:13">=</operator> <call pos:start="46:15" pos:end="47:71"><name pos:start="46:15" pos:end="46:35">opus_decode_subpacket</name><argument_list pos:start="46:36" pos:end="47:71">(<argument pos:start="46:37" pos:end="46:50"><expr pos:start="46:37" pos:end="46:50"><operator pos:start="46:37" pos:end="46:37">&amp;</operator><name pos:start="46:38" pos:end="46:50"><name pos:start="46:38" pos:end="46:38">c</name><operator pos:start="46:39" pos:end="46:40">-&gt;</operator><name pos:start="46:41" pos:end="46:47">streams</name><index pos:start="46:48" pos:end="46:50">[<expr pos:start="46:49" pos:end="46:49"><name pos:start="46:49" pos:end="46:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="46:53" pos:end="46:55"><expr pos:start="46:53" pos:end="46:55"><name pos:start="46:53" pos:end="46:55">buf</name></expr></argument>,
                                    <argument pos:start="47:37" pos:end="47:55"><expr pos:start="47:37" pos:end="47:55"><name pos:start="47:37" pos:end="47:55"><name pos:start="47:37" pos:end="47:37">s</name><operator pos:start="47:38" pos:end="47:39">-&gt;</operator><name pos:start="47:40" pos:end="47:45">packet</name><operator pos:start="47:46" pos:end="47:46">.</operator><name pos:start="47:47" pos:end="47:55">data_size</name></name></expr></argument>, <argument pos:start="47:58" pos:end="47:70"><expr pos:start="47:58" pos:end="47:70"><name pos:start="47:58" pos:end="47:70">coded_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="48:9" pos:end="49:23"><if pos:start="48:9" pos:end="49:23">if <condition pos:start="48:12" pos:end="48:20">(<expr pos:start="48:13" pos:end="48:19"><name pos:start="48:13" pos:end="48:15">ret</name> <operator pos:start="48:17" pos:end="48:17">&lt;</operator> <literal type="number" pos:start="48:19" pos:end="48:19">0</literal></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:23"><block_content pos:start="49:13" pos:end="49:23">
            <return pos:start="49:13" pos:end="49:23">return <expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">ret</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="50:9" pos:end="71:23"><if pos:start="50:9" pos:end="71:23">if <condition pos:start="50:12" pos:end="50:54">(<expr pos:start="50:13" pos:end="50:53"><name pos:start="50:13" pos:end="50:27">decoded_samples</name> <operator pos:start="50:29" pos:end="50:30">&amp;&amp;</operator> <name pos:start="50:32" pos:end="50:34">ret</name> <operator pos:start="50:36" pos:end="50:37">!=</operator> <name pos:start="50:39" pos:end="50:53">decoded_samples</name></expr>)</condition> <block pos:start="50:56" pos:end="71:23">{<block_content pos:start="51:13" pos:end="71:23">
            <expr_stmt pos:start="51:13" pos:end="52:50"><expr pos:start="51:13" pos:end="52:49"><call pos:start="51:13" pos:end="52:49"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="52:49">(<argument pos:start="51:20" pos:end="51:24"><expr pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:24">avctx</name></expr></argument>, <argument pos:start="51:27" pos:end="51:38"><expr pos:start="51:27" pos:end="51:38"><name pos:start="51:27" pos:end="51:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:41" pos:end="52:48"><expr pos:start="51:41" pos:end="52:48"><literal type="string" pos:start="51:41" pos:end="51:79">"Different numbers of decoded samples "</literal>
                   <literal type="string" pos:start="52:20" pos:end="52:48">"in a multi-channel stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:30"><expr pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:23">decoded_samples</name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:29">ret</name></expr>;</expr_stmt>
        <expr_stmt pos:start="54:9" pos:end="54:42"><expr pos:start="54:9" pos:end="54:41"><name pos:start="54:9" pos:end="54:11">buf</name>      <operator pos:start="54:18" pos:end="54:19">+=</operator> <name pos:start="54:21" pos:end="54:41"><name pos:start="54:21" pos:end="54:21">s</name><operator pos:start="54:22" pos:end="54:23">-&gt;</operator><name pos:start="54:24" pos:end="54:29">packet</name><operator pos:start="54:30" pos:end="54:30">.</operator><name pos:start="54:31" pos:end="54:41">packet_size</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="55:9" pos:end="55:42"><expr pos:start="55:9" pos:end="55:41"><name pos:start="55:9" pos:end="55:16">buf_size</name> <operator pos:start="55:18" pos:end="55:19">-=</operator> <name pos:start="55:21" pos:end="55:41"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:29">packet</name><operator pos:start="55:30" pos:end="55:30">.</operator><name pos:start="55:31" pos:end="55:41">packet_size</name></name></expr>;</expr_stmt>
    <for pos:start="56:5" pos:end="71:23">for <control pos:start="56:9" pos:end="56:41">(<init pos:start="56:10" pos:end="56:15"><expr pos:start="56:10" pos:end="56:14"><name pos:start="56:10" pos:end="56:10">i</name> <operator pos:start="56:12" pos:end="56:12">=</operator> <literal type="number" pos:start="56:14" pos:end="56:14">0</literal></expr>;</init> <condition pos:start="56:17" pos:end="56:36"><expr pos:start="56:17" pos:end="56:35"><name pos:start="56:17" pos:end="56:17">i</name> <operator pos:start="56:19" pos:end="56:19">&lt;</operator> <name pos:start="56:21" pos:end="56:35"><name pos:start="56:21" pos:end="56:25">avctx</name><operator pos:start="56:26" pos:end="56:27">-&gt;</operator><name pos:start="56:28" pos:end="56:35">channels</name></name></expr>;</condition> <incr pos:start="56:38" pos:end="56:40"><expr pos:start="56:38" pos:end="56:40"><name pos:start="56:38" pos:end="56:38">i</name><operator pos:start="56:39" pos:end="56:40">++</operator></expr></incr>)</control> <block pos:start="56:43" pos:end="71:23">{<block_content pos:start="57:9" pos:end="71:23">
        <decl_stmt pos:start="57:9" pos:end="57:46"><decl pos:start="57:9" pos:end="57:45"><type pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:18">ChannelMap</name> <modifier pos:start="57:20" pos:end="57:20">*</modifier></type><name pos:start="57:21" pos:end="57:23">map</name> <init pos:start="57:25" pos:end="57:45">= <expr pos:start="57:27" pos:end="57:45"><operator pos:start="57:27" pos:end="57:27">&amp;</operator><name pos:start="57:28" pos:end="57:45"><name pos:start="57:28" pos:end="57:28">c</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:42">channel_maps</name><index pos:start="57:43" pos:end="57:45">[<expr pos:start="57:44" pos:end="57:44"><name pos:start="57:44" pos:end="57:44">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="58:9" pos:end="58:36">/* handle copied channels */</comment>
        <if_stmt pos:start="59:9" pos:end="71:23"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:22">(<expr pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:15">map</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:21">copy</name></name></expr>)</condition> <block pos:start="59:24" pos:end="63:9">{<block_content pos:start="60:13" pos:end="62:39">
            <expr_stmt pos:start="60:13" pos:end="62:39"><expr pos:start="60:13" pos:end="62:38"><call pos:start="60:13" pos:end="62:38"><name pos:start="60:13" pos:end="60:18">memcpy</name><argument_list pos:start="60:19" pos:end="62:38">(<argument pos:start="60:20" pos:end="60:42"><expr pos:start="60:20" pos:end="60:42"><name pos:start="60:20" pos:end="60:42"><name pos:start="60:20" pos:end="60:24">frame</name><operator pos:start="60:25" pos:end="60:26">-&gt;</operator><name pos:start="60:27" pos:end="60:39">extended_data</name><index pos:start="60:40" pos:end="60:42">[<expr pos:start="60:41" pos:end="60:41"><name pos:start="60:41" pos:end="60:41">i</name></expr>]</index></name></expr></argument>,
                   <argument pos:start="61:20" pos:end="61:54"><expr pos:start="61:20" pos:end="61:54"><name pos:start="61:20" pos:end="61:54"><name pos:start="61:20" pos:end="61:24">frame</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:39">extended_data</name><index pos:start="61:40" pos:end="61:54">[<expr pos:start="61:41" pos:end="61:53"><name pos:start="61:41" pos:end="61:53"><name pos:start="61:41" pos:end="61:43">map</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:53">copy_idx</name></name></expr>]</index></name></expr></argument>,
                   <argument pos:start="62:20" pos:end="62:37"><expr pos:start="62:20" pos:end="62:37"><name pos:start="62:20" pos:end="62:37"><name pos:start="62:20" pos:end="62:24">frame</name><operator pos:start="62:25" pos:end="62:26">-&gt;</operator><name pos:start="62:27" pos:end="62:34">linesize</name><index pos:start="62:35" pos:end="62:37">[<expr pos:start="62:36" pos:end="62:36"><literal type="number" pos:start="62:36" pos:end="62:36">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="63:11" pos:end="71:23">else if <condition pos:start="63:19" pos:end="63:32">(<expr pos:start="63:20" pos:end="63:31"><name pos:start="63:20" pos:end="63:31"><name pos:start="63:20" pos:end="63:22">map</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:31">silence</name></name></expr>)</condition> <block pos:start="63:34" pos:end="71:23">{<block_content pos:start="64:13" pos:end="71:23">
            <expr_stmt pos:start="64:13" pos:end="64:67"><expr pos:start="64:13" pos:end="64:66"><call pos:start="64:13" pos:end="64:66"><name pos:start="64:13" pos:end="64:18">memset</name><argument_list pos:start="64:19" pos:end="64:66">(<argument pos:start="64:20" pos:end="64:42"><expr pos:start="64:20" pos:end="64:42"><name pos:start="64:20" pos:end="64:42"><name pos:start="64:20" pos:end="64:24">frame</name><operator pos:start="64:25" pos:end="64:26">-&gt;</operator><name pos:start="64:27" pos:end="64:39">extended_data</name><index pos:start="64:40" pos:end="64:42">[<expr pos:start="64:41" pos:end="64:41"><name pos:start="64:41" pos:end="64:41">i</name></expr>]</index></name></expr></argument>, <argument pos:start="64:45" pos:end="64:45"><expr pos:start="64:45" pos:end="64:45"><literal type="number" pos:start="64:45" pos:end="64:45">0</literal></expr></argument>, <argument pos:start="64:48" pos:end="64:65"><expr pos:start="64:48" pos:end="64:65"><name pos:start="64:48" pos:end="64:65"><name pos:start="64:48" pos:end="64:52">frame</name><operator pos:start="64:53" pos:end="64:54">-&gt;</operator><name pos:start="64:55" pos:end="64:62">linesize</name><index pos:start="64:63" pos:end="64:65">[<expr pos:start="64:64" pos:end="64:64"><literal type="number" pos:start="64:64" pos:end="64:64">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="65:9" pos:end="71:23"><if pos:start="65:9" pos:end="71:23">if <condition pos:start="65:12" pos:end="65:22">(<expr pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:13">c</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:21">gain_i</name></name></expr>)</condition> <block pos:start="65:24" pos:end="71:23">{<block_content pos:start="66:13" pos:end="71:23">
            <expr_stmt pos:start="66:13" pos:end="68:77"><expr pos:start="66:13" pos:end="68:76"><call pos:start="66:13" pos:end="68:76"><name pos:start="66:13" pos:end="66:38"><name pos:start="66:13" pos:end="66:13">c</name><operator pos:start="66:14" pos:end="66:15">-&gt;</operator><name pos:start="66:16" pos:end="66:19">fdsp</name><operator pos:start="66:20" pos:end="66:20">.</operator><name pos:start="66:21" pos:end="66:38">vector_fmul_scalar</name></name><argument_list pos:start="66:39" pos:end="68:76">(<argument pos:start="66:40" pos:end="66:70"><expr pos:start="66:40" pos:end="66:70"><operator pos:start="66:40" pos:end="66:40">(</operator><name pos:start="66:41" pos:end="66:45">float</name><operator pos:start="66:46" pos:end="66:46">*</operator><operator pos:start="66:47" pos:end="66:47">)</operator><name pos:start="66:48" pos:end="66:70"><name pos:start="66:48" pos:end="66:52">frame</name><operator pos:start="66:53" pos:end="66:54">-&gt;</operator><name pos:start="66:55" pos:end="66:67">extended_data</name><index pos:start="66:68" pos:end="66:70">[<expr pos:start="66:69" pos:end="66:69"><name pos:start="66:69" pos:end="66:69">i</name></expr>]</index></name></expr></argument>,
                                       <argument pos:start="67:40" pos:end="67:70"><expr pos:start="67:40" pos:end="67:70"><operator pos:start="67:40" pos:end="67:40">(</operator><name pos:start="67:41" pos:end="67:45">float</name><operator pos:start="67:46" pos:end="67:46">*</operator><operator pos:start="67:47" pos:end="67:47">)</operator><name pos:start="67:48" pos:end="67:70"><name pos:start="67:48" pos:end="67:52">frame</name><operator pos:start="67:53" pos:end="67:54">-&gt;</operator><name pos:start="67:55" pos:end="67:67">extended_data</name><index pos:start="67:68" pos:end="67:70">[<expr pos:start="67:69" pos:end="67:69"><name pos:start="67:69" pos:end="67:69">i</name></expr>]</index></name></expr></argument>,
                                       <argument pos:start="68:40" pos:end="68:46"><expr pos:start="68:40" pos:end="68:46"><name pos:start="68:40" pos:end="68:46"><name pos:start="68:40" pos:end="68:40">c</name><operator pos:start="68:41" pos:end="68:42">-&gt;</operator><name pos:start="68:43" pos:end="68:46">gain</name></name></expr></argument>, <argument pos:start="68:49" pos:end="68:75"><expr pos:start="68:49" pos:end="68:75"><call pos:start="68:49" pos:end="68:75"><name pos:start="68:49" pos:end="68:55">FFALIGN</name><argument_list pos:start="68:56" pos:end="68:75">(<argument pos:start="68:57" pos:end="68:71"><expr pos:start="68:57" pos:end="68:71"><name pos:start="68:57" pos:end="68:71">decoded_samples</name></expr></argument>, <argument pos:start="68:74" pos:end="68:74"><expr pos:start="68:74" pos:end="68:74"><literal type="number" pos:start="68:74" pos:end="68:74">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="69:5" pos:end="69:40"><expr pos:start="69:5" pos:end="69:39"><name pos:start="69:5" pos:end="69:21"><name pos:start="69:5" pos:end="69:9">frame</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:21">nb_samples</name></name> <operator pos:start="69:23" pos:end="69:23">=</operator> <name pos:start="69:25" pos:end="69:39">decoded_samples</name></expr>;</expr_stmt>
    <expr_stmt pos:start="70:5" pos:end="70:42"><expr pos:start="70:5" pos:end="70:41"><operator pos:start="70:5" pos:end="70:5">*</operator><name pos:start="70:6" pos:end="70:18">got_frame_ptr</name>    <operator pos:start="70:23" pos:end="70:23">=</operator> <operator pos:start="70:25" pos:end="70:25">!</operator><operator pos:start="70:26" pos:end="70:26">!</operator><name pos:start="70:27" pos:end="70:41">decoded_samples</name></expr>;</expr_stmt>
    <return pos:start="71:5" pos:end="71:23">return <expr pos:start="71:12" pos:end="71:22"><name pos:start="71:12" pos:end="71:22"><name pos:start="71:12" pos:end="71:16">avpkt</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:22">size</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
