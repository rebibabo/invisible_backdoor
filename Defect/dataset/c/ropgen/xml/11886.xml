<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11886.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">v4l2_set_parameters</name><parameter_list pos:start="1:31" pos:end="1:75">(<parameter pos:start="1:32" pos:end="1:50"><decl pos:start="1:32" pos:end="1:50"><type pos:start="1:32" pos:end="1:50"><name pos:start="1:32" pos:end="1:46">AVFormatContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">s1</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:74"><decl pos:start="1:53" pos:end="1:74"><type pos:start="1:53" pos:end="1:74"><name pos:start="1:53" pos:end="1:70">AVFormatParameters</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:74">ap</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="195:1">{<block_content pos:start="5:5" pos:end="193:13">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:21">video_data</name></name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:24">s</name> <init pos:start="5:26" pos:end="5:40">= <expr pos:start="5:28" pos:end="5:40"><name pos:start="5:28" pos:end="5:40"><name pos:start="5:28" pos:end="5:29">s1</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:21">v4l2_input</name></name></type> <name pos:start="7:23" pos:end="7:27">input</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:24">v4l2_standard</name></name></type> <name pos:start="9:26" pos:end="9:33">standard</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:26">v4l2_streamparm</name></name></type> <name pos:start="11:28" pos:end="11:37">streamparm</name> <init pos:start="11:39" pos:end="11:45">= <expr pos:start="11:41" pos:end="11:45"><block pos:start="11:41" pos:end="11:45">{ <expr pos:start="11:43" pos:end="11:43"><literal type="number" pos:start="11:43" pos:end="11:43">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:67"><decl pos:start="13:5" pos:end="13:66"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:21">v4l2_fract</name></name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:26">tpf</name> <init pos:start="13:28" pos:end="13:66">= <expr pos:start="13:30" pos:end="13:66"><operator pos:start="13:30" pos:end="13:30">&amp;</operator><name pos:start="13:31" pos:end="13:66"><name pos:start="13:31" pos:end="13:40">streamparm</name><operator pos:start="13:41" pos:end="13:41">.</operator><name pos:start="13:42" pos:end="13:45">parm</name><operator pos:start="13:46" pos:end="13:46">.</operator><name pos:start="13:47" pos:end="13:53">capture</name><operator pos:start="13:54" pos:end="13:54">.</operator><name pos:start="13:55" pos:end="13:66">timeperframe</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="24:0"><expr pos:start="19:5" pos:end="19:49"><name pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:14">streamparm</name><operator pos:start="19:15" pos:end="19:15">.</operator><name pos:start="19:16" pos:end="19:19">type</name></name> <operator pos:start="19:21" pos:end="19:21">=</operator> <name pos:start="19:23" pos:end="19:49">V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>;</expr_stmt>



<cpp:if pos:start="23:1" pos:end="23:28">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:28">FF_API_FORMAT_PARAMETERS</name></expr></cpp:if>

    <if_stmt pos:start="25:5" pos:end="30:0"><if pos:start="25:5" pos:end="30:0">if <condition pos:start="25:8" pos:end="25:24">(<expr pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:10">ap</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:19">channel</name></name> <operator pos:start="25:21" pos:end="25:21">&gt;</operator> <literal type="number" pos:start="25:23" pos:end="25:23">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="30:0"><block_content pos:start="27:9" pos:end="30:0">

        <expr_stmt pos:start="27:9" pos:end="30:0"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:18">channel</name></name> <operator pos:start="27:20" pos:end="27:20">=</operator> <name pos:start="27:22" pos:end="27:32"><name pos:start="27:22" pos:end="27:23">ap</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:32">channel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="33:5" pos:end="33:28">/* set tv video input */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><call pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:10">memset</name> <argument_list pos:start="35:12" pos:end="35:38">(<argument pos:start="35:13" pos:end="35:18"><expr pos:start="35:13" pos:end="35:18"><operator pos:start="35:13" pos:end="35:13">&amp;</operator><name pos:start="35:14" pos:end="35:18">input</name></expr></argument>, <argument pos:start="35:21" pos:end="35:21"><expr pos:start="35:21" pos:end="35:21"><literal type="number" pos:start="35:21" pos:end="35:21">0</literal></expr></argument>, <argument pos:start="35:24" pos:end="35:37"><expr pos:start="35:24" pos:end="35:37"><sizeof pos:start="35:24" pos:end="35:37">sizeof <argument_list pos:start="35:31" pos:end="35:37">(<argument pos:start="35:32" pos:end="35:36"><expr pos:start="35:32" pos:end="35:36"><name pos:start="35:32" pos:end="35:36">input</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:9">input</name><operator pos:start="37:10" pos:end="37:10">.</operator><name pos:start="37:11" pos:end="37:15">index</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:28"><name pos:start="37:19" pos:end="37:19">s</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:28">channel</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:51">(<expr pos:start="39:9" pos:end="39:50"><call pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:13">ioctl</name><argument_list pos:start="39:14" pos:end="39:46">(<argument pos:start="39:15" pos:end="39:19"><expr pos:start="39:15" pos:end="39:19"><name pos:start="39:15" pos:end="39:19"><name pos:start="39:15" pos:end="39:15">s</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:19">fd</name></name></expr></argument>, <argument pos:start="39:22" pos:end="39:37"><expr pos:start="39:22" pos:end="39:37"><name pos:start="39:22" pos:end="39:37">VIDIOC_ENUMINPUT</name></expr></argument>, <argument pos:start="39:40" pos:end="39:45"><expr pos:start="39:40" pos:end="39:45"><operator pos:start="39:40" pos:end="39:40">&amp;</operator><name pos:start="39:41" pos:end="39:45">input</name></expr></argument>)</argument_list></call> <operator pos:start="39:48" pos:end="39:48">&lt;</operator> <literal type="number" pos:start="39:50" pos:end="39:50">0</literal></expr>)</condition> <block pos:start="39:53" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:28">

        <expr_stmt pos:start="41:9" pos:end="41:79"><expr pos:start="41:9" pos:end="41:78"><call pos:start="41:9" pos:end="41:78"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:78">(<argument pos:start="41:16" pos:end="41:17"><expr pos:start="41:16" pos:end="41:17"><name pos:start="41:16" pos:end="41:17">s1</name></expr></argument>, <argument pos:start="41:20" pos:end="41:31"><expr pos:start="41:20" pos:end="41:31"><name pos:start="41:20" pos:end="41:31">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:34" pos:end="41:77"><expr pos:start="41:34" pos:end="41:77"><literal type="string" pos:start="41:34" pos:end="41:77">"The V4L2 driver ioctl enum input failed:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:28">return <expr pos:start="43:16" pos:end="43:27"><call pos:start="43:16" pos:end="43:27"><name pos:start="43:16" pos:end="43:22">AVERROR</name><argument_list pos:start="43:23" pos:end="43:27">(<argument pos:start="43:24" pos:end="43:26"><expr pos:start="43:24" pos:end="43:26"><name pos:start="43:24" pos:end="43:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="51:36"><expr pos:start="49:5" pos:end="51:35"><call pos:start="49:5" pos:end="51:35"><name pos:start="49:5" pos:end="49:10">av_log</name><argument_list pos:start="49:11" pos:end="51:35">(<argument pos:start="49:12" pos:end="49:13"><expr pos:start="49:12" pos:end="49:13"><name pos:start="49:12" pos:end="49:13">s1</name></expr></argument>, <argument pos:start="49:16" pos:end="49:27"><expr pos:start="49:16" pos:end="49:27"><name pos:start="49:16" pos:end="49:27">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="49:30" pos:end="49:76"><expr pos:start="49:30" pos:end="49:76"><literal type="string" pos:start="49:30" pos:end="49:76">"The V4L2 driver set input_id: %d, input: %s\n"</literal></expr></argument>,

            <argument pos:start="51:13" pos:end="51:22"><expr pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:22">channel</name></name></expr></argument>, <argument pos:start="51:25" pos:end="51:34"><expr pos:start="51:25" pos:end="51:34"><name pos:start="51:25" pos:end="51:34"><name pos:start="51:25" pos:end="51:29">input</name><operator pos:start="51:30" pos:end="51:30">.</operator><name pos:start="51:31" pos:end="51:34">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="66:0"><if pos:start="53:5" pos:end="66:0">if <condition pos:start="53:8" pos:end="53:55">(<expr pos:start="53:9" pos:end="53:54"><call pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:13">ioctl</name><argument_list pos:start="53:14" pos:end="53:50">(<argument pos:start="53:15" pos:end="53:19"><expr pos:start="53:15" pos:end="53:19"><name pos:start="53:15" pos:end="53:19"><name pos:start="53:15" pos:end="53:15">s</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:19">fd</name></name></expr></argument>, <argument pos:start="53:22" pos:end="53:35"><expr pos:start="53:22" pos:end="53:35"><name pos:start="53:22" pos:end="53:35">VIDIOC_S_INPUT</name></expr></argument>, <argument pos:start="53:38" pos:end="53:49"><expr pos:start="53:38" pos:end="53:49"><operator pos:start="53:38" pos:end="53:38">&amp;</operator><name pos:start="53:39" pos:end="53:49"><name pos:start="53:39" pos:end="53:43">input</name><operator pos:start="53:44" pos:end="53:44">.</operator><name pos:start="53:45" pos:end="53:49">index</name></name></expr></argument>)</argument_list></call> <operator pos:start="53:52" pos:end="53:52">&lt;</operator> <literal type="number" pos:start="53:54" pos:end="53:54">0</literal></expr>)</condition> <block pos:start="53:57" pos:end="66:0">{<block_content pos:start="55:9" pos:end="59:28">

        <expr_stmt pos:start="55:9" pos:end="57:28"><expr pos:start="55:9" pos:end="57:27"><call pos:start="55:9" pos:end="57:27"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="57:27">(<argument pos:start="55:16" pos:end="55:17"><expr pos:start="55:16" pos:end="55:17"><name pos:start="55:16" pos:end="55:17">s1</name></expr></argument>, <argument pos:start="55:20" pos:end="55:31"><expr pos:start="55:20" pos:end="55:31"><name pos:start="55:20" pos:end="55:31">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:34" pos:end="55:79"><expr pos:start="55:34" pos:end="55:79"><literal type="string" pos:start="55:34" pos:end="55:79">"The V4L2 driver ioctl set input(%d) failed\n"</literal></expr></argument>,

                <argument pos:start="57:17" pos:end="57:26"><expr pos:start="57:17" pos:end="57:26"><name pos:start="57:17" pos:end="57:26"><name pos:start="57:17" pos:end="57:17">s</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:26">channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:28">return <expr pos:start="59:16" pos:end="59:27"><call pos:start="59:16" pos:end="59:27"><name pos:start="59:16" pos:end="59:22">AVERROR</name><argument_list pos:start="59:23" pos:end="59:27">(<argument pos:start="59:24" pos:end="59:26"><expr pos:start="59:24" pos:end="59:26"><name pos:start="59:24" pos:end="59:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="65:1" pos:end="65:28">#<cpp:directive pos:start="65:2" pos:end="65:3">if</cpp:directive> <expr pos:start="65:5" pos:end="65:28"><name pos:start="65:5" pos:end="65:28">FF_API_FORMAT_PARAMETERS</name></expr></cpp:if>

    <if_stmt pos:start="67:5" pos:end="76:0"><if pos:start="67:5" pos:end="76:0">if <condition pos:start="67:8" pos:end="67:21">(<expr pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:10">ap</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:20">standard</name></name></expr>)</condition> <block pos:start="67:23" pos:end="76:0">{<block_content pos:start="69:9" pos:end="71:46">

        <expr_stmt pos:start="69:9" pos:end="69:31"><expr pos:start="69:9" pos:end="69:30"><call pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:16">av_freep</name><argument_list pos:start="69:17" pos:end="69:30">(<argument pos:start="69:18" pos:end="69:29"><expr pos:start="69:18" pos:end="69:29"><operator pos:start="69:18" pos:end="69:18">&amp;</operator><name pos:start="69:19" pos:end="69:29"><name pos:start="69:19" pos:end="69:19">s</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:29">standard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:46"><expr pos:start="71:9" pos:end="71:45"><name pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:19">standard</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:45"><name pos:start="71:23" pos:end="71:31">av_strdup</name><argument_list pos:start="71:32" pos:end="71:45">(<argument pos:start="71:33" pos:end="71:44"><expr pos:start="71:33" pos:end="71:44"><name pos:start="71:33" pos:end="71:44"><name pos:start="71:33" pos:end="71:34">ap</name><operator pos:start="71:35" pos:end="71:36">-&gt;</operator><name pos:start="71:37" pos:end="71:44">standard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="79:5" pos:end="129:5"><if pos:start="79:5" pos:end="129:5">if <condition pos:start="79:8" pos:end="79:20">(<expr pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:19">standard</name></name></expr>)</condition> <block pos:start="79:22" pos:end="129:5">{<block_content pos:start="81:9" pos:end="127:9">

        <expr_stmt pos:start="81:9" pos:end="83:28"><expr pos:start="81:9" pos:end="83:27"><call pos:start="81:9" pos:end="83:27"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="83:27">(<argument pos:start="81:16" pos:end="81:17"><expr pos:start="81:16" pos:end="81:17"><name pos:start="81:16" pos:end="81:17">s1</name></expr></argument>, <argument pos:start="81:20" pos:end="81:31"><expr pos:start="81:20" pos:end="81:31"><name pos:start="81:20" pos:end="81:31">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="81:34" pos:end="81:69"><expr pos:start="81:34" pos:end="81:69"><literal type="string" pos:start="81:34" pos:end="81:69">"The V4L2 driver set standard: %s\n"</literal></expr></argument>,

               <argument pos:start="83:16" pos:end="83:26"><expr pos:start="83:16" pos:end="83:26"><name pos:start="83:16" pos:end="83:26"><name pos:start="83:16" pos:end="83:16">s</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:26">standard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="85:9" pos:end="85:29">/* set tv standard */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:49"><expr pos:start="87:9" pos:end="87:48"><call pos:start="87:9" pos:end="87:48"><name pos:start="87:9" pos:end="87:14">memset</name> <argument_list pos:start="87:16" pos:end="87:48">(<argument pos:start="87:17" pos:end="87:25"><expr pos:start="87:17" pos:end="87:25"><operator pos:start="87:17" pos:end="87:17">&amp;</operator><name pos:start="87:18" pos:end="87:25">standard</name></expr></argument>, <argument pos:start="87:28" pos:end="87:28"><expr pos:start="87:28" pos:end="87:28"><literal type="number" pos:start="87:28" pos:end="87:28">0</literal></expr></argument>, <argument pos:start="87:31" pos:end="87:47"><expr pos:start="87:31" pos:end="87:47"><sizeof pos:start="87:31" pos:end="87:47">sizeof <argument_list pos:start="87:38" pos:end="87:47">(<argument pos:start="87:39" pos:end="87:46"><expr pos:start="87:39" pos:end="87:46"><name pos:start="87:39" pos:end="87:46">standard</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="89:9" pos:end="111:9">for<control pos:start="89:12" pos:end="89:21">(<init pos:start="89:13" pos:end="89:16"><expr pos:start="89:13" pos:end="89:15"><name pos:start="89:13" pos:end="89:13">i</name><operator pos:start="89:14" pos:end="89:14">=</operator><literal type="number" pos:start="89:15" pos:end="89:15">0</literal></expr>;</init><condition pos:start="89:17" pos:end="89:17">;</condition><incr pos:start="89:18" pos:end="89:20"><expr pos:start="89:18" pos:end="89:20"><name pos:start="89:18" pos:end="89:18">i</name><operator pos:start="89:19" pos:end="89:20">++</operator></expr></incr>)</control> <block pos:start="89:23" pos:end="111:9">{<block_content pos:start="91:13" pos:end="109:13">

            <expr_stmt pos:start="91:13" pos:end="91:31"><expr pos:start="91:13" pos:end="91:30"><name pos:start="91:13" pos:end="91:26"><name pos:start="91:13" pos:end="91:20">standard</name><operator pos:start="91:21" pos:end="91:21">.</operator><name pos:start="91:22" pos:end="91:26">index</name></name> <operator pos:start="91:28" pos:end="91:28">=</operator> <name pos:start="91:30" pos:end="91:30">i</name></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="101:13"><if pos:start="93:13" pos:end="101:13">if <condition pos:start="93:16" pos:end="93:60">(<expr pos:start="93:17" pos:end="93:59"><call pos:start="93:17" pos:end="93:55"><name pos:start="93:17" pos:end="93:21">ioctl</name><argument_list pos:start="93:22" pos:end="93:55">(<argument pos:start="93:23" pos:end="93:27"><expr pos:start="93:23" pos:end="93:27"><name pos:start="93:23" pos:end="93:27"><name pos:start="93:23" pos:end="93:23">s</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:27">fd</name></name></expr></argument>, <argument pos:start="93:30" pos:end="93:43"><expr pos:start="93:30" pos:end="93:43"><name pos:start="93:30" pos:end="93:43">VIDIOC_ENUMSTD</name></expr></argument>, <argument pos:start="93:46" pos:end="93:54"><expr pos:start="93:46" pos:end="93:54"><operator pos:start="93:46" pos:end="93:46">&amp;</operator><name pos:start="93:47" pos:end="93:54">standard</name></expr></argument>)</argument_list></call> <operator pos:start="93:57" pos:end="93:57">&lt;</operator> <literal type="number" pos:start="93:59" pos:end="93:59">0</literal></expr>)</condition> <block pos:start="93:62" pos:end="101:13">{<block_content pos:start="95:17" pos:end="99:36">

                <expr_stmt pos:start="95:17" pos:end="97:36"><expr pos:start="95:17" pos:end="97:35"><call pos:start="95:17" pos:end="97:35"><name pos:start="95:17" pos:end="95:22">av_log</name><argument_list pos:start="95:23" pos:end="97:35">(<argument pos:start="95:24" pos:end="95:25"><expr pos:start="95:24" pos:end="95:25"><name pos:start="95:24" pos:end="95:25">s1</name></expr></argument>, <argument pos:start="95:28" pos:end="95:39"><expr pos:start="95:28" pos:end="95:39"><name pos:start="95:28" pos:end="95:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:42" pos:end="95:90"><expr pos:start="95:42" pos:end="95:90"><literal type="string" pos:start="95:42" pos:end="95:90">"The V4L2 driver ioctl set standard(%s) failed\n"</literal></expr></argument>,

                       <argument pos:start="97:24" pos:end="97:34"><expr pos:start="97:24" pos:end="97:34"><name pos:start="97:24" pos:end="97:34"><name pos:start="97:24" pos:end="97:24">s</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:34">standard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="99:17" pos:end="99:36">return <expr pos:start="99:24" pos:end="99:35"><call pos:start="99:24" pos:end="99:35"><name pos:start="99:24" pos:end="99:30">AVERROR</name><argument_list pos:start="99:31" pos:end="99:35">(<argument pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><name pos:start="99:32" pos:end="99:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="105:13" pos:end="109:13"><if pos:start="105:13" pos:end="109:13">if <condition pos:start="105:16" pos:end="105:56">(<expr pos:start="105:17" pos:end="105:55"><operator pos:start="105:17" pos:end="105:17">!</operator><call pos:start="105:18" pos:end="105:55"><name pos:start="105:18" pos:end="105:27">strcasecmp</name><argument_list pos:start="105:28" pos:end="105:55">(<argument pos:start="105:29" pos:end="105:41"><expr pos:start="105:29" pos:end="105:41"><name pos:start="105:29" pos:end="105:41"><name pos:start="105:29" pos:end="105:36">standard</name><operator pos:start="105:37" pos:end="105:37">.</operator><name pos:start="105:38" pos:end="105:41">name</name></name></expr></argument>, <argument pos:start="105:44" pos:end="105:54"><expr pos:start="105:44" pos:end="105:54"><name pos:start="105:44" pos:end="105:54"><name pos:start="105:44" pos:end="105:44">s</name><operator pos:start="105:45" pos:end="105:46">-&gt;</operator><name pos:start="105:47" pos:end="105:54">standard</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:58" pos:end="109:13">{<block_content pos:start="107:17" pos:end="107:22">

                <break pos:start="107:17" pos:end="107:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="115:9" pos:end="117:51"><expr pos:start="115:9" pos:end="117:50"><call pos:start="115:9" pos:end="117:50"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="117:50">(<argument pos:start="115:16" pos:end="115:17"><expr pos:start="115:16" pos:end="115:17"><name pos:start="115:16" pos:end="115:17">s1</name></expr></argument>, <argument pos:start="115:20" pos:end="115:31"><expr pos:start="115:20" pos:end="115:31"><name pos:start="115:20" pos:end="115:31">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="115:34" pos:end="115:84"><expr pos:start="115:34" pos:end="115:84"><literal type="string" pos:start="115:34" pos:end="115:74">"The V4L2 driver set standard: %s, id: %"</literal><name pos:start="115:75" pos:end="115:80">PRIu64</name><literal type="string" pos:start="115:81" pos:end="115:84">"\n"</literal></expr></argument>,

               <argument pos:start="117:16" pos:end="117:26"><expr pos:start="117:16" pos:end="117:26"><name pos:start="117:16" pos:end="117:26"><name pos:start="117:16" pos:end="117:16">s</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:26">standard</name></name></expr></argument>, <argument pos:start="117:29" pos:end="117:49"><expr pos:start="117:29" pos:end="117:49"><operator pos:start="117:29" pos:end="117:29">(</operator><name pos:start="117:30" pos:end="117:37">uint64_t</name><operator pos:start="117:38" pos:end="117:38">)</operator><name pos:start="117:39" pos:end="117:49"><name pos:start="117:39" pos:end="117:46">standard</name><operator pos:start="117:47" pos:end="117:47">.</operator><name pos:start="117:48" pos:end="117:49">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="127:9"><if pos:start="119:9" pos:end="127:9">if <condition pos:start="119:12" pos:end="119:57">(<expr pos:start="119:13" pos:end="119:56"><call pos:start="119:13" pos:end="119:52"><name pos:start="119:13" pos:end="119:17">ioctl</name><argument_list pos:start="119:18" pos:end="119:52">(<argument pos:start="119:19" pos:end="119:23"><expr pos:start="119:19" pos:end="119:23"><name pos:start="119:19" pos:end="119:23"><name pos:start="119:19" pos:end="119:19">s</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:23">fd</name></name></expr></argument>, <argument pos:start="119:26" pos:end="119:37"><expr pos:start="119:26" pos:end="119:37"><name pos:start="119:26" pos:end="119:37">VIDIOC_S_STD</name></expr></argument>, <argument pos:start="119:40" pos:end="119:51"><expr pos:start="119:40" pos:end="119:51"><operator pos:start="119:40" pos:end="119:40">&amp;</operator><name pos:start="119:41" pos:end="119:51"><name pos:start="119:41" pos:end="119:48">standard</name><operator pos:start="119:49" pos:end="119:49">.</operator><name pos:start="119:50" pos:end="119:51">id</name></name></expr></argument>)</argument_list></call> <operator pos:start="119:54" pos:end="119:54">&lt;</operator> <literal type="number" pos:start="119:56" pos:end="119:56">0</literal></expr>)</condition> <block pos:start="119:59" pos:end="127:9">{<block_content pos:start="121:13" pos:end="125:32">

            <expr_stmt pos:start="121:13" pos:end="123:32"><expr pos:start="121:13" pos:end="123:31"><call pos:start="121:13" pos:end="123:31"><name pos:start="121:13" pos:end="121:18">av_log</name><argument_list pos:start="121:19" pos:end="123:31">(<argument pos:start="121:20" pos:end="121:21"><expr pos:start="121:20" pos:end="121:21"><name pos:start="121:20" pos:end="121:21">s1</name></expr></argument>, <argument pos:start="121:24" pos:end="121:35"><expr pos:start="121:24" pos:end="121:35"><name pos:start="121:24" pos:end="121:35">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:38" pos:end="121:86"><expr pos:start="121:38" pos:end="121:86"><literal type="string" pos:start="121:38" pos:end="121:86">"The V4L2 driver ioctl set standard(%s) failed\n"</literal></expr></argument>,

                   <argument pos:start="123:20" pos:end="123:30"><expr pos:start="123:20" pos:end="123:30"><name pos:start="123:20" pos:end="123:30"><name pos:start="123:20" pos:end="123:20">s</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:30">standard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="125:13" pos:end="125:32">return <expr pos:start="125:20" pos:end="125:31"><call pos:start="125:20" pos:end="125:31"><name pos:start="125:20" pos:end="125:26">AVERROR</name><argument_list pos:start="125:27" pos:end="125:31">(<argument pos:start="125:28" pos:end="125:30"><expr pos:start="125:28" pos:end="125:30"><name pos:start="125:28" pos:end="125:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:27"><expr pos:start="131:5" pos:end="131:26"><call pos:start="131:5" pos:end="131:26"><name pos:start="131:5" pos:end="131:12">av_freep</name><argument_list pos:start="131:13" pos:end="131:26">(<argument pos:start="131:14" pos:end="131:25"><expr pos:start="131:14" pos:end="131:25"><operator pos:start="131:14" pos:end="131:14">&amp;</operator><name pos:start="131:15" pos:end="131:25"><name pos:start="131:15" pos:end="131:15">s</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:25">standard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="135:5" pos:end="185:5"><if pos:start="135:5" pos:end="173:5">if <condition pos:start="135:8" pos:end="135:47">(<expr pos:start="135:9" pos:end="135:46"><name pos:start="135:9" pos:end="135:25"><name pos:start="135:9" pos:end="135:10">ap</name><operator pos:start="135:11" pos:end="135:12">-&gt;</operator><name pos:start="135:13" pos:end="135:21">time_base</name><operator pos:start="135:22" pos:end="135:22">.</operator><name pos:start="135:23" pos:end="135:25">num</name></name> <operator pos:start="135:27" pos:end="135:28">&amp;&amp;</operator> <name pos:start="135:30" pos:end="135:46"><name pos:start="135:30" pos:end="135:31">ap</name><operator pos:start="135:32" pos:end="135:33">-&gt;</operator><name pos:start="135:34" pos:end="135:42">time_base</name><operator pos:start="135:43" pos:end="135:43">.</operator><name pos:start="135:44" pos:end="135:46">den</name></name></expr>)</condition> <block pos:start="135:49" pos:end="173:5">{<block_content pos:start="137:9" pos:end="171:9">

        <expr_stmt pos:start="137:9" pos:end="139:53"><expr pos:start="137:9" pos:end="139:52"><call pos:start="137:9" pos:end="139:52"><name pos:start="137:9" pos:end="137:14">av_log</name><argument_list pos:start="137:15" pos:end="139:52">(<argument pos:start="137:16" pos:end="137:17"><expr pos:start="137:16" pos:end="137:17"><name pos:start="137:16" pos:end="137:17">s1</name></expr></argument>, <argument pos:start="137:20" pos:end="137:31"><expr pos:start="137:20" pos:end="137:31"><name pos:start="137:20" pos:end="137:31">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="137:34" pos:end="137:68"><expr pos:start="137:34" pos:end="137:68"><literal type="string" pos:start="137:34" pos:end="137:68">"Setting time per frame to %d/%d\n"</literal></expr></argument>,

               <argument pos:start="139:16" pos:end="139:32"><expr pos:start="139:16" pos:end="139:32"><name pos:start="139:16" pos:end="139:32"><name pos:start="139:16" pos:end="139:17">ap</name><operator pos:start="139:18" pos:end="139:19">-&gt;</operator><name pos:start="139:20" pos:end="139:28">time_base</name><operator pos:start="139:29" pos:end="139:29">.</operator><name pos:start="139:30" pos:end="139:32">num</name></name></expr></argument>, <argument pos:start="139:35" pos:end="139:51"><expr pos:start="139:35" pos:end="139:51"><name pos:start="139:35" pos:end="139:51"><name pos:start="139:35" pos:end="139:36">ap</name><operator pos:start="139:37" pos:end="139:38">-&gt;</operator><name pos:start="139:39" pos:end="139:47">time_base</name><operator pos:start="139:48" pos:end="139:48">.</operator><name pos:start="139:49" pos:end="139:51">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:43"><expr pos:start="141:9" pos:end="141:42"><name pos:start="141:9" pos:end="141:22"><name pos:start="141:9" pos:end="141:11">tpf</name><operator pos:start="141:12" pos:end="141:13">-&gt;</operator><name pos:start="141:14" pos:end="141:22">numerator</name></name> <operator pos:start="141:24" pos:end="141:24">=</operator> <name pos:start="141:26" pos:end="141:42"><name pos:start="141:26" pos:end="141:27">ap</name><operator pos:start="141:28" pos:end="141:29">-&gt;</operator><name pos:start="141:30" pos:end="141:38">time_base</name><operator pos:start="141:39" pos:end="141:39">.</operator><name pos:start="141:40" pos:end="141:42">num</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:45"><expr pos:start="143:9" pos:end="143:44"><name pos:start="143:9" pos:end="143:24"><name pos:start="143:9" pos:end="143:11">tpf</name><operator pos:start="143:12" pos:end="143:13">-&gt;</operator><name pos:start="143:14" pos:end="143:24">denominator</name></name> <operator pos:start="143:26" pos:end="143:26">=</operator> <name pos:start="143:28" pos:end="143:44"><name pos:start="143:28" pos:end="143:29">ap</name><operator pos:start="143:30" pos:end="143:31">-&gt;</operator><name pos:start="143:32" pos:end="143:40">time_base</name><operator pos:start="143:41" pos:end="143:41">.</operator><name pos:start="143:42" pos:end="143:44">den</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="145:9" pos:end="155:9"><if pos:start="145:9" pos:end="155:9">if <condition pos:start="145:12" pos:end="145:58">(<expr pos:start="145:13" pos:end="145:57"><call pos:start="145:13" pos:end="145:52"><name pos:start="145:13" pos:end="145:17">ioctl</name><argument_list pos:start="145:18" pos:end="145:52">(<argument pos:start="145:19" pos:end="145:23"><expr pos:start="145:19" pos:end="145:23"><name pos:start="145:19" pos:end="145:23"><name pos:start="145:19" pos:end="145:19">s</name><operator pos:start="145:20" pos:end="145:21">-&gt;</operator><name pos:start="145:22" pos:end="145:23">fd</name></name></expr></argument>, <argument pos:start="145:26" pos:end="145:38"><expr pos:start="145:26" pos:end="145:38"><name pos:start="145:26" pos:end="145:38">VIDIOC_S_PARM</name></expr></argument>, <argument pos:start="145:41" pos:end="145:51"><expr pos:start="145:41" pos:end="145:51"><operator pos:start="145:41" pos:end="145:41">&amp;</operator><name pos:start="145:42" pos:end="145:51">streamparm</name></expr></argument>)</argument_list></call> <operator pos:start="145:54" pos:end="145:55">!=</operator> <literal type="number" pos:start="145:57" pos:end="145:57">0</literal></expr>)</condition> <block pos:start="145:60" pos:end="155:9">{<block_content pos:start="147:13" pos:end="153:32">

            <expr_stmt pos:start="147:13" pos:end="151:57"><expr pos:start="147:13" pos:end="151:56"><call pos:start="147:13" pos:end="151:56"><name pos:start="147:13" pos:end="147:18">av_log</name><argument_list pos:start="147:19" pos:end="151:56">(<argument pos:start="147:20" pos:end="147:21"><expr pos:start="147:20" pos:end="147:21"><name pos:start="147:20" pos:end="147:21">s1</name></expr></argument>, <argument pos:start="147:24" pos:end="147:35"><expr pos:start="147:24" pos:end="147:35"><name pos:start="147:24" pos:end="147:35">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="149:20" pos:end="149:61"><expr pos:start="149:20" pos:end="149:61"><literal type="string" pos:start="149:20" pos:end="149:61">"ioctl set time per frame(%d/%d) failed\n"</literal></expr></argument>,

                   <argument pos:start="151:20" pos:end="151:36"><expr pos:start="151:20" pos:end="151:36"><name pos:start="151:20" pos:end="151:36"><name pos:start="151:20" pos:end="151:21">ap</name><operator pos:start="151:22" pos:end="151:23">-&gt;</operator><name pos:start="151:24" pos:end="151:32">time_base</name><operator pos:start="151:33" pos:end="151:33">.</operator><name pos:start="151:34" pos:end="151:36">num</name></name></expr></argument>, <argument pos:start="151:39" pos:end="151:55"><expr pos:start="151:39" pos:end="151:55"><name pos:start="151:39" pos:end="151:55"><name pos:start="151:39" pos:end="151:40">ap</name><operator pos:start="151:41" pos:end="151:42">-&gt;</operator><name pos:start="151:43" pos:end="151:51">time_base</name><operator pos:start="151:52" pos:end="151:52">.</operator><name pos:start="151:53" pos:end="151:55">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="153:13" pos:end="153:32">return <expr pos:start="153:20" pos:end="153:31"><call pos:start="153:20" pos:end="153:31"><name pos:start="153:20" pos:end="153:26">AVERROR</name><argument_list pos:start="153:27" pos:end="153:31">(<argument pos:start="153:28" pos:end="153:30"><expr pos:start="153:28" pos:end="153:30"><name pos:start="153:28" pos:end="153:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="159:9" pos:end="171:9"><if pos:start="159:9" pos:end="171:9">if <condition pos:start="159:12" pos:end="161:48">(<expr pos:start="159:13" pos:end="161:47"><name pos:start="159:13" pos:end="159:29"><name pos:start="159:13" pos:end="159:14">ap</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:25">time_base</name><operator pos:start="159:26" pos:end="159:26">.</operator><name pos:start="159:27" pos:end="159:29">den</name></name> <operator pos:start="159:31" pos:end="159:32">!=</operator> <name pos:start="159:34" pos:end="159:49"><name pos:start="159:34" pos:end="159:36">tpf</name><operator pos:start="159:37" pos:end="159:38">-&gt;</operator><name pos:start="159:39" pos:end="159:49">denominator</name></name> <operator pos:start="159:51" pos:end="159:52">||</operator>

            <name pos:start="161:13" pos:end="161:29"><name pos:start="161:13" pos:end="161:14">ap</name><operator pos:start="161:15" pos:end="161:16">-&gt;</operator><name pos:start="161:17" pos:end="161:25">time_base</name><operator pos:start="161:26" pos:end="161:26">.</operator><name pos:start="161:27" pos:end="161:29">num</name></name> <operator pos:start="161:31" pos:end="161:32">!=</operator> <name pos:start="161:34" pos:end="161:47"><name pos:start="161:34" pos:end="161:36">tpf</name><operator pos:start="161:37" pos:end="161:38">-&gt;</operator><name pos:start="161:39" pos:end="161:47">numerator</name></name></expr>)</condition> <block pos:start="161:50" pos:end="171:9">{<block_content pos:start="163:13" pos:end="169:53">

            <expr_stmt pos:start="163:13" pos:end="169:53"><expr pos:start="163:13" pos:end="169:52"><call pos:start="163:13" pos:end="169:52"><name pos:start="163:13" pos:end="163:18">av_log</name><argument_list pos:start="163:19" pos:end="169:52">(<argument pos:start="163:20" pos:end="163:21"><expr pos:start="163:20" pos:end="163:21"><name pos:start="163:20" pos:end="163:21">s1</name></expr></argument>, <argument pos:start="163:24" pos:end="163:34"><expr pos:start="163:24" pos:end="163:34"><name pos:start="163:24" pos:end="163:34">AV_LOG_INFO</name></expr></argument>,

                   <argument pos:start="165:20" pos:end="165:80"><expr pos:start="165:20" pos:end="165:80"><literal type="string" pos:start="165:20" pos:end="165:80">"The driver changed the time per frame from %d/%d to %d/%d\n"</literal></expr></argument>,

                   <argument pos:start="167:20" pos:end="167:36"><expr pos:start="167:20" pos:end="167:36"><name pos:start="167:20" pos:end="167:36"><name pos:start="167:20" pos:end="167:21">ap</name><operator pos:start="167:22" pos:end="167:23">-&gt;</operator><name pos:start="167:24" pos:end="167:32">time_base</name><operator pos:start="167:33" pos:end="167:33">.</operator><name pos:start="167:34" pos:end="167:36">num</name></name></expr></argument>, <argument pos:start="167:39" pos:end="167:55"><expr pos:start="167:39" pos:end="167:55"><name pos:start="167:39" pos:end="167:55"><name pos:start="167:39" pos:end="167:40">ap</name><operator pos:start="167:41" pos:end="167:42">-&gt;</operator><name pos:start="167:43" pos:end="167:51">time_base</name><operator pos:start="167:52" pos:end="167:52">.</operator><name pos:start="167:53" pos:end="167:55">den</name></name></expr></argument>,

                   <argument pos:start="169:20" pos:end="169:33"><expr pos:start="169:20" pos:end="169:33"><name pos:start="169:20" pos:end="169:33"><name pos:start="169:20" pos:end="169:22">tpf</name><operator pos:start="169:23" pos:end="169:24">-&gt;</operator><name pos:start="169:25" pos:end="169:33">numerator</name></name></expr></argument>, <argument pos:start="169:36" pos:end="169:51"><expr pos:start="169:36" pos:end="169:51"><name pos:start="169:36" pos:end="169:51"><name pos:start="169:36" pos:end="169:38">tpf</name><operator pos:start="169:39" pos:end="169:40">-&gt;</operator><name pos:start="169:41" pos:end="169:51">denominator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="173:7" pos:end="185:5">else <block pos:start="173:12" pos:end="185:5">{<block_content pos:start="177:9" pos:end="183:9">

        <comment type="block" pos:start="175:9" pos:end="175:89">/* if timebase value is not set in ap, read the timebase value from the driver */</comment>

        <if_stmt pos:start="177:9" pos:end="183:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:58">(<expr pos:start="177:13" pos:end="177:57"><call pos:start="177:13" pos:end="177:52"><name pos:start="177:13" pos:end="177:17">ioctl</name><argument_list pos:start="177:18" pos:end="177:52">(<argument pos:start="177:19" pos:end="177:23"><expr pos:start="177:19" pos:end="177:23"><name pos:start="177:19" pos:end="177:23"><name pos:start="177:19" pos:end="177:19">s</name><operator pos:start="177:20" pos:end="177:21">-&gt;</operator><name pos:start="177:22" pos:end="177:23">fd</name></name></expr></argument>, <argument pos:start="177:26" pos:end="177:38"><expr pos:start="177:26" pos:end="177:38"><name pos:start="177:26" pos:end="177:38">VIDIOC_G_PARM</name></expr></argument>, <argument pos:start="177:41" pos:end="177:51"><expr pos:start="177:41" pos:end="177:51"><operator pos:start="177:41" pos:end="177:41">&amp;</operator><name pos:start="177:42" pos:end="177:51">streamparm</name></expr></argument>)</argument_list></call> <operator pos:start="177:54" pos:end="177:55">!=</operator> <literal type="number" pos:start="177:57" pos:end="177:57">0</literal></expr>)</condition> <block pos:start="177:60" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:34">

            <expr_stmt pos:start="179:13" pos:end="179:84"><expr pos:start="179:13" pos:end="179:83"><call pos:start="179:13" pos:end="179:83"><name pos:start="179:13" pos:end="179:18">av_log</name><argument_list pos:start="179:19" pos:end="179:83">(<argument pos:start="179:20" pos:end="179:21"><expr pos:start="179:20" pos:end="179:21"><name pos:start="179:20" pos:end="179:21">s1</name></expr></argument>, <argument pos:start="179:24" pos:end="179:35"><expr pos:start="179:24" pos:end="179:35"><name pos:start="179:24" pos:end="179:35">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="179:38" pos:end="179:65"><expr pos:start="179:38" pos:end="179:65"><literal type="string" pos:start="179:38" pos:end="179:65">"ioctl(VIDIOC_G_PARM): %s\n"</literal></expr></argument>, <argument pos:start="179:68" pos:end="179:82"><expr pos:start="179:68" pos:end="179:82"><call pos:start="179:68" pos:end="179:82"><name pos:start="179:68" pos:end="179:75">strerror</name><argument_list pos:start="179:76" pos:end="179:82">(<argument pos:start="179:77" pos:end="179:81"><expr pos:start="179:77" pos:end="179:81"><name pos:start="179:77" pos:end="179:81">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="181:13" pos:end="181:34">return <expr pos:start="181:20" pos:end="181:33"><call pos:start="181:20" pos:end="181:33"><name pos:start="181:20" pos:end="181:26">AVERROR</name><argument_list pos:start="181:27" pos:end="181:33">(<argument pos:start="181:28" pos:end="181:32"><expr pos:start="181:28" pos:end="181:32"><name pos:start="181:28" pos:end="181:32">errno</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:39"><expr pos:start="187:5" pos:end="187:38"><name pos:start="187:5" pos:end="187:21"><name pos:start="187:5" pos:end="187:6">ap</name><operator pos:start="187:7" pos:end="187:8">-&gt;</operator><name pos:start="187:9" pos:end="187:17">time_base</name><operator pos:start="187:18" pos:end="187:18">.</operator><name pos:start="187:19" pos:end="187:21">num</name></name> <operator pos:start="187:23" pos:end="187:23">=</operator> <name pos:start="187:25" pos:end="187:38"><name pos:start="187:25" pos:end="187:27">tpf</name><operator pos:start="187:28" pos:end="187:29">-&gt;</operator><name pos:start="187:30" pos:end="187:38">numerator</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:41"><expr pos:start="189:5" pos:end="189:40"><name pos:start="189:5" pos:end="189:21"><name pos:start="189:5" pos:end="189:6">ap</name><operator pos:start="189:7" pos:end="189:8">-&gt;</operator><name pos:start="189:9" pos:end="189:17">time_base</name><operator pos:start="189:18" pos:end="189:18">.</operator><name pos:start="189:19" pos:end="189:21">den</name></name> <operator pos:start="189:23" pos:end="189:23">=</operator> <name pos:start="189:25" pos:end="189:40"><name pos:start="189:25" pos:end="189:27">tpf</name><operator pos:start="189:28" pos:end="189:29">-&gt;</operator><name pos:start="189:30" pos:end="189:40">denominator</name></name></expr>;</expr_stmt>



    <return pos:start="193:5" pos:end="193:13">return <expr pos:start="193:12" pos:end="193:12"><literal type="number" pos:start="193:12" pos:end="193:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
