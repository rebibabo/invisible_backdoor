<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10270.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">framebuffer_update_display</name><parameter_list pos:start="1:32" pos:end="27:36">(

    <parameter pos:start="3:5" pos:end="3:22"><decl pos:start="3:5" pos:end="3:22"><type pos:start="3:5" pos:end="3:22"><name pos:start="3:5" pos:end="3:18">DisplaySurface</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier></type><name pos:start="3:21" pos:end="3:22">ds</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:31"><name pos:start="5:5" pos:end="5:16">MemoryRegion</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:31">address_space</name></decl></parameter>,

    <parameter pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:10">hwaddr</name></type> <name pos:start="7:12" pos:end="7:15">base</name></decl></parameter>,

    <parameter pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">cols</name></decl></parameter>, <comment type="block" pos:start="9:15" pos:end="9:37">/* Width in pixels.  */</comment>

    <parameter pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">rows</name></decl></parameter>, <comment type="block" pos:start="11:15" pos:end="11:38">/* Height in pixels.  */</comment>

    <parameter pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">src_width</name></decl></parameter>, <comment type="block" pos:start="13:20" pos:end="13:58">/* Length of source line, in bytes.  */</comment>

    <parameter pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:22">dest_row_pitch</name></decl></parameter>, <comment type="block" pos:start="15:25" pos:end="15:79">/* Bytes between adjacent horizontal output pixels.  */</comment>

    <parameter pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:22">dest_col_pitch</name></decl></parameter>, <comment type="block" pos:start="17:25" pos:end="17:77">/* Bytes between adjacent vertical output pixels.  */</comment>

    <parameter pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">invalidate</name></decl></parameter>, <comment type="block" pos:start="19:21" pos:end="19:61">/* nonzero to redraw the whole image.  */</comment>

    <parameter pos:start="21:5" pos:end="21:13"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:10">drawfn</name></type> <name pos:start="21:12" pos:end="21:13">fn</name></decl></parameter>,

    <parameter pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:8">void</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:16">opaque</name></decl></parameter>,

    <parameter pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:7">int</name> <modifier pos:start="25:9" pos:end="25:9">*</modifier></type><name pos:start="25:10" pos:end="25:18">first_row</name></decl></parameter>, <comment type="block" pos:start="25:21" pos:end="25:44">/* Input and output.  */</comment>

    <parameter pos:start="27:5" pos:end="27:17"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:7">int</name> <modifier pos:start="27:9" pos:end="27:9">*</modifier></type><name pos:start="27:10" pos:end="27:17">last_row</name></decl></parameter> <comment type="block" pos:start="27:19" pos:end="27:35">/* Output only */</comment>)</parameter_list>

<block pos:start="29:1" pos:end="171:1">{<block_content pos:start="31:5" pos:end="169:21">

    <decl_stmt pos:start="31:5" pos:end="31:19"><decl pos:start="31:5" pos:end="31:18"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:10">hwaddr</name></type> <name pos:start="31:12" pos:end="31:18">src_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:18"><decl pos:start="33:5" pos:end="33:17"><type pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:11">uint8_t</name> <modifier pos:start="33:13" pos:end="33:13">*</modifier></type><name pos:start="33:14" pos:end="33:17">dest</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:17"><decl pos:start="35:5" pos:end="35:16"><type pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:11">uint8_t</name> <modifier pos:start="35:13" pos:end="35:13">*</modifier></type><name pos:start="35:14" pos:end="35:16">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:22"><decl pos:start="37:5" pos:end="37:21"><type pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:11">uint8_t</name> <modifier pos:start="37:13" pos:end="37:13">*</modifier></type><name pos:start="37:14" pos:end="37:21">src_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:24"><decl pos:start="39:5" pos:end="39:13"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:13">first</name></decl>, <decl pos:start="39:16" pos:end="39:23"><type ref="prev" pos:start="39:5" pos:end="39:7"/><name pos:start="39:16" pos:end="39:19">last</name> <init pos:start="39:21" pos:end="39:23">= <expr pos:start="39:23" pos:end="39:23"><literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:14"><decl pos:start="41:5" pos:end="41:13"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:13">dirty</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:10"><decl pos:start="43:5" pos:end="43:9"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:20"><decl pos:start="45:5" pos:end="45:19"><type pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:14">ram_addr_t</name></type> <name pos:start="45:16" pos:end="45:19">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:36"><decl pos:start="47:5" pos:end="47:35"><type pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:23">MemoryRegionSection</name></type> <name pos:start="47:25" pos:end="47:35">mem_section</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:22"><decl pos:start="49:5" pos:end="49:21"><type pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:16">MemoryRegion</name> <modifier pos:start="49:18" pos:end="49:18">*</modifier></type><name pos:start="49:19" pos:end="49:21">mem</name></decl>;</decl_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:19"><expr pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:5">i</name> <operator pos:start="53:7" pos:end="53:7">=</operator> <operator pos:start="53:9" pos:end="53:9">*</operator><name pos:start="53:10" pos:end="53:18">first_row</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:20"><expr pos:start="55:5" pos:end="55:19"><operator pos:start="55:5" pos:end="55:5">*</operator><name pos:start="55:6" pos:end="55:14">first_row</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <operator pos:start="55:18" pos:end="55:18">-</operator><literal type="number" pos:start="55:19" pos:end="55:19">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:11">src_len</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:23">src_width</name> <operator pos:start="57:25" pos:end="57:25">*</operator> <name pos:start="57:27" pos:end="57:30">rows</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:67"><expr pos:start="61:5" pos:end="61:66"><name pos:start="61:5" pos:end="61:15">mem_section</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:66"><name pos:start="61:19" pos:end="61:36">memory_region_find</name><argument_list pos:start="61:37" pos:end="61:66">(<argument pos:start="61:38" pos:end="61:50"><expr pos:start="61:38" pos:end="61:50"><name pos:start="61:38" pos:end="61:50">address_space</name></expr></argument>, <argument pos:start="61:53" pos:end="61:56"><expr pos:start="61:53" pos:end="61:56"><name pos:start="61:53" pos:end="61:56">base</name></expr></argument>, <argument pos:start="61:59" pos:end="61:65"><expr pos:start="61:59" pos:end="61:65"><name pos:start="61:59" pos:end="61:65">src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="65:50">(<expr pos:start="63:9" pos:end="65:49"><call pos:start="63:9" pos:end="63:38"><name pos:start="63:9" pos:end="63:20">int128_get64</name><argument_list pos:start="63:21" pos:end="63:38">(<argument pos:start="63:22" pos:end="63:37"><expr pos:start="63:22" pos:end="63:37"><name pos:start="63:22" pos:end="63:37"><name pos:start="63:22" pos:end="63:32">mem_section</name><operator pos:start="63:33" pos:end="63:33">.</operator><name pos:start="63:34" pos:end="63:37">size</name></name></expr></argument>)</argument_list></call> <operator pos:start="63:40" pos:end="63:41">!=</operator> <name pos:start="63:43" pos:end="63:49">src_len</name> <operator pos:start="63:51" pos:end="63:52">||</operator>

            <operator pos:start="65:13" pos:end="65:13">!</operator><call pos:start="65:14" pos:end="65:49"><name pos:start="65:14" pos:end="65:33">memory_region_is_ram</name><argument_list pos:start="65:34" pos:end="65:49">(<argument pos:start="65:35" pos:end="65:48"><expr pos:start="65:35" pos:end="65:48"><name pos:start="65:35" pos:end="65:48"><name pos:start="65:35" pos:end="65:45">mem_section</name><operator pos:start="65:46" pos:end="65:46">.</operator><name pos:start="65:47" pos:end="65:48">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:52" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:15">

        <return pos:start="67:9" pos:end="67:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:25"><expr pos:start="71:5" pos:end="71:24"><name pos:start="71:5" pos:end="71:7">mem</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <name pos:start="71:11" pos:end="71:24"><name pos:start="71:11" pos:end="71:21">mem_section</name><operator pos:start="71:22" pos:end="71:22">.</operator><name pos:start="71:23" pos:end="71:24">mr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:16"><expr pos:start="73:5" pos:end="73:15"><call pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:10">assert</name><argument_list pos:start="73:11" pos:end="73:15">(<argument pos:start="73:12" pos:end="73:14"><expr pos:start="73:12" pos:end="73:14"><name pos:start="73:12" pos:end="73:14">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:60"><expr pos:start="75:5" pos:end="75:59"><call pos:start="75:5" pos:end="75:59"><name pos:start="75:5" pos:end="75:10">assert</name><argument_list pos:start="75:11" pos:end="75:59">(<argument pos:start="75:12" pos:end="75:58"><expr pos:start="75:12" pos:end="75:58"><name pos:start="75:12" pos:end="75:50"><name pos:start="75:12" pos:end="75:22">mem_section</name><operator pos:start="75:23" pos:end="75:23">.</operator><name pos:start="75:24" pos:end="75:50">offset_within_address_space</name></name> <operator pos:start="75:52" pos:end="75:53">==</operator> <name pos:start="75:55" pos:end="75:58">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:41"><expr pos:start="79:5" pos:end="79:40"><call pos:start="79:5" pos:end="79:40"><name pos:start="79:5" pos:end="79:35">memory_region_sync_dirty_bitmap</name><argument_list pos:start="79:36" pos:end="79:40">(<argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:58"><expr pos:start="81:5" pos:end="81:57"><name pos:start="81:5" pos:end="81:12">src_base</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <call pos:start="81:16" pos:end="81:57"><name pos:start="81:16" pos:end="81:38">cpu_physical_memory_map</name><argument_list pos:start="81:39" pos:end="81:57">(<argument pos:start="81:40" pos:end="81:43"><expr pos:start="81:40" pos:end="81:43"><name pos:start="81:40" pos:end="81:43">base</name></expr></argument>, <argument pos:start="81:46" pos:end="81:53"><expr pos:start="81:46" pos:end="81:53"><operator pos:start="81:46" pos:end="81:46">&amp;</operator><name pos:start="81:47" pos:end="81:53">src_len</name></expr></argument>, <argument pos:start="81:56" pos:end="81:56"><expr pos:start="81:56" pos:end="81:56"><literal type="number" pos:start="81:56" pos:end="81:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="83:5" pos:end="87:37">/* If we can't map the framebuffer then bail.  We could try harder,

       but it's not really worth it as dirty flag tracking will probably

       already have failed above.  */</comment>

    <if_stmt pos:start="89:5" pos:end="91:15"><if pos:start="89:5" pos:end="91:15">if <condition pos:start="89:8" pos:end="89:18">(<expr pos:start="89:9" pos:end="89:17"><operator pos:start="89:9" pos:end="89:9">!</operator><name pos:start="89:10" pos:end="89:17">src_base</name></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:15"><block_content pos:start="91:9" pos:end="91:15">

        <return pos:start="91:9" pos:end="91:15">return;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:36">(<expr pos:start="93:9" pos:end="93:35"><name pos:start="93:9" pos:end="93:15">src_len</name> <operator pos:start="93:17" pos:end="93:18">!=</operator> <name pos:start="93:20" pos:end="93:28">src_width</name> <operator pos:start="93:30" pos:end="93:30">*</operator> <name pos:start="93:32" pos:end="93:35">rows</name></expr>)</condition> <block pos:start="93:38" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:15">

        <expr_stmt pos:start="95:9" pos:end="95:59"><expr pos:start="95:9" pos:end="95:58"><call pos:start="95:9" pos:end="95:58"><name pos:start="95:9" pos:end="95:33">cpu_physical_memory_unmap</name><argument_list pos:start="95:34" pos:end="95:58">(<argument pos:start="95:35" pos:end="95:42"><expr pos:start="95:35" pos:end="95:42"><name pos:start="95:35" pos:end="95:42">src_base</name></expr></argument>, <argument pos:start="95:45" pos:end="95:51"><expr pos:start="95:45" pos:end="95:51"><name pos:start="95:45" pos:end="95:51">src_len</name></expr></argument>, <argument pos:start="95:54" pos:end="95:54"><expr pos:start="95:54" pos:end="95:54"><literal type="number" pos:start="95:54" pos:end="95:54">0</literal></expr></argument>, <argument pos:start="95:57" pos:end="95:57"><expr pos:start="95:57" pos:end="95:57"><literal type="number" pos:start="95:57" pos:end="95:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:19"><expr pos:start="101:5" pos:end="101:18"><name pos:start="101:5" pos:end="101:7">src</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <name pos:start="101:11" pos:end="101:18">src_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:28"><expr pos:start="103:5" pos:end="103:27"><name pos:start="103:5" pos:end="103:8">dest</name> <operator pos:start="103:10" pos:end="103:10">=</operator> <call pos:start="103:12" pos:end="103:27"><name pos:start="103:12" pos:end="103:23">surface_data</name><argument_list pos:start="103:24" pos:end="103:27">(<argument pos:start="103:25" pos:end="103:26"><expr pos:start="103:25" pos:end="103:26"><name pos:start="103:25" pos:end="103:26">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="107:44"><if pos:start="105:5" pos:end="107:44">if <condition pos:start="105:8" pos:end="105:27">(<expr pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:22">dest_col_pitch</name> <operator pos:start="105:24" pos:end="105:24">&lt;</operator> <literal type="number" pos:start="105:26" pos:end="105:26">0</literal></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:44"><block_content pos:start="107:9" pos:end="107:44">

        <expr_stmt pos:start="107:9" pos:end="107:44"><expr pos:start="107:9" pos:end="107:43"><name pos:start="107:9" pos:end="107:12">dest</name> <operator pos:start="107:14" pos:end="107:15">-=</operator> <name pos:start="107:17" pos:end="107:30">dest_col_pitch</name> <operator pos:start="107:32" pos:end="107:32">*</operator> <operator pos:start="107:34" pos:end="107:34">(</operator><name pos:start="107:35" pos:end="107:38">cols</name> <operator pos:start="107:40" pos:end="107:40">-</operator> <literal type="number" pos:start="107:42" pos:end="107:42">1</literal><operator pos:start="107:43" pos:end="107:43">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:27">(<expr pos:start="109:9" pos:end="109:26"><name pos:start="109:9" pos:end="109:22">dest_row_pitch</name> <operator pos:start="109:24" pos:end="109:24">&lt;</operator> <literal type="number" pos:start="109:26" pos:end="109:26">0</literal></expr>)</condition> <block pos:start="109:29" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:44">

        <expr_stmt pos:start="111:9" pos:end="111:44"><expr pos:start="111:9" pos:end="111:43"><name pos:start="111:9" pos:end="111:12">dest</name> <operator pos:start="111:14" pos:end="111:15">-=</operator> <name pos:start="111:17" pos:end="111:30">dest_row_pitch</name> <operator pos:start="111:32" pos:end="111:32">*</operator> <operator pos:start="111:34" pos:end="111:34">(</operator><name pos:start="111:35" pos:end="111:38">rows</name> <operator pos:start="111:40" pos:end="111:40">-</operator> <literal type="number" pos:start="111:42" pos:end="111:42">1</literal><operator pos:start="111:43" pos:end="111:43">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:15"><expr pos:start="115:5" pos:end="115:14"><name pos:start="115:5" pos:end="115:9">first</name> <operator pos:start="115:11" pos:end="115:11">=</operator> <operator pos:start="115:13" pos:end="115:13">-</operator><literal type="number" pos:start="115:14" pos:end="115:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:44"><expr pos:start="117:5" pos:end="117:43"><name pos:start="117:5" pos:end="117:8">addr</name> <operator pos:start="117:10" pos:end="117:10">=</operator> <name pos:start="117:12" pos:end="117:43"><name pos:start="117:12" pos:end="117:22">mem_section</name><operator pos:start="117:23" pos:end="117:23">.</operator><name pos:start="117:24" pos:end="117:43">offset_within_region</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:26"><expr pos:start="121:5" pos:end="121:25"><name pos:start="121:5" pos:end="121:8">addr</name> <operator pos:start="121:10" pos:end="121:11">+=</operator> <name pos:start="121:13" pos:end="121:13">i</name> <operator pos:start="121:15" pos:end="121:15">*</operator> <name pos:start="121:17" pos:end="121:25">src_width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:25"><expr pos:start="123:5" pos:end="123:24"><name pos:start="123:5" pos:end="123:7">src</name> <operator pos:start="123:9" pos:end="123:10">+=</operator> <name pos:start="123:12" pos:end="123:12">i</name> <operator pos:start="123:14" pos:end="123:14">*</operator> <name pos:start="123:16" pos:end="123:24">src_width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:31"><expr pos:start="125:5" pos:end="125:30"><name pos:start="125:5" pos:end="125:8">dest</name> <operator pos:start="125:10" pos:end="125:11">+=</operator> <name pos:start="125:13" pos:end="125:13">i</name> <operator pos:start="125:15" pos:end="125:15">*</operator> <name pos:start="125:17" pos:end="125:30">dest_row_pitch</name></expr>;</expr_stmt>



    <for pos:start="129:5" pos:end="153:5">for <control pos:start="129:9" pos:end="129:25">(<init pos:start="129:10" pos:end="129:10">;</init> <condition pos:start="129:12" pos:end="129:20"><expr pos:start="129:12" pos:end="129:19"><name pos:start="129:12" pos:end="129:12">i</name> <operator pos:start="129:14" pos:end="129:14">&lt;</operator> <name pos:start="129:16" pos:end="129:19">rows</name></expr>;</condition> <incr pos:start="129:22" pos:end="129:24"><expr pos:start="129:22" pos:end="129:24"><name pos:start="129:22" pos:end="129:22">i</name><operator pos:start="129:23" pos:end="129:24">++</operator></expr></incr>)</control> <block pos:start="129:27" pos:end="153:5">{<block_content pos:start="131:9" pos:end="151:31">

        <expr_stmt pos:start="131:9" pos:end="133:63"><expr pos:start="131:9" pos:end="133:62"><name pos:start="131:9" pos:end="131:13">dirty</name> <operator pos:start="131:15" pos:end="131:15">=</operator> <call pos:start="131:17" pos:end="133:62"><name pos:start="131:17" pos:end="131:39">memory_region_get_dirty</name><argument_list pos:start="131:40" pos:end="133:62">(<argument pos:start="131:41" pos:end="131:43"><expr pos:start="131:41" pos:end="131:43"><name pos:start="131:41" pos:end="131:43">mem</name></expr></argument>, <argument pos:start="131:46" pos:end="131:49"><expr pos:start="131:46" pos:end="131:49"><name pos:start="131:46" pos:end="131:49">addr</name></expr></argument>, <argument pos:start="131:52" pos:end="131:60"><expr pos:start="131:52" pos:end="131:60"><name pos:start="131:52" pos:end="131:60">src_width</name></expr></argument>,

                                             <argument pos:start="133:46" pos:end="133:61"><expr pos:start="133:46" pos:end="133:61"><name pos:start="133:46" pos:end="133:61">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="145:9"><if pos:start="135:9" pos:end="145:9">if <condition pos:start="135:12" pos:end="135:32">(<expr pos:start="135:13" pos:end="135:31"><name pos:start="135:13" pos:end="135:17">dirty</name> <operator pos:start="135:19" pos:end="135:20">||</operator> <name pos:start="135:22" pos:end="135:31">invalidate</name></expr>)</condition> <block pos:start="135:34" pos:end="145:9">{<block_content pos:start="137:13" pos:end="143:21">

            <expr_stmt pos:start="137:13" pos:end="137:56"><expr pos:start="137:13" pos:end="137:55"><call pos:start="137:13" pos:end="137:55"><name pos:start="137:13" pos:end="137:14">fn</name><argument_list pos:start="137:15" pos:end="137:55">(<argument pos:start="137:16" pos:end="137:21"><expr pos:start="137:16" pos:end="137:21"><name pos:start="137:16" pos:end="137:21">opaque</name></expr></argument>, <argument pos:start="137:24" pos:end="137:27"><expr pos:start="137:24" pos:end="137:27"><name pos:start="137:24" pos:end="137:27">dest</name></expr></argument>, <argument pos:start="137:30" pos:end="137:32"><expr pos:start="137:30" pos:end="137:32"><name pos:start="137:30" pos:end="137:32">src</name></expr></argument>, <argument pos:start="137:35" pos:end="137:38"><expr pos:start="137:35" pos:end="137:38"><name pos:start="137:35" pos:end="137:38">cols</name></expr></argument>, <argument pos:start="137:41" pos:end="137:54"><expr pos:start="137:41" pos:end="137:54"><name pos:start="137:41" pos:end="137:54">dest_col_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="139:13" pos:end="141:26"><if pos:start="139:13" pos:end="141:26">if <condition pos:start="139:16" pos:end="139:28">(<expr pos:start="139:17" pos:end="139:27"><name pos:start="139:17" pos:end="139:21">first</name> <operator pos:start="139:23" pos:end="139:24">==</operator> <operator pos:start="139:26" pos:end="139:26">-</operator><literal type="number" pos:start="139:27" pos:end="139:27">1</literal></expr>)</condition><block type="pseudo" pos:start="141:17" pos:end="141:26"><block_content pos:start="141:17" pos:end="141:26">

                <expr_stmt pos:start="141:17" pos:end="141:26"><expr pos:start="141:17" pos:end="141:25"><name pos:start="141:17" pos:end="141:21">first</name> <operator pos:start="141:23" pos:end="141:23">=</operator> <name pos:start="141:25" pos:end="141:25">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:21"><expr pos:start="143:13" pos:end="143:20"><name pos:start="143:13" pos:end="143:16">last</name> <operator pos:start="143:18" pos:end="143:18">=</operator> <name pos:start="143:20" pos:end="143:20">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:26"><expr pos:start="147:9" pos:end="147:25"><name pos:start="147:9" pos:end="147:12">addr</name> <operator pos:start="147:14" pos:end="147:15">+=</operator> <name pos:start="147:17" pos:end="147:25">src_width</name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:25"><expr pos:start="149:9" pos:end="149:24"><name pos:start="149:9" pos:end="149:11">src</name> <operator pos:start="149:13" pos:end="149:14">+=</operator> <name pos:start="149:16" pos:end="149:24">src_width</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:31"><expr pos:start="151:9" pos:end="151:30"><name pos:start="151:9" pos:end="151:12">dest</name> <operator pos:start="151:14" pos:end="151:15">+=</operator> <name pos:start="151:17" pos:end="151:30">dest_row_pitch</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="155:5" pos:end="155:55"><expr pos:start="155:5" pos:end="155:54"><call pos:start="155:5" pos:end="155:54"><name pos:start="155:5" pos:end="155:29">cpu_physical_memory_unmap</name><argument_list pos:start="155:30" pos:end="155:54">(<argument pos:start="155:31" pos:end="155:38"><expr pos:start="155:31" pos:end="155:38"><name pos:start="155:31" pos:end="155:38">src_base</name></expr></argument>, <argument pos:start="155:41" pos:end="155:47"><expr pos:start="155:41" pos:end="155:47"><name pos:start="155:41" pos:end="155:47">src_len</name></expr></argument>, <argument pos:start="155:50" pos:end="155:50"><expr pos:start="155:50" pos:end="155:50"><literal type="number" pos:start="155:50" pos:end="155:50">0</literal></expr></argument>, <argument pos:start="155:53" pos:end="155:53"><expr pos:start="155:53" pos:end="155:53"><literal type="number" pos:start="155:53" pos:end="155:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="161:5"><if pos:start="157:5" pos:end="161:5">if <condition pos:start="157:8" pos:end="157:18">(<expr pos:start="157:9" pos:end="157:17"><name pos:start="157:9" pos:end="157:13">first</name> <operator pos:start="157:15" pos:end="157:15">&lt;</operator> <literal type="number" pos:start="157:17" pos:end="157:17">0</literal></expr>)</condition> <block pos:start="157:20" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:15">

        <return pos:start="159:9" pos:end="159:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="163:5" pos:end="165:48"><expr pos:start="163:5" pos:end="165:47"><call pos:start="163:5" pos:end="165:47"><name pos:start="163:5" pos:end="163:29">memory_region_reset_dirty</name><argument_list pos:start="163:30" pos:end="165:47">(<argument pos:start="163:31" pos:end="163:33"><expr pos:start="163:31" pos:end="163:33"><name pos:start="163:31" pos:end="163:33">mem</name></expr></argument>, <argument pos:start="163:36" pos:end="163:67"><expr pos:start="163:36" pos:end="163:67"><name pos:start="163:36" pos:end="163:67"><name pos:start="163:36" pos:end="163:46">mem_section</name><operator pos:start="163:47" pos:end="163:47">.</operator><name pos:start="163:48" pos:end="163:67">offset_within_region</name></name></expr></argument>, <argument pos:start="163:70" pos:end="163:76"><expr pos:start="163:70" pos:end="163:76"><name pos:start="163:70" pos:end="163:76">src_len</name></expr></argument>,

                              <argument pos:start="165:31" pos:end="165:46"><expr pos:start="165:31" pos:end="165:46"><name pos:start="165:31" pos:end="165:46">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:23"><expr pos:start="167:5" pos:end="167:22"><operator pos:start="167:5" pos:end="167:5">*</operator><name pos:start="167:6" pos:end="167:14">first_row</name> <operator pos:start="167:16" pos:end="167:16">=</operator> <name pos:start="167:18" pos:end="167:22">first</name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:21"><expr pos:start="169:5" pos:end="169:20"><operator pos:start="169:5" pos:end="169:5">*</operator><name pos:start="169:6" pos:end="169:13">last_row</name> <operator pos:start="169:15" pos:end="169:15">=</operator> <name pos:start="169:17" pos:end="169:20">last</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
