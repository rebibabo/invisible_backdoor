<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23137.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">check_params</name><parameter_list pos:start="1:17" pos:end="1:61">(<parameter pos:start="1:18" pos:end="1:43"><decl pos:start="1:18" pos:end="1:43"><type pos:start="1:18" pos:end="1:43"><specifier pos:start="1:18" pos:end="1:22">const</specifier> <name pos:start="1:24" pos:end="1:27">char</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier> <specifier pos:start="1:31" pos:end="1:35">const</specifier> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">params</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:60"><decl pos:start="1:46" pos:end="1:60"><type pos:start="1:46" pos:end="1:60"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:55">char</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">str</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:15">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:21">name_buf_size</name> <init pos:start="5:23" pos:end="5:25">= <expr pos:start="5:25" pos:end="5:25"><literal type="number" pos:start="5:25" pos:end="5:25">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:18">name_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="27:5">for <control pos:start="17:9" pos:end="17:39">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:34"><expr pos:start="17:17" pos:end="17:33"><name pos:start="17:17" pos:end="17:25"><name pos:start="17:17" pos:end="17:22">params</name><index pos:start="17:23" pos:end="17:25">[<expr pos:start="17:24" pos:end="17:24"><name pos:start="17:24" pos:end="17:24">i</name></expr>]</index></name> <operator pos:start="17:27" pos:end="17:28">!=</operator> <name pos:start="17:30" pos:end="17:33">NULL</name></expr>;</condition> <incr pos:start="17:36" pos:end="17:38"><expr pos:start="17:36" pos:end="17:38"><name pos:start="17:36" pos:end="17:36">i</name><operator pos:start="17:37" pos:end="17:38">++</operator></expr></incr>)</control> <block pos:start="17:41" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:9">

        <expr_stmt pos:start="19:9" pos:end="19:36"><expr pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:11">len</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:31"><name pos:start="19:15" pos:end="19:20">strlen</name><argument_list pos:start="19:21" pos:end="19:31">(<argument pos:start="19:22" pos:end="19:30"><expr pos:start="19:22" pos:end="19:30"><name pos:start="19:22" pos:end="19:30"><name pos:start="19:22" pos:end="19:27">params</name><index pos:start="19:28" pos:end="19:30">[<expr pos:start="19:29" pos:end="19:29"><name pos:start="19:29" pos:end="19:29">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="19:33" pos:end="19:33">+</operator> <literal type="number" pos:start="19:35" pos:end="19:35">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:32">(<expr pos:start="21:13" pos:end="21:31"><name pos:start="21:13" pos:end="21:15">len</name> <operator pos:start="21:17" pos:end="21:17">&gt;</operator> <name pos:start="21:19" pos:end="21:31">name_buf_size</name></expr>)</condition> <block pos:start="21:34" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:32">

            <expr_stmt pos:start="23:13" pos:end="23:32"><expr pos:start="23:13" pos:end="23:31"><name pos:start="23:13" pos:end="23:25">name_buf_size</name> <operator pos:start="23:27" pos:end="23:27">=</operator> <name pos:start="23:29" pos:end="23:31">len</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:12">name_buf</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:41"><name pos:start="29:16" pos:end="29:26">qemu_malloc</name><argument_list pos:start="29:27" pos:end="29:41">(<argument pos:start="29:28" pos:end="29:40"><expr pos:start="29:28" pos:end="29:40"><name pos:start="29:28" pos:end="29:40">name_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:12"><expr pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:5">p</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <name pos:start="33:9" pos:end="33:11">str</name></expr>;</expr_stmt>

    <while pos:start="35:5" pos:end="71:5">while <condition pos:start="35:11" pos:end="35:22">(<expr pos:start="35:12" pos:end="35:21"><operator pos:start="35:12" pos:end="35:12">*</operator><name pos:start="35:13" pos:end="35:13">p</name> <operator pos:start="35:15" pos:end="35:16">!=</operator> <literal type="char" pos:start="35:18" pos:end="35:21">'\0'</literal></expr>)</condition> <block pos:start="35:24" pos:end="71:5">{<block_content pos:start="37:9" pos:end="69:12">

        <expr_stmt pos:start="37:9" pos:end="37:58"><expr pos:start="37:9" pos:end="37:57"><name pos:start="37:9" pos:end="37:9">p</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:57"><name pos:start="37:13" pos:end="37:24">get_opt_name</name><argument_list pos:start="37:25" pos:end="37:57">(<argument pos:start="37:26" pos:end="37:33"><expr pos:start="37:26" pos:end="37:33"><name pos:start="37:26" pos:end="37:33">name_buf</name></expr></argument>, <argument pos:start="37:36" pos:end="37:48"><expr pos:start="37:36" pos:end="37:48"><name pos:start="37:36" pos:end="37:48">name_buf_size</name></expr></argument>, <argument pos:start="37:51" pos:end="37:51"><expr pos:start="37:51" pos:end="37:51"><name pos:start="37:51" pos:end="37:51">p</name></expr></argument>, <argument pos:start="37:54" pos:end="37:56"><expr pos:start="37:54" pos:end="37:56"><literal type="char" pos:start="37:54" pos:end="37:56">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:22">(<expr pos:start="39:13" pos:end="39:21"><operator pos:start="39:13" pos:end="39:13">*</operator><name pos:start="39:14" pos:end="39:14">p</name> <operator pos:start="39:16" pos:end="39:17">!=</operator> <literal type="char" pos:start="39:19" pos:end="39:21">'='</literal></expr>)</condition> <block pos:start="39:24" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:18">

            <expr_stmt pos:start="41:13" pos:end="41:21"><expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <operator pos:start="41:19" pos:end="41:19">-</operator><literal type="number" pos:start="41:20" pos:end="41:20">1</literal></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:12"><expr pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:9">p</name><operator pos:start="47:10" pos:end="47:11">++</operator></expr>;</expr_stmt>

        <for pos:start="49:9" pos:end="53:22">for<control pos:start="49:12" pos:end="49:42">(<init pos:start="49:13" pos:end="49:18"><expr pos:start="49:13" pos:end="49:17"><name pos:start="49:13" pos:end="49:13">i</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <literal type="number" pos:start="49:17" pos:end="49:17">0</literal></expr>;</init> <condition pos:start="49:20" pos:end="49:37"><expr pos:start="49:20" pos:end="49:36"><name pos:start="49:20" pos:end="49:28"><name pos:start="49:20" pos:end="49:25">params</name><index pos:start="49:26" pos:end="49:28">[<expr pos:start="49:27" pos:end="49:27"><name pos:start="49:27" pos:end="49:27">i</name></expr>]</index></name> <operator pos:start="49:30" pos:end="49:31">!=</operator> <name pos:start="49:33" pos:end="49:36">NULL</name></expr>;</condition> <incr pos:start="49:39" pos:end="49:41"><expr pos:start="49:39" pos:end="49:41"><name pos:start="49:39" pos:end="49:39">i</name><operator pos:start="49:40" pos:end="49:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="51:13" pos:end="53:22"><block_content pos:start="51:13" pos:end="53:22">

            <if_stmt pos:start="51:13" pos:end="53:22"><if pos:start="51:13" pos:end="53:22">if <condition pos:start="51:16" pos:end="51:45">(<expr pos:start="51:17" pos:end="51:44"><operator pos:start="51:17" pos:end="51:17">!</operator><call pos:start="51:18" pos:end="51:44"><name pos:start="51:18" pos:end="51:23">strcmp</name><argument_list pos:start="51:24" pos:end="51:44">(<argument pos:start="51:25" pos:end="51:33"><expr pos:start="51:25" pos:end="51:33"><name pos:start="51:25" pos:end="51:33"><name pos:start="51:25" pos:end="51:30">params</name><index pos:start="51:31" pos:end="51:33">[<expr pos:start="51:32" pos:end="51:32"><name pos:start="51:32" pos:end="51:32">i</name></expr>]</index></name></expr></argument>, <argument pos:start="51:36" pos:end="51:43"><expr pos:start="51:36" pos:end="51:43"><name pos:start="51:36" pos:end="51:43">name_buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:22"><block_content pos:start="53:17" pos:end="53:22">

                <break pos:start="53:17" pos:end="53:22">break;</break></block_content></block></if></if_stmt></block_content></block></for>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:30">(<expr pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:18">params</name><index pos:start="55:19" pos:end="55:21">[<expr pos:start="55:20" pos:end="55:20"><name pos:start="55:20" pos:end="55:20">i</name></expr>]</index></name> <operator pos:start="55:23" pos:end="55:24">==</operator> <name pos:start="55:26" pos:end="55:29">NULL</name></expr>)</condition> <block pos:start="55:32" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:18">

            <expr_stmt pos:start="57:13" pos:end="57:21"><expr pos:start="57:13" pos:end="57:20"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <operator pos:start="57:19" pos:end="57:19">-</operator><literal type="number" pos:start="57:20" pos:end="57:20">1</literal></expr>;</expr_stmt>

            <break pos:start="59:13" pos:end="59:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:38"><expr pos:start="63:9" pos:end="63:37"><name pos:start="63:9" pos:end="63:9">p</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:37"><name pos:start="63:13" pos:end="63:25">get_opt_value</name><argument_list pos:start="63:26" pos:end="63:37">(<argument pos:start="63:27" pos:end="63:30"><expr pos:start="63:27" pos:end="63:30"><name pos:start="63:27" pos:end="63:30">NULL</name></expr></argument>, <argument pos:start="63:33" pos:end="63:33"><expr pos:start="63:33" pos:end="63:33"><literal type="number" pos:start="63:33" pos:end="63:33">0</literal></expr></argument>, <argument pos:start="63:36" pos:end="63:36"><expr pos:start="63:36" pos:end="63:36"><name pos:start="63:36" pos:end="63:36">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="67:18"><if pos:start="65:9" pos:end="67:18">if <condition pos:start="65:12" pos:end="65:22">(<expr pos:start="65:13" pos:end="65:21"><operator pos:start="65:13" pos:end="65:13">*</operator><name pos:start="65:14" pos:end="65:14">p</name> <operator pos:start="65:16" pos:end="65:17">!=</operator> <literal type="char" pos:start="65:19" pos:end="65:21">','</literal></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:18"><block_content pos:start="67:13" pos:end="67:18">

            <break pos:start="67:13" pos:end="67:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:12"><expr pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:9">p</name><operator pos:start="69:10" pos:end="69:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="75:5" pos:end="75:24"><expr pos:start="75:5" pos:end="75:23"><call pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:13">qemu_free</name><argument_list pos:start="75:14" pos:end="75:23">(<argument pos:start="75:15" pos:end="75:22"><expr pos:start="75:15" pos:end="75:22"><name pos:start="75:15" pos:end="75:22">name_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="77:5" pos:end="77:15">return <expr pos:start="77:12" pos:end="77:14"><name pos:start="77:12" pos:end="77:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
