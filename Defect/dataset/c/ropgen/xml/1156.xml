<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1156.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">gic_complete_irq</name><parameter_list pos:start="1:22" pos:end="1:52">(<parameter pos:start="1:23" pos:end="1:33"><decl pos:start="1:23" pos:end="1:33"><type pos:start="1:23" pos:end="1:33"><name pos:start="1:23" pos:end="1:30">GICState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">s</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:42"><decl pos:start="1:36" pos:end="1:42"><type pos:start="1:36" pos:end="1:42"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:42">cpu</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:51"><decl pos:start="1:45" pos:end="1:51"><type pos:start="1:45" pos:end="1:51"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:51">irq</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:5">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">update</name> <init pos:start="5:16" pos:end="5:18">= <expr pos:start="5:18" pos:end="5:18"><literal type="number" pos:start="5:18" pos:end="5:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">cm</name> <init pos:start="7:12" pos:end="7:21">= <expr pos:start="7:14" pos:end="7:21"><literal type="number" pos:start="7:14" pos:end="7:14">1</literal> <operator pos:start="7:16" pos:end="7:17">&lt;&lt;</operator> <name pos:start="7:19" pos:end="7:21">cpu</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:29"><expr pos:start="9:5" pos:end="9:28"><call pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:11">DPRINTF</name><argument_list pos:start="9:12" pos:end="9:28">(<argument pos:start="9:13" pos:end="9:22"><expr pos:start="9:13" pos:end="9:22"><literal type="string" pos:start="9:13" pos:end="9:22">"EOI %d\n"</literal></expr></argument>, <argument pos:start="9:25" pos:end="9:27"><expr pos:start="9:25" pos:end="9:27"><name pos:start="9:25" pos:end="9:27">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="31:5"><if pos:start="11:5" pos:end="31:5">if <condition pos:start="11:8" pos:end="11:26">(<expr pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:11">irq</name> <operator pos:start="11:13" pos:end="11:14">&gt;=</operator> <name pos:start="11:16" pos:end="11:25"><name pos:start="11:16" pos:end="11:16">s</name><operator pos:start="11:17" pos:end="11:18">-&gt;</operator><name pos:start="11:19" pos:end="11:25">num_irq</name></name></expr>)</condition> <block pos:start="11:28" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:15">

        <comment type="block" pos:start="13:9" pos:end="27:11">/* This handles two cases:

         * 1. If software writes the ID of a spurious interrupt [ie 1023]

         * to the GICC_EOIR, the GIC ignores that write.

         * 2. If software writes the number of a non-existent interrupt

         * this must be a subcase of "value written does not match the last

         * valid interrupt value read from the Interrupt Acknowledge

         * register" and so this is UNPREDICTABLE. We choose to ignore it.

         */</comment>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="35:15"><if pos:start="33:5" pos:end="35:15">if <condition pos:start="33:8" pos:end="33:36">(<expr pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:22">running_irq</name><index pos:start="33:23" pos:end="33:27">[<expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:26">cpu</name></expr>]</index></name> <operator pos:start="33:29" pos:end="33:30">==</operator> <literal type="number" pos:start="33:32" pos:end="33:35">1023</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:15"><block_content pos:start="35:9" pos:end="35:15">

        <return pos:start="35:9" pos:end="35:15">return;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="35:17" pos:end="35:37">/* No active IRQ.  */</comment>



    <if_stmt pos:start="39:5" pos:end="57:5"><if pos:start="39:5" pos:end="57:5">if <condition pos:start="39:8" pos:end="39:63">(<expr pos:start="39:9" pos:end="39:62"><name pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:19">revision</name></name> <operator pos:start="39:21" pos:end="39:22">==</operator> <name pos:start="39:24" pos:end="39:35">REV_11MPCORE</name> <operator pos:start="39:37" pos:end="39:38">||</operator> <name pos:start="39:40" pos:end="39:50"><name pos:start="39:40" pos:end="39:40">s</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:50">revision</name></name> <operator pos:start="39:52" pos:end="39:53">==</operator> <name pos:start="39:55" pos:end="39:62">REV_NVIC</name></expr>)</condition> <block pos:start="39:65" pos:end="57:5">{<block_content pos:start="45:9" pos:end="55:9">

        <comment type="block" pos:start="41:9" pos:end="43:22">/* Mark level triggered interrupts as pending if they are still

           raised.  */</comment>

        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="55:9">if <condition pos:start="45:12" pos:end="47:70">(<expr pos:start="45:13" pos:end="47:69"><operator pos:start="45:13" pos:end="45:13">!</operator><call pos:start="45:14" pos:end="45:39"><name pos:start="45:14" pos:end="45:34">GIC_TEST_EDGE_TRIGGER</name><argument_list pos:start="45:35" pos:end="45:39">(<argument pos:start="45:36" pos:end="45:38"><expr pos:start="45:36" pos:end="45:38"><name pos:start="45:36" pos:end="45:38">irq</name></expr></argument>)</argument_list></call> <operator pos:start="45:41" pos:end="45:42">&amp;&amp;</operator> <call pos:start="45:44" pos:end="45:68"><name pos:start="45:44" pos:end="45:59">GIC_TEST_ENABLED</name><argument_list pos:start="45:60" pos:end="45:68">(<argument pos:start="45:61" pos:end="45:63"><expr pos:start="45:61" pos:end="45:63"><name pos:start="45:61" pos:end="45:63">irq</name></expr></argument>, <argument pos:start="45:66" pos:end="45:67"><expr pos:start="45:66" pos:end="45:67"><name pos:start="45:66" pos:end="45:67">cm</name></expr></argument>)</argument_list></call>

            <operator pos:start="47:13" pos:end="47:14">&amp;&amp;</operator> <call pos:start="47:16" pos:end="47:38"><name pos:start="47:16" pos:end="47:29">GIC_TEST_LEVEL</name><argument_list pos:start="47:30" pos:end="47:38">(<argument pos:start="47:31" pos:end="47:33"><expr pos:start="47:31" pos:end="47:33"><name pos:start="47:31" pos:end="47:33">irq</name></expr></argument>, <argument pos:start="47:36" pos:end="47:37"><expr pos:start="47:36" pos:end="47:37"><name pos:start="47:36" pos:end="47:37">cm</name></expr></argument>)</argument_list></call> <operator pos:start="47:40" pos:end="47:41">&amp;&amp;</operator> <operator pos:start="47:43" pos:end="47:43">(</operator><call pos:start="47:44" pos:end="47:58"><name pos:start="47:44" pos:end="47:53">GIC_TARGET</name><argument_list pos:start="47:54" pos:end="47:58">(<argument pos:start="47:55" pos:end="47:57"><expr pos:start="47:55" pos:end="47:57"><name pos:start="47:55" pos:end="47:57">irq</name></expr></argument>)</argument_list></call> <operator pos:start="47:60" pos:end="47:60">&amp;</operator> <name pos:start="47:62" pos:end="47:63">cm</name><operator pos:start="47:64" pos:end="47:64">)</operator> <operator pos:start="47:66" pos:end="47:67">!=</operator> <literal type="number" pos:start="47:69" pos:end="47:69">0</literal></expr>)</condition> <block pos:start="47:72" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:23">

            <expr_stmt pos:start="49:13" pos:end="49:57"><expr pos:start="49:13" pos:end="49:56"><call pos:start="49:13" pos:end="49:56"><name pos:start="49:13" pos:end="49:19">DPRINTF</name><argument_list pos:start="49:20" pos:end="49:56">(<argument pos:start="49:21" pos:end="49:46"><expr pos:start="49:21" pos:end="49:46"><literal type="string" pos:start="49:21" pos:end="49:46">"Set %d pending mask %x\n"</literal></expr></argument>, <argument pos:start="49:49" pos:end="49:51"><expr pos:start="49:49" pos:end="49:51"><name pos:start="49:49" pos:end="49:51">irq</name></expr></argument>, <argument pos:start="49:54" pos:end="49:55"><expr pos:start="49:54" pos:end="49:55"><name pos:start="49:54" pos:end="49:55">cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:37"><expr pos:start="51:13" pos:end="51:36"><call pos:start="51:13" pos:end="51:36"><name pos:start="51:13" pos:end="51:27">GIC_SET_PENDING</name><argument_list pos:start="51:28" pos:end="51:36">(<argument pos:start="51:29" pos:end="51:31"><expr pos:start="51:29" pos:end="51:31"><name pos:start="51:29" pos:end="51:31">irq</name></expr></argument>, <argument pos:start="51:34" pos:end="51:35"><expr pos:start="51:34" pos:end="51:35"><name pos:start="51:34" pos:end="51:35">cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:23"><expr pos:start="53:13" pos:end="53:22"><name pos:start="53:13" pos:end="53:18">update</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <literal type="number" pos:start="53:22" pos:end="53:22">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="93:5"><if pos:start="61:5" pos:end="87:5">if <condition pos:start="61:8" pos:end="61:35">(<expr pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:11">irq</name> <operator pos:start="61:13" pos:end="61:14">!=</operator> <name pos:start="61:16" pos:end="61:34"><name pos:start="61:16" pos:end="61:16">s</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:29">running_irq</name><index pos:start="61:30" pos:end="61:34">[<expr pos:start="61:31" pos:end="61:33"><name pos:start="61:31" pos:end="61:33">cpu</name></expr>]</index></name></expr>)</condition> <block pos:start="61:37" pos:end="87:5">{<block_content pos:start="65:9" pos:end="85:9">

        <comment type="block" pos:start="63:9" pos:end="63:61">/* Complete an IRQ that is not currently running.  */</comment>

        <decl_stmt pos:start="65:9" pos:end="65:38"><decl pos:start="65:9" pos:end="65:37"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:15">tmp</name> <init pos:start="65:17" pos:end="65:37">= <expr pos:start="65:19" pos:end="65:37"><name pos:start="65:19" pos:end="65:37"><name pos:start="65:19" pos:end="65:19">s</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:32">running_irq</name><index pos:start="65:33" pos:end="65:37">[<expr pos:start="65:34" pos:end="65:36"><name pos:start="65:34" pos:end="65:36">cpu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <while pos:start="67:9" pos:end="79:9">while <condition pos:start="67:15" pos:end="67:48">(<expr pos:start="67:16" pos:end="67:47"><name pos:start="67:16" pos:end="67:39"><name pos:start="67:16" pos:end="67:16">s</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:29">last_active</name><index pos:start="67:30" pos:end="67:34">[<expr pos:start="67:31" pos:end="67:33"><name pos:start="67:31" pos:end="67:33">tmp</name></expr>]</index><index pos:start="67:35" pos:end="67:39">[<expr pos:start="67:36" pos:end="67:38"><name pos:start="67:36" pos:end="67:38">cpu</name></expr>]</index></name> <operator pos:start="67:41" pos:end="67:42">!=</operator> <literal type="number" pos:start="67:44" pos:end="67:47">1023</literal></expr>)</condition> <block pos:start="67:50" pos:end="79:9">{<block_content pos:start="69:13" pos:end="77:43">

            <if_stmt pos:start="69:13" pos:end="75:13"><if pos:start="69:13" pos:end="75:13">if <condition pos:start="69:16" pos:end="69:48">(<expr pos:start="69:17" pos:end="69:47"><name pos:start="69:17" pos:end="69:40"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:30">last_active</name><index pos:start="69:31" pos:end="69:35">[<expr pos:start="69:32" pos:end="69:34"><name pos:start="69:32" pos:end="69:34">tmp</name></expr>]</index><index pos:start="69:36" pos:end="69:40">[<expr pos:start="69:37" pos:end="69:39"><name pos:start="69:37" pos:end="69:39">cpu</name></expr>]</index></name> <operator pos:start="69:42" pos:end="69:43">==</operator> <name pos:start="69:45" pos:end="69:47">irq</name></expr>)</condition> <block pos:start="69:50" pos:end="75:13">{<block_content pos:start="71:17" pos:end="73:22">

                <expr_stmt pos:start="71:17" pos:end="71:68"><expr pos:start="71:17" pos:end="71:67"><name pos:start="71:17" pos:end="71:40"><name pos:start="71:17" pos:end="71:17">s</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:30">last_active</name><index pos:start="71:31" pos:end="71:35">[<expr pos:start="71:32" pos:end="71:34"><name pos:start="71:32" pos:end="71:34">tmp</name></expr>]</index><index pos:start="71:36" pos:end="71:40">[<expr pos:start="71:37" pos:end="71:39"><name pos:start="71:37" pos:end="71:39">cpu</name></expr>]</index></name> <operator pos:start="71:42" pos:end="71:42">=</operator> <name pos:start="71:44" pos:end="71:67"><name pos:start="71:44" pos:end="71:44">s</name><operator pos:start="71:45" pos:end="71:46">-&gt;</operator><name pos:start="71:47" pos:end="71:57">last_active</name><index pos:start="71:58" pos:end="71:62">[<expr pos:start="71:59" pos:end="71:61"><name pos:start="71:59" pos:end="71:61">irq</name></expr>]</index><index pos:start="71:63" pos:end="71:67">[<expr pos:start="71:64" pos:end="71:66"><name pos:start="71:64" pos:end="71:66">cpu</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="73:17" pos:end="73:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:43"><expr pos:start="77:13" pos:end="77:42"><name pos:start="77:13" pos:end="77:15">tmp</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:42"><name pos:start="77:19" pos:end="77:19">s</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:32">last_active</name><index pos:start="77:33" pos:end="77:37">[<expr pos:start="77:34" pos:end="77:36"><name pos:start="77:34" pos:end="77:36">tmp</name></expr>]</index><index pos:start="77:38" pos:end="77:42">[<expr pos:start="77:39" pos:end="77:41"><name pos:start="77:39" pos:end="77:41">cpu</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="81:9" pos:end="85:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:19">(<expr pos:start="81:13" pos:end="81:18"><name pos:start="81:13" pos:end="81:18">update</name></expr>)</condition> <block pos:start="81:21" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:26">

            <expr_stmt pos:start="83:13" pos:end="83:26"><expr pos:start="83:13" pos:end="83:25"><call pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:22">gic_update</name><argument_list pos:start="83:23" pos:end="83:25">(<argument pos:start="83:24" pos:end="83:24"><expr pos:start="83:24" pos:end="83:24"><name pos:start="83:24" pos:end="83:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="93:5">else <block pos:start="87:12" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:78">

        <comment type="block" pos:start="89:9" pos:end="89:48">/* Complete the current running IRQ.  */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:78"><expr pos:start="91:9" pos:end="91:77"><call pos:start="91:9" pos:end="91:77"><name pos:start="91:9" pos:end="91:27">gic_set_running_irq</name><argument_list pos:start="91:28" pos:end="91:77">(<argument pos:start="91:29" pos:end="91:29"><expr pos:start="91:29" pos:end="91:29"><name pos:start="91:29" pos:end="91:29">s</name></expr></argument>, <argument pos:start="91:32" pos:end="91:34"><expr pos:start="91:32" pos:end="91:34"><name pos:start="91:32" pos:end="91:34">cpu</name></expr></argument>, <argument pos:start="91:37" pos:end="91:76"><expr pos:start="91:37" pos:end="91:76"><name pos:start="91:37" pos:end="91:76"><name pos:start="91:37" pos:end="91:37">s</name><operator pos:start="91:38" pos:end="91:39">-&gt;</operator><name pos:start="91:40" pos:end="91:50">last_active</name><index pos:start="91:51" pos:end="91:71">[<expr pos:start="91:52" pos:end="91:70"><name pos:start="91:52" pos:end="91:70"><name pos:start="91:52" pos:end="91:52">s</name><operator pos:start="91:53" pos:end="91:54">-&gt;</operator><name pos:start="91:55" pos:end="91:65">running_irq</name><index pos:start="91:66" pos:end="91:70">[<expr pos:start="91:67" pos:end="91:69"><name pos:start="91:67" pos:end="91:69">cpu</name></expr>]</index></name></expr>]</index><index pos:start="91:72" pos:end="91:76">[<expr pos:start="91:73" pos:end="91:75"><name pos:start="91:73" pos:end="91:75">cpu</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
