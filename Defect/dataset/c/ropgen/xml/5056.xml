<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5056.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:46">backup_run_incremental</name><parameter_list pos:start="1:47" pos:end="1:67">(<parameter pos:start="1:48" pos:end="1:66"><decl pos:start="1:48" pos:end="1:66"><type pos:start="1:48" pos:end="1:63"><name pos:start="1:48" pos:end="1:61">BackupBlockJob</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">job</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:15">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">bool</name></type> <name pos:start="5:10" pos:end="5:22">error_is_read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:25">clusters_per_iter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:24">granularity</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:18">sector</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:19">cluster</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:15">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:29"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:24">last_cluster</name> <init pos:start="19:26" pos:end="19:29">= <expr pos:start="19:28" pos:end="19:29"><operator pos:start="19:28" pos:end="19:28">-</operator><literal type="number" pos:start="19:29" pos:end="19:29">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:60"><decl pos:start="21:5" pos:end="21:59"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:31">sectors_per_cluster</name> <init pos:start="21:33" pos:end="21:59">= <expr pos:start="21:35" pos:end="21:59"><call pos:start="21:35" pos:end="21:59"><name pos:start="21:35" pos:end="21:54">cluster_size_sectors</name><argument_list pos:start="21:55" pos:end="21:59">(<argument pos:start="21:56" pos:end="21:58"><expr pos:start="21:56" pos:end="21:58"><name pos:start="21:56" pos:end="21:58">job</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:23">BdrvDirtyBitmapIter</name> <modifier pos:start="23:25" pos:end="23:25">*</modifier></type><name pos:start="23:26" pos:end="23:28">dbi</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:66"><expr pos:start="27:5" pos:end="27:65"><name pos:start="27:5" pos:end="27:15">granularity</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:65"><name pos:start="27:19" pos:end="27:47">bdrv_dirty_bitmap_granularity</name><argument_list pos:start="27:48" pos:end="27:65">(<argument pos:start="27:49" pos:end="27:64"><expr pos:start="27:49" pos:end="27:64"><name pos:start="27:49" pos:end="27:64"><name pos:start="27:49" pos:end="27:51">job</name><operator pos:start="27:52" pos:end="27:53">-&gt;</operator><name pos:start="27:54" pos:end="27:64">sync_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:66"><expr pos:start="29:5" pos:end="29:65"><name pos:start="29:5" pos:end="29:21">clusters_per_iter</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <call pos:start="29:25" pos:end="29:65"><name pos:start="29:25" pos:end="29:27">MAX</name><argument_list pos:start="29:28" pos:end="29:65">(<argument pos:start="29:29" pos:end="29:61"><expr pos:start="29:29" pos:end="29:61"><operator pos:start="29:29" pos:end="29:29">(</operator><name pos:start="29:30" pos:end="29:40">granularity</name> <operator pos:start="29:42" pos:end="29:42">/</operator> <name pos:start="29:44" pos:end="29:60"><name pos:start="29:44" pos:end="29:46">job</name><operator pos:start="29:47" pos:end="29:48">-&gt;</operator><name pos:start="29:49" pos:end="29:60">cluster_size</name></name><operator pos:start="29:61" pos:end="29:61">)</operator></expr></argument>, <argument pos:start="29:64" pos:end="29:64"><expr pos:start="29:64" pos:end="29:64"><literal type="number" pos:start="29:64" pos:end="29:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:51"><expr pos:start="31:5" pos:end="31:50"><name pos:start="31:5" pos:end="31:7">dbi</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:50"><name pos:start="31:11" pos:end="31:29">bdrv_dirty_iter_new</name><argument_list pos:start="31:30" pos:end="31:50">(<argument pos:start="31:31" pos:end="31:46"><expr pos:start="31:31" pos:end="31:46"><name pos:start="31:31" pos:end="31:46"><name pos:start="31:31" pos:end="31:33">job</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:46">sync_bitmap</name></name></expr></argument>, <argument pos:start="31:49" pos:end="31:49"><expr pos:start="31:49" pos:end="31:49"><literal type="number" pos:start="31:49" pos:end="31:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:39">/* Find the next dirty sector(s) */</comment>

    <while pos:start="37:5" pos:end="101:5">while <condition pos:start="37:11" pos:end="37:54">(<expr pos:start="37:12" pos:end="37:53"><operator pos:start="37:12" pos:end="37:12">(</operator><name pos:start="37:13" pos:end="37:18">sector</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <call pos:start="37:22" pos:end="37:46"><name pos:start="37:22" pos:end="37:41">bdrv_dirty_iter_next</name><argument_list pos:start="37:42" pos:end="37:46">(<argument pos:start="37:43" pos:end="37:45"><expr pos:start="37:43" pos:end="37:45"><name pos:start="37:43" pos:end="37:45">dbi</name></expr></argument>)</argument_list></call><operator pos:start="37:47" pos:end="37:47">)</operator> <operator pos:start="37:49" pos:end="37:50">!=</operator> <operator pos:start="37:52" pos:end="37:52">-</operator><literal type="number" pos:start="37:53" pos:end="37:53">1</literal></expr>)</condition> <block pos:start="37:56" pos:end="101:5">{<block_content pos:start="39:9" pos:end="99:35">

        <expr_stmt pos:start="39:9" pos:end="39:47"><expr pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:15">cluster</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:24">sector</name> <operator pos:start="39:26" pos:end="39:26">/</operator> <name pos:start="39:28" pos:end="39:46">sectors_per_cluster</name></expr>;</expr_stmt>



        <comment type="block" pos:start="43:9" pos:end="43:63">/* Fake progress updates for any clusters we skipped */</comment>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:40">(<expr pos:start="45:13" pos:end="45:39"><name pos:start="45:13" pos:end="45:19">cluster</name> <operator pos:start="45:21" pos:end="45:22">!=</operator> <name pos:start="45:24" pos:end="45:35">last_cluster</name> <operator pos:start="45:37" pos:end="45:37">+</operator> <literal type="number" pos:start="45:39" pos:end="45:39">1</literal></expr>)</condition> <block pos:start="45:42" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:54">

            <expr_stmt pos:start="47:13" pos:end="49:54"><expr pos:start="47:13" pos:end="49:53"><name pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:15">job</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:23">common</name><operator pos:start="47:24" pos:end="47:24">.</operator><name pos:start="47:25" pos:end="47:30">offset</name></name> <operator pos:start="47:32" pos:end="47:33">+=</operator> <operator pos:start="47:35" pos:end="47:35">(</operator><operator pos:start="47:36" pos:end="47:36">(</operator><name pos:start="47:37" pos:end="47:43">cluster</name> <operator pos:start="47:45" pos:end="47:45">-</operator> <name pos:start="47:47" pos:end="47:58">last_cluster</name> <operator pos:start="47:60" pos:end="47:60">-</operator> <literal type="number" pos:start="47:62" pos:end="47:62">1</literal><operator pos:start="47:63" pos:end="47:63">)</operator> <operator pos:start="47:65" pos:end="47:65">*</operator>

                                   <name pos:start="49:36" pos:end="49:52"><name pos:start="49:36" pos:end="49:38">job</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:52">cluster_size</name></name><operator pos:start="49:53" pos:end="49:53">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="55:9" pos:end="83:9">for <control pos:start="55:13" pos:end="55:73">(<init pos:start="55:14" pos:end="55:47"><expr pos:start="55:14" pos:end="55:46"><name pos:start="55:14" pos:end="55:16">end</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:26">cluster</name> <operator pos:start="55:28" pos:end="55:28">+</operator> <name pos:start="55:30" pos:end="55:46">clusters_per_iter</name></expr>;</init> <condition pos:start="55:49" pos:end="55:62"><expr pos:start="55:49" pos:end="55:61"><name pos:start="55:49" pos:end="55:55">cluster</name> <operator pos:start="55:57" pos:end="55:57">&lt;</operator> <name pos:start="55:59" pos:end="55:61">end</name></expr>;</condition> <incr pos:start="55:64" pos:end="55:72"><expr pos:start="55:64" pos:end="55:72"><name pos:start="55:64" pos:end="55:70">cluster</name><operator pos:start="55:71" pos:end="55:72">++</operator></expr></incr>)</control> <block pos:start="55:75" pos:end="83:9">{<block_content pos:start="57:13" pos:end="81:30">

            <do pos:start="57:13" pos:end="81:30">do <block pos:start="57:16" pos:end="81:13">{<block_content pos:start="59:17" pos:end="79:17">

                <if_stmt pos:start="59:17" pos:end="63:17"><if pos:start="59:17" pos:end="63:17">if <condition pos:start="59:20" pos:end="59:41">(<expr pos:start="59:21" pos:end="59:40"><call pos:start="59:21" pos:end="59:40"><name pos:start="59:21" pos:end="59:35">yield_and_check</name><argument_list pos:start="59:36" pos:end="59:40">(<argument pos:start="59:37" pos:end="59:39"><expr pos:start="59:37" pos:end="59:39"><name pos:start="59:37" pos:end="59:39">job</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:43" pos:end="63:17">{<block_content pos:start="61:21" pos:end="61:29">

                    <goto pos:start="61:21" pos:end="61:29">goto <name pos:start="61:26" pos:end="61:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="65:17" pos:end="69:43"><expr pos:start="65:17" pos:end="69:42"><name pos:start="65:17" pos:end="65:19">ret</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="69:42"><name pos:start="65:23" pos:end="65:35">backup_do_cow</name><argument_list pos:start="65:36" pos:end="69:42">(<argument pos:start="65:37" pos:end="65:39"><expr pos:start="65:37" pos:end="65:39"><name pos:start="65:37" pos:end="65:39">job</name></expr></argument>, <argument pos:start="65:42" pos:end="65:68"><expr pos:start="65:42" pos:end="65:68"><name pos:start="65:42" pos:end="65:48">cluster</name> <operator pos:start="65:50" pos:end="65:50">*</operator> <name pos:start="65:52" pos:end="65:68"><name pos:start="65:52" pos:end="65:54">job</name><operator pos:start="65:55" pos:end="65:56">-&gt;</operator><name pos:start="65:57" pos:end="65:68">cluster_size</name></name></expr></argument>,

                                    <argument pos:start="67:37" pos:end="67:53"><expr pos:start="67:37" pos:end="67:53"><name pos:start="67:37" pos:end="67:53"><name pos:start="67:37" pos:end="67:39">job</name><operator pos:start="67:40" pos:end="67:41">-&gt;</operator><name pos:start="67:42" pos:end="67:53">cluster_size</name></name></expr></argument>, <argument pos:start="67:56" pos:end="67:69"><expr pos:start="67:56" pos:end="67:69"><operator pos:start="67:56" pos:end="67:56">&amp;</operator><name pos:start="67:57" pos:end="67:69">error_is_read</name></expr></argument>,

                                    <argument pos:start="69:37" pos:end="69:41"><expr pos:start="69:37" pos:end="69:41"><name pos:start="69:37" pos:end="69:41">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="71:17" pos:end="79:17"><if pos:start="71:17" pos:end="79:17">if <condition pos:start="71:20" pos:end="75:46">(<expr pos:start="71:21" pos:end="75:45"><operator pos:start="71:21" pos:end="71:21">(</operator><name pos:start="71:22" pos:end="71:24">ret</name> <operator pos:start="71:26" pos:end="71:26">&lt;</operator> <literal type="number" pos:start="71:28" pos:end="71:28">0</literal><operator pos:start="71:29" pos:end="71:29">)</operator> <operator pos:start="71:31" pos:end="71:32">&amp;&amp;</operator>

                    <call pos:start="73:21" pos:end="73:65"><name pos:start="73:21" pos:end="73:39">backup_error_action</name><argument_list pos:start="73:40" pos:end="73:65">(<argument pos:start="73:41" pos:end="73:43"><expr pos:start="73:41" pos:end="73:43"><name pos:start="73:41" pos:end="73:43">job</name></expr></argument>, <argument pos:start="73:46" pos:end="73:58"><expr pos:start="73:46" pos:end="73:58"><name pos:start="73:46" pos:end="73:58">error_is_read</name></expr></argument>, <argument pos:start="73:61" pos:end="73:64"><expr pos:start="73:61" pos:end="73:64"><operator pos:start="73:61" pos:end="73:61">-</operator><name pos:start="73:62" pos:end="73:64">ret</name></expr></argument>)</argument_list></call> <operator pos:start="73:67" pos:end="73:68">==</operator>

                    <name pos:start="75:21" pos:end="75:45">BLOCK_ERROR_ACTION_REPORT</name></expr>)</condition> <block pos:start="75:48" pos:end="79:17">{<block_content pos:start="77:21" pos:end="77:29">

                    <goto pos:start="77:21" pos:end="77:29">goto <name pos:start="77:26" pos:end="77:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block> while <condition pos:start="81:21" pos:end="81:29">(<expr pos:start="81:22" pos:end="81:28"><name pos:start="81:22" pos:end="81:24">ret</name> <operator pos:start="81:26" pos:end="81:26">&lt;</operator> <literal type="number" pos:start="81:28" pos:end="81:28">0</literal></expr>)</condition>;</do>

        </block_content>}</block></for>



        <comment type="block" pos:start="87:9" pos:end="89:74">/* If the bitmap granularity is smaller than the backup granularity,

         * we need to advance the iterator pointer to the next cluster. */</comment>

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:44">(<expr pos:start="91:13" pos:end="91:43"><name pos:start="91:13" pos:end="91:23">granularity</name> <operator pos:start="91:25" pos:end="91:25">&lt;</operator> <name pos:start="91:27" pos:end="91:43"><name pos:start="91:27" pos:end="91:29">job</name><operator pos:start="91:30" pos:end="91:31">-&gt;</operator><name pos:start="91:32" pos:end="91:43">cluster_size</name></name></expr>)</condition> <block pos:start="91:46" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:68">

            <expr_stmt pos:start="93:13" pos:end="93:68"><expr pos:start="93:13" pos:end="93:67"><call pos:start="93:13" pos:end="93:67"><name pos:start="93:13" pos:end="93:31">bdrv_set_dirty_iter</name><argument_list pos:start="93:32" pos:end="93:67">(<argument pos:start="93:33" pos:end="93:35"><expr pos:start="93:33" pos:end="93:35"><name pos:start="93:33" pos:end="93:35">dbi</name></expr></argument>, <argument pos:start="93:38" pos:end="93:66"><expr pos:start="93:38" pos:end="93:66"><name pos:start="93:38" pos:end="93:44">cluster</name> <operator pos:start="93:46" pos:end="93:46">*</operator> <name pos:start="93:48" pos:end="93:66">sectors_per_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:35"><expr pos:start="99:9" pos:end="99:34"><name pos:start="99:9" pos:end="99:20">last_cluster</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <name pos:start="99:24" pos:end="99:30">cluster</name> <operator pos:start="99:32" pos:end="99:32">-</operator> <literal type="number" pos:start="99:34" pos:end="99:34">1</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="105:5" pos:end="105:57">/* Play some final catchup with the progress meter */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:59"><expr pos:start="107:5" pos:end="107:58"><name pos:start="107:5" pos:end="107:7">end</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <call pos:start="107:11" pos:end="107:58"><name pos:start="107:11" pos:end="107:22">DIV_ROUND_UP</name><argument_list pos:start="107:23" pos:end="107:58">(<argument pos:start="107:24" pos:end="107:38"><expr pos:start="107:24" pos:end="107:38"><name pos:start="107:24" pos:end="107:38"><name pos:start="107:24" pos:end="107:26">job</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:34">common</name><operator pos:start="107:35" pos:end="107:35">.</operator><name pos:start="107:36" pos:end="107:38">len</name></name></expr></argument>, <argument pos:start="107:41" pos:end="107:57"><expr pos:start="107:41" pos:end="107:57"><name pos:start="107:41" pos:end="107:57"><name pos:start="107:41" pos:end="107:43">job</name><operator pos:start="107:44" pos:end="107:45">-&gt;</operator><name pos:start="107:46" pos:end="107:57">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:31">(<expr pos:start="109:9" pos:end="109:30"><name pos:start="109:9" pos:end="109:20">last_cluster</name> <operator pos:start="109:22" pos:end="109:22">+</operator> <literal type="number" pos:start="109:24" pos:end="109:24">1</literal> <operator pos:start="109:26" pos:end="109:26">&lt;</operator> <name pos:start="109:28" pos:end="109:30">end</name></expr>)</condition> <block pos:start="109:33" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:77">

        <expr_stmt pos:start="111:9" pos:end="111:77"><expr pos:start="111:9" pos:end="111:76"><name pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:11">job</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:19">common</name><operator pos:start="111:20" pos:end="111:20">.</operator><name pos:start="111:21" pos:end="111:26">offset</name></name> <operator pos:start="111:28" pos:end="111:29">+=</operator> <operator pos:start="111:31" pos:end="111:31">(</operator><operator pos:start="111:32" pos:end="111:32">(</operator><name pos:start="111:33" pos:end="111:35">end</name> <operator pos:start="111:37" pos:end="111:37">-</operator> <name pos:start="111:39" pos:end="111:50">last_cluster</name> <operator pos:start="111:52" pos:end="111:52">-</operator> <literal type="number" pos:start="111:54" pos:end="111:54">1</literal><operator pos:start="111:55" pos:end="111:55">)</operator> <operator pos:start="111:57" pos:end="111:57">*</operator> <name pos:start="111:59" pos:end="111:75"><name pos:start="111:59" pos:end="111:61">job</name><operator pos:start="111:62" pos:end="111:63">-&gt;</operator><name pos:start="111:64" pos:end="111:75">cluster_size</name></name><operator pos:start="111:76" pos:end="111:76">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="117:1" pos:end="117:4"><name pos:start="117:1" pos:end="117:3">out</name>:</label>

    <expr_stmt pos:start="119:5" pos:end="119:30"><expr pos:start="119:5" pos:end="119:29"><call pos:start="119:5" pos:end="119:29"><name pos:start="119:5" pos:end="119:24">bdrv_dirty_iter_free</name><argument_list pos:start="119:25" pos:end="119:29">(<argument pos:start="119:26" pos:end="119:28"><expr pos:start="119:26" pos:end="119:28"><name pos:start="119:26" pos:end="119:28">dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="121:5" pos:end="121:15">return <expr pos:start="121:12" pos:end="121:14"><name pos:start="121:12" pos:end="121:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
