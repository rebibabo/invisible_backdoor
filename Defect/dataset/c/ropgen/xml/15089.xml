<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15089.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">vmdk_read</name><parameter_list pos:start="1:21" pos:end="3:49">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><name pos:start="1:44" pos:end="1:50">int64_t</name></type> <name pos:start="1:52" pos:end="1:61">sector_num</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:32"><decl pos:start="3:21" pos:end="3:32"><type pos:start="3:21" pos:end="3:32"><name pos:start="3:21" pos:end="3:27">uint8_t</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:32">buf</name></decl></parameter>, <parameter pos:start="3:35" pos:end="3:48"><decl pos:start="3:35" pos:end="3:48"><type pos:start="3:35" pos:end="3:48"><name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:48">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="91:1">{<block_content pos:start="7:5" pos:end="89:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVVmdkState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:14">n</name></decl>, <decl pos:start="11:17" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:17" pos:end="11:32">index_in_cluster</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">VmdkExtent</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:22">extent</name> <init pos:start="13:24" pos:end="13:29">= <expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:27">cluster_offset</name></decl>;</decl_stmt>



    <while pos:start="19:5" pos:end="87:5">while <condition pos:start="19:11" pos:end="19:26">(<expr pos:start="19:12" pos:end="19:25"><name pos:start="19:12" pos:end="19:21">nb_sectors</name> <operator pos:start="19:23" pos:end="19:23">&gt;</operator> <literal type="number" pos:start="19:25" pos:end="19:25">0</literal></expr>)</condition> <block pos:start="19:28" pos:end="87:5">{<block_content pos:start="21:9" pos:end="85:23">

        <expr_stmt pos:start="21:9" pos:end="21:52"><expr pos:start="21:9" pos:end="21:51"><name pos:start="21:9" pos:end="21:14">extent</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <call pos:start="21:18" pos:end="21:51"><name pos:start="21:18" pos:end="21:28">find_extent</name><argument_list pos:start="21:29" pos:end="21:51">(<argument pos:start="21:30" pos:end="21:30"><expr pos:start="21:30" pos:end="21:30"><name pos:start="21:30" pos:end="21:30">s</name></expr></argument>, <argument pos:start="21:33" pos:end="21:42"><expr pos:start="21:33" pos:end="21:42"><name pos:start="21:33" pos:end="21:42">sector_num</name></expr></argument>, <argument pos:start="21:45" pos:end="21:50"><expr pos:start="21:45" pos:end="21:50"><name pos:start="21:45" pos:end="21:50">extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:20">(<expr pos:start="23:13" pos:end="23:19"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:19">extent</name></expr>)</condition> <block pos:start="23:22" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:24">

            <return pos:start="25:13" pos:end="25:24">return <expr pos:start="25:20" pos:end="25:23"><operator pos:start="25:20" pos:end="25:20">-</operator><name pos:start="25:21" pos:end="25:23">EIO</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="33:65"><expr pos:start="29:9" pos:end="33:64"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="33:64"><name pos:start="29:15" pos:end="29:32">get_cluster_offset</name><argument_list pos:start="29:33" pos:end="33:64">(

                            <argument pos:start="31:29" pos:end="31:30"><expr pos:start="31:29" pos:end="31:30"><name pos:start="31:29" pos:end="31:30">bs</name></expr></argument>, <argument pos:start="31:33" pos:end="31:38"><expr pos:start="31:33" pos:end="31:38"><name pos:start="31:33" pos:end="31:38">extent</name></expr></argument>, <argument pos:start="31:41" pos:end="31:44"><expr pos:start="31:41" pos:end="31:44"><name pos:start="31:41" pos:end="31:44">NULL</name></expr></argument>,

                            <argument pos:start="33:29" pos:end="33:43"><expr pos:start="33:29" pos:end="33:43"><name pos:start="33:29" pos:end="33:38">sector_num</name> <operator pos:start="33:40" pos:end="33:41">&lt;&lt;</operator> <literal type="number" pos:start="33:43" pos:end="33:43">9</literal></expr></argument>, <argument pos:start="33:46" pos:end="33:46"><expr pos:start="33:46" pos:end="33:46"><literal type="number" pos:start="33:46" pos:end="33:46">0</literal></expr></argument>, <argument pos:start="33:49" pos:end="33:63"><expr pos:start="33:49" pos:end="33:63"><operator pos:start="33:49" pos:end="33:49">&amp;</operator><name pos:start="33:50" pos:end="33:63">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:64"><expr pos:start="35:9" pos:end="35:63"><name pos:start="35:9" pos:end="35:24">index_in_cluster</name> <operator pos:start="35:26" pos:end="35:26">=</operator> <name pos:start="35:28" pos:end="35:37">sector_num</name> <operator pos:start="35:39" pos:end="35:39">%</operator> <name pos:start="35:41" pos:end="35:63"><name pos:start="35:41" pos:end="35:46">extent</name><operator pos:start="35:47" pos:end="35:48">-&gt;</operator><name pos:start="35:49" pos:end="35:63">cluster_sectors</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:55"><expr pos:start="37:9" pos:end="37:54"><name pos:start="37:9" pos:end="37:9">n</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <name pos:start="37:13" pos:end="37:35"><name pos:start="37:13" pos:end="37:18">extent</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:35">cluster_sectors</name></name> <operator pos:start="37:37" pos:end="37:37">-</operator> <name pos:start="37:39" pos:end="37:54">index_in_cluster</name></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="41:27"><if pos:start="39:9" pos:end="41:27">if <condition pos:start="39:12" pos:end="39:27">(<expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:13">n</name> <operator pos:start="39:15" pos:end="39:15">&gt;</operator> <name pos:start="39:17" pos:end="39:26">nb_sectors</name></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:27"><block_content pos:start="41:13" pos:end="41:27">

            <expr_stmt pos:start="41:13" pos:end="41:27"><expr pos:start="41:13" pos:end="41:26"><name pos:start="41:13" pos:end="41:13">n</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:26">nb_sectors</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="79:9"><if pos:start="43:9" pos:end="65:9">if <condition pos:start="43:12" pos:end="43:16">(<expr pos:start="43:13" pos:end="43:15"><name pos:start="43:13" pos:end="43:15">ret</name></expr>)</condition> <block pos:start="43:18" pos:end="65:9">{<block_content pos:start="47:13" pos:end="63:13">

            <comment type="block" pos:start="45:13" pos:end="45:75">/* if not allocated, try to read from parent image, if exist */</comment>

            <if_stmt pos:start="47:13" pos:end="63:13"><if pos:start="47:13" pos:end="59:13">if <condition pos:start="47:16" pos:end="47:31">(<expr pos:start="47:17" pos:end="47:30"><name pos:start="47:17" pos:end="47:30"><name pos:start="47:17" pos:end="47:18">bs</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:30">backing_hd</name></name></expr>)</condition> <block pos:start="47:33" pos:end="59:13">{<block_content pos:start="49:17" pos:end="57:31">

                <if_stmt pos:start="49:17" pos:end="51:35"><if pos:start="49:17" pos:end="51:35">if <condition pos:start="49:20" pos:end="49:43">(<expr pos:start="49:21" pos:end="49:42"><operator pos:start="49:21" pos:end="49:21">!</operator><call pos:start="49:22" pos:end="49:42"><name pos:start="49:22" pos:end="49:38">vmdk_is_cid_valid</name><argument_list pos:start="49:39" pos:end="49:42">(<argument pos:start="49:40" pos:end="49:41"><expr pos:start="49:40" pos:end="49:41"><name pos:start="49:40" pos:end="49:41">bs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="51:21" pos:end="51:35"><block_content pos:start="51:21" pos:end="51:35">

                    <return pos:start="51:21" pos:end="51:35">return <expr pos:start="51:28" pos:end="51:34"><operator pos:start="51:28" pos:end="51:28">-</operator><name pos:start="51:29" pos:end="51:34">EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:68"><expr pos:start="53:17" pos:end="53:67"><name pos:start="53:17" pos:end="53:19">ret</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:67"><name pos:start="53:23" pos:end="53:31">bdrv_read</name><argument_list pos:start="53:32" pos:end="53:67">(<argument pos:start="53:33" pos:end="53:46"><expr pos:start="53:33" pos:end="53:46"><name pos:start="53:33" pos:end="53:46"><name pos:start="53:33" pos:end="53:34">bs</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:46">backing_hd</name></name></expr></argument>, <argument pos:start="53:49" pos:end="53:58"><expr pos:start="53:49" pos:end="53:58"><name pos:start="53:49" pos:end="53:58">sector_num</name></expr></argument>, <argument pos:start="53:61" pos:end="53:63"><expr pos:start="53:61" pos:end="53:63"><name pos:start="53:61" pos:end="53:63">buf</name></expr></argument>, <argument pos:start="53:66" pos:end="53:66"><expr pos:start="53:66" pos:end="53:66"><name pos:start="53:66" pos:end="53:66">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="55:17" pos:end="57:31"><if pos:start="55:17" pos:end="57:31">if <condition pos:start="55:20" pos:end="55:28">(<expr pos:start="55:21" pos:end="55:27"><name pos:start="55:21" pos:end="55:23">ret</name> <operator pos:start="55:25" pos:end="55:25">&lt;</operator> <literal type="number" pos:start="55:27" pos:end="55:27">0</literal></expr>)</condition><block type="pseudo" pos:start="57:21" pos:end="57:31"><block_content pos:start="57:21" pos:end="57:31">

                    <return pos:start="57:21" pos:end="57:31">return <expr pos:start="57:28" pos:end="57:30"><name pos:start="57:28" pos:end="57:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="59:15" pos:end="63:13">else <block pos:start="59:20" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:40">

                <expr_stmt pos:start="61:17" pos:end="61:40"><expr pos:start="61:17" pos:end="61:39"><call pos:start="61:17" pos:end="61:39"><name pos:start="61:17" pos:end="61:22">memset</name><argument_list pos:start="61:23" pos:end="61:39">(<argument pos:start="61:24" pos:end="61:26"><expr pos:start="61:24" pos:end="61:26"><name pos:start="61:24" pos:end="61:26">buf</name></expr></argument>, <argument pos:start="61:29" pos:end="61:29"><expr pos:start="61:29" pos:end="61:29"><literal type="number" pos:start="61:29" pos:end="61:29">0</literal></expr></argument>, <argument pos:start="61:32" pos:end="61:38"><expr pos:start="61:32" pos:end="61:38"><literal type="number" pos:start="61:32" pos:end="61:34">512</literal> <operator pos:start="61:36" pos:end="61:36">*</operator> <name pos:start="61:38" pos:end="61:38">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="79:9">else <block pos:start="65:16" pos:end="79:9">{<block_content pos:start="67:13" pos:end="77:13">

            <expr_stmt pos:start="67:13" pos:end="71:42"><expr pos:start="67:13" pos:end="71:41"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="71:41"><name pos:start="67:19" pos:end="67:28">bdrv_pread</name><argument_list pos:start="67:29" pos:end="71:41">(<argument pos:start="67:30" pos:end="67:41"><expr pos:start="67:30" pos:end="67:41"><name pos:start="67:30" pos:end="67:41"><name pos:start="67:30" pos:end="67:35">extent</name><operator pos:start="67:36" pos:end="67:37">-&gt;</operator><name pos:start="67:38" pos:end="67:41">file</name></name></expr></argument>,

                            <argument pos:start="69:29" pos:end="69:67"><expr pos:start="69:29" pos:end="69:67"><name pos:start="69:29" pos:end="69:42">cluster_offset</name> <operator pos:start="69:44" pos:end="69:44">+</operator> <name pos:start="69:46" pos:end="69:61">index_in_cluster</name> <operator pos:start="69:63" pos:end="69:63">*</operator> <literal type="number" pos:start="69:65" pos:end="69:67">512</literal></expr></argument>,

                            <argument pos:start="71:29" pos:end="71:31"><expr pos:start="71:29" pos:end="71:31"><name pos:start="71:29" pos:end="71:31">buf</name></expr></argument>, <argument pos:start="71:34" pos:end="71:40"><expr pos:start="71:34" pos:end="71:40"><name pos:start="71:34" pos:end="71:34">n</name> <operator pos:start="71:36" pos:end="71:36">*</operator> <literal type="number" pos:start="71:38" pos:end="71:40">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="77:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:24">(<expr pos:start="73:17" pos:end="73:23"><name pos:start="73:17" pos:end="73:19">ret</name> <operator pos:start="73:21" pos:end="73:21">&lt;</operator> <literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>)</condition> <block pos:start="73:26" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:27">

                <return pos:start="75:17" pos:end="75:27">return <expr pos:start="75:24" pos:end="75:26"><name pos:start="75:24" pos:end="75:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:24"><expr pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:18">nb_sectors</name> <operator pos:start="81:20" pos:end="81:21">-=</operator> <name pos:start="81:23" pos:end="81:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:24"><expr pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:18">sector_num</name> <operator pos:start="83:20" pos:end="83:21">+=</operator> <name pos:start="83:23" pos:end="83:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:23"><expr pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:11">buf</name> <operator pos:start="85:13" pos:end="85:14">+=</operator> <name pos:start="85:16" pos:end="85:16">n</name> <operator pos:start="85:18" pos:end="85:18">*</operator> <literal type="number" pos:start="85:20" pos:end="85:22">512</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
