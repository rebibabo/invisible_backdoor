<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12420.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:68"><name pos:start="1:1" pos:end="1:35">host_memory_backend_memory_complete</name><argument_list pos:start="1:36" pos:end="1:68">(<argument pos:start="1:37" pos:end="1:53">UserCreatable *uc</argument>, <argument pos:start="1:56" pos:end="1:67">Error **errp</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:37">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:51"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">HostMemoryBackend</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:30">backend</name> <init pos:start="5:32" pos:end="5:51">= <expr pos:start="5:34" pos:end="5:51"><call pos:start="5:34" pos:end="5:51"><name pos:start="5:34" pos:end="5:47">MEMORY_BACKEND</name><argument_list pos:start="5:48" pos:end="5:51">(<argument pos:start="5:49" pos:end="5:50"><expr pos:start="5:49" pos:end="5:50"><name pos:start="5:49" pos:end="5:50">uc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:26">HostMemoryBackendClass</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:30">bc</name> <init pos:start="7:32" pos:end="7:61">= <expr pos:start="7:34" pos:end="7:61"><call pos:start="7:34" pos:end="7:61"><name pos:start="7:34" pos:end="7:57">MEMORY_BACKEND_GET_CLASS</name><argument_list pos:start="7:58" pos:end="7:61">(<argument pos:start="7:59" pos:end="7:60"><expr pos:start="7:59" pos:end="7:60"><name pos:start="7:59" pos:end="7:60">uc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:15">sz</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="147:5"><if pos:start="17:5" pos:end="147:5">if <condition pos:start="17:8" pos:end="17:18">(<expr pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:10">bc</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:17">alloc</name></name></expr>)</condition> <block pos:start="17:20" pos:end="147:5">{<block_content pos:start="19:9" pos:end="145:9">

        <expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><call pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:10">bc</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:17">alloc</name></name><argument_list pos:start="19:18" pos:end="19:38">(<argument pos:start="19:19" pos:end="19:25"><expr pos:start="19:19" pos:end="19:25"><name pos:start="19:19" pos:end="19:25">backend</name></expr></argument>, <argument pos:start="19:28" pos:end="19:37"><expr pos:start="19:28" pos:end="19:37"><operator pos:start="19:28" pos:end="19:28">&amp;</operator><name pos:start="19:29" pos:end="19:37">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:22">(<expr pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:21">local_err</name></expr>)</condition> <block pos:start="21:24" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:21">

            <goto pos:start="23:13" pos:end="23:21">goto <name pos:start="23:18" pos:end="23:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:54"><expr pos:start="29:9" pos:end="29:53"><name pos:start="29:9" pos:end="29:11">ptr</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:53"><name pos:start="29:15" pos:end="29:39">memory_region_get_ram_ptr</name><argument_list pos:start="29:40" pos:end="29:53">(<argument pos:start="29:41" pos:end="29:52"><expr pos:start="29:41" pos:end="29:52"><operator pos:start="29:41" pos:end="29:41">&amp;</operator><name pos:start="29:42" pos:end="29:52"><name pos:start="29:42" pos:end="29:48">backend</name><operator pos:start="29:49" pos:end="29:50">-&gt;</operator><name pos:start="29:51" pos:end="29:52">mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:46"><expr pos:start="31:9" pos:end="31:45"><name pos:start="31:9" pos:end="31:10">sz</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:45"><name pos:start="31:14" pos:end="31:31">memory_region_size</name><argument_list pos:start="31:32" pos:end="31:45">(<argument pos:start="31:33" pos:end="31:44"><expr pos:start="31:33" pos:end="31:44"><operator pos:start="31:33" pos:end="31:33">&amp;</operator><name pos:start="31:34" pos:end="31:44"><name pos:start="31:34" pos:end="31:40">backend</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:44">mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:27">(<expr pos:start="35:13" pos:end="35:26"><name pos:start="35:13" pos:end="35:26"><name pos:start="35:13" pos:end="35:19">backend</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:26">merge</name></name></expr>)</condition> <block pos:start="35:29" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:55">

            <expr_stmt pos:start="37:13" pos:end="37:55"><expr pos:start="37:13" pos:end="37:54"><call pos:start="37:13" pos:end="37:54"><name pos:start="37:13" pos:end="37:24">qemu_madvise</name><argument_list pos:start="37:25" pos:end="37:54">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><name pos:start="37:26" pos:end="37:28">ptr</name></expr></argument>, <argument pos:start="37:31" pos:end="37:32"><expr pos:start="37:31" pos:end="37:32"><name pos:start="37:31" pos:end="37:32">sz</name></expr></argument>, <argument pos:start="37:35" pos:end="37:53"><expr pos:start="37:35" pos:end="37:53"><name pos:start="37:35" pos:end="37:53">QEMU_MADV_MERGEABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="48:0"><if pos:start="41:9" pos:end="48:0">if <condition pos:start="41:12" pos:end="41:27">(<expr pos:start="41:13" pos:end="41:26"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:26"><name pos:start="41:14" pos:end="41:20">backend</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:26">dump</name></name></expr>)</condition> <block pos:start="41:29" pos:end="48:0">{<block_content pos:start="43:13" pos:end="43:54">

            <expr_stmt pos:start="43:13" pos:end="43:54"><expr pos:start="43:13" pos:end="43:53"><call pos:start="43:13" pos:end="43:53"><name pos:start="43:13" pos:end="43:24">qemu_madvise</name><argument_list pos:start="43:25" pos:end="43:53">(<argument pos:start="43:26" pos:end="43:28"><expr pos:start="43:26" pos:end="43:28"><name pos:start="43:26" pos:end="43:28">ptr</name></expr></argument>, <argument pos:start="43:31" pos:end="43:32"><expr pos:start="43:31" pos:end="43:32"><name pos:start="43:31" pos:end="43:32">sz</name></expr></argument>, <argument pos:start="43:35" pos:end="43:52"><expr pos:start="43:35" pos:end="43:52"><name pos:start="43:35" pos:end="43:52">QEMU_MADV_DONTDUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="47:1" pos:end="47:18">#<cpp:directive pos:start="47:2" pos:end="47:6">ifdef</cpp:directive> <name pos:start="47:8" pos:end="47:18">CONFIG_NUMA</name></cpp:ifdef>

        <decl_stmt pos:start="49:9" pos:end="49:78"><decl pos:start="49:9" pos:end="49:77"><type pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:16">unsigned</name> <name pos:start="49:18" pos:end="49:21">long</name></type> <name pos:start="49:23" pos:end="49:29">lastbit</name> <init pos:start="49:31" pos:end="49:77">= <expr pos:start="49:33" pos:end="49:77"><call pos:start="49:33" pos:end="49:77"><name pos:start="49:33" pos:end="49:45">find_last_bit</name><argument_list pos:start="49:46" pos:end="49:77">(<argument pos:start="49:47" pos:end="49:65"><expr pos:start="49:47" pos:end="49:65"><name pos:start="49:47" pos:end="49:65"><name pos:start="49:47" pos:end="49:53">backend</name><operator pos:start="49:54" pos:end="49:55">-&gt;</operator><name pos:start="49:56" pos:end="49:65">host_nodes</name></name></expr></argument>, <argument pos:start="49:68" pos:end="49:76"><expr pos:start="49:68" pos:end="49:76"><name pos:start="49:68" pos:end="49:76">MAX_NODES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="51:9" pos:end="51:52">/* lastbit == MAX_NODES means maxnode = 0 */</comment>

        <decl_stmt pos:start="53:9" pos:end="53:64"><decl pos:start="53:9" pos:end="53:63"><type pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:16">unsigned</name> <name pos:start="53:18" pos:end="53:21">long</name></type> <name pos:start="53:23" pos:end="53:29">maxnode</name> <init pos:start="53:31" pos:end="53:63">= <expr pos:start="53:33" pos:end="53:63"><operator pos:start="53:33" pos:end="53:33">(</operator><name pos:start="53:34" pos:end="53:40">lastbit</name> <operator pos:start="53:42" pos:end="53:42">+</operator> <literal type="number" pos:start="53:44" pos:end="53:44">1</literal><operator pos:start="53:45" pos:end="53:45">)</operator> <operator pos:start="53:47" pos:end="53:47">%</operator> <operator pos:start="53:49" pos:end="53:49">(</operator><name pos:start="53:50" pos:end="53:58">MAX_NODES</name> <operator pos:start="53:60" pos:end="53:60">+</operator> <literal type="number" pos:start="53:62" pos:end="53:62">1</literal><operator pos:start="53:63" pos:end="53:63">)</operator></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="55:9" pos:end="59:47">/* ensure policy won't be ignored in case memory is preallocated

         * before mbind(). note: MPOL_MF_STRICT is ignored on hugepages so

         * this doesn't catch hugepage case. */</comment>

        <decl_stmt pos:start="61:9" pos:end="61:55"><decl pos:start="61:9" pos:end="61:54"><type pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">unsigned</name></type> <name pos:start="61:18" pos:end="61:22">flags</name> <init pos:start="61:24" pos:end="61:54">= <expr pos:start="61:26" pos:end="61:54"><name pos:start="61:26" pos:end="61:39">MPOL_MF_STRICT</name> <operator pos:start="61:41" pos:end="61:41">|</operator> <name pos:start="61:43" pos:end="61:54">MPOL_MF_MOVE</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="65:9" pos:end="67:42">/* check for invalid host-nodes and policies and give more verbose

         * error messages than mbind(). */</comment>

        <if_stmt pos:start="69:9" pos:end="87:9"><if pos:start="69:9" pos:end="79:9">if <condition pos:start="69:12" pos:end="69:55">(<expr pos:start="69:13" pos:end="69:54"><name pos:start="69:13" pos:end="69:19">maxnode</name> <operator pos:start="69:21" pos:end="69:22">&amp;&amp;</operator> <name pos:start="69:24" pos:end="69:38"><name pos:start="69:24" pos:end="69:30">backend</name><operator pos:start="69:31" pos:end="69:32">-&gt;</operator><name pos:start="69:33" pos:end="69:38">policy</name></name> <operator pos:start="69:40" pos:end="69:41">==</operator> <name pos:start="69:43" pos:end="69:54">MPOL_DEFAULT</name></expr>)</condition> <block pos:start="69:57" pos:end="79:9">{<block_content pos:start="71:13" pos:end="77:19">

            <expr_stmt pos:start="71:13" pos:end="75:40"><expr pos:start="71:13" pos:end="75:39"><call pos:start="71:13" pos:end="75:39"><name pos:start="71:13" pos:end="71:22">error_setg</name><argument_list pos:start="71:23" pos:end="75:39">(<argument pos:start="71:24" pos:end="71:27"><expr pos:start="71:24" pos:end="71:27"><name pos:start="71:24" pos:end="71:27">errp</name></expr></argument>, <argument pos:start="71:30" pos:end="75:38"><expr pos:start="71:30" pos:end="75:38"><literal type="string" pos:start="71:30" pos:end="71:75">"host-nodes must be empty for policy default,"</literal>

                       <literal type="string" pos:start="73:24" pos:end="73:73">" or you should explicitly specify a policy other"</literal>

                       <literal type="string" pos:start="75:24" pos:end="75:38">" than default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="79:11" pos:end="87:9">else if <condition pos:start="79:19" pos:end="79:67">(<expr pos:start="79:20" pos:end="79:66"><name pos:start="79:20" pos:end="79:26">maxnode</name> <operator pos:start="79:28" pos:end="79:29">==</operator> <literal type="number" pos:start="79:31" pos:end="79:31">0</literal> <operator pos:start="79:33" pos:end="79:34">&amp;&amp;</operator> <name pos:start="79:36" pos:end="79:50"><name pos:start="79:36" pos:end="79:42">backend</name><operator pos:start="79:43" pos:end="79:44">-&gt;</operator><name pos:start="79:45" pos:end="79:50">policy</name></name> <operator pos:start="79:52" pos:end="79:53">!=</operator> <name pos:start="79:55" pos:end="79:66">MPOL_DEFAULT</name></expr>)</condition> <block pos:start="79:69" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:19">

            <expr_stmt pos:start="81:13" pos:end="83:62"><expr pos:start="81:13" pos:end="83:61"><call pos:start="81:13" pos:end="83:61"><name pos:start="81:13" pos:end="81:22">error_setg</name><argument_list pos:start="81:23" pos:end="83:61">(<argument pos:start="81:24" pos:end="81:27"><expr pos:start="81:24" pos:end="81:27"><name pos:start="81:24" pos:end="81:27">errp</name></expr></argument>, <argument pos:start="81:30" pos:end="81:67"><expr pos:start="81:30" pos:end="81:67"><literal type="string" pos:start="81:30" pos:end="81:67">"host-nodes must be set for policy %s"</literal></expr></argument>,

                       <argument pos:start="83:24" pos:end="83:60"><expr pos:start="83:24" pos:end="83:60"><name pos:start="83:24" pos:end="83:60"><name pos:start="83:24" pos:end="83:43">HostMemPolicy_lookup</name><index pos:start="83:44" pos:end="83:60">[<expr pos:start="83:45" pos:end="83:59"><name pos:start="83:45" pos:end="83:59"><name pos:start="83:45" pos:end="83:51">backend</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:59">policy</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="91:9" pos:end="99:11">/* We can have up to MAX_NODES nodes, but we need to pass maxnode+1

         * as argument to mbind() due to an old Linux bug (feature?) which

         * cuts off the last specified node. This means backend-&gt;host_nodes

         * must have MAX_NODES+1 bits available.

         */</comment>

        <expr_stmt pos:start="101:9" pos:end="103:69"><expr pos:start="101:9" pos:end="103:68"><call pos:start="101:9" pos:end="103:68"><name pos:start="101:9" pos:end="101:14">assert</name><argument_list pos:start="101:15" pos:end="103:68">(<argument pos:start="101:16" pos:end="103:67"><expr pos:start="101:16" pos:end="103:67"><sizeof pos:start="101:16" pos:end="101:42">sizeof<argument_list pos:start="101:22" pos:end="101:42">(<argument pos:start="101:23" pos:end="101:41"><expr pos:start="101:23" pos:end="101:41"><name pos:start="101:23" pos:end="101:41"><name pos:start="101:23" pos:end="101:29">backend</name><operator pos:start="101:30" pos:end="101:31">-&gt;</operator><name pos:start="101:32" pos:end="101:41">host_nodes</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="101:44" pos:end="101:45">&gt;=</operator>

               <call pos:start="103:16" pos:end="103:43"><name pos:start="103:16" pos:end="103:28">BITS_TO_LONGS</name><argument_list pos:start="103:29" pos:end="103:43">(<argument pos:start="103:30" pos:end="103:42"><expr pos:start="103:30" pos:end="103:42"><name pos:start="103:30" pos:end="103:38">MAX_NODES</name> <operator pos:start="103:40" pos:end="103:40">+</operator> <literal type="number" pos:start="103:42" pos:end="103:42">1</literal></expr></argument>)</argument_list></call> <operator pos:start="103:45" pos:end="103:45">*</operator> sizeof<operator pos:start="103:53" pos:end="103:53">(</operator><name pos:start="103:54" pos:end="103:61">unsigned</name> <name pos:start="103:63" pos:end="103:66">long</name><operator pos:start="103:67" pos:end="103:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:37"><expr pos:start="105:9" pos:end="105:36"><call pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:14">assert</name><argument_list pos:start="105:15" pos:end="105:36">(<argument pos:start="105:16" pos:end="105:35"><expr pos:start="105:16" pos:end="105:35"><name pos:start="105:16" pos:end="105:22">maxnode</name> <operator pos:start="105:24" pos:end="105:25">&lt;=</operator> <name pos:start="105:27" pos:end="105:35">MAX_NODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="124:0"><if pos:start="107:9" pos:end="124:0">if <condition pos:start="107:12" pos:end="109:76">(<expr pos:start="107:13" pos:end="109:75"><call pos:start="107:13" pos:end="109:75"><name pos:start="107:13" pos:end="107:17">mbind</name><argument_list pos:start="107:18" pos:end="109:75">(<argument pos:start="107:19" pos:end="107:21"><expr pos:start="107:19" pos:end="107:21"><name pos:start="107:19" pos:end="107:21">ptr</name></expr></argument>, <argument pos:start="107:24" pos:end="107:25"><expr pos:start="107:24" pos:end="107:25"><name pos:start="107:24" pos:end="107:25">sz</name></expr></argument>, <argument pos:start="107:28" pos:end="107:42"><expr pos:start="107:28" pos:end="107:42"><name pos:start="107:28" pos:end="107:42"><name pos:start="107:28" pos:end="107:34">backend</name><operator pos:start="107:35" pos:end="107:36">-&gt;</operator><name pos:start="107:37" pos:end="107:42">policy</name></name></expr></argument>,

                  <argument pos:start="109:19" pos:end="109:54"><expr pos:start="109:19" pos:end="109:54"><ternary pos:start="109:19" pos:end="109:54"><condition pos:start="109:19" pos:end="109:27"><expr pos:start="109:19" pos:end="109:25"><name pos:start="109:19" pos:end="109:25">maxnode</name></expr> ?</condition><then pos:start="109:29" pos:end="109:47"> <expr pos:start="109:29" pos:end="109:47"><name pos:start="109:29" pos:end="109:47"><name pos:start="109:29" pos:end="109:35">backend</name><operator pos:start="109:36" pos:end="109:37">-&gt;</operator><name pos:start="109:38" pos:end="109:47">host_nodes</name></name></expr> </then><else pos:start="109:49" pos:end="109:54">: <expr pos:start="109:51" pos:end="109:54"><name pos:start="109:51" pos:end="109:54">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="109:57" pos:end="109:67"><expr pos:start="109:57" pos:end="109:67"><name pos:start="109:57" pos:end="109:63">maxnode</name> <operator pos:start="109:65" pos:end="109:65">+</operator> <literal type="number" pos:start="109:67" pos:end="109:67">1</literal></expr></argument>, <argument pos:start="109:70" pos:end="109:74"><expr pos:start="109:70" pos:end="109:74"><name pos:start="109:70" pos:end="109:74">flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:78" pos:end="124:0">{<block_content pos:start="111:13" pos:end="119:13">

            <if_stmt pos:start="111:13" pos:end="119:13"><if pos:start="111:13" pos:end="119:13">if <condition pos:start="111:16" pos:end="111:67">(<expr pos:start="111:17" pos:end="111:66"><name pos:start="111:17" pos:end="111:31"><name pos:start="111:17" pos:end="111:23">backend</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:31">policy</name></name> <operator pos:start="111:33" pos:end="111:34">!=</operator> <name pos:start="111:36" pos:end="111:47">MPOL_DEFAULT</name> <operator pos:start="111:49" pos:end="111:50">||</operator> <name pos:start="111:52" pos:end="111:56">errno</name> <operator pos:start="111:58" pos:end="111:59">!=</operator> <name pos:start="111:61" pos:end="111:66">ENOSYS</name></expr>)</condition> <block pos:start="111:69" pos:end="119:13">{<block_content pos:start="113:17" pos:end="117:23">

                <expr_stmt pos:start="113:17" pos:end="115:74"><expr pos:start="113:17" pos:end="115:73"><call pos:start="113:17" pos:end="115:73"><name pos:start="113:17" pos:end="113:32">error_setg_errno</name><argument_list pos:start="113:33" pos:end="115:73">(<argument pos:start="113:34" pos:end="113:37"><expr pos:start="113:34" pos:end="113:37"><name pos:start="113:34" pos:end="113:37">errp</name></expr></argument>, <argument pos:start="113:40" pos:end="113:44"><expr pos:start="113:40" pos:end="113:44"><name pos:start="113:40" pos:end="113:44">errno</name></expr></argument>,

                                 <argument pos:start="115:34" pos:end="115:72"><expr pos:start="115:34" pos:end="115:72"><literal type="string" pos:start="115:34" pos:end="115:72">"cannot bind memory to host NUMA nodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="117:17" pos:end="117:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="125:9" pos:end="131:11">/* Preallocate memory after the NUMA policy has been instantiated.

         * This is necessary to guarantee memory is allocated with

         * specified NUMA policy in place.

         */</comment>

        <if_stmt pos:start="133:9" pos:end="145:9"><if pos:start="133:9" pos:end="145:9">if <condition pos:start="133:12" pos:end="133:30">(<expr pos:start="133:13" pos:end="133:29"><name pos:start="133:13" pos:end="133:29"><name pos:start="133:13" pos:end="133:19">backend</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:29">prealloc</name></name></expr>)</condition> <block pos:start="133:32" pos:end="145:9">{<block_content pos:start="135:13" pos:end="143:13">

            <expr_stmt pos:start="135:13" pos:end="137:40"><expr pos:start="135:13" pos:end="137:39"><call pos:start="135:13" pos:end="137:39"><name pos:start="135:13" pos:end="135:27">os_mem_prealloc</name><argument_list pos:start="135:28" pos:end="137:39">(<argument pos:start="135:29" pos:end="135:62"><expr pos:start="135:29" pos:end="135:62"><call pos:start="135:29" pos:end="135:62"><name pos:start="135:29" pos:end="135:48">memory_region_get_fd</name><argument_list pos:start="135:49" pos:end="135:62">(<argument pos:start="135:50" pos:end="135:61"><expr pos:start="135:50" pos:end="135:61"><operator pos:start="135:50" pos:end="135:50">&amp;</operator><name pos:start="135:51" pos:end="135:61"><name pos:start="135:51" pos:end="135:57">backend</name><operator pos:start="135:58" pos:end="135:59">-&gt;</operator><name pos:start="135:60" pos:end="135:61">mr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="135:65" pos:end="135:67"><expr pos:start="135:65" pos:end="135:67"><name pos:start="135:65" pos:end="135:67">ptr</name></expr></argument>, <argument pos:start="135:70" pos:end="135:71"><expr pos:start="135:70" pos:end="135:71"><name pos:start="135:70" pos:end="135:71">sz</name></expr></argument>,

                            <argument pos:start="137:29" pos:end="137:38"><expr pos:start="137:29" pos:end="137:38"><operator pos:start="137:29" pos:end="137:29">&amp;</operator><name pos:start="137:30" pos:end="137:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:26">(<expr pos:start="139:17" pos:end="139:25"><name pos:start="139:17" pos:end="139:25">local_err</name></expr>)</condition> <block pos:start="139:28" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:25">

                <goto pos:start="141:17" pos:end="141:25">goto <name pos:start="141:22" pos:end="141:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="149:1" pos:end="149:4"><name pos:start="149:1" pos:end="149:3">out</name>:</label>

    <expr_stmt pos:start="151:5" pos:end="151:37"><expr pos:start="151:5" pos:end="151:36"><call pos:start="151:5" pos:end="151:36"><name pos:start="151:5" pos:end="151:19">error_propagate</name><argument_list pos:start="151:20" pos:end="151:36">(<argument pos:start="151:21" pos:end="151:24"><expr pos:start="151:21" pos:end="151:24"><name pos:start="151:21" pos:end="151:24">errp</name></expr></argument>, <argument pos:start="151:27" pos:end="151:35"><expr pos:start="151:27" pos:end="151:35"><name pos:start="151:27" pos:end="151:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
