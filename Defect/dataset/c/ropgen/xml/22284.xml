<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22284.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">mpjpeg_read_packet</name><parameter_list pos:start="1:30" pos:end="1:64">(<parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:48"><name pos:start="1:31" pos:end="1:45">AVFormatContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:58">AVPacket</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:15">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:22">MPJPEGDemuxContext</name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:30">mpjpeg</name> <init pos:start="11:32" pos:end="11:45">= <expr pos:start="11:34" pos:end="11:45"><name pos:start="11:34" pos:end="11:45"><name pos:start="11:34" pos:end="11:34">s</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:45">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="13:5" pos:end="31:5"><if pos:start="13:5" pos:end="31:5">if <condition pos:start="13:8" pos:end="13:33">(<expr pos:start="13:9" pos:end="13:32"><name pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:14">mpjpeg</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:24">boundary</name></name> <operator pos:start="13:26" pos:end="13:27">==</operator> <name pos:start="13:29" pos:end="13:32">NULL</name></expr>)</condition> <block pos:start="13:35" pos:end="31:5">{<block_content pos:start="15:9" pos:end="29:58">

        <expr_stmt pos:start="15:9" pos:end="15:43"><expr pos:start="15:9" pos:end="15:42"><name pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:14">mpjpeg</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:24">boundary</name></name> <operator pos:start="15:26" pos:end="15:26">=</operator> <call pos:start="15:28" pos:end="15:42"><name pos:start="15:28" pos:end="15:36">av_strdup</name><argument_list pos:start="15:37" pos:end="15:42">(<argument pos:start="15:38" pos:end="15:41"><expr pos:start="15:38" pos:end="15:41"><literal type="string" pos:start="15:38" pos:end="15:41">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:48"><expr pos:start="17:9" pos:end="17:47"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:14">mpjpeg</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:25">searchstr</name></name> <operator pos:start="17:27" pos:end="17:27">=</operator> <call pos:start="17:29" pos:end="17:47"><name pos:start="17:29" pos:end="17:37">av_strdup</name><argument_list pos:start="17:38" pos:end="17:47">(<argument pos:start="17:39" pos:end="17:46"><expr pos:start="17:39" pos:end="17:46"><literal type="string" pos:start="17:39" pos:end="17:46">"\r\n--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="27:9"><if pos:start="19:9" pos:end="27:9">if <condition pos:start="19:12" pos:end="19:52">(<expr pos:start="19:13" pos:end="19:51"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:29"><name pos:start="19:14" pos:end="19:19">mpjpeg</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:29">boundary</name></name> <operator pos:start="19:31" pos:end="19:32">||</operator> <operator pos:start="19:34" pos:end="19:34">!</operator><name pos:start="19:35" pos:end="19:51"><name pos:start="19:35" pos:end="19:40">mpjpeg</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:51">searchstr</name></name></expr>)</condition> <block pos:start="19:54" pos:end="27:9">{<block_content pos:start="21:13" pos:end="25:35">

            <expr_stmt pos:start="21:13" pos:end="21:40"><expr pos:start="21:13" pos:end="21:39"><call pos:start="21:13" pos:end="21:39"><name pos:start="21:13" pos:end="21:20">av_freep</name><argument_list pos:start="21:21" pos:end="21:39">(<argument pos:start="21:22" pos:end="21:38"><expr pos:start="21:22" pos:end="21:38"><operator pos:start="21:22" pos:end="21:22">&amp;</operator><name pos:start="21:23" pos:end="21:38"><name pos:start="21:23" pos:end="21:28">mpjpeg</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:38">boundary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:41"><expr pos:start="23:13" pos:end="23:40"><call pos:start="23:13" pos:end="23:40"><name pos:start="23:13" pos:end="23:20">av_freep</name><argument_list pos:start="23:21" pos:end="23:40">(<argument pos:start="23:22" pos:end="23:39"><expr pos:start="23:22" pos:end="23:39"><operator pos:start="23:22" pos:end="23:22">&amp;</operator><name pos:start="23:23" pos:end="23:39"><name pos:start="23:23" pos:end="23:28">mpjpeg</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:39">searchstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="25:13" pos:end="25:35">return <expr pos:start="25:20" pos:end="25:34"><call pos:start="25:20" pos:end="25:34"><name pos:start="25:20" pos:end="25:26">AVERROR</name><argument_list pos:start="25:27" pos:end="25:34">(<argument pos:start="25:28" pos:end="25:33"><expr pos:start="25:28" pos:end="25:33"><name pos:start="25:28" pos:end="25:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:58"><expr pos:start="29:9" pos:end="29:57"><name pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:14">mpjpeg</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:29">searchstr_len</name></name> <operator pos:start="29:31" pos:end="29:31">=</operator> <call pos:start="29:33" pos:end="29:57"><name pos:start="29:33" pos:end="29:38">strlen</name><argument_list pos:start="29:39" pos:end="29:57">(<argument pos:start="29:40" pos:end="29:56"><expr pos:start="29:40" pos:end="29:56"><name pos:start="29:40" pos:end="29:56"><name pos:start="29:40" pos:end="29:45">mpjpeg</name><operator pos:start="29:46" pos:end="29:47">-&gt;</operator><name pos:start="29:48" pos:end="29:56">searchstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:68"><expr pos:start="35:5" pos:end="35:67"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:67"><name pos:start="35:11" pos:end="35:32">parse_multipart_header</name><argument_list pos:start="35:33" pos:end="35:67">(<argument pos:start="35:34" pos:end="35:38"><expr pos:start="35:34" pos:end="35:38"><name pos:start="35:34" pos:end="35:38"><name pos:start="35:34" pos:end="35:34">s</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:38">pb</name></name></expr></argument>, <argument pos:start="35:41" pos:end="35:45"><expr pos:start="35:41" pos:end="35:45"><operator pos:start="35:41" pos:end="35:41">&amp;</operator><name pos:start="35:42" pos:end="35:45">size</name></expr></argument>, <argument pos:start="35:48" pos:end="35:63"><expr pos:start="35:48" pos:end="35:63"><name pos:start="35:48" pos:end="35:63"><name pos:start="35:48" pos:end="35:53">mpjpeg</name><operator pos:start="35:54" pos:end="35:55">-&gt;</operator><name pos:start="35:56" pos:end="35:63">boundary</name></name></expr></argument>, <argument pos:start="35:66" pos:end="35:66"><expr pos:start="35:66" pos:end="35:66"><name pos:start="35:66" pos:end="35:66">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <if_stmt pos:start="41:5" pos:end="43:19"><if pos:start="41:5" pos:end="43:19">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">&lt;</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:19"><block_content pos:start="43:9" pos:end="43:19">

        <return pos:start="43:9" pos:end="43:19">return <expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="125:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:12">size</name> <operator pos:start="47:14" pos:end="47:14">&gt;</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>)</condition> <block pos:start="47:19" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:46">

        <comment type="block" pos:start="49:9" pos:end="49:57">/* size has been provided to us in MIME header */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:46"><expr pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:11">ret</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="51:45"><name pos:start="51:15" pos:end="51:27">av_get_packet</name><argument_list pos:start="51:28" pos:end="51:45">(<argument pos:start="51:29" pos:end="51:33"><expr pos:start="51:29" pos:end="51:33"><name pos:start="51:29" pos:end="51:33"><name pos:start="51:29" pos:end="51:29">s</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:33">pb</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:38"><expr pos:start="51:36" pos:end="51:38"><name pos:start="51:36" pos:end="51:38">pkt</name></expr></argument>, <argument pos:start="51:41" pos:end="51:44"><expr pos:start="51:41" pos:end="51:44"><name pos:start="51:41" pos:end="51:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="125:5">else <block pos:start="53:12" pos:end="125:5">{<block_content pos:start="57:9" pos:end="123:9">

        <comment type="block" pos:start="55:9" pos:end="55:81">/* no size was given -- we read until the next boundary or end-of-file */</comment>

        <decl_stmt pos:start="57:9" pos:end="57:31"><decl pos:start="57:9" pos:end="57:25"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:21">remaining</name> <init pos:start="57:23" pos:end="57:25">= <expr pos:start="57:25" pos:end="57:25"><literal type="number" pos:start="57:25" pos:end="57:25">0</literal></expr></init></decl>, <decl pos:start="57:28" pos:end="57:30"><type ref="prev" pos:start="57:9" pos:end="57:11"/><name pos:start="57:28" pos:end="57:30">len</name></decl>;</decl_stmt>



        <decl_stmt pos:start="61:9" pos:end="61:36"><decl pos:start="61:9" pos:end="61:35"><type pos:start="61:9" pos:end="61:17"><specifier pos:start="61:9" pos:end="61:13">const</specifier> <name pos:start="61:15" pos:end="61:17">int</name></type> <name pos:start="61:19" pos:end="61:28">read_chunk</name> <init pos:start="61:30" pos:end="61:35">= <expr pos:start="61:32" pos:end="61:35"><literal type="number" pos:start="61:32" pos:end="61:35">2048</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:28"><expr pos:start="63:9" pos:end="63:27"><call pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:22">av_init_packet</name><argument_list pos:start="63:23" pos:end="63:27">(<argument pos:start="63:24" pos:end="63:26"><expr pos:start="63:24" pos:end="63:26"><name pos:start="63:24" pos:end="63:26">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:25"><expr pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:11">pkt</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:17">data</name></name> <operator pos:start="65:19" pos:end="65:19">=</operator> <name pos:start="65:21" pos:end="65:24">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:22"><expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:11">pkt</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:17">size</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:37"><expr pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:11">pkt</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:16">pos</name></name>  <operator pos:start="69:19" pos:end="69:19">=</operator> <call pos:start="69:21" pos:end="69:36"><name pos:start="69:21" pos:end="69:29">avio_tell</name><argument_list pos:start="69:30" pos:end="69:36">(<argument pos:start="69:31" pos:end="69:35"><expr pos:start="69:31" pos:end="69:35"><name pos:start="69:31" pos:end="69:35"><name pos:start="69:31" pos:end="69:31">s</name><operator pos:start="69:32" pos:end="69:33">-&gt;</operator><name pos:start="69:34" pos:end="69:35">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="73:9" pos:end="73:80">/* we may need to return as much as all we've read back to the buffer */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><call pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:28">ffio_ensure_seekback</name><argument_list pos:start="75:29" pos:end="75:47">(<argument pos:start="75:30" pos:end="75:34"><expr pos:start="75:30" pos:end="75:34"><name pos:start="75:30" pos:end="75:34"><name pos:start="75:30" pos:end="75:30">s</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:34">pb</name></name></expr></argument>, <argument pos:start="75:37" pos:end="75:46"><expr pos:start="75:37" pos:end="75:46"><name pos:start="75:37" pos:end="75:46">read_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="79:9" pos:end="109:9">while <condition pos:start="79:15" pos:end="79:81">(<expr pos:start="79:16" pos:end="79:80"><operator pos:start="79:16" pos:end="79:16">(</operator><name pos:start="79:17" pos:end="79:19">ret</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <call pos:start="79:23" pos:end="79:74"><name pos:start="79:23" pos:end="79:38">av_append_packet</name><argument_list pos:start="79:39" pos:end="79:74">(<argument pos:start="79:40" pos:end="79:44"><expr pos:start="79:40" pos:end="79:44"><name pos:start="79:40" pos:end="79:44"><name pos:start="79:40" pos:end="79:40">s</name><operator pos:start="79:41" pos:end="79:42">-&gt;</operator><name pos:start="79:43" pos:end="79:44">pb</name></name></expr></argument>, <argument pos:start="79:47" pos:end="79:49"><expr pos:start="79:47" pos:end="79:49"><name pos:start="79:47" pos:end="79:49">pkt</name></expr></argument>, <argument pos:start="79:52" pos:end="79:73"><expr pos:start="79:52" pos:end="79:73"><name pos:start="79:52" pos:end="79:61">read_chunk</name> <operator pos:start="79:63" pos:end="79:63">-</operator> <name pos:start="79:65" pos:end="79:73">remaining</name></expr></argument>)</argument_list></call><operator pos:start="79:75" pos:end="79:75">)</operator> <operator pos:start="79:77" pos:end="79:78">&gt;=</operator> <literal type="number" pos:start="79:80" pos:end="79:80">0</literal></expr>)</condition> <block pos:start="79:83" pos:end="109:9">{<block_content pos:start="83:13" pos:end="107:28">

            <comment type="block" pos:start="81:13" pos:end="81:35">/* scan the new data */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:34"><expr pos:start="83:13" pos:end="83:33"><name pos:start="83:13" pos:end="83:15">len</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <name pos:start="83:19" pos:end="83:21">ret</name> <operator pos:start="83:23" pos:end="83:23">+</operator> <name pos:start="83:25" pos:end="83:33">remaining</name></expr>;</expr_stmt>

            <decl_stmt pos:start="85:13" pos:end="85:54"><decl pos:start="85:13" pos:end="85:53"><type pos:start="85:13" pos:end="85:18"><name pos:start="85:13" pos:end="85:16">char</name> <modifier pos:start="85:18" pos:end="85:18">*</modifier></type><name pos:start="85:19" pos:end="85:23">start</name> <init pos:start="85:25" pos:end="85:53">= <expr pos:start="85:27" pos:end="85:53"><name pos:start="85:27" pos:end="85:35"><name pos:start="85:27" pos:end="85:29">pkt</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:35">data</name></name> <operator pos:start="85:37" pos:end="85:37">+</operator> <name pos:start="85:39" pos:end="85:47"><name pos:start="85:39" pos:end="85:41">pkt</name><operator pos:start="85:42" pos:end="85:43">-&gt;</operator><name pos:start="85:44" pos:end="85:47">size</name></name> <operator pos:start="85:49" pos:end="85:49">-</operator> <name pos:start="85:51" pos:end="85:53">len</name></expr></init></decl>;</decl_stmt>

            <do pos:start="87:13" pos:end="105:51">do <block pos:start="87:16" pos:end="105:13">{<block_content pos:start="89:17" pos:end="103:24">

                <if_stmt pos:start="89:17" pos:end="99:17"><if pos:start="89:17" pos:end="99:17">if <condition pos:start="89:20" pos:end="89:77">(<expr pos:start="89:21" pos:end="89:76"><operator pos:start="89:21" pos:end="89:21">!</operator><call pos:start="89:22" pos:end="89:76"><name pos:start="89:22" pos:end="89:27">memcmp</name><argument_list pos:start="89:28" pos:end="89:76">(<argument pos:start="89:29" pos:end="89:33"><expr pos:start="89:29" pos:end="89:33"><name pos:start="89:29" pos:end="89:33">start</name></expr></argument>, <argument pos:start="89:36" pos:end="89:52"><expr pos:start="89:36" pos:end="89:52"><name pos:start="89:36" pos:end="89:52"><name pos:start="89:36" pos:end="89:41">mpjpeg</name><operator pos:start="89:42" pos:end="89:43">-&gt;</operator><name pos:start="89:44" pos:end="89:52">searchstr</name></name></expr></argument>, <argument pos:start="89:55" pos:end="89:75"><expr pos:start="89:55" pos:end="89:75"><name pos:start="89:55" pos:end="89:75"><name pos:start="89:55" pos:end="89:60">mpjpeg</name><operator pos:start="89:61" pos:end="89:62">-&gt;</operator><name pos:start="89:63" pos:end="89:75">searchstr_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:79" pos:end="99:17">{<block_content pos:start="93:21" pos:end="97:37">

                    <comment type="line" pos:start="91:21" pos:end="91:58">// got the boundary! rewind the stream</comment>

                    <expr_stmt pos:start="93:21" pos:end="93:57"><expr pos:start="93:21" pos:end="93:56"><call pos:start="93:21" pos:end="93:56"><name pos:start="93:21" pos:end="93:29">avio_seek</name><argument_list pos:start="93:30" pos:end="93:56">(<argument pos:start="93:31" pos:end="93:35"><expr pos:start="93:31" pos:end="93:35"><name pos:start="93:31" pos:end="93:35"><name pos:start="93:31" pos:end="93:31">s</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:35">pb</name></name></expr></argument>, <argument pos:start="93:38" pos:end="93:45"><expr pos:start="93:38" pos:end="93:45"><operator pos:start="93:38" pos:end="93:38">-</operator><operator pos:start="93:39" pos:end="93:39">(</operator><name pos:start="93:40" pos:end="93:42">len</name><operator pos:start="93:43" pos:end="93:43">-</operator><literal type="number" pos:start="93:44" pos:end="93:44">2</literal><operator pos:start="93:45" pos:end="93:45">)</operator></expr></argument>, <argument pos:start="93:48" pos:end="93:55"><expr pos:start="93:48" pos:end="93:55"><name pos:start="93:48" pos:end="93:55">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="95:21" pos:end="95:41"><expr pos:start="95:21" pos:end="95:40"><name pos:start="95:21" pos:end="95:29"><name pos:start="95:21" pos:end="95:23">pkt</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:29">size</name></name> <operator pos:start="95:31" pos:end="95:32">-=</operator> <operator pos:start="95:34" pos:end="95:34">(</operator><name pos:start="95:35" pos:end="95:37">len</name><operator pos:start="95:38" pos:end="95:38">-</operator><literal type="number" pos:start="95:39" pos:end="95:39">2</literal><operator pos:start="95:40" pos:end="95:40">)</operator></expr>;</expr_stmt>

                    <return pos:start="97:21" pos:end="97:37">return <expr pos:start="97:28" pos:end="97:36"><name pos:start="97:28" pos:end="97:36"><name pos:start="97:28" pos:end="97:30">pkt</name><operator pos:start="97:31" pos:end="97:32">-&gt;</operator><name pos:start="97:33" pos:end="97:36">size</name></name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:22"><expr pos:start="101:17" pos:end="101:21"><name pos:start="101:17" pos:end="101:19">len</name><operator pos:start="101:20" pos:end="101:21">--</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:24"><expr pos:start="103:17" pos:end="103:23"><name pos:start="103:17" pos:end="103:21">start</name><operator pos:start="103:22" pos:end="103:23">++</operator></expr>;</expr_stmt>

            </block_content>}</block> while <condition pos:start="105:21" pos:end="105:50">(<expr pos:start="105:22" pos:end="105:49"><name pos:start="105:22" pos:end="105:24">len</name> <operator pos:start="105:26" pos:end="105:27">&gt;=</operator> <name pos:start="105:29" pos:end="105:49"><name pos:start="105:29" pos:end="105:34">mpjpeg</name><operator pos:start="105:35" pos:end="105:36">-&gt;</operator><name pos:start="105:37" pos:end="105:49">searchstr_len</name></name></expr>)</condition>;</do>

            <expr_stmt pos:start="107:13" pos:end="107:28"><expr pos:start="107:13" pos:end="107:27"><name pos:start="107:13" pos:end="107:21">remaining</name> <operator pos:start="107:23" pos:end="107:23">=</operator> <name pos:start="107:25" pos:end="107:27">len</name></expr>;</expr_stmt>

        </block_content>}</block></while>



        <comment type="block" pos:start="113:9" pos:end="113:35">/* error or EOF occurred */</comment>

        <if_stmt pos:start="115:9" pos:end="123:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:31">(<expr pos:start="115:13" pos:end="115:30"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:18">==</operator> <name pos:start="115:20" pos:end="115:30">AVERROR_EOF</name></expr>)</condition> <block pos:start="115:33" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:58">

            <expr_stmt pos:start="117:13" pos:end="117:58"><expr pos:start="117:13" pos:end="117:57"><name pos:start="117:13" pos:end="117:15">ret</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <ternary pos:start="117:19" pos:end="117:57"><condition pos:start="117:19" pos:end="117:33"><expr pos:start="117:19" pos:end="117:31"><name pos:start="117:19" pos:end="117:27"><name pos:start="117:19" pos:end="117:21">pkt</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:27">size</name></name> <operator pos:start="117:29" pos:end="117:29">&gt;</operator> <literal type="number" pos:start="117:31" pos:end="117:31">0</literal></expr> ?</condition><then pos:start="117:35" pos:end="117:43"> <expr pos:start="117:35" pos:end="117:43"><name pos:start="117:35" pos:end="117:43"><name pos:start="117:35" pos:end="117:37">pkt</name><operator pos:start="117:38" pos:end="117:39">-&gt;</operator><name pos:start="117:40" pos:end="117:43">size</name></name></expr> </then><else pos:start="117:45" pos:end="117:57">: <expr pos:start="117:47" pos:end="117:57"><name pos:start="117:47" pos:end="117:57">AVERROR_EOF</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="119:11" pos:end="123:9">else <block pos:start="119:16" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:33">

            <expr_stmt pos:start="121:13" pos:end="121:33"><expr pos:start="121:13" pos:end="121:32"><call pos:start="121:13" pos:end="121:32"><name pos:start="121:13" pos:end="121:27">av_packet_unref</name><argument_list pos:start="121:28" pos:end="121:32">(<argument pos:start="121:29" pos:end="121:31"><expr pos:start="121:29" pos:end="121:31"><name pos:start="121:29" pos:end="121:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="129:5" pos:end="129:15">return <expr pos:start="129:12" pos:end="129:14"><name pos:start="129:12" pos:end="129:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
