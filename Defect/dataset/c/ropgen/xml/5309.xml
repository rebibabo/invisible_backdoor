<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5309.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">parse_playlist</name><parameter_list pos:start="1:26" pos:end="3:63">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:36">HLSContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">c</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:56"><decl pos:start="1:42" pos:end="1:56"><type pos:start="1:42" pos:end="1:56"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">url</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:45"><decl pos:start="3:27" pos:end="3:45"><type pos:start="3:27" pos:end="3:45"><name pos:start="3:27" pos:end="3:40"><name pos:start="3:27" pos:end="3:32">struct</name> <name pos:start="3:34" pos:end="3:40">variant</name></name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:45">var</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:62"><decl pos:start="3:48" pos:end="3:62"><type pos:start="3:48" pos:end="3:62"><name pos:start="3:48" pos:end="3:58">AVIOContext</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:62">in</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="267:1">{<block_content pos:start="7:5" pos:end="265:15">

    <decl_stmt pos:start="7:5" pos:end="7:63"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>, <decl pos:start="7:18" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:27">is_segment</name> <init pos:start="7:29" pos:end="7:31">= <expr pos:start="7:31" pos:end="7:31"><literal type="number" pos:start="7:31" pos:end="7:31">0</literal></expr></init></decl>, <decl pos:start="7:34" pos:end="7:47"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:34" pos:end="7:43">is_variant</name> <init pos:start="7:45" pos:end="7:47">= <expr pos:start="7:47" pos:end="7:47"><literal type="number" pos:start="7:47" pos:end="7:47">0</literal></expr></init></decl>, <decl pos:start="7:50" pos:end="7:62"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:50" pos:end="7:58">bandwidth</name> <init pos:start="7:60" pos:end="7:62">= <expr pos:start="7:62" pos:end="7:62"><literal type="number" pos:start="7:62" pos:end="7:62">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:20">duration</name> <init pos:start="9:22" pos:end="9:24">= <expr pos:start="9:24" pos:end="9:24"><literal type="number" pos:start="9:24" pos:end="9:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:8">enum</name> <name pos:start="11:10" pos:end="11:16">KeyType</name></name></type> <name pos:start="11:18" pos:end="11:25">key_type</name> <init pos:start="11:27" pos:end="11:36">= <expr pos:start="11:29" pos:end="11:36"><name pos:start="11:29" pos:end="11:36">KEY_NONE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:14">iv</name><index pos:start="13:15" pos:end="13:18">[<expr pos:start="13:16" pos:end="13:17"><literal type="number" pos:start="13:16" pos:end="13:17">16</literal></expr>]</index></name> <init pos:start="13:20" pos:end="13:23">= <expr pos:start="13:22" pos:end="13:23"><literal type="string" pos:start="13:22" pos:end="13:23">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">has_iv</name> <init pos:start="15:16" pos:end="15:18">= <expr pos:start="15:18" pos:end="15:18"><literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:26"><name pos:start="17:10" pos:end="17:12">key</name><index pos:start="17:13" pos:end="17:26">[<expr pos:start="17:14" pos:end="17:25"><name pos:start="17:14" pos:end="17:25">MAX_URL_SIZE</name></expr>]</index></name> <init pos:start="17:28" pos:end="17:31">= <expr pos:start="17:30" pos:end="17:31"><literal type="string" pos:start="17:30" pos:end="17:31">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">char</name></type> <name pos:start="19:10" pos:end="19:19"><name pos:start="19:10" pos:end="19:13">line</name><index pos:start="19:14" pos:end="19:19">[<expr pos:start="19:15" pos:end="19:18"><literal type="number" pos:start="19:15" pos:end="19:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:19">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:16">close_in</name> <init pos:start="23:18" pos:end="23:20">= <expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="57:5"><if pos:start="27:5" pos:end="57:5">if <condition pos:start="27:8" pos:end="27:12">(<expr pos:start="27:9" pos:end="27:11"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:11">in</name></expr>)</condition> <block pos:start="27:14" pos:end="57:5">{<block_content pos:start="29:9" pos:end="55:23">

        <decl_stmt pos:start="29:9" pos:end="29:34"><decl pos:start="29:9" pos:end="29:33"><type pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:20">AVDictionary</name> <modifier pos:start="29:22" pos:end="29:22">*</modifier></type><name pos:start="29:23" pos:end="29:26">opts</name> <init pos:start="29:28" pos:end="29:33">= <expr pos:start="29:30" pos:end="29:33"><name pos:start="29:30" pos:end="29:33">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:21"><expr pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:16">close_in</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <literal type="number" pos:start="31:20" pos:end="31:20">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="33:9" pos:end="33:69">/* Some HLS servers don't like being sent the range header */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:47"><expr pos:start="35:9" pos:end="35:46"><call pos:start="35:9" pos:end="35:46"><name pos:start="35:9" pos:end="35:19">av_dict_set</name><argument_list pos:start="35:20" pos:end="35:46">(<argument pos:start="35:21" pos:end="35:25"><expr pos:start="35:21" pos:end="35:25"><operator pos:start="35:21" pos:end="35:21">&amp;</operator><name pos:start="35:22" pos:end="35:25">opts</name></expr></argument>, <argument pos:start="35:28" pos:end="35:37"><expr pos:start="35:28" pos:end="35:37"><literal type="string" pos:start="35:28" pos:end="35:37">"seekable"</literal></expr></argument>, <argument pos:start="35:40" pos:end="35:42"><expr pos:start="35:40" pos:end="35:42"><literal type="string" pos:start="35:40" pos:end="35:42">"0"</literal></expr></argument>, <argument pos:start="35:45" pos:end="35:45"><expr pos:start="35:45" pos:end="35:45"><literal type="number" pos:start="35:45" pos:end="35:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="39:9" pos:end="39:78">// broker prior HTTP options that should be consistent across requests</comment>

        <expr_stmt pos:start="41:9" pos:end="41:59"><expr pos:start="41:9" pos:end="41:58"><call pos:start="41:9" pos:end="41:58"><name pos:start="41:9" pos:end="41:19">av_dict_set</name><argument_list pos:start="41:20" pos:end="41:58">(<argument pos:start="41:21" pos:end="41:25"><expr pos:start="41:21" pos:end="41:25"><operator pos:start="41:21" pos:end="41:21">&amp;</operator><name pos:start="41:22" pos:end="41:25">opts</name></expr></argument>, <argument pos:start="41:28" pos:end="41:39"><expr pos:start="41:28" pos:end="41:39"><literal type="string" pos:start="41:28" pos:end="41:39">"user-agent"</literal></expr></argument>, <argument pos:start="41:42" pos:end="41:54"><expr pos:start="41:42" pos:end="41:54"><name pos:start="41:42" pos:end="41:54"><name pos:start="41:42" pos:end="41:42">c</name><operator pos:start="41:43" pos:end="41:44">-&gt;</operator><name pos:start="41:45" pos:end="41:54">user_agent</name></name></expr></argument>, <argument pos:start="41:57" pos:end="41:57"><expr pos:start="41:57" pos:end="41:57"><literal type="number" pos:start="41:57" pos:end="41:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:53"><expr pos:start="43:9" pos:end="43:52"><call pos:start="43:9" pos:end="43:52"><name pos:start="43:9" pos:end="43:19">av_dict_set</name><argument_list pos:start="43:20" pos:end="43:52">(<argument pos:start="43:21" pos:end="43:25"><expr pos:start="43:21" pos:end="43:25"><operator pos:start="43:21" pos:end="43:21">&amp;</operator><name pos:start="43:22" pos:end="43:25">opts</name></expr></argument>, <argument pos:start="43:28" pos:end="43:36"><expr pos:start="43:28" pos:end="43:36"><literal type="string" pos:start="43:28" pos:end="43:36">"cookies"</literal></expr></argument>, <argument pos:start="43:39" pos:end="43:48"><expr pos:start="43:39" pos:end="43:48"><name pos:start="43:39" pos:end="43:48"><name pos:start="43:39" pos:end="43:39">c</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:48">cookies</name></name></expr></argument>, <argument pos:start="43:51" pos:end="43:51"><expr pos:start="43:51" pos:end="43:51"><literal type="number" pos:start="43:51" pos:end="43:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="49:55"><expr pos:start="47:9" pos:end="49:54"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="49:54"><name pos:start="47:15" pos:end="47:24">avio_open2</name><argument_list pos:start="47:25" pos:end="49:54">(<argument pos:start="47:26" pos:end="47:28"><expr pos:start="47:26" pos:end="47:28"><operator pos:start="47:26" pos:end="47:26">&amp;</operator><name pos:start="47:27" pos:end="47:28">in</name></expr></argument>, <argument pos:start="47:31" pos:end="47:33"><expr pos:start="47:31" pos:end="47:33"><name pos:start="47:31" pos:end="47:33">url</name></expr></argument>, <argument pos:start="47:36" pos:end="47:49"><expr pos:start="47:36" pos:end="47:49"><name pos:start="47:36" pos:end="47:49">AVIO_FLAG_READ</name></expr></argument>,

                         <argument pos:start="49:26" pos:end="49:46"><expr pos:start="49:26" pos:end="49:46"><name pos:start="49:26" pos:end="49:46"><name pos:start="49:26" pos:end="49:26">c</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:46">interrupt_callback</name></name></expr></argument>, <argument pos:start="49:49" pos:end="49:53"><expr pos:start="49:49" pos:end="49:53"><operator pos:start="49:49" pos:end="49:49">&amp;</operator><name pos:start="49:50" pos:end="49:53">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:28"><expr pos:start="51:9" pos:end="51:27"><call pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:20">av_dict_free</name><argument_list pos:start="51:21" pos:end="51:27">(<argument pos:start="51:22" pos:end="51:26"><expr pos:start="51:22" pos:end="51:26"><operator pos:start="51:22" pos:end="51:22">&amp;</operator><name pos:start="51:23" pos:end="51:26">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="55:23"><if pos:start="53:9" pos:end="55:23">if <condition pos:start="53:12" pos:end="53:20">(<expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">&lt;</operator> <literal type="number" pos:start="53:19" pos:end="53:19">0</literal></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:23"><block_content pos:start="55:13" pos:end="55:23">

            <return pos:start="55:13" pos:end="55:23">return <expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:44"><expr pos:start="61:5" pos:end="61:43"><call pos:start="61:5" pos:end="61:43"><name pos:start="61:5" pos:end="61:19">read_chomp_line</name><argument_list pos:start="61:20" pos:end="61:43">(<argument pos:start="61:21" pos:end="61:22"><expr pos:start="61:21" pos:end="61:22"><name pos:start="61:21" pos:end="61:22">in</name></expr></argument>, <argument pos:start="61:25" pos:end="61:28"><expr pos:start="61:25" pos:end="61:28"><name pos:start="61:25" pos:end="61:28">line</name></expr></argument>, <argument pos:start="61:31" pos:end="61:42"><expr pos:start="61:31" pos:end="61:42"><sizeof pos:start="61:31" pos:end="61:42">sizeof<argument_list pos:start="61:37" pos:end="61:42">(<argument pos:start="61:38" pos:end="61:41"><expr pos:start="61:38" pos:end="61:41"><name pos:start="61:38" pos:end="61:41">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:32">(<expr pos:start="63:9" pos:end="63:31"><call pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:14">strcmp</name><argument_list pos:start="63:15" pos:end="63:31">(<argument pos:start="63:16" pos:end="63:19"><expr pos:start="63:16" pos:end="63:19"><name pos:start="63:16" pos:end="63:19">line</name></expr></argument>, <argument pos:start="63:22" pos:end="63:30"><expr pos:start="63:22" pos:end="63:30"><literal type="string" pos:start="63:22" pos:end="63:30">"#EXTM3U"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:34" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <expr_stmt pos:start="65:9" pos:end="65:34"><expr pos:start="65:9" pos:end="65:33"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:12">(<expr pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">var</name></expr>)</condition> <block pos:start="73:14" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:26">

        <expr_stmt pos:start="75:9" pos:end="75:31"><expr pos:start="75:9" pos:end="75:30"><call pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:25">free_segment_list</name><argument_list pos:start="75:26" pos:end="75:30">(<argument pos:start="75:27" pos:end="75:29"><expr pos:start="75:27" pos:end="75:29"><name pos:start="75:27" pos:end="75:29">var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:26"><expr pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:11">var</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:21">finished</name></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <literal type="number" pos:start="77:25" pos:end="77:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <while pos:start="81:5" pos:end="251:5">while <condition pos:start="81:11" pos:end="81:25">(<expr pos:start="81:12" pos:end="81:24"><operator pos:start="81:12" pos:end="81:12">!</operator><call pos:start="81:13" pos:end="81:24"><name pos:start="81:13" pos:end="81:20">url_feof</name><argument_list pos:start="81:21" pos:end="81:24">(<argument pos:start="81:22" pos:end="81:23"><expr pos:start="81:22" pos:end="81:23"><name pos:start="81:22" pos:end="81:23">in</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:27" pos:end="251:5">{<block_content pos:start="83:9" pos:end="249:9">

        <expr_stmt pos:start="83:9" pos:end="83:48"><expr pos:start="83:9" pos:end="83:47"><call pos:start="83:9" pos:end="83:47"><name pos:start="83:9" pos:end="83:23">read_chomp_line</name><argument_list pos:start="83:24" pos:end="83:47">(<argument pos:start="83:25" pos:end="83:26"><expr pos:start="83:25" pos:end="83:26"><name pos:start="83:25" pos:end="83:26">in</name></expr></argument>, <argument pos:start="83:29" pos:end="83:32"><expr pos:start="83:29" pos:end="83:32"><name pos:start="83:29" pos:end="83:32">line</name></expr></argument>, <argument pos:start="83:35" pos:end="83:46"><expr pos:start="83:35" pos:end="83:46"><sizeof pos:start="83:35" pos:end="83:46">sizeof<argument_list pos:start="83:41" pos:end="83:46">(<argument pos:start="83:42" pos:end="83:45"><expr pos:start="83:42" pos:end="83:45"><name pos:start="83:42" pos:end="83:45">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="249:9"><if pos:start="85:9" pos:end="97:9">if <condition pos:start="85:12" pos:end="85:58">(<expr pos:start="85:13" pos:end="85:57"><call pos:start="85:13" pos:end="85:57"><name pos:start="85:13" pos:end="85:23">av_strstart</name><argument_list pos:start="85:24" pos:end="85:57">(<argument pos:start="85:25" pos:end="85:28"><expr pos:start="85:25" pos:end="85:28"><name pos:start="85:25" pos:end="85:28">line</name></expr></argument>, <argument pos:start="85:31" pos:end="85:50"><expr pos:start="85:31" pos:end="85:50"><literal type="string" pos:start="85:31" pos:end="85:50">"#EXT-X-STREAM-INF:"</literal></expr></argument>, <argument pos:start="85:53" pos:end="85:56"><expr pos:start="85:53" pos:end="85:56"><operator pos:start="85:53" pos:end="85:53">&amp;</operator><name pos:start="85:54" pos:end="85:56">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:60" pos:end="97:9">{<block_content pos:start="87:13" pos:end="95:45">

            <decl_stmt pos:start="87:13" pos:end="87:45"><decl pos:start="87:13" pos:end="87:44"><type pos:start="87:13" pos:end="87:31"><name pos:start="87:13" pos:end="87:31"><name pos:start="87:13" pos:end="87:18">struct</name> <name pos:start="87:20" pos:end="87:31">variant_info</name></name></type> <name pos:start="87:33" pos:end="87:36">info</name> <init pos:start="87:38" pos:end="87:44">= <expr pos:start="87:40" pos:end="87:44"><block pos:start="87:40" pos:end="87:44">{<expr pos:start="87:41" pos:end="87:43"><block pos:start="87:41" pos:end="87:43">{<expr pos:start="87:42" pos:end="87:42"><literal type="number" pos:start="87:42" pos:end="87:42">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:27"><expr pos:start="89:13" pos:end="89:26"><name pos:start="89:13" pos:end="89:22">is_variant</name> <operator pos:start="89:24" pos:end="89:24">=</operator> <literal type="number" pos:start="89:26" pos:end="89:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="93:38"><expr pos:start="91:13" pos:end="93:37"><call pos:start="91:13" pos:end="93:37"><name pos:start="91:13" pos:end="91:30">ff_parse_key_value</name><argument_list pos:start="91:31" pos:end="93:37">(<argument pos:start="91:32" pos:end="91:34"><expr pos:start="91:32" pos:end="91:34"><name pos:start="91:32" pos:end="91:34">ptr</name></expr></argument>, <argument pos:start="91:37" pos:end="91:77"><expr pos:start="91:37" pos:end="91:77"><operator pos:start="91:37" pos:end="91:37">(</operator><name pos:start="91:38" pos:end="91:56">ff_parse_key_val_cb</name><operator pos:start="91:57" pos:end="91:57">)</operator> <name pos:start="91:59" pos:end="91:77">handle_variant_args</name></expr></argument>,

                               <argument pos:start="93:32" pos:end="93:36"><expr pos:start="93:32" pos:end="93:36"><operator pos:start="93:32" pos:end="93:32">&amp;</operator><name pos:start="93:33" pos:end="93:36">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:45"><expr pos:start="95:13" pos:end="95:44"><name pos:start="95:13" pos:end="95:21">bandwidth</name> <operator pos:start="95:23" pos:end="95:23">=</operator> <call pos:start="95:25" pos:end="95:44"><name pos:start="95:25" pos:end="95:28">atoi</name><argument_list pos:start="95:29" pos:end="95:44">(<argument pos:start="95:30" pos:end="95:43"><expr pos:start="95:30" pos:end="95:43"><name pos:start="95:30" pos:end="95:43"><name pos:start="95:30" pos:end="95:33">info</name><operator pos:start="95:34" pos:end="95:34">.</operator><name pos:start="95:35" pos:end="95:43">bandwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="97:11" pos:end="123:9">else if <condition pos:start="97:19" pos:end="97:58">(<expr pos:start="97:20" pos:end="97:57"><call pos:start="97:20" pos:end="97:57"><name pos:start="97:20" pos:end="97:30">av_strstart</name><argument_list pos:start="97:31" pos:end="97:57">(<argument pos:start="97:32" pos:end="97:35"><expr pos:start="97:32" pos:end="97:35"><name pos:start="97:32" pos:end="97:35">line</name></expr></argument>, <argument pos:start="97:38" pos:end="97:50"><expr pos:start="97:38" pos:end="97:50"><literal type="string" pos:start="97:38" pos:end="97:50">"#EXT-X-KEY:"</literal></expr></argument>, <argument pos:start="97:53" pos:end="97:56"><expr pos:start="97:53" pos:end="97:56"><operator pos:start="97:53" pos:end="97:53">&amp;</operator><name pos:start="97:54" pos:end="97:56">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:60" pos:end="123:9">{<block_content pos:start="99:13" pos:end="121:51">

            <decl_stmt pos:start="99:13" pos:end="99:41"><decl pos:start="99:13" pos:end="99:40"><type pos:start="99:13" pos:end="99:27"><name pos:start="99:13" pos:end="99:27"><name pos:start="99:13" pos:end="99:18">struct</name> <name pos:start="99:20" pos:end="99:27">key_info</name></name></type> <name pos:start="99:29" pos:end="99:32">info</name> <init pos:start="99:34" pos:end="99:40">= <expr pos:start="99:36" pos:end="99:40"><block pos:start="99:36" pos:end="99:40">{<expr pos:start="99:37" pos:end="99:39"><block pos:start="99:37" pos:end="99:39">{<expr pos:start="99:38" pos:end="99:38"><literal type="number" pos:start="99:38" pos:end="99:38">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="101:13" pos:end="103:38"><expr pos:start="101:13" pos:end="103:37"><call pos:start="101:13" pos:end="103:37"><name pos:start="101:13" pos:end="101:30">ff_parse_key_value</name><argument_list pos:start="101:31" pos:end="103:37">(<argument pos:start="101:32" pos:end="101:34"><expr pos:start="101:32" pos:end="101:34"><name pos:start="101:32" pos:end="101:34">ptr</name></expr></argument>, <argument pos:start="101:37" pos:end="101:73"><expr pos:start="101:37" pos:end="101:73"><operator pos:start="101:37" pos:end="101:37">(</operator><name pos:start="101:38" pos:end="101:56">ff_parse_key_val_cb</name><operator pos:start="101:57" pos:end="101:57">)</operator> <name pos:start="101:59" pos:end="101:73">handle_key_args</name></expr></argument>,

                               <argument pos:start="103:32" pos:end="103:36"><expr pos:start="103:32" pos:end="103:36"><operator pos:start="103:32" pos:end="103:32">&amp;</operator><name pos:start="103:33" pos:end="103:36">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:32"><expr pos:start="105:13" pos:end="105:31"><name pos:start="105:13" pos:end="105:20">key_type</name> <operator pos:start="105:22" pos:end="105:22">=</operator> <name pos:start="105:24" pos:end="105:31">KEY_NONE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:23"><expr pos:start="107:13" pos:end="107:22"><name pos:start="107:13" pos:end="107:18">has_iv</name> <operator pos:start="107:20" pos:end="107:20">=</operator> <literal type="number" pos:start="107:22" pos:end="107:22">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="111:39"><if pos:start="109:13" pos:end="111:39">if <condition pos:start="109:16" pos:end="109:48">(<expr pos:start="109:17" pos:end="109:47"><operator pos:start="109:17" pos:end="109:17">!</operator><call pos:start="109:18" pos:end="109:47"><name pos:start="109:18" pos:end="109:23">strcmp</name><argument_list pos:start="109:24" pos:end="109:47">(<argument pos:start="109:25" pos:end="109:35"><expr pos:start="109:25" pos:end="109:35"><name pos:start="109:25" pos:end="109:35"><name pos:start="109:25" pos:end="109:28">info</name><operator pos:start="109:29" pos:end="109:29">.</operator><name pos:start="109:30" pos:end="109:35">method</name></name></expr></argument>, <argument pos:start="109:38" pos:end="109:46"><expr pos:start="109:38" pos:end="109:46"><literal type="string" pos:start="109:38" pos:end="109:46">"AES-128"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="111:17" pos:end="111:39"><block_content pos:start="111:17" pos:end="111:39">

                <expr_stmt pos:start="111:17" pos:end="111:39"><expr pos:start="111:17" pos:end="111:38"><name pos:start="111:17" pos:end="111:24">key_type</name> <operator pos:start="111:26" pos:end="111:26">=</operator> <name pos:start="111:28" pos:end="111:38">KEY_AES_128</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:73">(<expr pos:start="113:17" pos:end="113:72"><operator pos:start="113:17" pos:end="113:17">!</operator><call pos:start="113:18" pos:end="113:42"><name pos:start="113:18" pos:end="113:24">strncmp</name><argument_list pos:start="113:25" pos:end="113:42">(<argument pos:start="113:26" pos:end="113:32"><expr pos:start="113:26" pos:end="113:32"><name pos:start="113:26" pos:end="113:32"><name pos:start="113:26" pos:end="113:29">info</name><operator pos:start="113:30" pos:end="113:30">.</operator><name pos:start="113:31" pos:end="113:32">iv</name></name></expr></argument>, <argument pos:start="113:35" pos:end="113:38"><expr pos:start="113:35" pos:end="113:38"><literal type="string" pos:start="113:35" pos:end="113:38">"0x"</literal></expr></argument>, <argument pos:start="113:41" pos:end="113:41"><expr pos:start="113:41" pos:end="113:41"><literal type="number" pos:start="113:41" pos:end="113:41">2</literal></expr></argument>)</argument_list></call> <operator pos:start="113:44" pos:end="113:45">||</operator> <operator pos:start="113:47" pos:end="113:47">!</operator><call pos:start="113:48" pos:end="113:72"><name pos:start="113:48" pos:end="113:54">strncmp</name><argument_list pos:start="113:55" pos:end="113:72">(<argument pos:start="113:56" pos:end="113:62"><expr pos:start="113:56" pos:end="113:62"><name pos:start="113:56" pos:end="113:62"><name pos:start="113:56" pos:end="113:59">info</name><operator pos:start="113:60" pos:end="113:60">.</operator><name pos:start="113:61" pos:end="113:62">iv</name></name></expr></argument>, <argument pos:start="113:65" pos:end="113:68"><expr pos:start="113:65" pos:end="113:68"><literal type="string" pos:start="113:65" pos:end="113:68">"0X"</literal></expr></argument>, <argument pos:start="113:71" pos:end="113:71"><expr pos:start="113:71" pos:end="113:71"><literal type="number" pos:start="113:71" pos:end="113:71">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:75" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:27">

                <expr_stmt pos:start="115:17" pos:end="115:48"><expr pos:start="115:17" pos:end="115:47"><call pos:start="115:17" pos:end="115:47"><name pos:start="115:17" pos:end="115:30">ff_hex_to_data</name><argument_list pos:start="115:31" pos:end="115:47">(<argument pos:start="115:32" pos:end="115:33"><expr pos:start="115:32" pos:end="115:33"><name pos:start="115:32" pos:end="115:33">iv</name></expr></argument>, <argument pos:start="115:36" pos:end="115:46"><expr pos:start="115:36" pos:end="115:46"><name pos:start="115:36" pos:end="115:42"><name pos:start="115:36" pos:end="115:39">info</name><operator pos:start="115:40" pos:end="115:40">.</operator><name pos:start="115:41" pos:end="115:42">iv</name></name> <operator pos:start="115:44" pos:end="115:44">+</operator> <literal type="number" pos:start="115:46" pos:end="115:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:27"><expr pos:start="117:17" pos:end="117:26"><name pos:start="117:17" pos:end="117:22">has_iv</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <literal type="number" pos:start="117:26" pos:end="117:26">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:51"><expr pos:start="121:13" pos:end="121:50"><call pos:start="121:13" pos:end="121:50"><name pos:start="121:13" pos:end="121:22">av_strlcpy</name><argument_list pos:start="121:23" pos:end="121:50">(<argument pos:start="121:24" pos:end="121:26"><expr pos:start="121:24" pos:end="121:26"><name pos:start="121:24" pos:end="121:26">key</name></expr></argument>, <argument pos:start="121:29" pos:end="121:36"><expr pos:start="121:29" pos:end="121:36"><name pos:start="121:29" pos:end="121:36"><name pos:start="121:29" pos:end="121:32">info</name><operator pos:start="121:33" pos:end="121:33">.</operator><name pos:start="121:34" pos:end="121:36">uri</name></name></expr></argument>, <argument pos:start="121:39" pos:end="121:49"><expr pos:start="121:39" pos:end="121:49"><sizeof pos:start="121:39" pos:end="121:49">sizeof<argument_list pos:start="121:45" pos:end="121:49">(<argument pos:start="121:46" pos:end="121:48"><expr pos:start="121:46" pos:end="121:48"><name pos:start="121:46" pos:end="121:48">key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="123:11" pos:end="141:9">else if <condition pos:start="123:19" pos:end="123:69">(<expr pos:start="123:20" pos:end="123:68"><call pos:start="123:20" pos:end="123:68"><name pos:start="123:20" pos:end="123:30">av_strstart</name><argument_list pos:start="123:31" pos:end="123:68">(<argument pos:start="123:32" pos:end="123:35"><expr pos:start="123:32" pos:end="123:35"><name pos:start="123:32" pos:end="123:35">line</name></expr></argument>, <argument pos:start="123:38" pos:end="123:61"><expr pos:start="123:38" pos:end="123:61"><literal type="string" pos:start="123:38" pos:end="123:61">"#EXT-X-TARGETDURATION:"</literal></expr></argument>, <argument pos:start="123:64" pos:end="123:67"><expr pos:start="123:64" pos:end="123:67"><operator pos:start="123:64" pos:end="123:64">&amp;</operator><name pos:start="123:65" pos:end="123:67">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:71" pos:end="141:9">{<block_content pos:start="125:13" pos:end="139:60">

            <if_stmt pos:start="125:13" pos:end="137:13"><if pos:start="125:13" pos:end="137:13">if <condition pos:start="125:16" pos:end="125:21">(<expr pos:start="125:17" pos:end="125:20"><operator pos:start="125:17" pos:end="125:17">!</operator><name pos:start="125:18" pos:end="125:20">var</name></expr>)</condition> <block pos:start="125:23" pos:end="137:13">{<block_content pos:start="127:17" pos:end="135:17">

                <expr_stmt pos:start="127:17" pos:end="127:51"><expr pos:start="127:17" pos:end="127:50"><name pos:start="127:17" pos:end="127:19">var</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <call pos:start="127:23" pos:end="127:50"><name pos:start="127:23" pos:end="127:33">new_variant</name><argument_list pos:start="127:34" pos:end="127:50">(<argument pos:start="127:35" pos:end="127:35"><expr pos:start="127:35" pos:end="127:35"><name pos:start="127:35" pos:end="127:35">c</name></expr></argument>, <argument pos:start="127:38" pos:end="127:38"><expr pos:start="127:38" pos:end="127:38"><literal type="number" pos:start="127:38" pos:end="127:38">0</literal></expr></argument>, <argument pos:start="127:41" pos:end="127:43"><expr pos:start="127:41" pos:end="127:43"><name pos:start="127:41" pos:end="127:43">url</name></expr></argument>, <argument pos:start="127:46" pos:end="127:49"><expr pos:start="127:46" pos:end="127:49"><name pos:start="127:46" pos:end="127:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="129:17" pos:end="135:17"><if pos:start="129:17" pos:end="135:17">if <condition pos:start="129:20" pos:end="129:25">(<expr pos:start="129:21" pos:end="129:24"><operator pos:start="129:21" pos:end="129:21">!</operator><name pos:start="129:22" pos:end="129:24">var</name></expr>)</condition> <block pos:start="129:27" pos:end="135:17">{<block_content pos:start="131:21" pos:end="133:30">

                    <expr_stmt pos:start="131:21" pos:end="131:42"><expr pos:start="131:21" pos:end="131:41"><name pos:start="131:21" pos:end="131:23">ret</name> <operator pos:start="131:25" pos:end="131:25">=</operator> <call pos:start="131:27" pos:end="131:41"><name pos:start="131:27" pos:end="131:33">AVERROR</name><argument_list pos:start="131:34" pos:end="131:41">(<argument pos:start="131:35" pos:end="131:40"><expr pos:start="131:35" pos:end="131:40"><name pos:start="131:35" pos:end="131:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="133:21" pos:end="133:30">goto <name pos:start="133:26" pos:end="133:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:60"><expr pos:start="139:13" pos:end="139:59"><name pos:start="139:13" pos:end="139:32"><name pos:start="139:13" pos:end="139:15">var</name><operator pos:start="139:16" pos:end="139:17">-&gt;</operator><name pos:start="139:18" pos:end="139:32">target_duration</name></name> <operator pos:start="139:34" pos:end="139:34">=</operator> <call pos:start="139:36" pos:end="139:44"><name pos:start="139:36" pos:end="139:39">atoi</name><argument_list pos:start="139:40" pos:end="139:44">(<argument pos:start="139:41" pos:end="139:43"><expr pos:start="139:41" pos:end="139:43"><name pos:start="139:41" pos:end="139:43">ptr</name></expr></argument>)</argument_list></call> <operator pos:start="139:46" pos:end="139:46">*</operator> <name pos:start="139:48" pos:end="139:59">AV_TIME_BASE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="141:11" pos:end="159:9">else if <condition pos:start="141:19" pos:end="141:69">(<expr pos:start="141:20" pos:end="141:68"><call pos:start="141:20" pos:end="141:68"><name pos:start="141:20" pos:end="141:30">av_strstart</name><argument_list pos:start="141:31" pos:end="141:68">(<argument pos:start="141:32" pos:end="141:35"><expr pos:start="141:32" pos:end="141:35"><name pos:start="141:32" pos:end="141:35">line</name></expr></argument>, <argument pos:start="141:38" pos:end="141:61"><expr pos:start="141:38" pos:end="141:61"><literal type="string" pos:start="141:38" pos:end="141:61">"#EXT-X-MEDIA-SEQUENCE:"</literal></expr></argument>, <argument pos:start="141:64" pos:end="141:67"><expr pos:start="141:64" pos:end="141:67"><operator pos:start="141:64" pos:end="141:64">&amp;</operator><name pos:start="141:65" pos:end="141:67">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:71" pos:end="159:9">{<block_content pos:start="143:13" pos:end="157:42">

            <if_stmt pos:start="143:13" pos:end="155:13"><if pos:start="143:13" pos:end="155:13">if <condition pos:start="143:16" pos:end="143:21">(<expr pos:start="143:17" pos:end="143:20"><operator pos:start="143:17" pos:end="143:17">!</operator><name pos:start="143:18" pos:end="143:20">var</name></expr>)</condition> <block pos:start="143:23" pos:end="155:13">{<block_content pos:start="145:17" pos:end="153:17">

                <expr_stmt pos:start="145:17" pos:end="145:51"><expr pos:start="145:17" pos:end="145:50"><name pos:start="145:17" pos:end="145:19">var</name> <operator pos:start="145:21" pos:end="145:21">=</operator> <call pos:start="145:23" pos:end="145:50"><name pos:start="145:23" pos:end="145:33">new_variant</name><argument_list pos:start="145:34" pos:end="145:50">(<argument pos:start="145:35" pos:end="145:35"><expr pos:start="145:35" pos:end="145:35"><name pos:start="145:35" pos:end="145:35">c</name></expr></argument>, <argument pos:start="145:38" pos:end="145:38"><expr pos:start="145:38" pos:end="145:38"><literal type="number" pos:start="145:38" pos:end="145:38">0</literal></expr></argument>, <argument pos:start="145:41" pos:end="145:43"><expr pos:start="145:41" pos:end="145:43"><name pos:start="145:41" pos:end="145:43">url</name></expr></argument>, <argument pos:start="145:46" pos:end="145:49"><expr pos:start="145:46" pos:end="145:49"><name pos:start="145:46" pos:end="145:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="147:17" pos:end="153:17"><if pos:start="147:17" pos:end="153:17">if <condition pos:start="147:20" pos:end="147:25">(<expr pos:start="147:21" pos:end="147:24"><operator pos:start="147:21" pos:end="147:21">!</operator><name pos:start="147:22" pos:end="147:24">var</name></expr>)</condition> <block pos:start="147:27" pos:end="153:17">{<block_content pos:start="149:21" pos:end="151:30">

                    <expr_stmt pos:start="149:21" pos:end="149:42"><expr pos:start="149:21" pos:end="149:41"><name pos:start="149:21" pos:end="149:23">ret</name> <operator pos:start="149:25" pos:end="149:25">=</operator> <call pos:start="149:27" pos:end="149:41"><name pos:start="149:27" pos:end="149:33">AVERROR</name><argument_list pos:start="149:34" pos:end="149:41">(<argument pos:start="149:35" pos:end="149:40"><expr pos:start="149:35" pos:end="149:40"><name pos:start="149:35" pos:end="149:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="151:21" pos:end="151:30">goto <name pos:start="151:26" pos:end="151:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:42"><expr pos:start="157:13" pos:end="157:41"><name pos:start="157:13" pos:end="157:29"><name pos:start="157:13" pos:end="157:15">var</name><operator pos:start="157:16" pos:end="157:17">-&gt;</operator><name pos:start="157:18" pos:end="157:29">start_seq_no</name></name> <operator pos:start="157:31" pos:end="157:31">=</operator> <call pos:start="157:33" pos:end="157:41"><name pos:start="157:33" pos:end="157:36">atoi</name><argument_list pos:start="157:37" pos:end="157:41">(<argument pos:start="157:38" pos:end="157:40"><expr pos:start="157:38" pos:end="157:40"><name pos:start="157:38" pos:end="157:40">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="159:11" pos:end="165:9">else if <condition pos:start="159:19" pos:end="159:61">(<expr pos:start="159:20" pos:end="159:60"><call pos:start="159:20" pos:end="159:60"><name pos:start="159:20" pos:end="159:30">av_strstart</name><argument_list pos:start="159:31" pos:end="159:60">(<argument pos:start="159:32" pos:end="159:35"><expr pos:start="159:32" pos:end="159:35"><name pos:start="159:32" pos:end="159:35">line</name></expr></argument>, <argument pos:start="159:38" pos:end="159:53"><expr pos:start="159:38" pos:end="159:53"><literal type="string" pos:start="159:38" pos:end="159:53">"#EXT-X-ENDLIST"</literal></expr></argument>, <argument pos:start="159:56" pos:end="159:59"><expr pos:start="159:56" pos:end="159:59"><operator pos:start="159:56" pos:end="159:56">&amp;</operator><name pos:start="159:57" pos:end="159:59">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:63" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:34">

            <if_stmt pos:start="161:13" pos:end="163:34"><if pos:start="161:13" pos:end="163:34">if <condition pos:start="161:16" pos:end="161:20">(<expr pos:start="161:17" pos:end="161:19"><name pos:start="161:17" pos:end="161:19">var</name></expr>)</condition><block type="pseudo" pos:start="163:17" pos:end="163:34"><block_content pos:start="163:17" pos:end="163:34">

                <expr_stmt pos:start="163:17" pos:end="163:34"><expr pos:start="163:17" pos:end="163:33"><name pos:start="163:17" pos:end="163:29"><name pos:start="163:17" pos:end="163:19">var</name><operator pos:start="163:20" pos:end="163:21">-&gt;</operator><name pos:start="163:22" pos:end="163:29">finished</name></name> <operator pos:start="163:31" pos:end="163:31">=</operator> <literal type="number" pos:start="163:33" pos:end="163:33">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="165:11" pos:end="171:9">else if <condition pos:start="165:19" pos:end="165:55">(<expr pos:start="165:20" pos:end="165:54"><call pos:start="165:20" pos:end="165:54"><name pos:start="165:20" pos:end="165:30">av_strstart</name><argument_list pos:start="165:31" pos:end="165:54">(<argument pos:start="165:32" pos:end="165:35"><expr pos:start="165:32" pos:end="165:35"><name pos:start="165:32" pos:end="165:35">line</name></expr></argument>, <argument pos:start="165:38" pos:end="165:47"><expr pos:start="165:38" pos:end="165:47"><literal type="string" pos:start="165:38" pos:end="165:47">"#EXTINF:"</literal></expr></argument>, <argument pos:start="165:50" pos:end="165:53"><expr pos:start="165:50" pos:end="165:53"><operator pos:start="165:50" pos:end="165:50">&amp;</operator><name pos:start="165:51" pos:end="165:53">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="165:57" pos:end="171:9">{<block_content pos:start="167:13" pos:end="169:50">

            <expr_stmt pos:start="167:13" pos:end="167:27"><expr pos:start="167:13" pos:end="167:26"><name pos:start="167:13" pos:end="167:22">is_segment</name> <operator pos:start="167:24" pos:end="167:24">=</operator> <literal type="number" pos:start="167:26" pos:end="167:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:50"><expr pos:start="169:13" pos:end="169:49"><name pos:start="169:13" pos:end="169:20">duration</name>   <operator pos:start="169:24" pos:end="169:24">=</operator> <call pos:start="169:26" pos:end="169:34"><name pos:start="169:26" pos:end="169:29">atof</name><argument_list pos:start="169:30" pos:end="169:34">(<argument pos:start="169:31" pos:end="169:33"><expr pos:start="169:31" pos:end="169:33"><name pos:start="169:31" pos:end="169:33">ptr</name></expr></argument>)</argument_list></call> <operator pos:start="169:36" pos:end="169:36">*</operator> <name pos:start="169:38" pos:end="169:49">AV_TIME_BASE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="171:11" pos:end="175:9">else if <condition pos:start="171:19" pos:end="171:48">(<expr pos:start="171:20" pos:end="171:47"><call pos:start="171:20" pos:end="171:47"><name pos:start="171:20" pos:end="171:30">av_strstart</name><argument_list pos:start="171:31" pos:end="171:47">(<argument pos:start="171:32" pos:end="171:35"><expr pos:start="171:32" pos:end="171:35"><name pos:start="171:32" pos:end="171:35">line</name></expr></argument>, <argument pos:start="171:38" pos:end="171:40"><expr pos:start="171:38" pos:end="171:40"><literal type="string" pos:start="171:38" pos:end="171:40">"#"</literal></expr></argument>, <argument pos:start="171:43" pos:end="171:46"><expr pos:start="171:43" pos:end="171:46"><name pos:start="171:43" pos:end="171:46">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:50" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:21">

            <continue pos:start="173:13" pos:end="173:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="175:11" pos:end="249:9">else if <condition pos:start="175:19" pos:end="175:27">(<expr pos:start="175:20" pos:end="175:26"><name pos:start="175:20" pos:end="175:26"><name pos:start="175:20" pos:end="175:23">line</name><index pos:start="175:24" pos:end="175:26">[<expr pos:start="175:25" pos:end="175:25"><literal type="number" pos:start="175:25" pos:end="175:25">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="175:29" pos:end="249:9">{<block_content pos:start="177:13" pos:end="247:13">

            <if_stmt pos:start="177:13" pos:end="191:13"><if pos:start="177:13" pos:end="191:13">if <condition pos:start="177:16" pos:end="177:27">(<expr pos:start="177:17" pos:end="177:26"><name pos:start="177:17" pos:end="177:26">is_variant</name></expr>)</condition> <block pos:start="177:29" pos:end="191:13">{<block_content pos:start="179:17" pos:end="189:31">

                <if_stmt pos:start="179:17" pos:end="185:17"><if pos:start="179:17" pos:end="185:17">if <condition pos:start="179:20" pos:end="179:58">(<expr pos:start="179:21" pos:end="179:57"><operator pos:start="179:21" pos:end="179:21">!</operator><call pos:start="179:22" pos:end="179:57"><name pos:start="179:22" pos:end="179:32">new_variant</name><argument_list pos:start="179:33" pos:end="179:57">(<argument pos:start="179:34" pos:end="179:34"><expr pos:start="179:34" pos:end="179:34"><name pos:start="179:34" pos:end="179:34">c</name></expr></argument>, <argument pos:start="179:37" pos:end="179:45"><expr pos:start="179:37" pos:end="179:45"><name pos:start="179:37" pos:end="179:45">bandwidth</name></expr></argument>, <argument pos:start="179:48" pos:end="179:51"><expr pos:start="179:48" pos:end="179:51"><name pos:start="179:48" pos:end="179:51">line</name></expr></argument>, <argument pos:start="179:54" pos:end="179:56"><expr pos:start="179:54" pos:end="179:56"><name pos:start="179:54" pos:end="179:56">url</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:60" pos:end="185:17">{<block_content pos:start="181:21" pos:end="183:30">

                    <expr_stmt pos:start="181:21" pos:end="181:42"><expr pos:start="181:21" pos:end="181:41"><name pos:start="181:21" pos:end="181:23">ret</name> <operator pos:start="181:25" pos:end="181:25">=</operator> <call pos:start="181:27" pos:end="181:41"><name pos:start="181:27" pos:end="181:33">AVERROR</name><argument_list pos:start="181:34" pos:end="181:41">(<argument pos:start="181:35" pos:end="181:40"><expr pos:start="181:35" pos:end="181:40"><name pos:start="181:35" pos:end="181:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="183:21" pos:end="183:30">goto <name pos:start="183:26" pos:end="183:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:31"><expr pos:start="187:17" pos:end="187:30"><name pos:start="187:17" pos:end="187:26">is_variant</name> <operator pos:start="187:28" pos:end="187:28">=</operator> <literal type="number" pos:start="187:30" pos:end="187:30">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:31"><expr pos:start="189:17" pos:end="189:30"><name pos:start="189:17" pos:end="189:25">bandwidth</name>  <operator pos:start="189:28" pos:end="189:28">=</operator> <literal type="number" pos:start="189:30" pos:end="189:30">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="193:13" pos:end="247:13"><if pos:start="193:13" pos:end="247:13">if <condition pos:start="193:16" pos:end="193:27">(<expr pos:start="193:17" pos:end="193:26"><name pos:start="193:17" pos:end="193:26">is_segment</name></expr>)</condition> <block pos:start="193:29" pos:end="247:13">{<block_content pos:start="195:17" pos:end="245:31">

                <decl_stmt pos:start="195:17" pos:end="195:36"><decl pos:start="195:17" pos:end="195:35"><type pos:start="195:17" pos:end="195:32"><name pos:start="195:17" pos:end="195:30"><name pos:start="195:17" pos:end="195:22">struct</name> <name pos:start="195:24" pos:end="195:30">segment</name></name> <modifier pos:start="195:32" pos:end="195:32">*</modifier></type><name pos:start="195:33" pos:end="195:35">seg</name></decl>;</decl_stmt>

                <if_stmt pos:start="197:17" pos:end="209:17"><if pos:start="197:17" pos:end="209:17">if <condition pos:start="197:20" pos:end="197:25">(<expr pos:start="197:21" pos:end="197:24"><operator pos:start="197:21" pos:end="197:21">!</operator><name pos:start="197:22" pos:end="197:24">var</name></expr>)</condition> <block pos:start="197:27" pos:end="209:17">{<block_content pos:start="199:21" pos:end="207:21">

                    <expr_stmt pos:start="199:21" pos:end="199:55"><expr pos:start="199:21" pos:end="199:54"><name pos:start="199:21" pos:end="199:23">var</name> <operator pos:start="199:25" pos:end="199:25">=</operator> <call pos:start="199:27" pos:end="199:54"><name pos:start="199:27" pos:end="199:37">new_variant</name><argument_list pos:start="199:38" pos:end="199:54">(<argument pos:start="199:39" pos:end="199:39"><expr pos:start="199:39" pos:end="199:39"><name pos:start="199:39" pos:end="199:39">c</name></expr></argument>, <argument pos:start="199:42" pos:end="199:42"><expr pos:start="199:42" pos:end="199:42"><literal type="number" pos:start="199:42" pos:end="199:42">0</literal></expr></argument>, <argument pos:start="199:45" pos:end="199:47"><expr pos:start="199:45" pos:end="199:47"><name pos:start="199:45" pos:end="199:47">url</name></expr></argument>, <argument pos:start="199:50" pos:end="199:53"><expr pos:start="199:50" pos:end="199:53"><name pos:start="199:50" pos:end="199:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="201:21" pos:end="207:21"><if pos:start="201:21" pos:end="207:21">if <condition pos:start="201:24" pos:end="201:29">(<expr pos:start="201:25" pos:end="201:28"><operator pos:start="201:25" pos:end="201:25">!</operator><name pos:start="201:26" pos:end="201:28">var</name></expr>)</condition> <block pos:start="201:31" pos:end="207:21">{<block_content pos:start="203:25" pos:end="205:34">

                        <expr_stmt pos:start="203:25" pos:end="203:46"><expr pos:start="203:25" pos:end="203:45"><name pos:start="203:25" pos:end="203:27">ret</name> <operator pos:start="203:29" pos:end="203:29">=</operator> <call pos:start="203:31" pos:end="203:45"><name pos:start="203:31" pos:end="203:37">AVERROR</name><argument_list pos:start="203:38" pos:end="203:45">(<argument pos:start="203:39" pos:end="203:44"><expr pos:start="203:39" pos:end="203:44"><name pos:start="203:39" pos:end="203:44">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="205:25" pos:end="205:34">goto <name pos:start="205:30" pos:end="205:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:56"><expr pos:start="211:17" pos:end="211:55"><name pos:start="211:17" pos:end="211:19">seg</name> <operator pos:start="211:21" pos:end="211:21">=</operator> <call pos:start="211:23" pos:end="211:55"><name pos:start="211:23" pos:end="211:31">av_malloc</name><argument_list pos:start="211:32" pos:end="211:55">(<argument pos:start="211:33" pos:end="211:54"><expr pos:start="211:33" pos:end="211:54"><sizeof pos:start="211:33" pos:end="211:54">sizeof<argument_list pos:start="211:39" pos:end="211:54">(<argument pos:start="211:40" pos:end="211:53"><expr pos:start="211:40" pos:end="211:53">struct <name pos:start="211:47" pos:end="211:53">segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="213:17" pos:end="219:17"><if pos:start="213:17" pos:end="219:17">if <condition pos:start="213:20" pos:end="213:25">(<expr pos:start="213:21" pos:end="213:24"><operator pos:start="213:21" pos:end="213:21">!</operator><name pos:start="213:22" pos:end="213:24">seg</name></expr>)</condition> <block pos:start="213:27" pos:end="219:17">{<block_content pos:start="215:21" pos:end="217:30">

                    <expr_stmt pos:start="215:21" pos:end="215:42"><expr pos:start="215:21" pos:end="215:41"><name pos:start="215:21" pos:end="215:23">ret</name> <operator pos:start="215:25" pos:end="215:25">=</operator> <call pos:start="215:27" pos:end="215:41"><name pos:start="215:27" pos:end="215:33">AVERROR</name><argument_list pos:start="215:34" pos:end="215:41">(<argument pos:start="215:35" pos:end="215:40"><expr pos:start="215:35" pos:end="215:40"><name pos:start="215:35" pos:end="215:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="217:21" pos:end="217:30">goto <name pos:start="217:26" pos:end="217:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:41"><expr pos:start="221:17" pos:end="221:40"><name pos:start="221:17" pos:end="221:29"><name pos:start="221:17" pos:end="221:19">seg</name><operator pos:start="221:20" pos:end="221:21">-&gt;</operator><name pos:start="221:22" pos:end="221:29">duration</name></name> <operator pos:start="221:31" pos:end="221:31">=</operator> <name pos:start="221:33" pos:end="221:40">duration</name></expr>;</expr_stmt>

                <expr_stmt pos:start="223:17" pos:end="223:41"><expr pos:start="223:17" pos:end="223:40"><name pos:start="223:17" pos:end="223:29"><name pos:start="223:17" pos:end="223:19">seg</name><operator pos:start="223:20" pos:end="223:21">-&gt;</operator><name pos:start="223:22" pos:end="223:29">key_type</name></name> <operator pos:start="223:31" pos:end="223:31">=</operator> <name pos:start="223:33" pos:end="223:40">key_type</name></expr>;</expr_stmt>

                <if_stmt pos:start="225:17" pos:end="237:17"><if pos:start="225:17" pos:end="229:17">if <condition pos:start="225:20" pos:end="225:27">(<expr pos:start="225:21" pos:end="225:26"><name pos:start="225:21" pos:end="225:26">has_iv</name></expr>)</condition> <block pos:start="225:29" pos:end="229:17">{<block_content pos:start="227:21" pos:end="227:52">

                    <expr_stmt pos:start="227:21" pos:end="227:52"><expr pos:start="227:21" pos:end="227:51"><call pos:start="227:21" pos:end="227:51"><name pos:start="227:21" pos:end="227:26">memcpy</name><argument_list pos:start="227:27" pos:end="227:51">(<argument pos:start="227:28" pos:end="227:34"><expr pos:start="227:28" pos:end="227:34"><name pos:start="227:28" pos:end="227:34"><name pos:start="227:28" pos:end="227:30">seg</name><operator pos:start="227:31" pos:end="227:32">-&gt;</operator><name pos:start="227:33" pos:end="227:34">iv</name></name></expr></argument>, <argument pos:start="227:37" pos:end="227:38"><expr pos:start="227:37" pos:end="227:38"><name pos:start="227:37" pos:end="227:38">iv</name></expr></argument>, <argument pos:start="227:41" pos:end="227:50"><expr pos:start="227:41" pos:end="227:50"><sizeof pos:start="227:41" pos:end="227:50">sizeof<argument_list pos:start="227:47" pos:end="227:50">(<argument pos:start="227:48" pos:end="227:49"><expr pos:start="227:48" pos:end="227:49"><name pos:start="227:48" pos:end="227:49">iv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="229:19" pos:end="237:17">else <block pos:start="229:24" pos:end="237:17">{<block_content pos:start="231:21" pos:end="235:47">

                    <decl_stmt pos:start="231:21" pos:end="231:66"><decl pos:start="231:21" pos:end="231:65"><type pos:start="231:21" pos:end="231:23"><name pos:start="231:21" pos:end="231:23">int</name></type> <name pos:start="231:25" pos:end="231:27">seq</name> <init pos:start="231:29" pos:end="231:65">= <expr pos:start="231:31" pos:end="231:65"><name pos:start="231:31" pos:end="231:47"><name pos:start="231:31" pos:end="231:33">var</name><operator pos:start="231:34" pos:end="231:35">-&gt;</operator><name pos:start="231:36" pos:end="231:47">start_seq_no</name></name> <operator pos:start="231:49" pos:end="231:49">+</operator> <name pos:start="231:51" pos:end="231:65"><name pos:start="231:51" pos:end="231:53">var</name><operator pos:start="231:54" pos:end="231:55">-&gt;</operator><name pos:start="231:56" pos:end="231:65">n_segments</name></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="233:21" pos:end="233:56"><expr pos:start="233:21" pos:end="233:55"><call pos:start="233:21" pos:end="233:55"><name pos:start="233:21" pos:end="233:26">memset</name><argument_list pos:start="233:27" pos:end="233:55">(<argument pos:start="233:28" pos:end="233:34"><expr pos:start="233:28" pos:end="233:34"><name pos:start="233:28" pos:end="233:34"><name pos:start="233:28" pos:end="233:30">seg</name><operator pos:start="233:31" pos:end="233:32">-&gt;</operator><name pos:start="233:33" pos:end="233:34">iv</name></name></expr></argument>, <argument pos:start="233:37" pos:end="233:37"><expr pos:start="233:37" pos:end="233:37"><literal type="number" pos:start="233:37" pos:end="233:37">0</literal></expr></argument>, <argument pos:start="233:40" pos:end="233:54"><expr pos:start="233:40" pos:end="233:54"><sizeof pos:start="233:40" pos:end="233:54">sizeof<argument_list pos:start="233:46" pos:end="233:54">(<argument pos:start="233:47" pos:end="233:53"><expr pos:start="233:47" pos:end="233:53"><name pos:start="233:47" pos:end="233:53"><name pos:start="233:47" pos:end="233:49">seg</name><operator pos:start="233:50" pos:end="233:51">-&gt;</operator><name pos:start="233:52" pos:end="233:53">iv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="235:21" pos:end="235:47"><expr pos:start="235:21" pos:end="235:46"><call pos:start="235:21" pos:end="235:46"><name pos:start="235:21" pos:end="235:27">AV_WB32</name><argument_list pos:start="235:28" pos:end="235:46">(<argument pos:start="235:29" pos:end="235:40"><expr pos:start="235:29" pos:end="235:40"><name pos:start="235:29" pos:end="235:35"><name pos:start="235:29" pos:end="235:31">seg</name><operator pos:start="235:32" pos:end="235:33">-&gt;</operator><name pos:start="235:34" pos:end="235:35">iv</name></name> <operator pos:start="235:37" pos:end="235:37">+</operator> <literal type="number" pos:start="235:39" pos:end="235:40">12</literal></expr></argument>, <argument pos:start="235:43" pos:end="235:45"><expr pos:start="235:43" pos:end="235:45"><name pos:start="235:43" pos:end="235:45">seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:75"><expr pos:start="239:17" pos:end="239:74"><call pos:start="239:17" pos:end="239:74"><name pos:start="239:17" pos:end="239:36">ff_make_absolute_url</name><argument_list pos:start="239:37" pos:end="239:74">(<argument pos:start="239:38" pos:end="239:45"><expr pos:start="239:38" pos:end="239:45"><name pos:start="239:38" pos:end="239:45"><name pos:start="239:38" pos:end="239:40">seg</name><operator pos:start="239:41" pos:end="239:42">-&gt;</operator><name pos:start="239:43" pos:end="239:45">key</name></name></expr></argument>, <argument pos:start="239:48" pos:end="239:63"><expr pos:start="239:48" pos:end="239:63"><sizeof pos:start="239:48" pos:end="239:63">sizeof<argument_list pos:start="239:54" pos:end="239:63">(<argument pos:start="239:55" pos:end="239:62"><expr pos:start="239:55" pos:end="239:62"><name pos:start="239:55" pos:end="239:62"><name pos:start="239:55" pos:end="239:57">seg</name><operator pos:start="239:58" pos:end="239:59">-&gt;</operator><name pos:start="239:60" pos:end="239:62">key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="239:66" pos:end="239:68"><expr pos:start="239:66" pos:end="239:68"><name pos:start="239:66" pos:end="239:68">url</name></expr></argument>, <argument pos:start="239:71" pos:end="239:73"><expr pos:start="239:71" pos:end="239:73"><name pos:start="239:71" pos:end="239:73">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:76"><expr pos:start="241:17" pos:end="241:75"><call pos:start="241:17" pos:end="241:75"><name pos:start="241:17" pos:end="241:36">ff_make_absolute_url</name><argument_list pos:start="241:37" pos:end="241:75">(<argument pos:start="241:38" pos:end="241:45"><expr pos:start="241:38" pos:end="241:45"><name pos:start="241:38" pos:end="241:45"><name pos:start="241:38" pos:end="241:40">seg</name><operator pos:start="241:41" pos:end="241:42">-&gt;</operator><name pos:start="241:43" pos:end="241:45">url</name></name></expr></argument>, <argument pos:start="241:48" pos:end="241:63"><expr pos:start="241:48" pos:end="241:63"><sizeof pos:start="241:48" pos:end="241:63">sizeof<argument_list pos:start="241:54" pos:end="241:63">(<argument pos:start="241:55" pos:end="241:62"><expr pos:start="241:55" pos:end="241:62"><name pos:start="241:55" pos:end="241:62"><name pos:start="241:55" pos:end="241:57">seg</name><operator pos:start="241:58" pos:end="241:59">-&gt;</operator><name pos:start="241:60" pos:end="241:62">url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="241:66" pos:end="241:68"><expr pos:start="241:66" pos:end="241:68"><name pos:start="241:66" pos:end="241:68">url</name></expr></argument>, <argument pos:start="241:71" pos:end="241:74"><expr pos:start="241:71" pos:end="241:74"><name pos:start="241:71" pos:end="241:74">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:68"><expr pos:start="243:17" pos:end="243:67"><call pos:start="243:17" pos:end="243:67"><name pos:start="243:17" pos:end="243:28">dynarray_add</name><argument_list pos:start="243:29" pos:end="243:67">(<argument pos:start="243:30" pos:end="243:43"><expr pos:start="243:30" pos:end="243:43"><operator pos:start="243:30" pos:end="243:30">&amp;</operator><name pos:start="243:31" pos:end="243:43"><name pos:start="243:31" pos:end="243:33">var</name><operator pos:start="243:34" pos:end="243:35">-&gt;</operator><name pos:start="243:36" pos:end="243:43">segments</name></name></expr></argument>, <argument pos:start="243:46" pos:end="243:61"><expr pos:start="243:46" pos:end="243:61"><operator pos:start="243:46" pos:end="243:46">&amp;</operator><name pos:start="243:47" pos:end="243:61"><name pos:start="243:47" pos:end="243:49">var</name><operator pos:start="243:50" pos:end="243:51">-&gt;</operator><name pos:start="243:52" pos:end="243:61">n_segments</name></name></expr></argument>, <argument pos:start="243:64" pos:end="243:66"><expr pos:start="243:64" pos:end="243:66"><name pos:start="243:64" pos:end="243:66">seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:31"><expr pos:start="245:17" pos:end="245:30"><name pos:start="245:17" pos:end="245:26">is_segment</name> <operator pos:start="245:28" pos:end="245:28">=</operator> <literal type="number" pos:start="245:30" pos:end="245:30">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="253:5" pos:end="255:43"><if pos:start="253:5" pos:end="255:43">if <condition pos:start="253:8" pos:end="253:12">(<expr pos:start="253:9" pos:end="253:11"><name pos:start="253:9" pos:end="253:11">var</name></expr>)</condition><block type="pseudo" pos:start="255:9" pos:end="255:43"><block_content pos:start="255:9" pos:end="255:43">

        <expr_stmt pos:start="255:9" pos:end="255:43"><expr pos:start="255:9" pos:end="255:42"><name pos:start="255:9" pos:end="255:27"><name pos:start="255:9" pos:end="255:11">var</name><operator pos:start="255:12" pos:end="255:13">-&gt;</operator><name pos:start="255:14" pos:end="255:27">last_load_time</name></name> <operator pos:start="255:29" pos:end="255:29">=</operator> <call pos:start="255:31" pos:end="255:42"><name pos:start="255:31" pos:end="255:40">av_gettime</name><argument_list pos:start="255:41" pos:end="255:42">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<label pos:start="259:1" pos:end="259:5"><name pos:start="259:1" pos:end="259:4">fail</name>:</label>

    <if_stmt pos:start="261:5" pos:end="263:23"><if pos:start="261:5" pos:end="263:23">if <condition pos:start="261:8" pos:end="261:17">(<expr pos:start="261:9" pos:end="261:16"><name pos:start="261:9" pos:end="261:16">close_in</name></expr>)</condition><block type="pseudo" pos:start="263:9" pos:end="263:23"><block_content pos:start="263:9" pos:end="263:23">

        <expr_stmt pos:start="263:9" pos:end="263:23"><expr pos:start="263:9" pos:end="263:22"><call pos:start="263:9" pos:end="263:22"><name pos:start="263:9" pos:end="263:18">avio_close</name><argument_list pos:start="263:19" pos:end="263:22">(<argument pos:start="263:20" pos:end="263:21"><expr pos:start="263:20" pos:end="263:21"><name pos:start="263:20" pos:end="263:21">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="265:5" pos:end="265:15">return <expr pos:start="265:12" pos:end="265:14"><name pos:start="265:12" pos:end="265:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
