<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">check_lowpass_line</name><parameter_list pos:start="1:31" pos:end="1:41">(<parameter pos:start="1:32" pos:end="1:40"><decl pos:start="1:32" pos:end="1:40"><type pos:start="1:32" pos:end="1:34"><name pos:start="1:32" pos:end="1:34">int</name></type> <name pos:start="1:36" pos:end="1:40">depth</name></decl></parameter>)</parameter_list><block pos:start="1:42" pos:end="69:1">{<block_content pos:start="3:5" pos:end="67:5">

    <expr_stmt pos:start="3:5" pos:end="3:51"><expr pos:start="3:5" pos:end="3:50"><call pos:start="3:5" pos:end="3:50"><name pos:start="3:5" pos:end="3:20">LOCAL_ALIGNED_32</name><argument_list pos:start="3:21" pos:end="3:50">(<argument pos:start="3:22" pos:end="3:28"><expr pos:start="3:22" pos:end="3:28"><name pos:start="3:22" pos:end="3:28">uint8_t</name></expr></argument>, <argument pos:start="3:31" pos:end="3:33"><expr pos:start="3:31" pos:end="3:33"><name pos:start="3:31" pos:end="3:33">src</name></expr></argument>,     <argument pos:start="3:40" pos:end="3:49"><expr pos:start="3:40" pos:end="3:49"><index pos:start="3:40" pos:end="3:49">[<expr pos:start="3:41" pos:end="3:48"><name pos:start="3:41" pos:end="3:48">SRC_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="5:5" pos:end="5:55"><expr pos:start="5:5" pos:end="5:54"><call pos:start="5:5" pos:end="5:54"><name pos:start="5:5" pos:end="5:20">LOCAL_ALIGNED_32</name><argument_list pos:start="5:21" pos:end="5:54">(<argument pos:start="5:22" pos:end="5:28"><expr pos:start="5:22" pos:end="5:28"><name pos:start="5:22" pos:end="5:28">uint8_t</name></expr></argument>, <argument pos:start="5:31" pos:end="5:37"><expr pos:start="5:31" pos:end="5:37"><name pos:start="5:31" pos:end="5:37">dst_ref</name></expr></argument>, <argument pos:start="5:40" pos:end="5:53"><expr pos:start="5:40" pos:end="5:53"><index pos:start="5:40" pos:end="5:53">[<expr pos:start="5:41" pos:end="5:52"><name pos:start="5:41" pos:end="5:52">WIDTH_PADDED</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:55"><expr pos:start="7:5" pos:end="7:54"><call pos:start="7:5" pos:end="7:54"><name pos:start="7:5" pos:end="7:20">LOCAL_ALIGNED_32</name><argument_list pos:start="7:21" pos:end="7:54">(<argument pos:start="7:22" pos:end="7:28"><expr pos:start="7:22" pos:end="7:28"><name pos:start="7:22" pos:end="7:28">uint8_t</name></expr></argument>, <argument pos:start="7:31" pos:end="7:37"><expr pos:start="7:31" pos:end="7:37"><name pos:start="7:31" pos:end="7:37">dst_new</name></expr></argument>, <argument pos:start="7:40" pos:end="7:53"><expr pos:start="7:40" pos:end="7:53"><index pos:start="7:40" pos:end="7:53">[<expr pos:start="7:41" pos:end="7:52"><name pos:start="7:41" pos:end="7:52">WIDTH_PADDED</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">w</name> <init pos:start="9:11" pos:end="9:17">= <expr pos:start="9:13" pos:end="9:17"><name pos:start="9:13" pos:end="9:17">WIDTH</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">mref</name> <init pos:start="11:14" pos:end="11:32">= <expr pos:start="11:16" pos:end="11:32"><name pos:start="11:16" pos:end="11:27">WIDTH_PADDED</name> <operator pos:start="11:29" pos:end="11:29">*</operator> <operator pos:start="11:31" pos:end="11:31">-</operator><literal type="number" pos:start="11:32" pos:end="11:32">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">pref</name> <init pos:start="13:14" pos:end="13:27">= <expr pos:start="13:16" pos:end="13:27"><name pos:start="13:16" pos:end="13:27">WIDTH_PADDED</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:21">depth_byte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:20">InterlaceContext</name></type> <name pos:start="17:22" pos:end="17:22">s</name></decl>;</decl_stmt>



    <macro pos:start="21:5" pos:end="23:62"><name pos:start="21:5" pos:end="21:16">declare_func</name><argument_list pos:start="21:17" pos:end="23:62">(<argument pos:start="21:18" pos:end="21:21">void</argument>, <argument pos:start="21:24" pos:end="21:36">uint8_t *dstp</argument>, <argument pos:start="21:39" pos:end="21:56">ptrdiff_t linesize</argument>, <argument pos:start="21:59" pos:end="21:77">const uint8_t *srcp</argument>,

                 <argument pos:start="23:18" pos:end="23:31">ptrdiff_t mref</argument>, <argument pos:start="23:34" pos:end="23:47">ptrdiff_t pref</argument>, <argument pos:start="23:50" pos:end="23:61">int clip_max</argument>)</argument_list></macro><empty_stmt pos:start="23:63" pos:end="23:63">;</empty_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:18"><expr pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:6">.</operator><name pos:start="27:7" pos:end="27:13">lowpass</name></name> <operator pos:start="27:15" pos:end="27:15">=</operator> <literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:25"><expr pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:6">.</operator><name pos:start="29:7" pos:end="29:13">lowpass</name></name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:24">VLPF_LIN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:28"><expr pos:start="31:5" pos:end="31:27"><name pos:start="31:5" pos:end="31:14">depth_byte</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <name pos:start="31:18" pos:end="31:22">depth</name> <operator pos:start="31:24" pos:end="31:25">&gt;&gt;</operator> <literal type="number" pos:start="31:27" pos:end="31:27">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:20"><expr pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:5">w</name> <operator pos:start="33:7" pos:end="33:8">/=</operator> <name pos:start="33:10" pos:end="33:19">depth_byte</name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><call pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:10">memset</name><argument_list pos:start="37:11" pos:end="37:32">(<argument pos:start="37:12" pos:end="37:14"><expr pos:start="37:12" pos:end="37:14"><name pos:start="37:12" pos:end="37:14">src</name></expr></argument>,     <argument pos:start="37:21" pos:end="37:21"><expr pos:start="37:21" pos:end="37:21"><literal type="number" pos:start="37:21" pos:end="37:21">0</literal></expr></argument>, <argument pos:start="37:24" pos:end="37:31"><expr pos:start="37:24" pos:end="37:31"><name pos:start="37:24" pos:end="37:31">SRC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><call pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:10">memset</name><argument_list pos:start="39:11" pos:end="39:36">(<argument pos:start="39:12" pos:end="39:18"><expr pos:start="39:12" pos:end="39:18"><name pos:start="39:12" pos:end="39:18">dst_ref</name></expr></argument>, <argument pos:start="39:21" pos:end="39:21"><expr pos:start="39:21" pos:end="39:21"><literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr></argument>, <argument pos:start="39:24" pos:end="39:35"><expr pos:start="39:24" pos:end="39:35"><name pos:start="39:24" pos:end="39:35">WIDTH_PADDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:37"><expr pos:start="41:5" pos:end="41:36"><call pos:start="41:5" pos:end="41:36"><name pos:start="41:5" pos:end="41:10">memset</name><argument_list pos:start="41:11" pos:end="41:36">(<argument pos:start="41:12" pos:end="41:18"><expr pos:start="41:12" pos:end="41:18"><name pos:start="41:12" pos:end="41:18">dst_new</name></expr></argument>, <argument pos:start="41:21" pos:end="41:21"><expr pos:start="41:21" pos:end="41:21"><literal type="number" pos:start="41:21" pos:end="41:21">0</literal></expr></argument>, <argument pos:start="41:24" pos:end="41:35"><expr pos:start="41:24" pos:end="41:35"><name pos:start="41:24" pos:end="41:35">WIDTH_PADDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><call pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:21">randomize_buffers</name><argument_list pos:start="43:22" pos:end="43:36">(<argument pos:start="43:23" pos:end="43:25"><expr pos:start="43:23" pos:end="43:25"><name pos:start="43:23" pos:end="43:25">src</name></expr></argument>, <argument pos:start="43:28" pos:end="43:35"><expr pos:start="43:28" pos:end="43:35"><name pos:start="43:28" pos:end="43:35">SRC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:33"><expr pos:start="47:5" pos:end="47:32"><call pos:start="47:5" pos:end="47:32"><name pos:start="47:5" pos:end="47:21">ff_interlace_init</name><argument_list pos:start="47:22" pos:end="47:32">(<argument pos:start="47:23" pos:end="47:24"><expr pos:start="47:23" pos:end="47:24"><operator pos:start="47:23" pos:end="47:23">&amp;</operator><name pos:start="47:24" pos:end="47:24">s</name></expr></argument>, <argument pos:start="47:27" pos:end="47:31"><expr pos:start="47:27" pos:end="47:31"><name pos:start="47:27" pos:end="47:31">depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="67:5"><if pos:start="51:5" pos:end="67:5">if <condition pos:start="51:8" pos:end="51:61">(<expr pos:start="51:9" pos:end="51:60"><call pos:start="51:9" pos:end="51:60"><name pos:start="51:9" pos:end="51:18">check_func</name><argument_list pos:start="51:19" pos:end="51:60">(<argument pos:start="51:20" pos:end="51:33"><expr pos:start="51:20" pos:end="51:33"><name pos:start="51:20" pos:end="51:33"><name pos:start="51:20" pos:end="51:20">s</name><operator pos:start="51:21" pos:end="51:21">.</operator><name pos:start="51:22" pos:end="51:33">lowpass_line</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:52"><expr pos:start="51:36" pos:end="51:52"><literal type="string" pos:start="51:36" pos:end="51:52">"lowpass_line_%d"</literal></expr></argument>, <argument pos:start="51:55" pos:end="51:59"><expr pos:start="51:55" pos:end="51:59"><name pos:start="51:55" pos:end="51:59">depth</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:63" pos:end="67:5">{<block_content pos:start="53:9" pos:end="65:65">

        <for pos:start="53:9" pos:end="63:9">for <control pos:start="53:13" pos:end="53:32">(<init pos:start="53:14" pos:end="53:19"><expr pos:start="53:14" pos:end="53:18"><name pos:start="53:14" pos:end="53:14">i</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>;</init> <condition pos:start="53:21" pos:end="53:27"><expr pos:start="53:21" pos:end="53:26"><name pos:start="53:21" pos:end="53:21">i</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <literal type="number" pos:start="53:25" pos:end="53:26">32</literal></expr>;</condition> <incr pos:start="53:29" pos:end="53:31"><expr pos:start="53:29" pos:end="53:31"><name pos:start="53:29" pos:end="53:29">i</name><operator pos:start="53:30" pos:end="53:31">++</operator></expr></incr>)</control> <block pos:start="53:34" pos:end="63:9">{<block_content pos:start="55:13" pos:end="61:23"> <comment type="block" pos:start="53:36" pos:end="53:54">/* simulate crop */</comment>

            <expr_stmt pos:start="55:13" pos:end="55:83"><expr pos:start="55:13" pos:end="55:82"><call pos:start="55:13" pos:end="55:82"><name pos:start="55:13" pos:end="55:20">call_ref</name><argument_list pos:start="55:21" pos:end="55:82">(<argument pos:start="55:22" pos:end="55:28"><expr pos:start="55:22" pos:end="55:28"><name pos:start="55:22" pos:end="55:28">dst_ref</name></expr></argument>, <argument pos:start="55:31" pos:end="55:31"><expr pos:start="55:31" pos:end="55:31"><name pos:start="55:31" pos:end="55:31">w</name></expr></argument>, <argument pos:start="55:34" pos:end="55:51"><expr pos:start="55:34" pos:end="55:51"><name pos:start="55:34" pos:end="55:36">src</name> <operator pos:start="55:38" pos:end="55:38">+</operator> <name pos:start="55:40" pos:end="55:51">WIDTH_PADDED</name></expr></argument>, <argument pos:start="55:54" pos:end="55:72"><expr pos:start="55:54" pos:end="55:72"><name pos:start="55:54" pos:end="55:57">mref</name> <operator pos:start="55:59" pos:end="55:59">-</operator> <name pos:start="55:61" pos:end="55:61">i</name><operator pos:start="55:62" pos:end="55:62">*</operator><name pos:start="55:63" pos:end="55:72">depth_byte</name></expr></argument>, <argument pos:start="55:75" pos:end="55:78"><expr pos:start="55:75" pos:end="55:78"><name pos:start="55:75" pos:end="55:78">pref</name></expr></argument>, <argument pos:start="55:81" pos:end="55:81"><expr pos:start="55:81" pos:end="55:81"><literal type="number" pos:start="55:81" pos:end="55:81">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:83"><expr pos:start="57:13" pos:end="57:82"><call pos:start="57:13" pos:end="57:82"><name pos:start="57:13" pos:end="57:20">call_new</name><argument_list pos:start="57:21" pos:end="57:82">(<argument pos:start="57:22" pos:end="57:28"><expr pos:start="57:22" pos:end="57:28"><name pos:start="57:22" pos:end="57:28">dst_new</name></expr></argument>, <argument pos:start="57:31" pos:end="57:31"><expr pos:start="57:31" pos:end="57:31"><name pos:start="57:31" pos:end="57:31">w</name></expr></argument>, <argument pos:start="57:34" pos:end="57:51"><expr pos:start="57:34" pos:end="57:51"><name pos:start="57:34" pos:end="57:36">src</name> <operator pos:start="57:38" pos:end="57:38">+</operator> <name pos:start="57:40" pos:end="57:51">WIDTH_PADDED</name></expr></argument>, <argument pos:start="57:54" pos:end="57:72"><expr pos:start="57:54" pos:end="57:72"><name pos:start="57:54" pos:end="57:57">mref</name> <operator pos:start="57:59" pos:end="57:59">-</operator> <name pos:start="57:61" pos:end="57:61">i</name><operator pos:start="57:62" pos:end="57:62">*</operator><name pos:start="57:63" pos:end="57:72">depth_byte</name></expr></argument>, <argument pos:start="57:75" pos:end="57:78"><expr pos:start="57:75" pos:end="57:78"><name pos:start="57:75" pos:end="57:78">pref</name></expr></argument>, <argument pos:start="57:81" pos:end="57:81"><expr pos:start="57:81" pos:end="57:81"><literal type="number" pos:start="57:81" pos:end="57:81">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="61:23"><if pos:start="59:13" pos:end="61:23">if <condition pos:start="59:16" pos:end="59:52">(<expr pos:start="59:17" pos:end="59:51"><call pos:start="59:17" pos:end="59:51"><name pos:start="59:17" pos:end="59:22">memcmp</name><argument_list pos:start="59:23" pos:end="59:51">(<argument pos:start="59:24" pos:end="59:30"><expr pos:start="59:24" pos:end="59:30"><name pos:start="59:24" pos:end="59:30">dst_ref</name></expr></argument>, <argument pos:start="59:33" pos:end="59:39"><expr pos:start="59:33" pos:end="59:39"><name pos:start="59:33" pos:end="59:39">dst_new</name></expr></argument>, <argument pos:start="59:42" pos:end="59:50"><expr pos:start="59:42" pos:end="59:50"><name pos:start="59:42" pos:end="59:46">WIDTH</name> <operator pos:start="59:48" pos:end="59:48">-</operator> <name pos:start="59:50" pos:end="59:50">i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:23"><block_content pos:start="61:17" pos:end="61:23">

                <expr_stmt pos:start="61:17" pos:end="61:23"><expr pos:start="61:17" pos:end="61:22"><call pos:start="61:17" pos:end="61:22"><name pos:start="61:17" pos:end="61:20">fail</name><argument_list pos:start="61:21" pos:end="61:22">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="65:9" pos:end="65:65"><expr pos:start="65:9" pos:end="65:64"><call pos:start="65:9" pos:end="65:64"><name pos:start="65:9" pos:end="65:17">bench_new</name><argument_list pos:start="65:18" pos:end="65:64">(<argument pos:start="65:19" pos:end="65:25"><expr pos:start="65:19" pos:end="65:25"><name pos:start="65:19" pos:end="65:25">dst_new</name></expr></argument>, <argument pos:start="65:28" pos:end="65:28"><expr pos:start="65:28" pos:end="65:28"><name pos:start="65:28" pos:end="65:28">w</name></expr></argument>, <argument pos:start="65:31" pos:end="65:48"><expr pos:start="65:31" pos:end="65:48"><name pos:start="65:31" pos:end="65:33">src</name> <operator pos:start="65:35" pos:end="65:35">+</operator> <name pos:start="65:37" pos:end="65:48">WIDTH_PADDED</name></expr></argument>, <argument pos:start="65:51" pos:end="65:54"><expr pos:start="65:51" pos:end="65:54"><name pos:start="65:51" pos:end="65:54">mref</name></expr></argument>, <argument pos:start="65:57" pos:end="65:60"><expr pos:start="65:57" pos:end="65:60"><name pos:start="65:57" pos:end="65:60">pref</name></expr></argument>, <argument pos:start="65:63" pos:end="65:63"><expr pos:start="65:63" pos:end="65:63"><literal type="number" pos:start="65:63" pos:end="65:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
