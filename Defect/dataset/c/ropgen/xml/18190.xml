<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18190.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:40"><name pos:start="1:1" pos:end="1:22">vcard_emul_mirror_card</name><argument_list pos:start="1:23" pos:end="1:40">(<argument pos:start="1:24" pos:end="1:39">VReader *vreader</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="147:1">{<block_content pos:start="13:5" pos:end="145:76">

    <comment type="block" pos:start="5:5" pos:end="11:7">/*

     * lookup certs using the C_FindObjects. The Stan Cert handle won't give

     * us the real certs until we log in.

     */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">PK11GenericObject</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:31">firstObj</name></decl>, <decl pos:start="13:34" pos:end="13:41"><type ref="prev" pos:start="13:5" pos:end="13:23"><modifier pos:start="13:34" pos:end="13:34">*</modifier></type><name pos:start="13:35" pos:end="13:41">thisObj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">cert_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:17">char</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier><modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:25">certs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:7">int</name> <modifier pos:start="19:9" pos:end="19:9">*</modifier></type><name pos:start="19:10" pos:end="19:17">cert_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:12">VCardKey</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier><modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:19">keys</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">PK11SlotInfo</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:22">slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:15"><decl pos:start="25:5" pos:end="25:14"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">PRBool</name></type> <name pos:start="25:12" pos:end="25:14">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:47"><expr pos:start="29:5" pos:end="29:46"><name pos:start="29:5" pos:end="29:8">slot</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:46"><name pos:start="29:12" pos:end="29:37">vcard_emul_reader_get_slot</name><argument_list pos:start="29:38" pos:end="29:46">(<argument pos:start="29:39" pos:end="29:45"><expr pos:start="29:39" pos:end="29:45"><name pos:start="29:39" pos:end="29:45">vreader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:21">(<expr pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:12">slot</name> <operator pos:start="31:14" pos:end="31:15">==</operator> <name pos:start="31:17" pos:end="31:20">NULL</name></expr>)</condition> <block pos:start="31:23" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:20">

        <return pos:start="33:9" pos:end="33:20">return <expr pos:start="33:16" pos:end="33:19"><name pos:start="33:16" pos:end="33:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:62"><expr pos:start="39:5" pos:end="39:61"><name pos:start="39:5" pos:end="39:12">firstObj</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <call pos:start="39:16" pos:end="39:61"><name pos:start="39:16" pos:end="39:38">PK11_FindGenericObjects</name><argument_list pos:start="39:39" pos:end="39:61">(<argument pos:start="39:40" pos:end="39:43"><expr pos:start="39:40" pos:end="39:43"><name pos:start="39:40" pos:end="39:43">slot</name></expr></argument>, <argument pos:start="39:46" pos:end="39:60"><expr pos:start="39:46" pos:end="39:60"><name pos:start="39:46" pos:end="39:60">CKO_CERTIFICATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:25">(<expr pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:16">firstObj</name> <operator pos:start="41:18" pos:end="41:19">==</operator> <name pos:start="41:21" pos:end="41:24">NULL</name></expr>)</condition> <block pos:start="41:27" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:20">

        <return pos:start="43:9" pos:end="43:20">return <expr pos:start="43:16" pos:end="43:19"><name pos:start="43:16" pos:end="43:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:25">/* count the certs */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:19"><expr pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:14">cert_count</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">0</literal></expr>;</expr_stmt>

    <for pos:start="53:5" pos:end="59:5">for <control pos:start="53:9" pos:end="55:74">(<init pos:start="53:10" pos:end="53:28"><expr pos:start="53:10" pos:end="53:27"><name pos:start="53:10" pos:end="53:16">thisObj</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:27">firstObj</name></expr>;</init> <condition pos:start="53:30" pos:end="53:37"><expr pos:start="53:30" pos:end="53:36"><name pos:start="53:30" pos:end="53:36">thisObj</name></expr>;</condition>

                             <incr pos:start="55:30" pos:end="55:73"><expr pos:start="55:30" pos:end="55:73"><name pos:start="55:30" pos:end="55:36">thisObj</name> <operator pos:start="55:38" pos:end="55:38">=</operator> <call pos:start="55:40" pos:end="55:73"><name pos:start="55:40" pos:end="55:64">PK11_GetNextGenericObject</name><argument_list pos:start="55:65" pos:end="55:73">(<argument pos:start="55:66" pos:end="55:72"><expr pos:start="55:66" pos:end="55:72"><name pos:start="55:66" pos:end="55:72">thisObj</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="55:76" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:21">

        <expr_stmt pos:start="57:9" pos:end="57:21"><expr pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:18">cert_count</name><operator pos:start="57:19" pos:end="57:20">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:24">(<expr pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:18">cert_count</name> <operator pos:start="63:20" pos:end="63:21">==</operator> <literal type="number" pos:start="63:23" pos:end="63:23">0</literal></expr>)</condition> <block pos:start="63:26" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:20">

        <expr_stmt pos:start="65:9" pos:end="65:45"><expr pos:start="65:9" pos:end="65:44"><call pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:34">PK11_DestroyGenericObjects</name><argument_list pos:start="65:35" pos:end="65:44">(<argument pos:start="65:36" pos:end="65:43"><expr pos:start="65:36" pos:end="65:43"><name pos:start="65:36" pos:end="65:43">firstObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:20">return <expr pos:start="67:16" pos:end="67:19"><name pos:start="67:16" pos:end="67:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:29">/* allocate the arrays */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:72"><expr pos:start="75:5" pos:end="75:71"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:71"><name pos:start="75:11" pos:end="75:33">vcard_emul_alloc_arrays</name><argument_list pos:start="75:34" pos:end="75:71">(<argument pos:start="75:35" pos:end="75:40"><expr pos:start="75:35" pos:end="75:40"><operator pos:start="75:35" pos:end="75:35">&amp;</operator><name pos:start="75:36" pos:end="75:40">certs</name></expr></argument>, <argument pos:start="75:43" pos:end="75:51"><expr pos:start="75:43" pos:end="75:51"><operator pos:start="75:43" pos:end="75:43">&amp;</operator><name pos:start="75:44" pos:end="75:51">cert_len</name></expr></argument>, <argument pos:start="75:54" pos:end="75:58"><expr pos:start="75:54" pos:end="75:58"><operator pos:start="75:54" pos:end="75:54">&amp;</operator><name pos:start="75:55" pos:end="75:58">keys</name></expr></argument>, <argument pos:start="75:61" pos:end="75:70"><expr pos:start="75:61" pos:end="75:70"><name pos:start="75:61" pos:end="75:70">cert_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:24">(<expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:14">==</operator> <name pos:start="77:16" pos:end="77:23">PR_FALSE</name></expr>)</condition> <block pos:start="77:26" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:20">

        <return pos:start="79:9" pos:end="79:20">return <expr pos:start="79:16" pos:end="79:19"><name pos:start="79:16" pos:end="79:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:28">/* fill in the arrays */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:19"><expr pos:start="87:5" pos:end="87:18"><name pos:start="87:5" pos:end="87:14">cert_count</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <literal type="number" pos:start="87:18" pos:end="87:18">0</literal></expr>;</expr_stmt>

    <for pos:start="89:5" pos:end="139:5">for <control pos:start="89:9" pos:end="91:74">(<init pos:start="89:10" pos:end="89:28"><expr pos:start="89:10" pos:end="89:27"><name pos:start="89:10" pos:end="89:16">thisObj</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <name pos:start="89:20" pos:end="89:27">firstObj</name></expr>;</init> <condition pos:start="89:30" pos:end="89:37"><expr pos:start="89:30" pos:end="89:36"><name pos:start="89:30" pos:end="89:36">thisObj</name></expr>;</condition>

                             <incr pos:start="91:30" pos:end="91:73"><expr pos:start="91:30" pos:end="91:73"><name pos:start="91:30" pos:end="91:36">thisObj</name> <operator pos:start="91:38" pos:end="91:38">=</operator> <call pos:start="91:40" pos:end="91:73"><name pos:start="91:40" pos:end="91:64">PK11_GetNextGenericObject</name><argument_list pos:start="91:65" pos:end="91:73">(<argument pos:start="91:66" pos:end="91:72"><expr pos:start="91:66" pos:end="91:72"><name pos:start="91:66" pos:end="91:72">thisObj</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="91:76" pos:end="139:5">{<block_content pos:start="93:9" pos:end="137:38">

        <decl_stmt pos:start="93:9" pos:end="93:24"><decl pos:start="93:9" pos:end="93:23"><type pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:15">SECItem</name></type> <name pos:start="93:17" pos:end="93:23">derCert</name></decl>;</decl_stmt>

        <decl_stmt pos:start="95:9" pos:end="95:30"><decl pos:start="95:9" pos:end="95:29"><type pos:start="95:9" pos:end="95:25"><name pos:start="95:9" pos:end="95:23">CERTCertificate</name> <modifier pos:start="95:25" pos:end="95:25">*</modifier></type><name pos:start="95:26" pos:end="95:29">cert</name></decl>;</decl_stmt>

        <decl_stmt pos:start="97:9" pos:end="97:21"><decl pos:start="97:9" pos:end="97:20"><type pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:17">SECStatus</name></type> <name pos:start="97:19" pos:end="97:20">rv</name></decl>;</decl_stmt>



        <expr_stmt pos:start="101:9" pos:end="103:56"><expr pos:start="101:9" pos:end="103:55"><name pos:start="101:9" pos:end="101:10">rv</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <call pos:start="101:14" pos:end="103:55"><name pos:start="101:14" pos:end="101:34">PK11_ReadRawAttribute</name><argument_list pos:start="101:35" pos:end="103:55">(<argument pos:start="101:36" pos:end="101:51"><expr pos:start="101:36" pos:end="101:51"><name pos:start="101:36" pos:end="101:51">PK11_TypeGeneric</name></expr></argument>, <argument pos:start="101:54" pos:end="101:60"><expr pos:start="101:54" pos:end="101:60"><name pos:start="101:54" pos:end="101:60">thisObj</name></expr></argument>,

                                   <argument pos:start="103:36" pos:end="103:44"><expr pos:start="103:36" pos:end="103:44"><name pos:start="103:36" pos:end="103:44">CKA_VALUE</name></expr></argument>, <argument pos:start="103:47" pos:end="103:54"><expr pos:start="103:47" pos:end="103:54"><operator pos:start="103:47" pos:end="103:47">&amp;</operator><name pos:start="103:48" pos:end="103:54">derCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:29">(<expr pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:14">rv</name> <operator pos:start="105:16" pos:end="105:17">!=</operator> <name pos:start="105:19" pos:end="105:28">SECSuccess</name></expr>)</condition> <block pos:start="105:31" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:21">

            <continue pos:start="107:13" pos:end="107:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="111:9" pos:end="113:39">/* create floating temp cert. This gives us a cert structure even if

         * the token isn't logged in */</comment>

        <expr_stmt pos:start="115:9" pos:end="117:64"><expr pos:start="115:9" pos:end="117:63"><name pos:start="115:9" pos:end="115:12">cert</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <call pos:start="115:16" pos:end="117:63"><name pos:start="115:16" pos:end="115:38">CERT_NewTempCertificate</name><argument_list pos:start="115:39" pos:end="117:63">(<argument pos:start="115:40" pos:end="115:62"><expr pos:start="115:40" pos:end="115:62"><call pos:start="115:40" pos:end="115:62"><name pos:start="115:40" pos:end="115:60">CERT_GetDefaultCertDB</name><argument_list pos:start="115:61" pos:end="115:62">()</argument_list></call></expr></argument>, <argument pos:start="115:65" pos:end="115:72"><expr pos:start="115:65" pos:end="115:72"><operator pos:start="115:65" pos:end="115:65">&amp;</operator><name pos:start="115:66" pos:end="115:72">derCert</name></expr></argument>,

                                       <argument pos:start="117:40" pos:end="117:43"><expr pos:start="117:40" pos:end="117:43"><name pos:start="117:40" pos:end="117:43">NULL</name></expr></argument>, <argument pos:start="117:46" pos:end="117:53"><expr pos:start="117:46" pos:end="117:53"><name pos:start="117:46" pos:end="117:53">PR_FALSE</name></expr></argument>, <argument pos:start="117:56" pos:end="117:62"><expr pos:start="117:56" pos:end="117:62"><name pos:start="117:56" pos:end="117:62">PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:45"><expr pos:start="119:9" pos:end="119:44"><call pos:start="119:9" pos:end="119:44"><name pos:start="119:9" pos:end="119:24">SECITEM_FreeItem</name><argument_list pos:start="119:25" pos:end="119:44">(<argument pos:start="119:26" pos:end="119:33"><expr pos:start="119:26" pos:end="119:33"><operator pos:start="119:26" pos:end="119:26">&amp;</operator><name pos:start="119:27" pos:end="119:33">derCert</name></expr></argument>, <argument pos:start="119:36" pos:end="119:43"><expr pos:start="119:36" pos:end="119:43"><name pos:start="119:36" pos:end="119:43">PR_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="125:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:25">(<expr pos:start="121:13" pos:end="121:24"><name pos:start="121:13" pos:end="121:16">cert</name> <operator pos:start="121:18" pos:end="121:19">==</operator> <name pos:start="121:21" pos:end="121:24">NULL</name></expr>)</condition> <block pos:start="121:27" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:21">

            <continue pos:start="123:13" pos:end="123:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:47"><expr pos:start="129:9" pos:end="129:46"><name pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:13">certs</name><index pos:start="129:14" pos:end="129:25">[<expr pos:start="129:15" pos:end="129:24"><name pos:start="129:15" pos:end="129:24">cert_count</name></expr>]</index></name> <operator pos:start="129:27" pos:end="129:27">=</operator> <name pos:start="129:29" pos:end="129:46"><name pos:start="129:29" pos:end="129:32">cert</name><operator pos:start="129:33" pos:end="129:34">-&gt;</operator><name pos:start="129:35" pos:end="129:41">derCert</name><operator pos:start="129:42" pos:end="129:42">.</operator><name pos:start="129:43" pos:end="129:46">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:49"><expr pos:start="131:9" pos:end="131:48"><name pos:start="131:9" pos:end="131:28"><name pos:start="131:9" pos:end="131:16">cert_len</name><index pos:start="131:17" pos:end="131:28">[<expr pos:start="131:18" pos:end="131:27"><name pos:start="131:18" pos:end="131:27">cert_count</name></expr>]</index></name> <operator pos:start="131:30" pos:end="131:30">=</operator> <name pos:start="131:32" pos:end="131:48"><name pos:start="131:32" pos:end="131:35">cert</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:44">derCert</name><operator pos:start="131:45" pos:end="131:45">.</operator><name pos:start="131:46" pos:end="131:48">len</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:59"><expr pos:start="133:9" pos:end="133:58"><name pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:12">keys</name><index pos:start="133:13" pos:end="133:24">[<expr pos:start="133:14" pos:end="133:23"><name pos:start="133:14" pos:end="133:23">cert_count</name></expr>]</index></name> <operator pos:start="133:26" pos:end="133:26">=</operator> <call pos:start="133:28" pos:end="133:58"><name pos:start="133:28" pos:end="133:46">vcard_emul_make_key</name><argument_list pos:start="133:47" pos:end="133:58">(<argument pos:start="133:48" pos:end="133:51"><expr pos:start="133:48" pos:end="133:51"><name pos:start="133:48" pos:end="133:51">slot</name></expr></argument>, <argument pos:start="133:54" pos:end="133:57"><expr pos:start="133:54" pos:end="133:57"><name pos:start="133:54" pos:end="133:57">cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:21"><expr pos:start="135:9" pos:end="135:20"><name pos:start="135:9" pos:end="135:18">cert_count</name><operator pos:start="135:19" pos:end="135:20">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:38"><expr pos:start="137:9" pos:end="137:37"><call pos:start="137:9" pos:end="137:37"><name pos:start="137:9" pos:end="137:31">CERT_DestroyCertificate</name><argument_list pos:start="137:32" pos:end="137:37">(<argument pos:start="137:33" pos:end="137:36"><expr pos:start="137:33" pos:end="137:36"><name pos:start="137:33" pos:end="137:36">cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="137:40" pos:end="137:74">/* key obj still has a reference */</comment>

    </block_content>}</block></for>



    <comment type="block" pos:start="143:5" pos:end="143:29">/* now create the card */</comment>

    <return pos:start="145:5" pos:end="145:76">return <expr pos:start="145:12" pos:end="145:75"><call pos:start="145:12" pos:end="145:75"><name pos:start="145:12" pos:end="145:31">vcard_emul_make_card</name><argument_list pos:start="145:32" pos:end="145:75">(<argument pos:start="145:33" pos:end="145:39"><expr pos:start="145:33" pos:end="145:39"><name pos:start="145:33" pos:end="145:39">vreader</name></expr></argument>, <argument pos:start="145:42" pos:end="145:46"><expr pos:start="145:42" pos:end="145:46"><name pos:start="145:42" pos:end="145:46">certs</name></expr></argument>, <argument pos:start="145:49" pos:end="145:56"><expr pos:start="145:49" pos:end="145:56"><name pos:start="145:49" pos:end="145:56">cert_len</name></expr></argument>, <argument pos:start="145:59" pos:end="145:62"><expr pos:start="145:59" pos:end="145:62"><name pos:start="145:59" pos:end="145:62">keys</name></expr></argument>, <argument pos:start="145:65" pos:end="145:74"><expr pos:start="145:65" pos:end="145:74"><name pos:start="145:65" pos:end="145:74">cert_count</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>
</unit>
