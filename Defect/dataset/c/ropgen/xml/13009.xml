<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13009.c" pos:tabs="8"><function pos:start="1:1" pos:end="433:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:30">h263_decode_picture_header</name><parameter_list pos:start="1:31" pos:end="1:49">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:45">MpegEncContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="433:1">{<block_content pos:start="5:5" pos:end="431:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">format</name></decl>, <decl pos:start="5:17" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:21">width</name></decl>, <decl pos:start="5:24" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:24" pos:end="5:29">height</name></decl>, <decl pos:start="5:32" pos:end="5:32"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:32" pos:end="5:32">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:22">startcode</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="11:5" pos:end="11:27"><expr pos:start="11:5" pos:end="11:26"><call pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:18">align_get_bits</name><argument_list pos:start="11:19" pos:end="11:26">(<argument pos:start="11:20" pos:end="11:25"><expr pos:start="11:20" pos:end="11:25"><operator pos:start="11:20" pos:end="11:20">&amp;</operator><name pos:start="11:21" pos:end="11:25"><name pos:start="11:21" pos:end="11:21">s</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:13">startcode</name><operator pos:start="15:14" pos:end="15:14">=</operator> <call pos:start="15:16" pos:end="15:37"><name pos:start="15:16" pos:end="15:23">get_bits</name><argument_list pos:start="15:24" pos:end="15:37">(<argument pos:start="15:25" pos:end="15:30"><expr pos:start="15:25" pos:end="15:30"><operator pos:start="15:25" pos:end="15:25">&amp;</operator><name pos:start="15:26" pos:end="15:30"><name pos:start="15:26" pos:end="15:26">s</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:30">gb</name></name></expr></argument>, <argument pos:start="15:33" pos:end="15:36"><expr pos:start="15:33" pos:end="15:36"><literal type="number" pos:start="15:33" pos:end="15:35">22</literal><operator pos:start="15:35" pos:end="15:35">-</operator><literal type="number" pos:start="15:36" pos:end="15:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="19:5" pos:end="29:5">for<control pos:start="19:8" pos:end="19:67">(<init pos:start="19:9" pos:end="19:55"><expr pos:start="19:9" pos:end="19:54"><name pos:start="19:9" pos:end="19:9">i</name><operator pos:start="19:10" pos:end="19:10">=</operator> <name pos:start="19:12" pos:end="19:29"><name pos:start="19:12" pos:end="19:12">s</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:16">gb</name><operator pos:start="19:17" pos:end="19:17">.</operator><name pos:start="19:18" pos:end="19:29">size_in_bits</name></name> <operator pos:start="19:31" pos:end="19:31">-</operator> <call pos:start="19:33" pos:end="19:54"><name pos:start="19:33" pos:end="19:46">get_bits_count</name><argument_list pos:start="19:47" pos:end="19:54">(<argument pos:start="19:48" pos:end="19:53"><expr pos:start="19:48" pos:end="19:53"><operator pos:start="19:48" pos:end="19:48">&amp;</operator><name pos:start="19:49" pos:end="19:53"><name pos:start="19:49" pos:end="19:49">s</name><operator pos:start="19:50" pos:end="19:51">-&gt;</operator><name pos:start="19:52" pos:end="19:53">gb</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="19:57" pos:end="19:61"><expr pos:start="19:57" pos:end="19:60"><name pos:start="19:57" pos:end="19:57">i</name><operator pos:start="19:58" pos:end="19:58">&gt;</operator><literal type="number" pos:start="19:59" pos:end="19:60">24</literal></expr>;</condition> <incr pos:start="19:63" pos:end="19:66"><expr pos:start="19:63" pos:end="19:66"><name pos:start="19:63" pos:end="19:63">i</name><operator pos:start="19:64" pos:end="19:65">-=</operator><literal type="number" pos:start="19:66" pos:end="19:66">8</literal></expr></incr>)</control> <block pos:start="19:69" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:18">

        <expr_stmt pos:start="21:9" pos:end="21:74"><expr pos:start="21:9" pos:end="21:73"><name pos:start="21:9" pos:end="21:17">startcode</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <operator pos:start="21:21" pos:end="21:21">(</operator><operator pos:start="21:22" pos:end="21:22">(</operator><name pos:start="21:23" pos:end="21:31">startcode</name> <operator pos:start="21:33" pos:end="21:34">&lt;&lt;</operator> <literal type="number" pos:start="21:36" pos:end="21:36">8</literal><operator pos:start="21:37" pos:end="21:37">)</operator> <operator pos:start="21:39" pos:end="21:39">|</operator> <call pos:start="21:41" pos:end="21:59"><name pos:start="21:41" pos:end="21:48">get_bits</name><argument_list pos:start="21:49" pos:end="21:59">(<argument pos:start="21:50" pos:end="21:55"><expr pos:start="21:50" pos:end="21:55"><operator pos:start="21:50" pos:end="21:50">&amp;</operator><name pos:start="21:51" pos:end="21:55"><name pos:start="21:51" pos:end="21:51">s</name><operator pos:start="21:52" pos:end="21:53">-&gt;</operator><name pos:start="21:54" pos:end="21:55">gb</name></name></expr></argument>, <argument pos:start="21:58" pos:end="21:58"><expr pos:start="21:58" pos:end="21:58"><literal type="number" pos:start="21:58" pos:end="21:58">8</literal></expr></argument>)</argument_list></call><operator pos:start="21:60" pos:end="21:60">)</operator> <operator pos:start="21:62" pos:end="21:62">&amp;</operator> <literal type="number" pos:start="21:64" pos:end="21:73">0x003FFFFF</literal></expr>;</expr_stmt>

        

        <if_stmt pos:start="25:9" pos:end="27:18"><if pos:start="25:9" pos:end="27:18">if<condition pos:start="25:11" pos:end="25:29">(<expr pos:start="25:12" pos:end="25:28"><name pos:start="25:12" pos:end="25:20">startcode</name> <operator pos:start="25:22" pos:end="25:23">==</operator> <literal type="number" pos:start="25:25" pos:end="25:28">0x20</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:18"><block_content pos:start="27:13" pos:end="27:18">

            <break pos:start="27:13" pos:end="27:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>

        

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:26">(<expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:17">startcode</name> <operator pos:start="33:19" pos:end="33:20">!=</operator> <literal type="number" pos:start="33:22" pos:end="33:25">0x20</literal></expr>)</condition> <block pos:start="33:28" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:18">

        <expr_stmt pos:start="35:9" pos:end="35:67"><expr pos:start="35:9" pos:end="35:66"><call pos:start="35:9" pos:end="35:66"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:66">(<argument pos:start="35:16" pos:end="35:23"><expr pos:start="35:16" pos:end="35:23"><name pos:start="35:16" pos:end="35:23"><name pos:start="35:16" pos:end="35:16">s</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:23">avctx</name></name></expr></argument>, <argument pos:start="35:26" pos:end="35:37"><expr pos:start="35:26" pos:end="35:37"><name pos:start="35:26" pos:end="35:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:40" pos:end="35:65"><expr pos:start="35:40" pos:end="35:65"><literal type="string" pos:start="35:40" pos:end="35:65">"Bad picture start code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="41:5" pos:end="41:28">/* temporal reference */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:44"><expr pos:start="43:5" pos:end="43:43"><name pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:21">picture_number</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <call pos:start="43:25" pos:end="43:43"><name pos:start="43:25" pos:end="43:32">get_bits</name><argument_list pos:start="43:33" pos:end="43:43">(<argument pos:start="43:34" pos:end="43:39"><expr pos:start="43:34" pos:end="43:39"><operator pos:start="43:34" pos:end="43:34">&amp;</operator><name pos:start="43:35" pos:end="43:39"><name pos:start="43:35" pos:end="43:35">s</name><operator pos:start="43:36" pos:end="43:37">-&gt;</operator><name pos:start="43:38" pos:end="43:39">gb</name></name></expr></argument>, <argument pos:start="43:42" pos:end="43:42"><expr pos:start="43:42" pos:end="43:42"><literal type="number" pos:start="43:42" pos:end="43:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="43:46" pos:end="43:68">/* picture timestamp */</comment>



    <comment type="block" pos:start="47:5" pos:end="47:27">/* PTYPE starts here */</comment>    

    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:31">(<expr pos:start="49:9" pos:end="49:30"><call pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:17">get_bits1</name><argument_list pos:start="49:18" pos:end="49:25">(<argument pos:start="49:19" pos:end="49:24"><expr pos:start="49:19" pos:end="49:24"><operator pos:start="49:19" pos:end="49:19">&amp;</operator><name pos:start="49:20" pos:end="49:24"><name pos:start="49:20" pos:end="49:20">s</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:24">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="49:27" pos:end="49:28">!=</operator> <literal type="number" pos:start="49:30" pos:end="49:30">1</literal></expr>)</condition> <block pos:start="49:33" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:18">

        <comment type="block" pos:start="51:9" pos:end="51:20">/* marker */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:55"><expr pos:start="53:9" pos:end="53:54"><call pos:start="53:9" pos:end="53:54"><name pos:start="53:9" pos:end="53:14">av_log</name><argument_list pos:start="53:15" pos:end="53:54">(<argument pos:start="53:16" pos:end="53:23"><expr pos:start="53:16" pos:end="53:23"><name pos:start="53:16" pos:end="53:23"><name pos:start="53:16" pos:end="53:16">s</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:23">avctx</name></name></expr></argument>, <argument pos:start="53:26" pos:end="53:37"><expr pos:start="53:26" pos:end="53:37"><name pos:start="53:26" pos:end="53:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:40" pos:end="53:53"><expr pos:start="53:40" pos:end="53:53"><literal type="string" pos:start="53:40" pos:end="53:53">"Bad marker\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:18">return <expr pos:start="55:16" pos:end="55:17"><operator pos:start="55:16" pos:end="55:16">-</operator><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:31">(<expr pos:start="59:9" pos:end="59:30"><call pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:17">get_bits1</name><argument_list pos:start="59:18" pos:end="59:25">(<argument pos:start="59:19" pos:end="59:24"><expr pos:start="59:19" pos:end="59:24"><operator pos:start="59:19" pos:end="59:19">&amp;</operator><name pos:start="59:20" pos:end="59:24"><name pos:start="59:20" pos:end="59:20">s</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:24">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:27" pos:end="59:28">!=</operator> <literal type="number" pos:start="59:30" pos:end="59:30">0</literal></expr>)</condition> <block pos:start="59:33" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:18">

        <expr_stmt pos:start="61:9" pos:end="61:56"><expr pos:start="61:9" pos:end="61:55"><call pos:start="61:9" pos:end="61:55"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:55">(<argument pos:start="61:16" pos:end="61:23"><expr pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:16">s</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:23">avctx</name></name></expr></argument>, <argument pos:start="61:26" pos:end="61:37"><expr pos:start="61:26" pos:end="61:37"><name pos:start="61:26" pos:end="61:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:40" pos:end="61:54"><expr pos:start="61:40" pos:end="61:54"><literal type="string" pos:start="61:40" pos:end="61:54">"Bad H263 id\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:18">return <expr pos:start="63:16" pos:end="63:17"><operator pos:start="63:16" pos:end="63:16">-</operator><literal type="number" pos:start="63:17" pos:end="63:17">1</literal></expr>;</return>	<comment type="block" pos:start="63:25" pos:end="63:37">/* h263 id */</comment>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:23"><expr pos:start="67:5" pos:end="67:22"><call pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:14">skip_bits1</name><argument_list pos:start="67:15" pos:end="67:22">(<argument pos:start="67:16" pos:end="67:21"><expr pos:start="67:16" pos:end="67:21"><operator pos:start="67:16" pos:end="67:16">&amp;</operator><name pos:start="67:17" pos:end="67:21"><name pos:start="67:17" pos:end="67:17">s</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:21">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="67:25" pos:end="67:46">/* split screen off */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:23"><expr pos:start="69:5" pos:end="69:22"><call pos:start="69:5" pos:end="69:22"><name pos:start="69:5" pos:end="69:14">skip_bits1</name><argument_list pos:start="69:15" pos:end="69:22">(<argument pos:start="69:16" pos:end="69:21"><expr pos:start="69:16" pos:end="69:21"><operator pos:start="69:16" pos:end="69:16">&amp;</operator><name pos:start="69:17" pos:end="69:21"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:21">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="69:25" pos:end="69:41">/* camera  off */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:23"><expr pos:start="71:5" pos:end="71:22"><call pos:start="71:5" pos:end="71:22"><name pos:start="71:5" pos:end="71:14">skip_bits1</name><argument_list pos:start="71:15" pos:end="71:22">(<argument pos:start="71:16" pos:end="71:21"><expr pos:start="71:16" pos:end="71:21"><operator pos:start="71:16" pos:end="71:16">&amp;</operator><name pos:start="71:17" pos:end="71:21"><name pos:start="71:17" pos:end="71:17">s</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:21">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="71:25" pos:end="71:56">/* freeze picture release off */</comment>



    <comment type="block" pos:start="75:5" pos:end="75:26">/* Reset GOB number */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:22"><expr pos:start="77:5" pos:end="77:21"><name pos:start="77:5" pos:end="77:17"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:17">gob_number</name></name> <operator pos:start="77:19" pos:end="77:19">=</operator> <literal type="number" pos:start="77:21" pos:end="77:21">0</literal></expr>;</expr_stmt>

        

    <expr_stmt pos:start="81:5" pos:end="81:33"><expr pos:start="81:5" pos:end="81:32"><name pos:start="81:5" pos:end="81:10">format</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <call pos:start="81:14" pos:end="81:32"><name pos:start="81:14" pos:end="81:21">get_bits</name><argument_list pos:start="81:22" pos:end="81:32">(<argument pos:start="81:23" pos:end="81:28"><expr pos:start="81:23" pos:end="81:28"><operator pos:start="81:23" pos:end="81:23">&amp;</operator><name pos:start="81:24" pos:end="81:28"><name pos:start="81:24" pos:end="81:24">s</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:28">gb</name></name></expr></argument>, <argument pos:start="81:31" pos:end="81:31"><expr pos:start="81:31" pos:end="81:31"><literal type="number" pos:start="81:31" pos:end="81:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="83:5" pos:end="93:6">/*

        0    forbidden

        1    sub-QCIF

        10   QCIF

        7	extended PTYPE (PLUSPTYPE)

    */</comment>



    <if_stmt pos:start="97:5" pos:end="341:5"><if pos:start="97:5" pos:end="153:5">if <condition pos:start="97:8" pos:end="97:35">(<expr pos:start="97:9" pos:end="97:34"><name pos:start="97:9" pos:end="97:14">format</name> <operator pos:start="97:16" pos:end="97:17">!=</operator> <literal type="number" pos:start="97:19" pos:end="97:19">7</literal> <operator pos:start="97:21" pos:end="97:22">&amp;&amp;</operator> <name pos:start="97:24" pos:end="97:29">format</name> <operator pos:start="97:31" pos:end="97:32">!=</operator> <literal type="number" pos:start="97:34" pos:end="97:34">6</literal></expr>)</condition> <block pos:start="97:37" pos:end="153:5">{<block_content pos:start="99:9" pos:end="151:27">

        <expr_stmt pos:start="99:9" pos:end="99:25"><expr pos:start="99:9" pos:end="99:24"><name pos:start="99:9" pos:end="99:20"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:20">h263_plus</name></name> <operator pos:start="99:22" pos:end="99:22">=</operator> <literal type="number" pos:start="99:24" pos:end="99:24">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="101:9" pos:end="101:21">/* H.263v1 */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:39"><expr pos:start="103:9" pos:end="103:38"><name pos:start="103:9" pos:end="103:13">width</name> <operator pos:start="103:15" pos:end="103:15">=</operator> <name pos:start="103:17" pos:end="103:38"><name pos:start="103:17" pos:end="103:27">h263_format</name><index pos:start="103:28" pos:end="103:35">[<expr pos:start="103:29" pos:end="103:34"><name pos:start="103:29" pos:end="103:34">format</name></expr>]</index><index pos:start="103:36" pos:end="103:38">[<expr pos:start="103:37" pos:end="103:37"><literal type="number" pos:start="103:37" pos:end="103:37">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:40"><expr pos:start="105:9" pos:end="105:39"><name pos:start="105:9" pos:end="105:14">height</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <name pos:start="105:18" pos:end="105:39"><name pos:start="105:18" pos:end="105:28">h263_format</name><index pos:start="105:29" pos:end="105:36">[<expr pos:start="105:30" pos:end="105:35"><name pos:start="105:30" pos:end="105:35">format</name></expr>]</index><index pos:start="105:37" pos:end="105:39">[<expr pos:start="105:38" pos:end="105:38"><literal type="number" pos:start="105:38" pos:end="105:38">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="109:22"><if pos:start="107:9" pos:end="109:22">if <condition pos:start="107:12" pos:end="107:19">(<expr pos:start="107:13" pos:end="107:18"><operator pos:start="107:13" pos:end="107:13">!</operator><name pos:start="107:14" pos:end="107:18">width</name></expr>)</condition><block type="pseudo" pos:start="109:13" pos:end="109:22"><block_content pos:start="109:13" pos:end="109:22">

            <return pos:start="109:13" pos:end="109:22">return <expr pos:start="109:20" pos:end="109:21"><operator pos:start="109:20" pos:end="109:20">-</operator><literal type="number" pos:start="109:21" pos:end="109:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        

        <expr_stmt pos:start="113:9" pos:end="113:50"><expr pos:start="113:9" pos:end="113:49"><name pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:9">s</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:20">pict_type</name></name> <operator pos:start="113:22" pos:end="113:22">=</operator> <name pos:start="113:24" pos:end="113:29">I_TYPE</name> <operator pos:start="113:31" pos:end="113:31">+</operator> <call pos:start="113:33" pos:end="113:49"><name pos:start="113:33" pos:end="113:41">get_bits1</name><argument_list pos:start="113:42" pos:end="113:49">(<argument pos:start="113:43" pos:end="113:48"><expr pos:start="113:43" pos:end="113:48"><operator pos:start="113:43" pos:end="113:43">&amp;</operator><name pos:start="113:44" pos:end="113:48"><name pos:start="113:44" pos:end="113:44">s</name><operator pos:start="113:45" pos:end="113:46">-&gt;</operator><name pos:start="113:47" pos:end="113:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:49"><expr pos:start="117:9" pos:end="117:48"><name pos:start="117:9" pos:end="117:28"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:28">h263_long_vectors</name></name> <operator pos:start="117:30" pos:end="117:30">=</operator> <call pos:start="117:32" pos:end="117:48"><name pos:start="117:32" pos:end="117:40">get_bits1</name><argument_list pos:start="117:41" pos:end="117:48">(<argument pos:start="117:42" pos:end="117:47"><expr pos:start="117:42" pos:end="117:47"><operator pos:start="117:42" pos:end="117:42">&amp;</operator><name pos:start="117:43" pos:end="117:47"><name pos:start="117:43" pos:end="117:43">s</name><operator pos:start="117:44" pos:end="117:45">-&gt;</operator><name pos:start="117:46" pos:end="117:47">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:35">(<expr pos:start="121:13" pos:end="121:34"><call pos:start="121:13" pos:end="121:29"><name pos:start="121:13" pos:end="121:21">get_bits1</name><argument_list pos:start="121:22" pos:end="121:29">(<argument pos:start="121:23" pos:end="121:28"><expr pos:start="121:23" pos:end="121:28"><operator pos:start="121:23" pos:end="121:23">&amp;</operator><name pos:start="121:24" pos:end="121:28"><name pos:start="121:24" pos:end="121:24">s</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="121:31" pos:end="121:32">!=</operator> <literal type="number" pos:start="121:34" pos:end="121:34">0</literal></expr>)</condition> <block pos:start="121:37" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:22">

            <expr_stmt pos:start="123:13" pos:end="123:71"><expr pos:start="123:13" pos:end="123:70"><call pos:start="123:13" pos:end="123:70"><name pos:start="123:13" pos:end="123:18">av_log</name><argument_list pos:start="123:19" pos:end="123:70">(<argument pos:start="123:20" pos:end="123:27"><expr pos:start="123:20" pos:end="123:27"><name pos:start="123:20" pos:end="123:27"><name pos:start="123:20" pos:end="123:20">s</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:27">avctx</name></name></expr></argument>, <argument pos:start="123:30" pos:end="123:41"><expr pos:start="123:30" pos:end="123:41"><name pos:start="123:30" pos:end="123:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="123:44" pos:end="123:69"><expr pos:start="123:44" pos:end="123:69"><literal type="string" pos:start="123:44" pos:end="123:69">"H263 SAC not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="125:13" pos:end="125:22">return <expr pos:start="125:20" pos:end="125:21"><operator pos:start="125:20" pos:end="125:20">-</operator><literal type="number" pos:start="125:21" pos:end="125:21">1</literal></expr>;</return>	<comment type="block" pos:start="125:25" pos:end="125:38">/* SAC: off */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:35"><expr pos:start="129:9" pos:end="129:34"><name pos:start="129:9" pos:end="129:15"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:15">obmc</name></name><operator pos:start="129:16" pos:end="129:16">=</operator> <call pos:start="129:18" pos:end="129:34"><name pos:start="129:18" pos:end="129:26">get_bits1</name><argument_list pos:start="129:27" pos:end="129:34">(<argument pos:start="129:28" pos:end="129:33"><expr pos:start="129:28" pos:end="129:33"><operator pos:start="129:28" pos:end="129:28">&amp;</operator><name pos:start="129:29" pos:end="129:33"><name pos:start="129:29" pos:end="129:29">s</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="129:37" pos:end="129:66">/* Advanced prediction mode */</comment>

        <expr_stmt pos:start="131:9" pos:end="131:61"><expr pos:start="131:9" pos:end="131:60"><name pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:26">unrestricted_mv</name></name> <operator pos:start="131:28" pos:end="131:28">=</operator> <name pos:start="131:30" pos:end="131:49"><name pos:start="131:30" pos:end="131:30">s</name><operator pos:start="131:31" pos:end="131:32">-&gt;</operator><name pos:start="131:33" pos:end="131:49">h263_long_vectors</name></name> <operator pos:start="131:51" pos:end="131:52">||</operator> <name pos:start="131:54" pos:end="131:60"><name pos:start="131:54" pos:end="131:54">s</name><operator pos:start="131:55" pos:end="131:56">-&gt;</operator><name pos:start="131:57" pos:end="131:60">obmc</name></name></expr>;</expr_stmt>

        

        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="135:35">(<expr pos:start="135:13" pos:end="135:34"><call pos:start="135:13" pos:end="135:29"><name pos:start="135:13" pos:end="135:21">get_bits1</name><argument_list pos:start="135:22" pos:end="135:29">(<argument pos:start="135:23" pos:end="135:28"><expr pos:start="135:23" pos:end="135:28"><operator pos:start="135:23" pos:end="135:23">&amp;</operator><name pos:start="135:24" pos:end="135:28"><name pos:start="135:24" pos:end="135:24">s</name><operator pos:start="135:25" pos:end="135:26">-&gt;</operator><name pos:start="135:27" pos:end="135:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="135:31" pos:end="135:32">!=</operator> <literal type="number" pos:start="135:34" pos:end="135:34">0</literal></expr>)</condition> <block pos:start="135:37" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:22">

            <expr_stmt pos:start="137:13" pos:end="137:76"><expr pos:start="137:13" pos:end="137:75"><call pos:start="137:13" pos:end="137:75"><name pos:start="137:13" pos:end="137:18">av_log</name><argument_list pos:start="137:19" pos:end="137:75">(<argument pos:start="137:20" pos:end="137:27"><expr pos:start="137:20" pos:end="137:27"><name pos:start="137:20" pos:end="137:27"><name pos:start="137:20" pos:end="137:20">s</name><operator pos:start="137:21" pos:end="137:22">-&gt;</operator><name pos:start="137:23" pos:end="137:27">avctx</name></name></expr></argument>, <argument pos:start="137:30" pos:end="137:41"><expr pos:start="137:30" pos:end="137:41"><name pos:start="137:30" pos:end="137:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="137:44" pos:end="137:74"><expr pos:start="137:44" pos:end="137:74"><literal type="string" pos:start="137:44" pos:end="137:74">"H263 PB frame not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="139:13" pos:end="139:22">return <expr pos:start="139:20" pos:end="139:21"><operator pos:start="139:20" pos:end="139:20">-</operator><literal type="number" pos:start="139:21" pos:end="139:21">1</literal></expr>;</return>	<comment type="block" pos:start="139:25" pos:end="139:42">/* not PB frame */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:40"><expr pos:start="143:9" pos:end="143:39"><name pos:start="143:9" pos:end="143:17"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:17">qscale</name></name> <operator pos:start="143:19" pos:end="143:19">=</operator> <call pos:start="143:21" pos:end="143:39"><name pos:start="143:21" pos:end="143:28">get_bits</name><argument_list pos:start="143:29" pos:end="143:39">(<argument pos:start="143:30" pos:end="143:35"><expr pos:start="143:30" pos:end="143:35"><operator pos:start="143:30" pos:end="143:30">&amp;</operator><name pos:start="143:31" pos:end="143:35"><name pos:start="143:31" pos:end="143:31">s</name><operator pos:start="143:32" pos:end="143:33">-&gt;</operator><name pos:start="143:34" pos:end="143:35">gb</name></name></expr></argument>, <argument pos:start="143:38" pos:end="143:38"><expr pos:start="143:38" pos:end="143:38"><literal type="number" pos:start="143:38" pos:end="143:38">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:27"><expr pos:start="145:9" pos:end="145:26"><call pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:18">skip_bits1</name><argument_list pos:start="145:19" pos:end="145:26">(<argument pos:start="145:20" pos:end="145:25"><expr pos:start="145:20" pos:end="145:25"><operator pos:start="145:20" pos:end="145:20">&amp;</operator><name pos:start="145:21" pos:end="145:25"><name pos:start="145:21" pos:end="145:21">s</name><operator pos:start="145:22" pos:end="145:23">-&gt;</operator><name pos:start="145:24" pos:end="145:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="145:33" pos:end="145:78">/* Continuous Presence Multipoint mode: off */</comment>



        <expr_stmt pos:start="149:9" pos:end="149:25"><expr pos:start="149:9" pos:end="149:24"><name pos:start="149:9" pos:end="149:16"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:16">width</name></name> <operator pos:start="149:18" pos:end="149:18">=</operator> <name pos:start="149:20" pos:end="149:24">width</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:27"><expr pos:start="151:9" pos:end="151:26"><name pos:start="151:9" pos:end="151:17"><name pos:start="151:9" pos:end="151:9">s</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:17">height</name></name> <operator pos:start="151:19" pos:end="151:19">=</operator> <name pos:start="151:21" pos:end="151:26">height</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="153:7" pos:end="341:5">else <block pos:start="153:12" pos:end="341:5">{<block_content pos:start="155:9" pos:end="339:40">

        <decl_stmt pos:start="155:9" pos:end="155:17"><decl pos:start="155:9" pos:end="155:16"><type pos:start="155:9" pos:end="155:11"><name pos:start="155:9" pos:end="155:11">int</name></type> <name pos:start="155:13" pos:end="155:16">ufep</name></decl>;</decl_stmt>

        

        <comment type="block" pos:start="159:9" pos:end="159:21">/* H.263v2 */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:25"><expr pos:start="161:9" pos:end="161:24"><name pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:20">h263_plus</name></name> <operator pos:start="161:22" pos:end="161:22">=</operator> <literal type="number" pos:start="161:24" pos:end="161:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:35"><expr pos:start="163:9" pos:end="163:34"><name pos:start="163:9" pos:end="163:12">ufep</name> <operator pos:start="163:14" pos:end="163:14">=</operator> <call pos:start="163:16" pos:end="163:34"><name pos:start="163:16" pos:end="163:23">get_bits</name><argument_list pos:start="163:24" pos:end="163:34">(<argument pos:start="163:25" pos:end="163:30"><expr pos:start="163:25" pos:end="163:30"><operator pos:start="163:25" pos:end="163:25">&amp;</operator><name pos:start="163:26" pos:end="163:30"><name pos:start="163:26" pos:end="163:26">s</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:30">gb</name></name></expr></argument>, <argument pos:start="163:33" pos:end="163:33"><expr pos:start="163:33" pos:end="163:33"><literal type="number" pos:start="163:33" pos:end="163:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="163:37" pos:end="163:68">/* Update Full Extended PTYPE */</comment>



        <comment type="block" pos:start="167:9" pos:end="167:50">/* ufep other than 0 and 1 are reserved */</comment>        

        <if_stmt pos:start="169:9" pos:end="233:9"><if pos:start="169:9" pos:end="227:9">if <condition pos:start="169:12" pos:end="169:22">(<expr pos:start="169:13" pos:end="169:21"><name pos:start="169:13" pos:end="169:16">ufep</name> <operator pos:start="169:18" pos:end="169:19">==</operator> <literal type="number" pos:start="169:21" pos:end="169:21">1</literal></expr>)</condition> <block pos:start="169:24" pos:end="227:9">{<block_content pos:start="173:13" pos:end="225:33">

            <comment type="block" pos:start="171:13" pos:end="171:25">/* OPPTYPE */</comment>       

            <expr_stmt pos:start="173:13" pos:end="173:41"><expr pos:start="173:13" pos:end="173:40"><name pos:start="173:13" pos:end="173:18">format</name> <operator pos:start="173:20" pos:end="173:20">=</operator> <call pos:start="173:22" pos:end="173:40"><name pos:start="173:22" pos:end="173:29">get_bits</name><argument_list pos:start="173:30" pos:end="173:40">(<argument pos:start="173:31" pos:end="173:36"><expr pos:start="173:31" pos:end="173:36"><operator pos:start="173:31" pos:end="173:31">&amp;</operator><name pos:start="173:32" pos:end="173:36"><name pos:start="173:32" pos:end="173:32">s</name><operator pos:start="173:33" pos:end="173:34">-&gt;</operator><name pos:start="173:35" pos:end="173:36">gb</name></name></expr></argument>, <argument pos:start="173:39" pos:end="173:39"><expr pos:start="173:39" pos:end="173:39"><literal type="number" pos:start="173:39" pos:end="173:39">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:52"><expr pos:start="175:13" pos:end="175:51"><call pos:start="175:13" pos:end="175:51"><name pos:start="175:13" pos:end="175:19">dprintf</name><argument_list pos:start="175:20" pos:end="175:51">(<argument pos:start="175:21" pos:end="175:42"><expr pos:start="175:21" pos:end="175:42"><literal type="string" pos:start="175:21" pos:end="175:42">"ufep=1, format: %d\n"</literal></expr></argument>, <argument pos:start="175:45" pos:end="175:50"><expr pos:start="175:45" pos:end="175:50"><name pos:start="175:45" pos:end="175:50">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:32"><expr pos:start="177:13" pos:end="177:31"><call pos:start="177:13" pos:end="177:31"><name pos:start="177:13" pos:end="177:21">skip_bits</name><argument_list pos:start="177:22" pos:end="177:31">(<argument pos:start="177:23" pos:end="177:28"><expr pos:start="177:23" pos:end="177:28"><operator pos:start="177:23" pos:end="177:23">&amp;</operator><name pos:start="177:24" pos:end="177:28"><name pos:start="177:24" pos:end="177:24">s</name><operator pos:start="177:25" pos:end="177:26">-&gt;</operator><name pos:start="177:27" pos:end="177:28">gb</name></name></expr></argument>,<argument pos:start="177:30" pos:end="177:30"><expr pos:start="177:30" pos:end="177:30"><literal type="number" pos:start="177:30" pos:end="177:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="177:34" pos:end="177:49">/* Custom PCF */</comment>

            <expr_stmt pos:start="179:13" pos:end="179:45"><expr pos:start="179:13" pos:end="179:44"><name pos:start="179:13" pos:end="179:22"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:22">umvplus</name></name> <operator pos:start="179:24" pos:end="179:24">=</operator> <call pos:start="179:26" pos:end="179:44"><name pos:start="179:26" pos:end="179:33">get_bits</name><argument_list pos:start="179:34" pos:end="179:44">(<argument pos:start="179:35" pos:end="179:40"><expr pos:start="179:35" pos:end="179:40"><operator pos:start="179:35" pos:end="179:35">&amp;</operator><name pos:start="179:36" pos:end="179:40"><name pos:start="179:36" pos:end="179:36">s</name><operator pos:start="179:37" pos:end="179:38">-&gt;</operator><name pos:start="179:39" pos:end="179:40">gb</name></name></expr></argument>, <argument pos:start="179:43" pos:end="179:43"><expr pos:start="179:43" pos:end="179:43"><literal type="number" pos:start="179:43" pos:end="179:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="179:47" pos:end="179:78">/* Unrestricted Motion Vector */</comment>

            <expr_stmt pos:start="181:13" pos:end="181:31"><expr pos:start="181:13" pos:end="181:30"><call pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:22">skip_bits1</name><argument_list pos:start="181:23" pos:end="181:30">(<argument pos:start="181:24" pos:end="181:29"><expr pos:start="181:24" pos:end="181:29"><operator pos:start="181:24" pos:end="181:24">&amp;</operator><name pos:start="181:25" pos:end="181:29"><name pos:start="181:25" pos:end="181:25">s</name><operator pos:start="181:26" pos:end="181:27">-&gt;</operator><name pos:start="181:28" pos:end="181:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="181:33" pos:end="181:74">/* Syntax-based Arithmetic Coding (SAC) */</comment>

            <expr_stmt pos:start="183:13" pos:end="183:39"><expr pos:start="183:13" pos:end="183:38"><name pos:start="183:13" pos:end="183:19"><name pos:start="183:13" pos:end="183:13">s</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:19">obmc</name></name><operator pos:start="183:20" pos:end="183:20">=</operator> <call pos:start="183:22" pos:end="183:38"><name pos:start="183:22" pos:end="183:30">get_bits1</name><argument_list pos:start="183:31" pos:end="183:38">(<argument pos:start="183:32" pos:end="183:37"><expr pos:start="183:32" pos:end="183:37"><operator pos:start="183:32" pos:end="183:32">&amp;</operator><name pos:start="183:33" pos:end="183:37"><name pos:start="183:33" pos:end="183:33">s</name><operator pos:start="183:34" pos:end="183:35">-&gt;</operator><name pos:start="183:36" pos:end="183:37">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="183:41" pos:end="183:70">/* Advanced prediction mode */</comment>

            <expr_stmt pos:start="185:13" pos:end="185:55"><expr pos:start="185:13" pos:end="185:54"><name pos:start="185:13" pos:end="185:30"><name pos:start="185:13" pos:end="185:13">s</name><operator pos:start="185:14" pos:end="185:15">-&gt;</operator><name pos:start="185:16" pos:end="185:30">unrestricted_mv</name></name> <operator pos:start="185:32" pos:end="185:32">=</operator> <name pos:start="185:34" pos:end="185:43"><name pos:start="185:34" pos:end="185:34">s</name><operator pos:start="185:35" pos:end="185:36">-&gt;</operator><name pos:start="185:37" pos:end="185:43">umvplus</name></name> <operator pos:start="185:45" pos:end="185:46">||</operator> <name pos:start="185:48" pos:end="185:54"><name pos:start="185:48" pos:end="185:48">s</name><operator pos:start="185:49" pos:end="185:50">-&gt;</operator><name pos:start="185:51" pos:end="185:54">obmc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:44"><expr pos:start="187:13" pos:end="187:43"><name pos:start="187:13" pos:end="187:23"><name pos:start="187:13" pos:end="187:13">s</name><operator pos:start="187:14" pos:end="187:15">-&gt;</operator><name pos:start="187:16" pos:end="187:23">h263_aic</name></name> <operator pos:start="187:25" pos:end="187:25">=</operator> <call pos:start="187:27" pos:end="187:43"><name pos:start="187:27" pos:end="187:35">get_bits1</name><argument_list pos:start="187:36" pos:end="187:43">(<argument pos:start="187:37" pos:end="187:42"><expr pos:start="187:37" pos:end="187:42"><operator pos:start="187:37" pos:end="187:37">&amp;</operator><name pos:start="187:38" pos:end="187:42"><name pos:start="187:38" pos:end="187:38">s</name><operator pos:start="187:39" pos:end="187:40">-&gt;</operator><name pos:start="187:41" pos:end="187:42">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="187:46" pos:end="187:78">/* Advanced Intra Coding (AIC) */</comment>

	    

            <if_stmt pos:start="191:13" pos:end="195:13"><if pos:start="191:13" pos:end="195:13">if <condition pos:start="191:16" pos:end="191:39">(<expr pos:start="191:17" pos:end="191:38"><call pos:start="191:17" pos:end="191:33"><name pos:start="191:17" pos:end="191:25">get_bits1</name><argument_list pos:start="191:26" pos:end="191:33">(<argument pos:start="191:27" pos:end="191:32"><expr pos:start="191:27" pos:end="191:32"><operator pos:start="191:27" pos:end="191:27">&amp;</operator><name pos:start="191:28" pos:end="191:32"><name pos:start="191:28" pos:end="191:28">s</name><operator pos:start="191:29" pos:end="191:30">-&gt;</operator><name pos:start="191:31" pos:end="191:32">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="191:35" pos:end="191:36">!=</operator> <literal type="number" pos:start="191:38" pos:end="191:38">0</literal></expr>)</condition> <block pos:start="191:41" pos:end="195:13">{<block_content pos:start="193:17" pos:end="193:84">

                <expr_stmt pos:start="193:17" pos:end="193:84"><expr pos:start="193:17" pos:end="193:83"><call pos:start="193:17" pos:end="193:83"><name pos:start="193:17" pos:end="193:22">av_log</name><argument_list pos:start="193:23" pos:end="193:83">(<argument pos:start="193:24" pos:end="193:31"><expr pos:start="193:24" pos:end="193:31"><name pos:start="193:24" pos:end="193:31"><name pos:start="193:24" pos:end="193:24">s</name><operator pos:start="193:25" pos:end="193:26">-&gt;</operator><name pos:start="193:27" pos:end="193:31">avctx</name></name></expr></argument>, <argument pos:start="193:34" pos:end="193:45"><expr pos:start="193:34" pos:end="193:45"><name pos:start="193:34" pos:end="193:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="193:48" pos:end="193:82"><expr pos:start="193:48" pos:end="193:82"><literal type="string" pos:start="193:48" pos:end="193:82">"Deblocking Filter not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="197:13" pos:end="201:13"><if pos:start="197:13" pos:end="201:13">if <condition pos:start="197:16" pos:end="197:39">(<expr pos:start="197:17" pos:end="197:38"><call pos:start="197:17" pos:end="197:33"><name pos:start="197:17" pos:end="197:25">get_bits1</name><argument_list pos:start="197:26" pos:end="197:33">(<argument pos:start="197:27" pos:end="197:32"><expr pos:start="197:27" pos:end="197:32"><operator pos:start="197:27" pos:end="197:27">&amp;</operator><name pos:start="197:28" pos:end="197:32"><name pos:start="197:28" pos:end="197:28">s</name><operator pos:start="197:29" pos:end="197:30">-&gt;</operator><name pos:start="197:31" pos:end="197:32">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="197:35" pos:end="197:36">!=</operator> <literal type="number" pos:start="197:38" pos:end="197:38">0</literal></expr>)</condition> <block pos:start="197:41" pos:end="201:13">{<block_content pos:start="199:17" pos:end="199:83">

                <expr_stmt pos:start="199:17" pos:end="199:83"><expr pos:start="199:17" pos:end="199:82"><call pos:start="199:17" pos:end="199:82"><name pos:start="199:17" pos:end="199:22">av_log</name><argument_list pos:start="199:23" pos:end="199:82">(<argument pos:start="199:24" pos:end="199:31"><expr pos:start="199:24" pos:end="199:31"><name pos:start="199:24" pos:end="199:31"><name pos:start="199:24" pos:end="199:24">s</name><operator pos:start="199:25" pos:end="199:26">-&gt;</operator><name pos:start="199:27" pos:end="199:31">avctx</name></name></expr></argument>, <argument pos:start="199:34" pos:end="199:45"><expr pos:start="199:34" pos:end="199:45"><name pos:start="199:34" pos:end="199:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="199:48" pos:end="199:81"><expr pos:start="199:48" pos:end="199:81"><literal type="string" pos:start="199:48" pos:end="199:81">"Slice Structured not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="203:13" pos:end="207:13"><if pos:start="203:13" pos:end="207:13">if <condition pos:start="203:16" pos:end="203:39">(<expr pos:start="203:17" pos:end="203:38"><call pos:start="203:17" pos:end="203:33"><name pos:start="203:17" pos:end="203:25">get_bits1</name><argument_list pos:start="203:26" pos:end="203:33">(<argument pos:start="203:27" pos:end="203:32"><expr pos:start="203:27" pos:end="203:32"><operator pos:start="203:27" pos:end="203:27">&amp;</operator><name pos:start="203:28" pos:end="203:32"><name pos:start="203:28" pos:end="203:28">s</name><operator pos:start="203:29" pos:end="203:30">-&gt;</operator><name pos:start="203:31" pos:end="203:32">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="203:35" pos:end="203:36">!=</operator> <literal type="number" pos:start="203:38" pos:end="203:38">0</literal></expr>)</condition> <block pos:start="203:41" pos:end="207:13">{<block_content pos:start="205:17" pos:end="205:94">

                <expr_stmt pos:start="205:17" pos:end="205:94"><expr pos:start="205:17" pos:end="205:93"><call pos:start="205:17" pos:end="205:93"><name pos:start="205:17" pos:end="205:22">av_log</name><argument_list pos:start="205:23" pos:end="205:93">(<argument pos:start="205:24" pos:end="205:31"><expr pos:start="205:24" pos:end="205:31"><name pos:start="205:24" pos:end="205:31"><name pos:start="205:24" pos:end="205:24">s</name><operator pos:start="205:25" pos:end="205:26">-&gt;</operator><name pos:start="205:27" pos:end="205:31">avctx</name></name></expr></argument>, <argument pos:start="205:34" pos:end="205:45"><expr pos:start="205:34" pos:end="205:45"><name pos:start="205:34" pos:end="205:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="205:48" pos:end="205:92"><expr pos:start="205:48" pos:end="205:92"><literal type="string" pos:start="205:48" pos:end="205:92">"Reference Picture Selection not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="209:13" pos:end="213:13"><if pos:start="209:13" pos:end="213:13">if <condition pos:start="209:16" pos:end="209:39">(<expr pos:start="209:17" pos:end="209:38"><call pos:start="209:17" pos:end="209:33"><name pos:start="209:17" pos:end="209:25">get_bits1</name><argument_list pos:start="209:26" pos:end="209:33">(<argument pos:start="209:27" pos:end="209:32"><expr pos:start="209:27" pos:end="209:32"><operator pos:start="209:27" pos:end="209:27">&amp;</operator><name pos:start="209:28" pos:end="209:32"><name pos:start="209:28" pos:end="209:28">s</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:32">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="209:35" pos:end="209:36">!=</operator> <literal type="number" pos:start="209:38" pos:end="209:38">0</literal></expr>)</condition> <block pos:start="209:41" pos:end="213:13">{<block_content pos:start="211:17" pos:end="211:95">

                <expr_stmt pos:start="211:17" pos:end="211:95"><expr pos:start="211:17" pos:end="211:94"><call pos:start="211:17" pos:end="211:94"><name pos:start="211:17" pos:end="211:22">av_log</name><argument_list pos:start="211:23" pos:end="211:94">(<argument pos:start="211:24" pos:end="211:31"><expr pos:start="211:24" pos:end="211:31"><name pos:start="211:24" pos:end="211:31"><name pos:start="211:24" pos:end="211:24">s</name><operator pos:start="211:25" pos:end="211:26">-&gt;</operator><name pos:start="211:27" pos:end="211:31">avctx</name></name></expr></argument>, <argument pos:start="211:34" pos:end="211:45"><expr pos:start="211:34" pos:end="211:45"><name pos:start="211:34" pos:end="211:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="211:48" pos:end="211:93"><expr pos:start="211:48" pos:end="211:93"><literal type="string" pos:start="211:48" pos:end="211:93">"Independent Segment Decoding not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:48"><expr pos:start="215:13" pos:end="215:47"><name pos:start="215:13" pos:end="215:28"><name pos:start="215:13" pos:end="215:13">s</name><operator pos:start="215:14" pos:end="215:15">-&gt;</operator><name pos:start="215:16" pos:end="215:28">alt_inter_vlc</name></name><operator pos:start="215:29" pos:end="215:29">=</operator> <call pos:start="215:31" pos:end="215:47"><name pos:start="215:31" pos:end="215:39">get_bits1</name><argument_list pos:start="215:40" pos:end="215:47">(<argument pos:start="215:41" pos:end="215:46"><expr pos:start="215:41" pos:end="215:46"><operator pos:start="215:41" pos:end="215:41">&amp;</operator><name pos:start="215:42" pos:end="215:46"><name pos:start="215:42" pos:end="215:42">s</name><operator pos:start="215:43" pos:end="215:44">-&gt;</operator><name pos:start="215:45" pos:end="215:46">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:49"><expr pos:start="217:13" pos:end="217:48"><name pos:start="217:13" pos:end="217:29"><name pos:start="217:13" pos:end="217:13">s</name><operator pos:start="217:14" pos:end="217:15">-&gt;</operator><name pos:start="217:16" pos:end="217:29">modified_quant</name></name><operator pos:start="217:30" pos:end="217:30">=</operator> <call pos:start="217:32" pos:end="217:48"><name pos:start="217:32" pos:end="217:40">get_bits1</name><argument_list pos:start="217:41" pos:end="217:48">(<argument pos:start="217:42" pos:end="217:47"><expr pos:start="217:42" pos:end="217:47"><operator pos:start="217:42" pos:end="217:42">&amp;</operator><name pos:start="217:43" pos:end="217:47"><name pos:start="217:43" pos:end="217:43">s</name><operator pos:start="217:44" pos:end="217:45">-&gt;</operator><name pos:start="217:46" pos:end="217:47">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <expr_stmt pos:start="221:13" pos:end="221:33"><expr pos:start="221:13" pos:end="221:32"><call pos:start="221:13" pos:end="221:32"><name pos:start="221:13" pos:end="221:21">skip_bits</name><argument_list pos:start="221:22" pos:end="221:32">(<argument pos:start="221:23" pos:end="221:28"><expr pos:start="221:23" pos:end="221:28"><operator pos:start="221:23" pos:end="221:23">&amp;</operator><name pos:start="221:24" pos:end="221:28"><name pos:start="221:24" pos:end="221:24">s</name><operator pos:start="221:25" pos:end="221:26">-&gt;</operator><name pos:start="221:27" pos:end="221:28">gb</name></name></expr></argument>, <argument pos:start="221:31" pos:end="221:31"><expr pos:start="221:31" pos:end="221:31"><literal type="number" pos:start="221:31" pos:end="221:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="221:35" pos:end="221:68">/* Prevent start code emulation */</comment>



            <expr_stmt pos:start="225:13" pos:end="225:33"><expr pos:start="225:13" pos:end="225:32"><call pos:start="225:13" pos:end="225:32"><name pos:start="225:13" pos:end="225:21">skip_bits</name><argument_list pos:start="225:22" pos:end="225:32">(<argument pos:start="225:23" pos:end="225:28"><expr pos:start="225:23" pos:end="225:28"><operator pos:start="225:23" pos:end="225:23">&amp;</operator><name pos:start="225:24" pos:end="225:28"><name pos:start="225:24" pos:end="225:24">s</name><operator pos:start="225:25" pos:end="225:26">-&gt;</operator><name pos:start="225:27" pos:end="225:28">gb</name></name></expr></argument>, <argument pos:start="225:31" pos:end="225:31"><expr pos:start="225:31" pos:end="225:31"><literal type="number" pos:start="225:31" pos:end="225:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="225:35" pos:end="225:48">/* Reserved */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="227:11" pos:end="233:9">else if <condition pos:start="227:19" pos:end="227:29">(<expr pos:start="227:20" pos:end="227:28"><name pos:start="227:20" pos:end="227:23">ufep</name> <operator pos:start="227:25" pos:end="227:26">!=</operator> <literal type="number" pos:start="227:28" pos:end="227:28">0</literal></expr>)</condition> <block pos:start="227:31" pos:end="233:9">{<block_content pos:start="229:13" pos:end="231:22">

            <expr_stmt pos:start="229:13" pos:end="229:73"><expr pos:start="229:13" pos:end="229:72"><call pos:start="229:13" pos:end="229:72"><name pos:start="229:13" pos:end="229:18">av_log</name><argument_list pos:start="229:19" pos:end="229:72">(<argument pos:start="229:20" pos:end="229:27"><expr pos:start="229:20" pos:end="229:27"><name pos:start="229:20" pos:end="229:27"><name pos:start="229:20" pos:end="229:20">s</name><operator pos:start="229:21" pos:end="229:22">-&gt;</operator><name pos:start="229:23" pos:end="229:27">avctx</name></name></expr></argument>, <argument pos:start="229:30" pos:end="229:41"><expr pos:start="229:30" pos:end="229:41"><name pos:start="229:30" pos:end="229:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="229:44" pos:end="229:65"><expr pos:start="229:44" pos:end="229:65"><literal type="string" pos:start="229:44" pos:end="229:65">"Bad UFEP type (%d)\n"</literal></expr></argument>, <argument pos:start="229:68" pos:end="229:71"><expr pos:start="229:68" pos:end="229:71"><name pos:start="229:68" pos:end="229:71">ufep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="231:13" pos:end="231:22">return <expr pos:start="231:20" pos:end="231:21"><operator pos:start="231:20" pos:end="231:20">-</operator><literal type="number" pos:start="231:21" pos:end="231:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

            

        <comment type="block" pos:start="237:9" pos:end="237:21">/* MPPTYPE */</comment>

        <expr_stmt pos:start="239:9" pos:end="239:52"><expr pos:start="239:9" pos:end="239:51"><name pos:start="239:9" pos:end="239:20"><name pos:start="239:9" pos:end="239:9">s</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:20">pict_type</name></name> <operator pos:start="239:22" pos:end="239:22">=</operator> <call pos:start="239:24" pos:end="239:42"><name pos:start="239:24" pos:end="239:31">get_bits</name><argument_list pos:start="239:32" pos:end="239:42">(<argument pos:start="239:33" pos:end="239:38"><expr pos:start="239:33" pos:end="239:38"><operator pos:start="239:33" pos:end="239:33">&amp;</operator><name pos:start="239:34" pos:end="239:38"><name pos:start="239:34" pos:end="239:34">s</name><operator pos:start="239:35" pos:end="239:36">-&gt;</operator><name pos:start="239:37" pos:end="239:38">gb</name></name></expr></argument>, <argument pos:start="239:41" pos:end="239:41"><expr pos:start="239:41" pos:end="239:41"><literal type="number" pos:start="239:41" pos:end="239:41">3</literal></expr></argument>)</argument_list></call> <operator pos:start="239:44" pos:end="239:44">+</operator> <name pos:start="239:46" pos:end="239:51">I_TYPE</name></expr>;</expr_stmt>

	<if_stmt pos:start="241:9" pos:end="243:34"><if pos:start="241:9" pos:end="243:34">if <condition pos:start="241:12" pos:end="241:78">(<expr pos:start="241:13" pos:end="241:77"><name pos:start="241:13" pos:end="241:24"><name pos:start="241:13" pos:end="241:13">s</name><operator pos:start="241:14" pos:end="241:15">-&gt;</operator><name pos:start="241:16" pos:end="241:24">pict_type</name></name> <operator pos:start="241:26" pos:end="241:27">==</operator> <literal type="number" pos:start="241:29" pos:end="241:29">8</literal> <operator pos:start="241:31" pos:end="241:32">&amp;&amp;</operator> <name pos:start="241:34" pos:end="241:52"><name pos:start="241:34" pos:end="241:34">s</name><operator pos:start="241:35" pos:end="241:36">-&gt;</operator><name pos:start="241:37" pos:end="241:41">avctx</name><operator pos:start="241:42" pos:end="241:43">-&gt;</operator><name pos:start="241:44" pos:end="241:52">codec_tag</name></name> <operator pos:start="241:54" pos:end="241:55">==</operator> <call pos:start="241:57" pos:end="241:77"><name pos:start="241:57" pos:end="241:69">ff_get_fourcc</name><argument_list pos:start="241:70" pos:end="241:77">(<argument pos:start="241:71" pos:end="241:76"><expr pos:start="241:71" pos:end="241:76"><literal type="string" pos:start="241:71" pos:end="241:76">"ZYGO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="243:13" pos:end="243:34"><block_content pos:start="243:13" pos:end="243:34">

	    <expr_stmt pos:start="243:13" pos:end="243:34"><expr pos:start="243:13" pos:end="243:33"><name pos:start="243:13" pos:end="243:24"><name pos:start="243:13" pos:end="243:13">s</name><operator pos:start="243:14" pos:end="243:15">-&gt;</operator><name pos:start="243:16" pos:end="243:24">pict_type</name></name> <operator pos:start="243:26" pos:end="243:26">=</operator> <name pos:start="243:28" pos:end="243:33">I_TYPE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="245:9" pos:end="249:22"><if pos:start="245:9" pos:end="249:22">if <condition pos:start="245:12" pos:end="247:35">(<expr pos:start="245:13" pos:end="247:34"><name pos:start="245:13" pos:end="245:24"><name pos:start="245:13" pos:end="245:13">s</name><operator pos:start="245:14" pos:end="245:15">-&gt;</operator><name pos:start="245:16" pos:end="245:24">pict_type</name></name> <operator pos:start="245:26" pos:end="245:27">!=</operator> <name pos:start="245:29" pos:end="245:34">I_TYPE</name> <operator pos:start="245:36" pos:end="245:37">&amp;&amp;</operator>

            <name pos:start="247:13" pos:end="247:24"><name pos:start="247:13" pos:end="247:13">s</name><operator pos:start="247:14" pos:end="247:15">-&gt;</operator><name pos:start="247:16" pos:end="247:24">pict_type</name></name> <operator pos:start="247:26" pos:end="247:27">!=</operator> <name pos:start="247:29" pos:end="247:34">P_TYPE</name></expr>)</condition><block type="pseudo" pos:start="249:13" pos:end="249:22"><block_content pos:start="249:13" pos:end="249:22">

            <return pos:start="249:13" pos:end="249:22">return <expr pos:start="249:20" pos:end="249:21"><operator pos:start="249:20" pos:end="249:20">-</operator><literal type="number" pos:start="249:21" pos:end="249:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:29"><expr pos:start="251:9" pos:end="251:28"><call pos:start="251:9" pos:end="251:28"><name pos:start="251:9" pos:end="251:17">skip_bits</name><argument_list pos:start="251:18" pos:end="251:28">(<argument pos:start="251:19" pos:end="251:24"><expr pos:start="251:19" pos:end="251:24"><operator pos:start="251:19" pos:end="251:19">&amp;</operator><name pos:start="251:20" pos:end="251:24"><name pos:start="251:20" pos:end="251:20">s</name><operator pos:start="251:21" pos:end="251:22">-&gt;</operator><name pos:start="251:23" pos:end="251:24">gb</name></name></expr></argument>, <argument pos:start="251:27" pos:end="251:27"><expr pos:start="251:27" pos:end="251:27"><literal type="number" pos:start="251:27" pos:end="251:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:43"><expr pos:start="253:9" pos:end="253:42"><name pos:start="253:9" pos:end="253:22"><name pos:start="253:9" pos:end="253:9">s</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:22">no_rounding</name></name> <operator pos:start="253:24" pos:end="253:24">=</operator> <call pos:start="253:26" pos:end="253:42"><name pos:start="253:26" pos:end="253:34">get_bits1</name><argument_list pos:start="253:35" pos:end="253:42">(<argument pos:start="253:36" pos:end="253:41"><expr pos:start="253:36" pos:end="253:41"><operator pos:start="253:36" pos:end="253:36">&amp;</operator><name pos:start="253:37" pos:end="253:41"><name pos:start="253:37" pos:end="253:37">s</name><operator pos:start="253:38" pos:end="253:39">-&gt;</operator><name pos:start="253:40" pos:end="253:41">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:29"><expr pos:start="255:9" pos:end="255:28"><call pos:start="255:9" pos:end="255:28"><name pos:start="255:9" pos:end="255:17">skip_bits</name><argument_list pos:start="255:18" pos:end="255:28">(<argument pos:start="255:19" pos:end="255:24"><expr pos:start="255:19" pos:end="255:24"><operator pos:start="255:19" pos:end="255:19">&amp;</operator><name pos:start="255:20" pos:end="255:24"><name pos:start="255:20" pos:end="255:20">s</name><operator pos:start="255:21" pos:end="255:22">-&gt;</operator><name pos:start="255:23" pos:end="255:24">gb</name></name></expr></argument>, <argument pos:start="255:27" pos:end="255:27"><expr pos:start="255:27" pos:end="255:27"><literal type="number" pos:start="255:27" pos:end="255:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <comment type="block" pos:start="259:9" pos:end="259:40">/* Get the picture dimensions */</comment>

        <if_stmt pos:start="261:9" pos:end="335:9"><if pos:start="261:9" pos:end="335:9">if <condition pos:start="261:12" pos:end="261:17">(<expr pos:start="261:13" pos:end="261:16"><name pos:start="261:13" pos:end="261:16">ufep</name></expr>)</condition> <block pos:start="261:19" pos:end="335:9">{<block_content pos:start="263:13" pos:end="333:13">

            <if_stmt pos:start="263:13" pos:end="317:13"><if pos:start="263:13" pos:end="311:13">if <condition pos:start="263:16" pos:end="263:28">(<expr pos:start="263:17" pos:end="263:27"><name pos:start="263:17" pos:end="263:22">format</name> <operator pos:start="263:24" pos:end="263:25">==</operator> <literal type="number" pos:start="263:27" pos:end="263:27">6</literal></expr>)</condition> <block pos:start="263:30" pos:end="311:13">{<block_content pos:start="267:17" pos:end="309:17">

                <comment type="block" pos:start="265:17" pos:end="265:51">/* Custom Picture Format (CPFMT) */</comment>

                <expr_stmt pos:start="267:17" pos:end="267:59"><expr pos:start="267:17" pos:end="267:58"><name pos:start="267:17" pos:end="267:36"><name pos:start="267:17" pos:end="267:17">s</name><operator pos:start="267:18" pos:end="267:19">-&gt;</operator><name pos:start="267:20" pos:end="267:36">aspect_ratio_info</name></name> <operator pos:start="267:38" pos:end="267:38">=</operator> <call pos:start="267:40" pos:end="267:58"><name pos:start="267:40" pos:end="267:47">get_bits</name><argument_list pos:start="267:48" pos:end="267:58">(<argument pos:start="267:49" pos:end="267:54"><expr pos:start="267:49" pos:end="267:54"><operator pos:start="267:49" pos:end="267:49">&amp;</operator><name pos:start="267:50" pos:end="267:54"><name pos:start="267:50" pos:end="267:50">s</name><operator pos:start="267:51" pos:end="267:52">-&gt;</operator><name pos:start="267:53" pos:end="267:54">gb</name></name></expr></argument>, <argument pos:start="267:57" pos:end="267:57"><expr pos:start="267:57" pos:end="267:57"><literal type="number" pos:start="267:57" pos:end="267:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:62"><expr pos:start="269:17" pos:end="269:61"><call pos:start="269:17" pos:end="269:61"><name pos:start="269:17" pos:end="269:23">dprintf</name><argument_list pos:start="269:24" pos:end="269:61">(<argument pos:start="269:25" pos:end="269:38"><expr pos:start="269:25" pos:end="269:38"><literal type="string" pos:start="269:25" pos:end="269:38">"aspect: %d\n"</literal></expr></argument>, <argument pos:start="269:41" pos:end="269:60"><expr pos:start="269:41" pos:end="269:60"><name pos:start="269:41" pos:end="269:60"><name pos:start="269:41" pos:end="269:41">s</name><operator pos:start="269:42" pos:end="269:43">-&gt;</operator><name pos:start="269:44" pos:end="269:60">aspect_ratio_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="271:17" pos:end="287:18">/* aspect ratios:

                0 - forbidden

                1 - 1:1

                2 - 12:11 (CIF 4:3)

                3 - 10:11 (525-type 4:3)

                4 - 16:11 (CIF 16:9)

                5 - 40:33 (525-type 16:9)

                6-14 - reserved

                */</comment>

                <expr_stmt pos:start="289:17" pos:end="289:54"><expr pos:start="289:17" pos:end="289:53"><name pos:start="289:17" pos:end="289:21">width</name> <operator pos:start="289:23" pos:end="289:23">=</operator> <operator pos:start="289:25" pos:end="289:25">(</operator><call pos:start="289:26" pos:end="289:44"><name pos:start="289:26" pos:end="289:33">get_bits</name><argument_list pos:start="289:34" pos:end="289:44">(<argument pos:start="289:35" pos:end="289:40"><expr pos:start="289:35" pos:end="289:40"><operator pos:start="289:35" pos:end="289:35">&amp;</operator><name pos:start="289:36" pos:end="289:40"><name pos:start="289:36" pos:end="289:36">s</name><operator pos:start="289:37" pos:end="289:38">-&gt;</operator><name pos:start="289:39" pos:end="289:40">gb</name></name></expr></argument>, <argument pos:start="289:43" pos:end="289:43"><expr pos:start="289:43" pos:end="289:43"><literal type="number" pos:start="289:43" pos:end="289:43">9</literal></expr></argument>)</argument_list></call> <operator pos:start="289:46" pos:end="289:46">+</operator> <literal type="number" pos:start="289:48" pos:end="289:48">1</literal><operator pos:start="289:49" pos:end="289:49">)</operator> <operator pos:start="289:51" pos:end="289:51">*</operator> <literal type="number" pos:start="289:53" pos:end="289:53">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="291:35"><expr pos:start="291:17" pos:end="291:34"><call pos:start="291:17" pos:end="291:34"><name pos:start="291:17" pos:end="291:26">skip_bits1</name><argument_list pos:start="291:27" pos:end="291:34">(<argument pos:start="291:28" pos:end="291:33"><expr pos:start="291:28" pos:end="291:33"><operator pos:start="291:28" pos:end="291:28">&amp;</operator><name pos:start="291:29" pos:end="291:33"><name pos:start="291:29" pos:end="291:29">s</name><operator pos:start="291:30" pos:end="291:31">-&gt;</operator><name pos:start="291:32" pos:end="291:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:49"><expr pos:start="293:17" pos:end="293:48"><name pos:start="293:17" pos:end="293:22">height</name> <operator pos:start="293:24" pos:end="293:24">=</operator> <call pos:start="293:26" pos:end="293:44"><name pos:start="293:26" pos:end="293:33">get_bits</name><argument_list pos:start="293:34" pos:end="293:44">(<argument pos:start="293:35" pos:end="293:40"><expr pos:start="293:35" pos:end="293:40"><operator pos:start="293:35" pos:end="293:35">&amp;</operator><name pos:start="293:36" pos:end="293:40"><name pos:start="293:36" pos:end="293:36">s</name><operator pos:start="293:37" pos:end="293:38">-&gt;</operator><name pos:start="293:39" pos:end="293:40">gb</name></name></expr></argument>, <argument pos:start="293:43" pos:end="293:43"><expr pos:start="293:43" pos:end="293:43"><literal type="number" pos:start="293:43" pos:end="293:43">9</literal></expr></argument>)</argument_list></call> <operator pos:start="293:46" pos:end="293:46">*</operator> <literal type="number" pos:start="293:48" pos:end="293:48">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:73"><expr pos:start="295:17" pos:end="295:72"><call pos:start="295:17" pos:end="295:72"><name pos:start="295:17" pos:end="295:23">dprintf</name><argument_list pos:start="295:24" pos:end="295:72">(<argument pos:start="295:25" pos:end="295:58"><expr pos:start="295:25" pos:end="295:58"><literal type="string" pos:start="295:25" pos:end="295:58">"\nH.263+ Custom picture: %dx%d\n"</literal></expr></argument>,<argument pos:start="295:60" pos:end="295:64"><expr pos:start="295:60" pos:end="295:64"><name pos:start="295:60" pos:end="295:64">width</name></expr></argument>,<argument pos:start="295:66" pos:end="295:71"><expr pos:start="295:66" pos:end="295:71"><name pos:start="295:66" pos:end="295:71">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="297:17" pos:end="309:17"><if pos:start="297:17" pos:end="305:17">if <condition pos:start="297:20" pos:end="297:63">(<expr pos:start="297:21" pos:end="297:62"><name pos:start="297:21" pos:end="297:40"><name pos:start="297:21" pos:end="297:21">s</name><operator pos:start="297:22" pos:end="297:23">-&gt;</operator><name pos:start="297:24" pos:end="297:40">aspect_ratio_info</name></name> <operator pos:start="297:42" pos:end="297:43">==</operator> <name pos:start="297:45" pos:end="297:62">FF_ASPECT_EXTENDED</name></expr>)</condition> <block pos:start="297:65" pos:end="305:17">{<block_content pos:start="301:21" pos:end="303:75">

                    <comment type="block" pos:start="299:21" pos:end="299:45">/* aspected dimensions */</comment>

                    <expr_stmt pos:start="301:21" pos:end="301:75"><expr pos:start="301:21" pos:end="301:74"><name pos:start="301:21" pos:end="301:53"><name pos:start="301:21" pos:end="301:21">s</name><operator pos:start="301:22" pos:end="301:23">-&gt;</operator><name pos:start="301:24" pos:end="301:28">avctx</name><operator pos:start="301:29" pos:end="301:30">-&gt;</operator><name pos:start="301:31" pos:end="301:49">sample_aspect_ratio</name><operator pos:start="301:50" pos:end="301:50">.</operator><name pos:start="301:51" pos:end="301:53">num</name></name><operator pos:start="301:54" pos:end="301:54">=</operator> <call pos:start="301:56" pos:end="301:74"><name pos:start="301:56" pos:end="301:63">get_bits</name><argument_list pos:start="301:64" pos:end="301:74">(<argument pos:start="301:65" pos:end="301:70"><expr pos:start="301:65" pos:end="301:70"><operator pos:start="301:65" pos:end="301:65">&amp;</operator><name pos:start="301:66" pos:end="301:70"><name pos:start="301:66" pos:end="301:66">s</name><operator pos:start="301:67" pos:end="301:68">-&gt;</operator><name pos:start="301:69" pos:end="301:70">gb</name></name></expr></argument>, <argument pos:start="301:73" pos:end="301:73"><expr pos:start="301:73" pos:end="301:73"><literal type="number" pos:start="301:73" pos:end="301:73">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="303:21" pos:end="303:75"><expr pos:start="303:21" pos:end="303:74"><name pos:start="303:21" pos:end="303:53"><name pos:start="303:21" pos:end="303:21">s</name><operator pos:start="303:22" pos:end="303:23">-&gt;</operator><name pos:start="303:24" pos:end="303:28">avctx</name><operator pos:start="303:29" pos:end="303:30">-&gt;</operator><name pos:start="303:31" pos:end="303:49">sample_aspect_ratio</name><operator pos:start="303:50" pos:end="303:50">.</operator><name pos:start="303:51" pos:end="303:53">den</name></name><operator pos:start="303:54" pos:end="303:54">=</operator> <call pos:start="303:56" pos:end="303:74"><name pos:start="303:56" pos:end="303:63">get_bits</name><argument_list pos:start="303:64" pos:end="303:74">(<argument pos:start="303:65" pos:end="303:70"><expr pos:start="303:65" pos:end="303:70"><operator pos:start="303:65" pos:end="303:65">&amp;</operator><name pos:start="303:66" pos:end="303:70"><name pos:start="303:66" pos:end="303:66">s</name><operator pos:start="303:67" pos:end="303:68">-&gt;</operator><name pos:start="303:69" pos:end="303:70">gb</name></name></expr></argument>, <argument pos:start="303:73" pos:end="303:73"><expr pos:start="303:73" pos:end="303:73"><literal type="number" pos:start="303:73" pos:end="303:73">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="305:18" pos:end="309:17">else<block pos:start="305:22" pos:end="309:17">{<block_content pos:start="307:21" pos:end="307:86">

                    <expr_stmt pos:start="307:21" pos:end="307:86"><expr pos:start="307:21" pos:end="307:85"><name pos:start="307:21" pos:end="307:49"><name pos:start="307:21" pos:end="307:21">s</name><operator pos:start="307:22" pos:end="307:23">-&gt;</operator><name pos:start="307:24" pos:end="307:28">avctx</name><operator pos:start="307:29" pos:end="307:30">-&gt;</operator><name pos:start="307:31" pos:end="307:49">sample_aspect_ratio</name></name><operator pos:start="307:50" pos:end="307:50">=</operator> <name pos:start="307:52" pos:end="307:85"><name pos:start="307:52" pos:end="307:63">pixel_aspect</name><index pos:start="307:64" pos:end="307:85">[<expr pos:start="307:65" pos:end="307:84"><name pos:start="307:65" pos:end="307:84"><name pos:start="307:65" pos:end="307:65">s</name><operator pos:start="307:66" pos:end="307:67">-&gt;</operator><name pos:start="307:68" pos:end="307:84">aspect_ratio_info</name></name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="311:15" pos:end="317:13">else <block pos:start="311:20" pos:end="317:13">{<block_content pos:start="313:17" pos:end="315:48">

                <expr_stmt pos:start="313:17" pos:end="313:47"><expr pos:start="313:17" pos:end="313:46"><name pos:start="313:17" pos:end="313:21">width</name> <operator pos:start="313:23" pos:end="313:23">=</operator> <name pos:start="313:25" pos:end="313:46"><name pos:start="313:25" pos:end="313:35">h263_format</name><index pos:start="313:36" pos:end="313:43">[<expr pos:start="313:37" pos:end="313:42"><name pos:start="313:37" pos:end="313:42">format</name></expr>]</index><index pos:start="313:44" pos:end="313:46">[<expr pos:start="313:45" pos:end="313:45"><literal type="number" pos:start="313:45" pos:end="313:45">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="315:17" pos:end="315:48"><expr pos:start="315:17" pos:end="315:47"><name pos:start="315:17" pos:end="315:22">height</name> <operator pos:start="315:24" pos:end="315:24">=</operator> <name pos:start="315:26" pos:end="315:47"><name pos:start="315:26" pos:end="315:36">h263_format</name><index pos:start="315:37" pos:end="315:44">[<expr pos:start="315:38" pos:end="315:43"><name pos:start="315:38" pos:end="315:43">format</name></expr>]</index><index pos:start="315:45" pos:end="315:47">[<expr pos:start="315:46" pos:end="315:46"><literal type="number" pos:start="315:46" pos:end="315:46">1</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="319:13" pos:end="321:26"><if pos:start="319:13" pos:end="321:26">if <condition pos:start="319:16" pos:end="319:46">(<expr pos:start="319:17" pos:end="319:45"><operator pos:start="319:17" pos:end="319:17">(</operator><name pos:start="319:18" pos:end="319:22">width</name> <operator pos:start="319:24" pos:end="319:25">==</operator> <literal type="number" pos:start="319:27" pos:end="319:27">0</literal><operator pos:start="319:28" pos:end="319:28">)</operator> <operator pos:start="319:30" pos:end="319:31">||</operator> <operator pos:start="319:33" pos:end="319:33">(</operator><name pos:start="319:34" pos:end="319:39">height</name> <operator pos:start="319:41" pos:end="319:42">==</operator> <literal type="number" pos:start="319:44" pos:end="319:44">0</literal><operator pos:start="319:45" pos:end="319:45">)</operator></expr>)</condition><block type="pseudo" pos:start="321:17" pos:end="321:26"><block_content pos:start="321:17" pos:end="321:26">

                <return pos:start="321:17" pos:end="321:26">return <expr pos:start="321:24" pos:end="321:25"><operator pos:start="321:24" pos:end="321:24">-</operator><literal type="number" pos:start="321:25" pos:end="321:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:29"><expr pos:start="323:13" pos:end="323:28"><name pos:start="323:13" pos:end="323:20"><name pos:start="323:13" pos:end="323:13">s</name><operator pos:start="323:14" pos:end="323:15">-&gt;</operator><name pos:start="323:16" pos:end="323:20">width</name></name> <operator pos:start="323:22" pos:end="323:22">=</operator> <name pos:start="323:24" pos:end="323:28">width</name></expr>;</expr_stmt>

            <expr_stmt pos:start="325:13" pos:end="325:31"><expr pos:start="325:13" pos:end="325:30"><name pos:start="325:13" pos:end="325:21"><name pos:start="325:13" pos:end="325:13">s</name><operator pos:start="325:14" pos:end="325:15">-&gt;</operator><name pos:start="325:16" pos:end="325:21">height</name></name> <operator pos:start="325:23" pos:end="325:23">=</operator> <name pos:start="325:25" pos:end="325:30">height</name></expr>;</expr_stmt>

            <if_stmt pos:start="327:13" pos:end="333:13"><if pos:start="327:13" pos:end="333:13">if <condition pos:start="327:16" pos:end="327:27">(<expr pos:start="327:17" pos:end="327:26"><name pos:start="327:17" pos:end="327:26"><name pos:start="327:17" pos:end="327:17">s</name><operator pos:start="327:18" pos:end="327:19">-&gt;</operator><name pos:start="327:20" pos:end="327:26">umvplus</name></name></expr>)</condition> <block pos:start="327:29" pos:end="333:13">{<block_content pos:start="329:17" pos:end="331:39">

                <if_stmt pos:start="329:17" pos:end="331:39"><if pos:start="329:17" pos:end="331:39">if<condition pos:start="329:19" pos:end="329:40">(<expr pos:start="329:20" pos:end="329:39"><call pos:start="329:20" pos:end="329:36"><name pos:start="329:20" pos:end="329:28">get_bits1</name><argument_list pos:start="329:29" pos:end="329:36">(<argument pos:start="329:30" pos:end="329:35"><expr pos:start="329:30" pos:end="329:35"><operator pos:start="329:30" pos:end="329:30">&amp;</operator><name pos:start="329:31" pos:end="329:35"><name pos:start="329:31" pos:end="329:31">s</name><operator pos:start="329:32" pos:end="329:33">-&gt;</operator><name pos:start="329:34" pos:end="329:35">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="329:37" pos:end="329:38">==</operator><literal type="number" pos:start="329:39" pos:end="329:39">0</literal></expr>)</condition><block type="pseudo" pos:start="331:21" pos:end="331:39"><block_content pos:start="331:21" pos:end="331:39"> <comment type="block" pos:start="329:42" pos:end="329:100">/* Unlimited Unrestricted Motion Vectors Indicator (UUI) */</comment>

                    <expr_stmt pos:start="331:21" pos:end="331:39"><expr pos:start="331:21" pos:end="331:38"><call pos:start="331:21" pos:end="331:38"><name pos:start="331:21" pos:end="331:30">skip_bits1</name><argument_list pos:start="331:31" pos:end="331:38">(<argument pos:start="331:32" pos:end="331:37"><expr pos:start="331:32" pos:end="331:37"><operator pos:start="331:32" pos:end="331:32">&amp;</operator><name pos:start="331:33" pos:end="331:37"><name pos:start="331:33" pos:end="331:33">s</name><operator pos:start="331:34" pos:end="331:35">-&gt;</operator><name pos:start="331:36" pos:end="331:37">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

            

        <expr_stmt pos:start="339:9" pos:end="339:40"><expr pos:start="339:9" pos:end="339:39"><name pos:start="339:9" pos:end="339:17"><name pos:start="339:9" pos:end="339:9">s</name><operator pos:start="339:10" pos:end="339:11">-&gt;</operator><name pos:start="339:12" pos:end="339:17">qscale</name></name> <operator pos:start="339:19" pos:end="339:19">=</operator> <call pos:start="339:21" pos:end="339:39"><name pos:start="339:21" pos:end="339:28">get_bits</name><argument_list pos:start="339:29" pos:end="339:39">(<argument pos:start="339:30" pos:end="339:35"><expr pos:start="339:30" pos:end="339:35"><operator pos:start="339:30" pos:end="339:30">&amp;</operator><name pos:start="339:31" pos:end="339:35"><name pos:start="339:31" pos:end="339:31">s</name><operator pos:start="339:32" pos:end="339:33">-&gt;</operator><name pos:start="339:34" pos:end="339:35">gb</name></name></expr></argument>, <argument pos:start="339:38" pos:end="339:38"><expr pos:start="339:38" pos:end="339:38"><literal type="number" pos:start="339:38" pos:end="339:38">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="343:5" pos:end="343:13">/* PEI */</comment>

    <while pos:start="345:5" pos:end="349:5">while <condition pos:start="345:11" pos:end="345:34">(<expr pos:start="345:12" pos:end="345:33"><call pos:start="345:12" pos:end="345:28"><name pos:start="345:12" pos:end="345:20">get_bits1</name><argument_list pos:start="345:21" pos:end="345:28">(<argument pos:start="345:22" pos:end="345:27"><expr pos:start="345:22" pos:end="345:27"><operator pos:start="345:22" pos:end="345:22">&amp;</operator><name pos:start="345:23" pos:end="345:27"><name pos:start="345:23" pos:end="345:23">s</name><operator pos:start="345:24" pos:end="345:25">-&gt;</operator><name pos:start="345:26" pos:end="345:27">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="345:30" pos:end="345:31">!=</operator> <literal type="number" pos:start="345:33" pos:end="345:33">0</literal></expr>)</condition> <block pos:start="345:36" pos:end="349:5">{<block_content pos:start="347:9" pos:end="347:29">

        <expr_stmt pos:start="347:9" pos:end="347:29"><expr pos:start="347:9" pos:end="347:28"><call pos:start="347:9" pos:end="347:28"><name pos:start="347:9" pos:end="347:17">skip_bits</name><argument_list pos:start="347:18" pos:end="347:28">(<argument pos:start="347:19" pos:end="347:24"><expr pos:start="347:19" pos:end="347:24"><operator pos:start="347:19" pos:end="347:19">&amp;</operator><name pos:start="347:20" pos:end="347:24"><name pos:start="347:20" pos:end="347:20">s</name><operator pos:start="347:21" pos:end="347:22">-&gt;</operator><name pos:start="347:23" pos:end="347:24">gb</name></name></expr></argument>, <argument pos:start="347:27" pos:end="347:27"><expr pos:start="347:27" pos:end="347:27"><literal type="number" pos:start="347:27" pos:end="347:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="351:5" pos:end="351:18"><expr pos:start="351:5" pos:end="351:17"><name pos:start="351:5" pos:end="351:13"><name pos:start="351:5" pos:end="351:5">s</name><operator pos:start="351:6" pos:end="351:7">-&gt;</operator><name pos:start="351:8" pos:end="351:13">f_code</name></name> <operator pos:start="351:15" pos:end="351:15">=</operator> <literal type="number" pos:start="351:17" pos:end="351:17">1</literal></expr>;</expr_stmt>

    

    <if_stmt pos:start="355:5" pos:end="367:5"><if pos:start="355:5" pos:end="361:5">if<condition pos:start="355:7" pos:end="355:19">(<expr pos:start="355:8" pos:end="355:18"><name pos:start="355:8" pos:end="355:18"><name pos:start="355:8" pos:end="355:8">s</name><operator pos:start="355:9" pos:end="355:10">-&gt;</operator><name pos:start="355:11" pos:end="355:18">h263_aic</name></name></expr>)</condition><block pos:start="355:20" pos:end="361:5">{<block_content pos:start="357:10" pos:end="359:52">

         <expr_stmt pos:start="357:10" pos:end="359:52"><expr pos:start="357:10" pos:end="359:51"><name pos:start="357:10" pos:end="357:28"><name pos:start="357:10" pos:end="357:10">s</name><operator pos:start="357:11" pos:end="357:12">-&gt;</operator><name pos:start="357:13" pos:end="357:28">y_dc_scale_table</name></name><operator pos:start="357:29" pos:end="357:29">=</operator> 

         <name pos:start="359:10" pos:end="359:28"><name pos:start="359:10" pos:end="359:10">s</name><operator pos:start="359:11" pos:end="359:12">-&gt;</operator><name pos:start="359:13" pos:end="359:28">c_dc_scale_table</name></name><operator pos:start="359:29" pos:end="359:29">=</operator> <name pos:start="359:31" pos:end="359:51">ff_aic_dc_scale_table</name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="361:6" pos:end="367:5">else<block pos:start="361:10" pos:end="367:5">{<block_content pos:start="363:9" pos:end="365:53">

        <expr_stmt pos:start="363:9" pos:end="365:53"><expr pos:start="363:9" pos:end="365:52"><name pos:start="363:9" pos:end="363:27"><name pos:start="363:9" pos:end="363:9">s</name><operator pos:start="363:10" pos:end="363:11">-&gt;</operator><name pos:start="363:12" pos:end="363:27">y_dc_scale_table</name></name><operator pos:start="363:28" pos:end="363:28">=</operator>

        <name pos:start="365:9" pos:end="365:27"><name pos:start="365:9" pos:end="365:9">s</name><operator pos:start="365:10" pos:end="365:11">-&gt;</operator><name pos:start="365:12" pos:end="365:27">c_dc_scale_table</name></name><operator pos:start="365:28" pos:end="365:28">=</operator> <name pos:start="365:30" pos:end="365:52">ff_mpeg1_dc_scale_table</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



     <if_stmt pos:start="371:6" pos:end="398:0"><if pos:start="371:6" pos:end="398:0">if<condition pos:start="371:8" pos:end="371:43">(<expr pos:start="371:9" pos:end="371:42"><name pos:start="371:9" pos:end="371:23"><name pos:start="371:9" pos:end="371:9">s</name><operator pos:start="371:10" pos:end="371:11">-&gt;</operator><name pos:start="371:12" pos:end="371:16">avctx</name><operator pos:start="371:17" pos:end="371:18">-&gt;</operator><name pos:start="371:19" pos:end="371:23">debug</name></name><operator pos:start="371:24" pos:end="371:24">&amp;</operator><name pos:start="371:25" pos:end="371:42">FF_DEBUG_PICT_INFO</name></expr>)</condition><block pos:start="371:44" pos:end="398:0">{<block_content pos:start="373:10" pos:end="393:11">

         <expr_stmt pos:start="373:10" pos:end="393:11"><expr pos:start="373:10" pos:end="393:10"><call pos:start="373:10" pos:end="393:10"><name pos:start="373:10" pos:end="373:15">av_log</name><argument_list pos:start="373:16" pos:end="393:10">(<argument pos:start="373:17" pos:end="373:24"><expr pos:start="373:17" pos:end="373:24"><name pos:start="373:17" pos:end="373:24"><name pos:start="373:17" pos:end="373:17">s</name><operator pos:start="373:18" pos:end="373:19">-&gt;</operator><name pos:start="373:20" pos:end="373:24">avctx</name></name></expr></argument>, <argument pos:start="373:27" pos:end="373:38"><expr pos:start="373:27" pos:end="373:38"><name pos:start="373:27" pos:end="373:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="373:41" pos:end="373:81"><expr pos:start="373:41" pos:end="373:81"><literal type="string" pos:start="373:41" pos:end="373:81">"qp:%d %c size:%d rnd:%d%s%s%s%s%s%s%s\n"</literal></expr></argument>, 

         <argument pos:start="375:10" pos:end="375:18"><expr pos:start="375:10" pos:end="375:18"><name pos:start="375:10" pos:end="375:18"><name pos:start="375:10" pos:end="375:10">s</name><operator pos:start="375:11" pos:end="375:12">-&gt;</operator><name pos:start="375:13" pos:end="375:18">qscale</name></name></expr></argument>, <argument pos:start="375:21" pos:end="375:55"><expr pos:start="375:21" pos:end="375:55"><call pos:start="375:21" pos:end="375:55"><name pos:start="375:21" pos:end="375:41">av_get_pict_type_char</name><argument_list pos:start="375:42" pos:end="375:55">(<argument pos:start="375:43" pos:end="375:54"><expr pos:start="375:43" pos:end="375:54"><name pos:start="375:43" pos:end="375:54"><name pos:start="375:43" pos:end="375:43">s</name><operator pos:start="375:44" pos:end="375:45">-&gt;</operator><name pos:start="375:46" pos:end="375:54">pict_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

         <argument pos:start="377:10" pos:end="377:27"><expr pos:start="377:10" pos:end="377:27"><name pos:start="377:10" pos:end="377:27"><name pos:start="377:10" pos:end="377:10">s</name><operator pos:start="377:11" pos:end="377:12">-&gt;</operator><name pos:start="377:13" pos:end="377:14">gb</name><operator pos:start="377:15" pos:end="377:15">.</operator><name pos:start="377:16" pos:end="377:27">size_in_bits</name></name></expr></argument>, <argument pos:start="377:30" pos:end="377:45"><expr pos:start="377:30" pos:end="377:45"><literal type="number" pos:start="377:30" pos:end="377:31">1</literal><operator pos:start="377:31" pos:end="377:31">-</operator><name pos:start="377:32" pos:end="377:45"><name pos:start="377:32" pos:end="377:32">s</name><operator pos:start="377:33" pos:end="377:34">-&gt;</operator><name pos:start="377:35" pos:end="377:45">no_rounding</name></name></expr></argument>,

         <argument pos:start="379:10" pos:end="379:29"><expr pos:start="379:10" pos:end="379:29"><ternary pos:start="379:10" pos:end="379:29"><condition pos:start="379:10" pos:end="379:18"><expr pos:start="379:10" pos:end="379:16"><name pos:start="379:10" pos:end="379:16"><name pos:start="379:10" pos:end="379:10">s</name><operator pos:start="379:11" pos:end="379:12">-&gt;</operator><name pos:start="379:13" pos:end="379:16">obmc</name></name></expr> ?</condition><then pos:start="379:20" pos:end="379:24"> <expr pos:start="379:20" pos:end="379:24"><literal type="string" pos:start="379:20" pos:end="379:24">" AP"</literal></expr> </then><else pos:start="379:26" pos:end="379:29">: <expr pos:start="379:28" pos:end="379:29"><literal type="string" pos:start="379:28" pos:end="379:29">""</literal></expr></else></ternary></expr></argument>,

         <argument pos:start="381:10" pos:end="381:33"><expr pos:start="381:10" pos:end="381:33"><ternary pos:start="381:10" pos:end="381:33"><condition pos:start="381:10" pos:end="381:21"><expr pos:start="381:10" pos:end="381:19"><name pos:start="381:10" pos:end="381:19"><name pos:start="381:10" pos:end="381:10">s</name><operator pos:start="381:11" pos:end="381:12">-&gt;</operator><name pos:start="381:13" pos:end="381:19">umvplus</name></name></expr> ?</condition><then pos:start="381:23" pos:end="381:28"> <expr pos:start="381:23" pos:end="381:28"><literal type="string" pos:start="381:23" pos:end="381:28">" UMV"</literal></expr> </then><else pos:start="381:30" pos:end="381:33">: <expr pos:start="381:32" pos:end="381:33"><literal type="string" pos:start="381:32" pos:end="381:33">""</literal></expr></else></ternary></expr></argument>,

         <argument pos:start="383:10" pos:end="383:44"><expr pos:start="383:10" pos:end="383:44"><ternary pos:start="383:10" pos:end="383:44"><condition pos:start="383:10" pos:end="383:31"><expr pos:start="383:10" pos:end="383:29"><name pos:start="383:10" pos:end="383:29"><name pos:start="383:10" pos:end="383:10">s</name><operator pos:start="383:11" pos:end="383:12">-&gt;</operator><name pos:start="383:13" pos:end="383:29">h263_long_vectors</name></name></expr> ?</condition><then pos:start="383:33" pos:end="383:39"> <expr pos:start="383:33" pos:end="383:39"><literal type="string" pos:start="383:33" pos:end="383:39">" LONG"</literal></expr> </then><else pos:start="383:41" pos:end="383:44">: <expr pos:start="383:43" pos:end="383:44"><literal type="string" pos:start="383:43" pos:end="383:44">""</literal></expr></else></ternary></expr></argument>,

         <argument pos:start="385:10" pos:end="385:33"><expr pos:start="385:10" pos:end="385:33"><ternary pos:start="385:10" pos:end="385:33"><condition pos:start="385:10" pos:end="385:23"><expr pos:start="385:10" pos:end="385:21"><name pos:start="385:10" pos:end="385:21"><name pos:start="385:10" pos:end="385:10">s</name><operator pos:start="385:11" pos:end="385:12">-&gt;</operator><name pos:start="385:13" pos:end="385:21">h263_plus</name></name></expr> ?</condition><then pos:start="385:25" pos:end="385:28"> <expr pos:start="385:25" pos:end="385:28"><literal type="string" pos:start="385:25" pos:end="385:28">" +"</literal></expr> </then><else pos:start="385:30" pos:end="385:33">: <expr pos:start="385:32" pos:end="385:33"><literal type="string" pos:start="385:32" pos:end="385:33">""</literal></expr></else></ternary></expr></argument>,

         <argument pos:start="387:10" pos:end="387:34"><expr pos:start="387:10" pos:end="387:34"><ternary pos:start="387:10" pos:end="387:34"><condition pos:start="387:10" pos:end="387:22"><expr pos:start="387:10" pos:end="387:20"><name pos:start="387:10" pos:end="387:20"><name pos:start="387:10" pos:end="387:10">s</name><operator pos:start="387:11" pos:end="387:12">-&gt;</operator><name pos:start="387:13" pos:end="387:20">h263_aic</name></name></expr> ?</condition><then pos:start="387:24" pos:end="387:29"> <expr pos:start="387:24" pos:end="387:29"><literal type="string" pos:start="387:24" pos:end="387:29">" AIC"</literal></expr> </then><else pos:start="387:31" pos:end="387:34">: <expr pos:start="387:33" pos:end="387:34"><literal type="string" pos:start="387:33" pos:end="387:34">""</literal></expr></else></ternary></expr></argument>,

         <argument pos:start="389:10" pos:end="389:39"><expr pos:start="389:10" pos:end="389:39"><ternary pos:start="389:10" pos:end="389:39"><condition pos:start="389:10" pos:end="389:27"><expr pos:start="389:10" pos:end="389:25"><name pos:start="389:10" pos:end="389:25"><name pos:start="389:10" pos:end="389:10">s</name><operator pos:start="389:11" pos:end="389:12">-&gt;</operator><name pos:start="389:13" pos:end="389:25">alt_inter_vlc</name></name></expr> ?</condition><then pos:start="389:29" pos:end="389:34"> <expr pos:start="389:29" pos:end="389:34"><literal type="string" pos:start="389:29" pos:end="389:34">" AIV"</literal></expr> </then><else pos:start="389:36" pos:end="389:39">: <expr pos:start="389:38" pos:end="389:39"><literal type="string" pos:start="389:38" pos:end="389:39">""</literal></expr></else></ternary></expr></argument>,

         <argument pos:start="391:10" pos:end="391:39"><expr pos:start="391:10" pos:end="391:39"><ternary pos:start="391:10" pos:end="391:39"><condition pos:start="391:10" pos:end="391:28"><expr pos:start="391:10" pos:end="391:26"><name pos:start="391:10" pos:end="391:26"><name pos:start="391:10" pos:end="391:10">s</name><operator pos:start="391:11" pos:end="391:12">-&gt;</operator><name pos:start="391:13" pos:end="391:26">modified_quant</name></name></expr> ?</condition><then pos:start="391:30" pos:end="391:34"> <expr pos:start="391:30" pos:end="391:34"><literal type="string" pos:start="391:30" pos:end="391:34">" MQ"</literal></expr> </then><else pos:start="391:36" pos:end="391:39">: <expr pos:start="391:38" pos:end="391:39"><literal type="string" pos:start="391:38" pos:end="391:39">""</literal></expr></else></ternary></expr></argument>

         )</argument_list></call></expr>;</expr_stmt> 

     </block_content>}</block></if></if_stmt>

<cpp:if pos:start="397:1" pos:end="397:5">#<cpp:directive pos:start="397:2" pos:end="397:3">if</cpp:directive> <expr pos:start="397:5" pos:end="397:5"><literal type="number" pos:start="397:5" pos:end="397:5">1</literal></expr></cpp:if>

    <if_stmt pos:start="399:5" pos:end="428:0"><if pos:start="399:5" pos:end="428:0">if <condition pos:start="399:8" pos:end="399:79">(<expr pos:start="399:9" pos:end="399:78"><name pos:start="399:9" pos:end="399:20"><name pos:start="399:9" pos:end="399:9">s</name><operator pos:start="399:10" pos:end="399:11">-&gt;</operator><name pos:start="399:12" pos:end="399:20">pict_type</name></name> <operator pos:start="399:22" pos:end="399:23">==</operator> <name pos:start="399:25" pos:end="399:30">I_TYPE</name> <operator pos:start="399:32" pos:end="399:33">&amp;&amp;</operator> <name pos:start="399:35" pos:end="399:53"><name pos:start="399:35" pos:end="399:35">s</name><operator pos:start="399:36" pos:end="399:37">-&gt;</operator><name pos:start="399:38" pos:end="399:42">avctx</name><operator pos:start="399:43" pos:end="399:44">-&gt;</operator><name pos:start="399:45" pos:end="399:53">codec_tag</name></name> <operator pos:start="399:55" pos:end="399:56">==</operator> <call pos:start="399:58" pos:end="399:78"><name pos:start="399:58" pos:end="399:70">ff_get_fourcc</name><argument_list pos:start="399:71" pos:end="399:78">(<argument pos:start="399:72" pos:end="399:77"><expr pos:start="399:72" pos:end="399:77"><literal type="string" pos:start="399:72" pos:end="399:77">"ZYGO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="399:80" pos:end="428:0">{<block_content pos:start="401:9" pos:end="423:84">

        <decl_stmt pos:start="401:9" pos:end="401:16"><decl pos:start="401:9" pos:end="401:13"><type pos:start="401:9" pos:end="401:11"><name pos:start="401:9" pos:end="401:11">int</name></type> <name pos:start="401:13" pos:end="401:13">i</name></decl>,<decl pos:start="401:15" pos:end="401:15"><type ref="prev" pos:start="401:9" pos:end="401:11"/><name pos:start="401:15" pos:end="401:15">j</name></decl>;</decl_stmt>

        <for pos:start="403:9" pos:end="403:84">for<control pos:start="403:12" pos:end="403:27">(<init pos:start="403:13" pos:end="403:16"><expr pos:start="403:13" pos:end="403:15"><name pos:start="403:13" pos:end="403:13">i</name><operator pos:start="403:14" pos:end="403:14">=</operator><literal type="number" pos:start="403:15" pos:end="403:15">0</literal></expr>;</init> <condition pos:start="403:18" pos:end="403:22"><expr pos:start="403:18" pos:end="403:21"><name pos:start="403:18" pos:end="403:18">i</name><operator pos:start="403:19" pos:end="403:19">&lt;</operator><literal type="number" pos:start="403:20" pos:end="403:21">85</literal></expr>;</condition> <incr pos:start="403:24" pos:end="403:26"><expr pos:start="403:24" pos:end="403:26"><name pos:start="403:24" pos:end="403:24">i</name><operator pos:start="403:25" pos:end="403:26">++</operator></expr></incr>)</control><block type="pseudo" pos:start="403:29" pos:end="403:84"><block_content pos:start="403:29" pos:end="403:84"> <expr_stmt pos:start="403:29" pos:end="403:84"><expr pos:start="403:29" pos:end="403:83"><call pos:start="403:29" pos:end="403:83"><name pos:start="403:29" pos:end="403:34">av_log</name><argument_list pos:start="403:35" pos:end="403:83">(<argument pos:start="403:36" pos:end="403:43"><expr pos:start="403:36" pos:end="403:43"><name pos:start="403:36" pos:end="403:43"><name pos:start="403:36" pos:end="403:36">s</name><operator pos:start="403:37" pos:end="403:38">-&gt;</operator><name pos:start="403:39" pos:end="403:43">avctx</name></name></expr></argument>, <argument pos:start="403:46" pos:end="403:57"><expr pos:start="403:46" pos:end="403:57"><name pos:start="403:46" pos:end="403:57">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="403:60" pos:end="403:63"><expr pos:start="403:60" pos:end="403:63"><literal type="string" pos:start="403:60" pos:end="403:63">"%d"</literal></expr></argument>, <argument pos:start="403:66" pos:end="403:82"><expr pos:start="403:66" pos:end="403:82"><call pos:start="403:66" pos:end="403:82"><name pos:start="403:66" pos:end="403:74">get_bits1</name><argument_list pos:start="403:75" pos:end="403:82">(<argument pos:start="403:76" pos:end="403:81"><expr pos:start="403:76" pos:end="403:81"><operator pos:start="403:76" pos:end="403:76">&amp;</operator><name pos:start="403:77" pos:end="403:81"><name pos:start="403:77" pos:end="403:77">s</name><operator pos:start="403:78" pos:end="403:79">-&gt;</operator><name pos:start="403:80" pos:end="403:81">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="405:9" pos:end="405:45"><expr pos:start="405:9" pos:end="405:44"><call pos:start="405:9" pos:end="405:44"><name pos:start="405:9" pos:end="405:14">av_log</name><argument_list pos:start="405:15" pos:end="405:44">(<argument pos:start="405:16" pos:end="405:23"><expr pos:start="405:16" pos:end="405:23"><name pos:start="405:16" pos:end="405:23"><name pos:start="405:16" pos:end="405:16">s</name><operator pos:start="405:17" pos:end="405:18">-&gt;</operator><name pos:start="405:19" pos:end="405:23">avctx</name></name></expr></argument>, <argument pos:start="405:26" pos:end="405:37"><expr pos:start="405:26" pos:end="405:37"><name pos:start="405:26" pos:end="405:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="405:40" pos:end="405:43"><expr pos:start="405:40" pos:end="405:43"><literal type="string" pos:start="405:40" pos:end="405:43">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="407:9" pos:end="421:9">for<control pos:start="407:12" pos:end="407:27">(<init pos:start="407:13" pos:end="407:16"><expr pos:start="407:13" pos:end="407:15"><name pos:start="407:13" pos:end="407:13">i</name><operator pos:start="407:14" pos:end="407:14">=</operator><literal type="number" pos:start="407:15" pos:end="407:15">0</literal></expr>;</init> <condition pos:start="407:18" pos:end="407:22"><expr pos:start="407:18" pos:end="407:21"><name pos:start="407:18" pos:end="407:18">i</name><operator pos:start="407:19" pos:end="407:19">&lt;</operator><literal type="number" pos:start="407:20" pos:end="407:21">13</literal></expr>;</condition> <incr pos:start="407:24" pos:end="407:26"><expr pos:start="407:24" pos:end="407:26"><name pos:start="407:24" pos:end="407:24">i</name><operator pos:start="407:25" pos:end="407:26">++</operator></expr></incr>)</control><block pos:start="407:28" pos:end="421:9">{<block_content pos:start="409:13" pos:end="419:49">

            <for pos:start="409:13" pos:end="417:13">for<control pos:start="409:16" pos:end="409:30">(<init pos:start="409:17" pos:end="409:20"><expr pos:start="409:17" pos:end="409:19"><name pos:start="409:17" pos:end="409:17">j</name><operator pos:start="409:18" pos:end="409:18">=</operator><literal type="number" pos:start="409:19" pos:end="409:19">0</literal></expr>;</init> <condition pos:start="409:22" pos:end="409:25"><expr pos:start="409:22" pos:end="409:24"><name pos:start="409:22" pos:end="409:22">j</name><operator pos:start="409:23" pos:end="409:23">&lt;</operator><literal type="number" pos:start="409:24" pos:end="409:24">3</literal></expr>;</condition> <incr pos:start="409:27" pos:end="409:29"><expr pos:start="409:27" pos:end="409:29"><name pos:start="409:27" pos:end="409:27">j</name><operator pos:start="409:28" pos:end="409:29">++</operator></expr></incr>)</control><block pos:start="409:31" pos:end="417:13">{<block_content pos:start="411:17" pos:end="415:58">

                <decl_stmt pos:start="411:17" pos:end="411:43"><decl pos:start="411:17" pos:end="411:42"><type pos:start="411:17" pos:end="411:19"><name pos:start="411:17" pos:end="411:19">int</name></type> <name pos:start="411:21" pos:end="411:21">v</name><init pos:start="411:22" pos:end="411:42">= <expr pos:start="411:24" pos:end="411:42"><call pos:start="411:24" pos:end="411:42"><name pos:start="411:24" pos:end="411:31">get_bits</name><argument_list pos:start="411:32" pos:end="411:42">(<argument pos:start="411:33" pos:end="411:38"><expr pos:start="411:33" pos:end="411:38"><operator pos:start="411:33" pos:end="411:33">&amp;</operator><name pos:start="411:34" pos:end="411:38"><name pos:start="411:34" pos:end="411:34">s</name><operator pos:start="411:35" pos:end="411:36">-&gt;</operator><name pos:start="411:37" pos:end="411:38">gb</name></name></expr></argument>, <argument pos:start="411:41" pos:end="411:41"><expr pos:start="411:41" pos:end="411:41"><literal type="number" pos:start="411:41" pos:end="411:41">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="413:17" pos:end="413:45"><expr pos:start="413:17" pos:end="413:44"><name pos:start="413:17" pos:end="413:17">v</name> <operator pos:start="413:19" pos:end="413:20">|=</operator> <call pos:start="413:22" pos:end="413:41"><name pos:start="413:22" pos:end="413:30">get_sbits</name><argument_list pos:start="413:31" pos:end="413:41">(<argument pos:start="413:32" pos:end="413:37"><expr pos:start="413:32" pos:end="413:37"><operator pos:start="413:32" pos:end="413:32">&amp;</operator><name pos:start="413:33" pos:end="413:37"><name pos:start="413:33" pos:end="413:33">s</name><operator pos:start="413:34" pos:end="413:35">-&gt;</operator><name pos:start="413:36" pos:end="413:37">gb</name></name></expr></argument>, <argument pos:start="413:40" pos:end="413:40"><expr pos:start="413:40" pos:end="413:40"><literal type="number" pos:start="413:40" pos:end="413:40">8</literal></expr></argument>)</argument_list></call><operator pos:start="413:42" pos:end="413:43">&lt;&lt;</operator><literal type="number" pos:start="413:44" pos:end="413:44">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="415:17" pos:end="415:58"><expr pos:start="415:17" pos:end="415:57"><call pos:start="415:17" pos:end="415:57"><name pos:start="415:17" pos:end="415:22">av_log</name><argument_list pos:start="415:23" pos:end="415:57">(<argument pos:start="415:24" pos:end="415:31"><expr pos:start="415:24" pos:end="415:31"><name pos:start="415:24" pos:end="415:31"><name pos:start="415:24" pos:end="415:24">s</name><operator pos:start="415:25" pos:end="415:26">-&gt;</operator><name pos:start="415:27" pos:end="415:31">avctx</name></name></expr></argument>, <argument pos:start="415:34" pos:end="415:45"><expr pos:start="415:34" pos:end="415:45"><name pos:start="415:34" pos:end="415:45">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="415:48" pos:end="415:53"><expr pos:start="415:48" pos:end="415:53"><literal type="string" pos:start="415:48" pos:end="415:53">" %5d"</literal></expr></argument>, <argument pos:start="415:56" pos:end="415:56"><expr pos:start="415:56" pos:end="415:56"><name pos:start="415:56" pos:end="415:56">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="419:13" pos:end="419:49"><expr pos:start="419:13" pos:end="419:48"><call pos:start="419:13" pos:end="419:48"><name pos:start="419:13" pos:end="419:18">av_log</name><argument_list pos:start="419:19" pos:end="419:48">(<argument pos:start="419:20" pos:end="419:27"><expr pos:start="419:20" pos:end="419:27"><name pos:start="419:20" pos:end="419:27"><name pos:start="419:20" pos:end="419:20">s</name><operator pos:start="419:21" pos:end="419:22">-&gt;</operator><name pos:start="419:23" pos:end="419:27">avctx</name></name></expr></argument>, <argument pos:start="419:30" pos:end="419:41"><expr pos:start="419:30" pos:end="419:41"><name pos:start="419:30" pos:end="419:41">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="419:44" pos:end="419:47"><expr pos:start="419:44" pos:end="419:47"><literal type="string" pos:start="419:44" pos:end="419:47">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="423:9" pos:end="423:84">for<control pos:start="423:12" pos:end="423:27">(<init pos:start="423:13" pos:end="423:16"><expr pos:start="423:13" pos:end="423:15"><name pos:start="423:13" pos:end="423:13">i</name><operator pos:start="423:14" pos:end="423:14">=</operator><literal type="number" pos:start="423:15" pos:end="423:15">0</literal></expr>;</init> <condition pos:start="423:18" pos:end="423:22"><expr pos:start="423:18" pos:end="423:21"><name pos:start="423:18" pos:end="423:18">i</name><operator pos:start="423:19" pos:end="423:19">&lt;</operator><literal type="number" pos:start="423:20" pos:end="423:21">50</literal></expr>;</condition> <incr pos:start="423:24" pos:end="423:26"><expr pos:start="423:24" pos:end="423:26"><name pos:start="423:24" pos:end="423:24">i</name><operator pos:start="423:25" pos:end="423:26">++</operator></expr></incr>)</control><block type="pseudo" pos:start="423:29" pos:end="423:84"><block_content pos:start="423:29" pos:end="423:84"> <expr_stmt pos:start="423:29" pos:end="423:84"><expr pos:start="423:29" pos:end="423:83"><call pos:start="423:29" pos:end="423:83"><name pos:start="423:29" pos:end="423:34">av_log</name><argument_list pos:start="423:35" pos:end="423:83">(<argument pos:start="423:36" pos:end="423:43"><expr pos:start="423:36" pos:end="423:43"><name pos:start="423:36" pos:end="423:43"><name pos:start="423:36" pos:end="423:36">s</name><operator pos:start="423:37" pos:end="423:38">-&gt;</operator><name pos:start="423:39" pos:end="423:43">avctx</name></name></expr></argument>, <argument pos:start="423:46" pos:end="423:57"><expr pos:start="423:46" pos:end="423:57"><name pos:start="423:46" pos:end="423:57">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="423:60" pos:end="423:63"><expr pos:start="423:60" pos:end="423:63"><literal type="string" pos:start="423:60" pos:end="423:63">"%d"</literal></expr></argument>, <argument pos:start="423:66" pos:end="423:82"><expr pos:start="423:66" pos:end="423:82"><call pos:start="423:66" pos:end="423:82"><name pos:start="423:66" pos:end="423:74">get_bits1</name><argument_list pos:start="423:75" pos:end="423:82">(<argument pos:start="423:76" pos:end="423:81"><expr pos:start="423:76" pos:end="423:81"><operator pos:start="423:76" pos:end="423:76">&amp;</operator><name pos:start="423:77" pos:end="423:81"><name pos:start="423:77" pos:end="423:77">s</name><operator pos:start="423:78" pos:end="423:79">-&gt;</operator><name pos:start="423:80" pos:end="423:81">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="427:1" pos:end="427:6">#<cpp:directive pos:start="427:2" pos:end="427:6">endif</cpp:directive></cpp:endif>



    <return pos:start="431:5" pos:end="431:13">return <expr pos:start="431:12" pos:end="431:12"><literal type="number" pos:start="431:12" pos:end="431:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
