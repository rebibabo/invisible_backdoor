<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10464.c" pos:tabs="8"><function pos:start="1:1" pos:end="289:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">dca_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:50"><decl pos:start="1:29" pos:end="1:50"><type pos:start="1:29" pos:end="1:50"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="289:1">{<block_content pos:start="9:5" pos:end="287:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">lfe_samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:25">num_core_channels</name> <init pos:start="17:27" pos:end="17:29">= <expr pos:start="17:29" pos:end="17:29"><literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:19">xch_present</name> <init pos:start="21:21" pos:end="21:23">= <expr pos:start="21:23" pos:end="21:23"><literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">int16_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:20">samples</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:37"><decl pos:start="25:5" pos:end="25:36"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:14">DCAContext</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:17">s</name> <init pos:start="25:19" pos:end="25:36">= <expr pos:start="25:21" pos:end="25:36"><name pos:start="25:21" pos:end="25:36"><name pos:start="25:21" pos:end="25:25">avctx</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:17"><decl pos:start="27:5" pos:end="27:16"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:16">channels</name></decl>;</decl_stmt>





    <expr_stmt pos:start="33:5" pos:end="33:97"><expr pos:start="33:5" pos:end="33:96"><name pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:22">dca_buffer_size</name></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <call pos:start="33:26" pos:end="33:96"><name pos:start="33:26" pos:end="33:46">dca_convert_bitstream</name><argument_list pos:start="33:47" pos:end="33:96">(<argument pos:start="33:48" pos:end="33:50"><expr pos:start="33:48" pos:end="33:50"><name pos:start="33:48" pos:end="33:50">buf</name></expr></argument>, <argument pos:start="33:53" pos:end="33:60"><expr pos:start="33:53" pos:end="33:60"><name pos:start="33:53" pos:end="33:60">buf_size</name></expr></argument>, <argument pos:start="33:63" pos:end="33:75"><expr pos:start="33:63" pos:end="33:75"><name pos:start="33:63" pos:end="33:75"><name pos:start="33:63" pos:end="33:63">s</name><operator pos:start="33:64" pos:end="33:65">-&gt;</operator><name pos:start="33:66" pos:end="33:75">dca_buffer</name></name></expr></argument>, <argument pos:start="33:78" pos:end="33:95"><expr pos:start="33:78" pos:end="33:95"><name pos:start="33:78" pos:end="33:95">DCA_MAX_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:33">(<expr pos:start="35:9" pos:end="35:32"><name pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:26">dca_buffer_size</name></name> <operator pos:start="35:28" pos:end="35:29">==</operator> <operator pos:start="35:31" pos:end="35:31">-</operator><literal type="number" pos:start="35:32" pos:end="35:32">1</literal></expr>)</condition> <block pos:start="35:35" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:63"><expr pos:start="37:9" pos:end="37:62"><call pos:start="37:9" pos:end="37:62"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:62">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:61"><expr pos:start="37:37" pos:end="37:61"><literal type="string" pos:start="37:37" pos:end="37:61">"Not a valid DCA frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:65"><expr pos:start="45:5" pos:end="45:64"><call pos:start="45:5" pos:end="45:64"><name pos:start="45:5" pos:end="45:17">init_get_bits</name><argument_list pos:start="45:18" pos:end="45:64">(<argument pos:start="45:19" pos:end="45:24"><expr pos:start="45:19" pos:end="45:24"><operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:24"><name pos:start="45:20" pos:end="45:20">s</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:24">gb</name></name></expr></argument>, <argument pos:start="45:27" pos:end="45:39"><expr pos:start="45:27" pos:end="45:39"><name pos:start="45:27" pos:end="45:39"><name pos:start="45:27" pos:end="45:27">s</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:39">dca_buffer</name></name></expr></argument>, <argument pos:start="45:42" pos:end="45:63"><expr pos:start="45:42" pos:end="45:63"><name pos:start="45:42" pos:end="45:59"><name pos:start="45:42" pos:end="45:42">s</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:59">dca_buffer_size</name></name> <operator pos:start="45:61" pos:end="45:61">*</operator> <literal type="number" pos:start="45:63" pos:end="45:63">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:38">(<expr pos:start="47:9" pos:end="47:37"><call pos:start="47:9" pos:end="47:33"><name pos:start="47:9" pos:end="47:30">dca_parse_frame_header</name><argument_list pos:start="47:31" pos:end="47:33">(<argument pos:start="47:32" pos:end="47:32"><expr pos:start="47:32" pos:end="47:32"><name pos:start="47:32" pos:end="47:32">s</name></expr></argument>)</argument_list></call> <operator pos:start="47:35" pos:end="47:35">&lt;</operator> <literal type="number" pos:start="47:37" pos:end="47:37">0</literal></expr>)</condition> <block pos:start="47:40" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:24">

        <comment type="line" pos:start="49:9" pos:end="49:64">//seems like the frame is corrupt, try with the next one</comment>

        <expr_stmt pos:start="51:9" pos:end="51:21"><expr pos:start="51:9" pos:end="51:20"><operator pos:start="51:9" pos:end="51:9">*</operator><name pos:start="51:10" pos:end="51:18">data_size</name><operator pos:start="51:19" pos:end="51:19">=</operator><literal type="number" pos:start="51:20" pos:end="51:20">0</literal></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:24">return <expr pos:start="53:16" pos:end="53:23"><name pos:start="53:16" pos:end="53:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="57:5" pos:end="57:41">//set AVCodec values with parsed data</comment>

    <expr_stmt pos:start="59:5" pos:end="59:40"><expr pos:start="59:5" pos:end="59:39"><name pos:start="59:5" pos:end="59:22"><name pos:start="59:5" pos:end="59:9">avctx</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:22">sample_rate</name></name> <operator pos:start="59:24" pos:end="59:24">=</operator> <name pos:start="59:26" pos:end="59:39"><name pos:start="59:26" pos:end="59:26">s</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:39">sample_rate</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:34"><expr pos:start="61:5" pos:end="61:33"><name pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:9">avctx</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:19">bit_rate</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:33"><name pos:start="61:23" pos:end="61:23">s</name><operator pos:start="61:24" pos:end="61:25">-&gt;</operator><name pos:start="61:26" pos:end="61:33">bit_rate</name></name></expr>;</expr_stmt>



    <for pos:start="65:5" pos:end="69:5">for <control pos:start="65:9" pos:end="65:48">(<init pos:start="65:10" pos:end="65:15"><expr pos:start="65:10" pos:end="65:14"><name pos:start="65:10" pos:end="65:10">i</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</init> <condition pos:start="65:17" pos:end="65:43"><expr pos:start="65:17" pos:end="65:42"><name pos:start="65:17" pos:end="65:17">i</name> <operator pos:start="65:19" pos:end="65:19">&lt;</operator> <operator pos:start="65:21" pos:end="65:21">(</operator><name pos:start="65:22" pos:end="65:37"><name pos:start="65:22" pos:end="65:22">s</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:37">sample_blocks</name></name> <operator pos:start="65:39" pos:end="65:39">/</operator> <literal type="number" pos:start="65:41" pos:end="65:41">8</literal><operator pos:start="65:42" pos:end="65:42">)</operator></expr>;</condition> <incr pos:start="65:45" pos:end="65:47"><expr pos:start="65:45" pos:end="65:47"><name pos:start="65:45" pos:end="65:45">i</name><operator pos:start="65:46" pos:end="65:47">++</operator></expr></incr>)</control> <block pos:start="65:50" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:34">

        <expr_stmt pos:start="67:9" pos:end="67:34"><expr pos:start="67:9" pos:end="67:33"><call pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:24">dca_decode_block</name><argument_list pos:start="67:25" pos:end="67:33">(<argument pos:start="67:26" pos:end="67:26"><expr pos:start="67:26" pos:end="67:26"><name pos:start="67:26" pos:end="67:26">s</name></expr></argument>, <argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><literal type="number" pos:start="67:29" pos:end="67:29">0</literal></expr></argument>, <argument pos:start="67:32" pos:end="67:32"><expr pos:start="67:32" pos:end="67:32"><name pos:start="67:32" pos:end="67:32">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="73:5" pos:end="73:84">/* record number of core channels incase less than max channels are requested */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:41"><expr pos:start="75:5" pos:end="75:40"><name pos:start="75:5" pos:end="75:21">num_core_channels</name> <operator pos:start="75:23" pos:end="75:23">=</operator> <name pos:start="75:25" pos:end="75:40"><name pos:start="75:25" pos:end="75:25">s</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:40">prim_channels</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:62">/* extensions start at 32-bit boundaries into bitstream */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:59"><expr pos:start="81:5" pos:end="81:58"><call pos:start="81:5" pos:end="81:58"><name pos:start="81:5" pos:end="81:18">skip_bits_long</name><argument_list pos:start="81:19" pos:end="81:58">(<argument pos:start="81:20" pos:end="81:25"><expr pos:start="81:20" pos:end="81:25"><operator pos:start="81:20" pos:end="81:20">&amp;</operator><name pos:start="81:21" pos:end="81:25"><name pos:start="81:21" pos:end="81:21">s</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:25">gb</name></name></expr></argument>, <argument pos:start="81:28" pos:end="81:57"><expr pos:start="81:28" pos:end="81:57"><operator pos:start="81:28" pos:end="81:28">(</operator><operator pos:start="81:29" pos:end="81:29">-</operator><call pos:start="81:30" pos:end="81:51"><name pos:start="81:30" pos:end="81:43">get_bits_count</name><argument_list pos:start="81:44" pos:end="81:51">(<argument pos:start="81:45" pos:end="81:50"><expr pos:start="81:45" pos:end="81:50"><operator pos:start="81:45" pos:end="81:45">&amp;</operator><name pos:start="81:46" pos:end="81:50"><name pos:start="81:46" pos:end="81:46">s</name><operator pos:start="81:47" pos:end="81:48">-&gt;</operator><name pos:start="81:49" pos:end="81:50">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="81:52" pos:end="81:52">)</operator> <operator pos:start="81:54" pos:end="81:54">&amp;</operator> <literal type="number" pos:start="81:56" pos:end="81:57">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="85:5" pos:end="159:5">while<condition pos:start="85:10" pos:end="85:38">(<expr pos:start="85:11" pos:end="85:37"><call pos:start="85:11" pos:end="85:31"><name pos:start="85:11" pos:end="85:23">get_bits_left</name><argument_list pos:start="85:24" pos:end="85:31">(<argument pos:start="85:25" pos:end="85:30"><expr pos:start="85:25" pos:end="85:30"><operator pos:start="85:25" pos:end="85:25">&amp;</operator><name pos:start="85:26" pos:end="85:30"><name pos:start="85:26" pos:end="85:26">s</name><operator pos:start="85:27" pos:end="85:28">-&gt;</operator><name pos:start="85:29" pos:end="85:30">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="85:33" pos:end="85:34">&gt;=</operator> <literal type="number" pos:start="85:36" pos:end="85:37">32</literal></expr>)</condition> <block pos:start="85:40" pos:end="159:5">{<block_content pos:start="87:9" pos:end="157:63">

        <decl_stmt pos:start="87:9" pos:end="87:50"><decl pos:start="87:9" pos:end="87:49"><type pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:16">uint32_t</name></type> <name pos:start="87:18" pos:end="87:21">bits</name> <init pos:start="87:23" pos:end="87:49">= <expr pos:start="87:25" pos:end="87:49"><call pos:start="87:25" pos:end="87:49"><name pos:start="87:25" pos:end="87:37">get_bits_long</name><argument_list pos:start="87:38" pos:end="87:49">(<argument pos:start="87:39" pos:end="87:44"><expr pos:start="87:39" pos:end="87:44"><operator pos:start="87:39" pos:end="87:39">&amp;</operator><name pos:start="87:40" pos:end="87:44"><name pos:start="87:40" pos:end="87:40">s</name><operator pos:start="87:41" pos:end="87:42">-&gt;</operator><name pos:start="87:43" pos:end="87:44">gb</name></name></expr></argument>, <argument pos:start="87:47" pos:end="87:48"><expr pos:start="87:47" pos:end="87:48"><literal type="number" pos:start="87:47" pos:end="87:48">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <switch pos:start="91:9" pos:end="153:9">switch<condition pos:start="91:15" pos:end="91:20">(<expr pos:start="91:16" pos:end="91:19"><name pos:start="91:16" pos:end="91:19">bits</name></expr>)</condition> <block pos:start="91:22" pos:end="153:9">{<block_content pos:start="93:9" pos:end="151:18">

        <case pos:start="93:9" pos:end="93:24">case <expr pos:start="93:14" pos:end="93:23"><literal type="number" pos:start="93:14" pos:end="93:23">0x5a5a5a5a</literal></expr>:</case> <block pos:start="93:26" pos:end="141:9">{<block_content pos:start="95:13" pos:end="139:18">

            <decl_stmt pos:start="95:13" pos:end="95:47"><decl pos:start="95:13" pos:end="95:46"><type pos:start="95:13" pos:end="95:15"><name pos:start="95:13" pos:end="95:15">int</name></type> <name pos:start="95:17" pos:end="95:27">ext_base_ch</name> <init pos:start="95:29" pos:end="95:46">= <expr pos:start="95:31" pos:end="95:46"><name pos:start="95:31" pos:end="95:46"><name pos:start="95:31" pos:end="95:31">s</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:46">prim_channels</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="97:13" pos:end="97:26"><decl pos:start="97:13" pos:end="97:25"><type pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">int</name></type> <name pos:start="97:17" pos:end="97:25">ext_amode</name></decl>;</decl_stmt>



            <comment type="block" pos:start="101:13" pos:end="101:66">/* skip length-to-end-of-frame field for the moment */</comment>

            <expr_stmt pos:start="103:13" pos:end="103:34"><expr pos:start="103:13" pos:end="103:33"><call pos:start="103:13" pos:end="103:33"><name pos:start="103:13" pos:end="103:21">skip_bits</name><argument_list pos:start="103:22" pos:end="103:33">(<argument pos:start="103:23" pos:end="103:28"><expr pos:start="103:23" pos:end="103:28"><operator pos:start="103:23" pos:end="103:23">&amp;</operator><name pos:start="103:24" pos:end="103:28"><name pos:start="103:24" pos:end="103:24">s</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:28">gb</name></name></expr></argument>, <argument pos:start="103:31" pos:end="103:32"><expr pos:start="103:31" pos:end="103:32"><literal type="number" pos:start="103:31" pos:end="103:32">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="107:13" pos:end="107:78">/* extension amode should == 1, number of channels in extension */</comment>

            <comment type="block" pos:start="109:13" pos:end="109:57">/* AFAIK XCh is not used for more channels */</comment>

            <if_stmt pos:start="111:13" pos:end="119:13"><if pos:start="111:13" pos:end="119:13">if <condition pos:start="111:16" pos:end="111:55">(<expr pos:start="111:17" pos:end="111:54"><operator pos:start="111:17" pos:end="111:17">(</operator><name pos:start="111:18" pos:end="111:26">ext_amode</name> <operator pos:start="111:28" pos:end="111:28">=</operator> <call pos:start="111:30" pos:end="111:48"><name pos:start="111:30" pos:end="111:37">get_bits</name><argument_list pos:start="111:38" pos:end="111:48">(<argument pos:start="111:39" pos:end="111:44"><expr pos:start="111:39" pos:end="111:44"><operator pos:start="111:39" pos:end="111:39">&amp;</operator><name pos:start="111:40" pos:end="111:44"><name pos:start="111:40" pos:end="111:40">s</name><operator pos:start="111:41" pos:end="111:42">-&gt;</operator><name pos:start="111:43" pos:end="111:44">gb</name></name></expr></argument>, <argument pos:start="111:47" pos:end="111:47"><expr pos:start="111:47" pos:end="111:47"><literal type="number" pos:start="111:47" pos:end="111:47">4</literal></expr></argument>)</argument_list></call><operator pos:start="111:49" pos:end="111:49">)</operator> <operator pos:start="111:51" pos:end="111:52">!=</operator> <literal type="number" pos:start="111:54" pos:end="111:54">1</literal></expr>)</condition> <block pos:start="111:57" pos:end="119:13">{<block_content pos:start="113:17" pos:end="117:25">

                <expr_stmt pos:start="113:17" pos:end="115:50"><expr pos:start="113:17" pos:end="115:49"><call pos:start="113:17" pos:end="115:49"><name pos:start="113:17" pos:end="113:22">av_log</name><argument_list pos:start="113:23" pos:end="115:49">(<argument pos:start="113:24" pos:end="113:28"><expr pos:start="113:24" pos:end="113:28"><name pos:start="113:24" pos:end="113:28">avctx</name></expr></argument>, <argument pos:start="113:31" pos:end="113:42"><expr pos:start="113:31" pos:end="113:42"><name pos:start="113:31" pos:end="113:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:45" pos:end="115:38"><expr pos:start="113:45" pos:end="115:38"><literal type="string" pos:start="113:45" pos:end="113:72">"XCh extension amode %d not"</literal>

                       <literal type="string" pos:start="115:24" pos:end="115:38">" supported!\n"</literal></expr></argument>,<argument pos:start="115:40" pos:end="115:48"><expr pos:start="115:40" pos:end="115:48"><name pos:start="115:40" pos:end="115:48">ext_amode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="117:17" pos:end="117:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="123:13" pos:end="123:60">/* much like core primary audio coding header */</comment>

            <expr_stmt pos:start="125:13" pos:end="125:58"><expr pos:start="125:13" pos:end="125:57"><call pos:start="125:13" pos:end="125:57"><name pos:start="125:13" pos:end="125:41">dca_parse_audio_coding_header</name><argument_list pos:start="125:42" pos:end="125:57">(<argument pos:start="125:43" pos:end="125:43"><expr pos:start="125:43" pos:end="125:43"><name pos:start="125:43" pos:end="125:43">s</name></expr></argument>, <argument pos:start="125:46" pos:end="125:56"><expr pos:start="125:46" pos:end="125:56"><name pos:start="125:46" pos:end="125:56">ext_base_ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="129:13" pos:end="133:13">for <control pos:start="129:17" pos:end="129:56">(<init pos:start="129:18" pos:end="129:23"><expr pos:start="129:18" pos:end="129:22"><name pos:start="129:18" pos:end="129:18">i</name> <operator pos:start="129:20" pos:end="129:20">=</operator> <literal type="number" pos:start="129:22" pos:end="129:22">0</literal></expr>;</init> <condition pos:start="129:25" pos:end="129:51"><expr pos:start="129:25" pos:end="129:50"><name pos:start="129:25" pos:end="129:25">i</name> <operator pos:start="129:27" pos:end="129:27">&lt;</operator> <operator pos:start="129:29" pos:end="129:29">(</operator><name pos:start="129:30" pos:end="129:45"><name pos:start="129:30" pos:end="129:30">s</name><operator pos:start="129:31" pos:end="129:32">-&gt;</operator><name pos:start="129:33" pos:end="129:45">sample_blocks</name></name> <operator pos:start="129:47" pos:end="129:47">/</operator> <literal type="number" pos:start="129:49" pos:end="129:49">8</literal><operator pos:start="129:50" pos:end="129:50">)</operator></expr>;</condition> <incr pos:start="129:53" pos:end="129:55"><expr pos:start="129:53" pos:end="129:55"><name pos:start="129:53" pos:end="129:53">i</name><operator pos:start="129:54" pos:end="129:55">++</operator></expr></incr>)</control> <block pos:start="129:58" pos:end="133:13">{<block_content pos:start="131:17" pos:end="131:52">

                <expr_stmt pos:start="131:17" pos:end="131:52"><expr pos:start="131:17" pos:end="131:51"><call pos:start="131:17" pos:end="131:51"><name pos:start="131:17" pos:end="131:32">dca_decode_block</name><argument_list pos:start="131:33" pos:end="131:51">(<argument pos:start="131:34" pos:end="131:34"><expr pos:start="131:34" pos:end="131:34"><name pos:start="131:34" pos:end="131:34">s</name></expr></argument>, <argument pos:start="131:37" pos:end="131:47"><expr pos:start="131:37" pos:end="131:47"><name pos:start="131:37" pos:end="131:47">ext_base_ch</name></expr></argument>, <argument pos:start="131:50" pos:end="131:50"><expr pos:start="131:50" pos:end="131:50"><name pos:start="131:50" pos:end="131:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="137:13" pos:end="137:28"><expr pos:start="137:13" pos:end="137:27"><name pos:start="137:13" pos:end="137:23">xch_present</name> <operator pos:start="137:25" pos:end="137:25">=</operator> <literal type="number" pos:start="137:27" pos:end="137:27">1</literal></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        </block_content>}</block>

        <case pos:start="143:9" pos:end="143:24">case <expr pos:start="143:14" pos:end="143:23"><literal type="number" pos:start="143:14" pos:end="143:23">0x1d95f262</literal></expr>:</case>

            <expr_stmt pos:start="145:13" pos:end="145:109"><expr pos:start="145:13" pos:end="145:108"><call pos:start="145:13" pos:end="145:108"><name pos:start="145:13" pos:end="145:18">av_log</name><argument_list pos:start="145:19" pos:end="145:108">(<argument pos:start="145:20" pos:end="145:24"><expr pos:start="145:20" pos:end="145:24"><name pos:start="145:20" pos:end="145:24">avctx</name></expr></argument>, <argument pos:start="145:27" pos:end="145:38"><expr pos:start="145:27" pos:end="145:38"><name pos:start="145:27" pos:end="145:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="145:41" pos:end="145:83"><expr pos:start="145:41" pos:end="145:83"><literal type="string" pos:start="145:41" pos:end="145:83">"Possible X96 extension found at %d bits\n"</literal></expr></argument>, <argument pos:start="145:86" pos:end="145:107"><expr pos:start="145:86" pos:end="145:107"><call pos:start="145:86" pos:end="145:107"><name pos:start="145:86" pos:end="145:99">get_bits_count</name><argument_list pos:start="145:100" pos:end="145:107">(<argument pos:start="145:101" pos:end="145:106"><expr pos:start="145:101" pos:end="145:106"><operator pos:start="145:101" pos:end="145:101">&amp;</operator><name pos:start="145:102" pos:end="145:106"><name pos:start="145:102" pos:end="145:102">s</name><operator pos:start="145:103" pos:end="145:104">-&gt;</operator><name pos:start="145:105" pos:end="145:106">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:88"><expr pos:start="147:13" pos:end="147:87"><call pos:start="147:13" pos:end="147:87"><name pos:start="147:13" pos:end="147:18">av_log</name><argument_list pos:start="147:19" pos:end="147:87">(<argument pos:start="147:20" pos:end="147:24"><expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:24">avctx</name></expr></argument>, <argument pos:start="147:27" pos:end="147:38"><expr pos:start="147:27" pos:end="147:38"><name pos:start="147:27" pos:end="147:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="147:41" pos:end="147:62"><expr pos:start="147:41" pos:end="147:62"><literal type="string" pos:start="147:41" pos:end="147:62">"FSIZE96 = %d bytes\n"</literal></expr></argument>, <argument pos:start="147:65" pos:end="147:86"><expr pos:start="147:65" pos:end="147:86"><call pos:start="147:65" pos:end="147:84"><name pos:start="147:65" pos:end="147:72">get_bits</name><argument_list pos:start="147:73" pos:end="147:84">(<argument pos:start="147:74" pos:end="147:79"><expr pos:start="147:74" pos:end="147:79"><operator pos:start="147:74" pos:end="147:74">&amp;</operator><name pos:start="147:75" pos:end="147:79"><name pos:start="147:75" pos:end="147:75">s</name><operator pos:start="147:76" pos:end="147:77">-&gt;</operator><name pos:start="147:78" pos:end="147:79">gb</name></name></expr></argument>, <argument pos:start="147:82" pos:end="147:83"><expr pos:start="147:82" pos:end="147:83"><literal type="number" pos:start="147:82" pos:end="147:83">12</literal></expr></argument>)</argument_list></call><operator pos:start="147:85" pos:end="147:85">+</operator><literal type="number" pos:start="147:86" pos:end="147:86">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:77"><expr pos:start="149:13" pos:end="149:76"><call pos:start="149:13" pos:end="149:76"><name pos:start="149:13" pos:end="149:18">av_log</name><argument_list pos:start="149:19" pos:end="149:76">(<argument pos:start="149:20" pos:end="149:24"><expr pos:start="149:20" pos:end="149:24"><name pos:start="149:20" pos:end="149:24">avctx</name></expr></argument>, <argument pos:start="149:27" pos:end="149:38"><expr pos:start="149:27" pos:end="149:38"><name pos:start="149:27" pos:end="149:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="149:41" pos:end="149:54"><expr pos:start="149:41" pos:end="149:54"><literal type="string" pos:start="149:41" pos:end="149:54">"REVNO = %d\n"</literal></expr></argument>, <argument pos:start="149:57" pos:end="149:75"><expr pos:start="149:57" pos:end="149:75"><call pos:start="149:57" pos:end="149:75"><name pos:start="149:57" pos:end="149:64">get_bits</name><argument_list pos:start="149:65" pos:end="149:75">(<argument pos:start="149:66" pos:end="149:71"><expr pos:start="149:66" pos:end="149:71"><operator pos:start="149:66" pos:end="149:66">&amp;</operator><name pos:start="149:67" pos:end="149:71"><name pos:start="149:67" pos:end="149:67">s</name><operator pos:start="149:68" pos:end="149:69">-&gt;</operator><name pos:start="149:70" pos:end="149:71">gb</name></name></expr></argument>, <argument pos:start="149:74" pos:end="149:74"><expr pos:start="149:74" pos:end="149:74"><literal type="number" pos:start="149:74" pos:end="149:74">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="151:13" pos:end="151:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="157:9" pos:end="157:63"><expr pos:start="157:9" pos:end="157:62"><call pos:start="157:9" pos:end="157:62"><name pos:start="157:9" pos:end="157:22">skip_bits_long</name><argument_list pos:start="157:23" pos:end="157:62">(<argument pos:start="157:24" pos:end="157:29"><expr pos:start="157:24" pos:end="157:29"><operator pos:start="157:24" pos:end="157:24">&amp;</operator><name pos:start="157:25" pos:end="157:29"><name pos:start="157:25" pos:end="157:25">s</name><operator pos:start="157:26" pos:end="157:27">-&gt;</operator><name pos:start="157:28" pos:end="157:29">gb</name></name></expr></argument>, <argument pos:start="157:32" pos:end="157:61"><expr pos:start="157:32" pos:end="157:61"><operator pos:start="157:32" pos:end="157:32">(</operator><operator pos:start="157:33" pos:end="157:33">-</operator><call pos:start="157:34" pos:end="157:55"><name pos:start="157:34" pos:end="157:47">get_bits_count</name><argument_list pos:start="157:48" pos:end="157:55">(<argument pos:start="157:49" pos:end="157:54"><expr pos:start="157:49" pos:end="157:54"><operator pos:start="157:49" pos:end="157:49">&amp;</operator><name pos:start="157:50" pos:end="157:54"><name pos:start="157:50" pos:end="157:50">s</name><operator pos:start="157:51" pos:end="157:52">-&gt;</operator><name pos:start="157:53" pos:end="157:54">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="157:56" pos:end="157:56">)</operator> <operator pos:start="157:58" pos:end="157:58">&amp;</operator> <literal type="number" pos:start="157:60" pos:end="157:61">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="163:5" pos:end="163:43"><expr pos:start="163:5" pos:end="163:42"><name pos:start="163:5" pos:end="163:12">channels</name> <operator pos:start="163:14" pos:end="163:14">=</operator> <name pos:start="163:16" pos:end="163:31"><name pos:start="163:16" pos:end="163:16">s</name><operator pos:start="163:17" pos:end="163:18">-&gt;</operator><name pos:start="163:19" pos:end="163:31">prim_channels</name></name> <operator pos:start="163:33" pos:end="163:33">+</operator> <operator pos:start="163:35" pos:end="163:35">!</operator><operator pos:start="163:36" pos:end="163:36">!</operator><name pos:start="163:37" pos:end="163:42"><name pos:start="163:37" pos:end="163:37">s</name><operator pos:start="163:38" pos:end="163:39">-&gt;</operator><name pos:start="163:40" pos:end="163:42">lfe</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="167:5" pos:end="231:5"><if pos:start="167:5" pos:end="225:5">if <condition pos:start="167:8" pos:end="167:20">(<expr pos:start="167:9" pos:end="167:19"><name pos:start="167:9" pos:end="167:16"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:16">amode</name></name><operator pos:start="167:17" pos:end="167:17">&lt;</operator><literal type="number" pos:start="167:18" pos:end="167:19">16</literal></expr>)</condition> <block pos:start="167:22" pos:end="225:5">{<block_content pos:start="169:9" pos:end="223:9">

        <expr_stmt pos:start="169:9" pos:end="169:66"><expr pos:start="169:9" pos:end="169:65"><name pos:start="169:9" pos:end="169:29"><name pos:start="169:9" pos:end="169:13">avctx</name><operator pos:start="169:14" pos:end="169:15">-&gt;</operator><name pos:start="169:16" pos:end="169:29">channel_layout</name></name> <operator pos:start="169:31" pos:end="169:31">=</operator> <name pos:start="169:33" pos:end="169:65"><name pos:start="169:33" pos:end="169:55">dca_core_channel_layout</name><index pos:start="169:56" pos:end="169:65">[<expr pos:start="169:57" pos:end="169:64"><name pos:start="169:57" pos:end="169:64"><name pos:start="169:57" pos:end="169:57">s</name><operator pos:start="169:58" pos:end="169:59">-&gt;</operator><name pos:start="169:60" pos:end="169:64">amode</name></name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="173:9" pos:end="203:9"><if pos:start="173:9" pos:end="191:9">if <condition pos:start="173:12" pos:end="175:73">(<expr pos:start="173:13" pos:end="175:72"><name pos:start="173:13" pos:end="173:23">xch_present</name> <operator pos:start="173:25" pos:end="173:26">&amp;&amp;</operator> <operator pos:start="173:28" pos:end="173:28">(</operator><operator pos:start="173:29" pos:end="173:29">!</operator><name pos:start="173:30" pos:end="173:52"><name pos:start="173:30" pos:end="173:34">avctx</name><operator pos:start="173:35" pos:end="173:36">-&gt;</operator><name pos:start="173:37" pos:end="173:52">request_channels</name></name> <operator pos:start="173:54" pos:end="173:55">||</operator>

                            <name pos:start="175:29" pos:end="175:51"><name pos:start="175:29" pos:end="175:33">avctx</name><operator pos:start="175:34" pos:end="175:35">-&gt;</operator><name pos:start="175:36" pos:end="175:51">request_channels</name></name> <operator pos:start="175:53" pos:end="175:53">&gt;</operator> <name pos:start="175:55" pos:end="175:71">num_core_channels</name><operator pos:start="175:72" pos:end="175:72">)</operator></expr>)</condition> <block pos:start="175:75" pos:end="191:9">{<block_content pos:start="177:13" pos:end="189:13">

            <expr_stmt pos:start="177:13" pos:end="177:52"><expr pos:start="177:13" pos:end="177:51"><name pos:start="177:13" pos:end="177:33"><name pos:start="177:13" pos:end="177:17">avctx</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:33">channel_layout</name></name> <operator pos:start="177:35" pos:end="177:36">|=</operator> <name pos:start="177:38" pos:end="177:51">CH_BACK_CENTER</name></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="189:13"><if pos:start="179:13" pos:end="185:13">if <condition pos:start="179:16" pos:end="179:23">(<expr pos:start="179:17" pos:end="179:22"><name pos:start="179:17" pos:end="179:22"><name pos:start="179:17" pos:end="179:17">s</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:22">lfe</name></name></expr>)</condition> <block pos:start="179:25" pos:end="185:13">{<block_content pos:start="181:17" pos:end="183:77">

                <expr_stmt pos:start="181:17" pos:end="181:58"><expr pos:start="181:17" pos:end="181:57"><name pos:start="181:17" pos:end="181:37"><name pos:start="181:17" pos:end="181:21">avctx</name><operator pos:start="181:22" pos:end="181:23">-&gt;</operator><name pos:start="181:24" pos:end="181:37">channel_layout</name></name> <operator pos:start="181:39" pos:end="181:40">|=</operator> <name pos:start="181:42" pos:end="181:57">CH_LOW_FREQUENCY</name></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:77"><expr pos:start="183:17" pos:end="183:76"><name pos:start="183:17" pos:end="183:36"><name pos:start="183:17" pos:end="183:17">s</name><operator pos:start="183:18" pos:end="183:19">-&gt;</operator><name pos:start="183:20" pos:end="183:36">channel_order_tab</name></name> <operator pos:start="183:38" pos:end="183:38">=</operator> <name pos:start="183:40" pos:end="183:76"><name pos:start="183:40" pos:end="183:66">dca_channel_reorder_lfe_xch</name><index pos:start="183:67" pos:end="183:76">[<expr pos:start="183:68" pos:end="183:75"><name pos:start="183:68" pos:end="183:75"><name pos:start="183:68" pos:end="183:68">s</name><operator pos:start="183:69" pos:end="183:70">-&gt;</operator><name pos:start="183:71" pos:end="183:75">amode</name></name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="185:15" pos:end="189:13">else <block pos:start="185:20" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:79">

                <expr_stmt pos:start="187:17" pos:end="187:79"><expr pos:start="187:17" pos:end="187:78"><name pos:start="187:17" pos:end="187:36"><name pos:start="187:17" pos:end="187:17">s</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:36">channel_order_tab</name></name> <operator pos:start="187:38" pos:end="187:38">=</operator> <name pos:start="187:40" pos:end="187:78"><name pos:start="187:40" pos:end="187:68">dca_channel_reorder_nolfe_xch</name><index pos:start="187:69" pos:end="187:78">[<expr pos:start="187:70" pos:end="187:77"><name pos:start="187:70" pos:end="187:77"><name pos:start="187:70" pos:end="187:70">s</name><operator pos:start="187:71" pos:end="187:72">-&gt;</operator><name pos:start="187:73" pos:end="187:77">amode</name></name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="191:11" pos:end="203:9">else <block pos:start="191:16" pos:end="203:9">{<block_content pos:start="193:13" pos:end="201:75">

            <if_stmt pos:start="193:13" pos:end="201:75"><if pos:start="193:13" pos:end="199:13">if <condition pos:start="193:16" pos:end="193:23">(<expr pos:start="193:17" pos:end="193:22"><name pos:start="193:17" pos:end="193:22"><name pos:start="193:17" pos:end="193:17">s</name><operator pos:start="193:18" pos:end="193:19">-&gt;</operator><name pos:start="193:20" pos:end="193:22">lfe</name></name></expr>)</condition> <block pos:start="193:25" pos:end="199:13">{<block_content pos:start="195:17" pos:end="197:73">

                <expr_stmt pos:start="195:17" pos:end="195:58"><expr pos:start="195:17" pos:end="195:57"><name pos:start="195:17" pos:end="195:37"><name pos:start="195:17" pos:end="195:21">avctx</name><operator pos:start="195:22" pos:end="195:23">-&gt;</operator><name pos:start="195:24" pos:end="195:37">channel_layout</name></name> <operator pos:start="195:39" pos:end="195:40">|=</operator> <name pos:start="195:42" pos:end="195:57">CH_LOW_FREQUENCY</name></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:73"><expr pos:start="197:17" pos:end="197:72"><name pos:start="197:17" pos:end="197:36"><name pos:start="197:17" pos:end="197:17">s</name><operator pos:start="197:18" pos:end="197:19">-&gt;</operator><name pos:start="197:20" pos:end="197:36">channel_order_tab</name></name> <operator pos:start="197:38" pos:end="197:38">=</operator> <name pos:start="197:40" pos:end="197:72"><name pos:start="197:40" pos:end="197:62">dca_channel_reorder_lfe</name><index pos:start="197:63" pos:end="197:72">[<expr pos:start="197:64" pos:end="197:71"><name pos:start="197:64" pos:end="197:71"><name pos:start="197:64" pos:end="197:64">s</name><operator pos:start="197:65" pos:end="197:66">-&gt;</operator><name pos:start="197:67" pos:end="197:71">amode</name></name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="199:15" pos:end="201:75">else<block type="pseudo" pos:start="201:17" pos:end="201:75"><block_content pos:start="201:17" pos:end="201:75">

                <expr_stmt pos:start="201:17" pos:end="201:75"><expr pos:start="201:17" pos:end="201:74"><name pos:start="201:17" pos:end="201:36"><name pos:start="201:17" pos:end="201:17">s</name><operator pos:start="201:18" pos:end="201:19">-&gt;</operator><name pos:start="201:20" pos:end="201:36">channel_order_tab</name></name> <operator pos:start="201:38" pos:end="201:38">=</operator> <name pos:start="201:40" pos:end="201:74"><name pos:start="201:40" pos:end="201:64">dca_channel_reorder_nolfe</name><index pos:start="201:65" pos:end="201:74">[<expr pos:start="201:66" pos:end="201:73"><name pos:start="201:66" pos:end="201:73"><name pos:start="201:66" pos:end="201:66">s</name><operator pos:start="201:67" pos:end="201:68">-&gt;</operator><name pos:start="201:69" pos:end="201:73">amode</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="207:9" pos:end="211:22"><if pos:start="207:9" pos:end="211:22">if <condition pos:start="207:12" pos:end="209:59">(<expr pos:start="207:13" pos:end="209:58"><name pos:start="207:13" pos:end="207:28"><name pos:start="207:13" pos:end="207:13">s</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:28">prim_channels</name></name> <operator pos:start="207:30" pos:end="207:30">&gt;</operator> <literal type="number" pos:start="207:32" pos:end="207:32">0</literal> <operator pos:start="207:34" pos:end="207:35">&amp;&amp;</operator>

            <name pos:start="209:13" pos:end="209:54"><name pos:start="209:13" pos:end="209:13">s</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:32">channel_order_tab</name><index pos:start="209:33" pos:end="209:54">[<expr pos:start="209:34" pos:end="209:53"><name pos:start="209:34" pos:end="209:49"><name pos:start="209:34" pos:end="209:34">s</name><operator pos:start="209:35" pos:end="209:36">-&gt;</operator><name pos:start="209:37" pos:end="209:49">prim_channels</name></name> <operator pos:start="209:51" pos:end="209:51">-</operator> <literal type="number" pos:start="209:53" pos:end="209:53">1</literal></expr>]</index></name> <operator pos:start="209:56" pos:end="209:56">&lt;</operator> <literal type="number" pos:start="209:58" pos:end="209:58">0</literal></expr>)</condition><block type="pseudo" pos:start="211:13" pos:end="211:22"><block_content pos:start="211:13" pos:end="211:22">

            <return pos:start="211:13" pos:end="211:22">return <expr pos:start="211:20" pos:end="211:21"><operator pos:start="211:20" pos:end="211:20">-</operator><literal type="number" pos:start="211:21" pos:end="211:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="215:9" pos:end="223:9"><if pos:start="215:9" pos:end="223:9">if <condition pos:start="215:12" pos:end="215:65">(<expr pos:start="215:13" pos:end="215:64"><name pos:start="215:13" pos:end="215:35"><name pos:start="215:13" pos:end="215:17">avctx</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:35">request_channels</name></name> <operator pos:start="215:37" pos:end="215:38">==</operator> <literal type="number" pos:start="215:40" pos:end="215:40">2</literal> <operator pos:start="215:42" pos:end="215:43">&amp;&amp;</operator> <name pos:start="215:45" pos:end="215:60"><name pos:start="215:45" pos:end="215:45">s</name><operator pos:start="215:46" pos:end="215:47">-&gt;</operator><name pos:start="215:48" pos:end="215:60">prim_channels</name></name> <operator pos:start="215:62" pos:end="215:62">&gt;</operator> <literal type="number" pos:start="215:64" pos:end="215:64">2</literal></expr>)</condition> <block pos:start="215:67" pos:end="223:9">{<block_content pos:start="217:13" pos:end="221:53">

            <expr_stmt pos:start="217:13" pos:end="217:25"><expr pos:start="217:13" pos:end="217:24"><name pos:start="217:13" pos:end="217:20">channels</name> <operator pos:start="217:22" pos:end="217:22">=</operator> <literal type="number" pos:start="217:24" pos:end="217:24">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:35"><expr pos:start="219:13" pos:end="219:34"><name pos:start="219:13" pos:end="219:21"><name pos:start="219:13" pos:end="219:13">s</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:21">output</name></name> <operator pos:start="219:23" pos:end="219:23">=</operator> <name pos:start="219:25" pos:end="219:34">DCA_STEREO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:53"><expr pos:start="221:13" pos:end="221:52"><name pos:start="221:13" pos:end="221:33"><name pos:start="221:13" pos:end="221:17">avctx</name><operator pos:start="221:18" pos:end="221:19">-&gt;</operator><name pos:start="221:20" pos:end="221:33">channel_layout</name></name> <operator pos:start="221:35" pos:end="221:35">=</operator> <name pos:start="221:37" pos:end="221:52">CH_LAYOUT_STEREO</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="225:7" pos:end="231:5">else <block pos:start="225:12" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:18">

        <expr_stmt pos:start="227:9" pos:end="227:82"><expr pos:start="227:9" pos:end="227:81"><call pos:start="227:9" pos:end="227:81"><name pos:start="227:9" pos:end="227:14">av_log</name><argument_list pos:start="227:15" pos:end="227:81">(<argument pos:start="227:16" pos:end="227:20"><expr pos:start="227:16" pos:end="227:20"><name pos:start="227:16" pos:end="227:20">avctx</name></expr></argument>, <argument pos:start="227:23" pos:end="227:34"><expr pos:start="227:23" pos:end="227:34"><name pos:start="227:23" pos:end="227:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="227:37" pos:end="227:71"><expr pos:start="227:37" pos:end="227:71"><literal type="string" pos:start="227:37" pos:end="227:71">"Non standard configuration %d !\n"</literal></expr></argument>,<argument pos:start="227:73" pos:end="227:80"><expr pos:start="227:73" pos:end="227:80"><name pos:start="227:73" pos:end="227:80"><name pos:start="227:73" pos:end="227:73">s</name><operator pos:start="227:74" pos:end="227:75">-&gt;</operator><name pos:start="227:76" pos:end="227:80">amode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="229:9" pos:end="229:18">return <expr pos:start="229:16" pos:end="229:17"><operator pos:start="229:16" pos:end="229:16">-</operator><literal type="number" pos:start="229:17" pos:end="229:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>





    <comment type="block" pos:start="237:5" pos:end="245:56">/* There is nothing that prevents a dts frame to change channel configuration

       but FFmpeg doesn't support that so only set the channels if it is previously

       unset. Ideally during the first probe for channels the crc should be checked

       and only set avctx-&gt;channels when the crc is ok. Right now the decoder could

       set the channels based on a broken first frame.*/</comment>

    <if_stmt pos:start="247:5" pos:end="249:35"><if pos:start="247:5" pos:end="249:35">if <condition pos:start="247:8" pos:end="247:25">(<expr pos:start="247:9" pos:end="247:24"><operator pos:start="247:9" pos:end="247:9">!</operator><name pos:start="247:10" pos:end="247:24"><name pos:start="247:10" pos:end="247:14">avctx</name><operator pos:start="247:15" pos:end="247:16">-&gt;</operator><name pos:start="247:17" pos:end="247:24">channels</name></name></expr>)</condition><block type="pseudo" pos:start="249:9" pos:end="249:35"><block_content pos:start="249:9" pos:end="249:35">

        <expr_stmt pos:start="249:9" pos:end="249:35"><expr pos:start="249:9" pos:end="249:34"><name pos:start="249:9" pos:end="249:23"><name pos:start="249:9" pos:end="249:13">avctx</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:23">channels</name></name> <operator pos:start="249:25" pos:end="249:25">=</operator> <name pos:start="249:27" pos:end="249:34">channels</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="253:5" pos:end="255:18"><if pos:start="253:5" pos:end="255:18">if <condition pos:start="253:8" pos:end="253:79">(<expr pos:start="253:9" pos:end="253:78"><operator pos:start="253:9" pos:end="253:9">*</operator><name pos:start="253:10" pos:end="253:18">data_size</name> <operator pos:start="253:20" pos:end="253:20">&lt;</operator> <operator pos:start="253:22" pos:end="253:22">(</operator><name pos:start="253:23" pos:end="253:38"><name pos:start="253:23" pos:end="253:23">s</name><operator pos:start="253:24" pos:end="253:25">-&gt;</operator><name pos:start="253:26" pos:end="253:38">sample_blocks</name></name> <operator pos:start="253:40" pos:end="253:40">/</operator> <literal type="number" pos:start="253:42" pos:end="253:42">8</literal><operator pos:start="253:43" pos:end="253:43">)</operator> <operator pos:start="253:45" pos:end="253:45">*</operator> <literal type="number" pos:start="253:47" pos:end="253:49">256</literal> <operator pos:start="253:51" pos:end="253:51">*</operator> <sizeof pos:start="253:53" pos:end="253:67">sizeof<argument_list pos:start="253:59" pos:end="253:67">(<argument pos:start="253:60" pos:end="253:66"><expr pos:start="253:60" pos:end="253:66"><name pos:start="253:60" pos:end="253:66">int16_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="253:69" pos:end="253:69">*</operator> <name pos:start="253:71" pos:end="253:78">channels</name></expr>)</condition><block type="pseudo" pos:start="255:9" pos:end="255:18"><block_content pos:start="255:9" pos:end="255:18">

        <return pos:start="255:9" pos:end="255:18">return <expr pos:start="255:16" pos:end="255:17"><operator pos:start="255:16" pos:end="255:16">-</operator><literal type="number" pos:start="255:17" pos:end="255:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:73"><expr pos:start="257:5" pos:end="257:72"><operator pos:start="257:5" pos:end="257:5">*</operator><name pos:start="257:6" pos:end="257:14">data_size</name> <operator pos:start="257:16" pos:end="257:16">=</operator> <literal type="number" pos:start="257:18" pos:end="257:20">256</literal> <operator pos:start="257:22" pos:end="257:22">/</operator> <literal type="number" pos:start="257:24" pos:end="257:24">8</literal> <operator pos:start="257:26" pos:end="257:26">*</operator> <name pos:start="257:28" pos:end="257:43"><name pos:start="257:28" pos:end="257:28">s</name><operator pos:start="257:29" pos:end="257:30">-&gt;</operator><name pos:start="257:31" pos:end="257:43">sample_blocks</name></name> <operator pos:start="257:45" pos:end="257:45">*</operator> <sizeof pos:start="257:47" pos:end="257:61">sizeof<argument_list pos:start="257:53" pos:end="257:61">(<argument pos:start="257:54" pos:end="257:60"><expr pos:start="257:54" pos:end="257:60"><name pos:start="257:54" pos:end="257:60">int16_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="257:63" pos:end="257:63">*</operator> <name pos:start="257:65" pos:end="257:72">channels</name></expr>;</expr_stmt>



    <comment type="block" pos:start="261:5" pos:end="261:36">/* filter to get final output */</comment>

    <for pos:start="263:5" pos:end="271:5">for <control pos:start="263:9" pos:end="263:48">(<init pos:start="263:10" pos:end="263:15"><expr pos:start="263:10" pos:end="263:14"><name pos:start="263:10" pos:end="263:10">i</name> <operator pos:start="263:12" pos:end="263:12">=</operator> <literal type="number" pos:start="263:14" pos:end="263:14">0</literal></expr>;</init> <condition pos:start="263:17" pos:end="263:43"><expr pos:start="263:17" pos:end="263:42"><name pos:start="263:17" pos:end="263:17">i</name> <operator pos:start="263:19" pos:end="263:19">&lt;</operator> <operator pos:start="263:21" pos:end="263:21">(</operator><name pos:start="263:22" pos:end="263:37"><name pos:start="263:22" pos:end="263:22">s</name><operator pos:start="263:23" pos:end="263:24">-&gt;</operator><name pos:start="263:25" pos:end="263:37">sample_blocks</name></name> <operator pos:start="263:39" pos:end="263:39">/</operator> <literal type="number" pos:start="263:41" pos:end="263:41">8</literal><operator pos:start="263:42" pos:end="263:42">)</operator></expr>;</condition> <incr pos:start="263:45" pos:end="263:47"><expr pos:start="263:45" pos:end="263:47"><name pos:start="263:45" pos:end="263:45">i</name><operator pos:start="263:46" pos:end="263:47">++</operator></expr></incr>)</control> <block pos:start="263:50" pos:end="271:5">{<block_content pos:start="265:9" pos:end="269:34">

        <expr_stmt pos:start="265:9" pos:end="265:34"><expr pos:start="265:9" pos:end="265:33"><call pos:start="265:9" pos:end="265:33"><name pos:start="265:9" pos:end="265:27">dca_filter_channels</name><argument_list pos:start="265:28" pos:end="265:33">(<argument pos:start="265:29" pos:end="265:29"><expr pos:start="265:29" pos:end="265:29"><name pos:start="265:29" pos:end="265:29">s</name></expr></argument>, <argument pos:start="265:32" pos:end="265:32"><expr pos:start="265:32" pos:end="265:32"><name pos:start="265:32" pos:end="265:32">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:85"><expr pos:start="267:9" pos:end="267:84"><call pos:start="267:9" pos:end="267:84"><name pos:start="267:9" pos:end="267:40"><name pos:start="267:9" pos:end="267:9">s</name><operator pos:start="267:10" pos:end="267:11">-&gt;</operator><name pos:start="267:12" pos:end="267:14">dsp</name><operator pos:start="267:15" pos:end="267:15">.</operator><name pos:start="267:16" pos:end="267:40">float_to_int16_interleave</name></name><argument_list pos:start="267:41" pos:end="267:84">(<argument pos:start="267:42" pos:end="267:48"><expr pos:start="267:42" pos:end="267:48"><name pos:start="267:42" pos:end="267:48">samples</name></expr></argument>, <argument pos:start="267:51" pos:end="267:68"><expr pos:start="267:51" pos:end="267:68"><name pos:start="267:51" pos:end="267:68"><name pos:start="267:51" pos:end="267:51">s</name><operator pos:start="267:52" pos:end="267:53">-&gt;</operator><name pos:start="267:54" pos:end="267:68">samples_chanptr</name></name></expr></argument>, <argument pos:start="267:71" pos:end="267:73"><expr pos:start="267:71" pos:end="267:73"><literal type="number" pos:start="267:71" pos:end="267:73">256</literal></expr></argument>, <argument pos:start="267:76" pos:end="267:83"><expr pos:start="267:76" pos:end="267:83"><name pos:start="267:76" pos:end="267:83">channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:34"><expr pos:start="269:9" pos:end="269:33"><name pos:start="269:9" pos:end="269:15">samples</name> <operator pos:start="269:17" pos:end="269:18">+=</operator> <literal type="number" pos:start="269:20" pos:end="269:22">256</literal> <operator pos:start="269:24" pos:end="269:24">*</operator> <name pos:start="269:26" pos:end="269:33">channels</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="275:5" pos:end="275:28">/* update lfe history */</comment>

    <expr_stmt pos:start="277:5" pos:end="277:54"><expr pos:start="277:5" pos:end="277:53"><name pos:start="277:5" pos:end="277:15">lfe_samples</name> <operator pos:start="277:17" pos:end="277:17">=</operator> <literal type="number" pos:start="277:19" pos:end="277:19">2</literal> <operator pos:start="277:21" pos:end="277:21">*</operator> <name pos:start="277:23" pos:end="277:28"><name pos:start="277:23" pos:end="277:23">s</name><operator pos:start="277:24" pos:end="277:25">-&gt;</operator><name pos:start="277:26" pos:end="277:28">lfe</name></name> <operator pos:start="277:30" pos:end="277:30">*</operator> <operator pos:start="277:32" pos:end="277:32">(</operator><name pos:start="277:33" pos:end="277:48"><name pos:start="277:33" pos:end="277:33">s</name><operator pos:start="277:34" pos:end="277:35">-&gt;</operator><name pos:start="277:36" pos:end="277:48">sample_blocks</name></name> <operator pos:start="277:50" pos:end="277:50">/</operator> <literal type="number" pos:start="277:52" pos:end="277:52">8</literal><operator pos:start="277:53" pos:end="277:53">)</operator></expr>;</expr_stmt>

    <for pos:start="279:5" pos:end="283:5">for <control pos:start="279:9" pos:end="279:40">(<init pos:start="279:10" pos:end="279:15"><expr pos:start="279:10" pos:end="279:14"><name pos:start="279:10" pos:end="279:10">i</name> <operator pos:start="279:12" pos:end="279:12">=</operator> <literal type="number" pos:start="279:14" pos:end="279:14">0</literal></expr>;</init> <condition pos:start="279:17" pos:end="279:35"><expr pos:start="279:17" pos:end="279:34"><name pos:start="279:17" pos:end="279:17">i</name> <operator pos:start="279:19" pos:end="279:19">&lt;</operator> <literal type="number" pos:start="279:21" pos:end="279:21">2</literal> <operator pos:start="279:23" pos:end="279:23">*</operator> <name pos:start="279:25" pos:end="279:30"><name pos:start="279:25" pos:end="279:25">s</name><operator pos:start="279:26" pos:end="279:27">-&gt;</operator><name pos:start="279:28" pos:end="279:30">lfe</name></name> <operator pos:start="279:32" pos:end="279:32">*</operator> <literal type="number" pos:start="279:34" pos:end="279:34">4</literal></expr>;</condition> <incr pos:start="279:37" pos:end="279:39"><expr pos:start="279:37" pos:end="279:39"><name pos:start="279:37" pos:end="279:37">i</name><operator pos:start="279:38" pos:end="279:39">++</operator></expr></incr>)</control> <block pos:start="279:42" pos:end="283:5">{<block_content pos:start="281:9" pos:end="281:54">

        <expr_stmt pos:start="281:9" pos:end="281:54"><expr pos:start="281:9" pos:end="281:53"><name pos:start="281:9" pos:end="281:22"><name pos:start="281:9" pos:end="281:9">s</name><operator pos:start="281:10" pos:end="281:11">-&gt;</operator><name pos:start="281:12" pos:end="281:19">lfe_data</name><index pos:start="281:20" pos:end="281:22">[<expr pos:start="281:21" pos:end="281:21"><name pos:start="281:21" pos:end="281:21">i</name></expr>]</index></name> <operator pos:start="281:24" pos:end="281:24">=</operator> <name pos:start="281:26" pos:end="281:53"><name pos:start="281:26" pos:end="281:26">s</name><operator pos:start="281:27" pos:end="281:28">-&gt;</operator><name pos:start="281:29" pos:end="281:36">lfe_data</name><index pos:start="281:37" pos:end="281:53">[<expr pos:start="281:38" pos:end="281:52"><name pos:start="281:38" pos:end="281:38">i</name> <operator pos:start="281:40" pos:end="281:40">+</operator> <name pos:start="281:42" pos:end="281:52">lfe_samples</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="287:5" pos:end="287:20">return <expr pos:start="287:12" pos:end="287:19"><name pos:start="287:12" pos:end="287:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
