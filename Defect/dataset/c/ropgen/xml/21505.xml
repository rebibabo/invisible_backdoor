<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21505.c" pos:tabs="8"><function pos:start="1:1" pos:end="247:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">scale_vaapi_filter_frame</name><parameter_list pos:start="1:36" pos:end="1:79">(<parameter pos:start="1:37" pos:end="1:56"><decl pos:start="1:37" pos:end="1:56"><type pos:start="1:37" pos:end="1:56"><name pos:start="1:37" pos:end="1:48">AVFilterLink</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:56">inlink</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:78"><decl pos:start="1:59" pos:end="1:78"><type pos:start="1:59" pos:end="1:78"><name pos:start="1:59" pos:end="1:65">AVFrame</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:78">input_frame</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="247:1">{<block_content pos:start="5:5" pos:end="245:15">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">AVFilterContext</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:26">avctx</name> <init pos:start="5:28" pos:end="5:40">= <expr pos:start="5:30" pos:end="5:40"><name pos:start="5:30" pos:end="5:40"><name pos:start="5:30" pos:end="5:35">inlink</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:40">dst</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">AVFilterLink</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:25">outlink</name> <init pos:start="7:27" pos:end="7:45">= <expr pos:start="7:29" pos:end="7:45"><name pos:start="7:29" pos:end="7:45"><name pos:start="7:29" pos:end="7:33">avctx</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:42">outputs</name><index pos:start="7:43" pos:end="7:45">[<expr pos:start="7:44" pos:end="7:44"><literal type="number" pos:start="7:44" pos:end="7:44">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">ScaleVAAPIContext</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:26">ctx</name> <init pos:start="9:28" pos:end="9:40">= <expr pos:start="9:30" pos:end="9:40"><name pos:start="9:30" pos:end="9:40"><name pos:start="9:30" pos:end="9:34">avctx</name><operator pos:start="9:35" pos:end="9:36">-&gt;</operator><name pos:start="9:37" pos:end="9:40">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:25">output_frame</name> <init pos:start="11:27" pos:end="11:32">= <expr pos:start="11:29" pos:end="11:32"><name pos:start="11:29" pos:end="11:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">VASurfaceID</name></type> <name pos:start="13:17" pos:end="13:29">input_surface</name></decl>, <decl pos:start="13:32" pos:end="13:45"><type ref="prev" pos:start="13:5" pos:end="13:15"/><name pos:start="13:32" pos:end="13:45">output_surface</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:33">VAProcPipelineParameterBuffer</name></type> <name pos:start="15:35" pos:end="15:40">params</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">VABufferID</name></type> <name pos:start="17:16" pos:end="17:24">params_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">VAStatus</name></type> <name pos:start="19:14" pos:end="19:16">vas</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">err</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="29:70"><expr pos:start="25:5" pos:end="29:69"><call pos:start="25:5" pos:end="29:69"><name pos:start="25:5" pos:end="25:10">av_log</name><argument_list pos:start="25:11" pos:end="29:69">(<argument pos:start="25:12" pos:end="25:14"><expr pos:start="25:12" pos:end="25:14"><name pos:start="25:12" pos:end="25:14">ctx</name></expr></argument>, <argument pos:start="25:17" pos:end="25:28"><expr pos:start="25:17" pos:end="25:28"><name pos:start="25:17" pos:end="25:28">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="25:31" pos:end="25:70"><expr pos:start="25:31" pos:end="25:70"><literal type="string" pos:start="25:31" pos:end="25:58">"Filter input: %s, %ux%u (%"</literal><name pos:start="25:59" pos:end="25:64">PRId64</name><literal type="string" pos:start="25:65" pos:end="25:70">").\n"</literal></expr></argument>,

           <argument pos:start="27:12" pos:end="27:51"><expr pos:start="27:12" pos:end="27:51"><call pos:start="27:12" pos:end="27:51"><name pos:start="27:12" pos:end="27:30">av_get_pix_fmt_name</name><argument_list pos:start="27:31" pos:end="27:51">(<argument pos:start="27:32" pos:end="27:50"><expr pos:start="27:32" pos:end="27:50"><name pos:start="27:32" pos:end="27:50"><name pos:start="27:32" pos:end="27:42">input_frame</name><operator pos:start="27:43" pos:end="27:44">-&gt;</operator><name pos:start="27:45" pos:end="27:50">format</name></name></expr></argument>)</argument_list></call></expr></argument>,

           <argument pos:start="29:12" pos:end="29:29"><expr pos:start="29:12" pos:end="29:29"><name pos:start="29:12" pos:end="29:29"><name pos:start="29:12" pos:end="29:22">input_frame</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:29">width</name></name></expr></argument>, <argument pos:start="29:32" pos:end="29:50"><expr pos:start="29:32" pos:end="29:50"><name pos:start="29:32" pos:end="29:50"><name pos:start="29:32" pos:end="29:42">input_frame</name><operator pos:start="29:43" pos:end="29:44">-&gt;</operator><name pos:start="29:45" pos:end="29:50">height</name></name></expr></argument>, <argument pos:start="29:53" pos:end="29:68"><expr pos:start="29:53" pos:end="29:68"><name pos:start="29:53" pos:end="29:68"><name pos:start="29:53" pos:end="29:63">input_frame</name><operator pos:start="29:64" pos:end="29:65">-&gt;</operator><name pos:start="29:66" pos:end="29:68">pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="35:31"><if pos:start="33:5" pos:end="35:31">if <condition pos:start="33:8" pos:end="33:41">(<expr pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:11">ctx</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:23">va_context</name></name> <operator pos:start="33:25" pos:end="33:26">==</operator> <name pos:start="33:28" pos:end="33:40">VA_INVALID_ID</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:31"><block_content pos:start="35:9" pos:end="35:31">

        <return pos:start="35:9" pos:end="35:31">return <expr pos:start="35:16" pos:end="35:30"><call pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:22">AVERROR</name><argument_list pos:start="35:23" pos:end="35:30">(<argument pos:start="35:24" pos:end="35:29"><expr pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:65"><expr pos:start="39:5" pos:end="39:64"><name pos:start="39:5" pos:end="39:17">input_surface</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <operator pos:start="39:21" pos:end="39:21">(</operator><name pos:start="39:22" pos:end="39:32">VASurfaceID</name><operator pos:start="39:33" pos:end="39:33">)</operator><operator pos:start="39:34" pos:end="39:34">(</operator><name pos:start="39:35" pos:end="39:43">uintptr_t</name><operator pos:start="39:44" pos:end="39:44">)</operator><name pos:start="39:45" pos:end="39:64"><name pos:start="39:45" pos:end="39:55">input_frame</name><operator pos:start="39:56" pos:end="39:57">-&gt;</operator><name pos:start="39:58" pos:end="39:61">data</name><index pos:start="39:62" pos:end="39:64">[<expr pos:start="39:63" pos:end="39:63"><literal type="number" pos:start="39:63" pos:end="39:63">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="43:26"><expr pos:start="41:5" pos:end="43:25"><call pos:start="41:5" pos:end="43:25"><name pos:start="41:5" pos:end="41:10">av_log</name><argument_list pos:start="41:11" pos:end="43:25">(<argument pos:start="41:12" pos:end="41:14"><expr pos:start="41:12" pos:end="41:14"><name pos:start="41:12" pos:end="41:14">ctx</name></expr></argument>, <argument pos:start="41:17" pos:end="41:28"><expr pos:start="41:17" pos:end="41:28"><name pos:start="41:17" pos:end="41:28">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="41:31" pos:end="41:68"><expr pos:start="41:31" pos:end="41:68"><literal type="string" pos:start="41:31" pos:end="41:68">"Using surface %#x for scale input.\n"</literal></expr></argument>,

           <argument pos:start="43:12" pos:end="43:24"><expr pos:start="43:12" pos:end="43:24"><name pos:start="43:12" pos:end="43:24">input_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:36"><expr pos:start="47:5" pos:end="47:35"><name pos:start="47:5" pos:end="47:16">output_frame</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <call pos:start="47:20" pos:end="47:35"><name pos:start="47:20" pos:end="47:33">av_frame_alloc</name><argument_list pos:start="47:34" pos:end="47:35">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:22">(<expr pos:start="49:9" pos:end="49:21"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:21">output_frame</name></expr>)</condition> <block pos:start="49:24" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:18">

        <expr_stmt pos:start="51:9" pos:end="51:70"><expr pos:start="51:9" pos:end="51:69"><call pos:start="51:9" pos:end="51:69"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:69">(<argument pos:start="51:16" pos:end="51:18"><expr pos:start="51:16" pos:end="51:18"><name pos:start="51:16" pos:end="51:18">ctx</name></expr></argument>, <argument pos:start="51:21" pos:end="51:32"><expr pos:start="51:21" pos:end="51:32"><name pos:start="51:21" pos:end="51:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:35" pos:end="51:68"><expr pos:start="51:35" pos:end="51:68"><literal type="string" pos:start="51:35" pos:end="51:68">"Failed to allocate output frame."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:30"><expr pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:11">err</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:29"><name pos:start="53:15" pos:end="53:21">AVERROR</name><argument_list pos:start="53:22" pos:end="53:29">(<argument pos:start="53:23" pos:end="53:28"><expr pos:start="53:23" pos:end="53:28"><name pos:start="53:23" pos:end="53:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:73"><expr pos:start="61:5" pos:end="61:72"><name pos:start="61:5" pos:end="61:7">err</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:72"><name pos:start="61:11" pos:end="61:31">av_hwframe_get_buffer</name><argument_list pos:start="61:32" pos:end="61:72">(<argument pos:start="61:33" pos:end="61:54"><expr pos:start="61:33" pos:end="61:54"><name pos:start="61:33" pos:end="61:54"><name pos:start="61:33" pos:end="61:35">ctx</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:54">output_frames_ref</name></name></expr></argument>, <argument pos:start="61:57" pos:end="61:68"><expr pos:start="61:57" pos:end="61:68"><name pos:start="61:57" pos:end="61:68">output_frame</name></expr></argument>, <argument pos:start="61:71" pos:end="61:71"><expr pos:start="61:71" pos:end="61:71"><literal type="number" pos:start="61:71" pos:end="61:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">err</name> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition> <block pos:start="63:18" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:37">

        <expr_stmt pos:start="65:9" pos:end="67:37"><expr pos:start="65:9" pos:end="67:36"><call pos:start="65:9" pos:end="67:36"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="67:36">(<argument pos:start="65:16" pos:end="65:18"><expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ctx</name></expr></argument>, <argument pos:start="65:21" pos:end="65:32"><expr pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:35" pos:end="67:30"><expr pos:start="65:35" pos:end="67:30"><literal type="string" pos:start="65:35" pos:end="65:62">"Failed to get surface for "</literal>

               <literal type="string" pos:start="67:16" pos:end="67:30">"output: %d\n."</literal></expr></argument>, <argument pos:start="67:33" pos:end="67:35"><expr pos:start="67:33" pos:end="67:35"><name pos:start="67:33" pos:end="67:35">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:67"><expr pos:start="73:5" pos:end="73:66"><name pos:start="73:5" pos:end="73:18">output_surface</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <operator pos:start="73:22" pos:end="73:22">(</operator><name pos:start="73:23" pos:end="73:33">VASurfaceID</name><operator pos:start="73:34" pos:end="73:34">)</operator><operator pos:start="73:35" pos:end="73:35">(</operator><name pos:start="73:36" pos:end="73:44">uintptr_t</name><operator pos:start="73:45" pos:end="73:45">)</operator><name pos:start="73:46" pos:end="73:66"><name pos:start="73:46" pos:end="73:57">output_frame</name><operator pos:start="73:58" pos:end="73:59">-&gt;</operator><name pos:start="73:60" pos:end="73:63">data</name><index pos:start="73:64" pos:end="73:66">[<expr pos:start="73:65" pos:end="73:65"><literal type="number" pos:start="73:65" pos:end="73:65">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="77:27"><expr pos:start="75:5" pos:end="77:26"><call pos:start="75:5" pos:end="77:26"><name pos:start="75:5" pos:end="75:10">av_log</name><argument_list pos:start="75:11" pos:end="77:26">(<argument pos:start="75:12" pos:end="75:14"><expr pos:start="75:12" pos:end="75:14"><name pos:start="75:12" pos:end="75:14">ctx</name></expr></argument>, <argument pos:start="75:17" pos:end="75:28"><expr pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:28">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="75:31" pos:end="75:69"><expr pos:start="75:31" pos:end="75:69"><literal type="string" pos:start="75:31" pos:end="75:69">"Using surface %#x for scale output.\n"</literal></expr></argument>,

           <argument pos:start="77:12" pos:end="77:25"><expr pos:start="77:12" pos:end="77:25"><name pos:start="77:12" pos:end="77:25">output_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:39"><expr pos:start="81:5" pos:end="81:38"><call pos:start="81:5" pos:end="81:38"><name pos:start="81:5" pos:end="81:10">memset</name><argument_list pos:start="81:11" pos:end="81:38">(<argument pos:start="81:12" pos:end="81:18"><expr pos:start="81:12" pos:end="81:18"><operator pos:start="81:12" pos:end="81:12">&amp;</operator><name pos:start="81:13" pos:end="81:18">params</name></expr></argument>, <argument pos:start="81:21" pos:end="81:21"><expr pos:start="81:21" pos:end="81:21"><literal type="number" pos:start="81:21" pos:end="81:21">0</literal></expr></argument>, <argument pos:start="81:24" pos:end="81:37"><expr pos:start="81:24" pos:end="81:37"><sizeof pos:start="81:24" pos:end="81:37">sizeof<argument_list pos:start="81:30" pos:end="81:37">(<argument pos:start="81:31" pos:end="81:36"><expr pos:start="81:31" pos:end="81:36"><name pos:start="81:31" pos:end="81:36">params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:35"><expr pos:start="85:5" pos:end="85:34"><name pos:start="85:5" pos:end="85:18"><name pos:start="85:5" pos:end="85:10">params</name><operator pos:start="85:11" pos:end="85:11">.</operator><name pos:start="85:12" pos:end="85:18">surface</name></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <name pos:start="85:22" pos:end="85:34">input_surface</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:30"><expr pos:start="87:5" pos:end="87:29"><name pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:10">params</name><operator pos:start="87:11" pos:end="87:11">.</operator><name pos:start="87:12" pos:end="87:25">surface_region</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <literal type="number" pos:start="87:29" pos:end="87:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="91:60"><expr pos:start="89:5" pos:end="91:59"><name pos:start="89:5" pos:end="89:33"><name pos:start="89:5" pos:end="89:10">params</name><operator pos:start="89:11" pos:end="89:11">.</operator><name pos:start="89:12" pos:end="89:33">surface_color_standard</name></name> <operator pos:start="89:35" pos:end="89:35">=</operator>

        <call pos:start="91:9" pos:end="91:59"><name pos:start="91:9" pos:end="91:34">vaapi_proc_colour_standard</name><argument_list pos:start="91:35" pos:end="91:59">(<argument pos:start="91:36" pos:end="91:58"><expr pos:start="91:36" pos:end="91:58"><name pos:start="91:36" pos:end="91:58"><name pos:start="91:36" pos:end="91:46">input_frame</name><operator pos:start="91:47" pos:end="91:48">-&gt;</operator><name pos:start="91:49" pos:end="91:58">colorspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:29"><expr pos:start="95:5" pos:end="95:28"><name pos:start="95:5" pos:end="95:24"><name pos:start="95:5" pos:end="95:10">params</name><operator pos:start="95:11" pos:end="95:11">.</operator><name pos:start="95:12" pos:end="95:24">output_region</name></name> <operator pos:start="95:26" pos:end="95:26">=</operator> <literal type="number" pos:start="95:28" pos:end="95:28">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:48"><expr pos:start="97:5" pos:end="97:47"><name pos:start="97:5" pos:end="97:34"><name pos:start="97:5" pos:end="97:10">params</name><operator pos:start="97:11" pos:end="97:11">.</operator><name pos:start="97:12" pos:end="97:34">output_background_color</name></name> <operator pos:start="97:36" pos:end="97:36">=</operator> <literal type="number" pos:start="97:38" pos:end="97:47">0xff000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:65"><expr pos:start="99:5" pos:end="99:64"><name pos:start="99:5" pos:end="99:32"><name pos:start="99:5" pos:end="99:10">params</name><operator pos:start="99:11" pos:end="99:11">.</operator><name pos:start="99:12" pos:end="99:32">output_color_standard</name></name> <operator pos:start="99:34" pos:end="99:34">=</operator> <name pos:start="99:36" pos:end="99:64"><name pos:start="99:36" pos:end="99:41">params</name><operator pos:start="99:42" pos:end="99:42">.</operator><name pos:start="99:43" pos:end="99:64">surface_color_standard</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:30"><expr pos:start="103:5" pos:end="103:29"><name pos:start="103:5" pos:end="103:25"><name pos:start="103:5" pos:end="103:10">params</name><operator pos:start="103:11" pos:end="103:11">.</operator><name pos:start="103:12" pos:end="103:25">pipeline_flags</name></name> <operator pos:start="103:27" pos:end="103:27">=</operator> <literal type="number" pos:start="103:29" pos:end="103:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:47"><expr pos:start="105:5" pos:end="105:46"><name pos:start="105:5" pos:end="105:23"><name pos:start="105:5" pos:end="105:10">params</name><operator pos:start="105:11" pos:end="105:11">.</operator><name pos:start="105:12" pos:end="105:23">filter_flags</name></name> <operator pos:start="105:25" pos:end="105:25">=</operator> <name pos:start="105:27" pos:end="105:46">VA_FILTER_SCALING_HQ</name></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="111:58"><expr pos:start="109:5" pos:end="111:57"><name pos:start="109:5" pos:end="109:7">vas</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="111:57"><name pos:start="109:11" pos:end="109:24">vaBeginPicture</name><argument_list pos:start="109:25" pos:end="111:57">(<argument pos:start="109:26" pos:end="109:44"><expr pos:start="109:26" pos:end="109:44"><name pos:start="109:26" pos:end="109:44"><name pos:start="109:26" pos:end="109:28">ctx</name><operator pos:start="109:29" pos:end="109:30">-&gt;</operator><name pos:start="109:31" pos:end="109:35">hwctx</name><operator pos:start="109:36" pos:end="109:37">-&gt;</operator><name pos:start="109:38" pos:end="109:44">display</name></name></expr></argument>,

                         <argument pos:start="111:26" pos:end="111:40"><expr pos:start="111:26" pos:end="111:40"><name pos:start="111:26" pos:end="111:40"><name pos:start="111:26" pos:end="111:28">ctx</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:40">va_context</name></name></expr></argument>, <argument pos:start="111:43" pos:end="111:56"><expr pos:start="111:43" pos:end="111:56"><name pos:start="111:43" pos:end="111:56">output_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="123:5"><if pos:start="113:5" pos:end="123:5">if <condition pos:start="113:8" pos:end="113:33">(<expr pos:start="113:9" pos:end="113:32"><name pos:start="113:9" pos:end="113:11">vas</name> <operator pos:start="113:13" pos:end="113:14">!=</operator> <name pos:start="113:16" pos:end="113:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="113:35" pos:end="123:5">{<block_content pos:start="115:9" pos:end="121:18">

        <expr_stmt pos:start="115:9" pos:end="117:51"><expr pos:start="115:9" pos:end="117:50"><call pos:start="115:9" pos:end="117:50"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="117:50">(<argument pos:start="115:16" pos:end="115:18"><expr pos:start="115:16" pos:end="115:18"><name pos:start="115:16" pos:end="115:18">ctx</name></expr></argument>, <argument pos:start="115:21" pos:end="115:32"><expr pos:start="115:21" pos:end="115:32"><name pos:start="115:21" pos:end="115:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:35" pos:end="117:27"><expr pos:start="115:35" pos:end="117:27"><literal type="string" pos:start="115:35" pos:end="115:66">"Failed to attach new picture: "</literal>

               <literal type="string" pos:start="117:16" pos:end="117:27">"%d (%s).\n"</literal></expr></argument>, <argument pos:start="117:30" pos:end="117:32"><expr pos:start="117:30" pos:end="117:32"><name pos:start="117:30" pos:end="117:32">vas</name></expr></argument>, <argument pos:start="117:35" pos:end="117:49"><expr pos:start="117:35" pos:end="117:49"><call pos:start="117:35" pos:end="117:49"><name pos:start="117:35" pos:end="117:44">vaErrorStr</name><argument_list pos:start="117:45" pos:end="117:49">(<argument pos:start="117:46" pos:end="117:48"><expr pos:start="117:46" pos:end="117:48"><name pos:start="117:46" pos:end="117:48">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:27"><expr pos:start="119:9" pos:end="119:26"><name pos:start="119:9" pos:end="119:11">err</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:26"><name pos:start="119:15" pos:end="119:21">AVERROR</name><argument_list pos:start="119:22" pos:end="119:26">(<argument pos:start="119:23" pos:end="119:25"><expr pos:start="119:23" pos:end="119:25"><name pos:start="119:23" pos:end="119:25">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:18">goto <name pos:start="121:14" pos:end="121:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="131:65"><expr pos:start="127:5" pos:end="131:64"><name pos:start="127:5" pos:end="127:7">vas</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <call pos:start="127:11" pos:end="131:64"><name pos:start="127:11" pos:end="127:24">vaCreateBuffer</name><argument_list pos:start="127:25" pos:end="131:64">(<argument pos:start="127:26" pos:end="127:44"><expr pos:start="127:26" pos:end="127:44"><name pos:start="127:26" pos:end="127:44"><name pos:start="127:26" pos:end="127:28">ctx</name><operator pos:start="127:29" pos:end="127:30">-&gt;</operator><name pos:start="127:31" pos:end="127:35">hwctx</name><operator pos:start="127:36" pos:end="127:37">-&gt;</operator><name pos:start="127:38" pos:end="127:44">display</name></name></expr></argument>, <argument pos:start="127:47" pos:end="127:61"><expr pos:start="127:47" pos:end="127:61"><name pos:start="127:47" pos:end="127:61"><name pos:start="127:47" pos:end="127:49">ctx</name><operator pos:start="127:50" pos:end="127:51">-&gt;</operator><name pos:start="127:52" pos:end="127:61">va_context</name></name></expr></argument>,

                         <argument pos:start="129:26" pos:end="129:58"><expr pos:start="129:26" pos:end="129:58"><name pos:start="129:26" pos:end="129:58">VAProcPipelineParameterBufferType</name></expr></argument>,

                         <argument pos:start="131:26" pos:end="131:39"><expr pos:start="131:26" pos:end="131:39"><sizeof pos:start="131:26" pos:end="131:39">sizeof<argument_list pos:start="131:32" pos:end="131:39">(<argument pos:start="131:33" pos:end="131:38"><expr pos:start="131:33" pos:end="131:38"><name pos:start="131:33" pos:end="131:38">params</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="131:42" pos:end="131:42"><expr pos:start="131:42" pos:end="131:42"><literal type="number" pos:start="131:42" pos:end="131:42">1</literal></expr></argument>, <argument pos:start="131:45" pos:end="131:51"><expr pos:start="131:45" pos:end="131:51"><operator pos:start="131:45" pos:end="131:45">&amp;</operator><name pos:start="131:46" pos:end="131:51">params</name></expr></argument>, <argument pos:start="131:54" pos:end="131:63"><expr pos:start="131:54" pos:end="131:63"><operator pos:start="131:54" pos:end="131:54">&amp;</operator><name pos:start="131:55" pos:end="131:63">params_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="143:5"><if pos:start="133:5" pos:end="143:5">if <condition pos:start="133:8" pos:end="133:33">(<expr pos:start="133:9" pos:end="133:32"><name pos:start="133:9" pos:end="133:11">vas</name> <operator pos:start="133:13" pos:end="133:14">!=</operator> <name pos:start="133:16" pos:end="133:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="133:35" pos:end="143:5">{<block_content pos:start="135:9" pos:end="141:30">

        <expr_stmt pos:start="135:9" pos:end="137:51"><expr pos:start="135:9" pos:end="137:50"><call pos:start="135:9" pos:end="137:50"><name pos:start="135:9" pos:end="135:14">av_log</name><argument_list pos:start="135:15" pos:end="137:50">(<argument pos:start="135:16" pos:end="135:18"><expr pos:start="135:16" pos:end="135:18"><name pos:start="135:16" pos:end="135:18">ctx</name></expr></argument>, <argument pos:start="135:21" pos:end="135:32"><expr pos:start="135:21" pos:end="135:32"><name pos:start="135:21" pos:end="135:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="135:35" pos:end="137:27"><expr pos:start="135:35" pos:end="137:27"><literal type="string" pos:start="135:35" pos:end="135:71">"Failed to create parameter buffer: "</literal>

               <literal type="string" pos:start="137:16" pos:end="137:27">"%d (%s).\n"</literal></expr></argument>, <argument pos:start="137:30" pos:end="137:32"><expr pos:start="137:30" pos:end="137:32"><name pos:start="137:30" pos:end="137:32">vas</name></expr></argument>, <argument pos:start="137:35" pos:end="137:49"><expr pos:start="137:35" pos:end="137:49"><call pos:start="137:35" pos:end="137:49"><name pos:start="137:35" pos:end="137:44">vaErrorStr</name><argument_list pos:start="137:45" pos:end="137:49">(<argument pos:start="137:46" pos:end="137:48"><expr pos:start="137:46" pos:end="137:48"><name pos:start="137:46" pos:end="137:48">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:27"><expr pos:start="139:9" pos:end="139:26"><name pos:start="139:9" pos:end="139:11">err</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <call pos:start="139:15" pos:end="139:26"><name pos:start="139:15" pos:end="139:21">AVERROR</name><argument_list pos:start="139:22" pos:end="139:26">(<argument pos:start="139:23" pos:end="139:25"><expr pos:start="139:23" pos:end="139:25"><name pos:start="139:23" pos:end="139:25">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="141:9" pos:end="141:30">goto <name pos:start="141:14" pos:end="141:29">fail_after_begin</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="145:5" pos:end="147:22"><expr pos:start="145:5" pos:end="147:21"><call pos:start="145:5" pos:end="147:21"><name pos:start="145:5" pos:end="145:10">av_log</name><argument_list pos:start="145:11" pos:end="147:21">(<argument pos:start="145:12" pos:end="145:14"><expr pos:start="145:12" pos:end="145:14"><name pos:start="145:12" pos:end="145:14">ctx</name></expr></argument>, <argument pos:start="145:17" pos:end="145:28"><expr pos:start="145:17" pos:end="145:28"><name pos:start="145:17" pos:end="145:28">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="145:31" pos:end="145:67"><expr pos:start="145:31" pos:end="145:67"><literal type="string" pos:start="145:31" pos:end="145:67">"Pipeline parameter buffer is %#x.\n"</literal></expr></argument>,

           <argument pos:start="147:12" pos:end="147:20"><expr pos:start="147:12" pos:end="147:20"><name pos:start="147:12" pos:end="147:20">params_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="153:41"><expr pos:start="151:5" pos:end="153:40"><name pos:start="151:5" pos:end="151:7">vas</name> <operator pos:start="151:9" pos:end="151:9">=</operator> <call pos:start="151:11" pos:end="153:40"><name pos:start="151:11" pos:end="151:25">vaRenderPicture</name><argument_list pos:start="151:26" pos:end="153:40">(<argument pos:start="151:27" pos:end="151:45"><expr pos:start="151:27" pos:end="151:45"><name pos:start="151:27" pos:end="151:45"><name pos:start="151:27" pos:end="151:29">ctx</name><operator pos:start="151:30" pos:end="151:31">-&gt;</operator><name pos:start="151:32" pos:end="151:36">hwctx</name><operator pos:start="151:37" pos:end="151:38">-&gt;</operator><name pos:start="151:39" pos:end="151:45">display</name></name></expr></argument>, <argument pos:start="151:48" pos:end="151:62"><expr pos:start="151:48" pos:end="151:62"><name pos:start="151:48" pos:end="151:62"><name pos:start="151:48" pos:end="151:50">ctx</name><operator pos:start="151:51" pos:end="151:52">-&gt;</operator><name pos:start="151:53" pos:end="151:62">va_context</name></name></expr></argument>,

                          <argument pos:start="153:27" pos:end="153:36"><expr pos:start="153:27" pos:end="153:36"><operator pos:start="153:27" pos:end="153:27">&amp;</operator><name pos:start="153:28" pos:end="153:36">params_id</name></expr></argument>, <argument pos:start="153:39" pos:end="153:39"><expr pos:start="153:39" pos:end="153:39"><literal type="number" pos:start="153:39" pos:end="153:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="165:5"><if pos:start="155:5" pos:end="165:5">if <condition pos:start="155:8" pos:end="155:33">(<expr pos:start="155:9" pos:end="155:32"><name pos:start="155:9" pos:end="155:11">vas</name> <operator pos:start="155:13" pos:end="155:14">!=</operator> <name pos:start="155:16" pos:end="155:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="155:35" pos:end="165:5">{<block_content pos:start="157:9" pos:end="163:30">

        <expr_stmt pos:start="157:9" pos:end="159:51"><expr pos:start="157:9" pos:end="159:50"><call pos:start="157:9" pos:end="159:50"><name pos:start="157:9" pos:end="157:14">av_log</name><argument_list pos:start="157:15" pos:end="159:50">(<argument pos:start="157:16" pos:end="157:18"><expr pos:start="157:16" pos:end="157:18"><name pos:start="157:16" pos:end="157:18">ctx</name></expr></argument>, <argument pos:start="157:21" pos:end="157:32"><expr pos:start="157:21" pos:end="157:32"><name pos:start="157:21" pos:end="157:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="157:35" pos:end="159:27"><expr pos:start="157:35" pos:end="159:27"><literal type="string" pos:start="157:35" pos:end="157:71">"Failed to render parameter buffer: "</literal>

               <literal type="string" pos:start="159:16" pos:end="159:27">"%d (%s).\n"</literal></expr></argument>, <argument pos:start="159:30" pos:end="159:32"><expr pos:start="159:30" pos:end="159:32"><name pos:start="159:30" pos:end="159:32">vas</name></expr></argument>, <argument pos:start="159:35" pos:end="159:49"><expr pos:start="159:35" pos:end="159:49"><call pos:start="159:35" pos:end="159:49"><name pos:start="159:35" pos:end="159:44">vaErrorStr</name><argument_list pos:start="159:45" pos:end="159:49">(<argument pos:start="159:46" pos:end="159:48"><expr pos:start="159:46" pos:end="159:48"><name pos:start="159:46" pos:end="159:48">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:27"><expr pos:start="161:9" pos:end="161:26"><name pos:start="161:9" pos:end="161:11">err</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <call pos:start="161:15" pos:end="161:26"><name pos:start="161:15" pos:end="161:21">AVERROR</name><argument_list pos:start="161:22" pos:end="161:26">(<argument pos:start="161:23" pos:end="161:25"><expr pos:start="161:23" pos:end="161:25"><name pos:start="161:23" pos:end="161:25">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="163:9" pos:end="163:30">goto <name pos:start="163:14" pos:end="163:29">fail_after_begin</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:61"><expr pos:start="169:5" pos:end="169:60"><name pos:start="169:5" pos:end="169:7">vas</name> <operator pos:start="169:9" pos:end="169:9">=</operator> <call pos:start="169:11" pos:end="169:60"><name pos:start="169:11" pos:end="169:22">vaEndPicture</name><argument_list pos:start="169:23" pos:end="169:60">(<argument pos:start="169:24" pos:end="169:42"><expr pos:start="169:24" pos:end="169:42"><name pos:start="169:24" pos:end="169:42"><name pos:start="169:24" pos:end="169:26">ctx</name><operator pos:start="169:27" pos:end="169:28">-&gt;</operator><name pos:start="169:29" pos:end="169:33">hwctx</name><operator pos:start="169:34" pos:end="169:35">-&gt;</operator><name pos:start="169:36" pos:end="169:42">display</name></name></expr></argument>, <argument pos:start="169:45" pos:end="169:59"><expr pos:start="169:45" pos:end="169:59"><name pos:start="169:45" pos:end="169:59"><name pos:start="169:45" pos:end="169:47">ctx</name><operator pos:start="169:48" pos:end="169:49">-&gt;</operator><name pos:start="169:50" pos:end="169:59">va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="171:5" pos:end="181:5"><if pos:start="171:5" pos:end="181:5">if <condition pos:start="171:8" pos:end="171:33">(<expr pos:start="171:9" pos:end="171:32"><name pos:start="171:9" pos:end="171:11">vas</name> <operator pos:start="171:13" pos:end="171:14">!=</operator> <name pos:start="171:16" pos:end="171:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="171:35" pos:end="181:5">{<block_content pos:start="173:9" pos:end="179:31">

        <expr_stmt pos:start="173:9" pos:end="175:51"><expr pos:start="173:9" pos:end="175:50"><call pos:start="173:9" pos:end="175:50"><name pos:start="173:9" pos:end="173:14">av_log</name><argument_list pos:start="173:15" pos:end="175:50">(<argument pos:start="173:16" pos:end="173:18"><expr pos:start="173:16" pos:end="173:18"><name pos:start="173:16" pos:end="173:18">ctx</name></expr></argument>, <argument pos:start="173:21" pos:end="173:32"><expr pos:start="173:21" pos:end="173:32"><name pos:start="173:21" pos:end="173:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="173:35" pos:end="175:27"><expr pos:start="173:35" pos:end="175:27"><literal type="string" pos:start="173:35" pos:end="173:72">"Failed to start picture processing: "</literal>

               <literal type="string" pos:start="175:16" pos:end="175:27">"%d (%s).\n"</literal></expr></argument>, <argument pos:start="175:30" pos:end="175:32"><expr pos:start="175:30" pos:end="175:32"><name pos:start="175:30" pos:end="175:32">vas</name></expr></argument>, <argument pos:start="175:35" pos:end="175:49"><expr pos:start="175:35" pos:end="175:49"><call pos:start="175:35" pos:end="175:49"><name pos:start="175:35" pos:end="175:44">vaErrorStr</name><argument_list pos:start="175:45" pos:end="175:49">(<argument pos:start="175:46" pos:end="175:48"><expr pos:start="175:46" pos:end="175:48"><name pos:start="175:46" pos:end="175:48">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:27"><expr pos:start="177:9" pos:end="177:26"><name pos:start="177:9" pos:end="177:11">err</name> <operator pos:start="177:13" pos:end="177:13">=</operator> <call pos:start="177:15" pos:end="177:26"><name pos:start="177:15" pos:end="177:21">AVERROR</name><argument_list pos:start="177:22" pos:end="177:26">(<argument pos:start="177:23" pos:end="177:25"><expr pos:start="177:23" pos:end="177:25"><name pos:start="177:23" pos:end="177:25">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="179:9" pos:end="179:31">goto <name pos:start="179:14" pos:end="179:30">fail_after_render</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="185:5" pos:end="201:5"><if pos:start="185:5" pos:end="201:5">if <condition pos:start="185:8" pos:end="187:51">(<expr pos:start="185:9" pos:end="187:50"><name pos:start="185:9" pos:end="185:33"><name pos:start="185:9" pos:end="185:11">ctx</name><operator pos:start="185:12" pos:end="185:13">-&gt;</operator><name pos:start="185:14" pos:end="185:18">hwctx</name><operator pos:start="185:19" pos:end="185:20">-&gt;</operator><name pos:start="185:21" pos:end="185:33">driver_quirks</name></name> <operator pos:start="185:35" pos:end="185:35">&amp;</operator>

        <name pos:start="187:9" pos:end="187:50">AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS</name></expr>)</condition> <block pos:start="187:53" pos:end="201:5">{<block_content pos:start="189:9" pos:end="199:9">

        <expr_stmt pos:start="189:9" pos:end="189:62"><expr pos:start="189:9" pos:end="189:61"><name pos:start="189:9" pos:end="189:11">vas</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="189:61"><name pos:start="189:15" pos:end="189:29">vaDestroyBuffer</name><argument_list pos:start="189:30" pos:end="189:61">(<argument pos:start="189:31" pos:end="189:49"><expr pos:start="189:31" pos:end="189:49"><name pos:start="189:31" pos:end="189:49"><name pos:start="189:31" pos:end="189:33">ctx</name><operator pos:start="189:34" pos:end="189:35">-&gt;</operator><name pos:start="189:36" pos:end="189:40">hwctx</name><operator pos:start="189:41" pos:end="189:42">-&gt;</operator><name pos:start="189:43" pos:end="189:49">display</name></name></expr></argument>, <argument pos:start="189:52" pos:end="189:60"><expr pos:start="189:52" pos:end="189:60"><name pos:start="189:52" pos:end="189:60">params_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="199:9"><if pos:start="191:9" pos:end="199:9">if <condition pos:start="191:12" pos:end="191:37">(<expr pos:start="191:13" pos:end="191:36"><name pos:start="191:13" pos:end="191:15">vas</name> <operator pos:start="191:17" pos:end="191:18">!=</operator> <name pos:start="191:20" pos:end="191:36">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="191:39" pos:end="199:9">{<block_content pos:start="193:13" pos:end="195:55">

            <expr_stmt pos:start="193:13" pos:end="195:55"><expr pos:start="193:13" pos:end="195:54"><call pos:start="193:13" pos:end="195:54"><name pos:start="193:13" pos:end="193:18">av_log</name><argument_list pos:start="193:19" pos:end="195:54">(<argument pos:start="193:20" pos:end="193:22"><expr pos:start="193:20" pos:end="193:22"><name pos:start="193:20" pos:end="193:22">ctx</name></expr></argument>, <argument pos:start="193:25" pos:end="193:36"><expr pos:start="193:25" pos:end="193:36"><name pos:start="193:25" pos:end="193:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="193:39" pos:end="195:31"><expr pos:start="193:39" pos:end="195:31"><literal type="string" pos:start="193:39" pos:end="193:73">"Failed to free parameter buffer: "</literal>

                   <literal type="string" pos:start="195:20" pos:end="195:31">"%d (%s).\n"</literal></expr></argument>, <argument pos:start="195:34" pos:end="195:36"><expr pos:start="195:34" pos:end="195:36"><name pos:start="195:34" pos:end="195:36">vas</name></expr></argument>, <argument pos:start="195:39" pos:end="195:53"><expr pos:start="195:39" pos:end="195:53"><call pos:start="195:39" pos:end="195:53"><name pos:start="195:39" pos:end="195:48">vaErrorStr</name><argument_list pos:start="195:49" pos:end="195:53">(<argument pos:start="195:50" pos:end="195:52"><expr pos:start="195:50" pos:end="195:52"><name pos:start="195:50" pos:end="195:52">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="197:13" pos:end="197:26">// And ignore.</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:51"><expr pos:start="205:5" pos:end="205:50"><call pos:start="205:5" pos:end="205:50"><name pos:start="205:5" pos:end="205:23">av_frame_copy_props</name><argument_list pos:start="205:24" pos:end="205:50">(<argument pos:start="205:25" pos:end="205:36"><expr pos:start="205:25" pos:end="205:36"><name pos:start="205:25" pos:end="205:36">output_frame</name></expr></argument>, <argument pos:start="205:39" pos:end="205:49"><expr pos:start="205:39" pos:end="205:49"><name pos:start="205:39" pos:end="205:49">input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:32"><expr pos:start="207:5" pos:end="207:31"><call pos:start="207:5" pos:end="207:31"><name pos:start="207:5" pos:end="207:17">av_frame_free</name><argument_list pos:start="207:18" pos:end="207:31">(<argument pos:start="207:19" pos:end="207:30"><expr pos:start="207:19" pos:end="207:30"><operator pos:start="207:19" pos:end="207:19">&amp;</operator><name pos:start="207:20" pos:end="207:30">input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="211:5" pos:end="215:73"><expr pos:start="211:5" pos:end="215:72"><call pos:start="211:5" pos:end="215:72"><name pos:start="211:5" pos:end="211:10">av_log</name><argument_list pos:start="211:11" pos:end="215:72">(<argument pos:start="211:12" pos:end="211:14"><expr pos:start="211:12" pos:end="211:14"><name pos:start="211:12" pos:end="211:14">ctx</name></expr></argument>, <argument pos:start="211:17" pos:end="211:28"><expr pos:start="211:17" pos:end="211:28"><name pos:start="211:17" pos:end="211:28">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="211:31" pos:end="211:71"><expr pos:start="211:31" pos:end="211:71"><literal type="string" pos:start="211:31" pos:end="211:59">"Filter output: %s, %ux%u (%"</literal><name pos:start="211:60" pos:end="211:65">PRId64</name><literal type="string" pos:start="211:66" pos:end="211:71">").\n"</literal></expr></argument>,

           <argument pos:start="213:12" pos:end="213:52"><expr pos:start="213:12" pos:end="213:52"><call pos:start="213:12" pos:end="213:52"><name pos:start="213:12" pos:end="213:30">av_get_pix_fmt_name</name><argument_list pos:start="213:31" pos:end="213:52">(<argument pos:start="213:32" pos:end="213:51"><expr pos:start="213:32" pos:end="213:51"><name pos:start="213:32" pos:end="213:51"><name pos:start="213:32" pos:end="213:43">output_frame</name><operator pos:start="213:44" pos:end="213:45">-&gt;</operator><name pos:start="213:46" pos:end="213:51">format</name></name></expr></argument>)</argument_list></call></expr></argument>,

           <argument pos:start="215:12" pos:end="215:30"><expr pos:start="215:12" pos:end="215:30"><name pos:start="215:12" pos:end="215:30"><name pos:start="215:12" pos:end="215:23">output_frame</name><operator pos:start="215:24" pos:end="215:25">-&gt;</operator><name pos:start="215:26" pos:end="215:30">width</name></name></expr></argument>, <argument pos:start="215:33" pos:end="215:52"><expr pos:start="215:33" pos:end="215:52"><name pos:start="215:33" pos:end="215:52"><name pos:start="215:33" pos:end="215:44">output_frame</name><operator pos:start="215:45" pos:end="215:46">-&gt;</operator><name pos:start="215:47" pos:end="215:52">height</name></name></expr></argument>, <argument pos:start="215:55" pos:end="215:71"><expr pos:start="215:55" pos:end="215:71"><name pos:start="215:55" pos:end="215:71"><name pos:start="215:55" pos:end="215:66">output_frame</name><operator pos:start="215:67" pos:end="215:68">-&gt;</operator><name pos:start="215:69" pos:end="215:71">pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="219:5" pos:end="219:50">return <expr pos:start="219:12" pos:end="219:49"><call pos:start="219:12" pos:end="219:49"><name pos:start="219:12" pos:end="219:26">ff_filter_frame</name><argument_list pos:start="219:27" pos:end="219:49">(<argument pos:start="219:28" pos:end="219:34"><expr pos:start="219:28" pos:end="219:34"><name pos:start="219:28" pos:end="219:34">outlink</name></expr></argument>, <argument pos:start="219:37" pos:end="219:48"><expr pos:start="219:37" pos:end="219:48"><name pos:start="219:37" pos:end="219:48">output_frame</name></expr></argument>)</argument_list></call></expr>;</return>



    <comment type="line" pos:start="223:5" pos:end="223:75">// We want to make sure that if vaBeginPicture has been called, we also</comment>

    <comment type="line" pos:start="225:5" pos:end="225:75">// call vaRenderPicture and vaEndPicture.  These calls may well fail or</comment>

    <comment type="line" pos:start="227:5" pos:end="227:73">// do something else nasty, but once we're in this failure case there</comment>

    <comment type="line" pos:start="229:5" pos:end="229:33">// isn't much else we can do.</comment>

<label pos:start="231:1" pos:end="231:17"><name pos:start="231:1" pos:end="231:16">fail_after_begin</name>:</label>

    <expr_stmt pos:start="233:5" pos:end="233:73"><expr pos:start="233:5" pos:end="233:72"><call pos:start="233:5" pos:end="233:72"><name pos:start="233:5" pos:end="233:19">vaRenderPicture</name><argument_list pos:start="233:20" pos:end="233:72">(<argument pos:start="233:21" pos:end="233:39"><expr pos:start="233:21" pos:end="233:39"><name pos:start="233:21" pos:end="233:39"><name pos:start="233:21" pos:end="233:23">ctx</name><operator pos:start="233:24" pos:end="233:25">-&gt;</operator><name pos:start="233:26" pos:end="233:30">hwctx</name><operator pos:start="233:31" pos:end="233:32">-&gt;</operator><name pos:start="233:33" pos:end="233:39">display</name></name></expr></argument>, <argument pos:start="233:42" pos:end="233:56"><expr pos:start="233:42" pos:end="233:56"><name pos:start="233:42" pos:end="233:56"><name pos:start="233:42" pos:end="233:44">ctx</name><operator pos:start="233:45" pos:end="233:46">-&gt;</operator><name pos:start="233:47" pos:end="233:56">va_context</name></name></expr></argument>, <argument pos:start="233:59" pos:end="233:68"><expr pos:start="233:59" pos:end="233:68"><operator pos:start="233:59" pos:end="233:59">&amp;</operator><name pos:start="233:60" pos:end="233:68">params_id</name></expr></argument>, <argument pos:start="233:71" pos:end="233:71"><expr pos:start="233:71" pos:end="233:71"><literal type="number" pos:start="233:71" pos:end="233:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="235:1" pos:end="235:18"><name pos:start="235:1" pos:end="235:17">fail_after_render</name>:</label>

    <expr_stmt pos:start="237:5" pos:end="237:55"><expr pos:start="237:5" pos:end="237:54"><call pos:start="237:5" pos:end="237:54"><name pos:start="237:5" pos:end="237:16">vaEndPicture</name><argument_list pos:start="237:17" pos:end="237:54">(<argument pos:start="237:18" pos:end="237:36"><expr pos:start="237:18" pos:end="237:36"><name pos:start="237:18" pos:end="237:36"><name pos:start="237:18" pos:end="237:20">ctx</name><operator pos:start="237:21" pos:end="237:22">-&gt;</operator><name pos:start="237:23" pos:end="237:27">hwctx</name><operator pos:start="237:28" pos:end="237:29">-&gt;</operator><name pos:start="237:30" pos:end="237:36">display</name></name></expr></argument>, <argument pos:start="237:39" pos:end="237:53"><expr pos:start="237:39" pos:end="237:53"><name pos:start="237:39" pos:end="237:53"><name pos:start="237:39" pos:end="237:41">ctx</name><operator pos:start="237:42" pos:end="237:43">-&gt;</operator><name pos:start="237:44" pos:end="237:53">va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="239:1" pos:end="239:5"><name pos:start="239:1" pos:end="239:4">fail</name>:</label>

    <expr_stmt pos:start="241:5" pos:end="241:32"><expr pos:start="241:5" pos:end="241:31"><call pos:start="241:5" pos:end="241:31"><name pos:start="241:5" pos:end="241:17">av_frame_free</name><argument_list pos:start="241:18" pos:end="241:31">(<argument pos:start="241:19" pos:end="241:30"><expr pos:start="241:19" pos:end="241:30"><operator pos:start="241:19" pos:end="241:19">&amp;</operator><name pos:start="241:20" pos:end="241:30">input_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:33"><expr pos:start="243:5" pos:end="243:32"><call pos:start="243:5" pos:end="243:32"><name pos:start="243:5" pos:end="243:17">av_frame_free</name><argument_list pos:start="243:18" pos:end="243:32">(<argument pos:start="243:19" pos:end="243:31"><expr pos:start="243:19" pos:end="243:31"><operator pos:start="243:19" pos:end="243:19">&amp;</operator><name pos:start="243:20" pos:end="243:31">output_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="245:5" pos:end="245:15">return <expr pos:start="245:12" pos:end="245:14"><name pos:start="245:12" pos:end="245:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
