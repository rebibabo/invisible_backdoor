<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21605.c" pos:tabs="8"><function pos:start="1:1" pos:end="349:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">synthfilt_build_sb_samples</name> <parameter_list pos:start="1:39" pos:end="1:109">(<parameter pos:start="1:40" pos:end="1:53"><decl pos:start="1:40" pos:end="1:53"><type pos:start="1:40" pos:end="1:53"><name pos:start="1:40" pos:end="1:50">QDM2Context</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">q</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:72"><decl pos:start="1:56" pos:end="1:72"><type pos:start="1:56" pos:end="1:72"><name pos:start="1:56" pos:end="1:68">GetBitContext</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:72">gb</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:84"><decl pos:start="1:75" pos:end="1:84"><type pos:start="1:75" pos:end="1:84"><name pos:start="1:75" pos:end="1:77">int</name></type> <name pos:start="1:79" pos:end="1:84">length</name></decl></parameter>, <parameter pos:start="1:87" pos:end="1:96"><decl pos:start="1:87" pos:end="1:96"><type pos:start="1:87" pos:end="1:96"><name pos:start="1:87" pos:end="1:89">int</name></type> <name pos:start="1:91" pos:end="1:96">sb_min</name></decl></parameter>, <parameter pos:start="1:99" pos:end="1:108"><decl pos:start="1:99" pos:end="1:108"><type pos:start="1:99" pos:end="1:108"><name pos:start="1:99" pos:end="1:101">int</name></type> <name pos:start="1:103" pos:end="1:108">sb_max</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="349:1">{<block_content pos:start="5:5" pos:end="347:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">sb</name></decl>, <decl pos:start="5:13" pos:end="5:13"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:13">j</name></decl>, <decl pos:start="5:16" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:16">k</name></decl>, <decl pos:start="5:19" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:19">n</name></decl>, <decl pos:start="5:22" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:23">ch</name></decl>, <decl pos:start="5:26" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:26" pos:end="5:28">run</name></decl>, <decl pos:start="5:31" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:31" pos:end="5:38">channels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:21">joined_stereo</name></decl>, <decl pos:start="7:24" pos:end="7:36"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:24" pos:end="7:36">zero_encoding</name></decl>, <decl pos:start="7:39" pos:end="7:41"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:39" pos:end="7:41">chs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">type34_first</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:9">float</name></type> <name pos:start="11:11" pos:end="11:20">type34_div</name> <init pos:start="11:22" pos:end="11:24">= <expr pos:start="11:24" pos:end="11:24"><literal type="number" pos:start="11:24" pos:end="11:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:9">float</name></type> <name pos:start="13:11" pos:end="13:26">type34_predictor</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">float</name></type> <name pos:start="15:11" pos:end="15:21"><name pos:start="15:11" pos:end="15:17">samples</name><index pos:start="15:18" pos:end="15:21">[<expr pos:start="15:19" pos:end="15:20"><literal type="number" pos:start="15:19" pos:end="15:20">10</literal></expr>]</index></name></decl>, <decl pos:start="15:24" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:9"/><name pos:start="15:24" pos:end="15:36"><name pos:start="15:24" pos:end="15:32">sign_bits</name><index pos:start="15:33" pos:end="15:36">[<expr pos:start="15:34" pos:end="15:35"><literal type="number" pos:start="15:34" pos:end="15:35">16</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="31:5"><if pos:start="19:5" pos:end="31:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:14">length</name> <operator pos:start="19:16" pos:end="19:17">==</operator> <literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr>)</condition> <block pos:start="19:22" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:17">

        <comment type="line" pos:start="21:9" pos:end="21:31">// If no data use noise</comment>

        <for pos:start="23:9" pos:end="25:48">for <control pos:start="23:13" pos:end="23:42">(<init pos:start="23:14" pos:end="23:23"><expr pos:start="23:14" pos:end="23:22"><name pos:start="23:14" pos:end="23:15">sb</name><operator pos:start="23:16" pos:end="23:16">=</operator><name pos:start="23:17" pos:end="23:22">sb_min</name></expr>;</init> <condition pos:start="23:25" pos:end="23:36"><expr pos:start="23:25" pos:end="23:35"><name pos:start="23:25" pos:end="23:26">sb</name> <operator pos:start="23:28" pos:end="23:28">&lt;</operator> <name pos:start="23:30" pos:end="23:35">sb_max</name></expr>;</condition> <incr pos:start="23:38" pos:end="23:41"><expr pos:start="23:38" pos:end="23:41"><name pos:start="23:38" pos:end="23:39">sb</name><operator pos:start="23:40" pos:end="23:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="25:13" pos:end="25:48"><block_content pos:start="25:13" pos:end="25:48">

            <expr_stmt pos:start="25:13" pos:end="25:48"><expr pos:start="25:13" pos:end="25:47"><call pos:start="25:13" pos:end="25:47"><name pos:start="25:13" pos:end="25:39">build_sb_samples_from_noise</name> <argument_list pos:start="25:41" pos:end="25:47">(<argument pos:start="25:42" pos:end="25:42"><expr pos:start="25:42" pos:end="25:42"><name pos:start="25:42" pos:end="25:42">q</name></expr></argument>, <argument pos:start="25:45" pos:end="25:46"><expr pos:start="25:45" pos:end="25:46"><name pos:start="25:45" pos:end="25:46">sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="35:5" pos:end="345:5">for <control pos:start="35:9" pos:end="35:40">(<init pos:start="35:10" pos:end="35:21"><expr pos:start="35:10" pos:end="35:20"><name pos:start="35:10" pos:end="35:11">sb</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:20">sb_min</name></expr>;</init> <condition pos:start="35:23" pos:end="35:34"><expr pos:start="35:23" pos:end="35:33"><name pos:start="35:23" pos:end="35:24">sb</name> <operator pos:start="35:26" pos:end="35:26">&lt;</operator> <name pos:start="35:28" pos:end="35:33">sb_max</name></expr>;</condition> <incr pos:start="35:36" pos:end="35:39"><expr pos:start="35:36" pos:end="35:39"><name pos:start="35:36" pos:end="35:37">sb</name><operator pos:start="35:38" pos:end="35:39">++</operator></expr></incr>)</control> <block pos:start="35:42" pos:end="345:5">{<block_content pos:start="37:9" pos:end="343:9">

        <expr_stmt pos:start="37:9" pos:end="37:36"><expr pos:start="37:9" pos:end="37:35"><call pos:start="37:9" pos:end="37:35"><name pos:start="37:9" pos:end="37:21">FIX_NOISE_IDX</name><argument_list pos:start="37:22" pos:end="37:35">(<argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:23">q</name><operator pos:start="37:24" pos:end="37:25">-&gt;</operator><name pos:start="37:26" pos:end="37:34">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:16">channels</name> <operator pos:start="41:18" pos:end="41:18">=</operator> <name pos:start="41:20" pos:end="41:33"><name pos:start="41:20" pos:end="41:20">q</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:33">nb_channels</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="45:9" pos:end="55:77"><if pos:start="45:9" pos:end="47:30">if <condition pos:start="45:12" pos:end="45:43">(<expr pos:start="45:13" pos:end="45:42"><name pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:13">q</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:26">nb_channels</name></name> <operator pos:start="45:28" pos:end="45:29">&lt;=</operator> <literal type="number" pos:start="45:31" pos:end="45:31">1</literal> <operator pos:start="45:33" pos:end="45:34">||</operator> <name pos:start="45:36" pos:end="45:37">sb</name> <operator pos:start="45:39" pos:end="45:39">&lt;</operator> <literal type="number" pos:start="45:41" pos:end="45:42">12</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:30"><block_content pos:start="47:13" pos:end="47:30">

            <expr_stmt pos:start="47:13" pos:end="47:30"><expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:25">joined_stereo</name> <operator pos:start="47:27" pos:end="47:27">=</operator> <literal type="number" pos:start="47:29" pos:end="47:29">0</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="49:9" pos:end="51:30">else if <condition pos:start="49:17" pos:end="49:26">(<expr pos:start="49:18" pos:end="49:25"><name pos:start="49:18" pos:end="49:19">sb</name> <operator pos:start="49:21" pos:end="49:22">&gt;=</operator> <literal type="number" pos:start="49:24" pos:end="49:25">24</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:30"><block_content pos:start="51:13" pos:end="51:30">

            <expr_stmt pos:start="51:13" pos:end="51:30"><expr pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:25">joined_stereo</name> <operator pos:start="51:27" pos:end="51:27">=</operator> <literal type="number" pos:start="51:29" pos:end="51:29">1</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="53:9" pos:end="55:77">else<block type="pseudo" pos:start="55:13" pos:end="55:77"><block_content pos:start="55:13" pos:end="55:77">

            <expr_stmt pos:start="55:13" pos:end="55:77"><expr pos:start="55:13" pos:end="55:76"><name pos:start="55:13" pos:end="55:25">joined_stereo</name> <operator pos:start="55:27" pos:end="55:27">=</operator> <ternary pos:start="55:29" pos:end="55:76"><condition pos:start="55:29" pos:end="55:57"><expr pos:start="55:29" pos:end="55:55"><operator pos:start="55:29" pos:end="55:29">(</operator><call pos:start="55:30" pos:end="55:49"><name pos:start="55:30" pos:end="55:38">BITS_LEFT</name><argument_list pos:start="55:39" pos:end="55:49">(<argument pos:start="55:40" pos:end="55:45"><expr pos:start="55:40" pos:end="55:45"><name pos:start="55:40" pos:end="55:45">length</name></expr></argument>,<argument pos:start="55:47" pos:end="55:48"><expr pos:start="55:47" pos:end="55:48"><name pos:start="55:47" pos:end="55:48">gb</name></expr></argument>)</argument_list></call> <operator pos:start="55:51" pos:end="55:52">&gt;=</operator> <literal type="number" pos:start="55:54" pos:end="55:54">1</literal><operator pos:start="55:55" pos:end="55:55">)</operator></expr> ?</condition><then pos:start="55:59" pos:end="55:72"> <expr pos:start="55:59" pos:end="55:72"><call pos:start="55:59" pos:end="55:72"><name pos:start="55:59" pos:end="55:67">get_bits1</name> <argument_list pos:start="55:69" pos:end="55:72">(<argument pos:start="55:70" pos:end="55:71"><expr pos:start="55:70" pos:end="55:71"><name pos:start="55:70" pos:end="55:71">gb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="55:74" pos:end="55:76">: <expr pos:start="55:76" pos:end="55:76"><literal type="number" pos:start="55:76" pos:end="55:76">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="59:9" pos:end="81:9"><if pos:start="59:9" pos:end="81:9">if <condition pos:start="59:12" pos:end="59:26">(<expr pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:25">joined_stereo</name></expr>)</condition> <block pos:start="59:28" pos:end="81:9">{<block_content pos:start="61:13" pos:end="79:25">

            <if_stmt pos:start="61:13" pos:end="65:50"><if pos:start="61:13" pos:end="65:50">if <condition pos:start="61:16" pos:end="61:43">(<expr pos:start="61:17" pos:end="61:42"><call pos:start="61:17" pos:end="61:36"><name pos:start="61:17" pos:end="61:25">BITS_LEFT</name><argument_list pos:start="61:26" pos:end="61:36">(<argument pos:start="61:27" pos:end="61:32"><expr pos:start="61:27" pos:end="61:32"><name pos:start="61:27" pos:end="61:32">length</name></expr></argument>,<argument pos:start="61:34" pos:end="61:35"><expr pos:start="61:34" pos:end="61:35"><name pos:start="61:34" pos:end="61:35">gb</name></expr></argument>)</argument_list></call> <operator pos:start="61:38" pos:end="61:39">&gt;=</operator> <literal type="number" pos:start="61:41" pos:end="61:42">16</literal></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="65:50"><block_content pos:start="63:17" pos:end="65:50">

                <for pos:start="63:17" pos:end="65:50">for <control pos:start="63:21" pos:end="63:40">(<init pos:start="63:22" pos:end="63:27"><expr pos:start="63:22" pos:end="63:26"><name pos:start="63:22" pos:end="63:22">j</name> <operator pos:start="63:24" pos:end="63:24">=</operator> <literal type="number" pos:start="63:26" pos:end="63:26">0</literal></expr>;</init> <condition pos:start="63:29" pos:end="63:35"><expr pos:start="63:29" pos:end="63:34"><name pos:start="63:29" pos:end="63:29">j</name> <operator pos:start="63:31" pos:end="63:31">&lt;</operator> <literal type="number" pos:start="63:33" pos:end="63:34">16</literal></expr>;</condition> <incr pos:start="63:37" pos:end="63:39"><expr pos:start="63:37" pos:end="63:39"><name pos:start="63:37" pos:end="63:37">j</name><operator pos:start="63:38" pos:end="63:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="65:21" pos:end="65:50"><block_content pos:start="65:21" pos:end="65:50">

                    <expr_stmt pos:start="65:21" pos:end="65:50"><expr pos:start="65:21" pos:end="65:49"><name pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:29">sign_bits</name><index pos:start="65:30" pos:end="65:32">[<expr pos:start="65:31" pos:end="65:31"><name pos:start="65:31" pos:end="65:31">j</name></expr>]</index></name> <operator pos:start="65:34" pos:end="65:34">=</operator> <call pos:start="65:36" pos:end="65:49"><name pos:start="65:36" pos:end="65:44">get_bits1</name> <argument_list pos:start="65:46" pos:end="65:49">(<argument pos:start="65:47" pos:end="65:48"><expr pos:start="65:47" pos:end="65:48"><name pos:start="65:47" pos:end="65:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



            <for pos:start="69:13" pos:end="73:76">for <control pos:start="69:17" pos:end="69:36">(<init pos:start="69:18" pos:end="69:23"><expr pos:start="69:18" pos:end="69:22"><name pos:start="69:18" pos:end="69:18">j</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr>;</init> <condition pos:start="69:25" pos:end="69:31"><expr pos:start="69:25" pos:end="69:30"><name pos:start="69:25" pos:end="69:25">j</name> <operator pos:start="69:27" pos:end="69:27">&lt;</operator> <literal type="number" pos:start="69:29" pos:end="69:30">64</literal></expr>;</condition> <incr pos:start="69:33" pos:end="69:35"><expr pos:start="69:33" pos:end="69:35"><name pos:start="69:33" pos:end="69:33">j</name><operator pos:start="69:34" pos:end="69:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="71:17" pos:end="73:76"><block_content pos:start="71:17" pos:end="73:76">

                <if_stmt pos:start="71:17" pos:end="73:76"><if pos:start="71:17" pos:end="73:76">if <condition pos:start="71:20" pos:end="71:76">(<expr pos:start="71:21" pos:end="71:75"><name pos:start="71:21" pos:end="71:46"><name pos:start="71:21" pos:end="71:21">q</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:36">coding_method</name><index pos:start="71:37" pos:end="71:39">[<expr pos:start="71:38" pos:end="71:38"><literal type="number" pos:start="71:38" pos:end="71:38">1</literal></expr>]</index><index pos:start="71:40" pos:end="71:43">[<expr pos:start="71:41" pos:end="71:42"><name pos:start="71:41" pos:end="71:42">sb</name></expr>]</index><index pos:start="71:44" pos:end="71:46">[<expr pos:start="71:45" pos:end="71:45"><name pos:start="71:45" pos:end="71:45">j</name></expr>]</index></name> <operator pos:start="71:48" pos:end="71:48">&gt;</operator> <name pos:start="71:50" pos:end="71:75"><name pos:start="71:50" pos:end="71:50">q</name><operator pos:start="71:51" pos:end="71:52">-&gt;</operator><name pos:start="71:53" pos:end="71:65">coding_method</name><index pos:start="71:66" pos:end="71:68">[<expr pos:start="71:67" pos:end="71:67"><literal type="number" pos:start="71:67" pos:end="71:67">0</literal></expr>]</index><index pos:start="71:69" pos:end="71:72">[<expr pos:start="71:70" pos:end="71:71"><name pos:start="71:70" pos:end="71:71">sb</name></expr>]</index><index pos:start="71:73" pos:end="71:75">[<expr pos:start="71:74" pos:end="71:74"><name pos:start="71:74" pos:end="71:74">j</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:76"><block_content pos:start="73:21" pos:end="73:76">

                    <expr_stmt pos:start="73:21" pos:end="73:76"><expr pos:start="73:21" pos:end="73:75"><name pos:start="73:21" pos:end="73:46"><name pos:start="73:21" pos:end="73:21">q</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:36">coding_method</name><index pos:start="73:37" pos:end="73:39">[<expr pos:start="73:38" pos:end="73:38"><literal type="number" pos:start="73:38" pos:end="73:38">0</literal></expr>]</index><index pos:start="73:40" pos:end="73:43">[<expr pos:start="73:41" pos:end="73:42"><name pos:start="73:41" pos:end="73:42">sb</name></expr>]</index><index pos:start="73:44" pos:end="73:46">[<expr pos:start="73:45" pos:end="73:45"><name pos:start="73:45" pos:end="73:45">j</name></expr>]</index></name> <operator pos:start="73:48" pos:end="73:48">=</operator> <name pos:start="73:50" pos:end="73:75"><name pos:start="73:50" pos:end="73:50">q</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:65">coding_method</name><index pos:start="73:66" pos:end="73:68">[<expr pos:start="73:67" pos:end="73:67"><literal type="number" pos:start="73:67" pos:end="73:67">1</literal></expr>]</index><index pos:start="73:69" pos:end="73:72">[<expr pos:start="73:70" pos:end="73:71"><name pos:start="73:70" pos:end="73:71">sb</name></expr>]</index><index pos:start="73:73" pos:end="73:75">[<expr pos:start="73:74" pos:end="73:74"><name pos:start="73:74" pos:end="73:74">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



            <expr_stmt pos:start="77:13" pos:end="77:74"><expr pos:start="77:13" pos:end="77:73"><call pos:start="77:13" pos:end="77:73"><name pos:start="77:13" pos:end="77:35">fix_coding_method_array</name><argument_list pos:start="77:36" pos:end="77:73">(<argument pos:start="77:37" pos:end="77:38"><expr pos:start="77:37" pos:end="77:38"><name pos:start="77:37" pos:end="77:38">sb</name></expr></argument>, <argument pos:start="77:41" pos:end="77:54"><expr pos:start="77:41" pos:end="77:54"><name pos:start="77:41" pos:end="77:54"><name pos:start="77:41" pos:end="77:41">q</name><operator pos:start="77:42" pos:end="77:43">-&gt;</operator><name pos:start="77:44" pos:end="77:54">nb_channels</name></name></expr></argument>, <argument pos:start="77:57" pos:end="77:72"><expr pos:start="77:57" pos:end="77:72"><name pos:start="77:57" pos:end="77:72"><name pos:start="77:57" pos:end="77:57">q</name><operator pos:start="77:58" pos:end="77:59">-&gt;</operator><name pos:start="77:60" pos:end="77:72">coding_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:25"><expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:20">channels</name> <operator pos:start="79:22" pos:end="79:22">=</operator> <literal type="number" pos:start="79:24" pos:end="79:24">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="85:9" pos:end="343:9">for <control pos:start="85:13" pos:end="85:41">(<init pos:start="85:14" pos:end="85:20"><expr pos:start="85:14" pos:end="85:19"><name pos:start="85:14" pos:end="85:15">ch</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>;</init> <condition pos:start="85:22" pos:end="85:35"><expr pos:start="85:22" pos:end="85:34"><name pos:start="85:22" pos:end="85:23">ch</name> <operator pos:start="85:25" pos:end="85:25">&lt;</operator> <name pos:start="85:27" pos:end="85:34">channels</name></expr>;</condition> <incr pos:start="85:37" pos:end="85:40"><expr pos:start="85:37" pos:end="85:40"><name pos:start="85:37" pos:end="85:38">ch</name><operator pos:start="85:39" pos:end="85:40">++</operator></expr></incr>)</control> <block pos:start="85:43" pos:end="343:9">{<block_content pos:start="87:13" pos:end="341:13">

            <expr_stmt pos:start="87:13" pos:end="87:76"><expr pos:start="87:13" pos:end="87:75"><name pos:start="87:13" pos:end="87:25">zero_encoding</name> <operator pos:start="87:27" pos:end="87:27">=</operator> <ternary pos:start="87:29" pos:end="87:75"><condition pos:start="87:29" pos:end="87:57"><expr pos:start="87:29" pos:end="87:55"><operator pos:start="87:29" pos:end="87:29">(</operator><call pos:start="87:30" pos:end="87:49"><name pos:start="87:30" pos:end="87:38">BITS_LEFT</name><argument_list pos:start="87:39" pos:end="87:49">(<argument pos:start="87:40" pos:end="87:45"><expr pos:start="87:40" pos:end="87:45"><name pos:start="87:40" pos:end="87:45">length</name></expr></argument>,<argument pos:start="87:47" pos:end="87:48"><expr pos:start="87:47" pos:end="87:48"><name pos:start="87:47" pos:end="87:48">gb</name></expr></argument>)</argument_list></call> <operator pos:start="87:51" pos:end="87:52">&gt;=</operator> <literal type="number" pos:start="87:54" pos:end="87:54">1</literal><operator pos:start="87:55" pos:end="87:55">)</operator></expr> ?</condition><then pos:start="87:59" pos:end="87:71"> <expr pos:start="87:59" pos:end="87:71"><call pos:start="87:59" pos:end="87:71"><name pos:start="87:59" pos:end="87:67">get_bits1</name><argument_list pos:start="87:68" pos:end="87:71">(<argument pos:start="87:69" pos:end="87:70"><expr pos:start="87:69" pos:end="87:70"><name pos:start="87:69" pos:end="87:70">gb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="87:73" pos:end="87:75">: <expr pos:start="87:75" pos:end="87:75"><literal type="number" pos:start="87:75" pos:end="87:75">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:28">type34_predictor</name> <operator pos:start="89:30" pos:end="89:30">=</operator> <literal type="number" pos:start="89:32" pos:end="89:34">0.0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:29"><expr pos:start="91:13" pos:end="91:28"><name pos:start="91:13" pos:end="91:24">type34_first</name> <operator pos:start="91:26" pos:end="91:26">=</operator> <literal type="number" pos:start="91:28" pos:end="91:28">1</literal></expr>;</expr_stmt>



            <for pos:start="95:13" pos:end="341:13">for <control pos:start="95:17" pos:end="95:34">(<init pos:start="95:18" pos:end="95:23"><expr pos:start="95:18" pos:end="95:22"><name pos:start="95:18" pos:end="95:18">j</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <literal type="number" pos:start="95:22" pos:end="95:22">0</literal></expr>;</init> <condition pos:start="95:25" pos:end="95:32"><expr pos:start="95:25" pos:end="95:31"><name pos:start="95:25" pos:end="95:25">j</name> <operator pos:start="95:27" pos:end="95:27">&lt;</operator> <literal type="number" pos:start="95:29" pos:end="95:31">128</literal></expr>;</condition> <incr/>)</control> <block pos:start="95:36" pos:end="341:13">{<block_content pos:start="97:17" pos:end="339:25">

                <switch pos:start="97:17" pos:end="301:17">switch <condition pos:start="97:24" pos:end="97:56">(<expr pos:start="97:25" pos:end="97:55"><name pos:start="97:25" pos:end="97:55"><name pos:start="97:25" pos:end="97:25">q</name><operator pos:start="97:26" pos:end="97:27">-&gt;</operator><name pos:start="97:28" pos:end="97:40">coding_method</name><index pos:start="97:41" pos:end="97:44">[<expr pos:start="97:42" pos:end="97:43"><name pos:start="97:42" pos:end="97:43">ch</name></expr>]</index><index pos:start="97:45" pos:end="97:48">[<expr pos:start="97:46" pos:end="97:47"><name pos:start="97:46" pos:end="97:47">sb</name></expr>]</index><index pos:start="97:49" pos:end="97:55">[<expr pos:start="97:50" pos:end="97:54"><name pos:start="97:50" pos:end="97:50">j</name> <operator pos:start="97:52" pos:end="97:52">/</operator> <literal type="number" pos:start="97:54" pos:end="97:54">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="97:58" pos:end="301:17">{<block_content pos:start="99:21" pos:end="299:30">

                    <case pos:start="99:21" pos:end="99:27">case <expr pos:start="99:26" pos:end="99:26"><literal type="number" pos:start="99:26" pos:end="99:26">8</literal></expr>:</case>

                        <if_stmt pos:start="101:25" pos:end="135:25"><if pos:start="101:25" pos:end="129:25">if <condition pos:start="101:28" pos:end="101:55">(<expr pos:start="101:29" pos:end="101:54"><call pos:start="101:29" pos:end="101:48"><name pos:start="101:29" pos:end="101:37">BITS_LEFT</name><argument_list pos:start="101:38" pos:end="101:48">(<argument pos:start="101:39" pos:end="101:44"><expr pos:start="101:39" pos:end="101:44"><name pos:start="101:39" pos:end="101:44">length</name></expr></argument>,<argument pos:start="101:46" pos:end="101:47"><expr pos:start="101:46" pos:end="101:47"><name pos:start="101:46" pos:end="101:47">gb</name></expr></argument>)</argument_list></call> <operator pos:start="101:50" pos:end="101:51">&gt;=</operator> <literal type="number" pos:start="101:53" pos:end="101:54">10</literal></expr>)</condition> <block pos:start="101:57" pos:end="129:25">{<block_content pos:start="103:29" pos:end="127:89">

                            <if_stmt pos:start="103:29" pos:end="123:29"><if pos:start="103:29" pos:end="115:29">if <condition pos:start="103:32" pos:end="103:46">(<expr pos:start="103:33" pos:end="103:45"><name pos:start="103:33" pos:end="103:45">zero_encoding</name></expr>)</condition> <block pos:start="103:48" pos:end="115:29">{<block_content pos:start="105:33" pos:end="113:33">

                                <for pos:start="105:33" pos:end="113:33">for <control pos:start="105:37" pos:end="105:55">(<init pos:start="105:38" pos:end="105:43"><expr pos:start="105:38" pos:end="105:42"><name pos:start="105:38" pos:end="105:38">k</name> <operator pos:start="105:40" pos:end="105:40">=</operator> <literal type="number" pos:start="105:42" pos:end="105:42">0</literal></expr>;</init> <condition pos:start="105:45" pos:end="105:50"><expr pos:start="105:45" pos:end="105:49"><name pos:start="105:45" pos:end="105:45">k</name> <operator pos:start="105:47" pos:end="105:47">&lt;</operator> <literal type="number" pos:start="105:49" pos:end="105:49">5</literal></expr>;</condition> <incr pos:start="105:52" pos:end="105:54"><expr pos:start="105:52" pos:end="105:54"><name pos:start="105:52" pos:end="105:52">k</name><operator pos:start="105:53" pos:end="105:54">++</operator></expr></incr>)</control> <block pos:start="105:57" pos:end="113:33">{<block_content pos:start="107:37" pos:end="111:120">

                                    <if_stmt pos:start="107:37" pos:end="109:46"><if pos:start="107:37" pos:end="109:46">if <condition pos:start="107:40" pos:end="107:59">(<expr pos:start="107:41" pos:end="107:58"><operator pos:start="107:41" pos:end="107:41">(</operator><name pos:start="107:42" pos:end="107:42">j</name> <operator pos:start="107:44" pos:end="107:44">+</operator> <literal type="number" pos:start="107:46" pos:end="107:46">2</literal> <operator pos:start="107:48" pos:end="107:48">*</operator> <name pos:start="107:50" pos:end="107:50">k</name><operator pos:start="107:51" pos:end="107:51">)</operator> <operator pos:start="107:53" pos:end="107:54">&gt;=</operator> <literal type="number" pos:start="107:56" pos:end="107:58">128</literal></expr>)</condition><block type="pseudo" pos:start="109:41" pos:end="109:46"><block_content pos:start="109:41" pos:end="109:46">

                                        <break pos:start="109:41" pos:end="109:46">break;</break></block_content></block></if></if_stmt>

                                    <expr_stmt pos:start="111:37" pos:end="111:120"><expr pos:start="111:37" pos:end="111:119"><name pos:start="111:37" pos:end="111:50"><name pos:start="111:37" pos:end="111:43">samples</name><index pos:start="111:44" pos:end="111:50">[<expr pos:start="111:45" pos:end="111:49"><literal type="number" pos:start="111:45" pos:end="111:45">2</literal> <operator pos:start="111:47" pos:end="111:47">*</operator> <name pos:start="111:49" pos:end="111:49">k</name></expr>]</index></name> <operator pos:start="111:52" pos:end="111:52">=</operator> <ternary pos:start="111:54" pos:end="111:119"><condition pos:start="111:54" pos:end="111:68"><expr pos:start="111:54" pos:end="111:66"><call pos:start="111:54" pos:end="111:66"><name pos:start="111:54" pos:end="111:62">get_bits1</name><argument_list pos:start="111:63" pos:end="111:66">(<argument pos:start="111:64" pos:end="111:65"><expr pos:start="111:64" pos:end="111:65"><name pos:start="111:64" pos:end="111:65">gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="111:70" pos:end="111:115"> <expr pos:start="111:70" pos:end="111:115"><name pos:start="111:70" pos:end="111:115"><name pos:start="111:70" pos:end="111:81">dequant_1bit</name><index pos:start="111:82" pos:end="111:96">[<expr pos:start="111:83" pos:end="111:95"><name pos:start="111:83" pos:end="111:95">joined_stereo</name></expr>]</index><index pos:start="111:97" pos:end="111:115">[<expr pos:start="111:98" pos:end="111:114"><literal type="number" pos:start="111:98" pos:end="111:98">2</literal> <operator pos:start="111:100" pos:end="111:100">*</operator> <call pos:start="111:102" pos:end="111:114"><name pos:start="111:102" pos:end="111:110">get_bits1</name><argument_list pos:start="111:111" pos:end="111:114">(<argument pos:start="111:112" pos:end="111:113"><expr pos:start="111:112" pos:end="111:113"><name pos:start="111:112" pos:end="111:113">gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else pos:start="111:117" pos:end="111:119">: <expr pos:start="111:119" pos:end="111:119"><literal type="number" pos:start="111:119" pos:end="111:119">0</literal></expr></else></ternary></expr>;</expr_stmt>

                                </block_content>}</block></for>

                            </block_content>}</block></if> <else pos:start="115:31" pos:end="123:29">else <block pos:start="115:36" pos:end="123:29">{<block_content pos:start="117:33" pos:end="121:109">

                                <expr_stmt pos:start="117:33" pos:end="117:52"><expr pos:start="117:33" pos:end="117:51"><name pos:start="117:33" pos:end="117:33">n</name> <operator pos:start="117:35" pos:end="117:35">=</operator> <call pos:start="117:37" pos:end="117:51"><name pos:start="117:37" pos:end="117:44">get_bits</name><argument_list pos:start="117:45" pos:end="117:51">(<argument pos:start="117:46" pos:end="117:47"><expr pos:start="117:46" pos:end="117:47"><name pos:start="117:46" pos:end="117:47">gb</name></expr></argument>, <argument pos:start="117:50" pos:end="117:50"><expr pos:start="117:50" pos:end="117:50"><literal type="number" pos:start="117:50" pos:end="117:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <for pos:start="119:33" pos:end="121:109">for <control pos:start="119:37" pos:end="119:55">(<init pos:start="119:38" pos:end="119:43"><expr pos:start="119:38" pos:end="119:42"><name pos:start="119:38" pos:end="119:38">k</name> <operator pos:start="119:40" pos:end="119:40">=</operator> <literal type="number" pos:start="119:42" pos:end="119:42">0</literal></expr>;</init> <condition pos:start="119:45" pos:end="119:50"><expr pos:start="119:45" pos:end="119:49"><name pos:start="119:45" pos:end="119:45">k</name> <operator pos:start="119:47" pos:end="119:47">&lt;</operator> <literal type="number" pos:start="119:49" pos:end="119:49">5</literal></expr>;</condition> <incr pos:start="119:52" pos:end="119:54"><expr pos:start="119:52" pos:end="119:54"><name pos:start="119:52" pos:end="119:52">k</name><operator pos:start="119:53" pos:end="119:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="121:37" pos:end="121:109"><block_content pos:start="121:37" pos:end="121:109">

                                    <expr_stmt pos:start="121:37" pos:end="121:109"><expr pos:start="121:37" pos:end="121:108"><name pos:start="121:37" pos:end="121:50"><name pos:start="121:37" pos:end="121:43">samples</name><index pos:start="121:44" pos:end="121:50">[<expr pos:start="121:45" pos:end="121:49"><literal type="number" pos:start="121:45" pos:end="121:45">2</literal> <operator pos:start="121:47" pos:end="121:47">*</operator> <name pos:start="121:49" pos:end="121:49">k</name></expr>]</index></name> <operator pos:start="121:52" pos:end="121:52">=</operator> <name pos:start="121:54" pos:end="121:108"><name pos:start="121:54" pos:end="121:65">dequant_1bit</name><index pos:start="121:66" pos:end="121:80">[<expr pos:start="121:67" pos:end="121:79"><name pos:start="121:67" pos:end="121:79">joined_stereo</name></expr>]</index><index pos:start="121:81" pos:end="121:108">[<expr pos:start="121:82" pos:end="121:107"><name pos:start="121:82" pos:end="121:107"><name pos:start="121:82" pos:end="121:101">random_dequant_index</name><index pos:start="121:102" pos:end="121:104">[<expr pos:start="121:103" pos:end="121:103"><name pos:start="121:103" pos:end="121:103">n</name></expr>]</index><index pos:start="121:105" pos:end="121:107">[<expr pos:start="121:106" pos:end="121:106"><name pos:start="121:106" pos:end="121:106">k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                            </block_content>}</block></else></if_stmt>

                            <for pos:start="125:29" pos:end="127:89">for <control pos:start="125:33" pos:end="125:51">(<init pos:start="125:34" pos:end="125:39"><expr pos:start="125:34" pos:end="125:38"><name pos:start="125:34" pos:end="125:34">k</name> <operator pos:start="125:36" pos:end="125:36">=</operator> <literal type="number" pos:start="125:38" pos:end="125:38">0</literal></expr>;</init> <condition pos:start="125:41" pos:end="125:46"><expr pos:start="125:41" pos:end="125:45"><name pos:start="125:41" pos:end="125:41">k</name> <operator pos:start="125:43" pos:end="125:43">&lt;</operator> <literal type="number" pos:start="125:45" pos:end="125:45">5</literal></expr>;</condition> <incr pos:start="125:48" pos:end="125:50"><expr pos:start="125:48" pos:end="125:50"><name pos:start="125:48" pos:end="125:48">k</name><operator pos:start="125:49" pos:end="125:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="127:33" pos:end="127:89"><block_content pos:start="127:33" pos:end="127:89">

                                <expr_stmt pos:start="127:33" pos:end="127:89"><expr pos:start="127:33" pos:end="127:88"><name pos:start="127:33" pos:end="127:50"><name pos:start="127:33" pos:end="127:39">samples</name><index pos:start="127:40" pos:end="127:50">[<expr pos:start="127:41" pos:end="127:49"><literal type="number" pos:start="127:41" pos:end="127:41">2</literal> <operator pos:start="127:43" pos:end="127:43">*</operator> <name pos:start="127:45" pos:end="127:45">k</name> <operator pos:start="127:47" pos:end="127:47">+</operator> <literal type="number" pos:start="127:49" pos:end="127:49">1</literal></expr>]</index></name> <operator pos:start="127:52" pos:end="127:52">=</operator> <call pos:start="127:54" pos:end="127:88"><name pos:start="127:54" pos:end="127:71">SB_DITHERING_NOISE</name><argument_list pos:start="127:72" pos:end="127:88">(<argument pos:start="127:73" pos:end="127:74"><expr pos:start="127:73" pos:end="127:74"><name pos:start="127:73" pos:end="127:74">sb</name></expr></argument>,<argument pos:start="127:76" pos:end="127:87"><expr pos:start="127:76" pos:end="127:87"><name pos:start="127:76" pos:end="127:87"><name pos:start="127:76" pos:end="127:76">q</name><operator pos:start="127:77" pos:end="127:78">-&gt;</operator><name pos:start="127:79" pos:end="127:87">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></if> <else pos:start="129:27" pos:end="135:25">else <block pos:start="129:32" pos:end="135:25">{<block_content pos:start="131:29" pos:end="133:81">

                            <for pos:start="131:29" pos:end="133:81">for <control pos:start="131:33" pos:end="131:52">(<init pos:start="131:34" pos:end="131:39"><expr pos:start="131:34" pos:end="131:38"><name pos:start="131:34" pos:end="131:34">k</name> <operator pos:start="131:36" pos:end="131:36">=</operator> <literal type="number" pos:start="131:38" pos:end="131:38">0</literal></expr>;</init> <condition pos:start="131:41" pos:end="131:47"><expr pos:start="131:41" pos:end="131:46"><name pos:start="131:41" pos:end="131:41">k</name> <operator pos:start="131:43" pos:end="131:43">&lt;</operator> <literal type="number" pos:start="131:45" pos:end="131:46">10</literal></expr>;</condition> <incr pos:start="131:49" pos:end="131:51"><expr pos:start="131:49" pos:end="131:51"><name pos:start="131:49" pos:end="131:49">k</name><operator pos:start="131:50" pos:end="131:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="133:33" pos:end="133:81"><block_content pos:start="133:33" pos:end="133:81">

                                <expr_stmt pos:start="133:33" pos:end="133:81"><expr pos:start="133:33" pos:end="133:80"><name pos:start="133:33" pos:end="133:42"><name pos:start="133:33" pos:end="133:39">samples</name><index pos:start="133:40" pos:end="133:42">[<expr pos:start="133:41" pos:end="133:41"><name pos:start="133:41" pos:end="133:41">k</name></expr>]</index></name> <operator pos:start="133:44" pos:end="133:44">=</operator> <call pos:start="133:46" pos:end="133:80"><name pos:start="133:46" pos:end="133:63">SB_DITHERING_NOISE</name><argument_list pos:start="133:64" pos:end="133:80">(<argument pos:start="133:65" pos:end="133:66"><expr pos:start="133:65" pos:end="133:66"><name pos:start="133:65" pos:end="133:66">sb</name></expr></argument>,<argument pos:start="133:68" pos:end="133:79"><expr pos:start="133:68" pos:end="133:79"><name pos:start="133:68" pos:end="133:79"><name pos:start="133:68" pos:end="133:68">q</name><operator pos:start="133:69" pos:end="133:70">-&gt;</operator><name pos:start="133:71" pos:end="133:79">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="137:25" pos:end="137:33"><expr pos:start="137:25" pos:end="137:32"><name pos:start="137:25" pos:end="137:27">run</name> <operator pos:start="137:29" pos:end="137:29">=</operator> <literal type="number" pos:start="137:31" pos:end="137:32">10</literal></expr>;</expr_stmt>

                        <break pos:start="139:25" pos:end="139:30">break;</break>



                    <case pos:start="143:21" pos:end="143:28">case <expr pos:start="143:26" pos:end="143:27"><literal type="number" pos:start="143:26" pos:end="143:27">10</literal></expr>:</case>

                        <if_stmt pos:start="145:25" pos:end="163:25"><if pos:start="145:25" pos:end="159:25">if <condition pos:start="145:28" pos:end="145:54">(<expr pos:start="145:29" pos:end="145:53"><call pos:start="145:29" pos:end="145:48"><name pos:start="145:29" pos:end="145:37">BITS_LEFT</name><argument_list pos:start="145:38" pos:end="145:48">(<argument pos:start="145:39" pos:end="145:44"><expr pos:start="145:39" pos:end="145:44"><name pos:start="145:39" pos:end="145:44">length</name></expr></argument>,<argument pos:start="145:46" pos:end="145:47"><expr pos:start="145:46" pos:end="145:47"><name pos:start="145:46" pos:end="145:47">gb</name></expr></argument>)</argument_list></call> <operator pos:start="145:50" pos:end="145:51">&gt;=</operator> <literal type="number" pos:start="145:53" pos:end="145:53">1</literal></expr>)</condition> <block pos:start="145:56" pos:end="159:25">{<block_content pos:start="147:29" pos:end="157:43">

                            <decl_stmt pos:start="147:29" pos:end="147:43"><decl pos:start="147:29" pos:end="147:42"><type pos:start="147:29" pos:end="147:33"><name pos:start="147:29" pos:end="147:33">float</name></type> <name pos:start="147:35" pos:end="147:35">f</name> <init pos:start="147:37" pos:end="147:42">= <expr pos:start="147:39" pos:end="147:42"><literal type="number" pos:start="147:39" pos:end="147:42">0.81</literal></expr></init></decl>;</decl_stmt>



                            <if_stmt pos:start="151:29" pos:end="153:39"><if pos:start="151:29" pos:end="153:39">if <condition pos:start="151:32" pos:end="151:46">(<expr pos:start="151:33" pos:end="151:45"><call pos:start="151:33" pos:end="151:45"><name pos:start="151:33" pos:end="151:41">get_bits1</name><argument_list pos:start="151:42" pos:end="151:45">(<argument pos:start="151:43" pos:end="151:44"><expr pos:start="151:43" pos:end="151:44"><name pos:start="151:43" pos:end="151:44">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="153:33" pos:end="153:39"><block_content pos:start="153:33" pos:end="153:39">

                                <expr_stmt pos:start="153:33" pos:end="153:39"><expr pos:start="153:33" pos:end="153:38"><name pos:start="153:33" pos:end="153:33">f</name> <operator pos:start="153:35" pos:end="153:35">=</operator> <operator pos:start="153:37" pos:end="153:37">-</operator><name pos:start="153:38" pos:end="153:38">f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="155:29" pos:end="155:96"><expr pos:start="155:29" pos:end="155:95"><name pos:start="155:29" pos:end="155:29">f</name> <operator pos:start="155:31" pos:end="155:32">-=</operator> <name pos:start="155:34" pos:end="155:82"><name pos:start="155:34" pos:end="155:46">noise_samples</name><index pos:start="155:47" pos:end="155:82">[<expr pos:start="155:48" pos:end="155:81"><operator pos:start="155:48" pos:end="155:48">(</operator><operator pos:start="155:49" pos:end="155:49">(</operator><name pos:start="155:50" pos:end="155:51">sb</name> <operator pos:start="155:53" pos:end="155:53">+</operator> <literal type="number" pos:start="155:55" pos:end="155:55">1</literal><operator pos:start="155:56" pos:end="155:56">)</operator> <operator pos:start="155:58" pos:end="155:58">*</operator> <operator pos:start="155:60" pos:end="155:60">(</operator><name pos:start="155:61" pos:end="155:61">j</name> <operator pos:start="155:63" pos:end="155:63">+</operator><literal type="number" pos:start="155:64" pos:end="155:64">5</literal> <operator pos:start="155:66" pos:end="155:66">*</operator> <name pos:start="155:68" pos:end="155:69">ch</name> <operator pos:start="155:71" pos:end="155:71">+</operator> <literal type="number" pos:start="155:73" pos:end="155:73">1</literal><operator pos:start="155:74" pos:end="155:74">)</operator><operator pos:start="155:75" pos:end="155:75">)</operator> <operator pos:start="155:77" pos:end="155:77">&amp;</operator> <literal type="number" pos:start="155:79" pos:end="155:81">127</literal></expr>]</index></name> <operator pos:start="155:84" pos:end="155:84">*</operator> <literal type="number" pos:start="155:86" pos:end="155:88">9.0</literal> <operator pos:start="155:90" pos:end="155:90">/</operator> <literal type="number" pos:start="155:92" pos:end="155:95">40.0</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="157:29" pos:end="157:43"><expr pos:start="157:29" pos:end="157:42"><name pos:start="157:29" pos:end="157:38"><name pos:start="157:29" pos:end="157:35">samples</name><index pos:start="157:36" pos:end="157:38">[<expr pos:start="157:37" pos:end="157:37"><literal type="number" pos:start="157:37" pos:end="157:37">0</literal></expr>]</index></name> <operator pos:start="157:40" pos:end="157:40">=</operator> <name pos:start="157:42" pos:end="157:42">f</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="159:27" pos:end="163:25">else <block pos:start="159:32" pos:end="163:25">{<block_content pos:start="161:29" pos:end="161:77">

                            <expr_stmt pos:start="161:29" pos:end="161:77"><expr pos:start="161:29" pos:end="161:76"><name pos:start="161:29" pos:end="161:38"><name pos:start="161:29" pos:end="161:35">samples</name><index pos:start="161:36" pos:end="161:38">[<expr pos:start="161:37" pos:end="161:37"><literal type="number" pos:start="161:37" pos:end="161:37">0</literal></expr>]</index></name> <operator pos:start="161:40" pos:end="161:40">=</operator> <call pos:start="161:42" pos:end="161:76"><name pos:start="161:42" pos:end="161:59">SB_DITHERING_NOISE</name><argument_list pos:start="161:60" pos:end="161:76">(<argument pos:start="161:61" pos:end="161:62"><expr pos:start="161:61" pos:end="161:62"><name pos:start="161:61" pos:end="161:62">sb</name></expr></argument>,<argument pos:start="161:64" pos:end="161:75"><expr pos:start="161:64" pos:end="161:75"><name pos:start="161:64" pos:end="161:75"><name pos:start="161:64" pos:end="161:64">q</name><operator pos:start="161:65" pos:end="161:66">-&gt;</operator><name pos:start="161:67" pos:end="161:75">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="165:25" pos:end="165:32"><expr pos:start="165:25" pos:end="165:31"><name pos:start="165:25" pos:end="165:27">run</name> <operator pos:start="165:29" pos:end="165:29">=</operator> <literal type="number" pos:start="165:31" pos:end="165:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="167:25" pos:end="167:30">break;</break>



                    <case pos:start="171:21" pos:end="171:28">case <expr pos:start="171:26" pos:end="171:27"><literal type="number" pos:start="171:26" pos:end="171:27">16</literal></expr>:</case>

                        <if_stmt pos:start="173:25" pos:end="203:25"><if pos:start="173:25" pos:end="197:25">if <condition pos:start="173:28" pos:end="173:55">(<expr pos:start="173:29" pos:end="173:54"><call pos:start="173:29" pos:end="173:48"><name pos:start="173:29" pos:end="173:37">BITS_LEFT</name><argument_list pos:start="173:38" pos:end="173:48">(<argument pos:start="173:39" pos:end="173:44"><expr pos:start="173:39" pos:end="173:44"><name pos:start="173:39" pos:end="173:44">length</name></expr></argument>,<argument pos:start="173:46" pos:end="173:47"><expr pos:start="173:46" pos:end="173:47"><name pos:start="173:46" pos:end="173:47">gb</name></expr></argument>)</argument_list></call> <operator pos:start="173:50" pos:end="173:51">&gt;=</operator> <literal type="number" pos:start="173:53" pos:end="173:54">10</literal></expr>)</condition> <block pos:start="173:57" pos:end="197:25">{<block_content pos:start="175:29" pos:end="195:29">

                            <if_stmt pos:start="175:29" pos:end="195:29"><if pos:start="175:29" pos:end="187:29">if <condition pos:start="175:32" pos:end="175:46">(<expr pos:start="175:33" pos:end="175:45"><name pos:start="175:33" pos:end="175:45">zero_encoding</name></expr>)</condition> <block pos:start="175:48" pos:end="187:29">{<block_content pos:start="177:33" pos:end="185:33">

                                <for pos:start="177:33" pos:end="185:33">for <control pos:start="177:37" pos:end="177:55">(<init pos:start="177:38" pos:end="177:43"><expr pos:start="177:38" pos:end="177:42"><name pos:start="177:38" pos:end="177:38">k</name> <operator pos:start="177:40" pos:end="177:40">=</operator> <literal type="number" pos:start="177:42" pos:end="177:42">0</literal></expr>;</init> <condition pos:start="177:45" pos:end="177:50"><expr pos:start="177:45" pos:end="177:49"><name pos:start="177:45" pos:end="177:45">k</name> <operator pos:start="177:47" pos:end="177:47">&lt;</operator> <literal type="number" pos:start="177:49" pos:end="177:49">5</literal></expr>;</condition> <incr pos:start="177:52" pos:end="177:54"><expr pos:start="177:52" pos:end="177:54"><name pos:start="177:52" pos:end="177:52">k</name><operator pos:start="177:53" pos:end="177:54">++</operator></expr></incr>)</control> <block pos:start="177:57" pos:end="185:33">{<block_content pos:start="179:37" pos:end="183:123">

                                    <if_stmt pos:start="179:37" pos:end="181:46"><if pos:start="179:37" pos:end="181:46">if <condition pos:start="179:40" pos:end="179:55">(<expr pos:start="179:41" pos:end="179:54"><operator pos:start="179:41" pos:end="179:41">(</operator><name pos:start="179:42" pos:end="179:42">j</name> <operator pos:start="179:44" pos:end="179:44">+</operator> <name pos:start="179:46" pos:end="179:46">k</name><operator pos:start="179:47" pos:end="179:47">)</operator> <operator pos:start="179:49" pos:end="179:50">&gt;=</operator> <literal type="number" pos:start="179:52" pos:end="179:54">128</literal></expr>)</condition><block type="pseudo" pos:start="181:41" pos:end="181:46"><block_content pos:start="181:41" pos:end="181:46">

                                        <break pos:start="181:41" pos:end="181:46">break;</break></block_content></block></if></if_stmt>

                                    <expr_stmt pos:start="183:37" pos:end="183:123"><expr pos:start="183:37" pos:end="183:122"><name pos:start="183:37" pos:end="183:46"><name pos:start="183:37" pos:end="183:43">samples</name><index pos:start="183:44" pos:end="183:46">[<expr pos:start="183:45" pos:end="183:45"><name pos:start="183:45" pos:end="183:45">k</name></expr>]</index></name> <operator pos:start="183:48" pos:end="183:48">=</operator> <ternary pos:start="183:50" pos:end="183:122"><condition pos:start="183:50" pos:end="183:71"><expr pos:start="183:50" pos:end="183:69"><operator pos:start="183:50" pos:end="183:50">(</operator><call pos:start="183:51" pos:end="183:63"><name pos:start="183:51" pos:end="183:59">get_bits1</name><argument_list pos:start="183:60" pos:end="183:63">(<argument pos:start="183:61" pos:end="183:62"><expr pos:start="183:61" pos:end="183:62"><name pos:start="183:61" pos:end="183:62">gb</name></expr></argument>)</argument_list></call> <operator pos:start="183:65" pos:end="183:66">==</operator> <literal type="number" pos:start="183:68" pos:end="183:68">0</literal><operator pos:start="183:69" pos:end="183:69">)</operator></expr> ?</condition><then pos:start="183:73" pos:end="183:73"> <expr pos:start="183:73" pos:end="183:73"><literal type="number" pos:start="183:73" pos:end="183:73">0</literal></expr> </then><else pos:start="183:75" pos:end="183:122">: <expr pos:start="183:77" pos:end="183:122"><name pos:start="183:77" pos:end="183:122"><name pos:start="183:77" pos:end="183:88">dequant_1bit</name><index pos:start="183:89" pos:end="183:103">[<expr pos:start="183:90" pos:end="183:102"><name pos:start="183:90" pos:end="183:102">joined_stereo</name></expr>]</index><index pos:start="183:104" pos:end="183:122">[<expr pos:start="183:105" pos:end="183:121"><literal type="number" pos:start="183:105" pos:end="183:105">2</literal> <operator pos:start="183:107" pos:end="183:107">*</operator> <call pos:start="183:109" pos:end="183:121"><name pos:start="183:109" pos:end="183:117">get_bits1</name><argument_list pos:start="183:118" pos:end="183:121">(<argument pos:start="183:119" pos:end="183:120"><expr pos:start="183:119" pos:end="183:120"><name pos:start="183:119" pos:end="183:120">gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

                                </block_content>}</block></for>

                            </block_content>}</block></if> <else pos:start="187:31" pos:end="195:29">else <block pos:start="187:36" pos:end="195:29">{<block_content pos:start="189:33" pos:end="193:105">

                                <expr_stmt pos:start="189:33" pos:end="189:53"><expr pos:start="189:33" pos:end="189:52"><name pos:start="189:33" pos:end="189:33">n</name> <operator pos:start="189:35" pos:end="189:35">=</operator> <call pos:start="189:37" pos:end="189:52"><name pos:start="189:37" pos:end="189:44">get_bits</name> <argument_list pos:start="189:46" pos:end="189:52">(<argument pos:start="189:47" pos:end="189:48"><expr pos:start="189:47" pos:end="189:48"><name pos:start="189:47" pos:end="189:48">gb</name></expr></argument>, <argument pos:start="189:51" pos:end="189:51"><expr pos:start="189:51" pos:end="189:51"><literal type="number" pos:start="189:51" pos:end="189:51">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <for pos:start="191:33" pos:end="193:105">for <control pos:start="191:37" pos:end="191:55">(<init pos:start="191:38" pos:end="191:43"><expr pos:start="191:38" pos:end="191:42"><name pos:start="191:38" pos:end="191:38">k</name> <operator pos:start="191:40" pos:end="191:40">=</operator> <literal type="number" pos:start="191:42" pos:end="191:42">0</literal></expr>;</init> <condition pos:start="191:45" pos:end="191:50"><expr pos:start="191:45" pos:end="191:49"><name pos:start="191:45" pos:end="191:45">k</name> <operator pos:start="191:47" pos:end="191:47">&lt;</operator> <literal type="number" pos:start="191:49" pos:end="191:49">5</literal></expr>;</condition> <incr pos:start="191:52" pos:end="191:54"><expr pos:start="191:52" pos:end="191:54"><name pos:start="191:52" pos:end="191:52">k</name><operator pos:start="191:53" pos:end="191:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="193:37" pos:end="193:105"><block_content pos:start="193:37" pos:end="193:105">

                                    <expr_stmt pos:start="193:37" pos:end="193:105"><expr pos:start="193:37" pos:end="193:104"><name pos:start="193:37" pos:end="193:46"><name pos:start="193:37" pos:end="193:43">samples</name><index pos:start="193:44" pos:end="193:46">[<expr pos:start="193:45" pos:end="193:45"><name pos:start="193:45" pos:end="193:45">k</name></expr>]</index></name> <operator pos:start="193:48" pos:end="193:48">=</operator> <name pos:start="193:50" pos:end="193:104"><name pos:start="193:50" pos:end="193:61">dequant_1bit</name><index pos:start="193:62" pos:end="193:76">[<expr pos:start="193:63" pos:end="193:75"><name pos:start="193:63" pos:end="193:75">joined_stereo</name></expr>]</index><index pos:start="193:77" pos:end="193:104">[<expr pos:start="193:78" pos:end="193:103"><name pos:start="193:78" pos:end="193:103"><name pos:start="193:78" pos:end="193:97">random_dequant_index</name><index pos:start="193:98" pos:end="193:100">[<expr pos:start="193:99" pos:end="193:99"><name pos:start="193:99" pos:end="193:99">n</name></expr>]</index><index pos:start="193:101" pos:end="193:103">[<expr pos:start="193:102" pos:end="193:102"><name pos:start="193:102" pos:end="193:102">k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="197:27" pos:end="203:25">else <block pos:start="197:32" pos:end="203:25">{<block_content pos:start="199:29" pos:end="201:81">

                            <for pos:start="199:29" pos:end="201:81">for <control pos:start="199:33" pos:end="199:51">(<init pos:start="199:34" pos:end="199:39"><expr pos:start="199:34" pos:end="199:38"><name pos:start="199:34" pos:end="199:34">k</name> <operator pos:start="199:36" pos:end="199:36">=</operator> <literal type="number" pos:start="199:38" pos:end="199:38">0</literal></expr>;</init> <condition pos:start="199:41" pos:end="199:46"><expr pos:start="199:41" pos:end="199:45"><name pos:start="199:41" pos:end="199:41">k</name> <operator pos:start="199:43" pos:end="199:43">&lt;</operator> <literal type="number" pos:start="199:45" pos:end="199:45">5</literal></expr>;</condition> <incr pos:start="199:48" pos:end="199:50"><expr pos:start="199:48" pos:end="199:50"><name pos:start="199:48" pos:end="199:48">k</name><operator pos:start="199:49" pos:end="199:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="201:33" pos:end="201:81"><block_content pos:start="201:33" pos:end="201:81">

                                <expr_stmt pos:start="201:33" pos:end="201:81"><expr pos:start="201:33" pos:end="201:80"><name pos:start="201:33" pos:end="201:42"><name pos:start="201:33" pos:end="201:39">samples</name><index pos:start="201:40" pos:end="201:42">[<expr pos:start="201:41" pos:end="201:41"><name pos:start="201:41" pos:end="201:41">k</name></expr>]</index></name> <operator pos:start="201:44" pos:end="201:44">=</operator> <call pos:start="201:46" pos:end="201:80"><name pos:start="201:46" pos:end="201:63">SB_DITHERING_NOISE</name><argument_list pos:start="201:64" pos:end="201:80">(<argument pos:start="201:65" pos:end="201:66"><expr pos:start="201:65" pos:end="201:66"><name pos:start="201:65" pos:end="201:66">sb</name></expr></argument>,<argument pos:start="201:68" pos:end="201:79"><expr pos:start="201:68" pos:end="201:79"><name pos:start="201:68" pos:end="201:79"><name pos:start="201:68" pos:end="201:68">q</name><operator pos:start="201:69" pos:end="201:70">-&gt;</operator><name pos:start="201:71" pos:end="201:79">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="205:25" pos:end="205:32"><expr pos:start="205:25" pos:end="205:31"><name pos:start="205:25" pos:end="205:27">run</name> <operator pos:start="205:29" pos:end="205:29">=</operator> <literal type="number" pos:start="205:31" pos:end="205:31">5</literal></expr>;</expr_stmt>

                        <break pos:start="207:25" pos:end="207:30">break;</break>



                    <case pos:start="211:21" pos:end="211:28">case <expr pos:start="211:26" pos:end="211:27"><literal type="number" pos:start="211:26" pos:end="211:27">24</literal></expr>:</case>

                        <if_stmt pos:start="213:25" pos:end="227:25"><if pos:start="213:25" pos:end="221:25">if <condition pos:start="213:28" pos:end="213:54">(<expr pos:start="213:29" pos:end="213:53"><call pos:start="213:29" pos:end="213:48"><name pos:start="213:29" pos:end="213:37">BITS_LEFT</name><argument_list pos:start="213:38" pos:end="213:48">(<argument pos:start="213:39" pos:end="213:44"><expr pos:start="213:39" pos:end="213:44"><name pos:start="213:39" pos:end="213:44">length</name></expr></argument>,<argument pos:start="213:46" pos:end="213:47"><expr pos:start="213:46" pos:end="213:47"><name pos:start="213:46" pos:end="213:47">gb</name></expr></argument>)</argument_list></call> <operator pos:start="213:50" pos:end="213:51">&gt;=</operator> <literal type="number" pos:start="213:53" pos:end="213:53">7</literal></expr>)</condition> <block pos:start="213:56" pos:end="221:25">{<block_content pos:start="215:29" pos:end="219:87">

                            <expr_stmt pos:start="215:29" pos:end="215:48"><expr pos:start="215:29" pos:end="215:47"><name pos:start="215:29" pos:end="215:29">n</name> <operator pos:start="215:31" pos:end="215:31">=</operator> <call pos:start="215:33" pos:end="215:47"><name pos:start="215:33" pos:end="215:40">get_bits</name><argument_list pos:start="215:41" pos:end="215:47">(<argument pos:start="215:42" pos:end="215:43"><expr pos:start="215:42" pos:end="215:43"><name pos:start="215:42" pos:end="215:43">gb</name></expr></argument>, <argument pos:start="215:46" pos:end="215:46"><expr pos:start="215:46" pos:end="215:46"><literal type="number" pos:start="215:46" pos:end="215:46">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="217:29" pos:end="219:87">for <control pos:start="217:33" pos:end="217:51">(<init pos:start="217:34" pos:end="217:39"><expr pos:start="217:34" pos:end="217:38"><name pos:start="217:34" pos:end="217:34">k</name> <operator pos:start="217:36" pos:end="217:36">=</operator> <literal type="number" pos:start="217:38" pos:end="217:38">0</literal></expr>;</init> <condition pos:start="217:41" pos:end="217:46"><expr pos:start="217:41" pos:end="217:45"><name pos:start="217:41" pos:end="217:41">k</name> <operator pos:start="217:43" pos:end="217:43">&lt;</operator> <literal type="number" pos:start="217:45" pos:end="217:45">3</literal></expr>;</condition> <incr pos:start="217:48" pos:end="217:50"><expr pos:start="217:48" pos:end="217:50"><name pos:start="217:48" pos:end="217:48">k</name><operator pos:start="217:49" pos:end="217:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="219:33" pos:end="219:87"><block_content pos:start="219:33" pos:end="219:87">

                                <expr_stmt pos:start="219:33" pos:end="219:87"><expr pos:start="219:33" pos:end="219:86"><name pos:start="219:33" pos:end="219:42"><name pos:start="219:33" pos:end="219:39">samples</name><index pos:start="219:40" pos:end="219:42">[<expr pos:start="219:41" pos:end="219:41"><name pos:start="219:41" pos:end="219:41">k</name></expr>]</index></name> <operator pos:start="219:44" pos:end="219:44">=</operator> <operator pos:start="219:46" pos:end="219:46">(</operator><name pos:start="219:47" pos:end="219:73"><name pos:start="219:47" pos:end="219:67">random_dequant_type24</name><index pos:start="219:68" pos:end="219:70">[<expr pos:start="219:69" pos:end="219:69"><name pos:start="219:69" pos:end="219:69">n</name></expr>]</index><index pos:start="219:71" pos:end="219:73">[<expr pos:start="219:72" pos:end="219:72"><name pos:start="219:72" pos:end="219:72">k</name></expr>]</index></name> <operator pos:start="219:75" pos:end="219:75">-</operator> <literal type="number" pos:start="219:77" pos:end="219:79">2.0</literal><operator pos:start="219:80" pos:end="219:80">)</operator> <operator pos:start="219:82" pos:end="219:82">*</operator> <literal type="number" pos:start="219:84" pos:end="219:86">0.5</literal></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></if> <else pos:start="221:27" pos:end="227:25">else <block pos:start="221:32" pos:end="227:25">{<block_content pos:start="223:29" pos:end="225:81">

                            <for pos:start="223:29" pos:end="225:81">for <control pos:start="223:33" pos:end="223:51">(<init pos:start="223:34" pos:end="223:39"><expr pos:start="223:34" pos:end="223:38"><name pos:start="223:34" pos:end="223:34">k</name> <operator pos:start="223:36" pos:end="223:36">=</operator> <literal type="number" pos:start="223:38" pos:end="223:38">0</literal></expr>;</init> <condition pos:start="223:41" pos:end="223:46"><expr pos:start="223:41" pos:end="223:45"><name pos:start="223:41" pos:end="223:41">k</name> <operator pos:start="223:43" pos:end="223:43">&lt;</operator> <literal type="number" pos:start="223:45" pos:end="223:45">3</literal></expr>;</condition> <incr pos:start="223:48" pos:end="223:50"><expr pos:start="223:48" pos:end="223:50"><name pos:start="223:48" pos:end="223:48">k</name><operator pos:start="223:49" pos:end="223:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="225:33" pos:end="225:81"><block_content pos:start="225:33" pos:end="225:81">

                                <expr_stmt pos:start="225:33" pos:end="225:81"><expr pos:start="225:33" pos:end="225:80"><name pos:start="225:33" pos:end="225:42"><name pos:start="225:33" pos:end="225:39">samples</name><index pos:start="225:40" pos:end="225:42">[<expr pos:start="225:41" pos:end="225:41"><name pos:start="225:41" pos:end="225:41">k</name></expr>]</index></name> <operator pos:start="225:44" pos:end="225:44">=</operator> <call pos:start="225:46" pos:end="225:80"><name pos:start="225:46" pos:end="225:63">SB_DITHERING_NOISE</name><argument_list pos:start="225:64" pos:end="225:80">(<argument pos:start="225:65" pos:end="225:66"><expr pos:start="225:65" pos:end="225:66"><name pos:start="225:65" pos:end="225:66">sb</name></expr></argument>,<argument pos:start="225:68" pos:end="225:79"><expr pos:start="225:68" pos:end="225:79"><name pos:start="225:68" pos:end="225:79"><name pos:start="225:68" pos:end="225:68">q</name><operator pos:start="225:69" pos:end="225:70">-&gt;</operator><name pos:start="225:71" pos:end="225:79">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="229:25" pos:end="229:32"><expr pos:start="229:25" pos:end="229:31"><name pos:start="229:25" pos:end="229:27">run</name> <operator pos:start="229:29" pos:end="229:29">=</operator> <literal type="number" pos:start="229:31" pos:end="229:31">3</literal></expr>;</expr_stmt>

                        <break pos:start="231:25" pos:end="231:30">break;</break>



                    <case pos:start="235:21" pos:end="235:28">case <expr pos:start="235:26" pos:end="235:27"><literal type="number" pos:start="235:26" pos:end="235:27">30</literal></expr>:</case>

                        <if_stmt pos:start="237:25" pos:end="243:77"><if pos:start="237:25" pos:end="239:97">if <condition pos:start="237:28" pos:end="237:54">(<expr pos:start="237:29" pos:end="237:53"><call pos:start="237:29" pos:end="237:48"><name pos:start="237:29" pos:end="237:37">BITS_LEFT</name><argument_list pos:start="237:38" pos:end="237:48">(<argument pos:start="237:39" pos:end="237:44"><expr pos:start="237:39" pos:end="237:44"><name pos:start="237:39" pos:end="237:44">length</name></expr></argument>,<argument pos:start="237:46" pos:end="237:47"><expr pos:start="237:46" pos:end="237:47"><name pos:start="237:46" pos:end="237:47">gb</name></expr></argument>)</argument_list></call> <operator pos:start="237:50" pos:end="237:51">&gt;=</operator> <literal type="number" pos:start="237:53" pos:end="237:53">4</literal></expr>)</condition><block type="pseudo" pos:start="239:29" pos:end="239:97"><block_content pos:start="239:29" pos:end="239:97">

                            <expr_stmt pos:start="239:29" pos:end="239:97"><expr pos:start="239:29" pos:end="239:96"><name pos:start="239:29" pos:end="239:38"><name pos:start="239:29" pos:end="239:35">samples</name><index pos:start="239:36" pos:end="239:38">[<expr pos:start="239:37" pos:end="239:37"><literal type="number" pos:start="239:37" pos:end="239:37">0</literal></expr>]</index></name> <operator pos:start="239:40" pos:end="239:40">=</operator> <name pos:start="239:42" pos:end="239:96"><name pos:start="239:42" pos:end="239:55">type30_dequant</name><index pos:start="239:56" pos:end="239:96">[<expr pos:start="239:57" pos:end="239:95"><call pos:start="239:57" pos:end="239:95"><name pos:start="239:57" pos:end="239:68">qdm2_get_vlc</name><argument_list pos:start="239:69" pos:end="239:95">(<argument pos:start="239:70" pos:end="239:71"><expr pos:start="239:70" pos:end="239:71"><name pos:start="239:70" pos:end="239:71">gb</name></expr></argument>, <argument pos:start="239:74" pos:end="239:88"><expr pos:start="239:74" pos:end="239:88"><operator pos:start="239:74" pos:end="239:74">&amp;</operator><name pos:start="239:75" pos:end="239:88">vlc_tab_type30</name></expr></argument>, <argument pos:start="239:91" pos:end="239:91"><expr pos:start="239:91" pos:end="239:91"><literal type="number" pos:start="239:91" pos:end="239:91">0</literal></expr></argument>, <argument pos:start="239:94" pos:end="239:94"><expr pos:start="239:94" pos:end="239:94"><literal type="number" pos:start="239:94" pos:end="239:94">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="241:25" pos:end="243:77">else<block type="pseudo" pos:start="243:29" pos:end="243:77"><block_content pos:start="243:29" pos:end="243:77">

                            <expr_stmt pos:start="243:29" pos:end="243:77"><expr pos:start="243:29" pos:end="243:76"><name pos:start="243:29" pos:end="243:38"><name pos:start="243:29" pos:end="243:35">samples</name><index pos:start="243:36" pos:end="243:38">[<expr pos:start="243:37" pos:end="243:37"><literal type="number" pos:start="243:37" pos:end="243:37">0</literal></expr>]</index></name> <operator pos:start="243:40" pos:end="243:40">=</operator> <call pos:start="243:42" pos:end="243:76"><name pos:start="243:42" pos:end="243:59">SB_DITHERING_NOISE</name><argument_list pos:start="243:60" pos:end="243:76">(<argument pos:start="243:61" pos:end="243:62"><expr pos:start="243:61" pos:end="243:62"><name pos:start="243:61" pos:end="243:62">sb</name></expr></argument>,<argument pos:start="243:64" pos:end="243:75"><expr pos:start="243:64" pos:end="243:75"><name pos:start="243:64" pos:end="243:75"><name pos:start="243:64" pos:end="243:64">q</name><operator pos:start="243:65" pos:end="243:66">-&gt;</operator><name pos:start="243:67" pos:end="243:75">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                        <expr_stmt pos:start="247:25" pos:end="247:32"><expr pos:start="247:25" pos:end="247:31"><name pos:start="247:25" pos:end="247:27">run</name> <operator pos:start="247:29" pos:end="247:29">=</operator> <literal type="number" pos:start="247:31" pos:end="247:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="249:25" pos:end="249:30">break;</break>



                    <case pos:start="253:21" pos:end="253:28">case <expr pos:start="253:26" pos:end="253:27"><literal type="number" pos:start="253:26" pos:end="253:27">34</literal></expr>:</case>

                        <if_stmt pos:start="255:25" pos:end="285:25"><if pos:start="255:25" pos:end="281:25">if <condition pos:start="255:28" pos:end="255:54">(<expr pos:start="255:29" pos:end="255:53"><call pos:start="255:29" pos:end="255:48"><name pos:start="255:29" pos:end="255:37">BITS_LEFT</name><argument_list pos:start="255:38" pos:end="255:48">(<argument pos:start="255:39" pos:end="255:44"><expr pos:start="255:39" pos:end="255:44"><name pos:start="255:39" pos:end="255:44">length</name></expr></argument>,<argument pos:start="255:46" pos:end="255:47"><expr pos:start="255:46" pos:end="255:47"><name pos:start="255:46" pos:end="255:47">gb</name></expr></argument>)</argument_list></call> <operator pos:start="255:50" pos:end="255:51">&gt;=</operator> <literal type="number" pos:start="255:53" pos:end="255:53">7</literal></expr>)</condition> <block pos:start="255:56" pos:end="281:25">{<block_content pos:start="257:29" pos:end="279:29">

                            <if_stmt pos:start="257:29" pos:end="279:29"><if pos:start="257:29" pos:end="267:29">if <condition pos:start="257:32" pos:end="257:45">(<expr pos:start="257:33" pos:end="257:44"><name pos:start="257:33" pos:end="257:44">type34_first</name></expr>)</condition> <block pos:start="257:47" pos:end="267:29">{<block_content pos:start="259:33" pos:end="265:49">

                                <expr_stmt pos:start="259:33" pos:end="259:75"><expr pos:start="259:33" pos:end="259:74"><name pos:start="259:33" pos:end="259:42">type34_div</name> <operator pos:start="259:44" pos:end="259:44">=</operator> <operator pos:start="259:46" pos:end="259:46">(</operator><name pos:start="259:47" pos:end="259:51">float</name><operator pos:start="259:52" pos:end="259:52">)</operator><operator pos:start="259:53" pos:end="259:53">(</operator><literal type="number" pos:start="259:54" pos:end="259:54">1</literal> <operator pos:start="259:56" pos:end="259:57">&lt;&lt;</operator> <call pos:start="259:59" pos:end="259:73"><name pos:start="259:59" pos:end="259:66">get_bits</name><argument_list pos:start="259:67" pos:end="259:73">(<argument pos:start="259:68" pos:end="259:69"><expr pos:start="259:68" pos:end="259:69"><name pos:start="259:68" pos:end="259:69">gb</name></expr></argument>, <argument pos:start="259:72" pos:end="259:72"><expr pos:start="259:72" pos:end="259:72"><literal type="number" pos:start="259:72" pos:end="259:72">2</literal></expr></argument>)</argument_list></call><operator pos:start="259:74" pos:end="259:74">)</operator></expr>;</expr_stmt>

                                <expr_stmt pos:start="261:33" pos:end="261:84"><expr pos:start="261:33" pos:end="261:83"><name pos:start="261:33" pos:end="261:42"><name pos:start="261:33" pos:end="261:39">samples</name><index pos:start="261:40" pos:end="261:42">[<expr pos:start="261:41" pos:end="261:41"><literal type="number" pos:start="261:41" pos:end="261:41">0</literal></expr>]</index></name> <operator pos:start="261:44" pos:end="261:44">=</operator> <operator pos:start="261:46" pos:end="261:46">(</operator><operator pos:start="261:47" pos:end="261:47">(</operator><name pos:start="261:48" pos:end="261:52">float</name><operator pos:start="261:53" pos:end="261:53">)</operator><call pos:start="261:54" pos:end="261:68"><name pos:start="261:54" pos:end="261:61">get_bits</name><argument_list pos:start="261:62" pos:end="261:68">(<argument pos:start="261:63" pos:end="261:64"><expr pos:start="261:63" pos:end="261:64"><name pos:start="261:63" pos:end="261:64">gb</name></expr></argument>, <argument pos:start="261:67" pos:end="261:67"><expr pos:start="261:67" pos:end="261:67"><literal type="number" pos:start="261:67" pos:end="261:67">5</literal></expr></argument>)</argument_list></call> <operator pos:start="261:70" pos:end="261:70">-</operator> <literal type="number" pos:start="261:72" pos:end="261:75">16.0</literal><operator pos:start="261:76" pos:end="261:76">)</operator> <operator pos:start="261:78" pos:end="261:78">/</operator> <literal type="number" pos:start="261:80" pos:end="261:83">15.0</literal></expr>;</expr_stmt>

                                <expr_stmt pos:start="263:33" pos:end="263:62"><expr pos:start="263:33" pos:end="263:61"><name pos:start="263:33" pos:end="263:48">type34_predictor</name> <operator pos:start="263:50" pos:end="263:50">=</operator> <name pos:start="263:52" pos:end="263:61"><name pos:start="263:52" pos:end="263:58">samples</name><index pos:start="263:59" pos:end="263:61">[<expr pos:start="263:60" pos:end="263:60"><literal type="number" pos:start="263:60" pos:end="263:60">0</literal></expr>]</index></name></expr>;</expr_stmt>

                                <expr_stmt pos:start="265:33" pos:end="265:49"><expr pos:start="265:33" pos:end="265:48"><name pos:start="265:33" pos:end="265:44">type34_first</name> <operator pos:start="265:46" pos:end="265:46">=</operator> <literal type="number" pos:start="265:48" pos:end="265:48">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="267:31" pos:end="279:29">else <block pos:start="267:36" pos:end="279:29">{<block_content pos:start="269:33" pos:end="277:62">

                                <decl_stmt pos:start="269:33" pos:end="269:85"><decl pos:start="269:33" pos:end="269:84"><type pos:start="269:33" pos:end="269:40"><name pos:start="269:33" pos:end="269:40">unsigned</name></type> <name pos:start="269:42" pos:end="269:42">v</name> <init pos:start="269:44" pos:end="269:84">= <expr pos:start="269:46" pos:end="269:84"><call pos:start="269:46" pos:end="269:84"><name pos:start="269:46" pos:end="269:57">qdm2_get_vlc</name><argument_list pos:start="269:58" pos:end="269:84">(<argument pos:start="269:59" pos:end="269:60"><expr pos:start="269:59" pos:end="269:60"><name pos:start="269:59" pos:end="269:60">gb</name></expr></argument>, <argument pos:start="269:63" pos:end="269:77"><expr pos:start="269:63" pos:end="269:77"><operator pos:start="269:63" pos:end="269:63">&amp;</operator><name pos:start="269:64" pos:end="269:77">vlc_tab_type34</name></expr></argument>, <argument pos:start="269:80" pos:end="269:80"><expr pos:start="269:80" pos:end="269:80"><literal type="number" pos:start="269:80" pos:end="269:80">0</literal></expr></argument>, <argument pos:start="269:83" pos:end="269:83"><expr pos:start="269:83" pos:end="269:83"><literal type="number" pos:start="269:83" pos:end="269:83">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <if_stmt pos:start="271:33" pos:end="273:63"><if pos:start="271:33" pos:end="273:63">if <condition pos:start="271:36" pos:end="271:70">(<expr pos:start="271:37" pos:end="271:69"><name pos:start="271:37" pos:end="271:37">v</name> <operator pos:start="271:39" pos:end="271:40">&gt;=</operator> <call pos:start="271:42" pos:end="271:69"><name pos:start="271:42" pos:end="271:55">FF_ARRAY_ELEMS</name><argument_list pos:start="271:56" pos:end="271:69">(<argument pos:start="271:57" pos:end="271:68"><expr pos:start="271:57" pos:end="271:68"><name pos:start="271:57" pos:end="271:68">type34_delta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="273:37" pos:end="273:63"><block_content pos:start="273:37" pos:end="273:63">

                                    <return pos:start="273:37" pos:end="273:63">return <expr pos:start="273:44" pos:end="273:62"><name pos:start="273:44" pos:end="273:62">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                                <expr_stmt pos:start="275:33" pos:end="275:93"><expr pos:start="275:33" pos:end="275:92"><name pos:start="275:33" pos:end="275:42"><name pos:start="275:33" pos:end="275:39">samples</name><index pos:start="275:40" pos:end="275:42">[<expr pos:start="275:41" pos:end="275:41"><literal type="number" pos:start="275:41" pos:end="275:41">0</literal></expr>]</index></name> <operator pos:start="275:44" pos:end="275:44">=</operator> <name pos:start="275:46" pos:end="275:60"><name pos:start="275:46" pos:end="275:57">type34_delta</name><index pos:start="275:58" pos:end="275:60">[<expr pos:start="275:59" pos:end="275:59"><name pos:start="275:59" pos:end="275:59">v</name></expr>]</index></name> <operator pos:start="275:62" pos:end="275:62">/</operator> <name pos:start="275:64" pos:end="275:73">type34_div</name> <operator pos:start="275:75" pos:end="275:75">+</operator> <name pos:start="275:77" pos:end="275:92">type34_predictor</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="277:33" pos:end="277:62"><expr pos:start="277:33" pos:end="277:61"><name pos:start="277:33" pos:end="277:48">type34_predictor</name> <operator pos:start="277:50" pos:end="277:50">=</operator> <name pos:start="277:52" pos:end="277:61"><name pos:start="277:52" pos:end="277:58">samples</name><index pos:start="277:59" pos:end="277:61">[<expr pos:start="277:60" pos:end="277:60"><literal type="number" pos:start="277:60" pos:end="277:60">0</literal></expr>]</index></name></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="281:27" pos:end="285:25">else <block pos:start="281:32" pos:end="285:25">{<block_content pos:start="283:29" pos:end="283:77">

                            <expr_stmt pos:start="283:29" pos:end="283:77"><expr pos:start="283:29" pos:end="283:76"><name pos:start="283:29" pos:end="283:38"><name pos:start="283:29" pos:end="283:35">samples</name><index pos:start="283:36" pos:end="283:38">[<expr pos:start="283:37" pos:end="283:37"><literal type="number" pos:start="283:37" pos:end="283:37">0</literal></expr>]</index></name> <operator pos:start="283:40" pos:end="283:40">=</operator> <call pos:start="283:42" pos:end="283:76"><name pos:start="283:42" pos:end="283:59">SB_DITHERING_NOISE</name><argument_list pos:start="283:60" pos:end="283:76">(<argument pos:start="283:61" pos:end="283:62"><expr pos:start="283:61" pos:end="283:62"><name pos:start="283:61" pos:end="283:62">sb</name></expr></argument>,<argument pos:start="283:64" pos:end="283:75"><expr pos:start="283:64" pos:end="283:75"><name pos:start="283:64" pos:end="283:75"><name pos:start="283:64" pos:end="283:64">q</name><operator pos:start="283:65" pos:end="283:66">-&gt;</operator><name pos:start="283:67" pos:end="283:75">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="287:25" pos:end="287:32"><expr pos:start="287:25" pos:end="287:31"><name pos:start="287:25" pos:end="287:27">run</name> <operator pos:start="287:29" pos:end="287:29">=</operator> <literal type="number" pos:start="287:31" pos:end="287:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="289:25" pos:end="289:30">break;</break>



                    <default pos:start="293:21" pos:end="293:28">default:</default>

                        <expr_stmt pos:start="295:25" pos:end="295:73"><expr pos:start="295:25" pos:end="295:72"><name pos:start="295:25" pos:end="295:34"><name pos:start="295:25" pos:end="295:31">samples</name><index pos:start="295:32" pos:end="295:34">[<expr pos:start="295:33" pos:end="295:33"><literal type="number" pos:start="295:33" pos:end="295:33">0</literal></expr>]</index></name> <operator pos:start="295:36" pos:end="295:36">=</operator> <call pos:start="295:38" pos:end="295:72"><name pos:start="295:38" pos:end="295:55">SB_DITHERING_NOISE</name><argument_list pos:start="295:56" pos:end="295:72">(<argument pos:start="295:57" pos:end="295:58"><expr pos:start="295:57" pos:end="295:58"><name pos:start="295:57" pos:end="295:58">sb</name></expr></argument>,<argument pos:start="295:60" pos:end="295:71"><expr pos:start="295:60" pos:end="295:71"><name pos:start="295:60" pos:end="295:71"><name pos:start="295:60" pos:end="295:60">q</name><operator pos:start="295:61" pos:end="295:62">-&gt;</operator><name pos:start="295:63" pos:end="295:71">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="297:25" pos:end="297:32"><expr pos:start="297:25" pos:end="297:31"><name pos:start="297:25" pos:end="297:27">run</name> <operator pos:start="297:29" pos:end="297:29">=</operator> <literal type="number" pos:start="297:31" pos:end="297:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="299:25" pos:end="299:30">break;</break>

                </block_content>}</block></switch>



                <if_stmt pos:start="305:17" pos:end="335:17"><if pos:start="305:17" pos:end="327:17">if <condition pos:start="305:20" pos:end="305:34">(<expr pos:start="305:21" pos:end="305:33"><name pos:start="305:21" pos:end="305:33">joined_stereo</name></expr>)</condition> <block pos:start="305:36" pos:end="327:17">{<block_content pos:start="307:21" pos:end="325:114">

                    <decl_stmt pos:start="307:21" pos:end="307:52"><decl pos:start="307:21" pos:end="307:51"><type pos:start="307:21" pos:end="307:25"><name pos:start="307:21" pos:end="307:25">float</name></type> <name pos:start="307:27" pos:end="307:51"><name pos:start="307:27" pos:end="307:29">tmp</name><index pos:start="307:30" pos:end="307:33">[<expr pos:start="307:31" pos:end="307:32"><literal type="number" pos:start="307:31" pos:end="307:32">10</literal></expr>]</index><index pos:start="307:34" pos:end="307:51">[<expr pos:start="307:35" pos:end="307:50"><name pos:start="307:35" pos:end="307:50">MPA_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>



                    <for pos:start="311:21" pos:end="317:21">for <control pos:start="311:25" pos:end="311:45">(<init pos:start="311:26" pos:end="311:31"><expr pos:start="311:26" pos:end="311:30"><name pos:start="311:26" pos:end="311:26">k</name> <operator pos:start="311:28" pos:end="311:28">=</operator> <literal type="number" pos:start="311:30" pos:end="311:30">0</literal></expr>;</init> <condition pos:start="311:33" pos:end="311:40"><expr pos:start="311:33" pos:end="311:39"><name pos:start="311:33" pos:end="311:33">k</name> <operator pos:start="311:35" pos:end="311:35">&lt;</operator> <name pos:start="311:37" pos:end="311:39">run</name></expr>;</condition> <incr pos:start="311:42" pos:end="311:44"><expr pos:start="311:42" pos:end="311:44"><name pos:start="311:42" pos:end="311:42">k</name><operator pos:start="311:43" pos:end="311:44">++</operator></expr></incr>)</control> <block pos:start="311:47" pos:end="317:21">{<block_content pos:start="313:25" pos:end="315:88">

                        <expr_stmt pos:start="313:25" pos:end="313:47"><expr pos:start="313:25" pos:end="313:46"><name pos:start="313:25" pos:end="313:33"><name pos:start="313:25" pos:end="313:27">tmp</name><index pos:start="313:28" pos:end="313:30">[<expr pos:start="313:29" pos:end="313:29"><name pos:start="313:29" pos:end="313:29">k</name></expr>]</index><index pos:start="313:31" pos:end="313:33">[<expr pos:start="313:32" pos:end="313:32"><literal type="number" pos:start="313:32" pos:end="313:32">0</literal></expr>]</index></name> <operator pos:start="313:35" pos:end="313:35">=</operator> <name pos:start="313:37" pos:end="313:46"><name pos:start="313:37" pos:end="313:43">samples</name><index pos:start="313:44" pos:end="313:46">[<expr pos:start="313:45" pos:end="313:45"><name pos:start="313:45" pos:end="313:45">k</name></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="315:25" pos:end="315:88"><expr pos:start="315:25" pos:end="315:87"><name pos:start="315:25" pos:end="315:33"><name pos:start="315:25" pos:end="315:27">tmp</name><index pos:start="315:28" pos:end="315:30">[<expr pos:start="315:29" pos:end="315:29"><name pos:start="315:29" pos:end="315:29">k</name></expr>]</index><index pos:start="315:31" pos:end="315:33">[<expr pos:start="315:32" pos:end="315:32"><literal type="number" pos:start="315:32" pos:end="315:32">1</literal></expr>]</index></name> <operator pos:start="315:35" pos:end="315:35">=</operator> <ternary pos:start="315:37" pos:end="315:87"><condition pos:start="315:37" pos:end="315:62"><expr pos:start="315:37" pos:end="315:60"><operator pos:start="315:37" pos:end="315:37">(</operator><name pos:start="315:38" pos:end="315:59"><name pos:start="315:38" pos:end="315:46">sign_bits</name><index pos:start="315:47" pos:end="315:59">[<expr pos:start="315:48" pos:end="315:58"><operator pos:start="315:48" pos:end="315:48">(</operator><name pos:start="315:49" pos:end="315:49">j</name> <operator pos:start="315:51" pos:end="315:51">+</operator> <name pos:start="315:53" pos:end="315:53">k</name><operator pos:start="315:54" pos:end="315:54">)</operator> <operator pos:start="315:56" pos:end="315:56">/</operator> <literal type="number" pos:start="315:58" pos:end="315:58">8</literal></expr>]</index></name><operator pos:start="315:60" pos:end="315:60">)</operator></expr> ?</condition><then pos:start="315:64" pos:end="315:74"> <expr pos:start="315:64" pos:end="315:74"><operator pos:start="315:64" pos:end="315:64">-</operator><name pos:start="315:65" pos:end="315:74"><name pos:start="315:65" pos:end="315:71">samples</name><index pos:start="315:72" pos:end="315:74">[<expr pos:start="315:73" pos:end="315:73"><name pos:start="315:73" pos:end="315:73">k</name></expr>]</index></name></expr> </then><else pos:start="315:76" pos:end="315:87">: <expr pos:start="315:78" pos:end="315:87"><name pos:start="315:78" pos:end="315:87"><name pos:start="315:78" pos:end="315:84">samples</name><index pos:start="315:85" pos:end="315:87">[<expr pos:start="315:86" pos:end="315:86"><name pos:start="315:86" pos:end="315:86">k</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <for pos:start="319:21" pos:end="325:114">for <control pos:start="319:25" pos:end="319:62">(<init pos:start="319:26" pos:end="319:33"><expr pos:start="319:26" pos:end="319:32"><name pos:start="319:26" pos:end="319:28">chs</name> <operator pos:start="319:30" pos:end="319:30">=</operator> <literal type="number" pos:start="319:32" pos:end="319:32">0</literal></expr>;</init> <condition pos:start="319:35" pos:end="319:55"><expr pos:start="319:35" pos:end="319:54"><name pos:start="319:35" pos:end="319:37">chs</name> <operator pos:start="319:39" pos:end="319:39">&lt;</operator> <name pos:start="319:41" pos:end="319:54"><name pos:start="319:41" pos:end="319:41">q</name><operator pos:start="319:42" pos:end="319:43">-&gt;</operator><name pos:start="319:44" pos:end="319:54">nb_channels</name></name></expr>;</condition> <incr pos:start="319:57" pos:end="319:61"><expr pos:start="319:57" pos:end="319:61"><name pos:start="319:57" pos:end="319:59">chs</name><operator pos:start="319:60" pos:end="319:61">++</operator></expr></incr>)</control><block type="pseudo" pos:start="321:25" pos:end="325:114"><block_content pos:start="321:25" pos:end="325:114">

                        <for pos:start="321:25" pos:end="325:114">for <control pos:start="321:29" pos:end="321:49">(<init pos:start="321:30" pos:end="321:35"><expr pos:start="321:30" pos:end="321:34"><name pos:start="321:30" pos:end="321:30">k</name> <operator pos:start="321:32" pos:end="321:32">=</operator> <literal type="number" pos:start="321:34" pos:end="321:34">0</literal></expr>;</init> <condition pos:start="321:37" pos:end="321:44"><expr pos:start="321:37" pos:end="321:43"><name pos:start="321:37" pos:end="321:37">k</name> <operator pos:start="321:39" pos:end="321:39">&lt;</operator> <name pos:start="321:41" pos:end="321:43">run</name></expr>;</condition> <incr pos:start="321:46" pos:end="321:48"><expr pos:start="321:46" pos:end="321:48"><name pos:start="321:46" pos:end="321:46">k</name><operator pos:start="321:47" pos:end="321:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="323:29" pos:end="325:114"><block_content pos:start="323:29" pos:end="325:114">

                            <if_stmt pos:start="323:29" pos:end="325:114"><if pos:start="323:29" pos:end="325:114">if <condition pos:start="323:32" pos:end="323:46">(<expr pos:start="323:33" pos:end="323:45"><operator pos:start="323:33" pos:end="323:33">(</operator><name pos:start="323:34" pos:end="323:34">j</name> <operator pos:start="323:36" pos:end="323:36">+</operator> <name pos:start="323:38" pos:end="323:38">k</name><operator pos:start="323:39" pos:end="323:39">)</operator> <operator pos:start="323:41" pos:end="323:41">&lt;</operator> <literal type="number" pos:start="323:43" pos:end="323:45">128</literal></expr>)</condition><block type="pseudo" pos:start="325:33" pos:end="325:114"><block_content pos:start="325:33" pos:end="325:114">

                                <expr_stmt pos:start="325:33" pos:end="325:114"><expr pos:start="325:33" pos:end="325:113"><name pos:start="325:33" pos:end="325:61"><name pos:start="325:33" pos:end="325:33">q</name><operator pos:start="325:34" pos:end="325:35">-&gt;</operator><name pos:start="325:36" pos:end="325:45">sb_samples</name><index pos:start="325:46" pos:end="325:50">[<expr pos:start="325:47" pos:end="325:49"><name pos:start="325:47" pos:end="325:49">chs</name></expr>]</index><index pos:start="325:51" pos:end="325:57">[<expr pos:start="325:52" pos:end="325:56"><name pos:start="325:52" pos:end="325:52">j</name> <operator pos:start="325:54" pos:end="325:54">+</operator> <name pos:start="325:56" pos:end="325:56">k</name></expr>]</index><index pos:start="325:58" pos:end="325:61">[<expr pos:start="325:59" pos:end="325:60"><name pos:start="325:59" pos:end="325:60">sb</name></expr>]</index></name> <operator pos:start="325:63" pos:end="325:63">=</operator> <name pos:start="325:65" pos:end="325:99"><name pos:start="325:65" pos:end="325:65">q</name><operator pos:start="325:66" pos:end="325:67">-&gt;</operator><name pos:start="325:68" pos:end="325:77">tone_level</name><index pos:start="325:78" pos:end="325:82">[<expr pos:start="325:79" pos:end="325:81"><name pos:start="325:79" pos:end="325:81">chs</name></expr>]</index><index pos:start="325:83" pos:end="325:86">[<expr pos:start="325:84" pos:end="325:85"><name pos:start="325:84" pos:end="325:85">sb</name></expr>]</index><index pos:start="325:87" pos:end="325:99">[<expr pos:start="325:88" pos:end="325:98"><operator pos:start="325:88" pos:end="325:88">(</operator><operator pos:start="325:89" pos:end="325:89">(</operator><name pos:start="325:90" pos:end="325:90">j</name> <operator pos:start="325:92" pos:end="325:92">+</operator> <name pos:start="325:94" pos:end="325:94">k</name><operator pos:start="325:95" pos:end="325:95">)</operator><operator pos:start="325:96" pos:end="325:96">/</operator><literal type="number" pos:start="325:97" pos:end="325:97">2</literal><operator pos:start="325:98" pos:end="325:98">)</operator></expr>]</index></name> <operator pos:start="325:101" pos:end="325:101">*</operator> <name pos:start="325:103" pos:end="325:113"><name pos:start="325:103" pos:end="325:105">tmp</name><index pos:start="325:106" pos:end="325:108">[<expr pos:start="325:107" pos:end="325:107"><name pos:start="325:107" pos:end="325:107">k</name></expr>]</index><index pos:start="325:109" pos:end="325:113">[<expr pos:start="325:110" pos:end="325:112"><name pos:start="325:110" pos:end="325:112">chs</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

                </block_content>}</block></if> <else pos:start="327:19" pos:end="335:17">else <block pos:start="327:24" pos:end="335:17">{<block_content pos:start="329:21" pos:end="333:105">

                    <for pos:start="329:21" pos:end="333:105">for <control pos:start="329:25" pos:end="329:45">(<init pos:start="329:26" pos:end="329:31"><expr pos:start="329:26" pos:end="329:30"><name pos:start="329:26" pos:end="329:26">k</name> <operator pos:start="329:28" pos:end="329:28">=</operator> <literal type="number" pos:start="329:30" pos:end="329:30">0</literal></expr>;</init> <condition pos:start="329:33" pos:end="329:40"><expr pos:start="329:33" pos:end="329:39"><name pos:start="329:33" pos:end="329:33">k</name> <operator pos:start="329:35" pos:end="329:35">&lt;</operator> <name pos:start="329:37" pos:end="329:39">run</name></expr>;</condition> <incr pos:start="329:42" pos:end="329:44"><expr pos:start="329:42" pos:end="329:44"><name pos:start="329:42" pos:end="329:42">k</name><operator pos:start="329:43" pos:end="329:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="331:25" pos:end="333:105"><block_content pos:start="331:25" pos:end="333:105">

                        <if_stmt pos:start="331:25" pos:end="333:105"><if pos:start="331:25" pos:end="333:105">if <condition pos:start="331:28" pos:end="331:42">(<expr pos:start="331:29" pos:end="331:41"><operator pos:start="331:29" pos:end="331:29">(</operator><name pos:start="331:30" pos:end="331:30">j</name> <operator pos:start="331:32" pos:end="331:32">+</operator> <name pos:start="331:34" pos:end="331:34">k</name><operator pos:start="331:35" pos:end="331:35">)</operator> <operator pos:start="331:37" pos:end="331:37">&lt;</operator> <literal type="number" pos:start="331:39" pos:end="331:41">128</literal></expr>)</condition><block type="pseudo" pos:start="333:29" pos:end="333:105"><block_content pos:start="333:29" pos:end="333:105">

                            <expr_stmt pos:start="333:29" pos:end="333:105"><expr pos:start="333:29" pos:end="333:104"><name pos:start="333:29" pos:end="333:56"><name pos:start="333:29" pos:end="333:29">q</name><operator pos:start="333:30" pos:end="333:31">-&gt;</operator><name pos:start="333:32" pos:end="333:41">sb_samples</name><index pos:start="333:42" pos:end="333:45">[<expr pos:start="333:43" pos:end="333:44"><name pos:start="333:43" pos:end="333:44">ch</name></expr>]</index><index pos:start="333:46" pos:end="333:52">[<expr pos:start="333:47" pos:end="333:51"><name pos:start="333:47" pos:end="333:47">j</name> <operator pos:start="333:49" pos:end="333:49">+</operator> <name pos:start="333:51" pos:end="333:51">k</name></expr>]</index><index pos:start="333:53" pos:end="333:56">[<expr pos:start="333:54" pos:end="333:55"><name pos:start="333:54" pos:end="333:55">sb</name></expr>]</index></name> <operator pos:start="333:58" pos:end="333:58">=</operator> <name pos:start="333:60" pos:end="333:91"><name pos:start="333:60" pos:end="333:60">q</name><operator pos:start="333:61" pos:end="333:62">-&gt;</operator><name pos:start="333:63" pos:end="333:72">tone_level</name><index pos:start="333:73" pos:end="333:76">[<expr pos:start="333:74" pos:end="333:75"><name pos:start="333:74" pos:end="333:75">ch</name></expr>]</index><index pos:start="333:77" pos:end="333:80">[<expr pos:start="333:78" pos:end="333:79"><name pos:start="333:78" pos:end="333:79">sb</name></expr>]</index><index pos:start="333:81" pos:end="333:91">[<expr pos:start="333:82" pos:end="333:90"><operator pos:start="333:82" pos:end="333:82">(</operator><name pos:start="333:83" pos:end="333:83">j</name> <operator pos:start="333:85" pos:end="333:85">+</operator> <name pos:start="333:87" pos:end="333:87">k</name><operator pos:start="333:88" pos:end="333:88">)</operator><operator pos:start="333:89" pos:end="333:89">/</operator><literal type="number" pos:start="333:90" pos:end="333:90">2</literal></expr>]</index></name> <operator pos:start="333:93" pos:end="333:93">*</operator> <name pos:start="333:95" pos:end="333:104"><name pos:start="333:95" pos:end="333:101">samples</name><index pos:start="333:102" pos:end="333:104">[<expr pos:start="333:103" pos:end="333:103"><name pos:start="333:103" pos:end="333:103">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="339:17" pos:end="339:25"><expr pos:start="339:17" pos:end="339:24"><name pos:start="339:17" pos:end="339:17">j</name> <operator pos:start="339:19" pos:end="339:20">+=</operator> <name pos:start="339:22" pos:end="339:24">run</name></expr>;</expr_stmt>

            </block_content>}</block></for> <comment type="line" pos:start="341:15" pos:end="341:23">// j loop</comment>

        </block_content>}</block></for> <comment type="line" pos:start="343:11" pos:end="343:25">// channel loop</comment>

    </block_content>}</block></for> <comment type="line" pos:start="345:7" pos:end="345:21">// subband loop</comment>

    <return pos:start="347:5" pos:end="347:13">return <expr pos:start="347:12" pos:end="347:12"><literal type="number" pos:start="347:12" pos:end="347:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
