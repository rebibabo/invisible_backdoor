<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26439.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ape_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="297:1">{<block_content pos:start="7:5" pos:end="295:41">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">frame</name>     <init pos:start="7:24" pos:end="7:29">= <expr pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:29">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">APEContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">s</name> <init pos:start="11:19" pos:end="11:36">= <expr pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:25">avctx</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:20">sample8</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:21">sample16</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">int32_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:21">sample24</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:13"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:13">ch</name></decl>, <decl pos:start="19:16" pos:end="19:18"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:16" pos:end="19:18">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:22">blockstodecode</name></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="27:37">/* this should never be negative, but bad things will happen if it is, so

       check it just to make sure. */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><call pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:14">av_assert0</name><argument_list pos:start="29:15" pos:end="29:31">(<argument pos:start="29:16" pos:end="29:30"><expr pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:25"><name pos:start="29:16" pos:end="29:16">s</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:25">samples</name></name> <operator pos:start="29:27" pos:end="29:28">&gt;=</operator> <literal type="number" pos:start="29:30" pos:end="29:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="157:5"><if pos:start="33:5" pos:end="157:5">if<condition pos:start="33:7" pos:end="33:19">(<expr pos:start="33:8" pos:end="33:18"><operator pos:start="33:8" pos:end="33:8">!</operator><name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:18">samples</name></name></expr>)</condition><block pos:start="33:20" pos:end="157:5">{<block_content pos:start="35:9" pos:end="155:9">

        <decl_stmt pos:start="35:9" pos:end="35:33"><decl pos:start="35:9" pos:end="35:24"><type pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:16">uint32_t</name></type> <name pos:start="35:18" pos:end="35:24">nblocks</name></decl>, <decl pos:start="35:27" pos:end="35:32"><type ref="prev" pos:start="35:9" pos:end="35:16"/><name pos:start="35:27" pos:end="35:32">offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:21"><decl pos:start="37:9" pos:end="37:20"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:20">buf_size</name></decl>;</decl_stmt>



        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:25">(<expr pos:start="41:13" pos:end="41:24"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:24"><name pos:start="41:14" pos:end="41:18">avpkt</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:24">size</name></name></expr>)</condition> <block pos:start="41:27" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:21">

            <expr_stmt pos:start="43:13" pos:end="43:31"><expr pos:start="43:13" pos:end="43:30"><operator pos:start="43:13" pos:end="43:13">*</operator><name pos:start="43:14" pos:end="43:26">got_frame_ptr</name> <operator pos:start="43:28" pos:end="43:28">=</operator> <literal type="number" pos:start="43:30" pos:end="43:30">0</literal></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:21">return <expr pos:start="45:20" pos:end="45:20"><literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:28">(<expr pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:17">avpkt</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:23">size</name></name> <operator pos:start="49:25" pos:end="49:25">&lt;</operator> <literal type="number" pos:start="49:27" pos:end="49:27">8</literal></expr>)</condition> <block pos:start="49:30" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:39">

            <expr_stmt pos:start="51:13" pos:end="51:65"><expr pos:start="51:13" pos:end="51:64"><call pos:start="51:13" pos:end="51:64"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="51:64">(<argument pos:start="51:20" pos:end="51:24"><expr pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:24">avctx</name></expr></argument>, <argument pos:start="51:27" pos:end="51:38"><expr pos:start="51:27" pos:end="51:38"><name pos:start="51:27" pos:end="51:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:41" pos:end="51:63"><expr pos:start="51:41" pos:end="51:63"><literal type="string" pos:start="51:41" pos:end="51:63">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:39">return <expr pos:start="53:20" pos:end="53:38"><name pos:start="53:20" pos:end="53:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:36"><expr pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:16">buf_size</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:30"><name pos:start="57:20" pos:end="57:24">avpkt</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:30">size</name></name> <operator pos:start="57:32" pos:end="57:32">&amp;</operator> <operator pos:start="57:34" pos:end="57:34">~</operator><literal type="number" pos:start="57:35" pos:end="57:35">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:36">(<expr pos:start="59:13" pos:end="59:35"><name pos:start="59:13" pos:end="59:20">buf_size</name> <operator pos:start="59:22" pos:end="59:23">!=</operator> <name pos:start="59:25" pos:end="59:35"><name pos:start="59:25" pos:end="59:29">avpkt</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:35">size</name></name></expr>)</condition> <block pos:start="59:38" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:64">

            <expr_stmt pos:start="61:13" pos:end="63:64"><expr pos:start="61:13" pos:end="63:63"><call pos:start="61:13" pos:end="63:63"><name pos:start="61:13" pos:end="61:18">av_log</name><argument_list pos:start="61:19" pos:end="63:63">(<argument pos:start="61:20" pos:end="61:24"><expr pos:start="61:20" pos:end="61:24"><name pos:start="61:20" pos:end="61:24">avctx</name></expr></argument>, <argument pos:start="61:27" pos:end="61:40"><expr pos:start="61:27" pos:end="61:40"><name pos:start="61:27" pos:end="61:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="61:43" pos:end="63:62"><expr pos:start="61:43" pos:end="63:62"><literal type="string" pos:start="61:43" pos:end="61:80">"packet size is not a multiple of 4. "</literal>

                   <literal type="string" pos:start="63:20" pos:end="63:62">"extra bytes at the end will be skipped.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="69:26"><if pos:start="67:9" pos:end="69:26">if <condition pos:start="67:12" pos:end="67:34">(<expr pos:start="67:13" pos:end="67:33"><name pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:26">fileversion</name></name> <operator pos:start="67:28" pos:end="67:28">&lt;</operator> <literal type="number" pos:start="67:30" pos:end="67:33">3950</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:26"><block_content pos:start="69:13" pos:end="69:26"> <comment type="line" pos:start="67:36" pos:end="67:74">// previous versions overread two bytes</comment>

            <expr_stmt pos:start="69:13" pos:end="69:26"><expr pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:20">buf_size</name> <operator pos:start="69:22" pos:end="69:23">+=</operator> <literal type="number" pos:start="69:25" pos:end="69:25">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:65"><expr pos:start="71:9" pos:end="71:64"><call pos:start="71:9" pos:end="71:64"><name pos:start="71:9" pos:end="71:29">av_fast_padded_malloc</name><argument_list pos:start="71:30" pos:end="71:64">(<argument pos:start="71:31" pos:end="71:38"><expr pos:start="71:31" pos:end="71:38"><operator pos:start="71:31" pos:end="71:31">&amp;</operator><name pos:start="71:32" pos:end="71:38"><name pos:start="71:32" pos:end="71:32">s</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:38">data</name></name></expr></argument>, <argument pos:start="71:41" pos:end="71:53"><expr pos:start="71:41" pos:end="71:53"><operator pos:start="71:41" pos:end="71:41">&amp;</operator><name pos:start="71:42" pos:end="71:53"><name pos:start="71:42" pos:end="71:42">s</name><operator pos:start="71:43" pos:end="71:44">-&gt;</operator><name pos:start="71:45" pos:end="71:53">data_size</name></name></expr></argument>, <argument pos:start="71:56" pos:end="71:63"><expr pos:start="71:56" pos:end="71:63"><name pos:start="71:56" pos:end="71:63">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="75:35"><if pos:start="73:9" pos:end="75:35">if <condition pos:start="73:12" pos:end="73:21">(<expr pos:start="73:13" pos:end="73:20"><operator pos:start="73:13" pos:end="73:13">!</operator><name pos:start="73:14" pos:end="73:20"><name pos:start="73:14" pos:end="73:14">s</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:20">data</name></name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:35"><block_content pos:start="75:13" pos:end="75:35">

            <return pos:start="75:13" pos:end="75:35">return <expr pos:start="75:20" pos:end="75:34"><call pos:start="75:20" pos:end="75:34"><name pos:start="75:20" pos:end="75:26">AVERROR</name><argument_list pos:start="75:27" pos:end="75:34">(<argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="79:41"><expr pos:start="77:9" pos:end="79:40"><call pos:start="77:9" pos:end="79:40"><name pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:15">bdsp</name><operator pos:start="77:16" pos:end="77:16">.</operator><name pos:start="77:17" pos:end="77:25">bswap_buf</name></name><argument_list pos:start="77:26" pos:end="79:40">(<argument pos:start="77:27" pos:end="77:46"><expr pos:start="77:27" pos:end="77:46"><operator pos:start="77:27" pos:end="77:27">(</operator><name pos:start="77:28" pos:end="77:35">uint32_t</name> <operator pos:start="77:37" pos:end="77:37">*</operator><operator pos:start="77:38" pos:end="77:38">)</operator> <name pos:start="77:40" pos:end="77:46"><name pos:start="77:40" pos:end="77:40">s</name><operator pos:start="77:41" pos:end="77:42">-&gt;</operator><name pos:start="77:43" pos:end="77:46">data</name></name></expr></argument>, <argument pos:start="77:49" pos:end="77:70"><expr pos:start="77:49" pos:end="77:70"><operator pos:start="77:49" pos:end="77:49">(</operator><specifier pos:start="77:50" pos:end="77:54">const</specifier> <name pos:start="77:56" pos:end="77:63">uint32_t</name> <operator pos:start="77:65" pos:end="77:65">*</operator><operator pos:start="77:66" pos:end="77:66">)</operator> <name pos:start="77:68" pos:end="77:70">buf</name></expr></argument>,

                          <argument pos:start="79:27" pos:end="79:39"><expr pos:start="79:27" pos:end="79:39"><name pos:start="79:27" pos:end="79:34">buf_size</name> <operator pos:start="79:36" pos:end="79:37">&gt;&gt;</operator> <literal type="number" pos:start="79:39" pos:end="79:39">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:59"><expr pos:start="81:9" pos:end="81:58"><call pos:start="81:9" pos:end="81:58"><name pos:start="81:9" pos:end="81:14">memset</name><argument_list pos:start="81:15" pos:end="81:58">(<argument pos:start="81:16" pos:end="81:40"><expr pos:start="81:16" pos:end="81:40"><name pos:start="81:16" pos:end="81:22"><name pos:start="81:16" pos:end="81:16">s</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:22">data</name></name> <operator pos:start="81:24" pos:end="81:24">+</operator> <operator pos:start="81:26" pos:end="81:26">(</operator><name pos:start="81:27" pos:end="81:34">buf_size</name> <operator pos:start="81:36" pos:end="81:36">&amp;</operator> <operator pos:start="81:38" pos:end="81:38">~</operator><literal type="number" pos:start="81:39" pos:end="81:39">3</literal><operator pos:start="81:40" pos:end="81:40">)</operator></expr></argument>, <argument pos:start="81:43" pos:end="81:43"><expr pos:start="81:43" pos:end="81:43"><literal type="number" pos:start="81:43" pos:end="81:43">0</literal></expr></argument>, <argument pos:start="81:46" pos:end="81:57"><expr pos:start="81:46" pos:end="81:57"><name pos:start="81:46" pos:end="81:53">buf_size</name> <operator pos:start="81:55" pos:end="81:55">&amp;</operator> <literal type="number" pos:start="81:57" pos:end="81:57">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:25"><expr pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:14"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:14">ptr</name></name> <operator pos:start="83:16" pos:end="83:16">=</operator> <name pos:start="83:18" pos:end="83:24"><name pos:start="83:18" pos:end="83:18">s</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:24">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:41"><expr pos:start="85:9" pos:end="85:40"><name pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:19">data_end</name></name> <operator pos:start="85:21" pos:end="85:21">=</operator> <name pos:start="85:23" pos:end="85:29"><name pos:start="85:23" pos:end="85:23">s</name><operator pos:start="85:24" pos:end="85:25">-&gt;</operator><name pos:start="85:26" pos:end="85:29">data</name></name> <operator pos:start="85:31" pos:end="85:31">+</operator> <name pos:start="85:33" pos:end="85:40">buf_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:47"><expr pos:start="89:9" pos:end="89:46"><name pos:start="89:9" pos:end="89:15">nblocks</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="89:46"><name pos:start="89:19" pos:end="89:37">bytestream_get_be32</name><argument_list pos:start="89:38" pos:end="89:46">(<argument pos:start="89:39" pos:end="89:45"><expr pos:start="89:39" pos:end="89:45"><operator pos:start="89:39" pos:end="89:39">&amp;</operator><name pos:start="89:40" pos:end="89:45"><name pos:start="89:40" pos:end="89:40">s</name><operator pos:start="89:41" pos:end="89:42">-&gt;</operator><name pos:start="89:43" pos:end="89:45">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:47"><expr pos:start="91:9" pos:end="91:46"><name pos:start="91:9" pos:end="91:14">offset</name>  <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:46"><name pos:start="91:19" pos:end="91:37">bytestream_get_be32</name><argument_list pos:start="91:38" pos:end="91:46">(<argument pos:start="91:39" pos:end="91:45"><expr pos:start="91:39" pos:end="91:45"><operator pos:start="91:39" pos:end="91:39">&amp;</operator><name pos:start="91:40" pos:end="91:45"><name pos:start="91:40" pos:end="91:40">s</name><operator pos:start="91:41" pos:end="91:42">-&gt;</operator><name pos:start="91:43" pos:end="91:45">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="129:9"><if pos:start="93:9" pos:end="115:9">if <condition pos:start="93:12" pos:end="93:35">(<expr pos:start="93:13" pos:end="93:34"><name pos:start="93:13" pos:end="93:26"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:26">fileversion</name></name> <operator pos:start="93:28" pos:end="93:29">&gt;=</operator> <literal type="number" pos:start="93:31" pos:end="93:34">3900</literal></expr>)</condition> <block pos:start="93:37" pos:end="115:9">{<block_content pos:start="95:13" pos:end="113:29">

            <if_stmt pos:start="95:13" pos:end="103:13"><if pos:start="95:13" pos:end="103:13">if <condition pos:start="95:16" pos:end="95:27">(<expr pos:start="95:17" pos:end="95:26"><name pos:start="95:17" pos:end="95:22">offset</name> <operator pos:start="95:24" pos:end="95:24">&gt;</operator> <literal type="number" pos:start="95:26" pos:end="95:26">3</literal></expr>)</condition> <block pos:start="95:29" pos:end="103:13">{<block_content pos:start="97:17" pos:end="101:43">

                <expr_stmt pos:start="97:17" pos:end="97:73"><expr pos:start="97:17" pos:end="97:72"><call pos:start="97:17" pos:end="97:72"><name pos:start="97:17" pos:end="97:22">av_log</name><argument_list pos:start="97:23" pos:end="97:72">(<argument pos:start="97:24" pos:end="97:28"><expr pos:start="97:24" pos:end="97:28"><name pos:start="97:24" pos:end="97:28">avctx</name></expr></argument>, <argument pos:start="97:31" pos:end="97:42"><expr pos:start="97:31" pos:end="97:42"><name pos:start="97:31" pos:end="97:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:45" pos:end="97:71"><expr pos:start="97:45" pos:end="97:71"><literal type="string" pos:start="97:45" pos:end="97:71">"Incorrect offset passed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:31"><expr pos:start="99:17" pos:end="99:30"><name pos:start="99:17" pos:end="99:23"><name pos:start="99:17" pos:end="99:17">s</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:23">data</name></name> <operator pos:start="99:25" pos:end="99:25">=</operator> <name pos:start="99:27" pos:end="99:30">NULL</name></expr>;</expr_stmt>

                <return pos:start="101:17" pos:end="101:43">return <expr pos:start="101:24" pos:end="101:42"><name pos:start="101:24" pos:end="101:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="105:13" pos:end="111:13"><if pos:start="105:13" pos:end="111:13">if <condition pos:start="105:16" pos:end="105:46">(<expr pos:start="105:17" pos:end="105:45"><name pos:start="105:17" pos:end="105:27"><name pos:start="105:17" pos:end="105:17">s</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:27">data_end</name></name> <operator pos:start="105:29" pos:end="105:29">-</operator> <name pos:start="105:31" pos:end="105:36"><name pos:start="105:31" pos:end="105:31">s</name><operator pos:start="105:32" pos:end="105:33">-&gt;</operator><name pos:start="105:34" pos:end="105:36">ptr</name></name> <operator pos:start="105:38" pos:end="105:38">&lt;</operator> <name pos:start="105:40" pos:end="105:45">offset</name></expr>)</condition> <block pos:start="105:48" pos:end="111:13">{<block_content pos:start="107:17" pos:end="109:43">

                <expr_stmt pos:start="107:17" pos:end="107:69"><expr pos:start="107:17" pos:end="107:68"><call pos:start="107:17" pos:end="107:68"><name pos:start="107:17" pos:end="107:22">av_log</name><argument_list pos:start="107:23" pos:end="107:68">(<argument pos:start="107:24" pos:end="107:28"><expr pos:start="107:24" pos:end="107:28"><name pos:start="107:24" pos:end="107:28">avctx</name></expr></argument>, <argument pos:start="107:31" pos:end="107:42"><expr pos:start="107:31" pos:end="107:42"><name pos:start="107:31" pos:end="107:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:45" pos:end="107:67"><expr pos:start="107:45" pos:end="107:67"><literal type="string" pos:start="107:45" pos:end="107:67">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="109:17" pos:end="109:43">return <expr pos:start="109:24" pos:end="109:42"><name pos:start="109:24" pos:end="109:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:29"><expr pos:start="113:13" pos:end="113:28"><name pos:start="113:13" pos:end="113:18"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:18">ptr</name></name> <operator pos:start="113:20" pos:end="113:21">+=</operator> <name pos:start="113:23" pos:end="113:28">offset</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="129:9">else <block pos:start="115:16" pos:end="129:9">{<block_content pos:start="117:13" pos:end="127:47">

            <if_stmt pos:start="117:13" pos:end="119:27"><if pos:start="117:13" pos:end="119:27">if <condition pos:start="117:16" pos:end="117:81">(<expr pos:start="117:17" pos:end="117:80"><operator pos:start="117:17" pos:end="117:17">(</operator><name pos:start="117:18" pos:end="117:20">ret</name> <operator pos:start="117:22" pos:end="117:22">=</operator> <call pos:start="117:24" pos:end="117:75"><name pos:start="117:24" pos:end="117:37">init_get_bits8</name><argument_list pos:start="117:38" pos:end="117:75">(<argument pos:start="117:39" pos:end="117:44"><expr pos:start="117:39" pos:end="117:44"><operator pos:start="117:39" pos:end="117:39">&amp;</operator><name pos:start="117:40" pos:end="117:44"><name pos:start="117:40" pos:end="117:40">s</name><operator pos:start="117:41" pos:end="117:42">-&gt;</operator><name pos:start="117:43" pos:end="117:44">gb</name></name></expr></argument>, <argument pos:start="117:47" pos:end="117:52"><expr pos:start="117:47" pos:end="117:52"><name pos:start="117:47" pos:end="117:52"><name pos:start="117:47" pos:end="117:47">s</name><operator pos:start="117:48" pos:end="117:49">-&gt;</operator><name pos:start="117:50" pos:end="117:52">ptr</name></name></expr></argument>, <argument pos:start="117:55" pos:end="117:74"><expr pos:start="117:55" pos:end="117:74"><name pos:start="117:55" pos:end="117:65"><name pos:start="117:55" pos:end="117:55">s</name><operator pos:start="117:56" pos:end="117:57">-&gt;</operator><name pos:start="117:58" pos:end="117:65">data_end</name></name> <operator pos:start="117:67" pos:end="117:67">-</operator> <name pos:start="117:69" pos:end="117:74"><name pos:start="117:69" pos:end="117:69">s</name><operator pos:start="117:70" pos:end="117:71">-&gt;</operator><name pos:start="117:72" pos:end="117:74">ptr</name></name></expr></argument>)</argument_list></call><operator pos:start="117:76" pos:end="117:76">)</operator> <operator pos:start="117:78" pos:end="117:78">&lt;</operator> <literal type="number" pos:start="117:80" pos:end="117:80">0</literal></expr>)</condition><block type="pseudo" pos:start="119:17" pos:end="119:27"><block_content pos:start="119:17" pos:end="119:27">

                <return pos:start="119:17" pos:end="119:27">return <expr pos:start="119:24" pos:end="119:26"><name pos:start="119:24" pos:end="119:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="121:13" pos:end="127:47"><if pos:start="121:13" pos:end="123:51">if <condition pos:start="121:16" pos:end="121:38">(<expr pos:start="121:17" pos:end="121:37"><name pos:start="121:17" pos:end="121:30"><name pos:start="121:17" pos:end="121:17">s</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:30">fileversion</name></name> <operator pos:start="121:32" pos:end="121:32">&gt;</operator> <literal type="number" pos:start="121:34" pos:end="121:37">3800</literal></expr>)</condition><block type="pseudo" pos:start="123:17" pos:end="123:51"><block_content pos:start="123:17" pos:end="123:51">

                <expr_stmt pos:start="123:17" pos:end="123:51"><expr pos:start="123:17" pos:end="123:50"><call pos:start="123:17" pos:end="123:50"><name pos:start="123:17" pos:end="123:30">skip_bits_long</name><argument_list pos:start="123:31" pos:end="123:50">(<argument pos:start="123:32" pos:end="123:37"><expr pos:start="123:32" pos:end="123:37"><operator pos:start="123:32" pos:end="123:32">&amp;</operator><name pos:start="123:33" pos:end="123:37"><name pos:start="123:33" pos:end="123:33">s</name><operator pos:start="123:34" pos:end="123:35">-&gt;</operator><name pos:start="123:36" pos:end="123:37">gb</name></name></expr></argument>, <argument pos:start="123:40" pos:end="123:49"><expr pos:start="123:40" pos:end="123:49"><name pos:start="123:40" pos:end="123:45">offset</name> <operator pos:start="123:47" pos:end="123:47">*</operator> <literal type="number" pos:start="123:49" pos:end="123:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="125:13" pos:end="127:47">else<block type="pseudo" pos:start="127:17" pos:end="127:47"><block_content pos:start="127:17" pos:end="127:47">

                <expr_stmt pos:start="127:17" pos:end="127:47"><expr pos:start="127:17" pos:end="127:46"><call pos:start="127:17" pos:end="127:46"><name pos:start="127:17" pos:end="127:30">skip_bits_long</name><argument_list pos:start="127:31" pos:end="127:46">(<argument pos:start="127:32" pos:end="127:37"><expr pos:start="127:32" pos:end="127:37"><operator pos:start="127:32" pos:end="127:32">&amp;</operator><name pos:start="127:33" pos:end="127:37"><name pos:start="127:33" pos:end="127:33">s</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:37">gb</name></name></expr></argument>, <argument pos:start="127:40" pos:end="127:45"><expr pos:start="127:40" pos:end="127:45"><name pos:start="127:40" pos:end="127:45">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="133:9" pos:end="141:9"><if pos:start="133:9" pos:end="141:9">if <condition pos:start="133:12" pos:end="133:42">(<expr pos:start="133:13" pos:end="133:41"><operator pos:start="133:13" pos:end="133:13">!</operator><name pos:start="133:14" pos:end="133:20">nblocks</name> <operator pos:start="133:22" pos:end="133:23">||</operator> <name pos:start="133:25" pos:end="133:31">nblocks</name> <operator pos:start="133:33" pos:end="133:33">&gt;</operator> <name pos:start="133:35" pos:end="133:41">INT_MAX</name></expr>)</condition> <block pos:start="133:44" pos:end="141:9">{<block_content pos:start="135:13" pos:end="139:39">

            <expr_stmt pos:start="135:13" pos:end="137:28"><expr pos:start="135:13" pos:end="137:27"><call pos:start="135:13" pos:end="137:27"><name pos:start="135:13" pos:end="135:18">av_log</name><argument_list pos:start="135:19" pos:end="137:27">(<argument pos:start="135:20" pos:end="135:24"><expr pos:start="135:20" pos:end="135:24"><name pos:start="135:20" pos:end="135:24">avctx</name></expr></argument>, <argument pos:start="135:27" pos:end="135:38"><expr pos:start="135:27" pos:end="135:38"><name pos:start="135:27" pos:end="135:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="135:41" pos:end="135:76"><expr pos:start="135:41" pos:end="135:76"><literal type="string" pos:start="135:41" pos:end="135:65">"Invalid sample count: %"</literal><name pos:start="135:66" pos:end="135:71">PRIu32</name><literal type="string" pos:start="135:72" pos:end="135:76">".\n"</literal></expr></argument>,

                   <argument pos:start="137:20" pos:end="137:26"><expr pos:start="137:20" pos:end="137:26"><name pos:start="137:20" pos:end="137:26">nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="139:13" pos:end="139:39">return <expr pos:start="139:20" pos:end="139:38"><name pos:start="139:20" pos:end="139:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:29"><expr pos:start="143:9" pos:end="143:28"><name pos:start="143:9" pos:end="143:18"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:18">samples</name></name> <operator pos:start="143:20" pos:end="143:20">=</operator> <name pos:start="143:22" pos:end="143:28">nblocks</name></expr>;</expr_stmt>



        <comment type="block" pos:start="147:9" pos:end="147:42">/* Initialize the frame decoder */</comment>

        <if_stmt pos:start="149:9" pos:end="155:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:38">(<expr pos:start="149:13" pos:end="149:37"><call pos:start="149:13" pos:end="149:33"><name pos:start="149:13" pos:end="149:30">init_frame_decoder</name><argument_list pos:start="149:31" pos:end="149:33">(<argument pos:start="149:32" pos:end="149:32"><expr pos:start="149:32" pos:end="149:32"><name pos:start="149:32" pos:end="149:32">s</name></expr></argument>)</argument_list></call> <operator pos:start="149:35" pos:end="149:35">&lt;</operator> <literal type="number" pos:start="149:37" pos:end="149:37">0</literal></expr>)</condition> <block pos:start="149:40" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:39">

            <expr_stmt pos:start="151:13" pos:end="151:72"><expr pos:start="151:13" pos:end="151:71"><call pos:start="151:13" pos:end="151:71"><name pos:start="151:13" pos:end="151:18">av_log</name><argument_list pos:start="151:19" pos:end="151:71">(<argument pos:start="151:20" pos:end="151:24"><expr pos:start="151:20" pos:end="151:24"><name pos:start="151:20" pos:end="151:24">avctx</name></expr></argument>, <argument pos:start="151:27" pos:end="151:38"><expr pos:start="151:27" pos:end="151:38"><name pos:start="151:27" pos:end="151:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="151:41" pos:end="151:70"><expr pos:start="151:41" pos:end="151:70"><literal type="string" pos:start="151:41" pos:end="151:70">"Error reading frame header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="153:13" pos:end="153:39">return <expr pos:start="153:20" pos:end="153:38"><name pos:start="153:20" pos:end="153:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:17">(<expr pos:start="161:9" pos:end="161:16"><operator pos:start="161:9" pos:end="161:9">!</operator><name pos:start="161:10" pos:end="161:16"><name pos:start="161:10" pos:end="161:10">s</name><operator pos:start="161:11" pos:end="161:12">-&gt;</operator><name pos:start="161:13" pos:end="161:16">data</name></name></expr>)</condition> <block pos:start="161:19" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:27">

        <expr_stmt pos:start="163:9" pos:end="163:27"><expr pos:start="163:9" pos:end="163:26"><operator pos:start="163:9" pos:end="163:9">*</operator><name pos:start="163:10" pos:end="163:22">got_frame_ptr</name> <operator pos:start="163:24" pos:end="163:24">=</operator> <literal type="number" pos:start="163:26" pos:end="163:26">0</literal></expr>;</expr_stmt>

        <return pos:start="165:9" pos:end="165:27">return <expr pos:start="165:16" pos:end="165:26"><name pos:start="165:16" pos:end="165:26"><name pos:start="165:16" pos:end="165:20">avpkt</name><operator pos:start="165:21" pos:end="165:22">-&gt;</operator><name pos:start="165:23" pos:end="165:26">size</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:59"><expr pos:start="171:5" pos:end="171:58"><name pos:start="171:5" pos:end="171:18">blockstodecode</name> <operator pos:start="171:20" pos:end="171:20">=</operator> <call pos:start="171:22" pos:end="171:58"><name pos:start="171:22" pos:end="171:26">FFMIN</name><argument_list pos:start="171:27" pos:end="171:58">(<argument pos:start="171:28" pos:end="171:45"><expr pos:start="171:28" pos:end="171:45"><name pos:start="171:28" pos:end="171:45"><name pos:start="171:28" pos:end="171:28">s</name><operator pos:start="171:29" pos:end="171:30">-&gt;</operator><name pos:start="171:31" pos:end="171:45">blocks_per_loop</name></name></expr></argument>, <argument pos:start="171:48" pos:end="171:57"><expr pos:start="171:48" pos:end="171:57"><name pos:start="171:48" pos:end="171:57"><name pos:start="171:48" pos:end="171:48">s</name><operator pos:start="171:49" pos:end="171:50">-&gt;</operator><name pos:start="171:51" pos:end="171:57">samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="173:5" pos:end="173:55">// for old files coefficients were not interleaved,</comment>

    <comment type="line" pos:start="175:5" pos:end="175:47">// so we need to decode all of them at once</comment>

    <if_stmt pos:start="177:5" pos:end="179:36"><if pos:start="177:5" pos:end="179:36">if <condition pos:start="177:8" pos:end="177:30">(<expr pos:start="177:9" pos:end="177:29"><name pos:start="177:9" pos:end="177:22"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:22">fileversion</name></name> <operator pos:start="177:24" pos:end="177:24">&lt;</operator> <literal type="number" pos:start="177:26" pos:end="177:29">3930</literal></expr>)</condition><block type="pseudo" pos:start="179:9" pos:end="179:36"><block_content pos:start="179:9" pos:end="179:36">

        <expr_stmt pos:start="179:9" pos:end="179:36"><expr pos:start="179:9" pos:end="179:35"><name pos:start="179:9" pos:end="179:22">blockstodecode</name> <operator pos:start="179:24" pos:end="179:24">=</operator> <name pos:start="179:26" pos:end="179:35"><name pos:start="179:26" pos:end="179:26">s</name><operator pos:start="179:27" pos:end="179:28">-&gt;</operator><name pos:start="179:29" pos:end="179:35">samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="183:5" pos:end="183:52">/* reallocate decoded sample buffer if needed */</comment>

    <expr_stmt pos:start="185:5" pos:end="187:80"><expr pos:start="185:5" pos:end="187:79"><call pos:start="185:5" pos:end="187:79"><name pos:start="185:5" pos:end="185:18">av_fast_malloc</name><argument_list pos:start="185:19" pos:end="187:79">(<argument pos:start="185:20" pos:end="185:37"><expr pos:start="185:20" pos:end="185:37"><operator pos:start="185:20" pos:end="185:20">&amp;</operator><name pos:start="185:21" pos:end="185:37"><name pos:start="185:21" pos:end="185:21">s</name><operator pos:start="185:22" pos:end="185:23">-&gt;</operator><name pos:start="185:24" pos:end="185:37">decoded_buffer</name></name></expr></argument>, <argument pos:start="185:40" pos:end="185:55"><expr pos:start="185:40" pos:end="185:55"><operator pos:start="185:40" pos:end="185:40">&amp;</operator><name pos:start="185:41" pos:end="185:55"><name pos:start="185:41" pos:end="185:41">s</name><operator pos:start="185:42" pos:end="185:43">-&gt;</operator><name pos:start="185:44" pos:end="185:55">decoded_size</name></name></expr></argument>,

                   <argument pos:start="187:20" pos:end="187:78"><expr pos:start="187:20" pos:end="187:78"><literal type="number" pos:start="187:20" pos:end="187:20">2</literal> <operator pos:start="187:22" pos:end="187:22">*</operator> <call pos:start="187:24" pos:end="187:49"><name pos:start="187:24" pos:end="187:30">FFALIGN</name><argument_list pos:start="187:31" pos:end="187:49">(<argument pos:start="187:32" pos:end="187:45"><expr pos:start="187:32" pos:end="187:45"><name pos:start="187:32" pos:end="187:45">blockstodecode</name></expr></argument>, <argument pos:start="187:48" pos:end="187:48"><expr pos:start="187:48" pos:end="187:48"><literal type="number" pos:start="187:48" pos:end="187:48">8</literal></expr></argument>)</argument_list></call> <operator pos:start="187:51" pos:end="187:51">*</operator> <sizeof pos:start="187:53" pos:end="187:78">sizeof<argument_list pos:start="187:59" pos:end="187:78">(<argument pos:start="187:60" pos:end="187:77"><expr pos:start="187:60" pos:end="187:77"><operator pos:start="187:60" pos:end="187:60">*</operator><name pos:start="187:61" pos:end="187:77"><name pos:start="187:61" pos:end="187:61">s</name><operator pos:start="187:62" pos:end="187:63">-&gt;</operator><name pos:start="187:64" pos:end="187:77">decoded_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="189:5" pos:end="191:31"><if pos:start="189:5" pos:end="191:31">if <condition pos:start="189:8" pos:end="189:27">(<expr pos:start="189:9" pos:end="189:26"><operator pos:start="189:9" pos:end="189:9">!</operator><name pos:start="189:10" pos:end="189:26"><name pos:start="189:10" pos:end="189:10">s</name><operator pos:start="189:11" pos:end="189:12">-&gt;</operator><name pos:start="189:13" pos:end="189:26">decoded_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="191:31"><block_content pos:start="191:9" pos:end="191:31">

        <return pos:start="191:9" pos:end="191:31">return <expr pos:start="191:16" pos:end="191:30"><call pos:start="191:16" pos:end="191:30"><name pos:start="191:16" pos:end="191:22">AVERROR</name><argument_list pos:start="191:23" pos:end="191:30">(<argument pos:start="191:24" pos:end="191:29"><expr pos:start="191:24" pos:end="191:29"><name pos:start="191:24" pos:end="191:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:50"><expr pos:start="193:5" pos:end="193:49"><call pos:start="193:5" pos:end="193:49"><name pos:start="193:5" pos:end="193:10">memset</name><argument_list pos:start="193:11" pos:end="193:49">(<argument pos:start="193:12" pos:end="193:28"><expr pos:start="193:12" pos:end="193:28"><name pos:start="193:12" pos:end="193:28"><name pos:start="193:12" pos:end="193:12">s</name><operator pos:start="193:13" pos:end="193:14">-&gt;</operator><name pos:start="193:15" pos:end="193:28">decoded_buffer</name></name></expr></argument>, <argument pos:start="193:31" pos:end="193:31"><expr pos:start="193:31" pos:end="193:31"><literal type="number" pos:start="193:31" pos:end="193:31">0</literal></expr></argument>, <argument pos:start="193:34" pos:end="193:48"><expr pos:start="193:34" pos:end="193:48"><name pos:start="193:34" pos:end="193:48"><name pos:start="193:34" pos:end="193:34">s</name><operator pos:start="193:35" pos:end="193:36">-&gt;</operator><name pos:start="193:37" pos:end="193:48">decoded_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:38"><expr pos:start="195:5" pos:end="195:37"><name pos:start="195:5" pos:end="195:17"><name pos:start="195:5" pos:end="195:5">s</name><operator pos:start="195:6" pos:end="195:7">-&gt;</operator><name pos:start="195:8" pos:end="195:14">decoded</name><index pos:start="195:15" pos:end="195:17">[<expr pos:start="195:16" pos:end="195:16"><literal type="number" pos:start="195:16" pos:end="195:16">0</literal></expr>]</index></name> <operator pos:start="195:19" pos:end="195:19">=</operator> <name pos:start="195:21" pos:end="195:37"><name pos:start="195:21" pos:end="195:21">s</name><operator pos:start="195:22" pos:end="195:23">-&gt;</operator><name pos:start="195:24" pos:end="195:37">decoded_buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:67"><expr pos:start="197:5" pos:end="197:66"><name pos:start="197:5" pos:end="197:17"><name pos:start="197:5" pos:end="197:5">s</name><operator pos:start="197:6" pos:end="197:7">-&gt;</operator><name pos:start="197:8" pos:end="197:14">decoded</name><index pos:start="197:15" pos:end="197:17">[<expr pos:start="197:16" pos:end="197:16"><literal type="number" pos:start="197:16" pos:end="197:16">1</literal></expr>]</index></name> <operator pos:start="197:19" pos:end="197:19">=</operator> <name pos:start="197:21" pos:end="197:37"><name pos:start="197:21" pos:end="197:21">s</name><operator pos:start="197:22" pos:end="197:23">-&gt;</operator><name pos:start="197:24" pos:end="197:37">decoded_buffer</name></name> <operator pos:start="197:39" pos:end="197:39">+</operator> <call pos:start="197:41" pos:end="197:66"><name pos:start="197:41" pos:end="197:47">FFALIGN</name><argument_list pos:start="197:48" pos:end="197:66">(<argument pos:start="197:49" pos:end="197:62"><expr pos:start="197:49" pos:end="197:62"><name pos:start="197:49" pos:end="197:62">blockstodecode</name></expr></argument>, <argument pos:start="197:65" pos:end="197:65"><expr pos:start="197:65" pos:end="197:65"><literal type="number" pos:start="197:65" pos:end="197:65">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="201:5" pos:end="201:27">/* get output buffer */</comment>

    <expr_stmt pos:start="203:5" pos:end="203:39"><expr pos:start="203:5" pos:end="203:38"><name pos:start="203:5" pos:end="203:21"><name pos:start="203:5" pos:end="203:9">frame</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:21">nb_samples</name></name> <operator pos:start="203:23" pos:end="203:23">=</operator> <name pos:start="203:25" pos:end="203:38">blockstodecode</name></expr>;</expr_stmt>

    <if_stmt pos:start="205:5" pos:end="207:19"><if pos:start="205:5" pos:end="207:19">if <condition pos:start="205:8" pos:end="205:51">(<expr pos:start="205:9" pos:end="205:50"><operator pos:start="205:9" pos:end="205:9">(</operator><name pos:start="205:10" pos:end="205:12">ret</name> <operator pos:start="205:14" pos:end="205:14">=</operator> <call pos:start="205:16" pos:end="205:45"><name pos:start="205:16" pos:end="205:28">ff_get_buffer</name><argument_list pos:start="205:29" pos:end="205:45">(<argument pos:start="205:30" pos:end="205:34"><expr pos:start="205:30" pos:end="205:34"><name pos:start="205:30" pos:end="205:34">avctx</name></expr></argument>, <argument pos:start="205:37" pos:end="205:41"><expr pos:start="205:37" pos:end="205:41"><name pos:start="205:37" pos:end="205:41">frame</name></expr></argument>, <argument pos:start="205:44" pos:end="205:44"><expr pos:start="205:44" pos:end="205:44"><literal type="number" pos:start="205:44" pos:end="205:44">0</literal></expr></argument>)</argument_list></call><operator pos:start="205:46" pos:end="205:46">)</operator> <operator pos:start="205:48" pos:end="205:48">&lt;</operator> <literal type="number" pos:start="205:50" pos:end="205:50">0</literal></expr>)</condition><block type="pseudo" pos:start="207:9" pos:end="207:19"><block_content pos:start="207:9" pos:end="207:19">

        <return pos:start="207:9" pos:end="207:19">return <expr pos:start="207:16" pos:end="207:18"><name pos:start="207:16" pos:end="207:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:15"><expr pos:start="211:5" pos:end="211:14"><name pos:start="211:5" pos:end="211:12"><name pos:start="211:5" pos:end="211:5">s</name><operator pos:start="211:6" pos:end="211:7">-&gt;</operator><name pos:start="211:8" pos:end="211:12">error</name></name><operator pos:start="211:13" pos:end="211:13">=</operator><literal type="number" pos:start="211:14" pos:end="211:14">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="215:5" pos:end="221:45"><if pos:start="215:5" pos:end="217:43">if <condition pos:start="215:8" pos:end="215:76">(<expr pos:start="215:9" pos:end="215:75"><operator pos:start="215:9" pos:end="215:9">(</operator><name pos:start="215:10" pos:end="215:20"><name pos:start="215:10" pos:end="215:10">s</name><operator pos:start="215:11" pos:end="215:12">-&gt;</operator><name pos:start="215:13" pos:end="215:20">channels</name></name> <operator pos:start="215:22" pos:end="215:23">==</operator> <literal type="number" pos:start="215:25" pos:end="215:25">1</literal><operator pos:start="215:26" pos:end="215:26">)</operator> <operator pos:start="215:28" pos:end="215:29">||</operator> <operator pos:start="215:31" pos:end="215:31">(</operator><name pos:start="215:32" pos:end="215:44"><name pos:start="215:32" pos:end="215:32">s</name><operator pos:start="215:33" pos:end="215:34">-&gt;</operator><name pos:start="215:35" pos:end="215:44">frameflags</name></name> <operator pos:start="215:46" pos:end="215:46">&amp;</operator> <name pos:start="215:48" pos:end="215:74">APE_FRAMECODE_PSEUDO_STEREO</name><operator pos:start="215:75" pos:end="215:75">)</operator></expr>)</condition><block type="pseudo" pos:start="217:9" pos:end="217:43"><block_content pos:start="217:9" pos:end="217:43">

        <expr_stmt pos:start="217:9" pos:end="217:43"><expr pos:start="217:9" pos:end="217:42"><call pos:start="217:9" pos:end="217:42"><name pos:start="217:9" pos:end="217:23">ape_unpack_mono</name><argument_list pos:start="217:24" pos:end="217:42">(<argument pos:start="217:25" pos:end="217:25"><expr pos:start="217:25" pos:end="217:25"><name pos:start="217:25" pos:end="217:25">s</name></expr></argument>, <argument pos:start="217:28" pos:end="217:41"><expr pos:start="217:28" pos:end="217:41"><name pos:start="217:28" pos:end="217:41">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="219:5" pos:end="221:45">else<block type="pseudo" pos:start="221:9" pos:end="221:45"><block_content pos:start="221:9" pos:end="221:45">

        <expr_stmt pos:start="221:9" pos:end="221:45"><expr pos:start="221:9" pos:end="221:44"><call pos:start="221:9" pos:end="221:44"><name pos:start="221:9" pos:end="221:25">ape_unpack_stereo</name><argument_list pos:start="221:26" pos:end="221:44">(<argument pos:start="221:27" pos:end="221:27"><expr pos:start="221:27" pos:end="221:27"><name pos:start="221:27" pos:end="221:27">s</name></expr></argument>, <argument pos:start="221:30" pos:end="221:43"><expr pos:start="221:30" pos:end="221:43"><name pos:start="221:30" pos:end="221:43">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:13"><expr pos:start="223:5" pos:end="223:12"><call pos:start="223:5" pos:end="223:12"><name pos:start="223:5" pos:end="223:10">emms_c</name><argument_list pos:start="223:11" pos:end="223:12">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="227:5" pos:end="235:5"><if pos:start="227:5" pos:end="235:5">if <condition pos:start="227:8" pos:end="227:17">(<expr pos:start="227:9" pos:end="227:16"><name pos:start="227:9" pos:end="227:16"><name pos:start="227:9" pos:end="227:9">s</name><operator pos:start="227:10" pos:end="227:11">-&gt;</operator><name pos:start="227:12" pos:end="227:16">error</name></name></expr>)</condition> <block pos:start="227:19" pos:end="235:5">{<block_content pos:start="229:9" pos:end="233:35">

        <expr_stmt pos:start="229:9" pos:end="229:21"><expr pos:start="229:9" pos:end="229:20"><name pos:start="229:9" pos:end="229:18"><name pos:start="229:9" pos:end="229:9">s</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:18">samples</name></name><operator pos:start="229:19" pos:end="229:19">=</operator><literal type="number" pos:start="229:20" pos:end="229:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:62"><expr pos:start="231:9" pos:end="231:61"><call pos:start="231:9" pos:end="231:61"><name pos:start="231:9" pos:end="231:14">av_log</name><argument_list pos:start="231:15" pos:end="231:61">(<argument pos:start="231:16" pos:end="231:20"><expr pos:start="231:16" pos:end="231:20"><name pos:start="231:16" pos:end="231:20">avctx</name></expr></argument>, <argument pos:start="231:23" pos:end="231:34"><expr pos:start="231:23" pos:end="231:34"><name pos:start="231:23" pos:end="231:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="231:37" pos:end="231:60"><expr pos:start="231:37" pos:end="231:60"><literal type="string" pos:start="231:37" pos:end="231:60">"Error decoding frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="233:9" pos:end="233:35">return <expr pos:start="233:16" pos:end="233:34"><name pos:start="233:16" pos:end="233:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="239:5" pos:end="283:5">switch <condition pos:start="239:12" pos:end="239:19">(<expr pos:start="239:13" pos:end="239:18"><name pos:start="239:13" pos:end="239:18"><name pos:start="239:13" pos:end="239:13">s</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:18">bps</name></name></expr>)</condition> <block pos:start="239:21" pos:end="283:5">{<block_content pos:start="241:5" pos:end="281:14">

    <case pos:start="241:5" pos:end="241:11">case <expr pos:start="241:10" pos:end="241:10"><literal type="number" pos:start="241:10" pos:end="241:10">8</literal></expr>:</case>

        <for pos:start="243:9" pos:end="251:9">for <control pos:start="243:13" pos:end="243:44">(<init pos:start="243:14" pos:end="243:20"><expr pos:start="243:14" pos:end="243:19"><name pos:start="243:14" pos:end="243:15">ch</name> <operator pos:start="243:17" pos:end="243:17">=</operator> <literal type="number" pos:start="243:19" pos:end="243:19">0</literal></expr>;</init> <condition pos:start="243:22" pos:end="243:38"><expr pos:start="243:22" pos:end="243:37"><name pos:start="243:22" pos:end="243:23">ch</name> <operator pos:start="243:25" pos:end="243:25">&lt;</operator> <name pos:start="243:27" pos:end="243:37"><name pos:start="243:27" pos:end="243:27">s</name><operator pos:start="243:28" pos:end="243:29">-&gt;</operator><name pos:start="243:30" pos:end="243:37">channels</name></name></expr>;</condition> <incr pos:start="243:40" pos:end="243:43"><expr pos:start="243:40" pos:end="243:43"><name pos:start="243:40" pos:end="243:41">ch</name><operator pos:start="243:42" pos:end="243:43">++</operator></expr></incr>)</control> <block pos:start="243:46" pos:end="251:9">{<block_content pos:start="245:13" pos:end="249:63">

            <expr_stmt pos:start="245:13" pos:end="245:49"><expr pos:start="245:13" pos:end="245:48"><name pos:start="245:13" pos:end="245:19">sample8</name> <operator pos:start="245:21" pos:end="245:21">=</operator> <operator pos:start="245:23" pos:end="245:23">(</operator><name pos:start="245:24" pos:end="245:30">uint8_t</name> <operator pos:start="245:32" pos:end="245:32">*</operator><operator pos:start="245:33" pos:end="245:33">)</operator><name pos:start="245:34" pos:end="245:48"><name pos:start="245:34" pos:end="245:38">frame</name><operator pos:start="245:39" pos:end="245:40">-&gt;</operator><name pos:start="245:41" pos:end="245:44">data</name><index pos:start="245:45" pos:end="245:48">[<expr pos:start="245:46" pos:end="245:47"><name pos:start="245:46" pos:end="245:47">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <for pos:start="247:13" pos:end="249:63">for <control pos:start="247:17" pos:end="247:48">(<init pos:start="247:18" pos:end="247:23"><expr pos:start="247:18" pos:end="247:22"><name pos:start="247:18" pos:end="247:18">i</name> <operator pos:start="247:20" pos:end="247:20">=</operator> <literal type="number" pos:start="247:22" pos:end="247:22">0</literal></expr>;</init> <condition pos:start="247:25" pos:end="247:43"><expr pos:start="247:25" pos:end="247:42"><name pos:start="247:25" pos:end="247:25">i</name> <operator pos:start="247:27" pos:end="247:27">&lt;</operator> <name pos:start="247:29" pos:end="247:42">blockstodecode</name></expr>;</condition> <incr pos:start="247:45" pos:end="247:47"><expr pos:start="247:45" pos:end="247:47"><name pos:start="247:45" pos:end="247:45">i</name><operator pos:start="247:46" pos:end="247:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="249:17" pos:end="249:63"><block_content pos:start="249:17" pos:end="249:63">

                <expr_stmt pos:start="249:17" pos:end="249:63"><expr pos:start="249:17" pos:end="249:62"><operator pos:start="249:17" pos:end="249:17">*</operator><name pos:start="249:18" pos:end="249:24">sample8</name><operator pos:start="249:25" pos:end="249:26">++</operator> <operator pos:start="249:28" pos:end="249:28">=</operator> <operator pos:start="249:30" pos:end="249:30">(</operator><name pos:start="249:31" pos:end="249:47"><name pos:start="249:31" pos:end="249:31">s</name><operator pos:start="249:32" pos:end="249:33">-&gt;</operator><name pos:start="249:34" pos:end="249:40">decoded</name><index pos:start="249:41" pos:end="249:44">[<expr pos:start="249:42" pos:end="249:43"><name pos:start="249:42" pos:end="249:43">ch</name></expr>]</index><index pos:start="249:45" pos:end="249:47">[<expr pos:start="249:46" pos:end="249:46"><name pos:start="249:46" pos:end="249:46">i</name></expr>]</index></name> <operator pos:start="249:49" pos:end="249:49">+</operator> <literal type="number" pos:start="249:51" pos:end="249:54">0x80</literal><operator pos:start="249:55" pos:end="249:55">)</operator> <operator pos:start="249:57" pos:end="249:57">&amp;</operator> <literal type="number" pos:start="249:59" pos:end="249:62">0xff</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="253:9" pos:end="253:14">break;</break>

    <case pos:start="255:5" pos:end="255:12">case <expr pos:start="255:10" pos:end="255:11"><literal type="number" pos:start="255:10" pos:end="255:11">16</literal></expr>:</case>

        <for pos:start="257:9" pos:end="265:9">for <control pos:start="257:13" pos:end="257:44">(<init pos:start="257:14" pos:end="257:20"><expr pos:start="257:14" pos:end="257:19"><name pos:start="257:14" pos:end="257:15">ch</name> <operator pos:start="257:17" pos:end="257:17">=</operator> <literal type="number" pos:start="257:19" pos:end="257:19">0</literal></expr>;</init> <condition pos:start="257:22" pos:end="257:38"><expr pos:start="257:22" pos:end="257:37"><name pos:start="257:22" pos:end="257:23">ch</name> <operator pos:start="257:25" pos:end="257:25">&lt;</operator> <name pos:start="257:27" pos:end="257:37"><name pos:start="257:27" pos:end="257:27">s</name><operator pos:start="257:28" pos:end="257:29">-&gt;</operator><name pos:start="257:30" pos:end="257:37">channels</name></name></expr>;</condition> <incr pos:start="257:40" pos:end="257:43"><expr pos:start="257:40" pos:end="257:43"><name pos:start="257:40" pos:end="257:41">ch</name><operator pos:start="257:42" pos:end="257:43">++</operator></expr></incr>)</control> <block pos:start="257:46" pos:end="265:9">{<block_content pos:start="259:13" pos:end="263:48">

            <expr_stmt pos:start="259:13" pos:end="259:50"><expr pos:start="259:13" pos:end="259:49"><name pos:start="259:13" pos:end="259:20">sample16</name> <operator pos:start="259:22" pos:end="259:22">=</operator> <operator pos:start="259:24" pos:end="259:24">(</operator><name pos:start="259:25" pos:end="259:31">int16_t</name> <operator pos:start="259:33" pos:end="259:33">*</operator><operator pos:start="259:34" pos:end="259:34">)</operator><name pos:start="259:35" pos:end="259:49"><name pos:start="259:35" pos:end="259:39">frame</name><operator pos:start="259:40" pos:end="259:41">-&gt;</operator><name pos:start="259:42" pos:end="259:45">data</name><index pos:start="259:46" pos:end="259:49">[<expr pos:start="259:47" pos:end="259:48"><name pos:start="259:47" pos:end="259:48">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <for pos:start="261:13" pos:end="263:48">for <control pos:start="261:17" pos:end="261:48">(<init pos:start="261:18" pos:end="261:23"><expr pos:start="261:18" pos:end="261:22"><name pos:start="261:18" pos:end="261:18">i</name> <operator pos:start="261:20" pos:end="261:20">=</operator> <literal type="number" pos:start="261:22" pos:end="261:22">0</literal></expr>;</init> <condition pos:start="261:25" pos:end="261:43"><expr pos:start="261:25" pos:end="261:42"><name pos:start="261:25" pos:end="261:25">i</name> <operator pos:start="261:27" pos:end="261:27">&lt;</operator> <name pos:start="261:29" pos:end="261:42">blockstodecode</name></expr>;</condition> <incr pos:start="261:45" pos:end="261:47"><expr pos:start="261:45" pos:end="261:47"><name pos:start="261:45" pos:end="261:45">i</name><operator pos:start="261:46" pos:end="261:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="263:17" pos:end="263:48"><block_content pos:start="263:17" pos:end="263:48">

                <expr_stmt pos:start="263:17" pos:end="263:48"><expr pos:start="263:17" pos:end="263:47"><operator pos:start="263:17" pos:end="263:17">*</operator><name pos:start="263:18" pos:end="263:25">sample16</name><operator pos:start="263:26" pos:end="263:27">++</operator> <operator pos:start="263:29" pos:end="263:29">=</operator> <name pos:start="263:31" pos:end="263:47"><name pos:start="263:31" pos:end="263:31">s</name><operator pos:start="263:32" pos:end="263:33">-&gt;</operator><name pos:start="263:34" pos:end="263:40">decoded</name><index pos:start="263:41" pos:end="263:44">[<expr pos:start="263:42" pos:end="263:43"><name pos:start="263:42" pos:end="263:43">ch</name></expr>]</index><index pos:start="263:45" pos:end="263:47">[<expr pos:start="263:46" pos:end="263:46"><name pos:start="263:46" pos:end="263:46">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="267:9" pos:end="267:14">break;</break>

    <case pos:start="269:5" pos:end="269:12">case <expr pos:start="269:10" pos:end="269:11"><literal type="number" pos:start="269:10" pos:end="269:11">24</literal></expr>:</case>

        <for pos:start="271:9" pos:end="279:9">for <control pos:start="271:13" pos:end="271:44">(<init pos:start="271:14" pos:end="271:20"><expr pos:start="271:14" pos:end="271:19"><name pos:start="271:14" pos:end="271:15">ch</name> <operator pos:start="271:17" pos:end="271:17">=</operator> <literal type="number" pos:start="271:19" pos:end="271:19">0</literal></expr>;</init> <condition pos:start="271:22" pos:end="271:38"><expr pos:start="271:22" pos:end="271:37"><name pos:start="271:22" pos:end="271:23">ch</name> <operator pos:start="271:25" pos:end="271:25">&lt;</operator> <name pos:start="271:27" pos:end="271:37"><name pos:start="271:27" pos:end="271:27">s</name><operator pos:start="271:28" pos:end="271:29">-&gt;</operator><name pos:start="271:30" pos:end="271:37">channels</name></name></expr>;</condition> <incr pos:start="271:40" pos:end="271:43"><expr pos:start="271:40" pos:end="271:43"><name pos:start="271:40" pos:end="271:41">ch</name><operator pos:start="271:42" pos:end="271:43">++</operator></expr></incr>)</control> <block pos:start="271:46" pos:end="279:9">{<block_content pos:start="273:13" pos:end="277:53">

            <expr_stmt pos:start="273:13" pos:end="273:50"><expr pos:start="273:13" pos:end="273:49"><name pos:start="273:13" pos:end="273:20">sample24</name> <operator pos:start="273:22" pos:end="273:22">=</operator> <operator pos:start="273:24" pos:end="273:24">(</operator><name pos:start="273:25" pos:end="273:31">int32_t</name> <operator pos:start="273:33" pos:end="273:33">*</operator><operator pos:start="273:34" pos:end="273:34">)</operator><name pos:start="273:35" pos:end="273:49"><name pos:start="273:35" pos:end="273:39">frame</name><operator pos:start="273:40" pos:end="273:41">-&gt;</operator><name pos:start="273:42" pos:end="273:45">data</name><index pos:start="273:46" pos:end="273:49">[<expr pos:start="273:47" pos:end="273:48"><name pos:start="273:47" pos:end="273:48">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <for pos:start="275:13" pos:end="277:53">for <control pos:start="275:17" pos:end="275:48">(<init pos:start="275:18" pos:end="275:23"><expr pos:start="275:18" pos:end="275:22"><name pos:start="275:18" pos:end="275:18">i</name> <operator pos:start="275:20" pos:end="275:20">=</operator> <literal type="number" pos:start="275:22" pos:end="275:22">0</literal></expr>;</init> <condition pos:start="275:25" pos:end="275:43"><expr pos:start="275:25" pos:end="275:42"><name pos:start="275:25" pos:end="275:25">i</name> <operator pos:start="275:27" pos:end="275:27">&lt;</operator> <name pos:start="275:29" pos:end="275:42">blockstodecode</name></expr>;</condition> <incr pos:start="275:45" pos:end="275:47"><expr pos:start="275:45" pos:end="275:47"><name pos:start="275:45" pos:end="275:45">i</name><operator pos:start="275:46" pos:end="275:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="277:17" pos:end="277:53"><block_content pos:start="277:17" pos:end="277:53">

                <expr_stmt pos:start="277:17" pos:end="277:53"><expr pos:start="277:17" pos:end="277:52"><operator pos:start="277:17" pos:end="277:17">*</operator><name pos:start="277:18" pos:end="277:25">sample24</name><operator pos:start="277:26" pos:end="277:27">++</operator> <operator pos:start="277:29" pos:end="277:29">=</operator> <name pos:start="277:31" pos:end="277:47"><name pos:start="277:31" pos:end="277:31">s</name><operator pos:start="277:32" pos:end="277:33">-&gt;</operator><name pos:start="277:34" pos:end="277:40">decoded</name><index pos:start="277:41" pos:end="277:44">[<expr pos:start="277:42" pos:end="277:43"><name pos:start="277:42" pos:end="277:43">ch</name></expr>]</index><index pos:start="277:45" pos:end="277:47">[<expr pos:start="277:46" pos:end="277:46"><name pos:start="277:46" pos:end="277:46">i</name></expr>]</index></name> <operator pos:start="277:49" pos:end="277:50">&lt;&lt;</operator> <literal type="number" pos:start="277:52" pos:end="277:52">8</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="281:9" pos:end="281:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="287:5" pos:end="287:33"><expr pos:start="287:5" pos:end="287:32"><name pos:start="287:5" pos:end="287:14"><name pos:start="287:5" pos:end="287:5">s</name><operator pos:start="287:6" pos:end="287:7">-&gt;</operator><name pos:start="287:8" pos:end="287:14">samples</name></name> <operator pos:start="287:16" pos:end="287:17">-=</operator> <name pos:start="287:19" pos:end="287:32">blockstodecode</name></expr>;</expr_stmt>



    <expr_stmt pos:start="291:5" pos:end="291:23"><expr pos:start="291:5" pos:end="291:22"><operator pos:start="291:5" pos:end="291:5">*</operator><name pos:start="291:6" pos:end="291:18">got_frame_ptr</name> <operator pos:start="291:20" pos:end="291:20">=</operator> <literal type="number" pos:start="291:22" pos:end="291:22">1</literal></expr>;</expr_stmt>



    <return pos:start="295:5" pos:end="295:41">return <expr pos:start="295:12" pos:end="295:40"><ternary pos:start="295:12" pos:end="295:40"><condition pos:start="295:12" pos:end="295:24"><expr pos:start="295:12" pos:end="295:22"><operator pos:start="295:12" pos:end="295:12">!</operator><name pos:start="295:13" pos:end="295:22"><name pos:start="295:13" pos:end="295:13">s</name><operator pos:start="295:14" pos:end="295:15">-&gt;</operator><name pos:start="295:16" pos:end="295:22">samples</name></name></expr> ?</condition><then pos:start="295:26" pos:end="295:36"> <expr pos:start="295:26" pos:end="295:36"><name pos:start="295:26" pos:end="295:36"><name pos:start="295:26" pos:end="295:30">avpkt</name><operator pos:start="295:31" pos:end="295:32">-&gt;</operator><name pos:start="295:33" pos:end="295:36">size</name></name></expr> </then><else pos:start="295:38" pos:end="295:40">: <expr pos:start="295:40" pos:end="295:40"><literal type="number" pos:start="295:40" pos:end="295:40">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
