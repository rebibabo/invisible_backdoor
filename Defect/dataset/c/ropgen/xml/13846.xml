<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13846.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:26">parse_peak</name><parameter_list pos:start="1:27" pos:end="1:47">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:42"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:40">uint8_t</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">peak</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:46">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:15">val</name> <init pos:start="5:17" pos:end="5:19">= <expr pos:start="5:19" pos:end="5:19"><literal type="number" pos:start="5:19" pos:end="5:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:17">scale</name> <init pos:start="7:19" pos:end="7:21">= <expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:17"><if pos:start="11:5" pos:end="13:17">if <condition pos:start="11:8" pos:end="11:14">(<expr pos:start="11:9" pos:end="11:13"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:13">peak</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:17"><block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:32"><expr pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:8">peak</name> <operator pos:start="17:10" pos:end="17:11">+=</operator> <call pos:start="17:13" pos:end="17:31"><name pos:start="17:13" pos:end="17:18">strspn</name><argument_list pos:start="17:19" pos:end="17:31">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">peak</name></expr></argument>, <argument pos:start="17:26" pos:end="17:30"><expr pos:start="17:26" pos:end="17:30"><literal type="string" pos:start="17:26" pos:end="17:30">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="27:17"><if pos:start="21:5" pos:end="23:26">if <condition pos:start="21:8" pos:end="21:41">(<expr pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:12">peak</name><index pos:start="21:13" pos:end="21:15">[<expr pos:start="21:14" pos:end="21:14"><literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>]</index></name> <operator pos:start="21:17" pos:end="21:18">==</operator> <literal type="char" pos:start="21:20" pos:end="21:22">'1'</literal> <operator pos:start="21:24" pos:end="21:25">&amp;&amp;</operator> <name pos:start="21:27" pos:end="21:33"><name pos:start="21:27" pos:end="21:30">peak</name><index pos:start="21:31" pos:end="21:33">[<expr pos:start="21:32" pos:end="21:32"><literal type="number" pos:start="21:32" pos:end="21:32">1</literal></expr>]</index></name> <operator pos:start="21:35" pos:end="21:36">==</operator> <literal type="char" pos:start="21:38" pos:end="21:40">'.'</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:26"><block_content pos:start="23:9" pos:end="23:26">

        <return pos:start="23:9" pos:end="23:26">return <expr pos:start="23:16" pos:end="23:25"><name pos:start="23:16" pos:end="23:25">UINT32_MAX</name></expr>;</return></block_content></block></if>

    <if type="elseif" pos:start="25:5" pos:end="27:17">else if <condition pos:start="25:13" pos:end="25:49">(<expr pos:start="25:14" pos:end="25:48"><operator pos:start="25:14" pos:end="25:14">!</operator><operator pos:start="25:15" pos:end="25:15">(</operator><name pos:start="25:16" pos:end="25:22"><name pos:start="25:16" pos:end="25:19">peak</name><index pos:start="25:20" pos:end="25:22">[<expr pos:start="25:21" pos:end="25:21"><literal type="number" pos:start="25:21" pos:end="25:21">0</literal></expr>]</index></name> <operator pos:start="25:24" pos:end="25:25">==</operator> <literal type="char" pos:start="25:27" pos:end="25:29">'0'</literal> <operator pos:start="25:31" pos:end="25:32">&amp;&amp;</operator> <name pos:start="25:34" pos:end="25:40"><name pos:start="25:34" pos:end="25:37">peak</name><index pos:start="25:38" pos:end="25:40">[<expr pos:start="25:39" pos:end="25:39"><literal type="number" pos:start="25:39" pos:end="25:39">1</literal></expr>]</index></name> <operator pos:start="25:42" pos:end="25:43">==</operator> <literal type="char" pos:start="25:45" pos:end="25:47">'.'</literal><operator pos:start="25:48" pos:end="25:48">)</operator></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:17"><block_content pos:start="27:9" pos:end="27:17">

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:14"><expr pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:8">peak</name> <operator pos:start="31:10" pos:end="31:11">+=</operator> <literal type="number" pos:start="31:13" pos:end="31:13">2</literal></expr>;</expr_stmt>



    <while pos:start="35:5" pos:end="55:5">while <condition pos:start="35:11" pos:end="35:29">(<expr pos:start="35:12" pos:end="35:28"><call pos:start="35:12" pos:end="35:28"><name pos:start="35:12" pos:end="35:21">av_isdigit</name><argument_list pos:start="35:22" pos:end="35:28">(<argument pos:start="35:23" pos:end="35:27"><expr pos:start="35:23" pos:end="35:27"><operator pos:start="35:23" pos:end="35:23">*</operator><name pos:start="35:24" pos:end="35:27">peak</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:31" pos:end="55:5">{<block_content pos:start="37:9" pos:end="53:15">

        <decl_stmt pos:start="37:9" pos:end="37:32"><decl pos:start="37:9" pos:end="37:31"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:17">digit</name> <init pos:start="37:19" pos:end="37:31">= <expr pos:start="37:21" pos:end="37:31"><operator pos:start="37:21" pos:end="37:21">*</operator><name pos:start="37:22" pos:end="37:25">peak</name> <operator pos:start="37:27" pos:end="37:27">-</operator> <literal type="char" pos:start="37:29" pos:end="37:31">'0'</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="41:9" pos:end="43:18"><if pos:start="41:9" pos:end="43:18">if <condition pos:start="41:12" pos:end="41:35">(<expr pos:start="41:13" pos:end="41:34"><name pos:start="41:13" pos:end="41:17">scale</name> <operator pos:start="41:19" pos:end="41:19">&gt;</operator> <name pos:start="41:21" pos:end="41:29">INT64_MAX</name> <operator pos:start="41:31" pos:end="41:31">/</operator> <literal type="number" pos:start="41:33" pos:end="41:34">10</literal></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:18"><block_content pos:start="43:13" pos:end="43:18">

            <break pos:start="43:13" pos:end="43:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:34"><expr pos:start="47:9" pos:end="47:33"><name pos:start="47:9" pos:end="47:11">val</name>    <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:19">10</literal> <operator pos:start="47:21" pos:end="47:21">*</operator> <name pos:start="47:23" pos:end="47:25">val</name> <operator pos:start="47:27" pos:end="47:27">+</operator> <name pos:start="47:29" pos:end="47:33">digit</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:20"><expr pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:13">scale</name> <operator pos:start="49:15" pos:end="49:16">*=</operator> <literal type="number" pos:start="49:18" pos:end="49:19">10</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:15"><expr pos:start="53:9" pos:end="53:14"><name pos:start="53:9" pos:end="53:12">peak</name><operator pos:start="53:13" pos:end="53:14">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="59:5" pos:end="59:46">return <expr pos:start="59:12" pos:end="59:45"><call pos:start="59:12" pos:end="59:45"><name pos:start="59:12" pos:end="59:21">av_rescale</name><argument_list pos:start="59:22" pos:end="59:45">(<argument pos:start="59:23" pos:end="59:25"><expr pos:start="59:23" pos:end="59:25"><name pos:start="59:23" pos:end="59:25">val</name></expr></argument>, <argument pos:start="59:28" pos:end="59:37"><expr pos:start="59:28" pos:end="59:37"><name pos:start="59:28" pos:end="59:37">UINT32_MAX</name></expr></argument>, <argument pos:start="59:40" pos:end="59:44"><expr pos:start="59:40" pos:end="59:44"><name pos:start="59:40" pos:end="59:44">scale</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
