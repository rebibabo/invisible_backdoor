<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8402.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:13">zipl_load</name><parameter_list pos:start="1:14" pos:end="1:19">(<parameter pos:start="1:15" pos:end="1:18"><decl pos:start="1:15" pos:end="1:18"><type pos:start="1:15" pos:end="1:18"><name pos:start="1:15" pos:end="1:18">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="117:14">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:14">mbr</name></name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">mbr</name> <init pos:start="5:21" pos:end="5:32">= <expr pos:start="5:23" pos:end="5:32"><operator pos:start="5:23" pos:end="5:23">(</operator><name pos:start="5:24" pos:end="5:27">void</name><operator pos:start="5:28" pos:end="5:28">*</operator><operator pos:start="5:29" pos:end="5:29">)</operator><name pos:start="5:30" pos:end="5:32">sec</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:15">ns</name></decl>, <decl pos:start="7:18" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:13"><modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:24">ns_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:29">program_table_entries</name> <init pos:start="9:31" pos:end="9:33">= <expr pos:start="9:33" pos:end="9:33"><literal type="number" pos:start="9:33" pos:end="9:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:46"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">pte_len</name> <init pos:start="11:17" pos:end="11:46">= <expr pos:start="11:19" pos:end="11:46"><sizeof pos:start="11:19" pos:end="11:46">sizeof<argument_list pos:start="11:25" pos:end="11:46">(<argument pos:start="11:26" pos:end="11:45"><expr pos:start="11:26" pos:end="11:45">struct <name pos:start="11:33" pos:end="11:45">scsi_blockptr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:24">scsi_blockptr</name></name> <modifier pos:start="13:26" pos:end="13:26">*</modifier></type><name pos:start="13:27" pos:end="13:42">prog_table_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:21">error</name> <init pos:start="15:23" pos:end="15:26">= <expr pos:start="15:25" pos:end="15:26"><literal type="string" pos:start="15:25" pos:end="15:26">""</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:22">/* Grab the MBR */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><call pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:15">virtio_read</name><argument_list pos:start="21:16" pos:end="21:30">(<argument pos:start="21:17" pos:end="21:17"><expr pos:start="21:17" pos:end="21:17"><literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr></argument>, <argument pos:start="21:20" pos:end="21:29"><expr pos:start="21:20" pos:end="21:29"><operator pos:start="21:20" pos:end="21:20">(</operator><name pos:start="21:21" pos:end="21:24">void</name><operator pos:start="21:25" pos:end="21:25">*</operator><operator pos:start="21:26" pos:end="21:26">)</operator><name pos:start="21:27" pos:end="21:29">mbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:30"><expr pos:start="25:5" pos:end="25:29"><call pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:9">dputs</name><argument_list pos:start="25:10" pos:end="25:29">(<argument pos:start="25:11" pos:end="25:28"><expr pos:start="25:11" pos:end="25:28"><literal type="string" pos:start="25:11" pos:end="25:28">"checking magic\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:32">(<expr pos:start="29:9" pos:end="29:31"><operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:31"><name pos:start="29:10" pos:end="29:19">zipl_magic</name><argument_list pos:start="29:20" pos:end="29:31">(<argument pos:start="29:21" pos:end="29:30"><expr pos:start="29:21" pos:end="29:30"><name pos:start="29:21" pos:end="29:30"><name pos:start="29:21" pos:end="29:23">mbr</name><operator pos:start="29:24" pos:end="29:25">-&gt;</operator><name pos:start="29:26" pos:end="29:30">magic</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:34" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:31"><expr pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:13">error</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <literal type="string" pos:start="31:17" pos:end="31:30">"zipl_magic 1"</literal></expr>;</expr_stmt>

        <goto pos:start="33:9" pos:end="33:18">goto <name pos:start="33:14" pos:end="33:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:60"><expr pos:start="39:5" pos:end="39:59"><call pos:start="39:5" pos:end="39:59"><name pos:start="39:5" pos:end="39:19">debug_print_int</name><argument_list pos:start="39:20" pos:end="39:59">(<argument pos:start="39:21" pos:end="39:35"><expr pos:start="39:21" pos:end="39:35"><literal type="string" pos:start="39:21" pos:end="39:35">"program table"</literal></expr></argument>, <argument pos:start="39:38" pos:end="39:58"><expr pos:start="39:38" pos:end="39:58"><name pos:start="39:38" pos:end="39:58"><name pos:start="39:38" pos:end="39:40">mbr</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:50">blockptr</name><operator pos:start="39:51" pos:end="39:51">.</operator><name pos:start="39:52" pos:end="39:58">blockno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:33">/* Parse the program table */</comment>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:48">(<expr pos:start="45:9" pos:end="45:47"><call pos:start="45:9" pos:end="45:47"><name pos:start="45:9" pos:end="45:19">virtio_read</name><argument_list pos:start="45:20" pos:end="45:47">(<argument pos:start="45:21" pos:end="45:41"><expr pos:start="45:21" pos:end="45:41"><name pos:start="45:21" pos:end="45:41"><name pos:start="45:21" pos:end="45:23">mbr</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:33">blockptr</name><operator pos:start="45:34" pos:end="45:34">.</operator><name pos:start="45:35" pos:end="45:41">blockno</name></name></expr></argument>, <argument pos:start="45:44" pos:end="45:46"><expr pos:start="45:44" pos:end="45:46"><name pos:start="45:44" pos:end="45:46">sec</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:50" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:18">

        <expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:13">error</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <literal type="string" pos:start="47:17" pos:end="47:29">"virtio_read"</literal></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:18">goto <name pos:start="49:14" pos:end="49:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:25">(<expr pos:start="55:9" pos:end="55:24"><operator pos:start="55:9" pos:end="55:9">!</operator><call pos:start="55:10" pos:end="55:24"><name pos:start="55:10" pos:end="55:19">zipl_magic</name><argument_list pos:start="55:20" pos:end="55:24">(<argument pos:start="55:21" pos:end="55:23"><expr pos:start="55:21" pos:end="55:23"><name pos:start="55:21" pos:end="55:23">sec</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:27" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:18">

        <expr_stmt pos:start="57:9" pos:end="57:31"><expr pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:13">error</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <literal type="string" pos:start="57:17" pos:end="57:30">"zipl_magic 2"</literal></expr>;</expr_stmt>

        <goto pos:start="59:9" pos:end="59:18">goto <name pos:start="59:14" pos:end="59:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:31"><expr pos:start="65:5" pos:end="65:30"><name pos:start="65:5" pos:end="65:10">ns_end</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <name pos:start="65:14" pos:end="65:16">sec</name> <operator pos:start="65:18" pos:end="65:18">+</operator> <name pos:start="65:20" pos:end="65:30">SECTOR_SIZE</name></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="81:5">for <control pos:start="67:9" pos:end="67:61">(<init pos:start="67:10" pos:end="67:30"><expr pos:start="67:10" pos:end="67:29"><name pos:start="67:10" pos:end="67:11">ns</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <operator pos:start="67:15" pos:end="67:15">(</operator><name pos:start="67:16" pos:end="67:18">sec</name> <operator pos:start="67:20" pos:end="67:20">+</operator> <name pos:start="67:22" pos:end="67:28">pte_len</name><operator pos:start="67:29" pos:end="67:29">)</operator></expr>;</init> <condition pos:start="67:32" pos:end="67:55"><expr pos:start="67:32" pos:end="67:54"><operator pos:start="67:32" pos:end="67:32">(</operator><name pos:start="67:33" pos:end="67:34">ns</name> <operator pos:start="67:36" pos:end="67:36">+</operator> <name pos:start="67:38" pos:end="67:44">pte_len</name><operator pos:start="67:45" pos:end="67:45">)</operator> <operator pos:start="67:47" pos:end="67:47">&lt;</operator> <name pos:start="67:49" pos:end="67:54">ns_end</name></expr>;</condition> <incr pos:start="67:57" pos:end="67:60"><expr pos:start="67:57" pos:end="67:60"><name pos:start="67:57" pos:end="67:58">ns</name><operator pos:start="67:59" pos:end="67:60">++</operator></expr></incr>)</control> <block pos:start="67:63" pos:end="81:5">{<block_content pos:start="69:9" pos:end="79:32">

        <expr_stmt pos:start="69:9" pos:end="69:54"><expr pos:start="69:9" pos:end="69:53"><name pos:start="69:9" pos:end="69:24">prog_table_entry</name> <operator pos:start="69:26" pos:end="69:26">=</operator> <operator pos:start="69:28" pos:end="69:28">(</operator>struct <name pos:start="69:36" pos:end="69:48">scsi_blockptr</name> <operator pos:start="69:50" pos:end="69:50">*</operator><operator pos:start="69:51" pos:end="69:51">)</operator><name pos:start="69:52" pos:end="69:53">ns</name></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:39">(<expr pos:start="71:13" pos:end="71:38"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:38"><name pos:start="71:14" pos:end="71:29">prog_table_entry</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:38">blockno</name></name></expr>)</condition> <block pos:start="71:41" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:18">

            <break pos:start="73:13" pos:end="73:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:32"><expr pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:29">program_table_entries</name><operator pos:start="79:30" pos:end="79:31">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="85:5" pos:end="85:68"><expr pos:start="85:5" pos:end="85:67"><call pos:start="85:5" pos:end="85:67"><name pos:start="85:5" pos:end="85:19">debug_print_int</name><argument_list pos:start="85:20" pos:end="85:67">(<argument pos:start="85:21" pos:end="85:43"><expr pos:start="85:21" pos:end="85:43"><literal type="string" pos:start="85:21" pos:end="85:43">"program table entries"</literal></expr></argument>, <argument pos:start="85:46" pos:end="85:66"><expr pos:start="85:46" pos:end="85:66"><name pos:start="85:46" pos:end="85:66">program_table_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:31">(<expr pos:start="89:9" pos:end="89:30"><operator pos:start="89:9" pos:end="89:9">!</operator><name pos:start="89:10" pos:end="89:30">program_table_entries</name></expr>)</condition> <block pos:start="89:33" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:18">

        <goto pos:start="91:9" pos:end="91:18">goto <name pos:start="91:14" pos:end="91:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:31">/* Run the default entry */</comment>



    <expr_stmt pos:start="101:5" pos:end="101:63"><expr pos:start="101:5" pos:end="101:62"><name pos:start="101:5" pos:end="101:20">prog_table_entry</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <operator pos:start="101:24" pos:end="101:24">(</operator>struct <name pos:start="101:32" pos:end="101:44">scsi_blockptr</name> <operator pos:start="101:46" pos:end="101:46">*</operator><operator pos:start="101:47" pos:end="101:47">)</operator><operator pos:start="101:48" pos:end="101:48">(</operator><name pos:start="101:49" pos:end="101:51">sec</name> <operator pos:start="101:53" pos:end="101:53">+</operator> <name pos:start="101:55" pos:end="101:61">pte_len</name><operator pos:start="101:62" pos:end="101:62">)</operator></expr>;</expr_stmt>



    <return pos:start="105:5" pos:end="105:38">return <expr pos:start="105:12" pos:end="105:37"><call pos:start="105:12" pos:end="105:37"><name pos:start="105:12" pos:end="105:19">zipl_run</name><argument_list pos:start="105:20" pos:end="105:37">(<argument pos:start="105:21" pos:end="105:36"><expr pos:start="105:21" pos:end="105:36"><name pos:start="105:21" pos:end="105:36">prog_table_entry</name></expr></argument>)</argument_list></call></expr>;</return>



<label pos:start="109:1" pos:end="109:5"><name pos:start="109:1" pos:end="109:4">fail</name>:</label>

    <expr_stmt pos:start="111:5" pos:end="111:40"><expr pos:start="111:5" pos:end="111:39"><call pos:start="111:5" pos:end="111:39"><name pos:start="111:5" pos:end="111:14">sclp_print</name><argument_list pos:start="111:15" pos:end="111:39">(<argument pos:start="111:16" pos:end="111:38"><expr pos:start="111:16" pos:end="111:38"><literal type="string" pos:start="111:16" pos:end="111:38">"failed loading zipl: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:22"><expr pos:start="113:5" pos:end="113:21"><call pos:start="113:5" pos:end="113:21"><name pos:start="113:5" pos:end="113:14">sclp_print</name><argument_list pos:start="113:15" pos:end="113:21">(<argument pos:start="113:16" pos:end="113:20"><expr pos:start="113:16" pos:end="113:20"><name pos:start="113:16" pos:end="113:20">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:21"><expr pos:start="115:5" pos:end="115:20"><call pos:start="115:5" pos:end="115:20"><name pos:start="115:5" pos:end="115:14">sclp_print</name><argument_list pos:start="115:15" pos:end="115:20">(<argument pos:start="115:16" pos:end="115:19"><expr pos:start="115:16" pos:end="115:19"><literal type="string" pos:start="115:16" pos:end="115:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="117:5" pos:end="117:14">return <expr pos:start="117:12" pos:end="117:13"><operator pos:start="117:12" pos:end="117:12">-</operator><literal type="number" pos:start="117:13" pos:end="117:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
