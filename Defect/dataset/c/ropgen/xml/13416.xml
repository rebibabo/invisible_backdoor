<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13416.c" pos:tabs="8"><macro pos:start="1:1" pos:end="7:39"><name pos:start="1:1" pos:end="1:15">match_insn_m68k</name> <argument_list pos:start="1:17" pos:end="7:39">(<argument pos:start="1:18" pos:end="1:32">bfd_vma memaddr</argument>,

		 <argument pos:start="3:18" pos:end="3:40">disassemble_info * info</argument>,

		 <argument pos:start="5:18" pos:end="5:48">const struct m68k_opcode * best</argument>,

		 <argument pos:start="7:18" pos:end="7:38">struct private * priv</argument>)</argument_list></macro>

<block pos:start="9:1" pos:end="275:1">{<block_content pos:start="11:3" pos:end="273:20">

  <decl_stmt pos:start="11:3" pos:end="11:24"><decl pos:start="11:3" pos:end="11:23"><type pos:start="11:3" pos:end="11:17"><name pos:start="11:3" pos:end="11:10">unsigned</name> <name pos:start="11:12" pos:end="11:15">char</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:23">save_p</name></decl>;</decl_stmt>

  <decl_stmt pos:start="13:3" pos:end="13:19"><decl pos:start="13:3" pos:end="13:18"><type pos:start="13:3" pos:end="13:17"><name pos:start="13:3" pos:end="13:10">unsigned</name> <name pos:start="13:12" pos:end="13:15">char</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:18">p</name></decl>;</decl_stmt>

  <decl_stmt pos:start="15:3" pos:end="15:16"><decl pos:start="15:3" pos:end="15:15"><type pos:start="15:3" pos:end="15:14"><specifier pos:start="15:3" pos:end="15:7">const</specifier> <name pos:start="15:9" pos:end="15:12">char</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:15">d</name></decl>;</decl_stmt>



  <decl_stmt pos:start="19:3" pos:end="19:38"><decl pos:start="19:3" pos:end="19:37"><type pos:start="19:3" pos:end="19:12"><name pos:start="19:3" pos:end="19:10">bfd_byte</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:18">buffer</name> <init pos:start="19:20" pos:end="19:37">= <expr pos:start="19:22" pos:end="19:37"><name pos:start="19:22" pos:end="19:37"><name pos:start="19:22" pos:end="19:25">priv</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:37">the_buffer</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="21:3" pos:end="21:50"><decl pos:start="21:3" pos:end="21:49"><type pos:start="21:3" pos:end="21:15"><name pos:start="21:3" pos:end="21:15">fprintf_ftype</name></type> <name pos:start="21:17" pos:end="21:28">save_printer</name> <init pos:start="21:30" pos:end="21:49">= <expr pos:start="21:32" pos:end="21:49"><name pos:start="21:32" pos:end="21:49"><name pos:start="21:32" pos:end="21:35">info</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:49">fprintf_func</name></name></expr></init></decl>;</decl_stmt>

  <function_decl pos:start="23:3" pos:end="25:31"><type pos:start="23:3" pos:end="23:6"><name pos:start="23:3" pos:end="23:6">void</name></type> (<modifier pos:start="23:9" pos:end="23:9">*</modifier> <name pos:start="23:11" pos:end="23:28">save_print_address</name>) <parameter_list pos:start="23:31" pos:end="23:66">(<parameter pos:start="23:32" pos:end="23:38"><decl pos:start="23:32" pos:end="23:38"><type pos:start="23:32" pos:end="23:38"><name pos:start="23:32" pos:end="23:38">bfd_vma</name></type></decl></parameter>, <parameter pos:start="23:41" pos:end="23:65"><decl pos:start="23:41" pos:end="23:65"><type pos:start="23:41" pos:end="23:65"><name pos:start="23:41" pos:end="23:63"><name pos:start="23:41" pos:end="23:46">struct</name> <name pos:start="23:48" pos:end="23:63">disassemble_info</name></name> <modifier pos:start="23:65" pos:end="23:65">*</modifier></type></decl></parameter>)</parameter_list>

    <init pos:start="25:5" pos:end="25:30">= <expr pos:start="25:7" pos:end="25:30"><name pos:start="25:7" pos:end="25:30"><name pos:start="25:7" pos:end="25:10">info</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:30">print_address_func</name></name></expr></init>;</function_decl>



  <comment type="block" pos:start="29:3" pos:end="31:46">/* Point at first word of argument data,

     and at descriptor for first argument.  */</comment>

  <expr_stmt pos:start="33:3" pos:end="33:17"><expr pos:start="33:3" pos:end="33:16"><name pos:start="33:3" pos:end="33:3">p</name> <operator pos:start="33:5" pos:end="33:5">=</operator> <name pos:start="33:7" pos:end="33:12">buffer</name> <operator pos:start="33:14" pos:end="33:14">+</operator> <literal type="number" pos:start="33:16" pos:end="33:16">2</literal></expr>;</expr_stmt>



  <comment type="block" pos:start="37:3" pos:end="43:41">/* Figure out how long the fixed-size portion of the instruction is.

     The only place this is stored in the opcode table is

     in the arguments--look for arguments which specify fields in the 2nd

     or 3rd words of the instruction.  */</comment>

  <for pos:start="45:3" pos:end="117:5">for <control pos:start="45:7" pos:end="45:34">(<init pos:start="45:8" pos:end="45:22"><expr pos:start="45:8" pos:end="45:21"><name pos:start="45:8" pos:end="45:8">d</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <name pos:start="45:12" pos:end="45:21"><name pos:start="45:12" pos:end="45:15">best</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:21">args</name></name></expr>;</init> <condition pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:25"><operator pos:start="45:24" pos:end="45:24">*</operator><name pos:start="45:25" pos:end="45:25">d</name></expr>;</condition> <incr pos:start="45:28" pos:end="45:33"><expr pos:start="45:28" pos:end="45:33"><name pos:start="45:28" pos:end="45:28">d</name> <operator pos:start="45:30" pos:end="45:31">+=</operator> <literal type="number" pos:start="45:33" pos:end="45:33">2</literal></expr></incr>)</control>

    <block pos:start="47:5" pos:end="117:5">{<block_content pos:start="53:7" pos:end="115:9">

      <comment type="block" pos:start="49:7" pos:end="51:75">/* I don't think it is necessary to be checking d[0] here;

	 I suspect all this could be moved to the case statement below.  */</comment>

      <if_stmt pos:start="53:7" pos:end="65:9"><if pos:start="53:7" pos:end="65:9">if <condition pos:start="53:10" pos:end="53:22">(<expr pos:start="53:11" pos:end="53:21"><name pos:start="53:11" pos:end="53:14"><name pos:start="53:11" pos:end="53:11">d</name><index pos:start="53:12" pos:end="53:14">[<expr pos:start="53:13" pos:end="53:13"><literal type="number" pos:start="53:13" pos:end="53:13">0</literal></expr>]</index></name> <operator pos:start="53:16" pos:end="53:17">==</operator> <literal type="char" pos:start="53:19" pos:end="53:21">'#'</literal></expr>)</condition>

	<block pos:start="55:9" pos:end="65:9">{<block_content pos:start="57:11" pos:end="63:27">

	  <if_stmt pos:start="57:11" pos:end="63:27"><if pos:start="57:11" pos:end="59:27">if <condition pos:start="57:14" pos:end="57:44">(<expr pos:start="57:15" pos:end="57:43"><name pos:start="57:15" pos:end="57:18"><name pos:start="57:15" pos:end="57:15">d</name><index pos:start="57:16" pos:end="57:18">[<expr pos:start="57:17" pos:end="57:17"><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>]</index></name> <operator pos:start="57:20" pos:end="57:21">==</operator> <literal type="char" pos:start="57:23" pos:end="57:25">'l'</literal> <operator pos:start="57:27" pos:end="57:28">&amp;&amp;</operator> <name pos:start="57:30" pos:end="57:30">p</name> <operator pos:start="57:32" pos:end="57:32">-</operator> <name pos:start="57:34" pos:end="57:39">buffer</name> <operator pos:start="57:41" pos:end="57:41">&lt;</operator> <literal type="number" pos:start="57:43" pos:end="57:43">6</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:27"><block_content pos:start="59:13" pos:end="59:27">

	    <expr_stmt pos:start="59:13" pos:end="59:27"><expr pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:13">p</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:22">buffer</name> <operator pos:start="59:24" pos:end="59:24">+</operator> <literal type="number" pos:start="59:26" pos:end="59:26">6</literal></expr>;</expr_stmt></block_content></block></if>

	  <if type="elseif" pos:start="61:11" pos:end="63:27">else if <condition pos:start="61:19" pos:end="61:64">(<expr pos:start="61:20" pos:end="61:63"><name pos:start="61:20" pos:end="61:20">p</name> <operator pos:start="61:22" pos:end="61:22">-</operator> <name pos:start="61:24" pos:end="61:29">buffer</name> <operator pos:start="61:31" pos:end="61:31">&lt;</operator> <literal type="number" pos:start="61:33" pos:end="61:33">4</literal> <operator pos:start="61:35" pos:end="61:36">&amp;&amp;</operator> <name pos:start="61:38" pos:end="61:41"><name pos:start="61:38" pos:end="61:38">d</name><index pos:start="61:39" pos:end="61:41">[<expr pos:start="61:40" pos:end="61:40"><literal type="number" pos:start="61:40" pos:end="61:40">1</literal></expr>]</index></name> <operator pos:start="61:43" pos:end="61:44">!=</operator> <literal type="char" pos:start="61:46" pos:end="61:48">'C'</literal> <operator pos:start="61:50" pos:end="61:51">&amp;&amp;</operator> <name pos:start="61:53" pos:end="61:56"><name pos:start="61:53" pos:end="61:53">d</name><index pos:start="61:54" pos:end="61:56">[<expr pos:start="61:55" pos:end="61:55"><literal type="number" pos:start="61:55" pos:end="61:55">1</literal></expr>]</index></name> <operator pos:start="61:58" pos:end="61:59">!=</operator> <literal type="char" pos:start="61:61" pos:end="61:63">'8'</literal></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:27"><block_content pos:start="63:13" pos:end="63:27">

	    <expr_stmt pos:start="63:13" pos:end="63:27"><expr pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:13">p</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <name pos:start="63:17" pos:end="63:22">buffer</name> <operator pos:start="63:24" pos:end="63:24">+</operator> <literal type="number" pos:start="63:26" pos:end="63:26">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



      <if_stmt pos:start="69:7" pos:end="71:23"><if pos:start="69:7" pos:end="71:23">if <condition pos:start="69:10" pos:end="69:72">(<expr pos:start="69:11" pos:end="69:71"><operator pos:start="69:11" pos:end="69:11">(</operator><name pos:start="69:12" pos:end="69:15"><name pos:start="69:12" pos:end="69:12">d</name><index pos:start="69:13" pos:end="69:15">[<expr pos:start="69:14" pos:end="69:14"><literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>]</index></name> <operator pos:start="69:17" pos:end="69:18">==</operator> <literal type="char" pos:start="69:20" pos:end="69:22">'L'</literal> <operator pos:start="69:24" pos:end="69:25">||</operator> <name pos:start="69:27" pos:end="69:30"><name pos:start="69:27" pos:end="69:27">d</name><index pos:start="69:28" pos:end="69:30">[<expr pos:start="69:29" pos:end="69:29"><literal type="number" pos:start="69:29" pos:end="69:29">0</literal></expr>]</index></name> <operator pos:start="69:32" pos:end="69:33">==</operator> <literal type="char" pos:start="69:35" pos:end="69:37">'l'</literal><operator pos:start="69:38" pos:end="69:38">)</operator> <operator pos:start="69:40" pos:end="69:41">&amp;&amp;</operator> <name pos:start="69:43" pos:end="69:46"><name pos:start="69:43" pos:end="69:43">d</name><index pos:start="69:44" pos:end="69:46">[<expr pos:start="69:45" pos:end="69:45"><literal type="number" pos:start="69:45" pos:end="69:45">1</literal></expr>]</index></name> <operator pos:start="69:48" pos:end="69:49">==</operator> <literal type="char" pos:start="69:51" pos:end="69:53">'w'</literal> <operator pos:start="69:55" pos:end="69:56">&amp;&amp;</operator> <name pos:start="69:58" pos:end="69:58">p</name> <operator pos:start="69:60" pos:end="69:60">-</operator> <name pos:start="69:62" pos:end="69:67">buffer</name> <operator pos:start="69:69" pos:end="69:69">&lt;</operator> <literal type="number" pos:start="69:71" pos:end="69:71">4</literal></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:23"><block_content pos:start="71:9" pos:end="71:23">

	<expr_stmt pos:start="71:9" pos:end="71:23"><expr pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:9">p</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <name pos:start="71:13" pos:end="71:18">buffer</name> <operator pos:start="71:20" pos:end="71:20">+</operator> <literal type="number" pos:start="71:22" pos:end="71:22">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



      <switch pos:start="75:7" pos:end="115:9">switch <condition pos:start="75:14" pos:end="75:19">(<expr pos:start="75:15" pos:end="75:18"><name pos:start="75:15" pos:end="75:18"><name pos:start="75:15" pos:end="75:15">d</name><index pos:start="75:16" pos:end="75:18">[<expr pos:start="75:17" pos:end="75:17"><literal type="number" pos:start="75:17" pos:end="75:17">1</literal></expr>]</index></name></expr>)</condition>

	<block pos:start="77:9" pos:end="115:9">{<block_content pos:start="79:9" pos:end="113:16">

	<case pos:start="79:9" pos:end="79:17">case <expr pos:start="79:14" pos:end="79:16"><literal type="char" pos:start="79:14" pos:end="79:16">'1'</literal></expr>:</case>

	<case pos:start="81:9" pos:end="81:17">case <expr pos:start="81:14" pos:end="81:16"><literal type="char" pos:start="81:14" pos:end="81:16">'2'</literal></expr>:</case>

	<case pos:start="83:9" pos:end="83:17">case <expr pos:start="83:14" pos:end="83:16"><literal type="char" pos:start="83:14" pos:end="83:16">'3'</literal></expr>:</case>

	<case pos:start="85:9" pos:end="85:17">case <expr pos:start="85:14" pos:end="85:16"><literal type="char" pos:start="85:14" pos:end="85:16">'7'</literal></expr>:</case>

	<case pos:start="87:9" pos:end="87:17">case <expr pos:start="87:14" pos:end="87:16"><literal type="char" pos:start="87:14" pos:end="87:16">'8'</literal></expr>:</case>

	<case pos:start="89:9" pos:end="89:17">case <expr pos:start="89:14" pos:end="89:16"><literal type="char" pos:start="89:14" pos:end="89:16">'9'</literal></expr>:</case>

	<case pos:start="91:9" pos:end="91:17">case <expr pos:start="91:14" pos:end="91:16"><literal type="char" pos:start="91:14" pos:end="91:16">'i'</literal></expr>:</case>

	  <if_stmt pos:start="93:11" pos:end="95:27"><if pos:start="93:11" pos:end="95:27">if <condition pos:start="93:14" pos:end="93:29">(<expr pos:start="93:15" pos:end="93:28"><name pos:start="93:15" pos:end="93:15">p</name> <operator pos:start="93:17" pos:end="93:17">-</operator> <name pos:start="93:19" pos:end="93:24">buffer</name> <operator pos:start="93:26" pos:end="93:26">&lt;</operator> <literal type="number" pos:start="93:28" pos:end="93:28">4</literal></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:27"><block_content pos:start="95:13" pos:end="95:27">

	    <expr_stmt pos:start="95:13" pos:end="95:27"><expr pos:start="95:13" pos:end="95:26"><name pos:start="95:13" pos:end="95:13">p</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <name pos:start="95:17" pos:end="95:22">buffer</name> <operator pos:start="95:24" pos:end="95:24">+</operator> <literal type="number" pos:start="95:26" pos:end="95:26">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <break pos:start="97:11" pos:end="97:16">break;</break>

	<case pos:start="99:9" pos:end="99:17">case <expr pos:start="99:14" pos:end="99:16"><literal type="char" pos:start="99:14" pos:end="99:16">'4'</literal></expr>:</case>

	<case pos:start="101:9" pos:end="101:17">case <expr pos:start="101:14" pos:end="101:16"><literal type="char" pos:start="101:14" pos:end="101:16">'5'</literal></expr>:</case>

	<case pos:start="103:9" pos:end="103:17">case <expr pos:start="103:14" pos:end="103:16"><literal type="char" pos:start="103:14" pos:end="103:16">'6'</literal></expr>:</case>

	  <if_stmt pos:start="105:11" pos:end="107:27"><if pos:start="105:11" pos:end="107:27">if <condition pos:start="105:14" pos:end="105:29">(<expr pos:start="105:15" pos:end="105:28"><name pos:start="105:15" pos:end="105:15">p</name> <operator pos:start="105:17" pos:end="105:17">-</operator> <name pos:start="105:19" pos:end="105:24">buffer</name> <operator pos:start="105:26" pos:end="105:26">&lt;</operator> <literal type="number" pos:start="105:28" pos:end="105:28">6</literal></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:27"><block_content pos:start="107:13" pos:end="107:27">

	    <expr_stmt pos:start="107:13" pos:end="107:27"><expr pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:13">p</name> <operator pos:start="107:15" pos:end="107:15">=</operator> <name pos:start="107:17" pos:end="107:22">buffer</name> <operator pos:start="107:24" pos:end="107:24">+</operator> <literal type="number" pos:start="107:26" pos:end="107:26">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <break pos:start="109:11" pos:end="109:16">break;</break>

	<default pos:start="111:9" pos:end="111:16">default:</default>

	  <break pos:start="113:11" pos:end="113:16">break;</break>

	</block_content>}</block></switch>

    </block_content>}</block></for>



  <comment type="block" pos:start="121:3" pos:end="123:73">/* pflusha is an exceptions.  It takes no arguments but is two words

     long.  Recognize it by looking at the lower 16 bits of the mask.  */</comment>

  <if_stmt pos:start="125:3" pos:end="127:19"><if pos:start="125:3" pos:end="127:19">if <condition pos:start="125:6" pos:end="125:52">(<expr pos:start="125:7" pos:end="125:51"><name pos:start="125:7" pos:end="125:7">p</name> <operator pos:start="125:9" pos:end="125:9">-</operator> <name pos:start="125:11" pos:end="125:16">buffer</name> <operator pos:start="125:18" pos:end="125:18">&lt;</operator> <literal type="number" pos:start="125:20" pos:end="125:20">4</literal> <operator pos:start="125:22" pos:end="125:23">&amp;&amp;</operator> <operator pos:start="125:25" pos:end="125:25">(</operator><name pos:start="125:26" pos:end="125:36"><name pos:start="125:26" pos:end="125:29">best</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:36">match</name></name> <operator pos:start="125:38" pos:end="125:38">&amp;</operator> <literal type="number" pos:start="125:40" pos:end="125:45">0xFFFF</literal><operator pos:start="125:46" pos:end="125:46">)</operator> <operator pos:start="125:48" pos:end="125:49">!=</operator> <literal type="number" pos:start="125:51" pos:end="125:51">0</literal></expr>)</condition><block type="pseudo" pos:start="127:5" pos:end="127:19"><block_content pos:start="127:5" pos:end="127:19">

    <expr_stmt pos:start="127:5" pos:end="127:19"><expr pos:start="127:5" pos:end="127:18"><name pos:start="127:5" pos:end="127:5">p</name> <operator pos:start="127:7" pos:end="127:7">=</operator> <name pos:start="127:9" pos:end="127:14">buffer</name> <operator pos:start="127:16" pos:end="127:16">+</operator> <literal type="number" pos:start="127:18" pos:end="127:18">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



  <comment type="block" pos:start="131:3" pos:end="133:26">/* lpstop is another exception.  It takes a one word argument but is

     three words long.  */</comment>

  <if_stmt pos:start="135:3" pos:end="161:5"><if pos:start="135:3" pos:end="161:5">if <condition pos:start="135:6" pos:end="141:30">(<expr pos:start="135:7" pos:end="141:29"><name pos:start="135:7" pos:end="135:7">p</name> <operator pos:start="135:9" pos:end="135:9">-</operator> <name pos:start="135:11" pos:end="135:16">buffer</name> <operator pos:start="135:18" pos:end="135:18">&lt;</operator> <literal type="number" pos:start="135:20" pos:end="135:20">6</literal>

      <operator pos:start="137:7" pos:end="137:8">&amp;&amp;</operator> <operator pos:start="137:10" pos:end="137:10">(</operator><name pos:start="137:11" pos:end="137:21"><name pos:start="137:11" pos:end="137:14">best</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:21">match</name></name> <operator pos:start="137:23" pos:end="137:23">&amp;</operator> <literal type="number" pos:start="137:25" pos:end="137:30">0xffff</literal><operator pos:start="137:31" pos:end="137:31">)</operator> <operator pos:start="137:33" pos:end="137:34">==</operator> <literal type="number" pos:start="137:36" pos:end="137:41">0xffff</literal>

      <operator pos:start="139:7" pos:end="139:8">&amp;&amp;</operator> <name pos:start="139:10" pos:end="139:22"><name pos:start="139:10" pos:end="139:13">best</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:19">args</name><index pos:start="139:20" pos:end="139:22">[<expr pos:start="139:21" pos:end="139:21"><literal type="number" pos:start="139:21" pos:end="139:21">0</literal></expr>]</index></name> <operator pos:start="139:24" pos:end="139:25">==</operator> <literal type="char" pos:start="139:27" pos:end="139:29">'#'</literal>

      <operator pos:start="141:7" pos:end="141:8">&amp;&amp;</operator> <name pos:start="141:10" pos:end="141:22"><name pos:start="141:10" pos:end="141:13">best</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:19">args</name><index pos:start="141:20" pos:end="141:22">[<expr pos:start="141:21" pos:end="141:21"><literal type="number" pos:start="141:21" pos:end="141:21">1</literal></expr>]</index></name> <operator pos:start="141:24" pos:end="141:25">==</operator> <literal type="char" pos:start="141:27" pos:end="141:29">'w'</literal></expr>)</condition>

    <block pos:start="143:5" pos:end="161:5">{<block_content pos:start="153:7" pos:end="159:28">

      <comment type="block" pos:start="145:7" pos:end="151:56">/* Copy the one word argument into the usual location for a one

	 word argument, to simplify printing it.  We can get away with

	 this because we know exactly what the second word is, and we

	 aren't going to print anything based on it.  */</comment>

      <expr_stmt pos:start="153:7" pos:end="153:21"><expr pos:start="153:7" pos:end="153:20"><name pos:start="153:7" pos:end="153:7">p</name> <operator pos:start="153:9" pos:end="153:9">=</operator> <name pos:start="153:11" pos:end="153:16">buffer</name> <operator pos:start="153:18" pos:end="153:18">+</operator> <literal type="number" pos:start="153:20" pos:end="153:20">6</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="155:7" pos:end="155:27"><expr pos:start="155:7" pos:end="155:26"><call pos:start="155:7" pos:end="155:26"><name pos:start="155:7" pos:end="155:16">FETCH_DATA</name> <argument_list pos:start="155:18" pos:end="155:26">(<argument pos:start="155:19" pos:end="155:22"><expr pos:start="155:19" pos:end="155:22"><name pos:start="155:19" pos:end="155:22">info</name></expr></argument>, <argument pos:start="155:25" pos:end="155:25"><expr pos:start="155:25" pos:end="155:25"><name pos:start="155:25" pos:end="155:25">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="157:7" pos:end="157:28"><expr pos:start="157:7" pos:end="157:27"><name pos:start="157:7" pos:end="157:15"><name pos:start="157:7" pos:end="157:12">buffer</name><index pos:start="157:13" pos:end="157:15">[<expr pos:start="157:14" pos:end="157:14"><literal type="number" pos:start="157:14" pos:end="157:14">2</literal></expr>]</index></name> <operator pos:start="157:17" pos:end="157:17">=</operator> <name pos:start="157:19" pos:end="157:27"><name pos:start="157:19" pos:end="157:24">buffer</name><index pos:start="157:25" pos:end="157:27">[<expr pos:start="157:26" pos:end="157:26"><literal type="number" pos:start="157:26" pos:end="157:26">4</literal></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="159:7" pos:end="159:28"><expr pos:start="159:7" pos:end="159:27"><name pos:start="159:7" pos:end="159:15"><name pos:start="159:7" pos:end="159:12">buffer</name><index pos:start="159:13" pos:end="159:15">[<expr pos:start="159:14" pos:end="159:14"><literal type="number" pos:start="159:14" pos:end="159:14">3</literal></expr>]</index></name> <operator pos:start="159:17" pos:end="159:17">=</operator> <name pos:start="159:19" pos:end="159:27"><name pos:start="159:19" pos:end="159:24">buffer</name><index pos:start="159:25" pos:end="159:27">[<expr pos:start="159:26" pos:end="159:26"><literal type="number" pos:start="159:26" pos:end="159:26">5</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



  <expr_stmt pos:start="165:3" pos:end="165:23"><expr pos:start="165:3" pos:end="165:22"><call pos:start="165:3" pos:end="165:22"><name pos:start="165:3" pos:end="165:12">FETCH_DATA</name> <argument_list pos:start="165:14" pos:end="165:22">(<argument pos:start="165:15" pos:end="165:18"><expr pos:start="165:15" pos:end="165:18"><name pos:start="165:15" pos:end="165:18">info</name></expr></argument>, <argument pos:start="165:21" pos:end="165:21"><expr pos:start="165:21" pos:end="165:21"><name pos:start="165:21" pos:end="165:21">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <expr_stmt pos:start="169:3" pos:end="169:17"><expr pos:start="169:3" pos:end="169:16"><name pos:start="169:3" pos:end="169:3">d</name> <operator pos:start="169:5" pos:end="169:5">=</operator> <name pos:start="169:7" pos:end="169:16"><name pos:start="169:7" pos:end="169:10">best</name><operator pos:start="169:11" pos:end="169:12">-&gt;</operator><name pos:start="169:13" pos:end="169:16">args</name></name></expr>;</expr_stmt>



  <expr_stmt pos:start="173:3" pos:end="173:13"><expr pos:start="173:3" pos:end="173:12"><name pos:start="173:3" pos:end="173:8">save_p</name> <operator pos:start="173:10" pos:end="173:10">=</operator> <name pos:start="173:12" pos:end="173:12">p</name></expr>;</expr_stmt>

  <expr_stmt pos:start="175:3" pos:end="175:49"><expr pos:start="175:3" pos:end="175:48"><name pos:start="175:3" pos:end="175:26"><name pos:start="175:3" pos:end="175:6">info</name><operator pos:start="175:7" pos:end="175:8">-&gt;</operator><name pos:start="175:9" pos:end="175:26">print_address_func</name></name> <operator pos:start="175:28" pos:end="175:28">=</operator> <name pos:start="175:30" pos:end="175:48">dummy_print_address</name></expr>;</expr_stmt>

  <expr_stmt pos:start="177:3" pos:end="177:53"><expr pos:start="177:3" pos:end="177:52"><name pos:start="177:3" pos:end="177:20"><name pos:start="177:3" pos:end="177:6">info</name><operator pos:start="177:7" pos:end="177:8">-&gt;</operator><name pos:start="177:9" pos:end="177:20">fprintf_func</name></name> <operator pos:start="177:22" pos:end="177:22">=</operator> <operator pos:start="177:24" pos:end="177:24">(</operator><name pos:start="177:25" pos:end="177:37">fprintf_ftype</name><operator pos:start="177:38" pos:end="177:38">)</operator> <name pos:start="177:40" pos:end="177:52">dummy_printer</name></expr>;</expr_stmt>



  <comment type="block" pos:start="181:3" pos:end="183:29">/* We scan the operands twice.  The first time we don't print anything,

     but look for errors.  */</comment>

  <for pos:start="185:3" pos:end="229:5">for <control pos:start="185:7" pos:end="185:20">(<init pos:start="185:8" pos:end="185:8">;</init> <condition pos:start="185:10" pos:end="185:12"><expr pos:start="185:10" pos:end="185:11"><operator pos:start="185:10" pos:end="185:10">*</operator><name pos:start="185:11" pos:end="185:11">d</name></expr>;</condition> <incr pos:start="185:14" pos:end="185:19"><expr pos:start="185:14" pos:end="185:19"><name pos:start="185:14" pos:end="185:14">d</name> <operator pos:start="185:16" pos:end="185:17">+=</operator> <literal type="number" pos:start="185:19" pos:end="185:19">2</literal></expr></incr>)</control>

    <block pos:start="187:5" pos:end="229:5">{<block_content pos:start="189:7" pos:end="227:9">

      <decl_stmt pos:start="189:7" pos:end="189:78"><decl pos:start="189:7" pos:end="189:77"><type pos:start="189:7" pos:end="189:9"><name pos:start="189:7" pos:end="189:9">int</name></type> <name pos:start="189:11" pos:end="189:15">eaten</name> <init pos:start="189:17" pos:end="189:77">= <expr pos:start="189:19" pos:end="189:77"><call pos:start="189:19" pos:end="189:77"><name pos:start="189:19" pos:end="189:32">print_insn_arg</name> <argument_list pos:start="189:34" pos:end="189:77">(<argument pos:start="189:35" pos:end="189:35"><expr pos:start="189:35" pos:end="189:35"><name pos:start="189:35" pos:end="189:35">d</name></expr></argument>, <argument pos:start="189:38" pos:end="189:43"><expr pos:start="189:38" pos:end="189:43"><name pos:start="189:38" pos:end="189:43">buffer</name></expr></argument>, <argument pos:start="189:46" pos:end="189:46"><expr pos:start="189:46" pos:end="189:46"><name pos:start="189:46" pos:end="189:46">p</name></expr></argument>, <argument pos:start="189:49" pos:end="189:70"><expr pos:start="189:49" pos:end="189:70"><name pos:start="189:49" pos:end="189:55">memaddr</name> <operator pos:start="189:57" pos:end="189:57">+</operator> <operator pos:start="189:59" pos:end="189:59">(</operator><name pos:start="189:60" pos:end="189:60">p</name> <operator pos:start="189:62" pos:end="189:62">-</operator> <name pos:start="189:64" pos:end="189:69">buffer</name><operator pos:start="189:70" pos:end="189:70">)</operator></expr></argument>, <argument pos:start="189:73" pos:end="189:76"><expr pos:start="189:73" pos:end="189:76"><name pos:start="189:73" pos:end="189:76">info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



      <if_stmt pos:start="193:7" pos:end="227:9"><if pos:start="193:7" pos:end="195:19">if <condition pos:start="193:10" pos:end="193:21">(<expr pos:start="193:11" pos:end="193:20"><name pos:start="193:11" pos:end="193:15">eaten</name> <operator pos:start="193:17" pos:end="193:18">&gt;=</operator> <literal type="number" pos:start="193:20" pos:end="193:20">0</literal></expr>)</condition><block type="pseudo" pos:start="195:9" pos:end="195:19"><block_content pos:start="195:9" pos:end="195:19">

	<expr_stmt pos:start="195:9" pos:end="195:19"><expr pos:start="195:9" pos:end="195:18"><name pos:start="195:9" pos:end="195:9">p</name> <operator pos:start="195:11" pos:end="195:12">+=</operator> <name pos:start="195:14" pos:end="195:18">eaten</name></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="197:7" pos:end="207:9">else if <condition pos:start="197:15" pos:end="197:27">(<expr pos:start="197:16" pos:end="197:26"><name pos:start="197:16" pos:end="197:20">eaten</name> <operator pos:start="197:22" pos:end="197:23">==</operator> <operator pos:start="197:25" pos:end="197:25">-</operator><literal type="number" pos:start="197:26" pos:end="197:26">1</literal></expr>)</condition>

	<block pos:start="199:9" pos:end="207:9">{<block_content pos:start="201:11" pos:end="205:19">

	  <expr_stmt pos:start="201:11" pos:end="201:44"><expr pos:start="201:11" pos:end="201:43"><name pos:start="201:11" pos:end="201:28"><name pos:start="201:11" pos:end="201:14">info</name><operator pos:start="201:15" pos:end="201:16">-&gt;</operator><name pos:start="201:17" pos:end="201:28">fprintf_func</name></name> <operator pos:start="201:30" pos:end="201:30">=</operator> <name pos:start="201:32" pos:end="201:43">save_printer</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="203:11" pos:end="203:56"><expr pos:start="203:11" pos:end="203:55"><name pos:start="203:11" pos:end="203:34"><name pos:start="203:11" pos:end="203:14">info</name><operator pos:start="203:15" pos:end="203:16">-&gt;</operator><name pos:start="203:17" pos:end="203:34">print_address_func</name></name> <operator pos:start="203:36" pos:end="203:36">=</operator> <name pos:start="203:38" pos:end="203:55">save_print_address</name></expr>;</expr_stmt>

	  <return pos:start="205:11" pos:end="205:19">return <expr pos:start="205:18" pos:end="205:18"><literal type="number" pos:start="205:18" pos:end="205:18">0</literal></expr>;</return>

	</block_content>}</block></if>

      <else pos:start="209:7" pos:end="227:9">else

	<block pos:start="211:9" pos:end="227:9">{<block_content pos:start="213:11" pos:end="225:19">

	  <expr_stmt pos:start="213:11" pos:end="219:55"><expr pos:start="213:11" pos:end="219:54"><call pos:start="213:11" pos:end="219:54"><name pos:start="213:11" pos:end="213:28"><name pos:start="213:11" pos:end="213:14">info</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:28">fprintf_func</name></name> <argument_list pos:start="213:30" pos:end="219:54">(<argument pos:start="213:31" pos:end="213:42"><expr pos:start="213:31" pos:end="213:42"><name pos:start="213:31" pos:end="213:42"><name pos:start="213:31" pos:end="213:34">info</name><operator pos:start="213:35" pos:end="213:36">-&gt;</operator><name pos:start="213:37" pos:end="213:42">stream</name></name></expr></argument>,

			      <comment type="block" pos:start="215:31" pos:end="215:53">/* xgettext:c-format */</comment>

			      <argument pos:start="217:31" pos:end="217:76"><expr pos:start="217:31" pos:end="217:76"><call pos:start="217:31" pos:end="217:76"><name pos:start="217:31" pos:end="217:31">_</name><argument_list pos:start="217:32" pos:end="217:76">(<argument pos:start="217:33" pos:end="217:75"><expr pos:start="217:33" pos:end="217:75"><literal type="string" pos:start="217:33" pos:end="217:75">"&lt;internal error in opcode table: %s %s&gt;\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

			      <argument pos:start="219:31" pos:end="219:40"><expr pos:start="219:31" pos:end="219:40"><name pos:start="219:31" pos:end="219:40"><name pos:start="219:31" pos:end="219:34">best</name><operator pos:start="219:35" pos:end="219:36">-&gt;</operator><name pos:start="219:37" pos:end="219:40">name</name></name></expr></argument>,  <argument pos:start="219:44" pos:end="219:53"><expr pos:start="219:44" pos:end="219:53"><name pos:start="219:44" pos:end="219:53"><name pos:start="219:44" pos:end="219:47">best</name><operator pos:start="219:48" pos:end="219:49">-&gt;</operator><name pos:start="219:50" pos:end="219:53">args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="221:11" pos:end="221:44"><expr pos:start="221:11" pos:end="221:43"><name pos:start="221:11" pos:end="221:28"><name pos:start="221:11" pos:end="221:14">info</name><operator pos:start="221:15" pos:end="221:16">-&gt;</operator><name pos:start="221:17" pos:end="221:28">fprintf_func</name></name> <operator pos:start="221:30" pos:end="221:30">=</operator> <name pos:start="221:32" pos:end="221:43">save_printer</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="223:11" pos:end="223:56"><expr pos:start="223:11" pos:end="223:55"><name pos:start="223:11" pos:end="223:34"><name pos:start="223:11" pos:end="223:14">info</name><operator pos:start="223:15" pos:end="223:16">-&gt;</operator><name pos:start="223:17" pos:end="223:34">print_address_func</name></name> <operator pos:start="223:36" pos:end="223:36">=</operator> <name pos:start="223:38" pos:end="223:55">save_print_address</name></expr>;</expr_stmt>

	  <return pos:start="225:11" pos:end="225:19">return <expr pos:start="225:18" pos:end="225:18"><literal type="number" pos:start="225:18" pos:end="225:18">2</literal></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



  <expr_stmt pos:start="233:3" pos:end="233:13"><expr pos:start="233:3" pos:end="233:12"><name pos:start="233:3" pos:end="233:3">p</name> <operator pos:start="233:5" pos:end="233:5">=</operator> <name pos:start="233:7" pos:end="233:12">save_p</name></expr>;</expr_stmt>

  <expr_stmt pos:start="235:3" pos:end="235:36"><expr pos:start="235:3" pos:end="235:35"><name pos:start="235:3" pos:end="235:20"><name pos:start="235:3" pos:end="235:6">info</name><operator pos:start="235:7" pos:end="235:8">-&gt;</operator><name pos:start="235:9" pos:end="235:20">fprintf_func</name></name> <operator pos:start="235:22" pos:end="235:22">=</operator> <name pos:start="235:24" pos:end="235:35">save_printer</name></expr>;</expr_stmt>

  <expr_stmt pos:start="237:3" pos:end="237:48"><expr pos:start="237:3" pos:end="237:47"><name pos:start="237:3" pos:end="237:26"><name pos:start="237:3" pos:end="237:6">info</name><operator pos:start="237:7" pos:end="237:8">-&gt;</operator><name pos:start="237:9" pos:end="237:26">print_address_func</name></name> <operator pos:start="237:28" pos:end="237:28">=</operator> <name pos:start="237:30" pos:end="237:47">save_print_address</name></expr>;</expr_stmt>



  <expr_stmt pos:start="241:3" pos:end="241:17"><expr pos:start="241:3" pos:end="241:16"><name pos:start="241:3" pos:end="241:3">d</name> <operator pos:start="241:5" pos:end="241:5">=</operator> <name pos:start="241:7" pos:end="241:16"><name pos:start="241:7" pos:end="241:10">best</name><operator pos:start="241:11" pos:end="241:12">-&gt;</operator><name pos:start="241:13" pos:end="241:16">args</name></name></expr>;</expr_stmt>



  <expr_stmt pos:start="245:3" pos:end="245:54"><expr pos:start="245:3" pos:end="245:53"><call pos:start="245:3" pos:end="245:53"><name pos:start="245:3" pos:end="245:20"><name pos:start="245:3" pos:end="245:6">info</name><operator pos:start="245:7" pos:end="245:8">-&gt;</operator><name pos:start="245:9" pos:end="245:20">fprintf_func</name></name> <argument_list pos:start="245:22" pos:end="245:53">(<argument pos:start="245:23" pos:end="245:34"><expr pos:start="245:23" pos:end="245:34"><name pos:start="245:23" pos:end="245:34"><name pos:start="245:23" pos:end="245:26">info</name><operator pos:start="245:27" pos:end="245:28">-&gt;</operator><name pos:start="245:29" pos:end="245:34">stream</name></name></expr></argument>, <argument pos:start="245:37" pos:end="245:40"><expr pos:start="245:37" pos:end="245:40"><literal type="string" pos:start="245:37" pos:end="245:40">"%s"</literal></expr></argument>, <argument pos:start="245:43" pos:end="245:52"><expr pos:start="245:43" pos:end="245:52"><name pos:start="245:43" pos:end="245:52"><name pos:start="245:43" pos:end="245:46">best</name><operator pos:start="245:47" pos:end="245:48">-&gt;</operator><name pos:start="245:49" pos:end="245:52">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <if_stmt pos:start="249:3" pos:end="251:43"><if pos:start="249:3" pos:end="251:43">if <condition pos:start="249:6" pos:end="249:9">(<expr pos:start="249:7" pos:end="249:8"><operator pos:start="249:7" pos:end="249:7">*</operator><name pos:start="249:8" pos:end="249:8">d</name></expr>)</condition><block type="pseudo" pos:start="251:5" pos:end="251:43"><block_content pos:start="251:5" pos:end="251:43">

    <expr_stmt pos:start="251:5" pos:end="251:43"><expr pos:start="251:5" pos:end="251:42"><call pos:start="251:5" pos:end="251:42"><name pos:start="251:5" pos:end="251:22"><name pos:start="251:5" pos:end="251:8">info</name><operator pos:start="251:9" pos:end="251:10">-&gt;</operator><name pos:start="251:11" pos:end="251:22">fprintf_func</name></name> <argument_list pos:start="251:24" pos:end="251:42">(<argument pos:start="251:25" pos:end="251:36"><expr pos:start="251:25" pos:end="251:36"><name pos:start="251:25" pos:end="251:36"><name pos:start="251:25" pos:end="251:28">info</name><operator pos:start="251:29" pos:end="251:30">-&gt;</operator><name pos:start="251:31" pos:end="251:36">stream</name></name></expr></argument>, <argument pos:start="251:39" pos:end="251:41"><expr pos:start="251:39" pos:end="251:41"><literal type="string" pos:start="251:39" pos:end="251:41">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



  <while pos:start="255:3" pos:end="269:5">while <condition pos:start="255:9" pos:end="255:12">(<expr pos:start="255:10" pos:end="255:11"><operator pos:start="255:10" pos:end="255:10">*</operator><name pos:start="255:11" pos:end="255:11">d</name></expr>)</condition>

    <block pos:start="257:5" pos:end="269:5">{<block_content pos:start="259:7" pos:end="267:47">

      <expr_stmt pos:start="259:7" pos:end="259:71"><expr pos:start="259:7" pos:end="259:70"><name pos:start="259:7" pos:end="259:7">p</name> <operator pos:start="259:9" pos:end="259:10">+=</operator> <call pos:start="259:12" pos:end="259:70"><name pos:start="259:12" pos:end="259:25">print_insn_arg</name> <argument_list pos:start="259:27" pos:end="259:70">(<argument pos:start="259:28" pos:end="259:28"><expr pos:start="259:28" pos:end="259:28"><name pos:start="259:28" pos:end="259:28">d</name></expr></argument>, <argument pos:start="259:31" pos:end="259:36"><expr pos:start="259:31" pos:end="259:36"><name pos:start="259:31" pos:end="259:36">buffer</name></expr></argument>, <argument pos:start="259:39" pos:end="259:39"><expr pos:start="259:39" pos:end="259:39"><name pos:start="259:39" pos:end="259:39">p</name></expr></argument>, <argument pos:start="259:42" pos:end="259:63"><expr pos:start="259:42" pos:end="259:63"><name pos:start="259:42" pos:end="259:48">memaddr</name> <operator pos:start="259:50" pos:end="259:50">+</operator> <operator pos:start="259:52" pos:end="259:52">(</operator><name pos:start="259:53" pos:end="259:53">p</name> <operator pos:start="259:55" pos:end="259:55">-</operator> <name pos:start="259:57" pos:end="259:62">buffer</name><operator pos:start="259:63" pos:end="259:63">)</operator></expr></argument>, <argument pos:start="259:66" pos:end="259:69"><expr pos:start="259:66" pos:end="259:69"><name pos:start="259:66" pos:end="259:69">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="261:7" pos:end="261:13"><expr pos:start="261:7" pos:end="261:12"><name pos:start="261:7" pos:end="261:7">d</name> <operator pos:start="261:9" pos:end="261:10">+=</operator> <literal type="number" pos:start="261:12" pos:end="261:12">2</literal></expr>;</expr_stmt>



      <if_stmt pos:start="265:7" pos:end="267:47"><if pos:start="265:7" pos:end="267:47">if <condition pos:start="265:10" pos:end="265:45">(<expr pos:start="265:11" pos:end="265:44"><operator pos:start="265:11" pos:end="265:11">*</operator><name pos:start="265:12" pos:end="265:12">d</name> <operator pos:start="265:14" pos:end="265:15">&amp;&amp;</operator> <operator pos:start="265:17" pos:end="265:17">*</operator><operator pos:start="265:18" pos:end="265:18">(</operator><name pos:start="265:19" pos:end="265:19">d</name> <operator pos:start="265:21" pos:end="265:21">-</operator> <literal type="number" pos:start="265:23" pos:end="265:23">2</literal><operator pos:start="265:24" pos:end="265:24">)</operator> <operator pos:start="265:26" pos:end="265:27">!=</operator> <literal type="char" pos:start="265:29" pos:end="265:31">'I'</literal> <operator pos:start="265:33" pos:end="265:34">&amp;&amp;</operator> <operator pos:start="265:36" pos:end="265:36">*</operator><name pos:start="265:37" pos:end="265:37">d</name> <operator pos:start="265:39" pos:end="265:40">!=</operator> <literal type="char" pos:start="265:42" pos:end="265:44">'k'</literal></expr>)</condition><block type="pseudo" pos:start="267:9" pos:end="267:47"><block_content pos:start="267:9" pos:end="267:47">

	<expr_stmt pos:start="267:9" pos:end="267:47"><expr pos:start="267:9" pos:end="267:46"><call pos:start="267:9" pos:end="267:46"><name pos:start="267:9" pos:end="267:26"><name pos:start="267:9" pos:end="267:12">info</name><operator pos:start="267:13" pos:end="267:14">-&gt;</operator><name pos:start="267:15" pos:end="267:26">fprintf_func</name></name> <argument_list pos:start="267:28" pos:end="267:46">(<argument pos:start="267:29" pos:end="267:40"><expr pos:start="267:29" pos:end="267:40"><name pos:start="267:29" pos:end="267:40"><name pos:start="267:29" pos:end="267:32">info</name><operator pos:start="267:33" pos:end="267:34">-&gt;</operator><name pos:start="267:35" pos:end="267:40">stream</name></name></expr></argument>, <argument pos:start="267:43" pos:end="267:45"><expr pos:start="267:43" pos:end="267:45"><literal type="string" pos:start="267:43" pos:end="267:45">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>



  <return pos:start="273:3" pos:end="273:20">return <expr pos:start="273:10" pos:end="273:19"><name pos:start="273:10" pos:end="273:10">p</name> <operator pos:start="273:12" pos:end="273:12">-</operator> <name pos:start="273:14" pos:end="273:19">buffer</name></expr>;</return>

</block_content>}</block>
</unit>
