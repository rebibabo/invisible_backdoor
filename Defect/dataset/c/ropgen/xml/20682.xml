<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20682.c" pos:tabs="8"><function pos:start="1:1" pos:end="355:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">alac_decode_frame</name><parameter_list pos:start="1:29" pos:end="5:45">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">outbuffer</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:61"><decl pos:start="3:47" pos:end="3:61"><type pos:start="3:47" pos:end="3:61"><name pos:start="3:47" pos:end="3:49">int</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:61">outputsize</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:44"><decl pos:start="5:30" pos:end="5:44"><type pos:start="5:30" pos:end="5:44"><name pos:start="5:30" pos:end="5:37">AVPacket</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="355:1">{<block_content pos:start="9:5" pos:end="353:29">

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:27">inbuffer</name> <init pos:start="9:29" pos:end="9:41">= <expr pos:start="9:31" pos:end="9:41"><name pos:start="9:31" pos:end="9:41"><name pos:start="9:31" pos:end="9:35">avpkt</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:41">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:25">input_buffer_size</name> <init pos:start="11:27" pos:end="11:39">= <expr pos:start="11:29" pos:end="11:39"><name pos:start="11:29" pos:end="11:39"><name pos:start="11:29" pos:end="11:33">avpkt</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:39">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">ALACContext</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:21">alac</name> <init pos:start="13:23" pos:end="13:40">= <expr pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:29">avctx</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:40">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">channels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:30">outputsamples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">hassize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:32"><decl pos:start="23:5" pos:end="23:31"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:16">int</name></type> <name pos:start="23:18" pos:end="23:31">readsamplesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:23">isnotcompressed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:30"><decl pos:start="27:5" pos:end="27:29"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">uint8_t</name></type> <name pos:start="27:13" pos:end="27:29">interlacing_shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:35"><decl pos:start="29:5" pos:end="29:34"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:11">uint8_t</name></type> <name pos:start="29:13" pos:end="29:34">interlacing_leftweight</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:14"><decl pos:start="31:5" pos:end="31:9"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:9">i</name></decl>, <decl pos:start="31:12" pos:end="31:13"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:12" pos:end="31:13">ch</name></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:36">/* short-circuit null buffers */</comment>

    <if_stmt pos:start="37:5" pos:end="39:18"><if pos:start="37:5" pos:end="39:18">if <condition pos:start="37:8" pos:end="37:40">(<expr pos:start="37:9" pos:end="37:39"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:17">inbuffer</name> <operator pos:start="37:19" pos:end="37:20">||</operator> <operator pos:start="37:22" pos:end="37:22">!</operator><name pos:start="37:23" pos:end="37:39">input_buffer_size</name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:18"><block_content pos:start="39:9" pos:end="39:18">

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:62"><expr pos:start="43:5" pos:end="43:61"><call pos:start="43:5" pos:end="43:61"><name pos:start="43:5" pos:end="43:17">init_get_bits</name><argument_list pos:start="43:18" pos:end="43:61">(<argument pos:start="43:19" pos:end="43:27"><expr pos:start="43:19" pos:end="43:27"><operator pos:start="43:19" pos:end="43:19">&amp;</operator><name pos:start="43:20" pos:end="43:27"><name pos:start="43:20" pos:end="43:23">alac</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:27">gb</name></name></expr></argument>, <argument pos:start="43:30" pos:end="43:37"><expr pos:start="43:30" pos:end="43:37"><name pos:start="43:30" pos:end="43:37">inbuffer</name></expr></argument>, <argument pos:start="43:40" pos:end="43:60"><expr pos:start="43:40" pos:end="43:60"><name pos:start="43:40" pos:end="43:56">input_buffer_size</name> <operator pos:start="43:58" pos:end="43:58">*</operator> <literal type="number" pos:start="43:60" pos:end="43:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:42"><expr pos:start="47:5" pos:end="47:41"><name pos:start="47:5" pos:end="47:12">channels</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:37"><name pos:start="47:16" pos:end="47:23">get_bits</name><argument_list pos:start="47:24" pos:end="47:37">(<argument pos:start="47:25" pos:end="47:33"><expr pos:start="47:25" pos:end="47:33"><operator pos:start="47:25" pos:end="47:25">&amp;</operator><name pos:start="47:26" pos:end="47:33"><name pos:start="47:26" pos:end="47:29">alac</name><operator pos:start="47:30" pos:end="47:31">-&gt;</operator><name pos:start="47:32" pos:end="47:33">gb</name></name></expr></argument>, <argument pos:start="47:36" pos:end="47:36"><expr pos:start="47:36" pos:end="47:36"><literal type="number" pos:start="47:36" pos:end="47:36">3</literal></expr></argument>)</argument_list></call> <operator pos:start="47:39" pos:end="47:39">+</operator> <literal type="number" pos:start="47:41" pos:end="47:41">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:36">(<expr pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:16">channels</name> <operator pos:start="49:18" pos:end="49:19">!=</operator> <name pos:start="49:21" pos:end="49:35"><name pos:start="49:21" pos:end="49:25">avctx</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:35">channels</name></name></expr>)</condition> <block pos:start="49:38" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:35">

        <expr_stmt pos:start="51:9" pos:end="51:77"><expr pos:start="51:9" pos:end="51:76"><call pos:start="51:9" pos:end="51:76"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:76">(<argument pos:start="51:16" pos:end="51:20"><expr pos:start="51:16" pos:end="51:20"><name pos:start="51:16" pos:end="51:20">avctx</name></expr></argument>, <argument pos:start="51:23" pos:end="51:34"><expr pos:start="51:23" pos:end="51:34"><name pos:start="51:23" pos:end="51:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:37" pos:end="51:75"><expr pos:start="51:37" pos:end="51:75"><literal type="string" pos:start="51:37" pos:end="51:75">"frame header channel count mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:35">return <expr pos:start="53:16" pos:end="53:34"><name pos:start="53:16" pos:end="53:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="63:7">/* 2^result = something to do with output waiting.

     * perhaps matters if we read &gt; 1 frame in a pass?

     */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:28"><expr pos:start="65:5" pos:end="65:27"><call pos:start="65:5" pos:end="65:27"><name pos:start="65:5" pos:end="65:13">skip_bits</name><argument_list pos:start="65:14" pos:end="65:27">(<argument pos:start="65:15" pos:end="65:23"><expr pos:start="65:15" pos:end="65:23"><operator pos:start="65:15" pos:end="65:15">&amp;</operator><name pos:start="65:16" pos:end="65:23"><name pos:start="65:16" pos:end="65:19">alac</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:23">gb</name></name></expr></argument>, <argument pos:start="65:26" pos:end="65:26"><expr pos:start="65:26" pos:end="65:26"><literal type="number" pos:start="65:26" pos:end="65:26">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:29"><expr pos:start="69:5" pos:end="69:28"><call pos:start="69:5" pos:end="69:28"><name pos:start="69:5" pos:end="69:13">skip_bits</name><argument_list pos:start="69:14" pos:end="69:28">(<argument pos:start="69:15" pos:end="69:23"><expr pos:start="69:15" pos:end="69:23"><operator pos:start="69:15" pos:end="69:15">&amp;</operator><name pos:start="69:16" pos:end="69:23"><name pos:start="69:16" pos:end="69:19">alac</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:23">gb</name></name></expr></argument>, <argument pos:start="69:26" pos:end="69:27"><expr pos:start="69:26" pos:end="69:27"><literal type="number" pos:start="69:26" pos:end="69:27">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="69:31" pos:end="69:57">/* unknown, skip 12 bits */</comment>



    <comment type="block" pos:start="73:5" pos:end="73:47">/* the output sample size is stored soon */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:35"><expr pos:start="75:5" pos:end="75:34"><name pos:start="75:5" pos:end="75:11">hassize</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:34"><name pos:start="75:15" pos:end="75:23">get_bits1</name><argument_list pos:start="75:24" pos:end="75:34">(<argument pos:start="75:25" pos:end="75:33"><expr pos:start="75:25" pos:end="75:33"><operator pos:start="75:25" pos:end="75:25">&amp;</operator><name pos:start="75:26" pos:end="75:33"><name pos:start="75:26" pos:end="75:29">alac</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:51"><expr pos:start="79:5" pos:end="79:50"><name pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:8">alac</name><operator pos:start="79:9" pos:end="79:10">-&gt;</operator><name pos:start="79:11" pos:end="79:20">extra_bits</name></name> <operator pos:start="79:22" pos:end="79:22">=</operator> <call pos:start="79:24" pos:end="79:45"><name pos:start="79:24" pos:end="79:31">get_bits</name><argument_list pos:start="79:32" pos:end="79:45">(<argument pos:start="79:33" pos:end="79:41"><expr pos:start="79:33" pos:end="79:41"><operator pos:start="79:33" pos:end="79:33">&amp;</operator><name pos:start="79:34" pos:end="79:41"><name pos:start="79:34" pos:end="79:37">alac</name><operator pos:start="79:38" pos:end="79:39">-&gt;</operator><name pos:start="79:40" pos:end="79:41">gb</name></name></expr></argument>, <argument pos:start="79:44" pos:end="79:44"><expr pos:start="79:44" pos:end="79:44"><literal type="number" pos:start="79:44" pos:end="79:44">2</literal></expr></argument>)</argument_list></call> <operator pos:start="79:47" pos:end="79:48">&lt;&lt;</operator> <literal type="number" pos:start="79:50" pos:end="79:50">3</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:41">/* whether the frame is compressed */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:43"><expr pos:start="85:5" pos:end="85:42"><name pos:start="85:5" pos:end="85:19">isnotcompressed</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <call pos:start="85:23" pos:end="85:42"><name pos:start="85:23" pos:end="85:31">get_bits1</name><argument_list pos:start="85:32" pos:end="85:42">(<argument pos:start="85:33" pos:end="85:41"><expr pos:start="85:33" pos:end="85:41"><operator pos:start="85:33" pos:end="85:33">&amp;</operator><name pos:start="85:34" pos:end="85:41"><name pos:start="85:34" pos:end="85:37">alac</name><operator pos:start="85:38" pos:end="85:39">-&gt;</operator><name pos:start="85:40" pos:end="85:41">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="105:60"><if pos:start="89:5" pos:end="103:5">if <condition pos:start="89:8" pos:end="89:16">(<expr pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:15">hassize</name></expr>)</condition> <block pos:start="89:18" pos:end="103:5">{<block_content pos:start="93:9" pos:end="101:9">

        <comment type="block" pos:start="91:9" pos:end="91:63">/* now read the number of samples as a 32bit integer */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:53"><expr pos:start="93:9" pos:end="93:52"><name pos:start="93:9" pos:end="93:21">outputsamples</name> <operator pos:start="93:23" pos:end="93:23">=</operator> <call pos:start="93:25" pos:end="93:52"><name pos:start="93:25" pos:end="93:37">get_bits_long</name><argument_list pos:start="93:38" pos:end="93:52">(<argument pos:start="93:39" pos:end="93:47"><expr pos:start="93:39" pos:end="93:47"><operator pos:start="93:39" pos:end="93:39">&amp;</operator><name pos:start="93:40" pos:end="93:47"><name pos:start="93:40" pos:end="93:43">alac</name><operator pos:start="93:44" pos:end="93:45">-&gt;</operator><name pos:start="93:46" pos:end="93:47">gb</name></name></expr></argument>, <argument pos:start="93:50" pos:end="93:51"><expr pos:start="93:50" pos:end="93:51"><literal type="number" pos:start="93:50" pos:end="93:51">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if<condition pos:start="95:11" pos:end="95:63">(<expr pos:start="95:12" pos:end="95:62"><name pos:start="95:12" pos:end="95:24">outputsamples</name> <operator pos:start="95:26" pos:end="95:26">&gt;</operator> <name pos:start="95:28" pos:end="95:62"><name pos:start="95:28" pos:end="95:31">alac</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:62">setinfo_max_samples_per_frame</name></name></expr>)</condition><block pos:start="95:64" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:22">

            <expr_stmt pos:start="97:13" pos:end="97:119"><expr pos:start="97:13" pos:end="97:118"><call pos:start="97:13" pos:end="97:118"><name pos:start="97:13" pos:end="97:18">av_log</name><argument_list pos:start="97:19" pos:end="97:118">(<argument pos:start="97:20" pos:end="97:24"><expr pos:start="97:20" pos:end="97:24"><name pos:start="97:20" pos:end="97:24">avctx</name></expr></argument>, <argument pos:start="97:27" pos:end="97:38"><expr pos:start="97:27" pos:end="97:38"><name pos:start="97:27" pos:end="97:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:41" pos:end="97:65"><expr pos:start="97:41" pos:end="97:65"><literal type="string" pos:start="97:41" pos:end="97:65">"outputsamples %d &gt; %d\n"</literal></expr></argument>, <argument pos:start="97:68" pos:end="97:80"><expr pos:start="97:68" pos:end="97:80"><name pos:start="97:68" pos:end="97:80">outputsamples</name></expr></argument>, <argument pos:start="97:83" pos:end="97:117"><expr pos:start="97:83" pos:end="97:117"><name pos:start="97:83" pos:end="97:117"><name pos:start="97:83" pos:end="97:86">alac</name><operator pos:start="97:87" pos:end="97:88">-&gt;</operator><name pos:start="97:89" pos:end="97:117">setinfo_max_samples_per_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:22">return <expr pos:start="99:20" pos:end="99:21"><operator pos:start="99:20" pos:end="99:20">-</operator><literal type="number" pos:start="99:21" pos:end="99:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="103:7" pos:end="105:60">else<block type="pseudo" pos:start="105:9" pos:end="105:60"><block_content pos:start="105:9" pos:end="105:60">

        <expr_stmt pos:start="105:9" pos:end="105:60"><expr pos:start="105:9" pos:end="105:59"><name pos:start="105:9" pos:end="105:21">outputsamples</name> <operator pos:start="105:23" pos:end="105:23">=</operator> <name pos:start="105:25" pos:end="105:59"><name pos:start="105:25" pos:end="105:28">alac</name><operator pos:start="105:29" pos:end="105:30">-&gt;</operator><name pos:start="105:31" pos:end="105:59">setinfo_max_samples_per_frame</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:81"><expr pos:start="109:5" pos:end="109:80"><name pos:start="109:5" pos:end="109:24"><name pos:start="109:5" pos:end="109:8">alac</name><operator pos:start="109:9" pos:end="109:10">-&gt;</operator><name pos:start="109:11" pos:end="109:24">bytespersample</name></name> <operator pos:start="109:26" pos:end="109:26">=</operator> <name pos:start="109:28" pos:end="109:35">channels</name> <operator pos:start="109:37" pos:end="109:37">*</operator> <call pos:start="109:39" pos:end="109:80"><name pos:start="109:39" pos:end="109:61">av_get_bytes_per_sample</name><argument_list pos:start="109:62" pos:end="109:80">(<argument pos:start="109:63" pos:end="109:79"><expr pos:start="109:63" pos:end="109:79"><name pos:start="109:63" pos:end="109:79"><name pos:start="109:63" pos:end="109:67">avctx</name><operator pos:start="109:68" pos:end="109:69">-&gt;</operator><name pos:start="109:70" pos:end="109:79">sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if<condition pos:start="113:7" pos:end="113:58">(<expr pos:start="113:8" pos:end="113:57"><name pos:start="113:8" pos:end="113:20">outputsamples</name> <operator pos:start="113:22" pos:end="113:22">&gt;</operator> <operator pos:start="113:24" pos:end="113:24">*</operator><name pos:start="113:25" pos:end="113:34">outputsize</name> <operator pos:start="113:36" pos:end="113:36">/</operator> <name pos:start="113:38" pos:end="113:57"><name pos:start="113:38" pos:end="113:41">alac</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:57">bytespersample</name></name></expr>)</condition><block pos:start="113:59" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:18">

        <expr_stmt pos:start="115:9" pos:end="115:65"><expr pos:start="115:9" pos:end="115:64"><call pos:start="115:9" pos:end="115:64"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="115:64">(<argument pos:start="115:16" pos:end="115:20"><expr pos:start="115:16" pos:end="115:20"><name pos:start="115:16" pos:end="115:20">avctx</name></expr></argument>, <argument pos:start="115:23" pos:end="115:34"><expr pos:start="115:23" pos:end="115:34"><name pos:start="115:23" pos:end="115:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:37" pos:end="115:63"><expr pos:start="115:37" pos:end="115:63"><literal type="string" pos:start="115:37" pos:end="115:63">"sample buffer too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:18">return <expr pos:start="117:16" pos:end="117:17"><operator pos:start="117:16" pos:end="117:16">-</operator><literal type="number" pos:start="117:17" pos:end="117:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:55"><expr pos:start="123:5" pos:end="123:54"><operator pos:start="123:5" pos:end="123:5">*</operator><name pos:start="123:6" pos:end="123:15">outputsize</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <name pos:start="123:19" pos:end="123:31">outputsamples</name> <operator pos:start="123:33" pos:end="123:33">*</operator> <name pos:start="123:35" pos:end="123:54"><name pos:start="123:35" pos:end="123:38">alac</name><operator pos:start="123:39" pos:end="123:40">-&gt;</operator><name pos:start="123:41" pos:end="123:54">bytespersample</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:81"><expr pos:start="125:5" pos:end="125:80"><name pos:start="125:5" pos:end="125:18">readsamplesize</name> <operator pos:start="125:20" pos:end="125:20">=</operator> <name pos:start="125:22" pos:end="125:46"><name pos:start="125:22" pos:end="125:25">alac</name><operator pos:start="125:26" pos:end="125:27">-&gt;</operator><name pos:start="125:28" pos:end="125:46">setinfo_sample_size</name></name> <operator pos:start="125:48" pos:end="125:48">-</operator> <name pos:start="125:50" pos:end="125:65"><name pos:start="125:50" pos:end="125:53">alac</name><operator pos:start="125:54" pos:end="125:55">-&gt;</operator><name pos:start="125:56" pos:end="125:65">extra_bits</name></name> <operator pos:start="125:67" pos:end="125:67">+</operator> <name pos:start="125:69" pos:end="125:76">channels</name> <operator pos:start="125:78" pos:end="125:78">-</operator> <literal type="number" pos:start="125:80" pos:end="125:80">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:40">(<expr pos:start="127:9" pos:end="127:39"><name pos:start="127:9" pos:end="127:22">readsamplesize</name> <operator pos:start="127:24" pos:end="127:24">&gt;</operator> <name pos:start="127:26" pos:end="127:39">MIN_CACHE_BITS</name></expr>)</condition> <block pos:start="127:42" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:18">

        <expr_stmt pos:start="129:9" pos:end="129:85"><expr pos:start="129:9" pos:end="129:84"><call pos:start="129:9" pos:end="129:84"><name pos:start="129:9" pos:end="129:14">av_log</name><argument_list pos:start="129:15" pos:end="129:84">(<argument pos:start="129:16" pos:end="129:20"><expr pos:start="129:16" pos:end="129:20"><name pos:start="129:16" pos:end="129:20">avctx</name></expr></argument>, <argument pos:start="129:23" pos:end="129:34"><expr pos:start="129:23" pos:end="129:34"><name pos:start="129:23" pos:end="129:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:37" pos:end="129:67"><expr pos:start="129:37" pos:end="129:67"><literal type="string" pos:start="129:37" pos:end="129:67">"readsamplesize too big (%d)\n"</literal></expr></argument>, <argument pos:start="129:70" pos:end="129:83"><expr pos:start="129:70" pos:end="129:83"><name pos:start="129:70" pos:end="129:83">readsamplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:18">return <expr pos:start="131:16" pos:end="131:17"><operator pos:start="131:16" pos:end="131:16">-</operator><literal type="number" pos:start="131:17" pos:end="131:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="275:5"><if pos:start="137:5" pos:end="253:5">if <condition pos:start="137:8" pos:end="137:25">(<expr pos:start="137:9" pos:end="137:24"><operator pos:start="137:9" pos:end="137:9">!</operator><name pos:start="137:10" pos:end="137:24">isnotcompressed</name></expr>)</condition> <block pos:start="137:27" pos:end="253:5">{<block_content pos:start="141:9" pos:end="251:9">

        <comment type="block" pos:start="139:9" pos:end="139:33">/* so it is compressed */</comment>

        <decl_stmt pos:start="141:9" pos:end="141:55"><decl pos:start="141:9" pos:end="141:54"><type pos:start="141:9" pos:end="141:15"><name pos:start="141:9" pos:end="141:15">int16_t</name></type> <name pos:start="141:17" pos:end="141:54"><name pos:start="141:17" pos:end="141:36">predictor_coef_table</name><index pos:start="141:37" pos:end="141:50">[<expr pos:start="141:38" pos:end="141:49"><name pos:start="141:38" pos:end="141:49">MAX_CHANNELS</name></expr>]</index><index pos:start="141:51" pos:end="141:54">[<expr pos:start="141:52" pos:end="141:53"><literal type="number" pos:start="141:52" pos:end="141:53">32</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="143:9" pos:end="143:45"><decl pos:start="143:9" pos:end="143:44"><type pos:start="143:9" pos:end="143:11"><name pos:start="143:9" pos:end="143:11">int</name></type> <name pos:start="143:13" pos:end="143:44"><name pos:start="143:13" pos:end="143:30">predictor_coef_num</name><index pos:start="143:31" pos:end="143:44">[<expr pos:start="143:32" pos:end="143:43"><name pos:start="143:32" pos:end="143:43">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="145:9" pos:end="145:42"><decl pos:start="145:9" pos:end="145:41"><type pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:11">int</name></type> <name pos:start="145:13" pos:end="145:41"><name pos:start="145:13" pos:end="145:27">prediction_type</name><index pos:start="145:28" pos:end="145:41">[<expr pos:start="145:29" pos:end="145:40"><name pos:start="145:29" pos:end="145:40">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="147:52"><decl pos:start="147:9" pos:end="147:51"><type pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:11">int</name></type> <name pos:start="147:13" pos:end="147:51"><name pos:start="147:13" pos:end="147:37">prediction_quantitization</name><index pos:start="147:38" pos:end="147:51">[<expr pos:start="147:39" pos:end="147:50"><name pos:start="147:39" pos:end="147:50">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="149:9" pos:end="149:39"><decl pos:start="149:9" pos:end="149:38"><type pos:start="149:9" pos:end="149:11"><name pos:start="149:9" pos:end="149:11">int</name></type> <name pos:start="149:13" pos:end="149:38"><name pos:start="149:13" pos:end="149:24">ricemodifier</name><index pos:start="149:25" pos:end="149:38">[<expr pos:start="149:26" pos:end="149:37"><name pos:start="149:26" pos:end="149:37">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:51"><expr pos:start="153:9" pos:end="153:50"><name pos:start="153:9" pos:end="153:25">interlacing_shift</name> <operator pos:start="153:27" pos:end="153:27">=</operator> <call pos:start="153:29" pos:end="153:50"><name pos:start="153:29" pos:end="153:36">get_bits</name><argument_list pos:start="153:37" pos:end="153:50">(<argument pos:start="153:38" pos:end="153:46"><expr pos:start="153:38" pos:end="153:46"><operator pos:start="153:38" pos:end="153:38">&amp;</operator><name pos:start="153:39" pos:end="153:46"><name pos:start="153:39" pos:end="153:42">alac</name><operator pos:start="153:43" pos:end="153:44">-&gt;</operator><name pos:start="153:45" pos:end="153:46">gb</name></name></expr></argument>, <argument pos:start="153:49" pos:end="153:49"><expr pos:start="153:49" pos:end="153:49"><literal type="number" pos:start="153:49" pos:end="153:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:56"><expr pos:start="155:9" pos:end="155:55"><name pos:start="155:9" pos:end="155:30">interlacing_leftweight</name> <operator pos:start="155:32" pos:end="155:32">=</operator> <call pos:start="155:34" pos:end="155:55"><name pos:start="155:34" pos:end="155:41">get_bits</name><argument_list pos:start="155:42" pos:end="155:55">(<argument pos:start="155:43" pos:end="155:51"><expr pos:start="155:43" pos:end="155:51"><operator pos:start="155:43" pos:end="155:43">&amp;</operator><name pos:start="155:44" pos:end="155:51"><name pos:start="155:44" pos:end="155:47">alac</name><operator pos:start="155:48" pos:end="155:49">-&gt;</operator><name pos:start="155:50" pos:end="155:51">gb</name></name></expr></argument>, <argument pos:start="155:54" pos:end="155:54"><expr pos:start="155:54" pos:end="155:54"><literal type="number" pos:start="155:54" pos:end="155:54">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="159:9" pos:end="179:9">for <control pos:start="159:13" pos:end="159:41">(<init pos:start="159:14" pos:end="159:20"><expr pos:start="159:14" pos:end="159:19"><name pos:start="159:14" pos:end="159:15">ch</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <literal type="number" pos:start="159:19" pos:end="159:19">0</literal></expr>;</init> <condition pos:start="159:22" pos:end="159:35"><expr pos:start="159:22" pos:end="159:34"><name pos:start="159:22" pos:end="159:23">ch</name> <operator pos:start="159:25" pos:end="159:25">&lt;</operator> <name pos:start="159:27" pos:end="159:34">channels</name></expr>;</condition> <incr pos:start="159:37" pos:end="159:40"><expr pos:start="159:37" pos:end="159:40"><name pos:start="159:37" pos:end="159:38">ch</name><operator pos:start="159:39" pos:end="159:40">++</operator></expr></incr>)</control> <block pos:start="159:43" pos:end="179:9">{<block_content pos:start="161:13" pos:end="177:79">

            <expr_stmt pos:start="161:13" pos:end="161:57"><expr pos:start="161:13" pos:end="161:56"><name pos:start="161:13" pos:end="161:31"><name pos:start="161:13" pos:end="161:27">prediction_type</name><index pos:start="161:28" pos:end="161:31">[<expr pos:start="161:29" pos:end="161:30"><name pos:start="161:29" pos:end="161:30">ch</name></expr>]</index></name> <operator pos:start="161:33" pos:end="161:33">=</operator> <call pos:start="161:35" pos:end="161:56"><name pos:start="161:35" pos:end="161:42">get_bits</name><argument_list pos:start="161:43" pos:end="161:56">(<argument pos:start="161:44" pos:end="161:52"><expr pos:start="161:44" pos:end="161:52"><operator pos:start="161:44" pos:end="161:44">&amp;</operator><name pos:start="161:45" pos:end="161:52"><name pos:start="161:45" pos:end="161:48">alac</name><operator pos:start="161:49" pos:end="161:50">-&gt;</operator><name pos:start="161:51" pos:end="161:52">gb</name></name></expr></argument>, <argument pos:start="161:55" pos:end="161:55"><expr pos:start="161:55" pos:end="161:55"><literal type="number" pos:start="161:55" pos:end="161:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:67"><expr pos:start="163:13" pos:end="163:66"><name pos:start="163:13" pos:end="163:41"><name pos:start="163:13" pos:end="163:37">prediction_quantitization</name><index pos:start="163:38" pos:end="163:41">[<expr pos:start="163:39" pos:end="163:40"><name pos:start="163:39" pos:end="163:40">ch</name></expr>]</index></name> <operator pos:start="163:43" pos:end="163:43">=</operator> <call pos:start="163:45" pos:end="163:66"><name pos:start="163:45" pos:end="163:52">get_bits</name><argument_list pos:start="163:53" pos:end="163:66">(<argument pos:start="163:54" pos:end="163:62"><expr pos:start="163:54" pos:end="163:62"><operator pos:start="163:54" pos:end="163:54">&amp;</operator><name pos:start="163:55" pos:end="163:62"><name pos:start="163:55" pos:end="163:58">alac</name><operator pos:start="163:59" pos:end="163:60">-&gt;</operator><name pos:start="163:61" pos:end="163:62">gb</name></name></expr></argument>, <argument pos:start="163:65" pos:end="163:65"><expr pos:start="163:65" pos:end="163:65"><literal type="number" pos:start="163:65" pos:end="163:65">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="167:13" pos:end="167:54"><expr pos:start="167:13" pos:end="167:53"><name pos:start="167:13" pos:end="167:28"><name pos:start="167:13" pos:end="167:24">ricemodifier</name><index pos:start="167:25" pos:end="167:28">[<expr pos:start="167:26" pos:end="167:27"><name pos:start="167:26" pos:end="167:27">ch</name></expr>]</index></name> <operator pos:start="167:30" pos:end="167:30">=</operator> <call pos:start="167:32" pos:end="167:53"><name pos:start="167:32" pos:end="167:39">get_bits</name><argument_list pos:start="167:40" pos:end="167:53">(<argument pos:start="167:41" pos:end="167:49"><expr pos:start="167:41" pos:end="167:49"><operator pos:start="167:41" pos:end="167:41">&amp;</operator><name pos:start="167:42" pos:end="167:49"><name pos:start="167:42" pos:end="167:45">alac</name><operator pos:start="167:46" pos:end="167:47">-&gt;</operator><name pos:start="167:48" pos:end="167:49">gb</name></name></expr></argument>, <argument pos:start="167:52" pos:end="167:52"><expr pos:start="167:52" pos:end="167:52"><literal type="number" pos:start="167:52" pos:end="167:52">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:60"><expr pos:start="169:13" pos:end="169:59"><name pos:start="169:13" pos:end="169:34"><name pos:start="169:13" pos:end="169:30">predictor_coef_num</name><index pos:start="169:31" pos:end="169:34">[<expr pos:start="169:32" pos:end="169:33"><name pos:start="169:32" pos:end="169:33">ch</name></expr>]</index></name> <operator pos:start="169:36" pos:end="169:36">=</operator> <call pos:start="169:38" pos:end="169:59"><name pos:start="169:38" pos:end="169:45">get_bits</name><argument_list pos:start="169:46" pos:end="169:59">(<argument pos:start="169:47" pos:end="169:55"><expr pos:start="169:47" pos:end="169:55"><operator pos:start="169:47" pos:end="169:47">&amp;</operator><name pos:start="169:48" pos:end="169:55"><name pos:start="169:48" pos:end="169:51">alac</name><operator pos:start="169:52" pos:end="169:53">-&gt;</operator><name pos:start="169:54" pos:end="169:55">gb</name></name></expr></argument>, <argument pos:start="169:58" pos:end="169:58"><expr pos:start="169:58" pos:end="169:58"><literal type="number" pos:start="169:58" pos:end="169:58">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="173:13" pos:end="173:42">/* read the predictor table */</comment>

            <for pos:start="175:13" pos:end="177:79">for <control pos:start="175:17" pos:end="175:56">(<init pos:start="175:18" pos:end="175:23"><expr pos:start="175:18" pos:end="175:22"><name pos:start="175:18" pos:end="175:18">i</name> <operator pos:start="175:20" pos:end="175:20">=</operator> <literal type="number" pos:start="175:22" pos:end="175:22">0</literal></expr>;</init> <condition pos:start="175:25" pos:end="175:51"><expr pos:start="175:25" pos:end="175:50"><name pos:start="175:25" pos:end="175:25">i</name> <operator pos:start="175:27" pos:end="175:27">&lt;</operator> <name pos:start="175:29" pos:end="175:50"><name pos:start="175:29" pos:end="175:46">predictor_coef_num</name><index pos:start="175:47" pos:end="175:50">[<expr pos:start="175:48" pos:end="175:49"><name pos:start="175:48" pos:end="175:49">ch</name></expr>]</index></name></expr>;</condition> <incr pos:start="175:53" pos:end="175:55"><expr pos:start="175:53" pos:end="175:55"><name pos:start="175:53" pos:end="175:53">i</name><operator pos:start="175:54" pos:end="175:55">++</operator></expr></incr>)</control><block type="pseudo" pos:start="177:17" pos:end="177:79"><block_content pos:start="177:17" pos:end="177:79">

                <expr_stmt pos:start="177:17" pos:end="177:79"><expr pos:start="177:17" pos:end="177:78"><name pos:start="177:17" pos:end="177:43"><name pos:start="177:17" pos:end="177:36">predictor_coef_table</name><index pos:start="177:37" pos:end="177:40">[<expr pos:start="177:38" pos:end="177:39"><name pos:start="177:38" pos:end="177:39">ch</name></expr>]</index><index pos:start="177:41" pos:end="177:43">[<expr pos:start="177:42" pos:end="177:42"><name pos:start="177:42" pos:end="177:42">i</name></expr>]</index></name> <operator pos:start="177:45" pos:end="177:45">=</operator> <operator pos:start="177:47" pos:end="177:47">(</operator><name pos:start="177:48" pos:end="177:54">int16_t</name><operator pos:start="177:55" pos:end="177:55">)</operator><call pos:start="177:56" pos:end="177:78"><name pos:start="177:56" pos:end="177:63">get_bits</name><argument_list pos:start="177:64" pos:end="177:78">(<argument pos:start="177:65" pos:end="177:73"><expr pos:start="177:65" pos:end="177:73"><operator pos:start="177:65" pos:end="177:65">&amp;</operator><name pos:start="177:66" pos:end="177:73"><name pos:start="177:66" pos:end="177:69">alac</name><operator pos:start="177:70" pos:end="177:71">-&gt;</operator><name pos:start="177:72" pos:end="177:73">gb</name></name></expr></argument>, <argument pos:start="177:76" pos:end="177:77"><expr pos:start="177:76" pos:end="177:77"><literal type="number" pos:start="177:76" pos:end="177:77">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="183:9" pos:end="193:9"><if pos:start="183:9" pos:end="193:9">if <condition pos:start="183:12" pos:end="183:29">(<expr pos:start="183:13" pos:end="183:28"><name pos:start="183:13" pos:end="183:28"><name pos:start="183:13" pos:end="183:16">alac</name><operator pos:start="183:17" pos:end="183:18">-&gt;</operator><name pos:start="183:19" pos:end="183:28">extra_bits</name></name></expr>)</condition> <block pos:start="183:31" pos:end="193:9">{<block_content pos:start="185:13" pos:end="191:13">

            <for pos:start="185:13" pos:end="191:13">for <control pos:start="185:17" pos:end="185:47">(<init pos:start="185:18" pos:end="185:23"><expr pos:start="185:18" pos:end="185:22"><name pos:start="185:18" pos:end="185:18">i</name> <operator pos:start="185:20" pos:end="185:20">=</operator> <literal type="number" pos:start="185:22" pos:end="185:22">0</literal></expr>;</init> <condition pos:start="185:25" pos:end="185:42"><expr pos:start="185:25" pos:end="185:41"><name pos:start="185:25" pos:end="185:25">i</name> <operator pos:start="185:27" pos:end="185:27">&lt;</operator> <name pos:start="185:29" pos:end="185:41">outputsamples</name></expr>;</condition> <incr pos:start="185:44" pos:end="185:46"><expr pos:start="185:44" pos:end="185:46"><name pos:start="185:44" pos:end="185:44">i</name><operator pos:start="185:45" pos:end="185:46">++</operator></expr></incr>)</control> <block pos:start="185:49" pos:end="191:13">{<block_content pos:start="187:17" pos:end="189:91">

                <for pos:start="187:17" pos:end="189:91">for <control pos:start="187:21" pos:end="187:49">(<init pos:start="187:22" pos:end="187:28"><expr pos:start="187:22" pos:end="187:27"><name pos:start="187:22" pos:end="187:23">ch</name> <operator pos:start="187:25" pos:end="187:25">=</operator> <literal type="number" pos:start="187:27" pos:end="187:27">0</literal></expr>;</init> <condition pos:start="187:30" pos:end="187:43"><expr pos:start="187:30" pos:end="187:42"><name pos:start="187:30" pos:end="187:31">ch</name> <operator pos:start="187:33" pos:end="187:33">&lt;</operator> <name pos:start="187:35" pos:end="187:42">channels</name></expr>;</condition> <incr pos:start="187:45" pos:end="187:48"><expr pos:start="187:45" pos:end="187:48"><name pos:start="187:45" pos:end="187:46">ch</name><operator pos:start="187:47" pos:end="187:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="189:21" pos:end="189:91"><block_content pos:start="189:21" pos:end="189:91">

                    <expr_stmt pos:start="189:21" pos:end="189:91"><expr pos:start="189:21" pos:end="189:90"><name pos:start="189:21" pos:end="189:50"><name pos:start="189:21" pos:end="189:24">alac</name><operator pos:start="189:25" pos:end="189:26">-&gt;</operator><name pos:start="189:27" pos:end="189:43">extra_bits_buffer</name><index pos:start="189:44" pos:end="189:47">[<expr pos:start="189:45" pos:end="189:46"><name pos:start="189:45" pos:end="189:46">ch</name></expr>]</index><index pos:start="189:48" pos:end="189:50">[<expr pos:start="189:49" pos:end="189:49"><name pos:start="189:49" pos:end="189:49">i</name></expr>]</index></name> <operator pos:start="189:52" pos:end="189:52">=</operator> <call pos:start="189:54" pos:end="189:90"><name pos:start="189:54" pos:end="189:61">get_bits</name><argument_list pos:start="189:62" pos:end="189:90">(<argument pos:start="189:63" pos:end="189:71"><expr pos:start="189:63" pos:end="189:71"><operator pos:start="189:63" pos:end="189:63">&amp;</operator><name pos:start="189:64" pos:end="189:71"><name pos:start="189:64" pos:end="189:67">alac</name><operator pos:start="189:68" pos:end="189:69">-&gt;</operator><name pos:start="189:70" pos:end="189:71">gb</name></name></expr></argument>, <argument pos:start="189:74" pos:end="189:89"><expr pos:start="189:74" pos:end="189:89"><name pos:start="189:74" pos:end="189:89"><name pos:start="189:74" pos:end="189:77">alac</name><operator pos:start="189:78" pos:end="189:79">-&gt;</operator><name pos:start="189:80" pos:end="189:89">extra_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <for pos:start="195:9" pos:end="251:9">for <control pos:start="195:13" pos:end="195:41">(<init pos:start="195:14" pos:end="195:20"><expr pos:start="195:14" pos:end="195:19"><name pos:start="195:14" pos:end="195:15">ch</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <literal type="number" pos:start="195:19" pos:end="195:19">0</literal></expr>;</init> <condition pos:start="195:22" pos:end="195:35"><expr pos:start="195:22" pos:end="195:34"><name pos:start="195:22" pos:end="195:23">ch</name> <operator pos:start="195:25" pos:end="195:25">&lt;</operator> <name pos:start="195:27" pos:end="195:34">channels</name></expr>;</condition> <incr pos:start="195:37" pos:end="195:40"><expr pos:start="195:37" pos:end="195:40"><name pos:start="195:37" pos:end="195:38">ch</name><operator pos:start="195:39" pos:end="195:40">++</operator></expr></incr>)</control> <block pos:start="195:43" pos:end="251:9">{<block_content pos:start="197:13" pos:end="249:13">

            <expr_stmt pos:start="197:13" pos:end="211:81"><expr pos:start="197:13" pos:end="211:80"><call pos:start="197:13" pos:end="211:80"><name pos:start="197:13" pos:end="197:39">bastardized_rice_decompress</name><argument_list pos:start="197:40" pos:end="211:80">(<argument pos:start="197:41" pos:end="197:44"><expr pos:start="197:41" pos:end="197:44"><name pos:start="197:41" pos:end="197:44">alac</name></expr></argument>,

                                        <argument pos:start="199:41" pos:end="199:69"><expr pos:start="199:41" pos:end="199:69"><name pos:start="199:41" pos:end="199:69"><name pos:start="199:41" pos:end="199:44">alac</name><operator pos:start="199:45" pos:end="199:46">-&gt;</operator><name pos:start="199:47" pos:end="199:65">predicterror_buffer</name><index pos:start="199:66" pos:end="199:69">[<expr pos:start="199:67" pos:end="199:68"><name pos:start="199:67" pos:end="199:68">ch</name></expr>]</index></name></expr></argument>,

                                        <argument pos:start="201:41" pos:end="201:53"><expr pos:start="201:41" pos:end="201:53"><name pos:start="201:41" pos:end="201:53">outputsamples</name></expr></argument>,

                                        <argument pos:start="203:41" pos:end="203:54"><expr pos:start="203:41" pos:end="203:54"><name pos:start="203:41" pos:end="203:54">readsamplesize</name></expr></argument>,

                                        <argument pos:start="205:41" pos:end="205:73"><expr pos:start="205:41" pos:end="205:73"><name pos:start="205:41" pos:end="205:73"><name pos:start="205:41" pos:end="205:44">alac</name><operator pos:start="205:45" pos:end="205:46">-&gt;</operator><name pos:start="205:47" pos:end="205:73">setinfo_rice_initialhistory</name></name></expr></argument>,

                                        <argument pos:start="207:41" pos:end="207:68"><expr pos:start="207:41" pos:end="207:68"><name pos:start="207:41" pos:end="207:68"><name pos:start="207:41" pos:end="207:44">alac</name><operator pos:start="207:45" pos:end="207:46">-&gt;</operator><name pos:start="207:47" pos:end="207:68">setinfo_rice_kmodifier</name></name></expr></argument>,

                                        <argument pos:start="209:41" pos:end="209:93"><expr pos:start="209:41" pos:end="209:93"><name pos:start="209:41" pos:end="209:56"><name pos:start="209:41" pos:end="209:52">ricemodifier</name><index pos:start="209:53" pos:end="209:56">[<expr pos:start="209:54" pos:end="209:55"><name pos:start="209:54" pos:end="209:55">ch</name></expr>]</index></name> <operator pos:start="209:58" pos:end="209:58">*</operator> <name pos:start="209:60" pos:end="209:89"><name pos:start="209:60" pos:end="209:63">alac</name><operator pos:start="209:64" pos:end="209:65">-&gt;</operator><name pos:start="209:66" pos:end="209:89">setinfo_rice_historymult</name></name> <operator pos:start="209:91" pos:end="209:91">/</operator> <literal type="number" pos:start="209:93" pos:end="209:93">4</literal></expr></argument>,

                                        <argument pos:start="211:41" pos:end="211:79"><expr pos:start="211:41" pos:end="211:79"><operator pos:start="211:41" pos:end="211:41">(</operator><literal type="number" pos:start="211:42" pos:end="211:42">1</literal> <operator pos:start="211:44" pos:end="211:45">&lt;&lt;</operator> <name pos:start="211:47" pos:end="211:74"><name pos:start="211:47" pos:end="211:50">alac</name><operator pos:start="211:51" pos:end="211:52">-&gt;</operator><name pos:start="211:53" pos:end="211:74">setinfo_rice_kmodifier</name></name><operator pos:start="211:75" pos:end="211:75">)</operator> <operator pos:start="211:77" pos:end="211:77">-</operator> <literal type="number" pos:start="211:79" pos:end="211:79">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="215:13" pos:end="249:13"><if pos:start="215:13" pos:end="233:13">if <condition pos:start="215:16" pos:end="215:41">(<expr pos:start="215:17" pos:end="215:40"><name pos:start="215:17" pos:end="215:35"><name pos:start="215:17" pos:end="215:31">prediction_type</name><index pos:start="215:32" pos:end="215:35">[<expr pos:start="215:33" pos:end="215:34"><name pos:start="215:33" pos:end="215:34">ch</name></expr>]</index></name> <operator pos:start="215:37" pos:end="215:38">==</operator> <literal type="number" pos:start="215:40" pos:end="215:40">0</literal></expr>)</condition> <block pos:start="215:43" pos:end="233:13">{<block_content pos:start="219:17" pos:end="231:78">

                <comment type="block" pos:start="217:17" pos:end="217:34">/* adaptive fir */</comment>

                <expr_stmt pos:start="219:17" pos:end="231:78"><expr pos:start="219:17" pos:end="231:77"><call pos:start="219:17" pos:end="231:77"><name pos:start="219:17" pos:end="219:46">predictor_decompress_fir_adapt</name><argument_list pos:start="219:47" pos:end="231:77">(<argument pos:start="219:48" pos:end="219:76"><expr pos:start="219:48" pos:end="219:76"><name pos:start="219:48" pos:end="219:76"><name pos:start="219:48" pos:end="219:51">alac</name><operator pos:start="219:52" pos:end="219:53">-&gt;</operator><name pos:start="219:54" pos:end="219:72">predicterror_buffer</name><index pos:start="219:73" pos:end="219:76">[<expr pos:start="219:74" pos:end="219:75"><name pos:start="219:74" pos:end="219:75">ch</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="221:48" pos:end="221:77"><expr pos:start="221:48" pos:end="221:77"><name pos:start="221:48" pos:end="221:77"><name pos:start="221:48" pos:end="221:51">alac</name><operator pos:start="221:52" pos:end="221:53">-&gt;</operator><name pos:start="221:54" pos:end="221:73">outputsamples_buffer</name><index pos:start="221:74" pos:end="221:77">[<expr pos:start="221:75" pos:end="221:76"><name pos:start="221:75" pos:end="221:76">ch</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="223:48" pos:end="223:60"><expr pos:start="223:48" pos:end="223:60"><name pos:start="223:48" pos:end="223:60">outputsamples</name></expr></argument>,

                                               <argument pos:start="225:48" pos:end="225:61"><expr pos:start="225:48" pos:end="225:61"><name pos:start="225:48" pos:end="225:61">readsamplesize</name></expr></argument>,

                                               <argument pos:start="227:48" pos:end="227:71"><expr pos:start="227:48" pos:end="227:71"><name pos:start="227:48" pos:end="227:71"><name pos:start="227:48" pos:end="227:67">predictor_coef_table</name><index pos:start="227:68" pos:end="227:71">[<expr pos:start="227:69" pos:end="227:70"><name pos:start="227:69" pos:end="227:70">ch</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="229:48" pos:end="229:69"><expr pos:start="229:48" pos:end="229:69"><name pos:start="229:48" pos:end="229:69"><name pos:start="229:48" pos:end="229:65">predictor_coef_num</name><index pos:start="229:66" pos:end="229:69">[<expr pos:start="229:67" pos:end="229:68"><name pos:start="229:67" pos:end="229:68">ch</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="231:48" pos:end="231:76"><expr pos:start="231:48" pos:end="231:76"><name pos:start="231:48" pos:end="231:76"><name pos:start="231:48" pos:end="231:72">prediction_quantitization</name><index pos:start="231:73" pos:end="231:76">[<expr pos:start="231:74" pos:end="231:75"><name pos:start="231:74" pos:end="231:75">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="233:15" pos:end="249:13">else <block pos:start="233:20" pos:end="249:13">{<block_content pos:start="235:17" pos:end="235:107">

                <expr_stmt pos:start="235:17" pos:end="235:107"><expr pos:start="235:17" pos:end="235:106"><call pos:start="235:17" pos:end="235:106"><name pos:start="235:17" pos:end="235:22">av_log</name><argument_list pos:start="235:23" pos:end="235:106">(<argument pos:start="235:24" pos:end="235:28"><expr pos:start="235:24" pos:end="235:28"><name pos:start="235:24" pos:end="235:28">avctx</name></expr></argument>, <argument pos:start="235:31" pos:end="235:42"><expr pos:start="235:31" pos:end="235:42"><name pos:start="235:31" pos:end="235:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="235:45" pos:end="235:84"><expr pos:start="235:45" pos:end="235:84"><literal type="string" pos:start="235:45" pos:end="235:84">"FIXME: unhandled prediction type: %i\n"</literal></expr></argument>, <argument pos:start="235:87" pos:end="235:105"><expr pos:start="235:87" pos:end="235:105"><name pos:start="235:87" pos:end="235:105"><name pos:start="235:87" pos:end="235:101">prediction_type</name><index pos:start="235:102" pos:end="235:105">[<expr pos:start="235:103" pos:end="235:104"><name pos:start="235:103" pos:end="235:104">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="237:17" pos:end="247:19">/* I think the only other prediction type (or perhaps this is

                 * just a boolean?) runs adaptive fir twice.. like:

                 * predictor_decompress_fir_adapt(predictor_error, tempout, ...)

                 * predictor_decompress_fir_adapt(predictor_error, outputsamples ...)

                 * little strange..

                 */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="253:7" pos:end="275:5">else <block pos:start="253:12" pos:end="275:5">{<block_content pos:start="257:9" pos:end="273:35">

        <comment type="block" pos:start="255:9" pos:end="255:39">/* not compressed, easy case */</comment>

        <for pos:start="257:9" pos:end="267:9">for <control pos:start="257:13" pos:end="257:43">(<init pos:start="257:14" pos:end="257:19"><expr pos:start="257:14" pos:end="257:18"><name pos:start="257:14" pos:end="257:14">i</name> <operator pos:start="257:16" pos:end="257:16">=</operator> <literal type="number" pos:start="257:18" pos:end="257:18">0</literal></expr>;</init> <condition pos:start="257:21" pos:end="257:38"><expr pos:start="257:21" pos:end="257:37"><name pos:start="257:21" pos:end="257:21">i</name> <operator pos:start="257:23" pos:end="257:23">&lt;</operator> <name pos:start="257:25" pos:end="257:37">outputsamples</name></expr>;</condition> <incr pos:start="257:40" pos:end="257:42"><expr pos:start="257:40" pos:end="257:42"><name pos:start="257:40" pos:end="257:40">i</name><operator pos:start="257:41" pos:end="257:42">++</operator></expr></incr>)</control> <block pos:start="257:45" pos:end="267:9">{<block_content pos:start="259:13" pos:end="265:13">

            <for pos:start="259:13" pos:end="265:13">for <control pos:start="259:17" pos:end="259:45">(<init pos:start="259:18" pos:end="259:24"><expr pos:start="259:18" pos:end="259:23"><name pos:start="259:18" pos:end="259:19">ch</name> <operator pos:start="259:21" pos:end="259:21">=</operator> <literal type="number" pos:start="259:23" pos:end="259:23">0</literal></expr>;</init> <condition pos:start="259:26" pos:end="259:39"><expr pos:start="259:26" pos:end="259:38"><name pos:start="259:26" pos:end="259:27">ch</name> <operator pos:start="259:29" pos:end="259:29">&lt;</operator> <name pos:start="259:31" pos:end="259:38">channels</name></expr>;</condition> <incr pos:start="259:41" pos:end="259:44"><expr pos:start="259:41" pos:end="259:44"><name pos:start="259:41" pos:end="259:42">ch</name><operator pos:start="259:43" pos:end="259:44">++</operator></expr></incr>)</control> <block pos:start="259:47" pos:end="265:13">{<block_content pos:start="261:17" pos:end="263:94">

                <expr_stmt pos:start="261:17" pos:end="263:94"><expr pos:start="261:17" pos:end="263:93"><name pos:start="261:17" pos:end="261:49"><name pos:start="261:17" pos:end="261:20">alac</name><operator pos:start="261:21" pos:end="261:22">-&gt;</operator><name pos:start="261:23" pos:end="261:42">outputsamples_buffer</name><index pos:start="261:43" pos:end="261:46">[<expr pos:start="261:44" pos:end="261:45"><name pos:start="261:44" pos:end="261:45">ch</name></expr>]</index><index pos:start="261:47" pos:end="261:49">[<expr pos:start="261:48" pos:end="261:48"><name pos:start="261:48" pos:end="261:48">i</name></expr>]</index></name> <operator pos:start="261:51" pos:end="261:51">=</operator> <call pos:start="261:53" pos:end="263:93"><name pos:start="261:53" pos:end="261:66">get_sbits_long</name><argument_list pos:start="261:67" pos:end="263:93">(<argument pos:start="261:68" pos:end="261:76"><expr pos:start="261:68" pos:end="261:76"><operator pos:start="261:68" pos:end="261:68">&amp;</operator><name pos:start="261:69" pos:end="261:76"><name pos:start="261:69" pos:end="261:72">alac</name><operator pos:start="261:73" pos:end="261:74">-&gt;</operator><name pos:start="261:75" pos:end="261:76">gb</name></name></expr></argument>,

                                                                   <argument pos:start="263:68" pos:end="263:92"><expr pos:start="263:68" pos:end="263:92"><name pos:start="263:68" pos:end="263:92"><name pos:start="263:68" pos:end="263:71">alac</name><operator pos:start="263:72" pos:end="263:73">-&gt;</operator><name pos:start="263:74" pos:end="263:92">setinfo_sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <expr_stmt pos:start="269:9" pos:end="269:29"><expr pos:start="269:9" pos:end="269:28"><name pos:start="269:9" pos:end="269:24"><name pos:start="269:9" pos:end="269:12">alac</name><operator pos:start="269:13" pos:end="269:14">-&gt;</operator><name pos:start="269:15" pos:end="269:24">extra_bits</name></name> <operator pos:start="269:26" pos:end="269:26">=</operator> <literal type="number" pos:start="269:28" pos:end="269:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:30"><expr pos:start="271:9" pos:end="271:29"><name pos:start="271:9" pos:end="271:25">interlacing_shift</name> <operator pos:start="271:27" pos:end="271:27">=</operator> <literal type="number" pos:start="271:29" pos:end="271:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:35"><expr pos:start="273:9" pos:end="273:34"><name pos:start="273:9" pos:end="273:30">interlacing_leftweight</name> <operator pos:start="273:32" pos:end="273:32">=</operator> <literal type="number" pos:start="273:34" pos:end="273:34">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="277:5" pos:end="279:68"><if pos:start="277:5" pos:end="279:68">if <condition pos:start="277:8" pos:end="277:36">(<expr pos:start="277:9" pos:end="277:35"><call pos:start="277:9" pos:end="277:30"><name pos:start="277:9" pos:end="277:16">get_bits</name><argument_list pos:start="277:17" pos:end="277:30">(<argument pos:start="277:18" pos:end="277:26"><expr pos:start="277:18" pos:end="277:26"><operator pos:start="277:18" pos:end="277:18">&amp;</operator><name pos:start="277:19" pos:end="277:26"><name pos:start="277:19" pos:end="277:22">alac</name><operator pos:start="277:23" pos:end="277:24">-&gt;</operator><name pos:start="277:25" pos:end="277:26">gb</name></name></expr></argument>, <argument pos:start="277:29" pos:end="277:29"><expr pos:start="277:29" pos:end="277:29"><literal type="number" pos:start="277:29" pos:end="277:29">3</literal></expr></argument>)</argument_list></call> <operator pos:start="277:32" pos:end="277:33">!=</operator> <literal type="number" pos:start="277:35" pos:end="277:35">7</literal></expr>)</condition><block type="pseudo" pos:start="279:9" pos:end="279:68"><block_content pos:start="279:9" pos:end="279:68">

        <expr_stmt pos:start="279:9" pos:end="279:68"><expr pos:start="279:9" pos:end="279:67"><call pos:start="279:9" pos:end="279:67"><name pos:start="279:9" pos:end="279:14">av_log</name><argument_list pos:start="279:15" pos:end="279:67">(<argument pos:start="279:16" pos:end="279:20"><expr pos:start="279:16" pos:end="279:20"><name pos:start="279:16" pos:end="279:20">avctx</name></expr></argument>, <argument pos:start="279:23" pos:end="279:34"><expr pos:start="279:23" pos:end="279:34"><name pos:start="279:23" pos:end="279:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="279:37" pos:end="279:66"><expr pos:start="279:37" pos:end="279:66"><literal type="string" pos:start="279:37" pos:end="279:66">"Error : Wrong End Of Frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="283:5" pos:end="289:5"><if pos:start="283:5" pos:end="289:5">if <condition pos:start="283:8" pos:end="283:48">(<expr pos:start="283:9" pos:end="283:47"><name pos:start="283:9" pos:end="283:16">channels</name> <operator pos:start="283:18" pos:end="283:19">==</operator> <literal type="number" pos:start="283:21" pos:end="283:21">2</literal> <operator pos:start="283:23" pos:end="283:24">&amp;&amp;</operator> <name pos:start="283:26" pos:end="283:47">interlacing_leftweight</name></expr>)</condition> <block pos:start="283:50" pos:end="289:5">{<block_content pos:start="285:9" pos:end="287:70">

        <expr_stmt pos:start="285:9" pos:end="287:70"><expr pos:start="285:9" pos:end="287:69"><call pos:start="285:9" pos:end="287:69"><name pos:start="285:9" pos:end="285:26">decorrelate_stereo</name><argument_list pos:start="285:27" pos:end="287:69">(<argument pos:start="285:28" pos:end="285:53"><expr pos:start="285:28" pos:end="285:53"><name pos:start="285:28" pos:end="285:53"><name pos:start="285:28" pos:end="285:31">alac</name><operator pos:start="285:32" pos:end="285:33">-&gt;</operator><name pos:start="285:34" pos:end="285:53">outputsamples_buffer</name></name></expr></argument>, <argument pos:start="285:56" pos:end="285:68"><expr pos:start="285:56" pos:end="285:68"><name pos:start="285:56" pos:end="285:68">outputsamples</name></expr></argument>,

                           <argument pos:start="287:28" pos:end="287:44"><expr pos:start="287:28" pos:end="287:44"><name pos:start="287:28" pos:end="287:44">interlacing_shift</name></expr></argument>, <argument pos:start="287:47" pos:end="287:68"><expr pos:start="287:47" pos:end="287:68"><name pos:start="287:47" pos:end="287:68">interlacing_leftweight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="293:5" pos:end="299:5"><if pos:start="293:5" pos:end="299:5">if <condition pos:start="293:8" pos:end="293:25">(<expr pos:start="293:9" pos:end="293:24"><name pos:start="293:9" pos:end="293:24"><name pos:start="293:9" pos:end="293:12">alac</name><operator pos:start="293:13" pos:end="293:14">-&gt;</operator><name pos:start="293:15" pos:end="293:24">extra_bits</name></name></expr>)</condition> <block pos:start="293:27" pos:end="299:5">{<block_content pos:start="295:9" pos:end="297:78">

        <expr_stmt pos:start="295:9" pos:end="297:78"><expr pos:start="295:9" pos:end="297:77"><call pos:start="295:9" pos:end="297:77"><name pos:start="295:9" pos:end="295:25">append_extra_bits</name><argument_list pos:start="295:26" pos:end="297:77">(<argument pos:start="295:27" pos:end="295:52"><expr pos:start="295:27" pos:end="295:52"><name pos:start="295:27" pos:end="295:52"><name pos:start="295:27" pos:end="295:30">alac</name><operator pos:start="295:31" pos:end="295:32">-&gt;</operator><name pos:start="295:33" pos:end="295:52">outputsamples_buffer</name></name></expr></argument>, <argument pos:start="295:55" pos:end="295:77"><expr pos:start="295:55" pos:end="295:77"><name pos:start="295:55" pos:end="295:77"><name pos:start="295:55" pos:end="295:58">alac</name><operator pos:start="295:59" pos:end="295:60">-&gt;</operator><name pos:start="295:61" pos:end="295:77">extra_bits_buffer</name></name></expr></argument>,

                          <argument pos:start="297:27" pos:end="297:42"><expr pos:start="297:27" pos:end="297:42"><name pos:start="297:27" pos:end="297:42"><name pos:start="297:27" pos:end="297:30">alac</name><operator pos:start="297:31" pos:end="297:32">-&gt;</operator><name pos:start="297:33" pos:end="297:42">extra_bits</name></name></expr></argument>, <argument pos:start="297:45" pos:end="297:61"><expr pos:start="297:45" pos:end="297:61"><name pos:start="297:45" pos:end="297:61"><name pos:start="297:45" pos:end="297:48">alac</name><operator pos:start="297:49" pos:end="297:50">-&gt;</operator><name pos:start="297:51" pos:end="297:61">numchannels</name></name></expr></argument>, <argument pos:start="297:64" pos:end="297:76"><expr pos:start="297:64" pos:end="297:76"><name pos:start="297:64" pos:end="297:76">outputsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="303:5" pos:end="343:5">switch<condition pos:start="303:11" pos:end="303:37">(<expr pos:start="303:12" pos:end="303:36"><name pos:start="303:12" pos:end="303:36"><name pos:start="303:12" pos:end="303:15">alac</name><operator pos:start="303:16" pos:end="303:17">-&gt;</operator><name pos:start="303:18" pos:end="303:36">setinfo_sample_size</name></name></expr>)</condition> <block pos:start="303:39" pos:end="343:5">{<block_content pos:start="305:5" pos:end="341:14">

    <case pos:start="305:5" pos:end="305:12">case <expr pos:start="305:10" pos:end="305:11"><literal type="number" pos:start="305:10" pos:end="305:11">16</literal></expr>:</case>

        <if_stmt pos:start="307:9" pos:end="321:9"><if pos:start="307:9" pos:end="313:9">if <condition pos:start="307:12" pos:end="307:26">(<expr pos:start="307:13" pos:end="307:25"><name pos:start="307:13" pos:end="307:20">channels</name> <operator pos:start="307:22" pos:end="307:23">==</operator> <literal type="number" pos:start="307:25" pos:end="307:25">2</literal></expr>)</condition> <block pos:start="307:28" pos:end="313:9">{<block_content pos:start="309:13" pos:end="311:48">

            <expr_stmt pos:start="309:13" pos:end="311:48"><expr pos:start="309:13" pos:end="311:47"><call pos:start="309:13" pos:end="311:47"><name pos:start="309:13" pos:end="309:32">interleave_stereo_16</name><argument_list pos:start="309:33" pos:end="311:47">(<argument pos:start="309:34" pos:end="309:59"><expr pos:start="309:34" pos:end="309:59"><name pos:start="309:34" pos:end="309:59"><name pos:start="309:34" pos:end="309:37">alac</name><operator pos:start="309:38" pos:end="309:39">-&gt;</operator><name pos:start="309:40" pos:end="309:59">outputsamples_buffer</name></name></expr></argument>, <argument pos:start="309:62" pos:end="309:70"><expr pos:start="309:62" pos:end="309:70"><name pos:start="309:62" pos:end="309:70">outbuffer</name></expr></argument>,

                                 <argument pos:start="311:34" pos:end="311:46"><expr pos:start="311:34" pos:end="311:46"><name pos:start="311:34" pos:end="311:46">outputsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="313:11" pos:end="321:9">else <block pos:start="313:16" pos:end="321:9">{<block_content pos:start="315:13" pos:end="319:13">

            <for pos:start="315:13" pos:end="319:13">for <control pos:start="315:17" pos:end="315:47">(<init pos:start="315:18" pos:end="315:23"><expr pos:start="315:18" pos:end="315:22"><name pos:start="315:18" pos:end="315:18">i</name> <operator pos:start="315:20" pos:end="315:20">=</operator> <literal type="number" pos:start="315:22" pos:end="315:22">0</literal></expr>;</init> <condition pos:start="315:25" pos:end="315:42"><expr pos:start="315:25" pos:end="315:41"><name pos:start="315:25" pos:end="315:25">i</name> <operator pos:start="315:27" pos:end="315:27">&lt;</operator> <name pos:start="315:29" pos:end="315:41">outputsamples</name></expr>;</condition> <incr pos:start="315:44" pos:end="315:46"><expr pos:start="315:44" pos:end="315:46"><name pos:start="315:44" pos:end="315:44">i</name><operator pos:start="315:45" pos:end="315:46">++</operator></expr></incr>)</control> <block pos:start="315:49" pos:end="319:13">{<block_content pos:start="317:17" pos:end="317:76">

                <expr_stmt pos:start="317:17" pos:end="317:76"><expr pos:start="317:17" pos:end="317:75"><operator pos:start="317:17" pos:end="317:17">(</operator><operator pos:start="317:18" pos:end="317:18">(</operator><name pos:start="317:19" pos:end="317:25">int16_t</name><operator pos:start="317:26" pos:end="317:26">*</operator><operator pos:start="317:27" pos:end="317:27">)</operator><name pos:start="317:28" pos:end="317:36">outbuffer</name><operator pos:start="317:37" pos:end="317:37">)</operator><index pos:start="317:38" pos:end="317:40">[<expr pos:start="317:39" pos:end="317:39"><name pos:start="317:39" pos:end="317:39">i</name></expr>]</index> <operator pos:start="317:42" pos:end="317:42">=</operator> <name pos:start="317:44" pos:end="317:75"><name pos:start="317:44" pos:end="317:47">alac</name><operator pos:start="317:48" pos:end="317:49">-&gt;</operator><name pos:start="317:50" pos:end="317:69">outputsamples_buffer</name><index pos:start="317:70" pos:end="317:72">[<expr pos:start="317:71" pos:end="317:71"><literal type="number" pos:start="317:71" pos:end="317:71">0</literal></expr>]</index><index pos:start="317:73" pos:end="317:75">[<expr pos:start="317:74" pos:end="317:74"><name pos:start="317:74" pos:end="317:74">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="323:9" pos:end="323:14">break;</break>

    <case pos:start="325:5" pos:end="325:12">case <expr pos:start="325:10" pos:end="325:11"><literal type="number" pos:start="325:10" pos:end="325:11">24</literal></expr>:</case>

        <if_stmt pos:start="327:9" pos:end="339:9"><if pos:start="327:9" pos:end="333:9">if <condition pos:start="327:12" pos:end="327:26">(<expr pos:start="327:13" pos:end="327:25"><name pos:start="327:13" pos:end="327:20">channels</name> <operator pos:start="327:22" pos:end="327:23">==</operator> <literal type="number" pos:start="327:25" pos:end="327:25">2</literal></expr>)</condition> <block pos:start="327:28" pos:end="333:9">{<block_content pos:start="329:13" pos:end="331:48">

            <expr_stmt pos:start="329:13" pos:end="331:48"><expr pos:start="329:13" pos:end="331:47"><call pos:start="329:13" pos:end="331:47"><name pos:start="329:13" pos:end="329:32">interleave_stereo_24</name><argument_list pos:start="329:33" pos:end="331:47">(<argument pos:start="329:34" pos:end="329:59"><expr pos:start="329:34" pos:end="329:59"><name pos:start="329:34" pos:end="329:59"><name pos:start="329:34" pos:end="329:37">alac</name><operator pos:start="329:38" pos:end="329:39">-&gt;</operator><name pos:start="329:40" pos:end="329:59">outputsamples_buffer</name></name></expr></argument>, <argument pos:start="329:62" pos:end="329:70"><expr pos:start="329:62" pos:end="329:70"><name pos:start="329:62" pos:end="329:70">outbuffer</name></expr></argument>,

                                 <argument pos:start="331:34" pos:end="331:46"><expr pos:start="331:34" pos:end="331:46"><name pos:start="331:34" pos:end="331:46">outputsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="333:11" pos:end="339:9">else <block pos:start="333:16" pos:end="339:9">{<block_content pos:start="335:13" pos:end="337:82">

            <for pos:start="335:13" pos:end="337:82">for <control pos:start="335:17" pos:end="335:47">(<init pos:start="335:18" pos:end="335:23"><expr pos:start="335:18" pos:end="335:22"><name pos:start="335:18" pos:end="335:18">i</name> <operator pos:start="335:20" pos:end="335:20">=</operator> <literal type="number" pos:start="335:22" pos:end="335:22">0</literal></expr>;</init> <condition pos:start="335:25" pos:end="335:42"><expr pos:start="335:25" pos:end="335:41"><name pos:start="335:25" pos:end="335:25">i</name> <operator pos:start="335:27" pos:end="335:27">&lt;</operator> <name pos:start="335:29" pos:end="335:41">outputsamples</name></expr>;</condition> <incr pos:start="335:44" pos:end="335:46"><expr pos:start="335:44" pos:end="335:46"><name pos:start="335:44" pos:end="335:44">i</name><operator pos:start="335:45" pos:end="335:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="337:17" pos:end="337:82"><block_content pos:start="337:17" pos:end="337:82">

                <expr_stmt pos:start="337:17" pos:end="337:82"><expr pos:start="337:17" pos:end="337:81"><operator pos:start="337:17" pos:end="337:17">(</operator><operator pos:start="337:18" pos:end="337:18">(</operator><name pos:start="337:19" pos:end="337:25">int32_t</name> <operator pos:start="337:27" pos:end="337:27">*</operator><operator pos:start="337:28" pos:end="337:28">)</operator><name pos:start="337:29" pos:end="337:37">outbuffer</name><operator pos:start="337:38" pos:end="337:38">)</operator><index pos:start="337:39" pos:end="337:41">[<expr pos:start="337:40" pos:end="337:40"><name pos:start="337:40" pos:end="337:40">i</name></expr>]</index> <operator pos:start="337:43" pos:end="337:43">=</operator> <name pos:start="337:45" pos:end="337:76"><name pos:start="337:45" pos:end="337:48">alac</name><operator pos:start="337:49" pos:end="337:50">-&gt;</operator><name pos:start="337:51" pos:end="337:70">outputsamples_buffer</name><index pos:start="337:71" pos:end="337:73">[<expr pos:start="337:72" pos:end="337:72"><literal type="number" pos:start="337:72" pos:end="337:72">0</literal></expr>]</index><index pos:start="337:74" pos:end="337:76">[<expr pos:start="337:75" pos:end="337:75"><name pos:start="337:75" pos:end="337:75">i</name></expr>]</index></name> <operator pos:start="337:78" pos:end="337:79">&lt;&lt;</operator> <literal type="number" pos:start="337:81" pos:end="337:81">8</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="341:9" pos:end="341:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="347:5" pos:end="349:113"><if pos:start="347:5" pos:end="349:113">if <condition pos:start="347:8" pos:end="347:62">(<expr pos:start="347:9" pos:end="347:61"><name pos:start="347:9" pos:end="347:25">input_buffer_size</name> <operator pos:start="347:27" pos:end="347:27">*</operator> <literal type="number" pos:start="347:29" pos:end="347:31">8</literal> <operator pos:start="347:31" pos:end="347:31">-</operator> <call pos:start="347:33" pos:end="347:57"><name pos:start="347:33" pos:end="347:46">get_bits_count</name><argument_list pos:start="347:47" pos:end="347:57">(<argument pos:start="347:48" pos:end="347:56"><expr pos:start="347:48" pos:end="347:56"><operator pos:start="347:48" pos:end="347:48">&amp;</operator><name pos:start="347:49" pos:end="347:56"><name pos:start="347:49" pos:end="347:52">alac</name><operator pos:start="347:53" pos:end="347:54">-&gt;</operator><name pos:start="347:55" pos:end="347:56">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="347:59" pos:end="347:59">&gt;</operator> <literal type="number" pos:start="347:61" pos:end="347:61">8</literal></expr>)</condition><block type="pseudo" pos:start="349:9" pos:end="349:113"><block_content pos:start="349:9" pos:end="349:113">

        <expr_stmt pos:start="349:9" pos:end="349:113"><expr pos:start="349:9" pos:end="349:112"><call pos:start="349:9" pos:end="349:112"><name pos:start="349:9" pos:end="349:14">av_log</name><argument_list pos:start="349:15" pos:end="349:112">(<argument pos:start="349:16" pos:end="349:20"><expr pos:start="349:16" pos:end="349:20"><name pos:start="349:16" pos:end="349:20">avctx</name></expr></argument>, <argument pos:start="349:23" pos:end="349:34"><expr pos:start="349:23" pos:end="349:34"><name pos:start="349:23" pos:end="349:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="349:37" pos:end="349:60"><expr pos:start="349:37" pos:end="349:60"><literal type="string" pos:start="349:37" pos:end="349:60">"Error : %d bits left\n"</literal></expr></argument>, <argument pos:start="349:63" pos:end="349:111"><expr pos:start="349:63" pos:end="349:111"><name pos:start="349:63" pos:end="349:79">input_buffer_size</name> <operator pos:start="349:81" pos:end="349:81">*</operator> <literal type="number" pos:start="349:83" pos:end="349:85">8</literal> <operator pos:start="349:85" pos:end="349:85">-</operator> <call pos:start="349:87" pos:end="349:111"><name pos:start="349:87" pos:end="349:100">get_bits_count</name><argument_list pos:start="349:101" pos:end="349:111">(<argument pos:start="349:102" pos:end="349:110"><expr pos:start="349:102" pos:end="349:110"><operator pos:start="349:102" pos:end="349:102">&amp;</operator><name pos:start="349:103" pos:end="349:110"><name pos:start="349:103" pos:end="349:106">alac</name><operator pos:start="349:107" pos:end="349:108">-&gt;</operator><name pos:start="349:109" pos:end="349:110">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="353:5" pos:end="353:29">return <expr pos:start="353:12" pos:end="353:28"><name pos:start="353:12" pos:end="353:28">input_buffer_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
