<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26822.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">mmap_read_frame</name><parameter_list pos:start="1:27" pos:end="1:63">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">ctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">AVPacket</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="199:1">{<block_content pos:start="5:5" pos:end="197:33">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:21">video_data</name></name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:24">s</name> <init pos:start="5:26" pos:end="5:41">= <expr pos:start="5:28" pos:end="5:41"><name pos:start="5:28" pos:end="5:41"><name pos:start="5:28" pos:end="5:30">ctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="13:6"><decl pos:start="7:5" pos:end="13:5"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">v4l2_buffer</name></name></type> <name pos:start="7:24" pos:end="7:26">buf</name> <init pos:start="7:28" pos:end="13:5">= <expr pos:start="7:30" pos:end="13:5"><block pos:start="7:30" pos:end="13:5">{

        <expr pos:start="9:9" pos:end="9:45"><operator pos:start="9:9" pos:end="9:9">.</operator><name pos:start="9:10" pos:end="9:13">type</name>   <operator pos:start="9:17" pos:end="9:17">=</operator> <name pos:start="9:19" pos:end="9:45">V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>,

        <expr pos:start="11:9" pos:end="11:34"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:15">memory</name> <operator pos:start="11:17" pos:end="11:17">=</operator> <name pos:start="11:19" pos:end="11:34">V4L2_MEMORY_MMAP</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:56"><decl pos:start="15:5" pos:end="15:55"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:17">pollfd</name></name></type> <name pos:start="15:19" pos:end="15:19">p</name> <init pos:start="15:21" pos:end="15:55">= <expr pos:start="15:23" pos:end="15:55"><block pos:start="15:23" pos:end="15:55">{ <expr pos:start="15:25" pos:end="15:35"><operator pos:start="15:25" pos:end="15:25">.</operator><name pos:start="15:26" pos:end="15:27">fd</name> <operator pos:start="15:29" pos:end="15:29">=</operator> <name pos:start="15:31" pos:end="15:35"><name pos:start="15:31" pos:end="15:31">s</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:35">fd</name></name></expr>, <expr pos:start="15:38" pos:end="15:53"><operator pos:start="15:38" pos:end="15:38">.</operator><name pos:start="15:39" pos:end="15:44">events</name> <operator pos:start="15:46" pos:end="15:46">=</operator> <name pos:start="15:48" pos:end="15:53">POLLIN</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">res</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:34"><expr pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:7">res</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:33"><name pos:start="21:11" pos:end="21:14">poll</name><argument_list pos:start="21:15" pos:end="21:33">(<argument pos:start="21:16" pos:end="21:17"><expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">&amp;</operator><name pos:start="21:17" pos:end="21:17">p</name></expr></argument>, <argument pos:start="21:20" pos:end="21:20"><expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">1</literal></expr></argument>, <argument pos:start="21:23" pos:end="21:32"><expr pos:start="21:23" pos:end="21:32"><name pos:start="21:23" pos:end="21:32"><name pos:start="21:23" pos:end="21:23">s</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:32">timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="25:30"><if pos:start="23:5" pos:end="25:30">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">res</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:30"><block_content pos:start="25:9" pos:end="25:30">

        <return pos:start="25:9" pos:end="25:30">return <expr pos:start="25:16" pos:end="25:29"><call pos:start="25:16" pos:end="25:29"><name pos:start="25:16" pos:end="25:22">AVERROR</name><argument_list pos:start="25:23" pos:end="25:29">(<argument pos:start="25:24" pos:end="25:28"><expr pos:start="25:24" pos:end="25:28"><name pos:start="25:24" pos:end="25:28">errno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="31:31"><if pos:start="29:5" pos:end="31:31">if <condition pos:start="29:8" pos:end="29:52">(<expr pos:start="29:9" pos:end="29:51"><operator pos:start="29:9" pos:end="29:9">!</operator><operator pos:start="29:10" pos:end="29:10">(</operator><name pos:start="29:11" pos:end="29:19"><name pos:start="29:11" pos:end="29:11">p</name><operator pos:start="29:12" pos:end="29:12">.</operator><name pos:start="29:13" pos:end="29:19">revents</name></name> <operator pos:start="29:21" pos:end="29:21">&amp;</operator> <operator pos:start="29:23" pos:end="29:23">(</operator><name pos:start="29:24" pos:end="29:29">POLLIN</name> <operator pos:start="29:31" pos:end="29:31">|</operator> <name pos:start="29:33" pos:end="29:39">POLLERR</name> <operator pos:start="29:41" pos:end="29:41">|</operator> <name pos:start="29:43" pos:end="29:49">POLLHUP</name><operator pos:start="29:50" pos:end="29:50">)</operator><operator pos:start="29:51" pos:end="29:51">)</operator></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:31"><block_content pos:start="31:9" pos:end="31:31">

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:84">/* FIXME: Some special treatment might be needed in case of loss of signal... */</comment>

    <while pos:start="37:5" pos:end="37:77">while <condition pos:start="37:11" pos:end="37:76">(<expr pos:start="37:12" pos:end="37:75"><operator pos:start="37:12" pos:end="37:12">(</operator><name pos:start="37:13" pos:end="37:15">res</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:50"><name pos:start="37:19" pos:end="37:23">ioctl</name><argument_list pos:start="37:24" pos:end="37:50">(<argument pos:start="37:25" pos:end="37:29"><expr pos:start="37:25" pos:end="37:29"><name pos:start="37:25" pos:end="37:29"><name pos:start="37:25" pos:end="37:25">s</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:29">fd</name></name></expr></argument>, <argument pos:start="37:32" pos:end="37:43"><expr pos:start="37:32" pos:end="37:43"><name pos:start="37:32" pos:end="37:43">VIDIOC_DQBUF</name></expr></argument>, <argument pos:start="37:46" pos:end="37:49"><expr pos:start="37:46" pos:end="37:49"><operator pos:start="37:46" pos:end="37:46">&amp;</operator><name pos:start="37:47" pos:end="37:49">buf</name></expr></argument>)</argument_list></call><operator pos:start="37:51" pos:end="37:51">)</operator> <operator pos:start="37:53" pos:end="37:53">&lt;</operator> <literal type="number" pos:start="37:55" pos:end="37:55">0</literal> <operator pos:start="37:57" pos:end="37:58">&amp;&amp;</operator> <operator pos:start="37:60" pos:end="37:60">(</operator><name pos:start="37:61" pos:end="37:65">errno</name> <operator pos:start="37:67" pos:end="37:68">==</operator> <name pos:start="37:70" pos:end="37:74">EINTR</name><operator pos:start="37:75" pos:end="37:75">)</operator></expr>)</condition><block type="pseudo" pos:start="37:77" pos:end="37:77"><block_content pos:start="37:77" pos:end="37:77"><empty_stmt pos:start="37:77" pos:end="37:77">;</empty_stmt></block_content></block></while>

    <if_stmt pos:start="39:5" pos:end="59:5"><if pos:start="39:5" pos:end="59:5">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">res</name> <operator pos:start="39:13" pos:end="39:13">&lt;</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>)</condition> <block pos:start="39:18" pos:end="59:5">{<block_content pos:start="41:9" pos:end="57:30">

        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="41:28">(<expr pos:start="41:13" pos:end="41:27"><name pos:start="41:13" pos:end="41:17">errno</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:27">EAGAIN</name></expr>)</condition> <block pos:start="41:30" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:35">

            <expr_stmt pos:start="43:13" pos:end="43:26"><expr pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:15">pkt</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:21">size</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <literal type="number" pos:start="43:25" pos:end="43:25">0</literal></expr>;</expr_stmt>



            <return pos:start="47:13" pos:end="47:35">return <expr pos:start="47:20" pos:end="47:34"><call pos:start="47:20" pos:end="47:34"><name pos:start="47:20" pos:end="47:26">AVERROR</name><argument_list pos:start="47:27" pos:end="47:34">(<argument pos:start="47:28" pos:end="47:33"><expr pos:start="47:28" pos:end="47:33"><name pos:start="47:28" pos:end="47:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="53:32"><expr pos:start="51:9" pos:end="53:31"><call pos:start="51:9" pos:end="53:31"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="53:31">(<argument pos:start="51:16" pos:end="51:18"><expr pos:start="51:16" pos:end="51:18"><name pos:start="51:16" pos:end="51:18">ctx</name></expr></argument>, <argument pos:start="51:21" pos:end="51:32"><expr pos:start="51:21" pos:end="51:32"><name pos:start="51:21" pos:end="51:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:35" pos:end="51:61"><expr pos:start="51:35" pos:end="51:61"><literal type="string" pos:start="51:35" pos:end="51:61">"ioctl(VIDIOC_DQBUF): %s\n"</literal></expr></argument>,

               <argument pos:start="53:16" pos:end="53:30"><expr pos:start="53:16" pos:end="53:30"><call pos:start="53:16" pos:end="53:30"><name pos:start="53:16" pos:end="53:23">strerror</name><argument_list pos:start="53:24" pos:end="53:30">(<argument pos:start="53:25" pos:end="53:29"><expr pos:start="53:25" pos:end="53:29"><name pos:start="53:25" pos:end="53:29">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="57:9" pos:end="57:30">return <expr pos:start="57:16" pos:end="57:29"><call pos:start="57:16" pos:end="57:29"><name pos:start="57:16" pos:end="57:22">AVERROR</name><argument_list pos:start="57:23" pos:end="57:29">(<argument pos:start="57:24" pos:end="57:28"><expr pos:start="57:24" pos:end="57:28"><name pos:start="57:24" pos:end="57:28">errno</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:32">(<expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:11">buf</name><operator pos:start="63:12" pos:end="63:12">.</operator><name pos:start="63:13" pos:end="63:17">index</name></name> <operator pos:start="63:19" pos:end="63:20">&gt;=</operator> <name pos:start="63:22" pos:end="63:31"><name pos:start="63:22" pos:end="63:22">s</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:31">buffers</name></name></expr>)</condition> <block pos:start="63:34" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:31">

        <expr_stmt pos:start="65:9" pos:end="65:70"><expr pos:start="65:9" pos:end="65:69"><call pos:start="65:9" pos:end="65:69"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:69">(<argument pos:start="65:16" pos:end="65:18"><expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ctx</name></expr></argument>, <argument pos:start="65:21" pos:end="65:32"><expr pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:35" pos:end="65:68"><expr pos:start="65:35" pos:end="65:68"><literal type="string" pos:start="65:35" pos:end="65:68">"Invalid buffer index received.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:31">return <expr pos:start="67:16" pos:end="67:30"><call pos:start="67:16" pos:end="67:30"><name pos:start="67:16" pos:end="67:22">AVERROR</name><argument_list pos:start="67:23" pos:end="67:30">(<argument pos:start="67:24" pos:end="67:29"><expr pos:start="67:24" pos:end="67:29"><name pos:start="67:24" pos:end="67:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:60"><expr pos:start="71:5" pos:end="71:59"><call pos:start="71:5" pos:end="71:59"><name pos:start="71:5" pos:end="71:35">avpriv_atomic_int_add_and_fetch</name><argument_list pos:start="71:36" pos:end="71:59">(<argument pos:start="71:37" pos:end="71:54"><expr pos:start="71:37" pos:end="71:54"><operator pos:start="71:37" pos:end="71:37">&amp;</operator><name pos:start="71:38" pos:end="71:54"><name pos:start="71:38" pos:end="71:38">s</name><operator pos:start="71:39" pos:end="71:40">-&gt;</operator><name pos:start="71:41" pos:end="71:54">buffers_queued</name></name></expr></argument>, <argument pos:start="71:57" pos:end="71:58"><expr pos:start="71:57" pos:end="71:58"><operator pos:start="71:57" pos:end="71:57">-</operator><literal type="number" pos:start="71:58" pos:end="71:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="73:5" pos:end="73:45">// always keep at least one buffer queued</comment>

    <expr_stmt pos:start="75:5" pos:end="75:63"><expr pos:start="75:5" pos:end="75:62"><call pos:start="75:5" pos:end="75:62"><name pos:start="75:5" pos:end="75:14">av_assert0</name><argument_list pos:start="75:15" pos:end="75:62">(<argument pos:start="75:16" pos:end="75:61"><expr pos:start="75:16" pos:end="75:61"><call pos:start="75:16" pos:end="75:56"><name pos:start="75:16" pos:end="75:36">avpriv_atomic_int_get</name><argument_list pos:start="75:37" pos:end="75:56">(<argument pos:start="75:38" pos:end="75:55"><expr pos:start="75:38" pos:end="75:55"><operator pos:start="75:38" pos:end="75:38">&amp;</operator><name pos:start="75:39" pos:end="75:55"><name pos:start="75:39" pos:end="75:39">s</name><operator pos:start="75:40" pos:end="75:41">-&gt;</operator><name pos:start="75:42" pos:end="75:55">buffers_queued</name></name></expr></argument>)</argument_list></call> <operator pos:start="75:58" pos:end="75:59">&gt;=</operator> <literal type="number" pos:start="75:61" pos:end="75:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="79:5" pos:end="91:5"><if pos:start="79:5" pos:end="91:5">if <condition pos:start="79:8" pos:end="79:60">(<expr pos:start="79:9" pos:end="79:59"><name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:21">frame_size</name></name> <operator pos:start="79:23" pos:end="79:23">&gt;</operator> <literal type="number" pos:start="79:25" pos:end="79:25">0</literal> <operator pos:start="79:27" pos:end="79:28">&amp;&amp;</operator> <name pos:start="79:30" pos:end="79:42"><name pos:start="79:30" pos:end="79:32">buf</name><operator pos:start="79:33" pos:end="79:33">.</operator><name pos:start="79:34" pos:end="79:42">bytesused</name></name> <operator pos:start="79:44" pos:end="79:45">!=</operator> <name pos:start="79:47" pos:end="79:59"><name pos:start="79:47" pos:end="79:47">s</name><operator pos:start="79:48" pos:end="79:49">-&gt;</operator><name pos:start="79:50" pos:end="79:59">frame_size</name></name></expr>)</condition> <block pos:start="79:62" pos:end="91:5">{<block_content pos:start="81:9" pos:end="89:35">

        <expr_stmt pos:start="81:9" pos:end="85:45"><expr pos:start="81:9" pos:end="85:44"><call pos:start="81:9" pos:end="85:44"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="85:44">(<argument pos:start="81:16" pos:end="81:18"><expr pos:start="81:16" pos:end="81:18"><name pos:start="81:16" pos:end="81:18">ctx</name></expr></argument>, <argument pos:start="81:21" pos:end="81:32"><expr pos:start="81:21" pos:end="81:32"><name pos:start="81:21" pos:end="81:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="83:16" pos:end="83:72"><expr pos:start="83:16" pos:end="83:72"><literal type="string" pos:start="83:16" pos:end="83:72">"The v4l2 frame is %d bytes, but %d bytes are expected\n"</literal></expr></argument>,

               <argument pos:start="85:16" pos:end="85:28"><expr pos:start="85:16" pos:end="85:28"><name pos:start="85:16" pos:end="85:28"><name pos:start="85:16" pos:end="85:18">buf</name><operator pos:start="85:19" pos:end="85:19">.</operator><name pos:start="85:20" pos:end="85:28">bytesused</name></name></expr></argument>, <argument pos:start="85:31" pos:end="85:43"><expr pos:start="85:31" pos:end="85:43"><name pos:start="85:31" pos:end="85:43"><name pos:start="85:31" pos:end="85:31">s</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:43">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="89:9" pos:end="89:35">return <expr pos:start="89:16" pos:end="89:34"><name pos:start="89:16" pos:end="89:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:46">/* Image is at s-&gt;buff_start[buf.index] */</comment>

    <if_stmt pos:start="97:5" pos:end="191:5"><if pos:start="97:5" pos:end="129:5">if <condition pos:start="97:8" pos:end="97:78">(<expr pos:start="97:9" pos:end="97:77"><call pos:start="97:9" pos:end="97:49"><name pos:start="97:9" pos:end="97:29">avpriv_atomic_int_get</name><argument_list pos:start="97:30" pos:end="97:49">(<argument pos:start="97:31" pos:end="97:48"><expr pos:start="97:31" pos:end="97:48"><operator pos:start="97:31" pos:end="97:31">&amp;</operator><name pos:start="97:32" pos:end="97:48"><name pos:start="97:32" pos:end="97:32">s</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:48">buffers_queued</name></name></expr></argument>)</argument_list></call> <operator pos:start="97:51" pos:end="97:52">==</operator> <call pos:start="97:54" pos:end="97:77"><name pos:start="97:54" pos:end="97:58">FFMAX</name><argument_list pos:start="97:59" pos:end="97:77">(<argument pos:start="97:60" pos:end="97:73"><expr pos:start="97:60" pos:end="97:73"><name pos:start="97:60" pos:end="97:69"><name pos:start="97:60" pos:end="97:60">s</name><operator pos:start="97:61" pos:end="97:62">-&gt;</operator><name pos:start="97:63" pos:end="97:69">buffers</name></name> <operator pos:start="97:71" pos:end="97:71">/</operator> <literal type="number" pos:start="97:73" pos:end="97:73">8</literal></expr></argument>, <argument pos:start="97:76" pos:end="97:76"><expr pos:start="97:76" pos:end="97:76"><literal type="number" pos:start="97:76" pos:end="97:76">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:80" pos:end="129:5">{<block_content pos:start="101:9" pos:end="127:63">

        <comment type="block" pos:start="99:9" pos:end="99:84">/* when we start getting low on queued buffers, fall back on copying data */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:48"><expr pos:start="101:9" pos:end="101:47"><name pos:start="101:9" pos:end="101:11">res</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <call pos:start="101:15" pos:end="101:47"><name pos:start="101:15" pos:end="101:27">av_new_packet</name><argument_list pos:start="101:28" pos:end="101:47">(<argument pos:start="101:29" pos:end="101:31"><expr pos:start="101:29" pos:end="101:31"><name pos:start="101:29" pos:end="101:31">pkt</name></expr></argument>, <argument pos:start="101:34" pos:end="101:46"><expr pos:start="101:34" pos:end="101:46"><name pos:start="101:34" pos:end="101:46"><name pos:start="101:34" pos:end="101:36">buf</name><operator pos:start="101:37" pos:end="101:37">.</operator><name pos:start="101:38" pos:end="101:46">bytesused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="109:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:20">(<expr pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:15">res</name> <operator pos:start="103:17" pos:end="103:17">&lt;</operator> <literal type="number" pos:start="103:19" pos:end="103:19">0</literal></expr>)</condition> <block pos:start="103:22" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:23">

            <expr_stmt pos:start="105:13" pos:end="105:70"><expr pos:start="105:13" pos:end="105:69"><call pos:start="105:13" pos:end="105:69"><name pos:start="105:13" pos:end="105:18">av_log</name><argument_list pos:start="105:19" pos:end="105:69">(<argument pos:start="105:20" pos:end="105:22"><expr pos:start="105:20" pos:end="105:22"><name pos:start="105:20" pos:end="105:22">ctx</name></expr></argument>, <argument pos:start="105:25" pos:end="105:36"><expr pos:start="105:25" pos:end="105:36"><name pos:start="105:25" pos:end="105:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="105:39" pos:end="105:68"><expr pos:start="105:39" pos:end="105:68"><literal type="string" pos:start="105:39" pos:end="105:68">"Error allocating a packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:23">return <expr pos:start="107:20" pos:end="107:22"><name pos:start="107:20" pos:end="107:22">res</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:66"><expr pos:start="111:9" pos:end="111:65"><call pos:start="111:9" pos:end="111:65"><name pos:start="111:9" pos:end="111:14">memcpy</name><argument_list pos:start="111:15" pos:end="111:65">(<argument pos:start="111:16" pos:end="111:24"><expr pos:start="111:16" pos:end="111:24"><name pos:start="111:16" pos:end="111:24"><name pos:start="111:16" pos:end="111:18">pkt</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:24">data</name></name></expr></argument>, <argument pos:start="111:27" pos:end="111:49"><expr pos:start="111:27" pos:end="111:49"><name pos:start="111:27" pos:end="111:49"><name pos:start="111:27" pos:end="111:27">s</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:38">buf_start</name><index pos:start="111:39" pos:end="111:49">[<expr pos:start="111:40" pos:end="111:48"><name pos:start="111:40" pos:end="111:48"><name pos:start="111:40" pos:end="111:42">buf</name><operator pos:start="111:43" pos:end="111:43">.</operator><name pos:start="111:44" pos:end="111:48">index</name></name></expr>]</index></name></expr></argument>, <argument pos:start="111:52" pos:end="111:64"><expr pos:start="111:52" pos:end="111:64"><name pos:start="111:52" pos:end="111:64"><name pos:start="111:52" pos:end="111:54">buf</name><operator pos:start="111:55" pos:end="111:55">.</operator><name pos:start="111:56" pos:end="111:64">bytesused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:46"><expr pos:start="115:9" pos:end="115:45"><name pos:start="115:9" pos:end="115:11">res</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="115:45"><name pos:start="115:15" pos:end="115:19">ioctl</name><argument_list pos:start="115:20" pos:end="115:45">(<argument pos:start="115:21" pos:end="115:25"><expr pos:start="115:21" pos:end="115:25"><name pos:start="115:21" pos:end="115:25"><name pos:start="115:21" pos:end="115:21">s</name><operator pos:start="115:22" pos:end="115:23">-&gt;</operator><name pos:start="115:24" pos:end="115:25">fd</name></name></expr></argument>, <argument pos:start="115:28" pos:end="115:38"><expr pos:start="115:28" pos:end="115:38"><name pos:start="115:28" pos:end="115:38">VIDIOC_QBUF</name></expr></argument>, <argument pos:start="115:41" pos:end="115:44"><expr pos:start="115:41" pos:end="115:44"><operator pos:start="115:41" pos:end="115:41">&amp;</operator><name pos:start="115:42" pos:end="115:44">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="125:9"><if pos:start="117:9" pos:end="125:9">if <condition pos:start="117:12" pos:end="117:20">(<expr pos:start="117:13" pos:end="117:19"><name pos:start="117:13" pos:end="117:15">res</name> <operator pos:start="117:17" pos:end="117:17">&lt;</operator> <literal type="number" pos:start="117:19" pos:end="117:19">0</literal></expr>)</condition> <block pos:start="117:22" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:34">

            <expr_stmt pos:start="119:13" pos:end="119:62"><expr pos:start="119:13" pos:end="119:61"><call pos:start="119:13" pos:end="119:61"><name pos:start="119:13" pos:end="119:18">av_log</name><argument_list pos:start="119:19" pos:end="119:61">(<argument pos:start="119:20" pos:end="119:22"><expr pos:start="119:20" pos:end="119:22"><name pos:start="119:20" pos:end="119:22">ctx</name></expr></argument>, <argument pos:start="119:25" pos:end="119:36"><expr pos:start="119:25" pos:end="119:36"><name pos:start="119:25" pos:end="119:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:39" pos:end="119:60"><expr pos:start="119:39" pos:end="119:60"><literal type="string" pos:start="119:39" pos:end="119:60">"ioctl(VIDIOC_QBUF)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:32"><expr pos:start="121:13" pos:end="121:31"><call pos:start="121:13" pos:end="121:31"><name pos:start="121:13" pos:end="121:26">av_free_packet</name><argument_list pos:start="121:27" pos:end="121:31">(<argument pos:start="121:28" pos:end="121:30"><expr pos:start="121:28" pos:end="121:30"><name pos:start="121:28" pos:end="121:30">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:34">return <expr pos:start="123:20" pos:end="123:33"><call pos:start="123:20" pos:end="123:33"><name pos:start="123:20" pos:end="123:26">AVERROR</name><argument_list pos:start="123:27" pos:end="123:33">(<argument pos:start="123:28" pos:end="123:32"><expr pos:start="123:28" pos:end="123:32"><name pos:start="123:28" pos:end="123:32">errno</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:63"><expr pos:start="127:9" pos:end="127:62"><call pos:start="127:9" pos:end="127:62"><name pos:start="127:9" pos:end="127:39">avpriv_atomic_int_add_and_fetch</name><argument_list pos:start="127:40" pos:end="127:62">(<argument pos:start="127:41" pos:end="127:58"><expr pos:start="127:41" pos:end="127:58"><operator pos:start="127:41" pos:end="127:41">&amp;</operator><name pos:start="127:42" pos:end="127:58"><name pos:start="127:42" pos:end="127:42">s</name><operator pos:start="127:43" pos:end="127:44">-&gt;</operator><name pos:start="127:45" pos:end="127:58">buffers_queued</name></name></expr></argument>, <argument pos:start="127:61" pos:end="127:61"><expr pos:start="127:61" pos:end="127:61"><literal type="number" pos:start="127:61" pos:end="127:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="129:7" pos:end="191:5">else <block pos:start="129:12" pos:end="191:5">{<block_content pos:start="131:9" pos:end="189:9">

        <decl_stmt pos:start="131:9" pos:end="131:41"><decl pos:start="131:9" pos:end="131:40"><type pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:24"><name pos:start="131:9" pos:end="131:14">struct</name> <name pos:start="131:16" pos:end="131:24">buff_data</name></name> <modifier pos:start="131:26" pos:end="131:26">*</modifier></type><name pos:start="131:27" pos:end="131:40">buf_descriptor</name></decl>;</decl_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:48"><expr pos:start="135:9" pos:end="135:47"><name pos:start="135:9" pos:end="135:17"><name pos:start="135:9" pos:end="135:11">pkt</name><operator pos:start="135:12" pos:end="135:13">-&gt;</operator><name pos:start="135:14" pos:end="135:17">data</name></name>     <operator pos:start="135:23" pos:end="135:23">=</operator> <name pos:start="135:25" pos:end="135:47"><name pos:start="135:25" pos:end="135:25">s</name><operator pos:start="135:26" pos:end="135:27">-&gt;</operator><name pos:start="135:28" pos:end="135:36">buf_start</name><index pos:start="135:37" pos:end="135:47">[<expr pos:start="135:38" pos:end="135:46"><name pos:start="135:38" pos:end="135:46"><name pos:start="135:38" pos:end="135:40">buf</name><operator pos:start="135:41" pos:end="135:41">.</operator><name pos:start="135:42" pos:end="135:46">index</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="140:0"><expr pos:start="137:9" pos:end="137:37"><name pos:start="137:9" pos:end="137:17"><name pos:start="137:9" pos:end="137:11">pkt</name><operator pos:start="137:12" pos:end="137:13">-&gt;</operator><name pos:start="137:14" pos:end="137:17">size</name></name>     <operator pos:start="137:23" pos:end="137:23">=</operator> <name pos:start="137:25" pos:end="137:37"><name pos:start="137:25" pos:end="137:27">buf</name><operator pos:start="137:28" pos:end="137:28">.</operator><name pos:start="137:29" pos:end="137:37">bytesused</name></name></expr>;</expr_stmt>

<cpp:if pos:start="139:1" pos:end="139:26">#<cpp:directive pos:start="139:2" pos:end="139:3">if</cpp:directive> <expr pos:start="139:5" pos:end="139:26"><name pos:start="139:5" pos:end="139:26">FF_API_DESTRUCT_PACKET</name></expr></cpp:if>

<decl_stmt pos:start="141:1" pos:end="143:45"><decl pos:start="141:1" pos:end="143:44"><type pos:start="141:1" pos:end="141:31"><name pos:start="141:1" pos:end="141:31">FF_DISABLE_DEPRECATION_WARNINGS</name></type>

        <name pos:start="143:9" pos:end="143:21"><name pos:start="143:9" pos:end="143:11">pkt</name><operator pos:start="143:12" pos:end="143:13">-&gt;</operator><name pos:start="143:14" pos:end="143:21">destruct</name></name> <init pos:start="143:23" pos:end="143:44">= <expr pos:start="143:25" pos:end="143:44"><name pos:start="143:25" pos:end="143:44">dummy_release_buffer</name></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="145:1" pos:end="151:61"><decl pos:start="145:1" pos:end="151:60"><type pos:start="145:1" pos:end="148:0"><name pos:start="145:1" pos:end="148:0">FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>



        <name pos:start="151:9" pos:end="151:22">buf_descriptor</name> <init pos:start="151:24" pos:end="151:60">= <expr pos:start="151:26" pos:end="151:60"><call pos:start="151:26" pos:end="151:60"><name pos:start="151:26" pos:end="151:34">av_malloc</name><argument_list pos:start="151:35" pos:end="151:60">(<argument pos:start="151:36" pos:end="151:59"><expr pos:start="151:36" pos:end="151:59"><sizeof pos:start="151:36" pos:end="151:59">sizeof<argument_list pos:start="151:42" pos:end="151:59">(<argument pos:start="151:43" pos:end="151:58"><expr pos:start="151:43" pos:end="151:58">struct <name pos:start="151:50" pos:end="151:58">buff_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="153:9" pos:end="169:9"><if pos:start="153:9" pos:end="169:9">if <condition pos:start="153:12" pos:end="153:35">(<expr pos:start="153:13" pos:end="153:34"><name pos:start="153:13" pos:end="153:26">buf_descriptor</name> <operator pos:start="153:28" pos:end="153:29">==</operator> <name pos:start="153:31" pos:end="153:34">NULL</name></expr>)</condition> <block pos:start="153:37" pos:end="169:9">{<block_content pos:start="161:13" pos:end="167:35">

            <comment type="block" pos:start="155:13" pos:end="159:15">/* Something went wrong... Since av_malloc() failed, we cannot even

             * allocate a buffer for memcpying into it

             */</comment>

            <expr_stmt pos:start="161:13" pos:end="161:82"><expr pos:start="161:13" pos:end="161:81"><call pos:start="161:13" pos:end="161:81"><name pos:start="161:13" pos:end="161:18">av_log</name><argument_list pos:start="161:19" pos:end="161:81">(<argument pos:start="161:20" pos:end="161:22"><expr pos:start="161:20" pos:end="161:22"><name pos:start="161:20" pos:end="161:22">ctx</name></expr></argument>, <argument pos:start="161:25" pos:end="161:36"><expr pos:start="161:25" pos:end="161:36"><name pos:start="161:25" pos:end="161:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:39" pos:end="161:80"><expr pos:start="161:39" pos:end="161:80"><literal type="string" pos:start="161:39" pos:end="161:80">"Failed to allocate a buffer descriptor\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:50"><expr pos:start="163:13" pos:end="163:49"><name pos:start="163:13" pos:end="163:15">res</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <call pos:start="163:19" pos:end="163:49"><name pos:start="163:19" pos:end="163:23">ioctl</name><argument_list pos:start="163:24" pos:end="163:49">(<argument pos:start="163:25" pos:end="163:29"><expr pos:start="163:25" pos:end="163:29"><name pos:start="163:25" pos:end="163:29"><name pos:start="163:25" pos:end="163:25">s</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:29">fd</name></name></expr></argument>, <argument pos:start="163:32" pos:end="163:42"><expr pos:start="163:32" pos:end="163:42"><name pos:start="163:32" pos:end="163:42">VIDIOC_QBUF</name></expr></argument>, <argument pos:start="163:45" pos:end="163:48"><expr pos:start="163:45" pos:end="163:48"><operator pos:start="163:45" pos:end="163:45">&amp;</operator><name pos:start="163:46" pos:end="163:48">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <return pos:start="167:13" pos:end="167:35">return <expr pos:start="167:20" pos:end="167:34"><call pos:start="167:20" pos:end="167:34"><name pos:start="167:20" pos:end="167:26">AVERROR</name><argument_list pos:start="167:27" pos:end="167:34">(<argument pos:start="167:28" pos:end="167:33"><expr pos:start="167:28" pos:end="167:33"><name pos:start="167:28" pos:end="167:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:38"><expr pos:start="171:9" pos:end="171:37"><name pos:start="171:9" pos:end="171:26"><name pos:start="171:9" pos:end="171:22">buf_descriptor</name><operator pos:start="171:23" pos:end="171:24">-&gt;</operator><name pos:start="171:25" pos:end="171:26">fd</name></name>    <operator pos:start="171:31" pos:end="171:31">=</operator> <name pos:start="171:33" pos:end="171:37"><name pos:start="171:33" pos:end="171:33">s</name><operator pos:start="171:34" pos:end="171:35">-&gt;</operator><name pos:start="171:36" pos:end="171:37">fd</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:42"><expr pos:start="173:9" pos:end="173:41"><name pos:start="173:9" pos:end="173:29"><name pos:start="173:9" pos:end="173:22">buf_descriptor</name><operator pos:start="173:23" pos:end="173:24">-&gt;</operator><name pos:start="173:25" pos:end="173:29">index</name></name> <operator pos:start="173:31" pos:end="173:31">=</operator> <name pos:start="173:33" pos:end="173:41"><name pos:start="173:33" pos:end="173:35">buf</name><operator pos:start="173:36" pos:end="173:36">.</operator><name pos:start="173:37" pos:end="173:41">index</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:34"><expr pos:start="175:9" pos:end="175:33"><name pos:start="175:9" pos:end="175:25"><name pos:start="175:9" pos:end="175:22">buf_descriptor</name><operator pos:start="175:23" pos:end="175:24">-&gt;</operator><name pos:start="175:25" pos:end="175:25">s</name></name>     <operator pos:start="175:31" pos:end="175:31">=</operator> <name pos:start="175:33" pos:end="175:33">s</name></expr>;</expr_stmt>



        <expr_stmt pos:start="179:9" pos:end="181:55"><expr pos:start="179:9" pos:end="181:54"><name pos:start="179:9" pos:end="179:16"><name pos:start="179:9" pos:end="179:11">pkt</name><operator pos:start="179:12" pos:end="179:13">-&gt;</operator><name pos:start="179:14" pos:end="179:16">buf</name></name> <operator pos:start="179:18" pos:end="179:18">=</operator> <call pos:start="179:20" pos:end="181:54"><name pos:start="179:20" pos:end="179:35">av_buffer_create</name><argument_list pos:start="179:36" pos:end="181:54">(<argument pos:start="179:37" pos:end="179:45"><expr pos:start="179:37" pos:end="179:45"><name pos:start="179:37" pos:end="179:45"><name pos:start="179:37" pos:end="179:39">pkt</name><operator pos:start="179:40" pos:end="179:41">-&gt;</operator><name pos:start="179:42" pos:end="179:45">data</name></name></expr></argument>, <argument pos:start="179:48" pos:end="179:56"><expr pos:start="179:48" pos:end="179:56"><name pos:start="179:48" pos:end="179:56"><name pos:start="179:48" pos:end="179:50">pkt</name><operator pos:start="179:51" pos:end="179:52">-&gt;</operator><name pos:start="179:53" pos:end="179:56">size</name></name></expr></argument>, <argument pos:start="179:59" pos:end="179:77"><expr pos:start="179:59" pos:end="179:77"><name pos:start="179:59" pos:end="179:77">mmap_release_buffer</name></expr></argument>,

                                    <argument pos:start="181:37" pos:end="181:50"><expr pos:start="181:37" pos:end="181:50"><name pos:start="181:37" pos:end="181:50">buf_descriptor</name></expr></argument>, <argument pos:start="181:53" pos:end="181:53"><expr pos:start="181:53" pos:end="181:53"><literal type="number" pos:start="181:53" pos:end="181:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="189:9"><if pos:start="183:9" pos:end="189:9">if <condition pos:start="183:12" pos:end="183:22">(<expr pos:start="183:13" pos:end="183:21"><operator pos:start="183:13" pos:end="183:13">!</operator><name pos:start="183:14" pos:end="183:21"><name pos:start="183:14" pos:end="183:16">pkt</name><operator pos:start="183:17" pos:end="183:18">-&gt;</operator><name pos:start="183:19" pos:end="183:21">buf</name></name></expr>)</condition> <block pos:start="183:24" pos:end="189:9">{<block_content pos:start="185:13" pos:end="187:35">

            <expr_stmt pos:start="185:13" pos:end="185:38"><expr pos:start="185:13" pos:end="185:37"><call pos:start="185:13" pos:end="185:37"><name pos:start="185:13" pos:end="185:20">av_freep</name><argument_list pos:start="185:21" pos:end="185:37">(<argument pos:start="185:22" pos:end="185:36"><expr pos:start="185:22" pos:end="185:36"><operator pos:start="185:22" pos:end="185:22">&amp;</operator><name pos:start="185:23" pos:end="185:36">buf_descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="187:13" pos:end="187:35">return <expr pos:start="187:20" pos:end="187:34"><call pos:start="187:20" pos:end="187:34"><name pos:start="187:20" pos:end="187:26">AVERROR</name><argument_list pos:start="187:27" pos:end="187:34">(<argument pos:start="187:28" pos:end="187:33"><expr pos:start="187:28" pos:end="187:33"><name pos:start="187:28" pos:end="187:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:79"><expr pos:start="193:5" pos:end="193:78"><name pos:start="193:5" pos:end="193:12"><name pos:start="193:5" pos:end="193:7">pkt</name><operator pos:start="193:8" pos:end="193:9">-&gt;</operator><name pos:start="193:10" pos:end="193:12">pts</name></name> <operator pos:start="193:14" pos:end="193:14">=</operator> <name pos:start="193:16" pos:end="193:35"><name pos:start="193:16" pos:end="193:18">buf</name><operator pos:start="193:19" pos:end="193:19">.</operator><name pos:start="193:20" pos:end="193:28">timestamp</name><operator pos:start="193:29" pos:end="193:29">.</operator><name pos:start="193:30" pos:end="193:35">tv_sec</name></name> <operator pos:start="193:37" pos:end="193:37">*</operator> <call pos:start="193:39" pos:end="193:54"><name pos:start="193:39" pos:end="193:45">INT64_C</name><argument_list pos:start="193:46" pos:end="193:54">(<argument pos:start="193:47" pos:end="193:53"><expr pos:start="193:47" pos:end="193:53"><literal type="number" pos:start="193:47" pos:end="193:53">1000000</literal></expr></argument>)</argument_list></call> <operator pos:start="193:56" pos:end="193:56">+</operator> <name pos:start="193:58" pos:end="193:78"><name pos:start="193:58" pos:end="193:60">buf</name><operator pos:start="193:61" pos:end="193:61">.</operator><name pos:start="193:62" pos:end="193:70">timestamp</name><operator pos:start="193:71" pos:end="193:71">.</operator><name pos:start="193:72" pos:end="193:78">tv_usec</name></name></expr>;</expr_stmt>



    <return pos:start="197:5" pos:end="197:33">return <expr pos:start="197:12" pos:end="197:32"><name pos:start="197:12" pos:end="197:32"><name pos:start="197:12" pos:end="197:12">s</name><operator pos:start="197:13" pos:end="197:14">-&gt;</operator><name pos:start="197:15" pos:end="197:21">buf_len</name><index pos:start="197:22" pos:end="197:32">[<expr pos:start="197:23" pos:end="197:31"><name pos:start="197:23" pos:end="197:31"><name pos:start="197:23" pos:end="197:25">buf</name><operator pos:start="197:26" pos:end="197:26">.</operator><name pos:start="197:27" pos:end="197:31">index</name></name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>
</unit>
