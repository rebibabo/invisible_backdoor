<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16302.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">virtqueue_map_iovec</name><parameter_list pos:start="1:32" pos:end="5:45">(<parameter pos:start="1:33" pos:end="1:48"><decl pos:start="1:33" pos:end="1:48"><type pos:start="1:33" pos:end="1:48"><name pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:38">struct</name> <name pos:start="1:40" pos:end="1:44">iovec</name></name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">sg</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:56">hwaddr</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">addr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:52"><decl pos:start="3:33" pos:end="3:52"><type pos:start="3:33" pos:end="3:52"><name pos:start="3:33" pos:end="3:40">unsigned</name> <name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:52">num_sg</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:75"><decl pos:start="3:55" pos:end="3:75"><type pos:start="3:55" pos:end="3:75"><name pos:start="3:55" pos:end="3:62">unsigned</name> <name pos:start="3:64" pos:end="3:66">int</name></type> <name pos:start="3:68" pos:end="3:75">max_size</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:44"><decl pos:start="5:33" pos:end="5:44"><type pos:start="5:33" pos:end="5:44"><name pos:start="5:33" pos:end="5:35">int</name></type> <name pos:start="5:37" pos:end="5:44">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="63:1">{<block_content pos:start="9:5" pos:end="61:5">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="34:0"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:14">len</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="19:7">/* Note: this function MUST validate input, some callers

     * are passing in num_sg values received over the network.

     */</comment>

    <comment type="block" pos:start="21:5" pos:end="27:7">/* TODO: teach all callers that this can fail, and return failure instead

     * of asserting here.

     * When we do, we might be able to re-enable NDEBUG below.

     */</comment>

<cpp:ifdef pos:start="29:1" pos:end="29:13">#<cpp:directive pos:start="29:2" pos:end="29:6">ifdef</cpp:directive> <name pos:start="29:8" pos:end="29:13">NDEBUG</name></cpp:ifdef>

<cpp:error pos:start="31:1" pos:end="31:44">#<cpp:directive pos:start="31:2" pos:end="31:6">error</cpp:directive> building with NDEBUG is not supported</cpp:error>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><call pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:31">(<argument pos:start="35:12" pos:end="35:30"><expr pos:start="35:12" pos:end="35:30"><operator pos:start="35:12" pos:end="35:12">*</operator><name pos:start="35:13" pos:end="35:18">num_sg</name> <operator pos:start="35:20" pos:end="35:21">&lt;=</operator> <name pos:start="35:23" pos:end="35:30">max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="39:5" pos:end="61:5">for <control pos:start="39:9" pos:end="39:33">(<init pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</init> <condition pos:start="39:17" pos:end="39:28"><expr pos:start="39:17" pos:end="39:27"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <operator pos:start="39:21" pos:end="39:21">*</operator><name pos:start="39:22" pos:end="39:27">num_sg</name></expr>;</condition> <incr pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><name pos:start="39:30" pos:end="39:30">i</name><operator pos:start="39:31" pos:end="39:32">++</operator></expr></incr>)</control> <block pos:start="39:35" pos:end="61:5">{<block_content pos:start="41:9" pos:end="59:9">

        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:11">len</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:19"><name pos:start="41:15" pos:end="41:16">sg</name><index pos:start="41:17" pos:end="41:19">[<expr pos:start="41:18" pos:end="41:18"><name pos:start="41:18" pos:end="41:18">i</name></expr>]</index></name><operator pos:start="41:20" pos:end="41:20">.</operator><name pos:start="41:21" pos:end="41:27">iov_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:74"><expr pos:start="43:9" pos:end="43:73"><name pos:start="43:9" pos:end="43:13"><name pos:start="43:9" pos:end="43:10">sg</name><index pos:start="43:11" pos:end="43:13">[<expr pos:start="43:12" pos:end="43:12"><name pos:start="43:12" pos:end="43:12">i</name></expr>]</index></name><operator pos:start="43:14" pos:end="43:14">.</operator><name pos:start="43:15" pos:end="43:22">iov_base</name> <operator pos:start="43:24" pos:end="43:24">=</operator> <call pos:start="43:26" pos:end="43:73"><name pos:start="43:26" pos:end="43:48">cpu_physical_memory_map</name><argument_list pos:start="43:49" pos:end="43:73">(<argument pos:start="43:50" pos:end="43:56"><expr pos:start="43:50" pos:end="43:56"><name pos:start="43:50" pos:end="43:56"><name pos:start="43:50" pos:end="43:53">addr</name><index pos:start="43:54" pos:end="43:56">[<expr pos:start="43:55" pos:end="43:55"><name pos:start="43:55" pos:end="43:55">i</name></expr>]</index></name></expr></argument>, <argument pos:start="43:59" pos:end="43:62"><expr pos:start="43:59" pos:end="43:62"><operator pos:start="43:59" pos:end="43:59">&amp;</operator><name pos:start="43:60" pos:end="43:62">len</name></expr></argument>, <argument pos:start="43:65" pos:end="43:72"><expr pos:start="43:65" pos:end="43:72"><name pos:start="43:65" pos:end="43:72">is_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:28">(<expr pos:start="45:13" pos:end="45:27"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:18"><name pos:start="45:14" pos:end="45:15">sg</name><index pos:start="45:16" pos:end="45:18">[<expr pos:start="45:17" pos:end="45:17"><name pos:start="45:17" pos:end="45:17">i</name></expr>]</index></name><operator pos:start="45:19" pos:end="45:19">.</operator><name pos:start="45:20" pos:end="45:27">iov_base</name></expr>)</condition> <block pos:start="45:30" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:20">

            <expr_stmt pos:start="47:13" pos:end="47:68"><expr pos:start="47:13" pos:end="47:67"><call pos:start="47:13" pos:end="47:67"><name pos:start="47:13" pos:end="47:24">error_report</name><argument_list pos:start="47:25" pos:end="47:67">(<argument pos:start="47:26" pos:end="47:66"><expr pos:start="47:26" pos:end="47:66"><literal type="string" pos:start="47:26" pos:end="47:66">"virtio: error trying to map MMIO memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:20"><expr pos:start="49:13" pos:end="49:19"><call pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:16">exit</name><argument_list pos:start="49:17" pos:end="49:19">(<argument pos:start="49:18" pos:end="49:18"><expr pos:start="49:18" pos:end="49:18"><literal type="number" pos:start="49:18" pos:end="49:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:33">(<expr pos:start="53:13" pos:end="53:32"><name pos:start="53:13" pos:end="53:15">len</name> <operator pos:start="53:17" pos:end="53:18">!=</operator> <name pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:21">sg</name><index pos:start="53:22" pos:end="53:24">[<expr pos:start="53:23" pos:end="53:23"><name pos:start="53:23" pos:end="53:23">i</name></expr>]</index></name><operator pos:start="53:25" pos:end="53:25">.</operator><name pos:start="53:26" pos:end="53:32">iov_len</name></expr>)</condition> <block pos:start="53:35" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:20">

            <expr_stmt pos:start="55:13" pos:end="55:60"><expr pos:start="55:13" pos:end="55:59"><call pos:start="55:13" pos:end="55:59"><name pos:start="55:13" pos:end="55:24">error_report</name><argument_list pos:start="55:25" pos:end="55:59">(<argument pos:start="55:26" pos:end="55:58"><expr pos:start="55:26" pos:end="55:58"><literal type="string" pos:start="55:26" pos:end="55:58">"virtio: unexpected memory split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:20"><expr pos:start="57:13" pos:end="57:19"><call pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:16">exit</name><argument_list pos:start="57:17" pos:end="57:19">(<argument pos:start="57:18" pos:end="57:18"><expr pos:start="57:18" pos:end="57:18"><literal type="number" pos:start="57:18" pos:end="57:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
