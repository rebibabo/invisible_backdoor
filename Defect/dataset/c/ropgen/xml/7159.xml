<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7159.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:73"><name pos:start="1:1" pos:end="1:18">grlib_irqmp_writel</name><argument_list pos:start="1:19" pos:end="1:73">(<argument pos:start="1:20" pos:end="1:31">void *opaque</argument>, <argument pos:start="1:34" pos:end="1:56">target_phys_addr_t addr</argument>, <argument pos:start="1:59" pos:end="1:72">uint32_t value</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="169:1">{<block_content pos:start="5:5" pos:end="167:54">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:9">IRQMP</name>      <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:21">irqmp</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">IRQMPState</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:21">state</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:26"><expr pos:start="11:5" pos:end="11:25"><call pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:25">(<argument pos:start="11:12" pos:end="11:24"><expr pos:start="11:12" pos:end="11:24"><name pos:start="11:12" pos:end="11:16">irqmp</name> <operator pos:start="11:18" pos:end="11:19">!=</operator> <name pos:start="11:21" pos:end="11:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:25"><expr pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:9">state</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <name pos:start="13:13" pos:end="13:24"><name pos:start="13:13" pos:end="13:17">irqmp</name><operator pos:start="13:18" pos:end="13:19">-&gt;</operator><name pos:start="13:20" pos:end="13:24">state</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:25">(<argument pos:start="15:12" pos:end="15:24"><expr pos:start="15:12" pos:end="15:24"><name pos:start="15:12" pos:end="15:16">state</name> <operator pos:start="15:18" pos:end="15:19">!=</operator> <name pos:start="15:21" pos:end="15:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:17"><expr pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:8">addr</name> <operator pos:start="19:10" pos:end="19:11">&amp;=</operator> <literal type="number" pos:start="19:13" pos:end="19:16">0xff</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:26">/* global registers */</comment>

    <switch pos:start="25:5" pos:end="93:5">switch <condition pos:start="25:12" pos:end="25:17">(<expr pos:start="25:13" pos:end="25:16"><name pos:start="25:13" pos:end="25:16">addr</name></expr>)</condition> <block pos:start="25:19" pos:end="93:5">{<block_content pos:start="27:5" pos:end="91:14">

    <case pos:start="27:5" pos:end="27:22">case <expr pos:start="27:10" pos:end="27:21"><name pos:start="27:10" pos:end="27:21">LEVEL_OFFSET</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:29"><expr pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:13">value</name> <operator pos:start="29:15" pos:end="29:16">&amp;=</operator> <literal type="number" pos:start="29:18" pos:end="29:23">0xFFFF</literal> <operator pos:start="29:25" pos:end="29:26">&lt;&lt;</operator> <literal type="number" pos:start="29:28" pos:end="29:28">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="29:31" pos:end="29:54">/* clean up the value */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:29"><expr pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:13">state</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:20">level</name></name> <operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:28">value</name></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>



    <case pos:start="37:5" pos:end="37:24">case <expr pos:start="37:10" pos:end="37:23"><name pos:start="37:10" pos:end="37:23">PENDING_OFFSET</name></expr>:</case>

        <comment type="block" pos:start="39:9" pos:end="39:23">/* Read Only */</comment>

        <return pos:start="41:9" pos:end="41:15">return;</return>



    <case pos:start="45:5" pos:end="45:23">case <expr pos:start="45:10" pos:end="45:22"><name pos:start="45:10" pos:end="45:22">FORCE0_OFFSET</name></expr>:</case>

        <comment type="block" pos:start="47:9" pos:end="47:73">/* This register is an "alias" for the force register of CPU 0 */</comment>



        <expr_stmt pos:start="51:9" pos:end="51:24"><expr pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:13">value</name> <operator pos:start="51:15" pos:end="51:16">&amp;=</operator> <literal type="number" pos:start="51:18" pos:end="51:23">0xFFFE</literal></expr>;</expr_stmt> <comment type="block" pos:start="51:26" pos:end="51:49">/* clean up the value */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:13">state</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:20">force</name><index pos:start="53:21" pos:end="53:23">[<expr pos:start="53:22" pos:end="53:22"><literal type="number" pos:start="53:22" pos:end="53:22">0</literal></expr>]</index></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:31">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:45"><expr pos:start="55:9" pos:end="55:44"><call pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:30">grlib_irqmp_check_irqs</name><argument_list pos:start="55:31" pos:end="55:44">(<argument pos:start="55:32" pos:end="55:43"><expr pos:start="55:32" pos:end="55:43"><name pos:start="55:32" pos:end="55:43"><name pos:start="55:32" pos:end="55:36">irqmp</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:43">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>



    <case pos:start="61:5" pos:end="61:22">case <expr pos:start="61:10" pos:end="61:21"><name pos:start="61:10" pos:end="61:21">CLEAR_OFFSET</name></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:20"><expr pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:13">value</name> <operator pos:start="63:15" pos:end="63:16">&amp;=</operator> <operator pos:start="63:18" pos:end="63:18">~</operator><literal type="number" pos:start="63:19" pos:end="63:19">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="63:22" pos:end="63:45">/* clean up the value */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:33"><expr pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:13">state</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:22">pending</name></name> <operator pos:start="65:24" pos:end="65:25">&amp;=</operator> <operator pos:start="65:27" pos:end="65:27">~</operator><name pos:start="65:28" pos:end="65:32">value</name></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:15">return;</return>



    <case pos:start="71:5" pos:end="71:26">case <expr pos:start="71:10" pos:end="71:25"><name pos:start="71:10" pos:end="71:25">MP_STATUS_OFFSET</name></expr>:</case>

        <comment type="block" pos:start="73:9" pos:end="73:40">/* Read Only (no SMP support) */</comment>

        <return pos:start="75:9" pos:end="75:15">return;</return>



    <case pos:start="79:5" pos:end="79:26">case <expr pos:start="79:10" pos:end="79:25"><name pos:start="79:10" pos:end="79:25">BROADCAST_OFFSET</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:24"><expr pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:13">value</name> <operator pos:start="81:15" pos:end="81:16">&amp;=</operator> <literal type="number" pos:start="81:18" pos:end="81:23">0xFFFE</literal></expr>;</expr_stmt> <comment type="block" pos:start="81:26" pos:end="81:49">/* clean up the value */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:33"><expr pos:start="83:9" pos:end="83:32"><name pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:13">state</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:24">broadcast</name></name> <operator pos:start="83:26" pos:end="83:26">=</operator> <name pos:start="83:28" pos:end="83:32">value</name></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:15">return;</return>



    <default pos:start="89:5" pos:end="89:12">default:</default>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="97:5" pos:end="97:24">/* mask registers */</comment>

    <if_stmt pos:start="99:5" pos:end="115:5"><if pos:start="99:5" pos:end="115:5">if <condition pos:start="99:8" pos:end="99:51">(<expr pos:start="99:9" pos:end="99:50"><name pos:start="99:9" pos:end="99:12">addr</name> <operator pos:start="99:14" pos:end="99:15">&gt;=</operator> <name pos:start="99:17" pos:end="99:27">MASK_OFFSET</name> <operator pos:start="99:29" pos:end="99:30">&amp;&amp;</operator> <name pos:start="99:32" pos:end="99:35">addr</name> <operator pos:start="99:37" pos:end="99:37">&lt;</operator> <name pos:start="99:39" pos:end="99:50">FORCE_OFFSET</name></expr>)</condition> <block pos:start="99:53" pos:end="115:5">{<block_content pos:start="101:9" pos:end="113:15">

        <decl_stmt pos:start="101:9" pos:end="101:43"><decl pos:start="101:9" pos:end="101:42"><type pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:11">int</name></type> <name pos:start="101:13" pos:end="101:15">cpu</name> <init pos:start="101:17" pos:end="101:42">= <expr pos:start="101:19" pos:end="101:42"><operator pos:start="101:19" pos:end="101:19">(</operator><name pos:start="101:20" pos:end="101:23">addr</name> <operator pos:start="101:25" pos:end="101:25">-</operator> <name pos:start="101:27" pos:end="101:37">MASK_OFFSET</name><operator pos:start="101:38" pos:end="101:38">)</operator> <operator pos:start="101:40" pos:end="101:40">/</operator> <literal type="number" pos:start="101:42" pos:end="101:42">4</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:48"><expr pos:start="103:9" pos:end="103:47"><call pos:start="103:9" pos:end="103:47"><name pos:start="103:9" pos:end="103:14">assert</name><argument_list pos:start="103:15" pos:end="103:47">(<argument pos:start="103:16" pos:end="103:46"><expr pos:start="103:16" pos:end="103:46"><name pos:start="103:16" pos:end="103:18">cpu</name> <operator pos:start="103:20" pos:end="103:21">&gt;=</operator> <literal type="number" pos:start="103:23" pos:end="103:23">0</literal> <operator pos:start="103:25" pos:end="103:26">&amp;&amp;</operator> <name pos:start="103:28" pos:end="103:30">cpu</name> <operator pos:start="103:32" pos:end="103:32">&lt;</operator> <name pos:start="103:34" pos:end="103:46">IRQMP_MAX_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:20"><expr pos:start="107:9" pos:end="107:19"><name pos:start="107:9" pos:end="107:13">value</name> <operator pos:start="107:15" pos:end="107:16">&amp;=</operator> <operator pos:start="107:18" pos:end="107:18">~</operator><literal type="number" pos:start="107:19" pos:end="107:19">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="107:22" pos:end="107:45">/* clean up the value */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:33"><expr pos:start="109:9" pos:end="109:32"><name pos:start="109:9" pos:end="109:24"><name pos:start="109:9" pos:end="109:13">state</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:19">mask</name><index pos:start="109:20" pos:end="109:24">[<expr pos:start="109:21" pos:end="109:23"><name pos:start="109:21" pos:end="109:23">cpu</name></expr>]</index></name> <operator pos:start="109:26" pos:end="109:26">=</operator> <name pos:start="109:28" pos:end="109:32">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:45"><expr pos:start="111:9" pos:end="111:44"><call pos:start="111:9" pos:end="111:44"><name pos:start="111:9" pos:end="111:30">grlib_irqmp_check_irqs</name><argument_list pos:start="111:31" pos:end="111:44">(<argument pos:start="111:32" pos:end="111:43"><expr pos:start="111:32" pos:end="111:43"><name pos:start="111:32" pos:end="111:43"><name pos:start="111:32" pos:end="111:36">irqmp</name><operator pos:start="111:37" pos:end="111:38">-&gt;</operator><name pos:start="111:39" pos:end="111:43">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:25">/* force registers */</comment>

    <if_stmt pos:start="121:5" pos:end="143:5"><if pos:start="121:5" pos:end="143:5">if <condition pos:start="121:8" pos:end="121:55">(<expr pos:start="121:9" pos:end="121:54"><name pos:start="121:9" pos:end="121:12">addr</name> <operator pos:start="121:14" pos:end="121:15">&gt;=</operator> <name pos:start="121:17" pos:end="121:28">FORCE_OFFSET</name> <operator pos:start="121:30" pos:end="121:31">&amp;&amp;</operator> <name pos:start="121:33" pos:end="121:36">addr</name> <operator pos:start="121:38" pos:end="121:38">&lt;</operator> <name pos:start="121:40" pos:end="121:54">EXTENDED_OFFSET</name></expr>)</condition> <block pos:start="121:57" pos:end="143:5">{<block_content pos:start="123:9" pos:end="141:15">

        <decl_stmt pos:start="123:9" pos:end="123:44"><decl pos:start="123:9" pos:end="123:43"><type pos:start="123:9" pos:end="123:11"><name pos:start="123:9" pos:end="123:11">int</name></type> <name pos:start="123:13" pos:end="123:15">cpu</name> <init pos:start="123:17" pos:end="123:43">= <expr pos:start="123:19" pos:end="123:43"><operator pos:start="123:19" pos:end="123:19">(</operator><name pos:start="123:20" pos:end="123:23">addr</name> <operator pos:start="123:25" pos:end="123:25">-</operator> <name pos:start="123:27" pos:end="123:38">FORCE_OFFSET</name><operator pos:start="123:39" pos:end="123:39">)</operator> <operator pos:start="123:41" pos:end="123:41">/</operator> <literal type="number" pos:start="123:43" pos:end="123:43">4</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:48"><expr pos:start="125:9" pos:end="125:47"><call pos:start="125:9" pos:end="125:47"><name pos:start="125:9" pos:end="125:14">assert</name><argument_list pos:start="125:15" pos:end="125:47">(<argument pos:start="125:16" pos:end="125:46"><expr pos:start="125:16" pos:end="125:46"><name pos:start="125:16" pos:end="125:18">cpu</name> <operator pos:start="125:20" pos:end="125:21">&gt;=</operator> <literal type="number" pos:start="125:23" pos:end="125:23">0</literal> <operator pos:start="125:25" pos:end="125:26">&amp;&amp;</operator> <name pos:start="125:28" pos:end="125:30">cpu</name> <operator pos:start="125:32" pos:end="125:32">&lt;</operator> <name pos:start="125:34" pos:end="125:46">IRQMP_MAX_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <decl_stmt pos:start="129:9" pos:end="129:40"><decl pos:start="129:9" pos:end="129:39"><type pos:start="129:9" pos:end="129:16"><name pos:start="129:9" pos:end="129:16">uint32_t</name></type> <name pos:start="129:18" pos:end="129:22">force</name> <init pos:start="129:24" pos:end="129:39">= <expr pos:start="129:26" pos:end="129:39"><name pos:start="129:26" pos:end="129:30">value</name> <operator pos:start="129:32" pos:end="129:32">&amp;</operator> <literal type="number" pos:start="129:34" pos:end="129:39">0xFFFE</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="131:9" pos:end="131:48"><decl pos:start="131:9" pos:end="131:47"><type pos:start="131:9" pos:end="131:16"><name pos:start="131:9" pos:end="131:16">uint32_t</name></type> <name pos:start="131:18" pos:end="131:22">clear</name> <init pos:start="131:24" pos:end="131:47">= <expr pos:start="131:26" pos:end="131:47"><operator pos:start="131:26" pos:end="131:26">(</operator><name pos:start="131:27" pos:end="131:31">value</name> <operator pos:start="131:33" pos:end="131:34">&gt;&gt;</operator> <literal type="number" pos:start="131:36" pos:end="131:37">16</literal><operator pos:start="131:38" pos:end="131:38">)</operator> <operator pos:start="131:40" pos:end="131:40">&amp;</operator> <literal type="number" pos:start="131:42" pos:end="131:47">0xFFFE</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="133:9" pos:end="133:43"><decl pos:start="133:9" pos:end="133:42"><type pos:start="133:9" pos:end="133:16"><name pos:start="133:9" pos:end="133:16">uint32_t</name></type> <name pos:start="133:18" pos:end="133:20">old</name>   <init pos:start="133:24" pos:end="133:42">= <expr pos:start="133:26" pos:end="133:42"><name pos:start="133:26" pos:end="133:42"><name pos:start="133:26" pos:end="133:30">state</name><operator pos:start="133:31" pos:end="133:32">-&gt;</operator><name pos:start="133:33" pos:end="133:37">force</name><index pos:start="133:38" pos:end="133:42">[<expr pos:start="133:39" pos:end="133:41"><name pos:start="133:39" pos:end="133:41">cpu</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:51"><expr pos:start="137:9" pos:end="137:50"><name pos:start="137:9" pos:end="137:25"><name pos:start="137:9" pos:end="137:13">state</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:20">force</name><index pos:start="137:21" pos:end="137:25">[<expr pos:start="137:22" pos:end="137:24"><name pos:start="137:22" pos:end="137:24">cpu</name></expr>]</index></name> <operator pos:start="137:27" pos:end="137:27">=</operator> <operator pos:start="137:29" pos:end="137:29">(</operator><name pos:start="137:30" pos:end="137:32">old</name> <operator pos:start="137:34" pos:end="137:34">|</operator> <name pos:start="137:36" pos:end="137:40">force</name><operator pos:start="137:41" pos:end="137:41">)</operator> <operator pos:start="137:43" pos:end="137:43">&amp;</operator> <operator pos:start="137:45" pos:end="137:45">~</operator><name pos:start="137:46" pos:end="137:50">clear</name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:45"><expr pos:start="139:9" pos:end="139:44"><call pos:start="139:9" pos:end="139:44"><name pos:start="139:9" pos:end="139:30">grlib_irqmp_check_irqs</name><argument_list pos:start="139:31" pos:end="139:44">(<argument pos:start="139:32" pos:end="139:43"><expr pos:start="139:32" pos:end="139:43"><name pos:start="139:32" pos:end="139:43"><name pos:start="139:32" pos:end="139:36">irqmp</name><operator pos:start="139:37" pos:end="139:38">-&gt;</operator><name pos:start="139:39" pos:end="139:43">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:34">/* extended (not supported) */</comment>

    <if_stmt pos:start="149:5" pos:end="163:5"><if pos:start="149:5" pos:end="163:5">if <condition pos:start="149:8" pos:end="149:57">(<expr pos:start="149:9" pos:end="149:56"><name pos:start="149:9" pos:end="149:12">addr</name> <operator pos:start="149:14" pos:end="149:15">&gt;=</operator> <name pos:start="149:17" pos:end="149:31">EXTENDED_OFFSET</name> <operator pos:start="149:33" pos:end="149:34">&amp;&amp;</operator> <name pos:start="149:36" pos:end="149:39">addr</name> <operator pos:start="149:41" pos:end="149:41">&lt;</operator> <name pos:start="149:43" pos:end="149:56">IRQMP_REG_SIZE</name></expr>)</condition> <block pos:start="149:59" pos:end="163:5">{<block_content pos:start="151:9" pos:end="161:15">

        <decl_stmt pos:start="151:9" pos:end="151:47"><decl pos:start="151:9" pos:end="151:46"><type pos:start="151:9" pos:end="151:11"><name pos:start="151:9" pos:end="151:11">int</name></type> <name pos:start="151:13" pos:end="151:15">cpu</name> <init pos:start="151:17" pos:end="151:46">= <expr pos:start="151:19" pos:end="151:46"><operator pos:start="151:19" pos:end="151:19">(</operator><name pos:start="151:20" pos:end="151:23">addr</name> <operator pos:start="151:25" pos:end="151:25">-</operator> <name pos:start="151:27" pos:end="151:41">EXTENDED_OFFSET</name><operator pos:start="151:42" pos:end="151:42">)</operator> <operator pos:start="151:44" pos:end="151:44">/</operator> <literal type="number" pos:start="151:46" pos:end="151:46">4</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:48"><expr pos:start="153:9" pos:end="153:47"><call pos:start="153:9" pos:end="153:47"><name pos:start="153:9" pos:end="153:14">assert</name><argument_list pos:start="153:15" pos:end="153:47">(<argument pos:start="153:16" pos:end="153:46"><expr pos:start="153:16" pos:end="153:46"><name pos:start="153:16" pos:end="153:18">cpu</name> <operator pos:start="153:20" pos:end="153:21">&gt;=</operator> <literal type="number" pos:start="153:23" pos:end="153:23">0</literal> <operator pos:start="153:25" pos:end="153:26">&amp;&amp;</operator> <name pos:start="153:28" pos:end="153:30">cpu</name> <operator pos:start="153:32" pos:end="153:32">&lt;</operator> <name pos:start="153:34" pos:end="153:46">IRQMP_MAX_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="157:9" pos:end="157:21"><expr pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:13">value</name> <operator pos:start="157:15" pos:end="157:16">&amp;=</operator> <literal type="number" pos:start="157:18" pos:end="157:20">0xF</literal></expr>;</expr_stmt> <comment type="block" pos:start="157:23" pos:end="157:46">/* clean up the value */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:37"><expr pos:start="159:9" pos:end="159:36"><name pos:start="159:9" pos:end="159:28"><name pos:start="159:9" pos:end="159:13">state</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:23">extended</name><index pos:start="159:24" pos:end="159:28">[<expr pos:start="159:25" pos:end="159:27"><name pos:start="159:25" pos:end="159:27">cpu</name></expr>]</index></name> <operator pos:start="159:30" pos:end="159:30">=</operator> <name pos:start="159:32" pos:end="159:36">value</name></expr>;</expr_stmt>

        <return pos:start="161:9" pos:end="161:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:54"><expr pos:start="167:5" pos:end="167:53"><call pos:start="167:5" pos:end="167:53"><name pos:start="167:5" pos:end="167:38">trace_grlib_irqmp_unknown_register</name><argument_list pos:start="167:39" pos:end="167:53">(<argument pos:start="167:40" pos:end="167:46"><expr pos:start="167:40" pos:end="167:46"><literal type="string" pos:start="167:40" pos:end="167:46">"write"</literal></expr></argument>, <argument pos:start="167:49" pos:end="167:52"><expr pos:start="167:49" pos:end="167:52"><name pos:start="167:49" pos:end="167:52">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
