<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6163.c" pos:tabs="8"><function pos:start="1:1" pos:end="301:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">qcow2_update_options</name><parameter_list pos:start="1:32" pos:end="3:56">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:68"><name pos:start="1:55" pos:end="1:59">QDict</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:68">options</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:41"><decl pos:start="3:33" pos:end="3:41"><type pos:start="3:33" pos:end="3:41"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:41">flags</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:55"><decl pos:start="3:44" pos:end="3:55"><type pos:start="3:44" pos:end="3:55"><name pos:start="3:44" pos:end="3:48">Error</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier><modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:55">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="301:1">{<block_content pos:start="7:5" pos:end="299:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVQcow2State</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">QemuOpts</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:18">opts</name> <init pos:start="9:20" pos:end="9:25">= <expr pos:start="9:22" pos:end="9:25"><name pos:start="9:22" pos:end="9:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:63"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:33">opt_overlap_check</name></decl>, <decl pos:start="11:36" pos:end="11:62"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:36" pos:end="11:36">*</modifier></type><name pos:start="11:37" pos:end="11:62">opt_overlap_check_template</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:30">overlap_check_template</name> <init pos:start="13:32" pos:end="13:34">= <expr pos:start="13:34" pos:end="13:34"><literal type="number" pos:start="13:34" pos:end="13:34">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:26">l2_cache_size</name></decl>, <decl pos:start="15:29" pos:end="15:47"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:29" pos:end="15:47">refcount_cache_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">Qcow2Cache</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:30">l2_table_cache</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">Qcow2Cache</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:36">refcount_block_cache</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:33">cache_clean_interval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:27">use_lazy_refcounts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:9">Error</name> <modifier pos:start="27:11" pos:end="27:11">*</modifier></type><name pos:start="27:12" pos:end="27:20">local_err</name> <init pos:start="27:22" pos:end="27:27">= <expr pos:start="27:24" pos:end="27:27"><name pos:start="27:24" pos:end="27:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:12"><decl pos:start="29:5" pos:end="29:11"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:72"><expr pos:start="33:5" pos:end="33:71"><name pos:start="33:5" pos:end="33:8">opts</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:71"><name pos:start="33:12" pos:end="33:27">qemu_opts_create</name><argument_list pos:start="33:28" pos:end="33:71">(<argument pos:start="33:29" pos:end="33:47"><expr pos:start="33:29" pos:end="33:47"><operator pos:start="33:29" pos:end="33:29">&amp;</operator><name pos:start="33:30" pos:end="33:47">qcow2_runtime_opts</name></expr></argument>, <argument pos:start="33:50" pos:end="33:53"><expr pos:start="33:50" pos:end="33:53"><name pos:start="33:50" pos:end="33:53">NULL</name></expr></argument>, <argument pos:start="33:56" pos:end="33:56"><expr pos:start="33:56" pos:end="33:56"><literal type="number" pos:start="33:56" pos:end="33:56">0</literal></expr></argument>, <argument pos:start="33:59" pos:end="33:70"><expr pos:start="33:59" pos:end="33:70"><operator pos:start="33:59" pos:end="33:59">&amp;</operator><name pos:start="33:60" pos:end="33:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:54"><expr pos:start="35:5" pos:end="35:53"><call pos:start="35:5" pos:end="35:53"><name pos:start="35:5" pos:end="35:26">qemu_opts_absorb_qdict</name><argument_list pos:start="35:27" pos:end="35:53">(<argument pos:start="35:28" pos:end="35:31"><expr pos:start="35:28" pos:end="35:31"><name pos:start="35:28" pos:end="35:31">opts</name></expr></argument>, <argument pos:start="35:34" pos:end="35:40"><expr pos:start="35:34" pos:end="35:40"><name pos:start="35:34" pos:end="35:40">options</name></expr></argument>, <argument pos:start="35:43" pos:end="35:52"><expr pos:start="35:43" pos:end="35:52"><operator pos:start="35:43" pos:end="35:43">&amp;</operator><name pos:start="35:44" pos:end="35:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:18">(<expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:17">local_err</name></expr>)</condition> <block pos:start="37:20" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:18">

        <expr_stmt pos:start="39:9" pos:end="39:41"><expr pos:start="39:9" pos:end="39:40"><call pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:23">error_propagate</name><argument_list pos:start="39:24" pos:end="39:40">(<argument pos:start="39:25" pos:end="39:28"><expr pos:start="39:25" pos:end="39:28"><name pos:start="39:25" pos:end="39:28">errp</name></expr></argument>, <argument pos:start="39:31" pos:end="39:39"><expr pos:start="39:31" pos:end="39:39"><name pos:start="39:31" pos:end="39:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <operator pos:start="41:15" pos:end="41:15">-</operator><name pos:start="41:16" pos:end="41:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:74">/* get L2 table/refcount block cache size from command line options */</comment>

    <expr_stmt pos:start="51:5" pos:end="53:33"><expr pos:start="51:5" pos:end="53:32"><call pos:start="51:5" pos:end="53:32"><name pos:start="51:5" pos:end="51:20">read_cache_sizes</name><argument_list pos:start="51:21" pos:end="53:32">(<argument pos:start="51:22" pos:end="51:23"><expr pos:start="51:22" pos:end="51:23"><name pos:start="51:22" pos:end="51:23">bs</name></expr></argument>, <argument pos:start="51:26" pos:end="51:29"><expr pos:start="51:26" pos:end="51:29"><name pos:start="51:26" pos:end="51:29">opts</name></expr></argument>, <argument pos:start="51:32" pos:end="51:45"><expr pos:start="51:32" pos:end="51:45"><operator pos:start="51:32" pos:end="51:32">&amp;</operator><name pos:start="51:33" pos:end="51:45">l2_cache_size</name></expr></argument>, <argument pos:start="51:48" pos:end="51:67"><expr pos:start="51:48" pos:end="51:67"><operator pos:start="51:48" pos:end="51:48">&amp;</operator><name pos:start="51:49" pos:end="51:67">refcount_cache_size</name></expr></argument>,

                     <argument pos:start="53:22" pos:end="53:31"><expr pos:start="53:22" pos:end="53:31"><operator pos:start="53:22" pos:end="53:22">&amp;</operator><name pos:start="53:23" pos:end="53:31">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:18">(<expr pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:17">local_err</name></expr>)</condition> <block pos:start="55:20" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:18">

        <expr_stmt pos:start="57:9" pos:end="57:41"><expr pos:start="57:9" pos:end="57:40"><call pos:start="57:9" pos:end="57:40"><name pos:start="57:9" pos:end="57:23">error_propagate</name><argument_list pos:start="57:24" pos:end="57:40">(<argument pos:start="57:25" pos:end="57:28"><expr pos:start="57:25" pos:end="57:28"><name pos:start="57:25" pos:end="57:28">errp</name></expr></argument>, <argument pos:start="57:31" pos:end="57:39"><expr pos:start="57:31" pos:end="57:39"><name pos:start="57:31" pos:end="57:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <operator pos:start="59:15" pos:end="59:15">-</operator><name pos:start="59:16" pos:end="59:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:18">goto <name pos:start="61:14" pos:end="61:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:37"><expr pos:start="67:5" pos:end="67:36"><name pos:start="67:5" pos:end="67:17">l2_cache_size</name> <operator pos:start="67:19" pos:end="67:20">/=</operator> <name pos:start="67:22" pos:end="67:36"><name pos:start="67:22" pos:end="67:22">s</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:36">cluster_size</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:42">(<expr pos:start="69:9" pos:end="69:41"><name pos:start="69:9" pos:end="69:21">l2_cache_size</name> <operator pos:start="69:23" pos:end="69:23">&lt;</operator> <name pos:start="69:25" pos:end="69:41">MIN_L2_CACHE_SIZE</name></expr>)</condition> <block pos:start="69:44" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:42">

        <expr_stmt pos:start="71:9" pos:end="71:42"><expr pos:start="71:9" pos:end="71:41"><name pos:start="71:9" pos:end="71:21">l2_cache_size</name> <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:41">MIN_L2_CACHE_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:32">(<expr pos:start="75:9" pos:end="75:31"><name pos:start="75:9" pos:end="75:21">l2_cache_size</name> <operator pos:start="75:23" pos:end="75:23">&gt;</operator> <name pos:start="75:25" pos:end="75:31">INT_MAX</name></expr>)</condition> <block pos:start="75:34" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:18">

        <expr_stmt pos:start="77:9" pos:end="77:50"><expr pos:start="77:9" pos:end="77:49"><call pos:start="77:9" pos:end="77:49"><name pos:start="77:9" pos:end="77:18">error_setg</name><argument_list pos:start="77:19" pos:end="77:49">(<argument pos:start="77:20" pos:end="77:23"><expr pos:start="77:20" pos:end="77:23"><name pos:start="77:20" pos:end="77:23">errp</name></expr></argument>, <argument pos:start="77:26" pos:end="77:48"><expr pos:start="77:26" pos:end="77:48"><literal type="string" pos:start="77:26" pos:end="77:48">"L2 cache size too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:22"><expr pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <operator pos:start="79:15" pos:end="79:15">-</operator><name pos:start="79:16" pos:end="79:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:18">goto <name pos:start="81:14" pos:end="81:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:43"><expr pos:start="87:5" pos:end="87:42"><name pos:start="87:5" pos:end="87:23">refcount_cache_size</name> <operator pos:start="87:25" pos:end="87:26">/=</operator> <name pos:start="87:28" pos:end="87:42"><name pos:start="87:28" pos:end="87:28">s</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:42">cluster_size</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:54">(<expr pos:start="89:9" pos:end="89:53"><name pos:start="89:9" pos:end="89:27">refcount_cache_size</name> <operator pos:start="89:29" pos:end="89:29">&lt;</operator> <name pos:start="89:31" pos:end="89:53">MIN_REFCOUNT_CACHE_SIZE</name></expr>)</condition> <block pos:start="89:56" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:54">

        <expr_stmt pos:start="91:9" pos:end="91:54"><expr pos:start="91:9" pos:end="91:53"><name pos:start="91:9" pos:end="91:27">refcount_cache_size</name> <operator pos:start="91:29" pos:end="91:29">=</operator> <name pos:start="91:31" pos:end="91:53">MIN_REFCOUNT_CACHE_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="103:5">if <condition pos:start="95:8" pos:end="95:38">(<expr pos:start="95:9" pos:end="95:37"><name pos:start="95:9" pos:end="95:27">refcount_cache_size</name> <operator pos:start="95:29" pos:end="95:29">&gt;</operator> <name pos:start="95:31" pos:end="95:37">INT_MAX</name></expr>)</condition> <block pos:start="95:40" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:18">

        <expr_stmt pos:start="97:9" pos:end="97:56"><expr pos:start="97:9" pos:end="97:55"><call pos:start="97:9" pos:end="97:55"><name pos:start="97:9" pos:end="97:18">error_setg</name><argument_list pos:start="97:19" pos:end="97:55">(<argument pos:start="97:20" pos:end="97:23"><expr pos:start="97:20" pos:end="97:23"><name pos:start="97:20" pos:end="97:23">errp</name></expr></argument>, <argument pos:start="97:26" pos:end="97:54"><expr pos:start="97:26" pos:end="97:54"><literal type="string" pos:start="97:26" pos:end="97:54">"Refcount cache size too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:22"><expr pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <operator pos:start="99:15" pos:end="99:15">-</operator><name pos:start="99:16" pos:end="99:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="101:9" pos:end="101:18">goto <name pos:start="101:14" pos:end="101:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:45">/* alloc L2 table/refcount block cache */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:59"><expr pos:start="109:5" pos:end="109:58"><name pos:start="109:5" pos:end="109:18">l2_table_cache</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <call pos:start="109:22" pos:end="109:58"><name pos:start="109:22" pos:end="109:39">qcow2_cache_create</name><argument_list pos:start="109:40" pos:end="109:58">(<argument pos:start="109:41" pos:end="109:42"><expr pos:start="109:41" pos:end="109:42"><name pos:start="109:41" pos:end="109:42">bs</name></expr></argument>, <argument pos:start="109:45" pos:end="109:57"><expr pos:start="109:45" pos:end="109:57"><name pos:start="109:45" pos:end="109:57">l2_cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:71"><expr pos:start="111:5" pos:end="111:70"><name pos:start="111:5" pos:end="111:24">refcount_block_cache</name> <operator pos:start="111:26" pos:end="111:26">=</operator> <call pos:start="111:28" pos:end="111:70"><name pos:start="111:28" pos:end="111:45">qcow2_cache_create</name><argument_list pos:start="111:46" pos:end="111:70">(<argument pos:start="111:47" pos:end="111:48"><expr pos:start="111:47" pos:end="111:48"><name pos:start="111:47" pos:end="111:48">bs</name></expr></argument>, <argument pos:start="111:51" pos:end="111:69"><expr pos:start="111:51" pos:end="111:69"><name pos:start="111:51" pos:end="111:69">refcount_cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="121:5"><if pos:start="113:5" pos:end="121:5">if <condition pos:start="113:8" pos:end="113:63">(<expr pos:start="113:9" pos:end="113:62"><name pos:start="113:9" pos:end="113:22">l2_table_cache</name> <operator pos:start="113:24" pos:end="113:25">==</operator> <name pos:start="113:27" pos:end="113:30">NULL</name> <operator pos:start="113:32" pos:end="113:33">||</operator> <name pos:start="113:35" pos:end="113:54">refcount_block_cache</name> <operator pos:start="113:56" pos:end="113:57">==</operator> <name pos:start="113:59" pos:end="113:62">NULL</name></expr>)</condition> <block pos:start="113:65" pos:end="121:5">{<block_content pos:start="115:9" pos:end="119:18">

        <expr_stmt pos:start="115:9" pos:end="115:63"><expr pos:start="115:9" pos:end="115:62"><call pos:start="115:9" pos:end="115:62"><name pos:start="115:9" pos:end="115:18">error_setg</name><argument_list pos:start="115:19" pos:end="115:62">(<argument pos:start="115:20" pos:end="115:23"><expr pos:start="115:20" pos:end="115:23"><name pos:start="115:20" pos:end="115:23">errp</name></expr></argument>, <argument pos:start="115:26" pos:end="115:61"><expr pos:start="115:26" pos:end="115:61"><literal type="string" pos:start="115:26" pos:end="115:61">"Could not allocate metadata caches"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:22"><expr pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <operator pos:start="117:15" pos:end="117:15">-</operator><name pos:start="117:16" pos:end="117:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="119:9" pos:end="119:18">goto <name pos:start="119:14" pos:end="119:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:46">/* New interval for cache cleanup timer */</comment>

    <expr_stmt pos:start="127:5" pos:end="129:69"><expr pos:start="127:5" pos:end="129:68"><name pos:start="127:5" pos:end="127:24">cache_clean_interval</name> <operator pos:start="127:26" pos:end="127:26">=</operator>

        <call pos:start="129:9" pos:end="129:68"><name pos:start="129:9" pos:end="129:27">qemu_opt_get_number</name><argument_list pos:start="129:28" pos:end="129:68">(<argument pos:start="129:29" pos:end="129:32"><expr pos:start="129:29" pos:end="129:32"><name pos:start="129:29" pos:end="129:32">opts</name></expr></argument>, <argument pos:start="129:35" pos:end="129:64"><expr pos:start="129:35" pos:end="129:64"><name pos:start="129:35" pos:end="129:64">QCOW2_OPT_CACHE_CLEAN_INTERVAL</name></expr></argument>, <argument pos:start="129:67" pos:end="129:67"><expr pos:start="129:67" pos:end="129:67"><literal type="number" pos:start="129:67" pos:end="129:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="139:5">if <condition pos:start="131:8" pos:end="131:40">(<expr pos:start="131:9" pos:end="131:39"><name pos:start="131:9" pos:end="131:28">cache_clean_interval</name> <operator pos:start="131:30" pos:end="131:30">&gt;</operator> <name pos:start="131:32" pos:end="131:39">UINT_MAX</name></expr>)</condition> <block pos:start="131:42" pos:end="139:5">{<block_content pos:start="133:9" pos:end="137:18">

        <expr_stmt pos:start="133:9" pos:end="133:57"><expr pos:start="133:9" pos:end="133:56"><call pos:start="133:9" pos:end="133:56"><name pos:start="133:9" pos:end="133:18">error_setg</name><argument_list pos:start="133:19" pos:end="133:56">(<argument pos:start="133:20" pos:end="133:23"><expr pos:start="133:20" pos:end="133:23"><name pos:start="133:20" pos:end="133:23">errp</name></expr></argument>, <argument pos:start="133:26" pos:end="133:55"><expr pos:start="133:26" pos:end="133:55"><literal type="string" pos:start="133:26" pos:end="133:55">"Cache clean interval too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:22"><expr pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <operator pos:start="135:15" pos:end="135:15">-</operator><name pos:start="135:16" pos:end="135:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="137:9" pos:end="137:18">goto <name pos:start="137:14" pos:end="137:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:75">/* Enable lazy_refcounts according to image and command line options */</comment>

    <expr_stmt pos:start="145:5" pos:end="147:64"><expr pos:start="145:5" pos:end="147:63"><name pos:start="145:5" pos:end="145:22">use_lazy_refcounts</name> <operator pos:start="145:24" pos:end="145:24">=</operator> <call pos:start="145:26" pos:end="147:63"><name pos:start="145:26" pos:end="145:42">qemu_opt_get_bool</name><argument_list pos:start="145:43" pos:end="147:63">(<argument pos:start="145:44" pos:end="145:47"><expr pos:start="145:44" pos:end="145:47"><name pos:start="145:44" pos:end="145:47">opts</name></expr></argument>, <argument pos:start="145:50" pos:end="145:73"><expr pos:start="145:50" pos:end="145:73"><name pos:start="145:50" pos:end="145:73">QCOW2_OPT_LAZY_REFCOUNTS</name></expr></argument>,

        <argument pos:start="147:9" pos:end="147:62"><expr pos:start="147:9" pos:end="147:62"><operator pos:start="147:9" pos:end="147:9">(</operator><name pos:start="147:10" pos:end="147:31"><name pos:start="147:10" pos:end="147:10">s</name><operator pos:start="147:11" pos:end="147:12">-&gt;</operator><name pos:start="147:13" pos:end="147:31">compatible_features</name></name> <operator pos:start="147:33" pos:end="147:33">&amp;</operator> <name pos:start="147:35" pos:end="147:61">QCOW2_COMPAT_LAZY_REFCOUNTS</name><operator pos:start="147:62" pos:end="147:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="159:5"><if pos:start="149:5" pos:end="159:5">if <condition pos:start="149:8" pos:end="149:50">(<expr pos:start="149:9" pos:end="149:49"><name pos:start="149:9" pos:end="149:26">use_lazy_refcounts</name> <operator pos:start="149:28" pos:end="149:29">&amp;&amp;</operator> <name pos:start="149:31" pos:end="149:45"><name pos:start="149:31" pos:end="149:31">s</name><operator pos:start="149:32" pos:end="149:33">-&gt;</operator><name pos:start="149:34" pos:end="149:45">qcow_version</name></name> <operator pos:start="149:47" pos:end="149:47">&lt;</operator> <literal type="number" pos:start="149:49" pos:end="149:49">3</literal></expr>)</condition> <block pos:start="149:52" pos:end="159:5">{<block_content pos:start="151:9" pos:end="157:18">

        <expr_stmt pos:start="151:9" pos:end="153:51"><expr pos:start="151:9" pos:end="153:50"><call pos:start="151:9" pos:end="153:50"><name pos:start="151:9" pos:end="151:18">error_setg</name><argument_list pos:start="151:19" pos:end="153:50">(<argument pos:start="151:20" pos:end="151:23"><expr pos:start="151:20" pos:end="151:23"><name pos:start="151:20" pos:end="151:23">errp</name></expr></argument>, <argument pos:start="151:26" pos:end="153:49"><expr pos:start="151:26" pos:end="153:49"><literal type="string" pos:start="151:26" pos:end="151:78">"Lazy refcounts require a qcow2 image with at least "</literal>

                   <literal type="string" pos:start="153:20" pos:end="153:49">"qemu 1.1 compatibility level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:22"><expr pos:start="155:9" pos:end="155:21"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <operator pos:start="155:15" pos:end="155:15">-</operator><name pos:start="155:16" pos:end="155:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="157:9" pos:end="157:18">goto <name pos:start="157:14" pos:end="157:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:31">/* Overlap check options */</comment>

    <expr_stmt pos:start="165:5" pos:end="165:62"><expr pos:start="165:5" pos:end="165:61"><name pos:start="165:5" pos:end="165:21">opt_overlap_check</name> <operator pos:start="165:23" pos:end="165:23">=</operator> <call pos:start="165:25" pos:end="165:61"><name pos:start="165:25" pos:end="165:36">qemu_opt_get</name><argument_list pos:start="165:37" pos:end="165:61">(<argument pos:start="165:38" pos:end="165:41"><expr pos:start="165:38" pos:end="165:41"><name pos:start="165:38" pos:end="165:41">opts</name></expr></argument>, <argument pos:start="165:44" pos:end="165:60"><expr pos:start="165:44" pos:end="165:60"><name pos:start="165:44" pos:end="165:60">QCOW2_OPT_OVERLAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:80"><expr pos:start="167:5" pos:end="167:79"><name pos:start="167:5" pos:end="167:30">opt_overlap_check_template</name> <operator pos:start="167:32" pos:end="167:32">=</operator> <call pos:start="167:34" pos:end="167:79"><name pos:start="167:34" pos:end="167:45">qemu_opt_get</name><argument_list pos:start="167:46" pos:end="167:79">(<argument pos:start="167:47" pos:end="167:50"><expr pos:start="167:47" pos:end="167:50"><name pos:start="167:47" pos:end="167:50">opts</name></expr></argument>, <argument pos:start="167:53" pos:end="167:78"><expr pos:start="167:53" pos:end="167:78"><name pos:start="167:53" pos:end="167:78">QCOW2_OPT_OVERLAP_TEMPLATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="185:5"><if pos:start="169:5" pos:end="185:5">if <condition pos:start="169:8" pos:end="171:62">(<expr pos:start="169:9" pos:end="171:61"><name pos:start="169:9" pos:end="169:34">opt_overlap_check_template</name> <operator pos:start="169:36" pos:end="169:37">&amp;&amp;</operator> <name pos:start="169:39" pos:end="169:55">opt_overlap_check</name> <operator pos:start="169:57" pos:end="169:58">&amp;&amp;</operator>

        <call pos:start="171:9" pos:end="171:61"><name pos:start="171:9" pos:end="171:14">strcmp</name><argument_list pos:start="171:15" pos:end="171:61">(<argument pos:start="171:16" pos:end="171:41"><expr pos:start="171:16" pos:end="171:41"><name pos:start="171:16" pos:end="171:41">opt_overlap_check_template</name></expr></argument>, <argument pos:start="171:44" pos:end="171:60"><expr pos:start="171:44" pos:end="171:60"><name pos:start="171:44" pos:end="171:60">opt_overlap_check</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="173:5" pos:end="185:5">{<block_content pos:start="175:9" pos:end="183:18">

        <expr_stmt pos:start="175:9" pos:end="179:78"><expr pos:start="175:9" pos:end="179:77"><call pos:start="175:9" pos:end="179:77"><name pos:start="175:9" pos:end="175:18">error_setg</name><argument_list pos:start="175:19" pos:end="179:77">(<argument pos:start="175:20" pos:end="175:23"><expr pos:start="175:20" pos:end="175:23"><name pos:start="175:20" pos:end="175:23">errp</name></expr></argument>, <argument pos:start="175:26" pos:end="179:29"><expr pos:start="175:26" pos:end="179:29"><literal type="string" pos:start="175:26" pos:end="175:65">"Conflicting values for qcow2 options '"</literal>

                   <name pos:start="177:20" pos:end="177:36">QCOW2_OPT_OVERLAP</name> <literal type="string" pos:start="177:38" pos:end="177:53">"' ('%s') and '"</literal> <name pos:start="177:55" pos:end="177:80">QCOW2_OPT_OVERLAP_TEMPLATE</name>

                   <literal type="string" pos:start="179:20" pos:end="179:29">"' ('%s')"</literal></expr></argument>, <argument pos:start="179:32" pos:end="179:48"><expr pos:start="179:32" pos:end="179:48"><name pos:start="179:32" pos:end="179:48">opt_overlap_check</name></expr></argument>, <argument pos:start="179:51" pos:end="179:76"><expr pos:start="179:51" pos:end="179:76"><name pos:start="179:51" pos:end="179:76">opt_overlap_check_template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:22"><expr pos:start="181:9" pos:end="181:21"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <operator pos:start="181:15" pos:end="181:15">-</operator><name pos:start="181:16" pos:end="181:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="183:9" pos:end="183:18">goto <name pos:start="183:14" pos:end="183:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="187:5" pos:end="191:5"><if pos:start="187:5" pos:end="191:5">if <condition pos:start="187:8" pos:end="187:27">(<expr pos:start="187:9" pos:end="187:26"><operator pos:start="187:9" pos:end="187:9">!</operator><name pos:start="187:10" pos:end="187:26">opt_overlap_check</name></expr>)</condition> <block pos:start="187:29" pos:end="191:5">{<block_content pos:start="189:9" pos:end="189:67">

        <expr_stmt pos:start="189:9" pos:end="189:67"><expr pos:start="189:9" pos:end="189:66"><name pos:start="189:9" pos:end="189:25">opt_overlap_check</name> <operator pos:start="189:27" pos:end="189:27">=</operator> <ternary pos:start="189:29" pos:end="189:66"><condition pos:start="189:29" pos:end="189:56"><expr pos:start="189:29" pos:end="189:54"><name pos:start="189:29" pos:end="189:54">opt_overlap_check_template</name></expr> ?</condition><then/><else pos:start="189:57" pos:end="189:66">: <expr pos:start="189:59" pos:end="189:66"><literal type="string" pos:start="189:59" pos:end="189:66">"cached"</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="195:5" pos:end="223:5"><if pos:start="195:5" pos:end="199:5">if <condition pos:start="195:8" pos:end="195:43">(<expr pos:start="195:9" pos:end="195:42"><operator pos:start="195:9" pos:end="195:9">!</operator><call pos:start="195:10" pos:end="195:42"><name pos:start="195:10" pos:end="195:15">strcmp</name><argument_list pos:start="195:16" pos:end="195:42">(<argument pos:start="195:17" pos:end="195:33"><expr pos:start="195:17" pos:end="195:33"><name pos:start="195:17" pos:end="195:33">opt_overlap_check</name></expr></argument>, <argument pos:start="195:36" pos:end="195:41"><expr pos:start="195:36" pos:end="195:41"><literal type="string" pos:start="195:36" pos:end="195:41">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="195:45" pos:end="199:5">{<block_content pos:start="197:9" pos:end="197:35">

        <expr_stmt pos:start="197:9" pos:end="197:35"><expr pos:start="197:9" pos:end="197:34"><name pos:start="197:9" pos:end="197:30">overlap_check_template</name> <operator pos:start="197:32" pos:end="197:32">=</operator> <literal type="number" pos:start="197:34" pos:end="197:34">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="199:7" pos:end="203:5">else if <condition pos:start="199:15" pos:end="199:54">(<expr pos:start="199:16" pos:end="199:53"><operator pos:start="199:16" pos:end="199:16">!</operator><call pos:start="199:17" pos:end="199:53"><name pos:start="199:17" pos:end="199:22">strcmp</name><argument_list pos:start="199:23" pos:end="199:53">(<argument pos:start="199:24" pos:end="199:40"><expr pos:start="199:24" pos:end="199:40"><name pos:start="199:24" pos:end="199:40">opt_overlap_check</name></expr></argument>, <argument pos:start="199:43" pos:end="199:52"><expr pos:start="199:43" pos:end="199:52"><literal type="string" pos:start="199:43" pos:end="199:52">"constant"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:56" pos:end="203:5">{<block_content pos:start="201:9" pos:end="201:51">

        <expr_stmt pos:start="201:9" pos:end="201:51"><expr pos:start="201:9" pos:end="201:50"><name pos:start="201:9" pos:end="201:30">overlap_check_template</name> <operator pos:start="201:32" pos:end="201:32">=</operator> <name pos:start="201:34" pos:end="201:50">QCOW2_OL_CONSTANT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="203:7" pos:end="207:5">else if <condition pos:start="203:15" pos:end="203:52">(<expr pos:start="203:16" pos:end="203:51"><operator pos:start="203:16" pos:end="203:16">!</operator><call pos:start="203:17" pos:end="203:51"><name pos:start="203:17" pos:end="203:22">strcmp</name><argument_list pos:start="203:23" pos:end="203:51">(<argument pos:start="203:24" pos:end="203:40"><expr pos:start="203:24" pos:end="203:40"><name pos:start="203:24" pos:end="203:40">opt_overlap_check</name></expr></argument>, <argument pos:start="203:43" pos:end="203:50"><expr pos:start="203:43" pos:end="203:50"><literal type="string" pos:start="203:43" pos:end="203:50">"cached"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="203:54" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:49">

        <expr_stmt pos:start="205:9" pos:end="205:49"><expr pos:start="205:9" pos:end="205:48"><name pos:start="205:9" pos:end="205:30">overlap_check_template</name> <operator pos:start="205:32" pos:end="205:32">=</operator> <name pos:start="205:34" pos:end="205:48">QCOW2_OL_CACHED</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="207:7" pos:end="211:5">else if <condition pos:start="207:15" pos:end="207:49">(<expr pos:start="207:16" pos:end="207:48"><operator pos:start="207:16" pos:end="207:16">!</operator><call pos:start="207:17" pos:end="207:48"><name pos:start="207:17" pos:end="207:22">strcmp</name><argument_list pos:start="207:23" pos:end="207:48">(<argument pos:start="207:24" pos:end="207:40"><expr pos:start="207:24" pos:end="207:40"><name pos:start="207:24" pos:end="207:40">opt_overlap_check</name></expr></argument>, <argument pos:start="207:43" pos:end="207:47"><expr pos:start="207:43" pos:end="207:47"><literal type="string" pos:start="207:43" pos:end="207:47">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="207:51" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:46">

        <expr_stmt pos:start="209:9" pos:end="209:46"><expr pos:start="209:9" pos:end="209:45"><name pos:start="209:9" pos:end="209:30">overlap_check_template</name> <operator pos:start="209:32" pos:end="209:32">=</operator> <name pos:start="209:34" pos:end="209:45">QCOW2_OL_ALL</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="211:7" pos:end="223:5">else <block pos:start="211:12" pos:end="223:5">{<block_content pos:start="213:9" pos:end="221:18">

        <expr_stmt pos:start="213:9" pos:end="217:69"><expr pos:start="213:9" pos:end="217:68"><call pos:start="213:9" pos:end="217:68"><name pos:start="213:9" pos:end="213:18">error_setg</name><argument_list pos:start="213:19" pos:end="217:68">(<argument pos:start="213:20" pos:end="213:23"><expr pos:start="213:20" pos:end="213:23"><name pos:start="213:20" pos:end="213:23">errp</name></expr></argument>, <argument pos:start="213:26" pos:end="217:48"><expr pos:start="213:26" pos:end="217:48"><literal type="string" pos:start="213:26" pos:end="213:67">"Unsupported value '%s' for qcow2 option "</literal>

                   <literal type="string" pos:start="215:20" pos:end="215:72">"'overlap-check'. Allowed are any of the following: "</literal>

                   <literal type="string" pos:start="217:20" pos:end="217:48">"none, constant, cached, all"</literal></expr></argument>, <argument pos:start="217:51" pos:end="217:67"><expr pos:start="217:51" pos:end="217:67"><name pos:start="217:51" pos:end="217:67">opt_overlap_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:22"><expr pos:start="219:9" pos:end="219:21"><name pos:start="219:9" pos:end="219:11">ret</name> <operator pos:start="219:13" pos:end="219:13">=</operator> <operator pos:start="219:15" pos:end="219:15">-</operator><name pos:start="219:16" pos:end="219:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="221:9" pos:end="221:18">goto <name pos:start="221:14" pos:end="221:17">fail</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="227:5" pos:end="233:7">/*

     * Start updating fields in BDRVQcow2State.

     * After this point no failure is allowed any more.

     */</comment>

    <expr_stmt pos:start="235:5" pos:end="235:25"><expr pos:start="235:5" pos:end="235:24"><name pos:start="235:5" pos:end="235:20"><name pos:start="235:5" pos:end="235:5">s</name><operator pos:start="235:6" pos:end="235:7">-&gt;</operator><name pos:start="235:8" pos:end="235:20">overlap_check</name></name> <operator pos:start="235:22" pos:end="235:22">=</operator> <literal type="number" pos:start="235:24" pos:end="235:24">0</literal></expr>;</expr_stmt>

    <for pos:start="237:5" pos:end="249:5">for <control pos:start="237:9" pos:end="237:44">(<init pos:start="237:10" pos:end="237:15"><expr pos:start="237:10" pos:end="237:14"><name pos:start="237:10" pos:end="237:10">i</name> <operator pos:start="237:12" pos:end="237:12">=</operator> <literal type="number" pos:start="237:14" pos:end="237:14">0</literal></expr>;</init> <condition pos:start="237:17" pos:end="237:39"><expr pos:start="237:17" pos:end="237:38"><name pos:start="237:17" pos:end="237:17">i</name> <operator pos:start="237:19" pos:end="237:19">&lt;</operator> <name pos:start="237:21" pos:end="237:38">QCOW2_OL_MAX_BITNR</name></expr>;</condition> <incr pos:start="237:41" pos:end="237:43"><expr pos:start="237:41" pos:end="237:43"><name pos:start="237:41" pos:end="237:41">i</name><operator pos:start="237:42" pos:end="237:43">++</operator></expr></incr>)</control> <block pos:start="237:46" pos:end="249:5">{<block_content pos:start="243:9" pos:end="247:70">

        <comment type="block" pos:start="239:9" pos:end="241:63">/* overlap-check defines a template bitmask, but every flag may be

         * overwritten through the associated boolean option */</comment>

        <expr_stmt pos:start="243:9" pos:end="247:70"><expr pos:start="243:9" pos:end="247:69"><name pos:start="243:9" pos:end="243:24"><name pos:start="243:9" pos:end="243:9">s</name><operator pos:start="243:10" pos:end="243:11">-&gt;</operator><name pos:start="243:12" pos:end="243:24">overlap_check</name></name> <operator pos:start="243:26" pos:end="243:27">|=</operator>

            <call pos:start="245:13" pos:end="247:64"><name pos:start="245:13" pos:end="245:29">qemu_opt_get_bool</name><argument_list pos:start="245:30" pos:end="247:64">(<argument pos:start="245:31" pos:end="245:34"><expr pos:start="245:31" pos:end="245:34"><name pos:start="245:31" pos:end="245:34">opts</name></expr></argument>, <argument pos:start="245:37" pos:end="245:64"><expr pos:start="245:37" pos:end="245:64"><name pos:start="245:37" pos:end="245:64"><name pos:start="245:37" pos:end="245:61">overlap_bool_option_names</name><index pos:start="245:62" pos:end="245:64">[<expr pos:start="245:63" pos:end="245:63"><name pos:start="245:63" pos:end="245:63">i</name></expr>]</index></name></expr></argument>,

                              <argument pos:start="247:31" pos:end="247:63"><expr pos:start="247:31" pos:end="247:63"><name pos:start="247:31" pos:end="247:52">overlap_check_template</name> <operator pos:start="247:54" pos:end="247:54">&amp;</operator> <operator pos:start="247:56" pos:end="247:56">(</operator><literal type="number" pos:start="247:57" pos:end="247:57">1</literal> <operator pos:start="247:59" pos:end="247:60">&lt;&lt;</operator> <name pos:start="247:62" pos:end="247:62">i</name><operator pos:start="247:63" pos:end="247:63">)</operator></expr></argument>)</argument_list></call> <operator pos:start="247:66" pos:end="247:67">&lt;&lt;</operator> <name pos:start="247:69" pos:end="247:69">i</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="253:5" pos:end="253:39"><expr pos:start="253:5" pos:end="253:38"><name pos:start="253:5" pos:end="253:21"><name pos:start="253:5" pos:end="253:5">s</name><operator pos:start="253:6" pos:end="253:7">-&gt;</operator><name pos:start="253:8" pos:end="253:21">l2_table_cache</name></name> <operator pos:start="253:23" pos:end="253:23">=</operator> <name pos:start="253:25" pos:end="253:38">l2_table_cache</name></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:51"><expr pos:start="255:5" pos:end="255:50"><name pos:start="255:5" pos:end="255:27"><name pos:start="255:5" pos:end="255:5">s</name><operator pos:start="255:6" pos:end="255:7">-&gt;</operator><name pos:start="255:8" pos:end="255:27">refcount_block_cache</name></name> <operator pos:start="255:29" pos:end="255:29">=</operator> <name pos:start="255:31" pos:end="255:50">refcount_block_cache</name></expr>;</expr_stmt>



    <expr_stmt pos:start="259:5" pos:end="259:47"><expr pos:start="259:5" pos:end="259:46"><name pos:start="259:5" pos:end="259:25"><name pos:start="259:5" pos:end="259:5">s</name><operator pos:start="259:6" pos:end="259:7">-&gt;</operator><name pos:start="259:8" pos:end="259:25">use_lazy_refcounts</name></name> <operator pos:start="259:27" pos:end="259:27">=</operator> <name pos:start="259:29" pos:end="259:46">use_lazy_refcounts</name></expr>;</expr_stmt>



    <expr_stmt pos:start="263:5" pos:end="263:56"><expr pos:start="263:5" pos:end="263:55"><name pos:start="263:5" pos:end="263:47"><name pos:start="263:5" pos:end="263:5">s</name><operator pos:start="263:6" pos:end="263:7">-&gt;</operator><name pos:start="263:8" pos:end="263:26">discard_passthrough</name><index pos:start="263:27" pos:end="263:47">[<expr pos:start="263:28" pos:end="263:46"><name pos:start="263:28" pos:end="263:46">QCOW2_DISCARD_NEVER</name></expr>]</index></name> <operator pos:start="263:49" pos:end="263:49">=</operator> <name pos:start="263:51" pos:end="263:55">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:56"><expr pos:start="265:5" pos:end="265:55"><name pos:start="265:5" pos:end="265:48"><name pos:start="265:5" pos:end="265:5">s</name><operator pos:start="265:6" pos:end="265:7">-&gt;</operator><name pos:start="265:8" pos:end="265:26">discard_passthrough</name><index pos:start="265:27" pos:end="265:48">[<expr pos:start="265:28" pos:end="265:47"><name pos:start="265:28" pos:end="265:47">QCOW2_DISCARD_ALWAYS</name></expr>]</index></name> <operator pos:start="265:50" pos:end="265:50">=</operator> <name pos:start="265:52" pos:end="265:55">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="271:48"><expr pos:start="267:5" pos:end="271:47"><name pos:start="267:5" pos:end="267:49"><name pos:start="267:5" pos:end="267:5">s</name><operator pos:start="267:6" pos:end="267:7">-&gt;</operator><name pos:start="267:8" pos:end="267:26">discard_passthrough</name><index pos:start="267:27" pos:end="267:49">[<expr pos:start="267:28" pos:end="267:48"><name pos:start="267:28" pos:end="267:48">QCOW2_DISCARD_REQUEST</name></expr>]</index></name> <operator pos:start="267:51" pos:end="267:51">=</operator>

        <call pos:start="269:9" pos:end="271:47"><name pos:start="269:9" pos:end="269:25">qemu_opt_get_bool</name><argument_list pos:start="269:26" pos:end="271:47">(<argument pos:start="269:27" pos:end="269:30"><expr pos:start="269:27" pos:end="269:30"><name pos:start="269:27" pos:end="269:30">opts</name></expr></argument>, <argument pos:start="269:33" pos:end="269:57"><expr pos:start="269:33" pos:end="269:57"><name pos:start="269:33" pos:end="269:57">QCOW2_OPT_DISCARD_REQUEST</name></expr></argument>,

                          <argument pos:start="271:27" pos:end="271:46"><expr pos:start="271:27" pos:end="271:46"><name pos:start="271:27" pos:end="271:31">flags</name> <operator pos:start="271:33" pos:end="271:33">&amp;</operator> <name pos:start="271:35" pos:end="271:46">BDRV_O_UNMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="275:66"><expr pos:start="273:5" pos:end="275:65"><name pos:start="273:5" pos:end="273:50"><name pos:start="273:5" pos:end="273:5">s</name><operator pos:start="273:6" pos:end="273:7">-&gt;</operator><name pos:start="273:8" pos:end="273:26">discard_passthrough</name><index pos:start="273:27" pos:end="273:50">[<expr pos:start="273:28" pos:end="273:49"><name pos:start="273:28" pos:end="273:49">QCOW2_DISCARD_SNAPSHOT</name></expr>]</index></name> <operator pos:start="273:52" pos:end="273:52">=</operator>

        <call pos:start="275:9" pos:end="275:65"><name pos:start="275:9" pos:end="275:25">qemu_opt_get_bool</name><argument_list pos:start="275:26" pos:end="275:65">(<argument pos:start="275:27" pos:end="275:30"><expr pos:start="275:27" pos:end="275:30"><name pos:start="275:27" pos:end="275:30">opts</name></expr></argument>, <argument pos:start="275:33" pos:end="275:58"><expr pos:start="275:33" pos:end="275:58"><name pos:start="275:33" pos:end="275:58">QCOW2_OPT_DISCARD_SNAPSHOT</name></expr></argument>, <argument pos:start="275:61" pos:end="275:64"><expr pos:start="275:61" pos:end="275:64"><name pos:start="275:61" pos:end="275:64">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="279:64"><expr pos:start="277:5" pos:end="279:63"><name pos:start="277:5" pos:end="277:47"><name pos:start="277:5" pos:end="277:5">s</name><operator pos:start="277:6" pos:end="277:7">-&gt;</operator><name pos:start="277:8" pos:end="277:26">discard_passthrough</name><index pos:start="277:27" pos:end="277:47">[<expr pos:start="277:28" pos:end="277:46"><name pos:start="277:28" pos:end="277:46">QCOW2_DISCARD_OTHER</name></expr>]</index></name> <operator pos:start="277:49" pos:end="277:49">=</operator>

        <call pos:start="279:9" pos:end="279:63"><name pos:start="279:9" pos:end="279:25">qemu_opt_get_bool</name><argument_list pos:start="279:26" pos:end="279:63">(<argument pos:start="279:27" pos:end="279:30"><expr pos:start="279:27" pos:end="279:30"><name pos:start="279:27" pos:end="279:30">opts</name></expr></argument>, <argument pos:start="279:33" pos:end="279:55"><expr pos:start="279:33" pos:end="279:55"><name pos:start="279:33" pos:end="279:55">QCOW2_OPT_DISCARD_OTHER</name></expr></argument>, <argument pos:start="279:58" pos:end="279:62"><expr pos:start="279:58" pos:end="279:62"><name pos:start="279:58" pos:end="279:62">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="283:5" pos:end="283:51"><expr pos:start="283:5" pos:end="283:50"><name pos:start="283:5" pos:end="283:27"><name pos:start="283:5" pos:end="283:5">s</name><operator pos:start="283:6" pos:end="283:7">-&gt;</operator><name pos:start="283:8" pos:end="283:27">cache_clean_interval</name></name> <operator pos:start="283:29" pos:end="283:29">=</operator> <name pos:start="283:31" pos:end="283:50">cache_clean_interval</name></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:57"><expr pos:start="285:5" pos:end="285:56"><call pos:start="285:5" pos:end="285:56"><name pos:start="285:5" pos:end="285:26">cache_clean_timer_init</name><argument_list pos:start="285:27" pos:end="285:56">(<argument pos:start="285:28" pos:end="285:29"><expr pos:start="285:28" pos:end="285:29"><name pos:start="285:28" pos:end="285:29">bs</name></expr></argument>, <argument pos:start="285:32" pos:end="285:55"><expr pos:start="285:32" pos:end="285:55"><call pos:start="285:32" pos:end="285:55"><name pos:start="285:32" pos:end="285:51">bdrv_get_aio_context</name><argument_list pos:start="285:52" pos:end="285:55">(<argument pos:start="285:53" pos:end="285:54"><expr pos:start="285:53" pos:end="285:54"><name pos:start="285:53" pos:end="285:54">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="289:5" pos:end="289:12"><expr pos:start="289:5" pos:end="289:11"><name pos:start="289:5" pos:end="289:7">ret</name> <operator pos:start="289:9" pos:end="289:9">=</operator> <literal type="number" pos:start="289:11" pos:end="289:11">0</literal></expr>;</expr_stmt>

<label pos:start="291:1" pos:end="291:5"><name pos:start="291:1" pos:end="291:4">fail</name>:</label>

    <expr_stmt pos:start="293:5" pos:end="293:24"><expr pos:start="293:5" pos:end="293:23"><call pos:start="293:5" pos:end="293:23"><name pos:start="293:5" pos:end="293:17">qemu_opts_del</name><argument_list pos:start="293:18" pos:end="293:23">(<argument pos:start="293:19" pos:end="293:22"><expr pos:start="293:19" pos:end="293:22"><name pos:start="293:19" pos:end="293:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:16"><expr pos:start="295:5" pos:end="295:15"><name pos:start="295:5" pos:end="295:8">opts</name> <operator pos:start="295:10" pos:end="295:10">=</operator> <name pos:start="295:12" pos:end="295:15">NULL</name></expr>;</expr_stmt>



    <return pos:start="299:5" pos:end="299:15">return <expr pos:start="299:12" pos:end="299:14"><name pos:start="299:12" pos:end="299:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
