<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3321.c" pos:tabs="8"><function pos:start="1:1" pos:end="144:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">tm2_read_stream</name><parameter_list pos:start="1:27" pos:end="1:92">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:37">TM2Context</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:77"><decl pos:start="1:65" pos:end="1:77"><type pos:start="1:65" pos:end="1:77"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:77">stream_id</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:91"><decl pos:start="1:80" pos:end="1:91"><type pos:start="1:80" pos:end="1:91"><name pos:start="1:80" pos:end="1:82">int</name></type> <name pos:start="1:84" pos:end="1:91">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="144:1">{<block_content pos:start="5:5" pos:end="142:16">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">cur</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">skip</name> <init pos:start="9:14" pos:end="9:16">= <expr pos:start="9:16" pos:end="9:16"><literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">len</name></decl>, <decl pos:start="11:14" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:17">toks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">TM2Codes</name></type> <name pos:start="13:14" pos:end="13:18">codes</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:37">/* get stream length in dwords */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:7">len</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:22"><name pos:start="19:11" pos:end="19:17">AV_RB32</name><argument_list pos:start="19:18" pos:end="19:22">(<argument pos:start="19:19" pos:end="19:21"><expr pos:start="19:19" pos:end="19:21"><name pos:start="19:19" pos:end="19:21">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="19:25" pos:end="19:33"><expr pos:start="19:25" pos:end="19:32"><name pos:start="19:25" pos:end="19:27">buf</name> <operator pos:start="19:29" pos:end="19:30">+=</operator> <literal type="number" pos:start="19:32" pos:end="19:32">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="19:35" pos:end="19:43"><expr pos:start="19:35" pos:end="19:42"><name pos:start="19:35" pos:end="19:37">cur</name> <operator pos:start="19:39" pos:end="19:40">+=</operator> <literal type="number" pos:start="19:42" pos:end="19:42">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:23"><expr pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:8">skip</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <name pos:start="21:12" pos:end="21:14">len</name> <operator pos:start="21:16" pos:end="21:16">*</operator> <literal type="number" pos:start="21:18" pos:end="21:20">4</literal> <operator pos:start="21:20" pos:end="21:20">+</operator> <literal type="number" pos:start="21:22" pos:end="21:22">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="27:17"><if pos:start="25:5" pos:end="27:17">if<condition pos:start="25:7" pos:end="25:16">(<expr pos:start="25:8" pos:end="25:15"><name pos:start="25:8" pos:end="25:10">len</name> <operator pos:start="25:12" pos:end="25:13">==</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:17"><block_content pos:start="27:9" pos:end="27:17">

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">4</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="36:5"><if pos:start="31:5" pos:end="36:5">if <condition pos:start="31:8" pos:end="31:56">(<expr pos:start="31:9" pos:end="31:55"><name pos:start="31:9" pos:end="31:11">len</name> <operator pos:start="31:13" pos:end="31:14">&gt;=</operator> <name pos:start="31:16" pos:end="31:22">INT_MAX</name><operator pos:start="31:23" pos:end="31:23">/</operator><literal type="number" pos:start="31:24" pos:end="31:25">4</literal><operator pos:start="31:25" pos:end="31:25">-</operator><literal type="number" pos:start="31:26" pos:end="31:26">1</literal> <operator pos:start="31:28" pos:end="31:29">||</operator> <name pos:start="31:31" pos:end="31:46"><name pos:start="31:31" pos:end="31:33">len</name> <argument_list type="generic" pos:start="31:35" pos:end="31:46">&lt; <argument pos:start="31:37" pos:end="31:44"><expr pos:start="31:37" pos:end="31:44"><literal type="number" pos:start="31:37" pos:end="31:37">0</literal> <operator pos:start="31:39" pos:end="31:40">||</operator> <name pos:start="31:42" pos:end="31:44">len</name></expr></argument> &gt;</argument_list></name> <name pos:start="31:48" pos:end="31:55">buf_size</name></expr>)</condition> <block pos:start="31:58" pos:end="36:5">{<block_content pos:start="33:9" pos:end="33:74">

        <expr_stmt pos:start="33:9" pos:end="33:74"><expr pos:start="33:9" pos:end="33:73"><call pos:start="33:9" pos:end="33:73"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:73">(<argument pos:start="33:16" pos:end="33:25"><expr pos:start="33:16" pos:end="33:25"><name pos:start="33:16" pos:end="33:25"><name pos:start="33:16" pos:end="33:18">ctx</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:25">avctx</name></name></expr></argument>, <argument pos:start="33:28" pos:end="33:39"><expr pos:start="33:28" pos:end="33:39"><name pos:start="33:28" pos:end="33:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:42" pos:end="33:72"><expr pos:start="33:42" pos:end="33:72"><literal type="string" pos:start="33:42" pos:end="33:72">"Error, invalid stream size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="40:5" pos:end="40:24"><expr pos:start="40:5" pos:end="40:23"><name pos:start="40:5" pos:end="40:8">toks</name> <operator pos:start="40:10" pos:end="40:10">=</operator> <call pos:start="40:12" pos:end="40:23"><name pos:start="40:12" pos:end="40:18">AV_RB32</name><argument_list pos:start="40:19" pos:end="40:23">(<argument pos:start="40:20" pos:end="40:22"><expr pos:start="40:20" pos:end="40:22"><name pos:start="40:20" pos:end="40:22">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="40:26" pos:end="40:34"><expr pos:start="40:26" pos:end="40:33"><name pos:start="40:26" pos:end="40:28">buf</name> <operator pos:start="40:30" pos:end="40:31">+=</operator> <literal type="number" pos:start="40:33" pos:end="40:33">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="40:36" pos:end="40:44"><expr pos:start="40:36" pos:end="40:43"><name pos:start="40:36" pos:end="40:38">cur</name> <operator pos:start="40:40" pos:end="40:41">+=</operator> <literal type="number" pos:start="40:43" pos:end="40:43">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="42:5" pos:end="65:5"><if pos:start="42:5" pos:end="65:5">if<condition pos:start="42:7" pos:end="42:16">(<expr pos:start="42:8" pos:end="42:15"><name pos:start="42:8" pos:end="42:11">toks</name> <operator pos:start="42:13" pos:end="42:13">&amp;</operator> <literal type="number" pos:start="42:15" pos:end="42:15">1</literal></expr>)</condition> <block pos:start="42:18" pos:end="65:5">{<block_content pos:start="44:9" pos:end="63:9">

        <expr_stmt pos:start="44:9" pos:end="44:27"><expr pos:start="44:9" pos:end="44:26"><name pos:start="44:9" pos:end="44:11">len</name> <operator pos:start="44:13" pos:end="44:13">=</operator> <call pos:start="44:15" pos:end="44:26"><name pos:start="44:15" pos:end="44:21">AV_RB32</name><argument_list pos:start="44:22" pos:end="44:26">(<argument pos:start="44:23" pos:end="44:25"><expr pos:start="44:23" pos:end="44:25"><name pos:start="44:23" pos:end="44:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="44:29" pos:end="44:37"><expr pos:start="44:29" pos:end="44:36"><name pos:start="44:29" pos:end="44:31">buf</name> <operator pos:start="44:33" pos:end="44:34">+=</operator> <literal type="number" pos:start="44:36" pos:end="44:36">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="44:39" pos:end="44:47"><expr pos:start="44:39" pos:end="44:46"><name pos:start="44:39" pos:end="44:41">cur</name> <operator pos:start="44:43" pos:end="44:44">+=</operator> <literal type="number" pos:start="44:46" pos:end="44:46">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="46:9" pos:end="50:9"><if pos:start="46:9" pos:end="50:9">if<condition pos:start="46:11" pos:end="46:29">(<expr pos:start="46:12" pos:end="46:28"><name pos:start="46:12" pos:end="46:14">len</name> <operator pos:start="46:16" pos:end="46:17">==</operator> <name pos:start="46:19" pos:end="46:28">TM2_ESCAPE</name></expr>)</condition> <block pos:start="46:31" pos:end="50:9">{<block_content pos:start="48:13" pos:end="48:51">

            <expr_stmt pos:start="48:13" pos:end="48:31"><expr pos:start="48:13" pos:end="48:30"><name pos:start="48:13" pos:end="48:15">len</name> <operator pos:start="48:17" pos:end="48:17">=</operator> <call pos:start="48:19" pos:end="48:30"><name pos:start="48:19" pos:end="48:25">AV_RB32</name><argument_list pos:start="48:26" pos:end="48:30">(<argument pos:start="48:27" pos:end="48:29"><expr pos:start="48:27" pos:end="48:29"><name pos:start="48:27" pos:end="48:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="48:33" pos:end="48:41"><expr pos:start="48:33" pos:end="48:40"><name pos:start="48:33" pos:end="48:35">buf</name> <operator pos:start="48:37" pos:end="48:38">+=</operator> <literal type="number" pos:start="48:40" pos:end="48:40">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="48:43" pos:end="48:51"><expr pos:start="48:43" pos:end="48:50"><name pos:start="48:43" pos:end="48:45">cur</name> <operator pos:start="48:47" pos:end="48:48">+=</operator> <literal type="number" pos:start="48:50" pos:end="48:50">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="52:9" pos:end="63:9"><if pos:start="52:9" pos:end="63:9">if<condition pos:start="52:11" pos:end="52:19">(<expr pos:start="52:12" pos:end="52:18"><name pos:start="52:12" pos:end="52:14">len</name> <operator pos:start="52:16" pos:end="52:16">&gt;</operator> <literal type="number" pos:start="52:18" pos:end="52:18">0</literal></expr>)</condition> <block pos:start="52:21" pos:end="63:9">{<block_content pos:start="54:13" pos:end="61:63">

            <expr_stmt pos:start="54:13" pos:end="54:59"><expr pos:start="54:13" pos:end="54:58"><call pos:start="54:13" pos:end="54:58"><name pos:start="54:13" pos:end="54:25">init_get_bits</name><argument_list pos:start="54:26" pos:end="54:58">(<argument pos:start="54:27" pos:end="54:34"><expr pos:start="54:27" pos:end="54:34"><operator pos:start="54:27" pos:end="54:27">&amp;</operator><name pos:start="54:28" pos:end="54:34"><name pos:start="54:28" pos:end="54:30">ctx</name><operator pos:start="54:31" pos:end="54:32">-&gt;</operator><name pos:start="54:33" pos:end="54:34">gb</name></name></expr></argument>, <argument pos:start="54:37" pos:end="54:39"><expr pos:start="54:37" pos:end="54:39"><name pos:start="54:37" pos:end="54:39">buf</name></expr></argument>, <argument pos:start="54:42" pos:end="54:57"><expr pos:start="54:42" pos:end="54:57"><operator pos:start="54:42" pos:end="54:42">(</operator><name pos:start="54:43" pos:end="54:46">skip</name> <operator pos:start="54:48" pos:end="54:48">-</operator> <name pos:start="54:50" pos:end="54:52">cur</name><operator pos:start="54:53" pos:end="54:53">)</operator> <operator pos:start="54:55" pos:end="54:55">*</operator> <literal type="number" pos:start="54:57" pos:end="54:57">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="56:13" pos:end="59:63"><if pos:start="56:13" pos:end="59:63">if<condition pos:start="56:15" pos:end="56:53">(<expr pos:start="56:16" pos:end="56:52"><call pos:start="56:16" pos:end="56:46"><name pos:start="56:16" pos:end="56:30">tm2_read_deltas</name><argument_list pos:start="56:31" pos:end="56:46">(<argument pos:start="56:32" pos:end="56:34"><expr pos:start="56:32" pos:end="56:34"><name pos:start="56:32" pos:end="56:34">ctx</name></expr></argument>, <argument pos:start="56:37" pos:end="56:45"><expr pos:start="56:37" pos:end="56:45"><name pos:start="56:37" pos:end="56:45">stream_id</name></expr></argument>)</argument_list></call> <operator pos:start="56:48" pos:end="56:49">==</operator> <operator pos:start="56:51" pos:end="56:51">-</operator><literal type="number" pos:start="56:52" pos:end="56:52">1</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:63"><block_content pos:start="59:13" pos:end="59:63">


            <expr_stmt pos:start="59:13" pos:end="59:63"><expr pos:start="59:13" pos:end="59:62"><name pos:start="59:13" pos:end="59:15">buf</name> <operator pos:start="59:17" pos:end="59:18">+=</operator> <operator pos:start="59:20" pos:end="59:20">(</operator><operator pos:start="59:21" pos:end="59:21">(</operator><call pos:start="59:22" pos:end="59:45"><name pos:start="59:22" pos:end="59:35">get_bits_count</name><argument_list pos:start="59:36" pos:end="59:45">(<argument pos:start="59:37" pos:end="59:44"><expr pos:start="59:37" pos:end="59:44"><operator pos:start="59:37" pos:end="59:37">&amp;</operator><name pos:start="59:38" pos:end="59:44"><name pos:start="59:38" pos:end="59:40">ctx</name><operator pos:start="59:41" pos:end="59:42">-&gt;</operator><name pos:start="59:43" pos:end="59:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:47" pos:end="59:47">+</operator> <literal type="number" pos:start="59:49" pos:end="59:50">31</literal><operator pos:start="59:51" pos:end="59:51">)</operator> <operator pos:start="59:53" pos:end="59:54">&gt;&gt;</operator> <literal type="number" pos:start="59:56" pos:end="59:56">5</literal><operator pos:start="59:57" pos:end="59:57">)</operator> <operator pos:start="59:59" pos:end="59:60">&lt;&lt;</operator> <literal type="number" pos:start="59:62" pos:end="59:62">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:63"><expr pos:start="61:13" pos:end="61:62"><name pos:start="61:13" pos:end="61:15">cur</name> <operator pos:start="61:17" pos:end="61:18">+=</operator> <operator pos:start="61:20" pos:end="61:20">(</operator><operator pos:start="61:21" pos:end="61:21">(</operator><call pos:start="61:22" pos:end="61:45"><name pos:start="61:22" pos:end="61:35">get_bits_count</name><argument_list pos:start="61:36" pos:end="61:45">(<argument pos:start="61:37" pos:end="61:44"><expr pos:start="61:37" pos:end="61:44"><operator pos:start="61:37" pos:end="61:37">&amp;</operator><name pos:start="61:38" pos:end="61:44"><name pos:start="61:38" pos:end="61:40">ctx</name><operator pos:start="61:41" pos:end="61:42">-&gt;</operator><name pos:start="61:43" pos:end="61:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:47" pos:end="61:47">+</operator> <literal type="number" pos:start="61:49" pos:end="61:50">31</literal><operator pos:start="61:51" pos:end="61:51">)</operator> <operator pos:start="61:53" pos:end="61:54">&gt;&gt;</operator> <literal type="number" pos:start="61:56" pos:end="61:56">5</literal><operator pos:start="61:57" pos:end="61:57">)</operator> <operator pos:start="61:59" pos:end="61:60">&lt;&lt;</operator> <literal type="number" pos:start="61:62" pos:end="61:62">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="67:5" pos:end="67:28">/* skip unused fields */</comment>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if<condition pos:start="69:7" pos:end="69:34">(<expr pos:start="69:8" pos:end="69:33"><call pos:start="69:8" pos:end="69:19"><name pos:start="69:8" pos:end="69:14">AV_RB32</name><argument_list pos:start="69:15" pos:end="69:19">(<argument pos:start="69:16" pos:end="69:18"><expr pos:start="69:16" pos:end="69:18"><name pos:start="69:16" pos:end="69:18">buf</name></expr></argument>)</argument_list></call> <operator pos:start="69:21" pos:end="69:22">==</operator> <name pos:start="69:24" pos:end="69:33">TM2_ESCAPE</name></expr>)</condition> <block pos:start="69:36" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:27">

        <expr_stmt pos:start="71:9" pos:end="71:17"><expr pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:11">buf</name> <operator pos:start="71:13" pos:end="71:14">+=</operator> <literal type="number" pos:start="71:16" pos:end="71:16">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="71:19" pos:end="71:27"><expr pos:start="71:19" pos:end="71:26"><name pos:start="71:19" pos:end="71:21">cur</name> <operator pos:start="71:23" pos:end="71:24">+=</operator> <literal type="number" pos:start="71:26" pos:end="71:26">4</literal></expr>;</expr_stmt> <comment type="block" pos:start="71:29" pos:end="71:76">/* some unknown length - could be escaped too */</comment>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:13"><expr pos:start="75:5" pos:end="75:12"><name pos:start="75:5" pos:end="75:7">buf</name> <operator pos:start="75:9" pos:end="75:10">+=</operator> <literal type="number" pos:start="75:12" pos:end="75:12">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="75:15" pos:end="75:23"><expr pos:start="75:15" pos:end="75:22"><name pos:start="75:15" pos:end="75:17">cur</name> <operator pos:start="75:19" pos:end="75:20">+=</operator> <literal type="number" pos:start="75:22" pos:end="75:22">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:13"><expr pos:start="77:5" pos:end="77:12"><name pos:start="77:5" pos:end="77:7">buf</name> <operator pos:start="77:9" pos:end="77:10">+=</operator> <literal type="number" pos:start="77:12" pos:end="77:12">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="77:15" pos:end="77:23"><expr pos:start="77:15" pos:end="77:22"><name pos:start="77:15" pos:end="77:17">cur</name> <operator pos:start="77:19" pos:end="77:20">+=</operator> <literal type="number" pos:start="77:22" pos:end="77:22">4</literal></expr>;</expr_stmt> <comment type="block" pos:start="77:25" pos:end="77:47">/* unused by decoder */</comment>





    <expr_stmt pos:start="83:5" pos:end="83:51"><expr pos:start="83:5" pos:end="83:50"><call pos:start="83:5" pos:end="83:50"><name pos:start="83:5" pos:end="83:17">init_get_bits</name><argument_list pos:start="83:18" pos:end="83:50">(<argument pos:start="83:19" pos:end="83:26"><expr pos:start="83:19" pos:end="83:26"><operator pos:start="83:19" pos:end="83:19">&amp;</operator><name pos:start="83:20" pos:end="83:26"><name pos:start="83:20" pos:end="83:22">ctx</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:26">gb</name></name></expr></argument>, <argument pos:start="83:29" pos:end="83:31"><expr pos:start="83:29" pos:end="83:31"><name pos:start="83:29" pos:end="83:31">buf</name></expr></argument>, <argument pos:start="83:34" pos:end="83:49"><expr pos:start="83:34" pos:end="83:49"><operator pos:start="83:34" pos:end="83:34">(</operator><name pos:start="83:35" pos:end="83:38">skip</name> <operator pos:start="83:40" pos:end="83:40">-</operator> <name pos:start="83:42" pos:end="83:44">cur</name><operator pos:start="83:45" pos:end="83:45">)</operator> <operator pos:start="83:47" pos:end="83:47">*</operator> <literal type="number" pos:start="83:49" pos:end="83:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="88:55"><if pos:start="85:5" pos:end="88:55">if<condition pos:start="85:7" pos:end="85:47">(<expr pos:start="85:8" pos:end="85:46"><call pos:start="85:8" pos:end="85:40"><name pos:start="85:8" pos:end="85:27">tm2_build_huff_table</name><argument_list pos:start="85:28" pos:end="85:40">(<argument pos:start="85:29" pos:end="85:31"><expr pos:start="85:29" pos:end="85:31"><name pos:start="85:29" pos:end="85:31">ctx</name></expr></argument>, <argument pos:start="85:34" pos:end="85:39"><expr pos:start="85:34" pos:end="85:39"><operator pos:start="85:34" pos:end="85:34">&amp;</operator><name pos:start="85:35" pos:end="85:39">codes</name></expr></argument>)</argument_list></call> <operator pos:start="85:42" pos:end="85:43">==</operator> <operator pos:start="85:45" pos:end="85:45">-</operator><literal type="number" pos:start="85:46" pos:end="85:46">1</literal></expr>)</condition><block type="pseudo" pos:start="88:5" pos:end="88:55"><block_content pos:start="88:5" pos:end="88:55">


    <expr_stmt pos:start="88:5" pos:end="88:55"><expr pos:start="88:5" pos:end="88:54"><name pos:start="88:5" pos:end="88:7">buf</name> <operator pos:start="88:9" pos:end="88:10">+=</operator> <operator pos:start="88:12" pos:end="88:12">(</operator><operator pos:start="88:13" pos:end="88:13">(</operator><call pos:start="88:14" pos:end="88:37"><name pos:start="88:14" pos:end="88:27">get_bits_count</name><argument_list pos:start="88:28" pos:end="88:37">(<argument pos:start="88:29" pos:end="88:36"><expr pos:start="88:29" pos:end="88:36"><operator pos:start="88:29" pos:end="88:29">&amp;</operator><name pos:start="88:30" pos:end="88:36"><name pos:start="88:30" pos:end="88:32">ctx</name><operator pos:start="88:33" pos:end="88:34">-&gt;</operator><name pos:start="88:35" pos:end="88:36">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="88:39" pos:end="88:39">+</operator> <literal type="number" pos:start="88:41" pos:end="88:42">31</literal><operator pos:start="88:43" pos:end="88:43">)</operator> <operator pos:start="88:45" pos:end="88:46">&gt;&gt;</operator> <literal type="number" pos:start="88:48" pos:end="88:48">5</literal><operator pos:start="88:49" pos:end="88:49">)</operator> <operator pos:start="88:51" pos:end="88:52">&lt;&lt;</operator> <literal type="number" pos:start="88:54" pos:end="88:54">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="90:5" pos:end="90:55"><expr pos:start="90:5" pos:end="90:54"><name pos:start="90:5" pos:end="90:7">cur</name> <operator pos:start="90:9" pos:end="90:10">+=</operator> <operator pos:start="90:12" pos:end="90:12">(</operator><operator pos:start="90:13" pos:end="90:13">(</operator><call pos:start="90:14" pos:end="90:37"><name pos:start="90:14" pos:end="90:27">get_bits_count</name><argument_list pos:start="90:28" pos:end="90:37">(<argument pos:start="90:29" pos:end="90:36"><expr pos:start="90:29" pos:end="90:36"><operator pos:start="90:29" pos:end="90:29">&amp;</operator><name pos:start="90:30" pos:end="90:36"><name pos:start="90:30" pos:end="90:32">ctx</name><operator pos:start="90:33" pos:end="90:34">-&gt;</operator><name pos:start="90:35" pos:end="90:36">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="90:39" pos:end="90:39">+</operator> <literal type="number" pos:start="90:41" pos:end="90:42">31</literal><operator pos:start="90:43" pos:end="90:43">)</operator> <operator pos:start="90:45" pos:end="90:46">&gt;&gt;</operator> <literal type="number" pos:start="90:48" pos:end="90:48">5</literal><operator pos:start="90:49" pos:end="90:49">)</operator> <operator pos:start="90:51" pos:end="90:52">&lt;&lt;</operator> <literal type="number" pos:start="90:54" pos:end="90:54">2</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="94:5" pos:end="94:15"><expr pos:start="94:5" pos:end="94:14"><name pos:start="94:5" pos:end="94:8">toks</name> <operator pos:start="94:10" pos:end="94:12">&gt;&gt;=</operator> <literal type="number" pos:start="94:14" pos:end="94:14">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="96:5" pos:end="96:48">/* check if we have sane number of tokens */</comment>

    <if_stmt pos:start="98:5" pos:end="105:5"><if pos:start="98:5" pos:end="105:5">if<condition pos:start="98:7" pos:end="98:39">(<expr pos:start="98:8" pos:end="98:38"><operator pos:start="98:8" pos:end="98:8">(</operator><name pos:start="98:9" pos:end="98:12">toks</name> <operator pos:start="98:14" pos:end="98:14">&lt;</operator> <literal type="number" pos:start="98:16" pos:end="98:16">0</literal><operator pos:start="98:17" pos:end="98:17">)</operator> <operator pos:start="98:19" pos:end="98:20">||</operator> <operator pos:start="98:22" pos:end="98:22">(</operator><name pos:start="98:23" pos:end="98:26">toks</name> <operator pos:start="98:28" pos:end="98:28">&gt;</operator> <literal type="number" pos:start="98:30" pos:end="98:37">0xFFFFFF</literal><operator pos:start="98:38" pos:end="98:38">)</operator></expr>)</condition><block pos:start="98:40" pos:end="105:5">{<block_content pos:start="100:9" pos:end="102:31">

        <expr_stmt pos:start="100:9" pos:end="100:83"><expr pos:start="100:9" pos:end="100:82"><call pos:start="100:9" pos:end="100:82"><name pos:start="100:9" pos:end="100:14">av_log</name><argument_list pos:start="100:15" pos:end="100:82">(<argument pos:start="100:16" pos:end="100:25"><expr pos:start="100:16" pos:end="100:25"><name pos:start="100:16" pos:end="100:25"><name pos:start="100:16" pos:end="100:18">ctx</name><operator pos:start="100:19" pos:end="100:20">-&gt;</operator><name pos:start="100:21" pos:end="100:25">avctx</name></name></expr></argument>, <argument pos:start="100:28" pos:end="100:39"><expr pos:start="100:28" pos:end="100:39"><name pos:start="100:28" pos:end="100:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="100:42" pos:end="100:75"><expr pos:start="100:42" pos:end="100:75"><literal type="string" pos:start="100:42" pos:end="100:75">"Incorrect number of tokens: %i\n"</literal></expr></argument>, <argument pos:start="100:78" pos:end="100:81"><expr pos:start="100:78" pos:end="100:81"><name pos:start="100:78" pos:end="100:81">toks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="102:9" pos:end="102:31"><expr pos:start="102:9" pos:end="102:30"><call pos:start="102:9" pos:end="102:30"><name pos:start="102:9" pos:end="102:22">tm2_free_codes</name><argument_list pos:start="102:23" pos:end="102:30">(<argument pos:start="102:24" pos:end="102:29"><expr pos:start="102:24" pos:end="102:29"><operator pos:start="102:24" pos:end="102:24">&amp;</operator><name pos:start="102:25" pos:end="102:29">codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:84"><expr pos:start="107:5" pos:end="107:83"><name pos:start="107:5" pos:end="107:26"><name pos:start="107:5" pos:end="107:7">ctx</name><operator pos:start="107:8" pos:end="107:9">-&gt;</operator><name pos:start="107:10" pos:end="107:15">tokens</name><index pos:start="107:16" pos:end="107:26">[<expr pos:start="107:17" pos:end="107:25"><name pos:start="107:17" pos:end="107:25">stream_id</name></expr>]</index></name> <operator pos:start="107:28" pos:end="107:28">=</operator> <call pos:start="107:30" pos:end="107:83"><name pos:start="107:30" pos:end="107:39">av_realloc</name><argument_list pos:start="107:40" pos:end="107:83">(<argument pos:start="107:41" pos:end="107:62"><expr pos:start="107:41" pos:end="107:62"><name pos:start="107:41" pos:end="107:62"><name pos:start="107:41" pos:end="107:43">ctx</name><operator pos:start="107:44" pos:end="107:45">-&gt;</operator><name pos:start="107:46" pos:end="107:51">tokens</name><index pos:start="107:52" pos:end="107:62">[<expr pos:start="107:53" pos:end="107:61"><name pos:start="107:53" pos:end="107:61">stream_id</name></expr>]</index></name></expr></argument>, <argument pos:start="107:65" pos:end="107:82"><expr pos:start="107:65" pos:end="107:82"><name pos:start="107:65" pos:end="107:68">toks</name> <operator pos:start="107:70" pos:end="107:70">*</operator> <sizeof pos:start="107:72" pos:end="107:82">sizeof<argument_list pos:start="107:78" pos:end="107:82">(<argument pos:start="107:79" pos:end="107:81"><expr pos:start="107:79" pos:end="107:81"><name pos:start="107:79" pos:end="107:81">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:36"><expr pos:start="109:5" pos:end="109:35"><name pos:start="109:5" pos:end="109:28"><name pos:start="109:5" pos:end="109:7">ctx</name><operator pos:start="109:8" pos:end="109:9">-&gt;</operator><name pos:start="109:10" pos:end="109:17">tok_lens</name><index pos:start="109:18" pos:end="109:28">[<expr pos:start="109:19" pos:end="109:27"><name pos:start="109:19" pos:end="109:27">stream_id</name></expr>]</index></name> <operator pos:start="109:30" pos:end="109:30">=</operator> <name pos:start="109:32" pos:end="109:35">toks</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:23"><expr pos:start="111:5" pos:end="111:22"><name pos:start="111:5" pos:end="111:7">len</name> <operator pos:start="111:9" pos:end="111:9">=</operator> <call pos:start="111:11" pos:end="111:22"><name pos:start="111:11" pos:end="111:17">AV_RB32</name><argument_list pos:start="111:18" pos:end="111:22">(<argument pos:start="111:19" pos:end="111:21"><expr pos:start="111:19" pos:end="111:21"><name pos:start="111:19" pos:end="111:21">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="111:25" pos:end="111:33"><expr pos:start="111:25" pos:end="111:32"><name pos:start="111:25" pos:end="111:27">buf</name> <operator pos:start="111:29" pos:end="111:30">+=</operator> <literal type="number" pos:start="111:32" pos:end="111:32">4</literal></expr>;</expr_stmt> <expr_stmt pos:start="111:35" pos:end="111:43"><expr pos:start="111:35" pos:end="111:42"><name pos:start="111:35" pos:end="111:37">cur</name> <operator pos:start="111:39" pos:end="111:40">+=</operator> <literal type="number" pos:start="111:42" pos:end="111:42">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="136:5"><if pos:start="113:5" pos:end="130:5">if<condition pos:start="113:7" pos:end="113:15">(<expr pos:start="113:8" pos:end="113:14"><name pos:start="113:8" pos:end="113:10">len</name> <operator pos:start="113:12" pos:end="113:12">&gt;</operator> <literal type="number" pos:start="113:14" pos:end="113:14">0</literal></expr>)</condition> <block pos:start="113:17" pos:end="130:5">{<block_content pos:start="115:9" pos:end="128:9">

        <expr_stmt pos:start="115:9" pos:end="115:55"><expr pos:start="115:9" pos:end="115:54"><call pos:start="115:9" pos:end="115:54"><name pos:start="115:9" pos:end="115:21">init_get_bits</name><argument_list pos:start="115:22" pos:end="115:54">(<argument pos:start="115:23" pos:end="115:30"><expr pos:start="115:23" pos:end="115:30"><operator pos:start="115:23" pos:end="115:23">&amp;</operator><name pos:start="115:24" pos:end="115:30"><name pos:start="115:24" pos:end="115:26">ctx</name><operator pos:start="115:27" pos:end="115:28">-&gt;</operator><name pos:start="115:29" pos:end="115:30">gb</name></name></expr></argument>, <argument pos:start="115:33" pos:end="115:35"><expr pos:start="115:33" pos:end="115:35"><name pos:start="115:33" pos:end="115:35">buf</name></expr></argument>, <argument pos:start="115:38" pos:end="115:53"><expr pos:start="115:38" pos:end="115:53"><operator pos:start="115:38" pos:end="115:38">(</operator><name pos:start="115:39" pos:end="115:42">skip</name> <operator pos:start="115:44" pos:end="115:44">-</operator> <name pos:start="115:46" pos:end="115:48">cur</name><operator pos:start="115:49" pos:end="115:49">)</operator> <operator pos:start="115:51" pos:end="115:51">*</operator> <literal type="number" pos:start="115:53" pos:end="115:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="117:9" pos:end="128:9">for<control pos:start="117:12" pos:end="117:33">(<init pos:start="117:13" pos:end="117:18"><expr pos:start="117:13" pos:end="117:17"><name pos:start="117:13" pos:end="117:13">i</name> <operator pos:start="117:15" pos:end="117:15">=</operator> <literal type="number" pos:start="117:17" pos:end="117:17">0</literal></expr>;</init> <condition pos:start="117:20" pos:end="117:28"><expr pos:start="117:20" pos:end="117:27"><name pos:start="117:20" pos:end="117:20">i</name> <operator pos:start="117:22" pos:end="117:22">&lt;</operator> <name pos:start="117:24" pos:end="117:27">toks</name></expr>;</condition> <incr pos:start="117:30" pos:end="117:32"><expr pos:start="117:30" pos:end="117:32"><name pos:start="117:30" pos:end="117:30">i</name><operator pos:start="117:31" pos:end="117:32">++</operator></expr></incr>)</control> <block pos:start="117:35" pos:end="128:9">{<block_content pos:start="119:13" pos:end="126:72">

            <if_stmt pos:start="119:13" pos:end="124:13"><if pos:start="119:13" pos:end="124:13">if <condition pos:start="119:16" pos:end="119:45">(<expr pos:start="119:17" pos:end="119:44"><call pos:start="119:17" pos:end="119:39"><name pos:start="119:17" pos:end="119:29">get_bits_left</name><argument_list pos:start="119:30" pos:end="119:39">(<argument pos:start="119:31" pos:end="119:38"><expr pos:start="119:31" pos:end="119:38"><operator pos:start="119:31" pos:end="119:31">&amp;</operator><name pos:start="119:32" pos:end="119:38"><name pos:start="119:32" pos:end="119:34">ctx</name><operator pos:start="119:35" pos:end="119:36">-&gt;</operator><name pos:start="119:37" pos:end="119:38">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="119:41" pos:end="119:42">&lt;=</operator> <literal type="number" pos:start="119:44" pos:end="119:44">0</literal></expr>)</condition> <block pos:start="119:47" pos:end="124:13">{<block_content pos:start="121:17" pos:end="121:91">

                <expr_stmt pos:start="121:17" pos:end="121:91"><expr pos:start="121:17" pos:end="121:90"><call pos:start="121:17" pos:end="121:90"><name pos:start="121:17" pos:end="121:22">av_log</name><argument_list pos:start="121:23" pos:end="121:90">(<argument pos:start="121:24" pos:end="121:33"><expr pos:start="121:24" pos:end="121:33"><name pos:start="121:24" pos:end="121:33"><name pos:start="121:24" pos:end="121:26">ctx</name><operator pos:start="121:27" pos:end="121:28">-&gt;</operator><name pos:start="121:29" pos:end="121:33">avctx</name></name></expr></argument>, <argument pos:start="121:36" pos:end="121:47"><expr pos:start="121:36" pos:end="121:47"><name pos:start="121:36" pos:end="121:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:50" pos:end="121:83"><expr pos:start="121:50" pos:end="121:83"><literal type="string" pos:start="121:50" pos:end="121:83">"Incorrect number of tokens: %i\n"</literal></expr></argument>, <argument pos:start="121:86" pos:end="121:89"><expr pos:start="121:86" pos:end="121:89"><name pos:start="121:86" pos:end="121:89">toks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="126:13" pos:end="126:72"><expr pos:start="126:13" pos:end="126:71"><name pos:start="126:13" pos:end="126:37"><name pos:start="126:13" pos:end="126:15">ctx</name><operator pos:start="126:16" pos:end="126:17">-&gt;</operator><name pos:start="126:18" pos:end="126:23">tokens</name><index pos:start="126:24" pos:end="126:34">[<expr pos:start="126:25" pos:end="126:33"><name pos:start="126:25" pos:end="126:33">stream_id</name></expr>]</index><index pos:start="126:35" pos:end="126:37">[<expr pos:start="126:36" pos:end="126:36"><name pos:start="126:36" pos:end="126:36">i</name></expr>]</index></name> <operator pos:start="126:39" pos:end="126:39">=</operator> <call pos:start="126:41" pos:end="126:71"><name pos:start="126:41" pos:end="126:53">tm2_get_token</name><argument_list pos:start="126:54" pos:end="126:71">(<argument pos:start="126:55" pos:end="126:62"><expr pos:start="126:55" pos:end="126:62"><operator pos:start="126:55" pos:end="126:55">&amp;</operator><name pos:start="126:56" pos:end="126:62"><name pos:start="126:56" pos:end="126:58">ctx</name><operator pos:start="126:59" pos:end="126:60">-&gt;</operator><name pos:start="126:61" pos:end="126:62">gb</name></name></expr></argument>, <argument pos:start="126:65" pos:end="126:70"><expr pos:start="126:65" pos:end="126:70"><operator pos:start="126:65" pos:end="126:65">&amp;</operator><name pos:start="126:66" pos:end="126:70">codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="130:7" pos:end="136:5">else <block pos:start="130:12" pos:end="136:5">{<block_content pos:start="132:9" pos:end="134:56">

        <for pos:start="132:9" pos:end="134:56">for<control pos:start="132:12" pos:end="132:33">(<init pos:start="132:13" pos:end="132:18"><expr pos:start="132:13" pos:end="132:17"><name pos:start="132:13" pos:end="132:13">i</name> <operator pos:start="132:15" pos:end="132:15">=</operator> <literal type="number" pos:start="132:17" pos:end="132:17">0</literal></expr>;</init> <condition pos:start="132:20" pos:end="132:28"><expr pos:start="132:20" pos:end="132:27"><name pos:start="132:20" pos:end="132:20">i</name> <operator pos:start="132:22" pos:end="132:22">&lt;</operator> <name pos:start="132:24" pos:end="132:27">toks</name></expr>;</condition> <incr pos:start="132:30" pos:end="132:32"><expr pos:start="132:30" pos:end="132:32"><name pos:start="132:30" pos:end="132:30">i</name><operator pos:start="132:31" pos:end="132:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="134:13" pos:end="134:56"><block_content pos:start="134:13" pos:end="134:56">

            <expr_stmt pos:start="134:13" pos:end="134:56"><expr pos:start="134:13" pos:end="134:55"><name pos:start="134:13" pos:end="134:37"><name pos:start="134:13" pos:end="134:15">ctx</name><operator pos:start="134:16" pos:end="134:17">-&gt;</operator><name pos:start="134:18" pos:end="134:23">tokens</name><index pos:start="134:24" pos:end="134:34">[<expr pos:start="134:25" pos:end="134:33"><name pos:start="134:25" pos:end="134:33">stream_id</name></expr>]</index><index pos:start="134:35" pos:end="134:37">[<expr pos:start="134:36" pos:end="134:36"><name pos:start="134:36" pos:end="134:36">i</name></expr>]</index></name> <operator pos:start="134:39" pos:end="134:39">=</operator> <name pos:start="134:41" pos:end="134:55"><name pos:start="134:41" pos:end="134:45">codes</name><operator pos:start="134:46" pos:end="134:46">.</operator><name pos:start="134:47" pos:end="134:52">recode</name><index pos:start="134:53" pos:end="134:55">[<expr pos:start="134:54" pos:end="134:54"><literal type="number" pos:start="134:54" pos:end="134:54">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="138:5" pos:end="138:27"><expr pos:start="138:5" pos:end="138:26"><call pos:start="138:5" pos:end="138:26"><name pos:start="138:5" pos:end="138:18">tm2_free_codes</name><argument_list pos:start="138:19" pos:end="138:26">(<argument pos:start="138:20" pos:end="138:25"><expr pos:start="138:20" pos:end="138:25"><operator pos:start="138:20" pos:end="138:20">&amp;</operator><name pos:start="138:21" pos:end="138:25">codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="142:5" pos:end="142:16">return <expr pos:start="142:12" pos:end="142:15"><name pos:start="142:12" pos:end="142:15">skip</name></expr>;</return>

</block_content>}</block></function></unit>
