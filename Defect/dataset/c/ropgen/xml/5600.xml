<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5600.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">nut_read_header</name><parameter_list pos:start="1:27" pos:end="1:70">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:69"><decl pos:start="1:48" pos:end="1:69"><type pos:start="1:48" pos:end="1:69"><name pos:start="1:48" pos:end="1:65">AVFormatParameters</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">ap</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">NUTContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">nut</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">ByteIOContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">bc</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:30"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:30">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:15">pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:27">inited_stream_count</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:16"><expr pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:7">nut</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:12">avf</name></name><operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:15">s</name></expr>;</expr_stmt>

    

    <comment type="block" pos:start="19:5" pos:end="19:21">/* main header */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:10"><expr pos:start="21:5" pos:end="21:9"><name pos:start="21:5" pos:end="21:7">pos</name><operator pos:start="21:8" pos:end="21:8">=</operator><literal type="number" pos:start="21:9" pos:end="21:9">0</literal></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="39:5">for<control pos:start="23:8" pos:end="23:11">(<init pos:start="23:9" pos:end="23:9">;</init><condition pos:start="23:10" pos:end="23:10">;</condition><incr/>)</control><block pos:start="23:12" pos:end="39:5">{<block_content pos:start="25:9" pos:end="37:18">

        <expr_stmt pos:start="25:9" pos:end="25:55"><expr pos:start="25:9" pos:end="25:54"><name pos:start="25:9" pos:end="25:11">pos</name><operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:52"><name pos:start="25:14" pos:end="25:27">find_startcode</name><argument_list pos:start="25:28" pos:end="25:52">(<argument pos:start="25:29" pos:end="25:30"><expr pos:start="25:29" pos:end="25:30"><name pos:start="25:29" pos:end="25:30">bc</name></expr></argument>, <argument pos:start="25:33" pos:end="25:46"><expr pos:start="25:33" pos:end="25:46"><name pos:start="25:33" pos:end="25:46">MAIN_STARTCODE</name></expr></argument>, <argument pos:start="25:49" pos:end="25:51"><expr pos:start="25:49" pos:end="25:51"><name pos:start="25:49" pos:end="25:51">pos</name></expr></argument>)</argument_list></call><operator pos:start="25:53" pos:end="25:53">+</operator><literal type="number" pos:start="25:54" pos:end="25:54">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:18">(<expr pos:start="27:13" pos:end="27:17"><name pos:start="27:13" pos:end="27:15">pos</name><operator pos:start="27:16" pos:end="27:16">&lt;</operator><literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr>)</condition><block pos:start="27:19" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:22">

            <expr_stmt pos:start="29:13" pos:end="29:65"><expr pos:start="29:13" pos:end="29:64"><call pos:start="29:13" pos:end="29:64"><name pos:start="29:13" pos:end="29:18">av_log</name><argument_list pos:start="29:19" pos:end="29:64">(<argument pos:start="29:20" pos:end="29:20"><expr pos:start="29:20" pos:end="29:20"><name pos:start="29:20" pos:end="29:20">s</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:63"><expr pos:start="29:37" pos:end="29:63"><literal type="string" pos:start="29:37" pos:end="29:63">"no main startcode found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:22">return <expr pos:start="31:20" pos:end="31:21"><operator pos:start="31:20" pos:end="31:20">-</operator><literal type="number" pos:start="31:21" pos:end="31:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="35:9" pos:end="37:18"><if pos:start="35:9" pos:end="37:18">if<condition pos:start="35:11" pos:end="35:40">(<expr pos:start="35:12" pos:end="35:39"><call pos:start="35:12" pos:end="35:34"><name pos:start="35:12" pos:end="35:29">decode_main_header</name><argument_list pos:start="35:30" pos:end="35:34">(<argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><name pos:start="35:31" pos:end="35:33">nut</name></expr></argument>)</argument_list></call> <operator pos:start="35:36" pos:end="35:37">&gt;=</operator> <literal type="number" pos:start="35:39" pos:end="35:39">0</literal></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:18"><block_content pos:start="37:13" pos:end="37:18">

            <break pos:start="37:13" pos:end="37:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    

    

    <expr_stmt pos:start="45:5" pos:end="45:20"><expr pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:15">bit_rate</name></name> <operator pos:start="45:17" pos:end="45:17">=</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:69"><expr pos:start="49:5" pos:end="49:68"><name pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:7">nut</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:15">stream</name></name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:68"><name pos:start="49:19" pos:end="49:27">av_malloc</name><argument_list pos:start="49:28" pos:end="49:68">(<argument pos:start="49:29" pos:end="49:67"><expr pos:start="49:29" pos:end="49:67"><sizeof pos:start="49:29" pos:end="49:49">sizeof<argument_list pos:start="49:35" pos:end="49:49">(<argument pos:start="49:36" pos:end="49:48"><expr pos:start="49:36" pos:end="49:48"><name pos:start="49:36" pos:end="49:48">StreamContext</name></expr></argument>)</argument_list></sizeof><operator pos:start="49:50" pos:end="49:50">*</operator><name pos:start="49:51" pos:end="49:67"><name pos:start="49:51" pos:end="49:53">nut</name><operator pos:start="49:54" pos:end="49:55">-&gt;</operator><name pos:start="49:56" pos:end="49:67">stream_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:24">/* stream headers */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:10"><expr pos:start="55:5" pos:end="55:9"><name pos:start="55:5" pos:end="55:7">pos</name><operator pos:start="55:8" pos:end="55:8">=</operator><literal type="number" pos:start="55:9" pos:end="55:9">0</literal></expr>;</expr_stmt>

    <for pos:start="57:5" pos:end="73:5">for<control pos:start="57:8" pos:end="57:72">(<init pos:start="57:9" pos:end="57:30"><expr pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:27">inited_stream_count</name><operator pos:start="57:28" pos:end="57:28">=</operator><literal type="number" pos:start="57:29" pos:end="57:29">0</literal></expr>;</init> <condition pos:start="57:32" pos:end="57:71"><expr pos:start="57:32" pos:end="57:70"><name pos:start="57:32" pos:end="57:50">inited_stream_count</name> <operator pos:start="57:52" pos:end="57:52">&lt;</operator> <name pos:start="57:54" pos:end="57:70"><name pos:start="57:54" pos:end="57:56">nut</name><operator pos:start="57:57" pos:end="57:58">-&gt;</operator><name pos:start="57:59" pos:end="57:70">stream_count</name></name></expr>;</condition><incr/>)</control><block pos:start="57:73" pos:end="73:5">{<block_content pos:start="59:9" pos:end="71:34">

        <expr_stmt pos:start="59:9" pos:end="59:57"><expr pos:start="59:9" pos:end="59:56"><name pos:start="59:9" pos:end="59:11">pos</name><operator pos:start="59:12" pos:end="59:12">=</operator> <call pos:start="59:14" pos:end="59:54"><name pos:start="59:14" pos:end="59:27">find_startcode</name><argument_list pos:start="59:28" pos:end="59:54">(<argument pos:start="59:29" pos:end="59:30"><expr pos:start="59:29" pos:end="59:30"><name pos:start="59:29" pos:end="59:30">bc</name></expr></argument>, <argument pos:start="59:33" pos:end="59:48"><expr pos:start="59:33" pos:end="59:48"><name pos:start="59:33" pos:end="59:48">STREAM_STARTCODE</name></expr></argument>, <argument pos:start="59:51" pos:end="59:53"><expr pos:start="59:51" pos:end="59:53"><name pos:start="59:51" pos:end="59:53">pos</name></expr></argument>)</argument_list></call><operator pos:start="59:55" pos:end="59:55">+</operator><literal type="number" pos:start="59:56" pos:end="59:56">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:18">(<expr pos:start="61:13" pos:end="61:17"><name pos:start="61:13" pos:end="61:15">pos</name><operator pos:start="61:16" pos:end="61:16">&lt;</operator><literal type="number" pos:start="61:17" pos:end="61:17">0</literal></expr>)</condition><block pos:start="61:19" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:22">

            <expr_stmt pos:start="63:13" pos:end="63:70"><expr pos:start="63:13" pos:end="63:69"><call pos:start="63:13" pos:end="63:69"><name pos:start="63:13" pos:end="63:18">av_log</name><argument_list pos:start="63:19" pos:end="63:69">(<argument pos:start="63:20" pos:end="63:20"><expr pos:start="63:20" pos:end="63:20"><name pos:start="63:20" pos:end="63:20">s</name></expr></argument>, <argument pos:start="63:23" pos:end="63:34"><expr pos:start="63:23" pos:end="63:34"><name pos:start="63:23" pos:end="63:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:37" pos:end="63:68"><expr pos:start="63:37" pos:end="63:68"><literal type="string" pos:start="63:37" pos:end="63:68">"not all stream headers found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:22">return <expr pos:start="65:20" pos:end="65:21"><operator pos:start="65:20" pos:end="65:20">-</operator><literal type="number" pos:start="65:21" pos:end="65:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="71:34"><if pos:start="69:9" pos:end="71:34">if<condition pos:start="69:11" pos:end="69:42">(<expr pos:start="69:12" pos:end="69:41"><call pos:start="69:12" pos:end="69:36"><name pos:start="69:12" pos:end="69:31">decode_stream_header</name><argument_list pos:start="69:32" pos:end="69:36">(<argument pos:start="69:33" pos:end="69:35"><expr pos:start="69:33" pos:end="69:35"><name pos:start="69:33" pos:end="69:35">nut</name></expr></argument>)</argument_list></call> <operator pos:start="69:38" pos:end="69:39">&gt;=</operator> <literal type="number" pos:start="69:41" pos:end="69:41">0</literal></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:34"><block_content pos:start="71:13" pos:end="71:34">

            <expr_stmt pos:start="71:13" pos:end="71:34"><expr pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:31">inited_stream_count</name><operator pos:start="71:32" pos:end="71:33">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="77:5" pos:end="77:22">/* info headers */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:10"><expr pos:start="79:5" pos:end="79:9"><name pos:start="79:5" pos:end="79:7">pos</name><operator pos:start="79:8" pos:end="79:8">=</operator><literal type="number" pos:start="79:9" pos:end="79:9">0</literal></expr>;</expr_stmt>

    <for pos:start="81:5" pos:end="111:5">for<control pos:start="81:8" pos:end="81:11">(<init pos:start="81:9" pos:end="81:9">;</init><condition pos:start="81:10" pos:end="81:10">;</condition><incr/>)</control><block pos:start="81:12" pos:end="111:5">{<block_content pos:start="83:9" pos:end="109:32">

        <decl_stmt pos:start="83:9" pos:end="83:56"><decl pos:start="83:9" pos:end="83:55"><type pos:start="83:9" pos:end="83:16"><name pos:start="83:9" pos:end="83:16">uint64_t</name></type> <name pos:start="83:18" pos:end="83:26">startcode</name><init pos:start="83:27" pos:end="83:55">= <expr pos:start="83:29" pos:end="83:55"><call pos:start="83:29" pos:end="83:55"><name pos:start="83:29" pos:end="83:46">find_any_startcode</name><argument_list pos:start="83:47" pos:end="83:55">(<argument pos:start="83:48" pos:end="83:49"><expr pos:start="83:48" pos:end="83:49"><name pos:start="83:48" pos:end="83:49">bc</name></expr></argument>, <argument pos:start="83:52" pos:end="83:54"><expr pos:start="83:52" pos:end="83:54"><name pos:start="83:52" pos:end="83:54">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:27"><expr pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:11">pos</name><operator pos:start="85:12" pos:end="85:12">=</operator> <call pos:start="85:14" pos:end="85:26"><name pos:start="85:14" pos:end="85:22">url_ftell</name><argument_list pos:start="85:23" pos:end="85:26">(<argument pos:start="85:24" pos:end="85:25"><expr pos:start="85:24" pos:end="85:25"><name pos:start="85:24" pos:end="85:25">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="89:9" pos:end="105:9"><if pos:start="89:9" pos:end="95:9">if<condition pos:start="89:11" pos:end="89:24">(<expr pos:start="89:12" pos:end="89:23"><name pos:start="89:12" pos:end="89:20">startcode</name><operator pos:start="89:21" pos:end="89:22">==</operator><literal type="number" pos:start="89:23" pos:end="89:23">0</literal></expr>)</condition><block pos:start="89:25" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:22">

            <expr_stmt pos:start="91:13" pos:end="91:65"><expr pos:start="91:13" pos:end="91:64"><call pos:start="91:13" pos:end="91:64"><name pos:start="91:13" pos:end="91:18">av_log</name><argument_list pos:start="91:19" pos:end="91:64">(<argument pos:start="91:20" pos:end="91:20"><expr pos:start="91:20" pos:end="91:20"><name pos:start="91:20" pos:end="91:20">s</name></expr></argument>, <argument pos:start="91:23" pos:end="91:34"><expr pos:start="91:23" pos:end="91:34"><name pos:start="91:23" pos:end="91:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:37" pos:end="91:63"><expr pos:start="91:37" pos:end="91:63"><literal type="string" pos:start="91:37" pos:end="91:63">"EOF before video frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:22">return <expr pos:start="93:20" pos:end="93:21"><operator pos:start="93:20" pos:end="93:20">-</operator><literal type="number" pos:start="93:21" pos:end="93:21">1</literal></expr>;</return>

        </block_content>}</block></if><if type="elseif" pos:start="95:10" pos:end="101:9">else if<condition pos:start="95:17" pos:end="95:49">(<expr pos:start="95:18" pos:end="95:48"><name pos:start="95:18" pos:end="95:26">startcode</name> <operator pos:start="95:28" pos:end="95:29">==</operator> <name pos:start="95:31" pos:end="95:48">KEYFRAME_STARTCODE</name></expr>)</condition><block pos:start="95:50" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:18">

            <expr_stmt pos:start="97:13" pos:end="97:43"><expr pos:start="97:13" pos:end="97:42"><name pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:15">nut</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:31">next_startcode</name></name><operator pos:start="97:32" pos:end="97:32">=</operator> <name pos:start="97:34" pos:end="97:42">startcode</name></expr>;</expr_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        </block_content>}</block></if><if type="elseif" pos:start="101:10" pos:end="105:9">else if<condition pos:start="101:17" pos:end="101:45">(<expr pos:start="101:18" pos:end="101:44"><name pos:start="101:18" pos:end="101:26">startcode</name> <operator pos:start="101:28" pos:end="101:29">!=</operator> <name pos:start="101:31" pos:end="101:44">INFO_STARTCODE</name></expr>)</condition><block pos:start="101:46" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:21">

            <continue pos:start="103:13" pos:end="103:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:32"><expr pos:start="109:9" pos:end="109:31"><call pos:start="109:9" pos:end="109:31"><name pos:start="109:9" pos:end="109:26">decode_info_header</name><argument_list pos:start="109:27" pos:end="109:31">(<argument pos:start="109:28" pos:end="109:30"><expr pos:start="109:28" pos:end="109:30"><name pos:start="109:28" pos:end="109:30">nut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="115:5" pos:end="115:13">return <expr pos:start="115:12" pos:end="115:12"><literal type="number" pos:start="115:12" pos:end="115:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
