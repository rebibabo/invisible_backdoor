<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18246.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">configure_accelerator</name><parameter_list pos:start="1:26" pos:end="1:43">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">MachineState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">ms</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:30">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:16"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:16">[<expr pos:start="7:14" pos:end="7:15"><literal type="number" pos:start="7:14" pos:end="7:15">10</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:26">accel_initialised</name> <init pos:start="11:28" pos:end="11:34">= <expr pos:start="11:30" pos:end="11:34"><name pos:start="11:30" pos:end="11:34">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:20">init_failed</name> <init pos:start="13:22" pos:end="13:28">= <expr pos:start="13:24" pos:end="13:28"><name pos:start="13:24" pos:end="13:28">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">AccelClass</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:19">acc</name> <init pos:start="15:21" pos:end="15:26">= <expr pos:start="15:23" pos:end="15:26"><name pos:start="15:23" pos:end="15:26">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:55"><expr pos:start="19:5" pos:end="19:54"><name pos:start="19:5" pos:end="19:5">p</name> <operator pos:start="19:7" pos:end="19:7">=</operator> <call pos:start="19:9" pos:end="19:54"><name pos:start="19:9" pos:end="19:20">qemu_opt_get</name><argument_list pos:start="19:21" pos:end="19:54">(<argument pos:start="19:22" pos:end="19:44"><expr pos:start="19:22" pos:end="19:44"><call pos:start="19:22" pos:end="19:44"><name pos:start="19:22" pos:end="19:42">qemu_get_machine_opts</name><argument_list pos:start="19:43" pos:end="19:44">()</argument_list></call></expr></argument>, <argument pos:start="19:47" pos:end="19:53"><expr pos:start="19:47" pos:end="19:53"><literal type="string" pos:start="19:47" pos:end="19:53">"accel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:18">(<expr pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:9">p</name> <operator pos:start="21:11" pos:end="21:12">==</operator> <name pos:start="21:14" pos:end="21:17">NULL</name></expr>)</condition> <block pos:start="21:20" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:18">

        <comment type="block" pos:start="23:9" pos:end="23:48">/* Use the default "accelerator", tcg */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:18"><expr pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">p</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <literal type="string" pos:start="25:13" pos:end="25:17">"tcg"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="31:5" pos:end="79:5">while <condition pos:start="31:11" pos:end="31:44">(<expr pos:start="31:12" pos:end="31:43"><operator pos:start="31:12" pos:end="31:12">!</operator><name pos:start="31:13" pos:end="31:29">accel_initialised</name> <operator pos:start="31:31" pos:end="31:32">&amp;&amp;</operator> <operator pos:start="31:34" pos:end="31:34">*</operator><name pos:start="31:35" pos:end="31:35">p</name> <operator pos:start="31:37" pos:end="31:38">!=</operator> <literal type="char" pos:start="31:40" pos:end="31:43">'\0'</literal></expr>)</condition> <block pos:start="31:46" pos:end="79:5">{<block_content pos:start="33:9" pos:end="77:9">

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:22">(<expr pos:start="33:13" pos:end="33:21"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:14">p</name> <operator pos:start="33:16" pos:end="33:17">==</operator> <literal type="char" pos:start="33:19" pos:end="33:21">':'</literal></expr>)</condition> <block pos:start="33:24" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:16">

            <expr_stmt pos:start="35:13" pos:end="35:16"><expr pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:13">p</name><operator pos:start="35:14" pos:end="35:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:51"><expr pos:start="39:9" pos:end="39:50"><name pos:start="39:9" pos:end="39:9">p</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <call pos:start="39:13" pos:end="39:50"><name pos:start="39:13" pos:end="39:24">get_opt_name</name><argument_list pos:start="39:25" pos:end="39:50">(<argument pos:start="39:26" pos:end="39:28"><expr pos:start="39:26" pos:end="39:28"><name pos:start="39:26" pos:end="39:28">buf</name></expr></argument>, <argument pos:start="39:31" pos:end="39:41"><expr pos:start="39:31" pos:end="39:41"><sizeof pos:start="39:31" pos:end="39:41">sizeof<argument_list pos:start="39:37" pos:end="39:41">(<argument pos:start="39:38" pos:end="39:40"><expr pos:start="39:38" pos:end="39:40"><name pos:start="39:38" pos:end="39:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="39:44" pos:end="39:44"><expr pos:start="39:44" pos:end="39:44"><name pos:start="39:44" pos:end="39:44">p</name></expr></argument>, <argument pos:start="39:47" pos:end="39:49"><expr pos:start="39:47" pos:end="39:49"><literal type="char" pos:start="39:47" pos:end="39:49">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:11">acc</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:29"><name pos:start="41:15" pos:end="41:24">accel_find</name><argument_list pos:start="41:25" pos:end="41:29">(<argument pos:start="41:26" pos:end="41:28"><expr pos:start="41:26" pos:end="41:28"><name pos:start="41:26" pos:end="41:28">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:17">(<expr pos:start="43:13" pos:end="43:16"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:16">acc</name></expr>)</condition> <block pos:start="43:19" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:21">

            <expr_stmt pos:start="45:13" pos:end="45:68"><expr pos:start="45:13" pos:end="45:67"><call pos:start="45:13" pos:end="45:67"><name pos:start="45:13" pos:end="45:19">fprintf</name><argument_list pos:start="45:20" pos:end="45:67">(<argument pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:26"><name pos:start="45:21" pos:end="45:26">stderr</name></expr></argument>, <argument pos:start="45:29" pos:end="45:61"><expr pos:start="45:29" pos:end="45:61"><literal type="string" pos:start="45:29" pos:end="45:61">"\"%s\" accelerator not found.\n"</literal></expr></argument>, <argument pos:start="45:64" pos:end="45:66"><expr pos:start="45:64" pos:end="45:66"><name pos:start="45:64" pos:end="45:66">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="47:13" pos:end="47:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:48">(<expr pos:start="51:13" pos:end="51:47"><name pos:start="51:13" pos:end="51:26"><name pos:start="51:13" pos:end="51:15">acc</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:26">available</name></name> <operator pos:start="51:28" pos:end="51:29">&amp;&amp;</operator> <operator pos:start="51:31" pos:end="51:31">!</operator><call pos:start="51:32" pos:end="51:47"><name pos:start="51:32" pos:end="51:45"><name pos:start="51:32" pos:end="51:34">acc</name><operator pos:start="51:35" pos:end="51:36">-&gt;</operator><name pos:start="51:37" pos:end="51:45">available</name></name><argument_list pos:start="51:46" pos:end="51:47">()</argument_list></call></expr>)</condition> <block pos:start="51:50" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:21">

            <expr_stmt pos:start="53:13" pos:end="55:30"><expr pos:start="53:13" pos:end="55:29"><call pos:start="53:13" pos:end="55:29"><name pos:start="53:13" pos:end="53:18">printf</name><argument_list pos:start="53:19" pos:end="55:29">(<argument pos:start="53:20" pos:end="53:55"><expr pos:start="53:20" pos:end="53:55"><literal type="string" pos:start="53:20" pos:end="53:55">"%s not supported for this target\n"</literal></expr></argument>,

                   <argument pos:start="55:20" pos:end="55:28"><expr pos:start="55:20" pos:end="55:28"><name pos:start="55:20" pos:end="55:28"><name pos:start="55:20" pos:end="55:22">acc</name><operator pos:start="55:23" pos:end="55:24">-&gt;</operator><name pos:start="55:25" pos:end="55:28">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="57:13" pos:end="57:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:42"><expr pos:start="61:9" pos:end="61:41"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:41"><name pos:start="61:15" pos:end="61:32">accel_init_machine</name><argument_list pos:start="61:33" pos:end="61:41">(<argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><name pos:start="61:34" pos:end="61:36">acc</name></expr></argument>, <argument pos:start="61:39" pos:end="61:40"><expr pos:start="61:39" pos:end="61:40"><name pos:start="61:39" pos:end="61:40">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="77:9"><if pos:start="63:9" pos:end="73:9">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">&lt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>)</condition> <block pos:start="63:22" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:36">

            <expr_stmt pos:start="65:13" pos:end="65:31"><expr pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:23">init_failed</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <name pos:start="65:27" pos:end="65:30">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="71:36"><expr pos:start="67:13" pos:end="71:35"><call pos:start="67:13" pos:end="71:35"><name pos:start="67:13" pos:end="67:19">fprintf</name><argument_list pos:start="67:20" pos:end="71:35">(<argument pos:start="67:21" pos:end="67:26"><expr pos:start="67:21" pos:end="67:26"><name pos:start="67:21" pos:end="67:26">stderr</name></expr></argument>, <argument pos:start="67:29" pos:end="67:59"><expr pos:start="67:29" pos:end="67:59"><literal type="string" pos:start="67:29" pos:end="67:59">"failed to initialize %s: %s\n"</literal></expr></argument>,

                    <argument pos:start="69:21" pos:end="69:29"><expr pos:start="69:21" pos:end="69:29"><name pos:start="69:21" pos:end="69:29"><name pos:start="69:21" pos:end="69:23">acc</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:29">name</name></name></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:34"><expr pos:start="71:21" pos:end="71:34"><call pos:start="71:21" pos:end="71:34"><name pos:start="71:21" pos:end="71:28">strerror</name><argument_list pos:start="71:29" pos:end="71:34">(<argument pos:start="71:30" pos:end="71:33"><expr pos:start="71:30" pos:end="71:33"><operator pos:start="71:30" pos:end="71:30">-</operator><name pos:start="71:31" pos:end="71:33">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="77:9">else <block pos:start="73:16" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:37">

            <expr_stmt pos:start="75:13" pos:end="75:37"><expr pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:29">accel_initialised</name> <operator pos:start="75:31" pos:end="75:31">=</operator> <name pos:start="75:33" pos:end="75:36">true</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="83:5" pos:end="93:5"><if pos:start="83:5" pos:end="93:5">if <condition pos:start="83:8" pos:end="83:27">(<expr pos:start="83:9" pos:end="83:26"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:26">accel_initialised</name></expr>)</condition> <block pos:start="83:29" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:16">

        <if_stmt pos:start="85:9" pos:end="89:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:25">(<expr pos:start="85:13" pos:end="85:24"><operator pos:start="85:13" pos:end="85:13">!</operator><name pos:start="85:14" pos:end="85:24">init_failed</name></expr>)</condition> <block pos:start="85:27" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:55">

            <expr_stmt pos:start="87:13" pos:end="87:55"><expr pos:start="87:13" pos:end="87:54"><call pos:start="87:13" pos:end="87:54"><name pos:start="87:13" pos:end="87:19">fprintf</name><argument_list pos:start="87:20" pos:end="87:54">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26">stderr</name></expr></argument>, <argument pos:start="87:29" pos:end="87:53"><expr pos:start="87:29" pos:end="87:53"><literal type="string" pos:start="87:29" pos:end="87:53">"No accelerator found!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:16"><expr pos:start="91:9" pos:end="91:15"><call pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:12">exit</name><argument_list pos:start="91:13" pos:end="91:15">(<argument pos:start="91:14" pos:end="91:14"><expr pos:start="91:14" pos:end="91:14"><literal type="number" pos:start="91:14" pos:end="91:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:20">(<expr pos:start="97:9" pos:end="97:19"><name pos:start="97:9" pos:end="97:19">init_failed</name></expr>)</condition> <block pos:start="97:22" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:64">

        <expr_stmt pos:start="99:9" pos:end="99:64"><expr pos:start="99:9" pos:end="99:63"><call pos:start="99:9" pos:end="99:63"><name pos:start="99:9" pos:end="99:15">fprintf</name><argument_list pos:start="99:16" pos:end="99:63">(<argument pos:start="99:17" pos:end="99:22"><expr pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:22">stderr</name></expr></argument>, <argument pos:start="99:25" pos:end="99:51"><expr pos:start="99:25" pos:end="99:51"><literal type="string" pos:start="99:25" pos:end="99:51">"Back to %s accelerator.\n"</literal></expr></argument>, <argument pos:start="99:54" pos:end="99:62"><expr pos:start="99:54" pos:end="99:62"><name pos:start="99:54" pos:end="99:62"><name pos:start="99:54" pos:end="99:56">acc</name><operator pos:start="99:57" pos:end="99:58">-&gt;</operator><name pos:start="99:59" pos:end="99:62">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="105:5" pos:end="105:30">return <expr pos:start="105:12" pos:end="105:29"><operator pos:start="105:12" pos:end="105:12">!</operator><name pos:start="105:13" pos:end="105:29">accel_initialised</name></expr>;</return>

</block_content>}</block></function>
</unit>
