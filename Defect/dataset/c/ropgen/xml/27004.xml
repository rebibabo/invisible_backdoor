<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27004.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">kzm_init</name><parameter_list pos:start="1:21" pos:end="1:43">(<parameter pos:start="1:22" pos:end="1:42"><decl pos:start="1:22" pos:end="1:42"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:33">MachineState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:42">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:5">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IMX31KZM</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:37">= <expr pos:start="5:19" pos:end="5:37"><call pos:start="5:19" pos:end="5:37"><name pos:start="5:19" pos:end="5:24">g_new0</name><argument_list pos:start="5:25" pos:end="5:37">(<argument pos:start="5:26" pos:end="5:33"><expr pos:start="5:26" pos:end="5:33"><name pos:start="5:26" pos:end="5:33">IMX31KZM</name></expr></argument>, <argument pos:start="5:36" pos:end="5:36"><expr pos:start="5:36" pos:end="5:36"><literal type="number" pos:start="5:36" pos:end="5:36">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:25">ram_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:29">alias_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:63"><expr pos:start="15:5" pos:end="15:62"><call pos:start="15:5" pos:end="15:62"><name pos:start="15:5" pos:end="15:21">object_initialize</name><argument_list pos:start="15:22" pos:end="15:62">(<argument pos:start="15:23" pos:end="15:29"><expr pos:start="15:23" pos:end="15:29"><operator pos:start="15:23" pos:end="15:23">&amp;</operator><name pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:24">s</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:29">soc</name></name></expr></argument>, <argument pos:start="15:32" pos:end="15:45"><expr pos:start="15:32" pos:end="15:45"><sizeof pos:start="15:32" pos:end="15:45">sizeof<argument_list pos:start="15:38" pos:end="15:45">(<argument pos:start="15:39" pos:end="15:44"><expr pos:start="15:39" pos:end="15:44"><name pos:start="15:39" pos:end="15:44"><name pos:start="15:39" pos:end="15:39">s</name><operator pos:start="15:40" pos:end="15:41">-&gt;</operator><name pos:start="15:42" pos:end="15:44">soc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="15:48" pos:end="15:61"><expr pos:start="15:48" pos:end="15:61"><name pos:start="15:48" pos:end="15:61">TYPE_FSL_IMX31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="19:44"><expr pos:start="17:5" pos:end="19:43"><call pos:start="17:5" pos:end="19:43"><name pos:start="17:5" pos:end="17:29">object_property_add_child</name><argument_list pos:start="17:30" pos:end="19:43">(<argument pos:start="17:31" pos:end="17:45"><expr pos:start="17:31" pos:end="17:45"><call pos:start="17:31" pos:end="17:45"><name pos:start="17:31" pos:end="17:36">OBJECT</name><argument_list pos:start="17:37" pos:end="17:45">(<argument pos:start="17:38" pos:end="17:44"><expr pos:start="17:38" pos:end="17:44"><name pos:start="17:38" pos:end="17:44">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="17:48" pos:end="17:52"><expr pos:start="17:48" pos:end="17:52"><literal type="string" pos:start="17:48" pos:end="17:52">"soc"</literal></expr></argument>, <argument pos:start="17:55" pos:end="17:69"><expr pos:start="17:55" pos:end="17:69"><call pos:start="17:55" pos:end="17:69"><name pos:start="17:55" pos:end="17:60">OBJECT</name><argument_list pos:start="17:61" pos:end="17:69">(<argument pos:start="17:62" pos:end="17:68"><expr pos:start="17:62" pos:end="17:68"><operator pos:start="17:62" pos:end="17:62">&amp;</operator><name pos:start="17:63" pos:end="17:68"><name pos:start="17:63" pos:end="17:63">s</name><operator pos:start="17:64" pos:end="17:65">-&gt;</operator><name pos:start="17:66" pos:end="17:68">soc</name></name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="19:31" pos:end="19:42"><expr pos:start="19:31" pos:end="19:42"><operator pos:start="19:31" pos:end="19:31">&amp;</operator><name pos:start="19:32" pos:end="19:42">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:78"><expr pos:start="23:5" pos:end="23:77"><call pos:start="23:5" pos:end="23:77"><name pos:start="23:5" pos:end="23:28">object_property_set_bool</name><argument_list pos:start="23:29" pos:end="23:77">(<argument pos:start="23:30" pos:end="23:44"><expr pos:start="23:30" pos:end="23:44"><call pos:start="23:30" pos:end="23:44"><name pos:start="23:30" pos:end="23:35">OBJECT</name><argument_list pos:start="23:36" pos:end="23:44">(<argument pos:start="23:37" pos:end="23:43"><expr pos:start="23:37" pos:end="23:43"><operator pos:start="23:37" pos:end="23:37">&amp;</operator><name pos:start="23:38" pos:end="23:43"><name pos:start="23:38" pos:end="23:38">s</name><operator pos:start="23:39" pos:end="23:40">-&gt;</operator><name pos:start="23:41" pos:end="23:43">soc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="23:47" pos:end="23:50"><expr pos:start="23:47" pos:end="23:50"><name pos:start="23:47" pos:end="23:50">true</name></expr></argument>, <argument pos:start="23:53" pos:end="23:62"><expr pos:start="23:53" pos:end="23:62"><literal type="string" pos:start="23:53" pos:end="23:62">"realized"</literal></expr></argument>, <argument pos:start="23:65" pos:end="23:76"><expr pos:start="23:65" pos:end="23:76"><operator pos:start="23:65" pos:end="23:65">&amp;</operator><name pos:start="23:66" pos:end="23:76">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:63">/* Check the amount of memory is compatible with the SOC */</comment>

    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:76">(<expr pos:start="29:9" pos:end="29:75"><name pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:15">machine</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:25">ram_size</name></name> <operator pos:start="29:27" pos:end="29:27">&gt;</operator> <operator pos:start="29:29" pos:end="29:29">(</operator><name pos:start="29:30" pos:end="29:50">FSL_IMX31_SDRAM0_SIZE</name> <operator pos:start="29:52" pos:end="29:52">+</operator> <name pos:start="29:54" pos:end="29:74">FSL_IMX31_SDRAM1_SIZE</name><operator pos:start="29:75" pos:end="29:75">)</operator></expr>)</condition> <block pos:start="29:78" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:74">

        <expr_stmt pos:start="31:9" pos:end="35:68"><expr pos:start="31:9" pos:end="35:67"><call pos:start="31:9" pos:end="35:67"><name pos:start="31:9" pos:end="31:20">error_report</name><argument_list pos:start="31:21" pos:end="35:67">(<argument pos:start="31:22" pos:end="33:36"><expr pos:start="31:22" pos:end="33:36"><literal type="string" pos:start="31:22" pos:end="31:41">"WARNING: RAM size "</literal> <name pos:start="31:43" pos:end="31:54">RAM_ADDR_FMT</name> <literal type="string" pos:start="31:56" pos:end="31:79">" above max supported, "</literal>

                     <literal type="string" pos:start="33:22" pos:end="33:36">"reduced to %x"</literal></expr></argument>, <argument pos:start="33:39" pos:end="33:55"><expr pos:start="33:39" pos:end="33:55"><name pos:start="33:39" pos:end="33:55"><name pos:start="33:39" pos:end="33:45">machine</name><operator pos:start="33:46" pos:end="33:47">-&gt;</operator><name pos:start="33:48" pos:end="33:55">ram_size</name></name></expr></argument>,

                     <argument pos:start="35:22" pos:end="35:66"><expr pos:start="35:22" pos:end="35:66"><name pos:start="35:22" pos:end="35:42">FSL_IMX31_SDRAM0_SIZE</name> <operator pos:start="35:44" pos:end="35:44">+</operator> <name pos:start="35:46" pos:end="35:66">FSL_IMX31_SDRAM1_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:74"><expr pos:start="37:9" pos:end="37:73"><name pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:15">machine</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:25">ram_size</name></name> <operator pos:start="37:27" pos:end="37:27">=</operator> <name pos:start="37:29" pos:end="37:49">FSL_IMX31_SDRAM0_SIZE</name> <operator pos:start="37:51" pos:end="37:51">+</operator> <name pos:start="37:53" pos:end="37:73">FSL_IMX31_SDRAM1_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="45:60"><expr pos:start="43:5" pos:end="45:59"><call pos:start="43:5" pos:end="45:59"><name pos:start="43:5" pos:end="43:40">memory_region_allocate_system_memory</name><argument_list pos:start="43:41" pos:end="45:59">(<argument pos:start="43:42" pos:end="43:48"><expr pos:start="43:42" pos:end="43:48"><operator pos:start="43:42" pos:end="43:42">&amp;</operator><name pos:start="43:43" pos:end="43:48"><name pos:start="43:43" pos:end="43:43">s</name><operator pos:start="43:44" pos:end="43:45">-&gt;</operator><name pos:start="43:46" pos:end="43:48">ram</name></name></expr></argument>, <argument pos:start="43:51" pos:end="43:54"><expr pos:start="43:51" pos:end="43:54"><name pos:start="43:51" pos:end="43:54">NULL</name></expr></argument>, <argument pos:start="43:57" pos:end="43:65"><expr pos:start="43:57" pos:end="43:65"><literal type="string" pos:start="43:57" pos:end="43:65">"kzm.ram"</literal></expr></argument>,

                                         <argument pos:start="45:42" pos:end="45:58"><expr pos:start="45:42" pos:end="45:58"><name pos:start="45:42" pos:end="45:58"><name pos:start="45:42" pos:end="45:48">machine</name><operator pos:start="45:49" pos:end="45:50">-&gt;</operator><name pos:start="45:51" pos:end="45:58">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="49:41"><expr pos:start="47:5" pos:end="49:40"><call pos:start="47:5" pos:end="49:40"><name pos:start="47:5" pos:end="47:31">memory_region_add_subregion</name><argument_list pos:start="47:32" pos:end="49:40">(<argument pos:start="47:33" pos:end="47:51"><expr pos:start="47:33" pos:end="47:51"><call pos:start="47:33" pos:end="47:51"><name pos:start="47:33" pos:end="47:49">get_system_memory</name><argument_list pos:start="47:50" pos:end="47:51">()</argument_list></call></expr></argument>, <argument pos:start="47:54" pos:end="47:74"><expr pos:start="47:54" pos:end="47:74"><name pos:start="47:54" pos:end="47:74">FSL_IMX31_SDRAM0_ADDR</name></expr></argument>,

                                <argument pos:start="49:33" pos:end="49:39"><expr pos:start="49:33" pos:end="49:39"><operator pos:start="49:33" pos:end="49:33">&amp;</operator><name pos:start="49:34" pos:end="49:39"><name pos:start="49:34" pos:end="49:34">s</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:39">ram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:44">/* initialize the alias memory if any */</comment>

    <for pos:start="55:5" pos:end="101:5">for <control pos:start="55:9" pos:end="57:34">(<init pos:start="55:10" pos:end="55:63"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr><operator pos:start="55:15" pos:end="55:15">,</operator> <expr pos:start="55:17" pos:end="55:44"><name pos:start="55:17" pos:end="55:24">ram_size</name> <operator pos:start="55:26" pos:end="55:26">=</operator> <name pos:start="55:28" pos:end="55:44"><name pos:start="55:28" pos:end="55:34">machine</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:44">ram_size</name></name></expr><operator pos:start="55:45" pos:end="55:45">,</operator> <expr pos:start="55:47" pos:end="55:62"><name pos:start="55:47" pos:end="55:58">alias_offset</name> <operator pos:start="55:60" pos:end="55:60">=</operator> <literal type="number" pos:start="55:62" pos:end="55:62">0</literal></expr>;</init>

         <condition pos:start="57:10" pos:end="57:29"><expr pos:start="57:10" pos:end="57:28"><operator pos:start="57:10" pos:end="57:10">(</operator><name pos:start="57:11" pos:end="57:11">i</name> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <literal type="number" pos:start="57:15" pos:end="57:15">2</literal><operator pos:start="57:16" pos:end="57:16">)</operator> <operator pos:start="57:18" pos:end="57:19">&amp;&amp;</operator> <name pos:start="57:21" pos:end="57:28">ram_size</name></expr>;</condition> <incr pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:31">i</name><operator pos:start="57:32" pos:end="57:33">++</operator></expr></incr>)</control> <block pos:start="57:36" pos:end="101:5">{<block_content pos:start="59:9" pos:end="99:36">

        <decl_stmt pos:start="59:9" pos:end="59:26"><decl pos:start="59:9" pos:end="59:25"><type pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:16">unsigned</name> <name pos:start="59:18" pos:end="59:20">int</name></type> <name pos:start="59:22" pos:end="59:25">size</name></decl>;</decl_stmt>

        <struct pos:start="61:9" pos:end="73:10"><specifier pos:start="61:9" pos:end="61:14">static</specifier> <specifier pos:start="61:16" pos:end="61:20">const</specifier> struct <block pos:start="61:29" pos:end="67:9">{

            <decl_stmt pos:start="63:13" pos:end="63:24"><decl pos:start="63:13" pos:end="63:23"><type pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:18">hwaddr</name></type> <name pos:start="63:20" pos:end="63:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="65:13" pos:end="65:30"><decl pos:start="65:13" pos:end="65:29"><type pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:20">unsigned</name> <name pos:start="65:22" pos:end="65:24">int</name></type> <name pos:start="65:26" pos:end="65:29">size</name></decl>;</decl_stmt>

        }</block> <decl pos:start="67:11" pos:end="73:9"><name pos:start="67:11" pos:end="67:16"><name pos:start="67:11" pos:end="67:13">ram</name><index pos:start="67:14" pos:end="67:16">[<expr pos:start="67:15" pos:end="67:15"><literal type="number" pos:start="67:15" pos:end="67:15">2</literal></expr>]</index></name> <init pos:start="67:18" pos:end="73:9">= <expr pos:start="67:20" pos:end="73:9"><block pos:start="67:20" pos:end="73:9">{

            <expr pos:start="69:13" pos:end="69:60"><block pos:start="69:13" pos:end="69:60">{ <expr pos:start="69:15" pos:end="69:35"><name pos:start="69:15" pos:end="69:35">FSL_IMX31_SDRAM0_ADDR</name></expr>, <expr pos:start="69:38" pos:end="69:58"><name pos:start="69:38" pos:end="69:58">FSL_IMX31_SDRAM0_SIZE</name></expr> }</block></expr>,

            <expr pos:start="71:13" pos:end="71:60"><block pos:start="71:13" pos:end="71:60">{ <expr pos:start="71:15" pos:end="71:35"><name pos:start="71:15" pos:end="71:35">FSL_IMX31_SDRAM1_ADDR</name></expr>, <expr pos:start="71:38" pos:end="71:58"><name pos:start="71:38" pos:end="71:58">FSL_IMX31_SDRAM1_SIZE</name></expr> }</block></expr>,

        }</block></expr></init></decl>;</struct>



        <expr_stmt pos:start="77:9" pos:end="77:42"><expr pos:start="77:9" pos:end="77:41"><name pos:start="77:9" pos:end="77:12">size</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:41"><name pos:start="77:16" pos:end="77:18">MIN</name><argument_list pos:start="77:19" pos:end="77:41">(<argument pos:start="77:20" pos:end="77:27"><expr pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:27">ram_size</name></expr></argument>, <argument pos:start="77:30" pos:end="77:40"><expr pos:start="77:30" pos:end="77:40"><name pos:start="77:30" pos:end="77:35"><name pos:start="77:30" pos:end="77:32">ram</name><index pos:start="77:33" pos:end="77:35">[<expr pos:start="77:34" pos:end="77:34"><name pos:start="77:34" pos:end="77:34">i</name></expr>]</index></name><operator pos:start="77:36" pos:end="77:36">.</operator><name pos:start="77:37" pos:end="77:40">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:25"><expr pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:16">ram_size</name> <operator pos:start="81:18" pos:end="81:19">-=</operator> <name pos:start="81:21" pos:end="81:24">size</name></expr>;</expr_stmt>



        <if_stmt pos:start="85:9" pos:end="95:9"><if pos:start="85:9" pos:end="95:9">if <condition pos:start="85:12" pos:end="85:31">(<expr pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:16">size</name> <operator pos:start="85:18" pos:end="85:18">&lt;</operator> <name pos:start="85:20" pos:end="85:25"><name pos:start="85:20" pos:end="85:22">ram</name><index pos:start="85:23" pos:end="85:25">[<expr pos:start="85:24" pos:end="85:24"><name pos:start="85:24" pos:end="85:24">i</name></expr>]</index></name><operator pos:start="85:26" pos:end="85:26">.</operator><name pos:start="85:27" pos:end="85:30">size</name></expr>)</condition> <block pos:start="85:33" pos:end="95:9">{<block_content pos:start="87:13" pos:end="93:75">

            <expr_stmt pos:start="87:13" pos:end="89:80"><expr pos:start="87:13" pos:end="89:79"><call pos:start="87:13" pos:end="89:79"><name pos:start="87:13" pos:end="87:36">memory_region_init_alias</name><argument_list pos:start="87:37" pos:end="89:79">(<argument pos:start="87:38" pos:end="87:50"><expr pos:start="87:38" pos:end="87:50"><operator pos:start="87:38" pos:end="87:38">&amp;</operator><name pos:start="87:39" pos:end="87:50"><name pos:start="87:39" pos:end="87:39">s</name><operator pos:start="87:40" pos:end="87:41">-&gt;</operator><name pos:start="87:42" pos:end="87:50">ram_alias</name></name></expr></argument>, <argument pos:start="87:53" pos:end="87:56"><expr pos:start="87:53" pos:end="87:56"><name pos:start="87:53" pos:end="87:56">NULL</name></expr></argument>, <argument pos:start="87:59" pos:end="87:69"><expr pos:start="87:59" pos:end="87:69"><literal type="string" pos:start="87:59" pos:end="87:69">"ram.alias"</literal></expr></argument>,

                                     <argument pos:start="89:38" pos:end="89:44"><expr pos:start="89:38" pos:end="89:44"><operator pos:start="89:38" pos:end="89:38">&amp;</operator><name pos:start="89:39" pos:end="89:44"><name pos:start="89:39" pos:end="89:39">s</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:44">ram</name></name></expr></argument>, <argument pos:start="89:47" pos:end="89:58"><expr pos:start="89:47" pos:end="89:58"><name pos:start="89:47" pos:end="89:58">alias_offset</name></expr></argument>, <argument pos:start="89:61" pos:end="89:78"><expr pos:start="89:61" pos:end="89:78"><name pos:start="89:61" pos:end="89:66"><name pos:start="89:61" pos:end="89:63">ram</name><index pos:start="89:64" pos:end="89:66">[<expr pos:start="89:65" pos:end="89:65"><name pos:start="89:65" pos:end="89:65">i</name></expr>]</index></name><operator pos:start="89:67" pos:end="89:67">.</operator><name pos:start="89:68" pos:end="89:71">size</name> <operator pos:start="89:73" pos:end="89:73">-</operator> <name pos:start="89:75" pos:end="89:78">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="93:75"><expr pos:start="91:13" pos:end="93:74"><call pos:start="91:13" pos:end="93:74"><name pos:start="91:13" pos:end="91:39">memory_region_add_subregion</name><argument_list pos:start="91:40" pos:end="93:74">(<argument pos:start="91:41" pos:end="91:59"><expr pos:start="91:41" pos:end="91:59"><call pos:start="91:41" pos:end="91:59"><name pos:start="91:41" pos:end="91:57">get_system_memory</name><argument_list pos:start="91:58" pos:end="91:59">()</argument_list></call></expr></argument>,

                                        <argument pos:start="93:41" pos:end="93:58"><expr pos:start="93:41" pos:end="93:58"><name pos:start="93:41" pos:end="93:46"><name pos:start="93:41" pos:end="93:43">ram</name><index pos:start="93:44" pos:end="93:46">[<expr pos:start="93:45" pos:end="93:45"><name pos:start="93:45" pos:end="93:45">i</name></expr>]</index></name><operator pos:start="93:47" pos:end="93:47">.</operator><name pos:start="93:48" pos:end="93:51">addr</name> <operator pos:start="93:53" pos:end="93:53">+</operator> <name pos:start="93:55" pos:end="93:58">size</name></expr></argument>, <argument pos:start="93:61" pos:end="93:73"><expr pos:start="93:61" pos:end="93:73"><operator pos:start="93:61" pos:end="93:61">&amp;</operator><name pos:start="93:62" pos:end="93:73"><name pos:start="93:62" pos:end="93:62">s</name><operator pos:start="93:63" pos:end="93:64">-&gt;</operator><name pos:start="93:65" pos:end="93:73">ram_alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:36"><expr pos:start="99:9" pos:end="99:35"><name pos:start="99:9" pos:end="99:20">alias_offset</name> <operator pos:start="99:22" pos:end="99:23">+=</operator> <name pos:start="99:25" pos:end="99:30"><name pos:start="99:25" pos:end="99:27">ram</name><index pos:start="99:28" pos:end="99:30">[<expr pos:start="99:29" pos:end="99:29"><name pos:start="99:29" pos:end="99:29">i</name></expr>]</index></name><operator pos:start="99:31" pos:end="99:31">.</operator><name pos:start="99:32" pos:end="99:35">size</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:25">(<expr pos:start="105:9" pos:end="105:24"><name pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:16">nd_table</name><index pos:start="105:17" pos:end="105:19">[<expr pos:start="105:18" pos:end="105:18"><literal type="number" pos:start="105:18" pos:end="105:18">0</literal></expr>]</index></name><operator pos:start="105:20" pos:end="105:20">.</operator><name pos:start="105:21" pos:end="105:24">used</name></expr>)</condition> <block pos:start="105:27" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:65">

        <expr_stmt pos:start="107:9" pos:end="109:65"><expr pos:start="107:9" pos:end="109:64"><call pos:start="107:9" pos:end="109:64"><name pos:start="107:9" pos:end="107:20">lan9118_init</name><argument_list pos:start="107:21" pos:end="109:64">(<argument pos:start="107:22" pos:end="107:33"><expr pos:start="107:22" pos:end="107:33"><operator pos:start="107:22" pos:end="107:22">&amp;</operator><name pos:start="107:23" pos:end="107:33"><name pos:start="107:23" pos:end="107:30">nd_table</name><index pos:start="107:31" pos:end="107:33">[<expr pos:start="107:32" pos:end="107:32"><literal type="number" pos:start="107:32" pos:end="107:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="107:36" pos:end="107:51"><expr pos:start="107:36" pos:end="107:51"><name pos:start="107:36" pos:end="107:51">KZM_LAN9118_ADDR</name></expr></argument>,

                     <argument pos:start="109:22" pos:end="109:63"><expr pos:start="109:22" pos:end="109:63"><call pos:start="109:22" pos:end="109:63"><name pos:start="109:22" pos:end="109:37">qdev_get_gpio_in</name><argument_list pos:start="109:38" pos:end="109:63">(<argument pos:start="109:39" pos:end="109:58"><expr pos:start="109:39" pos:end="109:58"><call pos:start="109:39" pos:end="109:58"><name pos:start="109:39" pos:end="109:44">DEVICE</name><argument_list pos:start="109:45" pos:end="109:58">(<argument pos:start="109:46" pos:end="109:57"><expr pos:start="109:46" pos:end="109:57"><operator pos:start="109:46" pos:end="109:46">&amp;</operator><name pos:start="109:47" pos:end="109:57"><name pos:start="109:47" pos:end="109:47">s</name><operator pos:start="109:48" pos:end="109:49">-&gt;</operator><name pos:start="109:50" pos:end="109:52">soc</name><operator pos:start="109:53" pos:end="109:53">.</operator><name pos:start="109:54" pos:end="109:57">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:61" pos:end="109:62"><expr pos:start="109:61" pos:end="109:62"><literal type="number" pos:start="109:61" pos:end="109:62">52</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="123:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:22">(<expr pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:18">serial_hds</name><index pos:start="115:19" pos:end="115:21">[<expr pos:start="115:20" pos:end="115:20"><literal type="number" pos:start="115:20" pos:end="115:20">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="115:24" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:70"> <comment type="block" pos:start="115:26" pos:end="115:42">/* touchscreen */</comment>

        <expr_stmt pos:start="117:9" pos:end="121:70"><expr pos:start="117:9" pos:end="121:69"><call pos:start="117:9" pos:end="121:69"><name pos:start="117:9" pos:end="117:22">serial_mm_init</name><argument_list pos:start="117:23" pos:end="121:69">(<argument pos:start="117:24" pos:end="117:42"><expr pos:start="117:24" pos:end="117:42"><call pos:start="117:24" pos:end="117:42"><name pos:start="117:24" pos:end="117:40">get_system_memory</name><argument_list pos:start="117:41" pos:end="117:42">()</argument_list></call></expr></argument>, <argument pos:start="117:45" pos:end="117:62"><expr pos:start="117:45" pos:end="117:62"><name pos:start="117:45" pos:end="117:57">KZM_FPGA_ADDR</name><operator pos:start="117:58" pos:end="117:58">+</operator><literal type="number" pos:start="117:59" pos:end="117:62">0x10</literal></expr></argument>, <argument pos:start="117:65" pos:end="117:65"><expr pos:start="117:65" pos:end="117:65"><literal type="number" pos:start="117:65" pos:end="117:65">0</literal></expr></argument>,

                       <argument pos:start="119:24" pos:end="119:65"><expr pos:start="119:24" pos:end="119:65"><call pos:start="119:24" pos:end="119:65"><name pos:start="119:24" pos:end="119:39">qdev_get_gpio_in</name><argument_list pos:start="119:40" pos:end="119:65">(<argument pos:start="119:41" pos:end="119:60"><expr pos:start="119:41" pos:end="119:60"><call pos:start="119:41" pos:end="119:60"><name pos:start="119:41" pos:end="119:46">DEVICE</name><argument_list pos:start="119:47" pos:end="119:60">(<argument pos:start="119:48" pos:end="119:59"><expr pos:start="119:48" pos:end="119:59"><operator pos:start="119:48" pos:end="119:48">&amp;</operator><name pos:start="119:49" pos:end="119:59"><name pos:start="119:49" pos:end="119:49">s</name><operator pos:start="119:50" pos:end="119:51">-&gt;</operator><name pos:start="119:52" pos:end="119:54">soc</name><operator pos:start="119:55" pos:end="119:55">.</operator><name pos:start="119:56" pos:end="119:59">avic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="119:63" pos:end="119:64"><expr pos:start="119:63" pos:end="119:64"><literal type="number" pos:start="119:63" pos:end="119:64">52</literal></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="121:24" pos:end="121:31"><expr pos:start="121:24" pos:end="121:31"><literal type="number" pos:start="121:24" pos:end="121:31">14745600</literal></expr></argument>, <argument pos:start="121:34" pos:end="121:46"><expr pos:start="121:34" pos:end="121:46"><name pos:start="121:34" pos:end="121:46"><name pos:start="121:34" pos:end="121:43">serial_hds</name><index pos:start="121:44" pos:end="121:46">[<expr pos:start="121:45" pos:end="121:45"><literal type="number" pos:start="121:45" pos:end="121:45">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="121:49" pos:end="121:68"><expr pos:start="121:49" pos:end="121:68"><name pos:start="121:49" pos:end="121:68">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:43"><expr pos:start="127:5" pos:end="127:42"><name pos:start="127:5" pos:end="127:22"><name pos:start="127:5" pos:end="127:13">kzm_binfo</name><operator pos:start="127:14" pos:end="127:14">.</operator><name pos:start="127:15" pos:end="127:22">ram_size</name></name> <operator pos:start="127:24" pos:end="127:24">=</operator> <name pos:start="127:26" pos:end="127:42"><name pos:start="127:26" pos:end="127:32">machine</name><operator pos:start="127:33" pos:end="127:34">-&gt;</operator><name pos:start="127:35" pos:end="127:42">ram_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:57"><expr pos:start="129:5" pos:end="129:56"><name pos:start="129:5" pos:end="129:29"><name pos:start="129:5" pos:end="129:13">kzm_binfo</name><operator pos:start="129:14" pos:end="129:14">.</operator><name pos:start="129:15" pos:end="129:29">kernel_filename</name></name> <operator pos:start="129:31" pos:end="129:31">=</operator> <name pos:start="129:33" pos:end="129:56"><name pos:start="129:33" pos:end="129:39">machine</name><operator pos:start="129:40" pos:end="129:41">-&gt;</operator><name pos:start="129:42" pos:end="129:56">kernel_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:55"><expr pos:start="131:5" pos:end="131:54"><name pos:start="131:5" pos:end="131:28"><name pos:start="131:5" pos:end="131:13">kzm_binfo</name><operator pos:start="131:14" pos:end="131:14">.</operator><name pos:start="131:15" pos:end="131:28">kernel_cmdline</name></name> <operator pos:start="131:30" pos:end="131:30">=</operator> <name pos:start="131:32" pos:end="131:54"><name pos:start="131:32" pos:end="131:38">machine</name><operator pos:start="131:39" pos:end="131:40">-&gt;</operator><name pos:start="131:41" pos:end="131:54">kernel_cmdline</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:57"><expr pos:start="133:5" pos:end="133:56"><name pos:start="133:5" pos:end="133:29"><name pos:start="133:5" pos:end="133:13">kzm_binfo</name><operator pos:start="133:14" pos:end="133:14">.</operator><name pos:start="133:15" pos:end="133:29">initrd_filename</name></name> <operator pos:start="133:31" pos:end="133:31">=</operator> <name pos:start="133:33" pos:end="133:56"><name pos:start="133:33" pos:end="133:39">machine</name><operator pos:start="133:40" pos:end="133:41">-&gt;</operator><name pos:start="133:42" pos:end="133:56">initrd_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:26"><expr pos:start="135:5" pos:end="135:25"><name pos:start="135:5" pos:end="135:21"><name pos:start="135:5" pos:end="135:13">kzm_binfo</name><operator pos:start="135:14" pos:end="135:14">.</operator><name pos:start="135:15" pos:end="135:21">nb_cpus</name></name> <operator pos:start="135:23" pos:end="135:23">=</operator> <literal type="number" pos:start="135:25" pos:end="135:25">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="143:5"><if pos:start="139:5" pos:end="143:5">if <condition pos:start="139:8" pos:end="139:25">(<expr pos:start="139:9" pos:end="139:24"><operator pos:start="139:9" pos:end="139:9">!</operator><call pos:start="139:10" pos:end="139:24"><name pos:start="139:10" pos:end="139:22">qtest_enabled</name><argument_list pos:start="139:23" pos:end="139:24">()</argument_list></call></expr>)</condition> <block pos:start="139:27" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:49">

        <expr_stmt pos:start="141:9" pos:end="141:49"><expr pos:start="141:9" pos:end="141:48"><call pos:start="141:9" pos:end="141:48"><name pos:start="141:9" pos:end="141:23">arm_load_kernel</name><argument_list pos:start="141:24" pos:end="141:48">(<argument pos:start="141:25" pos:end="141:35"><expr pos:start="141:25" pos:end="141:35"><operator pos:start="141:25" pos:end="141:25">&amp;</operator><name pos:start="141:26" pos:end="141:35"><name pos:start="141:26" pos:end="141:26">s</name><operator pos:start="141:27" pos:end="141:28">-&gt;</operator><name pos:start="141:29" pos:end="141:31">soc</name><operator pos:start="141:32" pos:end="141:32">.</operator><name pos:start="141:33" pos:end="141:35">cpu</name></name></expr></argument>, <argument pos:start="141:38" pos:end="141:47"><expr pos:start="141:38" pos:end="141:47"><operator pos:start="141:38" pos:end="141:38">&amp;</operator><name pos:start="141:39" pos:end="141:47">kzm_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
