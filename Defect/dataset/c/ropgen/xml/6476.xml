<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6476.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">ccid_handle_bulk_out</name><parameter_list pos:start="1:32" pos:end="1:62">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:44">USBCCIDState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:61"><decl pos:start="1:50" pos:end="1:61"><type pos:start="1:50" pos:end="1:61"><name pos:start="1:50" pos:end="1:58">USBPacket</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="5:5" pos:end="147:13">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CCID_Header</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:28">ccid_header</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:54">(<expr pos:start="9:9" pos:end="9:53"><name pos:start="9:9" pos:end="9:14"><name pos:start="9:9" pos:end="9:9">p</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:14">len</name></name> <operator pos:start="9:16" pos:end="9:16">+</operator> <name pos:start="9:18" pos:end="9:32"><name pos:start="9:18" pos:end="9:18">s</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:32">bulk_out_pos</name></name> <operator pos:start="9:34" pos:end="9:34">&gt;</operator> <name pos:start="9:36" pos:end="9:53">BULK_OUT_DATA_SIZE</name></expr>)</condition> <block pos:start="9:56" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:29">

        <return pos:start="11:9" pos:end="11:29">return <expr pos:start="11:16" pos:end="11:28"><name pos:start="11:16" pos:end="11:28">USB_RET_STALL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:50"><expr pos:start="15:5" pos:end="15:49"><name pos:start="15:5" pos:end="15:15">ccid_header</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <operator pos:start="15:19" pos:end="15:19">(</operator><name pos:start="15:20" pos:end="15:30">CCID_Header</name> <operator pos:start="15:32" pos:end="15:32">*</operator><operator pos:start="15:33" pos:end="15:33">)</operator><name pos:start="15:34" pos:end="15:49"><name pos:start="15:34" pos:end="15:34">s</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:49">bulk_out_data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:64"><expr pos:start="17:5" pos:end="17:63"><call pos:start="17:5" pos:end="17:63"><name pos:start="17:5" pos:end="17:10">memcpy</name><argument_list pos:start="17:11" pos:end="17:63">(<argument pos:start="17:12" pos:end="17:45"><expr pos:start="17:12" pos:end="17:45"><name pos:start="17:12" pos:end="17:27"><name pos:start="17:12" pos:end="17:12">s</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:27">bulk_out_data</name></name> <operator pos:start="17:29" pos:end="17:29">+</operator> <name pos:start="17:31" pos:end="17:45"><name pos:start="17:31" pos:end="17:31">s</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:45">bulk_out_pos</name></name></expr></argument>, <argument pos:start="17:48" pos:end="17:54"><expr pos:start="17:48" pos:end="17:54"><name pos:start="17:48" pos:end="17:54"><name pos:start="17:48" pos:end="17:48">p</name><operator pos:start="17:49" pos:end="17:50">-&gt;</operator><name pos:start="17:51" pos:end="17:54">data</name></name></expr></argument>, <argument pos:start="17:57" pos:end="17:62"><expr pos:start="17:57" pos:end="17:62"><name pos:start="17:57" pos:end="17:62"><name pos:start="17:57" pos:end="17:57">p</name><operator pos:start="17:58" pos:end="17:59">-&gt;</operator><name pos:start="17:60" pos:end="17:62">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:19">bulk_out_pos</name></name> <operator pos:start="19:21" pos:end="19:22">+=</operator> <name pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:24">p</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:29">len</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:39">(<expr pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:9">p</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:14">len</name></name> <operator pos:start="21:16" pos:end="21:17">==</operator> <name pos:start="21:19" pos:end="21:38">CCID_MAX_PACKET_SIZE</name></expr>)</condition> <block pos:start="21:41" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:17">

        <expr_stmt pos:start="23:9" pos:end="27:43"><expr pos:start="23:9" pos:end="27:42"><call pos:start="23:9" pos:end="27:42"><name pos:start="23:9" pos:end="23:15">DPRINTF</name><argument_list pos:start="23:16" pos:end="27:42">(<argument pos:start="23:17" pos:end="23:17"><expr pos:start="23:17" pos:end="23:17"><name pos:start="23:17" pos:end="23:17">s</name></expr></argument>, <argument pos:start="23:20" pos:end="23:28"><expr pos:start="23:20" pos:end="23:28"><name pos:start="23:20" pos:end="23:28">D_VERBOSE</name></expr></argument>,

            <argument pos:start="25:13" pos:end="25:65"><expr pos:start="25:13" pos:end="25:65"><literal type="string" pos:start="25:13" pos:end="25:65">"usb-ccid: bulk_in: expecting more packets (%d/%d)\n"</literal></expr></argument>,

            <argument pos:start="27:13" pos:end="27:18"><expr pos:start="27:13" pos:end="27:18"><name pos:start="27:13" pos:end="27:18"><name pos:start="27:13" pos:end="27:13">p</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:18">len</name></name></expr></argument>, <argument pos:start="27:21" pos:end="27:41"><expr pos:start="27:21" pos:end="27:41"><name pos:start="27:21" pos:end="27:41"><name pos:start="27:21" pos:end="27:31">ccid_header</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:41">dwLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="143:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:29">(<expr pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:23">bulk_out_pos</name></name> <operator pos:start="33:25" pos:end="33:25">&lt;</operator> <literal type="number" pos:start="33:27" pos:end="33:28">10</literal></expr>)</condition> <block pos:start="33:31" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:26">

        <expr_stmt pos:start="35:9" pos:end="39:26"><expr pos:start="35:9" pos:end="39:25"><call pos:start="35:9" pos:end="39:25"><name pos:start="35:9" pos:end="35:15">DPRINTF</name><argument_list pos:start="35:16" pos:end="39:25">(<argument pos:start="35:17" pos:end="35:17"><expr pos:start="35:17" pos:end="35:17"><name pos:start="35:17" pos:end="35:17">s</name></expr></argument>, <argument pos:start="35:20" pos:end="35:20"><expr pos:start="35:20" pos:end="35:20"><literal type="number" pos:start="35:20" pos:end="35:20">1</literal></expr></argument>,

                <argument pos:start="37:17" pos:end="37:77"><expr pos:start="37:17" pos:end="37:77"><literal type="string" pos:start="37:17" pos:end="37:77">"%s: bad USB_TOKEN_OUT length, should be at least 10 bytes\n"</literal></expr></argument>,

                <argument pos:start="39:17" pos:end="39:24"><expr pos:start="39:17" pos:end="39:24"><name pos:start="39:17" pos:end="39:24">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="143:5">else <block pos:start="41:12" pos:end="143:5">{<block_content pos:start="43:9" pos:end="141:9">

        <expr_stmt pos:start="43:9" pos:end="43:80"><expr pos:start="43:9" pos:end="43:79"><call pos:start="43:9" pos:end="43:79"><name pos:start="43:9" pos:end="43:15">DPRINTF</name><argument_list pos:start="43:16" pos:end="43:79">(<argument pos:start="43:17" pos:end="43:17"><expr pos:start="43:17" pos:end="43:17"><name pos:start="43:17" pos:end="43:17">s</name></expr></argument>, <argument pos:start="43:20" pos:end="43:30"><expr pos:start="43:20" pos:end="43:30"><name pos:start="43:20" pos:end="43:30">D_MORE_INFO</name></expr></argument>, <argument pos:start="43:33" pos:end="43:41"><expr pos:start="43:33" pos:end="43:41"><literal type="string" pos:start="43:33" pos:end="43:41">"%s %x\n"</literal></expr></argument>, <argument pos:start="43:44" pos:end="43:51"><expr pos:start="43:44" pos:end="43:51"><name pos:start="43:44" pos:end="43:51">__func__</name></expr></argument>, <argument pos:start="43:54" pos:end="43:78"><expr pos:start="43:54" pos:end="43:78"><name pos:start="43:54" pos:end="43:78"><name pos:start="43:54" pos:end="43:64">ccid_header</name><operator pos:start="43:65" pos:end="43:66">-&gt;</operator><name pos:start="43:67" pos:end="43:78">bMessageType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="45:9" pos:end="141:9">switch <condition pos:start="45:16" pos:end="45:42">(<expr pos:start="45:17" pos:end="45:41"><name pos:start="45:17" pos:end="45:41"><name pos:start="45:17" pos:end="45:27">ccid_header</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:41">bMessageType</name></name></expr>)</condition> <block pos:start="45:44" pos:end="141:9">{<block_content pos:start="47:9" pos:end="139:18">

        <case pos:start="47:9" pos:end="47:55">case <expr pos:start="47:14" pos:end="47:54"><name pos:start="47:14" pos:end="47:54">CCID_MESSAGE_TYPE_PC_to_RDR_GetSlotStatus</name></expr>:</case>

            <expr_stmt pos:start="49:13" pos:end="49:51"><expr pos:start="49:13" pos:end="49:50"><call pos:start="49:13" pos:end="49:50"><name pos:start="49:13" pos:end="49:34">ccid_write_slot_status</name><argument_list pos:start="49:35" pos:end="49:50">(<argument pos:start="49:36" pos:end="49:36"><expr pos:start="49:36" pos:end="49:36"><name pos:start="49:36" pos:end="49:36">s</name></expr></argument>, <argument pos:start="49:39" pos:end="49:49"><expr pos:start="49:39" pos:end="49:49"><name pos:start="49:39" pos:end="49:49">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="51:13" pos:end="51:18">break;</break>

        <case pos:start="53:9" pos:end="53:52">case <expr pos:start="53:14" pos:end="53:51"><name pos:start="53:14" pos:end="53:51">CCID_MESSAGE_TYPE_PC_to_RDR_IccPowerOn</name></expr>:</case>

            <expr_stmt pos:start="55:13" pos:end="57:66"><expr pos:start="55:13" pos:end="57:65"><call pos:start="55:13" pos:end="57:65"><name pos:start="55:13" pos:end="55:19">DPRINTF</name><argument_list pos:start="55:20" pos:end="57:65">(<argument pos:start="55:21" pos:end="55:21"><expr pos:start="55:21" pos:end="55:21"><name pos:start="55:21" pos:end="55:21">s</name></expr></argument>, <argument pos:start="55:24" pos:end="55:24"><expr pos:start="55:24" pos:end="55:24"><literal type="number" pos:start="55:24" pos:end="55:24">1</literal></expr></argument>, <argument pos:start="55:27" pos:end="55:41"><expr pos:start="55:27" pos:end="55:41"><literal type="string" pos:start="55:27" pos:end="55:41">"PowerOn: %d\n"</literal></expr></argument>,

                <argument pos:start="57:17" pos:end="57:64"><expr pos:start="57:17" pos:end="57:64"><operator pos:start="57:17" pos:end="57:17">(</operator><operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:33">CCID_IccPowerOn</name> <operator pos:start="57:35" pos:end="57:35">*</operator><operator pos:start="57:36" pos:end="57:36">)</operator><operator pos:start="57:37" pos:end="57:37">(</operator><name pos:start="57:38" pos:end="57:48">ccid_header</name><operator pos:start="57:49" pos:end="57:49">)</operator><operator pos:start="57:50" pos:end="57:50">)</operator><operator pos:start="57:51" pos:end="57:52">-&gt;</operator><name pos:start="57:53" pos:end="57:64">bPowerSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:30"><expr pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:22">powered</name></name> <operator pos:start="59:24" pos:end="59:24">=</operator> <name pos:start="59:26" pos:end="59:29">true</name></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="65:13"><if pos:start="61:13" pos:end="65:13">if <condition pos:start="61:16" pos:end="61:39">(<expr pos:start="61:17" pos:end="61:38"><operator pos:start="61:17" pos:end="61:17">!</operator><call pos:start="61:18" pos:end="61:38"><name pos:start="61:18" pos:end="61:35">ccid_card_inserted</name><argument_list pos:start="61:36" pos:end="61:38">(<argument pos:start="61:37" pos:end="61:37"><expr pos:start="61:37" pos:end="61:37"><name pos:start="61:37" pos:end="61:37">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:41" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:60">

                <expr_stmt pos:start="63:17" pos:end="63:60"><expr pos:start="63:17" pos:end="63:59"><call pos:start="63:17" pos:end="63:59"><name pos:start="63:17" pos:end="63:40">ccid_report_error_failed</name><argument_list pos:start="63:41" pos:end="63:59">(<argument pos:start="63:42" pos:end="63:42"><expr pos:start="63:42" pos:end="63:42"><name pos:start="63:42" pos:end="63:42">s</name></expr></argument>, <argument pos:start="63:45" pos:end="63:58"><expr pos:start="63:45" pos:end="63:58"><name pos:start="63:45" pos:end="63:58">ERROR_ICC_MUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="67:13" pos:end="67:53">/* atr is written regardless of error. */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:54"><expr pos:start="69:13" pos:end="69:53"><call pos:start="69:13" pos:end="69:53"><name pos:start="69:13" pos:end="69:37">ccid_write_data_block_atr</name><argument_list pos:start="69:38" pos:end="69:53">(<argument pos:start="69:39" pos:end="69:39"><expr pos:start="69:39" pos:end="69:39"><name pos:start="69:39" pos:end="69:39">s</name></expr></argument>, <argument pos:start="69:42" pos:end="69:52"><expr pos:start="69:42" pos:end="69:52"><name pos:start="69:42" pos:end="69:52">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        <case pos:start="73:9" pos:end="73:53">case <expr pos:start="73:14" pos:end="73:52"><name pos:start="73:14" pos:end="73:52">CCID_MESSAGE_TYPE_PC_to_RDR_IccPowerOff</name></expr>:</case>

            <expr_stmt pos:start="75:13" pos:end="75:40"><expr pos:start="75:13" pos:end="75:39"><call pos:start="75:13" pos:end="75:39"><name pos:start="75:13" pos:end="75:19">DPRINTF</name><argument_list pos:start="75:20" pos:end="75:39">(<argument pos:start="75:21" pos:end="75:21"><expr pos:start="75:21" pos:end="75:21"><name pos:start="75:21" pos:end="75:21">s</name></expr></argument>, <argument pos:start="75:24" pos:end="75:24"><expr pos:start="75:24" pos:end="75:24"><literal type="number" pos:start="75:24" pos:end="75:24">1</literal></expr></argument>, <argument pos:start="75:27" pos:end="75:38"><expr pos:start="75:27" pos:end="75:38"><literal type="string" pos:start="75:27" pos:end="75:38">"PowerOff\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:39"><expr pos:start="77:13" pos:end="77:38"><call pos:start="77:13" pos:end="77:38"><name pos:start="77:13" pos:end="77:35">ccid_reset_error_status</name><argument_list pos:start="77:36" pos:end="77:38">(<argument pos:start="77:37" pos:end="77:37"><expr pos:start="77:37" pos:end="77:37"><name pos:start="77:37" pos:end="77:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:31"><expr pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:22">powered</name></name> <operator pos:start="79:24" pos:end="79:24">=</operator> <name pos:start="79:26" pos:end="79:30">false</name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:51"><expr pos:start="81:13" pos:end="81:50"><call pos:start="81:13" pos:end="81:50"><name pos:start="81:13" pos:end="81:34">ccid_write_slot_status</name><argument_list pos:start="81:35" pos:end="81:50">(<argument pos:start="81:36" pos:end="81:36"><expr pos:start="81:36" pos:end="81:36"><name pos:start="81:36" pos:end="81:36">s</name></expr></argument>, <argument pos:start="81:39" pos:end="81:49"><expr pos:start="81:39" pos:end="81:49"><name pos:start="81:39" pos:end="81:49">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        <case pos:start="85:9" pos:end="85:50">case <expr pos:start="85:14" pos:end="85:49"><name pos:start="85:14" pos:end="85:49">CCID_MESSAGE_TYPE_PC_to_RDR_XfrBlock</name></expr>:</case>

            <expr_stmt pos:start="87:13" pos:end="87:75"><expr pos:start="87:13" pos:end="87:74"><call pos:start="87:13" pos:end="87:74"><name pos:start="87:13" pos:end="87:35">ccid_on_apdu_from_guest</name><argument_list pos:start="87:36" pos:end="87:74">(<argument pos:start="87:37" pos:end="87:37"><expr pos:start="87:37" pos:end="87:37"><name pos:start="87:37" pos:end="87:37">s</name></expr></argument>, <argument pos:start="87:40" pos:end="87:73"><expr pos:start="87:40" pos:end="87:73"><operator pos:start="87:40" pos:end="87:40">(</operator><name pos:start="87:41" pos:end="87:54">CCID_XferBlock</name> <operator pos:start="87:56" pos:end="87:56">*</operator><operator pos:start="87:57" pos:end="87:57">)</operator><name pos:start="87:58" pos:end="87:73"><name pos:start="87:58" pos:end="87:58">s</name><operator pos:start="87:59" pos:end="87:60">-&gt;</operator><name pos:start="87:61" pos:end="87:73">bulk_out_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        <case pos:start="91:9" pos:end="91:55">case <expr pos:start="91:14" pos:end="91:54"><name pos:start="91:14" pos:end="91:54">CCID_MESSAGE_TYPE_PC_to_RDR_SetParameters</name></expr>:</case>

            <expr_stmt pos:start="93:13" pos:end="93:39"><expr pos:start="93:13" pos:end="93:38"><call pos:start="93:13" pos:end="93:38"><name pos:start="93:13" pos:end="93:35">ccid_reset_error_status</name><argument_list pos:start="93:36" pos:end="93:38">(<argument pos:start="93:37" pos:end="93:37"><expr pos:start="93:37" pos:end="93:37"><name pos:start="93:37" pos:end="93:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:48"><expr pos:start="95:13" pos:end="95:47"><call pos:start="95:13" pos:end="95:47"><name pos:start="95:13" pos:end="95:31">ccid_set_parameters</name><argument_list pos:start="95:32" pos:end="95:47">(<argument pos:start="95:33" pos:end="95:33"><expr pos:start="95:33" pos:end="95:33"><name pos:start="95:33" pos:end="95:33">s</name></expr></argument>, <argument pos:start="95:36" pos:end="95:46"><expr pos:start="95:36" pos:end="95:46"><name pos:start="95:36" pos:end="95:46">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:50"><expr pos:start="97:13" pos:end="97:49"><call pos:start="97:13" pos:end="97:49"><name pos:start="97:13" pos:end="97:33">ccid_write_parameters</name><argument_list pos:start="97:34" pos:end="97:49">(<argument pos:start="97:35" pos:end="97:35"><expr pos:start="97:35" pos:end="97:35"><name pos:start="97:35" pos:end="97:35">s</name></expr></argument>, <argument pos:start="97:38" pos:end="97:48"><expr pos:start="97:38" pos:end="97:48"><name pos:start="97:38" pos:end="97:48">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        <case pos:start="101:9" pos:end="101:57">case <expr pos:start="101:14" pos:end="101:56"><name pos:start="101:14" pos:end="101:56">CCID_MESSAGE_TYPE_PC_to_RDR_ResetParameters</name></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:39"><expr pos:start="103:13" pos:end="103:38"><call pos:start="103:13" pos:end="103:38"><name pos:start="103:13" pos:end="103:35">ccid_reset_error_status</name><argument_list pos:start="103:36" pos:end="103:38">(<argument pos:start="103:37" pos:end="103:37"><expr pos:start="103:37" pos:end="103:37"><name pos:start="103:37" pos:end="103:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:37"><expr pos:start="105:13" pos:end="105:36"><call pos:start="105:13" pos:end="105:36"><name pos:start="105:13" pos:end="105:33">ccid_reset_parameters</name><argument_list pos:start="105:34" pos:end="105:36">(<argument pos:start="105:35" pos:end="105:35"><expr pos:start="105:35" pos:end="105:35"><name pos:start="105:35" pos:end="105:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:50"><expr pos:start="107:13" pos:end="107:49"><call pos:start="107:13" pos:end="107:49"><name pos:start="107:13" pos:end="107:33">ccid_write_parameters</name><argument_list pos:start="107:34" pos:end="107:49">(<argument pos:start="107:35" pos:end="107:35"><expr pos:start="107:35" pos:end="107:35"><name pos:start="107:35" pos:end="107:35">s</name></expr></argument>, <argument pos:start="107:38" pos:end="107:48"><expr pos:start="107:38" pos:end="107:48"><name pos:start="107:38" pos:end="107:48">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        <case pos:start="111:9" pos:end="111:55">case <expr pos:start="111:14" pos:end="111:54"><name pos:start="111:14" pos:end="111:54">CCID_MESSAGE_TYPE_PC_to_RDR_GetParameters</name></expr>:</case>

            <expr_stmt pos:start="113:13" pos:end="113:39"><expr pos:start="113:13" pos:end="113:38"><call pos:start="113:13" pos:end="113:38"><name pos:start="113:13" pos:end="113:35">ccid_reset_error_status</name><argument_list pos:start="113:36" pos:end="113:38">(<argument pos:start="113:37" pos:end="113:37"><expr pos:start="113:37" pos:end="113:37"><name pos:start="113:37" pos:end="113:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:50"><expr pos:start="115:13" pos:end="115:49"><call pos:start="115:13" pos:end="115:49"><name pos:start="115:13" pos:end="115:33">ccid_write_parameters</name><argument_list pos:start="115:34" pos:end="115:49">(<argument pos:start="115:35" pos:end="115:35"><expr pos:start="115:35" pos:end="115:35"><name pos:start="115:35" pos:end="115:35">s</name></expr></argument>, <argument pos:start="115:38" pos:end="115:48"><expr pos:start="115:38" pos:end="115:48"><name pos:start="115:38" pos:end="115:48">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        <default pos:start="119:9" pos:end="119:16">default:</default>

            <expr_stmt pos:start="121:13" pos:end="125:43"><expr pos:start="121:13" pos:end="125:42"><call pos:start="121:13" pos:end="125:42"><name pos:start="121:13" pos:end="121:19">DPRINTF</name><argument_list pos:start="121:20" pos:end="125:42">(<argument pos:start="121:21" pos:end="121:21"><expr pos:start="121:21" pos:end="121:21"><name pos:start="121:21" pos:end="121:21">s</name></expr></argument>, <argument pos:start="121:24" pos:end="121:24"><expr pos:start="121:24" pos:end="121:24"><literal type="number" pos:start="121:24" pos:end="121:24">1</literal></expr></argument>,

                <argument pos:start="123:17" pos:end="123:66"><expr pos:start="123:17" pos:end="123:66"><literal type="string" pos:start="123:17" pos:end="123:66">"handle_data: ERROR: unhandled message type %Xh\n"</literal></expr></argument>,

                <argument pos:start="125:17" pos:end="125:41"><expr pos:start="125:17" pos:end="125:41"><name pos:start="125:17" pos:end="125:41"><name pos:start="125:17" pos:end="125:27">ccid_header</name><operator pos:start="125:28" pos:end="125:29">-&gt;</operator><name pos:start="125:30" pos:end="125:41">bMessageType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="127:13" pos:end="133:15">/*

             * The caller is expecting the device to respond, tell it we

             * don't support the operation.

             */</comment>

            <expr_stmt pos:start="135:13" pos:end="135:65"><expr pos:start="135:13" pos:end="135:64"><call pos:start="135:13" pos:end="135:64"><name pos:start="135:13" pos:end="135:36">ccid_report_error_failed</name><argument_list pos:start="135:37" pos:end="135:64">(<argument pos:start="135:38" pos:end="135:38"><expr pos:start="135:38" pos:end="135:38"><name pos:start="135:38" pos:end="135:38">s</name></expr></argument>, <argument pos:start="135:41" pos:end="135:63"><expr pos:start="135:41" pos:end="135:63"><name pos:start="135:41" pos:end="135:63">ERROR_CMD_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:51"><expr pos:start="137:13" pos:end="137:50"><call pos:start="137:13" pos:end="137:50"><name pos:start="137:13" pos:end="137:34">ccid_write_slot_status</name><argument_list pos:start="137:35" pos:end="137:50">(<argument pos:start="137:36" pos:end="137:36"><expr pos:start="137:36" pos:end="137:36"><name pos:start="137:36" pos:end="137:36">s</name></expr></argument>, <argument pos:start="137:39" pos:end="137:49"><expr pos:start="137:39" pos:end="137:49"><name pos:start="137:39" pos:end="137:49">ccid_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:24"><expr pos:start="145:5" pos:end="145:23"><name pos:start="145:5" pos:end="145:19"><name pos:start="145:5" pos:end="145:5">s</name><operator pos:start="145:6" pos:end="145:7">-&gt;</operator><name pos:start="145:8" pos:end="145:19">bulk_out_pos</name></name> <operator pos:start="145:21" pos:end="145:21">=</operator> <literal type="number" pos:start="145:23" pos:end="145:23">0</literal></expr>;</expr_stmt>

    <return pos:start="147:5" pos:end="147:13">return <expr pos:start="147:12" pos:end="147:12"><literal type="number" pos:start="147:12" pos:end="147:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
