<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19187.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">sigp_set_architecture</name><parameter_list pos:start="1:33" pos:end="3:54">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:40">S390CPU</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">cpu</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:55">uint32_t</name></type> <name pos:start="1:57" pos:end="1:61">param</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:53"><decl pos:start="3:34" pos:end="3:53"><type pos:start="3:34" pos:end="3:53"><name pos:start="3:34" pos:end="3:41">uint64_t</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:53">status_reg</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="49:1">{<block_content pos:start="7:5" pos:end="47:33">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:20">cur_cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">S390CPU</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:20">cur_cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:20">all_stopped</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">true</name></expr></init></decl>;</decl_stmt>



    <macro pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:15">CPU_FOREACH</name><argument_list pos:start="15:16" pos:end="15:23">(<argument pos:start="15:17" pos:end="15:22">cur_cs</argument>)</argument_list></macro> <block pos:start="15:25" pos:end="33:5">{<block_content pos:start="17:9" pos:end="31:9">

        <expr_stmt pos:start="17:9" pos:end="17:35"><expr pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:15">cur_cpu</name> <operator pos:start="17:17" pos:end="17:17">=</operator> <call pos:start="17:19" pos:end="17:34"><name pos:start="17:19" pos:end="17:26">S390_CPU</name><argument_list pos:start="17:27" pos:end="17:34">(<argument pos:start="17:28" pos:end="17:33"><expr pos:start="17:28" pos:end="17:33"><name pos:start="17:28" pos:end="17:33">cur_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:27">(<expr pos:start="21:13" pos:end="21:26"><name pos:start="21:13" pos:end="21:19">cur_cpu</name> <operator pos:start="21:21" pos:end="21:22">==</operator> <name pos:start="21:24" pos:end="21:26">cpu</name></expr>)</condition> <block pos:start="21:29" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:21">

            <continue pos:start="23:13" pos:end="23:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:61">(<expr pos:start="27:13" pos:end="27:60"><call pos:start="27:13" pos:end="27:39"><name pos:start="27:13" pos:end="27:30">s390_cpu_get_state</name><argument_list pos:start="27:31" pos:end="27:39">(<argument pos:start="27:32" pos:end="27:38"><expr pos:start="27:32" pos:end="27:38"><name pos:start="27:32" pos:end="27:38">cur_cpu</name></expr></argument>)</argument_list></call> <operator pos:start="27:41" pos:end="27:42">!=</operator> <name pos:start="27:44" pos:end="27:60">CPU_STATE_STOPPED</name></expr>)</condition> <block pos:start="27:63" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:32">

            <expr_stmt pos:start="29:13" pos:end="29:32"><expr pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:23">all_stopped</name> <operator pos:start="29:25" pos:end="29:25">=</operator> <name pos:start="29:27" pos:end="29:31">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="37:5" pos:end="37:41"><expr pos:start="37:5" pos:end="37:40"><operator pos:start="37:5" pos:end="37:5">*</operator><name pos:start="37:6" pos:end="37:15">status_reg</name> <operator pos:start="37:17" pos:end="37:18">&amp;=</operator> <literal type="number" pos:start="37:20" pos:end="37:40">0xffffffff00000000ULL</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:71">/* Reject set arch order, with czam we're always in z/Arch mode. */</comment>

    <expr_stmt pos:start="43:5" pos:end="45:47"><expr pos:start="43:5" pos:end="45:46"><operator pos:start="43:5" pos:end="43:5">*</operator><name pos:start="43:6" pos:end="43:15">status_reg</name> <operator pos:start="43:17" pos:end="43:18">|=</operator> <operator pos:start="43:20" pos:end="43:20">(</operator><ternary pos:start="43:21" pos:end="45:45"><condition pos:start="43:21" pos:end="43:33"><expr pos:start="43:21" pos:end="43:31"><name pos:start="43:21" pos:end="43:31">all_stopped</name></expr> ?</condition><then pos:start="43:35" pos:end="43:61"> <expr pos:start="43:35" pos:end="43:61"><name pos:start="43:35" pos:end="43:61">SIGP_STAT_INVALID_PARAMETER</name></expr> </then><else pos:start="43:63" pos:end="45:45">:

                    <expr pos:start="45:21" pos:end="45:45"><name pos:start="45:21" pos:end="45:45">SIGP_STAT_INCORRECT_STATE</name></expr></else></ternary><operator pos:start="45:46" pos:end="45:46">)</operator></expr>;</expr_stmt>

    <return pos:start="47:5" pos:end="47:33">return <expr pos:start="47:12" pos:end="47:32"><name pos:start="47:12" pos:end="47:32">SIGP_CC_STATUS_STORED</name></expr>;</return>

</block_content>}</block></function>
</unit>
