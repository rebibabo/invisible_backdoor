<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21833.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:16">noise</name><parameter_list pos:start="1:17" pos:end="5:68">(<parameter pos:start="1:18" pos:end="1:47"><decl pos:start="1:18" pos:end="1:47"><type pos:start="1:18" pos:end="1:47"><name pos:start="1:18" pos:end="1:41">AVBitStreamFilterContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">bsfc</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:70"><decl pos:start="1:50" pos:end="1:70"><type pos:start="1:50" pos:end="1:70"><name pos:start="1:50" pos:end="1:63">AVCodecContext</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:70">avctx</name></decl></parameter>, <parameter pos:start="1:73" pos:end="1:88"><decl pos:start="1:73" pos:end="1:88"><type pos:start="1:73" pos:end="1:88"><specifier pos:start="1:73" pos:end="1:77">const</specifier> <name pos:start="1:79" pos:end="1:82">char</name> <modifier pos:start="1:84" pos:end="1:84">*</modifier></type><name pos:start="1:85" pos:end="1:88">args</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:38"><decl pos:start="3:22" pos:end="3:38"><type pos:start="3:22" pos:end="3:38"><name pos:start="3:22" pos:end="3:28">uint8_t</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier><modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:38">poutbuf</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:57"><decl pos:start="3:41" pos:end="3:57"><type pos:start="3:41" pos:end="3:57"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:57">poutbuf_size</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:39"><decl pos:start="5:22" pos:end="5:39"><type pos:start="5:22" pos:end="5:39"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:34">uint8_t</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:39">buf</name></decl></parameter>, <parameter pos:start="5:42" pos:end="5:53"><decl pos:start="5:42" pos:end="5:53"><type pos:start="5:42" pos:end="5:53"><name pos:start="5:42" pos:end="5:44">int</name></type> <name pos:start="5:46" pos:end="5:53">buf_size</name></decl></parameter>, <parameter pos:start="5:56" pos:end="5:67"><decl pos:start="5:56" pos:end="5:67"><type pos:start="5:56" pos:end="5:67"><name pos:start="5:56" pos:end="5:58">int</name></type> <name pos:start="5:60" pos:end="5:67">keyframe</name></decl></parameter>)</parameter_list><block pos:start="5:69" pos:end="41:1">{<block_content pos:start="7:5" pos:end="39:13">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:23">state</name><init pos:start="7:24" pos:end="7:40">= <expr pos:start="7:26" pos:end="7:40"><name pos:start="7:26" pos:end="7:40"><name pos:start="7:26" pos:end="7:29">bsfc</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:55"><decl pos:start="9:5" pos:end="9:54"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">amount</name><init pos:start="9:15" pos:end="9:54">= <expr pos:start="9:17" pos:end="9:54"><ternary pos:start="9:17" pos:end="9:54"><condition pos:start="9:17" pos:end="9:22"><expr pos:start="9:17" pos:end="9:20"><name pos:start="9:17" pos:end="9:20">args</name></expr> ?</condition><then pos:start="9:24" pos:end="9:33"> <expr pos:start="9:24" pos:end="9:33"><call pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:27">atoi</name><argument_list pos:start="9:28" pos:end="9:33">(<argument pos:start="9:29" pos:end="9:32"><expr pos:start="9:29" pos:end="9:32"><name pos:start="9:29" pos:end="9:32">args</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="9:35" pos:end="9:54">: <expr pos:start="9:37" pos:end="9:54"><operator pos:start="9:37" pos:end="9:37">(</operator><operator pos:start="9:38" pos:end="9:38">*</operator><name pos:start="9:39" pos:end="9:43">state</name> <operator pos:start="9:45" pos:end="9:45">%</operator> <literal type="number" pos:start="9:47" pos:end="9:52">10001</literal><operator pos:start="9:52" pos:end="9:52">+</operator><literal type="number" pos:start="9:53" pos:end="9:53">1</literal><operator pos:start="9:54" pos:end="9:54">)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:31"><if pos:start="15:5" pos:end="17:31">if<condition pos:start="15:7" pos:end="15:19">(<expr pos:start="15:8" pos:end="15:18"><name pos:start="15:8" pos:end="15:13">amount</name> <operator pos:start="15:15" pos:end="15:16">&lt;=</operator> <literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:31"><block_content pos:start="17:9" pos:end="17:31">

        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:65"><expr pos:start="21:5" pos:end="21:64"><operator pos:start="21:5" pos:end="21:5">*</operator><name pos:start="21:6" pos:end="21:12">poutbuf</name><operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:64"><name pos:start="21:15" pos:end="21:23">av_malloc</name><argument_list pos:start="21:24" pos:end="21:64">(<argument pos:start="21:25" pos:end="21:63"><expr pos:start="21:25" pos:end="21:63"><name pos:start="21:25" pos:end="21:32">buf_size</name> <operator pos:start="21:34" pos:end="21:34">+</operator> <name pos:start="21:36" pos:end="21:63">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="27:5" pos:end="27:67"><expr pos:start="27:5" pos:end="27:66"><call pos:start="27:5" pos:end="27:66"><name pos:start="27:5" pos:end="27:10">memcpy</name><argument_list pos:start="27:11" pos:end="27:66">(<argument pos:start="27:12" pos:end="27:19"><expr pos:start="27:12" pos:end="27:19"><operator pos:start="27:12" pos:end="27:12">*</operator><name pos:start="27:13" pos:end="27:19">poutbuf</name></expr></argument>, <argument pos:start="27:22" pos:end="27:24"><expr pos:start="27:22" pos:end="27:24"><name pos:start="27:22" pos:end="27:24">buf</name></expr></argument>, <argument pos:start="27:27" pos:end="27:65"><expr pos:start="27:27" pos:end="27:65"><name pos:start="27:27" pos:end="27:34">buf_size</name> <operator pos:start="27:36" pos:end="27:36">+</operator> <name pos:start="27:38" pos:end="27:65">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="29:5" pos:end="37:5">for<control pos:start="29:8" pos:end="29:29">(<init pos:start="29:9" pos:end="29:12"><expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:9">i</name><operator pos:start="29:10" pos:end="29:10">=</operator><literal type="number" pos:start="29:11" pos:end="29:11">0</literal></expr>;</init> <condition pos:start="29:14" pos:end="29:24"><expr pos:start="29:14" pos:end="29:23"><name pos:start="29:14" pos:end="29:14">i</name><operator pos:start="29:15" pos:end="29:15">&lt;</operator><name pos:start="29:16" pos:end="29:23">buf_size</name></expr>;</condition> <incr pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><name pos:start="29:26" pos:end="29:26">i</name><operator pos:start="29:27" pos:end="29:28">++</operator></expr></incr>)</control><block pos:start="29:30" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:35">

        <expr_stmt pos:start="31:9" pos:end="31:38"><expr pos:start="31:9" pos:end="31:37"><operator pos:start="31:9" pos:end="31:9">(</operator><operator pos:start="31:10" pos:end="31:10">*</operator><name pos:start="31:11" pos:end="31:15">state</name><operator pos:start="31:16" pos:end="31:16">)</operator> <operator pos:start="31:18" pos:end="31:19">+=</operator> <operator pos:start="31:21" pos:end="31:21">(</operator><operator pos:start="31:22" pos:end="31:22">*</operator><name pos:start="31:23" pos:end="31:29">poutbuf</name><operator pos:start="31:30" pos:end="31:30">)</operator><index pos:start="31:31" pos:end="31:33">[<expr pos:start="31:32" pos:end="31:32"><name pos:start="31:32" pos:end="31:32">i</name></expr>]</index> <operator pos:start="31:35" pos:end="31:35">+</operator> <literal type="number" pos:start="31:37" pos:end="31:37">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="35:35"><if pos:start="33:9" pos:end="35:35">if<condition pos:start="33:11" pos:end="33:32">(<expr pos:start="33:12" pos:end="33:31"><operator pos:start="33:12" pos:end="33:12">*</operator><name pos:start="33:13" pos:end="33:17">state</name> <operator pos:start="33:19" pos:end="33:19">%</operator> <name pos:start="33:21" pos:end="33:26">amount</name> <operator pos:start="33:28" pos:end="33:29">==</operator> <literal type="number" pos:start="33:31" pos:end="33:31">0</literal></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:35"><block_content pos:start="35:13" pos:end="35:35">

            <expr_stmt pos:start="35:13" pos:end="35:35"><expr pos:start="35:13" pos:end="35:34"><operator pos:start="35:13" pos:end="35:13">(</operator><operator pos:start="35:14" pos:end="35:14">*</operator><name pos:start="35:15" pos:end="35:21">poutbuf</name><operator pos:start="35:22" pos:end="35:22">)</operator><index pos:start="35:23" pos:end="35:25">[<expr pos:start="35:24" pos:end="35:24"><name pos:start="35:24" pos:end="35:24">i</name></expr>]</index> <operator pos:start="35:27" pos:end="35:27">=</operator> <operator pos:start="35:29" pos:end="35:29">*</operator><name pos:start="35:30" pos:end="35:34">state</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="39:5" pos:end="39:13">return <expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">1</literal></expr>;</return>

</block_content>}</block></function></unit>
