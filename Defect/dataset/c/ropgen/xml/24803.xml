<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24803.c" pos:tabs="8"><function pos:start="1:1" pos:end="403:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">flac_decode_frame</name><parameter_list pos:start="1:29" pos:end="5:55">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:40"><decl pos:start="5:29" pos:end="5:40"><type pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:35">uint8_t</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:40">buf</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="403:1">{<block_content pos:start="9:5" pos:end="401:17">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">FLACContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name> <init pos:start="9:20" pos:end="9:37">= <expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">metadata_last</name></decl>, <decl pos:start="11:24" pos:end="11:36"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:24" pos:end="11:36">metadata_type</name></decl>, <decl pos:start="11:39" pos:end="11:51"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:39" pos:end="11:51">metadata_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">tmp</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>, <decl pos:start="13:18" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:18">i</name></decl>, <decl pos:start="13:21" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:21" pos:end="13:21">j</name> <init pos:start="13:23" pos:end="13:25">= <expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr></init></decl>, <decl pos:start="13:28" pos:end="13:45"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:28" pos:end="13:41">input_buf_size</name> <init pos:start="13:43" pos:end="13:45">= <expr pos:start="13:45" pos:end="13:45"><literal type="number" pos:start="13:45" pos:end="13:45">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:20">samples</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">data</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if<condition pos:start="19:7" pos:end="19:29">(<expr pos:start="19:8" pos:end="19:28"><name pos:start="19:8" pos:end="19:23"><name pos:start="19:8" pos:end="19:8">s</name><operator pos:start="19:9" pos:end="19:10">-&gt;</operator><name pos:start="19:11" pos:end="19:23">max_framesize</name></name> <operator pos:start="19:25" pos:end="19:26">==</operator> <literal type="number" pos:start="19:28" pos:end="19:28">0</literal></expr>)</condition><block pos:start="19:30" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:100">

        <expr_stmt pos:start="21:9" pos:end="21:31"><expr pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:24"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:24">max_framesize</name></name><operator pos:start="21:25" pos:end="21:25">=</operator> <literal type="number" pos:start="21:27" pos:end="21:30">8192</literal></expr>;</expr_stmt> <comment type="line" pos:start="21:33" pos:end="21:82">// should hopefully be enough for the first header</comment>

        <expr_stmt pos:start="23:9" pos:end="23:100"><expr pos:start="23:9" pos:end="23:99"><name pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:20">bitstream</name></name><operator pos:start="23:21" pos:end="23:21">=</operator> <call pos:start="23:23" pos:end="23:99"><name pos:start="23:23" pos:end="23:37">av_fast_realloc</name><argument_list pos:start="23:38" pos:end="23:99">(<argument pos:start="23:39" pos:end="23:50"><expr pos:start="23:39" pos:end="23:50"><name pos:start="23:39" pos:end="23:50"><name pos:start="23:39" pos:end="23:39">s</name><operator pos:start="23:40" pos:end="23:41">-&gt;</operator><name pos:start="23:42" pos:end="23:50">bitstream</name></name></expr></argument>, <argument pos:start="23:53" pos:end="23:80"><expr pos:start="23:53" pos:end="23:80"><operator pos:start="23:53" pos:end="23:53">&amp;</operator><name pos:start="23:54" pos:end="23:80"><name pos:start="23:54" pos:end="23:54">s</name><operator pos:start="23:55" pos:end="23:56">-&gt;</operator><name pos:start="23:57" pos:end="23:80">allocated_bitstream_size</name></name></expr></argument>, <argument pos:start="23:83" pos:end="23:98"><expr pos:start="23:83" pos:end="23:98"><name pos:start="23:83" pos:end="23:98"><name pos:start="23:83" pos:end="23:83">s</name><operator pos:start="23:84" pos:end="23:85">-&gt;</operator><name pos:start="23:86" pos:end="23:98">max_framesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="65:5"><if pos:start="29:5" pos:end="65:5">if<condition pos:start="29:7" pos:end="29:29">(<expr pos:start="29:8" pos:end="29:28"><literal type="number" pos:start="29:8" pos:end="29:8">1</literal> <operator pos:start="29:10" pos:end="29:11">&amp;&amp;</operator> <name pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:28">max_framesize</name></name></expr>)</condition><block pos:start="29:30" pos:end="65:5">{<block_content pos:start="31:13" pos:end="63:13"><comment type="line" pos:start="29:31" pos:end="29:47">//FIXME truncated</comment>

            <expr_stmt pos:start="31:13" pos:end="31:76"><expr pos:start="31:13" pos:end="31:75"><name pos:start="31:13" pos:end="31:20">buf_size</name><operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:75"><name pos:start="31:23" pos:end="31:27">FFMIN</name><argument_list pos:start="31:28" pos:end="31:75">(<argument pos:start="31:29" pos:end="31:36"><expr pos:start="31:29" pos:end="31:36"><name pos:start="31:29" pos:end="31:36">buf_size</name></expr></argument>, <argument pos:start="31:39" pos:end="31:74"><expr pos:start="31:39" pos:end="31:74"><name pos:start="31:39" pos:end="31:54"><name pos:start="31:39" pos:end="31:39">s</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:54">max_framesize</name></name> <operator pos:start="31:56" pos:end="31:56">-</operator> <name pos:start="31:58" pos:end="31:74"><name pos:start="31:58" pos:end="31:58">s</name><operator pos:start="31:59" pos:end="31:60">-&gt;</operator><name pos:start="31:61" pos:end="31:74">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:37"><expr pos:start="33:13" pos:end="33:36"><name pos:start="33:13" pos:end="33:26">input_buf_size</name><operator pos:start="33:27" pos:end="33:27">=</operator> <name pos:start="33:29" pos:end="33:36">buf_size</name></expr>;</expr_stmt>



            <if_stmt pos:start="37:13" pos:end="45:13"><if pos:start="37:13" pos:end="45:13">if<condition pos:start="37:15" pos:end="37:95">(<expr pos:start="37:16" pos:end="37:94"><name pos:start="37:16" pos:end="37:33"><name pos:start="37:16" pos:end="37:16">s</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:33">bitstream_index</name></name> <operator pos:start="37:35" pos:end="37:35">+</operator> <name pos:start="37:37" pos:end="37:53"><name pos:start="37:37" pos:end="37:37">s</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:53">bitstream_size</name></name> <operator pos:start="37:55" pos:end="37:55">+</operator> <name pos:start="37:57" pos:end="37:64">buf_size</name> <operator pos:start="37:66" pos:end="37:66">&gt;</operator> <name pos:start="37:68" pos:end="37:94"><name pos:start="37:68" pos:end="37:68">s</name><operator pos:start="37:69" pos:end="37:70">-&gt;</operator><name pos:start="37:71" pos:end="37:94">allocated_bitstream_size</name></name></expr>)</condition><block pos:start="37:96" pos:end="45:13">{<block_content pos:start="41:17" pos:end="43:37">

<comment type="line" pos:start="39:1" pos:end="39:38">//                printf("memmove\n");</comment>

                <expr_stmt pos:start="41:17" pos:end="41:92"><expr pos:start="41:17" pos:end="41:91"><call pos:start="41:17" pos:end="41:91"><name pos:start="41:17" pos:end="41:23">memmove</name><argument_list pos:start="41:24" pos:end="41:91">(<argument pos:start="41:25" pos:end="41:36"><expr pos:start="41:25" pos:end="41:36"><name pos:start="41:25" pos:end="41:36"><name pos:start="41:25" pos:end="41:25">s</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:36">bitstream</name></name></expr></argument>, <argument pos:start="41:39" pos:end="41:71"><expr pos:start="41:39" pos:end="41:71"><operator pos:start="41:39" pos:end="41:39">&amp;</operator><name pos:start="41:40" pos:end="41:71"><name pos:start="41:40" pos:end="41:40">s</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:51">bitstream</name><index pos:start="41:52" pos:end="41:71">[<expr pos:start="41:53" pos:end="41:70"><name pos:start="41:53" pos:end="41:70"><name pos:start="41:53" pos:end="41:53">s</name><operator pos:start="41:54" pos:end="41:55">-&gt;</operator><name pos:start="41:56" pos:end="41:70">bitstream_index</name></name></expr>]</index></name></expr></argument>, <argument pos:start="41:74" pos:end="41:90"><expr pos:start="41:74" pos:end="41:90"><name pos:start="41:74" pos:end="41:90"><name pos:start="41:74" pos:end="41:74">s</name><operator pos:start="41:75" pos:end="41:76">-&gt;</operator><name pos:start="41:77" pos:end="41:90">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:37"><expr pos:start="43:17" pos:end="43:36"><name pos:start="43:17" pos:end="43:34"><name pos:start="43:17" pos:end="43:17">s</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:34">bitstream_index</name></name><operator pos:start="43:35" pos:end="43:35">=</operator><literal type="number" pos:start="43:36" pos:end="43:36">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:89"><expr pos:start="47:13" pos:end="47:88"><call pos:start="47:13" pos:end="47:88"><name pos:start="47:13" pos:end="47:18">memcpy</name><argument_list pos:start="47:19" pos:end="47:88">(<argument pos:start="47:20" pos:end="47:72"><expr pos:start="47:20" pos:end="47:72"><operator pos:start="47:20" pos:end="47:20">&amp;</operator><name pos:start="47:21" pos:end="47:72"><name pos:start="47:21" pos:end="47:21">s</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:32">bitstream</name><index pos:start="47:33" pos:end="47:72">[<expr pos:start="47:34" pos:end="47:71"><name pos:start="47:34" pos:end="47:51"><name pos:start="47:34" pos:end="47:34">s</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:51">bitstream_index</name></name> <operator pos:start="47:53" pos:end="47:53">+</operator> <name pos:start="47:55" pos:end="47:71"><name pos:start="47:55" pos:end="47:55">s</name><operator pos:start="47:56" pos:end="47:57">-&gt;</operator><name pos:start="47:58" pos:end="47:71">bitstream_size</name></name></expr>]</index></name></expr></argument>, <argument pos:start="47:75" pos:end="47:77"><expr pos:start="47:75" pos:end="47:77"><name pos:start="47:75" pos:end="47:77">buf</name></expr></argument>, <argument pos:start="47:80" pos:end="47:87"><expr pos:start="47:80" pos:end="47:87"><name pos:start="47:80" pos:end="47:87">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:51"><expr pos:start="49:13" pos:end="49:50"><name pos:start="49:13" pos:end="49:15">buf</name><operator pos:start="49:16" pos:end="49:16">=</operator> <operator pos:start="49:18" pos:end="49:18">&amp;</operator><name pos:start="49:19" pos:end="49:50"><name pos:start="49:19" pos:end="49:19">s</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:30">bitstream</name><index pos:start="49:31" pos:end="49:50">[<expr pos:start="49:32" pos:end="49:49"><name pos:start="49:32" pos:end="49:49"><name pos:start="49:32" pos:end="49:32">s</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:49">bitstream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:42"><expr pos:start="51:13" pos:end="51:41"><name pos:start="51:13" pos:end="51:20">buf_size</name> <operator pos:start="51:22" pos:end="51:23">+=</operator> <name pos:start="51:25" pos:end="51:41"><name pos:start="51:25" pos:end="51:25">s</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:41">bitstream_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:40"><expr pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:29">bitstream_size</name></name><operator pos:start="53:30" pos:end="53:30">=</operator> <name pos:start="53:32" pos:end="53:39">buf_size</name></expr>;</expr_stmt>

            

            <if_stmt pos:start="57:13" pos:end="63:13"><if pos:start="57:13" pos:end="63:13">if<condition pos:start="57:15" pos:end="57:43">(<expr pos:start="57:16" pos:end="57:42"><name pos:start="57:16" pos:end="57:23">buf_size</name> <operator pos:start="57:25" pos:end="57:25">&lt;</operator> <name pos:start="57:27" pos:end="57:42"><name pos:start="57:27" pos:end="57:27">s</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:42">max_framesize</name></name></expr>)</condition><block pos:start="57:44" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:38">

<comment type="line" pos:start="59:1" pos:end="59:50">//                printf("wanna more data ...\n");</comment>

                <return pos:start="61:17" pos:end="61:38">return <expr pos:start="61:24" pos:end="61:37"><name pos:start="61:24" pos:end="61:37">input_buf_size</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><call pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:17">init_get_bits</name><argument_list pos:start="69:18" pos:end="69:42">(<argument pos:start="69:19" pos:end="69:24"><expr pos:start="69:19" pos:end="69:24"><operator pos:start="69:19" pos:end="69:19">&amp;</operator><name pos:start="69:20" pos:end="69:24"><name pos:start="69:20" pos:end="69:20">s</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:24">gb</name></name></expr></argument>, <argument pos:start="69:27" pos:end="69:29"><expr pos:start="69:27" pos:end="69:29"><name pos:start="69:27" pos:end="69:29">buf</name></expr></argument>, <argument pos:start="69:32" pos:end="69:41"><expr pos:start="69:32" pos:end="69:41"><name pos:start="69:32" pos:end="69:39">buf_size</name><operator pos:start="69:40" pos:end="69:40">*</operator><literal type="number" pos:start="69:41" pos:end="69:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <comment type="block" pos:start="73:5" pos:end="73:29">/* fLaC signature (be) */</comment>

    <if_stmt pos:start="75:5" pos:end="264:0"><if pos:start="75:5" pos:end="139:5">if <condition pos:start="75:8" pos:end="75:70">(<expr pos:start="75:9" pos:end="75:69"><call pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:22">show_bits_long</name><argument_list pos:start="75:23" pos:end="75:34">(<argument pos:start="75:24" pos:end="75:29"><expr pos:start="75:24" pos:end="75:29"><operator pos:start="75:24" pos:end="75:24">&amp;</operator><name pos:start="75:25" pos:end="75:29"><name pos:start="75:25" pos:end="75:25">s</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:29">gb</name></name></expr></argument>, <argument pos:start="75:32" pos:end="75:33"><expr pos:start="75:32" pos:end="75:33"><literal type="number" pos:start="75:32" pos:end="75:33">32</literal></expr></argument>)</argument_list></call> <operator pos:start="75:36" pos:end="75:37">==</operator> <call pos:start="75:39" pos:end="75:69"><name pos:start="75:39" pos:end="75:46">bswap_32</name><argument_list pos:start="75:47" pos:end="75:69">(<argument pos:start="75:48" pos:end="75:68"><expr pos:start="75:48" pos:end="75:68"><call pos:start="75:48" pos:end="75:68"><name pos:start="75:48" pos:end="75:60">ff_get_fourcc</name><argument_list pos:start="75:61" pos:end="75:68">(<argument pos:start="75:62" pos:end="75:67"><expr pos:start="75:62" pos:end="75:67"><literal type="string" pos:start="75:62" pos:end="75:67">"fLaC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="77:5" pos:end="139:5">{<block_content pos:start="79:9" pos:end="137:32">

        <expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><call pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:17">skip_bits</name><argument_list pos:start="79:18" pos:end="79:29">(<argument pos:start="79:19" pos:end="79:24"><expr pos:start="79:19" pos:end="79:24"><operator pos:start="79:19" pos:end="79:19">&amp;</operator><name pos:start="79:20" pos:end="79:24"><name pos:start="79:20" pos:end="79:20">s</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:24">gb</name></name></expr></argument>, <argument pos:start="79:27" pos:end="79:28"><expr pos:start="79:27" pos:end="79:28"><literal type="number" pos:start="79:27" pos:end="79:28">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:58"><expr pos:start="83:9" pos:end="83:57"><call pos:start="83:9" pos:end="83:57"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="83:57">(<argument pos:start="83:16" pos:end="83:23"><expr pos:start="83:16" pos:end="83:23"><name pos:start="83:16" pos:end="83:23"><name pos:start="83:16" pos:end="83:16">s</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:23">avctx</name></name></expr></argument>, <argument pos:start="83:26" pos:end="83:37"><expr pos:start="83:26" pos:end="83:37"><name pos:start="83:26" pos:end="83:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="83:40" pos:end="83:56"><expr pos:start="83:40" pos:end="83:56"><literal type="string" pos:start="83:40" pos:end="83:56">"STREAM HEADER\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do pos:start="85:9" pos:end="137:32">do <block pos:start="85:12" pos:end="137:9">{<block_content pos:start="87:13" pos:end="135:13">

            <expr_stmt pos:start="87:13" pos:end="87:48"><expr pos:start="87:13" pos:end="87:47"><name pos:start="87:13" pos:end="87:25">metadata_last</name> <operator pos:start="87:27" pos:end="87:27">=</operator> <call pos:start="87:29" pos:end="87:47"><name pos:start="87:29" pos:end="87:36">get_bits</name><argument_list pos:start="87:37" pos:end="87:47">(<argument pos:start="87:38" pos:end="87:43"><expr pos:start="87:38" pos:end="87:43"><operator pos:start="87:38" pos:end="87:38">&amp;</operator><name pos:start="87:39" pos:end="87:43"><name pos:start="87:39" pos:end="87:39">s</name><operator pos:start="87:40" pos:end="87:41">-&gt;</operator><name pos:start="87:42" pos:end="87:43">gb</name></name></expr></argument>, <argument pos:start="87:46" pos:end="87:46"><expr pos:start="87:46" pos:end="87:46"><literal type="number" pos:start="87:46" pos:end="87:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:48"><expr pos:start="89:13" pos:end="89:47"><name pos:start="89:13" pos:end="89:25">metadata_type</name> <operator pos:start="89:27" pos:end="89:27">=</operator> <call pos:start="89:29" pos:end="89:47"><name pos:start="89:29" pos:end="89:36">get_bits</name><argument_list pos:start="89:37" pos:end="89:47">(<argument pos:start="89:38" pos:end="89:43"><expr pos:start="89:38" pos:end="89:43"><operator pos:start="89:38" pos:end="89:38">&amp;</operator><name pos:start="89:39" pos:end="89:43"><name pos:start="89:39" pos:end="89:39">s</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:43">gb</name></name></expr></argument>, <argument pos:start="89:46" pos:end="89:46"><expr pos:start="89:46" pos:end="89:46"><literal type="number" pos:start="89:46" pos:end="89:46">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:54"><expr pos:start="91:13" pos:end="91:53"><name pos:start="91:13" pos:end="91:25">metadata_size</name> <operator pos:start="91:27" pos:end="91:27">=</operator> <call pos:start="91:29" pos:end="91:53"><name pos:start="91:29" pos:end="91:41">get_bits_long</name><argument_list pos:start="91:42" pos:end="91:53">(<argument pos:start="91:43" pos:end="91:48"><expr pos:start="91:43" pos:end="91:48"><operator pos:start="91:43" pos:end="91:43">&amp;</operator><name pos:start="91:44" pos:end="91:48"><name pos:start="91:44" pos:end="91:44">s</name><operator pos:start="91:45" pos:end="91:46">-&gt;</operator><name pos:start="91:47" pos:end="91:48">gb</name></name></expr></argument>, <argument pos:start="91:51" pos:end="91:52"><expr pos:start="91:51" pos:end="91:52"><literal type="number" pos:start="91:51" pos:end="91:52">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <expr_stmt pos:start="95:13" pos:end="99:31"><expr pos:start="95:13" pos:end="99:30"><call pos:start="95:13" pos:end="99:30"><name pos:start="95:13" pos:end="95:18">av_log</name><argument_list pos:start="95:19" pos:end="99:30">(<argument pos:start="95:20" pos:end="95:27"><expr pos:start="95:20" pos:end="95:27"><name pos:start="95:20" pos:end="95:27"><name pos:start="95:20" pos:end="95:20">s</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:27">avctx</name></name></expr></argument>, <argument pos:start="95:30" pos:end="95:41"><expr pos:start="95:30" pos:end="95:41"><name pos:start="95:30" pos:end="95:41">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="95:44" pos:end="95:95"><expr pos:start="95:44" pos:end="95:95"><literal type="string" pos:start="95:44" pos:end="95:95">" metadata block: flag = %d, type = %d, size = %d\n"</literal></expr></argument>,

                <argument pos:start="97:17" pos:end="97:29"><expr pos:start="97:17" pos:end="97:29"><name pos:start="97:17" pos:end="97:29">metadata_last</name></expr></argument>, <argument pos:start="97:32" pos:end="97:44"><expr pos:start="97:32" pos:end="97:44"><name pos:start="97:32" pos:end="97:44">metadata_type</name></expr></argument>,

                <argument pos:start="99:17" pos:end="99:29"><expr pos:start="99:17" pos:end="99:29"><name pos:start="99:17" pos:end="99:29">metadata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="135:13"><if pos:start="101:13" pos:end="135:13">if<condition pos:start="101:15" pos:end="101:29">(<expr pos:start="101:16" pos:end="101:28"><name pos:start="101:16" pos:end="101:28">metadata_size</name></expr>)</condition><block pos:start="101:30" pos:end="135:13">{<block_content pos:start="103:17" pos:end="133:17">

                <switch pos:start="103:17" pos:end="133:17">switch<condition pos:start="103:23" pos:end="103:37">(<expr pos:start="103:24" pos:end="103:36"><name pos:start="103:24" pos:end="103:36">metadata_type</name></expr>)</condition>

                <block pos:start="105:17" pos:end="133:17">{<block_content pos:start="107:17" pos:end="131:45">

                <case pos:start="107:17" pos:end="107:46">case <expr pos:start="107:22" pos:end="107:45"><name pos:start="107:22" pos:end="107:45">METADATA_TYPE_STREAMINFO</name></expr>:</case><block pos:start="107:47" pos:end="125:27">{<block_content pos:start="109:21" pos:end="125:26">

                    <decl_stmt pos:start="109:21" pos:end="109:59"><decl pos:start="109:21" pos:end="109:58"><type pos:start="109:21" pos:end="109:23"><name pos:start="109:21" pos:end="109:23">int</name></type> <name pos:start="109:25" pos:end="109:34">bits_count</name><init pos:start="109:35" pos:end="109:58">= <expr pos:start="109:37" pos:end="109:58"><call pos:start="109:37" pos:end="109:58"><name pos:start="109:37" pos:end="109:50">get_bits_count</name><argument_list pos:start="109:51" pos:end="109:58">(<argument pos:start="109:52" pos:end="109:57"><expr pos:start="109:52" pos:end="109:57"><operator pos:start="109:52" pos:end="109:52">&amp;</operator><name pos:start="109:53" pos:end="109:57"><name pos:start="109:53" pos:end="109:53">s</name><operator pos:start="109:54" pos:end="109:55">-&gt;</operator><name pos:start="109:56" pos:end="109:57">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="113:21" pos:end="113:43"><expr pos:start="113:21" pos:end="113:42"><call pos:start="113:21" pos:end="113:42"><name pos:start="113:21" pos:end="113:39">metadata_streaminfo</name><argument_list pos:start="113:40" pos:end="113:42">(<argument pos:start="113:41" pos:end="113:41"><expr pos:start="113:41" pos:end="113:41"><name pos:start="113:41" pos:end="113:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="115:21" pos:end="115:59"><expr pos:start="115:21" pos:end="115:58"><name pos:start="115:21" pos:end="115:23">buf</name><operator pos:start="115:24" pos:end="115:24">=</operator> <operator pos:start="115:26" pos:end="115:26">&amp;</operator><name pos:start="115:27" pos:end="115:58"><name pos:start="115:27" pos:end="115:27">s</name><operator pos:start="115:28" pos:end="115:29">-&gt;</operator><name pos:start="115:30" pos:end="115:38">bitstream</name><index pos:start="115:39" pos:end="115:58">[<expr pos:start="115:40" pos:end="115:57"><name pos:start="115:40" pos:end="115:57"><name pos:start="115:40" pos:end="115:40">s</name><operator pos:start="115:41" pos:end="115:42">-&gt;</operator><name pos:start="115:43" pos:end="115:57">bitstream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:59"><expr pos:start="117:21" pos:end="117:58"><call pos:start="117:21" pos:end="117:58"><name pos:start="117:21" pos:end="117:33">init_get_bits</name><argument_list pos:start="117:34" pos:end="117:58">(<argument pos:start="117:35" pos:end="117:40"><expr pos:start="117:35" pos:end="117:40"><operator pos:start="117:35" pos:end="117:35">&amp;</operator><name pos:start="117:36" pos:end="117:40"><name pos:start="117:36" pos:end="117:36">s</name><operator pos:start="117:37" pos:end="117:38">-&gt;</operator><name pos:start="117:39" pos:end="117:40">gb</name></name></expr></argument>, <argument pos:start="117:43" pos:end="117:45"><expr pos:start="117:43" pos:end="117:45"><name pos:start="117:43" pos:end="117:45">buf</name></expr></argument>, <argument pos:start="117:48" pos:end="117:57"><expr pos:start="117:48" pos:end="117:57"><name pos:start="117:48" pos:end="117:55">buf_size</name><operator pos:start="117:56" pos:end="117:56">*</operator><literal type="number" pos:start="117:57" pos:end="117:57">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:50"><expr pos:start="119:21" pos:end="119:49"><call pos:start="119:21" pos:end="119:49"><name pos:start="119:21" pos:end="119:29">skip_bits</name><argument_list pos:start="119:30" pos:end="119:49">(<argument pos:start="119:31" pos:end="119:36"><expr pos:start="119:31" pos:end="119:36"><operator pos:start="119:31" pos:end="119:31">&amp;</operator><name pos:start="119:32" pos:end="119:36"><name pos:start="119:32" pos:end="119:32">s</name><operator pos:start="119:33" pos:end="119:34">-&gt;</operator><name pos:start="119:35" pos:end="119:36">gb</name></name></expr></argument>, <argument pos:start="119:39" pos:end="119:48"><expr pos:start="119:39" pos:end="119:48"><name pos:start="119:39" pos:end="119:48">bits_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="123:21" pos:end="123:36"><expr pos:start="123:21" pos:end="123:35"><call pos:start="123:21" pos:end="123:35"><name pos:start="123:21" pos:end="123:32">dump_headers</name><argument_list pos:start="123:33" pos:end="123:35">(<argument pos:start="123:34" pos:end="123:34"><expr pos:start="123:34" pos:end="123:34"><name pos:start="123:34" pos:end="123:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="125:21" pos:end="125:26">break;</break></block_content>}</block>

                <default pos:start="127:17" pos:end="127:24">default:</default>

                    <for pos:start="129:21" pos:end="131:45">for<control pos:start="129:24" pos:end="129:50">(<init pos:start="129:25" pos:end="129:28"><expr pos:start="129:25" pos:end="129:27"><name pos:start="129:25" pos:end="129:25">i</name><operator pos:start="129:26" pos:end="129:26">=</operator><literal type="number" pos:start="129:27" pos:end="129:27">0</literal></expr>;</init> <condition pos:start="129:30" pos:end="129:45"><expr pos:start="129:30" pos:end="129:44"><name pos:start="129:30" pos:end="129:30">i</name><operator pos:start="129:31" pos:end="129:31">&lt;</operator><name pos:start="129:32" pos:end="129:44">metadata_size</name></expr>;</condition> <incr pos:start="129:47" pos:end="129:49"><expr pos:start="129:47" pos:end="129:49"><name pos:start="129:47" pos:end="129:47">i</name><operator pos:start="129:48" pos:end="129:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="131:25" pos:end="131:45"><block_content pos:start="131:25" pos:end="131:45">

                        <expr_stmt pos:start="131:25" pos:end="131:45"><expr pos:start="131:25" pos:end="131:44"><call pos:start="131:25" pos:end="131:44"><name pos:start="131:25" pos:end="131:33">skip_bits</name><argument_list pos:start="131:34" pos:end="131:44">(<argument pos:start="131:35" pos:end="131:40"><expr pos:start="131:35" pos:end="131:40"><operator pos:start="131:35" pos:end="131:35">&amp;</operator><name pos:start="131:36" pos:end="131:40"><name pos:start="131:36" pos:end="131:36">s</name><operator pos:start="131:37" pos:end="131:38">-&gt;</operator><name pos:start="131:39" pos:end="131:40">gb</name></name></expr></argument>, <argument pos:start="131:43" pos:end="131:43"><expr pos:start="131:43" pos:end="131:43"><literal type="number" pos:start="131:43" pos:end="131:43">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></switch>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while<condition pos:start="137:16" pos:end="137:31">(<expr pos:start="137:17" pos:end="137:30"><operator pos:start="137:17" pos:end="137:17">!</operator><name pos:start="137:18" pos:end="137:30">metadata_last</name></expr>)</condition>;</do>

    </block_content>}</block></if>

    <else pos:start="141:5" pos:end="264:0">else

    <block pos:start="143:5" pos:end="264:0">{<block_content pos:start="147:9" pos:end="173:9">

        

        <expr_stmt pos:start="147:9" pos:end="147:36"><expr pos:start="147:9" pos:end="147:35"><name pos:start="147:9" pos:end="147:11">tmp</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <call pos:start="147:15" pos:end="147:35"><name pos:start="147:15" pos:end="147:23">show_bits</name><argument_list pos:start="147:24" pos:end="147:35">(<argument pos:start="147:25" pos:end="147:30"><expr pos:start="147:25" pos:end="147:30"><operator pos:start="147:25" pos:end="147:25">&amp;</operator><name pos:start="147:26" pos:end="147:30"><name pos:start="147:26" pos:end="147:26">s</name><operator pos:start="147:27" pos:end="147:28">-&gt;</operator><name pos:start="147:29" pos:end="147:30">gb</name></name></expr></argument>, <argument pos:start="147:33" pos:end="147:34"><expr pos:start="147:33" pos:end="147:34"><literal type="number" pos:start="147:33" pos:end="147:34">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="159:9"><if pos:start="149:9" pos:end="159:9">if<condition pos:start="149:11" pos:end="149:25">(<expr pos:start="149:12" pos:end="149:24"><name pos:start="149:12" pos:end="149:14">tmp</name> <operator pos:start="149:16" pos:end="149:17">!=</operator> <literal type="number" pos:start="149:19" pos:end="149:24">0xFFF8</literal></expr>)</condition><block pos:start="149:26" pos:end="159:9">{<block_content pos:start="151:13" pos:end="157:21">

            <expr_stmt pos:start="151:13" pos:end="151:70"><expr pos:start="151:13" pos:end="151:69"><call pos:start="151:13" pos:end="151:69"><name pos:start="151:13" pos:end="151:18">av_log</name><argument_list pos:start="151:19" pos:end="151:69">(<argument pos:start="151:20" pos:end="151:27"><expr pos:start="151:20" pos:end="151:27"><name pos:start="151:20" pos:end="151:27"><name pos:start="151:20" pos:end="151:20">s</name><operator pos:start="151:21" pos:end="151:22">-&gt;</operator><name pos:start="151:23" pos:end="151:27">avctx</name></name></expr></argument>, <argument pos:start="151:30" pos:end="151:41"><expr pos:start="151:30" pos:end="151:41"><name pos:start="151:30" pos:end="151:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="151:44" pos:end="151:68"><expr pos:start="151:44" pos:end="151:68"><literal type="string" pos:start="151:44" pos:end="151:68">"FRAME HEADER not here\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="153:13" pos:end="155:37">while<condition pos:start="153:18" pos:end="153:91">(<expr pos:start="153:19" pos:end="153:90"><call pos:start="153:19" pos:end="153:40"><name pos:start="153:19" pos:end="153:32">get_bits_count</name><argument_list pos:start="153:33" pos:end="153:40">(<argument pos:start="153:34" pos:end="153:39"><expr pos:start="153:34" pos:end="153:39"><operator pos:start="153:34" pos:end="153:34">&amp;</operator><name pos:start="153:35" pos:end="153:39"><name pos:start="153:35" pos:end="153:35">s</name><operator pos:start="153:36" pos:end="153:37">-&gt;</operator><name pos:start="153:38" pos:end="153:39">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="153:41" pos:end="153:41">/</operator><literal type="number" pos:start="153:42" pos:end="153:43">8</literal><operator pos:start="153:43" pos:end="153:43">+</operator><literal type="number" pos:start="153:44" pos:end="153:44">2</literal> <operator pos:start="153:46" pos:end="153:46">&lt;</operator> <name pos:start="153:48" pos:end="153:55">buf_size</name> <operator pos:start="153:57" pos:end="153:58">&amp;&amp;</operator> <call pos:start="153:60" pos:end="153:80"><name pos:start="153:60" pos:end="153:68">show_bits</name><argument_list pos:start="153:69" pos:end="153:80">(<argument pos:start="153:70" pos:end="153:75"><expr pos:start="153:70" pos:end="153:75"><operator pos:start="153:70" pos:end="153:70">&amp;</operator><name pos:start="153:71" pos:end="153:75"><name pos:start="153:71" pos:end="153:71">s</name><operator pos:start="153:72" pos:end="153:73">-&gt;</operator><name pos:start="153:74" pos:end="153:75">gb</name></name></expr></argument>, <argument pos:start="153:78" pos:end="153:79"><expr pos:start="153:78" pos:end="153:79"><literal type="number" pos:start="153:78" pos:end="153:79">16</literal></expr></argument>)</argument_list></call> <operator pos:start="153:82" pos:end="153:83">!=</operator> <literal type="number" pos:start="153:85" pos:end="153:90">0xFFF8</literal></expr>)</condition><block type="pseudo" pos:start="155:17" pos:end="155:37"><block_content pos:start="155:17" pos:end="155:37">

                <expr_stmt pos:start="155:17" pos:end="155:37"><expr pos:start="155:17" pos:end="155:36"><call pos:start="155:17" pos:end="155:36"><name pos:start="155:17" pos:end="155:25">skip_bits</name><argument_list pos:start="155:26" pos:end="155:36">(<argument pos:start="155:27" pos:end="155:32"><expr pos:start="155:27" pos:end="155:32"><operator pos:start="155:27" pos:end="155:27">&amp;</operator><name pos:start="155:28" pos:end="155:32"><name pos:start="155:28" pos:end="155:28">s</name><operator pos:start="155:29" pos:end="155:30">-&gt;</operator><name pos:start="155:31" pos:end="155:32">gb</name></name></expr></argument>, <argument pos:start="155:35" pos:end="155:35"><expr pos:start="155:35" pos:end="155:35"><literal type="number" pos:start="155:35" pos:end="155:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <goto pos:start="157:13" pos:end="157:21">goto <name pos:start="157:18" pos:end="157:20">end</name>;</goto> <comment type="line" pos:start="157:23" pos:end="157:93">// we may not have enough bits left to decode a frame, so try next time</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:30"><expr pos:start="161:9" pos:end="161:29"><call pos:start="161:9" pos:end="161:29"><name pos:start="161:9" pos:end="161:17">skip_bits</name><argument_list pos:start="161:18" pos:end="161:29">(<argument pos:start="161:19" pos:end="161:24"><expr pos:start="161:19" pos:end="161:24"><operator pos:start="161:19" pos:end="161:19">&amp;</operator><name pos:start="161:20" pos:end="161:24"><name pos:start="161:20" pos:end="161:20">s</name><operator pos:start="161:21" pos:end="161:22">-&gt;</operator><name pos:start="161:23" pos:end="161:24">gb</name></name></expr></argument>, <argument pos:start="161:27" pos:end="161:28"><expr pos:start="161:27" pos:end="161:28"><literal type="number" pos:start="161:27" pos:end="161:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="163:9" pos:end="173:9"><if pos:start="163:9" pos:end="173:9">if <condition pos:start="163:12" pos:end="163:32">(<expr pos:start="163:13" pos:end="163:31"><call pos:start="163:13" pos:end="163:27"><name pos:start="163:13" pos:end="163:24">decode_frame</name><argument_list pos:start="163:25" pos:end="163:27">(<argument pos:start="163:26" pos:end="163:26"><expr pos:start="163:26" pos:end="163:26"><name pos:start="163:26" pos:end="163:26">s</name></expr></argument>)</argument_list></call> <operator pos:start="163:29" pos:end="163:29">&lt;</operator> <literal type="number" pos:start="163:31" pos:end="163:31">0</literal></expr>)</condition><block pos:start="163:33" pos:end="173:9">{<block_content pos:start="165:13" pos:end="171:22">

            <expr_stmt pos:start="165:13" pos:end="165:70"><expr pos:start="165:13" pos:end="165:69"><call pos:start="165:13" pos:end="165:69"><name pos:start="165:13" pos:end="165:18">av_log</name><argument_list pos:start="165:19" pos:end="165:69">(<argument pos:start="165:20" pos:end="165:27"><expr pos:start="165:20" pos:end="165:27"><name pos:start="165:20" pos:end="165:27"><name pos:start="165:20" pos:end="165:20">s</name><operator pos:start="165:21" pos:end="165:22">-&gt;</operator><name pos:start="165:23" pos:end="165:27">avctx</name></name></expr></argument>, <argument pos:start="165:30" pos:end="165:41"><expr pos:start="165:30" pos:end="165:41"><name pos:start="165:30" pos:end="165:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="165:44" pos:end="165:68"><expr pos:start="165:44" pos:end="165:68"><literal type="string" pos:start="165:44" pos:end="165:68">"decode_frame() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:32"><expr pos:start="167:13" pos:end="167:31"><name pos:start="167:13" pos:end="167:29"><name pos:start="167:13" pos:end="167:13">s</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:29">bitstream_size</name></name><operator pos:start="167:30" pos:end="167:30">=</operator><literal type="number" pos:start="167:31" pos:end="167:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:33"><expr pos:start="169:13" pos:end="169:32"><name pos:start="169:13" pos:end="169:30"><name pos:start="169:13" pos:end="169:13">s</name><operator pos:start="169:14" pos:end="169:15">-&gt;</operator><name pos:start="169:16" pos:end="169:30">bitstream_index</name></name><operator pos:start="169:31" pos:end="169:31">=</operator><literal type="number" pos:start="169:32" pos:end="169:32">0</literal></expr>;</expr_stmt>

            <return pos:start="171:13" pos:end="171:22">return <expr pos:start="171:20" pos:end="171:21"><operator pos:start="171:20" pos:end="171:20">-</operator><literal type="number" pos:start="171:21" pos:end="171:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    

<cpp:if pos:start="181:1" pos:end="181:5">#<cpp:directive pos:start="181:2" pos:end="181:3">if</cpp:directive> <expr pos:start="181:5" pos:end="181:5"><literal type="number" pos:start="181:5" pos:end="181:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="183:5" pos:end="183:36">/* fix the channel order here */</comment>

    if (s-&gt;order == MID_SIDE)

    {

        short *left = samples;

        short *right = samples + s-&gt;blocksize;

        for (i = 0; i &lt; s-&gt;blocksize; i += 2)

        {

            uint32_t x = s-&gt;decoded[0][i];

            uint32_t y = s-&gt;decoded[0][i+1];



            right[i] = x - (y / 2);

            left[i] = right[i] + y;

        }

        *data_size = 2 * s-&gt;blocksize;

    }

    else

    {

    for (i = 0; i &lt; s-&gt;channels; i++)

    {

        switch(s-&gt;order)

        {

            case INDEPENDENT:

                for (j = 0; j &lt; s-&gt;blocksize; j++)

                    samples[(s-&gt;blocksize*i)+j] = s-&gt;decoded[i][j];

                break;

            case LEFT_SIDE:

            case RIGHT_SIDE:

                if (i == 0)

                    for (j = 0; j &lt; s-&gt;blocksize; j++)

                        samples[(s-&gt;blocksize*i)+j] = s-&gt;decoded[0][j];

                else

                    for (j = 0; j &lt; s-&gt;blocksize; j++)

                        samples[(s-&gt;blocksize*i)+j] = s-&gt;decoded[0][j] - s-&gt;decoded[i][j];

                break;

<comment type="line" pos:start="251:1" pos:end="251:28">//            case MID_SIDE:</comment>

<comment type="line" pos:start="253:1" pos:end="253:75">//                av_log(s-&gt;avctx, AV_LOG_DEBUG, "mid-side unsupported\n");</comment>

        }

        *data_size += s-&gt;blocksize;

    }

    }

<cpp:else pos:start="263:1" pos:end="263:5">#<cpp:directive pos:start="263:2" pos:end="263:5">else</cpp:directive></cpp:else>

    <switch pos:start="265:5" pos:end="362:0">switch<condition pos:start="265:11" pos:end="265:28">(<expr pos:start="265:12" pos:end="265:27"><name pos:start="265:12" pos:end="265:27"><name pos:start="265:12" pos:end="265:12">s</name><operator pos:start="265:13" pos:end="265:14">-&gt;</operator><name pos:start="265:15" pos:end="265:27">decorrelation</name></name></expr>)</condition>

    <block pos:start="267:5" pos:end="362:0">{<block_content pos:start="269:9" pos:end="357:18">

        <case pos:start="269:9" pos:end="269:25">case <expr pos:start="269:14" pos:end="269:24"><name pos:start="269:14" pos:end="269:24">INDEPENDENT</name></expr>:</case>

            <for pos:start="271:13" pos:end="279:13">for <control pos:start="271:17" pos:end="271:46">(<init pos:start="271:18" pos:end="271:23"><expr pos:start="271:18" pos:end="271:22"><name pos:start="271:18" pos:end="271:18">j</name> <operator pos:start="271:20" pos:end="271:20">=</operator> <literal type="number" pos:start="271:22" pos:end="271:22">0</literal></expr>;</init> <condition pos:start="271:25" pos:end="271:41"><expr pos:start="271:25" pos:end="271:40"><name pos:start="271:25" pos:end="271:25">j</name> <operator pos:start="271:27" pos:end="271:27">&lt;</operator> <name pos:start="271:29" pos:end="271:40"><name pos:start="271:29" pos:end="271:29">s</name><operator pos:start="271:30" pos:end="271:31">-&gt;</operator><name pos:start="271:32" pos:end="271:40">blocksize</name></name></expr>;</condition> <incr pos:start="271:43" pos:end="271:45"><expr pos:start="271:43" pos:end="271:45"><name pos:start="271:43" pos:end="271:43">j</name><operator pos:start="271:44" pos:end="271:45">++</operator></expr></incr>)</control>

            <block pos:start="273:13" pos:end="279:13">{<block_content pos:start="275:17" pos:end="277:52">

                <for pos:start="275:17" pos:end="277:52">for <control pos:start="275:21" pos:end="275:49">(<init pos:start="275:22" pos:end="275:27"><expr pos:start="275:22" pos:end="275:26"><name pos:start="275:22" pos:end="275:22">i</name> <operator pos:start="275:24" pos:end="275:24">=</operator> <literal type="number" pos:start="275:26" pos:end="275:26">0</literal></expr>;</init> <condition pos:start="275:29" pos:end="275:44"><expr pos:start="275:29" pos:end="275:43"><name pos:start="275:29" pos:end="275:29">i</name> <operator pos:start="275:31" pos:end="275:31">&lt;</operator> <name pos:start="275:33" pos:end="275:43"><name pos:start="275:33" pos:end="275:33">s</name><operator pos:start="275:34" pos:end="275:35">-&gt;</operator><name pos:start="275:36" pos:end="275:43">channels</name></name></expr>;</condition> <incr pos:start="275:46" pos:end="275:48"><expr pos:start="275:46" pos:end="275:48"><name pos:start="275:46" pos:end="275:46">i</name><operator pos:start="275:47" pos:end="275:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="277:21" pos:end="277:52"><block_content pos:start="277:21" pos:end="277:52">

                    <expr_stmt pos:start="277:21" pos:end="277:52"><expr pos:start="277:21" pos:end="277:51"><operator pos:start="277:21" pos:end="277:21">*</operator><operator pos:start="277:22" pos:end="277:22">(</operator><name pos:start="277:23" pos:end="277:29">samples</name><operator pos:start="277:30" pos:end="277:31">++</operator><operator pos:start="277:32" pos:end="277:32">)</operator> <operator pos:start="277:34" pos:end="277:34">=</operator> <name pos:start="277:36" pos:end="277:51"><name pos:start="277:36" pos:end="277:36">s</name><operator pos:start="277:37" pos:end="277:38">-&gt;</operator><name pos:start="277:39" pos:end="277:45">decoded</name><index pos:start="277:46" pos:end="277:48">[<expr pos:start="277:47" pos:end="277:47"><name pos:start="277:47" pos:end="277:47">i</name></expr>]</index><index pos:start="277:49" pos:end="277:51">[<expr pos:start="277:50" pos:end="277:50"><name pos:start="277:50" pos:end="277:50">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>

            <break pos:start="281:13" pos:end="281:18">break;</break>

        <case pos:start="283:9" pos:end="283:23">case <expr pos:start="283:14" pos:end="283:22"><name pos:start="283:14" pos:end="283:22">LEFT_SIDE</name></expr>:</case>

            <expr_stmt pos:start="285:13" pos:end="285:37"><expr pos:start="285:13" pos:end="285:36"><call pos:start="285:13" pos:end="285:36"><name pos:start="285:13" pos:end="285:18">assert</name><argument_list pos:start="285:19" pos:end="285:36">(<argument pos:start="285:20" pos:end="285:35"><expr pos:start="285:20" pos:end="285:35"><name pos:start="285:20" pos:end="285:30"><name pos:start="285:20" pos:end="285:20">s</name><operator pos:start="285:21" pos:end="285:22">-&gt;</operator><name pos:start="285:23" pos:end="285:30">channels</name></name> <operator pos:start="285:32" pos:end="285:33">==</operator> <literal type="number" pos:start="285:35" pos:end="285:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="287:13" pos:end="295:13">for <control pos:start="287:17" pos:end="287:46">(<init pos:start="287:18" pos:end="287:23"><expr pos:start="287:18" pos:end="287:22"><name pos:start="287:18" pos:end="287:18">i</name> <operator pos:start="287:20" pos:end="287:20">=</operator> <literal type="number" pos:start="287:22" pos:end="287:22">0</literal></expr>;</init> <condition pos:start="287:25" pos:end="287:41"><expr pos:start="287:25" pos:end="287:40"><name pos:start="287:25" pos:end="287:25">i</name> <operator pos:start="287:27" pos:end="287:27">&lt;</operator> <name pos:start="287:29" pos:end="287:40"><name pos:start="287:29" pos:end="287:29">s</name><operator pos:start="287:30" pos:end="287:31">-&gt;</operator><name pos:start="287:32" pos:end="287:40">blocksize</name></name></expr>;</condition> <incr pos:start="287:43" pos:end="287:45"><expr pos:start="287:43" pos:end="287:45"><name pos:start="287:43" pos:end="287:43">i</name><operator pos:start="287:44" pos:end="287:45">++</operator></expr></incr>)</control>

            <block pos:start="289:13" pos:end="295:13">{<block_content pos:start="291:17" pos:end="293:67">

                <expr_stmt pos:start="291:17" pos:end="291:48"><expr pos:start="291:17" pos:end="291:47"><operator pos:start="291:17" pos:end="291:17">*</operator><operator pos:start="291:18" pos:end="291:18">(</operator><name pos:start="291:19" pos:end="291:25">samples</name><operator pos:start="291:26" pos:end="291:27">++</operator><operator pos:start="291:28" pos:end="291:28">)</operator> <operator pos:start="291:30" pos:end="291:30">=</operator> <name pos:start="291:32" pos:end="291:47"><name pos:start="291:32" pos:end="291:32">s</name><operator pos:start="291:33" pos:end="291:34">-&gt;</operator><name pos:start="291:35" pos:end="291:41">decoded</name><index pos:start="291:42" pos:end="291:44">[<expr pos:start="291:43" pos:end="291:43"><literal type="number" pos:start="291:43" pos:end="291:43">0</literal></expr>]</index><index pos:start="291:45" pos:end="291:47">[<expr pos:start="291:46" pos:end="291:46"><name pos:start="291:46" pos:end="291:46">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:67"><expr pos:start="293:17" pos:end="293:66"><operator pos:start="293:17" pos:end="293:17">*</operator><operator pos:start="293:18" pos:end="293:18">(</operator><name pos:start="293:19" pos:end="293:25">samples</name><operator pos:start="293:26" pos:end="293:27">++</operator><operator pos:start="293:28" pos:end="293:28">)</operator> <operator pos:start="293:30" pos:end="293:30">=</operator> <name pos:start="293:32" pos:end="293:47"><name pos:start="293:32" pos:end="293:32">s</name><operator pos:start="293:33" pos:end="293:34">-&gt;</operator><name pos:start="293:35" pos:end="293:41">decoded</name><index pos:start="293:42" pos:end="293:44">[<expr pos:start="293:43" pos:end="293:43"><literal type="number" pos:start="293:43" pos:end="293:43">0</literal></expr>]</index><index pos:start="293:45" pos:end="293:47">[<expr pos:start="293:46" pos:end="293:46"><name pos:start="293:46" pos:end="293:46">i</name></expr>]</index></name> <operator pos:start="293:49" pos:end="293:49">-</operator> <name pos:start="293:51" pos:end="293:66"><name pos:start="293:51" pos:end="293:51">s</name><operator pos:start="293:52" pos:end="293:53">-&gt;</operator><name pos:start="293:54" pos:end="293:60">decoded</name><index pos:start="293:61" pos:end="293:63">[<expr pos:start="293:62" pos:end="293:62"><literal type="number" pos:start="293:62" pos:end="293:62">1</literal></expr>]</index><index pos:start="293:64" pos:end="293:66">[<expr pos:start="293:65" pos:end="293:65"><name pos:start="293:65" pos:end="293:65">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="297:13" pos:end="297:18">break;</break>

        <case pos:start="299:9" pos:end="299:24">case <expr pos:start="299:14" pos:end="299:23"><name pos:start="299:14" pos:end="299:23">RIGHT_SIDE</name></expr>:</case>

            <expr_stmt pos:start="301:13" pos:end="301:37"><expr pos:start="301:13" pos:end="301:36"><call pos:start="301:13" pos:end="301:36"><name pos:start="301:13" pos:end="301:18">assert</name><argument_list pos:start="301:19" pos:end="301:36">(<argument pos:start="301:20" pos:end="301:35"><expr pos:start="301:20" pos:end="301:35"><name pos:start="301:20" pos:end="301:30"><name pos:start="301:20" pos:end="301:20">s</name><operator pos:start="301:21" pos:end="301:22">-&gt;</operator><name pos:start="301:23" pos:end="301:30">channels</name></name> <operator pos:start="301:32" pos:end="301:33">==</operator> <literal type="number" pos:start="301:35" pos:end="301:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="303:13" pos:end="311:13">for <control pos:start="303:17" pos:end="303:46">(<init pos:start="303:18" pos:end="303:23"><expr pos:start="303:18" pos:end="303:22"><name pos:start="303:18" pos:end="303:18">i</name> <operator pos:start="303:20" pos:end="303:20">=</operator> <literal type="number" pos:start="303:22" pos:end="303:22">0</literal></expr>;</init> <condition pos:start="303:25" pos:end="303:41"><expr pos:start="303:25" pos:end="303:40"><name pos:start="303:25" pos:end="303:25">i</name> <operator pos:start="303:27" pos:end="303:27">&lt;</operator> <name pos:start="303:29" pos:end="303:40"><name pos:start="303:29" pos:end="303:29">s</name><operator pos:start="303:30" pos:end="303:31">-&gt;</operator><name pos:start="303:32" pos:end="303:40">blocksize</name></name></expr>;</condition> <incr pos:start="303:43" pos:end="303:45"><expr pos:start="303:43" pos:end="303:45"><name pos:start="303:43" pos:end="303:43">i</name><operator pos:start="303:44" pos:end="303:45">++</operator></expr></incr>)</control>

            <block pos:start="305:13" pos:end="311:13">{<block_content pos:start="307:17" pos:end="309:48">

                <expr_stmt pos:start="307:17" pos:end="307:67"><expr pos:start="307:17" pos:end="307:66"><operator pos:start="307:17" pos:end="307:17">*</operator><operator pos:start="307:18" pos:end="307:18">(</operator><name pos:start="307:19" pos:end="307:25">samples</name><operator pos:start="307:26" pos:end="307:27">++</operator><operator pos:start="307:28" pos:end="307:28">)</operator> <operator pos:start="307:30" pos:end="307:30">=</operator> <name pos:start="307:32" pos:end="307:47"><name pos:start="307:32" pos:end="307:32">s</name><operator pos:start="307:33" pos:end="307:34">-&gt;</operator><name pos:start="307:35" pos:end="307:41">decoded</name><index pos:start="307:42" pos:end="307:44">[<expr pos:start="307:43" pos:end="307:43"><literal type="number" pos:start="307:43" pos:end="307:43">0</literal></expr>]</index><index pos:start="307:45" pos:end="307:47">[<expr pos:start="307:46" pos:end="307:46"><name pos:start="307:46" pos:end="307:46">i</name></expr>]</index></name> <operator pos:start="307:49" pos:end="307:49">+</operator> <name pos:start="307:51" pos:end="307:66"><name pos:start="307:51" pos:end="307:51">s</name><operator pos:start="307:52" pos:end="307:53">-&gt;</operator><name pos:start="307:54" pos:end="307:60">decoded</name><index pos:start="307:61" pos:end="307:63">[<expr pos:start="307:62" pos:end="307:62"><literal type="number" pos:start="307:62" pos:end="307:62">1</literal></expr>]</index><index pos:start="307:64" pos:end="307:66">[<expr pos:start="307:65" pos:end="307:65"><name pos:start="307:65" pos:end="307:65">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="309:17" pos:end="309:48"><expr pos:start="309:17" pos:end="309:47"><operator pos:start="309:17" pos:end="309:17">*</operator><operator pos:start="309:18" pos:end="309:18">(</operator><name pos:start="309:19" pos:end="309:25">samples</name><operator pos:start="309:26" pos:end="309:27">++</operator><operator pos:start="309:28" pos:end="309:28">)</operator> <operator pos:start="309:30" pos:end="309:30">=</operator> <name pos:start="309:32" pos:end="309:47"><name pos:start="309:32" pos:end="309:32">s</name><operator pos:start="309:33" pos:end="309:34">-&gt;</operator><name pos:start="309:35" pos:end="309:41">decoded</name><index pos:start="309:42" pos:end="309:44">[<expr pos:start="309:43" pos:end="309:43"><literal type="number" pos:start="309:43" pos:end="309:43">1</literal></expr>]</index><index pos:start="309:45" pos:end="309:47">[<expr pos:start="309:46" pos:end="309:46"><name pos:start="309:46" pos:end="309:46">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="313:13" pos:end="313:18">break;</break>

        <case pos:start="315:9" pos:end="315:22">case <expr pos:start="315:14" pos:end="315:21"><name pos:start="315:14" pos:end="315:21">MID_SIDE</name></expr>:</case>

            <expr_stmt pos:start="317:13" pos:end="317:37"><expr pos:start="317:13" pos:end="317:36"><call pos:start="317:13" pos:end="317:36"><name pos:start="317:13" pos:end="317:18">assert</name><argument_list pos:start="317:19" pos:end="317:36">(<argument pos:start="317:20" pos:end="317:35"><expr pos:start="317:20" pos:end="317:35"><name pos:start="317:20" pos:end="317:30"><name pos:start="317:20" pos:end="317:20">s</name><operator pos:start="317:21" pos:end="317:22">-&gt;</operator><name pos:start="317:23" pos:end="317:30">channels</name></name> <operator pos:start="317:32" pos:end="317:33">==</operator> <literal type="number" pos:start="317:35" pos:end="317:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="319:13" pos:end="355:13">for <control pos:start="319:17" pos:end="319:46">(<init pos:start="319:18" pos:end="319:23"><expr pos:start="319:18" pos:end="319:22"><name pos:start="319:18" pos:end="319:18">i</name> <operator pos:start="319:20" pos:end="319:20">=</operator> <literal type="number" pos:start="319:22" pos:end="319:22">0</literal></expr>;</init> <condition pos:start="319:25" pos:end="319:41"><expr pos:start="319:25" pos:end="319:40"><name pos:start="319:25" pos:end="319:25">i</name> <operator pos:start="319:27" pos:end="319:27">&lt;</operator> <name pos:start="319:29" pos:end="319:40"><name pos:start="319:29" pos:end="319:29">s</name><operator pos:start="319:30" pos:end="319:31">-&gt;</operator><name pos:start="319:32" pos:end="319:40">blocksize</name></name></expr>;</condition> <incr pos:start="319:43" pos:end="319:45"><expr pos:start="319:43" pos:end="319:45"><name pos:start="319:43" pos:end="319:43">i</name><operator pos:start="319:44" pos:end="319:45">++</operator></expr></incr>)</control>

            <block pos:start="321:13" pos:end="355:13">{<block_content pos:start="323:17" pos:end="354:0">

                <decl_stmt pos:start="323:17" pos:end="323:30"><decl pos:start="323:17" pos:end="323:23"><type pos:start="323:17" pos:end="323:19"><name pos:start="323:17" pos:end="323:19">int</name></type> <name pos:start="323:21" pos:end="323:23">mid</name></decl>, <decl pos:start="323:26" pos:end="323:29"><type ref="prev" pos:start="323:17" pos:end="323:19"/><name pos:start="323:26" pos:end="323:29">side</name></decl>;</decl_stmt>

                <expr_stmt pos:start="325:17" pos:end="325:39"><expr pos:start="325:17" pos:end="325:38"><name pos:start="325:17" pos:end="325:19">mid</name> <operator pos:start="325:21" pos:end="325:21">=</operator> <name pos:start="325:23" pos:end="325:38"><name pos:start="325:23" pos:end="325:23">s</name><operator pos:start="325:24" pos:end="325:25">-&gt;</operator><name pos:start="325:26" pos:end="325:32">decoded</name><index pos:start="325:33" pos:end="325:35">[<expr pos:start="325:34" pos:end="325:34"><literal type="number" pos:start="325:34" pos:end="325:34">0</literal></expr>]</index><index pos:start="325:36" pos:end="325:38">[<expr pos:start="325:37" pos:end="325:37"><name pos:start="325:37" pos:end="325:37">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="332:0"><expr pos:start="327:17" pos:end="327:39"><name pos:start="327:17" pos:end="327:20">side</name> <operator pos:start="327:22" pos:end="327:22">=</operator> <name pos:start="327:24" pos:end="327:39"><name pos:start="327:24" pos:end="327:24">s</name><operator pos:start="327:25" pos:end="327:26">-&gt;</operator><name pos:start="327:27" pos:end="327:33">decoded</name><index pos:start="327:34" pos:end="327:36">[<expr pos:start="327:35" pos:end="327:35"><literal type="number" pos:start="327:35" pos:end="327:35">1</literal></expr>]</index><index pos:start="327:37" pos:end="327:39">[<expr pos:start="327:38" pos:end="327:38"><name pos:start="327:38" pos:end="327:38">i</name></expr>]</index></name></expr>;</expr_stmt>



<cpp:if pos:start="331:1" pos:end="331:5">#<cpp:directive pos:start="331:2" pos:end="331:3">if</cpp:directive> <expr pos:start="331:5" pos:end="331:5"><literal type="number" pos:start="331:5" pos:end="331:5">1</literal></expr></cpp:if> <comment type="line" pos:start="331:7" pos:end="331:66">//needs to be checked but IMHO it should be binary identical</comment>

                <expr_stmt pos:start="333:17" pos:end="333:31"><expr pos:start="333:17" pos:end="333:30"><name pos:start="333:17" pos:end="333:19">mid</name> <operator pos:start="333:21" pos:end="333:22">-=</operator> <name pos:start="333:24" pos:end="333:27">side</name><operator pos:start="333:28" pos:end="333:29">&gt;&gt;</operator><literal type="number" pos:start="333:30" pos:end="333:30">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:42"><expr pos:start="335:17" pos:end="335:41"><operator pos:start="335:17" pos:end="335:17">*</operator><operator pos:start="335:18" pos:end="335:18">(</operator><name pos:start="335:19" pos:end="335:25">samples</name><operator pos:start="335:26" pos:end="335:27">++</operator><operator pos:start="335:28" pos:end="335:28">)</operator> <operator pos:start="335:30" pos:end="335:30">=</operator> <name pos:start="335:32" pos:end="335:34">mid</name> <operator pos:start="335:36" pos:end="335:36">+</operator> <name pos:start="335:38" pos:end="335:41">side</name></expr>;</expr_stmt>

                <expr_stmt pos:start="337:17" pos:end="340:0"><expr pos:start="337:17" pos:end="337:34"><operator pos:start="337:17" pos:end="337:17">*</operator><operator pos:start="337:18" pos:end="337:18">(</operator><name pos:start="337:19" pos:end="337:25">samples</name><operator pos:start="337:26" pos:end="337:27">++</operator><operator pos:start="337:28" pos:end="337:28">)</operator> <operator pos:start="337:30" pos:end="337:30">=</operator> <name pos:start="337:32" pos:end="337:34">mid</name></expr>;</expr_stmt>

<cpp:else pos:start="339:1" pos:end="339:5">#<cpp:directive pos:start="339:2" pos:end="339:5">else</cpp:directive></cpp:else>

                

                <expr_stmt pos:start="343:17" pos:end="343:26"><expr pos:start="343:17" pos:end="343:25"><name pos:start="343:17" pos:end="343:19">mid</name> <operator pos:start="343:21" pos:end="343:23">&lt;&lt;=</operator> <literal type="number" pos:start="343:25" pos:end="343:25">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="345:17" pos:end="347:26"><if pos:start="345:17" pos:end="347:26">if <condition pos:start="345:20" pos:end="345:29">(<expr pos:start="345:21" pos:end="345:28"><name pos:start="345:21" pos:end="345:24">side</name> <operator pos:start="345:26" pos:end="345:26">&amp;</operator> <literal type="number" pos:start="345:28" pos:end="345:28">1</literal></expr>)</condition><block type="pseudo" pos:start="347:21" pos:end="347:26"><block_content pos:start="347:21" pos:end="347:26">

                    <expr_stmt pos:start="347:21" pos:end="347:26"><expr pos:start="347:21" pos:end="347:25"><name pos:start="347:21" pos:end="347:23">mid</name><operator pos:start="347:24" pos:end="347:25">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:49"><expr pos:start="349:17" pos:end="349:48"><operator pos:start="349:17" pos:end="349:17">*</operator><operator pos:start="349:18" pos:end="349:18">(</operator><name pos:start="349:19" pos:end="349:25">samples</name><operator pos:start="349:26" pos:end="349:27">++</operator><operator pos:start="349:28" pos:end="349:28">)</operator> <operator pos:start="349:30" pos:end="349:30">=</operator> <operator pos:start="349:32" pos:end="349:32">(</operator><name pos:start="349:33" pos:end="349:35">mid</name> <operator pos:start="349:37" pos:end="349:37">+</operator> <name pos:start="349:39" pos:end="349:42">side</name><operator pos:start="349:43" pos:end="349:43">)</operator> <operator pos:start="349:45" pos:end="349:46">&gt;&gt;</operator> <literal type="number" pos:start="349:48" pos:end="349:48">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="351:17" pos:end="354:0"><expr pos:start="351:17" pos:end="351:48"><operator pos:start="351:17" pos:end="351:17">*</operator><operator pos:start="351:18" pos:end="351:18">(</operator><name pos:start="351:19" pos:end="351:25">samples</name><operator pos:start="351:26" pos:end="351:27">++</operator><operator pos:start="351:28" pos:end="351:28">)</operator> <operator pos:start="351:30" pos:end="351:30">=</operator> <operator pos:start="351:32" pos:end="351:32">(</operator><name pos:start="351:33" pos:end="351:35">mid</name> <operator pos:start="351:37" pos:end="351:37">-</operator> <name pos:start="351:39" pos:end="351:42">side</name><operator pos:start="351:43" pos:end="351:43">)</operator> <operator pos:start="351:45" pos:end="351:46">&gt;&gt;</operator> <literal type="number" pos:start="351:48" pos:end="351:48">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="353:1" pos:end="353:6">#<cpp:directive pos:start="353:2" pos:end="353:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></for>

            <break pos:start="357:13" pos:end="357:18">break;</break>

    </block_content>}</block></switch>

<cpp:endif pos:start="361:1" pos:end="361:6">#<cpp:directive pos:start="361:2" pos:end="361:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="365:5" pos:end="365:52"><expr pos:start="365:5" pos:end="365:51"><operator pos:start="365:5" pos:end="365:5">*</operator><name pos:start="365:6" pos:end="365:14">data_size</name> <operator pos:start="365:16" pos:end="365:16">=</operator> <operator pos:start="365:18" pos:end="365:18">(</operator><name pos:start="365:19" pos:end="365:24">int8_t</name> <operator pos:start="365:26" pos:end="365:26">*</operator><operator pos:start="365:27" pos:end="365:27">)</operator><name pos:start="365:28" pos:end="365:34">samples</name> <operator pos:start="365:36" pos:end="365:36">-</operator> <operator pos:start="365:38" pos:end="365:38">(</operator><name pos:start="365:39" pos:end="365:44">int8_t</name> <operator pos:start="365:46" pos:end="365:46">*</operator><operator pos:start="365:47" pos:end="365:47">)</operator><name pos:start="365:48" pos:end="365:51">data</name></expr>;</expr_stmt>

<comment type="line" pos:start="367:1" pos:end="367:68">//    av_log(s-&gt;avctx, AV_LOG_DEBUG, "data size: %d\n", *data_size);</comment>



<comment type="line" pos:start="371:1" pos:end="371:39">//    s-&gt;last_blocksize = s-&gt;blocksize;</comment>

<label pos:start="373:1" pos:end="373:4"><name pos:start="373:1" pos:end="373:3">end</name>:</label>

    <expr_stmt pos:start="375:5" pos:end="375:36"><expr pos:start="375:5" pos:end="375:35"><name pos:start="375:5" pos:end="375:5">i</name><operator pos:start="375:6" pos:end="375:6">=</operator> <operator pos:start="375:8" pos:end="375:8">(</operator><call pos:start="375:9" pos:end="375:30"><name pos:start="375:9" pos:end="375:22">get_bits_count</name><argument_list pos:start="375:23" pos:end="375:30">(<argument pos:start="375:24" pos:end="375:29"><expr pos:start="375:24" pos:end="375:29"><operator pos:start="375:24" pos:end="375:24">&amp;</operator><name pos:start="375:25" pos:end="375:29"><name pos:start="375:25" pos:end="375:25">s</name><operator pos:start="375:26" pos:end="375:27">-&gt;</operator><name pos:start="375:28" pos:end="375:29">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="375:31" pos:end="375:31">+</operator><literal type="number" pos:start="375:32" pos:end="375:32">7</literal><operator pos:start="375:33" pos:end="375:33">)</operator><operator pos:start="375:34" pos:end="375:34">/</operator><literal type="number" pos:start="375:35" pos:end="375:35">8</literal></expr>;</expr_stmt><empty_stmt pos:start="375:37" pos:end="375:37">;</empty_stmt>

    <if_stmt pos:start="377:5" pos:end="387:5"><if pos:start="377:5" pos:end="387:5">if<condition pos:start="377:7" pos:end="377:20">(<expr pos:start="377:8" pos:end="377:19"><name pos:start="377:8" pos:end="377:8">i</name> <operator pos:start="377:10" pos:end="377:10">&gt;</operator> <name pos:start="377:12" pos:end="377:19">buf_size</name></expr>)</condition><block pos:start="377:21" pos:end="387:5">{<block_content pos:start="379:9" pos:end="385:18">

        <expr_stmt pos:start="379:9" pos:end="379:71"><expr pos:start="379:9" pos:end="379:70"><call pos:start="379:9" pos:end="379:70"><name pos:start="379:9" pos:end="379:14">av_log</name><argument_list pos:start="379:15" pos:end="379:70">(<argument pos:start="379:16" pos:end="379:23"><expr pos:start="379:16" pos:end="379:23"><name pos:start="379:16" pos:end="379:23"><name pos:start="379:16" pos:end="379:16">s</name><operator pos:start="379:17" pos:end="379:18">-&gt;</operator><name pos:start="379:19" pos:end="379:23">avctx</name></name></expr></argument>, <argument pos:start="379:26" pos:end="379:37"><expr pos:start="379:26" pos:end="379:37"><name pos:start="379:26" pos:end="379:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="379:40" pos:end="379:55"><expr pos:start="379:40" pos:end="379:55"><literal type="string" pos:start="379:40" pos:end="379:55">"overread: %d\n"</literal></expr></argument>, <argument pos:start="379:58" pos:end="379:69"><expr pos:start="379:58" pos:end="379:69"><name pos:start="379:58" pos:end="379:58">i</name> <operator pos:start="379:60" pos:end="379:60">-</operator> <name pos:start="379:62" pos:end="379:69">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="381:9" pos:end="381:28"><expr pos:start="381:9" pos:end="381:27"><name pos:start="381:9" pos:end="381:25"><name pos:start="381:9" pos:end="381:9">s</name><operator pos:start="381:10" pos:end="381:11">-&gt;</operator><name pos:start="381:12" pos:end="381:25">bitstream_size</name></name><operator pos:start="381:26" pos:end="381:26">=</operator><literal type="number" pos:start="381:27" pos:end="381:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:29"><expr pos:start="383:9" pos:end="383:28"><name pos:start="383:9" pos:end="383:26"><name pos:start="383:9" pos:end="383:9">s</name><operator pos:start="383:10" pos:end="383:11">-&gt;</operator><name pos:start="383:12" pos:end="383:26">bitstream_index</name></name><operator pos:start="383:27" pos:end="383:27">=</operator><literal type="number" pos:start="383:28" pos:end="383:28">0</literal></expr>;</expr_stmt>

        <return pos:start="385:9" pos:end="385:18">return <expr pos:start="385:16" pos:end="385:17"><operator pos:start="385:16" pos:end="385:16">-</operator><literal type="number" pos:start="385:17" pos:end="385:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="391:5" pos:end="401:17"><if pos:start="391:5" pos:end="399:5">if<condition pos:start="391:7" pos:end="391:25">(<expr pos:start="391:8" pos:end="391:24"><name pos:start="391:8" pos:end="391:24"><name pos:start="391:8" pos:end="391:8">s</name><operator pos:start="391:9" pos:end="391:10">-&gt;</operator><name pos:start="391:11" pos:end="391:24">bitstream_size</name></name></expr>)</condition><block pos:start="391:26" pos:end="399:5">{<block_content pos:start="393:9" pos:end="397:30">

        <expr_stmt pos:start="393:9" pos:end="393:32"><expr pos:start="393:9" pos:end="393:31"><name pos:start="393:9" pos:end="393:26"><name pos:start="393:9" pos:end="393:9">s</name><operator pos:start="393:10" pos:end="393:11">-&gt;</operator><name pos:start="393:12" pos:end="393:26">bitstream_index</name></name> <operator pos:start="393:28" pos:end="393:29">+=</operator> <name pos:start="393:31" pos:end="393:31">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="395:9" pos:end="395:32"><expr pos:start="395:9" pos:end="395:31"><name pos:start="395:9" pos:end="395:25"><name pos:start="395:9" pos:end="395:9">s</name><operator pos:start="395:10" pos:end="395:11">-&gt;</operator><name pos:start="395:12" pos:end="395:25">bitstream_size</name></name>  <operator pos:start="395:28" pos:end="395:29">-=</operator> <name pos:start="395:31" pos:end="395:31">i</name></expr>;</expr_stmt>

        <return pos:start="397:9" pos:end="397:30">return <expr pos:start="397:16" pos:end="397:29"><name pos:start="397:16" pos:end="397:29">input_buf_size</name></expr>;</return>

    </block_content>}</block></if><else pos:start="399:6" pos:end="401:17">else<block type="pseudo" pos:start="401:9" pos:end="401:17"><block_content pos:start="401:9" pos:end="401:17"> 

        <return pos:start="401:9" pos:end="401:17">return <expr pos:start="401:16" pos:end="401:16"><name pos:start="401:16" pos:end="401:16">i</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
