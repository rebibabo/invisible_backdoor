<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6238.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:15">udp_output2</name><parameter_list pos:start="1:16" pos:end="5:26">(<parameter pos:start="1:17" pos:end="1:33"><decl pos:start="1:17" pos:end="1:33"><type pos:start="1:17" pos:end="1:33"><name pos:start="1:17" pos:end="1:29"><name pos:start="1:17" pos:end="1:22">struct</name> <name pos:start="1:24" pos:end="1:29">socket</name></name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:33">so</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:46"><name pos:start="1:36" pos:end="1:41">struct</name> <name pos:start="1:43" pos:end="1:46">mbuf</name></name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">m</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:41"><decl pos:start="3:17" pos:end="3:41"><type pos:start="3:17" pos:end="3:41"><name pos:start="3:17" pos:end="3:34"><name pos:start="3:17" pos:end="3:22">struct</name> <name pos:start="3:24" pos:end="3:34">sockaddr_in</name></name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:41">saddr</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:68"><decl pos:start="3:44" pos:end="3:68"><type pos:start="3:44" pos:end="3:68"><name pos:start="3:44" pos:end="3:61"><name pos:start="3:44" pos:end="3:49">struct</name> <name pos:start="3:51" pos:end="3:61">sockaddr_in</name></name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:68">daddr</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:25"><decl pos:start="5:17" pos:end="5:25"><type pos:start="5:17" pos:end="5:25"><name pos:start="5:17" pos:end="5:19">int</name></type> <name pos:start="5:21" pos:end="5:25">iptos</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="99:1">{<block_content pos:start="9:9" pos:end="97:23">

	<decl_stmt pos:start="9:9" pos:end="9:37"><decl pos:start="9:9" pos:end="9:36"><type pos:start="9:9" pos:end="9:34"><specifier pos:start="9:9" pos:end="9:16">register</specifier> <name pos:start="9:18" pos:end="9:32"><name pos:start="9:18" pos:end="9:23">struct</name> <name pos:start="9:25" pos:end="9:32">udpiphdr</name></name> <modifier pos:start="9:34" pos:end="9:34">*</modifier></type><name pos:start="9:35" pos:end="9:36">ui</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:22"><decl pos:start="11:9" pos:end="11:21"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:17">error</name> <init pos:start="11:19" pos:end="11:21">= <expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></init></decl>;</decl_stmt>



	<expr_stmt pos:start="15:9" pos:end="15:33"><expr pos:start="15:9" pos:end="15:32"><call pos:start="15:9" pos:end="15:32"><name pos:start="15:9" pos:end="15:18">DEBUG_CALL</name><argument_list pos:start="15:19" pos:end="15:32">(<argument pos:start="15:20" pos:end="15:31"><expr pos:start="15:20" pos:end="15:31"><literal type="string" pos:start="15:20" pos:end="15:31">"udp_output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="17:9" pos:end="17:33"><expr pos:start="17:9" pos:end="17:32"><call pos:start="17:9" pos:end="17:32"><name pos:start="17:9" pos:end="17:17">DEBUG_ARG</name><argument_list pos:start="17:18" pos:end="17:32">(<argument pos:start="17:19" pos:end="17:27"><expr pos:start="17:19" pos:end="17:27"><literal type="string" pos:start="17:19" pos:end="17:27">"so = %p"</literal></expr></argument>, <argument pos:start="17:30" pos:end="17:31"><expr pos:start="17:30" pos:end="17:31"><name pos:start="17:30" pos:end="17:31">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="19:9" pos:end="19:31"><expr pos:start="19:9" pos:end="19:30"><call pos:start="19:9" pos:end="19:30"><name pos:start="19:9" pos:end="19:17">DEBUG_ARG</name><argument_list pos:start="19:18" pos:end="19:30">(<argument pos:start="19:19" pos:end="19:26"><expr pos:start="19:19" pos:end="19:26"><literal type="string" pos:start="19:19" pos:end="19:26">"m = %p"</literal></expr></argument>, <argument pos:start="19:29" pos:end="19:29"><expr pos:start="19:29" pos:end="19:29"><name pos:start="19:29" pos:end="19:29">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="21:9" pos:end="21:63"><expr pos:start="21:9" pos:end="21:62"><call pos:start="21:9" pos:end="21:62"><name pos:start="21:9" pos:end="21:17">DEBUG_ARG</name><argument_list pos:start="21:18" pos:end="21:62">(<argument pos:start="21:19" pos:end="21:31"><expr pos:start="21:19" pos:end="21:31"><literal type="string" pos:start="21:19" pos:end="21:31">"saddr = %lx"</literal></expr></argument>, <argument pos:start="21:34" pos:end="21:61"><expr pos:start="21:34" pos:end="21:61"><operator pos:start="21:34" pos:end="21:34">(</operator><name pos:start="21:35" pos:end="21:38">long</name><operator pos:start="21:39" pos:end="21:39">)</operator><name pos:start="21:40" pos:end="21:61"><name pos:start="21:40" pos:end="21:44">saddr</name><operator pos:start="21:45" pos:end="21:46">-&gt;</operator><name pos:start="21:47" pos:end="21:54">sin_addr</name><operator pos:start="21:55" pos:end="21:55">.</operator><name pos:start="21:56" pos:end="21:61">s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="23:9" pos:end="23:63"><expr pos:start="23:9" pos:end="23:62"><call pos:start="23:9" pos:end="23:62"><name pos:start="23:9" pos:end="23:17">DEBUG_ARG</name><argument_list pos:start="23:18" pos:end="23:62">(<argument pos:start="23:19" pos:end="23:31"><expr pos:start="23:19" pos:end="23:31"><literal type="string" pos:start="23:19" pos:end="23:31">"daddr = %lx"</literal></expr></argument>, <argument pos:start="23:34" pos:end="23:61"><expr pos:start="23:34" pos:end="23:61"><operator pos:start="23:34" pos:end="23:34">(</operator><name pos:start="23:35" pos:end="23:38">long</name><operator pos:start="23:39" pos:end="23:39">)</operator><name pos:start="23:40" pos:end="23:61"><name pos:start="23:40" pos:end="23:44">daddr</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:54">sin_addr</name><operator pos:start="23:55" pos:end="23:55">.</operator><name pos:start="23:56" pos:end="23:61">s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="27:9" pos:end="31:11">/*

	 * Adjust for header

	 */</comment>

	<expr_stmt pos:start="33:9" pos:end="33:45"><expr pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:9">m</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:17">m_data</name></name> <operator pos:start="33:19" pos:end="33:20">-=</operator> <sizeof pos:start="33:22" pos:end="33:44">sizeof<argument_list pos:start="33:28" pos:end="33:44">(<argument pos:start="33:29" pos:end="33:43"><expr pos:start="33:29" pos:end="33:43">struct <name pos:start="33:36" pos:end="33:43">udpiphdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:9">m</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:16">m_len</name></name> <operator pos:start="35:18" pos:end="35:19">+=</operator> <sizeof pos:start="35:21" pos:end="35:43">sizeof<argument_list pos:start="35:27" pos:end="35:43">(<argument pos:start="35:28" pos:end="35:42"><expr pos:start="35:28" pos:end="35:42">struct <name pos:start="35:35" pos:end="35:42">udpiphdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



	<comment type="block" pos:start="39:9" pos:end="45:11">/*

	 * Fill in mbuf with extended UDP header

	 * and addresses and length put into network format.

	 */</comment>

	<expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:10">ui</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <call pos:start="47:14" pos:end="47:39"><name pos:start="47:14" pos:end="47:17">mtod</name><argument_list pos:start="47:18" pos:end="47:39">(<argument pos:start="47:19" pos:end="47:19"><expr pos:start="47:19" pos:end="47:19"><name pos:start="47:19" pos:end="47:19">m</name></expr></argument>, <argument pos:start="47:22" pos:end="47:38"><expr pos:start="47:22" pos:end="47:38">struct <name pos:start="47:29" pos:end="47:36">udpiphdr</name> <operator pos:start="47:38" pos:end="47:38">*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:59"><expr pos:start="49:5" pos:end="49:58"><call pos:start="49:5" pos:end="49:58"><name pos:start="49:5" pos:end="49:10">memset</name><argument_list pos:start="49:11" pos:end="49:58">(<argument pos:start="49:12" pos:end="49:28"><expr pos:start="49:12" pos:end="49:28"><operator pos:start="49:12" pos:end="49:12">&amp;</operator><name pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:14">ui</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:20">ui_i</name><operator pos:start="49:21" pos:end="49:21">.</operator><name pos:start="49:22" pos:end="49:28">ih_mbuf</name></name></expr></argument>, <argument pos:start="49:31" pos:end="49:31"><expr pos:start="49:31" pos:end="49:31"><literal type="number" pos:start="49:31" pos:end="49:31">0</literal></expr></argument> , <argument pos:start="49:35" pos:end="49:57"><expr pos:start="49:35" pos:end="49:57"><sizeof pos:start="49:35" pos:end="49:57">sizeof<argument_list pos:start="49:41" pos:end="49:57">(<argument pos:start="49:42" pos:end="49:56"><expr pos:start="49:42" pos:end="49:56">struct <name pos:start="49:49" pos:end="49:56">mbuf_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="51:9" pos:end="51:22"><expr pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:10">ui</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:17">ui_x1</name></name> <operator pos:start="51:19" pos:end="51:19">=</operator> <literal type="number" pos:start="51:21" pos:end="51:21">0</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:10">ui</name><operator pos:start="53:11" pos:end="53:12">-&gt;</operator><name pos:start="53:13" pos:end="53:17">ui_pr</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:31">IPPROTO_UDP</name></expr>;</expr_stmt>

	<expr_stmt pos:start="55:9" pos:end="55:57"><expr pos:start="55:9" pos:end="55:56"><name pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:10">ui</name><operator pos:start="55:11" pos:end="55:12">-&gt;</operator><name pos:start="55:13" pos:end="55:18">ui_len</name></name> <operator pos:start="55:20" pos:end="55:20">=</operator> <call pos:start="55:22" pos:end="55:56"><name pos:start="55:22" pos:end="55:26">htons</name><argument_list pos:start="55:27" pos:end="55:56">(<argument pos:start="55:28" pos:end="55:55"><expr pos:start="55:28" pos:end="55:55"><name pos:start="55:28" pos:end="55:35"><name pos:start="55:28" pos:end="55:28">m</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:35">m_len</name></name> <operator pos:start="55:37" pos:end="55:37">-</operator> <sizeof pos:start="55:39" pos:end="55:55">sizeof<argument_list pos:start="55:45" pos:end="55:55">(<argument pos:start="55:46" pos:end="55:54"><expr pos:start="55:46" pos:end="55:54">struct <name pos:start="55:53" pos:end="55:54">ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" pos:start="57:9" pos:end="57:85">/* XXXXX Check for from-one-location sockets, or from-any-location sockets */</comment>

        <expr_stmt pos:start="59:9" pos:end="59:37"><expr pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:10">ui</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:18">ui_src</name></name> <operator pos:start="59:20" pos:end="59:20">=</operator> <name pos:start="59:22" pos:end="59:36"><name pos:start="59:22" pos:end="59:26">saddr</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:36">sin_addr</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:10">ui</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:18">ui_dst</name></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <name pos:start="61:22" pos:end="61:36"><name pos:start="61:22" pos:end="61:26">daddr</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:36">sin_addr</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="63:9" pos:end="63:39"><expr pos:start="63:9" pos:end="63:38"><name pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:10">ui</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:20">ui_sport</name></name> <operator pos:start="63:22" pos:end="63:22">=</operator> <name pos:start="63:24" pos:end="63:38"><name pos:start="63:24" pos:end="63:28">saddr</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:38">sin_port</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="65:9" pos:end="65:39"><expr pos:start="65:9" pos:end="65:38"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:10">ui</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:20">ui_dport</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:38"><name pos:start="65:24" pos:end="65:28">daddr</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:38">sin_port</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="67:9" pos:end="67:33"><expr pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:10">ui</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:19">ui_ulen</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:32"><name pos:start="67:23" pos:end="67:24">ui</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:32">ui_len</name></name></expr>;</expr_stmt>



	<comment type="block" pos:start="71:9" pos:end="75:11">/*

	 * Stuff checksum and output datagram.

	 */</comment>

	<expr_stmt pos:start="77:9" pos:end="77:23"><expr pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:10">ui</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:18">ui_sum</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <literal type="number" pos:start="77:22" pos:end="77:22">0</literal></expr>;</expr_stmt>

	<if_stmt pos:start="79:9" pos:end="81:36"><if pos:start="79:9" pos:end="81:36">if <condition pos:start="79:12" pos:end="79:51">(<expr pos:start="79:13" pos:end="79:50"><operator pos:start="79:13" pos:end="79:13">(</operator><name pos:start="79:14" pos:end="79:23"><name pos:start="79:14" pos:end="79:15">ui</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:23">ui_sum</name></name> <operator pos:start="79:25" pos:end="79:25">=</operator> <call pos:start="79:27" pos:end="79:44"><name pos:start="79:27" pos:end="79:31">cksum</name><argument_list pos:start="79:32" pos:end="79:44">(<argument pos:start="79:33" pos:end="79:33"><expr pos:start="79:33" pos:end="79:33"><name pos:start="79:33" pos:end="79:33">m</name></expr></argument>, <argument pos:start="79:36" pos:end="79:43"><expr pos:start="79:36" pos:end="79:43"><name pos:start="79:36" pos:end="79:43"><name pos:start="79:36" pos:end="79:36">m</name><operator pos:start="79:37" pos:end="79:38">-&gt;</operator><name pos:start="79:39" pos:end="79:43">m_len</name></name></expr></argument>)</argument_list></call><operator pos:start="79:45" pos:end="79:45">)</operator> <operator pos:start="79:47" pos:end="79:48">==</operator> <literal type="number" pos:start="79:50" pos:end="79:50">0</literal></expr>)</condition><block type="pseudo" pos:start="81:17" pos:end="81:36"><block_content pos:start="81:17" pos:end="81:36">

		<expr_stmt pos:start="81:17" pos:end="81:36"><expr pos:start="81:17" pos:end="81:35"><name pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:18">ui</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:26">ui_sum</name></name> <operator pos:start="81:28" pos:end="81:28">=</operator> <literal type="number" pos:start="81:30" pos:end="81:35">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt pos:start="83:9" pos:end="83:45"><expr pos:start="83:9" pos:end="83:44"><operator pos:start="83:9" pos:end="83:9">(</operator><operator pos:start="83:10" pos:end="83:10">(</operator>struct <name pos:start="83:18" pos:end="83:19">ip</name> <operator pos:start="83:21" pos:end="83:21">*</operator><operator pos:start="83:22" pos:end="83:22">)</operator><name pos:start="83:23" pos:end="83:24">ui</name><operator pos:start="83:25" pos:end="83:25">)</operator><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:33">ip_len</name> <operator pos:start="83:35" pos:end="83:35">=</operator> <name pos:start="83:37" pos:end="83:44"><name pos:start="83:37" pos:end="83:37">m</name><operator pos:start="83:38" pos:end="83:39">-&gt;</operator><name pos:start="83:40" pos:end="83:44">m_len</name></name></expr>;</expr_stmt>



	<expr_stmt pos:start="87:9" pos:end="87:45"><expr pos:start="87:9" pos:end="87:44"><operator pos:start="87:9" pos:end="87:9">(</operator><operator pos:start="87:10" pos:end="87:10">(</operator>struct <name pos:start="87:18" pos:end="87:19">ip</name> <operator pos:start="87:21" pos:end="87:21">*</operator><operator pos:start="87:22" pos:end="87:22">)</operator><name pos:start="87:23" pos:end="87:24">ui</name><operator pos:start="87:25" pos:end="87:25">)</operator><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:33">ip_ttl</name> <operator pos:start="87:35" pos:end="87:35">=</operator> <name pos:start="87:37" pos:end="87:44">IPDEFTTL</name></expr>;</expr_stmt>

	<expr_stmt pos:start="89:9" pos:end="89:42"><expr pos:start="89:9" pos:end="89:41"><operator pos:start="89:9" pos:end="89:9">(</operator><operator pos:start="89:10" pos:end="89:10">(</operator>struct <name pos:start="89:18" pos:end="89:19">ip</name> <operator pos:start="89:21" pos:end="89:21">*</operator><operator pos:start="89:22" pos:end="89:22">)</operator><name pos:start="89:23" pos:end="89:24">ui</name><operator pos:start="89:25" pos:end="89:25">)</operator><operator pos:start="89:26" pos:end="89:27">-&gt;</operator><name pos:start="89:28" pos:end="89:33">ip_tos</name> <operator pos:start="89:35" pos:end="89:35">=</operator> <name pos:start="89:37" pos:end="89:41">iptos</name></expr>;</expr_stmt>



	<expr_stmt pos:start="93:9" pos:end="93:33"><expr pos:start="93:9" pos:end="93:32"><name pos:start="93:9" pos:end="93:13">error</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <call pos:start="93:17" pos:end="93:32"><name pos:start="93:17" pos:end="93:25">ip_output</name><argument_list pos:start="93:26" pos:end="93:32">(<argument pos:start="93:27" pos:end="93:28"><expr pos:start="93:27" pos:end="93:28"><name pos:start="93:27" pos:end="93:28">so</name></expr></argument>, <argument pos:start="93:31" pos:end="93:31"><expr pos:start="93:31" pos:end="93:31"><name pos:start="93:31" pos:end="93:31">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<return pos:start="97:9" pos:end="97:23">return <expr pos:start="97:16" pos:end="97:22"><operator pos:start="97:16" pos:end="97:16">(</operator><name pos:start="97:17" pos:end="97:21">error</name><operator pos:start="97:22" pos:end="97:22">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
