<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13956.c" pos:tabs="8"><function pos:start="1:1" pos:end="431:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">eepro100_cu_command</name><parameter_list pos:start="1:32" pos:end="1:63">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:49"><name pos:start="1:33" pos:end="1:45">EEPRO100State</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type> <name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:58">uint8_t</name></type> <name pos:start="1:60" pos:end="1:62">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="431:1">{<block_content pos:start="5:5" pos:end="429:5">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17">eepro100_tx_t</name></type> <name pos:start="5:19" pos:end="5:20">tx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:23">cb_address</name></decl>;</decl_stmt>

    <switch pos:start="9:5" pos:end="429:5">switch <condition pos:start="9:12" pos:end="9:16">(<expr pos:start="9:13" pos:end="9:15"><name pos:start="9:13" pos:end="9:15">val</name></expr>)</condition> <block pos:start="9:18" pos:end="429:5">{<block_content pos:start="11:5" pos:end="427:40">

    <case pos:start="11:5" pos:end="11:16">case <expr pos:start="11:10" pos:end="11:15"><name pos:start="11:10" pos:end="11:15">CU_NOP</name></expr>:</case>

        <comment type="block" pos:start="13:9" pos:end="13:27">/* No operation. */</comment>

        <break pos:start="15:9" pos:end="15:14">break;</break>

    <case pos:start="17:5" pos:end="17:18">case <expr pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:17">CU_START</name></expr>:</case>

        <if_stmt pos:start="19:9" pos:end="31:9"><if pos:start="19:9" pos:end="31:9">if <condition pos:start="19:12" pos:end="19:39">(<expr pos:start="19:13" pos:end="19:38"><call pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:24">get_cu_state</name><argument_list pos:start="19:25" pos:end="19:27">(<argument pos:start="19:26" pos:end="19:26"><expr pos:start="19:26" pos:end="19:26"><name pos:start="19:26" pos:end="19:26">s</name></expr></argument>)</argument_list></call> <operator pos:start="19:29" pos:end="19:30">!=</operator> <name pos:start="19:32" pos:end="19:38">cu_idle</name></expr>)</condition> <block pos:start="19:41" pos:end="31:9">{<block_content pos:start="27:13" pos:end="27:79">

            <comment type="block" pos:start="21:13" pos:end="25:39">/* Intel documentation says that CU must be idle for the CU

             * start command. Intel driver for Linux also starts the CU

             * from suspended state. */</comment>

            <expr_stmt pos:start="27:13" pos:end="27:79"><expr pos:start="27:13" pos:end="27:78"><call pos:start="27:13" pos:end="27:78"><name pos:start="27:13" pos:end="27:18">logout</name><argument_list pos:start="27:19" pos:end="27:78">(<argument pos:start="27:20" pos:end="27:51"><expr pos:start="27:20" pos:end="27:51"><literal type="string" pos:start="27:20" pos:end="27:51">"CU state is %u, should be %u\n"</literal></expr></argument>, <argument pos:start="27:54" pos:end="27:68"><expr pos:start="27:54" pos:end="27:68"><call pos:start="27:54" pos:end="27:68"><name pos:start="27:54" pos:end="27:65">get_cu_state</name><argument_list pos:start="27:66" pos:end="27:68">(<argument pos:start="27:67" pos:end="27:67"><expr pos:start="27:67" pos:end="27:67"><name pos:start="27:67" pos:end="27:67">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:71" pos:end="27:77"><expr pos:start="27:71" pos:end="27:77"><name pos:start="27:71" pos:end="27:77">cu_idle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="29:13" pos:end="29:42">//~ assert(!"wrong CU state");</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:35"><expr pos:start="33:9" pos:end="33:34"><call pos:start="33:9" pos:end="33:34"><name pos:start="33:9" pos:end="33:20">set_cu_state</name><argument_list pos:start="33:21" pos:end="33:34">(<argument pos:start="33:22" pos:end="33:22"><expr pos:start="33:22" pos:end="33:22"><name pos:start="33:22" pos:end="33:22">s</name></expr></argument>, <argument pos:start="33:25" pos:end="33:33"><expr pos:start="33:25" pos:end="33:33"><name pos:start="33:25" pos:end="33:33">cu_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:20">cu_offset</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <name pos:start="35:24" pos:end="35:33"><name pos:start="35:24" pos:end="35:24">s</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:33">pointer</name></name></expr>;</expr_stmt>

      <label pos:start="37:7" pos:end="37:19"><name pos:start="37:7" pos:end="37:18">next_command</name>:</label>

        <expr_stmt pos:start="39:9" pos:end="39:47"><expr pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:18">cb_address</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:31"><name pos:start="39:22" pos:end="39:22">s</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:31">cu_base</name></name> <operator pos:start="39:33" pos:end="39:33">+</operator> <name pos:start="39:35" pos:end="39:46"><name pos:start="39:35" pos:end="39:35">s</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:46">cu_offset</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:75"><expr pos:start="41:9" pos:end="41:74"><call pos:start="41:9" pos:end="41:74"><name pos:start="41:9" pos:end="41:32">cpu_physical_memory_read</name><argument_list pos:start="41:33" pos:end="41:74">(<argument pos:start="41:34" pos:end="41:43"><expr pos:start="41:34" pos:end="41:43"><name pos:start="41:34" pos:end="41:43">cb_address</name></expr></argument>, <argument pos:start="41:46" pos:end="41:61"><expr pos:start="41:46" pos:end="41:61"><operator pos:start="41:46" pos:end="41:46">(</operator><name pos:start="41:47" pos:end="41:53">uint8_t</name> <operator pos:start="41:55" pos:end="41:55">*</operator><operator pos:start="41:56" pos:end="41:56">)</operator> <operator pos:start="41:58" pos:end="41:58">&amp;</operator> <name pos:start="41:60" pos:end="41:61">tx</name></expr></argument>, <argument pos:start="41:64" pos:end="41:73"><expr pos:start="41:64" pos:end="41:73"><sizeof pos:start="41:64" pos:end="41:73">sizeof<argument_list pos:start="41:70" pos:end="41:73">(<argument pos:start="41:71" pos:end="41:72"><expr pos:start="41:71" pos:end="41:72"><name pos:start="41:71" pos:end="41:72">tx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:49"><decl pos:start="43:9" pos:end="43:48"><type pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:16">uint16_t</name></type> <name pos:start="43:18" pos:end="43:23">status</name> <init pos:start="43:25" pos:end="43:48">= <expr pos:start="43:27" pos:end="43:48"><call pos:start="43:27" pos:end="43:48"><name pos:start="43:27" pos:end="43:37">le16_to_cpu</name><argument_list pos:start="43:38" pos:end="43:48">(<argument pos:start="43:39" pos:end="43:47"><expr pos:start="43:39" pos:end="43:47"><name pos:start="43:39" pos:end="43:47"><name pos:start="43:39" pos:end="43:40">tx</name><operator pos:start="43:41" pos:end="43:41">.</operator><name pos:start="43:42" pos:end="43:47">status</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:51"><decl pos:start="45:9" pos:end="45:50"><type pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:16">uint16_t</name></type> <name pos:start="45:18" pos:end="45:24">command</name> <init pos:start="45:26" pos:end="45:50">= <expr pos:start="45:28" pos:end="45:50"><call pos:start="45:28" pos:end="45:50"><name pos:start="45:28" pos:end="45:38">le16_to_cpu</name><argument_list pos:start="45:39" pos:end="45:50">(<argument pos:start="45:40" pos:end="45:49"><expr pos:start="45:40" pos:end="45:49"><name pos:start="45:40" pos:end="45:49"><name pos:start="45:40" pos:end="45:41">tx</name><operator pos:start="45:42" pos:end="45:42">.</operator><name pos:start="45:43" pos:end="45:49">command</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="47:9" pos:end="51:44"><expr pos:start="47:9" pos:end="51:43"><call pos:start="47:9" pos:end="51:43"><name pos:start="47:9" pos:end="47:14">logout</name>

            <argument_list pos:start="49:13" pos:end="51:43">(<argument pos:start="49:14" pos:end="49:82"><expr pos:start="49:14" pos:end="49:82"><literal type="string" pos:start="49:14" pos:end="49:82">"val=0x%02x (cu start), status=0x%04x, command=0x%04x, link=0x%08x\n"</literal></expr></argument>,

             <argument pos:start="51:14" pos:end="51:16"><expr pos:start="51:14" pos:end="51:16"><name pos:start="51:14" pos:end="51:16">val</name></expr></argument>, <argument pos:start="51:19" pos:end="51:24"><expr pos:start="51:19" pos:end="51:24"><name pos:start="51:19" pos:end="51:24">status</name></expr></argument>, <argument pos:start="51:27" pos:end="51:33"><expr pos:start="51:27" pos:end="51:33"><name pos:start="51:27" pos:end="51:33">command</name></expr></argument>, <argument pos:start="51:36" pos:end="51:42"><expr pos:start="51:36" pos:end="51:42"><name pos:start="51:36" pos:end="51:42"><name pos:start="51:36" pos:end="51:37">tx</name><operator pos:start="51:38" pos:end="51:38">.</operator><name pos:start="51:39" pos:end="51:42">link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:48"><decl pos:start="53:9" pos:end="53:47"><type pos:start="53:9" pos:end="53:12"><name pos:start="53:9" pos:end="53:12">bool</name></type> <name pos:start="53:14" pos:end="53:19">bit_el</name> <init pos:start="53:21" pos:end="53:47">= <expr pos:start="53:23" pos:end="53:47"><operator pos:start="53:23" pos:end="53:23">(</operator><operator pos:start="53:24" pos:end="53:24">(</operator><name pos:start="53:25" pos:end="53:31">command</name> <operator pos:start="53:33" pos:end="53:33">&amp;</operator> <literal type="number" pos:start="53:35" pos:end="53:40">0x8000</literal><operator pos:start="53:41" pos:end="53:41">)</operator> <operator pos:start="53:43" pos:end="53:44">!=</operator> <literal type="number" pos:start="53:46" pos:end="53:46">0</literal><operator pos:start="53:47" pos:end="53:47">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:47"><decl pos:start="55:9" pos:end="55:46"><type pos:start="55:9" pos:end="55:12"><name pos:start="55:9" pos:end="55:12">bool</name></type> <name pos:start="55:14" pos:end="55:18">bit_s</name> <init pos:start="55:20" pos:end="55:46">= <expr pos:start="55:22" pos:end="55:46"><operator pos:start="55:22" pos:end="55:22">(</operator><operator pos:start="55:23" pos:end="55:23">(</operator><name pos:start="55:24" pos:end="55:30">command</name> <operator pos:start="55:32" pos:end="55:32">&amp;</operator> <literal type="number" pos:start="55:34" pos:end="55:39">0x4000</literal><operator pos:start="55:40" pos:end="55:40">)</operator> <operator pos:start="55:42" pos:end="55:43">!=</operator> <literal type="number" pos:start="55:45" pos:end="55:45">0</literal><operator pos:start="55:46" pos:end="55:46">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:47"><decl pos:start="57:9" pos:end="57:46"><type pos:start="57:9" pos:end="57:12"><name pos:start="57:9" pos:end="57:12">bool</name></type> <name pos:start="57:14" pos:end="57:18">bit_i</name> <init pos:start="57:20" pos:end="57:46">= <expr pos:start="57:22" pos:end="57:46"><operator pos:start="57:22" pos:end="57:22">(</operator><operator pos:start="57:23" pos:end="57:23">(</operator><name pos:start="57:24" pos:end="57:30">command</name> <operator pos:start="57:32" pos:end="57:32">&amp;</operator> <literal type="number" pos:start="57:34" pos:end="57:39">0x2000</literal><operator pos:start="57:40" pos:end="57:40">)</operator> <operator pos:start="57:42" pos:end="57:43">!=</operator> <literal type="number" pos:start="57:45" pos:end="57:45">0</literal><operator pos:start="57:46" pos:end="57:46">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:48"><decl pos:start="59:9" pos:end="59:47"><type pos:start="59:9" pos:end="59:12"><name pos:start="59:9" pos:end="59:12">bool</name></type> <name pos:start="59:14" pos:end="59:19">bit_nc</name> <init pos:start="59:21" pos:end="59:47">= <expr pos:start="59:23" pos:end="59:47"><operator pos:start="59:23" pos:end="59:23">(</operator><operator pos:start="59:24" pos:end="59:24">(</operator><name pos:start="59:25" pos:end="59:31">command</name> <operator pos:start="59:33" pos:end="59:33">&amp;</operator> <literal type="number" pos:start="59:35" pos:end="59:40">0x0010</literal><operator pos:start="59:41" pos:end="59:41">)</operator> <operator pos:start="59:43" pos:end="59:44">!=</operator> <literal type="number" pos:start="59:46" pos:end="59:46">0</literal><operator pos:start="59:47" pos:end="59:47">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:28"><decl pos:start="61:9" pos:end="61:27"><type pos:start="61:9" pos:end="61:12"><name pos:start="61:9" pos:end="61:12">bool</name></type> <name pos:start="61:14" pos:end="61:20">success</name> <init pos:start="61:22" pos:end="61:27">= <expr pos:start="61:24" pos:end="61:27"><name pos:start="61:24" pos:end="61:27">true</name></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="63:9" pos:end="63:52">//~ bool bit_sf = ((command &amp; 0x0008) != 0);</comment>

        <decl_stmt pos:start="65:9" pos:end="65:40"><decl pos:start="65:9" pos:end="65:39"><type pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">uint16_t</name></type> <name pos:start="65:18" pos:end="65:20">cmd</name> <init pos:start="65:22" pos:end="65:39">= <expr pos:start="65:24" pos:end="65:39"><name pos:start="65:24" pos:end="65:30">command</name> <operator pos:start="65:32" pos:end="65:32">&amp;</operator> <literal type="number" pos:start="65:34" pos:end="65:39">0x0007</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:44"><expr pos:start="67:9" pos:end="67:43"><name pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:20">cu_offset</name></name> <operator pos:start="67:22" pos:end="67:22">=</operator> <call pos:start="67:24" pos:end="67:43"><name pos:start="67:24" pos:end="67:34">le32_to_cpu</name><argument_list pos:start="67:35" pos:end="67:43">(<argument pos:start="67:36" pos:end="67:42"><expr pos:start="67:36" pos:end="67:42"><name pos:start="67:36" pos:end="67:42"><name pos:start="67:36" pos:end="67:37">tx</name><operator pos:start="67:38" pos:end="67:38">.</operator><name pos:start="67:39" pos:end="67:42">link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="69:9" pos:end="301:9">switch <condition pos:start="69:16" pos:end="69:20">(<expr pos:start="69:17" pos:end="69:19"><name pos:start="69:17" pos:end="69:19">cmd</name></expr>)</condition> <block pos:start="69:22" pos:end="301:9">{<block_content pos:start="71:9" pos:end="299:18">

        <case pos:start="71:9" pos:end="71:20">case <expr pos:start="71:14" pos:end="71:19"><name pos:start="71:14" pos:end="71:19">CmdNOp</name></expr>:</case>

            <comment type="block" pos:start="73:13" pos:end="73:29">/* Do nothing. */</comment>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:24">case <expr pos:start="77:14" pos:end="77:23"><name pos:start="77:14" pos:end="77:23">CmdIASetup</name></expr>:</case>

            <expr_stmt pos:start="79:13" pos:end="79:72"><expr pos:start="79:13" pos:end="79:71"><call pos:start="79:13" pos:end="79:71"><name pos:start="79:13" pos:end="79:36">cpu_physical_memory_read</name><argument_list pos:start="79:37" pos:end="79:71">(<argument pos:start="79:38" pos:end="79:51"><expr pos:start="79:38" pos:end="79:51"><name pos:start="79:38" pos:end="79:47">cb_address</name> <operator pos:start="79:49" pos:end="79:49">+</operator> <literal type="number" pos:start="79:51" pos:end="79:51">8</literal></expr></argument>, <argument pos:start="79:54" pos:end="79:67"><expr pos:start="79:54" pos:end="79:67"><operator pos:start="79:54" pos:end="79:54">&amp;</operator><name pos:start="79:55" pos:end="79:67"><name pos:start="79:55" pos:end="79:55">s</name><operator pos:start="79:56" pos:end="79:57">-&gt;</operator><name pos:start="79:58" pos:end="79:64">macaddr</name><index pos:start="79:65" pos:end="79:67">[<expr pos:start="79:66" pos:end="79:66"><literal type="number" pos:start="79:66" pos:end="79:66">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:70" pos:end="79:70"><expr pos:start="79:70" pos:end="79:70"><literal type="number" pos:start="79:70" pos:end="79:70">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:79"><expr pos:start="81:13" pos:end="81:78"><call pos:start="81:13" pos:end="81:78"><name pos:start="81:13" pos:end="81:17">TRACE</name><argument_list pos:start="81:18" pos:end="81:78">(<argument pos:start="81:19" pos:end="81:23"><expr pos:start="81:19" pos:end="81:23"><name pos:start="81:19" pos:end="81:23">OTHER</name></expr></argument>, <argument pos:start="81:26" pos:end="81:77"><expr pos:start="81:26" pos:end="81:77"><call pos:start="81:26" pos:end="81:77"><name pos:start="81:26" pos:end="81:31">logout</name><argument_list pos:start="81:32" pos:end="81:77">(<argument pos:start="81:33" pos:end="81:47"><expr pos:start="81:33" pos:end="81:47"><literal type="string" pos:start="81:33" pos:end="81:47">"macaddr: %s\n"</literal></expr></argument>, <argument pos:start="81:50" pos:end="81:76"><expr pos:start="81:50" pos:end="81:76"><call pos:start="81:50" pos:end="81:76"><name pos:start="81:50" pos:end="81:57">nic_dump</name><argument_list pos:start="81:58" pos:end="81:76">(<argument pos:start="81:59" pos:end="81:72"><expr pos:start="81:59" pos:end="81:72"><operator pos:start="81:59" pos:end="81:59">&amp;</operator><name pos:start="81:60" pos:end="81:72"><name pos:start="81:60" pos:end="81:60">s</name><operator pos:start="81:61" pos:end="81:62">-&gt;</operator><name pos:start="81:63" pos:end="81:69">macaddr</name><index pos:start="81:70" pos:end="81:72">[<expr pos:start="81:71" pos:end="81:71"><literal type="number" pos:start="81:71" pos:end="81:71">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="81:75" pos:end="81:75"><expr pos:start="81:75" pos:end="81:75"><literal type="number" pos:start="81:75" pos:end="81:75">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        <case pos:start="85:9" pos:end="85:26">case <expr pos:start="85:14" pos:end="85:25"><name pos:start="85:14" pos:end="85:25">CmdConfigure</name></expr>:</case>

            <expr_stmt pos:start="87:13" pos:end="89:63"><expr pos:start="87:13" pos:end="89:62"><call pos:start="87:13" pos:end="89:62"><name pos:start="87:13" pos:end="87:36">cpu_physical_memory_read</name><argument_list pos:start="87:37" pos:end="89:62">(<argument pos:start="87:38" pos:end="87:51"><expr pos:start="87:38" pos:end="87:51"><name pos:start="87:38" pos:end="87:47">cb_address</name> <operator pos:start="87:49" pos:end="87:49">+</operator> <literal type="number" pos:start="87:51" pos:end="87:51">8</literal></expr></argument>, <argument pos:start="87:54" pos:end="87:73"><expr pos:start="87:54" pos:end="87:73"><operator pos:start="87:54" pos:end="87:54">&amp;</operator><name pos:start="87:55" pos:end="87:73"><name pos:start="87:55" pos:end="87:55">s</name><operator pos:start="87:56" pos:end="87:57">-&gt;</operator><name pos:start="87:58" pos:end="87:70">configuration</name><index pos:start="87:71" pos:end="87:73">[<expr pos:start="87:72" pos:end="87:72"><literal type="number" pos:start="87:72" pos:end="87:72">0</literal></expr>]</index></name></expr></argument>,

                                     <argument pos:start="89:38" pos:end="89:61"><expr pos:start="89:38" pos:end="89:61"><sizeof pos:start="89:38" pos:end="89:61">sizeof<argument_list pos:start="89:44" pos:end="89:61">(<argument pos:start="89:45" pos:end="89:60"><expr pos:start="89:45" pos:end="89:60"><name pos:start="89:45" pos:end="89:60"><name pos:start="89:45" pos:end="89:45">s</name><operator pos:start="89:46" pos:end="89:47">-&gt;</operator><name pos:start="89:48" pos:end="89:60">configuration</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:92"><expr pos:start="91:13" pos:end="91:91"><call pos:start="91:13" pos:end="91:91"><name pos:start="91:13" pos:end="91:17">TRACE</name><argument_list pos:start="91:18" pos:end="91:91">(<argument pos:start="91:19" pos:end="91:23"><expr pos:start="91:19" pos:end="91:23"><name pos:start="91:19" pos:end="91:23">OTHER</name></expr></argument>, <argument pos:start="91:26" pos:end="91:90"><expr pos:start="91:26" pos:end="91:90"><call pos:start="91:26" pos:end="91:90"><name pos:start="91:26" pos:end="91:31">logout</name><argument_list pos:start="91:32" pos:end="91:90">(<argument pos:start="91:33" pos:end="91:53"><expr pos:start="91:33" pos:end="91:53"><literal type="string" pos:start="91:33" pos:end="91:53">"configuration: %s\n"</literal></expr></argument>, <argument pos:start="91:56" pos:end="91:89"><expr pos:start="91:56" pos:end="91:89"><call pos:start="91:56" pos:end="91:89"><name pos:start="91:56" pos:end="91:63">nic_dump</name><argument_list pos:start="91:64" pos:end="91:89">(<argument pos:start="91:65" pos:end="91:84"><expr pos:start="91:65" pos:end="91:84"><operator pos:start="91:65" pos:end="91:65">&amp;</operator><name pos:start="91:66" pos:end="91:84"><name pos:start="91:66" pos:end="91:66">s</name><operator pos:start="91:67" pos:end="91:68">-&gt;</operator><name pos:start="91:69" pos:end="91:81">configuration</name><index pos:start="91:82" pos:end="91:84">[<expr pos:start="91:83" pos:end="91:83"><literal type="number" pos:start="91:83" pos:end="91:83">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="91:87" pos:end="91:88"><expr pos:start="91:87" pos:end="91:88"><literal type="number" pos:start="91:87" pos:end="91:88">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        <case pos:start="95:9" pos:end="95:30">case <expr pos:start="95:14" pos:end="95:29"><name pos:start="95:14" pos:end="95:29">CmdMulticastList</name></expr>:</case>

            <comment type="line" pos:start="97:13" pos:end="97:42">//~ missing("multicast list");</comment>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        <case pos:start="101:9" pos:end="101:19">case <expr pos:start="101:14" pos:end="101:18"><name pos:start="101:14" pos:end="101:18">CmdTx</name></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:20"><expr pos:start="103:13" pos:end="103:19"><operator pos:start="103:13" pos:end="103:13">(</operator><name pos:start="103:14" pos:end="103:17">void</name><operator pos:start="103:18" pos:end="103:18">)</operator><literal type="number" pos:start="103:19" pos:end="103:19">0</literal></expr>;</expr_stmt>

            <decl_stmt pos:start="105:13" pos:end="105:62"><decl pos:start="105:13" pos:end="105:61"><type pos:start="105:13" pos:end="105:20"><name pos:start="105:13" pos:end="105:20">uint32_t</name></type> <name pos:start="105:22" pos:end="105:30">tbd_array</name> <init pos:start="105:32" pos:end="105:61">= <expr pos:start="105:34" pos:end="105:61"><call pos:start="105:34" pos:end="105:61"><name pos:start="105:34" pos:end="105:44">le32_to_cpu</name><argument_list pos:start="105:45" pos:end="105:61">(<argument pos:start="105:46" pos:end="105:60"><expr pos:start="105:46" pos:end="105:60"><name pos:start="105:46" pos:end="105:60"><name pos:start="105:46" pos:end="105:47">tx</name><operator pos:start="105:48" pos:end="105:48">.</operator><name pos:start="105:49" pos:end="105:60">tx_desc_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="107:13" pos:end="107:70"><decl pos:start="107:13" pos:end="107:69"><type pos:start="107:13" pos:end="107:20"><name pos:start="107:13" pos:end="107:20">uint16_t</name></type> <name pos:start="107:22" pos:end="107:30">tcb_bytes</name> <init pos:start="107:32" pos:end="107:69">= <expr pos:start="107:34" pos:end="107:69"><operator pos:start="107:34" pos:end="107:34">(</operator><call pos:start="107:35" pos:end="107:59"><name pos:start="107:35" pos:end="107:45">le16_to_cpu</name><argument_list pos:start="107:46" pos:end="107:59">(<argument pos:start="107:47" pos:end="107:58"><expr pos:start="107:47" pos:end="107:58"><name pos:start="107:47" pos:end="107:58"><name pos:start="107:47" pos:end="107:48">tx</name><operator pos:start="107:49" pos:end="107:49">.</operator><name pos:start="107:50" pos:end="107:58">tcb_bytes</name></name></expr></argument>)</argument_list></call> <operator pos:start="107:61" pos:end="107:61">&amp;</operator> <literal type="number" pos:start="107:63" pos:end="107:68">0x3fff</literal><operator pos:start="107:69" pos:end="107:69">)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="109:13" pos:end="113:54"><expr pos:start="109:13" pos:end="113:53"><call pos:start="109:13" pos:end="113:53"><name pos:start="109:13" pos:end="109:17">TRACE</name><argument_list pos:start="109:18" pos:end="113:53">(<argument pos:start="109:19" pos:end="109:22"><expr pos:start="109:19" pos:end="109:22"><name pos:start="109:19" pos:end="109:22">RXTX</name></expr></argument>, <argument pos:start="109:25" pos:end="113:52"><expr pos:start="109:25" pos:end="113:52"><call pos:start="109:25" pos:end="113:52"><name pos:start="109:25" pos:end="109:30">logout</name>

                <argument_list pos:start="111:17" pos:end="113:52">(<argument pos:start="111:18" pos:end="111:92"><expr pos:start="111:18" pos:end="111:92"><literal type="string" pos:start="111:18" pos:end="111:92">"transmit, TBD array address 0x%08x, TCB byte count 0x%04x, TBD count %u\n"</literal></expr></argument>,

                 <argument pos:start="113:18" pos:end="113:26"><expr pos:start="113:18" pos:end="113:26"><name pos:start="113:18" pos:end="113:26">tbd_array</name></expr></argument>, <argument pos:start="113:29" pos:end="113:37"><expr pos:start="113:29" pos:end="113:37"><name pos:start="113:29" pos:end="113:37">tcb_bytes</name></expr></argument>, <argument pos:start="113:40" pos:end="113:51"><expr pos:start="113:40" pos:end="113:51"><name pos:start="113:40" pos:end="113:51"><name pos:start="113:40" pos:end="113:41">tx</name><operator pos:start="113:42" pos:end="113:42">.</operator><name pos:start="113:43" pos:end="113:51">tbd_count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="117:13" pos:end="125:13"><if pos:start="117:13" pos:end="125:13">if <condition pos:start="117:16" pos:end="117:23">(<expr pos:start="117:17" pos:end="117:22"><name pos:start="117:17" pos:end="117:22">bit_nc</name></expr>)</condition> <block pos:start="117:25" pos:end="125:13">{<block_content pos:start="119:17" pos:end="123:22">

                <expr_stmt pos:start="119:17" pos:end="119:41"><expr pos:start="119:17" pos:end="119:40"><call pos:start="119:17" pos:end="119:40"><name pos:start="119:17" pos:end="119:23">missing</name><argument_list pos:start="119:24" pos:end="119:40">(<argument pos:start="119:25" pos:end="119:39"><expr pos:start="119:25" pos:end="119:39"><literal type="string" pos:start="119:25" pos:end="119:39">"CmdTx: NC = 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:32"><expr pos:start="121:17" pos:end="121:31"><name pos:start="121:17" pos:end="121:23">success</name> <operator pos:start="121:25" pos:end="121:25">=</operator> <name pos:start="121:27" pos:end="121:31">false</name></expr>;</expr_stmt>

                <break pos:start="123:17" pos:end="123:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="line" pos:start="127:13" pos:end="127:32">//~ assert(!bit_sf);</comment>

            <if_stmt pos:start="129:13" pos:end="135:13"><if pos:start="129:13" pos:end="135:13">if <condition pos:start="129:16" pos:end="129:33">(<expr pos:start="129:17" pos:end="129:32"><name pos:start="129:17" pos:end="129:25">tcb_bytes</name> <operator pos:start="129:27" pos:end="129:27">&gt;</operator> <literal type="number" pos:start="129:29" pos:end="129:32">2600</literal></expr>)</condition> <block pos:start="129:35" pos:end="135:13">{<block_content pos:start="131:17" pos:end="133:33">

                <expr_stmt pos:start="131:17" pos:end="131:65"><expr pos:start="131:17" pos:end="131:64"><call pos:start="131:17" pos:end="131:64"><name pos:start="131:17" pos:end="131:22">logout</name><argument_list pos:start="131:23" pos:end="131:64">(<argument pos:start="131:24" pos:end="131:63"><expr pos:start="131:24" pos:end="131:63"><literal type="string" pos:start="131:24" pos:end="131:63">"TCB byte count too large, using 2600\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:33"><expr pos:start="133:17" pos:end="133:32"><name pos:start="133:17" pos:end="133:25">tcb_bytes</name> <operator pos:start="133:27" pos:end="133:27">=</operator> <literal type="number" pos:start="133:29" pos:end="133:32">2600</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="137:13" pos:end="137:63">/* Next assertion fails for local configuration. */</comment>

            <comment type="line" pos:start="139:13" pos:end="139:69">//~ assert((tcb_bytes &gt; 0) || (tbd_array != 0xffffffff));</comment>

            <if_stmt pos:start="141:13" pos:end="147:13"><if pos:start="141:13" pos:end="147:13">if <condition pos:start="141:16" pos:end="141:64">(<expr pos:start="141:17" pos:end="141:63"><operator pos:start="141:17" pos:end="141:17">!</operator><operator pos:start="141:18" pos:end="141:18">(</operator><operator pos:start="141:19" pos:end="141:19">(</operator><name pos:start="141:20" pos:end="141:28">tcb_bytes</name> <operator pos:start="141:30" pos:end="141:30">&gt;</operator> <literal type="number" pos:start="141:32" pos:end="141:32">0</literal><operator pos:start="141:33" pos:end="141:33">)</operator> <operator pos:start="141:35" pos:end="141:36">||</operator> <operator pos:start="141:38" pos:end="141:38">(</operator><name pos:start="141:39" pos:end="141:47">tbd_array</name> <operator pos:start="141:49" pos:end="141:50">!=</operator> <literal type="number" pos:start="141:52" pos:end="141:61">0xffffffff</literal><operator pos:start="141:62" pos:end="141:62">)</operator><operator pos:start="141:63" pos:end="141:63">)</operator></expr>)</condition> <block pos:start="141:66" pos:end="147:13">{<block_content pos:start="143:17" pos:end="145:82">

                <expr_stmt pos:start="143:17" pos:end="145:82"><expr pos:start="143:17" pos:end="145:81"><call pos:start="143:17" pos:end="145:81"><name pos:start="143:17" pos:end="143:22">logout</name>

                    <argument_list pos:start="145:21" pos:end="145:81">(<argument pos:start="145:22" pos:end="145:80"><expr pos:start="145:22" pos:end="145:80"><literal type="string" pos:start="145:22" pos:end="145:80">"illegal values of TBD array address and TCB byte count!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="line" pos:start="149:13" pos:end="149:81">// sends larger than MAX_ETH_FRAME_SIZE are allowed, up to 2600 bytes</comment>

            <decl_stmt pos:start="151:13" pos:end="151:30"><decl pos:start="151:13" pos:end="151:29"><type pos:start="151:13" pos:end="151:19"><name pos:start="151:13" pos:end="151:19">uint8_t</name></type> <name pos:start="151:21" pos:end="151:29"><name pos:start="151:21" pos:end="151:23">buf</name><index pos:start="151:24" pos:end="151:29">[<expr pos:start="151:25" pos:end="151:28"><literal type="number" pos:start="151:25" pos:end="151:28">2600</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="153:13" pos:end="153:30"><decl pos:start="153:13" pos:end="153:29"><type pos:start="153:13" pos:end="153:20"><name pos:start="153:13" pos:end="153:20">uint16_t</name></type> <name pos:start="153:22" pos:end="153:25">size</name> <init pos:start="153:27" pos:end="153:29">= <expr pos:start="153:29" pos:end="153:29"><literal type="number" pos:start="153:29" pos:end="153:29">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="155:13" pos:end="155:53"><decl pos:start="155:13" pos:end="155:52"><type pos:start="155:13" pos:end="155:20"><name pos:start="155:13" pos:end="155:20">uint32_t</name></type> <name pos:start="155:22" pos:end="155:32">tbd_address</name> <init pos:start="155:34" pos:end="155:52">= <expr pos:start="155:36" pos:end="155:52"><name pos:start="155:36" pos:end="155:45">cb_address</name> <operator pos:start="155:47" pos:end="155:47">+</operator> <literal type="number" pos:start="155:49" pos:end="155:52">0x10</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:45"><expr pos:start="157:13" pos:end="157:44"><call pos:start="157:13" pos:end="157:44"><name pos:start="157:13" pos:end="157:18">assert</name><argument_list pos:start="157:19" pos:end="157:44">(<argument pos:start="157:20" pos:end="157:43"><expr pos:start="157:20" pos:end="157:43"><name pos:start="157:20" pos:end="157:28">tcb_bytes</name> <operator pos:start="157:30" pos:end="157:31">&lt;=</operator> <sizeof pos:start="157:33" pos:end="157:43">sizeof<argument_list pos:start="157:39" pos:end="157:43">(<argument pos:start="157:40" pos:end="157:42"><expr pos:start="157:40" pos:end="157:42"><name pos:start="157:40" pos:end="157:42">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="159:13" pos:end="183:13">while <condition pos:start="159:19" pos:end="159:36">(<expr pos:start="159:20" pos:end="159:35"><name pos:start="159:20" pos:end="159:23">size</name> <operator pos:start="159:25" pos:end="159:25">&lt;</operator> <name pos:start="159:27" pos:end="159:35">tcb_bytes</name></expr>)</condition> <block pos:start="159:38" pos:end="183:13">{<block_content pos:start="161:17" pos:end="181:39">

                <decl_stmt pos:start="161:17" pos:end="161:67"><decl pos:start="161:17" pos:end="161:66"><type pos:start="161:17" pos:end="161:24"><name pos:start="161:17" pos:end="161:24">uint32_t</name></type> <name pos:start="161:26" pos:end="161:42">tx_buffer_address</name> <init pos:start="161:44" pos:end="161:66">= <expr pos:start="161:46" pos:end="161:66"><call pos:start="161:46" pos:end="161:66"><name pos:start="161:46" pos:end="161:53">ldl_phys</name><argument_list pos:start="161:54" pos:end="161:66">(<argument pos:start="161:55" pos:end="161:65"><expr pos:start="161:55" pos:end="161:65"><name pos:start="161:55" pos:end="161:65">tbd_address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="163:17" pos:end="163:69"><decl pos:start="163:17" pos:end="163:68"><type pos:start="163:17" pos:end="163:24"><name pos:start="163:17" pos:end="163:24">uint16_t</name></type> <name pos:start="163:26" pos:end="163:39">tx_buffer_size</name> <init pos:start="163:41" pos:end="163:68">= <expr pos:start="163:43" pos:end="163:68"><call pos:start="163:43" pos:end="163:68"><name pos:start="163:43" pos:end="163:51">lduw_phys</name><argument_list pos:start="163:52" pos:end="163:68">(<argument pos:start="163:53" pos:end="163:67"><expr pos:start="163:53" pos:end="163:67"><name pos:start="163:53" pos:end="163:63">tbd_address</name> <operator pos:start="163:65" pos:end="163:65">+</operator> <literal type="number" pos:start="163:67" pos:end="163:67">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line" pos:start="165:17" pos:end="165:71">//~ uint16_t tx_buffer_el = lduw_phys(tbd_address + 6);</comment>

                <expr_stmt pos:start="167:17" pos:end="167:33"><expr pos:start="167:17" pos:end="167:32"><name pos:start="167:17" pos:end="167:27">tbd_address</name> <operator pos:start="167:29" pos:end="167:30">+=</operator> <literal type="number" pos:start="167:32" pos:end="167:32">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="173:57"><expr pos:start="169:17" pos:end="173:56"><call pos:start="169:17" pos:end="173:56"><name pos:start="169:17" pos:end="169:21">TRACE</name><argument_list pos:start="169:22" pos:end="173:56">(<argument pos:start="169:23" pos:end="169:26"><expr pos:start="169:23" pos:end="169:26"><name pos:start="169:23" pos:end="169:26">RXTX</name></expr></argument>, <argument pos:start="169:29" pos:end="173:55"><expr pos:start="169:29" pos:end="173:55"><call pos:start="169:29" pos:end="173:55"><name pos:start="169:29" pos:end="169:34">logout</name>

                    <argument_list pos:start="171:21" pos:end="173:55">(<argument pos:start="171:22" pos:end="171:82"><expr pos:start="171:22" pos:end="171:82"><literal type="string" pos:start="171:22" pos:end="171:82">"TBD (simplified mode): buffer address 0x%08x, size 0x%04x\n"</literal></expr></argument>,

                     <argument pos:start="173:22" pos:end="173:38"><expr pos:start="173:22" pos:end="173:38"><name pos:start="173:22" pos:end="173:38">tx_buffer_address</name></expr></argument>, <argument pos:start="173:41" pos:end="173:54"><expr pos:start="173:41" pos:end="173:54"><name pos:start="173:41" pos:end="173:54">tx_buffer_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:73"><expr pos:start="175:17" pos:end="175:72"><name pos:start="175:17" pos:end="175:30">tx_buffer_size</name> <operator pos:start="175:32" pos:end="175:32">=</operator> <call pos:start="175:34" pos:end="175:72"><name pos:start="175:34" pos:end="175:36">MIN</name><argument_list pos:start="175:37" pos:end="175:72">(<argument pos:start="175:38" pos:end="175:51"><expr pos:start="175:38" pos:end="175:51"><name pos:start="175:38" pos:end="175:51">tx_buffer_size</name></expr></argument>, <argument pos:start="175:54" pos:end="175:71"><expr pos:start="175:54" pos:end="175:71"><sizeof pos:start="175:54" pos:end="175:64">sizeof<argument_list pos:start="175:60" pos:end="175:64">(<argument pos:start="175:61" pos:end="175:63"><expr pos:start="175:61" pos:end="175:63"><name pos:start="175:61" pos:end="175:63">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="175:66" pos:end="175:66">-</operator> <name pos:start="175:68" pos:end="175:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="179:57"><expr pos:start="177:17" pos:end="179:56"><call pos:start="177:17" pos:end="179:56"><name pos:start="177:17" pos:end="177:40">cpu_physical_memory_read</name><argument_list pos:start="177:41" pos:end="179:56">(<argument pos:start="177:42" pos:end="177:58"><expr pos:start="177:42" pos:end="177:58"><name pos:start="177:42" pos:end="177:58">tx_buffer_address</name></expr></argument>, <argument pos:start="177:61" pos:end="177:70"><expr pos:start="177:61" pos:end="177:70"><operator pos:start="177:61" pos:end="177:61">&amp;</operator><name pos:start="177:62" pos:end="177:70"><name pos:start="177:62" pos:end="177:64">buf</name><index pos:start="177:65" pos:end="177:70">[<expr pos:start="177:66" pos:end="177:69"><name pos:start="177:66" pos:end="177:69">size</name></expr>]</index></name></expr></argument>,

                                         <argument pos:start="179:42" pos:end="179:55"><expr pos:start="179:42" pos:end="179:55"><name pos:start="179:42" pos:end="179:55">tx_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:39"><expr pos:start="181:17" pos:end="181:38"><name pos:start="181:17" pos:end="181:20">size</name> <operator pos:start="181:22" pos:end="181:23">+=</operator> <name pos:start="181:25" pos:end="181:38">tx_buffer_size</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <if_stmt pos:start="185:13" pos:end="267:13"><if pos:start="185:13" pos:end="189:13">if <condition pos:start="185:16" pos:end="185:40">(<expr pos:start="185:17" pos:end="185:39"><name pos:start="185:17" pos:end="185:25">tbd_array</name> <operator pos:start="185:27" pos:end="185:28">==</operator> <literal type="number" pos:start="185:30" pos:end="185:39">0xffffffff</literal></expr>)</condition> <block pos:start="185:42" pos:end="189:13">{<block_content>

                <comment type="block" pos:start="187:17" pos:end="187:73">/* Simplified mode. Was already handled by code above. */</comment>

            </block_content>}</block></if> <else pos:start="189:15" pos:end="267:13">else <block pos:start="189:20" pos:end="267:13">{<block_content pos:start="193:17" pos:end="265:17">

                <comment type="block" pos:start="191:17" pos:end="191:36">/* Flexible mode. */</comment>

                <decl_stmt pos:start="193:17" pos:end="193:38"><decl pos:start="193:17" pos:end="193:37"><type pos:start="193:17" pos:end="193:23"><name pos:start="193:17" pos:end="193:23">uint8_t</name></type> <name pos:start="193:25" pos:end="193:33">tbd_count</name> <init pos:start="193:35" pos:end="193:37">= <expr pos:start="193:37" pos:end="193:37"><literal type="number" pos:start="193:37" pos:end="193:37">0</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="195:17" pos:end="231:17"><if pos:start="195:17" pos:end="231:17">if <condition pos:start="195:20" pos:end="195:80">(<expr pos:start="195:21" pos:end="195:79"><call pos:start="195:21" pos:end="195:44"><name pos:start="195:21" pos:end="195:41">device_supports_eTxCB</name><argument_list pos:start="195:42" pos:end="195:44">(<argument pos:start="195:43" pos:end="195:43"><expr pos:start="195:43" pos:end="195:43"><name pos:start="195:43" pos:end="195:43">s</name></expr></argument>)</argument_list></call> <operator pos:start="195:46" pos:end="195:47">&amp;&amp;</operator> <operator pos:start="195:49" pos:end="195:49">!</operator><operator pos:start="195:50" pos:end="195:50">(</operator><name pos:start="195:51" pos:end="195:69"><name pos:start="195:51" pos:end="195:51">s</name><operator pos:start="195:52" pos:end="195:53">-&gt;</operator><name pos:start="195:54" pos:end="195:66">configuration</name><index pos:start="195:67" pos:end="195:69">[<expr pos:start="195:68" pos:end="195:68"><literal type="number" pos:start="195:68" pos:end="195:68">6</literal></expr>]</index></name> <operator pos:start="195:71" pos:end="195:71">&amp;</operator> <call pos:start="195:73" pos:end="195:78"><name pos:start="195:73" pos:end="195:75">BIT</name><argument_list pos:start="195:76" pos:end="195:78">(<argument pos:start="195:77" pos:end="195:77"><expr pos:start="195:77" pos:end="195:77"><literal type="number" pos:start="195:77" pos:end="195:77">4</literal></expr></argument>)</argument_list></call><operator pos:start="195:79" pos:end="195:79">)</operator></expr>)</condition> <block pos:start="195:82" pos:end="231:17">{<block_content pos:start="199:21" pos:end="229:21">

                    <comment type="block" pos:start="197:21" pos:end="197:48">/* Extended Flexible TCB. */</comment>

                    <for pos:start="199:21" pos:end="229:21">for <control pos:start="199:25" pos:end="199:54">(<init pos:start="199:26" pos:end="199:26">;</init> <condition pos:start="199:28" pos:end="199:41"><expr pos:start="199:28" pos:end="199:40"><name pos:start="199:28" pos:end="199:36">tbd_count</name> <operator pos:start="199:38" pos:end="199:38">&lt;</operator> <literal type="number" pos:start="199:40" pos:end="199:40">2</literal></expr>;</condition> <incr pos:start="199:43" pos:end="199:53"><expr pos:start="199:43" pos:end="199:53"><name pos:start="199:43" pos:end="199:51">tbd_count</name><operator pos:start="199:52" pos:end="199:53">++</operator></expr></incr>)</control> <block pos:start="199:56" pos:end="229:21">{<block_content pos:start="201:25" pos:end="227:25">

                        <decl_stmt pos:start="201:25" pos:end="201:75"><decl pos:start="201:25" pos:end="201:74"><type pos:start="201:25" pos:end="201:32"><name pos:start="201:25" pos:end="201:32">uint32_t</name></type> <name pos:start="201:34" pos:end="201:50">tx_buffer_address</name> <init pos:start="201:52" pos:end="201:74">= <expr pos:start="201:54" pos:end="201:74"><call pos:start="201:54" pos:end="201:74"><name pos:start="201:54" pos:end="201:61">ldl_phys</name><argument_list pos:start="201:62" pos:end="201:74">(<argument pos:start="201:63" pos:end="201:73"><expr pos:start="201:63" pos:end="201:73"><name pos:start="201:63" pos:end="201:73">tbd_address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="203:25" pos:end="203:77"><decl pos:start="203:25" pos:end="203:76"><type pos:start="203:25" pos:end="203:32"><name pos:start="203:25" pos:end="203:32">uint16_t</name></type> <name pos:start="203:34" pos:end="203:47">tx_buffer_size</name> <init pos:start="203:49" pos:end="203:76">= <expr pos:start="203:51" pos:end="203:76"><call pos:start="203:51" pos:end="203:76"><name pos:start="203:51" pos:end="203:59">lduw_phys</name><argument_list pos:start="203:60" pos:end="203:76">(<argument pos:start="203:61" pos:end="203:75"><expr pos:start="203:61" pos:end="203:75"><name pos:start="203:61" pos:end="203:71">tbd_address</name> <operator pos:start="203:73" pos:end="203:73">+</operator> <literal type="number" pos:start="203:75" pos:end="203:75">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="205:25" pos:end="205:75"><decl pos:start="205:25" pos:end="205:74"><type pos:start="205:25" pos:end="205:32"><name pos:start="205:25" pos:end="205:32">uint16_t</name></type> <name pos:start="205:34" pos:end="205:45">tx_buffer_el</name> <init pos:start="205:47" pos:end="205:74">= <expr pos:start="205:49" pos:end="205:74"><call pos:start="205:49" pos:end="205:74"><name pos:start="205:49" pos:end="205:57">lduw_phys</name><argument_list pos:start="205:58" pos:end="205:74">(<argument pos:start="205:59" pos:end="205:73"><expr pos:start="205:59" pos:end="205:73"><name pos:start="205:59" pos:end="205:69">tbd_address</name> <operator pos:start="205:71" pos:end="205:71">+</operator> <literal type="number" pos:start="205:73" pos:end="205:73">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="207:25" pos:end="207:41"><expr pos:start="207:25" pos:end="207:40"><name pos:start="207:25" pos:end="207:35">tbd_address</name> <operator pos:start="207:37" pos:end="207:38">+=</operator> <literal type="number" pos:start="207:40" pos:end="207:40">8</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="209:25" pos:end="213:65"><expr pos:start="209:25" pos:end="213:64"><call pos:start="209:25" pos:end="213:64"><name pos:start="209:25" pos:end="209:29">TRACE</name><argument_list pos:start="209:30" pos:end="213:64">(<argument pos:start="209:31" pos:end="209:34"><expr pos:start="209:31" pos:end="209:34"><name pos:start="209:31" pos:end="209:34">RXTX</name></expr></argument>, <argument pos:start="209:37" pos:end="213:63"><expr pos:start="209:37" pos:end="213:63"><call pos:start="209:37" pos:end="213:63"><name pos:start="209:37" pos:end="209:42">logout</name>

                            <argument_list pos:start="211:29" pos:end="213:63">(<argument pos:start="211:30" pos:end="211:97"><expr pos:start="211:30" pos:end="211:97"><literal type="string" pos:start="211:30" pos:end="211:97">"TBD (extended flexible mode): buffer address 0x%08x, size 0x%04x\n"</literal></expr></argument>,

                             <argument pos:start="213:30" pos:end="213:46"><expr pos:start="213:30" pos:end="213:46"><name pos:start="213:30" pos:end="213:46">tx_buffer_address</name></expr></argument>, <argument pos:start="213:49" pos:end="213:62"><expr pos:start="213:49" pos:end="213:62"><name pos:start="213:49" pos:end="213:62">tx_buffer_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="215:25" pos:end="215:81"><expr pos:start="215:25" pos:end="215:80"><name pos:start="215:25" pos:end="215:38">tx_buffer_size</name> <operator pos:start="215:40" pos:end="215:40">=</operator> <call pos:start="215:42" pos:end="215:80"><name pos:start="215:42" pos:end="215:44">MIN</name><argument_list pos:start="215:45" pos:end="215:80">(<argument pos:start="215:46" pos:end="215:59"><expr pos:start="215:46" pos:end="215:59"><name pos:start="215:46" pos:end="215:59">tx_buffer_size</name></expr></argument>, <argument pos:start="215:62" pos:end="215:79"><expr pos:start="215:62" pos:end="215:79"><sizeof pos:start="215:62" pos:end="215:72">sizeof<argument_list pos:start="215:68" pos:end="215:72">(<argument pos:start="215:69" pos:end="215:71"><expr pos:start="215:69" pos:end="215:71"><name pos:start="215:69" pos:end="215:71">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="215:74" pos:end="215:74">-</operator> <name pos:start="215:76" pos:end="215:79">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="217:25" pos:end="219:65"><expr pos:start="217:25" pos:end="219:64"><call pos:start="217:25" pos:end="219:64"><name pos:start="217:25" pos:end="217:48">cpu_physical_memory_read</name><argument_list pos:start="217:49" pos:end="219:64">(<argument pos:start="217:50" pos:end="217:66"><expr pos:start="217:50" pos:end="217:66"><name pos:start="217:50" pos:end="217:66">tx_buffer_address</name></expr></argument>, <argument pos:start="217:69" pos:end="217:78"><expr pos:start="217:69" pos:end="217:78"><operator pos:start="217:69" pos:end="217:69">&amp;</operator><name pos:start="217:70" pos:end="217:78"><name pos:start="217:70" pos:end="217:72">buf</name><index pos:start="217:73" pos:end="217:78">[<expr pos:start="217:74" pos:end="217:77"><name pos:start="217:74" pos:end="217:77">size</name></expr>]</index></name></expr></argument>,

                                                 <argument pos:start="219:50" pos:end="219:63"><expr pos:start="219:50" pos:end="219:63"><name pos:start="219:50" pos:end="219:63">tx_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="221:25" pos:end="221:47"><expr pos:start="221:25" pos:end="221:46"><name pos:start="221:25" pos:end="221:28">size</name> <operator pos:start="221:30" pos:end="221:31">+=</operator> <name pos:start="221:33" pos:end="221:46">tx_buffer_size</name></expr>;</expr_stmt>

                        <if_stmt pos:start="223:25" pos:end="227:25"><if pos:start="223:25" pos:end="227:25">if <condition pos:start="223:28" pos:end="223:45">(<expr pos:start="223:29" pos:end="223:44"><name pos:start="223:29" pos:end="223:40">tx_buffer_el</name> <operator pos:start="223:42" pos:end="223:42">&amp;</operator> <literal type="number" pos:start="223:44" pos:end="223:44">1</literal></expr>)</condition> <block pos:start="223:47" pos:end="227:25">{<block_content pos:start="225:29" pos:end="225:34">

                            <break pos:start="225:29" pos:end="225:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:40"><expr pos:start="233:17" pos:end="233:39"><name pos:start="233:17" pos:end="233:27">tbd_address</name> <operator pos:start="233:29" pos:end="233:29">=</operator> <name pos:start="233:31" pos:end="233:39">tbd_array</name></expr>;</expr_stmt>

                <for pos:start="235:17" pos:end="265:17">for <control pos:start="235:21" pos:end="235:61">(<init pos:start="235:22" pos:end="235:22">;</init> <condition pos:start="235:24" pos:end="235:48"><expr pos:start="235:24" pos:end="235:47"><name pos:start="235:24" pos:end="235:32">tbd_count</name> <operator pos:start="235:34" pos:end="235:34">&lt;</operator> <name pos:start="235:36" pos:end="235:47"><name pos:start="235:36" pos:end="235:37">tx</name><operator pos:start="235:38" pos:end="235:38">.</operator><name pos:start="235:39" pos:end="235:47">tbd_count</name></name></expr>;</condition> <incr pos:start="235:50" pos:end="235:60"><expr pos:start="235:50" pos:end="235:60"><name pos:start="235:50" pos:end="235:58">tbd_count</name><operator pos:start="235:59" pos:end="235:60">++</operator></expr></incr>)</control> <block pos:start="235:63" pos:end="265:17">{<block_content pos:start="237:21" pos:end="263:21">

                    <decl_stmt pos:start="237:21" pos:end="237:71"><decl pos:start="237:21" pos:end="237:70"><type pos:start="237:21" pos:end="237:28"><name pos:start="237:21" pos:end="237:28">uint32_t</name></type> <name pos:start="237:30" pos:end="237:46">tx_buffer_address</name> <init pos:start="237:48" pos:end="237:70">= <expr pos:start="237:50" pos:end="237:70"><call pos:start="237:50" pos:end="237:70"><name pos:start="237:50" pos:end="237:57">ldl_phys</name><argument_list pos:start="237:58" pos:end="237:70">(<argument pos:start="237:59" pos:end="237:69"><expr pos:start="237:59" pos:end="237:69"><name pos:start="237:59" pos:end="237:69">tbd_address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="239:21" pos:end="239:73"><decl pos:start="239:21" pos:end="239:72"><type pos:start="239:21" pos:end="239:28"><name pos:start="239:21" pos:end="239:28">uint16_t</name></type> <name pos:start="239:30" pos:end="239:43">tx_buffer_size</name> <init pos:start="239:45" pos:end="239:72">= <expr pos:start="239:47" pos:end="239:72"><call pos:start="239:47" pos:end="239:72"><name pos:start="239:47" pos:end="239:55">lduw_phys</name><argument_list pos:start="239:56" pos:end="239:72">(<argument pos:start="239:57" pos:end="239:71"><expr pos:start="239:57" pos:end="239:71"><name pos:start="239:57" pos:end="239:67">tbd_address</name> <operator pos:start="239:69" pos:end="239:69">+</operator> <literal type="number" pos:start="239:71" pos:end="239:71">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="241:21" pos:end="241:71"><decl pos:start="241:21" pos:end="241:70"><type pos:start="241:21" pos:end="241:28"><name pos:start="241:21" pos:end="241:28">uint16_t</name></type> <name pos:start="241:30" pos:end="241:41">tx_buffer_el</name> <init pos:start="241:43" pos:end="241:70">= <expr pos:start="241:45" pos:end="241:70"><call pos:start="241:45" pos:end="241:70"><name pos:start="241:45" pos:end="241:53">lduw_phys</name><argument_list pos:start="241:54" pos:end="241:70">(<argument pos:start="241:55" pos:end="241:69"><expr pos:start="241:55" pos:end="241:69"><name pos:start="241:55" pos:end="241:65">tbd_address</name> <operator pos:start="241:67" pos:end="241:67">+</operator> <literal type="number" pos:start="241:69" pos:end="241:69">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="243:21" pos:end="243:37"><expr pos:start="243:21" pos:end="243:36"><name pos:start="243:21" pos:end="243:31">tbd_address</name> <operator pos:start="243:33" pos:end="243:34">+=</operator> <literal type="number" pos:start="243:36" pos:end="243:36">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="245:21" pos:end="249:61"><expr pos:start="245:21" pos:end="249:60"><call pos:start="245:21" pos:end="249:60"><name pos:start="245:21" pos:end="245:25">TRACE</name><argument_list pos:start="245:26" pos:end="249:60">(<argument pos:start="245:27" pos:end="245:30"><expr pos:start="245:27" pos:end="245:30"><name pos:start="245:27" pos:end="245:30">RXTX</name></expr></argument>, <argument pos:start="245:33" pos:end="249:59"><expr pos:start="245:33" pos:end="249:59"><call pos:start="245:33" pos:end="249:59"><name pos:start="245:33" pos:end="245:38">logout</name>

                        <argument_list pos:start="247:25" pos:end="249:59">(<argument pos:start="247:26" pos:end="247:84"><expr pos:start="247:26" pos:end="247:84"><literal type="string" pos:start="247:26" pos:end="247:84">"TBD (flexible mode): buffer address 0x%08x, size 0x%04x\n"</literal></expr></argument>,

                         <argument pos:start="249:26" pos:end="249:42"><expr pos:start="249:26" pos:end="249:42"><name pos:start="249:26" pos:end="249:42">tx_buffer_address</name></expr></argument>, <argument pos:start="249:45" pos:end="249:58"><expr pos:start="249:45" pos:end="249:58"><name pos:start="249:45" pos:end="249:58">tx_buffer_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="251:21" pos:end="251:77"><expr pos:start="251:21" pos:end="251:76"><name pos:start="251:21" pos:end="251:34">tx_buffer_size</name> <operator pos:start="251:36" pos:end="251:36">=</operator> <call pos:start="251:38" pos:end="251:76"><name pos:start="251:38" pos:end="251:40">MIN</name><argument_list pos:start="251:41" pos:end="251:76">(<argument pos:start="251:42" pos:end="251:55"><expr pos:start="251:42" pos:end="251:55"><name pos:start="251:42" pos:end="251:55">tx_buffer_size</name></expr></argument>, <argument pos:start="251:58" pos:end="251:75"><expr pos:start="251:58" pos:end="251:75"><sizeof pos:start="251:58" pos:end="251:68">sizeof<argument_list pos:start="251:64" pos:end="251:68">(<argument pos:start="251:65" pos:end="251:67"><expr pos:start="251:65" pos:end="251:67"><name pos:start="251:65" pos:end="251:67">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="251:70" pos:end="251:70">-</operator> <name pos:start="251:72" pos:end="251:75">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="253:21" pos:end="255:61"><expr pos:start="253:21" pos:end="255:60"><call pos:start="253:21" pos:end="255:60"><name pos:start="253:21" pos:end="253:44">cpu_physical_memory_read</name><argument_list pos:start="253:45" pos:end="255:60">(<argument pos:start="253:46" pos:end="253:62"><expr pos:start="253:46" pos:end="253:62"><name pos:start="253:46" pos:end="253:62">tx_buffer_address</name></expr></argument>, <argument pos:start="253:65" pos:end="253:74"><expr pos:start="253:65" pos:end="253:74"><operator pos:start="253:65" pos:end="253:65">&amp;</operator><name pos:start="253:66" pos:end="253:74"><name pos:start="253:66" pos:end="253:68">buf</name><index pos:start="253:69" pos:end="253:74">[<expr pos:start="253:70" pos:end="253:73"><name pos:start="253:70" pos:end="253:73">size</name></expr>]</index></name></expr></argument>,

                                             <argument pos:start="255:46" pos:end="255:59"><expr pos:start="255:46" pos:end="255:59"><name pos:start="255:46" pos:end="255:59">tx_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="257:21" pos:end="257:43"><expr pos:start="257:21" pos:end="257:42"><name pos:start="257:21" pos:end="257:24">size</name> <operator pos:start="257:26" pos:end="257:27">+=</operator> <name pos:start="257:29" pos:end="257:42">tx_buffer_size</name></expr>;</expr_stmt>

                    <if_stmt pos:start="259:21" pos:end="263:21"><if pos:start="259:21" pos:end="263:21">if <condition pos:start="259:24" pos:end="259:41">(<expr pos:start="259:25" pos:end="259:40"><name pos:start="259:25" pos:end="259:36">tx_buffer_el</name> <operator pos:start="259:38" pos:end="259:38">&amp;</operator> <literal type="number" pos:start="259:40" pos:end="259:40">1</literal></expr>)</condition> <block pos:start="259:43" pos:end="263:21">{<block_content pos:start="261:25" pos:end="261:30">

                        <break pos:start="261:25" pos:end="261:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:95"><expr pos:start="269:13" pos:end="269:94"><call pos:start="269:13" pos:end="269:94"><name pos:start="269:13" pos:end="269:17">TRACE</name><argument_list pos:start="269:18" pos:end="269:94">(<argument pos:start="269:19" pos:end="269:22"><expr pos:start="269:19" pos:end="269:22"><name pos:start="269:19" pos:end="269:22">RXTX</name></expr></argument>, <argument pos:start="269:25" pos:end="269:93"><expr pos:start="269:25" pos:end="269:93"><call pos:start="269:25" pos:end="269:93"><name pos:start="269:25" pos:end="269:30">logout</name><argument_list pos:start="269:31" pos:end="269:93">(<argument pos:start="269:32" pos:end="269:62"><expr pos:start="269:32" pos:end="269:62"><literal type="string" pos:start="269:32" pos:end="269:62">"%p sending frame, len=%d,%s\n"</literal></expr></argument>, <argument pos:start="269:65" pos:end="269:65"><expr pos:start="269:65" pos:end="269:65"><name pos:start="269:65" pos:end="269:65">s</name></expr></argument>, <argument pos:start="269:68" pos:end="269:71"><expr pos:start="269:68" pos:end="269:71"><name pos:start="269:68" pos:end="269:71">size</name></expr></argument>, <argument pos:start="269:74" pos:end="269:92"><expr pos:start="269:74" pos:end="269:92"><call pos:start="269:74" pos:end="269:92"><name pos:start="269:74" pos:end="269:81">nic_dump</name><argument_list pos:start="269:82" pos:end="269:92">(<argument pos:start="269:83" pos:end="269:85"><expr pos:start="269:83" pos:end="269:85"><name pos:start="269:83" pos:end="269:85">buf</name></expr></argument>, <argument pos:start="269:88" pos:end="269:91"><expr pos:start="269:88" pos:end="269:91"><name pos:start="269:88" pos:end="269:91">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:47"><expr pos:start="271:13" pos:end="271:46"><call pos:start="271:13" pos:end="271:46"><name pos:start="271:13" pos:end="271:28">qemu_send_packet</name><argument_list pos:start="271:29" pos:end="271:46">(<argument pos:start="271:30" pos:end="271:34"><expr pos:start="271:30" pos:end="271:34"><name pos:start="271:30" pos:end="271:34"><name pos:start="271:30" pos:end="271:30">s</name><operator pos:start="271:31" pos:end="271:32">-&gt;</operator><name pos:start="271:33" pos:end="271:34">vc</name></name></expr></argument>, <argument pos:start="271:37" pos:end="271:39"><expr pos:start="271:37" pos:end="271:39"><name pos:start="271:37" pos:end="271:39">buf</name></expr></argument>, <argument pos:start="271:42" pos:end="271:45"><expr pos:start="271:42" pos:end="271:45"><name pos:start="271:42" pos:end="271:45">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:43"><expr pos:start="273:13" pos:end="273:42"><name pos:start="273:13" pos:end="273:40"><name pos:start="273:13" pos:end="273:13">s</name><operator pos:start="273:14" pos:end="273:15">-&gt;</operator><name pos:start="273:16" pos:end="273:25">statistics</name><operator pos:start="273:26" pos:end="273:26">.</operator><name pos:start="273:27" pos:end="273:40">tx_good_frames</name></name><operator pos:start="273:41" pos:end="273:42">++</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="275:13" pos:end="277:63">/* Transmit with bad status would raise an CX/TNO interrupt.

             * (82557 only). Emulation never has bad status. */</comment>

            <comment type="line" pos:start="279:13" pos:end="279:41">//~ eepro100_cx_interrupt(s);</comment>

            <break pos:start="281:13" pos:end="281:18">break;</break>

        <case pos:start="283:9" pos:end="283:20">case <expr pos:start="283:14" pos:end="283:19"><name pos:start="283:14" pos:end="283:19">CmdTDR</name></expr>:</case>

            <expr_stmt pos:start="285:13" pos:end="285:53"><expr pos:start="285:13" pos:end="285:52"><call pos:start="285:13" pos:end="285:52"><name pos:start="285:13" pos:end="285:17">TRACE</name><argument_list pos:start="285:18" pos:end="285:52">(<argument pos:start="285:19" pos:end="285:23"><expr pos:start="285:19" pos:end="285:23"><name pos:start="285:19" pos:end="285:23">OTHER</name></expr></argument>, <argument pos:start="285:26" pos:end="285:51"><expr pos:start="285:26" pos:end="285:51"><call pos:start="285:26" pos:end="285:51"><name pos:start="285:26" pos:end="285:31">logout</name><argument_list pos:start="285:32" pos:end="285:51">(<argument pos:start="285:33" pos:end="285:50"><expr pos:start="285:33" pos:end="285:50"><literal type="string" pos:start="285:33" pos:end="285:50">"load microcode\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="287:13" pos:end="289:64">/* Starting with offset 8, the command contains

             * 64 dwords microcode which we just ignore here. */</comment>

            <break pos:start="291:13" pos:end="291:18">break;</break>

        <default pos:start="293:9" pos:end="293:16">default:</default>

            <expr_stmt pos:start="295:13" pos:end="295:41"><expr pos:start="295:13" pos:end="295:40"><call pos:start="295:13" pos:end="295:40"><name pos:start="295:13" pos:end="295:19">missing</name><argument_list pos:start="295:20" pos:end="295:40">(<argument pos:start="295:21" pos:end="295:39"><expr pos:start="295:21" pos:end="295:39"><literal type="string" pos:start="295:21" pos:end="295:39">"undefined command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:28"><expr pos:start="297:13" pos:end="297:27"><name pos:start="297:13" pos:end="297:19">success</name> <operator pos:start="297:21" pos:end="297:21">=</operator> <name pos:start="297:23" pos:end="297:27">false</name></expr>;</expr_stmt>

            <break pos:start="299:13" pos:end="299:18">break;</break>

        </block_content>}</block></switch>

        <comment type="block" pos:start="303:9" pos:end="303:31">/* Write new status. */</comment>

        <expr_stmt pos:start="305:9" pos:end="305:71"><expr pos:start="305:9" pos:end="305:70"><call pos:start="305:9" pos:end="305:70"><name pos:start="305:9" pos:end="305:16">stw_phys</name><argument_list pos:start="305:17" pos:end="305:70">(<argument pos:start="305:18" pos:end="305:27"><expr pos:start="305:18" pos:end="305:27"><name pos:start="305:18" pos:end="305:27">cb_address</name></expr></argument>, <argument pos:start="305:30" pos:end="305:69"><expr pos:start="305:30" pos:end="305:69"><name pos:start="305:30" pos:end="305:35">status</name> <operator pos:start="305:37" pos:end="305:37">|</operator> <literal type="number" pos:start="305:39" pos:end="305:44">0x8000</literal> <operator pos:start="305:46" pos:end="305:46">|</operator> <operator pos:start="305:48" pos:end="305:48">(</operator><ternary pos:start="305:49" pos:end="305:68"><condition pos:start="305:49" pos:end="305:57"><expr pos:start="305:49" pos:end="305:55"><name pos:start="305:49" pos:end="305:55">success</name></expr> ?</condition><then pos:start="305:59" pos:end="305:64"> <expr pos:start="305:59" pos:end="305:64"><literal type="number" pos:start="305:59" pos:end="305:64">0x2000</literal></expr> </then><else pos:start="305:66" pos:end="305:68">: <expr pos:start="305:68" pos:end="305:68"><literal type="number" pos:start="305:68" pos:end="305:68">0</literal></expr></else></ternary><operator pos:start="305:69" pos:end="305:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="307:9" pos:end="313:9"><if pos:start="307:9" pos:end="313:9">if <condition pos:start="307:12" pos:end="307:18">(<expr pos:start="307:13" pos:end="307:17"><name pos:start="307:13" pos:end="307:17">bit_i</name></expr>)</condition> <block pos:start="307:20" pos:end="313:9">{<block_content pos:start="311:13" pos:end="311:37">

            <comment type="block" pos:start="309:13" pos:end="309:38">/* CU completed action. */</comment>

            <expr_stmt pos:start="311:13" pos:end="311:37"><expr pos:start="311:13" pos:end="311:36"><call pos:start="311:13" pos:end="311:36"><name pos:start="311:13" pos:end="311:33">eepro100_cx_interrupt</name><argument_list pos:start="311:34" pos:end="311:36">(<argument pos:start="311:35" pos:end="311:35"><expr pos:start="311:35" pos:end="311:35"><name pos:start="311:35" pos:end="311:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="315:9" pos:end="339:9"><if pos:start="315:9" pos:end="323:9">if <condition pos:start="315:12" pos:end="315:19">(<expr pos:start="315:13" pos:end="315:18"><name pos:start="315:13" pos:end="315:18">bit_el</name></expr>)</condition> <block pos:start="315:21" pos:end="323:9">{<block_content pos:start="319:13" pos:end="321:38">

            <comment type="block" pos:start="317:13" pos:end="317:58">/* CU becomes idle. Terminate command loop. */</comment>

            <expr_stmt pos:start="319:13" pos:end="319:37"><expr pos:start="319:13" pos:end="319:36"><call pos:start="319:13" pos:end="319:36"><name pos:start="319:13" pos:end="319:24">set_cu_state</name><argument_list pos:start="319:25" pos:end="319:36">(<argument pos:start="319:26" pos:end="319:26"><expr pos:start="319:26" pos:end="319:26"><name pos:start="319:26" pos:end="319:26">s</name></expr></argument>, <argument pos:start="319:29" pos:end="319:35"><expr pos:start="319:29" pos:end="319:35"><name pos:start="319:29" pos:end="319:35">cu_idle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:38"><expr pos:start="321:13" pos:end="321:37"><call pos:start="321:13" pos:end="321:37"><name pos:start="321:13" pos:end="321:34">eepro100_cna_interrupt</name><argument_list pos:start="321:35" pos:end="321:37">(<argument pos:start="321:36" pos:end="321:36"><expr pos:start="321:36" pos:end="321:36"><name pos:start="321:36" pos:end="321:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="323:11" pos:end="331:9">else if <condition pos:start="323:19" pos:end="323:25">(<expr pos:start="323:20" pos:end="323:24"><name pos:start="323:20" pos:end="323:24">bit_s</name></expr>)</condition> <block pos:start="323:27" pos:end="331:9">{<block_content pos:start="327:13" pos:end="329:38">

            <comment type="block" pos:start="325:13" pos:end="325:39">/* CU becomes suspended. */</comment>

            <expr_stmt pos:start="327:13" pos:end="327:42"><expr pos:start="327:13" pos:end="327:41"><call pos:start="327:13" pos:end="327:41"><name pos:start="327:13" pos:end="327:24">set_cu_state</name><argument_list pos:start="327:25" pos:end="327:41">(<argument pos:start="327:26" pos:end="327:26"><expr pos:start="327:26" pos:end="327:26"><name pos:start="327:26" pos:end="327:26">s</name></expr></argument>, <argument pos:start="327:29" pos:end="327:40"><expr pos:start="327:29" pos:end="327:40"><name pos:start="327:29" pos:end="327:40">cu_suspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:38"><expr pos:start="329:13" pos:end="329:37"><call pos:start="329:13" pos:end="329:37"><name pos:start="329:13" pos:end="329:34">eepro100_cna_interrupt</name><argument_list pos:start="329:35" pos:end="329:37">(<argument pos:start="329:36" pos:end="329:36"><expr pos:start="329:36" pos:end="329:36"><name pos:start="329:36" pos:end="329:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="331:11" pos:end="339:9">else <block pos:start="331:16" pos:end="339:9">{<block_content pos:start="335:13" pos:end="337:30">

            <comment type="block" pos:start="333:13" pos:end="333:39">/* More entries in list. */</comment>

            <expr_stmt pos:start="335:13" pos:end="335:75"><expr pos:start="335:13" pos:end="335:74"><call pos:start="335:13" pos:end="335:74"><name pos:start="335:13" pos:end="335:17">TRACE</name><argument_list pos:start="335:18" pos:end="335:74">(<argument pos:start="335:19" pos:end="335:23"><expr pos:start="335:19" pos:end="335:23"><name pos:start="335:19" pos:end="335:23">OTHER</name></expr></argument>, <argument pos:start="335:26" pos:end="335:73"><expr pos:start="335:26" pos:end="335:73"><call pos:start="335:26" pos:end="335:73"><name pos:start="335:26" pos:end="335:31">logout</name><argument_list pos:start="335:32" pos:end="335:73">(<argument pos:start="335:33" pos:end="335:72"><expr pos:start="335:33" pos:end="335:72"><literal type="string" pos:start="335:33" pos:end="335:72">"CU list with at least one more entry\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="337:13" pos:end="337:30">goto <name pos:start="337:18" pos:end="337:29">next_command</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:48"><expr pos:start="341:9" pos:end="341:47"><call pos:start="341:9" pos:end="341:47"><name pos:start="341:9" pos:end="341:13">TRACE</name><argument_list pos:start="341:14" pos:end="341:47">(<argument pos:start="341:15" pos:end="341:19"><expr pos:start="341:15" pos:end="341:19"><name pos:start="341:15" pos:end="341:19">OTHER</name></expr></argument>, <argument pos:start="341:22" pos:end="341:46"><expr pos:start="341:22" pos:end="341:46"><call pos:start="341:22" pos:end="341:46"><name pos:start="341:22" pos:end="341:27">logout</name><argument_list pos:start="341:28" pos:end="341:46">(<argument pos:start="341:29" pos:end="341:45"><expr pos:start="341:29" pos:end="341:45"><literal type="string" pos:start="341:29" pos:end="341:45">"CU list empty\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="343:9" pos:end="343:57">/* List is empty. Now CU is idle or suspended. */</comment>

        <break pos:start="345:9" pos:end="345:14">break;</break>

    <case pos:start="347:5" pos:end="347:19">case <expr pos:start="347:10" pos:end="347:18"><name pos:start="347:10" pos:end="347:18">CU_RESUME</name></expr>:</case>

        <if_stmt pos:start="349:9" pos:end="361:9"><if pos:start="349:9" pos:end="361:9">if <condition pos:start="349:12" pos:end="349:44">(<expr pos:start="349:13" pos:end="349:43"><call pos:start="349:13" pos:end="349:27"><name pos:start="349:13" pos:end="349:24">get_cu_state</name><argument_list pos:start="349:25" pos:end="349:27">(<argument pos:start="349:26" pos:end="349:26"><expr pos:start="349:26" pos:end="349:26"><name pos:start="349:26" pos:end="349:26">s</name></expr></argument>)</argument_list></call> <operator pos:start="349:29" pos:end="349:30">!=</operator> <name pos:start="349:32" pos:end="349:43">cu_suspended</name></expr>)</condition> <block pos:start="349:46" pos:end="361:9">{<block_content pos:start="351:13" pos:end="359:42">

            <expr_stmt pos:start="351:13" pos:end="351:72"><expr pos:start="351:13" pos:end="351:71"><call pos:start="351:13" pos:end="351:71"><name pos:start="351:13" pos:end="351:18">logout</name><argument_list pos:start="351:19" pos:end="351:71">(<argument pos:start="351:20" pos:end="351:53"><expr pos:start="351:20" pos:end="351:53"><literal type="string" pos:start="351:20" pos:end="351:53">"bad CU resume from CU state %u\n"</literal></expr></argument>, <argument pos:start="351:56" pos:end="351:70"><expr pos:start="351:56" pos:end="351:70"><call pos:start="351:56" pos:end="351:70"><name pos:start="351:56" pos:end="351:67">get_cu_state</name><argument_list pos:start="351:68" pos:end="351:70">(<argument pos:start="351:69" pos:end="351:69"><expr pos:start="351:69" pos:end="351:69"><name pos:start="351:69" pos:end="351:69">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="353:13" pos:end="355:34">/* Workaround for bad Linux eepro100 driver which resumes

             * from idle state. */</comment>

            <comment type="line" pos:start="357:13" pos:end="357:37">//~ missing("cu resume");</comment>

            <expr_stmt pos:start="359:13" pos:end="359:42"><expr pos:start="359:13" pos:end="359:41"><call pos:start="359:13" pos:end="359:41"><name pos:start="359:13" pos:end="359:24">set_cu_state</name><argument_list pos:start="359:25" pos:end="359:41">(<argument pos:start="359:26" pos:end="359:26"><expr pos:start="359:26" pos:end="359:26"><name pos:start="359:26" pos:end="359:26">s</name></expr></argument>, <argument pos:start="359:29" pos:end="359:40"><expr pos:start="359:29" pos:end="359:40"><name pos:start="359:29" pos:end="359:40">cu_suspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="363:9" pos:end="371:9"><if pos:start="363:9" pos:end="371:9">if <condition pos:start="363:12" pos:end="363:44">(<expr pos:start="363:13" pos:end="363:43"><call pos:start="363:13" pos:end="363:27"><name pos:start="363:13" pos:end="363:24">get_cu_state</name><argument_list pos:start="363:25" pos:end="363:27">(<argument pos:start="363:26" pos:end="363:26"><expr pos:start="363:26" pos:end="363:26"><name pos:start="363:26" pos:end="363:26">s</name></expr></argument>)</argument_list></call> <operator pos:start="363:29" pos:end="363:30">==</operator> <name pos:start="363:32" pos:end="363:43">cu_suspended</name></expr>)</condition> <block pos:start="363:46" pos:end="371:9">{<block_content pos:start="365:13" pos:end="369:30">

            <expr_stmt pos:start="365:13" pos:end="365:50"><expr pos:start="365:13" pos:end="365:49"><call pos:start="365:13" pos:end="365:49"><name pos:start="365:13" pos:end="365:17">TRACE</name><argument_list pos:start="365:18" pos:end="365:49">(<argument pos:start="365:19" pos:end="365:23"><expr pos:start="365:19" pos:end="365:23"><name pos:start="365:19" pos:end="365:23">OTHER</name></expr></argument>, <argument pos:start="365:26" pos:end="365:48"><expr pos:start="365:26" pos:end="365:48"><call pos:start="365:26" pos:end="365:48"><name pos:start="365:26" pos:end="365:31">logout</name><argument_list pos:start="365:32" pos:end="365:48">(<argument pos:start="365:33" pos:end="365:47"><expr pos:start="365:33" pos:end="365:47"><literal type="string" pos:start="365:33" pos:end="365:47">"CU resuming\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:39"><expr pos:start="367:13" pos:end="367:38"><call pos:start="367:13" pos:end="367:38"><name pos:start="367:13" pos:end="367:24">set_cu_state</name><argument_list pos:start="367:25" pos:end="367:38">(<argument pos:start="367:26" pos:end="367:26"><expr pos:start="367:26" pos:end="367:26"><name pos:start="367:26" pos:end="367:26">s</name></expr></argument>, <argument pos:start="367:29" pos:end="367:37"><expr pos:start="367:29" pos:end="367:37"><name pos:start="367:29" pos:end="367:37">cu_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="369:13" pos:end="369:30">goto <name pos:start="369:18" pos:end="369:29">next_command</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="373:9" pos:end="373:14">break;</break>

    <case pos:start="375:5" pos:end="375:22">case <expr pos:start="375:10" pos:end="375:21"><name pos:start="375:10" pos:end="375:21">CU_STATSADDR</name></expr>:</case>

        <comment type="block" pos:start="377:9" pos:end="377:41">/* Load dump counters address. */</comment>

        <expr_stmt pos:start="379:9" pos:end="379:34"><expr pos:start="379:9" pos:end="379:33"><name pos:start="379:9" pos:end="379:20"><name pos:start="379:9" pos:end="379:9">s</name><operator pos:start="379:10" pos:end="379:11">-&gt;</operator><name pos:start="379:12" pos:end="379:20">statsaddr</name></name> <operator pos:start="379:22" pos:end="379:22">=</operator> <name pos:start="379:24" pos:end="379:33"><name pos:start="379:24" pos:end="379:24">s</name><operator pos:start="379:25" pos:end="379:26">-&gt;</operator><name pos:start="379:27" pos:end="379:33">pointer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="381:9" pos:end="381:67"><expr pos:start="381:9" pos:end="381:66"><call pos:start="381:9" pos:end="381:66"><name pos:start="381:9" pos:end="381:13">TRACE</name><argument_list pos:start="381:14" pos:end="381:66">(<argument pos:start="381:15" pos:end="381:19"><expr pos:start="381:15" pos:end="381:19"><name pos:start="381:15" pos:end="381:19">OTHER</name></expr></argument>, <argument pos:start="381:22" pos:end="381:65"><expr pos:start="381:22" pos:end="381:65"><call pos:start="381:22" pos:end="381:65"><name pos:start="381:22" pos:end="381:27">logout</name><argument_list pos:start="381:28" pos:end="381:65">(<argument pos:start="381:29" pos:end="381:59"><expr pos:start="381:29" pos:end="381:59"><literal type="string" pos:start="381:29" pos:end="381:59">"val=0x%02x (status address)\n"</literal></expr></argument>, <argument pos:start="381:62" pos:end="381:64"><expr pos:start="381:62" pos:end="381:64"><name pos:start="381:62" pos:end="381:64">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="383:9" pos:end="383:14">break;</break>

    <case pos:start="385:5" pos:end="385:22">case <expr pos:start="385:10" pos:end="385:21"><name pos:start="385:10" pos:end="385:21">CU_SHOWSTATS</name></expr>:</case>

        <comment type="block" pos:start="387:9" pos:end="387:40">/* Dump statistical counters. */</comment>

        <expr_stmt pos:start="389:9" pos:end="389:63"><expr pos:start="389:9" pos:end="389:62"><call pos:start="389:9" pos:end="389:62"><name pos:start="389:9" pos:end="389:13">TRACE</name><argument_list pos:start="389:14" pos:end="389:62">(<argument pos:start="389:15" pos:end="389:19"><expr pos:start="389:15" pos:end="389:19"><name pos:start="389:15" pos:end="389:19">OTHER</name></expr></argument>, <argument pos:start="389:22" pos:end="389:61"><expr pos:start="389:22" pos:end="389:61"><call pos:start="389:22" pos:end="389:61"><name pos:start="389:22" pos:end="389:27">logout</name><argument_list pos:start="389:28" pos:end="389:61">(<argument pos:start="389:29" pos:end="389:55"><expr pos:start="389:29" pos:end="389:55"><literal type="string" pos:start="389:29" pos:end="389:55">"val=0x%02x (dump stats)\n"</literal></expr></argument>, <argument pos:start="389:58" pos:end="389:60"><expr pos:start="389:58" pos:end="389:60"><name pos:start="389:58" pos:end="389:60">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="391:9" pos:end="391:27"><expr pos:start="391:9" pos:end="391:26"><call pos:start="391:9" pos:end="391:26"><name pos:start="391:9" pos:end="391:23">dump_statistics</name><argument_list pos:start="391:24" pos:end="391:26">(<argument pos:start="391:25" pos:end="391:25"><expr pos:start="391:25" pos:end="391:25"><name pos:start="391:25" pos:end="391:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="393:9" pos:end="393:14">break;</break>

    <case pos:start="395:5" pos:end="395:21">case <expr pos:start="395:10" pos:end="395:20"><name pos:start="395:10" pos:end="395:20">CU_CMD_BASE</name></expr>:</case>

        <comment type="block" pos:start="397:9" pos:end="397:27">/* Load CU base. */</comment>

        <expr_stmt pos:start="399:9" pos:end="399:68"><expr pos:start="399:9" pos:end="399:67"><call pos:start="399:9" pos:end="399:67"><name pos:start="399:9" pos:end="399:13">TRACE</name><argument_list pos:start="399:14" pos:end="399:67">(<argument pos:start="399:15" pos:end="399:19"><expr pos:start="399:15" pos:end="399:19"><name pos:start="399:15" pos:end="399:19">OTHER</name></expr></argument>, <argument pos:start="399:22" pos:end="399:66"><expr pos:start="399:22" pos:end="399:66"><call pos:start="399:22" pos:end="399:66"><name pos:start="399:22" pos:end="399:27">logout</name><argument_list pos:start="399:28" pos:end="399:66">(<argument pos:start="399:29" pos:end="399:60"><expr pos:start="399:29" pos:end="399:60"><literal type="string" pos:start="399:29" pos:end="399:60">"val=0x%02x (CU base address)\n"</literal></expr></argument>, <argument pos:start="399:63" pos:end="399:65"><expr pos:start="399:63" pos:end="399:65"><name pos:start="399:63" pos:end="399:65">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:32"><expr pos:start="401:9" pos:end="401:31"><name pos:start="401:9" pos:end="401:18"><name pos:start="401:9" pos:end="401:9">s</name><operator pos:start="401:10" pos:end="401:11">-&gt;</operator><name pos:start="401:12" pos:end="401:18">cu_base</name></name> <operator pos:start="401:20" pos:end="401:20">=</operator> <name pos:start="401:22" pos:end="401:31"><name pos:start="401:22" pos:end="401:22">s</name><operator pos:start="401:23" pos:end="401:24">-&gt;</operator><name pos:start="401:25" pos:end="401:31">pointer</name></name></expr>;</expr_stmt>

        <break pos:start="403:9" pos:end="403:14">break;</break>

    <case pos:start="405:5" pos:end="405:22">case <expr pos:start="405:10" pos:end="405:21"><name pos:start="405:10" pos:end="405:21">CU_DUMPSTATS</name></expr>:</case>

        <comment type="block" pos:start="407:9" pos:end="407:50">/* Dump and reset statistical counters. */</comment>

        <expr_stmt pos:start="409:9" pos:end="409:73"><expr pos:start="409:9" pos:end="409:72"><call pos:start="409:9" pos:end="409:72"><name pos:start="409:9" pos:end="409:13">TRACE</name><argument_list pos:start="409:14" pos:end="409:72">(<argument pos:start="409:15" pos:end="409:19"><expr pos:start="409:15" pos:end="409:19"><name pos:start="409:15" pos:end="409:19">OTHER</name></expr></argument>, <argument pos:start="409:22" pos:end="409:71"><expr pos:start="409:22" pos:end="409:71"><call pos:start="409:22" pos:end="409:71"><name pos:start="409:22" pos:end="409:27">logout</name><argument_list pos:start="409:28" pos:end="409:71">(<argument pos:start="409:29" pos:end="409:65"><expr pos:start="409:29" pos:end="409:65"><literal type="string" pos:start="409:29" pos:end="409:65">"val=0x%02x (dump stats and reset)\n"</literal></expr></argument>, <argument pos:start="409:68" pos:end="409:70"><expr pos:start="409:68" pos:end="409:70"><name pos:start="409:68" pos:end="409:70">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="411:9" pos:end="411:27"><expr pos:start="411:9" pos:end="411:26"><call pos:start="411:9" pos:end="411:26"><name pos:start="411:9" pos:end="411:23">dump_statistics</name><argument_list pos:start="411:24" pos:end="411:26">(<argument pos:start="411:25" pos:end="411:25"><expr pos:start="411:25" pos:end="411:25"><name pos:start="411:25" pos:end="411:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:57"><expr pos:start="413:9" pos:end="413:56"><call pos:start="413:9" pos:end="413:56"><name pos:start="413:9" pos:end="413:14">memset</name><argument_list pos:start="413:15" pos:end="413:56">(<argument pos:start="413:16" pos:end="413:29"><expr pos:start="413:16" pos:end="413:29"><operator pos:start="413:16" pos:end="413:16">&amp;</operator><name pos:start="413:17" pos:end="413:29"><name pos:start="413:17" pos:end="413:17">s</name><operator pos:start="413:18" pos:end="413:19">-&gt;</operator><name pos:start="413:20" pos:end="413:29">statistics</name></name></expr></argument>, <argument pos:start="413:32" pos:end="413:32"><expr pos:start="413:32" pos:end="413:32"><literal type="number" pos:start="413:32" pos:end="413:32">0</literal></expr></argument>, <argument pos:start="413:35" pos:end="413:55"><expr pos:start="413:35" pos:end="413:55"><sizeof pos:start="413:35" pos:end="413:55">sizeof<argument_list pos:start="413:41" pos:end="413:55">(<argument pos:start="413:42" pos:end="413:54"><expr pos:start="413:42" pos:end="413:54"><name pos:start="413:42" pos:end="413:54"><name pos:start="413:42" pos:end="413:42">s</name><operator pos:start="413:43" pos:end="413:44">-&gt;</operator><name pos:start="413:45" pos:end="413:54">statistics</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="415:9" pos:end="415:14">break;</break>

    <case pos:start="417:5" pos:end="417:20">case <expr pos:start="417:10" pos:end="417:19"><name pos:start="417:10" pos:end="417:19">CU_SRESUME</name></expr>:</case>

        <comment type="block" pos:start="419:9" pos:end="419:31">/* CU static resume. */</comment>

        <expr_stmt pos:start="421:9" pos:end="421:36"><expr pos:start="421:9" pos:end="421:35"><call pos:start="421:9" pos:end="421:35"><name pos:start="421:9" pos:end="421:15">missing</name><argument_list pos:start="421:16" pos:end="421:35">(<argument pos:start="421:17" pos:end="421:34"><expr pos:start="421:17" pos:end="421:34"><literal type="string" pos:start="421:17" pos:end="421:34">"CU static resume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="423:9" pos:end="423:14">break;</break>

    <default pos:start="425:5" pos:end="425:12">default:</default>

        <expr_stmt pos:start="427:9" pos:end="427:40"><expr pos:start="427:9" pos:end="427:39"><call pos:start="427:9" pos:end="427:39"><name pos:start="427:9" pos:end="427:15">missing</name><argument_list pos:start="427:16" pos:end="427:39">(<argument pos:start="427:17" pos:end="427:38"><expr pos:start="427:17" pos:end="427:38"><literal type="string" pos:start="427:17" pos:end="427:38">"Undefined CU command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
