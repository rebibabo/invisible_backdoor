<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/839.c" pos:tabs="8"><function pos:start="1:1" pos:end="457:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">pc_init1</name><parameter_list pos:start="1:21" pos:end="1:43">(<parameter pos:start="1:22" pos:end="1:42"><decl pos:start="1:22" pos:end="1:42"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:33">MachineState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:42">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="457:1">{<block_content pos:start="5:5" pos:end="455:5">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">PCMachineState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:30">pc_machine</name> <init pos:start="5:32" pos:end="5:52">= <expr pos:start="5:34" pos:end="5:52"><call pos:start="5:34" pos:end="5:52"><name pos:start="5:34" pos:end="5:43">PC_MACHINE</name><argument_list pos:start="5:44" pos:end="5:52">(<argument pos:start="5:45" pos:end="5:51"><expr pos:start="5:45" pos:end="5:51"><name pos:start="5:45" pos:end="5:51">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MemoryRegion</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:31">system_memory</name> <init pos:start="7:33" pos:end="7:53">= <expr pos:start="7:35" pos:end="7:53"><call pos:start="7:35" pos:end="7:53"><name pos:start="7:35" pos:end="7:51">get_system_memory</name><argument_list pos:start="7:52" pos:end="7:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:45"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MemoryRegion</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:27">system_io</name> <init pos:start="9:29" pos:end="9:45">= <expr pos:start="9:31" pos:end="9:45"><call pos:start="9:31" pos:end="9:45"><name pos:start="9:31" pos:end="9:43">get_system_io</name><argument_list pos:start="9:44" pos:end="9:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:52"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">ram_addr_t</name></type> <name pos:start="13:16" pos:end="13:32">below_4g_mem_size</name></decl>, <decl pos:start="13:35" pos:end="13:51"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="13:35" pos:end="13:51">above_4g_mem_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:10">PCIBus</name> <modifier pos:start="15:12" pos:end="15:12">*</modifier></type><name pos:start="15:13" pos:end="15:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">ISABus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:18">PCII440FXState</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:32">i440fx_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:19">piix3_devfn</name> <init pos:start="21:21" pos:end="21:24">= <expr pos:start="21:23" pos:end="21:24"><operator pos:start="21:23" pos:end="21:23">-</operator><literal type="number" pos:start="21:24" pos:end="21:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">qemu_irq</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:21">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">qemu_irq</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:17">gsi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">qemu_irq</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:22"><decl pos:start="29:5" pos:end="29:21"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">qemu_irq</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:21">smi_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">GSIState</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:23">gsi_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:46"><decl pos:start="33:5" pos:end="33:45"><type pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:13">DriveInfo</name> <modifier pos:start="33:15" pos:end="33:15">*</modifier></type><name pos:start="33:16" pos:end="33:45"><name pos:start="33:16" pos:end="33:17">hd</name><index pos:start="33:18" pos:end="33:45">[<expr pos:start="33:19" pos:end="33:44"><name pos:start="33:19" pos:end="33:29">MAX_IDE_BUS</name> <operator pos:start="33:31" pos:end="33:31">*</operator> <name pos:start="33:33" pos:end="33:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:34"><decl pos:start="35:5" pos:end="35:33"><type pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:12">BusState</name> <modifier pos:start="35:14" pos:end="35:14">*</modifier></type><name pos:start="35:15" pos:end="35:33"><name pos:start="35:15" pos:end="35:20">idebus</name><index pos:start="35:21" pos:end="35:33">[<expr pos:start="35:22" pos:end="35:32"><name pos:start="35:22" pos:end="35:32">MAX_IDE_BUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:25"><decl pos:start="37:5" pos:end="37:24"><type pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:13">ISADevice</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:24">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:22"><decl pos:start="39:5" pos:end="39:21"><type pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:13">ISADevice</name> <modifier pos:start="39:15" pos:end="39:15">*</modifier></type><name pos:start="39:16" pos:end="39:21">floppy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:29"><decl pos:start="41:5" pos:end="41:28"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">MemoryRegion</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:28">ram_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:29"><decl pos:start="43:5" pos:end="43:28"><type pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:16">MemoryRegion</name> <modifier pos:start="43:18" pos:end="43:18">*</modifier></type><name pos:start="43:19" pos:end="43:28">pci_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:29"><decl pos:start="45:5" pos:end="45:28"><type pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:16">MemoryRegion</name> <modifier pos:start="45:18" pos:end="45:18">*</modifier></type><name pos:start="45:19" pos:end="45:28">rom_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:28"><decl pos:start="47:5" pos:end="47:27"><type pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:15">DeviceState</name> <modifier pos:start="47:17" pos:end="47:17">*</modifier></type><name pos:start="47:18" pos:end="47:27">icc_bridge</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:30"><decl pos:start="49:5" pos:end="49:29"><type pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:14">FWCfgState</name> <modifier pos:start="49:16" pos:end="49:16">*</modifier></type><name pos:start="49:17" pos:end="49:22">fw_cfg</name> <init pos:start="49:24" pos:end="49:29">= <expr pos:start="49:26" pos:end="49:29"><name pos:start="49:26" pos:end="49:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:28"><decl pos:start="51:5" pos:end="51:27"><type pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:15">PcGuestInfo</name> <modifier pos:start="51:17" pos:end="51:17">*</modifier></type><name pos:start="51:18" pos:end="51:27">guest_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:22"><decl pos:start="53:5" pos:end="53:21"><type pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:14">ram_addr_t</name></type> <name pos:start="53:16" pos:end="53:21">lowmem</name></decl>;</decl_stmt>



    <comment type="block" pos:start="57:5" pos:end="69:7">/* Check whether RAM fits below 4G (leaving 1/2 GByte for IO memory).

     * If it doesn't, we need to split it in chunks below and above 4G.

     * In any case, try to make sure that guest addresses aligned at

     * 1G boundaries get mapped to host addresses aligned at 1G boundaries.

     * For old machine types, use whatever split we used historically to avoid

     * breaking migration.

     */</comment>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:40">(<expr pos:start="71:9" pos:end="71:39"><name pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:15">machine</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:25">ram_size</name></name> <operator pos:start="71:27" pos:end="71:28">&gt;=</operator> <literal type="number" pos:start="71:30" pos:end="71:39">0xe0000000</literal></expr>)</condition> <block pos:start="71:42" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:58">

        <expr_stmt pos:start="73:9" pos:end="73:58"><expr pos:start="73:9" pos:end="73:57"><name pos:start="73:9" pos:end="73:14">lowmem</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <ternary pos:start="73:18" pos:end="73:57"><condition pos:start="73:18" pos:end="73:33"><expr pos:start="73:18" pos:end="73:31"><name pos:start="73:18" pos:end="73:31">gigabyte_align</name></expr> ?</condition><then pos:start="73:35" pos:end="73:44"> <expr pos:start="73:35" pos:end="73:44"><literal type="number" pos:start="73:35" pos:end="73:44">0xc0000000</literal></expr> </then><else pos:start="73:46" pos:end="73:57">: <expr pos:start="73:48" pos:end="73:57"><literal type="number" pos:start="73:48" pos:end="73:57">0xe0000000</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="79:5">else <block pos:start="75:12" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:28">

        <expr_stmt pos:start="77:9" pos:end="77:28"><expr pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:14">lowmem</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:27">0xe0000000</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="87:7">/* Handle the machine opt max-ram-below-4g.  It is basically doing

     * min(qemu limit, user limit).

     */</comment>

    <if_stmt pos:start="89:5" pos:end="105:5"><if pos:start="89:5" pos:end="105:5">if <condition pos:start="89:8" pos:end="89:46">(<expr pos:start="89:9" pos:end="89:45"><name pos:start="89:9" pos:end="89:14">lowmem</name> <operator pos:start="89:16" pos:end="89:16">&gt;</operator> <name pos:start="89:18" pos:end="89:45"><name pos:start="89:18" pos:end="89:27">pc_machine</name><operator pos:start="89:28" pos:end="89:29">-&gt;</operator><name pos:start="89:30" pos:end="89:45">max_ram_below_4g</name></name></expr>)</condition> <block pos:start="89:48" pos:end="105:5">{<block_content pos:start="91:9" pos:end="103:9">

        <expr_stmt pos:start="91:9" pos:end="91:46"><expr pos:start="91:9" pos:end="91:45"><name pos:start="91:9" pos:end="91:14">lowmem</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <name pos:start="91:18" pos:end="91:45"><name pos:start="91:18" pos:end="91:27">pc_machine</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:45">max_ram_below_4g</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="103:9"><if pos:start="93:9" pos:end="103:9">if <condition pos:start="93:12" pos:end="95:40">(<expr pos:start="93:13" pos:end="95:39"><name pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:19">machine</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:29">ram_size</name></name> <operator pos:start="93:31" pos:end="93:31">-</operator> <name pos:start="93:33" pos:end="93:38">lowmem</name> <operator pos:start="93:40" pos:end="93:40">&gt;</operator> <name pos:start="93:42" pos:end="93:47">lowmem</name> <operator pos:start="93:49" pos:end="93:50">&amp;&amp;</operator>

            <name pos:start="95:13" pos:end="95:18">lowmem</name> <operator pos:start="95:20" pos:end="95:20">&amp;</operator> <operator pos:start="95:22" pos:end="95:22">(</operator><operator pos:start="95:23" pos:end="95:23">(</operator><literal type="number" pos:start="95:24" pos:end="95:27">1ULL</literal> <operator pos:start="95:29" pos:end="95:30">&lt;&lt;</operator> <literal type="number" pos:start="95:32" pos:end="95:33">30</literal><operator pos:start="95:34" pos:end="95:34">)</operator> <operator pos:start="95:36" pos:end="95:36">-</operator> <literal type="number" pos:start="95:38" pos:end="95:38">1</literal><operator pos:start="95:39" pos:end="95:39">)</operator></expr>)</condition> <block pos:start="95:42" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:55">

            <expr_stmt pos:start="97:13" pos:end="101:55"><expr pos:start="97:13" pos:end="101:54"><call pos:start="97:13" pos:end="101:54"><name pos:start="97:13" pos:end="97:24">error_report</name><argument_list pos:start="97:25" pos:end="101:54">(<argument pos:start="97:26" pos:end="99:76"><expr pos:start="97:26" pos:end="99:76"><literal type="string" pos:start="97:26" pos:end="97:72">"Warning: Large machine and max_ram_below_4g(%"</literal><name pos:start="97:73" pos:end="97:78">PRIu64</name>

                         <literal type="string" pos:start="99:26" pos:end="99:76">") not a multiple of 1G; possible bad performance."</literal></expr></argument>,

                         <argument pos:start="101:26" pos:end="101:53"><expr pos:start="101:26" pos:end="101:53"><name pos:start="101:26" pos:end="101:53"><name pos:start="101:26" pos:end="101:35">pc_machine</name><operator pos:start="101:36" pos:end="101:37">-&gt;</operator><name pos:start="101:38" pos:end="101:53">max_ram_below_4g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="121:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:36">(<expr pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:15">machine</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:25">ram_size</name></name> <operator pos:start="109:27" pos:end="109:28">&gt;=</operator> <name pos:start="109:30" pos:end="109:35">lowmem</name></expr>)</condition> <block pos:start="109:38" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:35">

        <expr_stmt pos:start="111:9" pos:end="111:55"><expr pos:start="111:9" pos:end="111:54"><name pos:start="111:9" pos:end="111:25">above_4g_mem_size</name> <operator pos:start="111:27" pos:end="111:27">=</operator> <name pos:start="111:29" pos:end="111:45"><name pos:start="111:29" pos:end="111:35">machine</name><operator pos:start="111:36" pos:end="111:37">-&gt;</operator><name pos:start="111:38" pos:end="111:45">ram_size</name></name> <operator pos:start="111:47" pos:end="111:47">-</operator> <name pos:start="111:49" pos:end="111:54">lowmem</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:35"><expr pos:start="113:9" pos:end="113:34"><name pos:start="113:9" pos:end="113:25">below_4g_mem_size</name> <operator pos:start="113:27" pos:end="113:27">=</operator> <name pos:start="113:29" pos:end="113:34">lowmem</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="121:5">else <block pos:start="115:12" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:46">

        <expr_stmt pos:start="117:9" pos:end="117:30"><expr pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:25">above_4g_mem_size</name> <operator pos:start="117:27" pos:end="117:27">=</operator> <literal type="number" pos:start="117:29" pos:end="117:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:46"><expr pos:start="119:9" pos:end="119:45"><name pos:start="119:9" pos:end="119:25">below_4g_mem_size</name> <operator pos:start="119:27" pos:end="119:27">=</operator> <name pos:start="119:29" pos:end="119:45"><name pos:start="119:29" pos:end="119:35">machine</name><operator pos:start="119:36" pos:end="119:37">-&gt;</operator><name pos:start="119:38" pos:end="119:45">ram_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="125:5" pos:end="133:5"><if pos:start="125:5" pos:end="133:5">if <condition pos:start="125:8" pos:end="127:56">(<expr pos:start="125:9" pos:end="127:55"><call pos:start="125:9" pos:end="125:21"><name pos:start="125:9" pos:end="125:19">xen_enabled</name><argument_list pos:start="125:20" pos:end="125:21">()</argument_list></call> <operator pos:start="125:23" pos:end="125:24">&amp;&amp;</operator> <call pos:start="125:26" pos:end="127:50"><name pos:start="125:26" pos:end="125:37">xen_hvm_init</name><argument_list pos:start="125:38" pos:end="127:50">(<argument pos:start="125:39" pos:end="125:56"><expr pos:start="125:39" pos:end="125:56"><operator pos:start="125:39" pos:end="125:39">&amp;</operator><name pos:start="125:40" pos:end="125:56">below_4g_mem_size</name></expr></argument>, <argument pos:start="125:59" pos:end="125:76"><expr pos:start="125:59" pos:end="125:76"><operator pos:start="125:59" pos:end="125:59">&amp;</operator><name pos:start="125:60" pos:end="125:76">above_4g_mem_size</name></expr></argument>,

                                      <argument pos:start="127:39" pos:end="127:49"><expr pos:start="127:39" pos:end="127:49"><operator pos:start="127:39" pos:end="127:39">&amp;</operator><name pos:start="127:40" pos:end="127:49">ram_memory</name></expr></argument>)</argument_list></call> <operator pos:start="127:52" pos:end="127:53">!=</operator> <literal type="number" pos:start="127:55" pos:end="127:55">0</literal></expr>)</condition> <block pos:start="127:58" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:16">

        <expr_stmt pos:start="129:9" pos:end="129:80"><expr pos:start="129:9" pos:end="129:79"><call pos:start="129:9" pos:end="129:79"><name pos:start="129:9" pos:end="129:15">fprintf</name><argument_list pos:start="129:16" pos:end="129:79">(<argument pos:start="129:17" pos:end="129:22"><expr pos:start="129:17" pos:end="129:22"><name pos:start="129:17" pos:end="129:22">stderr</name></expr></argument>, <argument pos:start="129:25" pos:end="129:78"><expr pos:start="129:25" pos:end="129:78"><literal type="string" pos:start="129:25" pos:end="129:78">"xen hardware virtual machine initialisation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:16"><expr pos:start="131:9" pos:end="131:15"><call pos:start="131:9" pos:end="131:15"><name pos:start="131:9" pos:end="131:12">exit</name><argument_list pos:start="131:13" pos:end="131:15">(<argument pos:start="131:14" pos:end="131:14"><expr pos:start="131:14" pos:end="131:14"><literal type="number" pos:start="131:14" pos:end="131:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:52"><expr pos:start="137:5" pos:end="137:51"><name pos:start="137:5" pos:end="137:14">icc_bridge</name> <operator pos:start="137:16" pos:end="137:16">=</operator> <call pos:start="137:18" pos:end="137:51"><name pos:start="137:18" pos:end="137:28">qdev_create</name><argument_list pos:start="137:29" pos:end="137:51">(<argument pos:start="137:30" pos:end="137:33"><expr pos:start="137:30" pos:end="137:33"><name pos:start="137:30" pos:end="137:33">NULL</name></expr></argument>, <argument pos:start="137:36" pos:end="137:50"><expr pos:start="137:36" pos:end="137:50"><name pos:start="137:36" pos:end="137:50">TYPE_ICC_BRIDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="141:56"><expr pos:start="139:5" pos:end="141:55"><call pos:start="139:5" pos:end="141:55"><name pos:start="139:5" pos:end="139:29">object_property_add_child</name><argument_list pos:start="139:30" pos:end="141:55">(<argument pos:start="139:31" pos:end="139:48"><expr pos:start="139:31" pos:end="139:48"><call pos:start="139:31" pos:end="139:48"><name pos:start="139:31" pos:end="139:46">qdev_get_machine</name><argument_list pos:start="139:47" pos:end="139:48">()</argument_list></call></expr></argument>, <argument pos:start="139:51" pos:end="139:62"><expr pos:start="139:51" pos:end="139:62"><literal type="string" pos:start="139:51" pos:end="139:62">"icc-bridge"</literal></expr></argument>,

                              <argument pos:start="141:31" pos:end="141:48"><expr pos:start="141:31" pos:end="141:48"><call pos:start="141:31" pos:end="141:48"><name pos:start="141:31" pos:end="141:36">OBJECT</name><argument_list pos:start="141:37" pos:end="141:48">(<argument pos:start="141:38" pos:end="141:47"><expr pos:start="141:38" pos:end="141:47"><name pos:start="141:38" pos:end="141:47">icc_bridge</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="141:51" pos:end="141:54"><expr pos:start="141:51" pos:end="141:54"><name pos:start="141:51" pos:end="141:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:49"><expr pos:start="145:5" pos:end="145:48"><call pos:start="145:5" pos:end="145:48"><name pos:start="145:5" pos:end="145:16">pc_cpus_init</name><argument_list pos:start="145:17" pos:end="145:48">(<argument pos:start="145:18" pos:end="145:35"><expr pos:start="145:18" pos:end="145:35"><name pos:start="145:18" pos:end="145:35"><name pos:start="145:18" pos:end="145:24">machine</name><operator pos:start="145:25" pos:end="145:26">-&gt;</operator><name pos:start="145:27" pos:end="145:35">cpu_model</name></name></expr></argument>, <argument pos:start="145:38" pos:end="145:47"><expr pos:start="145:38" pos:end="145:47"><name pos:start="145:38" pos:end="145:47">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:42">(<expr pos:start="149:9" pos:end="149:41"><call pos:start="149:9" pos:end="149:21"><name pos:start="149:9" pos:end="149:19">kvm_enabled</name><argument_list pos:start="149:20" pos:end="149:21">()</argument_list></call> <operator pos:start="149:23" pos:end="149:24">&amp;&amp;</operator> <name pos:start="149:26" pos:end="149:41">kvmclock_enabled</name></expr>)</condition> <block pos:start="149:44" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:26">

        <expr_stmt pos:start="151:9" pos:end="151:26"><expr pos:start="151:9" pos:end="151:25"><call pos:start="151:9" pos:end="151:25"><name pos:start="151:9" pos:end="151:23">kvmclock_create</name><argument_list pos:start="151:24" pos:end="151:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="157:5" pos:end="171:5"><if pos:start="157:5" pos:end="165:5">if <condition pos:start="157:8" pos:end="157:20">(<expr pos:start="157:9" pos:end="157:19"><name pos:start="157:9" pos:end="157:19">pci_enabled</name></expr>)</condition> <block pos:start="157:22" pos:end="165:5">{<block_content pos:start="159:9" pos:end="163:32">

        <expr_stmt pos:start="159:9" pos:end="159:44"><expr pos:start="159:9" pos:end="159:43"><name pos:start="159:9" pos:end="159:18">pci_memory</name> <operator pos:start="159:20" pos:end="159:20">=</operator> <call pos:start="159:22" pos:end="159:43"><name pos:start="159:22" pos:end="159:26">g_new</name><argument_list pos:start="159:27" pos:end="159:43">(<argument pos:start="159:28" pos:end="159:39"><expr pos:start="159:28" pos:end="159:39"><name pos:start="159:28" pos:end="159:39">MemoryRegion</name></expr></argument>, <argument pos:start="159:42" pos:end="159:42"><expr pos:start="159:42" pos:end="159:42"><literal type="number" pos:start="159:42" pos:end="159:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:64"><expr pos:start="161:9" pos:end="161:63"><call pos:start="161:9" pos:end="161:63"><name pos:start="161:9" pos:end="161:26">memory_region_init</name><argument_list pos:start="161:27" pos:end="161:63">(<argument pos:start="161:28" pos:end="161:37"><expr pos:start="161:28" pos:end="161:37"><name pos:start="161:28" pos:end="161:37">pci_memory</name></expr></argument>, <argument pos:start="161:40" pos:end="161:43"><expr pos:start="161:40" pos:end="161:43"><name pos:start="161:40" pos:end="161:43">NULL</name></expr></argument>, <argument pos:start="161:46" pos:end="161:50"><expr pos:start="161:46" pos:end="161:50"><literal type="string" pos:start="161:46" pos:end="161:50">"pci"</literal></expr></argument>, <argument pos:start="161:53" pos:end="161:62"><expr pos:start="161:53" pos:end="161:62"><name pos:start="161:53" pos:end="161:62">UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:32"><expr pos:start="163:9" pos:end="163:31"><name pos:start="163:9" pos:end="163:18">rom_memory</name> <operator pos:start="163:20" pos:end="163:20">=</operator> <name pos:start="163:22" pos:end="163:31">pci_memory</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="165:7" pos:end="171:5">else <block pos:start="165:12" pos:end="171:5">{<block_content pos:start="167:9" pos:end="169:35">

        <expr_stmt pos:start="167:9" pos:end="167:26"><expr pos:start="167:9" pos:end="167:25"><name pos:start="167:9" pos:end="167:18">pci_memory</name> <operator pos:start="167:20" pos:end="167:20">=</operator> <name pos:start="167:22" pos:end="167:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:35"><expr pos:start="169:9" pos:end="169:34"><name pos:start="169:9" pos:end="169:18">rom_memory</name> <operator pos:start="169:20" pos:end="169:20">=</operator> <name pos:start="169:22" pos:end="169:34">system_memory</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:74"><expr pos:start="175:5" pos:end="175:73"><name pos:start="175:5" pos:end="175:14">guest_info</name> <operator pos:start="175:16" pos:end="175:16">=</operator> <call pos:start="175:18" pos:end="175:73"><name pos:start="175:18" pos:end="175:35">pc_guest_info_init</name><argument_list pos:start="175:36" pos:end="175:73">(<argument pos:start="175:37" pos:end="175:53"><expr pos:start="175:37" pos:end="175:53"><name pos:start="175:37" pos:end="175:53">below_4g_mem_size</name></expr></argument>, <argument pos:start="175:56" pos:end="175:72"><expr pos:start="175:56" pos:end="175:72"><name pos:start="175:56" pos:end="175:72">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:48"><expr pos:start="179:5" pos:end="179:47"><name pos:start="179:5" pos:end="179:30"><name pos:start="179:5" pos:end="179:14">guest_info</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:30">has_acpi_build</name></name> <operator pos:start="179:32" pos:end="179:32">=</operator> <name pos:start="179:34" pos:end="179:47">has_acpi_build</name></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:64"><expr pos:start="181:5" pos:end="181:63"><name pos:start="181:5" pos:end="181:38"><name pos:start="181:5" pos:end="181:14">guest_info</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:38">legacy_acpi_table_size</name></name> <operator pos:start="181:40" pos:end="181:40">=</operator> <name pos:start="181:42" pos:end="181:63">legacy_acpi_table_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:44"><expr pos:start="185:5" pos:end="185:43"><name pos:start="185:5" pos:end="185:28"><name pos:start="185:5" pos:end="185:14">guest_info</name><operator pos:start="185:15" pos:end="185:16">-&gt;</operator><name pos:start="185:17" pos:end="185:28">isapc_ram_fw</name></name> <operator pos:start="185:30" pos:end="185:30">=</operator> <operator pos:start="185:32" pos:end="185:32">!</operator><name pos:start="185:33" pos:end="185:43">pci_enabled</name></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:58"><expr pos:start="187:5" pos:end="187:57"><name pos:start="187:5" pos:end="187:35"><name pos:start="187:5" pos:end="187:14">guest_info</name><operator pos:start="187:15" pos:end="187:16">-&gt;</operator><name pos:start="187:17" pos:end="187:35">has_reserved_memory</name></name> <operator pos:start="187:37" pos:end="187:37">=</operator> <name pos:start="187:39" pos:end="187:57">has_reserved_memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:42"><expr pos:start="189:5" pos:end="189:41"><name pos:start="189:5" pos:end="189:27"><name pos:start="189:5" pos:end="189:14">guest_info</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:27">rsdp_in_ram</name></name> <operator pos:start="189:29" pos:end="189:29">=</operator> <name pos:start="189:31" pos:end="189:41">rsdp_in_ram</name></expr>;</expr_stmt>



    <if_stmt pos:start="193:5" pos:end="203:5"><if pos:start="193:5" pos:end="203:5">if <condition pos:start="193:8" pos:end="193:24">(<expr pos:start="193:9" pos:end="193:23"><name pos:start="193:9" pos:end="193:23">smbios_defaults</name></expr>)</condition> <block pos:start="193:26" pos:end="203:5">{<block_content pos:start="195:9" pos:end="201:79">

        <decl_stmt pos:start="195:9" pos:end="195:54"><decl pos:start="195:9" pos:end="195:53"><type pos:start="195:9" pos:end="195:22"><name pos:start="195:9" pos:end="195:20">MachineClass</name> <modifier pos:start="195:22" pos:end="195:22">*</modifier></type><name pos:start="195:23" pos:end="195:24">mc</name> <init pos:start="195:26" pos:end="195:53">= <expr pos:start="195:28" pos:end="195:53"><call pos:start="195:28" pos:end="195:53"><name pos:start="195:28" pos:end="195:44">MACHINE_GET_CLASS</name><argument_list pos:start="195:45" pos:end="195:53">(<argument pos:start="195:46" pos:end="195:52"><expr pos:start="195:46" pos:end="195:52"><name pos:start="195:46" pos:end="195:52">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="197:9" pos:end="197:55">/* These values are guest ABI, do not change */</comment>

        <expr_stmt pos:start="199:9" pos:end="201:79"><expr pos:start="199:9" pos:end="201:78"><call pos:start="199:9" pos:end="201:78"><name pos:start="199:9" pos:end="199:27">smbios_set_defaults</name><argument_list pos:start="199:28" pos:end="201:78">(<argument pos:start="199:29" pos:end="199:34"><expr pos:start="199:29" pos:end="199:34"><literal type="string" pos:start="199:29" pos:end="199:34">"QEMU"</literal></expr></argument>, <argument pos:start="199:37" pos:end="199:71"><expr pos:start="199:37" pos:end="199:71"><literal type="string" pos:start="199:37" pos:end="199:71">"Standard PC (i440FX + PIIX, 1996)"</literal></expr></argument>,

                            <argument pos:start="201:29" pos:end="201:36"><expr pos:start="201:29" pos:end="201:36"><name pos:start="201:29" pos:end="201:36"><name pos:start="201:29" pos:end="201:30">mc</name><operator pos:start="201:31" pos:end="201:32">-&gt;</operator><name pos:start="201:33" pos:end="201:36">name</name></name></expr></argument>, <argument pos:start="201:39" pos:end="201:56"><expr pos:start="201:39" pos:end="201:56"><name pos:start="201:39" pos:end="201:56">smbios_legacy_mode</name></expr></argument>, <argument pos:start="201:59" pos:end="201:77"><expr pos:start="201:59" pos:end="201:77"><name pos:start="201:59" pos:end="201:77">smbios_uuid_encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="207:5" pos:end="207:40">/* allocate ram and load rom/bios */</comment>

    <if_stmt pos:start="209:5" pos:end="231:5"><if pos:start="209:5" pos:end="217:5">if <condition pos:start="209:8" pos:end="209:23">(<expr pos:start="209:9" pos:end="209:22"><operator pos:start="209:9" pos:end="209:9">!</operator><call pos:start="209:10" pos:end="209:22"><name pos:start="209:10" pos:end="209:20">xen_enabled</name><argument_list pos:start="209:21" pos:end="209:22">()</argument_list></call></expr>)</condition> <block pos:start="209:25" pos:end="217:5">{<block_content pos:start="211:9" pos:end="215:69">

        <expr_stmt pos:start="211:9" pos:end="215:69"><expr pos:start="211:9" pos:end="215:68"><name pos:start="211:9" pos:end="211:14">fw_cfg</name> <operator pos:start="211:16" pos:end="211:16">=</operator> <call pos:start="211:18" pos:end="215:68"><name pos:start="211:18" pos:end="211:31">pc_memory_init</name><argument_list pos:start="211:32" pos:end="215:68">(<argument pos:start="211:33" pos:end="211:39"><expr pos:start="211:33" pos:end="211:39"><name pos:start="211:33" pos:end="211:39">machine</name></expr></argument>, <argument pos:start="211:42" pos:end="211:54"><expr pos:start="211:42" pos:end="211:54"><name pos:start="211:42" pos:end="211:54">system_memory</name></expr></argument>,

                                <argument pos:start="213:33" pos:end="213:49"><expr pos:start="213:33" pos:end="213:49"><name pos:start="213:33" pos:end="213:49">below_4g_mem_size</name></expr></argument>, <argument pos:start="213:52" pos:end="213:68"><expr pos:start="213:52" pos:end="213:68"><name pos:start="213:52" pos:end="213:68">above_4g_mem_size</name></expr></argument>,

                                <argument pos:start="215:33" pos:end="215:42"><expr pos:start="215:33" pos:end="215:42"><name pos:start="215:33" pos:end="215:42">rom_memory</name></expr></argument>, <argument pos:start="215:45" pos:end="215:55"><expr pos:start="215:45" pos:end="215:55"><operator pos:start="215:45" pos:end="215:45">&amp;</operator><name pos:start="215:46" pos:end="215:55">ram_memory</name></expr></argument>, <argument pos:start="215:58" pos:end="215:67"><expr pos:start="215:58" pos:end="215:67"><name pos:start="215:58" pos:end="215:67">guest_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="217:7" pos:end="231:5">else if <condition pos:start="217:15" pos:end="217:48">(<expr pos:start="217:16" pos:end="217:47"><name pos:start="217:16" pos:end="217:39"><name pos:start="217:16" pos:end="217:22">machine</name><operator pos:start="217:23" pos:end="217:24">-&gt;</operator><name pos:start="217:25" pos:end="217:39">kernel_filename</name></name> <operator pos:start="217:41" pos:end="217:42">!=</operator> <name pos:start="217:44" pos:end="217:47">NULL</name></expr>)</condition> <block pos:start="217:50" pos:end="231:5">{<block_content pos:start="221:9" pos:end="229:44">

        <comment type="block" pos:start="219:9" pos:end="219:61">/* For xen HVM direct kernel boot, load linux here */</comment>

        <expr_stmt pos:start="221:9" pos:end="229:44"><expr pos:start="221:9" pos:end="229:43"><name pos:start="221:9" pos:end="221:14">fw_cfg</name> <operator pos:start="221:16" pos:end="221:16">=</operator> <call pos:start="221:18" pos:end="229:43"><name pos:start="221:18" pos:end="221:31">xen_load_linux</name><argument_list pos:start="221:32" pos:end="229:43">(<argument pos:start="221:33" pos:end="221:56"><expr pos:start="221:33" pos:end="221:56"><name pos:start="221:33" pos:end="221:56"><name pos:start="221:33" pos:end="221:39">machine</name><operator pos:start="221:40" pos:end="221:41">-&gt;</operator><name pos:start="221:42" pos:end="221:56">kernel_filename</name></name></expr></argument>,

                                <argument pos:start="223:33" pos:end="223:55"><expr pos:start="223:33" pos:end="223:55"><name pos:start="223:33" pos:end="223:55"><name pos:start="223:33" pos:end="223:39">machine</name><operator pos:start="223:40" pos:end="223:41">-&gt;</operator><name pos:start="223:42" pos:end="223:55">kernel_cmdline</name></name></expr></argument>,

                                <argument pos:start="225:33" pos:end="225:56"><expr pos:start="225:33" pos:end="225:56"><name pos:start="225:33" pos:end="225:56"><name pos:start="225:33" pos:end="225:39">machine</name><operator pos:start="225:40" pos:end="225:41">-&gt;</operator><name pos:start="225:42" pos:end="225:56">initrd_filename</name></name></expr></argument>,

                                <argument pos:start="227:33" pos:end="227:49"><expr pos:start="227:33" pos:end="227:49"><name pos:start="227:33" pos:end="227:49">below_4g_mem_size</name></expr></argument>,

                                <argument pos:start="229:33" pos:end="229:42"><expr pos:start="229:33" pos:end="229:42"><name pos:start="229:33" pos:end="229:42">guest_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:46"><expr pos:start="235:5" pos:end="235:45"><name pos:start="235:5" pos:end="235:13">gsi_state</name> <operator pos:start="235:15" pos:end="235:15">=</operator> <call pos:start="235:17" pos:end="235:45"><name pos:start="235:17" pos:end="235:25">g_malloc0</name><argument_list pos:start="235:26" pos:end="235:45">(<argument pos:start="235:27" pos:end="235:44"><expr pos:start="235:27" pos:end="235:44"><sizeof pos:start="235:27" pos:end="235:44">sizeof<argument_list pos:start="235:33" pos:end="235:44">(<argument pos:start="235:34" pos:end="235:43"><expr pos:start="235:34" pos:end="235:43"><operator pos:start="235:34" pos:end="235:34">*</operator><name pos:start="235:35" pos:end="235:43">gsi_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="237:5" pos:end="249:5"><if pos:start="237:5" pos:end="245:5">if <condition pos:start="237:8" pos:end="237:32">(<expr pos:start="237:9" pos:end="237:31"><call pos:start="237:9" pos:end="237:31"><name pos:start="237:9" pos:end="237:29">kvm_irqchip_in_kernel</name><argument_list pos:start="237:30" pos:end="237:31">()</argument_list></call></expr>)</condition> <block pos:start="237:34" pos:end="245:5">{<block_content pos:start="239:9" pos:end="243:47">

        <expr_stmt pos:start="239:9" pos:end="239:46"><expr pos:start="239:9" pos:end="239:45"><call pos:start="239:9" pos:end="239:45"><name pos:start="239:9" pos:end="239:32">kvm_pc_setup_irq_routing</name><argument_list pos:start="239:33" pos:end="239:45">(<argument pos:start="239:34" pos:end="239:44"><expr pos:start="239:34" pos:end="239:44"><name pos:start="239:34" pos:end="239:44">pci_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="243:47"><expr pos:start="241:9" pos:end="243:46"><name pos:start="241:9" pos:end="241:11">gsi</name> <operator pos:start="241:13" pos:end="241:13">=</operator> <call pos:start="241:15" pos:end="243:46"><name pos:start="241:15" pos:end="241:32">qemu_allocate_irqs</name><argument_list pos:start="241:33" pos:end="243:46">(<argument pos:start="241:34" pos:end="241:51"><expr pos:start="241:34" pos:end="241:51"><name pos:start="241:34" pos:end="241:51">kvm_pc_gsi_handler</name></expr></argument>, <argument pos:start="241:54" pos:end="241:62"><expr pos:start="241:54" pos:end="241:62"><name pos:start="241:54" pos:end="241:62">gsi_state</name></expr></argument>,

                                 <argument pos:start="243:34" pos:end="243:45"><expr pos:start="243:34" pos:end="243:45"><name pos:start="243:34" pos:end="243:45">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="245:7" pos:end="249:5">else <block pos:start="245:12" pos:end="249:5">{<block_content pos:start="247:9" pos:end="247:71">

        <expr_stmt pos:start="247:9" pos:end="247:71"><expr pos:start="247:9" pos:end="247:70"><name pos:start="247:9" pos:end="247:11">gsi</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <call pos:start="247:15" pos:end="247:70"><name pos:start="247:15" pos:end="247:32">qemu_allocate_irqs</name><argument_list pos:start="247:33" pos:end="247:70">(<argument pos:start="247:34" pos:end="247:44"><expr pos:start="247:34" pos:end="247:44"><name pos:start="247:34" pos:end="247:44">gsi_handler</name></expr></argument>, <argument pos:start="247:47" pos:end="247:55"><expr pos:start="247:47" pos:end="247:55"><name pos:start="247:47" pos:end="247:55">gsi_state</name></expr></argument>, <argument pos:start="247:58" pos:end="247:69"><expr pos:start="247:58" pos:end="247:69"><name pos:start="247:58" pos:end="247:69">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="253:5" pos:end="275:5"><if pos:start="253:5" pos:end="265:5">if <condition pos:start="253:8" pos:end="253:20">(<expr pos:start="253:9" pos:end="253:19"><name pos:start="253:9" pos:end="253:19">pci_enabled</name></expr>)</condition> <block pos:start="253:22" pos:end="265:5">{<block_content pos:start="255:9" pos:end="263:54">

        <expr_stmt pos:start="255:9" pos:end="263:54"><expr pos:start="255:9" pos:end="263:53"><name pos:start="255:9" pos:end="255:15">pci_bus</name> <operator pos:start="255:17" pos:end="255:17">=</operator> <call pos:start="255:19" pos:end="263:53"><name pos:start="255:19" pos:end="255:29">i440fx_init</name><argument_list pos:start="255:30" pos:end="263:53">(<argument pos:start="255:31" pos:end="255:43"><expr pos:start="255:31" pos:end="255:43"><operator pos:start="255:31" pos:end="255:31">&amp;</operator><name pos:start="255:32" pos:end="255:43">i440fx_state</name></expr></argument>, <argument pos:start="255:46" pos:end="255:57"><expr pos:start="255:46" pos:end="255:57"><operator pos:start="255:46" pos:end="255:46">&amp;</operator><name pos:start="255:47" pos:end="255:57">piix3_devfn</name></expr></argument>, <argument pos:start="255:60" pos:end="255:67"><expr pos:start="255:60" pos:end="255:67"><operator pos:start="255:60" pos:end="255:60">&amp;</operator><name pos:start="255:61" pos:end="255:67">isa_bus</name></expr></argument>, <argument pos:start="255:70" pos:end="255:72"><expr pos:start="255:70" pos:end="255:72"><name pos:start="255:70" pos:end="255:72">gsi</name></expr></argument>,

                              <argument pos:start="257:31" pos:end="257:43"><expr pos:start="257:31" pos:end="257:43"><name pos:start="257:31" pos:end="257:43">system_memory</name></expr></argument>, <argument pos:start="257:46" pos:end="257:54"><expr pos:start="257:46" pos:end="257:54"><name pos:start="257:46" pos:end="257:54">system_io</name></expr></argument>, <argument pos:start="257:57" pos:end="257:73"><expr pos:start="257:57" pos:end="257:73"><name pos:start="257:57" pos:end="257:73"><name pos:start="257:57" pos:end="257:63">machine</name><operator pos:start="257:64" pos:end="257:65">-&gt;</operator><name pos:start="257:66" pos:end="257:73">ram_size</name></name></expr></argument>,

                              <argument pos:start="259:31" pos:end="259:47"><expr pos:start="259:31" pos:end="259:47"><name pos:start="259:31" pos:end="259:47">below_4g_mem_size</name></expr></argument>,

                              <argument pos:start="261:31" pos:end="261:47"><expr pos:start="261:31" pos:end="261:47"><name pos:start="261:31" pos:end="261:47">above_4g_mem_size</name></expr></argument>,

                              <argument pos:start="263:31" pos:end="263:40"><expr pos:start="263:31" pos:end="263:40"><name pos:start="263:31" pos:end="263:40">pci_memory</name></expr></argument>, <argument pos:start="263:43" pos:end="263:52"><expr pos:start="263:43" pos:end="263:52"><name pos:start="263:43" pos:end="263:52">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="265:7" pos:end="275:5">else <block pos:start="265:12" pos:end="275:5">{<block_content pos:start="267:9" pos:end="273:20">

        <expr_stmt pos:start="267:9" pos:end="267:23"><expr pos:start="267:9" pos:end="267:22"><name pos:start="267:9" pos:end="267:15">pci_bus</name> <operator pos:start="267:17" pos:end="267:17">=</operator> <name pos:start="267:19" pos:end="267:22">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:28"><expr pos:start="269:9" pos:end="269:27"><name pos:start="269:9" pos:end="269:20">i440fx_state</name> <operator pos:start="269:22" pos:end="269:22">=</operator> <name pos:start="269:24" pos:end="269:27">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:68"><expr pos:start="271:9" pos:end="271:67"><name pos:start="271:9" pos:end="271:15">isa_bus</name> <operator pos:start="271:17" pos:end="271:17">=</operator> <call pos:start="271:19" pos:end="271:67"><name pos:start="271:19" pos:end="271:29">isa_bus_new</name><argument_list pos:start="271:30" pos:end="271:67">(<argument pos:start="271:31" pos:end="271:34"><expr pos:start="271:31" pos:end="271:34"><name pos:start="271:31" pos:end="271:34">NULL</name></expr></argument>, <argument pos:start="271:37" pos:end="271:55"><expr pos:start="271:37" pos:end="271:55"><call pos:start="271:37" pos:end="271:55"><name pos:start="271:37" pos:end="271:53">get_system_memory</name><argument_list pos:start="271:54" pos:end="271:55">()</argument_list></call></expr></argument>, <argument pos:start="271:58" pos:end="271:66"><expr pos:start="271:58" pos:end="271:66"><name pos:start="271:58" pos:end="271:66">system_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:20"><expr pos:start="273:9" pos:end="273:19"><name pos:start="273:9" pos:end="273:15">no_hpet</name> <operator pos:start="273:17" pos:end="273:17">=</operator> <literal type="number" pos:start="273:19" pos:end="273:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:31"><expr pos:start="277:5" pos:end="277:30"><call pos:start="277:5" pos:end="277:30"><name pos:start="277:5" pos:end="277:16">isa_bus_irqs</name><argument_list pos:start="277:17" pos:end="277:30">(<argument pos:start="277:18" pos:end="277:24"><expr pos:start="277:18" pos:end="277:24"><name pos:start="277:18" pos:end="277:24">isa_bus</name></expr></argument>, <argument pos:start="277:27" pos:end="277:29"><expr pos:start="277:27" pos:end="277:29"><name pos:start="277:27" pos:end="277:29">gsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="281:5" pos:end="295:5"><if pos:start="281:5" pos:end="285:5">if <condition pos:start="281:8" pos:end="281:32">(<expr pos:start="281:9" pos:end="281:31"><call pos:start="281:9" pos:end="281:31"><name pos:start="281:9" pos:end="281:29">kvm_irqchip_in_kernel</name><argument_list pos:start="281:30" pos:end="281:31">()</argument_list></call></expr>)</condition> <block pos:start="281:34" pos:end="285:5">{<block_content pos:start="283:9" pos:end="283:40">

        <expr_stmt pos:start="283:9" pos:end="283:40"><expr pos:start="283:9" pos:end="283:39"><name pos:start="283:9" pos:end="283:13">i8259</name> <operator pos:start="283:15" pos:end="283:15">=</operator> <call pos:start="283:17" pos:end="283:39"><name pos:start="283:17" pos:end="283:30">kvm_i8259_init</name><argument_list pos:start="283:31" pos:end="283:39">(<argument pos:start="283:32" pos:end="283:38"><expr pos:start="283:32" pos:end="283:38"><name pos:start="283:32" pos:end="283:38">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="285:7" pos:end="289:5">else if <condition pos:start="285:15" pos:end="285:29">(<expr pos:start="285:16" pos:end="285:28"><call pos:start="285:16" pos:end="285:28"><name pos:start="285:16" pos:end="285:26">xen_enabled</name><argument_list pos:start="285:27" pos:end="285:28">()</argument_list></call></expr>)</condition> <block pos:start="285:31" pos:end="289:5">{<block_content pos:start="287:9" pos:end="287:48">

        <expr_stmt pos:start="287:9" pos:end="287:48"><expr pos:start="287:9" pos:end="287:47"><name pos:start="287:9" pos:end="287:13">i8259</name> <operator pos:start="287:15" pos:end="287:15">=</operator> <call pos:start="287:17" pos:end="287:47"><name pos:start="287:17" pos:end="287:45">xen_interrupt_controller_init</name><argument_list pos:start="287:46" pos:end="287:47">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="289:7" pos:end="295:5">else <block pos:start="289:12" pos:end="295:5">{<block_content pos:start="291:9" pos:end="293:48">

        <expr_stmt pos:start="291:9" pos:end="291:40"><expr pos:start="291:9" pos:end="291:39"><name pos:start="291:9" pos:end="291:15">cpu_irq</name> <operator pos:start="291:17" pos:end="291:17">=</operator> <call pos:start="291:19" pos:end="291:39"><name pos:start="291:19" pos:end="291:37">pc_allocate_cpu_irq</name><argument_list pos:start="291:38" pos:end="291:39">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:48"><expr pos:start="293:9" pos:end="293:47"><name pos:start="293:9" pos:end="293:13">i8259</name> <operator pos:start="293:15" pos:end="293:15">=</operator> <call pos:start="293:17" pos:end="293:47"><name pos:start="293:17" pos:end="293:26">i8259_init</name><argument_list pos:start="293:27" pos:end="293:47">(<argument pos:start="293:28" pos:end="293:34"><expr pos:start="293:28" pos:end="293:34"><name pos:start="293:28" pos:end="293:34">isa_bus</name></expr></argument>, <argument pos:start="293:37" pos:end="293:46"><expr pos:start="293:37" pos:end="293:46"><name pos:start="293:37" pos:end="293:46"><name pos:start="293:37" pos:end="293:43">cpu_irq</name><index pos:start="293:44" pos:end="293:46">[<expr pos:start="293:45" pos:end="293:45"><literal type="number" pos:start="293:45" pos:end="293:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="299:5" pos:end="303:5">for <control pos:start="299:9" pos:end="299:38">(<init pos:start="299:10" pos:end="299:15"><expr pos:start="299:10" pos:end="299:14"><name pos:start="299:10" pos:end="299:10">i</name> <operator pos:start="299:12" pos:end="299:12">=</operator> <literal type="number" pos:start="299:14" pos:end="299:14">0</literal></expr>;</init> <condition pos:start="299:17" pos:end="299:33"><expr pos:start="299:17" pos:end="299:32"><name pos:start="299:17" pos:end="299:17">i</name> <operator pos:start="299:19" pos:end="299:19">&lt;</operator> <name pos:start="299:21" pos:end="299:32">ISA_NUM_IRQS</name></expr>;</condition> <incr pos:start="299:35" pos:end="299:37"><expr pos:start="299:35" pos:end="299:37"><name pos:start="299:35" pos:end="299:35">i</name><operator pos:start="299:36" pos:end="299:37">++</operator></expr></incr>)</control> <block pos:start="299:40" pos:end="303:5">{<block_content pos:start="301:9" pos:end="301:43">

        <expr_stmt pos:start="301:9" pos:end="301:43"><expr pos:start="301:9" pos:end="301:42"><name pos:start="301:9" pos:end="301:31"><name pos:start="301:9" pos:end="301:17">gsi_state</name><operator pos:start="301:18" pos:end="301:19">-&gt;</operator><name pos:start="301:20" pos:end="301:28">i8259_irq</name><index pos:start="301:29" pos:end="301:31">[<expr pos:start="301:30" pos:end="301:30"><name pos:start="301:30" pos:end="301:30">i</name></expr>]</index></name> <operator pos:start="301:33" pos:end="301:33">=</operator> <name pos:start="301:35" pos:end="301:42"><name pos:start="301:35" pos:end="301:39">i8259</name><index pos:start="301:40" pos:end="301:42">[<expr pos:start="301:41" pos:end="301:41"><name pos:start="301:41" pos:end="301:41">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="305:5" pos:end="309:5"><if pos:start="305:5" pos:end="309:5">if <condition pos:start="305:8" pos:end="305:20">(<expr pos:start="305:9" pos:end="305:19"><name pos:start="305:9" pos:end="305:19">pci_enabled</name></expr>)</condition> <block pos:start="305:22" pos:end="309:5">{<block_content pos:start="307:9" pos:end="307:45">

        <expr_stmt pos:start="307:9" pos:end="307:45"><expr pos:start="307:9" pos:end="307:44"><call pos:start="307:9" pos:end="307:44"><name pos:start="307:9" pos:end="307:23">ioapic_init_gsi</name><argument_list pos:start="307:24" pos:end="307:44">(<argument pos:start="307:25" pos:end="307:33"><expr pos:start="307:25" pos:end="307:33"><name pos:start="307:25" pos:end="307:33">gsi_state</name></expr></argument>, <argument pos:start="307:36" pos:end="307:43"><expr pos:start="307:36" pos:end="307:43"><literal type="string" pos:start="307:36" pos:end="307:43">"i440fx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="311:5" pos:end="311:33"><expr pos:start="311:5" pos:end="311:32"><call pos:start="311:5" pos:end="311:32"><name pos:start="311:5" pos:end="311:20">qdev_init_nofail</name><argument_list pos:start="311:21" pos:end="311:32">(<argument pos:start="311:22" pos:end="311:31"><expr pos:start="311:22" pos:end="311:31"><name pos:start="311:22" pos:end="311:31">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="315:5" pos:end="315:34"><expr pos:start="315:5" pos:end="315:33"><call pos:start="315:5" pos:end="315:33"><name pos:start="315:5" pos:end="315:24">pc_register_ferr_irq</name><argument_list pos:start="315:25" pos:end="315:33">(<argument pos:start="315:26" pos:end="315:32"><expr pos:start="315:26" pos:end="315:32"><name pos:start="315:26" pos:end="315:32"><name pos:start="315:26" pos:end="315:28">gsi</name><index pos:start="315:29" pos:end="315:32">[<expr pos:start="315:30" pos:end="315:31"><literal type="number" pos:start="315:30" pos:end="315:31">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="319:5" pos:end="319:55"><expr pos:start="319:5" pos:end="319:54"><call pos:start="319:5" pos:end="319:54"><name pos:start="319:5" pos:end="319:15">pc_vga_init</name><argument_list pos:start="319:16" pos:end="319:54">(<argument pos:start="319:17" pos:end="319:23"><expr pos:start="319:17" pos:end="319:23"><name pos:start="319:17" pos:end="319:23">isa_bus</name></expr></argument>, <argument pos:start="319:26" pos:end="319:53"><expr pos:start="319:26" pos:end="319:53"><ternary pos:start="319:26" pos:end="319:53"><condition pos:start="319:26" pos:end="319:38"><expr pos:start="319:26" pos:end="319:36"><name pos:start="319:26" pos:end="319:36">pci_enabled</name></expr> ?</condition><then pos:start="319:40" pos:end="319:46"> <expr pos:start="319:40" pos:end="319:46"><name pos:start="319:40" pos:end="319:46">pci_bus</name></expr> </then><else pos:start="319:48" pos:end="319:53">: <expr pos:start="319:50" pos:end="319:53"><name pos:start="319:50" pos:end="319:53">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="323:5" pos:end="323:50"><expr pos:start="323:5" pos:end="323:49"><call pos:start="323:5" pos:end="323:49"><name pos:start="323:5" pos:end="323:10">assert</name><argument_list pos:start="323:11" pos:end="323:49">(<argument pos:start="323:12" pos:end="323:48"><expr pos:start="323:12" pos:end="323:48"><name pos:start="323:12" pos:end="323:29"><name pos:start="323:12" pos:end="323:21">pc_machine</name><operator pos:start="323:22" pos:end="323:23">-&gt;</operator><name pos:start="323:24" pos:end="323:29">vmport</name></name> <operator pos:start="323:31" pos:end="323:32">!=</operator> <name pos:start="323:34" pos:end="323:48">ON_OFF_AUTO_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="325:5" pos:end="329:5"><if pos:start="325:5" pos:end="329:5">if <condition pos:start="325:8" pos:end="325:47">(<expr pos:start="325:9" pos:end="325:46"><name pos:start="325:9" pos:end="325:26"><name pos:start="325:9" pos:end="325:18">pc_machine</name><operator pos:start="325:19" pos:end="325:20">-&gt;</operator><name pos:start="325:21" pos:end="325:26">vmport</name></name> <operator pos:start="325:28" pos:end="325:29">==</operator> <name pos:start="325:31" pos:end="325:46">ON_OFF_AUTO_AUTO</name></expr>)</condition> <block pos:start="325:49" pos:end="329:5">{<block_content pos:start="327:9" pos:end="327:78">

        <expr_stmt pos:start="327:9" pos:end="327:78"><expr pos:start="327:9" pos:end="327:77"><name pos:start="327:9" pos:end="327:26"><name pos:start="327:9" pos:end="327:18">pc_machine</name><operator pos:start="327:19" pos:end="327:20">-&gt;</operator><name pos:start="327:21" pos:end="327:26">vmport</name></name> <operator pos:start="327:28" pos:end="327:28">=</operator> <ternary pos:start="327:30" pos:end="327:77"><condition pos:start="327:30" pos:end="327:44"><expr pos:start="327:30" pos:end="327:42"><call pos:start="327:30" pos:end="327:42"><name pos:start="327:30" pos:end="327:40">xen_enabled</name><argument_list pos:start="327:41" pos:end="327:42">()</argument_list></call></expr> ?</condition><then pos:start="327:46" pos:end="327:60"> <expr pos:start="327:46" pos:end="327:60"><name pos:start="327:46" pos:end="327:60">ON_OFF_AUTO_OFF</name></expr> </then><else pos:start="327:62" pos:end="327:77">: <expr pos:start="327:64" pos:end="327:77"><name pos:start="327:64" pos:end="327:77">ON_OFF_AUTO_ON</name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="333:5" pos:end="333:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="335:5" pos:end="337:70"><expr pos:start="335:5" pos:end="337:69"><call pos:start="335:5" pos:end="337:69"><name pos:start="335:5" pos:end="335:24">pc_basic_device_init</name><argument_list pos:start="335:25" pos:end="337:69">(<argument pos:start="335:26" pos:end="335:32"><expr pos:start="335:26" pos:end="335:32"><name pos:start="335:26" pos:end="335:32">isa_bus</name></expr></argument>, <argument pos:start="335:35" pos:end="335:37"><expr pos:start="335:35" pos:end="335:37"><name pos:start="335:35" pos:end="335:37">gsi</name></expr></argument>, <argument pos:start="335:40" pos:end="335:49"><expr pos:start="335:40" pos:end="335:49"><operator pos:start="335:40" pos:end="335:40">&amp;</operator><name pos:start="335:41" pos:end="335:49">rtc_state</name></expr></argument>, <argument pos:start="335:52" pos:end="335:55"><expr pos:start="335:52" pos:end="335:55"><name pos:start="335:52" pos:end="335:55">true</name></expr></argument>, <argument pos:start="335:58" pos:end="335:64"><expr pos:start="335:58" pos:end="335:64"><operator pos:start="335:58" pos:end="335:58">&amp;</operator><name pos:start="335:59" pos:end="335:64">floppy</name></expr></argument>,

                         <argument pos:start="337:26" pos:end="337:63"><expr pos:start="337:26" pos:end="337:63"><operator pos:start="337:26" pos:end="337:26">(</operator><name pos:start="337:27" pos:end="337:44"><name pos:start="337:27" pos:end="337:36">pc_machine</name><operator pos:start="337:37" pos:end="337:38">-&gt;</operator><name pos:start="337:39" pos:end="337:44">vmport</name></name> <operator pos:start="337:46" pos:end="337:47">!=</operator> <name pos:start="337:49" pos:end="337:62">ON_OFF_AUTO_ON</name><operator pos:start="337:63" pos:end="337:63">)</operator></expr></argument>, <argument pos:start="337:66" pos:end="337:68"><expr pos:start="337:66" pos:end="337:68"><literal type="number" pos:start="337:66" pos:end="337:68">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="341:5" pos:end="341:34"><expr pos:start="341:5" pos:end="341:33"><call pos:start="341:5" pos:end="341:33"><name pos:start="341:5" pos:end="341:15">pc_nic_init</name><argument_list pos:start="341:16" pos:end="341:33">(<argument pos:start="341:17" pos:end="341:23"><expr pos:start="341:17" pos:end="341:23"><name pos:start="341:17" pos:end="341:23">isa_bus</name></expr></argument>, <argument pos:start="341:26" pos:end="341:32"><expr pos:start="341:26" pos:end="341:32"><name pos:start="341:26" pos:end="341:32">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="345:5" pos:end="345:38"><expr pos:start="345:5" pos:end="345:37"><call pos:start="345:5" pos:end="345:37"><name pos:start="345:5" pos:end="345:17">ide_drive_get</name><argument_list pos:start="345:18" pos:end="345:37">(<argument pos:start="345:19" pos:end="345:20"><expr pos:start="345:19" pos:end="345:20"><name pos:start="345:19" pos:end="345:20">hd</name></expr></argument>, <argument pos:start="345:23" pos:end="345:36"><expr pos:start="345:23" pos:end="345:36"><call pos:start="345:23" pos:end="345:36"><name pos:start="345:23" pos:end="345:32">ARRAY_SIZE</name><argument_list pos:start="345:33" pos:end="345:36">(<argument pos:start="345:34" pos:end="345:35"><expr pos:start="345:34" pos:end="345:35"><name pos:start="345:34" pos:end="345:35">hd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="347:5" pos:end="393:5"><if pos:start="347:5" pos:end="365:5">if <condition pos:start="347:8" pos:end="347:20">(<expr pos:start="347:9" pos:end="347:19"><name pos:start="347:9" pos:end="347:19">pci_enabled</name></expr>)</condition> <block pos:start="347:22" pos:end="365:5">{<block_content pos:start="349:9" pos:end="363:60">

        <decl_stmt pos:start="349:9" pos:end="349:23"><decl pos:start="349:9" pos:end="349:22"><type pos:start="349:9" pos:end="349:19"><name pos:start="349:9" pos:end="349:17">PCIDevice</name> <modifier pos:start="349:19" pos:end="349:19">*</modifier></type><name pos:start="349:20" pos:end="349:22">dev</name></decl>;</decl_stmt>

        <if_stmt pos:start="351:9" pos:end="359:9"><if pos:start="351:9" pos:end="355:9">if <condition pos:start="351:12" pos:end="351:26">(<expr pos:start="351:13" pos:end="351:25"><call pos:start="351:13" pos:end="351:25"><name pos:start="351:13" pos:end="351:23">xen_enabled</name><argument_list pos:start="351:24" pos:end="351:25">()</argument_list></call></expr>)</condition> <block pos:start="351:28" pos:end="355:9">{<block_content pos:start="353:13" pos:end="353:71">

            <expr_stmt pos:start="353:13" pos:end="353:71"><expr pos:start="353:13" pos:end="353:70"><name pos:start="353:13" pos:end="353:15">dev</name> <operator pos:start="353:17" pos:end="353:17">=</operator> <call pos:start="353:19" pos:end="353:70"><name pos:start="353:19" pos:end="353:40">pci_piix3_xen_ide_init</name><argument_list pos:start="353:41" pos:end="353:70">(<argument pos:start="353:42" pos:end="353:48"><expr pos:start="353:42" pos:end="353:48"><name pos:start="353:42" pos:end="353:48">pci_bus</name></expr></argument>, <argument pos:start="353:51" pos:end="353:52"><expr pos:start="353:51" pos:end="353:52"><name pos:start="353:51" pos:end="353:52">hd</name></expr></argument>, <argument pos:start="353:55" pos:end="353:69"><expr pos:start="353:55" pos:end="353:69"><name pos:start="353:55" pos:end="353:65">piix3_devfn</name> <operator pos:start="353:67" pos:end="353:67">+</operator> <literal type="number" pos:start="353:69" pos:end="353:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="355:11" pos:end="359:9">else <block pos:start="355:16" pos:end="359:9">{<block_content pos:start="357:13" pos:end="357:67">

            <expr_stmt pos:start="357:13" pos:end="357:67"><expr pos:start="357:13" pos:end="357:66"><name pos:start="357:13" pos:end="357:15">dev</name> <operator pos:start="357:17" pos:end="357:17">=</operator> <call pos:start="357:19" pos:end="357:66"><name pos:start="357:19" pos:end="357:36">pci_piix3_ide_init</name><argument_list pos:start="357:37" pos:end="357:66">(<argument pos:start="357:38" pos:end="357:44"><expr pos:start="357:38" pos:end="357:44"><name pos:start="357:38" pos:end="357:44">pci_bus</name></expr></argument>, <argument pos:start="357:47" pos:end="357:48"><expr pos:start="357:47" pos:end="357:48"><name pos:start="357:47" pos:end="357:48">hd</name></expr></argument>, <argument pos:start="357:51" pos:end="357:65"><expr pos:start="357:51" pos:end="357:65"><name pos:start="357:51" pos:end="357:61">piix3_devfn</name> <operator pos:start="357:63" pos:end="357:63">+</operator> <literal type="number" pos:start="357:65" pos:end="357:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="361:9" pos:end="361:60"><expr pos:start="361:9" pos:end="361:59"><name pos:start="361:9" pos:end="361:17"><name pos:start="361:9" pos:end="361:14">idebus</name><index pos:start="361:15" pos:end="361:17">[<expr pos:start="361:16" pos:end="361:16"><literal type="number" pos:start="361:16" pos:end="361:16">0</literal></expr>]</index></name> <operator pos:start="361:19" pos:end="361:19">=</operator> <call pos:start="361:21" pos:end="361:59"><name pos:start="361:21" pos:end="361:38">qdev_get_child_bus</name><argument_list pos:start="361:39" pos:end="361:59">(<argument pos:start="361:40" pos:end="361:49"><expr pos:start="361:40" pos:end="361:49"><operator pos:start="361:40" pos:end="361:40">&amp;</operator><name pos:start="361:41" pos:end="361:49"><name pos:start="361:41" pos:end="361:43">dev</name><operator pos:start="361:44" pos:end="361:45">-&gt;</operator><name pos:start="361:46" pos:end="361:49">qdev</name></name></expr></argument>, <argument pos:start="361:52" pos:end="361:58"><expr pos:start="361:52" pos:end="361:58"><literal type="string" pos:start="361:52" pos:end="361:58">"ide.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="363:9" pos:end="363:60"><expr pos:start="363:9" pos:end="363:59"><name pos:start="363:9" pos:end="363:17"><name pos:start="363:9" pos:end="363:14">idebus</name><index pos:start="363:15" pos:end="363:17">[<expr pos:start="363:16" pos:end="363:16"><literal type="number" pos:start="363:16" pos:end="363:16">1</literal></expr>]</index></name> <operator pos:start="363:19" pos:end="363:19">=</operator> <call pos:start="363:21" pos:end="363:59"><name pos:start="363:21" pos:end="363:38">qdev_get_child_bus</name><argument_list pos:start="363:39" pos:end="363:59">(<argument pos:start="363:40" pos:end="363:49"><expr pos:start="363:40" pos:end="363:49"><operator pos:start="363:40" pos:end="363:40">&amp;</operator><name pos:start="363:41" pos:end="363:49"><name pos:start="363:41" pos:end="363:43">dev</name><operator pos:start="363:44" pos:end="363:45">-&gt;</operator><name pos:start="363:46" pos:end="363:49">qdev</name></name></expr></argument>, <argument pos:start="363:52" pos:end="363:58"><expr pos:start="363:52" pos:end="363:58"><literal type="string" pos:start="363:52" pos:end="363:58">"ide.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="365:7" pos:end="393:5">else <block pos:start="365:12" pos:end="393:5">{<block_content pos:start="367:9" pos:end="391:9">

        <for pos:start="367:9" pos:end="391:9">for<control pos:start="367:12" pos:end="367:40">(<init pos:start="367:13" pos:end="367:18"><expr pos:start="367:13" pos:end="367:17"><name pos:start="367:13" pos:end="367:13">i</name> <operator pos:start="367:15" pos:end="367:15">=</operator> <literal type="number" pos:start="367:17" pos:end="367:17">0</literal></expr>;</init> <condition pos:start="367:20" pos:end="367:35"><expr pos:start="367:20" pos:end="367:34"><name pos:start="367:20" pos:end="367:20">i</name> <operator pos:start="367:22" pos:end="367:22">&lt;</operator> <name pos:start="367:24" pos:end="367:34">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="367:37" pos:end="367:39"><expr pos:start="367:37" pos:end="367:39"><name pos:start="367:37" pos:end="367:37">i</name><operator pos:start="367:38" pos:end="367:39">++</operator></expr></incr>)</control> <block pos:start="367:42" pos:end="391:9">{<block_content pos:start="369:13" pos:end="389:65">

            <decl_stmt pos:start="369:13" pos:end="369:27"><decl pos:start="369:13" pos:end="369:26"><type pos:start="369:13" pos:end="369:23"><name pos:start="369:13" pos:end="369:21">ISADevice</name> <modifier pos:start="369:23" pos:end="369:23">*</modifier></type><name pos:start="369:24" pos:end="369:26">dev</name></decl>;</decl_stmt>

            <decl_stmt pos:start="371:13" pos:end="371:37"><decl pos:start="371:13" pos:end="371:36"><type pos:start="371:13" pos:end="371:16"><name pos:start="371:13" pos:end="371:16">char</name></type> <name pos:start="371:18" pos:end="371:26"><name pos:start="371:18" pos:end="371:24">busname</name><index pos:start="371:25" pos:end="371:26">[]</index></name> <init pos:start="371:28" pos:end="371:36">= <expr pos:start="371:30" pos:end="371:36"><literal type="string" pos:start="371:30" pos:end="371:36">"ide.0"</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="373:13" pos:end="377:79"><expr pos:start="373:13" pos:end="377:78"><name pos:start="373:13" pos:end="373:15">dev</name> <operator pos:start="373:17" pos:end="373:17">=</operator> <call pos:start="373:19" pos:end="377:78"><name pos:start="373:19" pos:end="373:30">isa_ide_init</name><argument_list pos:start="373:31" pos:end="377:78">(<argument pos:start="373:32" pos:end="373:38"><expr pos:start="373:32" pos:end="373:38"><name pos:start="373:32" pos:end="373:38">isa_bus</name></expr></argument>, <argument pos:start="373:41" pos:end="373:53"><expr pos:start="373:41" pos:end="373:53"><name pos:start="373:41" pos:end="373:53"><name pos:start="373:41" pos:end="373:50">ide_iobase</name><index pos:start="373:51" pos:end="373:53">[<expr pos:start="373:52" pos:end="373:52"><name pos:start="373:52" pos:end="373:52">i</name></expr>]</index></name></expr></argument>, <argument pos:start="373:56" pos:end="373:69"><expr pos:start="373:56" pos:end="373:69"><name pos:start="373:56" pos:end="373:69"><name pos:start="373:56" pos:end="373:66">ide_iobase2</name><index pos:start="373:67" pos:end="373:69">[<expr pos:start="373:68" pos:end="373:68"><name pos:start="373:68" pos:end="373:68">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="375:32" pos:end="375:41"><expr pos:start="375:32" pos:end="375:41"><name pos:start="375:32" pos:end="375:41"><name pos:start="375:32" pos:end="375:38">ide_irq</name><index pos:start="375:39" pos:end="375:41">[<expr pos:start="375:40" pos:end="375:40"><name pos:start="375:40" pos:end="375:40">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="377:32" pos:end="377:51"><expr pos:start="377:32" pos:end="377:51"><name pos:start="377:32" pos:end="377:51"><name pos:start="377:32" pos:end="377:33">hd</name><index pos:start="377:34" pos:end="377:51">[<expr pos:start="377:35" pos:end="377:50"><name pos:start="377:35" pos:end="377:46">MAX_IDE_DEVS</name> <operator pos:start="377:48" pos:end="377:48">*</operator> <name pos:start="377:50" pos:end="377:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="377:54" pos:end="377:77"><expr pos:start="377:54" pos:end="377:77"><name pos:start="377:54" pos:end="377:77"><name pos:start="377:54" pos:end="377:55">hd</name><index pos:start="377:56" pos:end="377:77">[<expr pos:start="377:57" pos:end="377:76"><name pos:start="377:57" pos:end="377:68">MAX_IDE_DEVS</name> <operator pos:start="377:70" pos:end="377:70">*</operator> <name pos:start="377:72" pos:end="377:72">i</name> <operator pos:start="377:74" pos:end="377:74">+</operator> <literal type="number" pos:start="377:76" pos:end="377:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="379:13" pos:end="385:15">/*

             * The ide bus name is ide.0 for the first bus and ide.1 for the

             * second one.

             */</comment>

            <expr_stmt pos:start="387:13" pos:end="387:33"><expr pos:start="387:13" pos:end="387:32"><name pos:start="387:13" pos:end="387:22"><name pos:start="387:13" pos:end="387:19">busname</name><index pos:start="387:20" pos:end="387:22">[<expr pos:start="387:21" pos:end="387:21"><literal type="number" pos:start="387:21" pos:end="387:21">4</literal></expr>]</index></name> <operator pos:start="387:24" pos:end="387:24">=</operator> <literal type="char" pos:start="387:26" pos:end="387:28">'0'</literal> <operator pos:start="387:30" pos:end="387:30">+</operator> <name pos:start="387:32" pos:end="387:32">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:65"><expr pos:start="389:13" pos:end="389:64"><name pos:start="389:13" pos:end="389:21"><name pos:start="389:13" pos:end="389:18">idebus</name><index pos:start="389:19" pos:end="389:21">[<expr pos:start="389:20" pos:end="389:20"><name pos:start="389:20" pos:end="389:20">i</name></expr>]</index></name> <operator pos:start="389:23" pos:end="389:23">=</operator> <call pos:start="389:25" pos:end="389:64"><name pos:start="389:25" pos:end="389:42">qdev_get_child_bus</name><argument_list pos:start="389:43" pos:end="389:64">(<argument pos:start="389:44" pos:end="389:54"><expr pos:start="389:44" pos:end="389:54"><call pos:start="389:44" pos:end="389:54"><name pos:start="389:44" pos:end="389:49">DEVICE</name><argument_list pos:start="389:50" pos:end="389:54">(<argument pos:start="389:51" pos:end="389:53"><expr pos:start="389:51" pos:end="389:53"><name pos:start="389:51" pos:end="389:53">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="389:57" pos:end="389:63"><expr pos:start="389:57" pos:end="389:63"><name pos:start="389:57" pos:end="389:63">busname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="397:5" pos:end="399:67"><expr pos:start="397:5" pos:end="399:66"><call pos:start="397:5" pos:end="399:66"><name pos:start="397:5" pos:end="397:16">pc_cmos_init</name><argument_list pos:start="397:17" pos:end="399:66">(<argument pos:start="397:18" pos:end="397:34"><expr pos:start="397:18" pos:end="397:34"><name pos:start="397:18" pos:end="397:34">below_4g_mem_size</name></expr></argument>, <argument pos:start="397:37" pos:end="397:53"><expr pos:start="397:37" pos:end="397:53"><name pos:start="397:37" pos:end="397:53">above_4g_mem_size</name></expr></argument>, <argument pos:start="397:56" pos:end="397:74"><expr pos:start="397:56" pos:end="397:74"><name pos:start="397:56" pos:end="397:74"><name pos:start="397:56" pos:end="397:62">machine</name><operator pos:start="397:63" pos:end="397:64">-&gt;</operator><name pos:start="397:65" pos:end="397:74">boot_order</name></name></expr></argument>,

                 <argument pos:start="399:18" pos:end="399:24"><expr pos:start="399:18" pos:end="399:24"><name pos:start="399:18" pos:end="399:24">machine</name></expr></argument>, <argument pos:start="399:27" pos:end="399:32"><expr pos:start="399:27" pos:end="399:32"><name pos:start="399:27" pos:end="399:32">floppy</name></expr></argument>, <argument pos:start="399:35" pos:end="399:43"><expr pos:start="399:35" pos:end="399:43"><name pos:start="399:35" pos:end="399:43"><name pos:start="399:35" pos:end="399:40">idebus</name><index pos:start="399:41" pos:end="399:43">[<expr pos:start="399:42" pos:end="399:42"><literal type="number" pos:start="399:42" pos:end="399:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="399:46" pos:end="399:54"><expr pos:start="399:46" pos:end="399:54"><name pos:start="399:46" pos:end="399:54"><name pos:start="399:46" pos:end="399:51">idebus</name><index pos:start="399:52" pos:end="399:54">[<expr pos:start="399:53" pos:end="399:53"><literal type="number" pos:start="399:53" pos:end="399:53">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="399:57" pos:end="399:65"><expr pos:start="399:57" pos:end="399:65"><name pos:start="399:57" pos:end="399:65">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="403:5" pos:end="407:5"><if pos:start="403:5" pos:end="407:5">if <condition pos:start="403:8" pos:end="403:37">(<expr pos:start="403:9" pos:end="403:36"><name pos:start="403:9" pos:end="403:19">pci_enabled</name> <operator pos:start="403:21" pos:end="403:22">&amp;&amp;</operator> <call pos:start="403:24" pos:end="403:36"><name pos:start="403:24" pos:end="403:34">usb_enabled</name><argument_list pos:start="403:35" pos:end="403:36">()</argument_list></call></expr>)</condition> <block pos:start="403:39" pos:end="407:5">{<block_content pos:start="405:9" pos:end="405:70">

        <expr_stmt pos:start="405:9" pos:end="405:70"><expr pos:start="405:9" pos:end="405:69"><call pos:start="405:9" pos:end="405:69"><name pos:start="405:9" pos:end="405:25">pci_create_simple</name><argument_list pos:start="405:26" pos:end="405:69">(<argument pos:start="405:27" pos:end="405:33"><expr pos:start="405:27" pos:end="405:33"><name pos:start="405:27" pos:end="405:33">pci_bus</name></expr></argument>, <argument pos:start="405:36" pos:end="405:50"><expr pos:start="405:36" pos:end="405:50"><name pos:start="405:36" pos:end="405:46">piix3_devfn</name> <operator pos:start="405:48" pos:end="405:48">+</operator> <literal type="number" pos:start="405:50" pos:end="405:50">2</literal></expr></argument>, <argument pos:start="405:53" pos:end="405:68"><expr pos:start="405:53" pos:end="405:68"><literal type="string" pos:start="405:53" pos:end="405:68">"piix3-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="411:5" pos:end="447:5"><if pos:start="411:5" pos:end="447:5">if <condition pos:start="411:8" pos:end="411:36">(<expr pos:start="411:9" pos:end="411:35"><name pos:start="411:9" pos:end="411:19">pci_enabled</name> <operator pos:start="411:21" pos:end="411:22">&amp;&amp;</operator> <name pos:start="411:24" pos:end="411:35">acpi_enabled</name></expr>)</condition> <block pos:start="411:38" pos:end="447:5">{<block_content pos:start="413:9" pos:end="445:76">

        <decl_stmt pos:start="413:9" pos:end="413:30"><decl pos:start="413:9" pos:end="413:29"><type pos:start="413:9" pos:end="413:21"><name pos:start="413:9" pos:end="413:19">DeviceState</name> <modifier pos:start="413:21" pos:end="413:21">*</modifier></type><name pos:start="413:22" pos:end="413:29">piix4_pm</name></decl>;</decl_stmt>

        <decl_stmt pos:start="415:9" pos:end="415:22"><decl pos:start="415:9" pos:end="415:21"><type pos:start="415:9" pos:end="415:16"><name pos:start="415:9" pos:end="415:14">I2CBus</name> <modifier pos:start="415:16" pos:end="415:16">*</modifier></type><name pos:start="415:17" pos:end="415:21">smbus</name></decl>;</decl_stmt>



        <expr_stmt pos:start="419:9" pos:end="419:74"><expr pos:start="419:9" pos:end="419:73"><name pos:start="419:9" pos:end="419:15">smi_irq</name> <operator pos:start="419:17" pos:end="419:17">=</operator> <call pos:start="419:19" pos:end="419:73"><name pos:start="419:19" pos:end="419:36">qemu_allocate_irqs</name><argument_list pos:start="419:37" pos:end="419:73">(<argument pos:start="419:38" pos:end="419:58"><expr pos:start="419:38" pos:end="419:58"><name pos:start="419:38" pos:end="419:58">pc_acpi_smi_interrupt</name></expr></argument>, <argument pos:start="419:61" pos:end="419:69"><expr pos:start="419:61" pos:end="419:69"><name pos:start="419:61" pos:end="419:69">first_cpu</name></expr></argument>, <argument pos:start="419:72" pos:end="419:72"><expr pos:start="419:72" pos:end="419:72"><literal type="number" pos:start="419:72" pos:end="419:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="421:9" pos:end="421:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <expr_stmt pos:start="423:9" pos:end="427:64"><expr pos:start="423:9" pos:end="427:63"><name pos:start="423:9" pos:end="423:13">smbus</name> <operator pos:start="423:15" pos:end="423:15">=</operator> <call pos:start="423:17" pos:end="427:63"><name pos:start="423:17" pos:end="423:29">piix4_pm_init</name><argument_list pos:start="423:30" pos:end="427:63">(<argument pos:start="423:31" pos:end="423:37"><expr pos:start="423:31" pos:end="423:37"><name pos:start="423:31" pos:end="423:37">pci_bus</name></expr></argument>, <argument pos:start="423:40" pos:end="423:54"><expr pos:start="423:40" pos:end="423:54"><name pos:start="423:40" pos:end="423:50">piix3_devfn</name> <operator pos:start="423:52" pos:end="423:52">+</operator> <literal type="number" pos:start="423:54" pos:end="423:54">3</literal></expr></argument>, <argument pos:start="423:57" pos:end="423:62"><expr pos:start="423:57" pos:end="423:62"><literal type="number" pos:start="423:57" pos:end="423:62">0xb100</literal></expr></argument>,

                              <argument pos:start="425:31" pos:end="425:36"><expr pos:start="425:31" pos:end="425:36"><name pos:start="425:31" pos:end="425:36"><name pos:start="425:31" pos:end="425:33">gsi</name><index pos:start="425:34" pos:end="425:36">[<expr pos:start="425:35" pos:end="425:35"><literal type="number" pos:start="425:35" pos:end="425:35">9</literal></expr>]</index></name></expr></argument>, <argument pos:start="425:39" pos:end="425:46"><expr pos:start="425:39" pos:end="425:46"><operator pos:start="425:39" pos:end="425:39">*</operator><name pos:start="425:40" pos:end="425:46">smi_irq</name></expr></argument>,

                              <argument pos:start="427:31" pos:end="427:43"><expr pos:start="427:31" pos:end="427:43"><call pos:start="427:31" pos:end="427:43"><name pos:start="427:31" pos:end="427:41">kvm_enabled</name><argument_list pos:start="427:42" pos:end="427:43">()</argument_list></call></expr></argument>, <argument pos:start="427:46" pos:end="427:51"><expr pos:start="427:46" pos:end="427:51"><name pos:start="427:46" pos:end="427:51">fw_cfg</name></expr></argument>, <argument pos:start="427:54" pos:end="427:62"><expr pos:start="427:54" pos:end="427:62"><operator pos:start="427:54" pos:end="427:54">&amp;</operator><name pos:start="427:55" pos:end="427:62">piix4_pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="429:9" pos:end="429:45"><expr pos:start="429:9" pos:end="429:44"><call pos:start="429:9" pos:end="429:44"><name pos:start="429:9" pos:end="429:25">smbus_eeprom_init</name><argument_list pos:start="429:26" pos:end="429:44">(<argument pos:start="429:27" pos:end="429:31"><expr pos:start="429:27" pos:end="429:31"><name pos:start="429:27" pos:end="429:31">smbus</name></expr></argument>, <argument pos:start="429:34" pos:end="429:34"><expr pos:start="429:34" pos:end="429:34"><literal type="number" pos:start="429:34" pos:end="429:34">8</literal></expr></argument>, <argument pos:start="429:37" pos:end="429:40"><expr pos:start="429:37" pos:end="429:40"><name pos:start="429:37" pos:end="429:40">NULL</name></expr></argument>, <argument pos:start="429:43" pos:end="429:43"><expr pos:start="429:43" pos:end="429:43"><literal type="number" pos:start="429:43" pos:end="429:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="433:9" pos:end="441:79"><expr pos:start="433:9" pos:end="441:78"><call pos:start="433:9" pos:end="441:78"><name pos:start="433:9" pos:end="433:32">object_property_add_link</name><argument_list pos:start="433:33" pos:end="441:78">(<argument pos:start="433:34" pos:end="433:48"><expr pos:start="433:34" pos:end="433:48"><call pos:start="433:34" pos:end="433:48"><name pos:start="433:34" pos:end="433:39">OBJECT</name><argument_list pos:start="433:40" pos:end="433:48">(<argument pos:start="433:41" pos:end="433:47"><expr pos:start="433:41" pos:end="433:47"><name pos:start="433:41" pos:end="433:47">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="433:51" pos:end="433:77"><expr pos:start="433:51" pos:end="433:77"><name pos:start="433:51" pos:end="433:77">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>,

                                 <argument pos:start="435:34" pos:end="435:53"><expr pos:start="435:34" pos:end="435:53"><name pos:start="435:34" pos:end="435:53">TYPE_HOTPLUG_HANDLER</name></expr></argument>,

                                 <argument pos:start="437:34" pos:end="437:65"><expr pos:start="437:34" pos:end="437:65"><operator pos:start="437:34" pos:end="437:34">(</operator><name pos:start="437:35" pos:end="437:40">Object</name> <operator pos:start="437:42" pos:end="437:42">*</operator><operator pos:start="437:43" pos:end="437:43">*</operator><operator pos:start="437:44" pos:end="437:44">)</operator><operator pos:start="437:45" pos:end="437:45">&amp;</operator><name pos:start="437:46" pos:end="437:65"><name pos:start="437:46" pos:end="437:55">pc_machine</name><operator pos:start="437:56" pos:end="437:57">-&gt;</operator><name pos:start="437:58" pos:end="437:65">acpi_dev</name></name></expr></argument>,

                                 <argument pos:start="439:34" pos:end="439:63"><expr pos:start="439:34" pos:end="439:63"><name pos:start="439:34" pos:end="439:63">object_property_allow_set_link</name></expr></argument>,

                                 <argument pos:start="441:34" pos:end="441:63"><expr pos:start="441:34" pos:end="441:63"><name pos:start="441:34" pos:end="441:63">OBJ_PROP_LINK_UNREF_ON_RELEASE</name></expr></argument>, <argument pos:start="441:66" pos:end="441:77"><expr pos:start="441:66" pos:end="441:77"><operator pos:start="441:66" pos:end="441:66">&amp;</operator><name pos:start="441:67" pos:end="441:77">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="443:9" pos:end="445:76"><expr pos:start="443:9" pos:end="445:75"><call pos:start="443:9" pos:end="445:75"><name pos:start="443:9" pos:end="443:32">object_property_set_link</name><argument_list pos:start="443:33" pos:end="445:75">(<argument pos:start="443:34" pos:end="443:48"><expr pos:start="443:34" pos:end="443:48"><call pos:start="443:34" pos:end="443:48"><name pos:start="443:34" pos:end="443:39">OBJECT</name><argument_list pos:start="443:40" pos:end="443:48">(<argument pos:start="443:41" pos:end="443:47"><expr pos:start="443:41" pos:end="443:47"><name pos:start="443:41" pos:end="443:47">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="443:51" pos:end="443:66"><expr pos:start="443:51" pos:end="443:66"><call pos:start="443:51" pos:end="443:66"><name pos:start="443:51" pos:end="443:56">OBJECT</name><argument_list pos:start="443:57" pos:end="443:66">(<argument pos:start="443:58" pos:end="443:65"><expr pos:start="443:58" pos:end="443:65"><name pos:start="443:58" pos:end="443:65">piix4_pm</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="445:34" pos:end="445:60"><expr pos:start="445:34" pos:end="445:60"><name pos:start="445:34" pos:end="445:60">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>, <argument pos:start="445:63" pos:end="445:74"><expr pos:start="445:63" pos:end="445:74"><operator pos:start="445:63" pos:end="445:63">&amp;</operator><name pos:start="445:64" pos:end="445:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="451:5" pos:end="455:5"><if pos:start="451:5" pos:end="455:5">if <condition pos:start="451:8" pos:end="451:20">(<expr pos:start="451:9" pos:end="451:19"><name pos:start="451:9" pos:end="451:19">pci_enabled</name></expr>)</condition> <block pos:start="451:22" pos:end="455:5">{<block_content pos:start="453:9" pos:end="453:36">

        <expr_stmt pos:start="453:9" pos:end="453:36"><expr pos:start="453:9" pos:end="453:35"><call pos:start="453:9" pos:end="453:35"><name pos:start="453:9" pos:end="453:26">pc_pci_device_init</name><argument_list pos:start="453:27" pos:end="453:35">(<argument pos:start="453:28" pos:end="453:34"><expr pos:start="453:28" pos:end="453:34"><name pos:start="453:28" pos:end="453:34">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
