<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17019.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">imx_gpt_write</name><parameter_list pos:start="1:26" pos:end="3:40">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:30">void</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:38">opaque</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:46">hwaddr</name></type> <name pos:start="1:48" pos:end="1:53">offset</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:69"><decl pos:start="1:56" pos:end="1:69"><type pos:start="1:56" pos:end="1:69"><name pos:start="1:56" pos:end="1:63">uint64_t</name></type> <name pos:start="1:65" pos:end="1:69">value</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:39"><decl pos:start="3:27" pos:end="3:39"><type pos:start="3:27" pos:end="3:39"><name pos:start="3:27" pos:end="3:34">unsigned</name></type> <name pos:start="3:36" pos:end="3:39">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="179:1">{<block_content pos:start="7:5" pos:end="177:5">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">IMXGPTState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:36">= <expr pos:start="7:22" pos:end="7:36"><call pos:start="7:22" pos:end="7:36"><name pos:start="7:22" pos:end="7:28">IMX_GPT</name><argument_list pos:start="7:29" pos:end="7:36">(<argument pos:start="7:30" pos:end="7:35"><expr pos:start="7:30" pos:end="7:35"><name pos:start="7:30" pos:end="7:35">opaque</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:19">oldreg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">reg</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:25">offset</name> <operator pos:start="11:27" pos:end="11:28">&gt;&gt;</operator> <literal type="number" pos:start="11:30" pos:end="11:30">2</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="17:29"><expr pos:start="15:5" pos:end="17:28"><call pos:start="15:5" pos:end="17:28"><name pos:start="15:5" pos:end="15:11">DPRINTF</name><argument_list pos:start="15:12" pos:end="17:28">(<argument pos:start="15:13" pos:end="15:36"><expr pos:start="15:13" pos:end="15:36"><literal type="string" pos:start="15:13" pos:end="15:36">"(%s, value = 0x%08x)\n"</literal></expr></argument>, <argument pos:start="15:39" pos:end="15:59"><expr pos:start="15:39" pos:end="15:59"><call pos:start="15:39" pos:end="15:59"><name pos:start="15:39" pos:end="15:54">imx_gpt_reg_name</name><argument_list pos:start="15:55" pos:end="15:59">(<argument pos:start="15:56" pos:end="15:58"><expr pos:start="15:56" pos:end="15:58"><name pos:start="15:56" pos:end="15:58">reg</name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="17:13" pos:end="17:27"><expr pos:start="17:13" pos:end="17:27"><operator pos:start="17:13" pos:end="17:13">(</operator><name pos:start="17:14" pos:end="17:21">uint32_t</name><operator pos:start="17:22" pos:end="17:22">)</operator><name pos:start="17:23" pos:end="17:27">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="21:5" pos:end="177:5">switch <condition pos:start="21:12" pos:end="21:16">(<expr pos:start="21:13" pos:end="21:15"><name pos:start="21:13" pos:end="21:15">reg</name></expr>)</condition> <block pos:start="21:18" pos:end="177:5">{<block_content pos:start="23:5" pos:end="175:14">

    <case pos:start="23:5" pos:end="23:11">case <expr pos:start="23:10" pos:end="23:10"><literal type="number" pos:start="23:10" pos:end="23:10">0</literal></expr>:</case>

        <expr_stmt pos:start="25:9" pos:end="25:23"><expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:14">oldreg</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:22"><name pos:start="25:18" pos:end="25:18">s</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:22">cr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:13"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:13">cr</name></name> <operator pos:start="27:15" pos:end="27:15">=</operator> <name pos:start="27:17" pos:end="27:21">value</name> <operator pos:start="27:23" pos:end="27:23">&amp;</operator> <operator pos:start="27:25" pos:end="27:25">~</operator><literal type="number" pos:start="27:26" pos:end="27:31">0x7c14</literal></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="69:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:31">(<expr pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:17"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:17">cr</name></name> <operator pos:start="29:19" pos:end="29:19">&amp;</operator> <name pos:start="29:21" pos:end="29:30">GPT_CR_SWR</name></expr>)</condition> <block pos:start="29:33" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:37"> <comment type="block" pos:start="29:35" pos:end="29:51">/* force reset */</comment>

            <comment type="block" pos:start="31:13" pos:end="31:34">/* handle the reset */</comment>

            <expr_stmt pos:start="33:13" pos:end="33:37"><expr pos:start="33:13" pos:end="33:36"><call pos:start="33:13" pos:end="33:36"><name pos:start="33:13" pos:end="33:25">imx_gpt_reset</name><argument_list pos:start="33:26" pos:end="33:36">(<argument pos:start="33:27" pos:end="33:35"><expr pos:start="33:27" pos:end="33:35"><call pos:start="33:27" pos:end="33:35"><name pos:start="33:27" pos:end="33:32">DEVICE</name><argument_list pos:start="33:33" pos:end="33:35">(<argument pos:start="33:34" pos:end="33:34"><expr pos:start="33:34" pos:end="33:34"><name pos:start="33:34" pos:end="33:34">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="35:11" pos:end="69:9">else <block pos:start="35:16" pos:end="69:9">{<block_content pos:start="39:13" pos:end="67:13">

            <comment type="block" pos:start="37:13" pos:end="37:64">/* set our freq, as the source might have changed */</comment>

            <expr_stmt pos:start="39:13" pos:end="39:32"><expr pos:start="39:13" pos:end="39:31"><call pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:28">imx_gpt_set_freq</name><argument_list pos:start="39:29" pos:end="39:31">(<argument pos:start="39:30" pos:end="39:30"><expr pos:start="39:30" pos:end="39:30"><name pos:start="39:30" pos:end="39:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="43:13" pos:end="67:13"><if pos:start="43:13" pos:end="67:13">if <condition pos:start="43:16" pos:end="43:45">(<expr pos:start="43:17" pos:end="43:44"><operator pos:start="43:17" pos:end="43:17">(</operator><name pos:start="43:18" pos:end="43:23">oldreg</name> <operator pos:start="43:25" pos:end="43:25">^</operator> <name pos:start="43:27" pos:end="43:31"><name pos:start="43:27" pos:end="43:27">s</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:31">cr</name></name><operator pos:start="43:32" pos:end="43:32">)</operator> <operator pos:start="43:34" pos:end="43:34">&amp;</operator> <name pos:start="43:36" pos:end="43:44">GPT_CR_EN</name></expr>)</condition> <block pos:start="43:47" pos:end="67:13">{<block_content pos:start="45:17" pos:end="65:17">

                <if_stmt pos:start="45:17" pos:end="65:17"><if pos:start="45:17" pos:end="59:17">if <condition pos:start="45:20" pos:end="45:38">(<expr pos:start="45:21" pos:end="45:37"><name pos:start="45:21" pos:end="45:25"><name pos:start="45:21" pos:end="45:21">s</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:25">cr</name></name> <operator pos:start="45:27" pos:end="45:27">&amp;</operator> <name pos:start="45:29" pos:end="45:37">GPT_CR_EN</name></expr>)</condition> <block pos:start="45:40" pos:end="59:17">{<block_content pos:start="47:21" pos:end="57:44">

                    <if_stmt pos:start="47:21" pos:end="55:21"><if pos:start="47:21" pos:end="55:21">if <condition pos:start="47:24" pos:end="47:45">(<expr pos:start="47:25" pos:end="47:44"><name pos:start="47:25" pos:end="47:29"><name pos:start="47:25" pos:end="47:25">s</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:29">cr</name></name> <operator pos:start="47:31" pos:end="47:31">&amp;</operator> <name pos:start="47:33" pos:end="47:44">GPT_CR_ENMOD</name></expr>)</condition> <block pos:start="47:47" pos:end="55:21">{<block_content pos:start="49:25" pos:end="53:63">

                        <expr_stmt pos:start="49:25" pos:end="49:52"><expr pos:start="49:25" pos:end="49:51"><name pos:start="49:25" pos:end="49:39"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:39">next_timeout</name></name> <operator pos:start="49:41" pos:end="49:41">=</operator> <name pos:start="49:43" pos:end="49:51">TIMER_MAX</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="51:25" pos:end="51:62"><expr pos:start="51:25" pos:end="51:61"><call pos:start="51:25" pos:end="51:61"><name pos:start="51:25" pos:end="51:40">ptimer_set_count</name><argument_list pos:start="51:41" pos:end="51:61">(<argument pos:start="51:42" pos:end="51:49"><expr pos:start="51:42" pos:end="51:49"><name pos:start="51:42" pos:end="51:49"><name pos:start="51:42" pos:end="51:42">s</name><operator pos:start="51:43" pos:end="51:44">-&gt;</operator><name pos:start="51:45" pos:end="51:49">timer</name></name></expr></argument>, <argument pos:start="51:52" pos:end="51:60"><expr pos:start="51:52" pos:end="51:60"><name pos:start="51:52" pos:end="51:60">TIMER_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="53:25" pos:end="53:63"><expr pos:start="53:25" pos:end="53:62"><call pos:start="53:25" pos:end="53:62"><name pos:start="53:25" pos:end="53:52">imx_gpt_compute_next_timeout</name><argument_list pos:start="53:53" pos:end="53:62">(<argument pos:start="53:54" pos:end="53:54"><expr pos:start="53:54" pos:end="53:54"><name pos:start="53:54" pos:end="53:54">s</name></expr></argument>, <argument pos:start="53:57" pos:end="53:61"><expr pos:start="53:57" pos:end="53:61"><name pos:start="53:57" pos:end="53:61">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="57:21" pos:end="57:44"><expr pos:start="57:21" pos:end="57:43"><call pos:start="57:21" pos:end="57:43"><name pos:start="57:21" pos:end="57:30">ptimer_run</name><argument_list pos:start="57:31" pos:end="57:43">(<argument pos:start="57:32" pos:end="57:39"><expr pos:start="57:32" pos:end="57:39"><name pos:start="57:32" pos:end="57:39"><name pos:start="57:32" pos:end="57:32">s</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:39">timer</name></name></expr></argument>, <argument pos:start="57:42" pos:end="57:42"><expr pos:start="57:42" pos:end="57:42"><literal type="number" pos:start="57:42" pos:end="57:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="59:19" pos:end="65:17">else <block pos:start="59:24" pos:end="65:17">{<block_content pos:start="63:21" pos:end="63:42">

                    <comment type="block" pos:start="61:21" pos:end="61:36">/* stop timer */</comment>

                    <expr_stmt pos:start="63:21" pos:end="63:42"><expr pos:start="63:21" pos:end="63:41"><call pos:start="63:21" pos:end="63:41"><name pos:start="63:21" pos:end="63:31">ptimer_stop</name><argument_list pos:start="63:32" pos:end="63:41">(<argument pos:start="63:33" pos:end="63:40"><expr pos:start="63:33" pos:end="63:40"><name pos:start="63:33" pos:end="63:40"><name pos:start="63:33" pos:end="63:33">s</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:40">timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>



    <case pos:start="75:5" pos:end="75:11">case <expr pos:start="75:10" pos:end="75:10"><literal type="number" pos:start="75:10" pos:end="75:10">1</literal></expr>:</case> <comment type="block" pos:start="75:13" pos:end="75:27">/* Prescaler */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:13"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:13">pr</name></name> <operator pos:start="77:15" pos:end="77:15">=</operator> <name pos:start="77:17" pos:end="77:21">value</name> <operator pos:start="77:23" pos:end="77:23">&amp;</operator> <literal type="number" pos:start="77:25" pos:end="77:29">0xfff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:28"><expr pos:start="79:9" pos:end="79:27"><call pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:24">imx_gpt_set_freq</name><argument_list pos:start="79:25" pos:end="79:27">(<argument pos:start="79:26" pos:end="79:26"><expr pos:start="79:26" pos:end="79:26"><name pos:start="79:26" pos:end="79:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>



    <case pos:start="85:5" pos:end="85:11">case <expr pos:start="85:10" pos:end="85:10"><literal type="number" pos:start="85:10" pos:end="85:10">2</literal></expr>:</case> <comment type="block" pos:start="85:13" pos:end="85:20">/* SR */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:33"><expr pos:start="87:9" pos:end="87:32"><name pos:start="87:9" pos:end="87:13"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:13">sr</name></name> <operator pos:start="87:15" pos:end="87:16">&amp;=</operator> <operator pos:start="87:18" pos:end="87:18">~</operator><operator pos:start="87:19" pos:end="87:19">(</operator><name pos:start="87:20" pos:end="87:24">value</name> <operator pos:start="87:26" pos:end="87:26">&amp;</operator> <literal type="number" pos:start="87:28" pos:end="87:31">0x3f</literal><operator pos:start="87:32" pos:end="87:32">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:30"><expr pos:start="89:9" pos:end="89:29"><call pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:26">imx_gpt_update_int</name><argument_list pos:start="89:27" pos:end="89:29">(<argument pos:start="89:28" pos:end="89:28"><expr pos:start="89:28" pos:end="89:28"><name pos:start="89:28" pos:end="89:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>



    <case pos:start="95:5" pos:end="95:11">case <expr pos:start="95:10" pos:end="95:10"><literal type="number" pos:start="95:10" pos:end="95:10">3</literal></expr>:</case> <comment type="block" pos:start="95:13" pos:end="95:42">/* IR -- interrupt register */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:29"><expr pos:start="97:9" pos:end="97:28"><name pos:start="97:9" pos:end="97:13"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:13">ir</name></name> <operator pos:start="97:15" pos:end="97:15">=</operator> <name pos:start="97:17" pos:end="97:21">value</name> <operator pos:start="97:23" pos:end="97:23">&amp;</operator> <literal type="number" pos:start="97:25" pos:end="97:28">0x3f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:30"><expr pos:start="99:9" pos:end="99:29"><call pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:26">imx_gpt_update_int</name><argument_list pos:start="99:27" pos:end="99:29">(<argument pos:start="99:28" pos:end="99:28"><expr pos:start="99:28" pos:end="99:28"><name pos:start="99:28" pos:end="99:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:47"><expr pos:start="103:9" pos:end="103:46"><call pos:start="103:9" pos:end="103:46"><name pos:start="103:9" pos:end="103:36">imx_gpt_compute_next_timeout</name><argument_list pos:start="103:37" pos:end="103:46">(<argument pos:start="103:38" pos:end="103:38"><expr pos:start="103:38" pos:end="103:38"><name pos:start="103:38" pos:end="103:38">s</name></expr></argument>, <argument pos:start="103:41" pos:end="103:45"><expr pos:start="103:41" pos:end="103:45"><name pos:start="103:41" pos:end="103:45">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <break pos:start="107:9" pos:end="107:14">break;</break>



    <case pos:start="111:5" pos:end="111:11">case <expr pos:start="111:10" pos:end="111:10"><literal type="number" pos:start="111:10" pos:end="111:10">4</literal></expr>:</case> <comment type="block" pos:start="111:13" pos:end="111:49">/* OCR1 -- output compare register */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:24"><expr pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:9">s</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:15">ocr1</name></name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:23">value</name></expr>;</expr_stmt>



        <comment type="block" pos:start="117:9" pos:end="117:76">/* In non-freerun mode, reset count when this register is written */</comment>

        <if_stmt pos:start="119:9" pos:end="125:9"><if pos:start="119:9" pos:end="125:9">if <condition pos:start="119:12" pos:end="119:34">(<expr pos:start="119:13" pos:end="119:33"><operator pos:start="119:13" pos:end="119:13">!</operator><operator pos:start="119:14" pos:end="119:14">(</operator><name pos:start="119:15" pos:end="119:19"><name pos:start="119:15" pos:end="119:15">s</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:19">cr</name></name> <operator pos:start="119:21" pos:end="119:21">&amp;</operator> <name pos:start="119:23" pos:end="119:32">GPT_CR_FRR</name><operator pos:start="119:33" pos:end="119:33">)</operator></expr>)</condition> <block pos:start="119:36" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:53">

            <expr_stmt pos:start="121:13" pos:end="121:40"><expr pos:start="121:13" pos:end="121:39"><name pos:start="121:13" pos:end="121:27"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:27">next_timeout</name></name> <operator pos:start="121:29" pos:end="121:29">=</operator> <name pos:start="121:31" pos:end="121:39">TIMER_MAX</name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:53"><expr pos:start="123:13" pos:end="123:52"><call pos:start="123:13" pos:end="123:52"><name pos:start="123:13" pos:end="123:28">ptimer_set_limit</name><argument_list pos:start="123:29" pos:end="123:52">(<argument pos:start="123:30" pos:end="123:37"><expr pos:start="123:30" pos:end="123:37"><name pos:start="123:30" pos:end="123:37"><name pos:start="123:30" pos:end="123:30">s</name><operator pos:start="123:31" pos:end="123:32">-&gt;</operator><name pos:start="123:33" pos:end="123:37">timer</name></name></expr></argument>, <argument pos:start="123:40" pos:end="123:48"><expr pos:start="123:40" pos:end="123:48"><name pos:start="123:40" pos:end="123:48">TIMER_MAX</name></expr></argument>, <argument pos:start="123:51" pos:end="123:51"><expr pos:start="123:51" pos:end="123:51"><literal type="number" pos:start="123:51" pos:end="123:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="129:9" pos:end="129:37">/* compute the new timeout */</comment>

        <expr_stmt pos:start="131:9" pos:end="131:47"><expr pos:start="131:9" pos:end="131:46"><call pos:start="131:9" pos:end="131:46"><name pos:start="131:9" pos:end="131:36">imx_gpt_compute_next_timeout</name><argument_list pos:start="131:37" pos:end="131:46">(<argument pos:start="131:38" pos:end="131:38"><expr pos:start="131:38" pos:end="131:38"><name pos:start="131:38" pos:end="131:38">s</name></expr></argument>, <argument pos:start="131:41" pos:end="131:45"><expr pos:start="131:41" pos:end="131:45"><name pos:start="131:41" pos:end="131:45">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <break pos:start="135:9" pos:end="135:14">break;</break>



    <case pos:start="139:5" pos:end="139:11">case <expr pos:start="139:10" pos:end="139:10"><literal type="number" pos:start="139:10" pos:end="139:10">5</literal></expr>:</case> <comment type="block" pos:start="139:13" pos:end="139:49">/* OCR2 -- output compare register */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:24"><expr pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:15"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:15">ocr2</name></name> <operator pos:start="141:17" pos:end="141:17">=</operator> <name pos:start="141:19" pos:end="141:23">value</name></expr>;</expr_stmt>



        <comment type="block" pos:start="145:9" pos:end="145:37">/* compute the new timeout */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:47"><expr pos:start="147:9" pos:end="147:46"><call pos:start="147:9" pos:end="147:46"><name pos:start="147:9" pos:end="147:36">imx_gpt_compute_next_timeout</name><argument_list pos:start="147:37" pos:end="147:46">(<argument pos:start="147:38" pos:end="147:38"><expr pos:start="147:38" pos:end="147:38"><name pos:start="147:38" pos:end="147:38">s</name></expr></argument>, <argument pos:start="147:41" pos:end="147:45"><expr pos:start="147:41" pos:end="147:45"><name pos:start="147:41" pos:end="147:45">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <break pos:start="151:9" pos:end="151:14">break;</break>



    <case pos:start="155:5" pos:end="155:11">case <expr pos:start="155:10" pos:end="155:10"><literal type="number" pos:start="155:10" pos:end="155:10">6</literal></expr>:</case> <comment type="block" pos:start="155:13" pos:end="155:49">/* OCR3 -- output compare register */</comment>

        <expr_stmt pos:start="157:9" pos:end="157:24"><expr pos:start="157:9" pos:end="157:23"><name pos:start="157:9" pos:end="157:15"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:15">ocr3</name></name> <operator pos:start="157:17" pos:end="157:17">=</operator> <name pos:start="157:19" pos:end="157:23">value</name></expr>;</expr_stmt>



        <comment type="block" pos:start="161:9" pos:end="161:37">/* compute the new timeout */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:47"><expr pos:start="163:9" pos:end="163:46"><call pos:start="163:9" pos:end="163:46"><name pos:start="163:9" pos:end="163:36">imx_gpt_compute_next_timeout</name><argument_list pos:start="163:37" pos:end="163:46">(<argument pos:start="163:38" pos:end="163:38"><expr pos:start="163:38" pos:end="163:38"><name pos:start="163:38" pos:end="163:38">s</name></expr></argument>, <argument pos:start="163:41" pos:end="163:45"><expr pos:start="163:41" pos:end="163:45"><name pos:start="163:41" pos:end="163:45">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <break pos:start="167:9" pos:end="167:14">break;</break>



    <default pos:start="171:5" pos:end="171:12">default:</default>

        <expr_stmt pos:start="173:9" pos:end="173:40"><expr pos:start="173:9" pos:end="173:39"><call pos:start="173:9" pos:end="173:39"><name pos:start="173:9" pos:end="173:15">IPRINTF</name><argument_list pos:start="173:16" pos:end="173:39">(<argument pos:start="173:17" pos:end="173:33"><expr pos:start="173:17" pos:end="173:33"><literal type="string" pos:start="173:17" pos:end="173:33">"Bad offset %x\n"</literal></expr></argument>, <argument pos:start="173:36" pos:end="173:38"><expr pos:start="173:36" pos:end="173:38"><name pos:start="173:36" pos:end="173:38">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
