<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19559.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vio_make_devnode</name><parameter_list pos:start="1:28" pos:end="3:38">(<parameter pos:start="1:29" pos:end="1:47"><decl pos:start="1:29" pos:end="1:47"><type pos:start="1:29" pos:end="1:47"><name pos:start="1:29" pos:end="1:42">VIOsPAPRDevice</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">dev</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:37"><decl pos:start="3:29" pos:end="3:37"><type pos:start="3:29" pos:end="3:37"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:37">fdt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="169:1">{<block_content pos:start="7:5" pos:end="167:20">

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">VIOsPAPRDeviceClass</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:27">pc</name> <init pos:start="7:29" pos:end="7:61">= <expr pos:start="7:31" pos:end="7:61"><call pos:start="7:31" pos:end="7:61"><name pos:start="7:31" pos:end="7:56">VIO_SPAPR_DEVICE_GET_CLASS</name><argument_list pos:start="7:57" pos:end="7:61">(<argument pos:start="7:58" pos:end="7:60"><expr pos:start="7:58" pos:end="7:60"><name pos:start="7:58" pos:end="7:60">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">vdevice_off</name></decl>, <decl pos:start="9:22" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:29">node_off</name></decl>, <decl pos:start="9:32" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:32" pos:end="9:34">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:17">dt_name</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:51"><expr pos:start="15:5" pos:end="15:50"><name pos:start="15:5" pos:end="15:15">vdevice_off</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <call pos:start="15:19" pos:end="15:50"><name pos:start="15:19" pos:end="15:33">fdt_path_offset</name><argument_list pos:start="15:34" pos:end="15:50">(<argument pos:start="15:35" pos:end="15:37"><expr pos:start="15:35" pos:end="15:37"><name pos:start="15:35" pos:end="15:37">fdt</name></expr></argument>, <argument pos:start="15:40" pos:end="15:49"><expr pos:start="15:40" pos:end="15:49"><literal type="string" pos:start="15:40" pos:end="15:49">"/vdevice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:24">(<expr pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:19">vdevice_off</name> <operator pos:start="17:21" pos:end="17:21">&lt;</operator> <literal type="number" pos:start="17:23" pos:end="17:23">0</literal></expr>)</condition> <block pos:start="17:26" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:27">

        <return pos:start="19:9" pos:end="19:27">return <expr pos:start="19:16" pos:end="19:26"><name pos:start="19:16" pos:end="19:26">vdevice_off</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:39"><expr pos:start="25:5" pos:end="25:38"><name pos:start="25:5" pos:end="25:11">dt_name</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:38"><name pos:start="25:15" pos:end="25:33">vio_format_dev_name</name><argument_list pos:start="25:34" pos:end="25:38">(<argument pos:start="25:35" pos:end="25:37"><expr pos:start="25:35" pos:end="25:37"><name pos:start="25:35" pos:end="25:37">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:17">(<expr pos:start="27:9" pos:end="27:16"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:16">dt_name</name></expr>)</condition> <block pos:start="27:19" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:23">

        <return pos:start="29:9" pos:end="29:23">return <expr pos:start="29:16" pos:end="29:22"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:58"><expr pos:start="35:5" pos:end="35:57"><name pos:start="35:5" pos:end="35:12">node_off</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:57"><name pos:start="35:16" pos:end="35:30">fdt_add_subnode</name><argument_list pos:start="35:31" pos:end="35:57">(<argument pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><name pos:start="35:32" pos:end="35:34">fdt</name></expr></argument>, <argument pos:start="35:37" pos:end="35:47"><expr pos:start="35:37" pos:end="35:47"><name pos:start="35:37" pos:end="35:47">vdevice_off</name></expr></argument>, <argument pos:start="35:50" pos:end="35:56"><expr pos:start="35:50" pos:end="35:56"><name pos:start="35:50" pos:end="35:56">dt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:18"><expr pos:start="37:5" pos:end="37:17"><call pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:8">free</name><argument_list pos:start="37:9" pos:end="37:17">(<argument pos:start="37:10" pos:end="37:16"><expr pos:start="37:10" pos:end="37:16"><name pos:start="37:10" pos:end="37:16">dt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:21">(<expr pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:16">node_off</name> <operator pos:start="39:18" pos:end="39:18">&lt;</operator> <literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr>)</condition> <block pos:start="39:23" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:24">

        <return pos:start="41:9" pos:end="41:24">return <expr pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:23">node_off</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:59"><expr pos:start="47:5" pos:end="47:58"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:58"><name pos:start="47:11" pos:end="47:26">fdt_setprop_cell</name><argument_list pos:start="47:27" pos:end="47:58">(<argument pos:start="47:28" pos:end="47:30"><expr pos:start="47:28" pos:end="47:30"><name pos:start="47:28" pos:end="47:30">fdt</name></expr></argument>, <argument pos:start="47:33" pos:end="47:40"><expr pos:start="47:33" pos:end="47:40"><name pos:start="47:33" pos:end="47:40">node_off</name></expr></argument>, <argument pos:start="47:43" pos:end="47:47"><expr pos:start="47:43" pos:end="47:47"><literal type="string" pos:start="47:43" pos:end="47:47">"reg"</literal></expr></argument>, <argument pos:start="47:50" pos:end="47:57"><expr pos:start="47:50" pos:end="47:57"><name pos:start="47:50" pos:end="47:57"><name pos:start="47:50" pos:end="47:52">dev</name><operator pos:start="47:53" pos:end="47:54">-&gt;</operator><name pos:start="47:55" pos:end="47:57">reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:16">(<expr pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">&lt;</operator> <literal type="number" pos:start="49:15" pos:end="49:15">0</literal></expr>)</condition> <block pos:start="49:18" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:19">

        <return pos:start="51:9" pos:end="51:19">return <expr pos:start="51:16" pos:end="51:18"><name pos:start="51:16" pos:end="51:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="69:5"><if pos:start="57:5" pos:end="69:5">if <condition pos:start="57:8" pos:end="57:20">(<expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:10">pc</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:19">dt_type</name></name></expr>)</condition> <block pos:start="57:22" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:9">

        <expr_stmt pos:start="59:9" pos:end="61:46"><expr pos:start="59:9" pos:end="61:45"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="61:45"><name pos:start="59:15" pos:end="59:32">fdt_setprop_string</name><argument_list pos:start="59:33" pos:end="61:45">(<argument pos:start="59:34" pos:end="59:36"><expr pos:start="59:34" pos:end="59:36"><name pos:start="59:34" pos:end="59:36">fdt</name></expr></argument>, <argument pos:start="59:39" pos:end="59:46"><expr pos:start="59:39" pos:end="59:46"><name pos:start="59:39" pos:end="59:46">node_off</name></expr></argument>, <argument pos:start="59:49" pos:end="59:61"><expr pos:start="59:49" pos:end="59:61"><literal type="string" pos:start="59:49" pos:end="59:61">"device_type"</literal></expr></argument>,

                                 <argument pos:start="61:34" pos:end="61:44"><expr pos:start="61:34" pos:end="61:44"><name pos:start="61:34" pos:end="61:44"><name pos:start="61:34" pos:end="61:35">pc</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:44">dt_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">&lt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>)</condition> <block pos:start="63:22" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:23">

            <return pos:start="65:13" pos:end="65:23">return <expr pos:start="65:20" pos:end="65:22"><name pos:start="65:20" pos:end="65:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="85:5"><if pos:start="73:5" pos:end="85:5">if <condition pos:start="73:8" pos:end="73:26">(<expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:10">pc</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:25">dt_compatible</name></name></expr>)</condition> <block pos:start="73:28" pos:end="85:5">{<block_content pos:start="75:9" pos:end="83:9">

        <expr_stmt pos:start="75:9" pos:end="77:52"><expr pos:start="75:9" pos:end="77:51"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="77:51"><name pos:start="75:15" pos:end="75:32">fdt_setprop_string</name><argument_list pos:start="75:33" pos:end="77:51">(<argument pos:start="75:34" pos:end="75:36"><expr pos:start="75:34" pos:end="75:36"><name pos:start="75:34" pos:end="75:36">fdt</name></expr></argument>, <argument pos:start="75:39" pos:end="75:46"><expr pos:start="75:39" pos:end="75:46"><name pos:start="75:39" pos:end="75:46">node_off</name></expr></argument>, <argument pos:start="75:49" pos:end="75:60"><expr pos:start="75:49" pos:end="75:60"><literal type="string" pos:start="75:49" pos:end="75:60">"compatible"</literal></expr></argument>,

                                 <argument pos:start="77:34" pos:end="77:50"><expr pos:start="77:34" pos:end="77:50"><name pos:start="77:34" pos:end="77:50"><name pos:start="77:34" pos:end="77:35">pc</name><operator pos:start="77:36" pos:end="77:37">-&gt;</operator><name pos:start="77:38" pos:end="77:50">dt_compatible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:20">(<expr pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">&lt;</operator> <literal type="number" pos:start="79:19" pos:end="79:19">0</literal></expr>)</condition> <block pos:start="79:22" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:23">

            <return pos:start="81:13" pos:end="81:23">return <expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="105:5"><if pos:start="89:5" pos:end="105:5">if <condition pos:start="89:8" pos:end="89:18">(<expr pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:11">dev</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:17">qirq</name></name></expr>)</condition> <block pos:start="89:20" pos:end="105:5">{<block_content pos:start="91:9" pos:end="103:9">

        <decl_stmt pos:start="91:9" pos:end="91:66"><decl pos:start="91:9" pos:end="91:65"><type pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:16">uint32_t</name></type> <name pos:start="91:18" pos:end="91:28"><name pos:start="91:18" pos:end="91:26">ints_prop</name><index pos:start="91:27" pos:end="91:28">[]</index></name> <init pos:start="91:30" pos:end="91:65">= <expr pos:start="91:32" pos:end="91:65"><block pos:start="91:32" pos:end="91:65">{<expr pos:start="91:33" pos:end="91:61"><call pos:start="91:33" pos:end="91:61"><name pos:start="91:33" pos:end="91:43">cpu_to_be32</name><argument_list pos:start="91:44" pos:end="91:61">(<argument pos:start="91:45" pos:end="91:60"><expr pos:start="91:45" pos:end="91:60"><name pos:start="91:45" pos:end="91:60"><name pos:start="91:45" pos:end="91:47">dev</name><operator pos:start="91:48" pos:end="91:49">-&gt;</operator><name pos:start="91:50" pos:end="91:60">vio_irq_num</name></name></expr></argument>)</argument_list></call></expr>, <expr pos:start="91:64" pos:end="91:64"><literal type="number" pos:start="91:64" pos:end="91:64">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="95:9" pos:end="97:45"><expr pos:start="95:9" pos:end="97:44"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="97:44"><name pos:start="95:15" pos:end="95:25">fdt_setprop</name><argument_list pos:start="95:26" pos:end="97:44">(<argument pos:start="95:27" pos:end="95:29"><expr pos:start="95:27" pos:end="95:29"><name pos:start="95:27" pos:end="95:29">fdt</name></expr></argument>, <argument pos:start="95:32" pos:end="95:39"><expr pos:start="95:32" pos:end="95:39"><name pos:start="95:32" pos:end="95:39">node_off</name></expr></argument>, <argument pos:start="95:42" pos:end="95:53"><expr pos:start="95:42" pos:end="95:53"><literal type="string" pos:start="95:42" pos:end="95:53">"interrupts"</literal></expr></argument>, <argument pos:start="95:56" pos:end="95:64"><expr pos:start="95:56" pos:end="95:64"><name pos:start="95:56" pos:end="95:64">ints_prop</name></expr></argument>,

                          <argument pos:start="97:27" pos:end="97:43"><expr pos:start="97:27" pos:end="97:43"><sizeof pos:start="97:27" pos:end="97:43">sizeof<argument_list pos:start="97:33" pos:end="97:43">(<argument pos:start="97:34" pos:end="97:42"><expr pos:start="97:34" pos:end="97:42"><name pos:start="97:34" pos:end="97:42">ints_prop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:20">(<expr pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">&lt;</operator> <literal type="number" pos:start="99:19" pos:end="99:19">0</literal></expr>)</condition> <block pos:start="99:22" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:23">

            <return pos:start="101:13" pos:end="101:23">return <expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="149:5"><if pos:start="109:5" pos:end="149:5">if <condition pos:start="109:8" pos:end="109:30">(<expr pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:11">dev</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:29">rtce_window_size</name></name></expr>)</condition> <block pos:start="109:32" pos:end="149:5">{<block_content pos:start="111:9" pos:end="147:9">

        <decl_stmt pos:start="111:9" pos:end="115:70"><decl pos:start="111:9" pos:end="115:69"><type pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:16">uint32_t</name></type> <name pos:start="111:18" pos:end="111:27"><name pos:start="111:18" pos:end="111:25">dma_prop</name><index pos:start="111:26" pos:end="111:27">[]</index></name> <init pos:start="111:29" pos:end="115:69">= <expr pos:start="111:31" pos:end="115:69"><block pos:start="111:31" pos:end="115:69">{<expr pos:start="111:32" pos:end="111:52"><call pos:start="111:32" pos:end="111:52"><name pos:start="111:32" pos:end="111:42">cpu_to_be32</name><argument_list pos:start="111:43" pos:end="111:52">(<argument pos:start="111:44" pos:end="111:51"><expr pos:start="111:44" pos:end="111:51"><name pos:start="111:44" pos:end="111:51"><name pos:start="111:44" pos:end="111:46">dev</name><operator pos:start="111:47" pos:end="111:48">-&gt;</operator><name pos:start="111:49" pos:end="111:51">reg</name></name></expr></argument>)</argument_list></call></expr>,

                               <expr pos:start="113:32" pos:end="113:32"><literal type="number" pos:start="113:32" pos:end="113:32">0</literal></expr>, <expr pos:start="113:35" pos:end="113:35"><literal type="number" pos:start="113:35" pos:end="113:35">0</literal></expr>,

                               <expr pos:start="115:32" pos:end="115:32"><literal type="number" pos:start="115:32" pos:end="115:32">0</literal></expr>, <macro pos:start="115:35" pos:end="115:68"><name pos:start="115:35" pos:end="115:45">cpu_to_be32</name><argument_list pos:start="115:46" pos:end="115:68">(<argument pos:start="115:47" pos:end="115:67">dev-&gt;rtce_window_size</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:75"><expr pos:start="119:9" pos:end="119:74"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:74"><name pos:start="119:15" pos:end="119:30">fdt_setprop_cell</name><argument_list pos:start="119:31" pos:end="119:74">(<argument pos:start="119:32" pos:end="119:34"><expr pos:start="119:32" pos:end="119:34"><name pos:start="119:32" pos:end="119:34">fdt</name></expr></argument>, <argument pos:start="119:37" pos:end="119:44"><expr pos:start="119:37" pos:end="119:44"><name pos:start="119:37" pos:end="119:44">node_off</name></expr></argument>, <argument pos:start="119:47" pos:end="119:70"><expr pos:start="119:47" pos:end="119:70"><literal type="string" pos:start="119:47" pos:end="119:70">"ibm,#dma-address-cells"</literal></expr></argument>, <argument pos:start="119:73" pos:end="119:73"><expr pos:start="119:73" pos:end="119:73"><literal type="number" pos:start="119:73" pos:end="119:73">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="125:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:20">(<expr pos:start="121:13" pos:end="121:19"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">&lt;</operator> <literal type="number" pos:start="121:19" pos:end="121:19">0</literal></expr>)</condition> <block pos:start="121:22" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:23">

            <return pos:start="123:13" pos:end="123:23">return <expr pos:start="123:20" pos:end="123:22"><name pos:start="123:20" pos:end="123:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:72"><expr pos:start="129:9" pos:end="129:71"><name pos:start="129:9" pos:end="129:11">ret</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <call pos:start="129:15" pos:end="129:71"><name pos:start="129:15" pos:end="129:30">fdt_setprop_cell</name><argument_list pos:start="129:31" pos:end="129:71">(<argument pos:start="129:32" pos:end="129:34"><expr pos:start="129:32" pos:end="129:34"><name pos:start="129:32" pos:end="129:34">fdt</name></expr></argument>, <argument pos:start="129:37" pos:end="129:44"><expr pos:start="129:37" pos:end="129:44"><name pos:start="129:37" pos:end="129:44">node_off</name></expr></argument>, <argument pos:start="129:47" pos:end="129:67"><expr pos:start="129:47" pos:end="129:67"><literal type="string" pos:start="129:47" pos:end="129:67">"ibm,#dma-size-cells"</literal></expr></argument>, <argument pos:start="129:70" pos:end="129:70"><expr pos:start="129:70" pos:end="129:70"><literal type="number" pos:start="129:70" pos:end="129:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="135:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:20">(<expr pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">&lt;</operator> <literal type="number" pos:start="131:19" pos:end="131:19">0</literal></expr>)</condition> <block pos:start="131:22" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:23">

            <return pos:start="133:13" pos:end="133:23">return <expr pos:start="133:20" pos:end="133:22"><name pos:start="133:20" pos:end="133:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="139:9" pos:end="141:44"><expr pos:start="139:9" pos:end="141:43"><name pos:start="139:9" pos:end="139:11">ret</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <call pos:start="139:15" pos:end="141:43"><name pos:start="139:15" pos:end="139:25">fdt_setprop</name><argument_list pos:start="139:26" pos:end="141:43">(<argument pos:start="139:27" pos:end="139:29"><expr pos:start="139:27" pos:end="139:29"><name pos:start="139:27" pos:end="139:29">fdt</name></expr></argument>, <argument pos:start="139:32" pos:end="139:39"><expr pos:start="139:32" pos:end="139:39"><name pos:start="139:32" pos:end="139:39">node_off</name></expr></argument>, <argument pos:start="139:42" pos:end="139:60"><expr pos:start="139:42" pos:end="139:60"><literal type="string" pos:start="139:42" pos:end="139:60">"ibm,my-dma-window"</literal></expr></argument>, <argument pos:start="139:63" pos:end="139:70"><expr pos:start="139:63" pos:end="139:70"><name pos:start="139:63" pos:end="139:70">dma_prop</name></expr></argument>,

                          <argument pos:start="141:27" pos:end="141:42"><expr pos:start="141:27" pos:end="141:42"><sizeof pos:start="141:27" pos:end="141:42">sizeof<argument_list pos:start="141:33" pos:end="141:42">(<argument pos:start="141:34" pos:end="141:41"><expr pos:start="141:34" pos:end="141:41"><name pos:start="141:34" pos:end="141:41">dma_prop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:20">(<expr pos:start="143:13" pos:end="143:19"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:17">&lt;</operator> <literal type="number" pos:start="143:19" pos:end="143:19">0</literal></expr>)</condition> <block pos:start="143:22" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:23">

            <return pos:start="145:13" pos:end="145:23">return <expr pos:start="145:20" pos:end="145:22"><name pos:start="145:20" pos:end="145:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="153:5" pos:end="163:5"><if pos:start="153:5" pos:end="163:5">if <condition pos:start="153:8" pos:end="153:20">(<expr pos:start="153:9" pos:end="153:19"><name pos:start="153:9" pos:end="153:19"><name pos:start="153:9" pos:end="153:10">pc</name><operator pos:start="153:11" pos:end="153:12">-&gt;</operator><name pos:start="153:13" pos:end="153:19">devnode</name></name></expr>)</condition> <block pos:start="153:22" pos:end="163:5">{<block_content pos:start="155:9" pos:end="161:9">

        <expr_stmt pos:start="155:9" pos:end="155:48"><expr pos:start="155:9" pos:end="155:47"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <operator pos:start="155:15" pos:end="155:15">(</operator><name pos:start="155:16" pos:end="155:26"><name pos:start="155:16" pos:end="155:17">pc</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:26">devnode</name></name><operator pos:start="155:27" pos:end="155:27">)</operator><operator pos:start="155:28" pos:end="155:28">(</operator><name pos:start="155:29" pos:end="155:31">dev</name><operator pos:start="155:32" pos:end="155:32">,</operator> <name pos:start="155:34" pos:end="155:36">fdt</name><operator pos:start="155:37" pos:end="155:37">,</operator> <name pos:start="155:39" pos:end="155:46">node_off</name><operator pos:start="155:47" pos:end="155:47">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="161:9"><if pos:start="157:9" pos:end="161:9">if <condition pos:start="157:12" pos:end="157:20">(<expr pos:start="157:13" pos:end="157:19"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">&lt;</operator> <literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>)</condition> <block pos:start="157:22" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:23">

            <return pos:start="159:13" pos:end="159:23">return <expr pos:start="159:20" pos:end="159:22"><name pos:start="159:20" pos:end="159:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="167:5" pos:end="167:20">return <expr pos:start="167:12" pos:end="167:19"><name pos:start="167:12" pos:end="167:19">node_off</name></expr>;</return>

</block_content>}</block></function>
</unit>
