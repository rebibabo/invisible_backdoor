<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20526.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">rtas_nvram_fetch</name><parameter_list pos:start="1:29" pos:end="7:62">(<parameter pos:start="1:30" pos:end="1:44"><decl pos:start="1:30" pos:end="1:44"><type pos:start="1:30" pos:end="1:44"><name pos:start="1:30" pos:end="1:39">PowerPCCPU</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">cpu</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:69"><decl pos:start="1:47" pos:end="1:69"><type pos:start="1:47" pos:end="1:69"><name pos:start="1:47" pos:end="1:62">sPAPREnvironment</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">spapr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:37">uint32_t</name></type> <name pos:start="3:39" pos:end="3:43">token</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:59"><decl pos:start="3:46" pos:end="3:59"><type pos:start="3:46" pos:end="3:59"><name pos:start="3:46" pos:end="3:53">uint32_t</name></type> <name pos:start="3:55" pos:end="3:59">nargs</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:46"><decl pos:start="5:30" pos:end="5:46"><type pos:start="5:30" pos:end="5:46"><name pos:start="5:30" pos:end="5:41">target_ulong</name></type> <name pos:start="5:43" pos:end="5:46">args</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:42"><decl pos:start="7:30" pos:end="7:42"><type pos:start="7:30" pos:end="7:42"><name pos:start="7:30" pos:end="7:37">uint32_t</name></type> <name pos:start="7:39" pos:end="7:42">nret</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:61"><decl pos:start="7:45" pos:end="7:61"><type pos:start="7:45" pos:end="7:61"><name pos:start="7:45" pos:end="7:56">target_ulong</name></type> <name pos:start="7:58" pos:end="7:61">rets</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="91:1">{<block_content pos:start="11:5" pos:end="89:44">

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">sPAPRNVRAM</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:21">nvram</name> <init pos:start="11:23" pos:end="11:36">= <expr pos:start="11:25" pos:end="11:36"><name pos:start="11:25" pos:end="11:36"><name pos:start="11:25" pos:end="11:29">spapr</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:36">nvram</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:17">offset</name></decl>, <decl pos:start="13:20" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:10"/><name pos:start="13:20" pos:end="13:25">buffer</name></decl>, <decl pos:start="13:28" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:10"/><name pos:start="13:28" pos:end="13:30">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">alen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:16">membuf</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:36">(<expr pos:start="21:9" pos:end="21:35"><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:14">nargs</name> <operator pos:start="21:16" pos:end="21:17">!=</operator> <literal type="number" pos:start="21:19" pos:end="21:19">3</literal><operator pos:start="21:20" pos:end="21:20">)</operator> <operator pos:start="21:22" pos:end="21:23">||</operator> <operator pos:start="21:25" pos:end="21:25">(</operator><name pos:start="21:26" pos:end="21:29">nret</name> <operator pos:start="21:31" pos:end="21:32">!=</operator> <literal type="number" pos:start="21:34" pos:end="21:34">2</literal><operator pos:start="21:35" pos:end="21:35">)</operator></expr>)</condition> <block pos:start="21:38" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><call pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:15">rtas_st</name><argument_list pos:start="23:16" pos:end="23:46">(<argument pos:start="23:17" pos:end="23:20"><expr pos:start="23:17" pos:end="23:20"><name pos:start="23:17" pos:end="23:20">rets</name></expr></argument>, <argument pos:start="23:23" pos:end="23:23"><expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr></argument>, <argument pos:start="23:26" pos:end="23:45"><expr pos:start="23:26" pos:end="23:45"><name pos:start="23:26" pos:end="23:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:15">(<expr pos:start="31:9" pos:end="31:14"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:14">nvram</name></expr>)</condition> <block pos:start="31:17" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:15">

        <expr_stmt pos:start="33:9" pos:end="33:44"><expr pos:start="33:9" pos:end="33:43"><call pos:start="33:9" pos:end="33:43"><name pos:start="33:9" pos:end="33:15">rtas_st</name><argument_list pos:start="33:16" pos:end="33:43">(<argument pos:start="33:17" pos:end="33:20"><expr pos:start="33:17" pos:end="33:20"><name pos:start="33:17" pos:end="33:20">rets</name></expr></argument>, <argument pos:start="33:23" pos:end="33:23"><expr pos:start="33:23" pos:end="33:23"><literal type="number" pos:start="33:23" pos:end="33:23">0</literal></expr></argument>, <argument pos:start="33:26" pos:end="33:42"><expr pos:start="33:26" pos:end="33:42"><name pos:start="33:26" pos:end="33:42">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:28"><expr pos:start="35:9" pos:end="35:27"><call pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:15">rtas_st</name><argument_list pos:start="35:16" pos:end="35:27">(<argument pos:start="35:17" pos:end="35:20"><expr pos:start="35:17" pos:end="35:20"><name pos:start="35:17" pos:end="35:20">rets</name></expr></argument>, <argument pos:start="35:23" pos:end="35:23"><expr pos:start="35:23" pos:end="35:23"><literal type="number" pos:start="35:23" pos:end="35:23">1</literal></expr></argument>, <argument pos:start="35:26" pos:end="35:26"><expr pos:start="35:26" pos:end="35:26"><literal type="number" pos:start="35:26" pos:end="35:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:30"><expr pos:start="43:5" pos:end="43:29"><name pos:start="43:5" pos:end="43:10">offset</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <call pos:start="43:14" pos:end="43:29"><name pos:start="43:14" pos:end="43:20">rtas_ld</name><argument_list pos:start="43:21" pos:end="43:29">(<argument pos:start="43:22" pos:end="43:25"><expr pos:start="43:22" pos:end="43:25"><name pos:start="43:22" pos:end="43:25">args</name></expr></argument>, <argument pos:start="43:28" pos:end="43:28"><expr pos:start="43:28" pos:end="43:28"><literal type="number" pos:start="43:28" pos:end="43:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:10">buffer</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <call pos:start="45:14" pos:end="45:29"><name pos:start="45:14" pos:end="45:20">rtas_ld</name><argument_list pos:start="45:21" pos:end="45:29">(<argument pos:start="45:22" pos:end="45:25"><expr pos:start="45:22" pos:end="45:25"><name pos:start="45:22" pos:end="45:25">args</name></expr></argument>, <argument pos:start="45:28" pos:end="45:28"><expr pos:start="45:28" pos:end="45:28"><literal type="number" pos:start="45:28" pos:end="45:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:7">len</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:26"><name pos:start="47:11" pos:end="47:17">rtas_ld</name><argument_list pos:start="47:18" pos:end="47:26">(<argument pos:start="47:19" pos:end="47:22"><expr pos:start="47:19" pos:end="47:22"><name pos:start="47:19" pos:end="47:22">args</name></expr></argument>, <argument pos:start="47:25" pos:end="47:25"><expr pos:start="47:25" pos:end="47:25"><literal type="number" pos:start="47:25" pos:end="47:25">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="61:5"><if pos:start="51:5" pos:end="61:5">if <condition pos:start="51:8" pos:end="53:42">(<expr pos:start="51:9" pos:end="53:41"><operator pos:start="51:9" pos:end="51:9">(</operator><operator pos:start="51:10" pos:end="51:10">(</operator><name pos:start="51:11" pos:end="51:16">offset</name> <operator pos:start="51:18" pos:end="51:18">+</operator> <name pos:start="51:20" pos:end="51:22">len</name><operator pos:start="51:23" pos:end="51:23">)</operator> <operator pos:start="51:25" pos:end="51:25">&lt;</operator> <name pos:start="51:27" pos:end="51:32">offset</name><operator pos:start="51:33" pos:end="51:33">)</operator>

        <operator pos:start="53:9" pos:end="53:10">||</operator> <operator pos:start="53:12" pos:end="53:12">(</operator><operator pos:start="53:13" pos:end="53:13">(</operator><name pos:start="53:14" pos:end="53:19">offset</name> <operator pos:start="53:21" pos:end="53:21">+</operator> <name pos:start="53:23" pos:end="53:25">len</name><operator pos:start="53:26" pos:end="53:26">)</operator> <operator pos:start="53:28" pos:end="53:28">&gt;</operator> <name pos:start="53:30" pos:end="53:40"><name pos:start="53:30" pos:end="53:34">nvram</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:40">size</name></name><operator pos:start="53:41" pos:end="53:41">)</operator></expr>)</condition> <block pos:start="53:44" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:15">

        <expr_stmt pos:start="55:9" pos:end="55:47"><expr pos:start="55:9" pos:end="55:46"><call pos:start="55:9" pos:end="55:46"><name pos:start="55:9" pos:end="55:15">rtas_st</name><argument_list pos:start="55:16" pos:end="55:46">(<argument pos:start="55:17" pos:end="55:20"><expr pos:start="55:17" pos:end="55:20"><name pos:start="55:17" pos:end="55:20">rets</name></expr></argument>, <argument pos:start="55:23" pos:end="55:23"><expr pos:start="55:23" pos:end="55:23"><literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr></argument>, <argument pos:start="55:26" pos:end="55:45"><expr pos:start="55:26" pos:end="55:45"><name pos:start="55:26" pos:end="55:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:28"><expr pos:start="57:9" pos:end="57:27"><call pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:15">rtas_st</name><argument_list pos:start="57:16" pos:end="57:27">(<argument pos:start="57:17" pos:end="57:20"><expr pos:start="57:17" pos:end="57:20"><name pos:start="57:17" pos:end="57:20">rets</name></expr></argument>, <argument pos:start="57:23" pos:end="57:23"><expr pos:start="57:23" pos:end="57:23"><literal type="number" pos:start="57:23" pos:end="57:23">1</literal></expr></argument>, <argument pos:start="57:26" pos:end="57:26"><expr pos:start="57:26" pos:end="57:26"><literal type="number" pos:start="57:26" pos:end="57:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:54"><expr pos:start="65:5" pos:end="65:53"><name pos:start="65:5" pos:end="65:10">membuf</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <call pos:start="65:14" pos:end="65:53"><name pos:start="65:14" pos:end="65:36">cpu_physical_memory_map</name><argument_list pos:start="65:37" pos:end="65:53">(<argument pos:start="65:38" pos:end="65:43"><expr pos:start="65:38" pos:end="65:43"><name pos:start="65:38" pos:end="65:43">buffer</name></expr></argument>, <argument pos:start="65:46" pos:end="65:49"><expr pos:start="65:46" pos:end="65:49"><operator pos:start="65:46" pos:end="65:46">&amp;</operator><name pos:start="65:47" pos:end="65:49">len</name></expr></argument>, <argument pos:start="65:52" pos:end="65:52"><expr pos:start="65:52" pos:end="65:52"><literal type="number" pos:start="65:52" pos:end="65:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="81:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:21">(<expr pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:13">nvram</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:20">drive</name></name></expr>)</condition> <block pos:start="67:23" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:61">

        <expr_stmt pos:start="69:9" pos:end="69:61"><expr pos:start="69:9" pos:end="69:60"><name pos:start="69:9" pos:end="69:12">alen</name> <operator pos:start="69:14" pos:end="69:14">=</operator> <call pos:start="69:16" pos:end="69:60"><name pos:start="69:16" pos:end="69:25">bdrv_pread</name><argument_list pos:start="69:26" pos:end="69:60">(<argument pos:start="69:27" pos:end="69:38"><expr pos:start="69:27" pos:end="69:38"><name pos:start="69:27" pos:end="69:38"><name pos:start="69:27" pos:end="69:31">nvram</name><operator pos:start="69:32" pos:end="69:33">-&gt;</operator><name pos:start="69:34" pos:end="69:38">drive</name></name></expr></argument>, <argument pos:start="69:41" pos:end="69:46"><expr pos:start="69:41" pos:end="69:46"><name pos:start="69:41" pos:end="69:46">offset</name></expr></argument>, <argument pos:start="69:49" pos:end="69:54"><expr pos:start="69:49" pos:end="69:54"><name pos:start="69:49" pos:end="69:54">membuf</name></expr></argument>, <argument pos:start="69:57" pos:end="69:59"><expr pos:start="69:57" pos:end="69:59"><name pos:start="69:57" pos:end="69:59">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="81:5">else <block pos:start="71:12" pos:end="81:5">{<block_content pos:start="73:9" pos:end="79:19">

        <expr_stmt pos:start="73:9" pos:end="73:27"><expr pos:start="73:9" pos:end="73:26"><call pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:14">assert</name><argument_list pos:start="73:15" pos:end="73:26">(<argument pos:start="73:16" pos:end="73:25"><expr pos:start="73:16" pos:end="73:25"><name pos:start="73:16" pos:end="73:25"><name pos:start="73:16" pos:end="73:20">nvram</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:25">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:49"><expr pos:start="77:9" pos:end="77:48"><call pos:start="77:9" pos:end="77:48"><name pos:start="77:9" pos:end="77:14">memcpy</name><argument_list pos:start="77:15" pos:end="77:48">(<argument pos:start="77:16" pos:end="77:21"><expr pos:start="77:16" pos:end="77:21"><name pos:start="77:16" pos:end="77:21">membuf</name></expr></argument>, <argument pos:start="77:24" pos:end="77:42"><expr pos:start="77:24" pos:end="77:42"><name pos:start="77:24" pos:end="77:33"><name pos:start="77:24" pos:end="77:28">nvram</name><operator pos:start="77:29" pos:end="77:30">-&gt;</operator><name pos:start="77:31" pos:end="77:33">buf</name></name> <operator pos:start="77:35" pos:end="77:35">+</operator> <name pos:start="77:37" pos:end="77:42">offset</name></expr></argument>, <argument pos:start="77:45" pos:end="77:47"><expr pos:start="77:45" pos:end="77:47"><name pos:start="77:45" pos:end="77:47">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:19"><expr pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:12">alen</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <name pos:start="79:16" pos:end="79:18">len</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:51"><expr pos:start="83:5" pos:end="83:50"><call pos:start="83:5" pos:end="83:50"><name pos:start="83:5" pos:end="83:29">cpu_physical_memory_unmap</name><argument_list pos:start="83:30" pos:end="83:50">(<argument pos:start="83:31" pos:end="83:36"><expr pos:start="83:31" pos:end="83:36"><name pos:start="83:31" pos:end="83:36">membuf</name></expr></argument>, <argument pos:start="83:39" pos:end="83:41"><expr pos:start="83:39" pos:end="83:41"><name pos:start="83:39" pos:end="83:41">len</name></expr></argument>, <argument pos:start="83:44" pos:end="83:44"><expr pos:start="83:44" pos:end="83:44"><literal type="number" pos:start="83:44" pos:end="83:44">1</literal></expr></argument>, <argument pos:start="83:47" pos:end="83:49"><expr pos:start="83:47" pos:end="83:49"><name pos:start="83:47" pos:end="83:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:74"><expr pos:start="87:5" pos:end="87:73"><call pos:start="87:5" pos:end="87:73"><name pos:start="87:5" pos:end="87:11">rtas_st</name><argument_list pos:start="87:12" pos:end="87:73">(<argument pos:start="87:13" pos:end="87:16"><expr pos:start="87:13" pos:end="87:16"><name pos:start="87:13" pos:end="87:16">rets</name></expr></argument>, <argument pos:start="87:19" pos:end="87:19"><expr pos:start="87:19" pos:end="87:19"><literal type="number" pos:start="87:19" pos:end="87:19">0</literal></expr></argument>, <argument pos:start="87:22" pos:end="87:72"><expr pos:start="87:22" pos:end="87:72"><ternary pos:start="87:22" pos:end="87:72"><condition pos:start="87:22" pos:end="87:35"><expr pos:start="87:22" pos:end="87:33"><operator pos:start="87:22" pos:end="87:22">(</operator><name pos:start="87:23" pos:end="87:26">alen</name> <operator pos:start="87:28" pos:end="87:28">&lt;</operator> <name pos:start="87:30" pos:end="87:32">len</name><operator pos:start="87:33" pos:end="87:33">)</operator></expr> ?</condition><then pos:start="87:37" pos:end="87:53"> <expr pos:start="87:37" pos:end="87:53"><name pos:start="87:37" pos:end="87:53">RTAS_OUT_HW_ERROR</name></expr> </then><else pos:start="87:55" pos:end="87:72">: <expr pos:start="87:57" pos:end="87:72"><name pos:start="87:57" pos:end="87:72">RTAS_OUT_SUCCESS</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:44"><expr pos:start="89:5" pos:end="89:43"><call pos:start="89:5" pos:end="89:43"><name pos:start="89:5" pos:end="89:11">rtas_st</name><argument_list pos:start="89:12" pos:end="89:43">(<argument pos:start="89:13" pos:end="89:16"><expr pos:start="89:13" pos:end="89:16"><name pos:start="89:13" pos:end="89:16">rets</name></expr></argument>, <argument pos:start="89:19" pos:end="89:19"><expr pos:start="89:19" pos:end="89:19"><literal type="number" pos:start="89:19" pos:end="89:19">1</literal></expr></argument>, <argument pos:start="89:22" pos:end="89:42"><expr pos:start="89:22" pos:end="89:42"><ternary pos:start="89:22" pos:end="89:42"><condition pos:start="89:22" pos:end="89:33"><expr pos:start="89:22" pos:end="89:31"><operator pos:start="89:22" pos:end="89:22">(</operator><name pos:start="89:23" pos:end="89:26">alen</name> <operator pos:start="89:28" pos:end="89:28">&lt;</operator> <literal type="number" pos:start="89:30" pos:end="89:30">0</literal><operator pos:start="89:31" pos:end="89:31">)</operator></expr> ?</condition><then pos:start="89:35" pos:end="89:35"> <expr pos:start="89:35" pos:end="89:35"><literal type="number" pos:start="89:35" pos:end="89:35">0</literal></expr> </then><else pos:start="89:37" pos:end="89:42">: <expr pos:start="89:39" pos:end="89:42"><name pos:start="89:39" pos:end="89:42">alen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
