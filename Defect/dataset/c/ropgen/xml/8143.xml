<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8143.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">check_init_output_file</name><parameter_list pos:start="1:34" pos:end="1:65">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:44">OutputFile</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">of</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:64"><decl pos:start="1:51" pos:end="1:64"><type pos:start="1:51" pos:end="1:64"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:64">file_index</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:13">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:14">i</name></decl>;</decl_stmt>



    <for pos:start="9:5" pos:end="17:5">for <control pos:start="9:9" pos:end="9:45">(<init pos:start="9:10" pos:end="9:15"><expr pos:start="9:10" pos:end="9:14"><name pos:start="9:10" pos:end="9:10">i</name> <operator pos:start="9:12" pos:end="9:12">=</operator> <literal type="number" pos:start="9:14" pos:end="9:14">0</literal></expr>;</init> <condition pos:start="9:17" pos:end="9:40"><expr pos:start="9:17" pos:end="9:39"><name pos:start="9:17" pos:end="9:17">i</name> <operator pos:start="9:19" pos:end="9:19">&lt;</operator> <name pos:start="9:21" pos:end="9:39"><name pos:start="9:21" pos:end="9:22">of</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:27">ctx</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:39">nb_streams</name></name></expr>;</condition> <incr pos:start="9:42" pos:end="9:44"><expr pos:start="9:42" pos:end="9:44"><name pos:start="9:42" pos:end="9:42">i</name><operator pos:start="9:43" pos:end="9:44">++</operator></expr></incr>)</control> <block pos:start="9:47" pos:end="17:5">{<block_content pos:start="11:9" pos:end="15:21">

        <decl_stmt pos:start="11:9" pos:end="11:62"><decl pos:start="11:9" pos:end="11:61"><type pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:20">OutputStream</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:25">ost</name> <init pos:start="11:27" pos:end="11:61">= <expr pos:start="11:29" pos:end="11:61"><name pos:start="11:29" pos:end="11:61"><name pos:start="11:29" pos:end="11:42">output_streams</name><index pos:start="11:43" pos:end="11:61">[<expr pos:start="11:44" pos:end="11:60"><name pos:start="11:44" pos:end="11:56"><name pos:start="11:44" pos:end="11:45">of</name><operator pos:start="11:46" pos:end="11:47">-&gt;</operator><name pos:start="11:48" pos:end="11:56">ost_index</name></name> <operator pos:start="11:58" pos:end="11:58">+</operator> <name pos:start="11:60" pos:end="11:60">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="13:9" pos:end="15:21"><if pos:start="13:9" pos:end="15:21">if <condition pos:start="13:12" pos:end="13:30">(<expr pos:start="13:13" pos:end="13:29"><operator pos:start="13:13" pos:end="13:13">!</operator><name pos:start="13:14" pos:end="13:29"><name pos:start="13:14" pos:end="13:16">ost</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:29">initialized</name></name></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:21"><block_content pos:start="15:13" pos:end="15:21">

            <return pos:start="15:13" pos:end="15:21">return <expr pos:start="15:20" pos:end="15:20"><literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="21:5" pos:end="21:41"><expr pos:start="21:5" pos:end="21:40"><name pos:start="21:5" pos:end="21:31"><name pos:start="21:5" pos:end="21:6">of</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:11">ctx</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:31">interrupt_callback</name></name> <operator pos:start="21:33" pos:end="21:33">=</operator> <name pos:start="21:35" pos:end="21:40">int_cb</name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:52"><expr pos:start="25:5" pos:end="25:51"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:51"><name pos:start="25:11" pos:end="25:31">avformat_write_header</name><argument_list pos:start="25:32" pos:end="25:51">(<argument pos:start="25:33" pos:end="25:39"><expr pos:start="25:33" pos:end="25:39"><name pos:start="25:33" pos:end="25:39"><name pos:start="25:33" pos:end="25:34">of</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:39">ctx</name></name></expr></argument>, <argument pos:start="25:42" pos:end="25:50"><expr pos:start="25:42" pos:end="25:50"><operator pos:start="25:42" pos:end="25:42">&amp;</operator><name pos:start="25:43" pos:end="25:50"><name pos:start="25:43" pos:end="25:44">of</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:50">opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="39:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition> <block pos:start="27:18" pos:end="39:5">{<block_content pos:start="29:9" pos:end="37:19">

        <expr_stmt pos:start="29:9" pos:end="35:44"><expr pos:start="29:9" pos:end="35:43"><call pos:start="29:9" pos:end="35:43"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="35:43">(<argument pos:start="29:16" pos:end="29:19"><expr pos:start="29:16" pos:end="29:19"><name pos:start="29:16" pos:end="29:19">NULL</name></expr></argument>, <argument pos:start="29:22" pos:end="29:33"><expr pos:start="29:22" pos:end="29:33"><name pos:start="29:22" pos:end="29:33">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="31:16" pos:end="33:53"><expr pos:start="31:16" pos:end="33:53"><literal type="string" pos:start="31:16" pos:end="31:60">"Could not write header for output file #%d "</literal>

               <literal type="string" pos:start="33:16" pos:end="33:53">"(incorrect codec parameters ?): %s\n"</literal></expr></argument>,

               <argument pos:start="35:16" pos:end="35:25"><expr pos:start="35:16" pos:end="35:25"><name pos:start="35:16" pos:end="35:25">file_index</name></expr></argument>, <argument pos:start="35:28" pos:end="35:42"><expr pos:start="35:28" pos:end="35:42"><call pos:start="35:28" pos:end="35:42"><name pos:start="35:28" pos:end="35:37">av_err2str</name><argument_list pos:start="35:38" pos:end="35:42">(<argument pos:start="35:39" pos:end="35:41"><expr pos:start="35:39" pos:end="35:41"><name pos:start="35:39" pos:end="35:41">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:19">return <expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="41:5" pos:end="41:33">//assert_avoptions(of-&gt;opts);</comment>

    <expr_stmt pos:start="43:5" pos:end="43:27"><expr pos:start="43:5" pos:end="43:26"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:6">of</name><operator pos:start="43:7" pos:end="43:8">-&gt;</operator><name pos:start="43:9" pos:end="43:22">header_written</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <literal type="number" pos:start="43:26" pos:end="43:26">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:62"><expr pos:start="47:5" pos:end="47:61"><call pos:start="47:5" pos:end="47:61"><name pos:start="47:5" pos:end="47:18">av_dump_format</name><argument_list pos:start="47:19" pos:end="47:61">(<argument pos:start="47:20" pos:end="47:26"><expr pos:start="47:20" pos:end="47:26"><name pos:start="47:20" pos:end="47:26"><name pos:start="47:20" pos:end="47:21">of</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:26">ctx</name></name></expr></argument>, <argument pos:start="47:29" pos:end="47:38"><expr pos:start="47:29" pos:end="47:38"><name pos:start="47:29" pos:end="47:38">file_index</name></expr></argument>, <argument pos:start="47:41" pos:end="47:57"><expr pos:start="47:41" pos:end="47:57"><name pos:start="47:41" pos:end="47:57"><name pos:start="47:41" pos:end="47:42">of</name><operator pos:start="47:43" pos:end="47:44">-&gt;</operator><name pos:start="47:45" pos:end="47:47">ctx</name><operator pos:start="47:48" pos:end="47:49">-&gt;</operator><name pos:start="47:50" pos:end="47:57">filename</name></name></expr></argument>, <argument pos:start="47:60" pos:end="47:60"><expr pos:start="47:60" pos:end="47:60"><literal type="number" pos:start="47:60" pos:end="47:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="53:20"><if pos:start="51:5" pos:end="53:20">if <condition pos:start="51:8" pos:end="51:33">(<expr pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:20">sdp_filename</name> <operator pos:start="51:22" pos:end="51:23">||</operator> <name pos:start="51:25" pos:end="51:32">want_sdp</name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:20"><block_content pos:start="53:9" pos:end="53:20">

        <expr_stmt pos:start="53:9" pos:end="53:20"><expr pos:start="53:9" pos:end="53:19"><call pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:17">print_sdp</name><argument_list pos:start="53:18" pos:end="53:19">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:33">/* flush the muxing queues */</comment>

    <for pos:start="59:5" pos:end="83:5">for <control pos:start="59:9" pos:end="59:45">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:40"><expr pos:start="59:17" pos:end="59:39"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <name pos:start="59:21" pos:end="59:39"><name pos:start="59:21" pos:end="59:22">of</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:27">ctx</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:39">nb_streams</name></name></expr>;</condition> <incr pos:start="59:42" pos:end="59:44"><expr pos:start="59:42" pos:end="59:44"><name pos:start="59:42" pos:end="59:42">i</name><operator pos:start="59:43" pos:end="59:44">++</operator></expr></incr>)</control> <block pos:start="59:47" pos:end="83:5">{<block_content pos:start="61:9" pos:end="81:9">

        <decl_stmt pos:start="61:9" pos:end="61:62"><decl pos:start="61:9" pos:end="61:61"><type pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:20">OutputStream</name> <modifier pos:start="61:22" pos:end="61:22">*</modifier></type><name pos:start="61:23" pos:end="61:25">ost</name> <init pos:start="61:27" pos:end="61:61">= <expr pos:start="61:29" pos:end="61:61"><name pos:start="61:29" pos:end="61:61"><name pos:start="61:29" pos:end="61:42">output_streams</name><index pos:start="61:43" pos:end="61:61">[<expr pos:start="61:44" pos:end="61:60"><name pos:start="61:44" pos:end="61:56"><name pos:start="61:44" pos:end="61:45">of</name><operator pos:start="61:46" pos:end="61:47">-&gt;</operator><name pos:start="61:48" pos:end="61:56">ost_index</name></name> <operator pos:start="61:58" pos:end="61:58">+</operator> <name pos:start="61:60" pos:end="61:60">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="65:9" pos:end="65:93">/* try to improve muxing time_base (only possible if nothing has been written yet) */</comment>

        <if_stmt pos:start="67:9" pos:end="69:51"><if pos:start="67:9" pos:end="69:51">if <condition pos:start="67:12" pos:end="67:45">(<expr pos:start="67:13" pos:end="67:44"><operator pos:start="67:13" pos:end="67:13">!</operator><call pos:start="67:14" pos:end="67:44"><name pos:start="67:14" pos:end="67:25">av_fifo_size</name><argument_list pos:start="67:26" pos:end="67:44">(<argument pos:start="67:27" pos:end="67:43"><expr pos:start="67:27" pos:end="67:43"><name pos:start="67:27" pos:end="67:43"><name pos:start="67:27" pos:end="67:29">ost</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:43">muxing_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:51"><block_content pos:start="69:13" pos:end="69:51">

            <expr_stmt pos:start="69:13" pos:end="69:51"><expr pos:start="69:13" pos:end="69:50"><name pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:15">ost</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:29">mux_timebase</name></name> <operator pos:start="69:31" pos:end="69:31">=</operator> <name pos:start="69:33" pos:end="69:50"><name pos:start="69:33" pos:end="69:35">ost</name><operator pos:start="69:36" pos:end="69:37">-&gt;</operator><name pos:start="69:38" pos:end="69:39">st</name><operator pos:start="69:40" pos:end="69:41">-&gt;</operator><name pos:start="69:42" pos:end="69:50">time_base</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <while pos:start="73:9" pos:end="81:9">while <condition pos:start="73:15" pos:end="73:47">(<expr pos:start="73:16" pos:end="73:46"><call pos:start="73:16" pos:end="73:46"><name pos:start="73:16" pos:end="73:27">av_fifo_size</name><argument_list pos:start="73:28" pos:end="73:46">(<argument pos:start="73:29" pos:end="73:45"><expr pos:start="73:29" pos:end="73:45"><name pos:start="73:29" pos:end="73:45"><name pos:start="73:29" pos:end="73:31">ost</name><operator pos:start="73:32" pos:end="73:33">-&gt;</operator><name pos:start="73:34" pos:end="73:45">muxing_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:49" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:40">

            <decl_stmt pos:start="75:13" pos:end="75:25"><decl pos:start="75:13" pos:end="75:24"><type pos:start="75:13" pos:end="75:20"><name pos:start="75:13" pos:end="75:20">AVPacket</name></type> <name pos:start="75:22" pos:end="75:24">pkt</name></decl>;</decl_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:77"><expr pos:start="77:13" pos:end="77:76"><call pos:start="77:13" pos:end="77:76"><name pos:start="77:13" pos:end="77:32">av_fifo_generic_read</name><argument_list pos:start="77:33" pos:end="77:76">(<argument pos:start="77:34" pos:end="77:50"><expr pos:start="77:34" pos:end="77:50"><name pos:start="77:34" pos:end="77:50"><name pos:start="77:34" pos:end="77:36">ost</name><operator pos:start="77:37" pos:end="77:38">-&gt;</operator><name pos:start="77:39" pos:end="77:50">muxing_queue</name></name></expr></argument>, <argument pos:start="77:53" pos:end="77:56"><expr pos:start="77:53" pos:end="77:56"><operator pos:start="77:53" pos:end="77:53">&amp;</operator><name pos:start="77:54" pos:end="77:56">pkt</name></expr></argument>, <argument pos:start="77:59" pos:end="77:69"><expr pos:start="77:59" pos:end="77:69"><sizeof pos:start="77:59" pos:end="77:69">sizeof<argument_list pos:start="77:65" pos:end="77:69">(<argument pos:start="77:66" pos:end="77:68"><expr pos:start="77:66" pos:end="77:68"><name pos:start="77:66" pos:end="77:68">pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="77:72" pos:end="77:75"><expr pos:start="77:72" pos:end="77:75"><name pos:start="77:72" pos:end="77:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:40"><expr pos:start="79:13" pos:end="79:39"><call pos:start="79:13" pos:end="79:39"><name pos:start="79:13" pos:end="79:24">write_packet</name><argument_list pos:start="79:25" pos:end="79:39">(<argument pos:start="79:26" pos:end="79:27"><expr pos:start="79:26" pos:end="79:27"><name pos:start="79:26" pos:end="79:27">of</name></expr></argument>, <argument pos:start="79:30" pos:end="79:33"><expr pos:start="79:30" pos:end="79:33"><operator pos:start="79:30" pos:end="79:30">&amp;</operator><name pos:start="79:31" pos:end="79:33">pkt</name></expr></argument>, <argument pos:start="79:36" pos:end="79:38"><expr pos:start="79:36" pos:end="79:38"><name pos:start="79:36" pos:end="79:38">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></for>



    <return pos:start="87:5" pos:end="87:13">return <expr pos:start="87:12" pos:end="87:12"><literal type="number" pos:start="87:12" pos:end="87:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
