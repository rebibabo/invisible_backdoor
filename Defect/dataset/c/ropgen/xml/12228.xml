<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12228.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:13"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:37">avcodec_open2</name><parameter_list pos:start="1:38" pos:end="1:100">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:75"><decl pos:start="1:62" pos:end="1:75"><type pos:start="1:62" pos:end="1:75"><name pos:start="1:62" pos:end="1:68">AVCodec</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:75">codec</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:99"><decl pos:start="1:78" pos:end="1:99"><type pos:start="1:78" pos:end="1:99"><name pos:start="1:78" pos:end="1:89">AVDictionary</name> <modifier pos:start="1:91" pos:end="1:91">*</modifier><modifier pos:start="1:92" pos:end="1:92">*</modifier></type><name pos:start="1:93" pos:end="1:99">options</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="143:13">{<block_content pos:start="3:5" pos:end="143:13">
    <decl_stmt pos:start="3:5" pos:end="3:16"><decl pos:start="3:5" pos:end="3:15"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:11">ret</name> <init pos:start="3:13" pos:end="3:15">= <expr pos:start="3:15" pos:end="3:15"><literal type="number" pos:start="3:15" pos:end="3:15">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:29"><decl pos:start="4:5" pos:end="4:28"><type pos:start="4:5" pos:end="4:18"><name pos:start="4:5" pos:end="4:16">AVDictionary</name> <modifier pos:start="4:18" pos:end="4:18">*</modifier></type><name pos:start="4:19" pos:end="4:21">tmp</name> <init pos:start="4:23" pos:end="4:28">= <expr pos:start="4:25" pos:end="4:28"><name pos:start="4:25" pos:end="4:28">NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="5:5" pos:end="6:31"><if pos:start="5:5" pos:end="6:31">if <condition pos:start="5:8" pos:end="5:84">(<expr pos:start="5:9" pos:end="5:83"><name pos:start="5:9" pos:end="5:29"><name pos:start="5:9" pos:end="5:13">avctx</name><operator pos:start="5:14" pos:end="5:15">-&gt;</operator><name pos:start="5:16" pos:end="5:29">extradata_size</name></name> <operator pos:start="5:31" pos:end="5:31">&lt;</operator> <literal type="number" pos:start="5:33" pos:end="5:33">0</literal> <operator pos:start="5:35" pos:end="5:36">||</operator> <name pos:start="5:38" pos:end="5:58"><name pos:start="5:38" pos:end="5:42">avctx</name><operator pos:start="5:43" pos:end="5:44">-&gt;</operator><name pos:start="5:45" pos:end="5:58">extradata_size</name></name> <operator pos:start="5:60" pos:end="5:61">&gt;=</operator> <name pos:start="5:63" pos:end="5:83">FF_MAX_EXTRADATA_SIZE</name></expr>)</condition><block type="pseudo" pos:start="6:9" pos:end="6:31"><block_content pos:start="6:9" pos:end="6:31">
        <return pos:start="6:9" pos:end="6:31">return <expr pos:start="6:16" pos:end="6:30"><call pos:start="6:16" pos:end="6:30"><name pos:start="6:16" pos:end="6:22">AVERROR</name><argument_list pos:start="6:23" pos:end="6:30">(<argument pos:start="6:24" pos:end="6:29"><expr pos:start="6:24" pos:end="6:29"><name pos:start="6:24" pos:end="6:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="7:5" pos:end="8:40"><if pos:start="7:5" pos:end="8:40">if <condition pos:start="7:8" pos:end="7:16">(<expr pos:start="7:9" pos:end="7:15"><name pos:start="7:9" pos:end="7:15">options</name></expr>)</condition><block type="pseudo" pos:start="8:9" pos:end="8:40"><block_content pos:start="8:9" pos:end="8:40">
        <expr_stmt pos:start="8:9" pos:end="8:40"><expr pos:start="8:9" pos:end="8:39"><call pos:start="8:9" pos:end="8:39"><name pos:start="8:9" pos:end="8:20">av_dict_copy</name><argument_list pos:start="8:21" pos:end="8:39">(<argument pos:start="8:22" pos:end="8:25"><expr pos:start="8:22" pos:end="8:25"><operator pos:start="8:22" pos:end="8:22">&amp;</operator><name pos:start="8:23" pos:end="8:25">tmp</name></expr></argument>, <argument pos:start="8:28" pos:end="8:35"><expr pos:start="8:28" pos:end="8:35"><operator pos:start="8:28" pos:end="8:28">*</operator><name pos:start="8:29" pos:end="8:35">options</name></expr></argument>, <argument pos:start="8:38" pos:end="8:38"><expr pos:start="8:38" pos:end="8:38"><literal type="number" pos:start="8:38" pos:end="8:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="9:5" pos:end="9:69">/* If there is a user-supplied mutex locking routine, call it. */</comment>
    <if_stmt pos:start="10:5" pos:end="143:13"><if pos:start="10:5" pos:end="143:13">if <condition pos:start="10:8" pos:end="10:22">(<expr pos:start="10:9" pos:end="10:21"><name pos:start="10:9" pos:end="10:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="10:24" pos:end="143:13">{<block_content pos:start="11:9" pos:end="143:13">
        <if_stmt pos:start="11:9" pos:end="12:22"><if pos:start="11:9" pos:end="12:22">if <condition pos:start="11:12" pos:end="11:59">(<expr pos:start="11:13" pos:end="11:58"><call pos:start="11:13" pos:end="11:58">(<modifier pos:start="11:14" pos:end="11:14">*</modifier><name pos:start="11:15" pos:end="11:27">ff_lockmgr_cb</name>)<argument_list pos:start="11:29" pos:end="11:58">(<argument pos:start="11:30" pos:end="11:41"><expr pos:start="11:30" pos:end="11:41"><operator pos:start="11:30" pos:end="11:30">&amp;</operator><name pos:start="11:31" pos:end="11:41">codec_mutex</name></expr></argument>, <argument pos:start="11:44" pos:end="11:57"><expr pos:start="11:44" pos:end="11:57"><name pos:start="11:44" pos:end="11:57">AV_LOCK_OBTAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="12:13" pos:end="12:22"><block_content pos:start="12:13" pos:end="12:22">
            <return pos:start="12:13" pos:end="12:22">return <expr pos:start="12:20" pos:end="12:21"><operator pos:start="12:20" pos:end="12:20">-</operator><literal type="number" pos:start="12:21" pos:end="12:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:28">entangled_thread_counter</name><operator pos:start="13:29" pos:end="13:30">++</operator></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="143:13"><if pos:start="14:5" pos:end="143:13">if<condition pos:start="14:7" pos:end="14:37">(<expr pos:start="14:8" pos:end="14:36"><name pos:start="14:8" pos:end="14:31">entangled_thread_counter</name> <operator pos:start="14:33" pos:end="14:34">!=</operator> <literal type="number" pos:start="14:36" pos:end="14:36">1</literal></expr>)</condition><block pos:start="14:38" pos:end="143:13">{<block_content pos:start="15:9" pos:end="143:13">
        <expr_stmt pos:start="15:9" pos:end="15:97"><expr pos:start="15:9" pos:end="15:96"><call pos:start="15:9" pos:end="15:96"><name pos:start="15:9" pos:end="15:14">av_log</name><argument_list pos:start="15:15" pos:end="15:96">(<argument pos:start="15:16" pos:end="15:20"><expr pos:start="15:16" pos:end="15:20"><name pos:start="15:16" pos:end="15:20">avctx</name></expr></argument>, <argument pos:start="15:23" pos:end="15:34"><expr pos:start="15:23" pos:end="15:34"><name pos:start="15:23" pos:end="15:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="15:37" pos:end="15:95"><expr pos:start="15:37" pos:end="15:95"><literal type="string" pos:start="15:37" pos:end="15:95">"insufficient thread locking around avcodec_open/close()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="16:9" pos:end="16:17">goto <name pos:start="16:14" pos:end="16:16">end</name>;</goto>
    <if_stmt pos:start="17:5" pos:end="143:13"><if pos:start="17:5" pos:end="143:13">if<condition pos:start="17:7" pos:end="17:30">(<expr pos:start="17:8" pos:end="17:29"><name pos:start="17:8" pos:end="17:19"><name pos:start="17:8" pos:end="17:12">avctx</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:19">codec</name></name> <operator pos:start="17:21" pos:end="17:22">||</operator> <operator pos:start="17:24" pos:end="17:24">!</operator><name pos:start="17:25" pos:end="17:29">codec</name></expr>)</condition> <block pos:start="17:32" pos:end="143:13">{<block_content pos:start="18:9" pos:end="143:13">
        <expr_stmt pos:start="18:9" pos:end="18:30"><expr pos:start="18:9" pos:end="18:29"><name pos:start="18:9" pos:end="18:11">ret</name> <operator pos:start="18:13" pos:end="18:13">=</operator> <call pos:start="18:15" pos:end="18:29"><name pos:start="18:15" pos:end="18:21">AVERROR</name><argument_list pos:start="18:22" pos:end="18:29">(<argument pos:start="18:23" pos:end="18:28"><expr pos:start="18:23" pos:end="18:28"><name pos:start="18:23" pos:end="18:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="19:9" pos:end="19:17">goto <name pos:start="19:14" pos:end="19:16">end</name>;</goto>
    <expr_stmt pos:start="20:5" pos:end="20:58"><expr pos:start="20:5" pos:end="20:57"><name pos:start="20:5" pos:end="20:19"><name pos:start="20:5" pos:end="20:9">avctx</name><operator pos:start="20:10" pos:end="20:11">-&gt;</operator><name pos:start="20:12" pos:end="20:19">internal</name></name> <operator pos:start="20:21" pos:end="20:21">=</operator> <call pos:start="20:23" pos:end="20:57"><name pos:start="20:23" pos:end="20:32">av_mallocz</name><argument_list pos:start="20:33" pos:end="20:57">(<argument pos:start="20:34" pos:end="20:56"><expr pos:start="20:34" pos:end="20:56"><sizeof pos:start="20:34" pos:end="20:56">sizeof<argument_list pos:start="20:40" pos:end="20:56">(<argument pos:start="20:41" pos:end="20:55"><expr pos:start="20:41" pos:end="20:55"><name pos:start="20:41" pos:end="20:55">AVCodecInternal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="21:5" pos:end="143:13"><if pos:start="21:5" pos:end="143:13">if <condition pos:start="21:8" pos:end="21:25">(<expr pos:start="21:9" pos:end="21:24"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:24"><name pos:start="21:10" pos:end="21:14">avctx</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:24">internal</name></name></expr>)</condition> <block pos:start="21:27" pos:end="143:13">{<block_content pos:start="22:9" pos:end="143:13">
        <expr_stmt pos:start="22:9" pos:end="22:30"><expr pos:start="22:9" pos:end="22:29"><name pos:start="22:9" pos:end="22:11">ret</name> <operator pos:start="22:13" pos:end="22:13">=</operator> <call pos:start="22:15" pos:end="22:29"><name pos:start="22:15" pos:end="22:21">AVERROR</name><argument_list pos:start="22:22" pos:end="22:29">(<argument pos:start="22:23" pos:end="22:28"><expr pos:start="22:23" pos:end="22:28"><name pos:start="22:23" pos:end="22:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="23:9" pos:end="23:17">goto <name pos:start="23:14" pos:end="23:16">end</name>;</goto>
    <if_stmt pos:start="24:5" pos:end="143:13"><if pos:start="24:5" pos:end="143:13">if <condition pos:start="24:8" pos:end="24:34">(<expr pos:start="24:9" pos:end="24:33"><name pos:start="24:9" pos:end="24:29"><name pos:start="24:9" pos:end="24:13">codec</name><operator pos:start="24:14" pos:end="24:15">-&gt;</operator><name pos:start="24:16" pos:end="24:29">priv_data_size</name></name> <operator pos:start="24:31" pos:end="24:31">&gt;</operator> <literal type="number" pos:start="24:33" pos:end="24:33">0</literal></expr>)</condition> <block pos:start="24:36" pos:end="143:13">{<block_content pos:start="25:7" pos:end="143:13">
      <if_stmt pos:start="25:7" pos:end="143:13"><if pos:start="25:7" pos:end="143:13">if<condition pos:start="25:9" pos:end="25:27">(<expr pos:start="25:10" pos:end="25:26"><operator pos:start="25:10" pos:end="25:10">!</operator><name pos:start="25:11" pos:end="25:26"><name pos:start="25:11" pos:end="25:15">avctx</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:26">priv_data</name></name></expr>)</condition><block pos:start="25:28" pos:end="143:13">{<block_content pos:start="26:9" pos:end="143:13">
        <expr_stmt pos:start="26:9" pos:end="26:61"><expr pos:start="26:9" pos:end="26:60"><name pos:start="26:9" pos:end="26:24"><name pos:start="26:9" pos:end="26:13">avctx</name><operator pos:start="26:14" pos:end="26:15">-&gt;</operator><name pos:start="26:16" pos:end="26:24">priv_data</name></name> <operator pos:start="26:26" pos:end="26:26">=</operator> <call pos:start="26:28" pos:end="26:60"><name pos:start="26:28" pos:end="26:37">av_mallocz</name><argument_list pos:start="26:38" pos:end="26:60">(<argument pos:start="26:39" pos:end="26:59"><expr pos:start="26:39" pos:end="26:59"><name pos:start="26:39" pos:end="26:59"><name pos:start="26:39" pos:end="26:43">codec</name><operator pos:start="26:44" pos:end="26:45">-&gt;</operator><name pos:start="26:46" pos:end="26:59">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="27:9" pos:end="143:13"><if pos:start="27:9" pos:end="143:13">if <condition pos:start="27:12" pos:end="27:30">(<expr pos:start="27:13" pos:end="27:29"><operator pos:start="27:13" pos:end="27:13">!</operator><name pos:start="27:14" pos:end="27:29"><name pos:start="27:14" pos:end="27:18">avctx</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:29">priv_data</name></name></expr>)</condition> <block pos:start="27:32" pos:end="143:13">{<block_content pos:start="28:13" pos:end="143:13">
            <expr_stmt pos:start="28:13" pos:end="28:34"><expr pos:start="28:13" pos:end="28:33"><name pos:start="28:13" pos:end="28:15">ret</name> <operator pos:start="28:17" pos:end="28:17">=</operator> <call pos:start="28:19" pos:end="28:33"><name pos:start="28:19" pos:end="28:25">AVERROR</name><argument_list pos:start="28:26" pos:end="28:33">(<argument pos:start="28:27" pos:end="28:32"><expr pos:start="28:27" pos:end="28:32"><name pos:start="28:27" pos:end="28:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="29:13" pos:end="29:21">goto <name pos:start="29:18" pos:end="29:20">end</name>;</goto>
        <if_stmt pos:start="30:9" pos:end="143:13"><if pos:start="30:9" pos:end="34:5">if <condition pos:start="30:12" pos:end="30:30">(<expr pos:start="30:13" pos:end="30:29"><name pos:start="30:13" pos:end="30:29"><name pos:start="30:13" pos:end="30:17">codec</name><operator pos:start="30:18" pos:end="30:19">-&gt;</operator><name pos:start="30:20" pos:end="30:29">priv_class</name></name></expr>)</condition> <block pos:start="30:32" pos:end="34:5">{<block_content pos:start="31:13" pos:end="33:83">
            <expr_stmt pos:start="31:13" pos:end="31:60"><expr pos:start="31:13" pos:end="31:59"><operator pos:start="31:13" pos:end="31:13">*</operator><operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:21">AVClass</name><operator pos:start="31:22" pos:end="31:22">*</operator><operator pos:start="31:23" pos:end="31:23">*</operator><operator pos:start="31:24" pos:end="31:24">)</operator><name pos:start="31:25" pos:end="31:40"><name pos:start="31:25" pos:end="31:29">avctx</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:40">priv_data</name></name><operator pos:start="31:41" pos:end="31:41">=</operator> <name pos:start="31:43" pos:end="31:59"><name pos:start="31:43" pos:end="31:47">codec</name><operator pos:start="31:48" pos:end="31:49">-&gt;</operator><name pos:start="31:50" pos:end="31:59">priv_class</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="32:13" pos:end="32:50"><expr pos:start="32:13" pos:end="32:49"><call pos:start="32:13" pos:end="32:49"><name pos:start="32:13" pos:end="32:31">av_opt_set_defaults</name><argument_list pos:start="32:32" pos:end="32:49">(<argument pos:start="32:33" pos:end="32:48"><expr pos:start="32:33" pos:end="32:48"><name pos:start="32:33" pos:end="32:48"><name pos:start="32:33" pos:end="32:37">avctx</name><operator pos:start="32:38" pos:end="32:39">-&gt;</operator><name pos:start="32:40" pos:end="32:48">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt pos:start="33:7" pos:end="33:83"><if pos:start="33:7" pos:end="33:83">if <condition pos:start="33:10" pos:end="33:83">(<expr pos:start="33:11" pos:end="33:82"><name pos:start="33:11" pos:end="33:27"><name pos:start="33:11" pos:end="33:15">codec</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:27">priv_class</name></name> <operator pos:start="33:29" pos:end="33:30">&amp;&amp;</operator> <operator pos:start="33:32" pos:end="33:32">(</operator><name pos:start="33:33" pos:end="33:35">ret</name> <operator pos:start="33:37" pos:end="33:37">=</operator> <call pos:start="33:39" pos:end="33:77"><name pos:start="33:39" pos:end="33:53">av_opt_set_dict</name><argument_list pos:start="33:54" pos:end="33:77">(<argument pos:start="33:55" pos:end="33:70"><expr pos:start="33:55" pos:end="33:70"><name pos:start="33:55" pos:end="33:70"><name pos:start="33:55" pos:end="33:59">avctx</name><operator pos:start="33:60" pos:end="33:61">-&gt;</operator><name pos:start="33:62" pos:end="33:70">priv_data</name></name></expr></argument>, <argument pos:start="33:73" pos:end="33:76"><expr pos:start="33:73" pos:end="33:76"><operator pos:start="33:73" pos:end="33:73">&amp;</operator><name pos:start="33:74" pos:end="33:76">tmp</name></expr></argument>)</argument_list></call><operator pos:start="33:78" pos:end="33:78">)</operator> <operator pos:start="33:80" pos:end="33:80">&lt;</operator> <literal type="number" pos:start="33:82" pos:end="33:82">0</literal></expr>)</condition><block type="pseudo"><block_content/></block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="34:7" pos:end="143:13">else <block pos:start="34:12" pos:end="143:13">{<block_content pos:start="35:9" pos:end="143:13">
        <expr_stmt pos:start="35:9" pos:end="35:32"><expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:13">avctx</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:24">priv_data</name></name> <operator pos:start="35:26" pos:end="35:26">=</operator> <name pos:start="35:28" pos:end="35:31">NULL</name></expr>;</expr_stmt>
    <if_stmt pos:start="36:5" pos:end="143:13"><if pos:start="36:5" pos:end="143:13">if <condition pos:start="36:8" pos:end="36:49">(<expr pos:start="36:9" pos:end="36:48"><operator pos:start="36:9" pos:end="36:9">(</operator><name pos:start="36:10" pos:end="36:12">ret</name> <operator pos:start="36:14" pos:end="36:14">=</operator> <call pos:start="36:16" pos:end="36:43"><name pos:start="36:16" pos:end="36:30">av_opt_set_dict</name><argument_list pos:start="36:31" pos:end="36:43">(<argument pos:start="36:32" pos:end="36:36"><expr pos:start="36:32" pos:end="36:36"><name pos:start="36:32" pos:end="36:36">avctx</name></expr></argument>, <argument pos:start="36:39" pos:end="36:42"><expr pos:start="36:39" pos:end="36:42"><operator pos:start="36:39" pos:end="36:39">&amp;</operator><name pos:start="36:40" pos:end="36:42">tmp</name></expr></argument>)</argument_list></call><operator pos:start="36:44" pos:end="36:44">)</operator> <operator pos:start="36:46" pos:end="36:46">&lt;</operator> <literal type="number" pos:start="36:48" pos:end="36:48">0</literal></expr>)</condition><block type="pseudo" pos:start="38:5" pos:end="143:13"><block_content pos:start="38:5" pos:end="143:13">
    <comment type="line" pos:start="37:5" pos:end="37:114">//We only call avcodec_set_dimensions() for non h264 codecs so as not to overwrite previously setup dimensions</comment>
    <if_stmt pos:start="38:5" pos:end="143:13"><if pos:start="38:5" pos:end="143:13">if<condition pos:start="38:7" pos:end="38:122">(<expr pos:start="38:8" pos:end="38:121"><operator pos:start="38:8" pos:end="38:8">!</operator><operator pos:start="38:9" pos:end="38:9">(</operator> <name pos:start="38:11" pos:end="38:28"><name pos:start="38:11" pos:end="38:15">avctx</name><operator pos:start="38:16" pos:end="38:17">-&gt;</operator><name pos:start="38:18" pos:end="38:28">coded_width</name></name> <operator pos:start="38:30" pos:end="38:31">&amp;&amp;</operator> <name pos:start="38:33" pos:end="38:51"><name pos:start="38:33" pos:end="38:37">avctx</name><operator pos:start="38:38" pos:end="38:39">-&gt;</operator><name pos:start="38:40" pos:end="38:51">coded_height</name></name> <operator pos:start="38:53" pos:end="38:54">&amp;&amp;</operator> <name pos:start="38:56" pos:end="38:67"><name pos:start="38:56" pos:end="38:60">avctx</name><operator pos:start="38:61" pos:end="38:62">-&gt;</operator><name pos:start="38:63" pos:end="38:67">width</name></name> <operator pos:start="38:69" pos:end="38:70">&amp;&amp;</operator> <name pos:start="38:72" pos:end="38:84"><name pos:start="38:72" pos:end="38:76">avctx</name><operator pos:start="38:77" pos:end="38:78">-&gt;</operator><name pos:start="38:79" pos:end="38:84">height</name></name> <operator pos:start="38:86" pos:end="38:87">&amp;&amp;</operator> <name pos:start="38:89" pos:end="38:103"><name pos:start="38:89" pos:end="38:93">avctx</name><operator pos:start="38:94" pos:end="38:95">-&gt;</operator><name pos:start="38:96" pos:end="38:103">codec_id</name></name> <operator pos:start="38:105" pos:end="38:106">==</operator> <name pos:start="38:108" pos:end="38:120">CODEC_ID_H264</name><operator pos:start="38:121" pos:end="38:121">)</operator></expr>)</condition><block pos:start="38:123" pos:end="143:13">{<block_content pos:start="39:5" pos:end="143:13">
    <if_stmt pos:start="39:5" pos:end="42:67"><if pos:start="39:5" pos:end="40:79">if<condition pos:start="39:7" pos:end="39:49">(<expr pos:start="39:8" pos:end="39:48"><name pos:start="39:8" pos:end="39:25"><name pos:start="39:8" pos:end="39:12">avctx</name><operator pos:start="39:13" pos:end="39:14">-&gt;</operator><name pos:start="39:15" pos:end="39:25">coded_width</name></name> <operator pos:start="39:27" pos:end="39:28">&amp;&amp;</operator> <name pos:start="39:30" pos:end="39:48"><name pos:start="39:30" pos:end="39:34">avctx</name><operator pos:start="39:35" pos:end="39:36">-&gt;</operator><name pos:start="39:37" pos:end="39:48">coded_height</name></name></expr>)</condition><block type="pseudo" pos:start="40:9" pos:end="40:79"><block_content pos:start="40:9" pos:end="40:79">
        <expr_stmt pos:start="40:9" pos:end="40:79"><expr pos:start="40:9" pos:end="40:78"><call pos:start="40:9" pos:end="40:78"><name pos:start="40:9" pos:end="40:30">avcodec_set_dimensions</name><argument_list pos:start="40:31" pos:end="40:78">(<argument pos:start="40:32" pos:end="40:36"><expr pos:start="40:32" pos:end="40:36"><name pos:start="40:32" pos:end="40:36">avctx</name></expr></argument>, <argument pos:start="40:39" pos:end="40:56"><expr pos:start="40:39" pos:end="40:56"><name pos:start="40:39" pos:end="40:56"><name pos:start="40:39" pos:end="40:43">avctx</name><operator pos:start="40:44" pos:end="40:45">-&gt;</operator><name pos:start="40:46" pos:end="40:56">coded_width</name></name></expr></argument>, <argument pos:start="40:59" pos:end="40:77"><expr pos:start="40:59" pos:end="40:77"><name pos:start="40:59" pos:end="40:77"><name pos:start="40:59" pos:end="40:63">avctx</name><operator pos:start="40:64" pos:end="40:65">-&gt;</operator><name pos:start="40:66" pos:end="40:77">coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="41:5" pos:end="42:67">else if<condition pos:start="41:12" pos:end="41:42">(<expr pos:start="41:13" pos:end="41:41"><name pos:start="41:13" pos:end="41:24"><name pos:start="41:13" pos:end="41:17">avctx</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:24">width</name></name> <operator pos:start="41:26" pos:end="41:27">&amp;&amp;</operator> <name pos:start="41:29" pos:end="41:41"><name pos:start="41:29" pos:end="41:33">avctx</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:41">height</name></name></expr>)</condition><block type="pseudo" pos:start="42:9" pos:end="42:67"><block_content pos:start="42:9" pos:end="42:67">
        <expr_stmt pos:start="42:9" pos:end="42:67"><expr pos:start="42:9" pos:end="42:66"><call pos:start="42:9" pos:end="42:66"><name pos:start="42:9" pos:end="42:30">avcodec_set_dimensions</name><argument_list pos:start="42:31" pos:end="42:66">(<argument pos:start="42:32" pos:end="42:36"><expr pos:start="42:32" pos:end="42:36"><name pos:start="42:32" pos:end="42:36">avctx</name></expr></argument>, <argument pos:start="42:39" pos:end="42:50"><expr pos:start="42:39" pos:end="42:50"><name pos:start="42:39" pos:end="42:50"><name pos:start="42:39" pos:end="42:43">avctx</name><operator pos:start="42:44" pos:end="42:45">-&gt;</operator><name pos:start="42:46" pos:end="42:50">width</name></name></expr></argument>, <argument pos:start="42:53" pos:end="42:65"><expr pos:start="42:53" pos:end="42:65"><name pos:start="42:53" pos:end="42:65"><name pos:start="42:53" pos:end="42:57">avctx</name><operator pos:start="42:58" pos:end="42:59">-&gt;</operator><name pos:start="42:60" pos:end="42:65">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="43:5" pos:end="143:13"><if pos:start="43:5" pos:end="143:13">if <condition pos:start="43:8" pos:end="45:90">(<expr pos:start="43:9" pos:end="45:89"><operator pos:start="43:9" pos:end="43:9">(</operator><name pos:start="43:10" pos:end="43:27"><name pos:start="43:10" pos:end="43:14">avctx</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:27">coded_width</name></name> <operator pos:start="43:29" pos:end="43:30">||</operator> <name pos:start="43:32" pos:end="43:50"><name pos:start="43:32" pos:end="43:36">avctx</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:50">coded_height</name></name> <operator pos:start="43:52" pos:end="43:53">||</operator> <name pos:start="43:55" pos:end="43:66"><name pos:start="43:55" pos:end="43:59">avctx</name><operator pos:start="43:60" pos:end="43:61">-&gt;</operator><name pos:start="43:62" pos:end="43:66">width</name></name> <operator pos:start="43:68" pos:end="43:69">||</operator> <name pos:start="43:71" pos:end="43:83"><name pos:start="43:71" pos:end="43:75">avctx</name><operator pos:start="43:76" pos:end="43:77">-&gt;</operator><name pos:start="43:78" pos:end="43:83">height</name></name><operator pos:start="43:84" pos:end="43:84">)</operator>
        <operator pos:start="44:9" pos:end="44:10">&amp;&amp;</operator> <operator pos:start="44:12" pos:end="44:12">(</operator>  <call pos:start="44:15" pos:end="44:84"><name pos:start="44:15" pos:end="44:33">av_image_check_size</name><argument_list pos:start="44:34" pos:end="44:84">(<argument pos:start="44:35" pos:end="44:52"><expr pos:start="44:35" pos:end="44:52"><name pos:start="44:35" pos:end="44:52"><name pos:start="44:35" pos:end="44:39">avctx</name><operator pos:start="44:40" pos:end="44:41">-&gt;</operator><name pos:start="44:42" pos:end="44:52">coded_width</name></name></expr></argument>, <argument pos:start="44:55" pos:end="44:73"><expr pos:start="44:55" pos:end="44:73"><name pos:start="44:55" pos:end="44:73"><name pos:start="44:55" pos:end="44:59">avctx</name><operator pos:start="44:60" pos:end="44:61">-&gt;</operator><name pos:start="44:62" pos:end="44:73">coded_height</name></name></expr></argument>, <argument pos:start="44:76" pos:end="44:76"><expr pos:start="44:76" pos:end="44:76"><literal type="number" pos:start="44:76" pos:end="44:76">0</literal></expr></argument>, <argument pos:start="44:79" pos:end="44:83"><expr pos:start="44:79" pos:end="44:83"><name pos:start="44:79" pos:end="44:83">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="44:86" pos:end="44:86">&lt;</operator> <literal type="number" pos:start="44:88" pos:end="44:88">0</literal>
           <operator pos:start="45:12" pos:end="45:13">||</operator> <call pos:start="45:15" pos:end="45:84"><name pos:start="45:15" pos:end="45:33">av_image_check_size</name><argument_list pos:start="45:34" pos:end="45:84">(<argument pos:start="45:35" pos:end="45:46"><expr pos:start="45:35" pos:end="45:46"><name pos:start="45:35" pos:end="45:46"><name pos:start="45:35" pos:end="45:39">avctx</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:46">width</name></name></expr></argument>,       <argument pos:start="45:55" pos:end="45:67"><expr pos:start="45:55" pos:end="45:67"><name pos:start="45:55" pos:end="45:67"><name pos:start="45:55" pos:end="45:59">avctx</name><operator pos:start="45:60" pos:end="45:61">-&gt;</operator><name pos:start="45:62" pos:end="45:67">height</name></name></expr></argument>,       <argument pos:start="45:76" pos:end="45:76"><expr pos:start="45:76" pos:end="45:76"><literal type="number" pos:start="45:76" pos:end="45:76">0</literal></expr></argument>, <argument pos:start="45:79" pos:end="45:83"><expr pos:start="45:79" pos:end="45:83"><name pos:start="45:79" pos:end="45:83">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="45:86" pos:end="45:86">&lt;</operator> <literal type="number" pos:start="45:88" pos:end="45:88">0</literal><operator pos:start="45:89" pos:end="45:89">)</operator></expr>)</condition> <block pos:start="45:92" pos:end="143:13">{<block_content pos:start="46:9" pos:end="143:13">
        <expr_stmt pos:start="46:9" pos:end="46:80"><expr pos:start="46:9" pos:end="46:79"><call pos:start="46:9" pos:end="46:79"><name pos:start="46:9" pos:end="46:14">av_log</name><argument_list pos:start="46:15" pos:end="46:79">(<argument pos:start="46:16" pos:end="46:20"><expr pos:start="46:16" pos:end="46:20"><name pos:start="46:16" pos:end="46:20">avctx</name></expr></argument>, <argument pos:start="46:23" pos:end="46:36"><expr pos:start="46:23" pos:end="46:36"><name pos:start="46:23" pos:end="46:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="46:39" pos:end="46:78"><expr pos:start="46:39" pos:end="46:78"><literal type="string" pos:start="46:39" pos:end="46:78">"ignoring invalid width/height values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:44"><expr pos:start="47:9" pos:end="47:43"><call pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:30">avcodec_set_dimensions</name><argument_list pos:start="47:31" pos:end="47:43">(<argument pos:start="47:32" pos:end="47:36"><expr pos:start="47:32" pos:end="47:36"><name pos:start="47:32" pos:end="47:36">avctx</name></expr></argument>, <argument pos:start="47:39" pos:end="47:39"><expr pos:start="47:39" pos:end="47:39"><literal type="number" pos:start="47:39" pos:end="47:39">0</literal></expr></argument>, <argument pos:start="47:42" pos:end="47:42"><expr pos:start="47:42" pos:end="47:42"><literal type="number" pos:start="47:42" pos:end="47:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="48:5" pos:end="49:74">/* if the decoder init function was already called previously,
       free the already allocated subtitle_header before overwriting it */</comment>
    <if_stmt pos:start="50:5" pos:end="53:0"><if pos:start="50:5" pos:end="53:0">if <condition pos:start="50:8" pos:end="50:22">(<expr pos:start="50:9" pos:end="50:21"><name pos:start="50:9" pos:end="50:21"><name pos:start="50:9" pos:end="50:13">codec</name><operator pos:start="50:14" pos:end="50:15">-&gt;</operator><name pos:start="50:16" pos:end="50:21">decode</name></name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="53:0"><block_content pos:start="51:9" pos:end="53:0">
        <expr_stmt pos:start="51:9" pos:end="53:0"><expr pos:start="51:9" pos:end="51:41"><call pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:16">av_freep</name><argument_list pos:start="51:17" pos:end="51:41">(<argument pos:start="51:18" pos:end="51:40"><expr pos:start="51:18" pos:end="51:40"><operator pos:start="51:18" pos:end="51:18">&amp;</operator><name pos:start="51:19" pos:end="51:40"><name pos:start="51:19" pos:end="51:23">avctx</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:40">subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:define pos:start="52:1" pos:end="52:29">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:24"><name pos:start="52:9" pos:end="52:24">SANE_NB_CHANNELS</name></cpp:macro> <cpp:value pos:start="52:26" pos:end="52:29">128U</cpp:value></cpp:define>
    <if_stmt pos:start="53:5" pos:end="143:13"><if pos:start="53:5" pos:end="143:13">if <condition pos:start="53:8" pos:end="53:43">(<expr pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:13">avctx</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:23">channels</name></name> <operator pos:start="53:25" pos:end="53:25">&gt;</operator> <name pos:start="53:27" pos:end="53:42">SANE_NB_CHANNELS</name></expr>)</condition> <block pos:start="53:45" pos:end="143:13">{<block_content pos:start="54:9" pos:end="143:13">
        <expr_stmt pos:start="54:9" pos:end="54:30"><expr pos:start="54:9" pos:end="54:29"><name pos:start="54:9" pos:end="54:11">ret</name> <operator pos:start="54:13" pos:end="54:13">=</operator> <call pos:start="54:15" pos:end="54:29"><name pos:start="54:15" pos:end="54:21">AVERROR</name><argument_list pos:start="54:22" pos:end="54:29">(<argument pos:start="54:23" pos:end="54:28"><expr pos:start="54:23" pos:end="54:28"><name pos:start="54:23" pos:end="54:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="55:5" pos:end="55:25"><expr pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:9">avctx</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:16">codec</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:24">codec</name></expr>;</expr_stmt>
    <if_stmt pos:start="56:5" pos:end="143:13"><if pos:start="56:5" pos:end="143:13">if <condition pos:start="56:8" pos:end="57:41">(<expr pos:start="56:9" pos:end="57:40"><operator pos:start="56:9" pos:end="56:9">(</operator><name pos:start="56:10" pos:end="56:26"><name pos:start="56:10" pos:end="56:14">avctx</name><operator pos:start="56:15" pos:end="56:16">-&gt;</operator><name pos:start="56:17" pos:end="56:26">codec_type</name></name> <operator pos:start="56:28" pos:end="56:29">==</operator> <name pos:start="56:31" pos:end="56:50">AVMEDIA_TYPE_UNKNOWN</name> <operator pos:start="56:52" pos:end="56:53">||</operator> <name pos:start="56:55" pos:end="56:71"><name pos:start="56:55" pos:end="56:59">avctx</name><operator pos:start="56:60" pos:end="56:61">-&gt;</operator><name pos:start="56:62" pos:end="56:71">codec_type</name></name> <operator pos:start="56:73" pos:end="56:74">==</operator> <name pos:start="56:76" pos:end="56:86"><name pos:start="56:76" pos:end="56:80">codec</name><operator pos:start="56:81" pos:end="56:82">-&gt;</operator><name pos:start="56:83" pos:end="56:86">type</name></name><operator pos:start="56:87" pos:end="56:87">)</operator> <operator pos:start="56:89" pos:end="56:90">&amp;&amp;</operator>
        <name pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:13">avctx</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:23">codec_id</name></name> <operator pos:start="57:25" pos:end="57:26">==</operator> <name pos:start="57:28" pos:end="57:40">CODEC_ID_NONE</name></expr>)</condition> <block pos:start="57:43" pos:end="143:13">{<block_content pos:start="58:9" pos:end="143:13">
        <expr_stmt pos:start="58:9" pos:end="58:40"><expr pos:start="58:9" pos:end="58:39"><name pos:start="58:9" pos:end="58:25"><name pos:start="58:9" pos:end="58:13">avctx</name><operator pos:start="58:14" pos:end="58:15">-&gt;</operator><name pos:start="58:16" pos:end="58:25">codec_type</name></name> <operator pos:start="58:27" pos:end="58:27">=</operator> <name pos:start="58:29" pos:end="58:39"><name pos:start="58:29" pos:end="58:33">codec</name><operator pos:start="58:34" pos:end="58:35">-&gt;</operator><name pos:start="58:36" pos:end="58:39">type</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="59:9" pos:end="59:38"><expr pos:start="59:9" pos:end="59:37"><name pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:13">avctx</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:23">codec_id</name></name>   <operator pos:start="59:27" pos:end="59:27">=</operator> <name pos:start="59:29" pos:end="59:37"><name pos:start="59:29" pos:end="59:33">codec</name><operator pos:start="59:34" pos:end="59:35">-&gt;</operator><name pos:start="59:36" pos:end="59:37">id</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="60:5" pos:end="143:13"><if pos:start="60:5" pos:end="143:13">if <condition pos:start="60:8" pos:end="61:76">(<expr pos:start="60:9" pos:end="61:75"><name pos:start="60:9" pos:end="60:23"><name pos:start="60:9" pos:end="60:13">avctx</name><operator pos:start="60:14" pos:end="60:15">-&gt;</operator><name pos:start="60:16" pos:end="60:23">codec_id</name></name> <operator pos:start="60:25" pos:end="60:26">!=</operator> <name pos:start="60:28" pos:end="60:36"><name pos:start="60:28" pos:end="60:32">codec</name><operator pos:start="60:33" pos:end="60:34">-&gt;</operator><name pos:start="60:35" pos:end="60:36">id</name></name> <operator pos:start="60:38" pos:end="60:39">||</operator> <operator pos:start="60:41" pos:end="60:41">(</operator><name pos:start="60:42" pos:end="60:58"><name pos:start="60:42" pos:end="60:46">avctx</name><operator pos:start="60:47" pos:end="60:48">-&gt;</operator><name pos:start="60:49" pos:end="60:58">codec_type</name></name> <operator pos:start="60:60" pos:end="60:61">!=</operator> <name pos:start="60:63" pos:end="60:73"><name pos:start="60:63" pos:end="60:67">codec</name><operator pos:start="60:68" pos:end="60:69">-&gt;</operator><name pos:start="60:70" pos:end="60:73">type</name></name>
                           <operator pos:start="61:28" pos:end="61:29">&amp;&amp;</operator> <name pos:start="61:31" pos:end="61:47"><name pos:start="61:31" pos:end="61:35">avctx</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:47">codec_type</name></name> <operator pos:start="61:49" pos:end="61:50">!=</operator> <name pos:start="61:52" pos:end="61:74">AVMEDIA_TYPE_ATTACHMENT</name><operator pos:start="61:75" pos:end="61:75">)</operator></expr>)</condition> <block pos:start="61:78" pos:end="143:13">{<block_content pos:start="62:9" pos:end="143:13">
        <expr_stmt pos:start="62:9" pos:end="62:69"><expr pos:start="62:9" pos:end="62:68"><call pos:start="62:9" pos:end="62:68"><name pos:start="62:9" pos:end="62:14">av_log</name><argument_list pos:start="62:15" pos:end="62:68">(<argument pos:start="62:16" pos:end="62:20"><expr pos:start="62:16" pos:end="62:20"><name pos:start="62:16" pos:end="62:20">avctx</name></expr></argument>, <argument pos:start="62:23" pos:end="62:34"><expr pos:start="62:23" pos:end="62:34"><name pos:start="62:23" pos:end="62:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="62:37" pos:end="62:67"><expr pos:start="62:37" pos:end="62:67"><literal type="string" pos:start="62:37" pos:end="62:67">"codec type or id mismatches\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="63:9" pos:end="63:30"><expr pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:29"><name pos:start="63:15" pos:end="63:21">AVERROR</name><argument_list pos:start="63:22" pos:end="63:29">(<argument pos:start="63:23" pos:end="63:28"><expr pos:start="63:23" pos:end="63:28"><name pos:start="63:23" pos:end="63:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="66:0"><expr pos:start="64:5" pos:end="64:27"><name pos:start="64:5" pos:end="64:23"><name pos:start="64:5" pos:end="64:9">avctx</name><operator pos:start="64:10" pos:end="64:11">-&gt;</operator><name pos:start="64:12" pos:end="64:23">frame_number</name></name> <operator pos:start="64:25" pos:end="64:25">=</operator> <literal type="number" pos:start="64:27" pos:end="64:27">0</literal></expr>;</expr_stmt>
<cpp:if pos:start="65:1" pos:end="65:13">#<cpp:directive pos:start="65:2" pos:end="65:3">if</cpp:directive> <expr pos:start="65:5" pos:end="65:13"><name pos:start="65:5" pos:end="65:13">FF_API_ER</name></expr></cpp:if>
    <expr_stmt pos:start="66:5" pos:end="67:61"><expr pos:start="66:5" pos:end="67:60"><call pos:start="66:5" pos:end="67:60"><name pos:start="66:5" pos:end="66:10">av_log</name><argument_list pos:start="66:11" pos:end="67:60">(<argument pos:start="66:12" pos:end="66:16"><expr pos:start="66:12" pos:end="66:16"><name pos:start="66:12" pos:end="66:16">avctx</name></expr></argument>, <argument pos:start="66:19" pos:end="66:30"><expr pos:start="66:19" pos:end="66:30"><name pos:start="66:19" pos:end="66:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="66:33" pos:end="66:73"><expr pos:start="66:33" pos:end="66:73"><literal type="string" pos:start="66:33" pos:end="66:73">"err{or,}_recognition separate: %d; %X\n"</literal></expr></argument>,
           <argument pos:start="67:12" pos:end="67:35"><expr pos:start="67:12" pos:end="67:35"><name pos:start="67:12" pos:end="67:35"><name pos:start="67:12" pos:end="67:16">avctx</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:35">error_recognition</name></name></expr></argument>, <argument pos:start="67:38" pos:end="67:59"><expr pos:start="67:38" pos:end="67:59"><name pos:start="67:38" pos:end="67:59"><name pos:start="67:38" pos:end="67:42">avctx</name><operator pos:start="67:43" pos:end="67:44">-&gt;</operator><name pos:start="67:45" pos:end="67:59">err_recognition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="68:5" pos:end="143:13">switch<condition pos:start="68:11" pos:end="68:36">(<expr pos:start="68:12" pos:end="68:35"><name pos:start="68:12" pos:end="68:35"><name pos:start="68:12" pos:end="68:16">avctx</name><operator pos:start="68:17" pos:end="68:18">-&gt;</operator><name pos:start="68:19" pos:end="68:35">error_recognition</name></name></expr>)</condition><block pos:start="68:37" pos:end="143:13">{<block_content pos:start="69:9" pos:end="143:13">
        <case pos:start="69:9" pos:end="69:35">case <expr pos:start="69:14" pos:end="69:26"><name pos:start="69:14" pos:end="69:26">FF_ER_EXPLODE</name></expr>        :</case> <expr_stmt pos:start="69:37" pos:end="69:110"><expr pos:start="69:37" pos:end="69:109"><name pos:start="69:37" pos:end="69:58"><name pos:start="69:37" pos:end="69:41">avctx</name><operator pos:start="69:42" pos:end="69:43">-&gt;</operator><name pos:start="69:44" pos:end="69:58">err_recognition</name></name> <operator pos:start="69:60" pos:end="69:61">|=</operator> <name pos:start="69:63" pos:end="69:75">AV_EF_EXPLODE</name> <operator pos:start="69:77" pos:end="69:77">|</operator> <name pos:start="69:79" pos:end="69:93">AV_EF_COMPLIANT</name> <operator pos:start="69:95" pos:end="69:95">|</operator> <name pos:start="69:97" pos:end="69:109">AV_EF_CAREFUL</name></expr>;</expr_stmt>
            <break pos:start="70:13" pos:end="70:18">break;</break>
        <case pos:start="71:9" pos:end="71:35">case <expr pos:start="71:14" pos:end="71:34"><name pos:start="71:14" pos:end="71:34">FF_ER_VERY_AGGRESSIVE</name></expr>:</case>
        <case pos:start="72:9" pos:end="72:35">case <expr pos:start="72:14" pos:end="72:29"><name pos:start="72:14" pos:end="72:29">FF_ER_AGGRESSIVE</name></expr>     :</case> <expr_stmt pos:start="72:37" pos:end="72:79"><expr pos:start="72:37" pos:end="72:78"><name pos:start="72:37" pos:end="72:58"><name pos:start="72:37" pos:end="72:41">avctx</name><operator pos:start="72:42" pos:end="72:43">-&gt;</operator><name pos:start="72:44" pos:end="72:58">err_recognition</name></name> <operator pos:start="72:60" pos:end="72:61">|=</operator> <name pos:start="72:63" pos:end="72:78">AV_EF_AGGRESSIVE</name></expr>;</expr_stmt>
        <case pos:start="73:9" pos:end="73:35">case <expr pos:start="73:14" pos:end="73:28"><name pos:start="73:14" pos:end="73:28">FF_ER_COMPLIANT</name></expr>      :</case> <expr_stmt pos:start="73:37" pos:end="73:78"><expr pos:start="73:37" pos:end="73:77"><name pos:start="73:37" pos:end="73:58"><name pos:start="73:37" pos:end="73:41">avctx</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:58">err_recognition</name></name> <operator pos:start="73:60" pos:end="73:61">|=</operator> <name pos:start="73:63" pos:end="73:77">AV_EF_COMPLIANT</name></expr>;</expr_stmt>
        <case pos:start="74:9" pos:end="74:35">case <expr pos:start="74:14" pos:end="74:26"><name pos:start="74:14" pos:end="74:26">FF_ER_CAREFUL</name></expr>        :</case> <expr_stmt pos:start="74:37" pos:end="74:76"><expr pos:start="74:37" pos:end="74:75"><name pos:start="74:37" pos:end="74:58"><name pos:start="74:37" pos:end="74:41">avctx</name><operator pos:start="74:42" pos:end="74:43">-&gt;</operator><name pos:start="74:44" pos:end="74:58">err_recognition</name></name> <operator pos:start="74:60" pos:end="74:61">|=</operator> <name pos:start="74:63" pos:end="74:75">AV_EF_CAREFUL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="75:5" pos:end="78:0"><expr pos:start="75:5" pos:end="76:60"><call pos:start="75:5" pos:end="76:60"><name pos:start="75:5" pos:end="75:10">av_log</name><argument_list pos:start="75:11" pos:end="76:60">(<argument pos:start="75:12" pos:end="75:16"><expr pos:start="75:12" pos:end="75:16"><name pos:start="75:12" pos:end="75:16">avctx</name></expr></argument>, <argument pos:start="75:19" pos:end="75:30"><expr pos:start="75:19" pos:end="75:30"><name pos:start="75:19" pos:end="75:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="75:33" pos:end="75:73"><expr pos:start="75:33" pos:end="75:73"><literal type="string" pos:start="75:33" pos:end="75:73">"err{or,}_recognition combined: %d; %X\n"</literal></expr></argument>,
           <argument pos:start="76:12" pos:end="76:35"><expr pos:start="76:12" pos:end="76:35"><name pos:start="76:12" pos:end="76:35"><name pos:start="76:12" pos:end="76:16">avctx</name><operator pos:start="76:17" pos:end="76:18">-&gt;</operator><name pos:start="76:19" pos:end="76:35">error_recognition</name></name></expr></argument>, <argument pos:start="76:38" pos:end="76:59"><expr pos:start="76:38" pos:end="76:59"><name pos:start="76:38" pos:end="76:59"><name pos:start="76:38" pos:end="76:42">avctx</name><operator pos:start="76:43" pos:end="76:44">-&gt;</operator><name pos:start="76:45" pos:end="76:59">err_recognition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="78:5" pos:end="79:109"><if pos:start="78:5" pos:end="79:109">if <condition pos:start="78:8" pos:end="78:22">(<expr pos:start="78:9" pos:end="78:21"><operator pos:start="78:9" pos:end="78:9">!</operator><name pos:start="78:10" pos:end="78:21">HAVE_THREADS</name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:109"><block_content pos:start="79:9" pos:end="79:109">
        <expr_stmt pos:start="79:9" pos:end="79:109"><expr pos:start="79:9" pos:end="79:108"><call pos:start="79:9" pos:end="79:108"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:108">(<argument pos:start="79:16" pos:end="79:20"><expr pos:start="79:16" pos:end="79:20"><name pos:start="79:16" pos:end="79:20">avctx</name></expr></argument>, <argument pos:start="79:23" pos:end="79:36"><expr pos:start="79:23" pos:end="79:36"><name pos:start="79:23" pos:end="79:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="79:39" pos:end="79:107"><expr pos:start="79:39" pos:end="79:107"><literal type="string" pos:start="79:39" pos:end="79:107">"Warning: not compiled with thread support, using thread emulation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="80:5" pos:end="143:13"><if pos:start="80:5" pos:end="143:13">if <condition pos:start="80:8" pos:end="80:46">(<expr pos:start="80:9" pos:end="80:45"><name pos:start="80:9" pos:end="80:20">HAVE_THREADS</name> <operator pos:start="80:22" pos:end="80:23">&amp;&amp;</operator> <operator pos:start="80:25" pos:end="80:25">!</operator><name pos:start="80:26" pos:end="80:45"><name pos:start="80:26" pos:end="80:30">avctx</name><operator pos:start="80:31" pos:end="80:32">-&gt;</operator><name pos:start="80:33" pos:end="80:45">thread_opaque</name></name></expr>)</condition> <block pos:start="80:48" pos:end="143:13">{<block_content pos:start="81:9" pos:end="143:13">
        <expr_stmt pos:start="81:9" pos:end="81:36"><expr pos:start="81:9" pos:end="81:35"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:35"><name pos:start="81:15" pos:end="81:28">ff_thread_init</name><argument_list pos:start="81:29" pos:end="81:35">(<argument pos:start="81:30" pos:end="81:34"><expr pos:start="81:30" pos:end="81:34"><name pos:start="81:30" pos:end="81:34">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="82:9" pos:end="143:13"><if pos:start="82:9" pos:end="143:13">if <condition pos:start="82:12" pos:end="82:20">(<expr pos:start="82:13" pos:end="82:19"><name pos:start="82:13" pos:end="82:15">ret</name> <operator pos:start="82:17" pos:end="82:17">&lt;</operator> <literal type="number" pos:start="82:19" pos:end="82:19">0</literal></expr>)</condition> <block pos:start="82:22" pos:end="143:13">{<block_content pos:start="83:5" pos:end="143:13">
    <if_stmt pos:start="83:5" pos:end="84:32"><if pos:start="83:5" pos:end="84:32">if <condition pos:start="83:8" pos:end="83:73">(<expr pos:start="83:9" pos:end="83:72"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:21">HAVE_THREADS</name> <operator pos:start="83:23" pos:end="83:24">&amp;&amp;</operator> <operator pos:start="83:26" pos:end="83:26">!</operator><operator pos:start="83:27" pos:end="83:27">(</operator><name pos:start="83:28" pos:end="83:46"><name pos:start="83:28" pos:end="83:32">codec</name><operator pos:start="83:33" pos:end="83:34">-&gt;</operator><name pos:start="83:35" pos:end="83:46">capabilities</name></name> <operator pos:start="83:48" pos:end="83:48">&amp;</operator> <name pos:start="83:50" pos:end="83:71">CODEC_CAP_AUTO_THREADS</name><operator pos:start="83:72" pos:end="83:72">)</operator></expr>)</condition><block type="pseudo" pos:start="84:9" pos:end="84:32"><block_content pos:start="84:9" pos:end="84:32">
        <expr_stmt pos:start="84:9" pos:end="84:32"><expr pos:start="84:9" pos:end="84:31"><name pos:start="84:9" pos:end="84:27"><name pos:start="84:9" pos:end="84:13">avctx</name><operator pos:start="84:14" pos:end="84:15">-&gt;</operator><name pos:start="84:16" pos:end="84:27">thread_count</name></name> <operator pos:start="84:29" pos:end="84:29">=</operator> <literal type="number" pos:start="84:31" pos:end="84:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="85:5" pos:end="143:13"><if pos:start="85:5" pos:end="143:13">if <condition pos:start="85:8" pos:end="85:70">(<expr pos:start="85:9" pos:end="85:69"><name pos:start="85:9" pos:end="85:32"><name pos:start="85:9" pos:end="85:13">avctx</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:20">codec</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:32">max_lowres</name></name> <operator pos:start="85:34" pos:end="85:34">&lt;</operator> <name pos:start="85:36" pos:end="85:48"><name pos:start="85:36" pos:end="85:40">avctx</name><operator pos:start="85:41" pos:end="85:42">-&gt;</operator><name pos:start="85:43" pos:end="85:48">lowres</name></name> <operator pos:start="85:50" pos:end="85:51">||</operator> <name pos:start="85:53" pos:end="85:65"><name pos:start="85:53" pos:end="85:57">avctx</name><operator pos:start="85:58" pos:end="85:59">-&gt;</operator><name pos:start="85:60" pos:end="85:65">lowres</name></name> <operator pos:start="85:67" pos:end="85:67">&lt;</operator> <literal type="number" pos:start="85:69" pos:end="85:69">0</literal></expr>)</condition> <block pos:start="85:72" pos:end="143:13">{<block_content pos:start="86:9" pos:end="143:13">
        <expr_stmt pos:start="86:9" pos:end="87:41"><expr pos:start="86:9" pos:end="87:40"><call pos:start="86:9" pos:end="87:40"><name pos:start="86:9" pos:end="86:14">av_log</name><argument_list pos:start="86:15" pos:end="87:40">(<argument pos:start="86:16" pos:end="86:20"><expr pos:start="86:16" pos:end="86:20"><name pos:start="86:16" pos:end="86:20">avctx</name></expr></argument>, <argument pos:start="86:23" pos:end="86:34"><expr pos:start="86:23" pos:end="86:34"><name pos:start="86:23" pos:end="86:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="86:37" pos:end="86:99"><expr pos:start="86:37" pos:end="86:99"><literal type="string" pos:start="86:37" pos:end="86:99">"The maximum value for lowres supported by the decoder is %d\n"</literal></expr></argument>,
               <argument pos:start="87:16" pos:end="87:39"><expr pos:start="87:16" pos:end="87:39"><name pos:start="87:16" pos:end="87:39"><name pos:start="87:16" pos:end="87:20">avctx</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:27">codec</name><operator pos:start="87:28" pos:end="87:29">-&gt;</operator><name pos:start="87:30" pos:end="87:39">max_lowres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="88:9" pos:end="88:30"><expr pos:start="88:9" pos:end="88:29"><name pos:start="88:9" pos:end="88:11">ret</name> <operator pos:start="88:13" pos:end="88:13">=</operator> <call pos:start="88:15" pos:end="88:29"><name pos:start="88:15" pos:end="88:21">AVERROR</name><argument_list pos:start="88:22" pos:end="88:29">(<argument pos:start="88:23" pos:end="88:28"><expr pos:start="88:23" pos:end="88:28"><name pos:start="88:23" pos:end="88:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="89:5" pos:end="143:13"><if pos:start="89:5" pos:end="143:13">if <condition pos:start="89:8" pos:end="89:29">(<expr pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:13">avctx</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:20">codec</name><operator pos:start="89:21" pos:end="89:22">-&gt;</operator><name pos:start="89:23" pos:end="89:28">encode</name></name></expr>)</condition> <block pos:start="89:31" pos:end="143:13">{<block_content pos:start="90:9" pos:end="143:13">
        <decl_stmt pos:start="90:9" pos:end="90:14"><decl pos:start="90:9" pos:end="90:13"><type pos:start="90:9" pos:end="90:11"><name pos:start="90:9" pos:end="90:11">int</name></type> <name pos:start="90:13" pos:end="90:13">i</name></decl>;</decl_stmt>
        <if_stmt pos:start="91:9" pos:end="143:13"><if pos:start="91:9" pos:end="143:13">if <condition pos:start="91:12" pos:end="91:38">(<expr pos:start="91:13" pos:end="91:37"><name pos:start="91:13" pos:end="91:37"><name pos:start="91:13" pos:end="91:17">avctx</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:24">codec</name><operator pos:start="91:25" pos:end="91:26">-&gt;</operator><name pos:start="91:27" pos:end="91:37">sample_fmts</name></name></expr>)</condition> <block pos:start="91:40" pos:end="143:13">{<block_content pos:start="92:13" pos:end="143:13">
            <for pos:start="92:13" pos:end="94:26">for <control pos:start="92:17" pos:end="92:80">(<init pos:start="92:18" pos:end="92:23"><expr pos:start="92:18" pos:end="92:22"><name pos:start="92:18" pos:end="92:18">i</name> <operator pos:start="92:20" pos:end="92:20">=</operator> <literal type="number" pos:start="92:22" pos:end="92:22">0</literal></expr>;</init> <condition pos:start="92:25" pos:end="92:75"><expr pos:start="92:25" pos:end="92:74"><name pos:start="92:25" pos:end="92:52"><name pos:start="92:25" pos:end="92:29">avctx</name><operator pos:start="92:30" pos:end="92:31">-&gt;</operator><name pos:start="92:32" pos:end="92:36">codec</name><operator pos:start="92:37" pos:end="92:38">-&gt;</operator><name pos:start="92:39" pos:end="92:49">sample_fmts</name><index pos:start="92:50" pos:end="92:52">[<expr pos:start="92:51" pos:end="92:51"><name pos:start="92:51" pos:end="92:51">i</name></expr>]</index></name> <operator pos:start="92:54" pos:end="92:55">!=</operator> <name pos:start="92:57" pos:end="92:74">AV_SAMPLE_FMT_NONE</name></expr>;</condition> <incr pos:start="92:77" pos:end="92:79"><expr pos:start="92:77" pos:end="92:79"><name pos:start="92:77" pos:end="92:77">i</name><operator pos:start="92:78" pos:end="92:79">++</operator></expr></incr>)</control><block type="pseudo" pos:start="93:17" pos:end="94:26"><block_content pos:start="93:17" pos:end="94:26">
                <if_stmt pos:start="93:17" pos:end="94:26"><if pos:start="93:17" pos:end="94:26">if <condition pos:start="93:20" pos:end="93:70">(<expr pos:start="93:21" pos:end="93:69"><name pos:start="93:21" pos:end="93:37"><name pos:start="93:21" pos:end="93:25">avctx</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:37">sample_fmt</name></name> <operator pos:start="93:39" pos:end="93:40">==</operator> <name pos:start="93:42" pos:end="93:69"><name pos:start="93:42" pos:end="93:46">avctx</name><operator pos:start="93:47" pos:end="93:48">-&gt;</operator><name pos:start="93:49" pos:end="93:53">codec</name><operator pos:start="93:54" pos:end="93:55">-&gt;</operator><name pos:start="93:56" pos:end="93:66">sample_fmts</name><index pos:start="93:67" pos:end="93:69">[<expr pos:start="93:68" pos:end="93:68"><name pos:start="93:68" pos:end="93:68">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="94:21" pos:end="94:26"><block_content pos:start="94:21" pos:end="94:26">
                    <break pos:start="94:21" pos:end="94:26">break;</break></block_content></block></if></if_stmt></block_content></block></for>
            <if_stmt pos:start="95:13" pos:end="143:13"><if pos:start="95:13" pos:end="143:13">if <condition pos:start="95:16" pos:end="95:67">(<expr pos:start="95:17" pos:end="95:66"><name pos:start="95:17" pos:end="95:44"><name pos:start="95:17" pos:end="95:21">avctx</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:28">codec</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:41">sample_fmts</name><index pos:start="95:42" pos:end="95:44">[<expr pos:start="95:43" pos:end="95:43"><name pos:start="95:43" pos:end="95:43">i</name></expr>]</index></name> <operator pos:start="95:46" pos:end="95:47">==</operator> <name pos:start="95:49" pos:end="95:66">AV_SAMPLE_FMT_NONE</name></expr>)</condition> <block pos:start="95:69" pos:end="143:13">{<block_content pos:start="96:17" pos:end="143:13">
                <expr_stmt pos:start="96:17" pos:end="96:88"><expr pos:start="96:17" pos:end="96:87"><call pos:start="96:17" pos:end="96:87"><name pos:start="96:17" pos:end="96:22">av_log</name><argument_list pos:start="96:23" pos:end="96:87">(<argument pos:start="96:24" pos:end="96:28"><expr pos:start="96:24" pos:end="96:28"><name pos:start="96:24" pos:end="96:28">avctx</name></expr></argument>, <argument pos:start="96:31" pos:end="96:42"><expr pos:start="96:31" pos:end="96:42"><name pos:start="96:31" pos:end="96:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="96:45" pos:end="96:86"><expr pos:start="96:45" pos:end="96:86"><literal type="string" pos:start="96:45" pos:end="96:86">"Specified sample_fmt is not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="97:17" pos:end="97:38"><expr pos:start="97:17" pos:end="97:37"><name pos:start="97:17" pos:end="97:19">ret</name> <operator pos:start="97:21" pos:end="97:21">=</operator> <call pos:start="97:23" pos:end="97:37"><name pos:start="97:23" pos:end="97:29">AVERROR</name><argument_list pos:start="97:30" pos:end="97:37">(<argument pos:start="97:31" pos:end="97:36"><expr pos:start="97:31" pos:end="97:36"><name pos:start="97:31" pos:end="97:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="98:9" pos:end="143:13"><if pos:start="98:9" pos:end="143:13">if <condition pos:start="98:12" pos:end="98:48">(<expr pos:start="98:13" pos:end="98:47"><name pos:start="98:13" pos:end="98:47"><name pos:start="98:13" pos:end="98:17">avctx</name><operator pos:start="98:18" pos:end="98:19">-&gt;</operator><name pos:start="98:20" pos:end="98:24">codec</name><operator pos:start="98:25" pos:end="98:26">-&gt;</operator><name pos:start="98:27" pos:end="98:47">supported_samplerates</name></name></expr>)</condition> <block pos:start="98:50" pos:end="143:13">{<block_content pos:start="99:13" pos:end="143:13">
            <for pos:start="99:13" pos:end="101:26">for <control pos:start="99:17" pos:end="99:73">(<init pos:start="99:18" pos:end="99:23"><expr pos:start="99:18" pos:end="99:22"><name pos:start="99:18" pos:end="99:18">i</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <literal type="number" pos:start="99:22" pos:end="99:22">0</literal></expr>;</init> <condition pos:start="99:25" pos:end="99:68"><expr pos:start="99:25" pos:end="99:67"><name pos:start="99:25" pos:end="99:62"><name pos:start="99:25" pos:end="99:29">avctx</name><operator pos:start="99:30" pos:end="99:31">-&gt;</operator><name pos:start="99:32" pos:end="99:36">codec</name><operator pos:start="99:37" pos:end="99:38">-&gt;</operator><name pos:start="99:39" pos:end="99:59">supported_samplerates</name><index pos:start="99:60" pos:end="99:62">[<expr pos:start="99:61" pos:end="99:61"><name pos:start="99:61" pos:end="99:61">i</name></expr>]</index></name> <operator pos:start="99:64" pos:end="99:65">!=</operator> <literal type="number" pos:start="99:67" pos:end="99:67">0</literal></expr>;</condition> <incr pos:start="99:70" pos:end="99:72"><expr pos:start="99:70" pos:end="99:72"><name pos:start="99:70" pos:end="99:70">i</name><operator pos:start="99:71" pos:end="99:72">++</operator></expr></incr>)</control><block type="pseudo" pos:start="100:17" pos:end="101:26"><block_content pos:start="100:17" pos:end="101:26">
                <if_stmt pos:start="100:17" pos:end="101:26"><if pos:start="100:17" pos:end="101:26">if <condition pos:start="100:20" pos:end="100:81">(<expr pos:start="100:21" pos:end="100:80"><name pos:start="100:21" pos:end="100:38"><name pos:start="100:21" pos:end="100:25">avctx</name><operator pos:start="100:26" pos:end="100:27">-&gt;</operator><name pos:start="100:28" pos:end="100:38">sample_rate</name></name> <operator pos:start="100:40" pos:end="100:41">==</operator> <name pos:start="100:43" pos:end="100:80"><name pos:start="100:43" pos:end="100:47">avctx</name><operator pos:start="100:48" pos:end="100:49">-&gt;</operator><name pos:start="100:50" pos:end="100:54">codec</name><operator pos:start="100:55" pos:end="100:56">-&gt;</operator><name pos:start="100:57" pos:end="100:77">supported_samplerates</name><index pos:start="100:78" pos:end="100:80">[<expr pos:start="100:79" pos:end="100:79"><name pos:start="100:79" pos:end="100:79">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="101:21" pos:end="101:26"><block_content pos:start="101:21" pos:end="101:26">
                    <break pos:start="101:21" pos:end="101:26">break;</break></block_content></block></if></if_stmt></block_content></block></for>
            <if_stmt pos:start="102:13" pos:end="143:13"><if pos:start="102:13" pos:end="143:13">if <condition pos:start="102:16" pos:end="102:60">(<expr pos:start="102:17" pos:end="102:59"><name pos:start="102:17" pos:end="102:54"><name pos:start="102:17" pos:end="102:21">avctx</name><operator pos:start="102:22" pos:end="102:23">-&gt;</operator><name pos:start="102:24" pos:end="102:28">codec</name><operator pos:start="102:29" pos:end="102:30">-&gt;</operator><name pos:start="102:31" pos:end="102:51">supported_samplerates</name><index pos:start="102:52" pos:end="102:54">[<expr pos:start="102:53" pos:end="102:53"><name pos:start="102:53" pos:end="102:53">i</name></expr>]</index></name> <operator pos:start="102:56" pos:end="102:57">==</operator> <literal type="number" pos:start="102:59" pos:end="102:59">0</literal></expr>)</condition> <block pos:start="102:62" pos:end="143:13">{<block_content pos:start="103:17" pos:end="143:13">
                <expr_stmt pos:start="103:17" pos:end="103:88"><expr pos:start="103:17" pos:end="103:87"><call pos:start="103:17" pos:end="103:87"><name pos:start="103:17" pos:end="103:22">av_log</name><argument_list pos:start="103:23" pos:end="103:87">(<argument pos:start="103:24" pos:end="103:28"><expr pos:start="103:24" pos:end="103:28"><name pos:start="103:24" pos:end="103:28">avctx</name></expr></argument>, <argument pos:start="103:31" pos:end="103:42"><expr pos:start="103:31" pos:end="103:42"><name pos:start="103:31" pos:end="103:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:45" pos:end="103:86"><expr pos:start="103:45" pos:end="103:86"><literal type="string" pos:start="103:45" pos:end="103:86">"Specified sample_rate is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="104:17" pos:end="104:38"><expr pos:start="104:17" pos:end="104:37"><name pos:start="104:17" pos:end="104:19">ret</name> <operator pos:start="104:21" pos:end="104:21">=</operator> <call pos:start="104:23" pos:end="104:37"><name pos:start="104:23" pos:end="104:29">AVERROR</name><argument_list pos:start="104:30" pos:end="104:37">(<argument pos:start="104:31" pos:end="104:36"><expr pos:start="104:31" pos:end="104:36"><name pos:start="104:31" pos:end="104:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="105:9" pos:end="143:13"><if pos:start="105:9" pos:end="143:13">if <condition pos:start="105:12" pos:end="105:42">(<expr pos:start="105:13" pos:end="105:41"><name pos:start="105:13" pos:end="105:41"><name pos:start="105:13" pos:end="105:17">avctx</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:24">codec</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:41">channel_layouts</name></name></expr>)</condition> <block pos:start="105:44" pos:end="143:13">{<block_content pos:start="106:13" pos:end="143:13">
            <if_stmt pos:start="106:13" pos:end="143:13"><if pos:start="106:13" pos:end="108:13">if <condition pos:start="106:16" pos:end="106:39">(<expr pos:start="106:17" pos:end="106:38"><operator pos:start="106:17" pos:end="106:17">!</operator><name pos:start="106:18" pos:end="106:38"><name pos:start="106:18" pos:end="106:22">avctx</name><operator pos:start="106:23" pos:end="106:24">-&gt;</operator><name pos:start="106:25" pos:end="106:38">channel_layout</name></name></expr>)</condition> <block pos:start="106:41" pos:end="108:13">{<block_content pos:start="107:17" pos:end="107:80">
                <expr_stmt pos:start="107:17" pos:end="107:80"><expr pos:start="107:17" pos:end="107:79"><call pos:start="107:17" pos:end="107:79"><name pos:start="107:17" pos:end="107:22">av_log</name><argument_list pos:start="107:23" pos:end="107:79">(<argument pos:start="107:24" pos:end="107:28"><expr pos:start="107:24" pos:end="107:28"><name pos:start="107:24" pos:end="107:28">avctx</name></expr></argument>, <argument pos:start="107:31" pos:end="107:44"><expr pos:start="107:31" pos:end="107:44"><name pos:start="107:31" pos:end="107:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="107:47" pos:end="107:78"><expr pos:start="107:47" pos:end="107:78"><literal type="string" pos:start="107:47" pos:end="107:78">"channel_layout not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="108:15" pos:end="143:13">else <block pos:start="108:20" pos:end="143:13">{<block_content pos:start="109:17" pos:end="143:13">
                <for pos:start="109:17" pos:end="111:30">for <control pos:start="109:21" pos:end="109:71">(<init pos:start="109:22" pos:end="109:27"><expr pos:start="109:22" pos:end="109:26"><name pos:start="109:22" pos:end="109:22">i</name> <operator pos:start="109:24" pos:end="109:24">=</operator> <literal type="number" pos:start="109:26" pos:end="109:26">0</literal></expr>;</init> <condition pos:start="109:29" pos:end="109:66"><expr pos:start="109:29" pos:end="109:65"><name pos:start="109:29" pos:end="109:60"><name pos:start="109:29" pos:end="109:33">avctx</name><operator pos:start="109:34" pos:end="109:35">-&gt;</operator><name pos:start="109:36" pos:end="109:40">codec</name><operator pos:start="109:41" pos:end="109:42">-&gt;</operator><name pos:start="109:43" pos:end="109:57">channel_layouts</name><index pos:start="109:58" pos:end="109:60">[<expr pos:start="109:59" pos:end="109:59"><name pos:start="109:59" pos:end="109:59">i</name></expr>]</index></name> <operator pos:start="109:62" pos:end="109:63">!=</operator> <literal type="number" pos:start="109:65" pos:end="109:65">0</literal></expr>;</condition> <incr pos:start="109:68" pos:end="109:70"><expr pos:start="109:68" pos:end="109:70"><name pos:start="109:68" pos:end="109:68">i</name><operator pos:start="109:69" pos:end="109:70">++</operator></expr></incr>)</control><block type="pseudo" pos:start="110:21" pos:end="111:30"><block_content pos:start="110:21" pos:end="111:30">
                    <if_stmt pos:start="110:21" pos:end="111:30"><if pos:start="110:21" pos:end="111:30">if <condition pos:start="110:24" pos:end="110:82">(<expr pos:start="110:25" pos:end="110:81"><name pos:start="110:25" pos:end="110:45"><name pos:start="110:25" pos:end="110:29">avctx</name><operator pos:start="110:30" pos:end="110:31">-&gt;</operator><name pos:start="110:32" pos:end="110:45">channel_layout</name></name> <operator pos:start="110:47" pos:end="110:48">==</operator> <name pos:start="110:50" pos:end="110:81"><name pos:start="110:50" pos:end="110:54">avctx</name><operator pos:start="110:55" pos:end="110:56">-&gt;</operator><name pos:start="110:57" pos:end="110:61">codec</name><operator pos:start="110:62" pos:end="110:63">-&gt;</operator><name pos:start="110:64" pos:end="110:78">channel_layouts</name><index pos:start="110:79" pos:end="110:81">[<expr pos:start="110:80" pos:end="110:80"><name pos:start="110:80" pos:end="110:80">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="111:25" pos:end="111:30"><block_content pos:start="111:25" pos:end="111:30">
                        <break pos:start="111:25" pos:end="111:30">break;</break></block_content></block></if></if_stmt></block_content></block></for>
                <if_stmt pos:start="112:17" pos:end="143:13"><if pos:start="112:17" pos:end="143:13">if <condition pos:start="112:20" pos:end="112:58">(<expr pos:start="112:21" pos:end="112:57"><name pos:start="112:21" pos:end="112:52"><name pos:start="112:21" pos:end="112:25">avctx</name><operator pos:start="112:26" pos:end="112:27">-&gt;</operator><name pos:start="112:28" pos:end="112:32">codec</name><operator pos:start="112:33" pos:end="112:34">-&gt;</operator><name pos:start="112:35" pos:end="112:49">channel_layouts</name><index pos:start="112:50" pos:end="112:52">[<expr pos:start="112:51" pos:end="112:51"><name pos:start="112:51" pos:end="112:51">i</name></expr>]</index></name> <operator pos:start="112:54" pos:end="112:55">==</operator> <literal type="number" pos:start="112:57" pos:end="112:57">0</literal></expr>)</condition> <block pos:start="112:60" pos:end="143:13">{<block_content pos:start="113:21" pos:end="143:13">
                    <expr_stmt pos:start="113:21" pos:end="113:95"><expr pos:start="113:21" pos:end="113:94"><call pos:start="113:21" pos:end="113:94"><name pos:start="113:21" pos:end="113:26">av_log</name><argument_list pos:start="113:27" pos:end="113:94">(<argument pos:start="113:28" pos:end="113:32"><expr pos:start="113:28" pos:end="113:32"><name pos:start="113:28" pos:end="113:32">avctx</name></expr></argument>, <argument pos:start="113:35" pos:end="113:46"><expr pos:start="113:35" pos:end="113:46"><name pos:start="113:35" pos:end="113:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:49" pos:end="113:93"><expr pos:start="113:49" pos:end="113:93"><literal type="string" pos:start="113:49" pos:end="113:93">"Specified channel_layout is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="114:21" pos:end="114:42"><expr pos:start="114:21" pos:end="114:41"><name pos:start="114:21" pos:end="114:23">ret</name> <operator pos:start="114:25" pos:end="114:25">=</operator> <call pos:start="114:27" pos:end="114:41"><name pos:start="114:27" pos:end="114:33">AVERROR</name><argument_list pos:start="114:34" pos:end="114:41">(<argument pos:start="114:35" pos:end="114:40"><expr pos:start="114:35" pos:end="114:40"><name pos:start="114:35" pos:end="114:40">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="115:9" pos:end="143:13"><if pos:start="115:9" pos:end="143:13">if <condition pos:start="115:12" pos:end="115:53">(<expr pos:start="115:13" pos:end="115:52"><name pos:start="115:13" pos:end="115:33"><name pos:start="115:13" pos:end="115:17">avctx</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:33">channel_layout</name></name> <operator pos:start="115:35" pos:end="115:36">&amp;&amp;</operator> <name pos:start="115:38" pos:end="115:52"><name pos:start="115:38" pos:end="115:42">avctx</name><operator pos:start="115:43" pos:end="115:44">-&gt;</operator><name pos:start="115:45" pos:end="115:52">channels</name></name></expr>)</condition> <block pos:start="115:55" pos:end="143:13">{<block_content pos:start="116:13" pos:end="143:13">
            <if_stmt pos:start="116:13" pos:end="143:13"><if pos:start="116:13" pos:end="119:9">if <condition pos:start="116:16" pos:end="116:92">(<expr pos:start="116:17" pos:end="116:91"><call pos:start="116:17" pos:end="116:72"><name pos:start="116:17" pos:end="116:49">av_get_channel_layout_nb_channels</name><argument_list pos:start="116:50" pos:end="116:72">(<argument pos:start="116:51" pos:end="116:71"><expr pos:start="116:51" pos:end="116:71"><name pos:start="116:51" pos:end="116:71"><name pos:start="116:51" pos:end="116:55">avctx</name><operator pos:start="116:56" pos:end="116:57">-&gt;</operator><name pos:start="116:58" pos:end="116:71">channel_layout</name></name></expr></argument>)</argument_list></call> <operator pos:start="116:74" pos:end="116:75">!=</operator> <name pos:start="116:77" pos:end="116:91"><name pos:start="116:77" pos:end="116:81">avctx</name><operator pos:start="116:82" pos:end="116:83">-&gt;</operator><name pos:start="116:84" pos:end="116:91">channels</name></name></expr>)</condition> <block pos:start="116:94" pos:end="119:9">{<block_content pos:start="117:17" pos:end="118:38">
                <expr_stmt pos:start="117:17" pos:end="117:98"><expr pos:start="117:17" pos:end="117:97"><call pos:start="117:17" pos:end="117:97"><name pos:start="117:17" pos:end="117:22">av_log</name><argument_list pos:start="117:23" pos:end="117:97">(<argument pos:start="117:24" pos:end="117:28"><expr pos:start="117:24" pos:end="117:28"><name pos:start="117:24" pos:end="117:28">avctx</name></expr></argument>, <argument pos:start="117:31" pos:end="117:42"><expr pos:start="117:31" pos:end="117:42"><name pos:start="117:31" pos:end="117:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:45" pos:end="117:96"><expr pos:start="117:45" pos:end="117:96"><literal type="string" pos:start="117:45" pos:end="117:96">"channel layout does not match number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="118:17" pos:end="118:38"><expr pos:start="118:17" pos:end="118:37"><name pos:start="118:17" pos:end="118:19">ret</name> <operator pos:start="118:21" pos:end="118:21">=</operator> <call pos:start="118:23" pos:end="118:37"><name pos:start="118:23" pos:end="118:29">AVERROR</name><argument_list pos:start="118:30" pos:end="118:37">(<argument pos:start="118:31" pos:end="118:36"><expr pos:start="118:31" pos:end="118:36"><name pos:start="118:31" pos:end="118:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="119:11" pos:end="143:13">else if <condition pos:start="119:19" pos:end="119:41">(<expr pos:start="119:20" pos:end="119:40"><name pos:start="119:20" pos:end="119:40"><name pos:start="119:20" pos:end="119:24">avctx</name><operator pos:start="119:25" pos:end="119:26">-&gt;</operator><name pos:start="119:27" pos:end="119:40">channel_layout</name></name></expr>)</condition> <block pos:start="119:43" pos:end="143:13">{<block_content pos:start="120:13" pos:end="143:13">
            <expr_stmt pos:start="120:13" pos:end="120:87"><expr pos:start="120:13" pos:end="120:86"><name pos:start="120:13" pos:end="120:27"><name pos:start="120:13" pos:end="120:17">avctx</name><operator pos:start="120:18" pos:end="120:19">-&gt;</operator><name pos:start="120:20" pos:end="120:27">channels</name></name> <operator pos:start="120:29" pos:end="120:29">=</operator> <call pos:start="120:31" pos:end="120:86"><name pos:start="120:31" pos:end="120:63">av_get_channel_layout_nb_channels</name><argument_list pos:start="120:64" pos:end="120:86">(<argument pos:start="120:65" pos:end="120:85"><expr pos:start="120:65" pos:end="120:85"><name pos:start="120:65" pos:end="120:85"><name pos:start="120:65" pos:end="120:69">avctx</name><operator pos:start="120:70" pos:end="120:71">-&gt;</operator><name pos:start="120:72" pos:end="120:85">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="121:5" pos:end="122:45"><expr pos:start="121:5" pos:end="122:44"><name pos:start="121:5" pos:end="121:40"><name pos:start="121:5" pos:end="121:9">avctx</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:40">pts_correction_num_faulty_pts</name></name> <operator pos:start="121:42" pos:end="121:42">=</operator>
    <name pos:start="122:5" pos:end="122:40"><name pos:start="122:5" pos:end="122:9">avctx</name><operator pos:start="122:10" pos:end="122:11">-&gt;</operator><name pos:start="122:12" pos:end="122:40">pts_correction_num_faulty_dts</name></name> <operator pos:start="122:42" pos:end="122:42">=</operator> <literal type="number" pos:start="122:44" pos:end="122:44">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="123:5" pos:end="124:47"><expr pos:start="123:5" pos:end="124:46"><name pos:start="123:5" pos:end="123:34"><name pos:start="123:5" pos:end="123:9">avctx</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:34">pts_correction_last_pts</name></name> <operator pos:start="123:36" pos:end="123:36">=</operator>
    <name pos:start="124:5" pos:end="124:34"><name pos:start="124:5" pos:end="124:9">avctx</name><operator pos:start="124:10" pos:end="124:11">-&gt;</operator><name pos:start="124:12" pos:end="124:34">pts_correction_last_dts</name></name> <operator pos:start="124:36" pos:end="124:36">=</operator> <name pos:start="124:38" pos:end="124:46">INT64_MIN</name></expr>;</expr_stmt>
    <if_stmt pos:start="125:5" pos:end="143:13"><if pos:start="125:5" pos:end="143:13">if<condition pos:start="125:7" pos:end="125:74">(<expr pos:start="125:8" pos:end="125:73"><name pos:start="125:8" pos:end="125:25"><name pos:start="125:8" pos:end="125:12">avctx</name><operator pos:start="125:13" pos:end="125:14">-&gt;</operator><name pos:start="125:15" pos:end="125:19">codec</name><operator pos:start="125:20" pos:end="125:21">-&gt;</operator><name pos:start="125:22" pos:end="125:25">init</name></name> <operator pos:start="125:27" pos:end="125:28">&amp;&amp;</operator> <operator pos:start="125:30" pos:end="125:30">!</operator><operator pos:start="125:31" pos:end="125:31">(</operator><name pos:start="125:32" pos:end="125:56"><name pos:start="125:32" pos:end="125:36">avctx</name><operator pos:start="125:37" pos:end="125:38">-&gt;</operator><name pos:start="125:39" pos:end="125:56">active_thread_type</name></name><operator pos:start="125:57" pos:end="125:57">&amp;</operator><name pos:start="125:58" pos:end="125:72">FF_THREAD_FRAME</name><operator pos:start="125:73" pos:end="125:73">)</operator></expr>)</condition><block pos:start="125:75" pos:end="143:13">{<block_content pos:start="126:9" pos:end="143:13">
        <expr_stmt pos:start="126:9" pos:end="126:40"><expr pos:start="126:9" pos:end="126:39"><name pos:start="126:9" pos:end="126:11">ret</name> <operator pos:start="126:13" pos:end="126:13">=</operator> <call pos:start="126:15" pos:end="126:39"><name pos:start="126:15" pos:end="126:32"><name pos:start="126:15" pos:end="126:19">avctx</name><operator pos:start="126:20" pos:end="126:21">-&gt;</operator><name pos:start="126:22" pos:end="126:26">codec</name><operator pos:start="126:27" pos:end="126:28">-&gt;</operator><name pos:start="126:29" pos:end="126:32">init</name></name><argument_list pos:start="126:33" pos:end="126:39">(<argument pos:start="126:34" pos:end="126:38"><expr pos:start="126:34" pos:end="126:38"><name pos:start="126:34" pos:end="126:38">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="127:9" pos:end="143:13"><if pos:start="127:9" pos:end="143:13">if <condition pos:start="127:12" pos:end="127:20">(<expr pos:start="127:13" pos:end="127:19"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:17">&lt;</operator> <literal type="number" pos:start="127:19" pos:end="127:19">0</literal></expr>)</condition> <block pos:start="127:22" pos:end="143:13">{<block_content pos:start="128:5" pos:end="143:13">
    <expr_stmt pos:start="128:5" pos:end="128:10"><expr pos:start="128:5" pos:end="128:9"><name pos:start="128:5" pos:end="128:7">ret</name><operator pos:start="128:8" pos:end="128:8">=</operator><literal type="number" pos:start="128:9" pos:end="128:9">0</literal></expr>;</expr_stmt>
<label pos:start="129:1" pos:end="129:4"><name pos:start="129:1" pos:end="129:3">end</name>:</label>
    <expr_stmt pos:start="130:5" pos:end="130:31"><expr pos:start="130:5" pos:end="130:30"><name pos:start="130:5" pos:end="130:28">entangled_thread_counter</name><operator pos:start="130:29" pos:end="130:30">--</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="131:5" pos:end="131:42">/* Release any user-supplied mutex. */</comment>
    <if_stmt pos:start="132:5" pos:end="143:13"><if pos:start="132:5" pos:end="143:13">if <condition pos:start="132:8" pos:end="132:22">(<expr pos:start="132:9" pos:end="132:21"><name pos:start="132:9" pos:end="132:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="132:24" pos:end="143:13">{<block_content pos:start="133:9" pos:end="143:13">
        <expr_stmt pos:start="133:9" pos:end="133:56"><expr pos:start="133:9" pos:end="133:55"><call pos:start="133:9" pos:end="133:55">(<modifier pos:start="133:10" pos:end="133:10">*</modifier><name pos:start="133:11" pos:end="133:23">ff_lockmgr_cb</name>)<argument_list pos:start="133:25" pos:end="133:55">(<argument pos:start="133:26" pos:end="133:37"><expr pos:start="133:26" pos:end="133:37"><operator pos:start="133:26" pos:end="133:26">&amp;</operator><name pos:start="133:27" pos:end="133:37">codec_mutex</name></expr></argument>, <argument pos:start="133:40" pos:end="133:54"><expr pos:start="133:40" pos:end="133:54"><name pos:start="133:40" pos:end="133:54">AV_LOCK_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="134:5" pos:end="143:13"><if pos:start="134:5" pos:end="143:13">if <condition pos:start="134:8" pos:end="134:16">(<expr pos:start="134:9" pos:end="134:15"><name pos:start="134:9" pos:end="134:15">options</name></expr>)</condition> <block pos:start="134:18" pos:end="143:13">{<block_content pos:start="135:9" pos:end="143:13">
        <expr_stmt pos:start="135:9" pos:end="135:30"><expr pos:start="135:9" pos:end="135:29"><call pos:start="135:9" pos:end="135:29"><name pos:start="135:9" pos:end="135:20">av_dict_free</name><argument_list pos:start="135:21" pos:end="135:29">(<argument pos:start="135:22" pos:end="135:28"><expr pos:start="135:22" pos:end="135:28"><name pos:start="135:22" pos:end="135:28">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="136:9" pos:end="136:23"><expr pos:start="136:9" pos:end="136:22"><operator pos:start="136:9" pos:end="136:9">*</operator><name pos:start="136:10" pos:end="136:16">options</name> <operator pos:start="136:18" pos:end="136:18">=</operator> <name pos:start="136:20" pos:end="136:22">tmp</name></expr>;</expr_stmt>
    <return pos:start="137:5" pos:end="137:15">return <expr pos:start="137:12" pos:end="137:14"><name pos:start="137:12" pos:end="137:14">ret</name></expr>;</return>
<label pos:start="138:1" pos:end="138:13"><name pos:start="138:1" pos:end="138:12">free_and_end</name>:</label>
    <expr_stmt pos:start="139:5" pos:end="139:23"><expr pos:start="139:5" pos:end="139:22"><call pos:start="139:5" pos:end="139:22"><name pos:start="139:5" pos:end="139:16">av_dict_free</name><argument_list pos:start="139:17" pos:end="139:22">(<argument pos:start="139:18" pos:end="139:21"><expr pos:start="139:18" pos:end="139:21"><operator pos:start="139:18" pos:end="139:18">&amp;</operator><name pos:start="139:19" pos:end="139:21">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="140:5" pos:end="140:32"><expr pos:start="140:5" pos:end="140:31"><call pos:start="140:5" pos:end="140:31"><name pos:start="140:5" pos:end="140:12">av_freep</name><argument_list pos:start="140:13" pos:end="140:31">(<argument pos:start="140:14" pos:end="140:30"><expr pos:start="140:14" pos:end="140:30"><operator pos:start="140:14" pos:end="140:14">&amp;</operator><name pos:start="140:15" pos:end="140:30"><name pos:start="140:15" pos:end="140:19">avctx</name><operator pos:start="140:20" pos:end="140:21">-&gt;</operator><name pos:start="140:22" pos:end="140:30">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="141:5" pos:end="141:31"><expr pos:start="141:5" pos:end="141:30"><call pos:start="141:5" pos:end="141:30"><name pos:start="141:5" pos:end="141:12">av_freep</name><argument_list pos:start="141:13" pos:end="141:30">(<argument pos:start="141:14" pos:end="141:29"><expr pos:start="141:14" pos:end="141:29"><operator pos:start="141:14" pos:end="141:14">&amp;</operator><name pos:start="141:15" pos:end="141:29"><name pos:start="141:15" pos:end="141:19">avctx</name><operator pos:start="141:20" pos:end="141:21">-&gt;</operator><name pos:start="141:22" pos:end="141:29">internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="142:5" pos:end="142:23"><expr pos:start="142:5" pos:end="142:22"><name pos:start="142:5" pos:end="142:16"><name pos:start="142:5" pos:end="142:9">avctx</name><operator pos:start="142:10" pos:end="142:11">-&gt;</operator><name pos:start="142:12" pos:end="142:16">codec</name></name><operator pos:start="142:17" pos:end="142:17">=</operator> <name pos:start="142:19" pos:end="142:22">NULL</name></expr>;</expr_stmt>
    <goto pos:start="143:5" pos:end="143:13">goto <name pos:start="143:10" pos:end="143:12">end</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
