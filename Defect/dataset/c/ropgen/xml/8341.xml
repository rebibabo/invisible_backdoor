<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8341.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">swri_get_dither</name><parameter_list pos:start="1:21" pos:end="1:101">(<parameter pos:start="1:22" pos:end="1:34"><decl pos:start="1:22" pos:end="1:34"><type pos:start="1:22" pos:end="1:34"><name pos:start="1:22" pos:end="1:31">SwrContext</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:34">s</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:45"><decl pos:start="1:37" pos:end="1:45"><type pos:start="1:37" pos:end="1:45"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">dst</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:54"><decl pos:start="1:48" pos:end="1:54"><type pos:start="1:48" pos:end="1:54"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:54">len</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:69"><decl pos:start="1:57" pos:end="1:69"><type pos:start="1:57" pos:end="1:69"><name pos:start="1:57" pos:end="1:64">unsigned</name></type> <name pos:start="1:66" pos:end="1:69">seed</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:100"><decl pos:start="1:72" pos:end="1:100"><type pos:start="1:72" pos:end="1:100"><name pos:start="1:72" pos:end="1:90"><name pos:start="1:72" pos:end="1:75">enum</name> <name pos:start="1:77" pos:end="1:90">AVSampleFormat</name></name></type> <name pos:start="1:92" pos:end="1:100">noise_fmt</name></decl></parameter>)</parameter_list> <block pos:start="1:103" pos:end="95:1">{<block_content pos:start="3:5" pos:end="93:17">

    <decl_stmt pos:start="3:5" pos:end="6:0"><decl pos:start="3:5" pos:end="3:40"><type pos:start="3:5" pos:end="3:10"><name pos:start="3:5" pos:end="3:10">double</name></type> <name pos:start="3:12" pos:end="3:16">scale</name> <init pos:start="3:18" pos:end="3:40">= <expr pos:start="3:20" pos:end="3:40"><name pos:start="3:20" pos:end="3:40"><name pos:start="3:20" pos:end="3:20">s</name><operator pos:start="3:21" pos:end="3:22">-&gt;</operator><name pos:start="3:23" pos:end="3:28">dither</name><operator pos:start="3:29" pos:end="3:29">.</operator><name pos:start="3:30" pos:end="3:40">noise_scale</name></name></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="5:1" pos:end="5:19">#<cpp:directive pos:start="5:2" pos:end="5:7">define</cpp:directive> <cpp:macro pos:start="5:9" pos:end="5:17"><name pos:start="5:9" pos:end="5:17">TMP_EXTRA</name></cpp:macro> <cpp:value pos:start="5:19" pos:end="5:19">2</cpp:value></cpp:define>

    <decl_stmt pos:start="7:5" pos:end="7:67"><decl pos:start="7:5" pos:end="7:66"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">double</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">tmp</name> <init pos:start="7:17" pos:end="7:66">= <expr pos:start="7:19" pos:end="7:66"><call pos:start="7:19" pos:end="7:66"><name pos:start="7:19" pos:end="7:33">av_malloc_array</name><argument_list pos:start="7:34" pos:end="7:66">(<argument pos:start="7:35" pos:end="7:49"><expr pos:start="7:35" pos:end="7:49"><name pos:start="7:35" pos:end="7:37">len</name> <operator pos:start="7:39" pos:end="7:39">+</operator> <name pos:start="7:41" pos:end="7:49">TMP_EXTRA</name></expr></argument>, <argument pos:start="7:52" pos:end="7:65"><expr pos:start="7:52" pos:end="7:65"><sizeof pos:start="7:52" pos:end="7:65">sizeof<argument_list pos:start="7:58" pos:end="7:65">(<argument pos:start="7:59" pos:end="7:64"><expr pos:start="7:59" pos:end="7:64"><name pos:start="7:59" pos:end="7:64">double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="41:5">for<control pos:start="13:8" pos:end="13:36">(<init pos:start="13:9" pos:end="13:12"><expr pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:9">i</name><operator pos:start="13:10" pos:end="13:10">=</operator><literal type="number" pos:start="13:11" pos:end="13:11">0</literal></expr>;</init> <condition pos:start="13:14" pos:end="13:31"><expr pos:start="13:14" pos:end="13:30"><name pos:start="13:14" pos:end="13:14">i</name><operator pos:start="13:15" pos:end="13:15">&lt;</operator><name pos:start="13:16" pos:end="13:18">len</name> <operator pos:start="13:20" pos:end="13:20">+</operator> <name pos:start="13:22" pos:end="13:30">TMP_EXTRA</name></expr>;</condition> <incr pos:start="13:33" pos:end="13:35"><expr pos:start="13:33" pos:end="13:35"><name pos:start="13:33" pos:end="13:33">i</name><operator pos:start="13:34" pos:end="13:35">++</operator></expr></incr>)</control><block pos:start="13:37" pos:end="41:5">{<block_content pos:start="15:9" pos:end="39:19">

        <decl_stmt pos:start="15:9" pos:end="15:17"><decl pos:start="15:9" pos:end="15:16"><type pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:14">double</name></type> <name pos:start="15:16" pos:end="15:16">v</name></decl>;</decl_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:42"><expr pos:start="17:9" pos:end="17:41"><name pos:start="17:9" pos:end="17:12">seed</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <name pos:start="17:16" pos:end="17:19">seed</name><operator pos:start="17:20" pos:end="17:20">*</operator> <literal type="number" pos:start="17:22" pos:end="17:30">1664525</literal> <operator pos:start="17:30" pos:end="17:30">+</operator> <literal type="number" pos:start="17:32" pos:end="17:41">1013904223</literal></expr>;</expr_stmt>



        <switch pos:start="21:9" pos:end="37:9">switch<condition pos:start="21:15" pos:end="21:32">(<expr pos:start="21:16" pos:end="21:31"><name pos:start="21:16" pos:end="21:31"><name pos:start="21:16" pos:end="21:16">s</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:24">dither</name><operator pos:start="21:25" pos:end="21:25">.</operator><name pos:start="21:26" pos:end="21:31">method</name></name></expr>)</condition><block pos:start="21:33" pos:end="37:9">{<block_content pos:start="23:13" pos:end="35:22">

            <case pos:start="23:13" pos:end="23:40">case <expr pos:start="23:18" pos:end="23:39"><name pos:start="23:18" pos:end="23:39">SWR_DITHER_RECTANGULAR</name></expr>:</case> <expr_stmt pos:start="23:42" pos:end="23:76"><expr pos:start="23:42" pos:end="23:75"><name pos:start="23:42" pos:end="23:42">v</name><operator pos:start="23:43" pos:end="23:43">=</operator> <operator pos:start="23:45" pos:end="23:45">(</operator><operator pos:start="23:46" pos:end="23:46">(</operator><name pos:start="23:47" pos:end="23:52">double</name><operator pos:start="23:53" pos:end="23:53">)</operator><name pos:start="23:54" pos:end="23:57">seed</name><operator pos:start="23:58" pos:end="23:58">)</operator> <operator pos:start="23:60" pos:end="23:60">/</operator> <name pos:start="23:62" pos:end="23:69">UINT_MAX</name> <operator pos:start="23:71" pos:end="23:71">-</operator> <literal type="number" pos:start="23:73" pos:end="23:75">0.5</literal></expr>;</expr_stmt> <break pos:start="23:78" pos:end="23:83">break;</break>

            <default pos:start="25:13" pos:end="25:20">default:</default>

                <expr_stmt pos:start="27:17" pos:end="27:61"><expr pos:start="27:17" pos:end="27:60"><call pos:start="27:17" pos:end="27:60"><name pos:start="27:17" pos:end="27:26">av_assert0</name><argument_list pos:start="27:27" pos:end="27:60">(<argument pos:start="27:28" pos:end="27:59"><expr pos:start="27:28" pos:end="27:59"><name pos:start="27:28" pos:end="27:43"><name pos:start="27:28" pos:end="27:28">s</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:36">dither</name><operator pos:start="27:37" pos:end="27:37">.</operator><name pos:start="27:38" pos:end="27:43">method</name></name> <operator pos:start="27:45" pos:end="27:45">&lt;</operator> <name pos:start="27:47" pos:end="27:59">SWR_DITHER_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="29:17" pos:end="29:46"><expr pos:start="29:17" pos:end="29:45"><name pos:start="29:17" pos:end="29:17">v</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <operator pos:start="29:21" pos:end="29:21">(</operator><operator pos:start="29:22" pos:end="29:22">(</operator><name pos:start="29:23" pos:end="29:28">double</name><operator pos:start="29:29" pos:end="29:29">)</operator><name pos:start="29:30" pos:end="29:33">seed</name><operator pos:start="29:34" pos:end="29:34">)</operator> <operator pos:start="29:36" pos:end="29:36">/</operator> <name pos:start="29:38" pos:end="29:45">UINT_MAX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="31:17" pos:end="31:49"><expr pos:start="31:17" pos:end="31:48"><name pos:start="31:17" pos:end="31:20">seed</name> <operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:27">seed</name><operator pos:start="31:28" pos:end="31:28">*</operator><literal type="number" pos:start="31:29" pos:end="31:37">1664525</literal> <operator pos:start="31:37" pos:end="31:37">+</operator> <literal type="number" pos:start="31:39" pos:end="31:48">1013904223</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:46"><expr pos:start="33:17" pos:end="33:45"><name pos:start="33:17" pos:end="33:17">v</name><operator pos:start="33:18" pos:end="33:19">-=</operator> <operator pos:start="33:21" pos:end="33:21">(</operator><operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:28">double</name><operator pos:start="33:29" pos:end="33:29">)</operator><name pos:start="33:30" pos:end="33:33">seed</name><operator pos:start="33:34" pos:end="33:34">)</operator> <operator pos:start="33:36" pos:end="33:36">/</operator> <name pos:start="33:38" pos:end="33:45">UINT_MAX</name></expr>;</expr_stmt>

                <break pos:start="35:17" pos:end="35:22">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="39:9" pos:end="39:19"><expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:11">tmp</name><index pos:start="39:12" pos:end="39:14">[<expr pos:start="39:13" pos:end="39:13"><name pos:start="39:13" pos:end="39:13">i</name></expr>]</index></name> <operator pos:start="39:16" pos:end="39:16">=</operator> <name pos:start="39:18" pos:end="39:18">v</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="45:5" pos:end="89:5">for<control pos:start="45:8" pos:end="45:24">(<init pos:start="45:9" pos:end="45:12"><expr pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:9">i</name><operator pos:start="45:10" pos:end="45:10">=</operator><literal type="number" pos:start="45:11" pos:end="45:11">0</literal></expr>;</init> <condition pos:start="45:14" pos:end="45:19"><expr pos:start="45:14" pos:end="45:18"><name pos:start="45:14" pos:end="45:14">i</name><operator pos:start="45:15" pos:end="45:15">&lt;</operator><name pos:start="45:16" pos:end="45:18">len</name></expr>;</condition> <incr pos:start="45:21" pos:end="45:23"><expr pos:start="45:21" pos:end="45:23"><name pos:start="45:21" pos:end="45:21">i</name><operator pos:start="45:22" pos:end="45:23">++</operator></expr></incr>)</control><block pos:start="45:25" pos:end="89:5">{<block_content pos:start="47:9" pos:end="87:9">

        <decl_stmt pos:start="47:9" pos:end="47:17"><decl pos:start="47:9" pos:end="47:16"><type pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:14">double</name></type> <name pos:start="47:16" pos:end="47:16">v</name></decl>;</decl_stmt>



        <switch pos:start="51:9" pos:end="67:9">switch<condition pos:start="51:15" pos:end="51:32">(<expr pos:start="51:16" pos:end="51:31"><name pos:start="51:16" pos:end="51:31"><name pos:start="51:16" pos:end="51:16">s</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:24">dither</name><operator pos:start="51:25" pos:end="51:25">.</operator><name pos:start="51:26" pos:end="51:31">method</name></name></expr>)</condition><block pos:start="51:33" pos:end="67:9">{<block_content pos:start="53:13" pos:end="65:22">

            <default pos:start="53:13" pos:end="53:20">default:</default>

                <expr_stmt pos:start="55:17" pos:end="55:61"><expr pos:start="55:17" pos:end="55:60"><call pos:start="55:17" pos:end="55:60"><name pos:start="55:17" pos:end="55:26">av_assert0</name><argument_list pos:start="55:27" pos:end="55:60">(<argument pos:start="55:28" pos:end="55:59"><expr pos:start="55:28" pos:end="55:59"><name pos:start="55:28" pos:end="55:43"><name pos:start="55:28" pos:end="55:28">s</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:36">dither</name><operator pos:start="55:37" pos:end="55:37">.</operator><name pos:start="55:38" pos:end="55:43">method</name></name> <operator pos:start="55:45" pos:end="55:45">&lt;</operator> <name pos:start="55:47" pos:end="55:59">SWR_DITHER_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:27"><expr pos:start="57:17" pos:end="57:26"><name pos:start="57:17" pos:end="57:17">v</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:26"><name pos:start="57:21" pos:end="57:23">tmp</name><index pos:start="57:24" pos:end="57:26">[<expr pos:start="57:25" pos:end="57:25"><name pos:start="57:25" pos:end="57:25">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="59:17" pos:end="59:22">break;</break>

            <case pos:start="61:13" pos:end="61:49">case <expr pos:start="61:18" pos:end="61:47"><name pos:start="61:18" pos:end="61:47">SWR_DITHER_TRIANGULAR_HIGHPASS</name></expr> :</case>

                <expr_stmt pos:start="63:17" pos:end="63:65"><expr pos:start="63:17" pos:end="63:64"><name pos:start="63:17" pos:end="63:17">v</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <operator pos:start="63:21" pos:end="63:21">(</operator><operator pos:start="63:22" pos:end="63:22">-</operator> <name pos:start="63:24" pos:end="63:29"><name pos:start="63:24" pos:end="63:26">tmp</name><index pos:start="63:27" pos:end="63:29">[<expr pos:start="63:28" pos:end="63:28"><name pos:start="63:28" pos:end="63:28">i</name></expr>]</index></name> <operator pos:start="63:31" pos:end="63:31">+</operator> <literal type="number" pos:start="63:33" pos:end="63:33">2</literal><operator pos:start="63:34" pos:end="63:34">*</operator><name pos:start="63:35" pos:end="63:42"><name pos:start="63:35" pos:end="63:37">tmp</name><index pos:start="63:38" pos:end="63:42">[<expr pos:start="63:39" pos:end="63:41"><name pos:start="63:39" pos:end="63:39">i</name><operator pos:start="63:40" pos:end="63:40">+</operator><literal type="number" pos:start="63:41" pos:end="63:41">1</literal></expr>]</index></name> <operator pos:start="63:44" pos:end="63:44">-</operator> <name pos:start="63:46" pos:end="63:53"><name pos:start="63:46" pos:end="63:48">tmp</name><index pos:start="63:49" pos:end="63:53">[<expr pos:start="63:50" pos:end="63:52"><name pos:start="63:50" pos:end="63:50">i</name><operator pos:start="63:51" pos:end="63:51">+</operator><literal type="number" pos:start="63:52" pos:end="63:52">2</literal></expr>]</index></name><operator pos:start="63:54" pos:end="63:54">)</operator> <operator pos:start="63:56" pos:end="63:56">/</operator> <call pos:start="63:58" pos:end="63:64"><name pos:start="63:58" pos:end="63:61">sqrt</name><argument_list pos:start="63:62" pos:end="63:64">(<argument pos:start="63:63" pos:end="63:63"><expr pos:start="63:63" pos:end="63:63"><literal type="number" pos:start="63:63" pos:end="63:63">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="65:17" pos:end="65:22">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="71:9" pos:end="71:18"><expr pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:9">v</name><operator pos:start="71:10" pos:end="71:11">*=</operator> <name pos:start="71:13" pos:end="71:17">scale</name></expr>;</expr_stmt>



        <switch pos:start="75:9" pos:end="87:9">switch<condition pos:start="75:15" pos:end="75:25">(<expr pos:start="75:16" pos:end="75:24"><name pos:start="75:16" pos:end="75:24">noise_fmt</name></expr>)</condition><block pos:start="75:26" pos:end="87:9">{<block_content pos:start="77:13" pos:end="85:35">

            <case pos:start="77:13" pos:end="77:36">case <expr pos:start="77:18" pos:end="77:35"><name pos:start="77:18" pos:end="77:35">AV_SAMPLE_FMT_S16P</name></expr>:</case> <expr_stmt pos:start="77:38" pos:end="77:60"><expr pos:start="77:38" pos:end="77:59"><operator pos:start="77:38" pos:end="77:38">(</operator><operator pos:start="77:39" pos:end="77:39">(</operator><name pos:start="77:40" pos:end="77:46">int16_t</name><operator pos:start="77:47" pos:end="77:47">*</operator><operator pos:start="77:48" pos:end="77:48">)</operator><name pos:start="77:49" pos:end="77:51">dst</name><operator pos:start="77:52" pos:end="77:52">)</operator><index pos:start="77:53" pos:end="77:55">[<expr pos:start="77:54" pos:end="77:54"><name pos:start="77:54" pos:end="77:54">i</name></expr>]</index> <operator pos:start="77:57" pos:end="77:57">=</operator> <name pos:start="77:59" pos:end="77:59">v</name></expr>;</expr_stmt> <break pos:start="77:62" pos:end="77:67">break;</break>

            <case pos:start="79:13" pos:end="79:36">case <expr pos:start="79:18" pos:end="79:35"><name pos:start="79:18" pos:end="79:35">AV_SAMPLE_FMT_S32P</name></expr>:</case> <expr_stmt pos:start="79:38" pos:end="79:60"><expr pos:start="79:38" pos:end="79:59"><operator pos:start="79:38" pos:end="79:38">(</operator><operator pos:start="79:39" pos:end="79:39">(</operator><name pos:start="79:40" pos:end="79:46">int32_t</name><operator pos:start="79:47" pos:end="79:47">*</operator><operator pos:start="79:48" pos:end="79:48">)</operator><name pos:start="79:49" pos:end="79:51">dst</name><operator pos:start="79:52" pos:end="79:52">)</operator><index pos:start="79:53" pos:end="79:55">[<expr pos:start="79:54" pos:end="79:54"><name pos:start="79:54" pos:end="79:54">i</name></expr>]</index> <operator pos:start="79:57" pos:end="79:57">=</operator> <name pos:start="79:59" pos:end="79:59">v</name></expr>;</expr_stmt> <break pos:start="79:62" pos:end="79:67">break;</break>

            <case pos:start="81:13" pos:end="81:36">case <expr pos:start="81:18" pos:end="81:35"><name pos:start="81:18" pos:end="81:35">AV_SAMPLE_FMT_FLTP</name></expr>:</case> <expr_stmt pos:start="81:38" pos:end="81:60"><expr pos:start="81:38" pos:end="81:59"><operator pos:start="81:38" pos:end="81:38">(</operator><operator pos:start="81:39" pos:end="81:39">(</operator><name pos:start="81:40" pos:end="81:44">float</name>  <operator pos:start="81:47" pos:end="81:47">*</operator><operator pos:start="81:48" pos:end="81:48">)</operator><name pos:start="81:49" pos:end="81:51">dst</name><operator pos:start="81:52" pos:end="81:52">)</operator><index pos:start="81:53" pos:end="81:55">[<expr pos:start="81:54" pos:end="81:54"><name pos:start="81:54" pos:end="81:54">i</name></expr>]</index> <operator pos:start="81:57" pos:end="81:57">=</operator> <name pos:start="81:59" pos:end="81:59">v</name></expr>;</expr_stmt> <break pos:start="81:62" pos:end="81:67">break;</break>

            <case pos:start="83:13" pos:end="83:36">case <expr pos:start="83:18" pos:end="83:35"><name pos:start="83:18" pos:end="83:35">AV_SAMPLE_FMT_DBLP</name></expr>:</case> <expr_stmt pos:start="83:38" pos:end="83:60"><expr pos:start="83:38" pos:end="83:59"><operator pos:start="83:38" pos:end="83:38">(</operator><operator pos:start="83:39" pos:end="83:39">(</operator><name pos:start="83:40" pos:end="83:45">double</name> <operator pos:start="83:47" pos:end="83:47">*</operator><operator pos:start="83:48" pos:end="83:48">)</operator><name pos:start="83:49" pos:end="83:51">dst</name><operator pos:start="83:52" pos:end="83:52">)</operator><index pos:start="83:53" pos:end="83:55">[<expr pos:start="83:54" pos:end="83:54"><name pos:start="83:54" pos:end="83:54">i</name></expr>]</index> <operator pos:start="83:57" pos:end="83:57">=</operator> <name pos:start="83:59" pos:end="83:59">v</name></expr>;</expr_stmt> <break pos:start="83:62" pos:end="83:67">break;</break>

            <default pos:start="85:13" pos:end="85:20">default:</default> <expr_stmt pos:start="85:22" pos:end="85:35"><expr pos:start="85:22" pos:end="85:34"><call pos:start="85:22" pos:end="85:34"><name pos:start="85:22" pos:end="85:31">av_assert0</name><argument_list pos:start="85:32" pos:end="85:34">(<argument pos:start="85:33" pos:end="85:33"><expr pos:start="85:33" pos:end="85:33"><literal type="number" pos:start="85:33" pos:end="85:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <expr_stmt pos:start="93:5" pos:end="93:17"><expr pos:start="93:5" pos:end="93:16"><call pos:start="93:5" pos:end="93:16"><name pos:start="93:5" pos:end="93:11">av_free</name><argument_list pos:start="93:12" pos:end="93:16">(<argument pos:start="93:13" pos:end="93:15"><expr pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
