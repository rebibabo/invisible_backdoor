<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9731.c" pos:tabs="8"><function pos:start="1:1" pos:end="315:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">vvfat_open</name><parameter_list pos:start="1:22" pos:end="3:35">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:27">Error</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier><modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="315:1">{<block_content pos:start="7:5" pos:end="313:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVVVFATState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">cyls</name></decl>, <decl pos:start="9:15" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:19">heads</name></decl>, <decl pos:start="9:22" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:25">secs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:15">floppy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:23">dirname</name></decl>, <decl pos:start="13:26" pos:end="13:31"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:26" pos:end="13:26">*</modifier></type><name pos:start="13:27" pos:end="13:31">label</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">QemuOpts</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">Error</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:20">local_err</name> <init pos:start="17:22" pos:end="17:27">= <expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="24:0"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="23:1" pos:end="23:12">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:7">vvv</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:11">s</name></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="31:5" pos:end="31:66"><expr pos:start="31:5" pos:end="31:65"><name pos:start="31:5" pos:end="31:8">opts</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:65"><name pos:start="31:12" pos:end="31:27">qemu_opts_create</name><argument_list pos:start="31:28" pos:end="31:65">(<argument pos:start="31:29" pos:end="31:41"><expr pos:start="31:29" pos:end="31:41"><operator pos:start="31:29" pos:end="31:29">&amp;</operator><name pos:start="31:30" pos:end="31:41">runtime_opts</name></expr></argument>, <argument pos:start="31:44" pos:end="31:47"><expr pos:start="31:44" pos:end="31:47"><name pos:start="31:44" pos:end="31:47">NULL</name></expr></argument>, <argument pos:start="31:50" pos:end="31:50"><expr pos:start="31:50" pos:end="31:50"><literal type="number" pos:start="31:50" pos:end="31:50">0</literal></expr></argument>, <argument pos:start="31:53" pos:end="31:64"><expr pos:start="31:53" pos:end="31:64"><operator pos:start="31:53" pos:end="31:53">&amp;</operator><name pos:start="31:54" pos:end="31:64">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:54"><expr pos:start="33:5" pos:end="33:53"><call pos:start="33:5" pos:end="33:53"><name pos:start="33:5" pos:end="33:26">qemu_opts_absorb_qdict</name><argument_list pos:start="33:27" pos:end="33:53">(<argument pos:start="33:28" pos:end="33:31"><expr pos:start="33:28" pos:end="33:31"><name pos:start="33:28" pos:end="33:31">opts</name></expr></argument>, <argument pos:start="33:34" pos:end="33:40"><expr pos:start="33:34" pos:end="33:40"><name pos:start="33:34" pos:end="33:40">options</name></expr></argument>, <argument pos:start="33:43" pos:end="33:52"><expr pos:start="33:43" pos:end="33:52"><operator pos:start="33:43" pos:end="33:43">&amp;</operator><name pos:start="33:44" pos:end="33:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:18">(<expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:17">local_err</name></expr>)</condition> <block pos:start="35:20" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:18">

        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><call pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:23">error_propagate</name><argument_list pos:start="37:24" pos:end="37:40">(<argument pos:start="37:25" pos:end="37:28"><expr pos:start="37:25" pos:end="37:28"><name pos:start="37:25" pos:end="37:28">errp</name></expr></argument>, <argument pos:start="37:31" pos:end="37:39"><expr pos:start="37:31" pos:end="37:39"><name pos:start="37:31" pos:end="37:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:22"><expr pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <operator pos:start="39:15" pos:end="39:15">-</operator><name pos:start="39:16" pos:end="39:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:18">goto <name pos:start="41:14" pos:end="41:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:40"><expr pos:start="47:5" pos:end="47:39"><name pos:start="47:5" pos:end="47:11">dirname</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:39"><name pos:start="47:15" pos:end="47:26">qemu_opt_get</name><argument_list pos:start="47:27" pos:end="47:39">(<argument pos:start="47:28" pos:end="47:31"><expr pos:start="47:28" pos:end="47:31"><name pos:start="47:28" pos:end="47:31">opts</name></expr></argument>, <argument pos:start="47:34" pos:end="47:38"><expr pos:start="47:34" pos:end="47:38"><literal type="string" pos:start="47:34" pos:end="47:38">"dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:17">(<expr pos:start="49:9" pos:end="49:16"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:16">dirname</name></expr>)</condition> <block pos:start="49:19" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:18">

        <expr_stmt pos:start="51:9" pos:end="51:71"><expr pos:start="51:9" pos:end="51:70"><call pos:start="51:9" pos:end="51:70"><name pos:start="51:9" pos:end="51:18">error_setg</name><argument_list pos:start="51:19" pos:end="51:70">(<argument pos:start="51:20" pos:end="51:23"><expr pos:start="51:20" pos:end="51:23"><name pos:start="51:20" pos:end="51:23">errp</name></expr></argument>, <argument pos:start="51:26" pos:end="51:69"><expr pos:start="51:26" pos:end="51:69"><literal type="string" pos:start="51:26" pos:end="51:69">"vvfat block driver requires a 'dir' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">-</operator><name pos:start="53:16" pos:end="53:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:59"><expr pos:start="61:5" pos:end="61:58"><name pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:15">fat_type</name></name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:58"><name pos:start="61:19" pos:end="61:37">qemu_opt_get_number</name><argument_list pos:start="61:38" pos:end="61:58">(<argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><name pos:start="61:39" pos:end="61:42">opts</name></expr></argument>, <argument pos:start="61:45" pos:end="61:54"><expr pos:start="61:45" pos:end="61:54"><literal type="string" pos:start="61:45" pos:end="61:54">"fat-type"</literal></expr></argument>, <argument pos:start="61:57" pos:end="61:57"><expr pos:start="61:57" pos:end="61:57"><literal type="number" pos:start="61:57" pos:end="61:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:54"><expr pos:start="63:5" pos:end="63:53"><name pos:start="63:5" pos:end="63:10">floppy</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:53"><name pos:start="63:14" pos:end="63:30">qemu_opt_get_bool</name><argument_list pos:start="63:31" pos:end="63:53">(<argument pos:start="63:32" pos:end="63:35"><expr pos:start="63:32" pos:end="63:35"><name pos:start="63:32" pos:end="63:35">opts</name></expr></argument>, <argument pos:start="63:38" pos:end="63:45"><expr pos:start="63:38" pos:end="63:45"><literal type="string" pos:start="63:38" pos:end="63:45">"floppy"</literal></expr></argument>, <argument pos:start="63:48" pos:end="63:52"><expr pos:start="63:48" pos:end="63:52"><name pos:start="63:48" pos:end="63:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:58"><expr pos:start="67:5" pos:end="67:57"><call pos:start="67:5" pos:end="67:57"><name pos:start="67:5" pos:end="67:10">memset</name><argument_list pos:start="67:11" pos:end="67:57">(<argument pos:start="67:12" pos:end="67:26"><expr pos:start="67:12" pos:end="67:26"><name pos:start="67:12" pos:end="67:26"><name pos:start="67:12" pos:end="67:12">s</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:26">volume_label</name></name></expr></argument>, <argument pos:start="67:29" pos:end="67:31"><expr pos:start="67:29" pos:end="67:31"><literal type="char" pos:start="67:29" pos:end="67:31">' '</literal></expr></argument>, <argument pos:start="67:34" pos:end="67:56"><expr pos:start="67:34" pos:end="67:56"><sizeof pos:start="67:34" pos:end="67:56">sizeof<argument_list pos:start="67:40" pos:end="67:56">(<argument pos:start="67:41" pos:end="67:55"><expr pos:start="67:41" pos:end="67:55"><name pos:start="67:41" pos:end="67:55"><name pos:start="67:41" pos:end="67:41">s</name><operator pos:start="67:42" pos:end="67:43">-&gt;</operator><name pos:start="67:44" pos:end="67:55">volume_label</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:40"><expr pos:start="69:5" pos:end="69:39"><name pos:start="69:5" pos:end="69:9">label</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:39"><name pos:start="69:13" pos:end="69:24">qemu_opt_get</name><argument_list pos:start="69:25" pos:end="69:39">(<argument pos:start="69:26" pos:end="69:29"><expr pos:start="69:26" pos:end="69:29"><name pos:start="69:26" pos:end="69:29">opts</name></expr></argument>, <argument pos:start="69:32" pos:end="69:38"><expr pos:start="69:32" pos:end="69:38"><literal type="string" pos:start="69:32" pos:end="69:38">"label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="91:5"><if pos:start="71:5" pos:end="87:5">if <condition pos:start="71:8" pos:end="71:14">(<expr pos:start="71:9" pos:end="71:13"><name pos:start="71:9" pos:end="71:13">label</name></expr>)</condition> <block pos:start="71:16" pos:end="87:5">{<block_content pos:start="73:9" pos:end="85:53">

        <decl_stmt pos:start="73:9" pos:end="73:44"><decl pos:start="73:9" pos:end="73:43"><type pos:start="73:9" pos:end="73:14"><name pos:start="73:9" pos:end="73:14">size_t</name></type> <name pos:start="73:16" pos:end="73:27">label_length</name> <init pos:start="73:29" pos:end="73:43">= <expr pos:start="73:31" pos:end="73:43"><call pos:start="73:31" pos:end="73:43"><name pos:start="73:31" pos:end="73:36">strlen</name><argument_list pos:start="73:37" pos:end="73:43">(<argument pos:start="73:38" pos:end="73:42"><expr pos:start="73:38" pos:end="73:42"><name pos:start="73:38" pos:end="73:42">label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="83:9">if <condition pos:start="75:12" pos:end="75:30">(<expr pos:start="75:13" pos:end="75:29"><name pos:start="75:13" pos:end="75:24">label_length</name> <operator pos:start="75:26" pos:end="75:26">&gt;</operator> <literal type="number" pos:start="75:28" pos:end="75:29">11</literal></expr>)</condition> <block pos:start="75:32" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:22">

            <expr_stmt pos:start="77:13" pos:end="77:75"><expr pos:start="77:13" pos:end="77:74"><call pos:start="77:13" pos:end="77:74"><name pos:start="77:13" pos:end="77:22">error_setg</name><argument_list pos:start="77:23" pos:end="77:74">(<argument pos:start="77:24" pos:end="77:27"><expr pos:start="77:24" pos:end="77:27"><name pos:start="77:24" pos:end="77:27">errp</name></expr></argument>, <argument pos:start="77:30" pos:end="77:73"><expr pos:start="77:30" pos:end="77:73"><literal type="string" pos:start="77:30" pos:end="77:73">"vvfat label cannot be longer than 11 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:26"><expr pos:start="79:13" pos:end="79:25"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <operator pos:start="79:19" pos:end="79:19">-</operator><name pos:start="79:20" pos:end="79:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="81:13" pos:end="81:22">goto <name pos:start="81:18" pos:end="81:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:53"><expr pos:start="85:9" pos:end="85:52"><call pos:start="85:9" pos:end="85:52"><name pos:start="85:9" pos:end="85:14">memcpy</name><argument_list pos:start="85:15" pos:end="85:52">(<argument pos:start="85:16" pos:end="85:30"><expr pos:start="85:16" pos:end="85:30"><name pos:start="85:16" pos:end="85:30"><name pos:start="85:16" pos:end="85:16">s</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:30">volume_label</name></name></expr></argument>, <argument pos:start="85:33" pos:end="85:37"><expr pos:start="85:33" pos:end="85:37"><name pos:start="85:33" pos:end="85:37">label</name></expr></argument>, <argument pos:start="85:40" pos:end="85:51"><expr pos:start="85:40" pos:end="85:51"><name pos:start="85:40" pos:end="85:51">label_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="91:5">else <block pos:start="87:12" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:50">

        <expr_stmt pos:start="89:9" pos:end="89:50"><expr pos:start="89:9" pos:end="89:49"><call pos:start="89:9" pos:end="89:49"><name pos:start="89:9" pos:end="89:14">memcpy</name><argument_list pos:start="89:15" pos:end="89:49">(<argument pos:start="89:16" pos:end="89:30"><expr pos:start="89:16" pos:end="89:30"><name pos:start="89:16" pos:end="89:30"><name pos:start="89:16" pos:end="89:16">s</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:30">volume_label</name></name></expr></argument>, <argument pos:start="89:33" pos:end="89:44"><expr pos:start="89:33" pos:end="89:44"><literal type="string" pos:start="89:33" pos:end="89:44">"QEMU VVFAT"</literal></expr></argument>, <argument pos:start="89:47" pos:end="89:48"><expr pos:start="89:47" pos:end="89:48"><literal type="number" pos:start="89:47" pos:end="89:48">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="95:5" pos:end="137:5"><if pos:start="95:5" pos:end="119:5">if <condition pos:start="95:8" pos:end="95:15">(<expr pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:14">floppy</name></expr>)</condition> <block pos:start="95:17" pos:end="119:5">{<block_content pos:start="99:9" pos:end="117:18">

        <comment type="block" pos:start="97:9" pos:end="97:79">/* 1.44MB or 2.88MB floppy.  2.88MB can be FAT12 (default) or FAT16. */</comment>

        <if_stmt pos:start="99:9" pos:end="113:9"><if pos:start="99:9" pos:end="107:9">if <condition pos:start="99:12" pos:end="99:25">(<expr pos:start="99:13" pos:end="99:24"><operator pos:start="99:13" pos:end="99:13">!</operator><name pos:start="99:14" pos:end="99:24"><name pos:start="99:14" pos:end="99:14">s</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:24">fat_type</name></name></expr>)</condition> <block pos:start="99:27" pos:end="107:9">{<block_content pos:start="101:13" pos:end="105:39">

            <expr_stmt pos:start="101:13" pos:end="101:29"><expr pos:start="101:13" pos:end="101:28"><name pos:start="101:13" pos:end="101:23"><name pos:start="101:13" pos:end="101:13">s</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:23">fat_type</name></name> <operator pos:start="101:25" pos:end="101:25">=</operator> <literal type="number" pos:start="101:27" pos:end="101:28">12</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:22"><expr pos:start="103:13" pos:end="103:21"><name pos:start="103:13" pos:end="103:16">secs</name> <operator pos:start="103:18" pos:end="103:18">=</operator> <literal type="number" pos:start="103:20" pos:end="103:21">36</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:39"><expr pos:start="105:13" pos:end="105:38"><name pos:start="105:13" pos:end="105:34"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:34">sectors_per_cluster</name></name> <operator pos:start="105:36" pos:end="105:36">=</operator> <literal type="number" pos:start="105:38" pos:end="105:38">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="107:11" pos:end="113:9">else <block pos:start="107:16" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:39">

            <expr_stmt pos:start="109:13" pos:end="109:47"><expr pos:start="109:13" pos:end="109:46"><name pos:start="109:13" pos:end="109:16">secs</name> <operator pos:start="109:18" pos:end="109:18">=</operator> <ternary pos:start="109:20" pos:end="109:46"><condition pos:start="109:20" pos:end="109:38"><expr pos:start="109:20" pos:end="109:36"><name pos:start="109:20" pos:end="109:30"><name pos:start="109:20" pos:end="109:20">s</name><operator pos:start="109:21" pos:end="109:22">-&gt;</operator><name pos:start="109:23" pos:end="109:30">fat_type</name></name> <operator pos:start="109:32" pos:end="109:33">==</operator> <literal type="number" pos:start="109:35" pos:end="109:36">12</literal></expr> ?</condition><then pos:start="109:40" pos:end="109:41"> <expr pos:start="109:40" pos:end="109:41"><literal type="number" pos:start="109:40" pos:end="109:41">18</literal></expr> </then><else pos:start="109:43" pos:end="109:46">: <expr pos:start="109:45" pos:end="109:46"><literal type="number" pos:start="109:45" pos:end="109:46">36</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:39"><expr pos:start="111:13" pos:end="111:38"><name pos:start="111:13" pos:end="111:34"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:34">sectors_per_cluster</name></name> <operator pos:start="111:36" pos:end="111:36">=</operator> <literal type="number" pos:start="111:38" pos:end="111:38">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:18"><expr pos:start="115:9" pos:end="115:17"><name pos:start="115:9" pos:end="115:12">cyls</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <literal type="number" pos:start="115:16" pos:end="115:17">80</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:18"><expr pos:start="117:9" pos:end="117:17"><name pos:start="117:9" pos:end="117:13">heads</name> <operator pos:start="117:15" pos:end="117:15">=</operator> <literal type="number" pos:start="117:17" pos:end="117:17">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="119:7" pos:end="137:5">else <block pos:start="119:12" pos:end="137:5">{<block_content pos:start="123:9" pos:end="135:18">

        <comment type="block" pos:start="121:9" pos:end="121:31">/* 32MB or 504MB disk*/</comment>

        <if_stmt pos:start="123:9" pos:end="127:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:25">(<expr pos:start="123:13" pos:end="123:24"><operator pos:start="123:13" pos:end="123:13">!</operator><name pos:start="123:14" pos:end="123:24"><name pos:start="123:14" pos:end="123:14">s</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:24">fat_type</name></name></expr>)</condition> <block pos:start="123:27" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:29">

            <expr_stmt pos:start="125:13" pos:end="125:29"><expr pos:start="125:13" pos:end="125:28"><name pos:start="125:13" pos:end="125:23"><name pos:start="125:13" pos:end="125:13">s</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:23">fat_type</name></name> <operator pos:start="125:25" pos:end="125:25">=</operator> <literal type="number" pos:start="125:27" pos:end="125:28">16</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:39"><expr pos:start="129:9" pos:end="129:38"><name pos:start="129:9" pos:end="129:31"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:31">offset_to_bootsector</name></name> <operator pos:start="129:33" pos:end="129:33">=</operator> <literal type="number" pos:start="129:35" pos:end="129:38">0x3f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:45"><expr pos:start="131:9" pos:end="131:44"><name pos:start="131:9" pos:end="131:12">cyls</name> <operator pos:start="131:14" pos:end="131:14">=</operator> <ternary pos:start="131:16" pos:end="131:44"><condition pos:start="131:16" pos:end="131:34"><expr pos:start="131:16" pos:end="131:32"><name pos:start="131:16" pos:end="131:26"><name pos:start="131:16" pos:end="131:16">s</name><operator pos:start="131:17" pos:end="131:18">-&gt;</operator><name pos:start="131:19" pos:end="131:26">fat_type</name></name> <operator pos:start="131:28" pos:end="131:29">==</operator> <literal type="number" pos:start="131:31" pos:end="131:32">12</literal></expr> ?</condition><then pos:start="131:36" pos:end="131:37"> <expr pos:start="131:36" pos:end="131:37"><literal type="number" pos:start="131:36" pos:end="131:37">64</literal></expr> </then><else pos:start="131:39" pos:end="131:44">: <expr pos:start="131:41" pos:end="131:44"><literal type="number" pos:start="131:41" pos:end="131:44">1024</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:19"><expr pos:start="133:9" pos:end="133:18"><name pos:start="133:9" pos:end="133:13">heads</name> <operator pos:start="133:15" pos:end="133:15">=</operator> <literal type="number" pos:start="133:17" pos:end="133:18">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:18"><expr pos:start="135:9" pos:end="135:17"><name pos:start="135:9" pos:end="135:12">secs</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <literal type="number" pos:start="135:16" pos:end="135:17">63</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <switch pos:start="141:5" pos:end="165:5">switch <condition pos:start="141:12" pos:end="141:24">(<expr pos:start="141:13" pos:end="141:23"><name pos:start="141:13" pos:end="141:23"><name pos:start="141:13" pos:end="141:13">s</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:23">fat_type</name></name></expr>)</condition> <block pos:start="141:26" pos:end="165:5">{<block_content pos:start="143:5" pos:end="163:18">

    <case pos:start="143:5" pos:end="143:12">case <expr pos:start="143:10" pos:end="143:11"><literal type="number" pos:start="143:10" pos:end="143:11">32</literal></expr>:</case>

            <expr_stmt pos:start="145:13" pos:end="147:47"><expr pos:start="145:13" pos:end="147:46"><call pos:start="145:13" pos:end="147:46"><name pos:start="145:13" pos:end="145:19">fprintf</name><argument_list pos:start="145:20" pos:end="147:46">(<argument pos:start="145:21" pos:end="145:26"><expr pos:start="145:21" pos:end="145:26"><name pos:start="145:21" pos:end="145:26">stderr</name></expr></argument>, <argument pos:start="145:29" pos:end="147:45"><expr pos:start="145:29" pos:end="147:45"><literal type="string" pos:start="145:29" pos:end="145:80">"Big fat greek warning: FAT32 has not been tested. "</literal>

                <literal type="string" pos:start="147:17" pos:end="147:45">"You are welcome to do so!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <case pos:start="151:5" pos:end="151:12">case <expr pos:start="151:10" pos:end="151:11"><literal type="number" pos:start="151:10" pos:end="151:11">16</literal></expr>:</case>

    <case pos:start="153:5" pos:end="153:12">case <expr pos:start="153:10" pos:end="153:11"><literal type="number" pos:start="153:10" pos:end="153:11">12</literal></expr>:</case>

        <break pos:start="155:9" pos:end="155:14">break;</break>

    <default pos:start="157:5" pos:end="157:12">default:</default>

        <expr_stmt pos:start="159:9" pos:end="159:67"><expr pos:start="159:9" pos:end="159:66"><call pos:start="159:9" pos:end="159:66"><name pos:start="159:9" pos:end="159:18">error_setg</name><argument_list pos:start="159:19" pos:end="159:66">(<argument pos:start="159:20" pos:end="159:23"><expr pos:start="159:20" pos:end="159:23"><name pos:start="159:20" pos:end="159:23">errp</name></expr></argument>, <argument pos:start="159:26" pos:end="159:65"><expr pos:start="159:26" pos:end="159:65"><literal type="string" pos:start="159:26" pos:end="159:65">"Valid FAT types are only 12, 16 and 32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:22"><expr pos:start="161:9" pos:end="161:21"><name pos:start="161:9" pos:end="161:11">ret</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <operator pos:start="161:15" pos:end="161:15">-</operator><name pos:start="161:16" pos:end="161:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="163:9" pos:end="163:18">goto <name pos:start="163:14" pos:end="163:17">fail</name>;</goto>

    </block_content>}</block></switch>





    <expr_stmt pos:start="171:5" pos:end="171:15"><expr pos:start="171:5" pos:end="171:14"><name pos:start="171:5" pos:end="171:9"><name pos:start="171:5" pos:end="171:5">s</name><operator pos:start="171:6" pos:end="171:7">-&gt;</operator><name pos:start="171:8" pos:end="171:9">bs</name></name> <operator pos:start="171:11" pos:end="171:11">=</operator> <name pos:start="171:13" pos:end="171:14">bs</name></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:38">/* LATER TODO: if FAT32, adjust */</comment>

    <expr_stmt pos:start="177:5" pos:end="177:32"><expr pos:start="177:5" pos:end="177:31"><name pos:start="177:5" pos:end="177:26"><name pos:start="177:5" pos:end="177:5">s</name><operator pos:start="177:6" pos:end="177:7">-&gt;</operator><name pos:start="177:8" pos:end="177:26">sectors_per_cluster</name></name><operator pos:start="177:27" pos:end="177:27">=</operator><literal type="number" pos:start="177:28" pos:end="177:31">0x10</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:34"><expr pos:start="181:5" pos:end="181:33"><name pos:start="181:5" pos:end="181:22"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:22">current_cluster</name></name><operator pos:start="181:23" pos:end="181:23">=</operator><literal type="number" pos:start="181:24" pos:end="181:33">0xffffffff</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:19"><expr pos:start="185:5" pos:end="185:18"><name pos:start="185:5" pos:end="185:11"><name pos:start="185:5" pos:end="185:5">s</name><operator pos:start="185:6" pos:end="185:7">-&gt;</operator><name pos:start="185:8" pos:end="185:11">qcow</name></name> <operator pos:start="185:13" pos:end="185:13">=</operator> <name pos:start="185:15" pos:end="185:18">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:28"><expr pos:start="187:5" pos:end="187:27"><name pos:start="187:5" pos:end="187:20"><name pos:start="187:5" pos:end="187:5">s</name><operator pos:start="187:6" pos:end="187:7">-&gt;</operator><name pos:start="187:8" pos:end="187:20">qcow_filename</name></name> <operator pos:start="187:22" pos:end="187:22">=</operator> <name pos:start="187:24" pos:end="187:27">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:19"><expr pos:start="189:5" pos:end="189:18"><name pos:start="189:5" pos:end="189:11"><name pos:start="189:5" pos:end="189:5">s</name><operator pos:start="189:6" pos:end="189:7">-&gt;</operator><name pos:start="189:8" pos:end="189:11">fat2</name></name> <operator pos:start="189:13" pos:end="189:13">=</operator> <name pos:start="189:15" pos:end="189:18">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:32"><expr pos:start="191:5" pos:end="191:31"><name pos:start="191:5" pos:end="191:27"><name pos:start="191:5" pos:end="191:5">s</name><operator pos:start="191:6" pos:end="191:7">-&gt;</operator><name pos:start="191:8" pos:end="191:27">downcase_short_names</name></name> <operator pos:start="191:29" pos:end="191:29">=</operator> <literal type="number" pos:start="191:31" pos:end="191:31">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="195:5" pos:end="197:40"><expr pos:start="195:5" pos:end="197:39"><call pos:start="195:5" pos:end="197:39"><name pos:start="195:5" pos:end="195:11">fprintf</name><argument_list pos:start="195:12" pos:end="197:39">(<argument pos:start="195:13" pos:end="195:18"><expr pos:start="195:13" pos:end="195:18"><name pos:start="195:13" pos:end="195:18">stderr</name></expr></argument>, <argument pos:start="195:21" pos:end="195:45"><expr pos:start="195:21" pos:end="195:45"><literal type="string" pos:start="195:21" pos:end="195:45">"vvfat %s chs %d,%d,%d\n"</literal></expr></argument>,

            <argument pos:start="197:13" pos:end="197:19"><expr pos:start="197:13" pos:end="197:19"><name pos:start="197:13" pos:end="197:19">dirname</name></expr></argument>, <argument pos:start="197:22" pos:end="197:25"><expr pos:start="197:22" pos:end="197:25"><name pos:start="197:22" pos:end="197:25">cyls</name></expr></argument>, <argument pos:start="197:28" pos:end="197:32"><expr pos:start="197:28" pos:end="197:32"><name pos:start="197:28" pos:end="197:32">heads</name></expr></argument>, <argument pos:start="197:35" pos:end="197:38"><expr pos:start="197:35" pos:end="197:38"><name pos:start="197:35" pos:end="197:38">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:68"><expr pos:start="201:5" pos:end="201:67"><name pos:start="201:5" pos:end="201:19"><name pos:start="201:5" pos:end="201:5">s</name><operator pos:start="201:6" pos:end="201:7">-&gt;</operator><name pos:start="201:8" pos:end="201:19">sector_count</name></name> <operator pos:start="201:21" pos:end="201:21">=</operator> <name pos:start="201:23" pos:end="201:26">cyls</name> <operator pos:start="201:28" pos:end="201:28">*</operator> <name pos:start="201:30" pos:end="201:34">heads</name> <operator pos:start="201:36" pos:end="201:36">*</operator> <name pos:start="201:38" pos:end="201:41">secs</name> <operator pos:start="201:43" pos:end="201:43">-</operator> <name pos:start="201:45" pos:end="201:67"><name pos:start="201:45" pos:end="201:45">s</name><operator pos:start="201:46" pos:end="201:47">-&gt;</operator><name pos:start="201:48" pos:end="201:67">offset_to_bootsector</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="205:5" pos:end="243:5"><if pos:start="205:5" pos:end="229:5">if <condition pos:start="205:8" pos:end="205:45">(<expr pos:start="205:9" pos:end="205:44"><call pos:start="205:9" pos:end="205:44"><name pos:start="205:9" pos:end="205:25">qemu_opt_get_bool</name><argument_list pos:start="205:26" pos:end="205:44">(<argument pos:start="205:27" pos:end="205:30"><expr pos:start="205:27" pos:end="205:30"><name pos:start="205:27" pos:end="205:30">opts</name></expr></argument>, <argument pos:start="205:33" pos:end="205:36"><expr pos:start="205:33" pos:end="205:36"><literal type="string" pos:start="205:33" pos:end="205:36">"rw"</literal></expr></argument>, <argument pos:start="205:39" pos:end="205:43"><expr pos:start="205:39" pos:end="205:43"><name pos:start="205:39" pos:end="205:43">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="205:47" pos:end="229:5">{<block_content pos:start="207:9" pos:end="227:9">

        <if_stmt pos:start="207:9" pos:end="227:9"><if pos:start="207:9" pos:end="217:9">if <condition pos:start="207:12" pos:end="207:35">(<expr pos:start="207:13" pos:end="207:34"><operator pos:start="207:13" pos:end="207:13">!</operator><call pos:start="207:14" pos:end="207:34"><name pos:start="207:14" pos:end="207:30">bdrv_is_read_only</name><argument_list pos:start="207:31" pos:end="207:34">(<argument pos:start="207:32" pos:end="207:33"><expr pos:start="207:32" pos:end="207:33"><name pos:start="207:32" pos:end="207:33">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="207:37" pos:end="217:9">{<block_content pos:start="209:13" pos:end="215:13">

            <expr_stmt pos:start="209:13" pos:end="209:48"><expr pos:start="209:13" pos:end="209:47"><name pos:start="209:13" pos:end="209:15">ret</name> <operator pos:start="209:17" pos:end="209:17">=</operator> <call pos:start="209:19" pos:end="209:47"><name pos:start="209:19" pos:end="209:37">enable_write_target</name><argument_list pos:start="209:38" pos:end="209:47">(<argument pos:start="209:39" pos:end="209:40"><expr pos:start="209:39" pos:end="209:40"><name pos:start="209:39" pos:end="209:40">bs</name></expr></argument>, <argument pos:start="209:43" pos:end="209:46"><expr pos:start="209:43" pos:end="209:46"><name pos:start="209:43" pos:end="209:46">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="211:13" pos:end="215:13"><if pos:start="211:13" pos:end="215:13">if <condition pos:start="211:16" pos:end="211:24">(<expr pos:start="211:17" pos:end="211:23"><name pos:start="211:17" pos:end="211:19">ret</name> <operator pos:start="211:21" pos:end="211:21">&lt;</operator> <literal type="number" pos:start="211:23" pos:end="211:23">0</literal></expr>)</condition> <block pos:start="211:26" pos:end="215:13">{<block_content pos:start="213:17" pos:end="213:26">

                <goto pos:start="213:17" pos:end="213:26">goto <name pos:start="213:22" pos:end="213:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="217:11" pos:end="227:9">else <block pos:start="217:16" pos:end="227:9">{<block_content pos:start="219:13" pos:end="225:22">

            <expr_stmt pos:start="219:13" pos:end="219:25"><expr pos:start="219:13" pos:end="219:24"><name pos:start="219:13" pos:end="219:15">ret</name> <operator pos:start="219:17" pos:end="219:17">=</operator> <operator pos:start="219:19" pos:end="219:19">-</operator><name pos:start="219:20" pos:end="219:24">EPERM</name></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="223:78"><expr pos:start="221:13" pos:end="223:77"><call pos:start="221:13" pos:end="223:77"><name pos:start="221:13" pos:end="221:22">error_setg</name><argument_list pos:start="221:23" pos:end="223:77">(<argument pos:start="221:24" pos:end="221:27"><expr pos:start="221:24" pos:end="221:27"><name pos:start="221:24" pos:end="221:27">errp</name></expr></argument>,

                       <argument pos:start="223:24" pos:end="223:76"><expr pos:start="223:24" pos:end="223:76"><literal type="string" pos:start="223:24" pos:end="223:76">"Unable to set VVFAT to 'rw' when drive is read-only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="225:13" pos:end="225:22">goto <name pos:start="225:18" pos:end="225:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="229:7" pos:end="243:5">else  <block pos:start="229:13" pos:end="243:5">{<block_content pos:start="233:9" pos:end="241:9">

        <comment type="block" pos:start="231:9" pos:end="231:49">/* read only is the default for safety */</comment>

        <expr_stmt pos:start="233:9" pos:end="233:55"><expr pos:start="233:9" pos:end="233:54"><name pos:start="233:9" pos:end="233:11">ret</name> <operator pos:start="233:13" pos:end="233:13">=</operator> <call pos:start="233:15" pos:end="233:54"><name pos:start="233:15" pos:end="233:32">bdrv_set_read_only</name><argument_list pos:start="233:33" pos:end="233:54">(<argument pos:start="233:34" pos:end="233:35"><expr pos:start="233:34" pos:end="233:35"><name pos:start="233:34" pos:end="233:35">bs</name></expr></argument>, <argument pos:start="233:38" pos:end="233:41"><expr pos:start="233:38" pos:end="233:41"><name pos:start="233:38" pos:end="233:41">true</name></expr></argument>, <argument pos:start="233:44" pos:end="233:53"><expr pos:start="233:44" pos:end="233:53"><operator pos:start="233:44" pos:end="233:44">&amp;</operator><name pos:start="233:45" pos:end="233:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="235:9" pos:end="241:9"><if pos:start="235:9" pos:end="241:9">if <condition pos:start="235:12" pos:end="235:20">(<expr pos:start="235:13" pos:end="235:19"><name pos:start="235:13" pos:end="235:15">ret</name> <operator pos:start="235:17" pos:end="235:17">&lt;</operator> <literal type="number" pos:start="235:19" pos:end="235:19">0</literal></expr>)</condition> <block pos:start="235:22" pos:end="241:9">{<block_content pos:start="237:13" pos:end="239:22">

            <expr_stmt pos:start="237:13" pos:end="237:45"><expr pos:start="237:13" pos:end="237:44"><call pos:start="237:13" pos:end="237:44"><name pos:start="237:13" pos:end="237:27">error_propagate</name><argument_list pos:start="237:28" pos:end="237:44">(<argument pos:start="237:29" pos:end="237:32"><expr pos:start="237:29" pos:end="237:32"><name pos:start="237:29" pos:end="237:32">errp</name></expr></argument>, <argument pos:start="237:35" pos:end="237:43"><expr pos:start="237:35" pos:end="237:43"><name pos:start="237:35" pos:end="237:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="239:13" pos:end="239:22">goto <name pos:start="239:18" pos:end="239:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:44"><expr pos:start="247:5" pos:end="247:43"><name pos:start="247:5" pos:end="247:21"><name pos:start="247:5" pos:end="247:6">bs</name><operator pos:start="247:7" pos:end="247:8">-&gt;</operator><name pos:start="247:9" pos:end="247:21">total_sectors</name></name> <operator pos:start="247:23" pos:end="247:23">=</operator> <name pos:start="247:25" pos:end="247:28">cyls</name> <operator pos:start="247:30" pos:end="247:30">*</operator> <name pos:start="247:32" pos:end="247:36">heads</name> <operator pos:start="247:38" pos:end="247:38">*</operator> <name pos:start="247:40" pos:end="247:43">secs</name></expr>;</expr_stmt>



    <if_stmt pos:start="251:5" pos:end="257:5"><if pos:start="251:5" pos:end="257:5">if <condition pos:start="251:8" pos:end="251:56">(<expr pos:start="251:9" pos:end="251:55"><call pos:start="251:9" pos:end="251:55"><name pos:start="251:9" pos:end="251:24">init_directories</name><argument_list pos:start="251:25" pos:end="251:55">(<argument pos:start="251:26" pos:end="251:26"><expr pos:start="251:26" pos:end="251:26"><name pos:start="251:26" pos:end="251:26">s</name></expr></argument>, <argument pos:start="251:29" pos:end="251:35"><expr pos:start="251:29" pos:end="251:35"><name pos:start="251:29" pos:end="251:35">dirname</name></expr></argument>, <argument pos:start="251:38" pos:end="251:42"><expr pos:start="251:38" pos:end="251:42"><name pos:start="251:38" pos:end="251:42">heads</name></expr></argument>, <argument pos:start="251:45" pos:end="251:48"><expr pos:start="251:45" pos:end="251:48"><name pos:start="251:45" pos:end="251:48">secs</name></expr></argument>, <argument pos:start="251:51" pos:end="251:54"><expr pos:start="251:51" pos:end="251:54"><name pos:start="251:51" pos:end="251:54">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="251:58" pos:end="257:5">{<block_content pos:start="253:9" pos:end="255:18">

        <expr_stmt pos:start="253:9" pos:end="253:19"><expr pos:start="253:9" pos:end="253:18"><name pos:start="253:9" pos:end="253:11">ret</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <operator pos:start="253:15" pos:end="253:15">-</operator><name pos:start="253:16" pos:end="253:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="255:9" pos:end="255:18">goto <name pos:start="255:14" pos:end="255:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="261:5" pos:end="263:64"><expr pos:start="261:5" pos:end="263:63"><name pos:start="261:5" pos:end="261:19"><name pos:start="261:5" pos:end="261:5">s</name><operator pos:start="261:6" pos:end="261:7">-&gt;</operator><name pos:start="261:8" pos:end="261:19">sector_count</name></name> <operator pos:start="261:21" pos:end="261:21">=</operator> <name pos:start="261:23" pos:end="261:43"><name pos:start="261:23" pos:end="261:23">s</name><operator pos:start="261:24" pos:end="261:25">-&gt;</operator><name pos:start="261:26" pos:end="261:43">offset_to_root_dir</name></name>

                    <operator pos:start="263:21" pos:end="263:21">+</operator> <name pos:start="263:23" pos:end="263:44"><name pos:start="263:23" pos:end="263:23">s</name><operator pos:start="263:24" pos:end="263:25">-&gt;</operator><name pos:start="263:26" pos:end="263:44">sectors_per_cluster</name></name> <operator pos:start="263:46" pos:end="263:46">*</operator> <name pos:start="263:48" pos:end="263:63"><name pos:start="263:48" pos:end="263:48">s</name><operator pos:start="263:49" pos:end="263:50">-&gt;</operator><name pos:start="263:51" pos:end="263:63">cluster_count</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="267:5" pos:end="267:49">/* Disable migration when vvfat is used rw */</comment>

    <if_stmt pos:start="269:5" pos:end="291:5"><if pos:start="269:5" pos:end="291:5">if <condition pos:start="269:8" pos:end="269:16">(<expr pos:start="269:9" pos:end="269:15"><name pos:start="269:9" pos:end="269:15"><name pos:start="269:9" pos:end="269:9">s</name><operator pos:start="269:10" pos:end="269:11">-&gt;</operator><name pos:start="269:12" pos:end="269:15">qcow</name></name></expr>)</condition> <block pos:start="269:18" pos:end="291:5">{<block_content pos:start="271:9" pos:end="289:9">

        <expr_stmt pos:start="271:9" pos:end="277:53"><expr pos:start="271:9" pos:end="277:52"><call pos:start="271:9" pos:end="277:52"><name pos:start="271:9" pos:end="271:18">error_setg</name><argument_list pos:start="271:19" pos:end="277:52">(<argument pos:start="271:20" pos:end="271:40"><expr pos:start="271:20" pos:end="271:40"><operator pos:start="271:20" pos:end="271:20">&amp;</operator><name pos:start="271:21" pos:end="271:40"><name pos:start="271:21" pos:end="271:21">s</name><operator pos:start="271:22" pos:end="271:23">-&gt;</operator><name pos:start="271:24" pos:end="271:40">migration_blocker</name></name></expr></argument>,

                   <argument pos:start="273:20" pos:end="275:52"><expr pos:start="273:20" pos:end="275:52"><literal type="string" pos:start="273:20" pos:end="273:61">"The vvfat (rw) format used by node '%s' "</literal>

                   <literal type="string" pos:start="275:20" pos:end="275:52">"does not support live migration"</literal></expr></argument>,

                   <argument pos:start="277:20" pos:end="277:51"><expr pos:start="277:20" pos:end="277:51"><call pos:start="277:20" pos:end="277:51"><name pos:start="277:20" pos:end="277:47">bdrv_get_device_or_node_name</name><argument_list pos:start="277:48" pos:end="277:51">(<argument pos:start="277:49" pos:end="277:50"><expr pos:start="277:49" pos:end="277:50"><name pos:start="277:49" pos:end="277:50">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:68"><expr pos:start="279:9" pos:end="279:67"><name pos:start="279:9" pos:end="279:11">ret</name> <operator pos:start="279:13" pos:end="279:13">=</operator> <call pos:start="279:15" pos:end="279:67"><name pos:start="279:15" pos:end="279:33">migrate_add_blocker</name><argument_list pos:start="279:34" pos:end="279:67">(<argument pos:start="279:35" pos:end="279:54"><expr pos:start="279:35" pos:end="279:54"><name pos:start="279:35" pos:end="279:54"><name pos:start="279:35" pos:end="279:35">s</name><operator pos:start="279:36" pos:end="279:37">-&gt;</operator><name pos:start="279:38" pos:end="279:54">migration_blocker</name></name></expr></argument>, <argument pos:start="279:57" pos:end="279:66"><expr pos:start="279:57" pos:end="279:66"><operator pos:start="279:57" pos:end="279:57">&amp;</operator><name pos:start="279:58" pos:end="279:66">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="281:9" pos:end="289:9"><if pos:start="281:9" pos:end="289:9">if <condition pos:start="281:12" pos:end="281:22">(<expr pos:start="281:13" pos:end="281:21"><name pos:start="281:13" pos:end="281:21">local_err</name></expr>)</condition> <block pos:start="281:24" pos:end="289:9">{<block_content pos:start="283:13" pos:end="287:22">

            <expr_stmt pos:start="283:13" pos:end="283:45"><expr pos:start="283:13" pos:end="283:44"><call pos:start="283:13" pos:end="283:44"><name pos:start="283:13" pos:end="283:27">error_propagate</name><argument_list pos:start="283:28" pos:end="283:44">(<argument pos:start="283:29" pos:end="283:32"><expr pos:start="283:29" pos:end="283:32"><name pos:start="283:29" pos:end="283:32">errp</name></expr></argument>, <argument pos:start="283:35" pos:end="283:43"><expr pos:start="283:35" pos:end="283:43"><name pos:start="283:35" pos:end="283:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:45"><expr pos:start="285:13" pos:end="285:44"><call pos:start="285:13" pos:end="285:44"><name pos:start="285:13" pos:end="285:22">error_free</name><argument_list pos:start="285:23" pos:end="285:44">(<argument pos:start="285:24" pos:end="285:43"><expr pos:start="285:24" pos:end="285:43"><name pos:start="285:24" pos:end="285:43"><name pos:start="285:24" pos:end="285:24">s</name><operator pos:start="285:25" pos:end="285:26">-&gt;</operator><name pos:start="285:27" pos:end="285:43">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="287:13" pos:end="287:22">goto <name pos:start="287:18" pos:end="287:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="295:5" pos:end="299:5"><if pos:start="295:5" pos:end="299:5">if <condition pos:start="295:8" pos:end="295:36">(<expr pos:start="295:9" pos:end="295:35"><name pos:start="295:9" pos:end="295:31"><name pos:start="295:9" pos:end="295:9">s</name><operator pos:start="295:10" pos:end="295:11">-&gt;</operator><name pos:start="295:12" pos:end="295:31">offset_to_bootsector</name></name> <operator pos:start="295:33" pos:end="295:33">&gt;</operator> <literal type="number" pos:start="295:35" pos:end="295:35">0</literal></expr>)</condition> <block pos:start="295:38" pos:end="299:5">{<block_content pos:start="297:9" pos:end="297:39">

        <expr_stmt pos:start="297:9" pos:end="297:39"><expr pos:start="297:9" pos:end="297:38"><call pos:start="297:9" pos:end="297:38"><name pos:start="297:9" pos:end="297:16">init_mbr</name><argument_list pos:start="297:17" pos:end="297:38">(<argument pos:start="297:18" pos:end="297:18"><expr pos:start="297:18" pos:end="297:18"><name pos:start="297:18" pos:end="297:18">s</name></expr></argument>, <argument pos:start="297:21" pos:end="297:24"><expr pos:start="297:21" pos:end="297:24"><name pos:start="297:21" pos:end="297:24">cyls</name></expr></argument>, <argument pos:start="297:27" pos:end="297:31"><expr pos:start="297:27" pos:end="297:31"><name pos:start="297:27" pos:end="297:31">heads</name></expr></argument>, <argument pos:start="297:34" pos:end="297:37"><expr pos:start="297:34" pos:end="297:37"><name pos:start="297:34" pos:end="297:37">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="303:5" pos:end="303:33"><expr pos:start="303:5" pos:end="303:32"><call pos:start="303:5" pos:end="303:32"><name pos:start="303:5" pos:end="303:22">qemu_co_mutex_init</name><argument_list pos:start="303:23" pos:end="303:32">(<argument pos:start="303:24" pos:end="303:31"><expr pos:start="303:24" pos:end="303:31"><operator pos:start="303:24" pos:end="303:24">&amp;</operator><name pos:start="303:25" pos:end="303:31"><name pos:start="303:25" pos:end="303:25">s</name><operator pos:start="303:26" pos:end="303:27">-&gt;</operator><name pos:start="303:28" pos:end="303:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="307:5" pos:end="307:12"><expr pos:start="307:5" pos:end="307:11"><name pos:start="307:5" pos:end="307:7">ret</name> <operator pos:start="307:9" pos:end="307:9">=</operator> <literal type="number" pos:start="307:11" pos:end="307:11">0</literal></expr>;</expr_stmt>

<label pos:start="309:1" pos:end="309:5"><name pos:start="309:1" pos:end="309:4">fail</name>:</label>

    <expr_stmt pos:start="311:5" pos:end="311:24"><expr pos:start="311:5" pos:end="311:23"><call pos:start="311:5" pos:end="311:23"><name pos:start="311:5" pos:end="311:17">qemu_opts_del</name><argument_list pos:start="311:18" pos:end="311:23">(<argument pos:start="311:19" pos:end="311:22"><expr pos:start="311:19" pos:end="311:22"><name pos:start="311:19" pos:end="311:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="313:5" pos:end="313:15">return <expr pos:start="313:12" pos:end="313:14"><name pos:start="313:12" pos:end="313:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
