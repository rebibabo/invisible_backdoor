<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3147.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">av_open_input_file</name><parameter_list pos:start="1:23" pos:end="7:46">(<parameter pos:start="1:24" pos:end="1:47"><decl pos:start="1:24" pos:end="1:47"><type pos:start="1:24" pos:end="1:47"><name pos:start="1:24" pos:end="1:38">AVFormatContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier><modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">ic_ptr</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:59">char</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:69">filename</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:41"><decl pos:start="3:24" pos:end="3:41"><type pos:start="3:24" pos:end="3:41"><name pos:start="3:24" pos:end="3:36">AVInputFormat</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:41">fmt</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:35"><decl pos:start="5:24" pos:end="5:35"><type pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:26">int</name></type> <name pos:start="5:28" pos:end="5:35">buf_size</name></decl></parameter>,

                       <parameter pos:start="7:24" pos:end="7:45"><decl pos:start="7:24" pos:end="7:45"><type pos:start="7:24" pos:end="7:45"><name pos:start="7:24" pos:end="7:41">AVFormatParameters</name> <modifier pos:start="7:43" pos:end="7:43">*</modifier></type><name pos:start="7:44" pos:end="7:45">ap</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="151:1">{<block_content pos:start="11:5" pos:end="147:15">

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">err</name></decl>, <decl pos:start="11:14" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:23">probe_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">AVProbeData</name></type> <name pos:start="13:17" pos:end="13:26">probe_data</name></decl>, <decl pos:start="13:29" pos:end="13:45"><type ref="prev" pos:start="13:5" pos:end="13:15"><modifier pos:start="13:29" pos:end="13:29">*</modifier></type><name pos:start="13:30" pos:end="13:31">pd</name> <init pos:start="13:33" pos:end="13:45">= <expr pos:start="13:35" pos:end="13:45"><operator pos:start="13:35" pos:end="13:35">&amp;</operator><name pos:start="13:36" pos:end="13:45">probe_data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">ByteIOContext</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:21">pb</name> <init pos:start="15:23" pos:end="15:28">= <expr pos:start="15:25" pos:end="15:28"><name pos:start="15:25" pos:end="15:28">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:6">pd</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:16">filename</name></name> <operator pos:start="19:18" pos:end="19:18">=</operator> <literal type="string" pos:start="19:20" pos:end="19:21">""</literal></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:32"><if pos:start="21:5" pos:end="23:32">if <condition pos:start="21:8" pos:end="21:17">(<expr pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">filename</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:32"><block_content pos:start="23:9" pos:end="23:32">

        <expr_stmt pos:start="23:9" pos:end="23:32"><expr pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:10">pd</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:20">filename</name></name> <operator pos:start="23:22" pos:end="23:22">=</operator> <name pos:start="23:24" pos:end="23:31">filename</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:19"><expr pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:6">pd</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:11">buf</name></name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:18">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:6">pd</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:16">buf_size</name></name> <operator pos:start="27:18" pos:end="27:18">=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:13">(<expr pos:start="31:9" pos:end="31:12"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:12">fmt</name></expr>)</condition> <block pos:start="31:15" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:43">

        <comment type="block" pos:start="33:9" pos:end="33:51">/* guess format if no file can be opened */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:43"><expr pos:start="35:9" pos:end="35:42"><name pos:start="35:9" pos:end="35:11">fmt</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:42"><name pos:start="35:15" pos:end="35:35">av_probe_input_format</name><argument_list pos:start="35:36" pos:end="35:42">(<argument pos:start="35:37" pos:end="35:38"><expr pos:start="35:37" pos:end="35:38"><name pos:start="35:37" pos:end="35:38">pd</name></expr></argument>, <argument pos:start="35:41" pos:end="35:41"><expr pos:start="35:41" pos:end="35:41"><literal type="number" pos:start="35:41" pos:end="35:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="43:40">/* Do not open file if the format does not need it. XXX: specific

       hack needed to handle RTSP/TCP */</comment>

    <if_stmt pos:start="45:5" pos:end="99:5"><if pos:start="45:5" pos:end="99:5">if <condition pos:start="45:8" pos:end="45:45">(<expr pos:start="45:9" pos:end="45:44"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:12">fmt</name> <operator pos:start="45:14" pos:end="45:15">||</operator> <operator pos:start="45:17" pos:end="45:17">!</operator><operator pos:start="45:18" pos:end="45:18">(</operator><name pos:start="45:19" pos:end="45:28"><name pos:start="45:19" pos:end="45:21">fmt</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:28">flags</name></name> <operator pos:start="45:30" pos:end="45:30">&amp;</operator> <name pos:start="45:32" pos:end="45:43">AVFMT_NOFILE</name><operator pos:start="45:44" pos:end="45:44">)</operator></expr>)</condition> <block pos:start="45:47" pos:end="99:5">{<block_content pos:start="49:9" pos:end="97:27">

        <comment type="block" pos:start="47:9" pos:end="47:54">/* if no file needed do not try to open one */</comment>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:59">(<expr pos:start="49:13" pos:end="49:58"><operator pos:start="49:13" pos:end="49:13">(</operator><name pos:start="49:14" pos:end="49:16">err</name><operator pos:start="49:17" pos:end="49:17">=</operator><call pos:start="49:18" pos:end="49:53"><name pos:start="49:18" pos:end="49:26">url_fopen</name><argument_list pos:start="49:27" pos:end="49:53">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><operator pos:start="49:28" pos:end="49:28">&amp;</operator><name pos:start="49:29" pos:end="49:30">pb</name></expr></argument>, <argument pos:start="49:33" pos:end="49:40"><expr pos:start="49:33" pos:end="49:40"><name pos:start="49:33" pos:end="49:40">filename</name></expr></argument>, <argument pos:start="49:43" pos:end="49:52"><expr pos:start="49:43" pos:end="49:52"><name pos:start="49:43" pos:end="49:52">URL_RDONLY</name></expr></argument>)</argument_list></call><operator pos:start="49:54" pos:end="49:54">)</operator> <operator pos:start="49:56" pos:end="49:56">&lt;</operator> <literal type="number" pos:start="49:58" pos:end="49:58">0</literal></expr>)</condition> <block pos:start="49:61" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:22">

            <goto pos:start="51:13" pos:end="51:22">goto <name pos:start="51:18" pos:end="51:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:25">(<expr pos:start="55:13" pos:end="55:24"><name pos:start="55:13" pos:end="55:20">buf_size</name> <operator pos:start="55:22" pos:end="55:22">&gt;</operator> <literal type="number" pos:start="55:24" pos:end="55:24">0</literal></expr>)</condition> <block pos:start="55:27" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:41">

            <expr_stmt pos:start="57:13" pos:end="57:41"><expr pos:start="57:13" pos:end="57:40"><call pos:start="57:13" pos:end="57:40"><name pos:start="57:13" pos:end="57:26">url_setbufsize</name><argument_list pos:start="57:27" pos:end="57:40">(<argument pos:start="57:28" pos:end="57:29"><expr pos:start="57:28" pos:end="57:29"><name pos:start="57:28" pos:end="57:29">pb</name></expr></argument>, <argument pos:start="57:32" pos:end="57:39"><expr pos:start="57:32" pos:end="57:39"><name pos:start="57:32" pos:end="57:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="63:9" pos:end="95:9">for<control pos:start="63:12" pos:end="63:89">(<init pos:start="63:13" pos:end="63:38"><expr pos:start="63:13" pos:end="63:37"><name pos:start="63:13" pos:end="63:22">probe_size</name><operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:37">PROBE_BUF_MIN</name></expr>;</init> <condition pos:start="63:40" pos:end="63:73"><expr pos:start="63:40" pos:end="63:72"><name pos:start="63:40" pos:end="63:49">probe_size</name><operator pos:start="63:50" pos:end="63:51">&lt;=</operator><name pos:start="63:52" pos:end="63:64">PROBE_BUF_MAX</name> <operator pos:start="63:66" pos:end="63:67">&amp;&amp;</operator> <operator pos:start="63:69" pos:end="63:69">!</operator><name pos:start="63:70" pos:end="63:72">fmt</name></expr>;</condition> <incr pos:start="63:75" pos:end="63:88"><expr pos:start="63:75" pos:end="63:88"><name pos:start="63:75" pos:end="63:84">probe_size</name><operator pos:start="63:85" pos:end="63:87">&lt;&lt;=</operator><literal type="number" pos:start="63:88" pos:end="63:88">1</literal></expr></incr>)</control><block pos:start="63:90" pos:end="95:9">{<block_content pos:start="65:13" pos:end="93:56">

            <decl_stmt pos:start="65:13" pos:end="65:76"><decl pos:start="65:13" pos:end="65:75"><type pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:15">int</name></type> <name pos:start="65:17" pos:end="65:21">score</name><init pos:start="65:22" pos:end="65:75">= <expr pos:start="65:24" pos:end="65:75"><ternary pos:start="65:24" pos:end="65:75"><condition pos:start="65:24" pos:end="65:51"><expr pos:start="65:24" pos:end="65:49"><name pos:start="65:24" pos:end="65:33">probe_size</name> <operator pos:start="65:35" pos:end="65:35">&lt;</operator> <name pos:start="65:37" pos:end="65:49">PROBE_BUF_MAX</name></expr> ?</condition><then pos:start="65:53" pos:end="65:71"> <expr pos:start="65:53" pos:end="65:71"><name pos:start="65:53" pos:end="65:69">AVPROBE_SCORE_MAX</name><operator pos:start="65:70" pos:end="65:70">/</operator><literal type="number" pos:start="65:71" pos:end="65:71">4</literal></expr> </then><else pos:start="65:73" pos:end="65:75">: <expr pos:start="65:75" pos:end="65:75"><literal type="number" pos:start="65:75" pos:end="65:75">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="67:13" pos:end="67:33">/* read probe data */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:76"><expr pos:start="69:13" pos:end="69:75"><name pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:14">pd</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:19">buf</name></name><operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:75"><name pos:start="69:22" pos:end="69:31">av_realloc</name><argument_list pos:start="69:32" pos:end="69:75">(<argument pos:start="69:33" pos:end="69:39"><expr pos:start="69:33" pos:end="69:39"><name pos:start="69:33" pos:end="69:39"><name pos:start="69:33" pos:end="69:34">pd</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:39">buf</name></name></expr></argument>, <argument pos:start="69:42" pos:end="69:74"><expr pos:start="69:42" pos:end="69:74"><name pos:start="69:42" pos:end="69:51">probe_size</name> <operator pos:start="69:53" pos:end="69:53">+</operator> <name pos:start="69:55" pos:end="69:74">AVPROBE_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:63"><expr pos:start="71:13" pos:end="71:62"><name pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:14">pd</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:24">buf_size</name></name> <operator pos:start="71:26" pos:end="71:26">=</operator> <call pos:start="71:28" pos:end="71:62"><name pos:start="71:28" pos:end="71:37">get_buffer</name><argument_list pos:start="71:38" pos:end="71:62">(<argument pos:start="71:39" pos:end="71:40"><expr pos:start="71:39" pos:end="71:40"><name pos:start="71:39" pos:end="71:40">pb</name></expr></argument>, <argument pos:start="71:43" pos:end="71:49"><expr pos:start="71:43" pos:end="71:49"><name pos:start="71:43" pos:end="71:49"><name pos:start="71:43" pos:end="71:44">pd</name><operator pos:start="71:45" pos:end="71:46">-&gt;</operator><name pos:start="71:47" pos:end="71:49">buf</name></name></expr></argument>, <argument pos:start="71:52" pos:end="71:61"><expr pos:start="71:52" pos:end="71:61"><name pos:start="71:52" pos:end="71:61">probe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:66"><expr pos:start="73:13" pos:end="73:65"><call pos:start="73:13" pos:end="73:65"><name pos:start="73:13" pos:end="73:18">memset</name><argument_list pos:start="73:19" pos:end="73:65">(<argument pos:start="73:20" pos:end="73:39"><expr pos:start="73:20" pos:end="73:39"><name pos:start="73:20" pos:end="73:26"><name pos:start="73:20" pos:end="73:21">pd</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:26">buf</name></name><operator pos:start="73:27" pos:end="73:27">+</operator><name pos:start="73:28" pos:end="73:39"><name pos:start="73:28" pos:end="73:29">pd</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:39">buf_size</name></name></expr></argument>, <argument pos:start="73:42" pos:end="73:42"><expr pos:start="73:42" pos:end="73:42"><literal type="number" pos:start="73:42" pos:end="73:42">0</literal></expr></argument>, <argument pos:start="73:45" pos:end="73:64"><expr pos:start="73:45" pos:end="73:64"><name pos:start="73:45" pos:end="73:64">AVPROBE_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="89:13"><if pos:start="75:13" pos:end="89:13">if <condition pos:start="75:16" pos:end="75:47">(<expr pos:start="75:17" pos:end="75:46"><call pos:start="75:17" pos:end="75:42"><name pos:start="75:17" pos:end="75:25">url_fseek</name><argument_list pos:start="75:26" pos:end="75:42">(<argument pos:start="75:27" pos:end="75:28"><expr pos:start="75:27" pos:end="75:28"><name pos:start="75:27" pos:end="75:28">pb</name></expr></argument>, <argument pos:start="75:31" pos:end="75:31"><expr pos:start="75:31" pos:end="75:31"><literal type="number" pos:start="75:31" pos:end="75:31">0</literal></expr></argument>, <argument pos:start="75:34" pos:end="75:41"><expr pos:start="75:34" pos:end="75:41"><name pos:start="75:34" pos:end="75:41">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="75:44" pos:end="75:44">&lt;</operator> <literal type="number" pos:start="75:46" pos:end="75:46">0</literal></expr>)</condition> <block pos:start="75:49" pos:end="89:13">{<block_content pos:start="77:17" pos:end="87:17">

                <expr_stmt pos:start="77:17" pos:end="77:31"><expr pos:start="77:17" pos:end="77:30"><call pos:start="77:17" pos:end="77:30"><name pos:start="77:17" pos:end="77:26">url_fclose</name><argument_list pos:start="77:27" pos:end="77:30">(<argument pos:start="77:28" pos:end="77:29"><expr pos:start="77:28" pos:end="77:29"><name pos:start="77:28" pos:end="77:29">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="79:17" pos:end="87:17"><if pos:start="79:17" pos:end="87:17">if <condition pos:start="79:20" pos:end="79:61">(<expr pos:start="79:21" pos:end="79:60"><call pos:start="79:21" pos:end="79:56"><name pos:start="79:21" pos:end="79:29">url_fopen</name><argument_list pos:start="79:30" pos:end="79:56">(<argument pos:start="79:31" pos:end="79:33"><expr pos:start="79:31" pos:end="79:33"><operator pos:start="79:31" pos:end="79:31">&amp;</operator><name pos:start="79:32" pos:end="79:33">pb</name></expr></argument>, <argument pos:start="79:36" pos:end="79:43"><expr pos:start="79:36" pos:end="79:43"><name pos:start="79:36" pos:end="79:43">filename</name></expr></argument>, <argument pos:start="79:46" pos:end="79:55"><expr pos:start="79:46" pos:end="79:55"><name pos:start="79:46" pos:end="79:55">URL_RDONLY</name></expr></argument>)</argument_list></call> <operator pos:start="79:58" pos:end="79:58">&lt;</operator> <literal type="number" pos:start="79:60" pos:end="79:60">0</literal></expr>)</condition> <block pos:start="79:63" pos:end="87:17">{<block_content pos:start="81:21" pos:end="85:30">

                    <expr_stmt pos:start="81:21" pos:end="81:30"><expr pos:start="81:21" pos:end="81:29"><name pos:start="81:21" pos:end="81:22">pb</name> <operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:29">NULL</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="83:21" pos:end="83:39"><expr pos:start="83:21" pos:end="83:38"><name pos:start="83:21" pos:end="83:23">err</name> <operator pos:start="83:25" pos:end="83:25">=</operator> <call pos:start="83:27" pos:end="83:38"><name pos:start="83:27" pos:end="83:33">AVERROR</name><argument_list pos:start="83:34" pos:end="83:38">(<argument pos:start="83:35" pos:end="83:37"><expr pos:start="83:35" pos:end="83:37"><name pos:start="83:35" pos:end="83:37">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="85:21" pos:end="85:30">goto <name pos:start="85:26" pos:end="85:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="91:13" pos:end="91:35">/* guess file format */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:56"><expr pos:start="93:13" pos:end="93:55"><name pos:start="93:13" pos:end="93:15">fmt</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <call pos:start="93:19" pos:end="93:55"><name pos:start="93:19" pos:end="93:40">av_probe_input_format2</name><argument_list pos:start="93:41" pos:end="93:55">(<argument pos:start="93:42" pos:end="93:43"><expr pos:start="93:42" pos:end="93:43"><name pos:start="93:42" pos:end="93:43">pd</name></expr></argument>, <argument pos:start="93:46" pos:end="93:46"><expr pos:start="93:46" pos:end="93:46"><literal type="number" pos:start="93:46" pos:end="93:46">1</literal></expr></argument>, <argument pos:start="93:49" pos:end="93:54"><expr pos:start="93:49" pos:end="93:54"><operator pos:start="93:49" pos:end="93:49">&amp;</operator><name pos:start="93:50" pos:end="93:54">score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="97:9" pos:end="97:27"><expr pos:start="97:9" pos:end="97:26"><call pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:16">av_freep</name><argument_list pos:start="97:17" pos:end="97:26">(<argument pos:start="97:18" pos:end="97:25"><expr pos:start="97:18" pos:end="97:25"><operator pos:start="97:18" pos:end="97:18">&amp;</operator><name pos:start="97:19" pos:end="97:25"><name pos:start="97:19" pos:end="97:20">pd</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:25">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:41">/* if still no format found, error */</comment>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:13">(<expr pos:start="105:9" pos:end="105:12"><operator pos:start="105:9" pos:end="105:9">!</operator><name pos:start="105:10" pos:end="105:12">fmt</name></expr>)</condition> <block pos:start="105:15" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:18">

        <expr_stmt pos:start="107:9" pos:end="107:28"><expr pos:start="107:9" pos:end="107:27"><name pos:start="107:9" pos:end="107:11">err</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <name pos:start="107:15" pos:end="107:27">AVERROR_NOFMT</name></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:18">goto <name pos:start="109:14" pos:end="109:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:60">/* check filename in case an image number is expected */</comment>

    <if_stmt pos:start="117:5" pos:end="127:5"><if pos:start="117:5" pos:end="127:5">if <condition pos:start="117:8" pos:end="117:38">(<expr pos:start="117:9" pos:end="117:37"><name pos:start="117:9" pos:end="117:18"><name pos:start="117:9" pos:end="117:11">fmt</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:18">flags</name></name> <operator pos:start="117:20" pos:end="117:20">&amp;</operator> <name pos:start="117:22" pos:end="117:37">AVFMT_NEEDNUMBER</name></expr>)</condition> <block pos:start="117:40" pos:end="127:5">{<block_content pos:start="119:9" pos:end="125:9">

        <if_stmt pos:start="119:9" pos:end="125:9"><if pos:start="119:9" pos:end="125:9">if <condition pos:start="119:12" pos:end="119:47">(<expr pos:start="119:13" pos:end="119:46"><operator pos:start="119:13" pos:end="119:13">!</operator><call pos:start="119:14" pos:end="119:46"><name pos:start="119:14" pos:end="119:36">av_filename_number_test</name><argument_list pos:start="119:37" pos:end="119:46">(<argument pos:start="119:38" pos:end="119:45"><expr pos:start="119:38" pos:end="119:45"><name pos:start="119:38" pos:end="119:45">filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:49" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:22">

            <expr_stmt pos:start="121:13" pos:end="121:38"><expr pos:start="121:13" pos:end="121:37"><name pos:start="121:13" pos:end="121:15">err</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <name pos:start="121:19" pos:end="121:37">AVERROR_NUMEXPECTED</name></expr>;</expr_stmt>

            <goto pos:start="123:13" pos:end="123:22">goto <name pos:start="123:18" pos:end="123:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:62"><expr pos:start="129:5" pos:end="129:61"><name pos:start="129:5" pos:end="129:7">err</name> <operator pos:start="129:9" pos:end="129:9">=</operator> <call pos:start="129:11" pos:end="129:61"><name pos:start="129:11" pos:end="129:30">av_open_input_stream</name><argument_list pos:start="129:31" pos:end="129:61">(<argument pos:start="129:32" pos:end="129:37"><expr pos:start="129:32" pos:end="129:37"><name pos:start="129:32" pos:end="129:37">ic_ptr</name></expr></argument>, <argument pos:start="129:40" pos:end="129:41"><expr pos:start="129:40" pos:end="129:41"><name pos:start="129:40" pos:end="129:41">pb</name></expr></argument>, <argument pos:start="129:44" pos:end="129:51"><expr pos:start="129:44" pos:end="129:51"><name pos:start="129:44" pos:end="129:51">filename</name></expr></argument>, <argument pos:start="129:54" pos:end="129:56"><expr pos:start="129:54" pos:end="129:56"><name pos:start="129:54" pos:end="129:56">fmt</name></expr></argument>, <argument pos:start="129:59" pos:end="129:60"><expr pos:start="129:59" pos:end="129:60"><name pos:start="129:59" pos:end="129:60">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="133:18"><if pos:start="131:5" pos:end="133:18">if <condition pos:start="131:8" pos:end="131:12">(<expr pos:start="131:9" pos:end="131:11"><name pos:start="131:9" pos:end="131:11">err</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:18"><block_content pos:start="133:9" pos:end="133:18">

        <goto pos:start="133:9" pos:end="133:18">goto <name pos:start="133:14" pos:end="133:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <return pos:start="135:5" pos:end="135:13">return <expr pos:start="135:12" pos:end="135:12"><literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>;</return>

 <label pos:start="137:2" pos:end="137:6"><name pos:start="137:2" pos:end="137:5">fail</name>:</label>

    <expr_stmt pos:start="139:5" pos:end="139:23"><expr pos:start="139:5" pos:end="139:22"><call pos:start="139:5" pos:end="139:22"><name pos:start="139:5" pos:end="139:12">av_freep</name><argument_list pos:start="139:13" pos:end="139:22">(<argument pos:start="139:14" pos:end="139:21"><expr pos:start="139:14" pos:end="139:21"><operator pos:start="139:14" pos:end="139:14">&amp;</operator><name pos:start="139:15" pos:end="139:21"><name pos:start="139:15" pos:end="139:16">pd</name><operator pos:start="139:17" pos:end="139:18">-&gt;</operator><name pos:start="139:19" pos:end="139:21">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="143:23"><if pos:start="141:5" pos:end="143:23">if <condition pos:start="141:8" pos:end="141:11">(<expr pos:start="141:9" pos:end="141:10"><name pos:start="141:9" pos:end="141:10">pb</name></expr>)</condition><block type="pseudo" pos:start="143:9" pos:end="143:23"><block_content pos:start="143:9" pos:end="143:23">

        <expr_stmt pos:start="143:9" pos:end="143:23"><expr pos:start="143:9" pos:end="143:22"><call pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:18">url_fclose</name><argument_list pos:start="143:19" pos:end="143:22">(<argument pos:start="143:20" pos:end="143:21"><expr pos:start="143:20" pos:end="143:21"><name pos:start="143:20" pos:end="143:21">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:19"><expr pos:start="145:5" pos:end="145:18"><operator pos:start="145:5" pos:end="145:5">*</operator><name pos:start="145:6" pos:end="145:11">ic_ptr</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <name pos:start="145:15" pos:end="145:18">NULL</name></expr>;</expr_stmt>

    <return pos:start="147:5" pos:end="147:15">return <expr pos:start="147:12" pos:end="147:14"><name pos:start="147:12" pos:end="147:14">err</name></expr>;</return>



</block_content>}</block></function>
</unit>
