<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7102.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:42">ucf64_exceptbits_to_host</name><parameter_list pos:start="1:43" pos:end="1:59">(<parameter pos:start="1:44" pos:end="1:58"><decl pos:start="1:44" pos:end="1:58"><type pos:start="1:44" pos:end="1:46"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:58">target_bits</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:21">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">host_bits</name> <init pos:start="5:19" pos:end="5:21">= <expr pos:start="5:21" pos:end="5:21"><literal type="number" pos:start="5:21" pos:end="5:21">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:47">(<expr pos:start="9:9" pos:end="9:46"><name pos:start="9:9" pos:end="9:19">target_bits</name> <operator pos:start="9:21" pos:end="9:21">&amp;</operator> <name pos:start="9:23" pos:end="9:46">UCF64_FPSCR_FLAG_INVALID</name></expr>)</condition> <block pos:start="9:49" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:40">

        <expr_stmt pos:start="11:9" pos:end="11:40"><expr pos:start="11:9" pos:end="11:39"><name pos:start="11:9" pos:end="11:17">host_bits</name> <operator pos:start="11:19" pos:end="11:20">|=</operator> <name pos:start="11:22" pos:end="11:39">float_flag_invalid</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:47">(<expr pos:start="15:9" pos:end="15:46"><name pos:start="15:9" pos:end="15:19">target_bits</name> <operator pos:start="15:21" pos:end="15:21">&amp;</operator> <name pos:start="15:23" pos:end="15:46">UCF64_FPSCR_FLAG_DIVZERO</name></expr>)</condition> <block pos:start="15:49" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:42">

        <expr_stmt pos:start="17:9" pos:end="17:42"><expr pos:start="17:9" pos:end="17:41"><name pos:start="17:9" pos:end="17:17">host_bits</name> <operator pos:start="17:19" pos:end="17:20">|=</operator> <name pos:start="17:22" pos:end="17:41">float_flag_divbyzero</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:48">(<expr pos:start="21:9" pos:end="21:47"><name pos:start="21:9" pos:end="21:19">target_bits</name> <operator pos:start="21:21" pos:end="21:21">&amp;</operator> <name pos:start="21:23" pos:end="21:47">UCF64_FPSCR_FLAG_OVERFLOW</name></expr>)</condition> <block pos:start="21:50" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:41">

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:17">host_bits</name> <operator pos:start="23:19" pos:end="23:20">|=</operator> <name pos:start="23:22" pos:end="23:40">float_flag_overflow</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:49">(<expr pos:start="27:9" pos:end="27:48"><name pos:start="27:9" pos:end="27:19">target_bits</name> <operator pos:start="27:21" pos:end="27:21">&amp;</operator> <name pos:start="27:23" pos:end="27:48">UCF64_FPSCR_FLAG_UNDERFLOW</name></expr>)</condition> <block pos:start="27:51" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:42">

        <expr_stmt pos:start="29:9" pos:end="29:42"><expr pos:start="29:9" pos:end="29:41"><name pos:start="29:9" pos:end="29:17">host_bits</name> <operator pos:start="29:19" pos:end="29:20">|=</operator> <name pos:start="29:22" pos:end="29:41">float_flag_underflow</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:47">(<expr pos:start="33:9" pos:end="33:46"><name pos:start="33:9" pos:end="33:19">target_bits</name> <operator pos:start="33:21" pos:end="33:21">&amp;</operator> <name pos:start="33:23" pos:end="33:46">UCF64_FPSCR_FLAG_INEXACT</name></expr>)</condition> <block pos:start="33:49" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:40">

        <expr_stmt pos:start="35:9" pos:end="35:40"><expr pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:17">host_bits</name> <operator pos:start="35:19" pos:end="35:20">|=</operator> <name pos:start="35:22" pos:end="35:39">float_flag_inexact</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="39:5" pos:end="39:21">return <expr pos:start="39:12" pos:end="39:20"><name pos:start="39:12" pos:end="39:20">host_bits</name></expr>;</return>

</block_content>}</block></function>
</unit>
