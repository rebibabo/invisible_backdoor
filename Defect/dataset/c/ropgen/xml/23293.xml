<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23293.c" pos:tabs="8"><function pos:start="1:1" pos:end="241:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:38">hcscale_fast</name>)<parameter_list pos:start="1:40" pos:end="5:80">(<parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:50">SwsContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">c</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:67"><decl pos:start="1:56" pos:end="1:67"><type pos:start="1:56" pos:end="1:67"><name pos:start="1:56" pos:end="1:62">int16_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">dst</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:52"><decl pos:start="3:41" pos:end="3:52"><type pos:start="3:41" pos:end="3:52"><name pos:start="3:41" pos:end="3:43">int</name></type> <name pos:start="3:45" pos:end="3:52">dstWidth</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:73"><decl pos:start="3:55" pos:end="3:73"><type pos:start="3:55" pos:end="3:73"><specifier pos:start="3:55" pos:end="3:59">const</specifier> <name pos:start="3:61" pos:end="3:67">uint8_t</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:73">src1</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:59"><decl pos:start="5:41" pos:end="5:59"><type pos:start="5:41" pos:end="5:59"><specifier pos:start="5:41" pos:end="5:45">const</specifier> <name pos:start="5:47" pos:end="5:53">uint8_t</name> <modifier pos:start="5:55" pos:end="5:55">*</modifier></type><name pos:start="5:56" pos:end="5:59">src2</name></decl></parameter>, <parameter pos:start="5:62" pos:end="5:69"><decl pos:start="5:62" pos:end="5:69"><type pos:start="5:62" pos:end="5:69"><name pos:start="5:62" pos:end="5:64">int</name></type> <name pos:start="5:66" pos:end="5:69">srcW</name></decl></parameter>, <parameter pos:start="5:72" pos:end="5:79"><decl pos:start="5:72" pos:end="5:79"><type pos:start="5:72" pos:end="5:79"><name pos:start="5:72" pos:end="5:74">int</name></type> <name pos:start="5:76" pos:end="5:79">xInc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="241:1">{<block_content pos:start="13:5" pos:end="240:0">

<cpp:if pos:start="9:1" pos:end="9:12">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">ARCH_X86</name></expr></cpp:if>

<cpp:if pos:start="11:1" pos:end="11:25">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:25">COMPILE_TEMPLATE_MMX2</name></expr></cpp:if>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">int32_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:22">filterPos</name> <init pos:start="13:24" pos:end="13:41">= <expr pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:26">c</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:41">hChrFilterPos</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:38"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:19">filter</name>    <init pos:start="15:24" pos:end="15:38">= <expr pos:start="15:26" pos:end="15:38"><name pos:start="15:26" pos:end="15:38"><name pos:start="15:26" pos:end="15:26">c</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:38">hChrFilter</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:46"><decl pos:start="17:5" pos:end="17:45"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type>     <name pos:start="17:13" pos:end="17:25">canMMX2BeUsed</name>  <init pos:start="17:28" pos:end="17:45">= <expr pos:start="17:30" pos:end="17:45"><name pos:start="17:30" pos:end="17:45"><name pos:start="17:30" pos:end="17:30">c</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:45">canMMX2BeUsed</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:50"><decl pos:start="19:5" pos:end="19:49"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:8">void</name>    <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:27">mmx2FilterCode</name><init pos:start="19:28" pos:end="19:49">= <expr pos:start="19:30" pos:end="19:49"><name pos:start="19:30" pos:end="19:49"><name pos:start="19:30" pos:end="19:30">c</name><operator pos:start="19:31" pos:end="19:32">-&gt;</operator><name pos:start="19:33" pos:end="19:49">chrMmx2FilterCode</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="24:0"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

<cpp:if pos:start="23:1" pos:end="23:16">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:16"><call pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:11">defined</name><argument_list pos:start="23:12" pos:end="23:16">(<argument pos:start="23:13" pos:end="23:15"><expr pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:41"><call pos:start="25:5" pos:end="25:41"><name pos:start="25:5" pos:end="25:19">DECLARE_ALIGNED</name><argument_list pos:start="25:20" pos:end="25:41">(<argument pos:start="25:21" pos:end="25:21"><expr pos:start="25:21" pos:end="25:21"><literal type="number" pos:start="25:21" pos:end="25:21">8</literal></expr></argument>, <argument pos:start="25:24" pos:end="25:31"><expr pos:start="25:24" pos:end="25:31"><name pos:start="25:24" pos:end="25:31">uint64_t</name></expr></argument>, <argument pos:start="25:34" pos:end="25:40"><expr pos:start="25:34" pos:end="25:40"><name pos:start="25:34" pos:end="25:40">ebxsave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="29:5" pos:end="212:0"><if pos:start="29:5" pos:end="129:5">if <condition pos:start="29:8" pos:end="29:22">(<expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:21">canMMX2BeUsed</name></expr>)</condition> <block pos:start="29:24" pos:end="129:5">{<block_content pos:start="31:9" pos:end="127:9">

        <asm pos:start="31:9" pos:end="117:10">__asm__ <specifier pos:start="31:17" pos:end="31:24">volatile</specifier>(

<cpp:if pos:start="33:1" pos:end="33:16">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:16"><call pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:11">defined</name><argument_list pos:start="33:12" pos:end="33:16">(<argument pos:start="33:13" pos:end="33:15"><expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov          %%"REG_b", %6         \n\t"

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

            "pxor             %%mm7, %%mm7      \n\t"

            "mov                 %0, %%"REG_c"  \n\t"

            "mov                 %1, %%"REG_D"  \n\t"

            "mov                 %2, %%"REG_d"  \n\t"

            "mov                 %3, %%"REG_b"  \n\t"

            "xor          %%"REG_a", %%"REG_a"  \n\t" <comment type="line" pos:start="49:55" pos:end="49:58">// i</comment>

            PREFETCH"   (%%"REG_c")             \n\t"

            PREFETCH" 32(%%"REG_c")             \n\t"

            PREFETCH" 64(%%"REG_c")             \n\t"



            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE

            "xor          %%"REG_a", %%"REG_a"  \n\t" <comment type="line" pos:start="67:55" pos:end="67:58">// i</comment>

            "mov                 %5, %%"REG_c"  \n\t" <comment type="line" pos:start="69:55" pos:end="69:60">// src</comment>

            "mov                 %1, %%"REG_D"  \n\t" <comment type="line" pos:start="71:55" pos:end="71:61">// buf1</comment>

            "add              $"AV_STRINGIFY(VOF)", %%"REG_D"  \n\t"

            PREFETCH"   (%%"REG_c")             \n\t"

            PREFETCH" 32(%%"REG_c")             \n\t"

            PREFETCH" 64(%%"REG_c")             \n\t"



            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE

            CALL_MMX2_FILTER_CODE



<cpp:if pos:start="93:1" pos:end="93:16">#<cpp:directive pos:start="93:2" pos:end="93:3">if</cpp:directive> <expr pos:start="93:5" pos:end="93:16"><call pos:start="93:5" pos:end="93:16"><name pos:start="93:5" pos:end="93:11">defined</name><argument_list pos:start="93:12" pos:end="93:16">(<argument pos:start="93:13" pos:end="93:15"><expr pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov %6, %%"REG_b"    \n\t"

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

            :: "m" (src1), "m" (dst), "m" (filter), "m" (filterPos),

            "m" (mmx2FilterCode), "m" (src2)

<cpp:if pos:start="103:1" pos:end="103:16">#<cpp:directive pos:start="103:2" pos:end="103:3">if</cpp:directive> <expr pos:start="103:5" pos:end="103:16"><call pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:11">defined</name><argument_list pos:start="103:12" pos:end="103:16">(<argument pos:start="103:13" pos:end="103:15"><expr pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            ,"m" (ebxsave)

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

            : "%"REG_a, "%"REG_c, "%"REG_d, "%"REG_S, "%"REG_D

<cpp:if pos:start="111:1" pos:end="111:17">#<cpp:directive pos:start="111:2" pos:end="111:3">if</cpp:directive> <expr pos:start="111:5" pos:end="111:17"><operator pos:start="111:5" pos:end="111:5">!</operator><call pos:start="111:6" pos:end="111:17"><name pos:start="111:6" pos:end="111:12">defined</name><argument_list pos:start="111:13" pos:end="111:17">(<argument pos:start="111:14" pos:end="111:16"><expr pos:start="111:14" pos:end="111:16"><name pos:start="111:14" pos:end="111:16">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            ,"%"REG_b

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

        );</asm>

        <for pos:start="119:9" pos:end="127:9">for <control pos:start="119:13" pos:end="119:54">(<init pos:start="119:14" pos:end="119:26"><expr pos:start="119:14" pos:end="119:25"><name pos:start="119:14" pos:end="119:14">i</name><operator pos:start="119:15" pos:end="119:15">=</operator><name pos:start="119:16" pos:end="119:23">dstWidth</name><operator pos:start="119:24" pos:end="119:24">-</operator><literal type="number" pos:start="119:25" pos:end="119:25">1</literal></expr>;</init> <condition pos:start="119:28" pos:end="119:49"><expr pos:start="119:28" pos:end="119:48"><operator pos:start="119:28" pos:end="119:28">(</operator><name pos:start="119:29" pos:end="119:29">i</name><operator pos:start="119:30" pos:end="119:30">*</operator><name pos:start="119:31" pos:end="119:34">xInc</name><operator pos:start="119:35" pos:end="119:35">)</operator><operator pos:start="119:36" pos:end="119:37">&gt;&gt;</operator><literal type="number" pos:start="119:38" pos:end="119:39">16</literal> <operator pos:start="119:41" pos:end="119:42">&gt;=</operator><name pos:start="119:43" pos:end="119:46">srcW</name><operator pos:start="119:47" pos:end="119:47">-</operator><literal type="number" pos:start="119:48" pos:end="119:48">1</literal></expr>;</condition> <incr pos:start="119:51" pos:end="119:53"><expr pos:start="119:51" pos:end="119:53"><name pos:start="119:51" pos:end="119:51">i</name><operator pos:start="119:52" pos:end="119:53">--</operator></expr></incr>)</control> <block pos:start="119:56" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:43">

            <comment type="line" pos:start="121:13" pos:end="121:54">//printf("%d %d %d\n", dstWidth, i, srcW);</comment>

            <expr_stmt pos:start="123:13" pos:end="123:38"><expr pos:start="123:13" pos:end="123:37"><name pos:start="123:13" pos:end="123:18"><name pos:start="123:13" pos:end="123:15">dst</name><index pos:start="123:16" pos:end="123:18">[<expr pos:start="123:17" pos:end="123:17"><name pos:start="123:17" pos:end="123:17">i</name></expr>]</index></name> <operator pos:start="123:20" pos:end="123:20">=</operator> <name pos:start="123:22" pos:end="123:33"><name pos:start="123:22" pos:end="123:25">src1</name><index pos:start="123:26" pos:end="123:33">[<expr pos:start="123:27" pos:end="123:32"><name pos:start="123:27" pos:end="123:30">srcW</name><operator pos:start="123:31" pos:end="123:31">-</operator><literal type="number" pos:start="123:32" pos:end="123:32">1</literal></expr>]</index></name><operator pos:start="123:34" pos:end="123:34">*</operator><literal type="number" pos:start="123:35" pos:end="123:37">128</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:43"><expr pos:start="125:13" pos:end="125:42"><name pos:start="125:13" pos:end="125:23"><name pos:start="125:13" pos:end="125:15">dst</name><index pos:start="125:16" pos:end="125:23">[<expr pos:start="125:17" pos:end="125:22"><name pos:start="125:17" pos:end="125:17">i</name><operator pos:start="125:18" pos:end="125:18">+</operator><name pos:start="125:19" pos:end="125:22">VOFW</name></expr>]</index></name> <operator pos:start="125:25" pos:end="125:25">=</operator> <name pos:start="125:27" pos:end="125:38"><name pos:start="125:27" pos:end="125:30">src2</name><index pos:start="125:31" pos:end="125:38">[<expr pos:start="125:32" pos:end="125:37"><name pos:start="125:32" pos:end="125:35">srcW</name><operator pos:start="125:36" pos:end="125:36">-</operator><literal type="number" pos:start="125:37" pos:end="125:37">1</literal></expr>]</index></name><operator pos:start="125:39" pos:end="125:39">*</operator><literal type="number" pos:start="125:40" pos:end="125:42">128</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="129:7" pos:end="212:0">else <block pos:start="129:12" pos:end="212:0">{<block_content pos:start="133:9" pos:end="206:0">

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="131:8" pos:end="131:34">/* COMPILE_TEMPLATE_MMX2 */</comment>

        <decl_stmt pos:start="133:9" pos:end="133:40"><decl pos:start="133:9" pos:end="133:39"><type pos:start="133:9" pos:end="133:15"><name pos:start="133:9" pos:end="133:15">x86_reg</name></type> <name pos:start="133:17" pos:end="133:28">dstWidth_reg</name> <init pos:start="133:30" pos:end="133:39">= <expr pos:start="133:32" pos:end="133:39"><name pos:start="133:32" pos:end="133:39">dstWidth</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="135:9" pos:end="135:52"><decl pos:start="135:9" pos:end="135:51"><type pos:start="135:9" pos:end="135:15"><name pos:start="135:9" pos:end="135:15">x86_reg</name></type> <name pos:start="135:17" pos:end="135:26">xInc_shr16</name> <init pos:start="135:28" pos:end="135:51">= <expr pos:start="135:30" pos:end="135:51"><operator pos:start="135:30" pos:end="135:30">(</operator><name pos:start="135:31" pos:end="135:37">x86_reg</name><operator pos:start="135:38" pos:end="135:38">)</operator> <operator pos:start="135:40" pos:end="135:40">(</operator><name pos:start="135:41" pos:end="135:44">xInc</name> <operator pos:start="135:46" pos:end="135:47">&gt;&gt;</operator> <literal type="number" pos:start="135:49" pos:end="135:50">16</literal><operator pos:start="135:51" pos:end="135:51">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="137:9" pos:end="137:43"><decl pos:start="137:9" pos:end="137:42"><type pos:start="137:9" pos:end="137:16"><name pos:start="137:9" pos:end="137:16">uint16_t</name></type> <name pos:start="137:18" pos:end="137:26">xInc_mask</name> <init pos:start="137:28" pos:end="137:42">= <expr pos:start="137:30" pos:end="137:42"><name pos:start="137:30" pos:end="137:33">xInc</name> <operator pos:start="137:35" pos:end="137:35">&amp;</operator> <literal type="number" pos:start="137:37" pos:end="137:42">0xffff</literal></expr></init></decl>;</decl_stmt>

        <asm pos:start="139:9" pos:end="206:0">__asm__ <specifier pos:start="139:17" pos:end="139:24">volatile</specifier>(

            "xor %%"REG_a", %%"REG_a"               \n\t" <comment type="line" pos:start="141:59" pos:end="141:62">// i</comment>

            "xor %%"REG_d", %%"REG_d"               \n\t" <comment type="line" pos:start="143:59" pos:end="143:63">// xx</comment>

            "xorl    %%ecx, %%ecx                   \n\t" <comment type="line" pos:start="145:59" pos:end="145:67">// xalpha</comment>

            ASMALIGN(4)

            "1:                                     \n\t"

            "mov        %0, %%"REG_S"               \n\t"

            "movzbl  (%%"REG_S", %%"REG_d"), %%edi  \n\t" <comment type="line" pos:start="153:59" pos:end="153:67">//src[xx]</comment>

            "movzbl 1(%%"REG_S", %%"REG_d"), %%esi  \n\t" <comment type="line" pos:start="155:59" pos:end="155:69">//src[xx+1]</comment>

            FAST_BILINEAR_X86

            "movw     %%si, (%%"REG_D", %%"REG_a", 2)   \n\t"



            "movzbl    (%5, %%"REG_d"), %%edi       \n\t" <comment type="line" pos:start="163:59" pos:end="163:67">//src[xx]</comment>

            "movzbl   1(%5, %%"REG_d"), %%esi       \n\t" <comment type="line" pos:start="165:59" pos:end="165:69">//src[xx+1]</comment>

            FAST_BILINEAR_X86

            "movw     %%si, "AV_STRINGIFY(VOF)"(%%"REG_D", %%"REG_a", 2)   \n\t"



            "addw       %4, %%cx                    \n\t" <comment type="line" pos:start="173:59" pos:end="173:81">//xalpha += xInc&amp;0xFFFF</comment>

            "adc        %3, %%"REG_d"               \n\t" <comment type="line" pos:start="175:59" pos:end="175:81">//xx+= xInc&gt;&gt;16 + carry</comment>

            "add        $1, %%"REG_a"               \n\t"

            "cmp        %2, %%"REG_a"               \n\t"

            " jb        1b                          \n\t"



<comment type="block" pos:start="185:1" pos:end="187:38">/* GCC 3.3 makes MPlayer crash on IA-32 machines when using "g" operand here,

which is needed to support GCC 4.0. */</comment>

<cpp:if pos:start="189:1" pos:end="189:47">#<cpp:directive pos:start="189:2" pos:end="189:3">if</cpp:directive> <expr pos:start="189:5" pos:end="189:47"><name pos:start="189:5" pos:end="189:15">ARCH_X86_64</name> <operator pos:start="189:17" pos:end="189:18">&amp;&amp;</operator> <call pos:start="189:20" pos:end="189:47"><name pos:start="189:20" pos:end="189:42">AV_GCC_VERSION_AT_LEAST</name><argument_list pos:start="189:43" pos:end="189:47">(<argument pos:start="189:44" pos:end="189:46"><expr pos:start="189:44" pos:end="189:46"><literal type="number" pos:start="189:44" pos:end="189:44">3</literal><operator pos:start="189:45" pos:end="189:45">,</operator><literal type="number" pos:start="189:46" pos:end="189:46">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>

            :: "m" (src1), "m" (dst), "g" (dstWidth_reg), "m" (xInc_shr16), "m" (xInc_mask),

<cpp:else pos:start="193:1" pos:end="193:5">#<cpp:directive pos:start="193:2" pos:end="193:5">else</cpp:directive></cpp:else>

            :: "m" (src1), "m" (dst), "m" (dstWidth_reg), "m" (xInc_shr16), "m" (xInc_mask),

<cpp:endif pos:start="197:1" pos:end="197:6">#<cpp:directive pos:start="197:2" pos:end="197:6">endif</cpp:directive></cpp:endif>

            "r" (src2)

            : "%"REG_a, "%"REG_d, "%ecx", "%"REG_D, "%esi"

        );</asm>

<cpp:if pos:start="205:1" pos:end="205:25">#<cpp:directive pos:start="205:2" pos:end="205:3">if</cpp:directive> <expr pos:start="205:5" pos:end="205:25"><name pos:start="205:5" pos:end="205:25">COMPILE_TEMPLATE_MMX2</name></expr></cpp:if>

    </block_content>}</block></else></if_stmt> <comment type="line" pos:start="207:7" pos:end="207:29">//if MMX2 can't be used</comment>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="211:1" pos:end="211:5">#<cpp:directive pos:start="211:2" pos:end="211:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="213:5" pos:end="213:10"><decl pos:start="213:5" pos:end="213:9"><type pos:start="213:5" pos:end="213:7"><name pos:start="213:5" pos:end="213:7">int</name></type> <name pos:start="213:9" pos:end="213:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="215:5" pos:end="215:24"><decl pos:start="215:5" pos:end="215:23"><type pos:start="215:5" pos:end="215:16"><name pos:start="215:5" pos:end="215:12">unsigned</name> <name pos:start="215:14" pos:end="215:16">int</name></type> <name pos:start="215:18" pos:end="215:21">xpos</name><init pos:start="215:22" pos:end="215:23">=<expr pos:start="215:23" pos:end="215:23"><literal type="number" pos:start="215:23" pos:end="215:23">0</literal></expr></init></decl>;</decl_stmt>

    <for pos:start="217:5" pos:end="240:0">for <control pos:start="217:9" pos:end="217:28">(<init pos:start="217:10" pos:end="217:13"><expr pos:start="217:10" pos:end="217:12"><name pos:start="217:10" pos:end="217:10">i</name><operator pos:start="217:11" pos:end="217:11">=</operator><literal type="number" pos:start="217:12" pos:end="217:12">0</literal></expr>;</init><condition pos:start="217:14" pos:end="217:24"><expr pos:start="217:14" pos:end="217:23"><name pos:start="217:14" pos:end="217:14">i</name><operator pos:start="217:15" pos:end="217:15">&lt;</operator><name pos:start="217:16" pos:end="217:23">dstWidth</name></expr>;</condition><incr pos:start="217:25" pos:end="217:27"><expr pos:start="217:25" pos:end="217:27"><name pos:start="217:25" pos:end="217:25">i</name><operator pos:start="217:26" pos:end="217:27">++</operator></expr></incr>)</control> <block pos:start="217:30" pos:end="240:0">{<block_content pos:start="219:9" pos:end="235:19">

        <decl_stmt pos:start="219:9" pos:end="219:42"><decl pos:start="219:9" pos:end="219:41"><type pos:start="219:9" pos:end="219:29"><specifier pos:start="219:9" pos:end="219:16">register</specifier> <name pos:start="219:18" pos:end="219:25">unsigned</name> <name pos:start="219:27" pos:end="219:29">int</name></type> <name pos:start="219:31" pos:end="219:32">xx</name><init pos:start="219:33" pos:end="219:41">=<expr pos:start="219:34" pos:end="219:41"><name pos:start="219:34" pos:end="219:37">xpos</name><operator pos:start="219:38" pos:end="219:39">&gt;&gt;</operator><literal type="number" pos:start="219:40" pos:end="219:41">16</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="221:9" pos:end="221:54"><decl pos:start="221:9" pos:end="221:53"><type pos:start="221:9" pos:end="221:29"><specifier pos:start="221:9" pos:end="221:16">register</specifier> <name pos:start="221:18" pos:end="221:25">unsigned</name> <name pos:start="221:27" pos:end="221:29">int</name></type> <name pos:start="221:31" pos:end="221:36">xalpha</name><init pos:start="221:37" pos:end="221:53">=<expr pos:start="221:38" pos:end="221:53"><operator pos:start="221:38" pos:end="221:38">(</operator><name pos:start="221:39" pos:end="221:42">xpos</name><operator pos:start="221:43" pos:end="221:43">&amp;</operator><literal type="number" pos:start="221:44" pos:end="221:49">0xFFFF</literal><operator pos:start="221:50" pos:end="221:50">)</operator><operator pos:start="221:51" pos:end="221:52">&gt;&gt;</operator><literal type="number" pos:start="221:53" pos:end="221:53">9</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:57"><expr pos:start="223:9" pos:end="223:56"><name pos:start="223:9" pos:end="223:14"><name pos:start="223:9" pos:end="223:11">dst</name><index pos:start="223:12" pos:end="223:14">[<expr pos:start="223:13" pos:end="223:13"><name pos:start="223:13" pos:end="223:13">i</name></expr>]</index></name><operator pos:start="223:15" pos:end="223:15">=</operator><operator pos:start="223:16" pos:end="223:16">(</operator><name pos:start="223:17" pos:end="223:24"><name pos:start="223:17" pos:end="223:20">src1</name><index pos:start="223:21" pos:end="223:24">[<expr pos:start="223:22" pos:end="223:23"><name pos:start="223:22" pos:end="223:23">xx</name></expr>]</index></name><operator pos:start="223:25" pos:end="223:25">*</operator><operator pos:start="223:26" pos:end="223:26">(</operator><name pos:start="223:27" pos:end="223:32">xalpha</name><operator pos:start="223:33" pos:end="223:33">^</operator><literal type="number" pos:start="223:34" pos:end="223:36">127</literal><operator pos:start="223:37" pos:end="223:37">)</operator><operator pos:start="223:38" pos:end="223:38">+</operator><name pos:start="223:39" pos:end="223:48"><name pos:start="223:39" pos:end="223:42">src1</name><index pos:start="223:43" pos:end="223:48">[<expr pos:start="223:44" pos:end="223:47"><name pos:start="223:44" pos:end="223:45">xx</name><operator pos:start="223:46" pos:end="223:46">+</operator><literal type="number" pos:start="223:47" pos:end="223:47">1</literal></expr>]</index></name><operator pos:start="223:49" pos:end="223:49">*</operator><name pos:start="223:50" pos:end="223:55">xalpha</name><operator pos:start="223:56" pos:end="223:56">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:62"><expr pos:start="225:9" pos:end="225:61"><name pos:start="225:9" pos:end="225:19"><name pos:start="225:9" pos:end="225:11">dst</name><index pos:start="225:12" pos:end="225:19">[<expr pos:start="225:13" pos:end="225:18"><name pos:start="225:13" pos:end="225:13">i</name><operator pos:start="225:14" pos:end="225:14">+</operator><name pos:start="225:15" pos:end="225:18">VOFW</name></expr>]</index></name><operator pos:start="225:20" pos:end="225:20">=</operator><operator pos:start="225:21" pos:end="225:21">(</operator><name pos:start="225:22" pos:end="225:29"><name pos:start="225:22" pos:end="225:25">src2</name><index pos:start="225:26" pos:end="225:29">[<expr pos:start="225:27" pos:end="225:28"><name pos:start="225:27" pos:end="225:28">xx</name></expr>]</index></name><operator pos:start="225:30" pos:end="225:30">*</operator><operator pos:start="225:31" pos:end="225:31">(</operator><name pos:start="225:32" pos:end="225:37">xalpha</name><operator pos:start="225:38" pos:end="225:38">^</operator><literal type="number" pos:start="225:39" pos:end="225:41">127</literal><operator pos:start="225:42" pos:end="225:42">)</operator><operator pos:start="225:43" pos:end="225:43">+</operator><name pos:start="225:44" pos:end="225:53"><name pos:start="225:44" pos:end="225:47">src2</name><index pos:start="225:48" pos:end="225:53">[<expr pos:start="225:49" pos:end="225:52"><name pos:start="225:49" pos:end="225:50">xx</name><operator pos:start="225:51" pos:end="225:51">+</operator><literal type="number" pos:start="225:52" pos:end="225:52">1</literal></expr>]</index></name><operator pos:start="225:54" pos:end="225:54">*</operator><name pos:start="225:55" pos:end="225:60">xalpha</name><operator pos:start="225:61" pos:end="225:61">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="227:9" pos:end="233:10">/* slower

        dst[i]= (src1[xx]&lt;&lt;7) + (src1[xx+1] - src1[xx])*xalpha;

        dst[i+VOFW]=(src2[xx]&lt;&lt;7) + (src2[xx+1] - src2[xx])*xalpha;

        */</comment>

        <expr_stmt pos:start="235:9" pos:end="235:19"><expr pos:start="235:9" pos:end="235:18"><name pos:start="235:9" pos:end="235:12">xpos</name><operator pos:start="235:13" pos:end="235:14">+=</operator><name pos:start="235:15" pos:end="235:18">xInc</name></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="239:1" pos:end="239:6">#<cpp:directive pos:start="239:2" pos:end="239:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="239:8" pos:end="239:21">/* ARCH_X86 */</comment>

</block_content>}</block></function>
</unit>
