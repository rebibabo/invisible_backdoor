<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1465.c" pos:tabs="8"><function pos:start="1:1" pos:end="202:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_frame_thread_init</name><parameter_list pos:start="1:25" pos:end="1:47">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:41"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="202:1">{<block_content pos:start="5:5" pos:end="200:15">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20">thread_count</name> <init pos:start="5:22" pos:end="5:42">= <expr pos:start="5:24" pos:end="5:42"><name pos:start="5:24" pos:end="5:42"><name pos:start="5:24" pos:end="5:28">avctx</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:42">thread_count</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">AVCodec</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:24">codec</name> <init pos:start="7:26" pos:end="7:39">= <expr pos:start="7:28" pos:end="7:39"><name pos:start="7:28" pos:end="7:39"><name pos:start="7:28" pos:end="7:32">avctx</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:39">codec</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">AVCodecContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">src</name> <init pos:start="9:25" pos:end="9:31">= <expr pos:start="9:27" pos:end="9:31"><name pos:start="9:27" pos:end="9:31">avctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:22">FrameThreadContext</name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:28">fctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:14">err</name> <init pos:start="13:16" pos:end="13:18">= <expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="17:1" pos:end="17:19">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:19">HAVE_W32THREADS</name></expr></cpp:if>

    <expr_stmt pos:start="19:5" pos:end="22:0"><expr pos:start="19:5" pos:end="19:20"><call pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:18">w32thread_init</name><argument_list pos:start="19:19" pos:end="19:20">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="25:5" pos:end="41:5"><if pos:start="25:5" pos:end="41:5">if <condition pos:start="25:8" pos:end="25:22">(<expr pos:start="25:9" pos:end="25:21"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:21">thread_count</name></expr>)</condition> <block pos:start="25:24" pos:end="41:5">{<block_content pos:start="27:9" pos:end="39:51">

        <decl_stmt pos:start="27:9" pos:end="27:37"><decl pos:start="27:9" pos:end="27:36"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:19">nb_cpus</name> <init pos:start="27:21" pos:end="27:36">= <expr pos:start="27:23" pos:end="27:36"><call pos:start="27:23" pos:end="27:36"><name pos:start="27:23" pos:end="27:34">av_cpu_count</name><argument_list pos:start="27:35" pos:end="27:36">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:76"><expr pos:start="29:9" pos:end="29:75"><call pos:start="29:9" pos:end="29:75"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:75">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="29:37" pos:end="29:65"><expr pos:start="29:37" pos:end="29:65"><literal type="string" pos:start="29:37" pos:end="29:65">"detected %d logical cores\n"</literal></expr></argument>, <argument pos:start="29:68" pos:end="29:74"><expr pos:start="29:68" pos:end="29:74"><name pos:start="29:68" pos:end="29:74">nb_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="31:9" pos:end="31:76">// use number of cores + 1 as thread count if there is more than one</comment>

        <if_stmt pos:start="33:9" pos:end="39:51"><if pos:start="33:9" pos:end="35:86">if <condition pos:start="33:12" pos:end="33:24">(<expr pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:19">nb_cpus</name> <operator pos:start="33:21" pos:end="33:21">&gt;</operator> <literal type="number" pos:start="33:23" pos:end="33:23">1</literal></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:86"><block_content pos:start="35:13" pos:end="35:86">

            <expr_stmt pos:start="35:13" pos:end="35:86"><expr pos:start="35:13" pos:end="35:85"><name pos:start="35:13" pos:end="35:24">thread_count</name> <operator pos:start="35:26" pos:end="35:26">=</operator> <name pos:start="35:28" pos:end="35:46"><name pos:start="35:28" pos:end="35:32">avctx</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:46">thread_count</name></name> <operator pos:start="35:48" pos:end="35:48">=</operator> <call pos:start="35:50" pos:end="35:85"><name pos:start="35:50" pos:end="35:54">FFMIN</name><argument_list pos:start="35:55" pos:end="35:85">(<argument pos:start="35:56" pos:end="35:66"><expr pos:start="35:56" pos:end="35:66"><name pos:start="35:56" pos:end="35:62">nb_cpus</name> <operator pos:start="35:64" pos:end="35:64">+</operator> <literal type="number" pos:start="35:66" pos:end="35:66">1</literal></expr></argument>, <argument pos:start="35:69" pos:end="35:84"><expr pos:start="35:69" pos:end="35:84"><name pos:start="35:69" pos:end="35:84">MAX_AUTO_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="37:9" pos:end="39:51">else<block type="pseudo" pos:start="39:13" pos:end="39:51"><block_content pos:start="39:13" pos:end="39:51">

            <expr_stmt pos:start="39:13" pos:end="39:51"><expr pos:start="39:13" pos:end="39:50"><name pos:start="39:13" pos:end="39:24">thread_count</name> <operator pos:start="39:26" pos:end="39:26">=</operator> <name pos:start="39:28" pos:end="39:46"><name pos:start="39:28" pos:end="39:32">avctx</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:46">thread_count</name></name> <operator pos:start="39:48" pos:end="39:48">=</operator> <literal type="number" pos:start="39:50" pos:end="39:50">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:26">(<expr pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:20">thread_count</name> <operator pos:start="45:22" pos:end="45:23">&lt;=</operator> <literal type="number" pos:start="45:25" pos:end="45:25">1</literal></expr>)</condition> <block pos:start="45:28" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:17">

        <expr_stmt pos:start="47:9" pos:end="47:38"><expr pos:start="47:9" pos:end="47:37"><name pos:start="47:9" pos:end="47:33"><name pos:start="47:9" pos:end="47:13">avctx</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:33">active_thread_type</name></name> <operator pos:start="47:35" pos:end="47:35">=</operator> <literal type="number" pos:start="47:37" pos:end="47:37">0</literal></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:17">return <expr pos:start="49:16" pos:end="49:16"><literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:80"><expr pos:start="55:5" pos:end="55:79"><name pos:start="55:5" pos:end="55:31"><name pos:start="55:5" pos:end="55:9">avctx</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:19">internal</name><operator pos:start="55:20" pos:end="55:21">-&gt;</operator><name pos:start="55:22" pos:end="55:31">thread_ctx</name></name> <operator pos:start="55:33" pos:end="55:33">=</operator> <name pos:start="55:35" pos:end="55:38">fctx</name> <operator pos:start="55:40" pos:end="55:40">=</operator> <call pos:start="55:42" pos:end="55:79"><name pos:start="55:42" pos:end="55:51">av_mallocz</name><argument_list pos:start="55:52" pos:end="55:79">(<argument pos:start="55:53" pos:end="55:78"><expr pos:start="55:53" pos:end="55:78"><sizeof pos:start="55:53" pos:end="55:78">sizeof<argument_list pos:start="55:59" pos:end="55:78">(<argument pos:start="55:60" pos:end="55:77"><expr pos:start="55:60" pos:end="55:77"><name pos:start="55:60" pos:end="55:77">FrameThreadContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:72"><expr pos:start="59:5" pos:end="59:71"><name pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:8">fctx</name><operator pos:start="59:9" pos:end="59:10">-&gt;</operator><name pos:start="59:11" pos:end="59:17">threads</name></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:71"><name pos:start="59:21" pos:end="59:30">av_mallocz</name><argument_list pos:start="59:31" pos:end="59:71">(<argument pos:start="59:32" pos:end="59:70"><expr pos:start="59:32" pos:end="59:70"><sizeof pos:start="59:32" pos:end="59:55">sizeof<argument_list pos:start="59:38" pos:end="59:55">(<argument pos:start="59:39" pos:end="59:54"><expr pos:start="59:39" pos:end="59:54"><name pos:start="59:39" pos:end="59:54">PerThreadContext</name></expr></argument>)</argument_list></sizeof> <operator pos:start="59:57" pos:end="59:57">*</operator> <name pos:start="59:59" pos:end="59:70">thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:50"><expr pos:start="61:5" pos:end="61:49"><call pos:start="61:5" pos:end="61:49"><name pos:start="61:5" pos:end="61:22">pthread_mutex_init</name><argument_list pos:start="61:23" pos:end="61:49">(<argument pos:start="61:24" pos:end="61:42"><expr pos:start="61:24" pos:end="61:42"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:42"><name pos:start="61:25" pos:end="61:28">fctx</name><operator pos:start="61:29" pos:end="61:30">-&gt;</operator><name pos:start="61:31" pos:end="61:42">buffer_mutex</name></name></expr></argument>, <argument pos:start="61:45" pos:end="61:48"><expr pos:start="61:45" pos:end="61:48"><name pos:start="61:45" pos:end="61:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:23"><expr pos:start="63:5" pos:end="63:22"><name pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:8">fctx</name><operator pos:start="63:9" pos:end="63:10">-&gt;</operator><name pos:start="63:11" pos:end="63:18">delaying</name></name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">1</literal></expr>;</expr_stmt>



    <for pos:start="67:5" pos:end="186:5">for <control pos:start="67:9" pos:end="67:38">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:33"><expr pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:32">thread_count</name></expr>;</condition> <incr pos:start="67:35" pos:end="67:37"><expr pos:start="67:35" pos:end="67:37"><name pos:start="67:35" pos:end="67:35">i</name><operator pos:start="67:36" pos:end="67:37">++</operator></expr></incr>)</control> <block pos:start="67:40" pos:end="186:5">{<block_content pos:start="69:9" pos:end="184:31">

        <decl_stmt pos:start="69:9" pos:end="69:65"><decl pos:start="69:9" pos:end="69:64"><type pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:22">AVCodecContext</name> <modifier pos:start="69:24" pos:end="69:24">*</modifier></type><name pos:start="69:25" pos:end="69:28">copy</name> <init pos:start="69:30" pos:end="69:64">= <expr pos:start="69:32" pos:end="69:64"><call pos:start="69:32" pos:end="69:64"><name pos:start="69:32" pos:end="69:40">av_malloc</name><argument_list pos:start="69:41" pos:end="69:64">(<argument pos:start="69:42" pos:end="69:63"><expr pos:start="69:42" pos:end="69:63"><sizeof pos:start="69:42" pos:end="69:63">sizeof<argument_list pos:start="69:48" pos:end="69:63">(<argument pos:start="69:49" pos:end="69:62"><expr pos:start="69:49" pos:end="69:62"><name pos:start="69:49" pos:end="69:62">AVCodecContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:49"><decl pos:start="71:9" pos:end="71:48"><type pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:24">PerThreadContext</name> <modifier pos:start="71:26" pos:end="71:26">*</modifier></type><name pos:start="71:27" pos:end="71:27">p</name>  <init pos:start="71:30" pos:end="71:48">= <expr pos:start="71:32" pos:end="71:48"><operator pos:start="71:32" pos:end="71:32">&amp;</operator><name pos:start="71:33" pos:end="71:48"><name pos:start="71:33" pos:end="71:36">fctx</name><operator pos:start="71:37" pos:end="71:38">-&gt;</operator><name pos:start="71:39" pos:end="71:45">threads</name><index pos:start="71:46" pos:end="71:48">[<expr pos:start="71:47" pos:end="71:47"><name pos:start="71:47" pos:end="71:47">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:44"><expr pos:start="75:9" pos:end="75:43"><call pos:start="75:9" pos:end="75:43"><name pos:start="75:9" pos:end="75:26">pthread_mutex_init</name><argument_list pos:start="75:27" pos:end="75:43">(<argument pos:start="75:28" pos:end="75:36"><expr pos:start="75:28" pos:end="75:36"><operator pos:start="75:28" pos:end="75:28">&amp;</operator><name pos:start="75:29" pos:end="75:36"><name pos:start="75:29" pos:end="75:29">p</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:36">mutex</name></name></expr></argument>, <argument pos:start="75:39" pos:end="75:42"><expr pos:start="75:39" pos:end="75:42"><name pos:start="75:39" pos:end="75:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:53"><expr pos:start="77:9" pos:end="77:52"><call pos:start="77:9" pos:end="77:52"><name pos:start="77:9" pos:end="77:26">pthread_mutex_init</name><argument_list pos:start="77:27" pos:end="77:52">(<argument pos:start="77:28" pos:end="77:45"><expr pos:start="77:28" pos:end="77:45"><operator pos:start="77:28" pos:end="77:28">&amp;</operator><name pos:start="77:29" pos:end="77:45"><name pos:start="77:29" pos:end="77:29">p</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:45">progress_mutex</name></name></expr></argument>, <argument pos:start="77:48" pos:end="77:51"><expr pos:start="77:48" pos:end="77:51"><name pos:start="77:48" pos:end="77:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:48"><expr pos:start="79:9" pos:end="79:47"><call pos:start="79:9" pos:end="79:47"><name pos:start="79:9" pos:end="79:25">pthread_cond_init</name><argument_list pos:start="79:26" pos:end="79:47">(<argument pos:start="79:27" pos:end="79:40"><expr pos:start="79:27" pos:end="79:40"><operator pos:start="79:27" pos:end="79:27">&amp;</operator><name pos:start="79:28" pos:end="79:40"><name pos:start="79:28" pos:end="79:28">p</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:40">input_cond</name></name></expr></argument>, <argument pos:start="79:43" pos:end="79:46"><expr pos:start="79:43" pos:end="79:46"><name pos:start="79:43" pos:end="79:46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:51"><expr pos:start="81:9" pos:end="81:50"><call pos:start="81:9" pos:end="81:50"><name pos:start="81:9" pos:end="81:25">pthread_cond_init</name><argument_list pos:start="81:26" pos:end="81:50">(<argument pos:start="81:27" pos:end="81:43"><expr pos:start="81:27" pos:end="81:43"><operator pos:start="81:27" pos:end="81:27">&amp;</operator><name pos:start="81:28" pos:end="81:43"><name pos:start="81:28" pos:end="81:28">p</name><operator pos:start="81:29" pos:end="81:30">-&gt;</operator><name pos:start="81:31" pos:end="81:43">progress_cond</name></name></expr></argument>, <argument pos:start="81:46" pos:end="81:49"><expr pos:start="81:46" pos:end="81:49"><name pos:start="81:46" pos:end="81:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:49"><expr pos:start="83:9" pos:end="83:48"><call pos:start="83:9" pos:end="83:48"><name pos:start="83:9" pos:end="83:25">pthread_cond_init</name><argument_list pos:start="83:26" pos:end="83:48">(<argument pos:start="83:27" pos:end="83:41"><expr pos:start="83:27" pos:end="83:41"><operator pos:start="83:27" pos:end="83:27">&amp;</operator><name pos:start="83:28" pos:end="83:41"><name pos:start="83:28" pos:end="83:28">p</name><operator pos:start="83:29" pos:end="83:30">-&gt;</operator><name pos:start="83:31" pos:end="83:41">output_cond</name></name></expr></argument>, <argument pos:start="83:44" pos:end="83:47"><expr pos:start="83:44" pos:end="83:47"><name pos:start="83:44" pos:end="83:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:9">p</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:16">frame</name></name> <operator pos:start="87:18" pos:end="87:18">=</operator> <call pos:start="87:20" pos:end="87:35"><name pos:start="87:20" pos:end="87:33">av_frame_alloc</name><argument_list pos:start="87:34" pos:end="87:35">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="96:9"><if pos:start="89:9" pos:end="96:9">if <condition pos:start="89:12" pos:end="89:22">(<expr pos:start="89:13" pos:end="89:21"><operator pos:start="89:13" pos:end="89:13">!</operator><name pos:start="89:14" pos:end="89:21"><name pos:start="89:14" pos:end="89:14">p</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:21">frame</name></name></expr>)</condition> <block pos:start="89:24" pos:end="96:9">{<block_content pos:start="92:13" pos:end="94:23">


            <expr_stmt pos:start="92:13" pos:end="92:34"><expr pos:start="92:13" pos:end="92:33"><name pos:start="92:13" pos:end="92:15">err</name> <operator pos:start="92:17" pos:end="92:17">=</operator> <call pos:start="92:19" pos:end="92:33"><name pos:start="92:19" pos:end="92:25">AVERROR</name><argument_list pos:start="92:26" pos:end="92:33">(<argument pos:start="92:27" pos:end="92:32"><expr pos:start="92:27" pos:end="92:32"><name pos:start="92:27" pos:end="92:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="94:13" pos:end="94:23">goto <name pos:start="94:18" pos:end="94:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="100:9" pos:end="100:25"><expr pos:start="100:9" pos:end="100:24"><name pos:start="100:9" pos:end="100:17"><name pos:start="100:9" pos:end="100:9">p</name><operator pos:start="100:10" pos:end="100:11">-&gt;</operator><name pos:start="100:12" pos:end="100:17">parent</name></name> <operator pos:start="100:19" pos:end="100:19">=</operator> <name pos:start="100:21" pos:end="100:24">fctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="102:9" pos:end="102:25"><expr pos:start="102:9" pos:end="102:24"><name pos:start="102:9" pos:end="102:16"><name pos:start="102:9" pos:end="102:9">p</name><operator pos:start="102:10" pos:end="102:11">-&gt;</operator><name pos:start="102:12" pos:end="102:16">avctx</name></name>  <operator pos:start="102:19" pos:end="102:19">=</operator> <name pos:start="102:21" pos:end="102:24">copy</name></expr>;</expr_stmt>



        <if_stmt pos:start="106:9" pos:end="112:9"><if pos:start="106:9" pos:end="112:9">if <condition pos:start="106:12" pos:end="106:18">(<expr pos:start="106:13" pos:end="106:17"><operator pos:start="106:13" pos:end="106:13">!</operator><name pos:start="106:14" pos:end="106:17">copy</name></expr>)</condition> <block pos:start="106:20" pos:end="112:9">{<block_content pos:start="108:13" pos:end="110:23">

            <expr_stmt pos:start="108:13" pos:end="108:34"><expr pos:start="108:13" pos:end="108:33"><name pos:start="108:13" pos:end="108:15">err</name> <operator pos:start="108:17" pos:end="108:17">=</operator> <call pos:start="108:19" pos:end="108:33"><name pos:start="108:19" pos:end="108:25">AVERROR</name><argument_list pos:start="108:26" pos:end="108:33">(<argument pos:start="108:27" pos:end="108:32"><expr pos:start="108:27" pos:end="108:32"><name pos:start="108:27" pos:end="108:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="110:13" pos:end="110:23">goto <name pos:start="110:18" pos:end="110:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="116:9" pos:end="116:21"><expr pos:start="116:9" pos:end="116:20"><operator pos:start="116:9" pos:end="116:9">*</operator><name pos:start="116:10" pos:end="116:13">copy</name> <operator pos:start="116:15" pos:end="116:15">=</operator> <operator pos:start="116:17" pos:end="116:17">*</operator><name pos:start="116:18" pos:end="116:20">src</name></expr>;</expr_stmt>



        <expr_stmt pos:start="120:9" pos:end="120:60"><expr pos:start="120:9" pos:end="120:59"><name pos:start="120:9" pos:end="120:22"><name pos:start="120:9" pos:end="120:12">copy</name><operator pos:start="120:13" pos:end="120:14">-&gt;</operator><name pos:start="120:15" pos:end="120:22">internal</name></name> <operator pos:start="120:24" pos:end="120:24">=</operator> <call pos:start="120:26" pos:end="120:59"><name pos:start="120:26" pos:end="120:34">av_malloc</name><argument_list pos:start="120:35" pos:end="120:59">(<argument pos:start="120:36" pos:end="120:58"><expr pos:start="120:36" pos:end="120:58"><sizeof pos:start="120:36" pos:end="120:58">sizeof<argument_list pos:start="120:42" pos:end="120:58">(<argument pos:start="120:43" pos:end="120:57"><expr pos:start="120:43" pos:end="120:57"><name pos:start="120:43" pos:end="120:57">AVCodecInternal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="122:9" pos:end="128:9"><if pos:start="122:9" pos:end="128:9">if <condition pos:start="122:12" pos:end="122:28">(<expr pos:start="122:13" pos:end="122:27"><operator pos:start="122:13" pos:end="122:13">!</operator><name pos:start="122:14" pos:end="122:27"><name pos:start="122:14" pos:end="122:17">copy</name><operator pos:start="122:18" pos:end="122:19">-&gt;</operator><name pos:start="122:20" pos:end="122:27">internal</name></name></expr>)</condition> <block pos:start="122:30" pos:end="128:9">{<block_content pos:start="124:13" pos:end="126:23">

            <expr_stmt pos:start="124:13" pos:end="124:34"><expr pos:start="124:13" pos:end="124:33"><name pos:start="124:13" pos:end="124:15">err</name> <operator pos:start="124:17" pos:end="124:17">=</operator> <call pos:start="124:19" pos:end="124:33"><name pos:start="124:19" pos:end="124:25">AVERROR</name><argument_list pos:start="124:26" pos:end="124:33">(<argument pos:start="124:27" pos:end="124:32"><expr pos:start="124:27" pos:end="124:32"><name pos:start="124:27" pos:end="124:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="126:13" pos:end="126:23">goto <name pos:start="126:18" pos:end="126:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="130:9" pos:end="130:41"><expr pos:start="130:9" pos:end="130:40"><operator pos:start="130:9" pos:end="130:9">*</operator><name pos:start="130:10" pos:end="130:23"><name pos:start="130:10" pos:end="130:13">copy</name><operator pos:start="130:14" pos:end="130:15">-&gt;</operator><name pos:start="130:16" pos:end="130:23">internal</name></name> <operator pos:start="130:25" pos:end="130:25">=</operator> <operator pos:start="130:27" pos:end="130:27">*</operator><name pos:start="130:28" pos:end="130:40"><name pos:start="130:28" pos:end="130:30">src</name><operator pos:start="130:31" pos:end="130:32">-&gt;</operator><name pos:start="130:33" pos:end="130:40">internal</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="132:9" pos:end="132:39"><expr pos:start="132:9" pos:end="132:38"><name pos:start="132:9" pos:end="132:34"><name pos:start="132:9" pos:end="132:12">copy</name><operator pos:start="132:13" pos:end="132:14">-&gt;</operator><name pos:start="132:15" pos:end="132:22">internal</name><operator pos:start="132:23" pos:end="132:24">-&gt;</operator><name pos:start="132:25" pos:end="132:34">thread_ctx</name></name> <operator pos:start="132:36" pos:end="132:36">=</operator> <name pos:start="132:38" pos:end="132:38">p</name></expr>;</expr_stmt>

        <expr_stmt pos:start="134:9" pos:end="134:40"><expr pos:start="134:9" pos:end="134:39"><name pos:start="134:9" pos:end="134:27"><name pos:start="134:9" pos:end="134:12">copy</name><operator pos:start="134:13" pos:end="134:14">-&gt;</operator><name pos:start="134:15" pos:end="134:22">internal</name><operator pos:start="134:23" pos:end="134:24">-&gt;</operator><name pos:start="134:25" pos:end="134:27">pkt</name></name> <operator pos:start="134:29" pos:end="134:29">=</operator> <operator pos:start="134:31" pos:end="134:31">&amp;</operator><name pos:start="134:32" pos:end="134:39"><name pos:start="134:32" pos:end="134:32">p</name><operator pos:start="134:33" pos:end="134:34">-&gt;</operator><name pos:start="134:35" pos:end="134:39">avpkt</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="138:9" pos:end="174:9"><if pos:start="138:9" pos:end="152:9">if <condition pos:start="138:12" pos:end="138:15">(<expr pos:start="138:13" pos:end="138:14"><operator pos:start="138:13" pos:end="138:13">!</operator><name pos:start="138:14" pos:end="138:14">i</name></expr>)</condition> <block pos:start="138:17" pos:end="152:9">{<block_content pos:start="140:13" pos:end="150:55">

            <expr_stmt pos:start="140:13" pos:end="140:23"><expr pos:start="140:13" pos:end="140:22"><name pos:start="140:13" pos:end="140:15">src</name> <operator pos:start="140:17" pos:end="140:17">=</operator> <name pos:start="140:19" pos:end="140:22">copy</name></expr>;</expr_stmt>



            <if_stmt pos:start="144:13" pos:end="146:40"><if pos:start="144:13" pos:end="146:40">if <condition pos:start="144:16" pos:end="144:28">(<expr pos:start="144:17" pos:end="144:27"><name pos:start="144:17" pos:end="144:27"><name pos:start="144:17" pos:end="144:21">codec</name><operator pos:start="144:22" pos:end="144:23">-&gt;</operator><name pos:start="144:24" pos:end="144:27">init</name></name></expr>)</condition><block type="pseudo" pos:start="146:17" pos:end="146:40"><block_content pos:start="146:17" pos:end="146:40">

                <expr_stmt pos:start="146:17" pos:end="146:40"><expr pos:start="146:17" pos:end="146:39"><name pos:start="146:17" pos:end="146:19">err</name> <operator pos:start="146:21" pos:end="146:21">=</operator> <call pos:start="146:23" pos:end="146:39"><name pos:start="146:23" pos:end="146:33"><name pos:start="146:23" pos:end="146:27">codec</name><operator pos:start="146:28" pos:end="146:29">-&gt;</operator><name pos:start="146:30" pos:end="146:33">init</name></name><argument_list pos:start="146:34" pos:end="146:39">(<argument pos:start="146:35" pos:end="146:38"><expr pos:start="146:35" pos:end="146:38"><name pos:start="146:35" pos:end="146:38">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="150:13" pos:end="150:55"><expr pos:start="150:13" pos:end="150:54"><call pos:start="150:13" pos:end="150:54"><name pos:start="150:13" pos:end="150:38">update_context_from_thread</name><argument_list pos:start="150:39" pos:end="150:54">(<argument pos:start="150:40" pos:end="150:44"><expr pos:start="150:40" pos:end="150:44"><name pos:start="150:40" pos:end="150:44">avctx</name></expr></argument>, <argument pos:start="150:47" pos:end="150:50"><expr pos:start="150:47" pos:end="150:50"><name pos:start="150:47" pos:end="150:50">copy</name></expr></argument>, <argument pos:start="150:53" pos:end="150:53"><expr pos:start="150:53" pos:end="150:53"><literal type="number" pos:start="150:53" pos:end="150:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="152:11" pos:end="174:9">else <block pos:start="152:16" pos:end="174:9">{<block_content pos:start="154:13" pos:end="172:52">

            <expr_stmt pos:start="154:13" pos:end="154:63"><expr pos:start="154:13" pos:end="154:62"><name pos:start="154:13" pos:end="154:27"><name pos:start="154:13" pos:end="154:16">copy</name><operator pos:start="154:17" pos:end="154:18">-&gt;</operator><name pos:start="154:19" pos:end="154:27">priv_data</name></name> <operator pos:start="154:29" pos:end="154:29">=</operator> <call pos:start="154:31" pos:end="154:62"><name pos:start="154:31" pos:end="154:39">av_malloc</name><argument_list pos:start="154:40" pos:end="154:62">(<argument pos:start="154:41" pos:end="154:61"><expr pos:start="154:41" pos:end="154:61"><name pos:start="154:41" pos:end="154:61"><name pos:start="154:41" pos:end="154:45">codec</name><operator pos:start="154:46" pos:end="154:47">-&gt;</operator><name pos:start="154:48" pos:end="154:61">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="156:13" pos:end="162:13"><if pos:start="156:13" pos:end="162:13">if <condition pos:start="156:16" pos:end="156:33">(<expr pos:start="156:17" pos:end="156:32"><operator pos:start="156:17" pos:end="156:17">!</operator><name pos:start="156:18" pos:end="156:32"><name pos:start="156:18" pos:end="156:21">copy</name><operator pos:start="156:22" pos:end="156:23">-&gt;</operator><name pos:start="156:24" pos:end="156:32">priv_data</name></name></expr>)</condition> <block pos:start="156:35" pos:end="162:13">{<block_content pos:start="158:17" pos:end="160:27">

                <expr_stmt pos:start="158:17" pos:end="158:38"><expr pos:start="158:17" pos:end="158:37"><name pos:start="158:17" pos:end="158:19">err</name> <operator pos:start="158:21" pos:end="158:21">=</operator> <call pos:start="158:23" pos:end="158:37"><name pos:start="158:23" pos:end="158:29">AVERROR</name><argument_list pos:start="158:30" pos:end="158:37">(<argument pos:start="158:31" pos:end="158:36"><expr pos:start="158:31" pos:end="158:36"><name pos:start="158:31" pos:end="158:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="160:17" pos:end="160:27">goto <name pos:start="160:22" pos:end="160:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="164:13" pos:end="164:75"><expr pos:start="164:13" pos:end="164:74"><call pos:start="164:13" pos:end="164:74"><name pos:start="164:13" pos:end="164:18">memcpy</name><argument_list pos:start="164:19" pos:end="164:74">(<argument pos:start="164:20" pos:end="164:34"><expr pos:start="164:20" pos:end="164:34"><name pos:start="164:20" pos:end="164:34"><name pos:start="164:20" pos:end="164:23">copy</name><operator pos:start="164:24" pos:end="164:25">-&gt;</operator><name pos:start="164:26" pos:end="164:34">priv_data</name></name></expr></argument>, <argument pos:start="164:37" pos:end="164:50"><expr pos:start="164:37" pos:end="164:50"><name pos:start="164:37" pos:end="164:50"><name pos:start="164:37" pos:end="164:39">src</name><operator pos:start="164:40" pos:end="164:41">-&gt;</operator><name pos:start="164:42" pos:end="164:50">priv_data</name></name></expr></argument>, <argument pos:start="164:53" pos:end="164:73"><expr pos:start="164:53" pos:end="164:73"><name pos:start="164:53" pos:end="164:73"><name pos:start="164:53" pos:end="164:57">codec</name><operator pos:start="164:58" pos:end="164:59">-&gt;</operator><name pos:start="164:60" pos:end="164:73">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="166:13" pos:end="166:40"><expr pos:start="166:13" pos:end="166:39"><name pos:start="166:13" pos:end="166:35"><name pos:start="166:13" pos:end="166:16">copy</name><operator pos:start="166:17" pos:end="166:18">-&gt;</operator><name pos:start="166:19" pos:end="166:26">internal</name><operator pos:start="166:27" pos:end="166:28">-&gt;</operator><name pos:start="166:29" pos:end="166:35">is_copy</name></name> <operator pos:start="166:37" pos:end="166:37">=</operator> <literal type="number" pos:start="166:39" pos:end="166:39">1</literal></expr>;</expr_stmt>



            <if_stmt pos:start="170:13" pos:end="172:52"><if pos:start="170:13" pos:end="172:52">if <condition pos:start="170:16" pos:end="170:40">(<expr pos:start="170:17" pos:end="170:39"><name pos:start="170:17" pos:end="170:39"><name pos:start="170:17" pos:end="170:21">codec</name><operator pos:start="170:22" pos:end="170:23">-&gt;</operator><name pos:start="170:24" pos:end="170:39">init_thread_copy</name></name></expr>)</condition><block type="pseudo" pos:start="172:17" pos:end="172:52"><block_content pos:start="172:17" pos:end="172:52">

                <expr_stmt pos:start="172:17" pos:end="172:52"><expr pos:start="172:17" pos:end="172:51"><name pos:start="172:17" pos:end="172:19">err</name> <operator pos:start="172:21" pos:end="172:21">=</operator> <call pos:start="172:23" pos:end="172:51"><name pos:start="172:23" pos:end="172:45"><name pos:start="172:23" pos:end="172:27">codec</name><operator pos:start="172:28" pos:end="172:29">-&gt;</operator><name pos:start="172:30" pos:end="172:45">init_thread_copy</name></name><argument_list pos:start="172:46" pos:end="172:51">(<argument pos:start="172:47" pos:end="172:50"><expr pos:start="172:47" pos:end="172:50"><name pos:start="172:47" pos:end="172:50">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="178:9" pos:end="178:28"><if pos:start="178:9" pos:end="178:28">if <condition pos:start="178:12" pos:end="178:16">(<expr pos:start="178:13" pos:end="178:15"><name pos:start="178:13" pos:end="178:15">err</name></expr>)</condition><block type="pseudo" pos:start="178:18" pos:end="178:28"><block_content pos:start="178:18" pos:end="178:28"> <goto pos:start="178:18" pos:end="178:28">goto <name pos:start="178:23" pos:end="178:27">error</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="182:9" pos:end="184:31"><if pos:start="182:9" pos:end="184:31">if <condition pos:start="182:12" pos:end="182:70">(<expr pos:start="182:13" pos:end="182:69"><operator pos:start="182:13" pos:end="182:13">!</operator><call pos:start="182:14" pos:end="182:69"><name pos:start="182:14" pos:end="182:27">pthread_create</name><argument_list pos:start="182:28" pos:end="182:69">(<argument pos:start="182:29" pos:end="182:38"><expr pos:start="182:29" pos:end="182:38"><operator pos:start="182:29" pos:end="182:29">&amp;</operator><name pos:start="182:30" pos:end="182:38"><name pos:start="182:30" pos:end="182:30">p</name><operator pos:start="182:31" pos:end="182:32">-&gt;</operator><name pos:start="182:33" pos:end="182:38">thread</name></name></expr></argument>, <argument pos:start="182:41" pos:end="182:44"><expr pos:start="182:41" pos:end="182:44"><name pos:start="182:41" pos:end="182:44">NULL</name></expr></argument>, <argument pos:start="182:47" pos:end="182:65"><expr pos:start="182:47" pos:end="182:65"><name pos:start="182:47" pos:end="182:65">frame_worker_thread</name></expr></argument>, <argument pos:start="182:68" pos:end="182:68"><expr pos:start="182:68" pos:end="182:68"><name pos:start="182:68" pos:end="182:68">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="184:13" pos:end="184:31"><block_content pos:start="184:13" pos:end="184:31">

            <expr_stmt pos:start="184:13" pos:end="184:31"><expr pos:start="184:13" pos:end="184:30"><name pos:start="184:13" pos:end="184:26"><name pos:start="184:13" pos:end="184:13">p</name><operator pos:start="184:14" pos:end="184:15">-&gt;</operator><name pos:start="184:16" pos:end="184:26">thread_init</name></name> <operator pos:start="184:28" pos:end="184:28">=</operator> <literal type="number" pos:start="184:30" pos:end="184:30">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="190:5" pos:end="190:13">return <expr pos:start="190:12" pos:end="190:12"><literal type="number" pos:start="190:12" pos:end="190:12">0</literal></expr>;</return>



<label pos:start="194:1" pos:end="194:6"><name pos:start="194:1" pos:end="194:5">error</name>:</label>

    <expr_stmt pos:start="196:5" pos:end="196:37"><expr pos:start="196:5" pos:end="196:36"><call pos:start="196:5" pos:end="196:36"><name pos:start="196:5" pos:end="196:24">ff_frame_thread_free</name><argument_list pos:start="196:25" pos:end="196:36">(<argument pos:start="196:26" pos:end="196:30"><expr pos:start="196:26" pos:end="196:30"><name pos:start="196:26" pos:end="196:30">avctx</name></expr></argument>, <argument pos:start="196:33" pos:end="196:35"><expr pos:start="196:33" pos:end="196:35"><name pos:start="196:33" pos:end="196:33">i</name><operator pos:start="196:34" pos:end="196:34">+</operator><literal type="number" pos:start="196:35" pos:end="196:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="200:5" pos:end="200:15">return <expr pos:start="200:12" pos:end="200:14"><name pos:start="200:12" pos:end="200:14">err</name></expr>;</return>

</block_content>}</block></function></unit>
