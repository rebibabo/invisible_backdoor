<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14424.c" pos:tabs="8"><function pos:start="1:1" pos:end="203:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">print_insn_xtensa</name><parameter_list pos:start="1:22" pos:end="1:69">(<parameter pos:start="1:23" pos:end="1:37"><decl pos:start="1:23" pos:end="1:37"><type pos:start="1:23" pos:end="1:37"><name pos:start="1:23" pos:end="1:29">bfd_vma</name></type> <name pos:start="1:31" pos:end="1:37">memaddr</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:68"><decl pos:start="1:40" pos:end="1:68"><type pos:start="1:40" pos:end="1:68"><name pos:start="1:40" pos:end="1:62"><name pos:start="1:40" pos:end="1:45">struct</name> <name pos:start="1:47" pos:end="1:62">disassemble_info</name></name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">info</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="203:1">{<block_content pos:start="5:5" pos:end="201:15">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">xtensa_isa</name></type> <name pos:start="5:16" pos:end="5:18">isa</name> <init pos:start="5:20" pos:end="5:39">= <expr pos:start="5:22" pos:end="5:39"><name pos:start="5:22" pos:end="5:39"><name pos:start="5:22" pos:end="5:25">info</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:39">private_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:18">xtensa_insnbuf</name></type> <name pos:start="7:20" pos:end="7:26">insnbuf</name> <init pos:start="7:28" pos:end="7:54">= <expr pos:start="7:30" pos:end="7:54"><call pos:start="7:30" pos:end="7:54"><name pos:start="7:30" pos:end="7:49">xtensa_insnbuf_alloc</name><argument_list pos:start="7:50" pos:end="7:54">(<argument pos:start="7:51" pos:end="7:53"><expr pos:start="7:51" pos:end="7:53"><name pos:start="7:51" pos:end="7:53">isa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:55"><decl pos:start="9:5" pos:end="9:54"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18">xtensa_insnbuf</name></type> <name pos:start="9:20" pos:end="9:26">slotbuf</name> <init pos:start="9:28" pos:end="9:54">= <expr pos:start="9:30" pos:end="9:54"><call pos:start="9:30" pos:end="9:54"><name pos:start="9:30" pos:end="9:49">xtensa_insnbuf_alloc</name><argument_list pos:start="9:50" pos:end="9:54">(<argument pos:start="9:51" pos:end="9:53"><expr pos:start="9:51" pos:end="9:53"><name pos:start="9:51" pos:end="9:53">isa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">bfd_byte</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:20">buffer</name> <init pos:start="11:22" pos:end="11:34">= <expr pos:start="11:24" pos:end="11:34"><call pos:start="11:24" pos:end="11:34"><name pos:start="11:24" pos:end="11:31">g_malloc</name><argument_list pos:start="11:32" pos:end="11:34">(<argument pos:start="11:33" pos:end="11:33"><expr pos:start="11:33" pos:end="11:33"><literal type="number" pos:start="11:33" pos:end="11:33">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:66"><decl pos:start="13:5" pos:end="13:65"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">status</name> <init pos:start="13:16" pos:end="13:65">= <expr pos:start="13:18" pos:end="13:65"><call pos:start="13:18" pos:end="13:65"><name pos:start="13:18" pos:end="13:39"><name pos:start="13:18" pos:end="13:21">info</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:39">read_memory_func</name></name><argument_list pos:start="13:40" pos:end="13:65">(<argument pos:start="13:41" pos:end="13:47"><expr pos:start="13:41" pos:end="13:47"><name pos:start="13:41" pos:end="13:47">memaddr</name></expr></argument>, <argument pos:start="13:50" pos:end="13:55"><expr pos:start="13:50" pos:end="13:55"><name pos:start="13:50" pos:end="13:55">buffer</name></expr></argument>, <argument pos:start="13:58" pos:end="13:58"><expr pos:start="13:58" pos:end="13:58"><literal type="number" pos:start="13:58" pos:end="13:58">1</literal></expr></argument>, <argument pos:start="13:61" pos:end="13:64"><expr pos:start="13:61" pos:end="13:64"><name pos:start="13:61" pos:end="13:64">info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">xtensa_format</name></type> <name pos:start="15:19" pos:end="15:21">fmt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">unsigned</name></type> <name pos:start="17:14" pos:end="17:17">slot</name></decl>, <decl pos:start="17:20" pos:end="17:24"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:20" pos:end="17:24">slots</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">unsigned</name></type> <name pos:start="19:14" pos:end="19:16">len</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:15">(<expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:14">status</name></expr>)</condition> <block pos:start="23:17" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:17">

        <expr_stmt pos:start="25:9" pos:end="25:55"><expr pos:start="25:9" pos:end="25:54"><call pos:start="25:9" pos:end="25:54"><name pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:12">info</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:31">memory_error_func</name></name><argument_list pos:start="25:32" pos:end="25:54">(<argument pos:start="25:33" pos:end="25:38"><expr pos:start="25:33" pos:end="25:38"><name pos:start="25:33" pos:end="25:38">status</name></expr></argument>, <argument pos:start="25:41" pos:end="25:47"><expr pos:start="25:41" pos:end="25:47"><name pos:start="25:41" pos:end="25:47">memaddr</name></expr></argument>, <argument pos:start="25:50" pos:end="25:53"><expr pos:start="25:50" pos:end="25:53"><name pos:start="25:50" pos:end="25:53">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:17"><expr pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:11">len</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <operator pos:start="27:15" pos:end="27:15">-</operator><literal type="number" pos:start="27:16" pos:end="27:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:17">goto <name pos:start="29:14" pos:end="29:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:52"><expr pos:start="33:5" pos:end="33:51"><name pos:start="33:5" pos:end="33:7">len</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:51"><name pos:start="33:11" pos:end="33:38">xtensa_isa_length_from_chars</name><argument_list pos:start="33:39" pos:end="33:51">(<argument pos:start="33:40" pos:end="33:42"><expr pos:start="33:40" pos:end="33:42"><name pos:start="33:40" pos:end="33:42">isa</name></expr></argument>, <argument pos:start="33:45" pos:end="33:50"><expr pos:start="33:45" pos:end="33:50"><name pos:start="33:45" pos:end="33:50">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:32">(<expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:11">len</name> <operator pos:start="35:13" pos:end="35:14">==</operator> <name pos:start="35:16" pos:end="35:31">XTENSA_UNDEFINED</name></expr>)</condition> <block pos:start="35:34" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:17">

        <expr_stmt pos:start="37:9" pos:end="37:68"><expr pos:start="37:9" pos:end="37:67"><call pos:start="37:9" pos:end="37:67"><name pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:12">info</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:26">fprintf_func</name></name><argument_list pos:start="37:27" pos:end="37:67">(<argument pos:start="37:28" pos:end="37:39"><expr pos:start="37:28" pos:end="37:39"><name pos:start="37:28" pos:end="37:39"><name pos:start="37:28" pos:end="37:31">info</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:39">stream</name></name></expr></argument>, <argument pos:start="37:42" pos:end="37:55"><expr pos:start="37:42" pos:end="37:55"><literal type="string" pos:start="37:42" pos:end="37:55">".byte 0x%02x"</literal></expr></argument>, <argument pos:start="37:58" pos:end="37:66"><expr pos:start="37:58" pos:end="37:66"><name pos:start="37:58" pos:end="37:66"><name pos:start="37:58" pos:end="37:63">buffer</name><index pos:start="37:64" pos:end="37:66">[<expr pos:start="37:65" pos:end="37:65"><literal type="number" pos:start="37:65" pos:end="37:65">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:16"><expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">len</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <literal type="number" pos:start="39:15" pos:end="39:15">1</literal></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:36"><expr pos:start="45:5" pos:end="45:35"><name pos:start="45:5" pos:end="45:10">buffer</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <call pos:start="45:14" pos:end="45:35"><name pos:start="45:14" pos:end="45:22">g_realloc</name><argument_list pos:start="45:23" pos:end="45:35">(<argument pos:start="45:24" pos:end="45:29"><expr pos:start="45:24" pos:end="45:29"><name pos:start="45:24" pos:end="45:29">buffer</name></expr></argument>, <argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:76"><expr pos:start="47:5" pos:end="47:75"><name pos:start="47:5" pos:end="47:10">status</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <call pos:start="47:14" pos:end="47:75"><name pos:start="47:14" pos:end="47:35"><name pos:start="47:14" pos:end="47:17">info</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:35">read_memory_func</name></name><argument_list pos:start="47:36" pos:end="47:75">(<argument pos:start="47:37" pos:end="47:47"><expr pos:start="47:37" pos:end="47:47"><name pos:start="47:37" pos:end="47:43">memaddr</name> <operator pos:start="47:45" pos:end="47:45">+</operator> <literal type="number" pos:start="47:47" pos:end="47:47">1</literal></expr></argument>, <argument pos:start="47:50" pos:end="47:59"><expr pos:start="47:50" pos:end="47:59"><name pos:start="47:50" pos:end="47:55">buffer</name> <operator pos:start="47:57" pos:end="47:57">+</operator> <literal type="number" pos:start="47:59" pos:end="47:59">1</literal></expr></argument>, <argument pos:start="47:62" pos:end="47:68"><expr pos:start="47:62" pos:end="47:68"><name pos:start="47:62" pos:end="47:64">len</name> <operator pos:start="47:66" pos:end="47:66">-</operator> <literal type="number" pos:start="47:68" pos:end="47:68">1</literal></expr></argument>, <argument pos:start="47:71" pos:end="47:74"><expr pos:start="47:71" pos:end="47:74"><name pos:start="47:71" pos:end="47:74">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="59:5"><if pos:start="49:5" pos:end="59:5">if <condition pos:start="49:8" pos:end="49:15">(<expr pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:14">status</name></expr>)</condition> <block pos:start="49:17" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:17">

        <expr_stmt pos:start="51:9" pos:end="51:68"><expr pos:start="51:9" pos:end="51:67"><call pos:start="51:9" pos:end="51:67"><name pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:12">info</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:26">fprintf_func</name></name><argument_list pos:start="51:27" pos:end="51:67">(<argument pos:start="51:28" pos:end="51:39"><expr pos:start="51:28" pos:end="51:39"><name pos:start="51:28" pos:end="51:39"><name pos:start="51:28" pos:end="51:31">info</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:39">stream</name></name></expr></argument>, <argument pos:start="51:42" pos:end="51:55"><expr pos:start="51:42" pos:end="51:55"><literal type="string" pos:start="51:42" pos:end="51:55">".byte 0x%02x"</literal></expr></argument>, <argument pos:start="51:58" pos:end="51:66"><expr pos:start="51:58" pos:end="51:66"><name pos:start="51:58" pos:end="51:66"><name pos:start="51:58" pos:end="51:63">buffer</name><index pos:start="51:64" pos:end="51:66">[<expr pos:start="51:65" pos:end="51:65"><literal type="number" pos:start="51:65" pos:end="51:65">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:59"><expr pos:start="53:9" pos:end="53:58"><call pos:start="53:9" pos:end="53:58"><name pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:12">info</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:31">memory_error_func</name></name><argument_list pos:start="53:32" pos:end="53:58">(<argument pos:start="53:33" pos:end="53:38"><expr pos:start="53:33" pos:end="53:38"><name pos:start="53:33" pos:end="53:38">status</name></expr></argument>, <argument pos:start="53:41" pos:end="53:51"><expr pos:start="53:41" pos:end="53:51"><name pos:start="53:41" pos:end="53:47">memaddr</name> <operator pos:start="53:49" pos:end="53:49">+</operator> <literal type="number" pos:start="53:51" pos:end="53:51">1</literal></expr></argument>, <argument pos:start="53:54" pos:end="53:57"><expr pos:start="53:54" pos:end="53:57"><name pos:start="53:54" pos:end="53:57">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:16"><expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">len</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <literal type="number" pos:start="55:15" pos:end="55:15">1</literal></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:17">goto <name pos:start="57:14" pos:end="57:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:57"><expr pos:start="63:5" pos:end="63:56"><call pos:start="63:5" pos:end="63:56"><name pos:start="63:5" pos:end="63:29">xtensa_insnbuf_from_chars</name><argument_list pos:start="63:30" pos:end="63:56">(<argument pos:start="63:31" pos:end="63:33"><expr pos:start="63:31" pos:end="63:33"><name pos:start="63:31" pos:end="63:33">isa</name></expr></argument>, <argument pos:start="63:36" pos:end="63:42"><expr pos:start="63:36" pos:end="63:42"><name pos:start="63:36" pos:end="63:42">insnbuf</name></expr></argument>, <argument pos:start="63:45" pos:end="63:50"><expr pos:start="63:45" pos:end="63:50"><name pos:start="63:45" pos:end="63:50">buffer</name></expr></argument>, <argument pos:start="63:53" pos:end="63:55"><expr pos:start="63:53" pos:end="63:55"><name pos:start="63:53" pos:end="63:55">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:45"><expr pos:start="65:5" pos:end="65:44"><name pos:start="65:5" pos:end="65:7">fmt</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:44"><name pos:start="65:11" pos:end="65:30">xtensa_format_decode</name><argument_list pos:start="65:31" pos:end="65:44">(<argument pos:start="65:32" pos:end="65:34"><expr pos:start="65:32" pos:end="65:34"><name pos:start="65:32" pos:end="65:34">isa</name></expr></argument>, <argument pos:start="65:37" pos:end="65:43"><expr pos:start="65:37" pos:end="65:43"><name pos:start="65:37" pos:end="65:43">insnbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="83:5"><if pos:start="67:5" pos:end="83:5">if <condition pos:start="67:8" pos:end="67:32">(<expr pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:11">fmt</name> <operator pos:start="67:13" pos:end="67:14">==</operator> <name pos:start="67:16" pos:end="67:31">XTENSA_UNDEFINED</name></expr>)</condition> <block pos:start="67:34" pos:end="83:5">{<block_content pos:start="69:9" pos:end="81:17">

        <decl_stmt pos:start="69:9" pos:end="69:19"><decl pos:start="69:9" pos:end="69:18"><type pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:16">unsigned</name></type> <name pos:start="69:18" pos:end="69:18">i</name></decl>;</decl_stmt>



        <for pos:start="73:9" pos:end="79:9">for <control pos:start="73:13" pos:end="73:33">(<init pos:start="73:14" pos:end="73:19"><expr pos:start="73:14" pos:end="73:18"><name pos:start="73:14" pos:end="73:14">i</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">0</literal></expr>;</init> <condition pos:start="73:21" pos:end="73:28"><expr pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:21">i</name> <operator pos:start="73:23" pos:end="73:23">&lt;</operator> <name pos:start="73:25" pos:end="73:27">len</name></expr>;</condition> <incr pos:start="73:30" pos:end="73:32"><expr pos:start="73:30" pos:end="73:32"><operator pos:start="73:30" pos:end="73:31">++</operator><name pos:start="73:32" pos:end="73:32">i</name></expr></incr>)</control> <block pos:start="73:35" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:63">

            <expr_stmt pos:start="75:13" pos:end="77:63"><expr pos:start="75:13" pos:end="77:62"><call pos:start="75:13" pos:end="77:62"><name pos:start="75:13" pos:end="75:30"><name pos:start="75:13" pos:end="75:16">info</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:30">fprintf_func</name></name><argument_list pos:start="75:31" pos:end="77:62">(<argument pos:start="75:32" pos:end="75:43"><expr pos:start="75:32" pos:end="75:43"><name pos:start="75:32" pos:end="75:43"><name pos:start="75:32" pos:end="75:35">info</name><operator pos:start="75:36" pos:end="75:37">-&gt;</operator><name pos:start="75:38" pos:end="75:43">stream</name></name></expr></argument>, <argument pos:start="75:46" pos:end="75:56"><expr pos:start="75:46" pos:end="75:56"><literal type="string" pos:start="75:46" pos:end="75:56">"%s 0x%02x"</literal></expr></argument>,

                               <argument pos:start="77:32" pos:end="77:50"><expr pos:start="77:32" pos:end="77:50"><ternary pos:start="77:32" pos:end="77:50"><condition pos:start="77:32" pos:end="77:34"><expr pos:start="77:32" pos:end="77:32"><name pos:start="77:32" pos:end="77:32">i</name></expr> ?</condition><then pos:start="77:36" pos:end="77:39"> <expr pos:start="77:36" pos:end="77:39"><literal type="string" pos:start="77:36" pos:end="77:39">", "</literal></expr> </then><else pos:start="77:41" pos:end="77:50">: <expr pos:start="77:43" pos:end="77:50"><literal type="string" pos:start="77:43" pos:end="77:50">".byte "</literal></expr></else></ternary></expr></argument>, <argument pos:start="77:53" pos:end="77:61"><expr pos:start="77:53" pos:end="77:61"><name pos:start="77:53" pos:end="77:61"><name pos:start="77:53" pos:end="77:58">buffer</name><index pos:start="77:59" pos:end="77:61">[<expr pos:start="77:60" pos:end="77:60"><name pos:start="77:60" pos:end="77:60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <goto pos:start="81:9" pos:end="81:17">goto <name pos:start="81:14" pos:end="81:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:46"><expr pos:start="85:5" pos:end="85:45"><name pos:start="85:5" pos:end="85:9">slots</name> <operator pos:start="85:11" pos:end="85:11">=</operator> <call pos:start="85:13" pos:end="85:45"><name pos:start="85:13" pos:end="85:35">xtensa_format_num_slots</name><argument_list pos:start="85:36" pos:end="85:45">(<argument pos:start="85:37" pos:end="85:39"><expr pos:start="85:37" pos:end="85:39"><name pos:start="85:37" pos:end="85:39">isa</name></expr></argument>, <argument pos:start="85:42" pos:end="85:44"><expr pos:start="85:42" pos:end="85:44"><name pos:start="85:42" pos:end="85:44">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:18">(<expr pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:13">slots</name> <operator pos:start="89:15" pos:end="89:15">&gt;</operator> <literal type="number" pos:start="89:17" pos:end="89:17">1</literal></expr>)</condition> <block pos:start="89:20" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:47">

        <expr_stmt pos:start="91:9" pos:end="91:47"><expr pos:start="91:9" pos:end="91:46"><call pos:start="91:9" pos:end="91:46"><name pos:start="91:9" pos:end="91:26"><name pos:start="91:9" pos:end="91:12">info</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:26">fprintf_func</name></name><argument_list pos:start="91:27" pos:end="91:46">(<argument pos:start="91:28" pos:end="91:39"><expr pos:start="91:28" pos:end="91:39"><name pos:start="91:28" pos:end="91:39"><name pos:start="91:28" pos:end="91:31">info</name><operator pos:start="91:32" pos:end="91:33">-&gt;</operator><name pos:start="91:34" pos:end="91:39">stream</name></name></expr></argument>, <argument pos:start="91:42" pos:end="91:45"><expr pos:start="91:42" pos:end="91:45"><literal type="string" pos:start="91:42" pos:end="91:45">"{ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="97:5" pos:end="181:5">for <control pos:start="97:9" pos:end="97:40">(<init pos:start="97:10" pos:end="97:18"><expr pos:start="97:10" pos:end="97:17"><name pos:start="97:10" pos:end="97:13">slot</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <literal type="number" pos:start="97:17" pos:end="97:17">0</literal></expr>;</init> <condition pos:start="97:20" pos:end="97:32"><expr pos:start="97:20" pos:end="97:31"><name pos:start="97:20" pos:end="97:23">slot</name> <operator pos:start="97:25" pos:end="97:25">&lt;</operator> <name pos:start="97:27" pos:end="97:31">slots</name></expr>;</condition> <incr pos:start="97:34" pos:end="97:39"><expr pos:start="97:34" pos:end="97:39"><operator pos:start="97:34" pos:end="97:35">++</operator><name pos:start="97:36" pos:end="97:39">slot</name></expr></incr>)</control> <block pos:start="97:42" pos:end="181:5">{<block_content pos:start="99:9" pos:end="179:9">

        <decl_stmt pos:start="99:9" pos:end="99:26"><decl pos:start="99:9" pos:end="99:25"><type pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:21">xtensa_opcode</name></type> <name pos:start="99:23" pos:end="99:25">opc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="101:9" pos:end="101:36"><decl pos:start="101:9" pos:end="101:21"><type pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:16">unsigned</name></type> <name pos:start="101:18" pos:end="101:21">opnd</name></decl>, <decl pos:start="101:24" pos:end="101:28"><type ref="prev" pos:start="101:9" pos:end="101:16"/><name pos:start="101:24" pos:end="101:28">vopnd</name></decl>, <decl pos:start="101:31" pos:end="101:35"><type ref="prev" pos:start="101:9" pos:end="101:16"/><name pos:start="101:31" pos:end="101:35">opnds</name></decl>;</decl_stmt>



        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:17">(<expr pos:start="105:13" pos:end="105:16"><name pos:start="105:13" pos:end="105:16">slot</name></expr>)</condition> <block pos:start="105:19" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:51">

            <expr_stmt pos:start="107:13" pos:end="107:51"><expr pos:start="107:13" pos:end="107:50"><call pos:start="107:13" pos:end="107:50"><name pos:start="107:13" pos:end="107:30"><name pos:start="107:13" pos:end="107:16">info</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:30">fprintf_func</name></name><argument_list pos:start="107:31" pos:end="107:50">(<argument pos:start="107:32" pos:end="107:43"><expr pos:start="107:32" pos:end="107:43"><name pos:start="107:32" pos:end="107:43"><name pos:start="107:32" pos:end="107:35">info</name><operator pos:start="107:36" pos:end="107:37">-&gt;</operator><name pos:start="107:38" pos:end="107:43">stream</name></name></expr></argument>, <argument pos:start="107:46" pos:end="107:49"><expr pos:start="107:46" pos:end="107:49"><literal type="string" pos:start="107:46" pos:end="107:49">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:65"><expr pos:start="111:9" pos:end="111:64"><call pos:start="111:9" pos:end="111:64"><name pos:start="111:9" pos:end="111:30">xtensa_format_get_slot</name><argument_list pos:start="111:31" pos:end="111:64">(<argument pos:start="111:32" pos:end="111:34"><expr pos:start="111:32" pos:end="111:34"><name pos:start="111:32" pos:end="111:34">isa</name></expr></argument>, <argument pos:start="111:37" pos:end="111:39"><expr pos:start="111:37" pos:end="111:39"><name pos:start="111:37" pos:end="111:39">fmt</name></expr></argument>, <argument pos:start="111:42" pos:end="111:45"><expr pos:start="111:42" pos:end="111:45"><name pos:start="111:42" pos:end="111:45">slot</name></expr></argument>, <argument pos:start="111:48" pos:end="111:54"><expr pos:start="111:48" pos:end="111:54"><name pos:start="111:48" pos:end="111:54">insnbuf</name></expr></argument>, <argument pos:start="111:57" pos:end="111:63"><expr pos:start="111:57" pos:end="111:63"><name pos:start="111:57" pos:end="111:63">slotbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:60"><expr pos:start="113:9" pos:end="113:59"><name pos:start="113:9" pos:end="113:11">opc</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <call pos:start="113:15" pos:end="113:59"><name pos:start="113:15" pos:end="113:34">xtensa_opcode_decode</name><argument_list pos:start="113:35" pos:end="113:59">(<argument pos:start="113:36" pos:end="113:38"><expr pos:start="113:36" pos:end="113:38"><name pos:start="113:36" pos:end="113:38">isa</name></expr></argument>, <argument pos:start="113:41" pos:end="113:43"><expr pos:start="113:41" pos:end="113:43"><name pos:start="113:41" pos:end="113:43">fmt</name></expr></argument>, <argument pos:start="113:46" pos:end="113:49"><expr pos:start="113:46" pos:end="113:49"><name pos:start="113:46" pos:end="113:49">slot</name></expr></argument>, <argument pos:start="113:52" pos:end="113:58"><expr pos:start="113:52" pos:end="113:58"><name pos:start="113:52" pos:end="113:58">slotbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:36">(<expr pos:start="115:13" pos:end="115:35"><name pos:start="115:13" pos:end="115:15">opc</name> <operator pos:start="115:17" pos:end="115:18">==</operator> <name pos:start="115:20" pos:end="115:35">XTENSA_UNDEFINED</name></expr>)</condition> <block pos:start="115:38" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:21">

            <expr_stmt pos:start="117:13" pos:end="117:52"><expr pos:start="117:13" pos:end="117:51"><call pos:start="117:13" pos:end="117:51"><name pos:start="117:13" pos:end="117:30"><name pos:start="117:13" pos:end="117:16">info</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:30">fprintf_func</name></name><argument_list pos:start="117:31" pos:end="117:51">(<argument pos:start="117:32" pos:end="117:43"><expr pos:start="117:32" pos:end="117:43"><name pos:start="117:32" pos:end="117:43"><name pos:start="117:32" pos:end="117:35">info</name><operator pos:start="117:36" pos:end="117:37">-&gt;</operator><name pos:start="117:38" pos:end="117:43">stream</name></name></expr></argument>, <argument pos:start="117:46" pos:end="117:50"><expr pos:start="117:46" pos:end="117:50"><literal type="string" pos:start="117:46" pos:end="117:50">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="119:13" pos:end="119:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:53"><expr pos:start="123:9" pos:end="123:52"><name pos:start="123:9" pos:end="123:13">opnds</name> <operator pos:start="123:15" pos:end="123:15">=</operator> <call pos:start="123:17" pos:end="123:52"><name pos:start="123:17" pos:end="123:42">xtensa_opcode_num_operands</name><argument_list pos:start="123:43" pos:end="123:52">(<argument pos:start="123:44" pos:end="123:46"><expr pos:start="123:44" pos:end="123:46"><name pos:start="123:44" pos:end="123:46">isa</name></expr></argument>, <argument pos:start="123:49" pos:end="123:51"><expr pos:start="123:49" pos:end="123:51"><name pos:start="123:49" pos:end="123:51">opc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:77"><expr pos:start="127:9" pos:end="127:76"><call pos:start="127:9" pos:end="127:76"><name pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:12">info</name><operator pos:start="127:13" pos:end="127:14">-&gt;</operator><name pos:start="127:15" pos:end="127:26">fprintf_func</name></name><argument_list pos:start="127:27" pos:end="127:76">(<argument pos:start="127:28" pos:end="127:39"><expr pos:start="127:28" pos:end="127:39"><name pos:start="127:28" pos:end="127:39"><name pos:start="127:28" pos:end="127:31">info</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:39">stream</name></name></expr></argument>, <argument pos:start="127:42" pos:end="127:45"><expr pos:start="127:42" pos:end="127:45"><literal type="string" pos:start="127:42" pos:end="127:45">"%s"</literal></expr></argument>, <argument pos:start="127:48" pos:end="127:75"><expr pos:start="127:48" pos:end="127:75"><call pos:start="127:48" pos:end="127:75"><name pos:start="127:48" pos:end="127:65">xtensa_opcode_name</name><argument_list pos:start="127:66" pos:end="127:75">(<argument pos:start="127:67" pos:end="127:69"><expr pos:start="127:67" pos:end="127:69"><name pos:start="127:67" pos:end="127:69">isa</name></expr></argument>, <argument pos:start="127:72" pos:end="127:74"><expr pos:start="127:72" pos:end="127:74"><name pos:start="127:72" pos:end="127:74">opc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="131:9" pos:end="179:9">for <control pos:start="131:13" pos:end="131:52">(<init pos:start="131:14" pos:end="131:30"><expr pos:start="131:14" pos:end="131:29"><name pos:start="131:14" pos:end="131:17">opnd</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <name pos:start="131:21" pos:end="131:25">vopnd</name> <operator pos:start="131:27" pos:end="131:27">=</operator> <literal type="number" pos:start="131:29" pos:end="131:29">0</literal></expr>;</init> <condition pos:start="131:32" pos:end="131:44"><expr pos:start="131:32" pos:end="131:43"><name pos:start="131:32" pos:end="131:35">opnd</name> <operator pos:start="131:37" pos:end="131:37">&lt;</operator> <name pos:start="131:39" pos:end="131:43">opnds</name></expr>;</condition> <incr pos:start="131:46" pos:end="131:51"><expr pos:start="131:46" pos:end="131:51"><operator pos:start="131:46" pos:end="131:47">++</operator><name pos:start="131:48" pos:end="131:51">opnd</name></expr></incr>)</control> <block pos:start="131:54" pos:end="179:9">{<block_content pos:start="133:13" pos:end="177:13">

            <if_stmt pos:start="133:13" pos:end="177:13"><if pos:start="133:13" pos:end="177:13">if <condition pos:start="133:16" pos:end="133:58">(<expr pos:start="133:17" pos:end="133:57"><call pos:start="133:17" pos:end="133:57"><name pos:start="133:17" pos:end="133:41">xtensa_operand_is_visible</name><argument_list pos:start="133:42" pos:end="133:57">(<argument pos:start="133:43" pos:end="133:45"><expr pos:start="133:43" pos:end="133:45"><name pos:start="133:43" pos:end="133:45">isa</name></expr></argument>, <argument pos:start="133:48" pos:end="133:50"><expr pos:start="133:48" pos:end="133:50"><name pos:start="133:48" pos:end="133:50">opc</name></expr></argument>, <argument pos:start="133:53" pos:end="133:56"><expr pos:start="133:53" pos:end="133:56"><name pos:start="133:53" pos:end="133:56">opnd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:60" pos:end="177:13">{<block_content pos:start="135:17" pos:end="175:24">

                <decl_stmt pos:start="135:17" pos:end="135:39"><decl pos:start="135:17" pos:end="135:38"><type pos:start="135:17" pos:end="135:24"><name pos:start="135:17" pos:end="135:24">uint32_t</name></type> <name pos:start="135:26" pos:end="135:26">v</name> <init pos:start="135:28" pos:end="135:38">= <expr pos:start="135:30" pos:end="135:38"><literal type="number" pos:start="135:30" pos:end="135:38">0xbadc0de</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="137:17" pos:end="137:23"><decl pos:start="137:17" pos:end="137:22"><type pos:start="137:17" pos:end="137:19"><name pos:start="137:17" pos:end="137:19">int</name></type> <name pos:start="137:21" pos:end="137:22">rc</name></decl>;</decl_stmt>



                <expr_stmt pos:start="141:17" pos:end="141:70"><expr pos:start="141:17" pos:end="141:69"><call pos:start="141:17" pos:end="141:69"><name pos:start="141:17" pos:end="141:34"><name pos:start="141:17" pos:end="141:20">info</name><operator pos:start="141:21" pos:end="141:22">-&gt;</operator><name pos:start="141:23" pos:end="141:34">fprintf_func</name></name><argument_list pos:start="141:35" pos:end="141:69">(<argument pos:start="141:36" pos:end="141:47"><expr pos:start="141:36" pos:end="141:47"><name pos:start="141:36" pos:end="141:47"><name pos:start="141:36" pos:end="141:39">info</name><operator pos:start="141:40" pos:end="141:41">-&gt;</operator><name pos:start="141:42" pos:end="141:47">stream</name></name></expr></argument>, <argument pos:start="141:50" pos:end="141:68"><expr pos:start="141:50" pos:end="141:68"><ternary pos:start="141:50" pos:end="141:68"><condition pos:start="141:50" pos:end="141:56"><expr pos:start="141:50" pos:end="141:54"><name pos:start="141:50" pos:end="141:54">vopnd</name></expr> ?</condition><then pos:start="141:58" pos:end="141:61"> <expr pos:start="141:58" pos:end="141:61"><literal type="string" pos:start="141:58" pos:end="141:61">", "</literal></expr> </then><else pos:start="141:63" pos:end="141:68">: <expr pos:start="141:65" pos:end="141:68"><literal type="string" pos:start="141:65" pos:end="141:68">"\t"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="145:54"><expr pos:start="143:17" pos:end="145:53"><call pos:start="143:17" pos:end="145:53"><name pos:start="143:17" pos:end="143:40">xtensa_operand_get_field</name><argument_list pos:start="143:41" pos:end="145:53">(<argument pos:start="143:42" pos:end="143:44"><expr pos:start="143:42" pos:end="143:44"><name pos:start="143:42" pos:end="143:44">isa</name></expr></argument>, <argument pos:start="143:47" pos:end="143:49"><expr pos:start="143:47" pos:end="143:49"><name pos:start="143:47" pos:end="143:49">opc</name></expr></argument>, <argument pos:start="143:52" pos:end="143:55"><expr pos:start="143:52" pos:end="143:55"><name pos:start="143:52" pos:end="143:55">opnd</name></expr></argument>, <argument pos:start="143:58" pos:end="143:60"><expr pos:start="143:58" pos:end="143:60"><name pos:start="143:58" pos:end="143:60">fmt</name></expr></argument>, <argument pos:start="143:63" pos:end="143:66"><expr pos:start="143:63" pos:end="143:66"><name pos:start="143:63" pos:end="143:66">slot</name></expr></argument>,

                                         <argument pos:start="145:42" pos:end="145:48"><expr pos:start="145:42" pos:end="145:48"><name pos:start="145:42" pos:end="145:48">slotbuf</name></expr></argument>, <argument pos:start="145:51" pos:end="145:52"><expr pos:start="145:51" pos:end="145:52"><operator pos:start="145:51" pos:end="145:51">&amp;</operator><name pos:start="145:52" pos:end="145:52">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:63"><expr pos:start="147:17" pos:end="147:62"><name pos:start="147:17" pos:end="147:18">rc</name> <operator pos:start="147:20" pos:end="147:20">=</operator> <call pos:start="147:22" pos:end="147:62"><name pos:start="147:22" pos:end="147:42">xtensa_operand_decode</name><argument_list pos:start="147:43" pos:end="147:62">(<argument pos:start="147:44" pos:end="147:46"><expr pos:start="147:44" pos:end="147:46"><name pos:start="147:44" pos:end="147:46">isa</name></expr></argument>, <argument pos:start="147:49" pos:end="147:51"><expr pos:start="147:49" pos:end="147:51"><name pos:start="147:49" pos:end="147:51">opc</name></expr></argument>, <argument pos:start="147:54" pos:end="147:57"><expr pos:start="147:54" pos:end="147:57"><name pos:start="147:54" pos:end="147:57">opnd</name></expr></argument>, <argument pos:start="147:60" pos:end="147:61"><expr pos:start="147:60" pos:end="147:61"><operator pos:start="147:60" pos:end="147:60">&amp;</operator><name pos:start="147:61" pos:end="147:61">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="149:17" pos:end="173:17"><if pos:start="149:17" pos:end="153:17">if <condition pos:start="149:20" pos:end="149:43">(<expr pos:start="149:21" pos:end="149:42"><name pos:start="149:21" pos:end="149:22">rc</name> <operator pos:start="149:24" pos:end="149:25">==</operator> <name pos:start="149:27" pos:end="149:42">XTENSA_UNDEFINED</name></expr>)</condition> <block pos:start="149:45" pos:end="153:17">{<block_content pos:start="151:21" pos:end="151:60">

                    <expr_stmt pos:start="151:21" pos:end="151:60"><expr pos:start="151:21" pos:end="151:59"><call pos:start="151:21" pos:end="151:59"><name pos:start="151:21" pos:end="151:38"><name pos:start="151:21" pos:end="151:24">info</name><operator pos:start="151:25" pos:end="151:26">-&gt;</operator><name pos:start="151:27" pos:end="151:38">fprintf_func</name></name><argument_list pos:start="151:39" pos:end="151:59">(<argument pos:start="151:40" pos:end="151:51"><expr pos:start="151:40" pos:end="151:51"><name pos:start="151:40" pos:end="151:51"><name pos:start="151:40" pos:end="151:43">info</name><operator pos:start="151:44" pos:end="151:45">-&gt;</operator><name pos:start="151:46" pos:end="151:51">stream</name></name></expr></argument>, <argument pos:start="151:54" pos:end="151:58"><expr pos:start="151:54" pos:end="151:58"><literal type="string" pos:start="151:54" pos:end="151:58">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="153:19" pos:end="163:17">else if <condition pos:start="153:27" pos:end="153:70">(<expr pos:start="153:28" pos:end="153:69"><call pos:start="153:28" pos:end="153:69"><name pos:start="153:28" pos:end="153:53">xtensa_operand_is_register</name><argument_list pos:start="153:54" pos:end="153:69">(<argument pos:start="153:55" pos:end="153:57"><expr pos:start="153:55" pos:end="153:57"><name pos:start="153:55" pos:end="153:57">isa</name></expr></argument>, <argument pos:start="153:60" pos:end="153:62"><expr pos:start="153:60" pos:end="153:62"><name pos:start="153:60" pos:end="153:62">opc</name></expr></argument>, <argument pos:start="153:65" pos:end="153:68"><expr pos:start="153:65" pos:end="153:68"><name pos:start="153:65" pos:end="153:68">opnd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="153:72" pos:end="163:17">{<block_content pos:start="155:21" pos:end="161:77">

                    <decl_stmt pos:start="155:21" pos:end="155:79"><decl pos:start="155:21" pos:end="155:78"><type pos:start="155:21" pos:end="155:34"><name pos:start="155:21" pos:end="155:34">xtensa_regfile</name></type> <name pos:start="155:36" pos:end="155:37">rf</name> <init pos:start="155:39" pos:end="155:78">= <expr pos:start="155:41" pos:end="155:78"><call pos:start="155:41" pos:end="155:78"><name pos:start="155:41" pos:end="155:62">xtensa_operand_regfile</name><argument_list pos:start="155:63" pos:end="155:78">(<argument pos:start="155:64" pos:end="155:66"><expr pos:start="155:64" pos:end="155:66"><name pos:start="155:64" pos:end="155:66">isa</name></expr></argument>, <argument pos:start="155:69" pos:end="155:71"><expr pos:start="155:69" pos:end="155:71"><name pos:start="155:69" pos:end="155:71">opc</name></expr></argument>, <argument pos:start="155:74" pos:end="155:77"><expr pos:start="155:74" pos:end="155:77"><name pos:start="155:74" pos:end="155:77">opnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="159:21" pos:end="161:77"><expr pos:start="159:21" pos:end="161:76"><call pos:start="159:21" pos:end="161:76"><name pos:start="159:21" pos:end="159:38"><name pos:start="159:21" pos:end="159:24">info</name><operator pos:start="159:25" pos:end="159:26">-&gt;</operator><name pos:start="159:27" pos:end="159:38">fprintf_func</name></name><argument_list pos:start="159:39" pos:end="161:76">(<argument pos:start="159:40" pos:end="159:51"><expr pos:start="159:40" pos:end="159:51"><name pos:start="159:40" pos:end="159:51"><name pos:start="159:40" pos:end="159:43">info</name><operator pos:start="159:44" pos:end="159:45">-&gt;</operator><name pos:start="159:46" pos:end="159:51">stream</name></name></expr></argument>, <argument pos:start="159:54" pos:end="159:59"><expr pos:start="159:54" pos:end="159:59"><literal type="string" pos:start="159:54" pos:end="159:59">"%s%d"</literal></expr></argument>,

                                       <argument pos:start="161:40" pos:end="161:72"><expr pos:start="161:40" pos:end="161:72"><call pos:start="161:40" pos:end="161:72"><name pos:start="161:40" pos:end="161:63">xtensa_regfile_shortname</name><argument_list pos:start="161:64" pos:end="161:72">(<argument pos:start="161:65" pos:end="161:67"><expr pos:start="161:65" pos:end="161:67"><name pos:start="161:65" pos:end="161:67">isa</name></expr></argument>, <argument pos:start="161:70" pos:end="161:71"><expr pos:start="161:70" pos:end="161:71"><name pos:start="161:70" pos:end="161:71">rf</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="161:75" pos:end="161:75"><expr pos:start="161:75" pos:end="161:75"><name pos:start="161:75" pos:end="161:75">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="163:19" pos:end="169:17">else if <condition pos:start="163:27" pos:end="163:72">(<expr pos:start="163:28" pos:end="163:71"><call pos:start="163:28" pos:end="163:71"><name pos:start="163:28" pos:end="163:55">xtensa_operand_is_PCrelative</name><argument_list pos:start="163:56" pos:end="163:71">(<argument pos:start="163:57" pos:end="163:59"><expr pos:start="163:57" pos:end="163:59"><name pos:start="163:57" pos:end="163:59">isa</name></expr></argument>, <argument pos:start="163:62" pos:end="163:64"><expr pos:start="163:62" pos:end="163:64"><name pos:start="163:62" pos:end="163:64">opc</name></expr></argument>, <argument pos:start="163:67" pos:end="163:70"><expr pos:start="163:67" pos:end="163:70"><name pos:start="163:67" pos:end="163:70">opnd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="163:74" pos:end="169:17">{<block_content pos:start="165:21" pos:end="167:64">

                    <expr_stmt pos:start="165:21" pos:end="165:75"><expr pos:start="165:21" pos:end="165:74"><call pos:start="165:21" pos:end="165:74"><name pos:start="165:21" pos:end="165:45">xtensa_operand_undo_reloc</name><argument_list pos:start="165:46" pos:end="165:74">(<argument pos:start="165:47" pos:end="165:49"><expr pos:start="165:47" pos:end="165:49"><name pos:start="165:47" pos:end="165:49">isa</name></expr></argument>, <argument pos:start="165:52" pos:end="165:54"><expr pos:start="165:52" pos:end="165:54"><name pos:start="165:52" pos:end="165:54">opc</name></expr></argument>, <argument pos:start="165:57" pos:end="165:60"><expr pos:start="165:57" pos:end="165:60"><name pos:start="165:57" pos:end="165:60">opnd</name></expr></argument>, <argument pos:start="165:63" pos:end="165:64"><expr pos:start="165:63" pos:end="165:64"><operator pos:start="165:63" pos:end="165:63">&amp;</operator><name pos:start="165:64" pos:end="165:64">v</name></expr></argument>, <argument pos:start="165:67" pos:end="165:73"><expr pos:start="165:67" pos:end="165:73"><name pos:start="165:67" pos:end="165:73">memaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="167:21" pos:end="167:64"><expr pos:start="167:21" pos:end="167:63"><call pos:start="167:21" pos:end="167:63"><name pos:start="167:21" pos:end="167:38"><name pos:start="167:21" pos:end="167:24">info</name><operator pos:start="167:25" pos:end="167:26">-&gt;</operator><name pos:start="167:27" pos:end="167:38">fprintf_func</name></name><argument_list pos:start="167:39" pos:end="167:63">(<argument pos:start="167:40" pos:end="167:51"><expr pos:start="167:40" pos:end="167:51"><name pos:start="167:40" pos:end="167:51"><name pos:start="167:40" pos:end="167:43">info</name><operator pos:start="167:44" pos:end="167:45">-&gt;</operator><name pos:start="167:46" pos:end="167:51">stream</name></name></expr></argument>, <argument pos:start="167:54" pos:end="167:59"><expr pos:start="167:54" pos:end="167:59"><literal type="string" pos:start="167:54" pos:end="167:59">"0x%x"</literal></expr></argument>, <argument pos:start="167:62" pos:end="167:62"><expr pos:start="167:62" pos:end="167:62"><name pos:start="167:62" pos:end="167:62">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="169:19" pos:end="173:17">else <block pos:start="169:24" pos:end="173:17">{<block_content pos:start="171:21" pos:end="171:62">

                    <expr_stmt pos:start="171:21" pos:end="171:62"><expr pos:start="171:21" pos:end="171:61"><call pos:start="171:21" pos:end="171:61"><name pos:start="171:21" pos:end="171:38"><name pos:start="171:21" pos:end="171:24">info</name><operator pos:start="171:25" pos:end="171:26">-&gt;</operator><name pos:start="171:27" pos:end="171:38">fprintf_func</name></name><argument_list pos:start="171:39" pos:end="171:61">(<argument pos:start="171:40" pos:end="171:51"><expr pos:start="171:40" pos:end="171:51"><name pos:start="171:40" pos:end="171:51"><name pos:start="171:40" pos:end="171:43">info</name><operator pos:start="171:44" pos:end="171:45">-&gt;</operator><name pos:start="171:46" pos:end="171:51">stream</name></name></expr></argument>, <argument pos:start="171:54" pos:end="171:57"><expr pos:start="171:54" pos:end="171:57"><literal type="string" pos:start="171:54" pos:end="171:57">"%d"</literal></expr></argument>, <argument pos:start="171:60" pos:end="171:60"><expr pos:start="171:60" pos:end="171:60"><name pos:start="171:60" pos:end="171:60">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:24"><expr pos:start="175:17" pos:end="175:23"><operator pos:start="175:17" pos:end="175:18">++</operator><name pos:start="175:19" pos:end="175:23">vopnd</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <if_stmt pos:start="183:5" pos:end="187:5"><if pos:start="183:5" pos:end="187:5">if <condition pos:start="183:8" pos:end="183:18">(<expr pos:start="183:9" pos:end="183:17"><name pos:start="183:9" pos:end="183:13">slots</name> <operator pos:start="183:15" pos:end="183:15">&gt;</operator> <literal type="number" pos:start="183:17" pos:end="183:17">1</literal></expr>)</condition> <block pos:start="183:20" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:47">

        <expr_stmt pos:start="185:9" pos:end="185:47"><expr pos:start="185:9" pos:end="185:46"><call pos:start="185:9" pos:end="185:46"><name pos:start="185:9" pos:end="185:26"><name pos:start="185:9" pos:end="185:12">info</name><operator pos:start="185:13" pos:end="185:14">-&gt;</operator><name pos:start="185:15" pos:end="185:26">fprintf_func</name></name><argument_list pos:start="185:27" pos:end="185:46">(<argument pos:start="185:28" pos:end="185:39"><expr pos:start="185:28" pos:end="185:39"><name pos:start="185:28" pos:end="185:39"><name pos:start="185:28" pos:end="185:31">info</name><operator pos:start="185:32" pos:end="185:33">-&gt;</operator><name pos:start="185:34" pos:end="185:39">stream</name></name></expr></argument>, <argument pos:start="185:42" pos:end="185:45"><expr pos:start="185:42" pos:end="185:45"><literal type="string" pos:start="185:42" pos:end="185:45">" }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="191:1" pos:end="191:4"><name pos:start="191:1" pos:end="191:3">out</name>:</label>

    <expr_stmt pos:start="193:5" pos:end="193:19"><expr pos:start="193:5" pos:end="193:18"><call pos:start="193:5" pos:end="193:18"><name pos:start="193:5" pos:end="193:10">g_free</name><argument_list pos:start="193:11" pos:end="193:18">(<argument pos:start="193:12" pos:end="193:17"><expr pos:start="193:12" pos:end="193:17"><name pos:start="193:12" pos:end="193:17">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:38"><expr pos:start="195:5" pos:end="195:37"><call pos:start="195:5" pos:end="195:37"><name pos:start="195:5" pos:end="195:23">xtensa_insnbuf_free</name><argument_list pos:start="195:24" pos:end="195:37">(<argument pos:start="195:25" pos:end="195:27"><expr pos:start="195:25" pos:end="195:27"><name pos:start="195:25" pos:end="195:27">isa</name></expr></argument>, <argument pos:start="195:30" pos:end="195:36"><expr pos:start="195:30" pos:end="195:36"><name pos:start="195:30" pos:end="195:36">insnbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:38"><expr pos:start="197:5" pos:end="197:37"><call pos:start="197:5" pos:end="197:37"><name pos:start="197:5" pos:end="197:23">xtensa_insnbuf_free</name><argument_list pos:start="197:24" pos:end="197:37">(<argument pos:start="197:25" pos:end="197:27"><expr pos:start="197:25" pos:end="197:27"><name pos:start="197:25" pos:end="197:27">isa</name></expr></argument>, <argument pos:start="197:30" pos:end="197:36"><expr pos:start="197:30" pos:end="197:36"><name pos:start="197:30" pos:end="197:36">slotbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="201:5" pos:end="201:15">return <expr pos:start="201:12" pos:end="201:14"><name pos:start="201:12" pos:end="201:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
