<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15737.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">CharDriverState</name><modifier pos:start="1:23" pos:end="1:23">*</modifier></type> <name pos:start="1:25" pos:end="1:49">create_eventfd_chr_device</name><parameter_list pos:start="1:50" pos:end="5:61">(<parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:62">IVShmemState</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:65">s</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:66"><decl pos:start="3:51" pos:end="3:66"><type pos:start="3:51" pos:end="3:66"><name pos:start="3:51" pos:end="3:63">EventNotifier</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:66">n</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:60"><decl pos:start="5:51" pos:end="5:60"><type pos:start="5:51" pos:end="5:60"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:60">vector</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="65:1">{<block_content pos:start="11:5" pos:end="61:15">

    <comment type="block" pos:start="9:5" pos:end="9:69">/* create a event character device based on the passed eventfd */</comment>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">PCIDevice</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:19">pdev</name> <init pos:start="11:21" pos:end="11:35">= <expr pos:start="11:23" pos:end="11:35"><call pos:start="11:23" pos:end="11:35"><name pos:start="11:23" pos:end="11:32">PCI_DEVICE</name><argument_list pos:start="11:33" pos:end="11:35">(<argument pos:start="11:34" pos:end="11:34"><expr pos:start="11:34" pos:end="11:34"><name pos:start="11:34" pos:end="11:34">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">eventfd</name> <init pos:start="13:17" pos:end="13:42">= <expr pos:start="13:19" pos:end="13:42"><call pos:start="13:19" pos:end="13:42"><name pos:start="13:19" pos:end="13:39">event_notifier_get_fd</name><argument_list pos:start="13:40" pos:end="13:42">(<argument pos:start="13:41" pos:end="13:41"><expr pos:start="13:41" pos:end="13:41"><name pos:start="13:41" pos:end="13:41">n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19">CharDriverState</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:24">chr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:39"><expr pos:start="19:5" pos:end="19:38"><name pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:18">msi_vectors</name><index pos:start="19:19" pos:end="19:26">[<expr pos:start="19:20" pos:end="19:25"><name pos:start="19:20" pos:end="19:25">vector</name></expr>]</index></name><operator pos:start="19:27" pos:end="19:27">.</operator><name pos:start="19:28" pos:end="19:31">pdev</name> <operator pos:start="19:33" pos:end="19:33">=</operator> <name pos:start="19:35" pos:end="19:38">pdev</name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:41"><expr pos:start="23:5" pos:end="23:40"><name pos:start="23:5" pos:end="23:7">chr</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:40"><name pos:start="23:11" pos:end="23:31">qemu_chr_open_eventfd</name><argument_list pos:start="23:32" pos:end="23:40">(<argument pos:start="23:33" pos:end="23:39"><expr pos:start="23:33" pos:end="23:39"><name pos:start="23:33" pos:end="23:39">eventfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:11">chr</name> <operator pos:start="27:13" pos:end="27:14">==</operator> <name pos:start="27:16" pos:end="27:19">NULL</name></expr>)</condition> <block pos:start="27:22" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:20">

        <expr_stmt pos:start="29:9" pos:end="29:75"><expr pos:start="29:9" pos:end="29:74"><call pos:start="29:9" pos:end="29:74"><name pos:start="29:9" pos:end="29:20">error_report</name><argument_list pos:start="29:21" pos:end="29:74">(<argument pos:start="29:22" pos:end="29:64"><expr pos:start="29:22" pos:end="29:64"><literal type="string" pos:start="29:22" pos:end="29:64">"creating chardriver for eventfd %d failed"</literal></expr></argument>, <argument pos:start="29:67" pos:end="29:73"><expr pos:start="29:67" pos:end="29:73"><name pos:start="29:67" pos:end="29:73">eventfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:20">return <expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><call pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:29">qemu_chr_fe_claim_no_fail</name><argument_list pos:start="35:30" pos:end="35:34">(<argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><name pos:start="35:31" pos:end="35:33">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:57">/* if MSI is supported we need multiple interrupts */</comment>

    <if_stmt pos:start="41:5" pos:end="57:5"><if pos:start="41:5" pos:end="51:5">if <condition pos:start="41:8" pos:end="41:44">(<expr pos:start="41:9" pos:end="41:43"><call pos:start="41:9" pos:end="41:43"><name pos:start="41:9" pos:end="41:27">ivshmem_has_feature</name><argument_list pos:start="41:28" pos:end="41:43">(<argument pos:start="41:29" pos:end="41:29"><expr pos:start="41:29" pos:end="41:29"><name pos:start="41:29" pos:end="41:29">s</name></expr></argument>, <argument pos:start="41:32" pos:end="41:42"><expr pos:start="41:32" pos:end="41:42"><name pos:start="41:32" pos:end="41:42">IVSHMEM_MSI</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:46" pos:end="51:5">{<block_content pos:start="43:9" pos:end="49:62">

        <expr_stmt pos:start="43:9" pos:end="43:52"><expr pos:start="43:9" pos:end="43:51"><name pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:22">msi_vectors</name><index pos:start="43:23" pos:end="43:30">[<expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:29">vector</name></expr>]</index></name><operator pos:start="43:31" pos:end="43:31">.</operator><name pos:start="43:32" pos:end="43:35">pdev</name> <operator pos:start="43:37" pos:end="43:37">=</operator> <call pos:start="43:39" pos:end="43:51"><name pos:start="43:39" pos:end="43:48">PCI_DEVICE</name><argument_list pos:start="43:49" pos:end="43:51">(<argument pos:start="43:50" pos:end="43:50"><expr pos:start="43:50" pos:end="43:50"><name pos:start="43:50" pos:end="43:50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="49:62"><expr pos:start="47:9" pos:end="49:61"><call pos:start="47:9" pos:end="49:61"><name pos:start="47:9" pos:end="47:29">qemu_chr_add_handlers</name><argument_list pos:start="47:30" pos:end="49:61">(<argument pos:start="47:31" pos:end="47:33"><expr pos:start="47:31" pos:end="47:33"><name pos:start="47:31" pos:end="47:33">chr</name></expr></argument>, <argument pos:start="47:36" pos:end="47:54"><expr pos:start="47:36" pos:end="47:54"><name pos:start="47:36" pos:end="47:54">ivshmem_can_receive</name></expr></argument>, <argument pos:start="47:57" pos:end="47:66"><expr pos:start="47:57" pos:end="47:66"><name pos:start="47:57" pos:end="47:66">fake_irqfd</name></expr></argument>,

                      <argument pos:start="49:23" pos:end="49:35"><expr pos:start="49:23" pos:end="49:35"><name pos:start="49:23" pos:end="49:35">ivshmem_event</name></expr></argument>, <argument pos:start="49:38" pos:end="49:60"><expr pos:start="49:38" pos:end="49:60"><operator pos:start="49:38" pos:end="49:38">&amp;</operator><name pos:start="49:39" pos:end="49:60"><name pos:start="49:39" pos:end="49:39">s</name><operator pos:start="49:40" pos:end="49:41">-&gt;</operator><name pos:start="49:42" pos:end="49:52">msi_vectors</name><index pos:start="49:53" pos:end="49:60">[<expr pos:start="49:54" pos:end="49:59"><name pos:start="49:54" pos:end="49:59">vector</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="57:5">else <block pos:start="51:12" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:40">

        <expr_stmt pos:start="53:9" pos:end="55:40"><expr pos:start="53:9" pos:end="55:39"><call pos:start="53:9" pos:end="55:39"><name pos:start="53:9" pos:end="53:29">qemu_chr_add_handlers</name><argument_list pos:start="53:30" pos:end="55:39">(<argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><name pos:start="53:31" pos:end="53:33">chr</name></expr></argument>, <argument pos:start="53:36" pos:end="53:54"><expr pos:start="53:36" pos:end="53:54"><name pos:start="53:36" pos:end="53:54">ivshmem_can_receive</name></expr></argument>, <argument pos:start="53:57" pos:end="53:71"><expr pos:start="53:57" pos:end="53:71"><name pos:start="53:57" pos:end="53:71">ivshmem_receive</name></expr></argument>,

                      <argument pos:start="55:23" pos:end="55:35"><expr pos:start="55:23" pos:end="55:35"><name pos:start="55:23" pos:end="55:35">ivshmem_event</name></expr></argument>, <argument pos:start="55:38" pos:end="55:38"><expr pos:start="55:38" pos:end="55:38"><name pos:start="55:38" pos:end="55:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="61:5" pos:end="61:15">return <expr pos:start="61:12" pos:end="61:14"><name pos:start="61:12" pos:end="61:14">chr</name></expr>;</return>



</block_content>}</block></function>
</unit>
