<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/591.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">qcow2_open</name><parameter_list pos:start="1:22" pos:end="1:70">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="191:15">{<block_content pos:start="3:5" pos:end="191:15">
    <decl_stmt pos:start="3:5" pos:end="3:34"><decl pos:start="3:5" pos:end="3:33"><type pos:start="3:5" pos:end="3:19"><name pos:start="3:5" pos:end="3:17">BDRVQcowState</name> <modifier pos:start="3:19" pos:end="3:19">*</modifier></type><name pos:start="3:20" pos:end="3:20">s</name> <init pos:start="3:22" pos:end="3:33">= <expr pos:start="3:24" pos:end="3:33"><name pos:start="3:24" pos:end="3:33"><name pos:start="3:24" pos:end="3:25">bs</name><operator pos:start="3:26" pos:end="3:27">-&gt;</operator><name pos:start="3:28" pos:end="3:33">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:24"><decl pos:start="4:5" pos:end="4:11"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:11">len</name></decl>, <decl pos:start="4:14" pos:end="4:14"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:14" pos:end="4:14">i</name></decl>, <decl pos:start="4:17" pos:end="4:23"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:17" pos:end="4:19">ret</name> <init pos:start="4:21" pos:end="4:23">= <expr pos:start="4:23" pos:end="4:23"><literal type="number" pos:start="4:23" pos:end="4:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">QCowHeader</name></type> <name pos:start="5:16" pos:end="5:21">header</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:19"><decl pos:start="6:5" pos:end="6:18"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:12">QemuOpts</name> <modifier pos:start="6:14" pos:end="6:14">*</modifier></type><name pos:start="6:15" pos:end="6:18">opts</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:21"><decl pos:start="8:5" pos:end="8:20"><type pos:start="8:5" pos:end="8:12"><name pos:start="8:5" pos:end="8:12">uint64_t</name></type> <name pos:start="8:14" pos:end="8:20">ext_end</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:30">l1_vm_state_index</name></decl>;</decl_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:59"><expr pos:start="10:5" pos:end="10:58"><name pos:start="10:5" pos:end="10:7">ret</name> <operator pos:start="10:9" pos:end="10:9">=</operator> <call pos:start="10:11" pos:end="10:58"><name pos:start="10:11" pos:end="10:20">bdrv_pread</name><argument_list pos:start="10:21" pos:end="10:58">(<argument pos:start="10:22" pos:end="10:29"><expr pos:start="10:22" pos:end="10:29"><name pos:start="10:22" pos:end="10:29"><name pos:start="10:22" pos:end="10:23">bs</name><operator pos:start="10:24" pos:end="10:25">-&gt;</operator><name pos:start="10:26" pos:end="10:29">file</name></name></expr></argument>, <argument pos:start="10:32" pos:end="10:32"><expr pos:start="10:32" pos:end="10:32"><literal type="number" pos:start="10:32" pos:end="10:32">0</literal></expr></argument>, <argument pos:start="10:35" pos:end="10:41"><expr pos:start="10:35" pos:end="10:41"><operator pos:start="10:35" pos:end="10:35">&amp;</operator><name pos:start="10:36" pos:end="10:41">header</name></expr></argument>, <argument pos:start="10:44" pos:end="10:57"><expr pos:start="10:44" pos:end="10:57"><sizeof pos:start="10:44" pos:end="10:57">sizeof<argument_list pos:start="10:50" pos:end="10:57">(<argument pos:start="10:51" pos:end="10:56"><expr pos:start="10:51" pos:end="10:56"><name pos:start="10:51" pos:end="10:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="11:5" pos:end="191:15"><if pos:start="11:5" pos:end="191:15">if <condition pos:start="11:8" pos:end="11:16">(<expr pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:11">ret</name> <operator pos:start="11:13" pos:end="11:13">&lt;</operator> <literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr>)</condition> <block pos:start="11:18" pos:end="191:15">{<block_content pos:start="12:5" pos:end="191:15">
    <expr_stmt pos:start="12:5" pos:end="12:32"><expr pos:start="12:5" pos:end="12:31"><call pos:start="12:5" pos:end="12:31"><name pos:start="12:5" pos:end="12:16">be32_to_cpus</name><argument_list pos:start="12:17" pos:end="12:31">(<argument pos:start="12:18" pos:end="12:30"><expr pos:start="12:18" pos:end="12:30"><operator pos:start="12:18" pos:end="12:18">&amp;</operator><name pos:start="12:19" pos:end="12:30"><name pos:start="12:19" pos:end="12:24">header</name><operator pos:start="12:25" pos:end="12:25">.</operator><name pos:start="12:26" pos:end="12:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:34"><expr pos:start="13:5" pos:end="13:33"><call pos:start="13:5" pos:end="13:33"><name pos:start="13:5" pos:end="13:16">be32_to_cpus</name><argument_list pos:start="13:17" pos:end="13:33">(<argument pos:start="13:18" pos:end="13:32"><expr pos:start="13:18" pos:end="13:32"><operator pos:start="13:18" pos:end="13:18">&amp;</operator><name pos:start="13:19" pos:end="13:32"><name pos:start="13:19" pos:end="13:24">header</name><operator pos:start="13:25" pos:end="13:25">.</operator><name pos:start="13:26" pos:end="13:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:46"><expr pos:start="14:5" pos:end="14:45"><call pos:start="14:5" pos:end="14:45"><name pos:start="14:5" pos:end="14:16">be64_to_cpus</name><argument_list pos:start="14:17" pos:end="14:45">(<argument pos:start="14:18" pos:end="14:44"><expr pos:start="14:18" pos:end="14:44"><operator pos:start="14:18" pos:end="14:18">&amp;</operator><name pos:start="14:19" pos:end="14:44"><name pos:start="14:19" pos:end="14:24">header</name><operator pos:start="14:25" pos:end="14:25">.</operator><name pos:start="14:26" pos:end="14:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:44"><expr pos:start="15:5" pos:end="15:43"><call pos:start="15:5" pos:end="15:43"><name pos:start="15:5" pos:end="15:16">be32_to_cpus</name><argument_list pos:start="15:17" pos:end="15:43">(<argument pos:start="15:18" pos:end="15:42"><expr pos:start="15:18" pos:end="15:42"><operator pos:start="15:18" pos:end="15:18">&amp;</operator><name pos:start="15:19" pos:end="15:42"><name pos:start="15:19" pos:end="15:24">header</name><operator pos:start="15:25" pos:end="15:25">.</operator><name pos:start="15:26" pos:end="15:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:31"><expr pos:start="16:5" pos:end="16:30"><call pos:start="16:5" pos:end="16:30"><name pos:start="16:5" pos:end="16:16">be64_to_cpus</name><argument_list pos:start="16:17" pos:end="16:30">(<argument pos:start="16:18" pos:end="16:29"><expr pos:start="16:18" pos:end="16:29"><operator pos:start="16:18" pos:end="16:18">&amp;</operator><name pos:start="16:19" pos:end="16:29"><name pos:start="16:19" pos:end="16:24">header</name><operator pos:start="16:25" pos:end="16:25">.</operator><name pos:start="16:26" pos:end="16:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:39"><expr pos:start="17:5" pos:end="17:38"><call pos:start="17:5" pos:end="17:38"><name pos:start="17:5" pos:end="17:16">be32_to_cpus</name><argument_list pos:start="17:17" pos:end="17:38">(<argument pos:start="17:18" pos:end="17:37"><expr pos:start="17:18" pos:end="17:37"><operator pos:start="17:18" pos:end="17:18">&amp;</operator><name pos:start="17:19" pos:end="17:37"><name pos:start="17:19" pos:end="17:24">header</name><operator pos:start="17:25" pos:end="17:25">.</operator><name pos:start="17:26" pos:end="17:37">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:39"><expr pos:start="18:5" pos:end="18:38"><call pos:start="18:5" pos:end="18:38"><name pos:start="18:5" pos:end="18:16">be32_to_cpus</name><argument_list pos:start="18:17" pos:end="18:38">(<argument pos:start="18:18" pos:end="18:37"><expr pos:start="18:18" pos:end="18:37"><operator pos:start="18:18" pos:end="18:18">&amp;</operator><name pos:start="18:19" pos:end="18:37"><name pos:start="18:19" pos:end="18:24">header</name><operator pos:start="18:25" pos:end="18:25">.</operator><name pos:start="18:26" pos:end="18:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:42"><expr pos:start="19:5" pos:end="19:41"><call pos:start="19:5" pos:end="19:41"><name pos:start="19:5" pos:end="19:16">be64_to_cpus</name><argument_list pos:start="19:17" pos:end="19:41">(<argument pos:start="19:18" pos:end="19:40"><expr pos:start="19:18" pos:end="19:40"><operator pos:start="19:18" pos:end="19:18">&amp;</operator><name pos:start="19:19" pos:end="19:40"><name pos:start="19:19" pos:end="19:24">header</name><operator pos:start="19:25" pos:end="19:25">.</operator><name pos:start="19:26" pos:end="19:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:34"><expr pos:start="20:5" pos:end="20:33"><call pos:start="20:5" pos:end="20:33"><name pos:start="20:5" pos:end="20:16">be32_to_cpus</name><argument_list pos:start="20:17" pos:end="20:33">(<argument pos:start="20:18" pos:end="20:32"><expr pos:start="20:18" pos:end="20:32"><operator pos:start="20:18" pos:end="20:18">&amp;</operator><name pos:start="20:19" pos:end="20:32"><name pos:start="20:19" pos:end="20:24">header</name><operator pos:start="20:25" pos:end="20:25">.</operator><name pos:start="20:26" pos:end="20:32">l1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:48"><expr pos:start="21:5" pos:end="21:47"><call pos:start="21:5" pos:end="21:47"><name pos:start="21:5" pos:end="21:16">be64_to_cpus</name><argument_list pos:start="21:17" pos:end="21:47">(<argument pos:start="21:18" pos:end="21:46"><expr pos:start="21:18" pos:end="21:46"><operator pos:start="21:18" pos:end="21:18">&amp;</operator><name pos:start="21:19" pos:end="21:46"><name pos:start="21:19" pos:end="21:24">header</name><operator pos:start="21:25" pos:end="21:25">.</operator><name pos:start="21:26" pos:end="21:46">refcount_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:50"><expr pos:start="22:5" pos:end="22:49"><call pos:start="22:5" pos:end="22:49"><name pos:start="22:5" pos:end="22:16">be32_to_cpus</name><argument_list pos:start="22:17" pos:end="22:49">(<argument pos:start="22:18" pos:end="22:48"><expr pos:start="22:18" pos:end="22:48"><operator pos:start="22:18" pos:end="22:18">&amp;</operator><name pos:start="22:19" pos:end="22:48"><name pos:start="22:19" pos:end="22:24">header</name><operator pos:start="22:25" pos:end="22:25">.</operator><name pos:start="22:26" pos:end="22:48">refcount_table_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:43"><expr pos:start="23:5" pos:end="23:42"><call pos:start="23:5" pos:end="23:42"><name pos:start="23:5" pos:end="23:16">be64_to_cpus</name><argument_list pos:start="23:17" pos:end="23:42">(<argument pos:start="23:18" pos:end="23:41"><expr pos:start="23:18" pos:end="23:41"><operator pos:start="23:18" pos:end="23:18">&amp;</operator><name pos:start="23:19" pos:end="23:41"><name pos:start="23:19" pos:end="23:24">header</name><operator pos:start="23:25" pos:end="23:25">.</operator><name pos:start="23:26" pos:end="23:41">snapshots_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:39"><expr pos:start="24:5" pos:end="24:38"><call pos:start="24:5" pos:end="24:38"><name pos:start="24:5" pos:end="24:16">be32_to_cpus</name><argument_list pos:start="24:17" pos:end="24:38">(<argument pos:start="24:18" pos:end="24:37"><expr pos:start="24:18" pos:end="24:37"><operator pos:start="24:18" pos:end="24:18">&amp;</operator><name pos:start="24:19" pos:end="24:37"><name pos:start="24:19" pos:end="24:24">header</name><operator pos:start="24:25" pos:end="24:25">.</operator><name pos:start="24:26" pos:end="24:37">nb_snapshots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="25:5" pos:end="191:15"><if pos:start="25:5" pos:end="191:15">if <condition pos:start="25:8" pos:end="25:35">(<expr pos:start="25:9" pos:end="25:34"><name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:14">header</name><operator pos:start="25:15" pos:end="25:15">.</operator><name pos:start="25:16" pos:end="25:20">magic</name></name> <operator pos:start="25:22" pos:end="25:23">!=</operator> <name pos:start="25:25" pos:end="25:34">QCOW_MAGIC</name></expr>)</condition> <block pos:start="25:37" pos:end="191:15">{<block_content pos:start="26:9" pos:end="191:15">
        <expr_stmt pos:start="26:9" pos:end="26:27"><expr pos:start="26:9" pos:end="26:26"><name pos:start="26:9" pos:end="26:11">ret</name> <operator pos:start="26:13" pos:end="26:13">=</operator> <operator pos:start="26:15" pos:end="26:15">-</operator><name pos:start="26:16" pos:end="26:26">EMEDIUMTYPE</name></expr>;</expr_stmt>
    <if_stmt pos:start="27:5" pos:end="191:15"><if pos:start="27:5" pos:end="191:15">if <condition pos:start="27:8" pos:end="27:49">(<expr pos:start="27:9" pos:end="27:48"><name pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:14">header</name><operator pos:start="27:15" pos:end="27:15">.</operator><name pos:start="27:16" pos:end="27:22">version</name></name> <operator pos:start="27:24" pos:end="27:24">&lt;</operator> <literal type="number" pos:start="27:26" pos:end="27:26">2</literal> <operator pos:start="27:28" pos:end="27:29">||</operator> <name pos:start="27:31" pos:end="27:44"><name pos:start="27:31" pos:end="27:36">header</name><operator pos:start="27:37" pos:end="27:37">.</operator><name pos:start="27:38" pos:end="27:44">version</name></name> <operator pos:start="27:46" pos:end="27:46">&gt;</operator> <literal type="number" pos:start="27:48" pos:end="27:48">3</literal></expr>)</condition> <block pos:start="27:51" pos:end="191:15">{<block_content pos:start="28:9" pos:end="191:15">
        <expr_stmt pos:start="28:9" pos:end="28:66"><expr pos:start="28:9" pos:end="28:65"><call pos:start="28:9" pos:end="28:65"><name pos:start="28:9" pos:end="28:26">report_unsupported</name><argument_list pos:start="28:27" pos:end="28:65">(<argument pos:start="28:28" pos:end="28:29"><expr pos:start="28:28" pos:end="28:29"><name pos:start="28:28" pos:end="28:29">bs</name></expr></argument>, <argument pos:start="28:32" pos:end="28:48"><expr pos:start="28:32" pos:end="28:48"><literal type="string" pos:start="28:32" pos:end="28:48">"QCOW version %d"</literal></expr></argument>, <argument pos:start="28:51" pos:end="28:64"><expr pos:start="28:51" pos:end="28:64"><name pos:start="28:51" pos:end="28:64"><name pos:start="28:51" pos:end="28:56">header</name><operator pos:start="28:57" pos:end="28:57">.</operator><name pos:start="28:58" pos:end="28:64">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="29:9" pos:end="29:23"><expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <operator pos:start="29:15" pos:end="29:15">-</operator><name pos:start="29:16" pos:end="29:22">ENOTSUP</name></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:37"><expr pos:start="30:5" pos:end="30:36"><name pos:start="30:5" pos:end="30:19"><name pos:start="30:5" pos:end="30:5">s</name><operator pos:start="30:6" pos:end="30:7">-&gt;</operator><name pos:start="30:8" pos:end="30:19">qcow_version</name></name> <operator pos:start="30:21" pos:end="30:21">=</operator> <name pos:start="30:23" pos:end="30:36"><name pos:start="30:23" pos:end="30:28">header</name><operator pos:start="30:29" pos:end="30:29">.</operator><name pos:start="30:30" pos:end="30:36">version</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="31:5" pos:end="31:44">/* Initialise version 3 header fields */</comment>
    <if_stmt pos:start="32:5" pos:end="191:15"><if pos:start="32:5" pos:end="38:5">if <condition pos:start="32:8" pos:end="32:28">(<expr pos:start="32:9" pos:end="32:27"><name pos:start="32:9" pos:end="32:22"><name pos:start="32:9" pos:end="32:14">header</name><operator pos:start="32:15" pos:end="32:15">.</operator><name pos:start="32:16" pos:end="32:22">version</name></name> <operator pos:start="32:24" pos:end="32:25">==</operator> <literal type="number" pos:start="32:27" pos:end="32:27">2</literal></expr>)</condition> <block pos:start="32:30" pos:end="38:5">{<block_content pos:start="33:9" pos:end="37:45">
        <expr_stmt pos:start="33:9" pos:end="33:44"><expr pos:start="33:9" pos:end="33:43"><name pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:14">header</name><operator pos:start="33:15" pos:end="33:15">.</operator><name pos:start="33:16" pos:end="33:36">incompatible_features</name></name>    <operator pos:start="33:41" pos:end="33:41">=</operator> <literal type="number" pos:start="33:43" pos:end="33:43">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="34:9" pos:end="34:44"><expr pos:start="34:9" pos:end="34:43"><name pos:start="34:9" pos:end="34:34"><name pos:start="34:9" pos:end="34:14">header</name><operator pos:start="34:15" pos:end="34:15">.</operator><name pos:start="34:16" pos:end="34:34">compatible_features</name></name>      <operator pos:start="34:41" pos:end="34:41">=</operator> <literal type="number" pos:start="34:43" pos:end="34:43">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:14">header</name><operator pos:start="35:15" pos:end="35:15">.</operator><name pos:start="35:16" pos:end="35:33">autoclear_features</name></name>       <operator pos:start="35:41" pos:end="35:41">=</operator> <literal type="number" pos:start="35:43" pos:end="35:43">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="36:9" pos:end="36:44"><expr pos:start="36:9" pos:end="36:43"><name pos:start="36:9" pos:end="36:29"><name pos:start="36:9" pos:end="36:14">header</name><operator pos:start="36:15" pos:end="36:15">.</operator><name pos:start="36:16" pos:end="36:29">refcount_order</name></name>           <operator pos:start="36:41" pos:end="36:41">=</operator> <literal type="number" pos:start="36:43" pos:end="36:43">4</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:14">header</name><operator pos:start="37:15" pos:end="37:15">.</operator><name pos:start="37:16" pos:end="37:28">header_length</name></name>            <operator pos:start="37:41" pos:end="37:41">=</operator> <literal type="number" pos:start="37:43" pos:end="37:44">72</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="38:7" pos:end="191:15">else <block pos:start="38:12" pos:end="191:15">{<block_content pos:start="39:9" pos:end="191:15">
        <expr_stmt pos:start="39:9" pos:end="39:52"><expr pos:start="39:9" pos:end="39:51"><call pos:start="39:9" pos:end="39:51"><name pos:start="39:9" pos:end="39:20">be64_to_cpus</name><argument_list pos:start="39:21" pos:end="39:51">(<argument pos:start="39:22" pos:end="39:50"><expr pos:start="39:22" pos:end="39:50"><operator pos:start="39:22" pos:end="39:22">&amp;</operator><name pos:start="39:23" pos:end="39:50"><name pos:start="39:23" pos:end="39:28">header</name><operator pos:start="39:29" pos:end="39:29">.</operator><name pos:start="39:30" pos:end="39:50">incompatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="40:9" pos:end="40:50"><expr pos:start="40:9" pos:end="40:49"><call pos:start="40:9" pos:end="40:49"><name pos:start="40:9" pos:end="40:20">be64_to_cpus</name><argument_list pos:start="40:21" pos:end="40:49">(<argument pos:start="40:22" pos:end="40:48"><expr pos:start="40:22" pos:end="40:48"><operator pos:start="40:22" pos:end="40:22">&amp;</operator><name pos:start="40:23" pos:end="40:48"><name pos:start="40:23" pos:end="40:28">header</name><operator pos:start="40:29" pos:end="40:29">.</operator><name pos:start="40:30" pos:end="40:48">compatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="41:9" pos:end="41:49"><expr pos:start="41:9" pos:end="41:48"><call pos:start="41:9" pos:end="41:48"><name pos:start="41:9" pos:end="41:20">be64_to_cpus</name><argument_list pos:start="41:21" pos:end="41:48">(<argument pos:start="41:22" pos:end="41:47"><expr pos:start="41:22" pos:end="41:47"><operator pos:start="41:22" pos:end="41:22">&amp;</operator><name pos:start="41:23" pos:end="41:47"><name pos:start="41:23" pos:end="41:28">header</name><operator pos:start="41:29" pos:end="41:29">.</operator><name pos:start="41:30" pos:end="41:47">autoclear_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="42:9" pos:end="42:45"><expr pos:start="42:9" pos:end="42:44"><call pos:start="42:9" pos:end="42:44"><name pos:start="42:9" pos:end="42:20">be32_to_cpus</name><argument_list pos:start="42:21" pos:end="42:44">(<argument pos:start="42:22" pos:end="42:43"><expr pos:start="42:22" pos:end="42:43"><operator pos:start="42:22" pos:end="42:22">&amp;</operator><name pos:start="42:23" pos:end="42:43"><name pos:start="42:23" pos:end="42:28">header</name><operator pos:start="42:29" pos:end="42:29">.</operator><name pos:start="42:30" pos:end="42:43">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="43:9" pos:end="43:44"><expr pos:start="43:9" pos:end="43:43"><call pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:20">be32_to_cpus</name><argument_list pos:start="43:21" pos:end="43:43">(<argument pos:start="43:22" pos:end="43:42"><expr pos:start="43:22" pos:end="43:42"><operator pos:start="43:22" pos:end="43:22">&amp;</operator><name pos:start="43:23" pos:end="43:42"><name pos:start="43:23" pos:end="43:28">header</name><operator pos:start="43:29" pos:end="43:29">.</operator><name pos:start="43:30" pos:end="43:42">header_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="44:5" pos:end="191:15"><if pos:start="44:5" pos:end="191:15">if <condition pos:start="44:8" pos:end="44:46">(<expr pos:start="44:9" pos:end="44:45"><name pos:start="44:9" pos:end="44:28"><name pos:start="44:9" pos:end="44:14">header</name><operator pos:start="44:15" pos:end="44:15">.</operator><name pos:start="44:16" pos:end="44:28">header_length</name></name> <operator pos:start="44:30" pos:end="44:30">&gt;</operator> <sizeof pos:start="44:32" pos:end="44:45">sizeof<argument_list pos:start="44:38" pos:end="44:45">(<argument pos:start="44:39" pos:end="44:44"><expr pos:start="44:39" pos:end="44:44"><name pos:start="44:39" pos:end="44:44">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="44:48" pos:end="191:15">{<block_content pos:start="45:9" pos:end="191:15">
        <expr_stmt pos:start="45:9" pos:end="45:78"><expr pos:start="45:9" pos:end="45:77"><name pos:start="45:9" pos:end="45:37"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:37">unknown_header_fields_size</name></name> <operator pos:start="45:39" pos:end="45:39">=</operator> <name pos:start="45:41" pos:end="45:60"><name pos:start="45:41" pos:end="45:46">header</name><operator pos:start="45:47" pos:end="45:47">.</operator><name pos:start="45:48" pos:end="45:60">header_length</name></name> <operator pos:start="45:62" pos:end="45:62">-</operator> <sizeof pos:start="45:64" pos:end="45:77">sizeof<argument_list pos:start="45:70" pos:end="45:77">(<argument pos:start="45:71" pos:end="45:76"><expr pos:start="45:71" pos:end="45:76"><name pos:start="45:71" pos:end="45:76">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt pos:start="46:9" pos:end="46:75"><expr pos:start="46:9" pos:end="46:74"><name pos:start="46:9" pos:end="46:32"><name pos:start="46:9" pos:end="46:9">s</name><operator pos:start="46:10" pos:end="46:11">-&gt;</operator><name pos:start="46:12" pos:end="46:32">unknown_header_fields</name></name> <operator pos:start="46:34" pos:end="46:34">=</operator> <call pos:start="46:36" pos:end="46:74"><name pos:start="46:36" pos:end="46:43">g_malloc</name><argument_list pos:start="46:44" pos:end="46:74">(<argument pos:start="46:45" pos:end="46:73"><expr pos:start="46:45" pos:end="46:73"><name pos:start="46:45" pos:end="46:73"><name pos:start="46:45" pos:end="46:45">s</name><operator pos:start="46:46" pos:end="46:47">-&gt;</operator><name pos:start="46:48" pos:end="46:73">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="47:9" pos:end="48:56"><expr pos:start="47:9" pos:end="48:55"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="48:55"><name pos:start="47:15" pos:end="47:24">bdrv_pread</name><argument_list pos:start="47:25" pos:end="48:55">(<argument pos:start="47:26" pos:end="47:33"><expr pos:start="47:26" pos:end="47:33"><name pos:start="47:26" pos:end="47:33"><name pos:start="47:26" pos:end="47:27">bs</name><operator pos:start="47:28" pos:end="47:29">-&gt;</operator><name pos:start="47:30" pos:end="47:33">file</name></name></expr></argument>, <argument pos:start="47:36" pos:end="47:49"><expr pos:start="47:36" pos:end="47:49"><sizeof pos:start="47:36" pos:end="47:49">sizeof<argument_list pos:start="47:42" pos:end="47:49">(<argument pos:start="47:43" pos:end="47:48"><expr pos:start="47:43" pos:end="47:48"><name pos:start="47:43" pos:end="47:48">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="47:52" pos:end="47:75"><expr pos:start="47:52" pos:end="47:75"><name pos:start="47:52" pos:end="47:75"><name pos:start="47:52" pos:end="47:52">s</name><operator pos:start="47:53" pos:end="47:54">-&gt;</operator><name pos:start="47:55" pos:end="47:75">unknown_header_fields</name></name></expr></argument>,
                         <argument pos:start="48:26" pos:end="48:54"><expr pos:start="48:26" pos:end="48:54"><name pos:start="48:26" pos:end="48:54"><name pos:start="48:26" pos:end="48:26">s</name><operator pos:start="48:27" pos:end="48:28">-&gt;</operator><name pos:start="48:29" pos:end="48:54">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="49:9" pos:end="191:15"><if pos:start="49:9" pos:end="191:15">if <condition pos:start="49:12" pos:end="49:20">(<expr pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:17">&lt;</operator> <literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr>)</condition> <block pos:start="49:22" pos:end="191:15">{<block_content pos:start="50:5" pos:end="191:15">
    <if_stmt pos:start="50:5" pos:end="191:15"><if pos:start="50:5" pos:end="52:5">if <condition pos:start="50:8" pos:end="50:35">(<expr pos:start="50:9" pos:end="50:34"><name pos:start="50:9" pos:end="50:34"><name pos:start="50:9" pos:end="50:14">header</name><operator pos:start="50:15" pos:end="50:15">.</operator><name pos:start="50:16" pos:end="50:34">backing_file_offset</name></name></expr>)</condition> <block pos:start="50:37" pos:end="52:5">{<block_content pos:start="51:9" pos:end="51:45">
        <expr_stmt pos:start="51:9" pos:end="51:45"><expr pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:15">ext_end</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:44"><name pos:start="51:19" pos:end="51:24">header</name><operator pos:start="51:25" pos:end="51:25">.</operator><name pos:start="51:26" pos:end="51:44">backing_file_offset</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="52:7" pos:end="191:15">else <block pos:start="52:12" pos:end="191:15">{<block_content pos:start="53:9" pos:end="191:15">
        <expr_stmt pos:start="53:9" pos:end="53:43"><expr pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:15">ext_end</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <literal type="number" pos:start="53:19" pos:end="53:19">1</literal> <operator pos:start="53:21" pos:end="53:22">&lt;&lt;</operator> <name pos:start="53:24" pos:end="53:42"><name pos:start="53:24" pos:end="53:29">header</name><operator pos:start="53:30" pos:end="53:30">.</operator><name pos:start="53:31" pos:end="53:42">cluster_bits</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="54:5" pos:end="54:29">/* Handle feature bits */</comment>
    <expr_stmt pos:start="55:5" pos:end="55:63"><expr pos:start="55:5" pos:end="55:62"><name pos:start="55:5" pos:end="55:28"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:28">incompatible_features</name></name>    <operator pos:start="55:33" pos:end="55:33">=</operator> <name pos:start="55:35" pos:end="55:62"><name pos:start="55:35" pos:end="55:40">header</name><operator pos:start="55:41" pos:end="55:41">.</operator><name pos:start="55:42" pos:end="55:62">incompatible_features</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:61"><expr pos:start="56:5" pos:end="56:60"><name pos:start="56:5" pos:end="56:26"><name pos:start="56:5" pos:end="56:5">s</name><operator pos:start="56:6" pos:end="56:7">-&gt;</operator><name pos:start="56:8" pos:end="56:26">compatible_features</name></name>      <operator pos:start="56:33" pos:end="56:33">=</operator> <name pos:start="56:35" pos:end="56:60"><name pos:start="56:35" pos:end="56:40">header</name><operator pos:start="56:41" pos:end="56:41">.</operator><name pos:start="56:42" pos:end="56:60">compatible_features</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:60"><expr pos:start="57:5" pos:end="57:59"><name pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:25">autoclear_features</name></name>       <operator pos:start="57:33" pos:end="57:33">=</operator> <name pos:start="57:35" pos:end="57:59"><name pos:start="57:35" pos:end="57:40">header</name><operator pos:start="57:41" pos:end="57:41">.</operator><name pos:start="57:42" pos:end="57:59">autoclear_features</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="58:5" pos:end="191:15"><if pos:start="58:5" pos:end="191:15">if <condition pos:start="58:8" pos:end="58:56">(<expr pos:start="58:9" pos:end="58:55"><name pos:start="58:9" pos:end="58:32"><name pos:start="58:9" pos:end="58:9">s</name><operator pos:start="58:10" pos:end="58:11">-&gt;</operator><name pos:start="58:12" pos:end="58:32">incompatible_features</name></name> <operator pos:start="58:34" pos:end="58:34">&amp;</operator> <operator pos:start="58:36" pos:end="58:36">~</operator><name pos:start="58:37" pos:end="58:55">QCOW2_INCOMPAT_MASK</name></expr>)</condition> <block pos:start="58:58" pos:end="191:15">{<block_content pos:start="59:9" pos:end="191:15">
        <decl_stmt pos:start="59:9" pos:end="59:35"><decl pos:start="59:9" pos:end="59:34"><type pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:12">void</name> <modifier pos:start="59:14" pos:end="59:14">*</modifier></type><name pos:start="59:15" pos:end="59:27">feature_table</name> <init pos:start="59:29" pos:end="59:34">= <expr pos:start="59:31" pos:end="59:34"><name pos:start="59:31" pos:end="59:34">NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="60:9" pos:end="61:46"><expr pos:start="60:9" pos:end="61:45"><call pos:start="60:9" pos:end="61:45"><name pos:start="60:9" pos:end="60:29">qcow2_read_extensions</name><argument_list pos:start="60:30" pos:end="61:45">(<argument pos:start="60:31" pos:end="60:32"><expr pos:start="60:31" pos:end="60:32"><name pos:start="60:31" pos:end="60:32">bs</name></expr></argument>, <argument pos:start="60:35" pos:end="60:54"><expr pos:start="60:35" pos:end="60:54"><name pos:start="60:35" pos:end="60:54"><name pos:start="60:35" pos:end="60:40">header</name><operator pos:start="60:41" pos:end="60:41">.</operator><name pos:start="60:42" pos:end="60:54">header_length</name></name></expr></argument>, <argument pos:start="60:57" pos:end="60:63"><expr pos:start="60:57" pos:end="60:63"><name pos:start="60:57" pos:end="60:63">ext_end</name></expr></argument>,
                              <argument pos:start="61:31" pos:end="61:44"><expr pos:start="61:31" pos:end="61:44"><operator pos:start="61:31" pos:end="61:31">&amp;</operator><name pos:start="61:32" pos:end="61:44">feature_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="62:9" pos:end="64:57"><expr pos:start="62:9" pos:end="64:56"><call pos:start="62:9" pos:end="64:56"><name pos:start="62:9" pos:end="62:34">report_unsupported_feature</name><argument_list pos:start="62:35" pos:end="64:56">(<argument pos:start="62:36" pos:end="62:37"><expr pos:start="62:36" pos:end="62:37"><name pos:start="62:36" pos:end="62:37">bs</name></expr></argument>, <argument pos:start="62:40" pos:end="62:52"><expr pos:start="62:40" pos:end="62:52"><name pos:start="62:40" pos:end="62:52">feature_table</name></expr></argument>,
                                   <argument pos:start="63:36" pos:end="64:55"><expr pos:start="63:36" pos:end="64:55"><name pos:start="63:36" pos:end="63:59"><name pos:start="63:36" pos:end="63:36">s</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:59">incompatible_features</name></name> <operator pos:start="63:61" pos:end="63:61">&amp;</operator>
                                   <operator pos:start="64:36" pos:end="64:36">~</operator><name pos:start="64:37" pos:end="64:55">QCOW2_INCOMPAT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="65:9" pos:end="65:23"><expr pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">-</operator><name pos:start="65:16" pos:end="65:22">ENOTSUP</name></expr>;</expr_stmt>
    <comment type="block" pos:start="66:5" pos:end="66:49">/* Check support for various header values */</comment>
    <if_stmt pos:start="67:5" pos:end="191:15"><if pos:start="67:5" pos:end="191:15">if <condition pos:start="67:8" pos:end="67:35">(<expr pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:14">header</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:29">refcount_order</name></name> <operator pos:start="67:31" pos:end="67:32">!=</operator> <literal type="number" pos:start="67:34" pos:end="67:34">4</literal></expr>)</condition> <block pos:start="67:37" pos:end="191:15">{<block_content pos:start="68:9" pos:end="191:15">
        <expr_stmt pos:start="68:9" pos:end="69:55"><expr pos:start="68:9" pos:end="69:54"><call pos:start="68:9" pos:end="69:54"><name pos:start="68:9" pos:end="68:26">report_unsupported</name><argument_list pos:start="68:27" pos:end="69:54">(<argument pos:start="68:28" pos:end="68:29"><expr pos:start="68:28" pos:end="68:29"><name pos:start="68:28" pos:end="68:29">bs</name></expr></argument>, <argument pos:start="68:32" pos:end="68:56"><expr pos:start="68:32" pos:end="68:56"><literal type="string" pos:start="68:32" pos:end="68:56">"%d bit reference counts"</literal></expr></argument>,
                           <argument pos:start="69:28" pos:end="69:53"><expr pos:start="69:28" pos:end="69:53"><literal type="number" pos:start="69:28" pos:end="69:28">1</literal> <operator pos:start="69:30" pos:end="69:31">&lt;&lt;</operator> <name pos:start="69:33" pos:end="69:53"><name pos:start="69:33" pos:end="69:38">header</name><operator pos:start="69:39" pos:end="69:39">.</operator><name pos:start="69:40" pos:end="69:53">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="70:9" pos:end="70:23"><expr pos:start="70:9" pos:end="70:22"><name pos:start="70:9" pos:end="70:11">ret</name> <operator pos:start="70:13" pos:end="70:13">=</operator> <operator pos:start="70:15" pos:end="70:15">-</operator><name pos:start="70:16" pos:end="70:22">ENOTSUP</name></expr>;</expr_stmt>
    <if_stmt pos:start="71:5" pos:end="191:15"><if pos:start="71:5" pos:end="191:15">if <condition pos:start="71:8" pos:end="72:47">(<expr pos:start="71:9" pos:end="72:46"><name pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:14">header</name><operator pos:start="71:15" pos:end="71:15">.</operator><name pos:start="71:16" pos:end="71:27">cluster_bits</name></name> <operator pos:start="71:29" pos:end="71:29">&lt;</operator> <name pos:start="71:31" pos:end="71:46">MIN_CLUSTER_BITS</name> <operator pos:start="71:48" pos:end="71:49">||</operator>
        <name pos:start="72:9" pos:end="72:27"><name pos:start="72:9" pos:end="72:14">header</name><operator pos:start="72:15" pos:end="72:15">.</operator><name pos:start="72:16" pos:end="72:27">cluster_bits</name></name> <operator pos:start="72:29" pos:end="72:29">&gt;</operator> <name pos:start="72:31" pos:end="72:46">MAX_CLUSTER_BITS</name></expr>)</condition> <block pos:start="72:49" pos:end="191:15">{<block_content pos:start="73:9" pos:end="191:15">
        <expr_stmt pos:start="73:9" pos:end="73:22"><expr pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <operator pos:start="73:15" pos:end="73:15">-</operator><name pos:start="73:16" pos:end="73:21">EINVAL</name></expr>;</expr_stmt>
    <if_stmt pos:start="74:5" pos:end="191:15"><if pos:start="74:5" pos:end="191:15">if <condition pos:start="74:8" pos:end="74:45">(<expr pos:start="74:9" pos:end="74:44"><name pos:start="74:9" pos:end="74:27"><name pos:start="74:9" pos:end="74:14">header</name><operator pos:start="74:15" pos:end="74:15">.</operator><name pos:start="74:16" pos:end="74:27">crypt_method</name></name> <operator pos:start="74:29" pos:end="74:29">&gt;</operator> <name pos:start="74:31" pos:end="74:44">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="74:47" pos:end="191:15">{<block_content pos:start="75:9" pos:end="191:15">
        <expr_stmt pos:start="75:9" pos:end="75:22"><expr pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">-</operator><name pos:start="75:16" pos:end="75:21">EINVAL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="76:5" pos:end="76:49"><expr pos:start="76:5" pos:end="76:48"><name pos:start="76:5" pos:end="76:26"><name pos:start="76:5" pos:end="76:5">s</name><operator pos:start="76:6" pos:end="76:7">-&gt;</operator><name pos:start="76:8" pos:end="76:26">crypt_method_header</name></name> <operator pos:start="76:28" pos:end="76:28">=</operator> <name pos:start="76:30" pos:end="76:48"><name pos:start="76:30" pos:end="76:35">header</name><operator pos:start="76:36" pos:end="76:36">.</operator><name pos:start="76:37" pos:end="76:48">crypt_method</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="77:5" pos:end="191:15"><if pos:start="77:5" pos:end="191:15">if <condition pos:start="77:8" pos:end="77:31">(<expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:30">crypt_method_header</name></name></expr>)</condition> <block pos:start="77:33" pos:end="191:15">{<block_content pos:start="78:9" pos:end="191:15">
        <expr_stmt pos:start="78:9" pos:end="78:26"><expr pos:start="78:9" pos:end="78:25"><name pos:start="78:9" pos:end="78:21"><name pos:start="78:9" pos:end="78:10">bs</name><operator pos:start="78:11" pos:end="78:12">-&gt;</operator><name pos:start="78:13" pos:end="78:21">encrypted</name></name> <operator pos:start="78:23" pos:end="78:23">=</operator> <literal type="number" pos:start="78:25" pos:end="78:25">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="79:5" pos:end="79:42"><expr pos:start="79:5" pos:end="79:41"><name pos:start="79:5" pos:end="79:19"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:19">cluster_bits</name></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <name pos:start="79:23" pos:end="79:41"><name pos:start="79:23" pos:end="79:28">header</name><operator pos:start="79:29" pos:end="79:29">.</operator><name pos:start="79:30" pos:end="79:41">cluster_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="80:5" pos:end="80:43"><expr pos:start="80:5" pos:end="80:42"><name pos:start="80:5" pos:end="80:19"><name pos:start="80:5" pos:end="80:5">s</name><operator pos:start="80:6" pos:end="80:7">-&gt;</operator><name pos:start="80:8" pos:end="80:19">cluster_size</name></name> <operator pos:start="80:21" pos:end="80:21">=</operator> <literal type="number" pos:start="80:23" pos:end="80:23">1</literal> <operator pos:start="80:25" pos:end="80:26">&lt;&lt;</operator> <name pos:start="80:28" pos:end="80:42"><name pos:start="80:28" pos:end="80:28">s</name><operator pos:start="80:29" pos:end="80:30">-&gt;</operator><name pos:start="80:31" pos:end="80:42">cluster_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="81:5" pos:end="81:52"><expr pos:start="81:5" pos:end="81:51"><name pos:start="81:5" pos:end="81:22"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:22">cluster_sectors</name></name> <operator pos:start="81:24" pos:end="81:24">=</operator> <literal type="number" pos:start="81:26" pos:end="81:26">1</literal> <operator pos:start="81:28" pos:end="81:29">&lt;&lt;</operator> <operator pos:start="81:31" pos:end="81:31">(</operator><name pos:start="81:32" pos:end="81:46"><name pos:start="81:32" pos:end="81:32">s</name><operator pos:start="81:33" pos:end="81:34">-&gt;</operator><name pos:start="81:35" pos:end="81:46">cluster_bits</name></name> <operator pos:start="81:48" pos:end="81:48">-</operator> <literal type="number" pos:start="81:50" pos:end="81:50">9</literal><operator pos:start="81:51" pos:end="81:51">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="82:5" pos:end="82:37"><expr pos:start="82:5" pos:end="82:36"><name pos:start="82:5" pos:end="82:14"><name pos:start="82:5" pos:end="82:5">s</name><operator pos:start="82:6" pos:end="82:7">-&gt;</operator><name pos:start="82:8" pos:end="82:14">l2_bits</name></name> <operator pos:start="82:16" pos:end="82:16">=</operator> <name pos:start="82:18" pos:end="82:32"><name pos:start="82:18" pos:end="82:18">s</name><operator pos:start="82:19" pos:end="82:20">-&gt;</operator><name pos:start="82:21" pos:end="82:32">cluster_bits</name></name> <operator pos:start="82:34" pos:end="82:34">-</operator> <literal type="number" pos:start="82:36" pos:end="82:36">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="82:39" pos:end="82:68">/* L2 is always one cluster */</comment>
    <expr_stmt pos:start="83:5" pos:end="83:33"><expr pos:start="83:5" pos:end="83:32"><name pos:start="83:5" pos:end="83:14"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:14">l2_size</name></name> <operator pos:start="83:16" pos:end="83:16">=</operator> <literal type="number" pos:start="83:18" pos:end="83:18">1</literal> <operator pos:start="83:20" pos:end="83:21">&lt;&lt;</operator> <name pos:start="83:23" pos:end="83:32"><name pos:start="83:23" pos:end="83:23">s</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:32">l2_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="84:5" pos:end="84:42"><expr pos:start="84:5" pos:end="84:41"><name pos:start="84:5" pos:end="84:21"><name pos:start="84:5" pos:end="84:6">bs</name><operator pos:start="84:7" pos:end="84:8">-&gt;</operator><name pos:start="84:9" pos:end="84:21">total_sectors</name></name> <operator pos:start="84:23" pos:end="84:23">=</operator> <name pos:start="84:25" pos:end="84:35"><name pos:start="84:25" pos:end="84:30">header</name><operator pos:start="84:31" pos:end="84:31">.</operator><name pos:start="84:32" pos:end="84:35">size</name></name> <operator pos:start="84:37" pos:end="84:37">/</operator> <literal type="number" pos:start="84:39" pos:end="84:41">512</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="85:5" pos:end="85:50"><expr pos:start="85:5" pos:end="85:49"><name pos:start="85:5" pos:end="85:18"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:18">csize_shift</name></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <operator pos:start="85:22" pos:end="85:22">(</operator><literal type="number" pos:start="85:23" pos:end="85:26">62</literal> <operator pos:start="85:26" pos:end="85:26">-</operator> <operator pos:start="85:28" pos:end="85:28">(</operator><name pos:start="85:29" pos:end="85:43"><name pos:start="85:29" pos:end="85:29">s</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:43">cluster_bits</name></name> <operator pos:start="85:45" pos:end="85:45">-</operator> <literal type="number" pos:start="85:47" pos:end="85:47">8</literal><operator pos:start="85:48" pos:end="85:48">)</operator><operator pos:start="85:49" pos:end="85:49">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="86:5" pos:end="86:53"><expr pos:start="86:5" pos:end="86:52"><name pos:start="86:5" pos:end="86:17"><name pos:start="86:5" pos:end="86:5">s</name><operator pos:start="86:6" pos:end="86:7">-&gt;</operator><name pos:start="86:8" pos:end="86:17">csize_mask</name></name> <operator pos:start="86:19" pos:end="86:19">=</operator> <operator pos:start="86:21" pos:end="86:21">(</operator><literal type="number" pos:start="86:22" pos:end="86:22">1</literal> <operator pos:start="86:24" pos:end="86:25">&lt;&lt;</operator> <operator pos:start="86:27" pos:end="86:27">(</operator><name pos:start="86:28" pos:end="86:42"><name pos:start="86:28" pos:end="86:28">s</name><operator pos:start="86:29" pos:end="86:30">-&gt;</operator><name pos:start="86:31" pos:end="86:42">cluster_bits</name></name> <operator pos:start="86:44" pos:end="86:44">-</operator> <literal type="number" pos:start="86:46" pos:end="86:46">8</literal><operator pos:start="86:47" pos:end="86:47">)</operator><operator pos:start="86:48" pos:end="86:48">)</operator> <operator pos:start="86:50" pos:end="86:50">-</operator> <literal type="number" pos:start="86:52" pos:end="86:52">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="87:5" pos:end="87:57"><expr pos:start="87:5" pos:end="87:56"><name pos:start="87:5" pos:end="87:26"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:26">cluster_offset_mask</name></name> <operator pos:start="87:28" pos:end="87:28">=</operator> <operator pos:start="87:30" pos:end="87:30">(</operator><literal type="number" pos:start="87:31" pos:end="87:33">1LL</literal> <operator pos:start="87:35" pos:end="87:36">&lt;&lt;</operator> <name pos:start="87:38" pos:end="87:51"><name pos:start="87:38" pos:end="87:38">s</name><operator pos:start="87:39" pos:end="87:40">-&gt;</operator><name pos:start="87:41" pos:end="87:51">csize_shift</name></name><operator pos:start="87:52" pos:end="87:52">)</operator> <operator pos:start="87:54" pos:end="87:54">-</operator> <literal type="number" pos:start="87:56" pos:end="87:56">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="88:5" pos:end="88:60"><expr pos:start="88:5" pos:end="88:59"><name pos:start="88:5" pos:end="88:28"><name pos:start="88:5" pos:end="88:5">s</name><operator pos:start="88:6" pos:end="88:7">-&gt;</operator><name pos:start="88:8" pos:end="88:28">refcount_table_offset</name></name> <operator pos:start="88:30" pos:end="88:30">=</operator> <name pos:start="88:32" pos:end="88:59"><name pos:start="88:32" pos:end="88:37">header</name><operator pos:start="88:38" pos:end="88:38">.</operator><name pos:start="88:39" pos:end="88:59">refcount_table_offset</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="89:5" pos:end="90:64"><expr pos:start="89:5" pos:end="90:63"><name pos:start="89:5" pos:end="89:26"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:26">refcount_table_size</name></name> <operator pos:start="89:28" pos:end="89:28">=</operator>
        <name pos:start="90:9" pos:end="90:38"><name pos:start="90:9" pos:end="90:14">header</name><operator pos:start="90:15" pos:end="90:15">.</operator><name pos:start="90:16" pos:end="90:38">refcount_table_clusters</name></name> <operator pos:start="90:40" pos:end="90:41">&lt;&lt;</operator> <operator pos:start="90:43" pos:end="90:43">(</operator><name pos:start="90:44" pos:end="90:58"><name pos:start="90:44" pos:end="90:44">s</name><operator pos:start="90:45" pos:end="90:46">-&gt;</operator><name pos:start="90:47" pos:end="90:58">cluster_bits</name></name> <operator pos:start="90:60" pos:end="90:60">-</operator> <literal type="number" pos:start="90:62" pos:end="90:62">3</literal><operator pos:start="90:63" pos:end="90:63">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:50"><expr pos:start="91:5" pos:end="91:49"><name pos:start="91:5" pos:end="91:23"><name pos:start="91:5" pos:end="91:5">s</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:23">snapshots_offset</name></name> <operator pos:start="91:25" pos:end="91:25">=</operator> <name pos:start="91:27" pos:end="91:49"><name pos:start="91:27" pos:end="91:32">header</name><operator pos:start="91:33" pos:end="91:33">.</operator><name pos:start="91:34" pos:end="91:49">snapshots_offset</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:42"><expr pos:start="92:5" pos:end="92:41"><name pos:start="92:5" pos:end="92:19"><name pos:start="92:5" pos:end="92:5">s</name><operator pos:start="92:6" pos:end="92:7">-&gt;</operator><name pos:start="92:8" pos:end="92:19">nb_snapshots</name></name> <operator pos:start="92:21" pos:end="92:21">=</operator> <name pos:start="92:23" pos:end="92:41"><name pos:start="92:23" pos:end="92:28">header</name><operator pos:start="92:29" pos:end="92:29">.</operator><name pos:start="92:30" pos:end="92:41">nb_snapshots</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="93:5" pos:end="93:32">/* read the level 1 table */</comment>
    <expr_stmt pos:start="94:5" pos:end="94:32"><expr pos:start="94:5" pos:end="94:31"><name pos:start="94:5" pos:end="94:14"><name pos:start="94:5" pos:end="94:5">s</name><operator pos:start="94:6" pos:end="94:7">-&gt;</operator><name pos:start="94:8" pos:end="94:14">l1_size</name></name> <operator pos:start="94:16" pos:end="94:16">=</operator> <name pos:start="94:18" pos:end="94:31"><name pos:start="94:18" pos:end="94:23">header</name><operator pos:start="94:24" pos:end="94:24">.</operator><name pos:start="94:25" pos:end="94:31">l1_size</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="95:5" pos:end="95:51"><expr pos:start="95:5" pos:end="95:50"><name pos:start="95:5" pos:end="95:21">l1_vm_state_index</name> <operator pos:start="95:23" pos:end="95:23">=</operator> <call pos:start="95:25" pos:end="95:50"><name pos:start="95:25" pos:end="95:34">size_to_l1</name><argument_list pos:start="95:35" pos:end="95:50">(<argument pos:start="95:36" pos:end="95:36"><expr pos:start="95:36" pos:end="95:36"><name pos:start="95:36" pos:end="95:36">s</name></expr></argument>, <argument pos:start="95:39" pos:end="95:49"><expr pos:start="95:39" pos:end="95:49"><name pos:start="95:39" pos:end="95:49"><name pos:start="95:39" pos:end="95:44">header</name><operator pos:start="95:45" pos:end="95:45">.</operator><name pos:start="95:46" pos:end="95:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="96:5" pos:end="191:15"><if pos:start="96:5" pos:end="191:15">if <condition pos:start="96:8" pos:end="96:36">(<expr pos:start="96:9" pos:end="96:35"><name pos:start="96:9" pos:end="96:25">l1_vm_state_index</name> <operator pos:start="96:27" pos:end="96:27">&gt;</operator> <name pos:start="96:29" pos:end="96:35">INT_MAX</name></expr>)</condition> <block pos:start="96:38" pos:end="191:15">{<block_content pos:start="97:9" pos:end="191:15">
        <expr_stmt pos:start="97:9" pos:end="97:21"><expr pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <operator pos:start="97:15" pos:end="97:15">-</operator><name pos:start="97:16" pos:end="97:20">EFBIG</name></expr>;</expr_stmt>
    <expr_stmt pos:start="98:5" pos:end="98:45"><expr pos:start="98:5" pos:end="98:44"><name pos:start="98:5" pos:end="98:24"><name pos:start="98:5" pos:end="98:5">s</name><operator pos:start="98:6" pos:end="98:7">-&gt;</operator><name pos:start="98:8" pos:end="98:24">l1_vm_state_index</name></name> <operator pos:start="98:26" pos:end="98:26">=</operator> <name pos:start="98:28" pos:end="98:44">l1_vm_state_index</name></expr>;</expr_stmt>
    <comment type="block" pos:start="99:5" pos:end="100:27">/* the L1 table must contain at least enough entries to put
       header.size bytes */</comment>
    <if_stmt pos:start="101:5" pos:end="191:15"><if pos:start="101:5" pos:end="191:15">if <condition pos:start="101:8" pos:end="101:42">(<expr pos:start="101:9" pos:end="101:41"><name pos:start="101:9" pos:end="101:18"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:18">l1_size</name></name> <operator pos:start="101:20" pos:end="101:20">&lt;</operator> <name pos:start="101:22" pos:end="101:41"><name pos:start="101:22" pos:end="101:22">s</name><operator pos:start="101:23" pos:end="101:24">-&gt;</operator><name pos:start="101:25" pos:end="101:41">l1_vm_state_index</name></name></expr>)</condition> <block pos:start="101:44" pos:end="191:15">{<block_content pos:start="102:9" pos:end="191:15">
        <expr_stmt pos:start="102:9" pos:end="102:22"><expr pos:start="102:9" pos:end="102:21"><name pos:start="102:9" pos:end="102:11">ret</name> <operator pos:start="102:13" pos:end="102:13">=</operator> <operator pos:start="102:15" pos:end="102:15">-</operator><name pos:start="102:16" pos:end="102:21">EINVAL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="103:5" pos:end="103:48"><expr pos:start="103:5" pos:end="103:47"><name pos:start="103:5" pos:end="103:22"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:22">l1_table_offset</name></name> <operator pos:start="103:24" pos:end="103:24">=</operator> <name pos:start="103:26" pos:end="103:47"><name pos:start="103:26" pos:end="103:31">header</name><operator pos:start="103:32" pos:end="103:32">.</operator><name pos:start="103:33" pos:end="103:47">l1_table_offset</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="104:5" pos:end="191:15"><if pos:start="104:5" pos:end="191:15">if <condition pos:start="104:8" pos:end="104:23">(<expr pos:start="104:9" pos:end="104:22"><name pos:start="104:9" pos:end="104:18"><name pos:start="104:9" pos:end="104:9">s</name><operator pos:start="104:10" pos:end="104:11">-&gt;</operator><name pos:start="104:12" pos:end="104:18">l1_size</name></name> <operator pos:start="104:20" pos:end="104:20">&gt;</operator> <literal type="number" pos:start="104:22" pos:end="104:22">0</literal></expr>)</condition> <block pos:start="104:25" pos:end="191:15">{<block_content pos:start="105:9" pos:end="191:15">
        <expr_stmt pos:start="105:9" pos:end="106:62"><expr pos:start="105:9" pos:end="106:61"><name pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:19">l1_table</name></name> <operator pos:start="105:21" pos:end="105:21">=</operator> <call pos:start="105:23" pos:end="106:61"><name pos:start="105:23" pos:end="105:31">g_malloc0</name><argument_list pos:start="105:32" pos:end="106:61">(
            <argument pos:start="106:13" pos:end="106:60"><expr pos:start="106:13" pos:end="106:60"><call pos:start="106:13" pos:end="106:60"><name pos:start="106:13" pos:end="106:24">align_offset</name><argument_list pos:start="106:25" pos:end="106:60">(<argument pos:start="106:26" pos:end="106:54"><expr pos:start="106:26" pos:end="106:54"><name pos:start="106:26" pos:end="106:35"><name pos:start="106:26" pos:end="106:26">s</name><operator pos:start="106:27" pos:end="106:28">-&gt;</operator><name pos:start="106:29" pos:end="106:35">l1_size</name></name> <operator pos:start="106:37" pos:end="106:37">*</operator> <sizeof pos:start="106:39" pos:end="106:54">sizeof<argument_list pos:start="106:45" pos:end="106:54">(<argument pos:start="106:46" pos:end="106:53"><expr pos:start="106:46" pos:end="106:53"><name pos:start="106:46" pos:end="106:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="106:57" pos:end="106:59"><expr pos:start="106:57" pos:end="106:59"><literal type="number" pos:start="106:57" pos:end="106:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="107:9" pos:end="108:56"><expr pos:start="107:9" pos:end="108:55"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <call pos:start="107:15" pos:end="108:55"><name pos:start="107:15" pos:end="107:24">bdrv_pread</name><argument_list pos:start="107:25" pos:end="108:55">(<argument pos:start="107:26" pos:end="107:33"><expr pos:start="107:26" pos:end="107:33"><name pos:start="107:26" pos:end="107:33"><name pos:start="107:26" pos:end="107:27">bs</name><operator pos:start="107:28" pos:end="107:29">-&gt;</operator><name pos:start="107:30" pos:end="107:33">file</name></name></expr></argument>, <argument pos:start="107:36" pos:end="107:53"><expr pos:start="107:36" pos:end="107:53"><name pos:start="107:36" pos:end="107:53"><name pos:start="107:36" pos:end="107:36">s</name><operator pos:start="107:37" pos:end="107:38">-&gt;</operator><name pos:start="107:39" pos:end="107:53">l1_table_offset</name></name></expr></argument>, <argument pos:start="107:56" pos:end="107:66"><expr pos:start="107:56" pos:end="107:66"><name pos:start="107:56" pos:end="107:66"><name pos:start="107:56" pos:end="107:56">s</name><operator pos:start="107:57" pos:end="107:58">-&gt;</operator><name pos:start="107:59" pos:end="107:66">l1_table</name></name></expr></argument>,
                         <argument pos:start="108:26" pos:end="108:54"><expr pos:start="108:26" pos:end="108:54"><name pos:start="108:26" pos:end="108:35"><name pos:start="108:26" pos:end="108:26">s</name><operator pos:start="108:27" pos:end="108:28">-&gt;</operator><name pos:start="108:29" pos:end="108:35">l1_size</name></name> <operator pos:start="108:37" pos:end="108:37">*</operator> <sizeof pos:start="108:39" pos:end="108:54">sizeof<argument_list pos:start="108:45" pos:end="108:54">(<argument pos:start="108:46" pos:end="108:53"><expr pos:start="108:46" pos:end="108:53"><name pos:start="108:46" pos:end="108:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="109:9" pos:end="191:15"><if pos:start="109:9" pos:end="191:15">if <condition pos:start="109:12" pos:end="109:20">(<expr pos:start="109:13" pos:end="109:19"><name pos:start="109:13" pos:end="109:15">ret</name> <operator pos:start="109:17" pos:end="109:17">&lt;</operator> <literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr>)</condition> <block pos:start="109:22" pos:end="191:15">{<block_content pos:start="110:9" pos:end="191:15">
        <for pos:start="110:9" pos:end="191:15">for<control pos:start="110:12" pos:end="110:38">(<init pos:start="110:13" pos:end="110:18"><expr pos:start="110:13" pos:end="110:17"><name pos:start="110:13" pos:end="110:13">i</name> <operator pos:start="110:15" pos:end="110:15">=</operator> <literal type="number" pos:start="110:17" pos:end="110:17">0</literal></expr>;</init><condition pos:start="110:19" pos:end="110:33"><expr pos:start="110:19" pos:end="110:32"><name pos:start="110:19" pos:end="110:19">i</name> <operator pos:start="110:21" pos:end="110:21">&lt;</operator> <name pos:start="110:23" pos:end="110:32"><name pos:start="110:23" pos:end="110:23">s</name><operator pos:start="110:24" pos:end="110:25">-&gt;</operator><name pos:start="110:26" pos:end="110:32">l1_size</name></name></expr>;</condition> <incr pos:start="110:35" pos:end="110:37"><expr pos:start="110:35" pos:end="110:37"><name pos:start="110:35" pos:end="110:35">i</name><operator pos:start="110:36" pos:end="110:37">++</operator></expr></incr>)</control> <block pos:start="110:40" pos:end="191:15">{<block_content pos:start="111:13" pos:end="191:15">
            <expr_stmt pos:start="111:13" pos:end="111:42"><expr pos:start="111:13" pos:end="111:41"><call pos:start="111:13" pos:end="111:41"><name pos:start="111:13" pos:end="111:24">be64_to_cpus</name><argument_list pos:start="111:25" pos:end="111:41">(<argument pos:start="111:26" pos:end="111:40"><expr pos:start="111:26" pos:end="111:40"><operator pos:start="111:26" pos:end="111:26">&amp;</operator><name pos:start="111:27" pos:end="111:40"><name pos:start="111:27" pos:end="111:27">s</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:37">l1_table</name><index pos:start="111:38" pos:end="111:40">[<expr pos:start="111:39" pos:end="111:39"><name pos:start="111:39" pos:end="111:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="112:5" pos:end="112:45">/* alloc L2 table/refcount block cache */</comment>
    <expr_stmt pos:start="113:5" pos:end="113:62"><expr pos:start="113:5" pos:end="113:61"><name pos:start="113:5" pos:end="113:21"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:21">l2_table_cache</name></name> <operator pos:start="113:23" pos:end="113:23">=</operator> <call pos:start="113:25" pos:end="113:61"><name pos:start="113:25" pos:end="113:42">qcow2_cache_create</name><argument_list pos:start="113:43" pos:end="113:61">(<argument pos:start="113:44" pos:end="113:45"><expr pos:start="113:44" pos:end="113:45"><name pos:start="113:44" pos:end="113:45">bs</name></expr></argument>, <argument pos:start="113:48" pos:end="113:60"><expr pos:start="113:48" pos:end="113:60"><name pos:start="113:48" pos:end="113:60">L2_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="114:5" pos:end="114:74"><expr pos:start="114:5" pos:end="114:73"><name pos:start="114:5" pos:end="114:27"><name pos:start="114:5" pos:end="114:5">s</name><operator pos:start="114:6" pos:end="114:7">-&gt;</operator><name pos:start="114:8" pos:end="114:27">refcount_block_cache</name></name> <operator pos:start="114:29" pos:end="114:29">=</operator> <call pos:start="114:31" pos:end="114:73"><name pos:start="114:31" pos:end="114:48">qcow2_cache_create</name><argument_list pos:start="114:49" pos:end="114:73">(<argument pos:start="114:50" pos:end="114:51"><expr pos:start="114:50" pos:end="114:51"><name pos:start="114:50" pos:end="114:51">bs</name></expr></argument>, <argument pos:start="114:54" pos:end="114:72"><expr pos:start="114:54" pos:end="114:72"><name pos:start="114:54" pos:end="114:72">REFCOUNT_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="115:5" pos:end="115:49"><expr pos:start="115:5" pos:end="115:48"><name pos:start="115:5" pos:end="115:20"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:20">cluster_cache</name></name> <operator pos:start="115:22" pos:end="115:22">=</operator> <call pos:start="115:24" pos:end="115:48"><name pos:start="115:24" pos:end="115:31">g_malloc</name><argument_list pos:start="115:32" pos:end="115:48">(<argument pos:start="115:33" pos:end="115:47"><expr pos:start="115:33" pos:end="115:47"><name pos:start="115:33" pos:end="115:47"><name pos:start="115:33" pos:end="115:33">s</name><operator pos:start="115:34" pos:end="115:35">-&gt;</operator><name pos:start="115:36" pos:end="115:47">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="116:5" pos:end="116:57">/* one more sector for decompressed data alignment */</comment>
    <expr_stmt pos:start="117:5" pos:end="118:41"><expr pos:start="117:5" pos:end="118:40"><name pos:start="117:5" pos:end="117:19"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:19">cluster_data</name></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="118:40"><name pos:start="117:23" pos:end="117:37">qemu_blockalign</name><argument_list pos:start="117:38" pos:end="118:40">(<argument pos:start="117:39" pos:end="117:40"><expr pos:start="117:39" pos:end="117:40"><name pos:start="117:39" pos:end="117:40">bs</name></expr></argument>, <argument pos:start="117:43" pos:end="118:39"><expr pos:start="117:43" pos:end="118:39"><name pos:start="117:43" pos:end="117:65">QCOW_MAX_CRYPT_CLUSTERS</name> <operator pos:start="117:67" pos:end="117:67">*</operator> <name pos:start="117:69" pos:end="117:83"><name pos:start="117:69" pos:end="117:69">s</name><operator pos:start="117:70" pos:end="117:71">-&gt;</operator><name pos:start="117:72" pos:end="117:83">cluster_size</name></name>
                                  <operator pos:start="118:35" pos:end="118:35">+</operator> <literal type="number" pos:start="118:37" pos:end="118:39">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="119:5" pos:end="119:33"><expr pos:start="119:5" pos:end="119:32"><name pos:start="119:5" pos:end="119:27"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:27">cluster_cache_offset</name></name> <operator pos:start="119:29" pos:end="119:29">=</operator> <operator pos:start="119:31" pos:end="119:31">-</operator><literal type="number" pos:start="119:32" pos:end="119:32">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="120:5" pos:end="120:21"><expr pos:start="120:5" pos:end="120:20"><name pos:start="120:5" pos:end="120:12"><name pos:start="120:5" pos:end="120:5">s</name><operator pos:start="120:6" pos:end="120:7">-&gt;</operator><name pos:start="120:8" pos:end="120:12">flags</name></name> <operator pos:start="120:14" pos:end="120:14">=</operator> <name pos:start="120:16" pos:end="120:20">flags</name></expr>;</expr_stmt>
    <expr_stmt pos:start="121:5" pos:end="121:34"><expr pos:start="121:5" pos:end="121:33"><name pos:start="121:5" pos:end="121:7">ret</name> <operator pos:start="121:9" pos:end="121:9">=</operator> <call pos:start="121:11" pos:end="121:33"><name pos:start="121:11" pos:end="121:29">qcow2_refcount_init</name><argument_list pos:start="121:30" pos:end="121:33">(<argument pos:start="121:31" pos:end="121:32"><expr pos:start="121:31" pos:end="121:32"><name pos:start="121:31" pos:end="121:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="122:5" pos:end="191:15"><if pos:start="122:5" pos:end="191:15">if <condition pos:start="122:8" pos:end="122:17">(<expr pos:start="122:9" pos:end="122:16"><name pos:start="122:9" pos:end="122:11">ret</name> <operator pos:start="122:13" pos:end="122:14">!=</operator> <literal type="number" pos:start="122:16" pos:end="122:16">0</literal></expr>)</condition> <block pos:start="122:19" pos:end="191:15">{<block_content pos:start="123:5" pos:end="191:15">
    <expr_stmt pos:start="123:5" pos:end="123:35"><expr pos:start="123:5" pos:end="123:34"><call pos:start="123:5" pos:end="123:34"><name pos:start="123:5" pos:end="123:14">QLIST_INIT</name><argument_list pos:start="123:15" pos:end="123:34">(<argument pos:start="123:16" pos:end="123:33"><expr pos:start="123:16" pos:end="123:33"><operator pos:start="123:16" pos:end="123:16">&amp;</operator><name pos:start="123:17" pos:end="123:33"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:33">cluster_allocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="124:5" pos:end="124:30"><expr pos:start="124:5" pos:end="124:29"><call pos:start="124:5" pos:end="124:29"><name pos:start="124:5" pos:end="124:15">QTAILQ_INIT</name><argument_list pos:start="124:16" pos:end="124:29">(<argument pos:start="124:17" pos:end="124:28"><expr pos:start="124:17" pos:end="124:28"><operator pos:start="124:17" pos:end="124:17">&amp;</operator><name pos:start="124:18" pos:end="124:28"><name pos:start="124:18" pos:end="124:18">s</name><operator pos:start="124:19" pos:end="124:20">-&gt;</operator><name pos:start="124:21" pos:end="124:28">discards</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="125:5" pos:end="125:31">/* read qcow2 extensions */</comment>
    <if_stmt pos:start="126:5" pos:end="191:15"><if pos:start="126:5" pos:end="191:15">if <condition pos:start="126:8" pos:end="126:71">(<expr pos:start="126:9" pos:end="126:70"><call pos:start="126:9" pos:end="126:70"><name pos:start="126:9" pos:end="126:29">qcow2_read_extensions</name><argument_list pos:start="126:30" pos:end="126:70">(<argument pos:start="126:31" pos:end="126:32"><expr pos:start="126:31" pos:end="126:32"><name pos:start="126:31" pos:end="126:32">bs</name></expr></argument>, <argument pos:start="126:35" pos:end="126:54"><expr pos:start="126:35" pos:end="126:54"><name pos:start="126:35" pos:end="126:54"><name pos:start="126:35" pos:end="126:40">header</name><operator pos:start="126:41" pos:end="126:41">.</operator><name pos:start="126:42" pos:end="126:54">header_length</name></name></expr></argument>, <argument pos:start="126:57" pos:end="126:63"><expr pos:start="126:57" pos:end="126:63"><name pos:start="126:57" pos:end="126:63">ext_end</name></expr></argument>, <argument pos:start="126:66" pos:end="126:69"><expr pos:start="126:66" pos:end="126:69"><name pos:start="126:66" pos:end="126:69">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="126:73" pos:end="191:15">{<block_content pos:start="127:9" pos:end="191:15">
        <expr_stmt pos:start="127:9" pos:end="127:22"><expr pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <operator pos:start="127:15" pos:end="127:15">-</operator><name pos:start="127:16" pos:end="127:21">EINVAL</name></expr>;</expr_stmt>
    <comment type="block" pos:start="128:5" pos:end="128:36">/* read the backing file name */</comment>
    <if_stmt pos:start="129:5" pos:end="191:15"><if pos:start="129:5" pos:end="191:15">if <condition pos:start="129:8" pos:end="129:40">(<expr pos:start="129:9" pos:end="129:39"><name pos:start="129:9" pos:end="129:34"><name pos:start="129:9" pos:end="129:14">header</name><operator pos:start="129:15" pos:end="129:15">.</operator><name pos:start="129:16" pos:end="129:34">backing_file_offset</name></name> <operator pos:start="129:36" pos:end="129:37">!=</operator> <literal type="number" pos:start="129:39" pos:end="129:39">0</literal></expr>)</condition> <block pos:start="129:42" pos:end="191:15">{<block_content pos:start="130:9" pos:end="191:15">
        <expr_stmt pos:start="130:9" pos:end="130:39"><expr pos:start="130:9" pos:end="130:38"><name pos:start="130:9" pos:end="130:11">len</name> <operator pos:start="130:13" pos:end="130:13">=</operator> <name pos:start="130:15" pos:end="130:38"><name pos:start="130:15" pos:end="130:20">header</name><operator pos:start="130:21" pos:end="130:21">.</operator><name pos:start="130:22" pos:end="130:38">backing_file_size</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="131:9" pos:end="191:15"><if pos:start="131:9" pos:end="191:15">if <condition pos:start="131:12" pos:end="131:23">(<expr pos:start="131:13" pos:end="131:22"><name pos:start="131:13" pos:end="131:15">len</name> <operator pos:start="131:17" pos:end="131:17">&gt;</operator> <literal type="number" pos:start="131:19" pos:end="131:22">1023</literal></expr>)</condition> <block pos:start="131:25" pos:end="191:15">{<block_content pos:start="132:13" pos:end="191:15">
            <expr_stmt pos:start="132:13" pos:end="132:23"><expr pos:start="132:13" pos:end="132:22"><name pos:start="132:13" pos:end="132:15">len</name> <operator pos:start="132:17" pos:end="132:17">=</operator> <literal type="number" pos:start="132:19" pos:end="132:22">1023</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="133:9" pos:end="134:48"><expr pos:start="133:9" pos:end="134:47"><name pos:start="133:9" pos:end="133:11">ret</name> <operator pos:start="133:13" pos:end="133:13">=</operator> <call pos:start="133:15" pos:end="134:47"><name pos:start="133:15" pos:end="133:24">bdrv_pread</name><argument_list pos:start="133:25" pos:end="134:47">(<argument pos:start="133:26" pos:end="133:33"><expr pos:start="133:26" pos:end="133:33"><name pos:start="133:26" pos:end="133:33"><name pos:start="133:26" pos:end="133:27">bs</name><operator pos:start="133:28" pos:end="133:29">-&gt;</operator><name pos:start="133:30" pos:end="133:33">file</name></name></expr></argument>, <argument pos:start="133:36" pos:end="133:61"><expr pos:start="133:36" pos:end="133:61"><name pos:start="133:36" pos:end="133:61"><name pos:start="133:36" pos:end="133:41">header</name><operator pos:start="133:42" pos:end="133:42">.</operator><name pos:start="133:43" pos:end="133:61">backing_file_offset</name></name></expr></argument>,
                         <argument pos:start="134:26" pos:end="134:41"><expr pos:start="134:26" pos:end="134:41"><name pos:start="134:26" pos:end="134:41"><name pos:start="134:26" pos:end="134:27">bs</name><operator pos:start="134:28" pos:end="134:29">-&gt;</operator><name pos:start="134:30" pos:end="134:41">backing_file</name></name></expr></argument>, <argument pos:start="134:44" pos:end="134:46"><expr pos:start="134:44" pos:end="134:46"><name pos:start="134:44" pos:end="134:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="135:9" pos:end="191:15"><if pos:start="135:9" pos:end="191:15">if <condition pos:start="135:12" pos:end="135:20">(<expr pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:15">ret</name> <operator pos:start="135:17" pos:end="135:17">&lt;</operator> <literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr>)</condition> <block pos:start="135:22" pos:end="191:15">{<block_content pos:start="136:9" pos:end="191:15">
        <expr_stmt pos:start="136:9" pos:end="136:37"><expr pos:start="136:9" pos:end="136:36"><name pos:start="136:9" pos:end="136:29"><name pos:start="136:9" pos:end="136:10">bs</name><operator pos:start="136:11" pos:end="136:12">-&gt;</operator><name pos:start="136:13" pos:end="136:24">backing_file</name><index pos:start="136:25" pos:end="136:29">[<expr pos:start="136:26" pos:end="136:28"><name pos:start="136:26" pos:end="136:28">len</name></expr>]</index></name> <operator pos:start="136:31" pos:end="136:31">=</operator> <literal type="char" pos:start="136:33" pos:end="136:36">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="137:5" pos:end="137:35"><expr pos:start="137:5" pos:end="137:34"><name pos:start="137:5" pos:end="137:7">ret</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="137:34"><name pos:start="137:11" pos:end="137:30">qcow2_read_snapshots</name><argument_list pos:start="137:31" pos:end="137:34">(<argument pos:start="137:32" pos:end="137:33"><expr pos:start="137:32" pos:end="137:33"><name pos:start="137:32" pos:end="137:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="138:5" pos:end="191:15"><if pos:start="138:5" pos:end="191:15">if <condition pos:start="138:8" pos:end="138:16">(<expr pos:start="138:9" pos:end="138:15"><name pos:start="138:9" pos:end="138:11">ret</name> <operator pos:start="138:13" pos:end="138:13">&lt;</operator> <literal type="number" pos:start="138:15" pos:end="138:15">0</literal></expr>)</condition> <block pos:start="138:18" pos:end="191:15">{<block_content pos:start="140:5" pos:end="191:15">
    <comment type="block" pos:start="139:5" pos:end="139:46">/* Clear unknown autoclear feature bits */</comment>
    <if_stmt pos:start="140:5" pos:end="191:15"><if pos:start="140:5" pos:end="191:15">if <condition pos:start="140:8" pos:end="140:53">(<expr pos:start="140:9" pos:end="140:52"><operator pos:start="140:9" pos:end="140:9">!</operator><name pos:start="140:10" pos:end="140:22"><name pos:start="140:10" pos:end="140:11">bs</name><operator pos:start="140:12" pos:end="140:13">-&gt;</operator><name pos:start="140:14" pos:end="140:22">read_only</name></name> <operator pos:start="140:24" pos:end="140:25">&amp;&amp;</operator> <name pos:start="140:27" pos:end="140:47"><name pos:start="140:27" pos:end="140:27">s</name><operator pos:start="140:28" pos:end="140:29">-&gt;</operator><name pos:start="140:30" pos:end="140:47">autoclear_features</name></name> <operator pos:start="140:49" pos:end="140:50">!=</operator> <literal type="number" pos:start="140:52" pos:end="140:52">0</literal></expr>)</condition> <block pos:start="140:55" pos:end="191:15">{<block_content pos:start="141:9" pos:end="191:15">
        <expr_stmt pos:start="141:9" pos:end="141:34"><expr pos:start="141:9" pos:end="141:33"><name pos:start="141:9" pos:end="141:29"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:29">autoclear_features</name></name> <operator pos:start="141:31" pos:end="141:31">=</operator> <literal type="number" pos:start="141:33" pos:end="141:33">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="142:9" pos:end="142:38"><expr pos:start="142:9" pos:end="142:37"><name pos:start="142:9" pos:end="142:11">ret</name> <operator pos:start="142:13" pos:end="142:13">=</operator> <call pos:start="142:15" pos:end="142:37"><name pos:start="142:15" pos:end="142:33">qcow2_update_header</name><argument_list pos:start="142:34" pos:end="142:37">(<argument pos:start="142:35" pos:end="142:36"><expr pos:start="142:35" pos:end="142:36"><name pos:start="142:35" pos:end="142:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="143:9" pos:end="191:15"><if pos:start="143:9" pos:end="191:15">if <condition pos:start="143:12" pos:end="143:20">(<expr pos:start="143:13" pos:end="143:19"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:17">&lt;</operator> <literal type="number" pos:start="143:19" pos:end="143:19">0</literal></expr>)</condition> <block pos:start="143:22" pos:end="191:15">{<block_content pos:start="145:5" pos:end="191:15">
    <comment type="block" pos:start="144:5" pos:end="144:26">/* Initialise locks */</comment>
    <expr_stmt pos:start="145:5" pos:end="145:33"><expr pos:start="145:5" pos:end="145:32"><call pos:start="145:5" pos:end="145:32"><name pos:start="145:5" pos:end="145:22">qemu_co_mutex_init</name><argument_list pos:start="145:23" pos:end="145:32">(<argument pos:start="145:24" pos:end="145:31"><expr pos:start="145:24" pos:end="145:31"><operator pos:start="145:24" pos:end="145:24">&amp;</operator><name pos:start="145:25" pos:end="145:31"><name pos:start="145:25" pos:end="145:25">s</name><operator pos:start="145:26" pos:end="145:27">-&gt;</operator><name pos:start="145:28" pos:end="145:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="146:5" pos:end="146:31">/* Repair image if dirty */</comment>
    <if_stmt pos:start="147:5" pos:end="191:15"><if pos:start="147:5" pos:end="191:15">if <condition pos:start="147:8" pos:end="148:58">(<expr pos:start="147:9" pos:end="148:57"><operator pos:start="147:9" pos:end="147:9">!</operator><operator pos:start="147:10" pos:end="147:10">(</operator><name pos:start="147:11" pos:end="147:15">flags</name> <operator pos:start="147:17" pos:end="147:17">&amp;</operator> <name pos:start="147:19" pos:end="147:30">BDRV_O_CHECK</name><operator pos:start="147:31" pos:end="147:31">)</operator> <operator pos:start="147:33" pos:end="147:34">&amp;&amp;</operator> <operator pos:start="147:36" pos:end="147:36">!</operator><name pos:start="147:37" pos:end="147:49"><name pos:start="147:37" pos:end="147:38">bs</name><operator pos:start="147:39" pos:end="147:40">-&gt;</operator><name pos:start="147:41" pos:end="147:49">read_only</name></name> <operator pos:start="147:51" pos:end="147:52">&amp;&amp;</operator>
        <operator pos:start="148:9" pos:end="148:9">(</operator><name pos:start="148:10" pos:end="148:33"><name pos:start="148:10" pos:end="148:10">s</name><operator pos:start="148:11" pos:end="148:12">-&gt;</operator><name pos:start="148:13" pos:end="148:33">incompatible_features</name></name> <operator pos:start="148:35" pos:end="148:35">&amp;</operator> <name pos:start="148:37" pos:end="148:56">QCOW2_INCOMPAT_DIRTY</name><operator pos:start="148:57" pos:end="148:57">)</operator></expr>)</condition> <block pos:start="148:60" pos:end="191:15">{<block_content pos:start="149:9" pos:end="191:15">
        <decl_stmt pos:start="149:9" pos:end="149:37"><decl pos:start="149:9" pos:end="149:36"><type pos:start="149:9" pos:end="149:23"><name pos:start="149:9" pos:end="149:23">BdrvCheckResult</name></type> <name pos:start="149:25" pos:end="149:30">result</name> <init pos:start="149:32" pos:end="149:36">= <expr pos:start="149:34" pos:end="149:36"><block pos:start="149:34" pos:end="149:36">{<expr pos:start="149:35" pos:end="149:35"><literal type="number" pos:start="149:35" pos:end="149:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="150:9" pos:end="150:56"><expr pos:start="150:9" pos:end="150:55"><name pos:start="150:9" pos:end="150:11">ret</name> <operator pos:start="150:13" pos:end="150:13">=</operator> <call pos:start="150:15" pos:end="150:55"><name pos:start="150:15" pos:end="150:25">qcow2_check</name><argument_list pos:start="150:26" pos:end="150:55">(<argument pos:start="150:27" pos:end="150:28"><expr pos:start="150:27" pos:end="150:28"><name pos:start="150:27" pos:end="150:28">bs</name></expr></argument>, <argument pos:start="150:31" pos:end="150:37"><expr pos:start="150:31" pos:end="150:37"><operator pos:start="150:31" pos:end="150:31">&amp;</operator><name pos:start="150:32" pos:end="150:37">result</name></expr></argument>, <argument pos:start="150:40" pos:end="150:54"><expr pos:start="150:40" pos:end="150:54"><name pos:start="150:40" pos:end="150:54">BDRV_FIX_ERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="151:9" pos:end="191:15"><if pos:start="151:9" pos:end="191:15">if <condition pos:start="151:12" pos:end="151:20">(<expr pos:start="151:13" pos:end="151:19"><name pos:start="151:13" pos:end="151:15">ret</name> <operator pos:start="151:17" pos:end="151:17">&lt;</operator> <literal type="number" pos:start="151:19" pos:end="151:19">0</literal></expr>)</condition> <block pos:start="151:22" pos:end="191:15">{<block_content pos:start="153:5" pos:end="191:15">
    <comment type="block" pos:start="152:5" pos:end="152:75">/* Enable lazy_refcounts according to image and command line options */</comment>
    <expr_stmt pos:start="153:5" pos:end="153:56"><expr pos:start="153:5" pos:end="153:55"><name pos:start="153:5" pos:end="153:8">opts</name> <operator pos:start="153:10" pos:end="153:10">=</operator> <call pos:start="153:12" pos:end="153:55"><name pos:start="153:12" pos:end="153:34">qemu_opts_create_nofail</name><argument_list pos:start="153:35" pos:end="153:55">(<argument pos:start="153:36" pos:end="153:54"><expr pos:start="153:36" pos:end="153:54"><operator pos:start="153:36" pos:end="153:36">&amp;</operator><name pos:start="153:37" pos:end="153:54">qcow2_runtime_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="154:5" pos:end="154:54"><expr pos:start="154:5" pos:end="154:53"><call pos:start="154:5" pos:end="154:53"><name pos:start="154:5" pos:end="154:26">qemu_opts_absorb_qdict</name><argument_list pos:start="154:27" pos:end="154:53">(<argument pos:start="154:28" pos:end="154:31"><expr pos:start="154:28" pos:end="154:31"><name pos:start="154:28" pos:end="154:31">opts</name></expr></argument>, <argument pos:start="154:34" pos:end="154:40"><expr pos:start="154:34" pos:end="154:40"><name pos:start="154:34" pos:end="154:40">options</name></expr></argument>, <argument pos:start="154:43" pos:end="154:52"><expr pos:start="154:43" pos:end="154:52"><operator pos:start="154:43" pos:end="154:43">&amp;</operator><name pos:start="154:44" pos:end="154:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="155:5" pos:end="191:15"><if pos:start="155:5" pos:end="191:15">if <condition pos:start="155:8" pos:end="155:33">(<expr pos:start="155:9" pos:end="155:32"><call pos:start="155:9" pos:end="155:32"><name pos:start="155:9" pos:end="155:20">error_is_set</name><argument_list pos:start="155:21" pos:end="155:32">(<argument pos:start="155:22" pos:end="155:31"><expr pos:start="155:22" pos:end="155:31"><operator pos:start="155:22" pos:end="155:22">&amp;</operator><name pos:start="155:23" pos:end="155:31">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="155:35" pos:end="191:15">{<block_content pos:start="156:9" pos:end="191:15">
        <expr_stmt pos:start="156:9" pos:end="156:37"><expr pos:start="156:9" pos:end="156:36"><call pos:start="156:9" pos:end="156:36"><name pos:start="156:9" pos:end="156:25">qerror_report_err</name><argument_list pos:start="156:26" pos:end="156:36">(<argument pos:start="156:27" pos:end="156:35"><expr pos:start="156:27" pos:end="156:35"><name pos:start="156:27" pos:end="156:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="157:9" pos:end="157:30"><expr pos:start="157:9" pos:end="157:29"><call pos:start="157:9" pos:end="157:29"><name pos:start="157:9" pos:end="157:18">error_free</name><argument_list pos:start="157:19" pos:end="157:29">(<argument pos:start="157:20" pos:end="157:28"><expr pos:start="157:20" pos:end="157:28"><name pos:start="157:20" pos:end="157:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="158:9" pos:end="158:22"><expr pos:start="158:9" pos:end="158:21"><name pos:start="158:9" pos:end="158:11">ret</name> <operator pos:start="158:13" pos:end="158:13">=</operator> <operator pos:start="158:15" pos:end="158:15">-</operator><name pos:start="158:16" pos:end="158:21">EINVAL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="159:5" pos:end="160:64"><expr pos:start="159:5" pos:end="160:63"><name pos:start="159:5" pos:end="159:25"><name pos:start="159:5" pos:end="159:5">s</name><operator pos:start="159:6" pos:end="159:7">-&gt;</operator><name pos:start="159:8" pos:end="159:25">use_lazy_refcounts</name></name> <operator pos:start="159:27" pos:end="159:27">=</operator> <call pos:start="159:29" pos:end="160:63"><name pos:start="159:29" pos:end="159:45">qemu_opt_get_bool</name><argument_list pos:start="159:46" pos:end="160:63">(<argument pos:start="159:47" pos:end="159:50"><expr pos:start="159:47" pos:end="159:50"><name pos:start="159:47" pos:end="159:50">opts</name></expr></argument>, <argument pos:start="159:53" pos:end="159:76"><expr pos:start="159:53" pos:end="159:76"><name pos:start="159:53" pos:end="159:76">QCOW2_OPT_LAZY_REFCOUNTS</name></expr></argument>,
        <argument pos:start="160:9" pos:end="160:62"><expr pos:start="160:9" pos:end="160:62"><operator pos:start="160:9" pos:end="160:9">(</operator><name pos:start="160:10" pos:end="160:31"><name pos:start="160:10" pos:end="160:10">s</name><operator pos:start="160:11" pos:end="160:12">-&gt;</operator><name pos:start="160:13" pos:end="160:31">compatible_features</name></name> <operator pos:start="160:33" pos:end="160:33">&amp;</operator> <name pos:start="160:35" pos:end="160:61">QCOW2_COMPAT_LAZY_REFCOUNTS</name><operator pos:start="160:62" pos:end="160:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="161:5" pos:end="161:56"><expr pos:start="161:5" pos:end="161:55"><name pos:start="161:5" pos:end="161:47"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:26">discard_passthrough</name><index pos:start="161:27" pos:end="161:47">[<expr pos:start="161:28" pos:end="161:46"><name pos:start="161:28" pos:end="161:46">QCOW2_DISCARD_NEVER</name></expr>]</index></name> <operator pos:start="161:49" pos:end="161:49">=</operator> <name pos:start="161:51" pos:end="161:55">false</name></expr>;</expr_stmt>
    <expr_stmt pos:start="162:5" pos:end="162:56"><expr pos:start="162:5" pos:end="162:55"><name pos:start="162:5" pos:end="162:48"><name pos:start="162:5" pos:end="162:5">s</name><operator pos:start="162:6" pos:end="162:7">-&gt;</operator><name pos:start="162:8" pos:end="162:26">discard_passthrough</name><index pos:start="162:27" pos:end="162:48">[<expr pos:start="162:28" pos:end="162:47"><name pos:start="162:28" pos:end="162:47">QCOW2_DISCARD_ALWAYS</name></expr>]</index></name> <operator pos:start="162:50" pos:end="162:50">=</operator> <name pos:start="162:52" pos:end="162:55">true</name></expr>;</expr_stmt>
    <expr_stmt pos:start="163:5" pos:end="165:48"><expr pos:start="163:5" pos:end="165:47"><name pos:start="163:5" pos:end="163:49"><name pos:start="163:5" pos:end="163:5">s</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:26">discard_passthrough</name><index pos:start="163:27" pos:end="163:49">[<expr pos:start="163:28" pos:end="163:48"><name pos:start="163:28" pos:end="163:48">QCOW2_DISCARD_REQUEST</name></expr>]</index></name> <operator pos:start="163:51" pos:end="163:51">=</operator>
        <call pos:start="164:9" pos:end="165:47"><name pos:start="164:9" pos:end="164:25">qemu_opt_get_bool</name><argument_list pos:start="164:26" pos:end="165:47">(<argument pos:start="164:27" pos:end="164:30"><expr pos:start="164:27" pos:end="164:30"><name pos:start="164:27" pos:end="164:30">opts</name></expr></argument>, <argument pos:start="164:33" pos:end="164:57"><expr pos:start="164:33" pos:end="164:57"><name pos:start="164:33" pos:end="164:57">QCOW2_OPT_DISCARD_REQUEST</name></expr></argument>,
                          <argument pos:start="165:27" pos:end="165:46"><expr pos:start="165:27" pos:end="165:46"><name pos:start="165:27" pos:end="165:31">flags</name> <operator pos:start="165:33" pos:end="165:33">&amp;</operator> <name pos:start="165:35" pos:end="165:46">BDRV_O_UNMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="166:5" pos:end="167:66"><expr pos:start="166:5" pos:end="167:65"><name pos:start="166:5" pos:end="166:50"><name pos:start="166:5" pos:end="166:5">s</name><operator pos:start="166:6" pos:end="166:7">-&gt;</operator><name pos:start="166:8" pos:end="166:26">discard_passthrough</name><index pos:start="166:27" pos:end="166:50">[<expr pos:start="166:28" pos:end="166:49"><name pos:start="166:28" pos:end="166:49">QCOW2_DISCARD_SNAPSHOT</name></expr>]</index></name> <operator pos:start="166:52" pos:end="166:52">=</operator>
        <call pos:start="167:9" pos:end="167:65"><name pos:start="167:9" pos:end="167:25">qemu_opt_get_bool</name><argument_list pos:start="167:26" pos:end="167:65">(<argument pos:start="167:27" pos:end="167:30"><expr pos:start="167:27" pos:end="167:30"><name pos:start="167:27" pos:end="167:30">opts</name></expr></argument>, <argument pos:start="167:33" pos:end="167:58"><expr pos:start="167:33" pos:end="167:58"><name pos:start="167:33" pos:end="167:58">QCOW2_OPT_DISCARD_SNAPSHOT</name></expr></argument>, <argument pos:start="167:61" pos:end="167:64"><expr pos:start="167:61" pos:end="167:64"><name pos:start="167:61" pos:end="167:64">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="168:5" pos:end="169:64"><expr pos:start="168:5" pos:end="169:63"><name pos:start="168:5" pos:end="168:47"><name pos:start="168:5" pos:end="168:5">s</name><operator pos:start="168:6" pos:end="168:7">-&gt;</operator><name pos:start="168:8" pos:end="168:26">discard_passthrough</name><index pos:start="168:27" pos:end="168:47">[<expr pos:start="168:28" pos:end="168:46"><name pos:start="168:28" pos:end="168:46">QCOW2_DISCARD_OTHER</name></expr>]</index></name> <operator pos:start="168:49" pos:end="168:49">=</operator>
        <call pos:start="169:9" pos:end="169:63"><name pos:start="169:9" pos:end="169:25">qemu_opt_get_bool</name><argument_list pos:start="169:26" pos:end="169:63">(<argument pos:start="169:27" pos:end="169:30"><expr pos:start="169:27" pos:end="169:30"><name pos:start="169:27" pos:end="169:30">opts</name></expr></argument>, <argument pos:start="169:33" pos:end="169:55"><expr pos:start="169:33" pos:end="169:55"><name pos:start="169:33" pos:end="169:55">QCOW2_OPT_DISCARD_OTHER</name></expr></argument>, <argument pos:start="169:58" pos:end="169:62"><expr pos:start="169:58" pos:end="169:62"><name pos:start="169:58" pos:end="169:62">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="170:5" pos:end="170:24"><expr pos:start="170:5" pos:end="170:23"><call pos:start="170:5" pos:end="170:23"><name pos:start="170:5" pos:end="170:17">qemu_opts_del</name><argument_list pos:start="170:18" pos:end="170:23">(<argument pos:start="170:19" pos:end="170:22"><expr pos:start="170:19" pos:end="170:22"><name pos:start="170:19" pos:end="170:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="171:5" pos:end="191:15"><if pos:start="171:5" pos:end="191:15">if <condition pos:start="171:8" pos:end="171:53">(<expr pos:start="171:9" pos:end="171:52"><name pos:start="171:9" pos:end="171:29"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:29">use_lazy_refcounts</name></name> <operator pos:start="171:31" pos:end="171:32">&amp;&amp;</operator> <name pos:start="171:34" pos:end="171:48"><name pos:start="171:34" pos:end="171:34">s</name><operator pos:start="171:35" pos:end="171:36">-&gt;</operator><name pos:start="171:37" pos:end="171:48">qcow_version</name></name> <operator pos:start="171:50" pos:end="171:50">&lt;</operator> <literal type="number" pos:start="171:52" pos:end="171:52">3</literal></expr>)</condition> <block pos:start="171:55" pos:end="191:15">{<block_content pos:start="172:9" pos:end="191:15">
        <expr_stmt pos:start="172:9" pos:end="173:72"><expr pos:start="172:9" pos:end="173:71"><call pos:start="172:9" pos:end="173:71"><name pos:start="172:9" pos:end="172:21">qerror_report</name><argument_list pos:start="172:22" pos:end="173:71">(<argument pos:start="172:23" pos:end="172:47"><expr pos:start="172:23" pos:end="172:47"><name pos:start="172:23" pos:end="172:47">ERROR_CLASS_GENERIC_ERROR</name></expr></argument>, <argument pos:start="172:50" pos:end="173:70"><expr pos:start="172:50" pos:end="173:70"><literal type="string" pos:start="172:50" pos:end="172:74">"Lazy refcounts require "</literal>
            <literal type="string" pos:start="173:13" pos:end="173:70">"a qcow2 image with at least qemu 1.1 compatibility level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="174:9" pos:end="176:0"><expr pos:start="174:9" pos:end="174:21"><name pos:start="174:9" pos:end="174:11">ret</name> <operator pos:start="174:13" pos:end="174:13">=</operator> <operator pos:start="174:15" pos:end="174:15">-</operator><name pos:start="174:16" pos:end="174:21">EINVAL</name></expr>;</expr_stmt>
<cpp:ifdef pos:start="175:1" pos:end="175:18">#<cpp:directive pos:start="175:2" pos:end="175:6">ifdef</cpp:directive> <name pos:start="175:8" pos:end="175:18">DEBUG_ALLOC</name></cpp:ifdef>
    <block pos:start="176:5" pos:end="191:15">{<block_content pos:start="177:9" pos:end="191:15">
        <decl_stmt pos:start="177:9" pos:end="177:37"><decl pos:start="177:9" pos:end="177:36"><type pos:start="177:9" pos:end="177:23"><name pos:start="177:9" pos:end="177:23">BdrvCheckResult</name></type> <name pos:start="177:25" pos:end="177:30">result</name> <init pos:start="177:32" pos:end="177:36">= <expr pos:start="177:34" pos:end="177:36"><block pos:start="177:34" pos:end="177:36">{<expr pos:start="177:35" pos:end="177:35"><literal type="number" pos:start="177:35" pos:end="177:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="178:9" pos:end="180:0"><expr pos:start="178:9" pos:end="178:45"><call pos:start="178:9" pos:end="178:45"><name pos:start="178:9" pos:end="178:29">qcow2_check_refcounts</name><argument_list pos:start="178:30" pos:end="178:45">(<argument pos:start="178:31" pos:end="178:32"><expr pos:start="178:31" pos:end="178:32"><name pos:start="178:31" pos:end="178:32">bs</name></expr></argument>, <argument pos:start="178:35" pos:end="178:41"><expr pos:start="178:35" pos:end="178:41"><operator pos:start="178:35" pos:end="178:35">&amp;</operator><name pos:start="178:36" pos:end="178:41">result</name></expr></argument>, <argument pos:start="178:44" pos:end="178:44"><expr pos:start="178:44" pos:end="178:44"><literal type="number" pos:start="178:44" pos:end="178:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="179:1" pos:end="179:6">#<cpp:directive pos:start="179:2" pos:end="179:6">endif</cpp:directive></cpp:endif>
    <return pos:start="180:5" pos:end="180:15">return <expr pos:start="180:12" pos:end="180:14"><name pos:start="180:12" pos:end="180:14">ret</name></expr>;</return>
 <label pos:start="181:2" pos:end="181:6"><name pos:start="181:2" pos:end="181:5">fail</name>:</label>
    <expr_stmt pos:start="182:5" pos:end="182:37"><expr pos:start="182:5" pos:end="182:36"><call pos:start="182:5" pos:end="182:36"><name pos:start="182:5" pos:end="182:10">g_free</name><argument_list pos:start="182:11" pos:end="182:36">(<argument pos:start="182:12" pos:end="182:35"><expr pos:start="182:12" pos:end="182:35"><name pos:start="182:12" pos:end="182:35"><name pos:start="182:12" pos:end="182:12">s</name><operator pos:start="182:13" pos:end="182:14">-&gt;</operator><name pos:start="182:15" pos:end="182:35">unknown_header_fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="183:5" pos:end="183:35"><expr pos:start="183:5" pos:end="183:34"><call pos:start="183:5" pos:end="183:34"><name pos:start="183:5" pos:end="183:30">cleanup_unknown_header_ext</name><argument_list pos:start="183:31" pos:end="183:34">(<argument pos:start="183:32" pos:end="183:33"><expr pos:start="183:32" pos:end="183:33"><name pos:start="183:32" pos:end="183:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="184:5" pos:end="184:29"><expr pos:start="184:5" pos:end="184:28"><call pos:start="184:5" pos:end="184:28"><name pos:start="184:5" pos:end="184:24">qcow2_free_snapshots</name><argument_list pos:start="184:25" pos:end="184:28">(<argument pos:start="184:26" pos:end="184:27"><expr pos:start="184:26" pos:end="184:27"><name pos:start="184:26" pos:end="184:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="185:5" pos:end="185:29"><expr pos:start="185:5" pos:end="185:28"><call pos:start="185:5" pos:end="185:28"><name pos:start="185:5" pos:end="185:24">qcow2_refcount_close</name><argument_list pos:start="185:25" pos:end="185:28">(<argument pos:start="185:26" pos:end="185:27"><expr pos:start="185:26" pos:end="185:27"><name pos:start="185:26" pos:end="185:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="186:5" pos:end="186:24"><expr pos:start="186:5" pos:end="186:23"><call pos:start="186:5" pos:end="186:23"><name pos:start="186:5" pos:end="186:10">g_free</name><argument_list pos:start="186:11" pos:end="186:23">(<argument pos:start="186:12" pos:end="186:22"><expr pos:start="186:12" pos:end="186:22"><name pos:start="186:12" pos:end="186:22"><name pos:start="186:12" pos:end="186:12">s</name><operator pos:start="186:13" pos:end="186:14">-&gt;</operator><name pos:start="186:15" pos:end="186:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="187:5" pos:end="191:15"><if pos:start="187:5" pos:end="191:15">if <condition pos:start="187:8" pos:end="187:26">(<expr pos:start="187:9" pos:end="187:25"><name pos:start="187:9" pos:end="187:25"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:25">l2_table_cache</name></name></expr>)</condition> <block pos:start="187:28" pos:end="191:15">{<block_content pos:start="188:9" pos:end="191:15">
        <expr_stmt pos:start="188:9" pos:end="188:51"><expr pos:start="188:9" pos:end="188:50"><call pos:start="188:9" pos:end="188:50"><name pos:start="188:9" pos:end="188:27">qcow2_cache_destroy</name><argument_list pos:start="188:28" pos:end="188:50">(<argument pos:start="188:29" pos:end="188:30"><expr pos:start="188:29" pos:end="188:30"><name pos:start="188:29" pos:end="188:30">bs</name></expr></argument>, <argument pos:start="188:33" pos:end="188:49"><expr pos:start="188:33" pos:end="188:49"><name pos:start="188:33" pos:end="188:49"><name pos:start="188:33" pos:end="188:33">s</name><operator pos:start="188:34" pos:end="188:35">-&gt;</operator><name pos:start="188:36" pos:end="188:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="189:5" pos:end="189:29"><expr pos:start="189:5" pos:end="189:28"><call pos:start="189:5" pos:end="189:28"><name pos:start="189:5" pos:end="189:10">g_free</name><argument_list pos:start="189:11" pos:end="189:28">(<argument pos:start="189:12" pos:end="189:27"><expr pos:start="189:12" pos:end="189:27"><name pos:start="189:12" pos:end="189:27"><name pos:start="189:12" pos:end="189:12">s</name><operator pos:start="189:13" pos:end="189:14">-&gt;</operator><name pos:start="189:15" pos:end="189:27">cluster_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="190:5" pos:end="190:32"><expr pos:start="190:5" pos:end="190:31"><call pos:start="190:5" pos:end="190:31"><name pos:start="190:5" pos:end="190:14">qemu_vfree</name><argument_list pos:start="190:15" pos:end="190:31">(<argument pos:start="190:16" pos:end="190:30"><expr pos:start="190:16" pos:end="190:30"><name pos:start="190:16" pos:end="190:30"><name pos:start="190:16" pos:end="190:16">s</name><operator pos:start="190:17" pos:end="190:18">-&gt;</operator><name pos:start="190:19" pos:end="190:30">cluster_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="191:5" pos:end="191:15">return <expr pos:start="191:12" pos:end="191:14"><name pos:start="191:12" pos:end="191:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
