<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19943.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">pci_std_vga_initfn</name><parameter_list pos:start="1:30" pos:end="1:45">(<parameter pos:start="1:31" pos:end="1:44"><decl pos:start="1:31" pos:end="1:44"><type pos:start="1:31" pos:end="1:41"><name pos:start="1:31" pos:end="1:39">PCIDevice</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:13">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">PCIVGAState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">d</name> <init pos:start="5:20" pos:end="5:53">= <expr pos:start="5:22" pos:end="5:53"><call pos:start="5:22" pos:end="5:53"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:53">(<argument pos:start="5:32" pos:end="5:42"><expr pos:start="5:32" pos:end="5:42"><name pos:start="5:32" pos:end="5:42">PCIVGAState</name></expr></argument>, <argument pos:start="5:45" pos:end="5:47"><expr pos:start="5:45" pos:end="5:47"><name pos:start="5:45" pos:end="5:47">dev</name></expr></argument>, <argument pos:start="5:50" pos:end="5:52"><expr pos:start="5:50" pos:end="5:52"><name pos:start="5:50" pos:end="5:52">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">VGACommonState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:31">= <expr pos:start="7:25" pos:end="7:31"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:31"><name pos:start="7:26" pos:end="7:26">d</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:31">vga</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:28">/* vga + console init */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:23"><expr pos:start="13:5" pos:end="13:22"><call pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:19">vga_common_init</name><argument_list pos:start="13:20" pos:end="13:22">(<argument pos:start="13:21" pos:end="13:21"><expr pos:start="13:21" pos:end="13:21"><name pos:start="13:21" pos:end="13:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:73"><expr pos:start="15:5" pos:end="15:72"><call pos:start="15:5" pos:end="15:72"><name pos:start="15:5" pos:end="15:12">vga_init</name><argument_list pos:start="15:13" pos:end="15:72">(<argument pos:start="15:14" pos:end="15:14"><expr pos:start="15:14" pos:end="15:14"><name pos:start="15:14" pos:end="15:14">s</name></expr></argument>, <argument pos:start="15:17" pos:end="15:38"><expr pos:start="15:17" pos:end="15:38"><call pos:start="15:17" pos:end="15:38"><name pos:start="15:17" pos:end="15:33">pci_address_space</name><argument_list pos:start="15:34" pos:end="15:38">(<argument pos:start="15:35" pos:end="15:37"><expr pos:start="15:35" pos:end="15:37"><name pos:start="15:35" pos:end="15:37">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="15:41" pos:end="15:65"><expr pos:start="15:41" pos:end="15:65"><call pos:start="15:41" pos:end="15:65"><name pos:start="15:41" pos:end="15:60">pci_address_space_io</name><argument_list pos:start="15:61" pos:end="15:65">(<argument pos:start="15:62" pos:end="15:64"><expr pos:start="15:62" pos:end="15:64"><name pos:start="15:62" pos:end="15:64">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="15:68" pos:end="15:71"><expr pos:start="15:68" pos:end="15:71"><name pos:start="15:68" pos:end="15:71">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:69"><expr pos:start="19:5" pos:end="21:68"><name pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:10">con</name></name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="21:68"><name pos:start="19:14" pos:end="19:33">graphic_console_init</name><argument_list pos:start="19:34" pos:end="21:68">(<argument pos:start="19:35" pos:end="19:43"><expr pos:start="19:35" pos:end="19:43"><name pos:start="19:35" pos:end="19:43"><name pos:start="19:35" pos:end="19:35">s</name><operator pos:start="19:36" pos:end="19:37">-&gt;</operator><name pos:start="19:38" pos:end="19:43">update</name></name></expr></argument>, <argument pos:start="19:46" pos:end="19:58"><expr pos:start="19:46" pos:end="19:58"><name pos:start="19:46" pos:end="19:58"><name pos:start="19:46" pos:end="19:46">s</name><operator pos:start="19:47" pos:end="19:48">-&gt;</operator><name pos:start="19:49" pos:end="19:58">invalidate</name></name></expr></argument>,

                                  <argument pos:start="21:35" pos:end="21:48"><expr pos:start="21:35" pos:end="21:48"><name pos:start="21:35" pos:end="21:48"><name pos:start="21:35" pos:end="21:35">s</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:48">screen_dump</name></name></expr></argument>, <argument pos:start="21:51" pos:end="21:64"><expr pos:start="21:51" pos:end="21:64"><name pos:start="21:51" pos:end="21:64"><name pos:start="21:51" pos:end="21:51">s</name><operator pos:start="21:52" pos:end="21:53">-&gt;</operator><name pos:start="21:54" pos:end="21:64">text_update</name></name></expr></argument>, <argument pos:start="21:67" pos:end="21:67"><expr pos:start="21:67" pos:end="21:67"><name pos:start="21:67" pos:end="21:67">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:50">/* XXX: VGA_RAM_SIZE must be a power of two */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:74"><expr pos:start="27:5" pos:end="27:73"><call pos:start="27:5" pos:end="27:73"><name pos:start="27:5" pos:end="27:20">pci_register_bar</name><argument_list pos:start="27:21" pos:end="27:73">(<argument pos:start="27:22" pos:end="27:28"><expr pos:start="27:22" pos:end="27:28"><operator pos:start="27:22" pos:end="27:22">&amp;</operator><name pos:start="27:23" pos:end="27:28"><name pos:start="27:23" pos:end="27:23">d</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:28">dev</name></name></expr></argument>, <argument pos:start="27:31" pos:end="27:31"><expr pos:start="27:31" pos:end="27:31"><literal type="number" pos:start="27:31" pos:end="27:31">0</literal></expr></argument>, <argument pos:start="27:34" pos:end="27:62"><expr pos:start="27:34" pos:end="27:62"><name pos:start="27:34" pos:end="27:62">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr></argument>, <argument pos:start="27:65" pos:end="27:72"><expr pos:start="27:65" pos:end="27:72"><operator pos:start="27:65" pos:end="27:65">&amp;</operator><name pos:start="27:66" pos:end="27:72"><name pos:start="27:66" pos:end="27:66">s</name><operator pos:start="27:67" pos:end="27:68">-&gt;</operator><name pos:start="27:69" pos:end="27:72">vram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:42">/* mmio bar for vga register access */</comment>

    <if_stmt pos:start="33:5" pos:end="57:5"><if pos:start="33:5" pos:end="57:5">if <condition pos:start="33:8" pos:end="33:51">(<expr pos:start="33:9" pos:end="33:50"><name pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:9">d</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:16">flags</name></name> <operator pos:start="33:18" pos:end="33:18">&amp;</operator> <operator pos:start="33:20" pos:end="33:20">(</operator><literal type="number" pos:start="33:21" pos:end="33:21">1</literal> <operator pos:start="33:23" pos:end="33:24">&lt;&lt;</operator> <name pos:start="33:26" pos:end="33:49">PCI_VGA_FLAG_ENABLE_MMIO</name><operator pos:start="33:50" pos:end="33:50">)</operator></expr>)</condition> <block pos:start="33:53" pos:end="57:5">{<block_content pos:start="35:9" pos:end="55:78">

        <expr_stmt pos:start="35:9" pos:end="35:55"><expr pos:start="35:9" pos:end="35:54"><call pos:start="35:9" pos:end="35:54"><name pos:start="35:9" pos:end="35:26">memory_region_init</name><argument_list pos:start="35:27" pos:end="35:54">(<argument pos:start="35:28" pos:end="35:35"><expr pos:start="35:28" pos:end="35:35"><operator pos:start="35:28" pos:end="35:28">&amp;</operator><name pos:start="35:29" pos:end="35:35"><name pos:start="35:29" pos:end="35:29">d</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:35">mmio</name></name></expr></argument>, <argument pos:start="35:38" pos:end="35:47"><expr pos:start="35:38" pos:end="35:47"><literal type="string" pos:start="35:38" pos:end="35:47">"vga.mmio"</literal></expr></argument>, <argument pos:start="35:50" pos:end="35:53"><expr pos:start="35:50" pos:end="35:53"><literal type="number" pos:start="35:50" pos:end="35:53">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="39:75"><expr pos:start="37:9" pos:end="39:74"><call pos:start="37:9" pos:end="39:74"><name pos:start="37:9" pos:end="37:29">memory_region_init_io</name><argument_list pos:start="37:30" pos:end="39:74">(<argument pos:start="37:31" pos:end="37:40"><expr pos:start="37:31" pos:end="37:40"><operator pos:start="37:31" pos:end="37:31">&amp;</operator><name pos:start="37:32" pos:end="37:40"><name pos:start="37:32" pos:end="37:32">d</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:40">ioport</name></name></expr></argument>, <argument pos:start="37:43" pos:end="37:61"><expr pos:start="37:43" pos:end="37:61"><operator pos:start="37:43" pos:end="37:43">&amp;</operator><name pos:start="37:44" pos:end="37:61">pci_vga_ioport_ops</name></expr></argument>, <argument pos:start="37:64" pos:end="37:64"><expr pos:start="37:64" pos:end="37:64"><name pos:start="37:64" pos:end="37:64">d</name></expr></argument>,

                              <argument pos:start="39:31" pos:end="39:52"><expr pos:start="39:31" pos:end="39:52"><literal type="string" pos:start="39:31" pos:end="39:52">"vga ioports remapped"</literal></expr></argument>, <argument pos:start="39:55" pos:end="39:73"><expr pos:start="39:55" pos:end="39:73"><name pos:start="39:55" pos:end="39:73">PCI_VGA_IOPORT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="43:75"><expr pos:start="41:9" pos:end="43:74"><call pos:start="41:9" pos:end="43:74"><name pos:start="41:9" pos:end="41:29">memory_region_init_io</name><argument_list pos:start="41:30" pos:end="43:74">(<argument pos:start="41:31" pos:end="41:39"><expr pos:start="41:31" pos:end="41:39"><operator pos:start="41:31" pos:end="41:31">&amp;</operator><name pos:start="41:32" pos:end="41:39"><name pos:start="41:32" pos:end="41:32">d</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:39">bochs</name></name></expr></argument>, <argument pos:start="41:42" pos:end="41:59"><expr pos:start="41:42" pos:end="41:59"><operator pos:start="41:42" pos:end="41:42">&amp;</operator><name pos:start="41:43" pos:end="41:59">pci_vga_bochs_ops</name></expr></argument>, <argument pos:start="41:62" pos:end="41:62"><expr pos:start="41:62" pos:end="41:62"><name pos:start="41:62" pos:end="41:62">d</name></expr></argument>,

                              <argument pos:start="43:31" pos:end="43:53"><expr pos:start="43:31" pos:end="43:53"><literal type="string" pos:start="43:31" pos:end="43:53">"bochs dispi interface"</literal></expr></argument>, <argument pos:start="43:56" pos:end="43:73"><expr pos:start="43:56" pos:end="43:73"><name pos:start="43:56" pos:end="43:73">PCI_VGA_BOCHS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="49:48"><expr pos:start="47:9" pos:end="49:47"><call pos:start="47:9" pos:end="49:47"><name pos:start="47:9" pos:end="47:35">memory_region_add_subregion</name><argument_list pos:start="47:36" pos:end="49:47">(<argument pos:start="47:37" pos:end="47:44"><expr pos:start="47:37" pos:end="47:44"><operator pos:start="47:37" pos:end="47:37">&amp;</operator><name pos:start="47:38" pos:end="47:44"><name pos:start="47:38" pos:end="47:38">d</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:44">mmio</name></name></expr></argument>, <argument pos:start="47:47" pos:end="47:67"><expr pos:start="47:47" pos:end="47:67"><name pos:start="47:47" pos:end="47:67">PCI_VGA_IOPORT_OFFSET</name></expr></argument>,

                                    <argument pos:start="49:37" pos:end="49:46"><expr pos:start="49:37" pos:end="49:46"><operator pos:start="49:37" pos:end="49:37">&amp;</operator><name pos:start="49:38" pos:end="49:46"><name pos:start="49:38" pos:end="49:38">d</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:46">ioport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="53:47"><expr pos:start="51:9" pos:end="53:46"><call pos:start="51:9" pos:end="53:46"><name pos:start="51:9" pos:end="51:35">memory_region_add_subregion</name><argument_list pos:start="51:36" pos:end="53:46">(<argument pos:start="51:37" pos:end="51:44"><expr pos:start="51:37" pos:end="51:44"><operator pos:start="51:37" pos:end="51:37">&amp;</operator><name pos:start="51:38" pos:end="51:44"><name pos:start="51:38" pos:end="51:38">d</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:44">mmio</name></name></expr></argument>, <argument pos:start="51:47" pos:end="51:66"><expr pos:start="51:47" pos:end="51:66"><name pos:start="51:47" pos:end="51:66">PCI_VGA_BOCHS_OFFSET</name></expr></argument>,

                                    <argument pos:start="53:37" pos:end="53:45"><expr pos:start="53:37" pos:end="53:45"><operator pos:start="53:37" pos:end="53:37">&amp;</operator><name pos:start="53:38" pos:end="53:45"><name pos:start="53:38" pos:end="53:38">d</name><operator pos:start="53:39" pos:end="53:40">-&gt;</operator><name pos:start="53:41" pos:end="53:45">bochs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:78"><expr pos:start="55:9" pos:end="55:77"><call pos:start="55:9" pos:end="55:77"><name pos:start="55:9" pos:end="55:24">pci_register_bar</name><argument_list pos:start="55:25" pos:end="55:77">(<argument pos:start="55:26" pos:end="55:32"><expr pos:start="55:26" pos:end="55:32"><operator pos:start="55:26" pos:end="55:26">&amp;</operator><name pos:start="55:27" pos:end="55:32"><name pos:start="55:27" pos:end="55:27">d</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:32">dev</name></name></expr></argument>, <argument pos:start="55:35" pos:end="55:35"><expr pos:start="55:35" pos:end="55:35"><literal type="number" pos:start="55:35" pos:end="55:35">2</literal></expr></argument>, <argument pos:start="55:38" pos:end="55:66"><expr pos:start="55:38" pos:end="55:66"><name pos:start="55:38" pos:end="55:66">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>, <argument pos:start="55:69" pos:end="55:76"><expr pos:start="55:69" pos:end="55:76"><operator pos:start="55:69" pos:end="55:69">&amp;</operator><name pos:start="55:70" pos:end="55:76"><name pos:start="55:70" pos:end="55:70">d</name><operator pos:start="55:71" pos:end="55:72">-&gt;</operator><name pos:start="55:73" pos:end="55:76">mmio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:22">(<expr pos:start="61:9" pos:end="61:21"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:21"><name pos:start="61:10" pos:end="61:12">dev</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:21">rom_bar</name></name></expr>)</condition> <block pos:start="61:24" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:48">

        <comment type="block" pos:start="63:9" pos:end="63:50">/* compatibility with pc-0.13 and older */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:48"><expr pos:start="65:9" pos:end="65:47"><call pos:start="65:9" pos:end="65:47"><name pos:start="65:9" pos:end="65:20">vga_init_vbe</name><argument_list pos:start="65:21" pos:end="65:47">(<argument pos:start="65:22" pos:end="65:22"><expr pos:start="65:22" pos:end="65:22"><name pos:start="65:22" pos:end="65:22">s</name></expr></argument>, <argument pos:start="65:25" pos:end="65:46"><expr pos:start="65:25" pos:end="65:46"><call pos:start="65:25" pos:end="65:46"><name pos:start="65:25" pos:end="65:41">pci_address_space</name><argument_list pos:start="65:42" pos:end="65:46">(<argument pos:start="65:43" pos:end="65:45"><expr pos:start="65:43" pos:end="65:45"><name pos:start="65:43" pos:end="65:45">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
