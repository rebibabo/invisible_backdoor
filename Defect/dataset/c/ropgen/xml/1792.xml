<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1792.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">tlb_info</name><parameter_list pos:start="1:21" pos:end="1:34">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:30"><name pos:start="1:22" pos:end="1:28">Monitor</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">mon</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:5">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">l1</name></decl>, <decl pos:start="7:13" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:14">l2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">pgd</name></decl>, <decl pos:start="9:19" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:19" pos:end="9:21">pde</name></decl>, <decl pos:start="9:24" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:24" pos:end="9:26">pte</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:24"><expr pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:7">env</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:23"><name pos:start="13:11" pos:end="13:21">mon_get_cpu</name><argument_list pos:start="13:22" pos:end="13:23">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:36">(<expr pos:start="17:9" pos:end="17:35"><operator pos:start="17:9" pos:end="17:9">!</operator><operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:20"><name pos:start="17:11" pos:end="17:13">env</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:17">cr</name><index pos:start="17:18" pos:end="17:20">[<expr pos:start="17:19" pos:end="17:19"><literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>]</index></name> <operator pos:start="17:22" pos:end="17:22">&amp;</operator> <name pos:start="17:24" pos:end="17:34">CR0_PG_MASK</name><operator pos:start="17:35" pos:end="17:35">)</operator></expr>)</condition> <block pos:start="17:38" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:45"><expr pos:start="19:9" pos:end="19:44"><call pos:start="19:9" pos:end="19:44"><name pos:start="19:9" pos:end="19:22">monitor_printf</name><argument_list pos:start="19:23" pos:end="19:44">(<argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">mon</name></expr></argument>, <argument pos:start="19:29" pos:end="19:43"><expr pos:start="19:29" pos:end="19:43"><literal type="string" pos:start="19:29" pos:end="19:43">"PG disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:30"><expr pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:7">pgd</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:20"><name pos:start="25:11" pos:end="25:13">env</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:17">cr</name><index pos:start="25:18" pos:end="25:20">[<expr pos:start="25:19" pos:end="25:19"><literal type="number" pos:start="25:19" pos:end="25:19">3</literal></expr>]</index></name> <operator pos:start="25:22" pos:end="25:22">&amp;</operator> <operator pos:start="25:24" pos:end="25:24">~</operator><literal type="number" pos:start="25:25" pos:end="25:29">0xfff</literal></expr>;</expr_stmt>

    <for pos:start="27:5" pos:end="65:5">for<control pos:start="27:8" pos:end="27:32">(<init pos:start="27:9" pos:end="27:15"><expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:10">l1</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:26"><expr pos:start="27:17" pos:end="27:25"><name pos:start="27:17" pos:end="27:18">l1</name> <operator pos:start="27:20" pos:end="27:20">&lt;</operator> <literal type="number" pos:start="27:22" pos:end="27:25">1024</literal></expr>;</condition> <incr pos:start="27:28" pos:end="27:31"><expr pos:start="27:28" pos:end="27:31"><name pos:start="27:28" pos:end="27:29">l1</name><operator pos:start="27:30" pos:end="27:31">++</operator></expr></incr>)</control> <block pos:start="27:34" pos:end="65:5">{<block_content pos:start="29:9" pos:end="63:9">

        <expr_stmt pos:start="29:9" pos:end="29:67"><expr pos:start="29:9" pos:end="29:66"><call pos:start="29:9" pos:end="29:66"><name pos:start="29:9" pos:end="29:32">cpu_physical_memory_read</name><argument_list pos:start="29:33" pos:end="29:66">(<argument pos:start="29:34" pos:end="29:45"><expr pos:start="29:34" pos:end="29:45"><name pos:start="29:34" pos:end="29:36">pgd</name> <operator pos:start="29:38" pos:end="29:38">+</operator> <name pos:start="29:40" pos:end="29:41">l1</name> <operator pos:start="29:43" pos:end="29:43">*</operator> <literal type="number" pos:start="29:45" pos:end="29:45">4</literal></expr></argument>, <argument pos:start="29:48" pos:end="29:62"><expr pos:start="29:48" pos:end="29:62"><operator pos:start="29:48" pos:end="29:48">(</operator><name pos:start="29:49" pos:end="29:55">uint8_t</name> <operator pos:start="29:57" pos:end="29:57">*</operator><operator pos:start="29:58" pos:end="29:58">)</operator><operator pos:start="29:59" pos:end="29:59">&amp;</operator><name pos:start="29:60" pos:end="29:62">pde</name></expr></argument>, <argument pos:start="29:65" pos:end="29:65"><expr pos:start="29:65" pos:end="29:65"><literal type="number" pos:start="29:65" pos:end="29:65">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:31"><expr pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:11">pde</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:30"><name pos:start="31:15" pos:end="31:25">le32_to_cpu</name><argument_list pos:start="31:26" pos:end="31:30">(<argument pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><name pos:start="31:27" pos:end="31:29">pde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="63:9"><if pos:start="33:9" pos:end="63:9">if <condition pos:start="33:12" pos:end="33:34">(<expr pos:start="33:13" pos:end="33:33"><name pos:start="33:13" pos:end="33:15">pde</name> <operator pos:start="33:17" pos:end="33:17">&amp;</operator> <name pos:start="33:19" pos:end="33:33">PG_PRESENT_MASK</name></expr>)</condition> <block pos:start="33:36" pos:end="63:9">{<block_content pos:start="35:13" pos:end="61:13">

            <if_stmt pos:start="35:13" pos:end="61:13"><if pos:start="35:13" pos:end="39:13">if <condition pos:start="35:16" pos:end="35:67">(<expr pos:start="35:17" pos:end="35:66"><operator pos:start="35:17" pos:end="35:17">(</operator><name pos:start="35:18" pos:end="35:20">pde</name> <operator pos:start="35:22" pos:end="35:22">&amp;</operator> <name pos:start="35:24" pos:end="35:34">PG_PSE_MASK</name><operator pos:start="35:35" pos:end="35:35">)</operator> <operator pos:start="35:37" pos:end="35:38">&amp;&amp;</operator> <operator pos:start="35:40" pos:end="35:40">(</operator><name pos:start="35:41" pos:end="35:50"><name pos:start="35:41" pos:end="35:43">env</name><operator pos:start="35:44" pos:end="35:45">-&gt;</operator><name pos:start="35:46" pos:end="35:47">cr</name><index pos:start="35:48" pos:end="35:50">[<expr pos:start="35:49" pos:end="35:49"><literal type="number" pos:start="35:49" pos:end="35:49">4</literal></expr>]</index></name> <operator pos:start="35:52" pos:end="35:52">&amp;</operator> <name pos:start="35:54" pos:end="35:65">CR4_PSE_MASK</name><operator pos:start="35:66" pos:end="35:66">)</operator></expr>)</condition> <block pos:start="35:69" pos:end="39:13">{<block_content pos:start="37:17" pos:end="37:66">

                <expr_stmt pos:start="37:17" pos:end="37:66"><expr pos:start="37:17" pos:end="37:65"><call pos:start="37:17" pos:end="37:65"><name pos:start="37:17" pos:end="37:25">print_pte</name><argument_list pos:start="37:26" pos:end="37:65">(<argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">mon</name></expr></argument>, <argument pos:start="37:32" pos:end="37:41"><expr pos:start="37:32" pos:end="37:41"><operator pos:start="37:32" pos:end="37:32">(</operator><name pos:start="37:33" pos:end="37:34">l1</name> <operator pos:start="37:36" pos:end="37:37">&lt;&lt;</operator> <literal type="number" pos:start="37:39" pos:end="37:40">22</literal><operator pos:start="37:41" pos:end="37:41">)</operator></expr></argument>, <argument pos:start="37:44" pos:end="37:46"><expr pos:start="37:44" pos:end="37:46"><name pos:start="37:44" pos:end="37:46">pde</name></expr></argument>, <argument pos:start="37:49" pos:end="37:64"><expr pos:start="37:49" pos:end="37:64"><operator pos:start="37:49" pos:end="37:49">~</operator><operator pos:start="37:50" pos:end="37:50">(</operator><operator pos:start="37:51" pos:end="37:51">(</operator><literal type="number" pos:start="37:52" pos:end="37:52">1</literal> <operator pos:start="37:54" pos:end="37:55">&lt;&lt;</operator> <literal type="number" pos:start="37:57" pos:end="37:58">20</literal><operator pos:start="37:59" pos:end="37:59">)</operator> <operator pos:start="37:61" pos:end="37:61">-</operator> <literal type="number" pos:start="37:63" pos:end="37:63">1</literal><operator pos:start="37:64" pos:end="37:64">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="39:15" pos:end="61:13">else <block pos:start="39:20" pos:end="61:13">{<block_content pos:start="41:17" pos:end="59:17">

                <for pos:start="41:17" pos:end="59:17">for<control pos:start="41:20" pos:end="41:44">(<init pos:start="41:21" pos:end="41:27"><expr pos:start="41:21" pos:end="41:26"><name pos:start="41:21" pos:end="41:22">l2</name> <operator pos:start="41:24" pos:end="41:24">=</operator> <literal type="number" pos:start="41:26" pos:end="41:26">0</literal></expr>;</init> <condition pos:start="41:29" pos:end="41:38"><expr pos:start="41:29" pos:end="41:37"><name pos:start="41:29" pos:end="41:30">l2</name> <operator pos:start="41:32" pos:end="41:32">&lt;</operator> <literal type="number" pos:start="41:34" pos:end="41:37">1024</literal></expr>;</condition> <incr pos:start="41:40" pos:end="41:43"><expr pos:start="41:40" pos:end="41:43"><name pos:start="41:40" pos:end="41:41">l2</name><operator pos:start="41:42" pos:end="41:43">++</operator></expr></incr>)</control> <block pos:start="41:46" pos:end="59:17">{<block_content pos:start="43:21" pos:end="57:21">

                    <expr_stmt pos:start="43:21" pos:end="45:65"><expr pos:start="43:21" pos:end="45:64"><call pos:start="43:21" pos:end="45:64"><name pos:start="43:21" pos:end="43:44">cpu_physical_memory_read</name><argument_list pos:start="43:45" pos:end="45:64">(<argument pos:start="43:46" pos:end="43:68"><expr pos:start="43:46" pos:end="43:68"><operator pos:start="43:46" pos:end="43:46">(</operator><name pos:start="43:47" pos:end="43:49">pde</name> <operator pos:start="43:51" pos:end="43:51">&amp;</operator> <operator pos:start="43:53" pos:end="43:53">~</operator><literal type="number" pos:start="43:54" pos:end="43:58">0xfff</literal><operator pos:start="43:59" pos:end="43:59">)</operator> <operator pos:start="43:61" pos:end="43:61">+</operator> <name pos:start="43:63" pos:end="43:64">l2</name> <operator pos:start="43:66" pos:end="43:66">*</operator> <literal type="number" pos:start="43:68" pos:end="43:68">4</literal></expr></argument>,

                                             <argument pos:start="45:46" pos:end="45:60"><expr pos:start="45:46" pos:end="45:60"><operator pos:start="45:46" pos:end="45:46">(</operator><name pos:start="45:47" pos:end="45:53">uint8_t</name> <operator pos:start="45:55" pos:end="45:55">*</operator><operator pos:start="45:56" pos:end="45:56">)</operator><operator pos:start="45:57" pos:end="45:57">&amp;</operator><name pos:start="45:58" pos:end="45:60">pte</name></expr></argument>, <argument pos:start="45:63" pos:end="45:63"><expr pos:start="45:63" pos:end="45:63"><literal type="number" pos:start="45:63" pos:end="45:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="47:21" pos:end="47:43"><expr pos:start="47:21" pos:end="47:42"><name pos:start="47:21" pos:end="47:23">pte</name> <operator pos:start="47:25" pos:end="47:25">=</operator> <call pos:start="47:27" pos:end="47:42"><name pos:start="47:27" pos:end="47:37">le32_to_cpu</name><argument_list pos:start="47:38" pos:end="47:42">(<argument pos:start="47:39" pos:end="47:41"><expr pos:start="47:39" pos:end="47:41"><name pos:start="47:39" pos:end="47:41">pte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="49:21" pos:end="57:21"><if pos:start="49:21" pos:end="57:21">if <condition pos:start="49:24" pos:end="49:46">(<expr pos:start="49:25" pos:end="49:45"><name pos:start="49:25" pos:end="49:27">pte</name> <operator pos:start="49:29" pos:end="49:29">&amp;</operator> <name pos:start="49:31" pos:end="49:45">PG_PRESENT_MASK</name></expr>)</condition> <block pos:start="49:48" pos:end="57:21">{<block_content pos:start="51:25" pos:end="55:42">

                        <expr_stmt pos:start="51:25" pos:end="55:42"><expr pos:start="51:25" pos:end="55:41"><call pos:start="51:25" pos:end="55:41"><name pos:start="51:25" pos:end="51:33">print_pte</name><argument_list pos:start="51:34" pos:end="55:41">(<argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:37">mon</name></expr></argument>, <argument pos:start="51:40" pos:end="51:62"><expr pos:start="51:40" pos:end="51:62"><operator pos:start="51:40" pos:end="51:40">(</operator><name pos:start="51:41" pos:end="51:42">l1</name> <operator pos:start="51:44" pos:end="51:45">&lt;&lt;</operator> <literal type="number" pos:start="51:47" pos:end="51:48">22</literal><operator pos:start="51:49" pos:end="51:49">)</operator> <operator pos:start="51:51" pos:end="51:51">+</operator> <operator pos:start="51:53" pos:end="51:53">(</operator><name pos:start="51:54" pos:end="51:55">l2</name> <operator pos:start="51:57" pos:end="51:58">&lt;&lt;</operator> <literal type="number" pos:start="51:60" pos:end="51:61">12</literal><operator pos:start="51:62" pos:end="51:62">)</operator></expr></argument>,

                                  <argument pos:start="53:35" pos:end="53:52"><expr pos:start="53:35" pos:end="53:52"><name pos:start="53:35" pos:end="53:37">pte</name> <operator pos:start="53:39" pos:end="53:39">&amp;</operator> <operator pos:start="53:41" pos:end="53:41">~</operator><name pos:start="53:42" pos:end="53:52">PG_PSE_MASK</name></expr></argument>,

                                  <argument pos:start="55:35" pos:end="55:40"><expr pos:start="55:35" pos:end="55:40"><operator pos:start="55:35" pos:end="55:35">~</operator><literal type="number" pos:start="55:36" pos:end="55:40">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
