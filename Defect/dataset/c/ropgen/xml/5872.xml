<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5872.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">qemu_read_password</name><parameter_list pos:start="1:23" pos:end="1:47">(<parameter pos:start="1:24" pos:end="1:32"><decl pos:start="1:24" pos:end="1:32"><type pos:start="1:24" pos:end="1:32"><name pos:start="1:24" pos:end="1:27">char</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">buf</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:37">int</name></type> <name pos:start="1:39" pos:end="1:46">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:15">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:14">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:25"><expr pos:start="11:5" pos:end="11:24"><call pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:10">printf</name><argument_list pos:start="11:11" pos:end="11:24">(<argument pos:start="11:12" pos:end="11:23"><expr pos:start="11:12" pos:end="11:23"><literal type="string" pos:start="11:12" pos:end="11:23">"password: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:19"><expr pos:start="13:5" pos:end="13:18"><call pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:10">fflush</name><argument_list pos:start="13:11" pos:end="13:18">(<argument pos:start="13:12" pos:end="13:17"><expr pos:start="13:12" pos:end="13:17"><name pos:start="13:12" pos:end="13:17">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:16"><expr pos:start="15:5" pos:end="15:15"><call pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">term_init</name><argument_list pos:start="15:14" pos:end="15:15">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:10"><expr pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:5">i</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <literal type="number" pos:start="17:9" pos:end="17:9">0</literal></expr>;</expr_stmt>

    <for pos:start="19:5" pos:end="61:5">for <control pos:start="19:9" pos:end="19:12">(<init pos:start="19:10" pos:end="19:10">;</init><condition pos:start="19:11" pos:end="19:11">;</condition><incr/>)</control> <block pos:start="19:14" pos:end="61:5">{<block_content pos:start="21:9" pos:end="59:9">

        <expr_stmt pos:start="21:9" pos:end="21:30"><expr pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:29"><name pos:start="21:15" pos:end="21:18">read</name><argument_list pos:start="21:19" pos:end="21:29">(<argument pos:start="21:20" pos:end="21:20"><expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr></argument>, <argument pos:start="21:23" pos:end="21:25"><expr pos:start="21:23" pos:end="21:25"><operator pos:start="21:23" pos:end="21:23">&amp;</operator><name pos:start="21:24" pos:end="21:25">ch</name></expr></argument>, <argument pos:start="21:28" pos:end="21:28"><expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="59:9"><if pos:start="23:9" pos:end="35:9">if <condition pos:start="23:12" pos:end="23:22">(<expr pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:15">ret</name> <operator pos:start="23:17" pos:end="23:18">==</operator> <operator pos:start="23:20" pos:end="23:20">-</operator><literal type="number" pos:start="23:21" pos:end="23:21">1</literal></expr>)</condition> <block pos:start="23:24" pos:end="35:9">{<block_content pos:start="25:13" pos:end="33:13">

            <if_stmt pos:start="25:13" pos:end="33:13"><if pos:start="25:13" pos:end="29:13">if <condition pos:start="25:16" pos:end="25:50">(<expr pos:start="25:17" pos:end="25:49"><name pos:start="25:17" pos:end="25:21">errno</name> <operator pos:start="25:23" pos:end="25:24">==</operator> <name pos:start="25:26" pos:end="25:31">EAGAIN</name> <operator pos:start="25:33" pos:end="25:34">||</operator> <name pos:start="25:36" pos:end="25:40">errno</name> <operator pos:start="25:42" pos:end="25:43">==</operator> <name pos:start="25:45" pos:end="25:49">EINTR</name></expr>)</condition> <block pos:start="25:52" pos:end="29:13">{<block_content pos:start="27:17" pos:end="27:25">

                <continue pos:start="27:17" pos:end="27:25">continue;</continue>

            </block_content>}</block></if> <else pos:start="29:15" pos:end="33:13">else <block pos:start="29:20" pos:end="33:13">{<block_content pos:start="31:17" pos:end="31:22">

                <break pos:start="31:17" pos:end="31:22">break;</break>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="35:11" pos:end="41:9">else if <condition pos:start="35:19" pos:end="35:28">(<expr pos:start="35:20" pos:end="35:27"><name pos:start="35:20" pos:end="35:22">ret</name> <operator pos:start="35:24" pos:end="35:25">==</operator> <literal type="number" pos:start="35:27" pos:end="35:27">0</literal></expr>)</condition> <block pos:start="35:30" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:18">

            <expr_stmt pos:start="37:13" pos:end="37:21"><expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <operator pos:start="37:19" pos:end="37:19">-</operator><literal type="number" pos:start="37:20" pos:end="37:20">1</literal></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        </block_content>}</block></if> <else pos:start="41:11" pos:end="59:9">else <block pos:start="41:16" pos:end="59:9">{<block_content pos:start="43:13" pos:end="57:13">

            <if_stmt pos:start="43:13" pos:end="51:13"><if pos:start="43:13" pos:end="51:13">if <condition pos:start="43:16" pos:end="45:27">(<expr pos:start="43:17" pos:end="45:26"><name pos:start="43:17" pos:end="43:18">ch</name> <operator pos:start="43:20" pos:end="43:21">==</operator> <literal type="char" pos:start="43:23" pos:end="43:26">'\r'</literal> <operator pos:start="43:28" pos:end="43:29">||</operator>

                <name pos:start="45:17" pos:end="45:18">ch</name> <operator pos:start="45:20" pos:end="45:21">==</operator> <literal type="char" pos:start="45:23" pos:end="45:26">'\n'</literal></expr>)</condition> <block pos:start="45:29" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:22">

                <expr_stmt pos:start="47:17" pos:end="47:24"><expr pos:start="47:17" pos:end="47:23"><name pos:start="47:17" pos:end="47:19">ret</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <literal type="number" pos:start="47:23" pos:end="47:23">0</literal></expr>;</expr_stmt>

                <break pos:start="49:17" pos:end="49:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="53:13" pos:end="57:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:35">(<expr pos:start="53:17" pos:end="53:34"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <operator pos:start="53:21" pos:end="53:21">(</operator><name pos:start="53:22" pos:end="53:29">buf_size</name> <operator pos:start="53:31" pos:end="53:31">-</operator> <literal type="number" pos:start="53:33" pos:end="53:33">1</literal><operator pos:start="53:34" pos:end="53:34">)</operator></expr>)</condition> <block pos:start="53:37" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:30">

                <expr_stmt pos:start="55:17" pos:end="55:30"><expr pos:start="55:17" pos:end="55:29"><name pos:start="55:17" pos:end="55:24"><name pos:start="55:17" pos:end="55:19">buf</name><index pos:start="55:20" pos:end="55:24">[<expr pos:start="55:21" pos:end="55:23"><name pos:start="55:21" pos:end="55:21">i</name><operator pos:start="55:22" pos:end="55:23">++</operator></expr>]</index></name> <operator pos:start="55:26" pos:end="55:26">=</operator> <name pos:start="55:28" pos:end="55:29">ch</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="63:5" pos:end="63:16"><expr pos:start="63:5" pos:end="63:15"><call pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:13">term_exit</name><argument_list pos:start="63:14" pos:end="63:15">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:18"><expr pos:start="65:5" pos:end="65:17"><name pos:start="65:5" pos:end="65:10"><name pos:start="65:5" pos:end="65:7">buf</name><index pos:start="65:8" pos:end="65:10">[<expr pos:start="65:9" pos:end="65:9"><name pos:start="65:9" pos:end="65:9">i</name></expr>]</index></name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="char" pos:start="65:14" pos:end="65:17">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:17"><expr pos:start="67:5" pos:end="67:16"><call pos:start="67:5" pos:end="67:16"><name pos:start="67:5" pos:end="67:10">printf</name><argument_list pos:start="67:11" pos:end="67:16">(<argument pos:start="67:12" pos:end="67:15"><expr pos:start="67:12" pos:end="67:15"><literal type="string" pos:start="67:12" pos:end="67:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="69:5" pos:end="69:15">return <expr pos:start="69:12" pos:end="69:14"><name pos:start="69:12" pos:end="69:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
