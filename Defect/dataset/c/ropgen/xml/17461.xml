<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17461.c" pos:tabs="8"><function pos:start="1:1" pos:end="321:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">ff_get_buffer</name><parameter_list pos:start="1:18" pos:end="1:67">(<parameter pos:start="1:19" pos:end="1:39"><decl pos:start="1:19" pos:end="1:39"><type pos:start="1:19" pos:end="1:39"><name pos:start="1:19" pos:end="1:32">AVCodecContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:39">avctx</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:55"><decl pos:start="1:42" pos:end="1:55"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:48">AVFrame</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">frame</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:66"><decl pos:start="1:58" pos:end="1:66"><type pos:start="1:58" pos:end="1:66"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:66">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="321:1">{<block_content pos:start="5:5" pos:end="319:51">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="95:5">switch <condition pos:start="9:12" pos:end="9:30">(<expr pos:start="9:13" pos:end="9:29"><name pos:start="9:13" pos:end="9:29"><name pos:start="9:13" pos:end="9:17">avctx</name><operator pos:start="9:18" pos:end="9:19">-&gt;</operator><name pos:start="9:20" pos:end="9:29">codec_type</name></name></expr>)</condition> <block pos:start="9:32" pos:end="95:5">{<block_content pos:start="11:5" pos:end="93:36">

    <case pos:start="11:5" pos:end="11:28">case <expr pos:start="11:10" pos:end="11:27"><name pos:start="11:10" pos:end="11:27">AVMEDIA_TYPE_VIDEO</name></expr>:</case>

        <if_stmt pos:start="13:9" pos:end="15:54"><if pos:start="13:9" pos:end="15:54">if <condition pos:start="13:12" pos:end="13:26">(<expr pos:start="13:13" pos:end="13:25"><operator pos:start="13:13" pos:end="13:13">!</operator><name pos:start="13:14" pos:end="13:25"><name pos:start="13:14" pos:end="13:18">frame</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:25">width</name></name></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:54"><block_content pos:start="15:13" pos:end="15:54">

            <expr_stmt pos:start="15:13" pos:end="15:54"><expr pos:start="15:13" pos:end="15:53"><name pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:17">frame</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:24">width</name></name>               <operator pos:start="15:40" pos:end="15:40">=</operator> <name pos:start="15:42" pos:end="15:53"><name pos:start="15:42" pos:end="15:46">avctx</name><operator pos:start="15:47" pos:end="15:48">-&gt;</operator><name pos:start="15:49" pos:end="15:53">width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="17:9" pos:end="19:55"><if pos:start="17:9" pos:end="19:55">if <condition pos:start="17:12" pos:end="17:27">(<expr pos:start="17:13" pos:end="17:26"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:26"><name pos:start="17:14" pos:end="17:18">frame</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:26">height</name></name></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:55"><block_content pos:start="19:13" pos:end="19:55">

            <expr_stmt pos:start="19:13" pos:end="19:55"><expr pos:start="19:13" pos:end="19:54"><name pos:start="19:13" pos:end="19:25"><name pos:start="19:13" pos:end="19:17">frame</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:25">height</name></name>              <operator pos:start="19:40" pos:end="19:40">=</operator> <name pos:start="19:42" pos:end="19:54"><name pos:start="19:42" pos:end="19:46">avctx</name><operator pos:start="19:47" pos:end="19:48">-&gt;</operator><name pos:start="19:49" pos:end="19:54">height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="21:9" pos:end="23:56"><if pos:start="21:9" pos:end="23:56">if <condition pos:start="21:12" pos:end="21:30">(<expr pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:17">frame</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:25">format</name></name> <operator pos:start="21:27" pos:end="21:27">&lt;</operator> <literal type="number" pos:start="21:29" pos:end="21:29">0</literal></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:56"><block_content pos:start="23:13" pos:end="23:56">

            <expr_stmt pos:start="23:13" pos:end="23:56"><expr pos:start="23:13" pos:end="23:55"><name pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:17">frame</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:25">format</name></name>              <operator pos:start="23:40" pos:end="23:40">=</operator> <name pos:start="23:42" pos:end="23:55"><name pos:start="23:42" pos:end="23:46">avctx</name><operator pos:start="23:47" pos:end="23:48">-&gt;</operator><name pos:start="23:49" pos:end="23:55">pix_fmt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="25:9" pos:end="27:68"><if pos:start="25:9" pos:end="27:68">if <condition pos:start="25:12" pos:end="25:44">(<expr pos:start="25:13" pos:end="25:43"><operator pos:start="25:13" pos:end="25:13">!</operator><name pos:start="25:14" pos:end="25:43"><name pos:start="25:14" pos:end="25:18">frame</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:39">sample_aspect_ratio</name><operator pos:start="25:40" pos:end="25:40">.</operator><name pos:start="25:41" pos:end="25:43">num</name></name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:68"><block_content pos:start="27:13" pos:end="27:68">

            <expr_stmt pos:start="27:13" pos:end="27:68"><expr pos:start="27:13" pos:end="27:67"><name pos:start="27:13" pos:end="27:38"><name pos:start="27:13" pos:end="27:17">frame</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:38">sample_aspect_ratio</name></name> <operator pos:start="27:40" pos:end="27:40">=</operator> <name pos:start="27:42" pos:end="27:67"><name pos:start="27:42" pos:end="27:46">avctx</name><operator pos:start="27:47" pos:end="27:48">-&gt;</operator><name pos:start="27:49" pos:end="27:67">sample_aspect_ratio</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="31:9" pos:end="33:23"><if pos:start="31:9" pos:end="33:23">if <condition pos:start="31:12" pos:end="31:83">(<expr pos:start="31:13" pos:end="31:82"><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:16">ret</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:77"><name pos:start="31:20" pos:end="31:38">av_image_check_size</name><argument_list pos:start="31:39" pos:end="31:77">(<argument pos:start="31:40" pos:end="31:51"><expr pos:start="31:40" pos:end="31:51"><name pos:start="31:40" pos:end="31:51"><name pos:start="31:40" pos:end="31:44">avctx</name><operator pos:start="31:45" pos:end="31:46">-&gt;</operator><name pos:start="31:47" pos:end="31:51">width</name></name></expr></argument>, <argument pos:start="31:54" pos:end="31:66"><expr pos:start="31:54" pos:end="31:66"><name pos:start="31:54" pos:end="31:66"><name pos:start="31:54" pos:end="31:58">avctx</name><operator pos:start="31:59" pos:end="31:60">-&gt;</operator><name pos:start="31:61" pos:end="31:66">height</name></name></expr></argument>, <argument pos:start="31:69" pos:end="31:69"><expr pos:start="31:69" pos:end="31:69"><literal type="number" pos:start="31:69" pos:end="31:69">0</literal></expr></argument>, <argument pos:start="31:72" pos:end="31:76"><expr pos:start="31:72" pos:end="31:76"><name pos:start="31:72" pos:end="31:76">avctx</name></expr></argument>)</argument_list></call><operator pos:start="31:78" pos:end="31:78">)</operator> <operator pos:start="31:80" pos:end="31:80">&lt;</operator> <literal type="number" pos:start="31:82" pos:end="31:82">0</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:23"><block_content pos:start="33:13" pos:end="33:23">

            <return pos:start="33:13" pos:end="33:23">return <expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:28">case <expr pos:start="37:10" pos:end="37:27"><name pos:start="37:10" pos:end="37:27">AVMEDIA_TYPE_AUDIO</name></expr>:</case>

        <if_stmt pos:start="39:9" pos:end="41:55"><if pos:start="39:9" pos:end="41:55">if <condition pos:start="39:12" pos:end="39:32">(<expr pos:start="39:13" pos:end="39:31"><operator pos:start="39:13" pos:end="39:13">!</operator><name pos:start="39:14" pos:end="39:31"><name pos:start="39:14" pos:end="39:18">frame</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:31">sample_rate</name></name></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:55"><block_content pos:start="41:13" pos:end="41:55">

            <expr_stmt pos:start="41:13" pos:end="41:55"><expr pos:start="41:13" pos:end="41:54"><name pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:17">frame</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:30">sample_rate</name></name>    <operator pos:start="41:35" pos:end="41:35">=</operator> <name pos:start="41:37" pos:end="41:54"><name pos:start="41:37" pos:end="41:41">avctx</name><operator pos:start="41:42" pos:end="41:43">-&gt;</operator><name pos:start="41:44" pos:end="41:54">sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="45:54"><if pos:start="43:9" pos:end="45:54">if <condition pos:start="43:12" pos:end="43:30">(<expr pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:17">frame</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:25">format</name></name> <operator pos:start="43:27" pos:end="43:27">&lt;</operator> <literal type="number" pos:start="43:29" pos:end="43:29">0</literal></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:54"><block_content pos:start="45:13" pos:end="45:54">

            <expr_stmt pos:start="45:13" pos:end="45:54"><expr pos:start="45:13" pos:end="45:53"><name pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:17">frame</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:25">format</name></name>         <operator pos:start="45:35" pos:end="45:35">=</operator> <name pos:start="45:37" pos:end="45:53"><name pos:start="45:37" pos:end="45:41">avctx</name><operator pos:start="45:42" pos:end="45:43">-&gt;</operator><name pos:start="45:44" pos:end="45:53">sample_fmt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="47:9" pos:end="89:9"><if pos:start="47:9" pos:end="89:9">if <condition pos:start="47:12" pos:end="47:35">(<expr pos:start="47:13" pos:end="47:34"><operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:34"><name pos:start="47:14" pos:end="47:18">frame</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:34">channel_layout</name></name></expr>)</condition> <block pos:start="47:37" pos:end="89:9">{<block_content pos:start="49:13" pos:end="87:13">

            <if_stmt pos:start="49:13" pos:end="87:13"><if pos:start="49:13" pos:end="67:13">if <condition pos:start="49:16" pos:end="49:38">(<expr pos:start="49:17" pos:end="49:37"><name pos:start="49:17" pos:end="49:37"><name pos:start="49:17" pos:end="49:21">avctx</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:37">channel_layout</name></name></expr>)</condition> <block pos:start="49:40" pos:end="67:13">{<block_content pos:start="51:18" pos:end="65:62">

                 <if_stmt pos:start="51:18" pos:end="61:18"><if pos:start="51:18" pos:end="61:18">if <condition pos:start="51:21" pos:end="53:37">(<expr pos:start="51:22" pos:end="53:36"><call pos:start="51:22" pos:end="51:77"><name pos:start="51:22" pos:end="51:54">av_get_channel_layout_nb_channels</name><argument_list pos:start="51:55" pos:end="51:77">(<argument pos:start="51:56" pos:end="51:76"><expr pos:start="51:56" pos:end="51:76"><name pos:start="51:56" pos:end="51:76"><name pos:start="51:56" pos:end="51:60">avctx</name><operator pos:start="51:61" pos:end="51:62">-&gt;</operator><name pos:start="51:63" pos:end="51:76">channel_layout</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:79" pos:end="51:80">!=</operator>

                     <name pos:start="53:22" pos:end="53:36"><name pos:start="53:22" pos:end="53:26">avctx</name><operator pos:start="53:27" pos:end="53:28">-&gt;</operator><name pos:start="53:29" pos:end="53:36">channels</name></name></expr>)</condition> <block pos:start="53:39" pos:end="61:18">{<block_content pos:start="55:22" pos:end="59:44">

                     <expr_stmt pos:start="55:22" pos:end="57:48"><expr pos:start="55:22" pos:end="57:47"><call pos:start="55:22" pos:end="57:47"><name pos:start="55:22" pos:end="55:27">av_log</name><argument_list pos:start="55:28" pos:end="57:47">(<argument pos:start="55:29" pos:end="55:33"><expr pos:start="55:29" pos:end="55:33"><name pos:start="55:29" pos:end="55:33">avctx</name></expr></argument>, <argument pos:start="55:36" pos:end="55:47"><expr pos:start="55:36" pos:end="55:47"><name pos:start="55:36" pos:end="55:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:50" pos:end="57:46"><expr pos:start="55:50" pos:end="57:46"><literal type="string" pos:start="55:50" pos:end="55:72">"Inconsistent channel "</literal>

                            <literal type="string" pos:start="57:29" pos:end="57:46">"configuration.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                     <return pos:start="59:22" pos:end="59:44">return <expr pos:start="59:29" pos:end="59:43"><call pos:start="59:29" pos:end="59:43"><name pos:start="59:29" pos:end="59:35">AVERROR</name><argument_list pos:start="59:36" pos:end="59:43">(<argument pos:start="59:37" pos:end="59:42"><expr pos:start="59:37" pos:end="59:42"><name pos:start="59:37" pos:end="59:42">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                 </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="65:17" pos:end="65:62"><expr pos:start="65:17" pos:end="65:61"><name pos:start="65:17" pos:end="65:37"><name pos:start="65:17" pos:end="65:21">frame</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:37">channel_layout</name></name> <operator pos:start="65:39" pos:end="65:39">=</operator> <name pos:start="65:41" pos:end="65:61"><name pos:start="65:41" pos:end="65:45">avctx</name><operator pos:start="65:46" pos:end="65:47">-&gt;</operator><name pos:start="65:48" pos:end="65:61">channel_layout</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="67:15" pos:end="87:13">else <block pos:start="67:20" pos:end="87:13">{<block_content pos:start="69:17" pos:end="85:74">

                <if_stmt pos:start="69:17" pos:end="77:17"><if pos:start="69:17" pos:end="77:17">if <condition pos:start="69:20" pos:end="69:58">(<expr pos:start="69:21" pos:end="69:57"><name pos:start="69:21" pos:end="69:35"><name pos:start="69:21" pos:end="69:25">avctx</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:35">channels</name></name> <operator pos:start="69:37" pos:end="69:37">&gt;</operator> <name pos:start="69:39" pos:end="69:57">FF_SANE_NB_CHANNELS</name></expr>)</condition> <block pos:start="69:60" pos:end="77:17">{<block_content pos:start="71:21" pos:end="75:43">

                    <expr_stmt pos:start="71:21" pos:end="73:44"><expr pos:start="71:21" pos:end="73:43"><call pos:start="71:21" pos:end="73:43"><name pos:start="71:21" pos:end="71:26">av_log</name><argument_list pos:start="71:27" pos:end="73:43">(<argument pos:start="71:28" pos:end="71:32"><expr pos:start="71:28" pos:end="71:32"><name pos:start="71:28" pos:end="71:32">avctx</name></expr></argument>, <argument pos:start="71:35" pos:end="71:46"><expr pos:start="71:35" pos:end="71:46"><name pos:start="71:35" pos:end="71:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:49" pos:end="71:74"><expr pos:start="71:49" pos:end="71:74"><literal type="string" pos:start="71:49" pos:end="71:74">"Too many channels: %d.\n"</literal></expr></argument>,

                           <argument pos:start="73:28" pos:end="73:42"><expr pos:start="73:28" pos:end="73:42"><name pos:start="73:28" pos:end="73:42"><name pos:start="73:28" pos:end="73:32">avctx</name><operator pos:start="73:33" pos:end="73:34">-&gt;</operator><name pos:start="73:35" pos:end="73:42">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="75:21" pos:end="75:43">return <expr pos:start="75:28" pos:end="75:42"><call pos:start="75:28" pos:end="75:42"><name pos:start="75:28" pos:end="75:34">AVERROR</name><argument_list pos:start="75:35" pos:end="75:42">(<argument pos:start="75:36" pos:end="75:41"><expr pos:start="75:36" pos:end="75:41"><name pos:start="75:36" pos:end="75:41">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="81:17" pos:end="81:87"><expr pos:start="81:17" pos:end="81:86"><name pos:start="81:17" pos:end="81:37"><name pos:start="81:17" pos:end="81:21">frame</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:37">channel_layout</name></name> <operator pos:start="81:39" pos:end="81:39">=</operator> <call pos:start="81:41" pos:end="81:86"><name pos:start="81:41" pos:end="81:69">av_get_default_channel_layout</name><argument_list pos:start="81:70" pos:end="81:86">(<argument pos:start="81:71" pos:end="81:85"><expr pos:start="81:71" pos:end="81:85"><name pos:start="81:71" pos:end="81:85"><name pos:start="81:71" pos:end="81:75">avctx</name><operator pos:start="81:76" pos:end="81:77">-&gt;</operator><name pos:start="81:78" pos:end="81:85">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="83:17" pos:end="85:74"><if pos:start="83:17" pos:end="85:74">if <condition pos:start="83:20" pos:end="83:43">(<expr pos:start="83:21" pos:end="83:42"><operator pos:start="83:21" pos:end="83:21">!</operator><name pos:start="83:22" pos:end="83:42"><name pos:start="83:22" pos:end="83:26">frame</name><operator pos:start="83:27" pos:end="83:28">-&gt;</operator><name pos:start="83:29" pos:end="83:42">channel_layout</name></name></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="85:74"><block_content pos:start="85:21" pos:end="85:74">

                    <expr_stmt pos:start="85:21" pos:end="85:74"><expr pos:start="85:21" pos:end="85:73"><name pos:start="85:21" pos:end="85:41"><name pos:start="85:21" pos:end="85:25">frame</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:41">channel_layout</name></name> <operator pos:start="85:43" pos:end="85:43">=</operator> <operator pos:start="85:45" pos:end="85:45">(</operator><literal type="number" pos:start="85:46" pos:end="85:49">1ULL</literal> <operator pos:start="85:51" pos:end="85:52">&lt;&lt;</operator> <name pos:start="85:54" pos:end="85:68"><name pos:start="85:54" pos:end="85:58">avctx</name><operator pos:start="85:59" pos:end="85:60">-&gt;</operator><name pos:start="85:61" pos:end="85:68">channels</name></name><operator pos:start="85:69" pos:end="85:69">)</operator> <operator pos:start="85:71" pos:end="85:71">-</operator> <literal type="number" pos:start="85:73" pos:end="85:73">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <default pos:start="93:5" pos:end="93:12">default:</default> <return pos:start="93:14" pos:end="93:36">return <expr pos:start="93:21" pos:end="93:35"><call pos:start="93:21" pos:end="93:35"><name pos:start="93:21" pos:end="93:27">AVERROR</name><argument_list pos:start="93:28" pos:end="93:35">(<argument pos:start="93:29" pos:end="93:34"><expr pos:start="93:29" pos:end="93:34"><name pos:start="93:29" pos:end="93:34">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="99:5" pos:end="99:67"><expr pos:start="99:5" pos:end="99:66"><name pos:start="99:5" pos:end="99:18"><name pos:start="99:5" pos:end="99:9">frame</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:18">pkt_pts</name></name> <operator pos:start="99:20" pos:end="99:20">=</operator> <ternary pos:start="99:22" pos:end="99:66"><condition pos:start="99:22" pos:end="99:33"><expr pos:start="99:22" pos:end="99:31"><name pos:start="99:22" pos:end="99:31"><name pos:start="99:22" pos:end="99:26">avctx</name><operator pos:start="99:27" pos:end="99:28">-&gt;</operator><name pos:start="99:29" pos:end="99:31">pkt</name></name></expr> ?</condition><then pos:start="99:35" pos:end="99:49"> <expr pos:start="99:35" pos:end="99:49"><name pos:start="99:35" pos:end="99:49"><name pos:start="99:35" pos:end="99:39">avctx</name><operator pos:start="99:40" pos:end="99:41">-&gt;</operator><name pos:start="99:42" pos:end="99:44">pkt</name><operator pos:start="99:45" pos:end="99:46">-&gt;</operator><name pos:start="99:47" pos:end="99:49">pts</name></name></expr> </then><else pos:start="99:51" pos:end="99:66">: <expr pos:start="99:53" pos:end="99:66"><name pos:start="99:53" pos:end="99:66">AV_NOPTS_VALUE</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="106:0"><expr pos:start="101:5" pos:end="101:53"><name pos:start="101:5" pos:end="101:27"><name pos:start="101:5" pos:end="101:9">frame</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:27">reordered_opaque</name></name> <operator pos:start="101:29" pos:end="101:29">=</operator> <name pos:start="101:31" pos:end="101:53"><name pos:start="101:31" pos:end="101:35">avctx</name><operator pos:start="101:36" pos:end="101:37">-&gt;</operator><name pos:start="101:38" pos:end="101:53">reordered_opaque</name></name></expr>;</expr_stmt>



<cpp:if pos:start="105:1" pos:end="105:21">#<cpp:directive pos:start="105:2" pos:end="105:3">if</cpp:directive> <expr pos:start="105:5" pos:end="105:21"><name pos:start="105:5" pos:end="105:21">FF_API_GET_BUFFER</name></expr></cpp:if>

    <comment type="block" pos:start="107:5" pos:end="119:7">/*

     * Wrap an old get_buffer()-allocated buffer in an bunch of AVBuffers.

     * We wrap each plane in its own AVBuffer. Each of those has a reference to

     * a dummy AVBuffer as its private data, unreffing it on free.

     * When all the planes are freed, the dummy buffer's free callback calls

     * release_buffer().

     */</comment>

    <if_stmt pos:start="121:5" pos:end="316:0"><if pos:start="121:5" pos:end="316:0">if <condition pos:start="121:8" pos:end="121:26">(<expr pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:13">avctx</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:25">get_buffer</name></name></expr>)</condition> <block pos:start="121:28" pos:end="316:0">{<block_content pos:start="123:9" pos:end="311:19">

        <decl_stmt pos:start="123:9" pos:end="123:42"><decl pos:start="123:9" pos:end="123:41"><type pos:start="123:9" pos:end="123:30"><name pos:start="123:9" pos:end="123:28">CompatReleaseBufPriv</name> <modifier pos:start="123:30" pos:end="123:30">*</modifier></type><name pos:start="123:31" pos:end="123:34">priv</name> <init pos:start="123:36" pos:end="123:41">= <expr pos:start="123:38" pos:end="123:41"><name pos:start="123:38" pos:end="123:41">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="125:9" pos:end="125:38"><decl pos:start="125:9" pos:end="125:37"><type pos:start="125:9" pos:end="125:21"><name pos:start="125:9" pos:end="125:19">AVBufferRef</name> <modifier pos:start="125:21" pos:end="125:21">*</modifier></type><name pos:start="125:22" pos:end="125:30">dummy_buf</name> <init pos:start="125:32" pos:end="125:37">= <expr pos:start="125:34" pos:end="125:37"><name pos:start="125:34" pos:end="125:37">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="127:9" pos:end="127:27"><decl pos:start="127:9" pos:end="127:18"><type pos:start="127:9" pos:end="127:11"><name pos:start="127:9" pos:end="127:11">int</name></type> <name pos:start="127:13" pos:end="127:18">planes</name></decl>, <decl pos:start="127:21" pos:end="127:21"><type ref="prev" pos:start="127:9" pos:end="127:11"/><name pos:start="127:21" pos:end="127:21">i</name></decl>, <decl pos:start="127:24" pos:end="127:26"><type ref="prev" pos:start="127:9" pos:end="127:11"/><name pos:start="127:24" pos:end="127:26">ret</name></decl>;</decl_stmt>



        <if_stmt pos:start="131:9" pos:end="133:36"><if pos:start="131:9" pos:end="133:36">if <condition pos:start="131:12" pos:end="131:43">(<expr pos:start="131:13" pos:end="131:42"><name pos:start="131:13" pos:end="131:17">flags</name> <operator pos:start="131:19" pos:end="131:19">&amp;</operator> <name pos:start="131:21" pos:end="131:42">AV_GET_BUFFER_FLAG_REF</name></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:36"><block_content pos:start="133:13" pos:end="133:36">

            <expr_stmt pos:start="133:13" pos:end="133:36"><expr pos:start="133:13" pos:end="133:35"><name pos:start="133:13" pos:end="133:28"><name pos:start="133:13" pos:end="133:17">frame</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:28">reference</name></name>    <operator pos:start="133:33" pos:end="133:33">=</operator> <literal type="number" pos:start="133:35" pos:end="133:35">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:46"><expr pos:start="137:9" pos:end="137:45"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <call pos:start="137:15" pos:end="137:45"><name pos:start="137:15" pos:end="137:31"><name pos:start="137:15" pos:end="137:19">avctx</name><operator pos:start="137:20" pos:end="137:21">-&gt;</operator><name pos:start="137:22" pos:end="137:31">get_buffer</name></name><argument_list pos:start="137:32" pos:end="137:45">(<argument pos:start="137:33" pos:end="137:37"><expr pos:start="137:33" pos:end="137:37"><name pos:start="137:33" pos:end="137:37">avctx</name></expr></argument>, <argument pos:start="137:40" pos:end="137:44"><expr pos:start="137:40" pos:end="137:44"><name pos:start="137:40" pos:end="137:44">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="141:23"><if pos:start="139:9" pos:end="141:23">if <condition pos:start="139:12" pos:end="139:20">(<expr pos:start="139:13" pos:end="139:19"><name pos:start="139:13" pos:end="139:15">ret</name> <operator pos:start="139:17" pos:end="139:17">&lt;</operator> <literal type="number" pos:start="139:19" pos:end="139:19">0</literal></expr>)</condition><block type="pseudo" pos:start="141:13" pos:end="141:23"><block_content pos:start="141:13" pos:end="141:23">

            <return pos:start="141:13" pos:end="141:23">return <expr pos:start="141:20" pos:end="141:22"><name pos:start="141:20" pos:end="141:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="145:9" pos:end="151:11">/* return if the buffers are already set up

         * this would happen e.g. when a custom get_buffer() calls

         * avcodec_default_get_buffer

         */</comment>

        <if_stmt pos:start="153:9" pos:end="155:21"><if pos:start="153:9" pos:end="155:21">if <condition pos:start="153:12" pos:end="153:26">(<expr pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:17">frame</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:22">buf</name><index pos:start="153:23" pos:end="153:25">[<expr pos:start="153:24" pos:end="153:24"><literal type="number" pos:start="153:24" pos:end="153:24">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:21"><block_content pos:start="155:13" pos:end="155:21">

            <return pos:start="155:13" pos:end="155:21">return <expr pos:start="155:20" pos:end="155:20"><literal type="number" pos:start="155:20" pos:end="155:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:41"><expr pos:start="159:9" pos:end="159:40"><name pos:start="159:9" pos:end="159:12">priv</name> <operator pos:start="159:14" pos:end="159:14">=</operator> <call pos:start="159:16" pos:end="159:40"><name pos:start="159:16" pos:end="159:25">av_mallocz</name><argument_list pos:start="159:26" pos:end="159:40">(<argument pos:start="159:27" pos:end="159:39"><expr pos:start="159:27" pos:end="159:39"><sizeof pos:start="159:27" pos:end="159:39">sizeof<argument_list pos:start="159:33" pos:end="159:39">(<argument pos:start="159:34" pos:end="159:38"><expr pos:start="159:34" pos:end="159:38"><operator pos:start="159:34" pos:end="159:34">*</operator><name pos:start="159:35" pos:end="159:38">priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="167:9"><if pos:start="161:9" pos:end="167:9">if <condition pos:start="161:12" pos:end="161:18">(<expr pos:start="161:13" pos:end="161:17"><operator pos:start="161:13" pos:end="161:13">!</operator><name pos:start="161:14" pos:end="161:17">priv</name></expr>)</condition> <block pos:start="161:20" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:22">

            <expr_stmt pos:start="163:13" pos:end="163:34"><expr pos:start="163:13" pos:end="163:33"><name pos:start="163:13" pos:end="163:15">ret</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <call pos:start="163:19" pos:end="163:33"><name pos:start="163:19" pos:end="163:25">AVERROR</name><argument_list pos:start="163:26" pos:end="163:33">(<argument pos:start="163:27" pos:end="163:32"><expr pos:start="163:27" pos:end="163:32"><name pos:start="163:27" pos:end="163:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="165:13" pos:end="165:22">goto <name pos:start="165:18" pos:end="165:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:29"><expr pos:start="169:9" pos:end="169:28"><name pos:start="169:9" pos:end="169:19"><name pos:start="169:9" pos:end="169:12">priv</name><operator pos:start="169:13" pos:end="169:14">-&gt;</operator><name pos:start="169:15" pos:end="169:19">avctx</name></name> <operator pos:start="169:21" pos:end="169:21">=</operator> <operator pos:start="169:23" pos:end="169:23">*</operator><name pos:start="169:24" pos:end="169:28">avctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:29"><expr pos:start="171:9" pos:end="171:28"><name pos:start="171:9" pos:end="171:19"><name pos:start="171:9" pos:end="171:12">priv</name><operator pos:start="171:13" pos:end="171:14">-&gt;</operator><name pos:start="171:15" pos:end="171:19">frame</name></name> <operator pos:start="171:21" pos:end="171:21">=</operator> <operator pos:start="171:23" pos:end="171:23">*</operator><name pos:start="171:24" pos:end="171:28">frame</name></expr>;</expr_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:75"><expr pos:start="175:9" pos:end="175:74"><name pos:start="175:9" pos:end="175:17">dummy_buf</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <call pos:start="175:21" pos:end="175:74"><name pos:start="175:21" pos:end="175:36">av_buffer_create</name><argument_list pos:start="175:37" pos:end="175:74">(<argument pos:start="175:38" pos:end="175:41"><expr pos:start="175:38" pos:end="175:41"><name pos:start="175:38" pos:end="175:41">NULL</name></expr></argument>, <argument pos:start="175:44" pos:end="175:44"><expr pos:start="175:44" pos:end="175:44"><literal type="number" pos:start="175:44" pos:end="175:44">0</literal></expr></argument>, <argument pos:start="175:47" pos:end="175:64"><expr pos:start="175:47" pos:end="175:64"><name pos:start="175:47" pos:end="175:64">compat_free_buffer</name></expr></argument>, <argument pos:start="175:67" pos:end="175:70"><expr pos:start="175:67" pos:end="175:70"><name pos:start="175:67" pos:end="175:70">priv</name></expr></argument>, <argument pos:start="175:73" pos:end="175:73"><expr pos:start="175:73" pos:end="175:73"><literal type="number" pos:start="175:73" pos:end="175:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="216:0"><if pos:start="177:9" pos:end="216:0">if <condition pos:start="177:12" pos:end="177:23">(<expr pos:start="177:13" pos:end="177:22"><operator pos:start="177:13" pos:end="177:13">!</operator><name pos:start="177:14" pos:end="177:22">dummy_buf</name></expr>)</condition> <block pos:start="177:25" pos:end="216:0">{<block_content pos:start="179:13" pos:end="181:22">

            <expr_stmt pos:start="179:13" pos:end="179:34"><expr pos:start="179:13" pos:end="179:33"><name pos:start="179:13" pos:end="179:15">ret</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <call pos:start="179:19" pos:end="179:33"><name pos:start="179:19" pos:end="179:25">AVERROR</name><argument_list pos:start="179:26" pos:end="179:33">(<argument pos:start="179:27" pos:end="179:32"><expr pos:start="179:27" pos:end="179:32"><name pos:start="179:27" pos:end="179:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="181:13" pos:end="181:22">goto <name pos:start="181:18" pos:end="181:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



<cpp:define pos:start="187:1" pos:end="215:11">#<cpp:directive pos:start="187:2" pos:end="187:7">define</cpp:directive> <cpp:macro pos:start="187:9" pos:end="187:44"><name pos:start="187:9" pos:end="187:18">WRAP_PLANE</name><parameter_list pos:start="187:19" pos:end="187:44">(<parameter pos:start="187:20" pos:end="187:26"><type pos:start="187:20" pos:end="187:26"><name pos:start="187:20" pos:end="187:26">ref_out</name></type></parameter>, <parameter pos:start="187:29" pos:end="187:32"><type pos:start="187:29" pos:end="187:32"><name pos:start="187:29" pos:end="187:32">data</name></type></parameter>, <parameter pos:start="187:35" pos:end="187:43"><type pos:start="187:35" pos:end="187:43"><name pos:start="187:35" pos:end="187:43">data_size</name></type></parameter>)</parameter_list></cpp:macro>                            \

<cpp:value pos:start="189:1" pos:end="215:11">do {                                                                    \

    AVBufferRef *dummy_ref = av_buffer_ref(dummy_buf);                  \

    if (!dummy_ref) {                                                   \

        ret = AVERROR(ENOMEM);                                          \

        goto fail;                                                      \

    }                                                                   \

    ref_out = av_buffer_create(data, data_size, compat_release_buffer,  \

                               dummy_ref, 0);                           \

    if (!ref_out) {                                                     \

        av_frame_unref(frame);                                          \

        ret = AVERROR(ENOMEM);                                          \

        goto fail;                                                      \

    }                                                                   \

} while (0)</cpp:value></cpp:define>



        <if_stmt pos:start="219:9" pos:end="291:9"><if pos:start="219:9" pos:end="249:9">if <condition pos:start="219:12" pos:end="219:52">(<expr pos:start="219:13" pos:end="219:51"><name pos:start="219:13" pos:end="219:29"><name pos:start="219:13" pos:end="219:17">avctx</name><operator pos:start="219:18" pos:end="219:19">-&gt;</operator><name pos:start="219:20" pos:end="219:29">codec_type</name></name> <operator pos:start="219:31" pos:end="219:32">==</operator> <name pos:start="219:34" pos:end="219:51">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="219:54" pos:end="249:9">{<block_content pos:start="221:13" pos:end="247:13">

            <decl_stmt pos:start="221:13" pos:end="221:80"><decl pos:start="221:13" pos:end="221:79"><type pos:start="221:13" pos:end="221:38"><specifier pos:start="221:13" pos:end="221:17">const</specifier> <name pos:start="221:19" pos:end="221:36">AVPixFmtDescriptor</name> <modifier pos:start="221:38" pos:end="221:38">*</modifier></type><name pos:start="221:39" pos:end="221:42">desc</name> <init pos:start="221:44" pos:end="221:79">= <expr pos:start="221:46" pos:end="221:79"><call pos:start="221:46" pos:end="221:79"><name pos:start="221:46" pos:end="221:64">av_pix_fmt_desc_get</name><argument_list pos:start="221:65" pos:end="221:79">(<argument pos:start="221:66" pos:end="221:78"><expr pos:start="221:66" pos:end="221:78"><name pos:start="221:66" pos:end="221:78"><name pos:start="221:66" pos:end="221:70">frame</name><operator pos:start="221:71" pos:end="221:72">-&gt;</operator><name pos:start="221:73" pos:end="221:78">format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="225:13" pos:end="231:13"><if pos:start="225:13" pos:end="231:13">if <condition pos:start="225:16" pos:end="225:22">(<expr pos:start="225:17" pos:end="225:21"><operator pos:start="225:17" pos:end="225:17">!</operator><name pos:start="225:18" pos:end="225:21">desc</name></expr>)</condition> <block pos:start="225:24" pos:end="231:13">{<block_content pos:start="227:17" pos:end="229:26">

                <expr_stmt pos:start="227:17" pos:end="227:38"><expr pos:start="227:17" pos:end="227:37"><name pos:start="227:17" pos:end="227:19">ret</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <call pos:start="227:23" pos:end="227:37"><name pos:start="227:23" pos:end="227:29">AVERROR</name><argument_list pos:start="227:30" pos:end="227:37">(<argument pos:start="227:31" pos:end="227:36"><expr pos:start="227:31" pos:end="227:36"><name pos:start="227:31" pos:end="227:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="229:17" pos:end="229:26">goto <name pos:start="229:22" pos:end="229:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:78"><expr pos:start="233:13" pos:end="233:77"><name pos:start="233:13" pos:end="233:18">planes</name> <operator pos:start="233:20" pos:end="233:20">=</operator> <ternary pos:start="233:22" pos:end="233:77"><condition pos:start="233:22" pos:end="233:53"><expr pos:start="233:22" pos:end="233:51"><operator pos:start="233:22" pos:end="233:22">(</operator><name pos:start="233:23" pos:end="233:33"><name pos:start="233:23" pos:end="233:26">desc</name><operator pos:start="233:27" pos:end="233:28">-&gt;</operator><name pos:start="233:29" pos:end="233:33">flags</name></name> <operator pos:start="233:35" pos:end="233:35">&amp;</operator> <name pos:start="233:37" pos:end="233:50">PIX_FMT_PLANAR</name><operator pos:start="233:51" pos:end="233:51">)</operator></expr> ?</condition><then pos:start="233:55" pos:end="233:73"> <expr pos:start="233:55" pos:end="233:73"><name pos:start="233:55" pos:end="233:73"><name pos:start="233:55" pos:end="233:58">desc</name><operator pos:start="233:59" pos:end="233:60">-&gt;</operator><name pos:start="233:61" pos:end="233:73">nb_components</name></name></expr> </then><else pos:start="233:75" pos:end="233:77">: <expr pos:start="233:77" pos:end="233:77"><literal type="number" pos:start="233:77" pos:end="233:77">1</literal></expr></else></ternary></expr>;</expr_stmt>



            <for pos:start="237:13" pos:end="247:13">for <control pos:start="237:17" pos:end="237:40">(<init pos:start="237:18" pos:end="237:23"><expr pos:start="237:18" pos:end="237:22"><name pos:start="237:18" pos:end="237:18">i</name> <operator pos:start="237:20" pos:end="237:20">=</operator> <literal type="number" pos:start="237:22" pos:end="237:22">0</literal></expr>;</init> <condition pos:start="237:25" pos:end="237:35"><expr pos:start="237:25" pos:end="237:34"><name pos:start="237:25" pos:end="237:25">i</name> <operator pos:start="237:27" pos:end="237:27">&lt;</operator> <name pos:start="237:29" pos:end="237:34">planes</name></expr>;</condition> <incr pos:start="237:37" pos:end="237:39"><expr pos:start="237:37" pos:end="237:39"><name pos:start="237:37" pos:end="237:37">i</name><operator pos:start="237:38" pos:end="237:39">++</operator></expr></incr>)</control> <block pos:start="237:42" pos:end="247:13">{<block_content pos:start="239:17" pos:end="245:70">

                <decl_stmt pos:start="239:17" pos:end="239:78"><decl pos:start="239:17" pos:end="239:77"><type pos:start="239:17" pos:end="239:19"><name pos:start="239:17" pos:end="239:19">int</name></type> <name pos:start="239:21" pos:end="239:27">h_shift</name>    <init pos:start="239:32" pos:end="239:77">= <expr pos:start="239:34" pos:end="239:77"><ternary pos:start="239:34" pos:end="239:77"><condition pos:start="239:34" pos:end="239:53"><expr pos:start="239:34" pos:end="239:51"><operator pos:start="239:34" pos:end="239:34">(</operator><name pos:start="239:35" pos:end="239:35">i</name> <operator pos:start="239:37" pos:end="239:38">==</operator> <literal type="number" pos:start="239:40" pos:end="239:40">1</literal> <operator pos:start="239:42" pos:end="239:43">||</operator> <name pos:start="239:45" pos:end="239:45">i</name> <operator pos:start="239:47" pos:end="239:48">==</operator> <literal type="number" pos:start="239:50" pos:end="239:50">2</literal><operator pos:start="239:51" pos:end="239:51">)</operator></expr> ?</condition><then pos:start="239:55" pos:end="239:73"> <expr pos:start="239:55" pos:end="239:73"><name pos:start="239:55" pos:end="239:73"><name pos:start="239:55" pos:end="239:58">desc</name><operator pos:start="239:59" pos:end="239:60">-&gt;</operator><name pos:start="239:61" pos:end="239:73">log2_chroma_h</name></name></expr> </then><else pos:start="239:75" pos:end="239:77">: <expr pos:start="239:77" pos:end="239:77"><literal type="number" pos:start="239:77" pos:end="239:77">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="241:17" pos:end="241:80"><decl pos:start="241:17" pos:end="241:79"><type pos:start="241:17" pos:end="241:19"><name pos:start="241:17" pos:end="241:19">int</name></type> <name pos:start="241:21" pos:end="241:30">plane_size</name> <init pos:start="241:32" pos:end="241:79">= <expr pos:start="241:34" pos:end="241:79"><operator pos:start="241:34" pos:end="241:34">(</operator><name pos:start="241:35" pos:end="241:46"><name pos:start="241:35" pos:end="241:39">frame</name><operator pos:start="241:40" pos:end="241:41">-&gt;</operator><name pos:start="241:42" pos:end="241:46">width</name></name> <operator pos:start="241:48" pos:end="241:49">&gt;&gt;</operator> <name pos:start="241:51" pos:end="241:57">h_shift</name><operator pos:start="241:58" pos:end="241:58">)</operator> <operator pos:start="241:60" pos:end="241:60">*</operator> <name pos:start="241:62" pos:end="241:79"><name pos:start="241:62" pos:end="241:66">frame</name><operator pos:start="241:67" pos:end="241:68">-&gt;</operator><name pos:start="241:69" pos:end="241:76">linesize</name><index pos:start="241:77" pos:end="241:79">[<expr pos:start="241:78" pos:end="241:78"><name pos:start="241:78" pos:end="241:78">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="245:17" pos:end="245:70"><expr pos:start="245:17" pos:end="245:69"><call pos:start="245:17" pos:end="245:69"><name pos:start="245:17" pos:end="245:26">WRAP_PLANE</name><argument_list pos:start="245:27" pos:end="245:69">(<argument pos:start="245:28" pos:end="245:40"><expr pos:start="245:28" pos:end="245:40"><name pos:start="245:28" pos:end="245:40"><name pos:start="245:28" pos:end="245:32">frame</name><operator pos:start="245:33" pos:end="245:34">-&gt;</operator><name pos:start="245:35" pos:end="245:37">buf</name><index pos:start="245:38" pos:end="245:40">[<expr pos:start="245:39" pos:end="245:39"><name pos:start="245:39" pos:end="245:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="245:43" pos:end="245:56"><expr pos:start="245:43" pos:end="245:56"><name pos:start="245:43" pos:end="245:56"><name pos:start="245:43" pos:end="245:47">frame</name><operator pos:start="245:48" pos:end="245:49">-&gt;</operator><name pos:start="245:50" pos:end="245:53">data</name><index pos:start="245:54" pos:end="245:56">[<expr pos:start="245:55" pos:end="245:55"><name pos:start="245:55" pos:end="245:55">i</name></expr>]</index></name></expr></argument>, <argument pos:start="245:59" pos:end="245:68"><expr pos:start="245:59" pos:end="245:68"><name pos:start="245:59" pos:end="245:68">plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="249:11" pos:end="291:9">else <block pos:start="249:16" pos:end="291:9">{<block_content pos:start="251:13" pos:end="289:47">

            <decl_stmt pos:start="251:13" pos:end="251:64"><decl pos:start="251:13" pos:end="251:63"><type pos:start="251:13" pos:end="251:15"><name pos:start="251:13" pos:end="251:15">int</name></type> <name pos:start="251:17" pos:end="251:22">planar</name> <init pos:start="251:24" pos:end="251:63">= <expr pos:start="251:26" pos:end="251:63"><call pos:start="251:26" pos:end="251:63"><name pos:start="251:26" pos:end="251:48">av_sample_fmt_is_planar</name><argument_list pos:start="251:49" pos:end="251:63">(<argument pos:start="251:50" pos:end="251:62"><expr pos:start="251:50" pos:end="251:62"><name pos:start="251:50" pos:end="251:62"><name pos:start="251:50" pos:end="251:54">frame</name><operator pos:start="251:55" pos:end="251:56">-&gt;</operator><name pos:start="251:57" pos:end="251:62">format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:50"><expr pos:start="253:13" pos:end="253:49"><name pos:start="253:13" pos:end="253:18">planes</name> <operator pos:start="253:20" pos:end="253:20">=</operator> <ternary pos:start="253:22" pos:end="253:49"><condition pos:start="253:22" pos:end="253:29"><expr pos:start="253:22" pos:end="253:27"><name pos:start="253:22" pos:end="253:27">planar</name></expr> ?</condition><then pos:start="253:31" pos:end="253:45"> <expr pos:start="253:31" pos:end="253:45"><name pos:start="253:31" pos:end="253:45"><name pos:start="253:31" pos:end="253:35">avctx</name><operator pos:start="253:36" pos:end="253:37">-&gt;</operator><name pos:start="253:38" pos:end="253:45">channels</name></name></expr> </then><else pos:start="253:47" pos:end="253:49">: <expr pos:start="253:49" pos:end="253:49"><literal type="number" pos:start="253:49" pos:end="253:49">1</literal></expr></else></ternary></expr>;</expr_stmt>



            <if_stmt pos:start="257:13" pos:end="273:13"><if pos:start="257:13" pos:end="273:13">if <condition pos:start="257:16" pos:end="257:52">(<expr pos:start="257:17" pos:end="257:51"><name pos:start="257:17" pos:end="257:22">planes</name> <operator pos:start="257:24" pos:end="257:24">&gt;</operator> <call pos:start="257:26" pos:end="257:51"><name pos:start="257:26" pos:end="257:39">FF_ARRAY_ELEMS</name><argument_list pos:start="257:40" pos:end="257:51">(<argument pos:start="257:41" pos:end="257:50"><expr pos:start="257:41" pos:end="257:50"><name pos:start="257:41" pos:end="257:50"><name pos:start="257:41" pos:end="257:45">frame</name><operator pos:start="257:46" pos:end="257:47">-&gt;</operator><name pos:start="257:48" pos:end="257:50">buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="257:54" pos:end="273:13">{<block_content pos:start="259:17" pos:end="271:17">

                <expr_stmt pos:start="259:17" pos:end="259:77"><expr pos:start="259:17" pos:end="259:76"><name pos:start="259:17" pos:end="259:38"><name pos:start="259:17" pos:end="259:21">frame</name><operator pos:start="259:22" pos:end="259:23">-&gt;</operator><name pos:start="259:24" pos:end="259:38">nb_extended_buf</name></name> <operator pos:start="259:40" pos:end="259:40">=</operator> <name pos:start="259:42" pos:end="259:47">planes</name> <operator pos:start="259:49" pos:end="259:49">-</operator> <call pos:start="259:51" pos:end="259:76"><name pos:start="259:51" pos:end="259:64">FF_ARRAY_ELEMS</name><argument_list pos:start="259:65" pos:end="259:76">(<argument pos:start="259:66" pos:end="259:75"><expr pos:start="259:66" pos:end="259:75"><name pos:start="259:66" pos:end="259:75"><name pos:start="259:66" pos:end="259:70">frame</name><operator pos:start="259:71" pos:end="259:72">-&gt;</operator><name pos:start="259:73" pos:end="259:75">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="261:17" pos:end="263:72"><expr pos:start="261:17" pos:end="263:71"><name pos:start="261:17" pos:end="261:35"><name pos:start="261:17" pos:end="261:21">frame</name><operator pos:start="261:22" pos:end="261:23">-&gt;</operator><name pos:start="261:24" pos:end="261:35">extended_buf</name></name> <operator pos:start="261:37" pos:end="261:37">=</operator> <call pos:start="261:39" pos:end="263:71"><name pos:start="261:39" pos:end="261:47">av_malloc</name><argument_list pos:start="261:48" pos:end="263:71">(<argument pos:start="261:49" pos:end="263:70"><expr pos:start="261:49" pos:end="263:70"><sizeof pos:start="261:49" pos:end="261:76">sizeof<argument_list pos:start="261:55" pos:end="261:76">(<argument pos:start="261:56" pos:end="261:75"><expr pos:start="261:56" pos:end="261:75"><operator pos:start="261:56" pos:end="261:56">*</operator><name pos:start="261:57" pos:end="261:75"><name pos:start="261:57" pos:end="261:61">frame</name><operator pos:start="261:62" pos:end="261:63">-&gt;</operator><name pos:start="261:64" pos:end="261:75">extended_buf</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="261:78" pos:end="261:78">*</operator>

                                                <name pos:start="263:49" pos:end="263:70"><name pos:start="263:49" pos:end="263:53">frame</name><operator pos:start="263:54" pos:end="263:55">-&gt;</operator><name pos:start="263:56" pos:end="263:70">nb_extended_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="265:17" pos:end="271:17"><if pos:start="265:17" pos:end="271:17">if <condition pos:start="265:20" pos:end="265:41">(<expr pos:start="265:21" pos:end="265:40"><operator pos:start="265:21" pos:end="265:21">!</operator><name pos:start="265:22" pos:end="265:40"><name pos:start="265:22" pos:end="265:26">frame</name><operator pos:start="265:27" pos:end="265:28">-&gt;</operator><name pos:start="265:29" pos:end="265:40">extended_buf</name></name></expr>)</condition> <block pos:start="265:43" pos:end="271:17">{<block_content pos:start="267:21" pos:end="269:30">

                    <expr_stmt pos:start="267:21" pos:end="267:42"><expr pos:start="267:21" pos:end="267:41"><name pos:start="267:21" pos:end="267:23">ret</name> <operator pos:start="267:25" pos:end="267:25">=</operator> <call pos:start="267:27" pos:end="267:41"><name pos:start="267:27" pos:end="267:33">AVERROR</name><argument_list pos:start="267:34" pos:end="267:41">(<argument pos:start="267:35" pos:end="267:40"><expr pos:start="267:35" pos:end="267:40"><name pos:start="267:35" pos:end="267:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="269:21" pos:end="269:30">goto <name pos:start="269:26" pos:end="269:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <for pos:start="277:13" pos:end="279:87">for <control pos:start="277:17" pos:end="277:75">(<init pos:start="277:18" pos:end="277:23"><expr pos:start="277:18" pos:end="277:22"><name pos:start="277:18" pos:end="277:18">i</name> <operator pos:start="277:20" pos:end="277:20">=</operator> <literal type="number" pos:start="277:22" pos:end="277:22">0</literal></expr>;</init> <condition pos:start="277:25" pos:end="277:70"><expr pos:start="277:25" pos:end="277:69"><name pos:start="277:25" pos:end="277:25">i</name> <operator pos:start="277:27" pos:end="277:27">&lt;</operator> <call pos:start="277:29" pos:end="277:69"><name pos:start="277:29" pos:end="277:33">FFMIN</name><argument_list pos:start="277:34" pos:end="277:69">(<argument pos:start="277:35" pos:end="277:40"><expr pos:start="277:35" pos:end="277:40"><name pos:start="277:35" pos:end="277:40">planes</name></expr></argument>, <argument pos:start="277:43" pos:end="277:68"><expr pos:start="277:43" pos:end="277:68"><call pos:start="277:43" pos:end="277:68"><name pos:start="277:43" pos:end="277:56">FF_ARRAY_ELEMS</name><argument_list pos:start="277:57" pos:end="277:68">(<argument pos:start="277:58" pos:end="277:67"><expr pos:start="277:58" pos:end="277:67"><name pos:start="277:58" pos:end="277:67"><name pos:start="277:58" pos:end="277:62">frame</name><operator pos:start="277:63" pos:end="277:64">-&gt;</operator><name pos:start="277:65" pos:end="277:67">buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="277:72" pos:end="277:74"><expr pos:start="277:72" pos:end="277:74"><name pos:start="277:72" pos:end="277:72">i</name><operator pos:start="277:73" pos:end="277:74">++</operator></expr></incr>)</control><block type="pseudo" pos:start="279:17" pos:end="279:87"><block_content pos:start="279:17" pos:end="279:87">

                <expr_stmt pos:start="279:17" pos:end="279:87"><expr pos:start="279:17" pos:end="279:86"><call pos:start="279:17" pos:end="279:86"><name pos:start="279:17" pos:end="279:26">WRAP_PLANE</name><argument_list pos:start="279:27" pos:end="279:86">(<argument pos:start="279:28" pos:end="279:40"><expr pos:start="279:28" pos:end="279:40"><name pos:start="279:28" pos:end="279:40"><name pos:start="279:28" pos:end="279:32">frame</name><operator pos:start="279:33" pos:end="279:34">-&gt;</operator><name pos:start="279:35" pos:end="279:37">buf</name><index pos:start="279:38" pos:end="279:40">[<expr pos:start="279:39" pos:end="279:39"><name pos:start="279:39" pos:end="279:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="279:43" pos:end="279:65"><expr pos:start="279:43" pos:end="279:65"><name pos:start="279:43" pos:end="279:65"><name pos:start="279:43" pos:end="279:47">frame</name><operator pos:start="279:48" pos:end="279:49">-&gt;</operator><name pos:start="279:50" pos:end="279:62">extended_data</name><index pos:start="279:63" pos:end="279:65">[<expr pos:start="279:64" pos:end="279:64"><name pos:start="279:64" pos:end="279:64">i</name></expr>]</index></name></expr></argument>, <argument pos:start="279:68" pos:end="279:85"><expr pos:start="279:68" pos:end="279:85"><name pos:start="279:68" pos:end="279:85"><name pos:start="279:68" pos:end="279:72">frame</name><operator pos:start="279:73" pos:end="279:74">-&gt;</operator><name pos:start="279:75" pos:end="279:82">linesize</name><index pos:start="279:83" pos:end="279:85">[<expr pos:start="279:84" pos:end="279:84"><literal type="number" pos:start="279:84" pos:end="279:84">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



            <for pos:start="283:13" pos:end="289:47">for <control pos:start="283:17" pos:end="283:69">(<init pos:start="283:18" pos:end="283:23"><expr pos:start="283:18" pos:end="283:22"><name pos:start="283:18" pos:end="283:18">i</name> <operator pos:start="283:20" pos:end="283:20">=</operator> <literal type="number" pos:start="283:22" pos:end="283:22">0</literal></expr>;</init> <condition pos:start="283:25" pos:end="283:64"><expr pos:start="283:25" pos:end="283:63"><name pos:start="283:25" pos:end="283:25">i</name> <operator pos:start="283:27" pos:end="283:27">&lt;</operator> <name pos:start="283:29" pos:end="283:34">planes</name> <operator pos:start="283:36" pos:end="283:36">-</operator> <call pos:start="283:38" pos:end="283:63"><name pos:start="283:38" pos:end="283:51">FF_ARRAY_ELEMS</name><argument_list pos:start="283:52" pos:end="283:63">(<argument pos:start="283:53" pos:end="283:62"><expr pos:start="283:53" pos:end="283:62"><name pos:start="283:53" pos:end="283:62"><name pos:start="283:53" pos:end="283:57">frame</name><operator pos:start="283:58" pos:end="283:59">-&gt;</operator><name pos:start="283:60" pos:end="283:62">buf</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="283:66" pos:end="283:68"><expr pos:start="283:66" pos:end="283:68"><name pos:start="283:66" pos:end="283:66">i</name><operator pos:start="283:67" pos:end="283:68">++</operator></expr></incr>)</control><block type="pseudo" pos:start="285:17" pos:end="289:47"><block_content pos:start="285:17" pos:end="289:47">

                <expr_stmt pos:start="285:17" pos:end="289:47"><expr pos:start="285:17" pos:end="289:46"><call pos:start="285:17" pos:end="289:46"><name pos:start="285:17" pos:end="285:26">WRAP_PLANE</name><argument_list pos:start="285:27" pos:end="289:46">(<argument pos:start="285:28" pos:end="285:49"><expr pos:start="285:28" pos:end="285:49"><name pos:start="285:28" pos:end="285:49"><name pos:start="285:28" pos:end="285:32">frame</name><operator pos:start="285:33" pos:end="285:34">-&gt;</operator><name pos:start="285:35" pos:end="285:46">extended_buf</name><index pos:start="285:47" pos:end="285:49">[<expr pos:start="285:48" pos:end="285:48"><name pos:start="285:48" pos:end="285:48">i</name></expr>]</index></name></expr></argument>,

                           <argument pos:start="287:28" pos:end="287:79"><expr pos:start="287:28" pos:end="287:79"><name pos:start="287:28" pos:end="287:79"><name pos:start="287:28" pos:end="287:32">frame</name><operator pos:start="287:33" pos:end="287:34">-&gt;</operator><name pos:start="287:35" pos:end="287:47">extended_data</name><index pos:start="287:48" pos:end="287:79">[<expr pos:start="287:49" pos:end="287:78"><name pos:start="287:49" pos:end="287:49">i</name> <operator pos:start="287:51" pos:end="287:51">+</operator> <call pos:start="287:53" pos:end="287:78"><name pos:start="287:53" pos:end="287:66">FF_ARRAY_ELEMS</name><argument_list pos:start="287:67" pos:end="287:78">(<argument pos:start="287:68" pos:end="287:77"><expr pos:start="287:68" pos:end="287:77"><name pos:start="287:68" pos:end="287:77"><name pos:start="287:68" pos:end="287:72">frame</name><operator pos:start="287:73" pos:end="287:74">-&gt;</operator><name pos:start="287:75" pos:end="287:77">buf</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

                           <argument pos:start="289:28" pos:end="289:45"><expr pos:start="289:28" pos:end="289:45"><name pos:start="289:28" pos:end="289:45"><name pos:start="289:28" pos:end="289:32">frame</name><operator pos:start="289:33" pos:end="289:34">-&gt;</operator><name pos:start="289:35" pos:end="289:42">linesize</name><index pos:start="289:43" pos:end="289:45">[<expr pos:start="289:44" pos:end="289:44"><literal type="number" pos:start="289:44" pos:end="289:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="295:9" pos:end="295:36"><expr pos:start="295:9" pos:end="295:35"><call pos:start="295:9" pos:end="295:35"><name pos:start="295:9" pos:end="295:23">av_buffer_unref</name><argument_list pos:start="295:24" pos:end="295:35">(<argument pos:start="295:25" pos:end="295:34"><expr pos:start="295:25" pos:end="295:34"><operator pos:start="295:25" pos:end="295:25">&amp;</operator><name pos:start="295:26" pos:end="295:34">dummy_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="299:9" pos:end="299:17">return <expr pos:start="299:16" pos:end="299:16"><literal type="number" pos:start="299:16" pos:end="299:16">0</literal></expr>;</return>



<label pos:start="303:1" pos:end="303:5"><name pos:start="303:1" pos:end="303:4">fail</name>:</label>

        <expr_stmt pos:start="305:9" pos:end="305:44"><expr pos:start="305:9" pos:end="305:43"><call pos:start="305:9" pos:end="305:43"><name pos:start="305:9" pos:end="305:29"><name pos:start="305:9" pos:end="305:13">avctx</name><operator pos:start="305:14" pos:end="305:15">-&gt;</operator><name pos:start="305:16" pos:end="305:29">release_buffer</name></name><argument_list pos:start="305:30" pos:end="305:43">(<argument pos:start="305:31" pos:end="305:35"><expr pos:start="305:31" pos:end="305:35"><name pos:start="305:31" pos:end="305:35">avctx</name></expr></argument>, <argument pos:start="305:38" pos:end="305:42"><expr pos:start="305:38" pos:end="305:42"><name pos:start="305:38" pos:end="305:42">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:24"><expr pos:start="307:9" pos:end="307:23"><call pos:start="307:9" pos:end="307:23"><name pos:start="307:9" pos:end="307:16">av_freep</name><argument_list pos:start="307:17" pos:end="307:23">(<argument pos:start="307:18" pos:end="307:22"><expr pos:start="307:18" pos:end="307:22"><operator pos:start="307:18" pos:end="307:18">&amp;</operator><name pos:start="307:19" pos:end="307:22">priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:36"><expr pos:start="309:9" pos:end="309:35"><call pos:start="309:9" pos:end="309:35"><name pos:start="309:9" pos:end="309:23">av_buffer_unref</name><argument_list pos:start="309:24" pos:end="309:35">(<argument pos:start="309:25" pos:end="309:34"><expr pos:start="309:25" pos:end="309:34"><operator pos:start="309:25" pos:end="309:25">&amp;</operator><name pos:start="309:26" pos:end="309:34">dummy_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="311:9" pos:end="311:19">return <expr pos:start="311:16" pos:end="311:18"><name pos:start="311:16" pos:end="311:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="315:1" pos:end="315:6">#<cpp:directive pos:start="315:2" pos:end="315:6">endif</cpp:directive></cpp:endif>



    <return pos:start="319:5" pos:end="319:51">return <expr pos:start="319:12" pos:end="319:50"><call pos:start="319:12" pos:end="319:50"><name pos:start="319:12" pos:end="319:29"><name pos:start="319:12" pos:end="319:16">avctx</name><operator pos:start="319:17" pos:end="319:18">-&gt;</operator><name pos:start="319:19" pos:end="319:29">get_buffer2</name></name><argument_list pos:start="319:30" pos:end="319:50">(<argument pos:start="319:31" pos:end="319:35"><expr pos:start="319:31" pos:end="319:35"><name pos:start="319:31" pos:end="319:35">avctx</name></expr></argument>, <argument pos:start="319:38" pos:end="319:42"><expr pos:start="319:38" pos:end="319:42"><name pos:start="319:38" pos:end="319:42">frame</name></expr></argument>, <argument pos:start="319:45" pos:end="319:49"><expr pos:start="319:45" pos:end="319:49"><name pos:start="319:45" pos:end="319:49">flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
