<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/194.c" pos:tabs="8"><function pos:start="1:1" pos:end="221:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">webvtt_read_header</name><parameter_list pos:start="1:30" pos:end="1:49">(<parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:47"><name pos:start="1:31" pos:end="1:45">AVFormatContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="221:1">{<block_content pos:start="5:5" pos:end="219:15">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">WebVTTContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:25">webvtt</name> <init pos:start="5:27" pos:end="5:40">= <expr pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:29">s</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">AVBPrint</name></type> <name pos:start="7:14" pos:end="7:19">header</name></decl>, <decl pos:start="7:22" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:22" pos:end="7:24">cue</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">res</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:48"><decl pos:start="11:5" pos:end="11:47"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">AVStream</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">st</name> <init pos:start="11:18" pos:end="11:47">= <expr pos:start="11:20" pos:end="11:47"><call pos:start="11:20" pos:end="11:47"><name pos:start="11:20" pos:end="11:38">avformat_new_stream</name><argument_list pos:start="11:39" pos:end="11:47">(<argument pos:start="11:40" pos:end="11:40"><expr pos:start="11:40" pos:end="11:40"><name pos:start="11:40" pos:end="11:40">s</name></expr></argument>, <argument pos:start="11:43" pos:end="11:46"><expr pos:start="11:43" pos:end="11:46"><name pos:start="11:43" pos:end="11:46">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:31"><if pos:start="15:5" pos:end="17:31">if <condition pos:start="15:8" pos:end="15:12">(<expr pos:start="15:9" pos:end="15:11"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:11">st</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:31"><block_content pos:start="17:9" pos:end="17:31">

        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:41"><expr pos:start="19:5" pos:end="19:40"><call pos:start="19:5" pos:end="19:40"><name pos:start="19:5" pos:end="19:23">avpriv_set_pts_info</name><argument_list pos:start="19:24" pos:end="19:40">(<argument pos:start="19:25" pos:end="19:26"><expr pos:start="19:25" pos:end="19:26"><name pos:start="19:25" pos:end="19:26">st</name></expr></argument>, <argument pos:start="19:29" pos:end="19:30"><expr pos:start="19:29" pos:end="19:30"><literal type="number" pos:start="19:29" pos:end="19:30">64</literal></expr></argument>, <argument pos:start="19:33" pos:end="19:33"><expr pos:start="19:33" pos:end="19:33"><literal type="number" pos:start="19:33" pos:end="19:33">1</literal></expr></argument>, <argument pos:start="19:36" pos:end="19:39"><expr pos:start="19:36" pos:end="19:39"><literal type="number" pos:start="19:36" pos:end="19:39">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:50"><expr pos:start="21:5" pos:end="21:49"><name pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:6">st</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:13">codec</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:25">codec_type</name></name> <operator pos:start="21:27" pos:end="21:27">=</operator> <name pos:start="21:29" pos:end="21:49">AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:6">st</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:13">codec</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:23">codec_id</name></name>   <operator pos:start="23:27" pos:end="23:27">=</operator> <name pos:start="23:29" pos:end="23:46">AV_CODEC_ID_WEBVTT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:6">st</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:19">disposition</name></name> <operator pos:start="25:21" pos:end="25:22">|=</operator> <name pos:start="25:24" pos:end="25:35"><name pos:start="25:24" pos:end="25:29">webvtt</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:35">kind</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:57"><expr pos:start="29:5" pos:end="29:56"><call pos:start="29:5" pos:end="29:56"><name pos:start="29:5" pos:end="29:18">av_bprint_init</name><argument_list pos:start="29:19" pos:end="29:56">(<argument pos:start="29:20" pos:end="29:26"><expr pos:start="29:20" pos:end="29:26"><operator pos:start="29:20" pos:end="29:20">&amp;</operator><name pos:start="29:21" pos:end="29:26">header</name></expr></argument>, <argument pos:start="29:29" pos:end="29:29"><expr pos:start="29:29" pos:end="29:29"><literal type="number" pos:start="29:29" pos:end="29:29">0</literal></expr></argument>, <argument pos:start="29:32" pos:end="29:55"><expr pos:start="29:32" pos:end="29:55"><name pos:start="29:32" pos:end="29:55">AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:57"><expr pos:start="31:5" pos:end="31:56"><call pos:start="31:5" pos:end="31:56"><name pos:start="31:5" pos:end="31:18">av_bprint_init</name><argument_list pos:start="31:19" pos:end="31:56">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><operator pos:start="31:20" pos:end="31:20">&amp;</operator><name pos:start="31:21" pos:end="31:23">cue</name></expr></argument>,    <argument pos:start="31:29" pos:end="31:29"><expr pos:start="31:29" pos:end="31:29"><literal type="number" pos:start="31:29" pos:end="31:29">0</literal></expr></argument>, <argument pos:start="31:32" pos:end="31:55"><expr pos:start="31:32" pos:end="31:55"><name pos:start="31:32" pos:end="31:55">AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="35:5" pos:end="205:5">for <control pos:start="35:9" pos:end="35:12">(<init pos:start="35:10" pos:end="35:10">;</init><condition pos:start="35:11" pos:end="35:11">;</condition><incr/>)</control> <block pos:start="35:14" pos:end="205:5">{<block_content pos:start="37:9" pos:end="203:63">

        <decl_stmt pos:start="37:9" pos:end="37:14"><decl pos:start="37:9" pos:end="37:13"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:20"><decl pos:start="39:9" pos:end="39:19"><type pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:15">int64_t</name></type> <name pos:start="39:17" pos:end="39:19">pos</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:22"><decl pos:start="41:9" pos:end="41:21"><type pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:16">AVPacket</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:21">sub</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:46"><decl pos:start="43:9" pos:end="43:21"><type pos:start="43:9" pos:end="43:20"><specifier pos:start="43:9" pos:end="43:13">const</specifier> <name pos:start="43:15" pos:end="43:18">char</name> <modifier pos:start="43:20" pos:end="43:20">*</modifier></type><name pos:start="43:21" pos:end="43:21">p</name></decl>, <decl pos:start="43:24" pos:end="43:34"><type ref="prev" pos:start="43:9" pos:end="43:20"><modifier pos:start="43:24" pos:end="43:24">*</modifier></type><name pos:start="43:25" pos:end="43:34">identifier</name></decl>, <decl pos:start="43:37" pos:end="43:45"><type ref="prev" pos:start="43:9" pos:end="43:20"><modifier pos:start="43:37" pos:end="43:37">*</modifier></type><name pos:start="43:38" pos:end="43:45">settings</name></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:41"><decl pos:start="45:9" pos:end="45:26"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:26">identifier_len</name></decl>, <decl pos:start="45:29" pos:end="45:40"><type ref="prev" pos:start="45:9" pos:end="45:11"/><name pos:start="45:29" pos:end="45:40">settings_len</name></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:33"><decl pos:start="47:9" pos:end="47:24"><type pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:15">int64_t</name></type> <name pos:start="47:17" pos:end="47:24">ts_start</name></decl>, <decl pos:start="47:27" pos:end="47:32"><type ref="prev" pos:start="47:9" pos:end="47:15"/><name pos:start="47:27" pos:end="47:32">ts_end</name></decl>;</decl_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:45"><expr pos:start="51:9" pos:end="51:44"><call pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:31">ff_subtitles_read_chunk</name><argument_list pos:start="51:32" pos:end="51:44">(<argument pos:start="51:33" pos:end="51:37"><expr pos:start="51:33" pos:end="51:37"><name pos:start="51:33" pos:end="51:37"><name pos:start="51:33" pos:end="51:33">s</name><operator pos:start="51:34" pos:end="51:35">-&gt;</operator><name pos:start="51:36" pos:end="51:37">pb</name></name></expr></argument>, <argument pos:start="51:40" pos:end="51:43"><expr pos:start="51:40" pos:end="51:43"><operator pos:start="51:40" pos:end="51:40">&amp;</operator><name pos:start="51:41" pos:end="51:43">cue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="55:9" pos:end="57:18"><if pos:start="55:9" pos:end="57:18">if <condition pos:start="55:12" pos:end="55:21">(<expr pos:start="55:13" pos:end="55:20"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:20"><name pos:start="55:14" pos:end="55:16">cue</name><operator pos:start="55:17" pos:end="55:17">.</operator><name pos:start="55:18" pos:end="55:20">len</name></name></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:18"><block_content pos:start="57:13" pos:end="57:18">

            <break pos:start="57:13" pos:end="57:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:33"><expr pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:9">p</name> <operator pos:start="61:11" pos:end="61:11">=</operator> <name pos:start="61:13" pos:end="61:22">identifier</name> <operator pos:start="61:24" pos:end="61:24">=</operator> <name pos:start="61:26" pos:end="61:32"><name pos:start="61:26" pos:end="61:28">cue</name><operator pos:start="61:29" pos:end="61:29">.</operator><name pos:start="61:30" pos:end="61:32">str</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:31"><expr pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:11">pos</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:30"><name pos:start="63:15" pos:end="63:23">avio_tell</name><argument_list pos:start="63:24" pos:end="63:30">(<argument pos:start="63:25" pos:end="63:29"><expr pos:start="63:25" pos:end="63:29"><name pos:start="63:25" pos:end="63:29"><name pos:start="63:25" pos:end="63:25">s</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:29">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="67:9" pos:end="67:33">/* ignore header chunk */</comment>

        <if_stmt pos:start="69:9" pos:end="73:21"><if pos:start="69:9" pos:end="73:21">if <condition pos:start="69:12" pos:end="71:37">(<expr pos:start="69:13" pos:end="71:36"><operator pos:start="69:13" pos:end="69:13">!</operator><call pos:start="69:14" pos:end="69:48"><name pos:start="69:14" pos:end="69:20">strncmp</name><argument_list pos:start="69:21" pos:end="69:48">(<argument pos:start="69:22" pos:end="69:22"><expr pos:start="69:22" pos:end="69:22"><name pos:start="69:22" pos:end="69:22">p</name></expr></argument>, <argument pos:start="69:25" pos:end="69:44"><expr pos:start="69:25" pos:end="69:44"><literal type="string" pos:start="69:25" pos:end="69:44">"\xEF\xBB\xBFWEBVTT"</literal></expr></argument>, <argument pos:start="69:47" pos:end="69:47"><expr pos:start="69:47" pos:end="69:47"><literal type="number" pos:start="69:47" pos:end="69:47">9</literal></expr></argument>)</argument_list></call> <operator pos:start="69:50" pos:end="69:51">||</operator>

            <operator pos:start="71:13" pos:end="71:13">!</operator><call pos:start="71:14" pos:end="71:36"><name pos:start="71:14" pos:end="71:20">strncmp</name><argument_list pos:start="71:21" pos:end="71:36">(<argument pos:start="71:22" pos:end="71:22"><expr pos:start="71:22" pos:end="71:22"><name pos:start="71:22" pos:end="71:22">p</name></expr></argument>, <argument pos:start="71:25" pos:end="71:32"><expr pos:start="71:25" pos:end="71:32"><literal type="string" pos:start="71:25" pos:end="71:32">"WEBVTT"</literal></expr></argument>, <argument pos:start="71:35" pos:end="71:35"><expr pos:start="71:35" pos:end="71:35"><literal type="number" pos:start="71:35" pos:end="71:35">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:21"><block_content pos:start="73:13" pos:end="73:21">

            <continue pos:start="73:13" pos:end="73:21">continue;</continue></block_content></block></if></if_stmt>



        <comment type="block" pos:start="77:9" pos:end="79:28">/* optional cue identifier (can be a number like in SRT or some kind of

         * chaptering id) */</comment>

        <for pos:start="81:9" pos:end="91:9">for <control pos:start="81:13" pos:end="81:62">(<init pos:start="81:14" pos:end="81:19"><expr pos:start="81:14" pos:end="81:18"><name pos:start="81:14" pos:end="81:14">i</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <literal type="number" pos:start="81:18" pos:end="81:18">0</literal></expr>;</init> <condition pos:start="81:21" pos:end="81:57"><expr pos:start="81:21" pos:end="81:56"><name pos:start="81:21" pos:end="81:24"><name pos:start="81:21" pos:end="81:21">p</name><index pos:start="81:22" pos:end="81:24">[<expr pos:start="81:23" pos:end="81:23"><name pos:start="81:23" pos:end="81:23">i</name></expr>]</index></name> <operator pos:start="81:26" pos:end="81:27">&amp;&amp;</operator> <name pos:start="81:29" pos:end="81:32"><name pos:start="81:29" pos:end="81:29">p</name><index pos:start="81:30" pos:end="81:32">[<expr pos:start="81:31" pos:end="81:31"><name pos:start="81:31" pos:end="81:31">i</name></expr>]</index></name> <operator pos:start="81:34" pos:end="81:35">!=</operator> <literal type="char" pos:start="81:37" pos:end="81:40">'\n'</literal> <operator pos:start="81:42" pos:end="81:43">&amp;&amp;</operator> <name pos:start="81:45" pos:end="81:48"><name pos:start="81:45" pos:end="81:45">p</name><index pos:start="81:46" pos:end="81:48">[<expr pos:start="81:47" pos:end="81:47"><name pos:start="81:47" pos:end="81:47">i</name></expr>]</index></name> <operator pos:start="81:50" pos:end="81:51">!=</operator> <literal type="char" pos:start="81:53" pos:end="81:56">'\r'</literal></expr>;</condition> <incr pos:start="81:59" pos:end="81:61"><expr pos:start="81:59" pos:end="81:61"><name pos:start="81:59" pos:end="81:59">i</name><operator pos:start="81:60" pos:end="81:61">++</operator></expr></incr>)</control> <block pos:start="81:64" pos:end="91:9">{<block_content pos:start="83:13" pos:end="89:13">

            <if_stmt pos:start="83:13" pos:end="89:13"><if pos:start="83:13" pos:end="89:13">if <condition pos:start="83:16" pos:end="83:42">(<expr pos:start="83:17" pos:end="83:41"><operator pos:start="83:17" pos:end="83:17">!</operator><call pos:start="83:18" pos:end="83:41"><name pos:start="83:18" pos:end="83:24">strncmp</name><argument_list pos:start="83:25" pos:end="83:41">(<argument pos:start="83:26" pos:end="83:30"><expr pos:start="83:26" pos:end="83:30"><name pos:start="83:26" pos:end="83:26">p</name> <operator pos:start="83:28" pos:end="83:28">+</operator> <name pos:start="83:30" pos:end="83:30">i</name></expr></argument>, <argument pos:start="83:33" pos:end="83:37"><expr pos:start="83:33" pos:end="83:37"><literal type="string" pos:start="83:33" pos:end="83:37">"--&gt;"</literal></expr></argument>, <argument pos:start="83:40" pos:end="83:40"><expr pos:start="83:40" pos:end="83:40"><literal type="number" pos:start="83:40" pos:end="83:40">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:44" pos:end="89:13">{<block_content pos:start="85:17" pos:end="87:22">

                <expr_stmt pos:start="85:17" pos:end="85:34"><expr pos:start="85:17" pos:end="85:33"><name pos:start="85:17" pos:end="85:26">identifier</name> <operator pos:start="85:28" pos:end="85:28">=</operator> <name pos:start="85:30" pos:end="85:33">NULL</name></expr>;</expr_stmt>

                <break pos:start="87:17" pos:end="87:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="93:9" pos:end="111:9"><if pos:start="93:9" pos:end="95:31">if <condition pos:start="93:12" pos:end="93:24">(<expr pos:start="93:13" pos:end="93:23"><operator pos:start="93:13" pos:end="93:13">!</operator><name pos:start="93:14" pos:end="93:23">identifier</name></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:31"><block_content pos:start="95:13" pos:end="95:31">

            <expr_stmt pos:start="95:13" pos:end="95:31"><expr pos:start="95:13" pos:end="95:30"><name pos:start="95:13" pos:end="95:26">identifier_len</name> <operator pos:start="95:28" pos:end="95:28">=</operator> <literal type="number" pos:start="95:30" pos:end="95:30">0</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="97:9" pos:end="111:9">else <block pos:start="97:14" pos:end="111:9">{<block_content pos:start="99:13" pos:end="109:20">

            <expr_stmt pos:start="99:13" pos:end="99:48"><expr pos:start="99:13" pos:end="99:47"><name pos:start="99:13" pos:end="99:26">identifier_len</name> <operator pos:start="99:28" pos:end="99:28">=</operator> <call pos:start="99:30" pos:end="99:47"><name pos:start="99:30" pos:end="99:36">strcspn</name><argument_list pos:start="99:37" pos:end="99:47">(<argument pos:start="99:38" pos:end="99:38"><expr pos:start="99:38" pos:end="99:38"><name pos:start="99:38" pos:end="99:38">p</name></expr></argument>, <argument pos:start="99:41" pos:end="99:46"><expr pos:start="99:41" pos:end="99:46"><literal type="string" pos:start="99:41" pos:end="99:46">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:32"><expr pos:start="101:13" pos:end="101:31"><name pos:start="101:13" pos:end="101:13">p</name> <operator pos:start="101:15" pos:end="101:16">+=</operator> <name pos:start="101:18" pos:end="101:31">identifier_len</name></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="105:20"><if pos:start="103:13" pos:end="105:20">if <condition pos:start="103:16" pos:end="103:27">(<expr pos:start="103:17" pos:end="103:26"><operator pos:start="103:17" pos:end="103:17">*</operator><name pos:start="103:18" pos:end="103:18">p</name> <operator pos:start="103:20" pos:end="103:21">==</operator> <literal type="char" pos:start="103:23" pos:end="103:26">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:20"><block_content pos:start="105:17" pos:end="105:20">

                <expr_stmt pos:start="105:17" pos:end="105:20"><expr pos:start="105:17" pos:end="105:19"><name pos:start="105:17" pos:end="105:17">p</name><operator pos:start="105:18" pos:end="105:19">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="107:13" pos:end="109:20"><if pos:start="107:13" pos:end="109:20">if <condition pos:start="107:16" pos:end="107:27">(<expr pos:start="107:17" pos:end="107:26"><operator pos:start="107:17" pos:end="107:17">*</operator><name pos:start="107:18" pos:end="107:18">p</name> <operator pos:start="107:20" pos:end="107:21">==</operator> <literal type="char" pos:start="107:23" pos:end="107:26">'\n'</literal></expr>)</condition><block type="pseudo" pos:start="109:17" pos:end="109:20"><block_content pos:start="109:17" pos:end="109:20">

                <expr_stmt pos:start="109:17" pos:end="109:20"><expr pos:start="109:17" pos:end="109:19"><name pos:start="109:17" pos:end="109:17">p</name><operator pos:start="109:18" pos:end="109:19">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="115:9" pos:end="115:28">/* cue timestamps */</comment>

        <if_stmt pos:start="117:9" pos:end="119:18"><if pos:start="117:9" pos:end="119:18">if <condition pos:start="117:12" pos:end="117:54">(<expr pos:start="117:13" pos:end="117:53"><operator pos:start="117:13" pos:end="117:13">(</operator><name pos:start="117:14" pos:end="117:21">ts_start</name> <operator pos:start="117:23" pos:end="117:23">=</operator> <call pos:start="117:25" pos:end="117:34"><name pos:start="117:25" pos:end="117:31">read_ts</name><argument_list pos:start="117:32" pos:end="117:34">(<argument pos:start="117:33" pos:end="117:33"><expr pos:start="117:33" pos:end="117:33"><name pos:start="117:33" pos:end="117:33">p</name></expr></argument>)</argument_list></call><operator pos:start="117:35" pos:end="117:35">)</operator> <operator pos:start="117:37" pos:end="117:38">==</operator> <name pos:start="117:40" pos:end="117:53">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:18"><block_content pos:start="119:13" pos:end="119:18">

            <break pos:start="119:13" pos:end="119:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="121:9" pos:end="123:18"><if pos:start="121:9" pos:end="123:18">if <condition pos:start="121:12" pos:end="121:36">(<expr pos:start="121:13" pos:end="121:35"><operator pos:start="121:13" pos:end="121:13">!</operator><operator pos:start="121:14" pos:end="121:14">(</operator><name pos:start="121:15" pos:end="121:15">p</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:34"><name pos:start="121:19" pos:end="121:24">strstr</name><argument_list pos:start="121:25" pos:end="121:34">(<argument pos:start="121:26" pos:end="121:26"><expr pos:start="121:26" pos:end="121:26"><name pos:start="121:26" pos:end="121:26">p</name></expr></argument>, <argument pos:start="121:29" pos:end="121:33"><expr pos:start="121:29" pos:end="121:33"><literal type="string" pos:start="121:29" pos:end="121:33">"--&gt;"</literal></expr></argument>)</argument_list></call><operator pos:start="121:35" pos:end="121:35">)</operator></expr>)</condition><block type="pseudo" pos:start="123:13" pos:end="123:18"><block_content pos:start="123:13" pos:end="123:18">

            <break pos:start="123:13" pos:end="123:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:15"><expr pos:start="125:9" pos:end="125:14"><name pos:start="125:9" pos:end="125:9">p</name> <operator pos:start="125:11" pos:end="125:12">+=</operator> <literal type="number" pos:start="125:14" pos:end="125:14">3</literal></expr>;</expr_stmt>

        <do pos:start="127:9" pos:end="127:48">do<block type="pseudo" pos:start="127:12" pos:end="127:15"><block_content pos:start="127:12" pos:end="127:15"> <expr_stmt pos:start="127:12" pos:end="127:15"><expr pos:start="127:12" pos:end="127:14"><name pos:start="127:12" pos:end="127:12">p</name><operator pos:start="127:13" pos:end="127:14">++</operator></expr>;</expr_stmt></block_content></block> while <condition pos:start="127:23" pos:end="127:47">(<expr pos:start="127:24" pos:end="127:46"><operator pos:start="127:24" pos:end="127:24">*</operator><name pos:start="127:25" pos:end="127:25">p</name> <operator pos:start="127:27" pos:end="127:28">==</operator> <literal type="char" pos:start="127:30" pos:end="127:32">' '</literal> <operator pos:start="127:34" pos:end="127:35">||</operator> <operator pos:start="127:37" pos:end="127:37">*</operator><name pos:start="127:38" pos:end="127:38">p</name> <operator pos:start="127:40" pos:end="127:41">==</operator> <literal type="char" pos:start="127:43" pos:end="127:46">'\t'</literal></expr>)</condition>;</do>

        <if_stmt pos:start="129:9" pos:end="131:18"><if pos:start="129:9" pos:end="131:18">if <condition pos:start="129:12" pos:end="129:52">(<expr pos:start="129:13" pos:end="129:51"><operator pos:start="129:13" pos:end="129:13">(</operator><name pos:start="129:14" pos:end="129:19">ts_end</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <call pos:start="129:23" pos:end="129:32"><name pos:start="129:23" pos:end="129:29">read_ts</name><argument_list pos:start="129:30" pos:end="129:32">(<argument pos:start="129:31" pos:end="129:31"><expr pos:start="129:31" pos:end="129:31"><name pos:start="129:31" pos:end="129:31">p</name></expr></argument>)</argument_list></call><operator pos:start="129:33" pos:end="129:33">)</operator> <operator pos:start="129:35" pos:end="129:36">==</operator> <name pos:start="129:38" pos:end="129:51">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:18"><block_content pos:start="131:13" pos:end="131:18">

            <break pos:start="131:13" pos:end="131:18">break;</break></block_content></block></if></if_stmt>



        <comment type="block" pos:start="135:9" pos:end="135:35">/* optional cue settings */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:33"><expr pos:start="137:9" pos:end="137:32"><name pos:start="137:9" pos:end="137:9">p</name> <operator pos:start="137:11" pos:end="137:12">+=</operator> <call pos:start="137:14" pos:end="137:32"><name pos:start="137:14" pos:end="137:20">strcspn</name><argument_list pos:start="137:21" pos:end="137:32">(<argument pos:start="137:22" pos:end="137:22"><expr pos:start="137:22" pos:end="137:22"><name pos:start="137:22" pos:end="137:22">p</name></expr></argument>, <argument pos:start="137:25" pos:end="137:31"><expr pos:start="137:25" pos:end="137:31"><literal type="string" pos:start="137:25" pos:end="137:31">"\n\t "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="139:9" pos:end="141:16">while <condition pos:start="139:15" pos:end="139:39">(<expr pos:start="139:16" pos:end="139:38"><operator pos:start="139:16" pos:end="139:16">*</operator><name pos:start="139:17" pos:end="139:17">p</name> <operator pos:start="139:19" pos:end="139:20">==</operator> <literal type="char" pos:start="139:22" pos:end="139:25">'\t'</literal> <operator pos:start="139:27" pos:end="139:28">||</operator> <operator pos:start="139:30" pos:end="139:30">*</operator><name pos:start="139:31" pos:end="139:31">p</name> <operator pos:start="139:33" pos:end="139:34">==</operator> <literal type="char" pos:start="139:36" pos:end="139:38">' '</literal></expr>)</condition><block type="pseudo" pos:start="141:13" pos:end="141:16"><block_content pos:start="141:13" pos:end="141:16">

            <expr_stmt pos:start="141:13" pos:end="141:16"><expr pos:start="141:13" pos:end="141:15"><name pos:start="141:13" pos:end="141:13">p</name><operator pos:start="141:14" pos:end="141:15">++</operator></expr>;</expr_stmt></block_content></block></while>

        <expr_stmt pos:start="143:9" pos:end="143:21"><expr pos:start="143:9" pos:end="143:20"><name pos:start="143:9" pos:end="143:16">settings</name> <operator pos:start="143:18" pos:end="143:18">=</operator> <name pos:start="143:20" pos:end="143:20">p</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:42"><expr pos:start="145:9" pos:end="145:41"><name pos:start="145:9" pos:end="145:20">settings_len</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <call pos:start="145:24" pos:end="145:41"><name pos:start="145:24" pos:end="145:30">strcspn</name><argument_list pos:start="145:31" pos:end="145:41">(<argument pos:start="145:32" pos:end="145:32"><expr pos:start="145:32" pos:end="145:32"><name pos:start="145:32" pos:end="145:32">p</name></expr></argument>, <argument pos:start="145:35" pos:end="145:40"><expr pos:start="145:35" pos:end="145:40"><literal type="string" pos:start="145:35" pos:end="145:40">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:26"><expr pos:start="147:9" pos:end="147:25"><name pos:start="147:9" pos:end="147:9">p</name> <operator pos:start="147:11" pos:end="147:12">+=</operator> <name pos:start="147:14" pos:end="147:25">settings_len</name></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="151:16"><if pos:start="149:9" pos:end="151:16">if <condition pos:start="149:12" pos:end="149:23">(<expr pos:start="149:13" pos:end="149:22"><operator pos:start="149:13" pos:end="149:13">*</operator><name pos:start="149:14" pos:end="149:14">p</name> <operator pos:start="149:16" pos:end="149:17">==</operator> <literal type="char" pos:start="149:19" pos:end="149:22">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:16"><block_content pos:start="151:13" pos:end="151:16">

            <expr_stmt pos:start="151:13" pos:end="151:16"><expr pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:13">p</name><operator pos:start="151:14" pos:end="151:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="153:9" pos:end="155:16"><if pos:start="153:9" pos:end="155:16">if <condition pos:start="153:12" pos:end="153:23">(<expr pos:start="153:13" pos:end="153:22"><operator pos:start="153:13" pos:end="153:13">*</operator><name pos:start="153:14" pos:end="153:14">p</name> <operator pos:start="153:16" pos:end="153:17">==</operator> <literal type="char" pos:start="153:19" pos:end="153:22">'\n'</literal></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:16"><block_content pos:start="155:13" pos:end="155:16">

            <expr_stmt pos:start="155:13" pos:end="155:16"><expr pos:start="155:13" pos:end="155:15"><name pos:start="155:13" pos:end="155:13">p</name><operator pos:start="155:14" pos:end="155:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="159:9" pos:end="159:27">/* create packet */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:69"><expr pos:start="161:9" pos:end="161:68"><name pos:start="161:9" pos:end="161:11">sub</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <call pos:start="161:15" pos:end="161:68"><name pos:start="161:15" pos:end="161:39">ff_subtitles_queue_insert</name><argument_list pos:start="161:40" pos:end="161:68">(<argument pos:start="161:41" pos:end="161:50"><expr pos:start="161:41" pos:end="161:50"><operator pos:start="161:41" pos:end="161:41">&amp;</operator><name pos:start="161:42" pos:end="161:50"><name pos:start="161:42" pos:end="161:47">webvtt</name><operator pos:start="161:48" pos:end="161:49">-&gt;</operator><name pos:start="161:50" pos:end="161:50">q</name></name></expr></argument>, <argument pos:start="161:53" pos:end="161:53"><expr pos:start="161:53" pos:end="161:53"><name pos:start="161:53" pos:end="161:53">p</name></expr></argument>, <argument pos:start="161:56" pos:end="161:64"><expr pos:start="161:56" pos:end="161:64"><call pos:start="161:56" pos:end="161:64"><name pos:start="161:56" pos:end="161:61">strlen</name><argument_list pos:start="161:62" pos:end="161:64">(<argument pos:start="161:63" pos:end="161:63"><expr pos:start="161:63" pos:end="161:63"><name pos:start="161:63" pos:end="161:63">p</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="161:67" pos:end="161:67"><expr pos:start="161:67" pos:end="161:67"><literal type="number" pos:start="161:67" pos:end="161:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="163:9" pos:end="169:9"><if pos:start="163:9" pos:end="169:9">if <condition pos:start="163:12" pos:end="163:17">(<expr pos:start="163:13" pos:end="163:16"><operator pos:start="163:13" pos:end="163:13">!</operator><name pos:start="163:14" pos:end="163:16">sub</name></expr>)</condition> <block pos:start="163:19" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:21">

            <expr_stmt pos:start="165:13" pos:end="165:34"><expr pos:start="165:13" pos:end="165:33"><name pos:start="165:13" pos:end="165:15">res</name> <operator pos:start="165:17" pos:end="165:17">=</operator> <call pos:start="165:19" pos:end="165:33"><name pos:start="165:19" pos:end="165:25">AVERROR</name><argument_list pos:start="165:26" pos:end="165:33">(<argument pos:start="165:27" pos:end="165:32"><expr pos:start="165:27" pos:end="165:32"><name pos:start="165:27" pos:end="165:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="167:13" pos:end="167:21">goto <name pos:start="167:18" pos:end="167:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:23"><expr pos:start="171:9" pos:end="171:22"><name pos:start="171:9" pos:end="171:16"><name pos:start="171:9" pos:end="171:11">sub</name><operator pos:start="171:12" pos:end="171:13">-&gt;</operator><name pos:start="171:14" pos:end="171:16">pos</name></name> <operator pos:start="171:18" pos:end="171:18">=</operator> <name pos:start="171:20" pos:end="171:22">pos</name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:28"><expr pos:start="173:9" pos:end="173:27"><name pos:start="173:9" pos:end="173:16"><name pos:start="173:9" pos:end="173:11">sub</name><operator pos:start="173:12" pos:end="173:13">-&gt;</operator><name pos:start="173:14" pos:end="173:16">pts</name></name> <operator pos:start="173:18" pos:end="173:18">=</operator> <name pos:start="173:20" pos:end="173:27">ts_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="198:0"><expr pos:start="175:9" pos:end="175:41"><name pos:start="175:9" pos:end="175:21"><name pos:start="175:9" pos:end="175:11">sub</name><operator pos:start="175:12" pos:end="175:13">-&gt;</operator><name pos:start="175:14" pos:end="175:21">duration</name></name> <operator pos:start="175:23" pos:end="175:23">=</operator> <name pos:start="175:25" pos:end="175:30">ts_end</name> <operator pos:start="175:32" pos:end="175:32">-</operator> <name pos:start="175:34" pos:end="175:41">ts_start</name></expr>;</expr_stmt>



<cpp:define pos:start="179:1" pos:end="197:11">#<cpp:directive pos:start="179:2" pos:end="179:7">define</cpp:directive> <cpp:macro pos:start="179:9" pos:end="179:33"><name pos:start="179:9" pos:end="179:21">SET_SIDE_DATA</name><parameter_list pos:start="179:22" pos:end="179:33">(<parameter pos:start="179:23" pos:end="179:26"><type pos:start="179:23" pos:end="179:26"><name pos:start="179:23" pos:end="179:26">name</name></type></parameter>, <parameter pos:start="179:29" pos:end="179:32"><type pos:start="179:29" pos:end="179:32"><name pos:start="179:29" pos:end="179:32">type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="179:35" pos:end="197:11">do {                                  \

    if (name##_len) {                                                   \

        uint8_t *buf = av_packet_new_side_data(sub, type, name##_len);  \

        if (!buf) {                                                     \

            res = AVERROR(ENOMEM);                                      \

            goto end;                                                   \

        }                                                               \

        memcpy(buf, name, name##_len);                                  \

    }                                                                   \

} while (0)</cpp:value></cpp:define>



        <expr_stmt pos:start="201:9" pos:end="201:65"><expr pos:start="201:9" pos:end="201:64"><call pos:start="201:9" pos:end="201:64"><name pos:start="201:9" pos:end="201:21">SET_SIDE_DATA</name><argument_list pos:start="201:22" pos:end="201:64">(<argument pos:start="201:23" pos:end="201:32"><expr pos:start="201:23" pos:end="201:32"><name pos:start="201:23" pos:end="201:32">identifier</name></expr></argument>, <argument pos:start="201:35" pos:end="201:63"><expr pos:start="201:35" pos:end="201:63"><name pos:start="201:35" pos:end="201:63">AV_PKT_DATA_WEBVTT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:63"><expr pos:start="203:9" pos:end="203:62"><call pos:start="203:9" pos:end="203:62"><name pos:start="203:9" pos:end="203:21">SET_SIDE_DATA</name><argument_list pos:start="203:22" pos:end="203:62">(<argument pos:start="203:23" pos:end="203:30"><expr pos:start="203:23" pos:end="203:30"><name pos:start="203:23" pos:end="203:30">settings</name></expr></argument>,   <argument pos:start="203:35" pos:end="203:61"><expr pos:start="203:35" pos:end="203:61"><name pos:start="203:35" pos:end="203:61">AV_PKT_DATA_WEBVTT_SETTINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="209:5" pos:end="209:44"><expr pos:start="209:5" pos:end="209:43"><call pos:start="209:5" pos:end="209:43"><name pos:start="209:5" pos:end="209:31">ff_subtitles_queue_finalize</name><argument_list pos:start="209:32" pos:end="209:43">(<argument pos:start="209:33" pos:end="209:42"><expr pos:start="209:33" pos:end="209:42"><operator pos:start="209:33" pos:end="209:33">&amp;</operator><name pos:start="209:34" pos:end="209:42"><name pos:start="209:34" pos:end="209:39">webvtt</name><operator pos:start="209:40" pos:end="209:41">-&gt;</operator><name pos:start="209:42" pos:end="209:42">q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="213:1" pos:end="213:4"><name pos:start="213:1" pos:end="213:3">end</name>:</label>

    <expr_stmt pos:start="215:5" pos:end="215:38"><expr pos:start="215:5" pos:end="215:37"><call pos:start="215:5" pos:end="215:37"><name pos:start="215:5" pos:end="215:22">av_bprint_finalize</name><argument_list pos:start="215:23" pos:end="215:37">(<argument pos:start="215:24" pos:end="215:27"><expr pos:start="215:24" pos:end="215:27"><operator pos:start="215:24" pos:end="215:24">&amp;</operator><name pos:start="215:25" pos:end="215:27">cue</name></expr></argument>,    <argument pos:start="215:33" pos:end="215:36"><expr pos:start="215:33" pos:end="215:36"><name pos:start="215:33" pos:end="215:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:38"><expr pos:start="217:5" pos:end="217:37"><call pos:start="217:5" pos:end="217:37"><name pos:start="217:5" pos:end="217:22">av_bprint_finalize</name><argument_list pos:start="217:23" pos:end="217:37">(<argument pos:start="217:24" pos:end="217:30"><expr pos:start="217:24" pos:end="217:30"><operator pos:start="217:24" pos:end="217:24">&amp;</operator><name pos:start="217:25" pos:end="217:30">header</name></expr></argument>, <argument pos:start="217:33" pos:end="217:36"><expr pos:start="217:33" pos:end="217:36"><name pos:start="217:33" pos:end="217:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="219:5" pos:end="219:15">return <expr pos:start="219:12" pos:end="219:14"><name pos:start="219:12" pos:end="219:14">res</name></expr>;</return>

</block_content>}</block></function>
</unit>
