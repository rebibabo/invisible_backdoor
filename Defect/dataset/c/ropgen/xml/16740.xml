<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16740.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">parse_numa_node</name><parameter_list pos:start="1:28" pos:end="3:57">(<parameter pos:start="1:29" pos:end="1:44"><decl pos:start="1:29" pos:end="1:44"><type pos:start="1:29" pos:end="1:44"><name pos:start="1:29" pos:end="1:40">MachineState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">ms</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:61">NumaNodeOptions</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">node</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:36">QemuOpts</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">opts</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:56"><decl pos:start="3:45" pos:end="3:56"><type pos:start="3:45" pos:end="3:56"><name pos:start="3:45" pos:end="3:49">Error</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier><modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="161:1">{<block_content pos:start="7:5" pos:end="159:55">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:19">nodenr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">uint16List</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:20">cpus</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MachineClass</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">mc</name> <init pos:start="11:22" pos:end="11:44">= <expr pos:start="11:24" pos:end="11:44"><call pos:start="11:24" pos:end="11:44"><name pos:start="11:24" pos:end="11:40">MACHINE_GET_CLASS</name><argument_list pos:start="11:41" pos:end="11:44">(<argument pos:start="11:42" pos:end="11:43"><expr pos:start="11:42" pos:end="11:43"><name pos:start="11:42" pos:end="11:43">ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:25">(<expr pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:12">node</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:24">has_nodeid</name></name></expr>)</condition> <block pos:start="15:27" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:30">

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:14">nodenr</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <name pos:start="17:18" pos:end="17:29"><name pos:start="17:18" pos:end="17:21">node</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:29">nodeid</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="23:5">else <block pos:start="19:12" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:31">

        <expr_stmt pos:start="21:9" pos:end="21:31"><expr pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:14">nodenr</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:30">nb_numa_nodes</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:28">(<expr pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:14">nodenr</name> <operator pos:start="27:16" pos:end="27:17">&gt;=</operator> <name pos:start="27:19" pos:end="27:27">MAX_NODES</name></expr>)</condition> <block pos:start="27:30" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:15">

        <expr_stmt pos:start="29:9" pos:end="31:38"><expr pos:start="29:9" pos:end="31:37"><call pos:start="29:9" pos:end="31:37"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="31:37">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="31:28"><expr pos:start="29:26" pos:end="31:28"><literal type="string" pos:start="29:26" pos:end="29:62">"Max number of NUMA nodes reached: %"</literal>

                   <name pos:start="31:20" pos:end="31:25">PRIu16</name> <literal type="string" pos:start="31:27" pos:end="31:28">""</literal></expr></argument>, <argument pos:start="31:31" pos:end="31:36"><expr pos:start="31:31" pos:end="31:36"><name pos:start="31:31" pos:end="31:36">nodenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:34">(<expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:17">numa_info</name><index pos:start="39:18" pos:end="39:25">[<expr pos:start="39:19" pos:end="39:24"><name pos:start="39:19" pos:end="39:24">nodenr</name></expr>]</index></name><operator pos:start="39:26" pos:end="39:26">.</operator><name pos:start="39:27" pos:end="39:33">present</name></expr>)</condition> <block pos:start="39:36" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:15">

        <expr_stmt pos:start="41:9" pos:end="41:68"><expr pos:start="41:9" pos:end="41:67"><call pos:start="41:9" pos:end="41:67"><name pos:start="41:9" pos:end="41:18">error_setg</name><argument_list pos:start="41:19" pos:end="41:67">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">errp</name></expr></argument>, <argument pos:start="41:26" pos:end="41:58"><expr pos:start="41:26" pos:end="41:58"><literal type="string" pos:start="41:26" pos:end="41:51">"Duplicate NUMA nodeid: %"</literal> <name pos:start="41:53" pos:end="41:58">PRIu16</name></expr></argument>, <argument pos:start="41:61" pos:end="41:66"><expr pos:start="41:61" pos:end="41:66"><name pos:start="41:61" pos:end="41:66">nodenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:41">(<expr pos:start="49:9" pos:end="49:40"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:40"><name pos:start="49:10" pos:end="49:11">mc</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:40">cpu_index_to_instance_props</name></name></expr>)</condition> <block pos:start="49:43" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:16">

        <expr_stmt pos:start="51:9" pos:end="51:67"><expr pos:start="51:9" pos:end="51:66"><call pos:start="51:9" pos:end="51:66"><name pos:start="51:9" pos:end="51:20">error_report</name><argument_list pos:start="51:21" pos:end="51:66">(<argument pos:start="51:22" pos:end="51:65"><expr pos:start="51:22" pos:end="51:65"><literal type="string" pos:start="51:22" pos:end="51:65">"NUMA is not supported by this machine-type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><call pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:12">exit</name><argument_list pos:start="53:13" pos:end="53:15">(<argument pos:start="53:14" pos:end="53:14"><expr pos:start="53:14" pos:end="53:14"><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="57:5" pos:end="83:5">for <control pos:start="57:9" pos:end="57:52">(<init pos:start="57:10" pos:end="57:27"><expr pos:start="57:10" pos:end="57:26"><name pos:start="57:10" pos:end="57:13">cpus</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <name pos:start="57:17" pos:end="57:26"><name pos:start="57:17" pos:end="57:20">node</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:26">cpus</name></name></expr>;</init> <condition pos:start="57:29" pos:end="57:33"><expr pos:start="57:29" pos:end="57:32"><name pos:start="57:29" pos:end="57:32">cpus</name></expr>;</condition> <incr pos:start="57:35" pos:end="57:51"><expr pos:start="57:35" pos:end="57:51"><name pos:start="57:35" pos:end="57:38">cpus</name> <operator pos:start="57:40" pos:end="57:40">=</operator> <name pos:start="57:42" pos:end="57:51"><name pos:start="57:42" pos:end="57:45">cpus</name><operator pos:start="57:46" pos:end="57:47">-&gt;</operator><name pos:start="57:48" pos:end="57:51">next</name></name></expr></incr>)</control> <block pos:start="57:54" pos:end="83:5">{<block_content pos:start="59:9" pos:end="81:60">

        <decl_stmt pos:start="59:9" pos:end="59:36"><decl pos:start="59:9" pos:end="59:35"><type pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:29">CpuInstanceProperties</name></type> <name pos:start="59:31" pos:end="59:35">props</name></decl>;</decl_stmt>

        <if_stmt pos:start="61:9" pos:end="73:9"><if pos:start="61:9" pos:end="73:9">if <condition pos:start="61:12" pos:end="61:36">(<expr pos:start="61:13" pos:end="61:35"><name pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:16">cpus</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:23">value</name></name> <operator pos:start="61:25" pos:end="61:26">&gt;=</operator> <name pos:start="61:28" pos:end="61:35">max_cpus</name></expr>)</condition> <block pos:start="61:38" pos:end="73:9">{<block_content pos:start="63:13" pos:end="71:19">

            <expr_stmt pos:start="63:13" pos:end="69:46"><expr pos:start="63:13" pos:end="69:45"><call pos:start="63:13" pos:end="69:45"><name pos:start="63:13" pos:end="63:22">error_setg</name><argument_list pos:start="63:23" pos:end="69:45">(<argument pos:start="63:24" pos:end="63:27"><expr pos:start="63:24" pos:end="63:27"><name pos:start="63:24" pos:end="63:27">errp</name></expr></argument>,

                       <argument pos:start="65:24" pos:end="67:61"><expr pos:start="65:24" pos:end="67:61"><literal type="string" pos:start="65:24" pos:end="65:37">"CPU index (%"</literal> <name pos:start="65:39" pos:end="65:44">PRIu16</name> <literal type="string" pos:start="65:46" pos:end="65:48">")"</literal>

                       <literal type="string" pos:start="67:24" pos:end="67:61">" should be smaller than maxcpus (%d)"</literal></expr></argument>,

                       <argument pos:start="69:24" pos:end="69:34"><expr pos:start="69:24" pos:end="69:34"><name pos:start="69:24" pos:end="69:34"><name pos:start="69:24" pos:end="69:27">cpus</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:34">value</name></name></expr></argument>, <argument pos:start="69:37" pos:end="69:44"><expr pos:start="69:37" pos:end="69:44"><name pos:start="69:37" pos:end="69:44">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:65"><expr pos:start="75:9" pos:end="75:64"><name pos:start="75:9" pos:end="75:13">props</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <call pos:start="75:17" pos:end="75:64"><name pos:start="75:17" pos:end="75:47"><name pos:start="75:17" pos:end="75:18">mc</name><operator pos:start="75:19" pos:end="75:20">-&gt;</operator><name pos:start="75:21" pos:end="75:47">cpu_index_to_instance_props</name></name><argument_list pos:start="75:48" pos:end="75:64">(<argument pos:start="75:49" pos:end="75:50"><expr pos:start="75:49" pos:end="75:50"><name pos:start="75:49" pos:end="75:50">ms</name></expr></argument>, <argument pos:start="75:53" pos:end="75:63"><expr pos:start="75:53" pos:end="75:63"><name pos:start="75:53" pos:end="75:63"><name pos:start="75:53" pos:end="75:56">cpus</name><operator pos:start="75:57" pos:end="75:58">-&gt;</operator><name pos:start="75:59" pos:end="75:63">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:31"><expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:13">props</name><operator pos:start="77:14" pos:end="77:14">.</operator><name pos:start="77:15" pos:end="77:21">node_id</name></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:30">nodenr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:33"><expr pos:start="79:9" pos:end="79:32"><name pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:13">props</name><operator pos:start="79:14" pos:end="79:14">.</operator><name pos:start="79:15" pos:end="79:25">has_node_id</name></name> <operator pos:start="79:27" pos:end="79:27">=</operator> <name pos:start="79:29" pos:end="79:32">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:60"><expr pos:start="81:9" pos:end="81:59"><call pos:start="81:9" pos:end="81:59"><name pos:start="81:9" pos:end="81:33">machine_set_cpu_numa_node</name><argument_list pos:start="81:34" pos:end="81:59">(<argument pos:start="81:35" pos:end="81:36"><expr pos:start="81:35" pos:end="81:36"><name pos:start="81:35" pos:end="81:36">ms</name></expr></argument>, <argument pos:start="81:39" pos:end="81:44"><expr pos:start="81:39" pos:end="81:44"><operator pos:start="81:39" pos:end="81:39">&amp;</operator><name pos:start="81:40" pos:end="81:44">props</name></expr></argument>, <argument pos:start="81:47" pos:end="81:58"><expr pos:start="81:47" pos:end="81:58"><operator pos:start="81:47" pos:end="81:47">&amp;</operator><name pos:start="81:48" pos:end="81:58">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:42">(<expr pos:start="87:9" pos:end="87:41"><name pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:12">node</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:21">has_mem</name></name> <operator pos:start="87:23" pos:end="87:24">&amp;&amp;</operator> <name pos:start="87:26" pos:end="87:41"><name pos:start="87:26" pos:end="87:29">node</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:41">has_memdev</name></name></expr>)</condition> <block pos:start="87:44" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:15">

        <expr_stmt pos:start="89:9" pos:end="89:65"><expr pos:start="89:9" pos:end="89:64"><call pos:start="89:9" pos:end="89:64"><name pos:start="89:9" pos:end="89:18">error_setg</name><argument_list pos:start="89:19" pos:end="89:64">(<argument pos:start="89:20" pos:end="89:23"><expr pos:start="89:20" pos:end="89:23"><name pos:start="89:20" pos:end="89:23">errp</name></expr></argument>, <argument pos:start="89:26" pos:end="89:63"><expr pos:start="89:26" pos:end="89:63"><literal type="string" pos:start="89:26" pos:end="89:63">"cannot specify both mem= and memdev="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:27">(<expr pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:20">have_memdevs</name> <operator pos:start="97:22" pos:end="97:23">==</operator> <operator pos:start="97:25" pos:end="97:25">-</operator><literal type="number" pos:start="97:26" pos:end="97:26">1</literal></expr>)</condition> <block pos:start="97:29" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:40">

        <expr_stmt pos:start="99:9" pos:end="99:40"><expr pos:start="99:9" pos:end="99:39"><name pos:start="99:9" pos:end="99:20">have_memdevs</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <name pos:start="99:24" pos:end="99:39"><name pos:start="99:24" pos:end="99:27">node</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:39">has_memdev</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="103:5" pos:end="111:5"><if pos:start="103:5" pos:end="111:5">if <condition pos:start="103:8" pos:end="103:41">(<expr pos:start="103:9" pos:end="103:40"><name pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:12">node</name><operator pos:start="103:13" pos:end="103:14">-&gt;</operator><name pos:start="103:15" pos:end="103:24">has_memdev</name></name> <operator pos:start="103:26" pos:end="103:27">!=</operator> <name pos:start="103:29" pos:end="103:40">have_memdevs</name></expr>)</condition> <block pos:start="103:43" pos:end="111:5">{<block_content pos:start="105:9" pos:end="109:15">

        <expr_stmt pos:start="105:9" pos:end="107:38"><expr pos:start="105:9" pos:end="107:37"><call pos:start="105:9" pos:end="107:37"><name pos:start="105:9" pos:end="105:18">error_setg</name><argument_list pos:start="105:19" pos:end="107:37">(<argument pos:start="105:20" pos:end="105:23"><expr pos:start="105:20" pos:end="105:23"><name pos:start="105:20" pos:end="105:23">errp</name></expr></argument>, <argument pos:start="105:26" pos:end="107:36"><expr pos:start="105:26" pos:end="107:36"><literal type="string" pos:start="105:26" pos:end="105:70">"memdev option must be specified for either "</literal>

                   <literal type="string" pos:start="107:20" pos:end="107:36">"all or no nodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="131:5"><if pos:start="115:5" pos:end="131:5">if <condition pos:start="115:8" pos:end="115:22">(<expr pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:12">node</name><operator pos:start="115:13" pos:end="115:14">-&gt;</operator><name pos:start="115:15" pos:end="115:21">has_mem</name></name></expr>)</condition> <block pos:start="115:24" pos:end="131:5">{<block_content pos:start="117:9" pos:end="129:46">

        <decl_stmt pos:start="117:9" pos:end="117:38"><decl pos:start="117:9" pos:end="117:37"><type pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:16">uint64_t</name></type> <name pos:start="117:18" pos:end="117:25">mem_size</name> <init pos:start="117:27" pos:end="117:37">= <expr pos:start="117:29" pos:end="117:37"><name pos:start="117:29" pos:end="117:37"><name pos:start="117:29" pos:end="117:32">node</name><operator pos:start="117:33" pos:end="117:34">-&gt;</operator><name pos:start="117:35" pos:end="117:37">mem</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="119:9" pos:end="119:56"><decl pos:start="119:9" pos:end="119:55"><type pos:start="119:9" pos:end="119:20"><specifier pos:start="119:9" pos:end="119:13">const</specifier> <name pos:start="119:15" pos:end="119:18">char</name> <modifier pos:start="119:20" pos:end="119:20">*</modifier></type><name pos:start="119:21" pos:end="119:27">mem_str</name> <init pos:start="119:29" pos:end="119:55">= <expr pos:start="119:31" pos:end="119:55"><call pos:start="119:31" pos:end="119:55"><name pos:start="119:31" pos:end="119:42">qemu_opt_get</name><argument_list pos:start="119:43" pos:end="119:55">(<argument pos:start="119:44" pos:end="119:47"><expr pos:start="119:44" pos:end="119:47"><name pos:start="119:44" pos:end="119:47">opts</name></expr></argument>, <argument pos:start="119:50" pos:end="119:54"><expr pos:start="119:50" pos:end="119:54"><literal type="string" pos:start="119:50" pos:end="119:54">"mem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="121:9" pos:end="121:46">/* Fix up legacy suffix-less format */</comment>

        <if_stmt pos:start="123:9" pos:end="127:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:58">(<expr pos:start="123:13" pos:end="123:57"><call pos:start="123:13" pos:end="123:57"><name pos:start="123:13" pos:end="123:27">g_ascii_isdigit</name><argument_list pos:start="123:28" pos:end="123:57">(<argument pos:start="123:29" pos:end="123:56"><expr pos:start="123:29" pos:end="123:56"><name pos:start="123:29" pos:end="123:56"><name pos:start="123:29" pos:end="123:35">mem_str</name><index pos:start="123:36" pos:end="123:56">[<expr pos:start="123:37" pos:end="123:55"><call pos:start="123:37" pos:end="123:51"><name pos:start="123:37" pos:end="123:42">strlen</name><argument_list pos:start="123:43" pos:end="123:51">(<argument pos:start="123:44" pos:end="123:50"><expr pos:start="123:44" pos:end="123:50"><name pos:start="123:44" pos:end="123:50">mem_str</name></expr></argument>)</argument_list></call> <operator pos:start="123:53" pos:end="123:53">-</operator> <literal type="number" pos:start="123:55" pos:end="123:55">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:60" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:28">

            <expr_stmt pos:start="125:13" pos:end="125:28"><expr pos:start="125:13" pos:end="125:27"><name pos:start="125:13" pos:end="125:20">mem_size</name> <operator pos:start="125:22" pos:end="125:24">&lt;&lt;=</operator> <literal type="number" pos:start="125:26" pos:end="125:27">20</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:46"><expr pos:start="129:9" pos:end="129:45"><name pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:17">numa_info</name><index pos:start="129:18" pos:end="129:25">[<expr pos:start="129:19" pos:end="129:24"><name pos:start="129:19" pos:end="129:24">nodenr</name></expr>]</index></name><operator pos:start="129:26" pos:end="129:26">.</operator><name pos:start="129:27" pos:end="129:34">node_mem</name> <operator pos:start="129:36" pos:end="129:36">=</operator> <name pos:start="129:38" pos:end="129:45">mem_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="133:5" pos:end="155:5"><if pos:start="133:5" pos:end="155:5">if <condition pos:start="133:8" pos:end="133:25">(<expr pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:12">node</name><operator pos:start="133:13" pos:end="133:14">-&gt;</operator><name pos:start="133:15" pos:end="133:24">has_memdev</name></name></expr>)</condition> <block pos:start="133:27" pos:end="155:5">{<block_content pos:start="135:9" pos:end="153:58">

        <decl_stmt pos:start="135:9" pos:end="135:18"><decl pos:start="135:9" pos:end="135:17"><type pos:start="135:9" pos:end="135:16"><name pos:start="135:9" pos:end="135:14">Object</name> <modifier pos:start="135:16" pos:end="135:16">*</modifier></type><name pos:start="135:17" pos:end="135:17">o</name></decl>;</decl_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:78"><expr pos:start="137:9" pos:end="137:77"><name pos:start="137:9" pos:end="137:9">o</name> <operator pos:start="137:11" pos:end="137:11">=</operator> <call pos:start="137:13" pos:end="137:77"><name pos:start="137:13" pos:end="137:36">object_resolve_path_type</name><argument_list pos:start="137:37" pos:end="137:77">(<argument pos:start="137:38" pos:end="137:49"><expr pos:start="137:38" pos:end="137:49"><name pos:start="137:38" pos:end="137:49"><name pos:start="137:38" pos:end="137:41">node</name><operator pos:start="137:42" pos:end="137:43">-&gt;</operator><name pos:start="137:44" pos:end="137:49">memdev</name></name></expr></argument>, <argument pos:start="137:52" pos:end="137:70"><expr pos:start="137:52" pos:end="137:70"><name pos:start="137:52" pos:end="137:70">TYPE_MEMORY_BACKEND</name></expr></argument>, <argument pos:start="137:73" pos:end="137:76"><expr pos:start="137:73" pos:end="137:76"><name pos:start="137:73" pos:end="137:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="145:9"><if pos:start="139:9" pos:end="145:9">if <condition pos:start="139:12" pos:end="139:15">(<expr pos:start="139:13" pos:end="139:14"><operator pos:start="139:13" pos:end="139:13">!</operator><name pos:start="139:14" pos:end="139:14">o</name></expr>)</condition> <block pos:start="139:17" pos:end="145:9">{<block_content pos:start="141:13" pos:end="143:19">

            <expr_stmt pos:start="141:13" pos:end="141:69"><expr pos:start="141:13" pos:end="141:68"><call pos:start="141:13" pos:end="141:68"><name pos:start="141:13" pos:end="141:22">error_setg</name><argument_list pos:start="141:23" pos:end="141:68">(<argument pos:start="141:24" pos:end="141:27"><expr pos:start="141:24" pos:end="141:27"><name pos:start="141:24" pos:end="141:27">errp</name></expr></argument>, <argument pos:start="141:30" pos:end="141:53"><expr pos:start="141:30" pos:end="141:53"><literal type="string" pos:start="141:30" pos:end="141:53">"memdev=%s is ambiguous"</literal></expr></argument>, <argument pos:start="141:56" pos:end="141:67"><expr pos:start="141:56" pos:end="141:67"><name pos:start="141:56" pos:end="141:67"><name pos:start="141:56" pos:end="141:59">node</name><operator pos:start="141:60" pos:end="141:61">-&gt;</operator><name pos:start="141:62" pos:end="141:67">memdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="143:13" pos:end="143:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:22"><expr pos:start="149:9" pos:end="149:21"><call pos:start="149:9" pos:end="149:21"><name pos:start="149:9" pos:end="149:18">object_ref</name><argument_list pos:start="149:19" pos:end="149:21">(<argument pos:start="149:20" pos:end="149:20"><expr pos:start="149:20" pos:end="149:20"><name pos:start="149:20" pos:end="149:20">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:79"><expr pos:start="151:9" pos:end="151:78"><name pos:start="151:9" pos:end="151:25"><name pos:start="151:9" pos:end="151:17">numa_info</name><index pos:start="151:18" pos:end="151:25">[<expr pos:start="151:19" pos:end="151:24"><name pos:start="151:19" pos:end="151:24">nodenr</name></expr>]</index></name><operator pos:start="151:26" pos:end="151:26">.</operator><name pos:start="151:27" pos:end="151:34">node_mem</name> <operator pos:start="151:36" pos:end="151:36">=</operator> <call pos:start="151:38" pos:end="151:78"><name pos:start="151:38" pos:end="151:61">object_property_get_uint</name><argument_list pos:start="151:62" pos:end="151:78">(<argument pos:start="151:63" pos:end="151:63"><expr pos:start="151:63" pos:end="151:63"><name pos:start="151:63" pos:end="151:63">o</name></expr></argument>, <argument pos:start="151:66" pos:end="151:71"><expr pos:start="151:66" pos:end="151:71"><literal type="string" pos:start="151:66" pos:end="151:71">"size"</literal></expr></argument>, <argument pos:start="151:74" pos:end="151:77"><expr pos:start="151:74" pos:end="151:77"><name pos:start="151:74" pos:end="151:77">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:58"><expr pos:start="153:9" pos:end="153:57"><name pos:start="153:9" pos:end="153:25"><name pos:start="153:9" pos:end="153:17">numa_info</name><index pos:start="153:18" pos:end="153:25">[<expr pos:start="153:19" pos:end="153:24"><name pos:start="153:19" pos:end="153:24">nodenr</name></expr>]</index></name><operator pos:start="153:26" pos:end="153:26">.</operator><name pos:start="153:27" pos:end="153:37">node_memdev</name> <operator pos:start="153:39" pos:end="153:39">=</operator> <call pos:start="153:41" pos:end="153:57"><name pos:start="153:41" pos:end="153:54">MEMORY_BACKEND</name><argument_list pos:start="153:55" pos:end="153:57">(<argument pos:start="153:56" pos:end="153:56"><expr pos:start="153:56" pos:end="153:56"><name pos:start="153:56" pos:end="153:56">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:37"><expr pos:start="157:5" pos:end="157:36"><name pos:start="157:5" pos:end="157:21"><name pos:start="157:5" pos:end="157:13">numa_info</name><index pos:start="157:14" pos:end="157:21">[<expr pos:start="157:15" pos:end="157:20"><name pos:start="157:15" pos:end="157:20">nodenr</name></expr>]</index></name><operator pos:start="157:22" pos:end="157:22">.</operator><name pos:start="157:23" pos:end="157:29">present</name> <operator pos:start="157:31" pos:end="157:31">=</operator> <name pos:start="157:33" pos:end="157:36">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:55"><expr pos:start="159:5" pos:end="159:54"><name pos:start="159:5" pos:end="159:19">max_numa_nodeid</name> <operator pos:start="159:21" pos:end="159:21">=</operator> <call pos:start="159:23" pos:end="159:54"><name pos:start="159:23" pos:end="159:25">MAX</name><argument_list pos:start="159:26" pos:end="159:54">(<argument pos:start="159:27" pos:end="159:41"><expr pos:start="159:27" pos:end="159:41"><name pos:start="159:27" pos:end="159:41">max_numa_nodeid</name></expr></argument>, <argument pos:start="159:44" pos:end="159:53"><expr pos:start="159:44" pos:end="159:53"><name pos:start="159:44" pos:end="159:49">nodenr</name> <operator pos:start="159:51" pos:end="159:51">+</operator> <literal type="number" pos:start="159:53" pos:end="159:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
