<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/532.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">rtmp_server_handshake</name><parameter_list pos:start="1:33" pos:end="1:64">(<parameter pos:start="1:34" pos:end="1:46"><decl pos:start="1:34" pos:end="1:46"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:43">URLContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:63"><decl pos:start="1:49" pos:end="1:63"><type pos:start="1:49" pos:end="1:63"><name pos:start="1:49" pos:end="1:59">RTMPContext</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:63">rt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="5:5" pos:end="147:13">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:46"><name pos:start="5:13" pos:end="5:18">buffer</name><index pos:start="5:19" pos:end="5:46">[<expr pos:start="5:20" pos:end="5:45"><name pos:start="5:20" pos:end="5:45">RTMP_HANDSHAKE_PACKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:21">hs_epoch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:24">hs_my_epoch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:45"><name pos:start="11:13" pos:end="11:17">hs_c1</name><index pos:start="11:18" pos:end="11:45">[<expr pos:start="11:19" pos:end="11:44"><name pos:start="11:19" pos:end="11:44">RTMP_HANDSHAKE_PACKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:45"><name pos:start="13:13" pos:end="13:17">hs_s1</name><index pos:start="13:18" pos:end="13:45">[<expr pos:start="13:19" pos:end="13:44"><name pos:start="13:19" pos:end="13:44">RTMP_HANDSHAKE_PACKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:19">zeroes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:17">temp</name>       <init pos:start="17:25" pos:end="17:27">= <expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">randomidx</name>       <init pos:start="19:25" pos:end="19:27">= <expr pos:start="19:27" pos:end="19:27"><literal type="number" pos:start="19:27" pos:end="19:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:17">inoutsize</name>       <init pos:start="21:25" pos:end="21:27">= <expr pos:start="21:27" pos:end="21:27"><literal type="number" pos:start="21:27" pos:end="21:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:59"><expr pos:start="27:5" pos:end="27:58"><name pos:start="27:5" pos:end="27:13">inoutsize</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:58"><name pos:start="27:17" pos:end="27:35">ffurl_read_complete</name><argument_list pos:start="27:36" pos:end="27:58">(<argument pos:start="27:37" pos:end="27:46"><expr pos:start="27:37" pos:end="27:46"><name pos:start="27:37" pos:end="27:46"><name pos:start="27:37" pos:end="27:38">rt</name><operator pos:start="27:39" pos:end="27:40">-&gt;</operator><name pos:start="27:41" pos:end="27:46">stream</name></name></expr></argument>, <argument pos:start="27:49" pos:end="27:54"><expr pos:start="27:49" pos:end="27:54"><name pos:start="27:49" pos:end="27:54">buffer</name></expr></argument>, <argument pos:start="27:57" pos:end="27:57"><expr pos:start="27:57" pos:end="27:57"><literal type="number" pos:start="27:57" pos:end="27:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="line" pos:start="27:67" pos:end="27:79">// Receive C0</comment>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:23">(<expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:17">inoutsize</name> <operator pos:start="29:19" pos:end="29:20">&lt;=</operator> <literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr>)</condition> <block pos:start="29:25" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:28">

        <expr_stmt pos:start="31:9" pos:end="31:62"><expr pos:start="31:9" pos:end="31:61"><call pos:start="31:9" pos:end="31:61"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:61">(<argument pos:start="31:16" pos:end="31:16"><expr pos:start="31:16" pos:end="31:16"><name pos:start="31:16" pos:end="31:16">s</name></expr></argument>, <argument pos:start="31:19" pos:end="31:30"><expr pos:start="31:19" pos:end="31:30"><name pos:start="31:19" pos:end="31:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:33" pos:end="31:60"><expr pos:start="31:33" pos:end="31:60"><literal type="string" pos:start="31:33" pos:end="31:60">"Unable to read handshake\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:28">return <expr pos:start="33:16" pos:end="33:27"><call pos:start="33:16" pos:end="33:27"><name pos:start="33:16" pos:end="33:22">AVERROR</name><argument_list pos:start="33:23" pos:end="33:27">(<argument pos:start="33:24" pos:end="33:26"><expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="37:5" pos:end="37:20">// Check Version</comment>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:23">(<expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:14">buffer</name><index pos:start="39:15" pos:end="39:17">[<expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>]</index></name> <operator pos:start="39:19" pos:end="39:20">!=</operator> <literal type="number" pos:start="39:22" pos:end="39:22">3</literal></expr>)</condition> <block pos:start="39:25" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:28">

        <expr_stmt pos:start="41:9" pos:end="41:68"><expr pos:start="41:9" pos:end="41:67"><call pos:start="41:9" pos:end="41:67"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:67">(<argument pos:start="41:16" pos:end="41:16"><expr pos:start="41:16" pos:end="41:16"><name pos:start="41:16" pos:end="41:16">s</name></expr></argument>, <argument pos:start="41:19" pos:end="41:30"><expr pos:start="41:19" pos:end="41:30"><name pos:start="41:19" pos:end="41:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:33" pos:end="41:66"><expr pos:start="41:33" pos:end="41:66"><literal type="string" pos:start="41:33" pos:end="41:66">"RTMP protocol version mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:28">return <expr pos:start="43:16" pos:end="43:27"><call pos:start="43:16" pos:end="43:27"><name pos:start="43:16" pos:end="43:22">AVERROR</name><argument_list pos:start="43:23" pos:end="43:27">(<argument pos:start="43:24" pos:end="43:26"><expr pos:start="43:24" pos:end="43:26"><name pos:start="43:24" pos:end="43:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:48">(<expr pos:start="47:9" pos:end="47:47"><call pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:19">ffurl_write</name><argument_list pos:start="47:20" pos:end="47:42">(<argument pos:start="47:21" pos:end="47:30"><expr pos:start="47:21" pos:end="47:30"><name pos:start="47:21" pos:end="47:30"><name pos:start="47:21" pos:end="47:22">rt</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:30">stream</name></name></expr></argument>, <argument pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><name pos:start="47:33" pos:end="47:38">buffer</name></expr></argument>, <argument pos:start="47:41" pos:end="47:41"><expr pos:start="47:41" pos:end="47:41"><literal type="number" pos:start="47:41" pos:end="47:41">1</literal></expr></argument>)</argument_list></call> <operator pos:start="47:44" pos:end="47:45">&lt;=</operator> <literal type="number" pos:start="47:47" pos:end="47:47">0</literal></expr>)</condition> <block pos:start="47:50" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:28">                 <comment type="line" pos:start="47:68" pos:end="47:77">// Send S0</comment>

        <expr_stmt pos:start="49:9" pos:end="51:53"><expr pos:start="49:9" pos:end="51:52"><call pos:start="49:9" pos:end="51:52"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="51:52">(<argument pos:start="49:16" pos:end="49:16"><expr pos:start="49:16" pos:end="49:16"><name pos:start="49:16" pos:end="49:16">s</name></expr></argument>, <argument pos:start="49:19" pos:end="49:30"><expr pos:start="49:19" pos:end="49:30"><name pos:start="49:19" pos:end="49:30">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="51:16" pos:end="51:51"><expr pos:start="51:16" pos:end="51:51"><literal type="string" pos:start="51:16" pos:end="51:51">"Unable to write answer - RTMP S0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:28">return <expr pos:start="53:16" pos:end="53:27"><call pos:start="53:16" pos:end="53:27"><name pos:start="53:16" pos:end="53:22">AVERROR</name><argument_list pos:start="53:23" pos:end="53:27">(<argument pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><name pos:start="53:24" pos:end="53:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="57:5" pos:end="57:20">/* Receive C1 */</comment>

    <expr_stmt pos:start="59:5" pos:end="61:61"><expr pos:start="59:5" pos:end="61:60"><name pos:start="59:5" pos:end="59:7">ret</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="61:60"><name pos:start="59:11" pos:end="59:32">rtmp_receive_hs_packet</name><argument_list pos:start="59:33" pos:end="61:60">(<argument pos:start="59:34" pos:end="59:35"><expr pos:start="59:34" pos:end="59:35"><name pos:start="59:34" pos:end="59:35">rt</name></expr></argument>, <argument pos:start="59:38" pos:end="59:46"><expr pos:start="59:38" pos:end="59:46"><operator pos:start="59:38" pos:end="59:38">&amp;</operator><name pos:start="59:39" pos:end="59:46">hs_epoch</name></expr></argument>, <argument pos:start="59:49" pos:end="59:55"><expr pos:start="59:49" pos:end="59:55"><operator pos:start="59:49" pos:end="59:49">&amp;</operator><name pos:start="59:50" pos:end="59:55">zeroes</name></expr></argument>, <argument pos:start="59:58" pos:end="59:62"><expr pos:start="59:58" pos:end="59:62"><name pos:start="59:58" pos:end="59:62">hs_c1</name></expr></argument>,

                                 <argument pos:start="61:34" pos:end="61:59"><expr pos:start="61:34" pos:end="61:59"><name pos:start="61:34" pos:end="61:59">RTMP_HANDSHAKE_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:12">(<expr pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">ret</name></expr>)</condition> <block pos:start="63:14" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:19">

        <expr_stmt pos:start="65:9" pos:end="65:61"><expr pos:start="65:9" pos:end="65:60"><call pos:start="65:9" pos:end="65:60"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:60">(<argument pos:start="65:16" pos:end="65:16"><expr pos:start="65:16" pos:end="65:16"><name pos:start="65:16" pos:end="65:16">s</name></expr></argument>, <argument pos:start="65:19" pos:end="65:30"><expr pos:start="65:19" pos:end="65:30"><name pos:start="65:19" pos:end="65:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:33" pos:end="65:59"><expr pos:start="65:33" pos:end="65:59"><literal type="string" pos:start="65:33" pos:end="65:59">"RTMP Handshake C1 Error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:19">return <expr pos:start="67:16" pos:end="67:18"><name pos:start="67:16" pos:end="67:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="73:70"><if pos:start="71:5" pos:end="73:70">if <condition pos:start="71:8" pos:end="71:15">(<expr pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:14">zeroes</name></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:70"><block_content pos:start="73:9" pos:end="73:70">

        <expr_stmt pos:start="73:9" pos:end="73:70"><expr pos:start="73:9" pos:end="73:69"><call pos:start="73:9" pos:end="73:69"><name pos:start="73:9" pos:end="73:14">av_log</name><argument_list pos:start="73:15" pos:end="73:69">(<argument pos:start="73:16" pos:end="73:16"><expr pos:start="73:16" pos:end="73:16"><name pos:start="73:16" pos:end="73:16">s</name></expr></argument>, <argument pos:start="73:19" pos:end="73:32"><expr pos:start="73:19" pos:end="73:32"><name pos:start="73:19" pos:end="73:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="73:35" pos:end="73:68"><expr pos:start="73:35" pos:end="73:68"><literal type="string" pos:start="73:35" pos:end="73:68">"Erroneous C1 Message zero != 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="75:5" pos:end="75:17">/* Send S1 */</comment>

    <comment type="block" pos:start="77:5" pos:end="77:40">/* By now same epoch will be sent */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:27"><expr pos:start="79:5" pos:end="79:26"><name pos:start="79:5" pos:end="79:15">hs_my_epoch</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:26">hs_epoch</name></expr>;</expr_stmt>

    <comment type="block" pos:start="81:5" pos:end="81:25">/* Generate random */</comment>

    <for pos:start="83:5" pos:end="87:61">for <control pos:start="83:9" pos:end="85:24">(<init pos:start="83:10" pos:end="83:23"><expr pos:start="83:10" pos:end="83:22"><name pos:start="83:10" pos:end="83:18">randomidx</name> <operator pos:start="83:20" pos:end="83:20">=</operator> <literal type="number" pos:start="83:22" pos:end="83:22">0</literal></expr>;</init> <condition pos:start="83:25" pos:end="83:65"><expr pos:start="83:25" pos:end="83:64"><name pos:start="83:25" pos:end="83:33">randomidx</name> <operator pos:start="83:35" pos:end="83:35">&lt;</operator> <operator pos:start="83:37" pos:end="83:37">(</operator><name pos:start="83:38" pos:end="83:63">RTMP_HANDSHAKE_PACKET_SIZE</name><operator pos:start="83:64" pos:end="83:64">)</operator></expr>;</condition>

         <incr pos:start="85:10" pos:end="85:23"><expr pos:start="85:10" pos:end="85:23"><name pos:start="85:10" pos:end="85:18">randomidx</name> <operator pos:start="85:20" pos:end="85:21">+=</operator> <literal type="number" pos:start="85:23" pos:end="85:23">4</literal></expr></incr>)</control><block type="pseudo" pos:start="87:9" pos:end="87:61"><block_content pos:start="87:9" pos:end="87:61">

        <expr_stmt pos:start="87:9" pos:end="87:61"><expr pos:start="87:9" pos:end="87:60"><call pos:start="87:9" pos:end="87:60"><name pos:start="87:9" pos:end="87:15">AV_WB32</name><argument_list pos:start="87:16" pos:end="87:60">(<argument pos:start="87:17" pos:end="87:37"><expr pos:start="87:17" pos:end="87:37"><name pos:start="87:17" pos:end="87:21">hs_s1</name> <operator pos:start="87:23" pos:end="87:23">+</operator> <literal type="number" pos:start="87:25" pos:end="87:27">8</literal> <operator pos:start="87:27" pos:end="87:27">+</operator> <name pos:start="87:29" pos:end="87:37">randomidx</name></expr></argument>, <argument pos:start="87:40" pos:end="87:59"><expr pos:start="87:40" pos:end="87:59"><call pos:start="87:40" pos:end="87:59"><name pos:start="87:40" pos:end="87:57">av_get_random_seed</name><argument_list pos:start="87:58" pos:end="87:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="91:5" pos:end="93:58"><expr pos:start="91:5" pos:end="93:57"><name pos:start="91:5" pos:end="91:7">ret</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="93:57"><name pos:start="91:11" pos:end="91:29">rtmp_send_hs_packet</name><argument_list pos:start="91:30" pos:end="93:57">(<argument pos:start="91:31" pos:end="91:32"><expr pos:start="91:31" pos:end="91:32"><name pos:start="91:31" pos:end="91:32">rt</name></expr></argument>, <argument pos:start="91:35" pos:end="91:45"><expr pos:start="91:35" pos:end="91:45"><name pos:start="91:35" pos:end="91:45">hs_my_epoch</name></expr></argument>, <argument pos:start="91:48" pos:end="91:48"><expr pos:start="91:48" pos:end="91:48"><literal type="number" pos:start="91:48" pos:end="91:48">0</literal></expr></argument>, <argument pos:start="91:51" pos:end="91:55"><expr pos:start="91:51" pos:end="91:55"><name pos:start="91:51" pos:end="91:55">hs_s1</name></expr></argument>,

                              <argument pos:start="93:31" pos:end="93:56"><expr pos:start="93:31" pos:end="93:56"><name pos:start="93:31" pos:end="93:56">RTMP_HANDSHAKE_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="101:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:12">(<expr pos:start="95:9" pos:end="95:11"><name pos:start="95:9" pos:end="95:11">ret</name></expr>)</condition> <block pos:start="95:14" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:19">

        <expr_stmt pos:start="97:9" pos:end="97:61"><expr pos:start="97:9" pos:end="97:60"><call pos:start="97:9" pos:end="97:60"><name pos:start="97:9" pos:end="97:14">av_log</name><argument_list pos:start="97:15" pos:end="97:60">(<argument pos:start="97:16" pos:end="97:16"><expr pos:start="97:16" pos:end="97:16"><name pos:start="97:16" pos:end="97:16">s</name></expr></argument>, <argument pos:start="97:19" pos:end="97:30"><expr pos:start="97:19" pos:end="97:30"><name pos:start="97:19" pos:end="97:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:33" pos:end="97:59"><expr pos:start="97:33" pos:end="97:59"><literal type="string" pos:start="97:33" pos:end="97:59">"RTMP Handshake S1 Error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:19">return <expr pos:start="99:16" pos:end="99:18"><name pos:start="99:16" pos:end="99:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="103:5" pos:end="103:17">/* Send S2 */</comment>

    <expr_stmt pos:start="105:5" pos:end="107:58"><expr pos:start="105:5" pos:end="107:57"><name pos:start="105:5" pos:end="105:7">ret</name> <operator pos:start="105:9" pos:end="105:9">=</operator> <call pos:start="105:11" pos:end="107:57"><name pos:start="105:11" pos:end="105:29">rtmp_send_hs_packet</name><argument_list pos:start="105:30" pos:end="107:57">(<argument pos:start="105:31" pos:end="105:32"><expr pos:start="105:31" pos:end="105:32"><name pos:start="105:31" pos:end="105:32">rt</name></expr></argument>, <argument pos:start="105:35" pos:end="105:42"><expr pos:start="105:35" pos:end="105:42"><name pos:start="105:35" pos:end="105:42">hs_epoch</name></expr></argument>, <argument pos:start="105:45" pos:end="105:45"><expr pos:start="105:45" pos:end="105:45"><literal type="number" pos:start="105:45" pos:end="105:45">0</literal></expr></argument>, <argument pos:start="105:48" pos:end="105:52"><expr pos:start="105:48" pos:end="105:52"><name pos:start="105:48" pos:end="105:52">hs_c1</name></expr></argument>,

                              <argument pos:start="107:31" pos:end="107:56"><expr pos:start="107:31" pos:end="107:56"><name pos:start="107:31" pos:end="107:56">RTMP_HANDSHAKE_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:12">(<expr pos:start="109:9" pos:end="109:11"><name pos:start="109:9" pos:end="109:11">ret</name></expr>)</condition> <block pos:start="109:14" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:19">

        <expr_stmt pos:start="111:9" pos:end="111:61"><expr pos:start="111:9" pos:end="111:60"><call pos:start="111:9" pos:end="111:60"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="111:60">(<argument pos:start="111:16" pos:end="111:16"><expr pos:start="111:16" pos:end="111:16"><name pos:start="111:16" pos:end="111:16">s</name></expr></argument>, <argument pos:start="111:19" pos:end="111:30"><expr pos:start="111:19" pos:end="111:30"><name pos:start="111:19" pos:end="111:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:33" pos:end="111:59"><expr pos:start="111:33" pos:end="111:59"><literal type="string" pos:start="111:33" pos:end="111:59">"RTMP Handshake S2 Error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:19">return <expr pos:start="113:16" pos:end="113:18"><name pos:start="113:16" pos:end="113:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="117:5" pos:end="117:20">/* Receive C2 */</comment>

    <expr_stmt pos:start="119:5" pos:end="121:61"><expr pos:start="119:5" pos:end="121:60"><name pos:start="119:5" pos:end="119:7">ret</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <call pos:start="119:11" pos:end="121:60"><name pos:start="119:11" pos:end="119:32">rtmp_receive_hs_packet</name><argument_list pos:start="119:33" pos:end="121:60">(<argument pos:start="119:34" pos:end="119:35"><expr pos:start="119:34" pos:end="119:35"><name pos:start="119:34" pos:end="119:35">rt</name></expr></argument>, <argument pos:start="119:38" pos:end="119:42"><expr pos:start="119:38" pos:end="119:42"><operator pos:start="119:38" pos:end="119:38">&amp;</operator><name pos:start="119:39" pos:end="119:42">temp</name></expr></argument>, <argument pos:start="119:45" pos:end="119:51"><expr pos:start="119:45" pos:end="119:51"><operator pos:start="119:45" pos:end="119:45">&amp;</operator><name pos:start="119:46" pos:end="119:51">zeroes</name></expr></argument>, <argument pos:start="119:54" pos:end="119:59"><expr pos:start="119:54" pos:end="119:59"><name pos:start="119:54" pos:end="119:59">buffer</name></expr></argument>,

                                 <argument pos:start="121:34" pos:end="121:59"><expr pos:start="121:34" pos:end="121:59"><name pos:start="121:34" pos:end="121:59">RTMP_HANDSHAKE_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="129:5"><if pos:start="123:5" pos:end="129:5">if <condition pos:start="123:8" pos:end="123:12">(<expr pos:start="123:9" pos:end="123:11"><name pos:start="123:9" pos:end="123:11">ret</name></expr>)</condition> <block pos:start="123:14" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:19">

        <expr_stmt pos:start="125:9" pos:end="125:61"><expr pos:start="125:9" pos:end="125:60"><call pos:start="125:9" pos:end="125:60"><name pos:start="125:9" pos:end="125:14">av_log</name><argument_list pos:start="125:15" pos:end="125:60">(<argument pos:start="125:16" pos:end="125:16"><expr pos:start="125:16" pos:end="125:16"><name pos:start="125:16" pos:end="125:16">s</name></expr></argument>, <argument pos:start="125:19" pos:end="125:30"><expr pos:start="125:19" pos:end="125:30"><name pos:start="125:19" pos:end="125:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="125:33" pos:end="125:59"><expr pos:start="125:33" pos:end="125:59"><literal type="string" pos:start="125:33" pos:end="125:59">"RTMP Handshake C2 Error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:19">return <expr pos:start="127:16" pos:end="127:18"><name pos:start="127:16" pos:end="127:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="131:5" pos:end="135:79"><if pos:start="131:5" pos:end="135:79">if <condition pos:start="131:8" pos:end="131:28">(<expr pos:start="131:9" pos:end="131:27"><name pos:start="131:9" pos:end="131:12">temp</name> <operator pos:start="131:14" pos:end="131:15">!=</operator> <name pos:start="131:17" pos:end="131:27">hs_my_epoch</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="135:79"><block_content pos:start="133:9" pos:end="135:79">

        <expr_stmt pos:start="133:9" pos:end="135:79"><expr pos:start="133:9" pos:end="135:78"><call pos:start="133:9" pos:end="135:78"><name pos:start="133:9" pos:end="133:14">av_log</name><argument_list pos:start="133:15" pos:end="135:78">(<argument pos:start="133:16" pos:end="133:16"><expr pos:start="133:16" pos:end="133:16"><name pos:start="133:16" pos:end="133:16">s</name></expr></argument>, <argument pos:start="133:19" pos:end="133:32"><expr pos:start="133:19" pos:end="133:32"><name pos:start="133:19" pos:end="133:32">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="135:16" pos:end="135:77"><expr pos:start="135:16" pos:end="135:77"><literal type="string" pos:start="135:16" pos:end="135:77">"Erroneous C2 Message epoch does not match up with C1 epoch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="137:5" pos:end="143:66"><if pos:start="137:5" pos:end="143:66">if <condition pos:start="137:8" pos:end="139:47">(<expr pos:start="137:9" pos:end="139:46"><call pos:start="137:9" pos:end="139:46"><name pos:start="137:9" pos:end="137:14">memcmp</name><argument_list pos:start="137:15" pos:end="139:46">(<argument pos:start="137:16" pos:end="137:25"><expr pos:start="137:16" pos:end="137:25"><name pos:start="137:16" pos:end="137:21">buffer</name> <operator pos:start="137:23" pos:end="137:23">+</operator> <literal type="number" pos:start="137:25" pos:end="137:25">8</literal></expr></argument>, <argument pos:start="137:28" pos:end="137:36"><expr pos:start="137:28" pos:end="137:36"><name pos:start="137:28" pos:end="137:32">hs_s1</name> <operator pos:start="137:34" pos:end="137:34">+</operator> <literal type="number" pos:start="137:36" pos:end="137:36">8</literal></expr></argument>,

               <argument pos:start="139:16" pos:end="139:45"><expr pos:start="139:16" pos:end="139:45"><name pos:start="139:16" pos:end="139:41">RTMP_HANDSHAKE_PACKET_SIZE</name> <operator pos:start="139:43" pos:end="139:43">-</operator> <literal type="number" pos:start="139:45" pos:end="139:45">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="143:66"><block_content pos:start="141:9" pos:end="143:66">

        <expr_stmt pos:start="141:9" pos:end="143:66"><expr pos:start="141:9" pos:end="143:65"><call pos:start="141:9" pos:end="143:65"><name pos:start="141:9" pos:end="141:14">av_log</name><argument_list pos:start="141:15" pos:end="143:65">(<argument pos:start="141:16" pos:end="141:16"><expr pos:start="141:16" pos:end="141:16"><name pos:start="141:16" pos:end="141:16">s</name></expr></argument>, <argument pos:start="141:19" pos:end="141:32"><expr pos:start="141:19" pos:end="141:32"><name pos:start="141:19" pos:end="141:32">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="143:16" pos:end="143:64"><expr pos:start="143:16" pos:end="143:64"><literal type="string" pos:start="143:16" pos:end="143:64">"Erroneous C2 Message random does not match up\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="147:5" pos:end="147:13">return <expr pos:start="147:12" pos:end="147:12"><literal type="number" pos:start="147:12" pos:end="147:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
