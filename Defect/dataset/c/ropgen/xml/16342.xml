<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16342.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">pcilg_service_call</name><parameter_list pos:start="1:23" pos:end="1:60">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:30">S390CPU</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">cpu</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:47"><decl pos:start="1:38" pos:end="1:47"><type pos:start="1:38" pos:end="1:47"><name pos:start="1:38" pos:end="1:44">uint8_t</name></type> <name pos:start="1:46" pos:end="1:47">r1</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:59"><decl pos:start="1:50" pos:end="1:59"><type pos:start="1:50" pos:end="1:59"><name pos:start="1:50" pos:end="1:56">uint8_t</name></type> <name pos:start="1:58" pos:end="1:59">r2</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="185:1">{<block_content pos:start="5:5" pos:end="183:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">CPUS390XState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">env</name> <init pos:start="5:24" pos:end="5:34">= <expr pos:start="5:26" pos:end="5:34"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:34"><name pos:start="5:27" pos:end="5:29">cpu</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">S390PCIBusDevice</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:27">pbdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:17">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:20">mr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:15">fh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:17">pcias</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><call pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:25">cpu_synchronize_state</name><argument_list pos:start="23:26" pos:end="23:35">(<argument pos:start="23:27" pos:end="23:34"><expr pos:start="23:27" pos:end="23:34"><call pos:start="23:27" pos:end="23:34"><name pos:start="23:27" pos:end="23:29">CPU</name><argument_list pos:start="23:30" pos:end="23:34">(<argument pos:start="23:31" pos:end="23:33"><expr pos:start="23:31" pos:end="23:33"><name pos:start="23:31" pos:end="23:33">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:40">(<expr pos:start="27:9" pos:end="27:39"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:11">env</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:16">psw</name><operator pos:start="27:17" pos:end="27:17">.</operator><name pos:start="27:18" pos:end="27:21">mask</name></name> <operator pos:start="27:23" pos:end="27:23">&amp;</operator> <name pos:start="27:25" pos:end="27:39">PSW_MASK_PSTATE</name></expr>)</condition> <block pos:start="27:42" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:50"><expr pos:start="29:9" pos:end="29:49"><call pos:start="29:9" pos:end="29:49"><name pos:start="29:9" pos:end="29:25">program_interrupt</name><argument_list pos:start="29:26" pos:end="29:49">(<argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><name pos:start="29:27" pos:end="29:29">env</name></expr></argument>, <argument pos:start="29:32" pos:end="29:45"><expr pos:start="29:32" pos:end="29:45"><name pos:start="29:32" pos:end="29:45">PGM_PRIVILEGED</name></expr></argument>, <argument pos:start="29:48" pos:end="29:48"><expr pos:start="29:48" pos:end="29:48"><literal type="number" pos:start="29:48" pos:end="29:48">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:10">r2</name> <operator pos:start="37:12" pos:end="37:12">&amp;</operator> <literal type="number" pos:start="37:14" pos:end="37:16">0x1</literal></expr>)</condition> <block pos:start="37:19" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:17">

        <expr_stmt pos:start="39:9" pos:end="39:53"><expr pos:start="39:9" pos:end="39:52"><call pos:start="39:9" pos:end="39:52"><name pos:start="39:9" pos:end="39:25">program_interrupt</name><argument_list pos:start="39:26" pos:end="39:52">(<argument pos:start="39:27" pos:end="39:29"><expr pos:start="39:27" pos:end="39:29"><name pos:start="39:27" pos:end="39:29">env</name></expr></argument>, <argument pos:start="39:32" pos:end="39:48"><expr pos:start="39:32" pos:end="39:48"><name pos:start="39:32" pos:end="39:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="39:51" pos:end="39:51"><expr pos:start="39:51" pos:end="39:51"><literal type="number" pos:start="39:51" pos:end="39:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:17">return <expr pos:start="41:16" pos:end="41:16"><literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:6">fh</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <name pos:start="47:10" pos:end="47:22"><name pos:start="47:10" pos:end="47:12">env</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:18">regs</name><index pos:start="47:19" pos:end="47:22">[<expr pos:start="47:20" pos:end="47:21"><name pos:start="47:20" pos:end="47:21">r2</name></expr>]</index></name> <operator pos:start="47:24" pos:end="47:25">&gt;&gt;</operator> <literal type="number" pos:start="47:27" pos:end="47:28">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:40"><expr pos:start="49:5" pos:end="49:39"><name pos:start="49:5" pos:end="49:9">pcias</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <operator pos:start="49:13" pos:end="49:13">(</operator><name pos:start="49:14" pos:end="49:26"><name pos:start="49:14" pos:end="49:16">env</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:22">regs</name><index pos:start="49:23" pos:end="49:26">[<expr pos:start="49:24" pos:end="49:25"><name pos:start="49:24" pos:end="49:25">r2</name></expr>]</index></name> <operator pos:start="49:28" pos:end="49:29">&gt;&gt;</operator> <literal type="number" pos:start="49:31" pos:end="49:32">16</literal><operator pos:start="49:33" pos:end="49:33">)</operator> <operator pos:start="49:35" pos:end="49:35">&amp;</operator> <literal type="number" pos:start="49:37" pos:end="49:39">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:7">len</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <name pos:start="51:11" pos:end="51:23"><name pos:start="51:11" pos:end="51:13">env</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:19">regs</name><index pos:start="51:20" pos:end="51:23">[<expr pos:start="51:21" pos:end="51:22"><name pos:start="51:21" pos:end="51:22">r2</name></expr>]</index></name> <operator pos:start="51:25" pos:end="51:25">&amp;</operator> <literal type="number" pos:start="51:27" pos:end="51:29">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:31"><expr pos:start="53:5" pos:end="53:30"><name pos:start="53:5" pos:end="53:10">offset</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <name pos:start="53:14" pos:end="53:30"><name pos:start="53:14" pos:end="53:16">env</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:22">regs</name><index pos:start="53:23" pos:end="53:30">[<expr pos:start="53:24" pos:end="53:29"><name pos:start="53:24" pos:end="53:25">r2</name> <operator pos:start="53:27" pos:end="53:27">+</operator> <literal type="number" pos:start="53:29" pos:end="53:29">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:40"><expr pos:start="57:5" pos:end="57:39"><name pos:start="57:5" pos:end="57:9">pbdev</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <call pos:start="57:13" pos:end="57:39"><name pos:start="57:13" pos:end="57:35">s390_pci_find_dev_by_fh</name><argument_list pos:start="57:36" pos:end="57:39">(<argument pos:start="57:37" pos:end="57:38"><expr pos:start="57:37" pos:end="57:38"><name pos:start="57:37" pos:end="57:38">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:15">(<expr pos:start="59:9" pos:end="59:14"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:14">pbdev</name></expr>)</condition> <block pos:start="59:17" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:17">

        <expr_stmt pos:start="61:9" pos:end="61:38"><expr pos:start="61:9" pos:end="61:37"><call pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:15">DPRINTF</name><argument_list pos:start="61:16" pos:end="61:37">(<argument pos:start="61:17" pos:end="61:36"><expr pos:start="61:17" pos:end="61:36"><literal type="string" pos:start="61:17" pos:end="61:36">"pcilg no pci dev\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:45"><expr pos:start="63:9" pos:end="63:44"><call pos:start="63:9" pos:end="63:44"><name pos:start="63:9" pos:end="63:13">setcc</name><argument_list pos:start="63:14" pos:end="63:44">(<argument pos:start="63:15" pos:end="63:17"><expr pos:start="63:15" pos:end="63:17"><name pos:start="63:15" pos:end="63:17">cpu</name></expr></argument>, <argument pos:start="63:20" pos:end="63:43"><expr pos:start="63:20" pos:end="63:43"><name pos:start="63:20" pos:end="63:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:17">return <expr pos:start="65:16" pos:end="65:16"><literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="71:5" pos:end="97:5">switch <condition pos:start="71:12" pos:end="71:25">(<expr pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:17">pbdev</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:24">state</name></name></expr>)</condition> <block pos:start="71:27" pos:end="97:5">{<block_content pos:start="73:5" pos:end="95:14">

    <case pos:start="73:5" pos:end="73:26">case <expr pos:start="73:10" pos:end="73:25"><name pos:start="73:10" pos:end="73:25">ZPCI_FS_RESERVED</name></expr>:</case>

    <case pos:start="75:5" pos:end="75:25">case <expr pos:start="75:10" pos:end="75:24"><name pos:start="75:10" pos:end="75:24">ZPCI_FS_STANDBY</name></expr>:</case>

    <case pos:start="77:5" pos:end="77:26">case <expr pos:start="77:10" pos:end="77:25"><name pos:start="77:10" pos:end="77:25">ZPCI_FS_DISABLED</name></expr>:</case>

    <case pos:start="79:5" pos:end="79:33">case <expr pos:start="79:10" pos:end="79:32"><name pos:start="79:10" pos:end="79:32">ZPCI_FS_PERMANENT_ERROR</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:45"><expr pos:start="81:9" pos:end="81:44"><call pos:start="81:9" pos:end="81:44"><name pos:start="81:9" pos:end="81:13">setcc</name><argument_list pos:start="81:14" pos:end="81:44">(<argument pos:start="81:15" pos:end="81:17"><expr pos:start="81:15" pos:end="81:17"><name pos:start="81:15" pos:end="81:17">cpu</name></expr></argument>, <argument pos:start="81:20" pos:end="81:43"><expr pos:start="81:20" pos:end="81:43"><name pos:start="81:20" pos:end="81:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:17">return <expr pos:start="83:16" pos:end="83:16"><literal type="number" pos:start="83:16" pos:end="83:16">0</literal></expr>;</return>

    <case pos:start="85:5" pos:end="85:23">case <expr pos:start="85:10" pos:end="85:22"><name pos:start="85:10" pos:end="85:22">ZPCI_FS_ERROR</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><call pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:13">setcc</name><argument_list pos:start="87:14" pos:end="87:35">(<argument pos:start="87:15" pos:end="87:17"><expr pos:start="87:15" pos:end="87:17"><name pos:start="87:15" pos:end="87:17">cpu</name></expr></argument>, <argument pos:start="87:20" pos:end="87:34"><expr pos:start="87:20" pos:end="87:34"><name pos:start="87:20" pos:end="87:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:59"><expr pos:start="89:9" pos:end="89:58"><call pos:start="89:9" pos:end="89:58"><name pos:start="89:9" pos:end="89:28">s390_set_status_code</name><argument_list pos:start="89:29" pos:end="89:58">(<argument pos:start="89:30" pos:end="89:32"><expr pos:start="89:30" pos:end="89:32"><name pos:start="89:30" pos:end="89:32">env</name></expr></argument>, <argument pos:start="89:35" pos:end="89:36"><expr pos:start="89:35" pos:end="89:36"><name pos:start="89:35" pos:end="89:36">r2</name></expr></argument>, <argument pos:start="89:39" pos:end="89:57"><expr pos:start="89:39" pos:end="89:57"><name pos:start="89:39" pos:end="89:57">ZPCI_PCI_ST_BLOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:17">return <expr pos:start="91:16" pos:end="91:16"><literal type="number" pos:start="91:16" pos:end="91:16">0</literal></expr>;</return>

    <default pos:start="93:5" pos:end="93:12">default:</default>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="101:5" pos:end="175:5"><if pos:start="101:5" pos:end="117:5">if <condition pos:start="101:8" pos:end="101:18">(<expr pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:13">pcias</name> <operator pos:start="101:15" pos:end="101:15">&lt;</operator> <literal type="number" pos:start="101:17" pos:end="101:17">6</literal></expr>)</condition> <block pos:start="101:20" pos:end="117:5">{<block_content pos:start="103:9" pos:end="115:60">

        <if_stmt pos:start="103:9" pos:end="109:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:39">(<expr pos:start="103:13" pos:end="103:38"><operator pos:start="103:13" pos:end="103:13">(</operator><literal type="number" pos:start="103:14" pos:end="103:16">8</literal> <operator pos:start="103:16" pos:end="103:16">-</operator> <operator pos:start="103:18" pos:end="103:18">(</operator><name pos:start="103:19" pos:end="103:24">offset</name> <operator pos:start="103:26" pos:end="103:26">&amp;</operator> <literal type="number" pos:start="103:28" pos:end="103:30">0x7</literal><operator pos:start="103:31" pos:end="103:31">)</operator><operator pos:start="103:32" pos:end="103:32">)</operator> <operator pos:start="103:34" pos:end="103:34">&lt;</operator> <name pos:start="103:36" pos:end="103:38">len</name></expr>)</condition> <block pos:start="103:41" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:21">

            <expr_stmt pos:start="105:13" pos:end="105:51"><expr pos:start="105:13" pos:end="105:50"><call pos:start="105:13" pos:end="105:50"><name pos:start="105:13" pos:end="105:29">program_interrupt</name><argument_list pos:start="105:30" pos:end="105:50">(<argument pos:start="105:31" pos:end="105:33"><expr pos:start="105:31" pos:end="105:33"><name pos:start="105:31" pos:end="105:33">env</name></expr></argument>, <argument pos:start="105:36" pos:end="105:46"><expr pos:start="105:36" pos:end="105:46"><name pos:start="105:36" pos:end="105:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="105:49" pos:end="105:49"><expr pos:start="105:49" pos:end="105:49"><literal type="number" pos:start="105:49" pos:end="105:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:21">return <expr pos:start="107:20" pos:end="107:20"><literal type="number" pos:start="107:20" pos:end="107:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:51"><expr pos:start="111:9" pos:end="111:50"><name pos:start="111:9" pos:end="111:10">mr</name> <operator pos:start="111:12" pos:end="111:12">=</operator> <name pos:start="111:14" pos:end="111:43"><name pos:start="111:14" pos:end="111:18">pbdev</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:24">pdev</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:36">io_regions</name><index pos:start="111:37" pos:end="111:43">[<expr pos:start="111:38" pos:end="111:42"><name pos:start="111:38" pos:end="111:42">pcias</name></expr>]</index></name><operator pos:start="111:44" pos:end="111:44">.</operator><name pos:start="111:45" pos:end="111:50">memory</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="115:60"><expr pos:start="113:9" pos:end="115:59"><call pos:start="113:9" pos:end="115:59"><name pos:start="113:9" pos:end="113:35">memory_region_dispatch_read</name><argument_list pos:start="113:36" pos:end="115:59">(<argument pos:start="113:37" pos:end="113:38"><expr pos:start="113:37" pos:end="113:38"><name pos:start="113:37" pos:end="113:38">mr</name></expr></argument>, <argument pos:start="113:41" pos:end="113:46"><expr pos:start="113:41" pos:end="113:46"><name pos:start="113:41" pos:end="113:46">offset</name></expr></argument>, <argument pos:start="113:49" pos:end="113:53"><expr pos:start="113:49" pos:end="113:53"><operator pos:start="113:49" pos:end="113:49">&amp;</operator><name pos:start="113:50" pos:end="113:53">data</name></expr></argument>, <argument pos:start="113:56" pos:end="113:58"><expr pos:start="113:56" pos:end="113:58"><name pos:start="113:56" pos:end="113:58">len</name></expr></argument>,

                                    <argument pos:start="115:37" pos:end="115:58"><expr pos:start="115:37" pos:end="115:58"><name pos:start="115:37" pos:end="115:58">MEMTXATTRS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="117:7" pos:end="165:5">else if <condition pos:start="117:15" pos:end="117:27">(<expr pos:start="117:16" pos:end="117:26"><name pos:start="117:16" pos:end="117:20">pcias</name> <operator pos:start="117:22" pos:end="117:23">==</operator> <literal type="number" pos:start="117:25" pos:end="117:26">15</literal></expr>)</condition> <block pos:start="117:29" pos:end="165:5">{<block_content pos:start="119:9" pos:end="163:9">

        <if_stmt pos:start="119:9" pos:end="125:9"><if pos:start="119:9" pos:end="125:9">if <condition pos:start="119:12" pos:end="119:39">(<expr pos:start="119:13" pos:end="119:38"><operator pos:start="119:13" pos:end="119:13">(</operator><literal type="number" pos:start="119:14" pos:end="119:16">4</literal> <operator pos:start="119:16" pos:end="119:16">-</operator> <operator pos:start="119:18" pos:end="119:18">(</operator><name pos:start="119:19" pos:end="119:24">offset</name> <operator pos:start="119:26" pos:end="119:26">&amp;</operator> <literal type="number" pos:start="119:28" pos:end="119:30">0x3</literal><operator pos:start="119:31" pos:end="119:31">)</operator><operator pos:start="119:32" pos:end="119:32">)</operator> <operator pos:start="119:34" pos:end="119:34">&lt;</operator> <name pos:start="119:36" pos:end="119:38">len</name></expr>)</condition> <block pos:start="119:41" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:21">

            <expr_stmt pos:start="121:13" pos:end="121:51"><expr pos:start="121:13" pos:end="121:50"><call pos:start="121:13" pos:end="121:50"><name pos:start="121:13" pos:end="121:29">program_interrupt</name><argument_list pos:start="121:30" pos:end="121:50">(<argument pos:start="121:31" pos:end="121:33"><expr pos:start="121:31" pos:end="121:33"><name pos:start="121:31" pos:end="121:33">env</name></expr></argument>, <argument pos:start="121:36" pos:end="121:46"><expr pos:start="121:36" pos:end="121:46"><name pos:start="121:36" pos:end="121:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="121:49" pos:end="121:49"><expr pos:start="121:49" pos:end="121:49"><literal type="number" pos:start="121:49" pos:end="121:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:21">return <expr pos:start="123:20" pos:end="123:20"><literal type="number" pos:start="123:20" pos:end="123:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="129:75"><expr pos:start="127:9" pos:end="129:74"><name pos:start="127:9" pos:end="127:12">data</name> <operator pos:start="127:14" pos:end="127:14">=</operator>  <call pos:start="127:17" pos:end="129:74"><name pos:start="127:17" pos:end="127:43">pci_host_config_read_common</name><argument_list pos:start="127:44" pos:end="129:74">(

                   <argument pos:start="129:20" pos:end="129:30"><expr pos:start="129:20" pos:end="129:30"><name pos:start="129:20" pos:end="129:30"><name pos:start="129:20" pos:end="129:24">pbdev</name><operator pos:start="129:25" pos:end="129:26">-&gt;</operator><name pos:start="129:27" pos:end="129:30">pdev</name></name></expr></argument>, <argument pos:start="129:33" pos:end="129:38"><expr pos:start="129:33" pos:end="129:38"><name pos:start="129:33" pos:end="129:38">offset</name></expr></argument>, <argument pos:start="129:41" pos:end="129:68"><expr pos:start="129:41" pos:end="129:68"><call pos:start="129:41" pos:end="129:68"><name pos:start="129:41" pos:end="129:55">pci_config_size</name><argument_list pos:start="129:56" pos:end="129:68">(<argument pos:start="129:57" pos:end="129:67"><expr pos:start="129:57" pos:end="129:67"><name pos:start="129:57" pos:end="129:67"><name pos:start="129:57" pos:end="129:61">pbdev</name><operator pos:start="129:62" pos:end="129:63">-&gt;</operator><name pos:start="129:64" pos:end="129:67">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="129:71" pos:end="129:73"><expr pos:start="129:71" pos:end="129:73"><name pos:start="129:71" pos:end="129:73">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="133:9" pos:end="163:9">switch <condition pos:start="133:16" pos:end="133:20">(<expr pos:start="133:17" pos:end="133:19"><name pos:start="133:17" pos:end="133:19">len</name></expr>)</condition> <block pos:start="133:22" pos:end="163:9">{<block_content pos:start="135:9" pos:end="161:21">

        <case pos:start="135:9" pos:end="135:15">case <expr pos:start="135:14" pos:end="135:14"><literal type="number" pos:start="135:14" pos:end="135:14">1</literal></expr>:</case>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        <case pos:start="139:9" pos:end="139:15">case <expr pos:start="139:14" pos:end="139:14"><literal type="number" pos:start="139:14" pos:end="139:14">2</literal></expr>:</case>

            <expr_stmt pos:start="141:13" pos:end="141:33"><expr pos:start="141:13" pos:end="141:32"><name pos:start="141:13" pos:end="141:16">data</name> <operator pos:start="141:18" pos:end="141:18">=</operator> <call pos:start="141:20" pos:end="141:32"><name pos:start="141:20" pos:end="141:26">bswap16</name><argument_list pos:start="141:27" pos:end="141:32">(<argument pos:start="141:28" pos:end="141:31"><expr pos:start="141:28" pos:end="141:31"><name pos:start="141:28" pos:end="141:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        <case pos:start="145:9" pos:end="145:15">case <expr pos:start="145:14" pos:end="145:14"><literal type="number" pos:start="145:14" pos:end="145:14">4</literal></expr>:</case>

            <expr_stmt pos:start="147:13" pos:end="147:33"><expr pos:start="147:13" pos:end="147:32"><name pos:start="147:13" pos:end="147:16">data</name> <operator pos:start="147:18" pos:end="147:18">=</operator> <call pos:start="147:20" pos:end="147:32"><name pos:start="147:20" pos:end="147:26">bswap32</name><argument_list pos:start="147:27" pos:end="147:32">(<argument pos:start="147:28" pos:end="147:31"><expr pos:start="147:28" pos:end="147:31"><name pos:start="147:28" pos:end="147:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="151:15">case <expr pos:start="151:14" pos:end="151:14"><literal type="number" pos:start="151:14" pos:end="151:14">8</literal></expr>:</case>

            <expr_stmt pos:start="153:13" pos:end="153:33"><expr pos:start="153:13" pos:end="153:32"><name pos:start="153:13" pos:end="153:16">data</name> <operator pos:start="153:18" pos:end="153:18">=</operator> <call pos:start="153:20" pos:end="153:32"><name pos:start="153:20" pos:end="153:26">bswap64</name><argument_list pos:start="153:27" pos:end="153:32">(<argument pos:start="153:28" pos:end="153:31"><expr pos:start="153:28" pos:end="153:31"><name pos:start="153:28" pos:end="153:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>

        <default pos:start="157:9" pos:end="157:16">default:</default>

            <expr_stmt pos:start="159:13" pos:end="159:51"><expr pos:start="159:13" pos:end="159:50"><call pos:start="159:13" pos:end="159:50"><name pos:start="159:13" pos:end="159:29">program_interrupt</name><argument_list pos:start="159:30" pos:end="159:50">(<argument pos:start="159:31" pos:end="159:33"><expr pos:start="159:31" pos:end="159:33"><name pos:start="159:31" pos:end="159:33">env</name></expr></argument>, <argument pos:start="159:36" pos:end="159:46"><expr pos:start="159:36" pos:end="159:46"><name pos:start="159:36" pos:end="159:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="159:49" pos:end="159:49"><expr pos:start="159:49" pos:end="159:49"><literal type="number" pos:start="159:49" pos:end="159:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="161:13" pos:end="161:21">return <expr pos:start="161:20" pos:end="161:20"><literal type="number" pos:start="161:20" pos:end="161:20">0</literal></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="165:7" pos:end="175:5">else <block pos:start="165:12" pos:end="175:5">{<block_content pos:start="167:9" pos:end="173:17">

        <expr_stmt pos:start="167:9" pos:end="167:35"><expr pos:start="167:9" pos:end="167:34"><call pos:start="167:9" pos:end="167:34"><name pos:start="167:9" pos:end="167:15">DPRINTF</name><argument_list pos:start="167:16" pos:end="167:34">(<argument pos:start="167:17" pos:end="167:33"><expr pos:start="167:17" pos:end="167:33"><literal type="string" pos:start="167:17" pos:end="167:33">"invalid space\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:36"><expr pos:start="169:9" pos:end="169:35"><call pos:start="169:9" pos:end="169:35"><name pos:start="169:9" pos:end="169:13">setcc</name><argument_list pos:start="169:14" pos:end="169:35">(<argument pos:start="169:15" pos:end="169:17"><expr pos:start="169:15" pos:end="169:17"><name pos:start="169:15" pos:end="169:17">cpu</name></expr></argument>, <argument pos:start="169:20" pos:end="169:34"><expr pos:start="169:20" pos:end="169:34"><name pos:start="169:20" pos:end="169:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:60"><expr pos:start="171:9" pos:end="171:59"><call pos:start="171:9" pos:end="171:59"><name pos:start="171:9" pos:end="171:28">s390_set_status_code</name><argument_list pos:start="171:29" pos:end="171:59">(<argument pos:start="171:30" pos:end="171:32"><expr pos:start="171:30" pos:end="171:32"><name pos:start="171:30" pos:end="171:32">env</name></expr></argument>, <argument pos:start="171:35" pos:end="171:36"><expr pos:start="171:35" pos:end="171:36"><name pos:start="171:35" pos:end="171:36">r2</name></expr></argument>, <argument pos:start="171:39" pos:end="171:58"><expr pos:start="171:39" pos:end="171:58"><name pos:start="171:39" pos:end="171:58">ZPCI_PCI_ST_INVAL_AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="173:9" pos:end="173:17">return <expr pos:start="173:16" pos:end="173:16"><literal type="number" pos:start="173:16" pos:end="173:16">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:25"><expr pos:start="179:5" pos:end="179:24"><name pos:start="179:5" pos:end="179:17"><name pos:start="179:5" pos:end="179:7">env</name><operator pos:start="179:8" pos:end="179:9">-&gt;</operator><name pos:start="179:10" pos:end="179:13">regs</name><index pos:start="179:14" pos:end="179:17">[<expr pos:start="179:15" pos:end="179:16"><name pos:start="179:15" pos:end="179:16">r1</name></expr>]</index></name> <operator pos:start="179:19" pos:end="179:19">=</operator> <name pos:start="179:21" pos:end="179:24">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:31"><expr pos:start="181:5" pos:end="181:30"><call pos:start="181:5" pos:end="181:30"><name pos:start="181:5" pos:end="181:9">setcc</name><argument_list pos:start="181:10" pos:end="181:30">(<argument pos:start="181:11" pos:end="181:13"><expr pos:start="181:11" pos:end="181:13"><name pos:start="181:11" pos:end="181:13">cpu</name></expr></argument>, <argument pos:start="181:16" pos:end="181:29"><expr pos:start="181:16" pos:end="181:29"><name pos:start="181:16" pos:end="181:29">ZPCI_PCI_LS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="183:5" pos:end="183:13">return <expr pos:start="183:12" pos:end="183:12"><literal type="number" pos:start="183:12" pos:end="183:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
