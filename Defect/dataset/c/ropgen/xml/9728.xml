<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9728.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_residuals</name><parameter_list pos:start="1:28" pos:end="1:77">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:39">FLACContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:51">int32_t</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:60">decoded</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:76"><decl pos:start="1:63" pos:end="1:76"><type pos:start="1:63" pos:end="1:76"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:76">pred_order</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:13">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">tmp</name></decl>, <decl pos:start="5:17" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:25">partition</name></decl>, <decl pos:start="5:28" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:28" pos:end="5:38">method_type</name></decl>, <decl pos:start="5:41" pos:end="5:50"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:41" pos:end="5:50">rice_order</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">rice_bits</name></decl>, <decl pos:start="7:20" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:27">rice_esc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">samples</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:38"><expr pos:start="13:5" pos:end="13:37"><name pos:start="13:5" pos:end="13:15">method_type</name> <operator pos:start="13:17" pos:end="13:17">=</operator> <call pos:start="13:19" pos:end="13:37"><name pos:start="13:19" pos:end="13:26">get_bits</name><argument_list pos:start="13:27" pos:end="13:37">(<argument pos:start="13:28" pos:end="13:33"><expr pos:start="13:28" pos:end="13:33"><operator pos:start="13:28" pos:end="13:28">&amp;</operator><name pos:start="13:29" pos:end="13:33"><name pos:start="13:29" pos:end="13:29">s</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:33">gb</name></name></expr></argument>, <argument pos:start="13:36" pos:end="13:36"><expr pos:start="13:36" pos:end="13:36"><literal type="number" pos:start="13:36" pos:end="13:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:24">(<expr pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:19">method_type</name> <operator pos:start="15:21" pos:end="15:21">&gt;</operator> <literal type="number" pos:start="15:23" pos:end="15:23">1</literal></expr>)</condition> <block pos:start="15:26" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:35">

        <expr_stmt pos:start="17:9" pos:end="19:28"><expr pos:start="17:9" pos:end="19:27"><call pos:start="17:9" pos:end="19:27"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="19:27">(<argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:16">s</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:23">avctx</name></name></expr></argument>, <argument pos:start="17:26" pos:end="17:37"><expr pos:start="17:26" pos:end="17:37"><name pos:start="17:26" pos:end="17:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:40" pos:end="17:76"><expr pos:start="17:40" pos:end="17:76"><literal type="string" pos:start="17:40" pos:end="17:76">"illegal residual coding method %d\n"</literal></expr></argument>,

               <argument pos:start="19:16" pos:end="19:26"><expr pos:start="19:16" pos:end="19:26"><name pos:start="19:16" pos:end="19:26">method_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:35">return <expr pos:start="21:16" pos:end="21:34"><name pos:start="21:16" pos:end="21:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:14">rice_order</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <call pos:start="27:18" pos:end="27:36"><name pos:start="27:18" pos:end="27:25">get_bits</name><argument_list pos:start="27:26" pos:end="27:36">(<argument pos:start="27:27" pos:end="27:32"><expr pos:start="27:27" pos:end="27:32"><operator pos:start="27:27" pos:end="27:27">&amp;</operator><name pos:start="27:28" pos:end="27:32"><name pos:start="27:28" pos:end="27:28">s</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:32">gb</name></name></expr></argument>, <argument pos:start="27:35" pos:end="27:35"><expr pos:start="27:35" pos:end="27:35"><literal type="number" pos:start="27:35" pos:end="27:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:40"><expr pos:start="31:5" pos:end="31:39"><name pos:start="31:5" pos:end="31:11">samples</name><operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:25"><name pos:start="31:14" pos:end="31:14">s</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:25">blocksize</name></name> <operator pos:start="31:27" pos:end="31:28">&gt;&gt;</operator> <name pos:start="31:30" pos:end="31:39">rice_order</name></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:46">(<expr pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:15">samples</name> <operator pos:start="33:17" pos:end="33:18">&lt;&lt;</operator> <name pos:start="33:20" pos:end="33:29">rice_order</name> <operator pos:start="33:31" pos:end="33:32">!=</operator> <name pos:start="33:34" pos:end="33:45"><name pos:start="33:34" pos:end="33:34">s</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:45">blocksize</name></name></expr>)</condition> <block pos:start="33:48" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:35">

        <expr_stmt pos:start="35:9" pos:end="37:41"><expr pos:start="35:9" pos:end="37:40"><call pos:start="35:9" pos:end="37:40"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="37:40">(<argument pos:start="35:16" pos:end="35:23"><expr pos:start="35:16" pos:end="35:23"><name pos:start="35:16" pos:end="35:23"><name pos:start="35:16" pos:end="35:16">s</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:23">avctx</name></name></expr></argument>, <argument pos:start="35:26" pos:end="35:37"><expr pos:start="35:26" pos:end="35:37"><name pos:start="35:26" pos:end="35:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:40" pos:end="35:78"><expr pos:start="35:40" pos:end="35:78"><literal type="string" pos:start="35:40" pos:end="35:78">"invalid rice order: %i blocksize %i\n"</literal></expr></argument>,

               <argument pos:start="37:16" pos:end="37:25"><expr pos:start="37:16" pos:end="37:25"><name pos:start="37:16" pos:end="37:25">rice_order</name></expr></argument>, <argument pos:start="37:28" pos:end="37:39"><expr pos:start="37:28" pos:end="37:39"><name pos:start="37:28" pos:end="37:39"><name pos:start="37:28" pos:end="37:28">s</name><operator pos:start="37:29" pos:end="37:30">-&gt;</operator><name pos:start="37:31" pos:end="37:39">blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:35">return <expr pos:start="39:16" pos:end="39:34"><name pos:start="39:16" pos:end="39:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="45:29">(<expr pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:18">pred_order</name> <operator pos:start="45:20" pos:end="45:20">&gt;</operator> <name pos:start="45:22" pos:end="45:28">samples</name></expr>)</condition> <block pos:start="45:31" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:35">

        <expr_stmt pos:start="47:9" pos:end="49:36"><expr pos:start="47:9" pos:end="49:35"><call pos:start="47:9" pos:end="49:35"><name pos:start="47:9" pos:end="47:14">av_log</name><argument_list pos:start="47:15" pos:end="49:35">(<argument pos:start="47:16" pos:end="47:23"><expr pos:start="47:16" pos:end="47:23"><name pos:start="47:16" pos:end="47:23"><name pos:start="47:16" pos:end="47:16">s</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:23">avctx</name></name></expr></argument>, <argument pos:start="47:26" pos:end="47:37"><expr pos:start="47:26" pos:end="47:37"><name pos:start="47:26" pos:end="47:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:40" pos:end="47:75"><expr pos:start="47:40" pos:end="47:75"><literal type="string" pos:start="47:40" pos:end="47:75">"invalid predictor order: %i &gt; %i\n"</literal></expr></argument>,

               <argument pos:start="49:16" pos:end="49:25"><expr pos:start="49:16" pos:end="49:25"><name pos:start="49:16" pos:end="49:25">pred_order</name></expr></argument>, <argument pos:start="49:28" pos:end="49:34"><expr pos:start="49:28" pos:end="49:34"><name pos:start="49:28" pos:end="49:34">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:35">return <expr pos:start="51:16" pos:end="51:34"><name pos:start="51:16" pos:end="51:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:32"><expr pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:13">rice_bits</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <literal type="number" pos:start="57:17" pos:end="57:19">4</literal> <operator pos:start="57:19" pos:end="57:19">+</operator> <name pos:start="57:21" pos:end="57:31">method_type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:37"><expr pos:start="59:5" pos:end="59:36"><name pos:start="59:5" pos:end="59:12">rice_esc</name>  <operator pos:start="59:15" pos:end="59:15">=</operator> <operator pos:start="59:17" pos:end="59:17">(</operator><literal type="number" pos:start="59:18" pos:end="59:18">1</literal> <operator pos:start="59:20" pos:end="59:21">&lt;&lt;</operator> <name pos:start="59:23" pos:end="59:31">rice_bits</name><operator pos:start="59:32" pos:end="59:32">)</operator> <operator pos:start="59:34" pos:end="59:34">-</operator> <literal type="number" pos:start="59:36" pos:end="59:36">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:26"><expr pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:11">decoded</name> <operator pos:start="63:13" pos:end="63:14">+=</operator> <name pos:start="63:16" pos:end="63:25">pred_order</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:18"><expr pos:start="65:5" pos:end="65:17"><name pos:start="65:5" pos:end="65:5">i</name><operator pos:start="65:6" pos:end="65:6">=</operator> <name pos:start="65:8" pos:end="65:17">pred_order</name></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="91:5">for <control pos:start="67:9" pos:end="67:67">(<init pos:start="67:10" pos:end="67:23"><expr pos:start="67:10" pos:end="67:22"><name pos:start="67:10" pos:end="67:18">partition</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <literal type="number" pos:start="67:22" pos:end="67:22">0</literal></expr>;</init> <condition pos:start="67:25" pos:end="67:54"><expr pos:start="67:25" pos:end="67:53"><name pos:start="67:25" pos:end="67:33">partition</name> <operator pos:start="67:35" pos:end="67:35">&lt;</operator> <operator pos:start="67:37" pos:end="67:37">(</operator><literal type="number" pos:start="67:38" pos:end="67:38">1</literal> <operator pos:start="67:40" pos:end="67:41">&lt;&lt;</operator> <name pos:start="67:43" pos:end="67:52">rice_order</name><operator pos:start="67:53" pos:end="67:53">)</operator></expr>;</condition> <incr pos:start="67:56" pos:end="67:66"><expr pos:start="67:56" pos:end="67:66"><name pos:start="67:56" pos:end="67:64">partition</name><operator pos:start="67:65" pos:end="67:66">++</operator></expr></incr>)</control> <block pos:start="67:69" pos:end="91:5">{<block_content pos:start="69:9" pos:end="89:13">

        <expr_stmt pos:start="69:9" pos:end="69:42"><expr pos:start="69:9" pos:end="69:41"><name pos:start="69:9" pos:end="69:11">tmp</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:41"><name pos:start="69:15" pos:end="69:22">get_bits</name><argument_list pos:start="69:23" pos:end="69:41">(<argument pos:start="69:24" pos:end="69:29"><expr pos:start="69:24" pos:end="69:29"><operator pos:start="69:24" pos:end="69:24">&amp;</operator><name pos:start="69:25" pos:end="69:29"><name pos:start="69:25" pos:end="69:25">s</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:29">gb</name></name></expr></argument>, <argument pos:start="69:32" pos:end="69:40"><expr pos:start="69:32" pos:end="69:40"><name pos:start="69:32" pos:end="69:40">rice_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="87:9"><if pos:start="71:9" pos:end="79:9">if <condition pos:start="71:12" pos:end="71:28">(<expr pos:start="71:13" pos:end="71:27"><name pos:start="71:13" pos:end="71:15">tmp</name> <operator pos:start="71:17" pos:end="71:18">==</operator> <name pos:start="71:20" pos:end="71:27">rice_esc</name></expr>)</condition> <block pos:start="71:30" pos:end="79:9">{<block_content pos:start="73:13" pos:end="77:57">

            <expr_stmt pos:start="73:13" pos:end="73:38"><expr pos:start="73:13" pos:end="73:37"><name pos:start="73:13" pos:end="73:15">tmp</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:37"><name pos:start="73:19" pos:end="73:26">get_bits</name><argument_list pos:start="73:27" pos:end="73:37">(<argument pos:start="73:28" pos:end="73:33"><expr pos:start="73:28" pos:end="73:33"><operator pos:start="73:28" pos:end="73:28">&amp;</operator><name pos:start="73:29" pos:end="73:33"><name pos:start="73:29" pos:end="73:29">s</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:33">gb</name></name></expr></argument>, <argument pos:start="73:36" pos:end="73:36"><expr pos:start="73:36" pos:end="73:36"><literal type="number" pos:start="73:36" pos:end="73:36">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="75:13" pos:end="77:57">for <control pos:start="75:17" pos:end="75:36">(<init pos:start="75:18" pos:end="75:18">;</init> <condition pos:start="75:20" pos:end="75:31"><expr pos:start="75:20" pos:end="75:30"><name pos:start="75:20" pos:end="75:20">i</name> <operator pos:start="75:22" pos:end="75:22">&lt;</operator> <name pos:start="75:24" pos:end="75:30">samples</name></expr>;</condition> <incr pos:start="75:33" pos:end="75:35"><expr pos:start="75:33" pos:end="75:35"><name pos:start="75:33" pos:end="75:33">i</name><operator pos:start="75:34" pos:end="75:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="77:17" pos:end="77:57"><block_content pos:start="77:17" pos:end="77:57">

                <expr_stmt pos:start="77:17" pos:end="77:57"><expr pos:start="77:17" pos:end="77:56"><operator pos:start="77:17" pos:end="77:17">*</operator><name pos:start="77:18" pos:end="77:24">decoded</name><operator pos:start="77:25" pos:end="77:26">++</operator> <operator pos:start="77:28" pos:end="77:28">=</operator> <call pos:start="77:30" pos:end="77:56"><name pos:start="77:30" pos:end="77:43">get_sbits_long</name><argument_list pos:start="77:44" pos:end="77:56">(<argument pos:start="77:45" pos:end="77:50"><expr pos:start="77:45" pos:end="77:50"><operator pos:start="77:45" pos:end="77:45">&amp;</operator><name pos:start="77:46" pos:end="77:50"><name pos:start="77:46" pos:end="77:46">s</name><operator pos:start="77:47" pos:end="77:48">-&gt;</operator><name pos:start="77:49" pos:end="77:50">gb</name></name></expr></argument>, <argument pos:start="77:53" pos:end="77:55"><expr pos:start="77:53" pos:end="77:55"><name pos:start="77:53" pos:end="77:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="87:9">else <block pos:start="79:16" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:13">

            <for pos:start="81:13" pos:end="85:13">for <control pos:start="81:17" pos:end="81:36">(<init pos:start="81:18" pos:end="81:18">;</init> <condition pos:start="81:20" pos:end="81:31"><expr pos:start="81:20" pos:end="81:30"><name pos:start="81:20" pos:end="81:20">i</name> <operator pos:start="81:22" pos:end="81:22">&lt;</operator> <name pos:start="81:24" pos:end="81:30">samples</name></expr>;</condition> <incr pos:start="81:33" pos:end="81:35"><expr pos:start="81:33" pos:end="81:35"><name pos:start="81:33" pos:end="81:33">i</name><operator pos:start="81:34" pos:end="81:35">++</operator></expr></incr>)</control> <block pos:start="81:38" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:73">

                <expr_stmt pos:start="83:17" pos:end="83:73"><expr pos:start="83:17" pos:end="83:72"><operator pos:start="83:17" pos:end="83:17">*</operator><name pos:start="83:18" pos:end="83:24">decoded</name><operator pos:start="83:25" pos:end="83:26">++</operator> <operator pos:start="83:28" pos:end="83:28">=</operator> <call pos:start="83:30" pos:end="83:72"><name pos:start="83:30" pos:end="83:47">get_sr_golomb_flac</name><argument_list pos:start="83:48" pos:end="83:72">(<argument pos:start="83:49" pos:end="83:54"><expr pos:start="83:49" pos:end="83:54"><operator pos:start="83:49" pos:end="83:49">&amp;</operator><name pos:start="83:50" pos:end="83:54"><name pos:start="83:50" pos:end="83:50">s</name><operator pos:start="83:51" pos:end="83:52">-&gt;</operator><name pos:start="83:53" pos:end="83:54">gb</name></name></expr></argument>, <argument pos:start="83:57" pos:end="83:59"><expr pos:start="83:57" pos:end="83:59"><name pos:start="83:57" pos:end="83:59">tmp</name></expr></argument>, <argument pos:start="83:62" pos:end="83:68"><expr pos:start="83:62" pos:end="83:68"><name pos:start="83:62" pos:end="83:68">INT_MAX</name></expr></argument>, <argument pos:start="83:71" pos:end="83:71"><expr pos:start="83:71" pos:end="83:71"><literal type="number" pos:start="83:71" pos:end="83:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:13"><expr pos:start="89:9" pos:end="89:12"><name pos:start="89:9" pos:end="89:9">i</name><operator pos:start="89:10" pos:end="89:10">=</operator> <literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
