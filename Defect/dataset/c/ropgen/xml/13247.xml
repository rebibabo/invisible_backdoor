<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13247.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">tcp_fconnect</name><parameter_list pos:start="1:17" pos:end="1:35">(<parameter pos:start="1:18" pos:end="1:34"><decl pos:start="1:18" pos:end="1:34"><type pos:start="1:18" pos:end="1:34"><name pos:start="1:18" pos:end="1:30"><name pos:start="1:18" pos:end="1:23">struct</name> <name pos:start="1:25" pos:end="1:30">socket</name></name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:34">so</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:3" pos:end="91:14">

  <decl_stmt pos:start="5:3" pos:end="5:27"><decl pos:start="5:3" pos:end="5:26"><type pos:start="5:3" pos:end="5:9"><name pos:start="5:3" pos:end="5:7">Slirp</name> <modifier pos:start="5:9" pos:end="5:9">*</modifier></type><name pos:start="5:10" pos:end="5:14">slirp</name> <init pos:start="5:16" pos:end="5:26">= <expr pos:start="5:18" pos:end="5:26"><name pos:start="5:18" pos:end="5:26"><name pos:start="5:18" pos:end="5:19">so</name><operator pos:start="5:20" pos:end="5:21">-&gt;</operator><name pos:start="5:22" pos:end="5:26">slirp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="7:3" pos:end="7:12"><decl pos:start="7:3" pos:end="7:11"><type pos:start="7:3" pos:end="7:5"><name pos:start="7:3" pos:end="7:5">int</name></type> <name pos:start="7:7" pos:end="7:9">ret</name><init pos:start="7:10" pos:end="7:11">=<expr pos:start="7:11" pos:end="7:11"><literal type="number" pos:start="7:11" pos:end="7:11">0</literal></expr></init></decl>;</decl_stmt>



  <expr_stmt pos:start="11:3" pos:end="11:29"><expr pos:start="11:3" pos:end="11:28"><call pos:start="11:3" pos:end="11:28"><name pos:start="11:3" pos:end="11:12">DEBUG_CALL</name><argument_list pos:start="11:13" pos:end="11:28">(<argument pos:start="11:14" pos:end="11:27"><expr pos:start="11:14" pos:end="11:27"><literal type="string" pos:start="11:14" pos:end="11:27">"tcp_fconnect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt pos:start="13:3" pos:end="13:35"><expr pos:start="13:3" pos:end="13:34"><call pos:start="13:3" pos:end="13:34"><name pos:start="13:3" pos:end="13:11">DEBUG_ARG</name><argument_list pos:start="13:12" pos:end="13:34">(<argument pos:start="13:13" pos:end="13:22"><expr pos:start="13:13" pos:end="13:22"><literal type="string" pos:start="13:13" pos:end="13:22">"so = %lx"</literal></expr></argument>, <argument pos:start="13:25" pos:end="13:33"><expr pos:start="13:25" pos:end="13:33"><operator pos:start="13:25" pos:end="13:25">(</operator><name pos:start="13:26" pos:end="13:29">long</name> <operator pos:start="13:31" pos:end="13:31">)</operator><name pos:start="13:32" pos:end="13:33">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <if_stmt pos:start="17:3" pos:end="87:3"><if pos:start="17:3" pos:end="87:3">if<condition pos:start="17:5" pos:end="17:53">( <expr pos:start="17:7" pos:end="17:52"><operator pos:start="17:7" pos:end="17:7">(</operator><name pos:start="17:8" pos:end="17:10">ret</name><operator pos:start="17:11" pos:end="17:11">=</operator><name pos:start="17:12" pos:end="17:16"><name pos:start="17:12" pos:end="17:13">so</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:16">s</name></name><operator pos:start="17:17" pos:end="17:17">=</operator><call pos:start="17:18" pos:end="17:46"><name pos:start="17:18" pos:end="17:23">socket</name><argument_list pos:start="17:24" pos:end="17:46">(<argument pos:start="17:25" pos:end="17:31"><expr pos:start="17:25" pos:end="17:31"><name pos:start="17:25" pos:end="17:31">AF_INET</name></expr></argument>,<argument pos:start="17:33" pos:end="17:43"><expr pos:start="17:33" pos:end="17:43"><name pos:start="17:33" pos:end="17:43">SOCK_STREAM</name></expr></argument>,<argument pos:start="17:45" pos:end="17:45"><expr pos:start="17:45" pos:end="17:45"><literal type="number" pos:start="17:45" pos:end="17:45">0</literal></expr></argument>)</argument_list></call><operator pos:start="17:47" pos:end="17:47">)</operator> <operator pos:start="17:49" pos:end="17:50">&gt;=</operator> <literal type="number" pos:start="17:52" pos:end="17:52">0</literal></expr>)</condition> <block pos:start="17:55" pos:end="87:3">{<block_content pos:start="19:5" pos:end="85:24">

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">opt</name></decl>, <decl pos:start="19:14" pos:end="19:20"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:14" pos:end="19:14">s</name><init pos:start="19:15" pos:end="19:20">=<expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:17">so</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:20">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:22">sockaddr_in</name></name></type> <name pos:start="21:24" pos:end="21:27">addr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:19"><expr pos:start="25:5" pos:end="25:18"><call pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:15">fd_nonblock</name><argument_list pos:start="25:16" pos:end="25:18">(<argument pos:start="25:17" pos:end="25:17"><expr pos:start="25:17" pos:end="25:17"><name pos:start="25:17" pos:end="25:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:12"><expr pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:7">opt</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <literal type="number" pos:start="27:11" pos:end="27:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:68"><expr pos:start="29:5" pos:end="29:67"><call pos:start="29:5" pos:end="29:67"><name pos:start="29:5" pos:end="29:14">setsockopt</name><argument_list pos:start="29:15" pos:end="29:67">(<argument pos:start="29:16" pos:end="29:16"><expr pos:start="29:16" pos:end="29:16"><name pos:start="29:16" pos:end="29:16">s</name></expr></argument>,<argument pos:start="29:18" pos:end="29:27"><expr pos:start="29:18" pos:end="29:27"><name pos:start="29:18" pos:end="29:27">SOL_SOCKET</name></expr></argument>,<argument pos:start="29:29" pos:end="29:40"><expr pos:start="29:29" pos:end="29:40"><name pos:start="29:29" pos:end="29:40">SO_REUSEADDR</name></expr></argument>,<argument pos:start="29:42" pos:end="29:53"><expr pos:start="29:42" pos:end="29:53"><operator pos:start="29:42" pos:end="29:42">(</operator><name pos:start="29:43" pos:end="29:46">char</name> <operator pos:start="29:48" pos:end="29:48">*</operator><operator pos:start="29:49" pos:end="29:49">)</operator><operator pos:start="29:50" pos:end="29:50">&amp;</operator><name pos:start="29:51" pos:end="29:53">opt</name></expr></argument>,<argument pos:start="29:55" pos:end="29:66"><expr pos:start="29:55" pos:end="29:66"><sizeof pos:start="29:55" pos:end="29:66">sizeof<argument_list pos:start="29:61" pos:end="29:66">(<argument pos:start="29:62" pos:end="29:64"><expr pos:start="29:62" pos:end="29:64"><name pos:start="29:62" pos:end="29:64">opt</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:12"><expr pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:7">opt</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <literal type="number" pos:start="31:11" pos:end="31:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:68"><expr pos:start="33:5" pos:end="33:67"><call pos:start="33:5" pos:end="33:67"><name pos:start="33:5" pos:end="33:14">setsockopt</name><argument_list pos:start="33:15" pos:end="33:67">(<argument pos:start="33:16" pos:end="33:16"><expr pos:start="33:16" pos:end="33:16"><name pos:start="33:16" pos:end="33:16">s</name></expr></argument>,<argument pos:start="33:18" pos:end="33:27"><expr pos:start="33:18" pos:end="33:27"><name pos:start="33:18" pos:end="33:27">SOL_SOCKET</name></expr></argument>,<argument pos:start="33:29" pos:end="33:40"><expr pos:start="33:29" pos:end="33:40"><name pos:start="33:29" pos:end="33:40">SO_OOBINLINE</name></expr></argument>,<argument pos:start="33:42" pos:end="33:53"><expr pos:start="33:42" pos:end="33:53"><operator pos:start="33:42" pos:end="33:42">(</operator><name pos:start="33:43" pos:end="33:46">char</name> <operator pos:start="33:48" pos:end="33:48">*</operator><operator pos:start="33:49" pos:end="33:49">)</operator><operator pos:start="33:50" pos:end="33:50">&amp;</operator><name pos:start="33:51" pos:end="33:53">opt</name></expr></argument>,<argument pos:start="33:55" pos:end="33:66"><expr pos:start="33:55" pos:end="33:66"><sizeof pos:start="33:55" pos:end="33:66">sizeof<argument_list pos:start="33:61" pos:end="33:66">(<argument pos:start="33:62" pos:end="33:64"><expr pos:start="33:62" pos:end="33:64"><name pos:start="33:62" pos:end="33:64">opt</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:8">addr</name><operator pos:start="37:9" pos:end="37:9">.</operator><name pos:start="37:10" pos:end="37:19">sin_family</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <name pos:start="37:23" pos:end="37:29">AF_INET</name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="59:35"><if pos:start="39:5" pos:end="57:5">if <condition pos:start="39:8" pos:end="41:36">(<expr pos:start="39:9" pos:end="41:35"><operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:28"><name pos:start="39:10" pos:end="39:11">so</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:21">so_faddr</name><operator pos:start="39:22" pos:end="39:22">.</operator><name pos:start="39:23" pos:end="39:28">s_addr</name></name> <operator pos:start="39:30" pos:end="39:30">&amp;</operator> <name pos:start="39:32" pos:end="39:58"><name pos:start="39:32" pos:end="39:36">slirp</name><operator pos:start="39:37" pos:end="39:38">-&gt;</operator><name pos:start="39:39" pos:end="39:51">vnetwork_mask</name><operator pos:start="39:52" pos:end="39:52">.</operator><name pos:start="39:53" pos:end="39:58">s_addr</name></name><operator pos:start="39:59" pos:end="39:59">)</operator> <operator pos:start="39:61" pos:end="39:62">==</operator>

        <name pos:start="41:9" pos:end="41:35"><name pos:start="41:9" pos:end="41:13">slirp</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:28">vnetwork_addr</name><operator pos:start="41:29" pos:end="41:29">.</operator><name pos:start="41:30" pos:end="41:35">s_addr</name></name></expr>)</condition> <block pos:start="41:38" pos:end="57:5">{<block_content pos:start="45:7" pos:end="55:7">

      <comment type="block" pos:start="43:7" pos:end="43:25">/* It's an alias */</comment>

      <if_stmt pos:start="45:7" pos:end="55:7"><if pos:start="45:7" pos:end="51:7">if <condition pos:start="45:10" pos:end="45:64">(<expr pos:start="45:11" pos:end="45:63"><name pos:start="45:11" pos:end="45:29"><name pos:start="45:11" pos:end="45:12">so</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:22">so_faddr</name><operator pos:start="45:23" pos:end="45:23">.</operator><name pos:start="45:24" pos:end="45:29">s_addr</name></name> <operator pos:start="45:31" pos:end="45:32">==</operator> <name pos:start="45:34" pos:end="45:63"><name pos:start="45:34" pos:end="45:38">slirp</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:56">vnameserver_addr</name><operator pos:start="45:57" pos:end="45:57">.</operator><name pos:start="45:58" pos:end="45:63">s_addr</name></name></expr>)</condition> <block pos:start="45:66" pos:end="51:7">{<block_content pos:start="47:9" pos:end="49:40">

	<if_stmt pos:start="47:9" pos:end="49:40"><if pos:start="47:9" pos:end="49:40">if <condition pos:start="47:12" pos:end="47:45">(<expr pos:start="47:13" pos:end="47:44"><call pos:start="47:13" pos:end="47:40"><name pos:start="47:13" pos:end="47:24">get_dns_addr</name><argument_list pos:start="47:25" pos:end="47:40">(<argument pos:start="47:26" pos:end="47:39"><expr pos:start="47:26" pos:end="47:39"><operator pos:start="47:26" pos:end="47:26">&amp;</operator><name pos:start="47:27" pos:end="47:39"><name pos:start="47:27" pos:end="47:30">addr</name><operator pos:start="47:31" pos:end="47:31">.</operator><name pos:start="47:32" pos:end="47:39">sin_addr</name></name></expr></argument>)</argument_list></call> <operator pos:start="47:42" pos:end="47:42">&lt;</operator> <literal type="number" pos:start="47:44" pos:end="47:44">0</literal></expr>)</condition><block type="pseudo" pos:start="49:11" pos:end="49:40"><block_content pos:start="49:11" pos:end="49:40">

	  <expr_stmt pos:start="49:11" pos:end="49:40"><expr pos:start="49:11" pos:end="49:39"><name pos:start="49:11" pos:end="49:23"><name pos:start="49:11" pos:end="49:14">addr</name><operator pos:start="49:15" pos:end="49:15">.</operator><name pos:start="49:16" pos:end="49:23">sin_addr</name></name> <operator pos:start="49:25" pos:end="49:25">=</operator> <name pos:start="49:27" pos:end="49:39">loopback_addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      </block_content>}</block></if> <else pos:start="51:9" pos:end="55:7">else <block pos:start="51:14" pos:end="55:7">{<block_content pos:start="53:9" pos:end="53:38">

	<expr_stmt pos:start="53:9" pos:end="53:38"><expr pos:start="53:9" pos:end="53:37"><name pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:12">addr</name><operator pos:start="53:13" pos:end="53:13">.</operator><name pos:start="53:14" pos:end="53:21">sin_addr</name></name> <operator pos:start="53:23" pos:end="53:23">=</operator> <name pos:start="53:25" pos:end="53:37">loopback_addr</name></expr>;</expr_stmt>

      </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="59:35">else<block type="pseudo" pos:start="59:7" pos:end="59:35"><block_content pos:start="59:7" pos:end="59:35">

      <expr_stmt pos:start="59:7" pos:end="59:35"><expr pos:start="59:7" pos:end="59:34"><name pos:start="59:7" pos:end="59:19"><name pos:start="59:7" pos:end="59:10">addr</name><operator pos:start="59:11" pos:end="59:11">.</operator><name pos:start="59:12" pos:end="59:19">sin_addr</name></name> <operator pos:start="59:21" pos:end="59:21">=</operator> <name pos:start="59:23" pos:end="59:34"><name pos:start="59:23" pos:end="59:24">so</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:34">so_faddr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:33"><expr pos:start="61:5" pos:end="61:32"><name pos:start="61:5" pos:end="61:17"><name pos:start="61:5" pos:end="61:8">addr</name><operator pos:start="61:9" pos:end="61:9">.</operator><name pos:start="61:10" pos:end="61:17">sin_port</name></name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:22">so</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:32">so_fport</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="69:65"><expr pos:start="65:5" pos:end="69:64"><call pos:start="65:5" pos:end="69:64"><name pos:start="65:5" pos:end="65:14">DEBUG_MISC</name><argument_list pos:start="65:15" pos:end="69:64">(<argument pos:start="65:16" pos:end="69:63"><expr pos:start="65:16" pos:end="69:63"><operator pos:start="65:16" pos:end="65:16">(</operator><name pos:start="65:17" pos:end="65:19">dfd</name><operator pos:start="65:20" pos:end="65:20">,</operator> <literal type="string" pos:start="65:22" pos:end="65:56">" connect()ing, addr.sin_port=%d, "</literal>

		<literal type="string" pos:start="67:17" pos:end="67:46">"addr.sin_addr.s_addr=%.16s\n"</literal><operator pos:start="67:47" pos:end="67:47">,</operator>

		<call pos:start="69:17" pos:end="69:36"><name pos:start="69:17" pos:end="69:21">ntohs</name><argument_list pos:start="69:22" pos:end="69:36">(<argument pos:start="69:23" pos:end="69:35"><expr pos:start="69:23" pos:end="69:35"><name pos:start="69:23" pos:end="69:35"><name pos:start="69:23" pos:end="69:26">addr</name><operator pos:start="69:27" pos:end="69:27">.</operator><name pos:start="69:28" pos:end="69:35">sin_port</name></name></expr></argument>)</argument_list></call><operator pos:start="69:37" pos:end="69:37">,</operator> <call pos:start="69:39" pos:end="69:62"><name pos:start="69:39" pos:end="69:47">inet_ntoa</name><argument_list pos:start="69:48" pos:end="69:62">(<argument pos:start="69:49" pos:end="69:61"><expr pos:start="69:49" pos:end="69:61"><name pos:start="69:49" pos:end="69:61"><name pos:start="69:49" pos:end="69:52">addr</name><operator pos:start="69:53" pos:end="69:53">.</operator><name pos:start="69:54" pos:end="69:61">sin_addr</name></name></expr></argument>)</argument_list></call><operator pos:start="69:63" pos:end="69:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="71:5" pos:end="71:40">/* We don't care what port we get */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:60"><expr pos:start="73:5" pos:end="73:59"><name pos:start="73:5" pos:end="73:7">ret</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:59"><name pos:start="73:11" pos:end="73:17">connect</name><argument_list pos:start="73:18" pos:end="73:59">(<argument pos:start="73:19" pos:end="73:19"><expr pos:start="73:19" pos:end="73:19"><name pos:start="73:19" pos:end="73:19">s</name></expr></argument>,<argument pos:start="73:21" pos:end="73:44"><expr pos:start="73:21" pos:end="73:44"><operator pos:start="73:21" pos:end="73:21">(</operator>struct <name pos:start="73:29" pos:end="73:36">sockaddr</name> <operator pos:start="73:38" pos:end="73:38">*</operator><operator pos:start="73:39" pos:end="73:39">)</operator><operator pos:start="73:40" pos:end="73:40">&amp;</operator><name pos:start="73:41" pos:end="73:44">addr</name></expr></argument>,<argument pos:start="73:46" pos:end="73:58"><expr pos:start="73:46" pos:end="73:58"><sizeof pos:start="73:46" pos:end="73:58">sizeof <argument_list pos:start="73:53" pos:end="73:58">(<argument pos:start="73:54" pos:end="73:57"><expr pos:start="73:54" pos:end="73:57"><name pos:start="73:54" pos:end="73:57">addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="83:7">/*

     * If it's not in progress, it failed, so we just return 0,

     * without clearing SS_NOFDREF

     */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:24"><expr pos:start="85:5" pos:end="85:23"><call pos:start="85:5" pos:end="85:23"><name pos:start="85:5" pos:end="85:19">soisfconnecting</name><argument_list pos:start="85:20" pos:end="85:23">(<argument pos:start="85:21" pos:end="85:22"><expr pos:start="85:21" pos:end="85:22"><name pos:start="85:21" pos:end="85:22">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if></if_stmt>



  <return pos:start="91:3" pos:end="91:14">return<expr pos:start="91:9" pos:end="91:13"><operator pos:start="91:9" pos:end="91:9">(</operator><name pos:start="91:10" pos:end="91:12">ret</name><operator pos:start="91:13" pos:end="91:13">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
