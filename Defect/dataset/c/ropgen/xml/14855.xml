<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14855.c" pos:tabs="8"><function pos:start="1:1" pos:end="579:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int32_t</name></type> <name pos:start="1:16" pos:end="1:40">scsi_disk_emulate_command</name><parameter_list pos:start="1:41" pos:end="1:72">(<parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:52">SCSIRequest</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">req</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:66">uint8_t</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="579:1">{<block_content pos:start="5:5" pos:end="577:13">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIDiskReq</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">r</name> <init pos:start="5:20" pos:end="5:53">= <expr pos:start="5:22" pos:end="5:53"><call pos:start="5:22" pos:end="5:53"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:53">(<argument pos:start="5:32" pos:end="5:42"><expr pos:start="5:32" pos:end="5:42"><name pos:start="5:32" pos:end="5:42">SCSIDiskReq</name></expr></argument>, <argument pos:start="5:45" pos:end="5:47"><expr pos:start="5:45" pos:end="5:47"><name pos:start="5:45" pos:end="5:47">req</name></expr></argument>, <argument pos:start="5:50" pos:end="5:52"><expr pos:start="5:50" pos:end="5:52"><name pos:start="5:50" pos:end="5:52">req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:63">= <expr pos:start="7:24" pos:end="7:63"><call pos:start="7:24" pos:end="7:63"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:63">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:62"><expr pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:57">req</name><operator pos:start="7:58" pos:end="7:59">-&gt;</operator><name pos:start="7:60" pos:end="7:62">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">nb_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:19">outbuf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">buflen</name></decl>;</decl_stmt>



    <switch pos:start="17:5" pos:end="61:5">switch <condition pos:start="17:12" pos:end="17:28">(<expr pos:start="17:13" pos:end="17:27"><name pos:start="17:13" pos:end="17:27"><name pos:start="17:13" pos:end="17:15">req</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:20">cmd</name><operator pos:start="17:21" pos:end="17:21">.</operator><name pos:start="17:22" pos:end="17:24">buf</name><index pos:start="17:25" pos:end="17:27">[<expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="17:30" pos:end="61:5">{<block_content pos:start="19:5" pos:end="59:14">

    <case pos:start="19:5" pos:end="19:17">case <expr pos:start="19:10" pos:end="19:16"><name pos:start="19:10" pos:end="19:16">INQUIRY</name></expr>:</case>

    <case pos:start="21:5" pos:end="21:20">case <expr pos:start="21:10" pos:end="21:19"><name pos:start="21:10" pos:end="21:19">MODE_SENSE</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:23">case <expr pos:start="23:10" pos:end="23:22"><name pos:start="23:10" pos:end="23:22">MODE_SENSE_10</name></expr>:</case>

    <case pos:start="25:5" pos:end="25:17">case <expr pos:start="25:10" pos:end="25:16"><name pos:start="25:10" pos:end="25:16">RESERVE</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:20">case <expr pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:19">RESERVE_10</name></expr>:</case>

    <case pos:start="29:5" pos:end="29:17">case <expr pos:start="29:10" pos:end="29:16"><name pos:start="29:10" pos:end="29:16">RELEASE</name></expr>:</case>

    <case pos:start="31:5" pos:end="31:20">case <expr pos:start="31:10" pos:end="31:19"><name pos:start="31:10" pos:end="31:19">RELEASE_10</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:20">case <expr pos:start="33:10" pos:end="33:19"><name pos:start="33:10" pos:end="33:19">START_STOP</name></expr>:</case>

    <case pos:start="35:5" pos:end="35:30">case <expr pos:start="35:10" pos:end="35:29"><name pos:start="35:10" pos:end="35:29">ALLOW_MEDIUM_REMOVAL</name></expr>:</case>

    <case pos:start="37:5" pos:end="37:27">case <expr pos:start="37:10" pos:end="37:26"><name pos:start="37:10" pos:end="37:26">GET_CONFIGURATION</name></expr>:</case>

    <case pos:start="39:5" pos:end="39:39">case <expr pos:start="39:10" pos:end="39:38"><name pos:start="39:10" pos:end="39:38">GET_EVENT_STATUS_NOTIFICATION</name></expr>:</case>

    <case pos:start="41:5" pos:end="41:26">case <expr pos:start="41:10" pos:end="41:25"><name pos:start="41:10" pos:end="41:25">MECHANISM_STATUS</name></expr>:</case>

    <case pos:start="43:5" pos:end="43:23">case <expr pos:start="43:10" pos:end="43:22"><name pos:start="43:10" pos:end="43:22">REQUEST_SENSE</name></expr>:</case>

        <break pos:start="45:9" pos:end="45:14">break;</break>



    <default pos:start="49:5" pos:end="49:12">default:</default>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:63">(<expr pos:start="51:13" pos:end="51:62"><name pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:24">tray_open</name></name> <operator pos:start="51:26" pos:end="51:27">||</operator> <operator pos:start="51:29" pos:end="51:29">!</operator><call pos:start="51:30" pos:end="51:62"><name pos:start="51:30" pos:end="51:45">bdrv_is_inserted</name><argument_list pos:start="51:46" pos:end="51:62">(<argument pos:start="51:47" pos:end="51:61"><expr pos:start="51:47" pos:end="51:61"><name pos:start="51:47" pos:end="51:61"><name pos:start="51:47" pos:end="51:47">s</name><operator pos:start="51:48" pos:end="51:49">-&gt;</operator><name pos:start="51:50" pos:end="51:53">qdev</name><operator pos:start="51:54" pos:end="51:54">.</operator><name pos:start="51:55" pos:end="51:58">conf</name><operator pos:start="51:59" pos:end="51:59">.</operator><name pos:start="51:60" pos:end="51:61">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:65" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:21">

            <expr_stmt pos:start="53:13" pos:end="53:59"><expr pos:start="53:13" pos:end="53:58"><call pos:start="53:13" pos:end="53:58"><name pos:start="53:13" pos:end="53:32">scsi_check_condition</name><argument_list pos:start="53:33" pos:end="53:58">(<argument pos:start="53:34" pos:end="53:34"><expr pos:start="53:34" pos:end="53:34"><name pos:start="53:34" pos:end="53:34">r</name></expr></argument>, <argument pos:start="53:37" pos:end="53:57"><expr pos:start="53:37" pos:end="53:57"><call pos:start="53:37" pos:end="53:57"><name pos:start="53:37" pos:end="53:46">SENSE_CODE</name><argument_list pos:start="53:47" pos:end="53:57">(<argument pos:start="53:48" pos:end="53:56"><expr pos:start="53:48" pos:end="53:56"><name pos:start="53:48" pos:end="53:56">NO_MEDIUM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:21">return <expr pos:start="55:20" pos:end="55:20"><literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="65:5" pos:end="93:5"><if pos:start="65:5" pos:end="93:5">if <condition pos:start="65:8" pos:end="65:25">(<expr pos:start="65:9" pos:end="65:24"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:24"><name pos:start="65:10" pos:end="65:10">r</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:15">iov</name><operator pos:start="65:16" pos:end="65:16">.</operator><name pos:start="65:17" pos:end="65:24">iov_base</name></name></expr>)</condition> <block pos:start="65:27" pos:end="93:5">{<block_content pos:start="83:9" pos:end="91:70">

        <comment type="block" pos:start="67:9" pos:end="81:11">/*

         * FIXME: we shouldn't return anything bigger than 4k, but the code

         * requires the buffer to be as big as req-&gt;cmd.xfer in several

         * places.  So, do not allow CDBs with a very large ALLOCATION

         * LENGTH.  The real fix would be to modify scsi_read_data and

         * dma_buf_read, so that they return data beyond the buflen

         * as all zeros.

         */</comment>

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:34">(<expr pos:start="83:13" pos:end="83:33"><name pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:15">req</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:20">cmd</name><operator pos:start="83:21" pos:end="83:21">.</operator><name pos:start="83:22" pos:end="83:25">xfer</name></name> <operator pos:start="83:27" pos:end="83:27">&gt;</operator> <literal type="number" pos:start="83:29" pos:end="83:33">65536</literal></expr>)</condition> <block pos:start="83:36" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:33">

            <goto pos:start="85:13" pos:end="85:33">goto <name pos:start="85:18" pos:end="85:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:45"><expr pos:start="89:9" pos:end="89:44"><name pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:9">r</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:17">buflen</name></name> <operator pos:start="89:19" pos:end="89:19">=</operator> <call pos:start="89:21" pos:end="89:44"><name pos:start="89:21" pos:end="89:23">MAX</name><argument_list pos:start="89:24" pos:end="89:44">(<argument pos:start="89:25" pos:end="89:28"><expr pos:start="89:25" pos:end="89:28"><literal type="number" pos:start="89:25" pos:end="89:28">4096</literal></expr></argument>, <argument pos:start="89:31" pos:end="89:43"><expr pos:start="89:31" pos:end="89:43"><name pos:start="89:31" pos:end="89:43"><name pos:start="89:31" pos:end="89:33">req</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:38">cmd</name><operator pos:start="89:39" pos:end="89:39">.</operator><name pos:start="89:40" pos:end="89:43">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:70"><expr pos:start="91:9" pos:end="91:69"><name pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:9">r</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:14">iov</name><operator pos:start="91:15" pos:end="91:15">.</operator><name pos:start="91:16" pos:end="91:23">iov_base</name></name> <operator pos:start="91:25" pos:end="91:25">=</operator> <call pos:start="91:27" pos:end="91:69"><name pos:start="91:27" pos:end="91:41">qemu_blockalign</name><argument_list pos:start="91:42" pos:end="91:69">(<argument pos:start="91:43" pos:end="91:57"><expr pos:start="91:43" pos:end="91:57"><name pos:start="91:43" pos:end="91:57"><name pos:start="91:43" pos:end="91:43">s</name><operator pos:start="91:44" pos:end="91:45">-&gt;</operator><name pos:start="91:46" pos:end="91:49">qdev</name><operator pos:start="91:50" pos:end="91:50">.</operator><name pos:start="91:51" pos:end="91:54">conf</name><operator pos:start="91:55" pos:end="91:55">.</operator><name pos:start="91:56" pos:end="91:57">bs</name></name></expr></argument>, <argument pos:start="91:60" pos:end="91:68"><expr pos:start="91:60" pos:end="91:68"><name pos:start="91:60" pos:end="91:68"><name pos:start="91:60" pos:end="91:60">r</name><operator pos:start="91:61" pos:end="91:62">-&gt;</operator><name pos:start="91:63" pos:end="91:68">buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:27"><expr pos:start="97:5" pos:end="97:26"><name pos:start="97:5" pos:end="97:10">buflen</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <name pos:start="97:14" pos:end="97:26"><name pos:start="97:14" pos:end="97:16">req</name><operator pos:start="97:17" pos:end="97:18">-&gt;</operator><name pos:start="97:19" pos:end="97:21">cmd</name><operator pos:start="97:22" pos:end="97:22">.</operator><name pos:start="97:23" pos:end="97:26">xfer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:29"><expr pos:start="99:5" pos:end="99:28"><name pos:start="99:5" pos:end="99:10">outbuf</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <name pos:start="99:14" pos:end="99:28"><name pos:start="99:14" pos:end="99:14">r</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:19">iov</name><operator pos:start="99:20" pos:end="99:20">.</operator><name pos:start="99:21" pos:end="99:28">iov_base</name></name></expr>;</expr_stmt>

    <switch pos:start="101:5" pos:end="535:5">switch <condition pos:start="101:12" pos:end="101:28">(<expr pos:start="101:13" pos:end="101:27"><name pos:start="101:13" pos:end="101:27"><name pos:start="101:13" pos:end="101:15">req</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:20">cmd</name><operator pos:start="101:21" pos:end="101:21">.</operator><name pos:start="101:22" pos:end="101:24">buf</name><index pos:start="101:25" pos:end="101:27">[<expr pos:start="101:26" pos:end="101:26"><literal type="number" pos:start="101:26" pos:end="101:26">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="101:30" pos:end="535:5">{<block_content pos:start="103:5" pos:end="533:17">

    <case pos:start="103:5" pos:end="103:25">case <expr pos:start="103:10" pos:end="103:24"><name pos:start="103:10" pos:end="103:24">TEST_UNIT_READY</name></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:67"><expr pos:start="105:9" pos:end="105:66"><call pos:start="105:9" pos:end="105:66"><name pos:start="105:9" pos:end="105:14">assert</name><argument_list pos:start="105:15" pos:end="105:66">(<argument pos:start="105:16" pos:end="105:65"><expr pos:start="105:16" pos:end="105:65"><operator pos:start="105:16" pos:end="105:16">!</operator><name pos:start="105:17" pos:end="105:28"><name pos:start="105:17" pos:end="105:17">s</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:28">tray_open</name></name> <operator pos:start="105:30" pos:end="105:31">&amp;&amp;</operator> <call pos:start="105:33" pos:end="105:65"><name pos:start="105:33" pos:end="105:48">bdrv_is_inserted</name><argument_list pos:start="105:49" pos:end="105:65">(<argument pos:start="105:50" pos:end="105:64"><expr pos:start="105:50" pos:end="105:64"><name pos:start="105:50" pos:end="105:64"><name pos:start="105:50" pos:end="105:50">s</name><operator pos:start="105:51" pos:end="105:52">-&gt;</operator><name pos:start="105:53" pos:end="105:56">qdev</name><operator pos:start="105:57" pos:end="105:57">.</operator><name pos:start="105:58" pos:end="105:61">conf</name><operator pos:start="105:62" pos:end="105:62">.</operator><name pos:start="105:63" pos:end="105:64">bs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <case pos:start="109:5" pos:end="109:17">case <expr pos:start="109:10" pos:end="109:16"><name pos:start="109:10" pos:end="109:16">INQUIRY</name></expr>:</case>

        <expr_stmt pos:start="111:9" pos:end="111:56"><expr pos:start="111:9" pos:end="111:55"><name pos:start="111:9" pos:end="111:14">buflen</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <call pos:start="111:18" pos:end="111:55"><name pos:start="111:18" pos:end="111:42">scsi_disk_emulate_inquiry</name><argument_list pos:start="111:43" pos:end="111:55">(<argument pos:start="111:44" pos:end="111:46"><expr pos:start="111:44" pos:end="111:46"><name pos:start="111:44" pos:end="111:46">req</name></expr></argument>, <argument pos:start="111:49" pos:end="111:54"><expr pos:start="111:49" pos:end="111:54"><name pos:start="111:49" pos:end="111:54">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="117:9"><if pos:start="113:9" pos:end="117:9">if <condition pos:start="113:12" pos:end="113:23">(<expr pos:start="113:13" pos:end="113:22"><name pos:start="113:13" pos:end="113:18">buflen</name> <operator pos:start="113:20" pos:end="113:20">&lt;</operator> <literal type="number" pos:start="113:22" pos:end="113:22">0</literal></expr>)</condition> <block pos:start="113:25" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:33">

            <goto pos:start="115:13" pos:end="115:33">goto <name pos:start="115:18" pos:end="115:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:20">case <expr pos:start="121:10" pos:end="121:19"><name pos:start="121:10" pos:end="121:19">MODE_SENSE</name></expr>:</case>

    <case pos:start="123:5" pos:end="123:23">case <expr pos:start="123:10" pos:end="123:22"><name pos:start="123:10" pos:end="123:22">MODE_SENSE_10</name></expr>:</case>

        <expr_stmt pos:start="125:9" pos:end="125:57"><expr pos:start="125:9" pos:end="125:56"><name pos:start="125:9" pos:end="125:14">buflen</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <call pos:start="125:18" pos:end="125:56"><name pos:start="125:18" pos:end="125:45">scsi_disk_emulate_mode_sense</name><argument_list pos:start="125:46" pos:end="125:56">(<argument pos:start="125:47" pos:end="125:47"><expr pos:start="125:47" pos:end="125:47"><name pos:start="125:47" pos:end="125:47">r</name></expr></argument>, <argument pos:start="125:50" pos:end="125:55"><expr pos:start="125:50" pos:end="125:55"><name pos:start="125:50" pos:end="125:55">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="131:9"><if pos:start="127:9" pos:end="131:9">if <condition pos:start="127:12" pos:end="127:23">(<expr pos:start="127:13" pos:end="127:22"><name pos:start="127:13" pos:end="127:18">buflen</name> <operator pos:start="127:20" pos:end="127:20">&lt;</operator> <literal type="number" pos:start="127:22" pos:end="127:22">0</literal></expr>)</condition> <block pos:start="127:25" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:33">

            <goto pos:start="129:13" pos:end="129:33">goto <name pos:start="129:18" pos:end="129:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <case pos:start="135:5" pos:end="135:18">case <expr pos:start="135:10" pos:end="135:17"><name pos:start="135:10" pos:end="135:17">READ_TOC</name></expr>:</case>

        <expr_stmt pos:start="137:9" pos:end="137:57"><expr pos:start="137:9" pos:end="137:56"><name pos:start="137:9" pos:end="137:14">buflen</name> <operator pos:start="137:16" pos:end="137:16">=</operator> <call pos:start="137:18" pos:end="137:56"><name pos:start="137:18" pos:end="137:43">scsi_disk_emulate_read_toc</name><argument_list pos:start="137:44" pos:end="137:56">(<argument pos:start="137:45" pos:end="137:47"><expr pos:start="137:45" pos:end="137:47"><name pos:start="137:45" pos:end="137:47">req</name></expr></argument>, <argument pos:start="137:50" pos:end="137:55"><expr pos:start="137:50" pos:end="137:55"><name pos:start="137:50" pos:end="137:55">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="143:9"><if pos:start="139:9" pos:end="143:9">if <condition pos:start="139:12" pos:end="139:23">(<expr pos:start="139:13" pos:end="139:22"><name pos:start="139:13" pos:end="139:18">buflen</name> <operator pos:start="139:20" pos:end="139:20">&lt;</operator> <literal type="number" pos:start="139:22" pos:end="139:22">0</literal></expr>)</condition> <block pos:start="139:25" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:33">

            <goto pos:start="141:13" pos:end="141:33">goto <name pos:start="141:18" pos:end="141:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:17">case <expr pos:start="147:10" pos:end="147:16"><name pos:start="147:10" pos:end="147:16">RESERVE</name></expr>:</case>

        <if_stmt pos:start="149:9" pos:end="153:9"><if pos:start="149:9" pos:end="153:9">if <condition pos:start="149:12" pos:end="149:32">(<expr pos:start="149:13" pos:end="149:31"><name pos:start="149:13" pos:end="149:27"><name pos:start="149:13" pos:end="149:15">req</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:20">cmd</name><operator pos:start="149:21" pos:end="149:21">.</operator><name pos:start="149:22" pos:end="149:24">buf</name><index pos:start="149:25" pos:end="149:27">[<expr pos:start="149:26" pos:end="149:26"><literal type="number" pos:start="149:26" pos:end="149:26">1</literal></expr>]</index></name> <operator pos:start="149:29" pos:end="149:29">&amp;</operator> <literal type="number" pos:start="149:31" pos:end="149:31">1</literal></expr>)</condition> <block pos:start="149:34" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:33">

            <goto pos:start="151:13" pos:end="151:33">goto <name pos:start="151:18" pos:end="151:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="155:9" pos:end="155:14">break;</break>

    <case pos:start="157:5" pos:end="157:20">case <expr pos:start="157:10" pos:end="157:19"><name pos:start="157:10" pos:end="157:19">RESERVE_10</name></expr>:</case>

        <if_stmt pos:start="159:9" pos:end="163:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:32">(<expr pos:start="159:13" pos:end="159:31"><name pos:start="159:13" pos:end="159:27"><name pos:start="159:13" pos:end="159:15">req</name><operator pos:start="159:16" pos:end="159:17">-&gt;</operator><name pos:start="159:18" pos:end="159:20">cmd</name><operator pos:start="159:21" pos:end="159:21">.</operator><name pos:start="159:22" pos:end="159:24">buf</name><index pos:start="159:25" pos:end="159:27">[<expr pos:start="159:26" pos:end="159:26"><literal type="number" pos:start="159:26" pos:end="159:26">1</literal></expr>]</index></name> <operator pos:start="159:29" pos:end="159:29">&amp;</operator> <literal type="number" pos:start="159:31" pos:end="159:31">3</literal></expr>)</condition> <block pos:start="159:34" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:33">

            <goto pos:start="161:13" pos:end="161:33">goto <name pos:start="161:18" pos:end="161:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <case pos:start="167:5" pos:end="167:17">case <expr pos:start="167:10" pos:end="167:16"><name pos:start="167:10" pos:end="167:16">RELEASE</name></expr>:</case>

        <if_stmt pos:start="169:9" pos:end="173:9"><if pos:start="169:9" pos:end="173:9">if <condition pos:start="169:12" pos:end="169:32">(<expr pos:start="169:13" pos:end="169:31"><name pos:start="169:13" pos:end="169:27"><name pos:start="169:13" pos:end="169:15">req</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:20">cmd</name><operator pos:start="169:21" pos:end="169:21">.</operator><name pos:start="169:22" pos:end="169:24">buf</name><index pos:start="169:25" pos:end="169:27">[<expr pos:start="169:26" pos:end="169:26"><literal type="number" pos:start="169:26" pos:end="169:26">1</literal></expr>]</index></name> <operator pos:start="169:29" pos:end="169:29">&amp;</operator> <literal type="number" pos:start="169:31" pos:end="169:31">1</literal></expr>)</condition> <block pos:start="169:34" pos:end="173:9">{<block_content pos:start="171:13" pos:end="171:33">

            <goto pos:start="171:13" pos:end="171:33">goto <name pos:start="171:18" pos:end="171:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>

    <case pos:start="177:5" pos:end="177:20">case <expr pos:start="177:10" pos:end="177:19"><name pos:start="177:10" pos:end="177:19">RELEASE_10</name></expr>:</case>

        <if_stmt pos:start="179:9" pos:end="183:9"><if pos:start="179:9" pos:end="183:9">if <condition pos:start="179:12" pos:end="179:32">(<expr pos:start="179:13" pos:end="179:31"><name pos:start="179:13" pos:end="179:27"><name pos:start="179:13" pos:end="179:15">req</name><operator pos:start="179:16" pos:end="179:17">-&gt;</operator><name pos:start="179:18" pos:end="179:20">cmd</name><operator pos:start="179:21" pos:end="179:21">.</operator><name pos:start="179:22" pos:end="179:24">buf</name><index pos:start="179:25" pos:end="179:27">[<expr pos:start="179:26" pos:end="179:26"><literal type="number" pos:start="179:26" pos:end="179:26">1</literal></expr>]</index></name> <operator pos:start="179:29" pos:end="179:29">&amp;</operator> <literal type="number" pos:start="179:31" pos:end="179:31">3</literal></expr>)</condition> <block pos:start="179:34" pos:end="183:9">{<block_content pos:start="181:13" pos:end="181:33">

            <goto pos:start="181:13" pos:end="181:33">goto <name pos:start="181:18" pos:end="181:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="185:9" pos:end="185:14">break;</break>

    <case pos:start="187:5" pos:end="187:20">case <expr pos:start="187:10" pos:end="187:19"><name pos:start="187:10" pos:end="187:19">START_STOP</name></expr>:</case>

        <if_stmt pos:start="189:9" pos:end="193:9"><if pos:start="189:9" pos:end="193:9">if <condition pos:start="189:12" pos:end="189:48">(<expr pos:start="189:13" pos:end="189:47"><call pos:start="189:13" pos:end="189:43"><name pos:start="189:13" pos:end="189:40">scsi_disk_emulate_start_stop</name><argument_list pos:start="189:41" pos:end="189:43">(<argument pos:start="189:42" pos:end="189:42"><expr pos:start="189:42" pos:end="189:42"><name pos:start="189:42" pos:end="189:42">r</name></expr></argument>)</argument_list></call> <operator pos:start="189:45" pos:end="189:45">&lt;</operator> <literal type="number" pos:start="189:47" pos:end="189:47">0</literal></expr>)</condition> <block pos:start="189:50" pos:end="193:9">{<block_content pos:start="191:13" pos:end="191:21">

            <return pos:start="191:13" pos:end="191:21">return <expr pos:start="191:20" pos:end="191:20"><literal type="number" pos:start="191:20" pos:end="191:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="195:9" pos:end="195:14">break;</break>

    <case pos:start="197:5" pos:end="197:30">case <expr pos:start="197:10" pos:end="197:29"><name pos:start="197:10" pos:end="197:29">ALLOW_MEDIUM_REMOVAL</name></expr>:</case>

        <expr_stmt pos:start="199:9" pos:end="199:45"><expr pos:start="199:9" pos:end="199:44"><name pos:start="199:9" pos:end="199:22"><name pos:start="199:9" pos:end="199:9">s</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:22">tray_locked</name></name> <operator pos:start="199:24" pos:end="199:24">=</operator> <name pos:start="199:26" pos:end="199:40"><name pos:start="199:26" pos:end="199:28">req</name><operator pos:start="199:29" pos:end="199:30">-&gt;</operator><name pos:start="199:31" pos:end="199:33">cmd</name><operator pos:start="199:34" pos:end="199:34">.</operator><name pos:start="199:35" pos:end="199:37">buf</name><index pos:start="199:38" pos:end="199:40">[<expr pos:start="199:39" pos:end="199:39"><literal type="number" pos:start="199:39" pos:end="199:39">4</literal></expr>]</index></name> <operator pos:start="199:42" pos:end="199:42">&amp;</operator> <literal type="number" pos:start="199:44" pos:end="199:44">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:63"><expr pos:start="201:9" pos:end="201:62"><call pos:start="201:9" pos:end="201:62"><name pos:start="201:9" pos:end="201:24">bdrv_lock_medium</name><argument_list pos:start="201:25" pos:end="201:62">(<argument pos:start="201:26" pos:end="201:40"><expr pos:start="201:26" pos:end="201:40"><name pos:start="201:26" pos:end="201:40"><name pos:start="201:26" pos:end="201:26">s</name><operator pos:start="201:27" pos:end="201:28">-&gt;</operator><name pos:start="201:29" pos:end="201:32">qdev</name><operator pos:start="201:33" pos:end="201:33">.</operator><name pos:start="201:34" pos:end="201:37">conf</name><operator pos:start="201:38" pos:end="201:38">.</operator><name pos:start="201:39" pos:end="201:40">bs</name></name></expr></argument>, <argument pos:start="201:43" pos:end="201:61"><expr pos:start="201:43" pos:end="201:61"><name pos:start="201:43" pos:end="201:57"><name pos:start="201:43" pos:end="201:45">req</name><operator pos:start="201:46" pos:end="201:47">-&gt;</operator><name pos:start="201:48" pos:end="201:50">cmd</name><operator pos:start="201:51" pos:end="201:51">.</operator><name pos:start="201:52" pos:end="201:54">buf</name><index pos:start="201:55" pos:end="201:57">[<expr pos:start="201:56" pos:end="201:56"><literal type="number" pos:start="201:56" pos:end="201:56">4</literal></expr>]</index></name> <operator pos:start="201:59" pos:end="201:59">&amp;</operator> <literal type="number" pos:start="201:61" pos:end="201:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="203:9" pos:end="203:14">break;</break>

    <case pos:start="205:5" pos:end="205:26">case <expr pos:start="205:10" pos:end="205:25"><name pos:start="205:10" pos:end="205:25">READ_CAPACITY_10</name></expr>:</case>

        <comment type="block" pos:start="207:9" pos:end="207:61">/* The normal LEN field for this command is zero.  */</comment>

        <expr_stmt pos:start="209:9" pos:end="209:29"><expr pos:start="209:9" pos:end="209:28"><call pos:start="209:9" pos:end="209:28"><name pos:start="209:9" pos:end="209:14">memset</name><argument_list pos:start="209:15" pos:end="209:28">(<argument pos:start="209:16" pos:end="209:21"><expr pos:start="209:16" pos:end="209:21"><name pos:start="209:16" pos:end="209:21">outbuf</name></expr></argument>, <argument pos:start="209:24" pos:end="209:24"><expr pos:start="209:24" pos:end="209:24"><literal type="number" pos:start="209:24" pos:end="209:24">0</literal></expr></argument>, <argument pos:start="209:27" pos:end="209:27"><expr pos:start="209:27" pos:end="209:27"><literal type="number" pos:start="209:27" pos:end="209:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:56"><expr pos:start="211:9" pos:end="211:55"><call pos:start="211:9" pos:end="211:55"><name pos:start="211:9" pos:end="211:25">bdrv_get_geometry</name><argument_list pos:start="211:26" pos:end="211:55">(<argument pos:start="211:27" pos:end="211:41"><expr pos:start="211:27" pos:end="211:41"><name pos:start="211:27" pos:end="211:41"><name pos:start="211:27" pos:end="211:27">s</name><operator pos:start="211:28" pos:end="211:29">-&gt;</operator><name pos:start="211:30" pos:end="211:33">qdev</name><operator pos:start="211:34" pos:end="211:34">.</operator><name pos:start="211:35" pos:end="211:38">conf</name><operator pos:start="211:39" pos:end="211:39">.</operator><name pos:start="211:40" pos:end="211:41">bs</name></name></expr></argument>, <argument pos:start="211:44" pos:end="211:54"><expr pos:start="211:44" pos:end="211:54"><operator pos:start="211:44" pos:end="211:44">&amp;</operator><name pos:start="211:45" pos:end="211:54">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="219:9"><if pos:start="213:9" pos:end="219:9">if <condition pos:start="213:12" pos:end="213:24">(<expr pos:start="213:13" pos:end="213:23"><operator pos:start="213:13" pos:end="213:13">!</operator><name pos:start="213:14" pos:end="213:23">nb_sectors</name></expr>)</condition> <block pos:start="213:26" pos:end="219:9">{<block_content pos:start="215:13" pos:end="217:22">

            <expr_stmt pos:start="215:13" pos:end="215:63"><expr pos:start="215:13" pos:end="215:62"><call pos:start="215:13" pos:end="215:62"><name pos:start="215:13" pos:end="215:32">scsi_check_condition</name><argument_list pos:start="215:33" pos:end="215:62">(<argument pos:start="215:34" pos:end="215:34"><expr pos:start="215:34" pos:end="215:34"><name pos:start="215:34" pos:end="215:34">r</name></expr></argument>, <argument pos:start="215:37" pos:end="215:61"><expr pos:start="215:37" pos:end="215:61"><call pos:start="215:37" pos:end="215:61"><name pos:start="215:37" pos:end="215:46">SENSE_CODE</name><argument_list pos:start="215:47" pos:end="215:61">(<argument pos:start="215:48" pos:end="215:60"><expr pos:start="215:48" pos:end="215:60"><name pos:start="215:48" pos:end="215:60">LUN_NOT_READY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="217:13" pos:end="217:22">return <expr pos:start="217:20" pos:end="217:21"><operator pos:start="217:20" pos:end="217:20">-</operator><literal type="number" pos:start="217:21" pos:end="217:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="221:9" pos:end="225:9"><if pos:start="221:9" pos:end="225:9">if <condition pos:start="221:12" pos:end="221:55">(<expr pos:start="221:13" pos:end="221:54"><operator pos:start="221:13" pos:end="221:13">(</operator><name pos:start="221:14" pos:end="221:28"><name pos:start="221:14" pos:end="221:16">req</name><operator pos:start="221:17" pos:end="221:18">-&gt;</operator><name pos:start="221:19" pos:end="221:21">cmd</name><operator pos:start="221:22" pos:end="221:22">.</operator><name pos:start="221:23" pos:end="221:25">buf</name><index pos:start="221:26" pos:end="221:28">[<expr pos:start="221:27" pos:end="221:27"><literal type="number" pos:start="221:27" pos:end="221:27">8</literal></expr>]</index></name> <operator pos:start="221:30" pos:end="221:30">&amp;</operator> <literal type="number" pos:start="221:32" pos:end="221:32">1</literal><operator pos:start="221:33" pos:end="221:33">)</operator> <operator pos:start="221:35" pos:end="221:36">==</operator> <literal type="number" pos:start="221:38" pos:end="221:38">0</literal> <operator pos:start="221:40" pos:end="221:41">&amp;&amp;</operator> <name pos:start="221:43" pos:end="221:54"><name pos:start="221:43" pos:end="221:45">req</name><operator pos:start="221:46" pos:end="221:47">-&gt;</operator><name pos:start="221:48" pos:end="221:50">cmd</name><operator pos:start="221:51" pos:end="221:51">.</operator><name pos:start="221:52" pos:end="221:54">lba</name></name></expr>)</condition> <block pos:start="221:57" pos:end="225:9">{<block_content pos:start="223:13" pos:end="223:33">

            <goto pos:start="223:13" pos:end="223:33">goto <name pos:start="223:18" pos:end="223:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:46"><expr pos:start="227:9" pos:end="227:45"><name pos:start="227:9" pos:end="227:18">nb_sectors</name> <operator pos:start="227:20" pos:end="227:21">/=</operator> <name pos:start="227:23" pos:end="227:39"><name pos:start="227:23" pos:end="227:23">s</name><operator pos:start="227:24" pos:end="227:25">-&gt;</operator><name pos:start="227:26" pos:end="227:29">qdev</name><operator pos:start="227:30" pos:end="227:30">.</operator><name pos:start="227:31" pos:end="227:39">blocksize</name></name> <operator pos:start="227:41" pos:end="227:41">/</operator> <literal type="number" pos:start="227:43" pos:end="227:45">512</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="229:9" pos:end="229:64">/* Returned value is the address of the last sector.  */</comment>

        <expr_stmt pos:start="231:9" pos:end="231:21"><expr pos:start="231:9" pos:end="231:20"><name pos:start="231:9" pos:end="231:18">nb_sectors</name><operator pos:start="231:19" pos:end="231:20">--</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="233:9" pos:end="233:67">/* Remember the new size for read/write sanity checking. */</comment>

        <expr_stmt pos:start="235:9" pos:end="235:37"><expr pos:start="235:9" pos:end="235:36"><name pos:start="235:9" pos:end="235:23"><name pos:start="235:9" pos:end="235:9">s</name><operator pos:start="235:10" pos:end="235:11">-&gt;</operator><name pos:start="235:12" pos:end="235:15">qdev</name><operator pos:start="235:16" pos:end="235:16">.</operator><name pos:start="235:17" pos:end="235:23">max_lba</name></name> <operator pos:start="235:25" pos:end="235:25">=</operator> <name pos:start="235:27" pos:end="235:36">nb_sectors</name></expr>;</expr_stmt>

        <comment type="block" pos:start="237:9" pos:end="237:68">/* Clip to 2TB, instead of returning capacity modulo 2TB. */</comment>

        <if_stmt pos:start="239:9" pos:end="243:9"><if pos:start="239:9" pos:end="243:9">if <condition pos:start="239:12" pos:end="239:36">(<expr pos:start="239:13" pos:end="239:35"><name pos:start="239:13" pos:end="239:22">nb_sectors</name> <operator pos:start="239:24" pos:end="239:24">&gt;</operator> <name pos:start="239:26" pos:end="239:35">UINT32_MAX</name></expr>)</condition> <block pos:start="239:38" pos:end="243:9">{<block_content pos:start="241:13" pos:end="241:36">

            <expr_stmt pos:start="241:13" pos:end="241:36"><expr pos:start="241:13" pos:end="241:35"><name pos:start="241:13" pos:end="241:22">nb_sectors</name> <operator pos:start="241:24" pos:end="241:24">=</operator> <name pos:start="241:26" pos:end="241:35">UINT32_MAX</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:46"><expr pos:start="245:9" pos:end="245:45"><name pos:start="245:9" pos:end="245:17"><name pos:start="245:9" pos:end="245:14">outbuf</name><index pos:start="245:15" pos:end="245:17">[<expr pos:start="245:16" pos:end="245:16"><literal type="number" pos:start="245:16" pos:end="245:16">0</literal></expr>]</index></name> <operator pos:start="245:19" pos:end="245:19">=</operator> <operator pos:start="245:21" pos:end="245:21">(</operator><name pos:start="245:22" pos:end="245:31">nb_sectors</name> <operator pos:start="245:33" pos:end="245:34">&gt;&gt;</operator> <literal type="number" pos:start="245:36" pos:end="245:37">24</literal><operator pos:start="245:38" pos:end="245:38">)</operator> <operator pos:start="245:40" pos:end="245:40">&amp;</operator> <literal type="number" pos:start="245:42" pos:end="245:45">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:46"><expr pos:start="247:9" pos:end="247:45"><name pos:start="247:9" pos:end="247:17"><name pos:start="247:9" pos:end="247:14">outbuf</name><index pos:start="247:15" pos:end="247:17">[<expr pos:start="247:16" pos:end="247:16"><literal type="number" pos:start="247:16" pos:end="247:16">1</literal></expr>]</index></name> <operator pos:start="247:19" pos:end="247:19">=</operator> <operator pos:start="247:21" pos:end="247:21">(</operator><name pos:start="247:22" pos:end="247:31">nb_sectors</name> <operator pos:start="247:33" pos:end="247:34">&gt;&gt;</operator> <literal type="number" pos:start="247:36" pos:end="247:37">16</literal><operator pos:start="247:38" pos:end="247:38">)</operator> <operator pos:start="247:40" pos:end="247:40">&amp;</operator> <literal type="number" pos:start="247:42" pos:end="247:45">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:45"><expr pos:start="249:9" pos:end="249:44"><name pos:start="249:9" pos:end="249:17"><name pos:start="249:9" pos:end="249:14">outbuf</name><index pos:start="249:15" pos:end="249:17">[<expr pos:start="249:16" pos:end="249:16"><literal type="number" pos:start="249:16" pos:end="249:16">2</literal></expr>]</index></name> <operator pos:start="249:19" pos:end="249:19">=</operator> <operator pos:start="249:21" pos:end="249:21">(</operator><name pos:start="249:22" pos:end="249:31">nb_sectors</name> <operator pos:start="249:33" pos:end="249:34">&gt;&gt;</operator> <literal type="number" pos:start="249:36" pos:end="249:36">8</literal><operator pos:start="249:37" pos:end="249:37">)</operator> <operator pos:start="249:39" pos:end="249:39">&amp;</operator> <literal type="number" pos:start="249:41" pos:end="249:44">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:38"><expr pos:start="251:9" pos:end="251:37"><name pos:start="251:9" pos:end="251:17"><name pos:start="251:9" pos:end="251:14">outbuf</name><index pos:start="251:15" pos:end="251:17">[<expr pos:start="251:16" pos:end="251:16"><literal type="number" pos:start="251:16" pos:end="251:16">3</literal></expr>]</index></name> <operator pos:start="251:19" pos:end="251:19">=</operator> <name pos:start="251:21" pos:end="251:30">nb_sectors</name> <operator pos:start="251:32" pos:end="251:32">&amp;</operator> <literal type="number" pos:start="251:34" pos:end="251:37">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:22"><expr pos:start="253:9" pos:end="253:21"><name pos:start="253:9" pos:end="253:17"><name pos:start="253:9" pos:end="253:14">outbuf</name><index pos:start="253:15" pos:end="253:17">[<expr pos:start="253:16" pos:end="253:16"><literal type="number" pos:start="253:16" pos:end="253:16">4</literal></expr>]</index></name> <operator pos:start="253:19" pos:end="253:19">=</operator> <literal type="number" pos:start="253:21" pos:end="253:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:22"><expr pos:start="255:9" pos:end="255:21"><name pos:start="255:9" pos:end="255:17"><name pos:start="255:9" pos:end="255:14">outbuf</name><index pos:start="255:15" pos:end="255:17">[<expr pos:start="255:16" pos:end="255:16"><literal type="number" pos:start="255:16" pos:end="255:16">5</literal></expr>]</index></name> <operator pos:start="255:19" pos:end="255:19">=</operator> <literal type="number" pos:start="255:21" pos:end="255:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:43"><expr pos:start="257:9" pos:end="257:42"><name pos:start="257:9" pos:end="257:17"><name pos:start="257:9" pos:end="257:14">outbuf</name><index pos:start="257:15" pos:end="257:17">[<expr pos:start="257:16" pos:end="257:16"><literal type="number" pos:start="257:16" pos:end="257:16">6</literal></expr>]</index></name> <operator pos:start="257:19" pos:end="257:19">=</operator> <name pos:start="257:21" pos:end="257:37"><name pos:start="257:21" pos:end="257:21">s</name><operator pos:start="257:22" pos:end="257:23">-&gt;</operator><name pos:start="257:24" pos:end="257:27">qdev</name><operator pos:start="257:28" pos:end="257:28">.</operator><name pos:start="257:29" pos:end="257:37">blocksize</name></name> <operator pos:start="257:39" pos:end="257:40">&gt;&gt;</operator> <literal type="number" pos:start="257:42" pos:end="257:42">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:22"><expr pos:start="259:9" pos:end="259:21"><name pos:start="259:9" pos:end="259:17"><name pos:start="259:9" pos:end="259:14">outbuf</name><index pos:start="259:15" pos:end="259:17">[<expr pos:start="259:16" pos:end="259:16"><literal type="number" pos:start="259:16" pos:end="259:16">7</literal></expr>]</index></name> <operator pos:start="259:19" pos:end="259:19">=</operator> <literal type="number" pos:start="259:21" pos:end="259:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:19"><expr pos:start="261:9" pos:end="261:18"><name pos:start="261:9" pos:end="261:14">buflen</name> <operator pos:start="261:16" pos:end="261:16">=</operator> <literal type="number" pos:start="261:18" pos:end="261:18">8</literal></expr>;</expr_stmt>

        <break pos:start="263:9" pos:end="263:14">break;</break>

    <case pos:start="265:5" pos:end="265:23">case <expr pos:start="265:10" pos:end="265:22"><name pos:start="265:10" pos:end="265:22">REQUEST_SENSE</name></expr>:</case>

        <comment type="block" pos:start="267:9" pos:end="267:38">/* Just return "NO SENSE".  */</comment>

        <expr_stmt pos:start="269:9" pos:end="271:62"><expr pos:start="269:9" pos:end="271:61"><name pos:start="269:9" pos:end="269:14">buflen</name> <operator pos:start="269:16" pos:end="269:16">=</operator> <call pos:start="269:18" pos:end="271:61"><name pos:start="269:18" pos:end="269:33">scsi_build_sense</name><argument_list pos:start="269:34" pos:end="271:61">(<argument pos:start="269:35" pos:end="269:38"><expr pos:start="269:35" pos:end="269:38"><name pos:start="269:35" pos:end="269:38">NULL</name></expr></argument>, <argument pos:start="269:41" pos:end="269:41"><expr pos:start="269:41" pos:end="269:41"><literal type="number" pos:start="269:41" pos:end="269:41">0</literal></expr></argument>, <argument pos:start="269:44" pos:end="269:49"><expr pos:start="269:44" pos:end="269:49"><name pos:start="269:44" pos:end="269:49">outbuf</name></expr></argument>, <argument pos:start="269:52" pos:end="269:60"><expr pos:start="269:52" pos:end="269:60"><name pos:start="269:52" pos:end="269:60"><name pos:start="269:52" pos:end="269:52">r</name><operator pos:start="269:53" pos:end="269:54">-&gt;</operator><name pos:start="269:55" pos:end="269:60">buflen</name></name></expr></argument>,

                                  <argument pos:start="271:35" pos:end="271:60"><expr pos:start="271:35" pos:end="271:60"><operator pos:start="271:35" pos:end="271:35">(</operator><name pos:start="271:36" pos:end="271:50"><name pos:start="271:36" pos:end="271:38">req</name><operator pos:start="271:39" pos:end="271:40">-&gt;</operator><name pos:start="271:41" pos:end="271:43">cmd</name><operator pos:start="271:44" pos:end="271:44">.</operator><name pos:start="271:45" pos:end="271:47">buf</name><index pos:start="271:48" pos:end="271:50">[<expr pos:start="271:49" pos:end="271:49"><literal type="number" pos:start="271:49" pos:end="271:49">1</literal></expr>]</index></name> <operator pos:start="271:52" pos:end="271:52">&amp;</operator> <literal type="number" pos:start="271:54" pos:end="271:54">1</literal><operator pos:start="271:55" pos:end="271:55">)</operator> <operator pos:start="271:57" pos:end="271:58">==</operator> <literal type="number" pos:start="271:60" pos:end="271:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="273:9" pos:end="273:14">break;</break>

    <case pos:start="275:5" pos:end="275:26">case <expr pos:start="275:10" pos:end="275:25"><name pos:start="275:10" pos:end="275:25">MECHANISM_STATUS</name></expr>:</case>

        <expr_stmt pos:start="277:9" pos:end="277:58"><expr pos:start="277:9" pos:end="277:57"><name pos:start="277:9" pos:end="277:14">buflen</name> <operator pos:start="277:16" pos:end="277:16">=</operator> <call pos:start="277:18" pos:end="277:57"><name pos:start="277:18" pos:end="277:46">scsi_emulate_mechanism_status</name><argument_list pos:start="277:47" pos:end="277:57">(<argument pos:start="277:48" pos:end="277:48"><expr pos:start="277:48" pos:end="277:48"><name pos:start="277:48" pos:end="277:48">s</name></expr></argument>, <argument pos:start="277:51" pos:end="277:56"><expr pos:start="277:51" pos:end="277:56"><name pos:start="277:51" pos:end="277:56">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="279:9" pos:end="283:9"><if pos:start="279:9" pos:end="283:9">if <condition pos:start="279:12" pos:end="279:23">(<expr pos:start="279:13" pos:end="279:22"><name pos:start="279:13" pos:end="279:18">buflen</name> <operator pos:start="279:20" pos:end="279:20">&lt;</operator> <literal type="number" pos:start="279:22" pos:end="279:22">0</literal></expr>)</condition> <block pos:start="279:25" pos:end="283:9">{<block_content pos:start="281:13" pos:end="281:33">

            <goto pos:start="281:13" pos:end="281:33">goto <name pos:start="281:18" pos:end="281:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="285:9" pos:end="285:14">break;</break>

    <case pos:start="287:5" pos:end="287:27">case <expr pos:start="287:10" pos:end="287:26"><name pos:start="287:10" pos:end="287:26">GET_CONFIGURATION</name></expr>:</case>

        <expr_stmt pos:start="289:9" pos:end="289:51"><expr pos:start="289:9" pos:end="289:50"><name pos:start="289:9" pos:end="289:14">buflen</name> <operator pos:start="289:16" pos:end="289:16">=</operator> <call pos:start="289:18" pos:end="289:50"><name pos:start="289:18" pos:end="289:39">scsi_get_configuration</name><argument_list pos:start="289:40" pos:end="289:50">(<argument pos:start="289:41" pos:end="289:41"><expr pos:start="289:41" pos:end="289:41"><name pos:start="289:41" pos:end="289:41">s</name></expr></argument>, <argument pos:start="289:44" pos:end="289:49"><expr pos:start="289:44" pos:end="289:49"><name pos:start="289:44" pos:end="289:49">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="291:9" pos:end="295:9"><if pos:start="291:9" pos:end="295:9">if <condition pos:start="291:12" pos:end="291:23">(<expr pos:start="291:13" pos:end="291:22"><name pos:start="291:13" pos:end="291:18">buflen</name> <operator pos:start="291:20" pos:end="291:20">&lt;</operator> <literal type="number" pos:start="291:22" pos:end="291:22">0</literal></expr>)</condition> <block pos:start="291:25" pos:end="295:9">{<block_content pos:start="293:13" pos:end="293:33">

            <goto pos:start="293:13" pos:end="293:33">goto <name pos:start="293:18" pos:end="293:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="297:9" pos:end="297:14">break;</break>

    <case pos:start="299:5" pos:end="299:39">case <expr pos:start="299:10" pos:end="299:38"><name pos:start="299:10" pos:end="299:38">GET_EVENT_STATUS_NOTIFICATION</name></expr>:</case>

        <expr_stmt pos:start="301:9" pos:end="301:66"><expr pos:start="301:9" pos:end="301:65"><name pos:start="301:9" pos:end="301:14">buflen</name> <operator pos:start="301:16" pos:end="301:16">=</operator> <call pos:start="301:18" pos:end="301:65"><name pos:start="301:18" pos:end="301:51">scsi_get_event_status_notification</name><argument_list pos:start="301:52" pos:end="301:65">(<argument pos:start="301:53" pos:end="301:53"><expr pos:start="301:53" pos:end="301:53"><name pos:start="301:53" pos:end="301:53">s</name></expr></argument>, <argument pos:start="301:56" pos:end="301:56"><expr pos:start="301:56" pos:end="301:56"><name pos:start="301:56" pos:end="301:56">r</name></expr></argument>, <argument pos:start="301:59" pos:end="301:64"><expr pos:start="301:59" pos:end="301:64"><name pos:start="301:59" pos:end="301:64">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="303:9" pos:end="307:9"><if pos:start="303:9" pos:end="307:9">if <condition pos:start="303:12" pos:end="303:23">(<expr pos:start="303:13" pos:end="303:22"><name pos:start="303:13" pos:end="303:18">buflen</name> <operator pos:start="303:20" pos:end="303:20">&lt;</operator> <literal type="number" pos:start="303:22" pos:end="303:22">0</literal></expr>)</condition> <block pos:start="303:25" pos:end="307:9">{<block_content pos:start="305:13" pos:end="305:33">

            <goto pos:start="305:13" pos:end="305:33">goto <name pos:start="305:18" pos:end="305:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="309:9" pos:end="309:14">break;</break>

    <case pos:start="311:5" pos:end="311:31">case <expr pos:start="311:10" pos:end="311:30"><name pos:start="311:10" pos:end="311:30">READ_DISC_INFORMATION</name></expr>:</case>

        <expr_stmt pos:start="313:9" pos:end="313:58"><expr pos:start="313:9" pos:end="313:57"><name pos:start="313:9" pos:end="313:14">buflen</name> <operator pos:start="313:16" pos:end="313:16">=</operator> <call pos:start="313:18" pos:end="313:57"><name pos:start="313:18" pos:end="313:43">scsi_read_disc_information</name><argument_list pos:start="313:44" pos:end="313:57">(<argument pos:start="313:45" pos:end="313:45"><expr pos:start="313:45" pos:end="313:45"><name pos:start="313:45" pos:end="313:45">s</name></expr></argument>, <argument pos:start="313:48" pos:end="313:48"><expr pos:start="313:48" pos:end="313:48"><name pos:start="313:48" pos:end="313:48">r</name></expr></argument>, <argument pos:start="313:51" pos:end="313:56"><expr pos:start="313:51" pos:end="313:56"><name pos:start="313:51" pos:end="313:56">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="315:9" pos:end="319:9"><if pos:start="315:9" pos:end="319:9">if <condition pos:start="315:12" pos:end="315:23">(<expr pos:start="315:13" pos:end="315:22"><name pos:start="315:13" pos:end="315:18">buflen</name> <operator pos:start="315:20" pos:end="315:20">&lt;</operator> <literal type="number" pos:start="315:22" pos:end="315:22">0</literal></expr>)</condition> <block pos:start="315:25" pos:end="319:9">{<block_content pos:start="317:13" pos:end="317:33">

            <goto pos:start="317:13" pos:end="317:33">goto <name pos:start="317:18" pos:end="317:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="321:9" pos:end="321:14">break;</break>

    <case pos:start="323:5" pos:end="323:28">case <expr pos:start="323:10" pos:end="323:27"><name pos:start="323:10" pos:end="323:27">READ_DVD_STRUCTURE</name></expr>:</case>

        <expr_stmt pos:start="325:9" pos:end="325:55"><expr pos:start="325:9" pos:end="325:54"><name pos:start="325:9" pos:end="325:14">buflen</name> <operator pos:start="325:16" pos:end="325:16">=</operator> <call pos:start="325:18" pos:end="325:54"><name pos:start="325:18" pos:end="325:40">scsi_read_dvd_structure</name><argument_list pos:start="325:41" pos:end="325:54">(<argument pos:start="325:42" pos:end="325:42"><expr pos:start="325:42" pos:end="325:42"><name pos:start="325:42" pos:end="325:42">s</name></expr></argument>, <argument pos:start="325:45" pos:end="325:45"><expr pos:start="325:45" pos:end="325:45"><name pos:start="325:45" pos:end="325:45">r</name></expr></argument>, <argument pos:start="325:48" pos:end="325:53"><expr pos:start="325:48" pos:end="325:53"><name pos:start="325:48" pos:end="325:53">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="327:9" pos:end="331:9"><if pos:start="327:9" pos:end="331:9">if <condition pos:start="327:12" pos:end="327:23">(<expr pos:start="327:13" pos:end="327:22"><name pos:start="327:13" pos:end="327:18">buflen</name> <operator pos:start="327:20" pos:end="327:20">&lt;</operator> <literal type="number" pos:start="327:22" pos:end="327:22">0</literal></expr>)</condition> <block pos:start="327:25" pos:end="331:9">{<block_content pos:start="329:13" pos:end="329:33">

            <goto pos:start="329:13" pos:end="329:33">goto <name pos:start="329:18" pos:end="329:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="333:9" pos:end="333:14">break;</break>

    <case pos:start="335:5" pos:end="335:30">case <expr pos:start="335:10" pos:end="335:29"><name pos:start="335:10" pos:end="335:29">SERVICE_ACTION_IN_16</name></expr>:</case>

        <comment type="block" pos:start="337:9" pos:end="337:44">/* Service Action In subcommands. */</comment>

        <if_stmt pos:start="339:9" pos:end="417:9"><if pos:start="339:9" pos:end="417:9">if <condition pos:start="339:12" pos:end="339:59">(<expr pos:start="339:13" pos:end="339:58"><operator pos:start="339:13" pos:end="339:13">(</operator><name pos:start="339:14" pos:end="339:28"><name pos:start="339:14" pos:end="339:16">req</name><operator pos:start="339:17" pos:end="339:18">-&gt;</operator><name pos:start="339:19" pos:end="339:21">cmd</name><operator pos:start="339:22" pos:end="339:22">.</operator><name pos:start="339:23" pos:end="339:25">buf</name><index pos:start="339:26" pos:end="339:28">[<expr pos:start="339:27" pos:end="339:27"><literal type="number" pos:start="339:27" pos:end="339:27">1</literal></expr>]</index></name> <operator pos:start="339:30" pos:end="339:30">&amp;</operator> <literal type="number" pos:start="339:32" pos:end="339:33">31</literal><operator pos:start="339:34" pos:end="339:34">)</operator> <operator pos:start="339:36" pos:end="339:37">==</operator> <name pos:start="339:39" pos:end="339:58">SAI_READ_CAPACITY_16</name></expr>)</condition> <block pos:start="339:61" pos:end="417:9">{<block_content pos:start="341:13" pos:end="415:18">

            <expr_stmt pos:start="341:13" pos:end="341:47"><expr pos:start="341:13" pos:end="341:46"><call pos:start="341:13" pos:end="341:46"><name pos:start="341:13" pos:end="341:19">DPRINTF</name><argument_list pos:start="341:20" pos:end="341:46">(<argument pos:start="341:21" pos:end="341:45"><expr pos:start="341:21" pos:end="341:45"><literal type="string" pos:start="341:21" pos:end="341:45">"SAI READ CAPACITY(16)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:45"><expr pos:start="343:13" pos:end="343:44"><call pos:start="343:13" pos:end="343:44"><name pos:start="343:13" pos:end="343:18">memset</name><argument_list pos:start="343:19" pos:end="343:44">(<argument pos:start="343:20" pos:end="343:25"><expr pos:start="343:20" pos:end="343:25"><name pos:start="343:20" pos:end="343:25">outbuf</name></expr></argument>, <argument pos:start="343:28" pos:end="343:28"><expr pos:start="343:28" pos:end="343:28"><literal type="number" pos:start="343:28" pos:end="343:28">0</literal></expr></argument>, <argument pos:start="343:31" pos:end="343:43"><expr pos:start="343:31" pos:end="343:43"><name pos:start="343:31" pos:end="343:43"><name pos:start="343:31" pos:end="343:33">req</name><operator pos:start="343:34" pos:end="343:35">-&gt;</operator><name pos:start="343:36" pos:end="343:38">cmd</name><operator pos:start="343:39" pos:end="343:39">.</operator><name pos:start="343:40" pos:end="343:43">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:60"><expr pos:start="345:13" pos:end="345:59"><call pos:start="345:13" pos:end="345:59"><name pos:start="345:13" pos:end="345:29">bdrv_get_geometry</name><argument_list pos:start="345:30" pos:end="345:59">(<argument pos:start="345:31" pos:end="345:45"><expr pos:start="345:31" pos:end="345:45"><name pos:start="345:31" pos:end="345:45"><name pos:start="345:31" pos:end="345:31">s</name><operator pos:start="345:32" pos:end="345:33">-&gt;</operator><name pos:start="345:34" pos:end="345:37">qdev</name><operator pos:start="345:38" pos:end="345:38">.</operator><name pos:start="345:39" pos:end="345:42">conf</name><operator pos:start="345:43" pos:end="345:43">.</operator><name pos:start="345:44" pos:end="345:45">bs</name></name></expr></argument>, <argument pos:start="345:48" pos:end="345:58"><expr pos:start="345:48" pos:end="345:58"><operator pos:start="345:48" pos:end="345:48">&amp;</operator><name pos:start="345:49" pos:end="345:58">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="347:13" pos:end="353:13"><if pos:start="347:13" pos:end="353:13">if <condition pos:start="347:16" pos:end="347:28">(<expr pos:start="347:17" pos:end="347:27"><operator pos:start="347:17" pos:end="347:17">!</operator><name pos:start="347:18" pos:end="347:27">nb_sectors</name></expr>)</condition> <block pos:start="347:30" pos:end="353:13">{<block_content pos:start="349:17" pos:end="351:26">

                <expr_stmt pos:start="349:17" pos:end="349:67"><expr pos:start="349:17" pos:end="349:66"><call pos:start="349:17" pos:end="349:66"><name pos:start="349:17" pos:end="349:36">scsi_check_condition</name><argument_list pos:start="349:37" pos:end="349:66">(<argument pos:start="349:38" pos:end="349:38"><expr pos:start="349:38" pos:end="349:38"><name pos:start="349:38" pos:end="349:38">r</name></expr></argument>, <argument pos:start="349:41" pos:end="349:65"><expr pos:start="349:41" pos:end="349:65"><call pos:start="349:41" pos:end="349:65"><name pos:start="349:41" pos:end="349:50">SENSE_CODE</name><argument_list pos:start="349:51" pos:end="349:65">(<argument pos:start="349:52" pos:end="349:64"><expr pos:start="349:52" pos:end="349:64"><name pos:start="349:52" pos:end="349:64">LUN_NOT_READY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="351:17" pos:end="351:26">return <expr pos:start="351:24" pos:end="351:25"><operator pos:start="351:24" pos:end="351:24">-</operator><literal type="number" pos:start="351:25" pos:end="351:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="355:13" pos:end="359:13"><if pos:start="355:13" pos:end="359:13">if <condition pos:start="355:16" pos:end="355:60">(<expr pos:start="355:17" pos:end="355:59"><operator pos:start="355:17" pos:end="355:17">(</operator><name pos:start="355:18" pos:end="355:33"><name pos:start="355:18" pos:end="355:20">req</name><operator pos:start="355:21" pos:end="355:22">-&gt;</operator><name pos:start="355:23" pos:end="355:25">cmd</name><operator pos:start="355:26" pos:end="355:26">.</operator><name pos:start="355:27" pos:end="355:29">buf</name><index pos:start="355:30" pos:end="355:33">[<expr pos:start="355:31" pos:end="355:32"><literal type="number" pos:start="355:31" pos:end="355:32">14</literal></expr>]</index></name> <operator pos:start="355:35" pos:end="355:35">&amp;</operator> <literal type="number" pos:start="355:37" pos:end="355:37">1</literal><operator pos:start="355:38" pos:end="355:38">)</operator> <operator pos:start="355:40" pos:end="355:41">==</operator> <literal type="number" pos:start="355:43" pos:end="355:43">0</literal> <operator pos:start="355:45" pos:end="355:46">&amp;&amp;</operator> <name pos:start="355:48" pos:end="355:59"><name pos:start="355:48" pos:end="355:50">req</name><operator pos:start="355:51" pos:end="355:52">-&gt;</operator><name pos:start="355:53" pos:end="355:55">cmd</name><operator pos:start="355:56" pos:end="355:56">.</operator><name pos:start="355:57" pos:end="355:59">lba</name></name></expr>)</condition> <block pos:start="355:62" pos:end="359:13">{<block_content pos:start="357:17" pos:end="357:37">

                <goto pos:start="357:17" pos:end="357:37">goto <name pos:start="357:22" pos:end="357:36">illegal_request</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="361:13" pos:end="361:50"><expr pos:start="361:13" pos:end="361:49"><name pos:start="361:13" pos:end="361:22">nb_sectors</name> <operator pos:start="361:24" pos:end="361:25">/=</operator> <name pos:start="361:27" pos:end="361:43"><name pos:start="361:27" pos:end="361:27">s</name><operator pos:start="361:28" pos:end="361:29">-&gt;</operator><name pos:start="361:30" pos:end="361:33">qdev</name><operator pos:start="361:34" pos:end="361:34">.</operator><name pos:start="361:35" pos:end="361:43">blocksize</name></name> <operator pos:start="361:45" pos:end="361:45">/</operator> <literal type="number" pos:start="361:47" pos:end="361:49">512</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="363:13" pos:end="363:68">/* Returned value is the address of the last sector.  */</comment>

            <expr_stmt pos:start="365:13" pos:end="365:25"><expr pos:start="365:13" pos:end="365:24"><name pos:start="365:13" pos:end="365:22">nb_sectors</name><operator pos:start="365:23" pos:end="365:24">--</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="367:13" pos:end="367:71">/* Remember the new size for read/write sanity checking. */</comment>

            <expr_stmt pos:start="369:13" pos:end="369:41"><expr pos:start="369:13" pos:end="369:40"><name pos:start="369:13" pos:end="369:27"><name pos:start="369:13" pos:end="369:13">s</name><operator pos:start="369:14" pos:end="369:15">-&gt;</operator><name pos:start="369:16" pos:end="369:19">qdev</name><operator pos:start="369:20" pos:end="369:20">.</operator><name pos:start="369:21" pos:end="369:27">max_lba</name></name> <operator pos:start="369:29" pos:end="369:29">=</operator> <name pos:start="369:31" pos:end="369:40">nb_sectors</name></expr>;</expr_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:50"><expr pos:start="371:13" pos:end="371:49"><name pos:start="371:13" pos:end="371:21"><name pos:start="371:13" pos:end="371:18">outbuf</name><index pos:start="371:19" pos:end="371:21">[<expr pos:start="371:20" pos:end="371:20"><literal type="number" pos:start="371:20" pos:end="371:20">0</literal></expr>]</index></name> <operator pos:start="371:23" pos:end="371:23">=</operator> <operator pos:start="371:25" pos:end="371:25">(</operator><name pos:start="371:26" pos:end="371:35">nb_sectors</name> <operator pos:start="371:37" pos:end="371:38">&gt;&gt;</operator> <literal type="number" pos:start="371:40" pos:end="371:41">56</literal><operator pos:start="371:42" pos:end="371:42">)</operator> <operator pos:start="371:44" pos:end="371:44">&amp;</operator> <literal type="number" pos:start="371:46" pos:end="371:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="373:13" pos:end="373:50"><expr pos:start="373:13" pos:end="373:49"><name pos:start="373:13" pos:end="373:21"><name pos:start="373:13" pos:end="373:18">outbuf</name><index pos:start="373:19" pos:end="373:21">[<expr pos:start="373:20" pos:end="373:20"><literal type="number" pos:start="373:20" pos:end="373:20">1</literal></expr>]</index></name> <operator pos:start="373:23" pos:end="373:23">=</operator> <operator pos:start="373:25" pos:end="373:25">(</operator><name pos:start="373:26" pos:end="373:35">nb_sectors</name> <operator pos:start="373:37" pos:end="373:38">&gt;&gt;</operator> <literal type="number" pos:start="373:40" pos:end="373:41">48</literal><operator pos:start="373:42" pos:end="373:42">)</operator> <operator pos:start="373:44" pos:end="373:44">&amp;</operator> <literal type="number" pos:start="373:46" pos:end="373:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="375:13" pos:end="375:50"><expr pos:start="375:13" pos:end="375:49"><name pos:start="375:13" pos:end="375:21"><name pos:start="375:13" pos:end="375:18">outbuf</name><index pos:start="375:19" pos:end="375:21">[<expr pos:start="375:20" pos:end="375:20"><literal type="number" pos:start="375:20" pos:end="375:20">2</literal></expr>]</index></name> <operator pos:start="375:23" pos:end="375:23">=</operator> <operator pos:start="375:25" pos:end="375:25">(</operator><name pos:start="375:26" pos:end="375:35">nb_sectors</name> <operator pos:start="375:37" pos:end="375:38">&gt;&gt;</operator> <literal type="number" pos:start="375:40" pos:end="375:41">40</literal><operator pos:start="375:42" pos:end="375:42">)</operator> <operator pos:start="375:44" pos:end="375:44">&amp;</operator> <literal type="number" pos:start="375:46" pos:end="375:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="377:13" pos:end="377:50"><expr pos:start="377:13" pos:end="377:49"><name pos:start="377:13" pos:end="377:21"><name pos:start="377:13" pos:end="377:18">outbuf</name><index pos:start="377:19" pos:end="377:21">[<expr pos:start="377:20" pos:end="377:20"><literal type="number" pos:start="377:20" pos:end="377:20">3</literal></expr>]</index></name> <operator pos:start="377:23" pos:end="377:23">=</operator> <operator pos:start="377:25" pos:end="377:25">(</operator><name pos:start="377:26" pos:end="377:35">nb_sectors</name> <operator pos:start="377:37" pos:end="377:38">&gt;&gt;</operator> <literal type="number" pos:start="377:40" pos:end="377:41">32</literal><operator pos:start="377:42" pos:end="377:42">)</operator> <operator pos:start="377:44" pos:end="377:44">&amp;</operator> <literal type="number" pos:start="377:46" pos:end="377:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="379:13" pos:end="379:50"><expr pos:start="379:13" pos:end="379:49"><name pos:start="379:13" pos:end="379:21"><name pos:start="379:13" pos:end="379:18">outbuf</name><index pos:start="379:19" pos:end="379:21">[<expr pos:start="379:20" pos:end="379:20"><literal type="number" pos:start="379:20" pos:end="379:20">4</literal></expr>]</index></name> <operator pos:start="379:23" pos:end="379:23">=</operator> <operator pos:start="379:25" pos:end="379:25">(</operator><name pos:start="379:26" pos:end="379:35">nb_sectors</name> <operator pos:start="379:37" pos:end="379:38">&gt;&gt;</operator> <literal type="number" pos:start="379:40" pos:end="379:41">24</literal><operator pos:start="379:42" pos:end="379:42">)</operator> <operator pos:start="379:44" pos:end="379:44">&amp;</operator> <literal type="number" pos:start="379:46" pos:end="379:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="381:50"><expr pos:start="381:13" pos:end="381:49"><name pos:start="381:13" pos:end="381:21"><name pos:start="381:13" pos:end="381:18">outbuf</name><index pos:start="381:19" pos:end="381:21">[<expr pos:start="381:20" pos:end="381:20"><literal type="number" pos:start="381:20" pos:end="381:20">5</literal></expr>]</index></name> <operator pos:start="381:23" pos:end="381:23">=</operator> <operator pos:start="381:25" pos:end="381:25">(</operator><name pos:start="381:26" pos:end="381:35">nb_sectors</name> <operator pos:start="381:37" pos:end="381:38">&gt;&gt;</operator> <literal type="number" pos:start="381:40" pos:end="381:41">16</literal><operator pos:start="381:42" pos:end="381:42">)</operator> <operator pos:start="381:44" pos:end="381:44">&amp;</operator> <literal type="number" pos:start="381:46" pos:end="381:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="383:13" pos:end="383:49"><expr pos:start="383:13" pos:end="383:48"><name pos:start="383:13" pos:end="383:21"><name pos:start="383:13" pos:end="383:18">outbuf</name><index pos:start="383:19" pos:end="383:21">[<expr pos:start="383:20" pos:end="383:20"><literal type="number" pos:start="383:20" pos:end="383:20">6</literal></expr>]</index></name> <operator pos:start="383:23" pos:end="383:23">=</operator> <operator pos:start="383:25" pos:end="383:25">(</operator><name pos:start="383:26" pos:end="383:35">nb_sectors</name> <operator pos:start="383:37" pos:end="383:38">&gt;&gt;</operator> <literal type="number" pos:start="383:40" pos:end="383:40">8</literal><operator pos:start="383:41" pos:end="383:41">)</operator> <operator pos:start="383:43" pos:end="383:43">&amp;</operator> <literal type="number" pos:start="383:45" pos:end="383:48">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="385:42"><expr pos:start="385:13" pos:end="385:41"><name pos:start="385:13" pos:end="385:21"><name pos:start="385:13" pos:end="385:18">outbuf</name><index pos:start="385:19" pos:end="385:21">[<expr pos:start="385:20" pos:end="385:20"><literal type="number" pos:start="385:20" pos:end="385:20">7</literal></expr>]</index></name> <operator pos:start="385:23" pos:end="385:23">=</operator> <name pos:start="385:25" pos:end="385:34">nb_sectors</name> <operator pos:start="385:36" pos:end="385:36">&amp;</operator> <literal type="number" pos:start="385:38" pos:end="385:41">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:26"><expr pos:start="387:13" pos:end="387:25"><name pos:start="387:13" pos:end="387:21"><name pos:start="387:13" pos:end="387:18">outbuf</name><index pos:start="387:19" pos:end="387:21">[<expr pos:start="387:20" pos:end="387:20"><literal type="number" pos:start="387:20" pos:end="387:20">8</literal></expr>]</index></name> <operator pos:start="387:23" pos:end="387:23">=</operator> <literal type="number" pos:start="387:25" pos:end="387:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:26"><expr pos:start="389:13" pos:end="389:25"><name pos:start="389:13" pos:end="389:21"><name pos:start="389:13" pos:end="389:18">outbuf</name><index pos:start="389:19" pos:end="389:21">[<expr pos:start="389:20" pos:end="389:20"><literal type="number" pos:start="389:20" pos:end="389:20">9</literal></expr>]</index></name> <operator pos:start="389:23" pos:end="389:23">=</operator> <literal type="number" pos:start="389:25" pos:end="389:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:48"><expr pos:start="391:13" pos:end="391:47"><name pos:start="391:13" pos:end="391:22"><name pos:start="391:13" pos:end="391:18">outbuf</name><index pos:start="391:19" pos:end="391:22">[<expr pos:start="391:20" pos:end="391:21"><literal type="number" pos:start="391:20" pos:end="391:21">10</literal></expr>]</index></name> <operator pos:start="391:24" pos:end="391:24">=</operator> <name pos:start="391:26" pos:end="391:42"><name pos:start="391:26" pos:end="391:26">s</name><operator pos:start="391:27" pos:end="391:28">-&gt;</operator><name pos:start="391:29" pos:end="391:32">qdev</name><operator pos:start="391:33" pos:end="391:33">.</operator><name pos:start="391:34" pos:end="391:42">blocksize</name></name> <operator pos:start="391:44" pos:end="391:45">&gt;&gt;</operator> <literal type="number" pos:start="391:47" pos:end="391:47">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="393:13" pos:end="393:27"><expr pos:start="393:13" pos:end="393:26"><name pos:start="393:13" pos:end="393:22"><name pos:start="393:13" pos:end="393:18">outbuf</name><index pos:start="393:19" pos:end="393:22">[<expr pos:start="393:20" pos:end="393:21"><literal type="number" pos:start="393:20" pos:end="393:21">11</literal></expr>]</index></name> <operator pos:start="393:24" pos:end="393:24">=</operator> <literal type="number" pos:start="393:26" pos:end="393:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:27"><expr pos:start="395:13" pos:end="395:26"><name pos:start="395:13" pos:end="395:22"><name pos:start="395:13" pos:end="395:18">outbuf</name><index pos:start="395:19" pos:end="395:22">[<expr pos:start="395:20" pos:end="395:21"><literal type="number" pos:start="395:20" pos:end="395:21">12</literal></expr>]</index></name> <operator pos:start="395:24" pos:end="395:24">=</operator> <literal type="number" pos:start="395:26" pos:end="395:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:63"><expr pos:start="397:13" pos:end="397:62"><name pos:start="397:13" pos:end="397:22"><name pos:start="397:13" pos:end="397:18">outbuf</name><index pos:start="397:19" pos:end="397:22">[<expr pos:start="397:20" pos:end="397:21"><literal type="number" pos:start="397:20" pos:end="397:21">13</literal></expr>]</index></name> <operator pos:start="397:24" pos:end="397:24">=</operator> <call pos:start="397:26" pos:end="397:62"><name pos:start="397:26" pos:end="397:47">get_physical_block_exp</name><argument_list pos:start="397:48" pos:end="397:62">(<argument pos:start="397:49" pos:end="397:61"><expr pos:start="397:49" pos:end="397:61"><operator pos:start="397:49" pos:end="397:49">&amp;</operator><name pos:start="397:50" pos:end="397:61"><name pos:start="397:50" pos:end="397:50">s</name><operator pos:start="397:51" pos:end="397:52">-&gt;</operator><name pos:start="397:53" pos:end="397:56">qdev</name><operator pos:start="397:57" pos:end="397:57">.</operator><name pos:start="397:58" pos:end="397:61">conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="401:13" pos:end="401:60">/* set TPE bit if the format supports discard */</comment>

            <if_stmt pos:start="403:13" pos:end="407:13"><if pos:start="403:13" pos:end="407:13">if <condition pos:start="403:16" pos:end="403:49">(<expr pos:start="403:17" pos:end="403:48"><name pos:start="403:17" pos:end="403:48"><name pos:start="403:17" pos:end="403:17">s</name><operator pos:start="403:18" pos:end="403:19">-&gt;</operator><name pos:start="403:20" pos:end="403:23">qdev</name><operator pos:start="403:24" pos:end="403:24">.</operator><name pos:start="403:25" pos:end="403:28">conf</name><operator pos:start="403:29" pos:end="403:29">.</operator><name pos:start="403:30" pos:end="403:48">discard_granularity</name></name></expr>)</condition> <block pos:start="403:51" pos:end="407:13">{<block_content pos:start="405:17" pos:end="405:34">

                <expr_stmt pos:start="405:17" pos:end="405:34"><expr pos:start="405:17" pos:end="405:33"><name pos:start="405:17" pos:end="405:26"><name pos:start="405:17" pos:end="405:22">outbuf</name><index pos:start="405:23" pos:end="405:26">[<expr pos:start="405:24" pos:end="405:25"><literal type="number" pos:start="405:24" pos:end="405:25">14</literal></expr>]</index></name> <operator pos:start="405:28" pos:end="405:28">=</operator> <literal type="number" pos:start="405:30" pos:end="405:33">0x80</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="411:13" pos:end="411:71">/* Protection, exponent and lowest lba field left blank. */</comment>

            <expr_stmt pos:start="413:13" pos:end="413:35"><expr pos:start="413:13" pos:end="413:34"><name pos:start="413:13" pos:end="413:18">buflen</name> <operator pos:start="413:20" pos:end="413:20">=</operator> <name pos:start="413:22" pos:end="413:34"><name pos:start="413:22" pos:end="413:24">req</name><operator pos:start="413:25" pos:end="413:26">-&gt;</operator><name pos:start="413:27" pos:end="413:29">cmd</name><operator pos:start="413:30" pos:end="413:30">.</operator><name pos:start="413:31" pos:end="413:34">xfer</name></name></expr>;</expr_stmt>

            <break pos:start="415:13" pos:end="415:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="419:9" pos:end="419:51"><expr pos:start="419:9" pos:end="419:50"><call pos:start="419:9" pos:end="419:50"><name pos:start="419:9" pos:end="419:15">DPRINTF</name><argument_list pos:start="419:16" pos:end="419:50">(<argument pos:start="419:17" pos:end="419:49"><expr pos:start="419:17" pos:end="419:49"><literal type="string" pos:start="419:17" pos:end="419:49">"Unsupported Service Action In\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="421:9" pos:end="421:29">goto <name pos:start="421:14" pos:end="421:28">illegal_request</name>;</goto>

    <case pos:start="423:5" pos:end="423:27">case <expr pos:start="423:10" pos:end="423:26"><name pos:start="423:10" pos:end="423:26">SYNCHRONIZE_CACHE</name></expr>:</case>

        <comment type="block" pos:start="425:9" pos:end="425:73">/* The request is used as the AIO opaque value, so add a ref.  */</comment>

        <expr_stmt pos:start="427:9" pos:end="427:30"><expr pos:start="427:9" pos:end="427:29"><call pos:start="427:9" pos:end="427:29"><name pos:start="427:9" pos:end="427:20">scsi_req_ref</name><argument_list pos:start="427:21" pos:end="427:29">(<argument pos:start="427:22" pos:end="427:28"><expr pos:start="427:22" pos:end="427:28"><operator pos:start="427:22" pos:end="427:22">&amp;</operator><name pos:start="427:23" pos:end="427:28"><name pos:start="427:23" pos:end="427:23">r</name><operator pos:start="427:24" pos:end="427:25">-&gt;</operator><name pos:start="427:26" pos:end="427:28">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="429:9" pos:end="429:71"><expr pos:start="429:9" pos:end="429:70"><call pos:start="429:9" pos:end="429:70"><name pos:start="429:9" pos:end="429:23">bdrv_acct_start</name><argument_list pos:start="429:24" pos:end="429:70">(<argument pos:start="429:25" pos:end="429:39"><expr pos:start="429:25" pos:end="429:39"><name pos:start="429:25" pos:end="429:39"><name pos:start="429:25" pos:end="429:25">s</name><operator pos:start="429:26" pos:end="429:27">-&gt;</operator><name pos:start="429:28" pos:end="429:31">qdev</name><operator pos:start="429:32" pos:end="429:32">.</operator><name pos:start="429:33" pos:end="429:36">conf</name><operator pos:start="429:37" pos:end="429:37">.</operator><name pos:start="429:38" pos:end="429:39">bs</name></name></expr></argument>, <argument pos:start="429:42" pos:end="429:49"><expr pos:start="429:42" pos:end="429:49"><operator pos:start="429:42" pos:end="429:42">&amp;</operator><name pos:start="429:43" pos:end="429:49"><name pos:start="429:43" pos:end="429:43">r</name><operator pos:start="429:44" pos:end="429:45">-&gt;</operator><name pos:start="429:46" pos:end="429:49">acct</name></name></expr></argument>, <argument pos:start="429:52" pos:end="429:52"><expr pos:start="429:52" pos:end="429:52"><literal type="number" pos:start="429:52" pos:end="429:52">0</literal></expr></argument>, <argument pos:start="429:55" pos:end="429:69"><expr pos:start="429:55" pos:end="429:69"><name pos:start="429:55" pos:end="429:69">BDRV_ACCT_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="431:9" pos:end="431:77"><expr pos:start="431:9" pos:end="431:76"><name pos:start="431:9" pos:end="431:20"><name pos:start="431:9" pos:end="431:9">r</name><operator pos:start="431:10" pos:end="431:11">-&gt;</operator><name pos:start="431:12" pos:end="431:14">req</name><operator pos:start="431:15" pos:end="431:15">.</operator><name pos:start="431:16" pos:end="431:20">aiocb</name></name> <operator pos:start="431:22" pos:end="431:22">=</operator> <call pos:start="431:24" pos:end="431:76"><name pos:start="431:24" pos:end="431:37">bdrv_aio_flush</name><argument_list pos:start="431:38" pos:end="431:76">(<argument pos:start="431:39" pos:end="431:53"><expr pos:start="431:39" pos:end="431:53"><name pos:start="431:39" pos:end="431:53"><name pos:start="431:39" pos:end="431:39">s</name><operator pos:start="431:40" pos:end="431:41">-&gt;</operator><name pos:start="431:42" pos:end="431:45">qdev</name><operator pos:start="431:46" pos:end="431:46">.</operator><name pos:start="431:47" pos:end="431:50">conf</name><operator pos:start="431:51" pos:end="431:51">.</operator><name pos:start="431:52" pos:end="431:53">bs</name></name></expr></argument>, <argument pos:start="431:56" pos:end="431:72"><expr pos:start="431:56" pos:end="431:72"><name pos:start="431:56" pos:end="431:72">scsi_aio_complete</name></expr></argument>, <argument pos:start="431:75" pos:end="431:75"><expr pos:start="431:75" pos:end="431:75"><name pos:start="431:75" pos:end="431:75">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="433:9" pos:end="433:17">return <expr pos:start="433:16" pos:end="433:16"><literal type="number" pos:start="433:16" pos:end="433:16">0</literal></expr>;</return>

    <case pos:start="435:5" pos:end="435:17">case <expr pos:start="435:10" pos:end="435:16"><name pos:start="435:10" pos:end="435:16">SEEK_10</name></expr>:</case>

        <expr_stmt pos:start="437:9" pos:end="437:67"><expr pos:start="437:9" pos:end="437:66"><call pos:start="437:9" pos:end="437:66"><name pos:start="437:9" pos:end="437:15">DPRINTF</name><argument_list pos:start="437:16" pos:end="437:66">(<argument pos:start="437:17" pos:end="437:49"><expr pos:start="437:17" pos:end="437:49"><literal type="string" pos:start="437:17" pos:end="437:36">"Seek(10) (sector %"</literal> <name pos:start="437:38" pos:end="437:43">PRId64</name> <literal type="string" pos:start="437:45" pos:end="437:49">")\n"</literal></expr></argument>, <argument pos:start="437:52" pos:end="437:65"><expr pos:start="437:52" pos:end="437:65"><name pos:start="437:52" pos:end="437:65"><name pos:start="437:52" pos:end="437:52">r</name><operator pos:start="437:53" pos:end="437:54">-&gt;</operator><name pos:start="437:55" pos:end="437:57">req</name><operator pos:start="437:58" pos:end="437:58">.</operator><name pos:start="437:59" pos:end="437:61">cmd</name><operator pos:start="437:62" pos:end="437:62">.</operator><name pos:start="437:63" pos:end="437:65">lba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="439:9" pos:end="443:9"><if pos:start="439:9" pos:end="443:9">if <condition pos:start="439:12" pos:end="439:45">(<expr pos:start="439:13" pos:end="439:44"><name pos:start="439:13" pos:end="439:26"><name pos:start="439:13" pos:end="439:13">r</name><operator pos:start="439:14" pos:end="439:15">-&gt;</operator><name pos:start="439:16" pos:end="439:18">req</name><operator pos:start="439:19" pos:end="439:19">.</operator><name pos:start="439:20" pos:end="439:22">cmd</name><operator pos:start="439:23" pos:end="439:23">.</operator><name pos:start="439:24" pos:end="439:26">lba</name></name> <operator pos:start="439:28" pos:end="439:28">&gt;</operator> <name pos:start="439:30" pos:end="439:44"><name pos:start="439:30" pos:end="439:30">s</name><operator pos:start="439:31" pos:end="439:32">-&gt;</operator><name pos:start="439:33" pos:end="439:36">qdev</name><operator pos:start="439:37" pos:end="439:37">.</operator><name pos:start="439:38" pos:end="439:44">max_lba</name></name></expr>)</condition> <block pos:start="439:47" pos:end="443:9">{<block_content pos:start="441:13" pos:end="441:29">

            <goto pos:start="441:13" pos:end="441:29">goto <name pos:start="441:18" pos:end="441:28">illegal_lba</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="445:9" pos:end="445:14">break;</break>

    <case pos:start="447:5" pos:end="447:21">case <expr pos:start="447:10" pos:end="447:20"><name pos:start="447:10" pos:end="447:20">MODE_SELECT</name></expr>:</case>

        <expr_stmt pos:start="449:9" pos:end="449:69"><expr pos:start="449:9" pos:end="449:68"><call pos:start="449:9" pos:end="449:68"><name pos:start="449:9" pos:end="449:15">DPRINTF</name><argument_list pos:start="449:16" pos:end="449:68">(<argument pos:start="449:17" pos:end="449:44"><expr pos:start="449:17" pos:end="449:44"><literal type="string" pos:start="449:17" pos:end="449:44">"Mode Select(6) (len %lu)\n"</literal></expr></argument>, <argument pos:start="449:47" pos:end="449:67"><expr pos:start="449:47" pos:end="449:67"><operator pos:start="449:47" pos:end="449:47">(</operator><name pos:start="449:48" pos:end="449:51">long</name><operator pos:start="449:52" pos:end="449:52">)</operator><name pos:start="449:53" pos:end="449:67"><name pos:start="449:53" pos:end="449:53">r</name><operator pos:start="449:54" pos:end="449:55">-&gt;</operator><name pos:start="449:56" pos:end="449:58">req</name><operator pos:start="449:59" pos:end="449:59">.</operator><name pos:start="449:60" pos:end="449:62">cmd</name><operator pos:start="449:63" pos:end="449:63">.</operator><name pos:start="449:64" pos:end="449:67">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="451:9" pos:end="453:71">/* We don't support mode parameter changes.

           Allow the mode parameter header + block descriptors only. */</comment>

        <if_stmt pos:start="455:9" pos:end="459:9"><if pos:start="455:9" pos:end="459:9">if <condition pos:start="455:12" pos:end="455:33">(<expr pos:start="455:13" pos:end="455:32"><name pos:start="455:13" pos:end="455:27"><name pos:start="455:13" pos:end="455:13">r</name><operator pos:start="455:14" pos:end="455:15">-&gt;</operator><name pos:start="455:16" pos:end="455:18">req</name><operator pos:start="455:19" pos:end="455:19">.</operator><name pos:start="455:20" pos:end="455:22">cmd</name><operator pos:start="455:23" pos:end="455:23">.</operator><name pos:start="455:24" pos:end="455:27">xfer</name></name> <operator pos:start="455:29" pos:end="455:29">&gt;</operator> <literal type="number" pos:start="455:31" pos:end="455:32">12</literal></expr>)</condition> <block pos:start="455:35" pos:end="459:9">{<block_content pos:start="457:13" pos:end="457:33">

            <goto pos:start="457:13" pos:end="457:33">goto <name pos:start="457:18" pos:end="457:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="461:9" pos:end="461:14">break;</break>

    <case pos:start="463:5" pos:end="463:24">case <expr pos:start="463:10" pos:end="463:23"><name pos:start="463:10" pos:end="463:23">MODE_SELECT_10</name></expr>:</case>

        <expr_stmt pos:start="465:9" pos:end="465:70"><expr pos:start="465:9" pos:end="465:69"><call pos:start="465:9" pos:end="465:69"><name pos:start="465:9" pos:end="465:15">DPRINTF</name><argument_list pos:start="465:16" pos:end="465:69">(<argument pos:start="465:17" pos:end="465:45"><expr pos:start="465:17" pos:end="465:45"><literal type="string" pos:start="465:17" pos:end="465:45">"Mode Select(10) (len %lu)\n"</literal></expr></argument>, <argument pos:start="465:48" pos:end="465:68"><expr pos:start="465:48" pos:end="465:68"><operator pos:start="465:48" pos:end="465:48">(</operator><name pos:start="465:49" pos:end="465:52">long</name><operator pos:start="465:53" pos:end="465:53">)</operator><name pos:start="465:54" pos:end="465:68"><name pos:start="465:54" pos:end="465:54">r</name><operator pos:start="465:55" pos:end="465:56">-&gt;</operator><name pos:start="465:57" pos:end="465:59">req</name><operator pos:start="465:60" pos:end="465:60">.</operator><name pos:start="465:61" pos:end="465:63">cmd</name><operator pos:start="465:64" pos:end="465:64">.</operator><name pos:start="465:65" pos:end="465:68">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="467:9" pos:end="469:71">/* We don't support mode parameter changes.

           Allow the mode parameter header + block descriptors only. */</comment>

        <if_stmt pos:start="471:9" pos:end="475:9"><if pos:start="471:9" pos:end="475:9">if <condition pos:start="471:12" pos:end="471:33">(<expr pos:start="471:13" pos:end="471:32"><name pos:start="471:13" pos:end="471:27"><name pos:start="471:13" pos:end="471:13">r</name><operator pos:start="471:14" pos:end="471:15">-&gt;</operator><name pos:start="471:16" pos:end="471:18">req</name><operator pos:start="471:19" pos:end="471:19">.</operator><name pos:start="471:20" pos:end="471:22">cmd</name><operator pos:start="471:23" pos:end="471:23">.</operator><name pos:start="471:24" pos:end="471:27">xfer</name></name> <operator pos:start="471:29" pos:end="471:29">&gt;</operator> <literal type="number" pos:start="471:31" pos:end="471:32">16</literal></expr>)</condition> <block pos:start="471:35" pos:end="475:9">{<block_content pos:start="473:13" pos:end="473:33">

            <goto pos:start="473:13" pos:end="473:33">goto <name pos:start="473:18" pos:end="473:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="477:9" pos:end="477:14">break;</break>

    <case pos:start="479:5" pos:end="479:23">case <expr pos:start="479:10" pos:end="479:22"><name pos:start="479:10" pos:end="479:22">WRITE_SAME_10</name></expr>:</case>

        <expr_stmt pos:start="481:9" pos:end="481:49"><expr pos:start="481:9" pos:end="481:48"><name pos:start="481:9" pos:end="481:18">nb_sectors</name> <operator pos:start="481:20" pos:end="481:20">=</operator> <call pos:start="481:22" pos:end="481:48"><name pos:start="481:22" pos:end="481:30">lduw_be_p</name><argument_list pos:start="481:31" pos:end="481:48">(<argument pos:start="481:32" pos:end="481:47"><expr pos:start="481:32" pos:end="481:47"><operator pos:start="481:32" pos:end="481:32">&amp;</operator><name pos:start="481:33" pos:end="481:47"><name pos:start="481:33" pos:end="481:35">req</name><operator pos:start="481:36" pos:end="481:37">-&gt;</operator><name pos:start="481:38" pos:end="481:40">cmd</name><operator pos:start="481:41" pos:end="481:41">.</operator><name pos:start="481:42" pos:end="481:44">buf</name><index pos:start="481:45" pos:end="481:47">[<expr pos:start="481:46" pos:end="481:46"><literal type="number" pos:start="481:46" pos:end="481:46">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="483:9" pos:end="483:24">goto <name pos:start="483:14" pos:end="483:23">write_same</name>;</goto>

    <case pos:start="485:5" pos:end="485:23">case <expr pos:start="485:10" pos:end="485:22"><name pos:start="485:10" pos:end="485:22">WRITE_SAME_16</name></expr>:</case>

        <expr_stmt pos:start="487:9" pos:end="487:65"><expr pos:start="487:9" pos:end="487:64"><name pos:start="487:9" pos:end="487:18">nb_sectors</name> <operator pos:start="487:20" pos:end="487:20">=</operator> <call pos:start="487:22" pos:end="487:48"><name pos:start="487:22" pos:end="487:29">ldl_be_p</name><argument_list pos:start="487:30" pos:end="487:48">(<argument pos:start="487:31" pos:end="487:47"><expr pos:start="487:31" pos:end="487:47"><operator pos:start="487:31" pos:end="487:31">&amp;</operator><name pos:start="487:32" pos:end="487:47"><name pos:start="487:32" pos:end="487:34">req</name><operator pos:start="487:35" pos:end="487:36">-&gt;</operator><name pos:start="487:37" pos:end="487:39">cmd</name><operator pos:start="487:40" pos:end="487:40">.</operator><name pos:start="487:41" pos:end="487:43">buf</name><index pos:start="487:44" pos:end="487:47">[<expr pos:start="487:45" pos:end="487:46"><literal type="number" pos:start="487:45" pos:end="487:46">10</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="487:50" pos:end="487:50">&amp;</operator> <literal type="number" pos:start="487:52" pos:end="487:64">0xffffffffULL</literal></expr>;</expr_stmt>

    <label pos:start="489:5" pos:end="489:15"><name pos:start="489:5" pos:end="489:14">write_same</name>:</label>

        <if_stmt pos:start="491:9" pos:end="495:9"><if pos:start="491:9" pos:end="495:9">if <condition pos:start="491:12" pos:end="491:45">(<expr pos:start="491:13" pos:end="491:44"><name pos:start="491:13" pos:end="491:26"><name pos:start="491:13" pos:end="491:13">r</name><operator pos:start="491:14" pos:end="491:15">-&gt;</operator><name pos:start="491:16" pos:end="491:18">req</name><operator pos:start="491:19" pos:end="491:19">.</operator><name pos:start="491:20" pos:end="491:22">cmd</name><operator pos:start="491:23" pos:end="491:23">.</operator><name pos:start="491:24" pos:end="491:26">lba</name></name> <operator pos:start="491:28" pos:end="491:28">&gt;</operator> <name pos:start="491:30" pos:end="491:44"><name pos:start="491:30" pos:end="491:30">s</name><operator pos:start="491:31" pos:end="491:32">-&gt;</operator><name pos:start="491:33" pos:end="491:36">qdev</name><operator pos:start="491:37" pos:end="491:37">.</operator><name pos:start="491:38" pos:end="491:44">max_lba</name></name></expr>)</condition> <block pos:start="491:47" pos:end="495:9">{<block_content pos:start="493:13" pos:end="493:29">

            <goto pos:start="493:13" pos:end="493:29">goto <name pos:start="493:18" pos:end="493:28">illegal_lba</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="499:9" pos:end="503:11">/*

         * We only support WRITE SAME with the unmap bit set for now.

         */</comment>

        <if_stmt pos:start="505:9" pos:end="509:9"><if pos:start="505:9" pos:end="509:9">if <condition pos:start="505:12" pos:end="505:37">(<expr pos:start="505:13" pos:end="505:36"><operator pos:start="505:13" pos:end="505:13">!</operator><operator pos:start="505:14" pos:end="505:14">(</operator><name pos:start="505:15" pos:end="505:29"><name pos:start="505:15" pos:end="505:17">req</name><operator pos:start="505:18" pos:end="505:19">-&gt;</operator><name pos:start="505:20" pos:end="505:22">cmd</name><operator pos:start="505:23" pos:end="505:23">.</operator><name pos:start="505:24" pos:end="505:26">buf</name><index pos:start="505:27" pos:end="505:29">[<expr pos:start="505:28" pos:end="505:28"><literal type="number" pos:start="505:28" pos:end="505:28">1</literal></expr>]</index></name> <operator pos:start="505:31" pos:end="505:31">&amp;</operator> <literal type="number" pos:start="505:33" pos:end="505:35">0x8</literal><operator pos:start="505:36" pos:end="505:36">)</operator></expr>)</condition> <block pos:start="505:39" pos:end="509:9">{<block_content pos:start="507:13" pos:end="507:33">

            <goto pos:start="507:13" pos:end="507:33">goto <name pos:start="507:18" pos:end="507:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="513:9" pos:end="513:73">/* The request is used as the AIO opaque value, so add a ref.  */</comment>

        <expr_stmt pos:start="515:9" pos:end="515:30"><expr pos:start="515:9" pos:end="515:29"><call pos:start="515:9" pos:end="515:29"><name pos:start="515:9" pos:end="515:20">scsi_req_ref</name><argument_list pos:start="515:21" pos:end="515:29">(<argument pos:start="515:22" pos:end="515:28"><expr pos:start="515:22" pos:end="515:28"><operator pos:start="515:22" pos:end="515:22">&amp;</operator><name pos:start="515:23" pos:end="515:28"><name pos:start="515:23" pos:end="515:23">r</name><operator pos:start="515:24" pos:end="515:25">-&gt;</operator><name pos:start="515:26" pos:end="515:28">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="517:9" pos:end="523:62"><expr pos:start="517:9" pos:end="523:61"><name pos:start="517:9" pos:end="517:20"><name pos:start="517:9" pos:end="517:9">r</name><operator pos:start="517:10" pos:end="517:11">-&gt;</operator><name pos:start="517:12" pos:end="517:14">req</name><operator pos:start="517:15" pos:end="517:15">.</operator><name pos:start="517:16" pos:end="517:20">aiocb</name></name> <operator pos:start="517:22" pos:end="517:22">=</operator> <call pos:start="517:24" pos:end="523:61"><name pos:start="517:24" pos:end="517:39">bdrv_aio_discard</name><argument_list pos:start="517:40" pos:end="523:61">(<argument pos:start="517:41" pos:end="517:55"><expr pos:start="517:41" pos:end="517:55"><name pos:start="517:41" pos:end="517:55"><name pos:start="517:41" pos:end="517:41">s</name><operator pos:start="517:42" pos:end="517:43">-&gt;</operator><name pos:start="517:44" pos:end="517:47">qdev</name><operator pos:start="517:48" pos:end="517:48">.</operator><name pos:start="517:49" pos:end="517:52">conf</name><operator pos:start="517:53" pos:end="517:53">.</operator><name pos:start="517:54" pos:end="517:55">bs</name></name></expr></argument>,

                                        <argument pos:start="519:41" pos:end="519:82"><expr pos:start="519:41" pos:end="519:82"><name pos:start="519:41" pos:end="519:54"><name pos:start="519:41" pos:end="519:41">r</name><operator pos:start="519:42" pos:end="519:43">-&gt;</operator><name pos:start="519:44" pos:end="519:46">req</name><operator pos:start="519:47" pos:end="519:47">.</operator><name pos:start="519:48" pos:end="519:50">cmd</name><operator pos:start="519:51" pos:end="519:51">.</operator><name pos:start="519:52" pos:end="519:54">lba</name></name> <operator pos:start="519:56" pos:end="519:56">*</operator> <operator pos:start="519:58" pos:end="519:58">(</operator><name pos:start="519:59" pos:end="519:75"><name pos:start="519:59" pos:end="519:59">s</name><operator pos:start="519:60" pos:end="519:61">-&gt;</operator><name pos:start="519:62" pos:end="519:65">qdev</name><operator pos:start="519:66" pos:end="519:66">.</operator><name pos:start="519:67" pos:end="519:75">blocksize</name></name> <operator pos:start="519:77" pos:end="519:77">/</operator> <literal type="number" pos:start="519:79" pos:end="519:81">512</literal><operator pos:start="519:82" pos:end="519:82">)</operator></expr></argument>,

                                        <argument pos:start="521:41" pos:end="521:78"><expr pos:start="521:41" pos:end="521:78"><name pos:start="521:41" pos:end="521:50">nb_sectors</name> <operator pos:start="521:52" pos:end="521:52">*</operator> <operator pos:start="521:54" pos:end="521:54">(</operator><name pos:start="521:55" pos:end="521:71"><name pos:start="521:55" pos:end="521:55">s</name><operator pos:start="521:56" pos:end="521:57">-&gt;</operator><name pos:start="521:58" pos:end="521:61">qdev</name><operator pos:start="521:62" pos:end="521:62">.</operator><name pos:start="521:63" pos:end="521:71">blocksize</name></name> <operator pos:start="521:73" pos:end="521:73">/</operator> <literal type="number" pos:start="521:75" pos:end="521:77">512</literal><operator pos:start="521:78" pos:end="521:78">)</operator></expr></argument>,

                                        <argument pos:start="523:41" pos:end="523:57"><expr pos:start="523:41" pos:end="523:57"><name pos:start="523:41" pos:end="523:57">scsi_aio_complete</name></expr></argument>, <argument pos:start="523:60" pos:end="523:60"><expr pos:start="523:60" pos:end="523:60"><name pos:start="523:60" pos:end="523:60">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="525:9" pos:end="525:17">return <expr pos:start="525:16" pos:end="525:16"><literal type="number" pos:start="525:16" pos:end="525:16">0</literal></expr>;</return>

    <default pos:start="527:5" pos:end="527:12">default:</default>

        <expr_stmt pos:start="529:9" pos:end="529:58"><expr pos:start="529:9" pos:end="529:57"><call pos:start="529:9" pos:end="529:57"><name pos:start="529:9" pos:end="529:15">DPRINTF</name><argument_list pos:start="529:16" pos:end="529:57">(<argument pos:start="529:17" pos:end="529:48"><expr pos:start="529:17" pos:end="529:48"><literal type="string" pos:start="529:17" pos:end="529:48">"Unknown SCSI command (%2.2x)\n"</literal></expr></argument>, <argument pos:start="529:51" pos:end="529:56"><expr pos:start="529:51" pos:end="529:56"><name pos:start="529:51" pos:end="529:56"><name pos:start="529:51" pos:end="529:53">buf</name><index pos:start="529:54" pos:end="529:56">[<expr pos:start="529:55" pos:end="529:55"><literal type="number" pos:start="529:55" pos:end="529:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="531:9" pos:end="531:60"><expr pos:start="531:9" pos:end="531:59"><call pos:start="531:9" pos:end="531:59"><name pos:start="531:9" pos:end="531:28">scsi_check_condition</name><argument_list pos:start="531:29" pos:end="531:59">(<argument pos:start="531:30" pos:end="531:30"><expr pos:start="531:30" pos:end="531:30"><name pos:start="531:30" pos:end="531:30">r</name></expr></argument>, <argument pos:start="531:33" pos:end="531:58"><expr pos:start="531:33" pos:end="531:58"><call pos:start="531:33" pos:end="531:58"><name pos:start="531:33" pos:end="531:42">SENSE_CODE</name><argument_list pos:start="531:43" pos:end="531:58">(<argument pos:start="531:44" pos:end="531:57"><expr pos:start="531:44" pos:end="531:57"><name pos:start="531:44" pos:end="531:57">INVALID_OPCODE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="533:9" pos:end="533:17">return <expr pos:start="533:16" pos:end="533:16"><literal type="number" pos:start="533:16" pos:end="533:16">0</literal></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="537:5" pos:end="537:26"><expr pos:start="537:5" pos:end="537:25"><call pos:start="537:5" pos:end="537:25"><name pos:start="537:5" pos:end="537:10">assert</name><argument_list pos:start="537:11" pos:end="537:25">(<argument pos:start="537:12" pos:end="537:24"><expr pos:start="537:12" pos:end="537:24"><operator pos:start="537:12" pos:end="537:12">!</operator><name pos:start="537:13" pos:end="537:24"><name pos:start="537:13" pos:end="537:13">r</name><operator pos:start="537:14" pos:end="537:15">-&gt;</operator><name pos:start="537:16" pos:end="537:18">req</name><operator pos:start="537:19" pos:end="537:19">.</operator><name pos:start="537:20" pos:end="537:24">aiocb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="539:5" pos:end="539:48"><expr pos:start="539:5" pos:end="539:47"><name pos:start="539:5" pos:end="539:18"><name pos:start="539:5" pos:end="539:5">r</name><operator pos:start="539:6" pos:end="539:7">-&gt;</operator><name pos:start="539:8" pos:end="539:10">iov</name><operator pos:start="539:11" pos:end="539:11">.</operator><name pos:start="539:12" pos:end="539:18">iov_len</name></name> <operator pos:start="539:20" pos:end="539:20">=</operator> <call pos:start="539:22" pos:end="539:47"><name pos:start="539:22" pos:end="539:24">MIN</name><argument_list pos:start="539:25" pos:end="539:47">(<argument pos:start="539:26" pos:end="539:31"><expr pos:start="539:26" pos:end="539:31"><name pos:start="539:26" pos:end="539:31">buflen</name></expr></argument>, <argument pos:start="539:34" pos:end="539:46"><expr pos:start="539:34" pos:end="539:46"><name pos:start="539:34" pos:end="539:46"><name pos:start="539:34" pos:end="539:36">req</name><operator pos:start="539:37" pos:end="539:38">-&gt;</operator><name pos:start="539:39" pos:end="539:41">cmd</name><operator pos:start="539:42" pos:end="539:42">.</operator><name pos:start="539:43" pos:end="539:46">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="541:5" pos:end="545:5"><if pos:start="541:5" pos:end="545:5">if <condition pos:start="541:8" pos:end="541:28">(<expr pos:start="541:9" pos:end="541:27"><name pos:start="541:9" pos:end="541:22"><name pos:start="541:9" pos:end="541:9">r</name><operator pos:start="541:10" pos:end="541:11">-&gt;</operator><name pos:start="541:12" pos:end="541:14">iov</name><operator pos:start="541:15" pos:end="541:15">.</operator><name pos:start="541:16" pos:end="541:22">iov_len</name></name> <operator pos:start="541:24" pos:end="541:25">==</operator> <literal type="number" pos:start="541:27" pos:end="541:27">0</literal></expr>)</condition> <block pos:start="541:30" pos:end="545:5">{<block_content pos:start="543:9" pos:end="543:41">

        <expr_stmt pos:start="543:9" pos:end="543:41"><expr pos:start="543:9" pos:end="543:40"><call pos:start="543:9" pos:end="543:40"><name pos:start="543:9" pos:end="543:25">scsi_req_complete</name><argument_list pos:start="543:26" pos:end="543:40">(<argument pos:start="543:27" pos:end="543:33"><expr pos:start="543:27" pos:end="543:33"><operator pos:start="543:27" pos:end="543:27">&amp;</operator><name pos:start="543:28" pos:end="543:33"><name pos:start="543:28" pos:end="543:28">r</name><operator pos:start="543:29" pos:end="543:30">-&gt;</operator><name pos:start="543:31" pos:end="543:33">req</name></name></expr></argument>, <argument pos:start="543:36" pos:end="543:39"><expr pos:start="543:36" pos:end="543:39"><name pos:start="543:36" pos:end="543:39">GOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="547:5" pos:end="557:5"><if pos:start="547:5" pos:end="553:5">if <condition pos:start="547:8" pos:end="547:44">(<expr pos:start="547:9" pos:end="547:43"><name pos:start="547:9" pos:end="547:23"><name pos:start="547:9" pos:end="547:9">r</name><operator pos:start="547:10" pos:end="547:11">-&gt;</operator><name pos:start="547:12" pos:end="547:14">req</name><operator pos:start="547:15" pos:end="547:15">.</operator><name pos:start="547:16" pos:end="547:18">cmd</name><operator pos:start="547:19" pos:end="547:19">.</operator><name pos:start="547:20" pos:end="547:23">mode</name></name> <operator pos:start="547:25" pos:end="547:26">==</operator> <name pos:start="547:28" pos:end="547:43">SCSI_XFER_TO_DEV</name></expr>)</condition> <block pos:start="547:46" pos:end="553:5">{<block_content pos:start="549:9" pos:end="551:31">

        <expr_stmt pos:start="549:9" pos:end="549:48"><expr pos:start="549:9" pos:end="549:47"><call pos:start="549:9" pos:end="549:47"><name pos:start="549:9" pos:end="549:14">assert</name><argument_list pos:start="549:15" pos:end="549:47">(<argument pos:start="549:16" pos:end="549:46"><expr pos:start="549:16" pos:end="549:46"><name pos:start="549:16" pos:end="549:29"><name pos:start="549:16" pos:end="549:16">r</name><operator pos:start="549:17" pos:end="549:18">-&gt;</operator><name pos:start="549:19" pos:end="549:21">iov</name><operator pos:start="549:22" pos:end="549:22">.</operator><name pos:start="549:23" pos:end="549:29">iov_len</name></name> <operator pos:start="549:31" pos:end="549:32">==</operator> <name pos:start="549:34" pos:end="549:46"><name pos:start="549:34" pos:end="549:36">req</name><operator pos:start="549:37" pos:end="549:38">-&gt;</operator><name pos:start="549:39" pos:end="549:41">cmd</name><operator pos:start="549:42" pos:end="549:42">.</operator><name pos:start="549:43" pos:end="549:46">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="551:9" pos:end="551:31">return <expr pos:start="551:16" pos:end="551:30"><operator pos:start="551:16" pos:end="551:16">-</operator><name pos:start="551:17" pos:end="551:30"><name pos:start="551:17" pos:end="551:17">r</name><operator pos:start="551:18" pos:end="551:19">-&gt;</operator><name pos:start="551:20" pos:end="551:22">iov</name><operator pos:start="551:23" pos:end="551:23">.</operator><name pos:start="551:24" pos:end="551:30">iov_len</name></name></expr>;</return>

    </block_content>}</block></if> <else pos:start="553:7" pos:end="557:5">else <block pos:start="553:12" pos:end="557:5">{<block_content pos:start="555:9" pos:end="555:30">

        <return pos:start="555:9" pos:end="555:30">return <expr pos:start="555:16" pos:end="555:29"><name pos:start="555:16" pos:end="555:29"><name pos:start="555:16" pos:end="555:16">r</name><operator pos:start="555:17" pos:end="555:18">-&gt;</operator><name pos:start="555:19" pos:end="555:21">iov</name><operator pos:start="555:22" pos:end="555:22">.</operator><name pos:start="555:23" pos:end="555:29">iov_len</name></name></expr>;</return>

    </block_content>}</block></else></if_stmt>



<label pos:start="561:1" pos:end="561:16"><name pos:start="561:1" pos:end="561:15">illegal_request</name>:</label>

    <if_stmt pos:start="563:5" pos:end="567:5"><if pos:start="563:5" pos:end="567:5">if <condition pos:start="563:8" pos:end="563:28">(<expr pos:start="563:9" pos:end="563:27"><name pos:start="563:9" pos:end="563:21"><name pos:start="563:9" pos:end="563:9">r</name><operator pos:start="563:10" pos:end="563:11">-&gt;</operator><name pos:start="563:12" pos:end="563:14">req</name><operator pos:start="563:15" pos:end="563:15">.</operator><name pos:start="563:16" pos:end="563:21">status</name></name> <operator pos:start="563:23" pos:end="563:24">==</operator> <operator pos:start="563:26" pos:end="563:26">-</operator><literal type="number" pos:start="563:27" pos:end="563:27">1</literal></expr>)</condition> <block pos:start="563:30" pos:end="567:5">{<block_content pos:start="565:9" pos:end="565:59">

        <expr_stmt pos:start="565:9" pos:end="565:59"><expr pos:start="565:9" pos:end="565:58"><call pos:start="565:9" pos:end="565:58"><name pos:start="565:9" pos:end="565:28">scsi_check_condition</name><argument_list pos:start="565:29" pos:end="565:58">(<argument pos:start="565:30" pos:end="565:30"><expr pos:start="565:30" pos:end="565:30"><name pos:start="565:30" pos:end="565:30">r</name></expr></argument>, <argument pos:start="565:33" pos:end="565:57"><expr pos:start="565:33" pos:end="565:57"><call pos:start="565:33" pos:end="565:57"><name pos:start="565:33" pos:end="565:42">SENSE_CODE</name><argument_list pos:start="565:43" pos:end="565:57">(<argument pos:start="565:44" pos:end="565:56"><expr pos:start="565:44" pos:end="565:56"><name pos:start="565:44" pos:end="565:56">INVALID_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="569:5" pos:end="569:13">return <expr pos:start="569:12" pos:end="569:12"><literal type="number" pos:start="569:12" pos:end="569:12">0</literal></expr>;</return>



<label pos:start="573:1" pos:end="573:12"><name pos:start="573:1" pos:end="573:11">illegal_lba</name>:</label>

    <expr_stmt pos:start="575:5" pos:end="575:58"><expr pos:start="575:5" pos:end="575:57"><call pos:start="575:5" pos:end="575:57"><name pos:start="575:5" pos:end="575:24">scsi_check_condition</name><argument_list pos:start="575:25" pos:end="575:57">(<argument pos:start="575:26" pos:end="575:26"><expr pos:start="575:26" pos:end="575:26"><name pos:start="575:26" pos:end="575:26">r</name></expr></argument>, <argument pos:start="575:29" pos:end="575:56"><expr pos:start="575:29" pos:end="575:56"><call pos:start="575:29" pos:end="575:56"><name pos:start="575:29" pos:end="575:38">SENSE_CODE</name><argument_list pos:start="575:39" pos:end="575:56">(<argument pos:start="575:40" pos:end="575:55"><expr pos:start="575:40" pos:end="575:55"><name pos:start="575:40" pos:end="575:55">LBA_OUT_OF_RANGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="577:5" pos:end="577:13">return <expr pos:start="577:12" pos:end="577:12"><literal type="number" pos:start="577:12" pos:end="577:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
