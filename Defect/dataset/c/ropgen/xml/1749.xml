<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1749.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">lsi_do_msgout</name><parameter_list pos:start="1:26" pos:end="1:38">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:36"><name pos:start="1:27" pos:end="1:34">LSIState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="245:1">{<block_content pos:start="5:5" pos:end="243:22">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:15">msg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:24">current_tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">SCSIDevice</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:27">current_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">lsi_request</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:18">p</name></decl>, <decl pos:start="13:21" pos:end="13:27"><type ref="prev" pos:start="13:5" pos:end="13:17"><modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:27">p_next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">id</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:19">(<expr pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:18">current</name></name></expr>)</condition> <block pos:start="19:21" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:38">

        <expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:19">current_tag</name> <operator pos:start="21:21" pos:end="21:21">=</operator> <name pos:start="21:23" pos:end="21:37"><name pos:start="21:23" pos:end="21:23">s</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:32">current</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:37">tag</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="27:5">else <block pos:start="23:12" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:36">

        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:19">current_tag</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <name pos:start="25:23" pos:end="25:35"><name pos:start="25:23" pos:end="25:23">s</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:35">select_tag</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:34"><expr pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:6">id</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <operator pos:start="29:10" pos:end="29:10">(</operator><name pos:start="29:11" pos:end="29:21">current_tag</name> <operator pos:start="29:23" pos:end="29:24">&gt;&gt;</operator> <literal type="number" pos:start="29:26" pos:end="29:26">8</literal><operator pos:start="29:27" pos:end="29:27">)</operator> <operator pos:start="29:29" pos:end="29:29">&amp;</operator> <literal type="number" pos:start="29:31" pos:end="29:33">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:34"><expr pos:start="31:5" pos:end="31:33"><name pos:start="31:5" pos:end="31:15">current_dev</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:33"><name pos:start="31:19" pos:end="31:19">s</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:24">bus</name><operator pos:start="31:25" pos:end="31:25">.</operator><name pos:start="31:26" pos:end="31:29">devs</name><index pos:start="31:30" pos:end="31:33">[<expr pos:start="31:31" pos:end="31:32"><name pos:start="31:31" pos:end="31:32">id</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><call pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:11">DPRINTF</name><argument_list pos:start="35:12" pos:end="35:39">(<argument pos:start="35:13" pos:end="35:30"><expr pos:start="35:13" pos:end="35:30"><literal type="string" pos:start="35:13" pos:end="35:30">"MSG out len=%d\n"</literal></expr></argument>, <argument pos:start="35:33" pos:end="35:38"><expr pos:start="35:33" pos:end="35:38"><name pos:start="35:33" pos:end="35:38"><name pos:start="35:33" pos:end="35:33">s</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:38">dbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="37:5" pos:end="231:5">while <condition pos:start="37:11" pos:end="37:18">(<expr pos:start="37:12" pos:end="37:17"><name pos:start="37:12" pos:end="37:17"><name pos:start="37:12" pos:end="37:12">s</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:17">dbc</name></name></expr>)</condition> <block pos:start="37:20" pos:end="231:5">{<block_content pos:start="39:9" pos:end="229:9">

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:11">msg</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:32"><name pos:start="39:15" pos:end="39:29">lsi_get_msgbyte</name><argument_list pos:start="39:30" pos:end="39:32">(<argument pos:start="39:31" pos:end="39:31"><expr pos:start="39:31" pos:end="39:31"><name pos:start="39:31" pos:end="39:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:15">sfbr</name></name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:21">msg</name></expr>;</expr_stmt>



        <switch pos:start="45:9" pos:end="229:9">switch <condition pos:start="45:16" pos:end="45:20">(<expr pos:start="45:17" pos:end="45:19"><name pos:start="45:17" pos:end="45:19">msg</name></expr>)</condition> <block pos:start="45:22" pos:end="229:9">{<block_content pos:start="47:9" pos:end="227:18">

        <case pos:start="47:9" pos:end="47:18">case <expr pos:start="47:14" pos:end="47:17"><literal type="number" pos:start="47:14" pos:end="47:17">0x04</literal></expr>:</case>

            <expr_stmt pos:start="49:13" pos:end="49:41"><expr pos:start="49:13" pos:end="49:40"><call pos:start="49:13" pos:end="49:40"><name pos:start="49:13" pos:end="49:19">DPRINTF</name><argument_list pos:start="49:20" pos:end="49:40">(<argument pos:start="49:21" pos:end="49:39"><expr pos:start="49:21" pos:end="49:39"><literal type="string" pos:start="49:21" pos:end="49:39">"MSG: Disconnect\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:30"><expr pos:start="51:13" pos:end="51:29"><call pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:26">lsi_disconnect</name><argument_list pos:start="51:27" pos:end="51:29">(<argument pos:start="51:28" pos:end="51:28"><expr pos:start="51:28" pos:end="51:28"><name pos:start="51:28" pos:end="51:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="53:13" pos:end="53:18">break;</break>

        <case pos:start="55:9" pos:end="55:18">case <expr pos:start="55:14" pos:end="55:17"><literal type="number" pos:start="55:14" pos:end="55:17">0x08</literal></expr>:</case>

            <expr_stmt pos:start="57:13" pos:end="57:43"><expr pos:start="57:13" pos:end="57:42"><call pos:start="57:13" pos:end="57:42"><name pos:start="57:13" pos:end="57:19">DPRINTF</name><argument_list pos:start="57:20" pos:end="57:42">(<argument pos:start="57:21" pos:end="57:41"><expr pos:start="57:21" pos:end="57:41"><literal type="string" pos:start="57:21" pos:end="57:41">"MSG: No Operation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:40"><expr pos:start="59:13" pos:end="59:39"><call pos:start="59:13" pos:end="59:39"><name pos:start="59:13" pos:end="59:25">lsi_set_phase</name><argument_list pos:start="59:26" pos:end="59:39">(<argument pos:start="59:27" pos:end="59:27"><expr pos:start="59:27" pos:end="59:27"><name pos:start="59:27" pos:end="59:27">s</name></expr></argument>, <argument pos:start="59:30" pos:end="59:38"><expr pos:start="59:30" pos:end="59:38"><name pos:start="59:30" pos:end="59:38">PHASE_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <case pos:start="63:9" pos:end="63:18">case <expr pos:start="63:14" pos:end="63:17"><literal type="number" pos:start="63:14" pos:end="63:17">0x01</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:37"><expr pos:start="65:13" pos:end="65:36"><name pos:start="65:13" pos:end="65:15">len</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:36"><name pos:start="65:19" pos:end="65:33">lsi_get_msgbyte</name><argument_list pos:start="65:34" pos:end="65:36">(<argument pos:start="65:35" pos:end="65:35"><expr pos:start="65:35" pos:end="65:35"><name pos:start="65:35" pos:end="65:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:37"><expr pos:start="67:13" pos:end="67:36"><name pos:start="67:13" pos:end="67:15">msg</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:36"><name pos:start="67:19" pos:end="67:33">lsi_get_msgbyte</name><argument_list pos:start="67:34" pos:end="67:36">(<argument pos:start="67:35" pos:end="67:35"><expr pos:start="67:35" pos:end="67:35"><name pos:start="67:35" pos:end="67:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:22"><expr pos:start="69:13" pos:end="69:21"><operator pos:start="69:13" pos:end="69:13">(</operator><name pos:start="69:14" pos:end="69:17">void</name><operator pos:start="69:18" pos:end="69:18">)</operator><name pos:start="69:19" pos:end="69:21">len</name></expr>;</expr_stmt> <comment type="block" pos:start="69:24" pos:end="69:65">/* avoid a warning about unused variable*/</comment>

            <expr_stmt pos:start="71:13" pos:end="71:66"><expr pos:start="71:13" pos:end="71:65"><call pos:start="71:13" pos:end="71:65"><name pos:start="71:13" pos:end="71:19">DPRINTF</name><argument_list pos:start="71:20" pos:end="71:65">(<argument pos:start="71:21" pos:end="71:54"><expr pos:start="71:21" pos:end="71:54"><literal type="string" pos:start="71:21" pos:end="71:54">"Extended message 0x%x (len %d)\n"</literal></expr></argument>, <argument pos:start="71:57" pos:end="71:59"><expr pos:start="71:57" pos:end="71:59"><name pos:start="71:57" pos:end="71:59">msg</name></expr></argument>, <argument pos:start="71:62" pos:end="71:64"><expr pos:start="71:62" pos:end="71:64"><name pos:start="71:62" pos:end="71:64">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="73:13" pos:end="95:13">switch <condition pos:start="73:20" pos:end="73:24">(<expr pos:start="73:21" pos:end="73:23"><name pos:start="73:21" pos:end="73:23">msg</name></expr>)</condition> <block pos:start="73:26" pos:end="95:13">{<block_content pos:start="75:13" pos:end="93:25">

            <case pos:start="75:13" pos:end="75:19">case <expr pos:start="75:18" pos:end="75:18"><literal type="number" pos:start="75:18" pos:end="75:18">1</literal></expr>:</case>

                <expr_stmt pos:start="77:17" pos:end="77:44"><expr pos:start="77:17" pos:end="77:43"><call pos:start="77:17" pos:end="77:43"><name pos:start="77:17" pos:end="77:23">DPRINTF</name><argument_list pos:start="77:24" pos:end="77:43">(<argument pos:start="77:25" pos:end="77:42"><expr pos:start="77:25" pos:end="77:42"><literal type="string" pos:start="77:25" pos:end="77:42">"SDTR (ignored)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:40"><expr pos:start="79:17" pos:end="79:39"><call pos:start="79:17" pos:end="79:39"><name pos:start="79:17" pos:end="79:33">lsi_skip_msgbytes</name><argument_list pos:start="79:34" pos:end="79:39">(<argument pos:start="79:35" pos:end="79:35"><expr pos:start="79:35" pos:end="79:35"><name pos:start="79:35" pos:end="79:35">s</name></expr></argument>, <argument pos:start="79:38" pos:end="79:38"><expr pos:start="79:38" pos:end="79:38"><literal type="number" pos:start="79:38" pos:end="79:38">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="81:17" pos:end="81:22">break;</break>

            <case pos:start="83:13" pos:end="83:19">case <expr pos:start="83:18" pos:end="83:18"><literal type="number" pos:start="83:18" pos:end="83:18">3</literal></expr>:</case>

                <expr_stmt pos:start="85:17" pos:end="85:44"><expr pos:start="85:17" pos:end="85:43"><call pos:start="85:17" pos:end="85:43"><name pos:start="85:17" pos:end="85:23">DPRINTF</name><argument_list pos:start="85:24" pos:end="85:43">(<argument pos:start="85:25" pos:end="85:42"><expr pos:start="85:25" pos:end="85:42"><literal type="string" pos:start="85:25" pos:end="85:42">"WDTR (ignored)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:40"><expr pos:start="87:17" pos:end="87:39"><call pos:start="87:17" pos:end="87:39"><name pos:start="87:17" pos:end="87:33">lsi_skip_msgbytes</name><argument_list pos:start="87:34" pos:end="87:39">(<argument pos:start="87:35" pos:end="87:35"><expr pos:start="87:35" pos:end="87:35"><name pos:start="87:35" pos:end="87:35">s</name></expr></argument>, <argument pos:start="87:38" pos:end="87:38"><expr pos:start="87:38" pos:end="87:38"><literal type="number" pos:start="87:38" pos:end="87:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="89:17" pos:end="89:22">break;</break>

            <default pos:start="91:13" pos:end="91:20">default:</default>

                <goto pos:start="93:17" pos:end="93:25">goto <name pos:start="93:22" pos:end="93:24">bad</name>;</goto>

            </block_content>}</block></switch>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:18">case <expr pos:start="99:14" pos:end="99:17"><literal type="number" pos:start="99:14" pos:end="99:17">0x20</literal></expr>:</case> <comment type="block" pos:start="99:20" pos:end="99:37">/* SIMPLE queue */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:64"><expr pos:start="101:13" pos:end="101:63"><name pos:start="101:13" pos:end="101:25"><name pos:start="101:13" pos:end="101:13">s</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:25">select_tag</name></name> <operator pos:start="101:27" pos:end="101:28">|=</operator> <call pos:start="101:30" pos:end="101:47"><name pos:start="101:30" pos:end="101:44">lsi_get_msgbyte</name><argument_list pos:start="101:45" pos:end="101:47">(<argument pos:start="101:46" pos:end="101:46"><expr pos:start="101:46" pos:end="101:46"><name pos:start="101:46" pos:end="101:46">s</name></expr></argument>)</argument_list></call> <operator pos:start="101:49" pos:end="101:49">|</operator> <name pos:start="101:51" pos:end="101:63">LSI_TAG_VALID</name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:69"><expr pos:start="103:13" pos:end="103:68"><call pos:start="103:13" pos:end="103:68"><name pos:start="103:13" pos:end="103:19">DPRINTF</name><argument_list pos:start="103:20" pos:end="103:68">(<argument pos:start="103:21" pos:end="103:45"><expr pos:start="103:21" pos:end="103:45"><literal type="string" pos:start="103:21" pos:end="103:45">"SIMPLE queue tag=0x%x\n"</literal></expr></argument>, <argument pos:start="103:48" pos:end="103:67"><expr pos:start="103:48" pos:end="103:67"><name pos:start="103:48" pos:end="103:60"><name pos:start="103:48" pos:end="103:48">s</name><operator pos:start="103:49" pos:end="103:50">-&gt;</operator><name pos:start="103:51" pos:end="103:60">select_tag</name></name> <operator pos:start="103:62" pos:end="103:62">&amp;</operator> <literal type="number" pos:start="103:64" pos:end="103:67">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        <case pos:start="107:9" pos:end="107:18">case <expr pos:start="107:14" pos:end="107:17"><literal type="number" pos:start="107:14" pos:end="107:17">0x21</literal></expr>:</case> <comment type="block" pos:start="107:20" pos:end="107:38">/* HEAD of queue */</comment>

            <expr_stmt pos:start="109:13" pos:end="109:49"><expr pos:start="109:13" pos:end="109:48"><call pos:start="109:13" pos:end="109:48"><name pos:start="109:13" pos:end="109:16">BADF</name><argument_list pos:start="109:17" pos:end="109:48">(<argument pos:start="109:18" pos:end="109:47"><expr pos:start="109:18" pos:end="109:47"><literal type="string" pos:start="109:18" pos:end="109:47">"HEAD queue not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:64"><expr pos:start="111:13" pos:end="111:63"><name pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:25">select_tag</name></name> <operator pos:start="111:27" pos:end="111:28">|=</operator> <call pos:start="111:30" pos:end="111:47"><name pos:start="111:30" pos:end="111:44">lsi_get_msgbyte</name><argument_list pos:start="111:45" pos:end="111:47">(<argument pos:start="111:46" pos:end="111:46"><expr pos:start="111:46" pos:end="111:46"><name pos:start="111:46" pos:end="111:46">s</name></expr></argument>)</argument_list></call> <operator pos:start="111:49" pos:end="111:49">|</operator> <name pos:start="111:51" pos:end="111:63">LSI_TAG_VALID</name></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        <case pos:start="115:9" pos:end="115:18">case <expr pos:start="115:14" pos:end="115:17"><literal type="number" pos:start="115:14" pos:end="115:17">0x22</literal></expr>:</case> <comment type="block" pos:start="115:20" pos:end="115:38">/* ORDERED queue */</comment>

            <expr_stmt pos:start="117:13" pos:end="117:52"><expr pos:start="117:13" pos:end="117:51"><call pos:start="117:13" pos:end="117:51"><name pos:start="117:13" pos:end="117:16">BADF</name><argument_list pos:start="117:17" pos:end="117:51">(<argument pos:start="117:18" pos:end="117:50"><expr pos:start="117:18" pos:end="117:50"><literal type="string" pos:start="117:18" pos:end="117:50">"ORDERED queue not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:64"><expr pos:start="119:13" pos:end="119:63"><name pos:start="119:13" pos:end="119:25"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:25">select_tag</name></name> <operator pos:start="119:27" pos:end="119:28">|=</operator> <call pos:start="119:30" pos:end="119:47"><name pos:start="119:30" pos:end="119:44">lsi_get_msgbyte</name><argument_list pos:start="119:45" pos:end="119:47">(<argument pos:start="119:46" pos:end="119:46"><expr pos:start="119:46" pos:end="119:46"><name pos:start="119:46" pos:end="119:46">s</name></expr></argument>)</argument_list></call> <operator pos:start="119:49" pos:end="119:49">|</operator> <name pos:start="119:51" pos:end="119:63">LSI_TAG_VALID</name></expr>;</expr_stmt>

            <break pos:start="121:13" pos:end="121:18">break;</break>

        <case pos:start="123:9" pos:end="123:18">case <expr pos:start="123:14" pos:end="123:17"><literal type="number" pos:start="123:14" pos:end="123:17">0x0d</literal></expr>:</case>

            <comment type="block" pos:start="125:13" pos:end="125:76">/* The ABORT TAG message clears the current I/O process only. */</comment>

            <expr_stmt pos:start="127:13" pos:end="127:62"><expr pos:start="127:13" pos:end="127:61"><call pos:start="127:13" pos:end="127:61"><name pos:start="127:13" pos:end="127:19">DPRINTF</name><argument_list pos:start="127:20" pos:end="127:61">(<argument pos:start="127:21" pos:end="127:47"><expr pos:start="127:21" pos:end="127:47"><literal type="string" pos:start="127:21" pos:end="127:47">"MSG: ABORT TAG tag=0x%x\n"</literal></expr></argument>, <argument pos:start="127:50" pos:end="127:60"><expr pos:start="127:50" pos:end="127:60"><name pos:start="127:50" pos:end="127:60">current_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:67"><expr pos:start="129:13" pos:end="129:66"><call pos:start="129:13" pos:end="129:66"><name pos:start="129:13" pos:end="129:40"><name pos:start="129:13" pos:end="129:23">current_dev</name><operator pos:start="129:24" pos:end="129:25">-&gt;</operator><name pos:start="129:26" pos:end="129:29">info</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:40">cancel_io</name></name><argument_list pos:start="129:41" pos:end="129:66">(<argument pos:start="129:42" pos:end="129:52"><expr pos:start="129:42" pos:end="129:52"><name pos:start="129:42" pos:end="129:52">current_dev</name></expr></argument>, <argument pos:start="129:55" pos:end="129:65"><expr pos:start="129:55" pos:end="129:65"><name pos:start="129:55" pos:end="129:65">current_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:30"><expr pos:start="131:13" pos:end="131:29"><call pos:start="131:13" pos:end="131:29"><name pos:start="131:13" pos:end="131:26">lsi_disconnect</name><argument_list pos:start="131:27" pos:end="131:29">(<argument pos:start="131:28" pos:end="131:28"><expr pos:start="131:28" pos:end="131:28"><name pos:start="131:28" pos:end="131:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        <case pos:start="135:9" pos:end="135:18">case <expr pos:start="135:14" pos:end="135:17"><literal type="number" pos:start="135:14" pos:end="135:17">0x06</literal></expr>:</case>

        <case pos:start="137:9" pos:end="137:18">case <expr pos:start="137:14" pos:end="137:17"><literal type="number" pos:start="137:14" pos:end="137:17">0x0e</literal></expr>:</case>

        <case pos:start="139:9" pos:end="139:18">case <expr pos:start="139:14" pos:end="139:17"><literal type="number" pos:start="139:14" pos:end="139:17">0x0c</literal></expr>:</case>

            <comment type="block" pos:start="141:13" pos:end="143:72">/* The ABORT message clears all I/O processes for the selecting

               initiator on the specified logical unit of the target. */</comment>

            <if_stmt pos:start="145:13" pos:end="149:13"><if pos:start="145:13" pos:end="149:13">if <condition pos:start="145:16" pos:end="145:28">(<expr pos:start="145:17" pos:end="145:27"><name pos:start="145:17" pos:end="145:19">msg</name> <operator pos:start="145:21" pos:end="145:22">==</operator> <literal type="number" pos:start="145:24" pos:end="145:27">0x06</literal></expr>)</condition> <block pos:start="145:30" pos:end="149:13">{<block_content pos:start="147:17" pos:end="147:62">

                <expr_stmt pos:start="147:17" pos:end="147:62"><expr pos:start="147:17" pos:end="147:61"><call pos:start="147:17" pos:end="147:61"><name pos:start="147:17" pos:end="147:23">DPRINTF</name><argument_list pos:start="147:24" pos:end="147:61">(<argument pos:start="147:25" pos:end="147:47"><expr pos:start="147:25" pos:end="147:47"><literal type="string" pos:start="147:25" pos:end="147:47">"MSG: ABORT tag=0x%x\n"</literal></expr></argument>, <argument pos:start="147:50" pos:end="147:60"><expr pos:start="147:50" pos:end="147:60"><name pos:start="147:50" pos:end="147:60">current_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="151:13" pos:end="153:73">/* The CLEAR QUEUE message clears all I/O processes for all

               initiators on the specified logical unit of the target. */</comment>

            <if_stmt pos:start="155:13" pos:end="159:13"><if pos:start="155:13" pos:end="159:13">if <condition pos:start="155:16" pos:end="155:28">(<expr pos:start="155:17" pos:end="155:27"><name pos:start="155:17" pos:end="155:19">msg</name> <operator pos:start="155:21" pos:end="155:22">==</operator> <literal type="number" pos:start="155:24" pos:end="155:27">0x0e</literal></expr>)</condition> <block pos:start="155:30" pos:end="159:13">{<block_content pos:start="157:17" pos:end="157:68">

                <expr_stmt pos:start="157:17" pos:end="157:68"><expr pos:start="157:17" pos:end="157:67"><call pos:start="157:17" pos:end="157:67"><name pos:start="157:17" pos:end="157:23">DPRINTF</name><argument_list pos:start="157:24" pos:end="157:67">(<argument pos:start="157:25" pos:end="157:53"><expr pos:start="157:25" pos:end="157:53"><literal type="string" pos:start="157:25" pos:end="157:53">"MSG: CLEAR QUEUE tag=0x%x\n"</literal></expr></argument>, <argument pos:start="157:56" pos:end="157:66"><expr pos:start="157:56" pos:end="157:66"><name pos:start="157:56" pos:end="157:66">current_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="161:13" pos:end="163:64">/* The BUS DEVICE RESET message clears all I/O processes for all

               initiators on all logical units of the target. */</comment>

            <if_stmt pos:start="165:13" pos:end="169:13"><if pos:start="165:13" pos:end="169:13">if <condition pos:start="165:16" pos:end="165:28">(<expr pos:start="165:17" pos:end="165:27"><name pos:start="165:17" pos:end="165:19">msg</name> <operator pos:start="165:21" pos:end="165:22">==</operator> <literal type="number" pos:start="165:24" pos:end="165:27">0x0c</literal></expr>)</condition> <block pos:start="165:30" pos:end="169:13">{<block_content pos:start="167:17" pos:end="167:73">

                <expr_stmt pos:start="167:17" pos:end="167:73"><expr pos:start="167:17" pos:end="167:72"><call pos:start="167:17" pos:end="167:72"><name pos:start="167:17" pos:end="167:23">DPRINTF</name><argument_list pos:start="167:24" pos:end="167:72">(<argument pos:start="167:25" pos:end="167:58"><expr pos:start="167:25" pos:end="167:58"><literal type="string" pos:start="167:25" pos:end="167:58">"MSG: BUS DEVICE RESET tag=0x%x\n"</literal></expr></argument>, <argument pos:start="167:61" pos:end="167:71"><expr pos:start="167:61" pos:end="167:71"><name pos:start="167:61" pos:end="167:71">current_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="173:13" pos:end="173:47">/* clear the current I/O process */</comment>

            <expr_stmt pos:start="175:13" pos:end="175:67"><expr pos:start="175:13" pos:end="175:66"><call pos:start="175:13" pos:end="175:66"><name pos:start="175:13" pos:end="175:40"><name pos:start="175:13" pos:end="175:23">current_dev</name><operator pos:start="175:24" pos:end="175:25">-&gt;</operator><name pos:start="175:26" pos:end="175:29">info</name><operator pos:start="175:30" pos:end="175:31">-&gt;</operator><name pos:start="175:32" pos:end="175:40">cancel_io</name></name><argument_list pos:start="175:41" pos:end="175:66">(<argument pos:start="175:42" pos:end="175:52"><expr pos:start="175:42" pos:end="175:52"><name pos:start="175:42" pos:end="175:52">current_dev</name></expr></argument>, <argument pos:start="175:55" pos:end="175:65"><expr pos:start="175:55" pos:end="175:65"><name pos:start="175:55" pos:end="175:65">current_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="179:13" pos:end="191:50">/* As the current implemented devices scsi_disk and scsi_generic

               only support one LUN, we don't need to keep track of LUNs.

               Clearing I/O processes for other initiators could be possible

               for scsi_generic by sending a SG_SCSI_RESET to the /dev/sgX

               device, but this is currently not implemented (and seems not

               to be really necessary). So let's simply clear all queued

               commands for the current device: */</comment>

            <expr_stmt pos:start="193:13" pos:end="193:42"><expr pos:start="193:13" pos:end="193:41"><name pos:start="193:13" pos:end="193:14">id</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <name pos:start="193:18" pos:end="193:28">current_tag</name> <operator pos:start="193:30" pos:end="193:30">&amp;</operator> <literal type="number" pos:start="193:32" pos:end="193:41">0x0000ff00</literal></expr>;</expr_stmt>

            <macro pos:start="195:13" pos:end="195:59"><name pos:start="195:13" pos:end="195:31">QTAILQ_FOREACH_SAFE</name><argument_list pos:start="195:32" pos:end="195:59">(<argument pos:start="195:33" pos:end="195:33">p</argument>, <argument pos:start="195:36" pos:end="195:44">&amp;s-&gt;queue</argument>, <argument pos:start="195:47" pos:end="195:50">next</argument>, <argument pos:start="195:53" pos:end="195:58">p_next</argument>)</argument_list></macro> <block pos:start="195:61" pos:end="205:13">{<block_content pos:start="197:17" pos:end="203:17">

                <if_stmt pos:start="197:17" pos:end="203:17"><if pos:start="197:17" pos:end="203:17">if <condition pos:start="197:20" pos:end="197:48">(<expr pos:start="197:21" pos:end="197:47"><operator pos:start="197:21" pos:end="197:21">(</operator><name pos:start="197:22" pos:end="197:27"><name pos:start="197:22" pos:end="197:22">p</name><operator pos:start="197:23" pos:end="197:24">-&gt;</operator><name pos:start="197:25" pos:end="197:27">tag</name></name> <operator pos:start="197:29" pos:end="197:29">&amp;</operator> <literal type="number" pos:start="197:31" pos:end="197:40">0x0000ff00</literal><operator pos:start="197:41" pos:end="197:41">)</operator> <operator pos:start="197:43" pos:end="197:44">==</operator> <name pos:start="197:46" pos:end="197:47">id</name></expr>)</condition> <block pos:start="197:50" pos:end="203:17">{<block_content pos:start="199:21" pos:end="201:54">

                    <expr_stmt pos:start="199:21" pos:end="199:70"><expr pos:start="199:21" pos:end="199:69"><call pos:start="199:21" pos:end="199:69"><name pos:start="199:21" pos:end="199:48"><name pos:start="199:21" pos:end="199:31">current_dev</name><operator pos:start="199:32" pos:end="199:33">-&gt;</operator><name pos:start="199:34" pos:end="199:37">info</name><operator pos:start="199:38" pos:end="199:39">-&gt;</operator><name pos:start="199:40" pos:end="199:48">cancel_io</name></name><argument_list pos:start="199:49" pos:end="199:69">(<argument pos:start="199:50" pos:end="199:60"><expr pos:start="199:50" pos:end="199:60"><name pos:start="199:50" pos:end="199:60">current_dev</name></expr></argument>, <argument pos:start="199:63" pos:end="199:68"><expr pos:start="199:63" pos:end="199:68"><name pos:start="199:63" pos:end="199:68"><name pos:start="199:63" pos:end="199:63">p</name><operator pos:start="199:64" pos:end="199:65">-&gt;</operator><name pos:start="199:66" pos:end="199:68">tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="201:21" pos:end="201:54"><expr pos:start="201:21" pos:end="201:53"><call pos:start="201:21" pos:end="201:53"><name pos:start="201:21" pos:end="201:33">QTAILQ_REMOVE</name><argument_list pos:start="201:34" pos:end="201:53">(<argument pos:start="201:35" pos:end="201:43"><expr pos:start="201:35" pos:end="201:43"><operator pos:start="201:35" pos:end="201:35">&amp;</operator><name pos:start="201:36" pos:end="201:43"><name pos:start="201:36" pos:end="201:36">s</name><operator pos:start="201:37" pos:end="201:38">-&gt;</operator><name pos:start="201:39" pos:end="201:43">queue</name></name></expr></argument>, <argument pos:start="201:46" pos:end="201:46"><expr pos:start="201:46" pos:end="201:46"><name pos:start="201:46" pos:end="201:46">p</name></expr></argument>, <argument pos:start="201:49" pos:end="201:52"><expr pos:start="201:49" pos:end="201:52"><name pos:start="201:49" pos:end="201:52">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>



            <expr_stmt pos:start="209:13" pos:end="209:30"><expr pos:start="209:13" pos:end="209:29"><call pos:start="209:13" pos:end="209:29"><name pos:start="209:13" pos:end="209:26">lsi_disconnect</name><argument_list pos:start="209:27" pos:end="209:29">(<argument pos:start="209:28" pos:end="209:28"><expr pos:start="209:28" pos:end="209:28"><name pos:start="209:28" pos:end="209:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="211:13" pos:end="211:18">break;</break>

        <default pos:start="213:9" pos:end="213:16">default:</default>

            <if_stmt pos:start="215:13" pos:end="219:13"><if pos:start="215:13" pos:end="219:13">if <condition pos:start="215:16" pos:end="215:34">(<expr pos:start="215:17" pos:end="215:33"><operator pos:start="215:17" pos:end="215:17">(</operator><name pos:start="215:18" pos:end="215:20">msg</name> <operator pos:start="215:22" pos:end="215:22">&amp;</operator> <literal type="number" pos:start="215:24" pos:end="215:27">0x80</literal><operator pos:start="215:28" pos:end="215:28">)</operator> <operator pos:start="215:30" pos:end="215:31">==</operator> <literal type="number" pos:start="215:33" pos:end="215:33">0</literal></expr>)</condition> <block pos:start="215:36" pos:end="219:13">{<block_content pos:start="217:17" pos:end="217:25">

                <goto pos:start="217:17" pos:end="217:25">goto <name pos:start="217:22" pos:end="217:24">bad</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:37"><expr pos:start="221:13" pos:end="221:36"><name pos:start="221:13" pos:end="221:26"><name pos:start="221:13" pos:end="221:13">s</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:26">current_lun</name></name> <operator pos:start="221:28" pos:end="221:28">=</operator> <name pos:start="221:30" pos:end="221:32">msg</name> <operator pos:start="221:34" pos:end="221:34">&amp;</operator> <literal type="number" pos:start="221:36" pos:end="221:36">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:55"><expr pos:start="223:13" pos:end="223:54"><call pos:start="223:13" pos:end="223:54"><name pos:start="223:13" pos:end="223:19">DPRINTF</name><argument_list pos:start="223:20" pos:end="223:54">(<argument pos:start="223:21" pos:end="223:37"><expr pos:start="223:21" pos:end="223:37"><literal type="string" pos:start="223:21" pos:end="223:37">"Select LUN %d\n"</literal></expr></argument>, <argument pos:start="223:40" pos:end="223:53"><expr pos:start="223:40" pos:end="223:53"><name pos:start="223:40" pos:end="223:53"><name pos:start="223:40" pos:end="223:40">s</name><operator pos:start="223:41" pos:end="223:42">-&gt;</operator><name pos:start="223:43" pos:end="223:53">current_lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:40"><expr pos:start="225:13" pos:end="225:39"><call pos:start="225:13" pos:end="225:39"><name pos:start="225:13" pos:end="225:25">lsi_set_phase</name><argument_list pos:start="225:26" pos:end="225:39">(<argument pos:start="225:27" pos:end="225:27"><expr pos:start="225:27" pos:end="225:27"><name pos:start="225:27" pos:end="225:27">s</name></expr></argument>, <argument pos:start="225:30" pos:end="225:38"><expr pos:start="225:30" pos:end="225:38"><name pos:start="225:30" pos:end="225:38">PHASE_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="227:13" pos:end="227:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>

    <return pos:start="233:5" pos:end="233:11">return;</return>

<label pos:start="235:1" pos:end="235:4"><name pos:start="235:1" pos:end="235:3">bad</name>:</label>

    <expr_stmt pos:start="237:5" pos:end="237:48"><expr pos:start="237:5" pos:end="237:47"><call pos:start="237:5" pos:end="237:47"><name pos:start="237:5" pos:end="237:8">BADF</name><argument_list pos:start="237:9" pos:end="237:47">(<argument pos:start="237:10" pos:end="237:41"><expr pos:start="237:10" pos:end="237:41"><literal type="string" pos:start="237:10" pos:end="237:41">"Unimplemented message 0x%02x\n"</literal></expr></argument>, <argument pos:start="237:44" pos:end="237:46"><expr pos:start="237:44" pos:end="237:46"><name pos:start="237:44" pos:end="237:46">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:31"><expr pos:start="239:5" pos:end="239:30"><call pos:start="239:5" pos:end="239:30"><name pos:start="239:5" pos:end="239:17">lsi_set_phase</name><argument_list pos:start="239:18" pos:end="239:30">(<argument pos:start="239:19" pos:end="239:19"><expr pos:start="239:19" pos:end="239:19"><name pos:start="239:19" pos:end="239:19">s</name></expr></argument>, <argument pos:start="239:22" pos:end="239:29"><expr pos:start="239:22" pos:end="239:29"><name pos:start="239:22" pos:end="239:29">PHASE_MI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:27"><expr pos:start="241:5" pos:end="241:26"><call pos:start="241:5" pos:end="241:26"><name pos:start="241:5" pos:end="241:20">lsi_add_msg_byte</name><argument_list pos:start="241:21" pos:end="241:26">(<argument pos:start="241:22" pos:end="241:22"><expr pos:start="241:22" pos:end="241:22"><name pos:start="241:22" pos:end="241:22">s</name></expr></argument>, <argument pos:start="241:25" pos:end="241:25"><expr pos:start="241:25" pos:end="241:25"><literal type="number" pos:start="241:25" pos:end="241:25">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="241:29" pos:end="241:48">/* MESSAGE REJECT */</comment>

    <expr_stmt pos:start="243:5" pos:end="243:22"><expr pos:start="243:5" pos:end="243:21"><name pos:start="243:5" pos:end="243:17"><name pos:start="243:5" pos:end="243:5">s</name><operator pos:start="243:6" pos:end="243:7">-&gt;</operator><name pos:start="243:8" pos:end="243:17">msg_action</name></name> <operator pos:start="243:19" pos:end="243:19">=</operator> <literal type="number" pos:start="243:21" pos:end="243:21">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
