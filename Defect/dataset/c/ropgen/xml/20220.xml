<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20220.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">xen_pt_status_reg_init</name><parameter_list pos:start="1:34" pos:end="5:49">(<parameter pos:start="1:35" pos:end="1:59"><decl pos:start="1:35" pos:end="1:59"><type pos:start="1:35" pos:end="1:59"><name pos:start="1:35" pos:end="1:56">XenPCIPassthroughState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">s</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:51"><decl pos:start="3:35" pos:end="3:51"><type pos:start="3:35" pos:end="3:51"><name pos:start="3:35" pos:end="3:46">XenPTRegInfo</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:51">reg</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:73"><decl pos:start="3:54" pos:end="3:73"><type pos:start="3:54" pos:end="3:73"><name pos:start="3:54" pos:end="3:61">uint32_t</name></type> <name pos:start="3:63" pos:end="3:73">real_offset</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:48"><decl pos:start="5:35" pos:end="5:48"><type pos:start="5:35" pos:end="5:48"><name pos:start="5:35" pos:end="5:42">uint32_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:48">data</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="69:1">{<block_content pos:start="9:5" pos:end="67:13">

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">XenPTRegGroup</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:32">reg_grp_entry</name> <init pos:start="9:34" pos:end="9:39">= <expr pos:start="9:36" pos:end="9:39"><name pos:start="9:36" pos:end="9:39">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">XenPTReg</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:23">reg_entry</name> <init pos:start="11:25" pos:end="11:30">= <expr pos:start="11:27" pos:end="11:30"><name pos:start="11:27" pos:end="11:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">reg_field</name> <init pos:start="13:24" pos:end="13:26">= <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:36">/* find Header register group */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:64"><expr pos:start="19:5" pos:end="19:63"><name pos:start="19:5" pos:end="19:17">reg_grp_entry</name> <operator pos:start="19:19" pos:end="19:19">=</operator> <call pos:start="19:21" pos:end="19:63"><name pos:start="19:21" pos:end="19:39">xen_pt_find_reg_grp</name><argument_list pos:start="19:40" pos:end="19:63">(<argument pos:start="19:41" pos:end="19:41"><expr pos:start="19:41" pos:end="19:41"><name pos:start="19:41" pos:end="19:41">s</name></expr></argument>, <argument pos:start="19:44" pos:end="19:62"><expr pos:start="19:44" pos:end="19:62"><name pos:start="19:44" pos:end="19:62">PCI_CAPABILITY_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="61:5"><if pos:start="21:5" pos:end="53:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:21">reg_grp_entry</name></expr>)</condition> <block pos:start="21:24" pos:end="53:5">{<block_content pos:start="25:9" pos:end="51:9">

        <comment type="block" pos:start="23:9" pos:end="23:48">/* find Capabilities Pointer register */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:72"><expr pos:start="25:9" pos:end="25:71"><name pos:start="25:9" pos:end="25:17">reg_entry</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <call pos:start="25:21" pos:end="25:71"><name pos:start="25:21" pos:end="25:35">xen_pt_find_reg</name><argument_list pos:start="25:36" pos:end="25:71">(<argument pos:start="25:37" pos:end="25:49"><expr pos:start="25:37" pos:end="25:49"><name pos:start="25:37" pos:end="25:49">reg_grp_entry</name></expr></argument>, <argument pos:start="25:52" pos:end="25:70"><expr pos:start="25:52" pos:end="25:70"><name pos:start="25:52" pos:end="25:70">PCI_CAPABILITY_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="51:9"><if pos:start="27:9" pos:end="41:9">if <condition pos:start="27:12" pos:end="27:22">(<expr pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:21">reg_entry</name></expr>)</condition> <block pos:start="27:24" pos:end="41:9">{<block_content pos:start="31:13" pos:end="39:13">

            <comment type="block" pos:start="29:13" pos:end="29:53">/* check Capabilities Pointer register */</comment>

            <if_stmt pos:start="31:13" pos:end="39:13"><if pos:start="31:13" pos:end="35:13">if <condition pos:start="31:16" pos:end="31:32">(<expr pos:start="31:17" pos:end="31:31"><name pos:start="31:17" pos:end="31:31"><name pos:start="31:17" pos:end="31:25">reg_entry</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:31">data</name></name></expr>)</condition> <block pos:start="31:34" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:49">

                <expr_stmt pos:start="33:17" pos:end="33:49"><expr pos:start="33:17" pos:end="33:48"><name pos:start="33:17" pos:end="33:25">reg_field</name> <operator pos:start="33:27" pos:end="33:28">|=</operator> <name pos:start="33:30" pos:end="33:48">PCI_STATUS_CAP_LIST</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="35:15" pos:end="39:13">else <block pos:start="35:20" pos:end="39:13">{<block_content pos:start="37:17" pos:end="37:50">

                <expr_stmt pos:start="37:17" pos:end="37:50"><expr pos:start="37:17" pos:end="37:49"><name pos:start="37:17" pos:end="37:25">reg_field</name> <operator pos:start="37:27" pos:end="37:28">&amp;=</operator> <operator pos:start="37:30" pos:end="37:30">~</operator><name pos:start="37:31" pos:end="37:49">PCI_STATUS_CAP_LIST</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="41:11" pos:end="51:9">else <block pos:start="41:16" pos:end="51:9">{<block_content pos:start="43:13" pos:end="49:22">

            <expr_stmt pos:start="43:13" pos:end="47:58"><expr pos:start="43:13" pos:end="47:57"><call pos:start="43:13" pos:end="47:57"><name pos:start="43:13" pos:end="43:36">xen_shutdown_fatal_error</name><argument_list pos:start="43:37" pos:end="47:57">(<argument pos:start="43:38" pos:end="47:46"><expr pos:start="43:38" pos:end="47:46"><literal type="string" pos:start="43:38" pos:end="43:78">"Internal error: Couldn't find XenPTReg*"</literal>

                                     <literal type="string" pos:start="45:38" pos:end="45:74">" for Capabilities Pointer register."</literal>

                                     <literal type="string" pos:start="47:38" pos:end="47:46">" (%s)\n"</literal></expr></argument>, <argument pos:start="47:49" pos:end="47:56"><expr pos:start="47:49" pos:end="47:56"><name pos:start="47:49" pos:end="47:56">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:22">return <expr pos:start="49:20" pos:end="49:21"><operator pos:start="49:20" pos:end="49:20">-</operator><literal type="number" pos:start="49:21" pos:end="49:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="61:5">else <block pos:start="53:12" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:18">

        <expr_stmt pos:start="55:9" pos:end="57:66"><expr pos:start="55:9" pos:end="57:65"><call pos:start="55:9" pos:end="57:65"><name pos:start="55:9" pos:end="55:32">xen_shutdown_fatal_error</name><argument_list pos:start="55:33" pos:end="57:65">(<argument pos:start="55:34" pos:end="57:54"><expr pos:start="55:34" pos:end="57:54"><literal type="string" pos:start="55:34" pos:end="55:78">"Internal error: Couldn't find XenPTRegGroup"</literal>

                                 <literal type="string" pos:start="57:34" pos:end="57:54">" for Header. (%s)\n"</literal></expr></argument>, <argument pos:start="57:57" pos:end="57:64"><expr pos:start="57:57" pos:end="57:64"><name pos:start="57:57" pos:end="57:64">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:18">return <expr pos:start="59:16" pos:end="59:17"><operator pos:start="59:16" pos:end="59:16">-</operator><literal type="number" pos:start="59:17" pos:end="59:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:22"><expr pos:start="65:5" pos:end="65:21"><operator pos:start="65:5" pos:end="65:5">*</operator><name pos:start="65:6" pos:end="65:9">data</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <name pos:start="65:13" pos:end="65:21">reg_field</name></expr>;</expr_stmt>

    <return pos:start="67:5" pos:end="67:13">return <expr pos:start="67:12" pos:end="67:12"><literal type="number" pos:start="67:12" pos:end="67:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
