<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16284.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:23">init</name><parameter_list pos:start="1:24" pos:end="1:45">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:41"><name pos:start="1:25" pos:end="1:39">AVFilterContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="5:5" pos:end="139:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">FormatContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:32">= <expr pos:start="5:24" pos:end="5:32"><name pos:start="5:24" pos:end="5:32"><name pos:start="5:24" pos:end="5:26">ctx</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:32">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">cur</name></decl>, <decl pos:start="7:16" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">sep</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">nb_formats</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:27">/* count the formats */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:7">cur</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <name pos:start="19:11" pos:end="19:21"><name pos:start="19:11" pos:end="19:11">s</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:21">pix_fmts</name></name></expr>;</expr_stmt>

    <while pos:start="21:5" pos:end="29:5">while <condition pos:start="21:11" pos:end="21:36">(<expr pos:start="21:12" pos:end="21:35"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:15">cur</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:34"><name pos:start="21:19" pos:end="21:24">strchr</name><argument_list pos:start="21:25" pos:end="21:34">(<argument pos:start="21:26" pos:end="21:28"><expr pos:start="21:26" pos:end="21:28"><name pos:start="21:26" pos:end="21:28">cur</name></expr></argument>, <argument pos:start="21:31" pos:end="21:33"><expr pos:start="21:31" pos:end="21:33"><literal type="char" pos:start="21:31" pos:end="21:33">'|'</literal></expr></argument>)</argument_list></call><operator pos:start="21:35" pos:end="21:35">)</operator></expr>)</condition> <block pos:start="21:38" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:18">

        <expr_stmt pos:start="23:9" pos:end="23:21"><expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:18">nb_formats</name><operator pos:start="23:19" pos:end="23:20">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:18"><if pos:start="25:9" pos:end="27:18">if <condition pos:start="25:12" pos:end="25:17">(<expr pos:start="25:13" pos:end="25:16"><operator pos:start="25:13" pos:end="25:13">*</operator><name pos:start="25:14" pos:end="25:16">cur</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:18"><block_content pos:start="27:13" pos:end="27:18">

            <expr_stmt pos:start="27:13" pos:end="27:18"><expr pos:start="27:13" pos:end="27:17"><name pos:start="27:13" pos:end="27:15">cur</name><operator pos:start="27:16" pos:end="27:17">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="33:5" pos:end="33:70"><expr pos:start="33:5" pos:end="33:69"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:14">formats</name></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:69"><name pos:start="33:18" pos:end="33:32">av_malloc_array</name><argument_list pos:start="33:33" pos:end="33:69">(<argument pos:start="33:34" pos:end="33:47"><expr pos:start="33:34" pos:end="33:47"><name pos:start="33:34" pos:end="33:43">nb_formats</name> <operator pos:start="33:45" pos:end="33:45">+</operator> <literal type="number" pos:start="33:47" pos:end="33:47">1</literal></expr></argument>, <argument pos:start="33:50" pos:end="33:68"><expr pos:start="33:50" pos:end="33:68"><sizeof pos:start="33:50" pos:end="33:68">sizeof<argument_list pos:start="33:56" pos:end="33:68">(<argument pos:start="33:57" pos:end="33:67"><expr pos:start="33:57" pos:end="33:67"><operator pos:start="33:57" pos:end="33:57">*</operator><name pos:start="33:58" pos:end="33:67"><name pos:start="33:58" pos:end="33:58">s</name><operator pos:start="33:59" pos:end="33:60">-&gt;</operator><name pos:start="33:61" pos:end="33:67">formats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:31"><if pos:start="35:5" pos:end="37:31">if <condition pos:start="35:8" pos:end="35:20">(<expr pos:start="35:9" pos:end="35:19"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:19"><name pos:start="35:10" pos:end="35:10">s</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:19">formats</name></name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:31"><block_content pos:start="37:9" pos:end="37:31">

        <return pos:start="37:9" pos:end="37:31">return <expr pos:start="37:16" pos:end="37:30"><call pos:start="37:16" pos:end="37:30"><name pos:start="37:16" pos:end="37:22">AVERROR</name><argument_list pos:start="37:23" pos:end="37:30">(<argument pos:start="37:24" pos:end="37:29"><expr pos:start="37:24" pos:end="37:29"><name pos:start="37:24" pos:end="37:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="43:31"><if pos:start="41:5" pos:end="43:31">if <condition pos:start="41:8" pos:end="41:21">(<expr pos:start="41:9" pos:end="41:20"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:20"><name pos:start="41:10" pos:end="41:10">s</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:20">pix_fmts</name></name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:31"><block_content pos:start="43:9" pos:end="43:31">

        <return pos:start="43:9" pos:end="43:31">return <expr pos:start="43:16" pos:end="43:30"><call pos:start="43:16" pos:end="43:30"><name pos:start="43:16" pos:end="43:22">AVERROR</name><argument_list pos:start="43:23" pos:end="43:30">(<argument pos:start="43:24" pos:end="43:29"><expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:35">/* parse the list of formats */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:7">cur</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <name pos:start="49:11" pos:end="49:21"><name pos:start="49:11" pos:end="49:11">s</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:21">pix_fmts</name></name></expr>;</expr_stmt>

    <for pos:start="51:5" pos:end="69:5">for <control pos:start="51:9" pos:end="51:36">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">i</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:31"><expr pos:start="51:17" pos:end="51:30"><name pos:start="51:17" pos:end="51:17">i</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <name pos:start="51:21" pos:end="51:30">nb_formats</name></expr>;</condition> <incr pos:start="51:33" pos:end="51:35"><expr pos:start="51:33" pos:end="51:35"><name pos:start="51:33" pos:end="51:33">i</name><operator pos:start="51:34" pos:end="51:35">++</operator></expr></incr>)</control> <block pos:start="51:38" pos:end="69:5">{<block_content pos:start="53:9" pos:end="67:18">

        <expr_stmt pos:start="53:9" pos:end="53:31"><expr pos:start="53:9" pos:end="53:30"><name pos:start="53:9" pos:end="53:11">sep</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:30"><name pos:start="53:15" pos:end="53:20">strchr</name><argument_list pos:start="53:21" pos:end="53:30">(<argument pos:start="53:22" pos:end="53:24"><expr pos:start="53:22" pos:end="53:24"><name pos:start="53:22" pos:end="53:24">cur</name></expr></argument>, <argument pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><literal type="char" pos:start="53:27" pos:end="53:29">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="57:23"><if pos:start="55:9" pos:end="57:23">if <condition pos:start="55:12" pos:end="55:16">(<expr pos:start="55:13" pos:end="55:15"><name pos:start="55:13" pos:end="55:15">sep</name></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:23"><block_content pos:start="57:13" pos:end="57:23">

            <expr_stmt pos:start="57:13" pos:end="57:23"><expr pos:start="57:13" pos:end="57:22"><operator pos:start="57:13" pos:end="57:13">*</operator><name pos:start="57:14" pos:end="57:16">sep</name><operator pos:start="57:17" pos:end="57:18">++</operator> <operator pos:start="57:20" pos:end="57:20">=</operator> <literal type="number" pos:start="57:22" pos:end="57:22">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="61:9" pos:end="63:23"><if pos:start="61:9" pos:end="63:23">if <condition pos:start="61:12" pos:end="61:72">(<expr pos:start="61:13" pos:end="61:71"><operator pos:start="61:13" pos:end="61:13">(</operator><name pos:start="61:14" pos:end="61:16">ret</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <call pos:start="61:20" pos:end="61:66"><name pos:start="61:20" pos:end="61:40">ff_parse_pixel_format</name><argument_list pos:start="61:41" pos:end="61:66">(<argument pos:start="61:42" pos:end="61:55"><expr pos:start="61:42" pos:end="61:55"><operator pos:start="61:42" pos:end="61:42">&amp;</operator><name pos:start="61:43" pos:end="61:55"><name pos:start="61:43" pos:end="61:43">s</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:52">formats</name><index pos:start="61:53" pos:end="61:55">[<expr pos:start="61:54" pos:end="61:54"><name pos:start="61:54" pos:end="61:54">i</name></expr>]</index></name></expr></argument>, <argument pos:start="61:58" pos:end="61:60"><expr pos:start="61:58" pos:end="61:60"><name pos:start="61:58" pos:end="61:60">cur</name></expr></argument>, <argument pos:start="61:63" pos:end="61:65"><expr pos:start="61:63" pos:end="61:65"><name pos:start="61:63" pos:end="61:65">ctx</name></expr></argument>)</argument_list></call><operator pos:start="61:67" pos:end="61:67">)</operator> <operator pos:start="61:69" pos:end="61:69">&lt;</operator> <literal type="number" pos:start="61:71" pos:end="61:71">0</literal></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:23"><block_content pos:start="63:13" pos:end="63:23">

            <return pos:start="63:13" pos:end="63:23">return <expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:11">cur</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <name pos:start="67:15" pos:end="67:17">sep</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="71:5" pos:end="71:45"><expr pos:start="71:5" pos:end="71:44"><name pos:start="71:5" pos:end="71:26"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:14">formats</name><index pos:start="71:15" pos:end="71:26">[<expr pos:start="71:16" pos:end="71:25"><name pos:start="71:16" pos:end="71:25">nb_formats</name></expr>]</index></name> <operator pos:start="71:28" pos:end="71:28">=</operator> <name pos:start="71:30" pos:end="71:44">AV_PIX_FMT_NONE</name></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="135:5"><if pos:start="75:5" pos:end="135:5">if <condition pos:start="75:8" pos:end="75:47">(<expr pos:start="75:9" pos:end="75:46"><operator pos:start="75:9" pos:end="75:9">!</operator><call pos:start="75:10" pos:end="75:46"><name pos:start="75:10" pos:end="75:15">strcmp</name><argument_list pos:start="75:16" pos:end="75:46">(<argument pos:start="75:17" pos:end="75:33"><expr pos:start="75:17" pos:end="75:33"><name pos:start="75:17" pos:end="75:33"><name pos:start="75:17" pos:end="75:19">ctx</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:27">filter</name><operator pos:start="75:28" pos:end="75:29">-&gt;</operator><name pos:start="75:30" pos:end="75:33">name</name></name></expr></argument>, <argument pos:start="75:36" pos:end="75:45"><expr pos:start="75:36" pos:end="75:45"><literal type="string" pos:start="75:36" pos:end="75:45">"noformat"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:49" pos:end="135:5">{<block_content pos:start="77:9" pos:end="133:37">

        <decl_stmt pos:start="77:9" pos:end="77:46"><decl pos:start="77:9" pos:end="77:45"><type pos:start="77:9" pos:end="77:34"><specifier pos:start="77:9" pos:end="77:13">const</specifier> <name pos:start="77:15" pos:end="77:32">AVPixFmtDescriptor</name> <modifier pos:start="77:34" pos:end="77:34">*</modifier></type><name pos:start="77:35" pos:end="77:38">desc</name> <init pos:start="77:40" pos:end="77:45">= <expr pos:start="77:42" pos:end="77:45"><name pos:start="77:42" pos:end="77:45">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:44"><decl pos:start="79:9" pos:end="79:43"><type pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:12">enum</name> <name pos:start="79:14" pos:end="79:26">AVPixelFormat</name></name> <modifier pos:start="79:28" pos:end="79:28">*</modifier></type><name pos:start="79:29" pos:end="79:43">formats_allowed</name></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:56"><decl pos:start="81:9" pos:end="81:31"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:27">nb_formats_lavu</name> <init pos:start="81:29" pos:end="81:31">= <expr pos:start="81:31" pos:end="81:31"><literal type="number" pos:start="81:31" pos:end="81:31">0</literal></expr></init></decl>, <decl pos:start="81:34" pos:end="81:55"><type ref="prev" pos:start="81:9" pos:end="81:11"/><name pos:start="81:34" pos:end="81:51">nb_formats_allowed</name> <init pos:start="81:53" pos:end="81:55">= <expr pos:start="81:55" pos:end="81:55"><literal type="number" pos:start="81:55" pos:end="81:55">0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="85:9" pos:end="85:45">/* count the formats known to lavu */</comment>

        <while pos:start="87:9" pos:end="89:30">while <condition pos:start="87:15" pos:end="87:51">(<expr pos:start="87:16" pos:end="87:50"><operator pos:start="87:16" pos:end="87:16">(</operator><name pos:start="87:17" pos:end="87:20">desc</name> <operator pos:start="87:22" pos:end="87:22">=</operator> <call pos:start="87:24" pos:end="87:49"><name pos:start="87:24" pos:end="87:43">av_pix_fmt_desc_next</name><argument_list pos:start="87:44" pos:end="87:49">(<argument pos:start="87:45" pos:end="87:48"><expr pos:start="87:45" pos:end="87:48"><name pos:start="87:45" pos:end="87:48">desc</name></expr></argument>)</argument_list></call><operator pos:start="87:50" pos:end="87:50">)</operator></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:30"><block_content pos:start="89:13" pos:end="89:30">

            <expr_stmt pos:start="89:13" pos:end="89:30"><expr pos:start="89:13" pos:end="89:29"><name pos:start="89:13" pos:end="89:27">nb_formats_lavu</name><operator pos:start="89:28" pos:end="89:29">++</operator></expr>;</expr_stmt></block_content></block></while>



        <expr_stmt pos:start="93:9" pos:end="93:89"><expr pos:start="93:9" pos:end="93:88"><name pos:start="93:9" pos:end="93:23">formats_allowed</name> <operator pos:start="93:25" pos:end="93:25">=</operator> <call pos:start="93:27" pos:end="93:88"><name pos:start="93:27" pos:end="93:41">av_malloc_array</name><argument_list pos:start="93:42" pos:end="93:88">(<argument pos:start="93:43" pos:end="93:61"><expr pos:start="93:43" pos:end="93:61"><name pos:start="93:43" pos:end="93:57">nb_formats_lavu</name> <operator pos:start="93:59" pos:end="93:59">+</operator> <literal type="number" pos:start="93:61" pos:end="93:61">1</literal></expr></argument>, <argument pos:start="93:64" pos:end="93:87"><expr pos:start="93:64" pos:end="93:87"><sizeof pos:start="93:64" pos:end="93:87">sizeof<argument_list pos:start="93:70" pos:end="93:87">(<argument pos:start="93:71" pos:end="93:86"><expr pos:start="93:71" pos:end="93:86"><operator pos:start="93:71" pos:end="93:71">*</operator><name pos:start="93:72" pos:end="93:86">formats_allowed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="97:35"><if pos:start="95:9" pos:end="97:35">if <condition pos:start="95:12" pos:end="95:29">(<expr pos:start="95:13" pos:end="95:28"><operator pos:start="95:13" pos:end="95:13">!</operator><name pos:start="95:14" pos:end="95:28">formats_allowed</name></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:35"><block_content pos:start="97:13" pos:end="97:35">

            <return pos:start="97:13" pos:end="97:35">return <expr pos:start="97:20" pos:end="97:34"><call pos:start="97:20" pos:end="97:34"><name pos:start="97:20" pos:end="97:26">AVERROR</name><argument_list pos:start="97:27" pos:end="97:34">(<argument pos:start="97:28" pos:end="97:33"><expr pos:start="97:28" pos:end="97:33"><name pos:start="97:28" pos:end="97:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="101:9" pos:end="103:31">/* for each format known to lavu, check if it's in the list of

         * forbidden formats */</comment>

        <while pos:start="105:9" pos:end="127:9">while <condition pos:start="105:15" pos:end="105:51">(<expr pos:start="105:16" pos:end="105:50"><operator pos:start="105:16" pos:end="105:16">(</operator><name pos:start="105:17" pos:end="105:20">desc</name> <operator pos:start="105:22" pos:end="105:22">=</operator> <call pos:start="105:24" pos:end="105:49"><name pos:start="105:24" pos:end="105:43">av_pix_fmt_desc_next</name><argument_list pos:start="105:44" pos:end="105:49">(<argument pos:start="105:45" pos:end="105:48"><expr pos:start="105:45" pos:end="105:48"><name pos:start="105:45" pos:end="105:48">desc</name></expr></argument>)</argument_list></call><operator pos:start="105:50" pos:end="105:50">)</operator></expr>)</condition> <block pos:start="105:53" pos:end="127:9">{<block_content pos:start="107:13" pos:end="125:60">

            <decl_stmt pos:start="107:13" pos:end="107:70"><decl pos:start="107:13" pos:end="107:69"><type pos:start="107:13" pos:end="107:30"><name pos:start="107:13" pos:end="107:30"><name pos:start="107:13" pos:end="107:16">enum</name> <name pos:start="107:18" pos:end="107:30">AVPixelFormat</name></name></type> <name pos:start="107:32" pos:end="107:38">pix_fmt</name> <init pos:start="107:40" pos:end="107:69">= <expr pos:start="107:42" pos:end="107:69"><call pos:start="107:42" pos:end="107:69"><name pos:start="107:42" pos:end="107:63">av_pix_fmt_desc_get_id</name><argument_list pos:start="107:64" pos:end="107:69">(<argument pos:start="107:65" pos:end="107:68"><expr pos:start="107:65" pos:end="107:68"><name pos:start="107:65" pos:end="107:68">desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <for pos:start="111:13" pos:end="117:13">for <control pos:start="111:17" pos:end="111:44">(<init pos:start="111:18" pos:end="111:23"><expr pos:start="111:18" pos:end="111:22"><name pos:start="111:18" pos:end="111:18">i</name> <operator pos:start="111:20" pos:end="111:20">=</operator> <literal type="number" pos:start="111:22" pos:end="111:22">0</literal></expr>;</init> <condition pos:start="111:25" pos:end="111:39"><expr pos:start="111:25" pos:end="111:38"><name pos:start="111:25" pos:end="111:25">i</name> <operator pos:start="111:27" pos:end="111:27">&lt;</operator> <name pos:start="111:29" pos:end="111:38">nb_formats</name></expr>;</condition> <incr pos:start="111:41" pos:end="111:43"><expr pos:start="111:41" pos:end="111:43"><name pos:start="111:41" pos:end="111:41">i</name><operator pos:start="111:42" pos:end="111:43">++</operator></expr></incr>)</control> <block pos:start="111:46" pos:end="117:13">{<block_content pos:start="113:17" pos:end="115:26">

                <if_stmt pos:start="113:17" pos:end="115:26"><if pos:start="113:17" pos:end="115:26">if <condition pos:start="113:20" pos:end="113:45">(<expr pos:start="113:21" pos:end="113:44"><name pos:start="113:21" pos:end="113:33"><name pos:start="113:21" pos:end="113:21">s</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:30">formats</name><index pos:start="113:31" pos:end="113:33">[<expr pos:start="113:32" pos:end="113:32"><name pos:start="113:32" pos:end="113:32">i</name></expr>]</index></name> <operator pos:start="113:35" pos:end="113:36">==</operator> <name pos:start="113:38" pos:end="113:44">pix_fmt</name></expr>)</condition><block type="pseudo" pos:start="115:21" pos:end="115:26"><block_content pos:start="115:21" pos:end="115:26">

                    <break pos:start="115:21" pos:end="115:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="119:13" pos:end="121:25"><if pos:start="119:13" pos:end="121:25">if <condition pos:start="119:16" pos:end="119:31">(<expr pos:start="119:17" pos:end="119:30"><name pos:start="119:17" pos:end="119:17">i</name> <operator pos:start="119:19" pos:end="119:19">&lt;</operator> <name pos:start="119:21" pos:end="119:30">nb_formats</name></expr>)</condition><block type="pseudo" pos:start="121:17" pos:end="121:25"><block_content pos:start="121:17" pos:end="121:25">

                <continue pos:start="121:17" pos:end="121:25">continue;</continue></block_content></block></if></if_stmt>



            <expr_stmt pos:start="125:13" pos:end="125:60"><expr pos:start="125:13" pos:end="125:59"><name pos:start="125:13" pos:end="125:49"><name pos:start="125:13" pos:end="125:27">formats_allowed</name><index pos:start="125:28" pos:end="125:49">[<expr pos:start="125:29" pos:end="125:48"><name pos:start="125:29" pos:end="125:46">nb_formats_allowed</name><operator pos:start="125:47" pos:end="125:48">++</operator></expr>]</index></name> <operator pos:start="125:51" pos:end="125:51">=</operator> <name pos:start="125:53" pos:end="125:59">pix_fmt</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="129:9" pos:end="129:62"><expr pos:start="129:9" pos:end="129:61"><name pos:start="129:9" pos:end="129:43"><name pos:start="129:9" pos:end="129:23">formats_allowed</name><index pos:start="129:24" pos:end="129:43">[<expr pos:start="129:25" pos:end="129:42"><name pos:start="129:25" pos:end="129:42">nb_formats_allowed</name></expr>]</index></name> <operator pos:start="129:45" pos:end="129:45">=</operator> <name pos:start="129:47" pos:end="129:61">AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:30"><expr pos:start="131:9" pos:end="131:29"><call pos:start="131:9" pos:end="131:29"><name pos:start="131:9" pos:end="131:16">av_freep</name><argument_list pos:start="131:17" pos:end="131:29">(<argument pos:start="131:18" pos:end="131:28"><expr pos:start="131:18" pos:end="131:28"><operator pos:start="131:18" pos:end="131:18">&amp;</operator><name pos:start="131:19" pos:end="131:28"><name pos:start="131:19" pos:end="131:19">s</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:28">formats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:37"><expr pos:start="133:9" pos:end="133:36"><name pos:start="133:9" pos:end="133:18"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:18">formats</name></name> <operator pos:start="133:20" pos:end="133:20">=</operator> <name pos:start="133:22" pos:end="133:36">formats_allowed</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="139:5" pos:end="139:13">return <expr pos:start="139:12" pos:end="139:12"><literal type="number" pos:start="139:12" pos:end="139:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
