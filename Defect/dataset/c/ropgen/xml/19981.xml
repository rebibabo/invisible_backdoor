<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19981.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:24"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">create_header64</name><parameter_list pos:start="1:28" pos:end="1:55">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:37">DumpState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:47">Error</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier><modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">errp</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="77:24">{<block_content pos:start="3:5" pos:end="77:24">
    <decl_stmt pos:start="3:5" pos:end="3:32"><decl pos:start="3:5" pos:end="3:31"><type pos:start="3:5" pos:end="3:22"><name pos:start="3:5" pos:end="3:20">DiskDumpHeader64</name> <modifier pos:start="3:22" pos:end="3:22">*</modifier></type><name pos:start="3:23" pos:end="3:24">dh</name> <init pos:start="3:26" pos:end="3:31">= <expr pos:start="3:28" pos:end="3:31"><name pos:start="3:28" pos:end="3:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:32"><decl pos:start="4:5" pos:end="4:31"><type pos:start="4:5" pos:end="4:22"><name pos:start="4:5" pos:end="4:20">KdumpSubHeader64</name> <modifier pos:start="4:22" pos:end="4:22">*</modifier></type><name pos:start="4:23" pos:end="4:24">kh</name> <init pos:start="4:26" pos:end="4:31">= <expr pos:start="4:28" pos:end="4:31"><name pos:start="4:28" pos:end="4:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">size_t</name></type> <name pos:start="5:12" pos:end="5:15">size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:24"><decl pos:start="6:5" pos:end="6:23"><type pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:12">uint32_t</name></type> <name pos:start="6:14" pos:end="6:23">block_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:25">sub_hdr_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:27"><decl pos:start="8:5" pos:end="8:26"><type pos:start="8:5" pos:end="8:12"><name pos:start="8:5" pos:end="8:12">uint32_t</name></type> <name pos:start="8:14" pos:end="8:26">bitmap_blocks</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:19">status</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:25"><decl pos:start="10:5" pos:end="10:24"><type pos:start="10:5" pos:end="10:12"><name pos:start="10:5" pos:end="10:12">uint64_t</name></type> <name pos:start="10:14" pos:end="10:24">offset_note</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="12:5" pos:end="12:76">/* write common header, the version of kdump-compressed format is 6th */</comment>
    <expr_stmt pos:start="13:5" pos:end="13:36"><expr pos:start="13:5" pos:end="13:35"><name pos:start="13:5" pos:end="13:8">size</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <sizeof pos:start="13:12" pos:end="13:35">sizeof<argument_list pos:start="13:18" pos:end="13:35">(<argument pos:start="13:19" pos:end="13:34"><expr pos:start="13:19" pos:end="13:34"><name pos:start="13:19" pos:end="13:34">DiskDumpHeader64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:25"><expr pos:start="14:5" pos:end="14:24"><name pos:start="14:5" pos:end="14:6">dh</name> <operator pos:start="14:8" pos:end="14:8">=</operator> <call pos:start="14:10" pos:end="14:24"><name pos:start="14:10" pos:end="14:18">g_malloc0</name><argument_list pos:start="14:19" pos:end="14:24">(<argument pos:start="14:20" pos:end="14:23"><expr pos:start="14:20" pos:end="14:23"><name pos:start="14:20" pos:end="14:23">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:69"><expr pos:start="15:5" pos:end="15:68"><call pos:start="15:5" pos:end="15:68"><name pos:start="15:5" pos:end="15:11">strncpy</name><argument_list pos:start="15:12" pos:end="15:68">(<argument pos:start="15:13" pos:end="15:25"><expr pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:14">dh</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:25">signature</name></name></expr></argument>, <argument pos:start="15:28" pos:end="15:42"><expr pos:start="15:28" pos:end="15:42"><name pos:start="15:28" pos:end="15:42">KDUMP_SIGNATURE</name></expr></argument>, <argument pos:start="15:45" pos:end="15:67"><expr pos:start="15:45" pos:end="15:67"><call pos:start="15:45" pos:end="15:67"><name pos:start="15:45" pos:end="15:50">strlen</name><argument_list pos:start="15:51" pos:end="15:67">(<argument pos:start="15:52" pos:end="15:66"><expr pos:start="15:52" pos:end="15:66"><name pos:start="15:52" pos:end="15:66">KDUMP_SIGNATURE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:45"><expr pos:start="16:5" pos:end="16:44"><name pos:start="16:5" pos:end="16:22"><name pos:start="16:5" pos:end="16:6">dh</name><operator pos:start="16:7" pos:end="16:8">-&gt;</operator><name pos:start="16:9" pos:end="16:22">header_version</name></name> <operator pos:start="16:24" pos:end="16:24">=</operator> <call pos:start="16:26" pos:end="16:44"><name pos:start="16:26" pos:end="16:38">cpu_to_dump32</name><argument_list pos:start="16:39" pos:end="16:44">(<argument pos:start="16:40" pos:end="16:40"><expr pos:start="16:40" pos:end="16:40"><name pos:start="16:40" pos:end="16:40">s</name></expr></argument>, <argument pos:start="16:43" pos:end="16:43"><expr pos:start="16:43" pos:end="16:43"><literal type="number" pos:start="16:43" pos:end="16:43">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:40"><expr pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:14">block_size</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <name pos:start="17:18" pos:end="17:39"><name pos:start="17:18" pos:end="17:18">s</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:29">dump_info</name><operator pos:start="17:30" pos:end="17:30">.</operator><name pos:start="17:31" pos:end="17:39">page_size</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:50"><expr pos:start="18:5" pos:end="18:49"><name pos:start="18:5" pos:end="18:18"><name pos:start="18:5" pos:end="18:6">dh</name><operator pos:start="18:7" pos:end="18:8">-&gt;</operator><name pos:start="18:9" pos:end="18:18">block_size</name></name> <operator pos:start="18:20" pos:end="18:20">=</operator> <call pos:start="18:22" pos:end="18:49"><name pos:start="18:22" pos:end="18:34">cpu_to_dump32</name><argument_list pos:start="18:35" pos:end="18:49">(<argument pos:start="18:36" pos:end="18:36"><expr pos:start="18:36" pos:end="18:36"><name pos:start="18:36" pos:end="18:36">s</name></expr></argument>, <argument pos:start="18:39" pos:end="18:48"><expr pos:start="18:39" pos:end="18:48"><name pos:start="18:39" pos:end="18:48">block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:66"><expr pos:start="19:5" pos:end="19:65"><name pos:start="19:5" pos:end="19:16">sub_hdr_size</name> <operator pos:start="19:18" pos:end="19:18">=</operator> <sizeof pos:start="19:20" pos:end="19:50">sizeof<argument_list pos:start="19:26" pos:end="19:50">(<argument pos:start="19:27" pos:end="19:49"><expr pos:start="19:27" pos:end="19:49">struct <name pos:start="19:34" pos:end="19:49">KdumpSubHeader64</name></expr></argument>)</argument_list></sizeof> <operator pos:start="19:52" pos:end="19:52">+</operator> <name pos:start="19:54" pos:end="19:65"><name pos:start="19:54" pos:end="19:54">s</name><operator pos:start="19:55" pos:end="19:56">-&gt;</operator><name pos:start="19:57" pos:end="19:65">note_size</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:58"><expr pos:start="20:5" pos:end="20:57"><name pos:start="20:5" pos:end="20:16">sub_hdr_size</name> <operator pos:start="20:18" pos:end="20:18">=</operator> <call pos:start="20:20" pos:end="20:57"><name pos:start="20:20" pos:end="20:31">DIV_ROUND_UP</name><argument_list pos:start="20:32" pos:end="20:57">(<argument pos:start="20:33" pos:end="20:44"><expr pos:start="20:33" pos:end="20:44"><name pos:start="20:33" pos:end="20:44">sub_hdr_size</name></expr></argument>, <argument pos:start="20:47" pos:end="20:56"><expr pos:start="20:47" pos:end="20:56"><name pos:start="20:47" pos:end="20:56">block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:54"><expr pos:start="21:5" pos:end="21:53"><name pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:6">dh</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:20">sub_hdr_size</name></name> <operator pos:start="21:22" pos:end="21:22">=</operator> <call pos:start="21:24" pos:end="21:53"><name pos:start="21:24" pos:end="21:36">cpu_to_dump32</name><argument_list pos:start="21:37" pos:end="21:53">(<argument pos:start="21:38" pos:end="21:38"><expr pos:start="21:38" pos:end="21:38"><name pos:start="21:38" pos:end="21:38">s</name></expr></argument>, <argument pos:start="21:41" pos:end="21:52"><expr pos:start="21:41" pos:end="21:52"><name pos:start="21:41" pos:end="21:52">sub_hdr_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="22:5" pos:end="22:74">/* dh-&gt;max_mapnr may be truncated, full 64bit is in kh.max_mapnr_64 */</comment>
    <expr_stmt pos:start="23:5" pos:end="23:66"><expr pos:start="23:5" pos:end="23:65"><name pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:6">dh</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:17">max_mapnr</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <call pos:start="23:21" pos:end="23:65"><name pos:start="23:21" pos:end="23:33">cpu_to_dump32</name><argument_list pos:start="23:34" pos:end="23:65">(<argument pos:start="23:35" pos:end="23:35"><expr pos:start="23:35" pos:end="23:35"><name pos:start="23:35" pos:end="23:35">s</name></expr></argument>, <argument pos:start="23:38" pos:end="23:64"><expr pos:start="23:38" pos:end="23:64"><call pos:start="23:38" pos:end="23:64"><name pos:start="23:38" pos:end="23:40">MIN</name><argument_list pos:start="23:41" pos:end="23:64">(<argument pos:start="23:42" pos:end="23:53"><expr pos:start="23:42" pos:end="23:53"><name pos:start="23:42" pos:end="23:53"><name pos:start="23:42" pos:end="23:42">s</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:53">max_mapnr</name></name></expr></argument>, <argument pos:start="23:56" pos:end="23:63"><expr pos:start="23:56" pos:end="23:63"><name pos:start="23:56" pos:end="23:63">UINT_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:47"><expr pos:start="24:5" pos:end="24:46"><name pos:start="24:5" pos:end="24:15"><name pos:start="24:5" pos:end="24:6">dh</name><operator pos:start="24:7" pos:end="24:8">-&gt;</operator><name pos:start="24:9" pos:end="24:15">nr_cpus</name></name> <operator pos:start="24:17" pos:end="24:17">=</operator> <call pos:start="24:19" pos:end="24:46"><name pos:start="24:19" pos:end="24:31">cpu_to_dump32</name><argument_list pos:start="24:32" pos:end="24:46">(<argument pos:start="24:33" pos:end="24:33"><expr pos:start="24:33" pos:end="24:33"><name pos:start="24:33" pos:end="24:33">s</name></expr></argument>, <argument pos:start="24:36" pos:end="24:45"><expr pos:start="24:36" pos:end="24:45"><name pos:start="24:36" pos:end="24:45"><name pos:start="24:36" pos:end="24:36">s</name><operator pos:start="24:37" pos:end="24:38">-&gt;</operator><name pos:start="24:39" pos:end="24:45">nr_cpus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:69"><expr pos:start="25:5" pos:end="25:68"><name pos:start="25:5" pos:end="25:17">bitmap_blocks</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <call pos:start="25:21" pos:end="25:64"><name pos:start="25:21" pos:end="25:32">DIV_ROUND_UP</name><argument_list pos:start="25:33" pos:end="25:64">(<argument pos:start="25:34" pos:end="25:51"><expr pos:start="25:34" pos:end="25:51"><name pos:start="25:34" pos:end="25:51"><name pos:start="25:34" pos:end="25:34">s</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:51">len_dump_bitmap</name></name></expr></argument>, <argument pos:start="25:54" pos:end="25:63"><expr pos:start="25:54" pos:end="25:63"><name pos:start="25:54" pos:end="25:63">block_size</name></expr></argument>)</argument_list></call> <operator pos:start="25:66" pos:end="25:66">*</operator> <literal type="number" pos:start="25:68" pos:end="25:68">2</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:56"><expr pos:start="26:5" pos:end="26:55"><name pos:start="26:5" pos:end="26:21"><name pos:start="26:5" pos:end="26:6">dh</name><operator pos:start="26:7" pos:end="26:8">-&gt;</operator><name pos:start="26:9" pos:end="26:21">bitmap_blocks</name></name> <operator pos:start="26:23" pos:end="26:23">=</operator> <call pos:start="26:25" pos:end="26:55"><name pos:start="26:25" pos:end="26:37">cpu_to_dump32</name><argument_list pos:start="26:38" pos:end="26:55">(<argument pos:start="26:39" pos:end="26:39"><expr pos:start="26:39" pos:end="26:39"><name pos:start="26:39" pos:end="26:39">s</name></expr></argument>, <argument pos:start="26:42" pos:end="26:54"><expr pos:start="26:42" pos:end="26:54"><name pos:start="26:42" pos:end="26:54">bitmap_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:81"><expr pos:start="27:5" pos:end="27:80"><call pos:start="27:5" pos:end="27:80"><name pos:start="27:5" pos:end="27:11">strncpy</name><argument_list pos:start="27:12" pos:end="27:80">(<argument pos:start="27:13" pos:end="27:31"><expr pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:14">dh</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:23">utsname</name><operator pos:start="27:24" pos:end="27:24">.</operator><name pos:start="27:25" pos:end="27:31">machine</name></name></expr></argument>, <argument pos:start="27:34" pos:end="27:50"><expr pos:start="27:34" pos:end="27:50"><name pos:start="27:34" pos:end="27:50">ELF_MACHINE_UNAME</name></expr></argument>, <argument pos:start="27:53" pos:end="27:79"><expr pos:start="27:53" pos:end="27:79"><sizeof pos:start="27:53" pos:end="27:79">sizeof<argument_list pos:start="27:59" pos:end="27:79">(<argument pos:start="27:60" pos:end="27:78"><expr pos:start="27:60" pos:end="27:78"><name pos:start="27:60" pos:end="27:78"><name pos:start="27:60" pos:end="27:61">dh</name><operator pos:start="27:62" pos:end="27:63">-&gt;</operator><name pos:start="27:64" pos:end="27:70">utsname</name><operator pos:start="27:71" pos:end="27:71">.</operator><name pos:start="27:72" pos:end="27:78">machine</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="28:5" pos:end="77:24"><if pos:start="28:5" pos:end="77:24">if <condition pos:start="28:8" pos:end="28:51">(<expr pos:start="28:9" pos:end="28:50"><name pos:start="28:9" pos:end="28:24"><name pos:start="28:9" pos:end="28:9">s</name><operator pos:start="28:10" pos:end="28:11">-&gt;</operator><name pos:start="28:12" pos:end="28:24">flag_compress</name></name> <operator pos:start="28:26" pos:end="28:26">&amp;</operator> <name pos:start="28:28" pos:end="28:50">DUMP_DH_COMPRESSED_ZLIB</name></expr>)</condition> <block pos:start="28:53" pos:end="77:24">{<block_content pos:start="29:9" pos:end="77:24">
        <expr_stmt pos:start="29:9" pos:end="31:0"><expr pos:start="29:9" pos:end="29:41"><name pos:start="29:9" pos:end="29:14">status</name> <operator pos:start="29:16" pos:end="29:17">|=</operator> <name pos:start="29:19" pos:end="29:41">DUMP_DH_COMPRESSED_ZLIB</name></expr>;</expr_stmt>
<cpp:ifdef pos:start="30:1" pos:end="30:17">#<cpp:directive pos:start="30:2" pos:end="30:6">ifdef</cpp:directive> <name pos:start="30:8" pos:end="30:17">CONFIG_LZO</name></cpp:ifdef>
    <if_stmt pos:start="31:5" pos:end="77:24"><if pos:start="31:5" pos:end="77:24">if <condition pos:start="31:8" pos:end="31:50">(<expr pos:start="31:9" pos:end="31:49"><name pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:24">flag_compress</name></name> <operator pos:start="31:26" pos:end="31:26">&amp;</operator> <name pos:start="31:28" pos:end="31:49">DUMP_DH_COMPRESSED_LZO</name></expr>)</condition> <block pos:start="31:52" pos:end="77:24">{<block_content pos:start="32:9" pos:end="77:24">
        <expr_stmt pos:start="32:9" pos:end="35:0"><expr pos:start="32:9" pos:end="32:40"><name pos:start="32:9" pos:end="32:14">status</name> <operator pos:start="32:16" pos:end="32:17">|=</operator> <name pos:start="32:19" pos:end="32:40">DUMP_DH_COMPRESSED_LZO</name></expr>;</expr_stmt>
<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="34:1" pos:end="34:20">#<cpp:directive pos:start="34:2" pos:end="34:6">ifdef</cpp:directive> <name pos:start="34:8" pos:end="34:20">CONFIG_SNAPPY</name></cpp:ifdef>
    <if_stmt pos:start="35:5" pos:end="77:24"><if pos:start="35:5" pos:end="77:24">if <condition pos:start="35:8" pos:end="35:53">(<expr pos:start="35:9" pos:end="35:52"><name pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:24">flag_compress</name></name> <operator pos:start="35:26" pos:end="35:26">&amp;</operator> <name pos:start="35:28" pos:end="35:52">DUMP_DH_COMPRESSED_SNAPPY</name></expr>)</condition> <block pos:start="35:55" pos:end="77:24">{<block_content pos:start="36:9" pos:end="77:24">
        <expr_stmt pos:start="36:9" pos:end="38:0"><expr pos:start="36:9" pos:end="36:43"><name pos:start="36:9" pos:end="36:14">status</name> <operator pos:start="36:16" pos:end="36:17">|=</operator> <name pos:start="36:19" pos:end="36:43">DUMP_DH_COMPRESSED_SNAPPY</name></expr>;</expr_stmt>
<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="38:5" pos:end="38:42"><expr pos:start="38:5" pos:end="38:41"><name pos:start="38:5" pos:end="38:14"><name pos:start="38:5" pos:end="38:6">dh</name><operator pos:start="38:7" pos:end="38:8">-&gt;</operator><name pos:start="38:9" pos:end="38:14">status</name></name> <operator pos:start="38:16" pos:end="38:16">=</operator> <call pos:start="38:18" pos:end="38:41"><name pos:start="38:18" pos:end="38:30">cpu_to_dump32</name><argument_list pos:start="38:31" pos:end="38:41">(<argument pos:start="38:32" pos:end="38:32"><expr pos:start="38:32" pos:end="38:32"><name pos:start="38:32" pos:end="38:32">s</name></expr></argument>, <argument pos:start="38:35" pos:end="38:40"><expr pos:start="38:35" pos:end="38:40"><name pos:start="38:35" pos:end="38:40">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="39:5" pos:end="77:24"><if pos:start="39:5" pos:end="77:24">if <condition pos:start="39:8" pos:end="39:45">(<expr pos:start="39:9" pos:end="39:44"><call pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:20">write_buffer</name><argument_list pos:start="39:21" pos:end="39:40">(<argument pos:start="39:22" pos:end="39:26"><expr pos:start="39:22" pos:end="39:26"><name pos:start="39:22" pos:end="39:26"><name pos:start="39:22" pos:end="39:22">s</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:26">fd</name></name></expr></argument>, <argument pos:start="39:29" pos:end="39:29"><expr pos:start="39:29" pos:end="39:29"><literal type="number" pos:start="39:29" pos:end="39:29">0</literal></expr></argument>, <argument pos:start="39:32" pos:end="39:33"><expr pos:start="39:32" pos:end="39:33"><name pos:start="39:32" pos:end="39:33">dh</name></expr></argument>, <argument pos:start="39:36" pos:end="39:39"><expr pos:start="39:36" pos:end="39:39"><name pos:start="39:36" pos:end="39:39">size</name></expr></argument>)</argument_list></call> <operator pos:start="39:42" pos:end="39:42">&lt;</operator> <literal type="number" pos:start="39:44" pos:end="39:44">0</literal></expr>)</condition> <block pos:start="39:47" pos:end="77:24">{<block_content pos:start="40:9" pos:end="77:24">
        <expr_stmt pos:start="40:9" pos:end="40:67"><expr pos:start="40:9" pos:end="40:66"><call pos:start="40:9" pos:end="40:66"><name pos:start="40:9" pos:end="40:18">error_setg</name><argument_list pos:start="40:19" pos:end="40:66">(<argument pos:start="40:20" pos:end="40:23"><expr pos:start="40:20" pos:end="40:23"><name pos:start="40:20" pos:end="40:23">errp</name></expr></argument>, <argument pos:start="40:26" pos:end="40:65"><expr pos:start="40:26" pos:end="40:65"><literal type="string" pos:start="40:26" pos:end="40:65">"dump: failed to write disk dump header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>
    <comment type="block" pos:start="42:5" pos:end="42:26">/* write sub header */</comment>
    <expr_stmt pos:start="43:5" pos:end="43:36"><expr pos:start="43:5" pos:end="43:35"><name pos:start="43:5" pos:end="43:8">size</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <sizeof pos:start="43:12" pos:end="43:35">sizeof<argument_list pos:start="43:18" pos:end="43:35">(<argument pos:start="43:19" pos:end="43:34"><expr pos:start="43:19" pos:end="43:34"><name pos:start="43:19" pos:end="43:34">KdumpSubHeader64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="44:5" pos:end="44:25"><expr pos:start="44:5" pos:end="44:24"><name pos:start="44:5" pos:end="44:6">kh</name> <operator pos:start="44:8" pos:end="44:8">=</operator> <call pos:start="44:10" pos:end="44:24"><name pos:start="44:10" pos:end="44:18">g_malloc0</name><argument_list pos:start="44:19" pos:end="44:24">(<argument pos:start="44:20" pos:end="44:23"><expr pos:start="44:20" pos:end="44:23"><name pos:start="44:20" pos:end="44:23">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="45:5" pos:end="45:28">/* 64bit max_mapnr_64 */</comment>
    <expr_stmt pos:start="46:5" pos:end="46:54"><expr pos:start="46:5" pos:end="46:53"><name pos:start="46:5" pos:end="46:20"><name pos:start="46:5" pos:end="46:6">kh</name><operator pos:start="46:7" pos:end="46:8">-&gt;</operator><name pos:start="46:9" pos:end="46:20">max_mapnr_64</name></name> <operator pos:start="46:22" pos:end="46:22">=</operator> <call pos:start="46:24" pos:end="46:53"><name pos:start="46:24" pos:end="46:36">cpu_to_dump64</name><argument_list pos:start="46:37" pos:end="46:53">(<argument pos:start="46:38" pos:end="46:38"><expr pos:start="46:38" pos:end="46:38"><name pos:start="46:38" pos:end="46:38">s</name></expr></argument>, <argument pos:start="46:41" pos:end="46:52"><expr pos:start="46:41" pos:end="46:52"><name pos:start="46:41" pos:end="46:52"><name pos:start="46:41" pos:end="46:41">s</name><operator pos:start="46:42" pos:end="46:43">-&gt;</operator><name pos:start="46:44" pos:end="46:52">max_mapnr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:61"><expr pos:start="47:5" pos:end="47:60"><name pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:6">kh</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:17">phys_base</name></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:60"><name pos:start="47:21" pos:end="47:33">cpu_to_dump64</name><argument_list pos:start="47:34" pos:end="47:60">(<argument pos:start="47:35" pos:end="47:35"><expr pos:start="47:35" pos:end="47:35"><name pos:start="47:35" pos:end="47:35">s</name></expr></argument>, <argument pos:start="47:38" pos:end="47:59"><expr pos:start="47:38" pos:end="47:59"><name pos:start="47:38" pos:end="47:59"><name pos:start="47:38" pos:end="47:38">s</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:49">dump_info</name><operator pos:start="47:50" pos:end="47:50">.</operator><name pos:start="47:51" pos:end="47:59">phys_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:50"><expr pos:start="48:5" pos:end="48:49"><name pos:start="48:5" pos:end="48:18"><name pos:start="48:5" pos:end="48:6">kh</name><operator pos:start="48:7" pos:end="48:8">-&gt;</operator><name pos:start="48:9" pos:end="48:18">dump_level</name></name> <operator pos:start="48:20" pos:end="48:20">=</operator> <call pos:start="48:22" pos:end="48:49"><name pos:start="48:22" pos:end="48:34">cpu_to_dump32</name><argument_list pos:start="48:35" pos:end="48:49">(<argument pos:start="48:36" pos:end="48:36"><expr pos:start="48:36" pos:end="48:36"><name pos:start="48:36" pos:end="48:36">s</name></expr></argument>, <argument pos:start="48:39" pos:end="48:48"><expr pos:start="48:39" pos:end="48:48"><name pos:start="48:39" pos:end="48:48">DUMP_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="49:5" pos:end="49:61"><expr pos:start="49:5" pos:end="49:60"><name pos:start="49:5" pos:end="49:15">offset_note</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:40">DISKDUMP_HEADER_BLOCKS</name> <operator pos:start="49:42" pos:end="49:42">*</operator> <name pos:start="49:44" pos:end="49:53">block_size</name> <operator pos:start="49:55" pos:end="49:55">+</operator> <name pos:start="49:57" pos:end="49:60">size</name></expr>;</expr_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:52"><expr pos:start="50:5" pos:end="50:51"><name pos:start="50:5" pos:end="50:19"><name pos:start="50:5" pos:end="50:6">kh</name><operator pos:start="50:7" pos:end="50:8">-&gt;</operator><name pos:start="50:9" pos:end="50:19">offset_note</name></name> <operator pos:start="50:21" pos:end="50:21">=</operator> <call pos:start="50:23" pos:end="50:51"><name pos:start="50:23" pos:end="50:35">cpu_to_dump64</name><argument_list pos:start="50:36" pos:end="50:51">(<argument pos:start="50:37" pos:end="50:37"><expr pos:start="50:37" pos:end="50:37"><name pos:start="50:37" pos:end="50:37">s</name></expr></argument>, <argument pos:start="50:40" pos:end="50:50"><expr pos:start="50:40" pos:end="50:50"><name pos:start="50:40" pos:end="50:50">offset_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="51:5" pos:end="51:51"><expr pos:start="51:5" pos:end="51:50"><name pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:6">kh</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:17">note_size</name></name> <operator pos:start="51:19" pos:end="51:19">=</operator> <call pos:start="51:21" pos:end="51:50"><name pos:start="51:21" pos:end="51:33">cpu_to_dump64</name><argument_list pos:start="51:34" pos:end="51:50">(<argument pos:start="51:35" pos:end="51:35"><expr pos:start="51:35" pos:end="51:35"><name pos:start="51:35" pos:end="51:35">s</name></expr></argument>, <argument pos:start="51:38" pos:end="51:49"><expr pos:start="51:38" pos:end="51:49"><name pos:start="51:38" pos:end="51:49"><name pos:start="51:38" pos:end="51:38">s</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:49">note_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="52:5" pos:end="77:24"><if pos:start="52:5" pos:end="77:24">if <condition pos:start="52:8" pos:end="53:47">(<expr pos:start="52:9" pos:end="53:46"><call pos:start="52:9" pos:end="53:42"><name pos:start="52:9" pos:end="52:20">write_buffer</name><argument_list pos:start="52:21" pos:end="53:42">(<argument pos:start="52:22" pos:end="52:26"><expr pos:start="52:22" pos:end="52:26"><name pos:start="52:22" pos:end="52:26"><name pos:start="52:22" pos:end="52:22">s</name><operator pos:start="52:23" pos:end="52:24">-&gt;</operator><name pos:start="52:25" pos:end="52:26">fd</name></name></expr></argument>, <argument pos:start="52:29" pos:end="53:31"><expr pos:start="52:29" pos:end="53:31"><name pos:start="52:29" pos:end="52:50">DISKDUMP_HEADER_BLOCKS</name> <operator pos:start="52:52" pos:end="52:52">*</operator>
                     <name pos:start="53:22" pos:end="53:31">block_size</name></expr></argument>, <argument pos:start="53:34" pos:end="53:35"><expr pos:start="53:34" pos:end="53:35"><name pos:start="53:34" pos:end="53:35">kh</name></expr></argument>, <argument pos:start="53:38" pos:end="53:41"><expr pos:start="53:38" pos:end="53:41"><name pos:start="53:38" pos:end="53:41">size</name></expr></argument>)</argument_list></call> <operator pos:start="53:44" pos:end="53:44">&lt;</operator> <literal type="number" pos:start="53:46" pos:end="53:46">0</literal></expr>)</condition> <block pos:start="53:49" pos:end="77:24">{<block_content pos:start="54:9" pos:end="77:24">
        <expr_stmt pos:start="54:9" pos:end="54:67"><expr pos:start="54:9" pos:end="54:66"><call pos:start="54:9" pos:end="54:66"><name pos:start="54:9" pos:end="54:18">error_setg</name><argument_list pos:start="54:19" pos:end="54:66">(<argument pos:start="54:20" pos:end="54:23"><expr pos:start="54:20" pos:end="54:23"><name pos:start="54:20" pos:end="54:23">errp</name></expr></argument>, <argument pos:start="54:26" pos:end="54:65"><expr pos:start="54:26" pos:end="54:65"><literal type="string" pos:start="54:26" pos:end="54:65">"dump: failed to write kdump sub header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="55:9" pos:end="55:17">goto <name pos:start="55:14" pos:end="55:16">out</name>;</goto>
    <comment type="block" pos:start="56:5" pos:end="56:20">/* write note */</comment>
    <expr_stmt pos:start="57:5" pos:end="57:42"><expr pos:start="57:5" pos:end="57:41"><name pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:15">note_buf</name></name> <operator pos:start="57:17" pos:end="57:17">=</operator> <call pos:start="57:19" pos:end="57:41"><name pos:start="57:19" pos:end="57:27">g_malloc0</name><argument_list pos:start="57:28" pos:end="57:41">(<argument pos:start="57:29" pos:end="57:40"><expr pos:start="57:29" pos:end="57:40"><name pos:start="57:29" pos:end="57:40"><name pos:start="57:29" pos:end="57:29">s</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:40">note_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="58:5" pos:end="58:27"><expr pos:start="58:5" pos:end="58:26"><name pos:start="58:5" pos:end="58:22"><name pos:start="58:5" pos:end="58:5">s</name><operator pos:start="58:6" pos:end="58:7">-&gt;</operator><name pos:start="58:8" pos:end="58:22">note_buf_offset</name></name> <operator pos:start="58:24" pos:end="58:24">=</operator> <literal type="number" pos:start="58:26" pos:end="58:26">0</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="59:5" pos:end="59:52">/* use s-&gt;note_buf to store notes temporarily */</comment>
    <expr_stmt pos:start="60:5" pos:end="60:53"><expr pos:start="60:5" pos:end="60:52"><call pos:start="60:5" pos:end="60:52"><name pos:start="60:5" pos:end="60:21">write_elf64_notes</name><argument_list pos:start="60:22" pos:end="60:52">(<argument pos:start="60:23" pos:end="60:36"><expr pos:start="60:23" pos:end="60:36"><name pos:start="60:23" pos:end="60:36">buf_write_note</name></expr></argument>, <argument pos:start="60:39" pos:end="60:39"><expr pos:start="60:39" pos:end="60:39"><name pos:start="60:39" pos:end="60:39">s</name></expr></argument>, <argument pos:start="60:42" pos:end="60:51"><expr pos:start="60:42" pos:end="60:51"><operator pos:start="60:42" pos:end="60:42">&amp;</operator><name pos:start="60:43" pos:end="60:51">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="61:5" pos:end="77:24"><if pos:start="61:5" pos:end="77:24">if <condition pos:start="61:8" pos:end="61:18">(<expr pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:17">local_err</name></expr>)</condition> <block pos:start="61:20" pos:end="77:24">{<block_content pos:start="62:9" pos:end="77:24">
        <expr_stmt pos:start="62:9" pos:end="62:41"><expr pos:start="62:9" pos:end="62:40"><call pos:start="62:9" pos:end="62:40"><name pos:start="62:9" pos:end="62:23">error_propagate</name><argument_list pos:start="62:24" pos:end="62:40">(<argument pos:start="62:25" pos:end="62:28"><expr pos:start="62:25" pos:end="62:28"><name pos:start="62:25" pos:end="62:28">errp</name></expr></argument>, <argument pos:start="62:31" pos:end="62:39"><expr pos:start="62:31" pos:end="62:39"><name pos:start="62:31" pos:end="62:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="63:9" pos:end="63:17">goto <name pos:start="63:14" pos:end="63:16">out</name>;</goto>
    <if_stmt pos:start="64:5" pos:end="77:24"><if pos:start="64:5" pos:end="77:24">if <condition pos:start="64:8" pos:end="65:39">(<expr pos:start="64:9" pos:end="65:38"><call pos:start="64:9" pos:end="65:34"><name pos:start="64:9" pos:end="64:20">write_buffer</name><argument_list pos:start="64:21" pos:end="65:34">(<argument pos:start="64:22" pos:end="64:26"><expr pos:start="64:22" pos:end="64:26"><name pos:start="64:22" pos:end="64:26"><name pos:start="64:22" pos:end="64:22">s</name><operator pos:start="64:23" pos:end="64:24">-&gt;</operator><name pos:start="64:25" pos:end="64:26">fd</name></name></expr></argument>, <argument pos:start="64:29" pos:end="64:39"><expr pos:start="64:29" pos:end="64:39"><name pos:start="64:29" pos:end="64:39">offset_note</name></expr></argument>, <argument pos:start="64:42" pos:end="64:52"><expr pos:start="64:42" pos:end="64:52"><name pos:start="64:42" pos:end="64:52"><name pos:start="64:42" pos:end="64:42">s</name><operator pos:start="64:43" pos:end="64:44">-&gt;</operator><name pos:start="64:45" pos:end="64:52">note_buf</name></name></expr></argument>,
                     <argument pos:start="65:22" pos:end="65:33"><expr pos:start="65:22" pos:end="65:33"><name pos:start="65:22" pos:end="65:33"><name pos:start="65:22" pos:end="65:22">s</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:33">note_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="65:36" pos:end="65:36">&lt;</operator> <literal type="number" pos:start="65:38" pos:end="65:38">0</literal></expr>)</condition> <block pos:start="65:41" pos:end="77:24">{<block_content pos:start="66:9" pos:end="77:24">
        <expr_stmt pos:start="66:9" pos:end="66:56"><expr pos:start="66:9" pos:end="66:55"><call pos:start="66:9" pos:end="66:55"><name pos:start="66:9" pos:end="66:18">error_setg</name><argument_list pos:start="66:19" pos:end="66:55">(<argument pos:start="66:20" pos:end="66:23"><expr pos:start="66:20" pos:end="66:23"><name pos:start="66:20" pos:end="66:23">errp</name></expr></argument>, <argument pos:start="66:26" pos:end="66:54"><expr pos:start="66:26" pos:end="66:54"><literal type="string" pos:start="66:26" pos:end="66:54">"dump: failed to write notes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="67:9" pos:end="67:17">goto <name pos:start="67:14" pos:end="67:16">out</name>;</goto>
    <comment type="block" pos:start="68:5" pos:end="68:35">/* get offset of dump_bitmap */</comment>
    <expr_stmt pos:start="69:5" pos:end="70:40"><expr pos:start="69:5" pos:end="70:39"><name pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:25">offset_dump_bitmap</name></name> <operator pos:start="69:27" pos:end="69:27">=</operator> <operator pos:start="69:29" pos:end="69:29">(</operator><name pos:start="69:30" pos:end="69:51">DISKDUMP_HEADER_BLOCKS</name> <operator pos:start="69:53" pos:end="69:53">+</operator> <name pos:start="69:55" pos:end="69:66">sub_hdr_size</name><operator pos:start="69:67" pos:end="69:67">)</operator> <operator pos:start="69:69" pos:end="69:69">*</operator>
                             <name pos:start="70:30" pos:end="70:39">block_size</name></expr>;</expr_stmt>
    <comment type="block" pos:start="71:5" pos:end="71:28">/* get offset of page */</comment>
    <expr_stmt pos:start="72:5" pos:end="73:32"><expr pos:start="72:5" pos:end="73:31"><name pos:start="72:5" pos:end="72:18"><name pos:start="72:5" pos:end="72:5">s</name><operator pos:start="72:6" pos:end="72:7">-&gt;</operator><name pos:start="72:8" pos:end="72:18">offset_page</name></name> <operator pos:start="72:20" pos:end="72:20">=</operator> <operator pos:start="72:22" pos:end="72:22">(</operator><name pos:start="72:23" pos:end="72:44">DISKDUMP_HEADER_BLOCKS</name> <operator pos:start="72:46" pos:end="72:46">+</operator> <name pos:start="72:48" pos:end="72:59">sub_hdr_size</name> <operator pos:start="72:61" pos:end="72:61">+</operator> <name pos:start="72:63" pos:end="72:75">bitmap_blocks</name><operator pos:start="72:76" pos:end="72:76">)</operator> <operator pos:start="72:78" pos:end="72:78">*</operator>
                     <name pos:start="73:22" pos:end="73:31">block_size</name></expr>;</expr_stmt>
<label pos:start="74:1" pos:end="74:4"><name pos:start="74:1" pos:end="74:3">out</name>:</label>
    <expr_stmt pos:start="75:5" pos:end="75:15"><expr pos:start="75:5" pos:end="75:14"><call pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:10">g_free</name><argument_list pos:start="75:11" pos:end="75:14">(<argument pos:start="75:12" pos:end="75:13"><expr pos:start="75:12" pos:end="75:13"><name pos:start="75:12" pos:end="75:13">dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="76:5" pos:end="76:15"><expr pos:start="76:5" pos:end="76:14"><call pos:start="76:5" pos:end="76:14"><name pos:start="76:5" pos:end="76:10">g_free</name><argument_list pos:start="76:11" pos:end="76:14">(<argument pos:start="76:12" pos:end="76:13"><expr pos:start="76:12" pos:end="76:13"><name pos:start="76:12" pos:end="76:13">kh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="77:5" pos:end="77:24"><expr pos:start="77:5" pos:end="77:23"><call pos:start="77:5" pos:end="77:23"><name pos:start="77:5" pos:end="77:10">g_free</name><argument_list pos:start="77:11" pos:end="77:23">(<argument pos:start="77:12" pos:end="77:22"><expr pos:start="77:12" pos:end="77:22"><name pos:start="77:12" pos:end="77:22"><name pos:start="77:12" pos:end="77:12">s</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:22">note_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
