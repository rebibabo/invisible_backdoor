<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13438.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">write_option</name><parameter_list pos:start="1:24" pos:end="3:40">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">optctx</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:57"><decl pos:start="1:39" pos:end="1:57"><type pos:start="1:39" pos:end="1:57"><specifier pos:start="1:39" pos:end="1:43">const</specifier> <name pos:start="1:45" pos:end="1:53">OptionDef</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">po</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:74"><decl pos:start="1:60" pos:end="1:74"><type pos:start="1:60" pos:end="1:74"><specifier pos:start="1:60" pos:end="1:64">const</specifier> <name pos:start="1:66" pos:end="1:69">char</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:74">opt</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:34">char</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">arg</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="93:1">{<block_content pos:start="11:5" pos:end="91:13">

    <comment type="block" pos:start="7:5" pos:end="9:21">/* new-style options contain an offset into optctx, old-style address of

     * a global var*/</comment>

    <decl_stmt pos:start="11:5" pos:end="13:62"><decl pos:start="11:5" pos:end="13:61"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">dst</name> <init pos:start="11:15" pos:end="13:61">= <expr pos:start="11:17" pos:end="13:61"><ternary pos:start="11:17" pos:end="13:61"><condition pos:start="11:17" pos:end="11:53"><expr pos:start="11:17" pos:end="11:51"><name pos:start="11:17" pos:end="11:25"><name pos:start="11:17" pos:end="11:18">po</name><operator pos:start="11:19" pos:end="11:20">-&gt;</operator><name pos:start="11:21" pos:end="11:25">flags</name></name> <operator pos:start="11:27" pos:end="11:27">&amp;</operator> <operator pos:start="11:29" pos:end="11:29">(</operator><name pos:start="11:30" pos:end="11:39">OPT_OFFSET</name> <operator pos:start="11:41" pos:end="11:41">|</operator> <name pos:start="11:43" pos:end="11:50">OPT_SPEC</name><operator pos:start="11:51" pos:end="11:51">)</operator></expr> ?</condition><then pos:start="13:17" pos:end="13:45">

                <expr pos:start="13:17" pos:end="13:45"><operator pos:start="13:17" pos:end="13:17">(</operator><name pos:start="13:18" pos:end="13:24">uint8_t</name> <operator pos:start="13:26" pos:end="13:26">*</operator><operator pos:start="13:27" pos:end="13:27">)</operator><name pos:start="13:28" pos:end="13:33">optctx</name> <operator pos:start="13:35" pos:end="13:35">+</operator> <name pos:start="13:37" pos:end="13:45"><name pos:start="13:37" pos:end="13:38">po</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:41">u</name><operator pos:start="13:42" pos:end="13:42">.</operator><name pos:start="13:43" pos:end="13:45">off</name></name></expr> </then><else pos:start="13:47" pos:end="13:61">: <expr pos:start="13:49" pos:end="13:61"><name pos:start="13:49" pos:end="13:61"><name pos:start="13:49" pos:end="13:50">po</name><operator pos:start="13:51" pos:end="13:52">-&gt;</operator><name pos:start="13:53" pos:end="13:53">u</name><operator pos:start="13:54" pos:end="13:54">.</operator><name pos:start="13:55" pos:end="13:61">dst_ptr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:7">int</name> <modifier pos:start="15:9" pos:end="15:9">*</modifier></type><name pos:start="15:10" pos:end="15:17">dstcount</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="35:5"><if pos:start="19:5" pos:end="35:5">if <condition pos:start="19:8" pos:end="19:29">(<expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:10">po</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:17">flags</name></name> <operator pos:start="19:19" pos:end="19:19">&amp;</operator> <name pos:start="19:21" pos:end="19:28">OPT_SPEC</name></expr>)</condition> <block pos:start="19:31" pos:end="35:5">{<block_content pos:start="21:9" pos:end="33:38">

        <decl_stmt pos:start="21:9" pos:end="21:32"><decl pos:start="21:9" pos:end="21:31"><type pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:20">SpecifierOpt</name> <modifier pos:start="21:22" pos:end="21:22">*</modifier><modifier pos:start="21:23" pos:end="21:23">*</modifier></type><name pos:start="21:24" pos:end="21:25">so</name> <init pos:start="21:27" pos:end="21:31">= <expr pos:start="21:29" pos:end="21:31"><name pos:start="21:29" pos:end="21:31">dst</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:35"><decl pos:start="23:9" pos:end="23:34"><type pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:12">char</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:15">p</name> <init pos:start="23:17" pos:end="23:34">= <expr pos:start="23:19" pos:end="23:34"><call pos:start="23:19" pos:end="23:34"><name pos:start="23:19" pos:end="23:24">strchr</name><argument_list pos:start="23:25" pos:end="23:34">(<argument pos:start="23:26" pos:end="23:28"><expr pos:start="23:26" pos:end="23:28"><name pos:start="23:26" pos:end="23:28">opt</name></expr></argument>, <argument pos:start="23:31" pos:end="23:33"><expr pos:start="23:31" pos:end="23:33"><literal type="char" pos:start="23:31" pos:end="23:33">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="27:9" pos:end="27:35"><expr pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:16">dstcount</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <operator pos:start="27:20" pos:end="27:20">(</operator><name pos:start="27:21" pos:end="27:23">int</name> <operator pos:start="27:25" pos:end="27:25">*</operator><operator pos:start="27:26" pos:end="27:26">)</operator><operator pos:start="27:27" pos:end="27:27">(</operator><name pos:start="27:28" pos:end="27:29">so</name> <operator pos:start="27:31" pos:end="27:31">+</operator> <literal type="number" pos:start="27:33" pos:end="27:33">1</literal><operator pos:start="27:34" pos:end="27:34">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:69"><expr pos:start="29:9" pos:end="29:68"><operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:11">so</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:68"><name pos:start="29:15" pos:end="29:24">grow_array</name><argument_list pos:start="29:25" pos:end="29:68">(<argument pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><operator pos:start="29:26" pos:end="29:26">*</operator><name pos:start="29:27" pos:end="29:28">so</name></expr></argument>, <argument pos:start="29:31" pos:end="29:42"><expr pos:start="29:31" pos:end="29:42"><sizeof pos:start="29:31" pos:end="29:42">sizeof<argument_list pos:start="29:37" pos:end="29:42">(<argument pos:start="29:38" pos:end="29:41"><expr pos:start="29:38" pos:end="29:41"><operator pos:start="29:38" pos:end="29:38">*</operator><operator pos:start="29:39" pos:end="29:39">*</operator><name pos:start="29:40" pos:end="29:41">so</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="29:45" pos:end="29:52"><expr pos:start="29:45" pos:end="29:52"><name pos:start="29:45" pos:end="29:52">dstcount</name></expr></argument>, <argument pos:start="29:55" pos:end="29:67"><expr pos:start="29:55" pos:end="29:67"><operator pos:start="29:55" pos:end="29:55">*</operator><name pos:start="29:56" pos:end="29:63">dstcount</name> <operator pos:start="29:65" pos:end="29:65">+</operator> <literal type="number" pos:start="29:67" pos:end="29:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:67"><expr pos:start="31:9" pos:end="31:66"><operator pos:start="31:9" pos:end="31:9">(</operator><operator pos:start="31:10" pos:end="31:10">*</operator><name pos:start="31:11" pos:end="31:12">so</name><operator pos:start="31:13" pos:end="31:13">)</operator><index pos:start="31:14" pos:end="31:28">[<expr pos:start="31:15" pos:end="31:27"><operator pos:start="31:15" pos:end="31:15">*</operator><name pos:start="31:16" pos:end="31:23">dstcount</name> <operator pos:start="31:25" pos:end="31:25">-</operator> <literal type="number" pos:start="31:27" pos:end="31:27">1</literal></expr>]</index><operator pos:start="31:29" pos:end="31:29">.</operator><name pos:start="31:30" pos:end="31:38">specifier</name> <operator pos:start="31:40" pos:end="31:40">=</operator> <call pos:start="31:42" pos:end="31:66"><name pos:start="31:42" pos:end="31:50">av_strdup</name><argument_list pos:start="31:51" pos:end="31:66">(<argument pos:start="31:52" pos:end="31:65"><expr pos:start="31:52" pos:end="31:65"><ternary pos:start="31:52" pos:end="31:65"><condition pos:start="31:52" pos:end="31:54"><expr pos:start="31:52" pos:end="31:52"><name pos:start="31:52" pos:end="31:52">p</name></expr> ?</condition><then pos:start="31:56" pos:end="31:60"> <expr pos:start="31:56" pos:end="31:60"><name pos:start="31:56" pos:end="31:56">p</name> <operator pos:start="31:58" pos:end="31:58">+</operator> <literal type="number" pos:start="31:60" pos:end="31:60">1</literal></expr> </then><else pos:start="31:62" pos:end="31:65">: <expr pos:start="31:64" pos:end="31:65"><literal type="string" pos:start="31:64" pos:end="31:65">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:38"><expr pos:start="33:9" pos:end="33:37"><name pos:start="33:9" pos:end="33:11">dst</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <operator pos:start="33:15" pos:end="33:15">&amp;</operator><operator pos:start="33:16" pos:end="33:16">(</operator><operator pos:start="33:17" pos:end="33:17">*</operator><name pos:start="33:18" pos:end="33:19">so</name><operator pos:start="33:20" pos:end="33:20">)</operator><index pos:start="33:21" pos:end="33:35">[<expr pos:start="33:22" pos:end="33:34"><operator pos:start="33:22" pos:end="33:22">*</operator><name pos:start="33:23" pos:end="33:30">dstcount</name> <operator pos:start="33:32" pos:end="33:32">-</operator> <literal type="number" pos:start="33:34" pos:end="33:34">1</literal></expr>]</index><operator pos:start="33:36" pos:end="33:36">.</operator><name pos:start="33:37" pos:end="33:37">u</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="83:5"><if pos:start="39:5" pos:end="49:5">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:10">po</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:17">flags</name></name> <operator pos:start="39:19" pos:end="39:19">&amp;</operator> <name pos:start="39:21" pos:end="39:30">OPT_STRING</name></expr>)</condition> <block pos:start="39:33" pos:end="49:5">{<block_content pos:start="41:9" pos:end="47:28">

        <decl_stmt pos:start="41:9" pos:end="41:18"><decl pos:start="41:9" pos:end="41:17"><type pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:12">char</name> <modifier pos:start="41:14" pos:end="41:14">*</modifier></type><name pos:start="41:15" pos:end="41:17">str</name></decl>;</decl_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:29"><expr pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:11">str</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:28"><name pos:start="43:15" pos:end="43:23">av_strdup</name><argument_list pos:start="43:24" pos:end="43:28">(<argument pos:start="43:25" pos:end="43:27"><expr pos:start="43:25" pos:end="43:27"><name pos:start="43:25" pos:end="43:27">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:22"><expr pos:start="45:9" pos:end="45:21"><call pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:16">av_freep</name><argument_list pos:start="45:17" pos:end="45:21">(<argument pos:start="45:18" pos:end="45:20"><expr pos:start="45:18" pos:end="45:20"><name pos:start="45:18" pos:end="45:20">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:28"><expr pos:start="47:9" pos:end="47:27"><operator pos:start="47:9" pos:end="47:9">*</operator><operator pos:start="47:10" pos:end="47:10">(</operator><name pos:start="47:11" pos:end="47:14">char</name> <operator pos:start="47:16" pos:end="47:16">*</operator><operator pos:start="47:17" pos:end="47:17">*</operator><operator pos:start="47:18" pos:end="47:18">)</operator><name pos:start="47:19" pos:end="47:21">dst</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:27">str</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="49:7" pos:end="53:5">else if <condition pos:start="49:15" pos:end="49:59">(<expr pos:start="49:16" pos:end="49:58"><name pos:start="49:16" pos:end="49:24"><name pos:start="49:16" pos:end="49:17">po</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:24">flags</name></name> <operator pos:start="49:26" pos:end="49:26">&amp;</operator> <name pos:start="49:28" pos:end="49:35">OPT_BOOL</name> <operator pos:start="49:37" pos:end="49:38">||</operator> <name pos:start="49:40" pos:end="49:48"><name pos:start="49:40" pos:end="49:41">po</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:48">flags</name></name> <operator pos:start="49:50" pos:end="49:50">&amp;</operator> <name pos:start="49:52" pos:end="49:58">OPT_INT</name></expr>)</condition> <block pos:start="49:61" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:81">

        <expr_stmt pos:start="51:9" pos:end="51:81"><expr pos:start="51:9" pos:end="51:80"><operator pos:start="51:9" pos:end="51:9">*</operator><operator pos:start="51:10" pos:end="51:10">(</operator><name pos:start="51:11" pos:end="51:13">int</name> <operator pos:start="51:15" pos:end="51:15">*</operator><operator pos:start="51:16" pos:end="51:16">)</operator><name pos:start="51:17" pos:end="51:19">dst</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="51:80"><name pos:start="51:23" pos:end="51:41">parse_number_or_die</name><argument_list pos:start="51:42" pos:end="51:80">(<argument pos:start="51:43" pos:end="51:45"><expr pos:start="51:43" pos:end="51:45"><name pos:start="51:43" pos:end="51:45">opt</name></expr></argument>, <argument pos:start="51:48" pos:end="51:50"><expr pos:start="51:48" pos:end="51:50"><name pos:start="51:48" pos:end="51:50">arg</name></expr></argument>, <argument pos:start="51:53" pos:end="51:61"><expr pos:start="51:53" pos:end="51:61"><name pos:start="51:53" pos:end="51:61">OPT_INT64</name></expr></argument>, <argument pos:start="51:64" pos:end="51:70"><expr pos:start="51:64" pos:end="51:70"><name pos:start="51:64" pos:end="51:70">INT_MIN</name></expr></argument>, <argument pos:start="51:73" pos:end="51:79"><expr pos:start="51:73" pos:end="51:79"><name pos:start="51:73" pos:end="51:79">INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="53:7" pos:end="57:5">else if <condition pos:start="53:15" pos:end="53:37">(<expr pos:start="53:16" pos:end="53:36"><name pos:start="53:16" pos:end="53:24"><name pos:start="53:16" pos:end="53:17">po</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:24">flags</name></name> <operator pos:start="53:26" pos:end="53:26">&amp;</operator> <name pos:start="53:28" pos:end="53:36">OPT_INT64</name></expr>)</condition> <block pos:start="53:39" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:89">

        <expr_stmt pos:start="55:9" pos:end="55:89"><expr pos:start="55:9" pos:end="55:88"><operator pos:start="55:9" pos:end="55:9">*</operator><operator pos:start="55:10" pos:end="55:10">(</operator><name pos:start="55:11" pos:end="55:17">int64_t</name> <operator pos:start="55:19" pos:end="55:19">*</operator><operator pos:start="55:20" pos:end="55:20">)</operator><name pos:start="55:21" pos:end="55:23">dst</name> <operator pos:start="55:25" pos:end="55:25">=</operator> <call pos:start="55:27" pos:end="55:88"><name pos:start="55:27" pos:end="55:45">parse_number_or_die</name><argument_list pos:start="55:46" pos:end="55:88">(<argument pos:start="55:47" pos:end="55:49"><expr pos:start="55:47" pos:end="55:49"><name pos:start="55:47" pos:end="55:49">opt</name></expr></argument>, <argument pos:start="55:52" pos:end="55:54"><expr pos:start="55:52" pos:end="55:54"><name pos:start="55:52" pos:end="55:54">arg</name></expr></argument>, <argument pos:start="55:57" pos:end="55:65"><expr pos:start="55:57" pos:end="55:65"><name pos:start="55:57" pos:end="55:65">OPT_INT64</name></expr></argument>, <argument pos:start="55:68" pos:end="55:76"><expr pos:start="55:68" pos:end="55:76"><name pos:start="55:68" pos:end="55:76">INT64_MIN</name></expr></argument>, <argument pos:start="55:79" pos:end="55:87"><expr pos:start="55:79" pos:end="55:87"><name pos:start="55:79" pos:end="55:87">INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="57:7" pos:end="61:5">else if <condition pos:start="57:15" pos:end="57:36">(<expr pos:start="57:16" pos:end="57:35"><name pos:start="57:16" pos:end="57:24"><name pos:start="57:16" pos:end="57:17">po</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:24">flags</name></name> <operator pos:start="57:26" pos:end="57:26">&amp;</operator> <name pos:start="57:28" pos:end="57:35">OPT_TIME</name></expr>)</condition> <block pos:start="57:38" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:57">

        <expr_stmt pos:start="59:9" pos:end="59:57"><expr pos:start="59:9" pos:end="59:56"><operator pos:start="59:9" pos:end="59:9">*</operator><operator pos:start="59:10" pos:end="59:10">(</operator><name pos:start="59:11" pos:end="59:17">int64_t</name> <operator pos:start="59:19" pos:end="59:19">*</operator><operator pos:start="59:20" pos:end="59:20">)</operator><name pos:start="59:21" pos:end="59:23">dst</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <call pos:start="59:27" pos:end="59:56"><name pos:start="59:27" pos:end="59:43">parse_time_or_die</name><argument_list pos:start="59:44" pos:end="59:56">(<argument pos:start="59:45" pos:end="59:47"><expr pos:start="59:45" pos:end="59:47"><name pos:start="59:45" pos:end="59:47">opt</name></expr></argument>, <argument pos:start="59:50" pos:end="59:52"><expr pos:start="59:50" pos:end="59:52"><name pos:start="59:50" pos:end="59:52">arg</name></expr></argument>, <argument pos:start="59:55" pos:end="59:55"><expr pos:start="59:55" pos:end="59:55"><literal type="number" pos:start="59:55" pos:end="59:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="65:5">else if <condition pos:start="61:15" pos:end="61:37">(<expr pos:start="61:16" pos:end="61:36"><name pos:start="61:16" pos:end="61:24"><name pos:start="61:16" pos:end="61:17">po</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:24">flags</name></name> <operator pos:start="61:26" pos:end="61:26">&amp;</operator> <name pos:start="61:28" pos:end="61:36">OPT_FLOAT</name></expr>)</condition> <block pos:start="61:39" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:86">

        <expr_stmt pos:start="63:9" pos:end="63:86"><expr pos:start="63:9" pos:end="63:85"><operator pos:start="63:9" pos:end="63:9">*</operator><operator pos:start="63:10" pos:end="63:10">(</operator><name pos:start="63:11" pos:end="63:15">float</name> <operator pos:start="63:17" pos:end="63:17">*</operator><operator pos:start="63:18" pos:end="63:18">)</operator><name pos:start="63:19" pos:end="63:21">dst</name> <operator pos:start="63:23" pos:end="63:23">=</operator> <call pos:start="63:25" pos:end="63:85"><name pos:start="63:25" pos:end="63:43">parse_number_or_die</name><argument_list pos:start="63:44" pos:end="63:85">(<argument pos:start="63:45" pos:end="63:47"><expr pos:start="63:45" pos:end="63:47"><name pos:start="63:45" pos:end="63:47">opt</name></expr></argument>, <argument pos:start="63:50" pos:end="63:52"><expr pos:start="63:50" pos:end="63:52"><name pos:start="63:50" pos:end="63:52">arg</name></expr></argument>, <argument pos:start="63:55" pos:end="63:63"><expr pos:start="63:55" pos:end="63:63"><name pos:start="63:55" pos:end="63:63">OPT_FLOAT</name></expr></argument>, <argument pos:start="63:66" pos:end="63:74"><expr pos:start="63:66" pos:end="63:74"><operator pos:start="63:66" pos:end="63:66">-</operator><name pos:start="63:67" pos:end="63:74">INFINITY</name></expr></argument>, <argument pos:start="63:77" pos:end="63:84"><expr pos:start="63:77" pos:end="63:84"><name pos:start="63:77" pos:end="63:84">INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="65:7" pos:end="69:5">else if <condition pos:start="65:15" pos:end="65:38">(<expr pos:start="65:16" pos:end="65:37"><name pos:start="65:16" pos:end="65:24"><name pos:start="65:16" pos:end="65:17">po</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:24">flags</name></name> <operator pos:start="65:26" pos:end="65:26">&amp;</operator> <name pos:start="65:28" pos:end="65:37">OPT_DOUBLE</name></expr>)</condition> <block pos:start="65:40" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:88">

        <expr_stmt pos:start="67:9" pos:end="67:88"><expr pos:start="67:9" pos:end="67:87"><operator pos:start="67:9" pos:end="67:9">*</operator><operator pos:start="67:10" pos:end="67:10">(</operator><name pos:start="67:11" pos:end="67:16">double</name> <operator pos:start="67:18" pos:end="67:18">*</operator><operator pos:start="67:19" pos:end="67:19">)</operator><name pos:start="67:20" pos:end="67:22">dst</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <call pos:start="67:26" pos:end="67:87"><name pos:start="67:26" pos:end="67:44">parse_number_or_die</name><argument_list pos:start="67:45" pos:end="67:87">(<argument pos:start="67:46" pos:end="67:48"><expr pos:start="67:46" pos:end="67:48"><name pos:start="67:46" pos:end="67:48">opt</name></expr></argument>, <argument pos:start="67:51" pos:end="67:53"><expr pos:start="67:51" pos:end="67:53"><name pos:start="67:51" pos:end="67:53">arg</name></expr></argument>, <argument pos:start="67:56" pos:end="67:65"><expr pos:start="67:56" pos:end="67:65"><name pos:start="67:56" pos:end="67:65">OPT_DOUBLE</name></expr></argument>, <argument pos:start="67:68" pos:end="67:76"><expr pos:start="67:68" pos:end="67:76"><operator pos:start="67:68" pos:end="67:68">-</operator><name pos:start="67:69" pos:end="67:76">INFINITY</name></expr></argument>, <argument pos:start="67:79" pos:end="67:86"><expr pos:start="67:79" pos:end="67:86"><name pos:start="67:79" pos:end="67:86">INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="69:7" pos:end="83:5">else if <condition pos:start="69:15" pos:end="69:30">(<expr pos:start="69:16" pos:end="69:29"><name pos:start="69:16" pos:end="69:29"><name pos:start="69:16" pos:end="69:17">po</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:20">u</name><operator pos:start="69:21" pos:end="69:21">.</operator><name pos:start="69:22" pos:end="69:29">func_arg</name></name></expr>)</condition> <block pos:start="69:32" pos:end="83:5">{<block_content pos:start="71:9" pos:end="81:9">

        <decl_stmt pos:start="71:9" pos:end="71:51"><decl pos:start="71:9" pos:end="71:50"><type pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">int</name></type> <name pos:start="71:13" pos:end="71:15">ret</name> <init pos:start="71:17" pos:end="71:50">= <expr pos:start="71:19" pos:end="71:50"><call pos:start="71:19" pos:end="71:50"><name pos:start="71:19" pos:end="71:32"><name pos:start="71:19" pos:end="71:20">po</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:23">u</name><operator pos:start="71:24" pos:end="71:24">.</operator><name pos:start="71:25" pos:end="71:32">func_arg</name></name><argument_list pos:start="71:33" pos:end="71:50">(<argument pos:start="71:34" pos:end="71:39"><expr pos:start="71:34" pos:end="71:39"><name pos:start="71:34" pos:end="71:39">optctx</name></expr></argument>, <argument pos:start="71:42" pos:end="71:44"><expr pos:start="71:42" pos:end="71:44"><name pos:start="71:42" pos:end="71:44">opt</name></expr></argument>, <argument pos:start="71:47" pos:end="71:49"><expr pos:start="71:47" pos:end="71:49"><name pos:start="71:47" pos:end="71:49">arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="73:9" pos:end="81:9"><if pos:start="73:9" pos:end="81:9">if <condition pos:start="73:12" pos:end="73:20">(<expr pos:start="73:13" pos:end="73:19"><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:17">&lt;</operator> <literal type="number" pos:start="73:19" pos:end="73:19">0</literal></expr>)</condition> <block pos:start="73:22" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:23">

            <expr_stmt pos:start="75:13" pos:end="77:75"><expr pos:start="75:13" pos:end="77:74"><call pos:start="75:13" pos:end="77:74"><name pos:start="75:13" pos:end="75:18">av_log</name><argument_list pos:start="75:19" pos:end="77:74">(<argument pos:start="75:20" pos:end="75:23"><expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">NULL</name></expr></argument>, <argument pos:start="75:26" pos:end="75:37"><expr pos:start="75:26" pos:end="75:37"><name pos:start="75:26" pos:end="75:37">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:63"><expr pos:start="77:20" pos:end="77:63"><literal type="string" pos:start="77:20" pos:end="77:63">"Failed to set value '%s' for option '%s'\n"</literal></expr></argument>, <argument pos:start="77:66" pos:end="77:68"><expr pos:start="77:66" pos:end="77:68"><name pos:start="77:66" pos:end="77:68">arg</name></expr></argument>, <argument pos:start="77:71" pos:end="77:73"><expr pos:start="77:71" pos:end="77:73"><name pos:start="77:71" pos:end="77:73">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:23">return <expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="85:5" pos:end="87:16"><if pos:start="85:5" pos:end="87:16">if <condition pos:start="85:8" pos:end="85:29">(<expr pos:start="85:9" pos:end="85:28"><name pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:10">po</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:17">flags</name></name> <operator pos:start="85:19" pos:end="85:19">&amp;</operator> <name pos:start="85:21" pos:end="85:28">OPT_EXIT</name></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:16"><block_content pos:start="87:9" pos:end="87:16">

        <expr_stmt pos:start="87:9" pos:end="87:16"><expr pos:start="87:9" pos:end="87:15"><call pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:12">exit</name><argument_list pos:start="87:13" pos:end="87:15">(<argument pos:start="87:14" pos:end="87:14"><expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
