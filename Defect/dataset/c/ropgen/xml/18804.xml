<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18804.c" pos:tabs="8"><function pos:start="1:1" pos:end="477:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">read_var_block_data</name><parameter_list pos:start="1:31" pos:end="1:68">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:44">ALSDecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:67"><decl pos:start="1:52" pos:end="1:67"><type pos:start="1:52" pos:end="1:67"><name pos:start="1:52" pos:end="1:63">ALSBlockData</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:67">bd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="477:1">{<block_content pos:start="5:5" pos:end="475:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">ALSSpecificConfig</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:28">sconf</name> <init pos:start="5:30" pos:end="5:42">= <expr pos:start="5:32" pos:end="5:42"><operator pos:start="5:32" pos:end="5:32">&amp;</operator><name pos:start="5:33" pos:end="5:42"><name pos:start="5:33" pos:end="5:35">ctx</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:42">sconf</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:25">avctx</name>    <init pos:start="7:30" pos:end="7:41">= <expr pos:start="7:32" pos:end="7:41"><name pos:start="7:32" pos:end="7:41"><name pos:start="7:32" pos:end="7:34">ctx</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:41">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">GetBitContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">gb</name>        <init pos:start="9:30" pos:end="9:39">= <expr pos:start="9:32" pos:end="9:39"><operator pos:start="9:32" pos:end="9:32">&amp;</operator><name pos:start="9:33" pos:end="9:39"><name pos:start="9:33" pos:end="9:35">ctx</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:39">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:21"><name pos:start="13:18" pos:end="13:18">s</name><index pos:start="13:19" pos:end="13:21">[<expr pos:start="13:20" pos:end="13:20"><literal type="number" pos:start="13:20" pos:end="13:20">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:22"><name pos:start="15:18" pos:end="15:19">sx</name><index pos:start="15:20" pos:end="15:22">[<expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:56"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:27">sub_blocks</name></decl>, <decl pos:start="17:30" pos:end="17:44"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:30" pos:end="17:44">log2_sub_blocks</name></decl>, <decl pos:start="17:47" pos:end="17:55"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:47" pos:end="17:55">sb_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:22">start</name>      <init pos:start="19:29" pos:end="19:31">= <expr pos:start="19:31" pos:end="19:31"><literal type="number" pos:start="19:31" pos:end="19:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:26">opt_order</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type>          <name pos:start="23:18" pos:end="23:19">sb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:44"><decl pos:start="25:5" pos:end="25:43"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:11">int32_t</name>      <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:27">quant_cof</name> <init pos:start="25:29" pos:end="25:43">= <expr pos:start="25:31" pos:end="25:43"><name pos:start="25:31" pos:end="25:43"><name pos:start="25:31" pos:end="25:32">bd</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:43">quant_cof</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:30"><decl pos:start="27:5" pos:end="27:29"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:11">int32_t</name>      <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:29">current_res</name></decl>;</decl_stmt>





    <comment type="line" pos:start="33:5" pos:end="33:59">// ensure variable block decoding by reusing this field</comment>

    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:6">bd</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:19">const_block</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:6">bd</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:17">opt_order</name></name>   <operator pos:start="39:21" pos:end="39:21">=</operator> <literal type="number" pos:start="39:23" pos:end="39:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:36"><expr pos:start="41:5" pos:end="41:35"><name pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:6">bd</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:17">js_blocks</name></name>   <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:35"><name pos:start="41:23" pos:end="41:31">get_bits1</name><argument_list pos:start="41:32" pos:end="41:35">(<argument pos:start="41:33" pos:end="41:34"><expr pos:start="41:33" pos:end="41:34"><name pos:start="41:33" pos:end="41:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:36"><expr pos:start="45:5" pos:end="45:35"><name pos:start="45:5" pos:end="45:13">opt_order</name>       <operator pos:start="45:21" pos:end="45:21">=</operator> <name pos:start="45:23" pos:end="45:35"><name pos:start="45:23" pos:end="45:24">bd</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:35">opt_order</name></name></expr>;</expr_stmt>



    <comment type="line" pos:start="49:5" pos:end="49:61">// determine the number of subblocks for entropy decoding</comment>

    <if_stmt pos:start="51:5" pos:end="65:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:40">(<expr pos:start="51:9" pos:end="51:39"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:20"><name pos:start="51:10" pos:end="51:14">sconf</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:20">bgmc</name></name> <operator pos:start="51:22" pos:end="51:23">&amp;&amp;</operator> <operator pos:start="51:25" pos:end="51:25">!</operator><name pos:start="51:26" pos:end="51:39"><name pos:start="51:26" pos:end="51:30">sconf</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:39">sb_part</name></name></expr>)</condition> <block pos:start="51:42" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:28">

        <expr_stmt pos:start="53:9" pos:end="53:28"><expr pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:23">log2_sub_blocks</name> <operator pos:start="53:25" pos:end="53:25">=</operator> <literal type="number" pos:start="53:27" pos:end="53:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="65:5">else <block pos:start="55:12" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:48">

        <if_stmt pos:start="57:9" pos:end="63:48"><if pos:start="57:9" pos:end="59:46">if <condition pos:start="57:12" pos:end="57:42">(<expr pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:17">sconf</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:23">bgmc</name></name> <operator pos:start="57:25" pos:end="57:26">&amp;&amp;</operator> <name pos:start="57:28" pos:end="57:41"><name pos:start="57:28" pos:end="57:32">sconf</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:41">sb_part</name></name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:46"><block_content pos:start="59:13" pos:end="59:46">

            <expr_stmt pos:start="59:13" pos:end="59:46"><expr pos:start="59:13" pos:end="59:45"><name pos:start="59:13" pos:end="59:27">log2_sub_blocks</name> <operator pos:start="59:29" pos:end="59:29">=</operator> <call pos:start="59:31" pos:end="59:45"><name pos:start="59:31" pos:end="59:38">get_bits</name><argument_list pos:start="59:39" pos:end="59:45">(<argument pos:start="59:40" pos:end="59:41"><expr pos:start="59:40" pos:end="59:41"><name pos:start="59:40" pos:end="59:41">gb</name></expr></argument>, <argument pos:start="59:44" pos:end="59:44"><expr pos:start="59:44" pos:end="59:44"><literal type="number" pos:start="59:44" pos:end="59:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="61:9" pos:end="63:48">else<block type="pseudo" pos:start="63:13" pos:end="63:48"><block_content pos:start="63:13" pos:end="63:48">

            <expr_stmt pos:start="63:13" pos:end="63:48"><expr pos:start="63:13" pos:end="63:47"><name pos:start="63:13" pos:end="63:27">log2_sub_blocks</name> <operator pos:start="63:29" pos:end="63:29">=</operator> <literal type="number" pos:start="63:31" pos:end="63:31">2</literal> <operator pos:start="63:33" pos:end="63:33">*</operator> <call pos:start="63:35" pos:end="63:47"><name pos:start="63:35" pos:end="63:43">get_bits1</name><argument_list pos:start="63:44" pos:end="63:47">(<argument pos:start="63:45" pos:end="63:46"><expr pos:start="63:45" pos:end="63:46"><name pos:start="63:45" pos:end="63:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:38"><expr pos:start="69:5" pos:end="69:37"><name pos:start="69:5" pos:end="69:14">sub_blocks</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <literal type="number" pos:start="69:18" pos:end="69:18">1</literal> <operator pos:start="69:20" pos:end="69:21">&lt;&lt;</operator> <name pos:start="69:23" pos:end="69:37">log2_sub_blocks</name></expr>;</expr_stmt>



    <comment type="line" pos:start="73:5" pos:end="73:56">// do not continue in case of a damaged stream since</comment>

    <comment type="line" pos:start="75:5" pos:end="75:58">// block_length must be evenly divisible by sub_blocks</comment>

    <if_stmt pos:start="77:5" pos:end="85:5"><if pos:start="77:5" pos:end="85:5">if <condition pos:start="77:8" pos:end="77:44">(<expr pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:10">bd</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:24">block_length</name></name> <operator pos:start="77:26" pos:end="77:26">&amp;</operator> <operator pos:start="77:28" pos:end="77:28">(</operator><name pos:start="77:29" pos:end="77:38">sub_blocks</name> <operator pos:start="77:40" pos:end="77:40">-</operator> <literal type="number" pos:start="77:42" pos:end="77:42">1</literal><operator pos:start="77:43" pos:end="77:43">)</operator></expr>)</condition> <block pos:start="77:46" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:18">

        <expr_stmt pos:start="79:9" pos:end="81:85"><expr pos:start="79:9" pos:end="81:84"><call pos:start="79:9" pos:end="81:84"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="81:84">(<argument pos:start="79:16" pos:end="79:20"><expr pos:start="79:16" pos:end="79:20"><name pos:start="79:16" pos:end="79:20">avctx</name></expr></argument>, <argument pos:start="79:23" pos:end="79:36"><expr pos:start="79:23" pos:end="79:36"><name pos:start="79:23" pos:end="79:36">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="81:16" pos:end="81:83"><expr pos:start="81:16" pos:end="81:83"><literal type="string" pos:start="81:16" pos:end="81:83">"Block length is not evenly divisible by the number of subblocks.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:18">return <expr pos:start="83:16" pos:end="83:17"><operator pos:start="83:16" pos:end="83:16">-</operator><literal type="number" pos:start="83:17" pos:end="83:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:52"><expr pos:start="89:5" pos:end="89:51"><name pos:start="89:5" pos:end="89:13">sb_length</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <name pos:start="89:17" pos:end="89:32"><name pos:start="89:17" pos:end="89:18">bd</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:32">block_length</name></name> <operator pos:start="89:34" pos:end="89:35">&gt;&gt;</operator> <name pos:start="89:37" pos:end="89:51">log2_sub_blocks</name></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="119:5"><if pos:start="93:5" pos:end="111:5">if <condition pos:start="93:8" pos:end="93:20">(<expr pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:13">sconf</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:19">bgmc</name></name></expr>)</condition> <block pos:start="93:22" pos:end="111:5">{<block_content pos:start="95:9" pos:end="109:9">

        <expr_stmt pos:start="95:9" pos:end="95:57"><expr pos:start="95:9" pos:end="95:56"><name pos:start="95:9" pos:end="95:12"><name pos:start="95:9" pos:end="95:9">s</name><index pos:start="95:10" pos:end="95:12">[<expr pos:start="95:11" pos:end="95:11"><literal type="number" pos:start="95:11" pos:end="95:11">0</literal></expr>]</index></name> <operator pos:start="95:14" pos:end="95:14">=</operator> <call pos:start="95:16" pos:end="95:56"><name pos:start="95:16" pos:end="95:23">get_bits</name><argument_list pos:start="95:24" pos:end="95:56">(<argument pos:start="95:25" pos:end="95:26"><expr pos:start="95:25" pos:end="95:26"><name pos:start="95:25" pos:end="95:26">gb</name></expr></argument>, <argument pos:start="95:29" pos:end="95:55"><expr pos:start="95:29" pos:end="95:55"><literal type="number" pos:start="95:29" pos:end="95:31">8</literal> <operator pos:start="95:31" pos:end="95:31">+</operator> <operator pos:start="95:33" pos:end="95:33">(</operator><name pos:start="95:34" pos:end="95:50"><name pos:start="95:34" pos:end="95:38">sconf</name><operator pos:start="95:39" pos:end="95:40">-&gt;</operator><name pos:start="95:41" pos:end="95:50">resolution</name></name> <operator pos:start="95:52" pos:end="95:52">&gt;</operator> <literal type="number" pos:start="95:54" pos:end="95:54">1</literal><operator pos:start="95:55" pos:end="95:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="97:9" pos:end="99:49">for <control pos:start="97:13" pos:end="97:40">(<init pos:start="97:14" pos:end="97:19"><expr pos:start="97:14" pos:end="97:18"><name pos:start="97:14" pos:end="97:14">k</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <literal type="number" pos:start="97:18" pos:end="97:18">1</literal></expr>;</init> <condition pos:start="97:21" pos:end="97:35"><expr pos:start="97:21" pos:end="97:34"><name pos:start="97:21" pos:end="97:21">k</name> <operator pos:start="97:23" pos:end="97:23">&lt;</operator> <name pos:start="97:25" pos:end="97:34">sub_blocks</name></expr>;</condition> <incr pos:start="97:37" pos:end="97:39"><expr pos:start="97:37" pos:end="97:39"><name pos:start="97:37" pos:end="97:37">k</name><operator pos:start="97:38" pos:end="97:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="99:13" pos:end="99:49"><block_content pos:start="99:13" pos:end="99:49">

            <expr_stmt pos:start="99:13" pos:end="99:49"><expr pos:start="99:13" pos:end="99:48"><name pos:start="99:13" pos:end="99:16"><name pos:start="99:13" pos:end="99:13">s</name><index pos:start="99:14" pos:end="99:16">[<expr pos:start="99:15" pos:end="99:15"><name pos:start="99:15" pos:end="99:15">k</name></expr>]</index></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <name pos:start="99:20" pos:end="99:27"><name pos:start="99:20" pos:end="99:20">s</name><index pos:start="99:21" pos:end="99:27">[<expr pos:start="99:22" pos:end="99:26"><name pos:start="99:22" pos:end="99:22">k</name> <operator pos:start="99:24" pos:end="99:24">-</operator> <literal type="number" pos:start="99:26" pos:end="99:26">1</literal></expr>]</index></name> <operator pos:start="99:29" pos:end="99:29">+</operator> <call pos:start="99:31" pos:end="99:48"><name pos:start="99:31" pos:end="99:41">decode_rice</name><argument_list pos:start="99:42" pos:end="99:48">(<argument pos:start="99:43" pos:end="99:44"><expr pos:start="99:43" pos:end="99:44"><name pos:start="99:43" pos:end="99:44">gb</name></expr></argument>, <argument pos:start="99:47" pos:end="99:47"><expr pos:start="99:47" pos:end="99:47"><literal type="number" pos:start="99:47" pos:end="99:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="103:9" pos:end="109:9">for <control pos:start="103:13" pos:end="103:40">(<init pos:start="103:14" pos:end="103:19"><expr pos:start="103:14" pos:end="103:18"><name pos:start="103:14" pos:end="103:14">k</name> <operator pos:start="103:16" pos:end="103:16">=</operator> <literal type="number" pos:start="103:18" pos:end="103:18">0</literal></expr>;</init> <condition pos:start="103:21" pos:end="103:35"><expr pos:start="103:21" pos:end="103:34"><name pos:start="103:21" pos:end="103:21">k</name> <operator pos:start="103:23" pos:end="103:23">&lt;</operator> <name pos:start="103:25" pos:end="103:34">sub_blocks</name></expr>;</condition> <incr pos:start="103:37" pos:end="103:39"><expr pos:start="103:37" pos:end="103:39"><name pos:start="103:37" pos:end="103:37">k</name><operator pos:start="103:38" pos:end="103:39">++</operator></expr></incr>)</control> <block pos:start="103:42" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:24">

            <expr_stmt pos:start="105:13" pos:end="105:34"><expr pos:start="105:13" pos:end="105:33"><name pos:start="105:13" pos:end="105:17"><name pos:start="105:13" pos:end="105:14">sx</name><index pos:start="105:15" pos:end="105:17">[<expr pos:start="105:16" pos:end="105:16"><name pos:start="105:16" pos:end="105:16">k</name></expr>]</index></name>   <operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:26"><name pos:start="105:23" pos:end="105:23">s</name><index pos:start="105:24" pos:end="105:26">[<expr pos:start="105:25" pos:end="105:25"><name pos:start="105:25" pos:end="105:25">k</name></expr>]</index></name> <operator pos:start="105:28" pos:end="105:28">&amp;</operator> <literal type="number" pos:start="105:30" pos:end="105:33">0x0F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:24"><expr pos:start="107:13" pos:end="107:23"><name pos:start="107:13" pos:end="107:17"><name pos:start="107:13" pos:end="107:13">s</name> <index pos:start="107:15" pos:end="107:17">[<expr pos:start="107:16" pos:end="107:16"><name pos:start="107:16" pos:end="107:16">k</name></expr>]</index></name> <operator pos:start="107:19" pos:end="107:21">&gt;&gt;=</operator> <literal type="number" pos:start="107:23" pos:end="107:23">4</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="111:7" pos:end="119:5">else <block pos:start="111:12" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:49">

        <expr_stmt pos:start="113:9" pos:end="113:57"><expr pos:start="113:9" pos:end="113:56"><name pos:start="113:9" pos:end="113:12"><name pos:start="113:9" pos:end="113:9">s</name><index pos:start="113:10" pos:end="113:12">[<expr pos:start="113:11" pos:end="113:11"><literal type="number" pos:start="113:11" pos:end="113:11">0</literal></expr>]</index></name> <operator pos:start="113:14" pos:end="113:14">=</operator> <call pos:start="113:16" pos:end="113:56"><name pos:start="113:16" pos:end="113:23">get_bits</name><argument_list pos:start="113:24" pos:end="113:56">(<argument pos:start="113:25" pos:end="113:26"><expr pos:start="113:25" pos:end="113:26"><name pos:start="113:25" pos:end="113:26">gb</name></expr></argument>, <argument pos:start="113:29" pos:end="113:55"><expr pos:start="113:29" pos:end="113:55"><literal type="number" pos:start="113:29" pos:end="113:31">4</literal> <operator pos:start="113:31" pos:end="113:31">+</operator> <operator pos:start="113:33" pos:end="113:33">(</operator><name pos:start="113:34" pos:end="113:50"><name pos:start="113:34" pos:end="113:38">sconf</name><operator pos:start="113:39" pos:end="113:40">-&gt;</operator><name pos:start="113:41" pos:end="113:50">resolution</name></name> <operator pos:start="113:52" pos:end="113:52">&gt;</operator> <literal type="number" pos:start="113:54" pos:end="113:54">1</literal><operator pos:start="113:55" pos:end="113:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="115:9" pos:end="117:49">for <control pos:start="115:13" pos:end="115:40">(<init pos:start="115:14" pos:end="115:19"><expr pos:start="115:14" pos:end="115:18"><name pos:start="115:14" pos:end="115:14">k</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <literal type="number" pos:start="115:18" pos:end="115:18">1</literal></expr>;</init> <condition pos:start="115:21" pos:end="115:35"><expr pos:start="115:21" pos:end="115:34"><name pos:start="115:21" pos:end="115:21">k</name> <operator pos:start="115:23" pos:end="115:23">&lt;</operator> <name pos:start="115:25" pos:end="115:34">sub_blocks</name></expr>;</condition> <incr pos:start="115:37" pos:end="115:39"><expr pos:start="115:37" pos:end="115:39"><name pos:start="115:37" pos:end="115:37">k</name><operator pos:start="115:38" pos:end="115:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="117:13" pos:end="117:49"><block_content pos:start="117:13" pos:end="117:49">

            <expr_stmt pos:start="117:13" pos:end="117:49"><expr pos:start="117:13" pos:end="117:48"><name pos:start="117:13" pos:end="117:16"><name pos:start="117:13" pos:end="117:13">s</name><index pos:start="117:14" pos:end="117:16">[<expr pos:start="117:15" pos:end="117:15"><name pos:start="117:15" pos:end="117:15">k</name></expr>]</index></name> <operator pos:start="117:18" pos:end="117:18">=</operator> <name pos:start="117:20" pos:end="117:27"><name pos:start="117:20" pos:end="117:20">s</name><index pos:start="117:21" pos:end="117:27">[<expr pos:start="117:22" pos:end="117:26"><name pos:start="117:22" pos:end="117:22">k</name> <operator pos:start="117:24" pos:end="117:24">-</operator> <literal type="number" pos:start="117:26" pos:end="117:26">1</literal></expr>]</index></name> <operator pos:start="117:29" pos:end="117:29">+</operator> <call pos:start="117:31" pos:end="117:48"><name pos:start="117:31" pos:end="117:41">decode_rice</name><argument_list pos:start="117:42" pos:end="117:48">(<argument pos:start="117:43" pos:end="117:44"><expr pos:start="117:43" pos:end="117:44"><name pos:start="117:43" pos:end="117:44">gb</name></expr></argument>, <argument pos:start="117:47" pos:end="117:47"><expr pos:start="117:47" pos:end="117:47"><literal type="number" pos:start="117:47" pos:end="117:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="123:5" pos:end="125:45"><if pos:start="123:5" pos:end="125:45">if <condition pos:start="123:8" pos:end="123:22">(<expr pos:start="123:9" pos:end="123:21"><call pos:start="123:9" pos:end="123:21"><name pos:start="123:9" pos:end="123:17">get_bits1</name><argument_list pos:start="123:18" pos:end="123:21">(<argument pos:start="123:19" pos:end="123:20"><expr pos:start="123:19" pos:end="123:20"><name pos:start="123:19" pos:end="123:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:45"><block_content pos:start="125:9" pos:end="125:45">

        <expr_stmt pos:start="125:9" pos:end="125:45"><expr pos:start="125:9" pos:end="125:44"><name pos:start="125:9" pos:end="125:22"><name pos:start="125:9" pos:end="125:10">bd</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:22">shift_lsbs</name></name> <operator pos:start="125:24" pos:end="125:24">=</operator> <call pos:start="125:26" pos:end="125:40"><name pos:start="125:26" pos:end="125:33">get_bits</name><argument_list pos:start="125:34" pos:end="125:40">(<argument pos:start="125:35" pos:end="125:36"><expr pos:start="125:35" pos:end="125:36"><name pos:start="125:35" pos:end="125:36">gb</name></expr></argument>, <argument pos:start="125:39" pos:end="125:39"><expr pos:start="125:39" pos:end="125:39"><literal type="number" pos:start="125:39" pos:end="125:39">4</literal></expr></argument>)</argument_list></call> <operator pos:start="125:42" pos:end="125:42">+</operator> <literal type="number" pos:start="125:44" pos:end="125:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:80"><expr pos:start="129:5" pos:end="129:79"><name pos:start="129:5" pos:end="129:26"><name pos:start="129:5" pos:end="129:6">bd</name><operator pos:start="129:7" pos:end="129:8">-&gt;</operator><name pos:start="129:9" pos:end="129:26">store_prev_samples</name></name> <operator pos:start="129:28" pos:end="129:28">=</operator> <operator pos:start="129:30" pos:end="129:30">(</operator><name pos:start="129:31" pos:end="129:43"><name pos:start="129:31" pos:end="129:32">bd</name><operator pos:start="129:33" pos:end="129:34">-&gt;</operator><name pos:start="129:35" pos:end="129:43">js_blocks</name></name> <operator pos:start="129:45" pos:end="129:46">&amp;&amp;</operator> <name pos:start="129:48" pos:end="129:60"><name pos:start="129:48" pos:end="129:49">bd</name><operator pos:start="129:50" pos:end="129:51">-&gt;</operator><name pos:start="129:52" pos:end="129:60">raw_other</name></name><operator pos:start="129:61" pos:end="129:61">)</operator> <operator pos:start="129:63" pos:end="129:64">||</operator> <name pos:start="129:66" pos:end="129:79"><name pos:start="129:66" pos:end="129:67">bd</name><operator pos:start="129:68" pos:end="129:69">-&gt;</operator><name pos:start="129:70" pos:end="129:79">shift_lsbs</name></name></expr>;</expr_stmt>





    <if_stmt pos:start="135:5" pos:end="249:5"><if pos:start="135:5" pos:end="249:5">if <condition pos:start="135:8" pos:end="135:23">(<expr pos:start="135:9" pos:end="135:22"><operator pos:start="135:9" pos:end="135:9">!</operator><name pos:start="135:10" pos:end="135:22"><name pos:start="135:10" pos:end="135:14">sconf</name><operator pos:start="135:15" pos:end="135:16">-&gt;</operator><name pos:start="135:17" pos:end="135:22">rlslms</name></name></expr>)</condition> <block pos:start="135:25" pos:end="249:5">{<block_content pos:start="137:9" pos:end="247:9">

        <if_stmt pos:start="137:9" pos:end="149:9"><if pos:start="137:9" pos:end="145:9">if <condition pos:start="137:12" pos:end="137:31">(<expr pos:start="137:13" pos:end="137:30"><name pos:start="137:13" pos:end="137:30"><name pos:start="137:13" pos:end="137:17">sconf</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:30">adapt_order</name></name></expr>)</condition> <block pos:start="137:33" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:66">

            <decl_stmt pos:start="139:13" pos:end="141:74"><decl pos:start="139:13" pos:end="141:73"><type pos:start="139:13" pos:end="139:15"><name pos:start="139:13" pos:end="139:15">int</name></type> <name pos:start="139:17" pos:end="139:32">opt_order_length</name> <init pos:start="139:34" pos:end="141:73">= <expr pos:start="139:36" pos:end="141:73"><call pos:start="139:36" pos:end="141:73"><name pos:start="139:36" pos:end="139:47">av_ceil_log2</name><argument_list pos:start="139:48" pos:end="141:73">(<argument pos:start="139:49" pos:end="141:72"><expr pos:start="139:49" pos:end="141:72"><call pos:start="139:49" pos:end="141:72"><name pos:start="139:49" pos:end="139:55">av_clip</name><argument_list pos:start="139:56" pos:end="141:72">(<argument pos:start="139:57" pos:end="139:83"><expr pos:start="139:57" pos:end="139:83"><operator pos:start="139:57" pos:end="139:57">(</operator><name pos:start="139:58" pos:end="139:73"><name pos:start="139:58" pos:end="139:59">bd</name><operator pos:start="139:60" pos:end="139:61">-&gt;</operator><name pos:start="139:62" pos:end="139:73">block_length</name></name> <operator pos:start="139:75" pos:end="139:76">&gt;&gt;</operator> <literal type="number" pos:start="139:78" pos:end="139:78">3</literal><operator pos:start="139:79" pos:end="139:79">)</operator> <operator pos:start="139:81" pos:end="139:81">-</operator> <literal type="number" pos:start="139:83" pos:end="139:83">1</literal></expr></argument>,

                                                <argument pos:start="141:49" pos:end="141:49"><expr pos:start="141:49" pos:end="141:49"><literal type="number" pos:start="141:49" pos:end="141:49">2</literal></expr></argument>, <argument pos:start="141:52" pos:end="141:71"><expr pos:start="141:52" pos:end="141:71"><name pos:start="141:52" pos:end="141:67"><name pos:start="141:52" pos:end="141:56">sconf</name><operator pos:start="141:57" pos:end="141:58">-&gt;</operator><name pos:start="141:59" pos:end="141:67">max_order</name></name> <operator pos:start="141:69" pos:end="141:69">+</operator> <literal type="number" pos:start="141:71" pos:end="141:71">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:66"><expr pos:start="143:13" pos:end="143:65"><name pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:14">bd</name><operator pos:start="143:15" pos:end="143:16">-&gt;</operator><name pos:start="143:17" pos:end="143:25">opt_order</name></name>        <operator pos:start="143:34" pos:end="143:34">=</operator> <call pos:start="143:36" pos:end="143:65"><name pos:start="143:36" pos:end="143:43">get_bits</name><argument_list pos:start="143:44" pos:end="143:65">(<argument pos:start="143:45" pos:end="143:46"><expr pos:start="143:45" pos:end="143:46"><name pos:start="143:45" pos:end="143:46">gb</name></expr></argument>, <argument pos:start="143:49" pos:end="143:64"><expr pos:start="143:49" pos:end="143:64"><name pos:start="143:49" pos:end="143:64">opt_order_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="145:11" pos:end="149:9">else <block pos:start="145:16" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:45">

            <expr_stmt pos:start="147:13" pos:end="147:45"><expr pos:start="147:13" pos:end="147:44"><name pos:start="147:13" pos:end="147:25"><name pos:start="147:13" pos:end="147:14">bd</name><operator pos:start="147:15" pos:end="147:16">-&gt;</operator><name pos:start="147:17" pos:end="147:25">opt_order</name></name> <operator pos:start="147:27" pos:end="147:27">=</operator> <name pos:start="147:29" pos:end="147:44"><name pos:start="147:29" pos:end="147:33">sconf</name><operator pos:start="147:34" pos:end="147:35">-&gt;</operator><name pos:start="147:36" pos:end="147:44">max_order</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:34"><expr pos:start="153:9" pos:end="153:33"><name pos:start="153:9" pos:end="153:17">opt_order</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <name pos:start="153:21" pos:end="153:33"><name pos:start="153:21" pos:end="153:22">bd</name><operator pos:start="153:23" pos:end="153:24">-&gt;</operator><name pos:start="153:25" pos:end="153:33">opt_order</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="157:9" pos:end="247:9"><if pos:start="157:9" pos:end="247:9">if <condition pos:start="157:12" pos:end="157:22">(<expr pos:start="157:13" pos:end="157:21"><name pos:start="157:13" pos:end="157:21">opt_order</name></expr>)</condition> <block pos:start="157:24" pos:end="247:9">{<block_content pos:start="159:13" pos:end="245:71">

            <decl_stmt pos:start="159:13" pos:end="159:25"><decl pos:start="159:13" pos:end="159:24"><type pos:start="159:13" pos:end="159:15"><name pos:start="159:13" pos:end="159:15">int</name></type> <name pos:start="159:17" pos:end="159:24">add_base</name></decl>;</decl_stmt>



            <if_stmt pos:start="163:13" pos:end="239:13"><if pos:start="163:13" pos:end="189:13">if <condition pos:start="163:16" pos:end="163:39">(<expr pos:start="163:17" pos:end="163:38"><name pos:start="163:17" pos:end="163:33"><name pos:start="163:17" pos:end="163:21">sconf</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:33">coef_table</name></name> <operator pos:start="163:35" pos:end="163:36">==</operator> <literal type="number" pos:start="163:38" pos:end="163:38">3</literal></expr>)</condition> <block pos:start="163:41" pos:end="189:13">{<block_content pos:start="165:17" pos:end="187:51">

                <expr_stmt pos:start="165:17" pos:end="165:32"><expr pos:start="165:17" pos:end="165:31"><name pos:start="165:17" pos:end="165:24">add_base</name> <operator pos:start="165:26" pos:end="165:26">=</operator> <literal type="number" pos:start="165:28" pos:end="165:31">0x7F</literal></expr>;</expr_stmt>



                <comment type="line" pos:start="169:17" pos:end="169:37">// read coefficient 0</comment>

                <expr_stmt pos:start="171:17" pos:end="171:74"><expr pos:start="171:17" pos:end="171:73"><name pos:start="171:17" pos:end="171:28"><name pos:start="171:17" pos:end="171:25">quant_cof</name><index pos:start="171:26" pos:end="171:28">[<expr pos:start="171:27" pos:end="171:27"><literal type="number" pos:start="171:27" pos:end="171:27">0</literal></expr>]</index></name> <operator pos:start="171:30" pos:end="171:30">=</operator> <literal type="number" pos:start="171:32" pos:end="171:33">32</literal> <operator pos:start="171:35" pos:end="171:35">*</operator> <name pos:start="171:37" pos:end="171:73"><name pos:start="171:37" pos:end="171:56">parcor_scaled_values</name><index pos:start="171:57" pos:end="171:73">[<expr pos:start="171:58" pos:end="171:72"><call pos:start="171:58" pos:end="171:72"><name pos:start="171:58" pos:end="171:65">get_bits</name><argument_list pos:start="171:66" pos:end="171:72">(<argument pos:start="171:67" pos:end="171:68"><expr pos:start="171:67" pos:end="171:68"><name pos:start="171:67" pos:end="171:68">gb</name></expr></argument>, <argument pos:start="171:71" pos:end="171:71"><expr pos:start="171:71" pos:end="171:71"><literal type="number" pos:start="171:71" pos:end="171:71">7</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>



                <comment type="line" pos:start="175:17" pos:end="175:37">// read coefficient 1</comment>

                <if_stmt pos:start="177:17" pos:end="179:79"><if pos:start="177:17" pos:end="179:79">if <condition pos:start="177:20" pos:end="177:34">(<expr pos:start="177:21" pos:end="177:33"><name pos:start="177:21" pos:end="177:29">opt_order</name> <operator pos:start="177:31" pos:end="177:31">&gt;</operator> <literal type="number" pos:start="177:33" pos:end="177:33">1</literal></expr>)</condition><block type="pseudo" pos:start="179:21" pos:end="179:79"><block_content pos:start="179:21" pos:end="179:79">

                    <expr_stmt pos:start="179:21" pos:end="179:79"><expr pos:start="179:21" pos:end="179:78"><name pos:start="179:21" pos:end="179:32"><name pos:start="179:21" pos:end="179:29">quant_cof</name><index pos:start="179:30" pos:end="179:32">[<expr pos:start="179:31" pos:end="179:31"><literal type="number" pos:start="179:31" pos:end="179:31">1</literal></expr>]</index></name> <operator pos:start="179:34" pos:end="179:34">=</operator> <operator pos:start="179:36" pos:end="179:36">-</operator><literal type="number" pos:start="179:37" pos:end="179:38">32</literal> <operator pos:start="179:40" pos:end="179:40">*</operator> <name pos:start="179:42" pos:end="179:78"><name pos:start="179:42" pos:end="179:61">parcor_scaled_values</name><index pos:start="179:62" pos:end="179:78">[<expr pos:start="179:63" pos:end="179:77"><call pos:start="179:63" pos:end="179:77"><name pos:start="179:63" pos:end="179:70">get_bits</name><argument_list pos:start="179:71" pos:end="179:77">(<argument pos:start="179:72" pos:end="179:73"><expr pos:start="179:72" pos:end="179:73"><name pos:start="179:72" pos:end="179:73">gb</name></expr></argument>, <argument pos:start="179:76" pos:end="179:76"><expr pos:start="179:76" pos:end="179:76"><literal type="number" pos:start="179:76" pos:end="179:76">7</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <comment type="line" pos:start="183:17" pos:end="183:51">// read coefficients 2 to opt_order</comment>

                <for pos:start="185:17" pos:end="187:51">for <control pos:start="185:21" pos:end="185:47">(<init pos:start="185:22" pos:end="185:27"><expr pos:start="185:22" pos:end="185:26"><name pos:start="185:22" pos:end="185:22">k</name> <operator pos:start="185:24" pos:end="185:24">=</operator> <literal type="number" pos:start="185:26" pos:end="185:26">2</literal></expr>;</init> <condition pos:start="185:29" pos:end="185:42"><expr pos:start="185:29" pos:end="185:41"><name pos:start="185:29" pos:end="185:29">k</name> <operator pos:start="185:31" pos:end="185:31">&lt;</operator> <name pos:start="185:33" pos:end="185:41">opt_order</name></expr>;</condition> <incr pos:start="185:44" pos:end="185:46"><expr pos:start="185:44" pos:end="185:46"><name pos:start="185:44" pos:end="185:44">k</name><operator pos:start="185:45" pos:end="185:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="187:21" pos:end="187:51"><block_content pos:start="187:21" pos:end="187:51">

                    <expr_stmt pos:start="187:21" pos:end="187:51"><expr pos:start="187:21" pos:end="187:50"><name pos:start="187:21" pos:end="187:32"><name pos:start="187:21" pos:end="187:29">quant_cof</name><index pos:start="187:30" pos:end="187:32">[<expr pos:start="187:31" pos:end="187:31"><name pos:start="187:31" pos:end="187:31">k</name></expr>]</index></name> <operator pos:start="187:34" pos:end="187:34">=</operator> <call pos:start="187:36" pos:end="187:50"><name pos:start="187:36" pos:end="187:43">get_bits</name><argument_list pos:start="187:44" pos:end="187:50">(<argument pos:start="187:45" pos:end="187:46"><expr pos:start="187:45" pos:end="187:46"><name pos:start="187:45" pos:end="187:46">gb</name></expr></argument>, <argument pos:start="187:49" pos:end="187:49"><expr pos:start="187:49" pos:end="187:49"><literal type="number" pos:start="187:49" pos:end="187:49">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if> <else pos:start="189:15" pos:end="239:13">else <block pos:start="189:20" pos:end="239:13">{<block_content pos:start="191:17" pos:end="237:81">

                <decl_stmt pos:start="191:17" pos:end="191:26"><decl pos:start="191:17" pos:end="191:25"><type pos:start="191:17" pos:end="191:19"><name pos:start="191:17" pos:end="191:19">int</name></type> <name pos:start="191:21" pos:end="191:25">k_max</name></decl>;</decl_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:29"><expr pos:start="193:17" pos:end="193:28"><name pos:start="193:17" pos:end="193:24">add_base</name> <operator pos:start="193:26" pos:end="193:26">=</operator> <literal type="number" pos:start="193:28" pos:end="193:28">1</literal></expr>;</expr_stmt>



                <comment type="line" pos:start="197:17" pos:end="197:43">// read coefficient 0 to 19</comment>

                <expr_stmt pos:start="199:17" pos:end="199:45"><expr pos:start="199:17" pos:end="199:44"><name pos:start="199:17" pos:end="199:21">k_max</name> <operator pos:start="199:23" pos:end="199:23">=</operator> <call pos:start="199:25" pos:end="199:44"><name pos:start="199:25" pos:end="199:29">FFMIN</name><argument_list pos:start="199:30" pos:end="199:44">(<argument pos:start="199:31" pos:end="199:39"><expr pos:start="199:31" pos:end="199:39"><name pos:start="199:31" pos:end="199:39">opt_order</name></expr></argument>, <argument pos:start="199:42" pos:end="199:43"><expr pos:start="199:42" pos:end="199:43"><literal type="number" pos:start="199:42" pos:end="199:43">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="201:17" pos:end="209:17">for <control pos:start="201:21" pos:end="201:43">(<init pos:start="201:22" pos:end="201:27"><expr pos:start="201:22" pos:end="201:26"><name pos:start="201:22" pos:end="201:22">k</name> <operator pos:start="201:24" pos:end="201:24">=</operator> <literal type="number" pos:start="201:26" pos:end="201:26">0</literal></expr>;</init> <condition pos:start="201:29" pos:end="201:38"><expr pos:start="201:29" pos:end="201:37"><name pos:start="201:29" pos:end="201:29">k</name> <operator pos:start="201:31" pos:end="201:31">&lt;</operator> <name pos:start="201:33" pos:end="201:37">k_max</name></expr>;</condition> <incr pos:start="201:40" pos:end="201:42"><expr pos:start="201:40" pos:end="201:42"><name pos:start="201:40" pos:end="201:40">k</name><operator pos:start="201:41" pos:end="201:42">++</operator></expr></incr>)</control> <block pos:start="201:45" pos:end="209:17">{<block_content pos:start="203:21" pos:end="207:72">

                    <decl_stmt pos:start="203:21" pos:end="203:80"><decl pos:start="203:21" pos:end="203:79"><type pos:start="203:21" pos:end="203:23"><name pos:start="203:21" pos:end="203:23">int</name></type> <name pos:start="203:25" pos:end="203:34">rice_param</name> <init pos:start="203:36" pos:end="203:79">= <expr pos:start="203:38" pos:end="203:79"><name pos:start="203:38" pos:end="203:79"><name pos:start="203:38" pos:end="203:54">parcor_rice_table</name><index pos:start="203:55" pos:end="203:73">[<expr pos:start="203:56" pos:end="203:72"><name pos:start="203:56" pos:end="203:72"><name pos:start="203:56" pos:end="203:60">sconf</name><operator pos:start="203:61" pos:end="203:62">-&gt;</operator><name pos:start="203:63" pos:end="203:72">coef_table</name></name></expr>]</index><index pos:start="203:74" pos:end="203:76">[<expr pos:start="203:75" pos:end="203:75"><name pos:start="203:75" pos:end="203:75">k</name></expr>]</index><index pos:start="203:77" pos:end="203:79">[<expr pos:start="203:78" pos:end="203:78"><literal type="number" pos:start="203:78" pos:end="203:78">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="205:21" pos:end="205:80"><decl pos:start="205:21" pos:end="205:79"><type pos:start="205:21" pos:end="205:23"><name pos:start="205:21" pos:end="205:23">int</name></type> <name pos:start="205:25" pos:end="205:30">offset</name>     <init pos:start="205:36" pos:end="205:79">= <expr pos:start="205:38" pos:end="205:79"><name pos:start="205:38" pos:end="205:79"><name pos:start="205:38" pos:end="205:54">parcor_rice_table</name><index pos:start="205:55" pos:end="205:73">[<expr pos:start="205:56" pos:end="205:72"><name pos:start="205:56" pos:end="205:72"><name pos:start="205:56" pos:end="205:60">sconf</name><operator pos:start="205:61" pos:end="205:62">-&gt;</operator><name pos:start="205:63" pos:end="205:72">coef_table</name></name></expr>]</index><index pos:start="205:74" pos:end="205:76">[<expr pos:start="205:75" pos:end="205:75"><name pos:start="205:75" pos:end="205:75">k</name></expr>]</index><index pos:start="205:77" pos:end="205:79">[<expr pos:start="205:78" pos:end="205:78"><literal type="number" pos:start="205:78" pos:end="205:78">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:72"><expr pos:start="207:21" pos:end="207:71"><name pos:start="207:21" pos:end="207:32"><name pos:start="207:21" pos:end="207:29">quant_cof</name><index pos:start="207:30" pos:end="207:32">[<expr pos:start="207:31" pos:end="207:31"><name pos:start="207:31" pos:end="207:31">k</name></expr>]</index></name> <operator pos:start="207:34" pos:end="207:34">=</operator> <call pos:start="207:36" pos:end="207:62"><name pos:start="207:36" pos:end="207:46">decode_rice</name><argument_list pos:start="207:47" pos:end="207:62">(<argument pos:start="207:48" pos:end="207:49"><expr pos:start="207:48" pos:end="207:49"><name pos:start="207:48" pos:end="207:49">gb</name></expr></argument>, <argument pos:start="207:52" pos:end="207:61"><expr pos:start="207:52" pos:end="207:61"><name pos:start="207:52" pos:end="207:61">rice_param</name></expr></argument>)</argument_list></call> <operator pos:start="207:64" pos:end="207:64">+</operator> <name pos:start="207:66" pos:end="207:71">offset</name></expr>;</expr_stmt>

                </block_content>}</block></for>



                <comment type="line" pos:start="213:17" pos:end="213:46">// read coefficients 20 to 126</comment>

                <expr_stmt pos:start="215:17" pos:end="215:46"><expr pos:start="215:17" pos:end="215:45"><name pos:start="215:17" pos:end="215:21">k_max</name> <operator pos:start="215:23" pos:end="215:23">=</operator> <call pos:start="215:25" pos:end="215:45"><name pos:start="215:25" pos:end="215:29">FFMIN</name><argument_list pos:start="215:30" pos:end="215:45">(<argument pos:start="215:31" pos:end="215:39"><expr pos:start="215:31" pos:end="215:39"><name pos:start="215:31" pos:end="215:39">opt_order</name></expr></argument>, <argument pos:start="215:42" pos:end="215:44"><expr pos:start="215:42" pos:end="215:44"><literal type="number" pos:start="215:42" pos:end="215:44">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="217:17" pos:end="219:64">for <control pos:start="217:21" pos:end="217:38">(<init pos:start="217:22" pos:end="217:22">;</init> <condition pos:start="217:24" pos:end="217:33"><expr pos:start="217:24" pos:end="217:32"><name pos:start="217:24" pos:end="217:24">k</name> <operator pos:start="217:26" pos:end="217:26">&lt;</operator> <name pos:start="217:28" pos:end="217:32">k_max</name></expr>;</condition> <incr pos:start="217:35" pos:end="217:37"><expr pos:start="217:35" pos:end="217:37"><name pos:start="217:35" pos:end="217:35">k</name><operator pos:start="217:36" pos:end="217:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="219:21" pos:end="219:64"><block_content pos:start="219:21" pos:end="219:64">

                    <expr_stmt pos:start="219:21" pos:end="219:64"><expr pos:start="219:21" pos:end="219:63"><name pos:start="219:21" pos:end="219:32"><name pos:start="219:21" pos:end="219:29">quant_cof</name><index pos:start="219:30" pos:end="219:32">[<expr pos:start="219:31" pos:end="219:31"><name pos:start="219:31" pos:end="219:31">k</name></expr>]</index></name> <operator pos:start="219:34" pos:end="219:34">=</operator> <call pos:start="219:36" pos:end="219:53"><name pos:start="219:36" pos:end="219:46">decode_rice</name><argument_list pos:start="219:47" pos:end="219:53">(<argument pos:start="219:48" pos:end="219:49"><expr pos:start="219:48" pos:end="219:49"><name pos:start="219:48" pos:end="219:49">gb</name></expr></argument>, <argument pos:start="219:52" pos:end="219:52"><expr pos:start="219:52" pos:end="219:52"><literal type="number" pos:start="219:52" pos:end="219:52">2</literal></expr></argument>)</argument_list></call> <operator pos:start="219:55" pos:end="219:55">+</operator> <operator pos:start="219:57" pos:end="219:57">(</operator><name pos:start="219:58" pos:end="219:58">k</name> <operator pos:start="219:60" pos:end="219:60">&amp;</operator> <literal type="number" pos:start="219:62" pos:end="219:62">1</literal><operator pos:start="219:63" pos:end="219:63">)</operator></expr>;</expr_stmt></block_content></block></for>



                <comment type="line" pos:start="223:17" pos:end="223:53">// read coefficients 127 to opt_order</comment>

                <for pos:start="225:17" pos:end="227:54">for <control pos:start="225:21" pos:end="225:42">(<init pos:start="225:22" pos:end="225:22">;</init> <condition pos:start="225:24" pos:end="225:37"><expr pos:start="225:24" pos:end="225:36"><name pos:start="225:24" pos:end="225:24">k</name> <operator pos:start="225:26" pos:end="225:26">&lt;</operator> <name pos:start="225:28" pos:end="225:36">opt_order</name></expr>;</condition> <incr pos:start="225:39" pos:end="225:41"><expr pos:start="225:39" pos:end="225:41"><name pos:start="225:39" pos:end="225:39">k</name><operator pos:start="225:40" pos:end="225:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="227:21" pos:end="227:54"><block_content pos:start="227:21" pos:end="227:54">

                    <expr_stmt pos:start="227:21" pos:end="227:54"><expr pos:start="227:21" pos:end="227:53"><name pos:start="227:21" pos:end="227:32"><name pos:start="227:21" pos:end="227:29">quant_cof</name><index pos:start="227:30" pos:end="227:32">[<expr pos:start="227:31" pos:end="227:31"><name pos:start="227:31" pos:end="227:31">k</name></expr>]</index></name> <operator pos:start="227:34" pos:end="227:34">=</operator> <call pos:start="227:36" pos:end="227:53"><name pos:start="227:36" pos:end="227:46">decode_rice</name><argument_list pos:start="227:47" pos:end="227:53">(<argument pos:start="227:48" pos:end="227:49"><expr pos:start="227:48" pos:end="227:49"><name pos:start="227:48" pos:end="227:49">gb</name></expr></argument>, <argument pos:start="227:52" pos:end="227:52"><expr pos:start="227:52" pos:end="227:52"><literal type="number" pos:start="227:52" pos:end="227:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



                <expr_stmt pos:start="231:17" pos:end="231:76"><expr pos:start="231:17" pos:end="231:75"><name pos:start="231:17" pos:end="231:28"><name pos:start="231:17" pos:end="231:25">quant_cof</name><index pos:start="231:26" pos:end="231:28">[<expr pos:start="231:27" pos:end="231:27"><literal type="number" pos:start="231:27" pos:end="231:27">0</literal></expr>]</index></name> <operator pos:start="231:30" pos:end="231:30">=</operator> <literal type="number" pos:start="231:32" pos:end="231:33">32</literal> <operator pos:start="231:35" pos:end="231:35">*</operator> <name pos:start="231:37" pos:end="231:75"><name pos:start="231:37" pos:end="231:56">parcor_scaled_values</name><index pos:start="231:57" pos:end="231:75">[<expr pos:start="231:58" pos:end="231:74"><name pos:start="231:58" pos:end="231:69"><name pos:start="231:58" pos:end="231:66">quant_cof</name><index pos:start="231:67" pos:end="231:69">[<expr pos:start="231:68" pos:end="231:68"><literal type="number" pos:start="231:68" pos:end="231:68">0</literal></expr>]</index></name> <operator pos:start="231:71" pos:end="231:71">+</operator> <literal type="number" pos:start="231:73" pos:end="231:74">64</literal></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="235:17" pos:end="237:81"><if pos:start="235:17" pos:end="237:81">if <condition pos:start="235:20" pos:end="235:34">(<expr pos:start="235:21" pos:end="235:33"><name pos:start="235:21" pos:end="235:29">opt_order</name> <operator pos:start="235:31" pos:end="235:31">&gt;</operator> <literal type="number" pos:start="235:33" pos:end="235:33">1</literal></expr>)</condition><block type="pseudo" pos:start="237:21" pos:end="237:81"><block_content pos:start="237:21" pos:end="237:81">

                    <expr_stmt pos:start="237:21" pos:end="237:81"><expr pos:start="237:21" pos:end="237:80"><name pos:start="237:21" pos:end="237:32"><name pos:start="237:21" pos:end="237:29">quant_cof</name><index pos:start="237:30" pos:end="237:32">[<expr pos:start="237:31" pos:end="237:31"><literal type="number" pos:start="237:31" pos:end="237:31">1</literal></expr>]</index></name> <operator pos:start="237:34" pos:end="237:34">=</operator> <operator pos:start="237:36" pos:end="237:36">-</operator><literal type="number" pos:start="237:37" pos:end="237:38">32</literal> <operator pos:start="237:40" pos:end="237:40">*</operator> <name pos:start="237:42" pos:end="237:80"><name pos:start="237:42" pos:end="237:61">parcor_scaled_values</name><index pos:start="237:62" pos:end="237:80">[<expr pos:start="237:63" pos:end="237:79"><name pos:start="237:63" pos:end="237:74"><name pos:start="237:63" pos:end="237:71">quant_cof</name><index pos:start="237:72" pos:end="237:74">[<expr pos:start="237:73" pos:end="237:73"><literal type="number" pos:start="237:73" pos:end="237:73">1</literal></expr>]</index></name> <operator pos:start="237:76" pos:end="237:76">+</operator> <literal type="number" pos:start="237:78" pos:end="237:79">64</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <for pos:start="243:13" pos:end="245:71">for <control pos:start="243:17" pos:end="243:43">(<init pos:start="243:18" pos:end="243:23"><expr pos:start="243:18" pos:end="243:22"><name pos:start="243:18" pos:end="243:18">k</name> <operator pos:start="243:20" pos:end="243:20">=</operator> <literal type="number" pos:start="243:22" pos:end="243:22">2</literal></expr>;</init> <condition pos:start="243:25" pos:end="243:38"><expr pos:start="243:25" pos:end="243:37"><name pos:start="243:25" pos:end="243:25">k</name> <operator pos:start="243:27" pos:end="243:27">&lt;</operator> <name pos:start="243:29" pos:end="243:37">opt_order</name></expr>;</condition> <incr pos:start="243:40" pos:end="243:42"><expr pos:start="243:40" pos:end="243:42"><name pos:start="243:40" pos:end="243:40">k</name><operator pos:start="243:41" pos:end="243:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="245:17" pos:end="245:71"><block_content pos:start="245:17" pos:end="245:71">

                <expr_stmt pos:start="245:17" pos:end="245:71"><expr pos:start="245:17" pos:end="245:70"><name pos:start="245:17" pos:end="245:28"><name pos:start="245:17" pos:end="245:25">quant_cof</name><index pos:start="245:26" pos:end="245:28">[<expr pos:start="245:27" pos:end="245:27"><name pos:start="245:27" pos:end="245:27">k</name></expr>]</index></name> <operator pos:start="245:30" pos:end="245:30">=</operator> <operator pos:start="245:32" pos:end="245:32">(</operator><name pos:start="245:33" pos:end="245:44"><name pos:start="245:33" pos:end="245:41">quant_cof</name><index pos:start="245:42" pos:end="245:44">[<expr pos:start="245:43" pos:end="245:43"><name pos:start="245:43" pos:end="245:43">k</name></expr>]</index></name> <operator pos:start="245:46" pos:end="245:47">&lt;&lt;</operator> <literal type="number" pos:start="245:49" pos:end="245:50">14</literal><operator pos:start="245:51" pos:end="245:51">)</operator> <operator pos:start="245:53" pos:end="245:53">+</operator> <operator pos:start="245:55" pos:end="245:55">(</operator><name pos:start="245:56" pos:end="245:63">add_base</name> <operator pos:start="245:65" pos:end="245:66">&lt;&lt;</operator> <literal type="number" pos:start="245:68" pos:end="245:69">13</literal><operator pos:start="245:70" pos:end="245:70">)</operator></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="253:5" pos:end="253:35">// read LTP gain and lag values</comment>

    <if_stmt pos:start="255:5" pos:end="285:5"><if pos:start="255:5" pos:end="285:5">if <condition pos:start="255:8" pos:end="255:36">(<expr pos:start="255:9" pos:end="255:35"><name pos:start="255:9" pos:end="255:35"><name pos:start="255:9" pos:end="255:13">sconf</name><operator pos:start="255:14" pos:end="255:15">-&gt;</operator><name pos:start="255:16" pos:end="255:35">long_term_prediction</name></name></expr>)</condition> <block pos:start="255:38" pos:end="285:5">{<block_content pos:start="257:9" pos:end="283:9">

        <expr_stmt pos:start="257:9" pos:end="257:37"><expr pos:start="257:9" pos:end="257:36"><operator pos:start="257:9" pos:end="257:9">*</operator><name pos:start="257:10" pos:end="257:20"><name pos:start="257:10" pos:end="257:11">bd</name><operator pos:start="257:12" pos:end="257:13">-&gt;</operator><name pos:start="257:14" pos:end="257:20">use_ltp</name></name> <operator pos:start="257:22" pos:end="257:22">=</operator> <call pos:start="257:24" pos:end="257:36"><name pos:start="257:24" pos:end="257:32">get_bits1</name><argument_list pos:start="257:33" pos:end="257:36">(<argument pos:start="257:34" pos:end="257:35"><expr pos:start="257:34" pos:end="257:35"><name pos:start="257:34" pos:end="257:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="261:9" pos:end="283:9"><if pos:start="261:9" pos:end="283:9">if <condition pos:start="261:12" pos:end="261:25">(<expr pos:start="261:13" pos:end="261:24"><operator pos:start="261:13" pos:end="261:13">*</operator><name pos:start="261:14" pos:end="261:24"><name pos:start="261:14" pos:end="261:15">bd</name><operator pos:start="261:16" pos:end="261:17">-&gt;</operator><name pos:start="261:18" pos:end="261:24">use_ltp</name></name></expr>)</condition> <block pos:start="261:27" pos:end="283:9">{<block_content pos:start="263:13" pos:end="281:56">

            <expr_stmt pos:start="263:13" pos:end="263:56"><expr pos:start="263:13" pos:end="263:55"><name pos:start="263:13" pos:end="263:27"><name pos:start="263:13" pos:end="263:14">bd</name><operator pos:start="263:15" pos:end="263:16">-&gt;</operator><name pos:start="263:17" pos:end="263:24">ltp_gain</name><index pos:start="263:25" pos:end="263:27">[<expr pos:start="263:26" pos:end="263:26"><literal type="number" pos:start="263:26" pos:end="263:26">0</literal></expr>]</index></name>   <operator pos:start="263:31" pos:end="263:31">=</operator> <call pos:start="263:33" pos:end="263:50"><name pos:start="263:33" pos:end="263:43">decode_rice</name><argument_list pos:start="263:44" pos:end="263:50">(<argument pos:start="263:45" pos:end="263:46"><expr pos:start="263:45" pos:end="263:46"><name pos:start="263:45" pos:end="263:46">gb</name></expr></argument>, <argument pos:start="263:49" pos:end="263:49"><expr pos:start="263:49" pos:end="263:49"><literal type="number" pos:start="263:49" pos:end="263:49">1</literal></expr></argument>)</argument_list></call> <operator pos:start="263:52" pos:end="263:53">&lt;&lt;</operator> <literal type="number" pos:start="263:55" pos:end="263:55">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:56"><expr pos:start="265:13" pos:end="265:55"><name pos:start="265:13" pos:end="265:27"><name pos:start="265:13" pos:end="265:14">bd</name><operator pos:start="265:15" pos:end="265:16">-&gt;</operator><name pos:start="265:17" pos:end="265:24">ltp_gain</name><index pos:start="265:25" pos:end="265:27">[<expr pos:start="265:26" pos:end="265:26"><literal type="number" pos:start="265:26" pos:end="265:26">1</literal></expr>]</index></name>   <operator pos:start="265:31" pos:end="265:31">=</operator> <call pos:start="265:33" pos:end="265:50"><name pos:start="265:33" pos:end="265:43">decode_rice</name><argument_list pos:start="265:44" pos:end="265:50">(<argument pos:start="265:45" pos:end="265:46"><expr pos:start="265:45" pos:end="265:46"><name pos:start="265:45" pos:end="265:46">gb</name></expr></argument>, <argument pos:start="265:49" pos:end="265:49"><expr pos:start="265:49" pos:end="265:49"><literal type="number" pos:start="265:49" pos:end="265:49">2</literal></expr></argument>)</argument_list></call> <operator pos:start="265:52" pos:end="265:53">&lt;&lt;</operator> <literal type="number" pos:start="265:55" pos:end="265:55">3</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="269:13" pos:end="269:86"><expr pos:start="269:13" pos:end="269:85"><name pos:start="269:13" pos:end="269:27"><name pos:start="269:13" pos:end="269:14">bd</name><operator pos:start="269:15" pos:end="269:16">-&gt;</operator><name pos:start="269:17" pos:end="269:24">ltp_gain</name><index pos:start="269:25" pos:end="269:27">[<expr pos:start="269:26" pos:end="269:26"><literal type="number" pos:start="269:26" pos:end="269:26">2</literal></expr>]</index></name>   <operator pos:start="269:31" pos:end="269:31">=</operator> <name pos:start="269:33" pos:end="269:85"><name pos:start="269:33" pos:end="269:47">ltp_gain_values</name><index pos:start="269:48" pos:end="269:68">[<expr pos:start="269:49" pos:end="269:67"><call pos:start="269:49" pos:end="269:67"><name pos:start="269:49" pos:end="269:57">get_unary</name><argument_list pos:start="269:58" pos:end="269:67">(<argument pos:start="269:59" pos:end="269:60"><expr pos:start="269:59" pos:end="269:60"><name pos:start="269:59" pos:end="269:60">gb</name></expr></argument>, <argument pos:start="269:63" pos:end="269:63"><expr pos:start="269:63" pos:end="269:63"><literal type="number" pos:start="269:63" pos:end="269:63">0</literal></expr></argument>, <argument pos:start="269:66" pos:end="269:66"><expr pos:start="269:66" pos:end="269:66"><literal type="number" pos:start="269:66" pos:end="269:66">4</literal></expr></argument>)</argument_list></call></expr>]</index><index pos:start="269:69" pos:end="269:85">[<expr pos:start="269:70" pos:end="269:84"><call pos:start="269:70" pos:end="269:84"><name pos:start="269:70" pos:end="269:77">get_bits</name><argument_list pos:start="269:78" pos:end="269:84">(<argument pos:start="269:79" pos:end="269:80"><expr pos:start="269:79" pos:end="269:80"><name pos:start="269:79" pos:end="269:80">gb</name></expr></argument>, <argument pos:start="269:83" pos:end="269:83"><expr pos:start="269:83" pos:end="269:83"><literal type="number" pos:start="269:83" pos:end="269:83">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="273:13" pos:end="273:56"><expr pos:start="273:13" pos:end="273:55"><name pos:start="273:13" pos:end="273:27"><name pos:start="273:13" pos:end="273:14">bd</name><operator pos:start="273:15" pos:end="273:16">-&gt;</operator><name pos:start="273:17" pos:end="273:24">ltp_gain</name><index pos:start="273:25" pos:end="273:27">[<expr pos:start="273:26" pos:end="273:26"><literal type="number" pos:start="273:26" pos:end="273:26">3</literal></expr>]</index></name>   <operator pos:start="273:31" pos:end="273:31">=</operator> <call pos:start="273:33" pos:end="273:50"><name pos:start="273:33" pos:end="273:43">decode_rice</name><argument_list pos:start="273:44" pos:end="273:50">(<argument pos:start="273:45" pos:end="273:46"><expr pos:start="273:45" pos:end="273:46"><name pos:start="273:45" pos:end="273:46">gb</name></expr></argument>, <argument pos:start="273:49" pos:end="273:49"><expr pos:start="273:49" pos:end="273:49"><literal type="number" pos:start="273:49" pos:end="273:49">2</literal></expr></argument>)</argument_list></call> <operator pos:start="273:52" pos:end="273:53">&lt;&lt;</operator> <literal type="number" pos:start="273:55" pos:end="273:55">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:56"><expr pos:start="275:13" pos:end="275:55"><name pos:start="275:13" pos:end="275:27"><name pos:start="275:13" pos:end="275:14">bd</name><operator pos:start="275:15" pos:end="275:16">-&gt;</operator><name pos:start="275:17" pos:end="275:24">ltp_gain</name><index pos:start="275:25" pos:end="275:27">[<expr pos:start="275:26" pos:end="275:26"><literal type="number" pos:start="275:26" pos:end="275:26">4</literal></expr>]</index></name>   <operator pos:start="275:31" pos:end="275:31">=</operator> <call pos:start="275:33" pos:end="275:50"><name pos:start="275:33" pos:end="275:43">decode_rice</name><argument_list pos:start="275:44" pos:end="275:50">(<argument pos:start="275:45" pos:end="275:46"><expr pos:start="275:45" pos:end="275:46"><name pos:start="275:45" pos:end="275:46">gb</name></expr></argument>, <argument pos:start="275:49" pos:end="275:49"><expr pos:start="275:49" pos:end="275:49"><literal type="number" pos:start="275:49" pos:end="275:49">1</literal></expr></argument>)</argument_list></call> <operator pos:start="275:52" pos:end="275:53">&lt;&lt;</operator> <literal type="number" pos:start="275:55" pos:end="275:55">3</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="279:13" pos:end="279:66"><expr pos:start="279:13" pos:end="279:65"><operator pos:start="279:13" pos:end="279:13">*</operator><name pos:start="279:14" pos:end="279:24"><name pos:start="279:14" pos:end="279:15">bd</name><operator pos:start="279:16" pos:end="279:17">-&gt;</operator><name pos:start="279:18" pos:end="279:24">ltp_lag</name></name>      <operator pos:start="279:31" pos:end="279:31">=</operator> <call pos:start="279:33" pos:end="279:65"><name pos:start="279:33" pos:end="279:40">get_bits</name><argument_list pos:start="279:41" pos:end="279:65">(<argument pos:start="279:42" pos:end="279:43"><expr pos:start="279:42" pos:end="279:43"><name pos:start="279:42" pos:end="279:43">gb</name></expr></argument>, <argument pos:start="279:46" pos:end="279:64"><expr pos:start="279:46" pos:end="279:64"><name pos:start="279:46" pos:end="279:64"><name pos:start="279:46" pos:end="279:48">ctx</name><operator pos:start="279:49" pos:end="279:50">-&gt;</operator><name pos:start="279:51" pos:end="279:64">ltp_lag_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:56"><expr pos:start="281:13" pos:end="281:55"><operator pos:start="281:13" pos:end="281:13">*</operator><name pos:start="281:14" pos:end="281:24"><name pos:start="281:14" pos:end="281:15">bd</name><operator pos:start="281:16" pos:end="281:17">-&gt;</operator><name pos:start="281:18" pos:end="281:24">ltp_lag</name></name>     <operator pos:start="281:30" pos:end="281:31">+=</operator> <call pos:start="281:33" pos:end="281:55"><name pos:start="281:33" pos:end="281:37">FFMAX</name><argument_list pos:start="281:38" pos:end="281:55">(<argument pos:start="281:39" pos:end="281:39"><expr pos:start="281:39" pos:end="281:39"><literal type="number" pos:start="281:39" pos:end="281:39">4</literal></expr></argument>, <argument pos:start="281:42" pos:end="281:54"><expr pos:start="281:42" pos:end="281:54"><name pos:start="281:42" pos:end="281:50">opt_order</name> <operator pos:start="281:52" pos:end="281:52">+</operator> <literal type="number" pos:start="281:54" pos:end="281:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="289:5" pos:end="289:70">// read first value and residuals in case of a random access block</comment>

    <if_stmt pos:start="291:5" pos:end="309:5"><if pos:start="291:5" pos:end="309:5">if <condition pos:start="291:8" pos:end="291:21">(<expr pos:start="291:9" pos:end="291:20"><name pos:start="291:9" pos:end="291:20"><name pos:start="291:9" pos:end="291:10">bd</name><operator pos:start="291:11" pos:end="291:12">-&gt;</operator><name pos:start="291:13" pos:end="291:20">ra_block</name></name></expr>)</condition> <block pos:start="291:23" pos:end="309:5">{<block_content pos:start="293:9" pos:end="307:36">

        <if_stmt pos:start="293:9" pos:end="295:81"><if pos:start="293:9" pos:end="295:81">if <condition pos:start="293:12" pos:end="293:22">(<expr pos:start="293:13" pos:end="293:21"><name pos:start="293:13" pos:end="293:21">opt_order</name></expr>)</condition><block type="pseudo" pos:start="295:13" pos:end="295:81"><block_content pos:start="295:13" pos:end="295:81">

            <expr_stmt pos:start="295:13" pos:end="295:81"><expr pos:start="295:13" pos:end="295:80"><name pos:start="295:13" pos:end="295:30"><name pos:start="295:13" pos:end="295:14">bd</name><operator pos:start="295:15" pos:end="295:16">-&gt;</operator><name pos:start="295:17" pos:end="295:27">raw_samples</name><index pos:start="295:28" pos:end="295:30">[<expr pos:start="295:29" pos:end="295:29"><literal type="number" pos:start="295:29" pos:end="295:29">0</literal></expr>]</index></name> <operator pos:start="295:32" pos:end="295:32">=</operator> <call pos:start="295:34" pos:end="295:80"><name pos:start="295:34" pos:end="295:44">decode_rice</name><argument_list pos:start="295:45" pos:end="295:80">(<argument pos:start="295:46" pos:end="295:47"><expr pos:start="295:46" pos:end="295:47"><name pos:start="295:46" pos:end="295:47">gb</name></expr></argument>, <argument pos:start="295:50" pos:end="295:79"><expr pos:start="295:50" pos:end="295:79"><name pos:start="295:50" pos:end="295:75"><name pos:start="295:50" pos:end="295:54">avctx</name><operator pos:start="295:55" pos:end="295:56">-&gt;</operator><name pos:start="295:57" pos:end="295:75">bits_per_raw_sample</name></name> <operator pos:start="295:77" pos:end="295:77">-</operator> <literal type="number" pos:start="295:79" pos:end="295:79">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="297:9" pos:end="299:59"><if pos:start="297:9" pos:end="299:59">if <condition pos:start="297:12" pos:end="297:26">(<expr pos:start="297:13" pos:end="297:25"><name pos:start="297:13" pos:end="297:21">opt_order</name> <operator pos:start="297:23" pos:end="297:23">&gt;</operator> <literal type="number" pos:start="297:25" pos:end="297:25">1</literal></expr>)</condition><block type="pseudo" pos:start="299:13" pos:end="299:59"><block_content pos:start="299:13" pos:end="299:59">

            <expr_stmt pos:start="299:13" pos:end="299:59"><expr pos:start="299:13" pos:end="299:58"><name pos:start="299:13" pos:end="299:30"><name pos:start="299:13" pos:end="299:14">bd</name><operator pos:start="299:15" pos:end="299:16">-&gt;</operator><name pos:start="299:17" pos:end="299:27">raw_samples</name><index pos:start="299:28" pos:end="299:30">[<expr pos:start="299:29" pos:end="299:29"><literal type="number" pos:start="299:29" pos:end="299:29">1</literal></expr>]</index></name> <operator pos:start="299:32" pos:end="299:32">=</operator> <call pos:start="299:34" pos:end="299:58"><name pos:start="299:34" pos:end="299:44">decode_rice</name><argument_list pos:start="299:45" pos:end="299:58">(<argument pos:start="299:46" pos:end="299:47"><expr pos:start="299:46" pos:end="299:47"><name pos:start="299:46" pos:end="299:47">gb</name></expr></argument>, <argument pos:start="299:50" pos:end="299:57"><expr pos:start="299:50" pos:end="299:57"><name pos:start="299:50" pos:end="299:53"><name pos:start="299:50" pos:end="299:50">s</name><index pos:start="299:51" pos:end="299:53">[<expr pos:start="299:52" pos:end="299:52"><literal type="number" pos:start="299:52" pos:end="299:52">0</literal></expr>]</index></name> <operator pos:start="299:55" pos:end="299:55">+</operator> <literal type="number" pos:start="299:57" pos:end="299:57">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="301:9" pos:end="303:59"><if pos:start="301:9" pos:end="303:59">if <condition pos:start="301:12" pos:end="301:26">(<expr pos:start="301:13" pos:end="301:25"><name pos:start="301:13" pos:end="301:21">opt_order</name> <operator pos:start="301:23" pos:end="301:23">&gt;</operator> <literal type="number" pos:start="301:25" pos:end="301:25">2</literal></expr>)</condition><block type="pseudo" pos:start="303:13" pos:end="303:59"><block_content pos:start="303:13" pos:end="303:59">

            <expr_stmt pos:start="303:13" pos:end="303:59"><expr pos:start="303:13" pos:end="303:58"><name pos:start="303:13" pos:end="303:30"><name pos:start="303:13" pos:end="303:14">bd</name><operator pos:start="303:15" pos:end="303:16">-&gt;</operator><name pos:start="303:17" pos:end="303:27">raw_samples</name><index pos:start="303:28" pos:end="303:30">[<expr pos:start="303:29" pos:end="303:29"><literal type="number" pos:start="303:29" pos:end="303:29">2</literal></expr>]</index></name> <operator pos:start="303:32" pos:end="303:32">=</operator> <call pos:start="303:34" pos:end="303:58"><name pos:start="303:34" pos:end="303:44">decode_rice</name><argument_list pos:start="303:45" pos:end="303:58">(<argument pos:start="303:46" pos:end="303:47"><expr pos:start="303:46" pos:end="303:47"><name pos:start="303:46" pos:end="303:47">gb</name></expr></argument>, <argument pos:start="303:50" pos:end="303:57"><expr pos:start="303:50" pos:end="303:57"><name pos:start="303:50" pos:end="303:53"><name pos:start="303:50" pos:end="303:50">s</name><index pos:start="303:51" pos:end="303:53">[<expr pos:start="303:52" pos:end="303:52"><literal type="number" pos:start="303:52" pos:end="303:52">0</literal></expr>]</index></name> <operator pos:start="303:55" pos:end="303:55">+</operator> <literal type="number" pos:start="303:57" pos:end="303:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="307:9" pos:end="307:36"><expr pos:start="307:9" pos:end="307:35"><name pos:start="307:9" pos:end="307:13">start</name> <operator pos:start="307:15" pos:end="307:15">=</operator> <call pos:start="307:17" pos:end="307:35"><name pos:start="307:17" pos:end="307:21">FFMIN</name><argument_list pos:start="307:22" pos:end="307:35">(<argument pos:start="307:23" pos:end="307:31"><expr pos:start="307:23" pos:end="307:31"><name pos:start="307:23" pos:end="307:31">opt_order</name></expr></argument>, <argument pos:start="307:34" pos:end="307:34"><expr pos:start="307:34" pos:end="307:34"><literal type="number" pos:start="307:34" pos:end="307:34">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="313:5" pos:end="313:25">// read all residuals</comment>

    <if_stmt pos:start="315:5" pos:end="465:6"><if pos:start="315:5" pos:end="453:5">if <condition pos:start="315:8" pos:end="315:20">(<expr pos:start="315:9" pos:end="315:19"><name pos:start="315:9" pos:end="315:19"><name pos:start="315:9" pos:end="315:13">sconf</name><operator pos:start="315:14" pos:end="315:15">-&gt;</operator><name pos:start="315:16" pos:end="315:19">bgmc</name></name></expr>)</condition> <block pos:start="315:22" pos:end="453:5">{<block_content pos:start="317:9" pos:end="451:9">

        <decl_stmt pos:start="317:9" pos:end="317:39"><decl pos:start="317:9" pos:end="317:38"><type pos:start="317:9" pos:end="317:20"><name pos:start="317:9" pos:end="317:16">unsigned</name> <name pos:start="317:18" pos:end="317:20">int</name></type> <name pos:start="317:22" pos:end="317:38"><name pos:start="317:22" pos:end="317:26">delta</name><index pos:start="317:27" pos:end="317:38">[<expr pos:start="317:28" pos:end="317:37"><name pos:start="317:28" pos:end="317:37">sub_blocks</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="319:9" pos:end="319:39"><decl pos:start="319:9" pos:end="319:38"><type pos:start="319:9" pos:end="319:20"><name pos:start="319:9" pos:end="319:16">unsigned</name> <name pos:start="319:18" pos:end="319:20">int</name></type> <name pos:start="319:22" pos:end="319:38"><name pos:start="319:22" pos:end="319:22">k</name>    <index pos:start="319:27" pos:end="319:38">[<expr pos:start="319:28" pos:end="319:37"><name pos:start="319:28" pos:end="319:37">sub_blocks</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="321:9" pos:end="321:82"><decl pos:start="321:9" pos:end="321:81"><type pos:start="321:9" pos:end="321:20"><name pos:start="321:9" pos:end="321:16">unsigned</name> <name pos:start="321:18" pos:end="321:20">int</name></type> <name pos:start="321:22" pos:end="321:22">b</name> <init pos:start="321:24" pos:end="321:81">= <expr pos:start="321:26" pos:end="321:81"><call pos:start="321:26" pos:end="321:81"><name pos:start="321:26" pos:end="321:32">av_clip</name><argument_list pos:start="321:33" pos:end="321:81">(<argument pos:start="321:34" pos:end="321:74"><expr pos:start="321:34" pos:end="321:74"><operator pos:start="321:34" pos:end="321:34">(</operator><call pos:start="321:35" pos:end="321:64"><name pos:start="321:35" pos:end="321:46">av_ceil_log2</name><argument_list pos:start="321:47" pos:end="321:64">(<argument pos:start="321:48" pos:end="321:63"><expr pos:start="321:48" pos:end="321:63"><name pos:start="321:48" pos:end="321:63"><name pos:start="321:48" pos:end="321:49">bd</name><operator pos:start="321:50" pos:end="321:51">-&gt;</operator><name pos:start="321:52" pos:end="321:63">block_length</name></name></expr></argument>)</argument_list></call> <operator pos:start="321:66" pos:end="321:66">-</operator> <literal type="number" pos:start="321:68" pos:end="321:68">3</literal><operator pos:start="321:69" pos:end="321:69">)</operator> <operator pos:start="321:71" pos:end="321:72">&gt;&gt;</operator> <literal type="number" pos:start="321:74" pos:end="321:74">1</literal></expr></argument>, <argument pos:start="321:77" pos:end="321:77"><expr pos:start="321:77" pos:end="321:77"><literal type="number" pos:start="321:77" pos:end="321:77">0</literal></expr></argument>, <argument pos:start="321:80" pos:end="321:80"><expr pos:start="321:80" pos:end="321:80"><literal type="number" pos:start="321:80" pos:end="321:80">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="323:9" pos:end="323:31"><decl pos:start="323:9" pos:end="323:30"><type pos:start="323:9" pos:end="323:20"><name pos:start="323:9" pos:end="323:16">unsigned</name> <name pos:start="323:18" pos:end="323:20">int</name></type> <name pos:start="323:22" pos:end="323:22">i</name> <init pos:start="323:24" pos:end="323:30">= <expr pos:start="323:26" pos:end="323:30"><name pos:start="323:26" pos:end="323:30">start</name></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="327:9" pos:end="327:37">// read most significant bits</comment>

        <decl_stmt pos:start="329:9" pos:end="329:26"><decl pos:start="329:9" pos:end="329:25"><type pos:start="329:9" pos:end="329:20"><name pos:start="329:9" pos:end="329:16">unsigned</name> <name pos:start="329:18" pos:end="329:20">int</name></type> <name pos:start="329:22" pos:end="329:25">high</name></decl>;</decl_stmt>

        <decl_stmt pos:start="331:9" pos:end="331:25"><decl pos:start="331:9" pos:end="331:24"><type pos:start="331:9" pos:end="331:20"><name pos:start="331:9" pos:end="331:16">unsigned</name> <name pos:start="331:18" pos:end="331:20">int</name></type> <name pos:start="331:22" pos:end="331:24">low</name></decl>;</decl_stmt>

        <decl_stmt pos:start="333:9" pos:end="333:27"><decl pos:start="333:9" pos:end="333:26"><type pos:start="333:9" pos:end="333:20"><name pos:start="333:9" pos:end="333:16">unsigned</name> <name pos:start="333:18" pos:end="333:20">int</name></type> <name pos:start="333:22" pos:end="333:26">value</name></decl>;</decl_stmt>



        <expr_stmt pos:start="337:9" pos:end="337:53"><expr pos:start="337:9" pos:end="337:52"><call pos:start="337:9" pos:end="337:52"><name pos:start="337:9" pos:end="337:27">ff_bgmc_decode_init</name><argument_list pos:start="337:28" pos:end="337:52">(<argument pos:start="337:29" pos:end="337:30"><expr pos:start="337:29" pos:end="337:30"><name pos:start="337:29" pos:end="337:30">gb</name></expr></argument>, <argument pos:start="337:33" pos:end="337:37"><expr pos:start="337:33" pos:end="337:37"><operator pos:start="337:33" pos:end="337:33">&amp;</operator><name pos:start="337:34" pos:end="337:37">high</name></expr></argument>, <argument pos:start="337:40" pos:end="337:43"><expr pos:start="337:40" pos:end="337:43"><operator pos:start="337:40" pos:end="337:40">&amp;</operator><name pos:start="337:41" pos:end="337:43">low</name></expr></argument>, <argument pos:start="337:46" pos:end="337:51"><expr pos:start="337:46" pos:end="337:51"><operator pos:start="337:46" pos:end="337:46">&amp;</operator><name pos:start="337:47" pos:end="337:51">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="341:9" pos:end="341:46"><expr pos:start="341:9" pos:end="341:45"><name pos:start="341:9" pos:end="341:19">current_res</name> <operator pos:start="341:21" pos:end="341:21">=</operator> <name pos:start="341:23" pos:end="341:37"><name pos:start="341:23" pos:end="341:24">bd</name><operator pos:start="341:25" pos:end="341:26">-&gt;</operator><name pos:start="341:27" pos:end="341:37">raw_samples</name></name> <operator pos:start="341:39" pos:end="341:39">+</operator> <name pos:start="341:41" pos:end="341:45">start</name></expr>;</expr_stmt>



        <for pos:start="345:9" pos:end="361:9">for <control pos:start="345:13" pos:end="345:50">(<init pos:start="345:14" pos:end="345:20"><expr pos:start="345:14" pos:end="345:19"><name pos:start="345:14" pos:end="345:15">sb</name> <operator pos:start="345:17" pos:end="345:17">=</operator> <literal type="number" pos:start="345:19" pos:end="345:19">0</literal></expr>;</init> <condition pos:start="345:22" pos:end="345:37"><expr pos:start="345:22" pos:end="345:36"><name pos:start="345:22" pos:end="345:23">sb</name> <operator pos:start="345:25" pos:end="345:25">&lt;</operator> <name pos:start="345:27" pos:end="345:36">sub_blocks</name></expr>;</condition> <incr pos:start="345:39" pos:end="345:49"><expr pos:start="345:39" pos:end="345:42"><name pos:start="345:39" pos:end="345:40">sb</name><operator pos:start="345:41" pos:end="345:42">++</operator></expr><operator pos:start="345:43" pos:end="345:43">,</operator> <expr pos:start="345:45" pos:end="345:49"><name pos:start="345:45" pos:end="345:45">i</name> <operator pos:start="345:47" pos:end="345:47">=</operator> <literal type="number" pos:start="345:49" pos:end="345:49">0</literal></expr></incr>)</control> <block pos:start="345:52" pos:end="361:9">{<block_content pos:start="347:13" pos:end="359:37">

            <expr_stmt pos:start="347:13" pos:end="347:50"><expr pos:start="347:13" pos:end="347:49"><name pos:start="347:13" pos:end="347:21"><name pos:start="347:13" pos:end="347:13">k</name>    <index pos:start="347:18" pos:end="347:21">[<expr pos:start="347:19" pos:end="347:20"><name pos:start="347:19" pos:end="347:20">sb</name></expr>]</index></name> <operator pos:start="347:23" pos:end="347:23">=</operator> <ternary pos:start="347:25" pos:end="347:49"><condition pos:start="347:25" pos:end="347:35"><expr pos:start="347:25" pos:end="347:33"><name pos:start="347:25" pos:end="347:29"><name pos:start="347:25" pos:end="347:25">s</name><index pos:start="347:26" pos:end="347:29">[<expr pos:start="347:27" pos:end="347:28"><name pos:start="347:27" pos:end="347:28">sb</name></expr>]</index></name> <operator pos:start="347:31" pos:end="347:31">&gt;</operator> <name pos:start="347:33" pos:end="347:33">b</name></expr> ?</condition><then pos:start="347:37" pos:end="347:45"> <expr pos:start="347:37" pos:end="347:45"><name pos:start="347:37" pos:end="347:41"><name pos:start="347:37" pos:end="347:37">s</name><index pos:start="347:38" pos:end="347:41">[<expr pos:start="347:39" pos:end="347:40"><name pos:start="347:39" pos:end="347:40">sb</name></expr>]</index></name> <operator pos:start="347:43" pos:end="347:43">-</operator> <name pos:start="347:45" pos:end="347:45">b</name></expr> </then><else pos:start="347:47" pos:end="347:49">: <expr pos:start="347:49" pos:end="347:49"><literal type="number" pos:start="347:49" pos:end="347:49">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="349:13" pos:end="349:42"><expr pos:start="349:13" pos:end="349:41"><name pos:start="349:13" pos:end="349:21"><name pos:start="349:13" pos:end="349:17">delta</name><index pos:start="349:18" pos:end="349:21">[<expr pos:start="349:19" pos:end="349:20"><name pos:start="349:19" pos:end="349:20">sb</name></expr>]</index></name> <operator pos:start="349:23" pos:end="349:23">=</operator> <literal type="number" pos:start="349:25" pos:end="349:27">5</literal> <operator pos:start="349:27" pos:end="349:27">-</operator> <name pos:start="349:29" pos:end="349:33"><name pos:start="349:29" pos:end="349:29">s</name><index pos:start="349:30" pos:end="349:33">[<expr pos:start="349:31" pos:end="349:32"><name pos:start="349:31" pos:end="349:32">sb</name></expr>]</index></name> <operator pos:start="349:35" pos:end="349:35">+</operator> <name pos:start="349:37" pos:end="349:41"><name pos:start="349:37" pos:end="349:37">k</name><index pos:start="349:38" pos:end="349:41">[<expr pos:start="349:39" pos:end="349:40"><name pos:start="349:39" pos:end="349:40">sb</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="353:13" pos:end="355:101"><expr pos:start="353:13" pos:end="355:100"><call pos:start="353:13" pos:end="355:100"><name pos:start="353:13" pos:end="353:26">ff_bgmc_decode</name><argument_list pos:start="353:27" pos:end="355:100">(<argument pos:start="353:28" pos:end="353:29"><expr pos:start="353:28" pos:end="353:29"><name pos:start="353:28" pos:end="353:29">gb</name></expr></argument>, <argument pos:start="353:32" pos:end="353:40"><expr pos:start="353:32" pos:end="353:40"><name pos:start="353:32" pos:end="353:40">sb_length</name></expr></argument>, <argument pos:start="353:43" pos:end="353:53"><expr pos:start="353:43" pos:end="353:53"><name pos:start="353:43" pos:end="353:53">current_res</name></expr></argument>,

                        <argument pos:start="355:25" pos:end="355:33"><expr pos:start="355:25" pos:end="355:33"><name pos:start="355:25" pos:end="355:33"><name pos:start="355:25" pos:end="355:29">delta</name><index pos:start="355:30" pos:end="355:33">[<expr pos:start="355:31" pos:end="355:32"><name pos:start="355:31" pos:end="355:32">sb</name></expr>]</index></name></expr></argument>, <argument pos:start="355:36" pos:end="355:41"><expr pos:start="355:36" pos:end="355:41"><name pos:start="355:36" pos:end="355:41"><name pos:start="355:36" pos:end="355:37">sx</name><index pos:start="355:38" pos:end="355:41">[<expr pos:start="355:39" pos:end="355:40"><name pos:start="355:39" pos:end="355:40">sb</name></expr>]</index></name></expr></argument>, <argument pos:start="355:44" pos:end="355:48"><expr pos:start="355:44" pos:end="355:48"><operator pos:start="355:44" pos:end="355:44">&amp;</operator><name pos:start="355:45" pos:end="355:48">high</name></expr></argument>, <argument pos:start="355:51" pos:end="355:54"><expr pos:start="355:51" pos:end="355:54"><operator pos:start="355:51" pos:end="355:51">&amp;</operator><name pos:start="355:52" pos:end="355:54">low</name></expr></argument>, <argument pos:start="355:57" pos:end="355:62"><expr pos:start="355:57" pos:end="355:62"><operator pos:start="355:57" pos:end="355:57">&amp;</operator><name pos:start="355:58" pos:end="355:62">value</name></expr></argument>, <argument pos:start="355:65" pos:end="355:77"><expr pos:start="355:65" pos:end="355:77"><name pos:start="355:65" pos:end="355:77"><name pos:start="355:65" pos:end="355:67">ctx</name><operator pos:start="355:68" pos:end="355:69">-&gt;</operator><name pos:start="355:70" pos:end="355:77">bgmc_lut</name></name></expr></argument>, <argument pos:start="355:80" pos:end="355:99"><expr pos:start="355:80" pos:end="355:99"><name pos:start="355:80" pos:end="355:99"><name pos:start="355:80" pos:end="355:82">ctx</name><operator pos:start="355:83" pos:end="355:84">-&gt;</operator><name pos:start="355:85" pos:end="355:99">bgmc_lut_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="359:13" pos:end="359:37"><expr pos:start="359:13" pos:end="359:36"><name pos:start="359:13" pos:end="359:23">current_res</name> <operator pos:start="359:25" pos:end="359:26">+=</operator> <name pos:start="359:28" pos:end="359:36">sb_length</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="365:9" pos:end="365:31"><expr pos:start="365:9" pos:end="365:30"><call pos:start="365:9" pos:end="365:30"><name pos:start="365:9" pos:end="365:26">ff_bgmc_decode_end</name><argument_list pos:start="365:27" pos:end="365:30">(<argument pos:start="365:28" pos:end="365:29"><expr pos:start="365:28" pos:end="365:29"><name pos:start="365:28" pos:end="365:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <comment type="line" pos:start="371:9" pos:end="371:48">// read least significant bits and tails</comment>

        <expr_stmt pos:start="373:9" pos:end="373:18"><expr pos:start="373:9" pos:end="373:17"><name pos:start="373:9" pos:end="373:9">i</name> <operator pos:start="373:11" pos:end="373:11">=</operator> <name pos:start="373:13" pos:end="373:17">start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:46"><expr pos:start="375:9" pos:end="375:45"><name pos:start="375:9" pos:end="375:19">current_res</name> <operator pos:start="375:21" pos:end="375:21">=</operator> <name pos:start="375:23" pos:end="375:37"><name pos:start="375:23" pos:end="375:24">bd</name><operator pos:start="375:25" pos:end="375:26">-&gt;</operator><name pos:start="375:27" pos:end="375:37">raw_samples</name></name> <operator pos:start="375:39" pos:end="375:39">+</operator> <name pos:start="375:41" pos:end="375:45">start</name></expr>;</expr_stmt>



        <for pos:start="379:9" pos:end="451:9">for <control pos:start="379:13" pos:end="379:50">(<init pos:start="379:14" pos:end="379:20"><expr pos:start="379:14" pos:end="379:19"><name pos:start="379:14" pos:end="379:15">sb</name> <operator pos:start="379:17" pos:end="379:17">=</operator> <literal type="number" pos:start="379:19" pos:end="379:19">0</literal></expr>;</init> <condition pos:start="379:22" pos:end="379:37"><expr pos:start="379:22" pos:end="379:36"><name pos:start="379:22" pos:end="379:23">sb</name> <operator pos:start="379:25" pos:end="379:25">&lt;</operator> <name pos:start="379:27" pos:end="379:36">sub_blocks</name></expr>;</condition> <incr pos:start="379:39" pos:end="379:49"><expr pos:start="379:39" pos:end="379:42"><name pos:start="379:39" pos:end="379:40">sb</name><operator pos:start="379:41" pos:end="379:42">++</operator></expr><operator pos:start="379:43" pos:end="379:43">,</operator> <expr pos:start="379:45" pos:end="379:49"><name pos:start="379:45" pos:end="379:45">i</name> <operator pos:start="379:47" pos:end="379:47">=</operator> <literal type="number" pos:start="379:49" pos:end="379:49">0</literal></expr></incr>)</control> <block pos:start="379:52" pos:end="451:9">{<block_content pos:start="381:13" pos:end="449:13">

            <decl_stmt pos:start="381:13" pos:end="381:70"><decl pos:start="381:13" pos:end="381:69"><type pos:start="381:13" pos:end="381:24"><name pos:start="381:13" pos:end="381:20">unsigned</name> <name pos:start="381:22" pos:end="381:24">int</name></type> <name pos:start="381:26" pos:end="381:38">cur_tail_code</name> <init pos:start="381:40" pos:end="381:69">= <expr pos:start="381:42" pos:end="381:69"><name pos:start="381:42" pos:end="381:69"><name pos:start="381:42" pos:end="381:50">tail_code</name><index pos:start="381:51" pos:end="381:58">[<expr pos:start="381:52" pos:end="381:57"><name pos:start="381:52" pos:end="381:57"><name pos:start="381:52" pos:end="381:53">sx</name><index pos:start="381:54" pos:end="381:57">[<expr pos:start="381:55" pos:end="381:56"><name pos:start="381:55" pos:end="381:56">sb</name></expr>]</index></name></expr>]</index><index pos:start="381:59" pos:end="381:69">[<expr pos:start="381:60" pos:end="381:68"><name pos:start="381:60" pos:end="381:68"><name pos:start="381:60" pos:end="381:64">delta</name><index pos:start="381:65" pos:end="381:68">[<expr pos:start="381:66" pos:end="381:67"><name pos:start="381:66" pos:end="381:67">sb</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="383:13" pos:end="383:47"><decl pos:start="383:13" pos:end="383:46"><type pos:start="383:13" pos:end="383:24"><name pos:start="383:13" pos:end="383:20">unsigned</name> <name pos:start="383:22" pos:end="383:24">int</name></type> <name pos:start="383:26" pos:end="383:30">cur_k</name>         <init pos:start="383:40" pos:end="383:46">= <expr pos:start="383:42" pos:end="383:46"><name pos:start="383:42" pos:end="383:46"><name pos:start="383:42" pos:end="383:42">k</name><index pos:start="383:43" pos:end="383:46">[<expr pos:start="383:44" pos:end="383:45"><name pos:start="383:44" pos:end="383:45">sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="385:13" pos:end="385:47"><decl pos:start="385:13" pos:end="385:46"><type pos:start="385:13" pos:end="385:24"><name pos:start="385:13" pos:end="385:20">unsigned</name> <name pos:start="385:22" pos:end="385:24">int</name></type> <name pos:start="385:26" pos:end="385:30">cur_s</name>         <init pos:start="385:40" pos:end="385:46">= <expr pos:start="385:42" pos:end="385:46"><name pos:start="385:42" pos:end="385:46"><name pos:start="385:42" pos:end="385:42">s</name><index pos:start="385:43" pos:end="385:46">[<expr pos:start="385:44" pos:end="385:45"><name pos:start="385:44" pos:end="385:45">sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <for pos:start="389:13" pos:end="449:13">for <control pos:start="389:17" pos:end="389:38">(<init pos:start="389:18" pos:end="389:18">;</init> <condition pos:start="389:20" pos:end="389:33"><expr pos:start="389:20" pos:end="389:32"><name pos:start="389:20" pos:end="389:20">i</name> <operator pos:start="389:22" pos:end="389:22">&lt;</operator> <name pos:start="389:24" pos:end="389:32">sb_length</name></expr>;</condition> <incr pos:start="389:35" pos:end="389:37"><expr pos:start="389:35" pos:end="389:37"><name pos:start="389:35" pos:end="389:35">i</name><operator pos:start="389:36" pos:end="389:37">++</operator></expr></incr>)</control> <block pos:start="389:40" pos:end="449:13">{<block_content pos:start="391:17" pos:end="447:37">

                <decl_stmt pos:start="391:17" pos:end="391:43"><decl pos:start="391:17" pos:end="391:42"><type pos:start="391:17" pos:end="391:23"><name pos:start="391:17" pos:end="391:23">int32_t</name></type> <name pos:start="391:25" pos:end="391:27">res</name> <init pos:start="391:29" pos:end="391:42">= <expr pos:start="391:31" pos:end="391:42"><operator pos:start="391:31" pos:end="391:31">*</operator><name pos:start="391:32" pos:end="391:42">current_res</name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="395:17" pos:end="443:17"><if pos:start="395:17" pos:end="417:17">if <condition pos:start="395:20" pos:end="395:41">(<expr pos:start="395:21" pos:end="395:40"><name pos:start="395:21" pos:end="395:23">res</name> <operator pos:start="395:25" pos:end="395:26">==</operator> <name pos:start="395:28" pos:end="395:40">cur_tail_code</name></expr>)</condition> <block pos:start="395:43" pos:end="417:17">{<block_content pos:start="397:21" pos:end="415:21">

                    <decl_stmt pos:start="397:21" pos:end="399:61"><decl pos:start="397:21" pos:end="399:60"><type pos:start="397:21" pos:end="397:32"><name pos:start="397:21" pos:end="397:28">unsigned</name> <name pos:start="397:30" pos:end="397:32">int</name></type> <name pos:start="397:34" pos:end="397:40">max_msb</name> <init pos:start="397:42" pos:end="399:60">=   <expr pos:start="397:46" pos:end="399:60"><operator pos:start="397:46" pos:end="397:46">(</operator><literal type="number" pos:start="397:47" pos:end="397:49">2</literal> <operator pos:start="397:49" pos:end="397:49">+</operator> <operator pos:start="397:51" pos:end="397:51">(</operator><name pos:start="397:52" pos:end="397:57"><name pos:start="397:52" pos:end="397:53">sx</name><index pos:start="397:54" pos:end="397:57">[<expr pos:start="397:55" pos:end="397:56"><name pos:start="397:55" pos:end="397:56">sb</name></expr>]</index></name> <operator pos:start="397:59" pos:end="397:59">&gt;</operator> <literal type="number" pos:start="397:61" pos:end="397:61">2</literal><operator pos:start="397:62" pos:end="397:62">)</operator> <operator pos:start="397:64" pos:end="397:64">+</operator> <operator pos:start="397:66" pos:end="397:66">(</operator><name pos:start="397:67" pos:end="397:72"><name pos:start="397:67" pos:end="397:68">sx</name><index pos:start="397:69" pos:end="397:72">[<expr pos:start="397:70" pos:end="397:71"><name pos:start="397:70" pos:end="397:71">sb</name></expr>]</index></name> <operator pos:start="397:74" pos:end="397:74">&gt;</operator> <literal type="number" pos:start="397:76" pos:end="397:77">10</literal><operator pos:start="397:78" pos:end="397:78">)</operator><operator pos:start="397:79" pos:end="397:79">)</operator>

                                          <operator pos:start="399:43" pos:end="399:44">&lt;&lt;</operator> <operator pos:start="399:46" pos:end="399:46">(</operator><literal type="number" pos:start="399:47" pos:end="399:49">5</literal> <operator pos:start="399:49" pos:end="399:49">-</operator> <name pos:start="399:51" pos:end="399:59"><name pos:start="399:51" pos:end="399:55">delta</name><index pos:start="399:56" pos:end="399:59">[<expr pos:start="399:57" pos:end="399:58"><name pos:start="399:57" pos:end="399:58">sb</name></expr>]</index></name><operator pos:start="399:60" pos:end="399:60">)</operator></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="403:21" pos:end="403:49"><expr pos:start="403:21" pos:end="403:48"><name pos:start="403:21" pos:end="403:23">res</name> <operator pos:start="403:25" pos:end="403:25">=</operator> <call pos:start="403:27" pos:end="403:48"><name pos:start="403:27" pos:end="403:37">decode_rice</name><argument_list pos:start="403:38" pos:end="403:48">(<argument pos:start="403:39" pos:end="403:40"><expr pos:start="403:39" pos:end="403:40"><name pos:start="403:39" pos:end="403:40">gb</name></expr></argument>, <argument pos:start="403:43" pos:end="403:47"><expr pos:start="403:43" pos:end="403:47"><name pos:start="403:43" pos:end="403:47">cur_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="407:21" pos:end="415:21"><if pos:start="407:21" pos:end="411:21">if <condition pos:start="407:24" pos:end="407:33">(<expr pos:start="407:25" pos:end="407:32"><name pos:start="407:25" pos:end="407:27">res</name> <operator pos:start="407:29" pos:end="407:30">&gt;=</operator> <literal type="number" pos:start="407:32" pos:end="407:32">0</literal></expr>)</condition> <block pos:start="407:35" pos:end="411:21">{<block_content pos:start="409:25" pos:end="409:54">

                        <expr_stmt pos:start="409:25" pos:end="409:54"><expr pos:start="409:25" pos:end="409:53"><name pos:start="409:25" pos:end="409:27">res</name> <operator pos:start="409:29" pos:end="409:30">+=</operator> <operator pos:start="409:32" pos:end="409:32">(</operator><name pos:start="409:33" pos:end="409:39">max_msb</name>    <operator pos:start="409:44" pos:end="409:44">)</operator> <operator pos:start="409:46" pos:end="409:47">&lt;&lt;</operator> <name pos:start="409:49" pos:end="409:53">cur_k</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="411:23" pos:end="415:21">else <block pos:start="411:28" pos:end="415:21">{<block_content pos:start="413:25" pos:end="413:54">

                        <expr_stmt pos:start="413:25" pos:end="413:54"><expr pos:start="413:25" pos:end="413:53"><name pos:start="413:25" pos:end="413:27">res</name> <operator pos:start="413:29" pos:end="413:30">-=</operator> <operator pos:start="413:32" pos:end="413:32">(</operator><name pos:start="413:33" pos:end="413:39">max_msb</name> <operator pos:start="413:41" pos:end="413:41">-</operator> <literal type="number" pos:start="413:43" pos:end="413:43">1</literal><operator pos:start="413:44" pos:end="413:44">)</operator> <operator pos:start="413:46" pos:end="413:47">&lt;&lt;</operator> <name pos:start="413:49" pos:end="413:53">cur_k</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="417:19" pos:end="443:17">else <block pos:start="417:24" pos:end="443:17">{<block_content pos:start="419:21" pos:end="441:21">

                    <if_stmt pos:start="419:21" pos:end="421:30"><if pos:start="419:21" pos:end="421:30">if <condition pos:start="419:24" pos:end="419:44">(<expr pos:start="419:25" pos:end="419:43"><name pos:start="419:25" pos:end="419:27">res</name> <operator pos:start="419:29" pos:end="419:29">&gt;</operator> <name pos:start="419:31" pos:end="419:43">cur_tail_code</name></expr>)</condition><block type="pseudo" pos:start="421:25" pos:end="421:30"><block_content pos:start="421:25" pos:end="421:30">

                        <expr_stmt pos:start="421:25" pos:end="421:30"><expr pos:start="421:25" pos:end="421:29"><name pos:start="421:25" pos:end="421:27">res</name><operator pos:start="421:28" pos:end="421:29">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <if_stmt pos:start="425:21" pos:end="427:35"><if pos:start="425:21" pos:end="427:35">if <condition pos:start="425:24" pos:end="425:32">(<expr pos:start="425:25" pos:end="425:31"><name pos:start="425:25" pos:end="425:27">res</name> <operator pos:start="425:29" pos:end="425:29">&amp;</operator> <literal type="number" pos:start="425:31" pos:end="425:31">1</literal></expr>)</condition><block type="pseudo" pos:start="427:25" pos:end="427:35"><block_content pos:start="427:25" pos:end="427:35">

                        <expr_stmt pos:start="427:25" pos:end="427:35"><expr pos:start="427:25" pos:end="427:34"><name pos:start="427:25" pos:end="427:27">res</name> <operator pos:start="427:29" pos:end="427:29">=</operator> <operator pos:start="427:31" pos:end="427:31">-</operator><name pos:start="427:32" pos:end="427:34">res</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="431:21" pos:end="431:30"><expr pos:start="431:21" pos:end="431:29"><name pos:start="431:21" pos:end="431:23">res</name> <operator pos:start="431:25" pos:end="431:27">&gt;&gt;=</operator> <literal type="number" pos:start="431:29" pos:end="431:29">1</literal></expr>;</expr_stmt>



                    <if_stmt pos:start="435:21" pos:end="441:21"><if pos:start="435:21" pos:end="441:21">if <condition pos:start="435:24" pos:end="435:30">(<expr pos:start="435:25" pos:end="435:29"><name pos:start="435:25" pos:end="435:29">cur_k</name></expr>)</condition> <block pos:start="435:32" pos:end="441:21">{<block_content pos:start="437:25" pos:end="439:57">

                        <expr_stmt pos:start="437:25" pos:end="437:38"><expr pos:start="437:25" pos:end="437:37"><name pos:start="437:25" pos:end="437:27">res</name> <operator pos:start="437:29" pos:end="437:31">&lt;&lt;=</operator> <name pos:start="437:33" pos:end="437:37">cur_k</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="439:25" pos:end="439:57"><expr pos:start="439:25" pos:end="439:56"><name pos:start="439:25" pos:end="439:27">res</name>  <operator pos:start="439:30" pos:end="439:31">|=</operator> <call pos:start="439:33" pos:end="439:56"><name pos:start="439:33" pos:end="439:45">get_bits_long</name><argument_list pos:start="439:46" pos:end="439:56">(<argument pos:start="439:47" pos:end="439:48"><expr pos:start="439:47" pos:end="439:48"><name pos:start="439:47" pos:end="439:48">gb</name></expr></argument>, <argument pos:start="439:51" pos:end="439:55"><expr pos:start="439:51" pos:end="439:55"><name pos:start="439:51" pos:end="439:55">cur_k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="447:17" pos:end="447:37"><expr pos:start="447:17" pos:end="447:36"><operator pos:start="447:17" pos:end="447:17">*</operator><name pos:start="447:18" pos:end="447:28">current_res</name><operator pos:start="447:29" pos:end="447:30">++</operator> <operator pos:start="447:32" pos:end="447:32">=</operator> <name pos:start="447:34" pos:end="447:36">res</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="453:7" pos:end="465:6">else <block pos:start="453:12" pos:end="465:6">{<block_content pos:start="455:9" pos:end="463:56">

        <expr_stmt pos:start="455:9" pos:end="455:46"><expr pos:start="455:9" pos:end="455:45"><name pos:start="455:9" pos:end="455:19">current_res</name> <operator pos:start="455:21" pos:end="455:21">=</operator> <name pos:start="455:23" pos:end="455:37"><name pos:start="455:23" pos:end="455:24">bd</name><operator pos:start="455:25" pos:end="455:26">-&gt;</operator><name pos:start="455:27" pos:end="455:37">raw_samples</name></name> <operator pos:start="455:39" pos:end="455:39">+</operator> <name pos:start="455:41" pos:end="455:45">start</name></expr>;</expr_stmt>



        <for pos:start="459:9" pos:end="463:56">for <control pos:start="459:13" pos:end="459:54">(<init pos:start="459:14" pos:end="459:20"><expr pos:start="459:14" pos:end="459:19"><name pos:start="459:14" pos:end="459:15">sb</name> <operator pos:start="459:17" pos:end="459:17">=</operator> <literal type="number" pos:start="459:19" pos:end="459:19">0</literal></expr>;</init> <condition pos:start="459:22" pos:end="459:37"><expr pos:start="459:22" pos:end="459:36"><name pos:start="459:22" pos:end="459:23">sb</name> <operator pos:start="459:25" pos:end="459:25">&lt;</operator> <name pos:start="459:27" pos:end="459:36">sub_blocks</name></expr>;</condition> <incr pos:start="459:39" pos:end="459:53"><expr pos:start="459:39" pos:end="459:42"><name pos:start="459:39" pos:end="459:40">sb</name><operator pos:start="459:41" pos:end="459:42">++</operator></expr><operator pos:start="459:43" pos:end="459:43">,</operator> <expr pos:start="459:45" pos:end="459:53"><name pos:start="459:45" pos:end="459:49">start</name> <operator pos:start="459:51" pos:end="459:51">=</operator> <literal type="number" pos:start="459:53" pos:end="459:53">0</literal></expr></incr>)</control><block type="pseudo" pos:start="461:13" pos:end="463:56"><block_content pos:start="461:13" pos:end="463:56">

            <for pos:start="461:13" pos:end="463:56">for <control pos:start="461:17" pos:end="461:46">(<init pos:start="461:18" pos:end="461:18">;</init> <condition pos:start="461:20" pos:end="461:37"><expr pos:start="461:20" pos:end="461:36"><name pos:start="461:20" pos:end="461:24">start</name> <operator pos:start="461:26" pos:end="461:26">&lt;</operator> <name pos:start="461:28" pos:end="461:36">sb_length</name></expr>;</condition> <incr pos:start="461:39" pos:end="461:45"><expr pos:start="461:39" pos:end="461:45"><name pos:start="461:39" pos:end="461:43">start</name><operator pos:start="461:44" pos:end="461:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="463:17" pos:end="463:56"><block_content pos:start="463:17" pos:end="463:56">

                <expr_stmt pos:start="463:17" pos:end="463:56"><expr pos:start="463:17" pos:end="463:55"><operator pos:start="463:17" pos:end="463:17">*</operator><name pos:start="463:18" pos:end="463:28">current_res</name><operator pos:start="463:29" pos:end="463:30">++</operator> <operator pos:start="463:32" pos:end="463:32">=</operator> <call pos:start="463:34" pos:end="463:55"><name pos:start="463:34" pos:end="463:44">decode_rice</name><argument_list pos:start="463:45" pos:end="463:55">(<argument pos:start="463:46" pos:end="463:47"><expr pos:start="463:46" pos:end="463:47"><name pos:start="463:46" pos:end="463:47">gb</name></expr></argument>, <argument pos:start="463:50" pos:end="463:54"><expr pos:start="463:50" pos:end="463:54"><name pos:start="463:50" pos:end="463:54"><name pos:start="463:50" pos:end="463:50">s</name><index pos:start="463:51" pos:end="463:54">[<expr pos:start="463:52" pos:end="463:53"><name pos:start="463:52" pos:end="463:53">sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

     </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="469:5" pos:end="471:27"><if pos:start="469:5" pos:end="471:27">if <condition pos:start="469:8" pos:end="469:44">(<expr pos:start="469:9" pos:end="469:43"><operator pos:start="469:9" pos:end="469:9">!</operator><name pos:start="469:10" pos:end="469:25"><name pos:start="469:10" pos:end="469:14">sconf</name><operator pos:start="469:15" pos:end="469:16">-&gt;</operator><name pos:start="469:17" pos:end="469:25">mc_coding</name></name> <operator pos:start="469:27" pos:end="469:28">||</operator> <name pos:start="469:30" pos:end="469:43"><name pos:start="469:30" pos:end="469:32">ctx</name><operator pos:start="469:33" pos:end="469:34">-&gt;</operator><name pos:start="469:35" pos:end="469:43">js_switch</name></name></expr>)</condition><block type="pseudo" pos:start="471:9" pos:end="471:27"><block_content pos:start="471:9" pos:end="471:27">

        <expr_stmt pos:start="471:9" pos:end="471:27"><expr pos:start="471:9" pos:end="471:26"><call pos:start="471:9" pos:end="471:26"><name pos:start="471:9" pos:end="471:22">align_get_bits</name><argument_list pos:start="471:23" pos:end="471:26">(<argument pos:start="471:24" pos:end="471:25"><expr pos:start="471:24" pos:end="471:25"><name pos:start="471:24" pos:end="471:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="475:5" pos:end="475:13">return <expr pos:start="475:12" pos:end="475:12"><literal type="number" pos:start="475:12" pos:end="475:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
