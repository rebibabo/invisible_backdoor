<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6439.c" pos:tabs="8"><function pos:start="1:1" pos:end="292:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">test_qga_file_ops</name><parameter_list pos:start="1:30" pos:end="1:48">(<parameter pos:start="1:31" pos:end="1:47"><decl pos:start="1:31" pos:end="1:47"><type pos:start="1:31" pos:end="1:43"><name pos:start="1:31" pos:end="1:43">gconstpointer</name></type> <name pos:start="1:45" pos:end="1:47">fix</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="292:1">{<block_content pos:start="5:5" pos:end="290:16">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:23"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:21">TestFixture</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:30">fixture</name> <init pos:start="5:32" pos:end="5:36">= <expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">fix</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:23"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:18">unsigned</name> <name pos:start="7:20" pos:end="7:23">char</name></type> <name pos:start="7:25" pos:end="7:36"><name pos:start="7:25" pos:end="7:34">helloworld</name><index pos:start="7:35" pos:end="7:36">[]</index></name> <init pos:start="7:38" pos:end="7:55">= <expr pos:start="7:40" pos:end="7:55"><literal type="string" pos:start="7:40" pos:end="7:55">"Hello World!\n"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">b64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">gchar</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">cmd</name></decl>, <decl pos:start="11:17" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:11"><modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:21">path</name></decl>, <decl pos:start="11:24" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:11"><modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:27">enc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:22">dec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">QDict</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:14">ret</name></decl>, <decl pos:start="15:17" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:11"><modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:20">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:14">id</name></decl>, <decl pos:start="17:17" pos:end="17:19"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:17" pos:end="17:19">eof</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:9">gsize</name></type> <name pos:start="19:11" pos:end="19:15">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">FILE</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">char</name></type> <name pos:start="23:10" pos:end="23:17"><name pos:start="23:10" pos:end="23:12">tmp</name><index pos:start="23:13" pos:end="23:17">[<expr pos:start="23:14" pos:end="23:16"><literal type="number" pos:start="23:14" pos:end="23:16">100</literal></expr>]</index></name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:14">/* open */</comment>

    <expr_stmt pos:start="29:5" pos:end="31:68"><expr pos:start="29:5" pos:end="31:67"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="31:67"><name pos:start="29:11" pos:end="29:16">qmp_fd</name><argument_list pos:start="29:17" pos:end="31:67">(<argument pos:start="29:18" pos:end="29:28"><expr pos:start="29:18" pos:end="29:28"><name pos:start="29:18" pos:end="29:28"><name pos:start="29:18" pos:end="29:24">fixture</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:28">fd</name></name></expr></argument>, <argument pos:start="29:31" pos:end="31:66"><expr pos:start="29:31" pos:end="31:66"><literal type="string" pos:start="29:31" pos:end="29:62">"{'execute': 'guest-file-open',"</literal>

                 <literal type="string" pos:start="31:18" pos:end="31:66">" 'arguments': { 'path': 'foo', 'mode': 'w+' } }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:26"><expr pos:start="33:5" pos:end="33:25"><call pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:20">g_assert_nonnull</name><argument_list pos:start="33:21" pos:end="33:25">(<argument pos:start="33:22" pos:end="33:24"><expr pos:start="33:22" pos:end="33:24"><name pos:start="33:22" pos:end="33:24">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:29"><expr pos:start="35:5" pos:end="35:28"><call pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:23">qmp_assert_no_error</name><argument_list pos:start="35:24" pos:end="35:28">(<argument pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><name pos:start="35:25" pos:end="35:27">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:6">id</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="37:37"><name pos:start="37:10" pos:end="37:22">qdict_get_int</name><argument_list pos:start="37:23" pos:end="37:37">(<argument pos:start="37:24" pos:end="37:26"><expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:26">ret</name></expr></argument>, <argument pos:start="37:29" pos:end="37:36"><expr pos:start="37:29" pos:end="37:36"><literal type="string" pos:start="37:29" pos:end="37:36">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><call pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:11">QDECREF</name><argument_list pos:start="39:12" pos:end="39:16">(<argument pos:start="39:13" pos:end="39:15"><expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:58"><expr pos:start="43:5" pos:end="43:57"><name pos:start="43:5" pos:end="43:7">enc</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:57"><name pos:start="43:11" pos:end="43:25">g_base64_encode</name><argument_list pos:start="43:26" pos:end="43:57">(<argument pos:start="43:27" pos:end="43:36"><expr pos:start="43:27" pos:end="43:36"><name pos:start="43:27" pos:end="43:36">helloworld</name></expr></argument>, <argument pos:start="43:39" pos:end="43:56"><expr pos:start="43:39" pos:end="43:56"><sizeof pos:start="43:39" pos:end="43:56">sizeof<argument_list pos:start="43:45" pos:end="43:56">(<argument pos:start="43:46" pos:end="43:55"><expr pos:start="43:46" pos:end="43:55"><name pos:start="43:46" pos:end="43:55">helloworld</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="45:5" pos:end="45:15">/* write */</comment>

    <expr_stmt pos:start="47:5" pos:end="51:59"><expr pos:start="47:5" pos:end="51:58"><name pos:start="47:5" pos:end="47:7">cmd</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="51:58"><name pos:start="47:11" pos:end="47:25">g_strdup_printf</name><argument_list pos:start="47:26" pos:end="51:58">(<argument pos:start="47:27" pos:end="51:48"><expr pos:start="47:27" pos:end="51:48"><literal type="string" pos:start="47:27" pos:end="47:59">"{'execute': 'guest-file-write',"</literal>

                          <literal type="string" pos:start="49:27" pos:end="49:55">" 'arguments': { 'handle': %"</literal> <name pos:start="49:57" pos:end="49:62">PRId64</name> <literal type="string" pos:start="49:64" pos:end="49:66">","</literal>

                          <literal type="string" pos:start="51:27" pos:end="51:48">" 'buf-b64': '%s' } }"</literal></expr></argument>, <argument pos:start="51:51" pos:end="51:52"><expr pos:start="51:51" pos:end="51:52"><name pos:start="51:51" pos:end="51:52">id</name></expr></argument>, <argument pos:start="51:55" pos:end="51:57"><expr pos:start="51:55" pos:end="51:57"><name pos:start="51:55" pos:end="51:57">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:35"><expr pos:start="53:5" pos:end="53:34"><name pos:start="53:5" pos:end="53:7">ret</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:34"><name pos:start="53:11" pos:end="53:16">qmp_fd</name><argument_list pos:start="53:17" pos:end="53:34">(<argument pos:start="53:18" pos:end="53:28"><expr pos:start="53:18" pos:end="53:28"><name pos:start="53:18" pos:end="53:28"><name pos:start="53:18" pos:end="53:24">fixture</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:28">fd</name></name></expr></argument>, <argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><name pos:start="53:31" pos:end="53:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><call pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:20">g_assert_nonnull</name><argument_list pos:start="55:21" pos:end="55:25">(<argument pos:start="55:22" pos:end="55:24"><expr pos:start="55:22" pos:end="55:24"><name pos:start="55:22" pos:end="55:24">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:29"><expr pos:start="57:5" pos:end="57:28"><call pos:start="57:5" pos:end="57:28"><name pos:start="57:5" pos:end="57:23">qmp_assert_no_error</name><argument_list pos:start="57:24" pos:end="57:28">(<argument pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><name pos:start="57:25" pos:end="57:27">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:41"><expr pos:start="61:5" pos:end="61:40"><name pos:start="61:5" pos:end="61:7">val</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:40"><name pos:start="61:11" pos:end="61:25">qdict_get_qdict</name><argument_list pos:start="61:26" pos:end="61:40">(<argument pos:start="61:27" pos:end="61:29"><expr pos:start="61:27" pos:end="61:29"><name pos:start="61:27" pos:end="61:29">ret</name></expr></argument>, <argument pos:start="61:32" pos:end="61:39"><expr pos:start="61:32" pos:end="61:39"><literal type="string" pos:start="61:32" pos:end="61:39">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:40"><expr pos:start="63:5" pos:end="63:39"><name pos:start="63:5" pos:end="63:9">count</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:39"><name pos:start="63:13" pos:end="63:25">qdict_get_int</name><argument_list pos:start="63:26" pos:end="63:39">(<argument pos:start="63:27" pos:end="63:29"><expr pos:start="63:27" pos:end="63:29"><name pos:start="63:27" pos:end="63:29">val</name></expr></argument>, <argument pos:start="63:32" pos:end="63:38"><expr pos:start="63:32" pos:end="63:38"><literal type="string" pos:start="63:32" pos:end="63:38">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:37"><expr pos:start="65:5" pos:end="65:36"><name pos:start="65:5" pos:end="65:7">eof</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:36"><name pos:start="65:11" pos:end="65:24">qdict_get_bool</name><argument_list pos:start="65:25" pos:end="65:36">(<argument pos:start="65:26" pos:end="65:28"><expr pos:start="65:26" pos:end="65:28"><name pos:start="65:26" pos:end="65:28">val</name></expr></argument>, <argument pos:start="65:31" pos:end="65:35"><expr pos:start="65:31" pos:end="65:35"><literal type="string" pos:start="65:31" pos:end="65:35">"eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:51"><expr pos:start="67:5" pos:end="67:50"><call pos:start="67:5" pos:end="67:50"><name pos:start="67:5" pos:end="67:19">g_assert_cmpint</name><argument_list pos:start="67:20" pos:end="67:50">(<argument pos:start="67:21" pos:end="67:25"><expr pos:start="67:21" pos:end="67:25"><name pos:start="67:21" pos:end="67:25">count</name></expr></argument>, <argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><operator pos:start="67:28" pos:end="67:29">==</operator></expr></argument>, <argument pos:start="67:32" pos:end="67:49"><expr pos:start="67:32" pos:end="67:49"><sizeof pos:start="67:32" pos:end="67:49">sizeof<argument_list pos:start="67:38" pos:end="67:49">(<argument pos:start="67:39" pos:end="67:48"><expr pos:start="67:39" pos:end="67:48"><name pos:start="67:39" pos:end="67:48">helloworld</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:32"><expr pos:start="69:5" pos:end="69:31"><call pos:start="69:5" pos:end="69:31"><name pos:start="69:5" pos:end="69:19">g_assert_cmpint</name><argument_list pos:start="69:20" pos:end="69:31">(<argument pos:start="69:21" pos:end="69:23"><expr pos:start="69:21" pos:end="69:23"><name pos:start="69:21" pos:end="69:23">eof</name></expr></argument>, <argument pos:start="69:26" pos:end="69:27"><expr pos:start="69:26" pos:end="69:27"><operator pos:start="69:26" pos:end="69:27">==</operator></expr></argument>, <argument pos:start="69:30" pos:end="69:30"><expr pos:start="69:30" pos:end="69:30"><literal type="number" pos:start="69:30" pos:end="69:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:17"><expr pos:start="71:5" pos:end="71:16"><call pos:start="71:5" pos:end="71:16"><name pos:start="71:5" pos:end="71:11">QDECREF</name><argument_list pos:start="71:12" pos:end="71:16">(<argument pos:start="71:13" pos:end="71:15"><expr pos:start="71:13" pos:end="71:15"><name pos:start="71:13" pos:end="71:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:16"><expr pos:start="73:5" pos:end="73:15"><call pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:10">g_free</name><argument_list pos:start="73:11" pos:end="73:15">(<argument pos:start="73:12" pos:end="73:14"><expr pos:start="73:12" pos:end="73:14"><name pos:start="73:12" pos:end="73:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:15">/* flush */</comment>

    <expr_stmt pos:start="79:5" pos:end="83:30"><expr pos:start="79:5" pos:end="83:29"><name pos:start="79:5" pos:end="79:7">cmd</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="83:29"><name pos:start="79:11" pos:end="79:25">g_strdup_printf</name><argument_list pos:start="79:26" pos:end="83:29">(<argument pos:start="79:27" pos:end="81:67"><expr pos:start="79:27" pos:end="81:67"><literal type="string" pos:start="79:27" pos:end="79:59">"{'execute': 'guest-file-flush',"</literal>

                          <literal type="string" pos:start="81:27" pos:end="81:54">" 'arguments': {'handle': %"</literal> <name pos:start="81:56" pos:end="81:61">PRId64</name> <literal type="string" pos:start="81:63" pos:end="81:67">"} }"</literal></expr></argument>,

                          <argument pos:start="83:27" pos:end="83:28"><expr pos:start="83:27" pos:end="83:28"><name pos:start="83:27" pos:end="83:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:35"><expr pos:start="85:5" pos:end="85:34"><name pos:start="85:5" pos:end="85:7">ret</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:34"><name pos:start="85:11" pos:end="85:16">qmp_fd</name><argument_list pos:start="85:17" pos:end="85:34">(<argument pos:start="85:18" pos:end="85:28"><expr pos:start="85:18" pos:end="85:28"><name pos:start="85:18" pos:end="85:28"><name pos:start="85:18" pos:end="85:24">fixture</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:28">fd</name></name></expr></argument>, <argument pos:start="85:31" pos:end="85:33"><expr pos:start="85:31" pos:end="85:33"><name pos:start="85:31" pos:end="85:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:17"><expr pos:start="87:5" pos:end="87:16"><call pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:11">QDECREF</name><argument_list pos:start="87:12" pos:end="87:16">(<argument pos:start="87:13" pos:end="87:15"><expr pos:start="87:13" pos:end="87:15"><name pos:start="87:13" pos:end="87:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:16"><expr pos:start="89:5" pos:end="89:15"><call pos:start="89:5" pos:end="89:15"><name pos:start="89:5" pos:end="89:10">g_free</name><argument_list pos:start="89:11" pos:end="89:15">(<argument pos:start="89:12" pos:end="89:14"><expr pos:start="89:12" pos:end="89:14"><name pos:start="89:12" pos:end="89:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:15">/* close */</comment>

    <expr_stmt pos:start="95:5" pos:end="99:30"><expr pos:start="95:5" pos:end="99:29"><name pos:start="95:5" pos:end="95:7">cmd</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="99:29"><name pos:start="95:11" pos:end="95:25">g_strdup_printf</name><argument_list pos:start="95:26" pos:end="99:29">(<argument pos:start="95:27" pos:end="97:67"><expr pos:start="95:27" pos:end="97:67"><literal type="string" pos:start="95:27" pos:end="95:59">"{'execute': 'guest-file-close',"</literal>

                          <literal type="string" pos:start="97:27" pos:end="97:54">" 'arguments': {'handle': %"</literal> <name pos:start="97:56" pos:end="97:61">PRId64</name> <literal type="string" pos:start="97:63" pos:end="97:67">"} }"</literal></expr></argument>,

                          <argument pos:start="99:27" pos:end="99:28"><expr pos:start="99:27" pos:end="99:28"><name pos:start="99:27" pos:end="99:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:35"><expr pos:start="101:5" pos:end="101:34"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:34"><name pos:start="101:11" pos:end="101:16">qmp_fd</name><argument_list pos:start="101:17" pos:end="101:34">(<argument pos:start="101:18" pos:end="101:28"><expr pos:start="101:18" pos:end="101:28"><name pos:start="101:18" pos:end="101:28"><name pos:start="101:18" pos:end="101:24">fixture</name><operator pos:start="101:25" pos:end="101:26">-&gt;</operator><name pos:start="101:27" pos:end="101:28">fd</name></name></expr></argument>, <argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><name pos:start="101:31" pos:end="101:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:17"><expr pos:start="103:5" pos:end="103:16"><call pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:11">QDECREF</name><argument_list pos:start="103:12" pos:end="103:16">(<argument pos:start="103:13" pos:end="103:15"><expr pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:16"><expr pos:start="105:5" pos:end="105:15"><call pos:start="105:5" pos:end="105:15"><name pos:start="105:5" pos:end="105:10">g_free</name><argument_list pos:start="105:11" pos:end="105:15">(<argument pos:start="105:12" pos:end="105:14"><expr pos:start="105:12" pos:end="105:14"><name pos:start="105:12" pos:end="105:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:23">/* check content */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:60"><expr pos:start="111:5" pos:end="111:59"><name pos:start="111:5" pos:end="111:8">path</name> <operator pos:start="111:10" pos:end="111:10">=</operator> <call pos:start="111:12" pos:end="111:59"><name pos:start="111:12" pos:end="111:27">g_build_filename</name><argument_list pos:start="111:28" pos:end="111:59">(<argument pos:start="111:29" pos:end="111:45"><expr pos:start="111:29" pos:end="111:45"><name pos:start="111:29" pos:end="111:45"><name pos:start="111:29" pos:end="111:35">fixture</name><operator pos:start="111:36" pos:end="111:37">-&gt;</operator><name pos:start="111:38" pos:end="111:45">test_dir</name></name></expr></argument>, <argument pos:start="111:48" pos:end="111:52"><expr pos:start="111:48" pos:end="111:52"><literal type="string" pos:start="111:48" pos:end="111:52">"foo"</literal></expr></argument>, <argument pos:start="111:55" pos:end="111:58"><expr pos:start="111:55" pos:end="111:58"><name pos:start="111:55" pos:end="111:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:25"><expr pos:start="113:5" pos:end="113:24"><name pos:start="113:5" pos:end="113:5">f</name> <operator pos:start="113:7" pos:end="113:7">=</operator> <call pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:13">fopen</name><argument_list pos:start="113:14" pos:end="113:24">(<argument pos:start="113:15" pos:end="113:18"><expr pos:start="113:15" pos:end="113:18"><name pos:start="113:15" pos:end="113:18">path</name></expr></argument>, <argument pos:start="113:21" pos:end="113:23"><expr pos:start="113:21" pos:end="113:23"><literal type="string" pos:start="113:21" pos:end="113:23">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="116:5" pos:end="116:24"><expr pos:start="116:5" pos:end="116:23"><call pos:start="116:5" pos:end="116:23"><name pos:start="116:5" pos:end="116:20">g_assert_nonnull</name><argument_list pos:start="116:21" pos:end="116:23">(<argument pos:start="116:22" pos:end="116:22"><expr pos:start="116:22" pos:end="116:22"><name pos:start="116:22" pos:end="116:22">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="118:5" pos:end="118:42"><expr pos:start="118:5" pos:end="118:41"><name pos:start="118:5" pos:end="118:9">count</name> <operator pos:start="118:11" pos:end="118:11">=</operator> <call pos:start="118:13" pos:end="118:41"><name pos:start="118:13" pos:end="118:17">fread</name><argument_list pos:start="118:18" pos:end="118:41">(<argument pos:start="118:19" pos:end="118:21"><expr pos:start="118:19" pos:end="118:21"><name pos:start="118:19" pos:end="118:21">tmp</name></expr></argument>, <argument pos:start="118:24" pos:end="118:24"><expr pos:start="118:24" pos:end="118:24"><literal type="number" pos:start="118:24" pos:end="118:24">1</literal></expr></argument>, <argument pos:start="118:27" pos:end="118:37"><expr pos:start="118:27" pos:end="118:37"><sizeof pos:start="118:27" pos:end="118:37">sizeof<argument_list pos:start="118:33" pos:end="118:37">(<argument pos:start="118:34" pos:end="118:36"><expr pos:start="118:34" pos:end="118:36"><name pos:start="118:34" pos:end="118:36">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="118:40" pos:end="118:40"><expr pos:start="118:40" pos:end="118:40"><name pos:start="118:40" pos:end="118:40">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="120:5" pos:end="120:51"><expr pos:start="120:5" pos:end="120:50"><call pos:start="120:5" pos:end="120:50"><name pos:start="120:5" pos:end="120:19">g_assert_cmpint</name><argument_list pos:start="120:20" pos:end="120:50">(<argument pos:start="120:21" pos:end="120:25"><expr pos:start="120:21" pos:end="120:25"><name pos:start="120:21" pos:end="120:25">count</name></expr></argument>, <argument pos:start="120:28" pos:end="120:29"><expr pos:start="120:28" pos:end="120:29"><operator pos:start="120:28" pos:end="120:29">==</operator></expr></argument>, <argument pos:start="120:32" pos:end="120:49"><expr pos:start="120:32" pos:end="120:49"><sizeof pos:start="120:32" pos:end="120:49">sizeof<argument_list pos:start="120:38" pos:end="120:49">(<argument pos:start="120:39" pos:end="120:48"><expr pos:start="120:39" pos:end="120:48"><name pos:start="120:39" pos:end="120:48">helloworld</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="122:5" pos:end="122:19"><expr pos:start="122:5" pos:end="122:18"><name pos:start="122:5" pos:end="122:14"><name pos:start="122:5" pos:end="122:7">tmp</name><index pos:start="122:8" pos:end="122:14">[<expr pos:start="122:9" pos:end="122:13"><name pos:start="122:9" pos:end="122:13">count</name></expr>]</index></name> <operator pos:start="122:16" pos:end="122:16">=</operator> <literal type="number" pos:start="122:18" pos:end="122:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="124:5" pos:end="124:49"><expr pos:start="124:5" pos:end="124:48"><call pos:start="124:5" pos:end="124:48"><name pos:start="124:5" pos:end="124:19">g_assert_cmpstr</name><argument_list pos:start="124:20" pos:end="124:48">(<argument pos:start="124:21" pos:end="124:23"><expr pos:start="124:21" pos:end="124:23"><name pos:start="124:21" pos:end="124:23">tmp</name></expr></argument>, <argument pos:start="124:26" pos:end="124:27"><expr pos:start="124:26" pos:end="124:27"><operator pos:start="124:26" pos:end="124:27">==</operator></expr></argument>, <argument pos:start="124:30" pos:end="124:47"><expr pos:start="124:30" pos:end="124:47"><operator pos:start="124:30" pos:end="124:30">(</operator><name pos:start="124:31" pos:end="124:34">char</name> <operator pos:start="124:36" pos:end="124:36">*</operator><operator pos:start="124:37" pos:end="124:37">)</operator><name pos:start="124:38" pos:end="124:47">helloworld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="126:5" pos:end="126:14"><expr pos:start="126:5" pos:end="126:13"><call pos:start="126:5" pos:end="126:13"><name pos:start="126:5" pos:end="126:10">fclose</name><argument_list pos:start="126:11" pos:end="126:13">(<argument pos:start="126:12" pos:end="126:12"><expr pos:start="126:12" pos:end="126:12"><name pos:start="126:12" pos:end="126:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="130:5" pos:end="130:14">/* open */</comment>

    <expr_stmt pos:start="132:5" pos:end="134:67"><expr pos:start="132:5" pos:end="134:66"><name pos:start="132:5" pos:end="132:7">ret</name> <operator pos:start="132:9" pos:end="132:9">=</operator> <call pos:start="132:11" pos:end="134:66"><name pos:start="132:11" pos:end="132:16">qmp_fd</name><argument_list pos:start="132:17" pos:end="134:66">(<argument pos:start="132:18" pos:end="132:28"><expr pos:start="132:18" pos:end="132:28"><name pos:start="132:18" pos:end="132:28"><name pos:start="132:18" pos:end="132:24">fixture</name><operator pos:start="132:25" pos:end="132:26">-&gt;</operator><name pos:start="132:27" pos:end="132:28">fd</name></name></expr></argument>, <argument pos:start="132:31" pos:end="134:65"><expr pos:start="132:31" pos:end="134:65"><literal type="string" pos:start="132:31" pos:end="132:62">"{'execute': 'guest-file-open',"</literal>

                 <literal type="string" pos:start="134:18" pos:end="134:65">" 'arguments': { 'path': 'foo', 'mode': 'r' } }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="136:5" pos:end="136:26"><expr pos:start="136:5" pos:end="136:25"><call pos:start="136:5" pos:end="136:25"><name pos:start="136:5" pos:end="136:20">g_assert_nonnull</name><argument_list pos:start="136:21" pos:end="136:25">(<argument pos:start="136:22" pos:end="136:24"><expr pos:start="136:22" pos:end="136:24"><name pos:start="136:22" pos:end="136:24">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="138:5" pos:end="138:29"><expr pos:start="138:5" pos:end="138:28"><call pos:start="138:5" pos:end="138:28"><name pos:start="138:5" pos:end="138:23">qmp_assert_no_error</name><argument_list pos:start="138:24" pos:end="138:28">(<argument pos:start="138:25" pos:end="138:27"><expr pos:start="138:25" pos:end="138:27"><name pos:start="138:25" pos:end="138:27">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="140:5" pos:end="140:38"><expr pos:start="140:5" pos:end="140:37"><name pos:start="140:5" pos:end="140:6">id</name> <operator pos:start="140:8" pos:end="140:8">=</operator> <call pos:start="140:10" pos:end="140:37"><name pos:start="140:10" pos:end="140:22">qdict_get_int</name><argument_list pos:start="140:23" pos:end="140:37">(<argument pos:start="140:24" pos:end="140:26"><expr pos:start="140:24" pos:end="140:26"><name pos:start="140:24" pos:end="140:26">ret</name></expr></argument>, <argument pos:start="140:29" pos:end="140:36"><expr pos:start="140:29" pos:end="140:36"><literal type="string" pos:start="140:29" pos:end="140:36">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="142:5" pos:end="142:17"><expr pos:start="142:5" pos:end="142:16"><call pos:start="142:5" pos:end="142:16"><name pos:start="142:5" pos:end="142:11">QDECREF</name><argument_list pos:start="142:12" pos:end="142:16">(<argument pos:start="142:13" pos:end="142:15"><expr pos:start="142:13" pos:end="142:15"><name pos:start="142:13" pos:end="142:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="146:5" pos:end="146:14">/* read */</comment>

    <expr_stmt pos:start="148:5" pos:end="152:30"><expr pos:start="148:5" pos:end="152:29"><name pos:start="148:5" pos:end="148:7">cmd</name> <operator pos:start="148:9" pos:end="148:9">=</operator> <call pos:start="148:11" pos:end="152:29"><name pos:start="148:11" pos:end="148:25">g_strdup_printf</name><argument_list pos:start="148:26" pos:end="152:29">(<argument pos:start="148:27" pos:end="150:68"><expr pos:start="148:27" pos:end="150:68"><literal type="string" pos:start="148:27" pos:end="148:58">"{'execute': 'guest-file-read',"</literal>

                          <literal type="string" pos:start="150:27" pos:end="150:55">" 'arguments': { 'handle': %"</literal> <name pos:start="150:57" pos:end="150:62">PRId64</name> <literal type="string" pos:start="150:64" pos:end="150:68">"} }"</literal></expr></argument>,

                          <argument pos:start="152:27" pos:end="152:28"><expr pos:start="152:27" pos:end="152:28"><name pos:start="152:27" pos:end="152:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="154:5" pos:end="154:35"><expr pos:start="154:5" pos:end="154:34"><name pos:start="154:5" pos:end="154:7">ret</name> <operator pos:start="154:9" pos:end="154:9">=</operator> <call pos:start="154:11" pos:end="154:34"><name pos:start="154:11" pos:end="154:16">qmp_fd</name><argument_list pos:start="154:17" pos:end="154:34">(<argument pos:start="154:18" pos:end="154:28"><expr pos:start="154:18" pos:end="154:28"><name pos:start="154:18" pos:end="154:28"><name pos:start="154:18" pos:end="154:24">fixture</name><operator pos:start="154:25" pos:end="154:26">-&gt;</operator><name pos:start="154:27" pos:end="154:28">fd</name></name></expr></argument>, <argument pos:start="154:31" pos:end="154:33"><expr pos:start="154:31" pos:end="154:33"><name pos:start="154:31" pos:end="154:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="156:5" pos:end="156:41"><expr pos:start="156:5" pos:end="156:40"><name pos:start="156:5" pos:end="156:7">val</name> <operator pos:start="156:9" pos:end="156:9">=</operator> <call pos:start="156:11" pos:end="156:40"><name pos:start="156:11" pos:end="156:25">qdict_get_qdict</name><argument_list pos:start="156:26" pos:end="156:40">(<argument pos:start="156:27" pos:end="156:29"><expr pos:start="156:27" pos:end="156:29"><name pos:start="156:27" pos:end="156:29">ret</name></expr></argument>, <argument pos:start="156:32" pos:end="156:39"><expr pos:start="156:32" pos:end="156:39"><literal type="string" pos:start="156:32" pos:end="156:39">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="158:5" pos:end="158:40"><expr pos:start="158:5" pos:end="158:39"><name pos:start="158:5" pos:end="158:9">count</name> <operator pos:start="158:11" pos:end="158:11">=</operator> <call pos:start="158:13" pos:end="158:39"><name pos:start="158:13" pos:end="158:25">qdict_get_int</name><argument_list pos:start="158:26" pos:end="158:39">(<argument pos:start="158:27" pos:end="158:29"><expr pos:start="158:27" pos:end="158:29"><name pos:start="158:27" pos:end="158:29">val</name></expr></argument>, <argument pos:start="158:32" pos:end="158:38"><expr pos:start="158:32" pos:end="158:38"><literal type="string" pos:start="158:32" pos:end="158:38">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="160:5" pos:end="160:37"><expr pos:start="160:5" pos:end="160:36"><name pos:start="160:5" pos:end="160:7">eof</name> <operator pos:start="160:9" pos:end="160:9">=</operator> <call pos:start="160:11" pos:end="160:36"><name pos:start="160:11" pos:end="160:24">qdict_get_bool</name><argument_list pos:start="160:25" pos:end="160:36">(<argument pos:start="160:26" pos:end="160:28"><expr pos:start="160:26" pos:end="160:28"><name pos:start="160:26" pos:end="160:28">val</name></expr></argument>, <argument pos:start="160:31" pos:end="160:35"><expr pos:start="160:31" pos:end="160:35"><literal type="string" pos:start="160:31" pos:end="160:35">"eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="162:5" pos:end="162:40"><expr pos:start="162:5" pos:end="162:39"><name pos:start="162:5" pos:end="162:7">b64</name> <operator pos:start="162:9" pos:end="162:9">=</operator> <call pos:start="162:11" pos:end="162:39"><name pos:start="162:11" pos:end="162:23">qdict_get_str</name><argument_list pos:start="162:24" pos:end="162:39">(<argument pos:start="162:25" pos:end="162:27"><expr pos:start="162:25" pos:end="162:27"><name pos:start="162:25" pos:end="162:27">val</name></expr></argument>, <argument pos:start="162:30" pos:end="162:38"><expr pos:start="162:30" pos:end="162:38"><literal type="string" pos:start="162:30" pos:end="162:38">"buf-b64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="164:5" pos:end="164:51"><expr pos:start="164:5" pos:end="164:50"><call pos:start="164:5" pos:end="164:50"><name pos:start="164:5" pos:end="164:19">g_assert_cmpint</name><argument_list pos:start="164:20" pos:end="164:50">(<argument pos:start="164:21" pos:end="164:25"><expr pos:start="164:21" pos:end="164:25"><name pos:start="164:21" pos:end="164:25">count</name></expr></argument>, <argument pos:start="164:28" pos:end="164:29"><expr pos:start="164:28" pos:end="164:29"><operator pos:start="164:28" pos:end="164:29">==</operator></expr></argument>, <argument pos:start="164:32" pos:end="164:49"><expr pos:start="164:32" pos:end="164:49"><sizeof pos:start="164:32" pos:end="164:49">sizeof<argument_list pos:start="164:38" pos:end="164:49">(<argument pos:start="164:39" pos:end="164:48"><expr pos:start="164:39" pos:end="164:48"><name pos:start="164:39" pos:end="164:48">helloworld</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="166:5" pos:end="166:18"><expr pos:start="166:5" pos:end="166:17"><call pos:start="166:5" pos:end="166:17"><name pos:start="166:5" pos:end="166:12">g_assert</name><argument_list pos:start="166:13" pos:end="166:17">(<argument pos:start="166:14" pos:end="166:16"><expr pos:start="166:14" pos:end="166:16"><name pos:start="166:14" pos:end="166:16">eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="168:5" pos:end="168:34"><expr pos:start="168:5" pos:end="168:33"><call pos:start="168:5" pos:end="168:33"><name pos:start="168:5" pos:end="168:19">g_assert_cmpstr</name><argument_list pos:start="168:20" pos:end="168:33">(<argument pos:start="168:21" pos:end="168:23"><expr pos:start="168:21" pos:end="168:23"><name pos:start="168:21" pos:end="168:23">b64</name></expr></argument>, <argument pos:start="168:26" pos:end="168:27"><expr pos:start="168:26" pos:end="168:27"><operator pos:start="168:26" pos:end="168:27">==</operator></expr></argument>, <argument pos:start="168:30" pos:end="168:32"><expr pos:start="168:30" pos:end="168:32"><name pos:start="168:30" pos:end="168:32">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="172:5" pos:end="172:17"><expr pos:start="172:5" pos:end="172:16"><call pos:start="172:5" pos:end="172:16"><name pos:start="172:5" pos:end="172:11">QDECREF</name><argument_list pos:start="172:12" pos:end="172:16">(<argument pos:start="172:13" pos:end="172:15"><expr pos:start="172:13" pos:end="172:15"><name pos:start="172:13" pos:end="172:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="174:5" pos:end="174:16"><expr pos:start="174:5" pos:end="174:15"><call pos:start="174:5" pos:end="174:15"><name pos:start="174:5" pos:end="174:10">g_free</name><argument_list pos:start="174:11" pos:end="174:15">(<argument pos:start="174:12" pos:end="174:14"><expr pos:start="174:12" pos:end="174:14"><name pos:start="174:12" pos:end="174:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="176:5" pos:end="176:16"><expr pos:start="176:5" pos:end="176:15"><call pos:start="176:5" pos:end="176:15"><name pos:start="176:5" pos:end="176:10">g_free</name><argument_list pos:start="176:11" pos:end="176:15">(<argument pos:start="176:12" pos:end="176:14"><expr pos:start="176:12" pos:end="176:14"><name pos:start="176:12" pos:end="176:14">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="180:5" pos:end="180:18">/* read eof */</comment>

    <expr_stmt pos:start="182:5" pos:end="186:30"><expr pos:start="182:5" pos:end="186:29"><name pos:start="182:5" pos:end="182:7">cmd</name> <operator pos:start="182:9" pos:end="182:9">=</operator> <call pos:start="182:11" pos:end="186:29"><name pos:start="182:11" pos:end="182:25">g_strdup_printf</name><argument_list pos:start="182:26" pos:end="186:29">(<argument pos:start="182:27" pos:end="184:68"><expr pos:start="182:27" pos:end="184:68"><literal type="string" pos:start="182:27" pos:end="182:58">"{'execute': 'guest-file-read',"</literal>

                          <literal type="string" pos:start="184:27" pos:end="184:55">" 'arguments': { 'handle': %"</literal> <name pos:start="184:57" pos:end="184:62">PRId64</name> <literal type="string" pos:start="184:64" pos:end="184:68">"} }"</literal></expr></argument>,

                          <argument pos:start="186:27" pos:end="186:28"><expr pos:start="186:27" pos:end="186:28"><name pos:start="186:27" pos:end="186:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="188:5" pos:end="188:35"><expr pos:start="188:5" pos:end="188:34"><name pos:start="188:5" pos:end="188:7">ret</name> <operator pos:start="188:9" pos:end="188:9">=</operator> <call pos:start="188:11" pos:end="188:34"><name pos:start="188:11" pos:end="188:16">qmp_fd</name><argument_list pos:start="188:17" pos:end="188:34">(<argument pos:start="188:18" pos:end="188:28"><expr pos:start="188:18" pos:end="188:28"><name pos:start="188:18" pos:end="188:28"><name pos:start="188:18" pos:end="188:24">fixture</name><operator pos:start="188:25" pos:end="188:26">-&gt;</operator><name pos:start="188:27" pos:end="188:28">fd</name></name></expr></argument>, <argument pos:start="188:31" pos:end="188:33"><expr pos:start="188:31" pos:end="188:33"><name pos:start="188:31" pos:end="188:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="190:5" pos:end="190:41"><expr pos:start="190:5" pos:end="190:40"><name pos:start="190:5" pos:end="190:7">val</name> <operator pos:start="190:9" pos:end="190:9">=</operator> <call pos:start="190:11" pos:end="190:40"><name pos:start="190:11" pos:end="190:25">qdict_get_qdict</name><argument_list pos:start="190:26" pos:end="190:40">(<argument pos:start="190:27" pos:end="190:29"><expr pos:start="190:27" pos:end="190:29"><name pos:start="190:27" pos:end="190:29">ret</name></expr></argument>, <argument pos:start="190:32" pos:end="190:39"><expr pos:start="190:32" pos:end="190:39"><literal type="string" pos:start="190:32" pos:end="190:39">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="192:5" pos:end="192:40"><expr pos:start="192:5" pos:end="192:39"><name pos:start="192:5" pos:end="192:9">count</name> <operator pos:start="192:11" pos:end="192:11">=</operator> <call pos:start="192:13" pos:end="192:39"><name pos:start="192:13" pos:end="192:25">qdict_get_int</name><argument_list pos:start="192:26" pos:end="192:39">(<argument pos:start="192:27" pos:end="192:29"><expr pos:start="192:27" pos:end="192:29"><name pos:start="192:27" pos:end="192:29">val</name></expr></argument>, <argument pos:start="192:32" pos:end="192:38"><expr pos:start="192:32" pos:end="192:38"><literal type="string" pos:start="192:32" pos:end="192:38">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="194:5" pos:end="194:37"><expr pos:start="194:5" pos:end="194:36"><name pos:start="194:5" pos:end="194:7">eof</name> <operator pos:start="194:9" pos:end="194:9">=</operator> <call pos:start="194:11" pos:end="194:36"><name pos:start="194:11" pos:end="194:24">qdict_get_bool</name><argument_list pos:start="194:25" pos:end="194:36">(<argument pos:start="194:26" pos:end="194:28"><expr pos:start="194:26" pos:end="194:28"><name pos:start="194:26" pos:end="194:28">val</name></expr></argument>, <argument pos:start="194:31" pos:end="194:35"><expr pos:start="194:31" pos:end="194:35"><literal type="string" pos:start="194:31" pos:end="194:35">"eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="196:5" pos:end="196:40"><expr pos:start="196:5" pos:end="196:39"><name pos:start="196:5" pos:end="196:7">b64</name> <operator pos:start="196:9" pos:end="196:9">=</operator> <call pos:start="196:11" pos:end="196:39"><name pos:start="196:11" pos:end="196:23">qdict_get_str</name><argument_list pos:start="196:24" pos:end="196:39">(<argument pos:start="196:25" pos:end="196:27"><expr pos:start="196:25" pos:end="196:27"><name pos:start="196:25" pos:end="196:27">val</name></expr></argument>, <argument pos:start="196:30" pos:end="196:38"><expr pos:start="196:30" pos:end="196:38"><literal type="string" pos:start="196:30" pos:end="196:38">"buf-b64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="198:5" pos:end="198:34"><expr pos:start="198:5" pos:end="198:33"><call pos:start="198:5" pos:end="198:33"><name pos:start="198:5" pos:end="198:19">g_assert_cmpint</name><argument_list pos:start="198:20" pos:end="198:33">(<argument pos:start="198:21" pos:end="198:25"><expr pos:start="198:21" pos:end="198:25"><name pos:start="198:21" pos:end="198:25">count</name></expr></argument>, <argument pos:start="198:28" pos:end="198:29"><expr pos:start="198:28" pos:end="198:29"><operator pos:start="198:28" pos:end="198:29">==</operator></expr></argument>, <argument pos:start="198:32" pos:end="198:32"><expr pos:start="198:32" pos:end="198:32"><literal type="number" pos:start="198:32" pos:end="198:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="200:5" pos:end="200:18"><expr pos:start="200:5" pos:end="200:17"><call pos:start="200:5" pos:end="200:17"><name pos:start="200:5" pos:end="200:12">g_assert</name><argument_list pos:start="200:13" pos:end="200:17">(<argument pos:start="200:14" pos:end="200:16"><expr pos:start="200:14" pos:end="200:16"><name pos:start="200:14" pos:end="200:16">eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="202:5" pos:end="202:33"><expr pos:start="202:5" pos:end="202:32"><call pos:start="202:5" pos:end="202:32"><name pos:start="202:5" pos:end="202:19">g_assert_cmpstr</name><argument_list pos:start="202:20" pos:end="202:32">(<argument pos:start="202:21" pos:end="202:23"><expr pos:start="202:21" pos:end="202:23"><name pos:start="202:21" pos:end="202:23">b64</name></expr></argument>, <argument pos:start="202:26" pos:end="202:27"><expr pos:start="202:26" pos:end="202:27"><operator pos:start="202:26" pos:end="202:27">==</operator></expr></argument>, <argument pos:start="202:30" pos:end="202:31"><expr pos:start="202:30" pos:end="202:31"><literal type="string" pos:start="202:30" pos:end="202:31">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="204:5" pos:end="204:17"><expr pos:start="204:5" pos:end="204:16"><call pos:start="204:5" pos:end="204:16"><name pos:start="204:5" pos:end="204:11">QDECREF</name><argument_list pos:start="204:12" pos:end="204:16">(<argument pos:start="204:13" pos:end="204:15"><expr pos:start="204:13" pos:end="204:15"><name pos:start="204:13" pos:end="204:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="206:5" pos:end="206:16"><expr pos:start="206:5" pos:end="206:15"><call pos:start="206:5" pos:end="206:15"><name pos:start="206:5" pos:end="206:10">g_free</name><argument_list pos:start="206:11" pos:end="206:15">(<argument pos:start="206:12" pos:end="206:14"><expr pos:start="206:12" pos:end="206:14"><name pos:start="206:12" pos:end="206:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="210:5" pos:end="210:14">/* seek */</comment>

    <expr_stmt pos:start="212:5" pos:end="218:40"><expr pos:start="212:5" pos:end="218:39"><name pos:start="212:5" pos:end="212:7">cmd</name> <operator pos:start="212:9" pos:end="212:9">=</operator> <call pos:start="212:11" pos:end="218:39"><name pos:start="212:11" pos:end="212:25">g_strdup_printf</name><argument_list pos:start="212:26" pos:end="218:39">(<argument pos:start="212:27" pos:end="216:61"><expr pos:start="212:27" pos:end="216:61"><literal type="string" pos:start="212:27" pos:end="212:58">"{'execute': 'guest-file-seek',"</literal>

                          <literal type="string" pos:start="214:27" pos:end="214:55">" 'arguments': { 'handle': %"</literal> <name pos:start="214:57" pos:end="214:62">PRId64</name> <literal type="string" pos:start="214:64" pos:end="214:67">", "</literal>

                          <literal type="string" pos:start="216:27" pos:end="216:61">" 'offset': %d, 'whence': '%s' } }"</literal></expr></argument>,

                          <argument pos:start="218:27" pos:end="218:28"><expr pos:start="218:27" pos:end="218:28"><name pos:start="218:27" pos:end="218:28">id</name></expr></argument>, <argument pos:start="218:31" pos:end="218:31"><expr pos:start="218:31" pos:end="218:31"><literal type="number" pos:start="218:31" pos:end="218:31">6</literal></expr></argument>, <argument pos:start="218:34" pos:end="218:38"><expr pos:start="218:34" pos:end="218:38"><literal type="string" pos:start="218:34" pos:end="218:38">"set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="220:5" pos:end="220:35"><expr pos:start="220:5" pos:end="220:34"><name pos:start="220:5" pos:end="220:7">ret</name> <operator pos:start="220:9" pos:end="220:9">=</operator> <call pos:start="220:11" pos:end="220:34"><name pos:start="220:11" pos:end="220:16">qmp_fd</name><argument_list pos:start="220:17" pos:end="220:34">(<argument pos:start="220:18" pos:end="220:28"><expr pos:start="220:18" pos:end="220:28"><name pos:start="220:18" pos:end="220:28"><name pos:start="220:18" pos:end="220:24">fixture</name><operator pos:start="220:25" pos:end="220:26">-&gt;</operator><name pos:start="220:27" pos:end="220:28">fd</name></name></expr></argument>, <argument pos:start="220:31" pos:end="220:33"><expr pos:start="220:31" pos:end="220:33"><name pos:start="220:31" pos:end="220:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="222:5" pos:end="222:29"><expr pos:start="222:5" pos:end="222:28"><call pos:start="222:5" pos:end="222:28"><name pos:start="222:5" pos:end="222:23">qmp_assert_no_error</name><argument_list pos:start="222:24" pos:end="222:28">(<argument pos:start="222:25" pos:end="222:27"><expr pos:start="222:25" pos:end="222:27"><name pos:start="222:25" pos:end="222:27">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="224:5" pos:end="224:41"><expr pos:start="224:5" pos:end="224:40"><name pos:start="224:5" pos:end="224:7">val</name> <operator pos:start="224:9" pos:end="224:9">=</operator> <call pos:start="224:11" pos:end="224:40"><name pos:start="224:11" pos:end="224:25">qdict_get_qdict</name><argument_list pos:start="224:26" pos:end="224:40">(<argument pos:start="224:27" pos:end="224:29"><expr pos:start="224:27" pos:end="224:29"><name pos:start="224:27" pos:end="224:29">ret</name></expr></argument>, <argument pos:start="224:32" pos:end="224:39"><expr pos:start="224:32" pos:end="224:39"><literal type="string" pos:start="224:32" pos:end="224:39">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="226:5" pos:end="226:43"><expr pos:start="226:5" pos:end="226:42"><name pos:start="226:5" pos:end="226:9">count</name> <operator pos:start="226:11" pos:end="226:11">=</operator> <call pos:start="226:13" pos:end="226:42"><name pos:start="226:13" pos:end="226:25">qdict_get_int</name><argument_list pos:start="226:26" pos:end="226:42">(<argument pos:start="226:27" pos:end="226:29"><expr pos:start="226:27" pos:end="226:29"><name pos:start="226:27" pos:end="226:29">val</name></expr></argument>, <argument pos:start="226:32" pos:end="226:41"><expr pos:start="226:32" pos:end="226:41"><literal type="string" pos:start="226:32" pos:end="226:41">"position"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="228:5" pos:end="228:37"><expr pos:start="228:5" pos:end="228:36"><name pos:start="228:5" pos:end="228:7">eof</name> <operator pos:start="228:9" pos:end="228:9">=</operator> <call pos:start="228:11" pos:end="228:36"><name pos:start="228:11" pos:end="228:24">qdict_get_bool</name><argument_list pos:start="228:25" pos:end="228:36">(<argument pos:start="228:26" pos:end="228:28"><expr pos:start="228:26" pos:end="228:28"><name pos:start="228:26" pos:end="228:28">val</name></expr></argument>, <argument pos:start="228:31" pos:end="228:35"><expr pos:start="228:31" pos:end="228:35"><literal type="string" pos:start="228:31" pos:end="228:35">"eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="230:5" pos:end="230:34"><expr pos:start="230:5" pos:end="230:33"><call pos:start="230:5" pos:end="230:33"><name pos:start="230:5" pos:end="230:19">g_assert_cmpint</name><argument_list pos:start="230:20" pos:end="230:33">(<argument pos:start="230:21" pos:end="230:25"><expr pos:start="230:21" pos:end="230:25"><name pos:start="230:21" pos:end="230:25">count</name></expr></argument>, <argument pos:start="230:28" pos:end="230:29"><expr pos:start="230:28" pos:end="230:29"><operator pos:start="230:28" pos:end="230:29">==</operator></expr></argument>, <argument pos:start="230:32" pos:end="230:32"><expr pos:start="230:32" pos:end="230:32"><literal type="number" pos:start="230:32" pos:end="230:32">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="232:5" pos:end="232:19"><expr pos:start="232:5" pos:end="232:18"><call pos:start="232:5" pos:end="232:18"><name pos:start="232:5" pos:end="232:12">g_assert</name><argument_list pos:start="232:13" pos:end="232:18">(<argument pos:start="232:14" pos:end="232:17"><expr pos:start="232:14" pos:end="232:17"><operator pos:start="232:14" pos:end="232:14">!</operator><name pos:start="232:15" pos:end="232:17">eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="234:5" pos:end="234:17"><expr pos:start="234:5" pos:end="234:16"><call pos:start="234:5" pos:end="234:16"><name pos:start="234:5" pos:end="234:11">QDECREF</name><argument_list pos:start="234:12" pos:end="234:16">(<argument pos:start="234:13" pos:end="234:15"><expr pos:start="234:13" pos:end="234:15"><name pos:start="234:13" pos:end="234:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="236:5" pos:end="236:16"><expr pos:start="236:5" pos:end="236:15"><call pos:start="236:5" pos:end="236:15"><name pos:start="236:5" pos:end="236:10">g_free</name><argument_list pos:start="236:11" pos:end="236:15">(<argument pos:start="236:12" pos:end="236:14"><expr pos:start="236:12" pos:end="236:14"><name pos:start="236:12" pos:end="236:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="240:5" pos:end="240:22">/* partial read */</comment>

    <expr_stmt pos:start="242:5" pos:end="246:30"><expr pos:start="242:5" pos:end="246:29"><name pos:start="242:5" pos:end="242:7">cmd</name> <operator pos:start="242:9" pos:end="242:9">=</operator> <call pos:start="242:11" pos:end="246:29"><name pos:start="242:11" pos:end="242:25">g_strdup_printf</name><argument_list pos:start="242:26" pos:end="246:29">(<argument pos:start="242:27" pos:end="244:68"><expr pos:start="242:27" pos:end="244:68"><literal type="string" pos:start="242:27" pos:end="242:58">"{'execute': 'guest-file-read',"</literal>

                          <literal type="string" pos:start="244:27" pos:end="244:55">" 'arguments': { 'handle': %"</literal> <name pos:start="244:57" pos:end="244:62">PRId64</name> <literal type="string" pos:start="244:64" pos:end="244:68">"} }"</literal></expr></argument>,

                          <argument pos:start="246:27" pos:end="246:28"><expr pos:start="246:27" pos:end="246:28"><name pos:start="246:27" pos:end="246:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="248:5" pos:end="248:35"><expr pos:start="248:5" pos:end="248:34"><name pos:start="248:5" pos:end="248:7">ret</name> <operator pos:start="248:9" pos:end="248:9">=</operator> <call pos:start="248:11" pos:end="248:34"><name pos:start="248:11" pos:end="248:16">qmp_fd</name><argument_list pos:start="248:17" pos:end="248:34">(<argument pos:start="248:18" pos:end="248:28"><expr pos:start="248:18" pos:end="248:28"><name pos:start="248:18" pos:end="248:28"><name pos:start="248:18" pos:end="248:24">fixture</name><operator pos:start="248:25" pos:end="248:26">-&gt;</operator><name pos:start="248:27" pos:end="248:28">fd</name></name></expr></argument>, <argument pos:start="248:31" pos:end="248:33"><expr pos:start="248:31" pos:end="248:33"><name pos:start="248:31" pos:end="248:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="250:5" pos:end="250:41"><expr pos:start="250:5" pos:end="250:40"><name pos:start="250:5" pos:end="250:7">val</name> <operator pos:start="250:9" pos:end="250:9">=</operator> <call pos:start="250:11" pos:end="250:40"><name pos:start="250:11" pos:end="250:25">qdict_get_qdict</name><argument_list pos:start="250:26" pos:end="250:40">(<argument pos:start="250:27" pos:end="250:29"><expr pos:start="250:27" pos:end="250:29"><name pos:start="250:27" pos:end="250:29">ret</name></expr></argument>, <argument pos:start="250:32" pos:end="250:39"><expr pos:start="250:32" pos:end="250:39"><literal type="string" pos:start="250:32" pos:end="250:39">"return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="252:5" pos:end="252:40"><expr pos:start="252:5" pos:end="252:39"><name pos:start="252:5" pos:end="252:9">count</name> <operator pos:start="252:11" pos:end="252:11">=</operator> <call pos:start="252:13" pos:end="252:39"><name pos:start="252:13" pos:end="252:25">qdict_get_int</name><argument_list pos:start="252:26" pos:end="252:39">(<argument pos:start="252:27" pos:end="252:29"><expr pos:start="252:27" pos:end="252:29"><name pos:start="252:27" pos:end="252:29">val</name></expr></argument>, <argument pos:start="252:32" pos:end="252:38"><expr pos:start="252:32" pos:end="252:38"><literal type="string" pos:start="252:32" pos:end="252:38">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="254:5" pos:end="254:37"><expr pos:start="254:5" pos:end="254:36"><name pos:start="254:5" pos:end="254:7">eof</name> <operator pos:start="254:9" pos:end="254:9">=</operator> <call pos:start="254:11" pos:end="254:36"><name pos:start="254:11" pos:end="254:24">qdict_get_bool</name><argument_list pos:start="254:25" pos:end="254:36">(<argument pos:start="254:26" pos:end="254:28"><expr pos:start="254:26" pos:end="254:28"><name pos:start="254:26" pos:end="254:28">val</name></expr></argument>, <argument pos:start="254:31" pos:end="254:35"><expr pos:start="254:31" pos:end="254:35"><literal type="string" pos:start="254:31" pos:end="254:35">"eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="256:5" pos:end="256:40"><expr pos:start="256:5" pos:end="256:39"><name pos:start="256:5" pos:end="256:7">b64</name> <operator pos:start="256:9" pos:end="256:9">=</operator> <call pos:start="256:11" pos:end="256:39"><name pos:start="256:11" pos:end="256:23">qdict_get_str</name><argument_list pos:start="256:24" pos:end="256:39">(<argument pos:start="256:25" pos:end="256:27"><expr pos:start="256:25" pos:end="256:27"><name pos:start="256:25" pos:end="256:27">val</name></expr></argument>, <argument pos:start="256:30" pos:end="256:38"><expr pos:start="256:30" pos:end="256:38"><literal type="string" pos:start="256:30" pos:end="256:38">"buf-b64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="258:5" pos:end="258:55"><expr pos:start="258:5" pos:end="258:54"><call pos:start="258:5" pos:end="258:54"><name pos:start="258:5" pos:end="258:19">g_assert_cmpint</name><argument_list pos:start="258:20" pos:end="258:54">(<argument pos:start="258:21" pos:end="258:25"><expr pos:start="258:21" pos:end="258:25"><name pos:start="258:21" pos:end="258:25">count</name></expr></argument>, <argument pos:start="258:28" pos:end="258:29"><expr pos:start="258:28" pos:end="258:29"><operator pos:start="258:28" pos:end="258:29">==</operator></expr></argument>, <argument pos:start="258:32" pos:end="258:53"><expr pos:start="258:32" pos:end="258:53"><sizeof pos:start="258:32" pos:end="258:49">sizeof<argument_list pos:start="258:38" pos:end="258:49">(<argument pos:start="258:39" pos:end="258:48"><expr pos:start="258:39" pos:end="258:48"><name pos:start="258:39" pos:end="258:48">helloworld</name></expr></argument>)</argument_list></sizeof> <operator pos:start="258:51" pos:end="258:51">-</operator> <literal type="number" pos:start="258:53" pos:end="258:53">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="260:5" pos:end="260:18"><expr pos:start="260:5" pos:end="260:17"><call pos:start="260:5" pos:end="260:17"><name pos:start="260:5" pos:end="260:12">g_assert</name><argument_list pos:start="260:13" pos:end="260:17">(<argument pos:start="260:14" pos:end="260:16"><expr pos:start="260:14" pos:end="260:16"><name pos:start="260:14" pos:end="260:16">eof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="262:5" pos:end="262:39"><expr pos:start="262:5" pos:end="262:38"><name pos:start="262:5" pos:end="262:7">dec</name> <operator pos:start="262:9" pos:end="262:9">=</operator> <call pos:start="262:11" pos:end="262:38"><name pos:start="262:11" pos:end="262:25">g_base64_decode</name><argument_list pos:start="262:26" pos:end="262:38">(<argument pos:start="262:27" pos:end="262:29"><expr pos:start="262:27" pos:end="262:29"><name pos:start="262:27" pos:end="262:29">b64</name></expr></argument>, <argument pos:start="262:32" pos:end="262:37"><expr pos:start="262:32" pos:end="262:37"><operator pos:start="262:32" pos:end="262:32">&amp;</operator><name pos:start="262:33" pos:end="262:37">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="264:5" pos:end="264:55"><expr pos:start="264:5" pos:end="264:54"><call pos:start="264:5" pos:end="264:54"><name pos:start="264:5" pos:end="264:19">g_assert_cmpint</name><argument_list pos:start="264:20" pos:end="264:54">(<argument pos:start="264:21" pos:end="264:25"><expr pos:start="264:21" pos:end="264:25"><name pos:start="264:21" pos:end="264:25">count</name></expr></argument>, <argument pos:start="264:28" pos:end="264:29"><expr pos:start="264:28" pos:end="264:29"><operator pos:start="264:28" pos:end="264:29">==</operator></expr></argument>, <argument pos:start="264:32" pos:end="264:53"><expr pos:start="264:32" pos:end="264:53"><sizeof pos:start="264:32" pos:end="264:49">sizeof<argument_list pos:start="264:38" pos:end="264:49">(<argument pos:start="264:39" pos:end="264:48"><expr pos:start="264:39" pos:end="264:48"><name pos:start="264:39" pos:end="264:48">helloworld</name></expr></argument>)</argument_list></sizeof> <operator pos:start="264:51" pos:end="264:51">-</operator> <literal type="number" pos:start="264:53" pos:end="264:53">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="266:5" pos:end="266:72"><expr pos:start="266:5" pos:end="266:71"><call pos:start="266:5" pos:end="266:71"><name pos:start="266:5" pos:end="266:19">g_assert_cmpmem</name><argument_list pos:start="266:20" pos:end="266:71">(<argument pos:start="266:21" pos:end="266:23"><expr pos:start="266:21" pos:end="266:23"><name pos:start="266:21" pos:end="266:23">dec</name></expr></argument>, <argument pos:start="266:26" pos:end="266:30"><expr pos:start="266:26" pos:end="266:30"><name pos:start="266:26" pos:end="266:30">count</name></expr></argument>, <argument pos:start="266:33" pos:end="266:46"><expr pos:start="266:33" pos:end="266:46"><name pos:start="266:33" pos:end="266:42">helloworld</name> <operator pos:start="266:44" pos:end="266:44">+</operator> <literal type="number" pos:start="266:46" pos:end="266:46">6</literal></expr></argument>, <argument pos:start="266:49" pos:end="266:70"><expr pos:start="266:49" pos:end="266:70"><sizeof pos:start="266:49" pos:end="266:66">sizeof<argument_list pos:start="266:55" pos:end="266:66">(<argument pos:start="266:56" pos:end="266:65"><expr pos:start="266:56" pos:end="266:65"><name pos:start="266:56" pos:end="266:65">helloworld</name></expr></argument>)</argument_list></sizeof> <operator pos:start="266:68" pos:end="266:68">-</operator> <literal type="number" pos:start="266:70" pos:end="266:70">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="268:5" pos:end="268:16"><expr pos:start="268:5" pos:end="268:15"><call pos:start="268:5" pos:end="268:15"><name pos:start="268:5" pos:end="268:10">g_free</name><argument_list pos:start="268:11" pos:end="268:15">(<argument pos:start="268:12" pos:end="268:14"><expr pos:start="268:12" pos:end="268:14"><name pos:start="268:12" pos:end="268:14">dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="272:5" pos:end="272:17"><expr pos:start="272:5" pos:end="272:16"><call pos:start="272:5" pos:end="272:16"><name pos:start="272:5" pos:end="272:11">QDECREF</name><argument_list pos:start="272:12" pos:end="272:16">(<argument pos:start="272:13" pos:end="272:15"><expr pos:start="272:13" pos:end="272:15"><name pos:start="272:13" pos:end="272:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="274:5" pos:end="274:16"><expr pos:start="274:5" pos:end="274:15"><call pos:start="274:5" pos:end="274:15"><name pos:start="274:5" pos:end="274:10">g_free</name><argument_list pos:start="274:11" pos:end="274:15">(<argument pos:start="274:12" pos:end="274:14"><expr pos:start="274:12" pos:end="274:14"><name pos:start="274:12" pos:end="274:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="278:5" pos:end="278:15">/* close */</comment>

    <expr_stmt pos:start="280:5" pos:end="284:30"><expr pos:start="280:5" pos:end="284:29"><name pos:start="280:5" pos:end="280:7">cmd</name> <operator pos:start="280:9" pos:end="280:9">=</operator> <call pos:start="280:11" pos:end="284:29"><name pos:start="280:11" pos:end="280:25">g_strdup_printf</name><argument_list pos:start="280:26" pos:end="284:29">(<argument pos:start="280:27" pos:end="282:67"><expr pos:start="280:27" pos:end="282:67"><literal type="string" pos:start="280:27" pos:end="280:59">"{'execute': 'guest-file-close',"</literal>

                          <literal type="string" pos:start="282:27" pos:end="282:54">" 'arguments': {'handle': %"</literal> <name pos:start="282:56" pos:end="282:61">PRId64</name> <literal type="string" pos:start="282:63" pos:end="282:67">"} }"</literal></expr></argument>,

                          <argument pos:start="284:27" pos:end="284:28"><expr pos:start="284:27" pos:end="284:28"><name pos:start="284:27" pos:end="284:28">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="286:5" pos:end="286:35"><expr pos:start="286:5" pos:end="286:34"><name pos:start="286:5" pos:end="286:7">ret</name> <operator pos:start="286:9" pos:end="286:9">=</operator> <call pos:start="286:11" pos:end="286:34"><name pos:start="286:11" pos:end="286:16">qmp_fd</name><argument_list pos:start="286:17" pos:end="286:34">(<argument pos:start="286:18" pos:end="286:28"><expr pos:start="286:18" pos:end="286:28"><name pos:start="286:18" pos:end="286:28"><name pos:start="286:18" pos:end="286:24">fixture</name><operator pos:start="286:25" pos:end="286:26">-&gt;</operator><name pos:start="286:27" pos:end="286:28">fd</name></name></expr></argument>, <argument pos:start="286:31" pos:end="286:33"><expr pos:start="286:31" pos:end="286:33"><name pos:start="286:31" pos:end="286:33">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="288:5" pos:end="288:17"><expr pos:start="288:5" pos:end="288:16"><call pos:start="288:5" pos:end="288:16"><name pos:start="288:5" pos:end="288:11">QDECREF</name><argument_list pos:start="288:12" pos:end="288:16">(<argument pos:start="288:13" pos:end="288:15"><expr pos:start="288:13" pos:end="288:15"><name pos:start="288:13" pos:end="288:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="290:5" pos:end="290:16"><expr pos:start="290:5" pos:end="290:15"><call pos:start="290:5" pos:end="290:15"><name pos:start="290:5" pos:end="290:10">g_free</name><argument_list pos:start="290:11" pos:end="290:15">(<argument pos:start="290:12" pos:end="290:14"><expr pos:start="290:12" pos:end="290:14"><name pos:start="290:12" pos:end="290:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
