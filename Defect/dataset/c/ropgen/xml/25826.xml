<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25826.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">dump_map_entry</name><parameter_list pos:start="1:27" pos:end="3:42">(<parameter pos:start="1:28" pos:end="1:53"><decl pos:start="1:28" pos:end="1:53"><type pos:start="1:28" pos:end="1:53"><name pos:start="1:28" pos:end="1:39">OutputFormat</name></type> <name pos:start="1:41" pos:end="1:53">output_format</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:66"><decl pos:start="1:56" pos:end="1:66"><type pos:start="1:56" pos:end="1:66"><name pos:start="1:56" pos:end="1:63">MapEntry</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:66">e</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:41"><decl pos:start="3:28" pos:end="3:41"><type pos:start="3:28" pos:end="3:41"><name pos:start="3:28" pos:end="3:35">MapEntry</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:41">next</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:5">

    <switch pos:start="7:5" pos:end="79:5">switch <condition pos:start="7:12" pos:end="7:26">(<expr pos:start="7:13" pos:end="7:25"><name pos:start="7:13" pos:end="7:25">output_format</name></expr>)</condition> <block pos:start="7:28" pos:end="79:5">{<block_content pos:start="9:5" pos:end="77:14">

    <case pos:start="9:5" pos:end="9:23">case <expr pos:start="9:10" pos:end="9:22"><name pos:start="9:10" pos:end="9:22">OFORMAT_HUMAN</name></expr>:</case>

        <if_stmt pos:start="11:9" pos:end="19:9"><if pos:start="11:9" pos:end="19:9">if <condition pos:start="11:12" pos:end="13:50">(<expr pos:start="11:13" pos:end="13:49"><operator pos:start="11:13" pos:end="11:13">(</operator><name pos:start="11:14" pos:end="11:21"><name pos:start="11:14" pos:end="11:14">e</name><operator pos:start="11:15" pos:end="11:16">-&gt;</operator><name pos:start="11:17" pos:end="11:21">flags</name></name> <operator pos:start="11:23" pos:end="11:23">&amp;</operator> <name pos:start="11:25" pos:end="11:39">BDRV_BLOCK_DATA</name><operator pos:start="11:40" pos:end="11:40">)</operator> <operator pos:start="11:42" pos:end="11:43">&amp;&amp;</operator>

            <operator pos:start="13:13" pos:end="13:13">!</operator><operator pos:start="13:14" pos:end="13:14">(</operator><name pos:start="13:15" pos:end="13:22"><name pos:start="13:15" pos:end="13:15">e</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:22">flags</name></name> <operator pos:start="13:24" pos:end="13:24">&amp;</operator> <name pos:start="13:26" pos:end="13:48">BDRV_BLOCK_OFFSET_VALID</name><operator pos:start="13:49" pos:end="13:49">)</operator></expr>)</condition> <block pos:start="13:52" pos:end="19:9">{<block_content pos:start="15:13" pos:end="17:20">

            <expr_stmt pos:start="15:13" pos:end="15:86"><expr pos:start="15:13" pos:end="15:85"><call pos:start="15:13" pos:end="15:85"><name pos:start="15:13" pos:end="15:24">error_report</name><argument_list pos:start="15:25" pos:end="15:85">(<argument pos:start="15:26" pos:end="15:84"><expr pos:start="15:26" pos:end="15:84"><literal type="string" pos:start="15:26" pos:end="15:84">"File contains external, encrypted or compressed clusters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="17:13" pos:end="17:20"><expr pos:start="17:13" pos:end="17:19"><call pos:start="17:13" pos:end="17:19"><name pos:start="17:13" pos:end="17:16">exit</name><argument_list pos:start="17:17" pos:end="17:19">(<argument pos:start="17:18" pos:end="17:18"><expr pos:start="17:18" pos:end="17:18"><literal type="number" pos:start="17:18" pos:end="17:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:78">(<expr pos:start="21:13" pos:end="21:77"><operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:21"><name pos:start="21:14" pos:end="21:14">e</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:21">flags</name></name> <operator pos:start="21:23" pos:end="21:23">&amp;</operator> <operator pos:start="21:25" pos:end="21:25">(</operator><name pos:start="21:26" pos:end="21:40">BDRV_BLOCK_DATA</name><operator pos:start="21:41" pos:end="21:41">|</operator><name pos:start="21:42" pos:end="21:56">BDRV_BLOCK_ZERO</name><operator pos:start="21:57" pos:end="21:57">)</operator><operator pos:start="21:58" pos:end="21:58">)</operator> <operator pos:start="21:60" pos:end="21:61">==</operator> <name pos:start="21:63" pos:end="21:77">BDRV_BLOCK_DATA</name></expr>)</condition> <block pos:start="21:80" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:68">

            <expr_stmt pos:start="23:13" pos:end="25:68"><expr pos:start="23:13" pos:end="25:67"><call pos:start="23:13" pos:end="25:67"><name pos:start="23:13" pos:end="23:18">printf</name><argument_list pos:start="23:19" pos:end="25:67">(<argument pos:start="23:20" pos:end="23:64"><expr pos:start="23:20" pos:end="23:64"><literal type="string" pos:start="23:20" pos:end="23:26">"%#-16"</literal><name pos:start="23:27" pos:end="23:32">PRIx64</name><literal type="string" pos:start="23:33" pos:end="23:39">"%#-16"</literal><name pos:start="23:40" pos:end="23:45">PRIx64</name><literal type="string" pos:start="23:46" pos:end="23:52">"%#-16"</literal><name pos:start="23:53" pos:end="23:58">PRIx64</name><literal type="string" pos:start="23:59" pos:end="23:64">"%s\n"</literal></expr></argument>,

                   <argument pos:start="25:20" pos:end="25:27"><expr pos:start="25:20" pos:end="25:27"><name pos:start="25:20" pos:end="25:27"><name pos:start="25:20" pos:end="25:20">e</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:27">start</name></name></expr></argument>, <argument pos:start="25:30" pos:end="25:38"><expr pos:start="25:30" pos:end="25:38"><name pos:start="25:30" pos:end="25:38"><name pos:start="25:30" pos:end="25:30">e</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:38">length</name></name></expr></argument>, <argument pos:start="25:41" pos:end="25:49"><expr pos:start="25:41" pos:end="25:49"><name pos:start="25:41" pos:end="25:49"><name pos:start="25:41" pos:end="25:41">e</name><operator pos:start="25:42" pos:end="25:43">-&gt;</operator><name pos:start="25:44" pos:end="25:49">offset</name></name></expr></argument>, <argument pos:start="25:52" pos:end="25:66"><expr pos:start="25:52" pos:end="25:66"><name pos:start="25:52" pos:end="25:66"><name pos:start="25:52" pos:end="25:52">e</name><operator pos:start="25:53" pos:end="25:54">-&gt;</operator><name pos:start="25:55" pos:end="25:56">bs</name><operator pos:start="25:57" pos:end="25:58">-&gt;</operator><name pos:start="25:59" pos:end="25:66">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="29:9" pos:end="33:11">/* This format ignores the distinction between 0, ZERO and ZERO|DATA.

         * Modify the flags here to allow more coalescing.

         */</comment>

        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="43:9">if <condition pos:start="35:12" pos:end="37:81">(<expr pos:start="35:13" pos:end="37:80"><name pos:start="35:13" pos:end="35:16">next</name> <operator pos:start="35:18" pos:end="35:19">&amp;&amp;</operator>

            <operator pos:start="37:13" pos:end="37:13">(</operator><name pos:start="37:14" pos:end="37:24"><name pos:start="37:14" pos:end="37:17">next</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:24">flags</name></name> <operator pos:start="37:26" pos:end="37:26">&amp;</operator> <operator pos:start="37:28" pos:end="37:28">(</operator><name pos:start="37:29" pos:end="37:43">BDRV_BLOCK_DATA</name><operator pos:start="37:44" pos:end="37:44">|</operator><name pos:start="37:45" pos:end="37:59">BDRV_BLOCK_ZERO</name><operator pos:start="37:60" pos:end="37:60">)</operator><operator pos:start="37:61" pos:end="37:61">)</operator> <operator pos:start="37:63" pos:end="37:64">!=</operator> <name pos:start="37:66" pos:end="37:80">BDRV_BLOCK_DATA</name></expr>)</condition> <block pos:start="37:83" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:43">

            <expr_stmt pos:start="39:13" pos:end="39:44"><expr pos:start="39:13" pos:end="39:43"><name pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:16">next</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:23">flags</name></name> <operator pos:start="39:25" pos:end="39:26">&amp;=</operator> <operator pos:start="39:28" pos:end="39:28">~</operator><name pos:start="39:29" pos:end="39:43">BDRV_BLOCK_DATA</name></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:43"><expr pos:start="41:13" pos:end="41:42"><name pos:start="41:13" pos:end="41:23"><name pos:start="41:13" pos:end="41:16">next</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:23">flags</name></name> <operator pos:start="41:25" pos:end="41:26">|=</operator> <name pos:start="41:28" pos:end="41:42">BDRV_BLOCK_ZERO</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:22">case <expr pos:start="47:10" pos:end="47:21"><name pos:start="47:10" pos:end="47:21">OFORMAT_JSON</name></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="59:64"><expr pos:start="49:9" pos:end="59:63"><call pos:start="49:9" pos:end="59:63"><name pos:start="49:9" pos:end="49:14">printf</name><argument_list pos:start="49:15" pos:end="59:63">(<argument pos:start="49:16" pos:end="51:44"><expr pos:start="49:16" pos:end="51:44"><literal type="string" pos:start="49:16" pos:end="49:33">"%s{ \"start\": %"</literal><name pos:start="49:34" pos:end="49:39">PRId64</name><literal type="string" pos:start="49:40" pos:end="49:56">", \"length\": %"</literal><name pos:start="49:57" pos:end="49:62">PRId64</name><literal type="string" pos:start="49:63" pos:end="49:80">", \"depth\": %d,"</literal>

               <literal type="string" pos:start="51:16" pos:end="51:44">" \"zero\": %s, \"data\": %s"</literal></expr></argument>,

               <argument pos:start="53:16" pos:end="53:44"><expr pos:start="53:16" pos:end="53:44"><operator pos:start="53:16" pos:end="53:16">(</operator><ternary pos:start="53:17" pos:end="53:43"><condition pos:start="53:17" pos:end="53:31"><expr pos:start="53:17" pos:end="53:29"><name pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:17">e</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:24">start</name></name> <operator pos:start="53:26" pos:end="53:27">==</operator> <literal type="number" pos:start="53:29" pos:end="53:29">0</literal></expr> ?</condition><then pos:start="53:33" pos:end="53:35"> <expr pos:start="53:33" pos:end="53:35"><literal type="string" pos:start="53:33" pos:end="53:35">"["</literal></expr> </then><else pos:start="53:37" pos:end="53:43">: <expr pos:start="53:39" pos:end="53:43"><literal type="string" pos:start="53:39" pos:end="53:43">",\n"</literal></expr></else></ternary><operator pos:start="53:44" pos:end="53:44">)</operator></expr></argument>,

               <argument pos:start="55:16" pos:end="55:23"><expr pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:16">e</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:23">start</name></name></expr></argument>, <argument pos:start="55:26" pos:end="55:34"><expr pos:start="55:26" pos:end="55:34"><name pos:start="55:26" pos:end="55:34"><name pos:start="55:26" pos:end="55:26">e</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:34">length</name></name></expr></argument>, <argument pos:start="55:37" pos:end="55:44"><expr pos:start="55:37" pos:end="55:44"><name pos:start="55:37" pos:end="55:44"><name pos:start="55:37" pos:end="55:37">e</name><operator pos:start="55:38" pos:end="55:39">-&gt;</operator><name pos:start="55:40" pos:end="55:44">depth</name></name></expr></argument>,

               <argument pos:start="57:16" pos:end="57:62"><expr pos:start="57:16" pos:end="57:62"><ternary pos:start="57:16" pos:end="57:62"><condition pos:start="57:16" pos:end="57:45"><expr pos:start="57:16" pos:end="57:43"><operator pos:start="57:16" pos:end="57:16">(</operator><name pos:start="57:17" pos:end="57:24"><name pos:start="57:17" pos:end="57:17">e</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:24">flags</name></name> <operator pos:start="57:26" pos:end="57:26">&amp;</operator> <name pos:start="57:28" pos:end="57:42">BDRV_BLOCK_ZERO</name><operator pos:start="57:43" pos:end="57:43">)</operator></expr> ?</condition><then pos:start="57:47" pos:end="57:52"> <expr pos:start="57:47" pos:end="57:52"><literal type="string" pos:start="57:47" pos:end="57:52">"true"</literal></expr> </then><else pos:start="57:54" pos:end="57:62">: <expr pos:start="57:56" pos:end="57:62"><literal type="string" pos:start="57:56" pos:end="57:62">"false"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="59:16" pos:end="59:62"><expr pos:start="59:16" pos:end="59:62"><ternary pos:start="59:16" pos:end="59:62"><condition pos:start="59:16" pos:end="59:45"><expr pos:start="59:16" pos:end="59:43"><operator pos:start="59:16" pos:end="59:16">(</operator><name pos:start="59:17" pos:end="59:24"><name pos:start="59:17" pos:end="59:17">e</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:24">flags</name></name> <operator pos:start="59:26" pos:end="59:26">&amp;</operator> <name pos:start="59:28" pos:end="59:42">BDRV_BLOCK_DATA</name><operator pos:start="59:43" pos:end="59:43">)</operator></expr> ?</condition><then pos:start="59:47" pos:end="59:52"> <expr pos:start="59:47" pos:end="59:52"><literal type="string" pos:start="59:47" pos:end="59:52">"true"</literal></expr> </then><else pos:start="59:54" pos:end="59:62">: <expr pos:start="59:56" pos:end="59:62"><literal type="string" pos:start="59:56" pos:end="59:62">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:47">(<expr pos:start="61:13" pos:end="61:46"><name pos:start="61:13" pos:end="61:20"><name pos:start="61:13" pos:end="61:13">e</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:20">flags</name></name> <operator pos:start="61:22" pos:end="61:22">&amp;</operator> <name pos:start="61:24" pos:end="61:46">BDRV_BLOCK_OFFSET_VALID</name></expr>)</condition> <block pos:start="61:49" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:55">

            <expr_stmt pos:start="63:13" pos:end="63:55"><expr pos:start="63:13" pos:end="63:54"><call pos:start="63:13" pos:end="63:54"><name pos:start="63:13" pos:end="63:18">printf</name><argument_list pos:start="63:19" pos:end="63:54">(<argument pos:start="63:20" pos:end="63:42"><expr pos:start="63:20" pos:end="63:42"><literal type="string" pos:start="63:20" pos:end="63:34">", 'offset': %"</literal><name pos:start="63:35" pos:end="63:40">PRId64</name><literal type="string" pos:start="63:41" pos:end="63:42">""</literal></expr></argument>, <argument pos:start="63:45" pos:end="63:53"><expr pos:start="63:45" pos:end="63:53"><name pos:start="63:45" pos:end="63:53"><name pos:start="63:45" pos:end="63:45">e</name><operator pos:start="63:46" pos:end="63:47">-&gt;</operator><name pos:start="63:48" pos:end="63:53">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:21"><expr pos:start="67:9" pos:end="67:20"><call pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:15">putchar</name><argument_list pos:start="67:16" pos:end="67:20">(<argument pos:start="67:17" pos:end="67:19"><expr pos:start="67:17" pos:end="67:19"><literal type="char" pos:start="67:17" pos:end="67:19">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:18">(<expr pos:start="71:13" pos:end="71:17"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:17">next</name></expr>)</condition> <block pos:start="71:20" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:26">

            <expr_stmt pos:start="73:13" pos:end="73:26"><expr pos:start="73:13" pos:end="73:25"><call pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:18">printf</name><argument_list pos:start="73:19" pos:end="73:25">(<argument pos:start="73:20" pos:end="73:24"><expr pos:start="73:20" pos:end="73:24"><literal type="string" pos:start="73:20" pos:end="73:24">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
