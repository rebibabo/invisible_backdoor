<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18805.c" pos:tabs="8"><function pos:start="1:1" pos:end="473:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:37">yuv2packed1</name>)<parameter_list pos:start="1:39" pos:end="3:132">(<parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:52"><name pos:start="1:40" pos:end="1:49">SwsContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">c</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:74"><decl pos:start="1:55" pos:end="1:74"><type pos:start="1:55" pos:end="1:74"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:68">uint16_t</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">buf0</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:98"><decl pos:start="1:77" pos:end="1:98"><type pos:start="1:77" pos:end="1:98"><specifier pos:start="1:77" pos:end="1:81">const</specifier> <name pos:start="1:83" pos:end="1:90">uint16_t</name> <modifier pos:start="1:92" pos:end="1:92">*</modifier></type><name pos:start="1:93" pos:end="1:98">uvbuf0</name></decl></parameter>, <parameter pos:start="1:101" pos:end="1:122"><decl pos:start="1:101" pos:end="1:122"><type pos:start="1:101" pos:end="1:122"><specifier pos:start="1:101" pos:end="1:105">const</specifier> <name pos:start="1:107" pos:end="1:114">uint16_t</name> <modifier pos:start="1:116" pos:end="1:116">*</modifier></type><name pos:start="1:117" pos:end="1:122">uvbuf1</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:47"><decl pos:start="3:27" pos:end="3:47"><type pos:start="3:27" pos:end="3:47"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:40">uint16_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:47">abuf0</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:62"><decl pos:start="3:50" pos:end="3:62"><type pos:start="3:50" pos:end="3:62"><name pos:start="3:50" pos:end="3:56">uint8_t</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:62">dest</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:72"><decl pos:start="3:65" pos:end="3:72"><type pos:start="3:65" pos:end="3:72"><name pos:start="3:65" pos:end="3:67">int</name></type> <name pos:start="3:69" pos:end="3:72">dstW</name></decl></parameter>, <parameter pos:start="3:75" pos:end="3:85"><decl pos:start="3:75" pos:end="3:85"><type pos:start="3:75" pos:end="3:85"><name pos:start="3:75" pos:end="3:77">int</name></type> <name pos:start="3:79" pos:end="3:85">uvalpha</name></decl></parameter>, <parameter pos:start="3:88" pos:end="3:113"><decl pos:start="3:88" pos:end="3:113"><type pos:start="3:88" pos:end="3:113"><name pos:start="3:88" pos:end="3:103"><name pos:start="3:88" pos:end="3:91">enum</name> <name pos:start="3:93" pos:end="3:103">PixelFormat</name></name></type> <name pos:start="3:105" pos:end="3:113">dstFormat</name></decl></parameter>, <parameter pos:start="3:116" pos:end="3:124"><decl pos:start="3:116" pos:end="3:124"><type pos:start="3:116" pos:end="3:124"><name pos:start="3:116" pos:end="3:118">int</name></type> <name pos:start="3:120" pos:end="3:124">flags</name></decl></parameter>, <parameter pos:start="3:127" pos:end="3:131"><decl pos:start="3:127" pos:end="3:131"><type pos:start="3:127" pos:end="3:131"><name pos:start="3:127" pos:end="3:129">int</name></type> <name pos:start="3:131" pos:end="3:131">y</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="473:1">{<block_content pos:start="7:5" pos:end="471:5">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:13"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:13">int</name></type> <name pos:start="7:15" pos:end="7:21">yalpha1</name><init pos:start="7:22" pos:end="7:23">=<expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:20"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:18">uint16_t</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:24">buf1</name><init pos:start="13:25" pos:end="13:30">= <expr pos:start="13:27" pos:end="13:30"><name pos:start="13:27" pos:end="13:30">buf0</name></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="13:33" pos:end="13:60">//FIXME needed for RGB1/BGR1</comment>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:13"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:13">int</name></type> <name pos:start="15:15" pos:end="15:20">yalpha</name><init pos:start="15:21" pos:end="15:26">= <expr pos:start="15:23" pos:end="15:26"><literal type="number" pos:start="15:23" pos:end="15:26">4096</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="15:29" pos:end="15:39">//FIXME ...</comment>



    <if_stmt pos:start="19:5" pos:end="30:0"><if pos:start="19:5" pos:end="30:0">if <condition pos:start="19:8" pos:end="19:33">(<expr pos:start="19:9" pos:end="19:32"><name pos:start="19:9" pos:end="19:13">flags</name><operator pos:start="19:14" pos:end="19:14">&amp;</operator><name pos:start="19:15" pos:end="19:32">SWS_FULL_CHR_H_INT</name></expr>)</condition> <block pos:start="19:35" pos:end="30:0">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:95"><expr pos:start="21:9" pos:end="21:94"><call pos:start="21:9" pos:end="21:94"><name pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:9">c</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:22">yuv2packed2</name></name><argument_list pos:start="21:23" pos:end="21:94">(<argument pos:start="21:24" pos:end="21:24"><expr pos:start="21:24" pos:end="21:24"><name pos:start="21:24" pos:end="21:24">c</name></expr></argument>, <argument pos:start="21:27" pos:end="21:30"><expr pos:start="21:27" pos:end="21:30"><name pos:start="21:27" pos:end="21:30">buf0</name></expr></argument>, <argument pos:start="21:33" pos:end="21:36"><expr pos:start="21:33" pos:end="21:36"><name pos:start="21:33" pos:end="21:36">buf0</name></expr></argument>, <argument pos:start="21:39" pos:end="21:44"><expr pos:start="21:39" pos:end="21:44"><name pos:start="21:39" pos:end="21:44">uvbuf0</name></expr></argument>, <argument pos:start="21:47" pos:end="21:52"><expr pos:start="21:47" pos:end="21:52"><name pos:start="21:47" pos:end="21:52">uvbuf1</name></expr></argument>, <argument pos:start="21:55" pos:end="21:59"><expr pos:start="21:55" pos:end="21:59"><name pos:start="21:55" pos:end="21:59">abuf0</name></expr></argument>, <argument pos:start="21:62" pos:end="21:66"><expr pos:start="21:62" pos:end="21:66"><name pos:start="21:62" pos:end="21:66">abuf0</name></expr></argument>, <argument pos:start="21:69" pos:end="21:72"><expr pos:start="21:69" pos:end="21:72"><name pos:start="21:69" pos:end="21:72">dest</name></expr></argument>, <argument pos:start="21:75" pos:end="21:78"><expr pos:start="21:75" pos:end="21:78"><name pos:start="21:75" pos:end="21:78">dstW</name></expr></argument>, <argument pos:start="21:81" pos:end="21:81"><expr pos:start="21:81" pos:end="21:81"><literal type="number" pos:start="21:81" pos:end="21:81">0</literal></expr></argument>, <argument pos:start="21:84" pos:end="21:90"><expr pos:start="21:84" pos:end="21:90"><name pos:start="21:84" pos:end="21:90">uvalpha</name></expr></argument>, <argument pos:start="21:93" pos:end="21:93"><expr pos:start="21:93" pos:end="21:93"><name pos:start="21:93" pos:end="21:93">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="29:1" pos:end="29:24">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <if_stmt pos:start="31:5" pos:end="462:0"><if pos:start="31:5" pos:end="462:0">if<condition pos:start="31:7" pos:end="31:31">(<expr pos:start="31:8" pos:end="31:30"><operator pos:start="31:8" pos:end="31:8">!</operator><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:14">flags</name> <operator pos:start="31:16" pos:end="31:16">&amp;</operator> <name pos:start="31:18" pos:end="31:29">SWS_BITEXACT</name><operator pos:start="31:30" pos:end="31:30">)</operator></expr>)</condition> <block pos:start="31:33" pos:end="462:0">{<block_content pos:start="33:9" pos:end="457:9">

        <if_stmt pos:start="33:9" pos:end="457:9"><if pos:start="33:9" pos:end="245:9">if <condition pos:start="33:12" pos:end="33:27">(<expr pos:start="33:13" pos:end="33:26"><name pos:start="33:13" pos:end="33:19">uvalpha</name> <operator pos:start="33:21" pos:end="33:21">&lt;</operator> <literal type="number" pos:start="33:23" pos:end="33:26">2048</literal></expr>)</condition> <block pos:start="33:29" pos:end="245:9">{<block_content pos:start="35:13" pos:end="243:13"> <comment type="line" pos:start="33:31" pos:end="33:115">// note this is not correct (shifts chrominance by 0.5 pixels) but it is a bit faster</comment>

            <switch pos:start="35:13" pos:end="243:13">switch<condition pos:start="35:19" pos:end="35:29">(<expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:28">dstFormat</name></expr>)</condition> <block pos:start="35:31" pos:end="243:13">{<block_content pos:start="37:13" pos:end="241:23">

            <case pos:start="37:13" pos:end="37:31">case <expr pos:start="37:18" pos:end="37:30"><name pos:start="37:18" pos:end="37:30">PIX_FMT_RGB32</name></expr>:</case>

                <if_stmt pos:start="39:17" pos:end="95:17"><if pos:start="39:17" pos:end="67:17">if <condition pos:start="39:20" pos:end="39:57">(<expr pos:start="39:21" pos:end="39:56"><name pos:start="39:21" pos:end="39:40">CONFIG_SWSCALE_ALPHA</name> <operator pos:start="39:42" pos:end="39:43">&amp;&amp;</operator> <name pos:start="39:45" pos:end="39:56"><name pos:start="39:45" pos:end="39:45">c</name><operator pos:start="39:46" pos:end="39:47">-&gt;</operator><name pos:start="39:48" pos:end="39:56">alpPixBuf</name></name></expr>)</condition> <block pos:start="39:59" pos:end="67:17">{<block_content pos:start="41:21" pos:end="65:22">

                    <asm pos:start="41:21" pos:end="65:22">__asm__ <specifier pos:start="41:29" pos:end="41:36">volatile</specifier>(

                        "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                        "mov        %4, %%"REG_b"               \n\t"

                        "push %%"REG_BP"                        \n\t"

                        YSCALEYUV2RGB1(%%REGBP, %5)

                        YSCALEYUV2RGB1_ALPHA(%%REGBP)

                        WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)

                        "pop %%"REG_BP"                         \n\t"

                        "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                        :: "c" (buf0), "d" (abuf0), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                        "a" (&amp;c-&gt;redDither)

                    );</asm>

                </block_content>}</block></if> <else pos:start="67:19" pos:end="95:17">else <block pos:start="67:24" pos:end="95:17">{<block_content pos:start="69:21" pos:end="93:22">

                    <asm pos:start="69:21" pos:end="93:22">__asm__ <specifier pos:start="69:29" pos:end="69:36">volatile</specifier>(

                        "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                        "mov        %4, %%"REG_b"               \n\t"

                        "push %%"REG_BP"                        \n\t"

                        YSCALEYUV2RGB1(%%REGBP, %5)

                        "pcmpeqd %%mm7, %%mm7                   \n\t"

                        WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)

                        "pop %%"REG_BP"                         \n\t"

                        "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                        :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                        "a" (&amp;c-&gt;redDither)

                    );</asm>

                </block_content>}</block></else></if_stmt>

                <return pos:start="97:17" pos:end="97:23">return;</return>

            <case pos:start="99:13" pos:end="99:31">case <expr pos:start="99:18" pos:end="99:30"><name pos:start="99:18" pos:end="99:30">PIX_FMT_BGR24</name></expr>:</case>

                <asm pos:start="101:17" pos:end="125:18">__asm__ <specifier pos:start="101:25" pos:end="101:32">volatile</specifier>(

                    "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                    "mov        %4, %%"REG_b"               \n\t"

                    "push %%"REG_BP"                        \n\t"

                    YSCALEYUV2RGB1(%%REGBP, %5)

                    "pxor    %%mm7, %%mm7                   \n\t"

                    WRITEBGR24(%%REGb, 8280(%5), %%REGBP)

                    "pop %%"REG_BP"                         \n\t"

                    "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                    :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                    "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="127:17" pos:end="127:23">return;</return>

            <case pos:start="129:13" pos:end="129:32">case <expr pos:start="129:18" pos:end="129:31"><name pos:start="129:18" pos:end="129:31">PIX_FMT_RGB555</name></expr>:</case>

                <asm pos:start="131:17" pos:end="167:18">__asm__ <specifier pos:start="131:25" pos:end="131:32">volatile</specifier>(

                    "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                    "mov        %4, %%"REG_b"               \n\t"

                    "push %%"REG_BP"                        \n\t"

                    YSCALEYUV2RGB1(%%REGBP, %5)

                    "pxor    %%mm7, %%mm7                   \n\t"

                    <comment type="block" pos:start="143:21" pos:end="143:58">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="145:1" pos:end="145:18">#<cpp:directive pos:start="145:2" pos:end="145:6">ifdef</cpp:directive> <name pos:start="145:8" pos:end="145:18">DITHER1XBPP</name></cpp:ifdef>

                    "paddusb "BLUE_DITHER"(%5), %%mm2      \n\t"

                    "paddusb "GREEN_DITHER"(%5), %%mm4      \n\t"

                    "paddusb "RED_DITHER"(%5), %%mm5      \n\t"

<cpp:endif pos:start="153:1" pos:end="153:6">#<cpp:directive pos:start="153:2" pos:end="153:6">endif</cpp:directive></cpp:endif>

                    WRITERGB15(%%REGb, 8280(%5), %%REGBP)

                    "pop %%"REG_BP"                         \n\t"

                    "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                    :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                    "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="169:17" pos:end="169:23">return;</return>

            <case pos:start="171:13" pos:end="171:32">case <expr pos:start="171:18" pos:end="171:31"><name pos:start="171:18" pos:end="171:31">PIX_FMT_RGB565</name></expr>:</case>

                <asm pos:start="173:17" pos:end="211:18">__asm__ <specifier pos:start="173:25" pos:end="173:32">volatile</specifier>(

                    "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                    "mov        %4, %%"REG_b"               \n\t"

                    "push %%"REG_BP"                        \n\t"

                    YSCALEYUV2RGB1(%%REGBP, %5)

                    "pxor    %%mm7, %%mm7                   \n\t"

                    <comment type="block" pos:start="185:21" pos:end="185:58">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="187:1" pos:end="187:18">#<cpp:directive pos:start="187:2" pos:end="187:6">ifdef</cpp:directive> <name pos:start="187:8" pos:end="187:18">DITHER1XBPP</name></cpp:ifdef>

                    "paddusb "BLUE_DITHER"(%5), %%mm2      \n\t"

                    "paddusb "GREEN_DITHER"(%5), %%mm4      \n\t"

                    "paddusb "RED_DITHER"(%5), %%mm5      \n\t"

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>



                    WRITERGB16(%%REGb, 8280(%5), %%REGBP)

                    "pop %%"REG_BP"                         \n\t"

                    "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                    :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                    "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="213:17" pos:end="213:23">return;</return>

            <case pos:start="215:13" pos:end="215:33">case <expr pos:start="215:18" pos:end="215:32"><name pos:start="215:18" pos:end="215:32">PIX_FMT_YUYV422</name></expr>:</case>

                <asm pos:start="217:17" pos:end="239:18">__asm__ <specifier pos:start="217:25" pos:end="217:32">volatile</specifier>(

                    "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                    "mov        %4, %%"REG_b"               \n\t"

                    "push %%"REG_BP"                        \n\t"

                    YSCALEYUV2PACKED1(%%REGBP, %5)

                    WRITEYUY2(%%REGb, 8280(%5), %%REGBP)

                    "pop %%"REG_BP"                         \n\t"

                    "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                    :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                    "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="241:17" pos:end="241:23">return;</return>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="245:11" pos:end="457:9">else <block pos:start="245:16" pos:end="457:9">{<block_content pos:start="247:13" pos:end="455:13">

            <switch pos:start="247:13" pos:end="455:13">switch<condition pos:start="247:19" pos:end="247:29">(<expr pos:start="247:20" pos:end="247:28"><name pos:start="247:20" pos:end="247:28">dstFormat</name></expr>)</condition> <block pos:start="247:31" pos:end="455:13">{<block_content pos:start="249:13" pos:end="453:23">

            <case pos:start="249:13" pos:end="249:31">case <expr pos:start="249:18" pos:end="249:30"><name pos:start="249:18" pos:end="249:30">PIX_FMT_RGB32</name></expr>:</case>

                <if_stmt pos:start="251:17" pos:end="307:17"><if pos:start="251:17" pos:end="279:17">if <condition pos:start="251:20" pos:end="251:57">(<expr pos:start="251:21" pos:end="251:56"><name pos:start="251:21" pos:end="251:40">CONFIG_SWSCALE_ALPHA</name> <operator pos:start="251:42" pos:end="251:43">&amp;&amp;</operator> <name pos:start="251:45" pos:end="251:56"><name pos:start="251:45" pos:end="251:45">c</name><operator pos:start="251:46" pos:end="251:47">-&gt;</operator><name pos:start="251:48" pos:end="251:56">alpPixBuf</name></name></expr>)</condition> <block pos:start="251:59" pos:end="279:17">{<block_content pos:start="253:21" pos:end="277:22">

                    <asm pos:start="253:21" pos:end="277:22">__asm__ <specifier pos:start="253:29" pos:end="253:36">volatile</specifier>(

                        "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                        "mov        %4, %%"REG_b"               \n\t"

                        "push %%"REG_BP"                        \n\t"

                        YSCALEYUV2RGB1b(%%REGBP, %5)

                        YSCALEYUV2RGB1_ALPHA(%%REGBP)

                        WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)

                        "pop %%"REG_BP"                         \n\t"

                        "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                        :: "c" (buf0), "d" (abuf0), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                        "a" (&amp;c-&gt;redDither)

                    );</asm>

                </block_content>}</block></if> <else pos:start="279:19" pos:end="307:17">else <block pos:start="279:24" pos:end="307:17">{<block_content pos:start="281:21" pos:end="305:22">

                    <asm pos:start="281:21" pos:end="305:22">__asm__ <specifier pos:start="281:29" pos:end="281:36">volatile</specifier>(

                        "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                        "mov        %4, %%"REG_b"               \n\t"

                        "push %%"REG_BP"                        \n\t"

                        YSCALEYUV2RGB1b(%%REGBP, %5)

                        "pcmpeqd %%mm7, %%mm7                   \n\t"

                        WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)

                        "pop %%"REG_BP"                         \n\t"

                        "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                        :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                        "a" (&amp;c-&gt;redDither)

                    );</asm>

                </block_content>}</block></else></if_stmt>

                <return pos:start="309:17" pos:end="309:23">return;</return>

            <case pos:start="311:13" pos:end="311:31">case <expr pos:start="311:18" pos:end="311:30"><name pos:start="311:18" pos:end="311:30">PIX_FMT_BGR24</name></expr>:</case>

                <asm pos:start="313:17" pos:end="337:18">__asm__ <specifier pos:start="313:25" pos:end="313:32">volatile</specifier>(

                    "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                    "mov        %4, %%"REG_b"               \n\t"

                    "push %%"REG_BP"                        \n\t"

                    YSCALEYUV2RGB1b(%%REGBP, %5)

                    "pxor    %%mm7, %%mm7                   \n\t"

                    WRITEBGR24(%%REGb, 8280(%5), %%REGBP)

                    "pop %%"REG_BP"                         \n\t"

                    "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                    :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                    "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="339:17" pos:end="339:23">return;</return>

            <case pos:start="341:13" pos:end="341:32">case <expr pos:start="341:18" pos:end="341:31"><name pos:start="341:18" pos:end="341:31">PIX_FMT_RGB555</name></expr>:</case>

                <asm pos:start="343:17" pos:end="379:18">__asm__ <specifier pos:start="343:25" pos:end="343:32">volatile</specifier>(

                    "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                    "mov        %4, %%"REG_b"               \n\t"

                    "push %%"REG_BP"                        \n\t"

                    YSCALEYUV2RGB1b(%%REGBP, %5)

                    "pxor    %%mm7, %%mm7                   \n\t"

                    <comment type="block" pos:start="355:21" pos:end="355:58">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="357:1" pos:end="357:18">#<cpp:directive pos:start="357:2" pos:end="357:6">ifdef</cpp:directive> <name pos:start="357:8" pos:end="357:18">DITHER1XBPP</name></cpp:ifdef>

                    "paddusb "BLUE_DITHER"(%5), %%mm2      \n\t"

                    "paddusb "GREEN_DITHER"(%5), %%mm4      \n\t"

                    "paddusb "RED_DITHER"(%5), %%mm5      \n\t"

<cpp:endif pos:start="365:1" pos:end="365:6">#<cpp:directive pos:start="365:2" pos:end="365:6">endif</cpp:directive></cpp:endif>

                    WRITERGB15(%%REGb, 8280(%5), %%REGBP)

                    "pop %%"REG_BP"                         \n\t"

                    "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                    :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                    "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="381:17" pos:end="381:23">return;</return>

            <case pos:start="383:13" pos:end="383:32">case <expr pos:start="383:18" pos:end="383:31"><name pos:start="383:18" pos:end="383:31">PIX_FMT_RGB565</name></expr>:</case>

                <asm pos:start="385:17" pos:end="423:18">__asm__ <specifier pos:start="385:25" pos:end="385:32">volatile</specifier>(

                    "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                    "mov        %4, %%"REG_b"               \n\t"

                    "push %%"REG_BP"                        \n\t"

                    YSCALEYUV2RGB1b(%%REGBP, %5)

                    "pxor    %%mm7, %%mm7                   \n\t"

                    <comment type="block" pos:start="397:21" pos:end="397:58">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="399:1" pos:end="399:18">#<cpp:directive pos:start="399:2" pos:end="399:6">ifdef</cpp:directive> <name pos:start="399:8" pos:end="399:18">DITHER1XBPP</name></cpp:ifdef>

                    "paddusb "BLUE_DITHER"(%5), %%mm2      \n\t"

                    "paddusb "GREEN_DITHER"(%5), %%mm4      \n\t"

                    "paddusb "RED_DITHER"(%5), %%mm5      \n\t"

<cpp:endif pos:start="407:1" pos:end="407:6">#<cpp:directive pos:start="407:2" pos:end="407:6">endif</cpp:directive></cpp:endif>



                    WRITERGB16(%%REGb, 8280(%5), %%REGBP)

                    "pop %%"REG_BP"                         \n\t"

                    "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                    :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                    "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="425:17" pos:end="425:23">return;</return>

            <case pos:start="427:13" pos:end="427:33">case <expr pos:start="427:18" pos:end="427:32"><name pos:start="427:18" pos:end="427:32">PIX_FMT_YUYV422</name></expr>:</case>

                <asm pos:start="429:17" pos:end="451:18">__asm__ <specifier pos:start="429:25" pos:end="429:32">volatile</specifier>(

                    "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                    "mov        %4, %%"REG_b"               \n\t"

                    "push %%"REG_BP"                        \n\t"

                    YSCALEYUV2PACKED1b(%%REGBP, %5)

                    WRITEYUY2(%%REGb, 8280(%5), %%REGBP)

                    "pop %%"REG_BP"                         \n\t"

                    "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                    :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                    "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="453:17" pos:end="453:23">return;</return>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="461:1" pos:end="461:6">#<cpp:directive pos:start="461:2" pos:end="461:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="461:8" pos:end="461:33">/* COMPILE_TEMPLATE_MMX */</comment>

    <if_stmt pos:start="463:5" pos:end="471:5"><if pos:start="463:5" pos:end="467:5">if <condition pos:start="463:8" pos:end="463:23">(<expr pos:start="463:9" pos:end="463:22"><name pos:start="463:9" pos:end="463:15">uvalpha</name> <operator pos:start="463:17" pos:end="463:17">&lt;</operator> <literal type="number" pos:start="463:19" pos:end="463:22">2048</literal></expr>)</condition> <block pos:start="463:25" pos:end="467:5">{<block_content pos:start="465:9" pos:end="465:129">

        <macro pos:start="465:9" pos:end="465:129"><name pos:start="465:9" pos:end="465:29">YSCALE_YUV_2_ANYRGB_C</name><argument_list pos:start="465:30" pos:end="465:129">(<argument pos:start="465:31" pos:end="465:49">YSCALE_YUV_2_RGB1_C</argument>, <argument pos:start="465:52" pos:end="465:81">YSCALE_YUV_2_PACKED1_C(void,<literal type="number" pos:start="465:80" pos:end="465:80">0</literal>)</argument>, <argument pos:start="465:84" pos:end="465:106">YSCALE_YUV_2_GRAY16_1_C</argument>, <argument pos:start="465:109" pos:end="465:128">YSCALE_YUV_2_MONO2_C</argument>)</argument_list></macro>

    </block_content>}</block></if> <else pos:start="467:7" pos:end="471:5">else <block pos:start="467:12" pos:end="471:5">{<block_content pos:start="469:9" pos:end="469:131">

        <macro pos:start="469:9" pos:end="469:131"><name pos:start="469:9" pos:end="469:29">YSCALE_YUV_2_ANYRGB_C</name><argument_list pos:start="469:30" pos:end="469:131">(<argument pos:start="469:31" pos:end="469:50">YSCALE_YUV_2_RGB1B_C</argument>, <argument pos:start="469:53" pos:end="469:83">YSCALE_YUV_2_PACKED1B_C(void,<literal type="number" pos:start="469:82" pos:end="469:82">0</literal>)</argument>, <argument pos:start="469:86" pos:end="469:108">YSCALE_YUV_2_GRAY16_1_C</argument>, <argument pos:start="469:111" pos:end="469:130">YSCALE_YUV_2_MONO2_C</argument>)</argument_list></macro>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
