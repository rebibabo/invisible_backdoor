<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6471.c" pos:tabs="8"><function pos:start="1:1" pos:end="233:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">tscc2_decode_frame</name><parameter_list pos:start="1:30" pos:end="3:62">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><name pos:start="3:31" pos:end="3:33">int</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">got_frame</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:61"><decl pos:start="3:47" pos:end="3:61"><type pos:start="3:47" pos:end="3:61"><name pos:start="3:47" pos:end="3:54">AVPacket</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:61">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="233:1">{<block_content pos:start="7:5" pos:end="231:20">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">TSCC2Context</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:19">c</name> <init pos:start="11:21" pos:end="11:38">= <expr pos:start="11:23" pos:end="11:38"><name pos:start="11:23" pos:end="11:38"><name pos:start="11:23" pos:end="11:27">avctx</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">GetByteContext</name></type> <name pos:start="13:20" pos:end="13:21">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:23">frame_type</name></decl>, <decl pos:start="15:26" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:26" pos:end="15:29">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:14"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:14">val</name></decl>, <decl pos:start="17:17" pos:end="17:19"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:17" pos:end="17:19">len</name></decl>, <decl pos:start="17:22" pos:end="17:28"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:22" pos:end="17:24">pos</name> <init pos:start="17:26" pos:end="17:28">= <expr pos:start="17:28" pos:end="17:28"><literal type="number" pos:start="17:28" pos:end="17:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">num_mb</name> <init pos:start="19:16" pos:end="19:43">= <expr pos:start="19:18" pos:end="19:43"><name pos:start="19:18" pos:end="19:28"><name pos:start="19:18" pos:end="19:18">c</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:28">mb_width</name></name> <operator pos:start="19:30" pos:end="19:30">*</operator> <name pos:start="19:32" pos:end="19:43"><name pos:start="19:32" pos:end="19:32">c</name><operator pos:start="19:33" pos:end="19:34">-&gt;</operator><name pos:start="19:35" pos:end="19:43">mb_height</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:41"><expr pos:start="25:5" pos:end="25:40"><call pos:start="25:5" pos:end="25:40"><name pos:start="25:5" pos:end="25:20">bytestream2_init</name><argument_list pos:start="25:21" pos:end="25:40">(<argument pos:start="25:22" pos:end="25:24"><expr pos:start="25:22" pos:end="25:24"><operator pos:start="25:22" pos:end="25:22">&amp;</operator><name pos:start="25:23" pos:end="25:24">gb</name></expr></argument>, <argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><name pos:start="25:27" pos:end="25:29">buf</name></expr></argument>, <argument pos:start="25:32" pos:end="25:39"><expr pos:start="25:32" pos:end="25:39"><name pos:start="25:32" pos:end="25:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:43"><expr pos:start="27:5" pos:end="27:42"><name pos:start="27:5" pos:end="27:14">frame_type</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <call pos:start="27:18" pos:end="27:42"><name pos:start="27:18" pos:end="27:37">bytestream2_get_byte</name><argument_list pos:start="27:38" pos:end="27:42">(<argument pos:start="27:39" pos:end="27:41"><expr pos:start="27:39" pos:end="27:41"><operator pos:start="27:39" pos:end="27:39">&amp;</operator><name pos:start="27:40" pos:end="27:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:23">(<expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:18">frame_type</name> <operator pos:start="29:20" pos:end="29:20">&gt;</operator> <literal type="number" pos:start="29:22" pos:end="29:22">1</literal></expr>)</condition> <block pos:start="29:25" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:35">

        <expr_stmt pos:start="31:9" pos:end="33:27"><expr pos:start="31:9" pos:end="33:26"><call pos:start="31:9" pos:end="33:26"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="33:26">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:70"><expr pos:start="31:37" pos:end="31:70"><literal type="string" pos:start="31:37" pos:end="31:60">"Incorrect frame type %"</literal><name pos:start="31:61" pos:end="31:66">PRIu32</name><literal type="string" pos:start="31:67" pos:end="31:70">"\n"</literal></expr></argument>,

               <argument pos:start="33:16" pos:end="33:25"><expr pos:start="33:16" pos:end="33:25"><name pos:start="33:16" pos:end="33:25">frame_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:35">return <expr pos:start="35:16" pos:end="35:34"><name pos:start="35:16" pos:end="35:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:51">(<expr pos:start="41:9" pos:end="41:50"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:12">ret</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:45"><name pos:start="41:16" pos:end="41:30">ff_reget_buffer</name><argument_list pos:start="41:31" pos:end="41:45">(<argument pos:start="41:32" pos:end="41:36"><expr pos:start="41:32" pos:end="41:36"><name pos:start="41:32" pos:end="41:36">avctx</name></expr></argument>, <argument pos:start="41:39" pos:end="41:44"><expr pos:start="41:39" pos:end="41:44"><name pos:start="41:39" pos:end="41:44"><name pos:start="41:39" pos:end="41:39">c</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:44">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="41:46" pos:end="41:46">)</operator> <operator pos:start="41:48" pos:end="41:48">&lt;</operator> <literal type="number" pos:start="41:50" pos:end="41:50">0</literal></expr>)</condition> <block pos:start="41:53" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:19">

        <return pos:start="43:9" pos:end="43:19">return <expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="61:5"><if pos:start="49:5" pos:end="61:5">if <condition pos:start="49:8" pos:end="49:24">(<expr pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:18">frame_type</name> <operator pos:start="49:20" pos:end="49:21">==</operator> <literal type="number" pos:start="49:23" pos:end="49:23">0</literal></expr>)</condition> <block pos:start="49:26" pos:end="61:5">{<block_content pos:start="51:9" pos:end="59:24">

        <expr_stmt pos:start="51:9" pos:end="51:28"><expr pos:start="51:9" pos:end="51:27"><operator pos:start="51:9" pos:end="51:9">*</operator><name pos:start="51:10" pos:end="51:18">got_frame</name>      <operator pos:start="51:25" pos:end="51:25">=</operator> <literal type="number" pos:start="51:27" pos:end="51:27">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="55:23"><if pos:start="53:9" pos:end="55:23">if <condition pos:start="53:12" pos:end="53:51">(<expr pos:start="53:13" pos:end="53:50"><operator pos:start="53:13" pos:end="53:13">(</operator><name pos:start="53:14" pos:end="53:16">ret</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="53:45"><name pos:start="53:20" pos:end="53:31">av_frame_ref</name><argument_list pos:start="53:32" pos:end="53:45">(<argument pos:start="53:33" pos:end="53:36"><expr pos:start="53:33" pos:end="53:36"><name pos:start="53:33" pos:end="53:36">data</name></expr></argument>, <argument pos:start="53:39" pos:end="53:44"><expr pos:start="53:39" pos:end="53:44"><name pos:start="53:39" pos:end="53:44"><name pos:start="53:39" pos:end="53:39">c</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:44">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="53:46" pos:end="53:46">)</operator> <operator pos:start="53:48" pos:end="53:48">&lt;</operator> <literal type="number" pos:start="53:50" pos:end="53:50">0</literal></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:23"><block_content pos:start="55:13" pos:end="55:23">

            <return pos:start="55:13" pos:end="55:23">return <expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <return pos:start="59:9" pos:end="59:24">return <expr pos:start="59:16" pos:end="59:23"><name pos:start="59:16" pos:end="59:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:44">(<expr pos:start="65:9" pos:end="65:43"><call pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:34">bytestream2_get_bytes_left</name><argument_list pos:start="65:35" pos:end="65:39">(<argument pos:start="65:36" pos:end="65:38"><expr pos:start="65:36" pos:end="65:38"><operator pos:start="65:36" pos:end="65:36">&amp;</operator><name pos:start="65:37" pos:end="65:38">gb</name></expr></argument>)</argument_list></call> <operator pos:start="65:41" pos:end="65:41">&lt;</operator> <literal type="number" pos:start="65:43" pos:end="65:43">4</literal></expr>)</condition> <block pos:start="65:46" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:35">

        <expr_stmt pos:start="67:9" pos:end="67:60"><expr pos:start="67:9" pos:end="67:59"><call pos:start="67:9" pos:end="67:59"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="67:59">(<argument pos:start="67:16" pos:end="67:20"><expr pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:20">avctx</name></expr></argument>, <argument pos:start="67:23" pos:end="67:34"><expr pos:start="67:23" pos:end="67:34"><name pos:start="67:23" pos:end="67:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:37" pos:end="67:58"><expr pos:start="67:37" pos:end="67:58"><literal type="string" pos:start="67:37" pos:end="67:58">"Frame is too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:35">return <expr pos:start="69:16" pos:end="69:34"><name pos:start="69:16" pos:end="69:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:44"><expr pos:start="75:5" pos:end="75:43"><name pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:5">c</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:12">quant</name><index pos:start="75:13" pos:end="75:15">[<expr pos:start="75:14" pos:end="75:14"><literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>]</index></name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:43"><name pos:start="75:19" pos:end="75:38">bytestream2_get_byte</name><argument_list pos:start="75:39" pos:end="75:43">(<argument pos:start="75:40" pos:end="75:42"><expr pos:start="75:40" pos:end="75:42"><operator pos:start="75:40" pos:end="75:40">&amp;</operator><name pos:start="75:41" pos:end="75:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:44"><expr pos:start="77:5" pos:end="77:43"><name pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:5">c</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:12">quant</name><index pos:start="77:13" pos:end="77:15">[<expr pos:start="77:14" pos:end="77:14"><literal type="number" pos:start="77:14" pos:end="77:14">1</literal></expr>]</index></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <call pos:start="77:19" pos:end="77:43"><name pos:start="77:19" pos:end="77:38">bytestream2_get_byte</name><argument_list pos:start="77:39" pos:end="77:43">(<argument pos:start="77:40" pos:end="77:42"><expr pos:start="77:40" pos:end="77:42"><operator pos:start="77:40" pos:end="77:40">&amp;</operator><name pos:start="77:41" pos:end="77:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="89:5"><if pos:start="79:5" pos:end="89:5">if <condition pos:start="79:8" pos:end="81:58">(<expr pos:start="79:9" pos:end="81:57"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:9">c</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:16">quant</name><index pos:start="79:17" pos:end="79:19">[<expr pos:start="79:18" pos:end="79:18"><literal type="number" pos:start="79:18" pos:end="79:18">0</literal></expr>]</index></name> <operator pos:start="79:21" pos:end="79:21">&lt;</operator> <literal type="number" pos:start="79:23" pos:end="79:23">2</literal> <operator pos:start="79:25" pos:end="79:26">||</operator> <name pos:start="79:28" pos:end="79:38"><name pos:start="79:28" pos:end="79:28">c</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:35">quant</name><index pos:start="79:36" pos:end="79:38">[<expr pos:start="79:37" pos:end="79:37"><literal type="number" pos:start="79:37" pos:end="79:37">0</literal></expr>]</index></name> <operator pos:start="79:40" pos:end="79:40">&gt;</operator> <name pos:start="79:42" pos:end="79:53">NUM_VLC_SETS</name> <operator pos:start="79:55" pos:end="79:55">+</operator> <literal type="number" pos:start="79:57" pos:end="79:57">1</literal> <operator pos:start="79:59" pos:end="79:60">||</operator>

        <name pos:start="81:9" pos:end="81:19"><name pos:start="81:9" pos:end="81:9">c</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:16">quant</name><index pos:start="81:17" pos:end="81:19">[<expr pos:start="81:18" pos:end="81:18"><literal type="number" pos:start="81:18" pos:end="81:18">1</literal></expr>]</index></name> <operator pos:start="81:21" pos:end="81:21">&lt;</operator> <literal type="number" pos:start="81:23" pos:end="81:23">2</literal> <operator pos:start="81:25" pos:end="81:26">||</operator> <name pos:start="81:28" pos:end="81:38"><name pos:start="81:28" pos:end="81:28">c</name><operator pos:start="81:29" pos:end="81:30">-&gt;</operator><name pos:start="81:31" pos:end="81:35">quant</name><index pos:start="81:36" pos:end="81:38">[<expr pos:start="81:37" pos:end="81:37"><literal type="number" pos:start="81:37" pos:end="81:37">1</literal></expr>]</index></name> <operator pos:start="81:40" pos:end="81:40">&gt;</operator> <name pos:start="81:42" pos:end="81:53">NUM_VLC_SETS</name> <operator pos:start="81:55" pos:end="81:55">+</operator> <literal type="number" pos:start="81:57" pos:end="81:57">1</literal></expr>)</condition> <block pos:start="81:60" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:35">

        <expr_stmt pos:start="83:9" pos:end="85:41"><expr pos:start="83:9" pos:end="85:40"><call pos:start="83:9" pos:end="85:40"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="85:40">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:37" pos:end="83:66"><expr pos:start="83:37" pos:end="83:66"><literal type="string" pos:start="83:37" pos:end="83:66">"Invalid quantisers %d / %d\n"</literal></expr></argument>,

               <argument pos:start="85:16" pos:end="85:26"><expr pos:start="85:16" pos:end="85:26"><name pos:start="85:16" pos:end="85:26"><name pos:start="85:16" pos:end="85:16">c</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:23">quant</name><index pos:start="85:24" pos:end="85:26">[<expr pos:start="85:25" pos:end="85:25"><literal type="number" pos:start="85:25" pos:end="85:25">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="85:29" pos:end="85:39"><expr pos:start="85:29" pos:end="85:39"><name pos:start="85:29" pos:end="85:39"><name pos:start="85:29" pos:end="85:29">c</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:36">quant</name><index pos:start="85:37" pos:end="85:39">[<expr pos:start="85:38" pos:end="85:38"><literal type="number" pos:start="85:38" pos:end="85:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:35">return <expr pos:start="87:16" pos:end="87:34"><name pos:start="87:16" pos:end="87:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="93:5" pos:end="99:5">for <control pos:start="93:9" pos:end="93:27">(<init pos:start="93:10" pos:end="93:15"><expr pos:start="93:10" pos:end="93:14"><name pos:start="93:10" pos:end="93:10">i</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <literal type="number" pos:start="93:14" pos:end="93:14">0</literal></expr>;</init> <condition pos:start="93:17" pos:end="93:22"><expr pos:start="93:17" pos:end="93:21"><name pos:start="93:17" pos:end="93:17">i</name> <operator pos:start="93:19" pos:end="93:19">&lt;</operator> <literal type="number" pos:start="93:21" pos:end="93:21">3</literal></expr>;</condition> <incr pos:start="93:24" pos:end="93:26"><expr pos:start="93:24" pos:end="93:26"><name pos:start="93:24" pos:end="93:24">i</name><operator pos:start="93:25" pos:end="93:26">++</operator></expr></incr>)</control> <block pos:start="93:29" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:54">

        <expr_stmt pos:start="95:9" pos:end="95:54"><expr pos:start="95:9" pos:end="95:53"><name pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:9">c</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:12">q</name><index pos:start="95:13" pos:end="95:15">[<expr pos:start="95:14" pos:end="95:14"><literal type="number" pos:start="95:14" pos:end="95:14">0</literal></expr>]</index><index pos:start="95:16" pos:end="95:18">[<expr pos:start="95:17" pos:end="95:17"><name pos:start="95:17" pos:end="95:17">i</name></expr>]</index></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:53"><name pos:start="95:22" pos:end="95:33">tscc2_quants</name><index pos:start="95:34" pos:end="95:50">[<expr pos:start="95:35" pos:end="95:49"><name pos:start="95:35" pos:end="95:45"><name pos:start="95:35" pos:end="95:35">c</name><operator pos:start="95:36" pos:end="95:37">-&gt;</operator><name pos:start="95:38" pos:end="95:42">quant</name><index pos:start="95:43" pos:end="95:45">[<expr pos:start="95:44" pos:end="95:44"><literal type="number" pos:start="95:44" pos:end="95:44">0</literal></expr>]</index></name> <operator pos:start="95:47" pos:end="95:47">-</operator> <literal type="number" pos:start="95:49" pos:end="95:49">2</literal></expr>]</index><index pos:start="95:51" pos:end="95:53">[<expr pos:start="95:52" pos:end="95:52"><name pos:start="95:52" pos:end="95:52">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:54"><expr pos:start="97:9" pos:end="97:53"><name pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:9">c</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:12">q</name><index pos:start="97:13" pos:end="97:15">[<expr pos:start="97:14" pos:end="97:14"><literal type="number" pos:start="97:14" pos:end="97:14">1</literal></expr>]</index><index pos:start="97:16" pos:end="97:18">[<expr pos:start="97:17" pos:end="97:17"><name pos:start="97:17" pos:end="97:17">i</name></expr>]</index></name> <operator pos:start="97:20" pos:end="97:20">=</operator> <name pos:start="97:22" pos:end="97:53"><name pos:start="97:22" pos:end="97:33">tscc2_quants</name><index pos:start="97:34" pos:end="97:50">[<expr pos:start="97:35" pos:end="97:49"><name pos:start="97:35" pos:end="97:45"><name pos:start="97:35" pos:end="97:35">c</name><operator pos:start="97:36" pos:end="97:37">-&gt;</operator><name pos:start="97:38" pos:end="97:42">quant</name><index pos:start="97:43" pos:end="97:45">[<expr pos:start="97:44" pos:end="97:44"><literal type="number" pos:start="97:44" pos:end="97:44">1</literal></expr>]</index></name> <operator pos:start="97:47" pos:end="97:47">-</operator> <literal type="number" pos:start="97:49" pos:end="97:49">2</literal></expr>]</index><index pos:start="97:51" pos:end="97:53">[<expr pos:start="97:52" pos:end="97:52"><name pos:start="97:52" pos:end="97:52">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="103:5" pos:end="103:29"><expr pos:start="103:5" pos:end="103:28"><call pos:start="103:5" pos:end="103:28"><name pos:start="103:5" pos:end="103:20">bytestream2_skip</name><argument_list pos:start="103:21" pos:end="103:28">(<argument pos:start="103:22" pos:end="103:24"><expr pos:start="103:22" pos:end="103:24"><operator pos:start="103:22" pos:end="103:22">&amp;</operator><name pos:start="103:23" pos:end="103:24">gb</name></expr></argument>, <argument pos:start="103:27" pos:end="103:27"><expr pos:start="103:27" pos:end="103:27"><literal type="number" pos:start="103:27" pos:end="103:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:37"><expr pos:start="107:5" pos:end="107:36"><name pos:start="107:5" pos:end="107:8">size</name> <operator pos:start="107:10" pos:end="107:10">=</operator> <call pos:start="107:12" pos:end="107:36"><name pos:start="107:12" pos:end="107:31">bytestream2_get_le32</name><argument_list pos:start="107:32" pos:end="107:36">(<argument pos:start="107:33" pos:end="107:35"><expr pos:start="107:33" pos:end="107:35"><operator pos:start="107:33" pos:end="107:33">&amp;</operator><name pos:start="107:34" pos:end="107:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:47">(<expr pos:start="109:9" pos:end="109:46"><name pos:start="109:9" pos:end="109:12">size</name> <operator pos:start="109:14" pos:end="109:14">&gt;</operator> <call pos:start="109:16" pos:end="109:46"><name pos:start="109:16" pos:end="109:41">bytestream2_get_bytes_left</name><argument_list pos:start="109:42" pos:end="109:46">(<argument pos:start="109:43" pos:end="109:45"><expr pos:start="109:43" pos:end="109:45"><operator pos:start="109:43" pos:end="109:43">&amp;</operator><name pos:start="109:44" pos:end="109:45">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:49" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:35">

        <expr_stmt pos:start="111:9" pos:end="111:77"><expr pos:start="111:9" pos:end="111:76"><call pos:start="111:9" pos:end="111:76"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="111:76">(<argument pos:start="111:16" pos:end="111:20"><expr pos:start="111:16" pos:end="111:20"><name pos:start="111:16" pos:end="111:20">avctx</name></expr></argument>, <argument pos:start="111:23" pos:end="111:34"><expr pos:start="111:23" pos:end="111:34"><name pos:start="111:23" pos:end="111:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:37" pos:end="111:75"><expr pos:start="111:37" pos:end="111:75"><literal type="string" pos:start="111:37" pos:end="111:75">"Slice properties chunk is too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:35">return <expr pos:start="113:16" pos:end="113:34"><name pos:start="113:16" pos:end="113:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="119:5" pos:end="139:5">for <control pos:start="119:9" pos:end="119:30">(<init pos:start="119:10" pos:end="119:15"><expr pos:start="119:10" pos:end="119:14"><name pos:start="119:10" pos:end="119:10">i</name> <operator pos:start="119:12" pos:end="119:12">=</operator> <literal type="number" pos:start="119:14" pos:end="119:14">0</literal></expr>;</init> <condition pos:start="119:17" pos:end="119:25"><expr pos:start="119:17" pos:end="119:24"><name pos:start="119:17" pos:end="119:17">i</name> <operator pos:start="119:19" pos:end="119:19">&lt;</operator> <name pos:start="119:21" pos:end="119:24">size</name></expr>;</condition> <incr pos:start="119:27" pos:end="119:29"><expr pos:start="119:27" pos:end="119:29"><name pos:start="119:27" pos:end="119:27">i</name><operator pos:start="119:28" pos:end="119:29">++</operator></expr></incr>)</control> <block pos:start="119:32" pos:end="139:5">{<block_content pos:start="121:9" pos:end="137:19">

        <expr_stmt pos:start="121:9" pos:end="121:42"><expr pos:start="121:9" pos:end="121:41"><name pos:start="121:9" pos:end="121:11">val</name>   <operator pos:start="121:15" pos:end="121:15">=</operator> <call pos:start="121:17" pos:end="121:41"><name pos:start="121:17" pos:end="121:36">bytestream2_get_byte</name><argument_list pos:start="121:37" pos:end="121:41">(<argument pos:start="121:38" pos:end="121:40"><expr pos:start="121:38" pos:end="121:40"><operator pos:start="121:38" pos:end="121:38">&amp;</operator><name pos:start="121:39" pos:end="121:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:27"><expr pos:start="123:9" pos:end="123:26"><name pos:start="123:9" pos:end="123:11">len</name>   <operator pos:start="123:15" pos:end="123:15">=</operator> <name pos:start="123:17" pos:end="123:19">val</name> <operator pos:start="123:21" pos:end="123:21">&amp;</operator> <literal type="number" pos:start="123:23" pos:end="123:26">0x3F</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:18"><expr pos:start="125:9" pos:end="125:17"><name pos:start="125:9" pos:end="125:11">val</name> <operator pos:start="125:13" pos:end="125:15">&gt;&gt;=</operator> <literal type="number" pos:start="125:17" pos:end="125:17">6</literal></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:31">(<expr pos:start="127:13" pos:end="127:30"><name pos:start="127:13" pos:end="127:15">pos</name> <operator pos:start="127:17" pos:end="127:17">+</operator> <name pos:start="127:19" pos:end="127:21">len</name> <operator pos:start="127:23" pos:end="127:23">&gt;</operator> <name pos:start="127:25" pos:end="127:30">num_mb</name></expr>)</condition> <block pos:start="127:33" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:39">

            <expr_stmt pos:start="129:13" pos:end="129:71"><expr pos:start="129:13" pos:end="129:70"><call pos:start="129:13" pos:end="129:70"><name pos:start="129:13" pos:end="129:18">av_log</name><argument_list pos:start="129:19" pos:end="129:70">(<argument pos:start="129:20" pos:end="129:24"><expr pos:start="129:20" pos:end="129:24"><name pos:start="129:20" pos:end="129:24">avctx</name></expr></argument>, <argument pos:start="129:27" pos:end="129:38"><expr pos:start="129:27" pos:end="129:38"><name pos:start="129:27" pos:end="129:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:41" pos:end="129:69"><expr pos:start="129:41" pos:end="129:69"><literal type="string" pos:start="129:41" pos:end="129:69">"Too many slice properties\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="131:13" pos:end="131:39">return <expr pos:start="131:20" pos:end="131:38"><name pos:start="131:20" pos:end="131:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:48"><expr pos:start="135:9" pos:end="135:47"><call pos:start="135:9" pos:end="135:47"><name pos:start="135:9" pos:end="135:14">memset</name><argument_list pos:start="135:15" pos:end="135:47">(<argument pos:start="135:16" pos:end="135:36"><expr pos:start="135:16" pos:end="135:36"><name pos:start="135:16" pos:end="135:30"><name pos:start="135:16" pos:end="135:16">c</name><operator pos:start="135:17" pos:end="135:18">-&gt;</operator><name pos:start="135:19" pos:end="135:30">slice_quants</name></name> <operator pos:start="135:32" pos:end="135:32">+</operator> <name pos:start="135:34" pos:end="135:36">pos</name></expr></argument>, <argument pos:start="135:39" pos:end="135:41"><expr pos:start="135:39" pos:end="135:41"><name pos:start="135:39" pos:end="135:41">val</name></expr></argument>, <argument pos:start="135:44" pos:end="135:46"><expr pos:start="135:44" pos:end="135:46"><name pos:start="135:44" pos:end="135:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:19"><expr pos:start="137:9" pos:end="137:18"><name pos:start="137:9" pos:end="137:11">pos</name> <operator pos:start="137:13" pos:end="137:14">+=</operator> <name pos:start="137:16" pos:end="137:18">len</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="141:5" pos:end="149:5"><if pos:start="141:5" pos:end="149:5">if <condition pos:start="141:8" pos:end="141:21">(<expr pos:start="141:9" pos:end="141:20"><name pos:start="141:9" pos:end="141:11">pos</name> <operator pos:start="141:13" pos:end="141:13">&lt;</operator> <name pos:start="141:15" pos:end="141:20">num_mb</name></expr>)</condition> <block pos:start="141:23" pos:end="149:5">{<block_content pos:start="143:9" pos:end="147:35">

        <expr_stmt pos:start="143:9" pos:end="145:28"><expr pos:start="143:9" pos:end="145:27"><call pos:start="143:9" pos:end="145:27"><name pos:start="143:9" pos:end="143:14">av_log</name><argument_list pos:start="143:15" pos:end="145:27">(<argument pos:start="143:16" pos:end="143:20"><expr pos:start="143:16" pos:end="143:20"><name pos:start="143:16" pos:end="143:20">avctx</name></expr></argument>, <argument pos:start="143:23" pos:end="143:34"><expr pos:start="143:23" pos:end="143:34"><name pos:start="143:23" pos:end="143:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="143:37" pos:end="143:74"><expr pos:start="143:37" pos:end="143:74"><literal type="string" pos:start="143:37" pos:end="143:74">"Too few slice properties (%d / %d)\n"</literal></expr></argument>,

               <argument pos:start="145:16" pos:end="145:18"><expr pos:start="145:16" pos:end="145:18"><name pos:start="145:16" pos:end="145:18">pos</name></expr></argument>, <argument pos:start="145:21" pos:end="145:26"><expr pos:start="145:21" pos:end="145:26"><name pos:start="145:21" pos:end="145:26">num_mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="147:9" pos:end="147:35">return <expr pos:start="147:16" pos:end="147:34"><name pos:start="147:16" pos:end="147:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="153:5" pos:end="217:5">for <control pos:start="153:9" pos:end="153:38">(<init pos:start="153:10" pos:end="153:15"><expr pos:start="153:10" pos:end="153:14"><name pos:start="153:10" pos:end="153:10">i</name> <operator pos:start="153:12" pos:end="153:12">=</operator> <literal type="number" pos:start="153:14" pos:end="153:14">0</literal></expr>;</init> <condition pos:start="153:17" pos:end="153:33"><expr pos:start="153:17" pos:end="153:32"><name pos:start="153:17" pos:end="153:17">i</name> <operator pos:start="153:19" pos:end="153:19">&lt;</operator> <name pos:start="153:21" pos:end="153:32"><name pos:start="153:21" pos:end="153:21">c</name><operator pos:start="153:22" pos:end="153:23">-&gt;</operator><name pos:start="153:24" pos:end="153:32">mb_height</name></name></expr>;</condition> <incr pos:start="153:35" pos:end="153:37"><expr pos:start="153:35" pos:end="153:37"><name pos:start="153:35" pos:end="153:35">i</name><operator pos:start="153:36" pos:end="153:37">++</operator></expr></incr>)</control> <block pos:start="153:40" pos:end="217:5">{<block_content pos:start="155:9" pos:end="215:36">

        <expr_stmt pos:start="155:9" pos:end="155:42"><expr pos:start="155:9" pos:end="155:41"><name pos:start="155:9" pos:end="155:12">size</name> <operator pos:start="155:14" pos:end="155:14">=</operator> <call pos:start="155:16" pos:end="155:41"><name pos:start="155:16" pos:end="155:36">bytestream2_peek_byte</name><argument_list pos:start="155:37" pos:end="155:41">(<argument pos:start="155:38" pos:end="155:40"><expr pos:start="155:38" pos:end="155:40"><operator pos:start="155:38" pos:end="155:38">&amp;</operator><name pos:start="155:39" pos:end="155:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="165:9"><if pos:start="157:9" pos:end="161:9">if <condition pos:start="157:12" pos:end="157:21">(<expr pos:start="157:13" pos:end="157:20"><name pos:start="157:13" pos:end="157:16">size</name> <operator pos:start="157:18" pos:end="157:18">&amp;</operator> <literal type="number" pos:start="157:20" pos:end="157:20">1</literal></expr>)</condition> <block pos:start="157:23" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:49">

            <expr_stmt pos:start="159:13" pos:end="159:49"><expr pos:start="159:13" pos:end="159:48"><name pos:start="159:13" pos:end="159:16">size</name> <operator pos:start="159:18" pos:end="159:18">=</operator> <call pos:start="159:20" pos:end="159:44"><name pos:start="159:20" pos:end="159:39">bytestream2_get_byte</name><argument_list pos:start="159:40" pos:end="159:44">(<argument pos:start="159:41" pos:end="159:43"><expr pos:start="159:41" pos:end="159:43"><operator pos:start="159:41" pos:end="159:41">&amp;</operator><name pos:start="159:42" pos:end="159:43">gb</name></expr></argument>)</argument_list></call> <operator pos:start="159:46" pos:end="159:46">-</operator> <literal type="number" pos:start="159:48" pos:end="159:48">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="161:11" pos:end="165:9">else <block pos:start="161:16" pos:end="165:9">{<block_content pos:start="163:13" pos:end="163:50">

            <expr_stmt pos:start="163:13" pos:end="163:50"><expr pos:start="163:13" pos:end="163:49"><name pos:start="163:13" pos:end="163:16">size</name> <operator pos:start="163:18" pos:end="163:18">=</operator> <call pos:start="163:20" pos:end="163:44"><name pos:start="163:20" pos:end="163:39">bytestream2_get_le32</name><argument_list pos:start="163:40" pos:end="163:44">(<argument pos:start="163:41" pos:end="163:43"><expr pos:start="163:41" pos:end="163:43"><operator pos:start="163:41" pos:end="163:41">&amp;</operator><name pos:start="163:42" pos:end="163:43">gb</name></expr></argument>)</argument_list></call> <operator pos:start="163:46" pos:end="163:47">&gt;&gt;</operator> <literal type="number" pos:start="163:49" pos:end="163:49">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="167:9" pos:end="193:9"><if pos:start="167:9" pos:end="193:9">if <condition pos:start="167:12" pos:end="167:18">(<expr pos:start="167:13" pos:end="167:17"><operator pos:start="167:13" pos:end="167:13">!</operator><name pos:start="167:14" pos:end="167:17">size</name></expr>)</condition> <block pos:start="167:20" pos:end="193:9">{<block_content pos:start="169:13" pos:end="191:13">

            <decl_stmt pos:start="169:13" pos:end="169:55"><decl pos:start="169:13" pos:end="169:28"><type pos:start="169:13" pos:end="169:15"><name pos:start="169:13" pos:end="169:15">int</name></type> <name pos:start="169:17" pos:end="169:24">skip_row</name> <init pos:start="169:26" pos:end="169:28">= <expr pos:start="169:28" pos:end="169:28"><literal type="number" pos:start="169:28" pos:end="169:28">1</literal></expr></init></decl>, <decl pos:start="169:31" pos:end="169:31"><type ref="prev" pos:start="169:13" pos:end="169:15"/><name pos:start="169:31" pos:end="169:31">j</name></decl>, <decl pos:start="169:34" pos:end="169:54"><type ref="prev" pos:start="169:13" pos:end="169:15"/><name pos:start="169:34" pos:end="169:36">off</name> <init pos:start="169:38" pos:end="169:54">= <expr pos:start="169:40" pos:end="169:54"><name pos:start="169:40" pos:end="169:40">i</name> <operator pos:start="169:42" pos:end="169:42">*</operator> <name pos:start="169:44" pos:end="169:54"><name pos:start="169:44" pos:end="169:44">c</name><operator pos:start="169:45" pos:end="169:46">-&gt;</operator><name pos:start="169:47" pos:end="169:54">mb_width</name></name></expr></init></decl>;</decl_stmt>

            <for pos:start="171:13" pos:end="183:13">for <control pos:start="171:17" pos:end="171:45">(<init pos:start="171:18" pos:end="171:23"><expr pos:start="171:18" pos:end="171:22"><name pos:start="171:18" pos:end="171:18">j</name> <operator pos:start="171:20" pos:end="171:20">=</operator> <literal type="number" pos:start="171:22" pos:end="171:22">0</literal></expr>;</init> <condition pos:start="171:25" pos:end="171:40"><expr pos:start="171:25" pos:end="171:39"><name pos:start="171:25" pos:end="171:25">j</name> <operator pos:start="171:27" pos:end="171:27">&lt;</operator> <name pos:start="171:29" pos:end="171:39"><name pos:start="171:29" pos:end="171:29">c</name><operator pos:start="171:30" pos:end="171:31">-&gt;</operator><name pos:start="171:32" pos:end="171:39">mb_width</name></name></expr>;</condition> <incr pos:start="171:42" pos:end="171:44"><expr pos:start="171:42" pos:end="171:44"><name pos:start="171:42" pos:end="171:42">j</name><operator pos:start="171:43" pos:end="171:44">++</operator></expr></incr>)</control> <block pos:start="171:47" pos:end="183:13">{<block_content pos:start="173:17" pos:end="181:17">

                <if_stmt pos:start="173:17" pos:end="181:17"><if pos:start="173:17" pos:end="181:17">if <condition pos:start="173:20" pos:end="175:50">(<expr pos:start="173:21" pos:end="175:49"><name pos:start="173:21" pos:end="173:44"><name pos:start="173:21" pos:end="173:21">c</name><operator pos:start="173:22" pos:end="173:23">-&gt;</operator><name pos:start="173:24" pos:end="173:35">slice_quants</name><index pos:start="173:36" pos:end="173:44">[<expr pos:start="173:37" pos:end="173:43"><name pos:start="173:37" pos:end="173:39">off</name> <operator pos:start="173:41" pos:end="173:41">+</operator> <name pos:start="173:43" pos:end="173:43">j</name></expr>]</index></name> <operator pos:start="173:46" pos:end="173:47">==</operator> <literal type="number" pos:start="173:49" pos:end="173:49">1</literal> <operator pos:start="173:51" pos:end="173:52">||</operator>

                    <name pos:start="175:21" pos:end="175:44"><name pos:start="175:21" pos:end="175:21">c</name><operator pos:start="175:22" pos:end="175:23">-&gt;</operator><name pos:start="175:24" pos:end="175:35">slice_quants</name><index pos:start="175:36" pos:end="175:44">[<expr pos:start="175:37" pos:end="175:43"><name pos:start="175:37" pos:end="175:39">off</name> <operator pos:start="175:41" pos:end="175:41">+</operator> <name pos:start="175:43" pos:end="175:43">j</name></expr>]</index></name> <operator pos:start="175:46" pos:end="175:47">==</operator> <literal type="number" pos:start="175:49" pos:end="175:49">2</literal></expr>)</condition> <block pos:start="175:52" pos:end="181:17">{<block_content pos:start="177:21" pos:end="179:26">

                    <expr_stmt pos:start="177:21" pos:end="177:33"><expr pos:start="177:21" pos:end="177:32"><name pos:start="177:21" pos:end="177:28">skip_row</name> <operator pos:start="177:30" pos:end="177:30">=</operator> <literal type="number" pos:start="177:32" pos:end="177:32">0</literal></expr>;</expr_stmt>

                    <break pos:start="179:21" pos:end="179:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="185:13" pos:end="191:13"><if pos:start="185:13" pos:end="191:13">if <condition pos:start="185:16" pos:end="185:26">(<expr pos:start="185:17" pos:end="185:25"><operator pos:start="185:17" pos:end="185:17">!</operator><name pos:start="185:18" pos:end="185:25">skip_row</name></expr>)</condition> <block pos:start="185:28" pos:end="191:13">{<block_content pos:start="187:17" pos:end="189:43">

                <expr_stmt pos:start="187:17" pos:end="187:77"><expr pos:start="187:17" pos:end="187:76"><call pos:start="187:17" pos:end="187:76"><name pos:start="187:17" pos:end="187:22">av_log</name><argument_list pos:start="187:23" pos:end="187:76">(<argument pos:start="187:24" pos:end="187:28"><expr pos:start="187:24" pos:end="187:28"><name pos:start="187:24" pos:end="187:28">avctx</name></expr></argument>, <argument pos:start="187:31" pos:end="187:42"><expr pos:start="187:31" pos:end="187:42"><name pos:start="187:31" pos:end="187:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="187:45" pos:end="187:75"><expr pos:start="187:45" pos:end="187:75"><literal type="string" pos:start="187:45" pos:end="187:75">"Non-skip row with zero size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="189:17" pos:end="189:43">return <expr pos:start="189:24" pos:end="189:42"><name pos:start="189:24" pos:end="189:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="195:9" pos:end="203:9"><if pos:start="195:9" pos:end="203:9">if <condition pos:start="195:12" pos:end="195:51">(<expr pos:start="195:13" pos:end="195:50"><call pos:start="195:13" pos:end="195:43"><name pos:start="195:13" pos:end="195:38">bytestream2_get_bytes_left</name><argument_list pos:start="195:39" pos:end="195:43">(<argument pos:start="195:40" pos:end="195:42"><expr pos:start="195:40" pos:end="195:42"><operator pos:start="195:40" pos:end="195:40">&amp;</operator><name pos:start="195:41" pos:end="195:42">gb</name></expr></argument>)</argument_list></call> <operator pos:start="195:45" pos:end="195:45">&lt;</operator> <name pos:start="195:47" pos:end="195:50">size</name></expr>)</condition> <block pos:start="195:53" pos:end="203:9">{<block_content pos:start="197:13" pos:end="201:39">

            <expr_stmt pos:start="197:13" pos:end="199:58"><expr pos:start="197:13" pos:end="199:57"><call pos:start="197:13" pos:end="199:57"><name pos:start="197:13" pos:end="197:18">av_log</name><argument_list pos:start="197:19" pos:end="199:57">(<argument pos:start="197:20" pos:end="197:24"><expr pos:start="197:20" pos:end="197:24"><name pos:start="197:20" pos:end="197:24">avctx</name></expr></argument>, <argument pos:start="197:27" pos:end="197:38"><expr pos:start="197:27" pos:end="197:38"><name pos:start="197:27" pos:end="197:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:41" pos:end="197:77"><expr pos:start="197:41" pos:end="197:77"><literal type="string" pos:start="197:41" pos:end="197:63">"Invalid slice size (%"</literal><name pos:start="197:64" pos:end="197:69">PRIu32</name><literal type="string" pos:start="197:70" pos:end="197:77">"/%u)\n"</literal></expr></argument>,

                   <argument pos:start="199:20" pos:end="199:23"><expr pos:start="199:20" pos:end="199:23"><name pos:start="199:20" pos:end="199:23">size</name></expr></argument>, <argument pos:start="199:26" pos:end="199:56"><expr pos:start="199:26" pos:end="199:56"><call pos:start="199:26" pos:end="199:56"><name pos:start="199:26" pos:end="199:51">bytestream2_get_bytes_left</name><argument_list pos:start="199:52" pos:end="199:56">(<argument pos:start="199:53" pos:end="199:55"><expr pos:start="199:53" pos:end="199:55"><operator pos:start="199:53" pos:end="199:53">&amp;</operator><name pos:start="199:54" pos:end="199:55">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="201:13" pos:end="201:39">return <expr pos:start="201:20" pos:end="201:38"><name pos:start="201:20" pos:end="201:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:74"><expr pos:start="205:9" pos:end="205:73"><name pos:start="205:9" pos:end="205:11">ret</name> <operator pos:start="205:13" pos:end="205:13">=</operator> <call pos:start="205:15" pos:end="205:73"><name pos:start="205:15" pos:end="205:32">tscc2_decode_slice</name><argument_list pos:start="205:33" pos:end="205:73">(<argument pos:start="205:34" pos:end="205:34"><expr pos:start="205:34" pos:end="205:34"><name pos:start="205:34" pos:end="205:34">c</name></expr></argument>, <argument pos:start="205:37" pos:end="205:37"><expr pos:start="205:37" pos:end="205:37"><name pos:start="205:37" pos:end="205:37">i</name></expr></argument>, <argument pos:start="205:40" pos:end="205:66"><expr pos:start="205:40" pos:end="205:66"><name pos:start="205:40" pos:end="205:42">buf</name> <operator pos:start="205:44" pos:end="205:44">+</operator> <call pos:start="205:46" pos:end="205:66"><name pos:start="205:46" pos:end="205:61">bytestream2_tell</name><argument_list pos:start="205:62" pos:end="205:66">(<argument pos:start="205:63" pos:end="205:65"><expr pos:start="205:63" pos:end="205:65"><operator pos:start="205:63" pos:end="205:63">&amp;</operator><name pos:start="205:64" pos:end="205:65">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="205:69" pos:end="205:72"><expr pos:start="205:69" pos:end="205:72"><name pos:start="205:69" pos:end="205:72">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="207:9" pos:end="213:9"><if pos:start="207:9" pos:end="213:9">if <condition pos:start="207:12" pos:end="207:16">(<expr pos:start="207:13" pos:end="207:15"><name pos:start="207:13" pos:end="207:15">ret</name></expr>)</condition> <block pos:start="207:18" pos:end="213:9">{<block_content pos:start="209:13" pos:end="211:23">

            <expr_stmt pos:start="209:13" pos:end="209:72"><expr pos:start="209:13" pos:end="209:71"><call pos:start="209:13" pos:end="209:71"><name pos:start="209:13" pos:end="209:18">av_log</name><argument_list pos:start="209:19" pos:end="209:71">(<argument pos:start="209:20" pos:end="209:24"><expr pos:start="209:20" pos:end="209:24"><name pos:start="209:20" pos:end="209:24">avctx</name></expr></argument>, <argument pos:start="209:27" pos:end="209:38"><expr pos:start="209:27" pos:end="209:38"><name pos:start="209:27" pos:end="209:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="209:41" pos:end="209:67"><expr pos:start="209:41" pos:end="209:67"><literal type="string" pos:start="209:41" pos:end="209:67">"Error decoding slice %d\n"</literal></expr></argument>, <argument pos:start="209:70" pos:end="209:70"><expr pos:start="209:70" pos:end="209:70"><name pos:start="209:70" pos:end="209:70">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="211:13" pos:end="211:23">return <expr pos:start="211:20" pos:end="211:22"><name pos:start="211:20" pos:end="211:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:36"><expr pos:start="215:9" pos:end="215:35"><call pos:start="215:9" pos:end="215:35"><name pos:start="215:9" pos:end="215:24">bytestream2_skip</name><argument_list pos:start="215:25" pos:end="215:35">(<argument pos:start="215:26" pos:end="215:28"><expr pos:start="215:26" pos:end="215:28"><operator pos:start="215:26" pos:end="215:26">&amp;</operator><name pos:start="215:27" pos:end="215:28">gb</name></expr></argument>, <argument pos:start="215:31" pos:end="215:34"><expr pos:start="215:31" pos:end="215:34"><name pos:start="215:31" pos:end="215:34">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="221:5" pos:end="221:24"><expr pos:start="221:5" pos:end="221:23"><operator pos:start="221:5" pos:end="221:5">*</operator><name pos:start="221:6" pos:end="221:14">got_frame</name>      <operator pos:start="221:21" pos:end="221:21">=</operator> <literal type="number" pos:start="221:23" pos:end="221:23">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="223:5" pos:end="225:19"><if pos:start="223:5" pos:end="225:19">if <condition pos:start="223:8" pos:end="223:47">(<expr pos:start="223:9" pos:end="223:46"><operator pos:start="223:9" pos:end="223:9">(</operator><name pos:start="223:10" pos:end="223:12">ret</name> <operator pos:start="223:14" pos:end="223:14">=</operator> <call pos:start="223:16" pos:end="223:41"><name pos:start="223:16" pos:end="223:27">av_frame_ref</name><argument_list pos:start="223:28" pos:end="223:41">(<argument pos:start="223:29" pos:end="223:32"><expr pos:start="223:29" pos:end="223:32"><name pos:start="223:29" pos:end="223:32">data</name></expr></argument>, <argument pos:start="223:35" pos:end="223:40"><expr pos:start="223:35" pos:end="223:40"><name pos:start="223:35" pos:end="223:40"><name pos:start="223:35" pos:end="223:35">c</name><operator pos:start="223:36" pos:end="223:37">-&gt;</operator><name pos:start="223:38" pos:end="223:40">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="223:42" pos:end="223:42">)</operator> <operator pos:start="223:44" pos:end="223:44">&lt;</operator> <literal type="number" pos:start="223:46" pos:end="223:46">0</literal></expr>)</condition><block type="pseudo" pos:start="225:9" pos:end="225:19"><block_content pos:start="225:9" pos:end="225:19">

        <return pos:start="225:9" pos:end="225:19">return <expr pos:start="225:16" pos:end="225:18"><name pos:start="225:16" pos:end="225:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="229:5" pos:end="229:63">/* always report that the buffer was completely consumed */</comment>

    <return pos:start="231:5" pos:end="231:20">return <expr pos:start="231:12" pos:end="231:19"><name pos:start="231:12" pos:end="231:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
