<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10377.c" pos:tabs="8"><function pos:start="1:1" pos:end="223:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:35">stream_run</name><parameter_list pos:start="1:36" pos:end="1:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="223:1">{<block_content pos:start="5:5" pos:end="221:68">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">StreamBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">StreamCompleteData</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:28">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">BlockBackend</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">blk</name> <init pos:start="9:23" pos:end="9:37">= <expr pos:start="9:25" pos:end="9:37"><name pos:start="9:25" pos:end="9:37"><name pos:start="9:25" pos:end="9:25">s</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">common</name><operator pos:start="9:34" pos:end="9:34">.</operator><name pos:start="9:35" pos:end="9:37">blk</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name> <init pos:start="11:26" pos:end="11:38">= <expr pos:start="11:28" pos:end="11:38"><call pos:start="11:28" pos:end="11:38"><name pos:start="11:28" pos:end="11:33">blk_bs</name><argument_list pos:start="11:34" pos:end="11:38">(<argument pos:start="11:35" pos:end="11:37"><expr pos:start="11:35" pos:end="11:37"><name pos:start="11:35" pos:end="11:37">blk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockDriverState</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:26">base</name> <init pos:start="13:28" pos:end="13:36">= <expr pos:start="13:30" pos:end="13:36"><name pos:start="13:30" pos:end="13:36"><name pos:start="13:30" pos:end="13:30">s</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:36">base</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:22">sector_num</name> <init pos:start="15:24" pos:end="15:26">= <expr pos:start="15:26" pos:end="15:26"><literal type="number" pos:start="15:26" pos:end="15:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:15">end</name> <init pos:start="17:17" pos:end="17:20">= <expr pos:start="17:19" pos:end="17:20"><operator pos:start="17:19" pos:end="17:19">-</operator><literal type="number" pos:start="17:20" pos:end="17:20">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:21">delay_ns</name> <init pos:start="19:23" pos:end="19:25">= <expr pos:start="19:25" pos:end="19:25"><literal type="number" pos:start="19:25" pos:end="19:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:13">error</name> <init pos:start="21:15" pos:end="21:17">= <expr pos:start="21:17" pos:end="21:17"><literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name> <init pos:start="23:13" pos:end="23:15">= <expr pos:start="23:15" pos:end="23:15"><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">n</name> <init pos:start="25:11" pos:end="25:13">= <expr pos:start="25:13" pos:end="25:13"><literal type="number" pos:start="25:13" pos:end="25:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:14"><decl pos:start="27:5" pos:end="27:13"><type pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:8">void</name> <modifier pos:start="27:10" pos:end="27:10">*</modifier></type><name pos:start="27:11" pos:end="27:13">buf</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:21">(<expr pos:start="31:9" pos:end="31:20"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:20"><name pos:start="31:10" pos:end="31:11">bs</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:20">backing</name></name></expr>)</condition> <block pos:start="31:23" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:17">

        <goto pos:start="33:9" pos:end="33:17">goto <name pos:start="33:14" pos:end="33:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:39"><expr pos:start="39:5" pos:end="39:38"><name pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:13">common</name><operator pos:start="39:14" pos:end="39:14">.</operator><name pos:start="39:15" pos:end="39:17">len</name></name> <operator pos:start="39:19" pos:end="39:19">=</operator> <call pos:start="39:21" pos:end="39:38"><name pos:start="39:21" pos:end="39:34">bdrv_getlength</name><argument_list pos:start="39:35" pos:end="39:38">(<argument pos:start="39:36" pos:end="39:37"><expr pos:start="39:36" pos:end="39:37"><name pos:start="39:36" pos:end="39:37">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:17">common</name><operator pos:start="41:18" pos:end="41:18">.</operator><name pos:start="41:19" pos:end="41:21">len</name></name> <operator pos:start="41:23" pos:end="41:23">&lt;</operator> <literal type="number" pos:start="41:25" pos:end="41:25">0</literal></expr>)</condition> <block pos:start="41:28" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:17">

        <expr_stmt pos:start="43:9" pos:end="43:28"><expr pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:27"><name pos:start="43:15" pos:end="43:15">s</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:23">common</name><operator pos:start="43:24" pos:end="43:24">.</operator><name pos:start="43:25" pos:end="43:27">len</name></name></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:17">goto <name pos:start="45:14" pos:end="45:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:44"><expr pos:start="51:5" pos:end="51:43"><name pos:start="51:5" pos:end="51:7">end</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <name pos:start="51:11" pos:end="51:23"><name pos:start="51:11" pos:end="51:11">s</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:19">common</name><operator pos:start="51:20" pos:end="51:20">.</operator><name pos:start="51:21" pos:end="51:23">len</name></name> <operator pos:start="51:25" pos:end="51:26">&gt;&gt;</operator> <name pos:start="51:28" pos:end="51:43">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:50"><expr pos:start="53:5" pos:end="53:49"><name pos:start="53:5" pos:end="53:7">buf</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:49"><name pos:start="53:11" pos:end="53:25">qemu_blockalign</name><argument_list pos:start="53:26" pos:end="53:49">(<argument pos:start="53:27" pos:end="53:28"><expr pos:start="53:27" pos:end="53:28"><name pos:start="53:27" pos:end="53:28">bs</name></expr></argument>, <argument pos:start="53:31" pos:end="53:48"><expr pos:start="53:31" pos:end="53:48"><name pos:start="53:31" pos:end="53:48">STREAM_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="65:7">/* Turn on copy-on-read for the whole block device so that guest read

     * requests help us make progress.  Only do this when copying the entire

     * backing chain since the copy-on-read operation does not take base into

     * account.

     */</comment>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:14">(<expr pos:start="67:9" pos:end="67:13"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:13">base</name></expr>)</condition> <block pos:start="67:16" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:37">

        <expr_stmt pos:start="69:9" pos:end="69:37"><expr pos:start="69:9" pos:end="69:36"><call pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:32">bdrv_enable_copy_on_read</name><argument_list pos:start="69:33" pos:end="69:36">(<argument pos:start="69:34" pos:end="69:35"><expr pos:start="69:34" pos:end="69:35"><name pos:start="69:34" pos:end="69:35">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="75:5" pos:end="191:5">for <control pos:start="75:9" pos:end="75:59">(<init pos:start="75:10" pos:end="75:24"><expr pos:start="75:10" pos:end="75:23"><name pos:start="75:10" pos:end="75:19">sector_num</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <literal type="number" pos:start="75:23" pos:end="75:23">0</literal></expr>;</init> <condition pos:start="75:26" pos:end="75:42"><expr pos:start="75:26" pos:end="75:41"><name pos:start="75:26" pos:end="75:35">sector_num</name> <operator pos:start="75:37" pos:end="75:37">&lt;</operator> <name pos:start="75:39" pos:end="75:41">end</name></expr>;</condition> <incr pos:start="75:44" pos:end="75:58"><expr pos:start="75:44" pos:end="75:58"><name pos:start="75:44" pos:end="75:53">sector_num</name> <operator pos:start="75:55" pos:end="75:56">+=</operator> <name pos:start="75:58" pos:end="75:58">n</name></expr></incr>)</control> <block pos:start="75:61" pos:end="191:5">{<block_content pos:start="77:9" pos:end="189:9">

        <decl_stmt pos:start="77:9" pos:end="77:18"><decl pos:start="77:9" pos:end="77:17"><type pos:start="77:9" pos:end="77:12"><name pos:start="77:9" pos:end="77:12">bool</name></type> <name pos:start="77:14" pos:end="77:17">copy</name></decl>;</decl_stmt>



        <comment type="block" pos:start="81:9" pos:end="85:11">/* Note that even when no rate limit is applied we need to yield

         * with no pending I/O here so that bdrv_drain_all() returns.

         */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:70"><expr pos:start="87:9" pos:end="87:69"><call pos:start="87:9" pos:end="87:69"><name pos:start="87:9" pos:end="87:26">block_job_sleep_ns</name><argument_list pos:start="87:27" pos:end="87:69">(<argument pos:start="87:28" pos:end="87:37"><expr pos:start="87:28" pos:end="87:37"><operator pos:start="87:28" pos:end="87:28">&amp;</operator><name pos:start="87:29" pos:end="87:37"><name pos:start="87:29" pos:end="87:29">s</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:37">common</name></name></expr></argument>, <argument pos:start="87:40" pos:end="87:58"><expr pos:start="87:40" pos:end="87:58"><name pos:start="87:40" pos:end="87:58">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="87:61" pos:end="87:68"><expr pos:start="87:61" pos:end="87:68"><name pos:start="87:61" pos:end="87:68">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:47">(<expr pos:start="89:13" pos:end="89:46"><call pos:start="89:13" pos:end="89:46"><name pos:start="89:13" pos:end="89:34">block_job_is_cancelled</name><argument_list pos:start="89:35" pos:end="89:46">(<argument pos:start="89:36" pos:end="89:45"><expr pos:start="89:36" pos:end="89:45"><operator pos:start="89:36" pos:end="89:36">&amp;</operator><name pos:start="89:37" pos:end="89:45"><name pos:start="89:37" pos:end="89:37">s</name><operator pos:start="89:38" pos:end="89:39">-&gt;</operator><name pos:start="89:40" pos:end="89:45">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:49" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:18">

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:21"><expr pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:12">copy</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <name pos:start="97:16" pos:end="97:20">false</name></expr>;</expr_stmt>



        <expr_stmt pos:start="101:9" pos:end="103:75"><expr pos:start="101:9" pos:end="103:74"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <call pos:start="101:15" pos:end="103:74"><name pos:start="101:15" pos:end="101:31">bdrv_is_allocated</name><argument_list pos:start="101:32" pos:end="103:74">(<argument pos:start="101:33" pos:end="101:34"><expr pos:start="101:33" pos:end="101:34"><name pos:start="101:33" pos:end="101:34">bs</name></expr></argument>, <argument pos:start="101:37" pos:end="101:46"><expr pos:start="101:37" pos:end="101:46"><name pos:start="101:37" pos:end="101:46">sector_num</name></expr></argument>,

                                <argument pos:start="103:33" pos:end="103:69"><expr pos:start="103:33" pos:end="103:69"><name pos:start="103:33" pos:end="103:50">STREAM_BUFFER_SIZE</name> <operator pos:start="103:52" pos:end="103:52">/</operator> <name pos:start="103:54" pos:end="103:69">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="103:72" pos:end="103:73"><expr pos:start="103:72" pos:end="103:73"><operator pos:start="103:72" pos:end="103:72">&amp;</operator><name pos:start="103:73" pos:end="103:73">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="133:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:21">(<expr pos:start="105:13" pos:end="105:20"><name pos:start="105:13" pos:end="105:15">ret</name> <operator pos:start="105:17" pos:end="105:18">==</operator> <literal type="number" pos:start="105:20" pos:end="105:20">1</literal></expr>)</condition> <block pos:start="105:23" pos:end="109:9">{<block_content>

            <comment type="block" pos:start="107:13" pos:end="107:57">/* Allocated in the top, no need to copy.  */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="109:11" pos:end="133:9">else if <condition pos:start="109:19" pos:end="109:28">(<expr pos:start="109:20" pos:end="109:27"><name pos:start="109:20" pos:end="109:22">ret</name> <operator pos:start="109:24" pos:end="109:25">&gt;=</operator> <literal type="number" pos:start="109:27" pos:end="109:27">0</literal></expr>)</condition> <block pos:start="109:30" pos:end="133:9">{<block_content pos:start="115:13" pos:end="131:30">

            <comment type="block" pos:start="111:13" pos:end="113:69">/* Copy if allocated in the intermediate images.  Limit to the

             * known-unallocated area [sector_num, sector_num+n).  */</comment>

            <expr_stmt pos:start="115:13" pos:end="117:61"><expr pos:start="115:13" pos:end="117:60"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <call pos:start="115:19" pos:end="117:60"><name pos:start="115:19" pos:end="115:41">bdrv_is_allocated_above</name><argument_list pos:start="115:42" pos:end="117:60">(<argument pos:start="115:43" pos:end="115:56"><expr pos:start="115:43" pos:end="115:56"><call pos:start="115:43" pos:end="115:56"><name pos:start="115:43" pos:end="115:52">backing_bs</name><argument_list pos:start="115:53" pos:end="115:56">(<argument pos:start="115:54" pos:end="115:55"><expr pos:start="115:54" pos:end="115:55"><name pos:start="115:54" pos:end="115:55">bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:59" pos:end="115:62"><expr pos:start="115:59" pos:end="115:62"><name pos:start="115:59" pos:end="115:62">base</name></expr></argument>,

                                          <argument pos:start="117:43" pos:end="117:52"><expr pos:start="117:43" pos:end="117:52"><name pos:start="117:43" pos:end="117:52">sector_num</name></expr></argument>, <argument pos:start="117:55" pos:end="117:55"><expr pos:start="117:55" pos:end="117:55"><name pos:start="117:55" pos:end="117:55">n</name></expr></argument>, <argument pos:start="117:58" pos:end="117:59"><expr pos:start="117:58" pos:end="117:59"><operator pos:start="117:58" pos:end="117:58">&amp;</operator><name pos:start="117:59" pos:end="117:59">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="121:13" pos:end="121:70">/* Finish early if end of backing file has been reached */</comment>

            <if_stmt pos:start="123:13" pos:end="127:13"><if pos:start="123:13" pos:end="127:13">if <condition pos:start="123:16" pos:end="123:35">(<expr pos:start="123:17" pos:end="123:34"><name pos:start="123:17" pos:end="123:19">ret</name> <operator pos:start="123:21" pos:end="123:22">==</operator> <literal type="number" pos:start="123:24" pos:end="123:24">0</literal> <operator pos:start="123:26" pos:end="123:27">&amp;&amp;</operator> <name pos:start="123:29" pos:end="123:29">n</name> <operator pos:start="123:31" pos:end="123:32">==</operator> <literal type="number" pos:start="123:34" pos:end="123:34">0</literal></expr>)</condition> <block pos:start="123:37" pos:end="127:13">{<block_content pos:start="125:17" pos:end="125:37">

                <expr_stmt pos:start="125:17" pos:end="125:37"><expr pos:start="125:17" pos:end="125:36"><name pos:start="125:17" pos:end="125:17">n</name> <operator pos:start="125:19" pos:end="125:19">=</operator> <name pos:start="125:21" pos:end="125:23">end</name> <operator pos:start="125:25" pos:end="125:25">-</operator> <name pos:start="125:27" pos:end="125:36">sector_num</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="131:13" pos:end="131:30"><expr pos:start="131:13" pos:end="131:29"><name pos:start="131:13" pos:end="131:16">copy</name> <operator pos:start="131:18" pos:end="131:18">=</operator> <operator pos:start="131:20" pos:end="131:20">(</operator><name pos:start="131:21" pos:end="131:23">ret</name> <operator pos:start="131:25" pos:end="131:26">==</operator> <literal type="number" pos:start="131:28" pos:end="131:28">1</literal><operator pos:start="131:29" pos:end="131:29">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="137:62"><expr pos:start="135:9" pos:end="137:61"><call pos:start="135:9" pos:end="137:61"><name pos:start="135:9" pos:end="135:34">trace_stream_one_iteration</name><argument_list pos:start="135:35" pos:end="137:61">(<argument pos:start="135:36" pos:end="135:36"><expr pos:start="135:36" pos:end="135:36"><name pos:start="135:36" pos:end="135:36">s</name></expr></argument>, <argument pos:start="135:39" pos:end="135:67"><expr pos:start="135:39" pos:end="135:67"><name pos:start="135:39" pos:end="135:48">sector_num</name> <operator pos:start="135:50" pos:end="135:50">*</operator> <name pos:start="135:52" pos:end="135:67">BDRV_SECTOR_SIZE</name></expr></argument>,

                                   <argument pos:start="137:36" pos:end="137:55"><expr pos:start="137:36" pos:end="137:55"><name pos:start="137:36" pos:end="137:36">n</name> <operator pos:start="137:38" pos:end="137:38">*</operator> <name pos:start="137:40" pos:end="137:55">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="137:58" pos:end="137:60"><expr pos:start="137:58" pos:end="137:60"><name pos:start="137:58" pos:end="137:60">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="145:9"><if pos:start="139:9" pos:end="145:9">if <condition pos:start="139:12" pos:end="139:17">(<expr pos:start="139:13" pos:end="139:16"><name pos:start="139:13" pos:end="139:16">copy</name></expr>)</condition> <block pos:start="139:19" pos:end="145:9">{<block_content pos:start="141:13" pos:end="143:61">

            <expr_stmt pos:start="141:13" pos:end="143:61"><expr pos:start="141:13" pos:end="143:60"><name pos:start="141:13" pos:end="141:15">ret</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <call pos:start="141:19" pos:end="143:60"><name pos:start="141:19" pos:end="141:33">stream_populate</name><argument_list pos:start="141:34" pos:end="143:60">(<argument pos:start="141:35" pos:end="141:37"><expr pos:start="141:35" pos:end="141:37"><name pos:start="141:35" pos:end="141:37">blk</name></expr></argument>, <argument pos:start="141:40" pos:end="141:68"><expr pos:start="141:40" pos:end="141:68"><name pos:start="141:40" pos:end="141:49">sector_num</name> <operator pos:start="141:51" pos:end="141:51">*</operator> <name pos:start="141:53" pos:end="141:68">BDRV_SECTOR_SIZE</name></expr></argument>,

                                  <argument pos:start="143:35" pos:end="143:54"><expr pos:start="143:35" pos:end="143:54"><name pos:start="143:35" pos:end="143:35">n</name> <operator pos:start="143:37" pos:end="143:37">*</operator> <name pos:start="143:39" pos:end="143:54">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="143:57" pos:end="143:59"><expr pos:start="143:57" pos:end="143:59"><name pos:start="143:57" pos:end="143:59">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="147:9" pos:end="173:9"><if pos:start="147:9" pos:end="173:9">if <condition pos:start="147:12" pos:end="147:20">(<expr pos:start="147:13" pos:end="147:19"><name pos:start="147:13" pos:end="147:15">ret</name> <operator pos:start="147:17" pos:end="147:17">&lt;</operator> <literal type="number" pos:start="147:19" pos:end="147:19">0</literal></expr>)</condition> <block pos:start="147:22" pos:end="173:9">{<block_content pos:start="149:13" pos:end="171:13">

            <decl_stmt pos:start="149:13" pos:end="151:76"><decl pos:start="149:13" pos:end="151:75"><type pos:start="149:13" pos:end="149:28"><name pos:start="149:13" pos:end="149:28">BlockErrorAction</name></type> <name pos:start="149:30" pos:end="149:35">action</name> <init pos:start="149:37" pos:end="151:75">=

                <expr pos:start="151:17" pos:end="151:75"><call pos:start="151:17" pos:end="151:75"><name pos:start="151:17" pos:end="151:38">block_job_error_action</name><argument_list pos:start="151:39" pos:end="151:75">(<argument pos:start="151:40" pos:end="151:49"><expr pos:start="151:40" pos:end="151:49"><operator pos:start="151:40" pos:end="151:40">&amp;</operator><name pos:start="151:41" pos:end="151:49"><name pos:start="151:41" pos:end="151:41">s</name><operator pos:start="151:42" pos:end="151:43">-&gt;</operator><name pos:start="151:44" pos:end="151:49">common</name></name></expr></argument>, <argument pos:start="151:52" pos:end="151:62"><expr pos:start="151:52" pos:end="151:62"><name pos:start="151:52" pos:end="151:62"><name pos:start="151:52" pos:end="151:52">s</name><operator pos:start="151:53" pos:end="151:54">-&gt;</operator><name pos:start="151:55" pos:end="151:62">on_error</name></name></expr></argument>, <argument pos:start="151:65" pos:end="151:68"><expr pos:start="151:65" pos:end="151:68"><name pos:start="151:65" pos:end="151:68">true</name></expr></argument>, <argument pos:start="151:71" pos:end="151:74"><expr pos:start="151:71" pos:end="151:74"><operator pos:start="151:71" pos:end="151:71">-</operator><name pos:start="151:72" pos:end="151:74">ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="153:13" pos:end="159:13"><if pos:start="153:13" pos:end="159:13">if <condition pos:start="153:16" pos:end="153:50">(<expr pos:start="153:17" pos:end="153:49"><name pos:start="153:17" pos:end="153:22">action</name> <operator pos:start="153:24" pos:end="153:25">==</operator> <name pos:start="153:27" pos:end="153:49">BLOCK_ERROR_ACTION_STOP</name></expr>)</condition> <block pos:start="153:52" pos:end="159:13">{<block_content pos:start="155:17" pos:end="157:25">

                <expr_stmt pos:start="155:17" pos:end="155:22"><expr pos:start="155:17" pos:end="155:21"><name pos:start="155:17" pos:end="155:17">n</name> <operator pos:start="155:19" pos:end="155:19">=</operator> <literal type="number" pos:start="155:21" pos:end="155:21">0</literal></expr>;</expr_stmt>

                <continue pos:start="157:17" pos:end="157:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="161:13" pos:end="165:13"><if pos:start="161:13" pos:end="165:13">if <condition pos:start="161:16" pos:end="161:27">(<expr pos:start="161:17" pos:end="161:26"><name pos:start="161:17" pos:end="161:21">error</name> <operator pos:start="161:23" pos:end="161:24">==</operator> <literal type="number" pos:start="161:26" pos:end="161:26">0</literal></expr>)</condition> <block pos:start="161:29" pos:end="165:13">{<block_content pos:start="163:17" pos:end="163:28">

                <expr_stmt pos:start="163:17" pos:end="163:28"><expr pos:start="163:17" pos:end="163:27"><name pos:start="163:17" pos:end="163:21">error</name> <operator pos:start="163:23" pos:end="163:23">=</operator> <name pos:start="163:25" pos:end="163:27">ret</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="167:13" pos:end="171:13"><if pos:start="167:13" pos:end="171:13">if <condition pos:start="167:16" pos:end="167:52">(<expr pos:start="167:17" pos:end="167:51"><name pos:start="167:17" pos:end="167:22">action</name> <operator pos:start="167:24" pos:end="167:25">==</operator> <name pos:start="167:27" pos:end="167:51">BLOCK_ERROR_ACTION_REPORT</name></expr>)</condition> <block pos:start="167:54" pos:end="171:13">{<block_content pos:start="169:17" pos:end="169:22">

                <break pos:start="169:17" pos:end="169:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:16"><expr pos:start="175:9" pos:end="175:15"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <literal type="number" pos:start="175:15" pos:end="175:15">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="179:9" pos:end="179:30">/* Publish progress */</comment>

        <expr_stmt pos:start="181:9" pos:end="181:49"><expr pos:start="181:9" pos:end="181:48"><name pos:start="181:9" pos:end="181:24"><name pos:start="181:9" pos:end="181:9">s</name><operator pos:start="181:10" pos:end="181:11">-&gt;</operator><name pos:start="181:12" pos:end="181:17">common</name><operator pos:start="181:18" pos:end="181:18">.</operator><name pos:start="181:19" pos:end="181:24">offset</name></name> <operator pos:start="181:26" pos:end="181:27">+=</operator> <name pos:start="181:29" pos:end="181:29">n</name> <operator pos:start="181:31" pos:end="181:31">*</operator> <name pos:start="181:33" pos:end="181:48">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="189:9"><if pos:start="183:9" pos:end="189:9">if <condition pos:start="183:12" pos:end="183:36">(<expr pos:start="183:13" pos:end="183:35"><name pos:start="183:13" pos:end="183:16">copy</name> <operator pos:start="183:18" pos:end="183:19">&amp;&amp;</operator> <name pos:start="183:21" pos:end="183:35"><name pos:start="183:21" pos:end="183:21">s</name><operator pos:start="183:22" pos:end="183:23">-&gt;</operator><name pos:start="183:24" pos:end="183:29">common</name><operator pos:start="183:30" pos:end="183:30">.</operator><name pos:start="183:31" pos:end="183:35">speed</name></name></expr>)</condition> <block pos:start="183:38" pos:end="189:9">{<block_content pos:start="185:13" pos:end="187:71">

            <expr_stmt pos:start="185:13" pos:end="187:71"><expr pos:start="185:13" pos:end="187:70"><name pos:start="185:13" pos:end="185:20">delay_ns</name> <operator pos:start="185:22" pos:end="185:22">=</operator> <call pos:start="185:24" pos:end="187:70"><name pos:start="185:24" pos:end="185:48">ratelimit_calculate_delay</name><argument_list pos:start="185:49" pos:end="187:70">(<argument pos:start="185:50" pos:end="185:58"><expr pos:start="185:50" pos:end="185:58"><operator pos:start="185:50" pos:end="185:50">&amp;</operator><name pos:start="185:51" pos:end="185:58"><name pos:start="185:51" pos:end="185:51">s</name><operator pos:start="185:52" pos:end="185:53">-&gt;</operator><name pos:start="185:54" pos:end="185:58">limit</name></name></expr></argument>,

                                                 <argument pos:start="187:50" pos:end="187:69"><expr pos:start="187:50" pos:end="187:69"><name pos:start="187:50" pos:end="187:50">n</name> <operator pos:start="187:52" pos:end="187:52">*</operator> <name pos:start="187:54" pos:end="187:69">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="195:5" pos:end="199:5"><if pos:start="195:5" pos:end="199:5">if <condition pos:start="195:8" pos:end="195:14">(<expr pos:start="195:9" pos:end="195:13"><operator pos:start="195:9" pos:end="195:9">!</operator><name pos:start="195:10" pos:end="195:13">base</name></expr>)</condition> <block pos:start="195:16" pos:end="199:5">{<block_content pos:start="197:9" pos:end="197:38">

        <expr_stmt pos:start="197:9" pos:end="197:38"><expr pos:start="197:9" pos:end="197:37"><call pos:start="197:9" pos:end="197:37"><name pos:start="197:9" pos:end="197:33">bdrv_disable_copy_on_read</name><argument_list pos:start="197:34" pos:end="197:37">(<argument pos:start="197:35" pos:end="197:36"><expr pos:start="197:35" pos:end="197:36"><name pos:start="197:35" pos:end="197:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="203:5" pos:end="203:76">/* Do not remove the backing file if an error was there but ignored.  */</comment>

    <expr_stmt pos:start="205:5" pos:end="205:16"><expr pos:start="205:5" pos:end="205:15"><name pos:start="205:5" pos:end="205:7">ret</name> <operator pos:start="205:9" pos:end="205:9">=</operator> <name pos:start="205:11" pos:end="205:15">error</name></expr>;</expr_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:20"><expr pos:start="209:5" pos:end="209:19"><call pos:start="209:5" pos:end="209:19"><name pos:start="209:5" pos:end="209:14">qemu_vfree</name><argument_list pos:start="209:15" pos:end="209:19">(<argument pos:start="209:16" pos:end="209:18"><expr pos:start="209:16" pos:end="209:18"><name pos:start="209:16" pos:end="209:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="213:1" pos:end="213:4"><name pos:start="213:1" pos:end="213:3">out</name>:</label>

    <comment type="block" pos:start="215:5" pos:end="215:59">/* Modify backing chain and close BDSes in main loop */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:35"><expr pos:start="217:5" pos:end="217:34"><name pos:start="217:5" pos:end="217:8">data</name> <operator pos:start="217:10" pos:end="217:10">=</operator> <call pos:start="217:12" pos:end="217:34"><name pos:start="217:12" pos:end="217:19">g_malloc</name><argument_list pos:start="217:20" pos:end="217:34">(<argument pos:start="217:21" pos:end="217:33"><expr pos:start="217:21" pos:end="217:33"><sizeof pos:start="217:21" pos:end="217:33">sizeof<argument_list pos:start="217:27" pos:end="217:33">(<argument pos:start="217:28" pos:end="217:32"><expr pos:start="217:28" pos:end="217:32"><operator pos:start="217:28" pos:end="217:28">*</operator><name pos:start="217:29" pos:end="217:32">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:20"><expr pos:start="219:5" pos:end="219:19"><name pos:start="219:5" pos:end="219:13"><name pos:start="219:5" pos:end="219:8">data</name><operator pos:start="219:9" pos:end="219:10">-&gt;</operator><name pos:start="219:11" pos:end="219:13">ret</name></name> <operator pos:start="219:15" pos:end="219:15">=</operator> <name pos:start="219:17" pos:end="219:19">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:68"><expr pos:start="221:5" pos:end="221:67"><call pos:start="221:5" pos:end="221:67"><name pos:start="221:5" pos:end="221:32">block_job_defer_to_main_loop</name><argument_list pos:start="221:33" pos:end="221:67">(<argument pos:start="221:34" pos:end="221:43"><expr pos:start="221:34" pos:end="221:43"><operator pos:start="221:34" pos:end="221:34">&amp;</operator><name pos:start="221:35" pos:end="221:43"><name pos:start="221:35" pos:end="221:35">s</name><operator pos:start="221:36" pos:end="221:37">-&gt;</operator><name pos:start="221:38" pos:end="221:43">common</name></name></expr></argument>, <argument pos:start="221:46" pos:end="221:60"><expr pos:start="221:46" pos:end="221:60"><name pos:start="221:46" pos:end="221:60">stream_complete</name></expr></argument>, <argument pos:start="221:63" pos:end="221:66"><expr pos:start="221:63" pos:end="221:66"><name pos:start="221:63" pos:end="221:66">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
