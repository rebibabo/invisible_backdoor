<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13296.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">generic_loader_realize</name><parameter_list pos:start="1:35" pos:end="1:66">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:46">DeviceState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">dev</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:58">Error</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier><modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="219:1">{<block_content pos:start="5:5" pos:end="217:5">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">GenericLoaderState</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:25">s</name> <init pos:start="5:27" pos:end="5:47">= <expr pos:start="5:29" pos:end="5:47"><call pos:start="5:29" pos:end="5:47"><name pos:start="5:29" pos:end="5:42">GENERIC_LOADER</name><argument_list pos:start="5:43" pos:end="5:47">(<argument pos:start="5:44" pos:end="5:46"><expr pos:start="5:44" pos:end="5:46"><name pos:start="5:44" pos:end="5:46">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">hwaddr</name></type> <name pos:start="7:12" pos:end="7:16">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">big_endian</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">size</name> <init pos:start="11:14" pos:end="11:16">= <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:22"><expr pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:13">set_pc</name></name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:21">false</name></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:59">/* Perform some error checking on the user's options */</comment>

    <if_stmt pos:start="21:5" pos:end="115:5"><if pos:start="21:5" pos:end="57:5">if <condition pos:start="21:8" pos:end="21:46">(<expr pos:start="21:9" pos:end="21:45"><name pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:15">data</name></name> <operator pos:start="21:17" pos:end="21:18">||</operator> <name pos:start="21:20" pos:end="21:30"><name pos:start="21:20" pos:end="21:20">s</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:30">data_len</name></name>  <operator pos:start="21:33" pos:end="21:34">||</operator> <name pos:start="21:36" pos:end="21:45"><name pos:start="21:36" pos:end="21:36">s</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:45">data_be</name></name></expr>)</condition> <block pos:start="21:48" pos:end="57:5">{<block_content pos:start="25:9" pos:end="55:9">

        <comment type="block" pos:start="23:9" pos:end="23:43">/* User is loading memory values */</comment>

        <if_stmt pos:start="25:9" pos:end="55:9"><if pos:start="25:9" pos:end="33:9">if <condition pos:start="25:12" pos:end="25:20">(<expr pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:19">file</name></name></expr>)</condition> <block pos:start="25:22" pos:end="33:9">{<block_content pos:start="27:13" pos:end="31:19">

            <expr_stmt pos:start="27:13" pos:end="29:40"><expr pos:start="27:13" pos:end="29:39"><call pos:start="27:13" pos:end="29:39"><name pos:start="27:13" pos:end="27:22">error_setg</name><argument_list pos:start="27:23" pos:end="29:39">(<argument pos:start="27:24" pos:end="27:27"><expr pos:start="27:24" pos:end="27:27"><name pos:start="27:24" pos:end="27:27">errp</name></expr></argument>, <argument pos:start="27:30" pos:end="29:38"><expr pos:start="27:30" pos:end="29:38"><literal type="string" pos:start="27:30" pos:end="27:79">"Specifying a file is not supported when loading "</literal>

                       <literal type="string" pos:start="29:24" pos:end="29:38">"memory values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="33:11" pos:end="41:9">else if <condition pos:start="33:19" pos:end="33:32">(<expr pos:start="33:20" pos:end="33:31"><name pos:start="33:20" pos:end="33:31"><name pos:start="33:20" pos:end="33:20">s</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:31">force_raw</name></name></expr>)</condition> <block pos:start="33:34" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:19">

            <expr_stmt pos:start="35:13" pos:end="37:48"><expr pos:start="35:13" pos:end="37:47"><call pos:start="35:13" pos:end="37:47"><name pos:start="35:13" pos:end="35:22">error_setg</name><argument_list pos:start="35:23" pos:end="37:47">(<argument pos:start="35:24" pos:end="35:27"><expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">errp</name></expr></argument>, <argument pos:start="35:30" pos:end="37:46"><expr pos:start="35:30" pos:end="37:46"><literal type="string" pos:start="35:30" pos:end="35:74">"Specifying force-raw is not supported when "</literal>

                       <literal type="string" pos:start="37:24" pos:end="37:46">"loading memory values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="41:11" pos:end="49:9">else if <condition pos:start="41:19" pos:end="41:32">(<expr pos:start="41:20" pos:end="41:31"><operator pos:start="41:20" pos:end="41:20">!</operator><name pos:start="41:21" pos:end="41:31"><name pos:start="41:21" pos:end="41:21">s</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:31">data_len</name></name></expr>)</condition> <block pos:start="41:34" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:19">

            <comment type="block" pos:start="43:13" pos:end="43:79">/* We can't check for !data here as a value of 0 is still valid. */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:73"><expr pos:start="45:13" pos:end="45:72"><call pos:start="45:13" pos:end="45:72"><name pos:start="45:13" pos:end="45:22">error_setg</name><argument_list pos:start="45:23" pos:end="45:72">(<argument pos:start="45:24" pos:end="45:27"><expr pos:start="45:24" pos:end="45:27"><name pos:start="45:24" pos:end="45:27">errp</name></expr></argument>, <argument pos:start="45:30" pos:end="45:71"><expr pos:start="45:30" pos:end="45:71"><literal type="string" pos:start="45:30" pos:end="45:71">"Both data and data-len must be specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="55:9">else if <condition pos:start="49:19" pos:end="49:35">(<expr pos:start="49:20" pos:end="49:34"><name pos:start="49:20" pos:end="49:30"><name pos:start="49:20" pos:end="49:20">s</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:30">data_len</name></name> <operator pos:start="49:32" pos:end="49:32">&gt;</operator> <literal type="number" pos:start="49:34" pos:end="49:34">8</literal></expr>)</condition> <block pos:start="49:37" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:19">

            <expr_stmt pos:start="51:13" pos:end="51:72"><expr pos:start="51:13" pos:end="51:71"><call pos:start="51:13" pos:end="51:71"><name pos:start="51:13" pos:end="51:22">error_setg</name><argument_list pos:start="51:23" pos:end="51:71">(<argument pos:start="51:24" pos:end="51:27"><expr pos:start="51:24" pos:end="51:27"><name pos:start="51:24" pos:end="51:27">errp</name></expr></argument>, <argument pos:start="51:30" pos:end="51:70"><expr pos:start="51:30" pos:end="51:70"><literal type="string" pos:start="51:30" pos:end="51:70">"data-len cannot be greater then 8 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="57:7" pos:end="83:5">else if <condition pos:start="57:15" pos:end="57:39">(<expr pos:start="57:16" pos:end="57:38"><name pos:start="57:16" pos:end="57:22"><name pos:start="57:16" pos:end="57:16">s</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:22">file</name></name> <operator pos:start="57:24" pos:end="57:25">||</operator> <name pos:start="57:27" pos:end="57:38"><name pos:start="57:27" pos:end="57:27">s</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:38">force_raw</name></name></expr>)</condition>  <block pos:start="57:42" pos:end="83:5">{<block_content pos:start="61:9" pos:end="81:9">

        <comment type="block" pos:start="59:9" pos:end="59:38">/* User is loading an image */</comment>

        <if_stmt pos:start="61:9" pos:end="69:9"><if pos:start="61:9" pos:end="69:9">if <condition pos:start="61:12" pos:end="61:49">(<expr pos:start="61:13" pos:end="61:48"><name pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:19">data</name></name> <operator pos:start="61:21" pos:end="61:22">||</operator> <name pos:start="61:24" pos:end="61:34"><name pos:start="61:24" pos:end="61:24">s</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:34">data_len</name></name> <operator pos:start="61:36" pos:end="61:37">||</operator> <name pos:start="61:39" pos:end="61:48"><name pos:start="61:39" pos:end="61:39">s</name><operator pos:start="61:40" pos:end="61:41">-&gt;</operator><name pos:start="61:42" pos:end="61:48">data_be</name></name></expr>)</condition> <block pos:start="61:51" pos:end="69:9">{<block_content pos:start="63:13" pos:end="67:19">

            <expr_stmt pos:start="63:13" pos:end="65:32"><expr pos:start="63:13" pos:end="65:31"><call pos:start="63:13" pos:end="65:31"><name pos:start="63:13" pos:end="63:22">error_setg</name><argument_list pos:start="63:23" pos:end="65:31">(<argument pos:start="63:24" pos:end="63:27"><expr pos:start="63:24" pos:end="63:27"><name pos:start="63:24" pos:end="63:27">errp</name></expr></argument>, <argument pos:start="63:30" pos:end="65:30"><expr pos:start="63:30" pos:end="65:30"><literal type="string" pos:start="63:30" pos:end="63:73">"data can not be specified when loading an "</literal>

                       <literal type="string" pos:start="65:24" pos:end="65:30">"image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="71:9" pos:end="75:11">/* The user specified a file, only set the PC if they also specified

         * a CPU to use.

         */</comment>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:35">(<expr pos:start="77:13" pos:end="77:34"><name pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:22">cpu_num</name></name> <operator pos:start="77:24" pos:end="77:25">!=</operator> <name pos:start="77:27" pos:end="77:34">CPU_NONE</name></expr>)</condition> <block pos:start="77:37" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:29">

            <expr_stmt pos:start="79:13" pos:end="79:29"><expr pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:21"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:21">set_pc</name></name> <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:28">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="83:7" pos:end="107:5">else if <condition pos:start="83:15" pos:end="83:23">(<expr pos:start="83:16" pos:end="83:22"><name pos:start="83:16" pos:end="83:22"><name pos:start="83:16" pos:end="83:16">s</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:22">addr</name></name></expr>)</condition> <block pos:start="83:25" pos:end="107:5">{<block_content pos:start="87:9" pos:end="105:25">

        <comment type="block" pos:start="85:9" pos:end="85:36">/* User is setting the PC */</comment>

        <if_stmt pos:start="87:9" pos:end="103:9"><if pos:start="87:9" pos:end="95:9">if <condition pos:start="87:12" pos:end="87:49">(<expr pos:start="87:13" pos:end="87:48"><name pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:19">data</name></name> <operator pos:start="87:21" pos:end="87:22">||</operator> <name pos:start="87:24" pos:end="87:34"><name pos:start="87:24" pos:end="87:24">s</name><operator pos:start="87:25" pos:end="87:26">-&gt;</operator><name pos:start="87:27" pos:end="87:34">data_len</name></name> <operator pos:start="87:36" pos:end="87:37">||</operator> <name pos:start="87:39" pos:end="87:48"><name pos:start="87:39" pos:end="87:39">s</name><operator pos:start="87:40" pos:end="87:41">-&gt;</operator><name pos:start="87:42" pos:end="87:48">data_be</name></name></expr>)</condition> <block pos:start="87:51" pos:end="95:9">{<block_content pos:start="89:13" pos:end="93:19">

            <expr_stmt pos:start="89:13" pos:end="91:42"><expr pos:start="89:13" pos:end="91:41"><call pos:start="89:13" pos:end="91:41"><name pos:start="89:13" pos:end="89:22">error_setg</name><argument_list pos:start="89:23" pos:end="91:41">(<argument pos:start="89:24" pos:end="89:27"><expr pos:start="89:24" pos:end="89:27"><name pos:start="89:24" pos:end="89:27">errp</name></expr></argument>, <argument pos:start="89:30" pos:end="91:40"><expr pos:start="89:30" pos:end="91:40"><literal type="string" pos:start="89:30" pos:end="89:72">"data can not be specified when setting a "</literal>

                       <literal type="string" pos:start="91:24" pos:end="91:40">"program counter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="95:11" pos:end="103:9">else if <condition pos:start="95:19" pos:end="95:31">(<expr pos:start="95:20" pos:end="95:30"><operator pos:start="95:20" pos:end="95:20">!</operator><name pos:start="95:21" pos:end="95:30"><name pos:start="95:21" pos:end="95:21">s</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:30">cpu_num</name></name></expr>)</condition> <block pos:start="95:33" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:19">

            <expr_stmt pos:start="97:13" pos:end="99:42"><expr pos:start="97:13" pos:end="99:41"><call pos:start="97:13" pos:end="99:41"><name pos:start="97:13" pos:end="97:22">error_setg</name><argument_list pos:start="97:23" pos:end="99:41">(<argument pos:start="97:24" pos:end="97:27"><expr pos:start="97:24" pos:end="97:27"><name pos:start="97:24" pos:end="97:27">errp</name></expr></argument>, <argument pos:start="97:30" pos:end="99:40"><expr pos:start="97:30" pos:end="99:40"><literal type="string" pos:start="97:30" pos:end="97:72">"cpu_num must be specified when setting a "</literal>

                       <literal type="string" pos:start="99:24" pos:end="99:40">"program counter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:25"><expr pos:start="105:9" pos:end="105:24"><name pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:17">set_pc</name></name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:24">true</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="115:5">else <block pos:start="107:12" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:15">

        <comment type="block" pos:start="109:9" pos:end="109:44">/* Did the user specify anything? */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:59"><expr pos:start="111:9" pos:end="111:58"><call pos:start="111:9" pos:end="111:58"><name pos:start="111:9" pos:end="111:18">error_setg</name><argument_list pos:start="111:19" pos:end="111:58">(<argument pos:start="111:20" pos:end="111:23"><expr pos:start="111:20" pos:end="111:23"><name pos:start="111:20" pos:end="111:23">errp</name></expr></argument>, <argument pos:start="111:26" pos:end="111:57"><expr pos:start="111:26" pos:end="111:57"><literal type="string" pos:start="111:26" pos:end="111:57">"please include valid arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:15">return;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:51"><expr pos:start="119:5" pos:end="119:50"><call pos:start="119:5" pos:end="119:50"><name pos:start="119:5" pos:end="119:23">qemu_register_reset</name><argument_list pos:start="119:24" pos:end="119:50">(<argument pos:start="119:25" pos:end="119:44"><expr pos:start="119:25" pos:end="119:44"><name pos:start="119:25" pos:end="119:44">generic_loader_reset</name></expr></argument>, <argument pos:start="119:47" pos:end="119:49"><expr pos:start="119:47" pos:end="119:49"><name pos:start="119:47" pos:end="119:49">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="146:0"><if pos:start="123:5" pos:end="137:5">if <condition pos:start="123:8" pos:end="123:31">(<expr pos:start="123:9" pos:end="123:30"><name pos:start="123:9" pos:end="123:18"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:18">cpu_num</name></name> <operator pos:start="123:20" pos:end="123:21">!=</operator> <name pos:start="123:23" pos:end="123:30">CPU_NONE</name></expr>)</condition> <block pos:start="123:33" pos:end="137:5">{<block_content pos:start="125:9" pos:end="135:9">

        <expr_stmt pos:start="125:9" pos:end="125:42"><expr pos:start="125:9" pos:end="125:41"><name pos:start="125:9" pos:end="125:14"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:14">cpu</name></name> <operator pos:start="125:16" pos:end="125:16">=</operator> <call pos:start="125:18" pos:end="125:41"><name pos:start="125:18" pos:end="125:29">qemu_get_cpu</name><argument_list pos:start="125:30" pos:end="125:41">(<argument pos:start="125:31" pos:end="125:40"><expr pos:start="125:31" pos:end="125:40"><name pos:start="125:31" pos:end="125:40"><name pos:start="125:31" pos:end="125:31">s</name><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:40">cpu_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="135:9"><if pos:start="127:9" pos:end="135:9">if <condition pos:start="127:12" pos:end="127:20">(<expr pos:start="127:13" pos:end="127:19"><operator pos:start="127:13" pos:end="127:13">!</operator><name pos:start="127:14" pos:end="127:19"><name pos:start="127:14" pos:end="127:14">s</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:19">cpu</name></name></expr>)</condition> <block pos:start="127:22" pos:end="135:9">{<block_content pos:start="129:13" pos:end="133:19">

            <expr_stmt pos:start="129:13" pos:end="131:35"><expr pos:start="129:13" pos:end="131:34"><call pos:start="129:13" pos:end="131:34"><name pos:start="129:13" pos:end="129:22">error_setg</name><argument_list pos:start="129:23" pos:end="131:34">(<argument pos:start="129:24" pos:end="129:27"><expr pos:start="129:24" pos:end="129:27"><name pos:start="129:24" pos:end="129:27">errp</name></expr></argument>, <argument pos:start="129:30" pos:end="129:67"><expr pos:start="129:30" pos:end="129:67"><literal type="string" pos:start="129:30" pos:end="129:67">"Specified boot CPU#%d is nonexistent"</literal></expr></argument>,

                       <argument pos:start="131:24" pos:end="131:33"><expr pos:start="131:24" pos:end="131:33"><name pos:start="131:24" pos:end="131:33"><name pos:start="131:24" pos:end="131:24">s</name><operator pos:start="131:25" pos:end="131:26">-&gt;</operator><name pos:start="131:27" pos:end="131:33">cpu_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="133:13" pos:end="133:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="137:7" pos:end="146:0">else <block pos:start="137:12" pos:end="146:0">{<block_content pos:start="139:9" pos:end="139:27">

        <expr_stmt pos:start="139:9" pos:end="139:27"><expr pos:start="139:9" pos:end="139:26"><name pos:start="139:9" pos:end="139:14"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:14">cpu</name></name> <operator pos:start="139:16" pos:end="139:16">=</operator> <name pos:start="139:18" pos:end="139:26">first_cpu</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="145:1" pos:end="145:29">#<cpp:directive pos:start="145:2" pos:end="145:6">ifdef</cpp:directive> <name pos:start="145:8" pos:end="145:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="147:5" pos:end="150:0"><expr pos:start="147:5" pos:end="147:18"><name pos:start="147:5" pos:end="147:14">big_endian</name> <operator pos:start="147:16" pos:end="147:16">=</operator> <literal type="number" pos:start="147:18" pos:end="147:18">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="149:1" pos:end="149:5">#<cpp:directive pos:start="149:2" pos:end="149:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="151:5" pos:end="154:0"><expr pos:start="151:5" pos:end="151:18"><name pos:start="151:5" pos:end="151:14">big_endian</name> <operator pos:start="151:16" pos:end="151:16">=</operator> <literal type="number" pos:start="151:18" pos:end="151:18">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="153:1" pos:end="153:6">#<cpp:directive pos:start="153:2" pos:end="153:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="157:5" pos:end="203:5"><if pos:start="157:5" pos:end="203:5">if <condition pos:start="157:8" pos:end="157:16">(<expr pos:start="157:9" pos:end="157:15"><name pos:start="157:9" pos:end="157:15"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:15">file</name></name></expr>)</condition> <block pos:start="157:18" pos:end="203:5">{<block_content pos:start="159:9" pos:end="201:9">

        <if_stmt pos:start="159:9" pos:end="175:9"><if pos:start="159:9" pos:end="175:9">if <condition pos:start="159:12" pos:end="159:26">(<expr pos:start="159:13" pos:end="159:25"><operator pos:start="159:13" pos:end="159:13">!</operator><name pos:start="159:14" pos:end="159:25"><name pos:start="159:14" pos:end="159:14">s</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:25">force_raw</name></name></expr>)</condition> <block pos:start="159:28" pos:end="175:9">{<block_content pos:start="161:13" pos:end="173:13">

            <expr_stmt pos:start="161:13" pos:end="163:64"><expr pos:start="161:13" pos:end="163:63"><name pos:start="161:13" pos:end="161:16">size</name> <operator pos:start="161:18" pos:end="161:18">=</operator> <call pos:start="161:20" pos:end="163:63"><name pos:start="161:20" pos:end="161:30">load_elf_as</name><argument_list pos:start="161:31" pos:end="163:63">(<argument pos:start="161:32" pos:end="161:38"><expr pos:start="161:32" pos:end="161:38"><name pos:start="161:32" pos:end="161:38"><name pos:start="161:32" pos:end="161:32">s</name><operator pos:start="161:33" pos:end="161:34">-&gt;</operator><name pos:start="161:35" pos:end="161:38">file</name></name></expr></argument>, <argument pos:start="161:41" pos:end="161:44"><expr pos:start="161:41" pos:end="161:44"><name pos:start="161:41" pos:end="161:44">NULL</name></expr></argument>, <argument pos:start="161:47" pos:end="161:50"><expr pos:start="161:47" pos:end="161:50"><name pos:start="161:47" pos:end="161:50">NULL</name></expr></argument>, <argument pos:start="161:53" pos:end="161:58"><expr pos:start="161:53" pos:end="161:58"><operator pos:start="161:53" pos:end="161:53">&amp;</operator><name pos:start="161:54" pos:end="161:58">entry</name></expr></argument>, <argument pos:start="161:61" pos:end="161:64"><expr pos:start="161:61" pos:end="161:64"><name pos:start="161:61" pos:end="161:64">NULL</name></expr></argument>, <argument pos:start="161:67" pos:end="161:70"><expr pos:start="161:67" pos:end="161:70"><name pos:start="161:67" pos:end="161:70">NULL</name></expr></argument>,

                               <argument pos:start="163:32" pos:end="163:41"><expr pos:start="163:32" pos:end="163:41"><name pos:start="163:32" pos:end="163:41">big_endian</name></expr></argument>, <argument pos:start="163:44" pos:end="163:44"><expr pos:start="163:44" pos:end="163:44"><literal type="number" pos:start="163:44" pos:end="163:44">0</literal></expr></argument>, <argument pos:start="163:47" pos:end="163:47"><expr pos:start="163:47" pos:end="163:47"><literal type="number" pos:start="163:47" pos:end="163:47">0</literal></expr></argument>, <argument pos:start="163:50" pos:end="163:50"><expr pos:start="163:50" pos:end="163:50"><literal type="number" pos:start="163:50" pos:end="163:50">0</literal></expr></argument>, <argument pos:start="163:53" pos:end="163:62"><expr pos:start="163:53" pos:end="163:62"><name pos:start="163:53" pos:end="163:62"><name pos:start="163:53" pos:end="163:53">s</name><operator pos:start="163:54" pos:end="163:55">-&gt;</operator><name pos:start="163:56" pos:end="163:58">cpu</name><operator pos:start="163:59" pos:end="163:60">-&gt;</operator><name pos:start="163:61" pos:end="163:62">as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="167:13" pos:end="173:13"><if pos:start="167:13" pos:end="173:13">if <condition pos:start="167:16" pos:end="167:25">(<expr pos:start="167:17" pos:end="167:24"><name pos:start="167:17" pos:end="167:20">size</name> <operator pos:start="167:22" pos:end="167:22">&lt;</operator> <literal type="number" pos:start="167:24" pos:end="167:24">0</literal></expr>)</condition> <block pos:start="167:27" pos:end="173:13">{<block_content pos:start="169:17" pos:end="171:50">

                <expr_stmt pos:start="169:17" pos:end="171:50"><expr pos:start="169:17" pos:end="171:49"><name pos:start="169:17" pos:end="169:20">size</name> <operator pos:start="169:22" pos:end="169:22">=</operator> <call pos:start="169:24" pos:end="171:49"><name pos:start="169:24" pos:end="169:37">load_uimage_as</name><argument_list pos:start="169:38" pos:end="171:49">(<argument pos:start="169:39" pos:end="169:45"><expr pos:start="169:39" pos:end="169:45"><name pos:start="169:39" pos:end="169:45"><name pos:start="169:39" pos:end="169:39">s</name><operator pos:start="169:40" pos:end="169:41">-&gt;</operator><name pos:start="169:42" pos:end="169:45">file</name></name></expr></argument>, <argument pos:start="169:48" pos:end="169:53"><expr pos:start="169:48" pos:end="169:53"><operator pos:start="169:48" pos:end="169:48">&amp;</operator><name pos:start="169:49" pos:end="169:53">entry</name></expr></argument>, <argument pos:start="169:56" pos:end="169:59"><expr pos:start="169:56" pos:end="169:59"><name pos:start="169:56" pos:end="169:59">NULL</name></expr></argument>, <argument pos:start="169:62" pos:end="169:65"><expr pos:start="169:62" pos:end="169:65"><name pos:start="169:62" pos:end="169:65">NULL</name></expr></argument>, <argument pos:start="169:68" pos:end="169:71"><expr pos:start="169:68" pos:end="169:71"><name pos:start="169:68" pos:end="169:71">NULL</name></expr></argument>, <argument pos:start="169:74" pos:end="169:77"><expr pos:start="169:74" pos:end="169:77"><name pos:start="169:74" pos:end="169:77">NULL</name></expr></argument>,

                                      <argument pos:start="171:39" pos:end="171:48"><expr pos:start="171:39" pos:end="171:48"><name pos:start="171:39" pos:end="171:48"><name pos:start="171:39" pos:end="171:39">s</name><operator pos:start="171:40" pos:end="171:41">-&gt;</operator><name pos:start="171:42" pos:end="171:44">cpu</name><operator pos:start="171:45" pos:end="171:46">-&gt;</operator><name pos:start="171:47" pos:end="171:48">as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="179:9" pos:end="191:9"><if pos:start="179:9" pos:end="187:9">if <condition pos:start="179:12" pos:end="179:37">(<expr pos:start="179:13" pos:end="179:36"><name pos:start="179:13" pos:end="179:16">size</name> <operator pos:start="179:18" pos:end="179:18">&lt;</operator> <literal type="number" pos:start="179:20" pos:end="179:20">0</literal> <operator pos:start="179:22" pos:end="179:23">||</operator> <name pos:start="179:25" pos:end="179:36"><name pos:start="179:25" pos:end="179:25">s</name><operator pos:start="179:26" pos:end="179:27">-&gt;</operator><name pos:start="179:28" pos:end="179:36">force_raw</name></name></expr>)</condition> <block pos:start="179:39" pos:end="187:9">{<block_content pos:start="183:13" pos:end="185:54">

            <comment type="block" pos:start="181:13" pos:end="181:74">/* Default to the maximum size being the machine's ram size */</comment>

            <expr_stmt pos:start="183:13" pos:end="185:54"><expr pos:start="183:13" pos:end="185:53"><name pos:start="183:13" pos:end="183:16">size</name> <operator pos:start="183:18" pos:end="183:18">=</operator> <call pos:start="183:20" pos:end="185:53"><name pos:start="183:20" pos:end="183:41">load_image_targphys_as</name><argument_list pos:start="183:42" pos:end="185:53">(<argument pos:start="183:43" pos:end="183:49"><expr pos:start="183:43" pos:end="183:49"><name pos:start="183:43" pos:end="183:49"><name pos:start="183:43" pos:end="183:43">s</name><operator pos:start="183:44" pos:end="183:45">-&gt;</operator><name pos:start="183:46" pos:end="183:49">file</name></name></expr></argument>, <argument pos:start="183:52" pos:end="183:58"><expr pos:start="183:52" pos:end="183:58"><name pos:start="183:52" pos:end="183:58"><name pos:start="183:52" pos:end="183:52">s</name><operator pos:start="183:53" pos:end="183:54">-&gt;</operator><name pos:start="183:55" pos:end="183:58">addr</name></name></expr></argument>, <argument pos:start="183:61" pos:end="183:68"><expr pos:start="183:61" pos:end="183:68"><name pos:start="183:61" pos:end="183:68">ram_size</name></expr></argument>,

                                          <argument pos:start="185:43" pos:end="185:52"><expr pos:start="185:43" pos:end="185:52"><name pos:start="185:43" pos:end="185:52"><name pos:start="185:43" pos:end="185:43">s</name><operator pos:start="185:44" pos:end="185:45">-&gt;</operator><name pos:start="185:46" pos:end="185:48">cpu</name><operator pos:start="185:49" pos:end="185:50">-&gt;</operator><name pos:start="185:51" pos:end="185:52">as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="187:11" pos:end="191:9">else <block pos:start="187:16" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:28">

            <expr_stmt pos:start="189:13" pos:end="189:28"><expr pos:start="189:13" pos:end="189:27"><name pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:13">s</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:19">addr</name></name> <operator pos:start="189:21" pos:end="189:21">=</operator> <name pos:start="189:23" pos:end="189:27">entry</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="195:9" pos:end="201:9"><if pos:start="195:9" pos:end="201:9">if <condition pos:start="195:12" pos:end="195:21">(<expr pos:start="195:13" pos:end="195:20"><name pos:start="195:13" pos:end="195:16">size</name> <operator pos:start="195:18" pos:end="195:18">&lt;</operator> <literal type="number" pos:start="195:20" pos:end="195:20">0</literal></expr>)</condition> <block pos:start="195:23" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:19">

            <expr_stmt pos:start="197:13" pos:end="197:72"><expr pos:start="197:13" pos:end="197:71"><call pos:start="197:13" pos:end="197:71"><name pos:start="197:13" pos:end="197:22">error_setg</name><argument_list pos:start="197:23" pos:end="197:71">(<argument pos:start="197:24" pos:end="197:27"><expr pos:start="197:24" pos:end="197:27"><name pos:start="197:24" pos:end="197:27">errp</name></expr></argument>, <argument pos:start="197:30" pos:end="197:61"><expr pos:start="197:30" pos:end="197:61"><literal type="string" pos:start="197:30" pos:end="197:61">"Cannot load specified image %s"</literal></expr></argument>, <argument pos:start="197:64" pos:end="197:70"><expr pos:start="197:64" pos:end="197:70"><name pos:start="197:64" pos:end="197:70"><name pos:start="197:64" pos:end="197:64">s</name><operator pos:start="197:65" pos:end="197:66">-&gt;</operator><name pos:start="197:67" pos:end="197:70">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="199:13" pos:end="199:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="207:5" pos:end="207:36">/* Convert the data endiannes */</comment>

    <if_stmt pos:start="209:5" pos:end="217:5"><if pos:start="209:5" pos:end="213:5">if <condition pos:start="209:8" pos:end="209:19">(<expr pos:start="209:9" pos:end="209:18"><name pos:start="209:9" pos:end="209:18"><name pos:start="209:9" pos:end="209:9">s</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:18">data_be</name></name></expr>)</condition> <block pos:start="209:21" pos:end="213:5">{<block_content pos:start="211:9" pos:end="211:39">

        <expr_stmt pos:start="211:9" pos:end="211:39"><expr pos:start="211:9" pos:end="211:38"><name pos:start="211:9" pos:end="211:15"><name pos:start="211:9" pos:end="211:9">s</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:15">data</name></name> <operator pos:start="211:17" pos:end="211:17">=</operator> <call pos:start="211:19" pos:end="211:38"><name pos:start="211:19" pos:end="211:29">cpu_to_be64</name><argument_list pos:start="211:30" pos:end="211:38">(<argument pos:start="211:31" pos:end="211:37"><expr pos:start="211:31" pos:end="211:37"><name pos:start="211:31" pos:end="211:37"><name pos:start="211:31" pos:end="211:31">s</name><operator pos:start="211:32" pos:end="211:33">-&gt;</operator><name pos:start="211:34" pos:end="211:37">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="213:7" pos:end="217:5">else <block pos:start="213:12" pos:end="217:5">{<block_content pos:start="215:9" pos:end="215:39">

        <expr_stmt pos:start="215:9" pos:end="215:39"><expr pos:start="215:9" pos:end="215:38"><name pos:start="215:9" pos:end="215:15"><name pos:start="215:9" pos:end="215:9">s</name><operator pos:start="215:10" pos:end="215:11">-&gt;</operator><name pos:start="215:12" pos:end="215:15">data</name></name> <operator pos:start="215:17" pos:end="215:17">=</operator> <call pos:start="215:19" pos:end="215:38"><name pos:start="215:19" pos:end="215:29">cpu_to_le64</name><argument_list pos:start="215:30" pos:end="215:38">(<argument pos:start="215:31" pos:end="215:37"><expr pos:start="215:31" pos:end="215:37"><name pos:start="215:31" pos:end="215:37"><name pos:start="215:31" pos:end="215:31">s</name><operator pos:start="215:32" pos:end="215:33">-&gt;</operator><name pos:start="215:34" pos:end="215:37">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
