<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3316.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">virtio_rng_device_realize</name><parameter_list pos:start="1:38" pos:end="1:69">(<parameter pos:start="1:39" pos:end="1:54"><decl pos:start="1:39" pos:end="1:54"><type pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:49">DeviceState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">dev</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:61">Error</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier><modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:43">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">VirtIODevice</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:22">vdev</name> <init pos:start="5:24" pos:end="5:43">= <expr pos:start="5:26" pos:end="5:43"><call pos:start="5:26" pos:end="5:43"><name pos:start="5:26" pos:end="5:38">VIRTIO_DEVICE</name><argument_list pos:start="5:39" pos:end="5:43">(<argument pos:start="5:40" pos:end="5:42"><expr pos:start="5:40" pos:end="5:42"><name pos:start="5:40" pos:end="5:42">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">VirtIORNG</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:19">vrng</name> <init pos:start="7:21" pos:end="7:37">= <expr pos:start="7:23" pos:end="7:37"><call pos:start="7:23" pos:end="7:37"><name pos:start="7:23" pos:end="7:32">VIRTIO_RNG</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:34">(<expr pos:start="13:9" pos:end="13:33"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:29"><name pos:start="13:10" pos:end="13:13">vrng</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:19">conf</name><operator pos:start="13:20" pos:end="13:20">.</operator><name pos:start="13:21" pos:end="13:29">period_ms</name></name> <operator pos:start="13:31" pos:end="13:31">&gt;</operator> <literal type="number" pos:start="13:33" pos:end="13:33">0</literal></expr>)</condition> <block pos:start="13:36" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:15">

        <expr_stmt pos:start="15:9" pos:end="15:74"><expr pos:start="15:9" pos:end="15:73"><call pos:start="15:9" pos:end="15:73"><name pos:start="15:9" pos:end="15:18">error_setg</name><argument_list pos:start="15:19" pos:end="15:73">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">errp</name></expr></argument>, <argument pos:start="15:26" pos:end="15:72"><expr pos:start="15:26" pos:end="15:72"><literal type="string" pos:start="15:26" pos:end="15:72">"'period' parameter expects a positive integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="25:51">/* Workaround: Property parsing does not enforce unsigned integers,

     * So this is a hack to reject such numbers. */</comment>

    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:41">(<expr pos:start="27:9" pos:end="27:40"><name pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:12">vrng</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:18">conf</name><operator pos:start="27:19" pos:end="27:19">.</operator><name pos:start="27:20" pos:end="27:28">max_bytes</name></name> <operator pos:start="27:30" pos:end="27:30">&gt;</operator> <name pos:start="27:32" pos:end="27:40">INT64_MAX</name></expr>)</condition> <block pos:start="27:43" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:15">

        <expr_stmt pos:start="29:9" pos:end="31:41"><expr pos:start="29:9" pos:end="31:40"><call pos:start="29:9" pos:end="31:40"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="31:40">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="31:39"><expr pos:start="29:26" pos:end="31:39"><literal type="string" pos:start="29:26" pos:end="29:71">"'max-bytes' parameter must be non-negative, "</literal>

                   <literal type="string" pos:start="31:20" pos:end="31:39">"and less than 2^63"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="83:5"><if pos:start="39:5" pos:end="83:5">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:12">vrng</name><operator pos:start="39:13" pos:end="39:14">-&gt;</operator><name pos:start="39:15" pos:end="39:18">conf</name><operator pos:start="39:19" pos:end="39:19">.</operator><name pos:start="39:20" pos:end="39:22">rng</name></name> <operator pos:start="39:24" pos:end="39:25">==</operator> <name pos:start="39:27" pos:end="39:30">NULL</name></expr>)</condition> <block pos:start="39:33" pos:end="83:5">{<block_content pos:start="41:9" pos:end="81:46">

        <expr_stmt pos:start="41:9" pos:end="41:77"><expr pos:start="41:9" pos:end="41:76"><name pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:12">vrng</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:18">conf</name><operator pos:start="41:19" pos:end="41:19">.</operator><name pos:start="41:20" pos:end="41:34">default_backend</name></name> <operator pos:start="41:36" pos:end="41:36">=</operator> <call pos:start="41:38" pos:end="41:76"><name pos:start="41:38" pos:end="41:47">RNG_RANDOM</name><argument_list pos:start="41:48" pos:end="41:76">(<argument pos:start="41:49" pos:end="41:75"><expr pos:start="41:49" pos:end="41:75"><call pos:start="41:49" pos:end="41:75"><name pos:start="41:49" pos:end="41:58">object_new</name><argument_list pos:start="41:59" pos:end="41:75">(<argument pos:start="41:60" pos:end="41:74"><expr pos:start="41:60" pos:end="41:74"><name pos:start="41:60" pos:end="41:74">TYPE_RNG_RANDOM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="47:44"><expr pos:start="45:9" pos:end="47:43"><call pos:start="45:9" pos:end="47:43"><name pos:start="45:9" pos:end="45:31">user_creatable_complete</name><argument_list pos:start="45:32" pos:end="47:43">(<argument pos:start="45:33" pos:end="45:66"><expr pos:start="45:33" pos:end="45:66"><call pos:start="45:33" pos:end="45:66"><name pos:start="45:33" pos:end="45:38">OBJECT</name><argument_list pos:start="45:39" pos:end="45:66">(<argument pos:start="45:40" pos:end="45:65"><expr pos:start="45:40" pos:end="45:65"><name pos:start="45:40" pos:end="45:65"><name pos:start="45:40" pos:end="45:43">vrng</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:49">conf</name><operator pos:start="45:50" pos:end="45:50">.</operator><name pos:start="45:51" pos:end="45:65">default_backend</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="47:33" pos:end="47:42"><expr pos:start="47:33" pos:end="47:42"><operator pos:start="47:33" pos:end="47:33">&amp;</operator><name pos:start="47:34" pos:end="47:42">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:22">(<expr pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:21">local_err</name></expr>)</condition> <block pos:start="49:24" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:19">

            <expr_stmt pos:start="51:13" pos:end="51:45"><expr pos:start="51:13" pos:end="51:44"><call pos:start="51:13" pos:end="51:44"><name pos:start="51:13" pos:end="51:27">error_propagate</name><argument_list pos:start="51:28" pos:end="51:44">(<argument pos:start="51:29" pos:end="51:32"><expr pos:start="51:29" pos:end="51:32"><name pos:start="51:29" pos:end="51:32">errp</name></expr></argument>, <argument pos:start="51:35" pos:end="51:43"><expr pos:start="51:35" pos:end="51:43"><name pos:start="51:35" pos:end="51:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:61"><expr pos:start="53:13" pos:end="53:60"><call pos:start="53:13" pos:end="53:60"><name pos:start="53:13" pos:end="53:24">object_unref</name><argument_list pos:start="53:25" pos:end="53:60">(<argument pos:start="53:26" pos:end="53:59"><expr pos:start="53:26" pos:end="53:59"><call pos:start="53:26" pos:end="53:59"><name pos:start="53:26" pos:end="53:31">OBJECT</name><argument_list pos:start="53:32" pos:end="53:59">(<argument pos:start="53:33" pos:end="53:58"><expr pos:start="53:33" pos:end="53:58"><name pos:start="53:33" pos:end="53:58"><name pos:start="53:33" pos:end="53:36">vrng</name><operator pos:start="53:37" pos:end="53:38">-&gt;</operator><name pos:start="53:39" pos:end="53:42">conf</name><operator pos:start="53:43" pos:end="53:43">.</operator><name pos:start="53:44" pos:end="53:58">default_backend</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="67:40"><expr pos:start="61:9" pos:end="67:39"><call pos:start="61:9" pos:end="67:39"><name pos:start="61:9" pos:end="61:33">object_property_add_child</name><argument_list pos:start="61:34" pos:end="67:39">(<argument pos:start="61:35" pos:end="61:45"><expr pos:start="61:35" pos:end="61:45"><call pos:start="61:35" pos:end="61:45"><name pos:start="61:35" pos:end="61:40">OBJECT</name><argument_list pos:start="61:41" pos:end="61:45">(<argument pos:start="61:42" pos:end="61:44"><expr pos:start="61:42" pos:end="61:44"><name pos:start="61:42" pos:end="61:44">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="63:35" pos:end="63:51"><expr pos:start="63:35" pos:end="63:51"><literal type="string" pos:start="63:35" pos:end="63:51">"default-backend"</literal></expr></argument>,

                                  <argument pos:start="65:35" pos:end="65:68"><expr pos:start="65:35" pos:end="65:68"><call pos:start="65:35" pos:end="65:68"><name pos:start="65:35" pos:end="65:40">OBJECT</name><argument_list pos:start="65:41" pos:end="65:68">(<argument pos:start="65:42" pos:end="65:67"><expr pos:start="65:42" pos:end="65:67"><name pos:start="65:42" pos:end="65:67"><name pos:start="65:42" pos:end="65:45">vrng</name><operator pos:start="65:46" pos:end="65:47">-&gt;</operator><name pos:start="65:48" pos:end="65:51">conf</name><operator pos:start="65:52" pos:end="65:52">.</operator><name pos:start="65:53" pos:end="65:67">default_backend</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="67:35" pos:end="67:38"><expr pos:start="67:35" pos:end="67:38"><name pos:start="67:35" pos:end="67:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="71:9" pos:end="71:78">/* The child property took a reference, we can safely drop ours now */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:57"><expr pos:start="73:9" pos:end="73:56"><call pos:start="73:9" pos:end="73:56"><name pos:start="73:9" pos:end="73:20">object_unref</name><argument_list pos:start="73:21" pos:end="73:56">(<argument pos:start="73:22" pos:end="73:55"><expr pos:start="73:22" pos:end="73:55"><call pos:start="73:22" pos:end="73:55"><name pos:start="73:22" pos:end="73:27">OBJECT</name><argument_list pos:start="73:28" pos:end="73:55">(<argument pos:start="73:29" pos:end="73:54"><expr pos:start="73:29" pos:end="73:54"><name pos:start="73:29" pos:end="73:54"><name pos:start="73:29" pos:end="73:32">vrng</name><operator pos:start="73:33" pos:end="73:34">-&gt;</operator><name pos:start="73:35" pos:end="73:38">conf</name><operator pos:start="73:39" pos:end="73:39">.</operator><name pos:start="73:40" pos:end="73:54">default_backend</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="77:9" pos:end="81:46"><expr pos:start="77:9" pos:end="81:45"><call pos:start="77:9" pos:end="81:45"><name pos:start="77:9" pos:end="77:32">object_property_set_link</name><argument_list pos:start="77:33" pos:end="81:45">(<argument pos:start="77:34" pos:end="77:44"><expr pos:start="77:34" pos:end="77:44"><call pos:start="77:34" pos:end="77:44"><name pos:start="77:34" pos:end="77:39">OBJECT</name><argument_list pos:start="77:40" pos:end="77:44">(<argument pos:start="77:41" pos:end="77:43"><expr pos:start="77:41" pos:end="77:43"><name pos:start="77:41" pos:end="77:43">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="79:34" pos:end="79:67"><expr pos:start="79:34" pos:end="79:67"><call pos:start="79:34" pos:end="79:67"><name pos:start="79:34" pos:end="79:39">OBJECT</name><argument_list pos:start="79:40" pos:end="79:67">(<argument pos:start="79:41" pos:end="79:66"><expr pos:start="79:41" pos:end="79:66"><name pos:start="79:41" pos:end="79:66"><name pos:start="79:41" pos:end="79:44">vrng</name><operator pos:start="79:45" pos:end="79:46">-&gt;</operator><name pos:start="79:47" pos:end="79:50">conf</name><operator pos:start="79:51" pos:end="79:51">.</operator><name pos:start="79:52" pos:end="79:66">default_backend</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="81:34" pos:end="81:38"><expr pos:start="81:34" pos:end="81:38"><literal type="string" pos:start="81:34" pos:end="81:38">"rng"</literal></expr></argument>, <argument pos:start="81:41" pos:end="81:44"><expr pos:start="81:41" pos:end="81:44"><name pos:start="81:41" pos:end="81:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:31"><expr pos:start="87:5" pos:end="87:30"><name pos:start="87:5" pos:end="87:13"><name pos:start="87:5" pos:end="87:8">vrng</name><operator pos:start="87:9" pos:end="87:10">-&gt;</operator><name pos:start="87:11" pos:end="87:13">rng</name></name> <operator pos:start="87:15" pos:end="87:15">=</operator> <name pos:start="87:17" pos:end="87:30"><name pos:start="87:17" pos:end="87:20">vrng</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:26">conf</name><operator pos:start="87:27" pos:end="87:27">.</operator><name pos:start="87:28" pos:end="87:30">rng</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:26">(<expr pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:12">vrng</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:17">rng</name></name> <operator pos:start="89:19" pos:end="89:20">==</operator> <name pos:start="89:22" pos:end="89:25">NULL</name></expr>)</condition> <block pos:start="89:28" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:15">

        <expr_stmt pos:start="91:9" pos:end="91:67"><expr pos:start="91:9" pos:end="91:66"><call pos:start="91:9" pos:end="91:66"><name pos:start="91:9" pos:end="91:18">error_setg</name><argument_list pos:start="91:19" pos:end="91:66">(<argument pos:start="91:20" pos:end="91:23"><expr pos:start="91:20" pos:end="91:23"><name pos:start="91:20" pos:end="91:23">errp</name></expr></argument>, <argument pos:start="91:26" pos:end="91:65"><expr pos:start="91:26" pos:end="91:65"><literal type="string" pos:start="91:26" pos:end="91:65">"'rng' parameter expects a valid object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:54"><expr pos:start="99:5" pos:end="99:53"><call pos:start="99:5" pos:end="99:53"><name pos:start="99:5" pos:end="99:15">virtio_init</name><argument_list pos:start="99:16" pos:end="99:53">(<argument pos:start="99:17" pos:end="99:20"><expr pos:start="99:17" pos:end="99:20"><name pos:start="99:17" pos:end="99:20">vdev</name></expr></argument>, <argument pos:start="99:23" pos:end="99:34"><expr pos:start="99:23" pos:end="99:34"><literal type="string" pos:start="99:23" pos:end="99:34">"virtio-rng"</literal></expr></argument>, <argument pos:start="99:37" pos:end="99:49"><expr pos:start="99:37" pos:end="99:49"><name pos:start="99:37" pos:end="99:49">VIRTIO_ID_RNG</name></expr></argument>, <argument pos:start="99:52" pos:end="99:52"><expr pos:start="99:52" pos:end="99:52"><literal type="number" pos:start="99:52" pos:end="99:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:55"><expr pos:start="103:5" pos:end="103:54"><name pos:start="103:5" pos:end="103:12"><name pos:start="103:5" pos:end="103:8">vrng</name><operator pos:start="103:9" pos:end="103:10">-&gt;</operator><name pos:start="103:11" pos:end="103:12">vq</name></name> <operator pos:start="103:14" pos:end="103:14">=</operator> <call pos:start="103:16" pos:end="103:54"><name pos:start="103:16" pos:end="103:31">virtio_add_queue</name><argument_list pos:start="103:32" pos:end="103:54">(<argument pos:start="103:33" pos:end="103:36"><expr pos:start="103:33" pos:end="103:36"><name pos:start="103:33" pos:end="103:36">vdev</name></expr></argument>, <argument pos:start="103:39" pos:end="103:39"><expr pos:start="103:39" pos:end="103:39"><literal type="number" pos:start="103:39" pos:end="103:39">8</literal></expr></argument>, <argument pos:start="103:42" pos:end="103:53"><expr pos:start="103:42" pos:end="103:53"><name pos:start="103:42" pos:end="103:53">handle_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:49"><expr pos:start="105:5" pos:end="105:48"><name pos:start="105:5" pos:end="105:25"><name pos:start="105:5" pos:end="105:8">vrng</name><operator pos:start="105:9" pos:end="105:10">-&gt;</operator><name pos:start="105:11" pos:end="105:25">quota_remaining</name></name> <operator pos:start="105:27" pos:end="105:27">=</operator> <name pos:start="105:29" pos:end="105:48"><name pos:start="105:29" pos:end="105:32">vrng</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:38">conf</name><operator pos:start="105:39" pos:end="105:39">.</operator><name pos:start="105:40" pos:end="105:48">max_bytes</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="111:71"><expr pos:start="109:5" pos:end="111:70"><name pos:start="109:5" pos:end="109:26"><name pos:start="109:5" pos:end="109:8">vrng</name><operator pos:start="109:9" pos:end="109:10">-&gt;</operator><name pos:start="109:11" pos:end="109:26">rate_limit_timer</name></name> <operator pos:start="109:28" pos:end="109:28">=</operator> <call pos:start="109:30" pos:end="111:70"><name pos:start="109:30" pos:end="109:41">timer_new_ms</name><argument_list pos:start="109:42" pos:end="111:70">(<argument pos:start="109:43" pos:end="109:60"><expr pos:start="109:43" pos:end="109:60"><name pos:start="109:43" pos:end="109:60">QEMU_CLOCK_VIRTUAL</name></expr></argument>,

                                               <argument pos:start="111:48" pos:end="111:63"><expr pos:start="111:48" pos:end="111:63"><name pos:start="111:48" pos:end="111:63">check_rate_limit</name></expr></argument>, <argument pos:start="111:66" pos:end="111:69"><expr pos:start="111:66" pos:end="111:69"><name pos:start="111:66" pos:end="111:69">vrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="117:81"><expr pos:start="115:5" pos:end="117:80"><call pos:start="115:5" pos:end="117:80"><name pos:start="115:5" pos:end="115:13">timer_mod</name><argument_list pos:start="115:14" pos:end="117:80">(<argument pos:start="115:15" pos:end="115:36"><expr pos:start="115:15" pos:end="115:36"><name pos:start="115:15" pos:end="115:36"><name pos:start="115:15" pos:end="115:18">vrng</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:36">rate_limit_timer</name></name></expr></argument>,

                   <argument pos:start="117:20" pos:end="117:79"><expr pos:start="117:20" pos:end="117:79"><call pos:start="117:20" pos:end="117:56"><name pos:start="117:20" pos:end="117:36">qemu_clock_get_ms</name><argument_list pos:start="117:37" pos:end="117:56">(<argument pos:start="117:38" pos:end="117:55"><expr pos:start="117:38" pos:end="117:55"><name pos:start="117:38" pos:end="117:55">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call> <operator pos:start="117:58" pos:end="117:58">+</operator> <name pos:start="117:60" pos:end="117:79"><name pos:start="117:60" pos:end="117:63">vrng</name><operator pos:start="117:64" pos:end="117:65">-&gt;</operator><name pos:start="117:66" pos:end="117:69">conf</name><operator pos:start="117:70" pos:end="117:70">.</operator><name pos:start="117:71" pos:end="117:79">period_ms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="123:43"><expr pos:start="121:5" pos:end="123:42"><call pos:start="121:5" pos:end="123:42"><name pos:start="121:5" pos:end="121:19">register_savevm</name><argument_list pos:start="121:20" pos:end="123:42">(<argument pos:start="121:21" pos:end="121:23"><expr pos:start="121:21" pos:end="121:23"><name pos:start="121:21" pos:end="121:23">dev</name></expr></argument>, <argument pos:start="121:26" pos:end="121:37"><expr pos:start="121:26" pos:end="121:37"><literal type="string" pos:start="121:26" pos:end="121:37">"virtio-rng"</literal></expr></argument>, <argument pos:start="121:40" pos:end="121:41"><expr pos:start="121:40" pos:end="121:41"><operator pos:start="121:40" pos:end="121:40">-</operator><literal type="number" pos:start="121:41" pos:end="121:41">1</literal></expr></argument>, <argument pos:start="121:44" pos:end="121:44"><expr pos:start="121:44" pos:end="121:44"><literal type="number" pos:start="121:44" pos:end="121:44">1</literal></expr></argument>, <argument pos:start="121:47" pos:end="121:61"><expr pos:start="121:47" pos:end="121:61"><name pos:start="121:47" pos:end="121:61">virtio_rng_save</name></expr></argument>,

                    <argument pos:start="123:21" pos:end="123:35"><expr pos:start="123:21" pos:end="123:35"><name pos:start="123:21" pos:end="123:35">virtio_rng_load</name></expr></argument>, <argument pos:start="123:38" pos:end="123:41"><expr pos:start="123:38" pos:end="123:41"><name pos:start="123:38" pos:end="123:41">vrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
