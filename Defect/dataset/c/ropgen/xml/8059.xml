<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8059.c" pos:tabs="8"><macro pos:start="1:1" pos:end="9:39"><name pos:start="1:1" pos:end="1:14">print_insn_arg</name> <argument_list pos:start="1:16" pos:end="9:39">(<argument pos:start="1:17" pos:end="1:29">const char *d</argument>,

		<argument pos:start="3:17" pos:end="3:37">unsigned char *buffer</argument>,

		<argument pos:start="5:17" pos:end="5:33">unsigned char *p0</argument>,

		<argument pos:start="7:17" pos:end="7:28">bfd_vma addr</argument>,

		<argument pos:start="9:17" pos:end="9:38">disassemble_info *info</argument>)</argument_list></macro>

<block pos:start="11:1" pos:end="1259:1">{<block_content pos:start="13:3" pos:end="1257:16">

  <decl_stmt pos:start="13:3" pos:end="13:14"><decl pos:start="13:3" pos:end="13:13"><type pos:start="13:3" pos:end="13:5"><name pos:start="13:3" pos:end="13:5">int</name></type> <name pos:start="13:7" pos:end="13:9">val</name> <init pos:start="13:11" pos:end="13:13">= <expr pos:start="13:13" pos:end="13:13"><literal type="number" pos:start="13:13" pos:end="13:13">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="15:3" pos:end="15:19"><decl pos:start="15:3" pos:end="15:18"><type pos:start="15:3" pos:end="15:5"><name pos:start="15:3" pos:end="15:5">int</name></type> <name pos:start="15:7" pos:end="15:11">place</name> <init pos:start="15:13" pos:end="15:18">= <expr pos:start="15:15" pos:end="15:18"><name pos:start="15:15" pos:end="15:18"><name pos:start="15:15" pos:end="15:15">d</name><index pos:start="15:16" pos:end="15:18">[<expr pos:start="15:17" pos:end="15:17"><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="17:3" pos:end="17:24"><decl pos:start="17:3" pos:end="17:23"><type pos:start="17:3" pos:end="17:17"><name pos:start="17:3" pos:end="17:10">unsigned</name> <name pos:start="17:12" pos:end="17:15">char</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:18">p</name> <init pos:start="17:20" pos:end="17:23">= <expr pos:start="17:22" pos:end="17:23"><name pos:start="17:22" pos:end="17:23">p0</name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="19:3" pos:end="19:12"><decl pos:start="19:3" pos:end="19:11"><type pos:start="19:3" pos:end="19:5"><name pos:start="19:3" pos:end="19:5">int</name></type> <name pos:start="19:7" pos:end="19:11">regno</name></decl>;</decl_stmt>

  <decl_stmt pos:start="21:3" pos:end="21:22"><decl pos:start="21:3" pos:end="21:21"><type pos:start="21:3" pos:end="21:14"><specifier pos:start="21:3" pos:end="21:7">const</specifier> <name pos:start="21:9" pos:end="21:12">char</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:21">regname</name></decl>;</decl_stmt>

  <decl_stmt pos:start="23:3" pos:end="23:20"><decl pos:start="23:3" pos:end="23:19"><type pos:start="23:3" pos:end="23:17"><name pos:start="23:3" pos:end="23:10">unsigned</name> <name pos:start="23:12" pos:end="23:15">char</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:19">p1</name></decl>;</decl_stmt>

  <decl_stmt pos:start="25:3" pos:end="25:15"><decl pos:start="25:3" pos:end="25:14"><type pos:start="25:3" pos:end="25:8"><name pos:start="25:3" pos:end="25:8">double</name></type> <name pos:start="25:10" pos:end="25:14">flval</name></decl>;</decl_stmt>

  <decl_stmt pos:start="27:3" pos:end="27:12"><decl pos:start="27:3" pos:end="27:11"><type pos:start="27:3" pos:end="27:5"><name pos:start="27:3" pos:end="27:5">int</name></type> <name pos:start="27:7" pos:end="27:11">flt_p</name></decl>;</decl_stmt>

  <decl_stmt pos:start="29:3" pos:end="29:22"><decl pos:start="29:3" pos:end="29:21"><type pos:start="29:3" pos:end="29:16"><name pos:start="29:3" pos:end="29:16">bfd_signed_vma</name></type> <name pos:start="29:18" pos:end="29:21">disp</name></decl>;</decl_stmt>

  <decl_stmt pos:start="31:3" pos:end="31:20"><decl pos:start="31:3" pos:end="31:19"><type pos:start="31:3" pos:end="31:14"><name pos:start="31:3" pos:end="31:10">unsigned</name> <name pos:start="31:12" pos:end="31:14">int</name></type> <name pos:start="31:16" pos:end="31:19">uval</name></decl>;</decl_stmt>



  <switch pos:start="35:3" pos:end="1253:5">switch <condition pos:start="35:10" pos:end="35:13">(<expr pos:start="35:11" pos:end="35:12"><operator pos:start="35:11" pos:end="35:11">*</operator><name pos:start="35:12" pos:end="35:12">d</name></expr>)</condition>

    <block pos:start="37:5" pos:end="1253:5">{<block_content pos:start="39:5" pos:end="1251:16">

    <case pos:start="39:5" pos:end="39:13">case <expr pos:start="39:10" pos:end="39:12"><literal type="char" pos:start="39:10" pos:end="39:12">'c'</literal></expr>:</case>		<comment type="block" pos:start="39:25" pos:end="39:48">/* Cache identifier.  */</comment>

      <block pos:start="41:7" pos:end="51:7">{<block_content pos:start="43:9" pos:end="49:14">

        <decl_stmt pos:start="43:9" pos:end="43:79"><decl pos:start="43:9" pos:end="43:78"><type pos:start="43:9" pos:end="43:32"><specifier pos:start="43:9" pos:end="43:14">static</specifier> <specifier pos:start="43:16" pos:end="43:20">const</specifier> <name pos:start="43:22" pos:end="43:25">char</name> <modifier pos:start="43:27" pos:end="43:27">*</modifier><specifier pos:start="43:28" pos:end="43:32">const</specifier></type> <name pos:start="43:34" pos:end="43:49"><name pos:start="43:34" pos:end="43:47">cacheFieldName</name><index pos:start="43:48" pos:end="43:49">[]</index></name> <init pos:start="43:51" pos:end="43:78">= <expr pos:start="43:53" pos:end="43:78"><block pos:start="43:53" pos:end="43:78">{ <expr pos:start="43:55" pos:end="43:58"><literal type="string" pos:start="43:55" pos:end="43:58">"nc"</literal></expr>, <expr pos:start="43:61" pos:end="43:64"><literal type="string" pos:start="43:61" pos:end="43:64">"dc"</literal></expr>, <expr pos:start="43:67" pos:end="43:70"><literal type="string" pos:start="43:67" pos:end="43:70">"ic"</literal></expr>, <expr pos:start="43:73" pos:end="43:76"><literal type="string" pos:start="43:73" pos:end="43:76">"bc"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:49"><expr pos:start="45:9" pos:end="45:48"><name pos:start="45:9" pos:end="45:11">val</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:48"><name pos:start="45:15" pos:end="45:23">fetch_arg</name> <argument_list pos:start="45:25" pos:end="45:48">(<argument pos:start="45:26" pos:end="45:31"><expr pos:start="45:26" pos:end="45:31"><name pos:start="45:26" pos:end="45:31">buffer</name></expr></argument>, <argument pos:start="45:34" pos:end="45:38"><expr pos:start="45:34" pos:end="45:38"><name pos:start="45:34" pos:end="45:38">place</name></expr></argument>, <argument pos:start="45:41" pos:end="45:41"><expr pos:start="45:41" pos:end="45:41"><literal type="number" pos:start="45:41" pos:end="45:41">2</literal></expr></argument>, <argument pos:start="45:44" pos:end="45:47"><expr pos:start="45:44" pos:end="45:47"><name pos:start="45:44" pos:end="45:47">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:66"><expr pos:start="47:9" pos:end="47:65"><call pos:start="47:9" pos:end="47:65">(<modifier pos:start="47:10" pos:end="47:10">*</modifier><name pos:start="47:11" pos:end="47:28"><name pos:start="47:11" pos:end="47:14">info</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:28">fprintf_func</name></name>) <argument_list pos:start="47:31" pos:end="47:65">(<argument pos:start="47:32" pos:end="47:43"><expr pos:start="47:32" pos:end="47:43"><name pos:start="47:32" pos:end="47:43"><name pos:start="47:32" pos:end="47:35">info</name><operator pos:start="47:36" pos:end="47:37">-&gt;</operator><name pos:start="47:38" pos:end="47:43">stream</name></name></expr></argument>, <argument pos:start="47:46" pos:end="47:64"><expr pos:start="47:46" pos:end="47:64"><name pos:start="47:46" pos:end="47:64"><name pos:start="47:46" pos:end="47:59">cacheFieldName</name><index pos:start="47:60" pos:end="47:64">[<expr pos:start="47:61" pos:end="47:63"><name pos:start="47:61" pos:end="47:63">val</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

      </block_content>}</block>



    <case pos:start="55:5" pos:end="55:13">case <expr pos:start="55:10" pos:end="55:12"><literal type="char" pos:start="55:10" pos:end="55:12">'a'</literal></expr>:</case>		<comment type="block" pos:start="55:25" pos:end="55:76">/* Address register indirect only. Cf. case '+'.  */</comment>

      <block pos:start="57:7" pos:end="69:7">{<block_content pos:start="59:9" pos:end="67:14">

        <expr_stmt pos:start="59:9" pos:end="65:62"><expr pos:start="59:9" pos:end="65:61"><call pos:start="59:9" pos:end="65:61">(<modifier pos:start="59:10" pos:end="59:10">*</modifier><name pos:start="59:11" pos:end="59:28"><name pos:start="59:11" pos:end="59:14">info</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:28">fprintf_func</name></name>)

	  <argument_list pos:start="61:11" pos:end="65:61">(<argument pos:start="61:12" pos:end="61:23"><expr pos:start="61:12" pos:end="61:23"><name pos:start="61:12" pos:end="61:23"><name pos:start="61:12" pos:end="61:15">info</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:23">stream</name></name></expr></argument>,

	   <argument pos:start="63:12" pos:end="63:16"><expr pos:start="63:12" pos:end="63:16"><literal type="string" pos:start="63:12" pos:end="63:16">"%s@"</literal></expr></argument>,

	   <argument pos:start="65:12" pos:end="65:60"><expr pos:start="65:12" pos:end="65:60"><name pos:start="65:12" pos:end="65:60"><name pos:start="65:12" pos:end="65:20">reg_names</name><index pos:start="65:21" pos:end="65:60">[<expr pos:start="65:22" pos:end="65:59"><call pos:start="65:22" pos:end="65:55"><name pos:start="65:22" pos:end="65:30">fetch_arg</name> <argument_list pos:start="65:32" pos:end="65:55">(<argument pos:start="65:33" pos:end="65:38"><expr pos:start="65:33" pos:end="65:38"><name pos:start="65:33" pos:end="65:38">buffer</name></expr></argument>, <argument pos:start="65:41" pos:end="65:45"><expr pos:start="65:41" pos:end="65:45"><name pos:start="65:41" pos:end="65:45">place</name></expr></argument>, <argument pos:start="65:48" pos:end="65:48"><expr pos:start="65:48" pos:end="65:48"><literal type="number" pos:start="65:48" pos:end="65:48">3</literal></expr></argument>, <argument pos:start="65:51" pos:end="65:54"><expr pos:start="65:51" pos:end="65:54"><name pos:start="65:51" pos:end="65:54">info</name></expr></argument>)</argument_list></call> <operator pos:start="65:57" pos:end="65:57">+</operator> <literal type="number" pos:start="65:59" pos:end="65:59">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

      </block_content>}</block>



    <case pos:start="73:5" pos:end="73:13">case <expr pos:start="73:10" pos:end="73:12"><literal type="char" pos:start="73:10" pos:end="73:12">'_'</literal></expr>:</case>		<comment type="block" pos:start="73:25" pos:end="73:66">/* 32-bit absolute address for move16.  */</comment>

      <block pos:start="75:7" pos:end="83:7">{<block_content pos:start="77:9" pos:end="81:14">

        <expr_stmt pos:start="77:9" pos:end="77:29"><expr pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:12">uval</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:28"><name pos:start="77:16" pos:end="77:24">NEXTULONG</name> <argument_list pos:start="77:26" pos:end="77:28">(<argument pos:start="77:27" pos:end="77:27"><expr pos:start="77:27" pos:end="77:27"><name pos:start="77:27" pos:end="77:27">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="79:9" pos:end="79:49"><expr pos:start="79:9" pos:end="79:48"><call pos:start="79:9" pos:end="79:48">(<modifier pos:start="79:10" pos:end="79:10">*</modifier><name pos:start="79:11" pos:end="79:34"><name pos:start="79:11" pos:end="79:14">info</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:34">print_address_func</name></name>) <argument_list pos:start="79:37" pos:end="79:48">(<argument pos:start="79:38" pos:end="79:41"><expr pos:start="79:38" pos:end="79:41"><name pos:start="79:38" pos:end="79:41">uval</name></expr></argument>, <argument pos:start="79:44" pos:end="79:47"><expr pos:start="79:44" pos:end="79:47"><name pos:start="79:44" pos:end="79:47">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

      </block_content>}</block>



    <case pos:start="87:5" pos:end="87:13">case <expr pos:start="87:10" pos:end="87:12"><literal type="char" pos:start="87:10" pos:end="87:12">'C'</literal></expr>:</case>

      <expr_stmt pos:start="89:7" pos:end="89:52"><expr pos:start="89:7" pos:end="89:51"><call pos:start="89:7" pos:end="89:51">(<modifier pos:start="89:8" pos:end="89:8">*</modifier><name pos:start="89:9" pos:end="89:26"><name pos:start="89:9" pos:end="89:12">info</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:26">fprintf_func</name></name>) <argument_list pos:start="89:29" pos:end="89:51">(<argument pos:start="89:30" pos:end="89:41"><expr pos:start="89:30" pos:end="89:41"><name pos:start="89:30" pos:end="89:41"><name pos:start="89:30" pos:end="89:33">info</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:41">stream</name></name></expr></argument>, <argument pos:start="89:44" pos:end="89:50"><expr pos:start="89:44" pos:end="89:50"><literal type="string" pos:start="89:44" pos:end="89:50">"%%ccr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="91:7" pos:end="91:12">break;</break>



    <case pos:start="95:5" pos:end="95:13">case <expr pos:start="95:10" pos:end="95:12"><literal type="char" pos:start="95:10" pos:end="95:12">'S'</literal></expr>:</case>

      <expr_stmt pos:start="97:7" pos:end="97:51"><expr pos:start="97:7" pos:end="97:50"><call pos:start="97:7" pos:end="97:50">(<modifier pos:start="97:8" pos:end="97:8">*</modifier><name pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:12">info</name><operator pos:start="97:13" pos:end="97:14">-&gt;</operator><name pos:start="97:15" pos:end="97:26">fprintf_func</name></name>) <argument_list pos:start="97:29" pos:end="97:50">(<argument pos:start="97:30" pos:end="97:41"><expr pos:start="97:30" pos:end="97:41"><name pos:start="97:30" pos:end="97:41"><name pos:start="97:30" pos:end="97:33">info</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:41">stream</name></name></expr></argument>, <argument pos:start="97:44" pos:end="97:49"><expr pos:start="97:44" pos:end="97:49"><literal type="string" pos:start="97:44" pos:end="97:49">"%%sr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="99:7" pos:end="99:12">break;</break>



    <case pos:start="103:5" pos:end="103:13">case <expr pos:start="103:10" pos:end="103:12"><literal type="char" pos:start="103:10" pos:end="103:12">'U'</literal></expr>:</case>

      <expr_stmt pos:start="105:7" pos:end="105:52"><expr pos:start="105:7" pos:end="105:51"><call pos:start="105:7" pos:end="105:51">(<modifier pos:start="105:8" pos:end="105:8">*</modifier><name pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:12">info</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:26">fprintf_func</name></name>) <argument_list pos:start="105:29" pos:end="105:51">(<argument pos:start="105:30" pos:end="105:41"><expr pos:start="105:30" pos:end="105:41"><name pos:start="105:30" pos:end="105:41"><name pos:start="105:30" pos:end="105:33">info</name><operator pos:start="105:34" pos:end="105:35">-&gt;</operator><name pos:start="105:36" pos:end="105:41">stream</name></name></expr></argument>, <argument pos:start="105:44" pos:end="105:50"><expr pos:start="105:44" pos:end="105:50"><literal type="string" pos:start="105:44" pos:end="105:50">"%%usp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="107:7" pos:end="107:12">break;</break>



    <case pos:start="111:5" pos:end="111:13">case <expr pos:start="111:10" pos:end="111:12"><literal type="char" pos:start="111:10" pos:end="111:12">'E'</literal></expr>:</case>

      <expr_stmt pos:start="113:7" pos:end="113:52"><expr pos:start="113:7" pos:end="113:51"><call pos:start="113:7" pos:end="113:51">(<modifier pos:start="113:8" pos:end="113:8">*</modifier><name pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:12">info</name><operator pos:start="113:13" pos:end="113:14">-&gt;</operator><name pos:start="113:15" pos:end="113:26">fprintf_func</name></name>) <argument_list pos:start="113:29" pos:end="113:51">(<argument pos:start="113:30" pos:end="113:41"><expr pos:start="113:30" pos:end="113:41"><name pos:start="113:30" pos:end="113:41"><name pos:start="113:30" pos:end="113:33">info</name><operator pos:start="113:34" pos:end="113:35">-&gt;</operator><name pos:start="113:36" pos:end="113:41">stream</name></name></expr></argument>, <argument pos:start="113:44" pos:end="113:50"><expr pos:start="113:44" pos:end="113:50"><literal type="string" pos:start="113:44" pos:end="113:50">"%%acc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="115:7" pos:end="115:12">break;</break>



    <case pos:start="119:5" pos:end="119:13">case <expr pos:start="119:10" pos:end="119:12"><literal type="char" pos:start="119:10" pos:end="119:12">'G'</literal></expr>:</case>

      <expr_stmt pos:start="121:7" pos:end="121:54"><expr pos:start="121:7" pos:end="121:53"><call pos:start="121:7" pos:end="121:53">(<modifier pos:start="121:8" pos:end="121:8">*</modifier><name pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:12">info</name><operator pos:start="121:13" pos:end="121:14">-&gt;</operator><name pos:start="121:15" pos:end="121:26">fprintf_func</name></name>) <argument_list pos:start="121:29" pos:end="121:53">(<argument pos:start="121:30" pos:end="121:41"><expr pos:start="121:30" pos:end="121:41"><name pos:start="121:30" pos:end="121:41"><name pos:start="121:30" pos:end="121:33">info</name><operator pos:start="121:34" pos:end="121:35">-&gt;</operator><name pos:start="121:36" pos:end="121:41">stream</name></name></expr></argument>, <argument pos:start="121:44" pos:end="121:52"><expr pos:start="121:44" pos:end="121:52"><literal type="string" pos:start="121:44" pos:end="121:52">"%%macsr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="123:7" pos:end="123:12">break;</break>



    <case pos:start="127:5" pos:end="127:13">case <expr pos:start="127:10" pos:end="127:12"><literal type="char" pos:start="127:10" pos:end="127:12">'H'</literal></expr>:</case>

      <expr_stmt pos:start="129:7" pos:end="129:53"><expr pos:start="129:7" pos:end="129:52"><call pos:start="129:7" pos:end="129:52">(<modifier pos:start="129:8" pos:end="129:8">*</modifier><name pos:start="129:9" pos:end="129:26"><name pos:start="129:9" pos:end="129:12">info</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:26">fprintf_func</name></name>) <argument_list pos:start="129:29" pos:end="129:52">(<argument pos:start="129:30" pos:end="129:41"><expr pos:start="129:30" pos:end="129:41"><name pos:start="129:30" pos:end="129:41"><name pos:start="129:30" pos:end="129:33">info</name><operator pos:start="129:34" pos:end="129:35">-&gt;</operator><name pos:start="129:36" pos:end="129:41">stream</name></name></expr></argument>, <argument pos:start="129:44" pos:end="129:51"><expr pos:start="129:44" pos:end="129:51"><literal type="string" pos:start="129:44" pos:end="129:51">"%%mask"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="131:7" pos:end="131:12">break;</break>



    <case pos:start="135:5" pos:end="135:13">case <expr pos:start="135:10" pos:end="135:12"><literal type="char" pos:start="135:10" pos:end="135:12">'J'</literal></expr>:</case>

      <block pos:start="137:7" pos:end="189:7">{<block_content pos:start="145:9" pos:end="187:58">

	<comment type="block" pos:start="139:9" pos:end="143:78">/* FIXME: There's a problem here, different m68k processors call the

	   same address different names. This table can't get it right

	   because it doesn't know which processor it's disassembling for.  */</comment>

	<struct pos:start="145:9" pos:end="167:64"><specifier pos:start="145:9" pos:end="145:14">static</specifier> <specifier pos:start="145:16" pos:end="145:20">const</specifier> struct <block pos:start="145:29" pos:end="145:60">{ <decl_stmt pos:start="145:31" pos:end="145:47"><decl pos:start="145:31" pos:end="145:46"><type pos:start="145:31" pos:end="145:42"><specifier pos:start="145:31" pos:end="145:35">const</specifier> <name pos:start="145:37" pos:end="145:40">char</name> <modifier pos:start="145:42" pos:end="145:42">*</modifier></type><name pos:start="145:43" pos:end="145:46">name</name></decl>;</decl_stmt> <decl_stmt pos:start="145:49" pos:end="145:58"><decl pos:start="145:49" pos:end="145:57"><type pos:start="145:49" pos:end="145:51"><name pos:start="145:49" pos:end="145:51">int</name></type> <name pos:start="145:53" pos:end="145:57">value</name></decl>;</decl_stmt> }</block> <decl pos:start="145:62" pos:end="167:63"><name pos:start="145:62" pos:end="145:68"><name pos:start="145:62" pos:end="145:66">names</name><index pos:start="145:67" pos:end="145:68">[]</index></name>

	  <init pos:start="147:11" pos:end="167:63">= <expr pos:start="147:13" pos:end="167:63"><block pos:start="147:13" pos:end="167:63">{<expr pos:start="147:14" pos:end="147:28"><block pos:start="147:14" pos:end="147:28">{<expr pos:start="147:15" pos:end="147:20"><literal type="string" pos:start="147:15" pos:end="147:20">"%sfc"</literal></expr>, <expr pos:start="147:23" pos:end="147:27"><literal type="number" pos:start="147:23" pos:end="147:27">0x000</literal></expr>}</block></expr>, <expr pos:start="147:31" pos:end="147:45"><block pos:start="147:31" pos:end="147:45">{<expr pos:start="147:32" pos:end="147:37"><literal type="string" pos:start="147:32" pos:end="147:37">"%dfc"</literal></expr>, <expr pos:start="147:40" pos:end="147:44"><literal type="number" pos:start="147:40" pos:end="147:44">0x001</literal></expr>}</block></expr>, <expr pos:start="147:48" pos:end="147:63"><block pos:start="147:48" pos:end="147:63">{<expr pos:start="147:49" pos:end="147:55"><literal type="string" pos:start="147:49" pos:end="147:55">"%cacr"</literal></expr>, <expr pos:start="147:58" pos:end="147:62"><literal type="number" pos:start="147:58" pos:end="147:62">0x002</literal></expr>}</block></expr>,

	     <expr pos:start="149:14" pos:end="149:28"><block pos:start="149:14" pos:end="149:28">{<expr pos:start="149:15" pos:end="149:19"><literal type="string" pos:start="149:15" pos:end="149:19">"%tc"</literal></expr>,  <expr pos:start="149:23" pos:end="149:27"><literal type="number" pos:start="149:23" pos:end="149:27">0x003</literal></expr>}</block></expr>, <expr pos:start="149:31" pos:end="149:45"><block pos:start="149:31" pos:end="149:45">{<expr pos:start="149:32" pos:end="149:38"><literal type="string" pos:start="149:32" pos:end="149:38">"%itt0"</literal></expr>,<expr pos:start="149:40" pos:end="149:44"><literal type="number" pos:start="149:40" pos:end="149:44">0x004</literal></expr>}</block></expr>, <expr pos:start="149:48" pos:end="149:63"><block pos:start="149:48" pos:end="149:63">{<expr pos:start="149:49" pos:end="149:55"><literal type="string" pos:start="149:49" pos:end="149:55">"%itt1"</literal></expr>, <expr pos:start="149:58" pos:end="149:62"><literal type="number" pos:start="149:58" pos:end="149:62">0x005</literal></expr>}</block></expr>,

             <expr pos:start="151:14" pos:end="151:28"><block pos:start="151:14" pos:end="151:28">{<expr pos:start="151:15" pos:end="151:21"><literal type="string" pos:start="151:15" pos:end="151:21">"%dtt0"</literal></expr>,<expr pos:start="151:23" pos:end="151:27"><literal type="number" pos:start="151:23" pos:end="151:27">0x006</literal></expr>}</block></expr>, <expr pos:start="151:31" pos:end="151:45"><block pos:start="151:31" pos:end="151:45">{<expr pos:start="151:32" pos:end="151:38"><literal type="string" pos:start="151:32" pos:end="151:38">"%dtt1"</literal></expr>,<expr pos:start="151:40" pos:end="151:44"><literal type="number" pos:start="151:40" pos:end="151:44">0x007</literal></expr>}</block></expr>, <expr pos:start="151:48" pos:end="151:63"><block pos:start="151:48" pos:end="151:63">{<expr pos:start="151:49" pos:end="151:56"><literal type="string" pos:start="151:49" pos:end="151:56">"%buscr"</literal></expr>,<expr pos:start="151:58" pos:end="151:62"><literal type="number" pos:start="151:58" pos:end="151:62">0x008</literal></expr>}</block></expr>,

	     <expr pos:start="153:14" pos:end="153:28"><block pos:start="153:14" pos:end="153:28">{<expr pos:start="153:15" pos:end="153:20"><literal type="string" pos:start="153:15" pos:end="153:20">"%usp"</literal></expr>, <expr pos:start="153:23" pos:end="153:27"><literal type="number" pos:start="153:23" pos:end="153:27">0x800</literal></expr>}</block></expr>, <expr pos:start="153:31" pos:end="153:45"><block pos:start="153:31" pos:end="153:45">{<expr pos:start="153:32" pos:end="153:37"><literal type="string" pos:start="153:32" pos:end="153:37">"%vbr"</literal></expr>, <expr pos:start="153:40" pos:end="153:44"><literal type="number" pos:start="153:40" pos:end="153:44">0x801</literal></expr>}</block></expr>, <expr pos:start="153:48" pos:end="153:63"><block pos:start="153:48" pos:end="153:63">{<expr pos:start="153:49" pos:end="153:55"><literal type="string" pos:start="153:49" pos:end="153:55">"%caar"</literal></expr>, <expr pos:start="153:58" pos:end="153:62"><literal type="number" pos:start="153:58" pos:end="153:62">0x802</literal></expr>}</block></expr>,

	     <expr pos:start="155:14" pos:end="155:28"><block pos:start="155:14" pos:end="155:28">{<expr pos:start="155:15" pos:end="155:20"><literal type="string" pos:start="155:15" pos:end="155:20">"%msp"</literal></expr>, <expr pos:start="155:23" pos:end="155:27"><literal type="number" pos:start="155:23" pos:end="155:27">0x803</literal></expr>}</block></expr>, <expr pos:start="155:31" pos:end="155:45"><block pos:start="155:31" pos:end="155:45">{<expr pos:start="155:32" pos:end="155:37"><literal type="string" pos:start="155:32" pos:end="155:37">"%isp"</literal></expr>, <expr pos:start="155:40" pos:end="155:44"><literal type="number" pos:start="155:40" pos:end="155:44">0x804</literal></expr>}</block></expr>,

	     <expr pos:start="157:14" pos:end="157:33"><block pos:start="157:14" pos:end="157:33">{<expr pos:start="157:15" pos:end="157:25"><literal type="string" pos:start="157:15" pos:end="157:25">"%flashbar"</literal></expr>, <expr pos:start="157:28" pos:end="157:32"><literal type="number" pos:start="157:28" pos:end="157:32">0xc04</literal></expr>}</block></expr>, <expr pos:start="157:36" pos:end="157:53"><block pos:start="157:36" pos:end="157:53">{<expr pos:start="157:37" pos:end="157:45"><literal type="string" pos:start="157:37" pos:end="157:45">"%rambar"</literal></expr>, <expr pos:start="157:48" pos:end="157:52"><literal type="number" pos:start="157:48" pos:end="157:52">0xc05</literal></expr>}</block></expr>, <comment type="block" pos:start="157:56" pos:end="157:82">/* mcf528x added these.  */</comment>



	     <comment type="block" pos:start="161:14" pos:end="161:73">/* Should we be calling this psr like we do in case 'Y'?  */</comment>

	     <expr pos:start="163:14" pos:end="163:29"><block pos:start="163:14" pos:end="163:29">{<expr pos:start="163:15" pos:end="163:22"><literal type="string" pos:start="163:15" pos:end="163:22">"%mmusr"</literal></expr>,<expr pos:start="163:24" pos:end="163:28"><literal type="number" pos:start="163:24" pos:end="163:28">0x805</literal></expr>}</block></expr>,



             <expr pos:start="167:14" pos:end="167:28"><block pos:start="167:14" pos:end="167:28">{<expr pos:start="167:15" pos:end="167:20"><literal type="string" pos:start="167:15" pos:end="167:20">"%urp"</literal></expr>, <expr pos:start="167:23" pos:end="167:27"><literal type="number" pos:start="167:23" pos:end="167:27">0x806</literal></expr>}</block></expr>, <expr pos:start="167:31" pos:end="167:45"><block pos:start="167:31" pos:end="167:45">{<expr pos:start="167:32" pos:end="167:37"><literal type="string" pos:start="167:32" pos:end="167:37">"%srp"</literal></expr>, <expr pos:start="167:40" pos:end="167:44"><literal type="number" pos:start="167:40" pos:end="167:44">0x807</literal></expr>}</block></expr>, <expr pos:start="167:48" pos:end="167:62"><block pos:start="167:48" pos:end="167:62">{<expr pos:start="167:49" pos:end="167:54"><literal type="string" pos:start="167:49" pos:end="167:54">"%pcr"</literal></expr>, <expr pos:start="167:57" pos:end="167:61"><literal type="number" pos:start="167:57" pos:end="167:61">0x808</literal></expr>}</block></expr>}</block></expr></init></decl>;</struct>



	<expr_stmt pos:start="171:9" pos:end="171:50"><expr pos:start="171:9" pos:end="171:49"><name pos:start="171:9" pos:end="171:11">val</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <call pos:start="171:15" pos:end="171:49"><name pos:start="171:15" pos:end="171:23">fetch_arg</name> <argument_list pos:start="171:25" pos:end="171:49">(<argument pos:start="171:26" pos:end="171:31"><expr pos:start="171:26" pos:end="171:31"><name pos:start="171:26" pos:end="171:31">buffer</name></expr></argument>, <argument pos:start="171:34" pos:end="171:38"><expr pos:start="171:34" pos:end="171:38"><name pos:start="171:34" pos:end="171:38">place</name></expr></argument>, <argument pos:start="171:41" pos:end="171:42"><expr pos:start="171:41" pos:end="171:42"><literal type="number" pos:start="171:41" pos:end="171:42">12</literal></expr></argument>, <argument pos:start="171:45" pos:end="171:48"><expr pos:start="171:45" pos:end="171:48"><name pos:start="171:45" pos:end="171:48">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for pos:start="173:9" pos:end="183:13">for <control pos:start="173:13" pos:end="173:77">(<init pos:start="173:14" pos:end="173:56"><expr pos:start="173:14" pos:end="173:55"><name pos:start="173:14" pos:end="173:18">regno</name> <operator pos:start="173:20" pos:end="173:20">=</operator> <sizeof pos:start="173:22" pos:end="173:33">sizeof <name pos:start="173:29" pos:end="173:33">names</name></sizeof> <operator pos:start="173:35" pos:end="173:35">/</operator> <sizeof pos:start="173:37" pos:end="173:51">sizeof <name pos:start="173:44" pos:end="173:51"><name pos:start="173:44" pos:end="173:48">names</name><index pos:start="173:49" pos:end="173:51">[<expr pos:start="173:50" pos:end="173:50"><literal type="number" pos:start="173:50" pos:end="173:50">0</literal></expr>]</index></name></sizeof> <operator pos:start="173:53" pos:end="173:53">-</operator> <literal type="number" pos:start="173:55" pos:end="173:55">1</literal></expr>;</init> <condition pos:start="173:58" pos:end="173:68"><expr pos:start="173:58" pos:end="173:67"><name pos:start="173:58" pos:end="173:62">regno</name> <operator pos:start="173:64" pos:end="173:65">&gt;=</operator> <literal type="number" pos:start="173:67" pos:end="173:67">0</literal></expr>;</condition> <incr pos:start="173:70" pos:end="173:76"><expr pos:start="173:70" pos:end="173:76"><name pos:start="173:70" pos:end="173:74">regno</name><operator pos:start="173:75" pos:end="173:76">--</operator></expr></incr>)</control><block type="pseudo" pos:start="175:11" pos:end="183:13"><block_content pos:start="175:11" pos:end="183:13">

	  <if_stmt pos:start="175:11" pos:end="183:13"><if pos:start="175:11" pos:end="183:13">if <condition pos:start="175:14" pos:end="175:40">(<expr pos:start="175:15" pos:end="175:39"><name pos:start="175:15" pos:end="175:26"><name pos:start="175:15" pos:end="175:19">names</name><index pos:start="175:20" pos:end="175:26">[<expr pos:start="175:21" pos:end="175:25"><name pos:start="175:21" pos:end="175:25">regno</name></expr>]</index></name><operator pos:start="175:27" pos:end="175:27">.</operator><name pos:start="175:28" pos:end="175:32">value</name> <operator pos:start="175:34" pos:end="175:35">==</operator> <name pos:start="175:37" pos:end="175:39">val</name></expr>)</condition>

	    <block pos:start="177:13" pos:end="183:13">{<block_content pos:start="179:15" pos:end="181:20">

	      <expr_stmt pos:start="179:15" pos:end="179:76"><expr pos:start="179:15" pos:end="179:75"><call pos:start="179:15" pos:end="179:75">(<modifier pos:start="179:16" pos:end="179:16">*</modifier><name pos:start="179:17" pos:end="179:34"><name pos:start="179:17" pos:end="179:20">info</name><operator pos:start="179:21" pos:end="179:22">-&gt;</operator><name pos:start="179:23" pos:end="179:34">fprintf_func</name></name>) <argument_list pos:start="179:37" pos:end="179:75">(<argument pos:start="179:38" pos:end="179:49"><expr pos:start="179:38" pos:end="179:49"><name pos:start="179:38" pos:end="179:49"><name pos:start="179:38" pos:end="179:41">info</name><operator pos:start="179:42" pos:end="179:43">-&gt;</operator><name pos:start="179:44" pos:end="179:49">stream</name></name></expr></argument>, <argument pos:start="179:52" pos:end="179:55"><expr pos:start="179:52" pos:end="179:55"><literal type="string" pos:start="179:52" pos:end="179:55">"%s"</literal></expr></argument>, <argument pos:start="179:58" pos:end="179:74"><expr pos:start="179:58" pos:end="179:74"><name pos:start="179:58" pos:end="179:69"><name pos:start="179:58" pos:end="179:62">names</name><index pos:start="179:63" pos:end="179:69">[<expr pos:start="179:64" pos:end="179:68"><name pos:start="179:64" pos:end="179:68">regno</name></expr>]</index></name><operator pos:start="179:70" pos:end="179:70">.</operator><name pos:start="179:71" pos:end="179:74">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <break pos:start="181:15" pos:end="181:20">break;</break>

	    </block_content>}</block></if></if_stmt></block_content></block></for>

	<if_stmt pos:start="185:9" pos:end="187:58"><if pos:start="185:9" pos:end="187:58">if <condition pos:start="185:12" pos:end="185:22">(<expr pos:start="185:13" pos:end="185:21"><name pos:start="185:13" pos:end="185:17">regno</name> <operator pos:start="185:19" pos:end="185:19">&lt;</operator> <literal type="number" pos:start="185:21" pos:end="185:21">0</literal></expr>)</condition><block type="pseudo" pos:start="187:11" pos:end="187:58"><block_content pos:start="187:11" pos:end="187:58">

	  <expr_stmt pos:start="187:11" pos:end="187:58"><expr pos:start="187:11" pos:end="187:57"><call pos:start="187:11" pos:end="187:57">(<modifier pos:start="187:12" pos:end="187:12">*</modifier><name pos:start="187:13" pos:end="187:30"><name pos:start="187:13" pos:end="187:16">info</name><operator pos:start="187:17" pos:end="187:18">-&gt;</operator><name pos:start="187:19" pos:end="187:30">fprintf_func</name></name>) <argument_list pos:start="187:33" pos:end="187:57">(<argument pos:start="187:34" pos:end="187:45"><expr pos:start="187:34" pos:end="187:45"><name pos:start="187:34" pos:end="187:45"><name pos:start="187:34" pos:end="187:37">info</name><operator pos:start="187:38" pos:end="187:39">-&gt;</operator><name pos:start="187:40" pos:end="187:45">stream</name></name></expr></argument>, <argument pos:start="187:48" pos:end="187:51"><expr pos:start="187:48" pos:end="187:51"><literal type="string" pos:start="187:48" pos:end="187:51">"%d"</literal></expr></argument>, <argument pos:start="187:54" pos:end="187:56"><expr pos:start="187:54" pos:end="187:56"><name pos:start="187:54" pos:end="187:56">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      </block_content>}</block>

      <break pos:start="191:7" pos:end="191:12">break;</break>



    <case pos:start="195:5" pos:end="195:13">case <expr pos:start="195:10" pos:end="195:12"><literal type="char" pos:start="195:10" pos:end="195:12">'Q'</literal></expr>:</case>

      <expr_stmt pos:start="197:7" pos:end="197:47"><expr pos:start="197:7" pos:end="197:46"><name pos:start="197:7" pos:end="197:9">val</name> <operator pos:start="197:11" pos:end="197:11">=</operator> <call pos:start="197:13" pos:end="197:46"><name pos:start="197:13" pos:end="197:21">fetch_arg</name> <argument_list pos:start="197:23" pos:end="197:46">(<argument pos:start="197:24" pos:end="197:29"><expr pos:start="197:24" pos:end="197:29"><name pos:start="197:24" pos:end="197:29">buffer</name></expr></argument>, <argument pos:start="197:32" pos:end="197:36"><expr pos:start="197:32" pos:end="197:36"><name pos:start="197:32" pos:end="197:36">place</name></expr></argument>, <argument pos:start="197:39" pos:end="197:39"><expr pos:start="197:39" pos:end="197:39"><literal type="number" pos:start="197:39" pos:end="197:39">3</literal></expr></argument>, <argument pos:start="197:42" pos:end="197:45"><expr pos:start="197:42" pos:end="197:45"><name pos:start="197:42" pos:end="197:45">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block" pos:start="199:7" pos:end="199:57">/* 0 means 8, except for the bkpt instruction... */</comment>

      <if_stmt pos:start="201:7" pos:end="203:16"><if pos:start="201:7" pos:end="203:16">if <condition pos:start="201:10" pos:end="201:34">(<expr pos:start="201:11" pos:end="201:33"><name pos:start="201:11" pos:end="201:13">val</name> <operator pos:start="201:15" pos:end="201:16">==</operator> <literal type="number" pos:start="201:18" pos:end="201:18">0</literal> <operator pos:start="201:20" pos:end="201:21">&amp;&amp;</operator> <name pos:start="201:23" pos:end="201:26"><name pos:start="201:23" pos:end="201:23">d</name><index pos:start="201:24" pos:end="201:26">[<expr pos:start="201:25" pos:end="201:25"><literal type="number" pos:start="201:25" pos:end="201:25">1</literal></expr>]</index></name> <operator pos:start="201:28" pos:end="201:29">!=</operator> <literal type="char" pos:start="201:31" pos:end="201:33">'s'</literal></expr>)</condition><block type="pseudo" pos:start="203:9" pos:end="203:16"><block_content pos:start="203:9" pos:end="203:16">

	<expr_stmt pos:start="203:9" pos:end="203:16"><expr pos:start="203:9" pos:end="203:15"><name pos:start="203:9" pos:end="203:11">val</name> <operator pos:start="203:13" pos:end="203:13">=</operator> <literal type="number" pos:start="203:15" pos:end="203:15">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt pos:start="205:7" pos:end="205:55"><expr pos:start="205:7" pos:end="205:54"><call pos:start="205:7" pos:end="205:54">(<modifier pos:start="205:8" pos:end="205:8">*</modifier><name pos:start="205:9" pos:end="205:26"><name pos:start="205:9" pos:end="205:12">info</name><operator pos:start="205:13" pos:end="205:14">-&gt;</operator><name pos:start="205:15" pos:end="205:26">fprintf_func</name></name>) <argument_list pos:start="205:29" pos:end="205:54">(<argument pos:start="205:30" pos:end="205:41"><expr pos:start="205:30" pos:end="205:41"><name pos:start="205:30" pos:end="205:41"><name pos:start="205:30" pos:end="205:33">info</name><operator pos:start="205:34" pos:end="205:35">-&gt;</operator><name pos:start="205:36" pos:end="205:41">stream</name></name></expr></argument>, <argument pos:start="205:44" pos:end="205:48"><expr pos:start="205:44" pos:end="205:48"><literal type="string" pos:start="205:44" pos:end="205:48">"#%d"</literal></expr></argument>, <argument pos:start="205:51" pos:end="205:53"><expr pos:start="205:51" pos:end="205:53"><name pos:start="205:51" pos:end="205:53">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="207:7" pos:end="207:12">break;</break>



    <case pos:start="211:5" pos:end="211:13">case <expr pos:start="211:10" pos:end="211:12"><literal type="char" pos:start="211:10" pos:end="211:12">'x'</literal></expr>:</case>

      <expr_stmt pos:start="213:7" pos:end="213:47"><expr pos:start="213:7" pos:end="213:46"><name pos:start="213:7" pos:end="213:9">val</name> <operator pos:start="213:11" pos:end="213:11">=</operator> <call pos:start="213:13" pos:end="213:46"><name pos:start="213:13" pos:end="213:21">fetch_arg</name> <argument_list pos:start="213:23" pos:end="213:46">(<argument pos:start="213:24" pos:end="213:29"><expr pos:start="213:24" pos:end="213:29"><name pos:start="213:24" pos:end="213:29">buffer</name></expr></argument>, <argument pos:start="213:32" pos:end="213:36"><expr pos:start="213:32" pos:end="213:36"><name pos:start="213:32" pos:end="213:36">place</name></expr></argument>, <argument pos:start="213:39" pos:end="213:39"><expr pos:start="213:39" pos:end="213:39"><literal type="number" pos:start="213:39" pos:end="213:39">3</literal></expr></argument>, <argument pos:start="213:42" pos:end="213:45"><expr pos:start="213:42" pos:end="213:45"><name pos:start="213:42" pos:end="213:45">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block" pos:start="215:7" pos:end="215:24">/* 0 means -1.  */</comment>

      <if_stmt pos:start="217:7" pos:end="219:17"><if pos:start="217:7" pos:end="219:17">if <condition pos:start="217:10" pos:end="217:19">(<expr pos:start="217:11" pos:end="217:18"><name pos:start="217:11" pos:end="217:13">val</name> <operator pos:start="217:15" pos:end="217:16">==</operator> <literal type="number" pos:start="217:18" pos:end="217:18">0</literal></expr>)</condition><block type="pseudo" pos:start="219:9" pos:end="219:17"><block_content pos:start="219:9" pos:end="219:17">

	<expr_stmt pos:start="219:9" pos:end="219:17"><expr pos:start="219:9" pos:end="219:16"><name pos:start="219:9" pos:end="219:11">val</name> <operator pos:start="219:13" pos:end="219:13">=</operator> <operator pos:start="219:15" pos:end="219:15">-</operator><literal type="number" pos:start="219:16" pos:end="219:16">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt pos:start="221:7" pos:end="221:55"><expr pos:start="221:7" pos:end="221:54"><call pos:start="221:7" pos:end="221:54">(<modifier pos:start="221:8" pos:end="221:8">*</modifier><name pos:start="221:9" pos:end="221:26"><name pos:start="221:9" pos:end="221:12">info</name><operator pos:start="221:13" pos:end="221:14">-&gt;</operator><name pos:start="221:15" pos:end="221:26">fprintf_func</name></name>) <argument_list pos:start="221:29" pos:end="221:54">(<argument pos:start="221:30" pos:end="221:41"><expr pos:start="221:30" pos:end="221:41"><name pos:start="221:30" pos:end="221:41"><name pos:start="221:30" pos:end="221:33">info</name><operator pos:start="221:34" pos:end="221:35">-&gt;</operator><name pos:start="221:36" pos:end="221:41">stream</name></name></expr></argument>, <argument pos:start="221:44" pos:end="221:48"><expr pos:start="221:44" pos:end="221:48"><literal type="string" pos:start="221:44" pos:end="221:48">"#%d"</literal></expr></argument>, <argument pos:start="221:51" pos:end="221:53"><expr pos:start="221:51" pos:end="221:53"><name pos:start="221:51" pos:end="221:53">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="223:7" pos:end="223:12">break;</break>



    <case pos:start="227:5" pos:end="227:13">case <expr pos:start="227:10" pos:end="227:12"><literal type="char" pos:start="227:10" pos:end="227:12">'M'</literal></expr>:</case>

      <if_stmt pos:start="229:7" pos:end="253:9"><if pos:start="229:7" pos:end="239:9">if <condition pos:start="229:10" pos:end="229:23">(<expr pos:start="229:11" pos:end="229:22"><name pos:start="229:11" pos:end="229:15">place</name> <operator pos:start="229:17" pos:end="229:18">==</operator> <literal type="char" pos:start="229:20" pos:end="229:22">'h'</literal></expr>)</condition>

	<block pos:start="231:9" pos:end="239:9">{<block_content pos:start="233:11" pos:end="237:70">

	  <decl_stmt pos:start="233:11" pos:end="233:71"><decl pos:start="233:11" pos:end="233:70"><type pos:start="233:11" pos:end="233:34"><specifier pos:start="233:11" pos:end="233:16">static</specifier> <specifier pos:start="233:18" pos:end="233:22">const</specifier> <name pos:start="233:24" pos:end="233:27">char</name> <modifier pos:start="233:29" pos:end="233:29">*</modifier><specifier pos:start="233:30" pos:end="233:34">const</specifier></type> <name pos:start="233:36" pos:end="233:53"><name pos:start="233:36" pos:end="233:51">scalefactor_name</name><index pos:start="233:52" pos:end="233:53">[]</index></name> <init pos:start="233:55" pos:end="233:70">= <expr pos:start="233:57" pos:end="233:70"><block pos:start="233:57" pos:end="233:70">{ <expr pos:start="233:59" pos:end="233:62"><literal type="string" pos:start="233:59" pos:end="233:62">"&lt;&lt;"</literal></expr>, <expr pos:start="233:65" pos:end="233:68"><literal type="string" pos:start="233:65" pos:end="233:68">"&gt;&gt;"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	  <expr_stmt pos:start="235:11" pos:end="235:51"><expr pos:start="235:11" pos:end="235:50"><name pos:start="235:11" pos:end="235:13">val</name> <operator pos:start="235:15" pos:end="235:15">=</operator> <call pos:start="235:17" pos:end="235:50"><name pos:start="235:17" pos:end="235:25">fetch_arg</name> <argument_list pos:start="235:27" pos:end="235:50">(<argument pos:start="235:28" pos:end="235:33"><expr pos:start="235:28" pos:end="235:33"><name pos:start="235:28" pos:end="235:33">buffer</name></expr></argument>, <argument pos:start="235:36" pos:end="235:40"><expr pos:start="235:36" pos:end="235:40"><name pos:start="235:36" pos:end="235:40">place</name></expr></argument>, <argument pos:start="235:43" pos:end="235:43"><expr pos:start="235:43" pos:end="235:43"><literal type="number" pos:start="235:43" pos:end="235:43">1</literal></expr></argument>, <argument pos:start="235:46" pos:end="235:49"><expr pos:start="235:46" pos:end="235:49"><name pos:start="235:46" pos:end="235:49">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="237:11" pos:end="237:70"><expr pos:start="237:11" pos:end="237:69"><call pos:start="237:11" pos:end="237:69">(<modifier pos:start="237:12" pos:end="237:12">*</modifier><name pos:start="237:13" pos:end="237:30"><name pos:start="237:13" pos:end="237:16">info</name><operator pos:start="237:17" pos:end="237:18">-&gt;</operator><name pos:start="237:19" pos:end="237:30">fprintf_func</name></name>) <argument_list pos:start="237:33" pos:end="237:69">(<argument pos:start="237:34" pos:end="237:45"><expr pos:start="237:34" pos:end="237:45"><name pos:start="237:34" pos:end="237:45"><name pos:start="237:34" pos:end="237:37">info</name><operator pos:start="237:38" pos:end="237:39">-&gt;</operator><name pos:start="237:40" pos:end="237:45">stream</name></name></expr></argument>, <argument pos:start="237:48" pos:end="237:68"><expr pos:start="237:48" pos:end="237:68"><name pos:start="237:48" pos:end="237:68"><name pos:start="237:48" pos:end="237:63">scalefactor_name</name><index pos:start="237:64" pos:end="237:68">[<expr pos:start="237:65" pos:end="237:67"><name pos:start="237:65" pos:end="237:67">val</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if>

      <else pos:start="241:7" pos:end="253:9">else

	<block pos:start="243:9" pos:end="253:9">{<block_content pos:start="245:11" pos:end="251:59">

	  <expr_stmt pos:start="245:11" pos:end="245:51"><expr pos:start="245:11" pos:end="245:50"><name pos:start="245:11" pos:end="245:13">val</name> <operator pos:start="245:15" pos:end="245:15">=</operator> <call pos:start="245:17" pos:end="245:50"><name pos:start="245:17" pos:end="245:25">fetch_arg</name> <argument_list pos:start="245:27" pos:end="245:50">(<argument pos:start="245:28" pos:end="245:33"><expr pos:start="245:28" pos:end="245:33"><name pos:start="245:28" pos:end="245:33">buffer</name></expr></argument>, <argument pos:start="245:36" pos:end="245:40"><expr pos:start="245:36" pos:end="245:40"><name pos:start="245:36" pos:end="245:40">place</name></expr></argument>, <argument pos:start="245:43" pos:end="245:43"><expr pos:start="245:43" pos:end="245:43"><literal type="number" pos:start="245:43" pos:end="245:43">8</literal></expr></argument>, <argument pos:start="245:46" pos:end="245:49"><expr pos:start="245:46" pos:end="245:49"><name pos:start="245:46" pos:end="245:49">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt pos:start="247:11" pos:end="249:30"><if pos:start="247:11" pos:end="249:30">if <condition pos:start="247:14" pos:end="247:25">(<expr pos:start="247:15" pos:end="247:24"><name pos:start="247:15" pos:end="247:17">val</name> <operator pos:start="247:19" pos:end="247:19">&amp;</operator> <literal type="number" pos:start="247:21" pos:end="247:24">0x80</literal></expr>)</condition><block type="pseudo" pos:start="249:13" pos:end="249:30"><block_content pos:start="249:13" pos:end="249:30">

	    <expr_stmt pos:start="249:13" pos:end="249:30"><expr pos:start="249:13" pos:end="249:29"><name pos:start="249:13" pos:end="249:15">val</name> <operator pos:start="249:17" pos:end="249:17">=</operator> <name pos:start="249:19" pos:end="249:21">val</name> <operator pos:start="249:23" pos:end="249:23">-</operator> <literal type="number" pos:start="249:25" pos:end="249:29">0x100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <expr_stmt pos:start="251:11" pos:end="251:59"><expr pos:start="251:11" pos:end="251:58"><call pos:start="251:11" pos:end="251:58">(<modifier pos:start="251:12" pos:end="251:12">*</modifier><name pos:start="251:13" pos:end="251:30"><name pos:start="251:13" pos:end="251:16">info</name><operator pos:start="251:17" pos:end="251:18">-&gt;</operator><name pos:start="251:19" pos:end="251:30">fprintf_func</name></name>) <argument_list pos:start="251:33" pos:end="251:58">(<argument pos:start="251:34" pos:end="251:45"><expr pos:start="251:34" pos:end="251:45"><name pos:start="251:34" pos:end="251:45"><name pos:start="251:34" pos:end="251:37">info</name><operator pos:start="251:38" pos:end="251:39">-&gt;</operator><name pos:start="251:40" pos:end="251:45">stream</name></name></expr></argument>, <argument pos:start="251:48" pos:end="251:52"><expr pos:start="251:48" pos:end="251:52"><literal type="string" pos:start="251:48" pos:end="251:52">"#%d"</literal></expr></argument>, <argument pos:start="251:55" pos:end="251:57"><expr pos:start="251:55" pos:end="251:57"><name pos:start="251:55" pos:end="251:57">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

      <break pos:start="255:7" pos:end="255:12">break;</break>



    <case pos:start="259:5" pos:end="259:13">case <expr pos:start="259:10" pos:end="259:12"><literal type="char" pos:start="259:10" pos:end="259:12">'T'</literal></expr>:</case>

      <expr_stmt pos:start="261:7" pos:end="261:47"><expr pos:start="261:7" pos:end="261:46"><name pos:start="261:7" pos:end="261:9">val</name> <operator pos:start="261:11" pos:end="261:11">=</operator> <call pos:start="261:13" pos:end="261:46"><name pos:start="261:13" pos:end="261:21">fetch_arg</name> <argument_list pos:start="261:23" pos:end="261:46">(<argument pos:start="261:24" pos:end="261:29"><expr pos:start="261:24" pos:end="261:29"><name pos:start="261:24" pos:end="261:29">buffer</name></expr></argument>, <argument pos:start="261:32" pos:end="261:36"><expr pos:start="261:32" pos:end="261:36"><name pos:start="261:32" pos:end="261:36">place</name></expr></argument>, <argument pos:start="261:39" pos:end="261:39"><expr pos:start="261:39" pos:end="261:39"><literal type="number" pos:start="261:39" pos:end="261:39">4</literal></expr></argument>, <argument pos:start="261:42" pos:end="261:45"><expr pos:start="261:42" pos:end="261:45"><name pos:start="261:42" pos:end="261:45">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="263:7" pos:end="263:55"><expr pos:start="263:7" pos:end="263:54"><call pos:start="263:7" pos:end="263:54">(<modifier pos:start="263:8" pos:end="263:8">*</modifier><name pos:start="263:9" pos:end="263:26"><name pos:start="263:9" pos:end="263:12">info</name><operator pos:start="263:13" pos:end="263:14">-&gt;</operator><name pos:start="263:15" pos:end="263:26">fprintf_func</name></name>) <argument_list pos:start="263:29" pos:end="263:54">(<argument pos:start="263:30" pos:end="263:41"><expr pos:start="263:30" pos:end="263:41"><name pos:start="263:30" pos:end="263:41"><name pos:start="263:30" pos:end="263:33">info</name><operator pos:start="263:34" pos:end="263:35">-&gt;</operator><name pos:start="263:36" pos:end="263:41">stream</name></name></expr></argument>, <argument pos:start="263:44" pos:end="263:48"><expr pos:start="263:44" pos:end="263:48"><literal type="string" pos:start="263:44" pos:end="263:48">"#%d"</literal></expr></argument>, <argument pos:start="263:51" pos:end="263:53"><expr pos:start="263:51" pos:end="263:53"><name pos:start="263:51" pos:end="263:53">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="265:7" pos:end="265:12">break;</break>



    <case pos:start="269:5" pos:end="269:13">case <expr pos:start="269:10" pos:end="269:12"><literal type="char" pos:start="269:10" pos:end="269:12">'D'</literal></expr>:</case>

      <expr_stmt pos:start="271:7" pos:end="273:76"><expr pos:start="271:7" pos:end="273:75"><call pos:start="271:7" pos:end="273:75">(<modifier pos:start="271:8" pos:end="271:8">*</modifier><name pos:start="271:9" pos:end="271:26"><name pos:start="271:9" pos:end="271:12">info</name><operator pos:start="271:13" pos:end="271:14">-&gt;</operator><name pos:start="271:15" pos:end="271:26">fprintf_func</name></name>) <argument_list pos:start="271:29" pos:end="273:75">(<argument pos:start="271:30" pos:end="271:41"><expr pos:start="271:30" pos:end="271:41"><name pos:start="271:30" pos:end="271:41"><name pos:start="271:30" pos:end="271:33">info</name><operator pos:start="271:34" pos:end="271:35">-&gt;</operator><name pos:start="271:36" pos:end="271:41">stream</name></name></expr></argument>, <argument pos:start="271:44" pos:end="271:47"><expr pos:start="271:44" pos:end="271:47"><literal type="string" pos:start="271:44" pos:end="271:47">"%s"</literal></expr></argument>,

			     <argument pos:start="273:30" pos:end="273:74"><expr pos:start="273:30" pos:end="273:74"><name pos:start="273:30" pos:end="273:74"><name pos:start="273:30" pos:end="273:38">reg_names</name><index pos:start="273:39" pos:end="273:74">[<expr pos:start="273:40" pos:end="273:73"><call pos:start="273:40" pos:end="273:73"><name pos:start="273:40" pos:end="273:48">fetch_arg</name> <argument_list pos:start="273:50" pos:end="273:73">(<argument pos:start="273:51" pos:end="273:56"><expr pos:start="273:51" pos:end="273:56"><name pos:start="273:51" pos:end="273:56">buffer</name></expr></argument>, <argument pos:start="273:59" pos:end="273:63"><expr pos:start="273:59" pos:end="273:63"><name pos:start="273:59" pos:end="273:63">place</name></expr></argument>, <argument pos:start="273:66" pos:end="273:66"><expr pos:start="273:66" pos:end="273:66"><literal type="number" pos:start="273:66" pos:end="273:66">3</literal></expr></argument>, <argument pos:start="273:69" pos:end="273:72"><expr pos:start="273:69" pos:end="273:72"><name pos:start="273:69" pos:end="273:72">info</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="275:7" pos:end="275:12">break;</break>



    <case pos:start="279:5" pos:end="279:13">case <expr pos:start="279:10" pos:end="279:12"><literal type="char" pos:start="279:10" pos:end="279:12">'A'</literal></expr>:</case>

      <expr_stmt pos:start="281:7" pos:end="285:62"><expr pos:start="281:7" pos:end="285:61"><call pos:start="281:7" pos:end="285:61">(<modifier pos:start="281:8" pos:end="281:8">*</modifier><name pos:start="281:9" pos:end="281:26"><name pos:start="281:9" pos:end="281:12">info</name><operator pos:start="281:13" pos:end="281:14">-&gt;</operator><name pos:start="281:15" pos:end="281:26">fprintf_func</name></name>)

	<argument_list pos:start="283:9" pos:end="285:61">(<argument pos:start="283:10" pos:end="283:21"><expr pos:start="283:10" pos:end="283:21"><name pos:start="283:10" pos:end="283:21"><name pos:start="283:10" pos:end="283:13">info</name><operator pos:start="283:14" pos:end="283:15">-&gt;</operator><name pos:start="283:16" pos:end="283:21">stream</name></name></expr></argument>, <argument pos:start="283:24" pos:end="283:27"><expr pos:start="283:24" pos:end="283:27"><literal type="string" pos:start="283:24" pos:end="283:27">"%s"</literal></expr></argument>,

	 <argument pos:start="285:10" pos:end="285:60"><expr pos:start="285:10" pos:end="285:60"><name pos:start="285:10" pos:end="285:60"><name pos:start="285:10" pos:end="285:18">reg_names</name><index pos:start="285:19" pos:end="285:60">[<expr pos:start="285:20" pos:end="285:59"><call pos:start="285:20" pos:end="285:53"><name pos:start="285:20" pos:end="285:28">fetch_arg</name> <argument_list pos:start="285:30" pos:end="285:53">(<argument pos:start="285:31" pos:end="285:36"><expr pos:start="285:31" pos:end="285:36"><name pos:start="285:31" pos:end="285:36">buffer</name></expr></argument>, <argument pos:start="285:39" pos:end="285:43"><expr pos:start="285:39" pos:end="285:43"><name pos:start="285:39" pos:end="285:43">place</name></expr></argument>, <argument pos:start="285:46" pos:end="285:46"><expr pos:start="285:46" pos:end="285:46"><literal type="number" pos:start="285:46" pos:end="285:46">3</literal></expr></argument>, <argument pos:start="285:49" pos:end="285:52"><expr pos:start="285:49" pos:end="285:52"><name pos:start="285:49" pos:end="285:52">info</name></expr></argument>)</argument_list></call> <operator pos:start="285:55" pos:end="285:55">+</operator> <literal type="number" pos:start="285:57" pos:end="285:59">010</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="287:7" pos:end="287:12">break;</break>



    <case pos:start="291:5" pos:end="291:13">case <expr pos:start="291:10" pos:end="291:12"><literal type="char" pos:start="291:10" pos:end="291:12">'R'</literal></expr>:</case>

      <expr_stmt pos:start="293:7" pos:end="297:56"><expr pos:start="293:7" pos:end="297:55"><call pos:start="293:7" pos:end="297:55">(<modifier pos:start="293:8" pos:end="293:8">*</modifier><name pos:start="293:9" pos:end="293:26"><name pos:start="293:9" pos:end="293:12">info</name><operator pos:start="293:13" pos:end="293:14">-&gt;</operator><name pos:start="293:15" pos:end="293:26">fprintf_func</name></name>)

	<argument_list pos:start="295:9" pos:end="297:55">(<argument pos:start="295:10" pos:end="295:21"><expr pos:start="295:10" pos:end="295:21"><name pos:start="295:10" pos:end="295:21"><name pos:start="295:10" pos:end="295:13">info</name><operator pos:start="295:14" pos:end="295:15">-&gt;</operator><name pos:start="295:16" pos:end="295:21">stream</name></name></expr></argument>, <argument pos:start="295:24" pos:end="295:27"><expr pos:start="295:24" pos:end="295:27"><literal type="string" pos:start="295:24" pos:end="295:27">"%s"</literal></expr></argument>,

	 <argument pos:start="297:10" pos:end="297:54"><expr pos:start="297:10" pos:end="297:54"><name pos:start="297:10" pos:end="297:54"><name pos:start="297:10" pos:end="297:18">reg_names</name><index pos:start="297:19" pos:end="297:54">[<expr pos:start="297:20" pos:end="297:53"><call pos:start="297:20" pos:end="297:53"><name pos:start="297:20" pos:end="297:28">fetch_arg</name> <argument_list pos:start="297:30" pos:end="297:53">(<argument pos:start="297:31" pos:end="297:36"><expr pos:start="297:31" pos:end="297:36"><name pos:start="297:31" pos:end="297:36">buffer</name></expr></argument>, <argument pos:start="297:39" pos:end="297:43"><expr pos:start="297:39" pos:end="297:43"><name pos:start="297:39" pos:end="297:43">place</name></expr></argument>, <argument pos:start="297:46" pos:end="297:46"><expr pos:start="297:46" pos:end="297:46"><literal type="number" pos:start="297:46" pos:end="297:46">4</literal></expr></argument>, <argument pos:start="297:49" pos:end="297:52"><expr pos:start="297:49" pos:end="297:52"><name pos:start="297:49" pos:end="297:52">info</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="299:7" pos:end="299:12">break;</break>



    <case pos:start="303:5" pos:end="303:13">case <expr pos:start="303:10" pos:end="303:12"><literal type="char" pos:start="303:10" pos:end="303:12">'r'</literal></expr>:</case>

      <expr_stmt pos:start="305:7" pos:end="305:49"><expr pos:start="305:7" pos:end="305:48"><name pos:start="305:7" pos:end="305:11">regno</name> <operator pos:start="305:13" pos:end="305:13">=</operator> <call pos:start="305:15" pos:end="305:48"><name pos:start="305:15" pos:end="305:23">fetch_arg</name> <argument_list pos:start="305:25" pos:end="305:48">(<argument pos:start="305:26" pos:end="305:31"><expr pos:start="305:26" pos:end="305:31"><name pos:start="305:26" pos:end="305:31">buffer</name></expr></argument>, <argument pos:start="305:34" pos:end="305:38"><expr pos:start="305:34" pos:end="305:38"><name pos:start="305:34" pos:end="305:38">place</name></expr></argument>, <argument pos:start="305:41" pos:end="305:41"><expr pos:start="305:41" pos:end="305:41"><literal type="number" pos:start="305:41" pos:end="305:41">4</literal></expr></argument>, <argument pos:start="305:44" pos:end="305:47"><expr pos:start="305:44" pos:end="305:47"><name pos:start="305:44" pos:end="305:47">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="307:7" pos:end="313:72"><if pos:start="307:7" pos:end="309:70">if <condition pos:start="307:10" pos:end="307:20">(<expr pos:start="307:11" pos:end="307:19"><name pos:start="307:11" pos:end="307:15">regno</name> <operator pos:start="307:17" pos:end="307:17">&gt;</operator> <literal type="number" pos:start="307:19" pos:end="307:19">7</literal></expr>)</condition><block type="pseudo" pos:start="309:9" pos:end="309:70"><block_content pos:start="309:9" pos:end="309:70">

	<expr_stmt pos:start="309:9" pos:end="309:70"><expr pos:start="309:9" pos:end="309:69"><call pos:start="309:9" pos:end="309:69">(<modifier pos:start="309:10" pos:end="309:10">*</modifier><name pos:start="309:11" pos:end="309:28"><name pos:start="309:11" pos:end="309:14">info</name><operator pos:start="309:15" pos:end="309:16">-&gt;</operator><name pos:start="309:17" pos:end="309:28">fprintf_func</name></name>) <argument_list pos:start="309:31" pos:end="309:69">(<argument pos:start="309:32" pos:end="309:43"><expr pos:start="309:32" pos:end="309:43"><name pos:start="309:32" pos:end="309:43"><name pos:start="309:32" pos:end="309:35">info</name><operator pos:start="309:36" pos:end="309:37">-&gt;</operator><name pos:start="309:38" pos:end="309:43">stream</name></name></expr></argument>, <argument pos:start="309:46" pos:end="309:50"><expr pos:start="309:46" pos:end="309:50"><literal type="string" pos:start="309:46" pos:end="309:50">"%s@"</literal></expr></argument>, <argument pos:start="309:53" pos:end="309:68"><expr pos:start="309:53" pos:end="309:68"><name pos:start="309:53" pos:end="309:68"><name pos:start="309:53" pos:end="309:61">reg_names</name><index pos:start="309:62" pos:end="309:68">[<expr pos:start="309:63" pos:end="309:67"><name pos:start="309:63" pos:end="309:67">regno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <else pos:start="311:7" pos:end="313:72">else<block type="pseudo" pos:start="313:9" pos:end="313:72"><block_content pos:start="313:9" pos:end="313:72">

	<expr_stmt pos:start="313:9" pos:end="313:72"><expr pos:start="313:9" pos:end="313:71"><call pos:start="313:9" pos:end="313:71">(<modifier pos:start="313:10" pos:end="313:10">*</modifier><name pos:start="313:11" pos:end="313:28"><name pos:start="313:11" pos:end="313:14">info</name><operator pos:start="313:15" pos:end="313:16">-&gt;</operator><name pos:start="313:17" pos:end="313:28">fprintf_func</name></name>) <argument_list pos:start="313:31" pos:end="313:71">(<argument pos:start="313:32" pos:end="313:43"><expr pos:start="313:32" pos:end="313:43"><name pos:start="313:32" pos:end="313:43"><name pos:start="313:32" pos:end="313:35">info</name><operator pos:start="313:36" pos:end="313:37">-&gt;</operator><name pos:start="313:38" pos:end="313:43">stream</name></name></expr></argument>, <argument pos:start="313:46" pos:end="313:52"><expr pos:start="313:46" pos:end="313:52"><literal type="string" pos:start="313:46" pos:end="313:52">"@(%s)"</literal></expr></argument>, <argument pos:start="313:55" pos:end="313:70"><expr pos:start="313:55" pos:end="313:70"><name pos:start="313:55" pos:end="313:70"><name pos:start="313:55" pos:end="313:63">reg_names</name><index pos:start="313:64" pos:end="313:70">[<expr pos:start="313:65" pos:end="313:69"><name pos:start="313:65" pos:end="313:69">regno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <break pos:start="315:7" pos:end="315:12">break;</break>



    <case pos:start="319:5" pos:end="319:13">case <expr pos:start="319:10" pos:end="319:12"><literal type="char" pos:start="319:10" pos:end="319:12">'F'</literal></expr>:</case>

      <expr_stmt pos:start="321:7" pos:end="325:45"><expr pos:start="321:7" pos:end="325:44"><call pos:start="321:7" pos:end="325:44">(<modifier pos:start="321:8" pos:end="321:8">*</modifier><name pos:start="321:9" pos:end="321:26"><name pos:start="321:9" pos:end="321:12">info</name><operator pos:start="321:13" pos:end="321:14">-&gt;</operator><name pos:start="321:15" pos:end="321:26">fprintf_func</name></name>)

	<argument_list pos:start="323:9" pos:end="325:44">(<argument pos:start="323:10" pos:end="323:21"><expr pos:start="323:10" pos:end="323:21"><name pos:start="323:10" pos:end="323:21"><name pos:start="323:10" pos:end="323:13">info</name><operator pos:start="323:14" pos:end="323:15">-&gt;</operator><name pos:start="323:16" pos:end="323:21">stream</name></name></expr></argument>, <argument pos:start="323:24" pos:end="323:31"><expr pos:start="323:24" pos:end="323:31"><literal type="string" pos:start="323:24" pos:end="323:31">"%%fp%d"</literal></expr></argument>,

	 <argument pos:start="325:10" pos:end="325:43"><expr pos:start="325:10" pos:end="325:43"><call pos:start="325:10" pos:end="325:43"><name pos:start="325:10" pos:end="325:18">fetch_arg</name> <argument_list pos:start="325:20" pos:end="325:43">(<argument pos:start="325:21" pos:end="325:26"><expr pos:start="325:21" pos:end="325:26"><name pos:start="325:21" pos:end="325:26">buffer</name></expr></argument>, <argument pos:start="325:29" pos:end="325:33"><expr pos:start="325:29" pos:end="325:33"><name pos:start="325:29" pos:end="325:33">place</name></expr></argument>, <argument pos:start="325:36" pos:end="325:36"><expr pos:start="325:36" pos:end="325:36"><literal type="number" pos:start="325:36" pos:end="325:36">3</literal></expr></argument>, <argument pos:start="325:39" pos:end="325:42"><expr pos:start="325:39" pos:end="325:42"><name pos:start="325:39" pos:end="325:42">info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="327:7" pos:end="327:12">break;</break>



    <case pos:start="331:5" pos:end="331:13">case <expr pos:start="331:10" pos:end="331:12"><literal type="char" pos:start="331:10" pos:end="331:12">'O'</literal></expr>:</case>

      <expr_stmt pos:start="333:7" pos:end="333:47"><expr pos:start="333:7" pos:end="333:46"><name pos:start="333:7" pos:end="333:9">val</name> <operator pos:start="333:11" pos:end="333:11">=</operator> <call pos:start="333:13" pos:end="333:46"><name pos:start="333:13" pos:end="333:21">fetch_arg</name> <argument_list pos:start="333:23" pos:end="333:46">(<argument pos:start="333:24" pos:end="333:29"><expr pos:start="333:24" pos:end="333:29"><name pos:start="333:24" pos:end="333:29">buffer</name></expr></argument>, <argument pos:start="333:32" pos:end="333:36"><expr pos:start="333:32" pos:end="333:36"><name pos:start="333:32" pos:end="333:36">place</name></expr></argument>, <argument pos:start="333:39" pos:end="333:39"><expr pos:start="333:39" pos:end="333:39"><literal type="number" pos:start="333:39" pos:end="333:39">6</literal></expr></argument>, <argument pos:start="333:42" pos:end="333:45"><expr pos:start="333:42" pos:end="333:45"><name pos:start="333:42" pos:end="333:45">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="335:7" pos:end="341:56"><if pos:start="335:7" pos:end="337:71">if <condition pos:start="335:10" pos:end="335:21">(<expr pos:start="335:11" pos:end="335:20"><name pos:start="335:11" pos:end="335:13">val</name> <operator pos:start="335:15" pos:end="335:15">&amp;</operator> <literal type="number" pos:start="335:17" pos:end="335:20">0x20</literal></expr>)</condition><block type="pseudo" pos:start="337:9" pos:end="337:71"><block_content pos:start="337:9" pos:end="337:71">

	<expr_stmt pos:start="337:9" pos:end="337:71"><expr pos:start="337:9" pos:end="337:70"><call pos:start="337:9" pos:end="337:70">(<modifier pos:start="337:10" pos:end="337:10">*</modifier><name pos:start="337:11" pos:end="337:28"><name pos:start="337:11" pos:end="337:14">info</name><operator pos:start="337:15" pos:end="337:16">-&gt;</operator><name pos:start="337:17" pos:end="337:28">fprintf_func</name></name>) <argument_list pos:start="337:31" pos:end="337:70">(<argument pos:start="337:32" pos:end="337:43"><expr pos:start="337:32" pos:end="337:43"><name pos:start="337:32" pos:end="337:43"><name pos:start="337:32" pos:end="337:35">info</name><operator pos:start="337:36" pos:end="337:37">-&gt;</operator><name pos:start="337:38" pos:end="337:43">stream</name></name></expr></argument>, <argument pos:start="337:46" pos:end="337:49"><expr pos:start="337:46" pos:end="337:49"><literal type="string" pos:start="337:46" pos:end="337:49">"%s"</literal></expr></argument>, <argument pos:start="337:52" pos:end="337:69"><expr pos:start="337:52" pos:end="337:69"><name pos:start="337:52" pos:end="337:69"><name pos:start="337:52" pos:end="337:60">reg_names</name><index pos:start="337:61" pos:end="337:69">[<expr pos:start="337:62" pos:end="337:68"><name pos:start="337:62" pos:end="337:64">val</name> <operator pos:start="337:66" pos:end="337:66">&amp;</operator> <literal type="number" pos:start="337:68" pos:end="337:68">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <else pos:start="339:7" pos:end="341:56">else<block type="pseudo" pos:start="341:9" pos:end="341:56"><block_content pos:start="341:9" pos:end="341:56">

	<expr_stmt pos:start="341:9" pos:end="341:56"><expr pos:start="341:9" pos:end="341:55"><call pos:start="341:9" pos:end="341:55">(<modifier pos:start="341:10" pos:end="341:10">*</modifier><name pos:start="341:11" pos:end="341:28"><name pos:start="341:11" pos:end="341:14">info</name><operator pos:start="341:15" pos:end="341:16">-&gt;</operator><name pos:start="341:17" pos:end="341:28">fprintf_func</name></name>) <argument_list pos:start="341:31" pos:end="341:55">(<argument pos:start="341:32" pos:end="341:43"><expr pos:start="341:32" pos:end="341:43"><name pos:start="341:32" pos:end="341:43"><name pos:start="341:32" pos:end="341:35">info</name><operator pos:start="341:36" pos:end="341:37">-&gt;</operator><name pos:start="341:38" pos:end="341:43">stream</name></name></expr></argument>, <argument pos:start="341:46" pos:end="341:49"><expr pos:start="341:46" pos:end="341:49"><literal type="string" pos:start="341:46" pos:end="341:49">"%d"</literal></expr></argument>, <argument pos:start="341:52" pos:end="341:54"><expr pos:start="341:52" pos:end="341:54"><name pos:start="341:52" pos:end="341:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <break pos:start="343:7" pos:end="343:12">break;</break>



    <case pos:start="347:5" pos:end="347:13">case <expr pos:start="347:10" pos:end="347:12"><literal type="char" pos:start="347:10" pos:end="347:12">'+'</literal></expr>:</case>

      <expr_stmt pos:start="349:7" pos:end="353:60"><expr pos:start="349:7" pos:end="353:59"><call pos:start="349:7" pos:end="353:59">(<modifier pos:start="349:8" pos:end="349:8">*</modifier><name pos:start="349:9" pos:end="349:26"><name pos:start="349:9" pos:end="349:12">info</name><operator pos:start="349:13" pos:end="349:14">-&gt;</operator><name pos:start="349:15" pos:end="349:26">fprintf_func</name></name>)

	<argument_list pos:start="351:9" pos:end="353:59">(<argument pos:start="351:10" pos:end="351:21"><expr pos:start="351:10" pos:end="351:21"><name pos:start="351:10" pos:end="351:21"><name pos:start="351:10" pos:end="351:13">info</name><operator pos:start="351:14" pos:end="351:15">-&gt;</operator><name pos:start="351:16" pos:end="351:21">stream</name></name></expr></argument>, <argument pos:start="351:24" pos:end="351:29"><expr pos:start="351:24" pos:end="351:29"><literal type="string" pos:start="351:24" pos:end="351:29">"%s@+"</literal></expr></argument>,

	 <argument pos:start="353:10" pos:end="353:58"><expr pos:start="353:10" pos:end="353:58"><name pos:start="353:10" pos:end="353:58"><name pos:start="353:10" pos:end="353:18">reg_names</name><index pos:start="353:19" pos:end="353:58">[<expr pos:start="353:20" pos:end="353:57"><call pos:start="353:20" pos:end="353:53"><name pos:start="353:20" pos:end="353:28">fetch_arg</name> <argument_list pos:start="353:30" pos:end="353:53">(<argument pos:start="353:31" pos:end="353:36"><expr pos:start="353:31" pos:end="353:36"><name pos:start="353:31" pos:end="353:36">buffer</name></expr></argument>, <argument pos:start="353:39" pos:end="353:43"><expr pos:start="353:39" pos:end="353:43"><name pos:start="353:39" pos:end="353:43">place</name></expr></argument>, <argument pos:start="353:46" pos:end="353:46"><expr pos:start="353:46" pos:end="353:46"><literal type="number" pos:start="353:46" pos:end="353:46">3</literal></expr></argument>, <argument pos:start="353:49" pos:end="353:52"><expr pos:start="353:49" pos:end="353:52"><name pos:start="353:49" pos:end="353:52">info</name></expr></argument>)</argument_list></call> <operator pos:start="353:55" pos:end="353:55">+</operator> <literal type="number" pos:start="353:57" pos:end="353:57">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="355:7" pos:end="355:12">break;</break>



    <case pos:start="359:5" pos:end="359:13">case <expr pos:start="359:10" pos:end="359:12"><literal type="char" pos:start="359:10" pos:end="359:12">'-'</literal></expr>:</case>

      <expr_stmt pos:start="361:7" pos:end="365:60"><expr pos:start="361:7" pos:end="365:59"><call pos:start="361:7" pos:end="365:59">(<modifier pos:start="361:8" pos:end="361:8">*</modifier><name pos:start="361:9" pos:end="361:26"><name pos:start="361:9" pos:end="361:12">info</name><operator pos:start="361:13" pos:end="361:14">-&gt;</operator><name pos:start="361:15" pos:end="361:26">fprintf_func</name></name>)

	<argument_list pos:start="363:9" pos:end="365:59">(<argument pos:start="363:10" pos:end="363:21"><expr pos:start="363:10" pos:end="363:21"><name pos:start="363:10" pos:end="363:21"><name pos:start="363:10" pos:end="363:13">info</name><operator pos:start="363:14" pos:end="363:15">-&gt;</operator><name pos:start="363:16" pos:end="363:21">stream</name></name></expr></argument>, <argument pos:start="363:24" pos:end="363:29"><expr pos:start="363:24" pos:end="363:29"><literal type="string" pos:start="363:24" pos:end="363:29">"%s@-"</literal></expr></argument>,

	 <argument pos:start="365:10" pos:end="365:58"><expr pos:start="365:10" pos:end="365:58"><name pos:start="365:10" pos:end="365:58"><name pos:start="365:10" pos:end="365:18">reg_names</name><index pos:start="365:19" pos:end="365:58">[<expr pos:start="365:20" pos:end="365:57"><call pos:start="365:20" pos:end="365:53"><name pos:start="365:20" pos:end="365:28">fetch_arg</name> <argument_list pos:start="365:30" pos:end="365:53">(<argument pos:start="365:31" pos:end="365:36"><expr pos:start="365:31" pos:end="365:36"><name pos:start="365:31" pos:end="365:36">buffer</name></expr></argument>, <argument pos:start="365:39" pos:end="365:43"><expr pos:start="365:39" pos:end="365:43"><name pos:start="365:39" pos:end="365:43">place</name></expr></argument>, <argument pos:start="365:46" pos:end="365:46"><expr pos:start="365:46" pos:end="365:46"><literal type="number" pos:start="365:46" pos:end="365:46">3</literal></expr></argument>, <argument pos:start="365:49" pos:end="365:52"><expr pos:start="365:49" pos:end="365:52"><name pos:start="365:49" pos:end="365:52">info</name></expr></argument>)</argument_list></call> <operator pos:start="365:55" pos:end="365:55">+</operator> <literal type="number" pos:start="365:57" pos:end="365:57">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="367:7" pos:end="367:12">break;</break>



    <case pos:start="371:5" pos:end="371:13">case <expr pos:start="371:10" pos:end="371:12"><literal type="char" pos:start="371:10" pos:end="371:12">'k'</literal></expr>:</case>

      <if_stmt pos:start="373:7" pos:end="397:18"><if pos:start="373:7" pos:end="379:58">if <condition pos:start="373:10" pos:end="373:23">(<expr pos:start="373:11" pos:end="373:22"><name pos:start="373:11" pos:end="373:15">place</name> <operator pos:start="373:17" pos:end="373:18">==</operator> <literal type="char" pos:start="373:20" pos:end="373:22">'k'</literal></expr>)</condition><block type="pseudo" pos:start="375:9" pos:end="379:58"><block_content pos:start="375:9" pos:end="379:58">

	<expr_stmt pos:start="375:9" pos:end="379:58"><expr pos:start="375:9" pos:end="379:57"><call pos:start="375:9" pos:end="379:57">(<modifier pos:start="375:10" pos:end="375:10">*</modifier><name pos:start="375:11" pos:end="375:28"><name pos:start="375:11" pos:end="375:14">info</name><operator pos:start="375:15" pos:end="375:16">-&gt;</operator><name pos:start="375:17" pos:end="375:28">fprintf_func</name></name>)

	  <argument_list pos:start="377:11" pos:end="379:57">(<argument pos:start="377:12" pos:end="377:23"><expr pos:start="377:12" pos:end="377:23"><name pos:start="377:12" pos:end="377:23"><name pos:start="377:12" pos:end="377:15">info</name><operator pos:start="377:16" pos:end="377:17">-&gt;</operator><name pos:start="377:18" pos:end="377:23">stream</name></name></expr></argument>, <argument pos:start="377:26" pos:end="377:31"><expr pos:start="377:26" pos:end="377:31"><literal type="string" pos:start="377:26" pos:end="377:31">"{%s}"</literal></expr></argument>,

	   <argument pos:start="379:12" pos:end="379:56"><expr pos:start="379:12" pos:end="379:56"><name pos:start="379:12" pos:end="379:56"><name pos:start="379:12" pos:end="379:20">reg_names</name><index pos:start="379:21" pos:end="379:56">[<expr pos:start="379:22" pos:end="379:55"><call pos:start="379:22" pos:end="379:55"><name pos:start="379:22" pos:end="379:30">fetch_arg</name> <argument_list pos:start="379:32" pos:end="379:55">(<argument pos:start="379:33" pos:end="379:38"><expr pos:start="379:33" pos:end="379:38"><name pos:start="379:33" pos:end="379:38">buffer</name></expr></argument>, <argument pos:start="379:41" pos:end="379:45"><expr pos:start="379:41" pos:end="379:45"><name pos:start="379:41" pos:end="379:45">place</name></expr></argument>, <argument pos:start="379:48" pos:end="379:48"><expr pos:start="379:48" pos:end="379:48"><literal type="number" pos:start="379:48" pos:end="379:48">3</literal></expr></argument>, <argument pos:start="379:51" pos:end="379:54"><expr pos:start="379:51" pos:end="379:54"><name pos:start="379:51" pos:end="379:54">info</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="381:7" pos:end="393:9">else if <condition pos:start="381:15" pos:end="381:28">(<expr pos:start="381:16" pos:end="381:27"><name pos:start="381:16" pos:end="381:20">place</name> <operator pos:start="381:22" pos:end="381:23">==</operator> <literal type="char" pos:start="381:25" pos:end="381:27">'C'</literal></expr>)</condition>

	<block pos:start="383:9" pos:end="393:9">{<block_content pos:start="385:11" pos:end="391:61">

	  <expr_stmt pos:start="385:11" pos:end="385:51"><expr pos:start="385:11" pos:end="385:50"><name pos:start="385:11" pos:end="385:13">val</name> <operator pos:start="385:15" pos:end="385:15">=</operator> <call pos:start="385:17" pos:end="385:50"><name pos:start="385:17" pos:end="385:25">fetch_arg</name> <argument_list pos:start="385:27" pos:end="385:50">(<argument pos:start="385:28" pos:end="385:33"><expr pos:start="385:28" pos:end="385:33"><name pos:start="385:28" pos:end="385:33">buffer</name></expr></argument>, <argument pos:start="385:36" pos:end="385:40"><expr pos:start="385:36" pos:end="385:40"><name pos:start="385:36" pos:end="385:40">place</name></expr></argument>, <argument pos:start="385:43" pos:end="385:43"><expr pos:start="385:43" pos:end="385:43"><literal type="number" pos:start="385:43" pos:end="385:43">7</literal></expr></argument>, <argument pos:start="385:46" pos:end="385:49"><expr pos:start="385:46" pos:end="385:49"><name pos:start="385:46" pos:end="385:49">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt pos:start="387:11" pos:end="389:23"><if pos:start="387:11" pos:end="389:23">if <condition pos:start="387:14" pos:end="387:23">(<expr pos:start="387:15" pos:end="387:22"><name pos:start="387:15" pos:end="387:17">val</name> <operator pos:start="387:19" pos:end="387:19">&gt;</operator> <literal type="number" pos:start="387:21" pos:end="387:22">63</literal></expr>)</condition><block type="pseudo" pos:start="389:13" pos:end="389:23"><block_content pos:start="389:13" pos:end="389:23">		<comment type="block" pos:start="387:33" pos:end="387:65">/* This is a signed constant.  */</comment>

	    <expr_stmt pos:start="389:13" pos:end="389:23"><expr pos:start="389:13" pos:end="389:22"><name pos:start="389:13" pos:end="389:15">val</name> <operator pos:start="389:17" pos:end="389:18">-=</operator> <literal type="number" pos:start="389:20" pos:end="389:22">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <expr_stmt pos:start="391:11" pos:end="391:61"><expr pos:start="391:11" pos:end="391:60"><call pos:start="391:11" pos:end="391:60">(<modifier pos:start="391:12" pos:end="391:12">*</modifier><name pos:start="391:13" pos:end="391:30"><name pos:start="391:13" pos:end="391:16">info</name><operator pos:start="391:17" pos:end="391:18">-&gt;</operator><name pos:start="391:19" pos:end="391:30">fprintf_func</name></name>) <argument_list pos:start="391:33" pos:end="391:60">(<argument pos:start="391:34" pos:end="391:45"><expr pos:start="391:34" pos:end="391:45"><name pos:start="391:34" pos:end="391:45"><name pos:start="391:34" pos:end="391:37">info</name><operator pos:start="391:38" pos:end="391:39">-&gt;</operator><name pos:start="391:40" pos:end="391:45">stream</name></name></expr></argument>, <argument pos:start="391:48" pos:end="391:54"><expr pos:start="391:48" pos:end="391:54"><literal type="string" pos:start="391:48" pos:end="391:54">"{#%d}"</literal></expr></argument>, <argument pos:start="391:57" pos:end="391:59"><expr pos:start="391:57" pos:end="391:59"><name pos:start="391:57" pos:end="391:59">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if>

      <else pos:start="395:7" pos:end="397:18">else<block type="pseudo" pos:start="397:9" pos:end="397:18"><block_content pos:start="397:9" pos:end="397:18">

	<return pos:start="397:9" pos:end="397:18">return <expr pos:start="397:16" pos:end="397:17"><operator pos:start="397:16" pos:end="397:16">-</operator><literal type="number" pos:start="397:17" pos:end="397:17">2</literal></expr>;</return></block_content></block></else></if_stmt>

      <break pos:start="399:7" pos:end="399:12">break;</break>



    <case pos:start="403:5" pos:end="403:13">case <expr pos:start="403:10" pos:end="403:12"><literal type="char" pos:start="403:10" pos:end="403:12">'#'</literal></expr>:</case>

    <case pos:start="405:5" pos:end="405:13">case <expr pos:start="405:10" pos:end="405:12"><literal type="char" pos:start="405:10" pos:end="405:12">'^'</literal></expr>:</case>

      <expr_stmt pos:start="407:7" pos:end="407:40"><expr pos:start="407:7" pos:end="407:39"><name pos:start="407:7" pos:end="407:8">p1</name> <operator pos:start="407:10" pos:end="407:10">=</operator> <name pos:start="407:12" pos:end="407:17">buffer</name> <operator pos:start="407:19" pos:end="407:19">+</operator> <operator pos:start="407:21" pos:end="407:21">(</operator><ternary pos:start="407:22" pos:end="407:38"><condition pos:start="407:22" pos:end="407:32"><expr pos:start="407:22" pos:end="407:30"><operator pos:start="407:22" pos:end="407:22">*</operator><name pos:start="407:23" pos:end="407:23">d</name> <operator pos:start="407:25" pos:end="407:26">==</operator> <literal type="char" pos:start="407:28" pos:end="407:30">'#'</literal></expr> ?</condition><then pos:start="407:34" pos:end="407:34"> <expr pos:start="407:34" pos:end="407:34"><literal type="number" pos:start="407:34" pos:end="407:34">2</literal></expr> </then><else pos:start="407:36" pos:end="407:38">: <expr pos:start="407:38" pos:end="407:38"><literal type="number" pos:start="407:38" pos:end="407:38">4</literal></expr></else></ternary><operator pos:start="407:39" pos:end="407:39">)</operator></expr>;</expr_stmt>

      <if_stmt pos:start="409:7" pos:end="439:18"><if pos:start="409:7" pos:end="411:49">if <condition pos:start="409:10" pos:end="409:23">(<expr pos:start="409:11" pos:end="409:22"><name pos:start="409:11" pos:end="409:15">place</name> <operator pos:start="409:17" pos:end="409:18">==</operator> <literal type="char" pos:start="409:20" pos:end="409:22">'s'</literal></expr>)</condition><block type="pseudo" pos:start="411:9" pos:end="411:49"><block_content pos:start="411:9" pos:end="411:49">

	<expr_stmt pos:start="411:9" pos:end="411:49"><expr pos:start="411:9" pos:end="411:48"><name pos:start="411:9" pos:end="411:11">val</name> <operator pos:start="411:13" pos:end="411:13">=</operator> <call pos:start="411:15" pos:end="411:48"><name pos:start="411:15" pos:end="411:23">fetch_arg</name> <argument_list pos:start="411:25" pos:end="411:48">(<argument pos:start="411:26" pos:end="411:31"><expr pos:start="411:26" pos:end="411:31"><name pos:start="411:26" pos:end="411:31">buffer</name></expr></argument>, <argument pos:start="411:34" pos:end="411:38"><expr pos:start="411:34" pos:end="411:38"><name pos:start="411:34" pos:end="411:38">place</name></expr></argument>, <argument pos:start="411:41" pos:end="411:41"><expr pos:start="411:41" pos:end="411:41"><literal type="number" pos:start="411:41" pos:end="411:41">4</literal></expr></argument>, <argument pos:start="411:44" pos:end="411:47"><expr pos:start="411:44" pos:end="411:47"><name pos:start="411:44" pos:end="411:47">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="413:7" pos:end="415:49">else if <condition pos:start="413:15" pos:end="413:28">(<expr pos:start="413:16" pos:end="413:27"><name pos:start="413:16" pos:end="413:20">place</name> <operator pos:start="413:22" pos:end="413:23">==</operator> <literal type="char" pos:start="413:25" pos:end="413:27">'C'</literal></expr>)</condition><block type="pseudo" pos:start="415:9" pos:end="415:49"><block_content pos:start="415:9" pos:end="415:49">

	<expr_stmt pos:start="415:9" pos:end="415:49"><expr pos:start="415:9" pos:end="415:48"><name pos:start="415:9" pos:end="415:11">val</name> <operator pos:start="415:13" pos:end="415:13">=</operator> <call pos:start="415:15" pos:end="415:48"><name pos:start="415:15" pos:end="415:23">fetch_arg</name> <argument_list pos:start="415:25" pos:end="415:48">(<argument pos:start="415:26" pos:end="415:31"><expr pos:start="415:26" pos:end="415:31"><name pos:start="415:26" pos:end="415:31">buffer</name></expr></argument>, <argument pos:start="415:34" pos:end="415:38"><expr pos:start="415:34" pos:end="415:38"><name pos:start="415:34" pos:end="415:38">place</name></expr></argument>, <argument pos:start="415:41" pos:end="415:41"><expr pos:start="415:41" pos:end="415:41"><literal type="number" pos:start="415:41" pos:end="415:41">7</literal></expr></argument>, <argument pos:start="415:44" pos:end="415:47"><expr pos:start="415:44" pos:end="415:47"><name pos:start="415:44" pos:end="415:47">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="417:7" pos:end="419:49">else if <condition pos:start="417:15" pos:end="417:28">(<expr pos:start="417:16" pos:end="417:27"><name pos:start="417:16" pos:end="417:20">place</name> <operator pos:start="417:22" pos:end="417:23">==</operator> <literal type="char" pos:start="417:25" pos:end="417:27">'8'</literal></expr>)</condition><block type="pseudo" pos:start="419:9" pos:end="419:49"><block_content pos:start="419:9" pos:end="419:49">

	<expr_stmt pos:start="419:9" pos:end="419:49"><expr pos:start="419:9" pos:end="419:48"><name pos:start="419:9" pos:end="419:11">val</name> <operator pos:start="419:13" pos:end="419:13">=</operator> <call pos:start="419:15" pos:end="419:48"><name pos:start="419:15" pos:end="419:23">fetch_arg</name> <argument_list pos:start="419:25" pos:end="419:48">(<argument pos:start="419:26" pos:end="419:31"><expr pos:start="419:26" pos:end="419:31"><name pos:start="419:26" pos:end="419:31">buffer</name></expr></argument>, <argument pos:start="419:34" pos:end="419:38"><expr pos:start="419:34" pos:end="419:38"><name pos:start="419:34" pos:end="419:38">place</name></expr></argument>, <argument pos:start="419:41" pos:end="419:41"><expr pos:start="419:41" pos:end="419:41"><literal type="number" pos:start="419:41" pos:end="419:41">3</literal></expr></argument>, <argument pos:start="419:44" pos:end="419:47"><expr pos:start="419:44" pos:end="419:47"><name pos:start="419:44" pos:end="419:47">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="421:7" pos:end="423:49">else if <condition pos:start="421:15" pos:end="421:28">(<expr pos:start="421:16" pos:end="421:27"><name pos:start="421:16" pos:end="421:20">place</name> <operator pos:start="421:22" pos:end="421:23">==</operator> <literal type="char" pos:start="421:25" pos:end="421:27">'3'</literal></expr>)</condition><block type="pseudo" pos:start="423:9" pos:end="423:49"><block_content pos:start="423:9" pos:end="423:49">

	<expr_stmt pos:start="423:9" pos:end="423:49"><expr pos:start="423:9" pos:end="423:48"><name pos:start="423:9" pos:end="423:11">val</name> <operator pos:start="423:13" pos:end="423:13">=</operator> <call pos:start="423:15" pos:end="423:48"><name pos:start="423:15" pos:end="423:23">fetch_arg</name> <argument_list pos:start="423:25" pos:end="423:48">(<argument pos:start="423:26" pos:end="423:31"><expr pos:start="423:26" pos:end="423:31"><name pos:start="423:26" pos:end="423:31">buffer</name></expr></argument>, <argument pos:start="423:34" pos:end="423:38"><expr pos:start="423:34" pos:end="423:38"><name pos:start="423:34" pos:end="423:38">place</name></expr></argument>, <argument pos:start="423:41" pos:end="423:41"><expr pos:start="423:41" pos:end="423:41"><literal type="number" pos:start="423:41" pos:end="423:41">8</literal></expr></argument>, <argument pos:start="423:44" pos:end="423:47"><expr pos:start="423:44" pos:end="423:47"><name pos:start="423:44" pos:end="423:47">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="425:7" pos:end="427:28">else if <condition pos:start="425:15" pos:end="425:28">(<expr pos:start="425:16" pos:end="425:27"><name pos:start="425:16" pos:end="425:20">place</name> <operator pos:start="425:22" pos:end="425:23">==</operator> <literal type="char" pos:start="425:25" pos:end="425:27">'b'</literal></expr>)</condition><block type="pseudo" pos:start="427:9" pos:end="427:28"><block_content pos:start="427:9" pos:end="427:28">

	<expr_stmt pos:start="427:9" pos:end="427:28"><expr pos:start="427:9" pos:end="427:27"><name pos:start="427:9" pos:end="427:11">val</name> <operator pos:start="427:13" pos:end="427:13">=</operator> <call pos:start="427:15" pos:end="427:27"><name pos:start="427:15" pos:end="427:22">NEXTBYTE</name> <argument_list pos:start="427:24" pos:end="427:27">(<argument pos:start="427:25" pos:end="427:26"><expr pos:start="427:25" pos:end="427:26"><name pos:start="427:25" pos:end="427:26">p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="429:7" pos:end="431:28">else if <condition pos:start="429:15" pos:end="429:44">(<expr pos:start="429:16" pos:end="429:43"><name pos:start="429:16" pos:end="429:20">place</name> <operator pos:start="429:22" pos:end="429:23">==</operator> <literal type="char" pos:start="429:25" pos:end="429:27">'w'</literal> <operator pos:start="429:29" pos:end="429:30">||</operator> <name pos:start="429:32" pos:end="429:36">place</name> <operator pos:start="429:38" pos:end="429:39">==</operator> <literal type="char" pos:start="429:41" pos:end="429:43">'W'</literal></expr>)</condition><block type="pseudo" pos:start="431:9" pos:end="431:28"><block_content pos:start="431:9" pos:end="431:28">

	<expr_stmt pos:start="431:9" pos:end="431:28"><expr pos:start="431:9" pos:end="431:27"><name pos:start="431:9" pos:end="431:11">val</name> <operator pos:start="431:13" pos:end="431:13">=</operator> <call pos:start="431:15" pos:end="431:27"><name pos:start="431:15" pos:end="431:22">NEXTWORD</name> <argument_list pos:start="431:24" pos:end="431:27">(<argument pos:start="431:25" pos:end="431:26"><expr pos:start="431:25" pos:end="431:26"><name pos:start="431:25" pos:end="431:26">p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="433:7" pos:end="435:28">else if <condition pos:start="433:15" pos:end="433:28">(<expr pos:start="433:16" pos:end="433:27"><name pos:start="433:16" pos:end="433:20">place</name> <operator pos:start="433:22" pos:end="433:23">==</operator> <literal type="char" pos:start="433:25" pos:end="433:27">'l'</literal></expr>)</condition><block type="pseudo" pos:start="435:9" pos:end="435:28"><block_content pos:start="435:9" pos:end="435:28">

	<expr_stmt pos:start="435:9" pos:end="435:28"><expr pos:start="435:9" pos:end="435:27"><name pos:start="435:9" pos:end="435:11">val</name> <operator pos:start="435:13" pos:end="435:13">=</operator> <call pos:start="435:15" pos:end="435:27"><name pos:start="435:15" pos:end="435:22">NEXTLONG</name> <argument_list pos:start="435:24" pos:end="435:27">(<argument pos:start="435:25" pos:end="435:26"><expr pos:start="435:25" pos:end="435:26"><name pos:start="435:25" pos:end="435:26">p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <else pos:start="437:7" pos:end="439:18">else<block type="pseudo" pos:start="439:9" pos:end="439:18"><block_content pos:start="439:9" pos:end="439:18">

	<return pos:start="439:9" pos:end="439:18">return <expr pos:start="439:16" pos:end="439:17"><operator pos:start="439:16" pos:end="439:16">-</operator><literal type="number" pos:start="439:17" pos:end="439:17">2</literal></expr>;</return></block_content></block></else></if_stmt>

      <expr_stmt pos:start="441:7" pos:end="441:55"><expr pos:start="441:7" pos:end="441:54"><call pos:start="441:7" pos:end="441:54">(<modifier pos:start="441:8" pos:end="441:8">*</modifier><name pos:start="441:9" pos:end="441:26"><name pos:start="441:9" pos:end="441:12">info</name><operator pos:start="441:13" pos:end="441:14">-&gt;</operator><name pos:start="441:15" pos:end="441:26">fprintf_func</name></name>) <argument_list pos:start="441:29" pos:end="441:54">(<argument pos:start="441:30" pos:end="441:41"><expr pos:start="441:30" pos:end="441:41"><name pos:start="441:30" pos:end="441:41"><name pos:start="441:30" pos:end="441:33">info</name><operator pos:start="441:34" pos:end="441:35">-&gt;</operator><name pos:start="441:36" pos:end="441:41">stream</name></name></expr></argument>, <argument pos:start="441:44" pos:end="441:48"><expr pos:start="441:44" pos:end="441:48"><literal type="string" pos:start="441:44" pos:end="441:48">"#%d"</literal></expr></argument>, <argument pos:start="441:51" pos:end="441:53"><expr pos:start="441:51" pos:end="441:53"><name pos:start="441:51" pos:end="441:53">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="443:7" pos:end="443:12">break;</break>



    <case pos:start="447:5" pos:end="447:13">case <expr pos:start="447:10" pos:end="447:12"><literal type="char" pos:start="447:10" pos:end="447:12">'B'</literal></expr>:</case>

      <if_stmt pos:start="449:7" pos:end="497:18"><if pos:start="449:7" pos:end="451:28">if <condition pos:start="449:10" pos:end="449:23">(<expr pos:start="449:11" pos:end="449:22"><name pos:start="449:11" pos:end="449:15">place</name> <operator pos:start="449:17" pos:end="449:18">==</operator> <literal type="char" pos:start="449:20" pos:end="449:22">'b'</literal></expr>)</condition><block type="pseudo" pos:start="451:9" pos:end="451:28"><block_content pos:start="451:9" pos:end="451:28">

	<expr_stmt pos:start="451:9" pos:end="451:28"><expr pos:start="451:9" pos:end="451:27"><name pos:start="451:9" pos:end="451:12">disp</name> <operator pos:start="451:14" pos:end="451:14">=</operator> <call pos:start="451:16" pos:end="451:27"><name pos:start="451:16" pos:end="451:23">NEXTBYTE</name> <argument_list pos:start="451:25" pos:end="451:27">(<argument pos:start="451:26" pos:end="451:26"><expr pos:start="451:26" pos:end="451:26"><name pos:start="451:26" pos:end="451:26">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="453:7" pos:end="455:46">else if <condition pos:start="453:15" pos:end="453:28">(<expr pos:start="453:16" pos:end="453:27"><name pos:start="453:16" pos:end="453:20">place</name> <operator pos:start="453:22" pos:end="453:23">==</operator> <literal type="char" pos:start="453:25" pos:end="453:27">'B'</literal></expr>)</condition><block type="pseudo" pos:start="455:9" pos:end="455:46"><block_content pos:start="455:9" pos:end="455:46">

	<expr_stmt pos:start="455:9" pos:end="455:46"><expr pos:start="455:9" pos:end="455:45"><name pos:start="455:9" pos:end="455:12">disp</name> <operator pos:start="455:14" pos:end="455:14">=</operator> <call pos:start="455:16" pos:end="455:45"><name pos:start="455:16" pos:end="455:33">COERCE_SIGNED_CHAR</name> <argument_list pos:start="455:35" pos:end="455:45">(<argument pos:start="455:36" pos:end="455:44"><expr pos:start="455:36" pos:end="455:44"><name pos:start="455:36" pos:end="455:44"><name pos:start="455:36" pos:end="455:41">buffer</name><index pos:start="455:42" pos:end="455:44">[<expr pos:start="455:43" pos:end="455:43"><literal type="number" pos:start="455:43" pos:end="455:43">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="457:7" pos:end="459:28">else if <condition pos:start="457:15" pos:end="457:44">(<expr pos:start="457:16" pos:end="457:43"><name pos:start="457:16" pos:end="457:20">place</name> <operator pos:start="457:22" pos:end="457:23">==</operator> <literal type="char" pos:start="457:25" pos:end="457:27">'w'</literal> <operator pos:start="457:29" pos:end="457:30">||</operator> <name pos:start="457:32" pos:end="457:36">place</name> <operator pos:start="457:38" pos:end="457:39">==</operator> <literal type="char" pos:start="457:41" pos:end="457:43">'W'</literal></expr>)</condition><block type="pseudo" pos:start="459:9" pos:end="459:28"><block_content pos:start="459:9" pos:end="459:28">

	<expr_stmt pos:start="459:9" pos:end="459:28"><expr pos:start="459:9" pos:end="459:27"><name pos:start="459:9" pos:end="459:12">disp</name> <operator pos:start="459:14" pos:end="459:14">=</operator> <call pos:start="459:16" pos:end="459:27"><name pos:start="459:16" pos:end="459:23">NEXTWORD</name> <argument_list pos:start="459:25" pos:end="459:27">(<argument pos:start="459:26" pos:end="459:26"><expr pos:start="459:26" pos:end="459:26"><name pos:start="459:26" pos:end="459:26">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="461:7" pos:end="463:28">else if <condition pos:start="461:15" pos:end="461:60">(<expr pos:start="461:16" pos:end="461:59"><name pos:start="461:16" pos:end="461:20">place</name> <operator pos:start="461:22" pos:end="461:23">==</operator> <literal type="char" pos:start="461:25" pos:end="461:27">'l'</literal> <operator pos:start="461:29" pos:end="461:30">||</operator> <name pos:start="461:32" pos:end="461:36">place</name> <operator pos:start="461:38" pos:end="461:39">==</operator> <literal type="char" pos:start="461:41" pos:end="461:43">'L'</literal> <operator pos:start="461:45" pos:end="461:46">||</operator> <name pos:start="461:48" pos:end="461:52">place</name> <operator pos:start="461:54" pos:end="461:55">==</operator> <literal type="char" pos:start="461:57" pos:end="461:59">'C'</literal></expr>)</condition><block type="pseudo" pos:start="463:9" pos:end="463:28"><block_content pos:start="463:9" pos:end="463:28">

	<expr_stmt pos:start="463:9" pos:end="463:28"><expr pos:start="463:9" pos:end="463:27"><name pos:start="463:9" pos:end="463:12">disp</name> <operator pos:start="463:14" pos:end="463:14">=</operator> <call pos:start="463:16" pos:end="463:27"><name pos:start="463:16" pos:end="463:23">NEXTLONG</name> <argument_list pos:start="463:25" pos:end="463:27">(<argument pos:start="463:26" pos:end="463:26"><expr pos:start="463:26" pos:end="463:26"><name pos:start="463:26" pos:end="463:26">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="465:7" pos:end="479:9">else if <condition pos:start="465:15" pos:end="465:28">(<expr pos:start="465:16" pos:end="465:27"><name pos:start="465:16" pos:end="465:20">place</name> <operator pos:start="465:22" pos:end="465:23">==</operator> <literal type="char" pos:start="465:25" pos:end="465:27">'g'</literal></expr>)</condition>

	<block pos:start="467:9" pos:end="479:9">{<block_content pos:start="469:11" pos:end="477:32">

	  <expr_stmt pos:start="469:11" pos:end="469:35"><expr pos:start="469:11" pos:end="469:34"><name pos:start="469:11" pos:end="469:14">disp</name> <operator pos:start="469:16" pos:end="469:16">=</operator> <call pos:start="469:18" pos:end="469:34"><name pos:start="469:18" pos:end="469:25">NEXTBYTE</name> <argument_list pos:start="469:27" pos:end="469:34">(<argument pos:start="469:28" pos:end="469:33"><expr pos:start="469:28" pos:end="469:33"><name pos:start="469:28" pos:end="469:33">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt pos:start="471:11" pos:end="477:32"><if pos:start="471:11" pos:end="473:32">if <condition pos:start="471:14" pos:end="471:24">(<expr pos:start="471:15" pos:end="471:23"><name pos:start="471:15" pos:end="471:18">disp</name> <operator pos:start="471:20" pos:end="471:21">==</operator> <literal type="number" pos:start="471:23" pos:end="471:23">0</literal></expr>)</condition><block type="pseudo" pos:start="473:13" pos:end="473:32"><block_content pos:start="473:13" pos:end="473:32">

	    <expr_stmt pos:start="473:13" pos:end="473:32"><expr pos:start="473:13" pos:end="473:31"><name pos:start="473:13" pos:end="473:16">disp</name> <operator pos:start="473:18" pos:end="473:18">=</operator> <call pos:start="473:20" pos:end="473:31"><name pos:start="473:20" pos:end="473:27">NEXTWORD</name> <argument_list pos:start="473:29" pos:end="473:31">(<argument pos:start="473:30" pos:end="473:30"><expr pos:start="473:30" pos:end="473:30"><name pos:start="473:30" pos:end="473:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	  <if type="elseif" pos:start="475:11" pos:end="477:32">else if <condition pos:start="475:19" pos:end="475:30">(<expr pos:start="475:20" pos:end="475:29"><name pos:start="475:20" pos:end="475:23">disp</name> <operator pos:start="475:25" pos:end="475:26">==</operator> <operator pos:start="475:28" pos:end="475:28">-</operator><literal type="number" pos:start="475:29" pos:end="475:29">1</literal></expr>)</condition><block type="pseudo" pos:start="477:13" pos:end="477:32"><block_content pos:start="477:13" pos:end="477:32">

	    <expr_stmt pos:start="477:13" pos:end="477:32"><expr pos:start="477:13" pos:end="477:31"><name pos:start="477:13" pos:end="477:16">disp</name> <operator pos:start="477:18" pos:end="477:18">=</operator> <call pos:start="477:20" pos:end="477:31"><name pos:start="477:20" pos:end="477:27">NEXTLONG</name> <argument_list pos:start="477:29" pos:end="477:31">(<argument pos:start="477:30" pos:end="477:30"><expr pos:start="477:30" pos:end="477:30"><name pos:start="477:30" pos:end="477:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></if>

      <if type="elseif" pos:start="481:7" pos:end="493:9">else if <condition pos:start="481:15" pos:end="481:28">(<expr pos:start="481:16" pos:end="481:27"><name pos:start="481:16" pos:end="481:20">place</name> <operator pos:start="481:22" pos:end="481:23">==</operator> <literal type="char" pos:start="481:25" pos:end="481:27">'c'</literal></expr>)</condition>

	<block pos:start="483:9" pos:end="493:9">{<block_content pos:start="485:11" pos:end="491:32">

	  <if_stmt pos:start="485:11" pos:end="491:32"><if pos:start="485:11" pos:end="487:32">if <condition pos:start="485:14" pos:end="485:31">(<expr pos:start="485:15" pos:end="485:30"><name pos:start="485:15" pos:end="485:23"><name pos:start="485:15" pos:end="485:20">buffer</name><index pos:start="485:21" pos:end="485:23">[<expr pos:start="485:22" pos:end="485:22"><literal type="number" pos:start="485:22" pos:end="485:22">1</literal></expr>]</index></name> <operator pos:start="485:25" pos:end="485:25">&amp;</operator> <literal type="number" pos:start="485:27" pos:end="485:30">0x40</literal></expr>)</condition><block type="pseudo" pos:start="487:13" pos:end="487:32"><block_content pos:start="487:13" pos:end="487:32">		<comment type="block" pos:start="485:41" pos:end="485:78">/* If bit six is one, long offset.  */</comment>

	    <expr_stmt pos:start="487:13" pos:end="487:32"><expr pos:start="487:13" pos:end="487:31"><name pos:start="487:13" pos:end="487:16">disp</name> <operator pos:start="487:18" pos:end="487:18">=</operator> <call pos:start="487:20" pos:end="487:31"><name pos:start="487:20" pos:end="487:27">NEXTLONG</name> <argument_list pos:start="487:29" pos:end="487:31">(<argument pos:start="487:30" pos:end="487:30"><expr pos:start="487:30" pos:end="487:30"><name pos:start="487:30" pos:end="487:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	  <else pos:start="489:11" pos:end="491:32">else<block type="pseudo" pos:start="491:13" pos:end="491:32"><block_content pos:start="491:13" pos:end="491:32">

	    <expr_stmt pos:start="491:13" pos:end="491:32"><expr pos:start="491:13" pos:end="491:31"><name pos:start="491:13" pos:end="491:16">disp</name> <operator pos:start="491:18" pos:end="491:18">=</operator> <call pos:start="491:20" pos:end="491:31"><name pos:start="491:20" pos:end="491:27">NEXTWORD</name> <argument_list pos:start="491:29" pos:end="491:31">(<argument pos:start="491:30" pos:end="491:30"><expr pos:start="491:30" pos:end="491:30"><name pos:start="491:30" pos:end="491:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	</block_content>}</block></if>

      <else pos:start="495:7" pos:end="497:18">else<block type="pseudo" pos:start="497:9" pos:end="497:18"><block_content pos:start="497:9" pos:end="497:18">

	<return pos:start="497:9" pos:end="497:18">return <expr pos:start="497:16" pos:end="497:17"><operator pos:start="497:16" pos:end="497:16">-</operator><literal type="number" pos:start="497:17" pos:end="497:17">2</literal></expr>;</return></block_content></block></else></if_stmt>



      <expr_stmt pos:start="501:7" pos:end="501:54"><expr pos:start="501:7" pos:end="501:53"><call pos:start="501:7" pos:end="501:53">(<modifier pos:start="501:8" pos:end="501:8">*</modifier><name pos:start="501:9" pos:end="501:32"><name pos:start="501:9" pos:end="501:12">info</name><operator pos:start="501:13" pos:end="501:14">-&gt;</operator><name pos:start="501:15" pos:end="501:32">print_address_func</name></name>) <argument_list pos:start="501:35" pos:end="501:53">(<argument pos:start="501:36" pos:end="501:46"><expr pos:start="501:36" pos:end="501:46"><name pos:start="501:36" pos:end="501:39">addr</name> <operator pos:start="501:41" pos:end="501:41">+</operator> <name pos:start="501:43" pos:end="501:46">disp</name></expr></argument>, <argument pos:start="501:49" pos:end="501:52"><expr pos:start="501:49" pos:end="501:52"><name pos:start="501:49" pos:end="501:52">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="503:7" pos:end="503:12">break;</break>



    <case pos:start="507:5" pos:end="507:13">case <expr pos:start="507:10" pos:end="507:12"><literal type="char" pos:start="507:10" pos:end="507:12">'d'</literal></expr>:</case>

      <expr_stmt pos:start="509:7" pos:end="509:25"><expr pos:start="509:7" pos:end="509:24"><name pos:start="509:7" pos:end="509:9">val</name> <operator pos:start="509:11" pos:end="509:11">=</operator> <call pos:start="509:13" pos:end="509:24"><name pos:start="509:13" pos:end="509:20">NEXTWORD</name> <argument_list pos:start="509:22" pos:end="509:24">(<argument pos:start="509:23" pos:end="509:23"><expr pos:start="509:23" pos:end="509:23"><name pos:start="509:23" pos:end="509:23">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="511:7" pos:end="515:65"><expr pos:start="511:7" pos:end="515:64"><call pos:start="511:7" pos:end="515:64">(<modifier pos:start="511:8" pos:end="511:8">*</modifier><name pos:start="511:9" pos:end="511:26"><name pos:start="511:9" pos:end="511:12">info</name><operator pos:start="511:13" pos:end="511:14">-&gt;</operator><name pos:start="511:15" pos:end="511:26">fprintf_func</name></name>)

	<argument_list pos:start="513:9" pos:end="515:64">(<argument pos:start="513:10" pos:end="513:21"><expr pos:start="513:10" pos:end="513:21"><name pos:start="513:10" pos:end="513:21"><name pos:start="513:10" pos:end="513:13">info</name><operator pos:start="513:14" pos:end="513:15">-&gt;</operator><name pos:start="513:16" pos:end="513:21">stream</name></name></expr></argument>, <argument pos:start="513:24" pos:end="513:32"><expr pos:start="513:24" pos:end="513:32"><literal type="string" pos:start="513:24" pos:end="513:32">"%s@(%d)"</literal></expr></argument>,

	 <argument pos:start="515:10" pos:end="515:58"><expr pos:start="515:10" pos:end="515:58"><name pos:start="515:10" pos:end="515:58"><name pos:start="515:10" pos:end="515:18">reg_names</name><index pos:start="515:19" pos:end="515:58">[<expr pos:start="515:20" pos:end="515:57"><call pos:start="515:20" pos:end="515:53"><name pos:start="515:20" pos:end="515:28">fetch_arg</name> <argument_list pos:start="515:30" pos:end="515:53">(<argument pos:start="515:31" pos:end="515:36"><expr pos:start="515:31" pos:end="515:36"><name pos:start="515:31" pos:end="515:36">buffer</name></expr></argument>, <argument pos:start="515:39" pos:end="515:43"><expr pos:start="515:39" pos:end="515:43"><name pos:start="515:39" pos:end="515:43">place</name></expr></argument>, <argument pos:start="515:46" pos:end="515:46"><expr pos:start="515:46" pos:end="515:46"><literal type="number" pos:start="515:46" pos:end="515:46">3</literal></expr></argument>, <argument pos:start="515:49" pos:end="515:52"><expr pos:start="515:49" pos:end="515:52"><name pos:start="515:49" pos:end="515:52">info</name></expr></argument>)</argument_list></call> <operator pos:start="515:55" pos:end="515:55">+</operator> <literal type="number" pos:start="515:57" pos:end="515:57">8</literal></expr>]</index></name></expr></argument>, <argument pos:start="515:61" pos:end="515:63"><expr pos:start="515:61" pos:end="515:63"><name pos:start="515:61" pos:end="515:63">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="517:7" pos:end="517:12">break;</break>



    <case pos:start="521:5" pos:end="521:13">case <expr pos:start="521:10" pos:end="521:12"><literal type="char" pos:start="521:10" pos:end="521:12">'s'</literal></expr>:</case>

      <expr_stmt pos:start="523:7" pos:end="525:77"><expr pos:start="523:7" pos:end="525:76"><call pos:start="523:7" pos:end="525:76">(<modifier pos:start="523:8" pos:end="523:8">*</modifier><name pos:start="523:9" pos:end="523:26"><name pos:start="523:9" pos:end="523:12">info</name><operator pos:start="523:13" pos:end="523:14">-&gt;</operator><name pos:start="523:15" pos:end="523:26">fprintf_func</name></name>) <argument_list pos:start="523:29" pos:end="525:76">(<argument pos:start="523:30" pos:end="523:41"><expr pos:start="523:30" pos:end="523:41"><name pos:start="523:30" pos:end="523:41"><name pos:start="523:30" pos:end="523:33">info</name><operator pos:start="523:34" pos:end="523:35">-&gt;</operator><name pos:start="523:36" pos:end="523:41">stream</name></name></expr></argument>, <argument pos:start="523:44" pos:end="523:47"><expr pos:start="523:44" pos:end="523:47"><literal type="string" pos:start="523:44" pos:end="523:47">"%s"</literal></expr></argument>,

			     <argument pos:start="525:30" pos:end="525:75"><expr pos:start="525:30" pos:end="525:75"><name pos:start="525:30" pos:end="525:75"><name pos:start="525:30" pos:end="525:39">fpcr_names</name><index pos:start="525:40" pos:end="525:75">[<expr pos:start="525:41" pos:end="525:74"><call pos:start="525:41" pos:end="525:74"><name pos:start="525:41" pos:end="525:49">fetch_arg</name> <argument_list pos:start="525:51" pos:end="525:74">(<argument pos:start="525:52" pos:end="525:57"><expr pos:start="525:52" pos:end="525:57"><name pos:start="525:52" pos:end="525:57">buffer</name></expr></argument>, <argument pos:start="525:60" pos:end="525:64"><expr pos:start="525:60" pos:end="525:64"><name pos:start="525:60" pos:end="525:64">place</name></expr></argument>, <argument pos:start="525:67" pos:end="525:67"><expr pos:start="525:67" pos:end="525:67"><literal type="number" pos:start="525:67" pos:end="525:67">3</literal></expr></argument>, <argument pos:start="525:70" pos:end="525:73"><expr pos:start="525:70" pos:end="525:73"><name pos:start="525:70" pos:end="525:73">info</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="527:7" pos:end="527:12">break;</break>



    <case pos:start="531:5" pos:end="531:13">case <expr pos:start="531:10" pos:end="531:12"><literal type="char" pos:start="531:10" pos:end="531:12">'e'</literal></expr>:</case>

      <expr_stmt pos:start="533:7" pos:end="533:46"><expr pos:start="533:7" pos:end="533:45"><name pos:start="533:7" pos:end="533:9">val</name> <operator pos:start="533:11" pos:end="533:11">=</operator> <call pos:start="533:13" pos:end="533:45"><name pos:start="533:13" pos:end="533:21">fetch_arg</name><argument_list pos:start="533:22" pos:end="533:45">(<argument pos:start="533:23" pos:end="533:28"><expr pos:start="533:23" pos:end="533:28"><name pos:start="533:23" pos:end="533:28">buffer</name></expr></argument>, <argument pos:start="533:31" pos:end="533:35"><expr pos:start="533:31" pos:end="533:35"><name pos:start="533:31" pos:end="533:35">place</name></expr></argument>, <argument pos:start="533:38" pos:end="533:38"><expr pos:start="533:38" pos:end="533:38"><literal type="number" pos:start="533:38" pos:end="533:38">2</literal></expr></argument>, <argument pos:start="533:41" pos:end="533:44"><expr pos:start="533:41" pos:end="533:44"><name pos:start="533:41" pos:end="533:44">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="535:7" pos:end="535:59"><expr pos:start="535:7" pos:end="535:58"><call pos:start="535:7" pos:end="535:58">(<modifier pos:start="535:8" pos:end="535:8">*</modifier><name pos:start="535:9" pos:end="535:26"><name pos:start="535:9" pos:end="535:12">info</name><operator pos:start="535:13" pos:end="535:14">-&gt;</operator><name pos:start="535:15" pos:end="535:26">fprintf_func</name></name>) <argument_list pos:start="535:29" pos:end="535:58">(<argument pos:start="535:30" pos:end="535:41"><expr pos:start="535:30" pos:end="535:41"><name pos:start="535:30" pos:end="535:41"><name pos:start="535:30" pos:end="535:33">info</name><operator pos:start="535:34" pos:end="535:35">-&gt;</operator><name pos:start="535:36" pos:end="535:41">stream</name></name></expr></argument>, <argument pos:start="535:44" pos:end="535:52"><expr pos:start="535:44" pos:end="535:52"><literal type="string" pos:start="535:44" pos:end="535:52">"%%acc%d"</literal></expr></argument>, <argument pos:start="535:55" pos:end="535:57"><expr pos:start="535:55" pos:end="535:57"><name pos:start="535:55" pos:end="535:57">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="537:7" pos:end="537:12">break;</break>



    <case pos:start="541:5" pos:end="541:13">case <expr pos:start="541:10" pos:end="541:12"><literal type="char" pos:start="541:10" pos:end="541:12">'g'</literal></expr>:</case>

      <expr_stmt pos:start="543:7" pos:end="543:46"><expr pos:start="543:7" pos:end="543:45"><name pos:start="543:7" pos:end="543:9">val</name> <operator pos:start="543:11" pos:end="543:11">=</operator> <call pos:start="543:13" pos:end="543:45"><name pos:start="543:13" pos:end="543:21">fetch_arg</name><argument_list pos:start="543:22" pos:end="543:45">(<argument pos:start="543:23" pos:end="543:28"><expr pos:start="543:23" pos:end="543:28"><name pos:start="543:23" pos:end="543:28">buffer</name></expr></argument>, <argument pos:start="543:31" pos:end="543:35"><expr pos:start="543:31" pos:end="543:35"><name pos:start="543:31" pos:end="543:35">place</name></expr></argument>, <argument pos:start="543:38" pos:end="543:38"><expr pos:start="543:38" pos:end="543:38"><literal type="number" pos:start="543:38" pos:end="543:38">1</literal></expr></argument>, <argument pos:start="543:41" pos:end="543:44"><expr pos:start="543:41" pos:end="543:44"><name pos:start="543:41" pos:end="543:44">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="545:7" pos:end="545:79"><expr pos:start="545:7" pos:end="545:78"><call pos:start="545:7" pos:end="545:78">(<modifier pos:start="545:8" pos:end="545:8">*</modifier><name pos:start="545:9" pos:end="545:26"><name pos:start="545:9" pos:end="545:12">info</name><operator pos:start="545:13" pos:end="545:14">-&gt;</operator><name pos:start="545:15" pos:end="545:26">fprintf_func</name></name>) <argument_list pos:start="545:29" pos:end="545:78">(<argument pos:start="545:30" pos:end="545:41"><expr pos:start="545:30" pos:end="545:41"><name pos:start="545:30" pos:end="545:41"><name pos:start="545:30" pos:end="545:33">info</name><operator pos:start="545:34" pos:end="545:35">-&gt;</operator><name pos:start="545:36" pos:end="545:41">stream</name></name></expr></argument>, <argument pos:start="545:44" pos:end="545:55"><expr pos:start="545:44" pos:end="545:55"><literal type="string" pos:start="545:44" pos:end="545:55">"%%accext%s"</literal></expr></argument>, <argument pos:start="545:58" pos:end="545:77"><expr pos:start="545:58" pos:end="545:77"><ternary pos:start="545:58" pos:end="545:77"><condition pos:start="545:58" pos:end="545:65"><expr pos:start="545:58" pos:end="545:63"><name pos:start="545:58" pos:end="545:60">val</name><operator pos:start="545:61" pos:end="545:62">==</operator><literal type="number" pos:start="545:63" pos:end="545:63">0</literal></expr> ?</condition><then pos:start="545:67" pos:end="545:70"> <expr pos:start="545:67" pos:end="545:70"><literal type="string" pos:start="545:67" pos:end="545:70">"01"</literal></expr> </then><else pos:start="545:72" pos:end="545:77">: <expr pos:start="545:74" pos:end="545:77"><literal type="string" pos:start="545:74" pos:end="545:77">"23"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="547:7" pos:end="547:12">break;</break>



    <case pos:start="551:5" pos:end="551:13">case <expr pos:start="551:10" pos:end="551:12"><literal type="char" pos:start="551:10" pos:end="551:12">'i'</literal></expr>:</case>

      <expr_stmt pos:start="553:7" pos:end="553:46"><expr pos:start="553:7" pos:end="553:45"><name pos:start="553:7" pos:end="553:9">val</name> <operator pos:start="553:11" pos:end="553:11">=</operator> <call pos:start="553:13" pos:end="553:45"><name pos:start="553:13" pos:end="553:21">fetch_arg</name><argument_list pos:start="553:22" pos:end="553:45">(<argument pos:start="553:23" pos:end="553:28"><expr pos:start="553:23" pos:end="553:28"><name pos:start="553:23" pos:end="553:28">buffer</name></expr></argument>, <argument pos:start="553:31" pos:end="553:35"><expr pos:start="553:31" pos:end="553:35"><name pos:start="553:31" pos:end="553:35">place</name></expr></argument>, <argument pos:start="553:38" pos:end="553:38"><expr pos:start="553:38" pos:end="553:38"><literal type="number" pos:start="553:38" pos:end="553:38">2</literal></expr></argument>, <argument pos:start="553:41" pos:end="553:44"><expr pos:start="553:41" pos:end="553:44"><name pos:start="553:41" pos:end="553:44">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="555:7" pos:end="565:18"><if pos:start="555:7" pos:end="557:51">if <condition pos:start="555:10" pos:end="555:19">(<expr pos:start="555:11" pos:end="555:18"><name pos:start="555:11" pos:end="555:13">val</name> <operator pos:start="555:15" pos:end="555:16">==</operator> <literal type="number" pos:start="555:18" pos:end="555:18">1</literal></expr>)</condition><block type="pseudo" pos:start="557:9" pos:end="557:51"><block_content pos:start="557:9" pos:end="557:51">

	<expr_stmt pos:start="557:9" pos:end="557:51"><expr pos:start="557:9" pos:end="557:50"><call pos:start="557:9" pos:end="557:50">(<modifier pos:start="557:10" pos:end="557:10">*</modifier><name pos:start="557:11" pos:end="557:28"><name pos:start="557:11" pos:end="557:14">info</name><operator pos:start="557:15" pos:end="557:16">-&gt;</operator><name pos:start="557:17" pos:end="557:28">fprintf_func</name></name>) <argument_list pos:start="557:31" pos:end="557:50">(<argument pos:start="557:32" pos:end="557:43"><expr pos:start="557:32" pos:end="557:43"><name pos:start="557:32" pos:end="557:43"><name pos:start="557:32" pos:end="557:35">info</name><operator pos:start="557:36" pos:end="557:37">-&gt;</operator><name pos:start="557:38" pos:end="557:43">stream</name></name></expr></argument>, <argument pos:start="557:46" pos:end="557:49"><expr pos:start="557:46" pos:end="557:49"><literal type="string" pos:start="557:46" pos:end="557:49">"&lt;&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="559:7" pos:end="561:51">else if <condition pos:start="559:15" pos:end="559:24">(<expr pos:start="559:16" pos:end="559:23"><name pos:start="559:16" pos:end="559:18">val</name> <operator pos:start="559:20" pos:end="559:21">==</operator> <literal type="number" pos:start="559:23" pos:end="559:23">3</literal></expr>)</condition><block type="pseudo" pos:start="561:9" pos:end="561:51"><block_content pos:start="561:9" pos:end="561:51">

	<expr_stmt pos:start="561:9" pos:end="561:51"><expr pos:start="561:9" pos:end="561:50"><call pos:start="561:9" pos:end="561:50">(<modifier pos:start="561:10" pos:end="561:10">*</modifier><name pos:start="561:11" pos:end="561:28"><name pos:start="561:11" pos:end="561:14">info</name><operator pos:start="561:15" pos:end="561:16">-&gt;</operator><name pos:start="561:17" pos:end="561:28">fprintf_func</name></name>) <argument_list pos:start="561:31" pos:end="561:50">(<argument pos:start="561:32" pos:end="561:43"><expr pos:start="561:32" pos:end="561:43"><name pos:start="561:32" pos:end="561:43"><name pos:start="561:32" pos:end="561:35">info</name><operator pos:start="561:36" pos:end="561:37">-&gt;</operator><name pos:start="561:38" pos:end="561:43">stream</name></name></expr></argument>, <argument pos:start="561:46" pos:end="561:49"><expr pos:start="561:46" pos:end="561:49"><literal type="string" pos:start="561:46" pos:end="561:49">"&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <else pos:start="563:7" pos:end="565:18">else<block type="pseudo" pos:start="565:9" pos:end="565:18"><block_content pos:start="565:9" pos:end="565:18">

	<return pos:start="565:9" pos:end="565:18">return <expr pos:start="565:16" pos:end="565:17"><operator pos:start="565:16" pos:end="565:16">-</operator><literal type="number" pos:start="565:17" pos:end="565:17">1</literal></expr>;</return></block_content></block></else></if_stmt>

      <break pos:start="567:7" pos:end="567:12">break;</break>



    <case pos:start="571:5" pos:end="571:13">case <expr pos:start="571:10" pos:end="571:12"><literal type="char" pos:start="571:10" pos:end="571:12">'I'</literal></expr>:</case>

      <comment type="block" pos:start="573:7" pos:end="573:33">/* Get coprocessor ID... */</comment>

      <expr_stmt pos:start="575:7" pos:end="575:45"><expr pos:start="575:7" pos:end="575:44"><name pos:start="575:7" pos:end="575:9">val</name> <operator pos:start="575:11" pos:end="575:11">=</operator> <call pos:start="575:13" pos:end="575:44"><name pos:start="575:13" pos:end="575:21">fetch_arg</name> <argument_list pos:start="575:23" pos:end="575:44">(<argument pos:start="575:24" pos:end="575:29"><expr pos:start="575:24" pos:end="575:29"><name pos:start="575:24" pos:end="575:29">buffer</name></expr></argument>, <argument pos:start="575:32" pos:end="575:34"><expr pos:start="575:32" pos:end="575:34"><literal type="char" pos:start="575:32" pos:end="575:34">'d'</literal></expr></argument>, <argument pos:start="575:37" pos:end="575:37"><expr pos:start="575:37" pos:end="575:37"><literal type="number" pos:start="575:37" pos:end="575:37">3</literal></expr></argument>, <argument pos:start="575:40" pos:end="575:43"><expr pos:start="575:40" pos:end="575:43"><name pos:start="575:40" pos:end="575:43">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



      <if_stmt pos:start="579:7" pos:end="581:64"><if pos:start="579:7" pos:end="581:64">if <condition pos:start="579:10" pos:end="579:19">(<expr pos:start="579:11" pos:end="579:18"><name pos:start="579:11" pos:end="579:13">val</name> <operator pos:start="579:15" pos:end="579:16">!=</operator> <literal type="number" pos:start="579:18" pos:end="579:18">1</literal></expr>)</condition><block type="pseudo" pos:start="581:9" pos:end="581:64"><block_content pos:start="581:9" pos:end="581:64">				<comment type="block" pos:start="579:49" pos:end="579:78">/* Unusual coprocessor ID?  */</comment>

	<expr_stmt pos:start="581:9" pos:end="581:64"><expr pos:start="581:9" pos:end="581:63"><call pos:start="581:9" pos:end="581:63">(<modifier pos:start="581:10" pos:end="581:10">*</modifier><name pos:start="581:11" pos:end="581:28"><name pos:start="581:11" pos:end="581:14">info</name><operator pos:start="581:15" pos:end="581:16">-&gt;</operator><name pos:start="581:17" pos:end="581:28">fprintf_func</name></name>) <argument_list pos:start="581:31" pos:end="581:63">(<argument pos:start="581:32" pos:end="581:43"><expr pos:start="581:32" pos:end="581:43"><name pos:start="581:32" pos:end="581:43"><name pos:start="581:32" pos:end="581:35">info</name><operator pos:start="581:36" pos:end="581:37">-&gt;</operator><name pos:start="581:38" pos:end="581:43">stream</name></name></expr></argument>, <argument pos:start="581:46" pos:end="581:57"><expr pos:start="581:46" pos:end="581:57"><literal type="string" pos:start="581:46" pos:end="581:57">"(cpid=%d) "</literal></expr></argument>, <argument pos:start="581:60" pos:end="581:62"><expr pos:start="581:60" pos:end="581:62"><name pos:start="581:60" pos:end="581:62">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <break pos:start="583:7" pos:end="583:12">break;</break>



    <case pos:start="587:5" pos:end="587:13">case <expr pos:start="587:10" pos:end="587:12"><literal type="char" pos:start="587:10" pos:end="587:12">'4'</literal></expr>:</case>

    <case pos:start="589:5" pos:end="589:13">case <expr pos:start="589:10" pos:end="589:12"><literal type="char" pos:start="589:10" pos:end="589:12">'*'</literal></expr>:</case>

    <case pos:start="591:5" pos:end="591:13">case <expr pos:start="591:10" pos:end="591:12"><literal type="char" pos:start="591:10" pos:end="591:12">'~'</literal></expr>:</case>

    <case pos:start="593:5" pos:end="593:13">case <expr pos:start="593:10" pos:end="593:12"><literal type="char" pos:start="593:10" pos:end="593:12">'%'</literal></expr>:</case>

    <case pos:start="595:5" pos:end="595:13">case <expr pos:start="595:10" pos:end="595:12"><literal type="char" pos:start="595:10" pos:end="595:12">';'</literal></expr>:</case>

    <case pos:start="597:5" pos:end="597:13">case <expr pos:start="597:10" pos:end="597:12"><literal type="char" pos:start="597:10" pos:end="597:12">'@'</literal></expr>:</case>

    <case pos:start="599:5" pos:end="599:13">case <expr pos:start="599:10" pos:end="599:12"><literal type="char" pos:start="599:10" pos:end="599:12">'!'</literal></expr>:</case>

    <case pos:start="601:5" pos:end="601:13">case <expr pos:start="601:10" pos:end="601:12"><literal type="char" pos:start="601:10" pos:end="601:12">'$'</literal></expr>:</case>

    <case pos:start="603:5" pos:end="603:13">case <expr pos:start="603:10" pos:end="603:12"><literal type="char" pos:start="603:10" pos:end="603:12">'?'</literal></expr>:</case>

    <case pos:start="605:5" pos:end="605:13">case <expr pos:start="605:10" pos:end="605:12"><literal type="char" pos:start="605:10" pos:end="605:12">'/'</literal></expr>:</case>

    <case pos:start="607:5" pos:end="607:13">case <expr pos:start="607:10" pos:end="607:12"><literal type="char" pos:start="607:10" pos:end="607:12">'&amp;'</literal></expr>:</case>

    <case pos:start="609:5" pos:end="609:13">case <expr pos:start="609:10" pos:end="609:12"><literal type="char" pos:start="609:10" pos:end="609:12">'|'</literal></expr>:</case>

    <case pos:start="611:5" pos:end="611:13">case <expr pos:start="611:10" pos:end="611:12"><literal type="char" pos:start="611:10" pos:end="611:12">'&lt;'</literal></expr>:</case>

    <case pos:start="613:5" pos:end="613:13">case <expr pos:start="613:10" pos:end="613:12"><literal type="char" pos:start="613:10" pos:end="613:12">'&gt;'</literal></expr>:</case>

    <case pos:start="615:5" pos:end="615:13">case <expr pos:start="615:10" pos:end="615:12"><literal type="char" pos:start="615:10" pos:end="615:12">'m'</literal></expr>:</case>

    <case pos:start="617:5" pos:end="617:13">case <expr pos:start="617:10" pos:end="617:12"><literal type="char" pos:start="617:10" pos:end="617:12">'n'</literal></expr>:</case>

    <case pos:start="619:5" pos:end="619:13">case <expr pos:start="619:10" pos:end="619:12"><literal type="char" pos:start="619:10" pos:end="619:12">'o'</literal></expr>:</case>

    <case pos:start="621:5" pos:end="621:13">case <expr pos:start="621:10" pos:end="621:12"><literal type="char" pos:start="621:10" pos:end="621:12">'p'</literal></expr>:</case>

    <case pos:start="623:5" pos:end="623:13">case <expr pos:start="623:10" pos:end="623:12"><literal type="char" pos:start="623:10" pos:end="623:12">'q'</literal></expr>:</case>

    <case pos:start="625:5" pos:end="625:13">case <expr pos:start="625:10" pos:end="625:12"><literal type="char" pos:start="625:10" pos:end="625:12">'v'</literal></expr>:</case>

    <case pos:start="627:5" pos:end="627:13">case <expr pos:start="627:10" pos:end="627:12"><literal type="char" pos:start="627:10" pos:end="627:12">'b'</literal></expr>:</case>

    <case pos:start="629:5" pos:end="629:13">case <expr pos:start="629:10" pos:end="629:12"><literal type="char" pos:start="629:10" pos:end="629:12">'w'</literal></expr>:</case>

    <case pos:start="631:5" pos:end="631:13">case <expr pos:start="631:10" pos:end="631:12"><literal type="char" pos:start="631:10" pos:end="631:12">'y'</literal></expr>:</case>

    <case pos:start="633:5" pos:end="633:13">case <expr pos:start="633:10" pos:end="633:12"><literal type="char" pos:start="633:10" pos:end="633:12">'z'</literal></expr>:</case>

      <if_stmt pos:start="635:7" pos:end="647:47"><if pos:start="635:7" pos:end="643:9">if <condition pos:start="635:10" pos:end="635:23">(<expr pos:start="635:11" pos:end="635:22"><name pos:start="635:11" pos:end="635:15">place</name> <operator pos:start="635:17" pos:end="635:18">==</operator> <literal type="char" pos:start="635:20" pos:end="635:22">'d'</literal></expr>)</condition>

	<block pos:start="637:9" pos:end="643:9">{<block_content pos:start="639:11" pos:end="641:52">

	  <expr_stmt pos:start="639:11" pos:end="639:49"><expr pos:start="639:11" pos:end="639:48"><name pos:start="639:11" pos:end="639:13">val</name> <operator pos:start="639:15" pos:end="639:15">=</operator> <call pos:start="639:17" pos:end="639:48"><name pos:start="639:17" pos:end="639:25">fetch_arg</name> <argument_list pos:start="639:27" pos:end="639:48">(<argument pos:start="639:28" pos:end="639:33"><expr pos:start="639:28" pos:end="639:33"><name pos:start="639:28" pos:end="639:33">buffer</name></expr></argument>, <argument pos:start="639:36" pos:end="639:38"><expr pos:start="639:36" pos:end="639:38"><literal type="char" pos:start="639:36" pos:end="639:38">'x'</literal></expr></argument>, <argument pos:start="639:41" pos:end="639:41"><expr pos:start="639:41" pos:end="639:41"><literal type="number" pos:start="639:41" pos:end="639:41">6</literal></expr></argument>, <argument pos:start="639:44" pos:end="639:47"><expr pos:start="639:44" pos:end="639:47"><name pos:start="639:44" pos:end="639:47">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="641:11" pos:end="641:52"><expr pos:start="641:11" pos:end="641:51"><name pos:start="641:11" pos:end="641:13">val</name> <operator pos:start="641:15" pos:end="641:15">=</operator> <operator pos:start="641:17" pos:end="641:17">(</operator><operator pos:start="641:18" pos:end="641:18">(</operator><name pos:start="641:19" pos:end="641:21">val</name> <operator pos:start="641:23" pos:end="641:23">&amp;</operator> <literal type="number" pos:start="641:25" pos:end="641:25">7</literal><operator pos:start="641:26" pos:end="641:26">)</operator> <operator pos:start="641:28" pos:end="641:29">&lt;&lt;</operator> <literal type="number" pos:start="641:31" pos:end="641:31">3</literal><operator pos:start="641:32" pos:end="641:32">)</operator> <operator pos:start="641:34" pos:end="641:34">+</operator> <operator pos:start="641:36" pos:end="641:36">(</operator><operator pos:start="641:37" pos:end="641:37">(</operator><name pos:start="641:38" pos:end="641:40">val</name> <operator pos:start="641:42" pos:end="641:43">&gt;&gt;</operator> <literal type="number" pos:start="641:45" pos:end="641:45">3</literal><operator pos:start="641:46" pos:end="641:46">)</operator> <operator pos:start="641:48" pos:end="641:48">&amp;</operator> <literal type="number" pos:start="641:50" pos:end="641:50">7</literal><operator pos:start="641:51" pos:end="641:51">)</operator></expr>;</expr_stmt>

	</block_content>}</block></if>

      <else pos:start="645:7" pos:end="647:47">else<block type="pseudo" pos:start="647:9" pos:end="647:47"><block_content pos:start="647:9" pos:end="647:47">

	<expr_stmt pos:start="647:9" pos:end="647:47"><expr pos:start="647:9" pos:end="647:46"><name pos:start="647:9" pos:end="647:11">val</name> <operator pos:start="647:13" pos:end="647:13">=</operator> <call pos:start="647:15" pos:end="647:46"><name pos:start="647:15" pos:end="647:23">fetch_arg</name> <argument_list pos:start="647:25" pos:end="647:46">(<argument pos:start="647:26" pos:end="647:31"><expr pos:start="647:26" pos:end="647:31"><name pos:start="647:26" pos:end="647:31">buffer</name></expr></argument>, <argument pos:start="647:34" pos:end="647:36"><expr pos:start="647:34" pos:end="647:36"><literal type="char" pos:start="647:34" pos:end="647:36">'s'</literal></expr></argument>, <argument pos:start="647:39" pos:end="647:39"><expr pos:start="647:39" pos:end="647:39"><literal type="number" pos:start="647:39" pos:end="647:39">6</literal></expr></argument>, <argument pos:start="647:42" pos:end="647:45"><expr pos:start="647:42" pos:end="647:45"><name pos:start="647:42" pos:end="647:45">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



      <comment type="block" pos:start="651:7" pos:end="651:67">/* If the &lt;ea&gt; is invalid for *d, then reject this match.  */</comment>

      <if_stmt pos:start="653:7" pos:end="655:18"><if pos:start="653:7" pos:end="655:18">if <condition pos:start="653:10" pos:end="653:35">(<expr pos:start="653:11" pos:end="653:34"><operator pos:start="653:11" pos:end="653:11">!</operator><call pos:start="653:12" pos:end="653:34"><name pos:start="653:12" pos:end="653:24">m68k_valid_ea</name> <argument_list pos:start="653:26" pos:end="653:34">(<argument pos:start="653:27" pos:end="653:28"><expr pos:start="653:27" pos:end="653:28"><operator pos:start="653:27" pos:end="653:27">*</operator><name pos:start="653:28" pos:end="653:28">d</name></expr></argument>, <argument pos:start="653:31" pos:end="653:33"><expr pos:start="653:31" pos:end="653:33"><name pos:start="653:31" pos:end="653:33">val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="655:9" pos:end="655:18"><block_content pos:start="655:9" pos:end="655:18">

	<return pos:start="655:9" pos:end="655:18">return <expr pos:start="655:16" pos:end="655:17"><operator pos:start="655:16" pos:end="655:16">-</operator><literal type="number" pos:start="655:17" pos:end="655:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



      <comment type="block" pos:start="659:7" pos:end="659:59">/* Get register number assuming address register.  */</comment>

      <expr_stmt pos:start="661:7" pos:end="661:28"><expr pos:start="661:7" pos:end="661:27"><name pos:start="661:7" pos:end="661:11">regno</name> <operator pos:start="661:13" pos:end="661:13">=</operator> <operator pos:start="661:15" pos:end="661:15">(</operator><name pos:start="661:16" pos:end="661:18">val</name> <operator pos:start="661:20" pos:end="661:20">&amp;</operator> <literal type="number" pos:start="661:22" pos:end="661:22">7</literal><operator pos:start="661:23" pos:end="661:23">)</operator> <operator pos:start="661:25" pos:end="661:25">+</operator> <literal type="number" pos:start="661:27" pos:end="661:27">8</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="663:7" pos:end="663:33"><expr pos:start="663:7" pos:end="663:32"><name pos:start="663:7" pos:end="663:13">regname</name> <operator pos:start="663:15" pos:end="663:15">=</operator> <name pos:start="663:17" pos:end="663:32"><name pos:start="663:17" pos:end="663:25">reg_names</name><index pos:start="663:26" pos:end="663:32">[<expr pos:start="663:27" pos:end="663:31"><name pos:start="663:27" pos:end="663:31">regno</name></expr>]</index></name></expr>;</expr_stmt>

      <switch pos:start="665:7" pos:end="869:9">switch <condition pos:start="665:14" pos:end="665:23">(<expr pos:start="665:15" pos:end="665:22"><name pos:start="665:15" pos:end="665:17">val</name> <operator pos:start="665:19" pos:end="665:20">&gt;&gt;</operator> <literal type="number" pos:start="665:22" pos:end="665:22">3</literal></expr>)</condition>

	<block pos:start="667:9" pos:end="869:9">{<block_content pos:start="669:9" pos:end="867:13">

	<case pos:start="669:9" pos:end="669:15">case <expr pos:start="669:14" pos:end="669:14"><literal type="number" pos:start="669:14" pos:end="669:14">0</literal></expr>:</case>

	  <expr_stmt pos:start="671:11" pos:end="671:69"><expr pos:start="671:11" pos:end="671:68"><call pos:start="671:11" pos:end="671:68">(<modifier pos:start="671:12" pos:end="671:12">*</modifier><name pos:start="671:13" pos:end="671:30"><name pos:start="671:13" pos:end="671:16">info</name><operator pos:start="671:17" pos:end="671:18">-&gt;</operator><name pos:start="671:19" pos:end="671:30">fprintf_func</name></name>) <argument_list pos:start="671:33" pos:end="671:68">(<argument pos:start="671:34" pos:end="671:45"><expr pos:start="671:34" pos:end="671:45"><name pos:start="671:34" pos:end="671:45"><name pos:start="671:34" pos:end="671:37">info</name><operator pos:start="671:38" pos:end="671:39">-&gt;</operator><name pos:start="671:40" pos:end="671:45">stream</name></name></expr></argument>, <argument pos:start="671:48" pos:end="671:51"><expr pos:start="671:48" pos:end="671:51"><literal type="string" pos:start="671:48" pos:end="671:51">"%s"</literal></expr></argument>, <argument pos:start="671:54" pos:end="671:67"><expr pos:start="671:54" pos:end="671:67"><name pos:start="671:54" pos:end="671:67"><name pos:start="671:54" pos:end="671:62">reg_names</name><index pos:start="671:63" pos:end="671:67">[<expr pos:start="671:64" pos:end="671:66"><name pos:start="671:64" pos:end="671:66">val</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <break pos:start="673:11" pos:end="673:16">break;</break>



	<case pos:start="677:9" pos:end="677:15">case <expr pos:start="677:14" pos:end="677:14"><literal type="number" pos:start="677:14" pos:end="677:14">1</literal></expr>:</case>

	  <expr_stmt pos:start="679:11" pos:end="679:62"><expr pos:start="679:11" pos:end="679:61"><call pos:start="679:11" pos:end="679:61">(<modifier pos:start="679:12" pos:end="679:12">*</modifier><name pos:start="679:13" pos:end="679:30"><name pos:start="679:13" pos:end="679:16">info</name><operator pos:start="679:17" pos:end="679:18">-&gt;</operator><name pos:start="679:19" pos:end="679:30">fprintf_func</name></name>) <argument_list pos:start="679:33" pos:end="679:61">(<argument pos:start="679:34" pos:end="679:45"><expr pos:start="679:34" pos:end="679:45"><name pos:start="679:34" pos:end="679:45"><name pos:start="679:34" pos:end="679:37">info</name><operator pos:start="679:38" pos:end="679:39">-&gt;</operator><name pos:start="679:40" pos:end="679:45">stream</name></name></expr></argument>, <argument pos:start="679:48" pos:end="679:51"><expr pos:start="679:48" pos:end="679:51"><literal type="string" pos:start="679:48" pos:end="679:51">"%s"</literal></expr></argument>, <argument pos:start="679:54" pos:end="679:60"><expr pos:start="679:54" pos:end="679:60"><name pos:start="679:54" pos:end="679:60">regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <break pos:start="681:11" pos:end="681:16">break;</break>



	<case pos:start="685:9" pos:end="685:15">case <expr pos:start="685:14" pos:end="685:14"><literal type="number" pos:start="685:14" pos:end="685:14">2</literal></expr>:</case>

	  <expr_stmt pos:start="687:11" pos:end="687:63"><expr pos:start="687:11" pos:end="687:62"><call pos:start="687:11" pos:end="687:62">(<modifier pos:start="687:12" pos:end="687:12">*</modifier><name pos:start="687:13" pos:end="687:30"><name pos:start="687:13" pos:end="687:16">info</name><operator pos:start="687:17" pos:end="687:18">-&gt;</operator><name pos:start="687:19" pos:end="687:30">fprintf_func</name></name>) <argument_list pos:start="687:33" pos:end="687:62">(<argument pos:start="687:34" pos:end="687:45"><expr pos:start="687:34" pos:end="687:45"><name pos:start="687:34" pos:end="687:45"><name pos:start="687:34" pos:end="687:37">info</name><operator pos:start="687:38" pos:end="687:39">-&gt;</operator><name pos:start="687:40" pos:end="687:45">stream</name></name></expr></argument>, <argument pos:start="687:48" pos:end="687:52"><expr pos:start="687:48" pos:end="687:52"><literal type="string" pos:start="687:48" pos:end="687:52">"%s@"</literal></expr></argument>, <argument pos:start="687:55" pos:end="687:61"><expr pos:start="687:55" pos:end="687:61"><name pos:start="687:55" pos:end="687:61">regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <break pos:start="689:11" pos:end="689:16">break;</break>



	<case pos:start="693:9" pos:end="693:15">case <expr pos:start="693:14" pos:end="693:14"><literal type="number" pos:start="693:14" pos:end="693:14">3</literal></expr>:</case>

	  <expr_stmt pos:start="695:11" pos:end="695:64"><expr pos:start="695:11" pos:end="695:63"><call pos:start="695:11" pos:end="695:63">(<modifier pos:start="695:12" pos:end="695:12">*</modifier><name pos:start="695:13" pos:end="695:30"><name pos:start="695:13" pos:end="695:16">info</name><operator pos:start="695:17" pos:end="695:18">-&gt;</operator><name pos:start="695:19" pos:end="695:30">fprintf_func</name></name>) <argument_list pos:start="695:33" pos:end="695:63">(<argument pos:start="695:34" pos:end="695:45"><expr pos:start="695:34" pos:end="695:45"><name pos:start="695:34" pos:end="695:45"><name pos:start="695:34" pos:end="695:37">info</name><operator pos:start="695:38" pos:end="695:39">-&gt;</operator><name pos:start="695:40" pos:end="695:45">stream</name></name></expr></argument>, <argument pos:start="695:48" pos:end="695:53"><expr pos:start="695:48" pos:end="695:53"><literal type="string" pos:start="695:48" pos:end="695:53">"%s@+"</literal></expr></argument>, <argument pos:start="695:56" pos:end="695:62"><expr pos:start="695:56" pos:end="695:62"><name pos:start="695:56" pos:end="695:62">regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <break pos:start="697:11" pos:end="697:16">break;</break>



	<case pos:start="701:9" pos:end="701:15">case <expr pos:start="701:14" pos:end="701:14"><literal type="number" pos:start="701:14" pos:end="701:14">4</literal></expr>:</case>

	  <expr_stmt pos:start="703:11" pos:end="703:64"><expr pos:start="703:11" pos:end="703:63"><call pos:start="703:11" pos:end="703:63">(<modifier pos:start="703:12" pos:end="703:12">*</modifier><name pos:start="703:13" pos:end="703:30"><name pos:start="703:13" pos:end="703:16">info</name><operator pos:start="703:17" pos:end="703:18">-&gt;</operator><name pos:start="703:19" pos:end="703:30">fprintf_func</name></name>) <argument_list pos:start="703:33" pos:end="703:63">(<argument pos:start="703:34" pos:end="703:45"><expr pos:start="703:34" pos:end="703:45"><name pos:start="703:34" pos:end="703:45"><name pos:start="703:34" pos:end="703:37">info</name><operator pos:start="703:38" pos:end="703:39">-&gt;</operator><name pos:start="703:40" pos:end="703:45">stream</name></name></expr></argument>, <argument pos:start="703:48" pos:end="703:53"><expr pos:start="703:48" pos:end="703:53"><literal type="string" pos:start="703:48" pos:end="703:53">"%s@-"</literal></expr></argument>, <argument pos:start="703:56" pos:end="703:62"><expr pos:start="703:56" pos:end="703:62"><name pos:start="703:56" pos:end="703:62">regname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <break pos:start="705:11" pos:end="705:16">break;</break>



	<case pos:start="709:9" pos:end="709:15">case <expr pos:start="709:14" pos:end="709:14"><literal type="number" pos:start="709:14" pos:end="709:14">5</literal></expr>:</case>

	  <expr_stmt pos:start="711:11" pos:end="711:29"><expr pos:start="711:11" pos:end="711:28"><name pos:start="711:11" pos:end="711:13">val</name> <operator pos:start="711:15" pos:end="711:15">=</operator> <call pos:start="711:17" pos:end="711:28"><name pos:start="711:17" pos:end="711:24">NEXTWORD</name> <argument_list pos:start="711:26" pos:end="711:28">(<argument pos:start="711:27" pos:end="711:27"><expr pos:start="711:27" pos:end="711:27"><name pos:start="711:27" pos:end="711:27">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="713:11" pos:end="713:72"><expr pos:start="713:11" pos:end="713:71"><call pos:start="713:11" pos:end="713:71">(<modifier pos:start="713:12" pos:end="713:12">*</modifier><name pos:start="713:13" pos:end="713:30"><name pos:start="713:13" pos:end="713:16">info</name><operator pos:start="713:17" pos:end="713:18">-&gt;</operator><name pos:start="713:19" pos:end="713:30">fprintf_func</name></name>) <argument_list pos:start="713:33" pos:end="713:71">(<argument pos:start="713:34" pos:end="713:45"><expr pos:start="713:34" pos:end="713:45"><name pos:start="713:34" pos:end="713:45"><name pos:start="713:34" pos:end="713:37">info</name><operator pos:start="713:38" pos:end="713:39">-&gt;</operator><name pos:start="713:40" pos:end="713:45">stream</name></name></expr></argument>, <argument pos:start="713:48" pos:end="713:56"><expr pos:start="713:48" pos:end="713:56"><literal type="string" pos:start="713:48" pos:end="713:56">"%s@(%d)"</literal></expr></argument>, <argument pos:start="713:59" pos:end="713:65"><expr pos:start="713:59" pos:end="713:65"><name pos:start="713:59" pos:end="713:65">regname</name></expr></argument>, <argument pos:start="713:68" pos:end="713:70"><expr pos:start="713:68" pos:end="713:70"><name pos:start="713:68" pos:end="713:70">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <break pos:start="715:11" pos:end="715:16">break;</break>



	<case pos:start="719:9" pos:end="719:15">case <expr pos:start="719:14" pos:end="719:14"><literal type="number" pos:start="719:14" pos:end="719:14">6</literal></expr>:</case>

	  <expr_stmt pos:start="721:11" pos:end="721:51"><expr pos:start="721:11" pos:end="721:50"><name pos:start="721:11" pos:end="721:11">p</name> <operator pos:start="721:13" pos:end="721:13">=</operator> <call pos:start="721:15" pos:end="721:50"><name pos:start="721:15" pos:end="721:27">print_indexed</name> <argument_list pos:start="721:29" pos:end="721:50">(<argument pos:start="721:30" pos:end="721:34"><expr pos:start="721:30" pos:end="721:34"><name pos:start="721:30" pos:end="721:34">regno</name></expr></argument>, <argument pos:start="721:37" pos:end="721:37"><expr pos:start="721:37" pos:end="721:37"><name pos:start="721:37" pos:end="721:37">p</name></expr></argument>, <argument pos:start="721:40" pos:end="721:43"><expr pos:start="721:40" pos:end="721:43"><name pos:start="721:40" pos:end="721:43">addr</name></expr></argument>, <argument pos:start="721:46" pos:end="721:49"><expr pos:start="721:46" pos:end="721:49"><name pos:start="721:46" pos:end="721:49">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <break pos:start="723:11" pos:end="723:16">break;</break>



	<case pos:start="727:9" pos:end="727:15">case <expr pos:start="727:14" pos:end="727:14"><literal type="number" pos:start="727:14" pos:end="727:14">7</literal></expr>:</case>

	  <switch pos:start="729:11" pos:end="867:13">switch <condition pos:start="729:18" pos:end="729:26">(<expr pos:start="729:19" pos:end="729:25"><name pos:start="729:19" pos:end="729:21">val</name> <operator pos:start="729:23" pos:end="729:23">&amp;</operator> <literal type="number" pos:start="729:25" pos:end="729:25">7</literal></expr>)</condition>

	    <block pos:start="731:13" pos:end="867:13">{<block_content pos:start="733:13" pos:end="865:24">

	    <case pos:start="733:13" pos:end="733:19">case <expr pos:start="733:18" pos:end="733:18"><literal type="number" pos:start="733:18" pos:end="733:18">0</literal></expr>:</case>

	      <expr_stmt pos:start="735:15" pos:end="735:33"><expr pos:start="735:15" pos:end="735:32"><name pos:start="735:15" pos:end="735:17">val</name> <operator pos:start="735:19" pos:end="735:19">=</operator> <call pos:start="735:21" pos:end="735:32"><name pos:start="735:21" pos:end="735:28">NEXTWORD</name> <argument_list pos:start="735:30" pos:end="735:32">(<argument pos:start="735:31" pos:end="735:31"><expr pos:start="735:31" pos:end="735:31"><name pos:start="735:31" pos:end="735:31">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <expr_stmt pos:start="737:15" pos:end="737:54"><expr pos:start="737:15" pos:end="737:53"><call pos:start="737:15" pos:end="737:53">(<modifier pos:start="737:16" pos:end="737:16">*</modifier><name pos:start="737:17" pos:end="737:40"><name pos:start="737:17" pos:end="737:20">info</name><operator pos:start="737:21" pos:end="737:22">-&gt;</operator><name pos:start="737:23" pos:end="737:40">print_address_func</name></name>) <argument_list pos:start="737:43" pos:end="737:53">(<argument pos:start="737:44" pos:end="737:46"><expr pos:start="737:44" pos:end="737:46"><name pos:start="737:44" pos:end="737:46">val</name></expr></argument>, <argument pos:start="737:49" pos:end="737:52"><expr pos:start="737:49" pos:end="737:52"><name pos:start="737:49" pos:end="737:52">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <break pos:start="739:15" pos:end="739:20">break;</break>



	    <case pos:start="743:13" pos:end="743:19">case <expr pos:start="743:18" pos:end="743:18"><literal type="number" pos:start="743:18" pos:end="743:18">1</literal></expr>:</case>

	      <expr_stmt pos:start="745:15" pos:end="745:35"><expr pos:start="745:15" pos:end="745:34"><name pos:start="745:15" pos:end="745:18">uval</name> <operator pos:start="745:20" pos:end="745:20">=</operator> <call pos:start="745:22" pos:end="745:34"><name pos:start="745:22" pos:end="745:30">NEXTULONG</name> <argument_list pos:start="745:32" pos:end="745:34">(<argument pos:start="745:33" pos:end="745:33"><expr pos:start="745:33" pos:end="745:33"><name pos:start="745:33" pos:end="745:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <expr_stmt pos:start="747:15" pos:end="747:55"><expr pos:start="747:15" pos:end="747:54"><call pos:start="747:15" pos:end="747:54">(<modifier pos:start="747:16" pos:end="747:16">*</modifier><name pos:start="747:17" pos:end="747:40"><name pos:start="747:17" pos:end="747:20">info</name><operator pos:start="747:21" pos:end="747:22">-&gt;</operator><name pos:start="747:23" pos:end="747:40">print_address_func</name></name>) <argument_list pos:start="747:43" pos:end="747:54">(<argument pos:start="747:44" pos:end="747:47"><expr pos:start="747:44" pos:end="747:47"><name pos:start="747:44" pos:end="747:47">uval</name></expr></argument>, <argument pos:start="747:50" pos:end="747:53"><expr pos:start="747:50" pos:end="747:53"><name pos:start="747:50" pos:end="747:53">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <break pos:start="749:15" pos:end="749:20">break;</break>



	    <case pos:start="753:13" pos:end="753:19">case <expr pos:start="753:18" pos:end="753:18"><literal type="number" pos:start="753:18" pos:end="753:18">2</literal></expr>:</case>

	      <expr_stmt pos:start="755:15" pos:end="755:33"><expr pos:start="755:15" pos:end="755:32"><name pos:start="755:15" pos:end="755:17">val</name> <operator pos:start="755:19" pos:end="755:19">=</operator> <call pos:start="755:21" pos:end="755:32"><name pos:start="755:21" pos:end="755:28">NEXTWORD</name> <argument_list pos:start="755:30" pos:end="755:32">(<argument pos:start="755:31" pos:end="755:31"><expr pos:start="755:31" pos:end="755:31"><name pos:start="755:31" pos:end="755:31">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <expr_stmt pos:start="757:15" pos:end="757:61"><expr pos:start="757:15" pos:end="757:60"><call pos:start="757:15" pos:end="757:60">(<modifier pos:start="757:16" pos:end="757:16">*</modifier><name pos:start="757:17" pos:end="757:34"><name pos:start="757:17" pos:end="757:20">info</name><operator pos:start="757:21" pos:end="757:22">-&gt;</operator><name pos:start="757:23" pos:end="757:34">fprintf_func</name></name>) <argument_list pos:start="757:37" pos:end="757:60">(<argument pos:start="757:38" pos:end="757:49"><expr pos:start="757:38" pos:end="757:49"><name pos:start="757:38" pos:end="757:49"><name pos:start="757:38" pos:end="757:41">info</name><operator pos:start="757:42" pos:end="757:43">-&gt;</operator><name pos:start="757:44" pos:end="757:49">stream</name></name></expr></argument>, <argument pos:start="757:52" pos:end="757:59"><expr pos:start="757:52" pos:end="757:59"><literal type="string" pos:start="757:52" pos:end="757:59">"%%pc@("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <expr_stmt pos:start="759:15" pos:end="759:61"><expr pos:start="759:15" pos:end="759:60"><call pos:start="759:15" pos:end="759:60">(<modifier pos:start="759:16" pos:end="759:16">*</modifier><name pos:start="759:17" pos:end="759:40"><name pos:start="759:17" pos:end="759:20">info</name><operator pos:start="759:21" pos:end="759:22">-&gt;</operator><name pos:start="759:23" pos:end="759:40">print_address_func</name></name>) <argument_list pos:start="759:43" pos:end="759:60">(<argument pos:start="759:44" pos:end="759:53"><expr pos:start="759:44" pos:end="759:53"><name pos:start="759:44" pos:end="759:47">addr</name> <operator pos:start="759:49" pos:end="759:49">+</operator> <name pos:start="759:51" pos:end="759:53">val</name></expr></argument>, <argument pos:start="759:56" pos:end="759:59"><expr pos:start="759:56" pos:end="759:59"><name pos:start="759:56" pos:end="759:59">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <expr_stmt pos:start="761:15" pos:end="761:56"><expr pos:start="761:15" pos:end="761:55"><call pos:start="761:15" pos:end="761:55">(<modifier pos:start="761:16" pos:end="761:16">*</modifier><name pos:start="761:17" pos:end="761:34"><name pos:start="761:17" pos:end="761:20">info</name><operator pos:start="761:21" pos:end="761:22">-&gt;</operator><name pos:start="761:23" pos:end="761:34">fprintf_func</name></name>) <argument_list pos:start="761:37" pos:end="761:55">(<argument pos:start="761:38" pos:end="761:49"><expr pos:start="761:38" pos:end="761:49"><name pos:start="761:38" pos:end="761:49"><name pos:start="761:38" pos:end="761:41">info</name><operator pos:start="761:42" pos:end="761:43">-&gt;</operator><name pos:start="761:44" pos:end="761:49">stream</name></name></expr></argument>, <argument pos:start="761:52" pos:end="761:54"><expr pos:start="761:52" pos:end="761:54"><literal type="string" pos:start="761:52" pos:end="761:54">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <break pos:start="763:15" pos:end="763:20">break;</break>



	    <case pos:start="767:13" pos:end="767:19">case <expr pos:start="767:18" pos:end="767:18"><literal type="number" pos:start="767:18" pos:end="767:18">3</literal></expr>:</case>

	      <expr_stmt pos:start="769:15" pos:end="769:52"><expr pos:start="769:15" pos:end="769:51"><name pos:start="769:15" pos:end="769:15">p</name> <operator pos:start="769:17" pos:end="769:17">=</operator> <call pos:start="769:19" pos:end="769:51"><name pos:start="769:19" pos:end="769:31">print_indexed</name> <argument_list pos:start="769:33" pos:end="769:51">(<argument pos:start="769:34" pos:end="769:35"><expr pos:start="769:34" pos:end="769:35"><operator pos:start="769:34" pos:end="769:34">-</operator><literal type="number" pos:start="769:35" pos:end="769:35">1</literal></expr></argument>, <argument pos:start="769:38" pos:end="769:38"><expr pos:start="769:38" pos:end="769:38"><name pos:start="769:38" pos:end="769:38">p</name></expr></argument>, <argument pos:start="769:41" pos:end="769:44"><expr pos:start="769:41" pos:end="769:44"><name pos:start="769:41" pos:end="769:44">addr</name></expr></argument>, <argument pos:start="769:47" pos:end="769:50"><expr pos:start="769:47" pos:end="769:50"><name pos:start="769:47" pos:end="769:50">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <break pos:start="771:15" pos:end="771:20">break;</break>



	    <case pos:start="775:13" pos:end="775:19">case <expr pos:start="775:18" pos:end="775:18"><literal type="number" pos:start="775:18" pos:end="775:18">4</literal></expr>:</case>

	      <expr_stmt pos:start="777:15" pos:end="777:24"><expr pos:start="777:15" pos:end="777:23"><name pos:start="777:15" pos:end="777:19">flt_p</name> <operator pos:start="777:21" pos:end="777:21">=</operator> <literal type="number" pos:start="777:23" pos:end="777:23">1</literal></expr>;</expr_stmt>	<comment type="block" pos:start="777:33" pos:end="777:60">/* Assume it's a float... */</comment>

	      <switch pos:start="779:15" pos:end="849:15">switch <condition pos:start="779:22" pos:end="779:28">(<expr pos:start="779:23" pos:end="779:27"><name pos:start="779:23" pos:end="779:27">place</name></expr>)</condition>

	      <block pos:start="781:15" pos:end="849:15">{<block_content pos:start="783:17" pos:end="847:28">

		<case pos:start="783:17" pos:end="783:25">case <expr pos:start="783:22" pos:end="783:24"><literal type="char" pos:start="783:22" pos:end="783:24">'b'</literal></expr>:</case>

		  <expr_stmt pos:start="785:19" pos:end="785:37"><expr pos:start="785:19" pos:end="785:36"><name pos:start="785:19" pos:end="785:21">val</name> <operator pos:start="785:23" pos:end="785:23">=</operator> <call pos:start="785:25" pos:end="785:36"><name pos:start="785:25" pos:end="785:32">NEXTBYTE</name> <argument_list pos:start="785:34" pos:end="785:36">(<argument pos:start="785:35" pos:end="785:35"><expr pos:start="785:35" pos:end="785:35"><name pos:start="785:35" pos:end="785:35">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <expr_stmt pos:start="787:19" pos:end="787:28"><expr pos:start="787:19" pos:end="787:27"><name pos:start="787:19" pos:end="787:23">flt_p</name> <operator pos:start="787:25" pos:end="787:25">=</operator> <literal type="number" pos:start="787:27" pos:end="787:27">0</literal></expr>;</expr_stmt>

		  <break pos:start="789:19" pos:end="789:24">break;</break>



		<case pos:start="793:17" pos:end="793:25">case <expr pos:start="793:22" pos:end="793:24"><literal type="char" pos:start="793:22" pos:end="793:24">'w'</literal></expr>:</case>

		  <expr_stmt pos:start="795:19" pos:end="795:37"><expr pos:start="795:19" pos:end="795:36"><name pos:start="795:19" pos:end="795:21">val</name> <operator pos:start="795:23" pos:end="795:23">=</operator> <call pos:start="795:25" pos:end="795:36"><name pos:start="795:25" pos:end="795:32">NEXTWORD</name> <argument_list pos:start="795:34" pos:end="795:36">(<argument pos:start="795:35" pos:end="795:35"><expr pos:start="795:35" pos:end="795:35"><name pos:start="795:35" pos:end="795:35">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <expr_stmt pos:start="797:19" pos:end="797:28"><expr pos:start="797:19" pos:end="797:27"><name pos:start="797:19" pos:end="797:23">flt_p</name> <operator pos:start="797:25" pos:end="797:25">=</operator> <literal type="number" pos:start="797:27" pos:end="797:27">0</literal></expr>;</expr_stmt>

		  <break pos:start="799:19" pos:end="799:24">break;</break>



		<case pos:start="803:17" pos:end="803:25">case <expr pos:start="803:22" pos:end="803:24"><literal type="char" pos:start="803:22" pos:end="803:24">'l'</literal></expr>:</case>

		  <expr_stmt pos:start="805:19" pos:end="805:37"><expr pos:start="805:19" pos:end="805:36"><name pos:start="805:19" pos:end="805:21">val</name> <operator pos:start="805:23" pos:end="805:23">=</operator> <call pos:start="805:25" pos:end="805:36"><name pos:start="805:25" pos:end="805:32">NEXTLONG</name> <argument_list pos:start="805:34" pos:end="805:36">(<argument pos:start="805:35" pos:end="805:35"><expr pos:start="805:35" pos:end="805:35"><name pos:start="805:35" pos:end="805:35">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <expr_stmt pos:start="807:19" pos:end="807:28"><expr pos:start="807:19" pos:end="807:27"><name pos:start="807:19" pos:end="807:23">flt_p</name> <operator pos:start="807:25" pos:end="807:25">=</operator> <literal type="number" pos:start="807:27" pos:end="807:27">0</literal></expr>;</expr_stmt>

		  <break pos:start="809:19" pos:end="809:24">break;</break>



		<case pos:start="813:17" pos:end="813:25">case <expr pos:start="813:22" pos:end="813:24"><literal type="char" pos:start="813:22" pos:end="813:24">'f'</literal></expr>:</case>

		  <expr_stmt pos:start="815:19" pos:end="815:40"><expr pos:start="815:19" pos:end="815:39"><call pos:start="815:19" pos:end="815:39"><name pos:start="815:19" pos:end="815:28">NEXTSINGLE</name> <argument_list pos:start="815:30" pos:end="815:39">(<argument pos:start="815:31" pos:end="815:35"><expr pos:start="815:31" pos:end="815:35"><name pos:start="815:31" pos:end="815:35">flval</name></expr></argument>, <argument pos:start="815:38" pos:end="815:38"><expr pos:start="815:38" pos:end="815:38"><name pos:start="815:38" pos:end="815:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <break pos:start="817:19" pos:end="817:24">break;</break>



		<case pos:start="821:17" pos:end="821:25">case <expr pos:start="821:22" pos:end="821:24"><literal type="char" pos:start="821:22" pos:end="821:24">'F'</literal></expr>:</case>

		  <expr_stmt pos:start="823:19" pos:end="823:40"><expr pos:start="823:19" pos:end="823:39"><call pos:start="823:19" pos:end="823:39"><name pos:start="823:19" pos:end="823:28">NEXTDOUBLE</name> <argument_list pos:start="823:30" pos:end="823:39">(<argument pos:start="823:31" pos:end="823:35"><expr pos:start="823:31" pos:end="823:35"><name pos:start="823:31" pos:end="823:35">flval</name></expr></argument>, <argument pos:start="823:38" pos:end="823:38"><expr pos:start="823:38" pos:end="823:38"><name pos:start="823:38" pos:end="823:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <break pos:start="825:19" pos:end="825:24">break;</break>



		<case pos:start="829:17" pos:end="829:25">case <expr pos:start="829:22" pos:end="829:24"><literal type="char" pos:start="829:22" pos:end="829:24">'x'</literal></expr>:</case>

		  <expr_stmt pos:start="831:19" pos:end="831:40"><expr pos:start="831:19" pos:end="831:39"><call pos:start="831:19" pos:end="831:39"><name pos:start="831:19" pos:end="831:28">NEXTEXTEND</name> <argument_list pos:start="831:30" pos:end="831:39">(<argument pos:start="831:31" pos:end="831:35"><expr pos:start="831:31" pos:end="831:35"><name pos:start="831:31" pos:end="831:35">flval</name></expr></argument>, <argument pos:start="831:38" pos:end="831:38"><expr pos:start="831:38" pos:end="831:38"><name pos:start="831:38" pos:end="831:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <break pos:start="833:19" pos:end="833:24">break;</break>



		<case pos:start="837:17" pos:end="837:25">case <expr pos:start="837:22" pos:end="837:24"><literal type="char" pos:start="837:22" pos:end="837:24">'p'</literal></expr>:</case>

		  <expr_stmt pos:start="839:19" pos:end="839:41"><expr pos:start="839:19" pos:end="839:40"><name pos:start="839:19" pos:end="839:23">flval</name> <operator pos:start="839:25" pos:end="839:25">=</operator> <call pos:start="839:27" pos:end="839:40"><name pos:start="839:27" pos:end="839:36">NEXTPACKED</name> <argument_list pos:start="839:38" pos:end="839:40">(<argument pos:start="839:39" pos:end="839:39"><expr pos:start="839:39" pos:end="839:39"><name pos:start="839:39" pos:end="839:39">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <break pos:start="841:19" pos:end="841:24">break;</break>



		<default pos:start="845:17" pos:end="845:24">default:</default>

		  <return pos:start="847:19" pos:end="847:28">return <expr pos:start="847:26" pos:end="847:27"><operator pos:start="847:26" pos:end="847:26">-</operator><literal type="number" pos:start="847:27" pos:end="847:27">1</literal></expr>;</return>

	      </block_content>}</block></switch>

	      <if_stmt pos:start="851:15" pos:end="857:65"><if pos:start="851:15" pos:end="853:67">if <condition pos:start="851:18" pos:end="851:24">(<expr pos:start="851:19" pos:end="851:23"><name pos:start="851:19" pos:end="851:23">flt_p</name></expr>)</condition><block type="pseudo" pos:start="853:17" pos:end="853:67"><block_content pos:start="853:17" pos:end="853:67">	<comment type="block" pos:start="851:33" pos:end="851:52">/* Print a float? */</comment>

		<expr_stmt pos:start="853:17" pos:end="853:67"><expr pos:start="853:17" pos:end="853:66"><call pos:start="853:17" pos:end="853:66">(<modifier pos:start="853:18" pos:end="853:18">*</modifier><name pos:start="853:19" pos:end="853:36"><name pos:start="853:19" pos:end="853:22">info</name><operator pos:start="853:23" pos:end="853:24">-&gt;</operator><name pos:start="853:25" pos:end="853:36">fprintf_func</name></name>) <argument_list pos:start="853:39" pos:end="853:66">(<argument pos:start="853:40" pos:end="853:51"><expr pos:start="853:40" pos:end="853:51"><name pos:start="853:40" pos:end="853:51"><name pos:start="853:40" pos:end="853:43">info</name><operator pos:start="853:44" pos:end="853:45">-&gt;</operator><name pos:start="853:46" pos:end="853:51">stream</name></name></expr></argument>, <argument pos:start="853:54" pos:end="853:58"><expr pos:start="853:54" pos:end="853:58"><literal type="string" pos:start="853:54" pos:end="853:58">"#%g"</literal></expr></argument>, <argument pos:start="853:61" pos:end="853:65"><expr pos:start="853:61" pos:end="853:65"><name pos:start="853:61" pos:end="853:65">flval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	      <else pos:start="855:15" pos:end="857:65">else<block type="pseudo" pos:start="857:17" pos:end="857:65"><block_content pos:start="857:17" pos:end="857:65">

		<expr_stmt pos:start="857:17" pos:end="857:65"><expr pos:start="857:17" pos:end="857:64"><call pos:start="857:17" pos:end="857:64">(<modifier pos:start="857:18" pos:end="857:18">*</modifier><name pos:start="857:19" pos:end="857:36"><name pos:start="857:19" pos:end="857:22">info</name><operator pos:start="857:23" pos:end="857:24">-&gt;</operator><name pos:start="857:25" pos:end="857:36">fprintf_func</name></name>) <argument_list pos:start="857:39" pos:end="857:64">(<argument pos:start="857:40" pos:end="857:51"><expr pos:start="857:40" pos:end="857:51"><name pos:start="857:40" pos:end="857:51"><name pos:start="857:40" pos:end="857:43">info</name><operator pos:start="857:44" pos:end="857:45">-&gt;</operator><name pos:start="857:46" pos:end="857:51">stream</name></name></expr></argument>, <argument pos:start="857:54" pos:end="857:58"><expr pos:start="857:54" pos:end="857:58"><literal type="string" pos:start="857:54" pos:end="857:58">"#%d"</literal></expr></argument>, <argument pos:start="857:61" pos:end="857:63"><expr pos:start="857:61" pos:end="857:63"><name pos:start="857:61" pos:end="857:63">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	      <break pos:start="859:15" pos:end="859:20">break;</break>



	    <default pos:start="863:13" pos:end="863:20">default:</default>

	      <return pos:start="865:15" pos:end="865:24">return <expr pos:start="865:22" pos:end="865:23"><operator pos:start="865:22" pos:end="865:22">-</operator><literal type="number" pos:start="865:23" pos:end="865:23">1</literal></expr>;</return>

	    </block_content>}</block></switch>

	</block_content>}</block></switch>



      <comment type="block" pos:start="873:7" pos:end="877:55">/* If place is '/', then this is the case of the mask bit for

	 mac/emac loads. Now that the arg has been printed, grab the

	 mask bit and if set, add a '&amp;' to the arg.  */</comment>

      <if_stmt pos:start="879:7" pos:end="889:9"><if pos:start="879:7" pos:end="889:9">if <condition pos:start="879:10" pos:end="879:23">(<expr pos:start="879:11" pos:end="879:22"><name pos:start="879:11" pos:end="879:15">place</name> <operator pos:start="879:17" pos:end="879:18">==</operator> <literal type="char" pos:start="879:20" pos:end="879:22">'/'</literal></expr>)</condition>

	<block pos:start="881:9" pos:end="889:9">{<block_content pos:start="883:11" pos:end="887:51">

	  <expr_stmt pos:start="883:11" pos:end="883:51"><expr pos:start="883:11" pos:end="883:50"><name pos:start="883:11" pos:end="883:13">val</name> <operator pos:start="883:15" pos:end="883:15">=</operator> <call pos:start="883:17" pos:end="883:50"><name pos:start="883:17" pos:end="883:25">fetch_arg</name> <argument_list pos:start="883:27" pos:end="883:50">(<argument pos:start="883:28" pos:end="883:33"><expr pos:start="883:28" pos:end="883:33"><name pos:start="883:28" pos:end="883:33">buffer</name></expr></argument>, <argument pos:start="883:36" pos:end="883:40"><expr pos:start="883:36" pos:end="883:40"><name pos:start="883:36" pos:end="883:40">place</name></expr></argument>, <argument pos:start="883:43" pos:end="883:43"><expr pos:start="883:43" pos:end="883:43"><literal type="number" pos:start="883:43" pos:end="883:43">1</literal></expr></argument>, <argument pos:start="883:46" pos:end="883:49"><expr pos:start="883:46" pos:end="883:49"><name pos:start="883:46" pos:end="883:49">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt pos:start="885:11" pos:end="887:51"><if pos:start="885:11" pos:end="887:51">if <condition pos:start="885:14" pos:end="885:18">(<expr pos:start="885:15" pos:end="885:17"><name pos:start="885:15" pos:end="885:17">val</name></expr>)</condition><block type="pseudo" pos:start="887:13" pos:end="887:51"><block_content pos:start="887:13" pos:end="887:51">

	    <expr_stmt pos:start="887:13" pos:end="887:51"><expr pos:start="887:13" pos:end="887:50"><call pos:start="887:13" pos:end="887:50"><name pos:start="887:13" pos:end="887:30"><name pos:start="887:13" pos:end="887:16">info</name><operator pos:start="887:17" pos:end="887:18">-&gt;</operator><name pos:start="887:19" pos:end="887:30">fprintf_func</name></name> <argument_list pos:start="887:32" pos:end="887:50">(<argument pos:start="887:33" pos:end="887:44"><expr pos:start="887:33" pos:end="887:44"><name pos:start="887:33" pos:end="887:44"><name pos:start="887:33" pos:end="887:36">info</name><operator pos:start="887:37" pos:end="887:38">-&gt;</operator><name pos:start="887:39" pos:end="887:44">stream</name></name></expr></argument>, <argument pos:start="887:47" pos:end="887:49"><expr pos:start="887:47" pos:end="887:49"><literal type="string" pos:start="887:47" pos:end="887:49">"&amp;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></if></if_stmt>

      <break pos:start="891:7" pos:end="891:12">break;</break>



    <case pos:start="895:5" pos:end="895:13">case <expr pos:start="895:10" pos:end="895:12"><literal type="char" pos:start="895:10" pos:end="895:12">'L'</literal></expr>:</case>

    <case pos:start="897:5" pos:end="897:13">case <expr pos:start="897:10" pos:end="897:12"><literal type="char" pos:start="897:10" pos:end="897:12">'l'</literal></expr>:</case>

	<if_stmt pos:start="899:9" pos:end="1069:20"><if pos:start="899:9" pos:end="979:11">if <condition pos:start="899:12" pos:end="899:25">(<expr pos:start="899:13" pos:end="899:24"><name pos:start="899:13" pos:end="899:17">place</name> <operator pos:start="899:19" pos:end="899:20">==</operator> <literal type="char" pos:start="899:22" pos:end="899:24">'w'</literal></expr>)</condition>

	  <block pos:start="901:11" pos:end="979:11">{<block_content pos:start="903:13" pos:end="977:17">

	    <decl_stmt pos:start="903:13" pos:end="903:25"><decl pos:start="903:13" pos:end="903:24"><type pos:start="903:13" pos:end="903:16"><name pos:start="903:13" pos:end="903:16">char</name></type> <name pos:start="903:18" pos:end="903:24">doneany</name></decl>;</decl_stmt>

	    <expr_stmt pos:start="905:13" pos:end="905:28"><expr pos:start="905:13" pos:end="905:27"><name pos:start="905:13" pos:end="905:14">p1</name> <operator pos:start="905:16" pos:end="905:16">=</operator> <name pos:start="905:18" pos:end="905:23">buffer</name> <operator pos:start="905:25" pos:end="905:25">+</operator> <literal type="number" pos:start="905:27" pos:end="905:27">2</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="907:13" pos:end="907:32"><expr pos:start="907:13" pos:end="907:31"><name pos:start="907:13" pos:end="907:15">val</name> <operator pos:start="907:17" pos:end="907:17">=</operator> <call pos:start="907:19" pos:end="907:31"><name pos:start="907:19" pos:end="907:26">NEXTWORD</name> <argument_list pos:start="907:28" pos:end="907:31">(<argument pos:start="907:29" pos:end="907:30"><expr pos:start="907:29" pos:end="907:30"><name pos:start="907:29" pos:end="907:30">p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block" pos:start="909:13" pos:end="911:33">/* Move the pointer ahead if this point is farther ahead

	       than the last.  */</comment>

	    <expr_stmt pos:start="913:13" pos:end="913:32"><expr pos:start="913:13" pos:end="913:31"><name pos:start="913:13" pos:end="913:13">p</name> <operator pos:start="913:15" pos:end="913:15">=</operator> <ternary pos:start="913:17" pos:end="913:31"><condition pos:start="913:17" pos:end="913:24"><expr pos:start="913:17" pos:end="913:22"><name pos:start="913:17" pos:end="913:18">p1</name> <operator pos:start="913:20" pos:end="913:20">&gt;</operator> <name pos:start="913:22" pos:end="913:22">p</name></expr> ?</condition><then pos:start="913:26" pos:end="913:27"> <expr pos:start="913:26" pos:end="913:27"><name pos:start="913:26" pos:end="913:27">p1</name></expr> </then><else pos:start="913:29" pos:end="913:31">: <expr pos:start="913:31" pos:end="913:31"><name pos:start="913:31" pos:end="913:31">p</name></expr></else></ternary></expr>;</expr_stmt>

	    <if_stmt pos:start="915:13" pos:end="923:15"><if pos:start="915:13" pos:end="923:15">if <condition pos:start="915:16" pos:end="915:25">(<expr pos:start="915:17" pos:end="915:24"><name pos:start="915:17" pos:end="915:19">val</name> <operator pos:start="915:21" pos:end="915:22">==</operator> <literal type="number" pos:start="915:24" pos:end="915:24">0</literal></expr>)</condition>

	      <block pos:start="917:15" pos:end="923:15">{<block_content pos:start="919:17" pos:end="921:22">

		<expr_stmt pos:start="919:17" pos:end="919:59"><expr pos:start="919:17" pos:end="919:58"><call pos:start="919:17" pos:end="919:58">(<modifier pos:start="919:18" pos:end="919:18">*</modifier><name pos:start="919:19" pos:end="919:36"><name pos:start="919:19" pos:end="919:22">info</name><operator pos:start="919:23" pos:end="919:24">-&gt;</operator><name pos:start="919:25" pos:end="919:36">fprintf_func</name></name>) <argument_list pos:start="919:39" pos:end="919:58">(<argument pos:start="919:40" pos:end="919:51"><expr pos:start="919:40" pos:end="919:51"><name pos:start="919:40" pos:end="919:51"><name pos:start="919:40" pos:end="919:43">info</name><operator pos:start="919:44" pos:end="919:45">-&gt;</operator><name pos:start="919:46" pos:end="919:51">stream</name></name></expr></argument>, <argument pos:start="919:54" pos:end="919:57"><expr pos:start="919:54" pos:end="919:57"><literal type="string" pos:start="919:54" pos:end="919:57">"#0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="921:17" pos:end="921:22">break;</break>

	      </block_content>}</block></if></if_stmt>

	    <if_stmt pos:start="925:13" pos:end="941:15"><if pos:start="925:13" pos:end="941:15">if <condition pos:start="925:16" pos:end="925:26">(<expr pos:start="925:17" pos:end="925:25"><operator pos:start="925:17" pos:end="925:17">*</operator><name pos:start="925:18" pos:end="925:18">d</name> <operator pos:start="925:20" pos:end="925:21">==</operator> <literal type="char" pos:start="925:23" pos:end="925:25">'l'</literal></expr>)</condition>

	      <block pos:start="927:15" pos:end="941:15">{<block_content pos:start="929:17" pos:end="939:29">

		<decl_stmt pos:start="929:17" pos:end="929:31"><decl pos:start="929:17" pos:end="929:30"><type pos:start="929:17" pos:end="929:19"><name pos:start="929:17" pos:end="929:19">int</name></type> <name pos:start="929:21" pos:end="929:26">newval</name> <init pos:start="929:28" pos:end="929:30">= <expr pos:start="929:30" pos:end="929:30"><literal type="number" pos:start="929:30" pos:end="929:30">0</literal></expr></init></decl>;</decl_stmt>



		<for pos:start="933:17" pos:end="937:41">for <control pos:start="933:21" pos:end="933:52">(<init pos:start="933:22" pos:end="933:31"><expr pos:start="933:22" pos:end="933:30"><name pos:start="933:22" pos:end="933:26">regno</name> <operator pos:start="933:28" pos:end="933:28">=</operator> <literal type="number" pos:start="933:30" pos:end="933:30">0</literal></expr>;</init> <condition pos:start="933:33" pos:end="933:43"><expr pos:start="933:33" pos:end="933:42"><name pos:start="933:33" pos:end="933:37">regno</name> <operator pos:start="933:39" pos:end="933:39">&lt;</operator> <literal type="number" pos:start="933:41" pos:end="933:42">16</literal></expr>;</condition> <incr pos:start="933:45" pos:end="933:51"><expr pos:start="933:45" pos:end="933:51"><operator pos:start="933:45" pos:end="933:46">++</operator><name pos:start="933:47" pos:end="933:51">regno</name></expr></incr>)</control><block type="pseudo" pos:start="935:19" pos:end="937:41"><block_content pos:start="935:19" pos:end="937:41">

		  <if_stmt pos:start="935:19" pos:end="937:41"><if pos:start="935:19" pos:end="937:41">if <condition pos:start="935:22" pos:end="935:46">(<expr pos:start="935:23" pos:end="935:45"><name pos:start="935:23" pos:end="935:25">val</name> <operator pos:start="935:27" pos:end="935:27">&amp;</operator> <operator pos:start="935:29" pos:end="935:29">(</operator><literal type="number" pos:start="935:30" pos:end="935:35">0x8000</literal> <operator pos:start="935:37" pos:end="935:38">&gt;&gt;</operator> <name pos:start="935:40" pos:end="935:44">regno</name><operator pos:start="935:45" pos:end="935:45">)</operator></expr>)</condition><block type="pseudo" pos:start="937:21" pos:end="937:41"><block_content pos:start="937:21" pos:end="937:41">

		    <expr_stmt pos:start="937:21" pos:end="937:41"><expr pos:start="937:21" pos:end="937:40"><name pos:start="937:21" pos:end="937:26">newval</name> <operator pos:start="937:28" pos:end="937:29">|=</operator> <literal type="number" pos:start="937:31" pos:end="937:31">1</literal> <operator pos:start="937:33" pos:end="937:34">&lt;&lt;</operator> <name pos:start="937:36" pos:end="937:40">regno</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

		<expr_stmt pos:start="939:17" pos:end="939:29"><expr pos:start="939:17" pos:end="939:28"><name pos:start="939:17" pos:end="939:19">val</name> <operator pos:start="939:21" pos:end="939:21">=</operator> <name pos:start="939:23" pos:end="939:28">newval</name></expr>;</expr_stmt>

	      </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="943:13" pos:end="943:26"><expr pos:start="943:13" pos:end="943:25"><name pos:start="943:13" pos:end="943:15">val</name> <operator pos:start="943:17" pos:end="943:18">&amp;=</operator> <literal type="number" pos:start="943:20" pos:end="943:25">0xffff</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="945:13" pos:end="945:24"><expr pos:start="945:13" pos:end="945:23"><name pos:start="945:13" pos:end="945:19">doneany</name> <operator pos:start="945:21" pos:end="945:21">=</operator> <literal type="number" pos:start="945:23" pos:end="945:23">0</literal></expr>;</expr_stmt>

	    <for pos:start="947:13" pos:end="977:17">for <control pos:start="947:17" pos:end="947:48">(<init pos:start="947:18" pos:end="947:27"><expr pos:start="947:18" pos:end="947:26"><name pos:start="947:18" pos:end="947:22">regno</name> <operator pos:start="947:24" pos:end="947:24">=</operator> <literal type="number" pos:start="947:26" pos:end="947:26">0</literal></expr>;</init> <condition pos:start="947:29" pos:end="947:39"><expr pos:start="947:29" pos:end="947:38"><name pos:start="947:29" pos:end="947:33">regno</name> <operator pos:start="947:35" pos:end="947:35">&lt;</operator> <literal type="number" pos:start="947:37" pos:end="947:38">16</literal></expr>;</condition> <incr pos:start="947:41" pos:end="947:47"><expr pos:start="947:41" pos:end="947:47"><operator pos:start="947:41" pos:end="947:42">++</operator><name pos:start="947:43" pos:end="947:47">regno</name></expr></incr>)</control><block type="pseudo" pos:start="949:15" pos:end="977:17"><block_content pos:start="949:15" pos:end="977:17">

	      <if_stmt pos:start="949:15" pos:end="977:17"><if pos:start="949:15" pos:end="977:17">if <condition pos:start="949:18" pos:end="949:37">(<expr pos:start="949:19" pos:end="949:36"><name pos:start="949:19" pos:end="949:21">val</name> <operator pos:start="949:23" pos:end="949:23">&amp;</operator> <operator pos:start="949:25" pos:end="949:25">(</operator><literal type="number" pos:start="949:26" pos:end="949:26">1</literal> <operator pos:start="949:28" pos:end="949:29">&lt;&lt;</operator> <name pos:start="949:31" pos:end="949:35">regno</name><operator pos:start="949:36" pos:end="949:36">)</operator></expr>)</condition>

		<block pos:start="951:17" pos:end="977:17">{<block_content pos:start="953:19" pos:end="975:61">

		  <decl_stmt pos:start="953:19" pos:end="953:34"><decl pos:start="953:19" pos:end="953:33"><type pos:start="953:19" pos:end="953:21"><name pos:start="953:19" pos:end="953:21">int</name></type> <name pos:start="953:23" pos:end="953:33">first_regno</name></decl>;</decl_stmt>



		  <if_stmt pos:start="957:19" pos:end="959:62"><if pos:start="957:19" pos:end="959:62">if <condition pos:start="957:22" pos:end="957:30">(<expr pos:start="957:23" pos:end="957:29"><name pos:start="957:23" pos:end="957:29">doneany</name></expr>)</condition><block type="pseudo" pos:start="959:21" pos:end="959:62"><block_content pos:start="959:21" pos:end="959:62">

		    <expr_stmt pos:start="959:21" pos:end="959:62"><expr pos:start="959:21" pos:end="959:61"><call pos:start="959:21" pos:end="959:61">(<modifier pos:start="959:22" pos:end="959:22">*</modifier><name pos:start="959:23" pos:end="959:40"><name pos:start="959:23" pos:end="959:26">info</name><operator pos:start="959:27" pos:end="959:28">-&gt;</operator><name pos:start="959:29" pos:end="959:40">fprintf_func</name></name>) <argument_list pos:start="959:43" pos:end="959:61">(<argument pos:start="959:44" pos:end="959:55"><expr pos:start="959:44" pos:end="959:55"><name pos:start="959:44" pos:end="959:55"><name pos:start="959:44" pos:end="959:47">info</name><operator pos:start="959:48" pos:end="959:49">-&gt;</operator><name pos:start="959:50" pos:end="959:55">stream</name></name></expr></argument>, <argument pos:start="959:58" pos:end="959:60"><expr pos:start="959:58" pos:end="959:60"><literal type="string" pos:start="959:58" pos:end="959:60">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		  <expr_stmt pos:start="961:19" pos:end="961:30"><expr pos:start="961:19" pos:end="961:29"><name pos:start="961:19" pos:end="961:25">doneany</name> <operator pos:start="961:27" pos:end="961:27">=</operator> <literal type="number" pos:start="961:29" pos:end="961:29">1</literal></expr>;</expr_stmt>

		  <expr_stmt pos:start="963:19" pos:end="963:79"><expr pos:start="963:19" pos:end="963:78"><call pos:start="963:19" pos:end="963:78">(<modifier pos:start="963:20" pos:end="963:20">*</modifier><name pos:start="963:21" pos:end="963:38"><name pos:start="963:21" pos:end="963:24">info</name><operator pos:start="963:25" pos:end="963:26">-&gt;</operator><name pos:start="963:27" pos:end="963:38">fprintf_func</name></name>) <argument_list pos:start="963:41" pos:end="963:78">(<argument pos:start="963:42" pos:end="963:53"><expr pos:start="963:42" pos:end="963:53"><name pos:start="963:42" pos:end="963:53"><name pos:start="963:42" pos:end="963:45">info</name><operator pos:start="963:46" pos:end="963:47">-&gt;</operator><name pos:start="963:48" pos:end="963:53">stream</name></name></expr></argument>, <argument pos:start="963:56" pos:end="963:59"><expr pos:start="963:56" pos:end="963:59"><literal type="string" pos:start="963:56" pos:end="963:59">"%s"</literal></expr></argument>, <argument pos:start="963:62" pos:end="963:77"><expr pos:start="963:62" pos:end="963:77"><name pos:start="963:62" pos:end="963:77"><name pos:start="963:62" pos:end="963:70">reg_names</name><index pos:start="963:71" pos:end="963:77">[<expr pos:start="963:72" pos:end="963:76"><name pos:start="963:72" pos:end="963:76">regno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <expr_stmt pos:start="965:19" pos:end="965:38"><expr pos:start="965:19" pos:end="965:37"><name pos:start="965:19" pos:end="965:29">first_regno</name> <operator pos:start="965:31" pos:end="965:31">=</operator> <name pos:start="965:33" pos:end="965:37">regno</name></expr>;</expr_stmt>

		  <while pos:start="967:19" pos:end="969:28">while <condition pos:start="967:25" pos:end="967:50">(<expr pos:start="967:26" pos:end="967:49"><name pos:start="967:26" pos:end="967:28">val</name> <operator pos:start="967:30" pos:end="967:30">&amp;</operator> <operator pos:start="967:32" pos:end="967:32">(</operator><literal type="number" pos:start="967:33" pos:end="967:33">1</literal> <operator pos:start="967:35" pos:end="967:36">&lt;&lt;</operator> <operator pos:start="967:38" pos:end="967:38">(</operator><name pos:start="967:39" pos:end="967:43">regno</name> <operator pos:start="967:45" pos:end="967:45">+</operator> <literal type="number" pos:start="967:47" pos:end="967:47">1</literal><operator pos:start="967:48" pos:end="967:48">)</operator><operator pos:start="967:49" pos:end="967:49">)</operator></expr>)</condition><block type="pseudo" pos:start="969:21" pos:end="969:28"><block_content pos:start="969:21" pos:end="969:28">

		    <expr_stmt pos:start="969:21" pos:end="969:28"><expr pos:start="969:21" pos:end="969:27"><operator pos:start="969:21" pos:end="969:22">++</operator><name pos:start="969:23" pos:end="969:27">regno</name></expr>;</expr_stmt></block_content></block></while>

		  <if_stmt pos:start="971:19" pos:end="975:61"><if pos:start="971:19" pos:end="975:61">if <condition pos:start="971:22" pos:end="971:42">(<expr pos:start="971:23" pos:end="971:41"><name pos:start="971:23" pos:end="971:27">regno</name> <operator pos:start="971:29" pos:end="971:29">&gt;</operator> <name pos:start="971:31" pos:end="971:41">first_regno</name></expr>)</condition><block type="pseudo" pos:start="973:21" pos:end="975:61"><block_content pos:start="973:21" pos:end="975:61">

		    <expr_stmt pos:start="973:21" pos:end="975:61"><expr pos:start="973:21" pos:end="975:60"><call pos:start="973:21" pos:end="975:60">(<modifier pos:start="973:22" pos:end="973:22">*</modifier><name pos:start="973:23" pos:end="973:40"><name pos:start="973:23" pos:end="973:26">info</name><operator pos:start="973:27" pos:end="973:28">-&gt;</operator><name pos:start="973:29" pos:end="973:40">fprintf_func</name></name>) <argument_list pos:start="973:43" pos:end="975:60">(<argument pos:start="973:44" pos:end="973:55"><expr pos:start="973:44" pos:end="973:55"><name pos:start="973:44" pos:end="973:55"><name pos:start="973:44" pos:end="973:47">info</name><operator pos:start="973:48" pos:end="973:49">-&gt;</operator><name pos:start="973:50" pos:end="973:55">stream</name></name></expr></argument>, <argument pos:start="973:58" pos:end="973:62"><expr pos:start="973:58" pos:end="973:62"><literal type="string" pos:start="973:58" pos:end="973:62">"-%s"</literal></expr></argument>,

					   <argument pos:start="975:44" pos:end="975:59"><expr pos:start="975:44" pos:end="975:59"><name pos:start="975:44" pos:end="975:59"><name pos:start="975:44" pos:end="975:52">reg_names</name><index pos:start="975:53" pos:end="975:59">[<expr pos:start="975:54" pos:end="975:58"><name pos:start="975:54" pos:end="975:58">regno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		</block_content>}</block></if></if_stmt></block_content></block></for>

	  </block_content>}</block></if>

	<if type="elseif" pos:start="981:9" pos:end="1051:11">else if <condition pos:start="981:17" pos:end="981:30">(<expr pos:start="981:18" pos:end="981:29"><name pos:start="981:18" pos:end="981:22">place</name> <operator pos:start="981:24" pos:end="981:25">==</operator> <literal type="char" pos:start="981:27" pos:end="981:29">'3'</literal></expr>)</condition>

	  <block pos:start="983:11" pos:end="1051:11">{<block_content pos:start="987:13" pos:end="1049:17">

	    <comment type="block" pos:start="985:13" pos:end="985:33">/* `fmovem' insn.  */</comment>

	    <decl_stmt pos:start="987:13" pos:end="987:25"><decl pos:start="987:13" pos:end="987:24"><type pos:start="987:13" pos:end="987:16"><name pos:start="987:13" pos:end="987:16">char</name></type> <name pos:start="987:18" pos:end="987:24">doneany</name></decl>;</decl_stmt>

	    <expr_stmt pos:start="989:13" pos:end="989:53"><expr pos:start="989:13" pos:end="989:52"><name pos:start="989:13" pos:end="989:15">val</name> <operator pos:start="989:17" pos:end="989:17">=</operator> <call pos:start="989:19" pos:end="989:52"><name pos:start="989:19" pos:end="989:27">fetch_arg</name> <argument_list pos:start="989:29" pos:end="989:52">(<argument pos:start="989:30" pos:end="989:35"><expr pos:start="989:30" pos:end="989:35"><name pos:start="989:30" pos:end="989:35">buffer</name></expr></argument>, <argument pos:start="989:38" pos:end="989:42"><expr pos:start="989:38" pos:end="989:42"><name pos:start="989:38" pos:end="989:42">place</name></expr></argument>, <argument pos:start="989:45" pos:end="989:45"><expr pos:start="989:45" pos:end="989:45"><literal type="number" pos:start="989:45" pos:end="989:45">8</literal></expr></argument>, <argument pos:start="989:48" pos:end="989:51"><expr pos:start="989:48" pos:end="989:51"><name pos:start="989:48" pos:end="989:51">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="991:13" pos:end="999:15"><if pos:start="991:13" pos:end="999:15">if <condition pos:start="991:16" pos:end="991:25">(<expr pos:start="991:17" pos:end="991:24"><name pos:start="991:17" pos:end="991:19">val</name> <operator pos:start="991:21" pos:end="991:22">==</operator> <literal type="number" pos:start="991:24" pos:end="991:24">0</literal></expr>)</condition>

	      <block pos:start="993:15" pos:end="999:15">{<block_content pos:start="995:17" pos:end="997:22">

		<expr_stmt pos:start="995:17" pos:end="995:59"><expr pos:start="995:17" pos:end="995:58"><call pos:start="995:17" pos:end="995:58">(<modifier pos:start="995:18" pos:end="995:18">*</modifier><name pos:start="995:19" pos:end="995:36"><name pos:start="995:19" pos:end="995:22">info</name><operator pos:start="995:23" pos:end="995:24">-&gt;</operator><name pos:start="995:25" pos:end="995:36">fprintf_func</name></name>) <argument_list pos:start="995:39" pos:end="995:58">(<argument pos:start="995:40" pos:end="995:51"><expr pos:start="995:40" pos:end="995:51"><name pos:start="995:40" pos:end="995:51"><name pos:start="995:40" pos:end="995:43">info</name><operator pos:start="995:44" pos:end="995:45">-&gt;</operator><name pos:start="995:46" pos:end="995:51">stream</name></name></expr></argument>, <argument pos:start="995:54" pos:end="995:57"><expr pos:start="995:54" pos:end="995:57"><literal type="string" pos:start="995:54" pos:end="995:57">"#0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="997:17" pos:end="997:22">break;</break>

	      </block_content>}</block></if></if_stmt>

	    <if_stmt pos:start="1001:13" pos:end="1017:15"><if pos:start="1001:13" pos:end="1017:15">if <condition pos:start="1001:16" pos:end="1001:26">(<expr pos:start="1001:17" pos:end="1001:25"><operator pos:start="1001:17" pos:end="1001:17">*</operator><name pos:start="1001:18" pos:end="1001:18">d</name> <operator pos:start="1001:20" pos:end="1001:21">==</operator> <literal type="char" pos:start="1001:23" pos:end="1001:25">'l'</literal></expr>)</condition>

	      <block pos:start="1003:15" pos:end="1017:15">{<block_content pos:start="1005:17" pos:end="1015:29">

		<decl_stmt pos:start="1005:17" pos:end="1005:31"><decl pos:start="1005:17" pos:end="1005:30"><type pos:start="1005:17" pos:end="1005:19"><name pos:start="1005:17" pos:end="1005:19">int</name></type> <name pos:start="1005:21" pos:end="1005:26">newval</name> <init pos:start="1005:28" pos:end="1005:30">= <expr pos:start="1005:30" pos:end="1005:30"><literal type="number" pos:start="1005:30" pos:end="1005:30">0</literal></expr></init></decl>;</decl_stmt>



		<for pos:start="1009:17" pos:end="1013:41">for <control pos:start="1009:21" pos:end="1009:51">(<init pos:start="1009:22" pos:end="1009:31"><expr pos:start="1009:22" pos:end="1009:30"><name pos:start="1009:22" pos:end="1009:26">regno</name> <operator pos:start="1009:28" pos:end="1009:28">=</operator> <literal type="number" pos:start="1009:30" pos:end="1009:30">0</literal></expr>;</init> <condition pos:start="1009:33" pos:end="1009:42"><expr pos:start="1009:33" pos:end="1009:41"><name pos:start="1009:33" pos:end="1009:37">regno</name> <operator pos:start="1009:39" pos:end="1009:39">&lt;</operator> <literal type="number" pos:start="1009:41" pos:end="1009:41">8</literal></expr>;</condition> <incr pos:start="1009:44" pos:end="1009:50"><expr pos:start="1009:44" pos:end="1009:50"><operator pos:start="1009:44" pos:end="1009:45">++</operator><name pos:start="1009:46" pos:end="1009:50">regno</name></expr></incr>)</control><block type="pseudo" pos:start="1011:19" pos:end="1013:41"><block_content pos:start="1011:19" pos:end="1013:41">

		  <if_stmt pos:start="1011:19" pos:end="1013:41"><if pos:start="1011:19" pos:end="1013:41">if <condition pos:start="1011:22" pos:end="1011:44">(<expr pos:start="1011:23" pos:end="1011:43"><name pos:start="1011:23" pos:end="1011:25">val</name> <operator pos:start="1011:27" pos:end="1011:27">&amp;</operator> <operator pos:start="1011:29" pos:end="1011:29">(</operator><literal type="number" pos:start="1011:30" pos:end="1011:33">0x80</literal> <operator pos:start="1011:35" pos:end="1011:36">&gt;&gt;</operator> <name pos:start="1011:38" pos:end="1011:42">regno</name><operator pos:start="1011:43" pos:end="1011:43">)</operator></expr>)</condition><block type="pseudo" pos:start="1013:21" pos:end="1013:41"><block_content pos:start="1013:21" pos:end="1013:41">

		    <expr_stmt pos:start="1013:21" pos:end="1013:41"><expr pos:start="1013:21" pos:end="1013:40"><name pos:start="1013:21" pos:end="1013:26">newval</name> <operator pos:start="1013:28" pos:end="1013:29">|=</operator> <literal type="number" pos:start="1013:31" pos:end="1013:31">1</literal> <operator pos:start="1013:33" pos:end="1013:34">&lt;&lt;</operator> <name pos:start="1013:36" pos:end="1013:40">regno</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

		<expr_stmt pos:start="1015:17" pos:end="1015:29"><expr pos:start="1015:17" pos:end="1015:28"><name pos:start="1015:17" pos:end="1015:19">val</name> <operator pos:start="1015:21" pos:end="1015:21">=</operator> <name pos:start="1015:23" pos:end="1015:28">newval</name></expr>;</expr_stmt>

	      </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="1019:13" pos:end="1019:24"><expr pos:start="1019:13" pos:end="1019:23"><name pos:start="1019:13" pos:end="1019:15">val</name> <operator pos:start="1019:17" pos:end="1019:18">&amp;=</operator> <literal type="number" pos:start="1019:20" pos:end="1019:23">0xff</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="1021:13" pos:end="1021:24"><expr pos:start="1021:13" pos:end="1021:23"><name pos:start="1021:13" pos:end="1021:19">doneany</name> <operator pos:start="1021:21" pos:end="1021:21">=</operator> <literal type="number" pos:start="1021:23" pos:end="1021:23">0</literal></expr>;</expr_stmt>

	    <for pos:start="1023:13" pos:end="1049:17">for <control pos:start="1023:17" pos:end="1023:47">(<init pos:start="1023:18" pos:end="1023:27"><expr pos:start="1023:18" pos:end="1023:26"><name pos:start="1023:18" pos:end="1023:22">regno</name> <operator pos:start="1023:24" pos:end="1023:24">=</operator> <literal type="number" pos:start="1023:26" pos:end="1023:26">0</literal></expr>;</init> <condition pos:start="1023:29" pos:end="1023:38"><expr pos:start="1023:29" pos:end="1023:37"><name pos:start="1023:29" pos:end="1023:33">regno</name> <operator pos:start="1023:35" pos:end="1023:35">&lt;</operator> <literal type="number" pos:start="1023:37" pos:end="1023:37">8</literal></expr>;</condition> <incr pos:start="1023:40" pos:end="1023:46"><expr pos:start="1023:40" pos:end="1023:46"><operator pos:start="1023:40" pos:end="1023:41">++</operator><name pos:start="1023:42" pos:end="1023:46">regno</name></expr></incr>)</control><block type="pseudo" pos:start="1025:15" pos:end="1049:17"><block_content pos:start="1025:15" pos:end="1049:17">

	      <if_stmt pos:start="1025:15" pos:end="1049:17"><if pos:start="1025:15" pos:end="1049:17">if <condition pos:start="1025:18" pos:end="1025:37">(<expr pos:start="1025:19" pos:end="1025:36"><name pos:start="1025:19" pos:end="1025:21">val</name> <operator pos:start="1025:23" pos:end="1025:23">&amp;</operator> <operator pos:start="1025:25" pos:end="1025:25">(</operator><literal type="number" pos:start="1025:26" pos:end="1025:26">1</literal> <operator pos:start="1025:28" pos:end="1025:29">&lt;&lt;</operator> <name pos:start="1025:31" pos:end="1025:35">regno</name><operator pos:start="1025:36" pos:end="1025:36">)</operator></expr>)</condition>

		<block pos:start="1027:17" pos:end="1049:17">{<block_content pos:start="1029:19" pos:end="1047:75">

		  <decl_stmt pos:start="1029:19" pos:end="1029:34"><decl pos:start="1029:19" pos:end="1029:33"><type pos:start="1029:19" pos:end="1029:21"><name pos:start="1029:19" pos:end="1029:21">int</name></type> <name pos:start="1029:23" pos:end="1029:33">first_regno</name></decl>;</decl_stmt>

		  <if_stmt pos:start="1031:19" pos:end="1033:62"><if pos:start="1031:19" pos:end="1033:62">if <condition pos:start="1031:22" pos:end="1031:30">(<expr pos:start="1031:23" pos:end="1031:29"><name pos:start="1031:23" pos:end="1031:29">doneany</name></expr>)</condition><block type="pseudo" pos:start="1033:21" pos:end="1033:62"><block_content pos:start="1033:21" pos:end="1033:62">

		    <expr_stmt pos:start="1033:21" pos:end="1033:62"><expr pos:start="1033:21" pos:end="1033:61"><call pos:start="1033:21" pos:end="1033:61">(<modifier pos:start="1033:22" pos:end="1033:22">*</modifier><name pos:start="1033:23" pos:end="1033:40"><name pos:start="1033:23" pos:end="1033:26">info</name><operator pos:start="1033:27" pos:end="1033:28">-&gt;</operator><name pos:start="1033:29" pos:end="1033:40">fprintf_func</name></name>) <argument_list pos:start="1033:43" pos:end="1033:61">(<argument pos:start="1033:44" pos:end="1033:55"><expr pos:start="1033:44" pos:end="1033:55"><name pos:start="1033:44" pos:end="1033:55"><name pos:start="1033:44" pos:end="1033:47">info</name><operator pos:start="1033:48" pos:end="1033:49">-&gt;</operator><name pos:start="1033:50" pos:end="1033:55">stream</name></name></expr></argument>, <argument pos:start="1033:58" pos:end="1033:60"><expr pos:start="1033:58" pos:end="1033:60"><literal type="string" pos:start="1033:58" pos:end="1033:60">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		  <expr_stmt pos:start="1035:19" pos:end="1035:30"><expr pos:start="1035:19" pos:end="1035:29"><name pos:start="1035:19" pos:end="1035:25">doneany</name> <operator pos:start="1035:27" pos:end="1035:27">=</operator> <literal type="number" pos:start="1035:29" pos:end="1035:29">1</literal></expr>;</expr_stmt>

		  <expr_stmt pos:start="1037:19" pos:end="1037:72"><expr pos:start="1037:19" pos:end="1037:71"><call pos:start="1037:19" pos:end="1037:71">(<modifier pos:start="1037:20" pos:end="1037:20">*</modifier><name pos:start="1037:21" pos:end="1037:38"><name pos:start="1037:21" pos:end="1037:24">info</name><operator pos:start="1037:25" pos:end="1037:26">-&gt;</operator><name pos:start="1037:27" pos:end="1037:38">fprintf_func</name></name>) <argument_list pos:start="1037:41" pos:end="1037:71">(<argument pos:start="1037:42" pos:end="1037:53"><expr pos:start="1037:42" pos:end="1037:53"><name pos:start="1037:42" pos:end="1037:53"><name pos:start="1037:42" pos:end="1037:45">info</name><operator pos:start="1037:46" pos:end="1037:47">-&gt;</operator><name pos:start="1037:48" pos:end="1037:53">stream</name></name></expr></argument>, <argument pos:start="1037:56" pos:end="1037:63"><expr pos:start="1037:56" pos:end="1037:63"><literal type="string" pos:start="1037:56" pos:end="1037:63">"%%fp%d"</literal></expr></argument>, <argument pos:start="1037:66" pos:end="1037:70"><expr pos:start="1037:66" pos:end="1037:70"><name pos:start="1037:66" pos:end="1037:70">regno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <expr_stmt pos:start="1039:19" pos:end="1039:38"><expr pos:start="1039:19" pos:end="1039:37"><name pos:start="1039:19" pos:end="1039:29">first_regno</name> <operator pos:start="1039:31" pos:end="1039:31">=</operator> <name pos:start="1039:33" pos:end="1039:37">regno</name></expr>;</expr_stmt>

		  <while pos:start="1041:19" pos:end="1043:28">while <condition pos:start="1041:25" pos:end="1041:50">(<expr pos:start="1041:26" pos:end="1041:49"><name pos:start="1041:26" pos:end="1041:28">val</name> <operator pos:start="1041:30" pos:end="1041:30">&amp;</operator> <operator pos:start="1041:32" pos:end="1041:32">(</operator><literal type="number" pos:start="1041:33" pos:end="1041:33">1</literal> <operator pos:start="1041:35" pos:end="1041:36">&lt;&lt;</operator> <operator pos:start="1041:38" pos:end="1041:38">(</operator><name pos:start="1041:39" pos:end="1041:43">regno</name> <operator pos:start="1041:45" pos:end="1041:45">+</operator> <literal type="number" pos:start="1041:47" pos:end="1041:47">1</literal><operator pos:start="1041:48" pos:end="1041:48">)</operator><operator pos:start="1041:49" pos:end="1041:49">)</operator></expr>)</condition><block type="pseudo" pos:start="1043:21" pos:end="1043:28"><block_content pos:start="1043:21" pos:end="1043:28">

		    <expr_stmt pos:start="1043:21" pos:end="1043:28"><expr pos:start="1043:21" pos:end="1043:27"><operator pos:start="1043:21" pos:end="1043:22">++</operator><name pos:start="1043:23" pos:end="1043:27">regno</name></expr>;</expr_stmt></block_content></block></while>

		  <if_stmt pos:start="1045:19" pos:end="1047:75"><if pos:start="1045:19" pos:end="1047:75">if <condition pos:start="1045:22" pos:end="1045:42">(<expr pos:start="1045:23" pos:end="1045:41"><name pos:start="1045:23" pos:end="1045:27">regno</name> <operator pos:start="1045:29" pos:end="1045:29">&gt;</operator> <name pos:start="1045:31" pos:end="1045:41">first_regno</name></expr>)</condition><block type="pseudo" pos:start="1047:21" pos:end="1047:75"><block_content pos:start="1047:21" pos:end="1047:75">

		    <expr_stmt pos:start="1047:21" pos:end="1047:75"><expr pos:start="1047:21" pos:end="1047:74"><call pos:start="1047:21" pos:end="1047:74">(<modifier pos:start="1047:22" pos:end="1047:22">*</modifier><name pos:start="1047:23" pos:end="1047:40"><name pos:start="1047:23" pos:end="1047:26">info</name><operator pos:start="1047:27" pos:end="1047:28">-&gt;</operator><name pos:start="1047:29" pos:end="1047:40">fprintf_func</name></name>) <argument_list pos:start="1047:43" pos:end="1047:74">(<argument pos:start="1047:44" pos:end="1047:55"><expr pos:start="1047:44" pos:end="1047:55"><name pos:start="1047:44" pos:end="1047:55"><name pos:start="1047:44" pos:end="1047:47">info</name><operator pos:start="1047:48" pos:end="1047:49">-&gt;</operator><name pos:start="1047:50" pos:end="1047:55">stream</name></name></expr></argument>, <argument pos:start="1047:58" pos:end="1047:66"><expr pos:start="1047:58" pos:end="1047:66"><literal type="string" pos:start="1047:58" pos:end="1047:66">"-%%fp%d"</literal></expr></argument>, <argument pos:start="1047:69" pos:end="1047:73"><expr pos:start="1047:69" pos:end="1047:73"><name pos:start="1047:69" pos:end="1047:73">regno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		</block_content>}</block></if></if_stmt></block_content></block></for>

	  </block_content>}</block></if>

	<if type="elseif" pos:start="1053:9" pos:end="1065:11">else if <condition pos:start="1053:17" pos:end="1053:30">(<expr pos:start="1053:18" pos:end="1053:29"><name pos:start="1053:18" pos:end="1053:22">place</name> <operator pos:start="1053:24" pos:end="1053:25">==</operator> <literal type="char" pos:start="1053:27" pos:end="1053:29">'8'</literal></expr>)</condition>

	  <block pos:start="1055:11" pos:end="1065:11">{<block_content pos:start="1059:13" pos:end="1063:65">

	    <comment type="block" pos:start="1057:13" pos:end="1057:51">/* fmoveml for FP status registers.  */</comment>

	    <expr_stmt pos:start="1059:13" pos:end="1063:65"><expr pos:start="1059:13" pos:end="1063:64"><call pos:start="1059:13" pos:end="1063:64">(<modifier pos:start="1059:14" pos:end="1059:14">*</modifier><name pos:start="1059:15" pos:end="1059:32"><name pos:start="1059:15" pos:end="1059:18">info</name><operator pos:start="1059:19" pos:end="1059:20">-&gt;</operator><name pos:start="1059:21" pos:end="1059:32">fprintf_func</name></name>) <argument_list pos:start="1059:35" pos:end="1063:64">(<argument pos:start="1059:36" pos:end="1059:47"><expr pos:start="1059:36" pos:end="1059:47"><name pos:start="1059:36" pos:end="1059:47"><name pos:start="1059:36" pos:end="1059:39">info</name><operator pos:start="1059:40" pos:end="1059:41">-&gt;</operator><name pos:start="1059:42" pos:end="1059:47">stream</name></name></expr></argument>, <argument pos:start="1059:50" pos:end="1059:53"><expr pos:start="1059:50" pos:end="1059:53"><literal type="string" pos:start="1059:50" pos:end="1059:53">"%s"</literal></expr></argument>,

				   <argument pos:start="1061:36" pos:end="1063:63"><expr pos:start="1061:36" pos:end="1063:63"><name pos:start="1061:36" pos:end="1063:63"><name pos:start="1061:36" pos:end="1061:45">fpcr_names</name><index pos:start="1061:46" pos:end="1063:63">[<expr pos:start="1061:47" pos:end="1063:62"><call pos:start="1061:47" pos:end="1063:62"><name pos:start="1061:47" pos:end="1061:55">fetch_arg</name> <argument_list pos:start="1061:57" pos:end="1063:62">(<argument pos:start="1061:58" pos:end="1061:63"><expr pos:start="1061:58" pos:end="1061:63"><name pos:start="1061:58" pos:end="1061:63">buffer</name></expr></argument>, <argument pos:start="1061:66" pos:end="1061:70"><expr pos:start="1061:66" pos:end="1061:70"><name pos:start="1061:66" pos:end="1061:70">place</name></expr></argument>, <argument pos:start="1061:73" pos:end="1061:73"><expr pos:start="1061:73" pos:end="1061:73"><literal type="number" pos:start="1061:73" pos:end="1061:73">3</literal></expr></argument>,

							 <argument pos:start="1063:58" pos:end="1063:61"><expr pos:start="1063:58" pos:end="1063:61"><name pos:start="1063:58" pos:end="1063:61">info</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></if>

	<else pos:start="1067:9" pos:end="1069:20">else<block type="pseudo" pos:start="1069:11" pos:end="1069:20"><block_content pos:start="1069:11" pos:end="1069:20">

	  <return pos:start="1069:11" pos:end="1069:20">return <expr pos:start="1069:18" pos:end="1069:19"><operator pos:start="1069:18" pos:end="1069:18">-</operator><literal type="number" pos:start="1069:19" pos:end="1069:19">2</literal></expr>;</return></block_content></block></else></if_stmt>

      <break pos:start="1071:7" pos:end="1071:12">break;</break>



    <case pos:start="1075:5" pos:end="1075:13">case <expr pos:start="1075:10" pos:end="1075:12"><literal type="char" pos:start="1075:10" pos:end="1075:12">'X'</literal></expr>:</case>

      <expr_stmt pos:start="1077:7" pos:end="1077:18"><expr pos:start="1077:7" pos:end="1077:17"><name pos:start="1077:7" pos:end="1077:11">place</name> <operator pos:start="1077:13" pos:end="1077:13">=</operator> <literal type="char" pos:start="1077:15" pos:end="1077:17">'8'</literal></expr>;</expr_stmt>

    <case pos:start="1079:5" pos:end="1079:13">case <expr pos:start="1079:10" pos:end="1079:12"><literal type="char" pos:start="1079:10" pos:end="1079:12">'Y'</literal></expr>:</case>

    <case pos:start="1081:5" pos:end="1081:13">case <expr pos:start="1081:10" pos:end="1081:12"><literal type="char" pos:start="1081:10" pos:end="1081:12">'Z'</literal></expr>:</case>

    <case pos:start="1083:5" pos:end="1083:13">case <expr pos:start="1083:10" pos:end="1083:12"><literal type="char" pos:start="1083:10" pos:end="1083:12">'W'</literal></expr>:</case>

    <case pos:start="1085:5" pos:end="1085:13">case <expr pos:start="1085:10" pos:end="1085:12"><literal type="char" pos:start="1085:10" pos:end="1085:12">'0'</literal></expr>:</case>

    <case pos:start="1087:5" pos:end="1087:13">case <expr pos:start="1087:10" pos:end="1087:12"><literal type="char" pos:start="1087:10" pos:end="1087:12">'1'</literal></expr>:</case>

    <case pos:start="1089:5" pos:end="1089:13">case <expr pos:start="1089:10" pos:end="1089:12"><literal type="char" pos:start="1089:10" pos:end="1089:12">'2'</literal></expr>:</case>

    <case pos:start="1091:5" pos:end="1091:13">case <expr pos:start="1091:10" pos:end="1091:12"><literal type="char" pos:start="1091:10" pos:end="1091:12">'3'</literal></expr>:</case>

      <block pos:start="1093:7" pos:end="1159:7">{<block_content pos:start="1095:9" pos:end="1157:59">

	<decl_stmt pos:start="1095:9" pos:end="1095:53"><decl pos:start="1095:9" pos:end="1095:52"><type pos:start="1095:9" pos:end="1095:11"><name pos:start="1095:9" pos:end="1095:11">int</name></type> <name pos:start="1095:13" pos:end="1095:15">val</name> <init pos:start="1095:17" pos:end="1095:52">= <expr pos:start="1095:19" pos:end="1095:52"><call pos:start="1095:19" pos:end="1095:52"><name pos:start="1095:19" pos:end="1095:27">fetch_arg</name> <argument_list pos:start="1095:29" pos:end="1095:52">(<argument pos:start="1095:30" pos:end="1095:35"><expr pos:start="1095:30" pos:end="1095:35"><name pos:start="1095:30" pos:end="1095:35">buffer</name></expr></argument>, <argument pos:start="1095:38" pos:end="1095:42"><expr pos:start="1095:38" pos:end="1095:42"><name pos:start="1095:38" pos:end="1095:42">place</name></expr></argument>, <argument pos:start="1095:45" pos:end="1095:45"><expr pos:start="1095:45" pos:end="1095:45"><literal type="number" pos:start="1095:45" pos:end="1095:45">5</literal></expr></argument>, <argument pos:start="1095:48" pos:end="1095:51"><expr pos:start="1095:48" pos:end="1095:51"><name pos:start="1095:48" pos:end="1095:51">info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="1097:9" pos:end="1097:29"><decl pos:start="1097:9" pos:end="1097:28"><type pos:start="1097:9" pos:end="1097:20"><specifier pos:start="1097:9" pos:end="1097:13">const</specifier> <name pos:start="1097:15" pos:end="1097:18">char</name> <modifier pos:start="1097:20" pos:end="1097:20">*</modifier></type><name pos:start="1097:21" pos:end="1097:24">name</name> <init pos:start="1097:26" pos:end="1097:28">= <expr pos:start="1097:28" pos:end="1097:28"><literal type="number" pos:start="1097:28" pos:end="1097:28">0</literal></expr></init></decl>;</decl_stmt>



	<switch pos:start="1101:9" pos:end="1153:11">switch <condition pos:start="1101:16" pos:end="1101:20">(<expr pos:start="1101:17" pos:end="1101:19"><name pos:start="1101:17" pos:end="1101:19">val</name></expr>)</condition>

	  <block pos:start="1103:11" pos:end="1153:11">{<block_content pos:start="1105:11" pos:end="1151:75">

	  <case pos:start="1105:11" pos:end="1105:17">case <expr pos:start="1105:16" pos:end="1105:16"><literal type="number" pos:start="1105:16" pos:end="1105:16">2</literal></expr>:</case> <expr_stmt pos:start="1105:19" pos:end="1105:32"><expr pos:start="1105:19" pos:end="1105:31"><name pos:start="1105:19" pos:end="1105:22">name</name> <operator pos:start="1105:24" pos:end="1105:24">=</operator> <literal type="string" pos:start="1105:26" pos:end="1105:31">"%tt0"</literal></expr>;</expr_stmt> <break pos:start="1105:34" pos:end="1105:39">break;</break>

	  <case pos:start="1107:11" pos:end="1107:17">case <expr pos:start="1107:16" pos:end="1107:16"><literal type="number" pos:start="1107:16" pos:end="1107:16">3</literal></expr>:</case> <expr_stmt pos:start="1107:19" pos:end="1107:32"><expr pos:start="1107:19" pos:end="1107:31"><name pos:start="1107:19" pos:end="1107:22">name</name> <operator pos:start="1107:24" pos:end="1107:24">=</operator> <literal type="string" pos:start="1107:26" pos:end="1107:31">"%tt1"</literal></expr>;</expr_stmt> <break pos:start="1107:34" pos:end="1107:39">break;</break>

	  <case pos:start="1109:11" pos:end="1109:20">case <expr pos:start="1109:16" pos:end="1109:19"><literal type="number" pos:start="1109:16" pos:end="1109:19">0x10</literal></expr>:</case> <expr_stmt pos:start="1109:22" pos:end="1109:34"><expr pos:start="1109:22" pos:end="1109:33"><name pos:start="1109:22" pos:end="1109:25">name</name> <operator pos:start="1109:27" pos:end="1109:27">=</operator> <literal type="string" pos:start="1109:29" pos:end="1109:33">"%tc"</literal></expr>;</expr_stmt> <break pos:start="1109:36" pos:end="1109:41">break;</break>

	  <case pos:start="1111:11" pos:end="1111:20">case <expr pos:start="1111:16" pos:end="1111:19"><literal type="number" pos:start="1111:16" pos:end="1111:19">0x11</literal></expr>:</case> <expr_stmt pos:start="1111:22" pos:end="1111:35"><expr pos:start="1111:22" pos:end="1111:34"><name pos:start="1111:22" pos:end="1111:25">name</name> <operator pos:start="1111:27" pos:end="1111:27">=</operator> <literal type="string" pos:start="1111:29" pos:end="1111:34">"%drp"</literal></expr>;</expr_stmt> <break pos:start="1111:37" pos:end="1111:42">break;</break>

	  <case pos:start="1113:11" pos:end="1113:20">case <expr pos:start="1113:16" pos:end="1113:19"><literal type="number" pos:start="1113:16" pos:end="1113:19">0x12</literal></expr>:</case> <expr_stmt pos:start="1113:22" pos:end="1113:35"><expr pos:start="1113:22" pos:end="1113:34"><name pos:start="1113:22" pos:end="1113:25">name</name> <operator pos:start="1113:27" pos:end="1113:27">=</operator> <literal type="string" pos:start="1113:29" pos:end="1113:34">"%srp"</literal></expr>;</expr_stmt> <break pos:start="1113:37" pos:end="1113:42">break;</break>

	  <case pos:start="1115:11" pos:end="1115:20">case <expr pos:start="1115:16" pos:end="1115:19"><literal type="number" pos:start="1115:16" pos:end="1115:19">0x13</literal></expr>:</case> <expr_stmt pos:start="1115:22" pos:end="1115:35"><expr pos:start="1115:22" pos:end="1115:34"><name pos:start="1115:22" pos:end="1115:25">name</name> <operator pos:start="1115:27" pos:end="1115:27">=</operator> <literal type="string" pos:start="1115:29" pos:end="1115:34">"%crp"</literal></expr>;</expr_stmt> <break pos:start="1115:37" pos:end="1115:42">break;</break>

	  <case pos:start="1117:11" pos:end="1117:20">case <expr pos:start="1117:16" pos:end="1117:19"><literal type="number" pos:start="1117:16" pos:end="1117:19">0x14</literal></expr>:</case> <expr_stmt pos:start="1117:22" pos:end="1117:35"><expr pos:start="1117:22" pos:end="1117:34"><name pos:start="1117:22" pos:end="1117:25">name</name> <operator pos:start="1117:27" pos:end="1117:27">=</operator> <literal type="string" pos:start="1117:29" pos:end="1117:34">"%cal"</literal></expr>;</expr_stmt> <break pos:start="1117:37" pos:end="1117:42">break;</break>

	  <case pos:start="1119:11" pos:end="1119:20">case <expr pos:start="1119:16" pos:end="1119:19"><literal type="number" pos:start="1119:16" pos:end="1119:19">0x15</literal></expr>:</case> <expr_stmt pos:start="1119:22" pos:end="1119:35"><expr pos:start="1119:22" pos:end="1119:34"><name pos:start="1119:22" pos:end="1119:25">name</name> <operator pos:start="1119:27" pos:end="1119:27">=</operator> <literal type="string" pos:start="1119:29" pos:end="1119:34">"%val"</literal></expr>;</expr_stmt> <break pos:start="1119:37" pos:end="1119:42">break;</break>

	  <case pos:start="1121:11" pos:end="1121:20">case <expr pos:start="1121:16" pos:end="1121:19"><literal type="number" pos:start="1121:16" pos:end="1121:19">0x16</literal></expr>:</case> <expr_stmt pos:start="1121:22" pos:end="1121:35"><expr pos:start="1121:22" pos:end="1121:34"><name pos:start="1121:22" pos:end="1121:25">name</name> <operator pos:start="1121:27" pos:end="1121:27">=</operator> <literal type="string" pos:start="1121:29" pos:end="1121:34">"%scc"</literal></expr>;</expr_stmt> <break pos:start="1121:37" pos:end="1121:42">break;</break>

	  <case pos:start="1123:11" pos:end="1123:20">case <expr pos:start="1123:16" pos:end="1123:19"><literal type="number" pos:start="1123:16" pos:end="1123:19">0x17</literal></expr>:</case> <expr_stmt pos:start="1123:22" pos:end="1123:34"><expr pos:start="1123:22" pos:end="1123:33"><name pos:start="1123:22" pos:end="1123:25">name</name> <operator pos:start="1123:27" pos:end="1123:27">=</operator> <literal type="string" pos:start="1123:29" pos:end="1123:33">"%ac"</literal></expr>;</expr_stmt> <break pos:start="1123:36" pos:end="1123:41">break;</break>

 	  <case pos:start="1125:11" pos:end="1125:20">case <expr pos:start="1125:16" pos:end="1125:19"><literal type="number" pos:start="1125:16" pos:end="1125:19">0x18</literal></expr>:</case> <expr_stmt pos:start="1125:22" pos:end="1125:35"><expr pos:start="1125:22" pos:end="1125:34"><name pos:start="1125:22" pos:end="1125:25">name</name> <operator pos:start="1125:27" pos:end="1125:27">=</operator> <literal type="string" pos:start="1125:29" pos:end="1125:34">"%psr"</literal></expr>;</expr_stmt> <break pos:start="1125:37" pos:end="1125:42">break;</break>

	  <case pos:start="1127:11" pos:end="1127:20">case <expr pos:start="1127:16" pos:end="1127:19"><literal type="number" pos:start="1127:16" pos:end="1127:19">0x19</literal></expr>:</case> <expr_stmt pos:start="1127:22" pos:end="1127:36"><expr pos:start="1127:22" pos:end="1127:35"><name pos:start="1127:22" pos:end="1127:25">name</name> <operator pos:start="1127:27" pos:end="1127:27">=</operator> <literal type="string" pos:start="1127:29" pos:end="1127:35">"%pcsr"</literal></expr>;</expr_stmt> <break pos:start="1127:38" pos:end="1127:43">break;</break>

	  <case pos:start="1129:11" pos:end="1129:20">case <expr pos:start="1129:16" pos:end="1129:19"><literal type="number" pos:start="1129:16" pos:end="1129:19">0x1c</literal></expr>:</case>

	  <case pos:start="1131:11" pos:end="1131:20">case <expr pos:start="1131:16" pos:end="1131:19"><literal type="number" pos:start="1131:16" pos:end="1131:19">0x1d</literal></expr>:</case>

	    <block pos:start="1133:13" pos:end="1145:13">{<block_content pos:start="1135:15" pos:end="1143:28">

	      <decl_stmt pos:start="1135:15" pos:end="1135:53"><decl pos:start="1135:15" pos:end="1135:52"><type pos:start="1135:15" pos:end="1135:17"><name pos:start="1135:15" pos:end="1135:17">int</name></type> <name pos:start="1135:19" pos:end="1135:27">break_reg</name> <init pos:start="1135:29" pos:end="1135:52">= <expr pos:start="1135:31" pos:end="1135:52"><operator pos:start="1135:31" pos:end="1135:31">(</operator><operator pos:start="1135:32" pos:end="1135:32">(</operator><name pos:start="1135:33" pos:end="1135:41"><name pos:start="1135:33" pos:end="1135:38">buffer</name><index pos:start="1135:39" pos:end="1135:41">[<expr pos:start="1135:40" pos:end="1135:40"><literal type="number" pos:start="1135:40" pos:end="1135:40">3</literal></expr>]</index></name> <operator pos:start="1135:43" pos:end="1135:44">&gt;&gt;</operator> <literal type="number" pos:start="1135:46" pos:end="1135:46">2</literal><operator pos:start="1135:47" pos:end="1135:47">)</operator> <operator pos:start="1135:49" pos:end="1135:49">&amp;</operator> <literal type="number" pos:start="1135:51" pos:end="1135:51">7</literal><operator pos:start="1135:52" pos:end="1135:52">)</operator></expr></init></decl>;</decl_stmt>



	      <expr_stmt pos:start="1139:15" pos:end="1143:28"><expr pos:start="1139:15" pos:end="1143:27"><call pos:start="1139:15" pos:end="1143:27">(<modifier pos:start="1139:16" pos:end="1139:16">*</modifier><name pos:start="1139:17" pos:end="1139:34"><name pos:start="1139:17" pos:end="1139:20">info</name><operator pos:start="1139:21" pos:end="1139:22">-&gt;</operator><name pos:start="1139:23" pos:end="1139:34">fprintf_func</name></name>)

		<argument_list pos:start="1141:17" pos:end="1143:27">(<argument pos:start="1141:18" pos:end="1141:29"><expr pos:start="1141:18" pos:end="1141:29"><name pos:start="1141:18" pos:end="1141:29"><name pos:start="1141:18" pos:end="1141:21">info</name><operator pos:start="1141:22" pos:end="1141:23">-&gt;</operator><name pos:start="1141:24" pos:end="1141:29">stream</name></name></expr></argument>, <argument pos:start="1141:32" pos:end="1141:66"><expr pos:start="1141:32" pos:end="1141:66"><ternary pos:start="1141:32" pos:end="1141:66"><condition pos:start="1141:32" pos:end="1141:44"><expr pos:start="1141:32" pos:end="1141:42"><name pos:start="1141:32" pos:end="1141:34">val</name> <operator pos:start="1141:36" pos:end="1141:37">==</operator> <literal type="number" pos:start="1141:39" pos:end="1141:42">0x1c</literal></expr> ?</condition><then pos:start="1141:46" pos:end="1141:54"> <expr pos:start="1141:46" pos:end="1141:54"><literal type="string" pos:start="1141:46" pos:end="1141:54">"%%bad%d"</literal></expr> </then><else pos:start="1141:56" pos:end="1141:66">: <expr pos:start="1141:58" pos:end="1141:66"><literal type="string" pos:start="1141:58" pos:end="1141:66">"%%bac%d"</literal></expr></else></ternary></expr></argument>,

		 <argument pos:start="1143:18" pos:end="1143:26"><expr pos:start="1143:18" pos:end="1143:26"><name pos:start="1143:18" pos:end="1143:26">break_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block>

	    <break pos:start="1147:13" pos:end="1147:18">break;</break>

	  <default pos:start="1149:11" pos:end="1149:18">default:</default>

	    <expr_stmt pos:start="1151:13" pos:end="1151:75"><expr pos:start="1151:13" pos:end="1151:74"><call pos:start="1151:13" pos:end="1151:74">(<modifier pos:start="1151:14" pos:end="1151:14">*</modifier><name pos:start="1151:15" pos:end="1151:32"><name pos:start="1151:15" pos:end="1151:18">info</name><operator pos:start="1151:19" pos:end="1151:20">-&gt;</operator><name pos:start="1151:21" pos:end="1151:32">fprintf_func</name></name>) <argument_list pos:start="1151:35" pos:end="1151:74">(<argument pos:start="1151:36" pos:end="1151:47"><expr pos:start="1151:36" pos:end="1151:47"><name pos:start="1151:36" pos:end="1151:47"><name pos:start="1151:36" pos:end="1151:39">info</name><operator pos:start="1151:40" pos:end="1151:41">-&gt;</operator><name pos:start="1151:42" pos:end="1151:47">stream</name></name></expr></argument>, <argument pos:start="1151:50" pos:end="1151:68"><expr pos:start="1151:50" pos:end="1151:68"><literal type="string" pos:start="1151:50" pos:end="1151:68">"&lt;mmu register %d&gt;"</literal></expr></argument>, <argument pos:start="1151:71" pos:end="1151:73"><expr pos:start="1151:71" pos:end="1151:73"><name pos:start="1151:71" pos:end="1151:73">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></switch>

	<if_stmt pos:start="1155:9" pos:end="1157:59"><if pos:start="1155:9" pos:end="1157:59">if <condition pos:start="1155:12" pos:end="1155:17">(<expr pos:start="1155:13" pos:end="1155:16"><name pos:start="1155:13" pos:end="1155:16">name</name></expr>)</condition><block type="pseudo" pos:start="1157:11" pos:end="1157:59"><block_content pos:start="1157:11" pos:end="1157:59">

	  <expr_stmt pos:start="1157:11" pos:end="1157:59"><expr pos:start="1157:11" pos:end="1157:58"><call pos:start="1157:11" pos:end="1157:58">(<modifier pos:start="1157:12" pos:end="1157:12">*</modifier><name pos:start="1157:13" pos:end="1157:30"><name pos:start="1157:13" pos:end="1157:16">info</name><operator pos:start="1157:17" pos:end="1157:18">-&gt;</operator><name pos:start="1157:19" pos:end="1157:30">fprintf_func</name></name>) <argument_list pos:start="1157:33" pos:end="1157:58">(<argument pos:start="1157:34" pos:end="1157:45"><expr pos:start="1157:34" pos:end="1157:45"><name pos:start="1157:34" pos:end="1157:45"><name pos:start="1157:34" pos:end="1157:37">info</name><operator pos:start="1157:38" pos:end="1157:39">-&gt;</operator><name pos:start="1157:40" pos:end="1157:45">stream</name></name></expr></argument>, <argument pos:start="1157:48" pos:end="1157:51"><expr pos:start="1157:48" pos:end="1157:51"><literal type="string" pos:start="1157:48" pos:end="1157:51">"%s"</literal></expr></argument>, <argument pos:start="1157:54" pos:end="1157:57"><expr pos:start="1157:54" pos:end="1157:57"><name pos:start="1157:54" pos:end="1157:57">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      </block_content>}</block>

      <break pos:start="1161:7" pos:end="1161:12">break;</break>



    <case pos:start="1165:5" pos:end="1165:13">case <expr pos:start="1165:10" pos:end="1165:12"><literal type="char" pos:start="1165:10" pos:end="1165:12">'f'</literal></expr>:</case>

      <block pos:start="1167:7" pos:end="1187:7">{<block_content pos:start="1169:9" pos:end="1185:76">

	<decl_stmt pos:start="1169:9" pos:end="1169:52"><decl pos:start="1169:9" pos:end="1169:51"><type pos:start="1169:9" pos:end="1169:11"><name pos:start="1169:9" pos:end="1169:11">int</name></type> <name pos:start="1169:13" pos:end="1169:14">fc</name> <init pos:start="1169:16" pos:end="1169:51">= <expr pos:start="1169:18" pos:end="1169:51"><call pos:start="1169:18" pos:end="1169:51"><name pos:start="1169:18" pos:end="1169:26">fetch_arg</name> <argument_list pos:start="1169:28" pos:end="1169:51">(<argument pos:start="1169:29" pos:end="1169:34"><expr pos:start="1169:29" pos:end="1169:34"><name pos:start="1169:29" pos:end="1169:34">buffer</name></expr></argument>, <argument pos:start="1169:37" pos:end="1169:41"><expr pos:start="1169:37" pos:end="1169:41"><name pos:start="1169:37" pos:end="1169:41">place</name></expr></argument>, <argument pos:start="1169:44" pos:end="1169:44"><expr pos:start="1169:44" pos:end="1169:44"><literal type="number" pos:start="1169:44" pos:end="1169:44">5</literal></expr></argument>, <argument pos:start="1169:47" pos:end="1169:50"><expr pos:start="1169:47" pos:end="1169:50"><name pos:start="1169:47" pos:end="1169:50">info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



	<if_stmt pos:start="1173:9" pos:end="1185:76"><if pos:start="1173:9" pos:end="1175:56">if <condition pos:start="1173:12" pos:end="1173:20">(<expr pos:start="1173:13" pos:end="1173:19"><name pos:start="1173:13" pos:end="1173:14">fc</name> <operator pos:start="1173:16" pos:end="1173:17">==</operator> <literal type="number" pos:start="1173:19" pos:end="1173:19">1</literal></expr>)</condition><block type="pseudo" pos:start="1175:11" pos:end="1175:56"><block_content pos:start="1175:11" pos:end="1175:56">

	  <expr_stmt pos:start="1175:11" pos:end="1175:56"><expr pos:start="1175:11" pos:end="1175:55"><call pos:start="1175:11" pos:end="1175:55">(<modifier pos:start="1175:12" pos:end="1175:12">*</modifier><name pos:start="1175:13" pos:end="1175:30"><name pos:start="1175:13" pos:end="1175:16">info</name><operator pos:start="1175:17" pos:end="1175:18">-&gt;</operator><name pos:start="1175:19" pos:end="1175:30">fprintf_func</name></name>) <argument_list pos:start="1175:33" pos:end="1175:55">(<argument pos:start="1175:34" pos:end="1175:45"><expr pos:start="1175:34" pos:end="1175:45"><name pos:start="1175:34" pos:end="1175:45"><name pos:start="1175:34" pos:end="1175:37">info</name><operator pos:start="1175:38" pos:end="1175:39">-&gt;</operator><name pos:start="1175:40" pos:end="1175:45">stream</name></name></expr></argument>, <argument pos:start="1175:48" pos:end="1175:54"><expr pos:start="1175:48" pos:end="1175:54"><literal type="string" pos:start="1175:48" pos:end="1175:54">"%%dfc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif" pos:start="1177:9" pos:end="1179:56">else if <condition pos:start="1177:17" pos:end="1177:25">(<expr pos:start="1177:18" pos:end="1177:24"><name pos:start="1177:18" pos:end="1177:19">fc</name> <operator pos:start="1177:21" pos:end="1177:22">==</operator> <literal type="number" pos:start="1177:24" pos:end="1177:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1179:11" pos:end="1179:56"><block_content pos:start="1179:11" pos:end="1179:56">

	  <expr_stmt pos:start="1179:11" pos:end="1179:56"><expr pos:start="1179:11" pos:end="1179:55"><call pos:start="1179:11" pos:end="1179:55">(<modifier pos:start="1179:12" pos:end="1179:12">*</modifier><name pos:start="1179:13" pos:end="1179:30"><name pos:start="1179:13" pos:end="1179:16">info</name><operator pos:start="1179:17" pos:end="1179:18">-&gt;</operator><name pos:start="1179:19" pos:end="1179:30">fprintf_func</name></name>) <argument_list pos:start="1179:33" pos:end="1179:55">(<argument pos:start="1179:34" pos:end="1179:45"><expr pos:start="1179:34" pos:end="1179:45"><name pos:start="1179:34" pos:end="1179:45"><name pos:start="1179:34" pos:end="1179:37">info</name><operator pos:start="1179:38" pos:end="1179:39">-&gt;</operator><name pos:start="1179:40" pos:end="1179:45">stream</name></name></expr></argument>, <argument pos:start="1179:48" pos:end="1179:54"><expr pos:start="1179:48" pos:end="1179:54"><literal type="string" pos:start="1179:48" pos:end="1179:54">"%%sfc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="1181:9" pos:end="1185:76">else<block type="pseudo" pos:start="1185:11" pos:end="1185:76"><block_content pos:start="1185:11" pos:end="1185:76">

	  <comment type="block" pos:start="1183:11" pos:end="1183:33">/* xgettext:c-format */</comment>

	  <expr_stmt pos:start="1185:11" pos:end="1185:76"><expr pos:start="1185:11" pos:end="1185:75"><call pos:start="1185:11" pos:end="1185:75">(<modifier pos:start="1185:12" pos:end="1185:12">*</modifier><name pos:start="1185:13" pos:end="1185:30"><name pos:start="1185:13" pos:end="1185:16">info</name><operator pos:start="1185:17" pos:end="1185:18">-&gt;</operator><name pos:start="1185:19" pos:end="1185:30">fprintf_func</name></name>) <argument_list pos:start="1185:33" pos:end="1185:75">(<argument pos:start="1185:34" pos:end="1185:45"><expr pos:start="1185:34" pos:end="1185:45"><name pos:start="1185:34" pos:end="1185:45"><name pos:start="1185:34" pos:end="1185:37">info</name><operator pos:start="1185:38" pos:end="1185:39">-&gt;</operator><name pos:start="1185:40" pos:end="1185:45">stream</name></name></expr></argument>, <argument pos:start="1185:48" pos:end="1185:70"><expr pos:start="1185:48" pos:end="1185:70"><call pos:start="1185:48" pos:end="1185:70"><name pos:start="1185:48" pos:end="1185:48">_</name><argument_list pos:start="1185:49" pos:end="1185:70">(<argument pos:start="1185:50" pos:end="1185:69"><expr pos:start="1185:50" pos:end="1185:69"><literal type="string" pos:start="1185:50" pos:end="1185:69">"&lt;function code %d&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1185:73" pos:end="1185:74"><expr pos:start="1185:73" pos:end="1185:74"><name pos:start="1185:73" pos:end="1185:74">fc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

      </block_content>}</block>

      <break pos:start="1189:7" pos:end="1189:12">break;</break>



    <case pos:start="1193:5" pos:end="1193:13">case <expr pos:start="1193:10" pos:end="1193:12"><literal type="char" pos:start="1193:10" pos:end="1193:12">'V'</literal></expr>:</case>

      <expr_stmt pos:start="1195:7" pos:end="1195:52"><expr pos:start="1195:7" pos:end="1195:51"><call pos:start="1195:7" pos:end="1195:51">(<modifier pos:start="1195:8" pos:end="1195:8">*</modifier><name pos:start="1195:9" pos:end="1195:26"><name pos:start="1195:9" pos:end="1195:12">info</name><operator pos:start="1195:13" pos:end="1195:14">-&gt;</operator><name pos:start="1195:15" pos:end="1195:26">fprintf_func</name></name>) <argument_list pos:start="1195:29" pos:end="1195:51">(<argument pos:start="1195:30" pos:end="1195:41"><expr pos:start="1195:30" pos:end="1195:41"><name pos:start="1195:30" pos:end="1195:41"><name pos:start="1195:30" pos:end="1195:33">info</name><operator pos:start="1195:34" pos:end="1195:35">-&gt;</operator><name pos:start="1195:36" pos:end="1195:41">stream</name></name></expr></argument>, <argument pos:start="1195:44" pos:end="1195:50"><expr pos:start="1195:44" pos:end="1195:50"><literal type="string" pos:start="1195:44" pos:end="1195:50">"%%val"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="1197:7" pos:end="1197:12">break;</break>



    <case pos:start="1201:5" pos:end="1201:13">case <expr pos:start="1201:10" pos:end="1201:12"><literal type="char" pos:start="1201:10" pos:end="1201:12">'t'</literal></expr>:</case>

      <block pos:start="1203:7" pos:end="1211:7">{<block_content pos:start="1205:9" pos:end="1209:58">

	<decl_stmt pos:start="1205:9" pos:end="1205:55"><decl pos:start="1205:9" pos:end="1205:54"><type pos:start="1205:9" pos:end="1205:11"><name pos:start="1205:9" pos:end="1205:11">int</name></type> <name pos:start="1205:13" pos:end="1205:17">level</name> <init pos:start="1205:19" pos:end="1205:54">= <expr pos:start="1205:21" pos:end="1205:54"><call pos:start="1205:21" pos:end="1205:54"><name pos:start="1205:21" pos:end="1205:29">fetch_arg</name> <argument_list pos:start="1205:31" pos:end="1205:54">(<argument pos:start="1205:32" pos:end="1205:37"><expr pos:start="1205:32" pos:end="1205:37"><name pos:start="1205:32" pos:end="1205:37">buffer</name></expr></argument>, <argument pos:start="1205:40" pos:end="1205:44"><expr pos:start="1205:40" pos:end="1205:44"><name pos:start="1205:40" pos:end="1205:44">place</name></expr></argument>, <argument pos:start="1205:47" pos:end="1205:47"><expr pos:start="1205:47" pos:end="1205:47"><literal type="number" pos:start="1205:47" pos:end="1205:47">3</literal></expr></argument>, <argument pos:start="1205:50" pos:end="1205:53"><expr pos:start="1205:50" pos:end="1205:53"><name pos:start="1205:50" pos:end="1205:53">info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



	<expr_stmt pos:start="1209:9" pos:end="1209:58"><expr pos:start="1209:9" pos:end="1209:57"><call pos:start="1209:9" pos:end="1209:57">(<modifier pos:start="1209:10" pos:end="1209:10">*</modifier><name pos:start="1209:11" pos:end="1209:28"><name pos:start="1209:11" pos:end="1209:14">info</name><operator pos:start="1209:15" pos:end="1209:16">-&gt;</operator><name pos:start="1209:17" pos:end="1209:28">fprintf_func</name></name>) <argument_list pos:start="1209:31" pos:end="1209:57">(<argument pos:start="1209:32" pos:end="1209:43"><expr pos:start="1209:32" pos:end="1209:43"><name pos:start="1209:32" pos:end="1209:43"><name pos:start="1209:32" pos:end="1209:35">info</name><operator pos:start="1209:36" pos:end="1209:37">-&gt;</operator><name pos:start="1209:38" pos:end="1209:43">stream</name></name></expr></argument>, <argument pos:start="1209:46" pos:end="1209:49"><expr pos:start="1209:46" pos:end="1209:49"><literal type="string" pos:start="1209:46" pos:end="1209:49">"%d"</literal></expr></argument>, <argument pos:start="1209:52" pos:end="1209:56"><expr pos:start="1209:52" pos:end="1209:56"><name pos:start="1209:52" pos:end="1209:56">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block>

      <break pos:start="1213:7" pos:end="1213:12">break;</break>



    <case pos:start="1217:5" pos:end="1217:13">case <expr pos:start="1217:10" pos:end="1217:12"><literal type="char" pos:start="1217:10" pos:end="1217:12">'u'</literal></expr>:</case>

      <block pos:start="1219:7" pos:end="1243:7">{<block_content pos:start="1221:9" pos:end="1241:53">

	<decl_stmt pos:start="1221:9" pos:end="1221:27"><decl pos:start="1221:9" pos:end="1221:26"><type pos:start="1221:9" pos:end="1221:13"><name pos:start="1221:9" pos:end="1221:13">short</name></type> <name pos:start="1221:15" pos:end="1221:22">is_upper</name> <init pos:start="1221:24" pos:end="1221:26">= <expr pos:start="1221:26" pos:end="1221:26"><literal type="number" pos:start="1221:26" pos:end="1221:26">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="1223:9" pos:end="1223:53"><decl pos:start="1223:9" pos:end="1223:52"><type pos:start="1223:9" pos:end="1223:11"><name pos:start="1223:9" pos:end="1223:11">int</name></type> <name pos:start="1223:13" pos:end="1223:15">reg</name> <init pos:start="1223:17" pos:end="1223:52">= <expr pos:start="1223:19" pos:end="1223:52"><call pos:start="1223:19" pos:end="1223:52"><name pos:start="1223:19" pos:end="1223:27">fetch_arg</name> <argument_list pos:start="1223:29" pos:end="1223:52">(<argument pos:start="1223:30" pos:end="1223:35"><expr pos:start="1223:30" pos:end="1223:35"><name pos:start="1223:30" pos:end="1223:35">buffer</name></expr></argument>, <argument pos:start="1223:38" pos:end="1223:42"><expr pos:start="1223:38" pos:end="1223:42"><name pos:start="1223:38" pos:end="1223:42">place</name></expr></argument>, <argument pos:start="1223:45" pos:end="1223:45"><expr pos:start="1223:45" pos:end="1223:45"><literal type="number" pos:start="1223:45" pos:end="1223:45">5</literal></expr></argument>, <argument pos:start="1223:48" pos:end="1223:51"><expr pos:start="1223:48" pos:end="1223:51"><name pos:start="1223:48" pos:end="1223:51">info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



	<if_stmt pos:start="1227:9" pos:end="1235:11"><if pos:start="1227:9" pos:end="1235:11">if <condition pos:start="1227:12" pos:end="1227:23">(<expr pos:start="1227:13" pos:end="1227:22"><name pos:start="1227:13" pos:end="1227:15">reg</name> <operator pos:start="1227:17" pos:end="1227:17">&amp;</operator> <literal type="number" pos:start="1227:19" pos:end="1227:22">0x10</literal></expr>)</condition>

	  <block pos:start="1229:11" pos:end="1235:11">{<block_content pos:start="1231:13" pos:end="1233:23">

	    <expr_stmt pos:start="1231:13" pos:end="1231:25"><expr pos:start="1231:13" pos:end="1231:24"><name pos:start="1231:13" pos:end="1231:20">is_upper</name> <operator pos:start="1231:22" pos:end="1231:22">=</operator> <literal type="number" pos:start="1231:24" pos:end="1231:24">1</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="1233:13" pos:end="1233:23"><expr pos:start="1233:13" pos:end="1233:22"><name pos:start="1233:13" pos:end="1233:15">reg</name> <operator pos:start="1233:17" pos:end="1233:18">&amp;=</operator> <literal type="number" pos:start="1233:20" pos:end="1233:22">0xf</literal></expr>;</expr_stmt>

	  </block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="1237:9" pos:end="1241:53"><expr pos:start="1237:9" pos:end="1241:52"><call pos:start="1237:9" pos:end="1241:52">(<modifier pos:start="1237:10" pos:end="1237:10">*</modifier><name pos:start="1237:11" pos:end="1237:28"><name pos:start="1237:11" pos:end="1237:14">info</name><operator pos:start="1237:15" pos:end="1237:16">-&gt;</operator><name pos:start="1237:17" pos:end="1237:28">fprintf_func</name></name>) <argument_list pos:start="1237:31" pos:end="1241:52">(<argument pos:start="1237:32" pos:end="1237:43"><expr pos:start="1237:32" pos:end="1237:43"><name pos:start="1237:32" pos:end="1237:43"><name pos:start="1237:32" pos:end="1237:35">info</name><operator pos:start="1237:36" pos:end="1237:37">-&gt;</operator><name pos:start="1237:38" pos:end="1237:43">stream</name></name></expr></argument>, <argument pos:start="1237:46" pos:end="1237:51"><expr pos:start="1237:46" pos:end="1237:51"><literal type="string" pos:start="1237:46" pos:end="1237:51">"%s%s"</literal></expr></argument>,

			       <argument pos:start="1239:32" pos:end="1239:50"><expr pos:start="1239:32" pos:end="1239:50"><name pos:start="1239:32" pos:end="1239:50"><name pos:start="1239:32" pos:end="1239:45">reg_half_names</name><index pos:start="1239:46" pos:end="1239:50">[<expr pos:start="1239:47" pos:end="1239:49"><name pos:start="1239:47" pos:end="1239:49">reg</name></expr>]</index></name></expr></argument>,

			       <argument pos:start="1241:32" pos:end="1241:51"><expr pos:start="1241:32" pos:end="1241:51"><ternary pos:start="1241:32" pos:end="1241:51"><condition pos:start="1241:32" pos:end="1241:41"><expr pos:start="1241:32" pos:end="1241:39"><name pos:start="1241:32" pos:end="1241:39">is_upper</name></expr> ?</condition><then pos:start="1241:43" pos:end="1241:45"> <expr pos:start="1241:43" pos:end="1241:45"><literal type="string" pos:start="1241:43" pos:end="1241:45">"u"</literal></expr> </then><else pos:start="1241:47" pos:end="1241:51">: <expr pos:start="1241:49" pos:end="1241:51"><literal type="string" pos:start="1241:49" pos:end="1241:51">"l"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block>

      <break pos:start="1245:7" pos:end="1245:12">break;</break>



    <default pos:start="1249:5" pos:end="1249:12">default:</default>

      <return pos:start="1251:7" pos:end="1251:16">return <expr pos:start="1251:14" pos:end="1251:15"><operator pos:start="1251:14" pos:end="1251:14">-</operator><literal type="number" pos:start="1251:15" pos:end="1251:15">2</literal></expr>;</return>

    </block_content>}</block></switch>



  <return pos:start="1257:3" pos:end="1257:16">return <expr pos:start="1257:10" pos:end="1257:15"><name pos:start="1257:10" pos:end="1257:10">p</name> <operator pos:start="1257:12" pos:end="1257:12">-</operator> <name pos:start="1257:14" pos:end="1257:15">p0</name></expr>;</return>

</block_content>}</block>
</unit>
