<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15028.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:23">cs_read</name> <parameter_list pos:start="1:25" pos:end="1:78">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:29">void</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:37">opaque</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:62"><decl pos:start="1:40" pos:end="1:62"><type pos:start="1:40" pos:end="1:62"><name pos:start="1:40" pos:end="1:57">target_phys_addr_t</name></type> <name pos:start="1:59" pos:end="1:62">addr</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:77"><decl pos:start="1:65" pos:end="1:77"><type pos:start="1:65" pos:end="1:77"><name pos:start="1:65" pos:end="1:72">unsigned</name></type> <name pos:start="1:74" pos:end="1:77">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:15">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">CSState</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:14">s</name> <init pos:start="5:16" pos:end="5:23">= <expr pos:start="5:18" pos:end="5:23"><name pos:start="5:18" pos:end="5:23">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:18">saddr</name></decl>, <decl pos:start="7:21" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:21" pos:end="7:25">iaddr</name></decl>, <decl pos:start="7:28" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:28" pos:end="7:30">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:17"><expr pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:9">saddr</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <name pos:start="11:13" pos:end="11:16">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:16"><expr pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:9">iaddr</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <operator pos:start="13:13" pos:end="13:13">~</operator><literal type="number" pos:start="13:14" pos:end="13:15">0U</literal></expr>;</expr_stmt>



    <switch pos:start="17:5" pos:end="65:5">switch <condition pos:start="17:12" pos:end="17:18">(<expr pos:start="17:13" pos:end="17:17"><name pos:start="17:13" pos:end="17:17">saddr</name></expr>)</condition> <block pos:start="17:20" pos:end="65:5">{<block_content pos:start="19:5" pos:end="63:14">

    <case pos:start="19:5" pos:end="19:23">case <expr pos:start="19:10" pos:end="19:22"><name pos:start="19:10" pos:end="19:22">Index_Address</name></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:37"><expr pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:28"><name pos:start="21:15" pos:end="21:15">s</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:21">regs</name><index pos:start="21:22" pos:end="21:28">[<expr pos:start="21:23" pos:end="21:27"><name pos:start="21:23" pos:end="21:27">saddr</name></expr>]</index></name> <operator pos:start="21:30" pos:end="21:30">&amp;</operator> <operator pos:start="21:32" pos:end="21:32">~</operator><literal type="number" pos:start="21:33" pos:end="21:36">0x80</literal></expr>;</expr_stmt>

        <break pos:start="23:9" pos:end="23:14">break;</break>



    <case pos:start="27:5" pos:end="27:20">case <expr pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:19">Index_Data</name></expr>:</case>

        <if_stmt pos:start="29:9" pos:end="35:50"><if pos:start="29:9" pos:end="31:50">if <condition pos:start="29:12" pos:end="29:45">(<expr pos:start="29:13" pos:end="29:44"><operator pos:start="29:13" pos:end="29:13">!</operator><operator pos:start="29:14" pos:end="29:14">(</operator><name pos:start="29:15" pos:end="29:35"><name pos:start="29:15" pos:end="29:15">s</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:22">dregs</name><index pos:start="29:23" pos:end="29:35">[<expr pos:start="29:24" pos:end="29:34"><name pos:start="29:24" pos:end="29:34">MODE_And_ID</name></expr>]</index></name> <operator pos:start="29:37" pos:end="29:37">&amp;</operator> <name pos:start="29:39" pos:end="29:43">MODE2</name><operator pos:start="29:44" pos:end="29:44">)</operator></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:50"><block_content pos:start="31:13" pos:end="31:50">

            <expr_stmt pos:start="31:13" pos:end="31:50"><expr pos:start="31:13" pos:end="31:49"><name pos:start="31:13" pos:end="31:17">iaddr</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:42"><name pos:start="31:21" pos:end="31:21">s</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:27">regs</name><index pos:start="31:28" pos:end="31:42">[<expr pos:start="31:29" pos:end="31:41"><name pos:start="31:29" pos:end="31:41">Index_Address</name></expr>]</index></name> <operator pos:start="31:44" pos:end="31:44">&amp;</operator> <literal type="number" pos:start="31:46" pos:end="31:49">0x0f</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="33:9" pos:end="35:50">else<block type="pseudo" pos:start="35:13" pos:end="35:50"><block_content pos:start="35:13" pos:end="35:50">

            <expr_stmt pos:start="35:13" pos:end="35:50"><expr pos:start="35:13" pos:end="35:49"><name pos:start="35:13" pos:end="35:17">iaddr</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:42"><name pos:start="35:21" pos:end="35:21">s</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:27">regs</name><index pos:start="35:28" pos:end="35:42">[<expr pos:start="35:29" pos:end="35:41"><name pos:start="35:29" pos:end="35:41">Index_Address</name></expr>]</index></name> <operator pos:start="35:44" pos:end="35:44">&amp;</operator> <literal type="number" pos:start="35:46" pos:end="35:49">0x1f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:29"><name pos:start="39:15" pos:end="39:15">s</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:22">dregs</name><index pos:start="39:23" pos:end="39:29">[<expr pos:start="39:24" pos:end="39:28"><name pos:start="39:24" pos:end="39:28">iaddr</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="53:9"><if pos:start="41:9" pos:end="53:9">if <condition pos:start="41:12" pos:end="41:53">(<expr pos:start="41:13" pos:end="41:52"><name pos:start="41:13" pos:end="41:17">iaddr</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:52">Error_Status_And_Initialization</name></expr>)</condition> <block pos:start="41:55" pos:end="53:9">{<block_content pos:start="45:13" pos:end="51:13">

            <comment type="block" pos:start="43:13" pos:end="43:33">/* keep SEAL happy */</comment>

            <if_stmt pos:start="45:13" pos:end="51:13"><if pos:start="45:13" pos:end="51:13">if <condition pos:start="45:16" pos:end="45:31">(<expr pos:start="45:17" pos:end="45:30"><name pos:start="45:17" pos:end="45:30"><name pos:start="45:17" pos:end="45:17">s</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:30">aci_counter</name></name></expr>)</condition> <block pos:start="45:33" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:36">

                <expr_stmt pos:start="47:17" pos:end="47:30"><expr pos:start="47:17" pos:end="47:29"><name pos:start="47:17" pos:end="47:19">ret</name> <operator pos:start="47:21" pos:end="47:22">|=</operator> <literal type="number" pos:start="47:24" pos:end="47:24">1</literal> <operator pos:start="47:26" pos:end="47:27">&lt;&lt;</operator> <literal type="number" pos:start="47:29" pos:end="47:29">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:36"><expr pos:start="49:17" pos:end="49:35"><name pos:start="49:17" pos:end="49:30"><name pos:start="49:17" pos:end="49:17">s</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:30">aci_counter</name></name> <operator pos:start="49:32" pos:end="49:33">-=</operator> <literal type="number" pos:start="49:35" pos:end="49:35">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>



    <default pos:start="59:5" pos:end="59:12">default:</default>

        <expr_stmt pos:start="61:9" pos:end="61:29"><expr pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <name pos:start="61:15" pos:end="61:28"><name pos:start="61:15" pos:end="61:15">s</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:21">regs</name><index pos:start="61:22" pos:end="61:28">[<expr pos:start="61:23" pos:end="61:27"><name pos:start="61:23" pos:end="61:27">saddr</name></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="67:5" pos:end="67:52"><expr pos:start="67:5" pos:end="67:51"><call pos:start="67:5" pos:end="67:51"><name pos:start="67:5" pos:end="67:9">dolog</name> <argument_list pos:start="67:11" pos:end="67:51">(<argument pos:start="67:12" pos:end="67:31"><expr pos:start="67:12" pos:end="67:31"><literal type="string" pos:start="67:12" pos:end="67:31">"read %d:%d -&gt; %d\n"</literal></expr></argument>, <argument pos:start="67:34" pos:end="67:38"><expr pos:start="67:34" pos:end="67:38"><name pos:start="67:34" pos:end="67:38">saddr</name></expr></argument>, <argument pos:start="67:41" pos:end="67:45"><expr pos:start="67:41" pos:end="67:45"><name pos:start="67:41" pos:end="67:45">iaddr</name></expr></argument>, <argument pos:start="67:48" pos:end="67:50"><expr pos:start="67:48" pos:end="67:50"><name pos:start="67:48" pos:end="67:50">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="69:5" pos:end="69:15">return <expr pos:start="69:12" pos:end="69:14"><name pos:start="69:12" pos:end="69:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
