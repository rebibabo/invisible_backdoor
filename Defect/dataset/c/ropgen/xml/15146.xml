<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15146.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">axisdev88_init</name><parameter_list pos:start="1:20" pos:end="1:42">(<parameter pos:start="1:21" pos:end="1:41"><decl pos:start="1:21" pos:end="1:41"><type pos:start="1:21" pos:end="1:34"><name pos:start="1:21" pos:end="1:32">MachineState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:41">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="213:1">{<block_content pos:start="5:5" pos:end="211:5">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">CRISCPU</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">CPUCRISState</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">DeviceState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">SysBusDevice</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:13">DriveInfo</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:19">nand</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">qemu_irq</name></type> <name pos:start="23:14" pos:end="23:20"><name pos:start="23:14" pos:end="23:16">irq</name><index pos:start="23:17" pos:end="23:20">[<expr pos:start="23:18" pos:end="23:19"><literal type="number" pos:start="23:18" pos:end="23:19">30</literal></expr>]</index></name></decl>, <decl pos:start="23:23" pos:end="23:28"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:23" pos:end="23:28"><name pos:start="23:23" pos:end="23:25">nmi</name><index pos:start="23:26" pos:end="23:28">[<expr pos:start="23:27" pos:end="23:27"><literal type="number" pos:start="23:27" pos:end="23:27">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:8">void</name> <modifier pos:start="25:10" pos:end="25:10">*</modifier></type><name pos:start="25:11" pos:end="25:22">etraxfs_dmac</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:39"><decl pos:start="27:5" pos:end="27:38"><type pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:10">struct</name> <name pos:start="27:12" pos:end="27:29">etraxfs_dma_client</name></name> <modifier pos:start="27:31" pos:end="27:31">*</modifier></type><name pos:start="27:32" pos:end="27:38">dma_eth</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:10"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:58"><decl pos:start="31:5" pos:end="31:57"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:35">address_space_mem</name> <init pos:start="31:37" pos:end="31:57">= <expr pos:start="31:39" pos:end="31:57"><call pos:start="31:39" pos:end="31:57"><name pos:start="31:39" pos:end="31:55">get_system_memory</name><argument_list pos:start="31:56" pos:end="31:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:52"><decl pos:start="33:5" pos:end="33:51"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">MemoryRegion</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:26">phys_ram</name> <init pos:start="33:28" pos:end="33:51">= <expr pos:start="33:30" pos:end="33:51"><call pos:start="33:30" pos:end="33:51"><name pos:start="33:30" pos:end="33:34">g_new</name><argument_list pos:start="33:35" pos:end="33:51">(<argument pos:start="33:36" pos:end="33:47"><expr pos:start="33:36" pos:end="33:47"><name pos:start="33:36" pos:end="33:47">MemoryRegion</name></expr></argument>, <argument pos:start="33:50" pos:end="33:50"><expr pos:start="33:50" pos:end="33:50"><literal type="number" pos:start="33:50" pos:end="33:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:55"><decl pos:start="35:5" pos:end="35:54"><type pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:16">MemoryRegion</name> <modifier pos:start="35:18" pos:end="35:18">*</modifier></type><name pos:start="35:19" pos:end="35:29">phys_intmem</name> <init pos:start="35:31" pos:end="35:54">= <expr pos:start="35:33" pos:end="35:54"><call pos:start="35:33" pos:end="35:54"><name pos:start="35:33" pos:end="35:37">g_new</name><argument_list pos:start="35:38" pos:end="35:54">(<argument pos:start="35:39" pos:end="35:50"><expr pos:start="35:39" pos:end="35:50"><name pos:start="35:39" pos:end="35:50">MemoryRegion</name></expr></argument>, <argument pos:start="35:53" pos:end="35:53"><expr pos:start="35:53" pos:end="35:53"><literal type="number" pos:start="35:53" pos:end="35:53">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:19">/* init CPUs */</comment>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:17">cpu_model</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:25">NULL</name></expr>)</condition> <block pos:start="41:28" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:30">

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:17">cpu_model</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <literal type="string" pos:start="43:21" pos:end="43:29">"crisv32"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:7">cpu</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:34"><name pos:start="47:11" pos:end="47:23">cpu_cris_init</name><argument_list pos:start="47:24" pos:end="47:34">(<argument pos:start="47:25" pos:end="47:33"><expr pos:start="47:25" pos:end="47:33"><name pos:start="47:25" pos:end="47:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:20"><expr pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:7">env</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <operator pos:start="49:11" pos:end="49:11">&amp;</operator><name pos:start="49:12" pos:end="49:19"><name pos:start="49:12" pos:end="49:14">cpu</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:19">env</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="55:5" pos:end="57:51"><expr pos:start="55:5" pos:end="57:50"><call pos:start="55:5" pos:end="57:50"><name pos:start="55:5" pos:end="55:40">memory_region_allocate_system_memory</name><argument_list pos:start="55:41" pos:end="57:50">(<argument pos:start="55:42" pos:end="55:49"><expr pos:start="55:42" pos:end="55:49"><name pos:start="55:42" pos:end="55:49">phys_ram</name></expr></argument>, <argument pos:start="55:52" pos:end="55:55"><expr pos:start="55:52" pos:end="55:55"><name pos:start="55:52" pos:end="55:55">NULL</name></expr></argument>, <argument pos:start="55:58" pos:end="55:72"><expr pos:start="55:58" pos:end="55:72"><literal type="string" pos:start="55:58" pos:end="55:72">"axisdev88.ram"</literal></expr></argument>,

                                         <argument pos:start="57:42" pos:end="57:49"><expr pos:start="57:42" pos:end="57:49"><name pos:start="57:42" pos:end="57:49">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:73"><expr pos:start="59:5" pos:end="59:72"><call pos:start="59:5" pos:end="59:72"><name pos:start="59:5" pos:end="59:31">memory_region_add_subregion</name><argument_list pos:start="59:32" pos:end="59:72">(<argument pos:start="59:33" pos:end="59:49"><expr pos:start="59:33" pos:end="59:49"><name pos:start="59:33" pos:end="59:49">address_space_mem</name></expr></argument>, <argument pos:start="59:52" pos:end="59:61"><expr pos:start="59:52" pos:end="59:61"><literal type="number" pos:start="59:52" pos:end="59:61">0x40000000</literal></expr></argument>, <argument pos:start="59:64" pos:end="59:71"><expr pos:start="59:64" pos:end="59:71"><name pos:start="59:64" pos:end="59:71">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="65:27">/* The ETRAX-FS has 128Kb on chip ram, the docs refer to it as the 

       internal memory.  */</comment>

    <expr_stmt pos:start="67:5" pos:end="69:41"><expr pos:start="67:5" pos:end="69:40"><call pos:start="67:5" pos:end="69:40"><name pos:start="67:5" pos:end="67:26">memory_region_init_ram</name><argument_list pos:start="67:27" pos:end="69:40">(<argument pos:start="67:28" pos:end="67:38"><expr pos:start="67:28" pos:end="67:38"><name pos:start="67:28" pos:end="67:38">phys_intmem</name></expr></argument>, <argument pos:start="67:41" pos:end="67:44"><expr pos:start="67:41" pos:end="67:44"><name pos:start="67:41" pos:end="67:44">NULL</name></expr></argument>, <argument pos:start="67:47" pos:end="67:65"><expr pos:start="67:47" pos:end="67:65"><literal type="string" pos:start="67:47" pos:end="67:65">"axisdev88.chipram"</literal></expr></argument>, <argument pos:start="67:68" pos:end="67:78"><expr pos:start="67:68" pos:end="67:78"><name pos:start="67:68" pos:end="67:78">INTMEM_SIZE</name></expr></argument>,

                           <argument pos:start="69:28" pos:end="69:39"><expr pos:start="69:28" pos:end="69:39"><operator pos:start="69:28" pos:end="69:28">&amp;</operator><name pos:start="69:29" pos:end="69:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:45"><expr pos:start="71:5" pos:end="71:44"><call pos:start="71:5" pos:end="71:44"><name pos:start="71:5" pos:end="71:31">vmstate_register_ram_global</name><argument_list pos:start="71:32" pos:end="71:44">(<argument pos:start="71:33" pos:end="71:43"><expr pos:start="71:33" pos:end="71:43"><name pos:start="71:33" pos:end="71:43">phys_intmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:76"><expr pos:start="73:5" pos:end="73:75"><call pos:start="73:5" pos:end="73:75"><name pos:start="73:5" pos:end="73:31">memory_region_add_subregion</name><argument_list pos:start="73:32" pos:end="73:75">(<argument pos:start="73:33" pos:end="73:49"><expr pos:start="73:33" pos:end="73:49"><name pos:start="73:33" pos:end="73:49">address_space_mem</name></expr></argument>, <argument pos:start="73:52" pos:end="73:61"><expr pos:start="73:52" pos:end="73:61"><literal type="number" pos:start="73:52" pos:end="73:61">0x38000000</literal></expr></argument>, <argument pos:start="73:64" pos:end="73:74"><expr pos:start="73:64" pos:end="73:74"><name pos:start="73:64" pos:end="73:74">phys_intmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



      <comment type="block" pos:start="77:7" pos:end="77:40">/* Attach a NAND flash to CS1.  */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:35"><expr pos:start="79:5" pos:end="79:34"><name pos:start="79:5" pos:end="79:8">nand</name> <operator pos:start="79:10" pos:end="79:10">=</operator> <call pos:start="79:12" pos:end="79:34"><name pos:start="79:12" pos:end="79:20">drive_get</name><argument_list pos:start="79:21" pos:end="79:34">(<argument pos:start="79:22" pos:end="79:27"><expr pos:start="79:22" pos:end="79:27"><name pos:start="79:22" pos:end="79:27">IF_MTD</name></expr></argument>, <argument pos:start="79:30" pos:end="79:30"><expr pos:start="79:30" pos:end="79:30"><literal type="number" pos:start="79:30" pos:end="79:30">0</literal></expr></argument>, <argument pos:start="79:33" pos:end="79:33"><expr pos:start="79:33" pos:end="79:33"><literal type="number" pos:start="79:33" pos:end="79:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:56"><expr pos:start="81:5" pos:end="83:55"><name pos:start="81:5" pos:end="81:19"><name pos:start="81:5" pos:end="81:14">nand_state</name><operator pos:start="81:15" pos:end="81:15">.</operator><name pos:start="81:16" pos:end="81:19">nand</name></name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="83:55"><name pos:start="81:23" pos:end="81:31">nand_init</name><argument_list pos:start="81:32" pos:end="83:55">(<argument pos:start="81:33" pos:end="81:71"><expr pos:start="81:33" pos:end="81:71"><ternary pos:start="81:33" pos:end="81:71"><condition pos:start="81:33" pos:end="81:38"><expr pos:start="81:33" pos:end="81:36"><name pos:start="81:33" pos:end="81:36">nand</name></expr> ?</condition><then pos:start="81:40" pos:end="81:64"> <expr pos:start="81:40" pos:end="81:64"><call pos:start="81:40" pos:end="81:64"><name pos:start="81:40" pos:end="81:58">blk_by_legacy_dinfo</name><argument_list pos:start="81:59" pos:end="81:64">(<argument pos:start="81:60" pos:end="81:63"><expr pos:start="81:60" pos:end="81:63"><name pos:start="81:60" pos:end="81:63">nand</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="81:66" pos:end="81:71">: <expr pos:start="81:68" pos:end="81:71"><name pos:start="81:68" pos:end="81:71">NULL</name></expr></else></ternary></expr></argument>,

                                <argument pos:start="83:33" pos:end="83:48"><expr pos:start="83:33" pos:end="83:48"><name pos:start="83:33" pos:end="83:48">NAND_MFR_STMICRO</name></expr></argument>, <argument pos:start="83:51" pos:end="83:54"><expr pos:start="83:51" pos:end="83:54"><literal type="number" pos:start="83:51" pos:end="83:54">0x39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="87:46"><expr pos:start="85:5" pos:end="87:45"><call pos:start="85:5" pos:end="87:45"><name pos:start="85:5" pos:end="85:25">memory_region_init_io</name><argument_list pos:start="85:26" pos:end="87:45">(<argument pos:start="85:27" pos:end="85:43"><expr pos:start="85:27" pos:end="85:43"><operator pos:start="85:27" pos:end="85:27">&amp;</operator><name pos:start="85:28" pos:end="85:43"><name pos:start="85:28" pos:end="85:37">nand_state</name><operator pos:start="85:38" pos:end="85:38">.</operator><name pos:start="85:39" pos:end="85:43">iomem</name></name></expr></argument>, <argument pos:start="85:46" pos:end="85:49"><expr pos:start="85:46" pos:end="85:49"><name pos:start="85:46" pos:end="85:49">NULL</name></expr></argument>, <argument pos:start="85:52" pos:end="85:60"><expr pos:start="85:52" pos:end="85:60"><operator pos:start="85:52" pos:end="85:52">&amp;</operator><name pos:start="85:53" pos:end="85:60">nand_ops</name></expr></argument>, <argument pos:start="85:63" pos:end="85:73"><expr pos:start="85:63" pos:end="85:73"><operator pos:start="85:63" pos:end="85:63">&amp;</operator><name pos:start="85:64" pos:end="85:73">nand_state</name></expr></argument>,

                          <argument pos:start="87:27" pos:end="87:32"><expr pos:start="87:27" pos:end="87:32"><literal type="string" pos:start="87:27" pos:end="87:32">"nand"</literal></expr></argument>, <argument pos:start="87:35" pos:end="87:44"><expr pos:start="87:35" pos:end="87:44"><literal type="number" pos:start="87:35" pos:end="87:44">0x05000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="91:51"><expr pos:start="89:5" pos:end="91:50"><call pos:start="89:5" pos:end="91:50"><name pos:start="89:5" pos:end="89:31">memory_region_add_subregion</name><argument_list pos:start="89:32" pos:end="91:50">(<argument pos:start="89:33" pos:end="89:49"><expr pos:start="89:33" pos:end="89:49"><name pos:start="89:33" pos:end="89:49">address_space_mem</name></expr></argument>, <argument pos:start="89:52" pos:end="89:61"><expr pos:start="89:52" pos:end="89:61"><literal type="number" pos:start="89:52" pos:end="89:61">0x10000000</literal></expr></argument>,

                                <argument pos:start="91:33" pos:end="91:49"><expr pos:start="91:33" pos:end="91:49"><operator pos:start="91:33" pos:end="91:33">&amp;</operator><name pos:start="91:34" pos:end="91:49"><name pos:start="91:34" pos:end="91:43">nand_state</name><operator pos:start="91:44" pos:end="91:44">.</operator><name pos:start="91:45" pos:end="91:49">iomem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:34"><expr pos:start="95:5" pos:end="95:33"><name pos:start="95:5" pos:end="95:19"><name pos:start="95:5" pos:end="95:14">gpio_state</name><operator pos:start="95:15" pos:end="95:15">.</operator><name pos:start="95:16" pos:end="95:19">nand</name></name> <operator pos:start="95:21" pos:end="95:21">=</operator> <operator pos:start="95:23" pos:end="95:23">&amp;</operator><name pos:start="95:24" pos:end="95:33">nand_state</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="99:40"><expr pos:start="97:5" pos:end="99:39"><call pos:start="97:5" pos:end="99:39"><name pos:start="97:5" pos:end="97:25">memory_region_init_io</name><argument_list pos:start="97:26" pos:end="99:39">(<argument pos:start="97:27" pos:end="97:43"><expr pos:start="97:27" pos:end="97:43"><operator pos:start="97:27" pos:end="97:27">&amp;</operator><name pos:start="97:28" pos:end="97:43"><name pos:start="97:28" pos:end="97:37">gpio_state</name><operator pos:start="97:38" pos:end="97:38">.</operator><name pos:start="97:39" pos:end="97:43">iomem</name></name></expr></argument>, <argument pos:start="97:46" pos:end="97:49"><expr pos:start="97:46" pos:end="97:49"><name pos:start="97:46" pos:end="97:49">NULL</name></expr></argument>, <argument pos:start="97:52" pos:end="97:60"><expr pos:start="97:52" pos:end="97:60"><operator pos:start="97:52" pos:end="97:52">&amp;</operator><name pos:start="97:53" pos:end="97:60">gpio_ops</name></expr></argument>, <argument pos:start="97:63" pos:end="97:73"><expr pos:start="97:63" pos:end="97:73"><operator pos:start="97:63" pos:end="97:63">&amp;</operator><name pos:start="97:64" pos:end="97:73">gpio_state</name></expr></argument>,

                          <argument pos:start="99:27" pos:end="99:32"><expr pos:start="99:27" pos:end="99:32"><literal type="string" pos:start="99:27" pos:end="99:32">"gpio"</literal></expr></argument>, <argument pos:start="99:35" pos:end="99:38"><expr pos:start="99:35" pos:end="99:38"><literal type="number" pos:start="99:35" pos:end="99:38">0x5c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="103:51"><expr pos:start="101:5" pos:end="103:50"><call pos:start="101:5" pos:end="103:50"><name pos:start="101:5" pos:end="101:31">memory_region_add_subregion</name><argument_list pos:start="101:32" pos:end="103:50">(<argument pos:start="101:33" pos:end="101:49"><expr pos:start="101:33" pos:end="101:49"><name pos:start="101:33" pos:end="101:49">address_space_mem</name></expr></argument>, <argument pos:start="101:52" pos:end="101:61"><expr pos:start="101:52" pos:end="101:61"><literal type="number" pos:start="101:52" pos:end="101:61">0x3001a000</literal></expr></argument>,

                                <argument pos:start="103:33" pos:end="103:49"><expr pos:start="103:33" pos:end="103:49"><operator pos:start="103:33" pos:end="103:33">&amp;</operator><name pos:start="103:34" pos:end="103:49"><name pos:start="103:34" pos:end="103:43">gpio_state</name><operator pos:start="103:44" pos:end="103:44">.</operator><name pos:start="103:45" pos:end="103:49">iomem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="109:5" pos:end="109:43"><expr pos:start="109:5" pos:end="109:42"><name pos:start="109:5" pos:end="109:7">dev</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="109:42"><name pos:start="109:11" pos:end="109:21">qdev_create</name><argument_list pos:start="109:22" pos:end="109:42">(<argument pos:start="109:23" pos:end="109:26"><expr pos:start="109:23" pos:end="109:26"><name pos:start="109:23" pos:end="109:26">NULL</name></expr></argument>, <argument pos:start="109:29" pos:end="109:41"><expr pos:start="109:29" pos:end="109:41"><literal type="string" pos:start="109:29" pos:end="109:41">"etraxfs,pic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="111:5" pos:end="111:74">/* FIXME: Is there a proper way to signal vectors to the CPU core?  */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:71"><expr pos:start="113:5" pos:end="113:70"><call pos:start="113:5" pos:end="113:70"><name pos:start="113:5" pos:end="113:21">qdev_prop_set_ptr</name><argument_list pos:start="113:22" pos:end="113:70">(<argument pos:start="113:23" pos:end="113:25"><expr pos:start="113:23" pos:end="113:25"><name pos:start="113:23" pos:end="113:25">dev</name></expr></argument>, <argument pos:start="113:28" pos:end="113:45"><expr pos:start="113:28" pos:end="113:45"><literal type="string" pos:start="113:28" pos:end="113:45">"interrupt_vector"</literal></expr></argument>, <argument pos:start="113:48" pos:end="113:69"><expr pos:start="113:48" pos:end="113:69"><operator pos:start="113:48" pos:end="113:48">&amp;</operator><name pos:start="113:49" pos:end="113:69"><name pos:start="113:49" pos:end="113:51">env</name><operator pos:start="113:52" pos:end="113:53">-&gt;</operator><name pos:start="113:54" pos:end="113:69">interrupt_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:26"><expr pos:start="115:5" pos:end="115:25"><call pos:start="115:5" pos:end="115:25"><name pos:start="115:5" pos:end="115:20">qdev_init_nofail</name><argument_list pos:start="115:21" pos:end="115:25">(<argument pos:start="115:22" pos:end="115:24"><expr pos:start="115:22" pos:end="115:24"><name pos:start="115:22" pos:end="115:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:28"><expr pos:start="117:5" pos:end="117:27"><name pos:start="117:5" pos:end="117:5">s</name> <operator pos:start="117:7" pos:end="117:7">=</operator> <call pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:22">SYS_BUS_DEVICE</name><argument_list pos:start="117:23" pos:end="117:27">(<argument pos:start="117:24" pos:end="117:26"><expr pos:start="117:24" pos:end="117:26"><name pos:start="117:24" pos:end="117:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:38"><expr pos:start="119:5" pos:end="119:37"><call pos:start="119:5" pos:end="119:37"><name pos:start="119:5" pos:end="119:19">sysbus_mmio_map</name><argument_list pos:start="119:20" pos:end="119:37">(<argument pos:start="119:21" pos:end="119:21"><expr pos:start="119:21" pos:end="119:21"><name pos:start="119:21" pos:end="119:21">s</name></expr></argument>, <argument pos:start="119:24" pos:end="119:24"><expr pos:start="119:24" pos:end="119:24"><literal type="number" pos:start="119:24" pos:end="119:24">0</literal></expr></argument>, <argument pos:start="119:27" pos:end="119:36"><expr pos:start="119:27" pos:end="119:36"><literal type="number" pos:start="119:27" pos:end="119:36">0x3001c000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:74"><expr pos:start="121:5" pos:end="121:73"><call pos:start="121:5" pos:end="121:73"><name pos:start="121:5" pos:end="121:22">sysbus_connect_irq</name><argument_list pos:start="121:23" pos:end="121:73">(<argument pos:start="121:24" pos:end="121:24"><expr pos:start="121:24" pos:end="121:24"><name pos:start="121:24" pos:end="121:24">s</name></expr></argument>, <argument pos:start="121:27" pos:end="121:27"><expr pos:start="121:27" pos:end="121:27"><literal type="number" pos:start="121:27" pos:end="121:27">0</literal></expr></argument>, <argument pos:start="121:30" pos:end="121:72"><expr pos:start="121:30" pos:end="121:72"><call pos:start="121:30" pos:end="121:72"><name pos:start="121:30" pos:end="121:45">qdev_get_gpio_in</name><argument_list pos:start="121:46" pos:end="121:72">(<argument pos:start="121:47" pos:end="121:57"><expr pos:start="121:47" pos:end="121:57"><call pos:start="121:47" pos:end="121:57"><name pos:start="121:47" pos:end="121:52">DEVICE</name><argument_list pos:start="121:53" pos:end="121:57">(<argument pos:start="121:54" pos:end="121:56"><expr pos:start="121:54" pos:end="121:56"><name pos:start="121:54" pos:end="121:56">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="121:60" pos:end="121:71"><expr pos:start="121:60" pos:end="121:71"><name pos:start="121:60" pos:end="121:71">CRIS_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:74"><expr pos:start="123:5" pos:end="123:73"><call pos:start="123:5" pos:end="123:73"><name pos:start="123:5" pos:end="123:22">sysbus_connect_irq</name><argument_list pos:start="123:23" pos:end="123:73">(<argument pos:start="123:24" pos:end="123:24"><expr pos:start="123:24" pos:end="123:24"><name pos:start="123:24" pos:end="123:24">s</name></expr></argument>, <argument pos:start="123:27" pos:end="123:27"><expr pos:start="123:27" pos:end="123:27"><literal type="number" pos:start="123:27" pos:end="123:27">1</literal></expr></argument>, <argument pos:start="123:30" pos:end="123:72"><expr pos:start="123:30" pos:end="123:72"><call pos:start="123:30" pos:end="123:72"><name pos:start="123:30" pos:end="123:45">qdev_get_gpio_in</name><argument_list pos:start="123:46" pos:end="123:72">(<argument pos:start="123:47" pos:end="123:57"><expr pos:start="123:47" pos:end="123:57"><call pos:start="123:47" pos:end="123:57"><name pos:start="123:47" pos:end="123:52">DEVICE</name><argument_list pos:start="123:53" pos:end="123:57">(<argument pos:start="123:54" pos:end="123:56"><expr pos:start="123:54" pos:end="123:56"><name pos:start="123:54" pos:end="123:56">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="123:60" pos:end="123:71"><expr pos:start="123:60" pos:end="123:71"><name pos:start="123:60" pos:end="123:71">CRIS_CPU_NMI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="125:5" pos:end="129:5">for <control pos:start="125:9" pos:end="125:28">(<init pos:start="125:10" pos:end="125:15"><expr pos:start="125:10" pos:end="125:14"><name pos:start="125:10" pos:end="125:10">i</name> <operator pos:start="125:12" pos:end="125:12">=</operator> <literal type="number" pos:start="125:14" pos:end="125:14">0</literal></expr>;</init> <condition pos:start="125:17" pos:end="125:23"><expr pos:start="125:17" pos:end="125:22"><name pos:start="125:17" pos:end="125:17">i</name> <operator pos:start="125:19" pos:end="125:19">&lt;</operator> <literal type="number" pos:start="125:21" pos:end="125:22">30</literal></expr>;</condition> <incr pos:start="125:25" pos:end="125:27"><expr pos:start="125:25" pos:end="125:27"><name pos:start="125:25" pos:end="125:25">i</name><operator pos:start="125:26" pos:end="125:27">++</operator></expr></incr>)</control> <block pos:start="125:30" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:42">

        <expr_stmt pos:start="127:9" pos:end="127:42"><expr pos:start="127:9" pos:end="127:41"><name pos:start="127:9" pos:end="127:14"><name pos:start="127:9" pos:end="127:11">irq</name><index pos:start="127:12" pos:end="127:14">[<expr pos:start="127:13" pos:end="127:13"><name pos:start="127:13" pos:end="127:13">i</name></expr>]</index></name> <operator pos:start="127:16" pos:end="127:16">=</operator> <call pos:start="127:18" pos:end="127:41"><name pos:start="127:18" pos:end="127:33">qdev_get_gpio_in</name><argument_list pos:start="127:34" pos:end="127:41">(<argument pos:start="127:35" pos:end="127:37"><expr pos:start="127:35" pos:end="127:37"><name pos:start="127:35" pos:end="127:37">dev</name></expr></argument>, <argument pos:start="127:40" pos:end="127:40"><expr pos:start="127:40" pos:end="127:40"><name pos:start="127:40" pos:end="127:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="131:5" pos:end="131:39"><expr pos:start="131:5" pos:end="131:38"><name pos:start="131:5" pos:end="131:10"><name pos:start="131:5" pos:end="131:7">nmi</name><index pos:start="131:8" pos:end="131:10">[<expr pos:start="131:9" pos:end="131:9"><literal type="number" pos:start="131:9" pos:end="131:9">0</literal></expr>]</index></name> <operator pos:start="131:12" pos:end="131:12">=</operator> <call pos:start="131:14" pos:end="131:38"><name pos:start="131:14" pos:end="131:29">qdev_get_gpio_in</name><argument_list pos:start="131:30" pos:end="131:38">(<argument pos:start="131:31" pos:end="131:33"><expr pos:start="131:31" pos:end="131:33"><name pos:start="131:31" pos:end="131:33">dev</name></expr></argument>, <argument pos:start="131:36" pos:end="131:37"><expr pos:start="131:36" pos:end="131:37"><literal type="number" pos:start="131:36" pos:end="131:37">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:39"><expr pos:start="133:5" pos:end="133:38"><name pos:start="133:5" pos:end="133:10"><name pos:start="133:5" pos:end="133:7">nmi</name><index pos:start="133:8" pos:end="133:10">[<expr pos:start="133:9" pos:end="133:9"><literal type="number" pos:start="133:9" pos:end="133:9">1</literal></expr>]</index></name> <operator pos:start="133:12" pos:end="133:12">=</operator> <call pos:start="133:14" pos:end="133:38"><name pos:start="133:14" pos:end="133:29">qdev_get_gpio_in</name><argument_list pos:start="133:30" pos:end="133:38">(<argument pos:start="133:31" pos:end="133:33"><expr pos:start="133:31" pos:end="133:33"><name pos:start="133:31" pos:end="133:33">dev</name></expr></argument>, <argument pos:start="133:36" pos:end="133:37"><expr pos:start="133:36" pos:end="133:37"><literal type="number" pos:start="133:36" pos:end="133:37">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:53"><expr pos:start="137:5" pos:end="137:52"><name pos:start="137:5" pos:end="137:16">etraxfs_dmac</name> <operator pos:start="137:18" pos:end="137:18">=</operator> <call pos:start="137:20" pos:end="137:52"><name pos:start="137:20" pos:end="137:36">etraxfs_dmac_init</name><argument_list pos:start="137:37" pos:end="137:52">(<argument pos:start="137:38" pos:end="137:47"><expr pos:start="137:38" pos:end="137:47"><literal type="number" pos:start="137:38" pos:end="137:47">0x30000000</literal></expr></argument>, <argument pos:start="137:50" pos:end="137:51"><expr pos:start="137:50" pos:end="137:51"><literal type="number" pos:start="137:50" pos:end="137:51">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="139:5" pos:end="145:5">for <control pos:start="139:9" pos:end="139:28">(<init pos:start="139:10" pos:end="139:15"><expr pos:start="139:10" pos:end="139:14"><name pos:start="139:10" pos:end="139:10">i</name> <operator pos:start="139:12" pos:end="139:12">=</operator> <literal type="number" pos:start="139:14" pos:end="139:14">0</literal></expr>;</init> <condition pos:start="139:17" pos:end="139:23"><expr pos:start="139:17" pos:end="139:22"><name pos:start="139:17" pos:end="139:17">i</name> <operator pos:start="139:19" pos:end="139:19">&lt;</operator> <literal type="number" pos:start="139:21" pos:end="139:22">10</literal></expr>;</condition> <incr pos:start="139:25" pos:end="139:27"><expr pos:start="139:25" pos:end="139:27"><name pos:start="139:25" pos:end="139:25">i</name><operator pos:start="139:26" pos:end="139:27">++</operator></expr></incr>)</control> <block pos:start="139:30" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:66">

        <comment type="block" pos:start="141:9" pos:end="141:58">/* On ETRAX, odd numbered channels are inputs.  */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:66"><expr pos:start="143:9" pos:end="143:65"><call pos:start="143:9" pos:end="143:65"><name pos:start="143:9" pos:end="143:28">etraxfs_dmac_connect</name><argument_list pos:start="143:29" pos:end="143:65">(<argument pos:start="143:30" pos:end="143:41"><expr pos:start="143:30" pos:end="143:41"><name pos:start="143:30" pos:end="143:41">etraxfs_dmac</name></expr></argument>, <argument pos:start="143:44" pos:end="143:44"><expr pos:start="143:44" pos:end="143:44"><name pos:start="143:44" pos:end="143:44">i</name></expr></argument>, <argument pos:start="143:47" pos:end="143:57"><expr pos:start="143:47" pos:end="143:57"><name pos:start="143:47" pos:end="143:49">irq</name> <operator pos:start="143:51" pos:end="143:51">+</operator> <literal type="number" pos:start="143:53" pos:end="143:55">7</literal> <operator pos:start="143:55" pos:end="143:55">+</operator> <name pos:start="143:57" pos:end="143:57">i</name></expr></argument>, <argument pos:start="143:60" pos:end="143:64"><expr pos:start="143:60" pos:end="143:64"><name pos:start="143:60" pos:end="143:60">i</name> <operator pos:start="143:62" pos:end="143:62">&amp;</operator> <literal type="number" pos:start="143:64" pos:end="143:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="149:5" pos:end="149:39">/* Add the two ethernet blocks.  */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:47"><expr pos:start="151:5" pos:end="151:46"><name pos:start="151:5" pos:end="151:11">dma_eth</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <call pos:start="151:15" pos:end="151:46"><name pos:start="151:15" pos:end="151:23">g_malloc0</name><argument_list pos:start="151:24" pos:end="151:46">(<argument pos:start="151:25" pos:end="151:45"><expr pos:start="151:25" pos:end="151:45"><sizeof pos:start="151:25" pos:end="151:41">sizeof <name pos:start="151:32" pos:end="151:41"><name pos:start="151:32" pos:end="151:38">dma_eth</name><index pos:start="151:39" pos:end="151:41">[<expr pos:start="151:40" pos:end="151:40"><literal type="number" pos:start="151:40" pos:end="151:40">0</literal></expr>]</index></name></sizeof> <operator pos:start="151:43" pos:end="151:43">*</operator> <literal type="number" pos:start="151:45" pos:end="151:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="151:49" pos:end="151:75">/* Allocate 4 channels.  */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:76"><expr pos:start="153:5" pos:end="153:75"><call pos:start="153:5" pos:end="153:75"><name pos:start="153:5" pos:end="153:20">etraxfs_eth_init</name><argument_list pos:start="153:21" pos:end="153:75">(<argument pos:start="153:22" pos:end="153:33"><expr pos:start="153:22" pos:end="153:33"><operator pos:start="153:22" pos:end="153:22">&amp;</operator><name pos:start="153:23" pos:end="153:33"><name pos:start="153:23" pos:end="153:30">nd_table</name><index pos:start="153:31" pos:end="153:33">[<expr pos:start="153:32" pos:end="153:32"><literal type="number" pos:start="153:32" pos:end="153:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="153:36" pos:end="153:45"><expr pos:start="153:36" pos:end="153:45"><literal type="number" pos:start="153:36" pos:end="153:45">0x30034000</literal></expr></argument>, <argument pos:start="153:48" pos:end="153:48"><expr pos:start="153:48" pos:end="153:48"><literal type="number" pos:start="153:48" pos:end="153:48">1</literal></expr></argument>, <argument pos:start="153:51" pos:end="153:61"><expr pos:start="153:51" pos:end="153:61"><operator pos:start="153:51" pos:end="153:51">&amp;</operator><name pos:start="153:52" pos:end="153:61"><name pos:start="153:52" pos:end="153:58">dma_eth</name><index pos:start="153:59" pos:end="153:61">[<expr pos:start="153:60" pos:end="153:60"><literal type="number" pos:start="153:60" pos:end="153:60">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="153:64" pos:end="153:74"><expr pos:start="153:64" pos:end="153:74"><operator pos:start="153:64" pos:end="153:64">&amp;</operator><name pos:start="153:65" pos:end="153:74"><name pos:start="153:65" pos:end="153:71">dma_eth</name><index pos:start="153:72" pos:end="153:74">[<expr pos:start="153:73" pos:end="153:73"><literal type="number" pos:start="153:73" pos:end="153:73">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:20">(<expr pos:start="155:9" pos:end="155:19"><name pos:start="155:9" pos:end="155:15">nb_nics</name> <operator pos:start="155:17" pos:end="155:17">&gt;</operator> <literal type="number" pos:start="155:19" pos:end="155:19">1</literal></expr>)</condition> <block pos:start="155:22" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:80">

        <expr_stmt pos:start="157:9" pos:end="157:80"><expr pos:start="157:9" pos:end="157:79"><call pos:start="157:9" pos:end="157:79"><name pos:start="157:9" pos:end="157:24">etraxfs_eth_init</name><argument_list pos:start="157:25" pos:end="157:79">(<argument pos:start="157:26" pos:end="157:37"><expr pos:start="157:26" pos:end="157:37"><operator pos:start="157:26" pos:end="157:26">&amp;</operator><name pos:start="157:27" pos:end="157:37"><name pos:start="157:27" pos:end="157:34">nd_table</name><index pos:start="157:35" pos:end="157:37">[<expr pos:start="157:36" pos:end="157:36"><literal type="number" pos:start="157:36" pos:end="157:36">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="157:40" pos:end="157:49"><expr pos:start="157:40" pos:end="157:49"><literal type="number" pos:start="157:40" pos:end="157:49">0x30036000</literal></expr></argument>, <argument pos:start="157:52" pos:end="157:52"><expr pos:start="157:52" pos:end="157:52"><literal type="number" pos:start="157:52" pos:end="157:52">2</literal></expr></argument>, <argument pos:start="157:55" pos:end="157:65"><expr pos:start="157:55" pos:end="157:65"><operator pos:start="157:55" pos:end="157:55">&amp;</operator><name pos:start="157:56" pos:end="157:65"><name pos:start="157:56" pos:end="157:62">dma_eth</name><index pos:start="157:63" pos:end="157:65">[<expr pos:start="157:64" pos:end="157:64"><literal type="number" pos:start="157:64" pos:end="157:64">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="157:68" pos:end="157:78"><expr pos:start="157:68" pos:end="157:78"><operator pos:start="157:68" pos:end="157:68">&amp;</operator><name pos:start="157:69" pos:end="157:78"><name pos:start="157:69" pos:end="157:75">dma_eth</name><index pos:start="157:76" pos:end="157:78">[<expr pos:start="157:77" pos:end="157:77"><literal type="number" pos:start="157:77" pos:end="157:77">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:71">/* The DMA Connector block is missing, hardwire things for now.  */</comment>

    <expr_stmt pos:start="165:5" pos:end="165:62"><expr pos:start="165:5" pos:end="165:61"><call pos:start="165:5" pos:end="165:61"><name pos:start="165:5" pos:end="165:31">etraxfs_dmac_connect_client</name><argument_list pos:start="165:32" pos:end="165:61">(<argument pos:start="165:33" pos:end="165:44"><expr pos:start="165:33" pos:end="165:44"><name pos:start="165:33" pos:end="165:44">etraxfs_dmac</name></expr></argument>, <argument pos:start="165:47" pos:end="165:47"><expr pos:start="165:47" pos:end="165:47"><literal type="number" pos:start="165:47" pos:end="165:47">0</literal></expr></argument>, <argument pos:start="165:50" pos:end="165:60"><expr pos:start="165:50" pos:end="165:60"><operator pos:start="165:50" pos:end="165:50">&amp;</operator><name pos:start="165:51" pos:end="165:60"><name pos:start="165:51" pos:end="165:57">dma_eth</name><index pos:start="165:58" pos:end="165:60">[<expr pos:start="165:59" pos:end="165:59"><literal type="number" pos:start="165:59" pos:end="165:59">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:62"><expr pos:start="167:5" pos:end="167:61"><call pos:start="167:5" pos:end="167:61"><name pos:start="167:5" pos:end="167:31">etraxfs_dmac_connect_client</name><argument_list pos:start="167:32" pos:end="167:61">(<argument pos:start="167:33" pos:end="167:44"><expr pos:start="167:33" pos:end="167:44"><name pos:start="167:33" pos:end="167:44">etraxfs_dmac</name></expr></argument>, <argument pos:start="167:47" pos:end="167:47"><expr pos:start="167:47" pos:end="167:47"><literal type="number" pos:start="167:47" pos:end="167:47">1</literal></expr></argument>, <argument pos:start="167:50" pos:end="167:60"><expr pos:start="167:50" pos:end="167:60"><operator pos:start="167:50" pos:end="167:50">&amp;</operator><name pos:start="167:51" pos:end="167:60"><name pos:start="167:51" pos:end="167:57">dma_eth</name><index pos:start="167:58" pos:end="167:60">[<expr pos:start="167:59" pos:end="167:59"><literal type="number" pos:start="167:59" pos:end="167:59">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="175:5"><if pos:start="169:5" pos:end="175:5">if <condition pos:start="169:8" pos:end="169:20">(<expr pos:start="169:9" pos:end="169:19"><name pos:start="169:9" pos:end="169:15">nb_nics</name> <operator pos:start="169:17" pos:end="169:17">&gt;</operator> <literal type="number" pos:start="169:19" pos:end="169:19">1</literal></expr>)</condition> <block pos:start="169:22" pos:end="175:5">{<block_content pos:start="171:9" pos:end="173:66">

        <expr_stmt pos:start="171:9" pos:end="171:66"><expr pos:start="171:9" pos:end="171:65"><call pos:start="171:9" pos:end="171:65"><name pos:start="171:9" pos:end="171:35">etraxfs_dmac_connect_client</name><argument_list pos:start="171:36" pos:end="171:65">(<argument pos:start="171:37" pos:end="171:48"><expr pos:start="171:37" pos:end="171:48"><name pos:start="171:37" pos:end="171:48">etraxfs_dmac</name></expr></argument>, <argument pos:start="171:51" pos:end="171:51"><expr pos:start="171:51" pos:end="171:51"><literal type="number" pos:start="171:51" pos:end="171:51">6</literal></expr></argument>, <argument pos:start="171:54" pos:end="171:64"><expr pos:start="171:54" pos:end="171:64"><operator pos:start="171:54" pos:end="171:54">&amp;</operator><name pos:start="171:55" pos:end="171:64"><name pos:start="171:55" pos:end="171:61">dma_eth</name><index pos:start="171:62" pos:end="171:64">[<expr pos:start="171:63" pos:end="171:63"><literal type="number" pos:start="171:63" pos:end="171:63">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:66"><expr pos:start="173:9" pos:end="173:65"><call pos:start="173:9" pos:end="173:65"><name pos:start="173:9" pos:end="173:35">etraxfs_dmac_connect_client</name><argument_list pos:start="173:36" pos:end="173:65">(<argument pos:start="173:37" pos:end="173:48"><expr pos:start="173:37" pos:end="173:48"><name pos:start="173:37" pos:end="173:48">etraxfs_dmac</name></expr></argument>, <argument pos:start="173:51" pos:end="173:51"><expr pos:start="173:51" pos:end="173:51"><literal type="number" pos:start="173:51" pos:end="173:51">7</literal></expr></argument>, <argument pos:start="173:54" pos:end="173:64"><expr pos:start="173:54" pos:end="173:64"><operator pos:start="173:54" pos:end="173:54">&amp;</operator><name pos:start="173:55" pos:end="173:64"><name pos:start="173:55" pos:end="173:61">dma_eth</name><index pos:start="173:62" pos:end="173:64">[<expr pos:start="173:63" pos:end="173:63"><literal type="number" pos:start="173:63" pos:end="173:63">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:20">/* 2 timers.  */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:80"><expr pos:start="181:5" pos:end="181:79"><call pos:start="181:5" pos:end="181:79"><name pos:start="181:5" pos:end="181:25">sysbus_create_varargs</name><argument_list pos:start="181:26" pos:end="181:79">(<argument pos:start="181:27" pos:end="181:41"><expr pos:start="181:27" pos:end="181:41"><literal type="string" pos:start="181:27" pos:end="181:41">"etraxfs,timer"</literal></expr></argument>, <argument pos:start="181:44" pos:end="181:53"><expr pos:start="181:44" pos:end="181:53"><literal type="number" pos:start="181:44" pos:end="181:53">0x3001e000</literal></expr></argument>, <argument pos:start="181:56" pos:end="181:64"><expr pos:start="181:56" pos:end="181:64"><name pos:start="181:56" pos:end="181:64"><name pos:start="181:56" pos:end="181:58">irq</name><index pos:start="181:59" pos:end="181:64">[<expr pos:start="181:60" pos:end="181:63"><literal type="number" pos:start="181:60" pos:end="181:63">0x1b</literal></expr>]</index></name></expr></argument>, <argument pos:start="181:67" pos:end="181:72"><expr pos:start="181:67" pos:end="181:72"><name pos:start="181:67" pos:end="181:72"><name pos:start="181:67" pos:end="181:69">nmi</name><index pos:start="181:70" pos:end="181:72">[<expr pos:start="181:71" pos:end="181:71"><literal type="number" pos:start="181:71" pos:end="181:71">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="181:75" pos:end="181:78"><expr pos:start="181:75" pos:end="181:78"><name pos:start="181:75" pos:end="181:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:80"><expr pos:start="183:5" pos:end="183:79"><call pos:start="183:5" pos:end="183:79"><name pos:start="183:5" pos:end="183:25">sysbus_create_varargs</name><argument_list pos:start="183:26" pos:end="183:79">(<argument pos:start="183:27" pos:end="183:41"><expr pos:start="183:27" pos:end="183:41"><literal type="string" pos:start="183:27" pos:end="183:41">"etraxfs,timer"</literal></expr></argument>, <argument pos:start="183:44" pos:end="183:53"><expr pos:start="183:44" pos:end="183:53"><literal type="number" pos:start="183:44" pos:end="183:53">0x3005e000</literal></expr></argument>, <argument pos:start="183:56" pos:end="183:64"><expr pos:start="183:56" pos:end="183:64"><name pos:start="183:56" pos:end="183:64"><name pos:start="183:56" pos:end="183:58">irq</name><index pos:start="183:59" pos:end="183:64">[<expr pos:start="183:60" pos:end="183:63"><literal type="number" pos:start="183:60" pos:end="183:63">0x1b</literal></expr>]</index></name></expr></argument>, <argument pos:start="183:67" pos:end="183:72"><expr pos:start="183:67" pos:end="183:72"><name pos:start="183:67" pos:end="183:72"><name pos:start="183:67" pos:end="183:69">nmi</name><index pos:start="183:70" pos:end="183:72">[<expr pos:start="183:71" pos:end="183:71"><literal type="number" pos:start="183:71" pos:end="183:71">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="183:75" pos:end="183:78"><expr pos:start="183:75" pos:end="183:78"><name pos:start="183:75" pos:end="183:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="187:5" pos:end="193:5">for <control pos:start="187:9" pos:end="187:27">(<init pos:start="187:10" pos:end="187:15"><expr pos:start="187:10" pos:end="187:14"><name pos:start="187:10" pos:end="187:10">i</name> <operator pos:start="187:12" pos:end="187:12">=</operator> <literal type="number" pos:start="187:14" pos:end="187:14">0</literal></expr>;</init> <condition pos:start="187:17" pos:end="187:22"><expr pos:start="187:17" pos:end="187:21"><name pos:start="187:17" pos:end="187:17">i</name> <operator pos:start="187:19" pos:end="187:19">&lt;</operator> <literal type="number" pos:start="187:21" pos:end="187:21">4</literal></expr>;</condition> <incr pos:start="187:24" pos:end="187:26"><expr pos:start="187:24" pos:end="187:26"><name pos:start="187:24" pos:end="187:24">i</name><operator pos:start="187:25" pos:end="187:26">++</operator></expr></incr>)</control> <block pos:start="187:29" pos:end="193:5">{<block_content pos:start="189:9" pos:end="191:44">

        <expr_stmt pos:start="189:9" pos:end="191:44"><expr pos:start="189:9" pos:end="191:43"><call pos:start="189:9" pos:end="191:43"><name pos:start="189:9" pos:end="189:28">sysbus_create_simple</name><argument_list pos:start="189:29" pos:end="191:43">(<argument pos:start="189:30" pos:end="189:45"><expr pos:start="189:30" pos:end="189:45"><literal type="string" pos:start="189:30" pos:end="189:45">"etraxfs,serial"</literal></expr></argument>, <argument pos:start="189:48" pos:end="189:70"><expr pos:start="189:48" pos:end="189:70"><literal type="number" pos:start="189:48" pos:end="189:59">0x30026000</literal> <operator pos:start="189:59" pos:end="189:59">+</operator> <name pos:start="189:61" pos:end="189:61">i</name> <operator pos:start="189:63" pos:end="189:63">*</operator> <literal type="number" pos:start="189:65" pos:end="189:70">0x2000</literal></expr></argument>,

                             <argument pos:start="191:30" pos:end="191:42"><expr pos:start="191:30" pos:end="191:42"><name pos:start="191:30" pos:end="191:42"><name pos:start="191:30" pos:end="191:32">irq</name><index pos:start="191:33" pos:end="191:42">[<expr pos:start="191:34" pos:end="191:41"><literal type="number" pos:start="191:34" pos:end="191:39">0x14</literal> <operator pos:start="191:39" pos:end="191:39">+</operator> <name pos:start="191:41" pos:end="191:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="197:5" pos:end="211:5"><if pos:start="197:5" pos:end="205:5">if <condition pos:start="197:8" pos:end="197:24">(<expr pos:start="197:9" pos:end="197:23"><name pos:start="197:9" pos:end="197:23">kernel_filename</name></expr>)</condition> <block pos:start="197:26" pos:end="205:5">{<block_content pos:start="199:9" pos:end="203:34">

        <expr_stmt pos:start="199:9" pos:end="199:44"><expr pos:start="199:9" pos:end="199:43"><name pos:start="199:9" pos:end="199:25"><name pos:start="199:9" pos:end="199:10">li</name><operator pos:start="199:11" pos:end="199:11">.</operator><name pos:start="199:12" pos:end="199:25">image_filename</name></name> <operator pos:start="199:27" pos:end="199:27">=</operator> <name pos:start="199:29" pos:end="199:43">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:36"><expr pos:start="201:9" pos:end="201:35"><name pos:start="201:9" pos:end="201:18"><name pos:start="201:9" pos:end="201:10">li</name><operator pos:start="201:11" pos:end="201:11">.</operator><name pos:start="201:12" pos:end="201:18">cmdline</name></name> <operator pos:start="201:20" pos:end="201:20">=</operator> <name pos:start="201:22" pos:end="201:35">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:34"><expr pos:start="203:9" pos:end="203:33"><call pos:start="203:9" pos:end="203:33"><name pos:start="203:9" pos:end="203:23">cris_load_image</name><argument_list pos:start="203:24" pos:end="203:33">(<argument pos:start="203:25" pos:end="203:27"><expr pos:start="203:25" pos:end="203:27"><name pos:start="203:25" pos:end="203:27">cpu</name></expr></argument>, <argument pos:start="203:30" pos:end="203:32"><expr pos:start="203:30" pos:end="203:32"><operator pos:start="203:30" pos:end="203:30">&amp;</operator><name pos:start="203:31" pos:end="203:32">li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="205:7" pos:end="211:5">else if <condition pos:start="205:15" pos:end="205:32">(<expr pos:start="205:16" pos:end="205:31"><operator pos:start="205:16" pos:end="205:16">!</operator><call pos:start="205:17" pos:end="205:31"><name pos:start="205:17" pos:end="205:29">qtest_enabled</name><argument_list pos:start="205:30" pos:end="205:31">()</argument_list></call></expr>)</condition> <block pos:start="205:34" pos:end="211:5">{<block_content pos:start="207:9" pos:end="209:16">

        <expr_stmt pos:start="207:9" pos:end="207:60"><expr pos:start="207:9" pos:end="207:59"><call pos:start="207:9" pos:end="207:59"><name pos:start="207:9" pos:end="207:15">fprintf</name><argument_list pos:start="207:16" pos:end="207:59">(<argument pos:start="207:17" pos:end="207:22"><expr pos:start="207:17" pos:end="207:22"><name pos:start="207:17" pos:end="207:22">stderr</name></expr></argument>, <argument pos:start="207:25" pos:end="207:58"><expr pos:start="207:25" pos:end="207:58"><literal type="string" pos:start="207:25" pos:end="207:58">"Kernel image must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:16"><expr pos:start="209:9" pos:end="209:15"><call pos:start="209:9" pos:end="209:15"><name pos:start="209:9" pos:end="209:12">exit</name><argument_list pos:start="209:13" pos:end="209:15">(<argument pos:start="209:14" pos:end="209:14"><expr pos:start="209:14" pos:end="209:14"><literal type="number" pos:start="209:14" pos:end="209:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
